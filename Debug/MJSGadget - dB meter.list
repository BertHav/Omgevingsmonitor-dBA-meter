
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f600  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e20  0801f6c0  0801f6c0  000206c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080214e0  080214e0  0002341c  2**0
                  CONTENTS
  4 .ARM          00000008  080214e0  080214e0  000224e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080214e8  080214e8  0002341c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080214e8  080214e8  000224e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080214ec  080214ec  000224ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000041c  20000000  080214f0  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034a8  2000041c  0802190c  0002341c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  200038c4  0802190c  000238c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002341c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031876  00000000  00000000  00023444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008f8b  00000000  00000000  00054cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027d8  00000000  00000000  0005dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d59  00000000  00000000  00060420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002237d  00000000  00000000  00062179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f41f  00000000  00000000  000844f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f377  00000000  00000000  000c3915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00162c8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a23c  00000000  00000000  00162d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0016cfe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016f565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000041c 	.word	0x2000041c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801f6a8 	.word	0x0801f6a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000420 	.word	0x20000420
 8000104:	0801f6a8 	.word	0x0801f6a8

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08020788 	.word	0x08020788
 8000e0c:	080207c8 	.word	0x080207c8
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08020804 	.word	0x08020804
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f009 fc54 	bl	800cf10 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f009 fcab 	bl	800cfe0 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f009 fc5e 	bl	800cf6c <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000438 	.word	0x20000438

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f009 fbda 	bl	800cf10 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f009 fc09 	bl	800cf88 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f009 fbed 	bl	800cf6c <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000988 	.word	0x20000988

080037b0 <setCharges>:
void setCharges(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037b4:	f002 fae0 	bl	8005d78 <ReadBatteryVoltage>
 80037b8:	1c02      	adds	r2, r0, #0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <setCharges+0x20>)
 80037bc:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037be:	f002 fb3d 	bl	8005e3c <ReadSolarVoltage>
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <setCharges+0x24>)
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000568 	.word	0x20000568
 80037d4:	2000056c 	.word	0x2000056c

080037d8 <checkEEprom>:
bool checkEEprom(){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <checkEEprom+0x5c>)
 80037e0:	4815      	ldr	r0, [pc, #84]	@ (8003838 <checkEEprom+0x60>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	0019      	movs	r1, r3
 80037e6:	f7ff ff87 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00e      	b.n	8003810 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <checkEEprom+0x5c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <checkEEprom+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <checkEEprom+0x64>)
 8003804:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	3201      	adds	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b0b      	cmp	r3, #11
 8003816:	d9ec      	bls.n	80037f2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <checkEEprom+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <checkEEprom+0x68>)
 8003824:	701a      	strb	r2, [r3, #0]
  return test;
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <checkEEprom+0x68>)
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	20000998 	.word	0x20000998
 8003838:	0808000c 	.word	0x0808000c
 800383c:	200009a4 	.word	0x200009a4
 8003840:	200009a8 	.word	0x200009a8

08003844 <checkName>:
bool checkName(){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <checkName+0x5c>)
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <checkName+0x60>)
 800384e:	221e      	movs	r2, #30
 8003850:	0019      	movs	r1, r3
 8003852:	f7ff ff51 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00e      	b.n	800387c <checkName+0x38>
    configSum += nameConfig[i];
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <checkName+0x5c>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	001a      	movs	r2, r3
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <checkName+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <checkName+0x64>)
 8003870:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	3201      	adds	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d9ec      	bls.n	800385e <checkName+0x1a>
  }
  test = (configSum != 0);
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <checkName+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	4193      	sbcs	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <checkName+0x68>)
 8003890:	701a      	strb	r2, [r3, #0]
  return test;
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <checkName+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	200009ac 	.word	0x200009ac
 80038a4:	08080090 	.word	0x08080090
 80038a8:	200009cc 	.word	0x200009cc
 80038ac:	200009d0 	.word	0x200009d0

080038b0 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <ESP_GetHT+0x20>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <ESP_GetHT+0x24>)
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	20000560 	.word	0x20000560
 80038d4:	20000564 	.word	0x20000564

080038d8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	1dbb      	adds	r3, r7, #6
 80038e4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <setMeasurement+0x2c>)
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <setMeasurement+0x30>)
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setMeasurement+0x34>)
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000560 	.word	0x20000560
 8003908:	20000564 	.word	0x20000564
 800390c:	20000570 	.word	0x20000570

08003910 <setMic>:
void setMic(float dB){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <setMic+0x18>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000574 	.word	0x20000574

0800392c <SetConfigMode>:

void SetConfigMode(){
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <SetConfigMode+0x10>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000547 	.word	0x20000547

08003940 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003944:	f008 fb0e 	bl	800bf64 <HAL_GetUIDw0>
 8003948:	0002      	movs	r2, r0
 800394a:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <ESP_GetUID+0x28>)
 800394c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800394e:	f008 fb13 	bl	800bf78 <HAL_GetUIDw1>
 8003952:	0002      	movs	r2, r0
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <ESP_GetUID+0x28>)
 8003956:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003958:	f008 fb18 	bl	800bf8c <HAL_GetUIDw2>
 800395c:	0002      	movs	r2, r0
 800395e:	4b02      	ldr	r3, [pc, #8]	@ (8003968 <ESP_GetUID+0x28>)
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	2000054c 	.word	0x2000054c

0800396c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003974:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <ESP_Init+0x2c>)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <ESP_Init+0x30>)
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003980:	f7ff ffde 	bl	8003940 <ESP_GetUID>
  beurs = checkEEprom();
 8003984:	f7ff ff28 	bl	80037d8 <checkEEprom>
 8003988:	0003      	movs	r3, r0
 800398a:	001a      	movs	r2, r3
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <ESP_Init+0x34>)
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	2000043c 	.word	0x2000043c
 800399c:	20000028 	.word	0x20000028
 80039a0:	2000054a 	.word	0x2000054a

080039a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039a4:	b5b0      	push	{r4, r5, r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	000a      	movs	r2, r1
 80039ae:	1cbb      	adds	r3, r7, #2
 80039b0:	801a      	strh	r2, [r3, #0]
  printf("ESP_Send: %s\r\n", command);
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <ESP_Send+0x54>)
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f018 fd23 	bl	801c404 <iprintf>
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <ESP_Send+0x58>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	250f      	movs	r5, #15
 80039c4:	197c      	adds	r4, r7, r5
 80039c6:	1cbb      	adds	r3, r7, #2
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0019      	movs	r1, r3
 80039ce:	f00f ff9f 	bl	8013910 <HAL_UART_Transmit_DMA>
 80039d2:	0003      	movs	r3, r0
 80039d4:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <ESP_Send+0x4a>
    Debug("Error in HAL_UART_Transmit_DMA");
 80039de:	4a08      	ldr	r2, [pc, #32]	@ (8003a00 <ESP_Send+0x5c>)
 80039e0:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <ESP_Send+0x60>)
 80039e2:	0019      	movs	r1, r3
 80039e4:	2003      	movs	r0, #3
 80039e6:	f007 fefb 	bl	800b7e0 <CreateLine>
    return false;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <ESP_Send+0x4c>
  }
  return true;
 80039ee:	2301      	movs	r3, #1
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}
 80039f8:	0801f6c0 	.word	0x0801f6c0
 80039fc:	2000043c 	.word	0x2000043c
 8003a00:	0801f6d0 	.word	0x0801f6d0
 8003a04:	0801f6f0 	.word	0x0801f6f0

08003a08 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	000a      	movs	r2, r1
 8003a12:	1cbb      	adds	r3, r7, #2
 8003a14:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a1c:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <ESP_Receive+0x60>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	250f      	movs	r5, #15
 8003a22:	197c      	adds	r4, r7, r5
 8003a24:	1cbb      	adds	r3, r7, #2
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	f010 f800 	bl	8013a30 <HAL_UART_Receive_DMA>
 8003a30:	0003      	movs	r3, r0
 8003a32:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a34:	197b      	adds	r3, r7, r5
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <ESP_Receive+0x50>
    Debug("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <ESP_Receive+0x60>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2284      	movs	r2, #132	@ 0x84
 8003a42:	589b      	ldr	r3, [r3, r2]
 8003a44:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <ESP_Receive+0x64>)
 8003a46:	490a      	ldr	r1, [pc, #40]	@ (8003a70 <ESP_Receive+0x68>)
 8003a48:	2003      	movs	r0, #3
 8003a4a:	f007 fec9 	bl	800b7e0 <CreateLine>
    RxComplete = true;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
    return false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <ESP_Receive+0x52>
  }
  return true;
 8003a58:	2301      	movs	r3, #1
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bdb0      	pop	{r4, r5, r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	20000440 	.word	0x20000440
 8003a68:	2000043c 	.word	0x2000043c
 8003a6c:	0801f6f4 	.word	0x0801f6f4
 8003a70:	0801f6f0 	.word	0x0801f6f0

08003a74 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <HAL_UART_ErrorCallback+0x2c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d107      	bne.n	8003a96 <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2284      	movs	r2, #132	@ 0x84
 8003a8a:	589b      	ldr	r3, [r3, r2]
 8003a8c:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <HAL_UART_ErrorCallback+0x30>)
 8003a8e:	4906      	ldr	r1, [pc, #24]	@ (8003aa8 <HAL_UART_ErrorCallback+0x34>)
 8003a90:	2003      	movs	r0, #3
 8003a92:	f007 fea5 	bl	800b7e0 <CreateLine>
  }
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	2000043c 	.word	0x2000043c
 8003aa4:	0801f724 	.word	0x0801f724
 8003aa8:	0801f6f0 	.word	0x0801f6f0

08003aac <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e010      	b.n	8003ade <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1898      	adds	r0, r3, r2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	001a      	movs	r2, r3
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <uint8ArrayToString+0x44>)
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f018 fd06 	bl	801c4e4 <siprintf>
  for (int i = 0; i < 12; i++)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	ddeb      	ble.n	8003abc <uint8ArrayToString+0x10>
  }
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	0801f750 	.word	0x0801f750

08003af4 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af6:	b089      	sub	sp, #36	@ 0x24
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	0002      	movs	r2, r0
 8003afc:	1dfb      	adds	r3, r7, #7
 8003afe:	701a      	strb	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b00:	4bb6      	ldr	r3, [pc, #728]	@ (8003ddc <CreateMessage+0x2e8>)
 8003b02:	48b7      	ldr	r0, [pc, #732]	@ (8003de0 <CreateMessage+0x2ec>)
 8003b04:	220c      	movs	r2, #12
 8003b06:	0019      	movs	r1, r3
 8003b08:	f7ff fdf6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b0c:	4bb5      	ldr	r3, [pc, #724]	@ (8003de4 <CreateMessage+0x2f0>)
 8003b0e:	48b6      	ldr	r0, [pc, #728]	@ (8003de8 <CreateMessage+0x2f4>)
 8003b10:	220c      	movs	r2, #12
 8003b12:	0019      	movs	r1, r3
 8003b14:	f7ff fdf0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b18:	4bb4      	ldr	r3, [pc, #720]	@ (8003dec <CreateMessage+0x2f8>)
 8003b1a:	48b5      	ldr	r0, [pc, #724]	@ (8003df0 <CreateMessage+0x2fc>)
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7ff fdea 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b24:	4bb3      	ldr	r3, [pc, #716]	@ (8003df4 <CreateMessage+0x300>)
 8003b26:	48b4      	ldr	r0, [pc, #720]	@ (8003df8 <CreateMessage+0x304>)
 8003b28:	220c      	movs	r2, #12
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7ff fde4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b30:	4bb2      	ldr	r3, [pc, #712]	@ (8003dfc <CreateMessage+0x308>)
 8003b32:	48b3      	ldr	r0, [pc, #716]	@ (8003e00 <CreateMessage+0x30c>)
 8003b34:	220c      	movs	r2, #12
 8003b36:	0019      	movs	r1, r3
 8003b38:	f7ff fdde 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b3c:	4bb1      	ldr	r3, [pc, #708]	@ (8003e04 <CreateMessage+0x310>)
 8003b3e:	48b2      	ldr	r0, [pc, #712]	@ (8003e08 <CreateMessage+0x314>)
 8003b40:	220c      	movs	r2, #12
 8003b42:	0019      	movs	r1, r3
 8003b44:	f7ff fdd8 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b48:	f7ff fe7c 	bl	8003844 <checkName>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d006      	beq.n	8003b5e <CreateMessage+0x6a>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b50:	4bae      	ldr	r3, [pc, #696]	@ (8003e0c <CreateMessage+0x318>)
 8003b52:	48af      	ldr	r0, [pc, #700]	@ (8003e10 <CreateMessage+0x31c>)
 8003b54:	221e      	movs	r2, #30
 8003b56:	0019      	movs	r1, r3
 8003b58:	f7ff fdce 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003b5c:	e005      	b.n	8003b6a <CreateMessage+0x76>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b5e:	4bab      	ldr	r3, [pc, #684]	@ (8003e0c <CreateMessage+0x318>)
 8003b60:	4aac      	ldr	r2, [pc, #688]	@ (8003e14 <CreateMessage+0x320>)
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	6019      	str	r1, [r3, #0]
 8003b66:	7912      	ldrb	r2, [r2, #4]
 8003b68:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b6a:	f7ff fe21 	bl	80037b0 <setCharges>

  memset(message, '\0', 1024);
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	00da      	lsls	r2, r3, #3
 8003b72:	4ba9      	ldr	r3, [pc, #676]	@ (8003e18 <CreateMessage+0x324>)
 8003b74:	2100      	movs	r1, #0
 8003b76:	0018      	movs	r0, r3
 8003b78:	f018 fdf8 	bl	801c76c <memset>
  uint16_t index = 0;
 8003b7c:	260e      	movs	r6, #14
 8003b7e:	19bb      	adds	r3, r7, r6
 8003b80:	2200      	movs	r2, #0
 8003b82:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b84:	19bb      	adds	r3, r7, r6
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	4ba3      	ldr	r3, [pc, #652]	@ (8003e18 <CreateMessage+0x324>)
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	4aa3      	ldr	r2, [pc, #652]	@ (8003e1c <CreateMessage+0x328>)
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f018 fca7 	bl	801c4e4 <siprintf>
  index = strlen(message);
 8003b96:	4ba0      	ldr	r3, [pc, #640]	@ (8003e18 <CreateMessage+0x324>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc fae7 	bl	800016c <strlen>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	19bb      	adds	r3, r7, r6
 8003ba2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003ba4:	4a8d      	ldr	r2, [pc, #564]	@ (8003ddc <CreateMessage+0x2e8>)
 8003ba6:	4b9e      	ldr	r3, [pc, #632]	@ (8003e20 <CreateMessage+0x32c>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff ff7e 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003bb0:	19bb      	adds	r3, r7, r6
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	4b98      	ldr	r3, [pc, #608]	@ (8003e18 <CreateMessage+0x324>)
 8003bb6:	18d4      	adds	r4, r2, r3
 8003bb8:	4b9a      	ldr	r3, [pc, #616]	@ (8003e24 <CreateMessage+0x330>)
 8003bba:	689d      	ldr	r5, [r3, #8]
 8003bbc:	4b9a      	ldr	r3, [pc, #616]	@ (8003e28 <CreateMessage+0x334>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1c18      	adds	r0, r3, #0
 8003bc2:	f7ff fc4f 	bl	8003464 <__aeabi_f2d>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	000b      	movs	r3, r1
 8003bca:	4890      	ldr	r0, [pc, #576]	@ (8003e0c <CreateMessage+0x318>)
 8003bcc:	4997      	ldr	r1, [pc, #604]	@ (8003e2c <CreateMessage+0x338>)
 8003bce:	9202      	str	r2, [sp, #8]
 8003bd0:	9303      	str	r3, [sp, #12]
 8003bd2:	4b93      	ldr	r3, [pc, #588]	@ (8003e20 <CreateMessage+0x32c>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	002a      	movs	r2, r5
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f018 fc82 	bl	801c4e4 <siprintf>
  index = strlen(message);
 8003be0:	4b8d      	ldr	r3, [pc, #564]	@ (8003e18 <CreateMessage+0x324>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7fc fac2 	bl	800016c <strlen>
 8003be8:	0002      	movs	r2, r0
 8003bea:	19bb      	adds	r3, r7, r6
 8003bec:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003bee:	4a7d      	ldr	r2, [pc, #500]	@ (8003de4 <CreateMessage+0x2f0>)
 8003bf0:	4b8b      	ldr	r3, [pc, #556]	@ (8003e20 <CreateMessage+0x32c>)
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff ff59 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003bfa:	19bb      	adds	r3, r7, r6
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	4b86      	ldr	r3, [pc, #536]	@ (8003e18 <CreateMessage+0x324>)
 8003c00:	18d4      	adds	r4, r2, r3
 8003c02:	4b88      	ldr	r3, [pc, #544]	@ (8003e24 <CreateMessage+0x330>)
 8003c04:	689d      	ldr	r5, [r3, #8]
 8003c06:	4b8a      	ldr	r3, [pc, #552]	@ (8003e30 <CreateMessage+0x33c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1c18      	adds	r0, r3, #0
 8003c0c:	f7ff fc2a 	bl	8003464 <__aeabi_f2d>
 8003c10:	0002      	movs	r2, r0
 8003c12:	000b      	movs	r3, r1
 8003c14:	487d      	ldr	r0, [pc, #500]	@ (8003e0c <CreateMessage+0x318>)
 8003c16:	4987      	ldr	r1, [pc, #540]	@ (8003e34 <CreateMessage+0x340>)
 8003c18:	9202      	str	r2, [sp, #8]
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	4b80      	ldr	r3, [pc, #512]	@ (8003e20 <CreateMessage+0x32c>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	0003      	movs	r3, r0
 8003c22:	002a      	movs	r2, r5
 8003c24:	0020      	movs	r0, r4
 8003c26:	f018 fc5d 	bl	801c4e4 <siprintf>
  index = strlen(message);
 8003c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003e18 <CreateMessage+0x324>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fc fa9d 	bl	800016c <strlen>
 8003c32:	0002      	movs	r2, r0
 8003c34:	19bb      	adds	r3, r7, r6
 8003c36:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c38:	4a6c      	ldr	r2, [pc, #432]	@ (8003dec <CreateMessage+0x2f8>)
 8003c3a:	4b79      	ldr	r3, [pc, #484]	@ (8003e20 <CreateMessage+0x32c>)
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff ff34 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dBc\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c44:	19bb      	adds	r3, r7, r6
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	4b73      	ldr	r3, [pc, #460]	@ (8003e18 <CreateMessage+0x324>)
 8003c4a:	18d4      	adds	r4, r2, r3
 8003c4c:	4b75      	ldr	r3, [pc, #468]	@ (8003e24 <CreateMessage+0x330>)
 8003c4e:	689d      	ldr	r5, [r3, #8]
 8003c50:	4b79      	ldr	r3, [pc, #484]	@ (8003e38 <CreateMessage+0x344>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c18      	adds	r0, r3, #0
 8003c56:	f7ff fc05 	bl	8003464 <__aeabi_f2d>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	000b      	movs	r3, r1
 8003c5e:	486b      	ldr	r0, [pc, #428]	@ (8003e0c <CreateMessage+0x318>)
 8003c60:	4976      	ldr	r1, [pc, #472]	@ (8003e3c <CreateMessage+0x348>)
 8003c62:	9202      	str	r2, [sp, #8]
 8003c64:	9303      	str	r3, [sp, #12]
 8003c66:	4b6e      	ldr	r3, [pc, #440]	@ (8003e20 <CreateMessage+0x32c>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	002a      	movs	r2, r5
 8003c6e:	0020      	movs	r0, r4
 8003c70:	f018 fc38 	bl	801c4e4 <siprintf>
  index = strlen(message);
 8003c74:	4b68      	ldr	r3, [pc, #416]	@ (8003e18 <CreateMessage+0x324>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fc fa78 	bl	800016c <strlen>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	19bb      	adds	r3, r7, r6
 8003c80:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c82:	4a5c      	ldr	r2, [pc, #368]	@ (8003df4 <CreateMessage+0x300>)
 8003c84:	4b66      	ldr	r3, [pc, #408]	@ (8003e20 <CreateMessage+0x32c>)
 8003c86:	0011      	movs	r1, r2
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff ff0f 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c8e:	19bb      	adds	r3, r7, r6
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	4b61      	ldr	r3, [pc, #388]	@ (8003e18 <CreateMessage+0x324>)
 8003c94:	18d0      	adds	r0, r2, r3
 8003c96:	4b63      	ldr	r3, [pc, #396]	@ (8003e24 <CreateMessage+0x330>)
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	4b69      	ldr	r3, [pc, #420]	@ (8003e40 <CreateMessage+0x34c>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	4c5b      	ldr	r4, [pc, #364]	@ (8003e0c <CreateMessage+0x318>)
 8003ca0:	4968      	ldr	r1, [pc, #416]	@ (8003e44 <CreateMessage+0x350>)
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e20 <CreateMessage+0x32c>)
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	0023      	movs	r3, r4
 8003caa:	f018 fc1b 	bl	801c4e4 <siprintf>
  index = strlen(message);
 8003cae:	4b5a      	ldr	r3, [pc, #360]	@ (8003e18 <CreateMessage+0x324>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fc fa5b 	bl	800016c <strlen>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	19bb      	adds	r3, r7, r6
 8003cba:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4053      	eors	r3, r2
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04a      	beq.n	8003d60 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003cca:	4a4c      	ldr	r2, [pc, #304]	@ (8003dfc <CreateMessage+0x308>)
 8003ccc:	4b54      	ldr	r3, [pc, #336]	@ (8003e20 <CreateMessage+0x32c>)
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff feeb 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003cd6:	19bb      	adds	r3, r7, r6
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	4b4f      	ldr	r3, [pc, #316]	@ (8003e18 <CreateMessage+0x324>)
 8003cdc:	18d4      	adds	r4, r2, r3
 8003cde:	4b51      	ldr	r3, [pc, #324]	@ (8003e24 <CreateMessage+0x330>)
 8003ce0:	689d      	ldr	r5, [r3, #8]
 8003ce2:	4b59      	ldr	r3, [pc, #356]	@ (8003e48 <CreateMessage+0x354>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c18      	adds	r0, r3, #0
 8003ce8:	f7ff fbbc 	bl	8003464 <__aeabi_f2d>
 8003cec:	0002      	movs	r2, r0
 8003cee:	000b      	movs	r3, r1
 8003cf0:	4846      	ldr	r0, [pc, #280]	@ (8003e0c <CreateMessage+0x318>)
 8003cf2:	4956      	ldr	r1, [pc, #344]	@ (8003e4c <CreateMessage+0x358>)
 8003cf4:	9202      	str	r2, [sp, #8]
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	4b49      	ldr	r3, [pc, #292]	@ (8003e20 <CreateMessage+0x32c>)
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	002a      	movs	r2, r5
 8003d00:	0020      	movs	r0, r4
 8003d02:	f018 fbef 	bl	801c4e4 <siprintf>
    index = strlen(message);
 8003d06:	4b44      	ldr	r3, [pc, #272]	@ (8003e18 <CreateMessage+0x324>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fc fa2f 	bl	800016c <strlen>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	19bb      	adds	r3, r7, r6
 8003d12:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d14:	4a3b      	ldr	r2, [pc, #236]	@ (8003e04 <CreateMessage+0x310>)
 8003d16:	4b42      	ldr	r3, [pc, #264]	@ (8003e20 <CreateMessage+0x32c>)
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7ff fec6 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d20:	19bb      	adds	r3, r7, r6
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	4b3c      	ldr	r3, [pc, #240]	@ (8003e18 <CreateMessage+0x324>)
 8003d26:	18d4      	adds	r4, r2, r3
 8003d28:	4b3e      	ldr	r3, [pc, #248]	@ (8003e24 <CreateMessage+0x330>)
 8003d2a:	689d      	ldr	r5, [r3, #8]
 8003d2c:	4b48      	ldr	r3, [pc, #288]	@ (8003e50 <CreateMessage+0x35c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	1c18      	adds	r0, r3, #0
 8003d32:	f7ff fb97 	bl	8003464 <__aeabi_f2d>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	4834      	ldr	r0, [pc, #208]	@ (8003e0c <CreateMessage+0x318>)
 8003d3c:	4945      	ldr	r1, [pc, #276]	@ (8003e54 <CreateMessage+0x360>)
 8003d3e:	9202      	str	r2, [sp, #8]
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	4b37      	ldr	r3, [pc, #220]	@ (8003e20 <CreateMessage+0x32c>)
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	0003      	movs	r3, r0
 8003d48:	002a      	movs	r2, r5
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f018 fbca 	bl	801c4e4 <siprintf>
    index = strlen(message);
 8003d50:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <CreateMessage+0x324>)
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fc fa0a 	bl	800016c <strlen>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	19bb      	adds	r3, r7, r6
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e025      	b.n	8003dac <CreateMessage+0x2b8>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d60:	4a26      	ldr	r2, [pc, #152]	@ (8003dfc <CreateMessage+0x308>)
 8003d62:	4b2f      	ldr	r3, [pc, #188]	@ (8003e20 <CreateMessage+0x32c>)
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fea0 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d6c:	260e      	movs	r6, #14
 8003d6e:	19bb      	adds	r3, r7, r6
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	4b29      	ldr	r3, [pc, #164]	@ (8003e18 <CreateMessage+0x324>)
 8003d74:	18d4      	adds	r4, r2, r3
 8003d76:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <CreateMessage+0x330>)
 8003d78:	689d      	ldr	r5, [r3, #8]
 8003d7a:	4b33      	ldr	r3, [pc, #204]	@ (8003e48 <CreateMessage+0x354>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f7ff fb70 	bl	8003464 <__aeabi_f2d>
 8003d84:	0002      	movs	r2, r0
 8003d86:	000b      	movs	r3, r1
 8003d88:	4820      	ldr	r0, [pc, #128]	@ (8003e0c <CreateMessage+0x318>)
 8003d8a:	4933      	ldr	r1, [pc, #204]	@ (8003e58 <CreateMessage+0x364>)
 8003d8c:	9202      	str	r2, [sp, #8]
 8003d8e:	9303      	str	r3, [sp, #12]
 8003d90:	4b23      	ldr	r3, [pc, #140]	@ (8003e20 <CreateMessage+0x32c>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	0003      	movs	r3, r0
 8003d96:	002a      	movs	r2, r5
 8003d98:	0020      	movs	r0, r4
 8003d9a:	f018 fba3 	bl	801c4e4 <siprintf>
    index = strlen(message);
 8003d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e18 <CreateMessage+0x324>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fc f9e3 	bl	800016c <strlen>
 8003da6:	0002      	movs	r2, r0
 8003da8:	19bb      	adds	r3, r7, r6
 8003daa:	801a      	strh	r2, [r3, #0]
  }

  index = sprintf(&message[index], "]");
 8003dac:	240e      	movs	r4, #14
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	4b19      	ldr	r3, [pc, #100]	@ (8003e18 <CreateMessage+0x324>)
 8003db4:	18d3      	adds	r3, r2, r3
 8003db6:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <CreateMessage+0x368>)
 8003db8:	0011      	movs	r1, r2
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f018 fb92 	bl	801c4e4 <siprintf>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	193b      	adds	r3, r7, r4
 8003dc4:	801a      	strh	r2, [r3, #0]

  return strlen(message);
 8003dc6:	4b14      	ldr	r3, [pc, #80]	@ (8003e18 <CreateMessage+0x324>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7fc f9cf 	bl	800016c <strlen>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	b29b      	uxth	r3, r3
}
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	b005      	add	sp, #20
 8003dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	200009d4 	.word	0x200009d4
 8003de0:	0808000c 	.word	0x0808000c
 8003de4:	200009e0 	.word	0x200009e0
 8003de8:	08080018 	.word	0x08080018
 8003dec:	200009ec 	.word	0x200009ec
 8003df0:	08080048 	.word	0x08080048
 8003df4:	200009f8 	.word	0x200009f8
 8003df8:	08080030 	.word	0x08080030
 8003dfc:	20000a04 	.word	0x20000a04
 8003e00:	0808006c 	.word	0x0808006c
 8003e04:	20000a10 	.word	0x20000a10
 8003e08:	08080078 	.word	0x08080078
 8003e0c:	20000a1c 	.word	0x20000a1c
 8003e10:	08080090 	.word	0x08080090
 8003e14:	08020868 	.word	0x08020868
 8003e18:	20000578 	.word	0x20000578
 8003e1c:	0801f758 	.word	0x0801f758
 8003e20:	20000a3c 	.word	0x20000a3c
 8003e24:	2000054c 	.word	0x2000054c
 8003e28:	20000560 	.word	0x20000560
 8003e2c:	0801f75c 	.word	0x0801f75c
 8003e30:	20000564 	.word	0x20000564
 8003e34:	0801f7b0 	.word	0x0801f7b0
 8003e38:	20000574 	.word	0x20000574
 8003e3c:	0801f808 	.word	0x0801f808
 8003e40:	20000570 	.word	0x20000570
 8003e44:	0801f860 	.word	0x0801f860
 8003e48:	20000568 	.word	0x20000568
 8003e4c:	0801f8b4 	.word	0x0801f8b4
 8003e50:	2000056c 	.word	0x2000056c
 8003e54:	0801f914 	.word	0x0801f914
 8003e58:	0801f970 	.word	0x0801f970
 8003e5c:	0801f9c8 	.word	0x0801f9c8

08003e60 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e64:	2064      	movs	r0, #100	@ 0x64
 8003e66:	f008 f859 	bl	800bf1c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <StartProg+0x60>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2101      	movs	r1, #1
 8003e70:	0018      	movs	r0, r3
 8003e72:	f009 faa8 	bl	800d3c6 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e76:	2064      	movs	r0, #100	@ 0x64
 8003e78:	f008 f850 	bl	800bf1c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <StartProg+0x60>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2102      	movs	r1, #2
 8003e82:	0018      	movs	r0, r3
 8003e84:	f009 fa9f 	bl	800d3c6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e88:	23fa      	movs	r3, #250	@ 0xfa
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f008 f845 	bl	800bf1c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003e92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <StartProg+0x60>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	2101      	movs	r1, #1
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f009 fa94 	bl	800d3c6 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e9e:	23fa      	movs	r3, #250	@ 0xfa
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f008 f83a 	bl	800bf1c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ea8:	4b05      	ldr	r3, [pc, #20]	@ (8003ec0 <StartProg+0x60>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	2102      	movs	r1, #2
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f009 fa89 	bl	800d3c6 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003eb4:	2028      	movs	r0, #40	@ 0x28
 8003eb6:	f008 f831 	bl	800bf1c <HAL_Delay>
}
 8003eba:	46c0      	nop			@ (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	50001c00 	.word	0x50001c00

08003ec4 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec6:	b0d9      	sub	sp, #356	@ 0x164
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	0008      	movs	r0, r1
 8003ece:	0011      	movs	r1, r2
 8003ed0:	4ba1      	ldr	r3, [pc, #644]	@ (8004158 <ParseBuffer+0x294>)
 8003ed2:	24b0      	movs	r4, #176	@ 0xb0
 8003ed4:	0064      	lsls	r4, r4, #1
 8003ed6:	191b      	adds	r3, r3, r4
 8003ed8:	19db      	adds	r3, r3, r7
 8003eda:	1c02      	adds	r2, r0, #0
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	4b9f      	ldr	r3, [pc, #636]	@ (800415c <ParseBuffer+0x298>)
 8003ee0:	191b      	adds	r3, r3, r4
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	1c0a      	adds	r2, r1, #0
 8003ee6:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8003ee8:	2380      	movs	r3, #128	@ 0x80
 8003eea:	005a      	lsls	r2, r3, #1
 8003eec:	2348      	movs	r3, #72	@ 0x48
 8003eee:	18fb      	adds	r3, r7, r3
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f018 fc3a 	bl	801c76c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003ef8:	2360      	movs	r3, #96	@ 0x60
 8003efa:	33ff      	adds	r3, #255	@ 0xff
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	2203      	movs	r2, #3
 8003f00:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003f02:	23ae      	movs	r3, #174	@ 0xae
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	2200      	movs	r2, #0
 8003f0a:	801a      	strh	r2, [r3, #0]
 8003f0c:	e013      	b.n	8003f36 <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8003f0e:	20ae      	movs	r0, #174	@ 0xae
 8003f10:	0040      	lsls	r0, r0, #1
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	18d2      	adds	r2, r2, r3
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	7811      	ldrb	r1, [r2, #0]
 8003f20:	4a8f      	ldr	r2, [pc, #572]	@ (8004160 <ParseBuffer+0x29c>)
 8003f22:	24b0      	movs	r4, #176	@ 0xb0
 8003f24:	0064      	lsls	r4, r4, #1
 8003f26:	1912      	adds	r2, r2, r4
 8003f28:	19d2      	adds	r2, r2, r7
 8003f2a:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003f2c:	183b      	adds	r3, r7, r0
 8003f2e:	881a      	ldrh	r2, [r3, #0]
 8003f30:	183b      	adds	r3, r7, r0
 8003f32:	3201      	adds	r2, #1
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	23ae      	movs	r3, #174	@ 0xae
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	18fa      	adds	r2, r7, r3
 8003f3c:	4b86      	ldr	r3, [pc, #536]	@ (8004158 <ParseBuffer+0x294>)
 8003f3e:	24b0      	movs	r4, #176	@ 0xb0
 8003f40:	0064      	lsls	r4, r4, #1
 8003f42:	191b      	adds	r3, r3, r4
 8003f44:	19db      	adds	r3, r3, r7
 8003f46:	8812      	ldrh	r2, [r2, #0]
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d3df      	bcc.n	8003f0e <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8003f4e:	4b82      	ldr	r3, [pc, #520]	@ (8004158 <ParseBuffer+0x294>)
 8003f50:	191b      	adds	r3, r3, r4
 8003f52:	19db      	adds	r3, r3, r7
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	4a82      	ldr	r2, [pc, #520]	@ (8004160 <ParseBuffer+0x29c>)
 8003f58:	1912      	adds	r2, r2, r4
 8003f5a:	19d2      	adds	r2, r2, r7
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	54d1      	strb	r1, [r2, r3]
  printf("Receive ParseBuffer: %s", tempBuf );
 8003f60:	2648      	movs	r6, #72	@ 0x48
 8003f62:	19ba      	adds	r2, r7, r6
 8003f64:	4b7f      	ldr	r3, [pc, #508]	@ (8004164 <ParseBuffer+0x2a0>)
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f018 fa4b 	bl	801c404 <iprintf>
  char * ParsePoint = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	22ac      	movs	r2, #172	@ 0xac
 8003f72:	0052      	lsls	r2, r2, #1
 8003f74:	18b9      	adds	r1, r7, r2
 8003f76:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f78:	4b7b      	ldr	r3, [pc, #492]	@ (8004168 <ParseBuffer+0x2a4>)
 8003f7a:	0025      	movs	r5, r4
 8003f7c:	195b      	adds	r3, r3, r5
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	4a7a      	ldr	r2, [pc, #488]	@ (800416c <ParseBuffer+0x2a8>)
 8003f82:	8811      	ldrh	r1, [r2, #0]
 8003f84:	8019      	strh	r1, [r3, #0]
 8003f86:	7892      	ldrb	r2, [r2, #2]
 8003f88:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f8a:	4b79      	ldr	r3, [pc, #484]	@ (8004170 <ParseBuffer+0x2ac>)
 8003f8c:	195b      	adds	r3, r3, r5
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	4a78      	ldr	r2, [pc, #480]	@ (8004174 <ParseBuffer+0x2b0>)
 8003f92:	6811      	ldr	r1, [r2, #0]
 8003f94:	6019      	str	r1, [r3, #0]
 8003f96:	8892      	ldrh	r2, [r2, #4]
 8003f98:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8003f9a:	4b77      	ldr	r3, [pc, #476]	@ (8004178 <ParseBuffer+0x2b4>)
 8003f9c:	195b      	adds	r3, r3, r5
 8003f9e:	19db      	adds	r3, r3, r7
 8003fa0:	4a76      	ldr	r2, [pc, #472]	@ (800417c <ParseBuffer+0x2b8>)
 8003fa2:	6811      	ldr	r1, [r2, #0]
 8003fa4:	6019      	str	r1, [r3, #0]
 8003fa6:	7912      	ldrb	r2, [r2, #4]
 8003fa8:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003faa:	4b75      	ldr	r3, [pc, #468]	@ (8004180 <ParseBuffer+0x2bc>)
 8003fac:	195b      	adds	r3, r3, r5
 8003fae:	19db      	adds	r3, r3, r7
 8003fb0:	4a74      	ldr	r2, [pc, #464]	@ (8004184 <ParseBuffer+0x2c0>)
 8003fb2:	6811      	ldr	r1, [r2, #0]
 8003fb4:	6019      	str	r1, [r3, #0]
 8003fb6:	8892      	ldrh	r2, [r2, #4]
 8003fb8:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003fba:	4b73      	ldr	r3, [pc, #460]	@ (8004188 <ParseBuffer+0x2c4>)
 8003fbc:	195b      	adds	r3, r3, r5
 8003fbe:	19db      	adds	r3, r3, r7
 8003fc0:	223e      	movs	r2, #62	@ 0x3e
 8003fc2:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003fc4:	4b71      	ldr	r3, [pc, #452]	@ (800418c <ParseBuffer+0x2c8>)
 8003fc6:	195b      	adds	r3, r3, r5
 8003fc8:	19db      	adds	r3, r3, r7
 8003fca:	4a71      	ldr	r2, [pc, #452]	@ (8004190 <ParseBuffer+0x2cc>)
 8003fcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fce:	c313      	stmia	r3!, {r0, r1, r4}
 8003fd0:	8811      	ldrh	r1, [r2, #0]
 8003fd2:	8019      	strh	r1, [r3, #0]
 8003fd4:	7892      	ldrb	r2, [r2, #2]
 8003fd6:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8003fd8:	4b6e      	ldr	r3, [pc, #440]	@ (8004194 <ParseBuffer+0x2d0>)
 8003fda:	195b      	adds	r3, r3, r5
 8003fdc:	19db      	adds	r3, r3, r7
 8003fde:	4a6e      	ldr	r2, [pc, #440]	@ (8004198 <ParseBuffer+0x2d4>)
 8003fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800415c <ParseBuffer+0x298>)
 8003fea:	195b      	adds	r3, r3, r5
 8003fec:	19db      	adds	r3, r3, r7
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 8003ff4:	2344      	movs	r3, #68	@ 0x44
 8003ff6:	18fa      	adds	r2, r7, r3
 8003ff8:	19bb      	adds	r3, r7, r6
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f018 fbf0 	bl	801c7e2 <strstr>
 8004002:	0003      	movs	r3, r0
 8004004:	22ac      	movs	r2, #172	@ 0xac
 8004006:	0052      	lsls	r2, r2, #1
 8004008:	18ba      	adds	r2, r7, r2
 800400a:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 800400c:	4b53      	ldr	r3, [pc, #332]	@ (800415c <ParseBuffer+0x298>)
 800400e:	22b0      	movs	r2, #176	@ 0xb0
 8004010:	0052      	lsls	r2, r2, #1
 8004012:	189b      	adds	r3, r3, r2
 8004014:	19db      	adds	r3, r3, r7
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10c      	bne.n	8004036 <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 800401c:	232c      	movs	r3, #44	@ 0x2c
 800401e:	18fa      	adds	r2, r7, r3
 8004020:	2348      	movs	r3, #72	@ 0x48
 8004022:	18fb      	adds	r3, r7, r3
 8004024:	0011      	movs	r1, r2
 8004026:	0018      	movs	r0, r3
 8004028:	f018 fbdb 	bl	801c7e2 <strstr>
 800402c:	0003      	movs	r3, r0
 800402e:	22ac      	movs	r2, #172	@ 0xac
 8004030:	0052      	lsls	r2, r2, #1
 8004032:	18ba      	adds	r2, r7, r2
 8004034:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8004036:	4b49      	ldr	r3, [pc, #292]	@ (800415c <ParseBuffer+0x298>)
 8004038:	22b0      	movs	r2, #176	@ 0xb0
 800403a:	0052      	lsls	r2, r2, #1
 800403c:	189b      	adds	r3, r3, r2
 800403e:	19db      	adds	r3, r3, r7
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d10c      	bne.n	8004060 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 8004046:	2328      	movs	r3, #40	@ 0x28
 8004048:	18fa      	adds	r2, r7, r3
 800404a:	2348      	movs	r3, #72	@ 0x48
 800404c:	18fb      	adds	r3, r7, r3
 800404e:	0011      	movs	r1, r2
 8004050:	0018      	movs	r0, r3
 8004052:	f018 fbc6 	bl	801c7e2 <strstr>
 8004056:	0003      	movs	r3, r0
 8004058:	22ac      	movs	r2, #172	@ 0xac
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	18ba      	adds	r2, r7, r2
 800405e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004060:	4b3e      	ldr	r3, [pc, #248]	@ (800415c <ParseBuffer+0x298>)
 8004062:	22b0      	movs	r2, #176	@ 0xb0
 8004064:	0052      	lsls	r2, r2, #1
 8004066:	189b      	adds	r3, r3, r2
 8004068:	19db      	adds	r3, r3, r7
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b05      	cmp	r3, #5
 800406e:	d10c      	bne.n	800408a <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 8004070:	2308      	movs	r3, #8
 8004072:	18fa      	adds	r2, r7, r3
 8004074:	2348      	movs	r3, #72	@ 0x48
 8004076:	18fb      	adds	r3, r7, r3
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f018 fbb1 	bl	801c7e2 <strstr>
 8004080:	0003      	movs	r3, r0
 8004082:	22ac      	movs	r2, #172	@ 0xac
 8004084:	0052      	lsls	r2, r2, #1
 8004086:	18ba      	adds	r2, r7, r2
 8004088:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800408a:	233c      	movs	r3, #60	@ 0x3c
 800408c:	18fa      	adds	r2, r7, r3
 800408e:	2448      	movs	r4, #72	@ 0x48
 8004090:	193b      	adds	r3, r7, r4
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f018 fba4 	bl	801c7e2 <strstr>
 800409a:	0003      	movs	r3, r0
 800409c:	22aa      	movs	r2, #170	@ 0xaa
 800409e:	0052      	lsls	r2, r2, #1
 80040a0:	18ba      	adds	r2, r7, r2
 80040a2:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80040a4:	2318      	movs	r3, #24
 80040a6:	18fa      	adds	r2, r7, r3
 80040a8:	193b      	adds	r3, r7, r4
 80040aa:	0011      	movs	r1, r2
 80040ac:	0018      	movs	r0, r3
 80040ae:	f018 fb98 	bl	801c7e2 <strstr>
 80040b2:	0003      	movs	r3, r0
 80040b4:	22a8      	movs	r2, #168	@ 0xa8
 80040b6:	0052      	lsls	r2, r2, #1
 80040b8:	18ba      	adds	r2, r7, r2
 80040ba:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80040bc:	4a37      	ldr	r2, [pc, #220]	@ (800419c <ParseBuffer+0x2d8>)
 80040be:	193b      	adds	r3, r7, r4
 80040c0:	0011      	movs	r1, r2
 80040c2:	0018      	movs	r0, r3
 80040c4:	f018 fb8d 	bl	801c7e2 <strstr>
 80040c8:	0003      	movs	r3, r0
 80040ca:	22a6      	movs	r2, #166	@ 0xa6
 80040cc:	0052      	lsls	r2, r2, #1
 80040ce:	18ba      	adds	r2, r7, r2
 80040d0:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80040d2:	2334      	movs	r3, #52	@ 0x34
 80040d4:	18fa      	adds	r2, r7, r3
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	0011      	movs	r1, r2
 80040da:	0018      	movs	r0, r3
 80040dc:	f018 fb81 	bl	801c7e2 <strstr>
 80040e0:	0003      	movs	r3, r0
 80040e2:	22a4      	movs	r2, #164	@ 0xa4
 80040e4:	0052      	lsls	r2, r2, #1
 80040e6:	18ba      	adds	r2, r7, r2
 80040e8:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80040ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <ParseBuffer+0x294>)
 80040ec:	21b0      	movs	r1, #176	@ 0xb0
 80040ee:	0049      	lsls	r1, r1, #1
 80040f0:	185b      	adds	r3, r3, r1
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d800      	bhi.n	80040fc <ParseBuffer+0x238>
 80040fa:	e0be      	b.n	800427a <ParseBuffer+0x3b6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 80040fc:	22ac      	movs	r2, #172	@ 0xac
 80040fe:	0052      	lsls	r2, r2, #1
 8004100:	18bb      	adds	r3, r7, r2
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d051      	beq.n	80041ac <ParseBuffer+0x2e8>
 8004108:	18bb      	adds	r3, r7, r2
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b4f      	cmp	r3, #79	@ 0x4f
 8004110:	d14c      	bne.n	80041ac <ParseBuffer+0x2e8>
// TODO: Bert call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004112:	2360      	movs	r3, #96	@ 0x60
 8004114:	33ff      	adds	r3, #255	@ 0xff
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 800411c:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <ParseBuffer+0x2dc>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b12      	cmp	r3, #18
 8004122:	d143      	bne.n	80041ac <ParseBuffer+0x2e8>
        if ((len == 43) && (tempBuf[33] == '2' )) {
 8004124:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <ParseBuffer+0x294>)
 8004126:	185b      	adds	r3, r3, r1
 8004128:	19db      	adds	r3, r3, r7
 800412a:	881b      	ldrh	r3, [r3, #0]
 800412c:	2b2b      	cmp	r3, #43	@ 0x2b
 800412e:	d10b      	bne.n	8004148 <ParseBuffer+0x284>
 8004130:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <ParseBuffer+0x29c>)
 8004132:	185b      	adds	r3, r3, r1
 8004134:	19db      	adds	r3, r3, r7
 8004136:	2221      	movs	r2, #33	@ 0x21
 8004138:	5c9b      	ldrb	r3, [r3, r2]
 800413a:	2b32      	cmp	r3, #50	@ 0x32
 800413c:	d104      	bne.n	8004148 <ParseBuffer+0x284>
          ParseTime(tempBuf);
 800413e:	193b      	adds	r3, r7, r4
 8004140:	0018      	movs	r0, r3
 8004142:	f001 ffa7 	bl	8006094 <ParseTime>
 8004146:	e031      	b.n	80041ac <ParseBuffer+0x2e8>
        }
        else {
          Debug("Error getting time\r\n");
 8004148:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <ParseBuffer+0x2e0>)
 800414a:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <ParseBuffer+0x2e4>)
 800414c:	0019      	movs	r1, r3
 800414e:	2003      	movs	r0, #3
 8004150:	f007 fb46 	bl	800b7e0 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8004154:	2306      	movs	r3, #6
 8004156:	e094      	b.n	8004282 <ParseBuffer+0x3be>
 8004158:	fffffea2 	.word	0xfffffea2
 800415c:	fffffea1 	.word	0xfffffea1
 8004160:	fffffee8 	.word	0xfffffee8
 8004164:	0801f9cc 	.word	0x0801f9cc
 8004168:	fffffee4 	.word	0xfffffee4
 800416c:	0801f9fc 	.word	0x0801f9fc
 8004170:	fffffedc 	.word	0xfffffedc
 8004174:	0801fa00 	.word	0x0801fa00
 8004178:	fffffed4 	.word	0xfffffed4
 800417c:	0801fa08 	.word	0x0801fa08
 8004180:	fffffecc 	.word	0xfffffecc
 8004184:	0801fa10 	.word	0x0801fa10
 8004188:	fffffec8 	.word	0xfffffec8
 800418c:	fffffeb8 	.word	0xfffffeb8
 8004190:	0801fa18 	.word	0x0801fa18
 8004194:	fffffea8 	.word	0xfffffea8
 8004198:	0801fa28 	.word	0x0801fa28
 800419c:	08020844 	.word	0x08020844
 80041a0:	20000992 	.word	0x20000992
 80041a4:	0801f9e4 	.word	0x0801f9e4
 80041a8:	0801f6f0 	.word	0x0801f6f0
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80041ac:	22ac      	movs	r2, #172	@ 0xac
 80041ae:	0052      	lsls	r2, r2, #1
 80041b0:	18bb      	adds	r3, r7, r2
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <ParseBuffer+0x308>
 80041b8:	18bb      	adds	r3, r7, r2
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b72      	cmp	r3, #114	@ 0x72
 80041c0:	d104      	bne.n	80041cc <ParseBuffer+0x308>
      status = RECEIVE_STATUS_READY;
 80041c2:	2360      	movs	r3, #96	@ 0x60
 80041c4:	33ff      	adds	r3, #255	@ 0xff
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	2202      	movs	r2, #2
 80041ca:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80041cc:	22ac      	movs	r2, #172	@ 0xac
 80041ce:	0052      	lsls	r2, r2, #1
 80041d0:	18bb      	adds	r3, r7, r2
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <ParseBuffer+0x328>
 80041d8:	18bb      	adds	r3, r7, r2
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b3e      	cmp	r3, #62	@ 0x3e
 80041e0:	d104      	bne.n	80041ec <ParseBuffer+0x328>
      status = RECEIVE_STATUS_START;
 80041e2:	2360      	movs	r3, #96	@ 0x60
 80041e4:	33ff      	adds	r3, #255	@ 0xff
 80041e6:	18fb      	adds	r3, r7, r3
 80041e8:	2205      	movs	r2, #5
 80041ea:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 80041ec:	22ac      	movs	r2, #172	@ 0xac
 80041ee:	0052      	lsls	r2, r2, #1
 80041f0:	18bb      	adds	r3, r7, r2
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <ParseBuffer+0x348>
 80041f8:	18bb      	adds	r3, r7, r2
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b2b      	cmp	r3, #43	@ 0x2b
 8004200:	d104      	bne.n	800420c <ParseBuffer+0x348>
      status = RECEIVE_STATUS_TIME;
 8004202:	2360      	movs	r3, #96	@ 0x60
 8004204:	33ff      	adds	r3, #255	@ 0xff
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	220b      	movs	r2, #11
 800420a:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 800420c:	22aa      	movs	r2, #170	@ 0xaa
 800420e:	0052      	lsls	r2, r2, #1
 8004210:	18bb      	adds	r3, r7, r2
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <ParseBuffer+0x35e>
 8004218:	18bb      	adds	r3, r7, r2
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b45      	cmp	r3, #69	@ 0x45
 8004220:	d00a      	beq.n	8004238 <ParseBuffer+0x374>
 8004222:	22a4      	movs	r2, #164	@ 0xa4
 8004224:	0052      	lsls	r2, r2, #1
 8004226:	18bb      	adds	r3, r7, r2
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d009      	beq.n	8004242 <ParseBuffer+0x37e>
 800422e:	18bb      	adds	r3, r7, r2
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b46      	cmp	r3, #70	@ 0x46
 8004236:	d104      	bne.n	8004242 <ParseBuffer+0x37e>
      status = RECEIVE_STATUS_ERROR;
 8004238:	2360      	movs	r3, #96	@ 0x60
 800423a:	33ff      	adds	r3, #255	@ 0xff
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	2201      	movs	r2, #1
 8004240:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004242:	22a8      	movs	r2, #168	@ 0xa8
 8004244:	0052      	lsls	r2, r2, #1
 8004246:	18bb      	adds	r3, r7, r2
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <ParseBuffer+0x39a>
 800424e:	18bb      	adds	r3, r7, r2
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b57      	cmp	r3, #87	@ 0x57
 8004256:	d102      	bne.n	800425e <ParseBuffer+0x39a>
      ConnectionMade = true;
 8004258:	4b0c      	ldr	r3, [pc, #48]	@ (800428c <ParseBuffer+0x3c8>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 800425e:	22a6      	movs	r2, #166	@ 0xa6
 8004260:	0052      	lsls	r2, r2, #1
 8004262:	18bb      	adds	r3, r7, r2
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <ParseBuffer+0x3b6>
 800426a:	18bb      	adds	r3, r7, r2
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b32      	cmp	r3, #50	@ 0x32
 8004272:	d102      	bne.n	800427a <ParseBuffer+0x3b6>
      beurs = true;
 8004274:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <ParseBuffer+0x3cc>)
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800427a:	2360      	movs	r3, #96	@ 0x60
 800427c:	33ff      	adds	r3, #255	@ 0xff
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	781b      	ldrb	r3, [r3, #0]

}
 8004282:	0018      	movs	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	b059      	add	sp, #356	@ 0x164
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800428a:	46c0      	nop			@ (mov r8, r8)
 800428c:	20000548 	.word	0x20000548
 8004290:	2000054a 	.word	0x2000054a

08004294 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 800429a:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <PollAwake+0x34>)
 800429c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fb ff63 	bl	800016c <strlen>
 80042a6:	0003      	movs	r3, r0
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f7ff fb78 	bl	80039a4 <ESP_Send>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d001      	beq.n	80042bc <PollAwake+0x28>
    return true;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <PollAwake+0x2a>
  }
  else{
    return false;
 80042bc:	2300      	movs	r3, #0
  }
}
 80042be:	0018      	movs	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b002      	add	sp, #8
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			@ (mov r8, r8)
 80042c8:	0801fa38 	.word	0x0801fa38

080042cc <RFPower>:
bool RFPower(){
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80042d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004300 <RFPower+0x34>)
 80042d4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f7fb ff47 	bl	800016c <strlen>
 80042de:	0003      	movs	r3, r0
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0011      	movs	r1, r2
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7ff fb5c 	bl	80039a4 <ESP_Send>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d001      	beq.n	80042f4 <RFPower+0x28>
    return true;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <RFPower+0x2a>
  }
  else{
    return false;
 80042f4:	2300      	movs	r3, #0
  }
}
 80042f6:	0018      	movs	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b002      	add	sp, #8
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	0801fa40 	.word	0x0801fa40

08004304 <CheckRFPower>:
bool CheckRFPower(){
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <CheckRFPower+0x34>)
 800430c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0018      	movs	r0, r3
 8004312:	f7fb ff2b 	bl	800016c <strlen>
 8004316:	0003      	movs	r3, r0
 8004318:	b29a      	uxth	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0011      	movs	r1, r2
 800431e:	0018      	movs	r0, r3
 8004320:	f7ff fb40 	bl	80039a4 <ESP_Send>
 8004324:	1e03      	subs	r3, r0, #0
 8004326:	d001      	beq.n	800432c <CheckRFPower+0x28>
    return true;
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <CheckRFPower+0x2a>
  }
  else{
    return false;
 800432c:	2300      	movs	r3, #0
  }
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b002      	add	sp, #8
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	0801fa50 	.word	0x0801fa50

0800433c <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004342:	4b0b      	ldr	r3, [pc, #44]	@ (8004370 <ATRestore+0x34>)
 8004344:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f7fb ff0f 	bl	800016c <strlen>
 800434e:	0003      	movs	r3, r0
 8004350:	b29a      	uxth	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0011      	movs	r1, r2
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff fb24 	bl	80039a4 <ESP_Send>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d001      	beq.n	8004364 <ATRestore+0x28>
    return true;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <ATRestore+0x2a>
  }
  else{
    return false;
 8004364:	2300      	movs	r3, #0
  }
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b002      	add	sp, #8
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	0801fa60 	.word	0x0801fa60

08004374 <CWINIT>:
bool CWINIT(){
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800437a:	4b0b      	ldr	r3, [pc, #44]	@ (80043a8 <CWINIT+0x34>)
 800437c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f7fb fef3 	bl	800016c <strlen>
 8004386:	0003      	movs	r3, r0
 8004388:	b29a      	uxth	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	0011      	movs	r1, r2
 800438e:	0018      	movs	r0, r3
 8004390:	f7ff fb08 	bl	80039a4 <ESP_Send>
 8004394:	1e03      	subs	r3, r0, #0
 8004396:	d001      	beq.n	800439c <CWINIT+0x28>
    return true;
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <CWINIT+0x2a>
  }
  else{
    return false;
 800439c:	2300      	movs	r3, #0
  }
}
 800439e:	0018      	movs	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	b002      	add	sp, #8
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	0801fa70 	.word	0x0801fa70

080043ac <CWMODE1>:
bool CWMODE1(){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80043b2:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <CWMODE1+0x34>)
 80043b4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f7fb fed7 	bl	800016c <strlen>
 80043be:	0003      	movs	r3, r0
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	0011      	movs	r1, r2
 80043c6:	0018      	movs	r0, r3
 80043c8:	f7ff faec 	bl	80039a4 <ESP_Send>
 80043cc:	1e03      	subs	r3, r0, #0
 80043ce:	d001      	beq.n	80043d4 <CWMODE1+0x28>
    return true;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e000      	b.n	80043d6 <CWMODE1+0x2a>
  }
  else{
    return false;
 80043d4:	2300      	movs	r3, #0
  }
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b002      	add	sp, #8
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	0801fa80 	.word	0x0801fa80

080043e4 <CWMODE2>:
bool CWMODE2(){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80043ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <CWMODE2+0x34>)
 80043ec:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7fb febb 	bl	800016c <strlen>
 80043f6:	0003      	movs	r3, r0
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0011      	movs	r1, r2
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff fad0 	bl	80039a4 <ESP_Send>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d001      	beq.n	800440c <CWMODE2+0x28>
    return true;
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <CWMODE2+0x2a>
  }
  else{
    return false;
 800440c:	2300      	movs	r3, #0
  }
}
 800440e:	0018      	movs	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	b002      	add	sp, #8
 8004414:	bd80      	pop	{r7, pc}
 8004416:	46c0      	nop			@ (mov r8, r8)
 8004418:	0801fa90 	.word	0x0801fa90

0800441c <CWAUTOCONN>:
bool CWAUTOCONN(){
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004422:	4b0b      	ldr	r3, [pc, #44]	@ (8004450 <CWAUTOCONN+0x34>)
 8004424:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fb fe9f 	bl	800016c <strlen>
 800442e:	0003      	movs	r3, r0
 8004430:	b29a      	uxth	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	0011      	movs	r1, r2
 8004436:	0018      	movs	r0, r3
 8004438:	f7ff fab4 	bl	80039a4 <ESP_Send>
 800443c:	1e03      	subs	r3, r0, #0
 800443e:	d001      	beq.n	8004444 <CWAUTOCONN+0x28>
    return true;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004444:	2300      	movs	r3, #0
  }
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	0801faa0 	.word	0x0801faa0

08004454 <CWJAP>:
bool CWJAP(){
 8004454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004456:	46c6      	mov	lr, r8
 8004458:	b500      	push	{lr}
 800445a:	b0a2      	sub	sp, #136	@ 0x88
 800445c:	af00      	add	r7, sp, #0
 800445e:	466b      	mov	r3, sp
 8004460:	4698      	mov	r8, r3
  beursTest = true;
 8004462:	4b39      	ldr	r3, [pc, #228]	@ (8004548 <CWJAP+0xf4>)
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8004468:	2618      	movs	r6, #24
 800446a:	19bb      	adds	r3, r7, r6
 800446c:	2264      	movs	r2, #100	@ 0x64
 800446e:	2100      	movs	r1, #0
 8004470:	0018      	movs	r0, r3
 8004472:	f018 f97b 	bl	801c76c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8004476:	4b35      	ldr	r3, [pc, #212]	@ (800454c <CWJAP+0xf8>)
 8004478:	4a35      	ldr	r2, [pc, #212]	@ (8004550 <CWJAP+0xfc>)
 800447a:	4936      	ldr	r1, [pc, #216]	@ (8004554 <CWJAP+0x100>)
 800447c:	19b8      	adds	r0, r7, r6
 800447e:	f018 f831 	bl	801c4e4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004482:	19bb      	adds	r3, r7, r6
 8004484:	0018      	movs	r0, r3
 8004486:	f7fb fe71 	bl	800016c <strlen>
 800448a:	0002      	movs	r2, r0
 800448c:	216f      	movs	r1, #111	@ 0x6f
 800448e:	0030      	movs	r0, r6
 8004490:	180b      	adds	r3, r1, r0
 8004492:	19db      	adds	r3, r3, r7
 8004494:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8004496:	180b      	adds	r3, r1, r0
 8004498:	19db      	adds	r3, r3, r7
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	3301      	adds	r3, #1
 800449e:	1e5a      	subs	r2, r3, #1
 80044a0:	2180      	movs	r1, #128	@ 0x80
 80044a2:	1879      	adds	r1, r7, r1
 80044a4:	600a      	str	r2, [r1, #0]
 80044a6:	001a      	movs	r2, r3
 80044a8:	60ba      	str	r2, [r7, #8]
 80044aa:	2200      	movs	r2, #0
 80044ac:	60fa      	str	r2, [r7, #12]
 80044ae:	68b8      	ldr	r0, [r7, #8]
 80044b0:	68f9      	ldr	r1, [r7, #12]
 80044b2:	0002      	movs	r2, r0
 80044b4:	0f52      	lsrs	r2, r2, #29
 80044b6:	000e      	movs	r6, r1
 80044b8:	00f6      	lsls	r6, r6, #3
 80044ba:	617e      	str	r6, [r7, #20]
 80044bc:	697e      	ldr	r6, [r7, #20]
 80044be:	4316      	orrs	r6, r2
 80044c0:	617e      	str	r6, [r7, #20]
 80044c2:	0002      	movs	r2, r0
 80044c4:	00d2      	lsls	r2, r2, #3
 80044c6:	613a      	str	r2, [r7, #16]
 80044c8:	001a      	movs	r2, r3
 80044ca:	603a      	str	r2, [r7, #0]
 80044cc:	2200      	movs	r2, #0
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	6838      	ldr	r0, [r7, #0]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	0002      	movs	r2, r0
 80044d6:	0f52      	lsrs	r2, r2, #29
 80044d8:	000e      	movs	r6, r1
 80044da:	00f5      	lsls	r5, r6, #3
 80044dc:	4315      	orrs	r5, r2
 80044de:	0002      	movs	r2, r0
 80044e0:	00d4      	lsls	r4, r2, #3
 80044e2:	3307      	adds	r3, #7
 80044e4:	08db      	lsrs	r3, r3, #3
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	466a      	mov	r2, sp
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	469d      	mov	sp, r3
 80044ee:	466b      	mov	r3, sp
 80044f0:	3300      	adds	r3, #0
 80044f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 80044f4:	246f      	movs	r4, #111	@ 0x6f
 80044f6:	2518      	movs	r5, #24
 80044f8:	1963      	adds	r3, r4, r5
 80044fa:	19db      	adds	r3, r3, r7
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	001a      	movs	r2, r3
 8004502:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004504:	2100      	movs	r1, #0
 8004506:	0018      	movs	r0, r3
 8004508:	f018 f930 	bl	801c76c <memset>
  strncpy(atCommand, atCommandBuff, len);
 800450c:	1963      	adds	r3, r4, r5
 800450e:	19db      	adds	r3, r3, r7
 8004510:	781a      	ldrb	r2, [r3, #0]
 8004512:	1979      	adds	r1, r7, r5
 8004514:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004516:	0018      	movs	r0, r3
 8004518:	f018 f94f 	bl	801c7ba <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800451c:	1963      	adds	r3, r4, r5
 800451e:	19db      	adds	r3, r3, r7
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b29a      	uxth	r2, r3
 8004524:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004526:	0011      	movs	r1, r2
 8004528:	0018      	movs	r0, r3
 800452a:	f7ff fa3b 	bl	80039a4 <ESP_Send>
 800452e:	1e03      	subs	r3, r0, #0
 8004530:	d001      	beq.n	8004536 <CWJAP+0xe2>
    return true;
 8004532:	2301      	movs	r3, #1
 8004534:	e000      	b.n	8004538 <CWJAP+0xe4>
  }
  else{
    return false;
 8004536:	2300      	movs	r3, #0
 8004538:	46c5      	mov	sp, r8
  }
}
 800453a:	0018      	movs	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	b022      	add	sp, #136	@ 0x88
 8004540:	bc80      	pop	{r7}
 8004542:	46b8      	mov	r8, r7
 8004544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004546:	46c0      	nop			@ (mov r8, r8)
 8004548:	20000549 	.word	0x20000549
 800454c:	08020850 	.word	0x08020850
 8004550:	08020844 	.word	0x08020844
 8004554:	0801fab4 	.word	0x0801fab4

08004558 <CWMODE3>:
bool CWMODE3(){
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 800455e:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <CWMODE3+0x34>)
 8004560:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	0018      	movs	r0, r3
 8004566:	f7fb fe01 	bl	800016c <strlen>
 800456a:	0003      	movs	r3, r0
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0011      	movs	r1, r2
 8004572:	0018      	movs	r0, r3
 8004574:	f7ff fa16 	bl	80039a4 <ESP_Send>
 8004578:	1e03      	subs	r3, r0, #0
 800457a:	d001      	beq.n	8004580 <CWMODE3+0x28>
    return true;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004580:	2300      	movs	r3, #0
  }
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b002      	add	sp, #8
 8004588:	bd80      	pop	{r7, pc}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	0801facc 	.word	0x0801facc

08004590 <CWSTATE>:
bool CWSTATE(){
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 8004596:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <CWSTATE+0x34>)
 8004598:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	0018      	movs	r0, r3
 800459e:	f7fb fde5 	bl	800016c <strlen>
 80045a2:	0003      	movs	r3, r0
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	0011      	movs	r1, r2
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7ff f9fa 	bl	80039a4 <ESP_Send>
 80045b0:	1e03      	subs	r3, r0, #0
 80045b2:	d001      	beq.n	80045b8 <CWSTATE+0x28>
    return true;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <CWSTATE+0x2a>
  }
  else{
    return false;
 80045b8:	2300      	movs	r3, #0
  }
}
 80045ba:	0018      	movs	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	b002      	add	sp, #8
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			@ (mov r8, r8)
 80045c4:	0801fadc 	.word	0x0801fadc

080045c8 <CWSAP>:
bool CWSAP(){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80045ce:	4b0b      	ldr	r3, [pc, #44]	@ (80045fc <CWSAP+0x34>)
 80045d0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7fb fdc9 	bl	800016c <strlen>
 80045da:	0003      	movs	r3, r0
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	0011      	movs	r1, r2
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7ff f9de 	bl	80039a4 <ESP_Send>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d001      	beq.n	80045f0 <CWSAP+0x28>
    return true;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e000      	b.n	80045f2 <CWSAP+0x2a>
  }
  else{
    return false;
 80045f0:	2300      	movs	r3, #0
  }
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	0801faec 	.word	0x0801faec

08004600 <CIPMUX>:
bool CIPMUX(){
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <CIPMUX+0x34>)
 8004608:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f7fb fdad 	bl	800016c <strlen>
 8004612:	0003      	movs	r3, r0
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0011      	movs	r1, r2
 800461a:	0018      	movs	r0, r3
 800461c:	f7ff f9c2 	bl	80039a4 <ESP_Send>
 8004620:	1e03      	subs	r3, r0, #0
 8004622:	d001      	beq.n	8004628 <CIPMUX+0x28>
    return true;
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <CIPMUX+0x2a>
  }
  else{
    return false;
 8004628:	2300      	movs	r3, #0
  }
}
 800462a:	0018      	movs	r0, r3
 800462c:	46bd      	mov	sp, r7
 800462e:	b002      	add	sp, #8
 8004630:	bd80      	pop	{r7, pc}
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	0801fb10 	.word	0x0801fb10

08004638 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <WEBSERVER+0x34>)
 8004640:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f7fb fd91 	bl	800016c <strlen>
 800464a:	0003      	movs	r3, r0
 800464c:	b29a      	uxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0011      	movs	r1, r2
 8004652:	0018      	movs	r0, r3
 8004654:	f7ff f9a6 	bl	80039a4 <ESP_Send>
 8004658:	1e03      	subs	r3, r0, #0
 800465a:	d001      	beq.n	8004660 <WEBSERVER+0x28>
    return true;
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004660:	2300      	movs	r3, #0
  }
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b002      	add	sp, #8
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			@ (mov r8, r8)
 800466c:	0801fb20 	.word	0x0801fb20

08004670 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004670:	b590      	push	{r4, r7, lr}
 8004672:	b0c5      	sub	sp, #276	@ 0x114
 8004674:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 8004676:	2380      	movs	r3, #128	@ 0x80
 8004678:	005a      	lsls	r2, r3, #1
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	2100      	movs	r1, #0
 800467e:	0018      	movs	r0, r3
 8004680:	f018 f874 	bl	801c76c <memset>
  uint16_t length = CreateMessage(beurs);
 8004684:	4b22      	ldr	r3, [pc, #136]	@ (8004710 <HTTPCPOST+0xa0>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	1dfc      	adds	r4, r7, #7
 800468a:	34ff      	adds	r4, #255	@ 0xff
 800468c:	0018      	movs	r0, r3
 800468e:	f7ff fa31 	bl	8003af4 <CreateMessage>
 8004692:	0003      	movs	r3, r0
 8004694:	8023      	strh	r3, [r4, #0]
  if(beurs){
 8004696:	4b1e      	ldr	r3, [pc, #120]	@ (8004710 <HTTPCPOST+0xa0>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 800469e:	1dfb      	adds	r3, r7, #7
 80046a0:	33ff      	adds	r3, #255	@ 0xff
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <HTTPCPOST+0xa4>)
 80046a6:	491c      	ldr	r1, [pc, #112]	@ (8004718 <HTTPCPOST+0xa8>)
 80046a8:	1d38      	adds	r0, r7, #4
 80046aa:	f017 ff1b 	bl	801c4e4 <siprintf>
 80046ae:	e016      	b.n	80046de <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80046b0:	4b1a      	ldr	r3, [pc, #104]	@ (800471c <HTTPCPOST+0xac>)
 80046b2:	481b      	ldr	r0, [pc, #108]	@ (8004720 <HTTPCPOST+0xb0>)
 80046b4:	220c      	movs	r2, #12
 80046b6:	0019      	movs	r1, r3
 80046b8:	f7ff f81e 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80046bc:	4a17      	ldr	r2, [pc, #92]	@ (800471c <HTTPCPOST+0xac>)
 80046be:	4b19      	ldr	r3, [pc, #100]	@ (8004724 <HTTPCPOST+0xb4>)
 80046c0:	0011      	movs	r1, r2
 80046c2:	0018      	movs	r0, r3
 80046c4:	f7ff f9f2 	bl	8003aac <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80046c8:	1dfb      	adds	r3, r7, #7
 80046ca:	33ff      	adds	r3, #255	@ 0xff
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	4c15      	ldr	r4, [pc, #84]	@ (8004724 <HTTPCPOST+0xb4>)
 80046d0:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <HTTPCPOST+0xb8>)
 80046d2:	4916      	ldr	r1, [pc, #88]	@ (800472c <HTTPCPOST+0xbc>)
 80046d4:	1d38      	adds	r0, r7, #4
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	0023      	movs	r3, r4
 80046da:	f017 ff03 	bl	801c4e4 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7fb fd43 	bl	800016c <strlen>
 80046e6:	0002      	movs	r2, r0
 80046e8:	1d7b      	adds	r3, r7, #5
 80046ea:	33ff      	adds	r3, #255	@ 0xff
 80046ec:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 80046ee:	1d7b      	adds	r3, r7, #5
 80046f0:	33ff      	adds	r3, #255	@ 0xff
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	1d3b      	adds	r3, r7, #4
 80046f6:	0011      	movs	r1, r2
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff f953 	bl	80039a4 <ESP_Send>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d001      	beq.n	8004706 <HTTPCPOST+0x96>
    return true;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004706:	2300      	movs	r3, #0
  }
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b043      	add	sp, #268	@ 0x10c
 800470e:	bd90      	pop	{r4, r7, pc}
 8004710:	2000054a 	.word	0x2000054a
 8004714:	08020870 	.word	0x08020870
 8004718:	0801fb38 	.word	0x0801fb38
 800471c:	20000a58 	.word	0x20000a58
 8004720:	08080000 	.word	0x08080000
 8004724:	20000a64 	.word	0x20000a64
 8004728:	080208ac 	.word	0x080208ac
 800472c:	0801fb70 	.word	0x0801fb70

08004730 <SENDDATA>:
bool SENDDATA(){
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004736:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <SENDDATA+0x34>)
 8004738:	0018      	movs	r0, r3
 800473a:	f7fb fd17 	bl	800016c <strlen>
 800473e:	0002      	movs	r2, r0
 8004740:	1dbb      	adds	r3, r7, #6
 8004742:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004744:	1dbb      	adds	r3, r7, #6
 8004746:	881a      	ldrh	r2, [r3, #0]
 8004748:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <SENDDATA+0x34>)
 800474a:	0011      	movs	r1, r2
 800474c:	0018      	movs	r0, r3
 800474e:	f7ff f929 	bl	80039a4 <ESP_Send>
 8004752:	1e03      	subs	r3, r0, #0
 8004754:	d001      	beq.n	800475a <SENDDATA+0x2a>
    return true;
 8004756:	2301      	movs	r3, #1
 8004758:	e000      	b.n	800475c <SENDDATA+0x2c>
  }
  else{
    return false;
 800475a:	2300      	movs	r3, #0
  }
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000578 	.word	0x20000578

08004768 <SLEEP>:
bool SLEEP(){
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800476e:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <SLEEP+0x34>)
 8004770:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f7fb fcf9 	bl	800016c <strlen>
 800477a:	0003      	movs	r3, r0
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0011      	movs	r1, r2
 8004782:	0018      	movs	r0, r3
 8004784:	f7ff f90e 	bl	80039a4 <ESP_Send>
 8004788:	1e03      	subs	r3, r0, #0
 800478a:	d001      	beq.n	8004790 <SLEEP+0x28>
    return true;
 800478c:	2301      	movs	r3, #1
 800478e:	e000      	b.n	8004792 <SLEEP+0x2a>
  }
  else{
    return false;
 8004790:	2300      	movs	r3, #0
  }
}
 8004792:	0018      	movs	r0, r3
 8004794:	46bd      	mov	sp, r7
 8004796:	b002      	add	sp, #8
 8004798:	bd80      	pop	{r7, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	0801fbb0 	.word	0x0801fbb0

080047a0 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80047a6:	4b0d      	ldr	r3, [pc, #52]	@ (80047dc <CIPSNTPCFG+0x3c>)
 80047a8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fb fcdd 	bl	800016c <strlen>
 80047b2:	0003      	movs	r3, r0
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0011      	movs	r1, r2
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff f8f2 	bl	80039a4 <ESP_Send>
 80047c0:	1e03      	subs	r3, r0, #0
 80047c2:	d006      	beq.n	80047d2 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 80047c4:	23fa      	movs	r3, #250	@ 0xfa
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	0018      	movs	r0, r3
 80047ca:	f007 fba7 	bl	800bf1c <HAL_Delay>
    return true;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 80047d2:	2300      	movs	r3, #0
  }
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	0801fbc0 	.word	0x0801fbc0

080047e0 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <CIPSNTPTIME+0x34>)
 80047e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7fb fcbd 	bl	800016c <strlen>
 80047f2:	0003      	movs	r3, r0
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	0011      	movs	r1, r2
 80047fa:	0018      	movs	r0, r3
 80047fc:	f7ff f8d2 	bl	80039a4 <ESP_Send>
 8004800:	1e03      	subs	r3, r0, #0
 8004802:	d001      	beq.n	8004808 <CIPSNTPTIME+0x28>
    return true;
 8004804:	2301      	movs	r3, #1
 8004806:	e000      	b.n	800480a <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004808:	2300      	movs	r3, #0
  }
}
 800480a:	0018      	movs	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	b002      	add	sp, #8
 8004810:	bd80      	pop	{r7, pc}
 8004812:	46c0      	nop			@ (mov r8, r8)
 8004814:	0801fc10 	.word	0x0801fc10

08004818 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 800481e:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <CIPSNTPINTV+0x34>)
 8004820:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f7fb fca1 	bl	800016c <strlen>
 800482a:	0003      	movs	r3, r0
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0011      	movs	r1, r2
 8004832:	0018      	movs	r0, r3
 8004834:	f7ff f8b6 	bl	80039a4 <ESP_Send>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d001      	beq.n	8004840 <CIPSNTPINTV+0x28>
    return true;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004840:	2300      	movs	r3, #0
  }
}
 8004842:	0018      	movs	r0, r3
 8004844:	46bd      	mov	sp, r7
 8004846:	b002      	add	sp, #8
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	0801fc24 	.word	0x0801fc24

08004850 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004850:	b5b0      	push	{r4, r5, r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	0002      	movs	r2, r0
 8004858:	1dfb      	adds	r3, r7, #7
 800485a:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 800485c:	4b71      	ldr	r3, [pc, #452]	@ (8004a24 <DMA_ProcessBuffer+0x1d4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	b29a      	uxth	r2, r3
 8004864:	200e      	movs	r0, #14
 8004866:	183b      	adds	r3, r7, r0
 8004868:	2180      	movs	r1, #128	@ 0x80
 800486a:	0049      	lsls	r1, r1, #1
 800486c:	1a8a      	subs	r2, r1, r2
 800486e:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004870:	230d      	movs	r3, #13
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	2203      	movs	r2, #3
 8004876:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 8004878:	183b      	adds	r3, r7, r0
 800487a:	881a      	ldrh	r2, [r3, #0]
 800487c:	2380      	movs	r3, #128	@ 0x80
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	429a      	cmp	r2, r3
 8004882:	d903      	bls.n	800488c <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004884:	183b      	adds	r3, r7, r0
 8004886:	2280      	movs	r2, #128	@ 0x80
 8004888:	0052      	lsls	r2, r2, #1
 800488a:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 800488c:	4b66      	ldr	r3, [pc, #408]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	001a      	movs	r2, r3
 8004894:	230e      	movs	r3, #14
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	4293      	cmp	r3, r2
 800489c:	d131      	bne.n	8004902 <DMA_ProcessBuffer+0xb2>
      if(retry > 30){
 800489e:	4b63      	ldr	r3, [pc, #396]	@ (8004a2c <DMA_ProcessBuffer+0x1dc>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b1e      	cmp	r3, #30
 80048a4:	d91b      	bls.n	80048de <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80048a6:	4b61      	ldr	r3, [pc, #388]	@ (8004a2c <DMA_ProcessBuffer+0x1dc>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80048ac:	4b60      	ldr	r3, [pc, #384]	@ (8004a30 <DMA_ProcessBuffer+0x1e0>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <DMA_ProcessBuffer+0x74>
 80048b4:	4b5f      	ldr	r3, [pc, #380]	@ (8004a34 <DMA_ProcessBuffer+0x1e4>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 80048bc:	230d      	movs	r3, #13
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	2207      	movs	r2, #7
 80048c2:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80048c4:	4b5a      	ldr	r3, [pc, #360]	@ (8004a30 <DMA_ProcessBuffer+0x1e0>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d103      	bne.n	80048d4 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 80048cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004a38 <DMA_ProcessBuffer+0x1e8>)
 80048ce:	220b      	movs	r2, #11
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e016      	b.n	8004902 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80048d4:	230d      	movs	r3, #13
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	2206      	movs	r2, #6
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e011      	b.n	8004902 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 80048de:	4b53      	ldr	r3, [pc, #332]	@ (8004a2c <DMA_ProcessBuffer+0x1dc>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	3301      	adds	r3, #1
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b51      	ldr	r3, [pc, #324]	@ (8004a2c <DMA_ProcessBuffer+0x1dc>)
 80048e8:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 80048ea:	f007 fb0d 	bl	800bf08 <HAL_GetTick>
 80048ee:	0003      	movs	r3, r0
 80048f0:	33f5      	adds	r3, #245	@ 0xf5
 80048f2:	33ff      	adds	r3, #255	@ 0xff
 80048f4:	001a      	movs	r2, r3
 80048f6:	4b51      	ldr	r3, [pc, #324]	@ (8004a3c <DMA_ProcessBuffer+0x1ec>)
 80048f8:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80048fa:	230d      	movs	r3, #13
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2204      	movs	r2, #4
 8004900:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004902:	4b49      	ldr	r3, [pc, #292]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	001a      	movs	r2, r3
 800490a:	210e      	movs	r1, #14
 800490c:	187b      	adds	r3, r7, r1
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	4293      	cmp	r3, r2
 8004912:	d100      	bne.n	8004916 <DMA_ProcessBuffer+0xc6>
 8004914:	e07f      	b.n	8004a16 <DMA_ProcessBuffer+0x1c6>
      retry = 0;
 8004916:	4b45      	ldr	r3, [pc, #276]	@ (8004a2c <DMA_ProcessBuffer+0x1dc>)
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 800491c:	4b48      	ldr	r3, [pc, #288]	@ (8004a40 <DMA_ProcessBuffer+0x1f0>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4b41      	ldr	r3, [pc, #260]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	429a      	cmp	r2, r3
 800492a:	d109      	bne.n	8004940 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 800492c:	187b      	adds	r3, r7, r1
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	4b43      	ldr	r3, [pc, #268]	@ (8004a40 <DMA_ProcessBuffer+0x1f0>)
 8004934:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004936:	230d      	movs	r3, #13
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	220a      	movs	r2, #10
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e06a      	b.n	8004a16 <DMA_ProcessBuffer+0x1c6>
      }
      else{
        if(TempPos != pos){
 8004940:	4b3f      	ldr	r3, [pc, #252]	@ (8004a40 <DMA_ProcessBuffer+0x1f0>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	001a      	movs	r2, r3
 8004948:	210e      	movs	r1, #14
 800494a:	187b      	adds	r3, r7, r1
 800494c:	881b      	ldrh	r3, [r3, #0]
 800494e:	4293      	cmp	r3, r2
 8004950:	d009      	beq.n	8004966 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004952:	187b      	adds	r3, r7, r1
 8004954:	881b      	ldrh	r3, [r3, #0]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	4b39      	ldr	r3, [pc, #228]	@ (8004a40 <DMA_ProcessBuffer+0x1f0>)
 800495a:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 800495c:	230d      	movs	r3, #13
 800495e:	18fb      	adds	r3, r7, r3
 8004960:	220a      	movs	r2, #10
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e057      	b.n	8004a16 <DMA_ProcessBuffer+0x1c6>
        }
        else{
          if (pos > OldPos) {
 8004966:	4b30      	ldr	r3, [pc, #192]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	001a      	movs	r2, r3
 800496e:	210e      	movs	r1, #14
 8004970:	187b      	adds	r3, r7, r1
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	4293      	cmp	r3, r2
 8004976:	d917      	bls.n	80049a8 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004978:	4b2b      	ldr	r3, [pc, #172]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	001a      	movs	r2, r3
 8004980:	4b30      	ldr	r3, [pc, #192]	@ (8004a44 <DMA_ProcessBuffer+0x1f4>)
 8004982:	18d0      	adds	r0, r2, r3
 8004984:	4b28      	ldr	r3, [pc, #160]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	001a      	movs	r2, r3
 800498c:	187b      	adds	r3, r7, r1
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	1a9b      	subs	r3, r3, r2
 8004992:	b299      	uxth	r1, r3
 8004994:	230d      	movs	r3, #13
 8004996:	18fc      	adds	r4, r7, r3
 8004998:	1dfb      	adds	r3, r7, #7
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	001a      	movs	r2, r3
 800499e:	f7ff fa91 	bl	8003ec4 <ParseBuffer>
 80049a2:	0003      	movs	r3, r0
 80049a4:	7023      	strb	r3, [r4, #0]
 80049a6:	e026      	b.n	80049f6 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80049a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	001a      	movs	r2, r3
 80049b0:	4b24      	ldr	r3, [pc, #144]	@ (8004a44 <DMA_ProcessBuffer+0x1f4>)
 80049b2:	18d0      	adds	r0, r2, r3
 80049b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	001a      	movs	r2, r3
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	b299      	uxth	r1, r3
 80049c4:	250d      	movs	r5, #13
 80049c6:	197c      	adds	r4, r7, r5
 80049c8:	1dfb      	adds	r3, r7, #7
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	001a      	movs	r2, r3
 80049ce:	f7ff fa79 	bl	8003ec4 <ParseBuffer>
 80049d2:	0003      	movs	r3, r0
 80049d4:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80049d6:	210e      	movs	r1, #14
 80049d8:	187b      	adds	r3, r7, r1
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80049e0:	197c      	adds	r4, r7, r5
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	187b      	adds	r3, r7, r1
 80049e8:	8819      	ldrh	r1, [r3, #0]
 80049ea:	4b16      	ldr	r3, [pc, #88]	@ (8004a44 <DMA_ProcessBuffer+0x1f4>)
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7ff fa69 	bl	8003ec4 <ParseBuffer>
 80049f2:	0003      	movs	r3, r0
 80049f4:	7023      	strb	r3, [r4, #0]
              }
          }
          printf("RxBuffer OldPos: %d, pos: %d\r\n", OldPos, pos);
 80049f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	0019      	movs	r1, r3
 80049fe:	240e      	movs	r4, #14
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	4b10      	ldr	r3, [pc, #64]	@ (8004a48 <DMA_ProcessBuffer+0x1f8>)
 8004a06:	0018      	movs	r0, r3
 8004a08:	f017 fcfc 	bl	801c404 <iprintf>
          OldPos = pos;
 8004a0c:	193b      	adds	r3, r7, r4
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <DMA_ProcessBuffer+0x1d8>)
 8004a14:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004a16:	230d      	movs	r3, #13
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	781b      	ldrb	r3, [r3, #0]
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b004      	add	sp, #16
 8004a22:	bdb0      	pop	{r4, r5, r7, pc}
 8004a24:	20002414 	.word	0x20002414
 8004a28:	20000a7d 	.word	0x20000a7d
 8004a2c:	20000990 	.word	0x20000990
 8004a30:	20000992 	.word	0x20000992
 8004a34:	20000000 	.word	0x20000000
 8004a38:	20000028 	.word	0x20000028
 8004a3c:	20000984 	.word	0x20000984
 8004a40:	20000a7e 	.word	0x20000a7e
 8004a44:	20000444 	.word	0x20000444
 8004a48:	0801fc3c 	.word	0x0801fc3c

08004a4c <clearDMABuffer>:

void clearDMABuffer(){
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004a50:	2380      	movs	r3, #128	@ 0x80
 8004a52:	005a      	lsls	r2, r3, #1
 8004a54:	4b03      	ldr	r3, [pc, #12]	@ (8004a64 <clearDMABuffer+0x18>)
 8004a56:	2100      	movs	r1, #0
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f017 fe87 	bl	801c76c <memset>
}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	20000444 	.word	0x20000444

08004a68 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	0002      	movs	r2, r0
 8004a70:	1dfb      	adds	r3, r7, #7
 8004a72:	701a      	strb	r2, [r3, #0]
 8004a74:	1dbb      	adds	r3, r7, #6
 8004a76:	1c0a      	adds	r2, r1, #0
 8004a78:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004a7a:	210f      	movs	r1, #15
 8004a7c:	187b      	adds	r3, r7, r1
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004a82:	1dbb      	adds	r3, r7, #6
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004a8a:	187b      	adds	r3, r7, r1
 8004a8c:	1dfa      	adds	r2, r7, #7
 8004a8e:	7812      	ldrb	r2, [r2, #0]
 8004a90:	4251      	negs	r1, r2
 8004a92:	414a      	adcs	r2, r1
 8004a94:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004a96:	1dbb      	adds	r3, r7, #6
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004a9e:	230f      	movs	r3, #15
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	1dfa      	adds	r2, r7, #7
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	3a02      	subs	r2, #2
 8004aa8:	4251      	negs	r1, r2
 8004aaa:	414a      	adcs	r2, r1
 8004aac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004aae:	1dbb      	adds	r3, r7, #6
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d107      	bne.n	8004ac6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004ab6:	230f      	movs	r3, #15
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	1dfa      	adds	r2, r7, #7
 8004abc:	7812      	ldrb	r2, [r2, #0]
 8004abe:	3a05      	subs	r2, #5
 8004ac0:	4251      	negs	r1, r2
 8004ac2:	414a      	adcs	r2, r1
 8004ac4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004ac6:	1dbb      	adds	r3, r7, #6
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d107      	bne.n	8004ade <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004ace:	230f      	movs	r3, #15
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	1dfa      	adds	r2, r7, #7
 8004ad4:	7812      	ldrb	r2, [r2, #0]
 8004ad6:	3a0b      	subs	r2, #11
 8004ad8:	4251      	negs	r1, r2
 8004ada:	414a      	adcs	r2, r1
 8004adc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004ade:	230f      	movs	r3, #15
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	781b      	ldrb	r3, [r3, #0]
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b004      	add	sp, #16
 8004aea:	bd80      	pop	{r7, pc}

08004aec <AT_Send>:

bool AT_Send(AT_Commands state){
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	0002      	movs	r2, r0
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004af8:	230f      	movs	r3, #15
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b13      	cmp	r3, #19
 8004b06:	d900      	bls.n	8004b0a <AT_Send+0x1e>
 8004b08:	e18a      	b.n	8004e20 <AT_Send+0x334>
 8004b0a:	009a      	lsls	r2, r3, #2
 8004b0c:	4bc8      	ldr	r3, [pc, #800]	@ (8004e30 <AT_Send+0x344>)
 8004b0e:	18d3      	adds	r3, r2, r3
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004b14:	4bc7      	ldr	r3, [pc, #796]	@ (8004e34 <AT_Send+0x348>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f006 fe0b 	bl	800b734 <TimestampIsReached>
 8004b1e:	1e03      	subs	r3, r0, #0
 8004b20:	d100      	bne.n	8004b24 <AT_Send+0x38>
 8004b22:	e17c      	b.n	8004e1e <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004b24:	230f      	movs	r3, #15
 8004b26:	18fc      	adds	r4, r7, r3
 8004b28:	f7ff fbb4 	bl	8004294 <PollAwake>
 8004b2c:	0003      	movs	r3, r0
 8004b2e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004b30:	f007 f9ea 	bl	800bf08 <HAL_GetTick>
 8004b34:	0003      	movs	r3, r0
 8004b36:	3332      	adds	r3, #50	@ 0x32
 8004b38:	001a      	movs	r2, r3
 8004b3a:	4bbe      	ldr	r3, [pc, #760]	@ (8004e34 <AT_Send+0x348>)
 8004b3c:	601a      	str	r2, [r3, #0]
  }
  break;
 8004b3e:	e16e      	b.n	8004e1e <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004b40:	4abd      	ldr	r2, [pc, #756]	@ (8004e38 <AT_Send+0x34c>)
 8004b42:	4bbe      	ldr	r3, [pc, #760]	@ (8004e3c <AT_Send+0x350>)
 8004b44:	0019      	movs	r1, r3
 8004b46:	2003      	movs	r0, #3
 8004b48:	f006 fe4a 	bl	800b7e0 <CreateLine>
    ATCommandSend = RFPower();
 8004b4c:	230f      	movs	r3, #15
 8004b4e:	18fc      	adds	r4, r7, r3
 8004b50:	f7ff fbbc 	bl	80042cc <RFPower>
 8004b54:	0003      	movs	r3, r0
 8004b56:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b58:	f007 f9d6 	bl	800bf08 <HAL_GetTick>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	330a      	adds	r3, #10
 8004b60:	001a      	movs	r2, r3
 8004b62:	4bb4      	ldr	r3, [pc, #720]	@ (8004e34 <AT_Send+0x348>)
 8004b64:	601a      	str	r2, [r3, #0]
    break;
 8004b66:	e15b      	b.n	8004e20 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004b68:	4ab5      	ldr	r2, [pc, #724]	@ (8004e40 <AT_Send+0x354>)
 8004b6a:	4bb4      	ldr	r3, [pc, #720]	@ (8004e3c <AT_Send+0x350>)
 8004b6c:	0019      	movs	r1, r3
 8004b6e:	2003      	movs	r0, #3
 8004b70:	f006 fe36 	bl	800b7e0 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004b74:	230f      	movs	r3, #15
 8004b76:	18fc      	adds	r4, r7, r3
 8004b78:	f7ff fbc4 	bl	8004304 <CheckRFPower>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b80:	f007 f9c2 	bl	800bf08 <HAL_GetTick>
 8004b84:	0003      	movs	r3, r0
 8004b86:	330a      	adds	r3, #10
 8004b88:	001a      	movs	r2, r3
 8004b8a:	4baa      	ldr	r3, [pc, #680]	@ (8004e34 <AT_Send+0x348>)
 8004b8c:	601a      	str	r2, [r3, #0]
    break;
 8004b8e:	e147      	b.n	8004e20 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004b90:	4aac      	ldr	r2, [pc, #688]	@ (8004e44 <AT_Send+0x358>)
 8004b92:	4baa      	ldr	r3, [pc, #680]	@ (8004e3c <AT_Send+0x350>)
 8004b94:	0019      	movs	r1, r3
 8004b96:	2003      	movs	r0, #3
 8004b98:	f006 fe22 	bl	800b7e0 <CreateLine>
    ATCommandSend = ATRestore();
 8004b9c:	230f      	movs	r3, #15
 8004b9e:	18fc      	adds	r4, r7, r3
 8004ba0:	f7ff fbcc 	bl	800433c <ATRestore>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004ba8:	f007 f9ae 	bl	800bf08 <HAL_GetTick>
 8004bac:	0003      	movs	r3, r0
 8004bae:	3332      	adds	r3, #50	@ 0x32
 8004bb0:	001a      	movs	r2, r3
 8004bb2:	4ba0      	ldr	r3, [pc, #640]	@ (8004e34 <AT_Send+0x348>)
 8004bb4:	601a      	str	r2, [r3, #0]
    break;
 8004bb6:	e133      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004bb8:	4aa3      	ldr	r2, [pc, #652]	@ (8004e48 <AT_Send+0x35c>)
 8004bba:	4ba0      	ldr	r3, [pc, #640]	@ (8004e3c <AT_Send+0x350>)
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	2003      	movs	r0, #3
 8004bc0:	f006 fe0e 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWINIT();
 8004bc4:	230f      	movs	r3, #15
 8004bc6:	18fc      	adds	r4, r7, r3
 8004bc8:	f7ff fbd4 	bl	8004374 <CWINIT>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004bd0:	f007 f99a 	bl	800bf08 <HAL_GetTick>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	33f5      	adds	r3, #245	@ 0xf5
 8004bd8:	33ff      	adds	r3, #255	@ 0xff
 8004bda:	001a      	movs	r2, r3
 8004bdc:	4b95      	ldr	r3, [pc, #596]	@ (8004e34 <AT_Send+0x348>)
 8004bde:	601a      	str	r2, [r3, #0]
    break;
 8004be0:	e11e      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004be2:	4a9a      	ldr	r2, [pc, #616]	@ (8004e4c <AT_Send+0x360>)
 8004be4:	4b95      	ldr	r3, [pc, #596]	@ (8004e3c <AT_Send+0x350>)
 8004be6:	0019      	movs	r1, r3
 8004be8:	2003      	movs	r0, #3
 8004bea:	f006 fdf9 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWSTATE();
 8004bee:	230f      	movs	r3, #15
 8004bf0:	18fc      	adds	r4, r7, r3
 8004bf2:	f7ff fccd 	bl	8004590 <CWSTATE>
 8004bf6:	0003      	movs	r3, r0
 8004bf8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004bfa:	f007 f985 	bl	800bf08 <HAL_GetTick>
 8004bfe:	0003      	movs	r3, r0
 8004c00:	33f5      	adds	r3, #245	@ 0xf5
 8004c02:	33ff      	adds	r3, #255	@ 0xff
 8004c04:	001a      	movs	r2, r3
 8004c06:	4b8b      	ldr	r3, [pc, #556]	@ (8004e34 <AT_Send+0x348>)
 8004c08:	601a      	str	r2, [r3, #0]
    break;
 8004c0a:	e109      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004c0c:	4a90      	ldr	r2, [pc, #576]	@ (8004e50 <AT_Send+0x364>)
 8004c0e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e3c <AT_Send+0x350>)
 8004c10:	0019      	movs	r1, r3
 8004c12:	2003      	movs	r0, #3
 8004c14:	f006 fde4 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWMODE1();
 8004c18:	230f      	movs	r3, #15
 8004c1a:	18fc      	adds	r4, r7, r3
 8004c1c:	f7ff fbc6 	bl	80043ac <CWMODE1>
 8004c20:	0003      	movs	r3, r0
 8004c22:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c24:	f007 f970 	bl	800bf08 <HAL_GetTick>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	330a      	adds	r3, #10
 8004c2c:	001a      	movs	r2, r3
 8004c2e:	4b81      	ldr	r3, [pc, #516]	@ (8004e34 <AT_Send+0x348>)
 8004c30:	601a      	str	r2, [r3, #0]
    break;
 8004c32:	e0f5      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004c34:	4a86      	ldr	r2, [pc, #536]	@ (8004e50 <AT_Send+0x364>)
 8004c36:	4b81      	ldr	r3, [pc, #516]	@ (8004e3c <AT_Send+0x350>)
 8004c38:	0019      	movs	r1, r3
 8004c3a:	2003      	movs	r0, #3
 8004c3c:	f006 fdd0 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWMODE2();
 8004c40:	230f      	movs	r3, #15
 8004c42:	18fc      	adds	r4, r7, r3
 8004c44:	f7ff fbce 	bl	80043e4 <CWMODE2>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c4c:	f007 f95c 	bl	800bf08 <HAL_GetTick>
 8004c50:	0003      	movs	r3, r0
 8004c52:	330a      	adds	r3, #10
 8004c54:	001a      	movs	r2, r3
 8004c56:	4b77      	ldr	r3, [pc, #476]	@ (8004e34 <AT_Send+0x348>)
 8004c58:	601a      	str	r2, [r3, #0]
    break;
 8004c5a:	e0e1      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004c5c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e54 <AT_Send+0x368>)
 8004c5e:	4b77      	ldr	r3, [pc, #476]	@ (8004e3c <AT_Send+0x350>)
 8004c60:	0019      	movs	r1, r3
 8004c62:	2003      	movs	r0, #3
 8004c64:	f006 fdbc 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004c68:	230f      	movs	r3, #15
 8004c6a:	18fc      	adds	r4, r7, r3
 8004c6c:	f7ff fbd6 	bl	800441c <CWAUTOCONN>
 8004c70:	0003      	movs	r3, r0
 8004c72:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c74:	f007 f948 	bl	800bf08 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	330a      	adds	r3, #10
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e34 <AT_Send+0x348>)
 8004c80:	601a      	str	r2, [r3, #0]
    break;
 8004c82:	e0cd      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004c84:	4a74      	ldr	r2, [pc, #464]	@ (8004e58 <AT_Send+0x36c>)
 8004c86:	4b6d      	ldr	r3, [pc, #436]	@ (8004e3c <AT_Send+0x350>)
 8004c88:	0019      	movs	r1, r3
 8004c8a:	2003      	movs	r0, #3
 8004c8c:	f006 fda8 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWJAP();
 8004c90:	230f      	movs	r3, #15
 8004c92:	18fc      	adds	r4, r7, r3
 8004c94:	f7ff fbde 	bl	8004454 <CWJAP>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004c9c:	f007 f934 	bl	800bf08 <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	3332      	adds	r3, #50	@ 0x32
 8004ca4:	001a      	movs	r2, r3
 8004ca6:	4b63      	ldr	r3, [pc, #396]	@ (8004e34 <AT_Send+0x348>)
 8004ca8:	601a      	str	r2, [r3, #0]
    break;
 8004caa:	e0b9      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004cac:	4a6b      	ldr	r2, [pc, #428]	@ (8004e5c <AT_Send+0x370>)
 8004cae:	4b63      	ldr	r3, [pc, #396]	@ (8004e3c <AT_Send+0x350>)
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	2003      	movs	r0, #3
 8004cb4:	f006 fd94 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWMODE3();
 8004cb8:	230f      	movs	r3, #15
 8004cba:	18fc      	adds	r4, r7, r3
 8004cbc:	f7ff fc4c 	bl	8004558 <CWMODE3>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cc4:	f007 f920 	bl	800bf08 <HAL_GetTick>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	330a      	adds	r3, #10
 8004ccc:	001a      	movs	r2, r3
 8004cce:	4b59      	ldr	r3, [pc, #356]	@ (8004e34 <AT_Send+0x348>)
 8004cd0:	601a      	str	r2, [r3, #0]
    break;
 8004cd2:	e0a5      	b.n	8004e20 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004cd4:	4a62      	ldr	r2, [pc, #392]	@ (8004e60 <AT_Send+0x374>)
 8004cd6:	4b59      	ldr	r3, [pc, #356]	@ (8004e3c <AT_Send+0x350>)
 8004cd8:	0019      	movs	r1, r3
 8004cda:	2003      	movs	r0, #3
 8004cdc:	f006 fd80 	bl	800b7e0 <CreateLine>
    ATCommandSend = CWSAP();
 8004ce0:	230f      	movs	r3, #15
 8004ce2:	18fc      	adds	r4, r7, r3
 8004ce4:	f7ff fc70 	bl	80045c8 <CWSAP>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cec:	f007 f90c 	bl	800bf08 <HAL_GetTick>
 8004cf0:	0003      	movs	r3, r0
 8004cf2:	330a      	adds	r3, #10
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8004e34 <AT_Send+0x348>)
 8004cf8:	601a      	str	r2, [r3, #0]
    break;
 8004cfa:	e091      	b.n	8004e20 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004cfc:	230f      	movs	r3, #15
 8004cfe:	18fc      	adds	r4, r7, r3
 8004d00:	f7ff fc7e 	bl	8004600 <CIPMUX>
 8004d04:	0003      	movs	r3, r0
 8004d06:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d08:	f007 f8fe 	bl	800bf08 <HAL_GetTick>
 8004d0c:	0003      	movs	r3, r0
 8004d0e:	330a      	adds	r3, #10
 8004d10:	001a      	movs	r2, r3
 8004d12:	4b48      	ldr	r3, [pc, #288]	@ (8004e34 <AT_Send+0x348>)
 8004d14:	601a      	str	r2, [r3, #0]
    break;
 8004d16:	e083      	b.n	8004e20 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004d18:	230f      	movs	r3, #15
 8004d1a:	18fc      	adds	r4, r7, r3
 8004d1c:	f7ff fc8c 	bl	8004638 <WEBSERVER>
 8004d20:	0003      	movs	r3, r0
 8004d22:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d24:	f007 f8f0 	bl	800bf08 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	330a      	adds	r3, #10
 8004d2c:	001a      	movs	r2, r3
 8004d2e:	4b41      	ldr	r3, [pc, #260]	@ (8004e34 <AT_Send+0x348>)
 8004d30:	601a      	str	r2, [r3, #0]
    break;
 8004d32:	e075      	b.n	8004e20 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004d34:	230f      	movs	r3, #15
 8004d36:	18fc      	adds	r4, r7, r3
 8004d38:	f7ff fc9a 	bl	8004670 <HTTPCPOST>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d40:	f007 f8e2 	bl	800bf08 <HAL_GetTick>
 8004d44:	0003      	movs	r3, r0
 8004d46:	33f5      	adds	r3, #245	@ 0xf5
 8004d48:	33ff      	adds	r3, #255	@ 0xff
 8004d4a:	001a      	movs	r2, r3
 8004d4c:	4b39      	ldr	r3, [pc, #228]	@ (8004e34 <AT_Send+0x348>)
 8004d4e:	601a      	str	r2, [r3, #0]
    break;
 8004d50:	e066      	b.n	8004e20 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004d52:	4a44      	ldr	r2, [pc, #272]	@ (8004e64 <AT_Send+0x378>)
 8004d54:	4b39      	ldr	r3, [pc, #228]	@ (8004e3c <AT_Send+0x350>)
 8004d56:	0019      	movs	r1, r3
 8004d58:	2003      	movs	r0, #3
 8004d5a:	f006 fd41 	bl	800b7e0 <CreateLine>
    ATCommandSend = SENDDATA();
 8004d5e:	230f      	movs	r3, #15
 8004d60:	18fc      	adds	r4, r7, r3
 8004d62:	f7ff fce5 	bl	8004730 <SENDDATA>
 8004d66:	0003      	movs	r3, r0
 8004d68:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004d6a:	f007 f8cd 	bl	800bf08 <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	33f5      	adds	r3, #245	@ 0xf5
 8004d72:	33ff      	adds	r3, #255	@ 0xff
 8004d74:	001a      	movs	r2, r3
 8004d76:	4b2f      	ldr	r3, [pc, #188]	@ (8004e34 <AT_Send+0x348>)
 8004d78:	601a      	str	r2, [r3, #0]
    break;
 8004d7a:	e051      	b.n	8004e20 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004d7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e68 <AT_Send+0x37c>)
 8004d7e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e3c <AT_Send+0x350>)
 8004d80:	0019      	movs	r1, r3
 8004d82:	2003      	movs	r0, #3
 8004d84:	f006 fd2c 	bl	800b7e0 <CreateLine>
    ATCommandSend = SLEEP();
 8004d88:	230f      	movs	r3, #15
 8004d8a:	18fc      	adds	r4, r7, r3
 8004d8c:	f7ff fcec 	bl	8004768 <SLEEP>
 8004d90:	0003      	movs	r3, r0
 8004d92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d94:	f007 f8b8 	bl	800bf08 <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	330a      	adds	r3, #10
 8004d9c:	001a      	movs	r2, r3
 8004d9e:	4b25      	ldr	r3, [pc, #148]	@ (8004e34 <AT_Send+0x348>)
 8004da0:	601a      	str	r2, [r3, #0]
    break;
 8004da2:	e03d      	b.n	8004e20 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004da4:	4a31      	ldr	r2, [pc, #196]	@ (8004e6c <AT_Send+0x380>)
 8004da6:	4b25      	ldr	r3, [pc, #148]	@ (8004e3c <AT_Send+0x350>)
 8004da8:	0019      	movs	r1, r3
 8004daa:	2003      	movs	r0, #3
 8004dac:	f006 fd18 	bl	800b7e0 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004db0:	230f      	movs	r3, #15
 8004db2:	18fc      	adds	r4, r7, r3
 8004db4:	f7ff fcf4 	bl	80047a0 <CIPSNTPCFG>
 8004db8:	0003      	movs	r3, r0
 8004dba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dbc:	f007 f8a4 	bl	800bf08 <HAL_GetTick>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	330a      	adds	r3, #10
 8004dc4:	001a      	movs	r2, r3
 8004dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e34 <AT_Send+0x348>)
 8004dc8:	601a      	str	r2, [r3, #0]
    break;
 8004dca:	e029      	b.n	8004e20 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004dcc:	4a28      	ldr	r2, [pc, #160]	@ (8004e70 <AT_Send+0x384>)
 8004dce:	4b1b      	ldr	r3, [pc, #108]	@ (8004e3c <AT_Send+0x350>)
 8004dd0:	0019      	movs	r1, r3
 8004dd2:	2003      	movs	r0, #3
 8004dd4:	f006 fd04 	bl	800b7e0 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004dd8:	230f      	movs	r3, #15
 8004dda:	18fc      	adds	r4, r7, r3
 8004ddc:	f7ff fd00 	bl	80047e0 <CIPSNTPTIME>
 8004de0:	0003      	movs	r3, r0
 8004de2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004de4:	f007 f890 	bl	800bf08 <HAL_GetTick>
 8004de8:	0003      	movs	r3, r0
 8004dea:	33f5      	adds	r3, #245	@ 0xf5
 8004dec:	33ff      	adds	r3, #255	@ 0xff
 8004dee:	001a      	movs	r2, r3
 8004df0:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <AT_Send+0x348>)
 8004df2:	601a      	str	r2, [r3, #0]
    break;
 8004df4:	e014      	b.n	8004e20 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004df6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e74 <AT_Send+0x388>)
 8004df8:	4b10      	ldr	r3, [pc, #64]	@ (8004e3c <AT_Send+0x350>)
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	2003      	movs	r0, #3
 8004dfe:	f006 fcef 	bl	800b7e0 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004e02:	230f      	movs	r3, #15
 8004e04:	18fc      	adds	r4, r7, r3
 8004e06:	f7ff fd07 	bl	8004818 <CIPSNTPINTV>
 8004e0a:	0003      	movs	r3, r0
 8004e0c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e0e:	f007 f87b 	bl	800bf08 <HAL_GetTick>
 8004e12:	0003      	movs	r3, r0
 8004e14:	330a      	adds	r3, #10
 8004e16:	001a      	movs	r2, r3
 8004e18:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <AT_Send+0x348>)
 8004e1a:	601a      	str	r2, [r3, #0]
    break;
 8004e1c:	e000      	b.n	8004e20 <AT_Send+0x334>
  break;
 8004e1e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004e20:	230f      	movs	r3, #15
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	781b      	ldrb	r3, [r3, #0]
}
 8004e26:	0018      	movs	r0, r3
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b005      	add	sp, #20
 8004e2c:	bd90      	pop	{r4, r7, pc}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	080208d4 	.word	0x080208d4
 8004e34:	20000984 	.word	0x20000984
 8004e38:	0801fc5c 	.word	0x0801fc5c
 8004e3c:	0801f6f0 	.word	0x0801f6f0
 8004e40:	0801fc70 	.word	0x0801fc70
 8004e44:	0801fc84 	.word	0x0801fc84
 8004e48:	0801fc94 	.word	0x0801fc94
 8004e4c:	0801fca8 	.word	0x0801fca8
 8004e50:	0801fcc0 	.word	0x0801fcc0
 8004e54:	0801fcd8 	.word	0x0801fcd8
 8004e58:	0801fcf0 	.word	0x0801fcf0
 8004e5c:	0801fd04 	.word	0x0801fd04
 8004e60:	0801fd20 	.word	0x0801fd20
 8004e64:	0801fd3c 	.word	0x0801fd3c
 8004e68:	0801fd4c 	.word	0x0801fd4c
 8004e6c:	0801fd70 	.word	0x0801fd70
 8004e70:	0801fd84 	.word	0x0801fd84
 8004e74:	0801fd9c 	.word	0x0801fd9c

08004e78 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004e7e:	1dfb      	adds	r3, r7, #7
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004e84:	4b7a      	ldr	r3, [pc, #488]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	d900      	bls.n	8004e8e <ESP_WakeTest+0x16>
 8004e8c:	e0d6      	b.n	800503c <ESP_WakeTest+0x1c4>
 8004e8e:	009a      	lsls	r2, r3, #2
 8004e90:	4b78      	ldr	r3, [pc, #480]	@ (8005074 <ESP_WakeTest+0x1fc>)
 8004e92:	18d3      	adds	r3, r2, r3
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004e98:	4b77      	ldr	r3, [pc, #476]	@ (8005078 <ESP_WakeTest+0x200>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4053      	eors	r3, r2
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d036      	beq.n	8004f14 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	4874      	ldr	r0, [pc, #464]	@ (800507c <ESP_WakeTest+0x204>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	0019      	movs	r1, r3
 8004eb0:	f008 fa89 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004eb4:	2032      	movs	r0, #50	@ 0x32
 8004eb6:	f007 f831 	bl	800bf1c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004eba:	2380      	movs	r3, #128	@ 0x80
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	486f      	ldr	r0, [pc, #444]	@ (800507c <ESP_WakeTest+0x204>)
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	0019      	movs	r1, r3
 8004ec4:	f008 fa7f 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ec8:	200a      	movs	r0, #10
 8004eca:	f007 f827 	bl	800bf1c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004ece:	4b6c      	ldr	r3, [pc, #432]	@ (8005080 <ESP_WakeTest+0x208>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f008 fa76 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004eda:	200a      	movs	r0, #10
 8004edc:	f007 f81e 	bl	800bf1c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004ee0:	4b67      	ldr	r3, [pc, #412]	@ (8005080 <ESP_WakeTest+0x208>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f008 fa6d 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004eec:	200a      	movs	r0, #10
 8004eee:	f007 f815 	bl	800bf1c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004ef2:	4b63      	ldr	r3, [pc, #396]	@ (8005080 <ESP_WakeTest+0x208>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f008 fa64 	bl	800d3c6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004efe:	f007 f803 	bl	800bf08 <HAL_GetTick>
 8004f02:	0003      	movs	r3, r0
 8004f04:	22af      	movs	r2, #175	@ 0xaf
 8004f06:	0092      	lsls	r2, r2, #2
 8004f08:	189a      	adds	r2, r3, r2
 8004f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8005084 <ESP_WakeTest+0x20c>)
 8004f0c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8005078 <ESP_WakeTest+0x200>)
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004f14:	2380      	movs	r3, #128	@ 0x80
 8004f16:	005a      	lsls	r2, r3, #1
 8004f18:	4b5b      	ldr	r3, [pc, #364]	@ (8005088 <ESP_WakeTest+0x210>)
 8004f1a:	0011      	movs	r1, r2
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f7fe fd73 	bl	8003a08 <ESP_Receive>
 8004f22:	1e03      	subs	r3, r0, #0
 8004f24:	d100      	bne.n	8004f28 <ESP_WakeTest+0xb0>
 8004f26:	e099      	b.n	800505c <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8004f28:	4b51      	ldr	r3, [pc, #324]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004f2e:	e095      	b.n	800505c <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f30:	4b54      	ldr	r3, [pc, #336]	@ (8005084 <ESP_WakeTest+0x20c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	0018      	movs	r0, r3
 8004f36:	f006 fbfd 	bl	800b734 <TimestampIsReached>
 8004f3a:	1e03      	subs	r3, r0, #0
 8004f3c:	d100      	bne.n	8004f40 <ESP_WakeTest+0xc8>
 8004f3e:	e08f      	b.n	8005060 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8004f40:	4b52      	ldr	r3, [pc, #328]	@ (800508c <ESP_WakeTest+0x214>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	1dfc      	adds	r4, r7, #7
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7ff fdd0 	bl	8004aec <AT_Send>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004f50:	1dfb      	adds	r3, r7, #7
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d100      	bne.n	8004f5a <ESP_WakeTest+0xe2>
 8004f58:	e082      	b.n	8005060 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8004f5a:	4b45      	ldr	r3, [pc, #276]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f60:	e07e      	b.n	8005060 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f62:	4b48      	ldr	r3, [pc, #288]	@ (8005084 <ESP_WakeTest+0x20c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	0018      	movs	r0, r3
 8004f68:	f006 fbe4 	bl	800b734 <TimestampIsReached>
 8004f6c:	1e03      	subs	r3, r0, #0
 8004f6e:	d100      	bne.n	8004f72 <ESP_WakeTest+0xfa>
 8004f70:	e078      	b.n	8005064 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f72:	4b47      	ldr	r3, [pc, #284]	@ (8005090 <ESP_WakeTest+0x218>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	0018      	movs	r0, r3
 8004f78:	f7ff fc6a 	bl	8004850 <DMA_ProcessBuffer>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	001a      	movs	r2, r3
 8004f80:	4b44      	ldr	r3, [pc, #272]	@ (8005094 <ESP_WakeTest+0x21c>)
 8004f82:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004f84:	4b43      	ldr	r3, [pc, #268]	@ (8005094 <ESP_WakeTest+0x21c>)
 8004f86:	781a      	ldrb	r2, [r3, #0]
 8004f88:	4b41      	ldr	r3, [pc, #260]	@ (8005090 <ESP_WakeTest+0x218>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	1dbc      	adds	r4, r7, #6
 8004f8e:	0019      	movs	r1, r3
 8004f90:	0010      	movs	r0, r2
 8004f92:	f7ff fd69 	bl	8004a68 <ATCompare>
 8004f96:	0003      	movs	r3, r0
 8004f98:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004f9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005094 <ESP_WakeTest+0x21c>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8004fa2:	4b33      	ldr	r3, [pc, #204]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8005094 <ESP_WakeTest+0x21c>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b07      	cmp	r3, #7
 8004fae:	d104      	bne.n	8004fba <ESP_WakeTest+0x142>
          StartProg();
 8004fb0:	f7fe ff56 	bl	8003e60 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004fb4:	4b2e      	ldr	r3, [pc, #184]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004fba:	4b36      	ldr	r3, [pc, #216]	@ (8005094 <ESP_WakeTest+0x21c>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d109      	bne.n	8004fd6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004fc2:	f006 ffa1 	bl	800bf08 <HAL_GetTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	3332      	adds	r3, #50	@ 0x32
 8004fca:	001a      	movs	r2, r3
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8005084 <ESP_WakeTest+0x20c>)
 8004fce:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004fd0:	4b27      	ldr	r3, [pc, #156]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004fd6:	1dbb      	adds	r3, r7, #6
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d042      	beq.n	8005064 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8004fde:	4b24      	ldr	r3, [pc, #144]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004fe4:	e03e      	b.n	8005064 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8004fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8005098 <ESP_WakeTest+0x220>)
 8004fe8:	22fa      	movs	r2, #250	@ 0xfa
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8004fee:	4b2a      	ldr	r3, [pc, #168]	@ (8005098 <ESP_WakeTest+0x220>)
 8004ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800509c <ESP_WakeTest+0x224>)
 8004ff2:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8004ff4:	4b28      	ldr	r3, [pc, #160]	@ (8005098 <ESP_WakeTest+0x220>)
 8004ff6:	22fa      	movs	r2, #250	@ 0xfa
 8004ff8:	0112      	lsls	r2, r2, #4
 8004ffa:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8005070 <ESP_WakeTest+0x1f8>)
 8004ffe:	2204      	movs	r2, #4
 8005000:	701a      	strb	r2, [r3, #0]

      break;
 8005002:	e030      	b.n	8005066 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005004:	4b26      	ldr	r3, [pc, #152]	@ (80050a0 <ESP_WakeTest+0x228>)
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800500a:	4b1b      	ldr	r3, [pc, #108]	@ (8005078 <ESP_WakeTest+0x200>)
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005010:	4b1b      	ldr	r3, [pc, #108]	@ (8005080 <ESP_WakeTest+0x208>)
 8005012:	2200      	movs	r2, #0
 8005014:	2101      	movs	r1, #1
 8005016:	0018      	movs	r0, r3
 8005018:	f008 f9d5 	bl	800d3c6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	4816      	ldr	r0, [pc, #88]	@ (800507c <ESP_WakeTest+0x204>)
 8005022:	2200      	movs	r2, #0
 8005024:	0019      	movs	r1, r3
 8005026:	f008 f9ce 	bl	800d3c6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800502a:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <ESP_WakeTest+0x208>)
 800502c:	2200      	movs	r2, #0
 800502e:	2102      	movs	r1, #2
 8005030:	0018      	movs	r0, r3
 8005032:	f008 f9c8 	bl	800d3c6 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005036:	f002 fe91 	bl	8007d5c <SetESPMeasurementDone>
      break;
 800503a:	e014      	b.n	8005066 <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 800503c:	4b0c      	ldr	r3, [pc, #48]	@ (8005070 <ESP_WakeTest+0x1f8>)
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
      break;
 8005042:	e010      	b.n	8005066 <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8005044:	4b14      	ldr	r3, [pc, #80]	@ (8005098 <ESP_WakeTest+0x220>)
 8005046:	22fa      	movs	r2, #250	@ 0xfa
 8005048:	0112      	lsls	r2, r2, #4
 800504a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 800504c:	4b12      	ldr	r3, [pc, #72]	@ (8005098 <ESP_WakeTest+0x220>)
 800504e:	22fa      	movs	r2, #250	@ 0xfa
 8005050:	0112      	lsls	r2, r2, #4
 8005052:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005054:	4b10      	ldr	r3, [pc, #64]	@ (8005098 <ESP_WakeTest+0x220>)
 8005056:	2200      	movs	r2, #0
 8005058:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 800505a:	e004      	b.n	8005066 <ESP_WakeTest+0x1ee>
      break;
 800505c:	46c0      	nop			@ (mov r8, r8)
 800505e:	e002      	b.n	8005066 <ESP_WakeTest+0x1ee>
      break;
 8005060:	46c0      	nop			@ (mov r8, r8)
 8005062:	e000      	b.n	8005066 <ESP_WakeTest+0x1ee>
      break;
 8005064:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	46bd      	mov	sp, r7
 800506a:	b003      	add	sp, #12
 800506c:	bd90      	pop	{r4, r7, pc}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	20000994 	.word	0x20000994
 8005074:	08020924 	.word	0x08020924
 8005078:	20000544 	.word	0x20000544
 800507c:	50000800 	.word	0x50000800
 8005080:	50001c00 	.word	0x50001c00
 8005084:	20000984 	.word	0x20000984
 8005088:	20000444 	.word	0x20000444
 800508c:	20000992 	.word	0x20000992
 8005090:	20000991 	.word	0x20000991
 8005094:	20000029 	.word	0x20000029
 8005098:	40000400 	.word	0x40000400
 800509c:	00000bb8 	.word	0x00000bb8
 80050a0:	20000000 	.word	0x20000000

080050a4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af02      	add	r7, sp, #8
  bool ATSend = false;
 80050aa:	1dfb      	adds	r3, r7, #7
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 80050b0:	4bd9      	ldr	r3, [pc, #868]	@ (8005418 <ESP_Upkeep+0x374>)
 80050b2:	781a      	ldrb	r2, [r3, #0]
 80050b4:	4bd9      	ldr	r3, [pc, #868]	@ (800541c <ESP_Upkeep+0x378>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d01b      	beq.n	80050f4 <ESP_Upkeep+0x50>
    oldEspState = EspState;
 80050bc:	4bd6      	ldr	r3, [pc, #856]	@ (8005418 <ESP_Upkeep+0x374>)
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	4bd6      	ldr	r3, [pc, #856]	@ (800541c <ESP_Upkeep+0x378>)
 80050c2:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80050c4:	4bd5      	ldr	r3, [pc, #852]	@ (800541c <ESP_Upkeep+0x378>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d103      	bne.n	80050d4 <ESP_Upkeep+0x30>
 80050cc:	4bd4      	ldr	r3, [pc, #848]	@ (8005420 <ESP_Upkeep+0x37c>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b0e      	cmp	r3, #14
 80050d2:	d00f      	beq.n	80050f4 <ESP_Upkeep+0x50>
      printf("EspState: %d ATcmd: %d Mode: %d ATExp: %d\r\n", oldEspState, ATCommand, Mode, ATExpectation);
 80050d4:	4bd1      	ldr	r3, [pc, #836]	@ (800541c <ESP_Upkeep+0x378>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	0019      	movs	r1, r3
 80050da:	4bd1      	ldr	r3, [pc, #836]	@ (8005420 <ESP_Upkeep+0x37c>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	001a      	movs	r2, r3
 80050e0:	4bd0      	ldr	r3, [pc, #832]	@ (8005424 <ESP_Upkeep+0x380>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	001c      	movs	r4, r3
 80050e6:	4bd0      	ldr	r3, [pc, #832]	@ (8005428 <ESP_Upkeep+0x384>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	48d0      	ldr	r0, [pc, #832]	@ (800542c <ESP_Upkeep+0x388>)
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	0023      	movs	r3, r4
 80050f0:	f017 f988 	bl	801c404 <iprintf>
    }
  }

  switch (EspState) {
 80050f4:	4bc8      	ldr	r3, [pc, #800]	@ (8005418 <ESP_Upkeep+0x374>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d900      	bls.n	80050fe <ESP_Upkeep+0x5a>
 80050fc:	e355      	b.n	80057aa <ESP_Upkeep+0x706>
 80050fe:	009a      	lsls	r2, r3, #2
 8005100:	4bcb      	ldr	r3, [pc, #812]	@ (8005430 <ESP_Upkeep+0x38c>)
 8005102:	18d3      	adds	r3, r2, r3
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005108:	4bc3      	ldr	r3, [pc, #780]	@ (8005418 <ESP_Upkeep+0x374>)
 800510a:	2201      	movs	r2, #1
 800510c:	701a      	strb	r2, [r3, #0]
      break;
 800510e:	f000 fba6 	bl	800585e <ESP_Upkeep+0x7ba>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005112:	4bc8      	ldr	r3, [pc, #800]	@ (8005434 <ESP_Upkeep+0x390>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2201      	movs	r2, #1
 8005118:	4053      	eors	r3, r2
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d036      	beq.n	800518e <ESP_Upkeep+0xea>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005120:	2380      	movs	r3, #128	@ 0x80
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	48c4      	ldr	r0, [pc, #784]	@ (8005438 <ESP_Upkeep+0x394>)
 8005126:	2200      	movs	r2, #0
 8005128:	0019      	movs	r1, r3
 800512a:	f008 f94c 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800512e:	2001      	movs	r0, #1
 8005130:	f006 fef4 	bl	800bf1c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005134:	2380      	movs	r3, #128	@ 0x80
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	48bf      	ldr	r0, [pc, #764]	@ (8005438 <ESP_Upkeep+0x394>)
 800513a:	2201      	movs	r2, #1
 800513c:	0019      	movs	r1, r3
 800513e:	f008 f942 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005142:	2001      	movs	r0, #1
 8005144:	f006 feea 	bl	800bf1c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005148:	4bbc      	ldr	r3, [pc, #752]	@ (800543c <ESP_Upkeep+0x398>)
 800514a:	2200      	movs	r2, #0
 800514c:	2101      	movs	r1, #1
 800514e:	0018      	movs	r0, r3
 8005150:	f008 f939 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005154:	2001      	movs	r0, #1
 8005156:	f006 fee1 	bl	800bf1c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 800515a:	4bb8      	ldr	r3, [pc, #736]	@ (800543c <ESP_Upkeep+0x398>)
 800515c:	2201      	movs	r2, #1
 800515e:	2102      	movs	r1, #2
 8005160:	0018      	movs	r0, r3
 8005162:	f008 f930 	bl	800d3c6 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005166:	2001      	movs	r0, #1
 8005168:	f006 fed8 	bl	800bf1c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800516c:	4bb3      	ldr	r3, [pc, #716]	@ (800543c <ESP_Upkeep+0x398>)
 800516e:	2201      	movs	r2, #1
 8005170:	2101      	movs	r1, #1
 8005172:	0018      	movs	r0, r3
 8005174:	f008 f927 	bl	800d3c6 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005178:	f006 fec6 	bl	800bf08 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	22af      	movs	r2, #175	@ 0xaf
 8005180:	0092      	lsls	r2, r2, #2
 8005182:	189a      	adds	r2, r3, r2
 8005184:	4bae      	ldr	r3, [pc, #696]	@ (8005440 <ESP_Upkeep+0x39c>)
 8005186:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005188:	4baa      	ldr	r3, [pc, #680]	@ (8005434 <ESP_Upkeep+0x390>)
 800518a:	2201      	movs	r2, #1
 800518c:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800518e:	2380      	movs	r3, #128	@ 0x80
 8005190:	005a      	lsls	r2, r3, #1
 8005192:	4bac      	ldr	r3, [pc, #688]	@ (8005444 <ESP_Upkeep+0x3a0>)
 8005194:	0011      	movs	r1, r2
 8005196:	0018      	movs	r0, r3
 8005198:	f7fe fc36 	bl	8003a08 <ESP_Receive>
 800519c:	1e03      	subs	r3, r0, #0
 800519e:	d100      	bne.n	80051a2 <ESP_Upkeep+0xfe>
 80051a0:	e30f      	b.n	80057c2 <ESP_Upkeep+0x71e>
        EspState = ESP_STATE_WAIT_AWAKE;
 80051a2:	4b9d      	ldr	r3, [pc, #628]	@ (8005418 <ESP_Upkeep+0x374>)
 80051a4:	220f      	movs	r2, #15
 80051a6:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80051a8:	f006 feae 	bl	800bf08 <HAL_GetTick>
 80051ac:	0003      	movs	r3, r0
 80051ae:	22fa      	movs	r2, #250	@ 0xfa
 80051b0:	00d2      	lsls	r2, r2, #3
 80051b2:	189a      	adds	r2, r3, r2
 80051b4:	4ba4      	ldr	r3, [pc, #656]	@ (8005448 <ESP_Upkeep+0x3a4>)
 80051b6:	601a      	str	r2, [r3, #0]
      }
      break;
 80051b8:	e303      	b.n	80057c2 <ESP_Upkeep+0x71e>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80051ba:	2001      	movs	r0, #1
 80051bc:	f7ff fb48 	bl	8004850 <DMA_ProcessBuffer>
 80051c0:	0003      	movs	r3, r0
 80051c2:	001a      	movs	r2, r3
 80051c4:	4ba1      	ldr	r3, [pc, #644]	@ (800544c <ESP_Upkeep+0x3a8>)
 80051c6:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80051c8:	4ba0      	ldr	r3, [pc, #640]	@ (800544c <ESP_Upkeep+0x3a8>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	1dbc      	adds	r4, r7, #6
 80051ce:	2101      	movs	r1, #1
 80051d0:	0018      	movs	r0, r3
 80051d2:	f7ff fc49 	bl	8004a68 <ATCompare>
 80051d6:	0003      	movs	r3, r0
 80051d8:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 80051da:	1dbb      	adds	r3, r7, #6
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d107      	bne.n	80051f2 <ESP_Upkeep+0x14e>
 80051e2:	4b99      	ldr	r3, [pc, #612]	@ (8005448 <ESP_Upkeep+0x3a4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	0018      	movs	r0, r3
 80051e8:	f006 faa4 	bl	800b734 <TimestampIsReached>
 80051ec:	1e03      	subs	r3, r0, #0
 80051ee:	d100      	bne.n	80051f2 <ESP_Upkeep+0x14e>
 80051f0:	e2e9      	b.n	80057c6 <ESP_Upkeep+0x722>
          EspState = ESP_STATE_MODE_SELECT;
 80051f2:	4b89      	ldr	r3, [pc, #548]	@ (8005418 <ESP_Upkeep+0x374>)
 80051f4:	220b      	movs	r2, #11
 80051f6:	701a      	strb	r2, [r3, #0]
        }
        break;
 80051f8:	e2e5      	b.n	80057c6 <ESP_Upkeep+0x722>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 80051fa:	4b95      	ldr	r3, [pc, #596]	@ (8005450 <ESP_Upkeep+0x3ac>)
 80051fc:	2209      	movs	r2, #9
 80051fe:	2114      	movs	r1, #20
 8005200:	0018      	movs	r0, r3
 8005202:	f017 fab3 	bl	801c76c <memset>
      if(!InitIsDone || WifiReset){
 8005206:	4b93      	ldr	r3, [pc, #588]	@ (8005454 <ESP_Upkeep+0x3b0>)
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2201      	movs	r2, #1
 800520c:	4053      	eors	r3, r2
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <ESP_Upkeep+0x178>
 8005214:	4b90      	ldr	r3, [pc, #576]	@ (8005458 <ESP_Upkeep+0x3b4>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01a      	beq.n	8005252 <ESP_Upkeep+0x1ae>
        memcpy(ATCommandArray, AT_INIT, 7);
 800521c:	4b8c      	ldr	r3, [pc, #560]	@ (8005450 <ESP_Upkeep+0x3ac>)
 800521e:	4a8f      	ldr	r2, [pc, #572]	@ (800545c <ESP_Upkeep+0x3b8>)
 8005220:	6811      	ldr	r1, [r2, #0]
 8005222:	6019      	str	r1, [r3, #0]
 8005224:	8891      	ldrh	r1, [r2, #4]
 8005226:	8099      	strh	r1, [r3, #4]
 8005228:	7992      	ldrb	r2, [r2, #6]
 800522a:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 800522c:	4b7a      	ldr	r3, [pc, #488]	@ (8005418 <ESP_Upkeep+0x374>)
 800522e:	2204      	movs	r2, #4
 8005230:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005232:	4b8b      	ldr	r3, [pc, #556]	@ (8005460 <ESP_Upkeep+0x3bc>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005238:	4b7a      	ldr	r3, [pc, #488]	@ (8005424 <ESP_Upkeep+0x380>)
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 800523e:	4b88      	ldr	r3, [pc, #544]	@ (8005460 <ESP_Upkeep+0x3bc>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	001a      	movs	r2, r3
 8005244:	4b82      	ldr	r3, [pc, #520]	@ (8005450 <ESP_Upkeep+0x3ac>)
 8005246:	5c9a      	ldrb	r2, [r3, r2]
 8005248:	4b75      	ldr	r3, [pc, #468]	@ (8005420 <ESP_Upkeep+0x37c>)
 800524a:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800524c:	4b76      	ldr	r3, [pc, #472]	@ (8005428 <ESP_Upkeep+0x384>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8005252:	4b80      	ldr	r3, [pc, #512]	@ (8005454 <ESP_Upkeep+0x3b0>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01f      	beq.n	800529a <ESP_Upkeep+0x1f6>
 800525a:	4b82      	ldr	r3, [pc, #520]	@ (8005464 <ESP_Upkeep+0x3c0>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2201      	movs	r2, #1
 8005260:	4053      	eors	r3, r2
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d018      	beq.n	800529a <ESP_Upkeep+0x1f6>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005268:	4b79      	ldr	r3, [pc, #484]	@ (8005450 <ESP_Upkeep+0x3ac>)
 800526a:	4a7f      	ldr	r2, [pc, #508]	@ (8005468 <ESP_Upkeep+0x3c4>)
 800526c:	6811      	ldr	r1, [r2, #0]
 800526e:	6019      	str	r1, [r3, #0]
 8005270:	8892      	ldrh	r2, [r2, #4]
 8005272:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005274:	4b68      	ldr	r3, [pc, #416]	@ (8005418 <ESP_Upkeep+0x374>)
 8005276:	2204      	movs	r2, #4
 8005278:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800527a:	4b79      	ldr	r3, [pc, #484]	@ (8005460 <ESP_Upkeep+0x3bc>)
 800527c:	2200      	movs	r2, #0
 800527e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8005280:	4b68      	ldr	r3, [pc, #416]	@ (8005424 <ESP_Upkeep+0x380>)
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005286:	4b76      	ldr	r3, [pc, #472]	@ (8005460 <ESP_Upkeep+0x3bc>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	001a      	movs	r2, r3
 800528c:	4b70      	ldr	r3, [pc, #448]	@ (8005450 <ESP_Upkeep+0x3ac>)
 800528e:	5c9a      	ldrb	r2, [r3, r2]
 8005290:	4b63      	ldr	r3, [pc, #396]	@ (8005420 <ESP_Upkeep+0x37c>)
 8005292:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005294:	4b64      	ldr	r3, [pc, #400]	@ (8005428 <ESP_Upkeep+0x384>)
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 800529a:	4b6e      	ldr	r3, [pc, #440]	@ (8005454 <ESP_Upkeep+0x3b0>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d021      	beq.n	80052e6 <ESP_Upkeep+0x242>
 80052a2:	4b70      	ldr	r3, [pc, #448]	@ (8005464 <ESP_Upkeep+0x3c0>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d01d      	beq.n	80052e6 <ESP_Upkeep+0x242>
 80052aa:	4b70      	ldr	r3, [pc, #448]	@ (800546c <ESP_Upkeep+0x3c8>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	4053      	eors	r3, r2
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d016      	beq.n	80052e6 <ESP_Upkeep+0x242>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80052b8:	4b6d      	ldr	r3, [pc, #436]	@ (8005470 <ESP_Upkeep+0x3cc>)
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	4b64      	ldr	r3, [pc, #400]	@ (8005450 <ESP_Upkeep+0x3ac>)
 80052be:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80052c0:	4b55      	ldr	r3, [pc, #340]	@ (8005418 <ESP_Upkeep+0x374>)
 80052c2:	2204      	movs	r2, #4
 80052c4:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052c6:	4b66      	ldr	r3, [pc, #408]	@ (8005460 <ESP_Upkeep+0x3bc>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80052cc:	4b55      	ldr	r3, [pc, #340]	@ (8005424 <ESP_Upkeep+0x380>)
 80052ce:	2204      	movs	r2, #4
 80052d0:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80052d2:	4b63      	ldr	r3, [pc, #396]	@ (8005460 <ESP_Upkeep+0x3bc>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	001a      	movs	r2, r3
 80052d8:	4b5d      	ldr	r3, [pc, #372]	@ (8005450 <ESP_Upkeep+0x3ac>)
 80052da:	5c9a      	ldrb	r2, [r3, r2]
 80052dc:	4b50      	ldr	r3, [pc, #320]	@ (8005420 <ESP_Upkeep+0x37c>)
 80052de:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80052e0:	4b51      	ldr	r3, [pc, #324]	@ (8005428 <ESP_Upkeep+0x384>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 80052e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005454 <ESP_Upkeep+0x3b0>)
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d035      	beq.n	800535a <ESP_Upkeep+0x2b6>
 80052ee:	4b5d      	ldr	r3, [pc, #372]	@ (8005464 <ESP_Upkeep+0x3c0>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d031      	beq.n	800535a <ESP_Upkeep+0x2b6>
 80052f6:	4b5d      	ldr	r3, [pc, #372]	@ (800546c <ESP_Upkeep+0x3c8>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d02d      	beq.n	800535a <ESP_Upkeep+0x2b6>
 80052fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005474 <ESP_Upkeep+0x3d0>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2201      	movs	r2, #1
 8005304:	4053      	eors	r3, r2
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d026      	beq.n	800535a <ESP_Upkeep+0x2b6>
        memcpy(ATCommandArray, AT_SEND, 3);
 800530c:	4b50      	ldr	r3, [pc, #320]	@ (8005450 <ESP_Upkeep+0x3ac>)
 800530e:	4a5a      	ldr	r2, [pc, #360]	@ (8005478 <ESP_Upkeep+0x3d4>)
 8005310:	8811      	ldrh	r1, [r2, #0]
 8005312:	8019      	strh	r1, [r3, #0]
 8005314:	7892      	ldrb	r2, [r2, #2]
 8005316:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005318:	4b3f      	ldr	r3, [pc, #252]	@ (8005418 <ESP_Upkeep+0x374>)
 800531a:	2204      	movs	r2, #4
 800531c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800531e:	4b50      	ldr	r3, [pc, #320]	@ (8005460 <ESP_Upkeep+0x3bc>)
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005324:	4b3f      	ldr	r3, [pc, #252]	@ (8005424 <ESP_Upkeep+0x380>)
 8005326:	2202      	movs	r2, #2
 8005328:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800532a:	f006 fded 	bl	800bf08 <HAL_GetTick>
 800532e:	0002      	movs	r2, r0
 8005330:	4b52      	ldr	r3, [pc, #328]	@ (800547c <ESP_Upkeep+0x3d8>)
 8005332:	601a      	str	r2, [r3, #0]
        printf("start van HAL_GetTick(): %lu\r\n", start);
 8005334:	4b51      	ldr	r3, [pc, #324]	@ (800547c <ESP_Upkeep+0x3d8>)
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	4b51      	ldr	r3, [pc, #324]	@ (8005480 <ESP_Upkeep+0x3dc>)
 800533a:	0011      	movs	r1, r2
 800533c:	0018      	movs	r0, r3
 800533e:	f017 f861 	bl	801c404 <iprintf>
        SetESPIndicator();
 8005342:	f005 fbbd 	bl	800aac0 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005346:	4b46      	ldr	r3, [pc, #280]	@ (8005460 <ESP_Upkeep+0x3bc>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	001a      	movs	r2, r3
 800534c:	4b40      	ldr	r3, [pc, #256]	@ (8005450 <ESP_Upkeep+0x3ac>)
 800534e:	5c9a      	ldrb	r2, [r3, r2]
 8005350:	4b33      	ldr	r3, [pc, #204]	@ (8005420 <ESP_Upkeep+0x37c>)
 8005352:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005354:	4b34      	ldr	r3, [pc, #208]	@ (8005428 <ESP_Upkeep+0x384>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 800535a:	4b4a      	ldr	r3, [pc, #296]	@ (8005484 <ESP_Upkeep+0x3e0>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01a      	beq.n	8005398 <ESP_Upkeep+0x2f4>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 8005362:	4b3b      	ldr	r3, [pc, #236]	@ (8005450 <ESP_Upkeep+0x3ac>)
 8005364:	4a48      	ldr	r2, [pc, #288]	@ (8005488 <ESP_Upkeep+0x3e4>)
 8005366:	6811      	ldr	r1, [r2, #0]
 8005368:	6019      	str	r1, [r3, #0]
 800536a:	7912      	ldrb	r2, [r2, #4]
 800536c:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800536e:	4b2a      	ldr	r3, [pc, #168]	@ (8005418 <ESP_Upkeep+0x374>)
 8005370:	2204      	movs	r2, #4
 8005372:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005374:	4b3a      	ldr	r3, [pc, #232]	@ (8005460 <ESP_Upkeep+0x3bc>)
 8005376:	2200      	movs	r2, #0
 8005378:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 800537a:	4b2a      	ldr	r3, [pc, #168]	@ (8005424 <ESP_Upkeep+0x380>)
 800537c:	2203      	movs	r2, #3
 800537e:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005380:	f005 fb9e 	bl	800aac0 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005384:	4b36      	ldr	r3, [pc, #216]	@ (8005460 <ESP_Upkeep+0x3bc>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	001a      	movs	r2, r3
 800538a:	4b31      	ldr	r3, [pc, #196]	@ (8005450 <ESP_Upkeep+0x3ac>)
 800538c:	5c9a      	ldrb	r2, [r3, r2]
 800538e:	4b24      	ldr	r3, [pc, #144]	@ (8005420 <ESP_Upkeep+0x37c>)
 8005390:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005392:	4b25      	ldr	r3, [pc, #148]	@ (8005428 <ESP_Upkeep+0x384>)
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005398:	4b2e      	ldr	r3, [pc, #184]	@ (8005454 <ESP_Upkeep+0x3b0>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d100      	bne.n	80053a2 <ESP_Upkeep+0x2fe>
 80053a0:	e213      	b.n	80057ca <ESP_Upkeep+0x726>
 80053a2:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <ESP_Upkeep+0x3c0>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d100      	bne.n	80053ac <ESP_Upkeep+0x308>
 80053aa:	e20e      	b.n	80057ca <ESP_Upkeep+0x726>
 80053ac:	4b2f      	ldr	r3, [pc, #188]	@ (800546c <ESP_Upkeep+0x3c8>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d100      	bne.n	80053b6 <ESP_Upkeep+0x312>
 80053b4:	e209      	b.n	80057ca <ESP_Upkeep+0x726>
 80053b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005474 <ESP_Upkeep+0x3d0>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d100      	bne.n	80053c0 <ESP_Upkeep+0x31c>
 80053be:	e204      	b.n	80057ca <ESP_Upkeep+0x726>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80053c0:	4b32      	ldr	r3, [pc, #200]	@ (800548c <ESP_Upkeep+0x3e8>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <ESP_Upkeep+0x3ac>)
 80053c6:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80053c8:	4b13      	ldr	r3, [pc, #76]	@ (8005418 <ESP_Upkeep+0x374>)
 80053ca:	2204      	movs	r2, #4
 80053cc:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053ce:	4b24      	ldr	r3, [pc, #144]	@ (8005460 <ESP_Upkeep+0x3bc>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80053d4:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <ESP_Upkeep+0x380>)
 80053d6:	2205      	movs	r2, #5
 80053d8:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80053da:	f005 fb71 	bl	800aac0 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80053de:	4b20      	ldr	r3, [pc, #128]	@ (8005460 <ESP_Upkeep+0x3bc>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	001a      	movs	r2, r3
 80053e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005450 <ESP_Upkeep+0x3ac>)
 80053e6:	5c9a      	ldrb	r2, [r3, r2]
 80053e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <ESP_Upkeep+0x37c>)
 80053ea:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005428 <ESP_Upkeep+0x384>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	701a      	strb	r2, [r3, #0]
      }
    break;
 80053f2:	e1ea      	b.n	80057ca <ESP_Upkeep+0x726>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 80053f4:	4b0a      	ldr	r3, [pc, #40]	@ (8005420 <ESP_Upkeep+0x37c>)
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	1dfc      	adds	r4, r7, #7
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7ff fb76 	bl	8004aec <AT_Send>
 8005400:	0003      	movs	r3, r0
 8005402:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005404:	1dfb      	adds	r3, r7, #7
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d100      	bne.n	800540e <ESP_Upkeep+0x36a>
 800540c:	e1df      	b.n	80057ce <ESP_Upkeep+0x72a>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800540e:	4b02      	ldr	r3, [pc, #8]	@ (8005418 <ESP_Upkeep+0x374>)
 8005410:	2203      	movs	r2, #3
 8005412:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005414:	e1db      	b.n	80057ce <ESP_Upkeep+0x72a>
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	20000028 	.word	0x20000028
 800541c:	20000002 	.word	0x20000002
 8005420:	20000992 	.word	0x20000992
 8005424:	20000993 	.word	0x20000993
 8005428:	20000991 	.word	0x20000991
 800542c:	0801fdbc 	.word	0x0801fdbc
 8005430:	0802093c 	.word	0x0802093c
 8005434:	20000544 	.word	0x20000544
 8005438:	50000800 	.word	0x50000800
 800543c:	50001c00 	.word	0x50001c00
 8005440:	20000984 	.word	0x20000984
 8005444:	20000444 	.word	0x20000444
 8005448:	20000a80 	.word	0x20000a80
 800544c:	2000002a 	.word	0x2000002a
 8005450:	20000978 	.word	0x20000978
 8005454:	20000545 	.word	0x20000545
 8005458:	20000546 	.word	0x20000546
 800545c:	20000004 	.word	0x20000004
 8005460:	20000982 	.word	0x20000982
 8005464:	20000548 	.word	0x20000548
 8005468:	20000014 	.word	0x20000014
 800546c:	20000549 	.word	0x20000549
 8005470:	20000010 	.word	0x20000010
 8005474:	20000001 	.word	0x20000001
 8005478:	2000000c 	.word	0x2000000c
 800547c:	20000558 	.word	0x20000558
 8005480:	0801fde8 	.word	0x0801fde8
 8005484:	20000547 	.word	0x20000547
 8005488:	2000001c 	.word	0x2000001c
 800548c:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005490:	4bd2      	ldr	r3, [pc, #840]	@ (80057dc <ESP_Upkeep+0x738>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	0018      	movs	r0, r3
 8005496:	f006 f94d 	bl	800b734 <TimestampIsReached>
 800549a:	1e03      	subs	r3, r0, #0
 800549c:	d100      	bne.n	80054a0 <ESP_Upkeep+0x3fc>
 800549e:	e198      	b.n	80057d2 <ESP_Upkeep+0x72e>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80054a0:	4bcf      	ldr	r3, [pc, #828]	@ (80057e0 <ESP_Upkeep+0x73c>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f7ff f9d3 	bl	8004850 <DMA_ProcessBuffer>
 80054aa:	0003      	movs	r3, r0
 80054ac:	001a      	movs	r2, r3
 80054ae:	4bcd      	ldr	r3, [pc, #820]	@ (80057e4 <ESP_Upkeep+0x740>)
 80054b0:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80054b2:	4bcc      	ldr	r3, [pc, #816]	@ (80057e4 <ESP_Upkeep+0x740>)
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	4bca      	ldr	r3, [pc, #808]	@ (80057e0 <ESP_Upkeep+0x73c>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	1d7c      	adds	r4, r7, #5
 80054bc:	0019      	movs	r1, r3
 80054be:	0010      	movs	r0, r2
 80054c0:	f7ff fad2 	bl	8004a68 <ATCompare>
 80054c4:	0003      	movs	r3, r0
 80054c6:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80054c8:	4bc6      	ldr	r3, [pc, #792]	@ (80057e4 <ESP_Upkeep+0x740>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d10f      	bne.n	80054f0 <ESP_Upkeep+0x44c>
          if(ATCommand == AT_SENDDATA){
 80054d0:	4bc5      	ldr	r3, [pc, #788]	@ (80057e8 <ESP_Upkeep+0x744>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b0f      	cmp	r3, #15
 80054d6:	d108      	bne.n	80054ea <ESP_Upkeep+0x446>
            ATCommand = AT_HTTPCPOST;
 80054d8:	4bc3      	ldr	r3, [pc, #780]	@ (80057e8 <ESP_Upkeep+0x744>)
 80054da:	220e      	movs	r2, #14
 80054dc:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80054de:	4bc0      	ldr	r3, [pc, #768]	@ (80057e0 <ESP_Upkeep+0x73c>)
 80054e0:	2202      	movs	r2, #2
 80054e2:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 80054e4:	4bc1      	ldr	r3, [pc, #772]	@ (80057ec <ESP_Upkeep+0x748>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 80054ea:	4bc1      	ldr	r3, [pc, #772]	@ (80057f0 <ESP_Upkeep+0x74c>)
 80054ec:	2204      	movs	r2, #4
 80054ee:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80054f0:	4bbc      	ldr	r3, [pc, #752]	@ (80057e4 <ESP_Upkeep+0x740>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d106      	bne.n	8005506 <ESP_Upkeep+0x462>
          ESPTimeStamp = HAL_GetTick() + 10;
 80054f8:	f006 fd06 	bl	800bf08 <HAL_GetTick>
 80054fc:	0003      	movs	r3, r0
 80054fe:	330a      	adds	r3, #10
 8005500:	001a      	movs	r2, r3
 8005502:	4bb6      	ldr	r3, [pc, #728]	@ (80057dc <ESP_Upkeep+0x738>)
 8005504:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 8005506:	4bb7      	ldr	r3, [pc, #732]	@ (80057e4 <ESP_Upkeep+0x740>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b0a      	cmp	r3, #10
 800550c:	d106      	bne.n	800551c <ESP_Upkeep+0x478>
          ESPTimeStamp = HAL_GetTick() + 10;
 800550e:	f006 fcfb 	bl	800bf08 <HAL_GetTick>
 8005512:	0003      	movs	r3, r0
 8005514:	330a      	adds	r3, #10
 8005516:	001a      	movs	r2, r3
 8005518:	4bb0      	ldr	r3, [pc, #704]	@ (80057dc <ESP_Upkeep+0x738>)
 800551a:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 800551c:	4bb1      	ldr	r3, [pc, #708]	@ (80057e4 <ESP_Upkeep+0x740>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b06      	cmp	r3, #6
 8005522:	d116      	bne.n	8005552 <ESP_Upkeep+0x4ae>
          if(ATCommand != AT_SENDDATA){
 8005524:	4bb0      	ldr	r3, [pc, #704]	@ (80057e8 <ESP_Upkeep+0x744>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d003      	beq.n	8005534 <ESP_Upkeep+0x490>
            EspState = ESP_STATE_SEND;
 800552c:	4bb0      	ldr	r3, [pc, #704]	@ (80057f0 <ESP_Upkeep+0x74c>)
 800552e:	2204      	movs	r2, #4
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e00e      	b.n	8005552 <ESP_Upkeep+0x4ae>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005534:	4bac      	ldr	r3, [pc, #688]	@ (80057e8 <ESP_Upkeep+0x744>)
 8005536:	220e      	movs	r2, #14
 8005538:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800553a:	4bac      	ldr	r3, [pc, #688]	@ (80057ec <ESP_Upkeep+0x748>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	3b01      	subs	r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4baa      	ldr	r3, [pc, #680]	@ (80057ec <ESP_Upkeep+0x748>)
 8005544:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005546:	4ba6      	ldr	r3, [pc, #664]	@ (80057e0 <ESP_Upkeep+0x73c>)
 8005548:	2202      	movs	r2, #2
 800554a:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 800554c:	4ba8      	ldr	r3, [pc, #672]	@ (80057f0 <ESP_Upkeep+0x74c>)
 800554e:	2204      	movs	r2, #4
 8005550:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005552:	1d7b      	adds	r3, r7, #5
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d100      	bne.n	800555c <ESP_Upkeep+0x4b8>
 800555a:	e13a      	b.n	80057d2 <ESP_Upkeep+0x72e>
          EspState = ESP_STATE_NEXT_AT;
 800555c:	4ba4      	ldr	r3, [pc, #656]	@ (80057f0 <ESP_Upkeep+0x74c>)
 800555e:	2205      	movs	r2, #5
 8005560:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005562:	e136      	b.n	80057d2 <ESP_Upkeep+0x72e>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005564:	4ba1      	ldr	r3, [pc, #644]	@ (80057ec <ESP_Upkeep+0x748>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	b2da      	uxtb	r2, r3
 800556c:	4b9f      	ldr	r3, [pc, #636]	@ (80057ec <ESP_Upkeep+0x748>)
 800556e:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005570:	4b9e      	ldr	r3, [pc, #632]	@ (80057ec <ESP_Upkeep+0x748>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	001a      	movs	r2, r3
 8005576:	4b9f      	ldr	r3, [pc, #636]	@ (80057f4 <ESP_Upkeep+0x750>)
 8005578:	5c9a      	ldrb	r2, [r3, r2]
 800557a:	4b9b      	ldr	r3, [pc, #620]	@ (80057e8 <ESP_Upkeep+0x744>)
 800557c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 800557e:	4b9a      	ldr	r3, [pc, #616]	@ (80057e8 <ESP_Upkeep+0x744>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d102      	bne.n	800558c <ESP_Upkeep+0x4e8>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005586:	4b96      	ldr	r3, [pc, #600]	@ (80057e0 <ESP_Upkeep+0x73c>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 800558c:	4b96      	ldr	r3, [pc, #600]	@ (80057e8 <ESP_Upkeep+0x744>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b0e      	cmp	r3, #14
 8005592:	d102      	bne.n	800559a <ESP_Upkeep+0x4f6>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005594:	4b92      	ldr	r3, [pc, #584]	@ (80057e0 <ESP_Upkeep+0x73c>)
 8005596:	2202      	movs	r2, #2
 8005598:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 800559a:	4b93      	ldr	r3, [pc, #588]	@ (80057e8 <ESP_Upkeep+0x744>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b0e      	cmp	r3, #14
 80055a0:	d006      	beq.n	80055b0 <ESP_Upkeep+0x50c>
 80055a2:	4b91      	ldr	r3, [pc, #580]	@ (80057e8 <ESP_Upkeep+0x744>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d002      	beq.n	80055b0 <ESP_Upkeep+0x50c>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055aa:	4b8d      	ldr	r3, [pc, #564]	@ (80057e0 <ESP_Upkeep+0x73c>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80055b0:	4b8d      	ldr	r3, [pc, #564]	@ (80057e8 <ESP_Upkeep+0x744>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b11      	cmp	r3, #17
 80055b6:	d102      	bne.n	80055be <ESP_Upkeep+0x51a>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80055b8:	4b89      	ldr	r3, [pc, #548]	@ (80057e0 <ESP_Upkeep+0x73c>)
 80055ba:	2205      	movs	r2, #5
 80055bc:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80055be:	4b8c      	ldr	r3, [pc, #560]	@ (80057f0 <ESP_Upkeep+0x74c>)
 80055c0:	2204      	movs	r2, #4
 80055c2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80055c4:	4b88      	ldr	r3, [pc, #544]	@ (80057e8 <ESP_Upkeep+0x744>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b14      	cmp	r3, #20
 80055ca:	d000      	beq.n	80055ce <ESP_Upkeep+0x52a>
 80055cc:	e103      	b.n	80057d6 <ESP_Upkeep+0x732>
        if(Mode == AT_MODE_SEND){
 80055ce:	4b8a      	ldr	r3, [pc, #552]	@ (80057f8 <ESP_Upkeep+0x754>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d124      	bne.n	8005620 <ESP_Upkeep+0x57c>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80055d6:	f006 fc97 	bl	800bf08 <HAL_GetTick>
 80055da:	0003      	movs	r3, r0
 80055dc:	4a87      	ldr	r2, [pc, #540]	@ (80057fc <ESP_Upkeep+0x758>)
 80055de:	189a      	adds	r2, r3, r2
 80055e0:	4b7e      	ldr	r3, [pc, #504]	@ (80057dc <ESP_Upkeep+0x738>)
 80055e2:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 80055e4:	f005 fa84 	bl	800aaf0 <ResetESPIndicator>
          clearDMABuffer();
 80055e8:	f7ff fa30 	bl	8004a4c <clearDMABuffer>
          stop = HAL_GetTick();
 80055ec:	f006 fc8c 	bl	800bf08 <HAL_GetTick>
 80055f0:	0002      	movs	r2, r0
 80055f2:	4b83      	ldr	r3, [pc, #524]	@ (8005800 <ESP_Upkeep+0x75c>)
 80055f4:	601a      	str	r2, [r3, #0]
          printf("stop van HAL_GetTick(): %lu\r\n", stop);
 80055f6:	4b82      	ldr	r3, [pc, #520]	@ (8005800 <ESP_Upkeep+0x75c>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b82      	ldr	r3, [pc, #520]	@ (8005804 <ESP_Upkeep+0x760>)
 80055fc:	0011      	movs	r1, r2
 80055fe:	0018      	movs	r0, r3
 8005600:	f016 ff00 	bl	801c404 <iprintf>
          Debug("Message send in %lu ms", (stop-start));
 8005604:	4b7e      	ldr	r3, [pc, #504]	@ (8005800 <ESP_Upkeep+0x75c>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b7f      	ldr	r3, [pc, #508]	@ (8005808 <ESP_Upkeep+0x764>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	4a7f      	ldr	r2, [pc, #508]	@ (800580c <ESP_Upkeep+0x768>)
 8005610:	497f      	ldr	r1, [pc, #508]	@ (8005810 <ESP_Upkeep+0x76c>)
 8005612:	2003      	movs	r0, #3
 8005614:	f006 f8e4 	bl	800b7e0 <CreateLine>
          EspState = ESP_STATE_DEINIT;
 8005618:	4b75      	ldr	r3, [pc, #468]	@ (80057f0 <ESP_Upkeep+0x74c>)
 800561a:	220d      	movs	r2, #13
 800561c:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 800561e:	e0da      	b.n	80057d6 <ESP_Upkeep+0x732>
        else if (Mode == AT_MODE_GETTIME) {
 8005620:	4b75      	ldr	r3, [pc, #468]	@ (80057f8 <ESP_Upkeep+0x754>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b05      	cmp	r3, #5
 8005626:	d125      	bne.n	8005674 <ESP_Upkeep+0x5d0>
            setTime = false;
 8005628:	4b7a      	ldr	r3, [pc, #488]	@ (8005814 <ESP_Upkeep+0x770>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 800562e:	f006 fc6b 	bl	800bf08 <HAL_GetTick>
 8005632:	0003      	movs	r3, r0
 8005634:	4a78      	ldr	r2, [pc, #480]	@ (8005818 <ESP_Upkeep+0x774>)
 8005636:	189a      	adds	r2, r3, r2
 8005638:	4b78      	ldr	r3, [pc, #480]	@ (800581c <ESP_Upkeep+0x778>)
 800563a:	601a      	str	r2, [r3, #0]
            Debug("next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 800563c:	4b77      	ldr	r3, [pc, #476]	@ (800581c <ESP_Upkeep+0x778>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a77      	ldr	r2, [pc, #476]	@ (8005820 <ESP_Upkeep+0x77c>)
 8005642:	4973      	ldr	r1, [pc, #460]	@ (8005810 <ESP_Upkeep+0x76c>)
 8005644:	2003      	movs	r0, #3
 8005646:	f006 f8cb 	bl	800b7e0 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 800564a:	4b76      	ldr	r3, [pc, #472]	@ (8005824 <ESP_Upkeep+0x780>)
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b63      	ldr	r3, [pc, #396]	@ (80057dc <ESP_Upkeep+0x738>)
 8005650:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005652:	f005 fa4d 	bl	800aaf0 <ResetESPIndicator>
            clearDMABuffer();
 8005656:	f7ff f9f9 	bl	8004a4c <clearDMABuffer>
            Debug("time synchronized by NTP");
 800565a:	4a73      	ldr	r2, [pc, #460]	@ (8005828 <ESP_Upkeep+0x784>)
 800565c:	4b6c      	ldr	r3, [pc, #432]	@ (8005810 <ESP_Upkeep+0x76c>)
 800565e:	0019      	movs	r1, r3
 8005660:	2003      	movs	r0, #3
 8005662:	f006 f8bd 	bl	800b7e0 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005666:	4b62      	ldr	r3, [pc, #392]	@ (80057f0 <ESP_Upkeep+0x74c>)
 8005668:	220d      	movs	r2, #13
 800566a:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 800566c:	4b62      	ldr	r3, [pc, #392]	@ (80057f8 <ESP_Upkeep+0x754>)
 800566e:	2202      	movs	r2, #2
 8005670:	701a      	strb	r2, [r3, #0]
    break;
 8005672:	e0b0      	b.n	80057d6 <ESP_Upkeep+0x732>
          EspState = ESP_STATE_RESET;
 8005674:	4b5e      	ldr	r3, [pc, #376]	@ (80057f0 <ESP_Upkeep+0x74c>)
 8005676:	2209      	movs	r2, #9
 8005678:	701a      	strb	r2, [r3, #0]
    break;
 800567a:	e0ac      	b.n	80057d6 <ESP_Upkeep+0x732>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 800567c:	4b6b      	ldr	r3, [pc, #428]	@ (800582c <ESP_Upkeep+0x788>)
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005682:	4b6b      	ldr	r3, [pc, #428]	@ (8005830 <ESP_Upkeep+0x78c>)
 8005684:	2200      	movs	r2, #0
 8005686:	2101      	movs	r1, #1
 8005688:	0018      	movs	r0, r3
 800568a:	f007 fe9c 	bl	800d3c6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800568e:	2001      	movs	r0, #1
 8005690:	f006 fc44 	bl	800bf1c <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005694:	2380      	movs	r3, #128	@ 0x80
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4866      	ldr	r0, [pc, #408]	@ (8005834 <ESP_Upkeep+0x790>)
 800569a:	2200      	movs	r2, #0
 800569c:	0019      	movs	r1, r3
 800569e:	f007 fe92 	bl	800d3c6 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80056a2:	2001      	movs	r0, #1
 80056a4:	f006 fc3a 	bl	800bf1c <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80056a8:	4b61      	ldr	r3, [pc, #388]	@ (8005830 <ESP_Upkeep+0x78c>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	2102      	movs	r1, #2
 80056ae:	0018      	movs	r0, r3
 80056b0:	f007 fe89 	bl	800d3c6 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80056b4:	4b4e      	ldr	r3, [pc, #312]	@ (80057f0 <ESP_Upkeep+0x74c>)
 80056b6:	2209      	movs	r2, #9
 80056b8:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80056ba:	2001      	movs	r0, #1
 80056bc:	f006 fc2e 	bl	800bf1c <HAL_Delay>
      break;
 80056c0:	e0cd      	b.n	800585e <ESP_Upkeep+0x7ba>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80056c2:	4b46      	ldr	r3, [pc, #280]	@ (80057dc <ESP_Upkeep+0x738>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	0018      	movs	r0, r3
 80056c8:	f006 f834 	bl	800b734 <TimestampIsReached>
 80056cc:	1e03      	subs	r3, r0, #0
 80056ce:	d103      	bne.n	80056d8 <ESP_Upkeep+0x634>
 80056d0:	4b59      	ldr	r3, [pc, #356]	@ (8005838 <ESP_Upkeep+0x794>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d02f      	beq.n	8005738 <ESP_Upkeep+0x694>
        if(Mode == AT_MODE_INIT){
 80056d8:	4b47      	ldr	r3, [pc, #284]	@ (80057f8 <ESP_Upkeep+0x754>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <ESP_Upkeep+0x648>
          InitIsDone = true;
 80056e0:	4b56      	ldr	r3, [pc, #344]	@ (800583c <ESP_Upkeep+0x798>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80056e6:	4b42      	ldr	r3, [pc, #264]	@ (80057f0 <ESP_Upkeep+0x74c>)
 80056e8:	220b      	movs	r2, #11
 80056ea:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80056ec:	4b42      	ldr	r3, [pc, #264]	@ (80057f8 <ESP_Upkeep+0x754>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d108      	bne.n	8005706 <ESP_Upkeep+0x662>
          ConnectionMade = true;
 80056f4:	4b52      	ldr	r3, [pc, #328]	@ (8005840 <ESP_Upkeep+0x79c>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80056fa:	4b52      	ldr	r3, [pc, #328]	@ (8005844 <ESP_Upkeep+0x7a0>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005700:	4b3b      	ldr	r3, [pc, #236]	@ (80057f0 <ESP_Upkeep+0x74c>)
 8005702:	220b      	movs	r2, #11
 8005704:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 8005706:	4b3c      	ldr	r3, [pc, #240]	@ (80057f8 <ESP_Upkeep+0x754>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d102      	bne.n	8005714 <ESP_Upkeep+0x670>
          EspState = ESP_STATE_INIT;
 800570e:	4b38      	ldr	r3, [pc, #224]	@ (80057f0 <ESP_Upkeep+0x74c>)
 8005710:	2202      	movs	r2, #2
 8005712:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005714:	4b38      	ldr	r3, [pc, #224]	@ (80057f8 <ESP_Upkeep+0x754>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b03      	cmp	r3, #3
 800571a:	d102      	bne.n	8005722 <ESP_Upkeep+0x67e>
          EspState = ESP_STATE_CONFIG;
 800571c:	4b34      	ldr	r3, [pc, #208]	@ (80057f0 <ESP_Upkeep+0x74c>)
 800571e:	220e      	movs	r2, #14
 8005720:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 8005722:	4b35      	ldr	r3, [pc, #212]	@ (80057f8 <ESP_Upkeep+0x754>)
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	2b04      	cmp	r3, #4
 8005728:	d127      	bne.n	800577a <ESP_Upkeep+0x6d6>
          EspState = ESP_STATE_MODE_SELECT;
 800572a:	4b31      	ldr	r3, [pc, #196]	@ (80057f0 <ESP_Upkeep+0x74c>)
 800572c:	220b      	movs	r2, #11
 800572e:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005730:	4b45      	ldr	r3, [pc, #276]	@ (8005848 <ESP_Upkeep+0x7a4>)
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005736:	e020      	b.n	800577a <ESP_Upkeep+0x6d6>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005738:	4b38      	ldr	r3, [pc, #224]	@ (800581c <ESP_Upkeep+0x778>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0018      	movs	r0, r3
 800573e:	f005 fff9 	bl	800b734 <TimestampIsReached>
 8005742:	1e03      	subs	r3, r0, #0
 8005744:	d100      	bne.n	8005748 <ESP_Upkeep+0x6a4>
 8005746:	e089      	b.n	800585c <ESP_Upkeep+0x7b8>
        if(Mode == AT_MODE_SEND ) {
 8005748:	4b2b      	ldr	r3, [pc, #172]	@ (80057f8 <ESP_Upkeep+0x754>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d000      	beq.n	8005752 <ESP_Upkeep+0x6ae>
 8005750:	e084      	b.n	800585c <ESP_Upkeep+0x7b8>
            Mode = AT_MODE_GETTIME;
 8005752:	4b29      	ldr	r3, [pc, #164]	@ (80057f8 <ESP_Upkeep+0x754>)
 8005754:	2205      	movs	r2, #5
 8005756:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005758:	4b25      	ldr	r3, [pc, #148]	@ (80057f0 <ESP_Upkeep+0x74c>)
 800575a:	2202      	movs	r2, #2
 800575c:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 800575e:	4b1f      	ldr	r3, [pc, #124]	@ (80057dc <ESP_Upkeep+0x738>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b30      	ldr	r3, [pc, #192]	@ (8005824 <ESP_Upkeep+0x780>)
 8005764:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005766:	4b2b      	ldr	r3, [pc, #172]	@ (8005814 <ESP_Upkeep+0x770>)
 8005768:	2201      	movs	r2, #1
 800576a:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 800576c:	4a37      	ldr	r2, [pc, #220]	@ (800584c <ESP_Upkeep+0x7a8>)
 800576e:	4b28      	ldr	r3, [pc, #160]	@ (8005810 <ESP_Upkeep+0x76c>)
 8005770:	0019      	movs	r1, r3
 8005772:	2003      	movs	r0, #3
 8005774:	f006 f834 	bl	800b7e0 <CreateLine>
        }
      }
      break;
 8005778:	e070      	b.n	800585c <ESP_Upkeep+0x7b8>
 800577a:	e06f      	b.n	800585c <ESP_Upkeep+0x7b8>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 800577c:	4a34      	ldr	r2, [pc, #208]	@ (8005850 <ESP_Upkeep+0x7ac>)
 800577e:	4b24      	ldr	r3, [pc, #144]	@ (8005810 <ESP_Upkeep+0x76c>)
 8005780:	0019      	movs	r1, r3
 8005782:	2003      	movs	r0, #3
 8005784:	f006 f82c 	bl	800b7e0 <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 8005788:	f013 fdd8 	bl	801933c <GetUsbRxPointer>
 800578c:	0003      	movs	r3, r0
 800578e:	0018      	movs	r0, r3
 8005790:	f000 f8e0 	bl	8005954 <Process_PC_Config>
      break;
 8005794:	e063      	b.n	800585e <ESP_Upkeep+0x7ba>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005796:	4a2f      	ldr	r2, [pc, #188]	@ (8005854 <ESP_Upkeep+0x7b0>)
 8005798:	4b1d      	ldr	r3, [pc, #116]	@ (8005810 <ESP_Upkeep+0x76c>)
 800579a:	0019      	movs	r1, r3
 800579c:	2003      	movs	r0, #3
 800579e:	f006 f81f 	bl	800b7e0 <CreateLine>
      EspState = ESP_STATE_INIT;
 80057a2:	4b13      	ldr	r3, [pc, #76]	@ (80057f0 <ESP_Upkeep+0x74c>)
 80057a4:	2202      	movs	r2, #2
 80057a6:	701a      	strb	r2, [r3, #0]
      break;
 80057a8:	e059      	b.n	800585e <ESP_Upkeep+0x7ba>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 80057aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005858 <ESP_Upkeep+0x7b4>)
 80057ac:	4b18      	ldr	r3, [pc, #96]	@ (8005810 <ESP_Upkeep+0x76c>)
 80057ae:	0019      	movs	r1, r3
 80057b0:	2003      	movs	r0, #3
 80057b2:	f006 f815 	bl	800b7e0 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80057b6:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <ESP_Upkeep+0x74c>)
 80057b8:	2207      	movs	r2, #7
 80057ba:	701a      	strb	r2, [r3, #0]
      break;
 80057bc:	e04f      	b.n	800585e <ESP_Upkeep+0x7ba>
      break;
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	e04d      	b.n	800585e <ESP_Upkeep+0x7ba>
      break;
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	e04b      	b.n	800585e <ESP_Upkeep+0x7ba>
        break;
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	e049      	b.n	800585e <ESP_Upkeep+0x7ba>
    break;
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	e047      	b.n	800585e <ESP_Upkeep+0x7ba>
    break;
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	e045      	b.n	800585e <ESP_Upkeep+0x7ba>
      break;
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	e043      	b.n	800585e <ESP_Upkeep+0x7ba>
    break;
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	e041      	b.n	800585e <ESP_Upkeep+0x7ba>
 80057da:	46c0      	nop			@ (mov r8, r8)
 80057dc:	20000984 	.word	0x20000984
 80057e0:	20000991 	.word	0x20000991
 80057e4:	2000002a 	.word	0x2000002a
 80057e8:	20000992 	.word	0x20000992
 80057ec:	20000982 	.word	0x20000982
 80057f0:	20000028 	.word	0x20000028
 80057f4:	20000978 	.word	0x20000978
 80057f8:	20000993 	.word	0x20000993
 80057fc:	000493e0 	.word	0x000493e0
 8005800:	2000055c 	.word	0x2000055c
 8005804:	0801fe08 	.word	0x0801fe08
 8005808:	20000558 	.word	0x20000558
 800580c:	0801fe28 	.word	0x0801fe28
 8005810:	0801f6f0 	.word	0x0801f6f0
 8005814:	20000001 	.word	0x20000001
 8005818:	002c4020 	.word	0x002c4020
 800581c:	20000988 	.word	0x20000988
 8005820:	0801fe40 	.word	0x0801fe40
 8005824:	2000098c 	.word	0x2000098c
 8005828:	0801fe68 	.word	0x0801fe68
 800582c:	20000544 	.word	0x20000544
 8005830:	50001c00 	.word	0x50001c00
 8005834:	50000800 	.word	0x50000800
 8005838:	20000547 	.word	0x20000547
 800583c:	20000545 	.word	0x20000545
 8005840:	20000548 	.word	0x20000548
 8005844:	2000054a 	.word	0x2000054a
 8005848:	20000549 	.word	0x20000549
 800584c:	0801fe84 	.word	0x0801fe84
 8005850:	0801fe94 	.word	0x0801fe94
 8005854:	0801feac 	.word	0x0801feac
 8005858:	0801fec0 	.word	0x0801fec0
      break;
 800585c:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 800585e:	4b03      	ldr	r3, [pc, #12]	@ (800586c <ESP_Upkeep+0x7c8>)
 8005860:	781b      	ldrb	r3, [r3, #0]
}
 8005862:	0018      	movs	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	b003      	add	sp, #12
 8005868:	bd90      	pop	{r4, r7, pc}
 800586a:	46c0      	nop			@ (mov r8, r8)
 800586c:	20000028 	.word	0x20000028

08005870 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005878:	4b09      	ldr	r3, [pc, #36]	@ (80058a0 <I2CSensors_Init+0x30>)
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800587e:	4a09      	ldr	r2, [pc, #36]	@ (80058a4 <I2CSensors_Init+0x34>)
 8005880:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <I2CSensors_Init+0x38>)
 8005882:	0011      	movs	r1, r2
 8005884:	0018      	movs	r0, r3
 8005886:	f001 f955 	bl	8006b34 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800588a:	4a06      	ldr	r2, [pc, #24]	@ (80058a4 <I2CSensors_Init+0x34>)
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <I2CSensors_Init+0x38>)
 800588e:	0011      	movs	r1, r2
 8005890:	0018      	movs	r0, r3
 8005892:	f000 ffbf 	bl	8006814 <Gas_Init>
}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	46bd      	mov	sp, r7
 800589a:	b002      	add	sp, #8
 800589c:	bd80      	pop	{r7, pc}
 800589e:	46c0      	nop			@ (mov r8, r8)
 80058a0:	20000a84 	.word	0x20000a84
 80058a4:	08005901 	.word	0x08005901
 80058a8:	080058ad 	.word	0x080058ad

080058ac <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80058ac:	b5b0      	push	{r4, r5, r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6039      	str	r1, [r7, #0]
 80058b4:	0011      	movs	r1, r2
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	1c02      	adds	r2, r0, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	1dbb      	adds	r3, r7, #6
 80058be:	1c0a      	adds	r2, r1, #0
 80058c0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80058c2:	4b0e      	ldr	r3, [pc, #56]	@ (80058fc <ReadI2C+0x50>)
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	1dfb      	adds	r3, r7, #7
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	18db      	adds	r3, r3, r3
 80058ce:	b299      	uxth	r1, r3
 80058d0:	1dbb      	adds	r3, r7, #6
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	250f      	movs	r5, #15
 80058d8:	197c      	adds	r4, r7, r5
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	f007 ff2c 	bl	800d738 <HAL_I2C_Master_Receive_DMA>
 80058e0:	0003      	movs	r3, r0
 80058e2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80058e4:	197b      	adds	r3, r7, r5
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <ReadI2C+0x44>
        return false;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <ReadI2C+0x46>
    }
    return true;
 80058f0:	2301      	movs	r3, #1
}
 80058f2:	0018      	movs	r0, r3
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b004      	add	sp, #16
 80058f8:	bdb0      	pop	{r4, r5, r7, pc}
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	20000a84 	.word	0x20000a84

08005900 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005900:	b5b0      	push	{r4, r5, r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6039      	str	r1, [r7, #0]
 8005908:	0011      	movs	r1, r2
 800590a:	1dfb      	adds	r3, r7, #7
 800590c:	1c02      	adds	r2, r0, #0
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	1dbb      	adds	r3, r7, #6
 8005912:	1c0a      	adds	r2, r1, #0
 8005914:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005916:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <WriteI2C+0x50>)
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	1dfb      	adds	r3, r7, #7
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	18db      	adds	r3, r3, r3
 8005922:	b299      	uxth	r1, r3
 8005924:	1dbb      	adds	r3, r7, #6
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	250f      	movs	r5, #15
 800592c:	197c      	adds	r4, r7, r5
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	f007 fdfc 	bl	800d52c <HAL_I2C_Master_Transmit_DMA>
 8005934:	0003      	movs	r3, r0
 8005936:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005938:	197b      	adds	r3, r7, r5
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d001      	beq.n	8005944 <WriteI2C+0x44>
        return false;
 8005940:	2300      	movs	r3, #0
 8005942:	e000      	b.n	8005946 <WriteI2C+0x46>
    }
    return true;
 8005944:	2301      	movs	r3, #1
}
 8005946:	0018      	movs	r0, r3
 8005948:	46bd      	mov	sp, r7
 800594a:	b004      	add	sp, #16
 800594c:	bdb0      	pop	{r4, r5, r7, pc}
 800594e:	46c0      	nop			@ (mov r8, r8)
 8005950:	20000a84 	.word	0x20000a84

08005954 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005954:	b590      	push	{r4, r7, lr}
 8005956:	b0c3      	sub	sp, #268	@ 0x10c
 8005958:	af3e      	add	r7, sp, #248	@ 0xf8
 800595a:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 800595c:	f013 fd0e 	bl	801937c <GetUsbRxDataSize>
 8005960:	0003      	movs	r3, r0
 8005962:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b05      	cmp	r3, #5
 8005968:	d971      	bls.n	8005a4e <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2123      	movs	r1, #35	@ 0x23
 800596e:	0018      	movs	r0, r3
 8005970:	f016 ff04 	bl	801c77c <strchr>
 8005974:	0003      	movs	r3, r0
 8005976:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d065      	beq.n	8005a4a <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	785a      	ldrb	r2, [r3, #1]
 8005982:	4b34      	ldr	r3, [pc, #208]	@ (8005a54 <Process_PC_Config+0x100>)
 8005984:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	789a      	ldrb	r2, [r3, #2]
 800598a:	4b32      	ldr	r3, [pc, #200]	@ (8005a54 <Process_PC_Config+0x100>)
 800598c:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 800598e:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <Process_PC_Config+0x100>)
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	3305      	adds	r3, #5
 8005994:	001a      	movs	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4293      	cmp	r3, r2
 800599a:	d351      	bcc.n	8005a40 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	1cd9      	adds	r1, r3, #3
 80059a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005a54 <Process_PC_Config+0x100>)
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	001a      	movs	r2, r3
 80059a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005a58 <Process_PC_Config+0x104>)
 80059a8:	0018      	movs	r0, r3
 80059aa:	f016 ffbb 	bl	801c924 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80059ae:	4b29      	ldr	r3, [pc, #164]	@ (8005a54 <Process_PC_Config+0x100>)
 80059b0:	785b      	ldrb	r3, [r3, #1]
 80059b2:	3303      	adds	r3, #3
 80059b4:	001a      	movs	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	189b      	adds	r3, r3, r2
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	021b      	lsls	r3, r3, #8
 80059be:	b21a      	sxth	r2, r3
 80059c0:	4b24      	ldr	r3, [pc, #144]	@ (8005a54 <Process_PC_Config+0x100>)
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	3304      	adds	r3, #4
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	18cb      	adds	r3, r1, r3
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b21b      	sxth	r3, r3
 80059ce:	4313      	orrs	r3, r2
 80059d0:	b21b      	sxth	r3, r3
 80059d2:	b299      	uxth	r1, r3
 80059d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a54 <Process_PC_Config+0x100>)
 80059d6:	2381      	movs	r3, #129	@ 0x81
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 80059dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005a54 <Process_PC_Config+0x100>)
 80059de:	2381      	movs	r3, #129	@ 0x81
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	5ad4      	ldrh	r4, [r2, r3]
 80059e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005a54 <Process_PC_Config+0x100>)
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	3303      	adds	r3, #3
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	0011      	movs	r1, r2
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 f975 	bl	8005ce0 <CRC16_ARC>
 80059f6:	0003      	movs	r3, r0
 80059f8:	429c      	cmp	r4, r3
 80059fa:	d007      	beq.n	8005a0c <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 80059fc:	4b15      	ldr	r3, [pc, #84]	@ (8005a54 <Process_PC_Config+0x100>)
 80059fe:	785a      	ldrb	r2, [r3, #1]
 8005a00:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <Process_PC_Config+0x104>)
 8005a02:	0019      	movs	r1, r3
 8005a04:	2001      	movs	r0, #1
 8005a06:	f000 f919 	bl	8005c3c <Create_Message>
 8005a0a:	e016      	b.n	8005a3a <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005a0c:	4c11      	ldr	r4, [pc, #68]	@ (8005a54 <Process_PC_Config+0x100>)
 8005a0e:	466b      	mov	r3, sp
 8005a10:	0018      	movs	r0, r3
 8005a12:	0023      	movs	r3, r4
 8005a14:	3310      	adds	r3, #16
 8005a16:	22f4      	movs	r2, #244	@ 0xf4
 8005a18:	0019      	movs	r1, r3
 8005a1a:	f016 ff83 	bl	801c924 <memcpy>
 8005a1e:	6820      	ldr	r0, [r4, #0]
 8005a20:	6861      	ldr	r1, [r4, #4]
 8005a22:	68a2      	ldr	r2, [r4, #8]
 8005a24:	68e3      	ldr	r3, [r4, #12]
 8005a26:	f000 f819 	bl	8005a5c <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a54 <Process_PC_Config+0x100>)
 8005a2c:	7818      	ldrb	r0, [r3, #0]
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <Process_PC_Config+0x100>)
 8005a30:	785a      	ldrb	r2, [r3, #1]
 8005a32:	4b09      	ldr	r3, [pc, #36]	@ (8005a58 <Process_PC_Config+0x104>)
 8005a34:	0019      	movs	r1, r3
 8005a36:	f000 f901 	bl	8005c3c <Create_Message>
                }
                ResetUsbRxDataSize();
 8005a3a:	f013 fc87 	bl	801934c <ResetUsbRxDataSize>
                return;
 8005a3e:	e006      	b.n	8005a4e <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	0018      	movs	r0, r3
 8005a44:	f013 fca4 	bl	8019390 <GetUsbRxNextChunk>
 8005a48:	e001      	b.n	8005a4e <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005a4a:	f013 fc7f 	bl	801934c <ResetUsbRxDataSize>
        }
    }
}
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	b005      	add	sp, #20
 8005a52:	bd90      	pop	{r4, r7, pc}
 8005a54:	20000a88 	.word	0x20000a88
 8005a58:	20000a8a 	.word	0x20000a8a

08005a5c <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	b5b0      	push	{r4, r5, r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	2518      	movs	r5, #24
 8005a66:	197c      	adds	r4, r7, r5
 8005a68:	6020      	str	r0, [r4, #0]
 8005a6a:	6061      	str	r1, [r4, #4]
 8005a6c:	60a2      	str	r2, [r4, #8]
 8005a6e:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005a70:	197b      	adds	r3, r7, r5
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2bfe      	cmp	r3, #254	@ 0xfe
 8005a76:	d100      	bne.n	8005a7a <ProcessCmd+0x1e>
 8005a78:	e09c      	b.n	8005bb4 <ProcessCmd+0x158>
 8005a7a:	dd00      	ble.n	8005a7e <ProcessCmd+0x22>
 8005a7c:	e0bc      	b.n	8005bf8 <ProcessCmd+0x19c>
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	dc0a      	bgt.n	8005a98 <ProcessCmd+0x3c>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	da00      	bge.n	8005a88 <ProcessCmd+0x2c>
 8005a86:	e0b7      	b.n	8005bf8 <ProcessCmd+0x19c>
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	d900      	bls.n	8005a8e <ProcessCmd+0x32>
 8005a8c:	e0b4      	b.n	8005bf8 <ProcessCmd+0x19c>
 8005a8e:	009a      	lsls	r2, r3, #2
 8005a90:	4b5d      	ldr	r3, [pc, #372]	@ (8005c08 <ProcessCmd+0x1ac>)
 8005a92:	18d3      	adds	r3, r2, r3
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	469f      	mov	pc, r3
 8005a98:	2bfd      	cmp	r3, #253	@ 0xfd
 8005a9a:	d100      	bne.n	8005a9e <ProcessCmd+0x42>
 8005a9c:	e084      	b.n	8005ba8 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005a9e:	e0ab      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005aa0:	2118      	movs	r1, #24
 8005aa2:	187b      	adds	r3, r7, r1
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	001a      	movs	r2, r3
 8005aa8:	187b      	adds	r3, r7, r1
 8005aaa:	1c99      	adds	r1, r3, #2
 8005aac:	4857      	ldr	r0, [pc, #348]	@ (8005c0c <ProcessCmd+0x1b0>)
 8005aae:	230c      	movs	r3, #12
 8005ab0:	f7fd fe06 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ab4:	e0a0      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ab6:	2118      	movs	r1, #24
 8005ab8:	187b      	adds	r3, r7, r1
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	001a      	movs	r2, r3
 8005abe:	187b      	adds	r3, r7, r1
 8005ac0:	1c99      	adds	r1, r3, #2
 8005ac2:	4853      	ldr	r0, [pc, #332]	@ (8005c10 <ProcessCmd+0x1b4>)
 8005ac4:	230c      	movs	r3, #12
 8005ac6:	f7fd fdfb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005aca:	e095      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005acc:	2118      	movs	r1, #24
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	785b      	ldrb	r3, [r3, #1]
 8005ad2:	001a      	movs	r2, r3
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	1c99      	adds	r1, r3, #2
 8005ad8:	484e      	ldr	r0, [pc, #312]	@ (8005c14 <ProcessCmd+0x1b8>)
 8005ada:	230c      	movs	r3, #12
 8005adc:	f7fd fdf0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ae0:	e08a      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ae2:	2118      	movs	r1, #24
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	001a      	movs	r2, r3
 8005aea:	187b      	adds	r3, r7, r1
 8005aec:	1c99      	adds	r1, r3, #2
 8005aee:	484a      	ldr	r0, [pc, #296]	@ (8005c18 <ProcessCmd+0x1bc>)
 8005af0:	230c      	movs	r3, #12
 8005af2:	f7fd fde5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005af6:	e07f      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005af8:	2118      	movs	r1, #24
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	001a      	movs	r2, r3
 8005b00:	187b      	adds	r3, r7, r1
 8005b02:	1c99      	adds	r1, r3, #2
 8005b04:	4845      	ldr	r0, [pc, #276]	@ (8005c1c <ProcessCmd+0x1c0>)
 8005b06:	230c      	movs	r3, #12
 8005b08:	f7fd fdda 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b0c:	e074      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b0e:	2118      	movs	r1, #24
 8005b10:	187b      	adds	r3, r7, r1
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	001a      	movs	r2, r3
 8005b16:	187b      	adds	r3, r7, r1
 8005b18:	1c99      	adds	r1, r3, #2
 8005b1a:	4841      	ldr	r0, [pc, #260]	@ (8005c20 <ProcessCmd+0x1c4>)
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	f7fd fdcf 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b22:	e069      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b24:	2118      	movs	r1, #24
 8005b26:	187b      	adds	r3, r7, r1
 8005b28:	785b      	ldrb	r3, [r3, #1]
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	187b      	adds	r3, r7, r1
 8005b2e:	1c99      	adds	r1, r3, #2
 8005b30:	483c      	ldr	r0, [pc, #240]	@ (8005c24 <ProcessCmd+0x1c8>)
 8005b32:	230c      	movs	r3, #12
 8005b34:	f7fd fdc4 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b38:	e05e      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005b3a:	2118      	movs	r1, #24
 8005b3c:	187b      	adds	r3, r7, r1
 8005b3e:	785b      	ldrb	r3, [r3, #1]
 8005b40:	001a      	movs	r2, r3
 8005b42:	187b      	adds	r3, r7, r1
 8005b44:	1c99      	adds	r1, r3, #2
 8005b46:	4838      	ldr	r0, [pc, #224]	@ (8005c28 <ProcessCmd+0x1cc>)
 8005b48:	231e      	movs	r3, #30
 8005b4a:	f7fd fdb9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b4e:	e053      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b50:	2118      	movs	r1, #24
 8005b52:	187b      	adds	r3, r7, r1
 8005b54:	785b      	ldrb	r3, [r3, #1]
 8005b56:	001a      	movs	r2, r3
 8005b58:	187b      	adds	r3, r7, r1
 8005b5a:	1c99      	adds	r1, r3, #2
 8005b5c:	4833      	ldr	r0, [pc, #204]	@ (8005c2c <ProcessCmd+0x1d0>)
 8005b5e:	230c      	movs	r3, #12
 8005b60:	f7fd fdae 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b64:	e048      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b66:	2118      	movs	r1, #24
 8005b68:	187b      	adds	r3, r7, r1
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	001a      	movs	r2, r3
 8005b6e:	187b      	adds	r3, r7, r1
 8005b70:	1c99      	adds	r1, r3, #2
 8005b72:	482f      	ldr	r0, [pc, #188]	@ (8005c30 <ProcessCmd+0x1d4>)
 8005b74:	230c      	movs	r3, #12
 8005b76:	f7fd fda3 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b7a:	e03d      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b7c:	2118      	movs	r1, #24
 8005b7e:	187b      	adds	r3, r7, r1
 8005b80:	785b      	ldrb	r3, [r3, #1]
 8005b82:	001a      	movs	r2, r3
 8005b84:	187b      	adds	r3, r7, r1
 8005b86:	1c99      	adds	r1, r3, #2
 8005b88:	482a      	ldr	r0, [pc, #168]	@ (8005c34 <ProcessCmd+0x1d8>)
 8005b8a:	230c      	movs	r3, #12
 8005b8c:	f7fd fd98 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b90:	e032      	b.n	8005bf8 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b92:	2118      	movs	r1, #24
 8005b94:	187b      	adds	r3, r7, r1
 8005b96:	785b      	ldrb	r3, [r3, #1]
 8005b98:	001a      	movs	r2, r3
 8005b9a:	187b      	adds	r3, r7, r1
 8005b9c:	1c99      	adds	r1, r3, #2
 8005b9e:	4826      	ldr	r0, [pc, #152]	@ (8005c38 <ProcessCmd+0x1dc>)
 8005ba0:	230c      	movs	r3, #12
 8005ba2:	f7fd fd8d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ba6:	e027      	b.n	8005bf8 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005ba8:	4b18      	ldr	r3, [pc, #96]	@ (8005c0c <ProcessCmd+0x1b0>)
 8005baa:	21ba      	movs	r1, #186	@ 0xba
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7fd fdcc 	bl	800374a <ClearEEprom>
        break;
 8005bb2:	e021      	b.n	8005bf8 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005bb4:	2118      	movs	r1, #24
 8005bb6:	187b      	adds	r3, r7, r1
 8005bb8:	789b      	ldrb	r3, [r3, #2]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	b21a      	sxth	r2, r3
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	78db      	ldrb	r3, [r3, #3]
 8005bc2:	b21b      	sxth	r3, r3
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	b21a      	sxth	r2, r3
 8005bc8:	1dbb      	adds	r3, r7, #6
 8005bca:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005bcc:	1dbb      	adds	r3, r7, #6
 8005bce:	881a      	ldrh	r2, [r3, #0]
 8005bd0:	23c0      	movs	r3, #192	@ 0xc0
 8005bd2:	015b      	lsls	r3, r3, #5
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d207      	bcs.n	8005be8 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005bd8:	1dbb      	adds	r3, r7, #6
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8005c0c <ProcessCmd+0x1b0>)
 8005bde:	0019      	movs	r1, r3
 8005be0:	0010      	movs	r0, r2
 8005be2:	f7fd fdb2 	bl	800374a <ClearEEprom>
            break;
 8005be6:	e006      	b.n	8005bf6 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005be8:	23c0      	movs	r3, #192	@ 0xc0
 8005bea:	015b      	lsls	r3, r3, #5
 8005bec:	4a07      	ldr	r2, [pc, #28]	@ (8005c0c <ProcessCmd+0x1b0>)
 8005bee:	0019      	movs	r1, r3
 8005bf0:	0010      	movs	r0, r2
 8005bf2:	f7fd fdaa 	bl	800374a <ClearEEprom>
            break;
 8005bf6:	46c0      	nop			@ (mov r8, r8)
}
 8005bf8:	46c0      	nop			@ (mov r8, r8)
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bcb0      	pop	{r4, r5, r7}
 8005c00:	bc08      	pop	{r3}
 8005c02:	b004      	add	sp, #16
 8005c04:	4718      	bx	r3
 8005c06:	46c0      	nop			@ (mov r8, r8)
 8005c08:	0802097c 	.word	0x0802097c
 8005c0c:	08080000 	.word	0x08080000
 8005c10:	0808000c 	.word	0x0808000c
 8005c14:	08080018 	.word	0x08080018
 8005c18:	08080024 	.word	0x08080024
 8005c1c:	08080030 	.word	0x08080030
 8005c20:	0808003c 	.word	0x0808003c
 8005c24:	08080048 	.word	0x08080048
 8005c28:	08080090 	.word	0x08080090
 8005c2c:	08080078 	.word	0x08080078
 8005c30:	0808006c 	.word	0x0808006c
 8005c34:	08080060 	.word	0x08080060
 8005c38:	08080054 	.word	0x08080054

08005c3c <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6039      	str	r1, [r7, #0]
 8005c44:	0011      	movs	r1, r2
 8005c46:	1dfb      	adds	r3, r7, #7
 8005c48:	1c02      	adds	r2, r0, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	1dbb      	adds	r3, r7, #6
 8005c4e:	1c0a      	adds	r2, r1, #0
 8005c50:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005c52:	2223      	movs	r2, #35	@ 0x23
 8005c54:	4b20      	ldr	r3, [pc, #128]	@ (8005cd8 <Create_Message+0x9c>)
 8005c56:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005c58:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd8 <Create_Message+0x9c>)
 8005c5a:	1dfa      	adds	r2, r7, #7
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005c60:	4b1d      	ldr	r3, [pc, #116]	@ (8005cd8 <Create_Message+0x9c>)
 8005c62:	1dba      	adds	r2, r7, #6
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005c68:	1dbb      	adds	r3, r7, #6
 8005c6a:	781a      	ldrb	r2, [r3, #0]
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8005cdc <Create_Message+0xa0>)
 8005c70:	0018      	movs	r0, r3
 8005c72:	f016 fe57 	bl	801c924 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005c76:	1dbb      	adds	r3, r7, #6
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	250e      	movs	r5, #14
 8005c7e:	197b      	adds	r3, r7, r5
 8005c80:	3203      	adds	r2, #3
 8005c82:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005c84:	260c      	movs	r6, #12
 8005c86:	19bc      	adds	r4, r7, r6
 8005c88:	197b      	adds	r3, r7, r5
 8005c8a:	881a      	ldrh	r2, [r3, #0]
 8005c8c:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <Create_Message+0x9c>)
 8005c8e:	0011      	movs	r1, r2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 f825 	bl	8005ce0 <CRC16_ARC>
 8005c96:	0003      	movs	r3, r0
 8005c98:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005c9a:	0030      	movs	r0, r6
 8005c9c:	183b      	adds	r3, r7, r0
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	0a1b      	lsrs	r3, r3, #8
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	197b      	adds	r3, r7, r5
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b2d1      	uxtb	r1, r2
 8005caa:	4a0b      	ldr	r2, [pc, #44]	@ (8005cd8 <Create_Message+0x9c>)
 8005cac:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005cae:	197b      	adds	r3, r7, r5
 8005cb0:	881b      	ldrh	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	183a      	adds	r2, r7, r0
 8005cb6:	8812      	ldrh	r2, [r2, #0]
 8005cb8:	b2d1      	uxtb	r1, r2
 8005cba:	4a07      	ldr	r2, [pc, #28]	@ (8005cd8 <Create_Message+0x9c>)
 8005cbc:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005cbe:	197b      	adds	r3, r7, r5
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <Create_Message+0x9c>)
 8005cc8:	0011      	movs	r1, r2
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f013 fafc 	bl	80192c8 <CDC_Transmit_FS>
}
 8005cd0:	46c0      	nop			@ (mov r8, r8)
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b005      	add	sp, #20
 8005cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd8:	20000b8c 	.word	0x20000b8c
 8005cdc:	20000b8f 	.word	0x20000b8f

08005ce0 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	000a      	movs	r2, r1
 8005cea:	1cbb      	adds	r3, r7, #2
 8005cec:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005cee:	2316      	movs	r3, #22
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	e02e      	b.n	8005d5a <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	18d3      	adds	r3, r2, r3
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	0019      	movs	r1, r3
 8005d06:	2216      	movs	r2, #22
 8005d08:	18bb      	adds	r3, r7, r2
 8005d0a:	18ba      	adds	r2, r7, r2
 8005d0c:	8812      	ldrh	r2, [r2, #0]
 8005d0e:	404a      	eors	r2, r1
 8005d10:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	e01a      	b.n	8005d4e <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005d18:	2116      	movs	r1, #22
 8005d1a:	187b      	adds	r3, r7, r1
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4013      	ands	r3, r2
 8005d22:	d00b      	beq.n	8005d3c <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005d24:	187b      	adds	r3, r7, r1
 8005d26:	187a      	adds	r2, r7, r1
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	0852      	lsrs	r2, r2, #1
 8005d2c:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005d2e:	187b      	adds	r3, r7, r1
 8005d30:	187a      	adds	r2, r7, r1
 8005d32:	8812      	ldrh	r2, [r2, #0]
 8005d34:	490f      	ldr	r1, [pc, #60]	@ (8005d74 <CRC16_ARC+0x94>)
 8005d36:	404a      	eors	r2, r1
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e005      	b.n	8005d48 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005d3c:	2216      	movs	r2, #22
 8005d3e:	18bb      	adds	r3, r7, r2
 8005d40:	18ba      	adds	r2, r7, r2
 8005d42:	8812      	ldrh	r2, [r2, #0]
 8005d44:	0852      	lsrs	r2, r2, #1
 8005d46:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b07      	cmp	r3, #7
 8005d52:	dde1      	ble.n	8005d18 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3301      	adds	r3, #1
 8005d58:	613b      	str	r3, [r7, #16]
 8005d5a:	1cbb      	adds	r3, r7, #2
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	dbcb      	blt.n	8005cfc <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005d64:	2316      	movs	r3, #22
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	881b      	ldrh	r3, [r3, #0]
}
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	b006      	add	sp, #24
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	46c0      	nop			@ (mov r8, r8)
 8005d74:	ffffa001 	.word	0xffffa001

08005d78 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005d7c:	4b26      	ldr	r3, [pc, #152]	@ (8005e18 <ReadBatteryVoltage+0xa0>)
 8005d7e:	4a27      	ldr	r2, [pc, #156]	@ (8005e1c <ReadBatteryVoltage+0xa4>)
 8005d80:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005d82:	4b25      	ldr	r3, [pc, #148]	@ (8005e18 <ReadBatteryVoltage+0xa0>)
 8005d84:	2280      	movs	r2, #128	@ 0x80
 8005d86:	0152      	lsls	r2, r2, #5
 8005d88:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005d8a:	4a23      	ldr	r2, [pc, #140]	@ (8005e18 <ReadBatteryVoltage+0xa0>)
 8005d8c:	4b24      	ldr	r3, [pc, #144]	@ (8005e20 <ReadBatteryVoltage+0xa8>)
 8005d8e:	0011      	movs	r1, r2
 8005d90:	0018      	movs	r0, r3
 8005d92:	f006 fb75 	bl	800c480 <HAL_ADC_ConfigChannel>
 8005d96:	1e03      	subs	r3, r0, #0
 8005d98:	d001      	beq.n	8005d9e <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005d9a:	f001 fbaf 	bl	80074fc <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005d9e:	4b20      	ldr	r3, [pc, #128]	@ (8005e20 <ReadBatteryVoltage+0xa8>)
 8005da0:	0018      	movs	r0, r3
 8005da2:	f006 fa71 	bl	800c288 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005da6:	4b1e      	ldr	r3, [pc, #120]	@ (8005e20 <ReadBatteryVoltage+0xa8>)
 8005da8:	2101      	movs	r1, #1
 8005daa:	0018      	movs	r0, r3
 8005dac:	f006 fac0 	bl	800c330 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005db0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <ReadBatteryVoltage+0xa8>)
 8005db2:	0018      	movs	r0, r3
 8005db4:	f006 fb58 	bl	800c468 <HAL_ADC_GetValue>
 8005db8:	0002      	movs	r2, r0
 8005dba:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <ReadBatteryVoltage+0xac>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4353      	muls	r3, r2
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	4919      	ldr	r1, [pc, #100]	@ (8005e28 <ReadBatteryVoltage+0xb0>)
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f7fa f9ed 	bl	80001a4 <__udivsi3>
 8005dca:	0003      	movs	r3, r0
 8005dcc:	001a      	movs	r2, r3
 8005dce:	4b17      	ldr	r3, [pc, #92]	@ (8005e2c <ReadBatteryVoltage+0xb4>)
 8005dd0:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005dd2:	4b16      	ldr	r3, [pc, #88]	@ (8005e2c <ReadBatteryVoltage+0xb4>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f7fb fc46 	bl	8001668 <__aeabi_ui2f>
 8005ddc:	1c03      	adds	r3, r0, #0
 8005dde:	4914      	ldr	r1, [pc, #80]	@ (8005e30 <ReadBatteryVoltage+0xb8>)
 8005de0:	1c18      	adds	r0, r3, #0
 8005de2:	f7fa fef7 	bl	8000bd4 <__aeabi_fdiv>
 8005de6:	1c03      	adds	r3, r0, #0
 8005de8:	1c1a      	adds	r2, r3, #0
 8005dea:	4b12      	ldr	r3, [pc, #72]	@ (8005e34 <ReadBatteryVoltage+0xbc>)
 8005dec:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005dee:	4b0a      	ldr	r3, [pc, #40]	@ (8005e18 <ReadBatteryVoltage+0xa0>)
 8005df0:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <ReadBatteryVoltage+0xa4>)
 8005df2:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005df4:	4b08      	ldr	r3, [pc, #32]	@ (8005e18 <ReadBatteryVoltage+0xa0>)
 8005df6:	4a10      	ldr	r2, [pc, #64]	@ (8005e38 <ReadBatteryVoltage+0xc0>)
 8005df8:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005dfa:	4a07      	ldr	r2, [pc, #28]	@ (8005e18 <ReadBatteryVoltage+0xa0>)
 8005dfc:	4b08      	ldr	r3, [pc, #32]	@ (8005e20 <ReadBatteryVoltage+0xa8>)
 8005dfe:	0011      	movs	r1, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f006 fb3d 	bl	800c480 <HAL_ADC_ConfigChannel>
 8005e06:	1e03      	subs	r3, r0, #0
 8005e08:	d001      	beq.n	8005e0e <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005e0a:	f001 fb77 	bl	80074fc <Error_Handler>
   }
   return trueValue;
 8005e0e:	4b09      	ldr	r3, [pc, #36]	@ (8005e34 <ReadBatteryVoltage+0xbc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 }
 8005e12:	1c18      	adds	r0, r3, #0
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000c94 	.word	0x20000c94
 8005e1c:	38004000 	.word	0x38004000
 8005e20:	20000cb4 	.word	0x20000cb4
 8005e24:	2000002c 	.word	0x2000002c
 8005e28:	00000fff 	.word	0x00000fff
 8005e2c:	20000c9c 	.word	0x20000c9c
 8005e30:	447a0000 	.word	0x447a0000
 8005e34:	20000ca0 	.word	0x20000ca0
 8005e38:	00001001 	.word	0x00001001

08005e3c <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005e40:	4b27      	ldr	r3, [pc, #156]	@ (8005ee0 <ReadSolarVoltage+0xa4>)
 8005e42:	4a28      	ldr	r2, [pc, #160]	@ (8005ee4 <ReadSolarVoltage+0xa8>)
 8005e44:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005e46:	4b26      	ldr	r3, [pc, #152]	@ (8005ee0 <ReadSolarVoltage+0xa4>)
 8005e48:	2280      	movs	r2, #128	@ 0x80
 8005e4a:	0152      	lsls	r2, r2, #5
 8005e4c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e4e:	4a24      	ldr	r2, [pc, #144]	@ (8005ee0 <ReadSolarVoltage+0xa4>)
 8005e50:	4b25      	ldr	r3, [pc, #148]	@ (8005ee8 <ReadSolarVoltage+0xac>)
 8005e52:	0011      	movs	r1, r2
 8005e54:	0018      	movs	r0, r3
 8005e56:	f006 fb13 	bl	800c480 <HAL_ADC_ConfigChannel>
 8005e5a:	1e03      	subs	r3, r0, #0
 8005e5c:	d001      	beq.n	8005e62 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005e5e:	f001 fb4d 	bl	80074fc <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005e62:	4b21      	ldr	r3, [pc, #132]	@ (8005ee8 <ReadSolarVoltage+0xac>)
 8005e64:	0018      	movs	r0, r3
 8005e66:	f006 fa0f 	bl	800c288 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee8 <ReadSolarVoltage+0xac>)
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f006 fa5e 	bl	800c330 <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005e74:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee8 <ReadSolarVoltage+0xac>)
 8005e76:	0018      	movs	r0, r3
 8005e78:	f006 faf6 	bl	800c468 <HAL_ADC_GetValue>
 8005e7c:	0002      	movs	r2, r0
 8005e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8005eec <ReadSolarVoltage+0xb0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	435a      	muls	r2, r3
 8005e84:	0013      	movs	r3, r2
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	189b      	adds	r3, r3, r2
 8005e8a:	4919      	ldr	r1, [pc, #100]	@ (8005ef0 <ReadSolarVoltage+0xb4>)
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7fa f989 	bl	80001a4 <__udivsi3>
 8005e92:	0003      	movs	r3, r0
 8005e94:	001a      	movs	r2, r3
 8005e96:	4b17      	ldr	r3, [pc, #92]	@ (8005ef4 <ReadSolarVoltage+0xb8>)
 8005e98:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005e9a:	4b16      	ldr	r3, [pc, #88]	@ (8005ef4 <ReadSolarVoltage+0xb8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f7fb fbe2 	bl	8001668 <__aeabi_ui2f>
 8005ea4:	1c03      	adds	r3, r0, #0
 8005ea6:	4914      	ldr	r1, [pc, #80]	@ (8005ef8 <ReadSolarVoltage+0xbc>)
 8005ea8:	1c18      	adds	r0, r3, #0
 8005eaa:	f7fa fe93 	bl	8000bd4 <__aeabi_fdiv>
 8005eae:	1c03      	adds	r3, r0, #0
 8005eb0:	1c1a      	adds	r2, r3, #0
 8005eb2:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <ReadSolarVoltage+0xc0>)
 8005eb4:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee0 <ReadSolarVoltage+0xa4>)
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee4 <ReadSolarVoltage+0xa8>)
 8005eba:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005ebc:	4b08      	ldr	r3, [pc, #32]	@ (8005ee0 <ReadSolarVoltage+0xa4>)
 8005ebe:	4a10      	ldr	r2, [pc, #64]	@ (8005f00 <ReadSolarVoltage+0xc4>)
 8005ec0:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005ec2:	4a07      	ldr	r2, [pc, #28]	@ (8005ee0 <ReadSolarVoltage+0xa4>)
 8005ec4:	4b08      	ldr	r3, [pc, #32]	@ (8005ee8 <ReadSolarVoltage+0xac>)
 8005ec6:	0011      	movs	r1, r2
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f006 fad9 	bl	800c480 <HAL_ADC_ConfigChannel>
 8005ece:	1e03      	subs	r3, r0, #0
 8005ed0:	d001      	beq.n	8005ed6 <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005ed2:	f001 fb13 	bl	80074fc <Error_Handler>
   }
   return trueValue;
 8005ed6:	4b09      	ldr	r3, [pc, #36]	@ (8005efc <ReadSolarVoltage+0xc0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 }
 8005eda:	1c18      	adds	r0, r3, #0
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000c94 	.word	0x20000c94
 8005ee4:	3c008000 	.word	0x3c008000
 8005ee8:	20000cb4 	.word	0x20000cb4
 8005eec:	2000002c 	.word	0x2000002c
 8005ef0:	00000fff 	.word	0x00000fff
 8005ef4:	20000ca4 	.word	0x20000ca4
 8005ef8:	447a0000 	.word	0x447a0000
 8005efc:	20000ca8 	.word	0x20000ca8
 8005f00:	00001001 	.word	0x00001001

08005f04 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005f08:	23a0      	movs	r3, #160	@ 0xa0
 8005f0a:	05db      	lsls	r3, r3, #23
 8005f0c:	2180      	movs	r1, #128	@ 0x80
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f007 fa3c 	bl	800d38c <HAL_GPIO_ReadPin>
 8005f14:	0003      	movs	r3, r0
 8005f16:	1e5a      	subs	r2, r3, #1
 8005f18:	4193      	sbcs	r3, r2
 8005f1a:	b2db      	uxtb	r3, r3
}
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005f22:	b580      	push	{r7, lr}
 8005f24:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005f26:	2380      	movs	r3, #128	@ 0x80
 8005f28:	021a      	lsls	r2, r3, #8
 8005f2a:	23a0      	movs	r3, #160	@ 0xa0
 8005f2c:	05db      	lsls	r3, r3, #23
 8005f2e:	0011      	movs	r1, r2
 8005f30:	0018      	movs	r0, r3
 8005f32:	f007 fa2b 	bl	800d38c <HAL_GPIO_ReadPin>
 8005f36:	0003      	movs	r3, r0
 8005f38:	1e5a      	subs	r2, r3, #1
 8005f3a:	4193      	sbcs	r3, r2
 8005f3c:	b2db      	uxtb	r3, r3
}
 8005f3e:	0018      	movs	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005f48:	4b05      	ldr	r3, [pc, #20]	@ (8005f60 <UserButton_Pressed+0x1c>)
 8005f4a:	2104      	movs	r1, #4
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f007 fa1d 	bl	800d38c <HAL_GPIO_ReadPin>
 8005f52:	0003      	movs	r3, r0
 8005f54:	425a      	negs	r2, r3
 8005f56:	4153      	adcs	r3, r2
 8005f58:	b2db      	uxtb	r3, r3
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	50000c00 	.word	0x50000c00

08005f64 <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	0008      	movs	r0, r1
 8005f6e:	0011      	movs	r1, r2
 8005f70:	1cfb      	adds	r3, r7, #3
 8005f72:	1c02      	adds	r2, r0, #0
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	1cbb      	adds	r3, r7, #2
 8005f78:	1c0a      	adds	r2, r1, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8005f7c:	230e      	movs	r3, #14
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	2200      	movs	r2, #0
 8005f82:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8005f84:	230f      	movs	r3, #15
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	1cfa      	adds	r2, r7, #3
 8005f8a:	7812      	ldrb	r2, [r2, #0]
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e015      	b.n	8005fbc <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8005f90:	200f      	movs	r0, #15
 8005f92:	183b      	adds	r3, r7, r0
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	18d2      	adds	r2, r2, r3
 8005f9a:	240e      	movs	r4, #14
 8005f9c:	193b      	adds	r3, r7, r4
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	7811      	ldrb	r1, [r2, #0]
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	18ba      	adds	r2, r7, r2
 8005fa6:	54d1      	strb	r1, [r2, r3]
    pos++;
 8005fa8:	193b      	adds	r3, r7, r4
 8005faa:	781a      	ldrb	r2, [r3, #0]
 8005fac:	193b      	adds	r3, r7, r4
 8005fae:	3201      	adds	r2, #1
 8005fb0:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 8005fb2:	183b      	adds	r3, r7, r0
 8005fb4:	781a      	ldrb	r2, [r3, #0]
 8005fb6:	183b      	adds	r3, r7, r0
 8005fb8:	3201      	adds	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	200f      	movs	r0, #15
 8005fbe:	183a      	adds	r2, r7, r0
 8005fc0:	1cbb      	adds	r3, r7, #2
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d9e2      	bls.n	8005f90 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8005fca:	230e      	movs	r3, #14
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	18ba      	adds	r2, r7, r2
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8005fd8:	1cfb      	adds	r3, r7, #3
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	2b13      	cmp	r3, #19
 8005fde:	d849      	bhi.n	8006074 <aBuff2int+0x110>
    if (start == 17) { //month
 8005fe0:	1cfb      	adds	r3, r7, #3
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b11      	cmp	r3, #17
 8005fe6:	d122      	bne.n	800602e <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8005fe8:	183b      	adds	r3, r7, r0
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e018      	b.n	8006022 <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8005ff0:	240f      	movs	r4, #15
 8005ff2:	193b      	adds	r3, r7, r4
 8005ff4:	781a      	ldrb	r2, [r3, #0]
 8005ff6:	4b25      	ldr	r3, [pc, #148]	@ (800608c <aBuff2int+0x128>)
 8005ff8:	0092      	lsls	r2, r2, #2
 8005ffa:	58d2      	ldr	r2, [r2, r3]
 8005ffc:	2308      	movs	r3, #8
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	0011      	movs	r1, r2
 8006002:	0018      	movs	r0, r3
 8006004:	f7fa f8a8 	bl	8000158 <strcmp>
 8006008:	1e03      	subs	r3, r0, #0
 800600a:	d104      	bne.n	8006016 <aBuff2int+0xb2>
          return i+1;
 800600c:	193b      	adds	r3, r7, r4
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	b2db      	uxtb	r3, r3
 8006014:	e035      	b.n	8006082 <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 8006016:	210f      	movs	r1, #15
 8006018:	187b      	adds	r3, r7, r1
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	187b      	adds	r3, r7, r1
 800601e:	3201      	adds	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	230f      	movs	r3, #15
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	2b0b      	cmp	r3, #11
 800602a:	d9e1      	bls.n	8005ff0 <aBuff2int+0x8c>
 800602c:	e022      	b.n	8006074 <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 800602e:	230f      	movs	r3, #15
 8006030:	18fb      	adds	r3, r7, r3
 8006032:	2200      	movs	r2, #0
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	e018      	b.n	800606a <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006038:	240f      	movs	r4, #15
 800603a:	193b      	adds	r3, r7, r4
 800603c:	781a      	ldrb	r2, [r3, #0]
 800603e:	4b14      	ldr	r3, [pc, #80]	@ (8006090 <aBuff2int+0x12c>)
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	58d2      	ldr	r2, [r2, r3]
 8006044:	2308      	movs	r3, #8
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	0011      	movs	r1, r2
 800604a:	0018      	movs	r0, r3
 800604c:	f7fa f884 	bl	8000158 <strcmp>
 8006050:	1e03      	subs	r3, r0, #0
 8006052:	d104      	bne.n	800605e <aBuff2int+0xfa>
          return i+1;
 8006054:	193b      	adds	r3, r7, r4
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	b2db      	uxtb	r3, r3
 800605c:	e011      	b.n	8006082 <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 800605e:	210f      	movs	r1, #15
 8006060:	187b      	adds	r3, r7, r1
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	187b      	adds	r3, r7, r1
 8006066:	3201      	adds	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	230f      	movs	r3, #15
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	2b06      	cmp	r3, #6
 8006072:	d9e1      	bls.n	8006038 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 8006074:	2308      	movs	r3, #8
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	0018      	movs	r0, r3
 800607a:	f014 fde8 	bl	801ac4e <atoi>
 800607e:	0003      	movs	r3, r0
 8006080:	b2db      	uxtb	r3, r3
}
 8006082:	0018      	movs	r0, r3
 8006084:	46bd      	mov	sp, r7
 8006086:	b005      	add	sp, #20
 8006088:	bd90      	pop	{r4, r7, pc}
 800608a:	46c0      	nop			@ (mov r8, r8)
 800608c:	2000004c 	.word	0x2000004c
 8006090:	20000030 	.word	0x20000030

08006094 <ParseTime>:

void ParseTime(char* buffer) {
 8006094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006096:	b089      	sub	sp, #36	@ 0x24
 8006098:	af04      	add	r7, sp, #16
 800609a:	6078      	str	r0, [r7, #4]
  uint8_t year, month, day, weekday, hours, minutes, seconds;
  hours = aBuff2int(buffer, 24, 25);
 800609c:	250f      	movs	r5, #15
 800609e:	197c      	adds	r4, r7, r5
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2219      	movs	r2, #25
 80060a4:	2118      	movs	r1, #24
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7ff ff5c 	bl	8005f64 <aBuff2int>
 80060ac:	0003      	movs	r3, r0
 80060ae:	7023      	strb	r3, [r4, #0]
  minutes = aBuff2int(buffer, 27, 28);
 80060b0:	260e      	movs	r6, #14
 80060b2:	19bc      	adds	r4, r7, r6
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	221c      	movs	r2, #28
 80060b8:	211b      	movs	r1, #27
 80060ba:	0018      	movs	r0, r3
 80060bc:	f7ff ff52 	bl	8005f64 <aBuff2int>
 80060c0:	0003      	movs	r3, r0
 80060c2:	7023      	strb	r3, [r4, #0]
  seconds = aBuff2int(buffer, 30, 31);
 80060c4:	230d      	movs	r3, #13
 80060c6:	18fc      	adds	r4, r7, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	221f      	movs	r2, #31
 80060cc:	211e      	movs	r1, #30
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7ff ff48 	bl	8005f64 <aBuff2int>
 80060d4:	0003      	movs	r3, r0
 80060d6:	7023      	strb	r3, [r4, #0]
  RTC_SetTime(hours, minutes, seconds);
 80060d8:	230d      	movs	r3, #13
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	19bb      	adds	r3, r7, r6
 80060e0:	7819      	ldrb	r1, [r3, #0]
 80060e2:	197b      	adds	r3, r7, r5
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f000 f860 	bl	80061ac <RTC_SetTime>
  year = aBuff2int(buffer, 35, 36);
 80060ec:	240c      	movs	r4, #12
 80060ee:	0025      	movs	r5, r4
 80060f0:	193c      	adds	r4, r7, r4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2224      	movs	r2, #36	@ 0x24
 80060f6:	2123      	movs	r1, #35	@ 0x23
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7ff ff33 	bl	8005f64 <aBuff2int>
 80060fe:	0003      	movs	r3, r0
 8006100:	7023      	strb	r3, [r4, #0]
  month = aBuff2int(buffer, 17, 19);
 8006102:	240b      	movs	r4, #11
 8006104:	193c      	adds	r4, r7, r4
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2213      	movs	r2, #19
 800610a:	2111      	movs	r1, #17
 800610c:	0018      	movs	r0, r3
 800610e:	f7ff ff29 	bl	8005f64 <aBuff2int>
 8006112:	0003      	movs	r3, r0
 8006114:	7023      	strb	r3, [r4, #0]
  day = aBuff2int(buffer, 21,22);
 8006116:	210a      	movs	r1, #10
 8006118:	187c      	adds	r4, r7, r1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2216      	movs	r2, #22
 800611e:	2115      	movs	r1, #21
 8006120:	0018      	movs	r0, r3
 8006122:	f7ff ff1f 	bl	8005f64 <aBuff2int>
 8006126:	0003      	movs	r3, r0
 8006128:	7023      	strb	r3, [r4, #0]
  weekday = aBuff2int(buffer, 13, 15);
 800612a:	2009      	movs	r0, #9
 800612c:	183c      	adds	r4, r7, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	220f      	movs	r2, #15
 8006132:	210d      	movs	r1, #13
 8006134:	0018      	movs	r0, r3
 8006136:	f7ff ff15 	bl	8005f64 <aBuff2int>
 800613a:	0003      	movs	r3, r0
 800613c:	7023      	strb	r3, [r4, #0]
  RTC_SetDate(weekday, day, month, year);
 800613e:	002c      	movs	r4, r5
 8006140:	0026      	movs	r6, r4
 8006142:	193b      	adds	r3, r7, r4
 8006144:	781c      	ldrb	r4, [r3, #0]
 8006146:	220b      	movs	r2, #11
 8006148:	18bb      	adds	r3, r7, r2
 800614a:	781a      	ldrb	r2, [r3, #0]
 800614c:	210a      	movs	r1, #10
 800614e:	187b      	adds	r3, r7, r1
 8006150:	7819      	ldrb	r1, [r3, #0]
 8006152:	2009      	movs	r0, #9
 8006154:	0005      	movs	r5, r0
 8006156:	183b      	adds	r3, r7, r0
 8006158:	7818      	ldrb	r0, [r3, #0]
 800615a:	0023      	movs	r3, r4
 800615c:	f000 f86c 	bl	8006238 <RTC_SetDate>
  printf("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d\r\n", weekday, year, month, day, hours, minutes, seconds);
 8006160:	197b      	adds	r3, r7, r5
 8006162:	781d      	ldrb	r5, [r3, #0]
 8006164:	0034      	movs	r4, r6
 8006166:	193b      	adds	r3, r7, r4
 8006168:	781e      	ldrb	r6, [r3, #0]
 800616a:	240b      	movs	r4, #11
 800616c:	193b      	adds	r3, r7, r4
 800616e:	781a      	ldrb	r2, [r3, #0]
 8006170:	4694      	mov	ip, r2
 8006172:	240a      	movs	r4, #10
 8006174:	193b      	adds	r3, r7, r4
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	220f      	movs	r2, #15
 800617a:	18ba      	adds	r2, r7, r2
 800617c:	7812      	ldrb	r2, [r2, #0]
 800617e:	210e      	movs	r1, #14
 8006180:	1879      	adds	r1, r7, r1
 8006182:	7809      	ldrb	r1, [r1, #0]
 8006184:	200d      	movs	r0, #13
 8006186:	1838      	adds	r0, r7, r0
 8006188:	7800      	ldrb	r0, [r0, #0]
 800618a:	4c07      	ldr	r4, [pc, #28]	@ (80061a8 <ParseTime+0x114>)
 800618c:	9003      	str	r0, [sp, #12]
 800618e:	9102      	str	r1, [sp, #8]
 8006190:	9201      	str	r2, [sp, #4]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	4663      	mov	r3, ip
 8006196:	0032      	movs	r2, r6
 8006198:	0029      	movs	r1, r5
 800619a:	0020      	movs	r0, r4
 800619c:	f016 f932 	bl	801c404 <iprintf>
}
 80061a0:	46c0      	nop			@ (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b005      	add	sp, #20
 80061a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061a8:	0801ff24 	.word	0x0801ff24

080061ac <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 80061ac:	b590      	push	{r4, r7, lr}
 80061ae:	b089      	sub	sp, #36	@ 0x24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	0004      	movs	r4, r0
 80061b4:	0008      	movs	r0, r1
 80061b6:	0011      	movs	r1, r2
 80061b8:	1dfb      	adds	r3, r7, #7
 80061ba:	1c22      	adds	r2, r4, #0
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	1dbb      	adds	r3, r7, #6
 80061c0:	1c02      	adds	r2, r0, #0
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	1d7b      	adds	r3, r7, #5
 80061c6:	1c0a      	adds	r2, r1, #0
 80061c8:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {0};
 80061ca:	240c      	movs	r4, #12
 80061cc:	193b      	adds	r3, r7, r4
 80061ce:	0018      	movs	r0, r3
 80061d0:	2314      	movs	r3, #20
 80061d2:	001a      	movs	r2, r3
 80061d4:	2100      	movs	r1, #0
 80061d6:	f016 fac9 	bl	801c76c <memset>

    sTime.Hours = hours;
 80061da:	0021      	movs	r1, r4
 80061dc:	187b      	adds	r3, r7, r1
 80061de:	1dfa      	adds	r2, r7, #7
 80061e0:	7812      	ldrb	r2, [r2, #0]
 80061e2:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 80061e4:	187b      	adds	r3, r7, r1
 80061e6:	1dba      	adds	r2, r7, #6
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = seconds;
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	1d7a      	adds	r2, r7, #5
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	709a      	strb	r2, [r3, #2]
    sTime.TimeFormat = RTC_HOURFORMAT_24;
 80061f4:	187b      	adds	r3, r7, r1
 80061f6:	2200      	movs	r2, #0
 80061f8:	70da      	strb	r2, [r3, #3]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80061fa:	187b      	adds	r3, r7, r1
 80061fc:	2200      	movs	r2, #0
 80061fe:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006200:	187b      	adds	r3, r7, r1
 8006202:	2200      	movs	r2, #0
 8006204:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006206:	4b09      	ldr	r3, [pc, #36]	@ (800622c <RTC_SetTime+0x80>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	1879      	adds	r1, r7, r1
 800620c:	2200      	movs	r2, #0
 800620e:	0018      	movs	r0, r3
 8006210:	f00c fa68 	bl	80126e4 <HAL_RTC_SetTime>
 8006214:	1e03      	subs	r3, r0, #0
 8006216:	d005      	beq.n	8006224 <RTC_SetTime+0x78>
        // Foutafhandeling
      Debug("Error setting time to RTC");
 8006218:	4a05      	ldr	r2, [pc, #20]	@ (8006230 <RTC_SetTime+0x84>)
 800621a:	4b06      	ldr	r3, [pc, #24]	@ (8006234 <RTC_SetTime+0x88>)
 800621c:	0019      	movs	r1, r3
 800621e:	2003      	movs	r0, #3
 8006220:	f005 fade 	bl	800b7e0 <CreateLine>
    }
}
 8006224:	46c0      	nop			@ (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b009      	add	sp, #36	@ 0x24
 800622a:	bd90      	pop	{r4, r7, pc}
 800622c:	20000cb0 	.word	0x20000cb0
 8006230:	0801ff90 	.word	0x0801ff90
 8006234:	0801ffac 	.word	0x0801ffac

08006238 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(uint8_t weekday, uint8_t day, uint8_t month, uint8_t year) {
 8006238:	b5b0      	push	{r4, r5, r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	0005      	movs	r5, r0
 8006240:	000c      	movs	r4, r1
 8006242:	0010      	movs	r0, r2
 8006244:	0019      	movs	r1, r3
 8006246:	1dfb      	adds	r3, r7, #7
 8006248:	1c2a      	adds	r2, r5, #0
 800624a:	701a      	strb	r2, [r3, #0]
 800624c:	1dbb      	adds	r3, r7, #6
 800624e:	1c22      	adds	r2, r4, #0
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	1d7b      	adds	r3, r7, #5
 8006254:	1c02      	adds	r2, r0, #0
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	1c0a      	adds	r2, r1, #0
 800625c:	701a      	strb	r2, [r3, #0]
    RTC_DateTypeDef sDate = {0};
 800625e:	210c      	movs	r1, #12
 8006260:	187b      	adds	r3, r7, r1
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

    sDate.WeekDay = weekday;
 8006266:	187b      	adds	r3, r7, r1
 8006268:	1dfa      	adds	r2, r7, #7
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	701a      	strb	r2, [r3, #0]
    sDate.Date = day;
 800626e:	187b      	adds	r3, r7, r1
 8006270:	1dba      	adds	r2, r7, #6
 8006272:	7812      	ldrb	r2, [r2, #0]
 8006274:	709a      	strb	r2, [r3, #2]
    sDate.Month = month;
 8006276:	187b      	adds	r3, r7, r1
 8006278:	1d7a      	adds	r2, r7, #5
 800627a:	7812      	ldrb	r2, [r2, #0]
 800627c:	705a      	strb	r2, [r3, #1]
    sDate.Year = year;  // Jaartal zonder eeuw (bv. 2024 -> 24)
 800627e:	187b      	adds	r3, r7, r1
 8006280:	1d3a      	adds	r2, r7, #4
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(RealTime_Handle, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006286:	4b09      	ldr	r3, [pc, #36]	@ (80062ac <RTC_SetDate+0x74>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1879      	adds	r1, r7, r1
 800628c:	2200      	movs	r2, #0
 800628e:	0018      	movs	r0, r3
 8006290:	f00c fb30 	bl	80128f4 <HAL_RTC_SetDate>
 8006294:	1e03      	subs	r3, r0, #0
 8006296:	d005      	beq.n	80062a4 <RTC_SetDate+0x6c>
        // Foutafhandeling
      Debug("Error setting date to RTC");
 8006298:	4a05      	ldr	r2, [pc, #20]	@ (80062b0 <RTC_SetDate+0x78>)
 800629a:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <RTC_SetDate+0x7c>)
 800629c:	0019      	movs	r1, r3
 800629e:	2003      	movs	r0, #3
 80062a0:	f005 fa9e 	bl	800b7e0 <CreateLine>
    }
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b004      	add	sp, #16
 80062aa:	bdb0      	pop	{r4, r5, r7, pc}
 80062ac:	20000cb0 	.word	0x20000cb0
 80062b0:	0801ffb0 	.word	0x0801ffb0
 80062b4:	0801ffac 	.word	0x0801ffac

080062b8 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(uint8_t *hours, uint8_t *minutes, uint8_t *seconds, uint8_t *weekday, uint8_t *day, uint8_t *month, uint8_t *year) {
 80062b8:	b590      	push	{r4, r7, lr}
 80062ba:	b08b      	sub	sp, #44	@ 0x2c
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
    RTC_TimeTypeDef gTime = {0};
 80062c6:	2414      	movs	r4, #20
 80062c8:	193b      	adds	r3, r7, r4
 80062ca:	0018      	movs	r0, r3
 80062cc:	2314      	movs	r3, #20
 80062ce:	001a      	movs	r2, r3
 80062d0:	2100      	movs	r1, #0
 80062d2:	f016 fa4b 	bl	801c76c <memset>
    RTC_DateTypeDef gDate = {0};
 80062d6:	2310      	movs	r3, #16
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

    if (HAL_RTC_GetTime(RealTime_Handle, &gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80062de:	4b20      	ldr	r3, [pc, #128]	@ (8006360 <RTC_GetTime+0xa8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1939      	adds	r1, r7, r4
 80062e4:	2200      	movs	r2, #0
 80062e6:	0018      	movs	r0, r3
 80062e8:	f00c faa6 	bl	8012838 <HAL_RTC_GetTime>
 80062ec:	1e03      	subs	r3, r0, #0
 80062ee:	d005      	beq.n	80062fc <RTC_GetTime+0x44>
      Debug("Error getting time from RTC");
 80062f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006364 <RTC_GetTime+0xac>)
 80062f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006368 <RTC_GetTime+0xb0>)
 80062f4:	0019      	movs	r1, r3
 80062f6:	2003      	movs	r0, #3
 80062f8:	f005 fa72 	bl	800b7e0 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, &gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80062fc:	4b18      	ldr	r3, [pc, #96]	@ (8006360 <RTC_GetTime+0xa8>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2210      	movs	r2, #16
 8006302:	18b9      	adds	r1, r7, r2
 8006304:	2200      	movs	r2, #0
 8006306:	0018      	movs	r0, r3
 8006308:	f00c fb88 	bl	8012a1c <HAL_RTC_GetDate>
 800630c:	1e03      	subs	r3, r0, #0
 800630e:	d005      	beq.n	800631c <RTC_GetTime+0x64>
      Debug("Error getting date from RTC");
 8006310:	4a16      	ldr	r2, [pc, #88]	@ (800636c <RTC_GetTime+0xb4>)
 8006312:	4b15      	ldr	r3, [pc, #84]	@ (8006368 <RTC_GetTime+0xb0>)
 8006314:	0019      	movs	r1, r3
 8006316:	2003      	movs	r0, #3
 8006318:	f005 fa62 	bl	800b7e0 <CreateLine>
    }
    *hours = gTime.Hours;
 800631c:	2114      	movs	r1, #20
 800631e:	187b      	adds	r3, r7, r1
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	701a      	strb	r2, [r3, #0]
    *minutes = gTime.Minutes;
 8006326:	187b      	adds	r3, r7, r1
 8006328:	785a      	ldrb	r2, [r3, #1]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	701a      	strb	r2, [r3, #0]
    *seconds = gTime.Seconds;
 800632e:	187b      	adds	r3, r7, r1
 8006330:	789a      	ldrb	r2, [r3, #2]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	701a      	strb	r2, [r3, #0]
    *weekday = gDate.WeekDay;
 8006336:	2110      	movs	r1, #16
 8006338:	187b      	adds	r3, r7, r1
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	701a      	strb	r2, [r3, #0]
    *day = gDate.Date;
 8006340:	187b      	adds	r3, r7, r1
 8006342:	789a      	ldrb	r2, [r3, #2]
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	701a      	strb	r2, [r3, #0]
    *month = gDate.Month;
 8006348:	187b      	adds	r3, r7, r1
 800634a:	785a      	ldrb	r2, [r3, #1]
 800634c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800634e:	701a      	strb	r2, [r3, #0]
    *year = gDate.Year;
 8006350:	187b      	adds	r3, r7, r1
 8006352:	78da      	ldrb	r2, [r3, #3]
 8006354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006356:	701a      	strb	r2, [r3, #0]
}
 8006358:	46c0      	nop			@ (mov r8, r8)
 800635a:	46bd      	mov	sp, r7
 800635c:	b00b      	add	sp, #44	@ 0x2c
 800635e:	bd90      	pop	{r4, r7, pc}
 8006360:	20000cb0 	.word	0x20000cb0
 8006364:	0801ffcc 	.word	0x0801ffcc
 8006368:	0801ffac 	.word	0x0801ffac
 800636c:	0801ffe8 	.word	0x0801ffe8

08006370 <InitClock>:

    // Instellen op Stop mode met low-power regulator
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
}

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006378:	4b07      	ldr	r3, [pc, #28]	@ (8006398 <InitClock+0x28>)
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
  RTC_SetTime(RealTime.Hours, RealTime.Minutes, RealTime.Seconds);
 800637e:	4b07      	ldr	r3, [pc, #28]	@ (800639c <InitClock+0x2c>)
 8006380:	7818      	ldrb	r0, [r3, #0]
 8006382:	4b06      	ldr	r3, [pc, #24]	@ (800639c <InitClock+0x2c>)
 8006384:	7859      	ldrb	r1, [r3, #1]
 8006386:	4b05      	ldr	r3, [pc, #20]	@ (800639c <InitClock+0x2c>)
 8006388:	789b      	ldrb	r3, [r3, #2]
 800638a:	001a      	movs	r2, r3
 800638c:	f7ff ff0e 	bl	80061ac <RTC_SetTime>
}
 8006390:	46c0      	nop			@ (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b002      	add	sp, #8
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000cb0 	.word	0x20000cb0
 800639c:	20000cac 	.word	0x20000cac

080063a0 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80063a6:	003b      	movs	r3, r7
 80063a8:	0018      	movs	r0, r3
 80063aa:	2308      	movs	r3, #8
 80063ac:	001a      	movs	r2, r3
 80063ae:	2100      	movs	r1, #0
 80063b0:	f016 f9dc 	bl	801c76c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80063b4:	4b30      	ldr	r3, [pc, #192]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063b6:	4a31      	ldr	r2, [pc, #196]	@ (800647c <MX_ADC_Init+0xdc>)
 80063b8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80063ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063bc:	2200      	movs	r2, #0
 80063be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80063c0:	4b2d      	ldr	r3, [pc, #180]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063c2:	22c0      	movs	r2, #192	@ 0xc0
 80063c4:	0612      	lsls	r2, r2, #24
 80063c6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80063c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80063ce:	4b2a      	ldr	r3, [pc, #168]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80063d4:	4b28      	ldr	r3, [pc, #160]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063d6:	2201      	movs	r2, #1
 80063d8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80063da:	4b27      	ldr	r3, [pc, #156]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063dc:	2200      	movs	r2, #0
 80063de:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80063e0:	4b25      	ldr	r3, [pc, #148]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063e2:	2220      	movs	r2, #32
 80063e4:	2100      	movs	r1, #0
 80063e6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80063e8:	4b23      	ldr	r3, [pc, #140]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063ea:	2221      	movs	r2, #33	@ 0x21
 80063ec:	2101      	movs	r1, #1
 80063ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80063f0:	4b21      	ldr	r3, [pc, #132]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80063f6:	4b20      	ldr	r3, [pc, #128]	@ (8006478 <MX_ADC_Init+0xd8>)
 80063f8:	22c2      	movs	r2, #194	@ 0xc2
 80063fa:	32ff      	adds	r2, #255	@ 0xff
 80063fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80063fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006478 <MX_ADC_Init+0xd8>)
 8006400:	222c      	movs	r2, #44	@ 0x2c
 8006402:	2100      	movs	r1, #0
 8006404:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006406:	4b1c      	ldr	r3, [pc, #112]	@ (8006478 <MX_ADC_Init+0xd8>)
 8006408:	2204      	movs	r2, #4
 800640a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800640c:	4b1a      	ldr	r3, [pc, #104]	@ (8006478 <MX_ADC_Init+0xd8>)
 800640e:	2200      	movs	r2, #0
 8006410:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006412:	4b19      	ldr	r3, [pc, #100]	@ (8006478 <MX_ADC_Init+0xd8>)
 8006414:	2200      	movs	r2, #0
 8006416:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006418:	4b17      	ldr	r3, [pc, #92]	@ (8006478 <MX_ADC_Init+0xd8>)
 800641a:	2200      	movs	r2, #0
 800641c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800641e:	4b16      	ldr	r3, [pc, #88]	@ (8006478 <MX_ADC_Init+0xd8>)
 8006420:	2200      	movs	r2, #0
 8006422:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006424:	4b14      	ldr	r3, [pc, #80]	@ (8006478 <MX_ADC_Init+0xd8>)
 8006426:	0018      	movs	r0, r3
 8006428:	f005 fdba 	bl	800bfa0 <HAL_ADC_Init>
 800642c:	1e03      	subs	r3, r0, #0
 800642e:	d001      	beq.n	8006434 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006430:	f001 f864 	bl	80074fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006434:	003b      	movs	r3, r7
 8006436:	4a12      	ldr	r2, [pc, #72]	@ (8006480 <MX_ADC_Init+0xe0>)
 8006438:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800643a:	003b      	movs	r3, r7
 800643c:	2280      	movs	r2, #128	@ 0x80
 800643e:	0152      	lsls	r2, r2, #5
 8006440:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8006442:	003a      	movs	r2, r7
 8006444:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <MX_ADC_Init+0xd8>)
 8006446:	0011      	movs	r1, r2
 8006448:	0018      	movs	r0, r3
 800644a:	f006 f819 	bl	800c480 <HAL_ADC_ConfigChannel>
 800644e:	1e03      	subs	r3, r0, #0
 8006450:	d001      	beq.n	8006456 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8006452:	f001 f853 	bl	80074fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006456:	003b      	movs	r3, r7
 8006458:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <MX_ADC_Init+0xe4>)
 800645a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800645c:	003a      	movs	r2, r7
 800645e:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <MX_ADC_Init+0xd8>)
 8006460:	0011      	movs	r1, r2
 8006462:	0018      	movs	r0, r3
 8006464:	f006 f80c 	bl	800c480 <HAL_ADC_ConfigChannel>
 8006468:	1e03      	subs	r3, r0, #0
 800646a:	d001      	beq.n	8006470 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 800646c:	f001 f846 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8006470:	46c0      	nop			@ (mov r8, r8)
 8006472:	46bd      	mov	sp, r7
 8006474:	b002      	add	sp, #8
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20000cb4 	.word	0x20000cb4
 800647c:	40012400 	.word	0x40012400
 8006480:	38004000 	.word	0x38004000
 8006484:	3c008000 	.word	0x3c008000

08006488 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b089      	sub	sp, #36	@ 0x24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006490:	240c      	movs	r4, #12
 8006492:	193b      	adds	r3, r7, r4
 8006494:	0018      	movs	r0, r3
 8006496:	2314      	movs	r3, #20
 8006498:	001a      	movs	r2, r3
 800649a:	2100      	movs	r1, #0
 800649c:	f016 f966 	bl	801c76c <memset>
  if(adcHandle->Instance==ADC1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a14      	ldr	r2, [pc, #80]	@ (80064f8 <HAL_ADC_MspInit+0x70>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d121      	bne.n	80064ee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80064aa:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <HAL_ADC_MspInit+0x74>)
 80064ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064ae:	4b13      	ldr	r3, [pc, #76]	@ (80064fc <HAL_ADC_MspInit+0x74>)
 80064b0:	2180      	movs	r1, #128	@ 0x80
 80064b2:	0089      	lsls	r1, r1, #2
 80064b4:	430a      	orrs	r2, r1
 80064b6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064b8:	4b10      	ldr	r3, [pc, #64]	@ (80064fc <HAL_ADC_MspInit+0x74>)
 80064ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064bc:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <HAL_ADC_MspInit+0x74>)
 80064be:	2104      	movs	r1, #4
 80064c0:	430a      	orrs	r2, r1
 80064c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80064c4:	4b0d      	ldr	r3, [pc, #52]	@ (80064fc <HAL_ADC_MspInit+0x74>)
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	2204      	movs	r2, #4
 80064ca:	4013      	ands	r3, r2
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 80064d0:	193b      	adds	r3, r7, r4
 80064d2:	2230      	movs	r2, #48	@ 0x30
 80064d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064d6:	193b      	adds	r3, r7, r4
 80064d8:	2203      	movs	r2, #3
 80064da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064dc:	193b      	adds	r3, r7, r4
 80064de:	2200      	movs	r2, #0
 80064e0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e2:	193b      	adds	r3, r7, r4
 80064e4:	4a06      	ldr	r2, [pc, #24]	@ (8006500 <HAL_ADC_MspInit+0x78>)
 80064e6:	0019      	movs	r1, r3
 80064e8:	0010      	movs	r0, r2
 80064ea:	f006 fdd1 	bl	800d090 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80064ee:	46c0      	nop			@ (mov r8, r8)
 80064f0:	46bd      	mov	sp, r7
 80064f2:	b009      	add	sp, #36	@ 0x24
 80064f4:	bd90      	pop	{r4, r7, pc}
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	40012400 	.word	0x40012400
 80064fc:	40021000 	.word	0x40021000
 8006500:	50000800 	.word	0x50000800

08006504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800650a:	4b10      	ldr	r3, [pc, #64]	@ (800654c <MX_DMA_Init+0x48>)
 800650c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800650e:	4b0f      	ldr	r3, [pc, #60]	@ (800654c <MX_DMA_Init+0x48>)
 8006510:	2101      	movs	r1, #1
 8006512:	430a      	orrs	r2, r1
 8006514:	631a      	str	r2, [r3, #48]	@ 0x30
 8006516:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <MX_DMA_Init+0x48>)
 8006518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651a:	2201      	movs	r2, #1
 800651c:	4013      	ands	r3, r2
 800651e:	607b      	str	r3, [r7, #4]
 8006520:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006522:	2200      	movs	r2, #0
 8006524:	2100      	movs	r1, #0
 8006526:	200a      	movs	r0, #10
 8006528:	f006 f964 	bl	800c7f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800652c:	200a      	movs	r0, #10
 800652e:	f006 f976 	bl	800c81e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006532:	2200      	movs	r2, #0
 8006534:	2103      	movs	r1, #3
 8006536:	200b      	movs	r0, #11
 8006538:	f006 f95c 	bl	800c7f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800653c:	200b      	movs	r0, #11
 800653e:	f006 f96e 	bl	800c81e <HAL_NVIC_EnableIRQ>

}
 8006542:	46c0      	nop			@ (mov r8, r8)
 8006544:	46bd      	mov	sp, r7
 8006546:	b002      	add	sp, #8
 8006548:	bd80      	pop	{r7, pc}
 800654a:	46c0      	nop			@ (mov r8, r8)
 800654c:	40021000 	.word	0x40021000

08006550 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006560:	d901      	bls.n	8006566 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006562:	237f      	movs	r3, #127	@ 0x7f
 8006564:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006566:	2017      	movs	r0, #23
 8006568:	183b      	adds	r3, r7, r0
 800656a:	490d      	ldr	r1, [pc, #52]	@ (80065a0 <accessLUT10log10+0x50>)
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	188a      	adds	r2, r1, r2
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006574:	0001      	movs	r1, r0
 8006576:	187b      	adds	r3, r7, r1
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2206      	movs	r2, #6
 800657c:	4113      	asrs	r3, r2
 800657e:	001a      	movs	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006584:	187b      	adds	r3, r7, r1
 8006586:	781a      	ldrb	r2, [r3, #0]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	2106      	movs	r1, #6
 800658e:	408b      	lsls	r3, r1
 8006590:	1ad2      	subs	r2, r2, r3
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
}
 8006596:	46c0      	nop			@ (mov r8, r8)
 8006598:	46bd      	mov	sp, r7
 800659a:	b006      	add	sp, #24
 800659c:	bd80      	pop	{r7, pc}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	080209b0 	.word	0x080209b0

080065a4 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 80065a4:	b5b0      	push	{r4, r5, r7, lr}
 80065a6:	b090      	sub	sp, #64	@ 0x40
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6138      	str	r0, [r7, #16]
 80065ac:	6179      	str	r1, [r7, #20]
 80065ae:	60fa      	str	r2, [r7, #12]
 80065b0:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 80065b2:	2308      	movs	r3, #8
 80065b4:	001a      	movs	r2, r3
 80065b6:	3a20      	subs	r2, #32
 80065b8:	2a00      	cmp	r2, #0
 80065ba:	db03      	blt.n	80065c4 <efficient10log10+0x20>
 80065bc:	2101      	movs	r1, #1
 80065be:	4091      	lsls	r1, r2
 80065c0:	000d      	movs	r5, r1
 80065c2:	e008      	b.n	80065d6 <efficient10log10+0x32>
 80065c4:	2220      	movs	r2, #32
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	2101      	movs	r1, #1
 80065ca:	40d1      	lsrs	r1, r2
 80065cc:	000a      	movs	r2, r1
 80065ce:	2100      	movs	r1, #0
 80065d0:	4099      	lsls	r1, r3
 80065d2:	000d      	movs	r5, r1
 80065d4:	4315      	orrs	r5, r2
 80065d6:	2201      	movs	r2, #1
 80065d8:	409a      	lsls	r2, r3
 80065da:	0014      	movs	r4, r2
 80065dc:	2201      	movs	r2, #1
 80065de:	4252      	negs	r2, r2
 80065e0:	17d3      	asrs	r3, r2, #31
 80065e2:	1912      	adds	r2, r2, r4
 80065e4:	416b      	adcs	r3, r5
 80065e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80065e8:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 80065ea:	2336      	movs	r3, #54	@ 0x36
 80065ec:	2208      	movs	r2, #8
 80065ee:	189b      	adds	r3, r3, r2
 80065f0:	19db      	adds	r3, r3, r7
 80065f2:	2200      	movs	r2, #0
 80065f4:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80065f6:	e017      	b.n	8006628 <efficient10log10+0x84>
    {
        P = P >> 1;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	07db      	lsls	r3, r3, #31
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	0852      	lsrs	r2, r2, #1
 8006600:	603a      	str	r2, [r7, #0]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	431a      	orrs	r2, r3
 8006606:	603a      	str	r2, [r7, #0]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	085b      	lsrs	r3, r3, #1
 800660c:	607b      	str	r3, [r7, #4]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	687c      	ldr	r4, [r7, #4]
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	617c      	str	r4, [r7, #20]
        bShift++;
 8006616:	2136      	movs	r1, #54	@ 0x36
 8006618:	2008      	movs	r0, #8
 800661a:	180b      	adds	r3, r1, r0
 800661c:	19db      	adds	r3, r3, r7
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	180b      	adds	r3, r1, r0
 8006622:	19db      	adds	r3, r3, r7
 8006624:	3201      	adds	r2, #1
 8006626:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662c:	429a      	cmp	r2, r3
 800662e:	d8e3      	bhi.n	80065f8 <efficient10log10+0x54>
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006634:	429a      	cmp	r2, r3
 8006636:	d103      	bne.n	8006640 <efficient10log10+0x9c>
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	429a      	cmp	r2, r3
 800663e:	d8db      	bhi.n	80065f8 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	2308      	movs	r3, #8
 8006644:	3b01      	subs	r3, #1
 8006646:	2101      	movs	r1, #1
 8006648:	4099      	lsls	r1, r3
 800664a:	000b      	movs	r3, r1
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8006658:	231c      	movs	r3, #28
 800665a:	2408      	movs	r4, #8
 800665c:	191b      	adds	r3, r3, r4
 800665e:	19da      	adds	r2, r3, r7
 8006660:	2320      	movs	r3, #32
 8006662:	191b      	adds	r3, r3, r4
 8006664:	19d9      	adds	r1, r3, r7
 8006666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006668:	0018      	movs	r0, r3
 800666a:	f7ff ff71 	bl	8006550 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 800666e:	2215      	movs	r2, #21
 8006670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006672:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8006674:	2036      	movs	r0, #54	@ 0x36
 8006676:	1902      	adds	r2, r0, r4
 8006678:	19d2      	adds	r2, r2, r7
 800667a:	8812      	ldrh	r2, [r2, #0]
 800667c:	2103      	movs	r1, #3
 800667e:	434a      	muls	r2, r1
 8006680:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006682:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006684:	0021      	movs	r1, r4
 8006686:	1843      	adds	r3, r0, r1
 8006688:	19db      	adds	r3, r3, r7
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	2201      	movs	r2, #1
 800668e:	4353      	muls	r3, r2
 8006690:	2203      	movs	r2, #3
 8006692:	4113      	asrs	r3, r2
 8006694:	001a      	movs	r2, r3
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800669a:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 800669c:	2314      	movs	r3, #20
 800669e:	185b      	adds	r3, r3, r1
 80066a0:	19da      	adds	r2, r3, r7
 80066a2:	2318      	movs	r3, #24
 80066a4:	185b      	adds	r3, r3, r1
 80066a6:	19db      	adds	r3, r3, r7
 80066a8:	0011      	movs	r1, r2
 80066aa:	0018      	movs	r0, r3
 80066ac:	f000 f80a 	bl	80066c4 <correctIntFracNumber>
    integerPart[0] = intPart;
 80066b0:	6a3a      	ldr	r2, [r7, #32]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	601a      	str	r2, [r3, #0]
}
 80066bc:	46c0      	nop			@ (mov r8, r8)
 80066be:	46bd      	mov	sp, r7
 80066c0:	b010      	add	sp, #64	@ 0x40
 80066c2:	bdb0      	pop	{r4, r5, r7, pc}

080066c4 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 80066ce:	e00a      	b.n	80066e6 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3b0a      	subs	r3, #10
 80066e0:	001a      	movs	r2, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b09      	cmp	r3, #9
 80066ec:	dcf0      	bgt.n	80066d0 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 80066ee:	e00a      	b.n	8006706 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	1e5a      	subs	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	330a      	adds	r3, #10
 8006700:	001a      	movs	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3309      	adds	r3, #9
 800670c:	dbf0      	blt.n	80066f0 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da0f      	bge.n	8006736 <correctIntFracNumber+0x72>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dd0b      	ble.n	8006736 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3b0a      	subs	r3, #10
 800672e:	001a      	movs	r2, r3
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006734:	e012      	b.n	800675c <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dd0e      	ble.n	800675c <correctIntFracNumber+0x98>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	da0a      	bge.n	800675c <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	1e5a      	subs	r2, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	330a      	adds	r3, #10
 8006756:	001a      	movs	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	601a      	str	r2, [r3, #0]
}
 800675c:	46c0      	nop			@ (mov r8, r8)
 800675e:	46bd      	mov	sp, r7
 8006760:	b002      	add	sp, #8
 8006762:	bd80      	pop	{r7, pc}

08006764 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <Gadget_Init+0x40>)
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	f001 faa3 	bl	8007cc0 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	0018      	movs	r0, r3
 8006782:	f000 ff15 	bl	80075b0 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	0018      	movs	r0, r3
 800678a:	f7fd f8ef 	bl	800396c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 800678e:	4a06      	ldr	r2, [pc, #24]	@ (80067a8 <Gadget_Init+0x44>)
 8006790:	4b06      	ldr	r3, [pc, #24]	@ (80067ac <Gadget_Init+0x48>)
 8006792:	0019      	movs	r1, r3
 8006794:	2003      	movs	r0, #3
 8006796:	f005 f823 	bl	800b7e0 <CreateLine>
}
 800679a:	46c0      	nop			@ (mov r8, r8)
 800679c:	46bd      	mov	sp, r7
 800679e:	b004      	add	sp, #16
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	46c0      	nop			@ (mov r8, r8)
 80067a4:	2000007c 	.word	0x2000007c
 80067a8:	08020004 	.word	0x08020004
 80067ac:	08020018 	.word	0x08020018

080067b0 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
  Meas_Test();
 80067b4:	f001 f834 	bl	8007820 <Meas_Test>
}
 80067b8:	46c0      	nop			@ (mov r8, r8)
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <UpkeepGadget>:

bool UpkeepGadget() {
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 80067c6:	f001 f9eb 	bl	8007ba0 <Meas_Upkeep>
 80067ca:	0003      	movs	r3, r0
 80067cc:	001a      	movs	r2, r3
 80067ce:	4b0f      	ldr	r3, [pc, #60]	@ (800680c <UpkeepGadget+0x4c>)
 80067d0:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 80067d2:	f001 f8cb 	bl	800796c <Mic_Upkeep>
 80067d6:	0003      	movs	r3, r0
 80067d8:	001a      	movs	r2, r3
 80067da:	4b0d      	ldr	r3, [pc, #52]	@ (8006810 <UpkeepGadget+0x50>)
 80067dc:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 80067de:	4b0b      	ldr	r3, [pc, #44]	@ (800680c <UpkeepGadget+0x4c>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d103      	bne.n	80067ee <UpkeepGadget+0x2e>
 80067e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006810 <UpkeepGadget+0x50>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d001      	beq.n	80067f2 <UpkeepGadget+0x32>
 80067ee:	2201      	movs	r2, #1
 80067f0:	e000      	b.n	80067f4 <UpkeepGadget+0x34>
 80067f2:	2200      	movs	r2, #0
 80067f4:	1dfb      	adds	r3, r7, #7
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	2101      	movs	r1, #1
 80067fc:	400a      	ands	r2, r1
 80067fe:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006800:	1dfb      	adds	r3, r7, #7
 8006802:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006804:	0018      	movs	r0, r3
 8006806:	46bd      	mov	sp, r7
 8006808:	b002      	add	sp, #8
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20000d10 	.word	0x20000d10
 8006810:	20000d11 	.word	0x20000d11

08006814 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	0011      	movs	r1, r2
 8006824:	0018      	movs	r0, r3
 8006826:	f002 fbc3 	bl	8008fb0 <SGP_Init>
}
 800682a:	46c0      	nop			@ (mov r8, r8)
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}

08006832 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006832:	b580      	push	{r7, lr}
 8006834:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006836:	f002 fbd5 	bl	8008fe4 <SGP_StartMeasurement>
}
 800683a:	46c0      	nop			@ (mov r8, r8)
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	0018      	movs	r0, r3
 800684c:	f002 fc3a 	bl	80090c4 <SGP_GetMeasurementValues>
 8006850:	0003      	movs	r3, r0
}
 8006852:	0018      	movs	r0, r3
 8006854:	46bd      	mov	sp, r7
 8006856:	b002      	add	sp, #8
 8006858:	bd80      	pop	{r7, pc}

0800685a <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800685a:	b580      	push	{r7, lr}
 800685c:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 800685e:	f002 fe47 	bl	80094f0 <SGP_DeviceConnected>
 8006862:	0003      	movs	r3, r0
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b08b      	sub	sp, #44	@ 0x2c
 8006870:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006872:	2414      	movs	r4, #20
 8006874:	193b      	adds	r3, r7, r4
 8006876:	0018      	movs	r0, r3
 8006878:	2314      	movs	r3, #20
 800687a:	001a      	movs	r2, r3
 800687c:	2100      	movs	r1, #0
 800687e:	f015 ff75 	bl	801c76c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006882:	4b7c      	ldr	r3, [pc, #496]	@ (8006a74 <MX_GPIO_Init+0x208>)
 8006884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006886:	4b7b      	ldr	r3, [pc, #492]	@ (8006a74 <MX_GPIO_Init+0x208>)
 8006888:	2104      	movs	r1, #4
 800688a:	430a      	orrs	r2, r1
 800688c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800688e:	4b79      	ldr	r3, [pc, #484]	@ (8006a74 <MX_GPIO_Init+0x208>)
 8006890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006892:	2204      	movs	r2, #4
 8006894:	4013      	ands	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800689a:	4b76      	ldr	r3, [pc, #472]	@ (8006a74 <MX_GPIO_Init+0x208>)
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	4b75      	ldr	r3, [pc, #468]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068a0:	2180      	movs	r1, #128	@ 0x80
 80068a2:	430a      	orrs	r2, r1
 80068a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068a6:	4b73      	ldr	r3, [pc, #460]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068aa:	2280      	movs	r2, #128	@ 0x80
 80068ac:	4013      	ands	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068b2:	4b70      	ldr	r3, [pc, #448]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b6:	4b6f      	ldr	r3, [pc, #444]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068b8:	2101      	movs	r1, #1
 80068ba:	430a      	orrs	r2, r1
 80068bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068be:	4b6d      	ldr	r3, [pc, #436]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c2:	2201      	movs	r2, #1
 80068c4:	4013      	ands	r3, r2
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80068ca:	4b6a      	ldr	r3, [pc, #424]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ce:	4b69      	ldr	r3, [pc, #420]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068d0:	2102      	movs	r1, #2
 80068d2:	430a      	orrs	r2, r1
 80068d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068d6:	4b67      	ldr	r3, [pc, #412]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	2202      	movs	r2, #2
 80068dc:	4013      	ands	r3, r2
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80068e2:	4b64      	ldr	r3, [pc, #400]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068e6:	4b63      	ldr	r3, [pc, #396]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068e8:	2108      	movs	r1, #8
 80068ea:	430a      	orrs	r2, r1
 80068ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80068ee:	4b61      	ldr	r3, [pc, #388]	@ (8006a74 <MX_GPIO_Init+0x208>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	2208      	movs	r2, #8
 80068f4:	4013      	ands	r3, r2
 80068f6:	603b      	str	r3, [r7, #0]
 80068f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80068fa:	4b5f      	ldr	r3, [pc, #380]	@ (8006a78 <MX_GPIO_Init+0x20c>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	2101      	movs	r1, #1
 8006900:	0018      	movs	r0, r3
 8006902:	f006 fd60 	bl	800d3c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006906:	4b5c      	ldr	r3, [pc, #368]	@ (8006a78 <MX_GPIO_Init+0x20c>)
 8006908:	2200      	movs	r2, #0
 800690a:	2102      	movs	r1, #2
 800690c:	0018      	movs	r0, r3
 800690e:	f006 fd5a 	bl	800d3c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006912:	495a      	ldr	r1, [pc, #360]	@ (8006a7c <MX_GPIO_Init+0x210>)
 8006914:	4b5a      	ldr	r3, [pc, #360]	@ (8006a80 <MX_GPIO_Init+0x214>)
 8006916:	2201      	movs	r2, #1
 8006918:	0018      	movs	r0, r3
 800691a:	f006 fd54 	bl	800d3c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800691e:	2380      	movs	r3, #128	@ 0x80
 8006920:	011b      	lsls	r3, r3, #4
 8006922:	4858      	ldr	r0, [pc, #352]	@ (8006a84 <MX_GPIO_Init+0x218>)
 8006924:	2201      	movs	r2, #1
 8006926:	0019      	movs	r1, r3
 8006928:	f006 fd4d 	bl	800d3c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 800692c:	2380      	movs	r3, #128	@ 0x80
 800692e:	015b      	lsls	r3, r3, #5
 8006930:	4854      	ldr	r0, [pc, #336]	@ (8006a84 <MX_GPIO_Init+0x218>)
 8006932:	2200      	movs	r2, #0
 8006934:	0019      	movs	r1, r3
 8006936:	f006 fd46 	bl	800d3c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 800693a:	193b      	adds	r3, r7, r4
 800693c:	4a52      	ldr	r2, [pc, #328]	@ (8006a88 <MX_GPIO_Init+0x21c>)
 800693e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006940:	193b      	adds	r3, r7, r4
 8006942:	2203      	movs	r2, #3
 8006944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006946:	193b      	adds	r3, r7, r4
 8006948:	2200      	movs	r2, #0
 800694a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800694c:	193b      	adds	r3, r7, r4
 800694e:	4a4d      	ldr	r2, [pc, #308]	@ (8006a84 <MX_GPIO_Init+0x218>)
 8006950:	0019      	movs	r1, r3
 8006952:	0010      	movs	r0, r2
 8006954:	f006 fb9c 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006958:	193b      	adds	r3, r7, r4
 800695a:	2203      	movs	r2, #3
 800695c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800695e:	193b      	adds	r3, r7, r4
 8006960:	2201      	movs	r2, #1
 8006962:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006964:	193b      	adds	r3, r7, r4
 8006966:	2200      	movs	r2, #0
 8006968:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800696a:	193b      	adds	r3, r7, r4
 800696c:	2200      	movs	r2, #0
 800696e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006970:	193b      	adds	r3, r7, r4
 8006972:	4a41      	ldr	r2, [pc, #260]	@ (8006a78 <MX_GPIO_Init+0x20c>)
 8006974:	0019      	movs	r1, r3
 8006976:	0010      	movs	r0, r2
 8006978:	f006 fb8a 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800697c:	193b      	adds	r3, r7, r4
 800697e:	2270      	movs	r2, #112	@ 0x70
 8006980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006982:	193b      	adds	r3, r7, r4
 8006984:	2203      	movs	r2, #3
 8006986:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006988:	193b      	adds	r3, r7, r4
 800698a:	2200      	movs	r2, #0
 800698c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800698e:	193a      	adds	r2, r7, r4
 8006990:	23a0      	movs	r3, #160	@ 0xa0
 8006992:	05db      	lsls	r3, r3, #23
 8006994:	0011      	movs	r1, r2
 8006996:	0018      	movs	r0, r3
 8006998:	f006 fb7a 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 800699c:	193b      	adds	r3, r7, r4
 800699e:	4a3b      	ldr	r2, [pc, #236]	@ (8006a8c <MX_GPIO_Init+0x220>)
 80069a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069a2:	193b      	adds	r3, r7, r4
 80069a4:	2200      	movs	r2, #0
 80069a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a8:	193b      	adds	r3, r7, r4
 80069aa:	2200      	movs	r2, #0
 80069ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069ae:	193a      	adds	r2, r7, r4
 80069b0:	23a0      	movs	r3, #160	@ 0xa0
 80069b2:	05db      	lsls	r3, r3, #23
 80069b4:	0011      	movs	r1, r2
 80069b6:	0018      	movs	r0, r3
 80069b8:	f006 fb6a 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80069bc:	193b      	adds	r3, r7, r4
 80069be:	4a2f      	ldr	r2, [pc, #188]	@ (8006a7c <MX_GPIO_Init+0x210>)
 80069c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069c2:	193b      	adds	r3, r7, r4
 80069c4:	2201      	movs	r2, #1
 80069c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c8:	193b      	adds	r3, r7, r4
 80069ca:	2200      	movs	r2, #0
 80069cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ce:	193b      	adds	r3, r7, r4
 80069d0:	2200      	movs	r2, #0
 80069d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069d4:	193b      	adds	r3, r7, r4
 80069d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006a80 <MX_GPIO_Init+0x214>)
 80069d8:	0019      	movs	r1, r3
 80069da:	0010      	movs	r0, r2
 80069dc:	f006 fb58 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 80069e0:	193b      	adds	r3, r7, r4
 80069e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a90 <MX_GPIO_Init+0x224>)
 80069e4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069e6:	193b      	adds	r3, r7, r4
 80069e8:	2203      	movs	r2, #3
 80069ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ec:	193b      	adds	r3, r7, r4
 80069ee:	2200      	movs	r2, #0
 80069f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069f2:	193b      	adds	r3, r7, r4
 80069f4:	4a22      	ldr	r2, [pc, #136]	@ (8006a80 <MX_GPIO_Init+0x214>)
 80069f6:	0019      	movs	r1, r3
 80069f8:	0010      	movs	r0, r2
 80069fa:	f006 fb49 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 80069fe:	0021      	movs	r1, r4
 8006a00:	187b      	adds	r3, r7, r1
 8006a02:	2280      	movs	r2, #128	@ 0x80
 8006a04:	0092      	lsls	r2, r2, #2
 8006a06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a08:	000c      	movs	r4, r1
 8006a0a:	193b      	adds	r3, r7, r4
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a10:	193b      	adds	r3, r7, r4
 8006a12:	2200      	movs	r2, #0
 8006a14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006a16:	193b      	adds	r3, r7, r4
 8006a18:	4a1a      	ldr	r2, [pc, #104]	@ (8006a84 <MX_GPIO_Init+0x218>)
 8006a1a:	0019      	movs	r1, r3
 8006a1c:	0010      	movs	r0, r2
 8006a1e:	f006 fb37 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006a22:	0021      	movs	r1, r4
 8006a24:	187b      	adds	r3, r7, r1
 8006a26:	22c0      	movs	r2, #192	@ 0xc0
 8006a28:	0152      	lsls	r2, r2, #5
 8006a2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a2c:	000c      	movs	r4, r1
 8006a2e:	193b      	adds	r3, r7, r4
 8006a30:	2201      	movs	r2, #1
 8006a32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a34:	193b      	adds	r3, r7, r4
 8006a36:	2200      	movs	r2, #0
 8006a38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a3a:	193b      	adds	r3, r7, r4
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a40:	193b      	adds	r3, r7, r4
 8006a42:	4a10      	ldr	r2, [pc, #64]	@ (8006a84 <MX_GPIO_Init+0x218>)
 8006a44:	0019      	movs	r1, r3
 8006a46:	0010      	movs	r0, r2
 8006a48:	f006 fb22 	bl	800d090 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006a4c:	0021      	movs	r1, r4
 8006a4e:	187b      	adds	r3, r7, r1
 8006a50:	2204      	movs	r2, #4
 8006a52:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a54:	187b      	adds	r3, r7, r1
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a5a:	187b      	adds	r3, r7, r1
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006a60:	187b      	adds	r3, r7, r1
 8006a62:	4a0c      	ldr	r2, [pc, #48]	@ (8006a94 <MX_GPIO_Init+0x228>)
 8006a64:	0019      	movs	r1, r3
 8006a66:	0010      	movs	r0, r2
 8006a68:	f006 fb12 	bl	800d090 <HAL_GPIO_Init>

}
 8006a6c:	46c0      	nop			@ (mov r8, r8)
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	b00b      	add	sp, #44	@ 0x2c
 8006a72:	bd90      	pop	{r4, r7, pc}
 8006a74:	40021000 	.word	0x40021000
 8006a78:	50001c00 	.word	0x50001c00
 8006a7c:	00000301 	.word	0x00000301
 8006a80:	50000400 	.word	0x50000400
 8006a84:	50000800 	.word	0x50000800
 8006a88:	0000200c 	.word	0x0000200c
 8006a8c:	00008180 	.word	0x00008180
 8006a90:	0000403e 	.word	0x0000403e
 8006a94:	50000c00 	.word	0x50000c00

08006a98 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f00c fa74 	bl	8012f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2108      	movs	r1, #8
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f00c fa6f 	bl	8012f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	210c      	movs	r1, #12
 8006aba:	0018      	movs	r0, r3
 8006abc:	f00c fa6a 	bl	8012f94 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006ac0:	2380      	movs	r3, #128	@ 0x80
 8006ac2:	05db      	lsls	r3, r3, #23
 8006ac4:	22fa      	movs	r2, #250	@ 0xfa
 8006ac6:	0112      	lsls	r2, r2, #4
 8006ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006aca:	2380      	movs	r3, #128	@ 0x80
 8006acc:	05db      	lsls	r3, r3, #23
 8006ace:	22fa      	movs	r2, #250	@ 0xfa
 8006ad0:	0112      	lsls	r2, r2, #4
 8006ad2:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006ad4:	2380      	movs	r3, #128	@ 0x80
 8006ad6:	05db      	lsls	r3, r3, #23
 8006ad8:	22fa      	movs	r2, #250	@ 0xfa
 8006ada:	0112      	lsls	r2, r2, #4
 8006adc:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006ade:	2380      	movs	r3, #128	@ 0x80
 8006ae0:	05db      	lsls	r3, r3, #23
 8006ae2:	22fa      	movs	r2, #250	@ 0xfa
 8006ae4:	0112      	lsls	r2, r2, #4
 8006ae6:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	2100      	movs	r1, #0
 8006aec:	0018      	movs	r0, r3
 8006aee:	f00c fa51 	bl	8012f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2104      	movs	r1, #4
 8006af6:	0018      	movs	r0, r3
 8006af8:	f00c fa4c 	bl	8012f94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2108      	movs	r1, #8
 8006b00:	0018      	movs	r0, r3
 8006b02:	f00c fa47 	bl	8012f94 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006b06:	4b0a      	ldr	r3, [pc, #40]	@ (8006b30 <GPIO_InitPWMLEDs+0x98>)
 8006b08:	22fa      	movs	r2, #250	@ 0xfa
 8006b0a:	0112      	lsls	r2, r2, #4
 8006b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006b0e:	4b08      	ldr	r3, [pc, #32]	@ (8006b30 <GPIO_InitPWMLEDs+0x98>)
 8006b10:	22fa      	movs	r2, #250	@ 0xfa
 8006b12:	0112      	lsls	r2, r2, #4
 8006b14:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006b16:	4b06      	ldr	r3, [pc, #24]	@ (8006b30 <GPIO_InitPWMLEDs+0x98>)
 8006b18:	22fa      	movs	r2, #250	@ 0xfa
 8006b1a:	0112      	lsls	r2, r2, #4
 8006b1c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006b1e:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <GPIO_InitPWMLEDs+0x98>)
 8006b20:	22fa      	movs	r2, #250	@ 0xfa
 8006b22:	0112      	lsls	r2, r2, #4
 8006b24:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006b26:	46c0      	nop			@ (mov r8, r8)
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	b002      	add	sp, #8
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	46c0      	nop			@ (mov r8, r8)
 8006b30:	40000400 	.word	0x40000400

08006b34 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006b3e:	683a      	ldr	r2, [r7, #0]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	0011      	movs	r1, r2
 8006b44:	0018      	movs	r0, r3
 8006b46:	f004 ffa3 	bl	800ba90 <HIDS_Init>
}
 8006b4a:	46c0      	nop			@ (mov r8, r8)
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	b002      	add	sp, #8
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006b52:	b580      	push	{r7, lr}
 8006b54:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006b56:	f004 ffbd 	bl	800bad4 <HIDS_StartMeasurement>
}
 8006b5a:	46c0      	nop			@ (mov r8, r8)
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	0011      	movs	r1, r2
 8006b70:	0018      	movs	r0, r3
 8006b72:	f005 f895 	bl	800bca0 <HIDS_GetMeasurementValues>
 8006b76:	0003      	movs	r3, r0
}
 8006b78:	0018      	movs	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	b002      	add	sp, #8
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006b84:	f005 f830 	bl	800bbe8 <HIDS_DeviceConnected>
 8006b88:	0003      	movs	r3, r0
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006b94:	4b1b      	ldr	r3, [pc, #108]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006b96:	4a1c      	ldr	r2, [pc, #112]	@ (8006c08 <MX_I2C1_Init+0x78>)
 8006b98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c0c <MX_I2C1_Init+0x7c>)
 8006b9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006ba0:	4b18      	ldr	r3, [pc, #96]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006ba6:	4b17      	ldr	r3, [pc, #92]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006bac:	4b15      	ldr	r3, [pc, #84]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006bb2:	4b14      	ldr	r3, [pc, #80]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006bb8:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006bbe:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006bca:	4b0e      	ldr	r3, [pc, #56]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bcc:	0018      	movs	r0, r3
 8006bce:	f006 fc17 	bl	800d400 <HAL_I2C_Init>
 8006bd2:	1e03      	subs	r3, r0, #0
 8006bd4:	d001      	beq.n	8006bda <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006bd6:	f000 fc91 	bl	80074fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006bda:	4b0a      	ldr	r3, [pc, #40]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bdc:	2100      	movs	r1, #0
 8006bde:	0018      	movs	r0, r3
 8006be0:	f008 fb86 	bl	800f2f0 <HAL_I2CEx_ConfigAnalogFilter>
 8006be4:	1e03      	subs	r3, r0, #0
 8006be6:	d001      	beq.n	8006bec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006be8:	f000 fc88 	bl	80074fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <MX_I2C1_Init+0x74>)
 8006bee:	2100      	movs	r1, #0
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f008 fbc9 	bl	800f388 <HAL_I2CEx_ConfigDigitalFilter>
 8006bf6:	1e03      	subs	r3, r0, #0
 8006bf8:	d001      	beq.n	8006bfe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006bfa:	f000 fc7f 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000d14 	.word	0x20000d14
 8006c08:	40005400 	.word	0x40005400
 8006c0c:	00503d58 	.word	0x00503d58

08006c10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006c14:	4b1b      	ldr	r3, [pc, #108]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c16:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <MX_I2C2_Init+0x78>)
 8006c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c8c <MX_I2C2_Init+0x7c>)
 8006c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006c20:	4b18      	ldr	r3, [pc, #96]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c26:	4b17      	ldr	r3, [pc, #92]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c2c:	4b15      	ldr	r3, [pc, #84]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006c32:	4b14      	ldr	r3, [pc, #80]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006c38:	4b12      	ldr	r3, [pc, #72]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c3e:	4b11      	ldr	r3, [pc, #68]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c44:	4b0f      	ldr	r3, [pc, #60]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f006 fbd7 	bl	800d400 <HAL_I2C_Init>
 8006c52:	1e03      	subs	r3, r0, #0
 8006c54:	d001      	beq.n	8006c5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006c56:	f000 fc51 	bl	80074fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	0018      	movs	r0, r3
 8006c60:	f008 fb46 	bl	800f2f0 <HAL_I2CEx_ConfigAnalogFilter>
 8006c64:	1e03      	subs	r3, r0, #0
 8006c66:	d001      	beq.n	8006c6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006c68:	f000 fc48 	bl	80074fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006c6c:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <MX_I2C2_Init+0x74>)
 8006c6e:	2100      	movs	r1, #0
 8006c70:	0018      	movs	r0, r3
 8006c72:	f008 fb89 	bl	800f388 <HAL_I2CEx_ConfigDigitalFilter>
 8006c76:	1e03      	subs	r3, r0, #0
 8006c78:	d001      	beq.n	8006c7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006c7a:	f000 fc3f 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000d68 	.word	0x20000d68
 8006c88:	40005800 	.word	0x40005800
 8006c8c:	00503d58 	.word	0x00503d58

08006c90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006c90:	b590      	push	{r4, r7, lr}
 8006c92:	b08b      	sub	sp, #44	@ 0x2c
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c98:	2414      	movs	r4, #20
 8006c9a:	193b      	adds	r3, r7, r4
 8006c9c:	0018      	movs	r0, r3
 8006c9e:	2314      	movs	r3, #20
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	f015 fd62 	bl	801c76c <memset>
  if(i2cHandle->Instance==I2C1)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a5d      	ldr	r2, [pc, #372]	@ (8006e24 <HAL_I2C_MspInit+0x194>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d000      	beq.n	8006cb4 <HAL_I2C_MspInit+0x24>
 8006cb2:	e083      	b.n	8006dbc <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006cb4:	4b5c      	ldr	r3, [pc, #368]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006cb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb8:	4b5b      	ldr	r3, [pc, #364]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006cba:	2102      	movs	r1, #2
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006cc0:	4b59      	ldr	r3, [pc, #356]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ccc:	0021      	movs	r1, r4
 8006cce:	187b      	adds	r3, r7, r1
 8006cd0:	22c0      	movs	r2, #192	@ 0xc0
 8006cd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006cd4:	187b      	adds	r3, r7, r1
 8006cd6:	2212      	movs	r2, #18
 8006cd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cda:	187b      	adds	r3, r7, r1
 8006cdc:	2200      	movs	r2, #0
 8006cde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006ce6:	187b      	adds	r3, r7, r1
 8006ce8:	2201      	movs	r2, #1
 8006cea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cec:	187b      	adds	r3, r7, r1
 8006cee:	4a4f      	ldr	r2, [pc, #316]	@ (8006e2c <HAL_I2C_MspInit+0x19c>)
 8006cf0:	0019      	movs	r1, r3
 8006cf2:	0010      	movs	r0, r2
 8006cf4:	f006 f9cc 	bl	800d090 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006cf8:	4b4b      	ldr	r3, [pc, #300]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cfc:	4b4a      	ldr	r3, [pc, #296]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006cfe:	2180      	movs	r1, #128	@ 0x80
 8006d00:	0389      	lsls	r1, r1, #14
 8006d02:	430a      	orrs	r2, r1
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006d06:	4b4a      	ldr	r3, [pc, #296]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d08:	4a4a      	ldr	r2, [pc, #296]	@ (8006e34 <HAL_I2C_MspInit+0x1a4>)
 8006d0a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006d0c:	4b48      	ldr	r3, [pc, #288]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d0e:	2206      	movs	r2, #6
 8006d10:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d12:	4b47      	ldr	r3, [pc, #284]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d18:	4b45      	ldr	r3, [pc, #276]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d1e:	4b44      	ldr	r3, [pc, #272]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d20:	2280      	movs	r2, #128	@ 0x80
 8006d22:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d24:	4b42      	ldr	r3, [pc, #264]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d2a:	4b41      	ldr	r3, [pc, #260]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006d30:	4b3f      	ldr	r3, [pc, #252]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006d36:	4b3e      	ldr	r3, [pc, #248]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f005 fd8a 	bl	800c858 <HAL_DMA_Init>
 8006d44:	1e03      	subs	r3, r0, #0
 8006d46:	d001      	beq.n	8006d4c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006d48:	f000 fbd8 	bl	80074fc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a38      	ldr	r2, [pc, #224]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d52:	4b37      	ldr	r3, [pc, #220]	@ (8006e30 <HAL_I2C_MspInit+0x1a0>)
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006d58:	4b37      	ldr	r3, [pc, #220]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d5a:	4a38      	ldr	r2, [pc, #224]	@ (8006e3c <HAL_I2C_MspInit+0x1ac>)
 8006d5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006d5e:	4b36      	ldr	r3, [pc, #216]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d60:	2206      	movs	r2, #6
 8006d62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d64:	4b34      	ldr	r3, [pc, #208]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d66:	2210      	movs	r2, #16
 8006d68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d6a:	4b33      	ldr	r3, [pc, #204]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d70:	4b31      	ldr	r3, [pc, #196]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d72:	2280      	movs	r2, #128	@ 0x80
 8006d74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d76:	4b30      	ldr	r3, [pc, #192]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006d82:	4b2d      	ldr	r3, [pc, #180]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d88:	4b2b      	ldr	r3, [pc, #172]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006d90:	0018      	movs	r0, r3
 8006d92:	f005 fd61 	bl	800c858 <HAL_DMA_Init>
 8006d96:	1e03      	subs	r3, r0, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006d9a:	f000 fbaf 	bl	80074fc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a25      	ldr	r2, [pc, #148]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006da2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006da4:	4b24      	ldr	r3, [pc, #144]	@ (8006e38 <HAL_I2C_MspInit+0x1a8>)
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2100      	movs	r1, #0
 8006dae:	2017      	movs	r0, #23
 8006db0:	f005 fd20 	bl	800c7f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006db4:	2017      	movs	r0, #23
 8006db6:	f005 fd32 	bl	800c81e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006dba:	e02e      	b.n	8006e1a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e40 <HAL_I2C_MspInit+0x1b0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d129      	bne.n	8006e1a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dc6:	4b18      	ldr	r3, [pc, #96]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dca:	4b17      	ldr	r3, [pc, #92]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006dcc:	2102      	movs	r1, #2
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006dd2:	4b15      	ldr	r3, [pc, #84]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006dde:	2114      	movs	r1, #20
 8006de0:	187b      	adds	r3, r7, r1
 8006de2:	22c0      	movs	r2, #192	@ 0xc0
 8006de4:	0112      	lsls	r2, r2, #4
 8006de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006de8:	187b      	adds	r3, r7, r1
 8006dea:	2212      	movs	r2, #18
 8006dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dee:	187b      	adds	r3, r7, r1
 8006df0:	2200      	movs	r2, #0
 8006df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006df4:	187b      	adds	r3, r7, r1
 8006df6:	2203      	movs	r2, #3
 8006df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006dfa:	187b      	adds	r3, r7, r1
 8006dfc:	2206      	movs	r2, #6
 8006dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e00:	187b      	adds	r3, r7, r1
 8006e02:	4a0a      	ldr	r2, [pc, #40]	@ (8006e2c <HAL_I2C_MspInit+0x19c>)
 8006e04:	0019      	movs	r1, r3
 8006e06:	0010      	movs	r0, r2
 8006e08:	f006 f942 	bl	800d090 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e0c:	4b06      	ldr	r3, [pc, #24]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e10:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <HAL_I2C_MspInit+0x198>)
 8006e12:	2180      	movs	r1, #128	@ 0x80
 8006e14:	03c9      	lsls	r1, r1, #15
 8006e16:	430a      	orrs	r2, r1
 8006e18:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006e1a:	46c0      	nop			@ (mov r8, r8)
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	b00b      	add	sp, #44	@ 0x2c
 8006e20:	bd90      	pop	{r4, r7, pc}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	40005400 	.word	0x40005400
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	50000400 	.word	0x50000400
 8006e30:	20000dbc 	.word	0x20000dbc
 8006e34:	40020030 	.word	0x40020030
 8006e38:	20000e04 	.word	0x20000e04
 8006e3c:	4002001c 	.word	0x4002001c
 8006e40:	40005800 	.word	0x40005800

08006e44 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006e48:	4b10      	ldr	r3, [pc, #64]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e4a:	4a11      	ldr	r2, [pc, #68]	@ (8006e90 <MX_I2S2_Init+0x4c>)
 8006e4c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8006e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e50:	22c0      	movs	r2, #192	@ 0xc0
 8006e52:	0092      	lsls	r2, r2, #2
 8006e54:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8006e56:	4b0d      	ldr	r3, [pc, #52]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8006e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e5e:	2203      	movs	r2, #3
 8006e60:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006e62:	4b0a      	ldr	r3, [pc, #40]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8006e68:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e6a:	22fa      	movs	r2, #250	@ 0xfa
 8006e6c:	0192      	lsls	r2, r2, #6
 8006e6e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8006e70:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006e76:	4b05      	ldr	r3, [pc, #20]	@ (8006e8c <MX_I2S2_Init+0x48>)
 8006e78:	0018      	movs	r0, r3
 8006e7a:	f008 fad1 	bl	800f420 <HAL_I2S_Init>
 8006e7e:	1e03      	subs	r3, r0, #0
 8006e80:	d001      	beq.n	8006e86 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8006e82:	f000 fb3b 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006e86:	46c0      	nop			@ (mov r8, r8)
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000e4c 	.word	0x20000e4c
 8006e90:	40003800 	.word	0x40003800

08006e94 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006e94:	b590      	push	{r4, r7, lr}
 8006e96:	b089      	sub	sp, #36	@ 0x24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e9c:	240c      	movs	r4, #12
 8006e9e:	193b      	adds	r3, r7, r4
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	2314      	movs	r3, #20
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	2100      	movs	r1, #0
 8006ea8:	f015 fc60 	bl	801c76c <memset>
  if(i2sHandle->Instance==SPI2)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f68 <HAL_I2S_MspInit+0xd4>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d154      	bne.n	8006f60 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f6c <HAL_I2S_MspInit+0xd8>)
 8006eb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006eba:	4b2c      	ldr	r3, [pc, #176]	@ (8006f6c <HAL_I2S_MspInit+0xd8>)
 8006ebc:	2180      	movs	r1, #128	@ 0x80
 8006ebe:	01c9      	lsls	r1, r1, #7
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ec4:	4b29      	ldr	r3, [pc, #164]	@ (8006f6c <HAL_I2S_MspInit+0xd8>)
 8006ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ec8:	4b28      	ldr	r3, [pc, #160]	@ (8006f6c <HAL_I2S_MspInit+0xd8>)
 8006eca:	2102      	movs	r1, #2
 8006ecc:	430a      	orrs	r2, r1
 8006ece:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006ed0:	4b26      	ldr	r3, [pc, #152]	@ (8006f6c <HAL_I2S_MspInit+0xd8>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006edc:	193b      	adds	r3, r7, r4
 8006ede:	22b0      	movs	r2, #176	@ 0xb0
 8006ee0:	0212      	lsls	r2, r2, #8
 8006ee2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ee4:	0021      	movs	r1, r4
 8006ee6:	187b      	adds	r3, r7, r1
 8006ee8:	2202      	movs	r2, #2
 8006eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eec:	187b      	adds	r3, r7, r1
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef2:	187b      	adds	r3, r7, r1
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006ef8:	187b      	adds	r3, r7, r1
 8006efa:	2200      	movs	r2, #0
 8006efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006efe:	187b      	adds	r3, r7, r1
 8006f00:	4a1b      	ldr	r2, [pc, #108]	@ (8006f70 <HAL_I2S_MspInit+0xdc>)
 8006f02:	0019      	movs	r1, r3
 8006f04:	0010      	movs	r0, r2
 8006f06:	f006 f8c3 	bl	800d090 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8006f78 <HAL_I2S_MspInit+0xe4>)
 8006f0e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006f10:	4b18      	ldr	r3, [pc, #96]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f12:	2202      	movs	r2, #2
 8006f14:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f16:	4b17      	ldr	r3, [pc, #92]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f18:	2200      	movs	r2, #0
 8006f1a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f1c:	4b15      	ldr	r3, [pc, #84]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f22:	4b14      	ldr	r3, [pc, #80]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f24:	2280      	movs	r2, #128	@ 0x80
 8006f26:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f28:	4b12      	ldr	r3, [pc, #72]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f2a:	2280      	movs	r2, #128	@ 0x80
 8006f2c:	0052      	lsls	r2, r2, #1
 8006f2e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f30:	4b10      	ldr	r3, [pc, #64]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f32:	2280      	movs	r2, #128	@ 0x80
 8006f34:	00d2      	lsls	r2, r2, #3
 8006f36:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006f38:	4b0e      	ldr	r3, [pc, #56]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006f44:	4b0b      	ldr	r3, [pc, #44]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f46:	0018      	movs	r0, r3
 8006f48:	f005 fc86 	bl	800c858 <HAL_DMA_Init>
 8006f4c:	1e03      	subs	r3, r0, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006f50:	f000 fad4 	bl	80074fc <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a07      	ldr	r2, [pc, #28]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f58:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f5a:	4b06      	ldr	r3, [pc, #24]	@ (8006f74 <HAL_I2S_MspInit+0xe0>)
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006f60:	46c0      	nop			@ (mov r8, r8)
 8006f62:	46bd      	mov	sp, r7
 8006f64:	b009      	add	sp, #36	@ 0x24
 8006f66:	bd90      	pop	{r4, r7, pc}
 8006f68:	40003800 	.word	0x40003800
 8006f6c:	40021000 	.word	0x40021000
 8006f70:	50000400 	.word	0x50000400
 8006f74:	20000e88 	.word	0x20000e88
 8006f78:	40020044 	.word	0x40020044

08006f7c <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  testDone = true;
 8006f80:	4b1e      	ldr	r3, [pc, #120]	@ (8006ffc <SetTestDone+0x80>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8006f86:	23fa      	movs	r3, #250	@ 0xfa
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f004 ffc6 	bl	800bf1c <HAL_Delay>
  SetDBLED(false, false, true);
 8006f90:	2201      	movs	r2, #1
 8006f92:	2100      	movs	r1, #0
 8006f94:	2000      	movs	r0, #0
 8006f96:	f003 fcb9 	bl	800a90c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 8006f9a:	4a19      	ldr	r2, [pc, #100]	@ (8007000 <SetTestDone+0x84>)
 8006f9c:	23fa      	movs	r3, #250	@ 0xfa
 8006f9e:	0119      	lsls	r1, r3, #4
 8006fa0:	23fa      	movs	r3, #250	@ 0xfa
 8006fa2:	011b      	lsls	r3, r3, #4
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f003 fc7d 	bl	800a8a4 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 8006faa:	4a15      	ldr	r2, [pc, #84]	@ (8007000 <SetTestDone+0x84>)
 8006fac:	23fa      	movs	r3, #250	@ 0xfa
 8006fae:	0119      	lsls	r1, r3, #4
 8006fb0:	23fa      	movs	r3, #250	@ 0xfa
 8006fb2:	011b      	lsls	r3, r3, #4
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f003 fcf3 	bl	800a9a0 <SetVocLED>
  HAL_Delay(1000);
 8006fba:	23fa      	movs	r3, #250	@ 0xfa
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f004 ffac 	bl	800bf1c <HAL_Delay>
  SetDBLED(false, false, false);
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	2000      	movs	r0, #0
 8006fca:	f003 fc9f 	bl	800a90c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8006fce:	23fa      	movs	r3, #250	@ 0xfa
 8006fd0:	011a      	lsls	r2, r3, #4
 8006fd2:	23fa      	movs	r3, #250	@ 0xfa
 8006fd4:	0119      	lsls	r1, r3, #4
 8006fd6:	23fa      	movs	r3, #250	@ 0xfa
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	0018      	movs	r0, r3
 8006fdc:	f003 fc62 	bl	800a8a4 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8006fe0:	23fa      	movs	r3, #250	@ 0xfa
 8006fe2:	011a      	lsls	r2, r3, #4
 8006fe4:	23fa      	movs	r3, #250	@ 0xfa
 8006fe6:	0119      	lsls	r1, r3, #4
 8006fe8:	23fa      	movs	r3, #250	@ 0xfa
 8006fea:	011b      	lsls	r3, r3, #4
 8006fec:	0018      	movs	r0, r3
 8006fee:	f003 fcd7 	bl	800a9a0 <SetVocLED>
  InitDone();
 8006ff2:	f003 fc01 	bl	800a7f8 <InitDone>
}
 8006ff6:	46c0      	nop			@ (mov r8, r8)
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000ed0 	.word	0x20000ed0
 8007000:	00000bb8 	.word	0x00000bb8

08007004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007004:	b590      	push	{r4, r7, lr}
 8007006:	b085      	sub	sp, #20
 8007008:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800700a:	f004 ff17 	bl	800be3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800700e:	f000 f95d 	bl	80072cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007012:	f7ff fc2b 	bl	800686c <MX_GPIO_Init>
  MX_DMA_Init();
 8007016:	f7ff fa75 	bl	8006504 <MX_DMA_Init>
  MX_I2C1_Init();
 800701a:	f7ff fdb9 	bl	8006b90 <MX_I2C1_Init>
  MX_I2S2_Init();
 800701e:	f7ff ff11 	bl	8006e44 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007022:	f004 f9eb 	bl	800b3fc <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007026:	f7ff fdf3 	bl	8006c10 <MX_I2C2_Init>
  MX_TIM2_Init();
 800702a:	f003 ffdf 	bl	800afec <MX_TIM2_Init>
  MX_TIM3_Init();
 800702e:	f004 f851 	bl	800b0d4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007032:	f004 fa17 	bl	800b464 <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007036:	f7ff f9b3 	bl	80063a0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800703a:	f012 f8a5 	bl	8019188 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800703e:	f001 f80b 	bl	8008058 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007042:	f004 f9a5 	bl	800b390 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8007046:	f004 f8c3 	bl	800b1d0 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800704a:	4a7a      	ldr	r2, [pc, #488]	@ (8007234 <main+0x230>)
 800704c:	4b7a      	ldr	r3, [pc, #488]	@ (8007238 <main+0x234>)
 800704e:	0011      	movs	r1, r2
 8007050:	0018      	movs	r0, r3
 8007052:	f7ff fd21 	bl	8006a98 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 8007056:	f7fe ff75 	bl	8005f44 <UserButton_Pressed>
 800705a:	1e03      	subs	r3, r0, #0
 800705c:	d004      	beq.n	8007068 <main+0x64>
    EnableESPProg();
 800705e:	f012 f963 	bl	8019328 <EnableESPProg>
    ESP_Programming = true;
 8007062:	4b76      	ldr	r3, [pc, #472]	@ (800723c <main+0x238>)
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 8007068:	2003      	movs	r0, #3
 800706a:	f004 fc1b 	bl	800b8a4 <SetVerboseLevel>
  BinaryReleaseInfo();
 800706e:	f004 fc31 	bl	800b8d4 <BinaryReleaseInfo>
  InitClock(&hrtc);
 8007072:	4b73      	ldr	r3, [pc, #460]	@ (8007240 <main+0x23c>)
 8007074:	0018      	movs	r0, r3
 8007076:	f7ff f97b 	bl	8006370 <InitClock>
  Debug("Clock init done");
 800707a:	4a72      	ldr	r2, [pc, #456]	@ (8007244 <main+0x240>)
 800707c:	4b72      	ldr	r3, [pc, #456]	@ (8007248 <main+0x244>)
 800707e:	0019      	movs	r1, r3
 8007080:	2003      	movs	r0, #3
 8007082:	f004 fbad 	bl	800b7e0 <CreateLine>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007086:	4971      	ldr	r1, [pc, #452]	@ (800724c <main+0x248>)
 8007088:	4b71      	ldr	r3, [pc, #452]	@ (8007250 <main+0x24c>)
 800708a:	2201      	movs	r2, #1
 800708c:	0018      	movs	r0, r3
 800708e:	f00c fbe1 	bl	8013854 <HAL_UART_Receive_IT>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007092:	4a70      	ldr	r2, [pc, #448]	@ (8007254 <main+0x250>)
 8007094:	4970      	ldr	r1, [pc, #448]	@ (8007258 <main+0x254>)
 8007096:	4871      	ldr	r0, [pc, #452]	@ (800725c <main+0x258>)
 8007098:	230b      	movs	r3, #11
 800709a:	f002 fd23 	bl	8009ae4 <soundInit>
 800709e:	0003      	movs	r3, r0
 80070a0:	001a      	movs	r2, r3
 80070a2:	2301      	movs	r3, #1
 80070a4:	4053      	eors	r3, r2
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d005      	beq.n	80070b8 <main+0xb4>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 80070ac:	4a6c      	ldr	r2, [pc, #432]	@ (8007260 <main+0x25c>)
 80070ae:	4b6d      	ldr	r3, [pc, #436]	@ (8007264 <main+0x260>)
 80070b0:	21e4      	movs	r1, #228	@ 0xe4
 80070b2:	0018      	movs	r0, r3
 80070b4:	f004 fc40 	bl	800b938 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80070b8:	4b6b      	ldr	r3, [pc, #428]	@ (8007268 <main+0x264>)
 80070ba:	4a6c      	ldr	r2, [pc, #432]	@ (800726c <main+0x268>)
 80070bc:	4966      	ldr	r1, [pc, #408]	@ (8007258 <main+0x254>)
 80070be:	486c      	ldr	r0, [pc, #432]	@ (8007270 <main+0x26c>)
 80070c0:	f7ff fb50 	bl	8006764 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 80070c4:	4b6b      	ldr	r3, [pc, #428]	@ (8007274 <main+0x270>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d019      	beq.n	8007100 <main+0xfc>
 80070cc:	4b5b      	ldr	r3, [pc, #364]	@ (800723c <main+0x238>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2201      	movs	r2, #1
 80070d2:	4053      	eors	r3, r2
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d012      	beq.n	8007100 <main+0xfc>
 80070da:	4b67      	ldr	r3, [pc, #412]	@ (8007278 <main+0x274>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2201      	movs	r2, #1
 80070e0:	4053      	eors	r3, r2
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00b      	beq.n	8007100 <main+0xfc>
      MeasurementBusy = UpkeepGadget();
 80070e8:	f7ff fb6a 	bl	80067c0 <UpkeepGadget>
 80070ec:	0003      	movs	r3, r0
 80070ee:	001a      	movs	r2, r3
 80070f0:	4b62      	ldr	r3, [pc, #392]	@ (800727c <main+0x278>)
 80070f2:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 80070f4:	f7fd ffd6 	bl	80050a4 <ESP_Upkeep>
 80070f8:	0003      	movs	r3, r0
 80070fa:	001a      	movs	r2, r3
 80070fc:	4b60      	ldr	r3, [pc, #384]	@ (8007280 <main+0x27c>)
 80070fe:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007100:	4b5c      	ldr	r3, [pc, #368]	@ (8007274 <main+0x270>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	2201      	movs	r2, #1
 8007106:	4053      	eors	r3, r2
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00f      	beq.n	800712e <main+0x12a>
 800710e:	4b4b      	ldr	r3, [pc, #300]	@ (800723c <main+0x238>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	2201      	movs	r2, #1
 8007114:	4053      	eors	r3, r2
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <main+0x12a>
 800711c:	4b56      	ldr	r3, [pc, #344]	@ (8007278 <main+0x274>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2201      	movs	r2, #1
 8007122:	4053      	eors	r3, r2
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <main+0x12a>
      Gadget_Test();
 800712a:	f7ff fb41 	bl	80067b0 <Gadget_Test>
    }
    Status_Upkeep();
 800712e:	f003 fe07 	bl	800ad40 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8007132:	4b54      	ldr	r3, [pc, #336]	@ (8007284 <main+0x280>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	0018      	movs	r0, r3
 8007138:	f004 fafc 	bl	800b734 <TimestampIsReached>
 800713c:	1e03      	subs	r3, r0, #0
 800713e:	d00c      	beq.n	800715a <main+0x156>
      charge = Battery_Upkeep();
 8007140:	f003 fe05 	bl	800ad4e <Battery_Upkeep>
 8007144:	0003      	movs	r3, r0
 8007146:	001a      	movs	r2, r3
 8007148:	4b4f      	ldr	r3, [pc, #316]	@ (8007288 <main+0x284>)
 800714a:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 800714c:	f004 fedc 	bl	800bf08 <HAL_GetTick>
 8007150:	0003      	movs	r3, r0
 8007152:	4a4e      	ldr	r2, [pc, #312]	@ (800728c <main+0x288>)
 8007154:	189a      	adds	r2, r3, r2
 8007156:	4b4b      	ldr	r3, [pc, #300]	@ (8007284 <main+0x280>)
 8007158:	601a      	str	r2, [r3, #0]
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 800715a:	4b4b      	ldr	r3, [pc, #300]	@ (8007288 <main+0x284>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d107      	bne.n	8007172 <main+0x16e>
 8007162:	4b47      	ldr	r3, [pc, #284]	@ (8007280 <main+0x27c>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b09      	cmp	r3, #9
 8007168:	d103      	bne.n	8007172 <main+0x16e>
      batteryEmpty = true;
 800716a:	4b43      	ldr	r3, [pc, #268]	@ (8007278 <main+0x274>)
 800716c:	2201      	movs	r2, #1
 800716e:	701a      	strb	r2, [r3, #0]
 8007170:	e002      	b.n	8007178 <main+0x174>
    }
    else{
      batteryEmpty = false;
 8007172:	4b41      	ldr	r3, [pc, #260]	@ (8007278 <main+0x274>)
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]
    }
    if(charge == BATTERY_FULL){

    }

    if(TimestampIsReached(timeReadTimer)){
 8007178:	4b45      	ldr	r3, [pc, #276]	@ (8007290 <main+0x28c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	0018      	movs	r0, r3
 800717e:	f004 fad9 	bl	800b734 <TimestampIsReached>
 8007182:	1e03      	subs	r3, r0, #0
 8007184:	d09e      	beq.n	80070c4 <main+0xc0>
      timeReadTimer  = HAL_GetTick() + 30000;
 8007186:	f004 febf 	bl	800bf08 <HAL_GetTick>
 800718a:	0003      	movs	r3, r0
 800718c:	4a41      	ldr	r2, [pc, #260]	@ (8007294 <main+0x290>)
 800718e:	189a      	adds	r2, r3, r2
 8007190:	4b3f      	ldr	r3, [pc, #252]	@ (8007290 <main+0x28c>)
 8007192:	601a      	str	r2, [r3, #0]
      RTC_GetTime(&lasthour, &lastminute, &lastsecond, &weekday, &day, &month, &year);
 8007194:	4c40      	ldr	r4, [pc, #256]	@ (8007298 <main+0x294>)
 8007196:	4a41      	ldr	r2, [pc, #260]	@ (800729c <main+0x298>)
 8007198:	4941      	ldr	r1, [pc, #260]	@ (80072a0 <main+0x29c>)
 800719a:	4842      	ldr	r0, [pc, #264]	@ (80072a4 <main+0x2a0>)
 800719c:	4b42      	ldr	r3, [pc, #264]	@ (80072a8 <main+0x2a4>)
 800719e:	9302      	str	r3, [sp, #8]
 80071a0:	4b42      	ldr	r3, [pc, #264]	@ (80072ac <main+0x2a8>)
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	4b42      	ldr	r3, [pc, #264]	@ (80072b0 <main+0x2ac>)
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	0023      	movs	r3, r4
 80071aa:	f7ff f885 	bl	80062b8 <RTC_GetTime>
      printf("Uptime timestamp reached ±30 sec interval: %02d:%02d:%02d\r\n", lasthour, lastminute, lastsecond);
 80071ae:	4b3d      	ldr	r3, [pc, #244]	@ (80072a4 <main+0x2a0>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	0019      	movs	r1, r3
 80071b4:	4b3a      	ldr	r3, [pc, #232]	@ (80072a0 <main+0x29c>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	001a      	movs	r2, r3
 80071ba:	4b38      	ldr	r3, [pc, #224]	@ (800729c <main+0x298>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	483d      	ldr	r0, [pc, #244]	@ (80072b4 <main+0x2b0>)
 80071c0:	f015 f920 	bl	801c404 <iprintf>
      if (iMinute != lastminute) {
 80071c4:	4b3c      	ldr	r3, [pc, #240]	@ (80072b8 <main+0x2b4>)
 80071c6:	781a      	ldrb	r2, [r3, #0]
 80071c8:	4b35      	ldr	r3, [pc, #212]	@ (80072a0 <main+0x29c>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d014      	beq.n	80071fa <main+0x1f6>
        iMinute = lastminute;
 80071d0:	4b33      	ldr	r3, [pc, #204]	@ (80072a0 <main+0x29c>)
 80071d2:	781a      	ldrb	r2, [r3, #0]
 80071d4:	4b38      	ldr	r3, [pc, #224]	@ (80072b8 <main+0x2b4>)
 80071d6:	701a      	strb	r2, [r3, #0]
        myUptimeminute++;
 80071d8:	4b38      	ldr	r3, [pc, #224]	@ (80072bc <main+0x2b8>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	4b36      	ldr	r3, [pc, #216]	@ (80072bc <main+0x2b8>)
 80071e2:	701a      	strb	r2, [r3, #0]
        printf("Systemuptime is: %d days %02d:%02d\r\n", myUptimeday, myUptimehour, myUptimeminute);
 80071e4:	4b36      	ldr	r3, [pc, #216]	@ (80072c0 <main+0x2bc>)
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	0019      	movs	r1, r3
 80071ea:	4b36      	ldr	r3, [pc, #216]	@ (80072c4 <main+0x2c0>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	001a      	movs	r2, r3
 80071f0:	4b32      	ldr	r3, [pc, #200]	@ (80072bc <main+0x2b8>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	4834      	ldr	r0, [pc, #208]	@ (80072c8 <main+0x2c4>)
 80071f6:	f015 f905 	bl	801c404 <iprintf>
      }
      if (myUptimeminute == 60) {
 80071fa:	4b30      	ldr	r3, [pc, #192]	@ (80072bc <main+0x2b8>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b3c      	cmp	r3, #60	@ 0x3c
 8007200:	d000      	beq.n	8007204 <main+0x200>
 8007202:	e75f      	b.n	80070c4 <main+0xc0>
        myUptimeminute = 0;
 8007204:	4b2d      	ldr	r3, [pc, #180]	@ (80072bc <main+0x2b8>)
 8007206:	2200      	movs	r2, #0
 8007208:	701a      	strb	r2, [r3, #0]
        myUptimehour++;
 800720a:	4b2e      	ldr	r3, [pc, #184]	@ (80072c4 <main+0x2c0>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	3301      	adds	r3, #1
 8007210:	b2da      	uxtb	r2, r3
 8007212:	4b2c      	ldr	r3, [pc, #176]	@ (80072c4 <main+0x2c0>)
 8007214:	701a      	strb	r2, [r3, #0]
        if (myUptimehour == 24) {
 8007216:	4b2b      	ldr	r3, [pc, #172]	@ (80072c4 <main+0x2c0>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b18      	cmp	r3, #24
 800721c:	d000      	beq.n	8007220 <main+0x21c>
 800721e:	e751      	b.n	80070c4 <main+0xc0>
          myUptimehour = 0;
 8007220:	4b28      	ldr	r3, [pc, #160]	@ (80072c4 <main+0x2c0>)
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]
          myUptimeday++;
 8007226:	4b26      	ldr	r3, [pc, #152]	@ (80072c0 <main+0x2bc>)
 8007228:	881b      	ldrh	r3, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	b29a      	uxth	r2, r3
 800722e:	4b24      	ldr	r3, [pc, #144]	@ (80072c0 <main+0x2bc>)
 8007230:	801a      	strh	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007232:	e747      	b.n	80070c4 <main+0xc0>
 8007234:	2000216c 	.word	0x2000216c
 8007238:	2000212c 	.word	0x2000212c
 800723c:	20000ed1 	.word	0x20000ed1
 8007240:	2000119c 	.word	0x2000119c
 8007244:	0802001c 	.word	0x0802001c
 8007248:	0802002c 	.word	0x0802002c
 800724c:	20000eec 	.word	0x20000eec
 8007250:	200022a4 	.word	0x200022a4
 8007254:	200021ac 	.word	0x200021ac
 8007258:	20000e4c 	.word	0x20000e4c
 800725c:	20000e88 	.word	0x20000e88
 8007260:	08020030 	.word	0x08020030
 8007264:	08020a30 	.word	0x08020a30
 8007268:	20000cb4 	.word	0x20000cb4
 800726c:	2000235c 	.word	0x2000235c
 8007270:	20000d14 	.word	0x20000d14
 8007274:	20000ed0 	.word	0x20000ed0
 8007278:	20000ed2 	.word	0x20000ed2
 800727c:	20000ed3 	.word	0x20000ed3
 8007280:	20000ee9 	.word	0x20000ee9
 8007284:	20000ee0 	.word	0x20000ee0
 8007288:	20000ee8 	.word	0x20000ee8
 800728c:	0000ea60 	.word	0x0000ea60
 8007290:	20000ee4 	.word	0x20000ee4
 8007294:	00007530 	.word	0x00007530
 8007298:	20000ed8 	.word	0x20000ed8
 800729c:	20000ed7 	.word	0x20000ed7
 80072a0:	20000ed6 	.word	0x20000ed6
 80072a4:	20000ed5 	.word	0x20000ed5
 80072a8:	20000edb 	.word	0x20000edb
 80072ac:	20000eda 	.word	0x20000eda
 80072b0:	20000ed9 	.word	0x20000ed9
 80072b4:	08020044 	.word	0x08020044
 80072b8:	20000ed4 	.word	0x20000ed4
 80072bc:	20000edc 	.word	0x20000edc
 80072c0:	20000ede 	.word	0x20000ede
 80072c4:	20000edd 	.word	0x20000edd
 80072c8:	08020084 	.word	0x08020084

080072cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80072cc:	b590      	push	{r4, r7, lr}
 80072ce:	b09d      	sub	sp, #116	@ 0x74
 80072d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072d2:	2438      	movs	r4, #56	@ 0x38
 80072d4:	193b      	adds	r3, r7, r4
 80072d6:	0018      	movs	r0, r3
 80072d8:	2338      	movs	r3, #56	@ 0x38
 80072da:	001a      	movs	r2, r3
 80072dc:	2100      	movs	r1, #0
 80072de:	f015 fa45 	bl	801c76c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072e2:	2324      	movs	r3, #36	@ 0x24
 80072e4:	18fb      	adds	r3, r7, r3
 80072e6:	0018      	movs	r0, r3
 80072e8:	2314      	movs	r3, #20
 80072ea:	001a      	movs	r2, r3
 80072ec:	2100      	movs	r1, #0
 80072ee:	f015 fa3d 	bl	801c76c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072f2:	003b      	movs	r3, r7
 80072f4:	0018      	movs	r0, r3
 80072f6:	2324      	movs	r3, #36	@ 0x24
 80072f8:	001a      	movs	r2, r3
 80072fa:	2100      	movs	r1, #0
 80072fc:	f015 fa36 	bl	801c76c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007300:	4b32      	ldr	r3, [pc, #200]	@ (80073cc <SystemClock_Config+0x100>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a32      	ldr	r2, [pc, #200]	@ (80073d0 <SystemClock_Config+0x104>)
 8007306:	401a      	ands	r2, r3
 8007308:	4b30      	ldr	r3, [pc, #192]	@ (80073cc <SystemClock_Config+0x100>)
 800730a:	2180      	movs	r1, #128	@ 0x80
 800730c:	0109      	lsls	r1, r1, #4
 800730e:	430a      	orrs	r2, r1
 8007310:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007312:	f00a f9e9 	bl	80116e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8007316:	4b2f      	ldr	r3, [pc, #188]	@ (80073d4 <SystemClock_Config+0x108>)
 8007318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800731a:	4b2e      	ldr	r3, [pc, #184]	@ (80073d4 <SystemClock_Config+0x108>)
 800731c:	492c      	ldr	r1, [pc, #176]	@ (80073d0 <SystemClock_Config+0x104>)
 800731e:	400a      	ands	r2, r1
 8007320:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007322:	193b      	adds	r3, r7, r4
 8007324:	2226      	movs	r2, #38	@ 0x26
 8007326:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007328:	193b      	adds	r3, r7, r4
 800732a:	2280      	movs	r2, #128	@ 0x80
 800732c:	0052      	lsls	r2, r2, #1
 800732e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007330:	0021      	movs	r1, r4
 8007332:	187b      	adds	r3, r7, r1
 8007334:	2201      	movs	r2, #1
 8007336:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007338:	187b      	adds	r3, r7, r1
 800733a:	2210      	movs	r2, #16
 800733c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800733e:	187b      	adds	r3, r7, r1
 8007340:	2201      	movs	r2, #1
 8007342:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8007344:	187b      	adds	r3, r7, r1
 8007346:	2200      	movs	r2, #0
 8007348:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800734a:	187b      	adds	r3, r7, r1
 800734c:	0018      	movs	r0, r3
 800734e:	f00a f9d9 	bl	8011704 <HAL_RCC_OscConfig>
 8007352:	1e03      	subs	r3, r0, #0
 8007354:	d001      	beq.n	800735a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8007356:	f000 f8d1 	bl	80074fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800735a:	2124      	movs	r1, #36	@ 0x24
 800735c:	187b      	adds	r3, r7, r1
 800735e:	220f      	movs	r2, #15
 8007360:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007362:	187b      	adds	r3, r7, r1
 8007364:	2201      	movs	r2, #1
 8007366:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007368:	187b      	adds	r3, r7, r1
 800736a:	2200      	movs	r2, #0
 800736c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800736e:	187b      	adds	r3, r7, r1
 8007370:	2200      	movs	r2, #0
 8007372:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007374:	187b      	adds	r3, r7, r1
 8007376:	2200      	movs	r2, #0
 8007378:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800737a:	187b      	adds	r3, r7, r1
 800737c:	2100      	movs	r1, #0
 800737e:	0018      	movs	r0, r3
 8007380:	f00a fd94 	bl	8011eac <HAL_RCC_ClockConfig>
 8007384:	1e03      	subs	r3, r0, #0
 8007386:	d001      	beq.n	800738c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8007388:	f000 f8b8 	bl	80074fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 800738c:	003b      	movs	r3, r7
 800738e:	226d      	movs	r2, #109	@ 0x6d
 8007390:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007392:	003b      	movs	r3, r7
 8007394:	2200      	movs	r2, #0
 8007396:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007398:	003b      	movs	r3, r7
 800739a:	2200      	movs	r2, #0
 800739c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800739e:	003b      	movs	r3, r7
 80073a0:	2200      	movs	r2, #0
 80073a2:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80073a4:	003b      	movs	r3, r7
 80073a6:	2280      	movs	r2, #128	@ 0x80
 80073a8:	0252      	lsls	r2, r2, #9
 80073aa:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80073ac:	003b      	movs	r3, r7
 80073ae:	2280      	movs	r2, #128	@ 0x80
 80073b0:	04d2      	lsls	r2, r2, #19
 80073b2:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80073b4:	003b      	movs	r3, r7
 80073b6:	0018      	movs	r0, r3
 80073b8:	f00a ff9c 	bl	80122f4 <HAL_RCCEx_PeriphCLKConfig>
 80073bc:	1e03      	subs	r3, r0, #0
 80073be:	d001      	beq.n	80073c4 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80073c0:	f000 f89c 	bl	80074fc <Error_Handler>
  }
}
 80073c4:	46c0      	nop			@ (mov r8, r8)
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b01d      	add	sp, #116	@ 0x74
 80073ca:	bd90      	pop	{r4, r7, pc}
 80073cc:	40007000 	.word	0x40007000
 80073d0:	ffffe7ff 	.word	0xffffe7ff
 80073d4:	40021000 	.word	0x40021000

080073d8 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 80073d8:	b590      	push	{r4, r7, lr}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	000a      	movs	r2, r1
 80073e2:	1cbb      	adds	r3, r7, #2
 80073e4:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 80073e6:	4c06      	ldr	r4, [pc, #24]	@ (8007400 <printString+0x28>)
 80073e8:	1cbb      	adds	r3, r7, #2
 80073ea:	881a      	ldrh	r2, [r3, #0]
 80073ec:	6879      	ldr	r1, [r7, #4]
 80073ee:	4805      	ldr	r0, [pc, #20]	@ (8007404 <printString+0x2c>)
 80073f0:	0023      	movs	r3, r4
 80073f2:	f00c f98f 	bl	8013714 <HAL_UART_Transmit>
}
 80073f6:	46c0      	nop			@ (mov r8, r8)
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b003      	add	sp, #12
 80073fc:	bd90      	pop	{r4, r7, pc}
 80073fe:	46c0      	nop			@ (mov r8, r8)
 8007400:	0000ffff 	.word	0x0000ffff
 8007404:	200022a4 	.word	0x200022a4

08007408 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800740a:	46ce      	mov	lr, r9
 800740c:	4647      	mov	r7, r8
 800740e:	b580      	push	{r7, lr}
 8007410:	b089      	sub	sp, #36	@ 0x24
 8007412:	af06      	add	r7, sp, #24
 8007414:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007416:	492b      	ldr	r1, [pc, #172]	@ (80074c4 <HAL_UART_RxCpltCallback+0xbc>)
 8007418:	4b2b      	ldr	r3, [pc, #172]	@ (80074c8 <HAL_UART_RxCpltCallback+0xc0>)
 800741a:	2201      	movs	r2, #1
 800741c:	0018      	movs	r0, r3
 800741e:	f00c fa19 	bl	8013854 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007422:	4b28      	ldr	r3, [pc, #160]	@ (80074c4 <HAL_UART_RxCpltCallback+0xbc>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b3f      	cmp	r3, #63	@ 0x3f
 8007428:	d002      	beq.n	8007430 <HAL_UART_RxCpltCallback+0x28>
 800742a:	2b74      	cmp	r3, #116	@ 0x74
 800742c:	d034      	beq.n	8007498 <HAL_UART_RxCpltCallback+0x90>
 800742e:	e036      	b.n	800749e <HAL_UART_RxCpltCallback+0x96>

  case (uint8_t)'?':
    RTC_GetTime(&lasthour, &lastminute, &lastsecond, &weekday, &day, &month, &year);
 8007430:	4c26      	ldr	r4, [pc, #152]	@ (80074cc <HAL_UART_RxCpltCallback+0xc4>)
 8007432:	4a27      	ldr	r2, [pc, #156]	@ (80074d0 <HAL_UART_RxCpltCallback+0xc8>)
 8007434:	4927      	ldr	r1, [pc, #156]	@ (80074d4 <HAL_UART_RxCpltCallback+0xcc>)
 8007436:	4828      	ldr	r0, [pc, #160]	@ (80074d8 <HAL_UART_RxCpltCallback+0xd0>)
 8007438:	4b28      	ldr	r3, [pc, #160]	@ (80074dc <HAL_UART_RxCpltCallback+0xd4>)
 800743a:	9302      	str	r3, [sp, #8]
 800743c:	4b28      	ldr	r3, [pc, #160]	@ (80074e0 <HAL_UART_RxCpltCallback+0xd8>)
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	4b28      	ldr	r3, [pc, #160]	@ (80074e4 <HAL_UART_RxCpltCallback+0xdc>)
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	0023      	movs	r3, r4
 8007446:	f7fe ff37 	bl	80062b8 <RTC_GetTime>
    printf("System time: %02d-%02d-%02d %02d:%02d:%02d, system uptime is: %dD %02d:%02d\r\n", year, month, day, lasthour, lastminute, lastsecond, myUptimeday, myUptimehour, myUptimeminute);
 800744a:	4b24      	ldr	r3, [pc, #144]	@ (80074dc <HAL_UART_RxCpltCallback+0xd4>)
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	469c      	mov	ip, r3
 8007450:	4b23      	ldr	r3, [pc, #140]	@ (80074e0 <HAL_UART_RxCpltCallback+0xd8>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	4698      	mov	r8, r3
 8007456:	4b23      	ldr	r3, [pc, #140]	@ (80074e4 <HAL_UART_RxCpltCallback+0xdc>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	4699      	mov	r9, r3
 800745c:	4b1e      	ldr	r3, [pc, #120]	@ (80074d8 <HAL_UART_RxCpltCallback+0xd0>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	001a      	movs	r2, r3
 8007462:	4b1c      	ldr	r3, [pc, #112]	@ (80074d4 <HAL_UART_RxCpltCallback+0xcc>)
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	0019      	movs	r1, r3
 8007468:	4b19      	ldr	r3, [pc, #100]	@ (80074d0 <HAL_UART_RxCpltCallback+0xc8>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	001c      	movs	r4, r3
 800746e:	4b1e      	ldr	r3, [pc, #120]	@ (80074e8 <HAL_UART_RxCpltCallback+0xe0>)
 8007470:	881b      	ldrh	r3, [r3, #0]
 8007472:	001d      	movs	r5, r3
 8007474:	4b1d      	ldr	r3, [pc, #116]	@ (80074ec <HAL_UART_RxCpltCallback+0xe4>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	001e      	movs	r6, r3
 800747a:	4b1d      	ldr	r3, [pc, #116]	@ (80074f0 <HAL_UART_RxCpltCallback+0xe8>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	481d      	ldr	r0, [pc, #116]	@ (80074f4 <HAL_UART_RxCpltCallback+0xec>)
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	9604      	str	r6, [sp, #16]
 8007484:	9503      	str	r5, [sp, #12]
 8007486:	9402      	str	r4, [sp, #8]
 8007488:	9101      	str	r1, [sp, #4]
 800748a:	9200      	str	r2, [sp, #0]
 800748c:	464b      	mov	r3, r9
 800748e:	4642      	mov	r2, r8
 8007490:	4661      	mov	r1, ip
 8007492:	f014 ffb7 	bl	801c404 <iprintf>
    break;
 8007496:	e007      	b.n	80074a8 <HAL_UART_RxCpltCallback+0xa0>
  case (uint8_t)'t':
    forceNTPupdate();
 8007498:	f7fc f980 	bl	800379c <forceNTPupdate>
  break;
 800749c:	e004      	b.n	80074a8 <HAL_UART_RxCpltCallback+0xa0>
  default:
     printf("Error unknown request\r\n");
 800749e:	4b16      	ldr	r3, [pc, #88]	@ (80074f8 <HAL_UART_RxCpltCallback+0xf0>)
 80074a0:	0018      	movs	r0, r3
 80074a2:	f015 f815 	bl	801c4d0 <puts>
  break;
 80074a6:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80074a8:	4906      	ldr	r1, [pc, #24]	@ (80074c4 <HAL_UART_RxCpltCallback+0xbc>)
 80074aa:	4b07      	ldr	r3, [pc, #28]	@ (80074c8 <HAL_UART_RxCpltCallback+0xc0>)
 80074ac:	2201      	movs	r2, #1
 80074ae:	0018      	movs	r0, r3
 80074b0:	f00c f9d0 	bl	8013854 <HAL_UART_Receive_IT>
}
 80074b4:	46c0      	nop			@ (mov r8, r8)
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b003      	add	sp, #12
 80074ba:	bcc0      	pop	{r6, r7}
 80074bc:	46b9      	mov	r9, r7
 80074be:	46b0      	mov	r8, r6
 80074c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074c2:	46c0      	nop			@ (mov r8, r8)
 80074c4:	20000eec 	.word	0x20000eec
 80074c8:	200022a4 	.word	0x200022a4
 80074cc:	20000ed8 	.word	0x20000ed8
 80074d0:	20000ed7 	.word	0x20000ed7
 80074d4:	20000ed6 	.word	0x20000ed6
 80074d8:	20000ed5 	.word	0x20000ed5
 80074dc:	20000edb 	.word	0x20000edb
 80074e0:	20000eda 	.word	0x20000eda
 80074e4:	20000ed9 	.word	0x20000ed9
 80074e8:	20000ede 	.word	0x20000ede
 80074ec:	20000edd 	.word	0x20000edd
 80074f0:	20000edc 	.word	0x20000edc
 80074f4:	080200ac 	.word	0x080200ac
 80074f8:	080200fc 	.word	0x080200fc

080074fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007500:	b672      	cpsid	i
}
 8007502:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007504:	46c0      	nop			@ (mov r8, r8)
 8007506:	e7fd      	b.n	8007504 <Error_Handler+0x8>

08007508 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 800750c:	f7ff fb21 	bl	8006b52 <HT_StartMeasurement>
}
 8007510:	46c0      	nop			@ (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 800751c:	4a04      	ldr	r2, [pc, #16]	@ (8007530 <HT_IsMeasurementDoneWrapper+0x18>)
 800751e:	4b05      	ldr	r3, [pc, #20]	@ (8007534 <HT_IsMeasurementDoneWrapper+0x1c>)
 8007520:	0011      	movs	r1, r2
 8007522:	0018      	movs	r0, r3
 8007524:	f7ff fb1c 	bl	8006b60 <HT_GetMeasurementValues>
 8007528:	0003      	movs	r3, r0
}
 800752a:	0018      	movs	r0, r3
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000f00 	.word	0x20000f00
 8007534:	20000efc 	.word	0x20000efc

08007538 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 800753c:	f7ff f979 	bl	8006832 <Gas_StartMeasurement>
}
 8007540:	46c0      	nop			@ (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 800754c:	4b03      	ldr	r3, [pc, #12]	@ (800755c <VOC_IsMeasurementDoneWrapper+0x14>)
 800754e:	0018      	movs	r0, r3
 8007550:	f7ff f976 	bl	8006840 <Gas_GetMeasurementValues>
 8007554:	0003      	movs	r3, r0
}
 8007556:	0018      	movs	r0, r3
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000f04 	.word	0x20000f04

08007560 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0
}
 8007564:	46c0      	nop			@ (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 800756a:	b580      	push	{r7, lr}
 800756c:	af00      	add	r7, sp, #0
  return true;
 800756e:	2301      	movs	r3, #1
}
 8007570:	0018      	movs	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 8007576:	b580      	push	{r7, lr}
 8007578:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 800757a:	f000 fd1b 	bl	8007fb4 <MIC_TestMeasurementDone>
 800757e:	0003      	movs	r3, r0
}
 8007580:	0018      	movs	r0, r3
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <testInit>:

void testInit(){
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 800758c:	4b07      	ldr	r3, [pc, #28]	@ (80075ac <testInit+0x24>)
 800758e:	2200      	movs	r2, #0
 8007590:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007592:	4b06      	ldr	r3, [pc, #24]	@ (80075ac <testInit+0x24>)
 8007594:	2200      	movs	r2, #0
 8007596:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 8007598:	4b04      	ldr	r3, [pc, #16]	@ (80075ac <testInit+0x24>)
 800759a:	2200      	movs	r2, #0
 800759c:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 800759e:	4b03      	ldr	r3, [pc, #12]	@ (80075ac <testInit+0x24>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	705a      	strb	r2, [r3, #1]
}
 80075a4:	46c0      	nop			@ (mov r8, r8)
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	46c0      	nop			@ (mov r8, r8)
 80075ac:	20000f40 	.word	0x20000f40

080075b0 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80075b0:	b5b0      	push	{r4, r5, r7, lr}
 80075b2:	b092      	sub	sp, #72	@ 0x48
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 80075bc:	f7ff ffe4 	bl	8007588 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80075c0:	4b6e      	ldr	r3, [pc, #440]	@ (800777c <Meas_Init+0x1cc>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d103      	bne.n	80075d0 <Meas_Init+0x20>
 80075c8:	4b6c      	ldr	r3, [pc, #432]	@ (800777c <Meas_Init+0x1cc>)
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d068      	beq.n	80076a2 <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	0018      	movs	r0, r3
 80075d4:	f7fe f94c 	bl	8005870 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 80075d8:	f7ff fad2 	bl	8006b80 <HT_DeviceConnected>
 80075dc:	0003      	movs	r3, r0
 80075de:	001a      	movs	r2, r3
 80075e0:	2301      	movs	r3, #1
 80075e2:	4053      	eors	r3, r2
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00c      	beq.n	8007604 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 80075ea:	4a65      	ldr	r2, [pc, #404]	@ (8007780 <Meas_Init+0x1d0>)
 80075ec:	4b65      	ldr	r3, [pc, #404]	@ (8007784 <Meas_Init+0x1d4>)
 80075ee:	0019      	movs	r1, r3
 80075f0:	2001      	movs	r0, #1
 80075f2:	f004 f8f5 	bl	800b7e0 <CreateLine>
       MeasTest.HT_Tested = false;
 80075f6:	4b64      	ldr	r3, [pc, #400]	@ (8007788 <Meas_Init+0x1d8>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 80075fc:	4b5f      	ldr	r3, [pc, #380]	@ (800777c <Meas_Init+0x1cc>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	e008      	b.n	8007616 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8007604:	4b60      	ldr	r3, [pc, #384]	@ (8007788 <Meas_Init+0x1d8>)
 8007606:	2201      	movs	r2, #1
 8007608:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 800760a:	4a60      	ldr	r2, [pc, #384]	@ (800778c <Meas_Init+0x1dc>)
 800760c:	4b60      	ldr	r3, [pc, #384]	@ (8007790 <Meas_Init+0x1e0>)
 800760e:	0019      	movs	r1, r3
 8007610:	2003      	movs	r0, #3
 8007612:	f004 f8e5 	bl	800b7e0 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8007616:	f7ff f920 	bl	800685a <Gas_DeviceConnected>
 800761a:	0003      	movs	r3, r0
 800761c:	001a      	movs	r2, r3
 800761e:	2301      	movs	r3, #1
 8007620:	4053      	eors	r3, r2
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00c      	beq.n	8007642 <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8007628:	4b57      	ldr	r3, [pc, #348]	@ (8007788 <Meas_Init+0x1d8>)
 800762a:	2200      	movs	r2, #0
 800762c:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 800762e:	4a59      	ldr	r2, [pc, #356]	@ (8007794 <Meas_Init+0x1e4>)
 8007630:	4b54      	ldr	r3, [pc, #336]	@ (8007784 <Meas_Init+0x1d4>)
 8007632:	0019      	movs	r1, r3
 8007634:	2001      	movs	r0, #1
 8007636:	f004 f8d3 	bl	800b7e0 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 800763a:	4b50      	ldr	r3, [pc, #320]	@ (800777c <Meas_Init+0x1cc>)
 800763c:	2200      	movs	r2, #0
 800763e:	705a      	strb	r2, [r3, #1]
 8007640:	e008      	b.n	8007654 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8007642:	4b51      	ldr	r3, [pc, #324]	@ (8007788 <Meas_Init+0x1d8>)
 8007644:	2201      	movs	r2, #1
 8007646:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8007648:	4a53      	ldr	r2, [pc, #332]	@ (8007798 <Meas_Init+0x1e8>)
 800764a:	4b51      	ldr	r3, [pc, #324]	@ (8007790 <Meas_Init+0x1e0>)
 800764c:	0019      	movs	r1, r3
 800764e:	2003      	movs	r0, #3
 8007650:	f004 f8c6 	bl	800b7e0 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8007654:	4b4c      	ldr	r3, [pc, #304]	@ (8007788 <Meas_Init+0x1d8>)
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d009      	beq.n	8007670 <Meas_Init+0xc0>
 800765c:	4b4a      	ldr	r3, [pc, #296]	@ (8007788 <Meas_Init+0x1d8>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8007664:	2200      	movs	r2, #0
 8007666:	2101      	movs	r1, #1
 8007668:	2000      	movs	r0, #0
 800766a:	f003 f94f 	bl	800a90c <SetDBLED>
 800766e:	e018      	b.n	80076a2 <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	2001      	movs	r0, #1
 8007676:	f003 f949 	bl	800a90c <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 800767a:	4b48      	ldr	r3, [pc, #288]	@ (800779c <Meas_Init+0x1ec>)
 800767c:	2200      	movs	r2, #0
 800767e:	2101      	movs	r1, #1
 8007680:	0018      	movs	r0, r3
 8007682:	f005 fea0 	bl	800d3c6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8007686:	2380      	movs	r3, #128	@ 0x80
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	4844      	ldr	r0, [pc, #272]	@ (800779c <Meas_Init+0x1ec>)
 800768c:	2201      	movs	r2, #1
 800768e:	0019      	movs	r1, r3
 8007690:	f005 fe99 	bl	800d3c6 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007694:	2380      	movs	r3, #128	@ 0x80
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4840      	ldr	r0, [pc, #256]	@ (800779c <Meas_Init+0x1ec>)
 800769a:	2201      	movs	r2, #1
 800769c:	0019      	movs	r1, r3
 800769e:	f005 fe92 	bl	800d3c6 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80076a2:	4b36      	ldr	r3, [pc, #216]	@ (800777c <Meas_Init+0x1cc>)
 80076a4:	78db      	ldrb	r3, [r3, #3]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d008      	beq.n	80076bc <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 80076aa:	4a3d      	ldr	r2, [pc, #244]	@ (80077a0 <Meas_Init+0x1f0>)
 80076ac:	4b3d      	ldr	r3, [pc, #244]	@ (80077a4 <Meas_Init+0x1f4>)
 80076ae:	0019      	movs	r1, r3
 80076b0:	2002      	movs	r0, #2
 80076b2:	f004 f895 	bl	800b7e0 <CreateLine>
          enableMicrophone(true);
 80076b6:	2001      	movs	r0, #1
 80076b8:	f002 fa7c 	bl	8009bb4 <enableMicrophone>

  }
  uint8_t offset = 0;
 80076bc:	2547      	movs	r5, #71	@ 0x47
 80076be:	197b      	adds	r3, r7, r5
 80076c0:	2200      	movs	r2, #0
 80076c2:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80076c4:	197b      	adds	r3, r7, r5
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	197a      	adds	r2, r7, r5
 80076ca:	1c59      	adds	r1, r3, #1
 80076cc:	7011      	strb	r1, [r2, #0]
 80076ce:	4a2b      	ldr	r2, [pc, #172]	@ (800777c <Meas_Init+0x1cc>)
 80076d0:	7814      	ldrb	r4, [r2, #0]
 80076d2:	4a35      	ldr	r2, [pc, #212]	@ (80077a8 <Meas_Init+0x1f8>)
 80076d4:	0119      	lsls	r1, r3, #4
 80076d6:	4835      	ldr	r0, [pc, #212]	@ (80077ac <Meas_Init+0x1fc>)
 80076d8:	5088      	str	r0, [r1, r2]
 80076da:	4933      	ldr	r1, [pc, #204]	@ (80077a8 <Meas_Init+0x1f8>)
 80076dc:	011a      	lsls	r2, r3, #4
 80076de:	188a      	adds	r2, r1, r2
 80076e0:	3204      	adds	r2, #4
 80076e2:	4933      	ldr	r1, [pc, #204]	@ (80077b0 <Meas_Init+0x200>)
 80076e4:	6011      	str	r1, [r2, #0]
 80076e6:	4930      	ldr	r1, [pc, #192]	@ (80077a8 <Meas_Init+0x1f8>)
 80076e8:	011a      	lsls	r2, r3, #4
 80076ea:	188a      	adds	r2, r1, r2
 80076ec:	3208      	adds	r2, #8
 80076ee:	4931      	ldr	r1, [pc, #196]	@ (80077b4 <Meas_Init+0x204>)
 80076f0:	6011      	str	r1, [r2, #0]
 80076f2:	4a2d      	ldr	r2, [pc, #180]	@ (80077a8 <Meas_Init+0x1f8>)
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	18d3      	adds	r3, r2, r3
 80076f8:	330c      	adds	r3, #12
 80076fa:	1c22      	adds	r2, r4, #0
 80076fc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80076fe:	197b      	adds	r3, r7, r5
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	197a      	adds	r2, r7, r5
 8007704:	1c59      	adds	r1, r3, #1
 8007706:	7011      	strb	r1, [r2, #0]
 8007708:	4a1c      	ldr	r2, [pc, #112]	@ (800777c <Meas_Init+0x1cc>)
 800770a:	7854      	ldrb	r4, [r2, #1]
 800770c:	4a26      	ldr	r2, [pc, #152]	@ (80077a8 <Meas_Init+0x1f8>)
 800770e:	0119      	lsls	r1, r3, #4
 8007710:	4829      	ldr	r0, [pc, #164]	@ (80077b8 <Meas_Init+0x208>)
 8007712:	5088      	str	r0, [r1, r2]
 8007714:	4924      	ldr	r1, [pc, #144]	@ (80077a8 <Meas_Init+0x1f8>)
 8007716:	011a      	lsls	r2, r3, #4
 8007718:	188a      	adds	r2, r1, r2
 800771a:	3204      	adds	r2, #4
 800771c:	4927      	ldr	r1, [pc, #156]	@ (80077bc <Meas_Init+0x20c>)
 800771e:	6011      	str	r1, [r2, #0]
 8007720:	4921      	ldr	r1, [pc, #132]	@ (80077a8 <Meas_Init+0x1f8>)
 8007722:	011a      	lsls	r2, r3, #4
 8007724:	188a      	adds	r2, r1, r2
 8007726:	3208      	adds	r2, #8
 8007728:	4925      	ldr	r1, [pc, #148]	@ (80077c0 <Meas_Init+0x210>)
 800772a:	6011      	str	r1, [r2, #0]
 800772c:	4a1e      	ldr	r2, [pc, #120]	@ (80077a8 <Meas_Init+0x1f8>)
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	18d3      	adds	r3, r2, r3
 8007732:	330c      	adds	r3, #12
 8007734:	1c22      	adds	r2, r4, #0
 8007736:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8007738:	197b      	adds	r3, r7, r5
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	197a      	adds	r2, r7, r5
 800773e:	1c59      	adds	r1, r3, #1
 8007740:	7011      	strb	r1, [r2, #0]
 8007742:	4a0e      	ldr	r2, [pc, #56]	@ (800777c <Meas_Init+0x1cc>)
 8007744:	7894      	ldrb	r4, [r2, #2]
 8007746:	4a18      	ldr	r2, [pc, #96]	@ (80077a8 <Meas_Init+0x1f8>)
 8007748:	0119      	lsls	r1, r3, #4
 800774a:	481e      	ldr	r0, [pc, #120]	@ (80077c4 <Meas_Init+0x214>)
 800774c:	5088      	str	r0, [r1, r2]
 800774e:	4916      	ldr	r1, [pc, #88]	@ (80077a8 <Meas_Init+0x1f8>)
 8007750:	011a      	lsls	r2, r3, #4
 8007752:	188a      	adds	r2, r1, r2
 8007754:	3204      	adds	r2, #4
 8007756:	491c      	ldr	r1, [pc, #112]	@ (80077c8 <Meas_Init+0x218>)
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	4913      	ldr	r1, [pc, #76]	@ (80077a8 <Meas_Init+0x1f8>)
 800775c:	011a      	lsls	r2, r3, #4
 800775e:	188a      	adds	r2, r1, r2
 8007760:	3208      	adds	r2, #8
 8007762:	491a      	ldr	r1, [pc, #104]	@ (80077cc <Meas_Init+0x21c>)
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	4a10      	ldr	r2, [pc, #64]	@ (80077a8 <Meas_Init+0x1f8>)
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	18d3      	adds	r3, r2, r3
 800776c:	330c      	adds	r3, #12
 800776e:	1c22      	adds	r2, r4, #0
 8007770:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	46bd      	mov	sp, r7
 8007776:	b012      	add	sp, #72	@ 0x48
 8007778:	bdb0      	pop	{r4, r5, r7, pc}
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	20000f3c 	.word	0x20000f3c
 8007780:	08020114 	.word	0x08020114
 8007784:	08020144 	.word	0x08020144
 8007788:	20000f40 	.word	0x20000f40
 800778c:	08020148 	.word	0x08020148
 8007790:	08020174 	.word	0x08020174
 8007794:	08020178 	.word	0x08020178
 8007798:	08020194 	.word	0x08020194
 800779c:	50000400 	.word	0x50000400
 80077a0:	080201ac 	.word	0x080201ac
 80077a4:	080201d0 	.word	0x080201d0
 80077a8:	20000f0c 	.word	0x20000f0c
 80077ac:	08007509 	.word	0x08007509
 80077b0:	08007519 	.word	0x08007519
 80077b4:	20000f08 	.word	0x20000f08
 80077b8:	08007539 	.word	0x08007539
 80077bc:	08007549 	.word	0x08007549
 80077c0:	20000f09 	.word	0x20000f09
 80077c4:	08007561 	.word	0x08007561
 80077c8:	0800756b 	.word	0x0800756b
 80077cc:	20000f0a 	.word	0x20000f0a

080077d0 <StartMeasurements>:

void StartMeasurements(void) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80077d4:	4b10      	ldr	r3, [pc, #64]	@ (8007818 <StartMeasurements+0x48>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e015      	b.n	8007808 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80077dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007818 <StartMeasurements+0x48>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	4a0e      	ldr	r2, [pc, #56]	@ (800781c <StartMeasurements+0x4c>)
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	18d3      	adds	r3, r2, r3
 80077e6:	330c      	adds	r3, #12
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d006      	beq.n	80077fc <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80077ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <StartMeasurements+0x48>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	001a      	movs	r2, r3
 80077f4:	4b09      	ldr	r3, [pc, #36]	@ (800781c <StartMeasurements+0x4c>)
 80077f6:	0112      	lsls	r2, r2, #4
 80077f8:	58d3      	ldr	r3, [r2, r3]
 80077fa:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80077fc:	4b06      	ldr	r3, [pc, #24]	@ (8007818 <StartMeasurements+0x48>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	3301      	adds	r3, #1
 8007802:	b2da      	uxtb	r2, r3
 8007804:	4b04      	ldr	r3, [pc, #16]	@ (8007818 <StartMeasurements+0x48>)
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	4b03      	ldr	r3, [pc, #12]	@ (8007818 <StartMeasurements+0x48>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d9e5      	bls.n	80077dc <StartMeasurements+0xc>
    }
  }
}
 8007810:	46c0      	nop			@ (mov r8, r8)
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000f44 	.word	0x20000f44
 800781c:	20000f0c 	.word	0x20000f0c

08007820 <Meas_Test>:

void Meas_Test(){
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007824:	4b23      	ldr	r3, [pc, #140]	@ (80078b4 <Meas_Test+0x94>)
 8007826:	78db      	ldrb	r3, [r3, #3]
 8007828:	2201      	movs	r2, #1
 800782a:	4053      	eors	r3, r2
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <Meas_Test+0x16>
    ESP_WakeTest();
 8007832:	f7fd fb21 	bl	8004e78 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8007836:	4b1f      	ldr	r3, [pc, #124]	@ (80078b4 <Meas_Test+0x94>)
 8007838:	789b      	ldrb	r3, [r3, #2]
 800783a:	2201      	movs	r2, #1
 800783c:	4053      	eors	r3, r2
 800783e:	b2db      	uxtb	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01b      	beq.n	800787c <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007844:	f7ff fe97 	bl	8007576 <MIC_IsTestMeasurementDoneWrapper>
 8007848:	1e03      	subs	r3, r0, #0
 800784a:	d00b      	beq.n	8007864 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 800784c:	4b19      	ldr	r3, [pc, #100]	@ (80078b4 <Meas_Test+0x94>)
 800784e:	2201      	movs	r2, #1
 8007850:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007852:	23fa      	movs	r3, #250	@ 0xfa
 8007854:	011a      	lsls	r2, r3, #4
 8007856:	4918      	ldr	r1, [pc, #96]	@ (80078b8 <Meas_Test+0x98>)
 8007858:	23fa      	movs	r3, #250	@ 0xfa
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	0018      	movs	r0, r3
 800785e:	f003 f821 	bl	800a8a4 <SetStatusLED>
 8007862:	e00b      	b.n	800787c <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007864:	f002 f982 	bl	8009b6c <micSettlingComplete>
 8007868:	1e03      	subs	r3, r0, #0
 800786a:	d007      	beq.n	800787c <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 800786c:	23fa      	movs	r3, #250	@ 0xfa
 800786e:	011a      	lsls	r2, r3, #4
 8007870:	23fa      	movs	r3, #250	@ 0xfa
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	4810      	ldr	r0, [pc, #64]	@ (80078b8 <Meas_Test+0x98>)
 8007876:	0019      	movs	r1, r3
 8007878:	f003 f814 	bl	800a8a4 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 800787c:	4b0d      	ldr	r3, [pc, #52]	@ (80078b4 <Meas_Test+0x94>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d013      	beq.n	80078ac <Meas_Test+0x8c>
 8007884:	4b0b      	ldr	r3, [pc, #44]	@ (80078b4 <Meas_Test+0x94>)
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00f      	beq.n	80078ac <Meas_Test+0x8c>
 800788c:	4b09      	ldr	r3, [pc, #36]	@ (80078b4 <Meas_Test+0x94>)
 800788e:	78db      	ldrb	r3, [r3, #3]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <Meas_Test+0x8c>
 8007894:	4b07      	ldr	r3, [pc, #28]	@ (80078b4 <Meas_Test+0x94>)
 8007896:	789b      	ldrb	r3, [r3, #2]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d007      	beq.n	80078ac <Meas_Test+0x8c>
    Info("Test completed");
 800789c:	4a07      	ldr	r2, [pc, #28]	@ (80078bc <Meas_Test+0x9c>)
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <Meas_Test+0xa0>)
 80078a0:	0019      	movs	r1, r3
 80078a2:	2002      	movs	r0, #2
 80078a4:	f003 ff9c 	bl	800b7e0 <CreateLine>
    SetTestDone();
 80078a8:	f7ff fb68 	bl	8006f7c <SetTestDone>
  }
}
 80078ac:	46c0      	nop			@ (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	46c0      	nop			@ (mov r8, r8)
 80078b4:	20000f40 	.word	0x20000f40
 80078b8:	00000bb8 	.word	0x00000bb8
 80078bc:	080201d4 	.word	0x080201d4
 80078c0:	080201d0 	.word	0x080201d0

080078c4 <ResetMeasurements>:
void ResetMeasurements(void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 80078c8:	4b0b      	ldr	r3, [pc, #44]	@ (80078f8 <ResetMeasurements+0x34>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 80078ce:	4b0a      	ldr	r3, [pc, #40]	@ (80078f8 <ResetMeasurements+0x34>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 80078d4:	4b08      	ldr	r3, [pc, #32]	@ (80078f8 <ResetMeasurements+0x34>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 80078da:	4b07      	ldr	r3, [pc, #28]	@ (80078f8 <ResetMeasurements+0x34>)
 80078dc:	2200      	movs	r2, #0
 80078de:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 80078e0:	4b05      	ldr	r3, [pc, #20]	@ (80078f8 <ResetMeasurements+0x34>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 80078e6:	4b04      	ldr	r3, [pc, #16]	@ (80078f8 <ResetMeasurements+0x34>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 80078ec:	4b02      	ldr	r3, [pc, #8]	@ (80078f8 <ResetMeasurements+0x34>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	73da      	strb	r2, [r3, #15]
}
 80078f2:	46c0      	nop			@ (mov r8, r8)
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000efc 	.word	0x20000efc

080078fc <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007900:	4b18      	ldr	r3, [pc, #96]	@ (8007964 <MeasurementsCompleted+0x68>)
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	e024      	b.n	8007952 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007908:	4b16      	ldr	r3, [pc, #88]	@ (8007964 <MeasurementsCompleted+0x68>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	4a16      	ldr	r2, [pc, #88]	@ (8007968 <MeasurementsCompleted+0x6c>)
 800790e:	011b      	lsls	r3, r3, #4
 8007910:	18d3      	adds	r3, r2, r3
 8007912:	330c      	adds	r3, #12
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d015      	beq.n	8007946 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800791a:	4b12      	ldr	r3, [pc, #72]	@ (8007964 <MeasurementsCompleted+0x68>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	4a12      	ldr	r2, [pc, #72]	@ (8007968 <MeasurementsCompleted+0x6c>)
 8007920:	011b      	lsls	r3, r3, #4
 8007922:	18d3      	adds	r3, r2, r3
 8007924:	3304      	adds	r3, #4
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4798      	blx	r3
 800792a:	1e03      	subs	r3, r0, #0
 800792c:	d009      	beq.n	8007942 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 800792e:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <MeasurementsCompleted+0x68>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	4a0d      	ldr	r2, [pc, #52]	@ (8007968 <MeasurementsCompleted+0x6c>)
 8007934:	011b      	lsls	r3, r3, #4
 8007936:	18d3      	adds	r3, r2, r3
 8007938:	3308      	adds	r3, #8
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2201      	movs	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e001      	b.n	8007946 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007942:	2300      	movs	r3, #0
 8007944:	e00a      	b.n	800795c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007946:	4b07      	ldr	r3, [pc, #28]	@ (8007964 <MeasurementsCompleted+0x68>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4b05      	ldr	r3, [pc, #20]	@ (8007964 <MeasurementsCompleted+0x68>)
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	4b04      	ldr	r3, [pc, #16]	@ (8007964 <MeasurementsCompleted+0x68>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b02      	cmp	r3, #2
 8007958:	d9d6      	bls.n	8007908 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 800795a:	2301      	movs	r3, #1
}
 800795c:	0018      	movs	r0, r3
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	46c0      	nop			@ (mov r8, r8)
 8007964:	20000f44 	.word	0x20000f44
 8007968:	20000f0c 	.word	0x20000f0c

0800796c <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b085      	sub	sp, #20
 8007970:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8007972:	4b7d      	ldr	r3, [pc, #500]	@ (8007b68 <Mic_Upkeep+0x1fc>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b03      	cmp	r3, #3
 8007978:	d100      	bne.n	800797c <Mic_Upkeep+0x10>
 800797a:	e0c0      	b.n	8007afe <Mic_Upkeep+0x192>
 800797c:	dd00      	ble.n	8007980 <Mic_Upkeep+0x14>
 800797e:	e0dd      	b.n	8007b3c <Mic_Upkeep+0x1d0>
 8007980:	2b02      	cmp	r3, #2
 8007982:	d037      	beq.n	80079f4 <Mic_Upkeep+0x88>
 8007984:	dd00      	ble.n	8007988 <Mic_Upkeep+0x1c>
 8007986:	e0d9      	b.n	8007b3c <Mic_Upkeep+0x1d0>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <Mic_Upkeep+0x26>
 800798c:	2b01      	cmp	r3, #1
 800798e:	d014      	beq.n	80079ba <Mic_Upkeep+0x4e>
 8007990:	e0d4      	b.n	8007b3c <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007992:	2001      	movs	r0, #1
 8007994:	f002 f90e 	bl	8009bb4 <enableMicrophone>
 8007998:	0003      	movs	r3, r0
 800799a:	001a      	movs	r2, r3
 800799c:	2301      	movs	r3, #1
 800799e:	4053      	eors	r3, r2
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80079a6:	4a71      	ldr	r2, [pc, #452]	@ (8007b6c <Mic_Upkeep+0x200>)
 80079a8:	4b71      	ldr	r3, [pc, #452]	@ (8007b70 <Mic_Upkeep+0x204>)
 80079aa:	21d4      	movs	r1, #212	@ 0xd4
 80079ac:	0018      	movs	r0, r3
 80079ae:	f003 ffc3 	bl	800b938 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 80079b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007b68 <Mic_Upkeep+0x1fc>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 80079b8:	e0cf      	b.n	8007b5a <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 80079ba:	f002 f8d7 	bl	8009b6c <micSettlingComplete>
 80079be:	1e03      	subs	r3, r0, #0
 80079c0:	d105      	bne.n	80079ce <Mic_Upkeep+0x62>
 80079c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007b74 <Mic_Upkeep+0x208>)
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d100      	bne.n	80079ce <Mic_Upkeep+0x62>
 80079cc:	e0c0      	b.n	8007b50 <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 80079ce:	f002 f95b 	bl	8009c88 <startSPLcalculation>
 80079d2:	0003      	movs	r3, r0
 80079d4:	001a      	movs	r2, r3
 80079d6:	2301      	movs	r3, #1
 80079d8:	4053      	eors	r3, r2
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 80079e0:	4a62      	ldr	r2, [pc, #392]	@ (8007b6c <Mic_Upkeep+0x200>)
 80079e2:	4b63      	ldr	r3, [pc, #396]	@ (8007b70 <Mic_Upkeep+0x204>)
 80079e4:	21e0      	movs	r1, #224	@ 0xe0
 80079e6:	0018      	movs	r0, r3
 80079e8:	f003 ffa6 	bl	800b938 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 80079ec:	4b5e      	ldr	r3, [pc, #376]	@ (8007b68 <Mic_Upkeep+0x1fc>)
 80079ee:	2202      	movs	r2, #2
 80079f0:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 80079f2:	e0ad      	b.n	8007b50 <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 80079f4:	4b60      	ldr	r3, [pc, #384]	@ (8007b78 <Mic_Upkeep+0x20c>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	2101      	movs	r1, #1
 80079fa:	0018      	movs	r0, r3
 80079fc:	f001 ff98 	bl	8009930 <getSoundData>
 8007a00:	1e03      	subs	r3, r0, #0
 8007a02:	d100      	bne.n	8007a06 <Mic_Upkeep+0x9a>
 8007a04:	e0a6      	b.n	8007b54 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 8007a06:	f002 f891 	bl	8009b2c <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8007b78 <Mic_Upkeep+0x20c>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007a10:	4b59      	ldr	r3, [pc, #356]	@ (8007b78 <Mic_Upkeep+0x20c>)
 8007a12:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007a14:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007a16:	4b58      	ldr	r3, [pc, #352]	@ (8007b78 <Mic_Upkeep+0x20c>)
 8007a18:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007a1a:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8007a1c:	4b56      	ldr	r3, [pc, #344]	@ (8007b78 <Mic_Upkeep+0x20c>)
 8007a1e:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007a20:	4856      	ldr	r0, [pc, #344]	@ (8007b7c <Mic_Upkeep+0x210>)
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	0023      	movs	r3, r4
 8007a26:	f000 faf5 	bl	8008014 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8007a2a:	4b53      	ldr	r3, [pc, #332]	@ (8007b78 <Mic_Upkeep+0x20c>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	001a      	movs	r2, r3
 8007a30:	4b51      	ldr	r3, [pc, #324]	@ (8007b78 <Mic_Upkeep+0x20c>)
 8007a32:	785b      	ldrb	r3, [r3, #1]
 8007a34:	4952      	ldr	r1, [pc, #328]	@ (8007b80 <Mic_Upkeep+0x214>)
 8007a36:	0038      	movs	r0, r7
 8007a38:	f014 fd54 	bl	801c4e4 <siprintf>

      dBValue = atof(dBbuffer);
 8007a3c:	003b      	movs	r3, r7
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f013 f900 	bl	801ac44 <atof>
 8007a44:	0002      	movs	r2, r0
 8007a46:	000b      	movs	r3, r1
 8007a48:	0010      	movs	r0, r2
 8007a4a:	0019      	movs	r1, r3
 8007a4c:	f7fb fd52 	bl	80034f4 <__aeabi_d2f>
 8007a50:	1c02      	adds	r2, r0, #0
 8007a52:	4b4c      	ldr	r3, [pc, #304]	@ (8007b84 <Mic_Upkeep+0x218>)
 8007a54:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8007a56:	4b4b      	ldr	r3, [pc, #300]	@ (8007b84 <Mic_Upkeep+0x218>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	494b      	ldr	r1, [pc, #300]	@ (8007b88 <Mic_Upkeep+0x21c>)
 8007a5c:	1c18      	adds	r0, r3, #0
 8007a5e:	f7f9 fa9f 	bl	8000fa0 <__aeabi_fmul>
 8007a62:	1c03      	adds	r3, r0, #0
 8007a64:	1c18      	adds	r0, r3, #0
 8007a66:	f7fb fcfd 	bl	8003464 <__aeabi_f2d>
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	4b47      	ldr	r3, [pc, #284]	@ (8007b8c <Mic_Upkeep+0x220>)
 8007a6e:	f7f9 fe3d 	bl	80016ec <__aeabi_dadd>
 8007a72:	0002      	movs	r2, r0
 8007a74:	000b      	movs	r3, r1
 8007a76:	0010      	movs	r0, r2
 8007a78:	0019      	movs	r1, r3
 8007a7a:	f7fb fc65 	bl	8003348 <__aeabi_d2iz>
 8007a7e:	0003      	movs	r3, r0
 8007a80:	0018      	movs	r0, r3
 8007a82:	f7fb fc9d 	bl	80033c0 <__aeabi_i2d>
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b41      	ldr	r3, [pc, #260]	@ (8007b90 <Mic_Upkeep+0x224>)
 8007a8a:	f7fa f993 	bl	8001db4 <__aeabi_ddiv>
 8007a8e:	0002      	movs	r2, r0
 8007a90:	000b      	movs	r3, r1
 8007a92:	0010      	movs	r0, r2
 8007a94:	0019      	movs	r1, r3
 8007a96:	f7fb fd2d 	bl	80034f4 <__aeabi_d2f>
 8007a9a:	1c02      	adds	r2, r0, #0
 8007a9c:	4b39      	ldr	r3, [pc, #228]	@ (8007b84 <Mic_Upkeep+0x218>)
 8007a9e:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8007aa0:	f000 f966 	bl	8007d70 <MIC_Print>
      if (!startSPLcalculation()) {
 8007aa4:	f002 f8f0 	bl	8009c88 <startSPLcalculation>
 8007aa8:	0003      	movs	r3, r0
 8007aaa:	001a      	movs	r2, r3
 8007aac:	2301      	movs	r3, #1
 8007aae:	4053      	eors	r3, r2
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 8007ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8007b6c <Mic_Upkeep+0x200>)
 8007ab8:	4b2d      	ldr	r3, [pc, #180]	@ (8007b70 <Mic_Upkeep+0x204>)
 8007aba:	21f9      	movs	r1, #249	@ 0xf9
 8007abc:	0018      	movs	r0, r3
 8007abe:	f003 ff3b 	bl	800b938 <errorHandler>
      }
      if (!enableMicrophone(false))
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f002 f876 	bl	8009bb4 <enableMicrophone>
 8007ac8:	0003      	movs	r3, r0
 8007aca:	001a      	movs	r2, r3
 8007acc:	2301      	movs	r3, #1
 8007ace:	4053      	eors	r3, r2
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d005      	beq.n	8007ae2 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007ad6:	4a25      	ldr	r2, [pc, #148]	@ (8007b6c <Mic_Upkeep+0x200>)
 8007ad8:	4b25      	ldr	r3, [pc, #148]	@ (8007b70 <Mic_Upkeep+0x204>)
 8007ada:	21fd      	movs	r1, #253	@ 0xfd
 8007adc:	0018      	movs	r0, r3
 8007ade:	f003 ff2b 	bl	800b938 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 8007ae2:	f004 fa11 	bl	800bf08 <HAL_GetTick>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	22fa      	movs	r2, #250	@ 0xfa
 8007aea:	0092      	lsls	r2, r2, #2
 8007aec:	189a      	adds	r2, r3, r2
 8007aee:	4b29      	ldr	r3, [pc, #164]	@ (8007b94 <Mic_Upkeep+0x228>)
 8007af0:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8007af2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b68 <Mic_Upkeep+0x1fc>)
 8007af4:	2203      	movs	r2, #3
 8007af6:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8007af8:	f002 ffcc 	bl	800aa94 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 8007afc:	e02a      	b.n	8007b54 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007afe:	4b25      	ldr	r3, [pc, #148]	@ (8007b94 <Mic_Upkeep+0x228>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	0018      	movs	r0, r3
 8007b04:	f003 fe16 	bl	800b734 <TimestampIsReached>
 8007b08:	1e03      	subs	r3, r0, #0
 8007b0a:	d025      	beq.n	8007b58 <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	f002 f851 	bl	8009bb4 <enableMicrophone>
 8007b12:	0003      	movs	r3, r0
 8007b14:	001a      	movs	r2, r3
 8007b16:	2301      	movs	r3, #1
 8007b18:	4053      	eors	r3, r2
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d007      	beq.n	8007b30 <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007b20:	4a12      	ldr	r2, [pc, #72]	@ (8007b6c <Mic_Upkeep+0x200>)
 8007b22:	230c      	movs	r3, #12
 8007b24:	33ff      	adds	r3, #255	@ 0xff
 8007b26:	0019      	movs	r1, r3
 8007b28:	4b11      	ldr	r3, [pc, #68]	@ (8007b70 <Mic_Upkeep+0x204>)
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f003 ff04 	bl	800b938 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007b30:	4b0d      	ldr	r3, [pc, #52]	@ (8007b68 <Mic_Upkeep+0x1fc>)
 8007b32:	2201      	movs	r2, #1
 8007b34:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007b36:	f002 ff95 	bl	800aa64 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 8007b3a:	e00d      	b.n	8007b58 <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 8007b3c:	4a16      	ldr	r2, [pc, #88]	@ (8007b98 <Mic_Upkeep+0x22c>)
 8007b3e:	4b17      	ldr	r3, [pc, #92]	@ (8007b9c <Mic_Upkeep+0x230>)
 8007b40:	0019      	movs	r1, r3
 8007b42:	2003      	movs	r0, #3
 8007b44:	f003 fe4c 	bl	800b7e0 <CreateLine>
    MicState = MIC_STATE_INIT;
 8007b48:	4b07      	ldr	r3, [pc, #28]	@ (8007b68 <Mic_Upkeep+0x1fc>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 8007b4e:	e004      	b.n	8007b5a <Mic_Upkeep+0x1ee>
    break;
 8007b50:	46c0      	nop			@ (mov r8, r8)
 8007b52:	e002      	b.n	8007b5a <Mic_Upkeep+0x1ee>
    break;
 8007b54:	46c0      	nop			@ (mov r8, r8)
 8007b56:	e000      	b.n	8007b5a <Mic_Upkeep+0x1ee>
    break;
 8007b58:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007b5a:	4b03      	ldr	r3, [pc, #12]	@ (8007b68 <Mic_Upkeep+0x1fc>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b003      	add	sp, #12
 8007b64:	bd90      	pop	{r4, r7, pc}
 8007b66:	46c0      	nop			@ (mov r8, r8)
 8007b68:	20000f62 	.word	0x20000f62
 8007b6c:	080201e4 	.word	0x080201e4
 8007b70:	08020a54 	.word	0x08020a54
 8007b74:	20001284 	.word	0x20001284
 8007b78:	20000f50 	.word	0x20000f50
 8007b7c:	08020200 	.word	0x08020200
 8007b80:	0802022c 	.word	0x0802022c
 8007b84:	20000f94 	.word	0x20000f94
 8007b88:	42c80000 	.word	0x42c80000
 8007b8c:	3fe00000 	.word	0x3fe00000
 8007b90:	40590000 	.word	0x40590000
 8007b94:	20000f4c 	.word	0x20000f4c
 8007b98:	08020234 	.word	0x08020234
 8007b9c:	08020174 	.word	0x08020174

08007ba0 <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007ba0:	b5b0      	push	{r4, r5, r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b06      	cmp	r3, #6
 8007bac:	d868      	bhi.n	8007c80 <Meas_Upkeep+0xe0>
 8007bae:	009a      	lsls	r2, r3, #2
 8007bb0:	4b3a      	ldr	r3, [pc, #232]	@ (8007c9c <Meas_Upkeep+0xfc>)
 8007bb2:	18d3      	adds	r3, r2, r3
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007bb8:	4a39      	ldr	r2, [pc, #228]	@ (8007ca0 <Meas_Upkeep+0x100>)
 8007bba:	4b3a      	ldr	r3, [pc, #232]	@ (8007ca4 <Meas_Upkeep+0x104>)
 8007bbc:	0019      	movs	r1, r3
 8007bbe:	2003      	movs	r0, #3
 8007bc0:	f003 fe0e 	bl	800b7e0 <CreateLine>
    break;
 8007bc4:	e063      	b.n	8007c8e <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007bc6:	f7ff fe7d 	bl	80078c4 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8007bca:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007bcc:	2201      	movs	r2, #1
 8007bce:	701a      	strb	r2, [r3, #0]
    break;
 8007bd0:	e05d      	b.n	8007c8e <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8007bd2:	f7ff fdfd 	bl	80077d0 <StartMeasurements>
    SetMeasurementIndicator();
 8007bd6:	f002 ff17 	bl	800aa08 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8007bda:	4b2f      	ldr	r3, [pc, #188]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007bdc:	2202      	movs	r2, #2
 8007bde:	701a      	strb	r2, [r3, #0]
   break;
 8007be0:	e055      	b.n	8007c8e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8007be2:	f7ff fe8b 	bl	80078fc <MeasurementsCompleted>
 8007be6:	1e03      	subs	r3, r0, #0
 8007be8:	d04e      	beq.n	8007c88 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007bea:	4b2b      	ldr	r3, [pc, #172]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007bec:	2203      	movs	r2, #3
 8007bee:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007bf0:	e04a      	b.n	8007c88 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8007bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8007ca8 <Meas_Upkeep+0x108>)
 8007bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8007ca4 <Meas_Upkeep+0x104>)
 8007bf6:	0019      	movs	r1, r3
 8007bf8:	2003      	movs	r0, #3
 8007bfa:	f003 fdf1 	bl	800b7e0 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8007cac <Meas_Upkeep+0x10c>)
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	4a2b      	ldr	r2, [pc, #172]	@ (8007cb0 <Meas_Upkeep+0x110>)
 8007c04:	4927      	ldr	r1, [pc, #156]	@ (8007ca4 <Meas_Upkeep+0x104>)
 8007c06:	2003      	movs	r0, #3
 8007c08:	f003 fdea 	bl	800b7e0 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007c0c:	4b27      	ldr	r3, [pc, #156]	@ (8007cac <Meas_Upkeep+0x10c>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	1c18      	adds	r0, r3, #0
 8007c12:	f7fb fc27 	bl	8003464 <__aeabi_f2d>
 8007c16:	0004      	movs	r4, r0
 8007c18:	000d      	movs	r5, r1
 8007c1a:	4b24      	ldr	r3, [pc, #144]	@ (8007cac <Meas_Upkeep+0x10c>)
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	1c18      	adds	r0, r3, #0
 8007c20:	f7fb fc20 	bl	8003464 <__aeabi_f2d>
 8007c24:	0002      	movs	r2, r0
 8007c26:	000b      	movs	r3, r1
 8007c28:	4822      	ldr	r0, [pc, #136]	@ (8007cb4 <Meas_Upkeep+0x114>)
 8007c2a:	491e      	ldr	r1, [pc, #120]	@ (8007ca4 <Meas_Upkeep+0x104>)
 8007c2c:	9202      	str	r2, [sp, #8]
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	9400      	str	r4, [sp, #0]
 8007c32:	9501      	str	r5, [sp, #4]
 8007c34:	0002      	movs	r2, r0
 8007c36:	2003      	movs	r0, #3
 8007c38:	f003 fdd2 	bl	800b7e0 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cac <Meas_Upkeep+0x10c>)
 8007c3e:	6858      	ldr	r0, [r3, #4]
 8007c40:	4b1a      	ldr	r3, [pc, #104]	@ (8007cac <Meas_Upkeep+0x10c>)
 8007c42:	6819      	ldr	r1, [r3, #0]
 8007c44:	4b19      	ldr	r3, [pc, #100]	@ (8007cac <Meas_Upkeep+0x10c>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	f7fb fe44 	bl	80038d8 <setMeasurement>
    ResetMeasurementIndicator();
 8007c50:	f002 fef2 	bl	800aa38 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007c54:	f004 f958 	bl	800bf08 <HAL_GetTick>
 8007c58:	0003      	movs	r3, r0
 8007c5a:	4a17      	ldr	r2, [pc, #92]	@ (8007cb8 <Meas_Upkeep+0x118>)
 8007c5c:	189a      	adds	r2, r3, r2
 8007c5e:	4b17      	ldr	r3, [pc, #92]	@ (8007cbc <Meas_Upkeep+0x11c>)
 8007c60:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007c62:	4b0d      	ldr	r3, [pc, #52]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007c64:	2206      	movs	r2, #6
 8007c66:	701a      	strb	r2, [r3, #0]
    break;
 8007c68:	e011      	b.n	8007c8e <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007c6a:	4b14      	ldr	r3, [pc, #80]	@ (8007cbc <Meas_Upkeep+0x11c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f003 fd60 	bl	800b734 <TimestampIsReached>
 8007c74:	1e03      	subs	r3, r0, #0
 8007c76:	d009      	beq.n	8007c8c <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007c78:	4b07      	ldr	r3, [pc, #28]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007c7e:	e005      	b.n	8007c8c <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007c80:	4b05      	ldr	r3, [pc, #20]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
    break;
 8007c86:	e002      	b.n	8007c8e <Meas_Upkeep+0xee>
    break;
 8007c88:	46c0      	nop			@ (mov r8, r8)
 8007c8a:	e000      	b.n	8007c8e <Meas_Upkeep+0xee>
    break;
 8007c8c:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007c8e:	4b02      	ldr	r3, [pc, #8]	@ (8007c98 <Meas_Upkeep+0xf8>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
}
 8007c92:	0018      	movs	r0, r3
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bdb0      	pop	{r4, r5, r7, pc}
 8007c98:	20000f63 	.word	0x20000f63
 8007c9c:	08020a38 	.word	0x08020a38
 8007ca0:	08020254 	.word	0x08020254
 8007ca4:	08020174 	.word	0x08020174
 8007ca8:	08020274 	.word	0x08020274
 8007cac:	20000efc 	.word	0x20000efc
 8007cb0:	08020288 	.word	0x08020288
 8007cb4:	080202a0 	.word	0x080202a0
 8007cb8:	00002710 	.word	0x00002710
 8007cbc:	20000f48 	.word	0x20000f48

08007cc0 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	1d3b      	adds	r3, r7, #4
 8007cc8:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007cca:	240f      	movs	r4, #15
 8007ccc:	193b      	adds	r3, r7, r4
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007cd2:	4b20      	ldr	r3, [pc, #128]	@ (8007d54 <Meas_SetEnabledSensors+0x94>)
 8007cd4:	1d3a      	adds	r2, r7, #4
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007cda:	193b      	adds	r3, r7, r4
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	193a      	adds	r2, r7, r4
 8007ce0:	1c59      	adds	r1, r3, #1
 8007ce2:	7011      	strb	r1, [r2, #0]
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	1d3b      	adds	r3, r7, #4
 8007ce8:	7819      	ldrb	r1, [r3, #0]
 8007cea:	4a1b      	ldr	r2, [pc, #108]	@ (8007d58 <Meas_SetEnabledSensors+0x98>)
 8007cec:	0103      	lsls	r3, r0, #4
 8007cee:	18d3      	adds	r3, r2, r3
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	1c0a      	adds	r2, r1, #0
 8007cf4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007cf6:	193b      	adds	r3, r7, r4
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	193a      	adds	r2, r7, r4
 8007cfc:	1c59      	adds	r1, r3, #1
 8007cfe:	7011      	strb	r1, [r2, #0]
 8007d00:	0018      	movs	r0, r3
 8007d02:	1d3b      	adds	r3, r7, #4
 8007d04:	7859      	ldrb	r1, [r3, #1]
 8007d06:	4a14      	ldr	r2, [pc, #80]	@ (8007d58 <Meas_SetEnabledSensors+0x98>)
 8007d08:	0103      	lsls	r3, r0, #4
 8007d0a:	18d3      	adds	r3, r2, r3
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	1c0a      	adds	r2, r1, #0
 8007d10:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007d12:	193b      	adds	r3, r7, r4
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	193a      	adds	r2, r7, r4
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	7011      	strb	r1, [r2, #0]
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	1d3b      	adds	r3, r7, #4
 8007d20:	7899      	ldrb	r1, [r3, #2]
 8007d22:	4a0d      	ldr	r2, [pc, #52]	@ (8007d58 <Meas_SetEnabledSensors+0x98>)
 8007d24:	0103      	lsls	r3, r0, #4
 8007d26:	18d3      	adds	r3, r2, r3
 8007d28:	330c      	adds	r3, #12
 8007d2a:	1c0a      	adds	r2, r1, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007d2e:	193b      	adds	r3, r7, r4
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	193a      	adds	r2, r7, r4
 8007d34:	1c59      	adds	r1, r3, #1
 8007d36:	7011      	strb	r1, [r2, #0]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	1d3b      	adds	r3, r7, #4
 8007d3c:	78d9      	ldrb	r1, [r3, #3]
 8007d3e:	4a06      	ldr	r2, [pc, #24]	@ (8007d58 <Meas_SetEnabledSensors+0x98>)
 8007d40:	0103      	lsls	r3, r0, #4
 8007d42:	18d3      	adds	r3, r2, r3
 8007d44:	330c      	adds	r3, #12
 8007d46:	1c0a      	adds	r2, r1, #0
 8007d48:	701a      	strb	r2, [r3, #0]
}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b005      	add	sp, #20
 8007d50:	bd90      	pop	{r4, r7, pc}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	20000f3c 	.word	0x20000f3c
 8007d58:	20000f0c 	.word	0x20000f0c

08007d5c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007d60:	4b02      	ldr	r3, [pc, #8]	@ (8007d6c <SetESPMeasurementDone+0x10>)
 8007d62:	2201      	movs	r2, #1
 8007d64:	70da      	strb	r2, [r3, #3]
}
 8007d66:	46c0      	nop			@ (mov r8, r8)
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	20000f40 	.word	0x20000f40

08007d70 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007d76:	4b81      	ldr	r3, [pc, #516]	@ (8007f7c <MIC_Print+0x20c>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b81      	ldr	r3, [pc, #516]	@ (8007f80 <MIC_Print+0x210>)
 8007d7c:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007d7e:	4b81      	ldr	r3, [pc, #516]	@ (8007f84 <MIC_Print+0x214>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b09      	cmp	r3, #9
 8007d84:	d80e      	bhi.n	8007da4 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007d86:	4b7f      	ldr	r3, [pc, #508]	@ (8007f84 <MIC_Print+0x214>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	001a      	movs	r2, r3
 8007d8c:	4b7c      	ldr	r3, [pc, #496]	@ (8007f80 <MIC_Print+0x210>)
 8007d8e:	6819      	ldr	r1, [r3, #0]
 8007d90:	4b7d      	ldr	r3, [pc, #500]	@ (8007f88 <MIC_Print+0x218>)
 8007d92:	0092      	lsls	r2, r2, #2
 8007d94:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007d96:	4b7b      	ldr	r3, [pc, #492]	@ (8007f84 <MIC_Print+0x214>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	4b79      	ldr	r3, [pc, #484]	@ (8007f84 <MIC_Print+0x214>)
 8007da0:	701a      	strb	r2, [r3, #0]
 8007da2:	e013      	b.n	8007dcc <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007da4:	4b77      	ldr	r3, [pc, #476]	@ (8007f84 <MIC_Print+0x214>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007daa:	4b76      	ldr	r3, [pc, #472]	@ (8007f84 <MIC_Print+0x214>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	001a      	movs	r2, r3
 8007db0:	4b73      	ldr	r3, [pc, #460]	@ (8007f80 <MIC_Print+0x210>)
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	4b74      	ldr	r3, [pc, #464]	@ (8007f88 <MIC_Print+0x218>)
 8007db6:	0092      	lsls	r2, r2, #2
 8007db8:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007dba:	4b72      	ldr	r3, [pc, #456]	@ (8007f84 <MIC_Print+0x214>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	4b70      	ldr	r3, [pc, #448]	@ (8007f84 <MIC_Print+0x214>)
 8007dc4:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007dc6:	4b71      	ldr	r3, [pc, #452]	@ (8007f8c <MIC_Print+0x21c>)
 8007dc8:	2201      	movs	r2, #1
 8007dca:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8007dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8007f8c <MIC_Print+0x21c>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	4053      	eors	r3, r2
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 8007dda:	4b69      	ldr	r3, [pc, #420]	@ (8007f80 <MIC_Print+0x210>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	1c18      	adds	r0, r3, #0
 8007de0:	f7fb fd96 	bl	8003910 <setMic>
 8007de4:	e02d      	b.n	8007e42 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8007de6:	4b6a      	ldr	r3, [pc, #424]	@ (8007f90 <MIC_Print+0x220>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007dec:	1dfb      	adds	r3, r7, #7
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
 8007df2:	e013      	b.n	8007e1c <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8007df4:	1dfb      	adds	r3, r7, #7
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	4b63      	ldr	r3, [pc, #396]	@ (8007f88 <MIC_Print+0x218>)
 8007dfa:	0092      	lsls	r2, r2, #2
 8007dfc:	58d2      	ldr	r2, [r2, r3]
 8007dfe:	4b64      	ldr	r3, [pc, #400]	@ (8007f90 <MIC_Print+0x220>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	1c19      	adds	r1, r3, #0
 8007e04:	1c10      	adds	r0, r2, #0
 8007e06:	f7f8 fd5b 	bl	80008c0 <__aeabi_fadd>
 8007e0a:	1c03      	adds	r3, r0, #0
 8007e0c:	1c1a      	adds	r2, r3, #0
 8007e0e:	4b60      	ldr	r3, [pc, #384]	@ (8007f90 <MIC_Print+0x220>)
 8007e10:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007e12:	1dfb      	adds	r3, r7, #7
 8007e14:	781a      	ldrb	r2, [r3, #0]
 8007e16:	1dfb      	adds	r3, r7, #7
 8007e18:	3201      	adds	r2, #1
 8007e1a:	701a      	strb	r2, [r3, #0]
 8007e1c:	1dfb      	adds	r3, r7, #7
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b09      	cmp	r3, #9
 8007e22:	d9e7      	bls.n	8007df4 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8007e24:	4b5a      	ldr	r3, [pc, #360]	@ (8007f90 <MIC_Print+0x220>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	495a      	ldr	r1, [pc, #360]	@ (8007f94 <MIC_Print+0x224>)
 8007e2a:	1c18      	adds	r0, r3, #0
 8007e2c:	f7f8 fed2 	bl	8000bd4 <__aeabi_fdiv>
 8007e30:	1c03      	adds	r3, r0, #0
 8007e32:	1c1a      	adds	r2, r3, #0
 8007e34:	4b56      	ldr	r3, [pc, #344]	@ (8007f90 <MIC_Print+0x220>)
 8007e36:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007e38:	4b55      	ldr	r3, [pc, #340]	@ (8007f90 <MIC_Print+0x220>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	1c18      	adds	r0, r3, #0
 8007e3e:	f7fb fd67 	bl	8003910 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8007e42:	4b4f      	ldr	r3, [pc, #316]	@ (8007f80 <MIC_Print+0x210>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4954      	ldr	r1, [pc, #336]	@ (8007f98 <MIC_Print+0x228>)
 8007e48:	1c18      	adds	r0, r3, #0
 8007e4a:	f7f8 fb8f 	bl	800056c <__aeabi_fcmpge>
 8007e4e:	1e03      	subs	r3, r0, #0
 8007e50:	d004      	beq.n	8007e5c <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8007e52:	2201      	movs	r2, #1
 8007e54:	2101      	movs	r1, #1
 8007e56:	2001      	movs	r0, #1
 8007e58:	f002 fd58 	bl	800a90c <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8007e5c:	4b48      	ldr	r3, [pc, #288]	@ (8007f80 <MIC_Print+0x210>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	494d      	ldr	r1, [pc, #308]	@ (8007f98 <MIC_Print+0x228>)
 8007e62:	1c18      	adds	r0, r3, #0
 8007e64:	f7f8 fb64 	bl	8000530 <__aeabi_fcmplt>
 8007e68:	1e03      	subs	r3, r0, #0
 8007e6a:	d00c      	beq.n	8007e86 <MIC_Print+0x116>
 8007e6c:	4b44      	ldr	r3, [pc, #272]	@ (8007f80 <MIC_Print+0x210>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	494a      	ldr	r1, [pc, #296]	@ (8007f9c <MIC_Print+0x22c>)
 8007e72:	1c18      	adds	r0, r3, #0
 8007e74:	f7f8 fb7a 	bl	800056c <__aeabi_fcmpge>
 8007e78:	1e03      	subs	r3, r0, #0
 8007e7a:	d004      	beq.n	8007e86 <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	2001      	movs	r0, #1
 8007e82:	f002 fd43 	bl	800a90c <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 8007e86:	4b3e      	ldr	r3, [pc, #248]	@ (8007f80 <MIC_Print+0x210>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4944      	ldr	r1, [pc, #272]	@ (8007f9c <MIC_Print+0x22c>)
 8007e8c:	1c18      	adds	r0, r3, #0
 8007e8e:	f7f8 fb4f 	bl	8000530 <__aeabi_fcmplt>
 8007e92:	1e03      	subs	r3, r0, #0
 8007e94:	d00c      	beq.n	8007eb0 <MIC_Print+0x140>
 8007e96:	4b3a      	ldr	r3, [pc, #232]	@ (8007f80 <MIC_Print+0x210>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4941      	ldr	r1, [pc, #260]	@ (8007fa0 <MIC_Print+0x230>)
 8007e9c:	1c18      	adds	r0, r3, #0
 8007e9e:	f7f8 fb65 	bl	800056c <__aeabi_fcmpge>
 8007ea2:	1e03      	subs	r3, r0, #0
 8007ea4:	d004      	beq.n	8007eb0 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	2001      	movs	r0, #1
 8007eac:	f002 fd2e 	bl	800a90c <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 8007eb0:	4b33      	ldr	r3, [pc, #204]	@ (8007f80 <MIC_Print+0x210>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	493a      	ldr	r1, [pc, #232]	@ (8007fa0 <MIC_Print+0x230>)
 8007eb6:	1c18      	adds	r0, r3, #0
 8007eb8:	f7f8 fb3a 	bl	8000530 <__aeabi_fcmplt>
 8007ebc:	1e03      	subs	r3, r0, #0
 8007ebe:	d00c      	beq.n	8007eda <MIC_Print+0x16a>
 8007ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8007f80 <MIC_Print+0x210>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4937      	ldr	r1, [pc, #220]	@ (8007fa4 <MIC_Print+0x234>)
 8007ec6:	1c18      	adds	r0, r3, #0
 8007ec8:	f7f8 fb50 	bl	800056c <__aeabi_fcmpge>
 8007ecc:	1e03      	subs	r3, r0, #0
 8007ece:	d004      	beq.n	8007eda <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	f002 fd19 	bl	800a90c <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 8007eda:	4b29      	ldr	r3, [pc, #164]	@ (8007f80 <MIC_Print+0x210>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4931      	ldr	r1, [pc, #196]	@ (8007fa4 <MIC_Print+0x234>)
 8007ee0:	1c18      	adds	r0, r3, #0
 8007ee2:	f7f8 fb25 	bl	8000530 <__aeabi_fcmplt>
 8007ee6:	1e03      	subs	r3, r0, #0
 8007ee8:	d00c      	beq.n	8007f04 <MIC_Print+0x194>
 8007eea:	4b25      	ldr	r3, [pc, #148]	@ (8007f80 <MIC_Print+0x210>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	492e      	ldr	r1, [pc, #184]	@ (8007fa8 <MIC_Print+0x238>)
 8007ef0:	1c18      	adds	r0, r3, #0
 8007ef2:	f7f8 fb3b 	bl	800056c <__aeabi_fcmpge>
 8007ef6:	1e03      	subs	r3, r0, #0
 8007ef8:	d004      	beq.n	8007f04 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 8007efa:	2201      	movs	r2, #1
 8007efc:	2100      	movs	r1, #0
 8007efe:	2000      	movs	r0, #0
 8007f00:	f002 fd04 	bl	800a90c <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8007f04:	4b1e      	ldr	r3, [pc, #120]	@ (8007f80 <MIC_Print+0x210>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4927      	ldr	r1, [pc, #156]	@ (8007fa8 <MIC_Print+0x238>)
 8007f0a:	1c18      	adds	r0, r3, #0
 8007f0c:	f7f8 fb10 	bl	8000530 <__aeabi_fcmplt>
 8007f10:	1e03      	subs	r3, r0, #0
 8007f12:	d00c      	beq.n	8007f2e <MIC_Print+0x1be>
 8007f14:	4b1a      	ldr	r3, [pc, #104]	@ (8007f80 <MIC_Print+0x210>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4924      	ldr	r1, [pc, #144]	@ (8007fac <MIC_Print+0x23c>)
 8007f1a:	1c18      	adds	r0, r3, #0
 8007f1c:	f7f8 fb26 	bl	800056c <__aeabi_fcmpge>
 8007f20:	1e03      	subs	r3, r0, #0
 8007f22:	d004      	beq.n	8007f2e <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8007f24:	2201      	movs	r2, #1
 8007f26:	2101      	movs	r1, #1
 8007f28:	2000      	movs	r0, #0
 8007f2a:	f002 fcef 	bl	800a90c <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 8007f2e:	4b14      	ldr	r3, [pc, #80]	@ (8007f80 <MIC_Print+0x210>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	491e      	ldr	r1, [pc, #120]	@ (8007fac <MIC_Print+0x23c>)
 8007f34:	1c18      	adds	r0, r3, #0
 8007f36:	f7f8 fafb 	bl	8000530 <__aeabi_fcmplt>
 8007f3a:	1e03      	subs	r3, r0, #0
 8007f3c:	d00c      	beq.n	8007f58 <MIC_Print+0x1e8>
 8007f3e:	4b10      	ldr	r3, [pc, #64]	@ (8007f80 <MIC_Print+0x210>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	491b      	ldr	r1, [pc, #108]	@ (8007fb0 <MIC_Print+0x240>)
 8007f44:	1c18      	adds	r0, r3, #0
 8007f46:	f7f8 fb11 	bl	800056c <__aeabi_fcmpge>
 8007f4a:	1e03      	subs	r3, r0, #0
 8007f4c:	d004      	beq.n	8007f58 <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 8007f4e:	2201      	movs	r2, #1
 8007f50:	2100      	movs	r1, #0
 8007f52:	2001      	movs	r0, #1
 8007f54:	f002 fcda 	bl	800a90c <SetDBLED>
  }
  if(dBc < 35){//off
 8007f58:	4b09      	ldr	r3, [pc, #36]	@ (8007f80 <MIC_Print+0x210>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4914      	ldr	r1, [pc, #80]	@ (8007fb0 <MIC_Print+0x240>)
 8007f5e:	1c18      	adds	r0, r3, #0
 8007f60:	f7f8 fae6 	bl	8000530 <__aeabi_fcmplt>
 8007f64:	1e03      	subs	r3, r0, #0
 8007f66:	d100      	bne.n	8007f6a <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 8007f68:	e004      	b.n	8007f74 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f002 fccc 	bl	800a90c <SetDBLED>
}
 8007f74:	46c0      	nop			@ (mov r8, r8)
 8007f76:	46bd      	mov	sp, r7
 8007f78:	b002      	add	sp, #8
 8007f7a:	bd80      	pop	{r7, pc}
 8007f7c:	20000f94 	.word	0x20000f94
 8007f80:	20000f64 	.word	0x20000f64
 8007f84:	20000f98 	.word	0x20000f98
 8007f88:	20000f68 	.word	0x20000f68
 8007f8c:	20000f99 	.word	0x20000f99
 8007f90:	20000f90 	.word	0x20000f90
 8007f94:	41200000 	.word	0x41200000
 8007f98:	42b40000 	.word	0x42b40000
 8007f9c:	42a00000 	.word	0x42a00000
 8007fa0:	428c0000 	.word	0x428c0000
 8007fa4:	42700000 	.word	0x42700000
 8007fa8:	42480000 	.word	0x42480000
 8007fac:	42200000 	.word	0x42200000
 8007fb0:	420c0000 	.word	0x420c0000

08007fb4 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8007fba:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <MIC_TestMeasurementDone+0x4c>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	4a10      	ldr	r2, [pc, #64]	@ (8008004 <MIC_TestMeasurementDone+0x50>)
 8007fc2:	4911      	ldr	r1, [pc, #68]	@ (8008008 <MIC_TestMeasurementDone+0x54>)
 8007fc4:	2002      	movs	r0, #2
 8007fc6:	f003 fc0b 	bl	800b7e0 <CreateLine>
  if(DataReady) {
 8007fca:	4b0d      	ldr	r3, [pc, #52]	@ (8008000 <MIC_TestMeasurementDone+0x4c>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d010      	beq.n	8007ff6 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8007fd4:	1dfb      	adds	r3, r7, #7
 8007fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800800c <MIC_TestMeasurementDone+0x58>)
 8007fd8:	7812      	ldrb	r2, [r2, #0]
 8007fda:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800800c <MIC_TestMeasurementDone+0x58>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8008010 <MIC_TestMeasurementDone+0x5c>)
 8007fe4:	4908      	ldr	r1, [pc, #32]	@ (8008008 <MIC_TestMeasurementDone+0x54>)
 8007fe6:	2002      	movs	r0, #2
 8007fe8:	f003 fbfa 	bl	800b7e0 <CreateLine>
    ResetMICIndicator();
 8007fec:	f002 fd52 	bl	800aa94 <ResetMICIndicator>
    return Check;
 8007ff0:	1dfb      	adds	r3, r7, #7
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	e000      	b.n	8007ff8 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	0018      	movs	r0, r3
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	b002      	add	sp, #8
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	20001284 	.word	0x20001284
 8008004:	080202d4 	.word	0x080202d4
 8008008:	08020300 	.word	0x08020300
 800800c:	20001285 	.word	0x20001285
 8008010:	08020304 	.word	0x08020304

08008014 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008014:	b40f      	push	{r0, r1, r2, r3}
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 800801c:	2314      	movs	r3, #20
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	2180      	movs	r1, #128	@ 0x80
 8008028:	0089      	lsls	r1, r1, #2
 800802a:	480a      	ldr	r0, [pc, #40]	@ (8008054 <print+0x40>)
 800802c:	f014 faf2 	bl	801c614 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008030:	4b08      	ldr	r3, [pc, #32]	@ (8008054 <print+0x40>)
 8008032:	0018      	movs	r0, r3
 8008034:	f7f8 f89a 	bl	800016c <strlen>
 8008038:	0003      	movs	r3, r0
 800803a:	b29a      	uxth	r2, r3
 800803c:	4b05      	ldr	r3, [pc, #20]	@ (8008054 <print+0x40>)
 800803e:	0011      	movs	r1, r2
 8008040:	0018      	movs	r0, r3
 8008042:	f7ff f9c9 	bl	80073d8 <printString>
}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b002      	add	sp, #8
 800804c:	bc80      	pop	{r7}
 800804e:	bc08      	pop	{r3}
 8008050:	b004      	add	sp, #16
 8008052:	4718      	bx	r3
 8008054:	20000f9c 	.word	0x20000f9c

08008058 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800805e:	1d3b      	adds	r3, r7, #4
 8008060:	0018      	movs	r0, r3
 8008062:	2314      	movs	r3, #20
 8008064:	001a      	movs	r2, r3
 8008066:	2100      	movs	r1, #0
 8008068:	f014 fb80 	bl	801c76c <memset>
  RTC_DateTypeDef sDate = {0};
 800806c:	003b      	movs	r3, r7
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008072:	4b2e      	ldr	r3, [pc, #184]	@ (800812c <MX_RTC_Init+0xd4>)
 8008074:	4a2e      	ldr	r2, [pc, #184]	@ (8008130 <MX_RTC_Init+0xd8>)
 8008076:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8008078:	4b2c      	ldr	r3, [pc, #176]	@ (800812c <MX_RTC_Init+0xd4>)
 800807a:	2200      	movs	r2, #0
 800807c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800807e:	4b2b      	ldr	r3, [pc, #172]	@ (800812c <MX_RTC_Init+0xd4>)
 8008080:	227f      	movs	r2, #127	@ 0x7f
 8008082:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008084:	4b29      	ldr	r3, [pc, #164]	@ (800812c <MX_RTC_Init+0xd4>)
 8008086:	22ff      	movs	r2, #255	@ 0xff
 8008088:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800808a:	4b28      	ldr	r3, [pc, #160]	@ (800812c <MX_RTC_Init+0xd4>)
 800808c:	2200      	movs	r2, #0
 800808e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008090:	4b26      	ldr	r3, [pc, #152]	@ (800812c <MX_RTC_Init+0xd4>)
 8008092:	2200      	movs	r2, #0
 8008094:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008096:	4b25      	ldr	r3, [pc, #148]	@ (800812c <MX_RTC_Init+0xd4>)
 8008098:	2200      	movs	r2, #0
 800809a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800809c:	4b23      	ldr	r3, [pc, #140]	@ (800812c <MX_RTC_Init+0xd4>)
 800809e:	2200      	movs	r2, #0
 80080a0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080a2:	4b22      	ldr	r3, [pc, #136]	@ (800812c <MX_RTC_Init+0xd4>)
 80080a4:	0018      	movs	r0, r3
 80080a6:	f00a fa81 	bl	80125ac <HAL_RTC_Init>
 80080aa:	1e03      	subs	r3, r0, #0
 80080ac:	d001      	beq.n	80080b2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80080ae:	f7ff fa25 	bl	80074fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80080b2:	1d3b      	adds	r3, r7, #4
 80080b4:	220d      	movs	r2, #13
 80080b6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80080b8:	1d3b      	adds	r3, r7, #4
 80080ba:	2200      	movs	r2, #0
 80080bc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80080be:	1d3b      	adds	r3, r7, #4
 80080c0:	2200      	movs	r2, #0
 80080c2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80080c4:	1d3b      	adds	r3, r7, #4
 80080c6:	2200      	movs	r2, #0
 80080c8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80080ca:	1d3b      	adds	r3, r7, #4
 80080cc:	2200      	movs	r2, #0
 80080ce:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80080d0:	1d39      	adds	r1, r7, #4
 80080d2:	4b16      	ldr	r3, [pc, #88]	@ (800812c <MX_RTC_Init+0xd4>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	0018      	movs	r0, r3
 80080d8:	f00a fb04 	bl	80126e4 <HAL_RTC_SetTime>
 80080dc:	1e03      	subs	r3, r0, #0
 80080de:	d001      	beq.n	80080e4 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 80080e0:	f7ff fa0c 	bl	80074fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80080e4:	003b      	movs	r3, r7
 80080e6:	2206      	movs	r2, #6
 80080e8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 80080ea:	003b      	movs	r3, r7
 80080ec:	2211      	movs	r2, #17
 80080ee:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 80080f0:	003b      	movs	r3, r7
 80080f2:	2217      	movs	r2, #23
 80080f4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 80080f6:	003b      	movs	r3, r7
 80080f8:	2218      	movs	r2, #24
 80080fa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80080fc:	0039      	movs	r1, r7
 80080fe:	4b0b      	ldr	r3, [pc, #44]	@ (800812c <MX_RTC_Init+0xd4>)
 8008100:	2200      	movs	r2, #0
 8008102:	0018      	movs	r0, r3
 8008104:	f00a fbf6 	bl	80128f4 <HAL_RTC_SetDate>
 8008108:	1e03      	subs	r3, r0, #0
 800810a:	d001      	beq.n	8008110 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800810c:	f7ff f9f6 	bl	80074fc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008110:	4b06      	ldr	r3, [pc, #24]	@ (800812c <MX_RTC_Init+0xd4>)
 8008112:	2200      	movs	r2, #0
 8008114:	2100      	movs	r1, #0
 8008116:	0018      	movs	r0, r3
 8008118:	f00a fda6 	bl	8012c68 <HAL_RTCEx_SetWakeUpTimer>
 800811c:	1e03      	subs	r3, r0, #0
 800811e:	d001      	beq.n	8008124 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008120:	f7ff f9ec 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008124:	46c0      	nop			@ (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b006      	add	sp, #24
 800812a:	bd80      	pop	{r7, pc}
 800812c:	2000119c 	.word	0x2000119c
 8008130:	40002800 	.word	0x40002800

08008134 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a06      	ldr	r2, [pc, #24]	@ (800815c <HAL_RTC_MspInit+0x28>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d106      	bne.n	8008154 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008146:	4b06      	ldr	r3, [pc, #24]	@ (8008160 <HAL_RTC_MspInit+0x2c>)
 8008148:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800814a:	4b05      	ldr	r3, [pc, #20]	@ (8008160 <HAL_RTC_MspInit+0x2c>)
 800814c:	2180      	movs	r1, #128	@ 0x80
 800814e:	02c9      	lsls	r1, r1, #11
 8008150:	430a      	orrs	r2, r1
 8008152:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008154:	46c0      	nop			@ (mov r8, r8)
 8008156:	46bd      	mov	sp, r7
 8008158:	b002      	add	sp, #8
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40002800 	.word	0x40002800
 8008160:	40021000 	.word	0x40021000

08008164 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d113      	bne.n	80081aa <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	22fe      	movs	r2, #254	@ 0xfe
 8008186:	0592      	lsls	r2, r2, #22
 8008188:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4a1a      	ldr	r2, [pc, #104]	@ (80081f8 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 800818e:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4a1a      	ldr	r2, [pc, #104]	@ (80081fc <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8008194:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4a19      	ldr	r2, [pc, #100]	@ (8008200 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800819a:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4a19      	ldr	r2, [pc, #100]	@ (8008204 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80081a0:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a18      	ldr	r2, [pc, #96]	@ (8008208 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80081a6:	61da      	str	r2, [r3, #28]
 80081a8:	e011      	b.n	80081ce <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a17      	ldr	r2, [pc, #92]	@ (800820c <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80081ae:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4a17      	ldr	r2, [pc, #92]	@ (8008210 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80081b4:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a16      	ldr	r2, [pc, #88]	@ (8008214 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80081ba:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4a16      	ldr	r2, [pc, #88]	@ (8008218 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80081c0:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	4a15      	ldr	r2, [pc, #84]	@ (800821c <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80081c6:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	4a15      	ldr	r2, [pc, #84]	@ (8008220 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80081cc:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a14      	ldr	r2, [pc, #80]	@ (8008224 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80081d2:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4a14      	ldr	r2, [pc, #80]	@ (8008228 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80081d8:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4a12      	ldr	r2, [pc, #72]	@ (8008228 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80081de:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a12      	ldr	r2, [pc, #72]	@ (800822c <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80081e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	0018      	movs	r0, r3
 80081ea:	f000 f831 	bl	8008250 <GasIndexAlgorithm_reset>
}
 80081ee:	46c0      	nop			@ (mov r8, r8)
 80081f0:	46bd      	mov	sp, r7
 80081f2:	b004      	add	sp, #16
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	46c0      	nop			@ (mov r8, r8)
 80081f8:	00002710 	.word	0x00002710
 80081fc:	44340000 	.word	0x44340000
 8008200:	46859800 	.word	0x46859800
 8008204:	46a05000 	.word	0x46a05000
 8008208:	41f00000 	.word	0x41f00000
 800820c:	42c80000 	.word	0x42c80000
 8008210:	00004e20 	.word	0x00004e20
 8008214:	43340000 	.word	0x43340000
 8008218:	4528c000 	.word	0x4528c000
 800821c:	45a32000 	.word	0x45a32000
 8008220:	43aa0000 	.word	0x43aa0000
 8008224:	43660000 	.word	0x43660000
 8008228:	41400000 	.word	0x41400000
 800822c:	42480000 	.word	0x42480000

08008230 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800823a:	22fe      	movs	r2, #254	@ 0xfe
 800823c:	0592      	lsls	r2, r2, #22
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0018      	movs	r0, r3
 8008244:	f7ff ff8e 	bl	8008164 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8008248:	46c0      	nop			@ (mov r8, r8)
 800824a:	46bd      	mov	sp, r7
 800824c:	b002      	add	sp, #8
 800824e:	bd80      	pop	{r7, pc}

08008250 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	0018      	movs	r0, r3
 800826e:	f000 f805 	bl	800827c <GasIndexAlgorithm__init_instances>
}
 8008272:	46c0      	nop			@ (mov r8, r8)
 8008274:	46bd      	mov	sp, r7
 8008276:	b002      	add	sp, #8
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	0018      	movs	r0, r3
 8008288:	f000 f8e8 	bl	800845c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	0018      	movs	r0, r3
 8008290:	f000 f9a6 	bl	80085e0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8008294:	1c04      	adds	r4, r0, #0
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	0018      	movs	r0, r3
 800829a:	f000 f9ab 	bl	80085f4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800829e:	1c02      	adds	r2, r0, #0
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	1c21      	adds	r1, r4, #0
 80082a4:	0018      	movs	r0, r3
 80082a6:	f000 fc3b 	bl	8008b20 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d107      	bne.n	80082c2 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80082b2:	23fe      	movs	r3, #254	@ 0xfe
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	4a0a      	ldr	r2, [pc, #40]	@ (80082e0 <GasIndexAlgorithm__init_instances+0x64>)
 80082b8:	490a      	ldr	r1, [pc, #40]	@ (80082e4 <GasIndexAlgorithm__init_instances+0x68>)
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fc86 	bl	8008bcc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80082c0:	e005      	b.n	80082ce <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80082c2:	4b09      	ldr	r3, [pc, #36]	@ (80082e8 <GasIndexAlgorithm__init_instances+0x6c>)
 80082c4:	4a09      	ldr	r2, [pc, #36]	@ (80082ec <GasIndexAlgorithm__init_instances+0x70>)
 80082c6:	490a      	ldr	r1, [pc, #40]	@ (80082f0 <GasIndexAlgorithm__init_instances+0x74>)
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fc7f 	bl	8008bcc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	0018      	movs	r0, r3
 80082d2:	f000 fd35 	bl	8008d40 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80082d6:	46c0      	nop			@ (mov r8, r8)
 80082d8:	46bd      	mov	sp, r7
 80082da:	b003      	add	sp, #12
 80082dc:	bd90      	pop	{r4, r7, pc}
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	bc257a78 	.word	0xbc257a78
 80082e4:	44198000 	.word	0x44198000
 80082e8:	42c80000 	.word	0x42c80000
 80082ec:	bbd4fdf4 	.word	0xbbd4fdf4
 80082f0:	43550000 	.word	0x43550000

080082f4 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008304:	4952      	ldr	r1, [pc, #328]	@ (8008450 <GasIndexAlgorithm_process+0x15c>)
 8008306:	1c18      	adds	r0, r3, #0
 8008308:	f7f8 f91c 	bl	8000544 <__aeabi_fcmple>
 800830c:	1e03      	subs	r3, r0, #0
 800830e:	d00c      	beq.n	800832a <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	1c19      	adds	r1, r3, #0
 800831a:	1c10      	adds	r0, r2, #0
 800831c:	f7f8 fad0 	bl	80008c0 <__aeabi_fadd>
 8008320:	1c03      	adds	r3, r0, #0
 8008322:	1c1a      	adds	r2, r3, #0
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	631a      	str	r2, [r3, #48]	@ 0x30
 8008328:	e080      	b.n	800842c <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	dd25      	ble.n	800837c <GasIndexAlgorithm_process+0x88>
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4a48      	ldr	r2, [pc, #288]	@ (8008454 <GasIndexAlgorithm_process+0x160>)
 8008334:	4293      	cmp	r3, r2
 8008336:	dc21      	bgt.n	800837c <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	429a      	cmp	r2, r3
 8008340:	dc04      	bgt.n	800834c <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	e00d      	b.n	8008368 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	4a41      	ldr	r2, [pc, #260]	@ (8008458 <GasIndexAlgorithm_process+0x164>)
 8008352:	4694      	mov	ip, r2
 8008354:	4463      	add	r3, ip
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	429a      	cmp	r2, r3
 800835a:	dd05      	ble.n	8008368 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	4a3d      	ldr	r2, [pc, #244]	@ (8008458 <GasIndexAlgorithm_process+0x164>)
 8008362:	4694      	mov	ip, r2
 8008364:	4463      	add	r3, ip
 8008366:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	0018      	movs	r0, r3
 8008372:	f7f9 f92d 	bl	80015d0 <__aeabi_i2f>
 8008376:	1c02      	adds	r2, r0, #0
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d005      	beq.n	8008390 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	0018      	movs	r0, r3
 8008388:	f000 f945 	bl	8008616 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 800838c:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 800838e:	d014      	beq.n	80083ba <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	1c11      	adds	r1, r2, #0
 8008398:	0018      	movs	r0, r3
 800839a:	f000 fbd1 	bl	8008b40 <GasIndexAlgorithm__mox_model__process>
 800839e:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	1c11      	adds	r1, r2, #0
 80083ac:	0018      	movs	r0, r3
 80083ae:	f000 fc25 	bl	8008bfc <GasIndexAlgorithm__sigmoid_scaled__process>
 80083b2:	1c02      	adds	r2, r0, #0
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80083b8:	e003      	b.n	80083c2 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689a      	ldr	r2, [r3, #8]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	1c11      	adds	r1, r2, #0
 80083ca:	0018      	movs	r0, r3
 80083cc:	f000 fcec 	bl	8008da8 <GasIndexAlgorithm__adaptive_lowpass__process>
 80083d0:	1c02      	adds	r2, r0, #0
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083da:	21fc      	movs	r1, #252	@ 0xfc
 80083dc:	0589      	lsls	r1, r1, #22
 80083de:	1c18      	adds	r0, r3, #0
 80083e0:	f7f8 f8a6 	bl	8000530 <__aeabi_fcmplt>
 80083e4:	1e03      	subs	r3, r0, #0
 80083e6:	d003      	beq.n	80083f0 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	22fc      	movs	r2, #252	@ 0xfc
 80083ec:	0592      	lsls	r2, r2, #22
 80083ee:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f4:	2100      	movs	r1, #0
 80083f6:	1c18      	adds	r0, r3, #0
 80083f8:	f7f8 f8ae 	bl	8000558 <__aeabi_fcmpgt>
 80083fc:	1e03      	subs	r3, r0, #0
 80083fe:	d015      	beq.n	800842c <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	1c11      	adds	r1, r2, #0
 8008408:	0018      	movs	r0, r3
 800840a:	f000 fa4f 	bl	80088ac <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	0018      	movs	r0, r3
 8008412:	f000 f8e5 	bl	80085e0 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8008416:	1c04      	adds	r4, r0, #0
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	0018      	movs	r0, r3
 800841c:	f000 f8ea 	bl	80085f4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8008420:	1c02      	adds	r2, r0, #0
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1c21      	adds	r1, r4, #0
 8008426:	0018      	movs	r0, r3
 8008428:	f000 fb7a 	bl	8008b20 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008430:	21fc      	movs	r1, #252	@ 0xfc
 8008432:	0589      	lsls	r1, r1, #22
 8008434:	1c18      	adds	r0, r3, #0
 8008436:	f7f8 fa43 	bl	80008c0 <__aeabi_fadd>
 800843a:	1c03      	adds	r3, r0, #0
 800843c:	1c18      	adds	r0, r3, #0
 800843e:	f7f9 f8a7 	bl	8001590 <__aeabi_f2iz>
 8008442:	0002      	movs	r2, r0
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	601a      	str	r2, [r3, #0]
    return;
 8008448:	46c0      	nop			@ (mov r8, r8)
}
 800844a:	46bd      	mov	sp, r7
 800844c:	b005      	add	sp, #20
 800844e:	bd90      	pop	{r4, r7, pc}
 8008450:	42340000 	.word	0x42340000
 8008454:	0000fde7 	.word	0x0000fde7
 8008458:	00007fff 	.word	0x00007fff

0800845c <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 800845c:	b5b0      	push	{r4, r5, r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	223c      	movs	r2, #60	@ 0x3c
 8008468:	2100      	movs	r1, #0
 800846a:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4952      	ldr	r1, [pc, #328]	@ (80085d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8008486:	1c18      	adds	r0, r3, #0
 8008488:	f7f8 fba4 	bl	8000bd4 <__aeabi_fdiv>
 800848c:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800848e:	2188      	movs	r1, #136	@ 0x88
 8008490:	05c9      	lsls	r1, r1, #23
 8008492:	1c18      	adds	r0, r3, #0
 8008494:	f7f8 fd84 	bl	8000fa0 <__aeabi_fmul>
 8008498:	1c03      	adds	r3, r0, #0
 800849a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	494a      	ldr	r1, [pc, #296]	@ (80085d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80084a6:	1c18      	adds	r0, r3, #0
 80084a8:	f7f8 fb94 	bl	8000bd4 <__aeabi_fdiv>
 80084ac:	1c03      	adds	r3, r0, #0
 80084ae:	1c19      	adds	r1, r3, #0
 80084b0:	1c20      	adds	r0, r4, #0
 80084b2:	f7f8 fa05 	bl	80008c0 <__aeabi_fadd>
 80084b6:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80084b8:	1c19      	adds	r1, r3, #0
 80084ba:	1c28      	adds	r0, r5, #0
 80084bc:	f7f8 fb8a 	bl	8000bd4 <__aeabi_fdiv>
 80084c0:	1c03      	adds	r3, r0, #0
 80084c2:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	4940      	ldr	r1, [pc, #256]	@ (80085d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80084ce:	1c18      	adds	r0, r3, #0
 80084d0:	f7f8 fb80 	bl	8000bd4 <__aeabi_fdiv>
 80084d4:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80084d6:	2185      	movs	r1, #133	@ 0x85
 80084d8:	05c9      	lsls	r1, r1, #23
 80084da:	1c18      	adds	r0, r3, #0
 80084dc:	f7f8 fd60 	bl	8000fa0 <__aeabi_fmul>
 80084e0:	1c03      	adds	r3, r0, #0
 80084e2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	4938      	ldr	r1, [pc, #224]	@ (80085d0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80084ee:	1c18      	adds	r0, r3, #0
 80084f0:	f7f8 fb70 	bl	8000bd4 <__aeabi_fdiv>
 80084f4:	1c03      	adds	r3, r0, #0
 80084f6:	1c19      	adds	r1, r3, #0
 80084f8:	1c20      	adds	r0, r4, #0
 80084fa:	f7f8 f9e1 	bl	80008c0 <__aeabi_fadd>
 80084fe:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8008500:	1c19      	adds	r1, r3, #0
 8008502:	1c28      	adds	r0, r5, #0
 8008504:	f7f8 fb66 	bl	8000bd4 <__aeabi_fdiv>
 8008508:	1c03      	adds	r3, r0, #0
 800850a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d118      	bne.n	800854a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800851c:	2188      	movs	r1, #136	@ 0x88
 800851e:	05c9      	lsls	r1, r1, #23
 8008520:	1c18      	adds	r0, r3, #0
 8008522:	f7f8 fd3d 	bl	8000fa0 <__aeabi_fmul>
 8008526:	1c03      	adds	r3, r0, #0
 8008528:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800852e:	4929      	ldr	r1, [pc, #164]	@ (80085d4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8008530:	1c18      	adds	r0, r3, #0
 8008532:	f7f8 f9c5 	bl	80008c0 <__aeabi_fadd>
 8008536:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8008538:	1c19      	adds	r1, r3, #0
 800853a:	1c20      	adds	r0, r4, #0
 800853c:	f7f8 fb4a 	bl	8000bd4 <__aeabi_fdiv>
 8008540:	1c03      	adds	r3, r0, #0
 8008542:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	655a      	str	r2, [r3, #84]	@ 0x54
 8008548:	e017      	b.n	800857a <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800854e:	2188      	movs	r1, #136	@ 0x88
 8008550:	05c9      	lsls	r1, r1, #23
 8008552:	1c18      	adds	r0, r3, #0
 8008554:	f7f8 fd24 	bl	8000fa0 <__aeabi_fmul>
 8008558:	1c03      	adds	r3, r0, #0
 800855a:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8008560:	491d      	ldr	r1, [pc, #116]	@ (80085d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8008562:	1c18      	adds	r0, r3, #0
 8008564:	f7f8 f9ac 	bl	80008c0 <__aeabi_fadd>
 8008568:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800856a:	1c19      	adds	r1, r3, #0
 800856c:	1c20      	adds	r0, r4, #0
 800856e:	f7f8 fb31 	bl	8000bd4 <__aeabi_fdiv>
 8008572:	1c03      	adds	r3, r0, #0
 8008574:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800857e:	2185      	movs	r1, #133	@ 0x85
 8008580:	05c9      	lsls	r1, r1, #23
 8008582:	1c18      	adds	r0, r3, #0
 8008584:	f7f8 fd0c 	bl	8000fa0 <__aeabi_fmul>
 8008588:	1c03      	adds	r3, r0, #0
 800858a:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	4912      	ldr	r1, [pc, #72]	@ (80085dc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8008592:	1c18      	adds	r0, r3, #0
 8008594:	f7f8 f994 	bl	80008c0 <__aeabi_fadd>
 8008598:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800859a:	1c19      	adds	r1, r3, #0
 800859c:	1c20      	adds	r0, r4, #0
 800859e:	f7f8 fb19 	bl	8000bd4 <__aeabi_fdiv>
 80085a2:	1c03      	adds	r3, r0, #0
 80085a4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80085c8:	46c0      	nop			@ (mov r8, r8)
 80085ca:	46bd      	mov	sp, r7
 80085cc:	b002      	add	sp, #8
 80085ce:	bdb0      	pop	{r4, r5, r7, pc}
 80085d0:	45610000 	.word	0x45610000
 80085d4:	44960000 	.word	0x44960000
 80085d8:	41a00000 	.word	0x41a00000
 80085dc:	451c4000 	.word	0x451c4000

080085e0 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80085ec:	1c18      	adds	r0, r3, #0
 80085ee:	46bd      	mov	sp, r7
 80085f0:	b002      	add	sp, #8
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8008604:	1c19      	adds	r1, r3, #0
 8008606:	1c10      	adds	r0, r2, #0
 8008608:	f7f8 f95a 	bl	80008c0 <__aeabi_fadd>
 800860c:	1c03      	adds	r3, r0, #0
}
 800860e:	1c18      	adds	r0, r3, #0
 8008610:	46bd      	mov	sp, r7
 8008612:	b002      	add	sp, #8
 8008614:	bd80      	pop	{r7, pc}

08008616 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	223c      	movs	r2, #60	@ 0x3c
 8008622:	5c9b      	ldrb	r3, [r3, r2]
}
 8008624:	0018      	movs	r0, r3
 8008626:	46bd      	mov	sp, r7
 8008628:	b002      	add	sp, #8
 800862a:	bd80      	pop	{r7, pc}

0800862c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 800862c:	b5b0      	push	{r4, r5, r7, lr}
 800862e:	b08c      	sub	sp, #48	@ 0x30
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8008638:	1c19      	adds	r1, r3, #0
 800863a:	4895      	ldr	r0, [pc, #596]	@ (8008890 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 800863c:	f7f8 fdee 	bl	800121c <__aeabi_fsub>
 8008640:	1c03      	adds	r3, r0, #0
 8008642:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008648:	1c19      	adds	r1, r3, #0
 800864a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800864c:	f7f7 ff84 	bl	8000558 <__aeabi_fcmpgt>
 8008650:	1e03      	subs	r3, r0, #0
 8008652:	d00b      	beq.n	800866c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800865c:	1c19      	adds	r1, r3, #0
 800865e:	1c10      	adds	r0, r2, #0
 8008660:	f7f8 f92e 	bl	80008c0 <__aeabi_fadd>
 8008664:	1c03      	adds	r3, r0, #0
 8008666:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008670:	1c19      	adds	r1, r3, #0
 8008672:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008674:	f7f7 ff70 	bl	8000558 <__aeabi_fcmpgt>
 8008678:	1e03      	subs	r3, r0, #0
 800867a:	d00b      	beq.n	8008694 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8008684:	1c19      	adds	r1, r3, #0
 8008686:	1c10      	adds	r0, r2, #0
 8008688:	f7f8 f91a 	bl	80008c0 <__aeabi_fadd>
 800868c:	1c03      	adds	r3, r0, #0
 800868e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6959      	ldr	r1, [r3, #20]
 8008698:	4a7e      	ldr	r2, [pc, #504]	@ (8008894 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	0018      	movs	r0, r3
 800869e:	f000 f9f1 	bl	8008a84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	1c11      	adds	r1, r2, #0
 80086aa:	0018      	movs	r0, r3
 80086ac:	f000 f9fa 	bl	8008aa4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80086b0:	1c03      	adds	r3, r0, #0
 80086b2:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80086c0:	1c19      	adds	r1, r3, #0
 80086c2:	1c10      	adds	r0, r2, #0
 80086c4:	f7f8 fdaa 	bl	800121c <__aeabi_fsub>
 80086c8:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80086ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086cc:	1c18      	adds	r0, r3, #0
 80086ce:	f7f8 fc67 	bl	8000fa0 <__aeabi_fmul>
 80086d2:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80086d4:	1c19      	adds	r1, r3, #0
 80086d6:	1c20      	adds	r0, r4, #0
 80086d8:	f7f8 f8f2 	bl	80008c0 <__aeabi_fadd>
 80086dc:	1c03      	adds	r3, r0, #0
 80086de:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80086e8:	1c19      	adds	r1, r3, #0
 80086ea:	486b      	ldr	r0, [pc, #428]	@ (8008898 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80086ec:	f7f8 fd96 	bl	800121c <__aeabi_fsub>
 80086f0:	1c03      	adds	r3, r0, #0
 80086f2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	1c11      	adds	r1, r2, #0
 80086fc:	0018      	movs	r0, r3
 80086fe:	f000 f9d1 	bl	8008aa4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008702:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008704:	1c19      	adds	r1, r3, #0
 8008706:	1c28      	adds	r0, r5, #0
 8008708:	f7f8 fc4a 	bl	8000fa0 <__aeabi_fmul>
 800870c:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800870e:	1c19      	adds	r1, r3, #0
 8008710:	1c20      	adds	r0, r4, #0
 8008712:	f7f8 f8d5 	bl	80008c0 <__aeabi_fadd>
 8008716:	1c03      	adds	r3, r0, #0
 8008718:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800871a:	4a60      	ldr	r2, [pc, #384]	@ (800889c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800871c:	6a39      	ldr	r1, [r7, #32]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	0018      	movs	r0, r3
 8008722:	f000 f9af 	bl	8008a84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	1c11      	adds	r1, r2, #0
 800872e:	0018      	movs	r0, r3
 8008730:	f000 f9b8 	bl	8008aa4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008734:	1c03      	adds	r3, r0, #0
 8008736:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8008738:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800873a:	69f8      	ldr	r0, [r7, #28]
 800873c:	f7f8 fc30 	bl	8000fa0 <__aeabi_fmul>
 8008740:	1c03      	adds	r3, r0, #0
 8008742:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6999      	ldr	r1, [r3, #24]
 800874c:	4a51      	ldr	r2, [pc, #324]	@ (8008894 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	0018      	movs	r0, r3
 8008752:	f000 f997 	bl	8008a84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	1c11      	adds	r1, r2, #0
 800875e:	0018      	movs	r0, r3
 8008760:	f000 f9a0 	bl	8008aa4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008764:	1c03      	adds	r3, r0, #0
 8008766:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8008774:	1c19      	adds	r1, r3, #0
 8008776:	1c10      	adds	r0, r2, #0
 8008778:	f7f8 fd50 	bl	800121c <__aeabi_fsub>
 800877c:	1c03      	adds	r3, r0, #0
 800877e:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8008780:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008782:	69b8      	ldr	r0, [r7, #24]
 8008784:	f7f8 fd4a 	bl	800121c <__aeabi_fsub>
 8008788:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800878a:	1c19      	adds	r1, r3, #0
 800878c:	1c28      	adds	r0, r5, #0
 800878e:	f7f8 fc07 	bl	8000fa0 <__aeabi_fmul>
 8008792:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8008794:	1c19      	adds	r1, r3, #0
 8008796:	1c20      	adds	r0, r4, #0
 8008798:	f7f8 f892 	bl	80008c0 <__aeabi_fadd>
 800879c:	1c03      	adds	r3, r0, #0
 800879e:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80087a8:	1c19      	adds	r1, r3, #0
 80087aa:	483b      	ldr	r0, [pc, #236]	@ (8008898 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80087ac:	f7f8 fd36 	bl	800121c <__aeabi_fsub>
 80087b0:	1c03      	adds	r3, r0, #0
 80087b2:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	1c11      	adds	r1, r2, #0
 80087bc:	0018      	movs	r0, r3
 80087be:	f000 f971 	bl	8008aa4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80087c2:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 80087c4:	1c19      	adds	r1, r3, #0
 80087c6:	1c28      	adds	r0, r5, #0
 80087c8:	f7f8 fbea 	bl	8000fa0 <__aeabi_fmul>
 80087cc:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 80087ce:	1c19      	adds	r1, r3, #0
 80087d0:	1c20      	adds	r0, r4, #0
 80087d2:	f7f8 f875 	bl	80008c0 <__aeabi_fadd>
 80087d6:	1c03      	adds	r3, r0, #0
 80087d8:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80087da:	4a30      	ldr	r2, [pc, #192]	@ (800889c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 80087dc:	6939      	ldr	r1, [r7, #16]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	0018      	movs	r0, r3
 80087e2:	f000 f94f 	bl	8008a84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	1c11      	adds	r1, r2, #0
 80087ee:	0018      	movs	r0, r3
 80087f0:	f000 f958 	bl	8008aa4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80087f4:	1c03      	adds	r3, r0, #0
 80087f6:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 80087f8:	6979      	ldr	r1, [r7, #20]
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7f8 fbd0 	bl	8000fa0 <__aeabi_fmul>
 8008800:	1c03      	adds	r3, r0, #0
 8008802:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	4923      	ldr	r1, [pc, #140]	@ (80088a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8008812:	1c18      	adds	r0, r3, #0
 8008814:	f7f8 f9de 	bl	8000bd4 <__aeabi_fdiv>
 8008818:	1c03      	adds	r3, r0, #0
 800881a:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800881c:	69f9      	ldr	r1, [r7, #28]
 800881e:	20fe      	movs	r0, #254	@ 0xfe
 8008820:	0580      	lsls	r0, r0, #22
 8008822:	f7f8 fcfb 	bl	800121c <__aeabi_fsub>
 8008826:	1c03      	adds	r3, r0, #0
 8008828:	491e      	ldr	r1, [pc, #120]	@ (80088a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800882a:	1c18      	adds	r0, r3, #0
 800882c:	f7f8 fbb8 	bl	8000fa0 <__aeabi_fmul>
 8008830:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8008832:	491d      	ldr	r1, [pc, #116]	@ (80088a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8008834:	1c18      	adds	r0, r3, #0
 8008836:	f7f8 fcf1 	bl	800121c <__aeabi_fsub>
 800883a:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800883c:	1c19      	adds	r1, r3, #0
 800883e:	1c28      	adds	r0, r5, #0
 8008840:	f7f8 fbae 	bl	8000fa0 <__aeabi_fmul>
 8008844:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8008846:	1c19      	adds	r1, r3, #0
 8008848:	1c20      	adds	r0, r4, #0
 800884a:	f7f8 f839 	bl	80008c0 <__aeabi_fadd>
 800884e:	1c03      	adds	r3, r0, #0
 8008850:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800885a:	2100      	movs	r1, #0
 800885c:	1c18      	adds	r0, r3, #0
 800885e:	f7f7 fe67 	bl	8000530 <__aeabi_fcmplt>
 8008862:	1e03      	subs	r3, r0, #0
 8008864:	d002      	beq.n	800886c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8008874:	1c19      	adds	r1, r3, #0
 8008876:	1c10      	adds	r0, r2, #0
 8008878:	f7f7 fe6e 	bl	8000558 <__aeabi_fcmpgt>
 800887c:	1e03      	subs	r3, r0, #0
 800887e:	d100      	bne.n	8008882 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8008880:	e002      	b.n	8008888 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008888:	46c0      	nop			@ (mov r8, r8)
 800888a:	46bd      	mov	sp, r7
 800888c:	b00c      	add	sp, #48	@ 0x30
 800888e:	bdb0      	pop	{r4, r5, r7, pc}
 8008890:	46fffe00 	.word	0x46fffe00
 8008894:	3c23d70a 	.word	0x3c23d70a
 8008898:	43ff0000 	.word	0x43ff0000
 800889c:	3db851ec 	.word	0x3db851ec
 80088a0:	42700000 	.word	0x42700000
 80088a4:	3fa66666 	.word	0x3fa66666
 80088a8:	3e99999a 	.word	0x3e99999a

080088ac <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80088ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	223c      	movs	r2, #60	@ 0x3c
 80088ba:	5c9b      	ldrb	r3, [r3, r2]
 80088bc:	2201      	movs	r2, #1
 80088be:	4053      	eors	r3, r2
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	223c      	movs	r2, #60	@ 0x3c
 80088ca:	2101      	movs	r1, #1
 80088cc:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 80088da:	e0c8      	b.n	8008a6e <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e0:	4965      	ldr	r1, [pc, #404]	@ (8008a78 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 80088e2:	1c18      	adds	r0, r3, #0
 80088e4:	f7f7 fe42 	bl	800056c <__aeabi_fcmpge>
 80088e8:	1e03      	subs	r3, r0, #0
 80088ea:	d107      	bne.n	80088fc <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 80088f0:	4962      	ldr	r1, [pc, #392]	@ (8008a7c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 80088f2:	1c18      	adds	r0, r3, #0
 80088f4:	f7f7 fe26 	bl	8000544 <__aeabi_fcmple>
 80088f8:	1e03      	subs	r3, r0, #0
 80088fa:	d00e      	beq.n	800891a <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008904:	1c19      	adds	r1, r3, #0
 8008906:	1c10      	adds	r0, r2, #0
 8008908:	f7f7 ffda 	bl	80008c0 <__aeabi_fadd>
 800890c:	1c03      	adds	r3, r0, #0
 800890e:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891e:	1c19      	adds	r1, r3, #0
 8008920:	6838      	ldr	r0, [r7, #0]
 8008922:	f7f8 fc7b 	bl	800121c <__aeabi_fsub>
 8008926:	1c03      	adds	r3, r0, #0
 8008928:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	0018      	movs	r0, r3
 800892e:	f7ff fe7d 	bl	800862c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	1c19      	adds	r1, r3, #0
 8008938:	6838      	ldr	r0, [r7, #0]
 800893a:	f7f8 fc6f 	bl	800121c <__aeabi_fsub>
 800893e:	1c03      	adds	r3, r0, #0
 8008940:	2185      	movs	r1, #133	@ 0x85
 8008942:	05c9      	lsls	r1, r1, #23
 8008944:	1c18      	adds	r0, r3, #0
 8008946:	f7f8 f945 	bl	8000bd4 <__aeabi_fdiv>
 800894a:	1c03      	adds	r3, r0, #0
 800894c:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800894e:	2100      	movs	r1, #0
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f7f7 fded 	bl	8000530 <__aeabi_fcmplt>
 8008956:	1e03      	subs	r3, r0, #0
 8008958:	d008      	beq.n	800896c <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	1c18      	adds	r0, r3, #0
 8008962:	f7f8 fc5b 	bl	800121c <__aeabi_fsub>
 8008966:	1c03      	adds	r3, r0, #0
 8008968:	617b      	str	r3, [r7, #20]
 800896a:	e007      	b.n	800897c <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008970:	1c19      	adds	r1, r3, #0
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7f7 ffa4 	bl	80008c0 <__aeabi_fadd>
 8008978:	1c03      	adds	r3, r0, #0
 800897a:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800897c:	23fe      	movs	r3, #254	@ 0xfe
 800897e:	059b      	lsls	r3, r3, #22
 8008980:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8008982:	493f      	ldr	r1, [pc, #252]	@ (8008a80 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8008984:	6978      	ldr	r0, [r7, #20]
 8008986:	f7f7 fde7 	bl	8000558 <__aeabi_fcmpgt>
 800898a:	1e03      	subs	r3, r0, #0
 800898c:	d010      	beq.n	80089b0 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800898e:	493c      	ldr	r1, [pc, #240]	@ (8008a80 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8008990:	6978      	ldr	r0, [r7, #20]
 8008992:	f7f8 f91f 	bl	8000bd4 <__aeabi_fdiv>
 8008996:	1c03      	adds	r3, r0, #0
 8008998:	1c1c      	adds	r4, r3, #0
 800899a:	4939      	ldr	r1, [pc, #228]	@ (8008a80 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800899c:	6978      	ldr	r0, [r7, #20]
 800899e:	f7f8 f919 	bl	8000bd4 <__aeabi_fdiv>
 80089a2:	1c03      	adds	r3, r0, #0
 80089a4:	1c19      	adds	r1, r3, #0
 80089a6:	1c20      	adds	r0, r4, #0
 80089a8:	f7f8 fafa 	bl	8000fa0 <__aeabi_fmul>
 80089ac:	1c03      	adds	r3, r0, #0
 80089ae:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80089b4:	1c19      	adds	r1, r3, #0
 80089b6:	2085      	movs	r0, #133	@ 0x85
 80089b8:	05c0      	lsls	r0, r0, #23
 80089ba:	f7f8 fc2f 	bl	800121c <__aeabi_fsub>
 80089be:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80089c0:	6939      	ldr	r1, [r7, #16]
 80089c2:	1c18      	adds	r0, r3, #0
 80089c4:	f7f8 faec 	bl	8000fa0 <__aeabi_fmul>
 80089c8:	1c03      	adds	r3, r0, #0
 80089ca:	1c18      	adds	r0, r3, #0
 80089cc:	f016 fc98 	bl	801f300 <sqrtf>
 80089d0:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80089da:	2185      	movs	r1, #133	@ 0x85
 80089dc:	05c9      	lsls	r1, r1, #23
 80089de:	6938      	ldr	r0, [r7, #16]
 80089e0:	f7f8 fade 	bl	8000fa0 <__aeabi_fmul>
 80089e4:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 80089e6:	1c19      	adds	r1, r3, #0
 80089e8:	1c28      	adds	r0, r5, #0
 80089ea:	f7f8 f8f3 	bl	8000bd4 <__aeabi_fdiv>
 80089ee:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80089f0:	1c19      	adds	r1, r3, #0
 80089f2:	1c20      	adds	r0, r4, #0
 80089f4:	f7f8 fad4 	bl	8000fa0 <__aeabi_fmul>
 80089f8:	1c03      	adds	r3, r0, #0
 80089fa:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a00:	68f9      	ldr	r1, [r7, #12]
 8008a02:	1c18      	adds	r0, r3, #0
 8008a04:	f7f8 facc 	bl	8000fa0 <__aeabi_fmul>
 8008a08:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8008a0a:	6939      	ldr	r1, [r7, #16]
 8008a0c:	1c18      	adds	r0, r3, #0
 8008a0e:	f7f8 f8e1 	bl	8000bd4 <__aeabi_fdiv>
 8008a12:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8008a14:	68f9      	ldr	r1, [r7, #12]
 8008a16:	1c18      	adds	r0, r3, #0
 8008a18:	f7f8 fac2 	bl	8000fa0 <__aeabi_fmul>
 8008a1c:	1c03      	adds	r3, r0, #0
             sqrtf(
 8008a1e:	1c19      	adds	r1, r3, #0
 8008a20:	1c20      	adds	r0, r4, #0
 8008a22:	f7f7 ff4d 	bl	80008c0 <__aeabi_fadd>
 8008a26:	1c03      	adds	r3, r0, #0
 8008a28:	1c18      	adds	r0, r3, #0
 8008a2a:	f016 fc69 	bl	801f300 <sqrtf>
 8008a2e:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8008a30:	1c19      	adds	r1, r3, #0
 8008a32:	1c30      	adds	r0, r6, #0
 8008a34:	f7f8 fab4 	bl	8000fa0 <__aeabi_fmul>
 8008a38:	1c03      	adds	r3, r0, #0
 8008a3a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a48:	68f9      	ldr	r1, [r7, #12]
 8008a4a:	1c18      	adds	r0, r3, #0
 8008a4c:	f7f8 faa8 	bl	8000fa0 <__aeabi_fmul>
 8008a50:	1c03      	adds	r3, r0, #0
 8008a52:	2182      	movs	r1, #130	@ 0x82
 8008a54:	05c9      	lsls	r1, r1, #23
 8008a56:	1c18      	adds	r0, r3, #0
 8008a58:	f7f8 f8bc 	bl	8000bd4 <__aeabi_fdiv>
 8008a5c:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8008a5e:	1c19      	adds	r1, r3, #0
 8008a60:	1c20      	adds	r0, r4, #0
 8008a62:	f7f7 ff2d 	bl	80008c0 <__aeabi_fadd>
 8008a66:	1c03      	adds	r3, r0, #0
 8008a68:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008a6e:	46c0      	nop			@ (mov r8, r8)
 8008a70:	46bd      	mov	sp, r7
 8008a72:	b007      	add	sp, #28
 8008a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a76:	46c0      	nop			@ (mov r8, r8)
 8008a78:	42c80000 	.word	0x42c80000
 8008a7c:	c2c80000 	.word	0xc2c80000
 8008a80:	44b40000 	.word	0x44b40000

08008a84 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	68ba      	ldr	r2, [r7, #8]
 8008a9a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a9c:	46c0      	nop			@ (mov r8, r8)
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b004      	add	sp, #16
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab6:	1c19      	adds	r1, r3, #0
 8008ab8:	6838      	ldr	r0, [r7, #0]
 8008aba:	f7f8 fbaf 	bl	800121c <__aeabi_fsub>
 8008abe:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8008ac0:	1c19      	adds	r1, r3, #0
 8008ac2:	1c20      	adds	r0, r4, #0
 8008ac4:	f7f8 fa6c 	bl	8000fa0 <__aeabi_fmul>
 8008ac8:	1c03      	adds	r3, r0, #0
 8008aca:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8008acc:	4912      	ldr	r1, [pc, #72]	@ (8008b18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f7f7 fd2e 	bl	8000530 <__aeabi_fcmplt>
 8008ad4:	1e03      	subs	r3, r0, #0
 8008ad6:	d002      	beq.n	8008ade <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8008ad8:	23fe      	movs	r3, #254	@ 0xfe
 8008ada:	059b      	lsls	r3, r3, #22
 8008adc:	e018      	b.n	8008b10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8008ade:	490f      	ldr	r1, [pc, #60]	@ (8008b1c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7f7 fd39 	bl	8000558 <__aeabi_fcmpgt>
 8008ae6:	1e03      	subs	r3, r0, #0
 8008ae8:	d001      	beq.n	8008aee <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8008aea:	2300      	movs	r3, #0
 8008aec:	e010      	b.n	8008b10 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	1c18      	adds	r0, r3, #0
 8008af2:	f016 fbdd 	bl	801f2b0 <expf>
 8008af6:	1c03      	adds	r3, r0, #0
 8008af8:	21fe      	movs	r1, #254	@ 0xfe
 8008afa:	0589      	lsls	r1, r1, #22
 8008afc:	1c18      	adds	r0, r3, #0
 8008afe:	f7f7 fedf 	bl	80008c0 <__aeabi_fadd>
 8008b02:	1c03      	adds	r3, r0, #0
 8008b04:	1c19      	adds	r1, r3, #0
 8008b06:	20fe      	movs	r0, #254	@ 0xfe
 8008b08:	0580      	lsls	r0, r0, #22
 8008b0a:	f7f8 f863 	bl	8000bd4 <__aeabi_fdiv>
 8008b0e:	1c03      	adds	r3, r0, #0
    }
}
 8008b10:	1c18      	adds	r0, r3, #0
 8008b12:	46bd      	mov	sp, r7
 8008b14:	b005      	add	sp, #20
 8008b16:	bd90      	pop	{r4, r7, pc}
 8008b18:	c2480000 	.word	0xc2480000
 8008b1c:	42480000 	.word	0x42480000

08008b20 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008b38:	46c0      	nop			@ (mov r8, r8)
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	b004      	add	sp, #16
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8008b40:	b590      	push	{r4, r7, lr}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d114      	bne.n	8008b7c <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b56:	1c19      	adds	r1, r3, #0
 8008b58:	6838      	ldr	r0, [r7, #0]
 8008b5a:	f7f8 fb5f 	bl	800121c <__aeabi_fsub>
 8008b5e:	1c03      	adds	r3, r0, #0
 8008b60:	4918      	ldr	r1, [pc, #96]	@ (8008bc4 <GasIndexAlgorithm__mox_model__process+0x84>)
 8008b62:	1c18      	adds	r0, r3, #0
 8008b64:	f7f8 f836 	bl	8000bd4 <__aeabi_fdiv>
 8008b68:	1c03      	adds	r3, r0, #0
 8008b6a:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8008b70:	1c19      	adds	r1, r3, #0
 8008b72:	1c10      	adds	r0, r2, #0
 8008b74:	f7f8 fa14 	bl	8000fa0 <__aeabi_fmul>
 8008b78:	1c03      	adds	r3, r0, #0
 8008b7a:	e01f      	b.n	8008bbc <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008b80:	1c19      	adds	r1, r3, #0
 8008b82:	6838      	ldr	r0, [r7, #0]
 8008b84:	f7f8 fb4a 	bl	800121c <__aeabi_fsub>
 8008b88:	1c03      	adds	r3, r0, #0
 8008b8a:	1c1a      	adds	r2, r3, #0
 8008b8c:	2380      	movs	r3, #128	@ 0x80
 8008b8e:	061b      	lsls	r3, r3, #24
 8008b90:	4053      	eors	r3, r2
 8008b92:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b98:	490b      	ldr	r1, [pc, #44]	@ (8008bc8 <GasIndexAlgorithm__mox_model__process+0x88>)
 8008b9a:	1c18      	adds	r0, r3, #0
 8008b9c:	f7f7 fe90 	bl	80008c0 <__aeabi_fadd>
 8008ba0:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008ba2:	1c19      	adds	r1, r3, #0
 8008ba4:	1c20      	adds	r0, r4, #0
 8008ba6:	f7f8 f815 	bl	8000bd4 <__aeabi_fdiv>
 8008baa:	1c03      	adds	r3, r0, #0
 8008bac:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8008bb2:	1c19      	adds	r1, r3, #0
 8008bb4:	1c10      	adds	r0, r2, #0
 8008bb6:	f7f8 f9f3 	bl	8000fa0 <__aeabi_fmul>
 8008bba:	1c03      	adds	r3, r0, #0
    }
}
 8008bbc:	1c18      	adds	r0, r3, #0
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b003      	add	sp, #12
 8008bc2:	bd90      	pop	{r4, r7, pc}
 8008bc4:	44fa0000 	.word	0x44fa0000
 8008bc8:	435c0000 	.word	0x435c0000

08008bcc <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2180      	movs	r1, #128	@ 0x80
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2184      	movs	r1, #132	@ 0x84
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2188      	movs	r1, #136	@ 0x88
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	505a      	str	r2, [r3, r1]
}
 8008bf2:	46c0      	nop			@ (mov r8, r8)
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b004      	add	sp, #16
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8008bfc:	b590      	push	{r4, r7, lr}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2280      	movs	r2, #128	@ 0x80
 8008c0a:	589c      	ldr	r4, [r3, r2]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2284      	movs	r2, #132	@ 0x84
 8008c10:	589b      	ldr	r3, [r3, r2]
 8008c12:	1c19      	adds	r1, r3, #0
 8008c14:	6838      	ldr	r0, [r7, #0]
 8008c16:	f7f8 fb01 	bl	800121c <__aeabi_fsub>
 8008c1a:	1c03      	adds	r3, r0, #0
 8008c1c:	1c19      	adds	r1, r3, #0
 8008c1e:	1c20      	adds	r0, r4, #0
 8008c20:	f7f8 f9be 	bl	8000fa0 <__aeabi_fmul>
 8008c24:	1c03      	adds	r3, r0, #0
 8008c26:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8008c28:	4940      	ldr	r1, [pc, #256]	@ (8008d2c <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8008c2a:	68b8      	ldr	r0, [r7, #8]
 8008c2c:	f7f7 fc80 	bl	8000530 <__aeabi_fcmplt>
 8008c30:	1e03      	subs	r3, r0, #0
 8008c32:	d001      	beq.n	8008c38 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8008c34:	4b3e      	ldr	r3, [pc, #248]	@ (8008d30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008c36:	e075      	b.n	8008d24 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8008c38:	493e      	ldr	r1, [pc, #248]	@ (8008d34 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8008c3a:	68b8      	ldr	r0, [r7, #8]
 8008c3c:	f7f7 fc8c 	bl	8000558 <__aeabi_fcmpgt>
 8008c40:	1e03      	subs	r3, r0, #0
 8008c42:	d001      	beq.n	8008c48 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8008c44:	2300      	movs	r3, #0
 8008c46:	e06d      	b.n	8008d24 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8008c48:	2100      	movs	r1, #0
 8008c4a:	6838      	ldr	r0, [r7, #0]
 8008c4c:	f7f7 fc8e 	bl	800056c <__aeabi_fcmpge>
 8008c50:	1e03      	subs	r3, r0, #0
 8008c52:	d047      	beq.n	8008ce4 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2288      	movs	r2, #136	@ 0x88
 8008c58:	589b      	ldr	r3, [r3, r2]
 8008c5a:	21fe      	movs	r1, #254	@ 0xfe
 8008c5c:	0589      	lsls	r1, r1, #22
 8008c5e:	1c18      	adds	r0, r3, #0
 8008c60:	f7f7 fc60 	bl	8000524 <__aeabi_fcmpeq>
 8008c64:	1e03      	subs	r3, r0, #0
 8008c66:	d00e      	beq.n	8008c86 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	1c19      	adds	r1, r3, #0
 8008c6e:	20fe      	movs	r0, #254	@ 0xfe
 8008c70:	0580      	lsls	r0, r0, #22
 8008c72:	f7f8 fad3 	bl	800121c <__aeabi_fsub>
 8008c76:	1c03      	adds	r3, r0, #0
 8008c78:	492f      	ldr	r1, [pc, #188]	@ (8008d38 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8008c7a:	1c18      	adds	r0, r3, #0
 8008c7c:	f7f8 f990 	bl	8000fa0 <__aeabi_fmul>
 8008c80:	1c03      	adds	r3, r0, #0
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	e012      	b.n	8008cac <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	492c      	ldr	r1, [pc, #176]	@ (8008d3c <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8008c8c:	1c18      	adds	r0, r3, #0
 8008c8e:	f7f8 f987 	bl	8000fa0 <__aeabi_fmul>
 8008c92:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008c94:	1c19      	adds	r1, r3, #0
 8008c96:	4826      	ldr	r0, [pc, #152]	@ (8008d30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008c98:	f7f8 fac0 	bl	800121c <__aeabi_fsub>
 8008c9c:	1c03      	adds	r3, r0, #0
 8008c9e:	2181      	movs	r1, #129	@ 0x81
 8008ca0:	05c9      	lsls	r1, r1, #23
 8008ca2:	1c18      	adds	r0, r3, #0
 8008ca4:	f7f7 ff96 	bl	8000bd4 <__aeabi_fdiv>
 8008ca8:	1c03      	adds	r3, r0, #0
 8008caa:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008cac:	4920      	ldr	r1, [pc, #128]	@ (8008d30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7f7 fe06 	bl	80008c0 <__aeabi_fadd>
 8008cb4:	1c03      	adds	r3, r0, #0
 8008cb6:	1c1c      	adds	r4, r3, #0
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	1c18      	adds	r0, r3, #0
 8008cbc:	f016 faf8 	bl	801f2b0 <expf>
 8008cc0:	1c03      	adds	r3, r0, #0
 8008cc2:	21fe      	movs	r1, #254	@ 0xfe
 8008cc4:	0589      	lsls	r1, r1, #22
 8008cc6:	1c18      	adds	r0, r3, #0
 8008cc8:	f7f7 fdfa 	bl	80008c0 <__aeabi_fadd>
 8008ccc:	1c03      	adds	r3, r0, #0
 8008cce:	1c19      	adds	r1, r3, #0
 8008cd0:	1c20      	adds	r0, r4, #0
 8008cd2:	f7f7 ff7f 	bl	8000bd4 <__aeabi_fdiv>
 8008cd6:	1c03      	adds	r3, r0, #0
 8008cd8:	68f9      	ldr	r1, [r7, #12]
 8008cda:	1c18      	adds	r0, r3, #0
 8008cdc:	f7f8 fa9e 	bl	800121c <__aeabi_fsub>
 8008ce0:	1c03      	adds	r3, r0, #0
 8008ce2:	e01f      	b.n	8008d24 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2188      	movs	r1, #136	@ 0x88
 8008cec:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008cee:	1c19      	adds	r1, r3, #0
 8008cf0:	1c10      	adds	r0, r2, #0
 8008cf2:	f7f7 ff6f 	bl	8000bd4 <__aeabi_fdiv>
 8008cf6:	1c03      	adds	r3, r0, #0
 8008cf8:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	1c18      	adds	r0, r3, #0
 8008cfe:	f016 fad7 	bl	801f2b0 <expf>
 8008d02:	1c03      	adds	r3, r0, #0
 8008d04:	21fe      	movs	r1, #254	@ 0xfe
 8008d06:	0589      	lsls	r1, r1, #22
 8008d08:	1c18      	adds	r0, r3, #0
 8008d0a:	f7f7 fdd9 	bl	80008c0 <__aeabi_fadd>
 8008d0e:	1c03      	adds	r3, r0, #0
 8008d10:	1c19      	adds	r1, r3, #0
 8008d12:	4807      	ldr	r0, [pc, #28]	@ (8008d30 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008d14:	f7f7 ff5e 	bl	8000bd4 <__aeabi_fdiv>
 8008d18:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008d1a:	1c19      	adds	r1, r3, #0
 8008d1c:	1c20      	adds	r0, r4, #0
 8008d1e:	f7f8 f93f 	bl	8000fa0 <__aeabi_fmul>
 8008d22:	1c03      	adds	r3, r0, #0
        }
    }
}
 8008d24:	1c18      	adds	r0, r3, #0
 8008d26:	46bd      	mov	sp, r7
 8008d28:	b005      	add	sp, #20
 8008d2a:	bd90      	pop	{r4, r7, pc}
 8008d2c:	c2480000 	.word	0xc2480000
 8008d30:	43fa0000 	.word	0x43fa0000
 8008d34:	42480000 	.word	0x42480000
 8008d38:	3f8041ab 	.word	0x3f8041ab
 8008d3c:	40a00000 	.word	0x40a00000

08008d40 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008d40:	b590      	push	{r4, r7, lr}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4913      	ldr	r1, [pc, #76]	@ (8008da0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8008d52:	1c18      	adds	r0, r3, #0
 8008d54:	f7f7 fdb4 	bl	80008c0 <__aeabi_fadd>
 8008d58:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008d5a:	1c19      	adds	r1, r3, #0
 8008d5c:	1c20      	adds	r0, r4, #0
 8008d5e:	f7f7 ff39 	bl	8000bd4 <__aeabi_fdiv>
 8008d62:	1c03      	adds	r3, r0, #0
 8008d64:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	228c      	movs	r2, #140	@ 0x8c
 8008d6a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	490b      	ldr	r1, [pc, #44]	@ (8008da4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8008d76:	1c18      	adds	r0, r3, #0
 8008d78:	f7f7 fda2 	bl	80008c0 <__aeabi_fadd>
 8008d7c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008d7e:	1c19      	adds	r1, r3, #0
 8008d80:	1c20      	adds	r0, r4, #0
 8008d82:	f7f7 ff27 	bl	8000bd4 <__aeabi_fdiv>
 8008d86:	1c03      	adds	r3, r0, #0
 8008d88:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2290      	movs	r2, #144	@ 0x90
 8008d8e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2294      	movs	r2, #148	@ 0x94
 8008d94:	2100      	movs	r1, #0
 8008d96:	5499      	strb	r1, [r3, r2]
}
 8008d98:	46c0      	nop			@ (mov r8, r8)
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b003      	add	sp, #12
 8008d9e:	bd90      	pop	{r4, r7, pc}
 8008da0:	41a00000 	.word	0x41a00000
 8008da4:	43fa0000 	.word	0x43fa0000

08008da8 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2294      	movs	r2, #148	@ 0x94
 8008db6:	5c9b      	ldrb	r3, [r3, r2]
 8008db8:	2201      	movs	r2, #1
 8008dba:	4053      	eors	r3, r2
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00f      	beq.n	8008de2 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2198      	movs	r1, #152	@ 0x98
 8008dc6:	683a      	ldr	r2, [r7, #0]
 8008dc8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	219c      	movs	r1, #156	@ 0x9c
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	21a0      	movs	r1, #160	@ 0xa0
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2294      	movs	r2, #148	@ 0x94
 8008dde:	2101      	movs	r1, #1
 8008de0:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	228c      	movs	r2, #140	@ 0x8c
 8008de6:	589b      	ldr	r3, [r3, r2]
 8008de8:	1c19      	adds	r1, r3, #0
 8008dea:	20fe      	movs	r0, #254	@ 0xfe
 8008dec:	0580      	lsls	r0, r0, #22
 8008dee:	f7f8 fa15 	bl	800121c <__aeabi_fsub>
 8008df2:	1c03      	adds	r3, r0, #0
 8008df4:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2298      	movs	r2, #152	@ 0x98
 8008dfa:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008dfc:	1c19      	adds	r1, r3, #0
 8008dfe:	f7f8 f8cf 	bl	8000fa0 <__aeabi_fmul>
 8008e02:	1c03      	adds	r3, r0, #0
 8008e04:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	228c      	movs	r2, #140	@ 0x8c
 8008e0a:	589b      	ldr	r3, [r3, r2]
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	1c18      	adds	r0, r3, #0
 8008e10:	f7f8 f8c6 	bl	8000fa0 <__aeabi_fmul>
 8008e14:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8008e16:	1c19      	adds	r1, r3, #0
 8008e18:	1c20      	adds	r0, r4, #0
 8008e1a:	f7f7 fd51 	bl	80008c0 <__aeabi_fadd>
 8008e1e:	1c03      	adds	r3, r0, #0
 8008e20:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2298      	movs	r2, #152	@ 0x98
 8008e26:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2290      	movs	r2, #144	@ 0x90
 8008e2c:	589b      	ldr	r3, [r3, r2]
 8008e2e:	1c19      	adds	r1, r3, #0
 8008e30:	20fe      	movs	r0, #254	@ 0xfe
 8008e32:	0580      	lsls	r0, r0, #22
 8008e34:	f7f8 f9f2 	bl	800121c <__aeabi_fsub>
 8008e38:	1c03      	adds	r3, r0, #0
 8008e3a:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	229c      	movs	r2, #156	@ 0x9c
 8008e40:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008e42:	1c19      	adds	r1, r3, #0
 8008e44:	f7f8 f8ac 	bl	8000fa0 <__aeabi_fmul>
 8008e48:	1c03      	adds	r3, r0, #0
 8008e4a:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2290      	movs	r2, #144	@ 0x90
 8008e50:	589b      	ldr	r3, [r3, r2]
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	1c18      	adds	r0, r3, #0
 8008e56:	f7f8 f8a3 	bl	8000fa0 <__aeabi_fmul>
 8008e5a:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008e5c:	1c19      	adds	r1, r3, #0
 8008e5e:	1c20      	adds	r0, r4, #0
 8008e60:	f7f7 fd2e 	bl	80008c0 <__aeabi_fadd>
 8008e64:	1c03      	adds	r3, r0, #0
 8008e66:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	229c      	movs	r2, #156	@ 0x9c
 8008e6c:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2298      	movs	r2, #152	@ 0x98
 8008e72:	589a      	ldr	r2, [r3, r2]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	219c      	movs	r1, #156	@ 0x9c
 8008e78:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8008e7a:	1c19      	adds	r1, r3, #0
 8008e7c:	1c10      	adds	r0, r2, #0
 8008e7e:	f7f8 f9cd 	bl	800121c <__aeabi_fsub>
 8008e82:	1c03      	adds	r3, r0, #0
 8008e84:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8008e86:	2100      	movs	r1, #0
 8008e88:	6978      	ldr	r0, [r7, #20]
 8008e8a:	f7f7 fb51 	bl	8000530 <__aeabi_fcmplt>
 8008e8e:	1e03      	subs	r3, r0, #0
 8008e90:	d004      	beq.n	8008e9c <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	2280      	movs	r2, #128	@ 0x80
 8008e96:	0612      	lsls	r2, r2, #24
 8008e98:	4053      	eors	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008e9c:	4923      	ldr	r1, [pc, #140]	@ (8008f2c <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008e9e:	6978      	ldr	r0, [r7, #20]
 8008ea0:	f7f8 f87e 	bl	8000fa0 <__aeabi_fmul>
 8008ea4:	1c03      	adds	r3, r0, #0
 8008ea6:	1c18      	adds	r0, r3, #0
 8008ea8:	f016 fa02 	bl	801f2b0 <expf>
 8008eac:	1c03      	adds	r3, r0, #0
 8008eae:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008eb0:	491f      	ldr	r1, [pc, #124]	@ (8008f30 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008eb2:	6938      	ldr	r0, [r7, #16]
 8008eb4:	f7f8 f874 	bl	8000fa0 <__aeabi_fmul>
 8008eb8:	1c03      	adds	r3, r0, #0
 8008eba:	491e      	ldr	r1, [pc, #120]	@ (8008f34 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008ebc:	1c18      	adds	r0, r3, #0
 8008ebe:	f7f7 fcff 	bl	80008c0 <__aeabi_fadd>
 8008ec2:	1c03      	adds	r3, r0, #0
 8008ec4:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685c      	ldr	r4, [r3, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	68f9      	ldr	r1, [r7, #12]
 8008ed0:	1c18      	adds	r0, r3, #0
 8008ed2:	f7f7 fcf5 	bl	80008c0 <__aeabi_fadd>
 8008ed6:	1c03      	adds	r3, r0, #0
 8008ed8:	1c19      	adds	r1, r3, #0
 8008eda:	1c20      	adds	r0, r4, #0
 8008edc:	f7f7 fe7a 	bl	8000bd4 <__aeabi_fdiv>
 8008ee0:	1c03      	adds	r3, r0, #0
 8008ee2:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	20fe      	movs	r0, #254	@ 0xfe
 8008ee8:	0580      	lsls	r0, r0, #22
 8008eea:	f7f8 f997 	bl	800121c <__aeabi_fsub>
 8008eee:	1c03      	adds	r3, r0, #0
 8008ef0:	1c18      	adds	r0, r3, #0
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	22a0      	movs	r2, #160	@ 0xa0
 8008ef6:	589b      	ldr	r3, [r3, r2]
 8008ef8:	1c19      	adds	r1, r3, #0
 8008efa:	f7f8 f851 	bl	8000fa0 <__aeabi_fmul>
 8008efe:	1c03      	adds	r3, r0, #0
 8008f00:	1c1c      	adds	r4, r3, #0
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	68b8      	ldr	r0, [r7, #8]
 8008f06:	f7f8 f84b 	bl	8000fa0 <__aeabi_fmul>
 8008f0a:	1c03      	adds	r3, r0, #0
 8008f0c:	1c19      	adds	r1, r3, #0
 8008f0e:	1c20      	adds	r0, r4, #0
 8008f10:	f7f7 fcd6 	bl	80008c0 <__aeabi_fadd>
 8008f14:	1c03      	adds	r3, r0, #0
 8008f16:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	22a0      	movs	r2, #160	@ 0xa0
 8008f1c:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	22a0      	movs	r2, #160	@ 0xa0
 8008f22:	589b      	ldr	r3, [r3, r2]
}
 8008f24:	1c18      	adds	r0, r3, #0
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b007      	add	sp, #28
 8008f2a:	bd90      	pop	{r4, r7, pc}
 8008f2c:	be4ccccd 	.word	0xbe4ccccd
 8008f30:	43f00000 	.word	0x43f00000
 8008f34:	41a00000 	.word	0x41a00000

08008f38 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008f38:	b590      	push	{r4, r7, lr}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6039      	str	r1, [r7, #0]
 8008f40:	0011      	movs	r1, r2
 8008f42:	1dfb      	adds	r3, r7, #7
 8008f44:	1c02      	adds	r2, r0, #0
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	1dbb      	adds	r3, r7, #6
 8008f4a:	1c0a      	adds	r2, r1, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008f4e:	4b08      	ldr	r3, [pc, #32]	@ (8008f70 <ReadRegister+0x38>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d008      	beq.n	8008f68 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8008f56:	4b06      	ldr	r3, [pc, #24]	@ (8008f70 <ReadRegister+0x38>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	1dba      	adds	r2, r7, #6
 8008f5c:	7814      	ldrb	r4, [r2, #0]
 8008f5e:	6839      	ldr	r1, [r7, #0]
 8008f60:	1dfa      	adds	r2, r7, #7
 8008f62:	7810      	ldrb	r0, [r2, #0]
 8008f64:	0022      	movs	r2, r4
 8008f66:	4798      	blx	r3
  }
}
 8008f68:	46c0      	nop			@ (mov r8, r8)
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd90      	pop	{r4, r7, pc}
 8008f70:	200011c0 	.word	0x200011c0

08008f74 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008f74:	b590      	push	{r4, r7, lr}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6039      	str	r1, [r7, #0]
 8008f7c:	0011      	movs	r1, r2
 8008f7e:	1dfb      	adds	r3, r7, #7
 8008f80:	1c02      	adds	r2, r0, #0
 8008f82:	701a      	strb	r2, [r3, #0]
 8008f84:	1dbb      	adds	r3, r7, #6
 8008f86:	1c0a      	adds	r2, r1, #0
 8008f88:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008f8a:	4b08      	ldr	r3, [pc, #32]	@ (8008fac <WriteRegister+0x38>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d008      	beq.n	8008fa4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008f92:	4b06      	ldr	r3, [pc, #24]	@ (8008fac <WriteRegister+0x38>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	1dba      	adds	r2, r7, #6
 8008f98:	7814      	ldrb	r4, [r2, #0]
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	1dfa      	adds	r2, r7, #7
 8008f9e:	7810      	ldrb	r0, [r2, #0]
 8008fa0:	0022      	movs	r2, r4
 8008fa2:	4798      	blx	r3
  }
}
 8008fa4:	46c0      	nop			@ (mov r8, r8)
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	b003      	add	sp, #12
 8008faa:	bd90      	pop	{r4, r7, pc}
 8008fac:	200011c4 	.word	0x200011c4

08008fb0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008fba:	4b07      	ldr	r3, [pc, #28]	@ (8008fd8 <SGP_Init+0x28>)
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008fc0:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <SGP_Init+0x2c>)
 8008fc2:	683a      	ldr	r2, [r7, #0]
 8008fc4:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8008fc6:	4b06      	ldr	r3, [pc, #24]	@ (8008fe0 <SGP_Init+0x30>)
 8008fc8:	2100      	movs	r1, #0
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f7ff f930 	bl	8008230 <GasIndexAlgorithm_init>
}
 8008fd0:	46c0      	nop			@ (mov r8, r8)
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	b002      	add	sp, #8
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	200011c0 	.word	0x200011c0
 8008fdc:	200011c4 	.word	0x200011c4
 8008fe0:	200011d4 	.word	0x200011d4

08008fe4 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008fe8:	4b13      	ldr	r3, [pc, #76]	@ (8009038 <SGP_StartMeasurement+0x54>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d00d      	beq.n	800900c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008ff0:	4b12      	ldr	r3, [pc, #72]	@ (800903c <SGP_StartMeasurement+0x58>)
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	0019      	movs	r1, r3
 8008ff6:	2059      	movs	r0, #89	@ 0x59
 8008ff8:	f7ff ffbc 	bl	8008f74 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008ffc:	f002 fc62 	bl	800b8c4 <GetCurrentHalTicks>
 8009000:	0003      	movs	r3, r0
 8009002:	331e      	adds	r3, #30
 8009004:	001a      	movs	r2, r3
 8009006:	4b0e      	ldr	r3, [pc, #56]	@ (8009040 <SGP_StartMeasurement+0x5c>)
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	e00c      	b.n	8009026 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800900c:	4b0d      	ldr	r3, [pc, #52]	@ (8009044 <SGP_StartMeasurement+0x60>)
 800900e:	2208      	movs	r2, #8
 8009010:	0019      	movs	r1, r3
 8009012:	2059      	movs	r0, #89	@ 0x59
 8009014:	f7ff ffae 	bl	8008f74 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8009018:	f002 fc54 	bl	800b8c4 <GetCurrentHalTicks>
 800901c:	0003      	movs	r3, r0
 800901e:	33aa      	adds	r3, #170	@ 0xaa
 8009020:	001a      	movs	r2, r3
 8009022:	4b09      	ldr	r3, [pc, #36]	@ (8009048 <SGP_StartMeasurement+0x64>)
 8009024:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8009026:	4b09      	ldr	r3, [pc, #36]	@ (800904c <SGP_StartMeasurement+0x68>)
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800902c:	4b08      	ldr	r3, [pc, #32]	@ (8009050 <SGP_StartMeasurement+0x6c>)
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
}
 8009032:	46c0      	nop			@ (mov r8, r8)
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	2000127c 	.word	0x2000127c
 800903c:	20000090 	.word	0x20000090
 8009040:	200000a4 	.word	0x200000a4
 8009044:	20000088 	.word	0x20000088
 8009048:	2000009c 	.word	0x2000009c
 800904c:	200011d2 	.word	0x200011d2
 8009050:	200011d3 	.word	0x200011d3

08009054 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8009054:	b580      	push	{r7, lr}
 8009056:	af00      	add	r7, sp, #0
 8009058:	4b04      	ldr	r3, [pc, #16]	@ (800906c <SGP_HeatedUp+0x18>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	0018      	movs	r0, r3
 800905e:	f002 fb69 	bl	800b734 <TimestampIsReached>
 8009062:	0003      	movs	r3, r0
 8009064:	0018      	movs	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	46c0      	nop			@ (mov r8, r8)
 800906c:	2000009c 	.word	0x2000009c

08009070 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8009074:	4b04      	ldr	r3, [pc, #16]	@ (8009088 <SGP_MeasurementReady+0x18>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	0018      	movs	r0, r3
 800907a:	f002 fb5b 	bl	800b734 <TimestampIsReached>
 800907e:	0003      	movs	r3, r0
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	46c0      	nop			@ (mov r8, r8)
 8009088:	200000a4 	.word	0x200000a4

0800908c <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8009090:	4b04      	ldr	r3, [pc, #16]	@ (80090a4 <SGP_MeasurementDone+0x18>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	0018      	movs	r0, r3
 8009096:	f002 fb4d 	bl	800b734 <TimestampIsReached>
 800909a:	0003      	movs	r3, r0
}
 800909c:	0018      	movs	r0, r3
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	46c0      	nop			@ (mov r8, r8)
 80090a4:	200000a0 	.word	0x200000a0

080090a8 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80090ac:	4b04      	ldr	r3, [pc, #16]	@ (80090c0 <SGP_TurnHeaterOff+0x18>)
 80090ae:	2202      	movs	r2, #2
 80090b0:	0019      	movs	r1, r3
 80090b2:	2059      	movs	r0, #89	@ 0x59
 80090b4:	f7ff ff5e 	bl	8008f74 <WriteRegister>
}
 80090b8:	46c0      	nop			@ (mov r8, r8)
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	46c0      	nop			@ (mov r8, r8)
 80090c0:	20000080 	.word	0x20000080

080090c4 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80090c4:	b5b0      	push	{r4, r5, r7, lr}
 80090c6:	b086      	sub	sp, #24
 80090c8:	af02      	add	r7, sp, #8
 80090ca:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80090cc:	f7ff ffc2 	bl	8009054 <SGP_HeatedUp>
 80090d0:	1e03      	subs	r3, r0, #0
 80090d2:	d038      	beq.n	8009146 <SGP_GetMeasurementValues+0x82>
 80090d4:	4bd5      	ldr	r3, [pc, #852]	@ (800942c <SGP_GetMeasurementValues+0x368>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2201      	movs	r2, #1
 80090da:	4053      	eors	r3, r2
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d031      	beq.n	8009146 <SGP_GetMeasurementValues+0x82>
 80090e2:	4bd3      	ldr	r3, [pc, #844]	@ (8009430 <SGP_GetMeasurementValues+0x36c>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2201      	movs	r2, #1
 80090e8:	4053      	eors	r3, r2
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d02a      	beq.n	8009146 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80090f0:	4ad0      	ldr	r2, [pc, #832]	@ (8009434 <SGP_GetMeasurementValues+0x370>)
 80090f2:	4bd1      	ldr	r3, [pc, #836]	@ (8009438 <SGP_GetMeasurementValues+0x374>)
 80090f4:	0019      	movs	r1, r3
 80090f6:	2003      	movs	r0, #3
 80090f8:	f002 fb72 	bl	800b7e0 <CreateLine>
    HeatUpIsDone = true;
 80090fc:	4bcb      	ldr	r3, [pc, #812]	@ (800942c <SGP_GetMeasurementValues+0x368>)
 80090fe:	2201      	movs	r2, #1
 8009100:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8009102:	4bce      	ldr	r3, [pc, #824]	@ (800943c <SGP_GetMeasurementValues+0x378>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00d      	beq.n	8009126 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800910a:	4bcd      	ldr	r3, [pc, #820]	@ (8009440 <SGP_GetMeasurementValues+0x37c>)
 800910c:	2208      	movs	r2, #8
 800910e:	0019      	movs	r1, r3
 8009110:	2059      	movs	r0, #89	@ 0x59
 8009112:	f7ff ff2f 	bl	8008f74 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8009116:	f002 fbd5 	bl	800b8c4 <GetCurrentHalTicks>
 800911a:	0003      	movs	r3, r0
 800911c:	331e      	adds	r3, #30
 800911e:	001a      	movs	r2, r3
 8009120:	4bc8      	ldr	r3, [pc, #800]	@ (8009444 <SGP_GetMeasurementValues+0x380>)
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	e00c      	b.n	8009140 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8009126:	4bc8      	ldr	r3, [pc, #800]	@ (8009448 <SGP_GetMeasurementValues+0x384>)
 8009128:	2208      	movs	r2, #8
 800912a:	0019      	movs	r1, r3
 800912c:	2059      	movs	r0, #89	@ 0x59
 800912e:	f7ff ff21 	bl	8008f74 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8009132:	f002 fbc7 	bl	800b8c4 <GetCurrentHalTicks>
 8009136:	0003      	movs	r3, r0
 8009138:	331e      	adds	r3, #30
 800913a:	001a      	movs	r2, r3
 800913c:	4bc1      	ldr	r3, [pc, #772]	@ (8009444 <SGP_GetMeasurementValues+0x380>)
 800913e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8009140:	4bbb      	ldr	r3, [pc, #748]	@ (8009430 <SGP_GetMeasurementValues+0x36c>)
 8009142:	2201      	movs	r2, #1
 8009144:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8009146:	4bb9      	ldr	r3, [pc, #740]	@ (800942c <SGP_GetMeasurementValues+0x368>)
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d100      	bne.n	8009150 <SGP_GetMeasurementValues+0x8c>
 800914e:	e1a9      	b.n	80094a4 <SGP_GetMeasurementValues+0x3e0>
 8009150:	f7ff ff8e 	bl	8009070 <SGP_MeasurementReady>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d100      	bne.n	800915a <SGP_GetMeasurementValues+0x96>
 8009158:	e1a4      	b.n	80094a4 <SGP_GetMeasurementValues+0x3e0>
 800915a:	4bbc      	ldr	r3, [pc, #752]	@ (800944c <SGP_GetMeasurementValues+0x388>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2201      	movs	r2, #1
 8009160:	4053      	eors	r3, r2
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b00      	cmp	r3, #0
 8009166:	d100      	bne.n	800916a <SGP_GetMeasurementValues+0xa6>
 8009168:	e19c      	b.n	80094a4 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800916a:	4bb9      	ldr	r3, [pc, #740]	@ (8009450 <SGP_GetMeasurementValues+0x38c>)
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	3301      	adds	r3, #1
 8009170:	4ab8      	ldr	r2, [pc, #736]	@ (8009454 <SGP_GetMeasurementValues+0x390>)
 8009172:	49b1      	ldr	r1, [pc, #708]	@ (8009438 <SGP_GetMeasurementValues+0x374>)
 8009174:	2003      	movs	r0, #3
 8009176:	f002 fb33 	bl	800b7e0 <CreateLine>
    MeasurementIsReady = true;
 800917a:	4bb4      	ldr	r3, [pc, #720]	@ (800944c <SGP_GetMeasurementValues+0x388>)
 800917c:	2201      	movs	r2, #1
 800917e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8009180:	4bb5      	ldr	r3, [pc, #724]	@ (8009458 <SGP_GetMeasurementValues+0x394>)
 8009182:	2203      	movs	r2, #3
 8009184:	0019      	movs	r1, r3
 8009186:	2059      	movs	r0, #89	@ 0x59
 8009188:	f7ff fed6 	bl	8008f38 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800918c:	4bb2      	ldr	r3, [pc, #712]	@ (8009458 <SGP_GetMeasurementValues+0x394>)
 800918e:	2203      	movs	r2, #3
 8009190:	2103      	movs	r1, #3
 8009192:	0018      	movs	r0, r3
 8009194:	f000 f9ec 	bl	8009570 <CheckCRC>
 8009198:	0003      	movs	r3, r0
 800919a:	001a      	movs	r2, r3
 800919c:	2301      	movs	r3, #1
 800919e:	4053      	eors	r3, r2
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d02a      	beq.n	80091fc <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 80091a6:	4aad      	ldr	r2, [pc, #692]	@ (800945c <SGP_GetMeasurementValues+0x398>)
 80091a8:	4bad      	ldr	r3, [pc, #692]	@ (8009460 <SGP_GetMeasurementValues+0x39c>)
 80091aa:	0019      	movs	r1, r3
 80091ac:	2001      	movs	r0, #1
 80091ae:	f002 fb17 	bl	800b7e0 <CreateLine>
      Info("SGP_Measure buffer structure:");
 80091b2:	4aac      	ldr	r2, [pc, #688]	@ (8009464 <SGP_GetMeasurementValues+0x3a0>)
 80091b4:	4bac      	ldr	r3, [pc, #688]	@ (8009468 <SGP_GetMeasurementValues+0x3a4>)
 80091b6:	0019      	movs	r1, r3
 80091b8:	2002      	movs	r0, #2
 80091ba:	f002 fb11 	bl	800b7e0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80091be:	230f      	movs	r3, #15
 80091c0:	18fb      	adds	r3, r7, r3
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
 80091c6:	e012      	b.n	80091ee <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80091c8:	240f      	movs	r4, #15
 80091ca:	193b      	adds	r3, r7, r4
 80091cc:	7818      	ldrb	r0, [r3, #0]
 80091ce:	193b      	adds	r3, r7, r4
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	4aa1      	ldr	r2, [pc, #644]	@ (8009458 <SGP_GetMeasurementValues+0x394>)
 80091d4:	5cd3      	ldrb	r3, [r2, r3]
 80091d6:	4aa5      	ldr	r2, [pc, #660]	@ (800946c <SGP_GetMeasurementValues+0x3a8>)
 80091d8:	4997      	ldr	r1, [pc, #604]	@ (8009438 <SGP_GetMeasurementValues+0x374>)
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	0003      	movs	r3, r0
 80091de:	2003      	movs	r0, #3
 80091e0:	f002 fafe 	bl	800b7e0 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80091e4:	193b      	adds	r3, r7, r4
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	193b      	adds	r3, r7, r4
 80091ea:	3201      	adds	r2, #1
 80091ec:	701a      	strb	r2, [r3, #0]
 80091ee:	230f      	movs	r3, #15
 80091f0:	18fb      	adds	r3, r7, r3
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d9e7      	bls.n	80091c8 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e16b      	b.n	80094d4 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80091fc:	f002 fb62 	bl	800b8c4 <GetCurrentHalTicks>
 8009200:	0003      	movs	r3, r0
 8009202:	22fa      	movs	r2, #250	@ 0xfa
 8009204:	0092      	lsls	r2, r2, #2
 8009206:	189a      	adds	r2, r3, r2
 8009208:	4b99      	ldr	r3, [pc, #612]	@ (8009470 <SGP_GetMeasurementValues+0x3ac>)
 800920a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800920c:	f7ff ff4c 	bl	80090a8 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8009210:	4b8f      	ldr	r3, [pc, #572]	@ (8009450 <SGP_GetMeasurementValues+0x38c>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	3301      	adds	r3, #1
 8009216:	b2da      	uxtb	r2, r3
 8009218:	4b8d      	ldr	r3, [pc, #564]	@ (8009450 <SGP_GetMeasurementValues+0x38c>)
 800921a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800921c:	4b8c      	ldr	r3, [pc, #560]	@ (8009450 <SGP_GetMeasurementValues+0x38c>)
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	4b94      	ldr	r3, [pc, #592]	@ (8009474 <SGP_GetMeasurementValues+0x3b0>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d200      	bcs.n	800922a <SGP_GetMeasurementValues+0x166>
 8009228:	e13c      	b.n	80094a4 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800922a:	4b8b      	ldr	r3, [pc, #556]	@ (8009458 <SGP_GetMeasurementValues+0x394>)
 800922c:	785b      	ldrb	r3, [r3, #1]
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	b21a      	sxth	r2, r3
 8009232:	4b89      	ldr	r3, [pc, #548]	@ (8009458 <SGP_GetMeasurementValues+0x394>)
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	b21b      	sxth	r3, r3
 8009238:	4313      	orrs	r3, r2
 800923a:	b21a      	sxth	r2, r3
 800923c:	240c      	movs	r4, #12
 800923e:	193b      	adds	r3, r7, r4
 8009240:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8009242:	193b      	adds	r3, r7, r4
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	4a8c      	ldr	r2, [pc, #560]	@ (8009478 <SGP_GetMeasurementValues+0x3b4>)
 8009248:	497b      	ldr	r1, [pc, #492]	@ (8009438 <SGP_GetMeasurementValues+0x374>)
 800924a:	2003      	movs	r0, #3
 800924c:	f002 fac8 	bl	800b7e0 <CreateLine>
      int32_t tempVocIndex = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8009254:	193b      	adds	r3, r7, r4
 8009256:	8819      	ldrh	r1, [r3, #0]
 8009258:	2308      	movs	r3, #8
 800925a:	18fa      	adds	r2, r7, r3
 800925c:	4b87      	ldr	r3, [pc, #540]	@ (800947c <SGP_GetMeasurementValues+0x3b8>)
 800925e:	0018      	movs	r0, r3
 8009260:	f7ff f848 	bl	80082f4 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	4a86      	ldr	r2, [pc, #536]	@ (8009480 <SGP_GetMeasurementValues+0x3bc>)
 8009268:	4973      	ldr	r1, [pc, #460]	@ (8009438 <SGP_GetMeasurementValues+0x374>)
 800926a:	2003      	movs	r0, #3
 800926c:	f002 fab8 	bl	800b7e0 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8009270:	68ba      	ldr	r2, [r7, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	dd5a      	ble.n	8009334 <SGP_GetMeasurementValues+0x270>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b64      	cmp	r3, #100	@ 0x64
 8009284:	dc56      	bgt.n	8009334 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	0018      	movs	r0, r3
 800928c:	f7fa f898 	bl	80033c0 <__aeabi_i2d>
 8009290:	2200      	movs	r2, #0
 8009292:	4b7c      	ldr	r3, [pc, #496]	@ (8009484 <SGP_GetMeasurementValues+0x3c0>)
 8009294:	f7f8 fd8e 	bl	8001db4 <__aeabi_ddiv>
 8009298:	0002      	movs	r2, r0
 800929a:	000b      	movs	r3, r1
 800929c:	2000      	movs	r0, #0
 800929e:	497a      	ldr	r1, [pc, #488]	@ (8009488 <SGP_GetMeasurementValues+0x3c4>)
 80092a0:	f7f9 fc94 	bl	8002bcc <__aeabi_dsub>
 80092a4:	0002      	movs	r2, r0
 80092a6:	000b      	movs	r3, r1
 80092a8:	0014      	movs	r4, r2
 80092aa:	001d      	movs	r5, r3
 80092ac:	4b77      	ldr	r3, [pc, #476]	@ (800948c <SGP_GetMeasurementValues+0x3c8>)
 80092ae:	881b      	ldrh	r3, [r3, #0]
 80092b0:	0018      	movs	r0, r3
 80092b2:	f7fa f885 	bl	80033c0 <__aeabi_i2d>
 80092b6:	0002      	movs	r2, r0
 80092b8:	000b      	movs	r3, r1
 80092ba:	0020      	movs	r0, r4
 80092bc:	0029      	movs	r1, r5
 80092be:	f7f9 f9bd 	bl	800263c <__aeabi_dmul>
 80092c2:	0002      	movs	r2, r0
 80092c4:	000b      	movs	r3, r1
 80092c6:	0010      	movs	r0, r2
 80092c8:	0019      	movs	r1, r3
 80092ca:	f7f7 f9bf 	bl	800064c <__aeabi_d2uiz>
 80092ce:	0003      	movs	r3, r0
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	4b6f      	ldr	r3, [pc, #444]	@ (8009490 <SGP_GetMeasurementValues+0x3cc>)
 80092d4:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	0018      	movs	r0, r3
 80092dc:	f7fa f870 	bl	80033c0 <__aeabi_i2d>
 80092e0:	2200      	movs	r2, #0
 80092e2:	4b68      	ldr	r3, [pc, #416]	@ (8009484 <SGP_GetMeasurementValues+0x3c0>)
 80092e4:	f7f8 fd66 	bl	8001db4 <__aeabi_ddiv>
 80092e8:	0002      	movs	r2, r0
 80092ea:	000b      	movs	r3, r1
 80092ec:	0014      	movs	r4, r2
 80092ee:	001d      	movs	r5, r3
 80092f0:	4b66      	ldr	r3, [pc, #408]	@ (800948c <SGP_GetMeasurementValues+0x3c8>)
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	0018      	movs	r0, r3
 80092f6:	f7fa f863 	bl	80033c0 <__aeabi_i2d>
 80092fa:	0002      	movs	r2, r0
 80092fc:	000b      	movs	r3, r1
 80092fe:	0020      	movs	r0, r4
 8009300:	0029      	movs	r1, r5
 8009302:	f7f9 f99b 	bl	800263c <__aeabi_dmul>
 8009306:	0002      	movs	r2, r0
 8009308:	000b      	movs	r3, r1
 800930a:	0010      	movs	r0, r2
 800930c:	0019      	movs	r1, r3
 800930e:	f7f7 f99d 	bl	800064c <__aeabi_d2uiz>
 8009312:	0003      	movs	r3, r0
 8009314:	b29a      	uxth	r2, r3
 8009316:	4b5f      	ldr	r3, [pc, #380]	@ (8009494 <SGP_GetMeasurementValues+0x3d0>)
 8009318:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800931a:	4b5c      	ldr	r3, [pc, #368]	@ (800948c <SGP_GetMeasurementValues+0x3c8>)
 800931c:	881a      	ldrh	r2, [r3, #0]
 800931e:	4b5e      	ldr	r3, [pc, #376]	@ (8009498 <SGP_GetMeasurementValues+0x3d4>)
 8009320:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 8009322:	4b5d      	ldr	r3, [pc, #372]	@ (8009498 <SGP_GetMeasurementValues+0x3d4>)
 8009324:	8818      	ldrh	r0, [r3, #0]
 8009326:	4b5a      	ldr	r3, [pc, #360]	@ (8009490 <SGP_GetMeasurementValues+0x3cc>)
 8009328:	8819      	ldrh	r1, [r3, #0]
 800932a:	4b5a      	ldr	r3, [pc, #360]	@ (8009494 <SGP_GetMeasurementValues+0x3d0>)
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	001a      	movs	r2, r3
 8009330:	f001 fb36 	bl	800a9a0 <SetVocLED>
      }
      if(*vocIndex > 100){
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b64      	cmp	r3, #100	@ 0x64
 800933a:	dd66      	ble.n	800940a <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	0018      	movs	r0, r3
 8009342:	f7fa f83d 	bl	80033c0 <__aeabi_i2d>
 8009346:	2200      	movs	r2, #0
 8009348:	4b4e      	ldr	r3, [pc, #312]	@ (8009484 <SGP_GetMeasurementValues+0x3c0>)
 800934a:	f7f9 fc3f 	bl	8002bcc <__aeabi_dsub>
 800934e:	0002      	movs	r2, r0
 8009350:	000b      	movs	r3, r1
 8009352:	0010      	movs	r0, r2
 8009354:	0019      	movs	r1, r3
 8009356:	2200      	movs	r2, #0
 8009358:	4b50      	ldr	r3, [pc, #320]	@ (800949c <SGP_GetMeasurementValues+0x3d8>)
 800935a:	f7f8 fd2b 	bl	8001db4 <__aeabi_ddiv>
 800935e:	0002      	movs	r2, r0
 8009360:	000b      	movs	r3, r1
 8009362:	0014      	movs	r4, r2
 8009364:	001d      	movs	r5, r3
 8009366:	4b49      	ldr	r3, [pc, #292]	@ (800948c <SGP_GetMeasurementValues+0x3c8>)
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	0018      	movs	r0, r3
 800936c:	f7fa f828 	bl	80033c0 <__aeabi_i2d>
 8009370:	0002      	movs	r2, r0
 8009372:	000b      	movs	r3, r1
 8009374:	0020      	movs	r0, r4
 8009376:	0029      	movs	r1, r5
 8009378:	f7f9 f960 	bl	800263c <__aeabi_dmul>
 800937c:	0002      	movs	r2, r0
 800937e:	000b      	movs	r3, r1
 8009380:	0010      	movs	r0, r2
 8009382:	0019      	movs	r1, r3
 8009384:	f7f7 f962 	bl	800064c <__aeabi_d2uiz>
 8009388:	0003      	movs	r3, r0
 800938a:	b29a      	uxth	r2, r3
 800938c:	4b40      	ldr	r3, [pc, #256]	@ (8009490 <SGP_GetMeasurementValues+0x3cc>)
 800938e:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	0018      	movs	r0, r3
 8009396:	f7fa f813 	bl	80033c0 <__aeabi_i2d>
 800939a:	2200      	movs	r2, #0
 800939c:	4b39      	ldr	r3, [pc, #228]	@ (8009484 <SGP_GetMeasurementValues+0x3c0>)
 800939e:	f7f9 fc15 	bl	8002bcc <__aeabi_dsub>
 80093a2:	0002      	movs	r2, r0
 80093a4:	000b      	movs	r3, r1
 80093a6:	0010      	movs	r0, r2
 80093a8:	0019      	movs	r1, r3
 80093aa:	2200      	movs	r2, #0
 80093ac:	4b3b      	ldr	r3, [pc, #236]	@ (800949c <SGP_GetMeasurementValues+0x3d8>)
 80093ae:	f7f8 fd01 	bl	8001db4 <__aeabi_ddiv>
 80093b2:	0002      	movs	r2, r0
 80093b4:	000b      	movs	r3, r1
 80093b6:	2000      	movs	r0, #0
 80093b8:	4933      	ldr	r1, [pc, #204]	@ (8009488 <SGP_GetMeasurementValues+0x3c4>)
 80093ba:	f7f9 fc07 	bl	8002bcc <__aeabi_dsub>
 80093be:	0002      	movs	r2, r0
 80093c0:	000b      	movs	r3, r1
 80093c2:	0014      	movs	r4, r2
 80093c4:	001d      	movs	r5, r3
 80093c6:	4b31      	ldr	r3, [pc, #196]	@ (800948c <SGP_GetMeasurementValues+0x3c8>)
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	0018      	movs	r0, r3
 80093cc:	f7f9 fff8 	bl	80033c0 <__aeabi_i2d>
 80093d0:	0002      	movs	r2, r0
 80093d2:	000b      	movs	r3, r1
 80093d4:	0020      	movs	r0, r4
 80093d6:	0029      	movs	r1, r5
 80093d8:	f7f9 f930 	bl	800263c <__aeabi_dmul>
 80093dc:	0002      	movs	r2, r0
 80093de:	000b      	movs	r3, r1
 80093e0:	0010      	movs	r0, r2
 80093e2:	0019      	movs	r1, r3
 80093e4:	f7f7 f932 	bl	800064c <__aeabi_d2uiz>
 80093e8:	0003      	movs	r3, r0
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009498 <SGP_GetMeasurementValues+0x3d4>)
 80093ee:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 80093f0:	4b26      	ldr	r3, [pc, #152]	@ (800948c <SGP_GetMeasurementValues+0x3c8>)
 80093f2:	881a      	ldrh	r2, [r3, #0]
 80093f4:	4b27      	ldr	r3, [pc, #156]	@ (8009494 <SGP_GetMeasurementValues+0x3d0>)
 80093f6:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 80093f8:	4b27      	ldr	r3, [pc, #156]	@ (8009498 <SGP_GetMeasurementValues+0x3d4>)
 80093fa:	8818      	ldrh	r0, [r3, #0]
 80093fc:	4b24      	ldr	r3, [pc, #144]	@ (8009490 <SGP_GetMeasurementValues+0x3cc>)
 80093fe:	8819      	ldrh	r1, [r3, #0]
 8009400:	4b24      	ldr	r3, [pc, #144]	@ (8009494 <SGP_GetMeasurementValues+0x3d0>)
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	001a      	movs	r2, r3
 8009406:	f001 facb 	bl	800a9a0 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800940a:	4b11      	ldr	r3, [pc, #68]	@ (8009450 <SGP_GetMeasurementValues+0x38c>)
 800940c:	2200      	movs	r2, #0
 800940e:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8009410:	4a23      	ldr	r2, [pc, #140]	@ (80094a0 <SGP_GetMeasurementValues+0x3dc>)
 8009412:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <SGP_GetMeasurementValues+0x374>)
 8009414:	0019      	movs	r1, r3
 8009416:	2003      	movs	r0, #3
 8009418:	f002 f9e2 	bl	800b7e0 <CreateLine>
      HT_MeasurementReceived = false;
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <SGP_GetMeasurementValues+0x378>)
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8009422:	4b03      	ldr	r3, [pc, #12]	@ (8009430 <SGP_GetMeasurementValues+0x36c>)
 8009424:	2200      	movs	r2, #0
 8009426:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8009428:	2301      	movs	r3, #1
 800942a:	e053      	b.n	80094d4 <SGP_GetMeasurementValues+0x410>
 800942c:	200011d2 	.word	0x200011d2
 8009430:	2000127d 	.word	0x2000127d
 8009434:	0802031c 	.word	0x0802031c
 8009438:	08020348 	.word	0x08020348
 800943c:	2000127c 	.word	0x2000127c
 8009440:	20000090 	.word	0x20000090
 8009444:	200000a4 	.word	0x200000a4
 8009448:	20000088 	.word	0x20000088
 800944c:	200011d3 	.word	0x200011d3
 8009450:	200011d1 	.word	0x200011d1
 8009454:	0802034c 	.word	0x0802034c
 8009458:	200011c8 	.word	0x200011c8
 800945c:	0802037c 	.word	0x0802037c
 8009460:	080203a0 	.word	0x080203a0
 8009464:	080203a4 	.word	0x080203a4
 8009468:	080203c4 	.word	0x080203c4
 800946c:	080203c8 	.word	0x080203c8
 8009470:	200000a0 	.word	0x200000a0
 8009474:	20000098 	.word	0x20000098
 8009478:	080203e8 	.word	0x080203e8
 800947c:	200011d4 	.word	0x200011d4
 8009480:	080203fc 	.word	0x080203fc
 8009484:	40590000 	.word	0x40590000
 8009488:	3ff00000 	.word	0x3ff00000
 800948c:	200000a8 	.word	0x200000a8
 8009490:	20001282 	.word	0x20001282
 8009494:	20001280 	.word	0x20001280
 8009498:	2000127e 	.word	0x2000127e
 800949c:	40790000 	.word	0x40790000
 80094a0:	08020410 	.word	0x08020410
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80094a4:	f7ff fdf2 	bl	800908c <SGP_MeasurementDone>
 80094a8:	1e03      	subs	r3, r0, #0
 80094aa:	d012      	beq.n	80094d2 <SGP_GetMeasurementValues+0x40e>
 80094ac:	4b0b      	ldr	r3, [pc, #44]	@ (80094dc <SGP_GetMeasurementValues+0x418>)
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00e      	beq.n	80094d2 <SGP_GetMeasurementValues+0x40e>
 80094b4:	4b0a      	ldr	r3, [pc, #40]	@ (80094e0 <SGP_GetMeasurementValues+0x41c>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80094bc:	4a09      	ldr	r2, [pc, #36]	@ (80094e4 <SGP_GetMeasurementValues+0x420>)
 80094be:	4b0a      	ldr	r3, [pc, #40]	@ (80094e8 <SGP_GetMeasurementValues+0x424>)
 80094c0:	0019      	movs	r1, r3
 80094c2:	2003      	movs	r0, #3
 80094c4:	f002 f98c 	bl	800b7e0 <CreateLine>
    SGP_StartMeasurement();
 80094c8:	f7ff fd8c 	bl	8008fe4 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <SGP_GetMeasurementValues+0x428>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	701a      	strb	r2, [r3, #0]
  }
  return false;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	0018      	movs	r0, r3
 80094d6:	46bd      	mov	sp, r7
 80094d8:	b004      	add	sp, #16
 80094da:	bdb0      	pop	{r4, r5, r7, pc}
 80094dc:	200011d2 	.word	0x200011d2
 80094e0:	200011d3 	.word	0x200011d3
 80094e4:	08020434 	.word	0x08020434
 80094e8:	08020348 	.word	0x08020348
 80094ec:	2000127d 	.word	0x2000127d

080094f0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b084      	sub	sp, #16
 80094f4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80094f6:	4b1a      	ldr	r3, [pc, #104]	@ (8009560 <SGP_DeviceConnected+0x70>)
 80094f8:	2202      	movs	r2, #2
 80094fa:	0019      	movs	r1, r3
 80094fc:	2059      	movs	r0, #89	@ 0x59
 80094fe:	f7ff fd39 	bl	8008f74 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8009502:	2001      	movs	r0, #1
 8009504:	f002 fd0a 	bl	800bf1c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8009508:	4b16      	ldr	r3, [pc, #88]	@ (8009564 <SGP_DeviceConnected+0x74>)
 800950a:	2209      	movs	r2, #9
 800950c:	0019      	movs	r1, r3
 800950e:	2059      	movs	r0, #89	@ 0x59
 8009510:	f7ff fd12 	bl	8008f38 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8009514:	1dfb      	adds	r3, r7, #7
 8009516:	2200      	movs	r2, #0
 8009518:	701a      	strb	r2, [r3, #0]
 800951a:	e011      	b.n	8009540 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800951c:	1dfb      	adds	r3, r7, #7
 800951e:	7818      	ldrb	r0, [r3, #0]
 8009520:	1dfb      	adds	r3, r7, #7
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	4a0f      	ldr	r2, [pc, #60]	@ (8009564 <SGP_DeviceConnected+0x74>)
 8009526:	5cd3      	ldrb	r3, [r2, r3]
 8009528:	4a0f      	ldr	r2, [pc, #60]	@ (8009568 <SGP_DeviceConnected+0x78>)
 800952a:	4910      	ldr	r1, [pc, #64]	@ (800956c <SGP_DeviceConnected+0x7c>)
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	0003      	movs	r3, r0
 8009530:	2002      	movs	r0, #2
 8009532:	f002 f955 	bl	800b7e0 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8009536:	1dfb      	adds	r3, r7, #7
 8009538:	781a      	ldrb	r2, [r3, #0]
 800953a:	1dfb      	adds	r3, r7, #7
 800953c:	3201      	adds	r2, #1
 800953e:	701a      	strb	r2, [r3, #0]
 8009540:	1dfb      	adds	r3, r7, #7
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b08      	cmp	r3, #8
 8009546:	d9e9      	bls.n	800951c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8009548:	4b06      	ldr	r3, [pc, #24]	@ (8009564 <SGP_DeviceConnected+0x74>)
 800954a:	2203      	movs	r2, #3
 800954c:	2109      	movs	r1, #9
 800954e:	0018      	movs	r0, r3
 8009550:	f000 f80e 	bl	8009570 <CheckCRC>
 8009554:	0003      	movs	r3, r0
}
 8009556:	0018      	movs	r0, r3
 8009558:	46bd      	mov	sp, r7
 800955a:	b002      	add	sp, #8
 800955c:	bd80      	pop	{r7, pc}
 800955e:	46c0      	nop			@ (mov r8, r8)
 8009560:	20000084 	.word	0x20000084
 8009564:	200011c8 	.word	0x200011c8
 8009568:	08020454 	.word	0x08020454
 800956c:	080203c4 	.word	0x080203c4

08009570 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	b08f      	sub	sp, #60	@ 0x3c
 8009574:	af00      	add	r7, sp, #0
 8009576:	6278      	str	r0, [r7, #36]	@ 0x24
 8009578:	0008      	movs	r0, r1
 800957a:	0011      	movs	r1, r2
 800957c:	2323      	movs	r3, #35	@ 0x23
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	1c02      	adds	r2, r0, #0
 8009582:	701a      	strb	r2, [r3, #0]
 8009584:	2322      	movs	r3, #34	@ 0x22
 8009586:	18fb      	adds	r3, r7, r3
 8009588:	1c0a      	adds	r2, r1, #0
 800958a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800958c:	2317      	movs	r3, #23
 800958e:	2220      	movs	r2, #32
 8009590:	189b      	adds	r3, r3, r2
 8009592:	19db      	adds	r3, r3, r7
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e09f      	b.n	80096da <CheckCRC+0x16a>
 800959a:	466b      	mov	r3, sp
 800959c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800959e:	2322      	movs	r3, #34	@ 0x22
 80095a0:	18fb      	adds	r3, r7, r3
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	001a      	movs	r2, r3
 80095a6:	3a01      	subs	r2, #1
 80095a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80095aa:	60bb      	str	r3, [r7, #8]
 80095ac:	2200      	movs	r2, #0
 80095ae:	60fa      	str	r2, [r7, #12]
 80095b0:	68b8      	ldr	r0, [r7, #8]
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	0002      	movs	r2, r0
 80095b6:	0f52      	lsrs	r2, r2, #29
 80095b8:	000c      	movs	r4, r1
 80095ba:	00e4      	lsls	r4, r4, #3
 80095bc:	61fc      	str	r4, [r7, #28]
 80095be:	69fc      	ldr	r4, [r7, #28]
 80095c0:	4314      	orrs	r4, r2
 80095c2:	61fc      	str	r4, [r7, #28]
 80095c4:	0002      	movs	r2, r0
 80095c6:	00d2      	lsls	r2, r2, #3
 80095c8:	61ba      	str	r2, [r7, #24]
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	2200      	movs	r2, #0
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	6838      	ldr	r0, [r7, #0]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	0002      	movs	r2, r0
 80095d6:	0f52      	lsrs	r2, r2, #29
 80095d8:	000c      	movs	r4, r1
 80095da:	00e4      	lsls	r4, r4, #3
 80095dc:	617c      	str	r4, [r7, #20]
 80095de:	697c      	ldr	r4, [r7, #20]
 80095e0:	4314      	orrs	r4, r2
 80095e2:	617c      	str	r4, [r7, #20]
 80095e4:	0002      	movs	r2, r0
 80095e6:	00d2      	lsls	r2, r2, #3
 80095e8:	613a      	str	r2, [r7, #16]
 80095ea:	3307      	adds	r3, #7
 80095ec:	08db      	lsrs	r3, r3, #3
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	466a      	mov	r2, sp
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	469d      	mov	sp, r3
 80095f6:	466b      	mov	r3, sp
 80095f8:	3300      	adds	r3, #0
 80095fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80095fc:	2316      	movs	r3, #22
 80095fe:	2220      	movs	r2, #32
 8009600:	189b      	adds	r3, r3, r2
 8009602:	19db      	adds	r3, r3, r7
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
 8009608:	e01e      	b.n	8009648 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800960a:	2317      	movs	r3, #23
 800960c:	2220      	movs	r2, #32
 800960e:	189b      	adds	r3, r3, r2
 8009610:	19db      	adds	r3, r3, r7
 8009612:	781a      	ldrb	r2, [r3, #0]
 8009614:	2116      	movs	r1, #22
 8009616:	2320      	movs	r3, #32
 8009618:	18cb      	adds	r3, r1, r3
 800961a:	19db      	adds	r3, r3, r7
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	18d3      	adds	r3, r2, r3
 8009620:	001a      	movs	r2, r3
 8009622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009624:	189a      	adds	r2, r3, r2
 8009626:	0008      	movs	r0, r1
 8009628:	2320      	movs	r3, #32
 800962a:	18cb      	adds	r3, r1, r3
 800962c:	19db      	adds	r3, r3, r7
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	7811      	ldrb	r1, [r2, #0]
 8009632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009634:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8009636:	2320      	movs	r3, #32
 8009638:	18c3      	adds	r3, r0, r3
 800963a:	19db      	adds	r3, r3, r7
 800963c:	781a      	ldrb	r2, [r3, #0]
 800963e:	2320      	movs	r3, #32
 8009640:	18c3      	adds	r3, r0, r3
 8009642:	19db      	adds	r3, r3, r7
 8009644:	3201      	adds	r2, #1
 8009646:	701a      	strb	r2, [r3, #0]
 8009648:	2316      	movs	r3, #22
 800964a:	2220      	movs	r2, #32
 800964c:	189b      	adds	r3, r3, r2
 800964e:	19da      	adds	r2, r3, r7
 8009650:	2322      	movs	r3, #34	@ 0x22
 8009652:	18fb      	adds	r3, r7, r3
 8009654:	7812      	ldrb	r2, [r2, #0]
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d3d6      	bcc.n	800960a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800965c:	2417      	movs	r4, #23
 800965e:	2320      	movs	r3, #32
 8009660:	18e3      	adds	r3, r4, r3
 8009662:	19db      	adds	r3, r3, r7
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	2322      	movs	r3, #34	@ 0x22
 8009668:	18fb      	adds	r3, r7, r3
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	18d3      	adds	r3, r2, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009672:	18d2      	adds	r2, r2, r3
 8009674:	250b      	movs	r5, #11
 8009676:	2320      	movs	r3, #32
 8009678:	18eb      	adds	r3, r5, r3
 800967a:	19db      	adds	r3, r3, r7
 800967c:	7812      	ldrb	r2, [r2, #0]
 800967e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8009680:	2322      	movs	r3, #34	@ 0x22
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	3b01      	subs	r3, #1
 8009688:	b2da      	uxtb	r2, r3
 800968a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968c:	0011      	movs	r1, r2
 800968e:	0018      	movs	r0, r3
 8009690:	f000 f838 	bl	8009704 <CalculateCRC>
 8009694:	0003      	movs	r3, r0
 8009696:	001a      	movs	r2, r3
 8009698:	2320      	movs	r3, #32
 800969a:	18eb      	adds	r3, r5, r3
 800969c:	19db      	adds	r3, r3, r7
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d00c      	beq.n	80096be <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80096a4:	2320      	movs	r3, #32
 80096a6:	18e3      	adds	r3, r4, r3
 80096a8:	19db      	adds	r3, r3, r7
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	4a13      	ldr	r2, [pc, #76]	@ (80096fc <CheckCRC+0x18c>)
 80096b0:	4913      	ldr	r1, [pc, #76]	@ (8009700 <CheckCRC+0x190>)
 80096b2:	2001      	movs	r0, #1
 80096b4:	f002 f894 	bl	800b7e0 <CreateLine>
      return false;
 80096b8:	2300      	movs	r3, #0
 80096ba:	46b5      	mov	sp, r6
 80096bc:	e019      	b.n	80096f2 <CheckCRC+0x182>
 80096be:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80096c0:	2217      	movs	r2, #23
 80096c2:	2320      	movs	r3, #32
 80096c4:	18d3      	adds	r3, r2, r3
 80096c6:	19db      	adds	r3, r3, r7
 80096c8:	2120      	movs	r1, #32
 80096ca:	1852      	adds	r2, r2, r1
 80096cc:	19d1      	adds	r1, r2, r7
 80096ce:	2222      	movs	r2, #34	@ 0x22
 80096d0:	18ba      	adds	r2, r7, r2
 80096d2:	7809      	ldrb	r1, [r1, #0]
 80096d4:	7812      	ldrb	r2, [r2, #0]
 80096d6:	188a      	adds	r2, r1, r2
 80096d8:	701a      	strb	r2, [r3, #0]
 80096da:	2317      	movs	r3, #23
 80096dc:	2220      	movs	r2, #32
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	19da      	adds	r2, r3, r7
 80096e2:	2323      	movs	r3, #35	@ 0x23
 80096e4:	18fb      	adds	r3, r7, r3
 80096e6:	7812      	ldrb	r2, [r2, #0]
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d200      	bcs.n	80096f0 <CheckCRC+0x180>
 80096ee:	e754      	b.n	800959a <CheckCRC+0x2a>
    }
  }
  return true;
 80096f0:	2301      	movs	r3, #1
}
 80096f2:	0018      	movs	r0, r3
 80096f4:	46bd      	mov	sp, r7
 80096f6:	b00f      	add	sp, #60	@ 0x3c
 80096f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096fa:	46c0      	nop			@ (mov r8, r8)
 80096fc:	08020474 	.word	0x08020474
 8009700:	080203a0 	.word	0x080203a0

08009704 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	000a      	movs	r2, r1
 800970e:	1cfb      	adds	r3, r7, #3
 8009710:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8009712:	230f      	movs	r3, #15
 8009714:	18fb      	adds	r3, r7, r3
 8009716:	22ff      	movs	r2, #255	@ 0xff
 8009718:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800971a:	230e      	movs	r3, #14
 800971c:	18fb      	adds	r3, r7, r3
 800971e:	2200      	movs	r2, #0
 8009720:	701a      	strb	r2, [r3, #0]
 8009722:	e037      	b.n	8009794 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009724:	230e      	movs	r3, #14
 8009726:	18fb      	adds	r3, r7, r3
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	18d3      	adds	r3, r2, r3
 800972e:	7819      	ldrb	r1, [r3, #0]
 8009730:	220f      	movs	r2, #15
 8009732:	18bb      	adds	r3, r7, r2
 8009734:	18ba      	adds	r2, r7, r2
 8009736:	7812      	ldrb	r2, [r2, #0]
 8009738:	404a      	eors	r2, r1
 800973a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800973c:	230d      	movs	r3, #13
 800973e:	18fb      	adds	r3, r7, r3
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	e01b      	b.n	800977e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8009746:	210f      	movs	r1, #15
 8009748:	187b      	adds	r3, r7, r1
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	b25b      	sxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	da09      	bge.n	8009766 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8009752:	187b      	adds	r3, r7, r1
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	005b      	lsls	r3, r3, #1
 8009758:	b25b      	sxtb	r3, r3
 800975a:	2231      	movs	r2, #49	@ 0x31
 800975c:	4053      	eors	r3, r2
 800975e:	b25a      	sxtb	r2, r3
 8009760:	187b      	adds	r3, r7, r1
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	e005      	b.n	8009772 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8009766:	230f      	movs	r3, #15
 8009768:	18fa      	adds	r2, r7, r3
 800976a:	18fb      	adds	r3, r7, r3
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	18db      	adds	r3, r3, r3
 8009770:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8009772:	210d      	movs	r1, #13
 8009774:	187b      	adds	r3, r7, r1
 8009776:	781a      	ldrb	r2, [r3, #0]
 8009778:	187b      	adds	r3, r7, r1
 800977a:	3201      	adds	r2, #1
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	230d      	movs	r3, #13
 8009780:	18fb      	adds	r3, r7, r3
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b07      	cmp	r3, #7
 8009786:	d9de      	bls.n	8009746 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8009788:	210e      	movs	r1, #14
 800978a:	187b      	adds	r3, r7, r1
 800978c:	781a      	ldrb	r2, [r3, #0]
 800978e:	187b      	adds	r3, r7, r1
 8009790:	3201      	adds	r2, #1
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	230e      	movs	r3, #14
 8009796:	18fa      	adds	r2, r7, r3
 8009798:	1cfb      	adds	r3, r7, #3
 800979a:	7812      	ldrb	r2, [r2, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d3c0      	bcc.n	8009724 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80097a2:	230f      	movs	r3, #15
 80097a4:	18fb      	adds	r3, r7, r3
 80097a6:	781b      	ldrb	r3, [r3, #0]
}
 80097a8:	0018      	movs	r0, r3
 80097aa:	46bd      	mov	sp, r7
 80097ac:	b004      	add	sp, #16
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4936      	ldr	r1, [pc, #216]	@ (8009898 <SGP_GetHT+0xe8>)
 80097c0:	1c18      	adds	r0, r3, #0
 80097c2:	f7f7 f87d 	bl	80008c0 <__aeabi_fadd>
 80097c6:	1c03      	adds	r3, r0, #0
 80097c8:	4934      	ldr	r1, [pc, #208]	@ (800989c <SGP_GetHT+0xec>)
 80097ca:	1c18      	adds	r0, r3, #0
 80097cc:	f7f7 fa02 	bl	8000bd4 <__aeabi_fdiv>
 80097d0:	1c03      	adds	r3, r0, #0
 80097d2:	4933      	ldr	r1, [pc, #204]	@ (80098a0 <SGP_GetHT+0xf0>)
 80097d4:	1c18      	adds	r0, r3, #0
 80097d6:	f7f7 fbe3 	bl	8000fa0 <__aeabi_fmul>
 80097da:	1c03      	adds	r3, r0, #0
 80097dc:	1c18      	adds	r0, r3, #0
 80097de:	f7f6 ff1d 	bl	800061c <__aeabi_f2uiz>
 80097e2:	0003      	movs	r3, r0
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	4b2f      	ldr	r3, [pc, #188]	@ (80098a4 <SGP_GetHT+0xf4>)
 80097e8:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	492e      	ldr	r1, [pc, #184]	@ (80098a8 <SGP_GetHT+0xf8>)
 80097f0:	1c18      	adds	r0, r3, #0
 80097f2:	f7f7 f9ef 	bl	8000bd4 <__aeabi_fdiv>
 80097f6:	1c03      	adds	r3, r0, #0
 80097f8:	4929      	ldr	r1, [pc, #164]	@ (80098a0 <SGP_GetHT+0xf0>)
 80097fa:	1c18      	adds	r0, r3, #0
 80097fc:	f7f7 fbd0 	bl	8000fa0 <__aeabi_fmul>
 8009800:	1c03      	adds	r3, r0, #0
 8009802:	1c18      	adds	r0, r3, #0
 8009804:	f7f6 ff0a 	bl	800061c <__aeabi_f2uiz>
 8009808:	0003      	movs	r3, r0
 800980a:	b29a      	uxth	r2, r3
 800980c:	4b27      	ldr	r3, [pc, #156]	@ (80098ac <SGP_GetHT+0xfc>)
 800980e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8009810:	4b26      	ldr	r3, [pc, #152]	@ (80098ac <SGP_GetHT+0xfc>)
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	0a1b      	lsrs	r3, r3, #8
 8009816:	b29b      	uxth	r3, r3
 8009818:	b2da      	uxtb	r2, r3
 800981a:	4b25      	ldr	r3, [pc, #148]	@ (80098b0 <SGP_GetHT+0x100>)
 800981c:	709a      	strb	r2, [r3, #2]
 800981e:	4b24      	ldr	r3, [pc, #144]	@ (80098b0 <SGP_GetHT+0x100>)
 8009820:	789a      	ldrb	r2, [r3, #2]
 8009822:	210c      	movs	r1, #12
 8009824:	187b      	adds	r3, r7, r1
 8009826:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8009828:	4b20      	ldr	r3, [pc, #128]	@ (80098ac <SGP_GetHT+0xfc>)
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	b2da      	uxtb	r2, r3
 800982e:	4b20      	ldr	r3, [pc, #128]	@ (80098b0 <SGP_GetHT+0x100>)
 8009830:	70da      	strb	r2, [r3, #3]
 8009832:	4b1f      	ldr	r3, [pc, #124]	@ (80098b0 <SGP_GetHT+0x100>)
 8009834:	78da      	ldrb	r2, [r3, #3]
 8009836:	187b      	adds	r3, r7, r1
 8009838:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800983a:	187b      	adds	r3, r7, r1
 800983c:	2102      	movs	r1, #2
 800983e:	0018      	movs	r0, r3
 8009840:	f7ff ff60 	bl	8009704 <CalculateCRC>
 8009844:	0003      	movs	r3, r0
 8009846:	001a      	movs	r2, r3
 8009848:	4b19      	ldr	r3, [pc, #100]	@ (80098b0 <SGP_GetHT+0x100>)
 800984a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800984c:	4b15      	ldr	r3, [pc, #84]	@ (80098a4 <SGP_GetHT+0xf4>)
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	0a1b      	lsrs	r3, r3, #8
 8009852:	b29b      	uxth	r3, r3
 8009854:	b2da      	uxtb	r2, r3
 8009856:	4b16      	ldr	r3, [pc, #88]	@ (80098b0 <SGP_GetHT+0x100>)
 8009858:	715a      	strb	r2, [r3, #5]
 800985a:	4b15      	ldr	r3, [pc, #84]	@ (80098b0 <SGP_GetHT+0x100>)
 800985c:	795a      	ldrb	r2, [r3, #5]
 800985e:	2108      	movs	r1, #8
 8009860:	187b      	adds	r3, r7, r1
 8009862:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8009864:	4b0f      	ldr	r3, [pc, #60]	@ (80098a4 <SGP_GetHT+0xf4>)
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b2da      	uxtb	r2, r3
 800986a:	4b11      	ldr	r3, [pc, #68]	@ (80098b0 <SGP_GetHT+0x100>)
 800986c:	719a      	strb	r2, [r3, #6]
 800986e:	4b10      	ldr	r3, [pc, #64]	@ (80098b0 <SGP_GetHT+0x100>)
 8009870:	799a      	ldrb	r2, [r3, #6]
 8009872:	187b      	adds	r3, r7, r1
 8009874:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8009876:	187b      	adds	r3, r7, r1
 8009878:	2102      	movs	r1, #2
 800987a:	0018      	movs	r0, r3
 800987c:	f7ff ff42 	bl	8009704 <CalculateCRC>
 8009880:	0003      	movs	r3, r0
 8009882:	001a      	movs	r2, r3
 8009884:	4b0a      	ldr	r3, [pc, #40]	@ (80098b0 <SGP_GetHT+0x100>)
 8009886:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8009888:	4b0a      	ldr	r3, [pc, #40]	@ (80098b4 <SGP_GetHT+0x104>)
 800988a:	2201      	movs	r2, #1
 800988c:	701a      	strb	r2, [r3, #0]
}
 800988e:	46c0      	nop			@ (mov r8, r8)
 8009890:	46bd      	mov	sp, r7
 8009892:	b004      	add	sp, #16
 8009894:	bd80      	pop	{r7, pc}
 8009896:	46c0      	nop			@ (mov r8, r8)
 8009898:	42340000 	.word	0x42340000
 800989c:	432f0000 	.word	0x432f0000
 80098a0:	477fff00 	.word	0x477fff00
 80098a4:	2000127a 	.word	0x2000127a
 80098a8:	42c80000 	.word	0x42c80000
 80098ac:	20001278 	.word	0x20001278
 80098b0:	20000090 	.word	0x20000090
 80098b4:	2000127c 	.word	0x2000127c

080098b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	0002      	movs	r2, r0
 80098c0:	1dfb      	adds	r3, r7, #7
 80098c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80098c4:	1dfb      	adds	r3, r7, #7
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80098ca:	d809      	bhi.n	80098e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098cc:	1dfb      	adds	r3, r7, #7
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	001a      	movs	r2, r3
 80098d2:	231f      	movs	r3, #31
 80098d4:	401a      	ands	r2, r3
 80098d6:	4b04      	ldr	r3, [pc, #16]	@ (80098e8 <__NVIC_EnableIRQ+0x30>)
 80098d8:	2101      	movs	r1, #1
 80098da:	4091      	lsls	r1, r2
 80098dc:	000a      	movs	r2, r1
 80098de:	601a      	str	r2, [r3, #0]
  }
}
 80098e0:	46c0      	nop			@ (mov r8, r8)
 80098e2:	46bd      	mov	sp, r7
 80098e4:	b002      	add	sp, #8
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	e000e100 	.word	0xe000e100

080098ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	0002      	movs	r2, r0
 80098f4:	1dfb      	adds	r3, r7, #7
 80098f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80098f8:	1dfb      	adds	r3, r7, #7
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80098fe:	d810      	bhi.n	8009922 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009900:	1dfb      	adds	r3, r7, #7
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	001a      	movs	r2, r3
 8009906:	231f      	movs	r3, #31
 8009908:	4013      	ands	r3, r2
 800990a:	4908      	ldr	r1, [pc, #32]	@ (800992c <__NVIC_DisableIRQ+0x40>)
 800990c:	2201      	movs	r2, #1
 800990e:	409a      	lsls	r2, r3
 8009910:	0013      	movs	r3, r2
 8009912:	2280      	movs	r2, #128	@ 0x80
 8009914:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009916:	f3bf 8f4f 	dsb	sy
}
 800991a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800991c:	f3bf 8f6f 	isb	sy
}
 8009920:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8009922:	46c0      	nop			@ (mov r8, r8)
 8009924:	46bd      	mov	sp, r7
 8009926:	b002      	add	sp, #8
 8009928:	bd80      	pop	{r7, pc}
 800992a:	46c0      	nop			@ (mov r8, r8)
 800992c:	e000e100 	.word	0xe000e100

08009930 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 8009930:	b5b0      	push	{r4, r5, r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af02      	add	r7, sp, #8
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	0008      	movs	r0, r1
 800993a:	0011      	movs	r1, r2
 800993c:	1cfb      	adds	r3, r7, #3
 800993e:	1c02      	adds	r2, r0, #0
 8009940:	701a      	strb	r2, [r3, #0]
 8009942:	1cbb      	adds	r3, r7, #2
 8009944:	1c0a      	adds	r2, r1, #0
 8009946:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8009948:	4b5b      	ldr	r3, [pc, #364]	@ (8009ab8 <getSoundData+0x188>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2201      	movs	r2, #1
 8009950:	4053      	eors	r3, r2
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	d107      	bne.n	8009968 <getSoundData+0x38>
 8009958:	4b58      	ldr	r3, [pc, #352]	@ (8009abc <getSoundData+0x18c>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2201      	movs	r2, #1
 8009960:	4053      	eors	r3, r2
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <getSoundData+0x3c>
    {
        return false;
 8009968:	2300      	movs	r3, #0
 800996a:	e0a0      	b.n	8009aae <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800996c:	4b54      	ldr	r3, [pc, #336]	@ (8009ac0 <getSoundData+0x190>)
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d005      	beq.n	8009982 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009976:	4b53      	ldr	r3, [pc, #332]	@ (8009ac4 <getSoundData+0x194>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	b25b      	sxtb	r3, r3
 800997c:	0018      	movs	r0, r3
 800997e:	f7ff ffb5 	bl	80098ec <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 8009982:	f3bf 8f4f 	dsb	sy
}
 8009986:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8009988:	f3bf 8f6f 	isb	sy
}
 800998c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800998e:	1cfb      	adds	r3, r7, #3
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d04c      	beq.n	8009a30 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 8009996:	4b4c      	ldr	r3, [pc, #304]	@ (8009ac8 <getSoundData+0x198>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d11b      	bne.n	80099d6 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80099aa:	2300      	movs	r3, #0
 80099ac:	617b      	str	r3, [r7, #20]
 80099ae:	e00e      	b.n	80099ce <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	18d3      	adds	r3, r2, r3
 80099b6:	3302      	adds	r3, #2
 80099b8:	2200      	movs	r2, #0
 80099ba:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	18d3      	adds	r3, r2, r3
 80099c2:	3308      	adds	r3, #8
 80099c4:	2200      	movs	r2, #0
 80099c6:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	3301      	adds	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b05      	cmp	r3, #5
 80099d2:	d9ed      	bls.n	80099b0 <getSoundData+0x80>
 80099d4:	e02c      	b.n	8009a30 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	1c59      	adds	r1, r3, #1
 80099dc:	4b3b      	ldr	r3, [pc, #236]	@ (8009acc <getSoundData+0x19c>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	4b3b      	ldr	r3, [pc, #236]	@ (8009ad0 <getSoundData+0x1a0>)
 80099e2:	681c      	ldr	r4, [r3, #0]
 80099e4:	4b38      	ldr	r3, [pc, #224]	@ (8009ac8 <getSoundData+0x198>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	0023      	movs	r3, r4
 80099ec:	f000 fde8 	bl	800a5c0 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80099f0:	2300      	movs	r3, #0
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	e019      	b.n	8009a2a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	18d3      	adds	r3, r2, r3
 80099fc:	1c98      	adds	r0, r3, #2
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	3308      	adds	r3, #8
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8009a06:	4b33      	ldr	r3, [pc, #204]	@ (8009ad4 <getSoundData+0x1a4>)
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	0092      	lsls	r2, r2, #2
 8009a0c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 8009a0e:	4b32      	ldr	r3, [pc, #200]	@ (8009ad8 <getSoundData+0x1a8>)
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	0092      	lsls	r2, r2, #2
 8009a14:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009a16:	4b2c      	ldr	r3, [pc, #176]	@ (8009ac8 <getSoundData+0x198>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	0013      	movs	r3, r2
 8009a1e:	0022      	movs	r2, r4
 8009a20:	f000 fdce 	bl	800a5c0 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	3301      	adds	r3, #1
 8009a28:	613b      	str	r3, [r7, #16]
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	2b05      	cmp	r3, #5
 8009a2e:	d9e2      	bls.n	80099f6 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 8009a30:	1cbb      	adds	r3, r7, #2
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d028      	beq.n	8009a8a <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8009a38:	240e      	movs	r4, #14
 8009a3a:	193b      	adds	r3, r7, r4
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 8009a40:	250d      	movs	r5, #13
 8009a42:	197b      	adds	r3, r7, r5
 8009a44:	2200      	movs	r2, #0
 8009a46:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8009a48:	4b24      	ldr	r3, [pc, #144]	@ (8009adc <getSoundData+0x1ac>)
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	4924      	ldr	r1, [pc, #144]	@ (8009ae0 <getSoundData+0x1b0>)
 8009a4e:	197b      	adds	r3, r7, r5
 8009a50:	193a      	adds	r2, r7, r4
 8009a52:	f000 fe59 	bl	800a708 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8009a56:	193b      	adds	r3, r7, r4
 8009a58:	881a      	ldrh	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	21ff      	movs	r1, #255	@ 0xff
 8009a5e:	4011      	ands	r1, r2
 8009a60:	000c      	movs	r4, r1
 8009a62:	7b99      	ldrb	r1, [r3, #14]
 8009a64:	2000      	movs	r0, #0
 8009a66:	4001      	ands	r1, r0
 8009a68:	1c08      	adds	r0, r1, #0
 8009a6a:	1c21      	adds	r1, r4, #0
 8009a6c:	4301      	orrs	r1, r0
 8009a6e:	7399      	strb	r1, [r3, #14]
 8009a70:	0a12      	lsrs	r2, r2, #8
 8009a72:	b290      	uxth	r0, r2
 8009a74:	7bda      	ldrb	r2, [r3, #15]
 8009a76:	2100      	movs	r1, #0
 8009a78:	400a      	ands	r2, r1
 8009a7a:	1c11      	adds	r1, r2, #0
 8009a7c:	1c02      	adds	r2, r0, #0
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 8009a82:	197b      	adds	r3, r7, r5
 8009a84:	781a      	ldrb	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 8009a8a:	f000 f86f 	bl	8009b6c <micSettlingComplete>
 8009a8e:	0003      	movs	r3, r0
 8009a90:	001a      	movs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 8009a96:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac0 <getSoundData+0x190>)
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d005      	beq.n	8009aac <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009aa0:	4b08      	ldr	r3, [pc, #32]	@ (8009ac4 <getSoundData+0x194>)
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	b25b      	sxtb	r3, r3
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f7ff ff06 	bl	80098b8 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 8009aac:	2301      	movs	r3, #1
}
 8009aae:	0018      	movs	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	b006      	add	sp, #24
 8009ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ab6:	46c0      	nop			@ (mov r8, r8)
 8009ab8:	20001285 	.word	0x20001285
 8009abc:	20001288 	.word	0x20001288
 8009ac0:	20001287 	.word	0x20001287
 8009ac4:	20001cd8 	.word	0x20001cd8
 8009ac8:	20001d14 	.word	0x20001d14
 8009acc:	20001cdc 	.word	0x20001cdc
 8009ad0:	20001ce0 	.word	0x20001ce0
 8009ad4:	20001ce4 	.word	0x20001ce4
 8009ad8:	20001cfc 	.word	0x20001cfc
 8009adc:	20001290 	.word	0x20001290
 8009ae0:	3b5c7333 	.word	0x3b5c7333

08009ae4 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	001a      	movs	r2, r3
 8009af2:	1cfb      	adds	r3, r7, #3
 8009af4:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8009af6:	4b09      	ldr	r3, [pc, #36]	@ (8009b1c <soundInit+0x38>)
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8009afc:	4b08      	ldr	r3, [pc, #32]	@ (8009b20 <soundInit+0x3c>)
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8009b02:	4b08      	ldr	r3, [pc, #32]	@ (8009b24 <soundInit+0x40>)
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8009b08:	4b07      	ldr	r3, [pc, #28]	@ (8009b28 <soundInit+0x44>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	569a      	ldrsb	r2, [r3, r2]
 8009b0e:	4b06      	ldr	r3, [pc, #24]	@ (8009b28 <soundInit+0x44>)
 8009b10:	701a      	strb	r2, [r3, #0]

    return true;
 8009b12:	2301      	movs	r3, #1
}
 8009b14:	0018      	movs	r0, r3
 8009b16:	46bd      	mov	sp, r7
 8009b18:	b004      	add	sp, #16
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	20001cd0 	.word	0x20001cd0
 8009b20:	20001ccc 	.word	0x20001ccc
 8009b24:	20001cd4 	.word	0x20001cd4
 8009b28:	20001cd8 	.word	0x20001cd8

08009b2c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8009b30:	4b02      	ldr	r3, [pc, #8]	@ (8009b3c <clearMaximumAmplitude+0x10>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
}
 8009b36:	46c0      	nop			@ (mov r8, r8)
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20001290 	.word	0x20001290

08009b40 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8009b44:	4b08      	ldr	r3, [pc, #32]	@ (8009b68 <startMicSettlingPeriod+0x28>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8009b4e:	4b06      	ldr	r3, [pc, #24]	@ (8009b68 <startMicSettlingPeriod+0x28>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	0018      	movs	r0, r3
 8009b54:	f009 f976 	bl	8012e44 <HAL_TIM_Base_Start>
 8009b58:	1e03      	subs	r3, r0, #0
 8009b5a:	d001      	beq.n	8009b60 <startMicSettlingPeriod+0x20>
    {
        return false;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	e000      	b.n	8009b62 <startMicSettlingPeriod+0x22>
    }
    return true;
 8009b60:	2301      	movs	r3, #1
}
 8009b62:	0018      	movs	r0, r3
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20001ccc 	.word	0x20001ccc

08009b6c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8009b72:	4b0e      	ldr	r3, [pc, #56]	@ (8009bac <micSettlingComplete+0x40>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	691b      	ldr	r3, [r3, #16]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	401a      	ands	r2, r3
 8009b7e:	1dfb      	adds	r3, r7, #7
 8009b80:	3a01      	subs	r2, #1
 8009b82:	4251      	negs	r1, r2
 8009b84:	414a      	adcs	r2, r1
 8009b86:	701a      	strb	r2, [r3, #0]
    if (complete)
 8009b88:	1dfb      	adds	r3, r7, #7
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8009b90:	4b06      	ldr	r3, [pc, #24]	@ (8009bac <micSettlingComplete+0x40>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	0018      	movs	r0, r3
 8009b96:	f009 f99f 	bl	8012ed8 <HAL_TIM_Base_Stop>
      DataReady = true;
 8009b9a:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <micSettlingComplete+0x44>)
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8009ba0:	1dfb      	adds	r3, r7, #7
 8009ba2:	781b      	ldrb	r3, [r3, #0]
}
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	b002      	add	sp, #8
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	20001ccc 	.word	0x20001ccc
 8009bb0:	20001284 	.word	0x20001284

08009bb4 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	0002      	movs	r2, r0
 8009bbc:	1dfb      	adds	r3, r7, #7
 8009bbe:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8009bc0:	4b29      	ldr	r3, [pc, #164]	@ (8009c68 <enableMicrophone+0xb4>)
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	1dfa      	adds	r2, r7, #7
 8009bc8:	7812      	ldrb	r2, [r2, #0]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d101      	bne.n	8009bd2 <enableMicrophone+0x1e>
    {
        return true;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e045      	b.n	8009c5e <enableMicrophone+0xaa>
    }
    if (bEnable)
 8009bd2:	1dfb      	adds	r3, r7, #7
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d025      	beq.n	8009c26 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8009bda:	f7ff ffb1 	bl	8009b40 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8009bde:	4b23      	ldr	r3, [pc, #140]	@ (8009c6c <enableMicrophone+0xb8>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2280      	movs	r2, #128	@ 0x80
 8009be4:	0092      	lsls	r2, r2, #2
 8009be6:	4922      	ldr	r1, [pc, #136]	@ (8009c70 <enableMicrophone+0xbc>)
 8009be8:	0018      	movs	r0, r3
 8009bea:	f005 fd0b 	bl	800f604 <HAL_I2S_Receive_DMA>
 8009bee:	1e03      	subs	r3, r0, #0
 8009bf0:	d001      	beq.n	8009bf6 <enableMicrophone+0x42>
        {
            return false;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	e033      	b.n	8009c5e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8009bf6:	f7ff ff99 	bl	8009b2c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8009bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8009c74 <enableMicrophone+0xc0>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009c00:	4b1d      	ldr	r3, [pc, #116]	@ (8009c78 <enableMicrophone+0xc4>)
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	b25b      	sxtb	r3, r3
 8009c06:	0018      	movs	r0, r3
 8009c08:	f7ff fe56 	bl	80098b8 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8009c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8009c7c <enableMicrophone+0xc8>)
 8009c0e:	2201      	movs	r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8009c12:	4b15      	ldr	r3, [pc, #84]	@ (8009c68 <enableMicrophone+0xb4>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009c18:	4b19      	ldr	r3, [pc, #100]	@ (8009c80 <enableMicrophone+0xcc>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009c1e:	4b19      	ldr	r3, [pc, #100]	@ (8009c84 <enableMicrophone+0xd0>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
 8009c24:	e01a      	b.n	8009c5c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009c26:	4b14      	ldr	r3, [pc, #80]	@ (8009c78 <enableMicrophone+0xc4>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	b25b      	sxtb	r3, r3
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f7ff fe5d 	bl	80098ec <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8009c32:	4b12      	ldr	r3, [pc, #72]	@ (8009c7c <enableMicrophone+0xc8>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009c38:	4b11      	ldr	r3, [pc, #68]	@ (8009c80 <enableMicrophone+0xcc>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009c3e:	4b11      	ldr	r3, [pc, #68]	@ (8009c84 <enableMicrophone+0xd0>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8009c44:	4b09      	ldr	r3, [pc, #36]	@ (8009c6c <enableMicrophone+0xb8>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	0018      	movs	r0, r3
 8009c4a:	f005 fd9d 	bl	800f788 <HAL_I2S_DMAStop>
 8009c4e:	1e03      	subs	r3, r0, #0
 8009c50:	d001      	beq.n	8009c56 <enableMicrophone+0xa2>
        {
            return false;
 8009c52:	2300      	movs	r3, #0
 8009c54:	e003      	b.n	8009c5e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8009c56:	4b04      	ldr	r3, [pc, #16]	@ (8009c68 <enableMicrophone+0xb4>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8009c5c:	2301      	movs	r3, #1
}
 8009c5e:	0018      	movs	r0, r3
 8009c60:	46bd      	mov	sp, r7
 8009c62:	b002      	add	sp, #8
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	46c0      	nop			@ (mov r8, r8)
 8009c68:	20001285 	.word	0x20001285
 8009c6c:	20001cd0 	.word	0x20001cd0
 8009c70:	200012cc 	.word	0x200012cc
 8009c74:	2000128c 	.word	0x2000128c
 8009c78:	20001cd8 	.word	0x20001cd8
 8009c7c:	20001287 	.word	0x20001287
 8009c80:	20001286 	.word	0x20001286
 8009c84:	20001288 	.word	0x20001288

08009c88 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <startSPLcalculation+0x38>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2201      	movs	r2, #1
 8009c94:	4053      	eors	r3, r2
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d001      	beq.n	8009ca0 <startSPLcalculation+0x18>
    {
        return false;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	e00c      	b.n	8009cba <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8009ca0:	4b08      	ldr	r3, [pc, #32]	@ (8009cc4 <startSPLcalculation+0x3c>)
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <startSPLcalculation+0x26>
    {
        return true;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e005      	b.n	8009cba <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8009cae:	f000 fb63 	bl	800a378 <resetSPLstate>
    SPLcalcEnabled = true;
 8009cb2:	4b04      	ldr	r3, [pc, #16]	@ (8009cc4 <startSPLcalculation+0x3c>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	701a      	strb	r2, [r3, #0]
    return true;
 8009cb8:	2301      	movs	r3, #1
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20001285 	.word	0x20001285
 8009cc4:	20001286 	.word	0x20001286

08009cc8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009cd0:	4b05      	ldr	r3, [pc, #20]	@ (8009ce8 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d102      	bne.n	8009ce0 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f000 f81a 	bl	8009d14 <processHalfDMAbuffer>
  }
}
 8009ce0:	46c0      	nop			@ (mov r8, r8)
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	b002      	add	sp, #8
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20001cd0 	.word	0x20001cd0

08009cec <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009cf4:	4b06      	ldr	r3, [pc, #24]	@ (8009d10 <HAL_I2S_RxCpltCallback+0x24>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d104      	bne.n	8009d08 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8009cfe:	2380      	movs	r3, #128	@ 0x80
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f000 f806 	bl	8009d14 <processHalfDMAbuffer>
  }
}
 8009d08:	46c0      	nop			@ (mov r8, r8)
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	b002      	add	sp, #8
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	20001cd0 	.word	0x20001cd0

08009d14 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	005a      	lsls	r2, r3, #1
 8009d20:	4b15      	ldr	r3, [pc, #84]	@ (8009d78 <processHalfDMAbuffer+0x64>)
 8009d22:	18d3      	adds	r3, r2, r3
 8009d24:	4a15      	ldr	r2, [pc, #84]	@ (8009d7c <processHalfDMAbuffer+0x68>)
 8009d26:	2180      	movs	r1, #128	@ 0x80
 8009d28:	0089      	lsls	r1, r1, #2
 8009d2a:	0018      	movs	r0, r3
 8009d2c:	f000 fd35 	bl	800a79a <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8009d30:	4b13      	ldr	r3, [pc, #76]	@ (8009d80 <processHalfDMAbuffer+0x6c>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	425a      	negs	r2, r3
 8009d36:	4153      	adcs	r3, r2
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	4b11      	ldr	r3, [pc, #68]	@ (8009d80 <processHalfDMAbuffer+0x6c>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2109      	movs	r1, #9
 8009d40:	4299      	cmp	r1, r3
 8009d42:	419b      	sbcs	r3, r3
 8009d44:	425b      	negs	r3, r3
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	480c      	ldr	r0, [pc, #48]	@ (8009d7c <processHalfDMAbuffer+0x68>)
 8009d4a:	2180      	movs	r1, #128	@ 0x80
 8009d4c:	f000 fb46 	bl	800a3dc <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8009d50:	4b0b      	ldr	r3, [pc, #44]	@ (8009d80 <processHalfDMAbuffer+0x6c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b09      	cmp	r3, #9
 8009d56:	d804      	bhi.n	8009d62 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8009d58:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <processHalfDMAbuffer+0x6c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	4b08      	ldr	r3, [pc, #32]	@ (8009d80 <processHalfDMAbuffer+0x6c>)
 8009d60:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8009d62:	4b08      	ldr	r3, [pc, #32]	@ (8009d84 <processHalfDMAbuffer+0x70>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8009d6c:	f000 f826 	bl	8009dbc <calculateSPLQ31>
    }
}
 8009d70:	46c0      	nop			@ (mov r8, r8)
 8009d72:	46bd      	mov	sp, r7
 8009d74:	b002      	add	sp, #8
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	200012cc 	.word	0x200012cc
 8009d7c:	20001acc 	.word	0x20001acc
 8009d80:	2000128c 	.word	0x2000128c
 8009d84:	20001286 	.word	0x20001286

08009d88 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b082      	sub	sp, #8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009d90:	4b07      	ldr	r3, [pc, #28]	@ (8009db0 <HAL_I2S_ErrorCallback+0x28>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d106      	bne.n	8009da8 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8009d9a:	4a06      	ldr	r2, [pc, #24]	@ (8009db4 <HAL_I2S_ErrorCallback+0x2c>)
 8009d9c:	239f      	movs	r3, #159	@ 0x9f
 8009d9e:	0059      	lsls	r1, r3, #1
 8009da0:	4b05      	ldr	r3, [pc, #20]	@ (8009db8 <HAL_I2S_ErrorCallback+0x30>)
 8009da2:	0018      	movs	r0, r3
 8009da4:	f001 fdc8 	bl	800b938 <errorHandler>
  }
}
 8009da8:	46c0      	nop			@ (mov r8, r8)
 8009daa:	46bd      	mov	sp, r7
 8009dac:	b002      	add	sp, #8
 8009dae:	bd80      	pop	{r7, pc}
 8009db0:	20001cd0 	.word	0x20001cd0
 8009db4:	0802051c 	.word	0x0802051c
 8009db8:	08020b30 	.word	0x08020b30

08009dbc <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8009dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dbe:	b0b3      	sub	sp, #204	@ 0xcc
 8009dc0:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8009dc2:	4ae2      	ldr	r2, [pc, #904]	@ (800a14c <calculateSPLQ31+0x390>)
 8009dc4:	2338      	movs	r3, #56	@ 0x38
 8009dc6:	2030      	movs	r0, #48	@ 0x30
 8009dc8:	181b      	adds	r3, r3, r0
 8009dca:	19d9      	adds	r1, r3, r7
 8009dcc:	2334      	movs	r3, #52	@ 0x34
 8009dce:	181b      	adds	r3, r3, r0
 8009dd0:	19d8      	adds	r0, r3, r7
 8009dd2:	2380      	movs	r3, #128	@ 0x80
 8009dd4:	f000 fc36 	bl	800a644 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8009dd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	da00      	bge.n	8009de0 <calculateSPLQ31+0x24>
 8009dde:	3301      	adds	r3, #1
 8009de0:	105b      	asrs	r3, r3, #1
 8009de2:	001a      	movs	r2, r3
 8009de4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	da00      	bge.n	8009dec <calculateSPLQ31+0x30>
 8009dea:	3301      	adds	r3, #1
 8009dec:	105b      	asrs	r3, r3, #1
 8009dee:	18d3      	adds	r3, r2, r3
 8009df0:	2188      	movs	r1, #136	@ 0x88
 8009df2:	187a      	adds	r2, r7, r1
 8009df4:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8009df6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009df8:	187b      	adds	r3, r7, r1
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	3304      	adds	r3, #4
 8009e00:	2284      	movs	r2, #132	@ 0x84
 8009e02:	18b9      	adds	r1, r7, r2
 8009e04:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8009e06:	18bb      	adds	r3, r7, r2
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4ad1      	ldr	r2, [pc, #836]	@ (800a150 <calculateSPLQ31+0x394>)
 8009e0c:	0019      	movs	r1, r3
 8009e0e:	0010      	movs	r0, r2
 8009e10:	f000 fc58 	bl	800a6c4 <getPo2factor>
 8009e14:	0003      	movs	r3, r0
 8009e16:	2280      	movs	r2, #128	@ 0x80
 8009e18:	18ba      	adds	r2, r7, r2
 8009e1a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	2284      	movs	r2, #132	@ 0x84
 8009e20:	2130      	movs	r1, #48	@ 0x30
 8009e22:	1852      	adds	r2, r2, r1
 8009e24:	19d2      	adds	r2, r2, r7
 8009e26:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009e28:	2300      	movs	r3, #0
 8009e2a:	2280      	movs	r2, #128	@ 0x80
 8009e2c:	1852      	adds	r2, r2, r1
 8009e2e:	19d2      	adds	r2, r2, r7
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	e032      	b.n	8009e9a <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8009e34:	4ac5      	ldr	r2, [pc, #788]	@ (800a14c <calculateSPLQ31+0x390>)
 8009e36:	2680      	movs	r6, #128	@ 0x80
 8009e38:	2330      	movs	r3, #48	@ 0x30
 8009e3a:	18f1      	adds	r1, r6, r3
 8009e3c:	19cb      	adds	r3, r1, r7
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	589a      	ldr	r2, [r3, r2]
 8009e44:	2188      	movs	r1, #136	@ 0x88
 8009e46:	1879      	adds	r1, r7, r1
 8009e48:	680b      	ldr	r3, [r1, #0]
 8009e4a:	1ad2      	subs	r2, r2, r3
 8009e4c:	2180      	movs	r1, #128	@ 0x80
 8009e4e:	1879      	adds	r1, r7, r1
 8009e50:	680b      	ldr	r3, [r1, #0]
 8009e52:	409a      	lsls	r2, r3
 8009e54:	0011      	movs	r1, r2
 8009e56:	4abf      	ldr	r2, [pc, #764]	@ (800a154 <calculateSPLQ31+0x398>)
 8009e58:	2084      	movs	r0, #132	@ 0x84
 8009e5a:	2330      	movs	r3, #48	@ 0x30
 8009e5c:	18c3      	adds	r3, r0, r3
 8009e5e:	19db      	adds	r3, r3, r7
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8009e66:	2230      	movs	r2, #48	@ 0x30
 8009e68:	1883      	adds	r3, r0, r2
 8009e6a:	19db      	adds	r3, r3, r7
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	49b8      	ldr	r1, [pc, #736]	@ (800a154 <calculateSPLQ31+0x398>)
 8009e72:	009a      	lsls	r2, r3, #2
 8009e74:	2300      	movs	r3, #0
 8009e76:	5053      	str	r3, [r2, r1]
        count += 2;
 8009e78:	2230      	movs	r2, #48	@ 0x30
 8009e7a:	1883      	adds	r3, r0, r2
 8009e7c:	19db      	adds	r3, r3, r7
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3302      	adds	r3, #2
 8009e82:	0011      	movs	r1, r2
 8009e84:	1882      	adds	r2, r0, r2
 8009e86:	19d2      	adds	r2, r2, r7
 8009e88:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009e8a:	000a      	movs	r2, r1
 8009e8c:	18b3      	adds	r3, r6, r2
 8009e8e:	19db      	adds	r3, r3, r7
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	3301      	adds	r3, #1
 8009e94:	18b2      	adds	r2, r6, r2
 8009e96:	19d2      	adds	r2, r2, r7
 8009e98:	6013      	str	r3, [r2, #0]
 8009e9a:	2380      	movs	r3, #128	@ 0x80
 8009e9c:	2630      	movs	r6, #48	@ 0x30
 8009e9e:	199b      	adds	r3, r3, r6
 8009ea0:	19db      	adds	r3, r3, r7
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ea6:	d9c5      	bls.n	8009e34 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8009ea8:	4bab      	ldr	r3, [pc, #684]	@ (800a158 <calculateSPLQ31+0x39c>)
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	49a9      	ldr	r1, [pc, #676]	@ (800a154 <calculateSPLQ31+0x398>)
 8009eae:	2301      	movs	r3, #1
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f010 f88d 	bl	8019fd0 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8009eb6:	4aa9      	ldr	r2, [pc, #676]	@ (800a15c <calculateSPLQ31+0x3a0>)
 8009eb8:	2338      	movs	r3, #56	@ 0x38
 8009eba:	199b      	adds	r3, r3, r6
 8009ebc:	19d9      	adds	r1, r3, r7
 8009ebe:	2334      	movs	r3, #52	@ 0x34
 8009ec0:	199b      	adds	r3, r3, r6
 8009ec2:	19d8      	adds	r0, r3, r7
 8009ec4:	237e      	movs	r3, #126	@ 0x7e
 8009ec6:	f000 fbbd 	bl	800a644 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8009eca:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ecc:	2380      	movs	r3, #128	@ 0x80
 8009ece:	061b      	lsls	r3, r3, #24
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d101      	bne.n	8009ed8 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8009ed4:	4b9e      	ldr	r3, [pc, #632]	@ (800a150 <calculateSPLQ31+0x394>)
 8009ed6:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8009ed8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009eda:	2380      	movs	r3, #128	@ 0x80
 8009edc:	061b      	lsls	r3, r3, #24
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d101      	bne.n	8009ee6 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8009ee2:	4b9b      	ldr	r3, [pc, #620]	@ (800a150 <calculateSPLQ31+0x394>)
 8009ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8009ee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ee8:	17da      	asrs	r2, r3, #31
 8009eea:	189b      	adds	r3, r3, r2
 8009eec:	4053      	eors	r3, r2
 8009eee:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8009ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ef2:	17da      	asrs	r2, r3, #31
 8009ef4:	189b      	adds	r3, r3, r2
 8009ef6:	4053      	eors	r3, r2
 8009ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8009efa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009efc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009efe:	429a      	cmp	r2, r3
 8009f00:	dd01      	ble.n	8009f06 <calculateSPLQ31+0x14a>
    {
        max = min;
 8009f02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f04:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8009f06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f08:	3304      	adds	r3, #4
 8009f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8009f0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f0e:	4a90      	ldr	r2, [pc, #576]	@ (800a150 <calculateSPLQ31+0x394>)
 8009f10:	0019      	movs	r1, r3
 8009f12:	0010      	movs	r0, r2
 8009f14:	f000 fbd6 	bl	800a6c4 <getPo2factor>
 8009f18:	0003      	movs	r3, r0
 8009f1a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	22ac      	movs	r2, #172	@ 0xac
 8009f20:	18ba      	adds	r2, r7, r2
 8009f22:	6013      	str	r3, [r2, #0]
 8009f24:	e012      	b.n	8009f4c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8009f26:	4a8b      	ldr	r2, [pc, #556]	@ (800a154 <calculateSPLQ31+0x398>)
 8009f28:	20ac      	movs	r0, #172	@ 0xac
 8009f2a:	183b      	adds	r3, r7, r0
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	589a      	ldr	r2, [r3, r2]
 8009f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f34:	409a      	lsls	r2, r3
 8009f36:	0011      	movs	r1, r2
 8009f38:	4a86      	ldr	r2, [pc, #536]	@ (800a154 <calculateSPLQ31+0x398>)
 8009f3a:	183b      	adds	r3, r7, r0
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8009f42:	183b      	adds	r3, r7, r0
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3301      	adds	r3, #1
 8009f48:	183a      	adds	r2, r7, r0
 8009f4a:	6013      	str	r3, [r2, #0]
 8009f4c:	23ac      	movs	r3, #172	@ 0xac
 8009f4e:	18fb      	adds	r3, r7, r3
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f54:	d9e7      	bls.n	8009f26 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8009f56:	4b7d      	ldr	r3, [pc, #500]	@ (800a14c <calculateSPLQ31+0x390>)
 8009f58:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8009f5a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009f5c:	4b7d      	ldr	r3, [pc, #500]	@ (800a154 <calculateSPLQ31+0x398>)
 8009f5e:	2240      	movs	r2, #64	@ 0x40
 8009f60:	0018      	movs	r0, r3
 8009f62:	f010 fddf 	bl	801ab24 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8009f66:	2330      	movs	r3, #48	@ 0x30
 8009f68:	18fb      	adds	r3, r7, r3
 8009f6a:	0018      	movs	r0, r3
 8009f6c:	2330      	movs	r3, #48	@ 0x30
 8009f6e:	001a      	movs	r2, r3
 8009f70:	2100      	movs	r1, #0
 8009f72:	f012 fbfb 	bl	801c76c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8009f76:	2200      	movs	r2, #0
 8009f78:	2300      	movs	r3, #0
 8009f7a:	21a0      	movs	r1, #160	@ 0xa0
 8009f7c:	1879      	adds	r1, r7, r1
 8009f7e:	600a      	str	r2, [r1, #0]
 8009f80:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009f82:	2301      	movs	r3, #1
 8009f84:	229c      	movs	r2, #156	@ 0x9c
 8009f86:	18ba      	adds	r2, r7, r2
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	e05b      	b.n	800a044 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8009f8c:	269c      	movs	r6, #156	@ 0x9c
 8009f8e:	19bb      	adds	r3, r7, r6
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	009a      	lsls	r2, r3, #2
 8009f94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f96:	189b      	adds	r3, r3, r2
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	613b      	str	r3, [r7, #16]
 8009f9c:	17db      	asrs	r3, r3, #31
 8009f9e:	617b      	str	r3, [r7, #20]
 8009fa0:	4b6f      	ldr	r3, [pc, #444]	@ (800a160 <calculateSPLQ31+0x3a4>)
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	19bb      	adds	r3, r7, r6
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	18d3      	adds	r3, r2, r3
 8009fac:	881b      	ldrh	r3, [r3, #0]
 8009fae:	60bb      	str	r3, [r7, #8]
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6938      	ldr	r0, [r7, #16]
 8009fba:	6979      	ldr	r1, [r7, #20]
 8009fbc:	f7f6 fb00 	bl	80005c0 <__aeabi_lmul>
 8009fc0:	0002      	movs	r2, r0
 8009fc2:	000b      	movs	r3, r1
 8009fc4:	0010      	movs	r0, r2
 8009fc6:	0019      	movs	r1, r3
 8009fc8:	23a0      	movs	r3, #160	@ 0xa0
 8009fca:	18fa      	adds	r2, r7, r3
 8009fcc:	6853      	ldr	r3, [r2, #4]
 8009fce:	6812      	ldr	r2, [r2, #0]
 8009fd0:	1812      	adds	r2, r2, r0
 8009fd2:	414b      	adcs	r3, r1
 8009fd4:	21a0      	movs	r1, #160	@ 0xa0
 8009fd6:	1879      	adds	r1, r7, r1
 8009fd8:	600a      	str	r2, [r1, #0]
 8009fda:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8009fdc:	4b61      	ldr	r3, [pc, #388]	@ (800a164 <calculateSPLQ31+0x3a8>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	19bb      	adds	r3, r7, r6
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	18d3      	adds	r3, r2, r3
 8009fe6:	781b      	ldrb	r3, [r3, #0]
 8009fe8:	2b06      	cmp	r3, #6
 8009fea:	d025      	beq.n	800a038 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8009fec:	4b5d      	ldr	r3, [pc, #372]	@ (800a164 <calculateSPLQ31+0x3a8>)
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	19bb      	adds	r3, r7, r6
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	18d3      	adds	r3, r2, r3
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2230      	movs	r2, #48	@ 0x30
 8009ffa:	18ba      	adds	r2, r7, r2
 8009ffc:	00db      	lsls	r3, r3, #3
 8009ffe:	18d3      	adds	r3, r2, r3
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	6859      	ldr	r1, [r3, #4]
 800a004:	19bb      	adds	r3, r7, r6
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	009a      	lsls	r2, r3, #2
 800a00a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a00c:	189b      	adds	r3, r3, r2
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	603b      	str	r3, [r7, #0]
 800a012:	17db      	asrs	r3, r3, #31
 800a014:	607b      	str	r3, [r7, #4]
 800a016:	4b53      	ldr	r3, [pc, #332]	@ (800a164 <calculateSPLQ31+0x3a8>)
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	19be      	adds	r6, r7, r6
 800a01c:	6833      	ldr	r3, [r6, #0]
 800a01e:	18d3      	adds	r3, r2, r3
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	001e      	movs	r6, r3
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	1880      	adds	r0, r0, r2
 800a02a:	4159      	adcs	r1, r3
 800a02c:	2330      	movs	r3, #48	@ 0x30
 800a02e:	18fa      	adds	r2, r7, r3
 800a030:	00f3      	lsls	r3, r6, #3
 800a032:	18d3      	adds	r3, r2, r3
 800a034:	6018      	str	r0, [r3, #0]
 800a036:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800a038:	229c      	movs	r2, #156	@ 0x9c
 800a03a:	18bb      	adds	r3, r7, r2
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3301      	adds	r3, #1
 800a040:	18ba      	adds	r2, r7, r2
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	239c      	movs	r3, #156	@ 0x9c
 800a046:	18fb      	adds	r3, r7, r3
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a04c:	d99e      	bls.n	8009f8c <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800a04e:	2380      	movs	r3, #128	@ 0x80
 800a050:	18fb      	adds	r3, r7, r3
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	001a      	movs	r2, r3
 800a058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a05a:	005b      	lsls	r3, r3, #1
 800a05c:	18d3      	adds	r3, r2, r3
 800a05e:	3b22      	subs	r3, #34	@ 0x22
 800a060:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800a062:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a064:	17da      	asrs	r2, r3, #31
 800a066:	189b      	adds	r3, r3, r2
 800a068:	4053      	eors	r3, r2
 800a06a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800a06c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da62      	bge.n	800a138 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800a072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a074:	3b20      	subs	r3, #32
 800a076:	2b00      	cmp	r3, #0
 800a078:	db05      	blt.n	800a086 <calculateSPLQ31+0x2ca>
 800a07a:	22a0      	movs	r2, #160	@ 0xa0
 800a07c:	18ba      	adds	r2, r7, r2
 800a07e:	6812      	ldr	r2, [r2, #0]
 800a080:	409a      	lsls	r2, r3
 800a082:	627a      	str	r2, [r7, #36]	@ 0x24
 800a084:	e010      	b.n	800a0a8 <calculateSPLQ31+0x2ec>
 800a086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a088:	2220      	movs	r2, #32
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	22a0      	movs	r2, #160	@ 0xa0
 800a08e:	18ba      	adds	r2, r7, r2
 800a090:	6812      	ldr	r2, [r2, #0]
 800a092:	40da      	lsrs	r2, r3
 800a094:	0013      	movs	r3, r2
 800a096:	22a4      	movs	r2, #164	@ 0xa4
 800a098:	18ba      	adds	r2, r7, r2
 800a09a:	6811      	ldr	r1, [r2, #0]
 800a09c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a09e:	4091      	lsls	r1, r2
 800a0a0:	6279      	str	r1, [r7, #36]	@ 0x24
 800a0a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0a4:	431a      	orrs	r2, r3
 800a0a6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0a8:	21a0      	movs	r1, #160	@ 0xa0
 800a0aa:	187b      	adds	r3, r7, r1
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0b0:	409a      	lsls	r2, r3
 800a0b2:	623a      	str	r2, [r7, #32]
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800a0b8:	187a      	adds	r2, r7, r1
 800a0ba:	6013      	str	r3, [r2, #0]
 800a0bc:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a0be:	2300      	movs	r3, #0
 800a0c0:	2298      	movs	r2, #152	@ 0x98
 800a0c2:	18ba      	adds	r2, r7, r2
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e031      	b.n	800a12c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800a0c8:	2330      	movs	r3, #48	@ 0x30
 800a0ca:	18fa      	adds	r2, r7, r3
 800a0cc:	2398      	movs	r3, #152	@ 0x98
 800a0ce:	18fb      	adds	r3, r7, r3
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	18d3      	adds	r3, r2, r3
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a0dc:	3920      	subs	r1, #32
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	db03      	blt.n	800a0ea <calculateSPLQ31+0x32e>
 800a0e2:	0010      	movs	r0, r2
 800a0e4:	4088      	lsls	r0, r1
 800a0e6:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a0e8:	e00c      	b.n	800a104 <calculateSPLQ31+0x348>
 800a0ea:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a0ec:	2020      	movs	r0, #32
 800a0ee:	1a41      	subs	r1, r0, r1
 800a0f0:	0010      	movs	r0, r2
 800a0f2:	40c8      	lsrs	r0, r1
 800a0f4:	0001      	movs	r1, r0
 800a0f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a0f8:	001c      	movs	r4, r3
 800a0fa:	4084      	lsls	r4, r0
 800a0fc:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800a0fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a100:	4308      	orrs	r0, r1
 800a102:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a104:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a106:	0013      	movs	r3, r2
 800a108:	408b      	lsls	r3, r1
 800a10a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a10c:	2330      	movs	r3, #48	@ 0x30
 800a10e:	18fa      	adds	r2, r7, r3
 800a110:	2098      	movs	r0, #152	@ 0x98
 800a112:	183b      	adds	r3, r7, r0
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	00db      	lsls	r3, r3, #3
 800a118:	18d3      	adds	r3, r2, r3
 800a11a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a11c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a11e:	6019      	str	r1, [r3, #0]
 800a120:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a122:	183b      	adds	r3, r7, r0
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3301      	adds	r3, #1
 800a128:	183a      	adds	r2, r7, r0
 800a12a:	6013      	str	r3, [r2, #0]
 800a12c:	2398      	movs	r3, #152	@ 0x98
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b05      	cmp	r3, #5
 800a134:	d9c8      	bls.n	800a0c8 <calculateSPLQ31+0x30c>
 800a136:	e06b      	b.n	800a210 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800a138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a13a:	3b20      	subs	r3, #32
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	db13      	blt.n	800a168 <calculateSPLQ31+0x3ac>
 800a140:	22a4      	movs	r2, #164	@ 0xa4
 800a142:	18ba      	adds	r2, r7, r2
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	40da      	lsrs	r2, r3
 800a148:	61ba      	str	r2, [r7, #24]
 800a14a:	e01e      	b.n	800a18a <calculateSPLQ31+0x3ce>
 800a14c:	20001acc 	.word	0x20001acc
 800a150:	7fffffff 	.word	0x7fffffff
 800a154:	20001d18 	.word	0x20001d18
 800a158:	200000ac 	.word	0x200000ac
 800a15c:	20001d20 	.word	0x20001d20
 800a160:	200000b0 	.word	0x200000b0
 800a164:	200000bc 	.word	0x200000bc
 800a168:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a16a:	2220      	movs	r2, #32
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	22a4      	movs	r2, #164	@ 0xa4
 800a170:	18ba      	adds	r2, r7, r2
 800a172:	6812      	ldr	r2, [r2, #0]
 800a174:	409a      	lsls	r2, r3
 800a176:	0013      	movs	r3, r2
 800a178:	22a0      	movs	r2, #160	@ 0xa0
 800a17a:	18ba      	adds	r2, r7, r2
 800a17c:	6811      	ldr	r1, [r2, #0]
 800a17e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a180:	40d1      	lsrs	r1, r2
 800a182:	61b9      	str	r1, [r7, #24]
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	431a      	orrs	r2, r3
 800a188:	61ba      	str	r2, [r7, #24]
 800a18a:	23a4      	movs	r3, #164	@ 0xa4
 800a18c:	18fb      	adds	r3, r7, r3
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a192:	40da      	lsrs	r2, r3
 800a194:	61fa      	str	r2, [r7, #28]
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	21a0      	movs	r1, #160	@ 0xa0
 800a19c:	1879      	adds	r1, r7, r1
 800a19e:	600a      	str	r2, [r1, #0]
 800a1a0:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	2294      	movs	r2, #148	@ 0x94
 800a1a6:	18ba      	adds	r2, r7, r2
 800a1a8:	6013      	str	r3, [r2, #0]
 800a1aa:	e02c      	b.n	800a206 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800a1ac:	2330      	movs	r3, #48	@ 0x30
 800a1ae:	18fa      	adds	r2, r7, r3
 800a1b0:	2394      	movs	r3, #148	@ 0x94
 800a1b2:	18fb      	adds	r3, r7, r3
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	18d3      	adds	r3, r2, r3
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a1c0:	3920      	subs	r1, #32
 800a1c2:	2900      	cmp	r1, #0
 800a1c4:	db03      	blt.n	800a1ce <calculateSPLQ31+0x412>
 800a1c6:	0018      	movs	r0, r3
 800a1c8:	40c8      	lsrs	r0, r1
 800a1ca:	0004      	movs	r4, r0
 800a1cc:	e00a      	b.n	800a1e4 <calculateSPLQ31+0x428>
 800a1ce:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a1d0:	2020      	movs	r0, #32
 800a1d2:	1a41      	subs	r1, r0, r1
 800a1d4:	0018      	movs	r0, r3
 800a1d6:	4088      	lsls	r0, r1
 800a1d8:	0001      	movs	r1, r0
 800a1da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a1dc:	0016      	movs	r6, r2
 800a1de:	40c6      	lsrs	r6, r0
 800a1e0:	0034      	movs	r4, r6
 800a1e2:	430c      	orrs	r4, r1
 800a1e4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a1e6:	40cb      	lsrs	r3, r1
 800a1e8:	001d      	movs	r5, r3
 800a1ea:	2330      	movs	r3, #48	@ 0x30
 800a1ec:	18fa      	adds	r2, r7, r3
 800a1ee:	2194      	movs	r1, #148	@ 0x94
 800a1f0:	187b      	adds	r3, r7, r1
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	18d3      	adds	r3, r2, r3
 800a1f8:	601c      	str	r4, [r3, #0]
 800a1fa:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a1fc:	187b      	adds	r3, r7, r1
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3301      	adds	r3, #1
 800a202:	187a      	adds	r2, r7, r1
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	2394      	movs	r3, #148	@ 0x94
 800a208:	18fb      	adds	r3, r7, r3
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b05      	cmp	r3, #5
 800a20e:	d9cd      	bls.n	800a1ac <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800a210:	230f      	movs	r3, #15
 800a212:	425d      	negs	r5, r3
 800a214:	2305      	movs	r3, #5
 800a216:	425e      	negs	r6, r3
 800a218:	4b4a      	ldr	r3, [pc, #296]	@ (800a344 <calculateSPLQ31+0x588>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	4b4a      	ldr	r3, [pc, #296]	@ (800a348 <calculateSPLQ31+0x58c>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	21a0      	movs	r1, #160	@ 0xa0
 800a226:	1879      	adds	r1, r7, r1
 800a228:	6808      	ldr	r0, [r1, #0]
 800a22a:	6849      	ldr	r1, [r1, #4]
 800a22c:	4c47      	ldr	r4, [pc, #284]	@ (800a34c <calculateSPLQ31+0x590>)
 800a22e:	9403      	str	r4, [sp, #12]
 800a230:	4c47      	ldr	r4, [pc, #284]	@ (800a350 <calculateSPLQ31+0x594>)
 800a232:	9402      	str	r4, [sp, #8]
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	9200      	str	r2, [sp, #0]
 800a238:	0033      	movs	r3, r6
 800a23a:	002a      	movs	r2, r5
 800a23c:	f000 fa86 	bl	800a74c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a240:	2300      	movs	r3, #0
 800a242:	2290      	movs	r2, #144	@ 0x90
 800a244:	18ba      	adds	r2, r7, r2
 800a246:	6013      	str	r3, [r2, #0]
 800a248:	e026      	b.n	800a298 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a24a:	2330      	movs	r3, #48	@ 0x30
 800a24c:	18fa      	adds	r2, r7, r3
 800a24e:	2490      	movs	r4, #144	@ 0x90
 800a250:	193b      	adds	r3, r7, r4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	00db      	lsls	r3, r3, #3
 800a256:	18d3      	adds	r3, r2, r3
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	6859      	ldr	r1, [r3, #4]
 800a25c:	230f      	movs	r3, #15
 800a25e:	425d      	negs	r5, r3
 800a260:	2305      	movs	r3, #5
 800a262:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800a264:	193b      	adds	r3, r7, r4
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	009a      	lsls	r2, r3, #2
 800a26a:	4b3a      	ldr	r3, [pc, #232]	@ (800a354 <calculateSPLQ31+0x598>)
 800a26c:	18d3      	adds	r3, r2, r3
 800a26e:	193a      	adds	r2, r7, r4
 800a270:	6812      	ldr	r2, [r2, #0]
 800a272:	0094      	lsls	r4, r2, #2
 800a274:	4a38      	ldr	r2, [pc, #224]	@ (800a358 <calculateSPLQ31+0x59c>)
 800a276:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a278:	9203      	str	r2, [sp, #12]
 800a27a:	9302      	str	r3, [sp, #8]
 800a27c:	2300      	movs	r3, #0
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	2300      	movs	r3, #0
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	0033      	movs	r3, r6
 800a286:	002a      	movs	r2, r5
 800a288:	f000 fa60 	bl	800a74c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a28c:	2490      	movs	r4, #144	@ 0x90
 800a28e:	193b      	adds	r3, r7, r4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	3301      	adds	r3, #1
 800a294:	193a      	adds	r2, r7, r4
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	2390      	movs	r3, #144	@ 0x90
 800a29a:	18fb      	adds	r3, r7, r3
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	d9d3      	bls.n	800a24a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800a2a2:	4b2b      	ldr	r3, [pc, #172]	@ (800a350 <calculateSPLQ31+0x594>)
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	4b2d      	ldr	r3, [pc, #180]	@ (800a35c <calculateSPLQ31+0x5a0>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	18d2      	adds	r2, r2, r3
 800a2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a35c <calculateSPLQ31+0x5a0>)
 800a2ae:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800a2b0:	4b26      	ldr	r3, [pc, #152]	@ (800a34c <calculateSPLQ31+0x590>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b2a      	ldr	r3, [pc, #168]	@ (800a360 <calculateSPLQ31+0x5a4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	18d2      	adds	r2, r2, r3
 800a2ba:	4b29      	ldr	r3, [pc, #164]	@ (800a360 <calculateSPLQ31+0x5a4>)
 800a2bc:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a2be:	2300      	movs	r3, #0
 800a2c0:	228c      	movs	r2, #140	@ 0x8c
 800a2c2:	18ba      	adds	r2, r7, r2
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	e025      	b.n	800a314 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800a2c8:	4b22      	ldr	r3, [pc, #136]	@ (800a354 <calculateSPLQ31+0x598>)
 800a2ca:	208c      	movs	r0, #140	@ 0x8c
 800a2cc:	183a      	adds	r2, r7, r0
 800a2ce:	6812      	ldr	r2, [r2, #0]
 800a2d0:	0092      	lsls	r2, r2, #2
 800a2d2:	58d2      	ldr	r2, [r2, r3]
 800a2d4:	4b23      	ldr	r3, [pc, #140]	@ (800a364 <calculateSPLQ31+0x5a8>)
 800a2d6:	1839      	adds	r1, r7, r0
 800a2d8:	6809      	ldr	r1, [r1, #0]
 800a2da:	0089      	lsls	r1, r1, #2
 800a2dc:	58cb      	ldr	r3, [r1, r3]
 800a2de:	18d1      	adds	r1, r2, r3
 800a2e0:	4b20      	ldr	r3, [pc, #128]	@ (800a364 <calculateSPLQ31+0x5a8>)
 800a2e2:	183a      	adds	r2, r7, r0
 800a2e4:	6812      	ldr	r2, [r2, #0]
 800a2e6:	0092      	lsls	r2, r2, #2
 800a2e8:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800a2ea:	4b1b      	ldr	r3, [pc, #108]	@ (800a358 <calculateSPLQ31+0x59c>)
 800a2ec:	183a      	adds	r2, r7, r0
 800a2ee:	6812      	ldr	r2, [r2, #0]
 800a2f0:	0092      	lsls	r2, r2, #2
 800a2f2:	58d2      	ldr	r2, [r2, r3]
 800a2f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a368 <calculateSPLQ31+0x5ac>)
 800a2f6:	1839      	adds	r1, r7, r0
 800a2f8:	6809      	ldr	r1, [r1, #0]
 800a2fa:	0089      	lsls	r1, r1, #2
 800a2fc:	58cb      	ldr	r3, [r1, r3]
 800a2fe:	18d1      	adds	r1, r2, r3
 800a300:	4b19      	ldr	r3, [pc, #100]	@ (800a368 <calculateSPLQ31+0x5ac>)
 800a302:	183a      	adds	r2, r7, r0
 800a304:	6812      	ldr	r2, [r2, #0]
 800a306:	0092      	lsls	r2, r2, #2
 800a308:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a30a:	183b      	adds	r3, r7, r0
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3301      	adds	r3, #1
 800a310:	183a      	adds	r2, r7, r0
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	238c      	movs	r3, #140	@ 0x8c
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	d9d4      	bls.n	800a2c8 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800a31e:	4b13      	ldr	r3, [pc, #76]	@ (800a36c <calculateSPLQ31+0x5b0>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	1c5a      	adds	r2, r3, #1
 800a324:	4b11      	ldr	r3, [pc, #68]	@ (800a36c <calculateSPLQ31+0x5b0>)
 800a326:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800a328:	4b10      	ldr	r3, [pc, #64]	@ (800a36c <calculateSPLQ31+0x5b0>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b0f      	cmp	r3, #15
 800a32e:	d905      	bls.n	800a33c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800a330:	4b0f      	ldr	r3, [pc, #60]	@ (800a370 <calculateSPLQ31+0x5b4>)
 800a332:	2201      	movs	r2, #1
 800a334:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800a336:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <calculateSPLQ31+0x5b8>)
 800a338:	2200      	movs	r2, #0
 800a33a:	701a      	strb	r2, [r3, #0]
    }
}
 800a33c:	46c0      	nop			@ (mov r8, r8)
 800a33e:	46bd      	mov	sp, r7
 800a340:	b02f      	add	sp, #188	@ 0xbc
 800a342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a344:	200000b4 	.word	0x200000b4
 800a348:	200000b8 	.word	0x200000b8
 800a34c:	20001298 	.word	0x20001298
 800a350:	20001294 	.word	0x20001294
 800a354:	2000129c 	.word	0x2000129c
 800a358:	200012b4 	.word	0x200012b4
 800a35c:	20001cdc 	.word	0x20001cdc
 800a360:	20001ce0 	.word	0x20001ce0
 800a364:	20001ce4 	.word	0x20001ce4
 800a368:	20001cfc 	.word	0x20001cfc
 800a36c:	20001d14 	.word	0x20001d14
 800a370:	20001288 	.word	0x20001288
 800a374:	20001286 	.word	0x20001286

0800a378 <resetSPLstate>:

static void resetSPLstate(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800a37e:	4b11      	ldr	r3, [pc, #68]	@ (800a3c4 <resetSPLstate+0x4c>)
 800a380:	2200      	movs	r2, #0
 800a382:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800a384:	4b10      	ldr	r3, [pc, #64]	@ (800a3c8 <resetSPLstate+0x50>)
 800a386:	2200      	movs	r2, #0
 800a388:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800a38a:	4b10      	ldr	r3, [pc, #64]	@ (800a3cc <resetSPLstate+0x54>)
 800a38c:	2200      	movs	r2, #0
 800a38e:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a390:	2300      	movs	r3, #0
 800a392:	607b      	str	r3, [r7, #4]
 800a394:	e00c      	b.n	800a3b0 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800a396:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d0 <resetSPLstate+0x58>)
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	0092      	lsls	r2, r2, #2
 800a39c:	2100      	movs	r1, #0
 800a39e:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d4 <resetSPLstate+0x5c>)
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	0092      	lsls	r2, r2, #2
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	607b      	str	r3, [r7, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b05      	cmp	r3, #5
 800a3b4:	d9ef      	bls.n	800a396 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800a3b6:	4b08      	ldr	r3, [pc, #32]	@ (800a3d8 <resetSPLstate+0x60>)
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	701a      	strb	r2, [r3, #0]
}
 800a3bc:	46c0      	nop			@ (mov r8, r8)
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	b002      	add	sp, #8
 800a3c2:	bd80      	pop	{r7, pc}
 800a3c4:	20001cdc 	.word	0x20001cdc
 800a3c8:	20001ce0 	.word	0x20001ce0
 800a3cc:	20001d14 	.word	0x20001d14
 800a3d0:	20001ce4 	.word	0x20001ce4
 800a3d4:	20001cfc 	.word	0x20001cfc
 800a3d8:	20001288 	.word	0x20001288

0800a3dc <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800a3dc:	b5b0      	push	{r4, r5, r7, lr}
 800a3de:	b090      	sub	sp, #64	@ 0x40
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	0019      	movs	r1, r3
 800a3e8:	1dfb      	adds	r3, r7, #7
 800a3ea:	701a      	strb	r2, [r3, #0]
 800a3ec:	1dbb      	adds	r3, r7, #6
 800a3ee:	1c0a      	adds	r2, r1, #0
 800a3f0:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800a3f2:	1dfb      	adds	r3, r7, #7
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d005      	beq.n	800a406 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800a3fa:	4b3b      	ldr	r3, [pc, #236]	@ (800a4e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800a400:	4b3a      	ldr	r3, [pc, #232]	@ (800a4ec <getFilteredMaxAmplitudeQ31+0x110>)
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800a406:	2300      	movs	r3, #0
 800a408:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800a40e:	2305      	movs	r3, #5
 800a410:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800a412:	2300      	movs	r3, #0
 800a414:	637b      	str	r3, [r7, #52]	@ 0x34
 800a416:	e040      	b.n	800a49a <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800a418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	18d3      	adds	r3, r2, r3
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	409a      	lsls	r2, r3
 800a426:	0013      	movs	r3, r2
 800a428:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800a42a:	4b30      	ldr	r3, [pc, #192]	@ (800a4ec <getFilteredMaxAmplitudeQ31+0x110>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	425a      	negs	r2, r3
 800a430:	4b2e      	ldr	r3, [pc, #184]	@ (800a4ec <getFilteredMaxAmplitudeQ31+0x110>)
 800a432:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800a434:	2418      	movs	r4, #24
 800a436:	193a      	adds	r2, r7, r4
 800a438:	492c      	ldr	r1, [pc, #176]	@ (800a4ec <getFilteredMaxAmplitudeQ31+0x110>)
 800a43a:	231c      	movs	r3, #28
 800a43c:	18f8      	adds	r0, r7, r3
 800a43e:	2301      	movs	r3, #1
 800a440:	f010 fbc8 	bl	801abd4 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800a444:	2514      	movs	r5, #20
 800a446:	197a      	adds	r2, r7, r5
 800a448:	1939      	adds	r1, r7, r4
 800a44a:	4829      	ldr	r0, [pc, #164]	@ (800a4f0 <getFilteredMaxAmplitudeQ31+0x114>)
 800a44c:	2301      	movs	r3, #1
 800a44e:	f010 fb8f 	bl	801ab70 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800a452:	2410      	movs	r4, #16
 800a454:	193a      	adds	r2, r7, r4
 800a456:	4924      	ldr	r1, [pc, #144]	@ (800a4e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a458:	4826      	ldr	r0, [pc, #152]	@ (800a4f4 <getFilteredMaxAmplitudeQ31+0x118>)
 800a45a:	2301      	movs	r3, #1
 800a45c:	f010 fb88 	bl	801ab70 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800a460:	4a21      	ldr	r2, [pc, #132]	@ (800a4e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a462:	1939      	adds	r1, r7, r4
 800a464:	1978      	adds	r0, r7, r5
 800a466:	2301      	movs	r3, #1
 800a468:	f010 fbb4 	bl	801abd4 <arm_add_q31>

        lastData = fx;
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	4b1f      	ldr	r3, [pc, #124]	@ (800a4ec <getFilteredMaxAmplitudeQ31+0x110>)
 800a470:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800a472:	4b1d      	ldr	r3, [pc, #116]	@ (800a4e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a478:	429a      	cmp	r2, r3
 800a47a:	da03      	bge.n	800a484 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800a47c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a482:	e007      	b.n	800a494 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800a484:	4b18      	ldr	r3, [pc, #96]	@ (800a4e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a48a:	429a      	cmp	r2, r3
 800a48c:	dd02      	ble.n	800a494 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800a48e:	4b16      	ldr	r3, [pc, #88]	@ (800a4e8 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800a494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a496:	3301      	adds	r3, #1
 800a498:	637b      	str	r3, [r7, #52]	@ 0x34
 800a49a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d3ba      	bcc.n	800a418 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a4:	17da      	asrs	r2, r3, #31
 800a4a6:	189b      	adds	r3, r3, r2
 800a4a8:	4053      	eors	r3, r2
 800a4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800a4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800a4b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d200      	bcs.n	800a4ba <getFilteredMaxAmplitudeQ31+0xde>
 800a4b8:	0013      	movs	r3, r2
 800a4ba:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800a4bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	40da      	lsrs	r2, r3
 800a4c2:	0013      	movs	r3, r2
 800a4c4:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800a4c6:	1dbb      	adds	r3, r7, #6
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d007      	beq.n	800a4de <getFilteredMaxAmplitudeQ31+0x102>
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800a4f8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6a3a      	ldr	r2, [r7, #32]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d902      	bls.n	800a4de <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800a4d8:	4b07      	ldr	r3, [pc, #28]	@ (800a4f8 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a4da:	6a3a      	ldr	r2, [r7, #32]
 800a4dc:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800a4de:	6a3b      	ldr	r3, [r7, #32]
}
 800a4e0:	0018      	movs	r0, r3
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	b010      	add	sp, #64	@ 0x40
 800a4e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e8:	20002118 	.word	0x20002118
 800a4ec:	2000211c 	.word	0x2000211c
 800a4f0:	08020b28 	.word	0x08020b28
 800a4f4:	08020b2c 	.word	0x08020b2c
 800a4f8:	20001290 	.word	0x20001290

0800a4fc <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800a508:	4913      	ldr	r1, [pc, #76]	@ (800a558 <floatToIntAndFrac2dp+0x5c>)
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f7f6 fd48 	bl	8000fa0 <__aeabi_fmul>
 800a510:	1c03      	adds	r3, r0, #0
 800a512:	1c18      	adds	r0, r3, #0
 800a514:	f014 ff92 	bl	801f43c <roundf>
 800a518:	1c03      	adds	r3, r0, #0
 800a51a:	1c18      	adds	r0, r3, #0
 800a51c:	f7f6 f87e 	bl	800061c <__aeabi_f2uiz>
 800a520:	0003      	movs	r3, r0
 800a522:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	2164      	movs	r1, #100	@ 0x64
 800a528:	0018      	movs	r0, r3
 800a52a:	f7f5 fe3b 	bl	80001a4 <__udivsi3>
 800a52e:	0003      	movs	r3, r0
 800a530:	001a      	movs	r2, r3
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2164      	movs	r1, #100	@ 0x64
 800a542:	434b      	muls	r3, r1
 800a544:	b2db      	uxtb	r3, r3
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	701a      	strb	r2, [r3, #0]
}
 800a54e:	46c0      	nop			@ (mov r8, r8)
 800a550:	46bd      	mov	sp, r7
 800a552:	b006      	add	sp, #24
 800a554:	bd80      	pop	{r7, pc}
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	42c80000 	.word	0x42c80000

0800a55c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800a568:	4914      	ldr	r1, [pc, #80]	@ (800a5bc <floatToIntAndFrac1dp+0x60>)
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7f6 fd18 	bl	8000fa0 <__aeabi_fmul>
 800a570:	1c03      	adds	r3, r0, #0
 800a572:	1c18      	adds	r0, r3, #0
 800a574:	f014 ff62 	bl	801f43c <roundf>
 800a578:	1c03      	adds	r3, r0, #0
 800a57a:	1c18      	adds	r0, r3, #0
 800a57c:	f7f6 f84e 	bl	800061c <__aeabi_f2uiz>
 800a580:	0003      	movs	r3, r0
 800a582:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	210a      	movs	r1, #10
 800a588:	0018      	movs	r0, r3
 800a58a:	f7f5 fe0b 	bl	80001a4 <__udivsi3>
 800a58e:	0003      	movs	r3, r0
 800a590:	001a      	movs	r2, r3
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	1c19      	adds	r1, r3, #0
 800a5a2:	0089      	lsls	r1, r1, #2
 800a5a4:	18cb      	adds	r3, r1, r3
 800a5a6:	18db      	adds	r3, r3, r3
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	701a      	strb	r2, [r3, #0]
}
 800a5b2:	46c0      	nop			@ (mov r8, r8)
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	b006      	add	sp, #24
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	46c0      	nop			@ (mov r8, r8)
 800a5bc:	41200000 	.word	0x41200000

0800a5c0 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800a5c0:	b590      	push	{r4, r7, lr}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	607a      	str	r2, [r7, #4]
 800a5cc:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7f6 fffe 	bl	80015d0 <__aeabi_i2f>
 800a5d4:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a5d6:	6838      	ldr	r0, [r7, #0]
 800a5d8:	f7f6 fffa 	bl	80015d0 <__aeabi_i2f>
 800a5dc:	1c03      	adds	r3, r0, #0
 800a5de:	4918      	ldr	r1, [pc, #96]	@ (800a640 <sumToIntAverage+0x80>)
 800a5e0:	1c18      	adds	r0, r3, #0
 800a5e2:	f7f6 faf7 	bl	8000bd4 <__aeabi_fdiv>
 800a5e6:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a5e8:	1c19      	adds	r1, r3, #0
 800a5ea:	1c20      	adds	r0, r4, #0
 800a5ec:	f7f6 f968 	bl	80008c0 <__aeabi_fadd>
 800a5f0:	1c03      	adds	r3, r0, #0
 800a5f2:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a5f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5f6:	f7f7 f837 	bl	8001668 <__aeabi_ui2f>
 800a5fa:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a5fc:	1c19      	adds	r1, r3, #0
 800a5fe:	1c20      	adds	r0, r4, #0
 800a600:	f7f6 fae8 	bl	8000bd4 <__aeabi_fdiv>
 800a604:	1c03      	adds	r3, r0, #0
 800a606:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	2310      	movs	r3, #16
 800a610:	18f9      	adds	r1, r7, r3
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	1c18      	adds	r0, r3, #0
 800a616:	f7ff ffa1 	bl	800a55c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2bff      	cmp	r3, #255	@ 0xff
 800a61e:	d906      	bls.n	800a62e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	22ff      	movs	r2, #255	@ 0xff
 800a624:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2209      	movs	r2, #9
 800a62a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800a62c:	e003      	b.n	800a636 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	b2da      	uxtb	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	701a      	strb	r2, [r3, #0]
}
 800a636:	46c0      	nop			@ (mov r8, r8)
 800a638:	46bd      	mov	sp, r7
 800a63a:	b007      	add	sp, #28
 800a63c:	bd90      	pop	{r4, r7, pc}
 800a63e:	46c0      	nop			@ (mov r8, r8)
 800a640:	41200000 	.word	0x41200000

0800a644 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	2280      	movs	r2, #128	@ 0x80
 800a656:	0612      	lsls	r2, r2, #24
 800a658:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	4a18      	ldr	r2, [pc, #96]	@ (800a6c0 <findMinMax+0x7c>)
 800a65e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a660:	2300      	movs	r3, #0
 800a662:	617b      	str	r3, [r7, #20]
 800a664:	e022      	b.n	800a6ac <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	18d3      	adds	r3, r2, r3
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	429a      	cmp	r2, r3
 800a676:	da06      	bge.n	800a686 <findMinMax+0x42>
        {
            min[0] = array[i];
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	18d3      	adds	r3, r2, r3
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	18d3      	adds	r3, r2, r3
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	dd06      	ble.n	800a6a6 <findMinMax+0x62>
        {
            max[0] = array[i];
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	18d3      	adds	r3, r2, r3
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d3d8      	bcc.n	800a666 <findMinMax+0x22>
        }
    }
}
 800a6b4:	46c0      	nop			@ (mov r8, r8)
 800a6b6:	46c0      	nop			@ (mov r8, r8)
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	b006      	add	sp, #24
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	46c0      	nop			@ (mov r8, r8)
 800a6c0:	7fffffff 	.word	0x7fffffff

0800a6c4 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d302      	bcc.n	800a6e0 <getPo2factor+0x1c>
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d107      	bne.n	800a6f0 <getPo2factor+0x2c>
    {
        return 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e00d      	b.n	800a700 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	085b      	lsrs	r3, r3, #1
 800a6e8:	607b      	str	r3, [r7, #4]
        bitShift++;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d2f5      	bcs.n	800a6e4 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
}
 800a700:	0018      	movs	r0, r3
 800a702:	46bd      	mov	sp, r7
 800a704:	b004      	add	sp, #16
 800a706:	bd80      	pop	{r7, pc}

0800a708 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7f6 ffa6 	bl	8001668 <__aeabi_ui2f>
 800a71c:	1c03      	adds	r3, r0, #0
 800a71e:	1c19      	adds	r1, r3, #0
 800a720:	68b8      	ldr	r0, [r7, #8]
 800a722:	f7f6 fc3d 	bl	8000fa0 <__aeabi_fmul>
 800a726:	1c03      	adds	r3, r0, #0
 800a728:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800a72e:	683a      	ldr	r2, [r7, #0]
 800a730:	2310      	movs	r3, #16
 800a732:	18f9      	adds	r1, r7, r3
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	1c18      	adds	r0, r3, #0
 800a738:	f7ff fee0 	bl	800a4fc <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800a73c:	693b      	ldr	r3, [r7, #16]
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	801a      	strh	r2, [r3, #0]
}
 800a744:	46c0      	nop			@ (mov r8, r8)
 800a746:	46bd      	mov	sp, r7
 800a748:	b006      	add	sp, #24
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	60b8      	str	r0, [r7, #8]
 800a754:	60f9      	str	r1, [r7, #12]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800a75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75c:	6a3a      	ldr	r2, [r7, #32]
 800a75e:	68b8      	ldr	r0, [r7, #8]
 800a760:	68f9      	ldr	r1, [r7, #12]
 800a762:	f7fb ff1f 	bl	80065a4 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	18d2      	adds	r2, r2, r3
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	18d2      	adds	r2, r2, r3
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	18d2      	adds	r2, r2, r3
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	18d2      	adds	r2, r2, r3
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a784:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800a786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	0011      	movs	r1, r2
 800a78c:	0018      	movs	r0, r3
 800a78e:	f7fb ff99 	bl	80066c4 <correctIntFracNumber>
}
 800a792:	46c0      	nop			@ (mov r8, r8)
 800a794:	46bd      	mov	sp, r7
 800a796:	b004      	add	sp, #16
 800a798:	bd80      	pop	{r7, pc}

0800a79a <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800a79a:	b580      	push	{r7, lr}
 800a79c:	b086      	sub	sp, #24
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	60f8      	str	r0, [r7, #12]
 800a7a2:	60b9      	str	r1, [r7, #8]
 800a7a4:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	e019      	b.n	800a7e4 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	005b      	lsls	r3, r3, #1
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	18d3      	adds	r3, r2, r3
 800a7b8:	881b      	ldrh	r3, [r3, #0]
 800a7ba:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	3201      	adds	r2, #1
 800a7c0:	0052      	lsls	r2, r2, #1
 800a7c2:	68f9      	ldr	r1, [r7, #12]
 800a7c4:	188a      	adds	r2, r1, r2
 800a7c6:	8812      	ldrh	r2, [r2, #0]
 800a7c8:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a7ca:	0019      	movs	r1, r3
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a7d4:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a7d6:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	3301      	adds	r3, #1
 800a7dc:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	613b      	str	r3, [r7, #16]
 800a7e4:	693a      	ldr	r2, [r7, #16]
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d3e1      	bcc.n	800a7b0 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800a7ec:	46c0      	nop			@ (mov r8, r8)
 800a7ee:	46c0      	nop			@ (mov r8, r8)
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b006      	add	sp, #24
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	af00      	add	r7, sp, #0
  init = false;
 800a7fc:	4b02      	ldr	r3, [pc, #8]	@ (800a808 <InitDone+0x10>)
 800a7fe:	2200      	movs	r2, #0
 800a800:	701a      	strb	r2, [r3, #0]
}
 800a802:	46c0      	nop			@ (mov r8, r8)
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	200000c0 	.word	0x200000c0

0800a80c <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800a812:	f7fb fab1 	bl	8005d78 <ReadBatteryVoltage>
 800a816:	1c03      	adds	r3, r0, #0
 800a818:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800a81a:	491f      	ldr	r1, [pc, #124]	@ (800a898 <batteryChargeCheck+0x8c>)
 800a81c:	6838      	ldr	r0, [r7, #0]
 800a81e:	f7f5 fe87 	bl	8000530 <__aeabi_fcmplt>
 800a822:	1e03      	subs	r3, r0, #0
 800a824:	d002      	beq.n	800a82c <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800a826:	1dfb      	adds	r3, r7, #7
 800a828:	2200      	movs	r2, #0
 800a82a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800a82c:	6838      	ldr	r0, [r7, #0]
 800a82e:	f7f8 fe19 	bl	8003464 <__aeabi_f2d>
 800a832:	4a1a      	ldr	r2, [pc, #104]	@ (800a89c <batteryChargeCheck+0x90>)
 800a834:	4b1a      	ldr	r3, [pc, #104]	@ (800a8a0 <batteryChargeCheck+0x94>)
 800a836:	f7f5 fe41 	bl	80004bc <__aeabi_dcmplt>
 800a83a:	1e03      	subs	r3, r0, #0
 800a83c:	d008      	beq.n	800a850 <batteryChargeCheck+0x44>
 800a83e:	4916      	ldr	r1, [pc, #88]	@ (800a898 <batteryChargeCheck+0x8c>)
 800a840:	6838      	ldr	r0, [r7, #0]
 800a842:	f7f5 fe93 	bl	800056c <__aeabi_fcmpge>
 800a846:	1e03      	subs	r3, r0, #0
 800a848:	d002      	beq.n	800a850 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800a84a:	1dfb      	adds	r3, r7, #7
 800a84c:	2202      	movs	r2, #2
 800a84e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800a850:	2181      	movs	r1, #129	@ 0x81
 800a852:	05c9      	lsls	r1, r1, #23
 800a854:	6838      	ldr	r0, [r7, #0]
 800a856:	f7f5 fe6b 	bl	8000530 <__aeabi_fcmplt>
 800a85a:	1e03      	subs	r3, r0, #0
 800a85c:	d00b      	beq.n	800a876 <batteryChargeCheck+0x6a>
 800a85e:	6838      	ldr	r0, [r7, #0]
 800a860:	f7f8 fe00 	bl	8003464 <__aeabi_f2d>
 800a864:	4a0d      	ldr	r2, [pc, #52]	@ (800a89c <batteryChargeCheck+0x90>)
 800a866:	4b0e      	ldr	r3, [pc, #56]	@ (800a8a0 <batteryChargeCheck+0x94>)
 800a868:	f7f5 fe46 	bl	80004f8 <__aeabi_dcmpge>
 800a86c:	1e03      	subs	r3, r0, #0
 800a86e:	d002      	beq.n	800a876 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800a870:	1dfb      	adds	r3, r7, #7
 800a872:	2203      	movs	r2, #3
 800a874:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800a876:	2181      	movs	r1, #129	@ 0x81
 800a878:	05c9      	lsls	r1, r1, #23
 800a87a:	6838      	ldr	r0, [r7, #0]
 800a87c:	f7f5 fe76 	bl	800056c <__aeabi_fcmpge>
 800a880:	1e03      	subs	r3, r0, #0
 800a882:	d002      	beq.n	800a88a <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800a884:	1dfb      	adds	r3, r7, #7
 800a886:	2204      	movs	r2, #4
 800a888:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800a88a:	1dfb      	adds	r3, r7, #7
 800a88c:	781b      	ldrb	r3, [r3, #0]
}
 800a88e:	0018      	movs	r0, r3
 800a890:	46bd      	mov	sp, r7
 800a892:	b002      	add	sp, #8
 800a894:	bd80      	pop	{r7, pc}
 800a896:	46c0      	nop			@ (mov r8, r8)
 800a898:	40600000 	.word	0x40600000
 800a89c:	9999999a 	.word	0x9999999a
 800a8a0:	400d9999 	.word	0x400d9999

0800a8a4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	0004      	movs	r4, r0
 800a8ac:	0008      	movs	r0, r1
 800a8ae:	0011      	movs	r1, r2
 800a8b0:	1dbb      	adds	r3, r7, #6
 800a8b2:	1c22      	adds	r2, r4, #0
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	1d3b      	adds	r3, r7, #4
 800a8b8:	1c02      	adds	r2, r0, #0
 800a8ba:	801a      	strh	r2, [r3, #0]
 800a8bc:	1cbb      	adds	r3, r7, #2
 800a8be:	1c0a      	adds	r2, r1, #0
 800a8c0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a8c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a900 <SetStatusLED+0x5c>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d107      	bne.n	800a8da <SetStatusLED+0x36>
 800a8ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a904 <SetStatusLED+0x60>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d103      	bne.n	800a8da <SetStatusLED+0x36>
 800a8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a908 <SetStatusLED+0x64>)
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00e      	beq.n	800a8f8 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800a8da:	2380      	movs	r3, #128	@ 0x80
 800a8dc:	05db      	lsls	r3, r3, #23
 800a8de:	1dba      	adds	r2, r7, #6
 800a8e0:	8812      	ldrh	r2, [r2, #0]
 800a8e2:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800a8e4:	2380      	movs	r3, #128	@ 0x80
 800a8e6:	05db      	lsls	r3, r3, #23
 800a8e8:	1d3a      	adds	r2, r7, #4
 800a8ea:	8812      	ldrh	r2, [r2, #0]
 800a8ec:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800a8ee:	2380      	movs	r3, #128	@ 0x80
 800a8f0:	05db      	lsls	r3, r3, #23
 800a8f2:	1cba      	adds	r2, r7, #2
 800a8f4:	8812      	ldrh	r2, [r2, #0]
 800a8f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a8f8:	46c0      	nop			@ (mov r8, r8)
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	b003      	add	sp, #12
 800a8fe:	bd90      	pop	{r4, r7, pc}
 800a900:	20002121 	.word	0x20002121
 800a904:	200000c0 	.word	0x200000c0
 800a908:	20002122 	.word	0x20002122

0800a90c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800a90c:	b590      	push	{r4, r7, lr}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	0004      	movs	r4, r0
 800a914:	0008      	movs	r0, r1
 800a916:	0011      	movs	r1, r2
 800a918:	1dfb      	adds	r3, r7, #7
 800a91a:	1c22      	adds	r2, r4, #0
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	1dbb      	adds	r3, r7, #6
 800a920:	1c02      	adds	r2, r0, #0
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	1d7b      	adds	r3, r7, #5
 800a926:	1c0a      	adds	r2, r1, #0
 800a928:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800a92a:	4b19      	ldr	r3, [pc, #100]	@ (800a990 <SetDBLED+0x84>)
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d107      	bne.n	800a942 <SetDBLED+0x36>
 800a932:	4b18      	ldr	r3, [pc, #96]	@ (800a994 <SetDBLED+0x88>)
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d103      	bne.n	800a942 <SetDBLED+0x36>
 800a93a:	4b17      	ldr	r3, [pc, #92]	@ (800a998 <SetDBLED+0x8c>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d022      	beq.n	800a988 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800a942:	1dfb      	adds	r3, r7, #7
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	2201      	movs	r2, #1
 800a948:	4053      	eors	r3, r2
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	001a      	movs	r2, r3
 800a94e:	4b13      	ldr	r3, [pc, #76]	@ (800a99c <SetDBLED+0x90>)
 800a950:	2101      	movs	r1, #1
 800a952:	0018      	movs	r0, r3
 800a954:	f002 fd37 	bl	800d3c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800a958:	1dbb      	adds	r3, r7, #6
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	2201      	movs	r2, #1
 800a95e:	4053      	eors	r3, r2
 800a960:	b2db      	uxtb	r3, r3
 800a962:	001a      	movs	r2, r3
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	480c      	ldr	r0, [pc, #48]	@ (800a99c <SetDBLED+0x90>)
 800a96a:	0019      	movs	r1, r3
 800a96c:	f002 fd2b 	bl	800d3c6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800a970:	1d7b      	adds	r3, r7, #5
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	2201      	movs	r2, #1
 800a976:	4053      	eors	r3, r2
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	001a      	movs	r2, r3
 800a97c:	2380      	movs	r3, #128	@ 0x80
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4806      	ldr	r0, [pc, #24]	@ (800a99c <SetDBLED+0x90>)
 800a982:	0019      	movs	r1, r3
 800a984:	f002 fd1f 	bl	800d3c6 <HAL_GPIO_WritePin>
  }
}
 800a988:	46c0      	nop			@ (mov r8, r8)
 800a98a:	46bd      	mov	sp, r7
 800a98c:	b003      	add	sp, #12
 800a98e:	bd90      	pop	{r4, r7, pc}
 800a990:	20002121 	.word	0x20002121
 800a994:	200000c0 	.word	0x200000c0
 800a998:	20002122 	.word	0x20002122
 800a99c:	50000400 	.word	0x50000400

0800a9a0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	0004      	movs	r4, r0
 800a9a8:	0008      	movs	r0, r1
 800a9aa:	0011      	movs	r1, r2
 800a9ac:	1dbb      	adds	r3, r7, #6
 800a9ae:	1c22      	adds	r2, r4, #0
 800a9b0:	801a      	strh	r2, [r3, #0]
 800a9b2:	1d3b      	adds	r3, r7, #4
 800a9b4:	1c02      	adds	r2, r0, #0
 800a9b6:	801a      	strh	r2, [r3, #0]
 800a9b8:	1cbb      	adds	r3, r7, #2
 800a9ba:	1c0a      	adds	r2, r1, #0
 800a9bc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a9be:	4b0e      	ldr	r3, [pc, #56]	@ (800a9f8 <SetVocLED+0x58>)
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d107      	bne.n	800a9d6 <SetVocLED+0x36>
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a9fc <SetVocLED+0x5c>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d103      	bne.n	800a9d6 <SetVocLED+0x36>
 800a9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800aa00 <SetVocLED+0x60>)
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00b      	beq.n	800a9ee <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800a9d6:	4b0b      	ldr	r3, [pc, #44]	@ (800aa04 <SetVocLED+0x64>)
 800a9d8:	1dba      	adds	r2, r7, #6
 800a9da:	8812      	ldrh	r2, [r2, #0]
 800a9dc:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800a9de:	4b09      	ldr	r3, [pc, #36]	@ (800aa04 <SetVocLED+0x64>)
 800a9e0:	1d3a      	adds	r2, r7, #4
 800a9e2:	8812      	ldrh	r2, [r2, #0]
 800a9e4:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800a9e6:	4b07      	ldr	r3, [pc, #28]	@ (800aa04 <SetVocLED+0x64>)
 800a9e8:	1cba      	adds	r2, r7, #2
 800a9ea:	8812      	ldrh	r2, [r2, #0]
 800a9ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	b003      	add	sp, #12
 800a9f4:	bd90      	pop	{r4, r7, pc}
 800a9f6:	46c0      	nop			@ (mov r8, r8)
 800a9f8:	20002121 	.word	0x20002121
 800a9fc:	200000c0 	.word	0x200000c0
 800aa00:	20002122 	.word	0x20002122
 800aa04:	40000400 	.word	0x40000400

0800aa08 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aa0c:	4b07      	ldr	r3, [pc, #28]	@ (800aa2c <SetMeasurementIndicator+0x24>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d103      	bne.n	800aa1c <SetMeasurementIndicator+0x14>
 800aa14:	4b06      	ldr	r3, [pc, #24]	@ (800aa30 <SetMeasurementIndicator+0x28>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800aa1c:	2380      	movs	r3, #128	@ 0x80
 800aa1e:	05db      	lsls	r3, r3, #23
 800aa20:	4a04      	ldr	r2, [pc, #16]	@ (800aa34 <SetMeasurementIndicator+0x2c>)
 800aa22:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800aa24:	46c0      	nop			@ (mov r8, r8)
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	46c0      	nop			@ (mov r8, r8)
 800aa2c:	20002121 	.word	0x20002121
 800aa30:	20002122 	.word	0x20002122
 800aa34:	00000bb8 	.word	0x00000bb8

0800aa38 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aa3c:	4b07      	ldr	r3, [pc, #28]	@ (800aa5c <ResetMeasurementIndicator+0x24>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d103      	bne.n	800aa4c <ResetMeasurementIndicator+0x14>
 800aa44:	4b06      	ldr	r3, [pc, #24]	@ (800aa60 <ResetMeasurementIndicator+0x28>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800aa4c:	2380      	movs	r3, #128	@ 0x80
 800aa4e:	05db      	lsls	r3, r3, #23
 800aa50:	22fa      	movs	r2, #250	@ 0xfa
 800aa52:	0112      	lsls	r2, r2, #4
 800aa54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800aa56:	46c0      	nop			@ (mov r8, r8)
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	20002121 	.word	0x20002121
 800aa60:	20002122 	.word	0x20002122

0800aa64 <SetMICIndicator>:
void SetMICIndicator(){
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aa68:	4b07      	ldr	r3, [pc, #28]	@ (800aa88 <SetMICIndicator+0x24>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d103      	bne.n	800aa78 <SetMICIndicator+0x14>
 800aa70:	4b06      	ldr	r3, [pc, #24]	@ (800aa8c <SetMICIndicator+0x28>)
 800aa72:	781b      	ldrb	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d003      	beq.n	800aa80 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800aa78:	2380      	movs	r3, #128	@ 0x80
 800aa7a:	05db      	lsls	r3, r3, #23
 800aa7c:	4a04      	ldr	r2, [pc, #16]	@ (800aa90 <SetMICIndicator+0x2c>)
 800aa7e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800aa80:	46c0      	nop			@ (mov r8, r8)
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	46c0      	nop			@ (mov r8, r8)
 800aa88:	20002121 	.word	0x20002121
 800aa8c:	20002122 	.word	0x20002122
 800aa90:	00000bb8 	.word	0x00000bb8

0800aa94 <ResetMICIndicator>:
void ResetMICIndicator(){
 800aa94:	b580      	push	{r7, lr}
 800aa96:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aa98:	4b07      	ldr	r3, [pc, #28]	@ (800aab8 <ResetMICIndicator+0x24>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d103      	bne.n	800aaa8 <ResetMICIndicator+0x14>
 800aaa0:	4b06      	ldr	r3, [pc, #24]	@ (800aabc <ResetMICIndicator+0x28>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800aaa8:	2380      	movs	r3, #128	@ 0x80
 800aaaa:	05db      	lsls	r3, r3, #23
 800aaac:	22fa      	movs	r2, #250	@ 0xfa
 800aaae:	0112      	lsls	r2, r2, #4
 800aab0:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800aab2:	46c0      	nop			@ (mov r8, r8)
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}
 800aab8:	20002121 	.word	0x20002121
 800aabc:	20002122 	.word	0x20002122

0800aac0 <SetESPIndicator>:
void SetESPIndicator(){
 800aac0:	b580      	push	{r7, lr}
 800aac2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aac4:	4b07      	ldr	r3, [pc, #28]	@ (800aae4 <SetESPIndicator+0x24>)
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <SetESPIndicator+0x14>
 800aacc:	4b06      	ldr	r3, [pc, #24]	@ (800aae8 <SetESPIndicator+0x28>)
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800aad4:	2380      	movs	r3, #128	@ 0x80
 800aad6:	05db      	lsls	r3, r3, #23
 800aad8:	4a04      	ldr	r2, [pc, #16]	@ (800aaec <SetESPIndicator+0x2c>)
 800aada:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800aadc:	46c0      	nop			@ (mov r8, r8)
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	46c0      	nop			@ (mov r8, r8)
 800aae4:	20002121 	.word	0x20002121
 800aae8:	20002122 	.word	0x20002122
 800aaec:	00000bb8 	.word	0x00000bb8

0800aaf0 <ResetESPIndicator>:
void ResetESPIndicator(){
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aaf4:	4b07      	ldr	r3, [pc, #28]	@ (800ab14 <ResetESPIndicator+0x24>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d103      	bne.n	800ab04 <ResetESPIndicator+0x14>
 800aafc:	4b06      	ldr	r3, [pc, #24]	@ (800ab18 <ResetESPIndicator+0x28>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d004      	beq.n	800ab0e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800ab04:	2380      	movs	r3, #128	@ 0x80
 800ab06:	05db      	lsls	r3, r3, #23
 800ab08:	22fa      	movs	r2, #250	@ 0xfa
 800ab0a:	0112      	lsls	r2, r2, #4
 800ab0c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800ab0e:	46c0      	nop			@ (mov r8, r8)
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	20002121 	.word	0x20002121
 800ab18:	20002122 	.word	0x20002122

0800ab1c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800ab20:	23fa      	movs	r3, #250	@ 0xfa
 800ab22:	011a      	lsls	r2, r3, #4
 800ab24:	23fa      	movs	r3, #250	@ 0xfa
 800ab26:	0119      	lsls	r1, r3, #4
 800ab28:	23fa      	movs	r3, #250	@ 0xfa
 800ab2a:	011b      	lsls	r3, r3, #4
 800ab2c:	0018      	movs	r0, r3
 800ab2e:	f7ff feb9 	bl	800a8a4 <SetStatusLED>
  SetDBLED(false,false,false);
 800ab32:	2200      	movs	r2, #0
 800ab34:	2100      	movs	r1, #0
 800ab36:	2000      	movs	r0, #0
 800ab38:	f7ff fee8 	bl	800a90c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800ab3c:	23fa      	movs	r3, #250	@ 0xfa
 800ab3e:	011a      	lsls	r2, r3, #4
 800ab40:	23fa      	movs	r3, #250	@ 0xfa
 800ab42:	0119      	lsls	r1, r3, #4
 800ab44:	23fa      	movs	r3, #250	@ 0xfa
 800ab46:	011b      	lsls	r3, r3, #4
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f7ff ff29 	bl	800a9a0 <SetVocLED>
return;
 800ab4e:	46c0      	nop			@ (mov r8, r8)
}
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <powerCheck>:

Battery_Status powerCheck(){
 800ab54:	b590      	push	{r4, r7, lr}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800ab5a:	f7fb f9d3 	bl	8005f04 <Check_USB_PowerOn>
 800ab5e:	0003      	movs	r3, r0
 800ab60:	001a      	movs	r2, r3
 800ab62:	2301      	movs	r3, #1
 800ab64:	4053      	eors	r3, r2
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d005      	beq.n	800ab78 <powerCheck+0x24>
    status = batteryChargeCheck();
 800ab6c:	1dfc      	adds	r4, r7, #7
 800ab6e:	f7ff fe4d 	bl	800a80c <batteryChargeCheck>
 800ab72:	0003      	movs	r3, r0
 800ab74:	7023      	strb	r3, [r4, #0]
 800ab76:	e002      	b.n	800ab7e <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800ab78:	1dfb      	adds	r3, r7, #7
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ab7e:	1dfb      	adds	r3, r7, #7
 800ab80:	781b      	ldrb	r3, [r3, #0]
}
 800ab82:	0018      	movs	r0, r3
 800ab84:	46bd      	mov	sp, r7
 800ab86:	b003      	add	sp, #12
 800ab88:	bd90      	pop	{r4, r7, pc}
	...

0800ab8c <powerDisplay>:

void powerDisplay(Battery_Status status){
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	0002      	movs	r2, r0
 800ab94:	1dfb      	adds	r3, r7, #7
 800ab96:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800ab98:	1dfb      	adds	r3, r7, #7
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d105      	bne.n	800abac <powerDisplay+0x20>
    Debug("LEDS are okay");
 800aba0:	4a18      	ldr	r2, [pc, #96]	@ (800ac04 <powerDisplay+0x78>)
 800aba2:	4b19      	ldr	r3, [pc, #100]	@ (800ac08 <powerDisplay+0x7c>)
 800aba4:	0019      	movs	r1, r3
 800aba6:	2003      	movs	r0, #3
 800aba8:	f000 fe1a 	bl	800b7e0 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800abac:	1dfb      	adds	r3, r7, #7
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d105      	bne.n	800abc0 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800abb4:	4a15      	ldr	r2, [pc, #84]	@ (800ac0c <powerDisplay+0x80>)
 800abb6:	4b14      	ldr	r3, [pc, #80]	@ (800ac08 <powerDisplay+0x7c>)
 800abb8:	0019      	movs	r1, r3
 800abba:	2003      	movs	r0, #3
 800abbc:	f000 fe10 	bl	800b7e0 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800abc0:	1dfb      	adds	r3, r7, #7
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	2b03      	cmp	r3, #3
 800abc6:	d105      	bne.n	800abd4 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800abc8:	4a11      	ldr	r2, [pc, #68]	@ (800ac10 <powerDisplay+0x84>)
 800abca:	4b0f      	ldr	r3, [pc, #60]	@ (800ac08 <powerDisplay+0x7c>)
 800abcc:	0019      	movs	r1, r3
 800abce:	2003      	movs	r0, #3
 800abd0:	f000 fe06 	bl	800b7e0 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800abd4:	1dfb      	adds	r3, r7, #7
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b02      	cmp	r3, #2
 800abda:	d105      	bne.n	800abe8 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800abdc:	4a0d      	ldr	r2, [pc, #52]	@ (800ac14 <powerDisplay+0x88>)
 800abde:	4b0a      	ldr	r3, [pc, #40]	@ (800ac08 <powerDisplay+0x7c>)
 800abe0:	0019      	movs	r1, r3
 800abe2:	2003      	movs	r0, #3
 800abe4:	f000 fdfc 	bl	800b7e0 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800abe8:	1dfb      	adds	r3, r7, #7
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d105      	bne.n	800abfc <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800abf0:	4a09      	ldr	r2, [pc, #36]	@ (800ac18 <powerDisplay+0x8c>)
 800abf2:	4b05      	ldr	r3, [pc, #20]	@ (800ac08 <powerDisplay+0x7c>)
 800abf4:	0019      	movs	r1, r3
 800abf6:	2003      	movs	r0, #3
 800abf8:	f000 fdf2 	bl	800b7e0 <CreateLine>
  }
}
 800abfc:	46c0      	nop			@ (mov r8, r8)
 800abfe:	46bd      	mov	sp, r7
 800ac00:	b002      	add	sp, #8
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	0802053c 	.word	0x0802053c
 800ac08:	0802054c 	.word	0x0802054c
 800ac0c:	08020550 	.word	0x08020550
 800ac10:	08020568 	.word	0x08020568
 800ac14:	08020588 	.word	0x08020588
 800ac18:	080205a0 	.word	0x080205a0

0800ac1c <configCheck>:

void configCheck(){
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800ac20:	f7fb f97f 	bl	8005f22 <BootButton_Pressed>
 800ac24:	1e03      	subs	r3, r0, #0
 800ac26:	d007      	beq.n	800ac38 <configCheck+0x1c>
 800ac28:	f7fb f98c 	bl	8005f44 <UserButton_Pressed>
 800ac2c:	1e03      	subs	r3, r0, #0
 800ac2e:	d003      	beq.n	800ac38 <configCheck+0x1c>
    configSet = true;
 800ac30:	4b3d      	ldr	r3, [pc, #244]	@ (800ad28 <configCheck+0x10c>)
 800ac32:	2201      	movs	r2, #1
 800ac34:	701a      	strb	r2, [r3, #0]
 800ac36:	e00a      	b.n	800ac4e <configCheck+0x32>
  }
  else{
    configSet = false;
 800ac38:	4b3b      	ldr	r3, [pc, #236]	@ (800ad28 <configCheck+0x10c>)
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800ac3e:	f001 f963 	bl	800bf08 <HAL_GetTick>
 800ac42:	0003      	movs	r3, r0
 800ac44:	22fa      	movs	r2, #250	@ 0xfa
 800ac46:	00d2      	lsls	r2, r2, #3
 800ac48:	189a      	adds	r2, r3, r2
 800ac4a:	4b38      	ldr	r3, [pc, #224]	@ (800ad2c <configCheck+0x110>)
 800ac4c:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800ac4e:	4b36      	ldr	r3, [pc, #216]	@ (800ad28 <configCheck+0x10c>)
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d00d      	beq.n	800ac72 <configCheck+0x56>
 800ac56:	4b35      	ldr	r3, [pc, #212]	@ (800ad2c <configCheck+0x110>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	0018      	movs	r0, r3
 800ac5c:	f000 fd6a 	bl	800b734 <TimestampIsReached>
 800ac60:	1e03      	subs	r3, r0, #0
 800ac62:	d006      	beq.n	800ac72 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800ac64:	f7f8 fe62 	bl	800392c <SetConfigMode>
    SetDBLED(true, true, true);
 800ac68:	2201      	movs	r2, #1
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	f7ff fe4d 	bl	800a90c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800ac72:	f7fb f956 	bl	8005f22 <BootButton_Pressed>
 800ac76:	0003      	movs	r3, r0
 800ac78:	001a      	movs	r2, r3
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4053      	eors	r3, r2
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d01d      	beq.n	800acc0 <configCheck+0xa4>
 800ac84:	f7fb f95e 	bl	8005f44 <UserButton_Pressed>
 800ac88:	1e03      	subs	r3, r0, #0
 800ac8a:	d019      	beq.n	800acc0 <configCheck+0xa4>
 800ac8c:	4b28      	ldr	r3, [pc, #160]	@ (800ad30 <configCheck+0x114>)
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	2201      	movs	r2, #1
 800ac92:	4053      	eors	r3, r2
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d012      	beq.n	800acc0 <configCheck+0xa4>
    SetLEDsOff();
 800ac9a:	f7ff ff3f 	bl	800ab1c <SetLEDsOff>
    userToggle = !userToggle;
 800ac9e:	4b25      	ldr	r3, [pc, #148]	@ (800ad34 <configCheck+0x118>)
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	1e5a      	subs	r2, r3, #1
 800aca4:	4193      	sbcs	r3, r2
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2201      	movs	r2, #1
 800acaa:	4053      	eors	r3, r2
 800acac:	b2db      	uxtb	r3, r3
 800acae:	1c1a      	adds	r2, r3, #0
 800acb0:	2301      	movs	r3, #1
 800acb2:	4013      	ands	r3, r2
 800acb4:	b2da      	uxtb	r2, r3
 800acb6:	4b1f      	ldr	r3, [pc, #124]	@ (800ad34 <configCheck+0x118>)
 800acb8:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800acba:	4b1d      	ldr	r3, [pc, #116]	@ (800ad30 <configCheck+0x114>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800acc0:	f7fb f92f 	bl	8005f22 <BootButton_Pressed>
 800acc4:	0003      	movs	r3, r0
 800acc6:	001a      	movs	r2, r3
 800acc8:	2301      	movs	r3, #1
 800acca:	4053      	eors	r3, r2
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d00b      	beq.n	800acea <configCheck+0xce>
 800acd2:	f7fb f937 	bl	8005f44 <UserButton_Pressed>
 800acd6:	0003      	movs	r3, r0
 800acd8:	001a      	movs	r2, r3
 800acda:	2301      	movs	r3, #1
 800acdc:	4053      	eors	r3, r2
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <configCheck+0xce>
    buttonHeld = false;
 800ace4:	4b12      	ldr	r3, [pc, #72]	@ (800ad30 <configCheck+0x114>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800acea:	f7fb f90b 	bl	8005f04 <Check_USB_PowerOn>
 800acee:	1e03      	subs	r3, r0, #0
 800acf0:	d003      	beq.n	800acfa <configCheck+0xde>
    usbPluggedIn = true;
 800acf2:	4b11      	ldr	r3, [pc, #68]	@ (800ad38 <configCheck+0x11c>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800acf8:	e012      	b.n	800ad20 <configCheck+0x104>
    if(!userToggle && !init){
 800acfa:	4b0e      	ldr	r3, [pc, #56]	@ (800ad34 <configCheck+0x118>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2201      	movs	r2, #1
 800ad00:	4053      	eors	r3, r2
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d008      	beq.n	800ad1a <configCheck+0xfe>
 800ad08:	4b0c      	ldr	r3, [pc, #48]	@ (800ad3c <configCheck+0x120>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	4053      	eors	r3, r2
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d001      	beq.n	800ad1a <configCheck+0xfe>
      SetLEDsOff();
 800ad16:	f7ff ff01 	bl	800ab1c <SetLEDsOff>
    usbPluggedIn = false;
 800ad1a:	4b07      	ldr	r3, [pc, #28]	@ (800ad38 <configCheck+0x11c>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	701a      	strb	r2, [r3, #0]
}
 800ad20:	46c0      	nop			@ (mov r8, r8)
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	20002120 	.word	0x20002120
 800ad2c:	20002124 	.word	0x20002124
 800ad30:	20002123 	.word	0x20002123
 800ad34:	20002122 	.word	0x20002122
 800ad38:	20002121 	.word	0x20002121
 800ad3c:	200000c0 	.word	0x200000c0

0800ad40 <Status_Upkeep>:
  RTC_SetWakeUpTimer(sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0
  configCheck();
 800ad44:	f7ff ff6a 	bl	800ac1c <configCheck>
}
 800ad48:	46c0      	nop			@ (mov r8, r8)
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800ad4e:	b590      	push	{r4, r7, lr}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800ad54:	1dfc      	adds	r4, r7, #7
 800ad56:	f7ff fefd 	bl	800ab54 <powerCheck>
 800ad5a:	0003      	movs	r3, r0
 800ad5c:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800ad5e:	1dfb      	adds	r3, r7, #7
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	0018      	movs	r0, r3
 800ad64:	f7ff ff12 	bl	800ab8c <powerDisplay>
  return status;
 800ad68:	1dfb      	adds	r3, r7, #7
 800ad6a:	781b      	ldrb	r3, [r3, #0]

}
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	b003      	add	sp, #12
 800ad72:	bd90      	pop	{r4, r7, pc}

0800ad74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad78:	4b07      	ldr	r3, [pc, #28]	@ (800ad98 <HAL_MspInit+0x24>)
 800ad7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad7c:	4b06      	ldr	r3, [pc, #24]	@ (800ad98 <HAL_MspInit+0x24>)
 800ad7e:	2101      	movs	r1, #1
 800ad80:	430a      	orrs	r2, r1
 800ad82:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800ad84:	4b04      	ldr	r3, [pc, #16]	@ (800ad98 <HAL_MspInit+0x24>)
 800ad86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad88:	4b03      	ldr	r3, [pc, #12]	@ (800ad98 <HAL_MspInit+0x24>)
 800ad8a:	2180      	movs	r1, #128	@ 0x80
 800ad8c:	0549      	lsls	r1, r1, #21
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad92:	46c0      	nop			@ (mov r8, r8)
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	40021000 	.word	0x40021000

0800ad9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800ada0:	46c0      	nop			@ (mov r8, r8)
 800ada2:	e7fd      	b.n	800ada0 <NMI_Handler+0x4>

0800ada4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ada8:	46c0      	nop			@ (mov r8, r8)
 800adaa:	e7fd      	b.n	800ada8 <HardFault_Handler+0x4>

0800adac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800adb0:	46c0      	nop			@ (mov r8, r8)
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800adba:	46c0      	nop			@ (mov r8, r8)
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800adc4:	f001 f88e 	bl	800bee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800adc8:	46c0      	nop			@ (mov r8, r8)
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800add4:	4b05      	ldr	r3, [pc, #20]	@ (800adec <DMA1_Channel2_3_IRQHandler+0x1c>)
 800add6:	0018      	movs	r0, r3
 800add8:	f001 fea3 	bl	800cb22 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <DMA1_Channel2_3_IRQHandler+0x20>)
 800adde:	0018      	movs	r0, r3
 800ade0:	f001 fe9f 	bl	800cb22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ade4:	46c0      	nop			@ (mov r8, r8)
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	46c0      	nop			@ (mov r8, r8)
 800adec:	20000e04 	.word	0x20000e04
 800adf0:	20000dbc 	.word	0x20000dbc

0800adf4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800adf8:	4b07      	ldr	r3, [pc, #28]	@ (800ae18 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800adfa:	0018      	movs	r0, r3
 800adfc:	f001 fe91 	bl	800cb22 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800ae00:	4b06      	ldr	r3, [pc, #24]	@ (800ae1c <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800ae02:	0018      	movs	r0, r3
 800ae04:	f001 fe8d 	bl	800cb22 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800ae08:	4b05      	ldr	r3, [pc, #20]	@ (800ae20 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	f001 fe89 	bl	800cb22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800ae10:	46c0      	nop			@ (mov r8, r8)
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	46c0      	nop			@ (mov r8, r8)
 800ae18:	20000e88 	.word	0x20000e88
 800ae1c:	20002414 	.word	0x20002414
 800ae20:	2000245c 	.word	0x2000245c

0800ae24 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ae28:	4b03      	ldr	r3, [pc, #12]	@ (800ae38 <USART4_5_IRQHandler+0x14>)
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	f008 fe5e 	bl	8013aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800ae30:	46c0      	nop			@ (mov r8, r8)
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	46c0      	nop			@ (mov r8, r8)
 800ae38:	2000235c 	.word	0x2000235c

0800ae3c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800ae40:	4b09      	ldr	r3, [pc, #36]	@ (800ae68 <I2C1_IRQHandler+0x2c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	699a      	ldr	r2, [r3, #24]
 800ae46:	23e0      	movs	r3, #224	@ 0xe0
 800ae48:	00db      	lsls	r3, r3, #3
 800ae4a:	4013      	ands	r3, r2
 800ae4c:	d004      	beq.n	800ae58 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800ae4e:	4b06      	ldr	r3, [pc, #24]	@ (800ae68 <I2C1_IRQHandler+0x2c>)
 800ae50:	0018      	movs	r0, r3
 800ae52:	f002 fd91 	bl	800d978 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800ae56:	e003      	b.n	800ae60 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800ae58:	4b03      	ldr	r3, [pc, #12]	@ (800ae68 <I2C1_IRQHandler+0x2c>)
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f002 fd72 	bl	800d944 <HAL_I2C_EV_IRQHandler>
}
 800ae60:	46c0      	nop			@ (mov r8, r8)
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	46c0      	nop			@ (mov r8, r8)
 800ae68:	20000d14 	.word	0x20000d14

0800ae6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800ae70:	4b03      	ldr	r3, [pc, #12]	@ (800ae80 <USART1_IRQHandler+0x14>)
 800ae72:	0018      	movs	r0, r3
 800ae74:	f008 fe3a 	bl	8013aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ae78:	46c0      	nop			@ (mov r8, r8)
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	46c0      	nop			@ (mov r8, r8)
 800ae80:	200022a4 	.word	0x200022a4

0800ae84 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800ae88:	4b03      	ldr	r3, [pc, #12]	@ (800ae98 <USB_IRQHandler+0x14>)
 800ae8a:	0018      	movs	r0, r3
 800ae8c:	f004 ff00 	bl	800fc90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800ae90:	46c0      	nop			@ (mov r8, r8)
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	46c0      	nop			@ (mov r8, r8)
 800ae98:	20003264 	.word	0x20003264

0800ae9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
  return 1;
 800aea0:	2301      	movs	r3, #1
}
 800aea2:	0018      	movs	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <_kill>:

int _kill(int pid, int sig)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800aeb2:	f011 fcff 	bl	801c8b4 <__errno>
 800aeb6:	0003      	movs	r3, r0
 800aeb8:	2216      	movs	r2, #22
 800aeba:	601a      	str	r2, [r3, #0]
  return -1;
 800aebc:	2301      	movs	r3, #1
 800aebe:	425b      	negs	r3, r3
}
 800aec0:	0018      	movs	r0, r3
 800aec2:	46bd      	mov	sp, r7
 800aec4:	b002      	add	sp, #8
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <_exit>:

void _exit (int status)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800aed0:	2301      	movs	r3, #1
 800aed2:	425a      	negs	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	0011      	movs	r1, r2
 800aed8:	0018      	movs	r0, r3
 800aeda:	f7ff ffe5 	bl	800aea8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800aede:	46c0      	nop			@ (mov r8, r8)
 800aee0:	e7fd      	b.n	800aede <_exit+0x16>

0800aee2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b086      	sub	sp, #24
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	60f8      	str	r0, [r7, #12]
 800aeea:	60b9      	str	r1, [r7, #8]
 800aeec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aeee:	2300      	movs	r3, #0
 800aef0:	617b      	str	r3, [r7, #20]
 800aef2:	e00a      	b.n	800af0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800aef4:	e000      	b.n	800aef8 <_read+0x16>
 800aef6:	bf00      	nop
 800aef8:	0001      	movs	r1, r0
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	60ba      	str	r2, [r7, #8]
 800af00:	b2ca      	uxtb	r2, r1
 800af02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	3301      	adds	r3, #1
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	429a      	cmp	r2, r3
 800af10:	dbf0      	blt.n	800aef4 <_read+0x12>
  }

  return len;
 800af12:	687b      	ldr	r3, [r7, #4]
}
 800af14:	0018      	movs	r0, r3
 800af16:	46bd      	mov	sp, r7
 800af18:	b006      	add	sp, #24
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <_close>:
  }
  return len;
}

int _close(int file)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800af24:	2301      	movs	r3, #1
 800af26:	425b      	negs	r3, r3
}
 800af28:	0018      	movs	r0, r3
 800af2a:	46bd      	mov	sp, r7
 800af2c:	b002      	add	sp, #8
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2280      	movs	r2, #128	@ 0x80
 800af3e:	0192      	lsls	r2, r2, #6
 800af40:	605a      	str	r2, [r3, #4]
  return 0;
 800af42:	2300      	movs	r3, #0
}
 800af44:	0018      	movs	r0, r3
 800af46:	46bd      	mov	sp, r7
 800af48:	b002      	add	sp, #8
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <_isatty>:

int _isatty(int file)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800af54:	2301      	movs	r3, #1
}
 800af56:	0018      	movs	r0, r3
 800af58:	46bd      	mov	sp, r7
 800af5a:	b002      	add	sp, #8
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	0018      	movs	r0, r3
 800af6e:	46bd      	mov	sp, r7
 800af70:	b004      	add	sp, #16
 800af72:	bd80      	pop	{r7, pc}

0800af74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800af7c:	4a14      	ldr	r2, [pc, #80]	@ (800afd0 <_sbrk+0x5c>)
 800af7e:	4b15      	ldr	r3, [pc, #84]	@ (800afd4 <_sbrk+0x60>)
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800af88:	4b13      	ldr	r3, [pc, #76]	@ (800afd8 <_sbrk+0x64>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d102      	bne.n	800af96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800af90:	4b11      	ldr	r3, [pc, #68]	@ (800afd8 <_sbrk+0x64>)
 800af92:	4a12      	ldr	r2, [pc, #72]	@ (800afdc <_sbrk+0x68>)
 800af94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800af96:	4b10      	ldr	r3, [pc, #64]	@ (800afd8 <_sbrk+0x64>)
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	18d3      	adds	r3, r2, r3
 800af9e:	693a      	ldr	r2, [r7, #16]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d207      	bcs.n	800afb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800afa4:	f011 fc86 	bl	801c8b4 <__errno>
 800afa8:	0003      	movs	r3, r0
 800afaa:	220c      	movs	r2, #12
 800afac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800afae:	2301      	movs	r3, #1
 800afb0:	425b      	negs	r3, r3
 800afb2:	e009      	b.n	800afc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800afb4:	4b08      	ldr	r3, [pc, #32]	@ (800afd8 <_sbrk+0x64>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800afba:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <_sbrk+0x64>)
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	18d2      	adds	r2, r2, r3
 800afc2:	4b05      	ldr	r3, [pc, #20]	@ (800afd8 <_sbrk+0x64>)
 800afc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800afc6:	68fb      	ldr	r3, [r7, #12]
}
 800afc8:	0018      	movs	r0, r3
 800afca:	46bd      	mov	sp, r7
 800afcc:	b006      	add	sp, #24
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	20005000 	.word	0x20005000
 800afd4:	00000400 	.word	0x00000400
 800afd8:	20002128 	.word	0x20002128
 800afdc:	200038c8 	.word	0x200038c8

0800afe0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800afe4:	46c0      	nop			@ (mov r8, r8)
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}
	...

0800afec <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aff2:	2310      	movs	r3, #16
 800aff4:	18fb      	adds	r3, r7, r3
 800aff6:	0018      	movs	r0, r3
 800aff8:	2308      	movs	r3, #8
 800affa:	001a      	movs	r2, r3
 800affc:	2100      	movs	r1, #0
 800affe:	f011 fbb5 	bl	801c76c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b002:	003b      	movs	r3, r7
 800b004:	0018      	movs	r0, r3
 800b006:	2310      	movs	r3, #16
 800b008:	001a      	movs	r2, r3
 800b00a:	2100      	movs	r1, #0
 800b00c:	f011 fbae 	bl	801c76c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800b010:	4b2e      	ldr	r3, [pc, #184]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b012:	2280      	movs	r2, #128	@ 0x80
 800b014:	05d2      	lsls	r2, r2, #23
 800b016:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b018:	4b2c      	ldr	r3, [pc, #176]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b01a:	2200      	movs	r2, #0
 800b01c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b01e:	4b2b      	ldr	r3, [pc, #172]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b020:	2200      	movs	r2, #0
 800b022:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800b024:	4b29      	ldr	r3, [pc, #164]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b026:	4a2a      	ldr	r2, [pc, #168]	@ (800b0d0 <MX_TIM2_Init+0xe4>)
 800b028:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b02a:	4b28      	ldr	r3, [pc, #160]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b030:	4b26      	ldr	r3, [pc, #152]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b032:	2200      	movs	r2, #0
 800b034:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800b036:	4b25      	ldr	r3, [pc, #148]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b038:	0018      	movs	r0, r3
 800b03a:	f007 ff6b 	bl	8012f14 <HAL_TIM_PWM_Init>
 800b03e:	1e03      	subs	r3, r0, #0
 800b040:	d001      	beq.n	800b046 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800b042:	f7fc fa5b 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b046:	2110      	movs	r1, #16
 800b048:	187b      	adds	r3, r7, r1
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b04e:	187b      	adds	r3, r7, r1
 800b050:	2200      	movs	r2, #0
 800b052:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b054:	187a      	adds	r2, r7, r1
 800b056:	4b1d      	ldr	r3, [pc, #116]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b058:	0011      	movs	r1, r2
 800b05a:	0018      	movs	r0, r3
 800b05c:	f008 fa78 	bl	8013550 <HAL_TIMEx_MasterConfigSynchronization>
 800b060:	1e03      	subs	r3, r0, #0
 800b062:	d001      	beq.n	800b068 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800b064:	f7fc fa4a 	bl	80074fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b068:	003b      	movs	r3, r7
 800b06a:	2260      	movs	r2, #96	@ 0x60
 800b06c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800b06e:	003b      	movs	r3, r7
 800b070:	2200      	movs	r2, #0
 800b072:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b074:	003b      	movs	r3, r7
 800b076:	2200      	movs	r2, #0
 800b078:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b07a:	003b      	movs	r3, r7
 800b07c:	2200      	movs	r2, #0
 800b07e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b080:	0039      	movs	r1, r7
 800b082:	4b12      	ldr	r3, [pc, #72]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b084:	2200      	movs	r2, #0
 800b086:	0018      	movs	r0, r3
 800b088:	f008 f816 	bl	80130b8 <HAL_TIM_PWM_ConfigChannel>
 800b08c:	1e03      	subs	r3, r0, #0
 800b08e:	d001      	beq.n	800b094 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800b090:	f7fc fa34 	bl	80074fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b094:	0039      	movs	r1, r7
 800b096:	4b0d      	ldr	r3, [pc, #52]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b098:	2208      	movs	r2, #8
 800b09a:	0018      	movs	r0, r3
 800b09c:	f008 f80c 	bl	80130b8 <HAL_TIM_PWM_ConfigChannel>
 800b0a0:	1e03      	subs	r3, r0, #0
 800b0a2:	d001      	beq.n	800b0a8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800b0a4:	f7fc fa2a 	bl	80074fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b0a8:	0039      	movs	r1, r7
 800b0aa:	4b08      	ldr	r3, [pc, #32]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b0ac:	220c      	movs	r2, #12
 800b0ae:	0018      	movs	r0, r3
 800b0b0:	f008 f802 	bl	80130b8 <HAL_TIM_PWM_ConfigChannel>
 800b0b4:	1e03      	subs	r3, r0, #0
 800b0b6:	d001      	beq.n	800b0bc <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800b0b8:	f7fc fa20 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800b0bc:	4b03      	ldr	r3, [pc, #12]	@ (800b0cc <MX_TIM2_Init+0xe0>)
 800b0be:	0018      	movs	r0, r3
 800b0c0:	f000 f8fe 	bl	800b2c0 <HAL_TIM_MspPostInit>

}
 800b0c4:	46c0      	nop			@ (mov r8, r8)
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	b006      	add	sp, #24
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	2000212c 	.word	0x2000212c
 800b0d0:	0000ffff 	.word	0x0000ffff

0800b0d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b0da:	2310      	movs	r3, #16
 800b0dc:	18fb      	adds	r3, r7, r3
 800b0de:	0018      	movs	r0, r3
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	001a      	movs	r2, r3
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	f011 fb41 	bl	801c76c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b0ea:	003b      	movs	r3, r7
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	2310      	movs	r3, #16
 800b0f0:	001a      	movs	r2, r3
 800b0f2:	2100      	movs	r1, #0
 800b0f4:	f011 fb3a 	bl	801c76c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b0f8:	4b32      	ldr	r3, [pc, #200]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b0fa:	4a33      	ldr	r2, [pc, #204]	@ (800b1c8 <MX_TIM3_Init+0xf4>)
 800b0fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b0fe:	4b31      	ldr	r3, [pc, #196]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b100:	2200      	movs	r2, #0
 800b102:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b104:	4b2f      	ldr	r3, [pc, #188]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b106:	2200      	movs	r2, #0
 800b108:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b10a:	4b2e      	ldr	r3, [pc, #184]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b10c:	4a2f      	ldr	r2, [pc, #188]	@ (800b1cc <MX_TIM3_Init+0xf8>)
 800b10e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b110:	4b2c      	ldr	r3, [pc, #176]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b112:	2200      	movs	r2, #0
 800b114:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b116:	4b2b      	ldr	r3, [pc, #172]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b118:	2200      	movs	r2, #0
 800b11a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b11c:	4b29      	ldr	r3, [pc, #164]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b11e:	0018      	movs	r0, r3
 800b120:	f007 fef8 	bl	8012f14 <HAL_TIM_PWM_Init>
 800b124:	1e03      	subs	r3, r0, #0
 800b126:	d001      	beq.n	800b12c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800b128:	f7fc f9e8 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b12c:	2110      	movs	r1, #16
 800b12e:	187b      	adds	r3, r7, r1
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b134:	187b      	adds	r3, r7, r1
 800b136:	2200      	movs	r2, #0
 800b138:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b13a:	187a      	adds	r2, r7, r1
 800b13c:	4b21      	ldr	r3, [pc, #132]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b13e:	0011      	movs	r1, r2
 800b140:	0018      	movs	r0, r3
 800b142:	f008 fa05 	bl	8013550 <HAL_TIMEx_MasterConfigSynchronization>
 800b146:	1e03      	subs	r3, r0, #0
 800b148:	d001      	beq.n	800b14e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800b14a:	f7fc f9d7 	bl	80074fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b14e:	003b      	movs	r3, r7
 800b150:	2260      	movs	r2, #96	@ 0x60
 800b152:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800b154:	003b      	movs	r3, r7
 800b156:	2200      	movs	r2, #0
 800b158:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b15a:	003b      	movs	r3, r7
 800b15c:	2200      	movs	r2, #0
 800b15e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b160:	003b      	movs	r3, r7
 800b162:	2200      	movs	r2, #0
 800b164:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b166:	0039      	movs	r1, r7
 800b168:	4b16      	ldr	r3, [pc, #88]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	0018      	movs	r0, r3
 800b16e:	f007 ffa3 	bl	80130b8 <HAL_TIM_PWM_ConfigChannel>
 800b172:	1e03      	subs	r3, r0, #0
 800b174:	d001      	beq.n	800b17a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800b176:	f7fc f9c1 	bl	80074fc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800b17a:	4b12      	ldr	r3, [pc, #72]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b17c:	2104      	movs	r1, #4
 800b17e:	0018      	movs	r0, r3
 800b180:	f008 fa44 	bl	801360c <HAL_TIMEx_RemapConfig>
 800b184:	1e03      	subs	r3, r0, #0
 800b186:	d001      	beq.n	800b18c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800b188:	f7fc f9b8 	bl	80074fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b18c:	0039      	movs	r1, r7
 800b18e:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b190:	2204      	movs	r2, #4
 800b192:	0018      	movs	r0, r3
 800b194:	f007 ff90 	bl	80130b8 <HAL_TIM_PWM_ConfigChannel>
 800b198:	1e03      	subs	r3, r0, #0
 800b19a:	d001      	beq.n	800b1a0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800b19c:	f7fc f9ae 	bl	80074fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b1a0:	0039      	movs	r1, r7
 800b1a2:	4b08      	ldr	r3, [pc, #32]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b1a4:	2208      	movs	r2, #8
 800b1a6:	0018      	movs	r0, r3
 800b1a8:	f007 ff86 	bl	80130b8 <HAL_TIM_PWM_ConfigChannel>
 800b1ac:	1e03      	subs	r3, r0, #0
 800b1ae:	d001      	beq.n	800b1b4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800b1b0:	f7fc f9a4 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b1b4:	4b03      	ldr	r3, [pc, #12]	@ (800b1c4 <MX_TIM3_Init+0xf0>)
 800b1b6:	0018      	movs	r0, r3
 800b1b8:	f000 f882 	bl	800b2c0 <HAL_TIM_MspPostInit>

}
 800b1bc:	46c0      	nop			@ (mov r8, r8)
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	b006      	add	sp, #24
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	2000216c 	.word	0x2000216c
 800b1c8:	40000400 	.word	0x40000400
 800b1cc:	0000ffff 	.word	0x0000ffff

0800b1d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b1d6:	003b      	movs	r3, r7
 800b1d8:	0018      	movs	r0, r3
 800b1da:	2308      	movs	r3, #8
 800b1dc:	001a      	movs	r2, r3
 800b1de:	2100      	movs	r1, #0
 800b1e0:	f011 fac4 	bl	801c76c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b1e4:	4b15      	ldr	r3, [pc, #84]	@ (800b23c <MX_TIM6_Init+0x6c>)
 800b1e6:	4a16      	ldr	r2, [pc, #88]	@ (800b240 <MX_TIM6_Init+0x70>)
 800b1e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800b1ea:	4b14      	ldr	r3, [pc, #80]	@ (800b23c <MX_TIM6_Init+0x6c>)
 800b1ec:	220a      	movs	r2, #10
 800b1ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b1f0:	4b12      	ldr	r3, [pc, #72]	@ (800b23c <MX_TIM6_Init+0x6c>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800b1f6:	4b11      	ldr	r3, [pc, #68]	@ (800b23c <MX_TIM6_Init+0x6c>)
 800b1f8:	4a12      	ldr	r2, [pc, #72]	@ (800b244 <MX_TIM6_Init+0x74>)
 800b1fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b1fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b23c <MX_TIM6_Init+0x6c>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b202:	4b0e      	ldr	r3, [pc, #56]	@ (800b23c <MX_TIM6_Init+0x6c>)
 800b204:	0018      	movs	r0, r3
 800b206:	f007 fddd 	bl	8012dc4 <HAL_TIM_Base_Init>
 800b20a:	1e03      	subs	r3, r0, #0
 800b20c:	d001      	beq.n	800b212 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800b20e:	f7fc f975 	bl	80074fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b212:	003b      	movs	r3, r7
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b218:	003b      	movs	r3, r7
 800b21a:	2200      	movs	r2, #0
 800b21c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b21e:	003a      	movs	r2, r7
 800b220:	4b06      	ldr	r3, [pc, #24]	@ (800b23c <MX_TIM6_Init+0x6c>)
 800b222:	0011      	movs	r1, r2
 800b224:	0018      	movs	r0, r3
 800b226:	f008 f993 	bl	8013550 <HAL_TIMEx_MasterConfigSynchronization>
 800b22a:	1e03      	subs	r3, r0, #0
 800b22c:	d001      	beq.n	800b232 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800b22e:	f7fc f965 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b232:	46c0      	nop			@ (mov r8, r8)
 800b234:	46bd      	mov	sp, r7
 800b236:	b002      	add	sp, #8
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	46c0      	nop			@ (mov r8, r8)
 800b23c:	200021ac 	.word	0x200021ac
 800b240:	40001000 	.word	0x40001000
 800b244:	0000ffff 	.word	0x0000ffff

0800b248 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	2380      	movs	r3, #128	@ 0x80
 800b256:	05db      	lsls	r3, r3, #23
 800b258:	429a      	cmp	r2, r3
 800b25a:	d106      	bne.n	800b26a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b25c:	4b0a      	ldr	r3, [pc, #40]	@ (800b288 <HAL_TIM_PWM_MspInit+0x40>)
 800b25e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b260:	4b09      	ldr	r3, [pc, #36]	@ (800b288 <HAL_TIM_PWM_MspInit+0x40>)
 800b262:	2101      	movs	r1, #1
 800b264:	430a      	orrs	r2, r1
 800b266:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b268:	e00a      	b.n	800b280 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a07      	ldr	r2, [pc, #28]	@ (800b28c <HAL_TIM_PWM_MspInit+0x44>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d105      	bne.n	800b280 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b274:	4b04      	ldr	r3, [pc, #16]	@ (800b288 <HAL_TIM_PWM_MspInit+0x40>)
 800b276:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b278:	4b03      	ldr	r3, [pc, #12]	@ (800b288 <HAL_TIM_PWM_MspInit+0x40>)
 800b27a:	2102      	movs	r1, #2
 800b27c:	430a      	orrs	r2, r1
 800b27e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b280:	46c0      	nop			@ (mov r8, r8)
 800b282:	46bd      	mov	sp, r7
 800b284:	b002      	add	sp, #8
 800b286:	bd80      	pop	{r7, pc}
 800b288:	40021000 	.word	0x40021000
 800b28c:	40000400 	.word	0x40000400

0800b290 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a06      	ldr	r2, [pc, #24]	@ (800b2b8 <HAL_TIM_Base_MspInit+0x28>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d105      	bne.n	800b2ae <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b2a2:	4b06      	ldr	r3, [pc, #24]	@ (800b2bc <HAL_TIM_Base_MspInit+0x2c>)
 800b2a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2a6:	4b05      	ldr	r3, [pc, #20]	@ (800b2bc <HAL_TIM_Base_MspInit+0x2c>)
 800b2a8:	2110      	movs	r1, #16
 800b2aa:	430a      	orrs	r2, r1
 800b2ac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b2ae:	46c0      	nop			@ (mov r8, r8)
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	b002      	add	sp, #8
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	46c0      	nop			@ (mov r8, r8)
 800b2b8:	40001000 	.word	0x40001000
 800b2bc:	40021000 	.word	0x40021000

0800b2c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b2c0:	b590      	push	{r4, r7, lr}
 800b2c2:	b08b      	sub	sp, #44	@ 0x2c
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2c8:	2414      	movs	r4, #20
 800b2ca:	193b      	adds	r3, r7, r4
 800b2cc:	0018      	movs	r0, r3
 800b2ce:	2314      	movs	r3, #20
 800b2d0:	001a      	movs	r2, r3
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	f011 fa4a 	bl	801c76c <memset>
  if(timHandle->Instance==TIM2)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	2380      	movs	r3, #128	@ 0x80
 800b2de:	05db      	lsls	r3, r3, #23
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d123      	bne.n	800b32c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2e4:	4b27      	ldr	r3, [pc, #156]	@ (800b384 <HAL_TIM_MspPostInit+0xc4>)
 800b2e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2e8:	4b26      	ldr	r3, [pc, #152]	@ (800b384 <HAL_TIM_MspPostInit+0xc4>)
 800b2ea:	2101      	movs	r1, #1
 800b2ec:	430a      	orrs	r2, r1
 800b2ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b2f0:	4b24      	ldr	r3, [pc, #144]	@ (800b384 <HAL_TIM_MspPostInit+0xc4>)
 800b2f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	4013      	ands	r3, r2
 800b2f8:	613b      	str	r3, [r7, #16]
 800b2fa:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800b2fc:	0021      	movs	r1, r4
 800b2fe:	187b      	adds	r3, r7, r1
 800b300:	220d      	movs	r2, #13
 800b302:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b304:	187b      	adds	r3, r7, r1
 800b306:	2202      	movs	r2, #2
 800b308:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30a:	187b      	adds	r3, r7, r1
 800b30c:	2200      	movs	r2, #0
 800b30e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b310:	187b      	adds	r3, r7, r1
 800b312:	2200      	movs	r2, #0
 800b314:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800b316:	187b      	adds	r3, r7, r1
 800b318:	2202      	movs	r2, #2
 800b31a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b31c:	187a      	adds	r2, r7, r1
 800b31e:	23a0      	movs	r3, #160	@ 0xa0
 800b320:	05db      	lsls	r3, r3, #23
 800b322:	0011      	movs	r1, r2
 800b324:	0018      	movs	r0, r3
 800b326:	f001 feb3 	bl	800d090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b32a:	e027      	b.n	800b37c <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a15      	ldr	r2, [pc, #84]	@ (800b388 <HAL_TIM_MspPostInit+0xc8>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d122      	bne.n	800b37c <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b336:	4b13      	ldr	r3, [pc, #76]	@ (800b384 <HAL_TIM_MspPostInit+0xc4>)
 800b338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b33a:	4b12      	ldr	r3, [pc, #72]	@ (800b384 <HAL_TIM_MspPostInit+0xc4>)
 800b33c:	2104      	movs	r1, #4
 800b33e:	430a      	orrs	r2, r1
 800b340:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b342:	4b10      	ldr	r3, [pc, #64]	@ (800b384 <HAL_TIM_MspPostInit+0xc4>)
 800b344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b346:	2204      	movs	r2, #4
 800b348:	4013      	ands	r3, r2
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800b34e:	2114      	movs	r1, #20
 800b350:	187b      	adds	r3, r7, r1
 800b352:	22e0      	movs	r2, #224	@ 0xe0
 800b354:	0052      	lsls	r2, r2, #1
 800b356:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b358:	187b      	adds	r3, r7, r1
 800b35a:	2202      	movs	r2, #2
 800b35c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b35e:	187b      	adds	r3, r7, r1
 800b360:	2200      	movs	r2, #0
 800b362:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b364:	187b      	adds	r3, r7, r1
 800b366:	2200      	movs	r2, #0
 800b368:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b36a:	187b      	adds	r3, r7, r1
 800b36c:	2202      	movs	r2, #2
 800b36e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b370:	187b      	adds	r3, r7, r1
 800b372:	4a06      	ldr	r2, [pc, #24]	@ (800b38c <HAL_TIM_MspPostInit+0xcc>)
 800b374:	0019      	movs	r1, r3
 800b376:	0010      	movs	r0, r2
 800b378:	f001 fe8a 	bl	800d090 <HAL_GPIO_Init>
}
 800b37c:	46c0      	nop			@ (mov r8, r8)
 800b37e:	46bd      	mov	sp, r7
 800b380:	b00b      	add	sp, #44	@ 0x2c
 800b382:	bd90      	pop	{r4, r7, pc}
 800b384:	40021000 	.word	0x40021000
 800b388:	40000400 	.word	0x40000400
 800b38c:	50000800 	.word	0x50000800

0800b390 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800b394:	4b17      	ldr	r3, [pc, #92]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b396:	4a18      	ldr	r2, [pc, #96]	@ (800b3f8 <MX_LPUART1_UART_Init+0x68>)
 800b398:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800b39a:	4b16      	ldr	r3, [pc, #88]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b39c:	22e1      	movs	r2, #225	@ 0xe1
 800b39e:	0252      	lsls	r2, r2, #9
 800b3a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b3a2:	4b14      	ldr	r3, [pc, #80]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800b3a8:	4b12      	ldr	r3, [pc, #72]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800b3ae:	4b11      	ldr	r3, [pc, #68]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800b3b4:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3b6:	220c      	movs	r2, #12
 800b3b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b3ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3c8:	2218      	movs	r2, #24
 800b3ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b3cc:	4b09      	ldr	r3, [pc, #36]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3ce:	2280      	movs	r2, #128	@ 0x80
 800b3d0:	0212      	lsls	r2, r2, #8
 800b3d2:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800b3d4:	4b07      	ldr	r3, [pc, #28]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3d6:	2280      	movs	r2, #128	@ 0x80
 800b3d8:	0152      	lsls	r2, r2, #5
 800b3da:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800b3dc:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <MX_LPUART1_UART_Init+0x64>)
 800b3de:	0018      	movs	r0, r3
 800b3e0:	f008 f932 	bl	8013648 <HAL_UART_Init>
 800b3e4:	1e03      	subs	r3, r0, #0
 800b3e6:	d001      	beq.n	800b3ec <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800b3e8:	f7fc f888 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800b3ec:	46c0      	nop			@ (mov r8, r8)
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	46c0      	nop			@ (mov r8, r8)
 800b3f4:	200021ec 	.word	0x200021ec
 800b3f8:	40004800 	.word	0x40004800

0800b3fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b400:	4b16      	ldr	r3, [pc, #88]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b402:	4a17      	ldr	r2, [pc, #92]	@ (800b460 <MX_USART1_UART_Init+0x64>)
 800b404:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b406:	4b15      	ldr	r3, [pc, #84]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b408:	22e1      	movs	r2, #225	@ 0xe1
 800b40a:	0252      	lsls	r2, r2, #9
 800b40c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b40e:	4b13      	ldr	r3, [pc, #76]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b410:	2200      	movs	r2, #0
 800b412:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b414:	4b11      	ldr	r3, [pc, #68]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b416:	2200      	movs	r2, #0
 800b418:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b41a:	4b10      	ldr	r3, [pc, #64]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b420:	4b0e      	ldr	r3, [pc, #56]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b422:	220c      	movs	r2, #12
 800b424:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b426:	4b0d      	ldr	r3, [pc, #52]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b428:	2200      	movs	r2, #0
 800b42a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b42c:	4b0b      	ldr	r3, [pc, #44]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b42e:	2200      	movs	r2, #0
 800b430:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b432:	4b0a      	ldr	r3, [pc, #40]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b434:	2200      	movs	r2, #0
 800b436:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800b438:	4b08      	ldr	r3, [pc, #32]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b43a:	2208      	movs	r2, #8
 800b43c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b43e:	4b07      	ldr	r3, [pc, #28]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b440:	2280      	movs	r2, #128	@ 0x80
 800b442:	0212      	lsls	r2, r2, #8
 800b444:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b446:	4b05      	ldr	r3, [pc, #20]	@ (800b45c <MX_USART1_UART_Init+0x60>)
 800b448:	0018      	movs	r0, r3
 800b44a:	f008 f8fd 	bl	8013648 <HAL_UART_Init>
 800b44e:	1e03      	subs	r3, r0, #0
 800b450:	d001      	beq.n	800b456 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800b452:	f7fc f853 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b456:	46c0      	nop			@ (mov r8, r8)
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	200022a4 	.word	0x200022a4
 800b460:	40013800 	.word	0x40013800

0800b464 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800b468:	4b14      	ldr	r3, [pc, #80]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b46a:	4a15      	ldr	r2, [pc, #84]	@ (800b4c0 <MX_USART4_UART_Init+0x5c>)
 800b46c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b46e:	4b13      	ldr	r3, [pc, #76]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b470:	22e1      	movs	r2, #225	@ 0xe1
 800b472:	0252      	lsls	r2, r2, #9
 800b474:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b476:	4b11      	ldr	r3, [pc, #68]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b478:	2200      	movs	r2, #0
 800b47a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b47c:	4b0f      	ldr	r3, [pc, #60]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b47e:	2200      	movs	r2, #0
 800b480:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b482:	4b0e      	ldr	r3, [pc, #56]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b484:	2200      	movs	r2, #0
 800b486:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b488:	4b0c      	ldr	r3, [pc, #48]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b48a:	220c      	movs	r2, #12
 800b48c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b48e:	4b0b      	ldr	r3, [pc, #44]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b490:	2200      	movs	r2, #0
 800b492:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b494:	4b09      	ldr	r3, [pc, #36]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b496:	2200      	movs	r2, #0
 800b498:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b49a:	4b08      	ldr	r3, [pc, #32]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b4a0:	4b06      	ldr	r3, [pc, #24]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b4a6:	4b05      	ldr	r3, [pc, #20]	@ (800b4bc <MX_USART4_UART_Init+0x58>)
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	f008 f8cd 	bl	8013648 <HAL_UART_Init>
 800b4ae:	1e03      	subs	r3, r0, #0
 800b4b0:	d001      	beq.n	800b4b6 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800b4b2:	f7fc f823 	bl	80074fc <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800b4b6:	46c0      	nop			@ (mov r8, r8)
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	2000235c 	.word	0x2000235c
 800b4c0:	40004c00 	.word	0x40004c00

0800b4c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b08d      	sub	sp, #52	@ 0x34
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4cc:	241c      	movs	r4, #28
 800b4ce:	193b      	adds	r3, r7, r4
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	2314      	movs	r3, #20
 800b4d4:	001a      	movs	r2, r3
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	f011 f948 	bl	801c76c <memset>
  if(uartHandle->Instance==LPUART1)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a8b      	ldr	r2, [pc, #556]	@ (800b710 <HAL_UART_MspInit+0x24c>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d129      	bne.n	800b53a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800b4e6:	4b8b      	ldr	r3, [pc, #556]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b4e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4ea:	4b8a      	ldr	r3, [pc, #552]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b4ec:	2180      	movs	r1, #128	@ 0x80
 800b4ee:	02c9      	lsls	r1, r1, #11
 800b4f0:	430a      	orrs	r2, r1
 800b4f2:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4f4:	4b87      	ldr	r3, [pc, #540]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b4f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f8:	4b86      	ldr	r3, [pc, #536]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b4fa:	2104      	movs	r1, #4
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b500:	4b84      	ldr	r3, [pc, #528]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b504:	2204      	movs	r2, #4
 800b506:	4013      	ands	r3, r2
 800b508:	61bb      	str	r3, [r7, #24]
 800b50a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b50c:	0021      	movs	r1, r4
 800b50e:	187b      	adds	r3, r7, r1
 800b510:	2203      	movs	r2, #3
 800b512:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b514:	187b      	adds	r3, r7, r1
 800b516:	2202      	movs	r2, #2
 800b518:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b51a:	187b      	adds	r3, r7, r1
 800b51c:	2200      	movs	r2, #0
 800b51e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b520:	187b      	adds	r3, r7, r1
 800b522:	2203      	movs	r2, #3
 800b524:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800b526:	187b      	adds	r3, r7, r1
 800b528:	2206      	movs	r2, #6
 800b52a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b52c:	187b      	adds	r3, r7, r1
 800b52e:	4a7a      	ldr	r2, [pc, #488]	@ (800b718 <HAL_UART_MspInit+0x254>)
 800b530:	0019      	movs	r1, r3
 800b532:	0010      	movs	r0, r2
 800b534:	f001 fdac 	bl	800d090 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800b538:	e0e5      	b.n	800b706 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a77      	ldr	r2, [pc, #476]	@ (800b71c <HAL_UART_MspInit+0x258>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d133      	bne.n	800b5ac <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b544:	4b73      	ldr	r3, [pc, #460]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b548:	4b72      	ldr	r3, [pc, #456]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b54a:	2180      	movs	r1, #128	@ 0x80
 800b54c:	01c9      	lsls	r1, r1, #7
 800b54e:	430a      	orrs	r2, r1
 800b550:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b552:	4b70      	ldr	r3, [pc, #448]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b556:	4b6f      	ldr	r3, [pc, #444]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b558:	2101      	movs	r1, #1
 800b55a:	430a      	orrs	r2, r1
 800b55c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b55e:	4b6d      	ldr	r3, [pc, #436]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b562:	2201      	movs	r2, #1
 800b564:	4013      	ands	r3, r2
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b56a:	211c      	movs	r1, #28
 800b56c:	187b      	adds	r3, r7, r1
 800b56e:	22c0      	movs	r2, #192	@ 0xc0
 800b570:	00d2      	lsls	r2, r2, #3
 800b572:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b574:	187b      	adds	r3, r7, r1
 800b576:	2202      	movs	r2, #2
 800b578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b57a:	187b      	adds	r3, r7, r1
 800b57c:	2200      	movs	r2, #0
 800b57e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b580:	187b      	adds	r3, r7, r1
 800b582:	2203      	movs	r2, #3
 800b584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800b586:	187b      	adds	r3, r7, r1
 800b588:	2204      	movs	r2, #4
 800b58a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b58c:	187a      	adds	r2, r7, r1
 800b58e:	23a0      	movs	r3, #160	@ 0xa0
 800b590:	05db      	lsls	r3, r3, #23
 800b592:	0011      	movs	r1, r2
 800b594:	0018      	movs	r0, r3
 800b596:	f001 fd7b 	bl	800d090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b59a:	2200      	movs	r2, #0
 800b59c:	2100      	movs	r1, #0
 800b59e:	201b      	movs	r0, #27
 800b5a0:	f001 f928 	bl	800c7f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b5a4:	201b      	movs	r0, #27
 800b5a6:	f001 f93a 	bl	800c81e <HAL_NVIC_EnableIRQ>
}
 800b5aa:	e0ac      	b.n	800b706 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a5b      	ldr	r2, [pc, #364]	@ (800b720 <HAL_UART_MspInit+0x25c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d000      	beq.n	800b5b8 <HAL_UART_MspInit+0xf4>
 800b5b6:	e0a6      	b.n	800b706 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800b5b8:	4b56      	ldr	r3, [pc, #344]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5bc:	4b55      	ldr	r3, [pc, #340]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5be:	2180      	movs	r1, #128	@ 0x80
 800b5c0:	0309      	lsls	r1, r1, #12
 800b5c2:	430a      	orrs	r2, r1
 800b5c4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5c6:	4b53      	ldr	r3, [pc, #332]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5ca:	4b52      	ldr	r3, [pc, #328]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	430a      	orrs	r2, r1
 800b5d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b5d2:	4b50      	ldr	r3, [pc, #320]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	4013      	ands	r3, r2
 800b5da:	613b      	str	r3, [r7, #16]
 800b5dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b5de:	4b4d      	ldr	r3, [pc, #308]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5e2:	4b4c      	ldr	r3, [pc, #304]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5e4:	2104      	movs	r1, #4
 800b5e6:	430a      	orrs	r2, r1
 800b5e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b5ea:	4b4a      	ldr	r3, [pc, #296]	@ (800b714 <HAL_UART_MspInit+0x250>)
 800b5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ee:	2204      	movs	r2, #4
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b5f6:	241c      	movs	r4, #28
 800b5f8:	193b      	adds	r3, r7, r4
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5fe:	193b      	adds	r3, r7, r4
 800b600:	2202      	movs	r2, #2
 800b602:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b604:	193b      	adds	r3, r7, r4
 800b606:	2200      	movs	r2, #0
 800b608:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b60a:	193b      	adds	r3, r7, r4
 800b60c:	2203      	movs	r2, #3
 800b60e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b610:	193b      	adds	r3, r7, r4
 800b612:	2206      	movs	r2, #6
 800b614:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b616:	193a      	adds	r2, r7, r4
 800b618:	23a0      	movs	r3, #160	@ 0xa0
 800b61a:	05db      	lsls	r3, r3, #23
 800b61c:	0011      	movs	r1, r2
 800b61e:	0018      	movs	r0, r3
 800b620:	f001 fd36 	bl	800d090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b624:	0021      	movs	r1, r4
 800b626:	187b      	adds	r3, r7, r1
 800b628:	2280      	movs	r2, #128	@ 0x80
 800b62a:	00d2      	lsls	r2, r2, #3
 800b62c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b62e:	187b      	adds	r3, r7, r1
 800b630:	2202      	movs	r2, #2
 800b632:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b634:	187b      	adds	r3, r7, r1
 800b636:	2200      	movs	r2, #0
 800b638:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b63a:	187b      	adds	r3, r7, r1
 800b63c:	2203      	movs	r2, #3
 800b63e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b640:	187b      	adds	r3, r7, r1
 800b642:	2206      	movs	r2, #6
 800b644:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b646:	187b      	adds	r3, r7, r1
 800b648:	4a33      	ldr	r2, [pc, #204]	@ (800b718 <HAL_UART_MspInit+0x254>)
 800b64a:	0019      	movs	r1, r3
 800b64c:	0010      	movs	r0, r2
 800b64e:	f001 fd1f 	bl	800d090 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800b652:	4b34      	ldr	r3, [pc, #208]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b654:	4a34      	ldr	r2, [pc, #208]	@ (800b728 <HAL_UART_MspInit+0x264>)
 800b656:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800b658:	4b32      	ldr	r3, [pc, #200]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b65a:	220c      	movs	r2, #12
 800b65c:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b65e:	4b31      	ldr	r3, [pc, #196]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b660:	2200      	movs	r2, #0
 800b662:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b664:	4b2f      	ldr	r3, [pc, #188]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b666:	2200      	movs	r2, #0
 800b668:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b66a:	4b2e      	ldr	r3, [pc, #184]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b66c:	2280      	movs	r2, #128	@ 0x80
 800b66e:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b670:	4b2c      	ldr	r3, [pc, #176]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b672:	2200      	movs	r2, #0
 800b674:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b676:	4b2b      	ldr	r3, [pc, #172]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b678:	2200      	movs	r2, #0
 800b67a:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800b67c:	4b29      	ldr	r3, [pc, #164]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b67e:	2220      	movs	r2, #32
 800b680:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b682:	4b28      	ldr	r3, [pc, #160]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b684:	2200      	movs	r2, #0
 800b686:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800b688:	4b26      	ldr	r3, [pc, #152]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b68a:	0018      	movs	r0, r3
 800b68c:	f001 f8e4 	bl	800c858 <HAL_DMA_Init>
 800b690:	1e03      	subs	r3, r0, #0
 800b692:	d001      	beq.n	800b698 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800b694:	f7fb ff32 	bl	80074fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a22      	ldr	r2, [pc, #136]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b69c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b69e:	4b21      	ldr	r3, [pc, #132]	@ (800b724 <HAL_UART_MspInit+0x260>)
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800b6a4:	4b21      	ldr	r3, [pc, #132]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6a6:	4a22      	ldr	r2, [pc, #136]	@ (800b730 <HAL_UART_MspInit+0x26c>)
 800b6a8:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800b6aa:	4b20      	ldr	r3, [pc, #128]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6ac:	220c      	movs	r2, #12
 800b6ae:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b6b0:	4b1e      	ldr	r3, [pc, #120]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6b2:	2210      	movs	r2, #16
 800b6b4:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b6b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b6bc:	4b1b      	ldr	r3, [pc, #108]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6be:	2280      	movs	r2, #128	@ 0x80
 800b6c0:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b6c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b6c8:	4b18      	ldr	r3, [pc, #96]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800b6ce:	4b17      	ldr	r3, [pc, #92]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b6d4:	4b15      	ldr	r3, [pc, #84]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800b6da:	4b14      	ldr	r3, [pc, #80]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6dc:	0018      	movs	r0, r3
 800b6de:	f001 f8bb 	bl	800c858 <HAL_DMA_Init>
 800b6e2:	1e03      	subs	r3, r0, #0
 800b6e4:	d001      	beq.n	800b6ea <HAL_UART_MspInit+0x226>
      Error_Handler();
 800b6e6:	f7fb ff09 	bl	80074fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4a0f      	ldr	r2, [pc, #60]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6ee:	671a      	str	r2, [r3, #112]	@ 0x70
 800b6f0:	4b0e      	ldr	r3, [pc, #56]	@ (800b72c <HAL_UART_MspInit+0x268>)
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2100      	movs	r1, #0
 800b6fa:	200e      	movs	r0, #14
 800b6fc:	f001 f87a 	bl	800c7f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800b700:	200e      	movs	r0, #14
 800b702:	f001 f88c 	bl	800c81e <HAL_NVIC_EnableIRQ>
}
 800b706:	46c0      	nop			@ (mov r8, r8)
 800b708:	46bd      	mov	sp, r7
 800b70a:	b00d      	add	sp, #52	@ 0x34
 800b70c:	bd90      	pop	{r4, r7, pc}
 800b70e:	46c0      	nop			@ (mov r8, r8)
 800b710:	40004800 	.word	0x40004800
 800b714:	40021000 	.word	0x40021000
 800b718:	50000800 	.word	0x50000800
 800b71c:	40013800 	.word	0x40013800
 800b720:	40004c00 	.word	0x40004c00
 800b724:	20002414 	.word	0x20002414
 800b728:	4002006c 	.word	0x4002006c
 800b72c:	2000245c 	.word	0x2000245c
 800b730:	40020080 	.word	0x40020080

0800b734 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 80

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800b73c:	f000 fbe4 	bl	800bf08 <HAL_GetTick>
 800b740:	0003      	movs	r3, r0
 800b742:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800b744:	4b1c      	ldr	r3, [pc, #112]	@ (800b7b8 <TimestampIsReached+0x84>)
 800b746:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d307      	bcc.n	800b760 <TimestampIsReached+0x2c>
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d901      	bls.n	800b760 <TimestampIsReached+0x2c>
 800b75c:	2201      	movs	r2, #1
 800b75e:	e000      	b.n	800b762 <TimestampIsReached+0x2e>
 800b760:	2200      	movs	r2, #0
 800b762:	230f      	movs	r3, #15
 800b764:	18fb      	adds	r3, r7, r3
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	781a      	ldrb	r2, [r3, #0]
 800b76a:	2101      	movs	r1, #1
 800b76c:	400a      	ands	r2, r1
 800b76e:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800b770:	697a      	ldr	r2, [r7, #20]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	d207      	bcs.n	800b788 <TimestampIsReached+0x54>
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	429a      	cmp	r2, r3
 800b782:	d201      	bcs.n	800b788 <TimestampIsReached+0x54>
 800b784:	2201      	movs	r2, #1
 800b786:	e000      	b.n	800b78a <TimestampIsReached+0x56>
 800b788:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800b78a:	200e      	movs	r0, #14
 800b78c:	183b      	adds	r3, r7, r0
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	781a      	ldrb	r2, [r3, #0]
 800b792:	2101      	movs	r1, #1
 800b794:	400a      	ands	r2, r1
 800b796:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800b798:	230f      	movs	r3, #15
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d103      	bne.n	800b7aa <TimestampIsReached+0x76>
 800b7a2:	183b      	adds	r3, r7, r0
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d001      	beq.n	800b7ae <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	e000      	b.n	800b7b0 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	b006      	add	sp, #24
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	7fffffff 	.word	0x7fffffff

0800b7bc <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800b7c4:	f000 fba0 	bl	800bf08 <HAL_GetTick>
 800b7c8:	0002      	movs	r2, r0
 800b7ca:	4904      	ldr	r1, [pc, #16]	@ (800b7dc <AddTimestamp+0x20>)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	0018      	movs	r0, r3
 800b7d0:	f010 fe88 	bl	801c4e4 <siprintf>
}
 800b7d4:	46c0      	nop			@ (mov r8, r8)
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	b002      	add	sp, #8
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	080205c4 	.word	0x080205c4

0800b7e0 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800b7e0:	b40c      	push	{r2, r3}
 800b7e2:	b590      	push	{r4, r7, lr}
 800b7e4:	b099      	sub	sp, #100	@ 0x64
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	0002      	movs	r2, r0
 800b7ea:	6039      	str	r1, [r7, #0]
 800b7ec:	1dfb      	adds	r3, r7, #7
 800b7ee:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800b7f0:	4b1f      	ldr	r3, [pc, #124]	@ (800b870 <CreateLine+0x90>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	1dfa      	adds	r2, r7, #7
 800b7f6:	7812      	ldrb	r2, [r2, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d832      	bhi.n	800b862 <CreateLine+0x82>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	491d      	ldr	r1, [pc, #116]	@ (800b874 <CreateLine+0x94>)
 800b800:	240c      	movs	r4, #12
 800b802:	193b      	adds	r3, r7, r4
 800b804:	0018      	movs	r0, r3
 800b806:	f010 fe6d 	bl	801c4e4 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800b80a:	4b19      	ldr	r3, [pc, #100]	@ (800b870 <CreateLine+0x90>)
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d909      	bls.n	800b826 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800b812:	193b      	adds	r3, r7, r4
 800b814:	0018      	movs	r0, r3
 800b816:	f7f4 fca9 	bl	800016c <strlen>
 800b81a:	0002      	movs	r2, r0
 800b81c:	193b      	adds	r3, r7, r4
 800b81e:	189b      	adds	r3, r3, r2
 800b820:	0018      	movs	r0, r3
 800b822:	f7ff ffcb 	bl	800b7bc <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800b826:	240c      	movs	r4, #12
 800b828:	193b      	adds	r3, r7, r4
 800b82a:	0018      	movs	r0, r3
 800b82c:	f7f4 fc9e 	bl	800016c <strlen>
 800b830:	0003      	movs	r3, r0
 800b832:	65fb      	str	r3, [r7, #92]	@ 0x5c

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800b834:	236c      	movs	r3, #108	@ 0x6c
 800b836:	2208      	movs	r2, #8
 800b838:	189b      	adds	r3, r3, r2
 800b83a:	19db      	adds	r3, r3, r7
 800b83c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800b83e:	193a      	adds	r2, r7, r4
 800b840:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b842:	18d0      	adds	r0, r2, r3
 800b844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b846:	2250      	movs	r2, #80	@ 0x50
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	0019      	movs	r1, r3
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b850:	f010 fee0 	bl	801c614 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800b854:	193a      	adds	r2, r7, r4
 800b856:	4b08      	ldr	r3, [pc, #32]	@ (800b878 <CreateLine+0x98>)
 800b858:	0011      	movs	r1, r2
 800b85a:	0018      	movs	r0, r3
 800b85c:	f010 fdd2 	bl	801c404 <iprintf>
 800b860:	e000      	b.n	800b864 <CreateLine+0x84>
    return;
 800b862:	46c0      	nop			@ (mov r8, r8)
}
 800b864:	46bd      	mov	sp, r7
 800b866:	b019      	add	sp, #100	@ 0x64
 800b868:	bc90      	pop	{r4, r7}
 800b86a:	bc08      	pop	{r3}
 800b86c:	b002      	add	sp, #8
 800b86e:	4718      	bx	r3
 800b870:	200000c8 	.word	0x200000c8
 800b874:	080205d0 	.word	0x080205d0
 800b878:	080205d4 	.word	0x080205d4

0800b87c <_write>:

int _write(int fd, const void *buf, size_t count) {
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	68b9      	ldr	r1, [r7, #8]
 800b88e:	4804      	ldr	r0, [pc, #16]	@ (800b8a0 <_write+0x24>)
 800b890:	2364      	movs	r3, #100	@ 0x64
 800b892:	f007 ff3f 	bl	8013714 <HAL_UART_Transmit>
  return count;
 800b896:	687b      	ldr	r3, [r7, #4]
}
 800b898:	0018      	movs	r0, r3
 800b89a:	46bd      	mov	sp, r7
 800b89c:	b004      	add	sp, #16
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	200022a4 	.word	0x200022a4

0800b8a4 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	0002      	movs	r2, r0
 800b8ac:	1dfb      	adds	r3, r7, #7
 800b8ae:	701a      	strb	r2, [r3, #0]
 800b8b0:	4b03      	ldr	r3, [pc, #12]	@ (800b8c0 <SetVerboseLevel+0x1c>)
 800b8b2:	1dfa      	adds	r2, r7, #7
 800b8b4:	7812      	ldrb	r2, [r2, #0]
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	46c0      	nop			@ (mov r8, r8)
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	b002      	add	sp, #8
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	200000c8 	.word	0x200000c8

0800b8c4 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b8c8:	f000 fb1e 	bl	800bf08 <HAL_GetTick>
 800b8cc:	0003      	movs	r3, r0
}
 800b8ce:	0018      	movs	r0, r3
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800b8da:	4a0f      	ldr	r2, [pc, #60]	@ (800b918 <BinaryReleaseInfo+0x44>)
 800b8dc:	4b0f      	ldr	r3, [pc, #60]	@ (800b91c <BinaryReleaseInfo+0x48>)
 800b8de:	0019      	movs	r1, r3
 800b8e0:	2002      	movs	r0, #2
 800b8e2:	f7ff ff7d 	bl	800b7e0 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800b8e6:	480e      	ldr	r0, [pc, #56]	@ (800b920 <BinaryReleaseInfo+0x4c>)
 800b8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800b924 <BinaryReleaseInfo+0x50>)
 800b8ea:	490c      	ldr	r1, [pc, #48]	@ (800b91c <BinaryReleaseInfo+0x48>)
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <BinaryReleaseInfo+0x54>)
 800b8ee:	9300      	str	r3, [sp, #0]
 800b8f0:	0003      	movs	r3, r0
 800b8f2:	2002      	movs	r0, #2
 800b8f4:	f7ff ff74 	bl	800b7e0 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w47");
 800b8f8:	4a0c      	ldr	r2, [pc, #48]	@ (800b92c <BinaryReleaseInfo+0x58>)
 800b8fa:	4b08      	ldr	r3, [pc, #32]	@ (800b91c <BinaryReleaseInfo+0x48>)
 800b8fc:	0019      	movs	r1, r3
 800b8fe:	2002      	movs	r0, #2
 800b900:	f7ff ff6e 	bl	800b7e0 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800b904:	4b0a      	ldr	r3, [pc, #40]	@ (800b930 <BinaryReleaseInfo+0x5c>)
 800b906:	4a0b      	ldr	r2, [pc, #44]	@ (800b934 <BinaryReleaseInfo+0x60>)
 800b908:	4904      	ldr	r1, [pc, #16]	@ (800b91c <BinaryReleaseInfo+0x48>)
 800b90a:	2002      	movs	r0, #2
 800b90c:	f7ff ff68 	bl	800b7e0 <CreateLine>
}
 800b910:	46c0      	nop			@ (mov r8, r8)
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	46c0      	nop			@ (mov r8, r8)
 800b918:	080205dc 	.word	0x080205dc
 800b91c:	08020608 	.word	0x08020608
 800b920:	0802060c 	.word	0x0802060c
 800b924:	08020618 	.word	0x08020618
 800b928:	0802062c 	.word	0x0802062c
 800b92c:	08020638 	.word	0x08020638
 800b930:	08020644 	.word	0x08020644
 800b934:	0802064c 	.word	0x0802064c

0800b938 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	68f9      	ldr	r1, [r7, #12]
 800b94a:	4803      	ldr	r0, [pc, #12]	@ (800b958 <errorHandler+0x20>)
 800b94c:	f010 fd5a 	bl	801c404 <iprintf>
//    while (true)
//    {
//    }
}
 800b950:	46c0      	nop			@ (mov r8, r8)
 800b952:	46bd      	mov	sp, r7
 800b954:	b004      	add	sp, #16
 800b956:	bd80      	pop	{r7, pc}
 800b958:	08020664 	.word	0x08020664

0800b95c <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b95c:	b590      	push	{r4, r7, lr}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6039      	str	r1, [r7, #0]
 800b964:	0011      	movs	r1, r2
 800b966:	1dfb      	adds	r3, r7, #7
 800b968:	1c02      	adds	r2, r0, #0
 800b96a:	701a      	strb	r2, [r3, #0]
 800b96c:	1dbb      	adds	r3, r7, #6
 800b96e:	1c0a      	adds	r2, r1, #0
 800b970:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800b972:	4b0a      	ldr	r3, [pc, #40]	@ (800b99c <ReadRegister+0x40>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800b97a:	4b08      	ldr	r3, [pc, #32]	@ (800b99c <ReadRegister+0x40>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	1dba      	adds	r2, r7, #6
 800b980:	7814      	ldrb	r4, [r2, #0]
 800b982:	6839      	ldr	r1, [r7, #0]
 800b984:	1dfa      	adds	r2, r7, #7
 800b986:	7810      	ldrb	r0, [r2, #0]
 800b988:	0022      	movs	r2, r4
 800b98a:	4798      	blx	r3
 800b98c:	0003      	movs	r3, r0
 800b98e:	e000      	b.n	800b992 <ReadRegister+0x36>
	}
	return false;
 800b990:	2300      	movs	r3, #0
}
 800b992:	0018      	movs	r0, r3
 800b994:	46bd      	mov	sp, r7
 800b996:	b003      	add	sp, #12
 800b998:	bd90      	pop	{r4, r7, pc}
 800b99a:	46c0      	nop			@ (mov r8, r8)
 800b99c:	200024a4 	.word	0x200024a4

0800b9a0 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b9a0:	b590      	push	{r4, r7, lr}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6039      	str	r1, [r7, #0]
 800b9a8:	0011      	movs	r1, r2
 800b9aa:	1dfb      	adds	r3, r7, #7
 800b9ac:	1c02      	adds	r2, r0, #0
 800b9ae:	701a      	strb	r2, [r3, #0]
 800b9b0:	1dbb      	adds	r3, r7, #6
 800b9b2:	1c0a      	adds	r2, r1, #0
 800b9b4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b9b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e0 <WriteRegister+0x40>)
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00a      	beq.n	800b9d4 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800b9be:	4b08      	ldr	r3, [pc, #32]	@ (800b9e0 <WriteRegister+0x40>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	1dba      	adds	r2, r7, #6
 800b9c4:	7814      	ldrb	r4, [r2, #0]
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	1dfa      	adds	r2, r7, #7
 800b9ca:	7810      	ldrb	r0, [r2, #0]
 800b9cc:	0022      	movs	r2, r4
 800b9ce:	4798      	blx	r3
 800b9d0:	0003      	movs	r3, r0
 800b9d2:	e000      	b.n	800b9d6 <WriteRegister+0x36>
  }
  return false;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	0018      	movs	r0, r3
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	b003      	add	sp, #12
 800b9dc:	bd90      	pop	{r4, r7, pc}
 800b9de:	46c0      	nop			@ (mov r8, r8)
 800b9e0:	200024a8 	.word	0x200024a8

0800b9e4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	000a      	movs	r2, r1
 800b9ee:	1cfb      	adds	r3, r7, #3
 800b9f0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800b9f2:	230f      	movs	r3, #15
 800b9f4:	18fb      	adds	r3, r7, r3
 800b9f6:	22ff      	movs	r2, #255	@ 0xff
 800b9f8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b9fa:	230e      	movs	r3, #14
 800b9fc:	18fb      	adds	r3, r7, r3
 800b9fe:	2200      	movs	r2, #0
 800ba00:	701a      	strb	r2, [r3, #0]
 800ba02:	e037      	b.n	800ba74 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800ba04:	230e      	movs	r3, #14
 800ba06:	18fb      	adds	r3, r7, r3
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	18d3      	adds	r3, r2, r3
 800ba0e:	7819      	ldrb	r1, [r3, #0]
 800ba10:	220f      	movs	r2, #15
 800ba12:	18bb      	adds	r3, r7, r2
 800ba14:	18ba      	adds	r2, r7, r2
 800ba16:	7812      	ldrb	r2, [r2, #0]
 800ba18:	404a      	eors	r2, r1
 800ba1a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ba1c:	230d      	movs	r3, #13
 800ba1e:	18fb      	adds	r3, r7, r3
 800ba20:	2200      	movs	r2, #0
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	e01b      	b.n	800ba5e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800ba26:	210f      	movs	r1, #15
 800ba28:	187b      	adds	r3, r7, r1
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	b25b      	sxtb	r3, r3
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	da09      	bge.n	800ba46 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800ba32:	187b      	adds	r3, r7, r1
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	005b      	lsls	r3, r3, #1
 800ba38:	b25b      	sxtb	r3, r3
 800ba3a:	2231      	movs	r2, #49	@ 0x31
 800ba3c:	4053      	eors	r3, r2
 800ba3e:	b25a      	sxtb	r2, r3
 800ba40:	187b      	adds	r3, r7, r1
 800ba42:	701a      	strb	r2, [r3, #0]
 800ba44:	e005      	b.n	800ba52 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800ba46:	230f      	movs	r3, #15
 800ba48:	18fa      	adds	r2, r7, r3
 800ba4a:	18fb      	adds	r3, r7, r3
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	18db      	adds	r3, r3, r3
 800ba50:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800ba52:	210d      	movs	r1, #13
 800ba54:	187b      	adds	r3, r7, r1
 800ba56:	781a      	ldrb	r2, [r3, #0]
 800ba58:	187b      	adds	r3, r7, r1
 800ba5a:	3201      	adds	r2, #1
 800ba5c:	701a      	strb	r2, [r3, #0]
 800ba5e:	230d      	movs	r3, #13
 800ba60:	18fb      	adds	r3, r7, r3
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	2b07      	cmp	r3, #7
 800ba66:	d9de      	bls.n	800ba26 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800ba68:	210e      	movs	r1, #14
 800ba6a:	187b      	adds	r3, r7, r1
 800ba6c:	781a      	ldrb	r2, [r3, #0]
 800ba6e:	187b      	adds	r3, r7, r1
 800ba70:	3201      	adds	r2, #1
 800ba72:	701a      	strb	r2, [r3, #0]
 800ba74:	230e      	movs	r3, #14
 800ba76:	18fa      	adds	r2, r7, r3
 800ba78:	1cfb      	adds	r3, r7, #3
 800ba7a:	7812      	ldrb	r2, [r2, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d3c0      	bcc.n	800ba04 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800ba82:	230f      	movs	r3, #15
 800ba84:	18fb      	adds	r3, r7, r3
 800ba86:	781b      	ldrb	r3, [r3, #0]
}
 800ba88:	0018      	movs	r0, r3
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	b004      	add	sp, #16
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800ba9a:	4b0a      	ldr	r3, [pc, #40]	@ (800bac4 <HIDS_Init+0x34>)
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800baa0:	4b09      	ldr	r3, [pc, #36]	@ (800bac8 <HIDS_Init+0x38>)
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800baa6:	4b09      	ldr	r3, [pc, #36]	@ (800bacc <HIDS_Init+0x3c>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	0018      	movs	r0, r3
 800baac:	f000 f8da 	bl	800bc64 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800bab0:	4b07      	ldr	r3, [pc, #28]	@ (800bad0 <HIDS_Init+0x40>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	0018      	movs	r0, r3
 800bab6:	f000 f82b 	bl	800bb10 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b002      	add	sp, #8
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	200024a4 	.word	0x200024a4
 800bac8:	200024a8 	.word	0x200024a8
 800bacc:	200000ca 	.word	0x200000ca
 800bad0:	200000c9 	.word	0x200000c9

0800bad4 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800bad8:	f7ff fef4 	bl	800b8c4 <GetCurrentHalTicks>
 800badc:	0002      	movs	r2, r0
 800bade:	4b08      	ldr	r3, [pc, #32]	@ (800bb00 <HIDS_StartMeasurement+0x2c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	18d2      	adds	r2, r2, r3
 800bae4:	4b07      	ldr	r3, [pc, #28]	@ (800bb04 <HIDS_StartMeasurement+0x30>)
 800bae6:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800bae8:	4b07      	ldr	r3, [pc, #28]	@ (800bb08 <HIDS_StartMeasurement+0x34>)
 800baea:	2201      	movs	r2, #1
 800baec:	0019      	movs	r1, r3
 800baee:	2044      	movs	r0, #68	@ 0x44
 800baf0:	f7ff ff56 	bl	800b9a0 <WriteRegister>
  MeasurementDone = false;
 800baf4:	4b05      	ldr	r3, [pc, #20]	@ (800bb0c <HIDS_StartMeasurement+0x38>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	701a      	strb	r2, [r3, #0]
}
 800bafa:	46c0      	nop			@ (mov r8, r8)
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}
 800bb00:	200000d0 	.word	0x200000d0
 800bb04:	200000cc 	.word	0x200000cc
 800bb08:	200000ca 	.word	0x200000ca
 800bb0c:	200024ba 	.word	0x200024ba

0800bb10 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	0002      	movs	r2, r0
 800bb18:	1dfb      	adds	r3, r7, #7
 800bb1a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800bb1c:	4b03      	ldr	r3, [pc, #12]	@ (800bb2c <HIDS_SetHeaterMode+0x1c>)
 800bb1e:	1dfa      	adds	r2, r7, #7
 800bb20:	7812      	ldrb	r2, [r2, #0]
 800bb22:	701a      	strb	r2, [r3, #0]
}
 800bb24:	46c0      	nop			@ (mov r8, r8)
 800bb26:	46bd      	mov	sp, r7
 800bb28:	b002      	add	sp, #8
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	200000c9 	.word	0x200000c9

0800bb30 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	781a      	ldrb	r2, [r3, #0]
 800bb3c:	210c      	movs	r1, #12
 800bb3e:	187b      	adds	r3, r7, r1
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	785a      	ldrb	r2, [r3, #1]
 800bb46:	187b      	adds	r3, r7, r1
 800bb48:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800bb4a:	240f      	movs	r4, #15
 800bb4c:	193b      	adds	r3, r7, r4
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	7892      	ldrb	r2, [r2, #2]
 800bb52:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800bb54:	187b      	adds	r3, r7, r1
 800bb56:	2102      	movs	r1, #2
 800bb58:	0018      	movs	r0, r3
 800bb5a:	f7ff ff43 	bl	800b9e4 <CalculateCRC>
 800bb5e:	0003      	movs	r3, r0
 800bb60:	001a      	movs	r2, r3
 800bb62:	193b      	adds	r3, r7, r4
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d007      	beq.n	800bb7a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800bb6a:	4a1a      	ldr	r2, [pc, #104]	@ (800bbd4 <CheckCRC+0xa4>)
 800bb6c:	4b1a      	ldr	r3, [pc, #104]	@ (800bbd8 <CheckCRC+0xa8>)
 800bb6e:	0019      	movs	r1, r3
 800bb70:	2001      	movs	r0, #1
 800bb72:	f7ff fe35 	bl	800b7e0 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800bb76:	2300      	movs	r3, #0
 800bb78:	e027      	b.n	800bbca <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	78da      	ldrb	r2, [r3, #3]
 800bb7e:	2108      	movs	r1, #8
 800bb80:	187b      	adds	r3, r7, r1
 800bb82:	701a      	strb	r2, [r3, #0]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	791a      	ldrb	r2, [r3, #4]
 800bb88:	187b      	adds	r3, r7, r1
 800bb8a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800bb8c:	240e      	movs	r4, #14
 800bb8e:	193b      	adds	r3, r7, r4
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	7952      	ldrb	r2, [r2, #5]
 800bb94:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800bb96:	187b      	adds	r3, r7, r1
 800bb98:	2102      	movs	r1, #2
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	f7ff ff22 	bl	800b9e4 <CalculateCRC>
 800bba0:	0003      	movs	r3, r0
 800bba2:	001a      	movs	r2, r3
 800bba4:	193b      	adds	r3, r7, r4
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	d00d      	beq.n	800bbc8 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800bbac:	4a0b      	ldr	r2, [pc, #44]	@ (800bbdc <CheckCRC+0xac>)
 800bbae:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd8 <CheckCRC+0xa8>)
 800bbb0:	0019      	movs	r1, r3
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	f7ff fe14 	bl	800b7e0 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800bbb8:	4a09      	ldr	r2, [pc, #36]	@ (800bbe0 <CheckCRC+0xb0>)
 800bbba:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe4 <CheckCRC+0xb4>)
 800bbbc:	2170      	movs	r1, #112	@ 0x70
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	f7ff feba 	bl	800b938 <errorHandler>
		return false;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	e000      	b.n	800bbca <CheckCRC+0x9a>
	}
	return true;
 800bbc8:	2301      	movs	r3, #1
}
 800bbca:	0018      	movs	r0, r3
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	b005      	add	sp, #20
 800bbd0:	bd90      	pop	{r4, r7, pc}
 800bbd2:	46c0      	nop			@ (mov r8, r8)
 800bbd4:	080206b0 	.word	0x080206b0
 800bbd8:	080206d8 	.word	0x080206d8
 800bbdc:	080206dc 	.word	0x080206dc
 800bbe0:	08020708 	.word	0x08020708
 800bbe4:	08020b6c 	.word	0x08020b6c

0800bbe8 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800bbee:	1dbb      	adds	r3, r7, #6
 800bbf0:	2289      	movs	r2, #137	@ 0x89
 800bbf2:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800bbf4:	1dbb      	adds	r3, r7, #6
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	0019      	movs	r1, r3
 800bbfa:	2044      	movs	r0, #68	@ 0x44
 800bbfc:	f7ff fed0 	bl	800b9a0 <WriteRegister>
	HAL_Delay(30);
 800bc00:	201e      	movs	r0, #30
 800bc02:	f000 f98b 	bl	800bf1c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800bc06:	4b14      	ldr	r3, [pc, #80]	@ (800bc58 <HIDS_DeviceConnected+0x70>)
 800bc08:	2206      	movs	r2, #6
 800bc0a:	0019      	movs	r1, r3
 800bc0c:	2044      	movs	r0, #68	@ 0x44
 800bc0e:	f7ff fea5 	bl	800b95c <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800bc12:	1dfb      	adds	r3, r7, #7
 800bc14:	2200      	movs	r2, #0
 800bc16:	701a      	strb	r2, [r3, #0]
 800bc18:	e011      	b.n	800bc3e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800bc1a:	1dfb      	adds	r3, r7, #7
 800bc1c:	7818      	ldrb	r0, [r3, #0]
 800bc1e:	1dfb      	adds	r3, r7, #7
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	4a0d      	ldr	r2, [pc, #52]	@ (800bc58 <HIDS_DeviceConnected+0x70>)
 800bc24:	5cd3      	ldrb	r3, [r2, r3]
 800bc26:	4a0d      	ldr	r2, [pc, #52]	@ (800bc5c <HIDS_DeviceConnected+0x74>)
 800bc28:	490d      	ldr	r1, [pc, #52]	@ (800bc60 <HIDS_DeviceConnected+0x78>)
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	0003      	movs	r3, r0
 800bc2e:	2002      	movs	r0, #2
 800bc30:	f7ff fdd6 	bl	800b7e0 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800bc34:	1dfb      	adds	r3, r7, #7
 800bc36:	781a      	ldrb	r2, [r3, #0]
 800bc38:	1dfb      	adds	r3, r7, #7
 800bc3a:	3201      	adds	r2, #1
 800bc3c:	701a      	strb	r2, [r3, #0]
 800bc3e:	1dfb      	adds	r3, r7, #7
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b05      	cmp	r3, #5
 800bc44:	d9e9      	bls.n	800bc1a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800bc46:	4b04      	ldr	r3, [pc, #16]	@ (800bc58 <HIDS_DeviceConnected+0x70>)
 800bc48:	0018      	movs	r0, r3
 800bc4a:	f7ff ff71 	bl	800bb30 <CheckCRC>
 800bc4e:	0003      	movs	r3, r0
}
 800bc50:	0018      	movs	r0, r3
 800bc52:	46bd      	mov	sp, r7
 800bc54:	b002      	add	sp, #8
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	200024ac 	.word	0x200024ac
 800bc5c:	08020720 	.word	0x08020720
 800bc60:	080206ac 	.word	0x080206ac

0800bc64 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	0002      	movs	r2, r0
 800bc6c:	1dfb      	adds	r3, r7, #7
 800bc6e:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800bc70:	4b03      	ldr	r3, [pc, #12]	@ (800bc80 <HIDS_SetMeasurementMode+0x1c>)
 800bc72:	1dfa      	adds	r2, r7, #7
 800bc74:	7812      	ldrb	r2, [r2, #0]
 800bc76:	701a      	strb	r2, [r3, #0]
}
 800bc78:	46c0      	nop			@ (mov r8, r8)
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	b002      	add	sp, #8
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	200000ca 	.word	0x200000ca

0800bc84 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800bc84:	b580      	push	{r7, lr}
 800bc86:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800bc88:	4b04      	ldr	r3, [pc, #16]	@ (800bc9c <HIDS_MeasurementReady+0x18>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	0018      	movs	r0, r3
 800bc8e:	f7ff fd51 	bl	800b734 <TimestampIsReached>
 800bc92:	0003      	movs	r3, r0
}
 800bc94:	0018      	movs	r0, r3
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}
 800bc9a:	46c0      	nop			@ (mov r8, r8)
 800bc9c:	200000cc 	.word	0x200000cc

0800bca0 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800bca0:	b590      	push	{r4, r7, lr}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800bcaa:	4b49      	ldr	r3, [pc, #292]	@ (800bdd0 <HIDS_GetMeasurementValues+0x130>)
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <HIDS_GetMeasurementValues+0x16>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e087      	b.n	800bdc6 <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800bcb6:	f7ff ffe5 	bl	800bc84 <HIDS_MeasurementReady>
 800bcba:	0003      	movs	r3, r0
 800bcbc:	001a      	movs	r2, r3
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4053      	eors	r3, r2
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <HIDS_GetMeasurementValues+0x2c>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	e07c      	b.n	800bdc6 <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800bccc:	2316      	movs	r3, #22
 800bcce:	18fc      	adds	r4, r7, r3
 800bcd0:	4b40      	ldr	r3, [pc, #256]	@ (800bdd4 <HIDS_GetMeasurementValues+0x134>)
 800bcd2:	2206      	movs	r2, #6
 800bcd4:	0019      	movs	r1, r3
 800bcd6:	2044      	movs	r0, #68	@ 0x44
 800bcd8:	f7ff fe40 	bl	800b95c <ReadRegister>
 800bcdc:	0003      	movs	r3, r0
 800bcde:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800bce0:	4b3c      	ldr	r3, [pc, #240]	@ (800bdd4 <HIDS_GetMeasurementValues+0x134>)
 800bce2:	0018      	movs	r0, r3
 800bce4:	f7ff ff24 	bl	800bb30 <CheckCRC>
 800bce8:	0003      	movs	r3, r0
 800bcea:	001a      	movs	r2, r3
 800bcec:	2301      	movs	r3, #1
 800bcee:	4053      	eors	r3, r2
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d011      	beq.n	800bd1a <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800bcf6:	2317      	movs	r3, #23
 800bcf8:	18fb      	adds	r3, r7, r3
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	701a      	strb	r2, [r3, #0]
 800bcfe:	e005      	b.n	800bd0c <HIDS_GetMeasurementValues+0x6c>
 800bd00:	2117      	movs	r1, #23
 800bd02:	187b      	adds	r3, r7, r1
 800bd04:	781a      	ldrb	r2, [r3, #0]
 800bd06:	187b      	adds	r3, r7, r1
 800bd08:	3201      	adds	r2, #1
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	2317      	movs	r3, #23
 800bd0e:	18fb      	adds	r3, r7, r3
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b05      	cmp	r3, #5
 800bd14:	d9f4      	bls.n	800bd00 <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800bd16:	2300      	movs	r3, #0
 800bd18:	e055      	b.n	800bdc6 <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800bd1a:	4b2e      	ldr	r3, [pc, #184]	@ (800bdd4 <HIDS_GetMeasurementValues+0x134>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	021b      	lsls	r3, r3, #8
 800bd20:	4a2c      	ldr	r2, [pc, #176]	@ (800bdd4 <HIDS_GetMeasurementValues+0x134>)
 800bd22:	7852      	ldrb	r2, [r2, #1]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	22af      	movs	r2, #175	@ 0xaf
 800bd28:	4353      	muls	r3, r2
 800bd2a:	0018      	movs	r0, r3
 800bd2c:	f7f7 fb48 	bl	80033c0 <__aeabi_i2d>
 800bd30:	2200      	movs	r2, #0
 800bd32:	4b29      	ldr	r3, [pc, #164]	@ (800bdd8 <HIDS_GetMeasurementValues+0x138>)
 800bd34:	f7f6 f83e 	bl	8001db4 <__aeabi_ddiv>
 800bd38:	0002      	movs	r2, r0
 800bd3a:	000b      	movs	r3, r1
 800bd3c:	0010      	movs	r0, r2
 800bd3e:	0019      	movs	r1, r3
 800bd40:	f7f7 fbd8 	bl	80034f4 <__aeabi_d2f>
 800bd44:	1c03      	adds	r3, r0, #0
 800bd46:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800bd48:	4924      	ldr	r1, [pc, #144]	@ (800bddc <HIDS_GetMeasurementValues+0x13c>)
 800bd4a:	6938      	ldr	r0, [r7, #16]
 800bd4c:	f7f5 fa66 	bl	800121c <__aeabi_fsub>
 800bd50:	1c03      	adds	r3, r0, #0
 800bd52:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800bd54:	4b1f      	ldr	r3, [pc, #124]	@ (800bdd4 <HIDS_GetMeasurementValues+0x134>)
 800bd56:	78db      	ldrb	r3, [r3, #3]
 800bd58:	021b      	lsls	r3, r3, #8
 800bd5a:	4a1e      	ldr	r2, [pc, #120]	@ (800bdd4 <HIDS_GetMeasurementValues+0x134>)
 800bd5c:	7912      	ldrb	r2, [r2, #4]
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	0013      	movs	r3, r2
 800bd62:	015b      	lsls	r3, r3, #5
 800bd64:	1a9b      	subs	r3, r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	189b      	adds	r3, r3, r2
 800bd6a:	0018      	movs	r0, r3
 800bd6c:	f7f7 fb28 	bl	80033c0 <__aeabi_i2d>
 800bd70:	2200      	movs	r2, #0
 800bd72:	4b19      	ldr	r3, [pc, #100]	@ (800bdd8 <HIDS_GetMeasurementValues+0x138>)
 800bd74:	f7f6 f81e 	bl	8001db4 <__aeabi_ddiv>
 800bd78:	0002      	movs	r2, r0
 800bd7a:	000b      	movs	r3, r1
 800bd7c:	0010      	movs	r0, r2
 800bd7e:	0019      	movs	r1, r3
 800bd80:	f7f7 fbb8 	bl	80034f4 <__aeabi_d2f>
 800bd84:	1c03      	adds	r3, r0, #0
 800bd86:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800bd88:	4915      	ldr	r1, [pc, #84]	@ (800bde0 <HIDS_GetMeasurementValues+0x140>)
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f7f5 fa46 	bl	800121c <__aeabi_fsub>
 800bd90:	1c03      	adds	r3, r0, #0
 800bd92:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	0011      	movs	r1, r2
 800bda6:	0018      	movs	r0, r3
 800bda8:	f7fd fd02 	bl	80097b0 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	1c11      	adds	r1, r2, #0
 800bdb2:	1c18      	adds	r0, r3, #0
 800bdb4:	f7f7 fd7c 	bl	80038b0 <ESP_GetHT>

   measurements = 0;
 800bdb8:	4b0a      	ldr	r3, [pc, #40]	@ (800bde4 <HIDS_GetMeasurementValues+0x144>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800bdbe:	4b04      	ldr	r3, [pc, #16]	@ (800bdd0 <HIDS_GetMeasurementValues+0x130>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800bdc4:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800bdc6:	0018      	movs	r0, r3
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	b007      	add	sp, #28
 800bdcc:	bd90      	pop	{r4, r7, pc}
 800bdce:	46c0      	nop			@ (mov r8, r8)
 800bdd0:	200024ba 	.word	0x200024ba
 800bdd4:	200024b4 	.word	0x200024b4
 800bdd8:	40efffe0 	.word	0x40efffe0
 800bddc:	42340000 	.word	0x42340000
 800bde0:	40c00000 	.word	0x40c00000
 800bde4:	200024bc 	.word	0x200024bc

0800bde8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800bde8:	480d      	ldr	r0, [pc, #52]	@ (800be20 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800bdea:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800bdec:	f7ff f8f8 	bl	800afe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bdf0:	480c      	ldr	r0, [pc, #48]	@ (800be24 <LoopForever+0x6>)
  ldr r1, =_edata
 800bdf2:	490d      	ldr	r1, [pc, #52]	@ (800be28 <LoopForever+0xa>)
  ldr r2, =_sidata
 800bdf4:	4a0d      	ldr	r2, [pc, #52]	@ (800be2c <LoopForever+0xe>)
  movs r3, #0
 800bdf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bdf8:	e002      	b.n	800be00 <LoopCopyDataInit>

0800bdfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bdfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bdfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bdfe:	3304      	adds	r3, #4

0800be00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800be00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800be02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800be04:	d3f9      	bcc.n	800bdfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800be06:	4a0a      	ldr	r2, [pc, #40]	@ (800be30 <LoopForever+0x12>)
  ldr r4, =_ebss
 800be08:	4c0a      	ldr	r4, [pc, #40]	@ (800be34 <LoopForever+0x16>)
  movs r3, #0
 800be0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800be0c:	e001      	b.n	800be12 <LoopFillZerobss>

0800be0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800be0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800be10:	3204      	adds	r2, #4

0800be12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800be12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800be14:	d3fb      	bcc.n	800be0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800be16:	f010 fd53 	bl	801c8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800be1a:	f7fb f8f3 	bl	8007004 <main>

0800be1e <LoopForever>:

LoopForever:
    b LoopForever
 800be1e:	e7fe      	b.n	800be1e <LoopForever>
   ldr   r0, =_estack
 800be20:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800be24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800be28:	2000041c 	.word	0x2000041c
  ldr r2, =_sidata
 800be2c:	080214f0 	.word	0x080214f0
  ldr r2, =_sbss
 800be30:	2000041c 	.word	0x2000041c
  ldr r4, =_ebss
 800be34:	200038c4 	.word	0x200038c4

0800be38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800be38:	e7fe      	b.n	800be38 <ADC1_COMP_IRQHandler>
	...

0800be3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800be42:	1dfb      	adds	r3, r7, #7
 800be44:	2200      	movs	r2, #0
 800be46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800be48:	4b0b      	ldr	r3, [pc, #44]	@ (800be78 <HAL_Init+0x3c>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	4b0a      	ldr	r3, [pc, #40]	@ (800be78 <HAL_Init+0x3c>)
 800be4e:	2140      	movs	r1, #64	@ 0x40
 800be50:	430a      	orrs	r2, r1
 800be52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800be54:	2003      	movs	r0, #3
 800be56:	f000 f811 	bl	800be7c <HAL_InitTick>
 800be5a:	1e03      	subs	r3, r0, #0
 800be5c:	d003      	beq.n	800be66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800be5e:	1dfb      	adds	r3, r7, #7
 800be60:	2201      	movs	r2, #1
 800be62:	701a      	strb	r2, [r3, #0]
 800be64:	e001      	b.n	800be6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800be66:	f7fe ff85 	bl	800ad74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800be6a:	1dfb      	adds	r3, r7, #7
 800be6c:	781b      	ldrb	r3, [r3, #0]
}
 800be6e:	0018      	movs	r0, r3
 800be70:	46bd      	mov	sp, r7
 800be72:	b002      	add	sp, #8
 800be74:	bd80      	pop	{r7, pc}
 800be76:	46c0      	nop			@ (mov r8, r8)
 800be78:	40022000 	.word	0x40022000

0800be7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800be7c:	b590      	push	{r4, r7, lr}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800be84:	4b14      	ldr	r3, [pc, #80]	@ (800bed8 <HAL_InitTick+0x5c>)
 800be86:	681c      	ldr	r4, [r3, #0]
 800be88:	4b14      	ldr	r3, [pc, #80]	@ (800bedc <HAL_InitTick+0x60>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	0019      	movs	r1, r3
 800be8e:	23fa      	movs	r3, #250	@ 0xfa
 800be90:	0098      	lsls	r0, r3, #2
 800be92:	f7f4 f987 	bl	80001a4 <__udivsi3>
 800be96:	0003      	movs	r3, r0
 800be98:	0019      	movs	r1, r3
 800be9a:	0020      	movs	r0, r4
 800be9c:	f7f4 f982 	bl	80001a4 <__udivsi3>
 800bea0:	0003      	movs	r3, r0
 800bea2:	0018      	movs	r0, r3
 800bea4:	f000 fccb 	bl	800c83e <HAL_SYSTICK_Config>
 800bea8:	1e03      	subs	r3, r0, #0
 800beaa:	d001      	beq.n	800beb0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	e00f      	b.n	800bed0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b03      	cmp	r3, #3
 800beb4:	d80b      	bhi.n	800bece <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	2301      	movs	r3, #1
 800beba:	425b      	negs	r3, r3
 800bebc:	2200      	movs	r2, #0
 800bebe:	0018      	movs	r0, r3
 800bec0:	f000 fc98 	bl	800c7f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800bec4:	4b06      	ldr	r3, [pc, #24]	@ (800bee0 <HAL_InitTick+0x64>)
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800beca:	2300      	movs	r3, #0
 800becc:	e000      	b.n	800bed0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
}
 800bed0:	0018      	movs	r0, r3
 800bed2:	46bd      	mov	sp, r7
 800bed4:	b003      	add	sp, #12
 800bed6:	bd90      	pop	{r4, r7, pc}
 800bed8:	200000c4 	.word	0x200000c4
 800bedc:	200000d8 	.word	0x200000d8
 800bee0:	200000d4 	.word	0x200000d4

0800bee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800bee8:	4b05      	ldr	r3, [pc, #20]	@ (800bf00 <HAL_IncTick+0x1c>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	001a      	movs	r2, r3
 800beee:	4b05      	ldr	r3, [pc, #20]	@ (800bf04 <HAL_IncTick+0x20>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	18d2      	adds	r2, r2, r3
 800bef4:	4b03      	ldr	r3, [pc, #12]	@ (800bf04 <HAL_IncTick+0x20>)
 800bef6:	601a      	str	r2, [r3, #0]
}
 800bef8:	46c0      	nop			@ (mov r8, r8)
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	46c0      	nop			@ (mov r8, r8)
 800bf00:	200000d8 	.word	0x200000d8
 800bf04:	200024c0 	.word	0x200024c0

0800bf08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	af00      	add	r7, sp, #0
  return uwTick;
 800bf0c:	4b02      	ldr	r3, [pc, #8]	@ (800bf18 <HAL_GetTick+0x10>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
}
 800bf10:	0018      	movs	r0, r3
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	46c0      	nop			@ (mov r8, r8)
 800bf18:	200024c0 	.word	0x200024c0

0800bf1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bf24:	f7ff fff0 	bl	800bf08 <HAL_GetTick>
 800bf28:	0003      	movs	r3, r0
 800bf2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3301      	adds	r3, #1
 800bf34:	d005      	beq.n	800bf42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800bf36:	4b0a      	ldr	r3, [pc, #40]	@ (800bf60 <HAL_Delay+0x44>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	001a      	movs	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	189b      	adds	r3, r3, r2
 800bf40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800bf42:	46c0      	nop			@ (mov r8, r8)
 800bf44:	f7ff ffe0 	bl	800bf08 <HAL_GetTick>
 800bf48:	0002      	movs	r2, r0
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	68fa      	ldr	r2, [r7, #12]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d8f7      	bhi.n	800bf44 <HAL_Delay+0x28>
  {
  }
}
 800bf54:	46c0      	nop			@ (mov r8, r8)
 800bf56:	46c0      	nop			@ (mov r8, r8)
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	b004      	add	sp, #16
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	46c0      	nop			@ (mov r8, r8)
 800bf60:	200000d8 	.word	0x200000d8

0800bf64 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800bf68:	4b02      	ldr	r3, [pc, #8]	@ (800bf74 <HAL_GetUIDw0+0x10>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
}
 800bf6c:	0018      	movs	r0, r3
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	46c0      	nop			@ (mov r8, r8)
 800bf74:	1ff80050 	.word	0x1ff80050

0800bf78 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800bf7c:	4b02      	ldr	r3, [pc, #8]	@ (800bf88 <HAL_GetUIDw1+0x10>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
}
 800bf80:	0018      	movs	r0, r3
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	46c0      	nop			@ (mov r8, r8)
 800bf88:	1ff80054 	.word	0x1ff80054

0800bf8c <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800bf90:	4b02      	ldr	r3, [pc, #8]	@ (800bf9c <HAL_GetUIDw2+0x10>)
 800bf92:	681b      	ldr	r3, [r3, #0]
}
 800bf94:	0018      	movs	r0, r3
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	46c0      	nop			@ (mov r8, r8)
 800bf9c:	1ff80064 	.word	0x1ff80064

0800bfa0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d101      	bne.n	800bfb2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800bfae:	2301      	movs	r3, #1
 800bfb0:	e159      	b.n	800c266 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d10a      	bne.n	800bfd0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2250      	movs	r2, #80	@ 0x50
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	0018      	movs	r0, r3
 800bfcc:	f7fa fa5c 	bl	8006488 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfd4:	2210      	movs	r2, #16
 800bfd6:	4013      	ands	r3, r2
 800bfd8:	2b10      	cmp	r3, #16
 800bfda:	d005      	beq.n	800bfe8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	689b      	ldr	r3, [r3, #8]
 800bfe2:	2204      	movs	r2, #4
 800bfe4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800bfe6:	d00b      	beq.n	800c000 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfec:	2210      	movs	r2, #16
 800bfee:	431a      	orrs	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2250      	movs	r2, #80	@ 0x50
 800bff8:	2100      	movs	r1, #0
 800bffa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e132      	b.n	800c266 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c004:	4a9a      	ldr	r2, [pc, #616]	@ (800c270 <HAL_ADC_Init+0x2d0>)
 800c006:	4013      	ands	r3, r2
 800c008:	2202      	movs	r2, #2
 800c00a:	431a      	orrs	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	2203      	movs	r2, #3
 800c018:	4013      	ands	r3, r2
 800c01a:	2b01      	cmp	r3, #1
 800c01c:	d108      	bne.n	800c030 <HAL_ADC_Init+0x90>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2201      	movs	r2, #1
 800c026:	4013      	ands	r3, r2
 800c028:	2b01      	cmp	r3, #1
 800c02a:	d101      	bne.n	800c030 <HAL_ADC_Init+0x90>
 800c02c:	2301      	movs	r3, #1
 800c02e:	e000      	b.n	800c032 <HAL_ADC_Init+0x92>
 800c030:	2300      	movs	r3, #0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d149      	bne.n	800c0ca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	23c0      	movs	r3, #192	@ 0xc0
 800c03c:	061b      	lsls	r3, r3, #24
 800c03e:	429a      	cmp	r2, r3
 800c040:	d00b      	beq.n	800c05a <HAL_ADC_Init+0xba>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	2380      	movs	r3, #128	@ 0x80
 800c048:	05db      	lsls	r3, r3, #23
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d005      	beq.n	800c05a <HAL_ADC_Init+0xba>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	2380      	movs	r3, #128	@ 0x80
 800c054:	061b      	lsls	r3, r3, #24
 800c056:	429a      	cmp	r2, r3
 800c058:	d111      	bne.n	800c07e <HAL_ADC_Init+0xde>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	691a      	ldr	r2, [r3, #16]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	0092      	lsls	r2, r2, #2
 800c066:	0892      	lsrs	r2, r2, #2
 800c068:	611a      	str	r2, [r3, #16]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6919      	ldr	r1, [r3, #16]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	430a      	orrs	r2, r1
 800c07a:	611a      	str	r2, [r3, #16]
 800c07c:	e014      	b.n	800c0a8 <HAL_ADC_Init+0x108>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	691a      	ldr	r2, [r3, #16]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	0092      	lsls	r2, r2, #2
 800c08a:	0892      	lsrs	r2, r2, #2
 800c08c:	611a      	str	r2, [r3, #16]
 800c08e:	4b79      	ldr	r3, [pc, #484]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4b78      	ldr	r3, [pc, #480]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c094:	4978      	ldr	r1, [pc, #480]	@ (800c278 <HAL_ADC_Init+0x2d8>)
 800c096:	400a      	ands	r2, r1
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	4b76      	ldr	r3, [pc, #472]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c09c:	6819      	ldr	r1, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685a      	ldr	r2, [r3, #4]
 800c0a2:	4b74      	ldr	r3, [pc, #464]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c0a4:	430a      	orrs	r2, r1
 800c0a6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	68da      	ldr	r2, [r3, #12]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2118      	movs	r1, #24
 800c0b4:	438a      	bics	r2, r1
 800c0b6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	68d9      	ldr	r1, [r3, #12]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	689a      	ldr	r2, [r3, #8]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800c0ca:	4b6a      	ldr	r3, [pc, #424]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	4b69      	ldr	r3, [pc, #420]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c0d0:	496a      	ldr	r1, [pc, #424]	@ (800c27c <HAL_ADC_Init+0x2dc>)
 800c0d2:	400a      	ands	r2, r1
 800c0d4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800c0d6:	4b67      	ldr	r3, [pc, #412]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c0d8:	6819      	ldr	r1, [r3, #0]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0de:	065a      	lsls	r2, r3, #25
 800c0e0:	4b64      	ldr	r3, [pc, #400]	@ (800c274 <HAL_ADC_Init+0x2d4>)
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	689a      	ldr	r2, [r3, #8]
 800c0ec:	2380      	movs	r3, #128	@ 0x80
 800c0ee:	055b      	lsls	r3, r3, #21
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	d108      	bne.n	800c106 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689a      	ldr	r2, [r3, #8]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2180      	movs	r1, #128	@ 0x80
 800c100:	0549      	lsls	r1, r1, #21
 800c102:	430a      	orrs	r2, r1
 800c104:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68da      	ldr	r2, [r3, #12]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	495b      	ldr	r1, [pc, #364]	@ (800c280 <HAL_ADC_Init+0x2e0>)
 800c112:	400a      	ands	r2, r1
 800c114:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	68d9      	ldr	r1, [r3, #12]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	2b02      	cmp	r3, #2
 800c126:	d101      	bne.n	800c12c <HAL_ADC_Init+0x18c>
 800c128:	2304      	movs	r3, #4
 800c12a:	e000      	b.n	800c12e <HAL_ADC_Init+0x18e>
 800c12c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c12e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2020      	movs	r0, #32
 800c134:	5c1b      	ldrb	r3, [r3, r0]
 800c136:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c138:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	202c      	movs	r0, #44	@ 0x2c
 800c13e:	5c1b      	ldrb	r3, [r3, r0]
 800c140:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c142:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c148:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	699b      	ldr	r3, [r3, #24]
 800c14e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800c150:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	69db      	ldr	r3, [r3, #28]
 800c156:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c158:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	430a      	orrs	r2, r1
 800c160:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c166:	23c2      	movs	r3, #194	@ 0xc2
 800c168:	33ff      	adds	r3, #255	@ 0xff
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d00b      	beq.n	800c186 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	68d9      	ldr	r1, [r3, #12]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c17c:	431a      	orrs	r2, r3
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	430a      	orrs	r2, r1
 800c184:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2221      	movs	r2, #33	@ 0x21
 800c18a:	5c9b      	ldrb	r3, [r3, r2]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d11a      	bne.n	800c1c6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2220      	movs	r2, #32
 800c194:	5c9b      	ldrb	r3, [r3, r2]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d109      	bne.n	800c1ae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	68da      	ldr	r2, [r3, #12]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2180      	movs	r1, #128	@ 0x80
 800c1a6:	0249      	lsls	r1, r1, #9
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	60da      	str	r2, [r3, #12]
 800c1ac:	e00b      	b.n	800c1c6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1b2:	2220      	movs	r2, #32
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1be:	2201      	movs	r2, #1
 800c1c0:	431a      	orrs	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d11f      	bne.n	800c20e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	492a      	ldr	r1, [pc, #168]	@ (800c284 <HAL_ADC_Init+0x2e4>)
 800c1da:	400a      	ands	r2, r1
 800c1dc:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	6919      	ldr	r1, [r3, #16]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c1ec:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800c1f2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	430a      	orrs	r2, r1
 800c1fa:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	691a      	ldr	r2, [r3, #16]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2101      	movs	r1, #1
 800c208:	430a      	orrs	r2, r1
 800c20a:	611a      	str	r2, [r3, #16]
 800c20c:	e00e      	b.n	800c22c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	2201      	movs	r2, #1
 800c216:	4013      	ands	r3, r2
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d107      	bne.n	800c22c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	691a      	ldr	r2, [r3, #16]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2101      	movs	r1, #1
 800c228:	438a      	bics	r2, r1
 800c22a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	695a      	ldr	r2, [r3, #20]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	2107      	movs	r1, #7
 800c238:	438a      	bics	r2, r1
 800c23a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6959      	ldr	r1, [r3, #20]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	430a      	orrs	r2, r1
 800c24c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c258:	2203      	movs	r2, #3
 800c25a:	4393      	bics	r3, r2
 800c25c:	2201      	movs	r2, #1
 800c25e:	431a      	orrs	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800c264:	2300      	movs	r3, #0
}
 800c266:	0018      	movs	r0, r3
 800c268:	46bd      	mov	sp, r7
 800c26a:	b002      	add	sp, #8
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	46c0      	nop			@ (mov r8, r8)
 800c270:	fffffefd 	.word	0xfffffefd
 800c274:	40012708 	.word	0x40012708
 800c278:	ffc3ffff 	.word	0xffc3ffff
 800c27c:	fdffffff 	.word	0xfdffffff
 800c280:	fffe0219 	.word	0xfffe0219
 800c284:	fffffc03 	.word	0xfffffc03

0800c288 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c288:	b590      	push	{r4, r7, lr}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c290:	230f      	movs	r3, #15
 800c292:	18fb      	adds	r3, r7, r3
 800c294:	2200      	movs	r2, #0
 800c296:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	2204      	movs	r2, #4
 800c2a0:	4013      	ands	r3, r2
 800c2a2:	d138      	bne.n	800c316 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2250      	movs	r2, #80	@ 0x50
 800c2a8:	5c9b      	ldrb	r3, [r3, r2]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d101      	bne.n	800c2b2 <HAL_ADC_Start+0x2a>
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	e038      	b.n	800c324 <HAL_ADC_Start+0x9c>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2250      	movs	r2, #80	@ 0x50
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	69db      	ldr	r3, [r3, #28]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d007      	beq.n	800c2d2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800c2c2:	230f      	movs	r3, #15
 800c2c4:	18fc      	adds	r4, r7, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f000 f95f 	bl	800c58c <ADC_Enable>
 800c2ce:	0003      	movs	r3, r0
 800c2d0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c2d2:	230f      	movs	r3, #15
 800c2d4:	18fb      	adds	r3, r7, r3
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d120      	bne.n	800c31e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2e0:	4a12      	ldr	r2, [pc, #72]	@ (800c32c <HAL_ADC_Start+0xa4>)
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	2280      	movs	r2, #128	@ 0x80
 800c2e6:	0052      	lsls	r2, r2, #1
 800c2e8:	431a      	orrs	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2250      	movs	r2, #80	@ 0x50
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	221c      	movs	r2, #28
 800c302:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	689a      	ldr	r2, [r3, #8]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2104      	movs	r1, #4
 800c310:	430a      	orrs	r2, r1
 800c312:	609a      	str	r2, [r3, #8]
 800c314:	e003      	b.n	800c31e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c316:	230f      	movs	r3, #15
 800c318:	18fb      	adds	r3, r7, r3
 800c31a:	2202      	movs	r2, #2
 800c31c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800c31e:	230f      	movs	r3, #15
 800c320:	18fb      	adds	r3, r7, r3
 800c322:	781b      	ldrb	r3, [r3, #0]
}
 800c324:	0018      	movs	r0, r3
 800c326:	46bd      	mov	sp, r7
 800c328:	b005      	add	sp, #20
 800c32a:	bd90      	pop	{r4, r7, pc}
 800c32c:	fffff0fe 	.word	0xfffff0fe

0800c330 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c33a:	2300      	movs	r3, #0
 800c33c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	695b      	ldr	r3, [r3, #20]
 800c346:	2b08      	cmp	r3, #8
 800c348:	d102      	bne.n	800c350 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800c34a:	2308      	movs	r3, #8
 800c34c:	60fb      	str	r3, [r7, #12]
 800c34e:	e014      	b.n	800c37a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	2201      	movs	r2, #1
 800c358:	4013      	ands	r3, r2
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d10b      	bne.n	800c376 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c362:	2220      	movs	r2, #32
 800c364:	431a      	orrs	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2250      	movs	r2, #80	@ 0x50
 800c36e:	2100      	movs	r1, #0
 800c370:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c372:	2301      	movs	r3, #1
 800c374:	e072      	b.n	800c45c <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800c376:	230c      	movs	r3, #12
 800c378:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c37a:	f7ff fdc5 	bl	800bf08 <HAL_GetTick>
 800c37e:	0003      	movs	r3, r0
 800c380:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c382:	e01f      	b.n	800c3c4 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	3301      	adds	r3, #1
 800c388:	d01c      	beq.n	800c3c4 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d007      	beq.n	800c3a0 <HAL_ADC_PollForConversion+0x70>
 800c390:	f7ff fdba 	bl	800bf08 <HAL_GetTick>
 800c394:	0002      	movs	r2, r0
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	1ad3      	subs	r3, r2, r3
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d211      	bcs.n	800c3c4 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	d10b      	bne.n	800c3c4 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3b0:	2204      	movs	r2, #4
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2250      	movs	r2, #80	@ 0x50
 800c3bc:	2100      	movs	r1, #0
 800c3be:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e04b      	b.n	800c45c <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	d0d9      	beq.n	800c384 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3d4:	2280      	movs	r2, #128	@ 0x80
 800c3d6:	0092      	lsls	r2, r2, #2
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68da      	ldr	r2, [r3, #12]
 800c3e4:	23c0      	movs	r3, #192	@ 0xc0
 800c3e6:	011b      	lsls	r3, r3, #4
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	d12e      	bne.n	800c44a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d129      	bne.n	800c44a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2208      	movs	r2, #8
 800c3fe:	4013      	ands	r3, r2
 800c400:	2b08      	cmp	r3, #8
 800c402:	d122      	bne.n	800c44a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	689b      	ldr	r3, [r3, #8]
 800c40a:	2204      	movs	r2, #4
 800c40c:	4013      	ands	r3, r2
 800c40e:	d110      	bne.n	800c432 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	685a      	ldr	r2, [r3, #4]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	210c      	movs	r1, #12
 800c41c:	438a      	bics	r2, r1
 800c41e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c424:	4a0f      	ldr	r2, [pc, #60]	@ (800c464 <HAL_ADC_PollForConversion+0x134>)
 800c426:	4013      	ands	r3, r2
 800c428:	2201      	movs	r2, #1
 800c42a:	431a      	orrs	r2, r3
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c430:	e00b      	b.n	800c44a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c436:	2220      	movs	r2, #32
 800c438:	431a      	orrs	r2, r3
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c442:	2201      	movs	r2, #1
 800c444:	431a      	orrs	r2, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d103      	bne.n	800c45a <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	220c      	movs	r2, #12
 800c458:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	0018      	movs	r0, r3
 800c45e:	46bd      	mov	sp, r7
 800c460:	b004      	add	sp, #16
 800c462:	bd80      	pop	{r7, pc}
 800c464:	fffffefe 	.word	0xfffffefe

0800c468 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c476:	0018      	movs	r0, r3
 800c478:	46bd      	mov	sp, r7
 800c47a:	b002      	add	sp, #8
 800c47c:	bd80      	pop	{r7, pc}
	...

0800c480 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2250      	movs	r2, #80	@ 0x50
 800c48e:	5c9b      	ldrb	r3, [r3, r2]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d101      	bne.n	800c498 <HAL_ADC_ConfigChannel+0x18>
 800c494:	2302      	movs	r3, #2
 800c496:	e06c      	b.n	800c572 <HAL_ADC_ConfigChannel+0xf2>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2250      	movs	r2, #80	@ 0x50
 800c49c:	2101      	movs	r1, #1
 800c49e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	2204      	movs	r2, #4
 800c4a8:	4013      	ands	r3, r2
 800c4aa:	d00b      	beq.n	800c4c4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4b0:	2220      	movs	r2, #32
 800c4b2:	431a      	orrs	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2250      	movs	r2, #80	@ 0x50
 800c4bc:	2100      	movs	r1, #0
 800c4be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	e056      	b.n	800c572 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	4a2c      	ldr	r2, [pc, #176]	@ (800c57c <HAL_ADC_ConfigChannel+0xfc>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d028      	beq.n	800c520 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	035b      	lsls	r3, r3, #13
 800c4da:	0b5a      	lsrs	r2, r3, #13
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	2380      	movs	r3, #128	@ 0x80
 800c4ea:	02db      	lsls	r3, r3, #11
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	d009      	beq.n	800c504 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800c4f0:	4b23      	ldr	r3, [pc, #140]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	4b22      	ldr	r3, [pc, #136]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c4f6:	2180      	movs	r1, #128	@ 0x80
 800c4f8:	0409      	lsls	r1, r1, #16
 800c4fa:	430a      	orrs	r2, r1
 800c4fc:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800c4fe:	200a      	movs	r0, #10
 800c500:	f000 f8ac 	bl	800c65c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	2380      	movs	r3, #128	@ 0x80
 800c50a:	029b      	lsls	r3, r3, #10
 800c50c:	4013      	ands	r3, r2
 800c50e:	d02b      	beq.n	800c568 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800c510:	4b1b      	ldr	r3, [pc, #108]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	4b1a      	ldr	r3, [pc, #104]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c516:	2180      	movs	r1, #128	@ 0x80
 800c518:	03c9      	lsls	r1, r1, #15
 800c51a:	430a      	orrs	r2, r1
 800c51c:	601a      	str	r2, [r3, #0]
 800c51e:	e023      	b.n	800c568 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	035b      	lsls	r3, r3, #13
 800c52c:	0b5b      	lsrs	r3, r3, #13
 800c52e:	43d9      	mvns	r1, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	400a      	ands	r2, r1
 800c536:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	2380      	movs	r3, #128	@ 0x80
 800c53e:	02db      	lsls	r3, r3, #11
 800c540:	4013      	ands	r3, r2
 800c542:	d005      	beq.n	800c550 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800c544:	4b0e      	ldr	r3, [pc, #56]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	4b0d      	ldr	r3, [pc, #52]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c54a:	490e      	ldr	r1, [pc, #56]	@ (800c584 <HAL_ADC_ConfigChannel+0x104>)
 800c54c:	400a      	ands	r2, r1
 800c54e:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	2380      	movs	r3, #128	@ 0x80
 800c556:	029b      	lsls	r3, r3, #10
 800c558:	4013      	ands	r3, r2
 800c55a:	d005      	beq.n	800c568 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800c55c:	4b08      	ldr	r3, [pc, #32]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	4b07      	ldr	r3, [pc, #28]	@ (800c580 <HAL_ADC_ConfigChannel+0x100>)
 800c562:	4909      	ldr	r1, [pc, #36]	@ (800c588 <HAL_ADC_ConfigChannel+0x108>)
 800c564:	400a      	ands	r2, r1
 800c566:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2250      	movs	r2, #80	@ 0x50
 800c56c:	2100      	movs	r1, #0
 800c56e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	0018      	movs	r0, r3
 800c574:	46bd      	mov	sp, r7
 800c576:	b002      	add	sp, #8
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	46c0      	nop			@ (mov r8, r8)
 800c57c:	00001001 	.word	0x00001001
 800c580:	40012708 	.word	0x40012708
 800c584:	ff7fffff 	.word	0xff7fffff
 800c588:	ffbfffff 	.word	0xffbfffff

0800c58c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c594:	2300      	movs	r3, #0
 800c596:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	689b      	ldr	r3, [r3, #8]
 800c59e:	2203      	movs	r2, #3
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d108      	bne.n	800c5b8 <ADC_Enable+0x2c>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d101      	bne.n	800c5b8 <ADC_Enable+0x2c>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e000      	b.n	800c5ba <ADC_Enable+0x2e>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d146      	bne.n	800c64c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	4a24      	ldr	r2, [pc, #144]	@ (800c658 <ADC_Enable+0xcc>)
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	d00d      	beq.n	800c5e6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ce:	2210      	movs	r2, #16
 800c5d0:	431a      	orrs	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5da:	2201      	movs	r2, #1
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e033      	b.n	800c64e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	689a      	ldr	r2, [r3, #8]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	f000 f830 	bl	800c65c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800c5fc:	f7ff fc84 	bl	800bf08 <HAL_GetTick>
 800c600:	0003      	movs	r3, r0
 800c602:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c604:	e01b      	b.n	800c63e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c606:	f7ff fc7f 	bl	800bf08 <HAL_GetTick>
 800c60a:	0002      	movs	r2, r0
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	2b0a      	cmp	r3, #10
 800c612:	d914      	bls.n	800c63e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2201      	movs	r2, #1
 800c61c:	4013      	ands	r3, r2
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d00d      	beq.n	800c63e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c626:	2210      	movs	r2, #16
 800c628:	431a      	orrs	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c632:	2201      	movs	r2, #1
 800c634:	431a      	orrs	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	e007      	b.n	800c64e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2201      	movs	r2, #1
 800c646:	4013      	ands	r3, r2
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d1dc      	bne.n	800c606 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	0018      	movs	r0, r3
 800c650:	46bd      	mov	sp, r7
 800c652:	b004      	add	sp, #16
 800c654:	bd80      	pop	{r7, pc}
 800c656:	46c0      	nop			@ (mov r8, r8)
 800c658:	80000017 	.word	0x80000017

0800c65c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b084      	sub	sp, #16
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c664:	4b0b      	ldr	r3, [pc, #44]	@ (800c694 <ADC_DelayMicroSecond+0x38>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	490b      	ldr	r1, [pc, #44]	@ (800c698 <ADC_DelayMicroSecond+0x3c>)
 800c66a:	0018      	movs	r0, r3
 800c66c:	f7f3 fd9a 	bl	80001a4 <__udivsi3>
 800c670:	0003      	movs	r3, r0
 800c672:	001a      	movs	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4353      	muls	r3, r2
 800c678:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800c67a:	e002      	b.n	800c682 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	3b01      	subs	r3, #1
 800c680:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1f9      	bne.n	800c67c <ADC_DelayMicroSecond+0x20>
  }
}
 800c688:	46c0      	nop			@ (mov r8, r8)
 800c68a:	46c0      	nop			@ (mov r8, r8)
 800c68c:	46bd      	mov	sp, r7
 800c68e:	b004      	add	sp, #16
 800c690:	bd80      	pop	{r7, pc}
 800c692:	46c0      	nop			@ (mov r8, r8)
 800c694:	200000c4 	.word	0x200000c4
 800c698:	000f4240 	.word	0x000f4240

0800c69c <__NVIC_EnableIRQ>:
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	0002      	movs	r2, r0
 800c6a4:	1dfb      	adds	r3, r7, #7
 800c6a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c6a8:	1dfb      	adds	r3, r7, #7
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6ae:	d809      	bhi.n	800c6c4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c6b0:	1dfb      	adds	r3, r7, #7
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	001a      	movs	r2, r3
 800c6b6:	231f      	movs	r3, #31
 800c6b8:	401a      	ands	r2, r3
 800c6ba:	4b04      	ldr	r3, [pc, #16]	@ (800c6cc <__NVIC_EnableIRQ+0x30>)
 800c6bc:	2101      	movs	r1, #1
 800c6be:	4091      	lsls	r1, r2
 800c6c0:	000a      	movs	r2, r1
 800c6c2:	601a      	str	r2, [r3, #0]
}
 800c6c4:	46c0      	nop			@ (mov r8, r8)
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	b002      	add	sp, #8
 800c6ca:	bd80      	pop	{r7, pc}
 800c6cc:	e000e100 	.word	0xe000e100

0800c6d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c6d0:	b590      	push	{r4, r7, lr}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	0002      	movs	r2, r0
 800c6d8:	6039      	str	r1, [r7, #0]
 800c6da:	1dfb      	adds	r3, r7, #7
 800c6dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c6de:	1dfb      	adds	r3, r7, #7
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6e4:	d828      	bhi.n	800c738 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c6e6:	4a2f      	ldr	r2, [pc, #188]	@ (800c7a4 <__NVIC_SetPriority+0xd4>)
 800c6e8:	1dfb      	adds	r3, r7, #7
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	b25b      	sxtb	r3, r3
 800c6ee:	089b      	lsrs	r3, r3, #2
 800c6f0:	33c0      	adds	r3, #192	@ 0xc0
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	589b      	ldr	r3, [r3, r2]
 800c6f6:	1dfa      	adds	r2, r7, #7
 800c6f8:	7812      	ldrb	r2, [r2, #0]
 800c6fa:	0011      	movs	r1, r2
 800c6fc:	2203      	movs	r2, #3
 800c6fe:	400a      	ands	r2, r1
 800c700:	00d2      	lsls	r2, r2, #3
 800c702:	21ff      	movs	r1, #255	@ 0xff
 800c704:	4091      	lsls	r1, r2
 800c706:	000a      	movs	r2, r1
 800c708:	43d2      	mvns	r2, r2
 800c70a:	401a      	ands	r2, r3
 800c70c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	019b      	lsls	r3, r3, #6
 800c712:	22ff      	movs	r2, #255	@ 0xff
 800c714:	401a      	ands	r2, r3
 800c716:	1dfb      	adds	r3, r7, #7
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	0018      	movs	r0, r3
 800c71c:	2303      	movs	r3, #3
 800c71e:	4003      	ands	r3, r0
 800c720:	00db      	lsls	r3, r3, #3
 800c722:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c724:	481f      	ldr	r0, [pc, #124]	@ (800c7a4 <__NVIC_SetPriority+0xd4>)
 800c726:	1dfb      	adds	r3, r7, #7
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	b25b      	sxtb	r3, r3
 800c72c:	089b      	lsrs	r3, r3, #2
 800c72e:	430a      	orrs	r2, r1
 800c730:	33c0      	adds	r3, #192	@ 0xc0
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800c736:	e031      	b.n	800c79c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c738:	4a1b      	ldr	r2, [pc, #108]	@ (800c7a8 <__NVIC_SetPriority+0xd8>)
 800c73a:	1dfb      	adds	r3, r7, #7
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	0019      	movs	r1, r3
 800c740:	230f      	movs	r3, #15
 800c742:	400b      	ands	r3, r1
 800c744:	3b08      	subs	r3, #8
 800c746:	089b      	lsrs	r3, r3, #2
 800c748:	3306      	adds	r3, #6
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	18d3      	adds	r3, r2, r3
 800c74e:	3304      	adds	r3, #4
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	1dfa      	adds	r2, r7, #7
 800c754:	7812      	ldrb	r2, [r2, #0]
 800c756:	0011      	movs	r1, r2
 800c758:	2203      	movs	r2, #3
 800c75a:	400a      	ands	r2, r1
 800c75c:	00d2      	lsls	r2, r2, #3
 800c75e:	21ff      	movs	r1, #255	@ 0xff
 800c760:	4091      	lsls	r1, r2
 800c762:	000a      	movs	r2, r1
 800c764:	43d2      	mvns	r2, r2
 800c766:	401a      	ands	r2, r3
 800c768:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	019b      	lsls	r3, r3, #6
 800c76e:	22ff      	movs	r2, #255	@ 0xff
 800c770:	401a      	ands	r2, r3
 800c772:	1dfb      	adds	r3, r7, #7
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	0018      	movs	r0, r3
 800c778:	2303      	movs	r3, #3
 800c77a:	4003      	ands	r3, r0
 800c77c:	00db      	lsls	r3, r3, #3
 800c77e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c780:	4809      	ldr	r0, [pc, #36]	@ (800c7a8 <__NVIC_SetPriority+0xd8>)
 800c782:	1dfb      	adds	r3, r7, #7
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	001c      	movs	r4, r3
 800c788:	230f      	movs	r3, #15
 800c78a:	4023      	ands	r3, r4
 800c78c:	3b08      	subs	r3, #8
 800c78e:	089b      	lsrs	r3, r3, #2
 800c790:	430a      	orrs	r2, r1
 800c792:	3306      	adds	r3, #6
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	18c3      	adds	r3, r0, r3
 800c798:	3304      	adds	r3, #4
 800c79a:	601a      	str	r2, [r3, #0]
}
 800c79c:	46c0      	nop			@ (mov r8, r8)
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	b003      	add	sp, #12
 800c7a2:	bd90      	pop	{r4, r7, pc}
 800c7a4:	e000e100 	.word	0xe000e100
 800c7a8:	e000ed00 	.word	0xe000ed00

0800c7ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	1e5a      	subs	r2, r3, #1
 800c7b8:	2380      	movs	r3, #128	@ 0x80
 800c7ba:	045b      	lsls	r3, r3, #17
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d301      	bcc.n	800c7c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e010      	b.n	800c7e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c7f0 <SysTick_Config+0x44>)
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	3a01      	subs	r2, #1
 800c7ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	425b      	negs	r3, r3
 800c7d0:	2103      	movs	r1, #3
 800c7d2:	0018      	movs	r0, r3
 800c7d4:	f7ff ff7c 	bl	800c6d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c7d8:	4b05      	ldr	r3, [pc, #20]	@ (800c7f0 <SysTick_Config+0x44>)
 800c7da:	2200      	movs	r2, #0
 800c7dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c7de:	4b04      	ldr	r3, [pc, #16]	@ (800c7f0 <SysTick_Config+0x44>)
 800c7e0:	2207      	movs	r2, #7
 800c7e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	0018      	movs	r0, r3
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	b002      	add	sp, #8
 800c7ec:	bd80      	pop	{r7, pc}
 800c7ee:	46c0      	nop			@ (mov r8, r8)
 800c7f0:	e000e010 	.word	0xe000e010

0800c7f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
 800c7fe:	210f      	movs	r1, #15
 800c800:	187b      	adds	r3, r7, r1
 800c802:	1c02      	adds	r2, r0, #0
 800c804:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	187b      	adds	r3, r7, r1
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	b25b      	sxtb	r3, r3
 800c80e:	0011      	movs	r1, r2
 800c810:	0018      	movs	r0, r3
 800c812:	f7ff ff5d 	bl	800c6d0 <__NVIC_SetPriority>
}
 800c816:	46c0      	nop			@ (mov r8, r8)
 800c818:	46bd      	mov	sp, r7
 800c81a:	b004      	add	sp, #16
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b082      	sub	sp, #8
 800c822:	af00      	add	r7, sp, #0
 800c824:	0002      	movs	r2, r0
 800c826:	1dfb      	adds	r3, r7, #7
 800c828:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c82a:	1dfb      	adds	r3, r7, #7
 800c82c:	781b      	ldrb	r3, [r3, #0]
 800c82e:	b25b      	sxtb	r3, r3
 800c830:	0018      	movs	r0, r3
 800c832:	f7ff ff33 	bl	800c69c <__NVIC_EnableIRQ>
}
 800c836:	46c0      	nop			@ (mov r8, r8)
 800c838:	46bd      	mov	sp, r7
 800c83a:	b002      	add	sp, #8
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b082      	sub	sp, #8
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	0018      	movs	r0, r3
 800c84a:	f7ff ffaf 	bl	800c7ac <SysTick_Config>
 800c84e:	0003      	movs	r3, r0
}
 800c850:	0018      	movs	r0, r3
 800c852:	46bd      	mov	sp, r7
 800c854:	b002      	add	sp, #8
 800c856:	bd80      	pop	{r7, pc}

0800c858 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d101      	bne.n	800c86a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e061      	b.n	800c92e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a32      	ldr	r2, [pc, #200]	@ (800c938 <HAL_DMA_Init+0xe0>)
 800c870:	4694      	mov	ip, r2
 800c872:	4463      	add	r3, ip
 800c874:	2114      	movs	r1, #20
 800c876:	0018      	movs	r0, r3
 800c878:	f7f3 fc94 	bl	80001a4 <__udivsi3>
 800c87c:	0003      	movs	r3, r0
 800c87e:	009a      	lsls	r2, r3, #2
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	4a2d      	ldr	r2, [pc, #180]	@ (800c93c <HAL_DMA_Init+0xe4>)
 800c888:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2225      	movs	r2, #37	@ 0x25
 800c88e:	2102      	movs	r1, #2
 800c890:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	4a28      	ldr	r2, [pc, #160]	@ (800c940 <HAL_DMA_Init+0xe8>)
 800c89e:	4013      	ands	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c8aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	691b      	ldr	r3, [r3, #16]
 800c8b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c8b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	699b      	ldr	r3, [r3, #24]
 800c8bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c8c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6a1b      	ldr	r3, [r3, #32]
 800c8c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	689a      	ldr	r2, [r3, #8]
 800c8dc:	2380      	movs	r3, #128	@ 0x80
 800c8de:	01db      	lsls	r3, r3, #7
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d018      	beq.n	800c916 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c8e4:	4b17      	ldr	r3, [pc, #92]	@ (800c944 <HAL_DMA_Init+0xec>)
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ec:	211c      	movs	r1, #28
 800c8ee:	400b      	ands	r3, r1
 800c8f0:	210f      	movs	r1, #15
 800c8f2:	4099      	lsls	r1, r3
 800c8f4:	000b      	movs	r3, r1
 800c8f6:	43d9      	mvns	r1, r3
 800c8f8:	4b12      	ldr	r3, [pc, #72]	@ (800c944 <HAL_DMA_Init+0xec>)
 800c8fa:	400a      	ands	r2, r1
 800c8fc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c8fe:	4b11      	ldr	r3, [pc, #68]	@ (800c944 <HAL_DMA_Init+0xec>)
 800c900:	6819      	ldr	r1, [r3, #0]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	685a      	ldr	r2, [r3, #4]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c90a:	201c      	movs	r0, #28
 800c90c:	4003      	ands	r3, r0
 800c90e:	409a      	lsls	r2, r3
 800c910:	4b0c      	ldr	r3, [pc, #48]	@ (800c944 <HAL_DMA_Init+0xec>)
 800c912:	430a      	orrs	r2, r1
 800c914:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2200      	movs	r2, #0
 800c91a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2225      	movs	r2, #37	@ 0x25
 800c920:	2101      	movs	r1, #1
 800c922:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2224      	movs	r2, #36	@ 0x24
 800c928:	2100      	movs	r1, #0
 800c92a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c92c:	2300      	movs	r3, #0
}
 800c92e:	0018      	movs	r0, r3
 800c930:	46bd      	mov	sp, r7
 800c932:	b004      	add	sp, #16
 800c934:	bd80      	pop	{r7, pc}
 800c936:	46c0      	nop			@ (mov r8, r8)
 800c938:	bffdfff8 	.word	0xbffdfff8
 800c93c:	40020000 	.word	0x40020000
 800c940:	ffff800f 	.word	0xffff800f
 800c944:	400200a8 	.word	0x400200a8

0800c948 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b086      	sub	sp, #24
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
 800c954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c956:	2317      	movs	r3, #23
 800c958:	18fb      	adds	r3, r7, r3
 800c95a:	2200      	movs	r2, #0
 800c95c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2224      	movs	r2, #36	@ 0x24
 800c962:	5c9b      	ldrb	r3, [r3, r2]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d101      	bne.n	800c96c <HAL_DMA_Start_IT+0x24>
 800c968:	2302      	movs	r3, #2
 800c96a:	e04f      	b.n	800ca0c <HAL_DMA_Start_IT+0xc4>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2224      	movs	r2, #36	@ 0x24
 800c970:	2101      	movs	r1, #1
 800c972:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2225      	movs	r2, #37	@ 0x25
 800c978:	5c9b      	ldrb	r3, [r3, r2]
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d13a      	bne.n	800c9f6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2225      	movs	r2, #37	@ 0x25
 800c984:	2102      	movs	r1, #2
 800c986:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	2101      	movs	r1, #1
 800c99a:	438a      	bics	r2, r1
 800c99c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	68b9      	ldr	r1, [r7, #8]
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f000 f976 	bl	800cc96 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d008      	beq.n	800c9c4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	681a      	ldr	r2, [r3, #0]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	210e      	movs	r1, #14
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	601a      	str	r2, [r3, #0]
 800c9c2:	e00f      	b.n	800c9e4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2104      	movs	r1, #4
 800c9d0:	438a      	bics	r2, r1
 800c9d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	210a      	movs	r1, #10
 800c9e0:	430a      	orrs	r2, r1
 800c9e2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	601a      	str	r2, [r3, #0]
 800c9f4:	e007      	b.n	800ca06 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2224      	movs	r2, #36	@ 0x24
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800c9fe:	2317      	movs	r3, #23
 800ca00:	18fb      	adds	r3, r7, r3
 800ca02:	2202      	movs	r2, #2
 800ca04:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800ca06:	2317      	movs	r3, #23
 800ca08:	18fb      	adds	r3, r7, r3
 800ca0a:	781b      	ldrb	r3, [r3, #0]
}
 800ca0c:	0018      	movs	r0, r3
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	b006      	add	sp, #24
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca1c:	230f      	movs	r3, #15
 800ca1e:	18fb      	adds	r3, r7, r3
 800ca20:	2200      	movs	r2, #0
 800ca22:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2225      	movs	r2, #37	@ 0x25
 800ca28:	5c9b      	ldrb	r3, [r3, r2]
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d008      	beq.n	800ca42 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2204      	movs	r2, #4
 800ca34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2224      	movs	r2, #36	@ 0x24
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e024      	b.n	800ca8c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	681a      	ldr	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	210e      	movs	r1, #14
 800ca4e:	438a      	bics	r2, r1
 800ca50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	681a      	ldr	r2, [r3, #0]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2101      	movs	r1, #1
 800ca5e:	438a      	bics	r2, r1
 800ca60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca66:	221c      	movs	r2, #28
 800ca68:	401a      	ands	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca6e:	2101      	movs	r1, #1
 800ca70:	4091      	lsls	r1, r2
 800ca72:	000a      	movs	r2, r1
 800ca74:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2225      	movs	r2, #37	@ 0x25
 800ca7a:	2101      	movs	r1, #1
 800ca7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2224      	movs	r2, #36	@ 0x24
 800ca82:	2100      	movs	r1, #0
 800ca84:	5499      	strb	r1, [r3, r2]

    return status;
 800ca86:	230f      	movs	r3, #15
 800ca88:	18fb      	adds	r3, r7, r3
 800ca8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ca8c:	0018      	movs	r0, r3
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	b004      	add	sp, #16
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca9c:	210f      	movs	r1, #15
 800ca9e:	187b      	adds	r3, r7, r1
 800caa0:	2200      	movs	r2, #0
 800caa2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2225      	movs	r2, #37	@ 0x25
 800caa8:	5c9b      	ldrb	r3, [r3, r2]
 800caaa:	b2db      	uxtb	r3, r3
 800caac:	2b02      	cmp	r3, #2
 800caae:	d006      	beq.n	800cabe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2204      	movs	r2, #4
 800cab4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800cab6:	187b      	adds	r3, r7, r1
 800cab8:	2201      	movs	r2, #1
 800caba:	701a      	strb	r2, [r3, #0]
 800cabc:	e02a      	b.n	800cb14 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	681a      	ldr	r2, [r3, #0]
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	210e      	movs	r1, #14
 800caca:	438a      	bics	r2, r1
 800cacc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	2101      	movs	r1, #1
 800cada:	438a      	bics	r2, r1
 800cadc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cae2:	221c      	movs	r2, #28
 800cae4:	401a      	ands	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caea:	2101      	movs	r1, #1
 800caec:	4091      	lsls	r1, r2
 800caee:	000a      	movs	r2, r1
 800caf0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2225      	movs	r2, #37	@ 0x25
 800caf6:	2101      	movs	r1, #1
 800caf8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2224      	movs	r2, #36	@ 0x24
 800cafe:	2100      	movs	r1, #0
 800cb00:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d004      	beq.n	800cb14 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb0e:	687a      	ldr	r2, [r7, #4]
 800cb10:	0010      	movs	r0, r2
 800cb12:	4798      	blx	r3
    }
  }
  return status;
 800cb14:	230f      	movs	r3, #15
 800cb16:	18fb      	adds	r3, r7, r3
 800cb18:	781b      	ldrb	r3, [r3, #0]
}
 800cb1a:	0018      	movs	r0, r3
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	b004      	add	sp, #16
 800cb20:	bd80      	pop	{r7, pc}

0800cb22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cb22:	b580      	push	{r7, lr}
 800cb24:	b084      	sub	sp, #16
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb3e:	221c      	movs	r2, #28
 800cb40:	4013      	ands	r3, r2
 800cb42:	2204      	movs	r2, #4
 800cb44:	409a      	lsls	r2, r3
 800cb46:	0013      	movs	r3, r2
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	d026      	beq.n	800cb9c <HAL_DMA_IRQHandler+0x7a>
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	2204      	movs	r2, #4
 800cb52:	4013      	ands	r3, r2
 800cb54:	d022      	beq.n	800cb9c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2220      	movs	r2, #32
 800cb5e:	4013      	ands	r3, r2
 800cb60:	d107      	bne.n	800cb72 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681a      	ldr	r2, [r3, #0]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2104      	movs	r1, #4
 800cb6e:	438a      	bics	r2, r1
 800cb70:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb76:	221c      	movs	r2, #28
 800cb78:	401a      	ands	r2, r3
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb7e:	2104      	movs	r1, #4
 800cb80:	4091      	lsls	r1, r2
 800cb82:	000a      	movs	r2, r1
 800cb84:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d100      	bne.n	800cb90 <HAL_DMA_IRQHandler+0x6e>
 800cb8e:	e071      	b.n	800cc74 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	0010      	movs	r0, r2
 800cb98:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800cb9a:	e06b      	b.n	800cc74 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cba0:	221c      	movs	r2, #28
 800cba2:	4013      	ands	r3, r2
 800cba4:	2202      	movs	r2, #2
 800cba6:	409a      	lsls	r2, r3
 800cba8:	0013      	movs	r3, r2
 800cbaa:	68fa      	ldr	r2, [r7, #12]
 800cbac:	4013      	ands	r3, r2
 800cbae:	d02d      	beq.n	800cc0c <HAL_DMA_IRQHandler+0xea>
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	d029      	beq.n	800cc0c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2220      	movs	r2, #32
 800cbc0:	4013      	ands	r3, r2
 800cbc2:	d10b      	bne.n	800cbdc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681a      	ldr	r2, [r3, #0]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	210a      	movs	r1, #10
 800cbd0:	438a      	bics	r2, r1
 800cbd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2225      	movs	r2, #37	@ 0x25
 800cbd8:	2101      	movs	r1, #1
 800cbda:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbe0:	221c      	movs	r2, #28
 800cbe2:	401a      	ands	r2, r3
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbe8:	2102      	movs	r1, #2
 800cbea:	4091      	lsls	r1, r2
 800cbec:	000a      	movs	r2, r1
 800cbee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2224      	movs	r2, #36	@ 0x24
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d039      	beq.n	800cc74 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	0010      	movs	r0, r2
 800cc08:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cc0a:	e033      	b.n	800cc74 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc10:	221c      	movs	r2, #28
 800cc12:	4013      	ands	r3, r2
 800cc14:	2208      	movs	r2, #8
 800cc16:	409a      	lsls	r2, r3
 800cc18:	0013      	movs	r3, r2
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	d02a      	beq.n	800cc76 <HAL_DMA_IRQHandler+0x154>
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2208      	movs	r2, #8
 800cc24:	4013      	ands	r3, r2
 800cc26:	d026      	beq.n	800cc76 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	210e      	movs	r1, #14
 800cc34:	438a      	bics	r2, r1
 800cc36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc3c:	221c      	movs	r2, #28
 800cc3e:	401a      	ands	r2, r3
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc44:	2101      	movs	r1, #1
 800cc46:	4091      	lsls	r1, r2
 800cc48:	000a      	movs	r2, r1
 800cc4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2225      	movs	r2, #37	@ 0x25
 800cc56:	2101      	movs	r1, #1
 800cc58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2224      	movs	r2, #36	@ 0x24
 800cc5e:	2100      	movs	r1, #0
 800cc60:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d005      	beq.n	800cc76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	0010      	movs	r0, r2
 800cc72:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cc74:	46c0      	nop			@ (mov r8, r8)
 800cc76:	46c0      	nop			@ (mov r8, r8)
}
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	b004      	add	sp, #16
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b082      	sub	sp, #8
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2225      	movs	r2, #37	@ 0x25
 800cc8a:	5c9b      	ldrb	r3, [r3, r2]
 800cc8c:	b2db      	uxtb	r3, r3
}
 800cc8e:	0018      	movs	r0, r3
 800cc90:	46bd      	mov	sp, r7
 800cc92:	b002      	add	sp, #8
 800cc94:	bd80      	pop	{r7, pc}

0800cc96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cc96:	b580      	push	{r7, lr}
 800cc98:	b084      	sub	sp, #16
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	60f8      	str	r0, [r7, #12]
 800cc9e:	60b9      	str	r1, [r7, #8]
 800cca0:	607a      	str	r2, [r7, #4]
 800cca2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cca8:	221c      	movs	r2, #28
 800ccaa:	401a      	ands	r2, r3
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	4091      	lsls	r1, r2
 800ccb4:	000a      	movs	r2, r1
 800ccb6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	689b      	ldr	r3, [r3, #8]
 800ccc4:	2b10      	cmp	r3, #16
 800ccc6:	d108      	bne.n	800ccda <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ccd8:	e007      	b.n	800ccea <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	60da      	str	r2, [r3, #12]
}
 800ccea:	46c0      	nop			@ (mov r8, r8)
 800ccec:	46bd      	mov	sp, r7
 800ccee:	b004      	add	sp, #16
 800ccf0:	bd80      	pop	{r7, pc}
	...

0800ccf4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800ccfc:	f7ff f904 	bl	800bf08 <HAL_GetTick>
 800cd00:	0003      	movs	r3, r0
 800cd02:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cd04:	e00f      	b.n	800cd26 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	d00c      	beq.n	800cd26 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d007      	beq.n	800cd22 <FLASH_WaitForLastOperation+0x2e>
 800cd12:	f7ff f8f9 	bl	800bf08 <HAL_GetTick>
 800cd16:	0002      	movs	r2, r0
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	1ad3      	subs	r3, r2, r3
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d201      	bcs.n	800cd26 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800cd22:	2303      	movs	r3, #3
 800cd24:	e052      	b.n	800cdcc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cd26:	4b2b      	ldr	r3, [pc, #172]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	2201      	movs	r2, #1
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d0e9      	beq.n	800cd06 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cd32:	4b28      	ldr	r3, [pc, #160]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	2202      	movs	r2, #2
 800cd38:	4013      	ands	r3, r2
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d102      	bne.n	800cd44 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cd3e:	4b25      	ldr	r3, [pc, #148]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd40:	2202      	movs	r2, #2
 800cd42:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800cd44:	4b23      	ldr	r3, [pc, #140]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd46:	699a      	ldr	r2, [r3, #24]
 800cd48:	2380      	movs	r3, #128	@ 0x80
 800cd4a:	005b      	lsls	r3, r3, #1
 800cd4c:	401a      	ands	r2, r3
 800cd4e:	2380      	movs	r3, #128	@ 0x80
 800cd50:	005b      	lsls	r3, r3, #1
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d035      	beq.n	800cdc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800cd56:	4b1f      	ldr	r3, [pc, #124]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd58:	699a      	ldr	r2, [r3, #24]
 800cd5a:	2380      	movs	r3, #128	@ 0x80
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800cd60:	2380      	movs	r3, #128	@ 0x80
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d02c      	beq.n	800cdc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800cd68:	4b1a      	ldr	r3, [pc, #104]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd6a:	699a      	ldr	r2, [r3, #24]
 800cd6c:	2380      	movs	r3, #128	@ 0x80
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800cd72:	2380      	movs	r3, #128	@ 0x80
 800cd74:	00db      	lsls	r3, r3, #3
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d023      	beq.n	800cdc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800cd7a:	4b16      	ldr	r3, [pc, #88]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd7c:	699a      	ldr	r2, [r3, #24]
 800cd7e:	2380      	movs	r3, #128	@ 0x80
 800cd80:	011b      	lsls	r3, r3, #4
 800cd82:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800cd84:	2380      	movs	r3, #128	@ 0x80
 800cd86:	011b      	lsls	r3, r3, #4
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d01a      	beq.n	800cdc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800cd8c:	4b11      	ldr	r3, [pc, #68]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cd8e:	699a      	ldr	r2, [r3, #24]
 800cd90:	2380      	movs	r3, #128	@ 0x80
 800cd92:	019b      	lsls	r3, r3, #6
 800cd94:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800cd96:	2380      	movs	r3, #128	@ 0x80
 800cd98:	019b      	lsls	r3, r3, #6
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d011      	beq.n	800cdc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800cd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cda0:	699a      	ldr	r2, [r3, #24]
 800cda2:	2380      	movs	r3, #128	@ 0x80
 800cda4:	029b      	lsls	r3, r3, #10
 800cda6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800cda8:	2380      	movs	r3, #128	@ 0x80
 800cdaa:	029b      	lsls	r3, r3, #10
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d008      	beq.n	800cdc2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800cdb0:	4b08      	ldr	r3, [pc, #32]	@ (800cdd4 <FLASH_WaitForLastOperation+0xe0>)
 800cdb2:	699a      	ldr	r2, [r3, #24]
 800cdb4:	2380      	movs	r3, #128	@ 0x80
 800cdb6:	025b      	lsls	r3, r3, #9
 800cdb8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800cdba:	2380      	movs	r3, #128	@ 0x80
 800cdbc:	025b      	lsls	r3, r3, #9
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d103      	bne.n	800cdca <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800cdc2:	f000 f809 	bl	800cdd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e000      	b.n	800cdcc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	0018      	movs	r0, r3
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	b004      	add	sp, #16
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	40022000 	.word	0x40022000

0800cdd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cde2:	4b49      	ldr	r3, [pc, #292]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800cde4:	699a      	ldr	r2, [r3, #24]
 800cde6:	2380      	movs	r3, #128	@ 0x80
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	401a      	ands	r2, r3
 800cdec:	2380      	movs	r3, #128	@ 0x80
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d10a      	bne.n	800ce0a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cdf4:	4b45      	ldr	r3, [pc, #276]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800cdf6:	695b      	ldr	r3, [r3, #20]
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	4b43      	ldr	r3, [pc, #268]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800cdfe:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2280      	movs	r2, #128	@ 0x80
 800ce04:	0052      	lsls	r2, r2, #1
 800ce06:	4313      	orrs	r3, r2
 800ce08:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800ce0a:	4b3f      	ldr	r3, [pc, #252]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800ce0c:	699a      	ldr	r2, [r3, #24]
 800ce0e:	2380      	movs	r3, #128	@ 0x80
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	401a      	ands	r2, r3
 800ce14:	2380      	movs	r3, #128	@ 0x80
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d10a      	bne.n	800ce32 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ce1c:	4b3b      	ldr	r3, [pc, #236]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce1e:	695b      	ldr	r3, [r3, #20]
 800ce20:	2201      	movs	r2, #1
 800ce22:	431a      	orrs	r2, r3
 800ce24:	4b39      	ldr	r3, [pc, #228]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce26:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2280      	movs	r2, #128	@ 0x80
 800ce2c:	0092      	lsls	r2, r2, #2
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800ce32:	4b35      	ldr	r3, [pc, #212]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800ce34:	699a      	ldr	r2, [r3, #24]
 800ce36:	2380      	movs	r3, #128	@ 0x80
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	401a      	ands	r2, r3
 800ce3c:	2380      	movs	r3, #128	@ 0x80
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d10a      	bne.n	800ce5a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800ce44:	4b31      	ldr	r3, [pc, #196]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	2208      	movs	r2, #8
 800ce4a:	431a      	orrs	r2, r3
 800ce4c:	4b2f      	ldr	r3, [pc, #188]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce4e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2280      	movs	r2, #128	@ 0x80
 800ce54:	00d2      	lsls	r2, r2, #3
 800ce56:	4313      	orrs	r3, r2
 800ce58:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800ce5a:	4b2b      	ldr	r3, [pc, #172]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800ce5c:	699a      	ldr	r2, [r3, #24]
 800ce5e:	2380      	movs	r3, #128	@ 0x80
 800ce60:	011b      	lsls	r3, r3, #4
 800ce62:	401a      	ands	r2, r3
 800ce64:	2380      	movs	r3, #128	@ 0x80
 800ce66:	011b      	lsls	r3, r3, #4
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d10a      	bne.n	800ce82 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800ce6c:	4b27      	ldr	r3, [pc, #156]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	2204      	movs	r2, #4
 800ce72:	431a      	orrs	r2, r3
 800ce74:	4b25      	ldr	r3, [pc, #148]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce76:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2280      	movs	r2, #128	@ 0x80
 800ce7c:	0112      	lsls	r2, r2, #4
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800ce82:	4b21      	ldr	r3, [pc, #132]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800ce84:	699a      	ldr	r2, [r3, #24]
 800ce86:	2380      	movs	r3, #128	@ 0x80
 800ce88:	019b      	lsls	r3, r3, #6
 800ce8a:	401a      	ands	r2, r3
 800ce8c:	2380      	movs	r3, #128	@ 0x80
 800ce8e:	019b      	lsls	r3, r3, #6
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d10a      	bne.n	800ceaa <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ce94:	4b1d      	ldr	r3, [pc, #116]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	2210      	movs	r2, #16
 800ce9a:	431a      	orrs	r2, r3
 800ce9c:	4b1b      	ldr	r3, [pc, #108]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ce9e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2280      	movs	r2, #128	@ 0x80
 800cea4:	0192      	lsls	r2, r2, #6
 800cea6:	4313      	orrs	r3, r2
 800cea8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800ceaa:	4b17      	ldr	r3, [pc, #92]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800ceac:	699a      	ldr	r2, [r3, #24]
 800ceae:	2380      	movs	r3, #128	@ 0x80
 800ceb0:	029b      	lsls	r3, r3, #10
 800ceb2:	401a      	ands	r2, r3
 800ceb4:	2380      	movs	r3, #128	@ 0x80
 800ceb6:	029b      	lsls	r3, r3, #10
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d109      	bne.n	800ced0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800cebc:	4b13      	ldr	r3, [pc, #76]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	2220      	movs	r2, #32
 800cec2:	431a      	orrs	r2, r3
 800cec4:	4b11      	ldr	r3, [pc, #68]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800cec6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2220      	movs	r2, #32
 800cecc:	4313      	orrs	r3, r2
 800cece:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800ced0:	4b0d      	ldr	r3, [pc, #52]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800ced2:	699a      	ldr	r2, [r3, #24]
 800ced4:	2380      	movs	r3, #128	@ 0x80
 800ced6:	025b      	lsls	r3, r3, #9
 800ced8:	401a      	ands	r2, r3
 800ceda:	2380      	movs	r3, #128	@ 0x80
 800cedc:	025b      	lsls	r3, r3, #9
 800cede:	429a      	cmp	r2, r3
 800cee0:	d10a      	bne.n	800cef8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800cee2:	4b0a      	ldr	r3, [pc, #40]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800cee4:	695b      	ldr	r3, [r3, #20]
 800cee6:	2240      	movs	r2, #64	@ 0x40
 800cee8:	431a      	orrs	r2, r3
 800ceea:	4b08      	ldr	r3, [pc, #32]	@ (800cf0c <FLASH_SetErrorCode+0x134>)
 800ceec:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2280      	movs	r2, #128	@ 0x80
 800cef2:	0252      	lsls	r2, r2, #9
 800cef4:	4313      	orrs	r3, r2
 800cef6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800cef8:	4b03      	ldr	r3, [pc, #12]	@ (800cf08 <FLASH_SetErrorCode+0x130>)
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	619a      	str	r2, [r3, #24]
}  
 800cefe:	46c0      	nop			@ (mov r8, r8)
 800cf00:	46bd      	mov	sp, r7
 800cf02:	b002      	add	sp, #8
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	46c0      	nop			@ (mov r8, r8)
 800cf08:	40022000 	.word	0x40022000
 800cf0c:	200024c4 	.word	0x200024c4

0800cf10 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b084      	sub	sp, #16
 800cf14:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800cf16:	4b12      	ldr	r3, [pc, #72]	@ (800cf60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	d019      	beq.n	800cf54 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf20:	f3ef 8310 	mrs	r3, PRIMASK
 800cf24:	607b      	str	r3, [r7, #4]
  return(result);
 800cf26:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800cf28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf2a:	b672      	cpsid	i
}
 800cf2c:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800cf2e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cf30:	4a0c      	ldr	r2, [pc, #48]	@ (800cf64 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800cf32:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800cf34:	4b0a      	ldr	r3, [pc, #40]	@ (800cf60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cf36:	4a0c      	ldr	r2, [pc, #48]	@ (800cf68 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800cf38:	60da      	str	r2, [r3, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	f383 8810 	msr	PRIMASK, r3
}
 800cf44:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800cf46:	4b06      	ldr	r3, [pc, #24]	@ (800cf60 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	d001      	beq.n	800cf54 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e000      	b.n	800cf56 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	0018      	movs	r0, r3
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	b004      	add	sp, #16
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	46c0      	nop			@ (mov r8, r8)
 800cf60:	40022000 	.word	0x40022000
 800cf64:	89abcdef 	.word	0x89abcdef
 800cf68:	02030405 	.word	0x02030405

0800cf6c <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800cf70:	4b04      	ldr	r3, [pc, #16]	@ (800cf84 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	4b03      	ldr	r3, [pc, #12]	@ (800cf84 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800cf76:	2101      	movs	r1, #1
 800cf78:	430a      	orrs	r2, r1
 800cf7a:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	0018      	movs	r0, r3
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	40022000 	.word	0x40022000

0800cf88 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800cf88:	b5b0      	push	{r4, r5, r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf90:	250f      	movs	r5, #15
 800cf92:	197b      	adds	r3, r7, r5
 800cf94:	2200      	movs	r2, #0
 800cf96:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cf98:	197c      	adds	r4, r7, r5
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	@ (800cfd8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800cf9c:	0018      	movs	r0, r3
 800cf9e:	f7ff fea9 	bl	800ccf4 <FLASH_WaitForLastOperation>
 800cfa2:	0003      	movs	r3, r0
 800cfa4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800cfa6:	0029      	movs	r1, r5
 800cfa8:	187b      	adds	r3, r7, r1
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10c      	bne.n	800cfca <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cfb0:	4b0a      	ldr	r3, [pc, #40]	@ (800cfdc <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cfbc:	187c      	adds	r4, r7, r1
 800cfbe:	4b06      	ldr	r3, [pc, #24]	@ (800cfd8 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f7ff fe97 	bl	800ccf4 <FLASH_WaitForLastOperation>
 800cfc6:	0003      	movs	r3, r0
 800cfc8:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800cfca:	230f      	movs	r3, #15
 800cfcc:	18fb      	adds	r3, r7, r3
 800cfce:	781b      	ldrb	r3, [r3, #0]
}  
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	b004      	add	sp, #16
 800cfd6:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd8:	0000c350 	.word	0x0000c350
 800cfdc:	200024c4 	.word	0x200024c4

0800cfe0 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800cfe0:	b5b0      	push	{r4, r5, r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cfec:	2317      	movs	r3, #23
 800cfee:	18fb      	adds	r3, r7, r3
 800cff0:	2201      	movs	r2, #1
 800cff2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cff4:	4b24      	ldr	r3, [pc, #144]	@ (800d088 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cff6:	7c1b      	ldrb	r3, [r3, #16]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d101      	bne.n	800d000 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800cffc:	2302      	movs	r3, #2
 800cffe:	e03e      	b.n	800d07e <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800d000:	4b21      	ldr	r3, [pc, #132]	@ (800d088 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800d002:	2201      	movs	r2, #1
 800d004:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d006:	2517      	movs	r5, #23
 800d008:	197c      	adds	r4, r7, r5
 800d00a:	4b20      	ldr	r3, [pc, #128]	@ (800d08c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800d00c:	0018      	movs	r0, r3
 800d00e:	f7ff fe71 	bl	800ccf4 <FLASH_WaitForLastOperation>
 800d012:	0003      	movs	r3, r0
 800d014:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800d016:	197b      	adds	r3, r7, r5
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d129      	bne.n	800d072 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d01e:	4b1a      	ldr	r3, [pc, #104]	@ (800d088 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800d020:	2200      	movs	r2, #0
 800d022:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2b02      	cmp	r3, #2
 800d028:	d103      	bne.n	800d032 <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	601a      	str	r2, [r3, #0]
 800d030:	e013      	b.n	800d05a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d104      	bne.n	800d042 <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800d038:	68bb      	ldr	r3, [r7, #8]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	b292      	uxth	r2, r2
 800d03e:	801a      	strh	r2, [r3, #0]
 800d040:	e00b      	b.n	800d05a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d104      	bne.n	800d052 <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	b2d2      	uxtb	r2, r2
 800d04e:	701a      	strb	r2, [r3, #0]
 800d050:	e003      	b.n	800d05a <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800d052:	2317      	movs	r3, #23
 800d054:	18fb      	adds	r3, r7, r3
 800d056:	2201      	movs	r2, #1
 800d058:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800d05a:	2217      	movs	r2, #23
 800d05c:	18bb      	adds	r3, r7, r2
 800d05e:	781b      	ldrb	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d106      	bne.n	800d072 <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d064:	18bc      	adds	r4, r7, r2
 800d066:	4b09      	ldr	r3, [pc, #36]	@ (800d08c <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800d068:	0018      	movs	r0, r3
 800d06a:	f7ff fe43 	bl	800ccf4 <FLASH_WaitForLastOperation>
 800d06e:	0003      	movs	r3, r0
 800d070:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d072:	4b05      	ldr	r3, [pc, #20]	@ (800d088 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800d074:	2200      	movs	r2, #0
 800d076:	741a      	strb	r2, [r3, #16]

  return status;
 800d078:	2317      	movs	r3, #23
 800d07a:	18fb      	adds	r3, r7, r3
 800d07c:	781b      	ldrb	r3, [r3, #0]
}
 800d07e:	0018      	movs	r0, r3
 800d080:	46bd      	mov	sp, r7
 800d082:	b006      	add	sp, #24
 800d084:	bdb0      	pop	{r4, r5, r7, pc}
 800d086:	46c0      	nop			@ (mov r8, r8)
 800d088:	200024c4 	.word	0x200024c4
 800d08c:	0000c350 	.word	0x0000c350

0800d090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d09a:	2300      	movs	r3, #0
 800d09c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800d0a6:	e155      	b.n	800d354 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2101      	movs	r1, #1
 800d0ae:	697a      	ldr	r2, [r7, #20]
 800d0b0:	4091      	lsls	r1, r2
 800d0b2:	000a      	movs	r2, r1
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d100      	bne.n	800d0c0 <HAL_GPIO_Init+0x30>
 800d0be:	e146      	b.n	800d34e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	685b      	ldr	r3, [r3, #4]
 800d0c4:	2203      	movs	r2, #3
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d005      	beq.n	800d0d8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	2203      	movs	r2, #3
 800d0d2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d130      	bne.n	800d13a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	2203      	movs	r2, #3
 800d0e4:	409a      	lsls	r2, r3
 800d0e6:	0013      	movs	r3, r2
 800d0e8:	43da      	mvns	r2, r3
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	4013      	ands	r3, r2
 800d0ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	68da      	ldr	r2, [r3, #12]
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	005b      	lsls	r3, r3, #1
 800d0f8:	409a      	lsls	r2, r3
 800d0fa:	0013      	movs	r3, r2
 800d0fc:	693a      	ldr	r2, [r7, #16]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	693a      	ldr	r2, [r7, #16]
 800d106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	685b      	ldr	r3, [r3, #4]
 800d10c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d10e:	2201      	movs	r2, #1
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	409a      	lsls	r2, r3
 800d114:	0013      	movs	r3, r2
 800d116:	43da      	mvns	r2, r3
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	4013      	ands	r3, r2
 800d11c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	091b      	lsrs	r3, r3, #4
 800d124:	2201      	movs	r2, #1
 800d126:	401a      	ands	r2, r3
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	409a      	lsls	r2, r3
 800d12c:	0013      	movs	r3, r2
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	4313      	orrs	r3, r2
 800d132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	2203      	movs	r2, #3
 800d140:	4013      	ands	r3, r2
 800d142:	2b03      	cmp	r3, #3
 800d144:	d017      	beq.n	800d176 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	005b      	lsls	r3, r3, #1
 800d150:	2203      	movs	r2, #3
 800d152:	409a      	lsls	r2, r3
 800d154:	0013      	movs	r3, r2
 800d156:	43da      	mvns	r2, r3
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	4013      	ands	r3, r2
 800d15c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	689a      	ldr	r2, [r3, #8]
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	409a      	lsls	r2, r3
 800d168:	0013      	movs	r3, r2
 800d16a:	693a      	ldr	r2, [r7, #16]
 800d16c:	4313      	orrs	r3, r2
 800d16e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	693a      	ldr	r2, [r7, #16]
 800d174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	2203      	movs	r2, #3
 800d17c:	4013      	ands	r3, r2
 800d17e:	2b02      	cmp	r3, #2
 800d180:	d123      	bne.n	800d1ca <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	08da      	lsrs	r2, r3, #3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	3208      	adds	r2, #8
 800d18a:	0092      	lsls	r2, r2, #2
 800d18c:	58d3      	ldr	r3, [r2, r3]
 800d18e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	2207      	movs	r2, #7
 800d194:	4013      	ands	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	220f      	movs	r2, #15
 800d19a:	409a      	lsls	r2, r3
 800d19c:	0013      	movs	r3, r2
 800d19e:	43da      	mvns	r2, r3
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	691a      	ldr	r2, [r3, #16]
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2107      	movs	r1, #7
 800d1ae:	400b      	ands	r3, r1
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	409a      	lsls	r2, r3
 800d1b4:	0013      	movs	r3, r2
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	08da      	lsrs	r2, r3, #3
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	3208      	adds	r2, #8
 800d1c4:	0092      	lsls	r2, r2, #2
 800d1c6:	6939      	ldr	r1, [r7, #16]
 800d1c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	005b      	lsls	r3, r3, #1
 800d1d4:	2203      	movs	r2, #3
 800d1d6:	409a      	lsls	r2, r3
 800d1d8:	0013      	movs	r3, r2
 800d1da:	43da      	mvns	r2, r3
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	4013      	ands	r3, r2
 800d1e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	2203      	movs	r2, #3
 800d1e8:	401a      	ands	r2, r3
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	005b      	lsls	r3, r3, #1
 800d1ee:	409a      	lsls	r2, r3
 800d1f0:	0013      	movs	r3, r2
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	693a      	ldr	r2, [r7, #16]
 800d1fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	685a      	ldr	r2, [r3, #4]
 800d202:	23c0      	movs	r3, #192	@ 0xc0
 800d204:	029b      	lsls	r3, r3, #10
 800d206:	4013      	ands	r3, r2
 800d208:	d100      	bne.n	800d20c <HAL_GPIO_Init+0x17c>
 800d20a:	e0a0      	b.n	800d34e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d20c:	4b57      	ldr	r3, [pc, #348]	@ (800d36c <HAL_GPIO_Init+0x2dc>)
 800d20e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d210:	4b56      	ldr	r3, [pc, #344]	@ (800d36c <HAL_GPIO_Init+0x2dc>)
 800d212:	2101      	movs	r1, #1
 800d214:	430a      	orrs	r2, r1
 800d216:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800d218:	4a55      	ldr	r2, [pc, #340]	@ (800d370 <HAL_GPIO_Init+0x2e0>)
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	089b      	lsrs	r3, r3, #2
 800d21e:	3302      	adds	r3, #2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	589b      	ldr	r3, [r3, r2]
 800d224:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2203      	movs	r2, #3
 800d22a:	4013      	ands	r3, r2
 800d22c:	009b      	lsls	r3, r3, #2
 800d22e:	220f      	movs	r2, #15
 800d230:	409a      	lsls	r2, r3
 800d232:	0013      	movs	r3, r2
 800d234:	43da      	mvns	r2, r3
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	4013      	ands	r3, r2
 800d23a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	23a0      	movs	r3, #160	@ 0xa0
 800d240:	05db      	lsls	r3, r3, #23
 800d242:	429a      	cmp	r2, r3
 800d244:	d01f      	beq.n	800d286 <HAL_GPIO_Init+0x1f6>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	4a4a      	ldr	r2, [pc, #296]	@ (800d374 <HAL_GPIO_Init+0x2e4>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d019      	beq.n	800d282 <HAL_GPIO_Init+0x1f2>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	4a49      	ldr	r2, [pc, #292]	@ (800d378 <HAL_GPIO_Init+0x2e8>)
 800d252:	4293      	cmp	r3, r2
 800d254:	d013      	beq.n	800d27e <HAL_GPIO_Init+0x1ee>
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	4a48      	ldr	r2, [pc, #288]	@ (800d37c <HAL_GPIO_Init+0x2ec>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d00d      	beq.n	800d27a <HAL_GPIO_Init+0x1ea>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4a47      	ldr	r2, [pc, #284]	@ (800d380 <HAL_GPIO_Init+0x2f0>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d007      	beq.n	800d276 <HAL_GPIO_Init+0x1e6>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a46      	ldr	r2, [pc, #280]	@ (800d384 <HAL_GPIO_Init+0x2f4>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d101      	bne.n	800d272 <HAL_GPIO_Init+0x1e2>
 800d26e:	2305      	movs	r3, #5
 800d270:	e00a      	b.n	800d288 <HAL_GPIO_Init+0x1f8>
 800d272:	2306      	movs	r3, #6
 800d274:	e008      	b.n	800d288 <HAL_GPIO_Init+0x1f8>
 800d276:	2304      	movs	r3, #4
 800d278:	e006      	b.n	800d288 <HAL_GPIO_Init+0x1f8>
 800d27a:	2303      	movs	r3, #3
 800d27c:	e004      	b.n	800d288 <HAL_GPIO_Init+0x1f8>
 800d27e:	2302      	movs	r3, #2
 800d280:	e002      	b.n	800d288 <HAL_GPIO_Init+0x1f8>
 800d282:	2301      	movs	r3, #1
 800d284:	e000      	b.n	800d288 <HAL_GPIO_Init+0x1f8>
 800d286:	2300      	movs	r3, #0
 800d288:	697a      	ldr	r2, [r7, #20]
 800d28a:	2103      	movs	r1, #3
 800d28c:	400a      	ands	r2, r1
 800d28e:	0092      	lsls	r2, r2, #2
 800d290:	4093      	lsls	r3, r2
 800d292:	693a      	ldr	r2, [r7, #16]
 800d294:	4313      	orrs	r3, r2
 800d296:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d298:	4935      	ldr	r1, [pc, #212]	@ (800d370 <HAL_GPIO_Init+0x2e0>)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	089b      	lsrs	r3, r3, #2
 800d29e:	3302      	adds	r3, #2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d2a6:	4b38      	ldr	r3, [pc, #224]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d2a8:	689b      	ldr	r3, [r3, #8]
 800d2aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	43da      	mvns	r2, r3
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	4013      	ands	r3, r2
 800d2b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	685a      	ldr	r2, [r3, #4]
 800d2ba:	2380      	movs	r3, #128	@ 0x80
 800d2bc:	035b      	lsls	r3, r3, #13
 800d2be:	4013      	ands	r3, r2
 800d2c0:	d003      	beq.n	800d2ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800d2c2:	693a      	ldr	r2, [r7, #16]
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800d2ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d2cc:	693a      	ldr	r2, [r7, #16]
 800d2ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800d2d0:	4b2d      	ldr	r3, [pc, #180]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	43da      	mvns	r2, r3
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	4013      	ands	r3, r2
 800d2de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	2380      	movs	r3, #128	@ 0x80
 800d2e6:	039b      	lsls	r3, r3, #14
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	d003      	beq.n	800d2f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	4313      	orrs	r3, r2
 800d2f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800d2f4:	4b24      	ldr	r3, [pc, #144]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d2f6:	693a      	ldr	r2, [r7, #16]
 800d2f8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800d2fa:	4b23      	ldr	r3, [pc, #140]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	43da      	mvns	r2, r3
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	4013      	ands	r3, r2
 800d308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	2380      	movs	r3, #128	@ 0x80
 800d310:	029b      	lsls	r3, r3, #10
 800d312:	4013      	ands	r3, r2
 800d314:	d003      	beq.n	800d31e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800d316:	693a      	ldr	r2, [r7, #16]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800d31e:	4b1a      	ldr	r3, [pc, #104]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d320:	693a      	ldr	r2, [r7, #16]
 800d322:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d324:	4b18      	ldr	r3, [pc, #96]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	43da      	mvns	r2, r3
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	4013      	ands	r3, r2
 800d332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	2380      	movs	r3, #128	@ 0x80
 800d33a:	025b      	lsls	r3, r3, #9
 800d33c:	4013      	ands	r3, r2
 800d33e:	d003      	beq.n	800d348 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	4313      	orrs	r3, r2
 800d346:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d348:	4b0f      	ldr	r3, [pc, #60]	@ (800d388 <HAL_GPIO_Init+0x2f8>)
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	3301      	adds	r3, #1
 800d352:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	40da      	lsrs	r2, r3
 800d35c:	1e13      	subs	r3, r2, #0
 800d35e:	d000      	beq.n	800d362 <HAL_GPIO_Init+0x2d2>
 800d360:	e6a2      	b.n	800d0a8 <HAL_GPIO_Init+0x18>
  }
}
 800d362:	46c0      	nop			@ (mov r8, r8)
 800d364:	46c0      	nop			@ (mov r8, r8)
 800d366:	46bd      	mov	sp, r7
 800d368:	b006      	add	sp, #24
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	40021000 	.word	0x40021000
 800d370:	40010000 	.word	0x40010000
 800d374:	50000400 	.word	0x50000400
 800d378:	50000800 	.word	0x50000800
 800d37c:	50000c00 	.word	0x50000c00
 800d380:	50001000 	.word	0x50001000
 800d384:	50001c00 	.word	0x50001c00
 800d388:	40010400 	.word	0x40010400

0800d38c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	000a      	movs	r2, r1
 800d396:	1cbb      	adds	r3, r7, #2
 800d398:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	1cba      	adds	r2, r7, #2
 800d3a0:	8812      	ldrh	r2, [r2, #0]
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	d004      	beq.n	800d3b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800d3a6:	230f      	movs	r3, #15
 800d3a8:	18fb      	adds	r3, r7, r3
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	701a      	strb	r2, [r3, #0]
 800d3ae:	e003      	b.n	800d3b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d3b0:	230f      	movs	r3, #15
 800d3b2:	18fb      	adds	r3, r7, r3
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800d3b8:	230f      	movs	r3, #15
 800d3ba:	18fb      	adds	r3, r7, r3
 800d3bc:	781b      	ldrb	r3, [r3, #0]
}
 800d3be:	0018      	movs	r0, r3
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	b004      	add	sp, #16
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
 800d3ce:	0008      	movs	r0, r1
 800d3d0:	0011      	movs	r1, r2
 800d3d2:	1cbb      	adds	r3, r7, #2
 800d3d4:	1c02      	adds	r2, r0, #0
 800d3d6:	801a      	strh	r2, [r3, #0]
 800d3d8:	1c7b      	adds	r3, r7, #1
 800d3da:	1c0a      	adds	r2, r1, #0
 800d3dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d3de:	1c7b      	adds	r3, r7, #1
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d004      	beq.n	800d3f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d3e6:	1cbb      	adds	r3, r7, #2
 800d3e8:	881a      	ldrh	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800d3ee:	e003      	b.n	800d3f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800d3f0:	1cbb      	adds	r3, r7, #2
 800d3f2:	881a      	ldrh	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d3f8:	46c0      	nop			@ (mov r8, r8)
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	b002      	add	sp, #8
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d101      	bne.n	800d412 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d40e:	2301      	movs	r3, #1
 800d410:	e082      	b.n	800d518 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2241      	movs	r2, #65	@ 0x41
 800d416:	5c9b      	ldrb	r3, [r3, r2]
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d107      	bne.n	800d42e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2240      	movs	r2, #64	@ 0x40
 800d422:	2100      	movs	r1, #0
 800d424:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	0018      	movs	r0, r3
 800d42a:	f7f9 fc31 	bl	8006c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2241      	movs	r2, #65	@ 0x41
 800d432:	2124      	movs	r1, #36	@ 0x24
 800d434:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2101      	movs	r1, #1
 800d442:	438a      	bics	r2, r1
 800d444:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	685a      	ldr	r2, [r3, #4]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	4934      	ldr	r1, [pc, #208]	@ (800d520 <HAL_I2C_Init+0x120>)
 800d450:	400a      	ands	r2, r1
 800d452:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	689a      	ldr	r2, [r3, #8]
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4931      	ldr	r1, [pc, #196]	@ (800d524 <HAL_I2C_Init+0x124>)
 800d460:	400a      	ands	r2, r1
 800d462:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d108      	bne.n	800d47e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689a      	ldr	r2, [r3, #8]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2180      	movs	r1, #128	@ 0x80
 800d476:	0209      	lsls	r1, r1, #8
 800d478:	430a      	orrs	r2, r1
 800d47a:	609a      	str	r2, [r3, #8]
 800d47c:	e007      	b.n	800d48e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	689a      	ldr	r2, [r3, #8]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2184      	movs	r1, #132	@ 0x84
 800d488:	0209      	lsls	r1, r1, #8
 800d48a:	430a      	orrs	r2, r1
 800d48c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	68db      	ldr	r3, [r3, #12]
 800d492:	2b02      	cmp	r3, #2
 800d494:	d104      	bne.n	800d4a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2280      	movs	r2, #128	@ 0x80
 800d49c:	0112      	lsls	r2, r2, #4
 800d49e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685a      	ldr	r2, [r3, #4]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	491f      	ldr	r1, [pc, #124]	@ (800d528 <HAL_I2C_Init+0x128>)
 800d4ac:	430a      	orrs	r2, r1
 800d4ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	68da      	ldr	r2, [r3, #12]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	491a      	ldr	r1, [pc, #104]	@ (800d524 <HAL_I2C_Init+0x124>)
 800d4bc:	400a      	ands	r2, r1
 800d4be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	691a      	ldr	r2, [r3, #16]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	699b      	ldr	r3, [r3, #24]
 800d4d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	430a      	orrs	r2, r1
 800d4d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	69d9      	ldr	r1, [r3, #28]
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a1a      	ldr	r2, [r3, #32]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	430a      	orrs	r2, r1
 800d4e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	681a      	ldr	r2, [r3, #0]
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	430a      	orrs	r2, r1
 800d4f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2241      	movs	r2, #65	@ 0x41
 800d504:	2120      	movs	r1, #32
 800d506:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2200      	movs	r2, #0
 800d50c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2242      	movs	r2, #66	@ 0x42
 800d512:	2100      	movs	r1, #0
 800d514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d516:	2300      	movs	r3, #0
}
 800d518:	0018      	movs	r0, r3
 800d51a:	46bd      	mov	sp, r7
 800d51c:	b002      	add	sp, #8
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	f0ffffff 	.word	0xf0ffffff
 800d524:	ffff7fff 	.word	0xffff7fff
 800d528:	02008000 	.word	0x02008000

0800d52c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800d52c:	b5b0      	push	{r4, r5, r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af02      	add	r7, sp, #8
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	0008      	movs	r0, r1
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	0019      	movs	r1, r3
 800d53a:	230a      	movs	r3, #10
 800d53c:	18fb      	adds	r3, r7, r3
 800d53e:	1c02      	adds	r2, r0, #0
 800d540:	801a      	strh	r2, [r3, #0]
 800d542:	2308      	movs	r3, #8
 800d544:	18fb      	adds	r3, r7, r3
 800d546:	1c0a      	adds	r2, r1, #0
 800d548:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2241      	movs	r2, #65	@ 0x41
 800d54e:	5c9b      	ldrb	r3, [r3, r2]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b20      	cmp	r3, #32
 800d554:	d000      	beq.n	800d558 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800d556:	e0dd      	b.n	800d714 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	699a      	ldr	r2, [r3, #24]
 800d55e:	2380      	movs	r3, #128	@ 0x80
 800d560:	021b      	lsls	r3, r3, #8
 800d562:	401a      	ands	r2, r3
 800d564:	2380      	movs	r3, #128	@ 0x80
 800d566:	021b      	lsls	r3, r3, #8
 800d568:	429a      	cmp	r2, r3
 800d56a:	d101      	bne.n	800d570 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800d56c:	2302      	movs	r3, #2
 800d56e:	e0d2      	b.n	800d716 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2240      	movs	r2, #64	@ 0x40
 800d574:	5c9b      	ldrb	r3, [r3, r2]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d101      	bne.n	800d57e <HAL_I2C_Master_Transmit_DMA+0x52>
 800d57a:	2302      	movs	r3, #2
 800d57c:	e0cb      	b.n	800d716 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2240      	movs	r2, #64	@ 0x40
 800d582:	2101      	movs	r1, #1
 800d584:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2241      	movs	r2, #65	@ 0x41
 800d58a:	2121      	movs	r1, #33	@ 0x21
 800d58c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2242      	movs	r2, #66	@ 0x42
 800d592:	2110      	movs	r1, #16
 800d594:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2208      	movs	r2, #8
 800d5a6:	18ba      	adds	r2, r7, r2
 800d5a8:	8812      	ldrh	r2, [r2, #0]
 800d5aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4a5c      	ldr	r2, [pc, #368]	@ (800d720 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800d5b0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	4a5b      	ldr	r2, [pc, #364]	@ (800d724 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800d5b6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	2bff      	cmp	r3, #255	@ 0xff
 800d5c0:	d906      	bls.n	800d5d0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	22ff      	movs	r2, #255	@ 0xff
 800d5c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d5c8:	2380      	movs	r3, #128	@ 0x80
 800d5ca:	045b      	lsls	r3, r3, #17
 800d5cc:	617b      	str	r3, [r7, #20]
 800d5ce:	e007      	b.n	800d5e0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d5da:	2380      	movs	r3, #128	@ 0x80
 800d5dc:	049b      	lsls	r3, r3, #18
 800d5de:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d100      	bne.n	800d5ea <HAL_I2C_Master_Transmit_DMA+0xbe>
 800d5e8:	e078      	b.n	800d6dc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d023      	beq.n	800d63a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f6:	4a4c      	ldr	r2, [pc, #304]	@ (800d728 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800d5f8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5fe:	4a4b      	ldr	r2, [pc, #300]	@ (800d72c <HAL_I2C_Master_Transmit_DMA+0x200>)
 800d600:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d606:	2200      	movs	r2, #0
 800d608:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d60e:	2200      	movs	r2, #0
 800d610:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3328      	adds	r3, #40	@ 0x28
 800d61e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d624:	2513      	movs	r5, #19
 800d626:	197c      	adds	r4, r7, r5
 800d628:	f7ff f98e 	bl	800c948 <HAL_DMA_Start_IT>
 800d62c:	0003      	movs	r3, r0
 800d62e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d630:	197b      	adds	r3, r7, r5
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d13d      	bne.n	800d6b4 <HAL_I2C_Master_Transmit_DMA+0x188>
 800d638:	e013      	b.n	800d662 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2241      	movs	r2, #65	@ 0x41
 800d63e:	2120      	movs	r1, #32
 800d640:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	2242      	movs	r2, #66	@ 0x42
 800d646:	2100      	movs	r1, #0
 800d648:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d64e:	2280      	movs	r2, #128	@ 0x80
 800d650:	431a      	orrs	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2240      	movs	r2, #64	@ 0x40
 800d65a:	2100      	movs	r1, #0
 800d65c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e059      	b.n	800d716 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d666:	b2da      	uxtb	r2, r3
 800d668:	697c      	ldr	r4, [r7, #20]
 800d66a:	230a      	movs	r3, #10
 800d66c:	18fb      	adds	r3, r7, r3
 800d66e:	8819      	ldrh	r1, [r3, #0]
 800d670:	68f8      	ldr	r0, [r7, #12]
 800d672:	4b2f      	ldr	r3, [pc, #188]	@ (800d730 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d674:	9300      	str	r3, [sp, #0]
 800d676:	0023      	movs	r3, r4
 800d678:	f001 fd0e 	bl	800f098 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d680:	b29a      	uxth	r2, r3
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	b29a      	uxth	r2, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2240      	movs	r2, #64	@ 0x40
 800d692:	2100      	movs	r1, #0
 800d694:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2110      	movs	r1, #16
 800d69a:	0018      	movs	r0, r3
 800d69c:	f001 fd36 	bl	800f10c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2180      	movs	r1, #128	@ 0x80
 800d6ac:	01c9      	lsls	r1, r1, #7
 800d6ae:	430a      	orrs	r2, r1
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	e02d      	b.n	800d710 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2241      	movs	r2, #65	@ 0x41
 800d6b8:	2120      	movs	r1, #32
 800d6ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2242      	movs	r2, #66	@ 0x42
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6c8:	2210      	movs	r2, #16
 800d6ca:	431a      	orrs	r2, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2240      	movs	r2, #64	@ 0x40
 800d6d4:	2100      	movs	r1, #0
 800d6d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e01c      	b.n	800d716 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	4a15      	ldr	r2, [pc, #84]	@ (800d734 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800d6e0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6e6:	b2da      	uxtb	r2, r3
 800d6e8:	2380      	movs	r3, #128	@ 0x80
 800d6ea:	049c      	lsls	r4, r3, #18
 800d6ec:	230a      	movs	r3, #10
 800d6ee:	18fb      	adds	r3, r7, r3
 800d6f0:	8819      	ldrh	r1, [r3, #0]
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d730 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	0023      	movs	r3, r4
 800d6fa:	f001 fccd 	bl	800f098 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2240      	movs	r2, #64	@ 0x40
 800d702:	2100      	movs	r1, #0
 800d704:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2101      	movs	r1, #1
 800d70a:	0018      	movs	r0, r3
 800d70c:	f001 fcfe 	bl	800f10c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	e000      	b.n	800d716 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d714:	2302      	movs	r3, #2
  }
}
 800d716:	0018      	movs	r0, r3
 800d718:	46bd      	mov	sp, r7
 800d71a:	b006      	add	sp, #24
 800d71c:	bdb0      	pop	{r4, r5, r7, pc}
 800d71e:	46c0      	nop			@ (mov r8, r8)
 800d720:	ffff0000 	.word	0xffff0000
 800d724:	0800df31 	.word	0x0800df31
 800d728:	0800eee9 	.word	0x0800eee9
 800d72c:	0800f029 	.word	0x0800f029
 800d730:	80002000 	.word	0x80002000
 800d734:	0800dadd 	.word	0x0800dadd

0800d738 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800d738:	b5b0      	push	{r4, r5, r7, lr}
 800d73a:	b088      	sub	sp, #32
 800d73c:	af02      	add	r7, sp, #8
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	0008      	movs	r0, r1
 800d742:	607a      	str	r2, [r7, #4]
 800d744:	0019      	movs	r1, r3
 800d746:	230a      	movs	r3, #10
 800d748:	18fb      	adds	r3, r7, r3
 800d74a:	1c02      	adds	r2, r0, #0
 800d74c:	801a      	strh	r2, [r3, #0]
 800d74e:	2308      	movs	r3, #8
 800d750:	18fb      	adds	r3, r7, r3
 800d752:	1c0a      	adds	r2, r1, #0
 800d754:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2241      	movs	r2, #65	@ 0x41
 800d75a:	5c9b      	ldrb	r3, [r3, r2]
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	2b20      	cmp	r3, #32
 800d760:	d000      	beq.n	800d764 <HAL_I2C_Master_Receive_DMA+0x2c>
 800d762:	e0dd      	b.n	800d920 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	699a      	ldr	r2, [r3, #24]
 800d76a:	2380      	movs	r3, #128	@ 0x80
 800d76c:	021b      	lsls	r3, r3, #8
 800d76e:	401a      	ands	r2, r3
 800d770:	2380      	movs	r3, #128	@ 0x80
 800d772:	021b      	lsls	r3, r3, #8
 800d774:	429a      	cmp	r2, r3
 800d776:	d101      	bne.n	800d77c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800d778:	2302      	movs	r3, #2
 800d77a:	e0d2      	b.n	800d922 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2240      	movs	r2, #64	@ 0x40
 800d780:	5c9b      	ldrb	r3, [r3, r2]
 800d782:	2b01      	cmp	r3, #1
 800d784:	d101      	bne.n	800d78a <HAL_I2C_Master_Receive_DMA+0x52>
 800d786:	2302      	movs	r3, #2
 800d788:	e0cb      	b.n	800d922 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2240      	movs	r2, #64	@ 0x40
 800d78e:	2101      	movs	r1, #1
 800d790:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2241      	movs	r2, #65	@ 0x41
 800d796:	2122      	movs	r1, #34	@ 0x22
 800d798:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2242      	movs	r2, #66	@ 0x42
 800d79e:	2110      	movs	r1, #16
 800d7a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2208      	movs	r2, #8
 800d7b2:	18ba      	adds	r2, r7, r2
 800d7b4:	8812      	ldrh	r2, [r2, #0]
 800d7b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4a5c      	ldr	r2, [pc, #368]	@ (800d92c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800d7bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	4a5b      	ldr	r2, [pc, #364]	@ (800d930 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800d7c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	2bff      	cmp	r3, #255	@ 0xff
 800d7cc:	d906      	bls.n	800d7dc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	22ff      	movs	r2, #255	@ 0xff
 800d7d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d7d4:	2380      	movs	r3, #128	@ 0x80
 800d7d6:	045b      	lsls	r3, r3, #17
 800d7d8:	617b      	str	r3, [r7, #20]
 800d7da:	e007      	b.n	800d7ec <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d7e6:	2380      	movs	r3, #128	@ 0x80
 800d7e8:	049b      	lsls	r3, r3, #18
 800d7ea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d100      	bne.n	800d7f6 <HAL_I2C_Master_Receive_DMA+0xbe>
 800d7f4:	e078      	b.n	800d8e8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d023      	beq.n	800d846 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d802:	4a4c      	ldr	r2, [pc, #304]	@ (800d934 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800d804:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d80a:	4a4b      	ldr	r2, [pc, #300]	@ (800d938 <HAL_I2C_Master_Receive_DMA+0x200>)
 800d80c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d812:	2200      	movs	r2, #0
 800d814:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d81a:	2200      	movs	r2, #0
 800d81c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3324      	adds	r3, #36	@ 0x24
 800d828:	0019      	movs	r1, r3
 800d82a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d830:	2513      	movs	r5, #19
 800d832:	197c      	adds	r4, r7, r5
 800d834:	f7ff f888 	bl	800c948 <HAL_DMA_Start_IT>
 800d838:	0003      	movs	r3, r0
 800d83a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d83c:	197b      	adds	r3, r7, r5
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d13d      	bne.n	800d8c0 <HAL_I2C_Master_Receive_DMA+0x188>
 800d844:	e013      	b.n	800d86e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2241      	movs	r2, #65	@ 0x41
 800d84a:	2120      	movs	r1, #32
 800d84c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	2242      	movs	r2, #66	@ 0x42
 800d852:	2100      	movs	r1, #0
 800d854:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d85a:	2280      	movs	r2, #128	@ 0x80
 800d85c:	431a      	orrs	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2240      	movs	r2, #64	@ 0x40
 800d866:	2100      	movs	r1, #0
 800d868:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	e059      	b.n	800d922 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d872:	b2da      	uxtb	r2, r3
 800d874:	697c      	ldr	r4, [r7, #20]
 800d876:	230a      	movs	r3, #10
 800d878:	18fb      	adds	r3, r7, r3
 800d87a:	8819      	ldrh	r1, [r3, #0]
 800d87c:	68f8      	ldr	r0, [r7, #12]
 800d87e:	4b2f      	ldr	r3, [pc, #188]	@ (800d93c <HAL_I2C_Master_Receive_DMA+0x204>)
 800d880:	9300      	str	r3, [sp, #0]
 800d882:	0023      	movs	r3, r4
 800d884:	f001 fc08 	bl	800f098 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d892:	1ad3      	subs	r3, r2, r3
 800d894:	b29a      	uxth	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2240      	movs	r2, #64	@ 0x40
 800d89e:	2100      	movs	r1, #0
 800d8a0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2110      	movs	r1, #16
 800d8a6:	0018      	movs	r0, r3
 800d8a8:	f001 fc30 	bl	800f10c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2180      	movs	r1, #128	@ 0x80
 800d8b8:	0209      	lsls	r1, r1, #8
 800d8ba:	430a      	orrs	r2, r1
 800d8bc:	601a      	str	r2, [r3, #0]
 800d8be:	e02d      	b.n	800d91c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2241      	movs	r2, #65	@ 0x41
 800d8c4:	2120      	movs	r1, #32
 800d8c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2242      	movs	r2, #66	@ 0x42
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8d4:	2210      	movs	r2, #16
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2240      	movs	r2, #64	@ 0x40
 800d8e0:	2100      	movs	r1, #0
 800d8e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d8e4:	2301      	movs	r3, #1
 800d8e6:	e01c      	b.n	800d922 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	4a15      	ldr	r2, [pc, #84]	@ (800d940 <HAL_I2C_Master_Receive_DMA+0x208>)
 800d8ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d8f2:	b2da      	uxtb	r2, r3
 800d8f4:	2380      	movs	r3, #128	@ 0x80
 800d8f6:	049c      	lsls	r4, r3, #18
 800d8f8:	230a      	movs	r3, #10
 800d8fa:	18fb      	adds	r3, r7, r3
 800d8fc:	8819      	ldrh	r1, [r3, #0]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	4b0e      	ldr	r3, [pc, #56]	@ (800d93c <HAL_I2C_Master_Receive_DMA+0x204>)
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	0023      	movs	r3, r4
 800d906:	f001 fbc7 	bl	800f098 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2240      	movs	r2, #64	@ 0x40
 800d90e:	2100      	movs	r1, #0
 800d910:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2101      	movs	r1, #1
 800d916:	0018      	movs	r0, r3
 800d918:	f001 fbf8 	bl	800f10c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d91c:	2300      	movs	r3, #0
 800d91e:	e000      	b.n	800d922 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d920:	2302      	movs	r3, #2
  }
}
 800d922:	0018      	movs	r0, r3
 800d924:	46bd      	mov	sp, r7
 800d926:	b006      	add	sp, #24
 800d928:	bdb0      	pop	{r4, r5, r7, pc}
 800d92a:	46c0      	nop			@ (mov r8, r8)
 800d92c:	ffff0000 	.word	0xffff0000
 800d930:	0800df31 	.word	0x0800df31
 800d934:	0800ef89 	.word	0x0800ef89
 800d938:	0800f029 	.word	0x0800f029
 800d93c:	80002400 	.word	0x80002400
 800d940:	0800dadd 	.word	0x0800dadd

0800d944 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d960:	2b00      	cmp	r3, #0
 800d962:	d005      	beq.n	800d970 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d968:	68ba      	ldr	r2, [r7, #8]
 800d96a:	68f9      	ldr	r1, [r7, #12]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	4798      	blx	r3
  }
}
 800d970:	46c0      	nop			@ (mov r8, r8)
 800d972:	46bd      	mov	sp, r7
 800d974:	b004      	add	sp, #16
 800d976:	bd80      	pop	{r7, pc}

0800d978 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b086      	sub	sp, #24
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	2380      	movs	r3, #128	@ 0x80
 800d994:	005b      	lsls	r3, r3, #1
 800d996:	4013      	ands	r3, r2
 800d998:	d00e      	beq.n	800d9b8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	2280      	movs	r2, #128	@ 0x80
 800d99e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d9a0:	d00a      	beq.n	800d9b8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	431a      	orrs	r2, r3
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2280      	movs	r2, #128	@ 0x80
 800d9b4:	0052      	lsls	r2, r2, #1
 800d9b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	2380      	movs	r3, #128	@ 0x80
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	4013      	ands	r3, r2
 800d9c0:	d00e      	beq.n	800d9e0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	2280      	movs	r2, #128	@ 0x80
 800d9c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d9c8:	d00a      	beq.n	800d9e0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9ce:	2208      	movs	r2, #8
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	2280      	movs	r2, #128	@ 0x80
 800d9dc:	00d2      	lsls	r2, r2, #3
 800d9de:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d9e0:	697a      	ldr	r2, [r7, #20]
 800d9e2:	2380      	movs	r3, #128	@ 0x80
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	4013      	ands	r3, r2
 800d9e8:	d00e      	beq.n	800da08 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	2280      	movs	r2, #128	@ 0x80
 800d9ee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d9f0:	d00a      	beq.n	800da08 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d9f6:	2202      	movs	r2, #2
 800d9f8:	431a      	orrs	r2, r3
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	2280      	movs	r2, #128	@ 0x80
 800da04:	0092      	lsls	r2, r2, #2
 800da06:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da0c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	220b      	movs	r2, #11
 800da12:	4013      	ands	r3, r2
 800da14:	d005      	beq.n	800da22 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	0011      	movs	r1, r2
 800da1c:	0018      	movs	r0, r3
 800da1e:	f001 f915 	bl	800ec4c <I2C_ITError>
  }
}
 800da22:	46c0      	nop			@ (mov r8, r8)
 800da24:	46bd      	mov	sp, r7
 800da26:	b006      	add	sp, #24
 800da28:	bd80      	pop	{r7, pc}

0800da2a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b082      	sub	sp, #8
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800da32:	46c0      	nop			@ (mov r8, r8)
 800da34:	46bd      	mov	sp, r7
 800da36:	b002      	add	sp, #8
 800da38:	bd80      	pop	{r7, pc}

0800da3a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800da3a:	b580      	push	{r7, lr}
 800da3c:	b082      	sub	sp, #8
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800da42:	46c0      	nop			@ (mov r8, r8)
 800da44:	46bd      	mov	sp, r7
 800da46:	b002      	add	sp, #8
 800da48:	bd80      	pop	{r7, pc}

0800da4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800da52:	46c0      	nop			@ (mov r8, r8)
 800da54:	46bd      	mov	sp, r7
 800da56:	b002      	add	sp, #8
 800da58:	bd80      	pop	{r7, pc}

0800da5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b082      	sub	sp, #8
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800da62:	46c0      	nop			@ (mov r8, r8)
 800da64:	46bd      	mov	sp, r7
 800da66:	b002      	add	sp, #8
 800da68:	bd80      	pop	{r7, pc}

0800da6a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	0008      	movs	r0, r1
 800da74:	0011      	movs	r1, r2
 800da76:	1cfb      	adds	r3, r7, #3
 800da78:	1c02      	adds	r2, r0, #0
 800da7a:	701a      	strb	r2, [r3, #0]
 800da7c:	003b      	movs	r3, r7
 800da7e:	1c0a      	adds	r2, r1, #0
 800da80:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800da82:	46c0      	nop			@ (mov r8, r8)
 800da84:	46bd      	mov	sp, r7
 800da86:	b002      	add	sp, #8
 800da88:	bd80      	pop	{r7, pc}

0800da8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800da8a:	b580      	push	{r7, lr}
 800da8c:	b082      	sub	sp, #8
 800da8e:	af00      	add	r7, sp, #0
 800da90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800da92:	46c0      	nop			@ (mov r8, r8)
 800da94:	46bd      	mov	sp, r7
 800da96:	b002      	add	sp, #8
 800da98:	bd80      	pop	{r7, pc}

0800da9a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800daa2:	46c0      	nop			@ (mov r8, r8)
 800daa4:	46bd      	mov	sp, r7
 800daa6:	b002      	add	sp, #8
 800daa8:	bd80      	pop	{r7, pc}

0800daaa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800daaa:	b580      	push	{r7, lr}
 800daac:	b082      	sub	sp, #8
 800daae:	af00      	add	r7, sp, #0
 800dab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800dab2:	46c0      	nop			@ (mov r8, r8)
 800dab4:	46bd      	mov	sp, r7
 800dab6:	b002      	add	sp, #8
 800dab8:	bd80      	pop	{r7, pc}

0800daba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b082      	sub	sp, #8
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800dac2:	46c0      	nop			@ (mov r8, r8)
 800dac4:	46bd      	mov	sp, r7
 800dac6:	b002      	add	sp, #8
 800dac8:	bd80      	pop	{r7, pc}

0800daca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b082      	sub	sp, #8
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800dad2:	46c0      	nop			@ (mov r8, r8)
 800dad4:	46bd      	mov	sp, r7
 800dad6:	b002      	add	sp, #8
 800dad8:	bd80      	pop	{r7, pc}
	...

0800dadc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800dadc:	b590      	push	{r4, r7, lr}
 800dade:	b089      	sub	sp, #36	@ 0x24
 800dae0:	af02      	add	r7, sp, #8
 800dae2:	60f8      	str	r0, [r7, #12]
 800dae4:	60b9      	str	r1, [r7, #8]
 800dae6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2240      	movs	r2, #64	@ 0x40
 800daf0:	5c9b      	ldrb	r3, [r3, r2]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d101      	bne.n	800dafa <I2C_Master_ISR_IT+0x1e>
 800daf6:	2302      	movs	r3, #2
 800daf8:	e113      	b.n	800dd22 <I2C_Master_ISR_IT+0x246>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2240      	movs	r2, #64	@ 0x40
 800dafe:	2101      	movs	r1, #1
 800db00:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	2210      	movs	r2, #16
 800db06:	4013      	ands	r3, r2
 800db08:	d012      	beq.n	800db30 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2210      	movs	r2, #16
 800db0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800db10:	d00e      	beq.n	800db30 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	2210      	movs	r2, #16
 800db18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db1e:	2204      	movs	r2, #4
 800db20:	431a      	orrs	r2, r3
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	0018      	movs	r0, r3
 800db2a:	f001 f9ba 	bl	800eea2 <I2C_Flush_TXDR>
 800db2e:	e0e5      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	2204      	movs	r2, #4
 800db34:	4013      	ands	r3, r2
 800db36:	d021      	beq.n	800db7c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2204      	movs	r2, #4
 800db3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800db3e:	d01d      	beq.n	800db7c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2204      	movs	r2, #4
 800db44:	4393      	bics	r3, r2
 800db46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db52:	b2d2      	uxtb	r2, r2
 800db54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db64:	3b01      	subs	r3, #1
 800db66:	b29a      	uxth	r2, r3
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db70:	b29b      	uxth	r3, r3
 800db72:	3b01      	subs	r3, #1
 800db74:	b29a      	uxth	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db7a:	e0bf      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	2202      	movs	r2, #2
 800db80:	4013      	ands	r3, r2
 800db82:	d01c      	beq.n	800dbbe <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2202      	movs	r2, #2
 800db88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800db8a:	d018      	beq.n	800dbbe <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db90:	781a      	ldrb	r2, [r3, #0]
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dba6:	3b01      	subs	r3, #1
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	3b01      	subs	r3, #1
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dbbc:	e09e      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2280      	movs	r2, #128	@ 0x80
 800dbc2:	4013      	ands	r3, r2
 800dbc4:	d100      	bne.n	800dbc8 <I2C_Master_ISR_IT+0xec>
 800dbc6:	e069      	b.n	800dc9c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2240      	movs	r2, #64	@ 0x40
 800dbcc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800dbce:	d065      	beq.n	800dc9c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d04a      	beq.n	800dc70 <I2C_Master_ISR_IT+0x194>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d146      	bne.n	800dc70 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	b29a      	uxth	r2, r3
 800dbea:	2112      	movs	r1, #18
 800dbec:	187b      	adds	r3, r7, r1
 800dbee:	0592      	lsls	r2, r2, #22
 800dbf0:	0d92      	lsrs	r2, r2, #22
 800dbf2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	2bff      	cmp	r3, #255	@ 0xff
 800dbfc:	d910      	bls.n	800dc20 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	22ff      	movs	r2, #255	@ 0xff
 800dc02:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc08:	b2da      	uxtb	r2, r3
 800dc0a:	2380      	movs	r3, #128	@ 0x80
 800dc0c:	045c      	lsls	r4, r3, #17
 800dc0e:	187b      	adds	r3, r7, r1
 800dc10:	8819      	ldrh	r1, [r3, #0]
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	2300      	movs	r3, #0
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	0023      	movs	r3, r4
 800dc1a:	f001 fa3d 	bl	800f098 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc1e:	e03c      	b.n	800dc9a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc2e:	4a3f      	ldr	r2, [pc, #252]	@ (800dd2c <I2C_Master_ISR_IT+0x250>)
 800dc30:	4293      	cmp	r3, r2
 800dc32:	d00e      	beq.n	800dc52 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc38:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dc3e:	2312      	movs	r3, #18
 800dc40:	18fb      	adds	r3, r7, r3
 800dc42:	8819      	ldrh	r1, [r3, #0]
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	2300      	movs	r3, #0
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	0023      	movs	r3, r4
 800dc4c:	f001 fa24 	bl	800f098 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc50:	e023      	b.n	800dc9a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	2380      	movs	r3, #128	@ 0x80
 800dc5a:	049c      	lsls	r4, r3, #18
 800dc5c:	2312      	movs	r3, #18
 800dc5e:	18fb      	adds	r3, r7, r3
 800dc60:	8819      	ldrh	r1, [r3, #0]
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	2300      	movs	r3, #0
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	0023      	movs	r3, r4
 800dc6a:	f001 fa15 	bl	800f098 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dc6e:	e014      	b.n	800dc9a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	685a      	ldr	r2, [r3, #4]
 800dc76:	2380      	movs	r3, #128	@ 0x80
 800dc78:	049b      	lsls	r3, r3, #18
 800dc7a:	401a      	ands	r2, r3
 800dc7c:	2380      	movs	r3, #128	@ 0x80
 800dc7e:	049b      	lsls	r3, r3, #18
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d004      	beq.n	800dc8e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	0018      	movs	r0, r3
 800dc88:	f000 fcf4 	bl	800e674 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc8c:	e036      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	2140      	movs	r1, #64	@ 0x40
 800dc92:	0018      	movs	r0, r3
 800dc94:	f000 ffda 	bl	800ec4c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc98:	e030      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
 800dc9a:	e02f      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	2240      	movs	r2, #64	@ 0x40
 800dca0:	4013      	ands	r3, r2
 800dca2:	d02b      	beq.n	800dcfc <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2240      	movs	r2, #64	@ 0x40
 800dca8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800dcaa:	d027      	beq.n	800dcfc <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d11d      	bne.n	800dcf2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	685a      	ldr	r2, [r3, #4]
 800dcbc:	2380      	movs	r3, #128	@ 0x80
 800dcbe:	049b      	lsls	r3, r3, #18
 800dcc0:	401a      	ands	r2, r3
 800dcc2:	2380      	movs	r3, #128	@ 0x80
 800dcc4:	049b      	lsls	r3, r3, #18
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d018      	beq.n	800dcfc <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcce:	4a17      	ldr	r2, [pc, #92]	@ (800dd2c <I2C_Master_ISR_IT+0x250>)
 800dcd0:	4293      	cmp	r3, r2
 800dcd2:	d109      	bne.n	800dce8 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	685a      	ldr	r2, [r3, #4]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	2180      	movs	r1, #128	@ 0x80
 800dce0:	01c9      	lsls	r1, r1, #7
 800dce2:	430a      	orrs	r2, r1
 800dce4:	605a      	str	r2, [r3, #4]
 800dce6:	e009      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	0018      	movs	r0, r3
 800dcec:	f000 fcc2 	bl	800e674 <I2C_ITMasterSeqCplt>
 800dcf0:	e004      	b.n	800dcfc <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2140      	movs	r1, #64	@ 0x40
 800dcf6:	0018      	movs	r0, r3
 800dcf8:	f000 ffa8 	bl	800ec4c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2220      	movs	r2, #32
 800dd00:	4013      	ands	r3, r2
 800dd02:	d009      	beq.n	800dd18 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2220      	movs	r2, #32
 800dd08:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dd0a:	d005      	beq.n	800dd18 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	0011      	movs	r1, r2
 800dd12:	0018      	movs	r0, r3
 800dd14:	f000 fd54 	bl	800e7c0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2240      	movs	r2, #64	@ 0x40
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	0018      	movs	r0, r3
 800dd24:	46bd      	mov	sp, r7
 800dd26:	b007      	add	sp, #28
 800dd28:	bd90      	pop	{r4, r7, pc}
 800dd2a:	46c0      	nop			@ (mov r8, r8)
 800dd2c:	ffff0000 	.word	0xffff0000

0800dd30 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd40:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2240      	movs	r2, #64	@ 0x40
 800dd4a:	5c9b      	ldrb	r3, [r3, r2]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d101      	bne.n	800dd54 <I2C_Slave_ISR_IT+0x24>
 800dd50:	2302      	movs	r3, #2
 800dd52:	e0e6      	b.n	800df22 <I2C_Slave_ISR_IT+0x1f2>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2240      	movs	r2, #64	@ 0x40
 800dd58:	2101      	movs	r1, #1
 800dd5a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dd5c:	693b      	ldr	r3, [r7, #16]
 800dd5e:	2220      	movs	r2, #32
 800dd60:	4013      	ands	r3, r2
 800dd62:	d009      	beq.n	800dd78 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2220      	movs	r2, #32
 800dd68:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dd6a:	d005      	beq.n	800dd78 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800dd6c:	693a      	ldr	r2, [r7, #16]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	0011      	movs	r1, r2
 800dd72:	0018      	movs	r0, r3
 800dd74:	f000 fdf2 	bl	800e95c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	2210      	movs	r2, #16
 800dd7c:	4013      	ands	r3, r2
 800dd7e:	d052      	beq.n	800de26 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2210      	movs	r2, #16
 800dd84:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dd86:	d04e      	beq.n	800de26 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d12d      	bne.n	800ddee <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2241      	movs	r2, #65	@ 0x41
 800dd96:	5c9b      	ldrb	r3, [r3, r2]
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b28      	cmp	r3, #40	@ 0x28
 800dd9c:	d10b      	bne.n	800ddb6 <I2C_Slave_ISR_IT+0x86>
 800dd9e:	697a      	ldr	r2, [r7, #20]
 800dda0:	2380      	movs	r3, #128	@ 0x80
 800dda2:	049b      	lsls	r3, r3, #18
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d106      	bne.n	800ddb6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800dda8:	693a      	ldr	r2, [r7, #16]
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	0011      	movs	r1, r2
 800ddae:	0018      	movs	r0, r3
 800ddb0:	f000 fef4 	bl	800eb9c <I2C_ITListenCplt>
 800ddb4:	e036      	b.n	800de24 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2241      	movs	r2, #65	@ 0x41
 800ddba:	5c9b      	ldrb	r3, [r3, r2]
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	2b29      	cmp	r3, #41	@ 0x29
 800ddc0:	d110      	bne.n	800dde4 <I2C_Slave_ISR_IT+0xb4>
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	4a59      	ldr	r2, [pc, #356]	@ (800df2c <I2C_Slave_ISR_IT+0x1fc>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d00c      	beq.n	800dde4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2210      	movs	r2, #16
 800ddd0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	0018      	movs	r0, r3
 800ddd6:	f001 f864 	bl	800eea2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	0018      	movs	r0, r3
 800ddde:	f000 fc8b 	bl	800e6f8 <I2C_ITSlaveSeqCplt>
 800dde2:	e01f      	b.n	800de24 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2210      	movs	r2, #16
 800ddea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ddec:	e091      	b.n	800df12 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2210      	movs	r2, #16
 800ddf4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddfa:	2204      	movs	r2, #4
 800ddfc:	431a      	orrs	r2, r3
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d005      	beq.n	800de14 <I2C_Slave_ISR_IT+0xe4>
 800de08:	697a      	ldr	r2, [r7, #20]
 800de0a:	2380      	movs	r3, #128	@ 0x80
 800de0c:	045b      	lsls	r3, r3, #17
 800de0e:	429a      	cmp	r2, r3
 800de10:	d000      	beq.n	800de14 <I2C_Slave_ISR_IT+0xe4>
 800de12:	e07e      	b.n	800df12 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	0011      	movs	r1, r2
 800de1c:	0018      	movs	r0, r3
 800de1e:	f000 ff15 	bl	800ec4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800de22:	e076      	b.n	800df12 <I2C_Slave_ISR_IT+0x1e2>
 800de24:	e075      	b.n	800df12 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	2204      	movs	r2, #4
 800de2a:	4013      	ands	r3, r2
 800de2c:	d02f      	beq.n	800de8e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2204      	movs	r2, #4
 800de32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800de34:	d02b      	beq.n	800de8e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d018      	beq.n	800de72 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de4a:	b2d2      	uxtb	r2, r2
 800de4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de5c:	3b01      	subs	r3, #1
 800de5e:	b29a      	uxth	r2, r3
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de68:	b29b      	uxth	r3, r3
 800de6a:	3b01      	subs	r3, #1
 800de6c:	b29a      	uxth	r2, r3
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de76:	b29b      	uxth	r3, r3
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d14c      	bne.n	800df16 <I2C_Slave_ISR_IT+0x1e6>
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	4a2b      	ldr	r2, [pc, #172]	@ (800df2c <I2C_Slave_ISR_IT+0x1fc>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d048      	beq.n	800df16 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	0018      	movs	r0, r3
 800de88:	f000 fc36 	bl	800e6f8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800de8c:	e043      	b.n	800df16 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2208      	movs	r2, #8
 800de92:	4013      	ands	r3, r2
 800de94:	d00a      	beq.n	800deac <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2208      	movs	r2, #8
 800de9a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800de9c:	d006      	beq.n	800deac <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	0011      	movs	r1, r2
 800dea4:	0018      	movs	r0, r3
 800dea6:	f000 fb41 	bl	800e52c <I2C_ITAddrCplt>
 800deaa:	e035      	b.n	800df18 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	2202      	movs	r2, #2
 800deb0:	4013      	ands	r3, r2
 800deb2:	d031      	beq.n	800df18 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2202      	movs	r2, #2
 800deb8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800deba:	d02d      	beq.n	800df18 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d018      	beq.n	800def8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deca:	781a      	ldrb	r2, [r3, #0]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	3b01      	subs	r3, #1
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800deee:	3b01      	subs	r3, #1
 800def0:	b29a      	uxth	r2, r3
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800def6:	e00f      	b.n	800df18 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800def8:	697a      	ldr	r2, [r7, #20]
 800defa:	2380      	movs	r3, #128	@ 0x80
 800defc:	045b      	lsls	r3, r3, #17
 800defe:	429a      	cmp	r2, r3
 800df00:	d002      	beq.n	800df08 <I2C_Slave_ISR_IT+0x1d8>
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d107      	bne.n	800df18 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	0018      	movs	r0, r3
 800df0c:	f000 fbf4 	bl	800e6f8 <I2C_ITSlaveSeqCplt>
 800df10:	e002      	b.n	800df18 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800df12:	46c0      	nop			@ (mov r8, r8)
 800df14:	e000      	b.n	800df18 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800df16:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2240      	movs	r2, #64	@ 0x40
 800df1c:	2100      	movs	r1, #0
 800df1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	0018      	movs	r0, r3
 800df24:	46bd      	mov	sp, r7
 800df26:	b006      	add	sp, #24
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	46c0      	nop			@ (mov r8, r8)
 800df2c:	ffff0000 	.word	0xffff0000

0800df30 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800df30:	b590      	push	{r4, r7, lr}
 800df32:	b089      	sub	sp, #36	@ 0x24
 800df34:	af02      	add	r7, sp, #8
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2240      	movs	r2, #64	@ 0x40
 800df40:	5c9b      	ldrb	r3, [r3, r2]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d101      	bne.n	800df4a <I2C_Master_ISR_DMA+0x1a>
 800df46:	2302      	movs	r3, #2
 800df48:	e0e7      	b.n	800e11a <I2C_Master_ISR_DMA+0x1ea>
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2240      	movs	r2, #64	@ 0x40
 800df4e:	2101      	movs	r1, #1
 800df50:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2210      	movs	r2, #16
 800df56:	4013      	ands	r3, r2
 800df58:	d017      	beq.n	800df8a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2210      	movs	r2, #16
 800df5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800df60:	d013      	beq.n	800df8a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2210      	movs	r2, #16
 800df68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df6e:	2204      	movs	r2, #4
 800df70:	431a      	orrs	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2120      	movs	r1, #32
 800df7a:	0018      	movs	r0, r3
 800df7c:	f001 f8c6 	bl	800f10c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	0018      	movs	r0, r3
 800df84:	f000 ff8d 	bl	800eea2 <I2C_Flush_TXDR>
 800df88:	e0c2      	b.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2280      	movs	r2, #128	@ 0x80
 800df8e:	4013      	ands	r3, r2
 800df90:	d100      	bne.n	800df94 <I2C_Master_ISR_DMA+0x64>
 800df92:	e07c      	b.n	800e08e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2240      	movs	r2, #64	@ 0x40
 800df98:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800df9a:	d100      	bne.n	800df9e <I2C_Master_ISR_DMA+0x6e>
 800df9c:	e077      	b.n	800e08e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2140      	movs	r1, #64	@ 0x40
 800dfaa:	438a      	bics	r2, r1
 800dfac:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d055      	beq.n	800e064 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	2312      	movs	r3, #18
 800dfc2:	18fb      	adds	r3, r7, r3
 800dfc4:	0592      	lsls	r2, r2, #22
 800dfc6:	0d92      	lsrs	r2, r2, #22
 800dfc8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfce:	b29b      	uxth	r3, r3
 800dfd0:	2bff      	cmp	r3, #255	@ 0xff
 800dfd2:	d906      	bls.n	800dfe2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	22ff      	movs	r2, #255	@ 0xff
 800dfd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800dfda:	2380      	movs	r3, #128	@ 0x80
 800dfdc:	045b      	lsls	r3, r3, #17
 800dfde:	617b      	str	r3, [r7, #20]
 800dfe0:	e010      	b.n	800e004 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dff0:	4a4c      	ldr	r2, [pc, #304]	@ (800e124 <I2C_Master_ISR_DMA+0x1f4>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d003      	beq.n	800dffe <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dffa:	617b      	str	r3, [r7, #20]
 800dffc:	e002      	b.n	800e004 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800dffe:	2380      	movs	r3, #128	@ 0x80
 800e000:	049b      	lsls	r3, r3, #18
 800e002:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e008:	b2da      	uxtb	r2, r3
 800e00a:	697c      	ldr	r4, [r7, #20]
 800e00c:	2312      	movs	r3, #18
 800e00e:	18fb      	adds	r3, r7, r3
 800e010:	8819      	ldrh	r1, [r3, #0]
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	2300      	movs	r3, #0
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	0023      	movs	r3, r4
 800e01a:	f001 f83d 	bl	800f098 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e022:	b29a      	uxth	r2, r3
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e028:	1ad3      	subs	r3, r2, r3
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2241      	movs	r2, #65	@ 0x41
 800e034:	5c9b      	ldrb	r3, [r3, r2]
 800e036:	b2db      	uxtb	r3, r3
 800e038:	2b22      	cmp	r3, #34	@ 0x22
 800e03a:	d109      	bne.n	800e050 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2180      	movs	r1, #128	@ 0x80
 800e048:	0209      	lsls	r1, r1, #8
 800e04a:	430a      	orrs	r2, r1
 800e04c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e04e:	e05f      	b.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2180      	movs	r1, #128	@ 0x80
 800e05c:	01c9      	lsls	r1, r1, #7
 800e05e:	430a      	orrs	r2, r1
 800e060:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e062:	e055      	b.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	685a      	ldr	r2, [r3, #4]
 800e06a:	2380      	movs	r3, #128	@ 0x80
 800e06c:	049b      	lsls	r3, r3, #18
 800e06e:	401a      	ands	r2, r3
 800e070:	2380      	movs	r3, #128	@ 0x80
 800e072:	049b      	lsls	r3, r3, #18
 800e074:	429a      	cmp	r2, r3
 800e076:	d004      	beq.n	800e082 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	0018      	movs	r0, r3
 800e07c:	f000 fafa 	bl	800e674 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800e080:	e046      	b.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2140      	movs	r1, #64	@ 0x40
 800e086:	0018      	movs	r0, r3
 800e088:	f000 fde0 	bl	800ec4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e08c:	e040      	b.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	2240      	movs	r2, #64	@ 0x40
 800e092:	4013      	ands	r3, r2
 800e094:	d02c      	beq.n	800e0f0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2240      	movs	r2, #64	@ 0x40
 800e09a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e09c:	d028      	beq.n	800e0f0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d11d      	bne.n	800e0e4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	685a      	ldr	r2, [r3, #4]
 800e0ae:	2380      	movs	r3, #128	@ 0x80
 800e0b0:	049b      	lsls	r3, r3, #18
 800e0b2:	401a      	ands	r2, r3
 800e0b4:	2380      	movs	r3, #128	@ 0x80
 800e0b6:	049b      	lsls	r3, r3, #18
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d028      	beq.n	800e10e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0c0:	4a18      	ldr	r2, [pc, #96]	@ (800e124 <I2C_Master_ISR_DMA+0x1f4>)
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d109      	bne.n	800e0da <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	685a      	ldr	r2, [r3, #4]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	2180      	movs	r1, #128	@ 0x80
 800e0d2:	01c9      	lsls	r1, r1, #7
 800e0d4:	430a      	orrs	r2, r1
 800e0d6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800e0d8:	e019      	b.n	800e10e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	0018      	movs	r0, r3
 800e0de:	f000 fac9 	bl	800e674 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800e0e2:	e014      	b.n	800e10e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2140      	movs	r1, #64	@ 0x40
 800e0e8:	0018      	movs	r0, r3
 800e0ea:	f000 fdaf 	bl	800ec4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e0ee:	e00e      	b.n	800e10e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2220      	movs	r2, #32
 800e0f4:	4013      	ands	r3, r2
 800e0f6:	d00b      	beq.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2220      	movs	r2, #32
 800e0fc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e0fe:	d007      	beq.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	0011      	movs	r1, r2
 800e106:	0018      	movs	r0, r3
 800e108:	f000 fb5a 	bl	800e7c0 <I2C_ITMasterCplt>
 800e10c:	e000      	b.n	800e110 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800e10e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2240      	movs	r2, #64	@ 0x40
 800e114:	2100      	movs	r1, #0
 800e116:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	0018      	movs	r0, r3
 800e11c:	46bd      	mov	sp, r7
 800e11e:	b007      	add	sp, #28
 800e120:	bd90      	pop	{r4, r7, pc}
 800e122:	46c0      	nop			@ (mov r8, r8)
 800e124:	ffff0000 	.word	0xffff0000

0800e128 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800e128:	b590      	push	{r4, r7, lr}
 800e12a:	b089      	sub	sp, #36	@ 0x24
 800e12c:	af02      	add	r7, sp, #8
 800e12e:	60f8      	str	r0, [r7, #12]
 800e130:	60b9      	str	r1, [r7, #8]
 800e132:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e134:	4b88      	ldr	r3, [pc, #544]	@ (800e358 <I2C_Mem_ISR_DMA+0x230>)
 800e136:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2240      	movs	r2, #64	@ 0x40
 800e13c:	5c9b      	ldrb	r3, [r3, r2]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d101      	bne.n	800e146 <I2C_Mem_ISR_DMA+0x1e>
 800e142:	2302      	movs	r3, #2
 800e144:	e104      	b.n	800e350 <I2C_Mem_ISR_DMA+0x228>
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2240      	movs	r2, #64	@ 0x40
 800e14a:	2101      	movs	r1, #1
 800e14c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2210      	movs	r2, #16
 800e152:	4013      	ands	r3, r2
 800e154:	d017      	beq.n	800e186 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2210      	movs	r2, #16
 800e15a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e15c:	d013      	beq.n	800e186 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2210      	movs	r2, #16
 800e164:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e16a:	2204      	movs	r2, #4
 800e16c:	431a      	orrs	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2120      	movs	r1, #32
 800e176:	0018      	movs	r0, r3
 800e178:	f000 ffc8 	bl	800f10c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	0018      	movs	r0, r3
 800e180:	f000 fe8f 	bl	800eea2 <I2C_Flush_TXDR>
 800e184:	e0df      	b.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2202      	movs	r2, #2
 800e18a:	4013      	ands	r3, r2
 800e18c:	d00d      	beq.n	800e1aa <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2202      	movs	r2, #2
 800e192:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e194:	d009      	beq.n	800e1aa <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e19e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	4252      	negs	r2, r2
 800e1a6:	651a      	str	r2, [r3, #80]	@ 0x50
 800e1a8:	e0cd      	b.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2280      	movs	r2, #128	@ 0x80
 800e1ae:	4013      	ands	r3, r2
 800e1b0:	d05e      	beq.n	800e270 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2240      	movs	r2, #64	@ 0x40
 800e1b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e1b8:	d05a      	beq.n	800e270 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2110      	movs	r1, #16
 800e1be:	0018      	movs	r0, r3
 800e1c0:	f000 ffa4 	bl	800f10c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d04a      	beq.n	800e264 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	2bff      	cmp	r3, #255	@ 0xff
 800e1d6:	d910      	bls.n	800e1fa <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	22ff      	movs	r2, #255	@ 0xff
 800e1dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1e2:	b299      	uxth	r1, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1e8:	b2da      	uxtb	r2, r3
 800e1ea:	2380      	movs	r3, #128	@ 0x80
 800e1ec:	045b      	lsls	r3, r3, #17
 800e1ee:	68f8      	ldr	r0, [r7, #12]
 800e1f0:	2400      	movs	r4, #0
 800e1f2:	9400      	str	r4, [sp, #0]
 800e1f4:	f000 ff50 	bl	800f098 <I2C_TransferConfig>
 800e1f8:	e011      	b.n	800e21e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1fe:	b29a      	uxth	r2, r3
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e208:	b299      	uxth	r1, r3
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	2380      	movs	r3, #128	@ 0x80
 800e212:	049b      	lsls	r3, r3, #18
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	2400      	movs	r4, #0
 800e218:	9400      	str	r4, [sp, #0]
 800e21a:	f000 ff3d 	bl	800f098 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e222:	b29a      	uxth	r2, r3
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e228:	1ad3      	subs	r3, r2, r3
 800e22a:	b29a      	uxth	r2, r3
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2241      	movs	r2, #65	@ 0x41
 800e234:	5c9b      	ldrb	r3, [r3, r2]
 800e236:	b2db      	uxtb	r3, r3
 800e238:	2b22      	cmp	r3, #34	@ 0x22
 800e23a:	d109      	bne.n	800e250 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2180      	movs	r1, #128	@ 0x80
 800e248:	0209      	lsls	r1, r1, #8
 800e24a:	430a      	orrs	r2, r1
 800e24c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e24e:	e07a      	b.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	2180      	movs	r1, #128	@ 0x80
 800e25c:	01c9      	lsls	r1, r1, #7
 800e25e:	430a      	orrs	r2, r1
 800e260:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e262:	e070      	b.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2140      	movs	r1, #64	@ 0x40
 800e268:	0018      	movs	r0, r3
 800e26a:	f000 fcef 	bl	800ec4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e26e:	e06a      	b.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	2240      	movs	r2, #64	@ 0x40
 800e274:	4013      	ands	r3, r2
 800e276:	d058      	beq.n	800e32a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2240      	movs	r2, #64	@ 0x40
 800e27c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e27e:	d054      	beq.n	800e32a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2241      	movs	r2, #65	@ 0x41
 800e284:	5c9b      	ldrb	r3, [r3, r2]
 800e286:	b2db      	uxtb	r3, r3
 800e288:	2b22      	cmp	r3, #34	@ 0x22
 800e28a:	d101      	bne.n	800e290 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800e28c:	4b33      	ldr	r3, [pc, #204]	@ (800e35c <I2C_Mem_ISR_DMA+0x234>)
 800e28e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e294:	b29b      	uxth	r3, r3
 800e296:	2bff      	cmp	r3, #255	@ 0xff
 800e298:	d911      	bls.n	800e2be <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	22ff      	movs	r2, #255	@ 0xff
 800e29e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2a4:	b299      	uxth	r1, r3
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	2380      	movs	r3, #128	@ 0x80
 800e2ae:	045c      	lsls	r4, r3, #17
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	0023      	movs	r3, r4
 800e2b8:	f000 feee 	bl	800f098 <I2C_TransferConfig>
 800e2bc:	e012      	b.n	800e2e4 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2cc:	b299      	uxth	r1, r3
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2d2:	b2da      	uxtb	r2, r3
 800e2d4:	2380      	movs	r3, #128	@ 0x80
 800e2d6:	049c      	lsls	r4, r3, #18
 800e2d8:	68f8      	ldr	r0, [r7, #12]
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	9300      	str	r3, [sp, #0]
 800e2de:	0023      	movs	r3, r4
 800e2e0:	f000 feda 	bl	800f098 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e2ee:	1ad3      	subs	r3, r2, r3
 800e2f0:	b29a      	uxth	r2, r3
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2241      	movs	r2, #65	@ 0x41
 800e2fa:	5c9b      	ldrb	r3, [r3, r2]
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	2b22      	cmp	r3, #34	@ 0x22
 800e300:	d109      	bne.n	800e316 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2180      	movs	r1, #128	@ 0x80
 800e30e:	0209      	lsls	r1, r1, #8
 800e310:	430a      	orrs	r2, r1
 800e312:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e314:	e017      	b.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	681a      	ldr	r2, [r3, #0]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2180      	movs	r1, #128	@ 0x80
 800e322:	01c9      	lsls	r1, r1, #7
 800e324:	430a      	orrs	r2, r1
 800e326:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e328:	e00d      	b.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	2220      	movs	r2, #32
 800e32e:	4013      	ands	r3, r2
 800e330:	d009      	beq.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2220      	movs	r2, #32
 800e336:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e338:	d005      	beq.n	800e346 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	0011      	movs	r1, r2
 800e340:	0018      	movs	r0, r3
 800e342:	f000 fa3d 	bl	800e7c0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2240      	movs	r2, #64	@ 0x40
 800e34a:	2100      	movs	r1, #0
 800e34c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e34e:	2300      	movs	r3, #0
}
 800e350:	0018      	movs	r0, r3
 800e352:	46bd      	mov	sp, r7
 800e354:	b007      	add	sp, #28
 800e356:	bd90      	pop	{r4, r7, pc}
 800e358:	80002000 	.word	0x80002000
 800e35c:	80002400 	.word	0x80002400

0800e360 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b088      	sub	sp, #32
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e370:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800e372:	2300      	movs	r3, #0
 800e374:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	2240      	movs	r2, #64	@ 0x40
 800e37a:	5c9b      	ldrb	r3, [r3, r2]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d101      	bne.n	800e384 <I2C_Slave_ISR_DMA+0x24>
 800e380:	2302      	movs	r3, #2
 800e382:	e0cd      	b.n	800e520 <I2C_Slave_ISR_DMA+0x1c0>
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2240      	movs	r2, #64	@ 0x40
 800e388:	2101      	movs	r1, #1
 800e38a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	2220      	movs	r2, #32
 800e390:	4013      	ands	r3, r2
 800e392:	d009      	beq.n	800e3a8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2220      	movs	r2, #32
 800e398:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e39a:	d005      	beq.n	800e3a8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800e39c:	68ba      	ldr	r2, [r7, #8]
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	0011      	movs	r1, r2
 800e3a2:	0018      	movs	r0, r3
 800e3a4:	f000 fada 	bl	800e95c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2210      	movs	r2, #16
 800e3ac:	4013      	ands	r3, r2
 800e3ae:	d100      	bne.n	800e3b2 <I2C_Slave_ISR_DMA+0x52>
 800e3b0:	e0a3      	b.n	800e4fa <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2210      	movs	r2, #16
 800e3b6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e3b8:	d100      	bne.n	800e3bc <I2C_Slave_ISR_DMA+0x5c>
 800e3ba:	e09e      	b.n	800e4fa <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	2380      	movs	r3, #128	@ 0x80
 800e3c0:	01db      	lsls	r3, r3, #7
 800e3c2:	4013      	ands	r3, r2
 800e3c4:	d105      	bne.n	800e3d2 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	2380      	movs	r3, #128	@ 0x80
 800e3ca:	021b      	lsls	r3, r3, #8
 800e3cc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e3ce:	d100      	bne.n	800e3d2 <I2C_Slave_ISR_DMA+0x72>
 800e3d0:	e08c      	b.n	800e4ec <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00c      	beq.n	800e3f4 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	2380      	movs	r3, #128	@ 0x80
 800e3de:	021b      	lsls	r3, r3, #8
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	d007      	beq.n	800e3f4 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00c      	beq.n	800e416 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	2380      	movs	r3, #128	@ 0x80
 800e400:	01db      	lsls	r3, r3, #7
 800e402:	4013      	ands	r3, r2
 800e404:	d007      	beq.n	800e416 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d101      	bne.n	800e416 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800e412:	2301      	movs	r3, #1
 800e414:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d12d      	bne.n	800e478 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2241      	movs	r2, #65	@ 0x41
 800e420:	5c9b      	ldrb	r3, [r3, r2]
 800e422:	b2db      	uxtb	r3, r3
 800e424:	2b28      	cmp	r3, #40	@ 0x28
 800e426:	d10b      	bne.n	800e440 <I2C_Slave_ISR_DMA+0xe0>
 800e428:	69ba      	ldr	r2, [r7, #24]
 800e42a:	2380      	movs	r3, #128	@ 0x80
 800e42c:	049b      	lsls	r3, r3, #18
 800e42e:	429a      	cmp	r2, r3
 800e430:	d106      	bne.n	800e440 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	0011      	movs	r1, r2
 800e438:	0018      	movs	r0, r3
 800e43a:	f000 fbaf 	bl	800eb9c <I2C_ITListenCplt>
 800e43e:	e054      	b.n	800e4ea <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2241      	movs	r2, #65	@ 0x41
 800e444:	5c9b      	ldrb	r3, [r3, r2]
 800e446:	b2db      	uxtb	r3, r3
 800e448:	2b29      	cmp	r3, #41	@ 0x29
 800e44a:	d110      	bne.n	800e46e <I2C_Slave_ISR_DMA+0x10e>
 800e44c:	69bb      	ldr	r3, [r7, #24]
 800e44e:	4a36      	ldr	r2, [pc, #216]	@ (800e528 <I2C_Slave_ISR_DMA+0x1c8>)
 800e450:	4293      	cmp	r3, r2
 800e452:	d00c      	beq.n	800e46e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	2210      	movs	r2, #16
 800e45a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	0018      	movs	r0, r3
 800e460:	f000 fd1f 	bl	800eea2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	0018      	movs	r0, r3
 800e468:	f000 f946 	bl	800e6f8 <I2C_ITSlaveSeqCplt>
 800e46c:	e03d      	b.n	800e4ea <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2210      	movs	r2, #16
 800e474:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800e476:	e03e      	b.n	800e4f6 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	2210      	movs	r2, #16
 800e47e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e484:	2204      	movs	r2, #4
 800e486:	431a      	orrs	r2, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800e48c:	2317      	movs	r3, #23
 800e48e:	18fb      	adds	r3, r7, r3
 800e490:	68fa      	ldr	r2, [r7, #12]
 800e492:	2141      	movs	r1, #65	@ 0x41
 800e494:	5c52      	ldrb	r2, [r2, r1]
 800e496:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d004      	beq.n	800e4a8 <I2C_Slave_ISR_DMA+0x148>
 800e49e:	69ba      	ldr	r2, [r7, #24]
 800e4a0:	2380      	movs	r3, #128	@ 0x80
 800e4a2:	045b      	lsls	r3, r3, #17
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d126      	bne.n	800e4f6 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e4a8:	2217      	movs	r2, #23
 800e4aa:	18bb      	adds	r3, r7, r2
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b21      	cmp	r3, #33	@ 0x21
 800e4b0:	d003      	beq.n	800e4ba <I2C_Slave_ISR_DMA+0x15a>
 800e4b2:	18bb      	adds	r3, r7, r2
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2b29      	cmp	r3, #41	@ 0x29
 800e4b8:	d103      	bne.n	800e4c2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2221      	movs	r2, #33	@ 0x21
 800e4be:	631a      	str	r2, [r3, #48]	@ 0x30
 800e4c0:	e00b      	b.n	800e4da <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e4c2:	2217      	movs	r2, #23
 800e4c4:	18bb      	adds	r3, r7, r2
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	2b22      	cmp	r3, #34	@ 0x22
 800e4ca:	d003      	beq.n	800e4d4 <I2C_Slave_ISR_DMA+0x174>
 800e4cc:	18bb      	adds	r3, r7, r2
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4d2:	d102      	bne.n	800e4da <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2222      	movs	r2, #34	@ 0x22
 800e4d8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	0011      	movs	r1, r2
 800e4e2:	0018      	movs	r0, r3
 800e4e4:	f000 fbb2 	bl	800ec4c <I2C_ITError>
      if (treatdmanack == 1U)
 800e4e8:	e005      	b.n	800e4f6 <I2C_Slave_ISR_DMA+0x196>
 800e4ea:	e004      	b.n	800e4f6 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2210      	movs	r2, #16
 800e4f2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e4f4:	e00f      	b.n	800e516 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800e4f6:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e4f8:	e00d      	b.n	800e516 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	2208      	movs	r2, #8
 800e4fe:	4013      	ands	r3, r2
 800e500:	d009      	beq.n	800e516 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2208      	movs	r2, #8
 800e506:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e508:	d005      	beq.n	800e516 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800e50a:	68ba      	ldr	r2, [r7, #8]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	0011      	movs	r1, r2
 800e510:	0018      	movs	r0, r3
 800e512:	f000 f80b 	bl	800e52c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2240      	movs	r2, #64	@ 0x40
 800e51a:	2100      	movs	r1, #0
 800e51c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e51e:	2300      	movs	r3, #0
}
 800e520:	0018      	movs	r0, r3
 800e522:	46bd      	mov	sp, r7
 800e524:	b008      	add	sp, #32
 800e526:	bd80      	pop	{r7, pc}
 800e528:	ffff0000 	.word	0xffff0000

0800e52c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e52c:	b5b0      	push	{r4, r5, r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2241      	movs	r2, #65	@ 0x41
 800e53a:	5c9b      	ldrb	r3, [r3, r2]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	001a      	movs	r2, r3
 800e540:	2328      	movs	r3, #40	@ 0x28
 800e542:	4013      	ands	r3, r2
 800e544:	2b28      	cmp	r3, #40	@ 0x28
 800e546:	d000      	beq.n	800e54a <I2C_ITAddrCplt+0x1e>
 800e548:	e088      	b.n	800e65c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	699b      	ldr	r3, [r3, #24]
 800e550:	0c1b      	lsrs	r3, r3, #16
 800e552:	b2da      	uxtb	r2, r3
 800e554:	250f      	movs	r5, #15
 800e556:	197b      	adds	r3, r7, r5
 800e558:	2101      	movs	r1, #1
 800e55a:	400a      	ands	r2, r1
 800e55c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	699b      	ldr	r3, [r3, #24]
 800e564:	0c1b      	lsrs	r3, r3, #16
 800e566:	b29a      	uxth	r2, r3
 800e568:	200c      	movs	r0, #12
 800e56a:	183b      	adds	r3, r7, r0
 800e56c:	21fe      	movs	r1, #254	@ 0xfe
 800e56e:	400a      	ands	r2, r1
 800e570:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	689b      	ldr	r3, [r3, #8]
 800e578:	b29a      	uxth	r2, r3
 800e57a:	240a      	movs	r4, #10
 800e57c:	193b      	adds	r3, r7, r4
 800e57e:	0592      	lsls	r2, r2, #22
 800e580:	0d92      	lsrs	r2, r2, #22
 800e582:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	b29a      	uxth	r2, r3
 800e58c:	2308      	movs	r3, #8
 800e58e:	18fb      	adds	r3, r7, r3
 800e590:	21fe      	movs	r1, #254	@ 0xfe
 800e592:	400a      	ands	r2, r1
 800e594:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d148      	bne.n	800e630 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800e59e:	0021      	movs	r1, r4
 800e5a0:	187b      	adds	r3, r7, r1
 800e5a2:	881b      	ldrh	r3, [r3, #0]
 800e5a4:	09db      	lsrs	r3, r3, #7
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	183b      	adds	r3, r7, r0
 800e5aa:	881b      	ldrh	r3, [r3, #0]
 800e5ac:	4053      	eors	r3, r2
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	001a      	movs	r2, r3
 800e5b2:	2306      	movs	r3, #6
 800e5b4:	4013      	ands	r3, r2
 800e5b6:	d120      	bne.n	800e5fa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800e5b8:	183b      	adds	r3, r7, r0
 800e5ba:	187a      	adds	r2, r7, r1
 800e5bc:	8812      	ldrh	r2, [r2, #0]
 800e5be:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5c4:	1c5a      	adds	r2, r3, #1
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d14c      	bne.n	800e66c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2208      	movs	r2, #8
 800e5de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2240      	movs	r2, #64	@ 0x40
 800e5e4:	2100      	movs	r1, #0
 800e5e6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e5e8:	183b      	adds	r3, r7, r0
 800e5ea:	881a      	ldrh	r2, [r3, #0]
 800e5ec:	197b      	adds	r3, r7, r5
 800e5ee:	7819      	ldrb	r1, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	0018      	movs	r0, r3
 800e5f4:	f7ff fa39 	bl	800da6a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e5f8:	e038      	b.n	800e66c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800e5fa:	240c      	movs	r4, #12
 800e5fc:	193b      	adds	r3, r7, r4
 800e5fe:	2208      	movs	r2, #8
 800e600:	18ba      	adds	r2, r7, r2
 800e602:	8812      	ldrh	r2, [r2, #0]
 800e604:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e606:	2380      	movs	r3, #128	@ 0x80
 800e608:	021a      	lsls	r2, r3, #8
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	0011      	movs	r1, r2
 800e60e:	0018      	movs	r0, r3
 800e610:	f000 fe0a 	bl	800f228 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2240      	movs	r2, #64	@ 0x40
 800e618:	2100      	movs	r1, #0
 800e61a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e61c:	193b      	adds	r3, r7, r4
 800e61e:	881a      	ldrh	r2, [r3, #0]
 800e620:	230f      	movs	r3, #15
 800e622:	18fb      	adds	r3, r7, r3
 800e624:	7819      	ldrb	r1, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	0018      	movs	r0, r3
 800e62a:	f7ff fa1e 	bl	800da6a <HAL_I2C_AddrCallback>
}
 800e62e:	e01d      	b.n	800e66c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e630:	2380      	movs	r3, #128	@ 0x80
 800e632:	021a      	lsls	r2, r3, #8
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	0011      	movs	r1, r2
 800e638:	0018      	movs	r0, r3
 800e63a:	f000 fdf5 	bl	800f228 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2240      	movs	r2, #64	@ 0x40
 800e642:	2100      	movs	r1, #0
 800e644:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e646:	230c      	movs	r3, #12
 800e648:	18fb      	adds	r3, r7, r3
 800e64a:	881a      	ldrh	r2, [r3, #0]
 800e64c:	230f      	movs	r3, #15
 800e64e:	18fb      	adds	r3, r7, r3
 800e650:	7819      	ldrb	r1, [r3, #0]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	0018      	movs	r0, r3
 800e656:	f7ff fa08 	bl	800da6a <HAL_I2C_AddrCallback>
}
 800e65a:	e007      	b.n	800e66c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2208      	movs	r2, #8
 800e662:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2240      	movs	r2, #64	@ 0x40
 800e668:	2100      	movs	r1, #0
 800e66a:	5499      	strb	r1, [r3, r2]
}
 800e66c:	46c0      	nop			@ (mov r8, r8)
 800e66e:	46bd      	mov	sp, r7
 800e670:	b004      	add	sp, #16
 800e672:	bdb0      	pop	{r4, r5, r7, pc}

0800e674 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b082      	sub	sp, #8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2242      	movs	r2, #66	@ 0x42
 800e680:	2100      	movs	r1, #0
 800e682:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2241      	movs	r2, #65	@ 0x41
 800e688:	5c9b      	ldrb	r3, [r3, r2]
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	2b21      	cmp	r3, #33	@ 0x21
 800e68e:	d117      	bne.n	800e6c0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2241      	movs	r2, #65	@ 0x41
 800e694:	2120      	movs	r1, #32
 800e696:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2211      	movs	r2, #17
 800e69c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2101      	movs	r1, #1
 800e6a8:	0018      	movs	r0, r3
 800e6aa:	f000 fdbd 	bl	800f228 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2240      	movs	r2, #64	@ 0x40
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	0018      	movs	r0, r3
 800e6ba:	f7ff f9b6 	bl	800da2a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e6be:	e016      	b.n	800e6ee <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2241      	movs	r2, #65	@ 0x41
 800e6c4:	2120      	movs	r1, #32
 800e6c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2212      	movs	r2, #18
 800e6cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2102      	movs	r1, #2
 800e6d8:	0018      	movs	r0, r3
 800e6da:	f000 fda5 	bl	800f228 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2240      	movs	r2, #64	@ 0x40
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	0018      	movs	r0, r3
 800e6ea:	f7ff f9a6 	bl	800da3a <HAL_I2C_MasterRxCpltCallback>
}
 800e6ee:	46c0      	nop			@ (mov r8, r8)
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	b002      	add	sp, #8
 800e6f4:	bd80      	pop	{r7, pc}
	...

0800e6f8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2242      	movs	r2, #66	@ 0x42
 800e70c:	2100      	movs	r1, #0
 800e70e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e710:	68fa      	ldr	r2, [r7, #12]
 800e712:	2380      	movs	r3, #128	@ 0x80
 800e714:	01db      	lsls	r3, r3, #7
 800e716:	4013      	ands	r3, r2
 800e718:	d008      	beq.n	800e72c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4924      	ldr	r1, [pc, #144]	@ (800e7b8 <I2C_ITSlaveSeqCplt+0xc0>)
 800e726:	400a      	ands	r2, r1
 800e728:	601a      	str	r2, [r3, #0]
 800e72a:	e00c      	b.n	800e746 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e72c:	68fa      	ldr	r2, [r7, #12]
 800e72e:	2380      	movs	r3, #128	@ 0x80
 800e730:	021b      	lsls	r3, r3, #8
 800e732:	4013      	ands	r3, r2
 800e734:	d007      	beq.n	800e746 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	491e      	ldr	r1, [pc, #120]	@ (800e7bc <I2C_ITSlaveSeqCplt+0xc4>)
 800e742:	400a      	ands	r2, r1
 800e744:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2241      	movs	r2, #65	@ 0x41
 800e74a:	5c9b      	ldrb	r3, [r3, r2]
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b29      	cmp	r3, #41	@ 0x29
 800e750:	d114      	bne.n	800e77c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2241      	movs	r2, #65	@ 0x41
 800e756:	2128      	movs	r1, #40	@ 0x28
 800e758:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2221      	movs	r2, #33	@ 0x21
 800e75e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2101      	movs	r1, #1
 800e764:	0018      	movs	r0, r3
 800e766:	f000 fd5f 	bl	800f228 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2240      	movs	r2, #64	@ 0x40
 800e76e:	2100      	movs	r1, #0
 800e770:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	0018      	movs	r0, r3
 800e776:	f7ff f968 	bl	800da4a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e77a:	e019      	b.n	800e7b0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2241      	movs	r2, #65	@ 0x41
 800e780:	5c9b      	ldrb	r3, [r3, r2]
 800e782:	b2db      	uxtb	r3, r3
 800e784:	2b2a      	cmp	r3, #42	@ 0x2a
 800e786:	d113      	bne.n	800e7b0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2241      	movs	r2, #65	@ 0x41
 800e78c:	2128      	movs	r1, #40	@ 0x28
 800e78e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2222      	movs	r2, #34	@ 0x22
 800e794:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	2102      	movs	r1, #2
 800e79a:	0018      	movs	r0, r3
 800e79c:	f000 fd44 	bl	800f228 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2240      	movs	r2, #64	@ 0x40
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	0018      	movs	r0, r3
 800e7ac:	f7ff f955 	bl	800da5a <HAL_I2C_SlaveRxCpltCallback>
}
 800e7b0:	46c0      	nop			@ (mov r8, r8)
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	b004      	add	sp, #16
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	ffffbfff 	.word	0xffffbfff
 800e7bc:	ffff7fff 	.word	0xffff7fff

0800e7c0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2220      	movs	r2, #32
 800e7d4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2241      	movs	r2, #65	@ 0x41
 800e7da:	5c9b      	ldrb	r3, [r3, r2]
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	2b21      	cmp	r3, #33	@ 0x21
 800e7e0:	d108      	bne.n	800e7f4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	2101      	movs	r1, #1
 800e7e6:	0018      	movs	r0, r3
 800e7e8:	f000 fd1e 	bl	800f228 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2211      	movs	r2, #17
 800e7f0:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7f2:	e00d      	b.n	800e810 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2241      	movs	r2, #65	@ 0x41
 800e7f8:	5c9b      	ldrb	r3, [r3, r2]
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b22      	cmp	r3, #34	@ 0x22
 800e7fe:	d107      	bne.n	800e810 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2102      	movs	r1, #2
 800e804:	0018      	movs	r0, r3
 800e806:	f000 fd0f 	bl	800f228 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2212      	movs	r2, #18
 800e80e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	494e      	ldr	r1, [pc, #312]	@ (800e954 <I2C_ITMasterCplt+0x194>)
 800e81c:	400a      	ands	r2, r1
 800e81e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2200      	movs	r2, #0
 800e824:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a4b      	ldr	r2, [pc, #300]	@ (800e958 <I2C_ITMasterCplt+0x198>)
 800e82a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2210      	movs	r2, #16
 800e830:	4013      	ands	r3, r2
 800e832:	d009      	beq.n	800e848 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2210      	movs	r2, #16
 800e83a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e840:	2204      	movs	r2, #4
 800e842:	431a      	orrs	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2241      	movs	r2, #65	@ 0x41
 800e84c:	5c9b      	ldrb	r3, [r3, r2]
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	2b60      	cmp	r3, #96	@ 0x60
 800e852:	d109      	bne.n	800e868 <I2C_ITMasterCplt+0xa8>
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	2204      	movs	r2, #4
 800e858:	4013      	ands	r3, r2
 800e85a:	d005      	beq.n	800e868 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e862:	b2db      	uxtb	r3, r3
 800e864:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800e866:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	0018      	movs	r0, r3
 800e86c:	f000 fb19 	bl	800eea2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e874:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2241      	movs	r2, #65	@ 0x41
 800e87a:	5c9b      	ldrb	r3, [r3, r2]
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	2b60      	cmp	r3, #96	@ 0x60
 800e880:	d002      	beq.n	800e888 <I2C_ITMasterCplt+0xc8>
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d007      	beq.n	800e898 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	0011      	movs	r1, r2
 800e890:	0018      	movs	r0, r3
 800e892:	f000 f9db 	bl	800ec4c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e896:	e058      	b.n	800e94a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2241      	movs	r2, #65	@ 0x41
 800e89c:	5c9b      	ldrb	r3, [r3, r2]
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	2b21      	cmp	r3, #33	@ 0x21
 800e8a2:	d126      	bne.n	800e8f2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2241      	movs	r2, #65	@ 0x41
 800e8a8:	2120      	movs	r1, #32
 800e8aa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2242      	movs	r2, #66	@ 0x42
 800e8b6:	5c9b      	ldrb	r3, [r3, r2]
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	2b40      	cmp	r3, #64	@ 0x40
 800e8bc:	d10c      	bne.n	800e8d8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2242      	movs	r2, #66	@ 0x42
 800e8c2:	2100      	movs	r1, #0
 800e8c4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2240      	movs	r2, #64	@ 0x40
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	0018      	movs	r0, r3
 800e8d2:	f7ff f8e2 	bl	800da9a <HAL_I2C_MemTxCpltCallback>
}
 800e8d6:	e038      	b.n	800e94a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2242      	movs	r2, #66	@ 0x42
 800e8dc:	2100      	movs	r1, #0
 800e8de:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2240      	movs	r2, #64	@ 0x40
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	0018      	movs	r0, r3
 800e8ec:	f7ff f89d 	bl	800da2a <HAL_I2C_MasterTxCpltCallback>
}
 800e8f0:	e02b      	b.n	800e94a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2241      	movs	r2, #65	@ 0x41
 800e8f6:	5c9b      	ldrb	r3, [r3, r2]
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b22      	cmp	r3, #34	@ 0x22
 800e8fc:	d125      	bne.n	800e94a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2241      	movs	r2, #65	@ 0x41
 800e902:	2120      	movs	r1, #32
 800e904:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2200      	movs	r2, #0
 800e90a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2242      	movs	r2, #66	@ 0x42
 800e910:	5c9b      	ldrb	r3, [r3, r2]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b40      	cmp	r3, #64	@ 0x40
 800e916:	d10c      	bne.n	800e932 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2242      	movs	r2, #66	@ 0x42
 800e91c:	2100      	movs	r1, #0
 800e91e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2240      	movs	r2, #64	@ 0x40
 800e924:	2100      	movs	r1, #0
 800e926:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	0018      	movs	r0, r3
 800e92c:	f7ff f8bd 	bl	800daaa <HAL_I2C_MemRxCpltCallback>
}
 800e930:	e00b      	b.n	800e94a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2242      	movs	r2, #66	@ 0x42
 800e936:	2100      	movs	r1, #0
 800e938:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2240      	movs	r2, #64	@ 0x40
 800e93e:	2100      	movs	r1, #0
 800e940:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	0018      	movs	r0, r3
 800e946:	f7ff f878 	bl	800da3a <HAL_I2C_MasterRxCpltCallback>
}
 800e94a:	46c0      	nop			@ (mov r8, r8)
 800e94c:	46bd      	mov	sp, r7
 800e94e:	b006      	add	sp, #24
 800e950:	bd80      	pop	{r7, pc}
 800e952:	46c0      	nop			@ (mov r8, r8)
 800e954:	fe00e800 	.word	0xfe00e800
 800e958:	ffff0000 	.word	0xffff0000

0800e95c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e972:	200f      	movs	r0, #15
 800e974:	183b      	adds	r3, r7, r0
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	2141      	movs	r1, #65	@ 0x41
 800e97a:	5c52      	ldrb	r2, [r2, r1]
 800e97c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	2220      	movs	r2, #32
 800e984:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e986:	183b      	adds	r3, r7, r0
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	2b21      	cmp	r3, #33	@ 0x21
 800e98c:	d003      	beq.n	800e996 <I2C_ITSlaveCplt+0x3a>
 800e98e:	183b      	adds	r3, r7, r0
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b29      	cmp	r3, #41	@ 0x29
 800e994:	d109      	bne.n	800e9aa <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e996:	4a7b      	ldr	r2, [pc, #492]	@ (800eb84 <I2C_ITSlaveCplt+0x228>)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	0011      	movs	r1, r2
 800e99c:	0018      	movs	r0, r3
 800e99e:	f000 fc43 	bl	800f228 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2221      	movs	r2, #33	@ 0x21
 800e9a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800e9a8:	e011      	b.n	800e9ce <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e9aa:	220f      	movs	r2, #15
 800e9ac:	18bb      	adds	r3, r7, r2
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	2b22      	cmp	r3, #34	@ 0x22
 800e9b2:	d003      	beq.n	800e9bc <I2C_ITSlaveCplt+0x60>
 800e9b4:	18bb      	adds	r3, r7, r2
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9ba:	d108      	bne.n	800e9ce <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e9bc:	4a72      	ldr	r2, [pc, #456]	@ (800eb88 <I2C_ITSlaveCplt+0x22c>)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	0011      	movs	r1, r2
 800e9c2:	0018      	movs	r0, r3
 800e9c4:	f000 fc30 	bl	800f228 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2222      	movs	r2, #34	@ 0x22
 800e9cc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	685a      	ldr	r2, [r3, #4]
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2180      	movs	r1, #128	@ 0x80
 800e9da:	0209      	lsls	r1, r1, #8
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	685a      	ldr	r2, [r3, #4]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4968      	ldr	r1, [pc, #416]	@ (800eb8c <I2C_ITSlaveCplt+0x230>)
 800e9ec:	400a      	ands	r2, r1
 800e9ee:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	0018      	movs	r0, r3
 800e9f4:	f000 fa55 	bl	800eea2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e9f8:	693a      	ldr	r2, [r7, #16]
 800e9fa:	2380      	movs	r3, #128	@ 0x80
 800e9fc:	01db      	lsls	r3, r3, #7
 800e9fe:	4013      	ands	r3, r2
 800ea00:	d013      	beq.n	800ea2a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4960      	ldr	r1, [pc, #384]	@ (800eb90 <I2C_ITSlaveCplt+0x234>)
 800ea0e:	400a      	ands	r2, r1
 800ea10:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d01f      	beq.n	800ea5a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	685b      	ldr	r3, [r3, #4]
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ea28:	e017      	b.n	800ea5a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ea2a:	693a      	ldr	r2, [r7, #16]
 800ea2c:	2380      	movs	r3, #128	@ 0x80
 800ea2e:	021b      	lsls	r3, r3, #8
 800ea30:	4013      	ands	r3, r2
 800ea32:	d012      	beq.n	800ea5a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	681a      	ldr	r2, [r3, #0]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4955      	ldr	r1, [pc, #340]	@ (800eb94 <I2C_ITSlaveCplt+0x238>)
 800ea40:	400a      	ands	r2, r1
 800ea42:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d006      	beq.n	800ea5a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	2204      	movs	r2, #4
 800ea5e:	4013      	ands	r3, r2
 800ea60:	d020      	beq.n	800eaa4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	2204      	movs	r2, #4
 800ea66:	4393      	bics	r3, r2
 800ea68:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea74:	b2d2      	uxtb	r2, r2
 800ea76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea7c:	1c5a      	adds	r2, r3, #1
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00c      	beq.n	800eaa4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ea8e:	3b01      	subs	r3, #1
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	3b01      	subs	r3, #1
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d005      	beq.n	800eaba <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eab2:	2204      	movs	r2, #4
 800eab4:	431a      	orrs	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2242      	movs	r2, #66	@ 0x42
 800eabe:	2100      	movs	r1, #0
 800eac0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d013      	beq.n	800eaf8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	0011      	movs	r1, r2
 800ead8:	0018      	movs	r0, r3
 800eada:	f000 f8b7 	bl	800ec4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2241      	movs	r2, #65	@ 0x41
 800eae2:	5c9b      	ldrb	r3, [r3, r2]
 800eae4:	b2db      	uxtb	r3, r3
 800eae6:	2b28      	cmp	r3, #40	@ 0x28
 800eae8:	d147      	bne.n	800eb7a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	0011      	movs	r1, r2
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	f000 f853 	bl	800eb9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800eaf6:	e040      	b.n	800eb7a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eafc:	4a26      	ldr	r2, [pc, #152]	@ (800eb98 <I2C_ITSlaveCplt+0x23c>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d016      	beq.n	800eb30 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	0018      	movs	r0, r3
 800eb06:	f7ff fdf7 	bl	800e6f8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4a22      	ldr	r2, [pc, #136]	@ (800eb98 <I2C_ITSlaveCplt+0x23c>)
 800eb0e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2241      	movs	r2, #65	@ 0x41
 800eb14:	2120      	movs	r1, #32
 800eb16:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	2240      	movs	r2, #64	@ 0x40
 800eb22:	2100      	movs	r1, #0
 800eb24:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	0018      	movs	r0, r3
 800eb2a:	f7fe ffae 	bl	800da8a <HAL_I2C_ListenCpltCallback>
}
 800eb2e:	e024      	b.n	800eb7a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2241      	movs	r2, #65	@ 0x41
 800eb34:	5c9b      	ldrb	r3, [r3, r2]
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	2b22      	cmp	r3, #34	@ 0x22
 800eb3a:	d10f      	bne.n	800eb5c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2241      	movs	r2, #65	@ 0x41
 800eb40:	2120      	movs	r1, #32
 800eb42:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2240      	movs	r2, #64	@ 0x40
 800eb4e:	2100      	movs	r1, #0
 800eb50:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	0018      	movs	r0, r3
 800eb56:	f7fe ff80 	bl	800da5a <HAL_I2C_SlaveRxCpltCallback>
}
 800eb5a:	e00e      	b.n	800eb7a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2241      	movs	r2, #65	@ 0x41
 800eb60:	2120      	movs	r1, #32
 800eb62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2240      	movs	r2, #64	@ 0x40
 800eb6e:	2100      	movs	r1, #0
 800eb70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	0018      	movs	r0, r3
 800eb76:	f7fe ff68 	bl	800da4a <HAL_I2C_SlaveTxCpltCallback>
}
 800eb7a:	46c0      	nop			@ (mov r8, r8)
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	b006      	add	sp, #24
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	46c0      	nop			@ (mov r8, r8)
 800eb84:	00008001 	.word	0x00008001
 800eb88:	00008002 	.word	0x00008002
 800eb8c:	fe00e800 	.word	0xfe00e800
 800eb90:	ffffbfff 	.word	0xffffbfff
 800eb94:	ffff7fff 	.word	0xffff7fff
 800eb98:	ffff0000 	.word	0xffff0000

0800eb9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a26      	ldr	r2, [pc, #152]	@ (800ec44 <I2C_ITListenCplt+0xa8>)
 800ebaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2200      	movs	r2, #0
 800ebb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2241      	movs	r2, #65	@ 0x41
 800ebb6:	2120      	movs	r1, #32
 800ebb8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2242      	movs	r2, #66	@ 0x42
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	2204      	movs	r2, #4
 800ebcc:	4013      	ands	r3, r2
 800ebce:	d022      	beq.n	800ec16 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebda:	b2d2      	uxtb	r2, r2
 800ebdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebe2:	1c5a      	adds	r2, r3, #1
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d012      	beq.n	800ec16 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	3b01      	subs	r3, #1
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec0e:	2204      	movs	r2, #4
 800ec10:	431a      	orrs	r2, r3
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ec16:	4a0c      	ldr	r2, [pc, #48]	@ (800ec48 <I2C_ITListenCplt+0xac>)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	0011      	movs	r1, r2
 800ec1c:	0018      	movs	r0, r3
 800ec1e:	f000 fb03 	bl	800f228 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	2210      	movs	r2, #16
 800ec28:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2240      	movs	r2, #64	@ 0x40
 800ec2e:	2100      	movs	r1, #0
 800ec30:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	0018      	movs	r0, r3
 800ec36:	f7fe ff28 	bl	800da8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ec3a:	46c0      	nop			@ (mov r8, r8)
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	b002      	add	sp, #8
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	46c0      	nop			@ (mov r8, r8)
 800ec44:	ffff0000 	.word	0xffff0000
 800ec48:	00008003 	.word	0x00008003

0800ec4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ec56:	200f      	movs	r0, #15
 800ec58:	183b      	adds	r3, r7, r0
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	2141      	movs	r1, #65	@ 0x41
 800ec5e:	5c52      	ldrb	r2, [r2, r1]
 800ec60:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2242      	movs	r2, #66	@ 0x42
 800ec66:	2100      	movs	r1, #0
 800ec68:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	4a72      	ldr	r2, [pc, #456]	@ (800ee38 <I2C_ITError+0x1ec>)
 800ec6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ec7a:	683b      	ldr	r3, [r7, #0]
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ec82:	183b      	adds	r3, r7, r0
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	2b28      	cmp	r3, #40	@ 0x28
 800ec88:	d007      	beq.n	800ec9a <I2C_ITError+0x4e>
 800ec8a:	183b      	adds	r3, r7, r0
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	2b29      	cmp	r3, #41	@ 0x29
 800ec90:	d003      	beq.n	800ec9a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ec92:	183b      	adds	r3, r7, r0
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ec98:	d10c      	bne.n	800ecb4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2103      	movs	r1, #3
 800ec9e:	0018      	movs	r0, r3
 800eca0:	f000 fac2 	bl	800f228 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2241      	movs	r2, #65	@ 0x41
 800eca8:	2128      	movs	r1, #40	@ 0x28
 800ecaa:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4a63      	ldr	r2, [pc, #396]	@ (800ee3c <I2C_ITError+0x1f0>)
 800ecb0:	635a      	str	r2, [r3, #52]	@ 0x34
 800ecb2:	e032      	b.n	800ed1a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ecb4:	4a62      	ldr	r2, [pc, #392]	@ (800ee40 <I2C_ITError+0x1f4>)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	0011      	movs	r1, r2
 800ecba:	0018      	movs	r0, r3
 800ecbc:	f000 fab4 	bl	800f228 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	0018      	movs	r0, r3
 800ecc4:	f000 f8ed 	bl	800eea2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2241      	movs	r2, #65	@ 0x41
 800eccc:	5c9b      	ldrb	r3, [r3, r2]
 800ecce:	b2db      	uxtb	r3, r3
 800ecd0:	2b60      	cmp	r3, #96	@ 0x60
 800ecd2:	d01f      	beq.n	800ed14 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2241      	movs	r2, #65	@ 0x41
 800ecd8:	2120      	movs	r1, #32
 800ecda:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	699b      	ldr	r3, [r3, #24]
 800ece2:	2220      	movs	r2, #32
 800ece4:	4013      	ands	r3, r2
 800ece6:	2b20      	cmp	r3, #32
 800ece8:	d114      	bne.n	800ed14 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	699b      	ldr	r3, [r3, #24]
 800ecf0:	2210      	movs	r2, #16
 800ecf2:	4013      	ands	r3, r2
 800ecf4:	2b10      	cmp	r3, #16
 800ecf6:	d109      	bne.n	800ed0c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2210      	movs	r2, #16
 800ecfe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed04:	2204      	movs	r2, #4
 800ed06:	431a      	orrs	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2220      	movs	r2, #32
 800ed12:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d03b      	beq.n	800eda0 <I2C_ITError+0x154>
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b11      	cmp	r3, #17
 800ed2c:	d002      	beq.n	800ed34 <I2C_ITError+0xe8>
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	2b21      	cmp	r3, #33	@ 0x21
 800ed32:	d135      	bne.n	800eda0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	2380      	movs	r3, #128	@ 0x80
 800ed3c:	01db      	lsls	r3, r3, #7
 800ed3e:	401a      	ands	r2, r3
 800ed40:	2380      	movs	r3, #128	@ 0x80
 800ed42:	01db      	lsls	r3, r3, #7
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d107      	bne.n	800ed58 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	493c      	ldr	r1, [pc, #240]	@ (800ee44 <I2C_ITError+0x1f8>)
 800ed54:	400a      	ands	r2, r1
 800ed56:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed5c:	0018      	movs	r0, r3
 800ed5e:	f7fd ff8e 	bl	800cc7e <HAL_DMA_GetState>
 800ed62:	0003      	movs	r3, r0
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d016      	beq.n	800ed96 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed6c:	4a36      	ldr	r2, [pc, #216]	@ (800ee48 <I2C_ITError+0x1fc>)
 800ed6e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2240      	movs	r2, #64	@ 0x40
 800ed74:	2100      	movs	r1, #0
 800ed76:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed7c:	0018      	movs	r0, r3
 800ed7e:	f7fd fe89 	bl	800ca94 <HAL_DMA_Abort_IT>
 800ed82:	1e03      	subs	r3, r0, #0
 800ed84:	d051      	beq.n	800ee2a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed90:	0018      	movs	r0, r3
 800ed92:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ed94:	e049      	b.n	800ee2a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	0018      	movs	r0, r3
 800ed9a:	f000 f859 	bl	800ee50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ed9e:	e044      	b.n	800ee2a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d03b      	beq.n	800ee20 <I2C_ITError+0x1d4>
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	2b12      	cmp	r3, #18
 800edac:	d002      	beq.n	800edb4 <I2C_ITError+0x168>
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	2b22      	cmp	r3, #34	@ 0x22
 800edb2:	d135      	bne.n	800ee20 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	2380      	movs	r3, #128	@ 0x80
 800edbc:	021b      	lsls	r3, r3, #8
 800edbe:	401a      	ands	r2, r3
 800edc0:	2380      	movs	r3, #128	@ 0x80
 800edc2:	021b      	lsls	r3, r3, #8
 800edc4:	429a      	cmp	r2, r3
 800edc6:	d107      	bne.n	800edd8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	681a      	ldr	r2, [r3, #0]
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	491e      	ldr	r1, [pc, #120]	@ (800ee4c <I2C_ITError+0x200>)
 800edd4:	400a      	ands	r2, r1
 800edd6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eddc:	0018      	movs	r0, r3
 800edde:	f7fd ff4e 	bl	800cc7e <HAL_DMA_GetState>
 800ede2:	0003      	movs	r3, r0
 800ede4:	2b01      	cmp	r3, #1
 800ede6:	d016      	beq.n	800ee16 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edec:	4a16      	ldr	r2, [pc, #88]	@ (800ee48 <I2C_ITError+0x1fc>)
 800edee:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2240      	movs	r2, #64	@ 0x40
 800edf4:	2100      	movs	r1, #0
 800edf6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800edfc:	0018      	movs	r0, r3
 800edfe:	f7fd fe49 	bl	800ca94 <HAL_DMA_Abort_IT>
 800ee02:	1e03      	subs	r3, r0, #0
 800ee04:	d013      	beq.n	800ee2e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee10:	0018      	movs	r0, r3
 800ee12:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ee14:	e00b      	b.n	800ee2e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	0018      	movs	r0, r3
 800ee1a:	f000 f819 	bl	800ee50 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ee1e:	e006      	b.n	800ee2e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	0018      	movs	r0, r3
 800ee24:	f000 f814 	bl	800ee50 <I2C_TreatErrorCallback>
  }
}
 800ee28:	e002      	b.n	800ee30 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ee2a:	46c0      	nop			@ (mov r8, r8)
 800ee2c:	e000      	b.n	800ee30 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ee2e:	46c0      	nop			@ (mov r8, r8)
}
 800ee30:	46c0      	nop			@ (mov r8, r8)
 800ee32:	46bd      	mov	sp, r7
 800ee34:	b004      	add	sp, #16
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	ffff0000 	.word	0xffff0000
 800ee3c:	0800dd31 	.word	0x0800dd31
 800ee40:	00008003 	.word	0x00008003
 800ee44:	ffffbfff 	.word	0xffffbfff
 800ee48:	0800f05b 	.word	0x0800f05b
 800ee4c:	ffff7fff 	.word	0xffff7fff

0800ee50 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b082      	sub	sp, #8
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2241      	movs	r2, #65	@ 0x41
 800ee5c:	5c9b      	ldrb	r3, [r3, r2]
 800ee5e:	b2db      	uxtb	r3, r3
 800ee60:	2b60      	cmp	r3, #96	@ 0x60
 800ee62:	d10f      	bne.n	800ee84 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2241      	movs	r2, #65	@ 0x41
 800ee68:	2120      	movs	r1, #32
 800ee6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2240      	movs	r2, #64	@ 0x40
 800ee76:	2100      	movs	r1, #0
 800ee78:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	0018      	movs	r0, r3
 800ee7e:	f7fe fe24 	bl	800daca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ee82:	e00a      	b.n	800ee9a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2240      	movs	r2, #64	@ 0x40
 800ee8e:	2100      	movs	r1, #0
 800ee90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	0018      	movs	r0, r3
 800ee96:	f7fe fe10 	bl	800daba <HAL_I2C_ErrorCallback>
}
 800ee9a:	46c0      	nop			@ (mov r8, r8)
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	b002      	add	sp, #8
 800eea0:	bd80      	pop	{r7, pc}

0800eea2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b082      	sub	sp, #8
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	699b      	ldr	r3, [r3, #24]
 800eeb0:	2202      	movs	r2, #2
 800eeb2:	4013      	ands	r3, r2
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d103      	bne.n	800eec0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2200      	movs	r2, #0
 800eebe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	699b      	ldr	r3, [r3, #24]
 800eec6:	2201      	movs	r2, #1
 800eec8:	4013      	ands	r3, r2
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d007      	beq.n	800eede <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	699a      	ldr	r2, [r3, #24]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2101      	movs	r1, #1
 800eeda:	430a      	orrs	r2, r1
 800eedc:	619a      	str	r2, [r3, #24]
  }
}
 800eede:	46c0      	nop			@ (mov r8, r8)
 800eee0:	46bd      	mov	sp, r7
 800eee2:	b002      	add	sp, #8
 800eee4:	bd80      	pop	{r7, pc}
	...

0800eee8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eef4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4920      	ldr	r1, [pc, #128]	@ (800ef84 <I2C_DMAMasterTransmitCplt+0x9c>)
 800ef02:	400a      	ands	r2, r1
 800ef04:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d105      	bne.n	800ef1c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	2120      	movs	r1, #32
 800ef14:	0018      	movs	r0, r3
 800ef16:	f000 f8f9 	bl	800f10c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ef1a:	e02e      	b.n	800ef7a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ef24:	189a      	adds	r2, r3, r2
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	2bff      	cmp	r3, #255	@ 0xff
 800ef32:	d903      	bls.n	800ef3c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	22ff      	movs	r2, #255	@ 0xff
 800ef38:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ef3a:	e004      	b.n	800ef46 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef4e:	0019      	movs	r1, r3
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	3328      	adds	r3, #40	@ 0x28
 800ef56:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ef5c:	f7fd fcf4 	bl	800c948 <HAL_DMA_Start_IT>
 800ef60:	1e03      	subs	r3, r0, #0
 800ef62:	d005      	beq.n	800ef70 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2110      	movs	r1, #16
 800ef68:	0018      	movs	r0, r3
 800ef6a:	f7ff fe6f 	bl	800ec4c <I2C_ITError>
}
 800ef6e:	e004      	b.n	800ef7a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2140      	movs	r1, #64	@ 0x40
 800ef74:	0018      	movs	r0, r3
 800ef76:	f000 f8c9 	bl	800f10c <I2C_Enable_IRQ>
}
 800ef7a:	46c0      	nop			@ (mov r8, r8)
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	b004      	add	sp, #16
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	46c0      	nop			@ (mov r8, r8)
 800ef84:	ffffbfff 	.word	0xffffbfff

0800ef88 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef94:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	681a      	ldr	r2, [r3, #0]
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	4920      	ldr	r1, [pc, #128]	@ (800f024 <I2C_DMAMasterReceiveCplt+0x9c>)
 800efa2:	400a      	ands	r2, r1
 800efa4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efaa:	b29b      	uxth	r3, r3
 800efac:	2b00      	cmp	r3, #0
 800efae:	d105      	bne.n	800efbc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2120      	movs	r1, #32
 800efb4:	0018      	movs	r0, r3
 800efb6:	f000 f8a9 	bl	800f10c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800efba:	e02e      	b.n	800f01a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800efc4:	189a      	adds	r2, r3, r2
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efce:	b29b      	uxth	r3, r3
 800efd0:	2bff      	cmp	r3, #255	@ 0xff
 800efd2:	d903      	bls.n	800efdc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	22ff      	movs	r2, #255	@ 0xff
 800efd8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800efda:	e004      	b.n	800efe6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efe0:	b29a      	uxth	r2, r3
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	3324      	adds	r3, #36	@ 0x24
 800eff0:	0019      	movs	r1, r3
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eff6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800effc:	f7fd fca4 	bl	800c948 <HAL_DMA_Start_IT>
 800f000:	1e03      	subs	r3, r0, #0
 800f002:	d005      	beq.n	800f010 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2110      	movs	r1, #16
 800f008:	0018      	movs	r0, r3
 800f00a:	f7ff fe1f 	bl	800ec4c <I2C_ITError>
}
 800f00e:	e004      	b.n	800f01a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2140      	movs	r1, #64	@ 0x40
 800f014:	0018      	movs	r0, r3
 800f016:	f000 f879 	bl	800f10c <I2C_Enable_IRQ>
}
 800f01a:	46c0      	nop			@ (mov r8, r8)
 800f01c:	46bd      	mov	sp, r7
 800f01e:	b004      	add	sp, #16
 800f020:	bd80      	pop	{r7, pc}
 800f022:	46c0      	nop			@ (mov r8, r8)
 800f024:	ffff7fff 	.word	0xffff7fff

0800f028 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f034:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2180      	movs	r1, #128	@ 0x80
 800f042:	0209      	lsls	r1, r1, #8
 800f044:	430a      	orrs	r2, r1
 800f046:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2110      	movs	r1, #16
 800f04c:	0018      	movs	r0, r3
 800f04e:	f7ff fdfd 	bl	800ec4c <I2C_ITError>
}
 800f052:	46c0      	nop			@ (mov r8, r8)
 800f054:	46bd      	mov	sp, r7
 800f056:	b004      	add	sp, #16
 800f058:	bd80      	pop	{r7, pc}

0800f05a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b084      	sub	sp, #16
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f066:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d003      	beq.n	800f078 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f074:	2200      	movs	r2, #0
 800f076:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d003      	beq.n	800f088 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f084:	2200      	movs	r2, #0
 800f086:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	0018      	movs	r0, r3
 800f08c:	f7ff fee0 	bl	800ee50 <I2C_TreatErrorCallback>
}
 800f090:	46c0      	nop			@ (mov r8, r8)
 800f092:	46bd      	mov	sp, r7
 800f094:	b004      	add	sp, #16
 800f096:	bd80      	pop	{r7, pc}

0800f098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f098:	b590      	push	{r4, r7, lr}
 800f09a:	b087      	sub	sp, #28
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	0008      	movs	r0, r1
 800f0a2:	0011      	movs	r1, r2
 800f0a4:	607b      	str	r3, [r7, #4]
 800f0a6:	240a      	movs	r4, #10
 800f0a8:	193b      	adds	r3, r7, r4
 800f0aa:	1c02      	adds	r2, r0, #0
 800f0ac:	801a      	strh	r2, [r3, #0]
 800f0ae:	2009      	movs	r0, #9
 800f0b0:	183b      	adds	r3, r7, r0
 800f0b2:	1c0a      	adds	r2, r1, #0
 800f0b4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f0b6:	193b      	adds	r3, r7, r4
 800f0b8:	881b      	ldrh	r3, [r3, #0]
 800f0ba:	059b      	lsls	r3, r3, #22
 800f0bc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f0be:	183b      	adds	r3, r7, r0
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	0419      	lsls	r1, r3, #16
 800f0c4:	23ff      	movs	r3, #255	@ 0xff
 800f0c6:	041b      	lsls	r3, r3, #16
 800f0c8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f0ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	085b      	lsrs	r3, r3, #1
 800f0d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f0e2:	0d51      	lsrs	r1, r2, #21
 800f0e4:	2280      	movs	r2, #128	@ 0x80
 800f0e6:	00d2      	lsls	r2, r2, #3
 800f0e8:	400a      	ands	r2, r1
 800f0ea:	4907      	ldr	r1, [pc, #28]	@ (800f108 <I2C_TransferConfig+0x70>)
 800f0ec:	430a      	orrs	r2, r1
 800f0ee:	43d2      	mvns	r2, r2
 800f0f0:	401a      	ands	r2, r3
 800f0f2:	0011      	movs	r1, r2
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	697a      	ldr	r2, [r7, #20]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f0fe:	46c0      	nop			@ (mov r8, r8)
 800f100:	46bd      	mov	sp, r7
 800f102:	b007      	add	sp, #28
 800f104:	bd90      	pop	{r4, r7, pc}
 800f106:	46c0      	nop			@ (mov r8, r8)
 800f108:	03ff63ff 	.word	0x03ff63ff

0800f10c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	000a      	movs	r2, r1
 800f116:	1cbb      	adds	r3, r7, #2
 800f118:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800f11a:	2300      	movs	r3, #0
 800f11c:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f122:	4b3e      	ldr	r3, [pc, #248]	@ (800f21c <I2C_Enable_IRQ+0x110>)
 800f124:	429a      	cmp	r2, r3
 800f126:	d035      	beq.n	800f194 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800f12c:	4b3c      	ldr	r3, [pc, #240]	@ (800f220 <I2C_Enable_IRQ+0x114>)
 800f12e:	429a      	cmp	r2, r3
 800f130:	d030      	beq.n	800f194 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800f136:	4b3b      	ldr	r3, [pc, #236]	@ (800f224 <I2C_Enable_IRQ+0x118>)
 800f138:	429a      	cmp	r2, r3
 800f13a:	d02b      	beq.n	800f194 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f13c:	1cbb      	adds	r3, r7, #2
 800f13e:	2200      	movs	r2, #0
 800f140:	5e9b      	ldrsh	r3, [r3, r2]
 800f142:	2b00      	cmp	r3, #0
 800f144:	da03      	bge.n	800f14e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	22b8      	movs	r2, #184	@ 0xb8
 800f14a:	4313      	orrs	r3, r2
 800f14c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f14e:	1cbb      	adds	r3, r7, #2
 800f150:	881b      	ldrh	r3, [r3, #0]
 800f152:	2201      	movs	r2, #1
 800f154:	4013      	ands	r3, r2
 800f156:	d003      	beq.n	800f160 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	22f2      	movs	r2, #242	@ 0xf2
 800f15c:	4313      	orrs	r3, r2
 800f15e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f160:	1cbb      	adds	r3, r7, #2
 800f162:	881b      	ldrh	r3, [r3, #0]
 800f164:	2202      	movs	r2, #2
 800f166:	4013      	ands	r3, r2
 800f168:	d003      	beq.n	800f172 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	22f4      	movs	r2, #244	@ 0xf4
 800f16e:	4313      	orrs	r3, r2
 800f170:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f172:	1cbb      	adds	r3, r7, #2
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	2b10      	cmp	r3, #16
 800f178:	d103      	bne.n	800f182 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2290      	movs	r2, #144	@ 0x90
 800f17e:	4313      	orrs	r3, r2
 800f180:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f182:	1cbb      	adds	r3, r7, #2
 800f184:	881b      	ldrh	r3, [r3, #0]
 800f186:	2b20      	cmp	r3, #32
 800f188:	d13c      	bne.n	800f204 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2220      	movs	r2, #32
 800f18e:	4313      	orrs	r3, r2
 800f190:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f192:	e037      	b.n	800f204 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f194:	1cbb      	adds	r3, r7, #2
 800f196:	2200      	movs	r2, #0
 800f198:	5e9b      	ldrsh	r3, [r3, r2]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	da03      	bge.n	800f1a6 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	22b8      	movs	r2, #184	@ 0xb8
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f1a6:	1cbb      	adds	r3, r7, #2
 800f1a8:	881b      	ldrh	r3, [r3, #0]
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	4013      	ands	r3, r2
 800f1ae:	d003      	beq.n	800f1b8 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	22f2      	movs	r2, #242	@ 0xf2
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f1b8:	1cbb      	adds	r3, r7, #2
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	2202      	movs	r2, #2
 800f1be:	4013      	ands	r3, r2
 800f1c0:	d003      	beq.n	800f1ca <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	22f4      	movs	r2, #244	@ 0xf4
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f1ca:	1cbb      	adds	r3, r7, #2
 800f1cc:	881b      	ldrh	r3, [r3, #0]
 800f1ce:	2b10      	cmp	r3, #16
 800f1d0:	d103      	bne.n	800f1da <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2290      	movs	r2, #144	@ 0x90
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f1da:	1cbb      	adds	r3, r7, #2
 800f1dc:	881b      	ldrh	r3, [r3, #0]
 800f1de:	2b20      	cmp	r3, #32
 800f1e0:	d103      	bne.n	800f1ea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2260      	movs	r2, #96	@ 0x60
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800f224 <I2C_Enable_IRQ+0x118>)
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d007      	beq.n	800f204 <I2C_Enable_IRQ+0xf8>
 800f1f4:	1cbb      	adds	r3, r7, #2
 800f1f6:	881b      	ldrh	r3, [r3, #0]
 800f1f8:	2b40      	cmp	r3, #64	@ 0x40
 800f1fa:	d103      	bne.n	800f204 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2240      	movs	r2, #64	@ 0x40
 800f200:	4313      	orrs	r3, r2
 800f202:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	6819      	ldr	r1, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	68fa      	ldr	r2, [r7, #12]
 800f210:	430a      	orrs	r2, r1
 800f212:	601a      	str	r2, [r3, #0]
}
 800f214:	46c0      	nop			@ (mov r8, r8)
 800f216:	46bd      	mov	sp, r7
 800f218:	b004      	add	sp, #16
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	0800df31 	.word	0x0800df31
 800f220:	0800e361 	.word	0x0800e361
 800f224:	0800e129 	.word	0x0800e129

0800f228 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	000a      	movs	r2, r1
 800f232:	1cbb      	adds	r3, r7, #2
 800f234:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800f236:	2300      	movs	r3, #0
 800f238:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f23a:	1cbb      	adds	r3, r7, #2
 800f23c:	881b      	ldrh	r3, [r3, #0]
 800f23e:	2201      	movs	r2, #1
 800f240:	4013      	ands	r3, r2
 800f242:	d010      	beq.n	800f266 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2242      	movs	r2, #66	@ 0x42
 800f248:	4313      	orrs	r3, r2
 800f24a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2241      	movs	r2, #65	@ 0x41
 800f250:	5c9b      	ldrb	r3, [r3, r2]
 800f252:	b2db      	uxtb	r3, r3
 800f254:	001a      	movs	r2, r3
 800f256:	2328      	movs	r3, #40	@ 0x28
 800f258:	4013      	ands	r3, r2
 800f25a:	2b28      	cmp	r3, #40	@ 0x28
 800f25c:	d003      	beq.n	800f266 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	22b0      	movs	r2, #176	@ 0xb0
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f266:	1cbb      	adds	r3, r7, #2
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	2202      	movs	r2, #2
 800f26c:	4013      	ands	r3, r2
 800f26e:	d010      	beq.n	800f292 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2244      	movs	r2, #68	@ 0x44
 800f274:	4313      	orrs	r3, r2
 800f276:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2241      	movs	r2, #65	@ 0x41
 800f27c:	5c9b      	ldrb	r3, [r3, r2]
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	001a      	movs	r2, r3
 800f282:	2328      	movs	r3, #40	@ 0x28
 800f284:	4013      	ands	r3, r2
 800f286:	2b28      	cmp	r3, #40	@ 0x28
 800f288:	d003      	beq.n	800f292 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	22b0      	movs	r2, #176	@ 0xb0
 800f28e:	4313      	orrs	r3, r2
 800f290:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f292:	1cbb      	adds	r3, r7, #2
 800f294:	2200      	movs	r2, #0
 800f296:	5e9b      	ldrsh	r3, [r3, r2]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	da03      	bge.n	800f2a4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	22b8      	movs	r2, #184	@ 0xb8
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f2a4:	1cbb      	adds	r3, r7, #2
 800f2a6:	881b      	ldrh	r3, [r3, #0]
 800f2a8:	2b10      	cmp	r3, #16
 800f2aa:	d103      	bne.n	800f2b4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2290      	movs	r2, #144	@ 0x90
 800f2b0:	4313      	orrs	r3, r2
 800f2b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f2b4:	1cbb      	adds	r3, r7, #2
 800f2b6:	881b      	ldrh	r3, [r3, #0]
 800f2b8:	2b20      	cmp	r3, #32
 800f2ba:	d103      	bne.n	800f2c4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2220      	movs	r2, #32
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800f2c4:	1cbb      	adds	r3, r7, #2
 800f2c6:	881b      	ldrh	r3, [r3, #0]
 800f2c8:	2b40      	cmp	r3, #64	@ 0x40
 800f2ca:	d103      	bne.n	800f2d4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2240      	movs	r2, #64	@ 0x40
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	43d9      	mvns	r1, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	400a      	ands	r2, r1
 800f2e4:	601a      	str	r2, [r3, #0]
}
 800f2e6:	46c0      	nop			@ (mov r8, r8)
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	b004      	add	sp, #16
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2241      	movs	r2, #65	@ 0x41
 800f2fe:	5c9b      	ldrb	r3, [r3, r2]
 800f300:	b2db      	uxtb	r3, r3
 800f302:	2b20      	cmp	r3, #32
 800f304:	d138      	bne.n	800f378 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2240      	movs	r2, #64	@ 0x40
 800f30a:	5c9b      	ldrb	r3, [r3, r2]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d101      	bne.n	800f314 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f310:	2302      	movs	r3, #2
 800f312:	e032      	b.n	800f37a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2240      	movs	r2, #64	@ 0x40
 800f318:	2101      	movs	r1, #1
 800f31a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2241      	movs	r2, #65	@ 0x41
 800f320:	2124      	movs	r1, #36	@ 0x24
 800f322:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2101      	movs	r1, #1
 800f330:	438a      	bics	r2, r1
 800f332:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	681a      	ldr	r2, [r3, #0]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	4911      	ldr	r1, [pc, #68]	@ (800f384 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800f340:	400a      	ands	r2, r1
 800f342:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	6819      	ldr	r1, [r3, #0]
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	430a      	orrs	r2, r1
 800f352:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	681a      	ldr	r2, [r3, #0]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2101      	movs	r1, #1
 800f360:	430a      	orrs	r2, r1
 800f362:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2241      	movs	r2, #65	@ 0x41
 800f368:	2120      	movs	r1, #32
 800f36a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2240      	movs	r2, #64	@ 0x40
 800f370:	2100      	movs	r1, #0
 800f372:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f374:	2300      	movs	r3, #0
 800f376:	e000      	b.n	800f37a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f378:	2302      	movs	r3, #2
  }
}
 800f37a:	0018      	movs	r0, r3
 800f37c:	46bd      	mov	sp, r7
 800f37e:	b002      	add	sp, #8
 800f380:	bd80      	pop	{r7, pc}
 800f382:	46c0      	nop			@ (mov r8, r8)
 800f384:	ffffefff 	.word	0xffffefff

0800f388 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2241      	movs	r2, #65	@ 0x41
 800f396:	5c9b      	ldrb	r3, [r3, r2]
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	2b20      	cmp	r3, #32
 800f39c:	d139      	bne.n	800f412 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2240      	movs	r2, #64	@ 0x40
 800f3a2:	5c9b      	ldrb	r3, [r3, r2]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d101      	bne.n	800f3ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f3a8:	2302      	movs	r3, #2
 800f3aa:	e033      	b.n	800f414 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2240      	movs	r2, #64	@ 0x40
 800f3b0:	2101      	movs	r1, #1
 800f3b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2241      	movs	r2, #65	@ 0x41
 800f3b8:	2124      	movs	r1, #36	@ 0x24
 800f3ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2101      	movs	r1, #1
 800f3c8:	438a      	bics	r2, r1
 800f3ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	4a11      	ldr	r2, [pc, #68]	@ (800f41c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800f3d8:	4013      	ands	r3, r2
 800f3da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	021b      	lsls	r3, r3, #8
 800f3e0:	68fa      	ldr	r2, [r7, #12]
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	68fa      	ldr	r2, [r7, #12]
 800f3ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2101      	movs	r1, #1
 800f3fa:	430a      	orrs	r2, r1
 800f3fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2241      	movs	r2, #65	@ 0x41
 800f402:	2120      	movs	r1, #32
 800f404:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2240      	movs	r2, #64	@ 0x40
 800f40a:	2100      	movs	r1, #0
 800f40c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f40e:	2300      	movs	r3, #0
 800f410:	e000      	b.n	800f414 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f412:	2302      	movs	r3, #2
  }
}
 800f414:	0018      	movs	r0, r3
 800f416:	46bd      	mov	sp, r7
 800f418:	b004      	add	sp, #16
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	fffff0ff 	.word	0xfffff0ff

0800f420 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b088      	sub	sp, #32
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d101      	bne.n	800f432 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	e0e1      	b.n	800f5f6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2235      	movs	r2, #53	@ 0x35
 800f436:	5c9b      	ldrb	r3, [r3, r2]
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d107      	bne.n	800f44e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2234      	movs	r2, #52	@ 0x34
 800f442:	2100      	movs	r1, #0
 800f444:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	0018      	movs	r0, r3
 800f44a:	f7f7 fd23 	bl	8006e94 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2235      	movs	r2, #53	@ 0x35
 800f452:	2102      	movs	r1, #2
 800f454:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	69da      	ldr	r2, [r3, #28]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4967      	ldr	r1, [pc, #412]	@ (800f600 <HAL_I2S_Init+0x1e0>)
 800f462:	400a      	ands	r2, r1
 800f464:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	2202      	movs	r2, #2
 800f46c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	695b      	ldr	r3, [r3, #20]
 800f472:	2b02      	cmp	r3, #2
 800f474:	d073      	beq.n	800f55e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	68db      	ldr	r3, [r3, #12]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d102      	bne.n	800f484 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800f47e:	2310      	movs	r3, #16
 800f480:	617b      	str	r3, [r7, #20]
 800f482:	e001      	b.n	800f488 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800f484:	2320      	movs	r3, #32
 800f486:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	689b      	ldr	r3, [r3, #8]
 800f48c:	2b20      	cmp	r3, #32
 800f48e:	d802      	bhi.n	800f496 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	005b      	lsls	r3, r3, #1
 800f494:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800f496:	f002 fe51 	bl	801213c <HAL_RCC_GetSysClockFreq>
 800f49a:	0003      	movs	r3, r0
 800f49c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	691a      	ldr	r2, [r3, #16]
 800f4a2:	2380      	movs	r3, #128	@ 0x80
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	429a      	cmp	r2, r3
 800f4a8:	d131      	bne.n	800f50e <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d016      	beq.n	800f4e0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f4b2:	697b      	ldr	r3, [r7, #20]
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	0019      	movs	r1, r3
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f7f0 fe73 	bl	80001a4 <__udivsi3>
 800f4be:	0003      	movs	r3, r0
 800f4c0:	001a      	movs	r2, r3
 800f4c2:	0013      	movs	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	189b      	adds	r3, r3, r2
 800f4c8:	005b      	lsls	r3, r3, #1
 800f4ca:	001a      	movs	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	695b      	ldr	r3, [r3, #20]
 800f4d0:	0019      	movs	r1, r3
 800f4d2:	0010      	movs	r0, r2
 800f4d4:	f7f0 fe66 	bl	80001a4 <__udivsi3>
 800f4d8:	0003      	movs	r3, r0
 800f4da:	3305      	adds	r3, #5
 800f4dc:	613b      	str	r3, [r7, #16]
 800f4de:	e02a      	b.n	800f536 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	00db      	lsls	r3, r3, #3
 800f4e4:	0019      	movs	r1, r3
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7f0 fe5c 	bl	80001a4 <__udivsi3>
 800f4ec:	0003      	movs	r3, r0
 800f4ee:	001a      	movs	r2, r3
 800f4f0:	0013      	movs	r3, r2
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	189b      	adds	r3, r3, r2
 800f4f6:	005b      	lsls	r3, r3, #1
 800f4f8:	001a      	movs	r2, r3
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	695b      	ldr	r3, [r3, #20]
 800f4fe:	0019      	movs	r1, r3
 800f500:	0010      	movs	r0, r2
 800f502:	f7f0 fe4f 	bl	80001a4 <__udivsi3>
 800f506:	0003      	movs	r3, r0
 800f508:	3305      	adds	r3, #5
 800f50a:	613b      	str	r3, [r7, #16]
 800f50c:	e013      	b.n	800f536 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f50e:	6979      	ldr	r1, [r7, #20]
 800f510:	68f8      	ldr	r0, [r7, #12]
 800f512:	f7f0 fe47 	bl	80001a4 <__udivsi3>
 800f516:	0003      	movs	r3, r0
 800f518:	001a      	movs	r2, r3
 800f51a:	0013      	movs	r3, r2
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	189b      	adds	r3, r3, r2
 800f520:	005b      	lsls	r3, r3, #1
 800f522:	001a      	movs	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	695b      	ldr	r3, [r3, #20]
 800f528:	0019      	movs	r1, r3
 800f52a:	0010      	movs	r0, r2
 800f52c:	f7f0 fe3a 	bl	80001a4 <__udivsi3>
 800f530:	0003      	movs	r3, r0
 800f532:	3305      	adds	r3, #5
 800f534:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	210a      	movs	r1, #10
 800f53a:	0018      	movs	r0, r3
 800f53c:	f7f0 fe32 	bl	80001a4 <__udivsi3>
 800f540:	0003      	movs	r3, r0
 800f542:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	2201      	movs	r2, #1
 800f548:	4013      	ands	r3, r2
 800f54a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800f54c:	693a      	ldr	r2, [r7, #16]
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	085b      	lsrs	r3, r3, #1
 800f554:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	021b      	lsls	r3, r3, #8
 800f55a:	61bb      	str	r3, [r7, #24]
 800f55c:	e003      	b.n	800f566 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800f55e:	2302      	movs	r3, #2
 800f560:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800f562:	2300      	movs	r3, #0
 800f564:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d902      	bls.n	800f572 <HAL_I2S_Init+0x152>
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2bff      	cmp	r3, #255	@ 0xff
 800f570:	d907      	bls.n	800f582 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f576:	2210      	movs	r2, #16
 800f578:	431a      	orrs	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800f57e:	2301      	movs	r3, #1
 800f580:	e039      	b.n	800f5f6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	691a      	ldr	r2, [r3, #16]
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	431a      	orrs	r2, r3
 800f58a:	0011      	movs	r1, r2
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	69fa      	ldr	r2, [r7, #28]
 800f592:	430a      	orrs	r2, r1
 800f594:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	69db      	ldr	r3, [r3, #28]
 800f59c:	4a18      	ldr	r2, [pc, #96]	@ (800f600 <HAL_I2S_Init+0x1e0>)
 800f59e:	401a      	ands	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6859      	ldr	r1, [r3, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	689b      	ldr	r3, [r3, #8]
 800f5a8:	4319      	orrs	r1, r3
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	4319      	orrs	r1, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	699b      	ldr	r3, [r3, #24]
 800f5b4:	430b      	orrs	r3, r1
 800f5b6:	431a      	orrs	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2180      	movs	r1, #128	@ 0x80
 800f5be:	0109      	lsls	r1, r1, #4
 800f5c0:	430a      	orrs	r2, r1
 800f5c2:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	2b30      	cmp	r3, #48	@ 0x30
 800f5ca:	d003      	beq.n	800f5d4 <HAL_I2S_Init+0x1b4>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	2bb0      	cmp	r3, #176	@ 0xb0
 800f5d2:	d108      	bne.n	800f5e6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	69da      	ldr	r2, [r3, #28]
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2180      	movs	r1, #128	@ 0x80
 800f5e0:	0149      	lsls	r1, r1, #5
 800f5e2:	430a      	orrs	r2, r1
 800f5e4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2235      	movs	r2, #53	@ 0x35
 800f5f0:	2101      	movs	r1, #1
 800f5f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	0018      	movs	r0, r3
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	b008      	add	sp, #32
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	46c0      	nop			@ (mov r8, r8)
 800f600:	fffff040 	.word	0xfffff040

0800f604 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b086      	sub	sp, #24
 800f608:	af00      	add	r7, sp, #0
 800f60a:	60f8      	str	r0, [r7, #12]
 800f60c:	60b9      	str	r1, [r7, #8]
 800f60e:	1dbb      	adds	r3, r7, #6
 800f610:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d003      	beq.n	800f620 <HAL_I2S_Receive_DMA+0x1c>
 800f618:	1dbb      	adds	r3, r7, #6
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	e0a6      	b.n	800f772 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	2234      	movs	r2, #52	@ 0x34
 800f628:	5c9b      	ldrb	r3, [r3, r2]
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d101      	bne.n	800f634 <HAL_I2S_Receive_DMA+0x30>
 800f630:	2302      	movs	r3, #2
 800f632:	e09e      	b.n	800f772 <HAL_I2S_Receive_DMA+0x16e>
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2234      	movs	r2, #52	@ 0x34
 800f638:	2101      	movs	r1, #1
 800f63a:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2235      	movs	r2, #53	@ 0x35
 800f640:	5c9b      	ldrb	r3, [r3, r2]
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b01      	cmp	r3, #1
 800f646:	d005      	beq.n	800f654 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2234      	movs	r2, #52	@ 0x34
 800f64c:	2100      	movs	r1, #0
 800f64e:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800f650:	2302      	movs	r3, #2
 800f652:	e08e      	b.n	800f772 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2235      	movs	r2, #53	@ 0x35
 800f658:	2104      	movs	r1, #4
 800f65a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	69db      	ldr	r3, [r3, #28]
 800f66e:	2207      	movs	r2, #7
 800f670:	4013      	ands	r3, r2
 800f672:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	2b03      	cmp	r3, #3
 800f678:	d002      	beq.n	800f680 <HAL_I2S_Receive_DMA+0x7c>
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	2b05      	cmp	r3, #5
 800f67e:	d10c      	bne.n	800f69a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800f680:	1dbb      	adds	r3, r7, #6
 800f682:	881b      	ldrh	r3, [r3, #0]
 800f684:	18db      	adds	r3, r3, r3
 800f686:	b29a      	uxth	r2, r3
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800f68c:	1dbb      	adds	r3, r7, #6
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	18db      	adds	r3, r3, r3
 800f692:	b29a      	uxth	r2, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f698:	e007      	b.n	800f6aa <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	1dba      	adds	r2, r7, #6
 800f69e:	8812      	ldrh	r2, [r2, #0]
 800f6a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	1dba      	adds	r2, r7, #6
 800f6a6:	8812      	ldrh	r2, [r2, #0]
 800f6a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ae:	4a33      	ldr	r2, [pc, #204]	@ (800f77c <HAL_I2S_Receive_DMA+0x178>)
 800f6b0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6b6:	4a32      	ldr	r2, [pc, #200]	@ (800f780 <HAL_I2S_Receive_DMA+0x17c>)
 800f6b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6be:	4a31      	ldr	r2, [pc, #196]	@ (800f784 <HAL_I2S_Receive_DMA+0x180>)
 800f6c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	69da      	ldr	r2, [r3, #28]
 800f6c8:	23c0      	movs	r3, #192	@ 0xc0
 800f6ca:	009b      	lsls	r3, r3, #2
 800f6cc:	401a      	ands	r2, r3
 800f6ce:	23c0      	movs	r3, #192	@ 0xc0
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	429a      	cmp	r2, r3
 800f6d4:	d10a      	bne.n	800f6ec <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	613b      	str	r3, [r7, #16]
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	613b      	str	r3, [r7, #16]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	689b      	ldr	r3, [r3, #8]
 800f6e8:	613b      	str	r3, [r7, #16]
 800f6ea:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	330c      	adds	r3, #12
 800f6f6:	0019      	movs	r1, r3
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6fc:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f702:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f704:	f7fd f920 	bl	800c948 <HAL_DMA_Start_IT>
 800f708:	1e03      	subs	r3, r0, #0
 800f70a:	d00f      	beq.n	800f72c <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f710:	2208      	movs	r2, #8
 800f712:	431a      	orrs	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2235      	movs	r2, #53	@ 0x35
 800f71c:	2101      	movs	r1, #1
 800f71e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2234      	movs	r2, #52	@ 0x34
 800f724:	2100      	movs	r1, #0
 800f726:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f728:	2301      	movs	r3, #1
 800f72a:	e022      	b.n	800f772 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	69da      	ldr	r2, [r3, #28]
 800f732:	2380      	movs	r3, #128	@ 0x80
 800f734:	00db      	lsls	r3, r3, #3
 800f736:	4013      	ands	r3, r2
 800f738:	d108      	bne.n	800f74c <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	69da      	ldr	r2, [r3, #28]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	2180      	movs	r1, #128	@ 0x80
 800f746:	00c9      	lsls	r1, r1, #3
 800f748:	430a      	orrs	r2, r1
 800f74a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	685b      	ldr	r3, [r3, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	4013      	ands	r3, r2
 800f756:	d107      	bne.n	800f768 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	685a      	ldr	r2, [r3, #4]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	2101      	movs	r1, #1
 800f764:	430a      	orrs	r2, r1
 800f766:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2234      	movs	r2, #52	@ 0x34
 800f76c:	2100      	movs	r1, #0
 800f76e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	0018      	movs	r0, r3
 800f774:	46bd      	mov	sp, r7
 800f776:	b006      	add	sp, #24
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	46c0      	nop			@ (mov r8, r8)
 800f77c:	0800f965 	.word	0x0800f965
 800f780:	0800f921 	.word	0x0800f921
 800f784:	0800f983 	.word	0x0800f983

0800f788 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b086      	sub	sp, #24
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f790:	2317      	movs	r3, #23
 800f792:	18fb      	adds	r3, r7, r3
 800f794:	2200      	movs	r2, #0
 800f796:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	685a      	ldr	r2, [r3, #4]
 800f79c:	2380      	movs	r3, #128	@ 0x80
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d003      	beq.n	800f7ac <HAL_I2S_DMAStop+0x24>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d158      	bne.n	800f85e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d010      	beq.n	800f7d6 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7b8:	0018      	movs	r0, r3
 800f7ba:	f7fd f92b 	bl	800ca14 <HAL_DMA_Abort>
 800f7be:	1e03      	subs	r3, r0, #0
 800f7c0:	d009      	beq.n	800f7d6 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c6:	2208      	movs	r2, #8
 800f7c8:	431a      	orrs	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f7ce:	2317      	movs	r3, #23
 800f7d0:	18fb      	adds	r3, r7, r3
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	2364      	movs	r3, #100	@ 0x64
 800f7da:	2201      	movs	r2, #1
 800f7dc:	2102      	movs	r1, #2
 800f7de:	f000 f8f7 	bl	800f9d0 <I2S_WaitFlagStateUntilTimeout>
 800f7e2:	1e03      	subs	r3, r0, #0
 800f7e4:	d00d      	beq.n	800f802 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	431a      	orrs	r2, r3
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2235      	movs	r2, #53	@ 0x35
 800f7f6:	2101      	movs	r1, #1
 800f7f8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f7fa:	2317      	movs	r3, #23
 800f7fc:	18fb      	adds	r3, r7, r3
 800f7fe:	2201      	movs	r2, #1
 800f800:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	2364      	movs	r3, #100	@ 0x64
 800f806:	2200      	movs	r2, #0
 800f808:	2180      	movs	r1, #128	@ 0x80
 800f80a:	f000 f8e1 	bl	800f9d0 <I2S_WaitFlagStateUntilTimeout>
 800f80e:	1e03      	subs	r3, r0, #0
 800f810:	d00d      	beq.n	800f82e <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f816:	2201      	movs	r2, #1
 800f818:	431a      	orrs	r2, r3
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2235      	movs	r2, #53	@ 0x35
 800f822:	2101      	movs	r1, #1
 800f824:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f826:	2317      	movs	r3, #23
 800f828:	18fb      	adds	r3, r7, r3
 800f82a:	2201      	movs	r2, #1
 800f82c:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	69da      	ldr	r2, [r3, #28]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	4938      	ldr	r1, [pc, #224]	@ (800f91c <HAL_I2S_DMAStop+0x194>)
 800f83a:	400a      	ands	r2, r1
 800f83c:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800f83e:	2300      	movs	r3, #0
 800f840:	613b      	str	r3, [r7, #16]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	689b      	ldr	r3, [r3, #8]
 800f848:	613b      	str	r3, [r7, #16]
 800f84a:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2102      	movs	r1, #2
 800f858:	438a      	bics	r2, r1
 800f85a:	605a      	str	r2, [r3, #4]
 800f85c:	e053      	b.n	800f906 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	685a      	ldr	r2, [r3, #4]
 800f862:	23c0      	movs	r3, #192	@ 0xc0
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	429a      	cmp	r2, r3
 800f868:	d005      	beq.n	800f876 <HAL_I2S_DMAStop+0xee>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	685a      	ldr	r2, [r3, #4]
 800f86e:	2380      	movs	r3, #128	@ 0x80
 800f870:	005b      	lsls	r3, r3, #1
 800f872:	429a      	cmp	r2, r3
 800f874:	d147      	bne.n	800f906 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d010      	beq.n	800f8a0 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f882:	0018      	movs	r0, r3
 800f884:	f7fd f8c6 	bl	800ca14 <HAL_DMA_Abort>
 800f888:	1e03      	subs	r3, r0, #0
 800f88a:	d009      	beq.n	800f8a0 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f890:	2208      	movs	r2, #8
 800f892:	431a      	orrs	r2, r3
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f898:	2317      	movs	r3, #23
 800f89a:	18fb      	adds	r3, r7, r3
 800f89c:	2201      	movs	r2, #1
 800f89e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	69da      	ldr	r2, [r3, #28]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	491c      	ldr	r1, [pc, #112]	@ (800f91c <HAL_I2S_DMAStop+0x194>)
 800f8ac:	400a      	ands	r2, r1
 800f8ae:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	60fb      	str	r3, [r7, #12]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	60fb      	str	r3, [r7, #12]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	60fb      	str	r3, [r7, #12]
 800f8c4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	685a      	ldr	r2, [r3, #4]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2101      	movs	r1, #1
 800f8d2:	438a      	bics	r2, r1
 800f8d4:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	685a      	ldr	r2, [r3, #4]
 800f8da:	2380      	movs	r3, #128	@ 0x80
 800f8dc:	005b      	lsls	r3, r3, #1
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d10e      	bne.n	800f900 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8e6:	2240      	movs	r2, #64	@ 0x40
 800f8e8:	431a      	orrs	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2235      	movs	r2, #53	@ 0x35
 800f8f2:	2101      	movs	r1, #1
 800f8f4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800f8f6:	2317      	movs	r3, #23
 800f8f8:	18fb      	adds	r3, r7, r3
 800f8fa:	2201      	movs	r2, #1
 800f8fc:	701a      	strb	r2, [r3, #0]
 800f8fe:	e002      	b.n	800f906 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2235      	movs	r2, #53	@ 0x35
 800f90a:	2101      	movs	r1, #1
 800f90c:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800f90e:	2317      	movs	r3, #23
 800f910:	18fb      	adds	r3, r7, r3
 800f912:	781b      	ldrb	r3, [r3, #0]
}
 800f914:	0018      	movs	r0, r3
 800f916:	46bd      	mov	sp, r7
 800f918:	b006      	add	sp, #24
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	fffffbff 	.word	0xfffffbff

0800f920 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f92c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	69db      	ldr	r3, [r3, #28]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d10e      	bne.n	800f954 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	685a      	ldr	r2, [r3, #4]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2101      	movs	r1, #1
 800f942:	438a      	bics	r2, r1
 800f944:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2235      	movs	r2, #53	@ 0x35
 800f950:	2101      	movs	r1, #1
 800f952:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	0018      	movs	r0, r3
 800f958:	f7fa f9c8 	bl	8009cec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f95c:	46c0      	nop			@ (mov r8, r8)
 800f95e:	46bd      	mov	sp, r7
 800f960:	b004      	add	sp, #16
 800f962:	bd80      	pop	{r7, pc}

0800f964 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f970:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	0018      	movs	r0, r3
 800f976:	f7fa f9a7 	bl	8009cc8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f97a:	46c0      	nop			@ (mov r8, r8)
 800f97c:	46bd      	mov	sp, r7
 800f97e:	b004      	add	sp, #16
 800f980:	bd80      	pop	{r7, pc}

0800f982 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800f982:	b580      	push	{r7, lr}
 800f984:	b084      	sub	sp, #16
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f98e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	685a      	ldr	r2, [r3, #4]
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	2103      	movs	r1, #3
 800f99c:	438a      	bics	r2, r1
 800f99e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2235      	movs	r2, #53	@ 0x35
 800f9b0:	2101      	movs	r1, #1
 800f9b2:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9b8:	2208      	movs	r2, #8
 800f9ba:	431a      	orrs	r2, r3
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	0018      	movs	r0, r3
 800f9c4:	f7fa f9e0 	bl	8009d88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f9c8:	46c0      	nop			@ (mov r8, r8)
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	b004      	add	sp, #16
 800f9ce:	bd80      	pop	{r7, pc}

0800f9d0 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b086      	sub	sp, #24
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	60f8      	str	r0, [r7, #12]
 800f9d8:	60b9      	str	r1, [r7, #8]
 800f9da:	603b      	str	r3, [r7, #0]
 800f9dc:	1dfb      	adds	r3, r7, #7
 800f9de:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800f9e0:	f7fc fa92 	bl	800bf08 <HAL_GetTick>
 800f9e4:	0003      	movs	r3, r0
 800f9e6:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800f9e8:	e017      	b.n	800fa1a <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	d014      	beq.n	800fa1a <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800f9f0:	f7fc fa8a 	bl	800bf08 <HAL_GetTick>
 800f9f4:	0002      	movs	r2, r0
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	1ad3      	subs	r3, r2, r3
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d902      	bls.n	800fa06 <I2S_WaitFlagStateUntilTimeout+0x36>
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d109      	bne.n	800fa1a <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2235      	movs	r2, #53	@ 0x35
 800fa0a:	2101      	movs	r1, #1
 800fa0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2234      	movs	r2, #52	@ 0x34
 800fa12:	2100      	movs	r1, #0
 800fa14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800fa16:	2303      	movs	r3, #3
 800fa18:	e00f      	b.n	800fa3a <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	68ba      	ldr	r2, [r7, #8]
 800fa22:	4013      	ands	r3, r2
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	425a      	negs	r2, r3
 800fa2a:	4153      	adcs	r3, r2
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	001a      	movs	r2, r3
 800fa30:	1dfb      	adds	r3, r7, #7
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	429a      	cmp	r2, r3
 800fa36:	d1d8      	bne.n	800f9ea <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800fa38:	2300      	movs	r3, #0
}
 800fa3a:	0018      	movs	r0, r3
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	b006      	add	sp, #24
 800fa40:	bd80      	pop	{r7, pc}
	...

0800fa44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800fa44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa46:	b08b      	sub	sp, #44	@ 0x2c
 800fa48:	af06      	add	r7, sp, #24
 800fa4a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d101      	bne.n	800fa56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800fa52:	2301      	movs	r3, #1
 800fa54:	e0f0      	b.n	800fc38 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	4a79      	ldr	r2, [pc, #484]	@ (800fc40 <HAL_PCD_Init+0x1fc>)
 800fa5a:	5c9b      	ldrb	r3, [r3, r2]
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d108      	bne.n	800fa74 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	23aa      	movs	r3, #170	@ 0xaa
 800fa66:	009b      	lsls	r3, r3, #2
 800fa68:	2100      	movs	r1, #0
 800fa6a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	0018      	movs	r0, r3
 800fa70:	f009 fdd4 	bl	801961c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4a72      	ldr	r2, [pc, #456]	@ (800fc40 <HAL_PCD_Init+0x1fc>)
 800fa78:	2103      	movs	r1, #3
 800fa7a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	0018      	movs	r0, r3
 800fa82:	f005 fd87 	bl	8015594 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa86:	230f      	movs	r3, #15
 800fa88:	18fb      	adds	r3, r7, r3
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	701a      	strb	r2, [r3, #0]
 800fa8e:	e049      	b.n	800fb24 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800fa90:	200f      	movs	r0, #15
 800fa92:	183b      	adds	r3, r7, r0
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	0013      	movs	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	189b      	adds	r3, r3, r2
 800faa0:	00db      	lsls	r3, r3, #3
 800faa2:	18cb      	adds	r3, r1, r3
 800faa4:	3301      	adds	r3, #1
 800faa6:	2201      	movs	r2, #1
 800faa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800faaa:	183b      	adds	r3, r7, r0
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	6879      	ldr	r1, [r7, #4]
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	0013      	movs	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	189b      	adds	r3, r3, r2
 800fab8:	00db      	lsls	r3, r3, #3
 800faba:	183a      	adds	r2, r7, r0
 800fabc:	7812      	ldrb	r2, [r2, #0]
 800fabe:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800fac0:	183b      	adds	r3, r7, r0
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	6879      	ldr	r1, [r7, #4]
 800fac6:	1c5a      	adds	r2, r3, #1
 800fac8:	0013      	movs	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	189b      	adds	r3, r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	18cb      	adds	r3, r1, r3
 800fad2:	3303      	adds	r3, #3
 800fad4:	2200      	movs	r2, #0
 800fad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800fad8:	183b      	adds	r3, r7, r0
 800fada:	781a      	ldrb	r2, [r3, #0]
 800fadc:	6879      	ldr	r1, [r7, #4]
 800fade:	0013      	movs	r3, r2
 800fae0:	009b      	lsls	r3, r3, #2
 800fae2:	189b      	adds	r3, r3, r2
 800fae4:	00db      	lsls	r3, r3, #3
 800fae6:	18cb      	adds	r3, r1, r3
 800fae8:	3338      	adds	r3, #56	@ 0x38
 800faea:	2200      	movs	r2, #0
 800faec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800faee:	183b      	adds	r3, r7, r0
 800faf0:	781a      	ldrb	r2, [r3, #0]
 800faf2:	6879      	ldr	r1, [r7, #4]
 800faf4:	0013      	movs	r3, r2
 800faf6:	009b      	lsls	r3, r3, #2
 800faf8:	189b      	adds	r3, r3, r2
 800fafa:	00db      	lsls	r3, r3, #3
 800fafc:	18cb      	adds	r3, r1, r3
 800fafe:	333c      	adds	r3, #60	@ 0x3c
 800fb00:	2200      	movs	r2, #0
 800fb02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800fb04:	183b      	adds	r3, r7, r0
 800fb06:	781a      	ldrb	r2, [r3, #0]
 800fb08:	6879      	ldr	r1, [r7, #4]
 800fb0a:	0013      	movs	r3, r2
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	189b      	adds	r3, r3, r2
 800fb10:	00db      	lsls	r3, r3, #3
 800fb12:	18cb      	adds	r3, r1, r3
 800fb14:	3340      	adds	r3, #64	@ 0x40
 800fb16:	2200      	movs	r2, #0
 800fb18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fb1a:	183b      	adds	r3, r7, r0
 800fb1c:	781a      	ldrb	r2, [r3, #0]
 800fb1e:	183b      	adds	r3, r7, r0
 800fb20:	3201      	adds	r2, #1
 800fb22:	701a      	strb	r2, [r3, #0]
 800fb24:	210f      	movs	r1, #15
 800fb26:	187b      	adds	r3, r7, r1
 800fb28:	781a      	ldrb	r2, [r3, #0]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d3ae      	bcc.n	800fa90 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fb32:	187b      	adds	r3, r7, r1
 800fb34:	2200      	movs	r2, #0
 800fb36:	701a      	strb	r2, [r3, #0]
 800fb38:	e056      	b.n	800fbe8 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800fb3a:	240f      	movs	r4, #15
 800fb3c:	193b      	adds	r3, r7, r4
 800fb3e:	781a      	ldrb	r2, [r3, #0]
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	236a      	movs	r3, #106	@ 0x6a
 800fb44:	33ff      	adds	r3, #255	@ 0xff
 800fb46:	0019      	movs	r1, r3
 800fb48:	0013      	movs	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	189b      	adds	r3, r3, r2
 800fb4e:	00db      	lsls	r3, r3, #3
 800fb50:	18c3      	adds	r3, r0, r3
 800fb52:	185b      	adds	r3, r3, r1
 800fb54:	2200      	movs	r2, #0
 800fb56:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800fb58:	193b      	adds	r3, r7, r4
 800fb5a:	781a      	ldrb	r2, [r3, #0]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	23b4      	movs	r3, #180	@ 0xb4
 800fb60:	0059      	lsls	r1, r3, #1
 800fb62:	0013      	movs	r3, r2
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	189b      	adds	r3, r3, r2
 800fb68:	00db      	lsls	r3, r3, #3
 800fb6a:	18c3      	adds	r3, r0, r3
 800fb6c:	185b      	adds	r3, r3, r1
 800fb6e:	193a      	adds	r2, r7, r4
 800fb70:	7812      	ldrb	r2, [r2, #0]
 800fb72:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800fb74:	193b      	adds	r3, r7, r4
 800fb76:	781a      	ldrb	r2, [r3, #0]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	236c      	movs	r3, #108	@ 0x6c
 800fb7c:	33ff      	adds	r3, #255	@ 0xff
 800fb7e:	0019      	movs	r1, r3
 800fb80:	0013      	movs	r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	189b      	adds	r3, r3, r2
 800fb86:	00db      	lsls	r3, r3, #3
 800fb88:	18c3      	adds	r3, r0, r3
 800fb8a:	185b      	adds	r3, r3, r1
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800fb90:	193b      	adds	r3, r7, r4
 800fb92:	781a      	ldrb	r2, [r3, #0]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	23bc      	movs	r3, #188	@ 0xbc
 800fb98:	0059      	lsls	r1, r3, #1
 800fb9a:	0013      	movs	r3, r2
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	189b      	adds	r3, r3, r2
 800fba0:	00db      	lsls	r3, r3, #3
 800fba2:	18c3      	adds	r3, r0, r3
 800fba4:	185b      	adds	r3, r3, r1
 800fba6:	2200      	movs	r2, #0
 800fba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800fbaa:	193b      	adds	r3, r7, r4
 800fbac:	781a      	ldrb	r2, [r3, #0]
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	23be      	movs	r3, #190	@ 0xbe
 800fbb2:	0059      	lsls	r1, r3, #1
 800fbb4:	0013      	movs	r3, r2
 800fbb6:	009b      	lsls	r3, r3, #2
 800fbb8:	189b      	adds	r3, r3, r2
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	18c3      	adds	r3, r0, r3
 800fbbe:	185b      	adds	r3, r3, r1
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800fbc4:	193b      	adds	r3, r7, r4
 800fbc6:	781a      	ldrb	r2, [r3, #0]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	23c0      	movs	r3, #192	@ 0xc0
 800fbcc:	0059      	lsls	r1, r3, #1
 800fbce:	0013      	movs	r3, r2
 800fbd0:	009b      	lsls	r3, r3, #2
 800fbd2:	189b      	adds	r3, r3, r2
 800fbd4:	00db      	lsls	r3, r3, #3
 800fbd6:	18c3      	adds	r3, r0, r3
 800fbd8:	185b      	adds	r3, r3, r1
 800fbda:	2200      	movs	r2, #0
 800fbdc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fbde:	193b      	adds	r3, r7, r4
 800fbe0:	781a      	ldrb	r2, [r3, #0]
 800fbe2:	193b      	adds	r3, r7, r4
 800fbe4:	3201      	adds	r2, #1
 800fbe6:	701a      	strb	r2, [r3, #0]
 800fbe8:	230f      	movs	r3, #15
 800fbea:	18fb      	adds	r3, r7, r3
 800fbec:	781a      	ldrb	r2, [r3, #0]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d3a1      	bcc.n	800fb3a <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6818      	ldr	r0, [r3, #0]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	466a      	mov	r2, sp
 800fbfe:	0011      	movs	r1, r2
 800fc00:	001a      	movs	r2, r3
 800fc02:	3210      	adds	r2, #16
 800fc04:	ca70      	ldmia	r2!, {r4, r5, r6}
 800fc06:	c170      	stmia	r1!, {r4, r5, r6}
 800fc08:	ca30      	ldmia	r2!, {r4, r5}
 800fc0a:	c130      	stmia	r1!, {r4, r5}
 800fc0c:	6859      	ldr	r1, [r3, #4]
 800fc0e:	689a      	ldr	r2, [r3, #8]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	f005 fcd9 	bl	80155c8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2224      	movs	r2, #36	@ 0x24
 800fc1a:	2100      	movs	r1, #0
 800fc1c:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	4a07      	ldr	r2, [pc, #28]	@ (800fc40 <HAL_PCD_Init+0x1fc>)
 800fc22:	2101      	movs	r1, #1
 800fc24:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	69db      	ldr	r3, [r3, #28]
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d103      	bne.n	800fc36 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	0018      	movs	r0, r3
 800fc32:	f001 fd23 	bl	801167c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800fc36:	2300      	movs	r3, #0
}
 800fc38:	0018      	movs	r0, r3
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	b005      	add	sp, #20
 800fc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc40:	000002a9 	.word	0x000002a9

0800fc44 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b082      	sub	sp, #8
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	23aa      	movs	r3, #170	@ 0xaa
 800fc50:	009b      	lsls	r3, r3, #2
 800fc52:	5cd3      	ldrb	r3, [r2, r3]
 800fc54:	2b01      	cmp	r3, #1
 800fc56:	d101      	bne.n	800fc5c <HAL_PCD_Start+0x18>
 800fc58:	2302      	movs	r3, #2
 800fc5a:	e014      	b.n	800fc86 <HAL_PCD_Start+0x42>
 800fc5c:	687a      	ldr	r2, [r7, #4]
 800fc5e:	23aa      	movs	r3, #170	@ 0xaa
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	2101      	movs	r1, #1
 800fc64:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	0018      	movs	r0, r3
 800fc6c:	f005 fc7c 	bl	8015568 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	0018      	movs	r0, r3
 800fc76:	f007 fc7f 	bl	8017578 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	23aa      	movs	r3, #170	@ 0xaa
 800fc7e:	009b      	lsls	r3, r3, #2
 800fc80:	2100      	movs	r1, #0
 800fc82:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	0018      	movs	r0, r3
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	b002      	add	sp, #8
 800fc8c:	bd80      	pop	{r7, pc}
	...

0800fc90 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b084      	sub	sp, #16
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	0018      	movs	r0, r3
 800fc9e:	f007 fc81 	bl	80175a4 <USB_ReadInterrupts>
 800fca2:	0003      	movs	r3, r0
 800fca4:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	2380      	movs	r3, #128	@ 0x80
 800fcaa:	021b      	lsls	r3, r3, #8
 800fcac:	4013      	ands	r3, r2
 800fcae:	d004      	beq.n	800fcba <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	0018      	movs	r0, r3
 800fcb4:	f000 fb62 	bl	801037c <PCD_EP_ISR_Handler>

    return;
 800fcb8:	e11d      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800fcba:	68fa      	ldr	r2, [r7, #12]
 800fcbc:	2380      	movs	r3, #128	@ 0x80
 800fcbe:	00db      	lsls	r3, r3, #3
 800fcc0:	4013      	ands	r3, r2
 800fcc2:	d015      	beq.n	800fcf0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2244      	movs	r2, #68	@ 0x44
 800fcca:	5a9b      	ldrh	r3, [r3, r2]
 800fccc:	b29a      	uxth	r2, r3
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	498a      	ldr	r1, [pc, #552]	@ (800fefc <HAL_PCD_IRQHandler+0x26c>)
 800fcd4:	400a      	ands	r2, r1
 800fcd6:	b291      	uxth	r1, r2
 800fcd8:	2244      	movs	r2, #68	@ 0x44
 800fcda:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	0018      	movs	r0, r3
 800fce0:	f009 fd1f 	bl	8019722 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2100      	movs	r1, #0
 800fce8:	0018      	movs	r0, r3
 800fcea:	f000 f915 	bl	800ff18 <HAL_PCD_SetAddress>

    return;
 800fcee:	e102      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	2380      	movs	r3, #128	@ 0x80
 800fcf4:	01db      	lsls	r3, r3, #7
 800fcf6:	4013      	ands	r3, r2
 800fcf8:	d00c      	beq.n	800fd14 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2244      	movs	r2, #68	@ 0x44
 800fd00:	5a9b      	ldrh	r3, [r3, r2]
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	497d      	ldr	r1, [pc, #500]	@ (800ff00 <HAL_PCD_IRQHandler+0x270>)
 800fd0a:	400a      	ands	r2, r1
 800fd0c:	b291      	uxth	r1, r2
 800fd0e:	2244      	movs	r2, #68	@ 0x44
 800fd10:	5299      	strh	r1, [r3, r2]

    return;
 800fd12:	e0f0      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800fd14:	68fa      	ldr	r2, [r7, #12]
 800fd16:	2380      	movs	r3, #128	@ 0x80
 800fd18:	019b      	lsls	r3, r3, #6
 800fd1a:	4013      	ands	r3, r2
 800fd1c:	d00c      	beq.n	800fd38 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2244      	movs	r2, #68	@ 0x44
 800fd24:	5a9b      	ldrh	r3, [r3, r2]
 800fd26:	b29a      	uxth	r2, r3
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	4975      	ldr	r1, [pc, #468]	@ (800ff04 <HAL_PCD_IRQHandler+0x274>)
 800fd2e:	400a      	ands	r2, r1
 800fd30:	b291      	uxth	r1, r2
 800fd32:	2244      	movs	r2, #68	@ 0x44
 800fd34:	5299      	strh	r1, [r3, r2]

    return;
 800fd36:	e0de      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	2380      	movs	r3, #128	@ 0x80
 800fd3c:	015b      	lsls	r3, r3, #5
 800fd3e:	4013      	ands	r3, r2
 800fd40:	d038      	beq.n	800fdb4 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2240      	movs	r2, #64	@ 0x40
 800fd48:	5a9b      	ldrh	r3, [r3, r2]
 800fd4a:	b29a      	uxth	r2, r3
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	2104      	movs	r1, #4
 800fd52:	438a      	bics	r2, r1
 800fd54:	b291      	uxth	r1, r2
 800fd56:	2240      	movs	r2, #64	@ 0x40
 800fd58:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	2240      	movs	r2, #64	@ 0x40
 800fd60:	5a9b      	ldrh	r3, [r3, r2]
 800fd62:	b29a      	uxth	r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2108      	movs	r1, #8
 800fd6a:	438a      	bics	r2, r1
 800fd6c:	b291      	uxth	r1, r2
 800fd6e:	2240      	movs	r2, #64	@ 0x40
 800fd70:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	23b8      	movs	r3, #184	@ 0xb8
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	5cd3      	ldrb	r3, [r2, r3]
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d109      	bne.n	800fd92 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	23b8      	movs	r3, #184	@ 0xb8
 800fd82:	009b      	lsls	r3, r3, #2
 800fd84:	2100      	movs	r1, #0
 800fd86:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	0018      	movs	r0, r3
 800fd8e:	f001 fc9f 	bl	80116d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	0018      	movs	r0, r3
 800fd96:	f009 fd05 	bl	80197a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	2244      	movs	r2, #68	@ 0x44
 800fda0:	5a9b      	ldrh	r3, [r3, r2]
 800fda2:	b29a      	uxth	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4957      	ldr	r1, [pc, #348]	@ (800ff08 <HAL_PCD_IRQHandler+0x278>)
 800fdaa:	400a      	ands	r2, r1
 800fdac:	b291      	uxth	r1, r2
 800fdae:	2244      	movs	r2, #68	@ 0x44
 800fdb0:	5299      	strh	r1, [r3, r2]

    return;
 800fdb2:	e0a0      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	2380      	movs	r3, #128	@ 0x80
 800fdb8:	011b      	lsls	r3, r3, #4
 800fdba:	4013      	ands	r3, r2
 800fdbc:	d028      	beq.n	800fe10 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	2240      	movs	r2, #64	@ 0x40
 800fdc4:	5a9b      	ldrh	r3, [r3, r2]
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2108      	movs	r1, #8
 800fdce:	430a      	orrs	r2, r1
 800fdd0:	b291      	uxth	r1, r2
 800fdd2:	2240      	movs	r2, #64	@ 0x40
 800fdd4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2244      	movs	r2, #68	@ 0x44
 800fddc:	5a9b      	ldrh	r3, [r3, r2]
 800fdde:	b29a      	uxth	r2, r3
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4949      	ldr	r1, [pc, #292]	@ (800ff0c <HAL_PCD_IRQHandler+0x27c>)
 800fde6:	400a      	ands	r2, r1
 800fde8:	b291      	uxth	r1, r2
 800fdea:	2244      	movs	r2, #68	@ 0x44
 800fdec:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	2240      	movs	r2, #64	@ 0x40
 800fdf4:	5a9b      	ldrh	r3, [r3, r2]
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2104      	movs	r1, #4
 800fdfe:	430a      	orrs	r2, r1
 800fe00:	b291      	uxth	r1, r2
 800fe02:	2240      	movs	r2, #64	@ 0x40
 800fe04:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	0018      	movs	r0, r3
 800fe0a:	f009 fcaf 	bl	801976c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fe0e:	e072      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	2280      	movs	r2, #128	@ 0x80
 800fe14:	4013      	ands	r3, r2
 800fe16:	d046      	beq.n	800fea6 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2244      	movs	r2, #68	@ 0x44
 800fe1e:	5a9b      	ldrh	r3, [r3, r2]
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2180      	movs	r1, #128	@ 0x80
 800fe28:	438a      	bics	r2, r1
 800fe2a:	b291      	uxth	r1, r2
 800fe2c:	2244      	movs	r2, #68	@ 0x44
 800fe2e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	23b8      	movs	r3, #184	@ 0xb8
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	5cd3      	ldrb	r3, [r2, r3]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d12f      	bne.n	800fe9c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2240      	movs	r2, #64	@ 0x40
 800fe42:	5a9b      	ldrh	r3, [r3, r2]
 800fe44:	b29a      	uxth	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2104      	movs	r1, #4
 800fe4c:	430a      	orrs	r2, r1
 800fe4e:	b291      	uxth	r1, r2
 800fe50:	2240      	movs	r2, #64	@ 0x40
 800fe52:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2240      	movs	r2, #64	@ 0x40
 800fe5a:	5a9b      	ldrh	r3, [r3, r2]
 800fe5c:	b29a      	uxth	r2, r3
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2108      	movs	r1, #8
 800fe64:	430a      	orrs	r2, r1
 800fe66:	b291      	uxth	r1, r2
 800fe68:	2240      	movs	r2, #64	@ 0x40
 800fe6a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	23b8      	movs	r3, #184	@ 0xb8
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	2101      	movs	r1, #1
 800fe74:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2254      	movs	r2, #84	@ 0x54
 800fe7c:	5a9b      	ldrh	r3, [r3, r2]
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	089b      	lsrs	r3, r3, #2
 800fe82:	223c      	movs	r2, #60	@ 0x3c
 800fe84:	4013      	ands	r3, r2
 800fe86:	0019      	movs	r1, r3
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	23b9      	movs	r3, #185	@ 0xb9
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2101      	movs	r1, #1
 800fe94:	0018      	movs	r0, r3
 800fe96:	f001 fc1b 	bl	80116d0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800fe9a:	e02c      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	0018      	movs	r0, r3
 800fea0:	f009 fc64 	bl	801976c <HAL_PCD_SuspendCallback>
    return;
 800fea4:	e027      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	2380      	movs	r3, #128	@ 0x80
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	4013      	ands	r3, r2
 800feae:	d010      	beq.n	800fed2 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2244      	movs	r2, #68	@ 0x44
 800feb6:	5a9b      	ldrh	r3, [r3, r2]
 800feb8:	b29a      	uxth	r2, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4914      	ldr	r1, [pc, #80]	@ (800ff10 <HAL_PCD_IRQHandler+0x280>)
 800fec0:	400a      	ands	r2, r1
 800fec2:	b291      	uxth	r1, r2
 800fec4:	2244      	movs	r2, #68	@ 0x44
 800fec6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	0018      	movs	r0, r3
 800fecc:	f009 fc1a 	bl	8019704 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fed0:	e011      	b.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800fed2:	68fa      	ldr	r2, [r7, #12]
 800fed4:	2380      	movs	r3, #128	@ 0x80
 800fed6:	005b      	lsls	r3, r3, #1
 800fed8:	4013      	ands	r3, r2
 800feda:	d00c      	beq.n	800fef6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2244      	movs	r2, #68	@ 0x44
 800fee2:	5a9b      	ldrh	r3, [r3, r2]
 800fee4:	b29a      	uxth	r2, r3
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	490a      	ldr	r1, [pc, #40]	@ (800ff14 <HAL_PCD_IRQHandler+0x284>)
 800feec:	400a      	ands	r2, r1
 800feee:	b291      	uxth	r1, r2
 800fef0:	2244      	movs	r2, #68	@ 0x44
 800fef2:	5299      	strh	r1, [r3, r2]

    return;
 800fef4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800fef6:	46bd      	mov	sp, r7
 800fef8:	b004      	add	sp, #16
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	fffffbff 	.word	0xfffffbff
 800ff00:	ffffbfff 	.word	0xffffbfff
 800ff04:	ffffdfff 	.word	0xffffdfff
 800ff08:	ffffefff 	.word	0xffffefff
 800ff0c:	fffff7ff 	.word	0xfffff7ff
 800ff10:	fffffdff 	.word	0xfffffdff
 800ff14:	fffffeff 	.word	0xfffffeff

0800ff18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b082      	sub	sp, #8
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	000a      	movs	r2, r1
 800ff22:	1cfb      	adds	r3, r7, #3
 800ff24:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	23aa      	movs	r3, #170	@ 0xaa
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	5cd3      	ldrb	r3, [r2, r3]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d101      	bne.n	800ff36 <HAL_PCD_SetAddress+0x1e>
 800ff32:	2302      	movs	r3, #2
 800ff34:	e017      	b.n	800ff66 <HAL_PCD_SetAddress+0x4e>
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	23aa      	movs	r3, #170	@ 0xaa
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	1cfa      	adds	r2, r7, #3
 800ff44:	2124      	movs	r1, #36	@ 0x24
 800ff46:	7812      	ldrb	r2, [r2, #0]
 800ff48:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	1cfb      	adds	r3, r7, #3
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	0019      	movs	r1, r3
 800ff54:	0010      	movs	r0, r2
 800ff56:	f007 fafb 	bl	8017550 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	23aa      	movs	r3, #170	@ 0xaa
 800ff5e:	009b      	lsls	r3, r3, #2
 800ff60:	2100      	movs	r1, #0
 800ff62:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	0018      	movs	r0, r3
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	b002      	add	sp, #8
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ff6e:	b590      	push	{r4, r7, lr}
 800ff70:	b085      	sub	sp, #20
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
 800ff76:	000c      	movs	r4, r1
 800ff78:	0010      	movs	r0, r2
 800ff7a:	0019      	movs	r1, r3
 800ff7c:	1cfb      	adds	r3, r7, #3
 800ff7e:	1c22      	adds	r2, r4, #0
 800ff80:	701a      	strb	r2, [r3, #0]
 800ff82:	003b      	movs	r3, r7
 800ff84:	1c02      	adds	r2, r0, #0
 800ff86:	801a      	strh	r2, [r3, #0]
 800ff88:	1cbb      	adds	r3, r7, #2
 800ff8a:	1c0a      	adds	r2, r1, #0
 800ff8c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ff8e:	230b      	movs	r3, #11
 800ff90:	18fb      	adds	r3, r7, r3
 800ff92:	2200      	movs	r2, #0
 800ff94:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ff96:	1cfb      	adds	r3, r7, #3
 800ff98:	781b      	ldrb	r3, [r3, #0]
 800ff9a:	b25b      	sxtb	r3, r3
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	da0f      	bge.n	800ffc0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ffa0:	1cfb      	adds	r3, r7, #3
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	2207      	movs	r2, #7
 800ffa6:	4013      	ands	r3, r2
 800ffa8:	1c5a      	adds	r2, r3, #1
 800ffaa:	0013      	movs	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	189b      	adds	r3, r3, r2
 800ffb0:	00db      	lsls	r3, r3, #3
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	18d3      	adds	r3, r2, r3
 800ffb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2201      	movs	r2, #1
 800ffbc:	705a      	strb	r2, [r3, #1]
 800ffbe:	e00f      	b.n	800ffe0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ffc0:	1cfb      	adds	r3, r7, #3
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	2207      	movs	r2, #7
 800ffc6:	401a      	ands	r2, r3
 800ffc8:	0013      	movs	r3, r2
 800ffca:	009b      	lsls	r3, r3, #2
 800ffcc:	189b      	adds	r3, r3, r2
 800ffce:	00db      	lsls	r3, r3, #3
 800ffd0:	3369      	adds	r3, #105	@ 0x69
 800ffd2:	33ff      	adds	r3, #255	@ 0xff
 800ffd4:	687a      	ldr	r2, [r7, #4]
 800ffd6:	18d3      	adds	r3, r2, r3
 800ffd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ffe0:	1cfb      	adds	r3, r7, #3
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	2207      	movs	r2, #7
 800ffe6:	4013      	ands	r3, r2
 800ffe8:	b2da      	uxtb	r2, r3
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ffee:	003b      	movs	r3, r7
 800fff0:	881a      	ldrh	r2, [r3, #0]
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	1cba      	adds	r2, r7, #2
 800fffa:	7812      	ldrb	r2, [r2, #0]
 800fffc:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800fffe:	1cbb      	adds	r3, r7, #2
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	2b02      	cmp	r3, #2
 8010004:	d102      	bne.n	801000c <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	2200      	movs	r2, #0
 801000a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	23aa      	movs	r3, #170	@ 0xaa
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	5cd3      	ldrb	r3, [r2, r3]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d101      	bne.n	801001c <HAL_PCD_EP_Open+0xae>
 8010018:	2302      	movs	r3, #2
 801001a:	e013      	b.n	8010044 <HAL_PCD_EP_Open+0xd6>
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	23aa      	movs	r3, #170	@ 0xaa
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	2101      	movs	r1, #1
 8010024:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	0011      	movs	r1, r2
 801002e:	0018      	movs	r0, r3
 8010030:	f005 faf2 	bl	8015618 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010034:	687a      	ldr	r2, [r7, #4]
 8010036:	23aa      	movs	r3, #170	@ 0xaa
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	2100      	movs	r1, #0
 801003c:	54d1      	strb	r1, [r2, r3]

  return ret;
 801003e:	230b      	movs	r3, #11
 8010040:	18fb      	adds	r3, r7, r3
 8010042:	781b      	ldrb	r3, [r3, #0]
}
 8010044:	0018      	movs	r0, r3
 8010046:	46bd      	mov	sp, r7
 8010048:	b005      	add	sp, #20
 801004a:	bd90      	pop	{r4, r7, pc}

0801004c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	000a      	movs	r2, r1
 8010056:	1cfb      	adds	r3, r7, #3
 8010058:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801005a:	1cfb      	adds	r3, r7, #3
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	b25b      	sxtb	r3, r3
 8010060:	2b00      	cmp	r3, #0
 8010062:	da0f      	bge.n	8010084 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010064:	1cfb      	adds	r3, r7, #3
 8010066:	781b      	ldrb	r3, [r3, #0]
 8010068:	2207      	movs	r2, #7
 801006a:	4013      	ands	r3, r2
 801006c:	1c5a      	adds	r2, r3, #1
 801006e:	0013      	movs	r3, r2
 8010070:	009b      	lsls	r3, r3, #2
 8010072:	189b      	adds	r3, r3, r2
 8010074:	00db      	lsls	r3, r3, #3
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	18d3      	adds	r3, r2, r3
 801007a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2201      	movs	r2, #1
 8010080:	705a      	strb	r2, [r3, #1]
 8010082:	e00f      	b.n	80100a4 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010084:	1cfb      	adds	r3, r7, #3
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	2207      	movs	r2, #7
 801008a:	401a      	ands	r2, r3
 801008c:	0013      	movs	r3, r2
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	189b      	adds	r3, r3, r2
 8010092:	00db      	lsls	r3, r3, #3
 8010094:	3369      	adds	r3, #105	@ 0x69
 8010096:	33ff      	adds	r3, #255	@ 0xff
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	18d3      	adds	r3, r2, r3
 801009c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80100a4:	1cfb      	adds	r3, r7, #3
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	2207      	movs	r2, #7
 80100aa:	4013      	ands	r3, r2
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	23aa      	movs	r3, #170	@ 0xaa
 80100b6:	009b      	lsls	r3, r3, #2
 80100b8:	5cd3      	ldrb	r3, [r2, r3]
 80100ba:	2b01      	cmp	r3, #1
 80100bc:	d101      	bne.n	80100c2 <HAL_PCD_EP_Close+0x76>
 80100be:	2302      	movs	r3, #2
 80100c0:	e011      	b.n	80100e6 <HAL_PCD_EP_Close+0x9a>
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	23aa      	movs	r3, #170	@ 0xaa
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	2101      	movs	r1, #1
 80100ca:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	68fa      	ldr	r2, [r7, #12]
 80100d2:	0011      	movs	r1, r2
 80100d4:	0018      	movs	r0, r3
 80100d6:	f005 fe41 	bl	8015d5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80100da:	687a      	ldr	r2, [r7, #4]
 80100dc:	23aa      	movs	r3, #170	@ 0xaa
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	2100      	movs	r1, #0
 80100e2:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80100e4:	2300      	movs	r3, #0
}
 80100e6:	0018      	movs	r0, r3
 80100e8:	46bd      	mov	sp, r7
 80100ea:	b004      	add	sp, #16
 80100ec:	bd80      	pop	{r7, pc}

080100ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80100ee:	b580      	push	{r7, lr}
 80100f0:	b086      	sub	sp, #24
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	60f8      	str	r0, [r7, #12]
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	603b      	str	r3, [r7, #0]
 80100fa:	200b      	movs	r0, #11
 80100fc:	183b      	adds	r3, r7, r0
 80100fe:	1c0a      	adds	r2, r1, #0
 8010100:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010102:	0001      	movs	r1, r0
 8010104:	187b      	adds	r3, r7, r1
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	2207      	movs	r2, #7
 801010a:	401a      	ands	r2, r3
 801010c:	0013      	movs	r3, r2
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	189b      	adds	r3, r3, r2
 8010112:	00db      	lsls	r3, r3, #3
 8010114:	3369      	adds	r3, #105	@ 0x69
 8010116:	33ff      	adds	r3, #255	@ 0xff
 8010118:	68fa      	ldr	r2, [r7, #12]
 801011a:	18d3      	adds	r3, r2, r3
 801011c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	687a      	ldr	r2, [r7, #4]
 8010122:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	683a      	ldr	r2, [r7, #0]
 8010128:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2200      	movs	r2, #0
 801012e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	2200      	movs	r2, #0
 8010134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010136:	187b      	adds	r3, r7, r1
 8010138:	781b      	ldrb	r3, [r3, #0]
 801013a:	2207      	movs	r2, #7
 801013c:	4013      	ands	r3, r2
 801013e:	b2da      	uxtb	r2, r3
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	697a      	ldr	r2, [r7, #20]
 801014a:	0011      	movs	r1, r2
 801014c:	0018      	movs	r0, r3
 801014e:	f005 ffc5 	bl	80160dc <USB_EPStartXfer>

  return HAL_OK;
 8010152:	2300      	movs	r3, #0
}
 8010154:	0018      	movs	r0, r3
 8010156:	46bd      	mov	sp, r7
 8010158:	b006      	add	sp, #24
 801015a:	bd80      	pop	{r7, pc}

0801015c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	000a      	movs	r2, r1
 8010166:	1cfb      	adds	r3, r7, #3
 8010168:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801016a:	1cfb      	adds	r3, r7, #3
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2207      	movs	r2, #7
 8010170:	401a      	ands	r2, r3
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	23c2      	movs	r3, #194	@ 0xc2
 8010176:	0059      	lsls	r1, r3, #1
 8010178:	0013      	movs	r3, r2
 801017a:	009b      	lsls	r3, r3, #2
 801017c:	189b      	adds	r3, r3, r2
 801017e:	00db      	lsls	r3, r3, #3
 8010180:	18c3      	adds	r3, r0, r3
 8010182:	185b      	adds	r3, r3, r1
 8010184:	681b      	ldr	r3, [r3, #0]
}
 8010186:	0018      	movs	r0, r3
 8010188:	46bd      	mov	sp, r7
 801018a:	b002      	add	sp, #8
 801018c:	bd80      	pop	{r7, pc}

0801018e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b086      	sub	sp, #24
 8010192:	af00      	add	r7, sp, #0
 8010194:	60f8      	str	r0, [r7, #12]
 8010196:	607a      	str	r2, [r7, #4]
 8010198:	603b      	str	r3, [r7, #0]
 801019a:	200b      	movs	r0, #11
 801019c:	183b      	adds	r3, r7, r0
 801019e:	1c0a      	adds	r2, r1, #0
 80101a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80101a2:	183b      	adds	r3, r7, r0
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	2207      	movs	r2, #7
 80101a8:	4013      	ands	r3, r2
 80101aa:	1c5a      	adds	r2, r3, #1
 80101ac:	0013      	movs	r3, r2
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	189b      	adds	r3, r3, r2
 80101b2:	00db      	lsls	r3, r3, #3
 80101b4:	68fa      	ldr	r2, [r7, #12]
 80101b6:	18d3      	adds	r3, r2, r3
 80101b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	683a      	ldr	r2, [r7, #0]
 80101c4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	2224      	movs	r2, #36	@ 0x24
 80101ca:	2101      	movs	r1, #1
 80101cc:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	2200      	movs	r2, #0
 80101d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	2201      	movs	r2, #1
 80101de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80101e0:	183b      	adds	r3, r7, r0
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	2207      	movs	r2, #7
 80101e6:	4013      	ands	r3, r2
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	697a      	ldr	r2, [r7, #20]
 80101f4:	0011      	movs	r1, r2
 80101f6:	0018      	movs	r0, r3
 80101f8:	f005 ff70 	bl	80160dc <USB_EPStartXfer>

  return HAL_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	0018      	movs	r0, r3
 8010200:	46bd      	mov	sp, r7
 8010202:	b006      	add	sp, #24
 8010204:	bd80      	pop	{r7, pc}

08010206 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b084      	sub	sp, #16
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
 801020e:	000a      	movs	r2, r1
 8010210:	1cfb      	adds	r3, r7, #3
 8010212:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010214:	1cfb      	adds	r3, r7, #3
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2207      	movs	r2, #7
 801021a:	401a      	ands	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	429a      	cmp	r2, r3
 8010222:	d901      	bls.n	8010228 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8010224:	2301      	movs	r3, #1
 8010226:	e046      	b.n	80102b6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010228:	1cfb      	adds	r3, r7, #3
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	b25b      	sxtb	r3, r3
 801022e:	2b00      	cmp	r3, #0
 8010230:	da0f      	bge.n	8010252 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010232:	1cfb      	adds	r3, r7, #3
 8010234:	781b      	ldrb	r3, [r3, #0]
 8010236:	2207      	movs	r2, #7
 8010238:	4013      	ands	r3, r2
 801023a:	1c5a      	adds	r2, r3, #1
 801023c:	0013      	movs	r3, r2
 801023e:	009b      	lsls	r3, r3, #2
 8010240:	189b      	adds	r3, r3, r2
 8010242:	00db      	lsls	r3, r3, #3
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	18d3      	adds	r3, r2, r3
 8010248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2201      	movs	r2, #1
 801024e:	705a      	strb	r2, [r3, #1]
 8010250:	e00d      	b.n	801026e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8010252:	1cfb      	adds	r3, r7, #3
 8010254:	781a      	ldrb	r2, [r3, #0]
 8010256:	0013      	movs	r3, r2
 8010258:	009b      	lsls	r3, r3, #2
 801025a:	189b      	adds	r3, r3, r2
 801025c:	00db      	lsls	r3, r3, #3
 801025e:	3369      	adds	r3, #105	@ 0x69
 8010260:	33ff      	adds	r3, #255	@ 0xff
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	18d3      	adds	r3, r2, r3
 8010266:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2200      	movs	r2, #0
 801026c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	2201      	movs	r2, #1
 8010272:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010274:	1cfb      	adds	r3, r7, #3
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	2207      	movs	r2, #7
 801027a:	4013      	ands	r3, r2
 801027c:	b2da      	uxtb	r2, r3
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	23aa      	movs	r3, #170	@ 0xaa
 8010286:	009b      	lsls	r3, r3, #2
 8010288:	5cd3      	ldrb	r3, [r2, r3]
 801028a:	2b01      	cmp	r3, #1
 801028c:	d101      	bne.n	8010292 <HAL_PCD_EP_SetStall+0x8c>
 801028e:	2302      	movs	r3, #2
 8010290:	e011      	b.n	80102b6 <HAL_PCD_EP_SetStall+0xb0>
 8010292:	687a      	ldr	r2, [r7, #4]
 8010294:	23aa      	movs	r3, #170	@ 0xaa
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	2101      	movs	r1, #1
 801029a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	0011      	movs	r1, r2
 80102a4:	0018      	movs	r0, r3
 80102a6:	f007 f851 	bl	801734c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	23aa      	movs	r3, #170	@ 0xaa
 80102ae:	009b      	lsls	r3, r3, #2
 80102b0:	2100      	movs	r1, #0
 80102b2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	0018      	movs	r0, r3
 80102b8:	46bd      	mov	sp, r7
 80102ba:	b004      	add	sp, #16
 80102bc:	bd80      	pop	{r7, pc}

080102be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b084      	sub	sp, #16
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	000a      	movs	r2, r1
 80102c8:	1cfb      	adds	r3, r7, #3
 80102ca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80102cc:	1cfb      	adds	r3, r7, #3
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	220f      	movs	r2, #15
 80102d2:	401a      	ands	r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d901      	bls.n	80102e0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80102dc:	2301      	movs	r3, #1
 80102de:	e048      	b.n	8010372 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80102e0:	1cfb      	adds	r3, r7, #3
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	b25b      	sxtb	r3, r3
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	da0f      	bge.n	801030a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80102ea:	1cfb      	adds	r3, r7, #3
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	2207      	movs	r2, #7
 80102f0:	4013      	ands	r3, r2
 80102f2:	1c5a      	adds	r2, r3, #1
 80102f4:	0013      	movs	r3, r2
 80102f6:	009b      	lsls	r3, r3, #2
 80102f8:	189b      	adds	r3, r3, r2
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	18d3      	adds	r3, r2, r3
 8010300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	2201      	movs	r2, #1
 8010306:	705a      	strb	r2, [r3, #1]
 8010308:	e00f      	b.n	801032a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801030a:	1cfb      	adds	r3, r7, #3
 801030c:	781b      	ldrb	r3, [r3, #0]
 801030e:	2207      	movs	r2, #7
 8010310:	401a      	ands	r2, r3
 8010312:	0013      	movs	r3, r2
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	189b      	adds	r3, r3, r2
 8010318:	00db      	lsls	r3, r3, #3
 801031a:	3369      	adds	r3, #105	@ 0x69
 801031c:	33ff      	adds	r3, #255	@ 0xff
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	18d3      	adds	r3, r2, r3
 8010322:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2200      	movs	r2, #0
 8010328:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	2200      	movs	r2, #0
 801032e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010330:	1cfb      	adds	r3, r7, #3
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	2207      	movs	r2, #7
 8010336:	4013      	ands	r3, r2
 8010338:	b2da      	uxtb	r2, r3
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	23aa      	movs	r3, #170	@ 0xaa
 8010342:	009b      	lsls	r3, r3, #2
 8010344:	5cd3      	ldrb	r3, [r2, r3]
 8010346:	2b01      	cmp	r3, #1
 8010348:	d101      	bne.n	801034e <HAL_PCD_EP_ClrStall+0x90>
 801034a:	2302      	movs	r3, #2
 801034c:	e011      	b.n	8010372 <HAL_PCD_EP_ClrStall+0xb4>
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	23aa      	movs	r3, #170	@ 0xaa
 8010352:	009b      	lsls	r3, r3, #2
 8010354:	2101      	movs	r1, #1
 8010356:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	68fa      	ldr	r2, [r7, #12]
 801035e:	0011      	movs	r1, r2
 8010360:	0018      	movs	r0, r3
 8010362:	f007 f843 	bl	80173ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	23aa      	movs	r3, #170	@ 0xaa
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	2100      	movs	r1, #0
 801036e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8010370:	2300      	movs	r3, #0
}
 8010372:	0018      	movs	r0, r3
 8010374:	46bd      	mov	sp, r7
 8010376:	b004      	add	sp, #16
 8010378:	bd80      	pop	{r7, pc}
	...

0801037c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801037c:	b5b0      	push	{r4, r5, r7, lr}
 801037e:	b096      	sub	sp, #88	@ 0x58
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010384:	f000 fbec 	bl	8010b60 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	204e      	movs	r0, #78	@ 0x4e
 801038e:	183b      	adds	r3, r7, r0
 8010390:	2144      	movs	r1, #68	@ 0x44
 8010392:	5a52      	ldrh	r2, [r2, r1]
 8010394:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8010396:	183b      	adds	r3, r7, r0
 8010398:	881b      	ldrh	r3, [r3, #0]
 801039a:	b2da      	uxtb	r2, r3
 801039c:	244d      	movs	r4, #77	@ 0x4d
 801039e:	193b      	adds	r3, r7, r4
 80103a0:	210f      	movs	r1, #15
 80103a2:	400a      	ands	r2, r1
 80103a4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80103a6:	193b      	adds	r3, r7, r4
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d000      	beq.n	80103b0 <PCD_EP_ISR_Handler+0x34>
 80103ae:	e18f      	b.n	80106d0 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80103b0:	183b      	adds	r3, r7, r0
 80103b2:	881b      	ldrh	r3, [r3, #0]
 80103b4:	2210      	movs	r2, #16
 80103b6:	4013      	ands	r3, r2
 80103b8:	d155      	bne.n	8010466 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	b29a      	uxth	r2, r3
 80103c2:	200e      	movs	r0, #14
 80103c4:	183b      	adds	r3, r7, r0
 80103c6:	49bb      	ldr	r1, [pc, #748]	@ (80106b4 <PCD_EP_ISR_Handler+0x338>)
 80103c8:	400a      	ands	r2, r1
 80103ca:	801a      	strh	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	183a      	adds	r2, r7, r0
 80103d2:	8812      	ldrh	r2, [r2, #0]
 80103d4:	49b8      	ldr	r1, [pc, #736]	@ (80106b8 <PCD_EP_ISR_Handler+0x33c>)
 80103d6:	430a      	orrs	r2, r1
 80103d8:	b292      	uxth	r2, r2
 80103da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	3328      	adds	r3, #40	@ 0x28
 80103e0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	2250      	movs	r2, #80	@ 0x50
 80103e8:	5a9b      	ldrh	r3, [r3, r2]
 80103ea:	b29b      	uxth	r3, r3
 80103ec:	001a      	movs	r2, r3
 80103ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103f0:	781b      	ldrb	r3, [r3, #0]
 80103f2:	00db      	lsls	r3, r3, #3
 80103f4:	18d2      	adds	r2, r2, r3
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	18d3      	adds	r3, r2, r3
 80103fc:	4aaf      	ldr	r2, [pc, #700]	@ (80106bc <PCD_EP_ISR_Handler+0x340>)
 80103fe:	4694      	mov	ip, r2
 8010400:	4463      	add	r3, ip
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	059b      	lsls	r3, r3, #22
 8010406:	0d9a      	lsrs	r2, r3, #22
 8010408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801040a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 801040c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801040e:	695a      	ldr	r2, [r3, #20]
 8010410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010412:	69db      	ldr	r3, [r3, #28]
 8010414:	18d2      	adds	r2, r2, r3
 8010416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010418:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2100      	movs	r1, #0
 801041e:	0018      	movs	r0, r3
 8010420:	f009 f952 	bl	80196c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2224      	movs	r2, #36	@ 0x24
 8010428:	5c9b      	ldrb	r3, [r3, r2]
 801042a:	b2db      	uxtb	r3, r3
 801042c:	2b00      	cmp	r3, #0
 801042e:	d101      	bne.n	8010434 <PCD_EP_ISR_Handler+0xb8>
 8010430:	f000 fb96 	bl	8010b60 <PCD_EP_ISR_Handler+0x7e4>
 8010434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <PCD_EP_ISR_Handler+0xc4>
 801043c:	f000 fb90 	bl	8010b60 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2224      	movs	r2, #36	@ 0x24
 8010444:	5c9b      	ldrb	r3, [r3, r2]
 8010446:	b2db      	uxtb	r3, r3
 8010448:	2280      	movs	r2, #128	@ 0x80
 801044a:	4252      	negs	r2, r2
 801044c:	4313      	orrs	r3, r2
 801044e:	b2da      	uxtb	r2, r3
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	0011      	movs	r1, r2
 8010456:	224c      	movs	r2, #76	@ 0x4c
 8010458:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2224      	movs	r2, #36	@ 0x24
 801045e:	2100      	movs	r1, #0
 8010460:	5499      	strb	r1, [r3, r2]
 8010462:	f000 fb7d 	bl	8010b60 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	3369      	adds	r3, #105	@ 0x69
 801046a:	33ff      	adds	r3, #255	@ 0xff
 801046c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	214a      	movs	r1, #74	@ 0x4a
 8010474:	187b      	adds	r3, r7, r1
 8010476:	8812      	ldrh	r2, [r2, #0]
 8010478:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801047a:	187b      	adds	r3, r7, r1
 801047c:	881a      	ldrh	r2, [r3, #0]
 801047e:	2380      	movs	r3, #128	@ 0x80
 8010480:	011b      	lsls	r3, r3, #4
 8010482:	4013      	ands	r3, r2
 8010484:	d037      	beq.n	80104f6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2250      	movs	r2, #80	@ 0x50
 801048c:	5a9b      	ldrh	r3, [r3, r2]
 801048e:	b29b      	uxth	r3, r3
 8010490:	001a      	movs	r2, r3
 8010492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	18d2      	adds	r2, r2, r3
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	18d3      	adds	r3, r2, r3
 80104a0:	4a87      	ldr	r2, [pc, #540]	@ (80106c0 <PCD_EP_ISR_Handler+0x344>)
 80104a2:	4694      	mov	ip, r2
 80104a4:	4463      	add	r3, ip
 80104a6:	881b      	ldrh	r3, [r3, #0]
 80104a8:	059b      	lsls	r3, r3, #22
 80104aa:	0d9a      	lsrs	r2, r3, #22
 80104ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	6818      	ldr	r0, [r3, #0]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	22ac      	movs	r2, #172	@ 0xac
 80104b8:	0092      	lsls	r2, r2, #2
 80104ba:	1899      	adds	r1, r3, r2
 80104bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104be:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80104c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104c2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	f007 f8c4 	bl	8017652 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	881b      	ldrh	r3, [r3, #0]
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	2010      	movs	r0, #16
 80104d4:	183b      	adds	r3, r7, r0
 80104d6:	497b      	ldr	r1, [pc, #492]	@ (80106c4 <PCD_EP_ISR_Handler+0x348>)
 80104d8:	400a      	ands	r2, r1
 80104da:	801a      	strh	r2, [r3, #0]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	183a      	adds	r2, r7, r0
 80104e2:	8812      	ldrh	r2, [r2, #0]
 80104e4:	2180      	movs	r1, #128	@ 0x80
 80104e6:	430a      	orrs	r2, r1
 80104e8:	b292      	uxth	r2, r2
 80104ea:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	0018      	movs	r0, r3
 80104f0:	f009 f8b4 	bl	801965c <HAL_PCD_SetupStageCallback>
 80104f4:	e334      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80104f6:	234a      	movs	r3, #74	@ 0x4a
 80104f8:	18fb      	adds	r3, r7, r3
 80104fa:	2200      	movs	r2, #0
 80104fc:	5e9b      	ldrsh	r3, [r3, r2]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	db00      	blt.n	8010504 <PCD_EP_ISR_Handler+0x188>
 8010502:	e32d      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	881b      	ldrh	r3, [r3, #0]
 801050a:	b29a      	uxth	r2, r3
 801050c:	201e      	movs	r0, #30
 801050e:	183b      	adds	r3, r7, r0
 8010510:	496c      	ldr	r1, [pc, #432]	@ (80106c4 <PCD_EP_ISR_Handler+0x348>)
 8010512:	400a      	ands	r2, r1
 8010514:	801a      	strh	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	183a      	adds	r2, r7, r0
 801051c:	8812      	ldrh	r2, [r2, #0]
 801051e:	2180      	movs	r1, #128	@ 0x80
 8010520:	430a      	orrs	r2, r1
 8010522:	b292      	uxth	r2, r2
 8010524:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	2250      	movs	r2, #80	@ 0x50
 801052c:	5a9b      	ldrh	r3, [r3, r2]
 801052e:	b29b      	uxth	r3, r3
 8010530:	001a      	movs	r2, r3
 8010532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010534:	781b      	ldrb	r3, [r3, #0]
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	18d2      	adds	r2, r2, r3
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	18d3      	adds	r3, r2, r3
 8010540:	4a5f      	ldr	r2, [pc, #380]	@ (80106c0 <PCD_EP_ISR_Handler+0x344>)
 8010542:	4694      	mov	ip, r2
 8010544:	4463      	add	r3, ip
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	059b      	lsls	r3, r3, #22
 801054a:	0d9a      	lsrs	r2, r3, #22
 801054c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801054e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8010550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010552:	69db      	ldr	r3, [r3, #28]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d01a      	beq.n	801058e <PCD_EP_ISR_Handler+0x212>
 8010558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801055a:	695b      	ldr	r3, [r3, #20]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d016      	beq.n	801058e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6818      	ldr	r0, [r3, #0]
 8010564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010566:	6959      	ldr	r1, [r3, #20]
 8010568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801056a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801056c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801056e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8010570:	b29b      	uxth	r3, r3
 8010572:	f007 f86e 	bl	8017652 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8010576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010578:	695a      	ldr	r2, [r3, #20]
 801057a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801057c:	69db      	ldr	r3, [r3, #28]
 801057e:	18d2      	adds	r2, r2, r3
 8010580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010582:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2100      	movs	r1, #0
 8010588:	0018      	movs	r0, r3
 801058a:	f009 f87c 	bl	8019686 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	214a      	movs	r1, #74	@ 0x4a
 8010594:	187b      	adds	r3, r7, r1
 8010596:	8812      	ldrh	r2, [r2, #0]
 8010598:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801059a:	187b      	adds	r3, r7, r1
 801059c:	881a      	ldrh	r2, [r3, #0]
 801059e:	2380      	movs	r3, #128	@ 0x80
 80105a0:	011b      	lsls	r3, r3, #4
 80105a2:	4013      	ands	r3, r2
 80105a4:	d000      	beq.n	80105a8 <PCD_EP_ISR_Handler+0x22c>
 80105a6:	e2db      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
 80105a8:	187b      	adds	r3, r7, r1
 80105aa:	881a      	ldrh	r2, [r3, #0]
 80105ac:	23c0      	movs	r3, #192	@ 0xc0
 80105ae:	019b      	lsls	r3, r3, #6
 80105b0:	401a      	ands	r2, r3
 80105b2:	23c0      	movs	r3, #192	@ 0xc0
 80105b4:	019b      	lsls	r3, r3, #6
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d100      	bne.n	80105bc <PCD_EP_ISR_Handler+0x240>
 80105ba:	e2d1      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	61bb      	str	r3, [r7, #24]
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	2250      	movs	r2, #80	@ 0x50
 80105c8:	5a9b      	ldrh	r3, [r3, r2]
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	001a      	movs	r2, r3
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	189b      	adds	r3, r3, r2
 80105d2:	61bb      	str	r3, [r7, #24]
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	4a3a      	ldr	r2, [pc, #232]	@ (80106c0 <PCD_EP_ISR_Handler+0x344>)
 80105d8:	4694      	mov	ip, r2
 80105da:	4463      	add	r3, ip
 80105dc:	617b      	str	r3, [r7, #20]
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	059b      	lsls	r3, r3, #22
 80105e6:	0d9b      	lsrs	r3, r3, #22
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	801a      	strh	r2, [r3, #0]
 80105ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80105f4:	d91a      	bls.n	801062c <PCD_EP_ISR_Handler+0x2b0>
 80105f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	095b      	lsrs	r3, r3, #5
 80105fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80105fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010600:	691b      	ldr	r3, [r3, #16]
 8010602:	221f      	movs	r2, #31
 8010604:	4013      	ands	r3, r2
 8010606:	d102      	bne.n	801060e <PCD_EP_ISR_Handler+0x292>
 8010608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801060a:	3b01      	subs	r3, #1
 801060c:	647b      	str	r3, [r7, #68]	@ 0x44
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	881b      	ldrh	r3, [r3, #0]
 8010612:	b29a      	uxth	r2, r3
 8010614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010616:	b29b      	uxth	r3, r3
 8010618:	029b      	lsls	r3, r3, #10
 801061a:	b29b      	uxth	r3, r3
 801061c:	4313      	orrs	r3, r2
 801061e:	b29b      	uxth	r3, r3
 8010620:	4a25      	ldr	r2, [pc, #148]	@ (80106b8 <PCD_EP_ISR_Handler+0x33c>)
 8010622:	4313      	orrs	r3, r2
 8010624:	b29a      	uxth	r2, r3
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	801a      	strh	r2, [r3, #0]
 801062a:	e023      	b.n	8010674 <PCD_EP_ISR_Handler+0x2f8>
 801062c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d108      	bne.n	8010646 <PCD_EP_ISR_Handler+0x2ca>
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	881b      	ldrh	r3, [r3, #0]
 8010638:	b29b      	uxth	r3, r3
 801063a:	4a1f      	ldr	r2, [pc, #124]	@ (80106b8 <PCD_EP_ISR_Handler+0x33c>)
 801063c:	4313      	orrs	r3, r2
 801063e:	b29a      	uxth	r2, r3
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	801a      	strh	r2, [r3, #0]
 8010644:	e016      	b.n	8010674 <PCD_EP_ISR_Handler+0x2f8>
 8010646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	085b      	lsrs	r3, r3, #1
 801064c:	647b      	str	r3, [r7, #68]	@ 0x44
 801064e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010650:	691b      	ldr	r3, [r3, #16]
 8010652:	2201      	movs	r2, #1
 8010654:	4013      	ands	r3, r2
 8010656:	d002      	beq.n	801065e <PCD_EP_ISR_Handler+0x2e2>
 8010658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801065a:	3301      	adds	r3, #1
 801065c:	647b      	str	r3, [r7, #68]	@ 0x44
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	881b      	ldrh	r3, [r3, #0]
 8010662:	b29a      	uxth	r2, r3
 8010664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010666:	b29b      	uxth	r3, r3
 8010668:	029b      	lsls	r3, r3, #10
 801066a:	b29b      	uxth	r3, r3
 801066c:	4313      	orrs	r3, r2
 801066e:	b29a      	uxth	r2, r3
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	881b      	ldrh	r3, [r3, #0]
 801067a:	b29a      	uxth	r2, r3
 801067c:	2012      	movs	r0, #18
 801067e:	183b      	adds	r3, r7, r0
 8010680:	4911      	ldr	r1, [pc, #68]	@ (80106c8 <PCD_EP_ISR_Handler+0x34c>)
 8010682:	400a      	ands	r2, r1
 8010684:	801a      	strh	r2, [r3, #0]
 8010686:	183b      	adds	r3, r7, r0
 8010688:	183a      	adds	r2, r7, r0
 801068a:	8812      	ldrh	r2, [r2, #0]
 801068c:	2180      	movs	r1, #128	@ 0x80
 801068e:	0149      	lsls	r1, r1, #5
 8010690:	404a      	eors	r2, r1
 8010692:	801a      	strh	r2, [r3, #0]
 8010694:	183b      	adds	r3, r7, r0
 8010696:	183a      	adds	r2, r7, r0
 8010698:	8812      	ldrh	r2, [r2, #0]
 801069a:	2180      	movs	r1, #128	@ 0x80
 801069c:	0189      	lsls	r1, r1, #6
 801069e:	404a      	eors	r2, r1
 80106a0:	801a      	strh	r2, [r3, #0]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	183a      	adds	r2, r7, r0
 80106a8:	8812      	ldrh	r2, [r2, #0]
 80106aa:	4908      	ldr	r1, [pc, #32]	@ (80106cc <PCD_EP_ISR_Handler+0x350>)
 80106ac:	430a      	orrs	r2, r1
 80106ae:	b292      	uxth	r2, r2
 80106b0:	801a      	strh	r2, [r3, #0]
 80106b2:	e255      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
 80106b4:	ffff8f0f 	.word	0xffff8f0f
 80106b8:	ffff8000 	.word	0xffff8000
 80106bc:	00000402 	.word	0x00000402
 80106c0:	00000406 	.word	0x00000406
 80106c4:	00000f8f 	.word	0x00000f8f
 80106c8:	ffffbf8f 	.word	0xffffbf8f
 80106cc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	001a      	movs	r2, r3
 80106d6:	204d      	movs	r0, #77	@ 0x4d
 80106d8:	183b      	adds	r3, r7, r0
 80106da:	781b      	ldrb	r3, [r3, #0]
 80106dc:	009b      	lsls	r3, r3, #2
 80106de:	18d2      	adds	r2, r2, r3
 80106e0:	214a      	movs	r1, #74	@ 0x4a
 80106e2:	187b      	adds	r3, r7, r1
 80106e4:	8812      	ldrh	r2, [r2, #0]
 80106e6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80106e8:	187b      	adds	r3, r7, r1
 80106ea:	2200      	movs	r2, #0
 80106ec:	5e9b      	ldrsh	r3, [r3, r2]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	db00      	blt.n	80106f4 <PCD_EP_ISR_Handler+0x378>
 80106f2:	e0fa      	b.n	80108ea <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	001a      	movs	r2, r3
 80106fa:	183b      	adds	r3, r7, r0
 80106fc:	781b      	ldrb	r3, [r3, #0]
 80106fe:	009b      	lsls	r3, r3, #2
 8010700:	18d3      	adds	r3, r2, r3
 8010702:	881b      	ldrh	r3, [r3, #0]
 8010704:	b29a      	uxth	r2, r3
 8010706:	2448      	movs	r4, #72	@ 0x48
 8010708:	193b      	adds	r3, r7, r4
 801070a:	49d1      	ldr	r1, [pc, #836]	@ (8010a50 <PCD_EP_ISR_Handler+0x6d4>)
 801070c:	400a      	ands	r2, r1
 801070e:	801a      	strh	r2, [r3, #0]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	001a      	movs	r2, r3
 8010716:	183b      	adds	r3, r7, r0
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	18d3      	adds	r3, r2, r3
 801071e:	193a      	adds	r2, r7, r4
 8010720:	8812      	ldrh	r2, [r2, #0]
 8010722:	2180      	movs	r1, #128	@ 0x80
 8010724:	430a      	orrs	r2, r1
 8010726:	b292      	uxth	r2, r2
 8010728:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 801072a:	183b      	adds	r3, r7, r0
 801072c:	781a      	ldrb	r2, [r3, #0]
 801072e:	0013      	movs	r3, r2
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	189b      	adds	r3, r3, r2
 8010734:	00db      	lsls	r3, r3, #3
 8010736:	3369      	adds	r3, #105	@ 0x69
 8010738:	33ff      	adds	r3, #255	@ 0xff
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	18d3      	adds	r3, r2, r3
 801073e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8010740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010742:	7b1b      	ldrb	r3, [r3, #12]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d125      	bne.n	8010794 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2250      	movs	r2, #80	@ 0x50
 801074e:	5a9b      	ldrh	r3, [r3, r2]
 8010750:	b29b      	uxth	r3, r3
 8010752:	001a      	movs	r2, r3
 8010754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	00db      	lsls	r3, r3, #3
 801075a:	18d2      	adds	r2, r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	18d3      	adds	r3, r2, r3
 8010762:	4abc      	ldr	r2, [pc, #752]	@ (8010a54 <PCD_EP_ISR_Handler+0x6d8>)
 8010764:	4694      	mov	ip, r2
 8010766:	4463      	add	r3, ip
 8010768:	881a      	ldrh	r2, [r3, #0]
 801076a:	2450      	movs	r4, #80	@ 0x50
 801076c:	193b      	adds	r3, r7, r4
 801076e:	0592      	lsls	r2, r2, #22
 8010770:	0d92      	lsrs	r2, r2, #22
 8010772:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8010774:	193b      	adds	r3, r7, r4
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d100      	bne.n	801077e <PCD_EP_ISR_Handler+0x402>
 801077c:	e08d      	b.n	801089a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6818      	ldr	r0, [r3, #0]
 8010782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010784:	6959      	ldr	r1, [r3, #20]
 8010786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010788:	88da      	ldrh	r2, [r3, #6]
 801078a:	193b      	adds	r3, r7, r4
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	f006 ff60 	bl	8017652 <USB_ReadPMA>
 8010792:	e082      	b.n	801089a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8010794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010796:	78db      	ldrb	r3, [r3, #3]
 8010798:	2b02      	cmp	r3, #2
 801079a:	d10c      	bne.n	80107b6 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801079c:	2350      	movs	r3, #80	@ 0x50
 801079e:	18fc      	adds	r4, r7, r3
 80107a0:	234a      	movs	r3, #74	@ 0x4a
 80107a2:	18fb      	adds	r3, r7, r3
 80107a4:	881a      	ldrh	r2, [r3, #0]
 80107a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	0018      	movs	r0, r3
 80107ac:	f000 f9ec 	bl	8010b88 <HAL_PCD_EP_DB_Receive>
 80107b0:	0003      	movs	r3, r0
 80107b2:	8023      	strh	r3, [r4, #0]
 80107b4:	e071      	b.n	801089a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	001a      	movs	r2, r3
 80107bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	18d3      	adds	r3, r2, r3
 80107c4:	881b      	ldrh	r3, [r3, #0]
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	2052      	movs	r0, #82	@ 0x52
 80107ca:	183b      	adds	r3, r7, r0
 80107cc:	49a2      	ldr	r1, [pc, #648]	@ (8010a58 <PCD_EP_ISR_Handler+0x6dc>)
 80107ce:	400a      	ands	r2, r1
 80107d0:	801a      	strh	r2, [r3, #0]
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	001a      	movs	r2, r3
 80107d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	009b      	lsls	r3, r3, #2
 80107de:	18d3      	adds	r3, r2, r3
 80107e0:	183a      	adds	r2, r7, r0
 80107e2:	8812      	ldrh	r2, [r2, #0]
 80107e4:	499d      	ldr	r1, [pc, #628]	@ (8010a5c <PCD_EP_ISR_Handler+0x6e0>)
 80107e6:	430a      	orrs	r2, r1
 80107e8:	b292      	uxth	r2, r2
 80107ea:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	001a      	movs	r2, r3
 80107f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107f4:	781b      	ldrb	r3, [r3, #0]
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	18d3      	adds	r3, r2, r3
 80107fa:	881b      	ldrh	r3, [r3, #0]
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	001a      	movs	r2, r3
 8010800:	2380      	movs	r3, #128	@ 0x80
 8010802:	01db      	lsls	r3, r3, #7
 8010804:	4013      	ands	r3, r2
 8010806:	d024      	beq.n	8010852 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	2250      	movs	r2, #80	@ 0x50
 801080e:	5a9b      	ldrh	r3, [r3, r2]
 8010810:	b29b      	uxth	r3, r3
 8010812:	001a      	movs	r2, r3
 8010814:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	00db      	lsls	r3, r3, #3
 801081a:	18d2      	adds	r2, r2, r3
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	18d3      	adds	r3, r2, r3
 8010822:	4a8f      	ldr	r2, [pc, #572]	@ (8010a60 <PCD_EP_ISR_Handler+0x6e4>)
 8010824:	4694      	mov	ip, r2
 8010826:	4463      	add	r3, ip
 8010828:	881a      	ldrh	r2, [r3, #0]
 801082a:	2450      	movs	r4, #80	@ 0x50
 801082c:	193b      	adds	r3, r7, r4
 801082e:	0592      	lsls	r2, r2, #22
 8010830:	0d92      	lsrs	r2, r2, #22
 8010832:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8010834:	193b      	adds	r3, r7, r4
 8010836:	881b      	ldrh	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d02e      	beq.n	801089a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6818      	ldr	r0, [r3, #0]
 8010840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010842:	6959      	ldr	r1, [r3, #20]
 8010844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010846:	891a      	ldrh	r2, [r3, #8]
 8010848:	193b      	adds	r3, r7, r4
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	f006 ff01 	bl	8017652 <USB_ReadPMA>
 8010850:	e023      	b.n	801089a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2250      	movs	r2, #80	@ 0x50
 8010858:	5a9b      	ldrh	r3, [r3, r2]
 801085a:	b29b      	uxth	r3, r3
 801085c:	001a      	movs	r2, r3
 801085e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	00db      	lsls	r3, r3, #3
 8010864:	18d2      	adds	r2, r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	18d3      	adds	r3, r2, r3
 801086c:	4a79      	ldr	r2, [pc, #484]	@ (8010a54 <PCD_EP_ISR_Handler+0x6d8>)
 801086e:	4694      	mov	ip, r2
 8010870:	4463      	add	r3, ip
 8010872:	881a      	ldrh	r2, [r3, #0]
 8010874:	2450      	movs	r4, #80	@ 0x50
 8010876:	193b      	adds	r3, r7, r4
 8010878:	0592      	lsls	r2, r2, #22
 801087a:	0d92      	lsrs	r2, r2, #22
 801087c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801087e:	193b      	adds	r3, r7, r4
 8010880:	881b      	ldrh	r3, [r3, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d009      	beq.n	801089a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6818      	ldr	r0, [r3, #0]
 801088a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801088c:	6959      	ldr	r1, [r3, #20]
 801088e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010890:	895a      	ldrh	r2, [r3, #10]
 8010892:	193b      	adds	r3, r7, r4
 8010894:	881b      	ldrh	r3, [r3, #0]
 8010896:	f006 fedc 	bl	8017652 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801089a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801089c:	69da      	ldr	r2, [r3, #28]
 801089e:	2150      	movs	r1, #80	@ 0x50
 80108a0:	187b      	adds	r3, r7, r1
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	18d2      	adds	r2, r2, r3
 80108a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80108aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108ac:	695a      	ldr	r2, [r3, #20]
 80108ae:	187b      	adds	r3, r7, r1
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	18d2      	adds	r2, r2, r3
 80108b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80108b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108ba:	699b      	ldr	r3, [r3, #24]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d005      	beq.n	80108cc <PCD_EP_ISR_Handler+0x550>
 80108c0:	187b      	adds	r3, r7, r1
 80108c2:	881a      	ldrh	r2, [r3, #0]
 80108c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108c6:	691b      	ldr	r3, [r3, #16]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d207      	bcs.n	80108dc <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80108cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108ce:	781a      	ldrb	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	0011      	movs	r1, r2
 80108d4:	0018      	movs	r0, r3
 80108d6:	f008 fed6 	bl	8019686 <HAL_PCD_DataOutStageCallback>
 80108da:	e006      	b.n	80108ea <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80108e2:	0011      	movs	r1, r2
 80108e4:	0018      	movs	r0, r3
 80108e6:	f005 fbf9 	bl	80160dc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80108ea:	244a      	movs	r4, #74	@ 0x4a
 80108ec:	193b      	adds	r3, r7, r4
 80108ee:	881b      	ldrh	r3, [r3, #0]
 80108f0:	2280      	movs	r2, #128	@ 0x80
 80108f2:	4013      	ands	r3, r2
 80108f4:	d100      	bne.n	80108f8 <PCD_EP_ISR_Handler+0x57c>
 80108f6:	e133      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80108f8:	204d      	movs	r0, #77	@ 0x4d
 80108fa:	183b      	adds	r3, r7, r0
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	1c5a      	adds	r2, r3, #1
 8010900:	0013      	movs	r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	189b      	adds	r3, r3, r2
 8010906:	00db      	lsls	r3, r3, #3
 8010908:	687a      	ldr	r2, [r7, #4]
 801090a:	18d3      	adds	r3, r2, r3
 801090c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	001a      	movs	r2, r3
 8010914:	183b      	adds	r3, r7, r0
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	009b      	lsls	r3, r3, #2
 801091a:	18d3      	adds	r3, r2, r3
 801091c:	881b      	ldrh	r3, [r3, #0]
 801091e:	b29a      	uxth	r2, r3
 8010920:	2542      	movs	r5, #66	@ 0x42
 8010922:	197b      	adds	r3, r7, r5
 8010924:	494f      	ldr	r1, [pc, #316]	@ (8010a64 <PCD_EP_ISR_Handler+0x6e8>)
 8010926:	400a      	ands	r2, r1
 8010928:	801a      	strh	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	001a      	movs	r2, r3
 8010930:	183b      	adds	r3, r7, r0
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	18d3      	adds	r3, r2, r3
 8010938:	197a      	adds	r2, r7, r5
 801093a:	8812      	ldrh	r2, [r2, #0]
 801093c:	494a      	ldr	r1, [pc, #296]	@ (8010a68 <PCD_EP_ISR_Handler+0x6ec>)
 801093e:	430a      	orrs	r2, r1
 8010940:	b292      	uxth	r2, r2
 8010942:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8010944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010946:	78db      	ldrb	r3, [r3, #3]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d000      	beq.n	801094e <PCD_EP_ISR_Handler+0x5d2>
 801094c:	e0af      	b.n	8010aae <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801094e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010950:	2200      	movs	r2, #0
 8010952:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8010954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010956:	7b1b      	ldrb	r3, [r3, #12]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d100      	bne.n	801095e <PCD_EP_ISR_Handler+0x5e2>
 801095c:	e09f      	b.n	8010a9e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801095e:	193b      	adds	r3, r7, r4
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	2240      	movs	r2, #64	@ 0x40
 8010964:	4013      	ands	r3, r2
 8010966:	d046      	beq.n	80109f6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801096a:	785b      	ldrb	r3, [r3, #1]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d125      	bne.n	80109bc <PCD_EP_ISR_Handler+0x640>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	627b      	str	r3, [r7, #36]	@ 0x24
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2250      	movs	r2, #80	@ 0x50
 801097c:	5a9b      	ldrh	r3, [r3, r2]
 801097e:	b29b      	uxth	r3, r3
 8010980:	001a      	movs	r2, r3
 8010982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010984:	189b      	adds	r3, r3, r2
 8010986:	627b      	str	r3, [r7, #36]	@ 0x24
 8010988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	00da      	lsls	r2, r3, #3
 801098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010990:	18d3      	adds	r3, r2, r3
 8010992:	4a33      	ldr	r2, [pc, #204]	@ (8010a60 <PCD_EP_ISR_Handler+0x6e4>)
 8010994:	4694      	mov	ip, r2
 8010996:	4463      	add	r3, ip
 8010998:	623b      	str	r3, [r7, #32]
 801099a:	6a3b      	ldr	r3, [r7, #32]
 801099c:	881b      	ldrh	r3, [r3, #0]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	059b      	lsls	r3, r3, #22
 80109a2:	0d9b      	lsrs	r3, r3, #22
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	801a      	strh	r2, [r3, #0]
 80109aa:	6a3b      	ldr	r3, [r7, #32]
 80109ac:	881b      	ldrh	r3, [r3, #0]
 80109ae:	b29b      	uxth	r3, r3
 80109b0:	4a2d      	ldr	r2, [pc, #180]	@ (8010a68 <PCD_EP_ISR_Handler+0x6ec>)
 80109b2:	4313      	orrs	r3, r2
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	6a3b      	ldr	r3, [r7, #32]
 80109b8:	801a      	strh	r2, [r3, #0]
 80109ba:	e070      	b.n	8010a9e <PCD_EP_ISR_Handler+0x722>
 80109bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109be:	785b      	ldrb	r3, [r3, #1]
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d16c      	bne.n	8010a9e <PCD_EP_ISR_Handler+0x722>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	2250      	movs	r2, #80	@ 0x50
 80109d0:	5a9b      	ldrh	r3, [r3, r2]
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	001a      	movs	r2, r3
 80109d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d8:	189b      	adds	r3, r3, r2
 80109da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80109dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	00da      	lsls	r2, r3, #3
 80109e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e4:	18d3      	adds	r3, r2, r3
 80109e6:	4a1e      	ldr	r2, [pc, #120]	@ (8010a60 <PCD_EP_ISR_Handler+0x6e4>)
 80109e8:	4694      	mov	ip, r2
 80109ea:	4463      	add	r3, ip
 80109ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80109ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109f0:	2200      	movs	r2, #0
 80109f2:	801a      	strh	r2, [r3, #0]
 80109f4:	e053      	b.n	8010a9e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80109fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109fe:	785b      	ldrb	r3, [r3, #1]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d133      	bne.n	8010a6c <PCD_EP_ISR_Handler+0x6f0>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	2250      	movs	r2, #80	@ 0x50
 8010a10:	5a9b      	ldrh	r3, [r3, r2]
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	001a      	movs	r2, r3
 8010a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a18:	189b      	adds	r3, r3, r2
 8010a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a1e:	781b      	ldrb	r3, [r3, #0]
 8010a20:	00da      	lsls	r2, r3, #3
 8010a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a24:	18d3      	adds	r3, r2, r3
 8010a26:	4a0b      	ldr	r2, [pc, #44]	@ (8010a54 <PCD_EP_ISR_Handler+0x6d8>)
 8010a28:	4694      	mov	ip, r2
 8010a2a:	4463      	add	r3, ip
 8010a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8010a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a30:	881b      	ldrh	r3, [r3, #0]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	059b      	lsls	r3, r3, #22
 8010a36:	0d9b      	lsrs	r3, r3, #22
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a3c:	801a      	strh	r2, [r3, #0]
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a40:	881b      	ldrh	r3, [r3, #0]
 8010a42:	b29b      	uxth	r3, r3
 8010a44:	4a08      	ldr	r2, [pc, #32]	@ (8010a68 <PCD_EP_ISR_Handler+0x6ec>)
 8010a46:	4313      	orrs	r3, r2
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a4c:	801a      	strh	r2, [r3, #0]
 8010a4e:	e026      	b.n	8010a9e <PCD_EP_ISR_Handler+0x722>
 8010a50:	00000f8f 	.word	0x00000f8f
 8010a54:	00000406 	.word	0x00000406
 8010a58:	ffff8f8f 	.word	0xffff8f8f
 8010a5c:	ffff80c0 	.word	0xffff80c0
 8010a60:	00000402 	.word	0x00000402
 8010a64:	ffff8f0f 	.word	0xffff8f0f
 8010a68:	ffff8000 	.word	0xffff8000
 8010a6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a6e:	785b      	ldrb	r3, [r3, #1]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d114      	bne.n	8010a9e <PCD_EP_ISR_Handler+0x722>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2250      	movs	r2, #80	@ 0x50
 8010a7a:	5a9b      	ldrh	r3, [r3, r2]
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	001a      	movs	r2, r3
 8010a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a82:	189b      	adds	r3, r3, r2
 8010a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	00da      	lsls	r2, r3, #3
 8010a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a8e:	18d3      	adds	r3, r2, r3
 8010a90:	4a3b      	ldr	r2, [pc, #236]	@ (8010b80 <PCD_EP_ISR_Handler+0x804>)
 8010a92:	4694      	mov	ip, r2
 8010a94:	4463      	add	r3, ip
 8010a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010aa0:	781a      	ldrb	r2, [r3, #0]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	0011      	movs	r1, r2
 8010aa6:	0018      	movs	r0, r3
 8010aa8:	f008 fe0e 	bl	80196c8 <HAL_PCD_DataInStageCallback>
 8010aac:	e058      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8010aae:	234a      	movs	r3, #74	@ 0x4a
 8010ab0:	18fb      	adds	r3, r7, r3
 8010ab2:	881a      	ldrh	r2, [r3, #0]
 8010ab4:	2380      	movs	r3, #128	@ 0x80
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	4013      	ands	r3, r2
 8010aba:	d149      	bne.n	8010b50 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2250      	movs	r2, #80	@ 0x50
 8010ac2:	5a9b      	ldrh	r3, [r3, r2]
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	001a      	movs	r2, r3
 8010ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	00db      	lsls	r3, r3, #3
 8010ace:	18d2      	adds	r2, r2, r3
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	18d3      	adds	r3, r2, r3
 8010ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8010b84 <PCD_EP_ISR_Handler+0x808>)
 8010ad8:	4694      	mov	ip, r2
 8010ada:	4463      	add	r3, ip
 8010adc:	881a      	ldrh	r2, [r3, #0]
 8010ade:	2140      	movs	r1, #64	@ 0x40
 8010ae0:	187b      	adds	r3, r7, r1
 8010ae2:	0592      	lsls	r2, r2, #22
 8010ae4:	0d92      	lsrs	r2, r2, #22
 8010ae6:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8010ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010aea:	699a      	ldr	r2, [r3, #24]
 8010aec:	187b      	adds	r3, r7, r1
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d907      	bls.n	8010b04 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8010af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010af6:	699a      	ldr	r2, [r3, #24]
 8010af8:	187b      	adds	r3, r7, r1
 8010afa:	881b      	ldrh	r3, [r3, #0]
 8010afc:	1ad2      	subs	r2, r2, r3
 8010afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b00:	619a      	str	r2, [r3, #24]
 8010b02:	e002      	b.n	8010b0a <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8010b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b06:	2200      	movs	r2, #0
 8010b08:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8010b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b0c:	699b      	ldr	r3, [r3, #24]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d107      	bne.n	8010b22 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b14:	781a      	ldrb	r2, [r3, #0]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	0011      	movs	r1, r2
 8010b1a:	0018      	movs	r0, r3
 8010b1c:	f008 fdd4 	bl	80196c8 <HAL_PCD_DataInStageCallback>
 8010b20:	e01e      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8010b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b24:	695a      	ldr	r2, [r3, #20]
 8010b26:	2140      	movs	r1, #64	@ 0x40
 8010b28:	187b      	adds	r3, r7, r1
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	18d2      	adds	r2, r2, r3
 8010b2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b30:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8010b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b34:	69da      	ldr	r2, [r3, #28]
 8010b36:	187b      	adds	r3, r7, r1
 8010b38:	881b      	ldrh	r3, [r3, #0]
 8010b3a:	18d2      	adds	r2, r2, r3
 8010b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b3e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010b46:	0011      	movs	r1, r2
 8010b48:	0018      	movs	r0, r3
 8010b4a:	f005 fac7 	bl	80160dc <USB_EPStartXfer>
 8010b4e:	e007      	b.n	8010b60 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8010b50:	234a      	movs	r3, #74	@ 0x4a
 8010b52:	18fb      	adds	r3, r7, r3
 8010b54:	881a      	ldrh	r2, [r3, #0]
 8010b56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	0018      	movs	r0, r3
 8010b5c:	f000 f930 	bl	8010dc0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2244      	movs	r2, #68	@ 0x44
 8010b66:	5a9b      	ldrh	r3, [r3, r2]
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	b21b      	sxth	r3, r3
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	da01      	bge.n	8010b74 <PCD_EP_ISR_Handler+0x7f8>
 8010b70:	f7ff fc0a 	bl	8010388 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	0018      	movs	r0, r3
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	b016      	add	sp, #88	@ 0x58
 8010b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8010b7e:	46c0      	nop			@ (mov r8, r8)
 8010b80:	00000406 	.word	0x00000406
 8010b84:	00000402 	.word	0x00000402

08010b88 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010b88:	b590      	push	{r4, r7, lr}
 8010b8a:	b089      	sub	sp, #36	@ 0x24
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	60b9      	str	r1, [r7, #8]
 8010b92:	1dbb      	adds	r3, r7, #6
 8010b94:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010b96:	1dbb      	adds	r3, r7, #6
 8010b98:	881a      	ldrh	r2, [r3, #0]
 8010b9a:	2380      	movs	r3, #128	@ 0x80
 8010b9c:	01db      	lsls	r3, r3, #7
 8010b9e:	4013      	ands	r3, r2
 8010ba0:	d100      	bne.n	8010ba4 <HAL_PCD_EP_DB_Receive+0x1c>
 8010ba2:	e07d      	b.n	8010ca0 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2250      	movs	r2, #80	@ 0x50
 8010baa:	5a9b      	ldrh	r3, [r3, r2]
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	001a      	movs	r2, r3
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	00db      	lsls	r3, r3, #3
 8010bb6:	18d2      	adds	r2, r2, r3
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	18d3      	adds	r3, r2, r3
 8010bbe:	4a7a      	ldr	r2, [pc, #488]	@ (8010da8 <HAL_PCD_EP_DB_Receive+0x220>)
 8010bc0:	4694      	mov	ip, r2
 8010bc2:	4463      	add	r3, ip
 8010bc4:	881a      	ldrh	r2, [r3, #0]
 8010bc6:	211a      	movs	r1, #26
 8010bc8:	187b      	adds	r3, r7, r1
 8010bca:	0592      	lsls	r2, r2, #22
 8010bcc:	0d92      	lsrs	r2, r2, #22
 8010bce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	699a      	ldr	r2, [r3, #24]
 8010bd4:	187b      	adds	r3, r7, r1
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d307      	bcc.n	8010bec <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	699a      	ldr	r2, [r3, #24]
 8010be0:	187b      	adds	r3, r7, r1
 8010be2:	881b      	ldrh	r3, [r3, #0]
 8010be4:	1ad2      	subs	r2, r2, r3
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	619a      	str	r2, [r3, #24]
 8010bea:	e002      	b.n	8010bf2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	699b      	ldr	r3, [r3, #24]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d121      	bne.n	8010c3e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	001a      	movs	r2, r3
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	18d3      	adds	r3, r2, r3
 8010c08:	881b      	ldrh	r3, [r3, #0]
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	2018      	movs	r0, #24
 8010c0e:	183b      	adds	r3, r7, r0
 8010c10:	4966      	ldr	r1, [pc, #408]	@ (8010dac <HAL_PCD_EP_DB_Receive+0x224>)
 8010c12:	400a      	ands	r2, r1
 8010c14:	801a      	strh	r2, [r3, #0]
 8010c16:	183b      	adds	r3, r7, r0
 8010c18:	183a      	adds	r2, r7, r0
 8010c1a:	8812      	ldrh	r2, [r2, #0]
 8010c1c:	2180      	movs	r1, #128	@ 0x80
 8010c1e:	0189      	lsls	r1, r1, #6
 8010c20:	404a      	eors	r2, r1
 8010c22:	801a      	strh	r2, [r3, #0]
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	001a      	movs	r2, r3
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	781b      	ldrb	r3, [r3, #0]
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	18d3      	adds	r3, r2, r3
 8010c32:	183a      	adds	r2, r7, r0
 8010c34:	8812      	ldrh	r2, [r2, #0]
 8010c36:	495e      	ldr	r1, [pc, #376]	@ (8010db0 <HAL_PCD_EP_DB_Receive+0x228>)
 8010c38:	430a      	orrs	r2, r1
 8010c3a:	b292      	uxth	r2, r2
 8010c3c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010c3e:	1dbb      	adds	r3, r7, #6
 8010c40:	881b      	ldrh	r3, [r3, #0]
 8010c42:	2240      	movs	r2, #64	@ 0x40
 8010c44:	4013      	ands	r3, r2
 8010c46:	d01a      	beq.n	8010c7e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	001a      	movs	r2, r3
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	18d3      	adds	r3, r2, r3
 8010c56:	881b      	ldrh	r3, [r3, #0]
 8010c58:	b29a      	uxth	r2, r3
 8010c5a:	2016      	movs	r0, #22
 8010c5c:	183b      	adds	r3, r7, r0
 8010c5e:	4955      	ldr	r1, [pc, #340]	@ (8010db4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010c60:	400a      	ands	r2, r1
 8010c62:	801a      	strh	r2, [r3, #0]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	001a      	movs	r2, r3
 8010c6a:	68bb      	ldr	r3, [r7, #8]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	009b      	lsls	r3, r3, #2
 8010c70:	18d3      	adds	r3, r2, r3
 8010c72:	183a      	adds	r2, r7, r0
 8010c74:	8812      	ldrh	r2, [r2, #0]
 8010c76:	4950      	ldr	r1, [pc, #320]	@ (8010db8 <HAL_PCD_EP_DB_Receive+0x230>)
 8010c78:	430a      	orrs	r2, r1
 8010c7a:	b292      	uxth	r2, r2
 8010c7c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010c7e:	241a      	movs	r4, #26
 8010c80:	193b      	adds	r3, r7, r4
 8010c82:	881b      	ldrh	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d100      	bne.n	8010c8a <HAL_PCD_EP_DB_Receive+0x102>
 8010c88:	e086      	b.n	8010d98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	6818      	ldr	r0, [r3, #0]
 8010c8e:	68bb      	ldr	r3, [r7, #8]
 8010c90:	6959      	ldr	r1, [r3, #20]
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	891a      	ldrh	r2, [r3, #8]
 8010c96:	193b      	adds	r3, r7, r4
 8010c98:	881b      	ldrh	r3, [r3, #0]
 8010c9a:	f006 fcda 	bl	8017652 <USB_ReadPMA>
 8010c9e:	e07b      	b.n	8010d98 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2250      	movs	r2, #80	@ 0x50
 8010ca6:	5a9b      	ldrh	r3, [r3, r2]
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	001a      	movs	r2, r3
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	00db      	lsls	r3, r3, #3
 8010cb2:	18d2      	adds	r2, r2, r3
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	18d3      	adds	r3, r2, r3
 8010cba:	4a40      	ldr	r2, [pc, #256]	@ (8010dbc <HAL_PCD_EP_DB_Receive+0x234>)
 8010cbc:	4694      	mov	ip, r2
 8010cbe:	4463      	add	r3, ip
 8010cc0:	881a      	ldrh	r2, [r3, #0]
 8010cc2:	211a      	movs	r1, #26
 8010cc4:	187b      	adds	r3, r7, r1
 8010cc6:	0592      	lsls	r2, r2, #22
 8010cc8:	0d92      	lsrs	r2, r2, #22
 8010cca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	699a      	ldr	r2, [r3, #24]
 8010cd0:	187b      	adds	r3, r7, r1
 8010cd2:	881b      	ldrh	r3, [r3, #0]
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d307      	bcc.n	8010ce8 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	699a      	ldr	r2, [r3, #24]
 8010cdc:	187b      	adds	r3, r7, r1
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	1ad2      	subs	r2, r2, r3
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	619a      	str	r2, [r3, #24]
 8010ce6:	e002      	b.n	8010cee <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	2200      	movs	r2, #0
 8010cec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	699b      	ldr	r3, [r3, #24]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d121      	bne.n	8010d3a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	001a      	movs	r2, r3
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	009b      	lsls	r3, r3, #2
 8010d02:	18d3      	adds	r3, r2, r3
 8010d04:	881b      	ldrh	r3, [r3, #0]
 8010d06:	b29a      	uxth	r2, r3
 8010d08:	201e      	movs	r0, #30
 8010d0a:	183b      	adds	r3, r7, r0
 8010d0c:	4927      	ldr	r1, [pc, #156]	@ (8010dac <HAL_PCD_EP_DB_Receive+0x224>)
 8010d0e:	400a      	ands	r2, r1
 8010d10:	801a      	strh	r2, [r3, #0]
 8010d12:	183b      	adds	r3, r7, r0
 8010d14:	183a      	adds	r2, r7, r0
 8010d16:	8812      	ldrh	r2, [r2, #0]
 8010d18:	2180      	movs	r1, #128	@ 0x80
 8010d1a:	0189      	lsls	r1, r1, #6
 8010d1c:	404a      	eors	r2, r1
 8010d1e:	801a      	strh	r2, [r3, #0]
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	001a      	movs	r2, r3
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	781b      	ldrb	r3, [r3, #0]
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	18d3      	adds	r3, r2, r3
 8010d2e:	183a      	adds	r2, r7, r0
 8010d30:	8812      	ldrh	r2, [r2, #0]
 8010d32:	491f      	ldr	r1, [pc, #124]	@ (8010db0 <HAL_PCD_EP_DB_Receive+0x228>)
 8010d34:	430a      	orrs	r2, r1
 8010d36:	b292      	uxth	r2, r2
 8010d38:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8010d3a:	1dbb      	adds	r3, r7, #6
 8010d3c:	881b      	ldrh	r3, [r3, #0]
 8010d3e:	2240      	movs	r2, #64	@ 0x40
 8010d40:	4013      	ands	r3, r2
 8010d42:	d11a      	bne.n	8010d7a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	001a      	movs	r2, r3
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	18d3      	adds	r3, r2, r3
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	b29a      	uxth	r2, r3
 8010d56:	201c      	movs	r0, #28
 8010d58:	183b      	adds	r3, r7, r0
 8010d5a:	4916      	ldr	r1, [pc, #88]	@ (8010db4 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010d5c:	400a      	ands	r2, r1
 8010d5e:	801a      	strh	r2, [r3, #0]
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	001a      	movs	r2, r3
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	18d3      	adds	r3, r2, r3
 8010d6e:	183a      	adds	r2, r7, r0
 8010d70:	8812      	ldrh	r2, [r2, #0]
 8010d72:	4911      	ldr	r1, [pc, #68]	@ (8010db8 <HAL_PCD_EP_DB_Receive+0x230>)
 8010d74:	430a      	orrs	r2, r1
 8010d76:	b292      	uxth	r2, r2
 8010d78:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010d7a:	241a      	movs	r4, #26
 8010d7c:	193b      	adds	r3, r7, r4
 8010d7e:	881b      	ldrh	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d009      	beq.n	8010d98 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	6818      	ldr	r0, [r3, #0]
 8010d88:	68bb      	ldr	r3, [r7, #8]
 8010d8a:	6959      	ldr	r1, [r3, #20]
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	895a      	ldrh	r2, [r3, #10]
 8010d90:	193b      	adds	r3, r7, r4
 8010d92:	881b      	ldrh	r3, [r3, #0]
 8010d94:	f006 fc5d 	bl	8017652 <USB_ReadPMA>
    }
  }

  return count;
 8010d98:	231a      	movs	r3, #26
 8010d9a:	18fb      	adds	r3, r7, r3
 8010d9c:	881b      	ldrh	r3, [r3, #0]
}
 8010d9e:	0018      	movs	r0, r3
 8010da0:	46bd      	mov	sp, r7
 8010da2:	b009      	add	sp, #36	@ 0x24
 8010da4:	bd90      	pop	{r4, r7, pc}
 8010da6:	46c0      	nop			@ (mov r8, r8)
 8010da8:	00000402 	.word	0x00000402
 8010dac:	ffffbf8f 	.word	0xffffbf8f
 8010db0:	ffff8080 	.word	0xffff8080
 8010db4:	ffff8f8f 	.word	0xffff8f8f
 8010db8:	ffff80c0 	.word	0xffff80c0
 8010dbc:	00000406 	.word	0x00000406

08010dc0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b0a4      	sub	sp, #144	@ 0x90
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	1dbb      	adds	r3, r7, #6
 8010dcc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010dce:	1dbb      	adds	r3, r7, #6
 8010dd0:	881b      	ldrh	r3, [r3, #0]
 8010dd2:	2240      	movs	r2, #64	@ 0x40
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	d100      	bne.n	8010dda <HAL_PCD_EP_DB_Transmit+0x1a>
 8010dd8:	e1e4      	b.n	80111a4 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2250      	movs	r2, #80	@ 0x50
 8010de0:	5a9b      	ldrh	r3, [r3, r2]
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	001a      	movs	r2, r3
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	781b      	ldrb	r3, [r3, #0]
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	18d2      	adds	r2, r2, r3
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	18d3      	adds	r3, r2, r3
 8010df4:	4ad0      	ldr	r2, [pc, #832]	@ (8011138 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010df6:	4694      	mov	ip, r2
 8010df8:	4463      	add	r3, ip
 8010dfa:	881a      	ldrh	r2, [r3, #0]
 8010dfc:	2186      	movs	r1, #134	@ 0x86
 8010dfe:	187b      	adds	r3, r7, r1
 8010e00:	0592      	lsls	r2, r2, #22
 8010e02:	0d92      	lsrs	r2, r2, #22
 8010e04:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	699a      	ldr	r2, [r3, #24]
 8010e0a:	187b      	adds	r3, r7, r1
 8010e0c:	881b      	ldrh	r3, [r3, #0]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d907      	bls.n	8010e22 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	699a      	ldr	r2, [r3, #24]
 8010e16:	187b      	adds	r3, r7, r1
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	1ad2      	subs	r2, r2, r3
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	619a      	str	r2, [r3, #24]
 8010e20:	e002      	b.n	8010e28 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8010e22:	68bb      	ldr	r3, [r7, #8]
 8010e24:	2200      	movs	r2, #0
 8010e26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	699b      	ldr	r3, [r3, #24]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d000      	beq.n	8010e32 <HAL_PCD_EP_DB_Transmit+0x72>
 8010e30:	e0b5      	b.n	8010f9e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	785b      	ldrb	r3, [r3, #1]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d125      	bne.n	8010e86 <HAL_PCD_EP_DB_Transmit+0xc6>
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	2250      	movs	r2, #80	@ 0x50
 8010e46:	5a9b      	ldrh	r3, [r3, r2]
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	001a      	movs	r2, r3
 8010e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e4e:	189b      	adds	r3, r3, r2
 8010e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	00da      	lsls	r2, r3, #3
 8010e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5a:	18d3      	adds	r3, r2, r3
 8010e5c:	4ab6      	ldr	r2, [pc, #728]	@ (8011138 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010e5e:	4694      	mov	ip, r2
 8010e60:	4463      	add	r3, ip
 8010e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	059b      	lsls	r3, r3, #22
 8010e6c:	0d9b      	lsrs	r3, r3, #22
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e72:	801a      	strh	r2, [r3, #0]
 8010e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e76:	881b      	ldrh	r3, [r3, #0]
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	4ab0      	ldr	r2, [pc, #704]	@ (801113c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	b29a      	uxth	r2, r3
 8010e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e82:	801a      	strh	r2, [r3, #0]
 8010e84:	e01b      	b.n	8010ebe <HAL_PCD_EP_DB_Transmit+0xfe>
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	785b      	ldrb	r3, [r3, #1]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d117      	bne.n	8010ebe <HAL_PCD_EP_DB_Transmit+0xfe>
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2250      	movs	r2, #80	@ 0x50
 8010e9a:	5a9b      	ldrh	r3, [r3, r2]
 8010e9c:	b29b      	uxth	r3, r3
 8010e9e:	001a      	movs	r2, r3
 8010ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ea2:	189b      	adds	r3, r3, r2
 8010ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	00da      	lsls	r2, r3, #3
 8010eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010eae:	18d3      	adds	r3, r2, r3
 8010eb0:	4aa1      	ldr	r2, [pc, #644]	@ (8011138 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010eb2:	4694      	mov	ip, r2
 8010eb4:	4463      	add	r3, ip
 8010eb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eba:	2200      	movs	r2, #0
 8010ebc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	785b      	ldrb	r3, [r3, #1]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d125      	bne.n	8010f18 <HAL_PCD_EP_DB_Transmit+0x158>
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	61fb      	str	r3, [r7, #28]
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	2250      	movs	r2, #80	@ 0x50
 8010ed8:	5a9b      	ldrh	r3, [r3, r2]
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	001a      	movs	r2, r3
 8010ede:	69fb      	ldr	r3, [r7, #28]
 8010ee0:	189b      	adds	r3, r3, r2
 8010ee2:	61fb      	str	r3, [r7, #28]
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	781b      	ldrb	r3, [r3, #0]
 8010ee8:	00da      	lsls	r2, r3, #3
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	18d3      	adds	r3, r2, r3
 8010eee:	4a94      	ldr	r2, [pc, #592]	@ (8011140 <HAL_PCD_EP_DB_Transmit+0x380>)
 8010ef0:	4694      	mov	ip, r2
 8010ef2:	4463      	add	r3, ip
 8010ef4:	61bb      	str	r3, [r7, #24]
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	881b      	ldrh	r3, [r3, #0]
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	059b      	lsls	r3, r3, #22
 8010efe:	0d9b      	lsrs	r3, r3, #22
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	69bb      	ldr	r3, [r7, #24]
 8010f04:	801a      	strh	r2, [r3, #0]
 8010f06:	69bb      	ldr	r3, [r7, #24]
 8010f08:	881b      	ldrh	r3, [r3, #0]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4a8b      	ldr	r2, [pc, #556]	@ (801113c <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	b29a      	uxth	r2, r3
 8010f12:	69bb      	ldr	r3, [r7, #24]
 8010f14:	801a      	strh	r2, [r3, #0]
 8010f16:	e018      	b.n	8010f4a <HAL_PCD_EP_DB_Transmit+0x18a>
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	785b      	ldrb	r3, [r3, #1]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d114      	bne.n	8010f4a <HAL_PCD_EP_DB_Transmit+0x18a>
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2250      	movs	r2, #80	@ 0x50
 8010f26:	5a9b      	ldrh	r3, [r3, r2]
 8010f28:	b29b      	uxth	r3, r3
 8010f2a:	001a      	movs	r2, r3
 8010f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f2e:	189b      	adds	r3, r3, r2
 8010f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	00da      	lsls	r2, r3, #3
 8010f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f3a:	18d3      	adds	r3, r2, r3
 8010f3c:	4a80      	ldr	r2, [pc, #512]	@ (8011140 <HAL_PCD_EP_DB_Transmit+0x380>)
 8010f3e:	4694      	mov	ip, r2
 8010f40:	4463      	add	r3, ip
 8010f42:	623b      	str	r3, [r7, #32]
 8010f44:	6a3b      	ldr	r3, [r7, #32]
 8010f46:	2200      	movs	r2, #0
 8010f48:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	781a      	ldrb	r2, [r3, #0]
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	0011      	movs	r1, r2
 8010f52:	0018      	movs	r0, r3
 8010f54:	f008 fbb8 	bl	80196c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010f58:	1dbb      	adds	r3, r7, #6
 8010f5a:	881a      	ldrh	r2, [r3, #0]
 8010f5c:	2380      	movs	r3, #128	@ 0x80
 8010f5e:	01db      	lsls	r3, r3, #7
 8010f60:	4013      	ands	r3, r2
 8010f62:	d100      	bne.n	8010f66 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8010f64:	e309      	b.n	801157a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	001a      	movs	r2, r3
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	781b      	ldrb	r3, [r3, #0]
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	18d3      	adds	r3, r2, r3
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	b29a      	uxth	r2, r3
 8010f78:	2016      	movs	r0, #22
 8010f7a:	183b      	adds	r3, r7, r0
 8010f7c:	4971      	ldr	r1, [pc, #452]	@ (8011144 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010f7e:	400a      	ands	r2, r1
 8010f80:	801a      	strh	r2, [r3, #0]
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	001a      	movs	r2, r3
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	009b      	lsls	r3, r3, #2
 8010f8e:	18d3      	adds	r3, r2, r3
 8010f90:	183a      	adds	r2, r7, r0
 8010f92:	8812      	ldrh	r2, [r2, #0]
 8010f94:	496c      	ldr	r1, [pc, #432]	@ (8011148 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010f96:	430a      	orrs	r2, r1
 8010f98:	b292      	uxth	r2, r2
 8010f9a:	801a      	strh	r2, [r3, #0]
 8010f9c:	e2ed      	b.n	801157a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010f9e:	1dbb      	adds	r3, r7, #6
 8010fa0:	881a      	ldrh	r2, [r3, #0]
 8010fa2:	2380      	movs	r3, #128	@ 0x80
 8010fa4:	01db      	lsls	r3, r3, #7
 8010fa6:	4013      	ands	r3, r2
 8010fa8:	d01a      	beq.n	8010fe0 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	001a      	movs	r2, r3
 8010fb0:	68bb      	ldr	r3, [r7, #8]
 8010fb2:	781b      	ldrb	r3, [r3, #0]
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	18d3      	adds	r3, r2, r3
 8010fb8:	881b      	ldrh	r3, [r3, #0]
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	208a      	movs	r0, #138	@ 0x8a
 8010fbe:	183b      	adds	r3, r7, r0
 8010fc0:	4960      	ldr	r1, [pc, #384]	@ (8011144 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010fc2:	400a      	ands	r2, r1
 8010fc4:	801a      	strh	r2, [r3, #0]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	001a      	movs	r2, r3
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	009b      	lsls	r3, r3, #2
 8010fd2:	18d3      	adds	r3, r2, r3
 8010fd4:	183a      	adds	r2, r7, r0
 8010fd6:	8812      	ldrh	r2, [r2, #0]
 8010fd8:	495b      	ldr	r1, [pc, #364]	@ (8011148 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	b292      	uxth	r2, r2
 8010fde:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	2224      	movs	r2, #36	@ 0x24
 8010fe4:	5c9b      	ldrb	r3, [r3, r2]
 8010fe6:	2b01      	cmp	r3, #1
 8010fe8:	d000      	beq.n	8010fec <HAL_PCD_EP_DB_Transmit+0x22c>
 8010fea:	e2c6      	b.n	801157a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	695a      	ldr	r2, [r3, #20]
 8010ff0:	2186      	movs	r1, #134	@ 0x86
 8010ff2:	187b      	adds	r3, r7, r1
 8010ff4:	881b      	ldrh	r3, [r3, #0]
 8010ff6:	18d2      	adds	r2, r2, r3
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010ffc:	68bb      	ldr	r3, [r7, #8]
 8010ffe:	69da      	ldr	r2, [r3, #28]
 8011000:	187b      	adds	r3, r7, r1
 8011002:	881b      	ldrh	r3, [r3, #0]
 8011004:	18d2      	adds	r2, r2, r3
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	6a1a      	ldr	r2, [r3, #32]
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	691b      	ldr	r3, [r3, #16]
 8011012:	429a      	cmp	r2, r3
 8011014:	d30c      	bcc.n	8011030 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8011016:	68bb      	ldr	r3, [r7, #8]
 8011018:	691b      	ldr	r3, [r3, #16]
 801101a:	218c      	movs	r1, #140	@ 0x8c
 801101c:	187a      	adds	r2, r7, r1
 801101e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	6a1a      	ldr	r2, [r3, #32]
 8011024:	187b      	adds	r3, r7, r1
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	1ad2      	subs	r2, r2, r3
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	621a      	str	r2, [r3, #32]
 801102e:	e01a      	b.n	8011066 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	6a1b      	ldr	r3, [r3, #32]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d10a      	bne.n	801104e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8011038:	2386      	movs	r3, #134	@ 0x86
 801103a:	18fb      	adds	r3, r7, r3
 801103c:	881b      	ldrh	r3, [r3, #0]
 801103e:	228c      	movs	r2, #140	@ 0x8c
 8011040:	18ba      	adds	r2, r7, r2
 8011042:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8011044:	68bb      	ldr	r3, [r7, #8]
 8011046:	2224      	movs	r2, #36	@ 0x24
 8011048:	2100      	movs	r1, #0
 801104a:	5499      	strb	r1, [r3, r2]
 801104c:	e00b      	b.n	8011066 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	2224      	movs	r2, #36	@ 0x24
 8011052:	2100      	movs	r1, #0
 8011054:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	6a1b      	ldr	r3, [r3, #32]
 801105a:	228c      	movs	r2, #140	@ 0x8c
 801105c:	18ba      	adds	r2, r7, r2
 801105e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	2200      	movs	r2, #0
 8011064:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	785b      	ldrb	r3, [r3, #1]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d000      	beq.n	8011070 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801106e:	e06d      	b.n	801114c <HAL_PCD_EP_DB_Transmit+0x38c>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2250      	movs	r2, #80	@ 0x50
 801107c:	5a9b      	ldrh	r3, [r3, r2]
 801107e:	b29b      	uxth	r3, r3
 8011080:	001a      	movs	r2, r3
 8011082:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011084:	189b      	adds	r3, r3, r2
 8011086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	00da      	lsls	r2, r3, #3
 801108e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011090:	18d3      	adds	r3, r2, r3
 8011092:	4a29      	ldr	r2, [pc, #164]	@ (8011138 <HAL_PCD_EP_DB_Transmit+0x378>)
 8011094:	4694      	mov	ip, r2
 8011096:	4463      	add	r3, ip
 8011098:	63bb      	str	r3, [r7, #56]	@ 0x38
 801109a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801109c:	881b      	ldrh	r3, [r3, #0]
 801109e:	b29b      	uxth	r3, r3
 80110a0:	059b      	lsls	r3, r3, #22
 80110a2:	0d9b      	lsrs	r3, r3, #22
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110a8:	801a      	strh	r2, [r3, #0]
 80110aa:	228c      	movs	r2, #140	@ 0x8c
 80110ac:	18bb      	adds	r3, r7, r2
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80110b2:	d91a      	bls.n	80110ea <HAL_PCD_EP_DB_Transmit+0x32a>
 80110b4:	18bb      	adds	r3, r7, r2
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	095b      	lsrs	r3, r3, #5
 80110ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110bc:	18bb      	adds	r3, r7, r2
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	221f      	movs	r2, #31
 80110c2:	4013      	ands	r3, r2
 80110c4:	d102      	bne.n	80110cc <HAL_PCD_EP_DB_Transmit+0x30c>
 80110c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110c8:	3b01      	subs	r3, #1
 80110ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ce:	881b      	ldrh	r3, [r3, #0]
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	029b      	lsls	r3, r3, #10
 80110d8:	b29b      	uxth	r3, r3
 80110da:	4313      	orrs	r3, r2
 80110dc:	b29b      	uxth	r3, r3
 80110de:	4a17      	ldr	r2, [pc, #92]	@ (801113c <HAL_PCD_EP_DB_Transmit+0x37c>)
 80110e0:	4313      	orrs	r3, r2
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110e6:	801a      	strh	r2, [r3, #0]
 80110e8:	e04f      	b.n	801118a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80110ea:	238c      	movs	r3, #140	@ 0x8c
 80110ec:	18fb      	adds	r3, r7, r3
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d108      	bne.n	8011106 <HAL_PCD_EP_DB_Transmit+0x346>
 80110f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	4a10      	ldr	r2, [pc, #64]	@ (801113c <HAL_PCD_EP_DB_Transmit+0x37c>)
 80110fc:	4313      	orrs	r3, r2
 80110fe:	b29a      	uxth	r2, r3
 8011100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011102:	801a      	strh	r2, [r3, #0]
 8011104:	e041      	b.n	801118a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011106:	228c      	movs	r2, #140	@ 0x8c
 8011108:	18bb      	adds	r3, r7, r2
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	085b      	lsrs	r3, r3, #1
 801110e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011110:	18bb      	adds	r3, r7, r2
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	2201      	movs	r2, #1
 8011116:	4013      	ands	r3, r2
 8011118:	d002      	beq.n	8011120 <HAL_PCD_EP_DB_Transmit+0x360>
 801111a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801111c:	3301      	adds	r3, #1
 801111e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011122:	881b      	ldrh	r3, [r3, #0]
 8011124:	b29a      	uxth	r2, r3
 8011126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011128:	b29b      	uxth	r3, r3
 801112a:	029b      	lsls	r3, r3, #10
 801112c:	b29b      	uxth	r3, r3
 801112e:	4313      	orrs	r3, r2
 8011130:	b29a      	uxth	r2, r3
 8011132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011134:	801a      	strh	r2, [r3, #0]
 8011136:	e028      	b.n	801118a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011138:	00000402 	.word	0x00000402
 801113c:	ffff8000 	.word	0xffff8000
 8011140:	00000406 	.word	0x00000406
 8011144:	ffff8f8f 	.word	0xffff8f8f
 8011148:	ffffc080 	.word	0xffffc080
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	785b      	ldrb	r3, [r3, #1]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d11a      	bne.n	801118a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	647b      	str	r3, [r7, #68]	@ 0x44
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2250      	movs	r2, #80	@ 0x50
 8011160:	5a9b      	ldrh	r3, [r3, r2]
 8011162:	b29b      	uxth	r3, r3
 8011164:	001a      	movs	r2, r3
 8011166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011168:	189b      	adds	r3, r3, r2
 801116a:	647b      	str	r3, [r7, #68]	@ 0x44
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	781b      	ldrb	r3, [r3, #0]
 8011170:	00da      	lsls	r2, r3, #3
 8011172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011174:	18d3      	adds	r3, r2, r3
 8011176:	4adb      	ldr	r2, [pc, #876]	@ (80114e4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8011178:	4694      	mov	ip, r2
 801117a:	4463      	add	r3, ip
 801117c:	643b      	str	r3, [r7, #64]	@ 0x40
 801117e:	238c      	movs	r3, #140	@ 0x8c
 8011180:	18fb      	adds	r3, r7, r3
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	b29a      	uxth	r2, r3
 8011186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011188:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6818      	ldr	r0, [r3, #0]
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	6959      	ldr	r1, [r3, #20]
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	891a      	ldrh	r2, [r3, #8]
 8011196:	238c      	movs	r3, #140	@ 0x8c
 8011198:	18fb      	adds	r3, r7, r3
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	b29b      	uxth	r3, r3
 801119e:	f006 fa0f 	bl	80175c0 <USB_WritePMA>
 80111a2:	e1ea      	b.n	801157a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2250      	movs	r2, #80	@ 0x50
 80111aa:	5a9b      	ldrh	r3, [r3, r2]
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	001a      	movs	r2, r3
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	00db      	lsls	r3, r3, #3
 80111b6:	18d2      	adds	r2, r2, r3
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	18d3      	adds	r3, r2, r3
 80111be:	4aca      	ldr	r2, [pc, #808]	@ (80114e8 <HAL_PCD_EP_DB_Transmit+0x728>)
 80111c0:	4694      	mov	ip, r2
 80111c2:	4463      	add	r3, ip
 80111c4:	881a      	ldrh	r2, [r3, #0]
 80111c6:	2186      	movs	r1, #134	@ 0x86
 80111c8:	187b      	adds	r3, r7, r1
 80111ca:	0592      	lsls	r2, r2, #22
 80111cc:	0d92      	lsrs	r2, r2, #22
 80111ce:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	699a      	ldr	r2, [r3, #24]
 80111d4:	187b      	adds	r3, r7, r1
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d307      	bcc.n	80111ec <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	699a      	ldr	r2, [r3, #24]
 80111e0:	187b      	adds	r3, r7, r1
 80111e2:	881b      	ldrh	r3, [r3, #0]
 80111e4:	1ad2      	subs	r2, r2, r3
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	619a      	str	r2, [r3, #24]
 80111ea:	e002      	b.n	80111f2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	2200      	movs	r2, #0
 80111f0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	699b      	ldr	r3, [r3, #24]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d000      	beq.n	80111fc <HAL_PCD_EP_DB_Transmit+0x43c>
 80111fa:	e0bb      	b.n	8011374 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	785b      	ldrb	r3, [r3, #1]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d125      	bne.n	8011250 <HAL_PCD_EP_DB_Transmit+0x490>
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2250      	movs	r2, #80	@ 0x50
 8011210:	5a9b      	ldrh	r3, [r3, r2]
 8011212:	b29b      	uxth	r3, r3
 8011214:	001a      	movs	r2, r3
 8011216:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011218:	189b      	adds	r3, r3, r2
 801121a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	781b      	ldrb	r3, [r3, #0]
 8011220:	00da      	lsls	r2, r3, #3
 8011222:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011224:	18d3      	adds	r3, r2, r3
 8011226:	4aaf      	ldr	r2, [pc, #700]	@ (80114e4 <HAL_PCD_EP_DB_Transmit+0x724>)
 8011228:	4694      	mov	ip, r2
 801122a:	4463      	add	r3, ip
 801122c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801122e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011230:	881b      	ldrh	r3, [r3, #0]
 8011232:	b29b      	uxth	r3, r3
 8011234:	059b      	lsls	r3, r3, #22
 8011236:	0d9b      	lsrs	r3, r3, #22
 8011238:	b29a      	uxth	r2, r3
 801123a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801123c:	801a      	strh	r2, [r3, #0]
 801123e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011240:	881b      	ldrh	r3, [r3, #0]
 8011242:	b29b      	uxth	r3, r3
 8011244:	4aa9      	ldr	r2, [pc, #676]	@ (80114ec <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011246:	4313      	orrs	r3, r2
 8011248:	b29a      	uxth	r2, r3
 801124a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801124c:	801a      	strh	r2, [r3, #0]
 801124e:	e01b      	b.n	8011288 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	785b      	ldrb	r3, [r3, #1]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d117      	bne.n	8011288 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	667b      	str	r3, [r7, #100]	@ 0x64
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	2250      	movs	r2, #80	@ 0x50
 8011264:	5a9b      	ldrh	r3, [r3, r2]
 8011266:	b29b      	uxth	r3, r3
 8011268:	001a      	movs	r2, r3
 801126a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801126c:	189b      	adds	r3, r3, r2
 801126e:	667b      	str	r3, [r7, #100]	@ 0x64
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	00da      	lsls	r2, r3, #3
 8011276:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011278:	18d3      	adds	r3, r2, r3
 801127a:	4a9a      	ldr	r2, [pc, #616]	@ (80114e4 <HAL_PCD_EP_DB_Transmit+0x724>)
 801127c:	4694      	mov	ip, r2
 801127e:	4463      	add	r3, ip
 8011280:	663b      	str	r3, [r7, #96]	@ 0x60
 8011282:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011284:	2200      	movs	r2, #0
 8011286:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	677b      	str	r3, [r7, #116]	@ 0x74
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	785b      	ldrb	r3, [r3, #1]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d12b      	bne.n	80112ee <HAL_PCD_EP_DB_Transmit+0x52e>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2250      	movs	r2, #80	@ 0x50
 80112a2:	5a9b      	ldrh	r3, [r3, r2]
 80112a4:	b29b      	uxth	r3, r3
 80112a6:	001a      	movs	r2, r3
 80112a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112aa:	189b      	adds	r3, r3, r2
 80112ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80112ae:	68bb      	ldr	r3, [r7, #8]
 80112b0:	781b      	ldrb	r3, [r3, #0]
 80112b2:	00da      	lsls	r2, r3, #3
 80112b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80112b6:	18d3      	adds	r3, r2, r3
 80112b8:	4a8b      	ldr	r2, [pc, #556]	@ (80114e8 <HAL_PCD_EP_DB_Transmit+0x728>)
 80112ba:	4694      	mov	ip, r2
 80112bc:	4463      	add	r3, ip
 80112be:	2180      	movs	r1, #128	@ 0x80
 80112c0:	187a      	adds	r2, r7, r1
 80112c2:	6013      	str	r3, [r2, #0]
 80112c4:	187b      	adds	r3, r7, r1
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	881b      	ldrh	r3, [r3, #0]
 80112ca:	b29b      	uxth	r3, r3
 80112cc:	059b      	lsls	r3, r3, #22
 80112ce:	0d9b      	lsrs	r3, r3, #22
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	187b      	adds	r3, r7, r1
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	801a      	strh	r2, [r3, #0]
 80112d8:	187b      	adds	r3, r7, r1
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	881b      	ldrh	r3, [r3, #0]
 80112de:	b29b      	uxth	r3, r3
 80112e0:	4a82      	ldr	r2, [pc, #520]	@ (80114ec <HAL_PCD_EP_DB_Transmit+0x72c>)
 80112e2:	4313      	orrs	r3, r2
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	187b      	adds	r3, r7, r1
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	801a      	strh	r2, [r3, #0]
 80112ec:	e018      	b.n	8011320 <HAL_PCD_EP_DB_Transmit+0x560>
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	785b      	ldrb	r3, [r3, #1]
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d114      	bne.n	8011320 <HAL_PCD_EP_DB_Transmit+0x560>
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2250      	movs	r2, #80	@ 0x50
 80112fc:	5a9b      	ldrh	r3, [r3, r2]
 80112fe:	b29b      	uxth	r3, r3
 8011300:	001a      	movs	r2, r3
 8011302:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011304:	189b      	adds	r3, r3, r2
 8011306:	677b      	str	r3, [r7, #116]	@ 0x74
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	781b      	ldrb	r3, [r3, #0]
 801130c:	00da      	lsls	r2, r3, #3
 801130e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011310:	18d3      	adds	r3, r2, r3
 8011312:	4a75      	ldr	r2, [pc, #468]	@ (80114e8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8011314:	4694      	mov	ip, r2
 8011316:	4463      	add	r3, ip
 8011318:	673b      	str	r3, [r7, #112]	@ 0x70
 801131a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801131c:	2200      	movs	r2, #0
 801131e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	781a      	ldrb	r2, [r3, #0]
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	0011      	movs	r1, r2
 8011328:	0018      	movs	r0, r3
 801132a:	f008 f9cd 	bl	80196c8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801132e:	1dbb      	adds	r3, r7, #6
 8011330:	881a      	ldrh	r2, [r3, #0]
 8011332:	2380      	movs	r3, #128	@ 0x80
 8011334:	01db      	lsls	r3, r3, #7
 8011336:	4013      	ands	r3, r2
 8011338:	d000      	beq.n	801133c <HAL_PCD_EP_DB_Transmit+0x57c>
 801133a:	e11e      	b.n	801157a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	001a      	movs	r2, r3
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	18d3      	adds	r3, r2, r3
 801134a:	881b      	ldrh	r3, [r3, #0]
 801134c:	b29a      	uxth	r2, r3
 801134e:	2088      	movs	r0, #136	@ 0x88
 8011350:	183b      	adds	r3, r7, r0
 8011352:	4967      	ldr	r1, [pc, #412]	@ (80114f0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8011354:	400a      	ands	r2, r1
 8011356:	801a      	strh	r2, [r3, #0]
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	001a      	movs	r2, r3
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	18d3      	adds	r3, r2, r3
 8011366:	183a      	adds	r2, r7, r0
 8011368:	8812      	ldrh	r2, [r2, #0]
 801136a:	4962      	ldr	r1, [pc, #392]	@ (80114f4 <HAL_PCD_EP_DB_Transmit+0x734>)
 801136c:	430a      	orrs	r2, r1
 801136e:	b292      	uxth	r2, r2
 8011370:	801a      	strh	r2, [r3, #0]
 8011372:	e102      	b.n	801157a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8011374:	1dbb      	adds	r3, r7, #6
 8011376:	881a      	ldrh	r2, [r3, #0]
 8011378:	2380      	movs	r3, #128	@ 0x80
 801137a:	01db      	lsls	r3, r3, #7
 801137c:	4013      	ands	r3, r2
 801137e:	d11a      	bne.n	80113b6 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	001a      	movs	r2, r3
 8011386:	68bb      	ldr	r3, [r7, #8]
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	18d3      	adds	r3, r2, r3
 801138e:	881b      	ldrh	r3, [r3, #0]
 8011390:	b29a      	uxth	r2, r3
 8011392:	204e      	movs	r0, #78	@ 0x4e
 8011394:	183b      	adds	r3, r7, r0
 8011396:	4956      	ldr	r1, [pc, #344]	@ (80114f0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8011398:	400a      	ands	r2, r1
 801139a:	801a      	strh	r2, [r3, #0]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	001a      	movs	r2, r3
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	18d3      	adds	r3, r2, r3
 80113aa:	183a      	adds	r2, r7, r0
 80113ac:	8812      	ldrh	r2, [r2, #0]
 80113ae:	4951      	ldr	r1, [pc, #324]	@ (80114f4 <HAL_PCD_EP_DB_Transmit+0x734>)
 80113b0:	430a      	orrs	r2, r1
 80113b2:	b292      	uxth	r2, r2
 80113b4:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	2224      	movs	r2, #36	@ 0x24
 80113ba:	5c9b      	ldrb	r3, [r3, r2]
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d000      	beq.n	80113c2 <HAL_PCD_EP_DB_Transmit+0x602>
 80113c0:	e0db      	b.n	801157a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	695a      	ldr	r2, [r3, #20]
 80113c6:	2186      	movs	r1, #134	@ 0x86
 80113c8:	187b      	adds	r3, r7, r1
 80113ca:	881b      	ldrh	r3, [r3, #0]
 80113cc:	18d2      	adds	r2, r2, r3
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	69da      	ldr	r2, [r3, #28]
 80113d6:	187b      	adds	r3, r7, r1
 80113d8:	881b      	ldrh	r3, [r3, #0]
 80113da:	18d2      	adds	r2, r2, r3
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80113e0:	68bb      	ldr	r3, [r7, #8]
 80113e2:	6a1a      	ldr	r2, [r3, #32]
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	691b      	ldr	r3, [r3, #16]
 80113e8:	429a      	cmp	r2, r3
 80113ea:	d30c      	bcc.n	8011406 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	691b      	ldr	r3, [r3, #16]
 80113f0:	218c      	movs	r1, #140	@ 0x8c
 80113f2:	187a      	adds	r2, r7, r1
 80113f4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	6a1a      	ldr	r2, [r3, #32]
 80113fa:	187b      	adds	r3, r7, r1
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	1ad2      	subs	r2, r2, r3
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	621a      	str	r2, [r3, #32]
 8011404:	e01a      	b.n	801143c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	6a1b      	ldr	r3, [r3, #32]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d10a      	bne.n	8011424 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801140e:	2386      	movs	r3, #134	@ 0x86
 8011410:	18fb      	adds	r3, r7, r3
 8011412:	881b      	ldrh	r3, [r3, #0]
 8011414:	228c      	movs	r2, #140	@ 0x8c
 8011416:	18ba      	adds	r2, r7, r2
 8011418:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	2224      	movs	r2, #36	@ 0x24
 801141e:	2100      	movs	r1, #0
 8011420:	5499      	strb	r1, [r3, r2]
 8011422:	e00b      	b.n	801143c <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8011424:	68bb      	ldr	r3, [r7, #8]
 8011426:	6a1b      	ldr	r3, [r3, #32]
 8011428:	228c      	movs	r2, #140	@ 0x8c
 801142a:	18ba      	adds	r2, r7, r2
 801142c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	2200      	movs	r2, #0
 8011432:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	2224      	movs	r2, #36	@ 0x24
 8011438:	2100      	movs	r1, #0
 801143a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	657b      	str	r3, [r7, #84]	@ 0x54
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	785b      	ldrb	r3, [r3, #1]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d000      	beq.n	801144c <HAL_PCD_EP_DB_Transmit+0x68c>
 801144a:	e06e      	b.n	801152a <HAL_PCD_EP_DB_Transmit+0x76a>
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	2250      	movs	r2, #80	@ 0x50
 8011458:	5a9b      	ldrh	r3, [r3, r2]
 801145a:	b29b      	uxth	r3, r3
 801145c:	001a      	movs	r2, r3
 801145e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011460:	189b      	adds	r3, r3, r2
 8011462:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	781b      	ldrb	r3, [r3, #0]
 8011468:	00da      	lsls	r2, r3, #3
 801146a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801146c:	18d3      	adds	r3, r2, r3
 801146e:	4a1e      	ldr	r2, [pc, #120]	@ (80114e8 <HAL_PCD_EP_DB_Transmit+0x728>)
 8011470:	4694      	mov	ip, r2
 8011472:	4463      	add	r3, ip
 8011474:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011478:	881b      	ldrh	r3, [r3, #0]
 801147a:	b29b      	uxth	r3, r3
 801147c:	059b      	lsls	r3, r3, #22
 801147e:	0d9b      	lsrs	r3, r3, #22
 8011480:	b29a      	uxth	r2, r3
 8011482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011484:	801a      	strh	r2, [r3, #0]
 8011486:	228c      	movs	r2, #140	@ 0x8c
 8011488:	18bb      	adds	r3, r7, r2
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2b3e      	cmp	r3, #62	@ 0x3e
 801148e:	d91a      	bls.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x706>
 8011490:	18bb      	adds	r3, r7, r2
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	095b      	lsrs	r3, r3, #5
 8011496:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011498:	18bb      	adds	r3, r7, r2
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	221f      	movs	r2, #31
 801149e:	4013      	ands	r3, r2
 80114a0:	d102      	bne.n	80114a8 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80114a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80114a4:	3b01      	subs	r3, #1
 80114a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80114a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114aa:	881b      	ldrh	r3, [r3, #0]
 80114ac:	b29a      	uxth	r2, r3
 80114ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	029b      	lsls	r3, r3, #10
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	4313      	orrs	r3, r2
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	4a0c      	ldr	r2, [pc, #48]	@ (80114ec <HAL_PCD_EP_DB_Transmit+0x72c>)
 80114bc:	4313      	orrs	r3, r2
 80114be:	b29a      	uxth	r2, r3
 80114c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114c2:	801a      	strh	r2, [r3, #0]
 80114c4:	e04d      	b.n	8011562 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80114c6:	238c      	movs	r3, #140	@ 0x8c
 80114c8:	18fb      	adds	r3, r7, r3
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d113      	bne.n	80114f8 <HAL_PCD_EP_DB_Transmit+0x738>
 80114d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114d2:	881b      	ldrh	r3, [r3, #0]
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	4a05      	ldr	r2, [pc, #20]	@ (80114ec <HAL_PCD_EP_DB_Transmit+0x72c>)
 80114d8:	4313      	orrs	r3, r2
 80114da:	b29a      	uxth	r2, r3
 80114dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114de:	801a      	strh	r2, [r3, #0]
 80114e0:	e03f      	b.n	8011562 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80114e2:	46c0      	nop			@ (mov r8, r8)
 80114e4:	00000402 	.word	0x00000402
 80114e8:	00000406 	.word	0x00000406
 80114ec:	ffff8000 	.word	0xffff8000
 80114f0:	ffff8f8f 	.word	0xffff8f8f
 80114f4:	ffffc080 	.word	0xffffc080
 80114f8:	228c      	movs	r2, #140	@ 0x8c
 80114fa:	18bb      	adds	r3, r7, r2
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	085b      	lsrs	r3, r3, #1
 8011500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011502:	18bb      	adds	r3, r7, r2
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2201      	movs	r2, #1
 8011508:	4013      	ands	r3, r2
 801150a:	d002      	beq.n	8011512 <HAL_PCD_EP_DB_Transmit+0x752>
 801150c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801150e:	3301      	adds	r3, #1
 8011510:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011512:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	b29a      	uxth	r2, r3
 8011518:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801151a:	b29b      	uxth	r3, r3
 801151c:	029b      	lsls	r3, r3, #10
 801151e:	b29b      	uxth	r3, r3
 8011520:	4313      	orrs	r3, r2
 8011522:	b29a      	uxth	r2, r3
 8011524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011526:	801a      	strh	r2, [r3, #0]
 8011528:	e01b      	b.n	8011562 <HAL_PCD_EP_DB_Transmit+0x7a2>
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	785b      	ldrb	r3, [r3, #1]
 801152e:	2b01      	cmp	r3, #1
 8011530:	d117      	bne.n	8011562 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	2250      	movs	r2, #80	@ 0x50
 8011538:	5a9b      	ldrh	r3, [r3, r2]
 801153a:	b29b      	uxth	r3, r3
 801153c:	001a      	movs	r2, r3
 801153e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011540:	189b      	adds	r3, r3, r2
 8011542:	657b      	str	r3, [r7, #84]	@ 0x54
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	00da      	lsls	r2, r3, #3
 801154a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801154c:	18d3      	adds	r3, r2, r3
 801154e:	4a21      	ldr	r2, [pc, #132]	@ (80115d4 <HAL_PCD_EP_DB_Transmit+0x814>)
 8011550:	4694      	mov	ip, r2
 8011552:	4463      	add	r3, ip
 8011554:	653b      	str	r3, [r7, #80]	@ 0x50
 8011556:	238c      	movs	r3, #140	@ 0x8c
 8011558:	18fb      	adds	r3, r7, r3
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	b29a      	uxth	r2, r3
 801155e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011560:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	6818      	ldr	r0, [r3, #0]
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	6959      	ldr	r1, [r3, #20]
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	895a      	ldrh	r2, [r3, #10]
 801156e:	238c      	movs	r3, #140	@ 0x8c
 8011570:	18fb      	adds	r3, r7, r3
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	b29b      	uxth	r3, r3
 8011576:	f006 f823 	bl	80175c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	001a      	movs	r2, r3
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	18d3      	adds	r3, r2, r3
 8011588:	881b      	ldrh	r3, [r3, #0]
 801158a:	b29a      	uxth	r2, r3
 801158c:	2014      	movs	r0, #20
 801158e:	183b      	adds	r3, r7, r0
 8011590:	4911      	ldr	r1, [pc, #68]	@ (80115d8 <HAL_PCD_EP_DB_Transmit+0x818>)
 8011592:	400a      	ands	r2, r1
 8011594:	801a      	strh	r2, [r3, #0]
 8011596:	183b      	adds	r3, r7, r0
 8011598:	183a      	adds	r2, r7, r0
 801159a:	8812      	ldrh	r2, [r2, #0]
 801159c:	2110      	movs	r1, #16
 801159e:	404a      	eors	r2, r1
 80115a0:	801a      	strh	r2, [r3, #0]
 80115a2:	183b      	adds	r3, r7, r0
 80115a4:	183a      	adds	r2, r7, r0
 80115a6:	8812      	ldrh	r2, [r2, #0]
 80115a8:	2120      	movs	r1, #32
 80115aa:	404a      	eors	r2, r1
 80115ac:	801a      	strh	r2, [r3, #0]
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	001a      	movs	r2, r3
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	18d3      	adds	r3, r2, r3
 80115bc:	183a      	adds	r2, r7, r0
 80115be:	8812      	ldrh	r2, [r2, #0]
 80115c0:	4906      	ldr	r1, [pc, #24]	@ (80115dc <HAL_PCD_EP_DB_Transmit+0x81c>)
 80115c2:	430a      	orrs	r2, r1
 80115c4:	b292      	uxth	r2, r2
 80115c6:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80115c8:	2300      	movs	r3, #0
}
 80115ca:	0018      	movs	r0, r3
 80115cc:	46bd      	mov	sp, r7
 80115ce:	b024      	add	sp, #144	@ 0x90
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	46c0      	nop			@ (mov r8, r8)
 80115d4:	00000406 	.word	0x00000406
 80115d8:	ffff8fbf 	.word	0xffff8fbf
 80115dc:	ffff8080 	.word	0xffff8080

080115e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80115e0:	b590      	push	{r4, r7, lr}
 80115e2:	b087      	sub	sp, #28
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	60f8      	str	r0, [r7, #12]
 80115e8:	0008      	movs	r0, r1
 80115ea:	0011      	movs	r1, r2
 80115ec:	607b      	str	r3, [r7, #4]
 80115ee:	240a      	movs	r4, #10
 80115f0:	193b      	adds	r3, r7, r4
 80115f2:	1c02      	adds	r2, r0, #0
 80115f4:	801a      	strh	r2, [r3, #0]
 80115f6:	2308      	movs	r3, #8
 80115f8:	18fb      	adds	r3, r7, r3
 80115fa:	1c0a      	adds	r2, r1, #0
 80115fc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80115fe:	0021      	movs	r1, r4
 8011600:	187b      	adds	r3, r7, r1
 8011602:	881b      	ldrh	r3, [r3, #0]
 8011604:	2280      	movs	r2, #128	@ 0x80
 8011606:	4013      	ands	r3, r2
 8011608:	b29b      	uxth	r3, r3
 801160a:	2b00      	cmp	r3, #0
 801160c:	d00c      	beq.n	8011628 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801160e:	187b      	adds	r3, r7, r1
 8011610:	881b      	ldrh	r3, [r3, #0]
 8011612:	2207      	movs	r2, #7
 8011614:	4013      	ands	r3, r2
 8011616:	1c5a      	adds	r2, r3, #1
 8011618:	0013      	movs	r3, r2
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	189b      	adds	r3, r3, r2
 801161e:	00db      	lsls	r3, r3, #3
 8011620:	68fa      	ldr	r2, [r7, #12]
 8011622:	18d3      	adds	r3, r2, r3
 8011624:	617b      	str	r3, [r7, #20]
 8011626:	e00b      	b.n	8011640 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011628:	230a      	movs	r3, #10
 801162a:	18fb      	adds	r3, r7, r3
 801162c:	881a      	ldrh	r2, [r3, #0]
 801162e:	0013      	movs	r3, r2
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	189b      	adds	r3, r3, r2
 8011634:	00db      	lsls	r3, r3, #3
 8011636:	3369      	adds	r3, #105	@ 0x69
 8011638:	33ff      	adds	r3, #255	@ 0xff
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	18d3      	adds	r3, r2, r3
 801163e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8011640:	2308      	movs	r3, #8
 8011642:	18fb      	adds	r3, r7, r3
 8011644:	881b      	ldrh	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d107      	bne.n	801165a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	2200      	movs	r2, #0
 801164e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	b29a      	uxth	r2, r3
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	80da      	strh	r2, [r3, #6]
 8011658:	e00b      	b.n	8011672 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	2201      	movs	r2, #1
 801165e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	b29a      	uxth	r2, r3
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	0c1b      	lsrs	r3, r3, #16
 801166c:	b29a      	uxth	r2, r3
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011672:	2300      	movs	r3, #0
}
 8011674:	0018      	movs	r0, r3
 8011676:	46bd      	mov	sp, r7
 8011678:	b007      	add	sp, #28
 801167a:	bd90      	pop	{r4, r7, pc}

0801167c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	23ba      	movs	r3, #186	@ 0xba
 801168e:	009b      	lsls	r3, r3, #2
 8011690:	2101      	movs	r1, #1
 8011692:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	23b8      	movs	r3, #184	@ 0xb8
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	2100      	movs	r1, #0
 801169c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2254      	movs	r2, #84	@ 0x54
 80116a2:	5a9b      	ldrh	r3, [r3, r2]
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	2201      	movs	r2, #1
 80116a8:	4313      	orrs	r3, r2
 80116aa:	b299      	uxth	r1, r3
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2254      	movs	r2, #84	@ 0x54
 80116b0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2254      	movs	r2, #84	@ 0x54
 80116b6:	5a9b      	ldrh	r3, [r3, r2]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	2202      	movs	r2, #2
 80116bc:	4313      	orrs	r3, r2
 80116be:	b299      	uxth	r1, r3
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2254      	movs	r2, #84	@ 0x54
 80116c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80116c6:	2300      	movs	r3, #0
}
 80116c8:	0018      	movs	r0, r3
 80116ca:	46bd      	mov	sp, r7
 80116cc:	b004      	add	sp, #16
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	000a      	movs	r2, r1
 80116da:	1cfb      	adds	r3, r7, #3
 80116dc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80116de:	46c0      	nop			@ (mov r8, r8)
 80116e0:	46bd      	mov	sp, r7
 80116e2:	b002      	add	sp, #8
 80116e4:	bd80      	pop	{r7, pc}
	...

080116e8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80116ec:	4b04      	ldr	r3, [pc, #16]	@ (8011700 <HAL_PWR_EnableBkUpAccess+0x18>)
 80116ee:	681a      	ldr	r2, [r3, #0]
 80116f0:	4b03      	ldr	r3, [pc, #12]	@ (8011700 <HAL_PWR_EnableBkUpAccess+0x18>)
 80116f2:	2180      	movs	r1, #128	@ 0x80
 80116f4:	0049      	lsls	r1, r1, #1
 80116f6:	430a      	orrs	r2, r1
 80116f8:	601a      	str	r2, [r3, #0]
}
 80116fa:	46c0      	nop			@ (mov r8, r8)
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	40007000 	.word	0x40007000

08011704 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011704:	b5b0      	push	{r4, r5, r7, lr}
 8011706:	b08a      	sub	sp, #40	@ 0x28
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d102      	bne.n	8011718 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8011712:	2301      	movs	r3, #1
 8011714:	f000 fbbf 	bl	8011e96 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011718:	4bc9      	ldr	r3, [pc, #804]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	220c      	movs	r2, #12
 801171e:	4013      	ands	r3, r2
 8011720:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8011722:	4bc7      	ldr	r3, [pc, #796]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011724:	68da      	ldr	r2, [r3, #12]
 8011726:	2380      	movs	r3, #128	@ 0x80
 8011728:	025b      	lsls	r3, r3, #9
 801172a:	4013      	ands	r3, r2
 801172c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2201      	movs	r2, #1
 8011734:	4013      	ands	r3, r2
 8011736:	d100      	bne.n	801173a <HAL_RCC_OscConfig+0x36>
 8011738:	e07e      	b.n	8011838 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	2b08      	cmp	r3, #8
 801173e:	d007      	beq.n	8011750 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8011740:	69fb      	ldr	r3, [r7, #28]
 8011742:	2b0c      	cmp	r3, #12
 8011744:	d112      	bne.n	801176c <HAL_RCC_OscConfig+0x68>
 8011746:	69ba      	ldr	r2, [r7, #24]
 8011748:	2380      	movs	r3, #128	@ 0x80
 801174a:	025b      	lsls	r3, r3, #9
 801174c:	429a      	cmp	r2, r3
 801174e:	d10d      	bne.n	801176c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011750:	4bbb      	ldr	r3, [pc, #748]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	2380      	movs	r3, #128	@ 0x80
 8011756:	029b      	lsls	r3, r3, #10
 8011758:	4013      	ands	r3, r2
 801175a:	d100      	bne.n	801175e <HAL_RCC_OscConfig+0x5a>
 801175c:	e06b      	b.n	8011836 <HAL_RCC_OscConfig+0x132>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d167      	bne.n	8011836 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8011766:	2301      	movs	r3, #1
 8011768:	f000 fb95 	bl	8011e96 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	685a      	ldr	r2, [r3, #4]
 8011770:	2380      	movs	r3, #128	@ 0x80
 8011772:	025b      	lsls	r3, r3, #9
 8011774:	429a      	cmp	r2, r3
 8011776:	d107      	bne.n	8011788 <HAL_RCC_OscConfig+0x84>
 8011778:	4bb1      	ldr	r3, [pc, #708]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	4bb0      	ldr	r3, [pc, #704]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801177e:	2180      	movs	r1, #128	@ 0x80
 8011780:	0249      	lsls	r1, r1, #9
 8011782:	430a      	orrs	r2, r1
 8011784:	601a      	str	r2, [r3, #0]
 8011786:	e027      	b.n	80117d8 <HAL_RCC_OscConfig+0xd4>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	685a      	ldr	r2, [r3, #4]
 801178c:	23a0      	movs	r3, #160	@ 0xa0
 801178e:	02db      	lsls	r3, r3, #11
 8011790:	429a      	cmp	r2, r3
 8011792:	d10e      	bne.n	80117b2 <HAL_RCC_OscConfig+0xae>
 8011794:	4baa      	ldr	r3, [pc, #680]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011796:	681a      	ldr	r2, [r3, #0]
 8011798:	4ba9      	ldr	r3, [pc, #676]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801179a:	2180      	movs	r1, #128	@ 0x80
 801179c:	02c9      	lsls	r1, r1, #11
 801179e:	430a      	orrs	r2, r1
 80117a0:	601a      	str	r2, [r3, #0]
 80117a2:	4ba7      	ldr	r3, [pc, #668]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	4ba6      	ldr	r3, [pc, #664]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80117a8:	2180      	movs	r1, #128	@ 0x80
 80117aa:	0249      	lsls	r1, r1, #9
 80117ac:	430a      	orrs	r2, r1
 80117ae:	601a      	str	r2, [r3, #0]
 80117b0:	e012      	b.n	80117d8 <HAL_RCC_OscConfig+0xd4>
 80117b2:	4ba3      	ldr	r3, [pc, #652]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	4ba2      	ldr	r3, [pc, #648]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80117b8:	49a2      	ldr	r1, [pc, #648]	@ (8011a44 <HAL_RCC_OscConfig+0x340>)
 80117ba:	400a      	ands	r2, r1
 80117bc:	601a      	str	r2, [r3, #0]
 80117be:	4ba0      	ldr	r3, [pc, #640]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80117c0:	681a      	ldr	r2, [r3, #0]
 80117c2:	2380      	movs	r3, #128	@ 0x80
 80117c4:	025b      	lsls	r3, r3, #9
 80117c6:	4013      	ands	r3, r2
 80117c8:	60fb      	str	r3, [r7, #12]
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	4b9c      	ldr	r3, [pc, #624]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	4b9b      	ldr	r3, [pc, #620]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80117d2:	499d      	ldr	r1, [pc, #628]	@ (8011a48 <HAL_RCC_OscConfig+0x344>)
 80117d4:	400a      	ands	r2, r1
 80117d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d015      	beq.n	801180c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117e0:	f7fa fb92 	bl	800bf08 <HAL_GetTick>
 80117e4:	0003      	movs	r3, r0
 80117e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80117e8:	e009      	b.n	80117fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117ea:	f7fa fb8d 	bl	800bf08 <HAL_GetTick>
 80117ee:	0002      	movs	r2, r0
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	1ad3      	subs	r3, r2, r3
 80117f4:	2b64      	cmp	r3, #100	@ 0x64
 80117f6:	d902      	bls.n	80117fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80117f8:	2303      	movs	r3, #3
 80117fa:	f000 fb4c 	bl	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80117fe:	4b90      	ldr	r3, [pc, #576]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011800:	681a      	ldr	r2, [r3, #0]
 8011802:	2380      	movs	r3, #128	@ 0x80
 8011804:	029b      	lsls	r3, r3, #10
 8011806:	4013      	ands	r3, r2
 8011808:	d0ef      	beq.n	80117ea <HAL_RCC_OscConfig+0xe6>
 801180a:	e015      	b.n	8011838 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801180c:	f7fa fb7c 	bl	800bf08 <HAL_GetTick>
 8011810:	0003      	movs	r3, r0
 8011812:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011814:	e008      	b.n	8011828 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011816:	f7fa fb77 	bl	800bf08 <HAL_GetTick>
 801181a:	0002      	movs	r2, r0
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	1ad3      	subs	r3, r2, r3
 8011820:	2b64      	cmp	r3, #100	@ 0x64
 8011822:	d901      	bls.n	8011828 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8011824:	2303      	movs	r3, #3
 8011826:	e336      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011828:	4b85      	ldr	r3, [pc, #532]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801182a:	681a      	ldr	r2, [r3, #0]
 801182c:	2380      	movs	r3, #128	@ 0x80
 801182e:	029b      	lsls	r3, r3, #10
 8011830:	4013      	ands	r3, r2
 8011832:	d1f0      	bne.n	8011816 <HAL_RCC_OscConfig+0x112>
 8011834:	e000      	b.n	8011838 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011836:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	2202      	movs	r2, #2
 801183e:	4013      	ands	r3, r2
 8011840:	d100      	bne.n	8011844 <HAL_RCC_OscConfig+0x140>
 8011842:	e099      	b.n	8011978 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 801184a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184c:	2220      	movs	r2, #32
 801184e:	4013      	ands	r3, r2
 8011850:	d009      	beq.n	8011866 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8011852:	4b7b      	ldr	r3, [pc, #492]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	4b7a      	ldr	r3, [pc, #488]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011858:	2120      	movs	r1, #32
 801185a:	430a      	orrs	r2, r1
 801185c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011860:	2220      	movs	r2, #32
 8011862:	4393      	bics	r3, r2
 8011864:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	2b04      	cmp	r3, #4
 801186a:	d005      	beq.n	8011878 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	2b0c      	cmp	r3, #12
 8011870:	d13e      	bne.n	80118f0 <HAL_RCC_OscConfig+0x1ec>
 8011872:	69bb      	ldr	r3, [r7, #24]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d13b      	bne.n	80118f0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8011878:	4b71      	ldr	r3, [pc, #452]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2204      	movs	r2, #4
 801187e:	4013      	ands	r3, r2
 8011880:	d004      	beq.n	801188c <HAL_RCC_OscConfig+0x188>
 8011882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011884:	2b00      	cmp	r3, #0
 8011886:	d101      	bne.n	801188c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8011888:	2301      	movs	r3, #1
 801188a:	e304      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801188c:	4b6c      	ldr	r3, [pc, #432]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	4a6e      	ldr	r2, [pc, #440]	@ (8011a4c <HAL_RCC_OscConfig+0x348>)
 8011892:	4013      	ands	r3, r2
 8011894:	0019      	movs	r1, r3
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	691b      	ldr	r3, [r3, #16]
 801189a:	021a      	lsls	r2, r3, #8
 801189c:	4b68      	ldr	r3, [pc, #416]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801189e:	430a      	orrs	r2, r1
 80118a0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80118a2:	4b67      	ldr	r3, [pc, #412]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2209      	movs	r2, #9
 80118a8:	4393      	bics	r3, r2
 80118aa:	0019      	movs	r1, r3
 80118ac:	4b64      	ldr	r3, [pc, #400]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80118ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118b0:	430a      	orrs	r2, r1
 80118b2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80118b4:	f000 fc42 	bl	801213c <HAL_RCC_GetSysClockFreq>
 80118b8:	0001      	movs	r1, r0
 80118ba:	4b61      	ldr	r3, [pc, #388]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	091b      	lsrs	r3, r3, #4
 80118c0:	220f      	movs	r2, #15
 80118c2:	4013      	ands	r3, r2
 80118c4:	4a62      	ldr	r2, [pc, #392]	@ (8011a50 <HAL_RCC_OscConfig+0x34c>)
 80118c6:	5cd3      	ldrb	r3, [r2, r3]
 80118c8:	000a      	movs	r2, r1
 80118ca:	40da      	lsrs	r2, r3
 80118cc:	4b61      	ldr	r3, [pc, #388]	@ (8011a54 <HAL_RCC_OscConfig+0x350>)
 80118ce:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80118d0:	4b61      	ldr	r3, [pc, #388]	@ (8011a58 <HAL_RCC_OscConfig+0x354>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2513      	movs	r5, #19
 80118d6:	197c      	adds	r4, r7, r5
 80118d8:	0018      	movs	r0, r3
 80118da:	f7fa facf 	bl	800be7c <HAL_InitTick>
 80118de:	0003      	movs	r3, r0
 80118e0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80118e2:	197b      	adds	r3, r7, r5
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d046      	beq.n	8011978 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80118ea:	197b      	adds	r3, r7, r5
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	e2d2      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80118f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d027      	beq.n	8011946 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80118f6:	4b52      	ldr	r3, [pc, #328]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2209      	movs	r2, #9
 80118fc:	4393      	bics	r3, r2
 80118fe:	0019      	movs	r1, r3
 8011900:	4b4f      	ldr	r3, [pc, #316]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011904:	430a      	orrs	r2, r1
 8011906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011908:	f7fa fafe 	bl	800bf08 <HAL_GetTick>
 801190c:	0003      	movs	r3, r0
 801190e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011910:	e008      	b.n	8011924 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011912:	f7fa faf9 	bl	800bf08 <HAL_GetTick>
 8011916:	0002      	movs	r2, r0
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	1ad3      	subs	r3, r2, r3
 801191c:	2b02      	cmp	r3, #2
 801191e:	d901      	bls.n	8011924 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8011920:	2303      	movs	r3, #3
 8011922:	e2b8      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011924:	4b46      	ldr	r3, [pc, #280]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2204      	movs	r2, #4
 801192a:	4013      	ands	r3, r2
 801192c:	d0f1      	beq.n	8011912 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801192e:	4b44      	ldr	r3, [pc, #272]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	4a46      	ldr	r2, [pc, #280]	@ (8011a4c <HAL_RCC_OscConfig+0x348>)
 8011934:	4013      	ands	r3, r2
 8011936:	0019      	movs	r1, r3
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	021a      	lsls	r2, r3, #8
 801193e:	4b40      	ldr	r3, [pc, #256]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011940:	430a      	orrs	r2, r1
 8011942:	605a      	str	r2, [r3, #4]
 8011944:	e018      	b.n	8011978 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011946:	4b3e      	ldr	r3, [pc, #248]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	4b3d      	ldr	r3, [pc, #244]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801194c:	2101      	movs	r1, #1
 801194e:	438a      	bics	r2, r1
 8011950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011952:	f7fa fad9 	bl	800bf08 <HAL_GetTick>
 8011956:	0003      	movs	r3, r0
 8011958:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801195a:	e008      	b.n	801196e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801195c:	f7fa fad4 	bl	800bf08 <HAL_GetTick>
 8011960:	0002      	movs	r2, r0
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	2b02      	cmp	r3, #2
 8011968:	d901      	bls.n	801196e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801196a:	2303      	movs	r3, #3
 801196c:	e293      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801196e:	4b34      	ldr	r3, [pc, #208]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2204      	movs	r2, #4
 8011974:	4013      	ands	r3, r2
 8011976:	d1f1      	bne.n	801195c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2210      	movs	r2, #16
 801197e:	4013      	ands	r3, r2
 8011980:	d100      	bne.n	8011984 <HAL_RCC_OscConfig+0x280>
 8011982:	e0a2      	b.n	8011aca <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d140      	bne.n	8011a0c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801198a:	4b2d      	ldr	r3, [pc, #180]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 801198c:	681a      	ldr	r2, [r3, #0]
 801198e:	2380      	movs	r3, #128	@ 0x80
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4013      	ands	r3, r2
 8011994:	d005      	beq.n	80119a2 <HAL_RCC_OscConfig+0x29e>
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	69db      	ldr	r3, [r3, #28]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d101      	bne.n	80119a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801199e:	2301      	movs	r3, #1
 80119a0:	e279      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80119a2:	4b27      	ldr	r3, [pc, #156]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	4a2d      	ldr	r2, [pc, #180]	@ (8011a5c <HAL_RCC_OscConfig+0x358>)
 80119a8:	4013      	ands	r3, r2
 80119aa:	0019      	movs	r1, r3
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80119b0:	4b23      	ldr	r3, [pc, #140]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80119b2:	430a      	orrs	r2, r1
 80119b4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80119b6:	4b22      	ldr	r3, [pc, #136]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	021b      	lsls	r3, r3, #8
 80119bc:	0a19      	lsrs	r1, r3, #8
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6a1b      	ldr	r3, [r3, #32]
 80119c2:	061a      	lsls	r2, r3, #24
 80119c4:	4b1e      	ldr	r3, [pc, #120]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80119c6:	430a      	orrs	r2, r1
 80119c8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ce:	0b5b      	lsrs	r3, r3, #13
 80119d0:	3301      	adds	r3, #1
 80119d2:	2280      	movs	r2, #128	@ 0x80
 80119d4:	0212      	lsls	r2, r2, #8
 80119d6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80119d8:	4b19      	ldr	r3, [pc, #100]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	091b      	lsrs	r3, r3, #4
 80119de:	210f      	movs	r1, #15
 80119e0:	400b      	ands	r3, r1
 80119e2:	491b      	ldr	r1, [pc, #108]	@ (8011a50 <HAL_RCC_OscConfig+0x34c>)
 80119e4:	5ccb      	ldrb	r3, [r1, r3]
 80119e6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80119e8:	4b1a      	ldr	r3, [pc, #104]	@ (8011a54 <HAL_RCC_OscConfig+0x350>)
 80119ea:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80119ec:	4b1a      	ldr	r3, [pc, #104]	@ (8011a58 <HAL_RCC_OscConfig+0x354>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2513      	movs	r5, #19
 80119f2:	197c      	adds	r4, r7, r5
 80119f4:	0018      	movs	r0, r3
 80119f6:	f7fa fa41 	bl	800be7c <HAL_InitTick>
 80119fa:	0003      	movs	r3, r0
 80119fc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80119fe:	197b      	adds	r3, r7, r5
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d061      	beq.n	8011aca <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8011a06:	197b      	adds	r3, r7, r5
 8011a08:	781b      	ldrb	r3, [r3, #0]
 8011a0a:	e244      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	69db      	ldr	r3, [r3, #28]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d040      	beq.n	8011a96 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011a14:	4b0a      	ldr	r3, [pc, #40]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	4b09      	ldr	r3, [pc, #36]	@ (8011a40 <HAL_RCC_OscConfig+0x33c>)
 8011a1a:	2180      	movs	r1, #128	@ 0x80
 8011a1c:	0049      	lsls	r1, r1, #1
 8011a1e:	430a      	orrs	r2, r1
 8011a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011a22:	f7fa fa71 	bl	800bf08 <HAL_GetTick>
 8011a26:	0003      	movs	r3, r0
 8011a28:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011a2a:	e019      	b.n	8011a60 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011a2c:	f7fa fa6c 	bl	800bf08 <HAL_GetTick>
 8011a30:	0002      	movs	r2, r0
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	2b02      	cmp	r3, #2
 8011a38:	d912      	bls.n	8011a60 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	e22b      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
 8011a3e:	46c0      	nop			@ (mov r8, r8)
 8011a40:	40021000 	.word	0x40021000
 8011a44:	fffeffff 	.word	0xfffeffff
 8011a48:	fffbffff 	.word	0xfffbffff
 8011a4c:	ffffe0ff 	.word	0xffffe0ff
 8011a50:	08020b48 	.word	0x08020b48
 8011a54:	200000c4 	.word	0x200000c4
 8011a58:	200000d4 	.word	0x200000d4
 8011a5c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011a60:	4bca      	ldr	r3, [pc, #808]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011a62:	681a      	ldr	r2, [r3, #0]
 8011a64:	2380      	movs	r3, #128	@ 0x80
 8011a66:	009b      	lsls	r3, r3, #2
 8011a68:	4013      	ands	r3, r2
 8011a6a:	d0df      	beq.n	8011a2c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8011a6c:	4bc7      	ldr	r3, [pc, #796]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	4ac7      	ldr	r2, [pc, #796]	@ (8011d90 <HAL_RCC_OscConfig+0x68c>)
 8011a72:	4013      	ands	r3, r2
 8011a74:	0019      	movs	r1, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a7a:	4bc4      	ldr	r3, [pc, #784]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011a7c:	430a      	orrs	r2, r1
 8011a7e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011a80:	4bc2      	ldr	r3, [pc, #776]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	021b      	lsls	r3, r3, #8
 8011a86:	0a19      	lsrs	r1, r3, #8
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6a1b      	ldr	r3, [r3, #32]
 8011a8c:	061a      	lsls	r2, r3, #24
 8011a8e:	4bbf      	ldr	r3, [pc, #764]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011a90:	430a      	orrs	r2, r1
 8011a92:	605a      	str	r2, [r3, #4]
 8011a94:	e019      	b.n	8011aca <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8011a96:	4bbd      	ldr	r3, [pc, #756]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	4bbc      	ldr	r3, [pc, #752]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011a9c:	49bd      	ldr	r1, [pc, #756]	@ (8011d94 <HAL_RCC_OscConfig+0x690>)
 8011a9e:	400a      	ands	r2, r1
 8011aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011aa2:	f7fa fa31 	bl	800bf08 <HAL_GetTick>
 8011aa6:	0003      	movs	r3, r0
 8011aa8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011aaa:	e008      	b.n	8011abe <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011aac:	f7fa fa2c 	bl	800bf08 <HAL_GetTick>
 8011ab0:	0002      	movs	r2, r0
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	1ad3      	subs	r3, r2, r3
 8011ab6:	2b02      	cmp	r3, #2
 8011ab8:	d901      	bls.n	8011abe <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8011aba:	2303      	movs	r3, #3
 8011abc:	e1eb      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011abe:	4bb3      	ldr	r3, [pc, #716]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	2380      	movs	r3, #128	@ 0x80
 8011ac4:	009b      	lsls	r3, r3, #2
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	d1f0      	bne.n	8011aac <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2208      	movs	r2, #8
 8011ad0:	4013      	ands	r3, r2
 8011ad2:	d036      	beq.n	8011b42 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	695b      	ldr	r3, [r3, #20]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d019      	beq.n	8011b10 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011adc:	4bab      	ldr	r3, [pc, #684]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011ade:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011ae0:	4baa      	ldr	r3, [pc, #680]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011ae2:	2101      	movs	r1, #1
 8011ae4:	430a      	orrs	r2, r1
 8011ae6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011ae8:	f7fa fa0e 	bl	800bf08 <HAL_GetTick>
 8011aec:	0003      	movs	r3, r0
 8011aee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011af0:	e008      	b.n	8011b04 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011af2:	f7fa fa09 	bl	800bf08 <HAL_GetTick>
 8011af6:	0002      	movs	r2, r0
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	1ad3      	subs	r3, r2, r3
 8011afc:	2b02      	cmp	r3, #2
 8011afe:	d901      	bls.n	8011b04 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8011b00:	2303      	movs	r3, #3
 8011b02:	e1c8      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011b04:	4ba1      	ldr	r3, [pc, #644]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b08:	2202      	movs	r2, #2
 8011b0a:	4013      	ands	r3, r2
 8011b0c:	d0f1      	beq.n	8011af2 <HAL_RCC_OscConfig+0x3ee>
 8011b0e:	e018      	b.n	8011b42 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011b10:	4b9e      	ldr	r3, [pc, #632]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011b12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b14:	4b9d      	ldr	r3, [pc, #628]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011b16:	2101      	movs	r1, #1
 8011b18:	438a      	bics	r2, r1
 8011b1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b1c:	f7fa f9f4 	bl	800bf08 <HAL_GetTick>
 8011b20:	0003      	movs	r3, r0
 8011b22:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011b24:	e008      	b.n	8011b38 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011b26:	f7fa f9ef 	bl	800bf08 <HAL_GetTick>
 8011b2a:	0002      	movs	r2, r0
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	2b02      	cmp	r3, #2
 8011b32:	d901      	bls.n	8011b38 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8011b34:	2303      	movs	r3, #3
 8011b36:	e1ae      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011b38:	4b94      	ldr	r3, [pc, #592]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b3c:	2202      	movs	r2, #2
 8011b3e:	4013      	ands	r3, r2
 8011b40:	d1f1      	bne.n	8011b26 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2204      	movs	r2, #4
 8011b48:	4013      	ands	r3, r2
 8011b4a:	d100      	bne.n	8011b4e <HAL_RCC_OscConfig+0x44a>
 8011b4c:	e0ae      	b.n	8011cac <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011b4e:	2023      	movs	r0, #35	@ 0x23
 8011b50:	183b      	adds	r3, r7, r0
 8011b52:	2200      	movs	r2, #0
 8011b54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011b56:	4b8d      	ldr	r3, [pc, #564]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b5a:	2380      	movs	r3, #128	@ 0x80
 8011b5c:	055b      	lsls	r3, r3, #21
 8011b5e:	4013      	ands	r3, r2
 8011b60:	d109      	bne.n	8011b76 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011b62:	4b8a      	ldr	r3, [pc, #552]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011b66:	4b89      	ldr	r3, [pc, #548]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011b68:	2180      	movs	r1, #128	@ 0x80
 8011b6a:	0549      	lsls	r1, r1, #21
 8011b6c:	430a      	orrs	r2, r1
 8011b6e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8011b70:	183b      	adds	r3, r7, r0
 8011b72:	2201      	movs	r2, #1
 8011b74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011b76:	4b88      	ldr	r3, [pc, #544]	@ (8011d98 <HAL_RCC_OscConfig+0x694>)
 8011b78:	681a      	ldr	r2, [r3, #0]
 8011b7a:	2380      	movs	r3, #128	@ 0x80
 8011b7c:	005b      	lsls	r3, r3, #1
 8011b7e:	4013      	ands	r3, r2
 8011b80:	d11a      	bne.n	8011bb8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011b82:	4b85      	ldr	r3, [pc, #532]	@ (8011d98 <HAL_RCC_OscConfig+0x694>)
 8011b84:	681a      	ldr	r2, [r3, #0]
 8011b86:	4b84      	ldr	r3, [pc, #528]	@ (8011d98 <HAL_RCC_OscConfig+0x694>)
 8011b88:	2180      	movs	r1, #128	@ 0x80
 8011b8a:	0049      	lsls	r1, r1, #1
 8011b8c:	430a      	orrs	r2, r1
 8011b8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011b90:	f7fa f9ba 	bl	800bf08 <HAL_GetTick>
 8011b94:	0003      	movs	r3, r0
 8011b96:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011b98:	e008      	b.n	8011bac <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011b9a:	f7fa f9b5 	bl	800bf08 <HAL_GetTick>
 8011b9e:	0002      	movs	r2, r0
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	1ad3      	subs	r3, r2, r3
 8011ba4:	2b64      	cmp	r3, #100	@ 0x64
 8011ba6:	d901      	bls.n	8011bac <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8011ba8:	2303      	movs	r3, #3
 8011baa:	e174      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011bac:	4b7a      	ldr	r3, [pc, #488]	@ (8011d98 <HAL_RCC_OscConfig+0x694>)
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	2380      	movs	r3, #128	@ 0x80
 8011bb2:	005b      	lsls	r3, r3, #1
 8011bb4:	4013      	ands	r3, r2
 8011bb6:	d0f0      	beq.n	8011b9a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	689a      	ldr	r2, [r3, #8]
 8011bbc:	2380      	movs	r3, #128	@ 0x80
 8011bbe:	005b      	lsls	r3, r3, #1
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d107      	bne.n	8011bd4 <HAL_RCC_OscConfig+0x4d0>
 8011bc4:	4b71      	ldr	r3, [pc, #452]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011bc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bc8:	4b70      	ldr	r3, [pc, #448]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011bca:	2180      	movs	r1, #128	@ 0x80
 8011bcc:	0049      	lsls	r1, r1, #1
 8011bce:	430a      	orrs	r2, r1
 8011bd0:	651a      	str	r2, [r3, #80]	@ 0x50
 8011bd2:	e031      	b.n	8011c38 <HAL_RCC_OscConfig+0x534>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	689b      	ldr	r3, [r3, #8]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d10c      	bne.n	8011bf6 <HAL_RCC_OscConfig+0x4f2>
 8011bdc:	4b6b      	ldr	r3, [pc, #428]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011bde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011be0:	4b6a      	ldr	r3, [pc, #424]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011be2:	496c      	ldr	r1, [pc, #432]	@ (8011d94 <HAL_RCC_OscConfig+0x690>)
 8011be4:	400a      	ands	r2, r1
 8011be6:	651a      	str	r2, [r3, #80]	@ 0x50
 8011be8:	4b68      	ldr	r3, [pc, #416]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011bea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bec:	4b67      	ldr	r3, [pc, #412]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011bee:	496b      	ldr	r1, [pc, #428]	@ (8011d9c <HAL_RCC_OscConfig+0x698>)
 8011bf0:	400a      	ands	r2, r1
 8011bf2:	651a      	str	r2, [r3, #80]	@ 0x50
 8011bf4:	e020      	b.n	8011c38 <HAL_RCC_OscConfig+0x534>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	689a      	ldr	r2, [r3, #8]
 8011bfa:	23a0      	movs	r3, #160	@ 0xa0
 8011bfc:	00db      	lsls	r3, r3, #3
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d10e      	bne.n	8011c20 <HAL_RCC_OscConfig+0x51c>
 8011c02:	4b62      	ldr	r3, [pc, #392]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c06:	4b61      	ldr	r3, [pc, #388]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c08:	2180      	movs	r1, #128	@ 0x80
 8011c0a:	00c9      	lsls	r1, r1, #3
 8011c0c:	430a      	orrs	r2, r1
 8011c0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011c10:	4b5e      	ldr	r3, [pc, #376]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c14:	4b5d      	ldr	r3, [pc, #372]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c16:	2180      	movs	r1, #128	@ 0x80
 8011c18:	0049      	lsls	r1, r1, #1
 8011c1a:	430a      	orrs	r2, r1
 8011c1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8011c1e:	e00b      	b.n	8011c38 <HAL_RCC_OscConfig+0x534>
 8011c20:	4b5a      	ldr	r3, [pc, #360]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c24:	4b59      	ldr	r3, [pc, #356]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c26:	495b      	ldr	r1, [pc, #364]	@ (8011d94 <HAL_RCC_OscConfig+0x690>)
 8011c28:	400a      	ands	r2, r1
 8011c2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8011c2c:	4b57      	ldr	r3, [pc, #348]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c30:	4b56      	ldr	r3, [pc, #344]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c32:	495a      	ldr	r1, [pc, #360]	@ (8011d9c <HAL_RCC_OscConfig+0x698>)
 8011c34:	400a      	ands	r2, r1
 8011c36:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	689b      	ldr	r3, [r3, #8]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d015      	beq.n	8011c6c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011c40:	f7fa f962 	bl	800bf08 <HAL_GetTick>
 8011c44:	0003      	movs	r3, r0
 8011c46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011c48:	e009      	b.n	8011c5e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c4a:	f7fa f95d 	bl	800bf08 <HAL_GetTick>
 8011c4e:	0002      	movs	r2, r0
 8011c50:	697b      	ldr	r3, [r7, #20]
 8011c52:	1ad3      	subs	r3, r2, r3
 8011c54:	4a52      	ldr	r2, [pc, #328]	@ (8011da0 <HAL_RCC_OscConfig+0x69c>)
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d901      	bls.n	8011c5e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8011c5a:	2303      	movs	r3, #3
 8011c5c:	e11b      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c62:	2380      	movs	r3, #128	@ 0x80
 8011c64:	009b      	lsls	r3, r3, #2
 8011c66:	4013      	ands	r3, r2
 8011c68:	d0ef      	beq.n	8011c4a <HAL_RCC_OscConfig+0x546>
 8011c6a:	e014      	b.n	8011c96 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011c6c:	f7fa f94c 	bl	800bf08 <HAL_GetTick>
 8011c70:	0003      	movs	r3, r0
 8011c72:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011c74:	e009      	b.n	8011c8a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011c76:	f7fa f947 	bl	800bf08 <HAL_GetTick>
 8011c7a:	0002      	movs	r2, r0
 8011c7c:	697b      	ldr	r3, [r7, #20]
 8011c7e:	1ad3      	subs	r3, r2, r3
 8011c80:	4a47      	ldr	r2, [pc, #284]	@ (8011da0 <HAL_RCC_OscConfig+0x69c>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d901      	bls.n	8011c8a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8011c86:	2303      	movs	r3, #3
 8011c88:	e105      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011c8a:	4b40      	ldr	r3, [pc, #256]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011c8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011c8e:	2380      	movs	r3, #128	@ 0x80
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	4013      	ands	r3, r2
 8011c94:	d1ef      	bne.n	8011c76 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011c96:	2323      	movs	r3, #35	@ 0x23
 8011c98:	18fb      	adds	r3, r7, r3
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d105      	bne.n	8011cac <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011ca0:	4b3a      	ldr	r3, [pc, #232]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ca4:	4b39      	ldr	r3, [pc, #228]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011ca6:	493f      	ldr	r1, [pc, #252]	@ (8011da4 <HAL_RCC_OscConfig+0x6a0>)
 8011ca8:	400a      	ands	r2, r1
 8011caa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2220      	movs	r2, #32
 8011cb2:	4013      	ands	r3, r2
 8011cb4:	d049      	beq.n	8011d4a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d026      	beq.n	8011d0c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011cbe:	4b33      	ldr	r3, [pc, #204]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011cc0:	689a      	ldr	r2, [r3, #8]
 8011cc2:	4b32      	ldr	r3, [pc, #200]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011cc4:	2101      	movs	r1, #1
 8011cc6:	430a      	orrs	r2, r1
 8011cc8:	609a      	str	r2, [r3, #8]
 8011cca:	4b30      	ldr	r3, [pc, #192]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011cce:	4b2f      	ldr	r3, [pc, #188]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011cd0:	2101      	movs	r1, #1
 8011cd2:	430a      	orrs	r2, r1
 8011cd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8011cd6:	4b34      	ldr	r3, [pc, #208]	@ (8011da8 <HAL_RCC_OscConfig+0x6a4>)
 8011cd8:	6a1a      	ldr	r2, [r3, #32]
 8011cda:	4b33      	ldr	r3, [pc, #204]	@ (8011da8 <HAL_RCC_OscConfig+0x6a4>)
 8011cdc:	2180      	movs	r1, #128	@ 0x80
 8011cde:	0189      	lsls	r1, r1, #6
 8011ce0:	430a      	orrs	r2, r1
 8011ce2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011ce4:	f7fa f910 	bl	800bf08 <HAL_GetTick>
 8011ce8:	0003      	movs	r3, r0
 8011cea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011cec:	e008      	b.n	8011d00 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011cee:	f7fa f90b 	bl	800bf08 <HAL_GetTick>
 8011cf2:	0002      	movs	r2, r0
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	1ad3      	subs	r3, r2, r3
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d901      	bls.n	8011d00 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8011cfc:	2303      	movs	r3, #3
 8011cfe:	e0ca      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011d00:	4b22      	ldr	r3, [pc, #136]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011d02:	689b      	ldr	r3, [r3, #8]
 8011d04:	2202      	movs	r2, #2
 8011d06:	4013      	ands	r3, r2
 8011d08:	d0f1      	beq.n	8011cee <HAL_RCC_OscConfig+0x5ea>
 8011d0a:	e01e      	b.n	8011d4a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8011d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011d0e:	689a      	ldr	r2, [r3, #8]
 8011d10:	4b1e      	ldr	r3, [pc, #120]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011d12:	2101      	movs	r1, #1
 8011d14:	438a      	bics	r2, r1
 8011d16:	609a      	str	r2, [r3, #8]
 8011d18:	4b23      	ldr	r3, [pc, #140]	@ (8011da8 <HAL_RCC_OscConfig+0x6a4>)
 8011d1a:	6a1a      	ldr	r2, [r3, #32]
 8011d1c:	4b22      	ldr	r3, [pc, #136]	@ (8011da8 <HAL_RCC_OscConfig+0x6a4>)
 8011d1e:	4923      	ldr	r1, [pc, #140]	@ (8011dac <HAL_RCC_OscConfig+0x6a8>)
 8011d20:	400a      	ands	r2, r1
 8011d22:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d24:	f7fa f8f0 	bl	800bf08 <HAL_GetTick>
 8011d28:	0003      	movs	r3, r0
 8011d2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011d2c:	e008      	b.n	8011d40 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011d2e:	f7fa f8eb 	bl	800bf08 <HAL_GetTick>
 8011d32:	0002      	movs	r2, r0
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	1ad3      	subs	r3, r2, r3
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d901      	bls.n	8011d40 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8011d3c:	2303      	movs	r3, #3
 8011d3e:	e0aa      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011d40:	4b12      	ldr	r3, [pc, #72]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011d42:	689b      	ldr	r3, [r3, #8]
 8011d44:	2202      	movs	r2, #2
 8011d46:	4013      	ands	r3, r2
 8011d48:	d1f1      	bne.n	8011d2e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d100      	bne.n	8011d54 <HAL_RCC_OscConfig+0x650>
 8011d52:	e09f      	b.n	8011e94 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	2b0c      	cmp	r3, #12
 8011d58:	d100      	bne.n	8011d5c <HAL_RCC_OscConfig+0x658>
 8011d5a:	e078      	b.n	8011e4e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d60:	2b02      	cmp	r3, #2
 8011d62:	d159      	bne.n	8011e18 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d64:	4b09      	ldr	r3, [pc, #36]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	4b08      	ldr	r3, [pc, #32]	@ (8011d8c <HAL_RCC_OscConfig+0x688>)
 8011d6a:	4911      	ldr	r1, [pc, #68]	@ (8011db0 <HAL_RCC_OscConfig+0x6ac>)
 8011d6c:	400a      	ands	r2, r1
 8011d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d70:	f7fa f8ca 	bl	800bf08 <HAL_GetTick>
 8011d74:	0003      	movs	r3, r0
 8011d76:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011d78:	e01c      	b.n	8011db4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d7a:	f7fa f8c5 	bl	800bf08 <HAL_GetTick>
 8011d7e:	0002      	movs	r2, r0
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d915      	bls.n	8011db4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8011d88:	2303      	movs	r3, #3
 8011d8a:	e084      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
 8011d8c:	40021000 	.word	0x40021000
 8011d90:	ffff1fff 	.word	0xffff1fff
 8011d94:	fffffeff 	.word	0xfffffeff
 8011d98:	40007000 	.word	0x40007000
 8011d9c:	fffffbff 	.word	0xfffffbff
 8011da0:	00001388 	.word	0x00001388
 8011da4:	efffffff 	.word	0xefffffff
 8011da8:	40010000 	.word	0x40010000
 8011dac:	ffffdfff 	.word	0xffffdfff
 8011db0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011db4:	4b3a      	ldr	r3, [pc, #232]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	2380      	movs	r3, #128	@ 0x80
 8011dba:	049b      	lsls	r3, r3, #18
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	d1dc      	bne.n	8011d7a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011dc0:	4b37      	ldr	r3, [pc, #220]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	4a37      	ldr	r2, [pc, #220]	@ (8011ea4 <HAL_RCC_OscConfig+0x7a0>)
 8011dc6:	4013      	ands	r3, r2
 8011dc8:	0019      	movs	r1, r3
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dd2:	431a      	orrs	r2, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011dd8:	431a      	orrs	r2, r3
 8011dda:	4b31      	ldr	r3, [pc, #196]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011ddc:	430a      	orrs	r2, r1
 8011dde:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011de0:	4b2f      	ldr	r3, [pc, #188]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	4b2e      	ldr	r3, [pc, #184]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011de6:	2180      	movs	r1, #128	@ 0x80
 8011de8:	0449      	lsls	r1, r1, #17
 8011dea:	430a      	orrs	r2, r1
 8011dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011dee:	f7fa f88b 	bl	800bf08 <HAL_GetTick>
 8011df2:	0003      	movs	r3, r0
 8011df4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011df6:	e008      	b.n	8011e0a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011df8:	f7fa f886 	bl	800bf08 <HAL_GetTick>
 8011dfc:	0002      	movs	r2, r0
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	2b02      	cmp	r3, #2
 8011e04:	d901      	bls.n	8011e0a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8011e06:	2303      	movs	r3, #3
 8011e08:	e045      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011e0a:	4b25      	ldr	r3, [pc, #148]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011e0c:	681a      	ldr	r2, [r3, #0]
 8011e0e:	2380      	movs	r3, #128	@ 0x80
 8011e10:	049b      	lsls	r3, r3, #18
 8011e12:	4013      	ands	r3, r2
 8011e14:	d0f0      	beq.n	8011df8 <HAL_RCC_OscConfig+0x6f4>
 8011e16:	e03d      	b.n	8011e94 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011e18:	4b21      	ldr	r3, [pc, #132]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	4b20      	ldr	r3, [pc, #128]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011e1e:	4922      	ldr	r1, [pc, #136]	@ (8011ea8 <HAL_RCC_OscConfig+0x7a4>)
 8011e20:	400a      	ands	r2, r1
 8011e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011e24:	f7fa f870 	bl	800bf08 <HAL_GetTick>
 8011e28:	0003      	movs	r3, r0
 8011e2a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011e2c:	e008      	b.n	8011e40 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011e2e:	f7fa f86b 	bl	800bf08 <HAL_GetTick>
 8011e32:	0002      	movs	r2, r0
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	1ad3      	subs	r3, r2, r3
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	d901      	bls.n	8011e40 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8011e3c:	2303      	movs	r3, #3
 8011e3e:	e02a      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011e40:	4b17      	ldr	r3, [pc, #92]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	2380      	movs	r3, #128	@ 0x80
 8011e46:	049b      	lsls	r3, r3, #18
 8011e48:	4013      	ands	r3, r2
 8011e4a:	d1f0      	bne.n	8011e2e <HAL_RCC_OscConfig+0x72a>
 8011e4c:	e022      	b.n	8011e94 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d101      	bne.n	8011e5a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8011e56:	2301      	movs	r3, #1
 8011e58:	e01d      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011e5a:	4b11      	ldr	r3, [pc, #68]	@ (8011ea0 <HAL_RCC_OscConfig+0x79c>)
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011e60:	69ba      	ldr	r2, [r7, #24]
 8011e62:	2380      	movs	r3, #128	@ 0x80
 8011e64:	025b      	lsls	r3, r3, #9
 8011e66:	401a      	ands	r2, r3
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d10f      	bne.n	8011e90 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011e70:	69ba      	ldr	r2, [r7, #24]
 8011e72:	23f0      	movs	r3, #240	@ 0xf0
 8011e74:	039b      	lsls	r3, r3, #14
 8011e76:	401a      	ands	r2, r3
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d107      	bne.n	8011e90 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8011e80:	69ba      	ldr	r2, [r7, #24]
 8011e82:	23c0      	movs	r3, #192	@ 0xc0
 8011e84:	041b      	lsls	r3, r3, #16
 8011e86:	401a      	ands	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d001      	beq.n	8011e94 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8011e90:	2301      	movs	r3, #1
 8011e92:	e000      	b.n	8011e96 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8011e94:	2300      	movs	r3, #0
}
 8011e96:	0018      	movs	r0, r3
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	b00a      	add	sp, #40	@ 0x28
 8011e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e9e:	46c0      	nop			@ (mov r8, r8)
 8011ea0:	40021000 	.word	0x40021000
 8011ea4:	ff02ffff 	.word	0xff02ffff
 8011ea8:	feffffff 	.word	0xfeffffff

08011eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011eac:	b5b0      	push	{r4, r5, r7, lr}
 8011eae:	b084      	sub	sp, #16
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
 8011eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d101      	bne.n	8011ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	e128      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011ec0:	4b96      	ldr	r3, [pc, #600]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	2201      	movs	r2, #1
 8011ec6:	4013      	ands	r3, r2
 8011ec8:	683a      	ldr	r2, [r7, #0]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d91e      	bls.n	8011f0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011ece:	4b93      	ldr	r3, [pc, #588]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	4393      	bics	r3, r2
 8011ed6:	0019      	movs	r1, r3
 8011ed8:	4b90      	ldr	r3, [pc, #576]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 8011eda:	683a      	ldr	r2, [r7, #0]
 8011edc:	430a      	orrs	r2, r1
 8011ede:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011ee0:	f7fa f812 	bl	800bf08 <HAL_GetTick>
 8011ee4:	0003      	movs	r3, r0
 8011ee6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011ee8:	e009      	b.n	8011efe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011eea:	f7fa f80d 	bl	800bf08 <HAL_GetTick>
 8011eee:	0002      	movs	r2, r0
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	1ad3      	subs	r3, r2, r3
 8011ef4:	4a8a      	ldr	r2, [pc, #552]	@ (8012120 <HAL_RCC_ClockConfig+0x274>)
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	d901      	bls.n	8011efe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8011efa:	2303      	movs	r3, #3
 8011efc:	e109      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011efe:	4b87      	ldr	r3, [pc, #540]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2201      	movs	r2, #1
 8011f04:	4013      	ands	r3, r2
 8011f06:	683a      	ldr	r2, [r7, #0]
 8011f08:	429a      	cmp	r2, r3
 8011f0a:	d1ee      	bne.n	8011eea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	2202      	movs	r2, #2
 8011f12:	4013      	ands	r3, r2
 8011f14:	d009      	beq.n	8011f2a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011f16:	4b83      	ldr	r3, [pc, #524]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f18:	68db      	ldr	r3, [r3, #12]
 8011f1a:	22f0      	movs	r2, #240	@ 0xf0
 8011f1c:	4393      	bics	r3, r2
 8011f1e:	0019      	movs	r1, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	689a      	ldr	r2, [r3, #8]
 8011f24:	4b7f      	ldr	r3, [pc, #508]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f26:	430a      	orrs	r2, r1
 8011f28:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2201      	movs	r2, #1
 8011f30:	4013      	ands	r3, r2
 8011f32:	d100      	bne.n	8011f36 <HAL_RCC_ClockConfig+0x8a>
 8011f34:	e089      	b.n	801204a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	2b02      	cmp	r3, #2
 8011f3c:	d107      	bne.n	8011f4e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011f3e:	4b79      	ldr	r3, [pc, #484]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	2380      	movs	r3, #128	@ 0x80
 8011f44:	029b      	lsls	r3, r3, #10
 8011f46:	4013      	ands	r3, r2
 8011f48:	d120      	bne.n	8011f8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	e0e1      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	685b      	ldr	r3, [r3, #4]
 8011f52:	2b03      	cmp	r3, #3
 8011f54:	d107      	bne.n	8011f66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011f56:	4b73      	ldr	r3, [pc, #460]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	2380      	movs	r3, #128	@ 0x80
 8011f5c:	049b      	lsls	r3, r3, #18
 8011f5e:	4013      	ands	r3, r2
 8011f60:	d114      	bne.n	8011f8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011f62:	2301      	movs	r3, #1
 8011f64:	e0d5      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	2b01      	cmp	r3, #1
 8011f6c:	d106      	bne.n	8011f7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011f6e:	4b6d      	ldr	r3, [pc, #436]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2204      	movs	r2, #4
 8011f74:	4013      	ands	r3, r2
 8011f76:	d109      	bne.n	8011f8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011f78:	2301      	movs	r3, #1
 8011f7a:	e0ca      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011f7c:	4b69      	ldr	r3, [pc, #420]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	2380      	movs	r3, #128	@ 0x80
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	4013      	ands	r3, r2
 8011f86:	d101      	bne.n	8011f8c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	e0c2      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011f8c:	4b65      	ldr	r3, [pc, #404]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	2203      	movs	r2, #3
 8011f92:	4393      	bics	r3, r2
 8011f94:	0019      	movs	r1, r3
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	685a      	ldr	r2, [r3, #4]
 8011f9a:	4b62      	ldr	r3, [pc, #392]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011f9c:	430a      	orrs	r2, r1
 8011f9e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011fa0:	f7f9 ffb2 	bl	800bf08 <HAL_GetTick>
 8011fa4:	0003      	movs	r3, r0
 8011fa6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	2b02      	cmp	r3, #2
 8011fae:	d111      	bne.n	8011fd4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011fb0:	e009      	b.n	8011fc6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fb2:	f7f9 ffa9 	bl	800bf08 <HAL_GetTick>
 8011fb6:	0002      	movs	r2, r0
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	4a58      	ldr	r2, [pc, #352]	@ (8012120 <HAL_RCC_ClockConfig+0x274>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d901      	bls.n	8011fc6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8011fc2:	2303      	movs	r3, #3
 8011fc4:	e0a5      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011fc6:	4b57      	ldr	r3, [pc, #348]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	220c      	movs	r2, #12
 8011fcc:	4013      	ands	r3, r2
 8011fce:	2b08      	cmp	r3, #8
 8011fd0:	d1ef      	bne.n	8011fb2 <HAL_RCC_ClockConfig+0x106>
 8011fd2:	e03a      	b.n	801204a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	2b03      	cmp	r3, #3
 8011fda:	d111      	bne.n	8012000 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011fdc:	e009      	b.n	8011ff2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fde:	f7f9 ff93 	bl	800bf08 <HAL_GetTick>
 8011fe2:	0002      	movs	r2, r0
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	4a4d      	ldr	r2, [pc, #308]	@ (8012120 <HAL_RCC_ClockConfig+0x274>)
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d901      	bls.n	8011ff2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8011fee:	2303      	movs	r3, #3
 8011ff0:	e08f      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	220c      	movs	r2, #12
 8011ff8:	4013      	ands	r3, r2
 8011ffa:	2b0c      	cmp	r3, #12
 8011ffc:	d1ef      	bne.n	8011fde <HAL_RCC_ClockConfig+0x132>
 8011ffe:	e024      	b.n	801204a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	2b01      	cmp	r3, #1
 8012006:	d11b      	bne.n	8012040 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012008:	e009      	b.n	801201e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801200a:	f7f9 ff7d 	bl	800bf08 <HAL_GetTick>
 801200e:	0002      	movs	r2, r0
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	1ad3      	subs	r3, r2, r3
 8012014:	4a42      	ldr	r2, [pc, #264]	@ (8012120 <HAL_RCC_ClockConfig+0x274>)
 8012016:	4293      	cmp	r3, r2
 8012018:	d901      	bls.n	801201e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 801201a:	2303      	movs	r3, #3
 801201c:	e079      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801201e:	4b41      	ldr	r3, [pc, #260]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8012020:	68db      	ldr	r3, [r3, #12]
 8012022:	220c      	movs	r2, #12
 8012024:	4013      	ands	r3, r2
 8012026:	2b04      	cmp	r3, #4
 8012028:	d1ef      	bne.n	801200a <HAL_RCC_ClockConfig+0x15e>
 801202a:	e00e      	b.n	801204a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801202c:	f7f9 ff6c 	bl	800bf08 <HAL_GetTick>
 8012030:	0002      	movs	r2, r0
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	1ad3      	subs	r3, r2, r3
 8012036:	4a3a      	ldr	r2, [pc, #232]	@ (8012120 <HAL_RCC_ClockConfig+0x274>)
 8012038:	4293      	cmp	r3, r2
 801203a:	d901      	bls.n	8012040 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 801203c:	2303      	movs	r3, #3
 801203e:	e068      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8012040:	4b38      	ldr	r3, [pc, #224]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	220c      	movs	r2, #12
 8012046:	4013      	ands	r3, r2
 8012048:	d1f0      	bne.n	801202c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801204a:	4b34      	ldr	r3, [pc, #208]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2201      	movs	r2, #1
 8012050:	4013      	ands	r3, r2
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	429a      	cmp	r2, r3
 8012056:	d21e      	bcs.n	8012096 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012058:	4b30      	ldr	r3, [pc, #192]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2201      	movs	r2, #1
 801205e:	4393      	bics	r3, r2
 8012060:	0019      	movs	r1, r3
 8012062:	4b2e      	ldr	r3, [pc, #184]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 8012064:	683a      	ldr	r2, [r7, #0]
 8012066:	430a      	orrs	r2, r1
 8012068:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801206a:	f7f9 ff4d 	bl	800bf08 <HAL_GetTick>
 801206e:	0003      	movs	r3, r0
 8012070:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012072:	e009      	b.n	8012088 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012074:	f7f9 ff48 	bl	800bf08 <HAL_GetTick>
 8012078:	0002      	movs	r2, r0
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	4a28      	ldr	r2, [pc, #160]	@ (8012120 <HAL_RCC_ClockConfig+0x274>)
 8012080:	4293      	cmp	r3, r2
 8012082:	d901      	bls.n	8012088 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8012084:	2303      	movs	r3, #3
 8012086:	e044      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8012088:	4b24      	ldr	r3, [pc, #144]	@ (801211c <HAL_RCC_ClockConfig+0x270>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2201      	movs	r2, #1
 801208e:	4013      	ands	r3, r2
 8012090:	683a      	ldr	r2, [r7, #0]
 8012092:	429a      	cmp	r2, r3
 8012094:	d1ee      	bne.n	8012074 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2204      	movs	r2, #4
 801209c:	4013      	ands	r3, r2
 801209e:	d009      	beq.n	80120b4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80120a0:	4b20      	ldr	r3, [pc, #128]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	4a20      	ldr	r2, [pc, #128]	@ (8012128 <HAL_RCC_ClockConfig+0x27c>)
 80120a6:	4013      	ands	r3, r2
 80120a8:	0019      	movs	r1, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	68da      	ldr	r2, [r3, #12]
 80120ae:	4b1d      	ldr	r3, [pc, #116]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 80120b0:	430a      	orrs	r2, r1
 80120b2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2208      	movs	r2, #8
 80120ba:	4013      	ands	r3, r2
 80120bc:	d00a      	beq.n	80120d4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80120be:	4b19      	ldr	r3, [pc, #100]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	4a1a      	ldr	r2, [pc, #104]	@ (801212c <HAL_RCC_ClockConfig+0x280>)
 80120c4:	4013      	ands	r3, r2
 80120c6:	0019      	movs	r1, r3
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	00da      	lsls	r2, r3, #3
 80120ce:	4b15      	ldr	r3, [pc, #84]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 80120d0:	430a      	orrs	r2, r1
 80120d2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80120d4:	f000 f832 	bl	801213c <HAL_RCC_GetSysClockFreq>
 80120d8:	0001      	movs	r1, r0
 80120da:	4b12      	ldr	r3, [pc, #72]	@ (8012124 <HAL_RCC_ClockConfig+0x278>)
 80120dc:	68db      	ldr	r3, [r3, #12]
 80120de:	091b      	lsrs	r3, r3, #4
 80120e0:	220f      	movs	r2, #15
 80120e2:	4013      	ands	r3, r2
 80120e4:	4a12      	ldr	r2, [pc, #72]	@ (8012130 <HAL_RCC_ClockConfig+0x284>)
 80120e6:	5cd3      	ldrb	r3, [r2, r3]
 80120e8:	000a      	movs	r2, r1
 80120ea:	40da      	lsrs	r2, r3
 80120ec:	4b11      	ldr	r3, [pc, #68]	@ (8012134 <HAL_RCC_ClockConfig+0x288>)
 80120ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80120f0:	4b11      	ldr	r3, [pc, #68]	@ (8012138 <HAL_RCC_ClockConfig+0x28c>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	250b      	movs	r5, #11
 80120f6:	197c      	adds	r4, r7, r5
 80120f8:	0018      	movs	r0, r3
 80120fa:	f7f9 febf 	bl	800be7c <HAL_InitTick>
 80120fe:	0003      	movs	r3, r0
 8012100:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8012102:	197b      	adds	r3, r7, r5
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d002      	beq.n	8012110 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 801210a:	197b      	adds	r3, r7, r5
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	e000      	b.n	8012112 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8012110:	2300      	movs	r3, #0
}
 8012112:	0018      	movs	r0, r3
 8012114:	46bd      	mov	sp, r7
 8012116:	b004      	add	sp, #16
 8012118:	bdb0      	pop	{r4, r5, r7, pc}
 801211a:	46c0      	nop			@ (mov r8, r8)
 801211c:	40022000 	.word	0x40022000
 8012120:	00001388 	.word	0x00001388
 8012124:	40021000 	.word	0x40021000
 8012128:	fffff8ff 	.word	0xfffff8ff
 801212c:	ffffc7ff 	.word	0xffffc7ff
 8012130:	08020b48 	.word	0x08020b48
 8012134:	200000c4 	.word	0x200000c4
 8012138:	200000d4 	.word	0x200000d4

0801213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801213c:	b5b0      	push	{r4, r5, r7, lr}
 801213e:	b08e      	sub	sp, #56	@ 0x38
 8012140:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8012142:	4b4c      	ldr	r3, [pc, #304]	@ (8012274 <HAL_RCC_GetSysClockFreq+0x138>)
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801214a:	230c      	movs	r3, #12
 801214c:	4013      	ands	r3, r2
 801214e:	2b0c      	cmp	r3, #12
 8012150:	d014      	beq.n	801217c <HAL_RCC_GetSysClockFreq+0x40>
 8012152:	d900      	bls.n	8012156 <HAL_RCC_GetSysClockFreq+0x1a>
 8012154:	e07b      	b.n	801224e <HAL_RCC_GetSysClockFreq+0x112>
 8012156:	2b04      	cmp	r3, #4
 8012158:	d002      	beq.n	8012160 <HAL_RCC_GetSysClockFreq+0x24>
 801215a:	2b08      	cmp	r3, #8
 801215c:	d00b      	beq.n	8012176 <HAL_RCC_GetSysClockFreq+0x3a>
 801215e:	e076      	b.n	801224e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8012160:	4b44      	ldr	r3, [pc, #272]	@ (8012274 <HAL_RCC_GetSysClockFreq+0x138>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2210      	movs	r2, #16
 8012166:	4013      	ands	r3, r2
 8012168:	d002      	beq.n	8012170 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801216a:	4b43      	ldr	r3, [pc, #268]	@ (8012278 <HAL_RCC_GetSysClockFreq+0x13c>)
 801216c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801216e:	e07c      	b.n	801226a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8012170:	4b42      	ldr	r3, [pc, #264]	@ (801227c <HAL_RCC_GetSysClockFreq+0x140>)
 8012172:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012174:	e079      	b.n	801226a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012176:	4b42      	ldr	r3, [pc, #264]	@ (8012280 <HAL_RCC_GetSysClockFreq+0x144>)
 8012178:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801217a:	e076      	b.n	801226a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801217c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801217e:	0c9a      	lsrs	r2, r3, #18
 8012180:	230f      	movs	r3, #15
 8012182:	401a      	ands	r2, r3
 8012184:	4b3f      	ldr	r3, [pc, #252]	@ (8012284 <HAL_RCC_GetSysClockFreq+0x148>)
 8012186:	5c9b      	ldrb	r3, [r3, r2]
 8012188:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801218a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801218c:	0d9a      	lsrs	r2, r3, #22
 801218e:	2303      	movs	r3, #3
 8012190:	4013      	ands	r3, r2
 8012192:	3301      	adds	r3, #1
 8012194:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8012196:	4b37      	ldr	r3, [pc, #220]	@ (8012274 <HAL_RCC_GetSysClockFreq+0x138>)
 8012198:	68da      	ldr	r2, [r3, #12]
 801219a:	2380      	movs	r3, #128	@ 0x80
 801219c:	025b      	lsls	r3, r3, #9
 801219e:	4013      	ands	r3, r2
 80121a0:	d01a      	beq.n	80121d8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80121a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a4:	61bb      	str	r3, [r7, #24]
 80121a6:	2300      	movs	r3, #0
 80121a8:	61fb      	str	r3, [r7, #28]
 80121aa:	4a35      	ldr	r2, [pc, #212]	@ (8012280 <HAL_RCC_GetSysClockFreq+0x144>)
 80121ac:	2300      	movs	r3, #0
 80121ae:	69b8      	ldr	r0, [r7, #24]
 80121b0:	69f9      	ldr	r1, [r7, #28]
 80121b2:	f7ee fa05 	bl	80005c0 <__aeabi_lmul>
 80121b6:	0002      	movs	r2, r0
 80121b8:	000b      	movs	r3, r1
 80121ba:	0010      	movs	r0, r2
 80121bc:	0019      	movs	r1, r3
 80121be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c0:	613b      	str	r3, [r7, #16]
 80121c2:	2300      	movs	r3, #0
 80121c4:	617b      	str	r3, [r7, #20]
 80121c6:	693a      	ldr	r2, [r7, #16]
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	f7ee f9d9 	bl	8000580 <__aeabi_uldivmod>
 80121ce:	0002      	movs	r2, r0
 80121d0:	000b      	movs	r3, r1
 80121d2:	0013      	movs	r3, r2
 80121d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80121d6:	e037      	b.n	8012248 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80121d8:	4b26      	ldr	r3, [pc, #152]	@ (8012274 <HAL_RCC_GetSysClockFreq+0x138>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	2210      	movs	r2, #16
 80121de:	4013      	ands	r3, r2
 80121e0:	d01a      	beq.n	8012218 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80121e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e4:	60bb      	str	r3, [r7, #8]
 80121e6:	2300      	movs	r3, #0
 80121e8:	60fb      	str	r3, [r7, #12]
 80121ea:	4a23      	ldr	r2, [pc, #140]	@ (8012278 <HAL_RCC_GetSysClockFreq+0x13c>)
 80121ec:	2300      	movs	r3, #0
 80121ee:	68b8      	ldr	r0, [r7, #8]
 80121f0:	68f9      	ldr	r1, [r7, #12]
 80121f2:	f7ee f9e5 	bl	80005c0 <__aeabi_lmul>
 80121f6:	0002      	movs	r2, r0
 80121f8:	000b      	movs	r3, r1
 80121fa:	0010      	movs	r0, r2
 80121fc:	0019      	movs	r1, r3
 80121fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012200:	603b      	str	r3, [r7, #0]
 8012202:	2300      	movs	r3, #0
 8012204:	607b      	str	r3, [r7, #4]
 8012206:	683a      	ldr	r2, [r7, #0]
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f7ee f9b9 	bl	8000580 <__aeabi_uldivmod>
 801220e:	0002      	movs	r2, r0
 8012210:	000b      	movs	r3, r1
 8012212:	0013      	movs	r3, r2
 8012214:	637b      	str	r3, [r7, #52]	@ 0x34
 8012216:	e017      	b.n	8012248 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8012218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221a:	0018      	movs	r0, r3
 801221c:	2300      	movs	r3, #0
 801221e:	0019      	movs	r1, r3
 8012220:	4a16      	ldr	r2, [pc, #88]	@ (801227c <HAL_RCC_GetSysClockFreq+0x140>)
 8012222:	2300      	movs	r3, #0
 8012224:	f7ee f9cc 	bl	80005c0 <__aeabi_lmul>
 8012228:	0002      	movs	r2, r0
 801222a:	000b      	movs	r3, r1
 801222c:	0010      	movs	r0, r2
 801222e:	0019      	movs	r1, r3
 8012230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012232:	001c      	movs	r4, r3
 8012234:	2300      	movs	r3, #0
 8012236:	001d      	movs	r5, r3
 8012238:	0022      	movs	r2, r4
 801223a:	002b      	movs	r3, r5
 801223c:	f7ee f9a0 	bl	8000580 <__aeabi_uldivmod>
 8012240:	0002      	movs	r2, r0
 8012242:	000b      	movs	r3, r1
 8012244:	0013      	movs	r3, r2
 8012246:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8012248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801224a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801224c:	e00d      	b.n	801226a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801224e:	4b09      	ldr	r3, [pc, #36]	@ (8012274 <HAL_RCC_GetSysClockFreq+0x138>)
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	0b5b      	lsrs	r3, r3, #13
 8012254:	2207      	movs	r2, #7
 8012256:	4013      	ands	r3, r2
 8012258:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	3301      	adds	r3, #1
 801225e:	2280      	movs	r2, #128	@ 0x80
 8012260:	0212      	lsls	r2, r2, #8
 8012262:	409a      	lsls	r2, r3
 8012264:	0013      	movs	r3, r2
 8012266:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012268:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801226c:	0018      	movs	r0, r3
 801226e:	46bd      	mov	sp, r7
 8012270:	b00e      	add	sp, #56	@ 0x38
 8012272:	bdb0      	pop	{r4, r5, r7, pc}
 8012274:	40021000 	.word	0x40021000
 8012278:	003d0900 	.word	0x003d0900
 801227c:	00f42400 	.word	0x00f42400
 8012280:	007a1200 	.word	0x007a1200
 8012284:	08020b60 	.word	0x08020b60

08012288 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801228c:	4b02      	ldr	r3, [pc, #8]	@ (8012298 <HAL_RCC_GetHCLKFreq+0x10>)
 801228e:	681b      	ldr	r3, [r3, #0]
}
 8012290:	0018      	movs	r0, r3
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	46c0      	nop			@ (mov r8, r8)
 8012298:	200000c4 	.word	0x200000c4

0801229c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80122a0:	f7ff fff2 	bl	8012288 <HAL_RCC_GetHCLKFreq>
 80122a4:	0001      	movs	r1, r0
 80122a6:	4b06      	ldr	r3, [pc, #24]	@ (80122c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	0a1b      	lsrs	r3, r3, #8
 80122ac:	2207      	movs	r2, #7
 80122ae:	4013      	ands	r3, r2
 80122b0:	4a04      	ldr	r2, [pc, #16]	@ (80122c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80122b2:	5cd3      	ldrb	r3, [r2, r3]
 80122b4:	40d9      	lsrs	r1, r3
 80122b6:	000b      	movs	r3, r1
}
 80122b8:	0018      	movs	r0, r3
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	46c0      	nop			@ (mov r8, r8)
 80122c0:	40021000 	.word	0x40021000
 80122c4:	08020b58 	.word	0x08020b58

080122c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80122cc:	f7ff ffdc 	bl	8012288 <HAL_RCC_GetHCLKFreq>
 80122d0:	0001      	movs	r1, r0
 80122d2:	4b06      	ldr	r3, [pc, #24]	@ (80122ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80122d4:	68db      	ldr	r3, [r3, #12]
 80122d6:	0adb      	lsrs	r3, r3, #11
 80122d8:	2207      	movs	r2, #7
 80122da:	4013      	ands	r3, r2
 80122dc:	4a04      	ldr	r2, [pc, #16]	@ (80122f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80122de:	5cd3      	ldrb	r3, [r2, r3]
 80122e0:	40d9      	lsrs	r1, r3
 80122e2:	000b      	movs	r3, r1
}
 80122e4:	0018      	movs	r0, r3
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	46c0      	nop			@ (mov r8, r8)
 80122ec:	40021000 	.word	0x40021000
 80122f0:	08020b58 	.word	0x08020b58

080122f4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b086      	sub	sp, #24
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80122fc:	2017      	movs	r0, #23
 80122fe:	183b      	adds	r3, r7, r0
 8012300:	2200      	movs	r2, #0
 8012302:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	2220      	movs	r2, #32
 801230a:	4013      	ands	r3, r2
 801230c:	d100      	bne.n	8012310 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801230e:	e0c7      	b.n	80124a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012310:	4b9b      	ldr	r3, [pc, #620]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012314:	2380      	movs	r3, #128	@ 0x80
 8012316:	055b      	lsls	r3, r3, #21
 8012318:	4013      	ands	r3, r2
 801231a:	d109      	bne.n	8012330 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801231c:	4b98      	ldr	r3, [pc, #608]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801231e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012320:	4b97      	ldr	r3, [pc, #604]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012322:	2180      	movs	r1, #128	@ 0x80
 8012324:	0549      	lsls	r1, r1, #21
 8012326:	430a      	orrs	r2, r1
 8012328:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 801232a:	183b      	adds	r3, r7, r0
 801232c:	2201      	movs	r2, #1
 801232e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012330:	4b94      	ldr	r3, [pc, #592]	@ (8012584 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012332:	681a      	ldr	r2, [r3, #0]
 8012334:	2380      	movs	r3, #128	@ 0x80
 8012336:	005b      	lsls	r3, r3, #1
 8012338:	4013      	ands	r3, r2
 801233a:	d11a      	bne.n	8012372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801233c:	4b91      	ldr	r3, [pc, #580]	@ (8012584 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	4b90      	ldr	r3, [pc, #576]	@ (8012584 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012342:	2180      	movs	r1, #128	@ 0x80
 8012344:	0049      	lsls	r1, r1, #1
 8012346:	430a      	orrs	r2, r1
 8012348:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801234a:	f7f9 fddd 	bl	800bf08 <HAL_GetTick>
 801234e:	0003      	movs	r3, r0
 8012350:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012352:	e008      	b.n	8012366 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012354:	f7f9 fdd8 	bl	800bf08 <HAL_GetTick>
 8012358:	0002      	movs	r2, r0
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	1ad3      	subs	r3, r2, r3
 801235e:	2b64      	cmp	r3, #100	@ 0x64
 8012360:	d901      	bls.n	8012366 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8012362:	2303      	movs	r3, #3
 8012364:	e107      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012366:	4b87      	ldr	r3, [pc, #540]	@ (8012584 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	2380      	movs	r3, #128	@ 0x80
 801236c:	005b      	lsls	r3, r3, #1
 801236e:	4013      	ands	r3, r2
 8012370:	d0f0      	beq.n	8012354 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8012372:	4b83      	ldr	r3, [pc, #524]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012374:	681a      	ldr	r2, [r3, #0]
 8012376:	23c0      	movs	r3, #192	@ 0xc0
 8012378:	039b      	lsls	r3, r3, #14
 801237a:	4013      	ands	r3, r2
 801237c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685a      	ldr	r2, [r3, #4]
 8012382:	23c0      	movs	r3, #192	@ 0xc0
 8012384:	039b      	lsls	r3, r3, #14
 8012386:	4013      	ands	r3, r2
 8012388:	68fa      	ldr	r2, [r7, #12]
 801238a:	429a      	cmp	r2, r3
 801238c:	d013      	beq.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	685a      	ldr	r2, [r3, #4]
 8012392:	23c0      	movs	r3, #192	@ 0xc0
 8012394:	029b      	lsls	r3, r3, #10
 8012396:	401a      	ands	r2, r3
 8012398:	23c0      	movs	r3, #192	@ 0xc0
 801239a:	029b      	lsls	r3, r3, #10
 801239c:	429a      	cmp	r2, r3
 801239e:	d10a      	bne.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80123a0:	4b77      	ldr	r3, [pc, #476]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	2380      	movs	r3, #128	@ 0x80
 80123a6:	029b      	lsls	r3, r3, #10
 80123a8:	401a      	ands	r2, r3
 80123aa:	2380      	movs	r3, #128	@ 0x80
 80123ac:	029b      	lsls	r3, r3, #10
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d101      	bne.n	80123b6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80123b2:	2301      	movs	r3, #1
 80123b4:	e0df      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80123b6:	4b72      	ldr	r3, [pc, #456]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80123ba:	23c0      	movs	r3, #192	@ 0xc0
 80123bc:	029b      	lsls	r3, r3, #10
 80123be:	4013      	ands	r3, r2
 80123c0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d03b      	beq.n	8012440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	685a      	ldr	r2, [r3, #4]
 80123cc:	23c0      	movs	r3, #192	@ 0xc0
 80123ce:	029b      	lsls	r3, r3, #10
 80123d0:	4013      	ands	r3, r2
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d033      	beq.n	8012440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	2220      	movs	r2, #32
 80123de:	4013      	ands	r3, r2
 80123e0:	d02e      	beq.n	8012440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80123e2:	4b67      	ldr	r3, [pc, #412]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80123e6:	4a68      	ldr	r2, [pc, #416]	@ (8012588 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80123e8:	4013      	ands	r3, r2
 80123ea:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80123ec:	4b64      	ldr	r3, [pc, #400]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80123f0:	4b63      	ldr	r3, [pc, #396]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123f2:	2180      	movs	r1, #128	@ 0x80
 80123f4:	0309      	lsls	r1, r1, #12
 80123f6:	430a      	orrs	r2, r1
 80123f8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80123fa:	4b61      	ldr	r3, [pc, #388]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80123fe:	4b60      	ldr	r3, [pc, #384]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012400:	4962      	ldr	r1, [pc, #392]	@ (801258c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8012402:	400a      	ands	r2, r1
 8012404:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8012406:	4b5e      	ldr	r3, [pc, #376]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012408:	68fa      	ldr	r2, [r7, #12]
 801240a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 801240c:	68fa      	ldr	r2, [r7, #12]
 801240e:	2380      	movs	r3, #128	@ 0x80
 8012410:	005b      	lsls	r3, r3, #1
 8012412:	4013      	ands	r3, r2
 8012414:	d014      	beq.n	8012440 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012416:	f7f9 fd77 	bl	800bf08 <HAL_GetTick>
 801241a:	0003      	movs	r3, r0
 801241c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801241e:	e009      	b.n	8012434 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012420:	f7f9 fd72 	bl	800bf08 <HAL_GetTick>
 8012424:	0002      	movs	r2, r0
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	1ad3      	subs	r3, r2, r3
 801242a:	4a59      	ldr	r2, [pc, #356]	@ (8012590 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 801242c:	4293      	cmp	r3, r2
 801242e:	d901      	bls.n	8012434 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8012430:	2303      	movs	r3, #3
 8012432:	e0a0      	b.n	8012576 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012434:	4b52      	ldr	r3, [pc, #328]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012436:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012438:	2380      	movs	r3, #128	@ 0x80
 801243a:	009b      	lsls	r3, r3, #2
 801243c:	4013      	ands	r3, r2
 801243e:	d0ef      	beq.n	8012420 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2220      	movs	r2, #32
 8012446:	4013      	ands	r3, r2
 8012448:	d01f      	beq.n	801248a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	685a      	ldr	r2, [r3, #4]
 801244e:	23c0      	movs	r3, #192	@ 0xc0
 8012450:	029b      	lsls	r3, r3, #10
 8012452:	401a      	ands	r2, r3
 8012454:	23c0      	movs	r3, #192	@ 0xc0
 8012456:	029b      	lsls	r3, r3, #10
 8012458:	429a      	cmp	r2, r3
 801245a:	d10c      	bne.n	8012476 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801245c:	4b48      	ldr	r3, [pc, #288]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	4a4c      	ldr	r2, [pc, #304]	@ (8012594 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8012462:	4013      	ands	r3, r2
 8012464:	0019      	movs	r1, r3
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	685a      	ldr	r2, [r3, #4]
 801246a:	23c0      	movs	r3, #192	@ 0xc0
 801246c:	039b      	lsls	r3, r3, #14
 801246e:	401a      	ands	r2, r3
 8012470:	4b43      	ldr	r3, [pc, #268]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012472:	430a      	orrs	r2, r1
 8012474:	601a      	str	r2, [r3, #0]
 8012476:	4b42      	ldr	r3, [pc, #264]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012478:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	685a      	ldr	r2, [r3, #4]
 801247e:	23c0      	movs	r3, #192	@ 0xc0
 8012480:	029b      	lsls	r3, r3, #10
 8012482:	401a      	ands	r2, r3
 8012484:	4b3e      	ldr	r3, [pc, #248]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012486:	430a      	orrs	r2, r1
 8012488:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801248a:	2317      	movs	r3, #23
 801248c:	18fb      	adds	r3, r7, r3
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d105      	bne.n	80124a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012494:	4b3a      	ldr	r3, [pc, #232]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012496:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012498:	4b39      	ldr	r3, [pc, #228]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801249a:	493f      	ldr	r1, [pc, #252]	@ (8012598 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801249c:	400a      	ands	r2, r1
 801249e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2201      	movs	r2, #1
 80124a6:	4013      	ands	r3, r2
 80124a8:	d009      	beq.n	80124be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80124aa:	4b35      	ldr	r3, [pc, #212]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124ae:	2203      	movs	r2, #3
 80124b0:	4393      	bics	r3, r2
 80124b2:	0019      	movs	r1, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	689a      	ldr	r2, [r3, #8]
 80124b8:	4b31      	ldr	r3, [pc, #196]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124ba:	430a      	orrs	r2, r1
 80124bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	2202      	movs	r2, #2
 80124c4:	4013      	ands	r3, r2
 80124c6:	d009      	beq.n	80124dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80124c8:	4b2d      	ldr	r3, [pc, #180]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124cc:	220c      	movs	r2, #12
 80124ce:	4393      	bics	r3, r2
 80124d0:	0019      	movs	r1, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	68da      	ldr	r2, [r3, #12]
 80124d6:	4b2a      	ldr	r3, [pc, #168]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124d8:	430a      	orrs	r2, r1
 80124da:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	2204      	movs	r2, #4
 80124e2:	4013      	ands	r3, r2
 80124e4:	d009      	beq.n	80124fa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80124e6:	4b26      	ldr	r3, [pc, #152]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124ea:	4a2c      	ldr	r2, [pc, #176]	@ (801259c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 80124ec:	4013      	ands	r3, r2
 80124ee:	0019      	movs	r1, r3
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	691a      	ldr	r2, [r3, #16]
 80124f4:	4b22      	ldr	r3, [pc, #136]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124f6:	430a      	orrs	r2, r1
 80124f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	2208      	movs	r2, #8
 8012500:	4013      	ands	r3, r2
 8012502:	d009      	beq.n	8012518 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012504:	4b1e      	ldr	r3, [pc, #120]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012508:	4a25      	ldr	r2, [pc, #148]	@ (80125a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 801250a:	4013      	ands	r3, r2
 801250c:	0019      	movs	r1, r3
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	695a      	ldr	r2, [r3, #20]
 8012512:	4b1b      	ldr	r3, [pc, #108]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012514:	430a      	orrs	r2, r1
 8012516:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	2380      	movs	r3, #128	@ 0x80
 801251e:	005b      	lsls	r3, r3, #1
 8012520:	4013      	ands	r3, r2
 8012522:	d009      	beq.n	8012538 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012524:	4b16      	ldr	r3, [pc, #88]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012528:	4a17      	ldr	r2, [pc, #92]	@ (8012588 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 801252a:	4013      	ands	r3, r2
 801252c:	0019      	movs	r1, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	699a      	ldr	r2, [r3, #24]
 8012532:	4b13      	ldr	r3, [pc, #76]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012534:	430a      	orrs	r2, r1
 8012536:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2240      	movs	r2, #64	@ 0x40
 801253e:	4013      	ands	r3, r2
 8012540:	d009      	beq.n	8012556 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012542:	4b0f      	ldr	r3, [pc, #60]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012546:	4a17      	ldr	r2, [pc, #92]	@ (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8012548:	4013      	ands	r3, r2
 801254a:	0019      	movs	r1, r3
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	6a1a      	ldr	r2, [r3, #32]
 8012550:	4b0b      	ldr	r3, [pc, #44]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012552:	430a      	orrs	r2, r1
 8012554:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	2280      	movs	r2, #128	@ 0x80
 801255c:	4013      	ands	r3, r2
 801255e:	d009      	beq.n	8012574 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8012560:	4b07      	ldr	r3, [pc, #28]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012564:	4a10      	ldr	r2, [pc, #64]	@ (80125a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8012566:	4013      	ands	r3, r2
 8012568:	0019      	movs	r1, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	69da      	ldr	r2, [r3, #28]
 801256e:	4b04      	ldr	r3, [pc, #16]	@ (8012580 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012570:	430a      	orrs	r2, r1
 8012572:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012574:	2300      	movs	r3, #0
}
 8012576:	0018      	movs	r0, r3
 8012578:	46bd      	mov	sp, r7
 801257a:	b006      	add	sp, #24
 801257c:	bd80      	pop	{r7, pc}
 801257e:	46c0      	nop			@ (mov r8, r8)
 8012580:	40021000 	.word	0x40021000
 8012584:	40007000 	.word	0x40007000
 8012588:	fffcffff 	.word	0xfffcffff
 801258c:	fff7ffff 	.word	0xfff7ffff
 8012590:	00001388 	.word	0x00001388
 8012594:	ffcfffff 	.word	0xffcfffff
 8012598:	efffffff 	.word	0xefffffff
 801259c:	fffff3ff 	.word	0xfffff3ff
 80125a0:	ffffcfff 	.word	0xffffcfff
 80125a4:	fbffffff 	.word	0xfbffffff
 80125a8:	fff3ffff 	.word	0xfff3ffff

080125ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80125ac:	b5b0      	push	{r4, r5, r7, lr}
 80125ae:	b084      	sub	sp, #16
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80125b4:	230f      	movs	r3, #15
 80125b6:	18fb      	adds	r3, r7, r3
 80125b8:	2201      	movs	r2, #1
 80125ba:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d101      	bne.n	80125c6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80125c2:	2301      	movs	r3, #1
 80125c4:	e088      	b.n	80126d8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2221      	movs	r2, #33	@ 0x21
 80125ca:	5c9b      	ldrb	r3, [r3, r2]
 80125cc:	b2db      	uxtb	r3, r3
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d107      	bne.n	80125e2 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2220      	movs	r2, #32
 80125d6:	2100      	movs	r1, #0
 80125d8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	0018      	movs	r0, r3
 80125de:	f7f5 fda9 	bl	8008134 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2221      	movs	r2, #33	@ 0x21
 80125e6:	2102      	movs	r1, #2
 80125e8:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	2210      	movs	r2, #16
 80125f2:	4013      	ands	r3, r2
 80125f4:	2b10      	cmp	r3, #16
 80125f6:	d05f      	beq.n	80126b8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	22ca      	movs	r2, #202	@ 0xca
 80125fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	2253      	movs	r2, #83	@ 0x53
 8012606:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8012608:	250f      	movs	r5, #15
 801260a:	197c      	adds	r4, r7, r5
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	0018      	movs	r0, r3
 8012610:	f000 fa7c 	bl	8012b0c <RTC_EnterInitMode>
 8012614:	0003      	movs	r3, r0
 8012616:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8012618:	0028      	movs	r0, r5
 801261a:	183b      	adds	r3, r7, r0
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d12c      	bne.n	801267c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	689a      	ldr	r2, [r3, #8]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	492c      	ldr	r1, [pc, #176]	@ (80126e0 <HAL_RTC_Init+0x134>)
 801262e:	400a      	ands	r2, r1
 8012630:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	6899      	ldr	r1, [r3, #8]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	685a      	ldr	r2, [r3, #4]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	431a      	orrs	r2, r3
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	699b      	ldr	r3, [r3, #24]
 8012646:	431a      	orrs	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	430a      	orrs	r2, r1
 801264e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	68d2      	ldr	r2, [r2, #12]
 8012658:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	6919      	ldr	r1, [r3, #16]
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	689b      	ldr	r3, [r3, #8]
 8012664:	041a      	lsls	r2, r3, #16
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	430a      	orrs	r2, r1
 801266c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801266e:	183c      	adds	r4, r7, r0
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	0018      	movs	r0, r3
 8012674:	f000 fa8e 	bl	8012b94 <RTC_ExitInitMode>
 8012678:	0003      	movs	r3, r0
 801267a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801267c:	230f      	movs	r3, #15
 801267e:	18fb      	adds	r3, r7, r3
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d113      	bne.n	80126ae <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	2103      	movs	r1, #3
 8012692:	438a      	bics	r2, r1
 8012694:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	69da      	ldr	r2, [r3, #28]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	695b      	ldr	r3, [r3, #20]
 80126a4:	431a      	orrs	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	430a      	orrs	r2, r1
 80126ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	22ff      	movs	r2, #255	@ 0xff
 80126b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80126b6:	e003      	b.n	80126c0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80126b8:	230f      	movs	r3, #15
 80126ba:	18fb      	adds	r3, r7, r3
 80126bc:	2200      	movs	r2, #0
 80126be:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80126c0:	230f      	movs	r3, #15
 80126c2:	18fb      	adds	r3, r7, r3
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d103      	bne.n	80126d2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2221      	movs	r2, #33	@ 0x21
 80126ce:	2101      	movs	r1, #1
 80126d0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80126d2:	230f      	movs	r3, #15
 80126d4:	18fb      	adds	r3, r7, r3
 80126d6:	781b      	ldrb	r3, [r3, #0]
}
 80126d8:	0018      	movs	r0, r3
 80126da:	46bd      	mov	sp, r7
 80126dc:	b004      	add	sp, #16
 80126de:	bdb0      	pop	{r4, r5, r7, pc}
 80126e0:	ff8fffbf 	.word	0xff8fffbf

080126e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80126e4:	b5b0      	push	{r4, r5, r7, lr}
 80126e6:	b086      	sub	sp, #24
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80126f0:	2300      	movs	r3, #0
 80126f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	2220      	movs	r2, #32
 80126f8:	5c9b      	ldrb	r3, [r3, r2]
 80126fa:	2b01      	cmp	r3, #1
 80126fc:	d101      	bne.n	8012702 <HAL_RTC_SetTime+0x1e>
 80126fe:	2302      	movs	r3, #2
 8012700:	e092      	b.n	8012828 <HAL_RTC_SetTime+0x144>
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	2220      	movs	r2, #32
 8012706:	2101      	movs	r1, #1
 8012708:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2221      	movs	r2, #33	@ 0x21
 801270e:	2102      	movs	r1, #2
 8012710:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d125      	bne.n	8012764 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	689b      	ldr	r3, [r3, #8]
 801271e:	2240      	movs	r2, #64	@ 0x40
 8012720:	4013      	ands	r3, r2
 8012722:	d102      	bne.n	801272a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2200      	movs	r2, #0
 8012728:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	0018      	movs	r0, r3
 8012730:	f000 fa5a 	bl	8012be8 <RTC_ByteToBcd2>
 8012734:	0003      	movs	r3, r0
 8012736:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	785b      	ldrb	r3, [r3, #1]
 801273c:	0018      	movs	r0, r3
 801273e:	f000 fa53 	bl	8012be8 <RTC_ByteToBcd2>
 8012742:	0003      	movs	r3, r0
 8012744:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012746:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	789b      	ldrb	r3, [r3, #2]
 801274c:	0018      	movs	r0, r3
 801274e:	f000 fa4b 	bl	8012be8 <RTC_ByteToBcd2>
 8012752:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012754:	0022      	movs	r2, r4
 8012756:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	78db      	ldrb	r3, [r3, #3]
 801275c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801275e:	4313      	orrs	r3, r2
 8012760:	617b      	str	r3, [r7, #20]
 8012762:	e017      	b.n	8012794 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	689b      	ldr	r3, [r3, #8]
 801276a:	2240      	movs	r2, #64	@ 0x40
 801276c:	4013      	ands	r3, r2
 801276e:	d102      	bne.n	8012776 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8012770:	68bb      	ldr	r3, [r7, #8]
 8012772:	2200      	movs	r2, #0
 8012774:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	781b      	ldrb	r3, [r3, #0]
 801277a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	785b      	ldrb	r3, [r3, #1]
 8012780:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8012782:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8012784:	68ba      	ldr	r2, [r7, #8]
 8012786:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8012788:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	78db      	ldrb	r3, [r3, #3]
 801278e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8012790:	4313      	orrs	r3, r2
 8012792:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	22ca      	movs	r2, #202	@ 0xca
 801279a:	625a      	str	r2, [r3, #36]	@ 0x24
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	2253      	movs	r2, #83	@ 0x53
 80127a2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80127a4:	2513      	movs	r5, #19
 80127a6:	197c      	adds	r4, r7, r5
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	0018      	movs	r0, r3
 80127ac:	f000 f9ae 	bl	8012b0c <RTC_EnterInitMode>
 80127b0:	0003      	movs	r3, r0
 80127b2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80127b4:	0028      	movs	r0, r5
 80127b6:	183b      	adds	r3, r7, r0
 80127b8:	781b      	ldrb	r3, [r3, #0]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d120      	bne.n	8012800 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	697a      	ldr	r2, [r7, #20]
 80127c4:	491a      	ldr	r1, [pc, #104]	@ (8012830 <HAL_RTC_SetTime+0x14c>)
 80127c6:	400a      	ands	r2, r1
 80127c8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	689a      	ldr	r2, [r3, #8]
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4917      	ldr	r1, [pc, #92]	@ (8012834 <HAL_RTC_SetTime+0x150>)
 80127d6:	400a      	ands	r2, r1
 80127d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	6899      	ldr	r1, [r3, #8]
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	68da      	ldr	r2, [r3, #12]
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	691b      	ldr	r3, [r3, #16]
 80127e8:	431a      	orrs	r2, r3
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	430a      	orrs	r2, r1
 80127f0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80127f2:	183c      	adds	r4, r7, r0
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	0018      	movs	r0, r3
 80127f8:	f000 f9cc 	bl	8012b94 <RTC_ExitInitMode>
 80127fc:	0003      	movs	r3, r0
 80127fe:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8012800:	2313      	movs	r3, #19
 8012802:	18fb      	adds	r3, r7, r3
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d103      	bne.n	8012812 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2221      	movs	r2, #33	@ 0x21
 801280e:	2101      	movs	r1, #1
 8012810:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	22ff      	movs	r2, #255	@ 0xff
 8012818:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	2220      	movs	r2, #32
 801281e:	2100      	movs	r1, #0
 8012820:	5499      	strb	r1, [r3, r2]

  return status;
 8012822:	2313      	movs	r3, #19
 8012824:	18fb      	adds	r3, r7, r3
 8012826:	781b      	ldrb	r3, [r3, #0]
}
 8012828:	0018      	movs	r0, r3
 801282a:	46bd      	mov	sp, r7
 801282c:	b006      	add	sp, #24
 801282e:	bdb0      	pop	{r4, r5, r7, pc}
 8012830:	007f7f7f 	.word	0x007f7f7f
 8012834:	fffbffff 	.word	0xfffbffff

08012838 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b086      	sub	sp, #24
 801283c:	af00      	add	r7, sp, #0
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	60b9      	str	r1, [r7, #8]
 8012842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8012844:	2300      	movs	r3, #0
 8012846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	691b      	ldr	r3, [r3, #16]
 8012858:	045b      	lsls	r3, r3, #17
 801285a:	0c5a      	lsrs	r2, r3, #17
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a22      	ldr	r2, [pc, #136]	@ (80128f0 <HAL_RTC_GetTime+0xb8>)
 8012868:	4013      	ands	r3, r2
 801286a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	0c1b      	lsrs	r3, r3, #16
 8012870:	b2db      	uxtb	r3, r3
 8012872:	223f      	movs	r2, #63	@ 0x3f
 8012874:	4013      	ands	r3, r2
 8012876:	b2da      	uxtb	r2, r3
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	0a1b      	lsrs	r3, r3, #8
 8012880:	b2db      	uxtb	r3, r3
 8012882:	227f      	movs	r2, #127	@ 0x7f
 8012884:	4013      	ands	r3, r2
 8012886:	b2da      	uxtb	r2, r3
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	b2db      	uxtb	r3, r3
 8012890:	227f      	movs	r2, #127	@ 0x7f
 8012892:	4013      	ands	r3, r2
 8012894:	b2da      	uxtb	r2, r3
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	0d9b      	lsrs	r3, r3, #22
 801289e:	b2db      	uxtb	r3, r3
 80128a0:	2201      	movs	r2, #1
 80128a2:	4013      	ands	r3, r2
 80128a4:	b2da      	uxtb	r2, r3
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d11a      	bne.n	80128e6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	0018      	movs	r0, r3
 80128b6:	f000 f9b8 	bl	8012c2a <RTC_Bcd2ToByte>
 80128ba:	0003      	movs	r3, r0
 80128bc:	001a      	movs	r2, r3
 80128be:	68bb      	ldr	r3, [r7, #8]
 80128c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	785b      	ldrb	r3, [r3, #1]
 80128c6:	0018      	movs	r0, r3
 80128c8:	f000 f9af 	bl	8012c2a <RTC_Bcd2ToByte>
 80128cc:	0003      	movs	r3, r0
 80128ce:	001a      	movs	r2, r3
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	789b      	ldrb	r3, [r3, #2]
 80128d8:	0018      	movs	r0, r3
 80128da:	f000 f9a6 	bl	8012c2a <RTC_Bcd2ToByte>
 80128de:	0003      	movs	r3, r0
 80128e0:	001a      	movs	r2, r3
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80128e6:	2300      	movs	r3, #0
}
 80128e8:	0018      	movs	r0, r3
 80128ea:	46bd      	mov	sp, r7
 80128ec:	b006      	add	sp, #24
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	007f7f7f 	.word	0x007f7f7f

080128f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80128f4:	b5b0      	push	{r4, r5, r7, lr}
 80128f6:	b086      	sub	sp, #24
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	60f8      	str	r0, [r7, #12]
 80128fc:	60b9      	str	r1, [r7, #8]
 80128fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8012900:	2300      	movs	r3, #0
 8012902:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2220      	movs	r2, #32
 8012908:	5c9b      	ldrb	r3, [r3, r2]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d101      	bne.n	8012912 <HAL_RTC_SetDate+0x1e>
 801290e:	2302      	movs	r3, #2
 8012910:	e07e      	b.n	8012a10 <HAL_RTC_SetDate+0x11c>
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2220      	movs	r2, #32
 8012916:	2101      	movs	r1, #1
 8012918:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	2221      	movs	r2, #33	@ 0x21
 801291e:	2102      	movs	r1, #2
 8012920:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d10e      	bne.n	8012946 <HAL_RTC_SetDate+0x52>
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	785b      	ldrb	r3, [r3, #1]
 801292c:	001a      	movs	r2, r3
 801292e:	2310      	movs	r3, #16
 8012930:	4013      	ands	r3, r2
 8012932:	d008      	beq.n	8012946 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	785b      	ldrb	r3, [r3, #1]
 8012938:	2210      	movs	r2, #16
 801293a:	4393      	bics	r3, r2
 801293c:	b2db      	uxtb	r3, r3
 801293e:	330a      	adds	r3, #10
 8012940:	b2da      	uxtb	r2, r3
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d11c      	bne.n	8012986 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	78db      	ldrb	r3, [r3, #3]
 8012950:	0018      	movs	r0, r3
 8012952:	f000 f949 	bl	8012be8 <RTC_ByteToBcd2>
 8012956:	0003      	movs	r3, r0
 8012958:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801295a:	68bb      	ldr	r3, [r7, #8]
 801295c:	785b      	ldrb	r3, [r3, #1]
 801295e:	0018      	movs	r0, r3
 8012960:	f000 f942 	bl	8012be8 <RTC_ByteToBcd2>
 8012964:	0003      	movs	r3, r0
 8012966:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012968:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801296a:	68bb      	ldr	r3, [r7, #8]
 801296c:	789b      	ldrb	r3, [r3, #2]
 801296e:	0018      	movs	r0, r3
 8012970:	f000 f93a 	bl	8012be8 <RTC_ByteToBcd2>
 8012974:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012976:	0022      	movs	r2, r4
 8012978:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801297a:	68bb      	ldr	r3, [r7, #8]
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012980:	4313      	orrs	r3, r2
 8012982:	617b      	str	r3, [r7, #20]
 8012984:	e00e      	b.n	80129a4 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	78db      	ldrb	r3, [r3, #3]
 801298a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	785b      	ldrb	r3, [r3, #1]
 8012990:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012992:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8012994:	68ba      	ldr	r2, [r7, #8]
 8012996:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012998:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80129a0:	4313      	orrs	r3, r2
 80129a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	22ca      	movs	r2, #202	@ 0xca
 80129aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	2253      	movs	r2, #83	@ 0x53
 80129b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80129b4:	2513      	movs	r5, #19
 80129b6:	197c      	adds	r4, r7, r5
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	0018      	movs	r0, r3
 80129bc:	f000 f8a6 	bl	8012b0c <RTC_EnterInitMode>
 80129c0:	0003      	movs	r3, r0
 80129c2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80129c4:	0028      	movs	r0, r5
 80129c6:	183b      	adds	r3, r7, r0
 80129c8:	781b      	ldrb	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d10c      	bne.n	80129e8 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	697a      	ldr	r2, [r7, #20]
 80129d4:	4910      	ldr	r1, [pc, #64]	@ (8012a18 <HAL_RTC_SetDate+0x124>)
 80129d6:	400a      	ands	r2, r1
 80129d8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80129da:	183c      	adds	r4, r7, r0
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	0018      	movs	r0, r3
 80129e0:	f000 f8d8 	bl	8012b94 <RTC_ExitInitMode>
 80129e4:	0003      	movs	r3, r0
 80129e6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80129e8:	2313      	movs	r3, #19
 80129ea:	18fb      	adds	r3, r7, r3
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d103      	bne.n	80129fa <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2221      	movs	r2, #33	@ 0x21
 80129f6:	2101      	movs	r1, #1
 80129f8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	22ff      	movs	r2, #255	@ 0xff
 8012a00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2220      	movs	r2, #32
 8012a06:	2100      	movs	r1, #0
 8012a08:	5499      	strb	r1, [r3, r2]

  return status;
 8012a0a:	2313      	movs	r3, #19
 8012a0c:	18fb      	adds	r3, r7, r3
 8012a0e:	781b      	ldrb	r3, [r3, #0]
}
 8012a10:	0018      	movs	r0, r3
 8012a12:	46bd      	mov	sp, r7
 8012a14:	b006      	add	sp, #24
 8012a16:	bdb0      	pop	{r4, r5, r7, pc}
 8012a18:	00ffff3f 	.word	0x00ffff3f

08012a1c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	60f8      	str	r0, [r7, #12]
 8012a24:	60b9      	str	r1, [r7, #8]
 8012a26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	4a21      	ldr	r2, [pc, #132]	@ (8012ab8 <HAL_RTC_GetDate+0x9c>)
 8012a34:	4013      	ands	r3, r2
 8012a36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	0c1b      	lsrs	r3, r3, #16
 8012a3c:	b2da      	uxtb	r2, r3
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	0a1b      	lsrs	r3, r3, #8
 8012a46:	b2db      	uxtb	r3, r3
 8012a48:	221f      	movs	r2, #31
 8012a4a:	4013      	ands	r3, r2
 8012a4c:	b2da      	uxtb	r2, r3
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	223f      	movs	r2, #63	@ 0x3f
 8012a58:	4013      	ands	r3, r2
 8012a5a:	b2da      	uxtb	r2, r3
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	0b5b      	lsrs	r3, r3, #13
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	2207      	movs	r2, #7
 8012a68:	4013      	ands	r3, r2
 8012a6a:	b2da      	uxtb	r2, r3
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d11a      	bne.n	8012aac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	78db      	ldrb	r3, [r3, #3]
 8012a7a:	0018      	movs	r0, r3
 8012a7c:	f000 f8d5 	bl	8012c2a <RTC_Bcd2ToByte>
 8012a80:	0003      	movs	r3, r0
 8012a82:	001a      	movs	r2, r3
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	785b      	ldrb	r3, [r3, #1]
 8012a8c:	0018      	movs	r0, r3
 8012a8e:	f000 f8cc 	bl	8012c2a <RTC_Bcd2ToByte>
 8012a92:	0003      	movs	r3, r0
 8012a94:	001a      	movs	r2, r3
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	789b      	ldrb	r3, [r3, #2]
 8012a9e:	0018      	movs	r0, r3
 8012aa0:	f000 f8c3 	bl	8012c2a <RTC_Bcd2ToByte>
 8012aa4:	0003      	movs	r3, r0
 8012aa6:	001a      	movs	r2, r3
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	0018      	movs	r0, r3
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	b006      	add	sp, #24
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	46c0      	nop			@ (mov r8, r8)
 8012ab8:	00ffff3f 	.word	0x00ffff3f

08012abc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	4a0e      	ldr	r2, [pc, #56]	@ (8012b08 <HAL_RTC_WaitForSynchro+0x4c>)
 8012ace:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012ad0:	f7f9 fa1a 	bl	800bf08 <HAL_GetTick>
 8012ad4:	0003      	movs	r3, r0
 8012ad6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012ad8:	e00a      	b.n	8012af0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012ada:	f7f9 fa15 	bl	800bf08 <HAL_GetTick>
 8012ade:	0002      	movs	r2, r0
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	1ad2      	subs	r2, r2, r3
 8012ae4:	23fa      	movs	r3, #250	@ 0xfa
 8012ae6:	009b      	lsls	r3, r3, #2
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d901      	bls.n	8012af0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012aec:	2303      	movs	r3, #3
 8012aee:	e006      	b.n	8012afe <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	68db      	ldr	r3, [r3, #12]
 8012af6:	2220      	movs	r2, #32
 8012af8:	4013      	ands	r3, r2
 8012afa:	d0ee      	beq.n	8012ada <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8012afc:	2300      	movs	r3, #0
}
 8012afe:	0018      	movs	r0, r3
 8012b00:	46bd      	mov	sp, r7
 8012b02:	b004      	add	sp, #16
 8012b04:	bd80      	pop	{r7, pc}
 8012b06:	46c0      	nop			@ (mov r8, r8)
 8012b08:	0001ff5f 	.word	0x0001ff5f

08012b0c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b084      	sub	sp, #16
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012b14:	2300      	movs	r3, #0
 8012b16:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8012b18:	230f      	movs	r3, #15
 8012b1a:	18fb      	adds	r3, r7, r3
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	68db      	ldr	r3, [r3, #12]
 8012b26:	2240      	movs	r2, #64	@ 0x40
 8012b28:	4013      	ands	r3, r2
 8012b2a:	d12c      	bne.n	8012b86 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	68da      	ldr	r2, [r3, #12]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2180      	movs	r1, #128	@ 0x80
 8012b38:	430a      	orrs	r2, r1
 8012b3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012b3c:	f7f9 f9e4 	bl	800bf08 <HAL_GetTick>
 8012b40:	0003      	movs	r3, r0
 8012b42:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012b44:	e014      	b.n	8012b70 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012b46:	f7f9 f9df 	bl	800bf08 <HAL_GetTick>
 8012b4a:	0002      	movs	r2, r0
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	1ad2      	subs	r2, r2, r3
 8012b50:	200f      	movs	r0, #15
 8012b52:	183b      	adds	r3, r7, r0
 8012b54:	1839      	adds	r1, r7, r0
 8012b56:	7809      	ldrb	r1, [r1, #0]
 8012b58:	7019      	strb	r1, [r3, #0]
 8012b5a:	23fa      	movs	r3, #250	@ 0xfa
 8012b5c:	009b      	lsls	r3, r3, #2
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d906      	bls.n	8012b70 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	2221      	movs	r2, #33	@ 0x21
 8012b66:	2104      	movs	r1, #4
 8012b68:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8012b6a:	183b      	adds	r3, r7, r0
 8012b6c:	2201      	movs	r2, #1
 8012b6e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	2240      	movs	r2, #64	@ 0x40
 8012b78:	4013      	ands	r3, r2
 8012b7a:	d104      	bne.n	8012b86 <RTC_EnterInitMode+0x7a>
 8012b7c:	230f      	movs	r3, #15
 8012b7e:	18fb      	adds	r3, r7, r3
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	2b01      	cmp	r3, #1
 8012b84:	d1df      	bne.n	8012b46 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8012b86:	230f      	movs	r3, #15
 8012b88:	18fb      	adds	r3, r7, r3
 8012b8a:	781b      	ldrb	r3, [r3, #0]
}
 8012b8c:	0018      	movs	r0, r3
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	b004      	add	sp, #16
 8012b92:	bd80      	pop	{r7, pc}

08012b94 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012b94:	b590      	push	{r4, r7, lr}
 8012b96:	b085      	sub	sp, #20
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012b9c:	240f      	movs	r4, #15
 8012b9e:	193b      	adds	r3, r7, r4
 8012ba0:	2200      	movs	r2, #0
 8012ba2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	68da      	ldr	r2, [r3, #12]
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2180      	movs	r1, #128	@ 0x80
 8012bb0:	438a      	bics	r2, r1
 8012bb2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	689b      	ldr	r3, [r3, #8]
 8012bba:	2220      	movs	r2, #32
 8012bbc:	4013      	ands	r3, r2
 8012bbe:	d10c      	bne.n	8012bda <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	0018      	movs	r0, r3
 8012bc4:	f7ff ff7a 	bl	8012abc <HAL_RTC_WaitForSynchro>
 8012bc8:	1e03      	subs	r3, r0, #0
 8012bca:	d006      	beq.n	8012bda <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2221      	movs	r2, #33	@ 0x21
 8012bd0:	2104      	movs	r1, #4
 8012bd2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8012bd4:	193b      	adds	r3, r7, r4
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8012bda:	230f      	movs	r3, #15
 8012bdc:	18fb      	adds	r3, r7, r3
 8012bde:	781b      	ldrb	r3, [r3, #0]
}
 8012be0:	0018      	movs	r0, r3
 8012be2:	46bd      	mov	sp, r7
 8012be4:	b005      	add	sp, #20
 8012be6:	bd90      	pop	{r4, r7, pc}

08012be8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	0002      	movs	r2, r0
 8012bf0:	1dfb      	adds	r3, r7, #7
 8012bf2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8012bf8:	e007      	b.n	8012c0a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	3301      	adds	r3, #1
 8012bfe:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8012c00:	1dfb      	adds	r3, r7, #7
 8012c02:	1dfa      	adds	r2, r7, #7
 8012c04:	7812      	ldrb	r2, [r2, #0]
 8012c06:	3a0a      	subs	r2, #10
 8012c08:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8012c0a:	1dfb      	adds	r3, r7, #7
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	2b09      	cmp	r3, #9
 8012c10:	d8f3      	bhi.n	8012bfa <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	011b      	lsls	r3, r3, #4
 8012c18:	b2da      	uxtb	r2, r3
 8012c1a:	1dfb      	adds	r3, r7, #7
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	4313      	orrs	r3, r2
 8012c20:	b2db      	uxtb	r3, r3
}
 8012c22:	0018      	movs	r0, r3
 8012c24:	46bd      	mov	sp, r7
 8012c26:	b004      	add	sp, #16
 8012c28:	bd80      	pop	{r7, pc}

08012c2a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8012c2a:	b580      	push	{r7, lr}
 8012c2c:	b084      	sub	sp, #16
 8012c2e:	af00      	add	r7, sp, #0
 8012c30:	0002      	movs	r2, r0
 8012c32:	1dfb      	adds	r3, r7, #7
 8012c34:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8012c36:	2300      	movs	r3, #0
 8012c38:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8012c3a:	1dfb      	adds	r3, r7, #7
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	091b      	lsrs	r3, r3, #4
 8012c40:	b2db      	uxtb	r3, r3
 8012c42:	001a      	movs	r2, r3
 8012c44:	0013      	movs	r3, r2
 8012c46:	009b      	lsls	r3, r3, #2
 8012c48:	189b      	adds	r3, r3, r2
 8012c4a:	005b      	lsls	r3, r3, #1
 8012c4c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	b2da      	uxtb	r2, r3
 8012c52:	1dfb      	adds	r3, r7, #7
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	210f      	movs	r1, #15
 8012c58:	400b      	ands	r3, r1
 8012c5a:	b2db      	uxtb	r3, r3
 8012c5c:	18d3      	adds	r3, r2, r3
 8012c5e:	b2db      	uxtb	r3, r3
}
 8012c60:	0018      	movs	r0, r3
 8012c62:	46bd      	mov	sp, r7
 8012c64:	b004      	add	sp, #16
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b086      	sub	sp, #24
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	60f8      	str	r0, [r7, #12]
 8012c70:	60b9      	str	r1, [r7, #8]
 8012c72:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8012c74:	2300      	movs	r3, #0
 8012c76:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	2220      	movs	r2, #32
 8012c7c:	5c9b      	ldrb	r3, [r3, r2]
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d101      	bne.n	8012c86 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8012c82:	2302      	movs	r3, #2
 8012c84:	e096      	b.n	8012db4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	2220      	movs	r2, #32
 8012c8a:	2101      	movs	r1, #1
 8012c8c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2221      	movs	r2, #33	@ 0x21
 8012c92:	2102      	movs	r1, #2
 8012c94:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	22ca      	movs	r2, #202	@ 0xca
 8012c9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	2253      	movs	r2, #83	@ 0x53
 8012ca4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	689a      	ldr	r2, [r3, #8]
 8012cac:	2380      	movs	r3, #128	@ 0x80
 8012cae:	00db      	lsls	r3, r3, #3
 8012cb0:	4013      	ands	r3, r2
 8012cb2:	d021      	beq.n	8012cf8 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8012cb4:	f7f9 f928 	bl	800bf08 <HAL_GetTick>
 8012cb8:	0003      	movs	r3, r0
 8012cba:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012cbc:	e016      	b.n	8012cec <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012cbe:	f7f9 f923 	bl	800bf08 <HAL_GetTick>
 8012cc2:	0002      	movs	r2, r0
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	1ad2      	subs	r2, r2, r3
 8012cc8:	23fa      	movs	r3, #250	@ 0xfa
 8012cca:	009b      	lsls	r3, r3, #2
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d90d      	bls.n	8012cec <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	22ff      	movs	r2, #255	@ 0xff
 8012cd6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2221      	movs	r2, #33	@ 0x21
 8012cdc:	2103      	movs	r1, #3
 8012cde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2220      	movs	r2, #32
 8012ce4:	2100      	movs	r1, #0
 8012ce6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012ce8:	2303      	movs	r3, #3
 8012cea:	e063      	b.n	8012db4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	68db      	ldr	r3, [r3, #12]
 8012cf2:	2204      	movs	r2, #4
 8012cf4:	4013      	ands	r3, r2
 8012cf6:	d1e2      	bne.n	8012cbe <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	689a      	ldr	r2, [r3, #8]
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	492e      	ldr	r1, [pc, #184]	@ (8012dbc <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8012d04:	400a      	ands	r2, r1
 8012d06:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	22ff      	movs	r2, #255	@ 0xff
 8012d10:	401a      	ands	r2, r3
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	492a      	ldr	r1, [pc, #168]	@ (8012dc0 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8012d18:	430a      	orrs	r2, r1
 8012d1a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012d1c:	f7f9 f8f4 	bl	800bf08 <HAL_GetTick>
 8012d20:	0003      	movs	r3, r0
 8012d22:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012d24:	e016      	b.n	8012d54 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012d26:	f7f9 f8ef 	bl	800bf08 <HAL_GetTick>
 8012d2a:	0002      	movs	r2, r0
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	1ad2      	subs	r2, r2, r3
 8012d30:	23fa      	movs	r3, #250	@ 0xfa
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d90d      	bls.n	8012d54 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	22ff      	movs	r2, #255	@ 0xff
 8012d3e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2221      	movs	r2, #33	@ 0x21
 8012d44:	2103      	movs	r1, #3
 8012d46:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2220      	movs	r2, #32
 8012d4c:	2100      	movs	r1, #0
 8012d4e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8012d50:	2303      	movs	r3, #3
 8012d52:	e02f      	b.n	8012db4 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	68db      	ldr	r3, [r3, #12]
 8012d5a:	2204      	movs	r2, #4
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	d0e2      	beq.n	8012d26 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	689a      	ldr	r2, [r3, #8]
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	2107      	movs	r1, #7
 8012d6c:	438a      	bics	r2, r1
 8012d6e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	6899      	ldr	r1, [r3, #8]
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	430a      	orrs	r2, r1
 8012d7e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	68ba      	ldr	r2, [r7, #8]
 8012d86:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	689a      	ldr	r2, [r3, #8]
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	2180      	movs	r1, #128	@ 0x80
 8012d94:	00c9      	lsls	r1, r1, #3
 8012d96:	430a      	orrs	r2, r1
 8012d98:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	22ff      	movs	r2, #255	@ 0xff
 8012da0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2221      	movs	r2, #33	@ 0x21
 8012da6:	2101      	movs	r1, #1
 8012da8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	2220      	movs	r2, #32
 8012dae:	2100      	movs	r1, #0
 8012db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012db2:	2300      	movs	r3, #0
}
 8012db4:	0018      	movs	r0, r3
 8012db6:	46bd      	mov	sp, r7
 8012db8:	b006      	add	sp, #24
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	fffffbff 	.word	0xfffffbff
 8012dc0:	fffffb7f 	.word	0xfffffb7f

08012dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d101      	bne.n	8012dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	e032      	b.n	8012e3c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	2239      	movs	r2, #57	@ 0x39
 8012dda:	5c9b      	ldrb	r3, [r3, r2]
 8012ddc:	b2db      	uxtb	r3, r3
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d107      	bne.n	8012df2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2238      	movs	r2, #56	@ 0x38
 8012de6:	2100      	movs	r1, #0
 8012de8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	0018      	movs	r0, r3
 8012dee:	f7f8 fa4f 	bl	800b290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2239      	movs	r2, #57	@ 0x39
 8012df6:	2102      	movs	r1, #2
 8012df8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	3304      	adds	r3, #4
 8012e02:	0019      	movs	r1, r3
 8012e04:	0010      	movs	r0, r2
 8012e06:	f000 fa1d 	bl	8013244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	223e      	movs	r2, #62	@ 0x3e
 8012e0e:	2101      	movs	r1, #1
 8012e10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	223a      	movs	r2, #58	@ 0x3a
 8012e16:	2101      	movs	r1, #1
 8012e18:	5499      	strb	r1, [r3, r2]
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	223b      	movs	r2, #59	@ 0x3b
 8012e1e:	2101      	movs	r1, #1
 8012e20:	5499      	strb	r1, [r3, r2]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	223c      	movs	r2, #60	@ 0x3c
 8012e26:	2101      	movs	r1, #1
 8012e28:	5499      	strb	r1, [r3, r2]
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	223d      	movs	r2, #61	@ 0x3d
 8012e2e:	2101      	movs	r1, #1
 8012e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2239      	movs	r2, #57	@ 0x39
 8012e36:	2101      	movs	r1, #1
 8012e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012e3a:	2300      	movs	r3, #0
}
 8012e3c:	0018      	movs	r0, r3
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	b002      	add	sp, #8
 8012e42:	bd80      	pop	{r7, pc}

08012e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b084      	sub	sp, #16
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2239      	movs	r2, #57	@ 0x39
 8012e50:	5c9b      	ldrb	r3, [r3, r2]
 8012e52:	b2db      	uxtb	r3, r3
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d001      	beq.n	8012e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	e033      	b.n	8012ec4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2239      	movs	r2, #57	@ 0x39
 8012e60:	2102      	movs	r1, #2
 8012e62:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	2380      	movs	r3, #128	@ 0x80
 8012e6a:	05db      	lsls	r3, r3, #23
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d00e      	beq.n	8012e8e <HAL_TIM_Base_Start+0x4a>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	4a15      	ldr	r2, [pc, #84]	@ (8012ecc <HAL_TIM_Base_Start+0x88>)
 8012e76:	4293      	cmp	r3, r2
 8012e78:	d009      	beq.n	8012e8e <HAL_TIM_Base_Start+0x4a>
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	4a14      	ldr	r2, [pc, #80]	@ (8012ed0 <HAL_TIM_Base_Start+0x8c>)
 8012e80:	4293      	cmp	r3, r2
 8012e82:	d004      	beq.n	8012e8e <HAL_TIM_Base_Start+0x4a>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	4a12      	ldr	r2, [pc, #72]	@ (8012ed4 <HAL_TIM_Base_Start+0x90>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d111      	bne.n	8012eb2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	689b      	ldr	r3, [r3, #8]
 8012e94:	2207      	movs	r2, #7
 8012e96:	4013      	ands	r3, r2
 8012e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2b06      	cmp	r3, #6
 8012e9e:	d010      	beq.n	8012ec2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	681a      	ldr	r2, [r3, #0]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	2101      	movs	r1, #1
 8012eac:	430a      	orrs	r2, r1
 8012eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012eb0:	e007      	b.n	8012ec2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2101      	movs	r1, #1
 8012ebe:	430a      	orrs	r2, r1
 8012ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012ec2:	2300      	movs	r3, #0
}
 8012ec4:	0018      	movs	r0, r3
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	b004      	add	sp, #16
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	40000400 	.word	0x40000400
 8012ed0:	40010800 	.word	0x40010800
 8012ed4:	40011400 	.word	0x40011400

08012ed8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	6a1b      	ldr	r3, [r3, #32]
 8012ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8012f10 <HAL_TIM_Base_Stop+0x38>)
 8012ee8:	4013      	ands	r3, r2
 8012eea:	d107      	bne.n	8012efc <HAL_TIM_Base_Stop+0x24>
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	2101      	movs	r1, #1
 8012ef8:	438a      	bics	r2, r1
 8012efa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2239      	movs	r2, #57	@ 0x39
 8012f00:	2101      	movs	r1, #1
 8012f02:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	0018      	movs	r0, r3
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	b002      	add	sp, #8
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	46c0      	nop			@ (mov r8, r8)
 8012f10:	00001111 	.word	0x00001111

08012f14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d101      	bne.n	8012f26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012f22:	2301      	movs	r3, #1
 8012f24:	e032      	b.n	8012f8c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2239      	movs	r2, #57	@ 0x39
 8012f2a:	5c9b      	ldrb	r3, [r3, r2]
 8012f2c:	b2db      	uxtb	r3, r3
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d107      	bne.n	8012f42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2238      	movs	r2, #56	@ 0x38
 8012f36:	2100      	movs	r1, #0
 8012f38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	0018      	movs	r0, r3
 8012f3e:	f7f8 f983 	bl	800b248 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2239      	movs	r2, #57	@ 0x39
 8012f46:	2102      	movs	r1, #2
 8012f48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681a      	ldr	r2, [r3, #0]
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	3304      	adds	r3, #4
 8012f52:	0019      	movs	r1, r3
 8012f54:	0010      	movs	r0, r2
 8012f56:	f000 f975 	bl	8013244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	223e      	movs	r2, #62	@ 0x3e
 8012f5e:	2101      	movs	r1, #1
 8012f60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	223a      	movs	r2, #58	@ 0x3a
 8012f66:	2101      	movs	r1, #1
 8012f68:	5499      	strb	r1, [r3, r2]
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	223b      	movs	r2, #59	@ 0x3b
 8012f6e:	2101      	movs	r1, #1
 8012f70:	5499      	strb	r1, [r3, r2]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	223c      	movs	r2, #60	@ 0x3c
 8012f76:	2101      	movs	r1, #1
 8012f78:	5499      	strb	r1, [r3, r2]
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	223d      	movs	r2, #61	@ 0x3d
 8012f7e:	2101      	movs	r1, #1
 8012f80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2239      	movs	r2, #57	@ 0x39
 8012f86:	2101      	movs	r1, #1
 8012f88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012f8a:	2300      	movs	r3, #0
}
 8012f8c:	0018      	movs	r0, r3
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	b002      	add	sp, #8
 8012f92:	bd80      	pop	{r7, pc}

08012f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d108      	bne.n	8012fb6 <HAL_TIM_PWM_Start+0x22>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	223a      	movs	r2, #58	@ 0x3a
 8012fa8:	5c9b      	ldrb	r3, [r3, r2]
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	3b01      	subs	r3, #1
 8012fae:	1e5a      	subs	r2, r3, #1
 8012fb0:	4193      	sbcs	r3, r2
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	e01f      	b.n	8012ff6 <HAL_TIM_PWM_Start+0x62>
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	2b04      	cmp	r3, #4
 8012fba:	d108      	bne.n	8012fce <HAL_TIM_PWM_Start+0x3a>
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	223b      	movs	r2, #59	@ 0x3b
 8012fc0:	5c9b      	ldrb	r3, [r3, r2]
 8012fc2:	b2db      	uxtb	r3, r3
 8012fc4:	3b01      	subs	r3, #1
 8012fc6:	1e5a      	subs	r2, r3, #1
 8012fc8:	4193      	sbcs	r3, r2
 8012fca:	b2db      	uxtb	r3, r3
 8012fcc:	e013      	b.n	8012ff6 <HAL_TIM_PWM_Start+0x62>
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	2b08      	cmp	r3, #8
 8012fd2:	d108      	bne.n	8012fe6 <HAL_TIM_PWM_Start+0x52>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	223c      	movs	r2, #60	@ 0x3c
 8012fd8:	5c9b      	ldrb	r3, [r3, r2]
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	3b01      	subs	r3, #1
 8012fde:	1e5a      	subs	r2, r3, #1
 8012fe0:	4193      	sbcs	r3, r2
 8012fe2:	b2db      	uxtb	r3, r3
 8012fe4:	e007      	b.n	8012ff6 <HAL_TIM_PWM_Start+0x62>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	223d      	movs	r2, #61	@ 0x3d
 8012fea:	5c9b      	ldrb	r3, [r3, r2]
 8012fec:	b2db      	uxtb	r3, r3
 8012fee:	3b01      	subs	r3, #1
 8012ff0:	1e5a      	subs	r2, r3, #1
 8012ff2:	4193      	sbcs	r3, r2
 8012ff4:	b2db      	uxtb	r3, r3
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d001      	beq.n	8012ffe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	e052      	b.n	80130a4 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d104      	bne.n	801300e <HAL_TIM_PWM_Start+0x7a>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	223a      	movs	r2, #58	@ 0x3a
 8013008:	2102      	movs	r1, #2
 801300a:	5499      	strb	r1, [r3, r2]
 801300c:	e013      	b.n	8013036 <HAL_TIM_PWM_Start+0xa2>
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	2b04      	cmp	r3, #4
 8013012:	d104      	bne.n	801301e <HAL_TIM_PWM_Start+0x8a>
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	223b      	movs	r2, #59	@ 0x3b
 8013018:	2102      	movs	r1, #2
 801301a:	5499      	strb	r1, [r3, r2]
 801301c:	e00b      	b.n	8013036 <HAL_TIM_PWM_Start+0xa2>
 801301e:	683b      	ldr	r3, [r7, #0]
 8013020:	2b08      	cmp	r3, #8
 8013022:	d104      	bne.n	801302e <HAL_TIM_PWM_Start+0x9a>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	223c      	movs	r2, #60	@ 0x3c
 8013028:	2102      	movs	r1, #2
 801302a:	5499      	strb	r1, [r3, r2]
 801302c:	e003      	b.n	8013036 <HAL_TIM_PWM_Start+0xa2>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	223d      	movs	r2, #61	@ 0x3d
 8013032:	2102      	movs	r1, #2
 8013034:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	6839      	ldr	r1, [r7, #0]
 801303c:	2201      	movs	r2, #1
 801303e:	0018      	movs	r0, r3
 8013040:	f000 fa62 	bl	8013508 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	681a      	ldr	r2, [r3, #0]
 8013048:	2380      	movs	r3, #128	@ 0x80
 801304a:	05db      	lsls	r3, r3, #23
 801304c:	429a      	cmp	r2, r3
 801304e:	d00e      	beq.n	801306e <HAL_TIM_PWM_Start+0xda>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	4a15      	ldr	r2, [pc, #84]	@ (80130ac <HAL_TIM_PWM_Start+0x118>)
 8013056:	4293      	cmp	r3, r2
 8013058:	d009      	beq.n	801306e <HAL_TIM_PWM_Start+0xda>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	4a14      	ldr	r2, [pc, #80]	@ (80130b0 <HAL_TIM_PWM_Start+0x11c>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d004      	beq.n	801306e <HAL_TIM_PWM_Start+0xda>
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	4a12      	ldr	r2, [pc, #72]	@ (80130b4 <HAL_TIM_PWM_Start+0x120>)
 801306a:	4293      	cmp	r3, r2
 801306c:	d111      	bne.n	8013092 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	689b      	ldr	r3, [r3, #8]
 8013074:	2207      	movs	r2, #7
 8013076:	4013      	ands	r3, r2
 8013078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2b06      	cmp	r3, #6
 801307e:	d010      	beq.n	80130a2 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	681a      	ldr	r2, [r3, #0]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2101      	movs	r1, #1
 801308c:	430a      	orrs	r2, r1
 801308e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013090:	e007      	b.n	80130a2 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	2101      	movs	r1, #1
 801309e:	430a      	orrs	r2, r1
 80130a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80130a2:	2300      	movs	r3, #0
}
 80130a4:	0018      	movs	r0, r3
 80130a6:	46bd      	mov	sp, r7
 80130a8:	b004      	add	sp, #16
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	40000400 	.word	0x40000400
 80130b0:	40010800 	.word	0x40010800
 80130b4:	40011400 	.word	0x40011400

080130b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80130b8:	b580      	push	{r7, lr}
 80130ba:	b086      	sub	sp, #24
 80130bc:	af00      	add	r7, sp, #0
 80130be:	60f8      	str	r0, [r7, #12]
 80130c0:	60b9      	str	r1, [r7, #8]
 80130c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80130c4:	2317      	movs	r3, #23
 80130c6:	18fb      	adds	r3, r7, r3
 80130c8:	2200      	movs	r2, #0
 80130ca:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2238      	movs	r2, #56	@ 0x38
 80130d0:	5c9b      	ldrb	r3, [r3, r2]
 80130d2:	2b01      	cmp	r3, #1
 80130d4:	d101      	bne.n	80130da <HAL_TIM_PWM_ConfigChannel+0x22>
 80130d6:	2302      	movs	r3, #2
 80130d8:	e0ad      	b.n	8013236 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	2238      	movs	r2, #56	@ 0x38
 80130de:	2101      	movs	r1, #1
 80130e0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2b0c      	cmp	r3, #12
 80130e6:	d100      	bne.n	80130ea <HAL_TIM_PWM_ConfigChannel+0x32>
 80130e8:	e076      	b.n	80131d8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b0c      	cmp	r3, #12
 80130ee:	d900      	bls.n	80130f2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80130f0:	e095      	b.n	801321e <HAL_TIM_PWM_ConfigChannel+0x166>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	2b08      	cmp	r3, #8
 80130f6:	d04e      	beq.n	8013196 <HAL_TIM_PWM_ConfigChannel+0xde>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b08      	cmp	r3, #8
 80130fc:	d900      	bls.n	8013100 <HAL_TIM_PWM_ConfigChannel+0x48>
 80130fe:	e08e      	b.n	801321e <HAL_TIM_PWM_ConfigChannel+0x166>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d003      	beq.n	801310e <HAL_TIM_PWM_ConfigChannel+0x56>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b04      	cmp	r3, #4
 801310a:	d021      	beq.n	8013150 <HAL_TIM_PWM_ConfigChannel+0x98>
 801310c:	e087      	b.n	801321e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	68ba      	ldr	r2, [r7, #8]
 8013114:	0011      	movs	r1, r2
 8013116:	0018      	movs	r0, r3
 8013118:	f000 f8f2 	bl	8013300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	699a      	ldr	r2, [r3, #24]
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	2108      	movs	r1, #8
 8013128:	430a      	orrs	r2, r1
 801312a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	699a      	ldr	r2, [r3, #24]
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2104      	movs	r1, #4
 8013138:	438a      	bics	r2, r1
 801313a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	6999      	ldr	r1, [r3, #24]
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	68da      	ldr	r2, [r3, #12]
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	430a      	orrs	r2, r1
 801314c:	619a      	str	r2, [r3, #24]
      break;
 801314e:	e06b      	b.n	8013228 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	68ba      	ldr	r2, [r7, #8]
 8013156:	0011      	movs	r1, r2
 8013158:	0018      	movs	r0, r3
 801315a:	f000 f90d 	bl	8013378 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	699a      	ldr	r2, [r3, #24]
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	2180      	movs	r1, #128	@ 0x80
 801316a:	0109      	lsls	r1, r1, #4
 801316c:	430a      	orrs	r2, r1
 801316e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	699a      	ldr	r2, [r3, #24]
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4931      	ldr	r1, [pc, #196]	@ (8013240 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801317c:	400a      	ands	r2, r1
 801317e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	6999      	ldr	r1, [r3, #24]
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	021a      	lsls	r2, r3, #8
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	430a      	orrs	r2, r1
 8013192:	619a      	str	r2, [r3, #24]
      break;
 8013194:	e048      	b.n	8013228 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	68ba      	ldr	r2, [r7, #8]
 801319c:	0011      	movs	r1, r2
 801319e:	0018      	movs	r0, r3
 80131a0:	f000 f92c 	bl	80133fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	69da      	ldr	r2, [r3, #28]
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	2108      	movs	r1, #8
 80131b0:	430a      	orrs	r2, r1
 80131b2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	69da      	ldr	r2, [r3, #28]
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2104      	movs	r1, #4
 80131c0:	438a      	bics	r2, r1
 80131c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	69d9      	ldr	r1, [r3, #28]
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	68da      	ldr	r2, [r3, #12]
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	430a      	orrs	r2, r1
 80131d4:	61da      	str	r2, [r3, #28]
      break;
 80131d6:	e027      	b.n	8013228 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	68ba      	ldr	r2, [r7, #8]
 80131de:	0011      	movs	r1, r2
 80131e0:	0018      	movs	r0, r3
 80131e2:	f000 f94b 	bl	801347c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	69da      	ldr	r2, [r3, #28]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	2180      	movs	r1, #128	@ 0x80
 80131f2:	0109      	lsls	r1, r1, #4
 80131f4:	430a      	orrs	r2, r1
 80131f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	69da      	ldr	r2, [r3, #28]
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	490f      	ldr	r1, [pc, #60]	@ (8013240 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8013204:	400a      	ands	r2, r1
 8013206:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	69d9      	ldr	r1, [r3, #28]
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	021a      	lsls	r2, r3, #8
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	430a      	orrs	r2, r1
 801321a:	61da      	str	r2, [r3, #28]
      break;
 801321c:	e004      	b.n	8013228 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801321e:	2317      	movs	r3, #23
 8013220:	18fb      	adds	r3, r7, r3
 8013222:	2201      	movs	r2, #1
 8013224:	701a      	strb	r2, [r3, #0]
      break;
 8013226:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2238      	movs	r2, #56	@ 0x38
 801322c:	2100      	movs	r1, #0
 801322e:	5499      	strb	r1, [r3, r2]

  return status;
 8013230:	2317      	movs	r3, #23
 8013232:	18fb      	adds	r3, r7, r3
 8013234:	781b      	ldrb	r3, [r3, #0]
}
 8013236:	0018      	movs	r0, r3
 8013238:	46bd      	mov	sp, r7
 801323a:	b006      	add	sp, #24
 801323c:	bd80      	pop	{r7, pc}
 801323e:	46c0      	nop			@ (mov r8, r8)
 8013240:	fffffbff 	.word	0xfffffbff

08013244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
 801324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	2380      	movs	r3, #128	@ 0x80
 8013258:	05db      	lsls	r3, r3, #23
 801325a:	429a      	cmp	r2, r3
 801325c:	d00b      	beq.n	8013276 <TIM_Base_SetConfig+0x32>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	4a23      	ldr	r2, [pc, #140]	@ (80132f0 <TIM_Base_SetConfig+0xac>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d007      	beq.n	8013276 <TIM_Base_SetConfig+0x32>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4a22      	ldr	r2, [pc, #136]	@ (80132f4 <TIM_Base_SetConfig+0xb0>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d003      	beq.n	8013276 <TIM_Base_SetConfig+0x32>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	4a21      	ldr	r2, [pc, #132]	@ (80132f8 <TIM_Base_SetConfig+0xb4>)
 8013272:	4293      	cmp	r3, r2
 8013274:	d108      	bne.n	8013288 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2270      	movs	r2, #112	@ 0x70
 801327a:	4393      	bics	r3, r2
 801327c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	68fa      	ldr	r2, [r7, #12]
 8013284:	4313      	orrs	r3, r2
 8013286:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013288:	687a      	ldr	r2, [r7, #4]
 801328a:	2380      	movs	r3, #128	@ 0x80
 801328c:	05db      	lsls	r3, r3, #23
 801328e:	429a      	cmp	r2, r3
 8013290:	d00b      	beq.n	80132aa <TIM_Base_SetConfig+0x66>
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	4a16      	ldr	r2, [pc, #88]	@ (80132f0 <TIM_Base_SetConfig+0xac>)
 8013296:	4293      	cmp	r3, r2
 8013298:	d007      	beq.n	80132aa <TIM_Base_SetConfig+0x66>
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	4a15      	ldr	r2, [pc, #84]	@ (80132f4 <TIM_Base_SetConfig+0xb0>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d003      	beq.n	80132aa <TIM_Base_SetConfig+0x66>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	4a14      	ldr	r2, [pc, #80]	@ (80132f8 <TIM_Base_SetConfig+0xb4>)
 80132a6:	4293      	cmp	r3, r2
 80132a8:	d108      	bne.n	80132bc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	4a13      	ldr	r2, [pc, #76]	@ (80132fc <TIM_Base_SetConfig+0xb8>)
 80132ae:	4013      	ands	r3, r2
 80132b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	68db      	ldr	r3, [r3, #12]
 80132b6:	68fa      	ldr	r2, [r7, #12]
 80132b8:	4313      	orrs	r3, r2
 80132ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2280      	movs	r2, #128	@ 0x80
 80132c0:	4393      	bics	r3, r2
 80132c2:	001a      	movs	r2, r3
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	691b      	ldr	r3, [r3, #16]
 80132c8:	4313      	orrs	r3, r2
 80132ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	68fa      	ldr	r2, [r7, #12]
 80132d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80132d2:	683b      	ldr	r3, [r7, #0]
 80132d4:	689a      	ldr	r2, [r3, #8]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80132da:	683b      	ldr	r3, [r7, #0]
 80132dc:	681a      	ldr	r2, [r3, #0]
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2201      	movs	r2, #1
 80132e6:	615a      	str	r2, [r3, #20]
}
 80132e8:	46c0      	nop			@ (mov r8, r8)
 80132ea:	46bd      	mov	sp, r7
 80132ec:	b004      	add	sp, #16
 80132ee:	bd80      	pop	{r7, pc}
 80132f0:	40000400 	.word	0x40000400
 80132f4:	40010800 	.word	0x40010800
 80132f8:	40011400 	.word	0x40011400
 80132fc:	fffffcff 	.word	0xfffffcff

08013300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b086      	sub	sp, #24
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6a1b      	ldr	r3, [r3, #32]
 801330e:	2201      	movs	r2, #1
 8013310:	4393      	bics	r3, r2
 8013312:	001a      	movs	r2, r3
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	6a1b      	ldr	r3, [r3, #32]
 801331c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	699b      	ldr	r3, [r3, #24]
 8013328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2270      	movs	r2, #112	@ 0x70
 801332e:	4393      	bics	r3, r2
 8013330:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	2203      	movs	r2, #3
 8013336:	4393      	bics	r3, r2
 8013338:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	68fa      	ldr	r2, [r7, #12]
 8013340:	4313      	orrs	r3, r2
 8013342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	2202      	movs	r2, #2
 8013348:	4393      	bics	r3, r2
 801334a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	697a      	ldr	r2, [r7, #20]
 8013352:	4313      	orrs	r3, r2
 8013354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	693a      	ldr	r2, [r7, #16]
 801335a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	68fa      	ldr	r2, [r7, #12]
 8013360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	685a      	ldr	r2, [r3, #4]
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	697a      	ldr	r2, [r7, #20]
 801336e:	621a      	str	r2, [r3, #32]
}
 8013370:	46c0      	nop			@ (mov r8, r8)
 8013372:	46bd      	mov	sp, r7
 8013374:	b006      	add	sp, #24
 8013376:	bd80      	pop	{r7, pc}

08013378 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b086      	sub	sp, #24
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6a1b      	ldr	r3, [r3, #32]
 8013386:	2210      	movs	r2, #16
 8013388:	4393      	bics	r3, r2
 801338a:	001a      	movs	r2, r3
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6a1b      	ldr	r3, [r3, #32]
 8013394:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	699b      	ldr	r3, [r3, #24]
 80133a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	4a13      	ldr	r2, [pc, #76]	@ (80133f4 <TIM_OC2_SetConfig+0x7c>)
 80133a6:	4013      	ands	r3, r2
 80133a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	4a12      	ldr	r2, [pc, #72]	@ (80133f8 <TIM_OC2_SetConfig+0x80>)
 80133ae:	4013      	ands	r3, r2
 80133b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80133b2:	683b      	ldr	r3, [r7, #0]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	021b      	lsls	r3, r3, #8
 80133b8:	68fa      	ldr	r2, [r7, #12]
 80133ba:	4313      	orrs	r3, r2
 80133bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	2220      	movs	r2, #32
 80133c2:	4393      	bics	r3, r2
 80133c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80133c6:	683b      	ldr	r3, [r7, #0]
 80133c8:	689b      	ldr	r3, [r3, #8]
 80133ca:	011b      	lsls	r3, r3, #4
 80133cc:	697a      	ldr	r2, [r7, #20]
 80133ce:	4313      	orrs	r3, r2
 80133d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	693a      	ldr	r2, [r7, #16]
 80133d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	685a      	ldr	r2, [r3, #4]
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	697a      	ldr	r2, [r7, #20]
 80133ea:	621a      	str	r2, [r3, #32]
}
 80133ec:	46c0      	nop			@ (mov r8, r8)
 80133ee:	46bd      	mov	sp, r7
 80133f0:	b006      	add	sp, #24
 80133f2:	bd80      	pop	{r7, pc}
 80133f4:	ffff8fff 	.word	0xffff8fff
 80133f8:	fffffcff 	.word	0xfffffcff

080133fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b086      	sub	sp, #24
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	6a1b      	ldr	r3, [r3, #32]
 801340a:	4a1a      	ldr	r2, [pc, #104]	@ (8013474 <TIM_OC3_SetConfig+0x78>)
 801340c:	401a      	ands	r2, r3
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6a1b      	ldr	r3, [r3, #32]
 8013416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	685b      	ldr	r3, [r3, #4]
 801341c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	69db      	ldr	r3, [r3, #28]
 8013422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	2270      	movs	r2, #112	@ 0x70
 8013428:	4393      	bics	r3, r2
 801342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2203      	movs	r2, #3
 8013430:	4393      	bics	r3, r2
 8013432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	68fa      	ldr	r2, [r7, #12]
 801343a:	4313      	orrs	r3, r2
 801343c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	4a0d      	ldr	r2, [pc, #52]	@ (8013478 <TIM_OC3_SetConfig+0x7c>)
 8013442:	4013      	ands	r3, r2
 8013444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	689b      	ldr	r3, [r3, #8]
 801344a:	021b      	lsls	r3, r3, #8
 801344c:	697a      	ldr	r2, [r7, #20]
 801344e:	4313      	orrs	r3, r2
 8013450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	693a      	ldr	r2, [r7, #16]
 8013456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	68fa      	ldr	r2, [r7, #12]
 801345c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	685a      	ldr	r2, [r3, #4]
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	697a      	ldr	r2, [r7, #20]
 801346a:	621a      	str	r2, [r3, #32]
}
 801346c:	46c0      	nop			@ (mov r8, r8)
 801346e:	46bd      	mov	sp, r7
 8013470:	b006      	add	sp, #24
 8013472:	bd80      	pop	{r7, pc}
 8013474:	fffffeff 	.word	0xfffffeff
 8013478:	fffffdff 	.word	0xfffffdff

0801347c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b086      	sub	sp, #24
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
 8013484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a1b      	ldr	r3, [r3, #32]
 801348a:	4a1b      	ldr	r2, [pc, #108]	@ (80134f8 <TIM_OC4_SetConfig+0x7c>)
 801348c:	401a      	ands	r2, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	6a1b      	ldr	r3, [r3, #32]
 8013496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	685b      	ldr	r3, [r3, #4]
 801349c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	69db      	ldr	r3, [r3, #28]
 80134a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	4a15      	ldr	r2, [pc, #84]	@ (80134fc <TIM_OC4_SetConfig+0x80>)
 80134a8:	4013      	ands	r3, r2
 80134aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	4a14      	ldr	r2, [pc, #80]	@ (8013500 <TIM_OC4_SetConfig+0x84>)
 80134b0:	4013      	ands	r3, r2
 80134b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	021b      	lsls	r3, r3, #8
 80134ba:	68fa      	ldr	r2, [r7, #12]
 80134bc:	4313      	orrs	r3, r2
 80134be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	4a10      	ldr	r2, [pc, #64]	@ (8013504 <TIM_OC4_SetConfig+0x88>)
 80134c4:	4013      	ands	r3, r2
 80134c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	689b      	ldr	r3, [r3, #8]
 80134cc:	031b      	lsls	r3, r3, #12
 80134ce:	697a      	ldr	r2, [r7, #20]
 80134d0:	4313      	orrs	r3, r2
 80134d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	693a      	ldr	r2, [r7, #16]
 80134d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	68fa      	ldr	r2, [r7, #12]
 80134de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	685a      	ldr	r2, [r3, #4]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	697a      	ldr	r2, [r7, #20]
 80134ec:	621a      	str	r2, [r3, #32]
}
 80134ee:	46c0      	nop			@ (mov r8, r8)
 80134f0:	46bd      	mov	sp, r7
 80134f2:	b006      	add	sp, #24
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	46c0      	nop			@ (mov r8, r8)
 80134f8:	ffffefff 	.word	0xffffefff
 80134fc:	ffff8fff 	.word	0xffff8fff
 8013500:	fffffcff 	.word	0xfffffcff
 8013504:	ffffdfff 	.word	0xffffdfff

08013508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b086      	sub	sp, #24
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013514:	68bb      	ldr	r3, [r7, #8]
 8013516:	221f      	movs	r2, #31
 8013518:	4013      	ands	r3, r2
 801351a:	2201      	movs	r2, #1
 801351c:	409a      	lsls	r2, r3
 801351e:	0013      	movs	r3, r2
 8013520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	6a1b      	ldr	r3, [r3, #32]
 8013526:	697a      	ldr	r2, [r7, #20]
 8013528:	43d2      	mvns	r2, r2
 801352a:	401a      	ands	r2, r3
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	6a1a      	ldr	r2, [r3, #32]
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	211f      	movs	r1, #31
 8013538:	400b      	ands	r3, r1
 801353a:	6879      	ldr	r1, [r7, #4]
 801353c:	4099      	lsls	r1, r3
 801353e:	000b      	movs	r3, r1
 8013540:	431a      	orrs	r2, r3
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	621a      	str	r2, [r3, #32]
}
 8013546:	46c0      	nop			@ (mov r8, r8)
 8013548:	46bd      	mov	sp, r7
 801354a:	b006      	add	sp, #24
 801354c:	bd80      	pop	{r7, pc}
	...

08013550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2238      	movs	r2, #56	@ 0x38
 801355e:	5c9b      	ldrb	r3, [r3, r2]
 8013560:	2b01      	cmp	r3, #1
 8013562:	d101      	bne.n	8013568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013564:	2302      	movs	r3, #2
 8013566:	e047      	b.n	80135f8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2238      	movs	r2, #56	@ 0x38
 801356c:	2101      	movs	r1, #1
 801356e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2239      	movs	r2, #57	@ 0x39
 8013574:	2102      	movs	r1, #2
 8013576:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	689b      	ldr	r3, [r3, #8]
 8013586:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2270      	movs	r2, #112	@ 0x70
 801358c:	4393      	bics	r3, r2
 801358e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013590:	683b      	ldr	r3, [r7, #0]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	68fa      	ldr	r2, [r7, #12]
 8013596:	4313      	orrs	r3, r2
 8013598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	68fa      	ldr	r2, [r7, #12]
 80135a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681a      	ldr	r2, [r3, #0]
 80135a6:	2380      	movs	r3, #128	@ 0x80
 80135a8:	05db      	lsls	r3, r3, #23
 80135aa:	429a      	cmp	r2, r3
 80135ac:	d00e      	beq.n	80135cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	4a13      	ldr	r2, [pc, #76]	@ (8013600 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80135b4:	4293      	cmp	r3, r2
 80135b6:	d009      	beq.n	80135cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	4a11      	ldr	r2, [pc, #68]	@ (8013604 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80135be:	4293      	cmp	r3, r2
 80135c0:	d004      	beq.n	80135cc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	4a10      	ldr	r2, [pc, #64]	@ (8013608 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80135c8:	4293      	cmp	r3, r2
 80135ca:	d10c      	bne.n	80135e6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80135cc:	68bb      	ldr	r3, [r7, #8]
 80135ce:	2280      	movs	r2, #128	@ 0x80
 80135d0:	4393      	bics	r3, r2
 80135d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	685b      	ldr	r3, [r3, #4]
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	4313      	orrs	r3, r2
 80135dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	68ba      	ldr	r2, [r7, #8]
 80135e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	2239      	movs	r2, #57	@ 0x39
 80135ea:	2101      	movs	r1, #1
 80135ec:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2238      	movs	r2, #56	@ 0x38
 80135f2:	2100      	movs	r1, #0
 80135f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80135f6:	2300      	movs	r3, #0
}
 80135f8:	0018      	movs	r0, r3
 80135fa:	46bd      	mov	sp, r7
 80135fc:	b004      	add	sp, #16
 80135fe:	bd80      	pop	{r7, pc}
 8013600:	40000400 	.word	0x40000400
 8013604:	40010800 	.word	0x40010800
 8013608:	40011400 	.word	0x40011400

0801360c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2238      	movs	r2, #56	@ 0x38
 801361a:	5c9b      	ldrb	r3, [r3, r2]
 801361c:	2b01      	cmp	r3, #1
 801361e:	d101      	bne.n	8013624 <HAL_TIMEx_RemapConfig+0x18>
 8013620:	2302      	movs	r3, #2
 8013622:	e00c      	b.n	801363e <HAL_TIMEx_RemapConfig+0x32>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2238      	movs	r2, #56	@ 0x38
 8013628:	2101      	movs	r1, #1
 801362a:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	683a      	ldr	r2, [r7, #0]
 8013632:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2238      	movs	r2, #56	@ 0x38
 8013638:	2100      	movs	r1, #0
 801363a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801363c:	2300      	movs	r3, #0
}
 801363e:	0018      	movs	r0, r3
 8013640:	46bd      	mov	sp, r7
 8013642:	b002      	add	sp, #8
 8013644:	bd80      	pop	{r7, pc}
	...

08013648 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d101      	bne.n	801365a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013656:	2301      	movs	r3, #1
 8013658:	e053      	b.n	8013702 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801365e:	2b00      	cmp	r3, #0
 8013660:	d116      	bne.n	8013690 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2278      	movs	r2, #120	@ 0x78
 8013666:	2100      	movs	r1, #0
 8013668:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	0018      	movs	r0, r3
 801366e:	f000 fd65 	bl	801413c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	22b0      	movs	r2, #176	@ 0xb0
 8013676:	589b      	ldr	r3, [r3, r2]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d103      	bne.n	8013684 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	21b0      	movs	r1, #176	@ 0xb0
 8013680:	4a22      	ldr	r2, [pc, #136]	@ (801370c <HAL_UART_Init+0xc4>)
 8013682:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	22b0      	movs	r2, #176	@ 0xb0
 8013688:	589b      	ldr	r3, [r3, r2]
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	0010      	movs	r0, r2
 801368e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	2224      	movs	r2, #36	@ 0x24
 8013694:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	681a      	ldr	r2, [r3, #0]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2101      	movs	r1, #1
 80136a2:	438a      	bics	r2, r1
 80136a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	0018      	movs	r0, r3
 80136aa:	f000 fd8b 	bl	80141c4 <UART_SetConfig>
 80136ae:	0003      	movs	r3, r0
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d101      	bne.n	80136b8 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 80136b4:	2301      	movs	r3, #1
 80136b6:	e024      	b.n	8013702 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d003      	beq.n	80136c8 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	0018      	movs	r0, r3
 80136c4:	f001 f81c 	bl	8014700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	685a      	ldr	r2, [r3, #4]
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	490f      	ldr	r1, [pc, #60]	@ (8013710 <HAL_UART_Init+0xc8>)
 80136d4:	400a      	ands	r2, r1
 80136d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	689a      	ldr	r2, [r3, #8]
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	212a      	movs	r1, #42	@ 0x2a
 80136e4:	438a      	bics	r2, r1
 80136e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	681a      	ldr	r2, [r3, #0]
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2101      	movs	r1, #1
 80136f4:	430a      	orrs	r2, r1
 80136f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	0018      	movs	r0, r3
 80136fc:	f001 f8b4 	bl	8014868 <UART_CheckIdleState>
 8013700:	0003      	movs	r3, r0
}
 8013702:	0018      	movs	r0, r3
 8013704:	46bd      	mov	sp, r7
 8013706:	b002      	add	sp, #8
 8013708:	bd80      	pop	{r7, pc}
 801370a:	46c0      	nop			@ (mov r8, r8)
 801370c:	0800b4c5 	.word	0x0800b4c5
 8013710:	ffffb7ff 	.word	0xffffb7ff

08013714 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b08a      	sub	sp, #40	@ 0x28
 8013718:	af02      	add	r7, sp, #8
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	603b      	str	r3, [r7, #0]
 8013720:	1dbb      	adds	r3, r7, #6
 8013722:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013728:	2b20      	cmp	r3, #32
 801372a:	d000      	beq.n	801372e <HAL_UART_Transmit+0x1a>
 801372c:	e08c      	b.n	8013848 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d003      	beq.n	801373c <HAL_UART_Transmit+0x28>
 8013734:	1dbb      	adds	r3, r7, #6
 8013736:	881b      	ldrh	r3, [r3, #0]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d101      	bne.n	8013740 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801373c:	2301      	movs	r3, #1
 801373e:	e084      	b.n	801384a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	689a      	ldr	r2, [r3, #8]
 8013744:	2380      	movs	r3, #128	@ 0x80
 8013746:	015b      	lsls	r3, r3, #5
 8013748:	429a      	cmp	r2, r3
 801374a:	d109      	bne.n	8013760 <HAL_UART_Transmit+0x4c>
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	691b      	ldr	r3, [r3, #16]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d105      	bne.n	8013760 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	2201      	movs	r2, #1
 8013758:	4013      	ands	r3, r2
 801375a:	d001      	beq.n	8013760 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801375c:	2301      	movs	r3, #1
 801375e:	e074      	b.n	801384a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2284      	movs	r2, #132	@ 0x84
 8013764:	2100      	movs	r1, #0
 8013766:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2221      	movs	r2, #33	@ 0x21
 801376c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801376e:	f7f8 fbcb 	bl	800bf08 <HAL_GetTick>
 8013772:	0003      	movs	r3, r0
 8013774:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	1dba      	adds	r2, r7, #6
 801377a:	2150      	movs	r1, #80	@ 0x50
 801377c:	8812      	ldrh	r2, [r2, #0]
 801377e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	1dba      	adds	r2, r7, #6
 8013784:	2152      	movs	r1, #82	@ 0x52
 8013786:	8812      	ldrh	r2, [r2, #0]
 8013788:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	689a      	ldr	r2, [r3, #8]
 801378e:	2380      	movs	r3, #128	@ 0x80
 8013790:	015b      	lsls	r3, r3, #5
 8013792:	429a      	cmp	r2, r3
 8013794:	d108      	bne.n	80137a8 <HAL_UART_Transmit+0x94>
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	691b      	ldr	r3, [r3, #16]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d104      	bne.n	80137a8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801379e:	2300      	movs	r3, #0
 80137a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	61bb      	str	r3, [r7, #24]
 80137a6:	e003      	b.n	80137b0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80137ac:	2300      	movs	r3, #0
 80137ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80137b0:	e02f      	b.n	8013812 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80137b2:	697a      	ldr	r2, [r7, #20]
 80137b4:	68f8      	ldr	r0, [r7, #12]
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	9300      	str	r3, [sp, #0]
 80137ba:	0013      	movs	r3, r2
 80137bc:	2200      	movs	r2, #0
 80137be:	2180      	movs	r1, #128	@ 0x80
 80137c0:	f001 f8fa 	bl	80149b8 <UART_WaitOnFlagUntilTimeout>
 80137c4:	1e03      	subs	r3, r0, #0
 80137c6:	d004      	beq.n	80137d2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	2220      	movs	r2, #32
 80137cc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80137ce:	2303      	movs	r3, #3
 80137d0:	e03b      	b.n	801384a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d10b      	bne.n	80137f0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	881b      	ldrh	r3, [r3, #0]
 80137dc:	001a      	movs	r2, r3
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	05d2      	lsls	r2, r2, #23
 80137e4:	0dd2      	lsrs	r2, r2, #23
 80137e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80137e8:	69bb      	ldr	r3, [r7, #24]
 80137ea:	3302      	adds	r3, #2
 80137ec:	61bb      	str	r3, [r7, #24]
 80137ee:	e007      	b.n	8013800 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	781a      	ldrb	r2, [r3, #0]
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	3301      	adds	r3, #1
 80137fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	2252      	movs	r2, #82	@ 0x52
 8013804:	5a9b      	ldrh	r3, [r3, r2]
 8013806:	b29b      	uxth	r3, r3
 8013808:	3b01      	subs	r3, #1
 801380a:	b299      	uxth	r1, r3
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	2252      	movs	r2, #82	@ 0x52
 8013810:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2252      	movs	r2, #82	@ 0x52
 8013816:	5a9b      	ldrh	r3, [r3, r2]
 8013818:	b29b      	uxth	r3, r3
 801381a:	2b00      	cmp	r3, #0
 801381c:	d1c9      	bne.n	80137b2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801381e:	697a      	ldr	r2, [r7, #20]
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	9300      	str	r3, [sp, #0]
 8013826:	0013      	movs	r3, r2
 8013828:	2200      	movs	r2, #0
 801382a:	2140      	movs	r1, #64	@ 0x40
 801382c:	f001 f8c4 	bl	80149b8 <UART_WaitOnFlagUntilTimeout>
 8013830:	1e03      	subs	r3, r0, #0
 8013832:	d004      	beq.n	801383e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2220      	movs	r2, #32
 8013838:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801383a:	2303      	movs	r3, #3
 801383c:	e005      	b.n	801384a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2220      	movs	r2, #32
 8013842:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8013844:	2300      	movs	r3, #0
 8013846:	e000      	b.n	801384a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8013848:	2302      	movs	r3, #2
  }
}
 801384a:	0018      	movs	r0, r3
 801384c:	46bd      	mov	sp, r7
 801384e:	b008      	add	sp, #32
 8013850:	bd80      	pop	{r7, pc}
	...

08013854 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b088      	sub	sp, #32
 8013858:	af00      	add	r7, sp, #0
 801385a:	60f8      	str	r0, [r7, #12]
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	1dbb      	adds	r3, r7, #6
 8013860:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	2280      	movs	r2, #128	@ 0x80
 8013866:	589b      	ldr	r3, [r3, r2]
 8013868:	2b20      	cmp	r3, #32
 801386a:	d14a      	bne.n	8013902 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d003      	beq.n	801387a <HAL_UART_Receive_IT+0x26>
 8013872:	1dbb      	adds	r3, r7, #6
 8013874:	881b      	ldrh	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d101      	bne.n	801387e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801387a:	2301      	movs	r3, #1
 801387c:	e042      	b.n	8013904 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	689a      	ldr	r2, [r3, #8]
 8013882:	2380      	movs	r3, #128	@ 0x80
 8013884:	015b      	lsls	r3, r3, #5
 8013886:	429a      	cmp	r2, r3
 8013888:	d109      	bne.n	801389e <HAL_UART_Receive_IT+0x4a>
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	691b      	ldr	r3, [r3, #16]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d105      	bne.n	801389e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	2201      	movs	r2, #1
 8013896:	4013      	ands	r3, r2
 8013898:	d001      	beq.n	801389e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801389a:	2301      	movs	r3, #1
 801389c:	e032      	b.n	8013904 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	2200      	movs	r2, #0
 80138a2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4a18      	ldr	r2, [pc, #96]	@ (801390c <HAL_UART_Receive_IT+0xb8>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d020      	beq.n	80138f0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	685a      	ldr	r2, [r3, #4]
 80138b4:	2380      	movs	r3, #128	@ 0x80
 80138b6:	041b      	lsls	r3, r3, #16
 80138b8:	4013      	ands	r3, r2
 80138ba:	d019      	beq.n	80138f0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80138bc:	f3ef 8310 	mrs	r3, PRIMASK
 80138c0:	613b      	str	r3, [r7, #16]
  return(result);
 80138c2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80138c4:	61fb      	str	r3, [r7, #28]
 80138c6:	2301      	movs	r3, #1
 80138c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	f383 8810 	msr	PRIMASK, r3
}
 80138d0:	46c0      	nop			@ (mov r8, r8)
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	681a      	ldr	r2, [r3, #0]
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	2180      	movs	r1, #128	@ 0x80
 80138de:	04c9      	lsls	r1, r1, #19
 80138e0:	430a      	orrs	r2, r1
 80138e2:	601a      	str	r2, [r3, #0]
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	f383 8810 	msr	PRIMASK, r3
}
 80138ee:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80138f0:	1dbb      	adds	r3, r7, #6
 80138f2:	881a      	ldrh	r2, [r3, #0]
 80138f4:	68b9      	ldr	r1, [r7, #8]
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	0018      	movs	r0, r3
 80138fa:	f001 f8c7 	bl	8014a8c <UART_Start_Receive_IT>
 80138fe:	0003      	movs	r3, r0
 8013900:	e000      	b.n	8013904 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8013902:	2302      	movs	r3, #2
  }
}
 8013904:	0018      	movs	r0, r3
 8013906:	46bd      	mov	sp, r7
 8013908:	b008      	add	sp, #32
 801390a:	bd80      	pop	{r7, pc}
 801390c:	40004800 	.word	0x40004800

08013910 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b088      	sub	sp, #32
 8013914:	af00      	add	r7, sp, #0
 8013916:	60f8      	str	r0, [r7, #12]
 8013918:	60b9      	str	r1, [r7, #8]
 801391a:	1dbb      	adds	r3, r7, #6
 801391c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013922:	2b20      	cmp	r3, #32
 8013924:	d000      	beq.n	8013928 <HAL_UART_Transmit_DMA+0x18>
 8013926:	e077      	b.n	8013a18 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d003      	beq.n	8013936 <HAL_UART_Transmit_DMA+0x26>
 801392e:	1dbb      	adds	r3, r7, #6
 8013930:	881b      	ldrh	r3, [r3, #0]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d101      	bne.n	801393a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8013936:	2301      	movs	r3, #1
 8013938:	e06f      	b.n	8013a1a <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	689a      	ldr	r2, [r3, #8]
 801393e:	2380      	movs	r3, #128	@ 0x80
 8013940:	015b      	lsls	r3, r3, #5
 8013942:	429a      	cmp	r2, r3
 8013944:	d109      	bne.n	801395a <HAL_UART_Transmit_DMA+0x4a>
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	691b      	ldr	r3, [r3, #16]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d105      	bne.n	801395a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	2201      	movs	r2, #1
 8013952:	4013      	ands	r3, r2
 8013954:	d001      	beq.n	801395a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013956:	2301      	movs	r3, #1
 8013958:	e05f      	b.n	8013a1a <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	68ba      	ldr	r2, [r7, #8]
 801395e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	1dba      	adds	r2, r7, #6
 8013964:	2150      	movs	r1, #80	@ 0x50
 8013966:	8812      	ldrh	r2, [r2, #0]
 8013968:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	1dba      	adds	r2, r7, #6
 801396e:	2152      	movs	r1, #82	@ 0x52
 8013970:	8812      	ldrh	r2, [r2, #0]
 8013972:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	2284      	movs	r2, #132	@ 0x84
 8013978:	2100      	movs	r1, #0
 801397a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	2221      	movs	r2, #33	@ 0x21
 8013980:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013986:	2b00      	cmp	r3, #0
 8013988:	d027      	beq.n	80139da <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801398e:	4a25      	ldr	r2, [pc, #148]	@ (8013a24 <HAL_UART_Transmit_DMA+0x114>)
 8013990:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013996:	4a24      	ldr	r2, [pc, #144]	@ (8013a28 <HAL_UART_Transmit_DMA+0x118>)
 8013998:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801399e:	4a23      	ldr	r2, [pc, #140]	@ (8013a2c <HAL_UART_Transmit_DMA+0x11c>)
 80139a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80139a6:	2200      	movs	r2, #0
 80139a8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80139b2:	0019      	movs	r1, r3
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	3328      	adds	r3, #40	@ 0x28
 80139ba:	001a      	movs	r2, r3
 80139bc:	1dbb      	adds	r3, r7, #6
 80139be:	881b      	ldrh	r3, [r3, #0]
 80139c0:	f7f8 ffc2 	bl	800c948 <HAL_DMA_Start_IT>
 80139c4:	1e03      	subs	r3, r0, #0
 80139c6:	d008      	beq.n	80139da <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2284      	movs	r2, #132	@ 0x84
 80139cc:	2110      	movs	r1, #16
 80139ce:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	2220      	movs	r2, #32
 80139d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 80139d6:	2301      	movs	r3, #1
 80139d8:	e01f      	b.n	8013a1a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	2240      	movs	r2, #64	@ 0x40
 80139e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139e2:	f3ef 8310 	mrs	r3, PRIMASK
 80139e6:	613b      	str	r3, [r7, #16]
  return(result);
 80139e8:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80139ea:	61fb      	str	r3, [r7, #28]
 80139ec:	2301      	movs	r3, #1
 80139ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	f383 8810 	msr	PRIMASK, r3
}
 80139f6:	46c0      	nop			@ (mov r8, r8)
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	689a      	ldr	r2, [r3, #8]
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2180      	movs	r1, #128	@ 0x80
 8013a04:	430a      	orrs	r2, r1
 8013a06:	609a      	str	r2, [r3, #8]
 8013a08:	69fb      	ldr	r3, [r7, #28]
 8013a0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a0c:	69bb      	ldr	r3, [r7, #24]
 8013a0e:	f383 8810 	msr	PRIMASK, r3
}
 8013a12:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8013a14:	2300      	movs	r3, #0
 8013a16:	e000      	b.n	8013a1a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8013a18:	2302      	movs	r3, #2
  }
}
 8013a1a:	0018      	movs	r0, r3
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	b008      	add	sp, #32
 8013a20:	bd80      	pop	{r7, pc}
 8013a22:	46c0      	nop			@ (mov r8, r8)
 8013a24:	08014e71 	.word	0x08014e71
 8013a28:	08014f0d 	.word	0x08014f0d
 8013a2c:	080150ad 	.word	0x080150ad

08013a30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b088      	sub	sp, #32
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	60f8      	str	r0, [r7, #12]
 8013a38:	60b9      	str	r1, [r7, #8]
 8013a3a:	1dbb      	adds	r3, r7, #6
 8013a3c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	2280      	movs	r2, #128	@ 0x80
 8013a42:	589b      	ldr	r3, [r3, r2]
 8013a44:	2b20      	cmp	r3, #32
 8013a46:	d14a      	bne.n	8013ade <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d003      	beq.n	8013a56 <HAL_UART_Receive_DMA+0x26>
 8013a4e:	1dbb      	adds	r3, r7, #6
 8013a50:	881b      	ldrh	r3, [r3, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d101      	bne.n	8013a5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8013a56:	2301      	movs	r3, #1
 8013a58:	e042      	b.n	8013ae0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	689a      	ldr	r2, [r3, #8]
 8013a5e:	2380      	movs	r3, #128	@ 0x80
 8013a60:	015b      	lsls	r3, r3, #5
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d109      	bne.n	8013a7a <HAL_UART_Receive_DMA+0x4a>
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	691b      	ldr	r3, [r3, #16]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d105      	bne.n	8013a7a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	2201      	movs	r2, #1
 8013a72:	4013      	ands	r3, r2
 8013a74:	d001      	beq.n	8013a7a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8013a76:	2301      	movs	r3, #1
 8013a78:	e032      	b.n	8013ae0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4a18      	ldr	r2, [pc, #96]	@ (8013ae8 <HAL_UART_Receive_DMA+0xb8>)
 8013a86:	4293      	cmp	r3, r2
 8013a88:	d020      	beq.n	8013acc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	685a      	ldr	r2, [r3, #4]
 8013a90:	2380      	movs	r3, #128	@ 0x80
 8013a92:	041b      	lsls	r3, r3, #16
 8013a94:	4013      	ands	r3, r2
 8013a96:	d019      	beq.n	8013acc <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a98:	f3ef 8310 	mrs	r3, PRIMASK
 8013a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8013a9e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013aa0:	61fb      	str	r3, [r7, #28]
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	f383 8810 	msr	PRIMASK, r3
}
 8013aac:	46c0      	nop			@ (mov r8, r8)
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	681a      	ldr	r2, [r3, #0]
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2180      	movs	r1, #128	@ 0x80
 8013aba:	04c9      	lsls	r1, r1, #19
 8013abc:	430a      	orrs	r2, r1
 8013abe:	601a      	str	r2, [r3, #0]
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	f383 8810 	msr	PRIMASK, r3
}
 8013aca:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013acc:	1dbb      	adds	r3, r7, #6
 8013ace:	881a      	ldrh	r2, [r3, #0]
 8013ad0:	68b9      	ldr	r1, [r7, #8]
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	0018      	movs	r0, r3
 8013ad6:	f001 f8a3 	bl	8014c20 <UART_Start_Receive_DMA>
 8013ada:	0003      	movs	r3, r0
 8013adc:	e000      	b.n	8013ae0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8013ade:	2302      	movs	r3, #2
  }
}
 8013ae0:	0018      	movs	r0, r3
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	b008      	add	sp, #32
 8013ae6:	bd80      	pop	{r7, pc}
 8013ae8:	40004800 	.word	0x40004800

08013aec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013aec:	b590      	push	{r4, r7, lr}
 8013aee:	b0ab      	sub	sp, #172	@ 0xac
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	69db      	ldr	r3, [r3, #28]
 8013afa:	22a4      	movs	r2, #164	@ 0xa4
 8013afc:	18b9      	adds	r1, r7, r2
 8013afe:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	20a0      	movs	r0, #160	@ 0xa0
 8013b08:	1839      	adds	r1, r7, r0
 8013b0a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	689b      	ldr	r3, [r3, #8]
 8013b12:	219c      	movs	r1, #156	@ 0x9c
 8013b14:	1879      	adds	r1, r7, r1
 8013b16:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013b18:	0011      	movs	r1, r2
 8013b1a:	18bb      	adds	r3, r7, r2
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	4a9c      	ldr	r2, [pc, #624]	@ (8013d90 <HAL_UART_IRQHandler+0x2a4>)
 8013b20:	4013      	ands	r3, r2
 8013b22:	2298      	movs	r2, #152	@ 0x98
 8013b24:	18bc      	adds	r4, r7, r2
 8013b26:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8013b28:	18bb      	adds	r3, r7, r2
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d114      	bne.n	8013b5a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8013b30:	187b      	adds	r3, r7, r1
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	2220      	movs	r2, #32
 8013b36:	4013      	ands	r3, r2
 8013b38:	d00f      	beq.n	8013b5a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013b3a:	183b      	adds	r3, r7, r0
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2220      	movs	r2, #32
 8013b40:	4013      	ands	r3, r2
 8013b42:	d00a      	beq.n	8013b5a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d100      	bne.n	8013b4e <HAL_UART_IRQHandler+0x62>
 8013b4c:	e2aa      	b.n	80140a4 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013b52:	687a      	ldr	r2, [r7, #4]
 8013b54:	0010      	movs	r0, r2
 8013b56:	4798      	blx	r3
      }
      return;
 8013b58:	e2a4      	b.n	80140a4 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013b5a:	2398      	movs	r3, #152	@ 0x98
 8013b5c:	18fb      	adds	r3, r7, r3
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d100      	bne.n	8013b66 <HAL_UART_IRQHandler+0x7a>
 8013b64:	e11a      	b.n	8013d9c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8013b66:	239c      	movs	r3, #156	@ 0x9c
 8013b68:	18fb      	adds	r3, r7, r3
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	4013      	ands	r3, r2
 8013b70:	d106      	bne.n	8013b80 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013b72:	23a0      	movs	r3, #160	@ 0xa0
 8013b74:	18fb      	adds	r3, r7, r3
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	4a86      	ldr	r2, [pc, #536]	@ (8013d94 <HAL_UART_IRQHandler+0x2a8>)
 8013b7a:	4013      	ands	r3, r2
 8013b7c:	d100      	bne.n	8013b80 <HAL_UART_IRQHandler+0x94>
 8013b7e:	e10d      	b.n	8013d9c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013b80:	23a4      	movs	r3, #164	@ 0xa4
 8013b82:	18fb      	adds	r3, r7, r3
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2201      	movs	r2, #1
 8013b88:	4013      	ands	r3, r2
 8013b8a:	d012      	beq.n	8013bb2 <HAL_UART_IRQHandler+0xc6>
 8013b8c:	23a0      	movs	r3, #160	@ 0xa0
 8013b8e:	18fb      	adds	r3, r7, r3
 8013b90:	681a      	ldr	r2, [r3, #0]
 8013b92:	2380      	movs	r3, #128	@ 0x80
 8013b94:	005b      	lsls	r3, r3, #1
 8013b96:	4013      	ands	r3, r2
 8013b98:	d00b      	beq.n	8013bb2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	2284      	movs	r2, #132	@ 0x84
 8013ba6:	589b      	ldr	r3, [r3, r2]
 8013ba8:	2201      	movs	r2, #1
 8013baa:	431a      	orrs	r2, r3
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2184      	movs	r1, #132	@ 0x84
 8013bb0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013bb2:	23a4      	movs	r3, #164	@ 0xa4
 8013bb4:	18fb      	adds	r3, r7, r3
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	2202      	movs	r2, #2
 8013bba:	4013      	ands	r3, r2
 8013bbc:	d011      	beq.n	8013be2 <HAL_UART_IRQHandler+0xf6>
 8013bbe:	239c      	movs	r3, #156	@ 0x9c
 8013bc0:	18fb      	adds	r3, r7, r3
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2201      	movs	r2, #1
 8013bc6:	4013      	ands	r3, r2
 8013bc8:	d00b      	beq.n	8013be2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	2202      	movs	r2, #2
 8013bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2284      	movs	r2, #132	@ 0x84
 8013bd6:	589b      	ldr	r3, [r3, r2]
 8013bd8:	2204      	movs	r2, #4
 8013bda:	431a      	orrs	r2, r3
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	2184      	movs	r1, #132	@ 0x84
 8013be0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013be2:	23a4      	movs	r3, #164	@ 0xa4
 8013be4:	18fb      	adds	r3, r7, r3
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	2204      	movs	r2, #4
 8013bea:	4013      	ands	r3, r2
 8013bec:	d011      	beq.n	8013c12 <HAL_UART_IRQHandler+0x126>
 8013bee:	239c      	movs	r3, #156	@ 0x9c
 8013bf0:	18fb      	adds	r3, r7, r3
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	2201      	movs	r2, #1
 8013bf6:	4013      	ands	r3, r2
 8013bf8:	d00b      	beq.n	8013c12 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2204      	movs	r2, #4
 8013c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	2284      	movs	r2, #132	@ 0x84
 8013c06:	589b      	ldr	r3, [r3, r2]
 8013c08:	2202      	movs	r2, #2
 8013c0a:	431a      	orrs	r2, r3
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2184      	movs	r1, #132	@ 0x84
 8013c10:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013c12:	23a4      	movs	r3, #164	@ 0xa4
 8013c14:	18fb      	adds	r3, r7, r3
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	2208      	movs	r2, #8
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	d017      	beq.n	8013c4e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013c1e:	23a0      	movs	r3, #160	@ 0xa0
 8013c20:	18fb      	adds	r3, r7, r3
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2220      	movs	r2, #32
 8013c26:	4013      	ands	r3, r2
 8013c28:	d105      	bne.n	8013c36 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8013c2a:	239c      	movs	r3, #156	@ 0x9c
 8013c2c:	18fb      	adds	r3, r7, r3
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	2201      	movs	r2, #1
 8013c32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013c34:	d00b      	beq.n	8013c4e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2208      	movs	r2, #8
 8013c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	2284      	movs	r2, #132	@ 0x84
 8013c42:	589b      	ldr	r3, [r3, r2]
 8013c44:	2208      	movs	r2, #8
 8013c46:	431a      	orrs	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	2184      	movs	r1, #132	@ 0x84
 8013c4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013c4e:	23a4      	movs	r3, #164	@ 0xa4
 8013c50:	18fb      	adds	r3, r7, r3
 8013c52:	681a      	ldr	r2, [r3, #0]
 8013c54:	2380      	movs	r3, #128	@ 0x80
 8013c56:	011b      	lsls	r3, r3, #4
 8013c58:	4013      	ands	r3, r2
 8013c5a:	d013      	beq.n	8013c84 <HAL_UART_IRQHandler+0x198>
 8013c5c:	23a0      	movs	r3, #160	@ 0xa0
 8013c5e:	18fb      	adds	r3, r7, r3
 8013c60:	681a      	ldr	r2, [r3, #0]
 8013c62:	2380      	movs	r3, #128	@ 0x80
 8013c64:	04db      	lsls	r3, r3, #19
 8013c66:	4013      	ands	r3, r2
 8013c68:	d00c      	beq.n	8013c84 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2280      	movs	r2, #128	@ 0x80
 8013c70:	0112      	lsls	r2, r2, #4
 8013c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2284      	movs	r2, #132	@ 0x84
 8013c78:	589b      	ldr	r3, [r3, r2]
 8013c7a:	2220      	movs	r2, #32
 8013c7c:	431a      	orrs	r2, r3
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2184      	movs	r1, #132	@ 0x84
 8013c82:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2284      	movs	r2, #132	@ 0x84
 8013c88:	589b      	ldr	r3, [r3, r2]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d100      	bne.n	8013c90 <HAL_UART_IRQHandler+0x1a4>
 8013c8e:	e20b      	b.n	80140a8 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8013c90:	23a4      	movs	r3, #164	@ 0xa4
 8013c92:	18fb      	adds	r3, r7, r3
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2220      	movs	r2, #32
 8013c98:	4013      	ands	r3, r2
 8013c9a:	d00e      	beq.n	8013cba <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013c9c:	23a0      	movs	r3, #160	@ 0xa0
 8013c9e:	18fb      	adds	r3, r7, r3
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	2220      	movs	r2, #32
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	d008      	beq.n	8013cba <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d004      	beq.n	8013cba <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013cb4:	687a      	ldr	r2, [r7, #4]
 8013cb6:	0010      	movs	r0, r2
 8013cb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	2284      	movs	r2, #132	@ 0x84
 8013cbe:	589b      	ldr	r3, [r3, r2]
 8013cc0:	2194      	movs	r1, #148	@ 0x94
 8013cc2:	187a      	adds	r2, r7, r1
 8013cc4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	689b      	ldr	r3, [r3, #8]
 8013ccc:	2240      	movs	r2, #64	@ 0x40
 8013cce:	4013      	ands	r3, r2
 8013cd0:	2b40      	cmp	r3, #64	@ 0x40
 8013cd2:	d004      	beq.n	8013cde <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013cd4:	187b      	adds	r3, r7, r1
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	2228      	movs	r2, #40	@ 0x28
 8013cda:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013cdc:	d04b      	beq.n	8013d76 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	0018      	movs	r0, r3
 8013ce2:	f001 f861 	bl	8014da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	689b      	ldr	r3, [r3, #8]
 8013cec:	2240      	movs	r2, #64	@ 0x40
 8013cee:	4013      	ands	r3, r2
 8013cf0:	2b40      	cmp	r3, #64	@ 0x40
 8013cf2:	d139      	bne.n	8013d68 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8013cf8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8013cfa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013cfc:	2090      	movs	r0, #144	@ 0x90
 8013cfe:	183a      	adds	r2, r7, r0
 8013d00:	6013      	str	r3, [r2, #0]
 8013d02:	2301      	movs	r3, #1
 8013d04:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013d08:	f383 8810 	msr	PRIMASK, r3
}
 8013d0c:	46c0      	nop			@ (mov r8, r8)
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	689a      	ldr	r2, [r3, #8]
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2140      	movs	r1, #64	@ 0x40
 8013d1a:	438a      	bics	r2, r1
 8013d1c:	609a      	str	r2, [r3, #8]
 8013d1e:	183b      	adds	r3, r7, r0
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013d26:	f383 8810 	msr	PRIMASK, r3
}
 8013d2a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d012      	beq.n	8013d5a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d38:	4a17      	ldr	r2, [pc, #92]	@ (8013d98 <HAL_UART_IRQHandler+0x2ac>)
 8013d3a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d40:	0018      	movs	r0, r3
 8013d42:	f7f8 fea7 	bl	800ca94 <HAL_DMA_Abort_IT>
 8013d46:	1e03      	subs	r3, r0, #0
 8013d48:	d020      	beq.n	8013d8c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d54:	0018      	movs	r0, r3
 8013d56:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d58:	e018      	b.n	8013d8c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2298      	movs	r2, #152	@ 0x98
 8013d5e:	589b      	ldr	r3, [r3, r2]
 8013d60:	687a      	ldr	r2, [r7, #4]
 8013d62:	0010      	movs	r0, r2
 8013d64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d66:	e011      	b.n	8013d8c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2298      	movs	r2, #152	@ 0x98
 8013d6c:	589b      	ldr	r3, [r3, r2]
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	0010      	movs	r0, r2
 8013d72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d74:	e00a      	b.n	8013d8c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	2298      	movs	r2, #152	@ 0x98
 8013d7a:	589b      	ldr	r3, [r3, r2]
 8013d7c:	687a      	ldr	r2, [r7, #4]
 8013d7e:	0010      	movs	r0, r2
 8013d80:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	2284      	movs	r2, #132	@ 0x84
 8013d86:	2100      	movs	r1, #0
 8013d88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8013d8a:	e18d      	b.n	80140a8 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d8c:	46c0      	nop			@ (mov r8, r8)
    return;
 8013d8e:	e18b      	b.n	80140a8 <HAL_UART_IRQHandler+0x5bc>
 8013d90:	0000080f 	.word	0x0000080f
 8013d94:	04000120 	.word	0x04000120
 8013d98:	08015135 	.word	0x08015135

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013da0:	2b01      	cmp	r3, #1
 8013da2:	d000      	beq.n	8013da6 <HAL_UART_IRQHandler+0x2ba>
 8013da4:	e13d      	b.n	8014022 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013da6:	23a4      	movs	r3, #164	@ 0xa4
 8013da8:	18fb      	adds	r3, r7, r3
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2210      	movs	r2, #16
 8013dae:	4013      	ands	r3, r2
 8013db0:	d100      	bne.n	8013db4 <HAL_UART_IRQHandler+0x2c8>
 8013db2:	e136      	b.n	8014022 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013db4:	23a0      	movs	r3, #160	@ 0xa0
 8013db6:	18fb      	adds	r3, r7, r3
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	2210      	movs	r2, #16
 8013dbc:	4013      	ands	r3, r2
 8013dbe:	d100      	bne.n	8013dc2 <HAL_UART_IRQHandler+0x2d6>
 8013dc0:	e12f      	b.n	8014022 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	2210      	movs	r2, #16
 8013dc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	689b      	ldr	r3, [r3, #8]
 8013dd0:	2240      	movs	r2, #64	@ 0x40
 8013dd2:	4013      	ands	r3, r2
 8013dd4:	2b40      	cmp	r3, #64	@ 0x40
 8013dd6:	d000      	beq.n	8013dda <HAL_UART_IRQHandler+0x2ee>
 8013dd8:	e0a2      	b.n	8013f20 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	685a      	ldr	r2, [r3, #4]
 8013de2:	217e      	movs	r1, #126	@ 0x7e
 8013de4:	187b      	adds	r3, r7, r1
 8013de6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8013de8:	187b      	adds	r3, r7, r1
 8013dea:	881b      	ldrh	r3, [r3, #0]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d100      	bne.n	8013df2 <HAL_UART_IRQHandler+0x306>
 8013df0:	e15c      	b.n	80140ac <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	2258      	movs	r2, #88	@ 0x58
 8013df6:	5a9b      	ldrh	r3, [r3, r2]
 8013df8:	187a      	adds	r2, r7, r1
 8013dfa:	8812      	ldrh	r2, [r2, #0]
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d300      	bcc.n	8013e02 <HAL_UART_IRQHandler+0x316>
 8013e00:	e154      	b.n	80140ac <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	187a      	adds	r2, r7, r1
 8013e06:	215a      	movs	r1, #90	@ 0x5a
 8013e08:	8812      	ldrh	r2, [r2, #0]
 8013e0a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	2220      	movs	r2, #32
 8013e16:	4013      	ands	r3, r2
 8013e18:	d16f      	bne.n	8013efa <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8013e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013e24:	2301      	movs	r3, #1
 8013e26:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e2a:	f383 8810 	msr	PRIMASK, r3
}
 8013e2e:	46c0      	nop			@ (mov r8, r8)
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	681a      	ldr	r2, [r3, #0]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	49a0      	ldr	r1, [pc, #640]	@ (80140bc <HAL_UART_IRQHandler+0x5d0>)
 8013e3c:	400a      	ands	r2, r1
 8013e3e:	601a      	str	r2, [r3, #0]
 8013e40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e46:	f383 8810 	msr	PRIMASK, r3
}
 8013e4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8013e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8013e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e54:	677b      	str	r3, [r7, #116]	@ 0x74
 8013e56:	2301      	movs	r3, #1
 8013e58:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e5c:	f383 8810 	msr	PRIMASK, r3
}
 8013e60:	46c0      	nop			@ (mov r8, r8)
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	689a      	ldr	r2, [r3, #8]
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	2101      	movs	r1, #1
 8013e6e:	438a      	bics	r2, r1
 8013e70:	609a      	str	r2, [r3, #8]
 8013e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013e74:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e78:	f383 8810 	msr	PRIMASK, r3
}
 8013e7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8013e82:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8013e84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013e86:	673b      	str	r3, [r7, #112]	@ 0x70
 8013e88:	2301      	movs	r3, #1
 8013e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e8e:	f383 8810 	msr	PRIMASK, r3
}
 8013e92:	46c0      	nop			@ (mov r8, r8)
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	689a      	ldr	r2, [r3, #8]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2140      	movs	r1, #64	@ 0x40
 8013ea0:	438a      	bics	r2, r1
 8013ea2:	609a      	str	r2, [r3, #8]
 8013ea4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013ea6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013eaa:	f383 8810 	msr	PRIMASK, r3
}
 8013eae:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2280      	movs	r2, #128	@ 0x80
 8013eb4:	2120      	movs	r1, #32
 8013eb6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2200      	movs	r2, #0
 8013ebc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8013ec2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8013ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013ec8:	2301      	movs	r3, #1
 8013eca:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ecc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ece:	f383 8810 	msr	PRIMASK, r3
}
 8013ed2:	46c0      	nop			@ (mov r8, r8)
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	681a      	ldr	r2, [r3, #0]
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2110      	movs	r1, #16
 8013ee0:	438a      	bics	r2, r1
 8013ee2:	601a      	str	r2, [r3, #0]
 8013ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013eea:	f383 8810 	msr	PRIMASK, r3
}
 8013eee:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ef4:	0018      	movs	r0, r3
 8013ef6:	f7f8 fd8d 	bl	800ca14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2202      	movs	r2, #2
 8013efe:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	22ac      	movs	r2, #172	@ 0xac
 8013f04:	589b      	ldr	r3, [r3, r2]
 8013f06:	687a      	ldr	r2, [r7, #4]
 8013f08:	2158      	movs	r1, #88	@ 0x58
 8013f0a:	5a51      	ldrh	r1, [r2, r1]
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	205a      	movs	r0, #90	@ 0x5a
 8013f10:	5a12      	ldrh	r2, [r2, r0]
 8013f12:	b292      	uxth	r2, r2
 8013f14:	1a8a      	subs	r2, r1, r2
 8013f16:	b291      	uxth	r1, r2
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	0010      	movs	r0, r2
 8013f1c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013f1e:	e0c5      	b.n	80140ac <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2258      	movs	r2, #88	@ 0x58
 8013f24:	5a99      	ldrh	r1, [r3, r2]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	225a      	movs	r2, #90	@ 0x5a
 8013f2a:	5a9b      	ldrh	r3, [r3, r2]
 8013f2c:	b29a      	uxth	r2, r3
 8013f2e:	208e      	movs	r0, #142	@ 0x8e
 8013f30:	183b      	adds	r3, r7, r0
 8013f32:	1a8a      	subs	r2, r1, r2
 8013f34:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	225a      	movs	r2, #90	@ 0x5a
 8013f3a:	5a9b      	ldrh	r3, [r3, r2]
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d100      	bne.n	8013f44 <HAL_UART_IRQHandler+0x458>
 8013f42:	e0b5      	b.n	80140b0 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8013f44:	183b      	adds	r3, r7, r0
 8013f46:	881b      	ldrh	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d100      	bne.n	8013f4e <HAL_UART_IRQHandler+0x462>
 8013f4c:	e0b0      	b.n	80140b0 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8013f52:	60fb      	str	r3, [r7, #12]
  return(result);
 8013f54:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013f56:	2488      	movs	r4, #136	@ 0x88
 8013f58:	193a      	adds	r2, r7, r4
 8013f5a:	6013      	str	r3, [r2, #0]
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	f383 8810 	msr	PRIMASK, r3
}
 8013f66:	46c0      	nop			@ (mov r8, r8)
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	681a      	ldr	r2, [r3, #0]
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	4953      	ldr	r1, [pc, #332]	@ (80140c0 <HAL_UART_IRQHandler+0x5d4>)
 8013f74:	400a      	ands	r2, r1
 8013f76:	601a      	str	r2, [r3, #0]
 8013f78:	193b      	adds	r3, r7, r4
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	f383 8810 	msr	PRIMASK, r3
}
 8013f84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f86:	f3ef 8310 	mrs	r3, PRIMASK
 8013f8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8013f8c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f8e:	2484      	movs	r4, #132	@ 0x84
 8013f90:	193a      	adds	r2, r7, r4
 8013f92:	6013      	str	r3, [r2, #0]
 8013f94:	2301      	movs	r3, #1
 8013f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	f383 8810 	msr	PRIMASK, r3
}
 8013f9e:	46c0      	nop			@ (mov r8, r8)
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	689a      	ldr	r2, [r3, #8]
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2101      	movs	r1, #1
 8013fac:	438a      	bics	r2, r1
 8013fae:	609a      	str	r2, [r3, #8]
 8013fb0:	193b      	adds	r3, r7, r4
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fb6:	6a3b      	ldr	r3, [r7, #32]
 8013fb8:	f383 8810 	msr	PRIMASK, r3
}
 8013fbc:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2280      	movs	r2, #128	@ 0x80
 8013fc2:	2120      	movs	r1, #32
 8013fc4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8013fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013fda:	2480      	movs	r4, #128	@ 0x80
 8013fdc:	193a      	adds	r2, r7, r4
 8013fde:	6013      	str	r3, [r2, #0]
 8013fe0:	2301      	movs	r3, #1
 8013fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fe6:	f383 8810 	msr	PRIMASK, r3
}
 8013fea:	46c0      	nop			@ (mov r8, r8)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	681a      	ldr	r2, [r3, #0]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	2110      	movs	r1, #16
 8013ff8:	438a      	bics	r2, r1
 8013ffa:	601a      	str	r2, [r3, #0]
 8013ffc:	193b      	adds	r3, r7, r4
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014004:	f383 8810 	msr	PRIMASK, r3
}
 8014008:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2202      	movs	r2, #2
 801400e:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	22ac      	movs	r2, #172	@ 0xac
 8014014:	589b      	ldr	r3, [r3, r2]
 8014016:	183a      	adds	r2, r7, r0
 8014018:	8811      	ldrh	r1, [r2, #0]
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	0010      	movs	r0, r2
 801401e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014020:	e046      	b.n	80140b0 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014022:	23a4      	movs	r3, #164	@ 0xa4
 8014024:	18fb      	adds	r3, r7, r3
 8014026:	681a      	ldr	r2, [r3, #0]
 8014028:	2380      	movs	r3, #128	@ 0x80
 801402a:	035b      	lsls	r3, r3, #13
 801402c:	4013      	ands	r3, r2
 801402e:	d012      	beq.n	8014056 <HAL_UART_IRQHandler+0x56a>
 8014030:	239c      	movs	r3, #156	@ 0x9c
 8014032:	18fb      	adds	r3, r7, r3
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	2380      	movs	r3, #128	@ 0x80
 8014038:	03db      	lsls	r3, r3, #15
 801403a:	4013      	ands	r3, r2
 801403c:	d00b      	beq.n	8014056 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2280      	movs	r2, #128	@ 0x80
 8014044:	0352      	lsls	r2, r2, #13
 8014046:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	22a8      	movs	r2, #168	@ 0xa8
 801404c:	589b      	ldr	r3, [r3, r2]
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	0010      	movs	r0, r2
 8014052:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014054:	e02f      	b.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8014056:	23a4      	movs	r3, #164	@ 0xa4
 8014058:	18fb      	adds	r3, r7, r3
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	2280      	movs	r2, #128	@ 0x80
 801405e:	4013      	ands	r3, r2
 8014060:	d00f      	beq.n	8014082 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8014062:	23a0      	movs	r3, #160	@ 0xa0
 8014064:	18fb      	adds	r3, r7, r3
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	2280      	movs	r2, #128	@ 0x80
 801406a:	4013      	ands	r3, r2
 801406c:	d009      	beq.n	8014082 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014072:	2b00      	cmp	r3, #0
 8014074:	d01e      	beq.n	80140b4 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801407a:	687a      	ldr	r2, [r7, #4]
 801407c:	0010      	movs	r0, r2
 801407e:	4798      	blx	r3
    }
    return;
 8014080:	e018      	b.n	80140b4 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014082:	23a4      	movs	r3, #164	@ 0xa4
 8014084:	18fb      	adds	r3, r7, r3
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	2240      	movs	r2, #64	@ 0x40
 801408a:	4013      	ands	r3, r2
 801408c:	d013      	beq.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
 801408e:	23a0      	movs	r3, #160	@ 0xa0
 8014090:	18fb      	adds	r3, r7, r3
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2240      	movs	r2, #64	@ 0x40
 8014096:	4013      	ands	r3, r2
 8014098:	d00d      	beq.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	0018      	movs	r0, r3
 801409e:	f001 f862 	bl	8015166 <UART_EndTransmit_IT>
    return;
 80140a2:	e008      	b.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80140a4:	46c0      	nop			@ (mov r8, r8)
 80140a6:	e006      	b.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80140a8:	46c0      	nop			@ (mov r8, r8)
 80140aa:	e004      	b.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80140ac:	46c0      	nop			@ (mov r8, r8)
 80140ae:	e002      	b.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
      return;
 80140b0:	46c0      	nop			@ (mov r8, r8)
 80140b2:	e000      	b.n	80140b6 <HAL_UART_IRQHandler+0x5ca>
    return;
 80140b4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80140b6:	46bd      	mov	sp, r7
 80140b8:	b02b      	add	sp, #172	@ 0xac
 80140ba:	bd90      	pop	{r4, r7, pc}
 80140bc:	fffffeff 	.word	0xfffffeff
 80140c0:	fffffedf 	.word	0xfffffedf

080140c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b082      	sub	sp, #8
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80140cc:	46c0      	nop			@ (mov r8, r8)
 80140ce:	46bd      	mov	sp, r7
 80140d0:	b002      	add	sp, #8
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80140dc:	46c0      	nop			@ (mov r8, r8)
 80140de:	46bd      	mov	sp, r7
 80140e0:	b002      	add	sp, #8
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80140ec:	46c0      	nop			@ (mov r8, r8)
 80140ee:	46bd      	mov	sp, r7
 80140f0:	b002      	add	sp, #8
 80140f2:	bd80      	pop	{r7, pc}

080140f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80140fc:	46c0      	nop			@ (mov r8, r8)
 80140fe:	46bd      	mov	sp, r7
 8014100:	b002      	add	sp, #8
 8014102:	bd80      	pop	{r7, pc}

08014104 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b082      	sub	sp, #8
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801410c:	46c0      	nop			@ (mov r8, r8)
 801410e:	46bd      	mov	sp, r7
 8014110:	b002      	add	sp, #8
 8014112:	bd80      	pop	{r7, pc}

08014114 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801411c:	46c0      	nop			@ (mov r8, r8)
 801411e:	46bd      	mov	sp, r7
 8014120:	b002      	add	sp, #8
 8014122:	bd80      	pop	{r7, pc}

08014124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	000a      	movs	r2, r1
 801412e:	1cbb      	adds	r3, r7, #2
 8014130:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8014132:	46c0      	nop			@ (mov r8, r8)
 8014134:	46bd      	mov	sp, r7
 8014136:	b002      	add	sp, #8
 8014138:	bd80      	pop	{r7, pc}
	...

0801413c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801413c:	b580      	push	{r7, lr}
 801413e:	b082      	sub	sp, #8
 8014140:	af00      	add	r7, sp, #0
 8014142:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2188      	movs	r1, #136	@ 0x88
 8014148:	4a14      	ldr	r2, [pc, #80]	@ (801419c <UART_InitCallbacksToDefault+0x60>)
 801414a:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	218c      	movs	r1, #140	@ 0x8c
 8014150:	4a13      	ldr	r2, [pc, #76]	@ (80141a0 <UART_InitCallbacksToDefault+0x64>)
 8014152:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2190      	movs	r1, #144	@ 0x90
 8014158:	4a12      	ldr	r2, [pc, #72]	@ (80141a4 <UART_InitCallbacksToDefault+0x68>)
 801415a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2194      	movs	r1, #148	@ 0x94
 8014160:	4a11      	ldr	r2, [pc, #68]	@ (80141a8 <UART_InitCallbacksToDefault+0x6c>)
 8014162:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2198      	movs	r1, #152	@ 0x98
 8014168:	4a10      	ldr	r2, [pc, #64]	@ (80141ac <UART_InitCallbacksToDefault+0x70>)
 801416a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	219c      	movs	r1, #156	@ 0x9c
 8014170:	4a0f      	ldr	r2, [pc, #60]	@ (80141b0 <UART_InitCallbacksToDefault+0x74>)
 8014172:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	21a0      	movs	r1, #160	@ 0xa0
 8014178:	4a0e      	ldr	r2, [pc, #56]	@ (80141b4 <UART_InitCallbacksToDefault+0x78>)
 801417a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	21a4      	movs	r1, #164	@ 0xa4
 8014180:	4a0d      	ldr	r2, [pc, #52]	@ (80141b8 <UART_InitCallbacksToDefault+0x7c>)
 8014182:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	21a8      	movs	r1, #168	@ 0xa8
 8014188:	4a0c      	ldr	r2, [pc, #48]	@ (80141bc <UART_InitCallbacksToDefault+0x80>)
 801418a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	21ac      	movs	r1, #172	@ 0xac
 8014190:	4a0b      	ldr	r2, [pc, #44]	@ (80141c0 <UART_InitCallbacksToDefault+0x84>)
 8014192:	505a      	str	r2, [r3, r1]

}
 8014194:	46c0      	nop			@ (mov r8, r8)
 8014196:	46bd      	mov	sp, r7
 8014198:	b002      	add	sp, #8
 801419a:	bd80      	pop	{r7, pc}
 801419c:	080140d5 	.word	0x080140d5
 80141a0:	080140c5 	.word	0x080140c5
 80141a4:	080140e5 	.word	0x080140e5
 80141a8:	08007409 	.word	0x08007409
 80141ac:	08003a75 	.word	0x08003a75
 80141b0:	080140f5 	.word	0x080140f5
 80141b4:	08014105 	.word	0x08014105
 80141b8:	08014115 	.word	0x08014115
 80141bc:	08015559 	.word	0x08015559
 80141c0:	08014125 	.word	0x08014125

080141c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80141c4:	b5b0      	push	{r4, r5, r7, lr}
 80141c6:	b08e      	sub	sp, #56	@ 0x38
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80141cc:	231a      	movs	r3, #26
 80141ce:	2218      	movs	r2, #24
 80141d0:	189b      	adds	r3, r3, r2
 80141d2:	19db      	adds	r3, r3, r7
 80141d4:	2200      	movs	r2, #0
 80141d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80141d8:	69fb      	ldr	r3, [r7, #28]
 80141da:	689a      	ldr	r2, [r3, #8]
 80141dc:	69fb      	ldr	r3, [r7, #28]
 80141de:	691b      	ldr	r3, [r3, #16]
 80141e0:	431a      	orrs	r2, r3
 80141e2:	69fb      	ldr	r3, [r7, #28]
 80141e4:	695b      	ldr	r3, [r3, #20]
 80141e6:	431a      	orrs	r2, r3
 80141e8:	69fb      	ldr	r3, [r7, #28]
 80141ea:	69db      	ldr	r3, [r3, #28]
 80141ec:	4313      	orrs	r3, r2
 80141ee:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	4ac3      	ldr	r2, [pc, #780]	@ (8014504 <UART_SetConfig+0x340>)
 80141f8:	4013      	ands	r3, r2
 80141fa:	0019      	movs	r1, r3
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014202:	430a      	orrs	r2, r1
 8014204:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	4abe      	ldr	r2, [pc, #760]	@ (8014508 <UART_SetConfig+0x344>)
 801420e:	4013      	ands	r3, r2
 8014210:	0019      	movs	r1, r3
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	68da      	ldr	r2, [r3, #12]
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	430a      	orrs	r2, r1
 801421c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	699b      	ldr	r3, [r3, #24]
 8014222:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	4ab8      	ldr	r2, [pc, #736]	@ (801450c <UART_SetConfig+0x348>)
 801422a:	4293      	cmp	r3, r2
 801422c:	d004      	beq.n	8014238 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	6a1b      	ldr	r3, [r3, #32]
 8014232:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014234:	4313      	orrs	r3, r2
 8014236:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014238:	69fb      	ldr	r3, [r7, #28]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	689b      	ldr	r3, [r3, #8]
 801423e:	4ab4      	ldr	r2, [pc, #720]	@ (8014510 <UART_SetConfig+0x34c>)
 8014240:	4013      	ands	r3, r2
 8014242:	0019      	movs	r1, r3
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801424a:	430a      	orrs	r2, r1
 801424c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	4ab0      	ldr	r2, [pc, #704]	@ (8014514 <UART_SetConfig+0x350>)
 8014254:	4293      	cmp	r3, r2
 8014256:	d131      	bne.n	80142bc <UART_SetConfig+0xf8>
 8014258:	4baf      	ldr	r3, [pc, #700]	@ (8014518 <UART_SetConfig+0x354>)
 801425a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801425c:	2203      	movs	r2, #3
 801425e:	4013      	ands	r3, r2
 8014260:	2b03      	cmp	r3, #3
 8014262:	d01d      	beq.n	80142a0 <UART_SetConfig+0xdc>
 8014264:	d823      	bhi.n	80142ae <UART_SetConfig+0xea>
 8014266:	2b02      	cmp	r3, #2
 8014268:	d00c      	beq.n	8014284 <UART_SetConfig+0xc0>
 801426a:	d820      	bhi.n	80142ae <UART_SetConfig+0xea>
 801426c:	2b00      	cmp	r3, #0
 801426e:	d002      	beq.n	8014276 <UART_SetConfig+0xb2>
 8014270:	2b01      	cmp	r3, #1
 8014272:	d00e      	beq.n	8014292 <UART_SetConfig+0xce>
 8014274:	e01b      	b.n	80142ae <UART_SetConfig+0xea>
 8014276:	231b      	movs	r3, #27
 8014278:	2218      	movs	r2, #24
 801427a:	189b      	adds	r3, r3, r2
 801427c:	19db      	adds	r3, r3, r7
 801427e:	2201      	movs	r2, #1
 8014280:	701a      	strb	r2, [r3, #0]
 8014282:	e0b4      	b.n	80143ee <UART_SetConfig+0x22a>
 8014284:	231b      	movs	r3, #27
 8014286:	2218      	movs	r2, #24
 8014288:	189b      	adds	r3, r3, r2
 801428a:	19db      	adds	r3, r3, r7
 801428c:	2202      	movs	r2, #2
 801428e:	701a      	strb	r2, [r3, #0]
 8014290:	e0ad      	b.n	80143ee <UART_SetConfig+0x22a>
 8014292:	231b      	movs	r3, #27
 8014294:	2218      	movs	r2, #24
 8014296:	189b      	adds	r3, r3, r2
 8014298:	19db      	adds	r3, r3, r7
 801429a:	2204      	movs	r2, #4
 801429c:	701a      	strb	r2, [r3, #0]
 801429e:	e0a6      	b.n	80143ee <UART_SetConfig+0x22a>
 80142a0:	231b      	movs	r3, #27
 80142a2:	2218      	movs	r2, #24
 80142a4:	189b      	adds	r3, r3, r2
 80142a6:	19db      	adds	r3, r3, r7
 80142a8:	2208      	movs	r2, #8
 80142aa:	701a      	strb	r2, [r3, #0]
 80142ac:	e09f      	b.n	80143ee <UART_SetConfig+0x22a>
 80142ae:	231b      	movs	r3, #27
 80142b0:	2218      	movs	r2, #24
 80142b2:	189b      	adds	r3, r3, r2
 80142b4:	19db      	adds	r3, r3, r7
 80142b6:	2210      	movs	r2, #16
 80142b8:	701a      	strb	r2, [r3, #0]
 80142ba:	e098      	b.n	80143ee <UART_SetConfig+0x22a>
 80142bc:	69fb      	ldr	r3, [r7, #28]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	4a96      	ldr	r2, [pc, #600]	@ (801451c <UART_SetConfig+0x358>)
 80142c2:	4293      	cmp	r3, r2
 80142c4:	d131      	bne.n	801432a <UART_SetConfig+0x166>
 80142c6:	4b94      	ldr	r3, [pc, #592]	@ (8014518 <UART_SetConfig+0x354>)
 80142c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80142ca:	220c      	movs	r2, #12
 80142cc:	4013      	ands	r3, r2
 80142ce:	2b0c      	cmp	r3, #12
 80142d0:	d01d      	beq.n	801430e <UART_SetConfig+0x14a>
 80142d2:	d823      	bhi.n	801431c <UART_SetConfig+0x158>
 80142d4:	2b08      	cmp	r3, #8
 80142d6:	d00c      	beq.n	80142f2 <UART_SetConfig+0x12e>
 80142d8:	d820      	bhi.n	801431c <UART_SetConfig+0x158>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d002      	beq.n	80142e4 <UART_SetConfig+0x120>
 80142de:	2b04      	cmp	r3, #4
 80142e0:	d00e      	beq.n	8014300 <UART_SetConfig+0x13c>
 80142e2:	e01b      	b.n	801431c <UART_SetConfig+0x158>
 80142e4:	231b      	movs	r3, #27
 80142e6:	2218      	movs	r2, #24
 80142e8:	189b      	adds	r3, r3, r2
 80142ea:	19db      	adds	r3, r3, r7
 80142ec:	2200      	movs	r2, #0
 80142ee:	701a      	strb	r2, [r3, #0]
 80142f0:	e07d      	b.n	80143ee <UART_SetConfig+0x22a>
 80142f2:	231b      	movs	r3, #27
 80142f4:	2218      	movs	r2, #24
 80142f6:	189b      	adds	r3, r3, r2
 80142f8:	19db      	adds	r3, r3, r7
 80142fa:	2202      	movs	r2, #2
 80142fc:	701a      	strb	r2, [r3, #0]
 80142fe:	e076      	b.n	80143ee <UART_SetConfig+0x22a>
 8014300:	231b      	movs	r3, #27
 8014302:	2218      	movs	r2, #24
 8014304:	189b      	adds	r3, r3, r2
 8014306:	19db      	adds	r3, r3, r7
 8014308:	2204      	movs	r2, #4
 801430a:	701a      	strb	r2, [r3, #0]
 801430c:	e06f      	b.n	80143ee <UART_SetConfig+0x22a>
 801430e:	231b      	movs	r3, #27
 8014310:	2218      	movs	r2, #24
 8014312:	189b      	adds	r3, r3, r2
 8014314:	19db      	adds	r3, r3, r7
 8014316:	2208      	movs	r2, #8
 8014318:	701a      	strb	r2, [r3, #0]
 801431a:	e068      	b.n	80143ee <UART_SetConfig+0x22a>
 801431c:	231b      	movs	r3, #27
 801431e:	2218      	movs	r2, #24
 8014320:	189b      	adds	r3, r3, r2
 8014322:	19db      	adds	r3, r3, r7
 8014324:	2210      	movs	r2, #16
 8014326:	701a      	strb	r2, [r3, #0]
 8014328:	e061      	b.n	80143ee <UART_SetConfig+0x22a>
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	4a7c      	ldr	r2, [pc, #496]	@ (8014520 <UART_SetConfig+0x35c>)
 8014330:	4293      	cmp	r3, r2
 8014332:	d106      	bne.n	8014342 <UART_SetConfig+0x17e>
 8014334:	231b      	movs	r3, #27
 8014336:	2218      	movs	r2, #24
 8014338:	189b      	adds	r3, r3, r2
 801433a:	19db      	adds	r3, r3, r7
 801433c:	2200      	movs	r2, #0
 801433e:	701a      	strb	r2, [r3, #0]
 8014340:	e055      	b.n	80143ee <UART_SetConfig+0x22a>
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	4a77      	ldr	r2, [pc, #476]	@ (8014524 <UART_SetConfig+0x360>)
 8014348:	4293      	cmp	r3, r2
 801434a:	d106      	bne.n	801435a <UART_SetConfig+0x196>
 801434c:	231b      	movs	r3, #27
 801434e:	2218      	movs	r2, #24
 8014350:	189b      	adds	r3, r3, r2
 8014352:	19db      	adds	r3, r3, r7
 8014354:	2200      	movs	r2, #0
 8014356:	701a      	strb	r2, [r3, #0]
 8014358:	e049      	b.n	80143ee <UART_SetConfig+0x22a>
 801435a:	69fb      	ldr	r3, [r7, #28]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	4a6b      	ldr	r2, [pc, #428]	@ (801450c <UART_SetConfig+0x348>)
 8014360:	4293      	cmp	r3, r2
 8014362:	d13e      	bne.n	80143e2 <UART_SetConfig+0x21e>
 8014364:	4b6c      	ldr	r3, [pc, #432]	@ (8014518 <UART_SetConfig+0x354>)
 8014366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014368:	23c0      	movs	r3, #192	@ 0xc0
 801436a:	011b      	lsls	r3, r3, #4
 801436c:	4013      	ands	r3, r2
 801436e:	22c0      	movs	r2, #192	@ 0xc0
 8014370:	0112      	lsls	r2, r2, #4
 8014372:	4293      	cmp	r3, r2
 8014374:	d027      	beq.n	80143c6 <UART_SetConfig+0x202>
 8014376:	22c0      	movs	r2, #192	@ 0xc0
 8014378:	0112      	lsls	r2, r2, #4
 801437a:	4293      	cmp	r3, r2
 801437c:	d82a      	bhi.n	80143d4 <UART_SetConfig+0x210>
 801437e:	2280      	movs	r2, #128	@ 0x80
 8014380:	0112      	lsls	r2, r2, #4
 8014382:	4293      	cmp	r3, r2
 8014384:	d011      	beq.n	80143aa <UART_SetConfig+0x1e6>
 8014386:	2280      	movs	r2, #128	@ 0x80
 8014388:	0112      	lsls	r2, r2, #4
 801438a:	4293      	cmp	r3, r2
 801438c:	d822      	bhi.n	80143d4 <UART_SetConfig+0x210>
 801438e:	2b00      	cmp	r3, #0
 8014390:	d004      	beq.n	801439c <UART_SetConfig+0x1d8>
 8014392:	2280      	movs	r2, #128	@ 0x80
 8014394:	00d2      	lsls	r2, r2, #3
 8014396:	4293      	cmp	r3, r2
 8014398:	d00e      	beq.n	80143b8 <UART_SetConfig+0x1f4>
 801439a:	e01b      	b.n	80143d4 <UART_SetConfig+0x210>
 801439c:	231b      	movs	r3, #27
 801439e:	2218      	movs	r2, #24
 80143a0:	189b      	adds	r3, r3, r2
 80143a2:	19db      	adds	r3, r3, r7
 80143a4:	2200      	movs	r2, #0
 80143a6:	701a      	strb	r2, [r3, #0]
 80143a8:	e021      	b.n	80143ee <UART_SetConfig+0x22a>
 80143aa:	231b      	movs	r3, #27
 80143ac:	2218      	movs	r2, #24
 80143ae:	189b      	adds	r3, r3, r2
 80143b0:	19db      	adds	r3, r3, r7
 80143b2:	2202      	movs	r2, #2
 80143b4:	701a      	strb	r2, [r3, #0]
 80143b6:	e01a      	b.n	80143ee <UART_SetConfig+0x22a>
 80143b8:	231b      	movs	r3, #27
 80143ba:	2218      	movs	r2, #24
 80143bc:	189b      	adds	r3, r3, r2
 80143be:	19db      	adds	r3, r3, r7
 80143c0:	2204      	movs	r2, #4
 80143c2:	701a      	strb	r2, [r3, #0]
 80143c4:	e013      	b.n	80143ee <UART_SetConfig+0x22a>
 80143c6:	231b      	movs	r3, #27
 80143c8:	2218      	movs	r2, #24
 80143ca:	189b      	adds	r3, r3, r2
 80143cc:	19db      	adds	r3, r3, r7
 80143ce:	2208      	movs	r2, #8
 80143d0:	701a      	strb	r2, [r3, #0]
 80143d2:	e00c      	b.n	80143ee <UART_SetConfig+0x22a>
 80143d4:	231b      	movs	r3, #27
 80143d6:	2218      	movs	r2, #24
 80143d8:	189b      	adds	r3, r3, r2
 80143da:	19db      	adds	r3, r3, r7
 80143dc:	2210      	movs	r2, #16
 80143de:	701a      	strb	r2, [r3, #0]
 80143e0:	e005      	b.n	80143ee <UART_SetConfig+0x22a>
 80143e2:	231b      	movs	r3, #27
 80143e4:	2218      	movs	r2, #24
 80143e6:	189b      	adds	r3, r3, r2
 80143e8:	19db      	adds	r3, r3, r7
 80143ea:	2210      	movs	r2, #16
 80143ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80143ee:	69fb      	ldr	r3, [r7, #28]
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	4a46      	ldr	r2, [pc, #280]	@ (801450c <UART_SetConfig+0x348>)
 80143f4:	4293      	cmp	r3, r2
 80143f6:	d000      	beq.n	80143fa <UART_SetConfig+0x236>
 80143f8:	e09a      	b.n	8014530 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80143fa:	231b      	movs	r3, #27
 80143fc:	2218      	movs	r2, #24
 80143fe:	189b      	adds	r3, r3, r2
 8014400:	19db      	adds	r3, r3, r7
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	2b08      	cmp	r3, #8
 8014406:	d01d      	beq.n	8014444 <UART_SetConfig+0x280>
 8014408:	dc20      	bgt.n	801444c <UART_SetConfig+0x288>
 801440a:	2b04      	cmp	r3, #4
 801440c:	d015      	beq.n	801443a <UART_SetConfig+0x276>
 801440e:	dc1d      	bgt.n	801444c <UART_SetConfig+0x288>
 8014410:	2b00      	cmp	r3, #0
 8014412:	d002      	beq.n	801441a <UART_SetConfig+0x256>
 8014414:	2b02      	cmp	r3, #2
 8014416:	d005      	beq.n	8014424 <UART_SetConfig+0x260>
 8014418:	e018      	b.n	801444c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801441a:	f7fd ff3f 	bl	801229c <HAL_RCC_GetPCLK1Freq>
 801441e:	0003      	movs	r3, r0
 8014420:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014422:	e01c      	b.n	801445e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014424:	4b3c      	ldr	r3, [pc, #240]	@ (8014518 <UART_SetConfig+0x354>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2210      	movs	r2, #16
 801442a:	4013      	ands	r3, r2
 801442c:	d002      	beq.n	8014434 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801442e:	4b3e      	ldr	r3, [pc, #248]	@ (8014528 <UART_SetConfig+0x364>)
 8014430:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014432:	e014      	b.n	801445e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8014434:	4b3d      	ldr	r3, [pc, #244]	@ (801452c <UART_SetConfig+0x368>)
 8014436:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014438:	e011      	b.n	801445e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801443a:	f7fd fe7f 	bl	801213c <HAL_RCC_GetSysClockFreq>
 801443e:	0003      	movs	r3, r0
 8014440:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014442:	e00c      	b.n	801445e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014444:	2380      	movs	r3, #128	@ 0x80
 8014446:	021b      	lsls	r3, r3, #8
 8014448:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801444a:	e008      	b.n	801445e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 801444c:	2300      	movs	r3, #0
 801444e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8014450:	231a      	movs	r3, #26
 8014452:	2218      	movs	r2, #24
 8014454:	189b      	adds	r3, r3, r2
 8014456:	19db      	adds	r3, r3, r7
 8014458:	2201      	movs	r2, #1
 801445a:	701a      	strb	r2, [r3, #0]
        break;
 801445c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801445e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014460:	2b00      	cmp	r3, #0
 8014462:	d100      	bne.n	8014466 <UART_SetConfig+0x2a2>
 8014464:	e133      	b.n	80146ce <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	685a      	ldr	r2, [r3, #4]
 801446a:	0013      	movs	r3, r2
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	189b      	adds	r3, r3, r2
 8014470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014472:	429a      	cmp	r2, r3
 8014474:	d305      	bcc.n	8014482 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8014476:	69fb      	ldr	r3, [r7, #28]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801447c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801447e:	429a      	cmp	r2, r3
 8014480:	d906      	bls.n	8014490 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8014482:	231a      	movs	r3, #26
 8014484:	2218      	movs	r2, #24
 8014486:	189b      	adds	r3, r3, r2
 8014488:	19db      	adds	r3, r3, r7
 801448a:	2201      	movs	r2, #1
 801448c:	701a      	strb	r2, [r3, #0]
 801448e:	e11e      	b.n	80146ce <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014492:	613b      	str	r3, [r7, #16]
 8014494:	2300      	movs	r3, #0
 8014496:	617b      	str	r3, [r7, #20]
 8014498:	6939      	ldr	r1, [r7, #16]
 801449a:	697a      	ldr	r2, [r7, #20]
 801449c:	000b      	movs	r3, r1
 801449e:	0e1b      	lsrs	r3, r3, #24
 80144a0:	0010      	movs	r0, r2
 80144a2:	0205      	lsls	r5, r0, #8
 80144a4:	431d      	orrs	r5, r3
 80144a6:	000b      	movs	r3, r1
 80144a8:	021c      	lsls	r4, r3, #8
 80144aa:	69fb      	ldr	r3, [r7, #28]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	085b      	lsrs	r3, r3, #1
 80144b0:	60bb      	str	r3, [r7, #8]
 80144b2:	2300      	movs	r3, #0
 80144b4:	60fb      	str	r3, [r7, #12]
 80144b6:	68b8      	ldr	r0, [r7, #8]
 80144b8:	68f9      	ldr	r1, [r7, #12]
 80144ba:	1900      	adds	r0, r0, r4
 80144bc:	4169      	adcs	r1, r5
 80144be:	69fb      	ldr	r3, [r7, #28]
 80144c0:	685b      	ldr	r3, [r3, #4]
 80144c2:	603b      	str	r3, [r7, #0]
 80144c4:	2300      	movs	r3, #0
 80144c6:	607b      	str	r3, [r7, #4]
 80144c8:	683a      	ldr	r2, [r7, #0]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f7ec f858 	bl	8000580 <__aeabi_uldivmod>
 80144d0:	0002      	movs	r2, r0
 80144d2:	000b      	movs	r3, r1
 80144d4:	0013      	movs	r3, r2
 80144d6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80144d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144da:	23c0      	movs	r3, #192	@ 0xc0
 80144dc:	009b      	lsls	r3, r3, #2
 80144de:	429a      	cmp	r2, r3
 80144e0:	d309      	bcc.n	80144f6 <UART_SetConfig+0x332>
 80144e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144e4:	2380      	movs	r3, #128	@ 0x80
 80144e6:	035b      	lsls	r3, r3, #13
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d204      	bcs.n	80144f6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80144ec:	69fb      	ldr	r3, [r7, #28]
 80144ee:	681b      	ldr	r3, [r3, #0]
 80144f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144f2:	60da      	str	r2, [r3, #12]
 80144f4:	e0eb      	b.n	80146ce <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80144f6:	231a      	movs	r3, #26
 80144f8:	2218      	movs	r2, #24
 80144fa:	189b      	adds	r3, r3, r2
 80144fc:	19db      	adds	r3, r3, r7
 80144fe:	2201      	movs	r2, #1
 8014500:	701a      	strb	r2, [r3, #0]
 8014502:	e0e4      	b.n	80146ce <UART_SetConfig+0x50a>
 8014504:	efff69f3 	.word	0xefff69f3
 8014508:	ffffcfff 	.word	0xffffcfff
 801450c:	40004800 	.word	0x40004800
 8014510:	fffff4ff 	.word	0xfffff4ff
 8014514:	40013800 	.word	0x40013800
 8014518:	40021000 	.word	0x40021000
 801451c:	40004400 	.word	0x40004400
 8014520:	40004c00 	.word	0x40004c00
 8014524:	40005000 	.word	0x40005000
 8014528:	003d0900 	.word	0x003d0900
 801452c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	69da      	ldr	r2, [r3, #28]
 8014534:	2380      	movs	r3, #128	@ 0x80
 8014536:	021b      	lsls	r3, r3, #8
 8014538:	429a      	cmp	r2, r3
 801453a:	d000      	beq.n	801453e <UART_SetConfig+0x37a>
 801453c:	e070      	b.n	8014620 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801453e:	231b      	movs	r3, #27
 8014540:	2218      	movs	r2, #24
 8014542:	189b      	adds	r3, r3, r2
 8014544:	19db      	adds	r3, r3, r7
 8014546:	781b      	ldrb	r3, [r3, #0]
 8014548:	2b08      	cmp	r3, #8
 801454a:	d822      	bhi.n	8014592 <UART_SetConfig+0x3ce>
 801454c:	009a      	lsls	r2, r3, #2
 801454e:	4b67      	ldr	r3, [pc, #412]	@ (80146ec <UART_SetConfig+0x528>)
 8014550:	18d3      	adds	r3, r2, r3
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014556:	f7fd fea1 	bl	801229c <HAL_RCC_GetPCLK1Freq>
 801455a:	0003      	movs	r3, r0
 801455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801455e:	e021      	b.n	80145a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014560:	f7fd feb2 	bl	80122c8 <HAL_RCC_GetPCLK2Freq>
 8014564:	0003      	movs	r3, r0
 8014566:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014568:	e01c      	b.n	80145a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801456a:	4b61      	ldr	r3, [pc, #388]	@ (80146f0 <UART_SetConfig+0x52c>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	2210      	movs	r2, #16
 8014570:	4013      	ands	r3, r2
 8014572:	d002      	beq.n	801457a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8014574:	4b5f      	ldr	r3, [pc, #380]	@ (80146f4 <UART_SetConfig+0x530>)
 8014576:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014578:	e014      	b.n	80145a4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801457a:	4b5f      	ldr	r3, [pc, #380]	@ (80146f8 <UART_SetConfig+0x534>)
 801457c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801457e:	e011      	b.n	80145a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014580:	f7fd fddc 	bl	801213c <HAL_RCC_GetSysClockFreq>
 8014584:	0003      	movs	r3, r0
 8014586:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014588:	e00c      	b.n	80145a4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801458a:	2380      	movs	r3, #128	@ 0x80
 801458c:	021b      	lsls	r3, r3, #8
 801458e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014590:	e008      	b.n	80145a4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8014592:	2300      	movs	r3, #0
 8014594:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8014596:	231a      	movs	r3, #26
 8014598:	2218      	movs	r2, #24
 801459a:	189b      	adds	r3, r3, r2
 801459c:	19db      	adds	r3, r3, r7
 801459e:	2201      	movs	r2, #1
 80145a0:	701a      	strb	r2, [r3, #0]
        break;
 80145a2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80145a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d100      	bne.n	80145ac <UART_SetConfig+0x3e8>
 80145aa:	e090      	b.n	80146ce <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80145ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145ae:	005a      	lsls	r2, r3, #1
 80145b0:	69fb      	ldr	r3, [r7, #28]
 80145b2:	685b      	ldr	r3, [r3, #4]
 80145b4:	085b      	lsrs	r3, r3, #1
 80145b6:	18d2      	adds	r2, r2, r3
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	0019      	movs	r1, r3
 80145be:	0010      	movs	r0, r2
 80145c0:	f7eb fdf0 	bl	80001a4 <__udivsi3>
 80145c4:	0003      	movs	r3, r0
 80145c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80145c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ca:	2b0f      	cmp	r3, #15
 80145cc:	d921      	bls.n	8014612 <UART_SetConfig+0x44e>
 80145ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145d0:	2380      	movs	r3, #128	@ 0x80
 80145d2:	025b      	lsls	r3, r3, #9
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d21c      	bcs.n	8014612 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80145d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145da:	b29a      	uxth	r2, r3
 80145dc:	200e      	movs	r0, #14
 80145de:	2418      	movs	r4, #24
 80145e0:	1903      	adds	r3, r0, r4
 80145e2:	19db      	adds	r3, r3, r7
 80145e4:	210f      	movs	r1, #15
 80145e6:	438a      	bics	r2, r1
 80145e8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80145ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ec:	085b      	lsrs	r3, r3, #1
 80145ee:	b29b      	uxth	r3, r3
 80145f0:	2207      	movs	r2, #7
 80145f2:	4013      	ands	r3, r2
 80145f4:	b299      	uxth	r1, r3
 80145f6:	1903      	adds	r3, r0, r4
 80145f8:	19db      	adds	r3, r3, r7
 80145fa:	1902      	adds	r2, r0, r4
 80145fc:	19d2      	adds	r2, r2, r7
 80145fe:	8812      	ldrh	r2, [r2, #0]
 8014600:	430a      	orrs	r2, r1
 8014602:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8014604:	69fb      	ldr	r3, [r7, #28]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	1902      	adds	r2, r0, r4
 801460a:	19d2      	adds	r2, r2, r7
 801460c:	8812      	ldrh	r2, [r2, #0]
 801460e:	60da      	str	r2, [r3, #12]
 8014610:	e05d      	b.n	80146ce <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8014612:	231a      	movs	r3, #26
 8014614:	2218      	movs	r2, #24
 8014616:	189b      	adds	r3, r3, r2
 8014618:	19db      	adds	r3, r3, r7
 801461a:	2201      	movs	r2, #1
 801461c:	701a      	strb	r2, [r3, #0]
 801461e:	e056      	b.n	80146ce <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8014620:	231b      	movs	r3, #27
 8014622:	2218      	movs	r2, #24
 8014624:	189b      	adds	r3, r3, r2
 8014626:	19db      	adds	r3, r3, r7
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	2b08      	cmp	r3, #8
 801462c:	d822      	bhi.n	8014674 <UART_SetConfig+0x4b0>
 801462e:	009a      	lsls	r2, r3, #2
 8014630:	4b32      	ldr	r3, [pc, #200]	@ (80146fc <UART_SetConfig+0x538>)
 8014632:	18d3      	adds	r3, r2, r3
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014638:	f7fd fe30 	bl	801229c <HAL_RCC_GetPCLK1Freq>
 801463c:	0003      	movs	r3, r0
 801463e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014640:	e021      	b.n	8014686 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8014642:	f7fd fe41 	bl	80122c8 <HAL_RCC_GetPCLK2Freq>
 8014646:	0003      	movs	r3, r0
 8014648:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801464a:	e01c      	b.n	8014686 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801464c:	4b28      	ldr	r3, [pc, #160]	@ (80146f0 <UART_SetConfig+0x52c>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2210      	movs	r2, #16
 8014652:	4013      	ands	r3, r2
 8014654:	d002      	beq.n	801465c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8014656:	4b27      	ldr	r3, [pc, #156]	@ (80146f4 <UART_SetConfig+0x530>)
 8014658:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801465a:	e014      	b.n	8014686 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801465c:	4b26      	ldr	r3, [pc, #152]	@ (80146f8 <UART_SetConfig+0x534>)
 801465e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014660:	e011      	b.n	8014686 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014662:	f7fd fd6b 	bl	801213c <HAL_RCC_GetSysClockFreq>
 8014666:	0003      	movs	r3, r0
 8014668:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801466a:	e00c      	b.n	8014686 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801466c:	2380      	movs	r3, #128	@ 0x80
 801466e:	021b      	lsls	r3, r3, #8
 8014670:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014672:	e008      	b.n	8014686 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8014674:	2300      	movs	r3, #0
 8014676:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8014678:	231a      	movs	r3, #26
 801467a:	2218      	movs	r2, #24
 801467c:	189b      	adds	r3, r3, r2
 801467e:	19db      	adds	r3, r3, r7
 8014680:	2201      	movs	r2, #1
 8014682:	701a      	strb	r2, [r3, #0]
        break;
 8014684:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8014686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014688:	2b00      	cmp	r3, #0
 801468a:	d020      	beq.n	80146ce <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	685b      	ldr	r3, [r3, #4]
 8014690:	085a      	lsrs	r2, r3, #1
 8014692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014694:	18d2      	adds	r2, r2, r3
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	685b      	ldr	r3, [r3, #4]
 801469a:	0019      	movs	r1, r3
 801469c:	0010      	movs	r0, r2
 801469e:	f7eb fd81 	bl	80001a4 <__udivsi3>
 80146a2:	0003      	movs	r3, r0
 80146a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80146a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a8:	2b0f      	cmp	r3, #15
 80146aa:	d90a      	bls.n	80146c2 <UART_SetConfig+0x4fe>
 80146ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80146ae:	2380      	movs	r3, #128	@ 0x80
 80146b0:	025b      	lsls	r3, r3, #9
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d205      	bcs.n	80146c2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80146b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	69fb      	ldr	r3, [r7, #28]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	60da      	str	r2, [r3, #12]
 80146c0:	e005      	b.n	80146ce <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80146c2:	231a      	movs	r3, #26
 80146c4:	2218      	movs	r2, #24
 80146c6:	189b      	adds	r3, r3, r2
 80146c8:	19db      	adds	r3, r3, r7
 80146ca:	2201      	movs	r2, #1
 80146cc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80146ce:	69fb      	ldr	r3, [r7, #28]
 80146d0:	2200      	movs	r2, #0
 80146d2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	2200      	movs	r2, #0
 80146d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80146da:	231a      	movs	r3, #26
 80146dc:	2218      	movs	r2, #24
 80146de:	189b      	adds	r3, r3, r2
 80146e0:	19db      	adds	r3, r3, r7
 80146e2:	781b      	ldrb	r3, [r3, #0]
}
 80146e4:	0018      	movs	r0, r3
 80146e6:	46bd      	mov	sp, r7
 80146e8:	b00e      	add	sp, #56	@ 0x38
 80146ea:	bdb0      	pop	{r4, r5, r7, pc}
 80146ec:	08020b78 	.word	0x08020b78
 80146f0:	40021000 	.word	0x40021000
 80146f4:	003d0900 	.word	0x003d0900
 80146f8:	00f42400 	.word	0x00f42400
 80146fc:	08020b9c 	.word	0x08020b9c

08014700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801470c:	2201      	movs	r2, #1
 801470e:	4013      	ands	r3, r2
 8014710:	d00b      	beq.n	801472a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	4a4a      	ldr	r2, [pc, #296]	@ (8014844 <UART_AdvFeatureConfig+0x144>)
 801471a:	4013      	ands	r3, r2
 801471c:	0019      	movs	r1, r3
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	430a      	orrs	r2, r1
 8014728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801472e:	2202      	movs	r2, #2
 8014730:	4013      	ands	r3, r2
 8014732:	d00b      	beq.n	801474c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	4a43      	ldr	r2, [pc, #268]	@ (8014848 <UART_AdvFeatureConfig+0x148>)
 801473c:	4013      	ands	r3, r2
 801473e:	0019      	movs	r1, r3
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	430a      	orrs	r2, r1
 801474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014750:	2204      	movs	r2, #4
 8014752:	4013      	ands	r3, r2
 8014754:	d00b      	beq.n	801476e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	685b      	ldr	r3, [r3, #4]
 801475c:	4a3b      	ldr	r2, [pc, #236]	@ (801484c <UART_AdvFeatureConfig+0x14c>)
 801475e:	4013      	ands	r3, r2
 8014760:	0019      	movs	r1, r3
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	430a      	orrs	r2, r1
 801476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014772:	2208      	movs	r2, #8
 8014774:	4013      	ands	r3, r2
 8014776:	d00b      	beq.n	8014790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	685b      	ldr	r3, [r3, #4]
 801477e:	4a34      	ldr	r2, [pc, #208]	@ (8014850 <UART_AdvFeatureConfig+0x150>)
 8014780:	4013      	ands	r3, r2
 8014782:	0019      	movs	r1, r3
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	430a      	orrs	r2, r1
 801478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014794:	2210      	movs	r2, #16
 8014796:	4013      	ands	r3, r2
 8014798:	d00b      	beq.n	80147b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	689b      	ldr	r3, [r3, #8]
 80147a0:	4a2c      	ldr	r2, [pc, #176]	@ (8014854 <UART_AdvFeatureConfig+0x154>)
 80147a2:	4013      	ands	r3, r2
 80147a4:	0019      	movs	r1, r3
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	430a      	orrs	r2, r1
 80147b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147b6:	2220      	movs	r2, #32
 80147b8:	4013      	ands	r3, r2
 80147ba:	d00b      	beq.n	80147d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	689b      	ldr	r3, [r3, #8]
 80147c2:	4a25      	ldr	r2, [pc, #148]	@ (8014858 <UART_AdvFeatureConfig+0x158>)
 80147c4:	4013      	ands	r3, r2
 80147c6:	0019      	movs	r1, r3
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	430a      	orrs	r2, r1
 80147d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147d8:	2240      	movs	r2, #64	@ 0x40
 80147da:	4013      	ands	r3, r2
 80147dc:	d01d      	beq.n	801481a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	685b      	ldr	r3, [r3, #4]
 80147e4:	4a1d      	ldr	r2, [pc, #116]	@ (801485c <UART_AdvFeatureConfig+0x15c>)
 80147e6:	4013      	ands	r3, r2
 80147e8:	0019      	movs	r1, r3
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	430a      	orrs	r2, r1
 80147f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80147fa:	2380      	movs	r3, #128	@ 0x80
 80147fc:	035b      	lsls	r3, r3, #13
 80147fe:	429a      	cmp	r2, r3
 8014800:	d10b      	bne.n	801481a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	4a15      	ldr	r2, [pc, #84]	@ (8014860 <UART_AdvFeatureConfig+0x160>)
 801480a:	4013      	ands	r3, r2
 801480c:	0019      	movs	r1, r3
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	430a      	orrs	r2, r1
 8014818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801481e:	2280      	movs	r2, #128	@ 0x80
 8014820:	4013      	ands	r3, r2
 8014822:	d00b      	beq.n	801483c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	4a0e      	ldr	r2, [pc, #56]	@ (8014864 <UART_AdvFeatureConfig+0x164>)
 801482c:	4013      	ands	r3, r2
 801482e:	0019      	movs	r1, r3
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	430a      	orrs	r2, r1
 801483a:	605a      	str	r2, [r3, #4]
  }
}
 801483c:	46c0      	nop			@ (mov r8, r8)
 801483e:	46bd      	mov	sp, r7
 8014840:	b002      	add	sp, #8
 8014842:	bd80      	pop	{r7, pc}
 8014844:	fffdffff 	.word	0xfffdffff
 8014848:	fffeffff 	.word	0xfffeffff
 801484c:	fffbffff 	.word	0xfffbffff
 8014850:	ffff7fff 	.word	0xffff7fff
 8014854:	ffffefff 	.word	0xffffefff
 8014858:	ffffdfff 	.word	0xffffdfff
 801485c:	ffefffff 	.word	0xffefffff
 8014860:	ff9fffff 	.word	0xff9fffff
 8014864:	fff7ffff 	.word	0xfff7ffff

08014868 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b092      	sub	sp, #72	@ 0x48
 801486c:	af02      	add	r7, sp, #8
 801486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	2284      	movs	r2, #132	@ 0x84
 8014874:	2100      	movs	r1, #0
 8014876:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014878:	f7f7 fb46 	bl	800bf08 <HAL_GetTick>
 801487c:	0003      	movs	r3, r0
 801487e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2208      	movs	r2, #8
 8014888:	4013      	ands	r3, r2
 801488a:	2b08      	cmp	r3, #8
 801488c:	d12c      	bne.n	80148e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801488e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014890:	2280      	movs	r2, #128	@ 0x80
 8014892:	0391      	lsls	r1, r2, #14
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	4a46      	ldr	r2, [pc, #280]	@ (80149b0 <UART_CheckIdleState+0x148>)
 8014898:	9200      	str	r2, [sp, #0]
 801489a:	2200      	movs	r2, #0
 801489c:	f000 f88c 	bl	80149b8 <UART_WaitOnFlagUntilTimeout>
 80148a0:	1e03      	subs	r3, r0, #0
 80148a2:	d021      	beq.n	80148e8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80148a4:	f3ef 8310 	mrs	r3, PRIMASK
 80148a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80148aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80148ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80148ae:	2301      	movs	r3, #1
 80148b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148b4:	f383 8810 	msr	PRIMASK, r3
}
 80148b8:	46c0      	nop			@ (mov r8, r8)
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	681a      	ldr	r2, [r3, #0]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	2180      	movs	r1, #128	@ 0x80
 80148c6:	438a      	bics	r2, r1
 80148c8:	601a      	str	r2, [r3, #0]
 80148ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80148cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148d0:	f383 8810 	msr	PRIMASK, r3
}
 80148d4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2220      	movs	r2, #32
 80148da:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2278      	movs	r2, #120	@ 0x78
 80148e0:	2100      	movs	r1, #0
 80148e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80148e4:	2303      	movs	r3, #3
 80148e6:	e05f      	b.n	80149a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	2204      	movs	r2, #4
 80148f0:	4013      	ands	r3, r2
 80148f2:	2b04      	cmp	r3, #4
 80148f4:	d146      	bne.n	8014984 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80148f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80148f8:	2280      	movs	r2, #128	@ 0x80
 80148fa:	03d1      	lsls	r1, r2, #15
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	4a2c      	ldr	r2, [pc, #176]	@ (80149b0 <UART_CheckIdleState+0x148>)
 8014900:	9200      	str	r2, [sp, #0]
 8014902:	2200      	movs	r2, #0
 8014904:	f000 f858 	bl	80149b8 <UART_WaitOnFlagUntilTimeout>
 8014908:	1e03      	subs	r3, r0, #0
 801490a:	d03b      	beq.n	8014984 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801490c:	f3ef 8310 	mrs	r3, PRIMASK
 8014910:	60fb      	str	r3, [r7, #12]
  return(result);
 8014912:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014914:	637b      	str	r3, [r7, #52]	@ 0x34
 8014916:	2301      	movs	r3, #1
 8014918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	f383 8810 	msr	PRIMASK, r3
}
 8014920:	46c0      	nop			@ (mov r8, r8)
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	681b      	ldr	r3, [r3, #0]
 8014926:	681a      	ldr	r2, [r3, #0]
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	4921      	ldr	r1, [pc, #132]	@ (80149b4 <UART_CheckIdleState+0x14c>)
 801492e:	400a      	ands	r2, r1
 8014930:	601a      	str	r2, [r3, #0]
 8014932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	f383 8810 	msr	PRIMASK, r3
}
 801493c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801493e:	f3ef 8310 	mrs	r3, PRIMASK
 8014942:	61bb      	str	r3, [r7, #24]
  return(result);
 8014944:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014946:	633b      	str	r3, [r7, #48]	@ 0x30
 8014948:	2301      	movs	r3, #1
 801494a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	f383 8810 	msr	PRIMASK, r3
}
 8014952:	46c0      	nop			@ (mov r8, r8)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	689a      	ldr	r2, [r3, #8]
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	2101      	movs	r1, #1
 8014960:	438a      	bics	r2, r1
 8014962:	609a      	str	r2, [r3, #8]
 8014964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014966:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014968:	6a3b      	ldr	r3, [r7, #32]
 801496a:	f383 8810 	msr	PRIMASK, r3
}
 801496e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2280      	movs	r2, #128	@ 0x80
 8014974:	2120      	movs	r1, #32
 8014976:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2278      	movs	r2, #120	@ 0x78
 801497c:	2100      	movs	r1, #0
 801497e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014980:	2303      	movs	r3, #3
 8014982:	e011      	b.n	80149a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2220      	movs	r2, #32
 8014988:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2280      	movs	r2, #128	@ 0x80
 801498e:	2120      	movs	r1, #32
 8014990:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2200      	movs	r2, #0
 8014996:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2200      	movs	r2, #0
 801499c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	2278      	movs	r2, #120	@ 0x78
 80149a2:	2100      	movs	r1, #0
 80149a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80149a6:	2300      	movs	r3, #0
}
 80149a8:	0018      	movs	r0, r3
 80149aa:	46bd      	mov	sp, r7
 80149ac:	b010      	add	sp, #64	@ 0x40
 80149ae:	bd80      	pop	{r7, pc}
 80149b0:	01ffffff 	.word	0x01ffffff
 80149b4:	fffffedf 	.word	0xfffffedf

080149b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b084      	sub	sp, #16
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	603b      	str	r3, [r7, #0]
 80149c4:	1dfb      	adds	r3, r7, #7
 80149c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80149c8:	e04b      	b.n	8014a62 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	3301      	adds	r3, #1
 80149ce:	d048      	beq.n	8014a62 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80149d0:	f7f7 fa9a 	bl	800bf08 <HAL_GetTick>
 80149d4:	0002      	movs	r2, r0
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	1ad3      	subs	r3, r2, r3
 80149da:	69ba      	ldr	r2, [r7, #24]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d302      	bcc.n	80149e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d101      	bne.n	80149ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80149e6:	2303      	movs	r3, #3
 80149e8:	e04b      	b.n	8014a82 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	2204      	movs	r2, #4
 80149f2:	4013      	ands	r3, r2
 80149f4:	d035      	beq.n	8014a62 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	69db      	ldr	r3, [r3, #28]
 80149fc:	2208      	movs	r2, #8
 80149fe:	4013      	ands	r3, r2
 8014a00:	2b08      	cmp	r3, #8
 8014a02:	d111      	bne.n	8014a28 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2208      	movs	r2, #8
 8014a0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	0018      	movs	r0, r3
 8014a10:	f000 f9ca 	bl	8014da8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2284      	movs	r2, #132	@ 0x84
 8014a18:	2108      	movs	r1, #8
 8014a1a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	2278      	movs	r2, #120	@ 0x78
 8014a20:	2100      	movs	r1, #0
 8014a22:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8014a24:	2301      	movs	r3, #1
 8014a26:	e02c      	b.n	8014a82 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	69da      	ldr	r2, [r3, #28]
 8014a2e:	2380      	movs	r3, #128	@ 0x80
 8014a30:	011b      	lsls	r3, r3, #4
 8014a32:	401a      	ands	r2, r3
 8014a34:	2380      	movs	r3, #128	@ 0x80
 8014a36:	011b      	lsls	r3, r3, #4
 8014a38:	429a      	cmp	r2, r3
 8014a3a:	d112      	bne.n	8014a62 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2280      	movs	r2, #128	@ 0x80
 8014a42:	0112      	lsls	r2, r2, #4
 8014a44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	0018      	movs	r0, r3
 8014a4a:	f000 f9ad 	bl	8014da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	2284      	movs	r2, #132	@ 0x84
 8014a52:	2120      	movs	r1, #32
 8014a54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	2278      	movs	r2, #120	@ 0x78
 8014a5a:	2100      	movs	r1, #0
 8014a5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8014a5e:	2303      	movs	r3, #3
 8014a60:	e00f      	b.n	8014a82 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	69db      	ldr	r3, [r3, #28]
 8014a68:	68ba      	ldr	r2, [r7, #8]
 8014a6a:	4013      	ands	r3, r2
 8014a6c:	68ba      	ldr	r2, [r7, #8]
 8014a6e:	1ad3      	subs	r3, r2, r3
 8014a70:	425a      	negs	r2, r3
 8014a72:	4153      	adcs	r3, r2
 8014a74:	b2db      	uxtb	r3, r3
 8014a76:	001a      	movs	r2, r3
 8014a78:	1dfb      	adds	r3, r7, #7
 8014a7a:	781b      	ldrb	r3, [r3, #0]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d0a4      	beq.n	80149ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014a80:	2300      	movs	r3, #0
}
 8014a82:	0018      	movs	r0, r3
 8014a84:	46bd      	mov	sp, r7
 8014a86:	b004      	add	sp, #16
 8014a88:	bd80      	pop	{r7, pc}
	...

08014a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b090      	sub	sp, #64	@ 0x40
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	60b9      	str	r1, [r7, #8]
 8014a96:	1dbb      	adds	r3, r7, #6
 8014a98:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	68ba      	ldr	r2, [r7, #8]
 8014a9e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	1dba      	adds	r2, r7, #6
 8014aa4:	2158      	movs	r1, #88	@ 0x58
 8014aa6:	8812      	ldrh	r2, [r2, #0]
 8014aa8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	1dba      	adds	r2, r7, #6
 8014aae:	215a      	movs	r1, #90	@ 0x5a
 8014ab0:	8812      	ldrh	r2, [r2, #0]
 8014ab2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	689a      	ldr	r2, [r3, #8]
 8014abe:	2380      	movs	r3, #128	@ 0x80
 8014ac0:	015b      	lsls	r3, r3, #5
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d10d      	bne.n	8014ae2 <UART_Start_Receive_IT+0x56>
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	691b      	ldr	r3, [r3, #16]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d104      	bne.n	8014ad8 <UART_Start_Receive_IT+0x4c>
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	225c      	movs	r2, #92	@ 0x5c
 8014ad2:	4950      	ldr	r1, [pc, #320]	@ (8014c14 <UART_Start_Receive_IT+0x188>)
 8014ad4:	5299      	strh	r1, [r3, r2]
 8014ad6:	e02e      	b.n	8014b36 <UART_Start_Receive_IT+0xaa>
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	225c      	movs	r2, #92	@ 0x5c
 8014adc:	21ff      	movs	r1, #255	@ 0xff
 8014ade:	5299      	strh	r1, [r3, r2]
 8014ae0:	e029      	b.n	8014b36 <UART_Start_Receive_IT+0xaa>
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	689b      	ldr	r3, [r3, #8]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d10d      	bne.n	8014b06 <UART_Start_Receive_IT+0x7a>
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	691b      	ldr	r3, [r3, #16]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d104      	bne.n	8014afc <UART_Start_Receive_IT+0x70>
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	225c      	movs	r2, #92	@ 0x5c
 8014af6:	21ff      	movs	r1, #255	@ 0xff
 8014af8:	5299      	strh	r1, [r3, r2]
 8014afa:	e01c      	b.n	8014b36 <UART_Start_Receive_IT+0xaa>
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	225c      	movs	r2, #92	@ 0x5c
 8014b00:	217f      	movs	r1, #127	@ 0x7f
 8014b02:	5299      	strh	r1, [r3, r2]
 8014b04:	e017      	b.n	8014b36 <UART_Start_Receive_IT+0xaa>
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	689a      	ldr	r2, [r3, #8]
 8014b0a:	2380      	movs	r3, #128	@ 0x80
 8014b0c:	055b      	lsls	r3, r3, #21
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d10d      	bne.n	8014b2e <UART_Start_Receive_IT+0xa2>
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	691b      	ldr	r3, [r3, #16]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d104      	bne.n	8014b24 <UART_Start_Receive_IT+0x98>
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	225c      	movs	r2, #92	@ 0x5c
 8014b1e:	217f      	movs	r1, #127	@ 0x7f
 8014b20:	5299      	strh	r1, [r3, r2]
 8014b22:	e008      	b.n	8014b36 <UART_Start_Receive_IT+0xaa>
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	225c      	movs	r2, #92	@ 0x5c
 8014b28:	213f      	movs	r1, #63	@ 0x3f
 8014b2a:	5299      	strh	r1, [r3, r2]
 8014b2c:	e003      	b.n	8014b36 <UART_Start_Receive_IT+0xaa>
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	225c      	movs	r2, #92	@ 0x5c
 8014b32:	2100      	movs	r1, #0
 8014b34:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2284      	movs	r2, #132	@ 0x84
 8014b3a:	2100      	movs	r1, #0
 8014b3c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	2280      	movs	r2, #128	@ 0x80
 8014b42:	2122      	movs	r1, #34	@ 0x22
 8014b44:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b46:	f3ef 8310 	mrs	r3, PRIMASK
 8014b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b50:	2301      	movs	r3, #1
 8014b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b56:	f383 8810 	msr	PRIMASK, r3
}
 8014b5a:	46c0      	nop			@ (mov r8, r8)
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	689a      	ldr	r2, [r3, #8]
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	2101      	movs	r1, #1
 8014b68:	430a      	orrs	r2, r1
 8014b6a:	609a      	str	r2, [r3, #8]
 8014b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b72:	f383 8810 	msr	PRIMASK, r3
}
 8014b76:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	689a      	ldr	r2, [r3, #8]
 8014b7c:	2380      	movs	r3, #128	@ 0x80
 8014b7e:	015b      	lsls	r3, r3, #5
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d107      	bne.n	8014b94 <UART_Start_Receive_IT+0x108>
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	691b      	ldr	r3, [r3, #16]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d103      	bne.n	8014b94 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	4a22      	ldr	r2, [pc, #136]	@ (8014c18 <UART_Start_Receive_IT+0x18c>)
 8014b90:	669a      	str	r2, [r3, #104]	@ 0x68
 8014b92:	e002      	b.n	8014b9a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	4a21      	ldr	r2, [pc, #132]	@ (8014c1c <UART_Start_Receive_IT+0x190>)
 8014b98:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	691b      	ldr	r3, [r3, #16]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d019      	beq.n	8014bd6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8014ba6:	61fb      	str	r3, [r7, #28]
  return(result);
 8014ba8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8014baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8014bac:	2301      	movs	r3, #1
 8014bae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bb0:	6a3b      	ldr	r3, [r7, #32]
 8014bb2:	f383 8810 	msr	PRIMASK, r3
}
 8014bb6:	46c0      	nop			@ (mov r8, r8)
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	681a      	ldr	r2, [r3, #0]
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	2190      	movs	r1, #144	@ 0x90
 8014bc4:	0049      	lsls	r1, r1, #1
 8014bc6:	430a      	orrs	r2, r1
 8014bc8:	601a      	str	r2, [r3, #0]
 8014bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bd0:	f383 8810 	msr	PRIMASK, r3
}
 8014bd4:	e018      	b.n	8014c08 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8014bda:	613b      	str	r3, [r7, #16]
  return(result);
 8014bdc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8014bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014be0:	2301      	movs	r3, #1
 8014be2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	f383 8810 	msr	PRIMASK, r3
}
 8014bea:	46c0      	nop			@ (mov r8, r8)
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	681a      	ldr	r2, [r3, #0]
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	2120      	movs	r1, #32
 8014bf8:	430a      	orrs	r2, r1
 8014bfa:	601a      	str	r2, [r3, #0]
 8014bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c00:	69bb      	ldr	r3, [r7, #24]
 8014c02:	f383 8810 	msr	PRIMASK, r3
}
 8014c06:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8014c08:	2300      	movs	r3, #0
}
 8014c0a:	0018      	movs	r0, r3
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	b010      	add	sp, #64	@ 0x40
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	46c0      	nop			@ (mov r8, r8)
 8014c14:	000001ff 	.word	0x000001ff
 8014c18:	0801538d 	.word	0x0801538d
 8014c1c:	080151c1 	.word	0x080151c1

08014c20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b090      	sub	sp, #64	@ 0x40
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	60f8      	str	r0, [r7, #12]
 8014c28:	60b9      	str	r1, [r7, #8]
 8014c2a:	1dbb      	adds	r3, r7, #6
 8014c2c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	68ba      	ldr	r2, [r7, #8]
 8014c32:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	1dba      	adds	r2, r7, #6
 8014c38:	2158      	movs	r1, #88	@ 0x58
 8014c3a:	8812      	ldrh	r2, [r2, #0]
 8014c3c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2284      	movs	r2, #132	@ 0x84
 8014c42:	2100      	movs	r1, #0
 8014c44:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2280      	movs	r2, #128	@ 0x80
 8014c4a:	2122      	movs	r1, #34	@ 0x22
 8014c4c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d028      	beq.n	8014ca8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8014d54 <UART_Start_Receive_DMA+0x134>)
 8014c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c62:	4a3d      	ldr	r2, [pc, #244]	@ (8014d58 <UART_Start_Receive_DMA+0x138>)
 8014c64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c6a:	4a3c      	ldr	r2, [pc, #240]	@ (8014d5c <UART_Start_Receive_DMA+0x13c>)
 8014c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014c72:	2200      	movs	r2, #0
 8014c74:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	3324      	adds	r3, #36	@ 0x24
 8014c80:	0019      	movs	r1, r3
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c86:	001a      	movs	r2, r3
 8014c88:	1dbb      	adds	r3, r7, #6
 8014c8a:	881b      	ldrh	r3, [r3, #0]
 8014c8c:	f7f7 fe5c 	bl	800c948 <HAL_DMA_Start_IT>
 8014c90:	1e03      	subs	r3, r0, #0
 8014c92:	d009      	beq.n	8014ca8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2284      	movs	r2, #132	@ 0x84
 8014c98:	2110      	movs	r1, #16
 8014c9a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2280      	movs	r2, #128	@ 0x80
 8014ca0:	2120      	movs	r1, #32
 8014ca2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8014ca4:	2301      	movs	r3, #1
 8014ca6:	e050      	b.n	8014d4a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	691b      	ldr	r3, [r3, #16]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d019      	beq.n	8014ce4 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8014cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014cba:	2301      	movs	r3, #1
 8014cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cc0:	f383 8810 	msr	PRIMASK, r3
}
 8014cc4:	46c0      	nop			@ (mov r8, r8)
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	2180      	movs	r1, #128	@ 0x80
 8014cd2:	0049      	lsls	r1, r1, #1
 8014cd4:	430a      	orrs	r2, r1
 8014cd6:	601a      	str	r2, [r3, #0]
 8014cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014cda:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cde:	f383 8810 	msr	PRIMASK, r3
}
 8014ce2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8014ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8014cea:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014cec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014cee:	2301      	movs	r3, #1
 8014cf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	f383 8810 	msr	PRIMASK, r3
}
 8014cf8:	46c0      	nop			@ (mov r8, r8)
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	689a      	ldr	r2, [r3, #8]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2101      	movs	r1, #1
 8014d06:	430a      	orrs	r2, r1
 8014d08:	609a      	str	r2, [r3, #8]
 8014d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d0e:	69bb      	ldr	r3, [r7, #24]
 8014d10:	f383 8810 	msr	PRIMASK, r3
}
 8014d14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d16:	f3ef 8310 	mrs	r3, PRIMASK
 8014d1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8014d1c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d20:	2301      	movs	r3, #1
 8014d22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d24:	6a3b      	ldr	r3, [r7, #32]
 8014d26:	f383 8810 	msr	PRIMASK, r3
}
 8014d2a:	46c0      	nop			@ (mov r8, r8)
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	689a      	ldr	r2, [r3, #8]
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2140      	movs	r1, #64	@ 0x40
 8014d38:	430a      	orrs	r2, r1
 8014d3a:	609a      	str	r2, [r3, #8]
 8014d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d42:	f383 8810 	msr	PRIMASK, r3
}
 8014d46:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8014d48:	2300      	movs	r3, #0
}
 8014d4a:	0018      	movs	r0, r3
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	b010      	add	sp, #64	@ 0x40
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	46c0      	nop			@ (mov r8, r8)
 8014d54:	08014f31 	.word	0x08014f31
 8014d58:	08015065 	.word	0x08015065
 8014d5c:	080150ad 	.word	0x080150ad

08014d60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b086      	sub	sp, #24
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d68:	f3ef 8310 	mrs	r3, PRIMASK
 8014d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8014d6e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014d70:	617b      	str	r3, [r7, #20]
 8014d72:	2301      	movs	r3, #1
 8014d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f383 8810 	msr	PRIMASK, r3
}
 8014d7c:	46c0      	nop			@ (mov r8, r8)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	681a      	ldr	r2, [r3, #0]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	21c0      	movs	r1, #192	@ 0xc0
 8014d8a:	438a      	bics	r2, r1
 8014d8c:	601a      	str	r2, [r3, #0]
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	f383 8810 	msr	PRIMASK, r3
}
 8014d98:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2220      	movs	r2, #32
 8014d9e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8014da0:	46c0      	nop			@ (mov r8, r8)
 8014da2:	46bd      	mov	sp, r7
 8014da4:	b006      	add	sp, #24
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08e      	sub	sp, #56	@ 0x38
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014db0:	f3ef 8310 	mrs	r3, PRIMASK
 8014db4:	617b      	str	r3, [r7, #20]
  return(result);
 8014db6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014db8:	637b      	str	r3, [r7, #52]	@ 0x34
 8014dba:	2301      	movs	r3, #1
 8014dbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dbe:	69bb      	ldr	r3, [r7, #24]
 8014dc0:	f383 8810 	msr	PRIMASK, r3
}
 8014dc4:	46c0      	nop			@ (mov r8, r8)
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	681a      	ldr	r2, [r3, #0]
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	4926      	ldr	r1, [pc, #152]	@ (8014e6c <UART_EndRxTransfer+0xc4>)
 8014dd2:	400a      	ands	r2, r1
 8014dd4:	601a      	str	r2, [r3, #0]
 8014dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014dd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dda:	69fb      	ldr	r3, [r7, #28]
 8014ddc:	f383 8810 	msr	PRIMASK, r3
}
 8014de0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014de2:	f3ef 8310 	mrs	r3, PRIMASK
 8014de6:	623b      	str	r3, [r7, #32]
  return(result);
 8014de8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014dea:	633b      	str	r3, [r7, #48]	@ 0x30
 8014dec:	2301      	movs	r3, #1
 8014dee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df2:	f383 8810 	msr	PRIMASK, r3
}
 8014df6:	46c0      	nop			@ (mov r8, r8)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	689a      	ldr	r2, [r3, #8]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	2101      	movs	r1, #1
 8014e04:	438a      	bics	r2, r1
 8014e06:	609a      	str	r2, [r3, #8]
 8014e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e0e:	f383 8810 	msr	PRIMASK, r3
}
 8014e12:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014e18:	2b01      	cmp	r3, #1
 8014e1a:	d118      	bne.n	8014e4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8014e20:	60bb      	str	r3, [r7, #8]
  return(result);
 8014e22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014e26:	2301      	movs	r3, #1
 8014e28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	f383 8810 	msr	PRIMASK, r3
}
 8014e30:	46c0      	nop			@ (mov r8, r8)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2110      	movs	r1, #16
 8014e3e:	438a      	bics	r2, r1
 8014e40:	601a      	str	r2, [r3, #0]
 8014e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	f383 8810 	msr	PRIMASK, r3
}
 8014e4c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	2280      	movs	r2, #128	@ 0x80
 8014e52:	2120      	movs	r1, #32
 8014e54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8014e62:	46c0      	nop			@ (mov r8, r8)
 8014e64:	46bd      	mov	sp, r7
 8014e66:	b00e      	add	sp, #56	@ 0x38
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	46c0      	nop			@ (mov r8, r8)
 8014e6c:	fffffedf 	.word	0xfffffedf

08014e70 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b08c      	sub	sp, #48	@ 0x30
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	2220      	movs	r2, #32
 8014e86:	4013      	ands	r3, r2
 8014e88:	d135      	bne.n	8014ef6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8014e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e8c:	2252      	movs	r2, #82	@ 0x52
 8014e8e:	2100      	movs	r1, #0
 8014e90:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e92:	f3ef 8310 	mrs	r3, PRIMASK
 8014e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8014e98:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	f383 8810 	msr	PRIMASK, r3
}
 8014ea6:	46c0      	nop			@ (mov r8, r8)
 8014ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	689a      	ldr	r2, [r3, #8]
 8014eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	2180      	movs	r1, #128	@ 0x80
 8014eb4:	438a      	bics	r2, r1
 8014eb6:	609a      	str	r2, [r3, #8]
 8014eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014eba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	f383 8810 	msr	PRIMASK, r3
}
 8014ec2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8014ec8:	61bb      	str	r3, [r7, #24]
  return(result);
 8014eca:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014ecc:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ece:	2301      	movs	r3, #1
 8014ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ed2:	69fb      	ldr	r3, [r7, #28]
 8014ed4:	f383 8810 	msr	PRIMASK, r3
}
 8014ed8:	46c0      	nop			@ (mov r8, r8)
 8014eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	681a      	ldr	r2, [r3, #0]
 8014ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	2140      	movs	r1, #64	@ 0x40
 8014ee6:	430a      	orrs	r2, r1
 8014ee8:	601a      	str	r2, [r3, #0]
 8014eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014eec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eee:	6a3b      	ldr	r3, [r7, #32]
 8014ef0:	f383 8810 	msr	PRIMASK, r3
}
 8014ef4:	e006      	b.n	8014f04 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8014ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ef8:	228c      	movs	r2, #140	@ 0x8c
 8014efa:	589b      	ldr	r3, [r3, r2]
 8014efc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014efe:	0010      	movs	r0, r2
 8014f00:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014f02:	46c0      	nop			@ (mov r8, r8)
 8014f04:	46c0      	nop			@ (mov r8, r8)
 8014f06:	46bd      	mov	sp, r7
 8014f08:	b00c      	add	sp, #48	@ 0x30
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b084      	sub	sp, #16
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2288      	movs	r2, #136	@ 0x88
 8014f1e:	589b      	ldr	r3, [r3, r2]
 8014f20:	68fa      	ldr	r2, [r7, #12]
 8014f22:	0010      	movs	r0, r2
 8014f24:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014f26:	46c0      	nop			@ (mov r8, r8)
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	b004      	add	sp, #16
 8014f2c:	bd80      	pop	{r7, pc}
	...

08014f30 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b094      	sub	sp, #80	@ 0x50
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	2220      	movs	r2, #32
 8014f46:	4013      	ands	r3, r2
 8014f48:	d16f      	bne.n	801502a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8014f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f4c:	225a      	movs	r2, #90	@ 0x5a
 8014f4e:	2100      	movs	r1, #0
 8014f50:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f52:	f3ef 8310 	mrs	r3, PRIMASK
 8014f56:	61bb      	str	r3, [r7, #24]
  return(result);
 8014f58:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f60:	69fb      	ldr	r3, [r7, #28]
 8014f62:	f383 8810 	msr	PRIMASK, r3
}
 8014f66:	46c0      	nop			@ (mov r8, r8)
 8014f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	493b      	ldr	r1, [pc, #236]	@ (8015060 <UART_DMAReceiveCplt+0x130>)
 8014f74:	400a      	ands	r2, r1
 8014f76:	601a      	str	r2, [r3, #0]
 8014f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014f7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f7c:	6a3b      	ldr	r3, [r7, #32]
 8014f7e:	f383 8810 	msr	PRIMASK, r3
}
 8014f82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f84:	f3ef 8310 	mrs	r3, PRIMASK
 8014f88:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8014f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014f8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8014f8e:	2301      	movs	r3, #1
 8014f90:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f94:	f383 8810 	msr	PRIMASK, r3
}
 8014f98:	46c0      	nop			@ (mov r8, r8)
 8014f9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	689a      	ldr	r2, [r3, #8]
 8014fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2101      	movs	r1, #1
 8014fa6:	438a      	bics	r2, r1
 8014fa8:	609a      	str	r2, [r3, #8]
 8014faa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014fb0:	f383 8810 	msr	PRIMASK, r3
}
 8014fb4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014fb6:	f3ef 8310 	mrs	r3, PRIMASK
 8014fba:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8014fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014fbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fc6:	f383 8810 	msr	PRIMASK, r3
}
 8014fca:	46c0      	nop			@ (mov r8, r8)
 8014fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	689a      	ldr	r2, [r3, #8]
 8014fd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	2140      	movs	r1, #64	@ 0x40
 8014fd8:	438a      	bics	r2, r1
 8014fda:	609a      	str	r2, [r3, #8]
 8014fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014fde:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fe2:	f383 8810 	msr	PRIMASK, r3
}
 8014fe6:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014fea:	2280      	movs	r2, #128	@ 0x80
 8014fec:	2120      	movs	r1, #32
 8014fee:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014ff4:	2b01      	cmp	r3, #1
 8014ff6:	d118      	bne.n	801502a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8014ffc:	60fb      	str	r3, [r7, #12]
  return(result);
 8014ffe:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015002:	2301      	movs	r3, #1
 8015004:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015006:	693b      	ldr	r3, [r7, #16]
 8015008:	f383 8810 	msr	PRIMASK, r3
}
 801500c:	46c0      	nop			@ (mov r8, r8)
 801500e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	681a      	ldr	r2, [r3, #0]
 8015014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2110      	movs	r1, #16
 801501a:	438a      	bics	r2, r1
 801501c:	601a      	str	r2, [r3, #0]
 801501e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	f383 8810 	msr	PRIMASK, r3
}
 8015028:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801502a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801502c:	2200      	movs	r2, #0
 801502e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015032:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015034:	2b01      	cmp	r3, #1
 8015036:	d109      	bne.n	801504c <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8015038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801503a:	22ac      	movs	r2, #172	@ 0xac
 801503c:	589b      	ldr	r3, [r3, r2]
 801503e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015040:	2158      	movs	r1, #88	@ 0x58
 8015042:	5a51      	ldrh	r1, [r2, r1]
 8015044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015046:	0010      	movs	r0, r2
 8015048:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801504a:	e005      	b.n	8015058 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 801504c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801504e:	2294      	movs	r2, #148	@ 0x94
 8015050:	589b      	ldr	r3, [r3, r2]
 8015052:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015054:	0010      	movs	r0, r2
 8015056:	4798      	blx	r3
}
 8015058:	46c0      	nop			@ (mov r8, r8)
 801505a:	46bd      	mov	sp, r7
 801505c:	b014      	add	sp, #80	@ 0x50
 801505e:	bd80      	pop	{r7, pc}
 8015060:	fffffeff 	.word	0xfffffeff

08015064 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015070:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	2201      	movs	r2, #1
 8015076:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801507c:	2b01      	cmp	r3, #1
 801507e:	d10b      	bne.n	8015098 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	22ac      	movs	r2, #172	@ 0xac
 8015084:	589b      	ldr	r3, [r3, r2]
 8015086:	68fa      	ldr	r2, [r7, #12]
 8015088:	2158      	movs	r1, #88	@ 0x58
 801508a:	5a52      	ldrh	r2, [r2, r1]
 801508c:	0852      	lsrs	r2, r2, #1
 801508e:	b291      	uxth	r1, r2
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	0010      	movs	r0, r2
 8015094:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8015096:	e005      	b.n	80150a4 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8015098:	68fb      	ldr	r3, [r7, #12]
 801509a:	2290      	movs	r2, #144	@ 0x90
 801509c:	589b      	ldr	r3, [r3, r2]
 801509e:	68fa      	ldr	r2, [r7, #12]
 80150a0:	0010      	movs	r0, r2
 80150a2:	4798      	blx	r3
}
 80150a4:	46c0      	nop			@ (mov r8, r8)
 80150a6:	46bd      	mov	sp, r7
 80150a8:	b004      	add	sp, #16
 80150aa:	bd80      	pop	{r7, pc}

080150ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b086      	sub	sp, #24
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80150b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80150ba:	697b      	ldr	r3, [r7, #20]
 80150bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80150be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80150c0:	697b      	ldr	r3, [r7, #20]
 80150c2:	2280      	movs	r2, #128	@ 0x80
 80150c4:	589b      	ldr	r3, [r3, r2]
 80150c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	689b      	ldr	r3, [r3, #8]
 80150ce:	2280      	movs	r2, #128	@ 0x80
 80150d0:	4013      	ands	r3, r2
 80150d2:	2b80      	cmp	r3, #128	@ 0x80
 80150d4:	d10a      	bne.n	80150ec <UART_DMAError+0x40>
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	2b21      	cmp	r3, #33	@ 0x21
 80150da:	d107      	bne.n	80150ec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	2252      	movs	r2, #82	@ 0x52
 80150e0:	2100      	movs	r1, #0
 80150e2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80150e4:	697b      	ldr	r3, [r7, #20]
 80150e6:	0018      	movs	r0, r3
 80150e8:	f7ff fe3a 	bl	8014d60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80150ec:	697b      	ldr	r3, [r7, #20]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	689b      	ldr	r3, [r3, #8]
 80150f2:	2240      	movs	r2, #64	@ 0x40
 80150f4:	4013      	ands	r3, r2
 80150f6:	2b40      	cmp	r3, #64	@ 0x40
 80150f8:	d10a      	bne.n	8015110 <UART_DMAError+0x64>
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b22      	cmp	r3, #34	@ 0x22
 80150fe:	d107      	bne.n	8015110 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8015100:	697b      	ldr	r3, [r7, #20]
 8015102:	225a      	movs	r2, #90	@ 0x5a
 8015104:	2100      	movs	r1, #0
 8015106:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	0018      	movs	r0, r3
 801510c:	f7ff fe4c 	bl	8014da8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	2284      	movs	r2, #132	@ 0x84
 8015114:	589b      	ldr	r3, [r3, r2]
 8015116:	2210      	movs	r2, #16
 8015118:	431a      	orrs	r2, r3
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	2184      	movs	r1, #132	@ 0x84
 801511e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	2298      	movs	r2, #152	@ 0x98
 8015124:	589b      	ldr	r3, [r3, r2]
 8015126:	697a      	ldr	r2, [r7, #20]
 8015128:	0010      	movs	r0, r2
 801512a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801512c:	46c0      	nop			@ (mov r8, r8)
 801512e:	46bd      	mov	sp, r7
 8015130:	b006      	add	sp, #24
 8015132:	bd80      	pop	{r7, pc}

08015134 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015140:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	225a      	movs	r2, #90	@ 0x5a
 8015146:	2100      	movs	r1, #0
 8015148:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	2252      	movs	r2, #82	@ 0x52
 801514e:	2100      	movs	r1, #0
 8015150:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	2298      	movs	r2, #152	@ 0x98
 8015156:	589b      	ldr	r3, [r3, r2]
 8015158:	68fa      	ldr	r2, [r7, #12]
 801515a:	0010      	movs	r0, r2
 801515c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801515e:	46c0      	nop			@ (mov r8, r8)
 8015160:	46bd      	mov	sp, r7
 8015162:	b004      	add	sp, #16
 8015164:	bd80      	pop	{r7, pc}

08015166 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b086      	sub	sp, #24
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801516e:	f3ef 8310 	mrs	r3, PRIMASK
 8015172:	60bb      	str	r3, [r7, #8]
  return(result);
 8015174:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8015176:	617b      	str	r3, [r7, #20]
 8015178:	2301      	movs	r3, #1
 801517a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f383 8810 	msr	PRIMASK, r3
}
 8015182:	46c0      	nop			@ (mov r8, r8)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	2140      	movs	r1, #64	@ 0x40
 8015190:	438a      	bics	r2, r1
 8015192:	601a      	str	r2, [r3, #0]
 8015194:	697b      	ldr	r3, [r7, #20]
 8015196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	f383 8810 	msr	PRIMASK, r3
}
 801519e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2220      	movs	r2, #32
 80151a4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	2200      	movs	r2, #0
 80151aa:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	228c      	movs	r2, #140	@ 0x8c
 80151b0:	589b      	ldr	r3, [r3, r2]
 80151b2:	687a      	ldr	r2, [r7, #4]
 80151b4:	0010      	movs	r0, r2
 80151b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80151b8:	46c0      	nop			@ (mov r8, r8)
 80151ba:	46bd      	mov	sp, r7
 80151bc:	b006      	add	sp, #24
 80151be:	bd80      	pop	{r7, pc}

080151c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b094      	sub	sp, #80	@ 0x50
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80151c8:	204e      	movs	r0, #78	@ 0x4e
 80151ca:	183b      	adds	r3, r7, r0
 80151cc:	687a      	ldr	r2, [r7, #4]
 80151ce:	215c      	movs	r1, #92	@ 0x5c
 80151d0:	5a52      	ldrh	r2, [r2, r1]
 80151d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2280      	movs	r2, #128	@ 0x80
 80151d8:	589b      	ldr	r3, [r3, r2]
 80151da:	2b22      	cmp	r3, #34	@ 0x22
 80151dc:	d000      	beq.n	80151e0 <UART_RxISR_8BIT+0x20>
 80151de:	e0c2      	b.n	8015366 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151e6:	214c      	movs	r1, #76	@ 0x4c
 80151e8:	187b      	adds	r3, r7, r1
 80151ea:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80151ec:	187b      	adds	r3, r7, r1
 80151ee:	881b      	ldrh	r3, [r3, #0]
 80151f0:	b2da      	uxtb	r2, r3
 80151f2:	183b      	adds	r3, r7, r0
 80151f4:	881b      	ldrh	r3, [r3, #0]
 80151f6:	b2d9      	uxtb	r1, r3
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80151fc:	400a      	ands	r2, r1
 80151fe:	b2d2      	uxtb	r2, r2
 8015200:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015206:	1c5a      	adds	r2, r3, #1
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	225a      	movs	r2, #90	@ 0x5a
 8015210:	5a9b      	ldrh	r3, [r3, r2]
 8015212:	b29b      	uxth	r3, r3
 8015214:	3b01      	subs	r3, #1
 8015216:	b299      	uxth	r1, r3
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	225a      	movs	r2, #90	@ 0x5a
 801521c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	225a      	movs	r2, #90	@ 0x5a
 8015222:	5a9b      	ldrh	r3, [r3, r2]
 8015224:	b29b      	uxth	r3, r3
 8015226:	2b00      	cmp	r3, #0
 8015228:	d000      	beq.n	801522c <UART_RxISR_8BIT+0x6c>
 801522a:	e0a4      	b.n	8015376 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801522c:	f3ef 8310 	mrs	r3, PRIMASK
 8015230:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015234:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015236:	2301      	movs	r3, #1
 8015238:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801523c:	f383 8810 	msr	PRIMASK, r3
}
 8015240:	46c0      	nop			@ (mov r8, r8)
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	494c      	ldr	r1, [pc, #304]	@ (8015380 <UART_RxISR_8BIT+0x1c0>)
 801524e:	400a      	ands	r2, r1
 8015250:	601a      	str	r2, [r3, #0]
 8015252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015258:	f383 8810 	msr	PRIMASK, r3
}
 801525c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801525e:	f3ef 8310 	mrs	r3, PRIMASK
 8015262:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015266:	647b      	str	r3, [r7, #68]	@ 0x44
 8015268:	2301      	movs	r3, #1
 801526a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801526c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801526e:	f383 8810 	msr	PRIMASK, r3
}
 8015272:	46c0      	nop			@ (mov r8, r8)
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	689a      	ldr	r2, [r3, #8]
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	2101      	movs	r1, #1
 8015280:	438a      	bics	r2, r1
 8015282:	609a      	str	r2, [r3, #8]
 8015284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015286:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801528a:	f383 8810 	msr	PRIMASK, r3
}
 801528e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	2280      	movs	r2, #128	@ 0x80
 8015294:	2120      	movs	r1, #32
 8015296:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2200      	movs	r2, #0
 801529c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2200      	movs	r2, #0
 80152a2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	4a36      	ldr	r2, [pc, #216]	@ (8015384 <UART_RxISR_8BIT+0x1c4>)
 80152aa:	4293      	cmp	r3, r2
 80152ac:	d01f      	beq.n	80152ee <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	685a      	ldr	r2, [r3, #4]
 80152b4:	2380      	movs	r3, #128	@ 0x80
 80152b6:	041b      	lsls	r3, r3, #16
 80152b8:	4013      	ands	r3, r2
 80152ba:	d018      	beq.n	80152ee <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152bc:	f3ef 8310 	mrs	r3, PRIMASK
 80152c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80152c2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80152c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80152c6:	2301      	movs	r3, #1
 80152c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	f383 8810 	msr	PRIMASK, r3
}
 80152d0:	46c0      	nop			@ (mov r8, r8)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	492a      	ldr	r1, [pc, #168]	@ (8015388 <UART_RxISR_8BIT+0x1c8>)
 80152de:	400a      	ands	r2, r1
 80152e0:	601a      	str	r2, [r3, #0]
 80152e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80152e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80152e6:	6a3b      	ldr	r3, [r7, #32]
 80152e8:	f383 8810 	msr	PRIMASK, r3
}
 80152ec:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d130      	bne.n	8015358 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2200      	movs	r2, #0
 80152fa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80152fc:	f3ef 8310 	mrs	r3, PRIMASK
 8015300:	60fb      	str	r3, [r7, #12]
  return(result);
 8015302:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015306:	2301      	movs	r3, #1
 8015308:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	f383 8810 	msr	PRIMASK, r3
}
 8015310:	46c0      	nop			@ (mov r8, r8)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	681a      	ldr	r2, [r3, #0]
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	2110      	movs	r1, #16
 801531e:	438a      	bics	r2, r1
 8015320:	601a      	str	r2, [r3, #0]
 8015322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015324:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015326:	697b      	ldr	r3, [r7, #20]
 8015328:	f383 8810 	msr	PRIMASK, r3
}
 801532c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	69db      	ldr	r3, [r3, #28]
 8015334:	2210      	movs	r2, #16
 8015336:	4013      	ands	r3, r2
 8015338:	2b10      	cmp	r3, #16
 801533a:	d103      	bne.n	8015344 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2210      	movs	r2, #16
 8015342:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	22ac      	movs	r2, #172	@ 0xac
 8015348:	589b      	ldr	r3, [r3, r2]
 801534a:	687a      	ldr	r2, [r7, #4]
 801534c:	2158      	movs	r1, #88	@ 0x58
 801534e:	5a51      	ldrh	r1, [r2, r1]
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	0010      	movs	r0, r2
 8015354:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015356:	e00e      	b.n	8015376 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	2294      	movs	r2, #148	@ 0x94
 801535c:	589b      	ldr	r3, [r3, r2]
 801535e:	687a      	ldr	r2, [r7, #4]
 8015360:	0010      	movs	r0, r2
 8015362:	4798      	blx	r3
}
 8015364:	e007      	b.n	8015376 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	699a      	ldr	r2, [r3, #24]
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	2108      	movs	r1, #8
 8015372:	430a      	orrs	r2, r1
 8015374:	619a      	str	r2, [r3, #24]
}
 8015376:	46c0      	nop			@ (mov r8, r8)
 8015378:	46bd      	mov	sp, r7
 801537a:	b014      	add	sp, #80	@ 0x50
 801537c:	bd80      	pop	{r7, pc}
 801537e:	46c0      	nop			@ (mov r8, r8)
 8015380:	fffffedf 	.word	0xfffffedf
 8015384:	40004800 	.word	0x40004800
 8015388:	fbffffff 	.word	0xfbffffff

0801538c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b094      	sub	sp, #80	@ 0x50
 8015390:	af00      	add	r7, sp, #0
 8015392:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015394:	204e      	movs	r0, #78	@ 0x4e
 8015396:	183b      	adds	r3, r7, r0
 8015398:	687a      	ldr	r2, [r7, #4]
 801539a:	215c      	movs	r1, #92	@ 0x5c
 801539c:	5a52      	ldrh	r2, [r2, r1]
 801539e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	2280      	movs	r2, #128	@ 0x80
 80153a4:	589b      	ldr	r3, [r3, r2]
 80153a6:	2b22      	cmp	r3, #34	@ 0x22
 80153a8:	d000      	beq.n	80153ac <UART_RxISR_16BIT+0x20>
 80153aa:	e0c2      	b.n	8015532 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153b2:	214c      	movs	r1, #76	@ 0x4c
 80153b4:	187b      	adds	r3, r7, r1
 80153b6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80153bc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80153be:	187b      	adds	r3, r7, r1
 80153c0:	183a      	adds	r2, r7, r0
 80153c2:	881b      	ldrh	r3, [r3, #0]
 80153c4:	8812      	ldrh	r2, [r2, #0]
 80153c6:	4013      	ands	r3, r2
 80153c8:	b29a      	uxth	r2, r3
 80153ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80153cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80153d2:	1c9a      	adds	r2, r3, #2
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	225a      	movs	r2, #90	@ 0x5a
 80153dc:	5a9b      	ldrh	r3, [r3, r2]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	3b01      	subs	r3, #1
 80153e2:	b299      	uxth	r1, r3
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	225a      	movs	r2, #90	@ 0x5a
 80153e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	225a      	movs	r2, #90	@ 0x5a
 80153ee:	5a9b      	ldrh	r3, [r3, r2]
 80153f0:	b29b      	uxth	r3, r3
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d000      	beq.n	80153f8 <UART_RxISR_16BIT+0x6c>
 80153f6:	e0a4      	b.n	8015542 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80153f8:	f3ef 8310 	mrs	r3, PRIMASK
 80153fc:	623b      	str	r3, [r7, #32]
  return(result);
 80153fe:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015400:	647b      	str	r3, [r7, #68]	@ 0x44
 8015402:	2301      	movs	r3, #1
 8015404:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015408:	f383 8810 	msr	PRIMASK, r3
}
 801540c:	46c0      	nop			@ (mov r8, r8)
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	681a      	ldr	r2, [r3, #0]
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	494c      	ldr	r1, [pc, #304]	@ (801554c <UART_RxISR_16BIT+0x1c0>)
 801541a:	400a      	ands	r2, r1
 801541c:	601a      	str	r2, [r3, #0]
 801541e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015420:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015424:	f383 8810 	msr	PRIMASK, r3
}
 8015428:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801542a:	f3ef 8310 	mrs	r3, PRIMASK
 801542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8015430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015432:	643b      	str	r3, [r7, #64]	@ 0x40
 8015434:	2301      	movs	r3, #1
 8015436:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801543a:	f383 8810 	msr	PRIMASK, r3
}
 801543e:	46c0      	nop			@ (mov r8, r8)
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	689a      	ldr	r2, [r3, #8]
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	2101      	movs	r1, #1
 801544c:	438a      	bics	r2, r1
 801544e:	609a      	str	r2, [r3, #8]
 8015450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015452:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015456:	f383 8810 	msr	PRIMASK, r3
}
 801545a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2280      	movs	r2, #128	@ 0x80
 8015460:	2120      	movs	r1, #32
 8015462:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2200      	movs	r2, #0
 8015468:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	2200      	movs	r2, #0
 801546e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	4a36      	ldr	r2, [pc, #216]	@ (8015550 <UART_RxISR_16BIT+0x1c4>)
 8015476:	4293      	cmp	r3, r2
 8015478:	d01f      	beq.n	80154ba <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	685a      	ldr	r2, [r3, #4]
 8015480:	2380      	movs	r3, #128	@ 0x80
 8015482:	041b      	lsls	r3, r3, #16
 8015484:	4013      	ands	r3, r2
 8015486:	d018      	beq.n	80154ba <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015488:	f3ef 8310 	mrs	r3, PRIMASK
 801548c:	617b      	str	r3, [r7, #20]
  return(result);
 801548e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015492:	2301      	movs	r3, #1
 8015494:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	f383 8810 	msr	PRIMASK, r3
}
 801549c:	46c0      	nop			@ (mov r8, r8)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	681b      	ldr	r3, [r3, #0]
 80154a8:	492a      	ldr	r1, [pc, #168]	@ (8015554 <UART_RxISR_16BIT+0x1c8>)
 80154aa:	400a      	ands	r2, r1
 80154ac:	601a      	str	r2, [r3, #0]
 80154ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154b2:	69fb      	ldr	r3, [r7, #28]
 80154b4:	f383 8810 	msr	PRIMASK, r3
}
 80154b8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d130      	bne.n	8015524 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	2200      	movs	r2, #0
 80154c6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80154c8:	f3ef 8310 	mrs	r3, PRIMASK
 80154cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80154ce:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80154d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80154d2:	2301      	movs	r3, #1
 80154d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	f383 8810 	msr	PRIMASK, r3
}
 80154dc:	46c0      	nop			@ (mov r8, r8)
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	2110      	movs	r1, #16
 80154ea:	438a      	bics	r2, r1
 80154ec:	601a      	str	r2, [r3, #0]
 80154ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	f383 8810 	msr	PRIMASK, r3
}
 80154f8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	69db      	ldr	r3, [r3, #28]
 8015500:	2210      	movs	r2, #16
 8015502:	4013      	ands	r3, r2
 8015504:	2b10      	cmp	r3, #16
 8015506:	d103      	bne.n	8015510 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	2210      	movs	r2, #16
 801550e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	22ac      	movs	r2, #172	@ 0xac
 8015514:	589b      	ldr	r3, [r3, r2]
 8015516:	687a      	ldr	r2, [r7, #4]
 8015518:	2158      	movs	r1, #88	@ 0x58
 801551a:	5a51      	ldrh	r1, [r2, r1]
 801551c:	687a      	ldr	r2, [r7, #4]
 801551e:	0010      	movs	r0, r2
 8015520:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015522:	e00e      	b.n	8015542 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	2294      	movs	r2, #148	@ 0x94
 8015528:	589b      	ldr	r3, [r3, r2]
 801552a:	687a      	ldr	r2, [r7, #4]
 801552c:	0010      	movs	r0, r2
 801552e:	4798      	blx	r3
}
 8015530:	e007      	b.n	8015542 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	699a      	ldr	r2, [r3, #24]
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2108      	movs	r1, #8
 801553e:	430a      	orrs	r2, r1
 8015540:	619a      	str	r2, [r3, #24]
}
 8015542:	46c0      	nop			@ (mov r8, r8)
 8015544:	46bd      	mov	sp, r7
 8015546:	b014      	add	sp, #80	@ 0x50
 8015548:	bd80      	pop	{r7, pc}
 801554a:	46c0      	nop			@ (mov r8, r8)
 801554c:	fffffedf 	.word	0xfffffedf
 8015550:	40004800 	.word	0x40004800
 8015554:	fbffffff 	.word	0xfbffffff

08015558 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015558:	b580      	push	{r7, lr}
 801555a:	b082      	sub	sp, #8
 801555c:	af00      	add	r7, sp, #0
 801555e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8015560:	46c0      	nop			@ (mov r8, r8)
 8015562:	46bd      	mov	sp, r7
 8015564:	b002      	add	sp, #8
 8015566:	bd80      	pop	{r7, pc}

08015568 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	2244      	movs	r2, #68	@ 0x44
 8015574:	2100      	movs	r1, #0
 8015576:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8015578:	4b05      	ldr	r3, [pc, #20]	@ (8015590 <USB_EnableGlobalInt+0x28>)
 801557a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	b299      	uxth	r1, r3
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2240      	movs	r2, #64	@ 0x40
 8015584:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015586:	2300      	movs	r3, #0
}
 8015588:	0018      	movs	r0, r3
 801558a:	46bd      	mov	sp, r7
 801558c:	b004      	add	sp, #16
 801558e:	bd80      	pop	{r7, pc}
 8015590:	0000bf80 	.word	0x0000bf80

08015594 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b084      	sub	sp, #16
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801559c:	4b09      	ldr	r3, [pc, #36]	@ (80155c4 <USB_DisableGlobalInt+0x30>)
 801559e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	2240      	movs	r2, #64	@ 0x40
 80155a4:	5a9b      	ldrh	r3, [r3, r2]
 80155a6:	b29b      	uxth	r3, r3
 80155a8:	68fa      	ldr	r2, [r7, #12]
 80155aa:	b292      	uxth	r2, r2
 80155ac:	43d2      	mvns	r2, r2
 80155ae:	b292      	uxth	r2, r2
 80155b0:	4013      	ands	r3, r2
 80155b2:	b299      	uxth	r1, r3
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2240      	movs	r2, #64	@ 0x40
 80155b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80155ba:	2300      	movs	r3, #0
}
 80155bc:	0018      	movs	r0, r3
 80155be:	46bd      	mov	sp, r7
 80155c0:	b004      	add	sp, #16
 80155c2:	bd80      	pop	{r7, pc}
 80155c4:	0000bf80 	.word	0x0000bf80

080155c8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80155c8:	b084      	sub	sp, #16
 80155ca:	b590      	push	{r4, r7, lr}
 80155cc:	b083      	sub	sp, #12
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
 80155d2:	2004      	movs	r0, #4
 80155d4:	2410      	movs	r4, #16
 80155d6:	1900      	adds	r0, r0, r4
 80155d8:	2408      	movs	r4, #8
 80155da:	46a4      	mov	ip, r4
 80155dc:	44bc      	add	ip, r7
 80155de:	4460      	add	r0, ip
 80155e0:	6001      	str	r1, [r0, #0]
 80155e2:	6042      	str	r2, [r0, #4]
 80155e4:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	2240      	movs	r2, #64	@ 0x40
 80155ea:	2101      	movs	r1, #1
 80155ec:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	2240      	movs	r2, #64	@ 0x40
 80155f2:	2100      	movs	r1, #0
 80155f4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2244      	movs	r2, #68	@ 0x44
 80155fa:	2100      	movs	r1, #0
 80155fc:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	2250      	movs	r2, #80	@ 0x50
 8015602:	2100      	movs	r1, #0
 8015604:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015606:	2300      	movs	r3, #0
}
 8015608:	0018      	movs	r0, r3
 801560a:	46bd      	mov	sp, r7
 801560c:	b003      	add	sp, #12
 801560e:	bc90      	pop	{r4, r7}
 8015610:	bc08      	pop	{r3}
 8015612:	b004      	add	sp, #16
 8015614:	4718      	bx	r3
	...

08015618 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b09c      	sub	sp, #112	@ 0x70
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
 8015620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8015622:	236f      	movs	r3, #111	@ 0x6f
 8015624:	18fb      	adds	r3, r7, r3
 8015626:	2200      	movs	r2, #0
 8015628:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801562a:	687a      	ldr	r2, [r7, #4]
 801562c:	683b      	ldr	r3, [r7, #0]
 801562e:	781b      	ldrb	r3, [r3, #0]
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	18d3      	adds	r3, r2, r3
 8015634:	881b      	ldrh	r3, [r3, #0]
 8015636:	b29a      	uxth	r2, r3
 8015638:	236c      	movs	r3, #108	@ 0x6c
 801563a:	18fb      	adds	r3, r7, r3
 801563c:	49a3      	ldr	r1, [pc, #652]	@ (80158cc <USB_ActivateEndpoint+0x2b4>)
 801563e:	400a      	ands	r2, r1
 8015640:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	78db      	ldrb	r3, [r3, #3]
 8015646:	2b03      	cmp	r3, #3
 8015648:	d017      	beq.n	801567a <USB_ActivateEndpoint+0x62>
 801564a:	dc28      	bgt.n	801569e <USB_ActivateEndpoint+0x86>
 801564c:	2b02      	cmp	r3, #2
 801564e:	d00e      	beq.n	801566e <USB_ActivateEndpoint+0x56>
 8015650:	dc25      	bgt.n	801569e <USB_ActivateEndpoint+0x86>
 8015652:	2b00      	cmp	r3, #0
 8015654:	d002      	beq.n	801565c <USB_ActivateEndpoint+0x44>
 8015656:	2b01      	cmp	r3, #1
 8015658:	d018      	beq.n	801568c <USB_ActivateEndpoint+0x74>
 801565a:	e020      	b.n	801569e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801565c:	226c      	movs	r2, #108	@ 0x6c
 801565e:	18bb      	adds	r3, r7, r2
 8015660:	18ba      	adds	r2, r7, r2
 8015662:	8812      	ldrh	r2, [r2, #0]
 8015664:	2180      	movs	r1, #128	@ 0x80
 8015666:	0089      	lsls	r1, r1, #2
 8015668:	430a      	orrs	r2, r1
 801566a:	801a      	strh	r2, [r3, #0]
      break;
 801566c:	e01c      	b.n	80156a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801566e:	226c      	movs	r2, #108	@ 0x6c
 8015670:	18bb      	adds	r3, r7, r2
 8015672:	18ba      	adds	r2, r7, r2
 8015674:	8812      	ldrh	r2, [r2, #0]
 8015676:	801a      	strh	r2, [r3, #0]
      break;
 8015678:	e016      	b.n	80156a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801567a:	226c      	movs	r2, #108	@ 0x6c
 801567c:	18bb      	adds	r3, r7, r2
 801567e:	18ba      	adds	r2, r7, r2
 8015680:	8812      	ldrh	r2, [r2, #0]
 8015682:	21c0      	movs	r1, #192	@ 0xc0
 8015684:	00c9      	lsls	r1, r1, #3
 8015686:	430a      	orrs	r2, r1
 8015688:	801a      	strh	r2, [r3, #0]
      break;
 801568a:	e00d      	b.n	80156a8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801568c:	226c      	movs	r2, #108	@ 0x6c
 801568e:	18bb      	adds	r3, r7, r2
 8015690:	18ba      	adds	r2, r7, r2
 8015692:	8812      	ldrh	r2, [r2, #0]
 8015694:	2180      	movs	r1, #128	@ 0x80
 8015696:	00c9      	lsls	r1, r1, #3
 8015698:	430a      	orrs	r2, r1
 801569a:	801a      	strh	r2, [r3, #0]
      break;
 801569c:	e004      	b.n	80156a8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801569e:	236f      	movs	r3, #111	@ 0x6f
 80156a0:	18fb      	adds	r3, r7, r3
 80156a2:	2201      	movs	r2, #1
 80156a4:	701a      	strb	r2, [r3, #0]
      break;
 80156a6:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80156a8:	687a      	ldr	r2, [r7, #4]
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	781b      	ldrb	r3, [r3, #0]
 80156ae:	009b      	lsls	r3, r3, #2
 80156b0:	18d3      	adds	r3, r2, r3
 80156b2:	226c      	movs	r2, #108	@ 0x6c
 80156b4:	18ba      	adds	r2, r7, r2
 80156b6:	8812      	ldrh	r2, [r2, #0]
 80156b8:	4985      	ldr	r1, [pc, #532]	@ (80158d0 <USB_ActivateEndpoint+0x2b8>)
 80156ba:	430a      	orrs	r2, r1
 80156bc:	b292      	uxth	r2, r2
 80156be:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80156c0:	687a      	ldr	r2, [r7, #4]
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	781b      	ldrb	r3, [r3, #0]
 80156c6:	009b      	lsls	r3, r3, #2
 80156c8:	18d3      	adds	r3, r2, r3
 80156ca:	881b      	ldrh	r3, [r3, #0]
 80156cc:	b29b      	uxth	r3, r3
 80156ce:	b21b      	sxth	r3, r3
 80156d0:	4a80      	ldr	r2, [pc, #512]	@ (80158d4 <USB_ActivateEndpoint+0x2bc>)
 80156d2:	4013      	ands	r3, r2
 80156d4:	b21a      	sxth	r2, r3
 80156d6:	683b      	ldr	r3, [r7, #0]
 80156d8:	781b      	ldrb	r3, [r3, #0]
 80156da:	b21b      	sxth	r3, r3
 80156dc:	4313      	orrs	r3, r2
 80156de:	b21a      	sxth	r2, r3
 80156e0:	2166      	movs	r1, #102	@ 0x66
 80156e2:	187b      	adds	r3, r7, r1
 80156e4:	801a      	strh	r2, [r3, #0]
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	18d3      	adds	r3, r2, r3
 80156f0:	187a      	adds	r2, r7, r1
 80156f2:	8812      	ldrh	r2, [r2, #0]
 80156f4:	4976      	ldr	r1, [pc, #472]	@ (80158d0 <USB_ActivateEndpoint+0x2b8>)
 80156f6:	430a      	orrs	r2, r1
 80156f8:	b292      	uxth	r2, r2
 80156fa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	7b1b      	ldrb	r3, [r3, #12]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d000      	beq.n	8015706 <USB_ActivateEndpoint+0xee>
 8015704:	e178      	b.n	80159f8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	785b      	ldrb	r3, [r3, #1]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d100      	bne.n	8015710 <USB_ActivateEndpoint+0xf8>
 801570e:	e07a      	b.n	8015806 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	61bb      	str	r3, [r7, #24]
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	2250      	movs	r2, #80	@ 0x50
 8015718:	5a9b      	ldrh	r3, [r3, r2]
 801571a:	b29b      	uxth	r3, r3
 801571c:	001a      	movs	r2, r3
 801571e:	69bb      	ldr	r3, [r7, #24]
 8015720:	189b      	adds	r3, r3, r2
 8015722:	61bb      	str	r3, [r7, #24]
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	00da      	lsls	r2, r3, #3
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	18d3      	adds	r3, r2, r3
 801572e:	2280      	movs	r2, #128	@ 0x80
 8015730:	00d2      	lsls	r2, r2, #3
 8015732:	4694      	mov	ip, r2
 8015734:	4463      	add	r3, ip
 8015736:	617b      	str	r3, [r7, #20]
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	88db      	ldrh	r3, [r3, #6]
 801573c:	085b      	lsrs	r3, r3, #1
 801573e:	b29b      	uxth	r3, r3
 8015740:	18db      	adds	r3, r3, r3
 8015742:	b29a      	uxth	r2, r3
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015748:	687a      	ldr	r2, [r7, #4]
 801574a:	683b      	ldr	r3, [r7, #0]
 801574c:	781b      	ldrb	r3, [r3, #0]
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	18d2      	adds	r2, r2, r3
 8015752:	2112      	movs	r1, #18
 8015754:	187b      	adds	r3, r7, r1
 8015756:	8812      	ldrh	r2, [r2, #0]
 8015758:	801a      	strh	r2, [r3, #0]
 801575a:	187b      	adds	r3, r7, r1
 801575c:	881b      	ldrh	r3, [r3, #0]
 801575e:	2240      	movs	r2, #64	@ 0x40
 8015760:	4013      	ands	r3, r2
 8015762:	d016      	beq.n	8015792 <USB_ActivateEndpoint+0x17a>
 8015764:	687a      	ldr	r2, [r7, #4]
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	009b      	lsls	r3, r3, #2
 801576c:	18d3      	adds	r3, r2, r3
 801576e:	881b      	ldrh	r3, [r3, #0]
 8015770:	b29a      	uxth	r2, r3
 8015772:	2010      	movs	r0, #16
 8015774:	183b      	adds	r3, r7, r0
 8015776:	4957      	ldr	r1, [pc, #348]	@ (80158d4 <USB_ActivateEndpoint+0x2bc>)
 8015778:	400a      	ands	r2, r1
 801577a:	801a      	strh	r2, [r3, #0]
 801577c:	687a      	ldr	r2, [r7, #4]
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	781b      	ldrb	r3, [r3, #0]
 8015782:	009b      	lsls	r3, r3, #2
 8015784:	18d3      	adds	r3, r2, r3
 8015786:	183a      	adds	r2, r7, r0
 8015788:	8812      	ldrh	r2, [r2, #0]
 801578a:	4953      	ldr	r1, [pc, #332]	@ (80158d8 <USB_ActivateEndpoint+0x2c0>)
 801578c:	430a      	orrs	r2, r1
 801578e:	b292      	uxth	r2, r2
 8015790:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	78db      	ldrb	r3, [r3, #3]
 8015796:	2b01      	cmp	r3, #1
 8015798:	d01d      	beq.n	80157d6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	009b      	lsls	r3, r3, #2
 80157a2:	18d3      	adds	r3, r2, r3
 80157a4:	881b      	ldrh	r3, [r3, #0]
 80157a6:	b29a      	uxth	r2, r3
 80157a8:	200c      	movs	r0, #12
 80157aa:	183b      	adds	r3, r7, r0
 80157ac:	494b      	ldr	r1, [pc, #300]	@ (80158dc <USB_ActivateEndpoint+0x2c4>)
 80157ae:	400a      	ands	r2, r1
 80157b0:	801a      	strh	r2, [r3, #0]
 80157b2:	183b      	adds	r3, r7, r0
 80157b4:	183a      	adds	r2, r7, r0
 80157b6:	8812      	ldrh	r2, [r2, #0]
 80157b8:	2120      	movs	r1, #32
 80157ba:	404a      	eors	r2, r1
 80157bc:	801a      	strh	r2, [r3, #0]
 80157be:	687a      	ldr	r2, [r7, #4]
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	781b      	ldrb	r3, [r3, #0]
 80157c4:	009b      	lsls	r3, r3, #2
 80157c6:	18d3      	adds	r3, r2, r3
 80157c8:	183a      	adds	r2, r7, r0
 80157ca:	8812      	ldrh	r2, [r2, #0]
 80157cc:	4940      	ldr	r1, [pc, #256]	@ (80158d0 <USB_ActivateEndpoint+0x2b8>)
 80157ce:	430a      	orrs	r2, r1
 80157d0:	b292      	uxth	r2, r2
 80157d2:	801a      	strh	r2, [r3, #0]
 80157d4:	e2b4      	b.n	8015d40 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80157d6:	687a      	ldr	r2, [r7, #4]
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	009b      	lsls	r3, r3, #2
 80157de:	18d3      	adds	r3, r2, r3
 80157e0:	881b      	ldrh	r3, [r3, #0]
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	200e      	movs	r0, #14
 80157e6:	183b      	adds	r3, r7, r0
 80157e8:	493c      	ldr	r1, [pc, #240]	@ (80158dc <USB_ActivateEndpoint+0x2c4>)
 80157ea:	400a      	ands	r2, r1
 80157ec:	801a      	strh	r2, [r3, #0]
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	009b      	lsls	r3, r3, #2
 80157f6:	18d3      	adds	r3, r2, r3
 80157f8:	183a      	adds	r2, r7, r0
 80157fa:	8812      	ldrh	r2, [r2, #0]
 80157fc:	4934      	ldr	r1, [pc, #208]	@ (80158d0 <USB_ActivateEndpoint+0x2b8>)
 80157fe:	430a      	orrs	r2, r1
 8015800:	b292      	uxth	r2, r2
 8015802:	801a      	strh	r2, [r3, #0]
 8015804:	e29c      	b.n	8015d40 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	633b      	str	r3, [r7, #48]	@ 0x30
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2250      	movs	r2, #80	@ 0x50
 801580e:	5a9b      	ldrh	r3, [r3, r2]
 8015810:	b29b      	uxth	r3, r3
 8015812:	001a      	movs	r2, r3
 8015814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015816:	189b      	adds	r3, r3, r2
 8015818:	633b      	str	r3, [r7, #48]	@ 0x30
 801581a:	683b      	ldr	r3, [r7, #0]
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	00da      	lsls	r2, r3, #3
 8015820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015822:	18d3      	adds	r3, r2, r3
 8015824:	4a2e      	ldr	r2, [pc, #184]	@ (80158e0 <USB_ActivateEndpoint+0x2c8>)
 8015826:	4694      	mov	ip, r2
 8015828:	4463      	add	r3, ip
 801582a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801582c:	683b      	ldr	r3, [r7, #0]
 801582e:	88db      	ldrh	r3, [r3, #6]
 8015830:	085b      	lsrs	r3, r3, #1
 8015832:	b29b      	uxth	r3, r3
 8015834:	18db      	adds	r3, r3, r3
 8015836:	b29a      	uxth	r2, r3
 8015838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801583a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	2250      	movs	r2, #80	@ 0x50
 8015844:	5a9b      	ldrh	r3, [r3, r2]
 8015846:	b29b      	uxth	r3, r3
 8015848:	001a      	movs	r2, r3
 801584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801584c:	189b      	adds	r3, r3, r2
 801584e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	781b      	ldrb	r3, [r3, #0]
 8015854:	00da      	lsls	r2, r3, #3
 8015856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015858:	18d3      	adds	r3, r2, r3
 801585a:	4a22      	ldr	r2, [pc, #136]	@ (80158e4 <USB_ActivateEndpoint+0x2cc>)
 801585c:	4694      	mov	ip, r2
 801585e:	4463      	add	r3, ip
 8015860:	627b      	str	r3, [r7, #36]	@ 0x24
 8015862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015864:	881b      	ldrh	r3, [r3, #0]
 8015866:	b29b      	uxth	r3, r3
 8015868:	059b      	lsls	r3, r3, #22
 801586a:	0d9b      	lsrs	r3, r3, #22
 801586c:	b29a      	uxth	r2, r3
 801586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015870:	801a      	strh	r2, [r3, #0]
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	691b      	ldr	r3, [r3, #16]
 8015876:	2b3e      	cmp	r3, #62	@ 0x3e
 8015878:	d91a      	bls.n	80158b0 <USB_ActivateEndpoint+0x298>
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	691b      	ldr	r3, [r3, #16]
 801587e:	095b      	lsrs	r3, r3, #5
 8015880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	691b      	ldr	r3, [r3, #16]
 8015886:	221f      	movs	r2, #31
 8015888:	4013      	ands	r3, r2
 801588a:	d102      	bne.n	8015892 <USB_ActivateEndpoint+0x27a>
 801588c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801588e:	3b01      	subs	r3, #1
 8015890:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015894:	881b      	ldrh	r3, [r3, #0]
 8015896:	b29a      	uxth	r2, r3
 8015898:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801589a:	b29b      	uxth	r3, r3
 801589c:	029b      	lsls	r3, r3, #10
 801589e:	b29b      	uxth	r3, r3
 80158a0:	4313      	orrs	r3, r2
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	4a10      	ldr	r2, [pc, #64]	@ (80158e8 <USB_ActivateEndpoint+0x2d0>)
 80158a6:	4313      	orrs	r3, r2
 80158a8:	b29a      	uxth	r2, r3
 80158aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ac:	801a      	strh	r2, [r3, #0]
 80158ae:	e034      	b.n	801591a <USB_ActivateEndpoint+0x302>
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	691b      	ldr	r3, [r3, #16]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d119      	bne.n	80158ec <USB_ActivateEndpoint+0x2d4>
 80158b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ba:	881b      	ldrh	r3, [r3, #0]
 80158bc:	b29b      	uxth	r3, r3
 80158be:	4a0a      	ldr	r2, [pc, #40]	@ (80158e8 <USB_ActivateEndpoint+0x2d0>)
 80158c0:	4313      	orrs	r3, r2
 80158c2:	b29a      	uxth	r2, r3
 80158c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158c6:	801a      	strh	r2, [r3, #0]
 80158c8:	e027      	b.n	801591a <USB_ActivateEndpoint+0x302>
 80158ca:	46c0      	nop			@ (mov r8, r8)
 80158cc:	ffff898f 	.word	0xffff898f
 80158d0:	ffff8080 	.word	0xffff8080
 80158d4:	ffff8f8f 	.word	0xffff8f8f
 80158d8:	ffff80c0 	.word	0xffff80c0
 80158dc:	ffff8fbf 	.word	0xffff8fbf
 80158e0:	00000404 	.word	0x00000404
 80158e4:	00000406 	.word	0x00000406
 80158e8:	ffff8000 	.word	0xffff8000
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	691b      	ldr	r3, [r3, #16]
 80158f0:	085b      	lsrs	r3, r3, #1
 80158f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	691b      	ldr	r3, [r3, #16]
 80158f8:	2201      	movs	r2, #1
 80158fa:	4013      	ands	r3, r2
 80158fc:	d002      	beq.n	8015904 <USB_ActivateEndpoint+0x2ec>
 80158fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015900:	3301      	adds	r3, #1
 8015902:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015906:	881b      	ldrh	r3, [r3, #0]
 8015908:	b29a      	uxth	r2, r3
 801590a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801590c:	b29b      	uxth	r3, r3
 801590e:	029b      	lsls	r3, r3, #10
 8015910:	b29b      	uxth	r3, r3
 8015912:	4313      	orrs	r3, r2
 8015914:	b29a      	uxth	r2, r3
 8015916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015918:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801591a:	687a      	ldr	r2, [r7, #4]
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	781b      	ldrb	r3, [r3, #0]
 8015920:	009b      	lsls	r3, r3, #2
 8015922:	18d2      	adds	r2, r2, r3
 8015924:	2122      	movs	r1, #34	@ 0x22
 8015926:	187b      	adds	r3, r7, r1
 8015928:	8812      	ldrh	r2, [r2, #0]
 801592a:	801a      	strh	r2, [r3, #0]
 801592c:	187b      	adds	r3, r7, r1
 801592e:	881a      	ldrh	r2, [r3, #0]
 8015930:	2380      	movs	r3, #128	@ 0x80
 8015932:	01db      	lsls	r3, r3, #7
 8015934:	4013      	ands	r3, r2
 8015936:	d016      	beq.n	8015966 <USB_ActivateEndpoint+0x34e>
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	009b      	lsls	r3, r3, #2
 8015940:	18d3      	adds	r3, r2, r3
 8015942:	881b      	ldrh	r3, [r3, #0]
 8015944:	b29a      	uxth	r2, r3
 8015946:	2020      	movs	r0, #32
 8015948:	183b      	adds	r3, r7, r0
 801594a:	49dd      	ldr	r1, [pc, #884]	@ (8015cc0 <USB_ActivateEndpoint+0x6a8>)
 801594c:	400a      	ands	r2, r1
 801594e:	801a      	strh	r2, [r3, #0]
 8015950:	687a      	ldr	r2, [r7, #4]
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	781b      	ldrb	r3, [r3, #0]
 8015956:	009b      	lsls	r3, r3, #2
 8015958:	18d3      	adds	r3, r2, r3
 801595a:	183a      	adds	r2, r7, r0
 801595c:	8812      	ldrh	r2, [r2, #0]
 801595e:	49d9      	ldr	r1, [pc, #868]	@ (8015cc4 <USB_ActivateEndpoint+0x6ac>)
 8015960:	430a      	orrs	r2, r1
 8015962:	b292      	uxth	r2, r2
 8015964:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d125      	bne.n	80159ba <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801596e:	687a      	ldr	r2, [r7, #4]
 8015970:	683b      	ldr	r3, [r7, #0]
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	009b      	lsls	r3, r3, #2
 8015976:	18d3      	adds	r3, r2, r3
 8015978:	881b      	ldrh	r3, [r3, #0]
 801597a:	b29a      	uxth	r2, r3
 801597c:	201c      	movs	r0, #28
 801597e:	183b      	adds	r3, r7, r0
 8015980:	49d1      	ldr	r1, [pc, #836]	@ (8015cc8 <USB_ActivateEndpoint+0x6b0>)
 8015982:	400a      	ands	r2, r1
 8015984:	801a      	strh	r2, [r3, #0]
 8015986:	183b      	adds	r3, r7, r0
 8015988:	183a      	adds	r2, r7, r0
 801598a:	8812      	ldrh	r2, [r2, #0]
 801598c:	2180      	movs	r1, #128	@ 0x80
 801598e:	0149      	lsls	r1, r1, #5
 8015990:	404a      	eors	r2, r1
 8015992:	801a      	strh	r2, [r3, #0]
 8015994:	183b      	adds	r3, r7, r0
 8015996:	183a      	adds	r2, r7, r0
 8015998:	8812      	ldrh	r2, [r2, #0]
 801599a:	2180      	movs	r1, #128	@ 0x80
 801599c:	0189      	lsls	r1, r1, #6
 801599e:	404a      	eors	r2, r1
 80159a0:	801a      	strh	r2, [r3, #0]
 80159a2:	687a      	ldr	r2, [r7, #4]
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	781b      	ldrb	r3, [r3, #0]
 80159a8:	009b      	lsls	r3, r3, #2
 80159aa:	18d3      	adds	r3, r2, r3
 80159ac:	183a      	adds	r2, r7, r0
 80159ae:	8812      	ldrh	r2, [r2, #0]
 80159b0:	49c6      	ldr	r1, [pc, #792]	@ (8015ccc <USB_ActivateEndpoint+0x6b4>)
 80159b2:	430a      	orrs	r2, r1
 80159b4:	b292      	uxth	r2, r2
 80159b6:	801a      	strh	r2, [r3, #0]
 80159b8:	e1c2      	b.n	8015d40 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	009b      	lsls	r3, r3, #2
 80159c2:	18d3      	adds	r3, r2, r3
 80159c4:	881b      	ldrh	r3, [r3, #0]
 80159c6:	b29a      	uxth	r2, r3
 80159c8:	201e      	movs	r0, #30
 80159ca:	183b      	adds	r3, r7, r0
 80159cc:	49be      	ldr	r1, [pc, #760]	@ (8015cc8 <USB_ActivateEndpoint+0x6b0>)
 80159ce:	400a      	ands	r2, r1
 80159d0:	801a      	strh	r2, [r3, #0]
 80159d2:	183b      	adds	r3, r7, r0
 80159d4:	183a      	adds	r2, r7, r0
 80159d6:	8812      	ldrh	r2, [r2, #0]
 80159d8:	2180      	movs	r1, #128	@ 0x80
 80159da:	0189      	lsls	r1, r1, #6
 80159dc:	404a      	eors	r2, r1
 80159de:	801a      	strh	r2, [r3, #0]
 80159e0:	687a      	ldr	r2, [r7, #4]
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	781b      	ldrb	r3, [r3, #0]
 80159e6:	009b      	lsls	r3, r3, #2
 80159e8:	18d3      	adds	r3, r2, r3
 80159ea:	183a      	adds	r2, r7, r0
 80159ec:	8812      	ldrh	r2, [r2, #0]
 80159ee:	49b7      	ldr	r1, [pc, #732]	@ (8015ccc <USB_ActivateEndpoint+0x6b4>)
 80159f0:	430a      	orrs	r2, r1
 80159f2:	b292      	uxth	r2, r2
 80159f4:	801a      	strh	r2, [r3, #0]
 80159f6:	e1a3      	b.n	8015d40 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	78db      	ldrb	r3, [r3, #3]
 80159fc:	2b02      	cmp	r3, #2
 80159fe:	d117      	bne.n	8015a30 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8015a00:	687a      	ldr	r2, [r7, #4]
 8015a02:	683b      	ldr	r3, [r7, #0]
 8015a04:	781b      	ldrb	r3, [r3, #0]
 8015a06:	009b      	lsls	r3, r3, #2
 8015a08:	18d3      	adds	r3, r2, r3
 8015a0a:	881b      	ldrh	r3, [r3, #0]
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	2062      	movs	r0, #98	@ 0x62
 8015a10:	183b      	adds	r3, r7, r0
 8015a12:	49ab      	ldr	r1, [pc, #684]	@ (8015cc0 <USB_ActivateEndpoint+0x6a8>)
 8015a14:	400a      	ands	r2, r1
 8015a16:	801a      	strh	r2, [r3, #0]
 8015a18:	687a      	ldr	r2, [r7, #4]
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	781b      	ldrb	r3, [r3, #0]
 8015a1e:	009b      	lsls	r3, r3, #2
 8015a20:	18d3      	adds	r3, r2, r3
 8015a22:	183a      	adds	r2, r7, r0
 8015a24:	8812      	ldrh	r2, [r2, #0]
 8015a26:	49aa      	ldr	r1, [pc, #680]	@ (8015cd0 <USB_ActivateEndpoint+0x6b8>)
 8015a28:	430a      	orrs	r2, r1
 8015a2a:	b292      	uxth	r2, r2
 8015a2c:	801a      	strh	r2, [r3, #0]
 8015a2e:	e016      	b.n	8015a5e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	18d3      	adds	r3, r2, r3
 8015a3a:	881b      	ldrh	r3, [r3, #0]
 8015a3c:	b29a      	uxth	r2, r3
 8015a3e:	2064      	movs	r0, #100	@ 0x64
 8015a40:	183b      	adds	r3, r7, r0
 8015a42:	49a4      	ldr	r1, [pc, #656]	@ (8015cd4 <USB_ActivateEndpoint+0x6bc>)
 8015a44:	400a      	ands	r2, r1
 8015a46:	801a      	strh	r2, [r3, #0]
 8015a48:	687a      	ldr	r2, [r7, #4]
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	18d3      	adds	r3, r2, r3
 8015a52:	183a      	adds	r2, r7, r0
 8015a54:	8812      	ldrh	r2, [r2, #0]
 8015a56:	499d      	ldr	r1, [pc, #628]	@ (8015ccc <USB_ActivateEndpoint+0x6b4>)
 8015a58:	430a      	orrs	r2, r1
 8015a5a:	b292      	uxth	r2, r2
 8015a5c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2250      	movs	r2, #80	@ 0x50
 8015a66:	5a9b      	ldrh	r3, [r3, r2]
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	001a      	movs	r2, r3
 8015a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015a6e:	189b      	adds	r3, r3, r2
 8015a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8015a72:	683b      	ldr	r3, [r7, #0]
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	00da      	lsls	r2, r3, #3
 8015a78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015a7a:	18d3      	adds	r3, r2, r3
 8015a7c:	2280      	movs	r2, #128	@ 0x80
 8015a7e:	00d2      	lsls	r2, r2, #3
 8015a80:	4694      	mov	ip, r2
 8015a82:	4463      	add	r3, ip
 8015a84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	891b      	ldrh	r3, [r3, #8]
 8015a8a:	085b      	lsrs	r3, r3, #1
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	18db      	adds	r3, r3, r3
 8015a90:	b29a      	uxth	r2, r3
 8015a92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015a94:	801a      	strh	r2, [r3, #0]
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	2250      	movs	r2, #80	@ 0x50
 8015a9e:	5a9b      	ldrh	r3, [r3, r2]
 8015aa0:	b29b      	uxth	r3, r3
 8015aa2:	001a      	movs	r2, r3
 8015aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015aa6:	189b      	adds	r3, r3, r2
 8015aa8:	657b      	str	r3, [r7, #84]	@ 0x54
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	781b      	ldrb	r3, [r3, #0]
 8015aae:	00da      	lsls	r2, r3, #3
 8015ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ab2:	18d3      	adds	r3, r2, r3
 8015ab4:	4a88      	ldr	r2, [pc, #544]	@ (8015cd8 <USB_ActivateEndpoint+0x6c0>)
 8015ab6:	4694      	mov	ip, r2
 8015ab8:	4463      	add	r3, ip
 8015aba:	653b      	str	r3, [r7, #80]	@ 0x50
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	895b      	ldrh	r3, [r3, #10]
 8015ac0:	085b      	lsrs	r3, r3, #1
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	18db      	adds	r3, r3, r3
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015aca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	785b      	ldrb	r3, [r3, #1]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d000      	beq.n	8015ad6 <USB_ActivateEndpoint+0x4be>
 8015ad4:	e087      	b.n	8015be6 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	781b      	ldrb	r3, [r3, #0]
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	18d2      	adds	r2, r2, r3
 8015ae0:	2140      	movs	r1, #64	@ 0x40
 8015ae2:	187b      	adds	r3, r7, r1
 8015ae4:	8812      	ldrh	r2, [r2, #0]
 8015ae6:	801a      	strh	r2, [r3, #0]
 8015ae8:	187b      	adds	r3, r7, r1
 8015aea:	881a      	ldrh	r2, [r3, #0]
 8015aec:	2380      	movs	r3, #128	@ 0x80
 8015aee:	01db      	lsls	r3, r3, #7
 8015af0:	4013      	ands	r3, r2
 8015af2:	d016      	beq.n	8015b22 <USB_ActivateEndpoint+0x50a>
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	781b      	ldrb	r3, [r3, #0]
 8015afa:	009b      	lsls	r3, r3, #2
 8015afc:	18d3      	adds	r3, r2, r3
 8015afe:	881b      	ldrh	r3, [r3, #0]
 8015b00:	b29a      	uxth	r2, r3
 8015b02:	203e      	movs	r0, #62	@ 0x3e
 8015b04:	183b      	adds	r3, r7, r0
 8015b06:	496e      	ldr	r1, [pc, #440]	@ (8015cc0 <USB_ActivateEndpoint+0x6a8>)
 8015b08:	400a      	ands	r2, r1
 8015b0a:	801a      	strh	r2, [r3, #0]
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	781b      	ldrb	r3, [r3, #0]
 8015b12:	009b      	lsls	r3, r3, #2
 8015b14:	18d3      	adds	r3, r2, r3
 8015b16:	183a      	adds	r2, r7, r0
 8015b18:	8812      	ldrh	r2, [r2, #0]
 8015b1a:	496a      	ldr	r1, [pc, #424]	@ (8015cc4 <USB_ActivateEndpoint+0x6ac>)
 8015b1c:	430a      	orrs	r2, r1
 8015b1e:	b292      	uxth	r2, r2
 8015b20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015b22:	687a      	ldr	r2, [r7, #4]
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	781b      	ldrb	r3, [r3, #0]
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	18d2      	adds	r2, r2, r3
 8015b2c:	213c      	movs	r1, #60	@ 0x3c
 8015b2e:	187b      	adds	r3, r7, r1
 8015b30:	8812      	ldrh	r2, [r2, #0]
 8015b32:	801a      	strh	r2, [r3, #0]
 8015b34:	187b      	adds	r3, r7, r1
 8015b36:	881b      	ldrh	r3, [r3, #0]
 8015b38:	2240      	movs	r2, #64	@ 0x40
 8015b3a:	4013      	ands	r3, r2
 8015b3c:	d016      	beq.n	8015b6c <USB_ActivateEndpoint+0x554>
 8015b3e:	687a      	ldr	r2, [r7, #4]
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	009b      	lsls	r3, r3, #2
 8015b46:	18d3      	adds	r3, r2, r3
 8015b48:	881b      	ldrh	r3, [r3, #0]
 8015b4a:	b29a      	uxth	r2, r3
 8015b4c:	203a      	movs	r0, #58	@ 0x3a
 8015b4e:	183b      	adds	r3, r7, r0
 8015b50:	495b      	ldr	r1, [pc, #364]	@ (8015cc0 <USB_ActivateEndpoint+0x6a8>)
 8015b52:	400a      	ands	r2, r1
 8015b54:	801a      	strh	r2, [r3, #0]
 8015b56:	687a      	ldr	r2, [r7, #4]
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	18d3      	adds	r3, r2, r3
 8015b60:	183a      	adds	r2, r7, r0
 8015b62:	8812      	ldrh	r2, [r2, #0]
 8015b64:	495d      	ldr	r1, [pc, #372]	@ (8015cdc <USB_ActivateEndpoint+0x6c4>)
 8015b66:	430a      	orrs	r2, r1
 8015b68:	b292      	uxth	r2, r2
 8015b6a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015b6c:	687a      	ldr	r2, [r7, #4]
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	781b      	ldrb	r3, [r3, #0]
 8015b72:	009b      	lsls	r3, r3, #2
 8015b74:	18d3      	adds	r3, r2, r3
 8015b76:	881b      	ldrh	r3, [r3, #0]
 8015b78:	b29a      	uxth	r2, r3
 8015b7a:	2038      	movs	r0, #56	@ 0x38
 8015b7c:	183b      	adds	r3, r7, r0
 8015b7e:	4952      	ldr	r1, [pc, #328]	@ (8015cc8 <USB_ActivateEndpoint+0x6b0>)
 8015b80:	400a      	ands	r2, r1
 8015b82:	801a      	strh	r2, [r3, #0]
 8015b84:	183b      	adds	r3, r7, r0
 8015b86:	183a      	adds	r2, r7, r0
 8015b88:	8812      	ldrh	r2, [r2, #0]
 8015b8a:	2180      	movs	r1, #128	@ 0x80
 8015b8c:	0149      	lsls	r1, r1, #5
 8015b8e:	404a      	eors	r2, r1
 8015b90:	801a      	strh	r2, [r3, #0]
 8015b92:	183b      	adds	r3, r7, r0
 8015b94:	183a      	adds	r2, r7, r0
 8015b96:	8812      	ldrh	r2, [r2, #0]
 8015b98:	2180      	movs	r1, #128	@ 0x80
 8015b9a:	0189      	lsls	r1, r1, #6
 8015b9c:	404a      	eors	r2, r1
 8015b9e:	801a      	strh	r2, [r3, #0]
 8015ba0:	687a      	ldr	r2, [r7, #4]
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	009b      	lsls	r3, r3, #2
 8015ba8:	18d3      	adds	r3, r2, r3
 8015baa:	183a      	adds	r2, r7, r0
 8015bac:	8812      	ldrh	r2, [r2, #0]
 8015bae:	4947      	ldr	r1, [pc, #284]	@ (8015ccc <USB_ActivateEndpoint+0x6b4>)
 8015bb0:	430a      	orrs	r2, r1
 8015bb2:	b292      	uxth	r2, r2
 8015bb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	683b      	ldr	r3, [r7, #0]
 8015bba:	781b      	ldrb	r3, [r3, #0]
 8015bbc:	009b      	lsls	r3, r3, #2
 8015bbe:	18d3      	adds	r3, r2, r3
 8015bc0:	881b      	ldrh	r3, [r3, #0]
 8015bc2:	b29a      	uxth	r2, r3
 8015bc4:	2036      	movs	r0, #54	@ 0x36
 8015bc6:	183b      	adds	r3, r7, r0
 8015bc8:	4945      	ldr	r1, [pc, #276]	@ (8015ce0 <USB_ActivateEndpoint+0x6c8>)
 8015bca:	400a      	ands	r2, r1
 8015bcc:	801a      	strh	r2, [r3, #0]
 8015bce:	687a      	ldr	r2, [r7, #4]
 8015bd0:	683b      	ldr	r3, [r7, #0]
 8015bd2:	781b      	ldrb	r3, [r3, #0]
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	18d3      	adds	r3, r2, r3
 8015bd8:	183a      	adds	r2, r7, r0
 8015bda:	8812      	ldrh	r2, [r2, #0]
 8015bdc:	493b      	ldr	r1, [pc, #236]	@ (8015ccc <USB_ActivateEndpoint+0x6b4>)
 8015bde:	430a      	orrs	r2, r1
 8015be0:	b292      	uxth	r2, r2
 8015be2:	801a      	strh	r2, [r3, #0]
 8015be4:	e0ac      	b.n	8015d40 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015be6:	687a      	ldr	r2, [r7, #4]
 8015be8:	683b      	ldr	r3, [r7, #0]
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	009b      	lsls	r3, r3, #2
 8015bee:	18d2      	adds	r2, r2, r3
 8015bf0:	214e      	movs	r1, #78	@ 0x4e
 8015bf2:	187b      	adds	r3, r7, r1
 8015bf4:	8812      	ldrh	r2, [r2, #0]
 8015bf6:	801a      	strh	r2, [r3, #0]
 8015bf8:	187b      	adds	r3, r7, r1
 8015bfa:	881a      	ldrh	r2, [r3, #0]
 8015bfc:	2380      	movs	r3, #128	@ 0x80
 8015bfe:	01db      	lsls	r3, r3, #7
 8015c00:	4013      	ands	r3, r2
 8015c02:	d016      	beq.n	8015c32 <USB_ActivateEndpoint+0x61a>
 8015c04:	687a      	ldr	r2, [r7, #4]
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	18d3      	adds	r3, r2, r3
 8015c0e:	881b      	ldrh	r3, [r3, #0]
 8015c10:	b29a      	uxth	r2, r3
 8015c12:	204c      	movs	r0, #76	@ 0x4c
 8015c14:	183b      	adds	r3, r7, r0
 8015c16:	492a      	ldr	r1, [pc, #168]	@ (8015cc0 <USB_ActivateEndpoint+0x6a8>)
 8015c18:	400a      	ands	r2, r1
 8015c1a:	801a      	strh	r2, [r3, #0]
 8015c1c:	687a      	ldr	r2, [r7, #4]
 8015c1e:	683b      	ldr	r3, [r7, #0]
 8015c20:	781b      	ldrb	r3, [r3, #0]
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	18d3      	adds	r3, r2, r3
 8015c26:	183a      	adds	r2, r7, r0
 8015c28:	8812      	ldrh	r2, [r2, #0]
 8015c2a:	4926      	ldr	r1, [pc, #152]	@ (8015cc4 <USB_ActivateEndpoint+0x6ac>)
 8015c2c:	430a      	orrs	r2, r1
 8015c2e:	b292      	uxth	r2, r2
 8015c30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015c32:	687a      	ldr	r2, [r7, #4]
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	009b      	lsls	r3, r3, #2
 8015c3a:	18d2      	adds	r2, r2, r3
 8015c3c:	214a      	movs	r1, #74	@ 0x4a
 8015c3e:	187b      	adds	r3, r7, r1
 8015c40:	8812      	ldrh	r2, [r2, #0]
 8015c42:	801a      	strh	r2, [r3, #0]
 8015c44:	187b      	adds	r3, r7, r1
 8015c46:	881b      	ldrh	r3, [r3, #0]
 8015c48:	2240      	movs	r2, #64	@ 0x40
 8015c4a:	4013      	ands	r3, r2
 8015c4c:	d016      	beq.n	8015c7c <USB_ActivateEndpoint+0x664>
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	009b      	lsls	r3, r3, #2
 8015c56:	18d3      	adds	r3, r2, r3
 8015c58:	881b      	ldrh	r3, [r3, #0]
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	2048      	movs	r0, #72	@ 0x48
 8015c5e:	183b      	adds	r3, r7, r0
 8015c60:	4917      	ldr	r1, [pc, #92]	@ (8015cc0 <USB_ActivateEndpoint+0x6a8>)
 8015c62:	400a      	ands	r2, r1
 8015c64:	801a      	strh	r2, [r3, #0]
 8015c66:	687a      	ldr	r2, [r7, #4]
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	781b      	ldrb	r3, [r3, #0]
 8015c6c:	009b      	lsls	r3, r3, #2
 8015c6e:	18d3      	adds	r3, r2, r3
 8015c70:	183a      	adds	r2, r7, r0
 8015c72:	8812      	ldrh	r2, [r2, #0]
 8015c74:	4919      	ldr	r1, [pc, #100]	@ (8015cdc <USB_ActivateEndpoint+0x6c4>)
 8015c76:	430a      	orrs	r2, r1
 8015c78:	b292      	uxth	r2, r2
 8015c7a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	78db      	ldrb	r3, [r3, #3]
 8015c80:	2b01      	cmp	r3, #1
 8015c82:	d02f      	beq.n	8015ce4 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	781b      	ldrb	r3, [r3, #0]
 8015c8a:	009b      	lsls	r3, r3, #2
 8015c8c:	18d3      	adds	r3, r2, r3
 8015c8e:	881b      	ldrh	r3, [r3, #0]
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	2044      	movs	r0, #68	@ 0x44
 8015c94:	183b      	adds	r3, r7, r0
 8015c96:	4912      	ldr	r1, [pc, #72]	@ (8015ce0 <USB_ActivateEndpoint+0x6c8>)
 8015c98:	400a      	ands	r2, r1
 8015c9a:	801a      	strh	r2, [r3, #0]
 8015c9c:	183b      	adds	r3, r7, r0
 8015c9e:	183a      	adds	r2, r7, r0
 8015ca0:	8812      	ldrh	r2, [r2, #0]
 8015ca2:	2120      	movs	r1, #32
 8015ca4:	404a      	eors	r2, r1
 8015ca6:	801a      	strh	r2, [r3, #0]
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	781b      	ldrb	r3, [r3, #0]
 8015cae:	009b      	lsls	r3, r3, #2
 8015cb0:	18d3      	adds	r3, r2, r3
 8015cb2:	183a      	adds	r2, r7, r0
 8015cb4:	8812      	ldrh	r2, [r2, #0]
 8015cb6:	4905      	ldr	r1, [pc, #20]	@ (8015ccc <USB_ActivateEndpoint+0x6b4>)
 8015cb8:	430a      	orrs	r2, r1
 8015cba:	b292      	uxth	r2, r2
 8015cbc:	801a      	strh	r2, [r3, #0]
 8015cbe:	e028      	b.n	8015d12 <USB_ActivateEndpoint+0x6fa>
 8015cc0:	ffff8f8f 	.word	0xffff8f8f
 8015cc4:	ffffc080 	.word	0xffffc080
 8015cc8:	ffffbf8f 	.word	0xffffbf8f
 8015ccc:	ffff8080 	.word	0xffff8080
 8015cd0:	ffff8180 	.word	0xffff8180
 8015cd4:	ffff8e8f 	.word	0xffff8e8f
 8015cd8:	00000404 	.word	0x00000404
 8015cdc:	ffff80c0 	.word	0xffff80c0
 8015ce0:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015ce4:	687a      	ldr	r2, [r7, #4]
 8015ce6:	683b      	ldr	r3, [r7, #0]
 8015ce8:	781b      	ldrb	r3, [r3, #0]
 8015cea:	009b      	lsls	r3, r3, #2
 8015cec:	18d3      	adds	r3, r2, r3
 8015cee:	881b      	ldrh	r3, [r3, #0]
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	2046      	movs	r0, #70	@ 0x46
 8015cf4:	183b      	adds	r3, r7, r0
 8015cf6:	4916      	ldr	r1, [pc, #88]	@ (8015d50 <USB_ActivateEndpoint+0x738>)
 8015cf8:	400a      	ands	r2, r1
 8015cfa:	801a      	strh	r2, [r3, #0]
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	781b      	ldrb	r3, [r3, #0]
 8015d02:	009b      	lsls	r3, r3, #2
 8015d04:	18d3      	adds	r3, r2, r3
 8015d06:	183a      	adds	r2, r7, r0
 8015d08:	8812      	ldrh	r2, [r2, #0]
 8015d0a:	4912      	ldr	r1, [pc, #72]	@ (8015d54 <USB_ActivateEndpoint+0x73c>)
 8015d0c:	430a      	orrs	r2, r1
 8015d0e:	b292      	uxth	r2, r2
 8015d10:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015d12:	687a      	ldr	r2, [r7, #4]
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	009b      	lsls	r3, r3, #2
 8015d1a:	18d3      	adds	r3, r2, r3
 8015d1c:	881b      	ldrh	r3, [r3, #0]
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	2042      	movs	r0, #66	@ 0x42
 8015d22:	183b      	adds	r3, r7, r0
 8015d24:	490c      	ldr	r1, [pc, #48]	@ (8015d58 <USB_ActivateEndpoint+0x740>)
 8015d26:	400a      	ands	r2, r1
 8015d28:	801a      	strh	r2, [r3, #0]
 8015d2a:	687a      	ldr	r2, [r7, #4]
 8015d2c:	683b      	ldr	r3, [r7, #0]
 8015d2e:	781b      	ldrb	r3, [r3, #0]
 8015d30:	009b      	lsls	r3, r3, #2
 8015d32:	18d3      	adds	r3, r2, r3
 8015d34:	183a      	adds	r2, r7, r0
 8015d36:	8812      	ldrh	r2, [r2, #0]
 8015d38:	4906      	ldr	r1, [pc, #24]	@ (8015d54 <USB_ActivateEndpoint+0x73c>)
 8015d3a:	430a      	orrs	r2, r1
 8015d3c:	b292      	uxth	r2, r2
 8015d3e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8015d40:	236f      	movs	r3, #111	@ 0x6f
 8015d42:	18fb      	adds	r3, r7, r3
 8015d44:	781b      	ldrb	r3, [r3, #0]
}
 8015d46:	0018      	movs	r0, r3
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	b01c      	add	sp, #112	@ 0x70
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	46c0      	nop			@ (mov r8, r8)
 8015d50:	ffff8fbf 	.word	0xffff8fbf
 8015d54:	ffff8080 	.word	0xffff8080
 8015d58:	ffffbf8f 	.word	0xffffbf8f

08015d5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b08c      	sub	sp, #48	@ 0x30
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
 8015d64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	7b1b      	ldrb	r3, [r3, #12]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d000      	beq.n	8015d70 <USB_DeactivateEndpoint+0x14>
 8015d6e:	e07e      	b.n	8015e6e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	785b      	ldrb	r3, [r3, #1]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d03c      	beq.n	8015df2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	781b      	ldrb	r3, [r3, #0]
 8015d7e:	009b      	lsls	r3, r3, #2
 8015d80:	18d2      	adds	r2, r2, r3
 8015d82:	210c      	movs	r1, #12
 8015d84:	187b      	adds	r3, r7, r1
 8015d86:	8812      	ldrh	r2, [r2, #0]
 8015d88:	801a      	strh	r2, [r3, #0]
 8015d8a:	187b      	adds	r3, r7, r1
 8015d8c:	881b      	ldrh	r3, [r3, #0]
 8015d8e:	2240      	movs	r2, #64	@ 0x40
 8015d90:	4013      	ands	r3, r2
 8015d92:	d016      	beq.n	8015dc2 <USB_DeactivateEndpoint+0x66>
 8015d94:	687a      	ldr	r2, [r7, #4]
 8015d96:	683b      	ldr	r3, [r7, #0]
 8015d98:	781b      	ldrb	r3, [r3, #0]
 8015d9a:	009b      	lsls	r3, r3, #2
 8015d9c:	18d3      	adds	r3, r2, r3
 8015d9e:	881b      	ldrh	r3, [r3, #0]
 8015da0:	b29a      	uxth	r2, r3
 8015da2:	200a      	movs	r0, #10
 8015da4:	183b      	adds	r3, r7, r0
 8015da6:	49c7      	ldr	r1, [pc, #796]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8015da8:	400a      	ands	r2, r1
 8015daa:	801a      	strh	r2, [r3, #0]
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	009b      	lsls	r3, r3, #2
 8015db4:	18d3      	adds	r3, r2, r3
 8015db6:	183a      	adds	r2, r7, r0
 8015db8:	8812      	ldrh	r2, [r2, #0]
 8015dba:	49c3      	ldr	r1, [pc, #780]	@ (80160c8 <USB_DeactivateEndpoint+0x36c>)
 8015dbc:	430a      	orrs	r2, r1
 8015dbe:	b292      	uxth	r2, r2
 8015dc0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015dc2:	687a      	ldr	r2, [r7, #4]
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	009b      	lsls	r3, r3, #2
 8015dca:	18d3      	adds	r3, r2, r3
 8015dcc:	881b      	ldrh	r3, [r3, #0]
 8015dce:	b29a      	uxth	r2, r3
 8015dd0:	2008      	movs	r0, #8
 8015dd2:	183b      	adds	r3, r7, r0
 8015dd4:	49bd      	ldr	r1, [pc, #756]	@ (80160cc <USB_DeactivateEndpoint+0x370>)
 8015dd6:	400a      	ands	r2, r1
 8015dd8:	801a      	strh	r2, [r3, #0]
 8015dda:	687a      	ldr	r2, [r7, #4]
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	781b      	ldrb	r3, [r3, #0]
 8015de0:	009b      	lsls	r3, r3, #2
 8015de2:	18d3      	adds	r3, r2, r3
 8015de4:	183a      	adds	r2, r7, r0
 8015de6:	8812      	ldrh	r2, [r2, #0]
 8015de8:	49b9      	ldr	r1, [pc, #740]	@ (80160d0 <USB_DeactivateEndpoint+0x374>)
 8015dea:	430a      	orrs	r2, r1
 8015dec:	b292      	uxth	r2, r2
 8015dee:	801a      	strh	r2, [r3, #0]
 8015df0:	e163      	b.n	80160ba <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	781b      	ldrb	r3, [r3, #0]
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	18d2      	adds	r2, r2, r3
 8015dfc:	2112      	movs	r1, #18
 8015dfe:	187b      	adds	r3, r7, r1
 8015e00:	8812      	ldrh	r2, [r2, #0]
 8015e02:	801a      	strh	r2, [r3, #0]
 8015e04:	187b      	adds	r3, r7, r1
 8015e06:	881a      	ldrh	r2, [r3, #0]
 8015e08:	2380      	movs	r3, #128	@ 0x80
 8015e0a:	01db      	lsls	r3, r3, #7
 8015e0c:	4013      	ands	r3, r2
 8015e0e:	d016      	beq.n	8015e3e <USB_DeactivateEndpoint+0xe2>
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	18d3      	adds	r3, r2, r3
 8015e1a:	881b      	ldrh	r3, [r3, #0]
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	2010      	movs	r0, #16
 8015e20:	183b      	adds	r3, r7, r0
 8015e22:	49a8      	ldr	r1, [pc, #672]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8015e24:	400a      	ands	r2, r1
 8015e26:	801a      	strh	r2, [r3, #0]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	009b      	lsls	r3, r3, #2
 8015e30:	18d3      	adds	r3, r2, r3
 8015e32:	183a      	adds	r2, r7, r0
 8015e34:	8812      	ldrh	r2, [r2, #0]
 8015e36:	49a7      	ldr	r1, [pc, #668]	@ (80160d4 <USB_DeactivateEndpoint+0x378>)
 8015e38:	430a      	orrs	r2, r1
 8015e3a:	b292      	uxth	r2, r2
 8015e3c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015e3e:	687a      	ldr	r2, [r7, #4]
 8015e40:	683b      	ldr	r3, [r7, #0]
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	009b      	lsls	r3, r3, #2
 8015e46:	18d3      	adds	r3, r2, r3
 8015e48:	881b      	ldrh	r3, [r3, #0]
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	200e      	movs	r0, #14
 8015e4e:	183b      	adds	r3, r7, r0
 8015e50:	49a1      	ldr	r1, [pc, #644]	@ (80160d8 <USB_DeactivateEndpoint+0x37c>)
 8015e52:	400a      	ands	r2, r1
 8015e54:	801a      	strh	r2, [r3, #0]
 8015e56:	687a      	ldr	r2, [r7, #4]
 8015e58:	683b      	ldr	r3, [r7, #0]
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	009b      	lsls	r3, r3, #2
 8015e5e:	18d3      	adds	r3, r2, r3
 8015e60:	183a      	adds	r2, r7, r0
 8015e62:	8812      	ldrh	r2, [r2, #0]
 8015e64:	499a      	ldr	r1, [pc, #616]	@ (80160d0 <USB_DeactivateEndpoint+0x374>)
 8015e66:	430a      	orrs	r2, r1
 8015e68:	b292      	uxth	r2, r2
 8015e6a:	801a      	strh	r2, [r3, #0]
 8015e6c:	e125      	b.n	80160ba <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8015e6e:	683b      	ldr	r3, [r7, #0]
 8015e70:	785b      	ldrb	r3, [r3, #1]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d000      	beq.n	8015e78 <USB_DeactivateEndpoint+0x11c>
 8015e76:	e090      	b.n	8015f9a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015e78:	687a      	ldr	r2, [r7, #4]
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	781b      	ldrb	r3, [r3, #0]
 8015e7e:	009b      	lsls	r3, r3, #2
 8015e80:	18d2      	adds	r2, r2, r3
 8015e82:	2120      	movs	r1, #32
 8015e84:	187b      	adds	r3, r7, r1
 8015e86:	8812      	ldrh	r2, [r2, #0]
 8015e88:	801a      	strh	r2, [r3, #0]
 8015e8a:	187b      	adds	r3, r7, r1
 8015e8c:	881a      	ldrh	r2, [r3, #0]
 8015e8e:	2380      	movs	r3, #128	@ 0x80
 8015e90:	01db      	lsls	r3, r3, #7
 8015e92:	4013      	ands	r3, r2
 8015e94:	d016      	beq.n	8015ec4 <USB_DeactivateEndpoint+0x168>
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	009b      	lsls	r3, r3, #2
 8015e9e:	18d3      	adds	r3, r2, r3
 8015ea0:	881b      	ldrh	r3, [r3, #0]
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	201e      	movs	r0, #30
 8015ea6:	183b      	adds	r3, r7, r0
 8015ea8:	4986      	ldr	r1, [pc, #536]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8015eaa:	400a      	ands	r2, r1
 8015eac:	801a      	strh	r2, [r3, #0]
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	009b      	lsls	r3, r3, #2
 8015eb6:	18d3      	adds	r3, r2, r3
 8015eb8:	183a      	adds	r2, r7, r0
 8015eba:	8812      	ldrh	r2, [r2, #0]
 8015ebc:	4985      	ldr	r1, [pc, #532]	@ (80160d4 <USB_DeactivateEndpoint+0x378>)
 8015ebe:	430a      	orrs	r2, r1
 8015ec0:	b292      	uxth	r2, r2
 8015ec2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	009b      	lsls	r3, r3, #2
 8015ecc:	18d2      	adds	r2, r2, r3
 8015ece:	211c      	movs	r1, #28
 8015ed0:	187b      	adds	r3, r7, r1
 8015ed2:	8812      	ldrh	r2, [r2, #0]
 8015ed4:	801a      	strh	r2, [r3, #0]
 8015ed6:	187b      	adds	r3, r7, r1
 8015ed8:	881b      	ldrh	r3, [r3, #0]
 8015eda:	2240      	movs	r2, #64	@ 0x40
 8015edc:	4013      	ands	r3, r2
 8015ede:	d016      	beq.n	8015f0e <USB_DeactivateEndpoint+0x1b2>
 8015ee0:	687a      	ldr	r2, [r7, #4]
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	009b      	lsls	r3, r3, #2
 8015ee8:	18d3      	adds	r3, r2, r3
 8015eea:	881b      	ldrh	r3, [r3, #0]
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	201a      	movs	r0, #26
 8015ef0:	183b      	adds	r3, r7, r0
 8015ef2:	4974      	ldr	r1, [pc, #464]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8015ef4:	400a      	ands	r2, r1
 8015ef6:	801a      	strh	r2, [r3, #0]
 8015ef8:	687a      	ldr	r2, [r7, #4]
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	009b      	lsls	r3, r3, #2
 8015f00:	18d3      	adds	r3, r2, r3
 8015f02:	183a      	adds	r2, r7, r0
 8015f04:	8812      	ldrh	r2, [r2, #0]
 8015f06:	4970      	ldr	r1, [pc, #448]	@ (80160c8 <USB_DeactivateEndpoint+0x36c>)
 8015f08:	430a      	orrs	r2, r1
 8015f0a:	b292      	uxth	r2, r2
 8015f0c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8015f0e:	687a      	ldr	r2, [r7, #4]
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	009b      	lsls	r3, r3, #2
 8015f16:	18d3      	adds	r3, r2, r3
 8015f18:	881b      	ldrh	r3, [r3, #0]
 8015f1a:	b29a      	uxth	r2, r3
 8015f1c:	2018      	movs	r0, #24
 8015f1e:	183b      	adds	r3, r7, r0
 8015f20:	4968      	ldr	r1, [pc, #416]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8015f22:	400a      	ands	r2, r1
 8015f24:	801a      	strh	r2, [r3, #0]
 8015f26:	687a      	ldr	r2, [r7, #4]
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	781b      	ldrb	r3, [r3, #0]
 8015f2c:	009b      	lsls	r3, r3, #2
 8015f2e:	18d3      	adds	r3, r2, r3
 8015f30:	183a      	adds	r2, r7, r0
 8015f32:	8812      	ldrh	r2, [r2, #0]
 8015f34:	4964      	ldr	r1, [pc, #400]	@ (80160c8 <USB_DeactivateEndpoint+0x36c>)
 8015f36:	430a      	orrs	r2, r1
 8015f38:	b292      	uxth	r2, r2
 8015f3a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	781b      	ldrb	r3, [r3, #0]
 8015f42:	009b      	lsls	r3, r3, #2
 8015f44:	18d3      	adds	r3, r2, r3
 8015f46:	881b      	ldrh	r3, [r3, #0]
 8015f48:	b29a      	uxth	r2, r3
 8015f4a:	2016      	movs	r0, #22
 8015f4c:	183b      	adds	r3, r7, r0
 8015f4e:	4962      	ldr	r1, [pc, #392]	@ (80160d8 <USB_DeactivateEndpoint+0x37c>)
 8015f50:	400a      	ands	r2, r1
 8015f52:	801a      	strh	r2, [r3, #0]
 8015f54:	687a      	ldr	r2, [r7, #4]
 8015f56:	683b      	ldr	r3, [r7, #0]
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	18d3      	adds	r3, r2, r3
 8015f5e:	183a      	adds	r2, r7, r0
 8015f60:	8812      	ldrh	r2, [r2, #0]
 8015f62:	495b      	ldr	r1, [pc, #364]	@ (80160d0 <USB_DeactivateEndpoint+0x374>)
 8015f64:	430a      	orrs	r2, r1
 8015f66:	b292      	uxth	r2, r2
 8015f68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015f6a:	687a      	ldr	r2, [r7, #4]
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	009b      	lsls	r3, r3, #2
 8015f72:	18d3      	adds	r3, r2, r3
 8015f74:	881b      	ldrh	r3, [r3, #0]
 8015f76:	b29a      	uxth	r2, r3
 8015f78:	2014      	movs	r0, #20
 8015f7a:	183b      	adds	r3, r7, r0
 8015f7c:	4953      	ldr	r1, [pc, #332]	@ (80160cc <USB_DeactivateEndpoint+0x370>)
 8015f7e:	400a      	ands	r2, r1
 8015f80:	801a      	strh	r2, [r3, #0]
 8015f82:	687a      	ldr	r2, [r7, #4]
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	009b      	lsls	r3, r3, #2
 8015f8a:	18d3      	adds	r3, r2, r3
 8015f8c:	183a      	adds	r2, r7, r0
 8015f8e:	8812      	ldrh	r2, [r2, #0]
 8015f90:	494f      	ldr	r1, [pc, #316]	@ (80160d0 <USB_DeactivateEndpoint+0x374>)
 8015f92:	430a      	orrs	r2, r1
 8015f94:	b292      	uxth	r2, r2
 8015f96:	801a      	strh	r2, [r3, #0]
 8015f98:	e08f      	b.n	80160ba <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015f9a:	687a      	ldr	r2, [r7, #4]
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	18d2      	adds	r2, r2, r3
 8015fa4:	212e      	movs	r1, #46	@ 0x2e
 8015fa6:	187b      	adds	r3, r7, r1
 8015fa8:	8812      	ldrh	r2, [r2, #0]
 8015faa:	801a      	strh	r2, [r3, #0]
 8015fac:	187b      	adds	r3, r7, r1
 8015fae:	881a      	ldrh	r2, [r3, #0]
 8015fb0:	2380      	movs	r3, #128	@ 0x80
 8015fb2:	01db      	lsls	r3, r3, #7
 8015fb4:	4013      	ands	r3, r2
 8015fb6:	d016      	beq.n	8015fe6 <USB_DeactivateEndpoint+0x28a>
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	683b      	ldr	r3, [r7, #0]
 8015fbc:	781b      	ldrb	r3, [r3, #0]
 8015fbe:	009b      	lsls	r3, r3, #2
 8015fc0:	18d3      	adds	r3, r2, r3
 8015fc2:	881b      	ldrh	r3, [r3, #0]
 8015fc4:	b29a      	uxth	r2, r3
 8015fc6:	202c      	movs	r0, #44	@ 0x2c
 8015fc8:	183b      	adds	r3, r7, r0
 8015fca:	493e      	ldr	r1, [pc, #248]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8015fcc:	400a      	ands	r2, r1
 8015fce:	801a      	strh	r2, [r3, #0]
 8015fd0:	687a      	ldr	r2, [r7, #4]
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	781b      	ldrb	r3, [r3, #0]
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	18d3      	adds	r3, r2, r3
 8015fda:	183a      	adds	r2, r7, r0
 8015fdc:	8812      	ldrh	r2, [r2, #0]
 8015fde:	493d      	ldr	r1, [pc, #244]	@ (80160d4 <USB_DeactivateEndpoint+0x378>)
 8015fe0:	430a      	orrs	r2, r1
 8015fe2:	b292      	uxth	r2, r2
 8015fe4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	683b      	ldr	r3, [r7, #0]
 8015fea:	781b      	ldrb	r3, [r3, #0]
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	18d2      	adds	r2, r2, r3
 8015ff0:	212a      	movs	r1, #42	@ 0x2a
 8015ff2:	187b      	adds	r3, r7, r1
 8015ff4:	8812      	ldrh	r2, [r2, #0]
 8015ff6:	801a      	strh	r2, [r3, #0]
 8015ff8:	187b      	adds	r3, r7, r1
 8015ffa:	881b      	ldrh	r3, [r3, #0]
 8015ffc:	2240      	movs	r2, #64	@ 0x40
 8015ffe:	4013      	ands	r3, r2
 8016000:	d016      	beq.n	8016030 <USB_DeactivateEndpoint+0x2d4>
 8016002:	687a      	ldr	r2, [r7, #4]
 8016004:	683b      	ldr	r3, [r7, #0]
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	009b      	lsls	r3, r3, #2
 801600a:	18d3      	adds	r3, r2, r3
 801600c:	881b      	ldrh	r3, [r3, #0]
 801600e:	b29a      	uxth	r2, r3
 8016010:	2028      	movs	r0, #40	@ 0x28
 8016012:	183b      	adds	r3, r7, r0
 8016014:	492b      	ldr	r1, [pc, #172]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8016016:	400a      	ands	r2, r1
 8016018:	801a      	strh	r2, [r3, #0]
 801601a:	687a      	ldr	r2, [r7, #4]
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	781b      	ldrb	r3, [r3, #0]
 8016020:	009b      	lsls	r3, r3, #2
 8016022:	18d3      	adds	r3, r2, r3
 8016024:	183a      	adds	r2, r7, r0
 8016026:	8812      	ldrh	r2, [r2, #0]
 8016028:	4927      	ldr	r1, [pc, #156]	@ (80160c8 <USB_DeactivateEndpoint+0x36c>)
 801602a:	430a      	orrs	r2, r1
 801602c:	b292      	uxth	r2, r2
 801602e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8016030:	687a      	ldr	r2, [r7, #4]
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	781b      	ldrb	r3, [r3, #0]
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	18d3      	adds	r3, r2, r3
 801603a:	881b      	ldrh	r3, [r3, #0]
 801603c:	b29a      	uxth	r2, r3
 801603e:	2026      	movs	r0, #38	@ 0x26
 8016040:	183b      	adds	r3, r7, r0
 8016042:	4920      	ldr	r1, [pc, #128]	@ (80160c4 <USB_DeactivateEndpoint+0x368>)
 8016044:	400a      	ands	r2, r1
 8016046:	801a      	strh	r2, [r3, #0]
 8016048:	687a      	ldr	r2, [r7, #4]
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	009b      	lsls	r3, r3, #2
 8016050:	18d3      	adds	r3, r2, r3
 8016052:	183a      	adds	r2, r7, r0
 8016054:	8812      	ldrh	r2, [r2, #0]
 8016056:	491f      	ldr	r1, [pc, #124]	@ (80160d4 <USB_DeactivateEndpoint+0x378>)
 8016058:	430a      	orrs	r2, r1
 801605a:	b292      	uxth	r2, r2
 801605c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	009b      	lsls	r3, r3, #2
 8016066:	18d3      	adds	r3, r2, r3
 8016068:	881b      	ldrh	r3, [r3, #0]
 801606a:	b29a      	uxth	r2, r3
 801606c:	2024      	movs	r0, #36	@ 0x24
 801606e:	183b      	adds	r3, r7, r0
 8016070:	4916      	ldr	r1, [pc, #88]	@ (80160cc <USB_DeactivateEndpoint+0x370>)
 8016072:	400a      	ands	r2, r1
 8016074:	801a      	strh	r2, [r3, #0]
 8016076:	687a      	ldr	r2, [r7, #4]
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	781b      	ldrb	r3, [r3, #0]
 801607c:	009b      	lsls	r3, r3, #2
 801607e:	18d3      	adds	r3, r2, r3
 8016080:	183a      	adds	r2, r7, r0
 8016082:	8812      	ldrh	r2, [r2, #0]
 8016084:	4912      	ldr	r1, [pc, #72]	@ (80160d0 <USB_DeactivateEndpoint+0x374>)
 8016086:	430a      	orrs	r2, r1
 8016088:	b292      	uxth	r2, r2
 801608a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801608c:	687a      	ldr	r2, [r7, #4]
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	781b      	ldrb	r3, [r3, #0]
 8016092:	009b      	lsls	r3, r3, #2
 8016094:	18d3      	adds	r3, r2, r3
 8016096:	881b      	ldrh	r3, [r3, #0]
 8016098:	b29a      	uxth	r2, r3
 801609a:	2022      	movs	r0, #34	@ 0x22
 801609c:	183b      	adds	r3, r7, r0
 801609e:	490e      	ldr	r1, [pc, #56]	@ (80160d8 <USB_DeactivateEndpoint+0x37c>)
 80160a0:	400a      	ands	r2, r1
 80160a2:	801a      	strh	r2, [r3, #0]
 80160a4:	687a      	ldr	r2, [r7, #4]
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	781b      	ldrb	r3, [r3, #0]
 80160aa:	009b      	lsls	r3, r3, #2
 80160ac:	18d3      	adds	r3, r2, r3
 80160ae:	183a      	adds	r2, r7, r0
 80160b0:	8812      	ldrh	r2, [r2, #0]
 80160b2:	4907      	ldr	r1, [pc, #28]	@ (80160d0 <USB_DeactivateEndpoint+0x374>)
 80160b4:	430a      	orrs	r2, r1
 80160b6:	b292      	uxth	r2, r2
 80160b8:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80160ba:	2300      	movs	r3, #0
}
 80160bc:	0018      	movs	r0, r3
 80160be:	46bd      	mov	sp, r7
 80160c0:	b00c      	add	sp, #48	@ 0x30
 80160c2:	bd80      	pop	{r7, pc}
 80160c4:	ffff8f8f 	.word	0xffff8f8f
 80160c8:	ffff80c0 	.word	0xffff80c0
 80160cc:	ffff8fbf 	.word	0xffff8fbf
 80160d0:	ffff8080 	.word	0xffff8080
 80160d4:	ffffc080 	.word	0xffffc080
 80160d8:	ffffbf8f 	.word	0xffffbf8f

080160dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80160dc:	b590      	push	{r4, r7, lr}
 80160de:	b0c3      	sub	sp, #268	@ 0x10c
 80160e0:	af00      	add	r7, sp, #0
 80160e2:	6078      	str	r0, [r7, #4]
 80160e4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	785b      	ldrb	r3, [r3, #1]
 80160ea:	2b01      	cmp	r3, #1
 80160ec:	d001      	beq.n	80160f2 <USB_EPStartXfer+0x16>
 80160ee:	f000 fd2d 	bl	8016b4c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	699a      	ldr	r2, [r3, #24]
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	691b      	ldr	r3, [r3, #16]
 80160fa:	429a      	cmp	r2, r3
 80160fc:	d905      	bls.n	801610a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	691b      	ldr	r3, [r3, #16]
 8016102:	1d7a      	adds	r2, r7, #5
 8016104:	32ff      	adds	r2, #255	@ 0xff
 8016106:	6013      	str	r3, [r2, #0]
 8016108:	e004      	b.n	8016114 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	699b      	ldr	r3, [r3, #24]
 801610e:	1d7a      	adds	r2, r7, #5
 8016110:	32ff      	adds	r2, #255	@ 0xff
 8016112:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	7b1b      	ldrb	r3, [r3, #12]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d125      	bne.n	8016168 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	6959      	ldr	r1, [r3, #20]
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	88da      	ldrh	r2, [r3, #6]
 8016124:	1d7b      	adds	r3, r7, #5
 8016126:	33ff      	adds	r3, #255	@ 0xff
 8016128:	681b      	ldr	r3, [r3, #0]
 801612a:	b29b      	uxth	r3, r3
 801612c:	6878      	ldr	r0, [r7, #4]
 801612e:	f001 fa47 	bl	80175c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	613b      	str	r3, [r7, #16]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	2250      	movs	r2, #80	@ 0x50
 801613a:	5a9b      	ldrh	r3, [r3, r2]
 801613c:	b29b      	uxth	r3, r3
 801613e:	001a      	movs	r2, r3
 8016140:	693b      	ldr	r3, [r7, #16]
 8016142:	189b      	adds	r3, r3, r2
 8016144:	613b      	str	r3, [r7, #16]
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	781b      	ldrb	r3, [r3, #0]
 801614a:	00da      	lsls	r2, r3, #3
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	18d3      	adds	r3, r2, r3
 8016150:	4ad7      	ldr	r2, [pc, #860]	@ (80164b0 <USB_EPStartXfer+0x3d4>)
 8016152:	4694      	mov	ip, r2
 8016154:	4463      	add	r3, ip
 8016156:	60fb      	str	r3, [r7, #12]
 8016158:	1d7b      	adds	r3, r7, #5
 801615a:	33ff      	adds	r3, #255	@ 0xff
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	b29a      	uxth	r2, r3
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	801a      	strh	r2, [r3, #0]
 8016164:	f000 fccd 	bl	8016b02 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8016168:	683b      	ldr	r3, [r7, #0]
 801616a:	78db      	ldrb	r3, [r3, #3]
 801616c:	2b02      	cmp	r3, #2
 801616e:	d000      	beq.n	8016172 <USB_EPStartXfer+0x96>
 8016170:	e362      	b.n	8016838 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	6a1a      	ldr	r2, [r3, #32]
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	691b      	ldr	r3, [r3, #16]
 801617a:	429a      	cmp	r2, r3
 801617c:	d800      	bhi.n	8016180 <USB_EPStartXfer+0xa4>
 801617e:	e309      	b.n	8016794 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8016180:	687a      	ldr	r2, [r7, #4]
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	009b      	lsls	r3, r3, #2
 8016188:	18d3      	adds	r3, r2, r3
 801618a:	881b      	ldrh	r3, [r3, #0]
 801618c:	b29a      	uxth	r2, r3
 801618e:	2056      	movs	r0, #86	@ 0x56
 8016190:	183b      	adds	r3, r7, r0
 8016192:	49c8      	ldr	r1, [pc, #800]	@ (80164b4 <USB_EPStartXfer+0x3d8>)
 8016194:	400a      	ands	r2, r1
 8016196:	801a      	strh	r2, [r3, #0]
 8016198:	687a      	ldr	r2, [r7, #4]
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	781b      	ldrb	r3, [r3, #0]
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	18d3      	adds	r3, r2, r3
 80161a2:	183a      	adds	r2, r7, r0
 80161a4:	8812      	ldrh	r2, [r2, #0]
 80161a6:	49c4      	ldr	r1, [pc, #784]	@ (80164b8 <USB_EPStartXfer+0x3dc>)
 80161a8:	430a      	orrs	r2, r1
 80161aa:	b292      	uxth	r2, r2
 80161ac:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	6a1a      	ldr	r2, [r3, #32]
 80161b2:	1d7b      	adds	r3, r7, #5
 80161b4:	33ff      	adds	r3, #255	@ 0xff
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	1ad2      	subs	r2, r2, r3
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	781b      	ldrb	r3, [r3, #0]
 80161c4:	009b      	lsls	r3, r3, #2
 80161c6:	18d3      	adds	r3, r2, r3
 80161c8:	881b      	ldrh	r3, [r3, #0]
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	001a      	movs	r2, r3
 80161ce:	2340      	movs	r3, #64	@ 0x40
 80161d0:	4013      	ands	r3, r2
 80161d2:	d100      	bne.n	80161d6 <USB_EPStartXfer+0xfa>
 80161d4:	e176      	b.n	80164c4 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	785b      	ldrb	r3, [r3, #1]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d000      	beq.n	80161e4 <USB_EPStartXfer+0x108>
 80161e2:	e074      	b.n	80162ce <USB_EPStartXfer+0x1f2>
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	2250      	movs	r2, #80	@ 0x50
 80161ec:	5a9b      	ldrh	r3, [r3, r2]
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	001a      	movs	r2, r3
 80161f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161f4:	189b      	adds	r3, r3, r2
 80161f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	781b      	ldrb	r3, [r3, #0]
 80161fc:	00da      	lsls	r2, r3, #3
 80161fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016200:	18d3      	adds	r3, r2, r3
 8016202:	4aae      	ldr	r2, [pc, #696]	@ (80164bc <USB_EPStartXfer+0x3e0>)
 8016204:	4694      	mov	ip, r2
 8016206:	4463      	add	r3, ip
 8016208:	627b      	str	r3, [r7, #36]	@ 0x24
 801620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801620c:	881b      	ldrh	r3, [r3, #0]
 801620e:	b29b      	uxth	r3, r3
 8016210:	059b      	lsls	r3, r3, #22
 8016212:	0d9b      	lsrs	r3, r3, #22
 8016214:	b29a      	uxth	r2, r3
 8016216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016218:	801a      	strh	r2, [r3, #0]
 801621a:	1d7b      	adds	r3, r7, #5
 801621c:	33ff      	adds	r3, #255	@ 0xff
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	2b3e      	cmp	r3, #62	@ 0x3e
 8016222:	d924      	bls.n	801626e <USB_EPStartXfer+0x192>
 8016224:	1d7b      	adds	r3, r7, #5
 8016226:	33ff      	adds	r3, #255	@ 0xff
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	095b      	lsrs	r3, r3, #5
 801622c:	1c7a      	adds	r2, r7, #1
 801622e:	32ff      	adds	r2, #255	@ 0xff
 8016230:	6013      	str	r3, [r2, #0]
 8016232:	1d7b      	adds	r3, r7, #5
 8016234:	33ff      	adds	r3, #255	@ 0xff
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	221f      	movs	r2, #31
 801623a:	4013      	ands	r3, r2
 801623c:	d106      	bne.n	801624c <USB_EPStartXfer+0x170>
 801623e:	1c7b      	adds	r3, r7, #1
 8016240:	33ff      	adds	r3, #255	@ 0xff
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	3b01      	subs	r3, #1
 8016246:	1c7a      	adds	r2, r7, #1
 8016248:	32ff      	adds	r2, #255	@ 0xff
 801624a:	6013      	str	r3, [r2, #0]
 801624c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801624e:	881b      	ldrh	r3, [r3, #0]
 8016250:	b29a      	uxth	r2, r3
 8016252:	1c7b      	adds	r3, r7, #1
 8016254:	33ff      	adds	r3, #255	@ 0xff
 8016256:	681b      	ldr	r3, [r3, #0]
 8016258:	b29b      	uxth	r3, r3
 801625a:	029b      	lsls	r3, r3, #10
 801625c:	b29b      	uxth	r3, r3
 801625e:	4313      	orrs	r3, r2
 8016260:	b29b      	uxth	r3, r3
 8016262:	4a97      	ldr	r2, [pc, #604]	@ (80164c0 <USB_EPStartXfer+0x3e4>)
 8016264:	4313      	orrs	r3, r2
 8016266:	b29a      	uxth	r2, r3
 8016268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801626a:	801a      	strh	r2, [r3, #0]
 801626c:	e04a      	b.n	8016304 <USB_EPStartXfer+0x228>
 801626e:	1d7b      	adds	r3, r7, #5
 8016270:	33ff      	adds	r3, #255	@ 0xff
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d108      	bne.n	801628a <USB_EPStartXfer+0x1ae>
 8016278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801627a:	881b      	ldrh	r3, [r3, #0]
 801627c:	b29b      	uxth	r3, r3
 801627e:	4a90      	ldr	r2, [pc, #576]	@ (80164c0 <USB_EPStartXfer+0x3e4>)
 8016280:	4313      	orrs	r3, r2
 8016282:	b29a      	uxth	r2, r3
 8016284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016286:	801a      	strh	r2, [r3, #0]
 8016288:	e03c      	b.n	8016304 <USB_EPStartXfer+0x228>
 801628a:	1d7b      	adds	r3, r7, #5
 801628c:	33ff      	adds	r3, #255	@ 0xff
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	085b      	lsrs	r3, r3, #1
 8016292:	1c7a      	adds	r2, r7, #1
 8016294:	32ff      	adds	r2, #255	@ 0xff
 8016296:	6013      	str	r3, [r2, #0]
 8016298:	1d7b      	adds	r3, r7, #5
 801629a:	33ff      	adds	r3, #255	@ 0xff
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	2201      	movs	r2, #1
 80162a0:	4013      	ands	r3, r2
 80162a2:	d006      	beq.n	80162b2 <USB_EPStartXfer+0x1d6>
 80162a4:	1c7b      	adds	r3, r7, #1
 80162a6:	33ff      	adds	r3, #255	@ 0xff
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	3301      	adds	r3, #1
 80162ac:	1c7a      	adds	r2, r7, #1
 80162ae:	32ff      	adds	r2, #255	@ 0xff
 80162b0:	6013      	str	r3, [r2, #0]
 80162b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162b4:	881b      	ldrh	r3, [r3, #0]
 80162b6:	b29a      	uxth	r2, r3
 80162b8:	1c7b      	adds	r3, r7, #1
 80162ba:	33ff      	adds	r3, #255	@ 0xff
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	b29b      	uxth	r3, r3
 80162c0:	029b      	lsls	r3, r3, #10
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	4313      	orrs	r3, r2
 80162c6:	b29a      	uxth	r2, r3
 80162c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ca:	801a      	strh	r2, [r3, #0]
 80162cc:	e01a      	b.n	8016304 <USB_EPStartXfer+0x228>
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	785b      	ldrb	r3, [r3, #1]
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d116      	bne.n	8016304 <USB_EPStartXfer+0x228>
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2250      	movs	r2, #80	@ 0x50
 80162da:	5a9b      	ldrh	r3, [r3, r2]
 80162dc:	b29b      	uxth	r3, r3
 80162de:	001a      	movs	r2, r3
 80162e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162e2:	189b      	adds	r3, r3, r2
 80162e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80162e6:	683b      	ldr	r3, [r7, #0]
 80162e8:	781b      	ldrb	r3, [r3, #0]
 80162ea:	00da      	lsls	r2, r3, #3
 80162ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ee:	18d3      	adds	r3, r2, r3
 80162f0:	4a72      	ldr	r2, [pc, #456]	@ (80164bc <USB_EPStartXfer+0x3e0>)
 80162f2:	4694      	mov	ip, r2
 80162f4:	4463      	add	r3, ip
 80162f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80162f8:	1d7b      	adds	r3, r7, #5
 80162fa:	33ff      	adds	r3, #255	@ 0xff
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	b29a      	uxth	r2, r3
 8016300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016302:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8016304:	2076      	movs	r0, #118	@ 0x76
 8016306:	183b      	adds	r3, r7, r0
 8016308:	683a      	ldr	r2, [r7, #0]
 801630a:	8952      	ldrh	r2, [r2, #10]
 801630c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801630e:	683b      	ldr	r3, [r7, #0]
 8016310:	6959      	ldr	r1, [r3, #20]
 8016312:	1d7b      	adds	r3, r7, #5
 8016314:	33ff      	adds	r3, #255	@ 0xff
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	b29c      	uxth	r4, r3
 801631a:	183b      	adds	r3, r7, r0
 801631c:	881a      	ldrh	r2, [r3, #0]
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	0023      	movs	r3, r4
 8016322:	f001 f94d 	bl	80175c0 <USB_WritePMA>
            ep->xfer_buff += len;
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	695a      	ldr	r2, [r3, #20]
 801632a:	1d7b      	adds	r3, r7, #5
 801632c:	33ff      	adds	r3, #255	@ 0xff
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	18d2      	adds	r2, r2, r3
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	6a1a      	ldr	r2, [r3, #32]
 801633a:	683b      	ldr	r3, [r7, #0]
 801633c:	691b      	ldr	r3, [r3, #16]
 801633e:	429a      	cmp	r2, r3
 8016340:	d908      	bls.n	8016354 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	6a1a      	ldr	r2, [r3, #32]
 8016346:	1d7b      	adds	r3, r7, #5
 8016348:	33ff      	adds	r3, #255	@ 0xff
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	1ad2      	subs	r2, r2, r3
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	621a      	str	r2, [r3, #32]
 8016352:	e007      	b.n	8016364 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	6a1b      	ldr	r3, [r3, #32]
 8016358:	1d7a      	adds	r2, r7, #5
 801635a:	32ff      	adds	r2, #255	@ 0xff
 801635c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	2200      	movs	r2, #0
 8016362:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	785b      	ldrb	r3, [r3, #1]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d000      	beq.n	801636e <USB_EPStartXfer+0x292>
 801636c:	e070      	b.n	8016450 <USB_EPStartXfer+0x374>
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	61bb      	str	r3, [r7, #24]
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2250      	movs	r2, #80	@ 0x50
 8016376:	5a9b      	ldrh	r3, [r3, r2]
 8016378:	b29b      	uxth	r3, r3
 801637a:	001a      	movs	r2, r3
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	189b      	adds	r3, r3, r2
 8016380:	61bb      	str	r3, [r7, #24]
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	781b      	ldrb	r3, [r3, #0]
 8016386:	00da      	lsls	r2, r3, #3
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	18d3      	adds	r3, r2, r3
 801638c:	4a48      	ldr	r2, [pc, #288]	@ (80164b0 <USB_EPStartXfer+0x3d4>)
 801638e:	4694      	mov	ip, r2
 8016390:	4463      	add	r3, ip
 8016392:	617b      	str	r3, [r7, #20]
 8016394:	697b      	ldr	r3, [r7, #20]
 8016396:	881b      	ldrh	r3, [r3, #0]
 8016398:	b29b      	uxth	r3, r3
 801639a:	059b      	lsls	r3, r3, #22
 801639c:	0d9b      	lsrs	r3, r3, #22
 801639e:	b29a      	uxth	r2, r3
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	801a      	strh	r2, [r3, #0]
 80163a4:	1d7b      	adds	r3, r7, #5
 80163a6:	33ff      	adds	r3, #255	@ 0xff
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80163ac:	d922      	bls.n	80163f4 <USB_EPStartXfer+0x318>
 80163ae:	1d7b      	adds	r3, r7, #5
 80163b0:	33ff      	adds	r3, #255	@ 0xff
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	095b      	lsrs	r3, r3, #5
 80163b6:	21fc      	movs	r1, #252	@ 0xfc
 80163b8:	187a      	adds	r2, r7, r1
 80163ba:	6013      	str	r3, [r2, #0]
 80163bc:	1d7b      	adds	r3, r7, #5
 80163be:	33ff      	adds	r3, #255	@ 0xff
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	221f      	movs	r2, #31
 80163c4:	4013      	ands	r3, r2
 80163c6:	d104      	bne.n	80163d2 <USB_EPStartXfer+0x2f6>
 80163c8:	187b      	adds	r3, r7, r1
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	3b01      	subs	r3, #1
 80163ce:	187a      	adds	r2, r7, r1
 80163d0:	6013      	str	r3, [r2, #0]
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	881b      	ldrh	r3, [r3, #0]
 80163d6:	b29a      	uxth	r2, r3
 80163d8:	23fc      	movs	r3, #252	@ 0xfc
 80163da:	18fb      	adds	r3, r7, r3
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	029b      	lsls	r3, r3, #10
 80163e2:	b29b      	uxth	r3, r3
 80163e4:	4313      	orrs	r3, r2
 80163e6:	b29b      	uxth	r3, r3
 80163e8:	4a35      	ldr	r2, [pc, #212]	@ (80164c0 <USB_EPStartXfer+0x3e4>)
 80163ea:	4313      	orrs	r3, r2
 80163ec:	b29a      	uxth	r2, r3
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	801a      	strh	r2, [r3, #0]
 80163f2:	e04a      	b.n	801648a <USB_EPStartXfer+0x3ae>
 80163f4:	1d7b      	adds	r3, r7, #5
 80163f6:	33ff      	adds	r3, #255	@ 0xff
 80163f8:	681b      	ldr	r3, [r3, #0]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d108      	bne.n	8016410 <USB_EPStartXfer+0x334>
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	881b      	ldrh	r3, [r3, #0]
 8016402:	b29b      	uxth	r3, r3
 8016404:	4a2e      	ldr	r2, [pc, #184]	@ (80164c0 <USB_EPStartXfer+0x3e4>)
 8016406:	4313      	orrs	r3, r2
 8016408:	b29a      	uxth	r2, r3
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	801a      	strh	r2, [r3, #0]
 801640e:	e03c      	b.n	801648a <USB_EPStartXfer+0x3ae>
 8016410:	1d7b      	adds	r3, r7, #5
 8016412:	33ff      	adds	r3, #255	@ 0xff
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	085b      	lsrs	r3, r3, #1
 8016418:	21fc      	movs	r1, #252	@ 0xfc
 801641a:	187a      	adds	r2, r7, r1
 801641c:	6013      	str	r3, [r2, #0]
 801641e:	1d7b      	adds	r3, r7, #5
 8016420:	33ff      	adds	r3, #255	@ 0xff
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	2201      	movs	r2, #1
 8016426:	4013      	ands	r3, r2
 8016428:	d004      	beq.n	8016434 <USB_EPStartXfer+0x358>
 801642a:	187b      	adds	r3, r7, r1
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	3301      	adds	r3, #1
 8016430:	187a      	adds	r2, r7, r1
 8016432:	6013      	str	r3, [r2, #0]
 8016434:	697b      	ldr	r3, [r7, #20]
 8016436:	881b      	ldrh	r3, [r3, #0]
 8016438:	b29a      	uxth	r2, r3
 801643a:	23fc      	movs	r3, #252	@ 0xfc
 801643c:	18fb      	adds	r3, r7, r3
 801643e:	681b      	ldr	r3, [r3, #0]
 8016440:	b29b      	uxth	r3, r3
 8016442:	029b      	lsls	r3, r3, #10
 8016444:	b29b      	uxth	r3, r3
 8016446:	4313      	orrs	r3, r2
 8016448:	b29a      	uxth	r2, r3
 801644a:	697b      	ldr	r3, [r7, #20]
 801644c:	801a      	strh	r2, [r3, #0]
 801644e:	e01c      	b.n	801648a <USB_EPStartXfer+0x3ae>
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	785b      	ldrb	r3, [r3, #1]
 8016454:	2b01      	cmp	r3, #1
 8016456:	d118      	bne.n	801648a <USB_EPStartXfer+0x3ae>
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	623b      	str	r3, [r7, #32]
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	2250      	movs	r2, #80	@ 0x50
 8016460:	5a9b      	ldrh	r3, [r3, r2]
 8016462:	b29b      	uxth	r3, r3
 8016464:	001a      	movs	r2, r3
 8016466:	6a3b      	ldr	r3, [r7, #32]
 8016468:	189b      	adds	r3, r3, r2
 801646a:	623b      	str	r3, [r7, #32]
 801646c:	683b      	ldr	r3, [r7, #0]
 801646e:	781b      	ldrb	r3, [r3, #0]
 8016470:	00da      	lsls	r2, r3, #3
 8016472:	6a3b      	ldr	r3, [r7, #32]
 8016474:	18d3      	adds	r3, r2, r3
 8016476:	4a0e      	ldr	r2, [pc, #56]	@ (80164b0 <USB_EPStartXfer+0x3d4>)
 8016478:	4694      	mov	ip, r2
 801647a:	4463      	add	r3, ip
 801647c:	61fb      	str	r3, [r7, #28]
 801647e:	1d7b      	adds	r3, r7, #5
 8016480:	33ff      	adds	r3, #255	@ 0xff
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	b29a      	uxth	r2, r3
 8016486:	69fb      	ldr	r3, [r7, #28]
 8016488:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801648a:	2076      	movs	r0, #118	@ 0x76
 801648c:	183b      	adds	r3, r7, r0
 801648e:	683a      	ldr	r2, [r7, #0]
 8016490:	8912      	ldrh	r2, [r2, #8]
 8016492:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	6959      	ldr	r1, [r3, #20]
 8016498:	1d7b      	adds	r3, r7, #5
 801649a:	33ff      	adds	r3, #255	@ 0xff
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	b29c      	uxth	r4, r3
 80164a0:	183b      	adds	r3, r7, r0
 80164a2:	881a      	ldrh	r2, [r3, #0]
 80164a4:	6878      	ldr	r0, [r7, #4]
 80164a6:	0023      	movs	r3, r4
 80164a8:	f001 f88a 	bl	80175c0 <USB_WritePMA>
 80164ac:	e329      	b.n	8016b02 <USB_EPStartXfer+0xa26>
 80164ae:	46c0      	nop			@ (mov r8, r8)
 80164b0:	00000402 	.word	0x00000402
 80164b4:	ffff8f8f 	.word	0xffff8f8f
 80164b8:	ffff8180 	.word	0xffff8180
 80164bc:	00000406 	.word	0x00000406
 80164c0:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	785b      	ldrb	r3, [r3, #1]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d000      	beq.n	80164ce <USB_EPStartXfer+0x3f2>
 80164cc:	e070      	b.n	80165b0 <USB_EPStartXfer+0x4d4>
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2250      	movs	r2, #80	@ 0x50
 80164d6:	5a9b      	ldrh	r3, [r3, r2]
 80164d8:	b29b      	uxth	r3, r3
 80164da:	001a      	movs	r2, r3
 80164dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80164de:	189b      	adds	r3, r3, r2
 80164e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	00da      	lsls	r2, r3, #3
 80164e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80164ea:	18d3      	adds	r3, r2, r3
 80164ec:	4acd      	ldr	r2, [pc, #820]	@ (8016824 <USB_EPStartXfer+0x748>)
 80164ee:	4694      	mov	ip, r2
 80164f0:	4463      	add	r3, ip
 80164f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80164f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80164f6:	881b      	ldrh	r3, [r3, #0]
 80164f8:	b29b      	uxth	r3, r3
 80164fa:	059b      	lsls	r3, r3, #22
 80164fc:	0d9b      	lsrs	r3, r3, #22
 80164fe:	b29a      	uxth	r2, r3
 8016500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016502:	801a      	strh	r2, [r3, #0]
 8016504:	1d7b      	adds	r3, r7, #5
 8016506:	33ff      	adds	r3, #255	@ 0xff
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	2b3e      	cmp	r3, #62	@ 0x3e
 801650c:	d922      	bls.n	8016554 <USB_EPStartXfer+0x478>
 801650e:	1d7b      	adds	r3, r7, #5
 8016510:	33ff      	adds	r3, #255	@ 0xff
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	095b      	lsrs	r3, r3, #5
 8016516:	21f8      	movs	r1, #248	@ 0xf8
 8016518:	187a      	adds	r2, r7, r1
 801651a:	6013      	str	r3, [r2, #0]
 801651c:	1d7b      	adds	r3, r7, #5
 801651e:	33ff      	adds	r3, #255	@ 0xff
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	221f      	movs	r2, #31
 8016524:	4013      	ands	r3, r2
 8016526:	d104      	bne.n	8016532 <USB_EPStartXfer+0x456>
 8016528:	187b      	adds	r3, r7, r1
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	3b01      	subs	r3, #1
 801652e:	187a      	adds	r2, r7, r1
 8016530:	6013      	str	r3, [r2, #0]
 8016532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016534:	881b      	ldrh	r3, [r3, #0]
 8016536:	b29a      	uxth	r2, r3
 8016538:	23f8      	movs	r3, #248	@ 0xf8
 801653a:	18fb      	adds	r3, r7, r3
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	b29b      	uxth	r3, r3
 8016540:	029b      	lsls	r3, r3, #10
 8016542:	b29b      	uxth	r3, r3
 8016544:	4313      	orrs	r3, r2
 8016546:	b29b      	uxth	r3, r3
 8016548:	4ab7      	ldr	r2, [pc, #732]	@ (8016828 <USB_EPStartXfer+0x74c>)
 801654a:	4313      	orrs	r3, r2
 801654c:	b29a      	uxth	r2, r3
 801654e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016550:	801a      	strh	r2, [r3, #0]
 8016552:	e04a      	b.n	80165ea <USB_EPStartXfer+0x50e>
 8016554:	1d7b      	adds	r3, r7, #5
 8016556:	33ff      	adds	r3, #255	@ 0xff
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d108      	bne.n	8016570 <USB_EPStartXfer+0x494>
 801655e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016560:	881b      	ldrh	r3, [r3, #0]
 8016562:	b29b      	uxth	r3, r3
 8016564:	4ab0      	ldr	r2, [pc, #704]	@ (8016828 <USB_EPStartXfer+0x74c>)
 8016566:	4313      	orrs	r3, r2
 8016568:	b29a      	uxth	r2, r3
 801656a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801656c:	801a      	strh	r2, [r3, #0]
 801656e:	e03c      	b.n	80165ea <USB_EPStartXfer+0x50e>
 8016570:	1d7b      	adds	r3, r7, #5
 8016572:	33ff      	adds	r3, #255	@ 0xff
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	085b      	lsrs	r3, r3, #1
 8016578:	21f8      	movs	r1, #248	@ 0xf8
 801657a:	187a      	adds	r2, r7, r1
 801657c:	6013      	str	r3, [r2, #0]
 801657e:	1d7b      	adds	r3, r7, #5
 8016580:	33ff      	adds	r3, #255	@ 0xff
 8016582:	681b      	ldr	r3, [r3, #0]
 8016584:	2201      	movs	r2, #1
 8016586:	4013      	ands	r3, r2
 8016588:	d004      	beq.n	8016594 <USB_EPStartXfer+0x4b8>
 801658a:	187b      	adds	r3, r7, r1
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	3301      	adds	r3, #1
 8016590:	187a      	adds	r2, r7, r1
 8016592:	6013      	str	r3, [r2, #0]
 8016594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016596:	881b      	ldrh	r3, [r3, #0]
 8016598:	b29a      	uxth	r2, r3
 801659a:	23f8      	movs	r3, #248	@ 0xf8
 801659c:	18fb      	adds	r3, r7, r3
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	b29b      	uxth	r3, r3
 80165a2:	029b      	lsls	r3, r3, #10
 80165a4:	b29b      	uxth	r3, r3
 80165a6:	4313      	orrs	r3, r2
 80165a8:	b29a      	uxth	r2, r3
 80165aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80165ac:	801a      	strh	r2, [r3, #0]
 80165ae:	e01c      	b.n	80165ea <USB_EPStartXfer+0x50e>
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	785b      	ldrb	r3, [r3, #1]
 80165b4:	2b01      	cmp	r3, #1
 80165b6:	d118      	bne.n	80165ea <USB_EPStartXfer+0x50e>
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2250      	movs	r2, #80	@ 0x50
 80165c0:	5a9b      	ldrh	r3, [r3, r2]
 80165c2:	b29b      	uxth	r3, r3
 80165c4:	001a      	movs	r2, r3
 80165c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165c8:	189b      	adds	r3, r3, r2
 80165ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	00da      	lsls	r2, r3, #3
 80165d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80165d4:	18d3      	adds	r3, r2, r3
 80165d6:	4a93      	ldr	r2, [pc, #588]	@ (8016824 <USB_EPStartXfer+0x748>)
 80165d8:	4694      	mov	ip, r2
 80165da:	4463      	add	r3, ip
 80165dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80165de:	1d7b      	adds	r3, r7, #5
 80165e0:	33ff      	adds	r3, #255	@ 0xff
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	b29a      	uxth	r2, r3
 80165e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80165ea:	2076      	movs	r0, #118	@ 0x76
 80165ec:	183b      	adds	r3, r7, r0
 80165ee:	683a      	ldr	r2, [r7, #0]
 80165f0:	8912      	ldrh	r2, [r2, #8]
 80165f2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	6959      	ldr	r1, [r3, #20]
 80165f8:	1d7b      	adds	r3, r7, #5
 80165fa:	33ff      	adds	r3, #255	@ 0xff
 80165fc:	681b      	ldr	r3, [r3, #0]
 80165fe:	b29c      	uxth	r4, r3
 8016600:	183b      	adds	r3, r7, r0
 8016602:	881a      	ldrh	r2, [r3, #0]
 8016604:	6878      	ldr	r0, [r7, #4]
 8016606:	0023      	movs	r3, r4
 8016608:	f000 ffda 	bl	80175c0 <USB_WritePMA>
            ep->xfer_buff += len;
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	695a      	ldr	r2, [r3, #20]
 8016610:	1d7b      	adds	r3, r7, #5
 8016612:	33ff      	adds	r3, #255	@ 0xff
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	18d2      	adds	r2, r2, r3
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801661c:	683b      	ldr	r3, [r7, #0]
 801661e:	6a1a      	ldr	r2, [r3, #32]
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	691b      	ldr	r3, [r3, #16]
 8016624:	429a      	cmp	r2, r3
 8016626:	d908      	bls.n	801663a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	6a1a      	ldr	r2, [r3, #32]
 801662c:	1d7b      	adds	r3, r7, #5
 801662e:	33ff      	adds	r3, #255	@ 0xff
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	1ad2      	subs	r2, r2, r3
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	621a      	str	r2, [r3, #32]
 8016638:	e007      	b.n	801664a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	6a1b      	ldr	r3, [r3, #32]
 801663e:	1d7a      	adds	r2, r7, #5
 8016640:	32ff      	adds	r2, #255	@ 0xff
 8016642:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8016644:	683b      	ldr	r3, [r7, #0]
 8016646:	2200      	movs	r2, #0
 8016648:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	643b      	str	r3, [r7, #64]	@ 0x40
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	785b      	ldrb	r3, [r3, #1]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d000      	beq.n	8016658 <USB_EPStartXfer+0x57c>
 8016656:	e070      	b.n	801673a <USB_EPStartXfer+0x65e>
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	2250      	movs	r2, #80	@ 0x50
 8016660:	5a9b      	ldrh	r3, [r3, r2]
 8016662:	b29b      	uxth	r3, r3
 8016664:	001a      	movs	r2, r3
 8016666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016668:	189b      	adds	r3, r3, r2
 801666a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	00da      	lsls	r2, r3, #3
 8016672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016674:	18d3      	adds	r3, r2, r3
 8016676:	4a6d      	ldr	r2, [pc, #436]	@ (801682c <USB_EPStartXfer+0x750>)
 8016678:	4694      	mov	ip, r2
 801667a:	4463      	add	r3, ip
 801667c:	637b      	str	r3, [r7, #52]	@ 0x34
 801667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016680:	881b      	ldrh	r3, [r3, #0]
 8016682:	b29b      	uxth	r3, r3
 8016684:	059b      	lsls	r3, r3, #22
 8016686:	0d9b      	lsrs	r3, r3, #22
 8016688:	b29a      	uxth	r2, r3
 801668a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801668c:	801a      	strh	r2, [r3, #0]
 801668e:	1d7b      	adds	r3, r7, #5
 8016690:	33ff      	adds	r3, #255	@ 0xff
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	2b3e      	cmp	r3, #62	@ 0x3e
 8016696:	d922      	bls.n	80166de <USB_EPStartXfer+0x602>
 8016698:	1d7b      	adds	r3, r7, #5
 801669a:	33ff      	adds	r3, #255	@ 0xff
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	095b      	lsrs	r3, r3, #5
 80166a0:	21f4      	movs	r1, #244	@ 0xf4
 80166a2:	187a      	adds	r2, r7, r1
 80166a4:	6013      	str	r3, [r2, #0]
 80166a6:	1d7b      	adds	r3, r7, #5
 80166a8:	33ff      	adds	r3, #255	@ 0xff
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	221f      	movs	r2, #31
 80166ae:	4013      	ands	r3, r2
 80166b0:	d104      	bne.n	80166bc <USB_EPStartXfer+0x5e0>
 80166b2:	187b      	adds	r3, r7, r1
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	3b01      	subs	r3, #1
 80166b8:	187a      	adds	r2, r7, r1
 80166ba:	6013      	str	r3, [r2, #0]
 80166bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166be:	881b      	ldrh	r3, [r3, #0]
 80166c0:	b29a      	uxth	r2, r3
 80166c2:	23f4      	movs	r3, #244	@ 0xf4
 80166c4:	18fb      	adds	r3, r7, r3
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	029b      	lsls	r3, r3, #10
 80166cc:	b29b      	uxth	r3, r3
 80166ce:	4313      	orrs	r3, r2
 80166d0:	b29b      	uxth	r3, r3
 80166d2:	4a55      	ldr	r2, [pc, #340]	@ (8016828 <USB_EPStartXfer+0x74c>)
 80166d4:	4313      	orrs	r3, r2
 80166d6:	b29a      	uxth	r2, r3
 80166d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166da:	801a      	strh	r2, [r3, #0]
 80166dc:	e048      	b.n	8016770 <USB_EPStartXfer+0x694>
 80166de:	1d7b      	adds	r3, r7, #5
 80166e0:	33ff      	adds	r3, #255	@ 0xff
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d108      	bne.n	80166fa <USB_EPStartXfer+0x61e>
 80166e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	4a4e      	ldr	r2, [pc, #312]	@ (8016828 <USB_EPStartXfer+0x74c>)
 80166f0:	4313      	orrs	r3, r2
 80166f2:	b29a      	uxth	r2, r3
 80166f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166f6:	801a      	strh	r2, [r3, #0]
 80166f8:	e03a      	b.n	8016770 <USB_EPStartXfer+0x694>
 80166fa:	1d7b      	adds	r3, r7, #5
 80166fc:	33ff      	adds	r3, #255	@ 0xff
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	085b      	lsrs	r3, r3, #1
 8016702:	21f4      	movs	r1, #244	@ 0xf4
 8016704:	187a      	adds	r2, r7, r1
 8016706:	6013      	str	r3, [r2, #0]
 8016708:	1d7b      	adds	r3, r7, #5
 801670a:	33ff      	adds	r3, #255	@ 0xff
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2201      	movs	r2, #1
 8016710:	4013      	ands	r3, r2
 8016712:	d004      	beq.n	801671e <USB_EPStartXfer+0x642>
 8016714:	187b      	adds	r3, r7, r1
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	3301      	adds	r3, #1
 801671a:	187a      	adds	r2, r7, r1
 801671c:	6013      	str	r3, [r2, #0]
 801671e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016720:	881b      	ldrh	r3, [r3, #0]
 8016722:	b29a      	uxth	r2, r3
 8016724:	23f4      	movs	r3, #244	@ 0xf4
 8016726:	18fb      	adds	r3, r7, r3
 8016728:	681b      	ldr	r3, [r3, #0]
 801672a:	b29b      	uxth	r3, r3
 801672c:	029b      	lsls	r3, r3, #10
 801672e:	b29b      	uxth	r3, r3
 8016730:	4313      	orrs	r3, r2
 8016732:	b29a      	uxth	r2, r3
 8016734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016736:	801a      	strh	r2, [r3, #0]
 8016738:	e01a      	b.n	8016770 <USB_EPStartXfer+0x694>
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	785b      	ldrb	r3, [r3, #1]
 801673e:	2b01      	cmp	r3, #1
 8016740:	d116      	bne.n	8016770 <USB_EPStartXfer+0x694>
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2250      	movs	r2, #80	@ 0x50
 8016746:	5a9b      	ldrh	r3, [r3, r2]
 8016748:	b29b      	uxth	r3, r3
 801674a:	001a      	movs	r2, r3
 801674c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801674e:	189b      	adds	r3, r3, r2
 8016750:	643b      	str	r3, [r7, #64]	@ 0x40
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	00da      	lsls	r2, r3, #3
 8016758:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801675a:	18d3      	adds	r3, r2, r3
 801675c:	4a33      	ldr	r2, [pc, #204]	@ (801682c <USB_EPStartXfer+0x750>)
 801675e:	4694      	mov	ip, r2
 8016760:	4463      	add	r3, ip
 8016762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016764:	1d7b      	adds	r3, r7, #5
 8016766:	33ff      	adds	r3, #255	@ 0xff
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	b29a      	uxth	r2, r3
 801676c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801676e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8016770:	2076      	movs	r0, #118	@ 0x76
 8016772:	183b      	adds	r3, r7, r0
 8016774:	683a      	ldr	r2, [r7, #0]
 8016776:	8952      	ldrh	r2, [r2, #10]
 8016778:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	6959      	ldr	r1, [r3, #20]
 801677e:	1d7b      	adds	r3, r7, #5
 8016780:	33ff      	adds	r3, #255	@ 0xff
 8016782:	681b      	ldr	r3, [r3, #0]
 8016784:	b29c      	uxth	r4, r3
 8016786:	183b      	adds	r3, r7, r0
 8016788:	881a      	ldrh	r2, [r3, #0]
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	0023      	movs	r3, r4
 801678e:	f000 ff17 	bl	80175c0 <USB_WritePMA>
 8016792:	e1b6      	b.n	8016b02 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	6a1b      	ldr	r3, [r3, #32]
 8016798:	1d7a      	adds	r2, r7, #5
 801679a:	32ff      	adds	r2, #255	@ 0xff
 801679c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801679e:	687a      	ldr	r2, [r7, #4]
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	009b      	lsls	r3, r3, #2
 80167a6:	18d3      	adds	r3, r2, r3
 80167a8:	881b      	ldrh	r3, [r3, #0]
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	2062      	movs	r0, #98	@ 0x62
 80167ae:	183b      	adds	r3, r7, r0
 80167b0:	491f      	ldr	r1, [pc, #124]	@ (8016830 <USB_EPStartXfer+0x754>)
 80167b2:	400a      	ands	r2, r1
 80167b4:	801a      	strh	r2, [r3, #0]
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	009b      	lsls	r3, r3, #2
 80167be:	18d3      	adds	r3, r2, r3
 80167c0:	183a      	adds	r2, r7, r0
 80167c2:	8812      	ldrh	r2, [r2, #0]
 80167c4:	491b      	ldr	r1, [pc, #108]	@ (8016834 <USB_EPStartXfer+0x758>)
 80167c6:	430a      	orrs	r2, r1
 80167c8:	b292      	uxth	r2, r2
 80167ca:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	2250      	movs	r2, #80	@ 0x50
 80167d4:	5a9b      	ldrh	r3, [r3, r2]
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	001a      	movs	r2, r3
 80167da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80167dc:	189b      	adds	r3, r3, r2
 80167de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	00da      	lsls	r2, r3, #3
 80167e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80167e8:	18d3      	adds	r3, r2, r3
 80167ea:	4a0e      	ldr	r2, [pc, #56]	@ (8016824 <USB_EPStartXfer+0x748>)
 80167ec:	4694      	mov	ip, r2
 80167ee:	4463      	add	r3, ip
 80167f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80167f2:	1d7b      	adds	r3, r7, #5
 80167f4:	33ff      	adds	r3, #255	@ 0xff
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	b29a      	uxth	r2, r3
 80167fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80167fc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80167fe:	2076      	movs	r0, #118	@ 0x76
 8016800:	183b      	adds	r3, r7, r0
 8016802:	683a      	ldr	r2, [r7, #0]
 8016804:	8912      	ldrh	r2, [r2, #8]
 8016806:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	6959      	ldr	r1, [r3, #20]
 801680c:	1d7b      	adds	r3, r7, #5
 801680e:	33ff      	adds	r3, #255	@ 0xff
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	b29c      	uxth	r4, r3
 8016814:	183b      	adds	r3, r7, r0
 8016816:	881a      	ldrh	r2, [r3, #0]
 8016818:	6878      	ldr	r0, [r7, #4]
 801681a:	0023      	movs	r3, r4
 801681c:	f000 fed0 	bl	80175c0 <USB_WritePMA>
 8016820:	e16f      	b.n	8016b02 <USB_EPStartXfer+0xa26>
 8016822:	46c0      	nop			@ (mov r8, r8)
 8016824:	00000402 	.word	0x00000402
 8016828:	ffff8000 	.word	0xffff8000
 801682c:	00000406 	.word	0x00000406
 8016830:	ffff8e8f 	.word	0xffff8e8f
 8016834:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	6a1a      	ldr	r2, [r3, #32]
 801683c:	1d7b      	adds	r3, r7, #5
 801683e:	33ff      	adds	r3, #255	@ 0xff
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	1ad2      	subs	r2, r2, r3
 8016844:	683b      	ldr	r3, [r7, #0]
 8016846:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8016848:	687a      	ldr	r2, [r7, #4]
 801684a:	683b      	ldr	r3, [r7, #0]
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	009b      	lsls	r3, r3, #2
 8016850:	18d3      	adds	r3, r2, r3
 8016852:	881b      	ldrh	r3, [r3, #0]
 8016854:	b29b      	uxth	r3, r3
 8016856:	001a      	movs	r2, r3
 8016858:	2340      	movs	r3, #64	@ 0x40
 801685a:	4013      	ands	r3, r2
 801685c:	d100      	bne.n	8016860 <USB_EPStartXfer+0x784>
 801685e:	e0a4      	b.n	80169aa <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	673b      	str	r3, [r7, #112]	@ 0x70
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	785b      	ldrb	r3, [r3, #1]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d000      	beq.n	801686e <USB_EPStartXfer+0x792>
 801686c:	e070      	b.n	8016950 <USB_EPStartXfer+0x874>
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2250      	movs	r2, #80	@ 0x50
 8016876:	5a9b      	ldrh	r3, [r3, r2]
 8016878:	b29b      	uxth	r3, r3
 801687a:	001a      	movs	r2, r3
 801687c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801687e:	189b      	adds	r3, r3, r2
 8016880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	781b      	ldrb	r3, [r3, #0]
 8016886:	00da      	lsls	r2, r3, #3
 8016888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801688a:	18d3      	adds	r3, r2, r3
 801688c:	4abc      	ldr	r2, [pc, #752]	@ (8016b80 <USB_EPStartXfer+0xaa4>)
 801688e:	4694      	mov	ip, r2
 8016890:	4463      	add	r3, ip
 8016892:	667b      	str	r3, [r7, #100]	@ 0x64
 8016894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016896:	881b      	ldrh	r3, [r3, #0]
 8016898:	b29b      	uxth	r3, r3
 801689a:	059b      	lsls	r3, r3, #22
 801689c:	0d9b      	lsrs	r3, r3, #22
 801689e:	b29a      	uxth	r2, r3
 80168a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80168a2:	801a      	strh	r2, [r3, #0]
 80168a4:	1d7b      	adds	r3, r7, #5
 80168a6:	33ff      	adds	r3, #255	@ 0xff
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80168ac:	d922      	bls.n	80168f4 <USB_EPStartXfer+0x818>
 80168ae:	1d7b      	adds	r3, r7, #5
 80168b0:	33ff      	adds	r3, #255	@ 0xff
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	095b      	lsrs	r3, r3, #5
 80168b6:	21f0      	movs	r1, #240	@ 0xf0
 80168b8:	187a      	adds	r2, r7, r1
 80168ba:	6013      	str	r3, [r2, #0]
 80168bc:	1d7b      	adds	r3, r7, #5
 80168be:	33ff      	adds	r3, #255	@ 0xff
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	221f      	movs	r2, #31
 80168c4:	4013      	ands	r3, r2
 80168c6:	d104      	bne.n	80168d2 <USB_EPStartXfer+0x7f6>
 80168c8:	187b      	adds	r3, r7, r1
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	3b01      	subs	r3, #1
 80168ce:	187a      	adds	r2, r7, r1
 80168d0:	6013      	str	r3, [r2, #0]
 80168d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80168d4:	881b      	ldrh	r3, [r3, #0]
 80168d6:	b29a      	uxth	r2, r3
 80168d8:	23f0      	movs	r3, #240	@ 0xf0
 80168da:	18fb      	adds	r3, r7, r3
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	b29b      	uxth	r3, r3
 80168e0:	029b      	lsls	r3, r3, #10
 80168e2:	b29b      	uxth	r3, r3
 80168e4:	4313      	orrs	r3, r2
 80168e6:	b29b      	uxth	r3, r3
 80168e8:	4aa6      	ldr	r2, [pc, #664]	@ (8016b84 <USB_EPStartXfer+0xaa8>)
 80168ea:	4313      	orrs	r3, r2
 80168ec:	b29a      	uxth	r2, r3
 80168ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80168f0:	801a      	strh	r2, [r3, #0]
 80168f2:	e048      	b.n	8016986 <USB_EPStartXfer+0x8aa>
 80168f4:	1d7b      	adds	r3, r7, #5
 80168f6:	33ff      	adds	r3, #255	@ 0xff
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d108      	bne.n	8016910 <USB_EPStartXfer+0x834>
 80168fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016900:	881b      	ldrh	r3, [r3, #0]
 8016902:	b29b      	uxth	r3, r3
 8016904:	4a9f      	ldr	r2, [pc, #636]	@ (8016b84 <USB_EPStartXfer+0xaa8>)
 8016906:	4313      	orrs	r3, r2
 8016908:	b29a      	uxth	r2, r3
 801690a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801690c:	801a      	strh	r2, [r3, #0]
 801690e:	e03a      	b.n	8016986 <USB_EPStartXfer+0x8aa>
 8016910:	1d7b      	adds	r3, r7, #5
 8016912:	33ff      	adds	r3, #255	@ 0xff
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	085b      	lsrs	r3, r3, #1
 8016918:	21f0      	movs	r1, #240	@ 0xf0
 801691a:	187a      	adds	r2, r7, r1
 801691c:	6013      	str	r3, [r2, #0]
 801691e:	1d7b      	adds	r3, r7, #5
 8016920:	33ff      	adds	r3, #255	@ 0xff
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	2201      	movs	r2, #1
 8016926:	4013      	ands	r3, r2
 8016928:	d004      	beq.n	8016934 <USB_EPStartXfer+0x858>
 801692a:	187b      	adds	r3, r7, r1
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	3301      	adds	r3, #1
 8016930:	187a      	adds	r2, r7, r1
 8016932:	6013      	str	r3, [r2, #0]
 8016934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016936:	881b      	ldrh	r3, [r3, #0]
 8016938:	b29a      	uxth	r2, r3
 801693a:	23f0      	movs	r3, #240	@ 0xf0
 801693c:	18fb      	adds	r3, r7, r3
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	b29b      	uxth	r3, r3
 8016942:	029b      	lsls	r3, r3, #10
 8016944:	b29b      	uxth	r3, r3
 8016946:	4313      	orrs	r3, r2
 8016948:	b29a      	uxth	r2, r3
 801694a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801694c:	801a      	strh	r2, [r3, #0]
 801694e:	e01a      	b.n	8016986 <USB_EPStartXfer+0x8aa>
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	785b      	ldrb	r3, [r3, #1]
 8016954:	2b01      	cmp	r3, #1
 8016956:	d116      	bne.n	8016986 <USB_EPStartXfer+0x8aa>
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2250      	movs	r2, #80	@ 0x50
 801695c:	5a9b      	ldrh	r3, [r3, r2]
 801695e:	b29b      	uxth	r3, r3
 8016960:	001a      	movs	r2, r3
 8016962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016964:	189b      	adds	r3, r3, r2
 8016966:	673b      	str	r3, [r7, #112]	@ 0x70
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	781b      	ldrb	r3, [r3, #0]
 801696c:	00da      	lsls	r2, r3, #3
 801696e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016970:	18d3      	adds	r3, r2, r3
 8016972:	4a83      	ldr	r2, [pc, #524]	@ (8016b80 <USB_EPStartXfer+0xaa4>)
 8016974:	4694      	mov	ip, r2
 8016976:	4463      	add	r3, ip
 8016978:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801697a:	1d7b      	adds	r3, r7, #5
 801697c:	33ff      	adds	r3, #255	@ 0xff
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	b29a      	uxth	r2, r3
 8016982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8016984:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8016986:	2076      	movs	r0, #118	@ 0x76
 8016988:	183b      	adds	r3, r7, r0
 801698a:	683a      	ldr	r2, [r7, #0]
 801698c:	8952      	ldrh	r2, [r2, #10]
 801698e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	6959      	ldr	r1, [r3, #20]
 8016994:	1d7b      	adds	r3, r7, #5
 8016996:	33ff      	adds	r3, #255	@ 0xff
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	b29c      	uxth	r4, r3
 801699c:	183b      	adds	r3, r7, r0
 801699e:	881a      	ldrh	r2, [r3, #0]
 80169a0:	6878      	ldr	r0, [r7, #4]
 80169a2:	0023      	movs	r3, r4
 80169a4:	f000 fe0c 	bl	80175c0 <USB_WritePMA>
 80169a8:	e0ab      	b.n	8016b02 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80169aa:	683b      	ldr	r3, [r7, #0]
 80169ac:	785b      	ldrb	r3, [r3, #1]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d000      	beq.n	80169b4 <USB_EPStartXfer+0x8d8>
 80169b2:	e070      	b.n	8016a96 <USB_EPStartXfer+0x9ba>
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2250      	movs	r2, #80	@ 0x50
 80169bc:	5a9b      	ldrh	r3, [r3, r2]
 80169be:	b29b      	uxth	r3, r3
 80169c0:	001a      	movs	r2, r3
 80169c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80169c4:	189b      	adds	r3, r3, r2
 80169c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80169c8:	683b      	ldr	r3, [r7, #0]
 80169ca:	781b      	ldrb	r3, [r3, #0]
 80169cc:	00da      	lsls	r2, r3, #3
 80169ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80169d0:	18d3      	adds	r3, r2, r3
 80169d2:	4a6d      	ldr	r2, [pc, #436]	@ (8016b88 <USB_EPStartXfer+0xaac>)
 80169d4:	4694      	mov	ip, r2
 80169d6:	4463      	add	r3, ip
 80169d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80169da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80169dc:	881b      	ldrh	r3, [r3, #0]
 80169de:	b29b      	uxth	r3, r3
 80169e0:	059b      	lsls	r3, r3, #22
 80169e2:	0d9b      	lsrs	r3, r3, #22
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80169e8:	801a      	strh	r2, [r3, #0]
 80169ea:	1d7b      	adds	r3, r7, #5
 80169ec:	33ff      	adds	r3, #255	@ 0xff
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80169f2:	d922      	bls.n	8016a3a <USB_EPStartXfer+0x95e>
 80169f4:	1d7b      	adds	r3, r7, #5
 80169f6:	33ff      	adds	r3, #255	@ 0xff
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	095b      	lsrs	r3, r3, #5
 80169fc:	21ec      	movs	r1, #236	@ 0xec
 80169fe:	187a      	adds	r2, r7, r1
 8016a00:	6013      	str	r3, [r2, #0]
 8016a02:	1d7b      	adds	r3, r7, #5
 8016a04:	33ff      	adds	r3, #255	@ 0xff
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	221f      	movs	r2, #31
 8016a0a:	4013      	ands	r3, r2
 8016a0c:	d104      	bne.n	8016a18 <USB_EPStartXfer+0x93c>
 8016a0e:	187b      	adds	r3, r7, r1
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	3b01      	subs	r3, #1
 8016a14:	187a      	adds	r2, r7, r1
 8016a16:	6013      	str	r3, [r2, #0]
 8016a18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016a1a:	881b      	ldrh	r3, [r3, #0]
 8016a1c:	b29a      	uxth	r2, r3
 8016a1e:	23ec      	movs	r3, #236	@ 0xec
 8016a20:	18fb      	adds	r3, r7, r3
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	029b      	lsls	r3, r3, #10
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	4313      	orrs	r3, r2
 8016a2c:	b29b      	uxth	r3, r3
 8016a2e:	4a55      	ldr	r2, [pc, #340]	@ (8016b84 <USB_EPStartXfer+0xaa8>)
 8016a30:	4313      	orrs	r3, r2
 8016a32:	b29a      	uxth	r2, r3
 8016a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016a36:	801a      	strh	r2, [r3, #0]
 8016a38:	e052      	b.n	8016ae0 <USB_EPStartXfer+0xa04>
 8016a3a:	1d7b      	adds	r3, r7, #5
 8016a3c:	33ff      	adds	r3, #255	@ 0xff
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d108      	bne.n	8016a56 <USB_EPStartXfer+0x97a>
 8016a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016a46:	881b      	ldrh	r3, [r3, #0]
 8016a48:	b29b      	uxth	r3, r3
 8016a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8016b84 <USB_EPStartXfer+0xaa8>)
 8016a4c:	4313      	orrs	r3, r2
 8016a4e:	b29a      	uxth	r2, r3
 8016a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016a52:	801a      	strh	r2, [r3, #0]
 8016a54:	e044      	b.n	8016ae0 <USB_EPStartXfer+0xa04>
 8016a56:	1d7b      	adds	r3, r7, #5
 8016a58:	33ff      	adds	r3, #255	@ 0xff
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	085b      	lsrs	r3, r3, #1
 8016a5e:	21ec      	movs	r1, #236	@ 0xec
 8016a60:	187a      	adds	r2, r7, r1
 8016a62:	6013      	str	r3, [r2, #0]
 8016a64:	1d7b      	adds	r3, r7, #5
 8016a66:	33ff      	adds	r3, #255	@ 0xff
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	4013      	ands	r3, r2
 8016a6e:	d004      	beq.n	8016a7a <USB_EPStartXfer+0x99e>
 8016a70:	187b      	adds	r3, r7, r1
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	3301      	adds	r3, #1
 8016a76:	187a      	adds	r2, r7, r1
 8016a78:	6013      	str	r3, [r2, #0]
 8016a7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016a7c:	881b      	ldrh	r3, [r3, #0]
 8016a7e:	b29a      	uxth	r2, r3
 8016a80:	23ec      	movs	r3, #236	@ 0xec
 8016a82:	18fb      	adds	r3, r7, r3
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	b29b      	uxth	r3, r3
 8016a88:	029b      	lsls	r3, r3, #10
 8016a8a:	b29b      	uxth	r3, r3
 8016a8c:	4313      	orrs	r3, r2
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016a92:	801a      	strh	r2, [r3, #0]
 8016a94:	e024      	b.n	8016ae0 <USB_EPStartXfer+0xa04>
 8016a96:	683b      	ldr	r3, [r7, #0]
 8016a98:	785b      	ldrb	r3, [r3, #1]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d120      	bne.n	8016ae0 <USB_EPStartXfer+0xa04>
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	2184      	movs	r1, #132	@ 0x84
 8016aa2:	187a      	adds	r2, r7, r1
 8016aa4:	6013      	str	r3, [r2, #0]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	2250      	movs	r2, #80	@ 0x50
 8016aaa:	5a9b      	ldrh	r3, [r3, r2]
 8016aac:	b29b      	uxth	r3, r3
 8016aae:	001a      	movs	r2, r3
 8016ab0:	187b      	adds	r3, r7, r1
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	189b      	adds	r3, r3, r2
 8016ab6:	187a      	adds	r2, r7, r1
 8016ab8:	6013      	str	r3, [r2, #0]
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	00da      	lsls	r2, r3, #3
 8016ac0:	187b      	adds	r3, r7, r1
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	18d3      	adds	r3, r2, r3
 8016ac6:	4a30      	ldr	r2, [pc, #192]	@ (8016b88 <USB_EPStartXfer+0xaac>)
 8016ac8:	4694      	mov	ip, r2
 8016aca:	4463      	add	r3, ip
 8016acc:	2180      	movs	r1, #128	@ 0x80
 8016ace:	187a      	adds	r2, r7, r1
 8016ad0:	6013      	str	r3, [r2, #0]
 8016ad2:	1d7b      	adds	r3, r7, #5
 8016ad4:	33ff      	adds	r3, #255	@ 0xff
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	b29a      	uxth	r2, r3
 8016ada:	187b      	adds	r3, r7, r1
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8016ae0:	2076      	movs	r0, #118	@ 0x76
 8016ae2:	183b      	adds	r3, r7, r0
 8016ae4:	683a      	ldr	r2, [r7, #0]
 8016ae6:	8912      	ldrh	r2, [r2, #8]
 8016ae8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016aea:	683b      	ldr	r3, [r7, #0]
 8016aec:	6959      	ldr	r1, [r3, #20]
 8016aee:	1d7b      	adds	r3, r7, #5
 8016af0:	33ff      	adds	r3, #255	@ 0xff
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	b29c      	uxth	r4, r3
 8016af6:	183b      	adds	r3, r7, r0
 8016af8:	881a      	ldrh	r2, [r3, #0]
 8016afa:	6878      	ldr	r0, [r7, #4]
 8016afc:	0023      	movs	r3, r4
 8016afe:	f000 fd5f 	bl	80175c0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8016b02:	687a      	ldr	r2, [r7, #4]
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	009b      	lsls	r3, r3, #2
 8016b0a:	18d3      	adds	r3, r2, r3
 8016b0c:	881b      	ldrh	r3, [r3, #0]
 8016b0e:	b29a      	uxth	r2, r3
 8016b10:	200a      	movs	r0, #10
 8016b12:	183b      	adds	r3, r7, r0
 8016b14:	491d      	ldr	r1, [pc, #116]	@ (8016b8c <USB_EPStartXfer+0xab0>)
 8016b16:	400a      	ands	r2, r1
 8016b18:	801a      	strh	r2, [r3, #0]
 8016b1a:	183b      	adds	r3, r7, r0
 8016b1c:	183a      	adds	r2, r7, r0
 8016b1e:	8812      	ldrh	r2, [r2, #0]
 8016b20:	2110      	movs	r1, #16
 8016b22:	404a      	eors	r2, r1
 8016b24:	801a      	strh	r2, [r3, #0]
 8016b26:	183b      	adds	r3, r7, r0
 8016b28:	183a      	adds	r2, r7, r0
 8016b2a:	8812      	ldrh	r2, [r2, #0]
 8016b2c:	2120      	movs	r1, #32
 8016b2e:	404a      	eors	r2, r1
 8016b30:	801a      	strh	r2, [r3, #0]
 8016b32:	687a      	ldr	r2, [r7, #4]
 8016b34:	683b      	ldr	r3, [r7, #0]
 8016b36:	781b      	ldrb	r3, [r3, #0]
 8016b38:	009b      	lsls	r3, r3, #2
 8016b3a:	18d3      	adds	r3, r2, r3
 8016b3c:	183a      	adds	r2, r7, r0
 8016b3e:	8812      	ldrh	r2, [r2, #0]
 8016b40:	4913      	ldr	r1, [pc, #76]	@ (8016b90 <USB_EPStartXfer+0xab4>)
 8016b42:	430a      	orrs	r2, r1
 8016b44:	b292      	uxth	r2, r2
 8016b46:	801a      	strh	r2, [r3, #0]
 8016b48:	f000 fbf4 	bl	8017334 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	7b1b      	ldrb	r3, [r3, #12]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d000      	beq.n	8016b56 <USB_EPStartXfer+0xa7a>
 8016b54:	e0a9      	b.n	8016caa <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	699a      	ldr	r2, [r3, #24]
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	691b      	ldr	r3, [r3, #16]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d918      	bls.n	8016b94 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8016b62:	683b      	ldr	r3, [r7, #0]
 8016b64:	691b      	ldr	r3, [r3, #16]
 8016b66:	1d7a      	adds	r2, r7, #5
 8016b68:	32ff      	adds	r2, #255	@ 0xff
 8016b6a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8016b6c:	683b      	ldr	r3, [r7, #0]
 8016b6e:	699a      	ldr	r2, [r3, #24]
 8016b70:	1d7b      	adds	r3, r7, #5
 8016b72:	33ff      	adds	r3, #255	@ 0xff
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	1ad2      	subs	r2, r2, r3
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	619a      	str	r2, [r3, #24]
 8016b7c:	e012      	b.n	8016ba4 <USB_EPStartXfer+0xac8>
 8016b7e:	46c0      	nop			@ (mov r8, r8)
 8016b80:	00000406 	.word	0x00000406
 8016b84:	ffff8000 	.word	0xffff8000
 8016b88:	00000402 	.word	0x00000402
 8016b8c:	ffff8fbf 	.word	0xffff8fbf
 8016b90:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	699b      	ldr	r3, [r3, #24]
 8016b98:	1d7a      	adds	r2, r7, #5
 8016b9a:	32ff      	adds	r2, #255	@ 0xff
 8016b9c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2190      	movs	r1, #144	@ 0x90
 8016ba8:	187a      	adds	r2, r7, r1
 8016baa:	6013      	str	r3, [r2, #0]
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2250      	movs	r2, #80	@ 0x50
 8016bb0:	5a9b      	ldrh	r3, [r3, r2]
 8016bb2:	b29b      	uxth	r3, r3
 8016bb4:	001a      	movs	r2, r3
 8016bb6:	187b      	adds	r3, r7, r1
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	189b      	adds	r3, r3, r2
 8016bbc:	187a      	adds	r2, r7, r1
 8016bbe:	6013      	str	r3, [r2, #0]
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	781b      	ldrb	r3, [r3, #0]
 8016bc4:	00da      	lsls	r2, r3, #3
 8016bc6:	187b      	adds	r3, r7, r1
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	18d3      	adds	r3, r2, r3
 8016bcc:	4acf      	ldr	r2, [pc, #828]	@ (8016f0c <USB_EPStartXfer+0xe30>)
 8016bce:	4694      	mov	ip, r2
 8016bd0:	4463      	add	r3, ip
 8016bd2:	218c      	movs	r1, #140	@ 0x8c
 8016bd4:	187a      	adds	r2, r7, r1
 8016bd6:	6013      	str	r3, [r2, #0]
 8016bd8:	187b      	adds	r3, r7, r1
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	881b      	ldrh	r3, [r3, #0]
 8016bde:	b29b      	uxth	r3, r3
 8016be0:	059b      	lsls	r3, r3, #22
 8016be2:	0d9b      	lsrs	r3, r3, #22
 8016be4:	b29a      	uxth	r2, r3
 8016be6:	187b      	adds	r3, r7, r1
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	801a      	strh	r2, [r3, #0]
 8016bec:	1d7b      	adds	r3, r7, #5
 8016bee:	33ff      	adds	r3, #255	@ 0xff
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	2b3e      	cmp	r3, #62	@ 0x3e
 8016bf4:	d925      	bls.n	8016c42 <USB_EPStartXfer+0xb66>
 8016bf6:	1d7b      	adds	r3, r7, #5
 8016bf8:	33ff      	adds	r3, #255	@ 0xff
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	095b      	lsrs	r3, r3, #5
 8016bfe:	21e8      	movs	r1, #232	@ 0xe8
 8016c00:	187a      	adds	r2, r7, r1
 8016c02:	6013      	str	r3, [r2, #0]
 8016c04:	1d7b      	adds	r3, r7, #5
 8016c06:	33ff      	adds	r3, #255	@ 0xff
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	221f      	movs	r2, #31
 8016c0c:	4013      	ands	r3, r2
 8016c0e:	d104      	bne.n	8016c1a <USB_EPStartXfer+0xb3e>
 8016c10:	187b      	adds	r3, r7, r1
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	3b01      	subs	r3, #1
 8016c16:	187a      	adds	r2, r7, r1
 8016c18:	6013      	str	r3, [r2, #0]
 8016c1a:	218c      	movs	r1, #140	@ 0x8c
 8016c1c:	187b      	adds	r3, r7, r1
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	881b      	ldrh	r3, [r3, #0]
 8016c22:	b29a      	uxth	r2, r3
 8016c24:	23e8      	movs	r3, #232	@ 0xe8
 8016c26:	18fb      	adds	r3, r7, r3
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	b29b      	uxth	r3, r3
 8016c2c:	029b      	lsls	r3, r3, #10
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	4313      	orrs	r3, r2
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	4ab6      	ldr	r2, [pc, #728]	@ (8016f10 <USB_EPStartXfer+0xe34>)
 8016c36:	4313      	orrs	r3, r2
 8016c38:	b29a      	uxth	r2, r3
 8016c3a:	187b      	adds	r3, r7, r1
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	801a      	strh	r2, [r3, #0]
 8016c40:	e353      	b.n	80172ea <USB_EPStartXfer+0x120e>
 8016c42:	1d7b      	adds	r3, r7, #5
 8016c44:	33ff      	adds	r3, #255	@ 0xff
 8016c46:	681b      	ldr	r3, [r3, #0]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d10b      	bne.n	8016c64 <USB_EPStartXfer+0xb88>
 8016c4c:	218c      	movs	r1, #140	@ 0x8c
 8016c4e:	187b      	adds	r3, r7, r1
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	881b      	ldrh	r3, [r3, #0]
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	4aae      	ldr	r2, [pc, #696]	@ (8016f10 <USB_EPStartXfer+0xe34>)
 8016c58:	4313      	orrs	r3, r2
 8016c5a:	b29a      	uxth	r2, r3
 8016c5c:	187b      	adds	r3, r7, r1
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	801a      	strh	r2, [r3, #0]
 8016c62:	e342      	b.n	80172ea <USB_EPStartXfer+0x120e>
 8016c64:	1d7b      	adds	r3, r7, #5
 8016c66:	33ff      	adds	r3, #255	@ 0xff
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	085b      	lsrs	r3, r3, #1
 8016c6c:	21e8      	movs	r1, #232	@ 0xe8
 8016c6e:	187a      	adds	r2, r7, r1
 8016c70:	6013      	str	r3, [r2, #0]
 8016c72:	1d7b      	adds	r3, r7, #5
 8016c74:	33ff      	adds	r3, #255	@ 0xff
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	2201      	movs	r2, #1
 8016c7a:	4013      	ands	r3, r2
 8016c7c:	d004      	beq.n	8016c88 <USB_EPStartXfer+0xbac>
 8016c7e:	187b      	adds	r3, r7, r1
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	3301      	adds	r3, #1
 8016c84:	187a      	adds	r2, r7, r1
 8016c86:	6013      	str	r3, [r2, #0]
 8016c88:	218c      	movs	r1, #140	@ 0x8c
 8016c8a:	187b      	adds	r3, r7, r1
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	881b      	ldrh	r3, [r3, #0]
 8016c90:	b29a      	uxth	r2, r3
 8016c92:	23e8      	movs	r3, #232	@ 0xe8
 8016c94:	18fb      	adds	r3, r7, r3
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	b29b      	uxth	r3, r3
 8016c9a:	029b      	lsls	r3, r3, #10
 8016c9c:	b29b      	uxth	r3, r3
 8016c9e:	4313      	orrs	r3, r2
 8016ca0:	b29a      	uxth	r2, r3
 8016ca2:	187b      	adds	r3, r7, r1
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	801a      	strh	r2, [r3, #0]
 8016ca8:	e31f      	b.n	80172ea <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	78db      	ldrb	r3, [r3, #3]
 8016cae:	2b02      	cmp	r3, #2
 8016cb0:	d000      	beq.n	8016cb4 <USB_EPStartXfer+0xbd8>
 8016cb2:	e191      	b.n	8016fd8 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8016cb4:	683b      	ldr	r3, [r7, #0]
 8016cb6:	785b      	ldrb	r3, [r3, #1]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d000      	beq.n	8016cbe <USB_EPStartXfer+0xbe2>
 8016cbc:	e07c      	b.n	8016db8 <USB_EPStartXfer+0xcdc>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	21ac      	movs	r1, #172	@ 0xac
 8016cc2:	187a      	adds	r2, r7, r1
 8016cc4:	6013      	str	r3, [r2, #0]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2250      	movs	r2, #80	@ 0x50
 8016cca:	5a9b      	ldrh	r3, [r3, r2]
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	001a      	movs	r2, r3
 8016cd0:	187b      	adds	r3, r7, r1
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	189b      	adds	r3, r3, r2
 8016cd6:	187a      	adds	r2, r7, r1
 8016cd8:	6013      	str	r3, [r2, #0]
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	781b      	ldrb	r3, [r3, #0]
 8016cde:	00da      	lsls	r2, r3, #3
 8016ce0:	187b      	adds	r3, r7, r1
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	18d3      	adds	r3, r2, r3
 8016ce6:	4a8b      	ldr	r2, [pc, #556]	@ (8016f14 <USB_EPStartXfer+0xe38>)
 8016ce8:	4694      	mov	ip, r2
 8016cea:	4463      	add	r3, ip
 8016cec:	21a8      	movs	r1, #168	@ 0xa8
 8016cee:	187a      	adds	r2, r7, r1
 8016cf0:	6013      	str	r3, [r2, #0]
 8016cf2:	187b      	adds	r3, r7, r1
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	881b      	ldrh	r3, [r3, #0]
 8016cf8:	b29b      	uxth	r3, r3
 8016cfa:	059b      	lsls	r3, r3, #22
 8016cfc:	0d9b      	lsrs	r3, r3, #22
 8016cfe:	b29a      	uxth	r2, r3
 8016d00:	187b      	adds	r3, r7, r1
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	801a      	strh	r2, [r3, #0]
 8016d06:	683b      	ldr	r3, [r7, #0]
 8016d08:	691b      	ldr	r3, [r3, #16]
 8016d0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8016d0c:	d923      	bls.n	8016d56 <USB_EPStartXfer+0xc7a>
 8016d0e:	683b      	ldr	r3, [r7, #0]
 8016d10:	691b      	ldr	r3, [r3, #16]
 8016d12:	095b      	lsrs	r3, r3, #5
 8016d14:	21e4      	movs	r1, #228	@ 0xe4
 8016d16:	187a      	adds	r2, r7, r1
 8016d18:	6013      	str	r3, [r2, #0]
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	691b      	ldr	r3, [r3, #16]
 8016d1e:	221f      	movs	r2, #31
 8016d20:	4013      	ands	r3, r2
 8016d22:	d104      	bne.n	8016d2e <USB_EPStartXfer+0xc52>
 8016d24:	187b      	adds	r3, r7, r1
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	3b01      	subs	r3, #1
 8016d2a:	187a      	adds	r2, r7, r1
 8016d2c:	6013      	str	r3, [r2, #0]
 8016d2e:	21a8      	movs	r1, #168	@ 0xa8
 8016d30:	187b      	adds	r3, r7, r1
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	b29a      	uxth	r2, r3
 8016d38:	23e4      	movs	r3, #228	@ 0xe4
 8016d3a:	18fb      	adds	r3, r7, r3
 8016d3c:	681b      	ldr	r3, [r3, #0]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	029b      	lsls	r3, r3, #10
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	4313      	orrs	r3, r2
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	4a71      	ldr	r2, [pc, #452]	@ (8016f10 <USB_EPStartXfer+0xe34>)
 8016d4a:	4313      	orrs	r3, r2
 8016d4c:	b29a      	uxth	r2, r3
 8016d4e:	187b      	adds	r3, r7, r1
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	801a      	strh	r2, [r3, #0]
 8016d54:	e054      	b.n	8016e00 <USB_EPStartXfer+0xd24>
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	691b      	ldr	r3, [r3, #16]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d10b      	bne.n	8016d76 <USB_EPStartXfer+0xc9a>
 8016d5e:	21a8      	movs	r1, #168	@ 0xa8
 8016d60:	187b      	adds	r3, r7, r1
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	881b      	ldrh	r3, [r3, #0]
 8016d66:	b29b      	uxth	r3, r3
 8016d68:	4a69      	ldr	r2, [pc, #420]	@ (8016f10 <USB_EPStartXfer+0xe34>)
 8016d6a:	4313      	orrs	r3, r2
 8016d6c:	b29a      	uxth	r2, r3
 8016d6e:	187b      	adds	r3, r7, r1
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	801a      	strh	r2, [r3, #0]
 8016d74:	e044      	b.n	8016e00 <USB_EPStartXfer+0xd24>
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	691b      	ldr	r3, [r3, #16]
 8016d7a:	085b      	lsrs	r3, r3, #1
 8016d7c:	21e4      	movs	r1, #228	@ 0xe4
 8016d7e:	187a      	adds	r2, r7, r1
 8016d80:	6013      	str	r3, [r2, #0]
 8016d82:	683b      	ldr	r3, [r7, #0]
 8016d84:	691b      	ldr	r3, [r3, #16]
 8016d86:	2201      	movs	r2, #1
 8016d88:	4013      	ands	r3, r2
 8016d8a:	d004      	beq.n	8016d96 <USB_EPStartXfer+0xcba>
 8016d8c:	187b      	adds	r3, r7, r1
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	3301      	adds	r3, #1
 8016d92:	187a      	adds	r2, r7, r1
 8016d94:	6013      	str	r3, [r2, #0]
 8016d96:	21a8      	movs	r1, #168	@ 0xa8
 8016d98:	187b      	adds	r3, r7, r1
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	b29a      	uxth	r2, r3
 8016da0:	23e4      	movs	r3, #228	@ 0xe4
 8016da2:	18fb      	adds	r3, r7, r3
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	b29b      	uxth	r3, r3
 8016da8:	029b      	lsls	r3, r3, #10
 8016daa:	b29b      	uxth	r3, r3
 8016dac:	4313      	orrs	r3, r2
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	187b      	adds	r3, r7, r1
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	801a      	strh	r2, [r3, #0]
 8016db6:	e023      	b.n	8016e00 <USB_EPStartXfer+0xd24>
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	785b      	ldrb	r3, [r3, #1]
 8016dbc:	2b01      	cmp	r3, #1
 8016dbe:	d11f      	bne.n	8016e00 <USB_EPStartXfer+0xd24>
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	21b4      	movs	r1, #180	@ 0xb4
 8016dc4:	187a      	adds	r2, r7, r1
 8016dc6:	6013      	str	r3, [r2, #0]
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2250      	movs	r2, #80	@ 0x50
 8016dcc:	5a9b      	ldrh	r3, [r3, r2]
 8016dce:	b29b      	uxth	r3, r3
 8016dd0:	001a      	movs	r2, r3
 8016dd2:	187b      	adds	r3, r7, r1
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	189b      	adds	r3, r3, r2
 8016dd8:	187a      	adds	r2, r7, r1
 8016dda:	6013      	str	r3, [r2, #0]
 8016ddc:	683b      	ldr	r3, [r7, #0]
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	00da      	lsls	r2, r3, #3
 8016de2:	187b      	adds	r3, r7, r1
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	18d3      	adds	r3, r2, r3
 8016de8:	4a4a      	ldr	r2, [pc, #296]	@ (8016f14 <USB_EPStartXfer+0xe38>)
 8016dea:	4694      	mov	ip, r2
 8016dec:	4463      	add	r3, ip
 8016dee:	21b0      	movs	r1, #176	@ 0xb0
 8016df0:	187a      	adds	r2, r7, r1
 8016df2:	6013      	str	r3, [r2, #0]
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	691b      	ldr	r3, [r3, #16]
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	187b      	adds	r3, r7, r1
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	801a      	strh	r2, [r3, #0]
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	22a4      	movs	r2, #164	@ 0xa4
 8016e04:	18ba      	adds	r2, r7, r2
 8016e06:	6013      	str	r3, [r2, #0]
 8016e08:	683b      	ldr	r3, [r7, #0]
 8016e0a:	785b      	ldrb	r3, [r3, #1]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d000      	beq.n	8016e12 <USB_EPStartXfer+0xd36>
 8016e10:	e082      	b.n	8016f18 <USB_EPStartXfer+0xe3c>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	219c      	movs	r1, #156	@ 0x9c
 8016e16:	187a      	adds	r2, r7, r1
 8016e18:	6013      	str	r3, [r2, #0]
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2250      	movs	r2, #80	@ 0x50
 8016e1e:	5a9b      	ldrh	r3, [r3, r2]
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	001a      	movs	r2, r3
 8016e24:	187b      	adds	r3, r7, r1
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	189b      	adds	r3, r3, r2
 8016e2a:	187a      	adds	r2, r7, r1
 8016e2c:	6013      	str	r3, [r2, #0]
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	00da      	lsls	r2, r3, #3
 8016e34:	187b      	adds	r3, r7, r1
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	18d3      	adds	r3, r2, r3
 8016e3a:	4a34      	ldr	r2, [pc, #208]	@ (8016f0c <USB_EPStartXfer+0xe30>)
 8016e3c:	4694      	mov	ip, r2
 8016e3e:	4463      	add	r3, ip
 8016e40:	2198      	movs	r1, #152	@ 0x98
 8016e42:	187a      	adds	r2, r7, r1
 8016e44:	6013      	str	r3, [r2, #0]
 8016e46:	187b      	adds	r3, r7, r1
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	881b      	ldrh	r3, [r3, #0]
 8016e4c:	b29b      	uxth	r3, r3
 8016e4e:	059b      	lsls	r3, r3, #22
 8016e50:	0d9b      	lsrs	r3, r3, #22
 8016e52:	b29a      	uxth	r2, r3
 8016e54:	187b      	adds	r3, r7, r1
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	801a      	strh	r2, [r3, #0]
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	691b      	ldr	r3, [r3, #16]
 8016e5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016e60:	d923      	bls.n	8016eaa <USB_EPStartXfer+0xdce>
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	691b      	ldr	r3, [r3, #16]
 8016e66:	095b      	lsrs	r3, r3, #5
 8016e68:	21e0      	movs	r1, #224	@ 0xe0
 8016e6a:	187a      	adds	r2, r7, r1
 8016e6c:	6013      	str	r3, [r2, #0]
 8016e6e:	683b      	ldr	r3, [r7, #0]
 8016e70:	691b      	ldr	r3, [r3, #16]
 8016e72:	221f      	movs	r2, #31
 8016e74:	4013      	ands	r3, r2
 8016e76:	d104      	bne.n	8016e82 <USB_EPStartXfer+0xda6>
 8016e78:	187b      	adds	r3, r7, r1
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	3b01      	subs	r3, #1
 8016e7e:	187a      	adds	r2, r7, r1
 8016e80:	6013      	str	r3, [r2, #0]
 8016e82:	2198      	movs	r1, #152	@ 0x98
 8016e84:	187b      	adds	r3, r7, r1
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	881b      	ldrh	r3, [r3, #0]
 8016e8a:	b29a      	uxth	r2, r3
 8016e8c:	23e0      	movs	r3, #224	@ 0xe0
 8016e8e:	18fb      	adds	r3, r7, r3
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	b29b      	uxth	r3, r3
 8016e94:	029b      	lsls	r3, r3, #10
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	4313      	orrs	r3, r2
 8016e9a:	b29b      	uxth	r3, r3
 8016e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8016f10 <USB_EPStartXfer+0xe34>)
 8016e9e:	4313      	orrs	r3, r2
 8016ea0:	b29a      	uxth	r2, r3
 8016ea2:	187b      	adds	r3, r7, r1
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	801a      	strh	r2, [r3, #0]
 8016ea8:	e057      	b.n	8016f5a <USB_EPStartXfer+0xe7e>
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	691b      	ldr	r3, [r3, #16]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d10b      	bne.n	8016eca <USB_EPStartXfer+0xdee>
 8016eb2:	2198      	movs	r1, #152	@ 0x98
 8016eb4:	187b      	adds	r3, r7, r1
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	881b      	ldrh	r3, [r3, #0]
 8016eba:	b29b      	uxth	r3, r3
 8016ebc:	4a14      	ldr	r2, [pc, #80]	@ (8016f10 <USB_EPStartXfer+0xe34>)
 8016ebe:	4313      	orrs	r3, r2
 8016ec0:	b29a      	uxth	r2, r3
 8016ec2:	187b      	adds	r3, r7, r1
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	801a      	strh	r2, [r3, #0]
 8016ec8:	e047      	b.n	8016f5a <USB_EPStartXfer+0xe7e>
 8016eca:	683b      	ldr	r3, [r7, #0]
 8016ecc:	691b      	ldr	r3, [r3, #16]
 8016ece:	085b      	lsrs	r3, r3, #1
 8016ed0:	21e0      	movs	r1, #224	@ 0xe0
 8016ed2:	187a      	adds	r2, r7, r1
 8016ed4:	6013      	str	r3, [r2, #0]
 8016ed6:	683b      	ldr	r3, [r7, #0]
 8016ed8:	691b      	ldr	r3, [r3, #16]
 8016eda:	2201      	movs	r2, #1
 8016edc:	4013      	ands	r3, r2
 8016ede:	d004      	beq.n	8016eea <USB_EPStartXfer+0xe0e>
 8016ee0:	187b      	adds	r3, r7, r1
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	3301      	adds	r3, #1
 8016ee6:	187a      	adds	r2, r7, r1
 8016ee8:	6013      	str	r3, [r2, #0]
 8016eea:	2198      	movs	r1, #152	@ 0x98
 8016eec:	187b      	adds	r3, r7, r1
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	881b      	ldrh	r3, [r3, #0]
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	23e0      	movs	r3, #224	@ 0xe0
 8016ef6:	18fb      	adds	r3, r7, r3
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	b29b      	uxth	r3, r3
 8016efc:	029b      	lsls	r3, r3, #10
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	4313      	orrs	r3, r2
 8016f02:	b29a      	uxth	r2, r3
 8016f04:	187b      	adds	r3, r7, r1
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	801a      	strh	r2, [r3, #0]
 8016f0a:	e026      	b.n	8016f5a <USB_EPStartXfer+0xe7e>
 8016f0c:	00000406 	.word	0x00000406
 8016f10:	ffff8000 	.word	0xffff8000
 8016f14:	00000402 	.word	0x00000402
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	785b      	ldrb	r3, [r3, #1]
 8016f1c:	2b01      	cmp	r3, #1
 8016f1e:	d11c      	bne.n	8016f5a <USB_EPStartXfer+0xe7e>
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	2250      	movs	r2, #80	@ 0x50
 8016f24:	5a9b      	ldrh	r3, [r3, r2]
 8016f26:	b29b      	uxth	r3, r3
 8016f28:	001a      	movs	r2, r3
 8016f2a:	21a4      	movs	r1, #164	@ 0xa4
 8016f2c:	187b      	adds	r3, r7, r1
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	189b      	adds	r3, r3, r2
 8016f32:	187a      	adds	r2, r7, r1
 8016f34:	6013      	str	r3, [r2, #0]
 8016f36:	683b      	ldr	r3, [r7, #0]
 8016f38:	781b      	ldrb	r3, [r3, #0]
 8016f3a:	00da      	lsls	r2, r3, #3
 8016f3c:	187b      	adds	r3, r7, r1
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	18d3      	adds	r3, r2, r3
 8016f42:	4ad2      	ldr	r2, [pc, #840]	@ (801728c <USB_EPStartXfer+0x11b0>)
 8016f44:	4694      	mov	ip, r2
 8016f46:	4463      	add	r3, ip
 8016f48:	21a0      	movs	r1, #160	@ 0xa0
 8016f4a:	187a      	adds	r2, r7, r1
 8016f4c:	6013      	str	r3, [r2, #0]
 8016f4e:	683b      	ldr	r3, [r7, #0]
 8016f50:	691b      	ldr	r3, [r3, #16]
 8016f52:	b29a      	uxth	r2, r3
 8016f54:	187b      	adds	r3, r7, r1
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8016f5a:	683b      	ldr	r3, [r7, #0]
 8016f5c:	69db      	ldr	r3, [r3, #28]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d100      	bne.n	8016f64 <USB_EPStartXfer+0xe88>
 8016f62:	e1c2      	b.n	80172ea <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8016f64:	687a      	ldr	r2, [r7, #4]
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	781b      	ldrb	r3, [r3, #0]
 8016f6a:	009b      	lsls	r3, r3, #2
 8016f6c:	18d2      	adds	r2, r2, r3
 8016f6e:	2196      	movs	r1, #150	@ 0x96
 8016f70:	187b      	adds	r3, r7, r1
 8016f72:	8812      	ldrh	r2, [r2, #0]
 8016f74:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016f76:	187b      	adds	r3, r7, r1
 8016f78:	881a      	ldrh	r2, [r3, #0]
 8016f7a:	2380      	movs	r3, #128	@ 0x80
 8016f7c:	01db      	lsls	r3, r3, #7
 8016f7e:	4013      	ands	r3, r2
 8016f80:	d004      	beq.n	8016f8c <USB_EPStartXfer+0xeb0>
 8016f82:	187b      	adds	r3, r7, r1
 8016f84:	881b      	ldrh	r3, [r3, #0]
 8016f86:	2240      	movs	r2, #64	@ 0x40
 8016f88:	4013      	ands	r3, r2
 8016f8a:	d10d      	bne.n	8016fa8 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016f8c:	2196      	movs	r1, #150	@ 0x96
 8016f8e:	187b      	adds	r3, r7, r1
 8016f90:	881a      	ldrh	r2, [r3, #0]
 8016f92:	2380      	movs	r3, #128	@ 0x80
 8016f94:	01db      	lsls	r3, r3, #7
 8016f96:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016f98:	d000      	beq.n	8016f9c <USB_EPStartXfer+0xec0>
 8016f9a:	e1a6      	b.n	80172ea <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016f9c:	187b      	adds	r3, r7, r1
 8016f9e:	881b      	ldrh	r3, [r3, #0]
 8016fa0:	2240      	movs	r2, #64	@ 0x40
 8016fa2:	4013      	ands	r3, r2
 8016fa4:	d000      	beq.n	8016fa8 <USB_EPStartXfer+0xecc>
 8016fa6:	e1a0      	b.n	80172ea <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	683b      	ldr	r3, [r7, #0]
 8016fac:	781b      	ldrb	r3, [r3, #0]
 8016fae:	009b      	lsls	r3, r3, #2
 8016fb0:	18d3      	adds	r3, r2, r3
 8016fb2:	881b      	ldrh	r3, [r3, #0]
 8016fb4:	b29a      	uxth	r2, r3
 8016fb6:	2094      	movs	r0, #148	@ 0x94
 8016fb8:	183b      	adds	r3, r7, r0
 8016fba:	49b5      	ldr	r1, [pc, #724]	@ (8017290 <USB_EPStartXfer+0x11b4>)
 8016fbc:	400a      	ands	r2, r1
 8016fbe:	801a      	strh	r2, [r3, #0]
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	781b      	ldrb	r3, [r3, #0]
 8016fc6:	009b      	lsls	r3, r3, #2
 8016fc8:	18d3      	adds	r3, r2, r3
 8016fca:	183a      	adds	r2, r7, r0
 8016fcc:	8812      	ldrh	r2, [r2, #0]
 8016fce:	49b1      	ldr	r1, [pc, #708]	@ (8017294 <USB_EPStartXfer+0x11b8>)
 8016fd0:	430a      	orrs	r2, r1
 8016fd2:	b292      	uxth	r2, r2
 8016fd4:	801a      	strh	r2, [r3, #0]
 8016fd6:	e188      	b.n	80172ea <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8016fd8:	683b      	ldr	r3, [r7, #0]
 8016fda:	78db      	ldrb	r3, [r3, #3]
 8016fdc:	2b01      	cmp	r3, #1
 8016fde:	d000      	beq.n	8016fe2 <USB_EPStartXfer+0xf06>
 8016fe0:	e181      	b.n	80172e6 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	699a      	ldr	r2, [r3, #24]
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	691b      	ldr	r3, [r3, #16]
 8016fea:	429a      	cmp	r2, r3
 8016fec:	d90d      	bls.n	801700a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	691b      	ldr	r3, [r3, #16]
 8016ff2:	1d7a      	adds	r2, r7, #5
 8016ff4:	32ff      	adds	r2, #255	@ 0xff
 8016ff6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	699a      	ldr	r2, [r3, #24]
 8016ffc:	1d7b      	adds	r3, r7, #5
 8016ffe:	33ff      	adds	r3, #255	@ 0xff
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	1ad2      	subs	r2, r2, r3
 8017004:	683b      	ldr	r3, [r7, #0]
 8017006:	619a      	str	r2, [r3, #24]
 8017008:	e007      	b.n	801701a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	699b      	ldr	r3, [r3, #24]
 801700e:	1d7a      	adds	r2, r7, #5
 8017010:	32ff      	adds	r2, #255	@ 0xff
 8017012:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	2200      	movs	r2, #0
 8017018:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801701a:	683b      	ldr	r3, [r7, #0]
 801701c:	785b      	ldrb	r3, [r3, #1]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d000      	beq.n	8017024 <USB_EPStartXfer+0xf48>
 8017022:	e082      	b.n	801712a <USB_EPStartXfer+0x104e>
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	21cc      	movs	r1, #204	@ 0xcc
 8017028:	187a      	adds	r2, r7, r1
 801702a:	6013      	str	r3, [r2, #0]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	2250      	movs	r2, #80	@ 0x50
 8017030:	5a9b      	ldrh	r3, [r3, r2]
 8017032:	b29b      	uxth	r3, r3
 8017034:	001a      	movs	r2, r3
 8017036:	187b      	adds	r3, r7, r1
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	189b      	adds	r3, r3, r2
 801703c:	187a      	adds	r2, r7, r1
 801703e:	6013      	str	r3, [r2, #0]
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	00da      	lsls	r2, r3, #3
 8017046:	187b      	adds	r3, r7, r1
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	18d3      	adds	r3, r2, r3
 801704c:	4a92      	ldr	r2, [pc, #584]	@ (8017298 <USB_EPStartXfer+0x11bc>)
 801704e:	4694      	mov	ip, r2
 8017050:	4463      	add	r3, ip
 8017052:	21c8      	movs	r1, #200	@ 0xc8
 8017054:	187a      	adds	r2, r7, r1
 8017056:	6013      	str	r3, [r2, #0]
 8017058:	187b      	adds	r3, r7, r1
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	881b      	ldrh	r3, [r3, #0]
 801705e:	b29b      	uxth	r3, r3
 8017060:	059b      	lsls	r3, r3, #22
 8017062:	0d9b      	lsrs	r3, r3, #22
 8017064:	b29a      	uxth	r2, r3
 8017066:	187b      	adds	r3, r7, r1
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	801a      	strh	r2, [r3, #0]
 801706c:	1d7b      	adds	r3, r7, #5
 801706e:	33ff      	adds	r3, #255	@ 0xff
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	2b3e      	cmp	r3, #62	@ 0x3e
 8017074:	d925      	bls.n	80170c2 <USB_EPStartXfer+0xfe6>
 8017076:	1d7b      	adds	r3, r7, #5
 8017078:	33ff      	adds	r3, #255	@ 0xff
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	095b      	lsrs	r3, r3, #5
 801707e:	21dc      	movs	r1, #220	@ 0xdc
 8017080:	187a      	adds	r2, r7, r1
 8017082:	6013      	str	r3, [r2, #0]
 8017084:	1d7b      	adds	r3, r7, #5
 8017086:	33ff      	adds	r3, #255	@ 0xff
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	221f      	movs	r2, #31
 801708c:	4013      	ands	r3, r2
 801708e:	d104      	bne.n	801709a <USB_EPStartXfer+0xfbe>
 8017090:	187b      	adds	r3, r7, r1
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	3b01      	subs	r3, #1
 8017096:	187a      	adds	r2, r7, r1
 8017098:	6013      	str	r3, [r2, #0]
 801709a:	21c8      	movs	r1, #200	@ 0xc8
 801709c:	187b      	adds	r3, r7, r1
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	881b      	ldrh	r3, [r3, #0]
 80170a2:	b29a      	uxth	r2, r3
 80170a4:	23dc      	movs	r3, #220	@ 0xdc
 80170a6:	18fb      	adds	r3, r7, r3
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	029b      	lsls	r3, r3, #10
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	4313      	orrs	r3, r2
 80170b2:	b29b      	uxth	r3, r3
 80170b4:	4a79      	ldr	r2, [pc, #484]	@ (801729c <USB_EPStartXfer+0x11c0>)
 80170b6:	4313      	orrs	r3, r2
 80170b8:	b29a      	uxth	r2, r3
 80170ba:	187b      	adds	r3, r7, r1
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	801a      	strh	r2, [r3, #0]
 80170c0:	e058      	b.n	8017174 <USB_EPStartXfer+0x1098>
 80170c2:	1d7b      	adds	r3, r7, #5
 80170c4:	33ff      	adds	r3, #255	@ 0xff
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d10b      	bne.n	80170e4 <USB_EPStartXfer+0x1008>
 80170cc:	21c8      	movs	r1, #200	@ 0xc8
 80170ce:	187b      	adds	r3, r7, r1
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	881b      	ldrh	r3, [r3, #0]
 80170d4:	b29b      	uxth	r3, r3
 80170d6:	4a71      	ldr	r2, [pc, #452]	@ (801729c <USB_EPStartXfer+0x11c0>)
 80170d8:	4313      	orrs	r3, r2
 80170da:	b29a      	uxth	r2, r3
 80170dc:	187b      	adds	r3, r7, r1
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	801a      	strh	r2, [r3, #0]
 80170e2:	e047      	b.n	8017174 <USB_EPStartXfer+0x1098>
 80170e4:	1d7b      	adds	r3, r7, #5
 80170e6:	33ff      	adds	r3, #255	@ 0xff
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	085b      	lsrs	r3, r3, #1
 80170ec:	21dc      	movs	r1, #220	@ 0xdc
 80170ee:	187a      	adds	r2, r7, r1
 80170f0:	6013      	str	r3, [r2, #0]
 80170f2:	1d7b      	adds	r3, r7, #5
 80170f4:	33ff      	adds	r3, #255	@ 0xff
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	2201      	movs	r2, #1
 80170fa:	4013      	ands	r3, r2
 80170fc:	d004      	beq.n	8017108 <USB_EPStartXfer+0x102c>
 80170fe:	187b      	adds	r3, r7, r1
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	3301      	adds	r3, #1
 8017104:	187a      	adds	r2, r7, r1
 8017106:	6013      	str	r3, [r2, #0]
 8017108:	21c8      	movs	r1, #200	@ 0xc8
 801710a:	187b      	adds	r3, r7, r1
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	881b      	ldrh	r3, [r3, #0]
 8017110:	b29a      	uxth	r2, r3
 8017112:	23dc      	movs	r3, #220	@ 0xdc
 8017114:	18fb      	adds	r3, r7, r3
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	b29b      	uxth	r3, r3
 801711a:	029b      	lsls	r3, r3, #10
 801711c:	b29b      	uxth	r3, r3
 801711e:	4313      	orrs	r3, r2
 8017120:	b29a      	uxth	r2, r3
 8017122:	187b      	adds	r3, r7, r1
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	801a      	strh	r2, [r3, #0]
 8017128:	e024      	b.n	8017174 <USB_EPStartXfer+0x1098>
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	785b      	ldrb	r3, [r3, #1]
 801712e:	2b01      	cmp	r3, #1
 8017130:	d120      	bne.n	8017174 <USB_EPStartXfer+0x1098>
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	21d4      	movs	r1, #212	@ 0xd4
 8017136:	187a      	adds	r2, r7, r1
 8017138:	6013      	str	r3, [r2, #0]
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	2250      	movs	r2, #80	@ 0x50
 801713e:	5a9b      	ldrh	r3, [r3, r2]
 8017140:	b29b      	uxth	r3, r3
 8017142:	001a      	movs	r2, r3
 8017144:	187b      	adds	r3, r7, r1
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	189b      	adds	r3, r3, r2
 801714a:	187a      	adds	r2, r7, r1
 801714c:	6013      	str	r3, [r2, #0]
 801714e:	683b      	ldr	r3, [r7, #0]
 8017150:	781b      	ldrb	r3, [r3, #0]
 8017152:	00da      	lsls	r2, r3, #3
 8017154:	187b      	adds	r3, r7, r1
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	18d3      	adds	r3, r2, r3
 801715a:	4a4f      	ldr	r2, [pc, #316]	@ (8017298 <USB_EPStartXfer+0x11bc>)
 801715c:	4694      	mov	ip, r2
 801715e:	4463      	add	r3, ip
 8017160:	21d0      	movs	r1, #208	@ 0xd0
 8017162:	187a      	adds	r2, r7, r1
 8017164:	6013      	str	r3, [r2, #0]
 8017166:	1d7b      	adds	r3, r7, #5
 8017168:	33ff      	adds	r3, #255	@ 0xff
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	b29a      	uxth	r2, r3
 801716e:	187b      	adds	r3, r7, r1
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	801a      	strh	r2, [r3, #0]
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	22c4      	movs	r2, #196	@ 0xc4
 8017178:	18ba      	adds	r2, r7, r2
 801717a:	6013      	str	r3, [r2, #0]
 801717c:	683b      	ldr	r3, [r7, #0]
 801717e:	785b      	ldrb	r3, [r3, #1]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d000      	beq.n	8017186 <USB_EPStartXfer+0x10aa>
 8017184:	e08c      	b.n	80172a0 <USB_EPStartXfer+0x11c4>
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	21bc      	movs	r1, #188	@ 0xbc
 801718a:	187a      	adds	r2, r7, r1
 801718c:	6013      	str	r3, [r2, #0]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	2250      	movs	r2, #80	@ 0x50
 8017192:	5a9b      	ldrh	r3, [r3, r2]
 8017194:	b29b      	uxth	r3, r3
 8017196:	001a      	movs	r2, r3
 8017198:	187b      	adds	r3, r7, r1
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	189b      	adds	r3, r3, r2
 801719e:	187a      	adds	r2, r7, r1
 80171a0:	6013      	str	r3, [r2, #0]
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	781b      	ldrb	r3, [r3, #0]
 80171a6:	00da      	lsls	r2, r3, #3
 80171a8:	187b      	adds	r3, r7, r1
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	18d3      	adds	r3, r2, r3
 80171ae:	4a37      	ldr	r2, [pc, #220]	@ (801728c <USB_EPStartXfer+0x11b0>)
 80171b0:	4694      	mov	ip, r2
 80171b2:	4463      	add	r3, ip
 80171b4:	21b8      	movs	r1, #184	@ 0xb8
 80171b6:	187a      	adds	r2, r7, r1
 80171b8:	6013      	str	r3, [r2, #0]
 80171ba:	187b      	adds	r3, r7, r1
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	881b      	ldrh	r3, [r3, #0]
 80171c0:	b29b      	uxth	r3, r3
 80171c2:	059b      	lsls	r3, r3, #22
 80171c4:	0d9b      	lsrs	r3, r3, #22
 80171c6:	b29a      	uxth	r2, r3
 80171c8:	187b      	adds	r3, r7, r1
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	801a      	strh	r2, [r3, #0]
 80171ce:	1d7b      	adds	r3, r7, #5
 80171d0:	33ff      	adds	r3, #255	@ 0xff
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80171d6:	d925      	bls.n	8017224 <USB_EPStartXfer+0x1148>
 80171d8:	1d7b      	adds	r3, r7, #5
 80171da:	33ff      	adds	r3, #255	@ 0xff
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	095b      	lsrs	r3, r3, #5
 80171e0:	21d8      	movs	r1, #216	@ 0xd8
 80171e2:	187a      	adds	r2, r7, r1
 80171e4:	6013      	str	r3, [r2, #0]
 80171e6:	1d7b      	adds	r3, r7, #5
 80171e8:	33ff      	adds	r3, #255	@ 0xff
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	221f      	movs	r2, #31
 80171ee:	4013      	ands	r3, r2
 80171f0:	d104      	bne.n	80171fc <USB_EPStartXfer+0x1120>
 80171f2:	187b      	adds	r3, r7, r1
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	3b01      	subs	r3, #1
 80171f8:	187a      	adds	r2, r7, r1
 80171fa:	6013      	str	r3, [r2, #0]
 80171fc:	21b8      	movs	r1, #184	@ 0xb8
 80171fe:	187b      	adds	r3, r7, r1
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	881b      	ldrh	r3, [r3, #0]
 8017204:	b29a      	uxth	r2, r3
 8017206:	23d8      	movs	r3, #216	@ 0xd8
 8017208:	18fb      	adds	r3, r7, r3
 801720a:	681b      	ldr	r3, [r3, #0]
 801720c:	b29b      	uxth	r3, r3
 801720e:	029b      	lsls	r3, r3, #10
 8017210:	b29b      	uxth	r3, r3
 8017212:	4313      	orrs	r3, r2
 8017214:	b29b      	uxth	r3, r3
 8017216:	4a21      	ldr	r2, [pc, #132]	@ (801729c <USB_EPStartXfer+0x11c0>)
 8017218:	4313      	orrs	r3, r2
 801721a:	b29a      	uxth	r2, r3
 801721c:	187b      	adds	r3, r7, r1
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	801a      	strh	r2, [r3, #0]
 8017222:	e062      	b.n	80172ea <USB_EPStartXfer+0x120e>
 8017224:	1d7b      	adds	r3, r7, #5
 8017226:	33ff      	adds	r3, #255	@ 0xff
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d10b      	bne.n	8017246 <USB_EPStartXfer+0x116a>
 801722e:	21b8      	movs	r1, #184	@ 0xb8
 8017230:	187b      	adds	r3, r7, r1
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	881b      	ldrh	r3, [r3, #0]
 8017236:	b29b      	uxth	r3, r3
 8017238:	4a18      	ldr	r2, [pc, #96]	@ (801729c <USB_EPStartXfer+0x11c0>)
 801723a:	4313      	orrs	r3, r2
 801723c:	b29a      	uxth	r2, r3
 801723e:	187b      	adds	r3, r7, r1
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	801a      	strh	r2, [r3, #0]
 8017244:	e051      	b.n	80172ea <USB_EPStartXfer+0x120e>
 8017246:	1d7b      	adds	r3, r7, #5
 8017248:	33ff      	adds	r3, #255	@ 0xff
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	085b      	lsrs	r3, r3, #1
 801724e:	21d8      	movs	r1, #216	@ 0xd8
 8017250:	187a      	adds	r2, r7, r1
 8017252:	6013      	str	r3, [r2, #0]
 8017254:	1d7b      	adds	r3, r7, #5
 8017256:	33ff      	adds	r3, #255	@ 0xff
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	2201      	movs	r2, #1
 801725c:	4013      	ands	r3, r2
 801725e:	d004      	beq.n	801726a <USB_EPStartXfer+0x118e>
 8017260:	187b      	adds	r3, r7, r1
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	3301      	adds	r3, #1
 8017266:	187a      	adds	r2, r7, r1
 8017268:	6013      	str	r3, [r2, #0]
 801726a:	21b8      	movs	r1, #184	@ 0xb8
 801726c:	187b      	adds	r3, r7, r1
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	881b      	ldrh	r3, [r3, #0]
 8017272:	b29a      	uxth	r2, r3
 8017274:	23d8      	movs	r3, #216	@ 0xd8
 8017276:	18fb      	adds	r3, r7, r3
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	b29b      	uxth	r3, r3
 801727c:	029b      	lsls	r3, r3, #10
 801727e:	b29b      	uxth	r3, r3
 8017280:	4313      	orrs	r3, r2
 8017282:	b29a      	uxth	r2, r3
 8017284:	187b      	adds	r3, r7, r1
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	801a      	strh	r2, [r3, #0]
 801728a:	e02e      	b.n	80172ea <USB_EPStartXfer+0x120e>
 801728c:	00000406 	.word	0x00000406
 8017290:	ffff8f8f 	.word	0xffff8f8f
 8017294:	ffff80c0 	.word	0xffff80c0
 8017298:	00000402 	.word	0x00000402
 801729c:	ffff8000 	.word	0xffff8000
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	785b      	ldrb	r3, [r3, #1]
 80172a4:	2b01      	cmp	r3, #1
 80172a6:	d120      	bne.n	80172ea <USB_EPStartXfer+0x120e>
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2250      	movs	r2, #80	@ 0x50
 80172ac:	5a9b      	ldrh	r3, [r3, r2]
 80172ae:	b29b      	uxth	r3, r3
 80172b0:	001a      	movs	r2, r3
 80172b2:	21c4      	movs	r1, #196	@ 0xc4
 80172b4:	187b      	adds	r3, r7, r1
 80172b6:	681b      	ldr	r3, [r3, #0]
 80172b8:	189b      	adds	r3, r3, r2
 80172ba:	187a      	adds	r2, r7, r1
 80172bc:	6013      	str	r3, [r2, #0]
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	00da      	lsls	r2, r3, #3
 80172c4:	187b      	adds	r3, r7, r1
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	18d3      	adds	r3, r2, r3
 80172ca:	4a1d      	ldr	r2, [pc, #116]	@ (8017340 <USB_EPStartXfer+0x1264>)
 80172cc:	4694      	mov	ip, r2
 80172ce:	4463      	add	r3, ip
 80172d0:	21c0      	movs	r1, #192	@ 0xc0
 80172d2:	187a      	adds	r2, r7, r1
 80172d4:	6013      	str	r3, [r2, #0]
 80172d6:	1d7b      	adds	r3, r7, #5
 80172d8:	33ff      	adds	r3, #255	@ 0xff
 80172da:	681b      	ldr	r3, [r3, #0]
 80172dc:	b29a      	uxth	r2, r3
 80172de:	187b      	adds	r3, r7, r1
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	801a      	strh	r2, [r3, #0]
 80172e4:	e001      	b.n	80172ea <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80172e6:	2301      	movs	r3, #1
 80172e8:	e025      	b.n	8017336 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80172ea:	687a      	ldr	r2, [r7, #4]
 80172ec:	683b      	ldr	r3, [r7, #0]
 80172ee:	781b      	ldrb	r3, [r3, #0]
 80172f0:	009b      	lsls	r3, r3, #2
 80172f2:	18d3      	adds	r3, r2, r3
 80172f4:	881b      	ldrh	r3, [r3, #0]
 80172f6:	b29a      	uxth	r2, r3
 80172f8:	208a      	movs	r0, #138	@ 0x8a
 80172fa:	183b      	adds	r3, r7, r0
 80172fc:	4911      	ldr	r1, [pc, #68]	@ (8017344 <USB_EPStartXfer+0x1268>)
 80172fe:	400a      	ands	r2, r1
 8017300:	801a      	strh	r2, [r3, #0]
 8017302:	183b      	adds	r3, r7, r0
 8017304:	183a      	adds	r2, r7, r0
 8017306:	8812      	ldrh	r2, [r2, #0]
 8017308:	2180      	movs	r1, #128	@ 0x80
 801730a:	0149      	lsls	r1, r1, #5
 801730c:	404a      	eors	r2, r1
 801730e:	801a      	strh	r2, [r3, #0]
 8017310:	183b      	adds	r3, r7, r0
 8017312:	183a      	adds	r2, r7, r0
 8017314:	8812      	ldrh	r2, [r2, #0]
 8017316:	2180      	movs	r1, #128	@ 0x80
 8017318:	0189      	lsls	r1, r1, #6
 801731a:	404a      	eors	r2, r1
 801731c:	801a      	strh	r2, [r3, #0]
 801731e:	687a      	ldr	r2, [r7, #4]
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	781b      	ldrb	r3, [r3, #0]
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	18d3      	adds	r3, r2, r3
 8017328:	183a      	adds	r2, r7, r0
 801732a:	8812      	ldrh	r2, [r2, #0]
 801732c:	4906      	ldr	r1, [pc, #24]	@ (8017348 <USB_EPStartXfer+0x126c>)
 801732e:	430a      	orrs	r2, r1
 8017330:	b292      	uxth	r2, r2
 8017332:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8017334:	2300      	movs	r3, #0
}
 8017336:	0018      	movs	r0, r3
 8017338:	46bd      	mov	sp, r7
 801733a:	b043      	add	sp, #268	@ 0x10c
 801733c:	bd90      	pop	{r4, r7, pc}
 801733e:	46c0      	nop			@ (mov r8, r8)
 8017340:	00000406 	.word	0x00000406
 8017344:	ffffbf8f 	.word	0xffffbf8f
 8017348:	ffff8080 	.word	0xffff8080

0801734c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	785b      	ldrb	r3, [r3, #1]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d01d      	beq.n	801739a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801735e:	687a      	ldr	r2, [r7, #4]
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	781b      	ldrb	r3, [r3, #0]
 8017364:	009b      	lsls	r3, r3, #2
 8017366:	18d3      	adds	r3, r2, r3
 8017368:	881b      	ldrh	r3, [r3, #0]
 801736a:	b29a      	uxth	r2, r3
 801736c:	200c      	movs	r0, #12
 801736e:	183b      	adds	r3, r7, r0
 8017370:	491b      	ldr	r1, [pc, #108]	@ (80173e0 <USB_EPSetStall+0x94>)
 8017372:	400a      	ands	r2, r1
 8017374:	801a      	strh	r2, [r3, #0]
 8017376:	183b      	adds	r3, r7, r0
 8017378:	183a      	adds	r2, r7, r0
 801737a:	8812      	ldrh	r2, [r2, #0]
 801737c:	2110      	movs	r1, #16
 801737e:	404a      	eors	r2, r1
 8017380:	801a      	strh	r2, [r3, #0]
 8017382:	687a      	ldr	r2, [r7, #4]
 8017384:	683b      	ldr	r3, [r7, #0]
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	009b      	lsls	r3, r3, #2
 801738a:	18d3      	adds	r3, r2, r3
 801738c:	183a      	adds	r2, r7, r0
 801738e:	8812      	ldrh	r2, [r2, #0]
 8017390:	4914      	ldr	r1, [pc, #80]	@ (80173e4 <USB_EPSetStall+0x98>)
 8017392:	430a      	orrs	r2, r1
 8017394:	b292      	uxth	r2, r2
 8017396:	801a      	strh	r2, [r3, #0]
 8017398:	e01d      	b.n	80173d6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801739a:	687a      	ldr	r2, [r7, #4]
 801739c:	683b      	ldr	r3, [r7, #0]
 801739e:	781b      	ldrb	r3, [r3, #0]
 80173a0:	009b      	lsls	r3, r3, #2
 80173a2:	18d3      	adds	r3, r2, r3
 80173a4:	881b      	ldrh	r3, [r3, #0]
 80173a6:	b29a      	uxth	r2, r3
 80173a8:	200e      	movs	r0, #14
 80173aa:	183b      	adds	r3, r7, r0
 80173ac:	490e      	ldr	r1, [pc, #56]	@ (80173e8 <USB_EPSetStall+0x9c>)
 80173ae:	400a      	ands	r2, r1
 80173b0:	801a      	strh	r2, [r3, #0]
 80173b2:	183b      	adds	r3, r7, r0
 80173b4:	183a      	adds	r2, r7, r0
 80173b6:	8812      	ldrh	r2, [r2, #0]
 80173b8:	2180      	movs	r1, #128	@ 0x80
 80173ba:	0149      	lsls	r1, r1, #5
 80173bc:	404a      	eors	r2, r1
 80173be:	801a      	strh	r2, [r3, #0]
 80173c0:	687a      	ldr	r2, [r7, #4]
 80173c2:	683b      	ldr	r3, [r7, #0]
 80173c4:	781b      	ldrb	r3, [r3, #0]
 80173c6:	009b      	lsls	r3, r3, #2
 80173c8:	18d3      	adds	r3, r2, r3
 80173ca:	183a      	adds	r2, r7, r0
 80173cc:	8812      	ldrh	r2, [r2, #0]
 80173ce:	4905      	ldr	r1, [pc, #20]	@ (80173e4 <USB_EPSetStall+0x98>)
 80173d0:	430a      	orrs	r2, r1
 80173d2:	b292      	uxth	r2, r2
 80173d4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80173d6:	2300      	movs	r3, #0
}
 80173d8:	0018      	movs	r0, r3
 80173da:	46bd      	mov	sp, r7
 80173dc:	b004      	add	sp, #16
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	ffff8fbf 	.word	0xffff8fbf
 80173e4:	ffff8080 	.word	0xffff8080
 80173e8:	ffffbf8f 	.word	0xffffbf8f

080173ec <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b086      	sub	sp, #24
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80173f6:	683b      	ldr	r3, [r7, #0]
 80173f8:	7b1b      	ldrb	r3, [r3, #12]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d000      	beq.n	8017400 <USB_EPClearStall+0x14>
 80173fe:	e095      	b.n	801752c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	785b      	ldrb	r3, [r3, #1]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d046      	beq.n	8017496 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017408:	687a      	ldr	r2, [r7, #4]
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	781b      	ldrb	r3, [r3, #0]
 801740e:	009b      	lsls	r3, r3, #2
 8017410:	18d2      	adds	r2, r2, r3
 8017412:	2110      	movs	r1, #16
 8017414:	187b      	adds	r3, r7, r1
 8017416:	8812      	ldrh	r2, [r2, #0]
 8017418:	801a      	strh	r2, [r3, #0]
 801741a:	187b      	adds	r3, r7, r1
 801741c:	881b      	ldrh	r3, [r3, #0]
 801741e:	2240      	movs	r2, #64	@ 0x40
 8017420:	4013      	ands	r3, r2
 8017422:	d016      	beq.n	8017452 <USB_EPClearStall+0x66>
 8017424:	687a      	ldr	r2, [r7, #4]
 8017426:	683b      	ldr	r3, [r7, #0]
 8017428:	781b      	ldrb	r3, [r3, #0]
 801742a:	009b      	lsls	r3, r3, #2
 801742c:	18d3      	adds	r3, r2, r3
 801742e:	881b      	ldrh	r3, [r3, #0]
 8017430:	b29a      	uxth	r2, r3
 8017432:	200e      	movs	r0, #14
 8017434:	183b      	adds	r3, r7, r0
 8017436:	4940      	ldr	r1, [pc, #256]	@ (8017538 <USB_EPClearStall+0x14c>)
 8017438:	400a      	ands	r2, r1
 801743a:	801a      	strh	r2, [r3, #0]
 801743c:	687a      	ldr	r2, [r7, #4]
 801743e:	683b      	ldr	r3, [r7, #0]
 8017440:	781b      	ldrb	r3, [r3, #0]
 8017442:	009b      	lsls	r3, r3, #2
 8017444:	18d3      	adds	r3, r2, r3
 8017446:	183a      	adds	r2, r7, r0
 8017448:	8812      	ldrh	r2, [r2, #0]
 801744a:	493c      	ldr	r1, [pc, #240]	@ (801753c <USB_EPClearStall+0x150>)
 801744c:	430a      	orrs	r2, r1
 801744e:	b292      	uxth	r2, r2
 8017450:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017452:	683b      	ldr	r3, [r7, #0]
 8017454:	78db      	ldrb	r3, [r3, #3]
 8017456:	2b01      	cmp	r3, #1
 8017458:	d068      	beq.n	801752c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801745a:	687a      	ldr	r2, [r7, #4]
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	781b      	ldrb	r3, [r3, #0]
 8017460:	009b      	lsls	r3, r3, #2
 8017462:	18d3      	adds	r3, r2, r3
 8017464:	881b      	ldrh	r3, [r3, #0]
 8017466:	b29a      	uxth	r2, r3
 8017468:	200c      	movs	r0, #12
 801746a:	183b      	adds	r3, r7, r0
 801746c:	4934      	ldr	r1, [pc, #208]	@ (8017540 <USB_EPClearStall+0x154>)
 801746e:	400a      	ands	r2, r1
 8017470:	801a      	strh	r2, [r3, #0]
 8017472:	183b      	adds	r3, r7, r0
 8017474:	183a      	adds	r2, r7, r0
 8017476:	8812      	ldrh	r2, [r2, #0]
 8017478:	2120      	movs	r1, #32
 801747a:	404a      	eors	r2, r1
 801747c:	801a      	strh	r2, [r3, #0]
 801747e:	687a      	ldr	r2, [r7, #4]
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	009b      	lsls	r3, r3, #2
 8017486:	18d3      	adds	r3, r2, r3
 8017488:	183a      	adds	r2, r7, r0
 801748a:	8812      	ldrh	r2, [r2, #0]
 801748c:	492d      	ldr	r1, [pc, #180]	@ (8017544 <USB_EPClearStall+0x158>)
 801748e:	430a      	orrs	r2, r1
 8017490:	b292      	uxth	r2, r2
 8017492:	801a      	strh	r2, [r3, #0]
 8017494:	e04a      	b.n	801752c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017496:	687a      	ldr	r2, [r7, #4]
 8017498:	683b      	ldr	r3, [r7, #0]
 801749a:	781b      	ldrb	r3, [r3, #0]
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	18d2      	adds	r2, r2, r3
 80174a0:	2116      	movs	r1, #22
 80174a2:	187b      	adds	r3, r7, r1
 80174a4:	8812      	ldrh	r2, [r2, #0]
 80174a6:	801a      	strh	r2, [r3, #0]
 80174a8:	187b      	adds	r3, r7, r1
 80174aa:	881a      	ldrh	r2, [r3, #0]
 80174ac:	2380      	movs	r3, #128	@ 0x80
 80174ae:	01db      	lsls	r3, r3, #7
 80174b0:	4013      	ands	r3, r2
 80174b2:	d016      	beq.n	80174e2 <USB_EPClearStall+0xf6>
 80174b4:	687a      	ldr	r2, [r7, #4]
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	009b      	lsls	r3, r3, #2
 80174bc:	18d3      	adds	r3, r2, r3
 80174be:	881b      	ldrh	r3, [r3, #0]
 80174c0:	b29a      	uxth	r2, r3
 80174c2:	2014      	movs	r0, #20
 80174c4:	183b      	adds	r3, r7, r0
 80174c6:	491c      	ldr	r1, [pc, #112]	@ (8017538 <USB_EPClearStall+0x14c>)
 80174c8:	400a      	ands	r2, r1
 80174ca:	801a      	strh	r2, [r3, #0]
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	683b      	ldr	r3, [r7, #0]
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	009b      	lsls	r3, r3, #2
 80174d4:	18d3      	adds	r3, r2, r3
 80174d6:	183a      	adds	r2, r7, r0
 80174d8:	8812      	ldrh	r2, [r2, #0]
 80174da:	491b      	ldr	r1, [pc, #108]	@ (8017548 <USB_EPClearStall+0x15c>)
 80174dc:	430a      	orrs	r2, r1
 80174de:	b292      	uxth	r2, r2
 80174e0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80174e2:	687a      	ldr	r2, [r7, #4]
 80174e4:	683b      	ldr	r3, [r7, #0]
 80174e6:	781b      	ldrb	r3, [r3, #0]
 80174e8:	009b      	lsls	r3, r3, #2
 80174ea:	18d3      	adds	r3, r2, r3
 80174ec:	881b      	ldrh	r3, [r3, #0]
 80174ee:	b29a      	uxth	r2, r3
 80174f0:	2012      	movs	r0, #18
 80174f2:	183b      	adds	r3, r7, r0
 80174f4:	4915      	ldr	r1, [pc, #84]	@ (801754c <USB_EPClearStall+0x160>)
 80174f6:	400a      	ands	r2, r1
 80174f8:	801a      	strh	r2, [r3, #0]
 80174fa:	183b      	adds	r3, r7, r0
 80174fc:	183a      	adds	r2, r7, r0
 80174fe:	8812      	ldrh	r2, [r2, #0]
 8017500:	2180      	movs	r1, #128	@ 0x80
 8017502:	0149      	lsls	r1, r1, #5
 8017504:	404a      	eors	r2, r1
 8017506:	801a      	strh	r2, [r3, #0]
 8017508:	183b      	adds	r3, r7, r0
 801750a:	183a      	adds	r2, r7, r0
 801750c:	8812      	ldrh	r2, [r2, #0]
 801750e:	2180      	movs	r1, #128	@ 0x80
 8017510:	0189      	lsls	r1, r1, #6
 8017512:	404a      	eors	r2, r1
 8017514:	801a      	strh	r2, [r3, #0]
 8017516:	687a      	ldr	r2, [r7, #4]
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	781b      	ldrb	r3, [r3, #0]
 801751c:	009b      	lsls	r3, r3, #2
 801751e:	18d3      	adds	r3, r2, r3
 8017520:	183a      	adds	r2, r7, r0
 8017522:	8812      	ldrh	r2, [r2, #0]
 8017524:	4907      	ldr	r1, [pc, #28]	@ (8017544 <USB_EPClearStall+0x158>)
 8017526:	430a      	orrs	r2, r1
 8017528:	b292      	uxth	r2, r2
 801752a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 801752c:	2300      	movs	r3, #0
}
 801752e:	0018      	movs	r0, r3
 8017530:	46bd      	mov	sp, r7
 8017532:	b006      	add	sp, #24
 8017534:	bd80      	pop	{r7, pc}
 8017536:	46c0      	nop			@ (mov r8, r8)
 8017538:	ffff8f8f 	.word	0xffff8f8f
 801753c:	ffff80c0 	.word	0xffff80c0
 8017540:	ffff8fbf 	.word	0xffff8fbf
 8017544:	ffff8080 	.word	0xffff8080
 8017548:	ffffc080 	.word	0xffffc080
 801754c:	ffffbf8f 	.word	0xffffbf8f

08017550 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8017550:	b580      	push	{r7, lr}
 8017552:	b082      	sub	sp, #8
 8017554:	af00      	add	r7, sp, #0
 8017556:	6078      	str	r0, [r7, #4]
 8017558:	000a      	movs	r2, r1
 801755a:	1cfb      	adds	r3, r7, #3
 801755c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801755e:	1cfb      	adds	r3, r7, #3
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	2b00      	cmp	r3, #0
 8017564:	d103      	bne.n	801756e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	224c      	movs	r2, #76	@ 0x4c
 801756a:	2180      	movs	r1, #128	@ 0x80
 801756c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801756e:	2300      	movs	r3, #0
}
 8017570:	0018      	movs	r0, r3
 8017572:	46bd      	mov	sp, r7
 8017574:	b002      	add	sp, #8
 8017576:	bd80      	pop	{r7, pc}

08017578 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b082      	sub	sp, #8
 801757c:	af00      	add	r7, sp, #0
 801757e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2258      	movs	r2, #88	@ 0x58
 8017584:	5a9b      	ldrh	r3, [r3, r2]
 8017586:	b29b      	uxth	r3, r3
 8017588:	4a05      	ldr	r2, [pc, #20]	@ (80175a0 <USB_DevConnect+0x28>)
 801758a:	4313      	orrs	r3, r2
 801758c:	b299      	uxth	r1, r3
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2258      	movs	r2, #88	@ 0x58
 8017592:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017594:	2300      	movs	r3, #0
}
 8017596:	0018      	movs	r0, r3
 8017598:	46bd      	mov	sp, r7
 801759a:	b002      	add	sp, #8
 801759c:	bd80      	pop	{r7, pc}
 801759e:	46c0      	nop			@ (mov r8, r8)
 80175a0:	ffff8000 	.word	0xffff8000

080175a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b084      	sub	sp, #16
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	2244      	movs	r2, #68	@ 0x44
 80175b0:	5a9b      	ldrh	r3, [r3, r2]
 80175b2:	b29b      	uxth	r3, r3
 80175b4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80175b6:	68fb      	ldr	r3, [r7, #12]
}
 80175b8:	0018      	movs	r0, r3
 80175ba:	46bd      	mov	sp, r7
 80175bc:	b004      	add	sp, #16
 80175be:	bd80      	pop	{r7, pc}

080175c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b08a      	sub	sp, #40	@ 0x28
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	60f8      	str	r0, [r7, #12]
 80175c8:	60b9      	str	r1, [r7, #8]
 80175ca:	0019      	movs	r1, r3
 80175cc:	1dbb      	adds	r3, r7, #6
 80175ce:	801a      	strh	r2, [r3, #0]
 80175d0:	1d3b      	adds	r3, r7, #4
 80175d2:	1c0a      	adds	r2, r1, #0
 80175d4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80175d6:	1d3b      	adds	r3, r7, #4
 80175d8:	881b      	ldrh	r3, [r3, #0]
 80175da:	3301      	adds	r3, #1
 80175dc:	085b      	lsrs	r3, r3, #1
 80175de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80175e8:	1dbb      	adds	r3, r7, #6
 80175ea:	881a      	ldrh	r2, [r3, #0]
 80175ec:	697b      	ldr	r3, [r7, #20]
 80175ee:	18d3      	adds	r3, r2, r3
 80175f0:	2280      	movs	r2, #128	@ 0x80
 80175f2:	00d2      	lsls	r2, r2, #3
 80175f4:	4694      	mov	ip, r2
 80175f6:	4463      	add	r3, ip
 80175f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80175fa:	69bb      	ldr	r3, [r7, #24]
 80175fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80175fe:	e020      	b.n	8017642 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	781a      	ldrb	r2, [r3, #0]
 8017604:	2112      	movs	r1, #18
 8017606:	187b      	adds	r3, r7, r1
 8017608:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801760a:	69fb      	ldr	r3, [r7, #28]
 801760c:	3301      	adds	r3, #1
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	021b      	lsls	r3, r3, #8
 8017612:	b21a      	sxth	r2, r3
 8017614:	187b      	adds	r3, r7, r1
 8017616:	2000      	movs	r0, #0
 8017618:	5e1b      	ldrsh	r3, [r3, r0]
 801761a:	4313      	orrs	r3, r2
 801761c:	b21a      	sxth	r2, r3
 801761e:	187b      	adds	r3, r7, r1
 8017620:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8017622:	6a3b      	ldr	r3, [r7, #32]
 8017624:	187a      	adds	r2, r7, r1
 8017626:	8812      	ldrh	r2, [r2, #0]
 8017628:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801762a:	6a3b      	ldr	r3, [r7, #32]
 801762c:	3302      	adds	r3, #2
 801762e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	3301      	adds	r3, #1
 8017634:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8017636:	69fb      	ldr	r3, [r7, #28]
 8017638:	3301      	adds	r3, #1
 801763a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801763e:	3b01      	subs	r3, #1
 8017640:	627b      	str	r3, [r7, #36]	@ 0x24
 8017642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017644:	2b00      	cmp	r3, #0
 8017646:	d1db      	bne.n	8017600 <USB_WritePMA+0x40>
  }
}
 8017648:	46c0      	nop			@ (mov r8, r8)
 801764a:	46c0      	nop			@ (mov r8, r8)
 801764c:	46bd      	mov	sp, r7
 801764e:	b00a      	add	sp, #40	@ 0x28
 8017650:	bd80      	pop	{r7, pc}

08017652 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8017652:	b580      	push	{r7, lr}
 8017654:	b08a      	sub	sp, #40	@ 0x28
 8017656:	af00      	add	r7, sp, #0
 8017658:	60f8      	str	r0, [r7, #12]
 801765a:	60b9      	str	r1, [r7, #8]
 801765c:	0019      	movs	r1, r3
 801765e:	1dbb      	adds	r3, r7, #6
 8017660:	801a      	strh	r2, [r3, #0]
 8017662:	1d3b      	adds	r3, r7, #4
 8017664:	1c0a      	adds	r2, r1, #0
 8017666:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8017668:	1d3b      	adds	r3, r7, #4
 801766a:	881b      	ldrh	r3, [r3, #0]
 801766c:	085b      	lsrs	r3, r3, #1
 801766e:	b29b      	uxth	r3, r3
 8017670:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8017676:	68bb      	ldr	r3, [r7, #8]
 8017678:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801767a:	1dbb      	adds	r3, r7, #6
 801767c:	881a      	ldrh	r2, [r3, #0]
 801767e:	697b      	ldr	r3, [r7, #20]
 8017680:	18d3      	adds	r3, r2, r3
 8017682:	2280      	movs	r2, #128	@ 0x80
 8017684:	00d2      	lsls	r2, r2, #3
 8017686:	4694      	mov	ip, r2
 8017688:	4463      	add	r3, ip
 801768a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801768c:	69bb      	ldr	r3, [r7, #24]
 801768e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017690:	e018      	b.n	80176c4 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8017692:	6a3b      	ldr	r3, [r7, #32]
 8017694:	881b      	ldrh	r3, [r3, #0]
 8017696:	b29b      	uxth	r3, r3
 8017698:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801769a:	6a3b      	ldr	r3, [r7, #32]
 801769c:	3302      	adds	r3, #2
 801769e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80176a0:	693b      	ldr	r3, [r7, #16]
 80176a2:	b2da      	uxtb	r2, r3
 80176a4:	69fb      	ldr	r3, [r7, #28]
 80176a6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80176a8:	69fb      	ldr	r3, [r7, #28]
 80176aa:	3301      	adds	r3, #1
 80176ac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80176ae:	693b      	ldr	r3, [r7, #16]
 80176b0:	0a1b      	lsrs	r3, r3, #8
 80176b2:	b2da      	uxtb	r2, r3
 80176b4:	69fb      	ldr	r3, [r7, #28]
 80176b6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80176b8:	69fb      	ldr	r3, [r7, #28]
 80176ba:	3301      	adds	r3, #1
 80176bc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80176be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176c0:	3b01      	subs	r3, #1
 80176c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80176c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d1e3      	bne.n	8017692 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80176ca:	1d3b      	adds	r3, r7, #4
 80176cc:	881b      	ldrh	r3, [r3, #0]
 80176ce:	2201      	movs	r2, #1
 80176d0:	4013      	ands	r3, r2
 80176d2:	b29b      	uxth	r3, r3
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d007      	beq.n	80176e8 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80176d8:	6a3b      	ldr	r3, [r7, #32]
 80176da:	881b      	ldrh	r3, [r3, #0]
 80176dc:	b29b      	uxth	r3, r3
 80176de:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80176e0:	693b      	ldr	r3, [r7, #16]
 80176e2:	b2da      	uxtb	r2, r3
 80176e4:	69fb      	ldr	r3, [r7, #28]
 80176e6:	701a      	strb	r2, [r3, #0]
  }
}
 80176e8:	46c0      	nop			@ (mov r8, r8)
 80176ea:	46bd      	mov	sp, r7
 80176ec:	b00a      	add	sp, #40	@ 0x28
 80176ee:	bd80      	pop	{r7, pc}

080176f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	000a      	movs	r2, r1
 80176fa:	1cfb      	adds	r3, r7, #3
 80176fc:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80176fe:	230f      	movs	r3, #15
 8017700:	18fb      	adds	r3, r7, r3
 8017702:	2200      	movs	r2, #0
 8017704:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	7c1b      	ldrb	r3, [r3, #16]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d116      	bne.n	801773c <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801770e:	2380      	movs	r3, #128	@ 0x80
 8017710:	009b      	lsls	r3, r3, #2
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	2202      	movs	r2, #2
 8017716:	2181      	movs	r1, #129	@ 0x81
 8017718:	f002 f8eb 	bl	80198f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2201      	movs	r2, #1
 8017720:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017722:	2380      	movs	r3, #128	@ 0x80
 8017724:	009b      	lsls	r3, r3, #2
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	2202      	movs	r2, #2
 801772a:	2101      	movs	r1, #1
 801772c:	f002 f8e1 	bl	80198f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8017730:	687a      	ldr	r2, [r7, #4]
 8017732:	23b6      	movs	r3, #182	@ 0xb6
 8017734:	005b      	lsls	r3, r3, #1
 8017736:	2101      	movs	r1, #1
 8017738:	50d1      	str	r1, [r2, r3]
 801773a:	e013      	b.n	8017764 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	2340      	movs	r3, #64	@ 0x40
 8017740:	2202      	movs	r2, #2
 8017742:	2181      	movs	r1, #129	@ 0x81
 8017744:	f002 f8d5 	bl	80198f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	2201      	movs	r2, #1
 801774c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801774e:	6878      	ldr	r0, [r7, #4]
 8017750:	2340      	movs	r3, #64	@ 0x40
 8017752:	2202      	movs	r2, #2
 8017754:	2101      	movs	r1, #1
 8017756:	f002 f8cc 	bl	80198f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801775a:	687a      	ldr	r2, [r7, #4]
 801775c:	23b6      	movs	r3, #182	@ 0xb6
 801775e:	005b      	lsls	r3, r3, #1
 8017760:	2101      	movs	r1, #1
 8017762:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	2308      	movs	r3, #8
 8017768:	2203      	movs	r2, #3
 801776a:	2182      	movs	r1, #130	@ 0x82
 801776c:	f002 f8c1 	bl	80198f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	2201      	movs	r2, #1
 8017774:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017776:	2387      	movs	r3, #135	@ 0x87
 8017778:	009b      	lsls	r3, r3, #2
 801777a:	0018      	movs	r0, r3
 801777c:	f002 fa52 	bl	8019c24 <USBD_static_malloc>
 8017780:	0001      	movs	r1, r0
 8017782:	687a      	ldr	r2, [r7, #4]
 8017784:	23ae      	movs	r3, #174	@ 0xae
 8017786:	009b      	lsls	r3, r3, #2
 8017788:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801778a:	687a      	ldr	r2, [r7, #4]
 801778c:	23ae      	movs	r3, #174	@ 0xae
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	58d3      	ldr	r3, [r2, r3]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d104      	bne.n	80177a0 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8017796:	230f      	movs	r3, #15
 8017798:	18fb      	adds	r3, r7, r3
 801779a:	2201      	movs	r2, #1
 801779c:	701a      	strb	r2, [r3, #0]
 801779e:	e02c      	b.n	80177fa <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80177a0:	687a      	ldr	r2, [r7, #4]
 80177a2:	23ae      	movs	r3, #174	@ 0xae
 80177a4:	009b      	lsls	r3, r3, #2
 80177a6:	58d3      	ldr	r3, [r2, r3]
 80177a8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80177aa:	687a      	ldr	r2, [r7, #4]
 80177ac:	23af      	movs	r3, #175	@ 0xaf
 80177ae:	009b      	lsls	r3, r3, #2
 80177b0:	58d3      	ldr	r3, [r2, r3]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80177b6:	68ba      	ldr	r2, [r7, #8]
 80177b8:	2385      	movs	r3, #133	@ 0x85
 80177ba:	009b      	lsls	r3, r3, #2
 80177bc:	2100      	movs	r1, #0
 80177be:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 80177c0:	68ba      	ldr	r2, [r7, #8]
 80177c2:	2386      	movs	r3, #134	@ 0x86
 80177c4:	009b      	lsls	r3, r3, #2
 80177c6:	2100      	movs	r1, #0
 80177c8:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	7c1b      	ldrb	r3, [r3, #16]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d10a      	bne.n	80177e8 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80177d2:	68ba      	ldr	r2, [r7, #8]
 80177d4:	2381      	movs	r3, #129	@ 0x81
 80177d6:	009b      	lsls	r3, r3, #2
 80177d8:	58d2      	ldr	r2, [r2, r3]
 80177da:	2380      	movs	r3, #128	@ 0x80
 80177dc:	009b      	lsls	r3, r3, #2
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	2101      	movs	r1, #1
 80177e2:	f002 f9d1 	bl	8019b88 <USBD_LL_PrepareReceive>
 80177e6:	e008      	b.n	80177fa <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80177e8:	68ba      	ldr	r2, [r7, #8]
 80177ea:	2381      	movs	r3, #129	@ 0x81
 80177ec:	009b      	lsls	r3, r3, #2
 80177ee:	58d2      	ldr	r2, [r2, r3]
 80177f0:	6878      	ldr	r0, [r7, #4]
 80177f2:	2340      	movs	r3, #64	@ 0x40
 80177f4:	2101      	movs	r1, #1
 80177f6:	f002 f9c7 	bl	8019b88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80177fa:	230f      	movs	r3, #15
 80177fc:	18fb      	adds	r3, r7, r3
 80177fe:	781b      	ldrb	r3, [r3, #0]
}
 8017800:	0018      	movs	r0, r3
 8017802:	46bd      	mov	sp, r7
 8017804:	b004      	add	sp, #16
 8017806:	bd80      	pop	{r7, pc}

08017808 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017808:	b580      	push	{r7, lr}
 801780a:	b084      	sub	sp, #16
 801780c:	af00      	add	r7, sp, #0
 801780e:	6078      	str	r0, [r7, #4]
 8017810:	000a      	movs	r2, r1
 8017812:	1cfb      	adds	r3, r7, #3
 8017814:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8017816:	230f      	movs	r3, #15
 8017818:	18fb      	adds	r3, r7, r3
 801781a:	2200      	movs	r2, #0
 801781c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2181      	movs	r1, #129	@ 0x81
 8017822:	0018      	movs	r0, r3
 8017824:	f002 f89c 	bl	8019960 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	2200      	movs	r2, #0
 801782c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	2101      	movs	r1, #1
 8017832:	0018      	movs	r0, r3
 8017834:	f002 f894 	bl	8019960 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8017838:	687a      	ldr	r2, [r7, #4]
 801783a:	23b6      	movs	r3, #182	@ 0xb6
 801783c:	005b      	lsls	r3, r3, #1
 801783e:	2100      	movs	r1, #0
 8017840:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	2182      	movs	r1, #130	@ 0x82
 8017846:	0018      	movs	r0, r3
 8017848:	f002 f88a 	bl	8019960 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	2200      	movs	r2, #0
 8017850:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8017852:	687a      	ldr	r2, [r7, #4]
 8017854:	23ae      	movs	r3, #174	@ 0xae
 8017856:	009b      	lsls	r3, r3, #2
 8017858:	58d3      	ldr	r3, [r2, r3]
 801785a:	2b00      	cmp	r3, #0
 801785c:	d011      	beq.n	8017882 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801785e:	687a      	ldr	r2, [r7, #4]
 8017860:	23af      	movs	r3, #175	@ 0xaf
 8017862:	009b      	lsls	r3, r3, #2
 8017864:	58d3      	ldr	r3, [r2, r3]
 8017866:	685b      	ldr	r3, [r3, #4]
 8017868:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	23ae      	movs	r3, #174	@ 0xae
 801786e:	009b      	lsls	r3, r3, #2
 8017870:	58d3      	ldr	r3, [r2, r3]
 8017872:	0018      	movs	r0, r3
 8017874:	f002 f9e2 	bl	8019c3c <USBD_static_free>
    pdev->pClassData = NULL;
 8017878:	687a      	ldr	r2, [r7, #4]
 801787a:	23ae      	movs	r3, #174	@ 0xae
 801787c:	009b      	lsls	r3, r3, #2
 801787e:	2100      	movs	r1, #0
 8017880:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8017882:	230f      	movs	r3, #15
 8017884:	18fb      	adds	r3, r7, r3
 8017886:	781b      	ldrb	r3, [r3, #0]
}
 8017888:	0018      	movs	r0, r3
 801788a:	46bd      	mov	sp, r7
 801788c:	b004      	add	sp, #16
 801788e:	bd80      	pop	{r7, pc}

08017890 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b086      	sub	sp, #24
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
 8017898:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801789a:	687a      	ldr	r2, [r7, #4]
 801789c:	23ae      	movs	r3, #174	@ 0xae
 801789e:	009b      	lsls	r3, r3, #2
 80178a0:	58d3      	ldr	r3, [r2, r3]
 80178a2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80178a4:	230f      	movs	r3, #15
 80178a6:	18fb      	adds	r3, r7, r3
 80178a8:	2200      	movs	r2, #0
 80178aa:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80178ac:	230c      	movs	r3, #12
 80178ae:	18fb      	adds	r3, r7, r3
 80178b0:	2200      	movs	r2, #0
 80178b2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80178b4:	2317      	movs	r3, #23
 80178b6:	18fb      	adds	r3, r7, r3
 80178b8:	2200      	movs	r2, #0
 80178ba:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	781b      	ldrb	r3, [r3, #0]
 80178c0:	001a      	movs	r2, r3
 80178c2:	2360      	movs	r3, #96	@ 0x60
 80178c4:	4013      	ands	r3, r2
 80178c6:	d03d      	beq.n	8017944 <USBD_CDC_Setup+0xb4>
 80178c8:	2b20      	cmp	r3, #32
 80178ca:	d000      	beq.n	80178ce <USBD_CDC_Setup+0x3e>
 80178cc:	e094      	b.n	80179f8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	88db      	ldrh	r3, [r3, #6]
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d02b      	beq.n	801792e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80178d6:	683b      	ldr	r3, [r7, #0]
 80178d8:	781b      	ldrb	r3, [r3, #0]
 80178da:	b25b      	sxtb	r3, r3
 80178dc:	2b00      	cmp	r3, #0
 80178de:	da12      	bge.n	8017906 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80178e0:	687a      	ldr	r2, [r7, #4]
 80178e2:	23af      	movs	r3, #175	@ 0xaf
 80178e4:	009b      	lsls	r3, r3, #2
 80178e6:	58d3      	ldr	r3, [r2, r3]
 80178e8:	689b      	ldr	r3, [r3, #8]
 80178ea:	683a      	ldr	r2, [r7, #0]
 80178ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80178ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80178f0:	683a      	ldr	r2, [r7, #0]
 80178f2:	88d2      	ldrh	r2, [r2, #6]
 80178f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80178f6:	6939      	ldr	r1, [r7, #16]
 80178f8:	683b      	ldr	r3, [r7, #0]
 80178fa:	88da      	ldrh	r2, [r3, #6]
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	0018      	movs	r0, r3
 8017900:	f001 fbaf 	bl	8019062 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8017904:	e083      	b.n	8017a0e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8017906:	683b      	ldr	r3, [r7, #0]
 8017908:	7859      	ldrb	r1, [r3, #1]
 801790a:	693a      	ldr	r2, [r7, #16]
 801790c:	2380      	movs	r3, #128	@ 0x80
 801790e:	009b      	lsls	r3, r3, #2
 8017910:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8017912:	683b      	ldr	r3, [r7, #0]
 8017914:	88db      	ldrh	r3, [r3, #6]
 8017916:	b2d9      	uxtb	r1, r3
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	4a40      	ldr	r2, [pc, #256]	@ (8017a1c <USBD_CDC_Setup+0x18c>)
 801791c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801791e:	6939      	ldr	r1, [r7, #16]
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	88da      	ldrh	r2, [r3, #6]
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	0018      	movs	r0, r3
 8017928:	f001 fbce 	bl	80190c8 <USBD_CtlPrepareRx>
      break;
 801792c:	e06f      	b.n	8017a0e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801792e:	687a      	ldr	r2, [r7, #4]
 8017930:	23af      	movs	r3, #175	@ 0xaf
 8017932:	009b      	lsls	r3, r3, #2
 8017934:	58d3      	ldr	r3, [r2, r3]
 8017936:	689b      	ldr	r3, [r3, #8]
 8017938:	683a      	ldr	r2, [r7, #0]
 801793a:	7850      	ldrb	r0, [r2, #1]
 801793c:	6839      	ldr	r1, [r7, #0]
 801793e:	2200      	movs	r2, #0
 8017940:	4798      	blx	r3
      break;
 8017942:	e064      	b.n	8017a0e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	785b      	ldrb	r3, [r3, #1]
 8017948:	2b0b      	cmp	r3, #11
 801794a:	d037      	beq.n	80179bc <USBD_CDC_Setup+0x12c>
 801794c:	dc47      	bgt.n	80179de <USBD_CDC_Setup+0x14e>
 801794e:	2b00      	cmp	r3, #0
 8017950:	d002      	beq.n	8017958 <USBD_CDC_Setup+0xc8>
 8017952:	2b0a      	cmp	r3, #10
 8017954:	d019      	beq.n	801798a <USBD_CDC_Setup+0xfa>
 8017956:	e042      	b.n	80179de <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017958:	687a      	ldr	r2, [r7, #4]
 801795a:	23a7      	movs	r3, #167	@ 0xa7
 801795c:	009b      	lsls	r3, r3, #2
 801795e:	5cd3      	ldrb	r3, [r2, r3]
 8017960:	2b03      	cmp	r3, #3
 8017962:	d107      	bne.n	8017974 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8017964:	230c      	movs	r3, #12
 8017966:	18f9      	adds	r1, r7, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	2202      	movs	r2, #2
 801796c:	0018      	movs	r0, r3
 801796e:	f001 fb78 	bl	8019062 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017972:	e040      	b.n	80179f6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8017974:	683a      	ldr	r2, [r7, #0]
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	0011      	movs	r1, r2
 801797a:	0018      	movs	r0, r3
 801797c:	f001 faf3 	bl	8018f66 <USBD_CtlError>
            ret = USBD_FAIL;
 8017980:	2317      	movs	r3, #23
 8017982:	18fb      	adds	r3, r7, r3
 8017984:	2202      	movs	r2, #2
 8017986:	701a      	strb	r2, [r3, #0]
          break;
 8017988:	e035      	b.n	80179f6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801798a:	687a      	ldr	r2, [r7, #4]
 801798c:	23a7      	movs	r3, #167	@ 0xa7
 801798e:	009b      	lsls	r3, r3, #2
 8017990:	5cd3      	ldrb	r3, [r2, r3]
 8017992:	2b03      	cmp	r3, #3
 8017994:	d107      	bne.n	80179a6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8017996:	230f      	movs	r3, #15
 8017998:	18f9      	adds	r1, r7, r3
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	2201      	movs	r2, #1
 801799e:	0018      	movs	r0, r3
 80179a0:	f001 fb5f 	bl	8019062 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80179a4:	e027      	b.n	80179f6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80179a6:	683a      	ldr	r2, [r7, #0]
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	0011      	movs	r1, r2
 80179ac:	0018      	movs	r0, r3
 80179ae:	f001 fada 	bl	8018f66 <USBD_CtlError>
            ret = USBD_FAIL;
 80179b2:	2317      	movs	r3, #23
 80179b4:	18fb      	adds	r3, r7, r3
 80179b6:	2202      	movs	r2, #2
 80179b8:	701a      	strb	r2, [r3, #0]
          break;
 80179ba:	e01c      	b.n	80179f6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80179bc:	687a      	ldr	r2, [r7, #4]
 80179be:	23a7      	movs	r3, #167	@ 0xa7
 80179c0:	009b      	lsls	r3, r3, #2
 80179c2:	5cd3      	ldrb	r3, [r2, r3]
 80179c4:	2b03      	cmp	r3, #3
 80179c6:	d015      	beq.n	80179f4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 80179c8:	683a      	ldr	r2, [r7, #0]
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	0011      	movs	r1, r2
 80179ce:	0018      	movs	r0, r3
 80179d0:	f001 fac9 	bl	8018f66 <USBD_CtlError>
            ret = USBD_FAIL;
 80179d4:	2317      	movs	r3, #23
 80179d6:	18fb      	adds	r3, r7, r3
 80179d8:	2202      	movs	r2, #2
 80179da:	701a      	strb	r2, [r3, #0]
          }
          break;
 80179dc:	e00a      	b.n	80179f4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80179de:	683a      	ldr	r2, [r7, #0]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	0011      	movs	r1, r2
 80179e4:	0018      	movs	r0, r3
 80179e6:	f001 fabe 	bl	8018f66 <USBD_CtlError>
          ret = USBD_FAIL;
 80179ea:	2317      	movs	r3, #23
 80179ec:	18fb      	adds	r3, r7, r3
 80179ee:	2202      	movs	r2, #2
 80179f0:	701a      	strb	r2, [r3, #0]
          break;
 80179f2:	e000      	b.n	80179f6 <USBD_CDC_Setup+0x166>
          break;
 80179f4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80179f6:	e00a      	b.n	8017a0e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80179f8:	683a      	ldr	r2, [r7, #0]
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	0011      	movs	r1, r2
 80179fe:	0018      	movs	r0, r3
 8017a00:	f001 fab1 	bl	8018f66 <USBD_CtlError>
      ret = USBD_FAIL;
 8017a04:	2317      	movs	r3, #23
 8017a06:	18fb      	adds	r3, r7, r3
 8017a08:	2202      	movs	r2, #2
 8017a0a:	701a      	strb	r2, [r3, #0]
      break;
 8017a0c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8017a0e:	2317      	movs	r3, #23
 8017a10:	18fb      	adds	r3, r7, r3
 8017a12:	781b      	ldrb	r3, [r3, #0]
}
 8017a14:	0018      	movs	r0, r3
 8017a16:	46bd      	mov	sp, r7
 8017a18:	b006      	add	sp, #24
 8017a1a:	bd80      	pop	{r7, pc}
 8017a1c:	00000201 	.word	0x00000201

08017a20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b084      	sub	sp, #16
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	000a      	movs	r2, r1
 8017a2a:	1cfb      	adds	r3, r7, #3
 8017a2c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017a2e:	687a      	ldr	r2, [r7, #4]
 8017a30:	23ae      	movs	r3, #174	@ 0xae
 8017a32:	009b      	lsls	r3, r3, #2
 8017a34:	58d3      	ldr	r3, [r2, r3]
 8017a36:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8017a38:	687a      	ldr	r2, [r7, #4]
 8017a3a:	23b0      	movs	r3, #176	@ 0xb0
 8017a3c:	009b      	lsls	r3, r3, #2
 8017a3e:	58d3      	ldr	r3, [r2, r3]
 8017a40:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8017a42:	687a      	ldr	r2, [r7, #4]
 8017a44:	23ae      	movs	r3, #174	@ 0xae
 8017a46:	009b      	lsls	r3, r3, #2
 8017a48:	58d3      	ldr	r3, [r2, r3]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d03e      	beq.n	8017acc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8017a4e:	1cfb      	adds	r3, r7, #3
 8017a50:	781a      	ldrb	r2, [r3, #0]
 8017a52:	6879      	ldr	r1, [r7, #4]
 8017a54:	0013      	movs	r3, r2
 8017a56:	009b      	lsls	r3, r3, #2
 8017a58:	189b      	adds	r3, r3, r2
 8017a5a:	009b      	lsls	r3, r3, #2
 8017a5c:	18cb      	adds	r3, r1, r3
 8017a5e:	331c      	adds	r3, #28
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d02b      	beq.n	8017abe <USBD_CDC_DataIn+0x9e>
 8017a66:	1cfb      	adds	r3, r7, #3
 8017a68:	781a      	ldrb	r2, [r3, #0]
 8017a6a:	6879      	ldr	r1, [r7, #4]
 8017a6c:	0013      	movs	r3, r2
 8017a6e:	009b      	lsls	r3, r3, #2
 8017a70:	189b      	adds	r3, r3, r2
 8017a72:	009b      	lsls	r3, r3, #2
 8017a74:	18cb      	adds	r3, r1, r3
 8017a76:	331c      	adds	r3, #28
 8017a78:	6818      	ldr	r0, [r3, #0]
 8017a7a:	1cfb      	adds	r3, r7, #3
 8017a7c:	781a      	ldrb	r2, [r3, #0]
 8017a7e:	68b9      	ldr	r1, [r7, #8]
 8017a80:	0013      	movs	r3, r2
 8017a82:	009b      	lsls	r3, r3, #2
 8017a84:	189b      	adds	r3, r3, r2
 8017a86:	00db      	lsls	r3, r3, #3
 8017a88:	18cb      	adds	r3, r1, r3
 8017a8a:	3338      	adds	r3, #56	@ 0x38
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	0019      	movs	r1, r3
 8017a90:	f7e8 fc0e 	bl	80002b0 <__aeabi_uidivmod>
 8017a94:	1e0b      	subs	r3, r1, #0
 8017a96:	d112      	bne.n	8017abe <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8017a98:	1cfb      	adds	r3, r7, #3
 8017a9a:	781a      	ldrb	r2, [r3, #0]
 8017a9c:	6879      	ldr	r1, [r7, #4]
 8017a9e:	0013      	movs	r3, r2
 8017aa0:	009b      	lsls	r3, r3, #2
 8017aa2:	189b      	adds	r3, r3, r2
 8017aa4:	009b      	lsls	r3, r3, #2
 8017aa6:	18cb      	adds	r3, r1, r3
 8017aa8:	331c      	adds	r3, #28
 8017aaa:	2200      	movs	r2, #0
 8017aac:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017aae:	1cfb      	adds	r3, r7, #3
 8017ab0:	7819      	ldrb	r1, [r3, #0]
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	f002 f82f 	bl	8019b1a <USBD_LL_Transmit>
 8017abc:	e004      	b.n	8017ac8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8017abe:	68fa      	ldr	r2, [r7, #12]
 8017ac0:	2385      	movs	r3, #133	@ 0x85
 8017ac2:	009b      	lsls	r3, r3, #2
 8017ac4:	2100      	movs	r1, #0
 8017ac6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	e000      	b.n	8017ace <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8017acc:	2302      	movs	r3, #2
  }
}
 8017ace:	0018      	movs	r0, r3
 8017ad0:	46bd      	mov	sp, r7
 8017ad2:	b004      	add	sp, #16
 8017ad4:	bd80      	pop	{r7, pc}

08017ad6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017ad6:	b580      	push	{r7, lr}
 8017ad8:	b084      	sub	sp, #16
 8017ada:	af00      	add	r7, sp, #0
 8017adc:	6078      	str	r0, [r7, #4]
 8017ade:	000a      	movs	r2, r1
 8017ae0:	1cfb      	adds	r3, r7, #3
 8017ae2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017ae4:	687a      	ldr	r2, [r7, #4]
 8017ae6:	23ae      	movs	r3, #174	@ 0xae
 8017ae8:	009b      	lsls	r3, r3, #2
 8017aea:	58d3      	ldr	r3, [r2, r3]
 8017aec:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017aee:	1cfb      	adds	r3, r7, #3
 8017af0:	781a      	ldrb	r2, [r3, #0]
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	0011      	movs	r1, r2
 8017af6:	0018      	movs	r0, r3
 8017af8:	f002 f87d 	bl	8019bf6 <USBD_LL_GetRxDataSize>
 8017afc:	0001      	movs	r1, r0
 8017afe:	68fa      	ldr	r2, [r7, #12]
 8017b00:	2383      	movs	r3, #131	@ 0x83
 8017b02:	009b      	lsls	r3, r3, #2
 8017b04:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8017b06:	687a      	ldr	r2, [r7, #4]
 8017b08:	23ae      	movs	r3, #174	@ 0xae
 8017b0a:	009b      	lsls	r3, r3, #2
 8017b0c:	58d3      	ldr	r3, [r2, r3]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d011      	beq.n	8017b36 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017b12:	687a      	ldr	r2, [r7, #4]
 8017b14:	23af      	movs	r3, #175	@ 0xaf
 8017b16:	009b      	lsls	r3, r3, #2
 8017b18:	58d3      	ldr	r3, [r2, r3]
 8017b1a:	68da      	ldr	r2, [r3, #12]
 8017b1c:	68f9      	ldr	r1, [r7, #12]
 8017b1e:	2381      	movs	r3, #129	@ 0x81
 8017b20:	009b      	lsls	r3, r3, #2
 8017b22:	58c8      	ldr	r0, [r1, r3]
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	2183      	movs	r1, #131	@ 0x83
 8017b28:	0089      	lsls	r1, r1, #2
 8017b2a:	468c      	mov	ip, r1
 8017b2c:	4463      	add	r3, ip
 8017b2e:	0019      	movs	r1, r3
 8017b30:	4790      	blx	r2

    return USBD_OK;
 8017b32:	2300      	movs	r3, #0
 8017b34:	e000      	b.n	8017b38 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8017b36:	2302      	movs	r3, #2
  }
}
 8017b38:	0018      	movs	r0, r3
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	b004      	add	sp, #16
 8017b3e:	bd80      	pop	{r7, pc}

08017b40 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017b40:	b590      	push	{r4, r7, lr}
 8017b42:	b085      	sub	sp, #20
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017b48:	687a      	ldr	r2, [r7, #4]
 8017b4a:	23ae      	movs	r3, #174	@ 0xae
 8017b4c:	009b      	lsls	r3, r3, #2
 8017b4e:	58d3      	ldr	r3, [r2, r3]
 8017b50:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017b52:	687a      	ldr	r2, [r7, #4]
 8017b54:	23af      	movs	r3, #175	@ 0xaf
 8017b56:	009b      	lsls	r3, r3, #2
 8017b58:	58d3      	ldr	r3, [r2, r3]
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	d018      	beq.n	8017b90 <USBD_CDC_EP0_RxReady+0x50>
 8017b5e:	68fa      	ldr	r2, [r7, #12]
 8017b60:	2380      	movs	r3, #128	@ 0x80
 8017b62:	009b      	lsls	r3, r3, #2
 8017b64:	5cd3      	ldrb	r3, [r2, r3]
 8017b66:	2bff      	cmp	r3, #255	@ 0xff
 8017b68:	d012      	beq.n	8017b90 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017b6a:	687a      	ldr	r2, [r7, #4]
 8017b6c:	23af      	movs	r3, #175	@ 0xaf
 8017b6e:	009b      	lsls	r3, r3, #2
 8017b70:	58d3      	ldr	r3, [r2, r3]
 8017b72:	689b      	ldr	r3, [r3, #8]
 8017b74:	68f9      	ldr	r1, [r7, #12]
 8017b76:	2280      	movs	r2, #128	@ 0x80
 8017b78:	0092      	lsls	r2, r2, #2
 8017b7a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8017b7c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8017b7e:	68fa      	ldr	r2, [r7, #12]
 8017b80:	4c06      	ldr	r4, [pc, #24]	@ (8017b9c <USBD_CDC_EP0_RxReady+0x5c>)
 8017b82:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017b84:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017b86:	68fa      	ldr	r2, [r7, #12]
 8017b88:	2380      	movs	r3, #128	@ 0x80
 8017b8a:	009b      	lsls	r3, r3, #2
 8017b8c:	21ff      	movs	r1, #255	@ 0xff
 8017b8e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8017b90:	2300      	movs	r3, #0
}
 8017b92:	0018      	movs	r0, r3
 8017b94:	46bd      	mov	sp, r7
 8017b96:	b005      	add	sp, #20
 8017b98:	bd90      	pop	{r4, r7, pc}
 8017b9a:	46c0      	nop			@ (mov r8, r8)
 8017b9c:	00000201 	.word	0x00000201

08017ba0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b082      	sub	sp, #8
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2243      	movs	r2, #67	@ 0x43
 8017bac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8017bae:	4b02      	ldr	r3, [pc, #8]	@ (8017bb8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8017bb0:	0018      	movs	r0, r3
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	b002      	add	sp, #8
 8017bb6:	bd80      	pop	{r7, pc}
 8017bb8:	20000164 	.word	0x20000164

08017bbc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b082      	sub	sp, #8
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2243      	movs	r2, #67	@ 0x43
 8017bc8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8017bca:	4b02      	ldr	r3, [pc, #8]	@ (8017bd4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8017bcc:	0018      	movs	r0, r3
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	b002      	add	sp, #8
 8017bd2:	bd80      	pop	{r7, pc}
 8017bd4:	20000120 	.word	0x20000120

08017bd8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017bd8:	b580      	push	{r7, lr}
 8017bda:	b082      	sub	sp, #8
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	2243      	movs	r2, #67	@ 0x43
 8017be4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8017be6:	4b02      	ldr	r3, [pc, #8]	@ (8017bf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8017be8:	0018      	movs	r0, r3
 8017bea:	46bd      	mov	sp, r7
 8017bec:	b002      	add	sp, #8
 8017bee:	bd80      	pop	{r7, pc}
 8017bf0:	200001a8 	.word	0x200001a8

08017bf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	220a      	movs	r2, #10
 8017c00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8017c02:	4b02      	ldr	r3, [pc, #8]	@ (8017c0c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8017c04:	0018      	movs	r0, r3
 8017c06:	46bd      	mov	sp, r7
 8017c08:	b002      	add	sp, #8
 8017c0a:	bd80      	pop	{r7, pc}
 8017c0c:	200000dc 	.word	0x200000dc

08017c10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b084      	sub	sp, #16
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
 8017c18:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8017c1a:	200f      	movs	r0, #15
 8017c1c:	183b      	adds	r3, r7, r0
 8017c1e:	2202      	movs	r2, #2
 8017c20:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8017c22:	683b      	ldr	r3, [r7, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d007      	beq.n	8017c38 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8017c28:	687a      	ldr	r2, [r7, #4]
 8017c2a:	23af      	movs	r3, #175	@ 0xaf
 8017c2c:	009b      	lsls	r3, r3, #2
 8017c2e:	6839      	ldr	r1, [r7, #0]
 8017c30:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8017c32:	183b      	adds	r3, r7, r0
 8017c34:	2200      	movs	r2, #0
 8017c36:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8017c38:	230f      	movs	r3, #15
 8017c3a:	18fb      	adds	r3, r7, r3
 8017c3c:	781b      	ldrb	r3, [r3, #0]
}
 8017c3e:	0018      	movs	r0, r3
 8017c40:	46bd      	mov	sp, r7
 8017c42:	b004      	add	sp, #16
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8017c46:	b580      	push	{r7, lr}
 8017c48:	b086      	sub	sp, #24
 8017c4a:	af00      	add	r7, sp, #0
 8017c4c:	60f8      	str	r0, [r7, #12]
 8017c4e:	60b9      	str	r1, [r7, #8]
 8017c50:	1dbb      	adds	r3, r7, #6
 8017c52:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017c54:	68fa      	ldr	r2, [r7, #12]
 8017c56:	23ae      	movs	r3, #174	@ 0xae
 8017c58:	009b      	lsls	r3, r3, #2
 8017c5a:	58d3      	ldr	r3, [r2, r3]
 8017c5c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8017c5e:	697a      	ldr	r2, [r7, #20]
 8017c60:	2382      	movs	r3, #130	@ 0x82
 8017c62:	009b      	lsls	r3, r3, #2
 8017c64:	68b9      	ldr	r1, [r7, #8]
 8017c66:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8017c68:	1dbb      	adds	r3, r7, #6
 8017c6a:	8819      	ldrh	r1, [r3, #0]
 8017c6c:	697a      	ldr	r2, [r7, #20]
 8017c6e:	2384      	movs	r3, #132	@ 0x84
 8017c70:	009b      	lsls	r3, r3, #2
 8017c72:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017c74:	2300      	movs	r3, #0
}
 8017c76:	0018      	movs	r0, r3
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	b006      	add	sp, #24
 8017c7c:	bd80      	pop	{r7, pc}

08017c7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8017c7e:	b580      	push	{r7, lr}
 8017c80:	b084      	sub	sp, #16
 8017c82:	af00      	add	r7, sp, #0
 8017c84:	6078      	str	r0, [r7, #4]
 8017c86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017c88:	687a      	ldr	r2, [r7, #4]
 8017c8a:	23ae      	movs	r3, #174	@ 0xae
 8017c8c:	009b      	lsls	r3, r3, #2
 8017c8e:	58d3      	ldr	r3, [r2, r3]
 8017c90:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8017c92:	68fa      	ldr	r2, [r7, #12]
 8017c94:	2381      	movs	r3, #129	@ 0x81
 8017c96:	009b      	lsls	r3, r3, #2
 8017c98:	6839      	ldr	r1, [r7, #0]
 8017c9a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017c9c:	2300      	movs	r3, #0
}
 8017c9e:	0018      	movs	r0, r3
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	b004      	add	sp, #16
 8017ca4:	bd80      	pop	{r7, pc}

08017ca6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8017ca6:	b580      	push	{r7, lr}
 8017ca8:	b084      	sub	sp, #16
 8017caa:	af00      	add	r7, sp, #0
 8017cac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017cae:	687a      	ldr	r2, [r7, #4]
 8017cb0:	23ae      	movs	r3, #174	@ 0xae
 8017cb2:	009b      	lsls	r3, r3, #2
 8017cb4:	58d3      	ldr	r3, [r2, r3]
 8017cb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8017cb8:	687a      	ldr	r2, [r7, #4]
 8017cba:	23ae      	movs	r3, #174	@ 0xae
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	58d3      	ldr	r3, [r2, r3]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d022      	beq.n	8017d0a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8017cc4:	68fa      	ldr	r2, [r7, #12]
 8017cc6:	2385      	movs	r3, #133	@ 0x85
 8017cc8:	009b      	lsls	r3, r3, #2
 8017cca:	58d3      	ldr	r3, [r2, r3]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d11a      	bne.n	8017d06 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8017cd0:	68fa      	ldr	r2, [r7, #12]
 8017cd2:	2385      	movs	r3, #133	@ 0x85
 8017cd4:	009b      	lsls	r3, r3, #2
 8017cd6:	2101      	movs	r1, #1
 8017cd8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8017cda:	68fa      	ldr	r2, [r7, #12]
 8017cdc:	2384      	movs	r3, #132	@ 0x84
 8017cde:	009b      	lsls	r3, r3, #2
 8017ce0:	58d2      	ldr	r2, [r2, r3]
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017ce6:	68fa      	ldr	r2, [r7, #12]
 8017ce8:	2382      	movs	r3, #130	@ 0x82
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8017cee:	68fa      	ldr	r2, [r7, #12]
 8017cf0:	2384      	movs	r3, #132	@ 0x84
 8017cf2:	009b      	lsls	r3, r3, #2
 8017cf4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017cf6:	b29b      	uxth	r3, r3
 8017cf8:	6878      	ldr	r0, [r7, #4]
 8017cfa:	000a      	movs	r2, r1
 8017cfc:	2181      	movs	r1, #129	@ 0x81
 8017cfe:	f001 ff0c 	bl	8019b1a <USBD_LL_Transmit>

      return USBD_OK;
 8017d02:	2300      	movs	r3, #0
 8017d04:	e002      	b.n	8017d0c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8017d06:	2301      	movs	r3, #1
 8017d08:	e000      	b.n	8017d0c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8017d0a:	2302      	movs	r3, #2
  }
}
 8017d0c:	0018      	movs	r0, r3
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	b004      	add	sp, #16
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b084      	sub	sp, #16
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017d1c:	687a      	ldr	r2, [r7, #4]
 8017d1e:	23ae      	movs	r3, #174	@ 0xae
 8017d20:	009b      	lsls	r3, r3, #2
 8017d22:	58d3      	ldr	r3, [r2, r3]
 8017d24:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8017d26:	687a      	ldr	r2, [r7, #4]
 8017d28:	23ae      	movs	r3, #174	@ 0xae
 8017d2a:	009b      	lsls	r3, r3, #2
 8017d2c:	58d3      	ldr	r3, [r2, r3]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d019      	beq.n	8017d66 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	7c1b      	ldrb	r3, [r3, #16]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d10a      	bne.n	8017d50 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017d3a:	68fa      	ldr	r2, [r7, #12]
 8017d3c:	2381      	movs	r3, #129	@ 0x81
 8017d3e:	009b      	lsls	r3, r3, #2
 8017d40:	58d2      	ldr	r2, [r2, r3]
 8017d42:	2380      	movs	r3, #128	@ 0x80
 8017d44:	009b      	lsls	r3, r3, #2
 8017d46:	6878      	ldr	r0, [r7, #4]
 8017d48:	2101      	movs	r1, #1
 8017d4a:	f001 ff1d 	bl	8019b88 <USBD_LL_PrepareReceive>
 8017d4e:	e008      	b.n	8017d62 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017d50:	68fa      	ldr	r2, [r7, #12]
 8017d52:	2381      	movs	r3, #129	@ 0x81
 8017d54:	009b      	lsls	r3, r3, #2
 8017d56:	58d2      	ldr	r2, [r2, r3]
 8017d58:	6878      	ldr	r0, [r7, #4]
 8017d5a:	2340      	movs	r3, #64	@ 0x40
 8017d5c:	2101      	movs	r1, #1
 8017d5e:	f001 ff13 	bl	8019b88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8017d62:	2300      	movs	r3, #0
 8017d64:	e000      	b.n	8017d68 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8017d66:	2302      	movs	r3, #2
  }
}
 8017d68:	0018      	movs	r0, r3
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	b004      	add	sp, #16
 8017d6e:	bd80      	pop	{r7, pc}

08017d70 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b084      	sub	sp, #16
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	60f8      	str	r0, [r7, #12]
 8017d78:	60b9      	str	r1, [r7, #8]
 8017d7a:	1dfb      	adds	r3, r7, #7
 8017d7c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d101      	bne.n	8017d88 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017d84:	2302      	movs	r3, #2
 8017d86:	e020      	b.n	8017dca <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8017d88:	68fa      	ldr	r2, [r7, #12]
 8017d8a:	23ad      	movs	r3, #173	@ 0xad
 8017d8c:	009b      	lsls	r3, r3, #2
 8017d8e:	58d3      	ldr	r3, [r2, r3]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d004      	beq.n	8017d9e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8017d94:	68fa      	ldr	r2, [r7, #12]
 8017d96:	23ad      	movs	r3, #173	@ 0xad
 8017d98:	009b      	lsls	r3, r3, #2
 8017d9a:	2100      	movs	r1, #0
 8017d9c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d004      	beq.n	8017dae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017da4:	68fa      	ldr	r2, [r7, #12]
 8017da6:	23ac      	movs	r3, #172	@ 0xac
 8017da8:	009b      	lsls	r3, r3, #2
 8017daa:	68b9      	ldr	r1, [r7, #8]
 8017dac:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017dae:	68fa      	ldr	r2, [r7, #12]
 8017db0:	23a7      	movs	r3, #167	@ 0xa7
 8017db2:	009b      	lsls	r3, r3, #2
 8017db4:	2101      	movs	r1, #1
 8017db6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	1dfa      	adds	r2, r7, #7
 8017dbc:	7812      	ldrb	r2, [r2, #0]
 8017dbe:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	0018      	movs	r0, r3
 8017dc4:	f001 fd0c 	bl	80197e0 <USBD_LL_Init>

  return USBD_OK;
 8017dc8:	2300      	movs	r3, #0
}
 8017dca:	0018      	movs	r0, r3
 8017dcc:	46bd      	mov	sp, r7
 8017dce:	b004      	add	sp, #16
 8017dd0:	bd80      	pop	{r7, pc}

08017dd2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017dd2:	b580      	push	{r7, lr}
 8017dd4:	b084      	sub	sp, #16
 8017dd6:	af00      	add	r7, sp, #0
 8017dd8:	6078      	str	r0, [r7, #4]
 8017dda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8017ddc:	200f      	movs	r0, #15
 8017dde:	183b      	adds	r3, r7, r0
 8017de0:	2200      	movs	r2, #0
 8017de2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d008      	beq.n	8017dfc <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8017dea:	687a      	ldr	r2, [r7, #4]
 8017dec:	23ad      	movs	r3, #173	@ 0xad
 8017dee:	009b      	lsls	r3, r3, #2
 8017df0:	6839      	ldr	r1, [r7, #0]
 8017df2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8017df4:	183b      	adds	r3, r7, r0
 8017df6:	2200      	movs	r2, #0
 8017df8:	701a      	strb	r2, [r3, #0]
 8017dfa:	e003      	b.n	8017e04 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8017dfc:	230f      	movs	r3, #15
 8017dfe:	18fb      	adds	r3, r7, r3
 8017e00:	2202      	movs	r2, #2
 8017e02:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8017e04:	230f      	movs	r3, #15
 8017e06:	18fb      	adds	r3, r7, r3
 8017e08:	781b      	ldrb	r3, [r3, #0]
}
 8017e0a:	0018      	movs	r0, r3
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	b004      	add	sp, #16
 8017e10:	bd80      	pop	{r7, pc}

08017e12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017e12:	b580      	push	{r7, lr}
 8017e14:	b082      	sub	sp, #8
 8017e16:	af00      	add	r7, sp, #0
 8017e18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	0018      	movs	r0, r3
 8017e1e:	f001 fd43 	bl	80198a8 <USBD_LL_Start>

  return USBD_OK;
 8017e22:	2300      	movs	r3, #0
}
 8017e24:	0018      	movs	r0, r3
 8017e26:	46bd      	mov	sp, r7
 8017e28:	b002      	add	sp, #8
 8017e2a:	bd80      	pop	{r7, pc}

08017e2c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017e2c:	b580      	push	{r7, lr}
 8017e2e:	b082      	sub	sp, #8
 8017e30:	af00      	add	r7, sp, #0
 8017e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017e34:	2300      	movs	r3, #0
}
 8017e36:	0018      	movs	r0, r3
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	b002      	add	sp, #8
 8017e3c:	bd80      	pop	{r7, pc}

08017e3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017e3e:	b590      	push	{r4, r7, lr}
 8017e40:	b085      	sub	sp, #20
 8017e42:	af00      	add	r7, sp, #0
 8017e44:	6078      	str	r0, [r7, #4]
 8017e46:	000a      	movs	r2, r1
 8017e48:	1cfb      	adds	r3, r7, #3
 8017e4a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017e4c:	240f      	movs	r4, #15
 8017e4e:	193b      	adds	r3, r7, r4
 8017e50:	2202      	movs	r2, #2
 8017e52:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8017e54:	687a      	ldr	r2, [r7, #4]
 8017e56:	23ad      	movs	r3, #173	@ 0xad
 8017e58:	009b      	lsls	r3, r3, #2
 8017e5a:	58d3      	ldr	r3, [r2, r3]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d00e      	beq.n	8017e7e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8017e60:	687a      	ldr	r2, [r7, #4]
 8017e62:	23ad      	movs	r3, #173	@ 0xad
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	58d3      	ldr	r3, [r2, r3]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	1cfa      	adds	r2, r7, #3
 8017e6c:	7811      	ldrb	r1, [r2, #0]
 8017e6e:	687a      	ldr	r2, [r7, #4]
 8017e70:	0010      	movs	r0, r2
 8017e72:	4798      	blx	r3
 8017e74:	1e03      	subs	r3, r0, #0
 8017e76:	d102      	bne.n	8017e7e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8017e78:	193b      	adds	r3, r7, r4
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8017e7e:	230f      	movs	r3, #15
 8017e80:	18fb      	adds	r3, r7, r3
 8017e82:	781b      	ldrb	r3, [r3, #0]
}
 8017e84:	0018      	movs	r0, r3
 8017e86:	46bd      	mov	sp, r7
 8017e88:	b005      	add	sp, #20
 8017e8a:	bd90      	pop	{r4, r7, pc}

08017e8c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b082      	sub	sp, #8
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
 8017e94:	000a      	movs	r2, r1
 8017e96:	1cfb      	adds	r3, r7, #3
 8017e98:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8017e9a:	687a      	ldr	r2, [r7, #4]
 8017e9c:	23ad      	movs	r3, #173	@ 0xad
 8017e9e:	009b      	lsls	r3, r3, #2
 8017ea0:	58d3      	ldr	r3, [r2, r3]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	1cfa      	adds	r2, r7, #3
 8017ea6:	7811      	ldrb	r1, [r2, #0]
 8017ea8:	687a      	ldr	r2, [r7, #4]
 8017eaa:	0010      	movs	r0, r2
 8017eac:	4798      	blx	r3

  return USBD_OK;
 8017eae:	2300      	movs	r3, #0
}
 8017eb0:	0018      	movs	r0, r3
 8017eb2:	46bd      	mov	sp, r7
 8017eb4:	b002      	add	sp, #8
 8017eb6:	bd80      	pop	{r7, pc}

08017eb8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	22aa      	movs	r2, #170	@ 0xaa
 8017ec6:	0092      	lsls	r2, r2, #2
 8017ec8:	4694      	mov	ip, r2
 8017eca:	4463      	add	r3, ip
 8017ecc:	683a      	ldr	r2, [r7, #0]
 8017ece:	0011      	movs	r1, r2
 8017ed0:	0018      	movs	r0, r3
 8017ed2:	f001 f810 	bl	8018ef6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017ed6:	687a      	ldr	r2, [r7, #4]
 8017ed8:	23a5      	movs	r3, #165	@ 0xa5
 8017eda:	009b      	lsls	r3, r3, #2
 8017edc:	2101      	movs	r1, #1
 8017ede:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	4a23      	ldr	r2, [pc, #140]	@ (8017f70 <USBD_LL_SetupStage+0xb8>)
 8017ee4:	5a9b      	ldrh	r3, [r3, r2]
 8017ee6:	0019      	movs	r1, r3
 8017ee8:	687a      	ldr	r2, [r7, #4]
 8017eea:	23a6      	movs	r3, #166	@ 0xa6
 8017eec:	009b      	lsls	r3, r3, #2
 8017eee:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8017ef0:	687a      	ldr	r2, [r7, #4]
 8017ef2:	23aa      	movs	r3, #170	@ 0xaa
 8017ef4:	009b      	lsls	r3, r3, #2
 8017ef6:	5cd3      	ldrb	r3, [r2, r3]
 8017ef8:	001a      	movs	r2, r3
 8017efa:	231f      	movs	r3, #31
 8017efc:	4013      	ands	r3, r2
 8017efe:	2b02      	cmp	r3, #2
 8017f00:	d019      	beq.n	8017f36 <USBD_LL_SetupStage+0x7e>
 8017f02:	d822      	bhi.n	8017f4a <USBD_LL_SetupStage+0x92>
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d002      	beq.n	8017f0e <USBD_LL_SetupStage+0x56>
 8017f08:	2b01      	cmp	r3, #1
 8017f0a:	d00a      	beq.n	8017f22 <USBD_LL_SetupStage+0x6a>
 8017f0c:	e01d      	b.n	8017f4a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	22aa      	movs	r2, #170	@ 0xaa
 8017f12:	0092      	lsls	r2, r2, #2
 8017f14:	189a      	adds	r2, r3, r2
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	0011      	movs	r1, r2
 8017f1a:	0018      	movs	r0, r3
 8017f1c:	f000 fa10 	bl	8018340 <USBD_StdDevReq>
      break;
 8017f20:	e020      	b.n	8017f64 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	22aa      	movs	r2, #170	@ 0xaa
 8017f26:	0092      	lsls	r2, r2, #2
 8017f28:	189a      	adds	r2, r3, r2
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	0011      	movs	r1, r2
 8017f2e:	0018      	movs	r0, r3
 8017f30:	f000 fa78 	bl	8018424 <USBD_StdItfReq>
      break;
 8017f34:	e016      	b.n	8017f64 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	22aa      	movs	r2, #170	@ 0xaa
 8017f3a:	0092      	lsls	r2, r2, #2
 8017f3c:	189a      	adds	r2, r3, r2
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	0011      	movs	r1, r2
 8017f42:	0018      	movs	r0, r3
 8017f44:	f000 fac5 	bl	80184d2 <USBD_StdEPReq>
      break;
 8017f48:	e00c      	b.n	8017f64 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017f4a:	687a      	ldr	r2, [r7, #4]
 8017f4c:	23aa      	movs	r3, #170	@ 0xaa
 8017f4e:	009b      	lsls	r3, r3, #2
 8017f50:	5cd3      	ldrb	r3, [r2, r3]
 8017f52:	227f      	movs	r2, #127	@ 0x7f
 8017f54:	4393      	bics	r3, r2
 8017f56:	b2da      	uxtb	r2, r3
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	0011      	movs	r1, r2
 8017f5c:	0018      	movs	r0, r3
 8017f5e:	f001 fd2a 	bl	80199b6 <USBD_LL_StallEP>
      break;
 8017f62:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8017f64:	2300      	movs	r3, #0
}
 8017f66:	0018      	movs	r0, r3
 8017f68:	46bd      	mov	sp, r7
 8017f6a:	b002      	add	sp, #8
 8017f6c:	bd80      	pop	{r7, pc}
 8017f6e:	46c0      	nop			@ (mov r8, r8)
 8017f70:	000002ae 	.word	0x000002ae

08017f74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b086      	sub	sp, #24
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	60f8      	str	r0, [r7, #12]
 8017f7c:	607a      	str	r2, [r7, #4]
 8017f7e:	200b      	movs	r0, #11
 8017f80:	183b      	adds	r3, r7, r0
 8017f82:	1c0a      	adds	r2, r1, #0
 8017f84:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017f86:	183b      	adds	r3, r7, r0
 8017f88:	781b      	ldrb	r3, [r3, #0]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d154      	bne.n	8018038 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	3355      	adds	r3, #85	@ 0x55
 8017f92:	33ff      	adds	r3, #255	@ 0xff
 8017f94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017f96:	68fa      	ldr	r2, [r7, #12]
 8017f98:	23a5      	movs	r3, #165	@ 0xa5
 8017f9a:	009b      	lsls	r3, r3, #2
 8017f9c:	58d3      	ldr	r3, [r2, r3]
 8017f9e:	2b03      	cmp	r3, #3
 8017fa0:	d139      	bne.n	8018016 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8017fa2:	697b      	ldr	r3, [r7, #20]
 8017fa4:	68da      	ldr	r2, [r3, #12]
 8017fa6:	697b      	ldr	r3, [r7, #20]
 8017fa8:	691b      	ldr	r3, [r3, #16]
 8017faa:	429a      	cmp	r2, r3
 8017fac:	d919      	bls.n	8017fe2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	68da      	ldr	r2, [r3, #12]
 8017fb2:	697b      	ldr	r3, [r7, #20]
 8017fb4:	691b      	ldr	r3, [r3, #16]
 8017fb6:	1ad2      	subs	r2, r2, r3
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017fbc:	697b      	ldr	r3, [r7, #20]
 8017fbe:	68da      	ldr	r2, [r3, #12]
 8017fc0:	697b      	ldr	r3, [r7, #20]
 8017fc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d203      	bcs.n	8017fd0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017fc8:	697b      	ldr	r3, [r7, #20]
 8017fca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	e002      	b.n	8017fd6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017fd0:	697b      	ldr	r3, [r7, #20]
 8017fd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8017fd4:	b29b      	uxth	r3, r3
 8017fd6:	6879      	ldr	r1, [r7, #4]
 8017fd8:	68f8      	ldr	r0, [r7, #12]
 8017fda:	001a      	movs	r2, r3
 8017fdc:	f001 f898 	bl	8019110 <USBD_CtlContinueRx>
 8017fe0:	e045      	b.n	801806e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017fe2:	68fa      	ldr	r2, [r7, #12]
 8017fe4:	23ad      	movs	r3, #173	@ 0xad
 8017fe6:	009b      	lsls	r3, r3, #2
 8017fe8:	58d3      	ldr	r3, [r2, r3]
 8017fea:	691b      	ldr	r3, [r3, #16]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d00d      	beq.n	801800c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017ff0:	68fa      	ldr	r2, [r7, #12]
 8017ff2:	23a7      	movs	r3, #167	@ 0xa7
 8017ff4:	009b      	lsls	r3, r3, #2
 8017ff6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017ff8:	2b03      	cmp	r3, #3
 8017ffa:	d107      	bne.n	801800c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8017ffc:	68fa      	ldr	r2, [r7, #12]
 8017ffe:	23ad      	movs	r3, #173	@ 0xad
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	58d3      	ldr	r3, [r2, r3]
 8018004:	691b      	ldr	r3, [r3, #16]
 8018006:	68fa      	ldr	r2, [r7, #12]
 8018008:	0010      	movs	r0, r2
 801800a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	0018      	movs	r0, r3
 8018010:	f001 f891 	bl	8019136 <USBD_CtlSendStatus>
 8018014:	e02b      	b.n	801806e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8018016:	68fa      	ldr	r2, [r7, #12]
 8018018:	23a5      	movs	r3, #165	@ 0xa5
 801801a:	009b      	lsls	r3, r3, #2
 801801c:	58d3      	ldr	r3, [r2, r3]
 801801e:	2b05      	cmp	r3, #5
 8018020:	d125      	bne.n	801806e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8018022:	68fa      	ldr	r2, [r7, #12]
 8018024:	23a5      	movs	r3, #165	@ 0xa5
 8018026:	009b      	lsls	r3, r3, #2
 8018028:	2100      	movs	r1, #0
 801802a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801802c:	68fb      	ldr	r3, [r7, #12]
 801802e:	2100      	movs	r1, #0
 8018030:	0018      	movs	r0, r3
 8018032:	f001 fcc0 	bl	80199b6 <USBD_LL_StallEP>
 8018036:	e01a      	b.n	801806e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8018038:	68fa      	ldr	r2, [r7, #12]
 801803a:	23ad      	movs	r3, #173	@ 0xad
 801803c:	009b      	lsls	r3, r3, #2
 801803e:	58d3      	ldr	r3, [r2, r3]
 8018040:	699b      	ldr	r3, [r3, #24]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d011      	beq.n	801806a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8018046:	68fa      	ldr	r2, [r7, #12]
 8018048:	23a7      	movs	r3, #167	@ 0xa7
 801804a:	009b      	lsls	r3, r3, #2
 801804c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801804e:	2b03      	cmp	r3, #3
 8018050:	d10b      	bne.n	801806a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8018052:	68fa      	ldr	r2, [r7, #12]
 8018054:	23ad      	movs	r3, #173	@ 0xad
 8018056:	009b      	lsls	r3, r3, #2
 8018058:	58d3      	ldr	r3, [r2, r3]
 801805a:	699b      	ldr	r3, [r3, #24]
 801805c:	220b      	movs	r2, #11
 801805e:	18ba      	adds	r2, r7, r2
 8018060:	7811      	ldrb	r1, [r2, #0]
 8018062:	68fa      	ldr	r2, [r7, #12]
 8018064:	0010      	movs	r0, r2
 8018066:	4798      	blx	r3
 8018068:	e001      	b.n	801806e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801806a:	2302      	movs	r3, #2
 801806c:	e000      	b.n	8018070 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801806e:	2300      	movs	r3, #0
}
 8018070:	0018      	movs	r0, r3
 8018072:	46bd      	mov	sp, r7
 8018074:	b006      	add	sp, #24
 8018076:	bd80      	pop	{r7, pc}

08018078 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b086      	sub	sp, #24
 801807c:	af00      	add	r7, sp, #0
 801807e:	60f8      	str	r0, [r7, #12]
 8018080:	607a      	str	r2, [r7, #4]
 8018082:	200b      	movs	r0, #11
 8018084:	183b      	adds	r3, r7, r0
 8018086:	1c0a      	adds	r2, r1, #0
 8018088:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801808a:	183b      	adds	r3, r7, r0
 801808c:	781b      	ldrb	r3, [r3, #0]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d000      	beq.n	8018094 <USBD_LL_DataInStage+0x1c>
 8018092:	e08e      	b.n	80181b2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	3314      	adds	r3, #20
 8018098:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801809a:	68fa      	ldr	r2, [r7, #12]
 801809c:	23a5      	movs	r3, #165	@ 0xa5
 801809e:	009b      	lsls	r3, r3, #2
 80180a0:	58d3      	ldr	r3, [r2, r3]
 80180a2:	2b02      	cmp	r3, #2
 80180a4:	d164      	bne.n	8018170 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80180a6:	697b      	ldr	r3, [r7, #20]
 80180a8:	68da      	ldr	r2, [r3, #12]
 80180aa:	697b      	ldr	r3, [r7, #20]
 80180ac:	691b      	ldr	r3, [r3, #16]
 80180ae:	429a      	cmp	r2, r3
 80180b0:	d915      	bls.n	80180de <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80180b2:	697b      	ldr	r3, [r7, #20]
 80180b4:	68da      	ldr	r2, [r3, #12]
 80180b6:	697b      	ldr	r3, [r7, #20]
 80180b8:	691b      	ldr	r3, [r3, #16]
 80180ba:	1ad2      	subs	r2, r2, r3
 80180bc:	697b      	ldr	r3, [r7, #20]
 80180be:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80180c0:	697b      	ldr	r3, [r7, #20]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	b29a      	uxth	r2, r3
 80180c6:	6879      	ldr	r1, [r7, #4]
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	0018      	movs	r0, r3
 80180cc:	f000 ffe9 	bl	80190a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80180d0:	68f8      	ldr	r0, [r7, #12]
 80180d2:	2300      	movs	r3, #0
 80180d4:	2200      	movs	r2, #0
 80180d6:	2100      	movs	r1, #0
 80180d8:	f001 fd56 	bl	8019b88 <USBD_LL_PrepareReceive>
 80180dc:	e059      	b.n	8018192 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80180de:	697b      	ldr	r3, [r7, #20]
 80180e0:	689a      	ldr	r2, [r3, #8]
 80180e2:	697b      	ldr	r3, [r7, #20]
 80180e4:	691b      	ldr	r3, [r3, #16]
 80180e6:	0019      	movs	r1, r3
 80180e8:	0010      	movs	r0, r2
 80180ea:	f7e8 f8e1 	bl	80002b0 <__aeabi_uidivmod>
 80180ee:	1e0b      	subs	r3, r1, #0
 80180f0:	d11f      	bne.n	8018132 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80180f2:	697b      	ldr	r3, [r7, #20]
 80180f4:	689a      	ldr	r2, [r3, #8]
 80180f6:	697b      	ldr	r3, [r7, #20]
 80180f8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80180fa:	429a      	cmp	r2, r3
 80180fc:	d319      	bcc.n	8018132 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80180fe:	697b      	ldr	r3, [r7, #20]
 8018100:	689a      	ldr	r2, [r3, #8]
 8018102:	68f9      	ldr	r1, [r7, #12]
 8018104:	23a6      	movs	r3, #166	@ 0xa6
 8018106:	009b      	lsls	r3, r3, #2
 8018108:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801810a:	429a      	cmp	r2, r3
 801810c:	d211      	bcs.n	8018132 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	2200      	movs	r2, #0
 8018112:	2100      	movs	r1, #0
 8018114:	0018      	movs	r0, r3
 8018116:	f000 ffc4 	bl	80190a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801811a:	68fa      	ldr	r2, [r7, #12]
 801811c:	23a6      	movs	r3, #166	@ 0xa6
 801811e:	009b      	lsls	r3, r3, #2
 8018120:	2100      	movs	r1, #0
 8018122:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018124:	68f8      	ldr	r0, [r7, #12]
 8018126:	2300      	movs	r3, #0
 8018128:	2200      	movs	r2, #0
 801812a:	2100      	movs	r1, #0
 801812c:	f001 fd2c 	bl	8019b88 <USBD_LL_PrepareReceive>
 8018130:	e02f      	b.n	8018192 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8018132:	68fa      	ldr	r2, [r7, #12]
 8018134:	23ad      	movs	r3, #173	@ 0xad
 8018136:	009b      	lsls	r3, r3, #2
 8018138:	58d3      	ldr	r3, [r2, r3]
 801813a:	68db      	ldr	r3, [r3, #12]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d00d      	beq.n	801815c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8018140:	68fa      	ldr	r2, [r7, #12]
 8018142:	23a7      	movs	r3, #167	@ 0xa7
 8018144:	009b      	lsls	r3, r3, #2
 8018146:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8018148:	2b03      	cmp	r3, #3
 801814a:	d107      	bne.n	801815c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801814c:	68fa      	ldr	r2, [r7, #12]
 801814e:	23ad      	movs	r3, #173	@ 0xad
 8018150:	009b      	lsls	r3, r3, #2
 8018152:	58d3      	ldr	r3, [r2, r3]
 8018154:	68db      	ldr	r3, [r3, #12]
 8018156:	68fa      	ldr	r2, [r7, #12]
 8018158:	0010      	movs	r0, r2
 801815a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	2180      	movs	r1, #128	@ 0x80
 8018160:	0018      	movs	r0, r3
 8018162:	f001 fc28 	bl	80199b6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	0018      	movs	r0, r3
 801816a:	f000 fff8 	bl	801915e <USBD_CtlReceiveStatus>
 801816e:	e010      	b.n	8018192 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8018170:	68fa      	ldr	r2, [r7, #12]
 8018172:	23a5      	movs	r3, #165	@ 0xa5
 8018174:	009b      	lsls	r3, r3, #2
 8018176:	58d3      	ldr	r3, [r2, r3]
 8018178:	2b04      	cmp	r3, #4
 801817a:	d005      	beq.n	8018188 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801817c:	68fa      	ldr	r2, [r7, #12]
 801817e:	23a5      	movs	r3, #165	@ 0xa5
 8018180:	009b      	lsls	r3, r3, #2
 8018182:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8018184:	2b00      	cmp	r3, #0
 8018186:	d104      	bne.n	8018192 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	2180      	movs	r1, #128	@ 0x80
 801818c:	0018      	movs	r0, r3
 801818e:	f001 fc12 	bl	80199b6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8018192:	68fa      	ldr	r2, [r7, #12]
 8018194:	23a8      	movs	r3, #168	@ 0xa8
 8018196:	009b      	lsls	r3, r3, #2
 8018198:	5cd3      	ldrb	r3, [r2, r3]
 801819a:	2b01      	cmp	r3, #1
 801819c:	d124      	bne.n	80181e8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	0018      	movs	r0, r3
 80181a2:	f7ff fe43 	bl	8017e2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80181a6:	68fa      	ldr	r2, [r7, #12]
 80181a8:	23a8      	movs	r3, #168	@ 0xa8
 80181aa:	009b      	lsls	r3, r3, #2
 80181ac:	2100      	movs	r1, #0
 80181ae:	54d1      	strb	r1, [r2, r3]
 80181b0:	e01a      	b.n	80181e8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80181b2:	68fa      	ldr	r2, [r7, #12]
 80181b4:	23ad      	movs	r3, #173	@ 0xad
 80181b6:	009b      	lsls	r3, r3, #2
 80181b8:	58d3      	ldr	r3, [r2, r3]
 80181ba:	695b      	ldr	r3, [r3, #20]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d011      	beq.n	80181e4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80181c0:	68fa      	ldr	r2, [r7, #12]
 80181c2:	23a7      	movs	r3, #167	@ 0xa7
 80181c4:	009b      	lsls	r3, r3, #2
 80181c6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80181c8:	2b03      	cmp	r3, #3
 80181ca:	d10b      	bne.n	80181e4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80181cc:	68fa      	ldr	r2, [r7, #12]
 80181ce:	23ad      	movs	r3, #173	@ 0xad
 80181d0:	009b      	lsls	r3, r3, #2
 80181d2:	58d3      	ldr	r3, [r2, r3]
 80181d4:	695b      	ldr	r3, [r3, #20]
 80181d6:	220b      	movs	r2, #11
 80181d8:	18ba      	adds	r2, r7, r2
 80181da:	7811      	ldrb	r1, [r2, #0]
 80181dc:	68fa      	ldr	r2, [r7, #12]
 80181de:	0010      	movs	r0, r2
 80181e0:	4798      	blx	r3
 80181e2:	e001      	b.n	80181e8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80181e4:	2302      	movs	r3, #2
 80181e6:	e000      	b.n	80181ea <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80181e8:	2300      	movs	r3, #0
}
 80181ea:	0018      	movs	r0, r3
 80181ec:	46bd      	mov	sp, r7
 80181ee:	b006      	add	sp, #24
 80181f0:	bd80      	pop	{r7, pc}

080181f2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80181f2:	b580      	push	{r7, lr}
 80181f4:	b082      	sub	sp, #8
 80181f6:	af00      	add	r7, sp, #0
 80181f8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	2340      	movs	r3, #64	@ 0x40
 80181fe:	2200      	movs	r2, #0
 8018200:	2100      	movs	r1, #0
 8018202:	f001 fb76 	bl	80198f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018206:	687a      	ldr	r2, [r7, #4]
 8018208:	23ac      	movs	r3, #172	@ 0xac
 801820a:	005b      	lsls	r3, r3, #1
 801820c:	2101      	movs	r1, #1
 801820e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018210:	687a      	ldr	r2, [r7, #4]
 8018212:	23b2      	movs	r3, #178	@ 0xb2
 8018214:	005b      	lsls	r3, r3, #1
 8018216:	2140      	movs	r1, #64	@ 0x40
 8018218:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801821a:	6878      	ldr	r0, [r7, #4]
 801821c:	2340      	movs	r3, #64	@ 0x40
 801821e:	2200      	movs	r2, #0
 8018220:	2180      	movs	r1, #128	@ 0x80
 8018222:	f001 fb66 	bl	80198f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	2201      	movs	r2, #1
 801822a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2240      	movs	r2, #64	@ 0x40
 8018230:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018232:	687a      	ldr	r2, [r7, #4]
 8018234:	23a7      	movs	r3, #167	@ 0xa7
 8018236:	009b      	lsls	r3, r3, #2
 8018238:	2101      	movs	r1, #1
 801823a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801823c:	687a      	ldr	r2, [r7, #4]
 801823e:	23a5      	movs	r3, #165	@ 0xa5
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	2100      	movs	r1, #0
 8018244:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	2200      	movs	r2, #0
 801824a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	23a9      	movs	r3, #169	@ 0xa9
 8018250:	009b      	lsls	r3, r3, #2
 8018252:	2100      	movs	r1, #0
 8018254:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8018256:	687a      	ldr	r2, [r7, #4]
 8018258:	23ae      	movs	r3, #174	@ 0xae
 801825a:	009b      	lsls	r3, r3, #2
 801825c:	58d3      	ldr	r3, [r2, r3]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d00a      	beq.n	8018278 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018262:	687a      	ldr	r2, [r7, #4]
 8018264:	23ad      	movs	r3, #173	@ 0xad
 8018266:	009b      	lsls	r3, r3, #2
 8018268:	58d3      	ldr	r3, [r2, r3]
 801826a:	685a      	ldr	r2, [r3, #4]
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	685b      	ldr	r3, [r3, #4]
 8018270:	b2d9      	uxtb	r1, r3
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	0018      	movs	r0, r3
 8018276:	4790      	blx	r2
  }

  return USBD_OK;
 8018278:	2300      	movs	r3, #0
}
 801827a:	0018      	movs	r0, r3
 801827c:	46bd      	mov	sp, r7
 801827e:	b002      	add	sp, #8
 8018280:	bd80      	pop	{r7, pc}

08018282 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8018282:	b580      	push	{r7, lr}
 8018284:	b082      	sub	sp, #8
 8018286:	af00      	add	r7, sp, #0
 8018288:	6078      	str	r0, [r7, #4]
 801828a:	000a      	movs	r2, r1
 801828c:	1cfb      	adds	r3, r7, #3
 801828e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	1cfa      	adds	r2, r7, #3
 8018294:	7812      	ldrb	r2, [r2, #0]
 8018296:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8018298:	2300      	movs	r3, #0
}
 801829a:	0018      	movs	r0, r3
 801829c:	46bd      	mov	sp, r7
 801829e:	b002      	add	sp, #8
 80182a0:	bd80      	pop	{r7, pc}
	...

080182a4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80182a4:	b580      	push	{r7, lr}
 80182a6:	b082      	sub	sp, #8
 80182a8:	af00      	add	r7, sp, #0
 80182aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80182ac:	687a      	ldr	r2, [r7, #4]
 80182ae:	23a7      	movs	r3, #167	@ 0xa7
 80182b0:	009b      	lsls	r3, r3, #2
 80182b2:	5cd1      	ldrb	r1, [r2, r3]
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	4a06      	ldr	r2, [pc, #24]	@ (80182d0 <USBD_LL_Suspend+0x2c>)
 80182b8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80182ba:	687a      	ldr	r2, [r7, #4]
 80182bc:	23a7      	movs	r3, #167	@ 0xa7
 80182be:	009b      	lsls	r3, r3, #2
 80182c0:	2104      	movs	r1, #4
 80182c2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80182c4:	2300      	movs	r3, #0
}
 80182c6:	0018      	movs	r0, r3
 80182c8:	46bd      	mov	sp, r7
 80182ca:	b002      	add	sp, #8
 80182cc:	bd80      	pop	{r7, pc}
 80182ce:	46c0      	nop			@ (mov r8, r8)
 80182d0:	0000029d 	.word	0x0000029d

080182d4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b082      	sub	sp, #8
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80182dc:	687a      	ldr	r2, [r7, #4]
 80182de:	23a7      	movs	r3, #167	@ 0xa7
 80182e0:	009b      	lsls	r3, r3, #2
 80182e2:	5cd3      	ldrb	r3, [r2, r3]
 80182e4:	2b04      	cmp	r3, #4
 80182e6:	d106      	bne.n	80182f6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	4a05      	ldr	r2, [pc, #20]	@ (8018300 <USBD_LL_Resume+0x2c>)
 80182ec:	5c99      	ldrb	r1, [r3, r2]
 80182ee:	687a      	ldr	r2, [r7, #4]
 80182f0:	23a7      	movs	r3, #167	@ 0xa7
 80182f2:	009b      	lsls	r3, r3, #2
 80182f4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80182f6:	2300      	movs	r3, #0
}
 80182f8:	0018      	movs	r0, r3
 80182fa:	46bd      	mov	sp, r7
 80182fc:	b002      	add	sp, #8
 80182fe:	bd80      	pop	{r7, pc}
 8018300:	0000029d 	.word	0x0000029d

08018304 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b082      	sub	sp, #8
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801830c:	687a      	ldr	r2, [r7, #4]
 801830e:	23a7      	movs	r3, #167	@ 0xa7
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	5cd3      	ldrb	r3, [r2, r3]
 8018314:	2b03      	cmp	r3, #3
 8018316:	d10e      	bne.n	8018336 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8018318:	687a      	ldr	r2, [r7, #4]
 801831a:	23ad      	movs	r3, #173	@ 0xad
 801831c:	009b      	lsls	r3, r3, #2
 801831e:	58d3      	ldr	r3, [r2, r3]
 8018320:	69db      	ldr	r3, [r3, #28]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d007      	beq.n	8018336 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8018326:	687a      	ldr	r2, [r7, #4]
 8018328:	23ad      	movs	r3, #173	@ 0xad
 801832a:	009b      	lsls	r3, r3, #2
 801832c:	58d3      	ldr	r3, [r2, r3]
 801832e:	69db      	ldr	r3, [r3, #28]
 8018330:	687a      	ldr	r2, [r7, #4]
 8018332:	0010      	movs	r0, r2
 8018334:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018336:	2300      	movs	r3, #0
}
 8018338:	0018      	movs	r0, r3
 801833a:	46bd      	mov	sp, r7
 801833c:	b002      	add	sp, #8
 801833e:	bd80      	pop	{r7, pc}

08018340 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
 8018348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801834a:	230f      	movs	r3, #15
 801834c:	18fb      	adds	r3, r7, r3
 801834e:	2200      	movs	r2, #0
 8018350:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018352:	683b      	ldr	r3, [r7, #0]
 8018354:	781b      	ldrb	r3, [r3, #0]
 8018356:	001a      	movs	r2, r3
 8018358:	2360      	movs	r3, #96	@ 0x60
 801835a:	4013      	ands	r3, r2
 801835c:	2b40      	cmp	r3, #64	@ 0x40
 801835e:	d004      	beq.n	801836a <USBD_StdDevReq+0x2a>
 8018360:	d84f      	bhi.n	8018402 <USBD_StdDevReq+0xc2>
 8018362:	2b00      	cmp	r3, #0
 8018364:	d00b      	beq.n	801837e <USBD_StdDevReq+0x3e>
 8018366:	2b20      	cmp	r3, #32
 8018368:	d14b      	bne.n	8018402 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	23ad      	movs	r3, #173	@ 0xad
 801836e:	009b      	lsls	r3, r3, #2
 8018370:	58d3      	ldr	r3, [r2, r3]
 8018372:	689b      	ldr	r3, [r3, #8]
 8018374:	6839      	ldr	r1, [r7, #0]
 8018376:	687a      	ldr	r2, [r7, #4]
 8018378:	0010      	movs	r0, r2
 801837a:	4798      	blx	r3
      break;
 801837c:	e048      	b.n	8018410 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801837e:	683b      	ldr	r3, [r7, #0]
 8018380:	785b      	ldrb	r3, [r3, #1]
 8018382:	2b09      	cmp	r3, #9
 8018384:	d835      	bhi.n	80183f2 <USBD_StdDevReq+0xb2>
 8018386:	009a      	lsls	r2, r3, #2
 8018388:	4b25      	ldr	r3, [pc, #148]	@ (8018420 <USBD_StdDevReq+0xe0>)
 801838a:	18d3      	adds	r3, r2, r3
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018390:	683a      	ldr	r2, [r7, #0]
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	0011      	movs	r1, r2
 8018396:	0018      	movs	r0, r3
 8018398:	f000 fa52 	bl	8018840 <USBD_GetDescriptor>
          break;
 801839c:	e030      	b.n	8018400 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801839e:	683a      	ldr	r2, [r7, #0]
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	0011      	movs	r1, r2
 80183a4:	0018      	movs	r0, r3
 80183a6:	f000 fbfd 	bl	8018ba4 <USBD_SetAddress>
          break;
 80183aa:	e029      	b.n	8018400 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80183ac:	683a      	ldr	r2, [r7, #0]
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	0011      	movs	r1, r2
 80183b2:	0018      	movs	r0, r3
 80183b4:	f000 fc4a 	bl	8018c4c <USBD_SetConfig>
          break;
 80183b8:	e022      	b.n	8018400 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80183ba:	683a      	ldr	r2, [r7, #0]
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	0011      	movs	r1, r2
 80183c0:	0018      	movs	r0, r3
 80183c2:	f000 fce7 	bl	8018d94 <USBD_GetConfig>
          break;
 80183c6:	e01b      	b.n	8018400 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80183c8:	683a      	ldr	r2, [r7, #0]
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	0011      	movs	r1, r2
 80183ce:	0018      	movs	r0, r3
 80183d0:	f000 fd1b 	bl	8018e0a <USBD_GetStatus>
          break;
 80183d4:	e014      	b.n	8018400 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80183d6:	683a      	ldr	r2, [r7, #0]
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	0011      	movs	r1, r2
 80183dc:	0018      	movs	r0, r3
 80183de:	f000 fd4e 	bl	8018e7e <USBD_SetFeature>
          break;
 80183e2:	e00d      	b.n	8018400 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80183e4:	683a      	ldr	r2, [r7, #0]
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	0011      	movs	r1, r2
 80183ea:	0018      	movs	r0, r3
 80183ec:	f000 fd5d 	bl	8018eaa <USBD_ClrFeature>
          break;
 80183f0:	e006      	b.n	8018400 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80183f2:	683a      	ldr	r2, [r7, #0]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	0011      	movs	r1, r2
 80183f8:	0018      	movs	r0, r3
 80183fa:	f000 fdb4 	bl	8018f66 <USBD_CtlError>
          break;
 80183fe:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8018400:	e006      	b.n	8018410 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8018402:	683a      	ldr	r2, [r7, #0]
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	0011      	movs	r1, r2
 8018408:	0018      	movs	r0, r3
 801840a:	f000 fdac 	bl	8018f66 <USBD_CtlError>
      break;
 801840e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8018410:	230f      	movs	r3, #15
 8018412:	18fb      	adds	r3, r7, r3
 8018414:	781b      	ldrb	r3, [r3, #0]
}
 8018416:	0018      	movs	r0, r3
 8018418:	46bd      	mov	sp, r7
 801841a:	b004      	add	sp, #16
 801841c:	bd80      	pop	{r7, pc}
 801841e:	46c0      	nop			@ (mov r8, r8)
 8018420:	08020bc0 	.word	0x08020bc0

08018424 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8018424:	b5b0      	push	{r4, r5, r7, lr}
 8018426:	b084      	sub	sp, #16
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
 801842c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801842e:	230f      	movs	r3, #15
 8018430:	18fb      	adds	r3, r7, r3
 8018432:	2200      	movs	r2, #0
 8018434:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	781b      	ldrb	r3, [r3, #0]
 801843a:	001a      	movs	r2, r3
 801843c:	2360      	movs	r3, #96	@ 0x60
 801843e:	4013      	ands	r3, r2
 8018440:	2b40      	cmp	r3, #64	@ 0x40
 8018442:	d004      	beq.n	801844e <USBD_StdItfReq+0x2a>
 8018444:	d839      	bhi.n	80184ba <USBD_StdItfReq+0x96>
 8018446:	2b00      	cmp	r3, #0
 8018448:	d001      	beq.n	801844e <USBD_StdItfReq+0x2a>
 801844a:	2b20      	cmp	r3, #32
 801844c:	d135      	bne.n	80184ba <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	23a7      	movs	r3, #167	@ 0xa7
 8018452:	009b      	lsls	r3, r3, #2
 8018454:	5cd3      	ldrb	r3, [r2, r3]
 8018456:	3b01      	subs	r3, #1
 8018458:	2b02      	cmp	r3, #2
 801845a:	d825      	bhi.n	80184a8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	889b      	ldrh	r3, [r3, #4]
 8018460:	b2db      	uxtb	r3, r3
 8018462:	2b01      	cmp	r3, #1
 8018464:	d819      	bhi.n	801849a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018466:	687a      	ldr	r2, [r7, #4]
 8018468:	23ad      	movs	r3, #173	@ 0xad
 801846a:	009b      	lsls	r3, r3, #2
 801846c:	58d3      	ldr	r3, [r2, r3]
 801846e:	689b      	ldr	r3, [r3, #8]
 8018470:	250f      	movs	r5, #15
 8018472:	197c      	adds	r4, r7, r5
 8018474:	6839      	ldr	r1, [r7, #0]
 8018476:	687a      	ldr	r2, [r7, #4]
 8018478:	0010      	movs	r0, r2
 801847a:	4798      	blx	r3
 801847c:	0003      	movs	r3, r0
 801847e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8018480:	683b      	ldr	r3, [r7, #0]
 8018482:	88db      	ldrh	r3, [r3, #6]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d116      	bne.n	80184b6 <USBD_StdItfReq+0x92>
 8018488:	197b      	adds	r3, r7, r5
 801848a:	781b      	ldrb	r3, [r3, #0]
 801848c:	2b00      	cmp	r3, #0
 801848e:	d112      	bne.n	80184b6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	0018      	movs	r0, r3
 8018494:	f000 fe4f 	bl	8019136 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8018498:	e00d      	b.n	80184b6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801849a:	683a      	ldr	r2, [r7, #0]
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	0011      	movs	r1, r2
 80184a0:	0018      	movs	r0, r3
 80184a2:	f000 fd60 	bl	8018f66 <USBD_CtlError>
          break;
 80184a6:	e006      	b.n	80184b6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80184a8:	683a      	ldr	r2, [r7, #0]
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	0011      	movs	r1, r2
 80184ae:	0018      	movs	r0, r3
 80184b0:	f000 fd59 	bl	8018f66 <USBD_CtlError>
          break;
 80184b4:	e000      	b.n	80184b8 <USBD_StdItfReq+0x94>
          break;
 80184b6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80184b8:	e006      	b.n	80184c8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80184ba:	683a      	ldr	r2, [r7, #0]
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	0011      	movs	r1, r2
 80184c0:	0018      	movs	r0, r3
 80184c2:	f000 fd50 	bl	8018f66 <USBD_CtlError>
      break;
 80184c6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 80184c8:	2300      	movs	r3, #0
}
 80184ca:	0018      	movs	r0, r3
 80184cc:	46bd      	mov	sp, r7
 80184ce:	b004      	add	sp, #16
 80184d0:	bdb0      	pop	{r4, r5, r7, pc}

080184d2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80184d2:	b5b0      	push	{r4, r5, r7, lr}
 80184d4:	b084      	sub	sp, #16
 80184d6:	af00      	add	r7, sp, #0
 80184d8:	6078      	str	r0, [r7, #4]
 80184da:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80184dc:	230f      	movs	r3, #15
 80184de:	18fb      	adds	r3, r7, r3
 80184e0:	2200      	movs	r2, #0
 80184e2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	889a      	ldrh	r2, [r3, #4]
 80184e8:	230e      	movs	r3, #14
 80184ea:	18fb      	adds	r3, r7, r3
 80184ec:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	001a      	movs	r2, r3
 80184f4:	2360      	movs	r3, #96	@ 0x60
 80184f6:	4013      	ands	r3, r2
 80184f8:	2b40      	cmp	r3, #64	@ 0x40
 80184fa:	d006      	beq.n	801850a <USBD_StdEPReq+0x38>
 80184fc:	d900      	bls.n	8018500 <USBD_StdEPReq+0x2e>
 80184fe:	e190      	b.n	8018822 <USBD_StdEPReq+0x350>
 8018500:	2b00      	cmp	r3, #0
 8018502:	d00c      	beq.n	801851e <USBD_StdEPReq+0x4c>
 8018504:	2b20      	cmp	r3, #32
 8018506:	d000      	beq.n	801850a <USBD_StdEPReq+0x38>
 8018508:	e18b      	b.n	8018822 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801850a:	687a      	ldr	r2, [r7, #4]
 801850c:	23ad      	movs	r3, #173	@ 0xad
 801850e:	009b      	lsls	r3, r3, #2
 8018510:	58d3      	ldr	r3, [r2, r3]
 8018512:	689b      	ldr	r3, [r3, #8]
 8018514:	6839      	ldr	r1, [r7, #0]
 8018516:	687a      	ldr	r2, [r7, #4]
 8018518:	0010      	movs	r0, r2
 801851a:	4798      	blx	r3
      break;
 801851c:	e188      	b.n	8018830 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	781b      	ldrb	r3, [r3, #0]
 8018522:	001a      	movs	r2, r3
 8018524:	2360      	movs	r3, #96	@ 0x60
 8018526:	4013      	ands	r3, r2
 8018528:	2b20      	cmp	r3, #32
 801852a:	d10f      	bne.n	801854c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801852c:	687a      	ldr	r2, [r7, #4]
 801852e:	23ad      	movs	r3, #173	@ 0xad
 8018530:	009b      	lsls	r3, r3, #2
 8018532:	58d3      	ldr	r3, [r2, r3]
 8018534:	689b      	ldr	r3, [r3, #8]
 8018536:	250f      	movs	r5, #15
 8018538:	197c      	adds	r4, r7, r5
 801853a:	6839      	ldr	r1, [r7, #0]
 801853c:	687a      	ldr	r2, [r7, #4]
 801853e:	0010      	movs	r0, r2
 8018540:	4798      	blx	r3
 8018542:	0003      	movs	r3, r0
 8018544:	7023      	strb	r3, [r4, #0]

        return ret;
 8018546:	197b      	adds	r3, r7, r5
 8018548:	781b      	ldrb	r3, [r3, #0]
 801854a:	e174      	b.n	8018836 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	785b      	ldrb	r3, [r3, #1]
 8018550:	2b03      	cmp	r3, #3
 8018552:	d007      	beq.n	8018564 <USBD_StdEPReq+0x92>
 8018554:	dd00      	ble.n	8018558 <USBD_StdEPReq+0x86>
 8018556:	e15c      	b.n	8018812 <USBD_StdEPReq+0x340>
 8018558:	2b00      	cmp	r3, #0
 801855a:	d100      	bne.n	801855e <USBD_StdEPReq+0x8c>
 801855c:	e092      	b.n	8018684 <USBD_StdEPReq+0x1b2>
 801855e:	2b01      	cmp	r3, #1
 8018560:	d04b      	beq.n	80185fa <USBD_StdEPReq+0x128>
 8018562:	e156      	b.n	8018812 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8018564:	687a      	ldr	r2, [r7, #4]
 8018566:	23a7      	movs	r3, #167	@ 0xa7
 8018568:	009b      	lsls	r3, r3, #2
 801856a:	5cd3      	ldrb	r3, [r2, r3]
 801856c:	2b02      	cmp	r3, #2
 801856e:	d002      	beq.n	8018576 <USBD_StdEPReq+0xa4>
 8018570:	2b03      	cmp	r3, #3
 8018572:	d01d      	beq.n	80185b0 <USBD_StdEPReq+0xde>
 8018574:	e039      	b.n	80185ea <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018576:	220e      	movs	r2, #14
 8018578:	18bb      	adds	r3, r7, r2
 801857a:	781b      	ldrb	r3, [r3, #0]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d010      	beq.n	80185a2 <USBD_StdEPReq+0xd0>
 8018580:	18bb      	adds	r3, r7, r2
 8018582:	781b      	ldrb	r3, [r3, #0]
 8018584:	2b80      	cmp	r3, #128	@ 0x80
 8018586:	d00c      	beq.n	80185a2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8018588:	18bb      	adds	r3, r7, r2
 801858a:	781a      	ldrb	r2, [r3, #0]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	0011      	movs	r1, r2
 8018590:	0018      	movs	r0, r3
 8018592:	f001 fa10 	bl	80199b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	2180      	movs	r1, #128	@ 0x80
 801859a:	0018      	movs	r0, r3
 801859c:	f001 fa0b 	bl	80199b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80185a0:	e02a      	b.n	80185f8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80185a2:	683a      	ldr	r2, [r7, #0]
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	0011      	movs	r1, r2
 80185a8:	0018      	movs	r0, r3
 80185aa:	f000 fcdc 	bl	8018f66 <USBD_CtlError>
              break;
 80185ae:	e023      	b.n	80185f8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80185b0:	683b      	ldr	r3, [r7, #0]
 80185b2:	885b      	ldrh	r3, [r3, #2]
 80185b4:	2b00      	cmp	r3, #0
 80185b6:	d113      	bne.n	80185e0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80185b8:	220e      	movs	r2, #14
 80185ba:	18bb      	adds	r3, r7, r2
 80185bc:	781b      	ldrb	r3, [r3, #0]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d00e      	beq.n	80185e0 <USBD_StdEPReq+0x10e>
 80185c2:	18bb      	adds	r3, r7, r2
 80185c4:	781b      	ldrb	r3, [r3, #0]
 80185c6:	2b80      	cmp	r3, #128	@ 0x80
 80185c8:	d00a      	beq.n	80185e0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	88db      	ldrh	r3, [r3, #6]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d106      	bne.n	80185e0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80185d2:	18bb      	adds	r3, r7, r2
 80185d4:	781a      	ldrb	r2, [r3, #0]
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	0011      	movs	r1, r2
 80185da:	0018      	movs	r0, r3
 80185dc:	f001 f9eb 	bl	80199b6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	0018      	movs	r0, r3
 80185e4:	f000 fda7 	bl	8019136 <USBD_CtlSendStatus>

              break;
 80185e8:	e006      	b.n	80185f8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80185ea:	683a      	ldr	r2, [r7, #0]
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	0011      	movs	r1, r2
 80185f0:	0018      	movs	r0, r3
 80185f2:	f000 fcb8 	bl	8018f66 <USBD_CtlError>
              break;
 80185f6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80185f8:	e112      	b.n	8018820 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80185fa:	687a      	ldr	r2, [r7, #4]
 80185fc:	23a7      	movs	r3, #167	@ 0xa7
 80185fe:	009b      	lsls	r3, r3, #2
 8018600:	5cd3      	ldrb	r3, [r2, r3]
 8018602:	2b02      	cmp	r3, #2
 8018604:	d002      	beq.n	801860c <USBD_StdEPReq+0x13a>
 8018606:	2b03      	cmp	r3, #3
 8018608:	d01d      	beq.n	8018646 <USBD_StdEPReq+0x174>
 801860a:	e032      	b.n	8018672 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801860c:	220e      	movs	r2, #14
 801860e:	18bb      	adds	r3, r7, r2
 8018610:	781b      	ldrb	r3, [r3, #0]
 8018612:	2b00      	cmp	r3, #0
 8018614:	d010      	beq.n	8018638 <USBD_StdEPReq+0x166>
 8018616:	18bb      	adds	r3, r7, r2
 8018618:	781b      	ldrb	r3, [r3, #0]
 801861a:	2b80      	cmp	r3, #128	@ 0x80
 801861c:	d00c      	beq.n	8018638 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801861e:	18bb      	adds	r3, r7, r2
 8018620:	781a      	ldrb	r2, [r3, #0]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	0011      	movs	r1, r2
 8018626:	0018      	movs	r0, r3
 8018628:	f001 f9c5 	bl	80199b6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2180      	movs	r1, #128	@ 0x80
 8018630:	0018      	movs	r0, r3
 8018632:	f001 f9c0 	bl	80199b6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018636:	e024      	b.n	8018682 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8018638:	683a      	ldr	r2, [r7, #0]
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	0011      	movs	r1, r2
 801863e:	0018      	movs	r0, r3
 8018640:	f000 fc91 	bl	8018f66 <USBD_CtlError>
              break;
 8018644:	e01d      	b.n	8018682 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	885b      	ldrh	r3, [r3, #2]
 801864a:	2b00      	cmp	r3, #0
 801864c:	d118      	bne.n	8018680 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801864e:	210e      	movs	r1, #14
 8018650:	187b      	adds	r3, r7, r1
 8018652:	781b      	ldrb	r3, [r3, #0]
 8018654:	227f      	movs	r2, #127	@ 0x7f
 8018656:	4013      	ands	r3, r2
 8018658:	d006      	beq.n	8018668 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801865a:	187b      	adds	r3, r7, r1
 801865c:	781a      	ldrb	r2, [r3, #0]
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	0011      	movs	r1, r2
 8018662:	0018      	movs	r0, r3
 8018664:	f001 f9d2 	bl	8019a0c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	0018      	movs	r0, r3
 801866c:	f000 fd63 	bl	8019136 <USBD_CtlSendStatus>
              }
              break;
 8018670:	e006      	b.n	8018680 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8018672:	683a      	ldr	r2, [r7, #0]
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	0011      	movs	r1, r2
 8018678:	0018      	movs	r0, r3
 801867a:	f000 fc74 	bl	8018f66 <USBD_CtlError>
              break;
 801867e:	e000      	b.n	8018682 <USBD_StdEPReq+0x1b0>
              break;
 8018680:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8018682:	e0cd      	b.n	8018820 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018684:	687a      	ldr	r2, [r7, #4]
 8018686:	23a7      	movs	r3, #167	@ 0xa7
 8018688:	009b      	lsls	r3, r3, #2
 801868a:	5cd3      	ldrb	r3, [r2, r3]
 801868c:	2b02      	cmp	r3, #2
 801868e:	d002      	beq.n	8018696 <USBD_StdEPReq+0x1c4>
 8018690:	2b03      	cmp	r3, #3
 8018692:	d03c      	beq.n	801870e <USBD_StdEPReq+0x23c>
 8018694:	e0b5      	b.n	8018802 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018696:	220e      	movs	r2, #14
 8018698:	18bb      	adds	r3, r7, r2
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d00a      	beq.n	80186b6 <USBD_StdEPReq+0x1e4>
 80186a0:	18bb      	adds	r3, r7, r2
 80186a2:	781b      	ldrb	r3, [r3, #0]
 80186a4:	2b80      	cmp	r3, #128	@ 0x80
 80186a6:	d006      	beq.n	80186b6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80186a8:	683a      	ldr	r2, [r7, #0]
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	0011      	movs	r1, r2
 80186ae:	0018      	movs	r0, r3
 80186b0:	f000 fc59 	bl	8018f66 <USBD_CtlError>
                break;
 80186b4:	e0ac      	b.n	8018810 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80186b6:	220e      	movs	r2, #14
 80186b8:	18bb      	adds	r3, r7, r2
 80186ba:	781b      	ldrb	r3, [r3, #0]
 80186bc:	b25b      	sxtb	r3, r3
 80186be:	2b00      	cmp	r3, #0
 80186c0:	da0c      	bge.n	80186dc <USBD_StdEPReq+0x20a>
 80186c2:	18bb      	adds	r3, r7, r2
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	227f      	movs	r2, #127	@ 0x7f
 80186c8:	401a      	ands	r2, r3
 80186ca:	0013      	movs	r3, r2
 80186cc:	009b      	lsls	r3, r3, #2
 80186ce:	189b      	adds	r3, r3, r2
 80186d0:	009b      	lsls	r3, r3, #2
 80186d2:	3310      	adds	r3, #16
 80186d4:	687a      	ldr	r2, [r7, #4]
 80186d6:	18d3      	adds	r3, r2, r3
 80186d8:	3304      	adds	r3, #4
 80186da:	e00d      	b.n	80186f8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80186dc:	230e      	movs	r3, #14
 80186de:	18fb      	adds	r3, r7, r3
 80186e0:	781b      	ldrb	r3, [r3, #0]
 80186e2:	227f      	movs	r2, #127	@ 0x7f
 80186e4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80186e6:	0013      	movs	r3, r2
 80186e8:	009b      	lsls	r3, r3, #2
 80186ea:	189b      	adds	r3, r3, r2
 80186ec:	009b      	lsls	r3, r3, #2
 80186ee:	3351      	adds	r3, #81	@ 0x51
 80186f0:	33ff      	adds	r3, #255	@ 0xff
 80186f2:	687a      	ldr	r2, [r7, #4]
 80186f4:	18d3      	adds	r3, r2, r3
 80186f6:	3304      	adds	r3, #4
 80186f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80186fa:	68bb      	ldr	r3, [r7, #8]
 80186fc:	2200      	movs	r2, #0
 80186fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8018700:	68b9      	ldr	r1, [r7, #8]
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	2202      	movs	r2, #2
 8018706:	0018      	movs	r0, r3
 8018708:	f000 fcab 	bl	8019062 <USBD_CtlSendData>
              break;
 801870c:	e080      	b.n	8018810 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801870e:	220e      	movs	r2, #14
 8018710:	18bb      	adds	r3, r7, r2
 8018712:	781b      	ldrb	r3, [r3, #0]
 8018714:	b25b      	sxtb	r3, r3
 8018716:	2b00      	cmp	r3, #0
 8018718:	da14      	bge.n	8018744 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801871a:	18bb      	adds	r3, r7, r2
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	220f      	movs	r2, #15
 8018720:	401a      	ands	r2, r3
 8018722:	6879      	ldr	r1, [r7, #4]
 8018724:	0013      	movs	r3, r2
 8018726:	009b      	lsls	r3, r3, #2
 8018728:	189b      	adds	r3, r3, r2
 801872a:	009b      	lsls	r3, r3, #2
 801872c:	18cb      	adds	r3, r1, r3
 801872e:	3318      	adds	r3, #24
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d11e      	bne.n	8018774 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8018736:	683a      	ldr	r2, [r7, #0]
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	0011      	movs	r1, r2
 801873c:	0018      	movs	r0, r3
 801873e:	f000 fc12 	bl	8018f66 <USBD_CtlError>
                  break;
 8018742:	e065      	b.n	8018810 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018744:	230e      	movs	r3, #14
 8018746:	18fb      	adds	r3, r7, r3
 8018748:	781b      	ldrb	r3, [r3, #0]
 801874a:	220f      	movs	r2, #15
 801874c:	401a      	ands	r2, r3
 801874e:	6878      	ldr	r0, [r7, #4]
 8018750:	23ac      	movs	r3, #172	@ 0xac
 8018752:	0059      	lsls	r1, r3, #1
 8018754:	0013      	movs	r3, r2
 8018756:	009b      	lsls	r3, r3, #2
 8018758:	189b      	adds	r3, r3, r2
 801875a:	009b      	lsls	r3, r3, #2
 801875c:	18c3      	adds	r3, r0, r3
 801875e:	185b      	adds	r3, r3, r1
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	2b00      	cmp	r3, #0
 8018764:	d106      	bne.n	8018774 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8018766:	683a      	ldr	r2, [r7, #0]
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	0011      	movs	r1, r2
 801876c:	0018      	movs	r0, r3
 801876e:	f000 fbfa 	bl	8018f66 <USBD_CtlError>
                  break;
 8018772:	e04d      	b.n	8018810 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018774:	220e      	movs	r2, #14
 8018776:	18bb      	adds	r3, r7, r2
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	b25b      	sxtb	r3, r3
 801877c:	2b00      	cmp	r3, #0
 801877e:	da0c      	bge.n	801879a <USBD_StdEPReq+0x2c8>
 8018780:	18bb      	adds	r3, r7, r2
 8018782:	781b      	ldrb	r3, [r3, #0]
 8018784:	227f      	movs	r2, #127	@ 0x7f
 8018786:	401a      	ands	r2, r3
 8018788:	0013      	movs	r3, r2
 801878a:	009b      	lsls	r3, r3, #2
 801878c:	189b      	adds	r3, r3, r2
 801878e:	009b      	lsls	r3, r3, #2
 8018790:	3310      	adds	r3, #16
 8018792:	687a      	ldr	r2, [r7, #4]
 8018794:	18d3      	adds	r3, r2, r3
 8018796:	3304      	adds	r3, #4
 8018798:	e00d      	b.n	80187b6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801879a:	230e      	movs	r3, #14
 801879c:	18fb      	adds	r3, r7, r3
 801879e:	781b      	ldrb	r3, [r3, #0]
 80187a0:	227f      	movs	r2, #127	@ 0x7f
 80187a2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80187a4:	0013      	movs	r3, r2
 80187a6:	009b      	lsls	r3, r3, #2
 80187a8:	189b      	adds	r3, r3, r2
 80187aa:	009b      	lsls	r3, r3, #2
 80187ac:	3351      	adds	r3, #81	@ 0x51
 80187ae:	33ff      	adds	r3, #255	@ 0xff
 80187b0:	687a      	ldr	r2, [r7, #4]
 80187b2:	18d3      	adds	r3, r2, r3
 80187b4:	3304      	adds	r3, #4
 80187b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80187b8:	220e      	movs	r2, #14
 80187ba:	18bb      	adds	r3, r7, r2
 80187bc:	781b      	ldrb	r3, [r3, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d003      	beq.n	80187ca <USBD_StdEPReq+0x2f8>
 80187c2:	18bb      	adds	r3, r7, r2
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	2b80      	cmp	r3, #128	@ 0x80
 80187c8:	d103      	bne.n	80187d2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80187ca:	68bb      	ldr	r3, [r7, #8]
 80187cc:	2200      	movs	r2, #0
 80187ce:	601a      	str	r2, [r3, #0]
 80187d0:	e010      	b.n	80187f4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80187d2:	230e      	movs	r3, #14
 80187d4:	18fb      	adds	r3, r7, r3
 80187d6:	781a      	ldrb	r2, [r3, #0]
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	0011      	movs	r1, r2
 80187dc:	0018      	movs	r0, r3
 80187de:	f001 f940 	bl	8019a62 <USBD_LL_IsStallEP>
 80187e2:	1e03      	subs	r3, r0, #0
 80187e4:	d003      	beq.n	80187ee <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80187e6:	68bb      	ldr	r3, [r7, #8]
 80187e8:	2201      	movs	r2, #1
 80187ea:	601a      	str	r2, [r3, #0]
 80187ec:	e002      	b.n	80187f4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80187ee:	68bb      	ldr	r3, [r7, #8]
 80187f0:	2200      	movs	r2, #0
 80187f2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80187f4:	68b9      	ldr	r1, [r7, #8]
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	2202      	movs	r2, #2
 80187fa:	0018      	movs	r0, r3
 80187fc:	f000 fc31 	bl	8019062 <USBD_CtlSendData>
              break;
 8018800:	e006      	b.n	8018810 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8018802:	683a      	ldr	r2, [r7, #0]
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	0011      	movs	r1, r2
 8018808:	0018      	movs	r0, r3
 801880a:	f000 fbac 	bl	8018f66 <USBD_CtlError>
              break;
 801880e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8018810:	e006      	b.n	8018820 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8018812:	683a      	ldr	r2, [r7, #0]
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	0011      	movs	r1, r2
 8018818:	0018      	movs	r0, r3
 801881a:	f000 fba4 	bl	8018f66 <USBD_CtlError>
          break;
 801881e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8018820:	e006      	b.n	8018830 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8018822:	683a      	ldr	r2, [r7, #0]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	0011      	movs	r1, r2
 8018828:	0018      	movs	r0, r3
 801882a:	f000 fb9c 	bl	8018f66 <USBD_CtlError>
      break;
 801882e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8018830:	230f      	movs	r3, #15
 8018832:	18fb      	adds	r3, r7, r3
 8018834:	781b      	ldrb	r3, [r3, #0]
}
 8018836:	0018      	movs	r0, r3
 8018838:	46bd      	mov	sp, r7
 801883a:	b004      	add	sp, #16
 801883c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08018840 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b084      	sub	sp, #16
 8018844:	af00      	add	r7, sp, #0
 8018846:	6078      	str	r0, [r7, #4]
 8018848:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801884a:	2308      	movs	r3, #8
 801884c:	18fb      	adds	r3, r7, r3
 801884e:	2200      	movs	r2, #0
 8018850:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8018852:	2300      	movs	r3, #0
 8018854:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8018856:	230b      	movs	r3, #11
 8018858:	18fb      	adds	r3, r7, r3
 801885a:	2200      	movs	r2, #0
 801885c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	885b      	ldrh	r3, [r3, #2]
 8018862:	0a1b      	lsrs	r3, r3, #8
 8018864:	b29b      	uxth	r3, r3
 8018866:	2b07      	cmp	r3, #7
 8018868:	d900      	bls.n	801886c <USBD_GetDescriptor+0x2c>
 801886a:	e159      	b.n	8018b20 <USBD_GetDescriptor+0x2e0>
 801886c:	009a      	lsls	r2, r3, #2
 801886e:	4bcb      	ldr	r3, [pc, #812]	@ (8018b9c <USBD_GetDescriptor+0x35c>)
 8018870:	18d3      	adds	r3, r2, r3
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018876:	687a      	ldr	r2, [r7, #4]
 8018878:	23ac      	movs	r3, #172	@ 0xac
 801887a:	009b      	lsls	r3, r3, #2
 801887c:	58d3      	ldr	r3, [r2, r3]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	687a      	ldr	r2, [r7, #4]
 8018882:	7c12      	ldrb	r2, [r2, #16]
 8018884:	2108      	movs	r1, #8
 8018886:	1879      	adds	r1, r7, r1
 8018888:	0010      	movs	r0, r2
 801888a:	4798      	blx	r3
 801888c:	0003      	movs	r3, r0
 801888e:	60fb      	str	r3, [r7, #12]
      break;
 8018890:	e153      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	7c1b      	ldrb	r3, [r3, #16]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d10f      	bne.n	80188ba <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801889a:	687a      	ldr	r2, [r7, #4]
 801889c:	23ad      	movs	r3, #173	@ 0xad
 801889e:	009b      	lsls	r3, r3, #2
 80188a0:	58d3      	ldr	r3, [r2, r3]
 80188a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80188a4:	2208      	movs	r2, #8
 80188a6:	18ba      	adds	r2, r7, r2
 80188a8:	0010      	movs	r0, r2
 80188aa:	4798      	blx	r3
 80188ac:	0003      	movs	r3, r0
 80188ae:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80188b0:	68fb      	ldr	r3, [r7, #12]
 80188b2:	3301      	adds	r3, #1
 80188b4:	2202      	movs	r2, #2
 80188b6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80188b8:	e13f      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80188ba:	687a      	ldr	r2, [r7, #4]
 80188bc:	23ad      	movs	r3, #173	@ 0xad
 80188be:	009b      	lsls	r3, r3, #2
 80188c0:	58d3      	ldr	r3, [r2, r3]
 80188c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188c4:	2208      	movs	r2, #8
 80188c6:	18ba      	adds	r2, r7, r2
 80188c8:	0010      	movs	r0, r2
 80188ca:	4798      	blx	r3
 80188cc:	0003      	movs	r3, r0
 80188ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	3301      	adds	r3, #1
 80188d4:	2202      	movs	r2, #2
 80188d6:	701a      	strb	r2, [r3, #0]
      break;
 80188d8:	e12f      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	885b      	ldrh	r3, [r3, #2]
 80188de:	b2db      	uxtb	r3, r3
 80188e0:	2b05      	cmp	r3, #5
 80188e2:	d900      	bls.n	80188e6 <USBD_GetDescriptor+0xa6>
 80188e4:	e0d0      	b.n	8018a88 <USBD_GetDescriptor+0x248>
 80188e6:	009a      	lsls	r2, r3, #2
 80188e8:	4bad      	ldr	r3, [pc, #692]	@ (8018ba0 <USBD_GetDescriptor+0x360>)
 80188ea:	18d3      	adds	r3, r2, r3
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80188f0:	687a      	ldr	r2, [r7, #4]
 80188f2:	23ac      	movs	r3, #172	@ 0xac
 80188f4:	009b      	lsls	r3, r3, #2
 80188f6:	58d3      	ldr	r3, [r2, r3]
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d00d      	beq.n	801891a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80188fe:	687a      	ldr	r2, [r7, #4]
 8018900:	23ac      	movs	r3, #172	@ 0xac
 8018902:	009b      	lsls	r3, r3, #2
 8018904:	58d3      	ldr	r3, [r2, r3]
 8018906:	685b      	ldr	r3, [r3, #4]
 8018908:	687a      	ldr	r2, [r7, #4]
 801890a:	7c12      	ldrb	r2, [r2, #16]
 801890c:	2108      	movs	r1, #8
 801890e:	1879      	adds	r1, r7, r1
 8018910:	0010      	movs	r0, r2
 8018912:	4798      	blx	r3
 8018914:	0003      	movs	r3, r0
 8018916:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018918:	e0c3      	b.n	8018aa2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801891a:	683a      	ldr	r2, [r7, #0]
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	0011      	movs	r1, r2
 8018920:	0018      	movs	r0, r3
 8018922:	f000 fb20 	bl	8018f66 <USBD_CtlError>
            err++;
 8018926:	210b      	movs	r1, #11
 8018928:	187b      	adds	r3, r7, r1
 801892a:	781a      	ldrb	r2, [r3, #0]
 801892c:	187b      	adds	r3, r7, r1
 801892e:	3201      	adds	r2, #1
 8018930:	701a      	strb	r2, [r3, #0]
          break;
 8018932:	e0b6      	b.n	8018aa2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018934:	687a      	ldr	r2, [r7, #4]
 8018936:	23ac      	movs	r3, #172	@ 0xac
 8018938:	009b      	lsls	r3, r3, #2
 801893a:	58d3      	ldr	r3, [r2, r3]
 801893c:	689b      	ldr	r3, [r3, #8]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d00d      	beq.n	801895e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018942:	687a      	ldr	r2, [r7, #4]
 8018944:	23ac      	movs	r3, #172	@ 0xac
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	58d3      	ldr	r3, [r2, r3]
 801894a:	689b      	ldr	r3, [r3, #8]
 801894c:	687a      	ldr	r2, [r7, #4]
 801894e:	7c12      	ldrb	r2, [r2, #16]
 8018950:	2108      	movs	r1, #8
 8018952:	1879      	adds	r1, r7, r1
 8018954:	0010      	movs	r0, r2
 8018956:	4798      	blx	r3
 8018958:	0003      	movs	r3, r0
 801895a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801895c:	e0a1      	b.n	8018aa2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801895e:	683a      	ldr	r2, [r7, #0]
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	0011      	movs	r1, r2
 8018964:	0018      	movs	r0, r3
 8018966:	f000 fafe 	bl	8018f66 <USBD_CtlError>
            err++;
 801896a:	210b      	movs	r1, #11
 801896c:	187b      	adds	r3, r7, r1
 801896e:	781a      	ldrb	r2, [r3, #0]
 8018970:	187b      	adds	r3, r7, r1
 8018972:	3201      	adds	r2, #1
 8018974:	701a      	strb	r2, [r3, #0]
          break;
 8018976:	e094      	b.n	8018aa2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018978:	687a      	ldr	r2, [r7, #4]
 801897a:	23ac      	movs	r3, #172	@ 0xac
 801897c:	009b      	lsls	r3, r3, #2
 801897e:	58d3      	ldr	r3, [r2, r3]
 8018980:	68db      	ldr	r3, [r3, #12]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d00d      	beq.n	80189a2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018986:	687a      	ldr	r2, [r7, #4]
 8018988:	23ac      	movs	r3, #172	@ 0xac
 801898a:	009b      	lsls	r3, r3, #2
 801898c:	58d3      	ldr	r3, [r2, r3]
 801898e:	68db      	ldr	r3, [r3, #12]
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	7c12      	ldrb	r2, [r2, #16]
 8018994:	2108      	movs	r1, #8
 8018996:	1879      	adds	r1, r7, r1
 8018998:	0010      	movs	r0, r2
 801899a:	4798      	blx	r3
 801899c:	0003      	movs	r3, r0
 801899e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189a0:	e07f      	b.n	8018aa2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80189a2:	683a      	ldr	r2, [r7, #0]
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	0011      	movs	r1, r2
 80189a8:	0018      	movs	r0, r3
 80189aa:	f000 fadc 	bl	8018f66 <USBD_CtlError>
            err++;
 80189ae:	210b      	movs	r1, #11
 80189b0:	187b      	adds	r3, r7, r1
 80189b2:	781a      	ldrb	r2, [r3, #0]
 80189b4:	187b      	adds	r3, r7, r1
 80189b6:	3201      	adds	r2, #1
 80189b8:	701a      	strb	r2, [r3, #0]
          break;
 80189ba:	e072      	b.n	8018aa2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80189bc:	687a      	ldr	r2, [r7, #4]
 80189be:	23ac      	movs	r3, #172	@ 0xac
 80189c0:	009b      	lsls	r3, r3, #2
 80189c2:	58d3      	ldr	r3, [r2, r3]
 80189c4:	691b      	ldr	r3, [r3, #16]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d00d      	beq.n	80189e6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80189ca:	687a      	ldr	r2, [r7, #4]
 80189cc:	23ac      	movs	r3, #172	@ 0xac
 80189ce:	009b      	lsls	r3, r3, #2
 80189d0:	58d3      	ldr	r3, [r2, r3]
 80189d2:	691b      	ldr	r3, [r3, #16]
 80189d4:	687a      	ldr	r2, [r7, #4]
 80189d6:	7c12      	ldrb	r2, [r2, #16]
 80189d8:	2108      	movs	r1, #8
 80189da:	1879      	adds	r1, r7, r1
 80189dc:	0010      	movs	r0, r2
 80189de:	4798      	blx	r3
 80189e0:	0003      	movs	r3, r0
 80189e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189e4:	e05d      	b.n	8018aa2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80189e6:	683a      	ldr	r2, [r7, #0]
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	0011      	movs	r1, r2
 80189ec:	0018      	movs	r0, r3
 80189ee:	f000 faba 	bl	8018f66 <USBD_CtlError>
            err++;
 80189f2:	210b      	movs	r1, #11
 80189f4:	187b      	adds	r3, r7, r1
 80189f6:	781a      	ldrb	r2, [r3, #0]
 80189f8:	187b      	adds	r3, r7, r1
 80189fa:	3201      	adds	r2, #1
 80189fc:	701a      	strb	r2, [r3, #0]
          break;
 80189fe:	e050      	b.n	8018aa2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018a00:	687a      	ldr	r2, [r7, #4]
 8018a02:	23ac      	movs	r3, #172	@ 0xac
 8018a04:	009b      	lsls	r3, r3, #2
 8018a06:	58d3      	ldr	r3, [r2, r3]
 8018a08:	695b      	ldr	r3, [r3, #20]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d00d      	beq.n	8018a2a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018a0e:	687a      	ldr	r2, [r7, #4]
 8018a10:	23ac      	movs	r3, #172	@ 0xac
 8018a12:	009b      	lsls	r3, r3, #2
 8018a14:	58d3      	ldr	r3, [r2, r3]
 8018a16:	695b      	ldr	r3, [r3, #20]
 8018a18:	687a      	ldr	r2, [r7, #4]
 8018a1a:	7c12      	ldrb	r2, [r2, #16]
 8018a1c:	2108      	movs	r1, #8
 8018a1e:	1879      	adds	r1, r7, r1
 8018a20:	0010      	movs	r0, r2
 8018a22:	4798      	blx	r3
 8018a24:	0003      	movs	r3, r0
 8018a26:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a28:	e03b      	b.n	8018aa2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018a2a:	683a      	ldr	r2, [r7, #0]
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	0011      	movs	r1, r2
 8018a30:	0018      	movs	r0, r3
 8018a32:	f000 fa98 	bl	8018f66 <USBD_CtlError>
            err++;
 8018a36:	210b      	movs	r1, #11
 8018a38:	187b      	adds	r3, r7, r1
 8018a3a:	781a      	ldrb	r2, [r3, #0]
 8018a3c:	187b      	adds	r3, r7, r1
 8018a3e:	3201      	adds	r2, #1
 8018a40:	701a      	strb	r2, [r3, #0]
          break;
 8018a42:	e02e      	b.n	8018aa2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018a44:	687a      	ldr	r2, [r7, #4]
 8018a46:	23ac      	movs	r3, #172	@ 0xac
 8018a48:	009b      	lsls	r3, r3, #2
 8018a4a:	58d3      	ldr	r3, [r2, r3]
 8018a4c:	699b      	ldr	r3, [r3, #24]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d00d      	beq.n	8018a6e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018a52:	687a      	ldr	r2, [r7, #4]
 8018a54:	23ac      	movs	r3, #172	@ 0xac
 8018a56:	009b      	lsls	r3, r3, #2
 8018a58:	58d3      	ldr	r3, [r2, r3]
 8018a5a:	699b      	ldr	r3, [r3, #24]
 8018a5c:	687a      	ldr	r2, [r7, #4]
 8018a5e:	7c12      	ldrb	r2, [r2, #16]
 8018a60:	2108      	movs	r1, #8
 8018a62:	1879      	adds	r1, r7, r1
 8018a64:	0010      	movs	r0, r2
 8018a66:	4798      	blx	r3
 8018a68:	0003      	movs	r3, r0
 8018a6a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018a6c:	e019      	b.n	8018aa2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018a6e:	683a      	ldr	r2, [r7, #0]
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	0011      	movs	r1, r2
 8018a74:	0018      	movs	r0, r3
 8018a76:	f000 fa76 	bl	8018f66 <USBD_CtlError>
            err++;
 8018a7a:	210b      	movs	r1, #11
 8018a7c:	187b      	adds	r3, r7, r1
 8018a7e:	781a      	ldrb	r2, [r3, #0]
 8018a80:	187b      	adds	r3, r7, r1
 8018a82:	3201      	adds	r2, #1
 8018a84:	701a      	strb	r2, [r3, #0]
          break;
 8018a86:	e00c      	b.n	8018aa2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8018a88:	683a      	ldr	r2, [r7, #0]
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	0011      	movs	r1, r2
 8018a8e:	0018      	movs	r0, r3
 8018a90:	f000 fa69 	bl	8018f66 <USBD_CtlError>
          err++;
 8018a94:	210b      	movs	r1, #11
 8018a96:	187b      	adds	r3, r7, r1
 8018a98:	781a      	ldrb	r2, [r3, #0]
 8018a9a:	187b      	adds	r3, r7, r1
 8018a9c:	3201      	adds	r2, #1
 8018a9e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8018aa0:	e04b      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>
 8018aa2:	e04a      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	7c1b      	ldrb	r3, [r3, #16]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d10b      	bne.n	8018ac4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018aac:	687a      	ldr	r2, [r7, #4]
 8018aae:	23ad      	movs	r3, #173	@ 0xad
 8018ab0:	009b      	lsls	r3, r3, #2
 8018ab2:	58d3      	ldr	r3, [r2, r3]
 8018ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018ab6:	2208      	movs	r2, #8
 8018ab8:	18ba      	adds	r2, r7, r2
 8018aba:	0010      	movs	r0, r2
 8018abc:	4798      	blx	r3
 8018abe:	0003      	movs	r3, r0
 8018ac0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018ac2:	e03a      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8018ac4:	683a      	ldr	r2, [r7, #0]
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	0011      	movs	r1, r2
 8018aca:	0018      	movs	r0, r3
 8018acc:	f000 fa4b 	bl	8018f66 <USBD_CtlError>
        err++;
 8018ad0:	210b      	movs	r1, #11
 8018ad2:	187b      	adds	r3, r7, r1
 8018ad4:	781a      	ldrb	r2, [r3, #0]
 8018ad6:	187b      	adds	r3, r7, r1
 8018ad8:	3201      	adds	r2, #1
 8018ada:	701a      	strb	r2, [r3, #0]
      break;
 8018adc:	e02d      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	7c1b      	ldrb	r3, [r3, #16]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d10f      	bne.n	8018b06 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018ae6:	687a      	ldr	r2, [r7, #4]
 8018ae8:	23ad      	movs	r3, #173	@ 0xad
 8018aea:	009b      	lsls	r3, r3, #2
 8018aec:	58d3      	ldr	r3, [r2, r3]
 8018aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018af0:	2208      	movs	r2, #8
 8018af2:	18ba      	adds	r2, r7, r2
 8018af4:	0010      	movs	r0, r2
 8018af6:	4798      	blx	r3
 8018af8:	0003      	movs	r3, r0
 8018afa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018afc:	68fb      	ldr	r3, [r7, #12]
 8018afe:	3301      	adds	r3, #1
 8018b00:	2207      	movs	r2, #7
 8018b02:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018b04:	e019      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8018b06:	683a      	ldr	r2, [r7, #0]
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	0011      	movs	r1, r2
 8018b0c:	0018      	movs	r0, r3
 8018b0e:	f000 fa2a 	bl	8018f66 <USBD_CtlError>
        err++;
 8018b12:	210b      	movs	r1, #11
 8018b14:	187b      	adds	r3, r7, r1
 8018b16:	781a      	ldrb	r2, [r3, #0]
 8018b18:	187b      	adds	r3, r7, r1
 8018b1a:	3201      	adds	r2, #1
 8018b1c:	701a      	strb	r2, [r3, #0]
      break;
 8018b1e:	e00c      	b.n	8018b3a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8018b20:	683a      	ldr	r2, [r7, #0]
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	0011      	movs	r1, r2
 8018b26:	0018      	movs	r0, r3
 8018b28:	f000 fa1d 	bl	8018f66 <USBD_CtlError>
      err++;
 8018b2c:	210b      	movs	r1, #11
 8018b2e:	187b      	adds	r3, r7, r1
 8018b30:	781a      	ldrb	r2, [r3, #0]
 8018b32:	187b      	adds	r3, r7, r1
 8018b34:	3201      	adds	r2, #1
 8018b36:	701a      	strb	r2, [r3, #0]
      break;
 8018b38:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8018b3a:	230b      	movs	r3, #11
 8018b3c:	18fb      	adds	r3, r7, r3
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d127      	bne.n	8018b94 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8018b44:	2108      	movs	r1, #8
 8018b46:	187b      	adds	r3, r7, r1
 8018b48:	881b      	ldrh	r3, [r3, #0]
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d019      	beq.n	8018b82 <USBD_GetDescriptor+0x342>
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	88db      	ldrh	r3, [r3, #6]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d015      	beq.n	8018b82 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	88da      	ldrh	r2, [r3, #6]
 8018b5a:	187b      	adds	r3, r7, r1
 8018b5c:	881b      	ldrh	r3, [r3, #0]
 8018b5e:	1c18      	adds	r0, r3, #0
 8018b60:	1c11      	adds	r1, r2, #0
 8018b62:	b28a      	uxth	r2, r1
 8018b64:	b283      	uxth	r3, r0
 8018b66:	429a      	cmp	r2, r3
 8018b68:	d900      	bls.n	8018b6c <USBD_GetDescriptor+0x32c>
 8018b6a:	1c01      	adds	r1, r0, #0
 8018b6c:	b28a      	uxth	r2, r1
 8018b6e:	2108      	movs	r1, #8
 8018b70:	187b      	adds	r3, r7, r1
 8018b72:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018b74:	187b      	adds	r3, r7, r1
 8018b76:	881a      	ldrh	r2, [r3, #0]
 8018b78:	68f9      	ldr	r1, [r7, #12]
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	0018      	movs	r0, r3
 8018b7e:	f000 fa70 	bl	8019062 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8018b82:	683b      	ldr	r3, [r7, #0]
 8018b84:	88db      	ldrh	r3, [r3, #6]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d105      	bne.n	8018b96 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	0018      	movs	r0, r3
 8018b8e:	f000 fad2 	bl	8019136 <USBD_CtlSendStatus>
 8018b92:	e000      	b.n	8018b96 <USBD_GetDescriptor+0x356>
    return;
 8018b94:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018b96:	46bd      	mov	sp, r7
 8018b98:	b004      	add	sp, #16
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	08020be8 	.word	0x08020be8
 8018ba0:	08020c08 	.word	0x08020c08

08018ba4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018ba4:	b590      	push	{r4, r7, lr}
 8018ba6:	b085      	sub	sp, #20
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
 8018bac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018bae:	683b      	ldr	r3, [r7, #0]
 8018bb0:	889b      	ldrh	r3, [r3, #4]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d13d      	bne.n	8018c32 <USBD_SetAddress+0x8e>
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	88db      	ldrh	r3, [r3, #6]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d139      	bne.n	8018c32 <USBD_SetAddress+0x8e>
 8018bbe:	683b      	ldr	r3, [r7, #0]
 8018bc0:	885b      	ldrh	r3, [r3, #2]
 8018bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8018bc4:	d835      	bhi.n	8018c32 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	885b      	ldrh	r3, [r3, #2]
 8018bca:	b2da      	uxtb	r2, r3
 8018bcc:	230f      	movs	r3, #15
 8018bce:	18fb      	adds	r3, r7, r3
 8018bd0:	217f      	movs	r1, #127	@ 0x7f
 8018bd2:	400a      	ands	r2, r1
 8018bd4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018bd6:	687a      	ldr	r2, [r7, #4]
 8018bd8:	23a7      	movs	r3, #167	@ 0xa7
 8018bda:	009b      	lsls	r3, r3, #2
 8018bdc:	5cd3      	ldrb	r3, [r2, r3]
 8018bde:	2b03      	cmp	r3, #3
 8018be0:	d106      	bne.n	8018bf0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8018be2:	683a      	ldr	r2, [r7, #0]
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	0011      	movs	r1, r2
 8018be8:	0018      	movs	r0, r3
 8018bea:	f000 f9bc 	bl	8018f66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018bee:	e027      	b.n	8018c40 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	240f      	movs	r4, #15
 8018bf4:	193a      	adds	r2, r7, r4
 8018bf6:	4914      	ldr	r1, [pc, #80]	@ (8018c48 <USBD_SetAddress+0xa4>)
 8018bf8:	7812      	ldrb	r2, [r2, #0]
 8018bfa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018bfc:	193b      	adds	r3, r7, r4
 8018bfe:	781a      	ldrb	r2, [r3, #0]
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	0011      	movs	r1, r2
 8018c04:	0018      	movs	r0, r3
 8018c06:	f000 ff5d 	bl	8019ac4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	0018      	movs	r0, r3
 8018c0e:	f000 fa92 	bl	8019136 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018c12:	193b      	adds	r3, r7, r4
 8018c14:	781b      	ldrb	r3, [r3, #0]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d005      	beq.n	8018c26 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c1a:	687a      	ldr	r2, [r7, #4]
 8018c1c:	23a7      	movs	r3, #167	@ 0xa7
 8018c1e:	009b      	lsls	r3, r3, #2
 8018c20:	2102      	movs	r1, #2
 8018c22:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c24:	e00c      	b.n	8018c40 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018c26:	687a      	ldr	r2, [r7, #4]
 8018c28:	23a7      	movs	r3, #167	@ 0xa7
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	2101      	movs	r1, #1
 8018c2e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018c30:	e006      	b.n	8018c40 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018c32:	683a      	ldr	r2, [r7, #0]
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	0011      	movs	r1, r2
 8018c38:	0018      	movs	r0, r3
 8018c3a:	f000 f994 	bl	8018f66 <USBD_CtlError>
  }
}
 8018c3e:	46c0      	nop			@ (mov r8, r8)
 8018c40:	46c0      	nop			@ (mov r8, r8)
 8018c42:	46bd      	mov	sp, r7
 8018c44:	b005      	add	sp, #20
 8018c46:	bd90      	pop	{r4, r7, pc}
 8018c48:	0000029e 	.word	0x0000029e

08018c4c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b082      	sub	sp, #8
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	6078      	str	r0, [r7, #4]
 8018c54:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	885b      	ldrh	r3, [r3, #2]
 8018c5a:	b2da      	uxtb	r2, r3
 8018c5c:	4b4c      	ldr	r3, [pc, #304]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018c5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018c60:	4b4b      	ldr	r3, [pc, #300]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	2b01      	cmp	r3, #1
 8018c66:	d906      	bls.n	8018c76 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8018c68:	683a      	ldr	r2, [r7, #0]
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	0011      	movs	r1, r2
 8018c6e:	0018      	movs	r0, r3
 8018c70:	f000 f979 	bl	8018f66 <USBD_CtlError>
 8018c74:	e088      	b.n	8018d88 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8018c76:	687a      	ldr	r2, [r7, #4]
 8018c78:	23a7      	movs	r3, #167	@ 0xa7
 8018c7a:	009b      	lsls	r3, r3, #2
 8018c7c:	5cd3      	ldrb	r3, [r2, r3]
 8018c7e:	2b02      	cmp	r3, #2
 8018c80:	d002      	beq.n	8018c88 <USBD_SetConfig+0x3c>
 8018c82:	2b03      	cmp	r3, #3
 8018c84:	d029      	beq.n	8018cda <USBD_SetConfig+0x8e>
 8018c86:	e071      	b.n	8018d6c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8018c88:	4b41      	ldr	r3, [pc, #260]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018c8a:	781b      	ldrb	r3, [r3, #0]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d01f      	beq.n	8018cd0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8018c90:	4b3f      	ldr	r3, [pc, #252]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018c92:	781b      	ldrb	r3, [r3, #0]
 8018c94:	001a      	movs	r2, r3
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018c9a:	687a      	ldr	r2, [r7, #4]
 8018c9c:	23a7      	movs	r3, #167	@ 0xa7
 8018c9e:	009b      	lsls	r3, r3, #2
 8018ca0:	2103      	movs	r1, #3
 8018ca2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018ca6:	781a      	ldrb	r2, [r3, #0]
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	0011      	movs	r1, r2
 8018cac:	0018      	movs	r0, r3
 8018cae:	f7ff f8c6 	bl	8017e3e <USBD_SetClassConfig>
 8018cb2:	0003      	movs	r3, r0
 8018cb4:	2b02      	cmp	r3, #2
 8018cb6:	d106      	bne.n	8018cc6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8018cb8:	683a      	ldr	r2, [r7, #0]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	0011      	movs	r1, r2
 8018cbe:	0018      	movs	r0, r3
 8018cc0:	f000 f951 	bl	8018f66 <USBD_CtlError>
            return;
 8018cc4:	e060      	b.n	8018d88 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	0018      	movs	r0, r3
 8018cca:	f000 fa34 	bl	8019136 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018cce:	e05b      	b.n	8018d88 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	0018      	movs	r0, r3
 8018cd4:	f000 fa2f 	bl	8019136 <USBD_CtlSendStatus>
        break;
 8018cd8:	e056      	b.n	8018d88 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8018cda:	4b2d      	ldr	r3, [pc, #180]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018cdc:	781b      	ldrb	r3, [r3, #0]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d115      	bne.n	8018d0e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018ce2:	687a      	ldr	r2, [r7, #4]
 8018ce4:	23a7      	movs	r3, #167	@ 0xa7
 8018ce6:	009b      	lsls	r3, r3, #2
 8018ce8:	2102      	movs	r1, #2
 8018cea:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8018cec:	4b28      	ldr	r3, [pc, #160]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018cee:	781b      	ldrb	r3, [r3, #0]
 8018cf0:	001a      	movs	r2, r3
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8018cf6:	4b26      	ldr	r3, [pc, #152]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018cf8:	781a      	ldrb	r2, [r3, #0]
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	0011      	movs	r1, r2
 8018cfe:	0018      	movs	r0, r3
 8018d00:	f7ff f8c4 	bl	8017e8c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	0018      	movs	r0, r3
 8018d08:	f000 fa15 	bl	8019136 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018d0c:	e03c      	b.n	8018d88 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8018d0e:	4b20      	ldr	r3, [pc, #128]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018d10:	781b      	ldrb	r3, [r3, #0]
 8018d12:	001a      	movs	r2, r3
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	685b      	ldr	r3, [r3, #4]
 8018d18:	429a      	cmp	r2, r3
 8018d1a:	d022      	beq.n	8018d62 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	685b      	ldr	r3, [r3, #4]
 8018d20:	b2da      	uxtb	r2, r3
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	0011      	movs	r1, r2
 8018d26:	0018      	movs	r0, r3
 8018d28:	f7ff f8b0 	bl	8017e8c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8018d2c:	4b18      	ldr	r3, [pc, #96]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018d2e:	781b      	ldrb	r3, [r3, #0]
 8018d30:	001a      	movs	r2, r3
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018d36:	4b16      	ldr	r3, [pc, #88]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018d38:	781a      	ldrb	r2, [r3, #0]
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	0011      	movs	r1, r2
 8018d3e:	0018      	movs	r0, r3
 8018d40:	f7ff f87d 	bl	8017e3e <USBD_SetClassConfig>
 8018d44:	0003      	movs	r3, r0
 8018d46:	2b02      	cmp	r3, #2
 8018d48:	d106      	bne.n	8018d58 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8018d4a:	683a      	ldr	r2, [r7, #0]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	0011      	movs	r1, r2
 8018d50:	0018      	movs	r0, r3
 8018d52:	f000 f908 	bl	8018f66 <USBD_CtlError>
            return;
 8018d56:	e017      	b.n	8018d88 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	0018      	movs	r0, r3
 8018d5c:	f000 f9eb 	bl	8019136 <USBD_CtlSendStatus>
        break;
 8018d60:	e012      	b.n	8018d88 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	0018      	movs	r0, r3
 8018d66:	f000 f9e6 	bl	8019136 <USBD_CtlSendStatus>
        break;
 8018d6a:	e00d      	b.n	8018d88 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8018d6c:	683a      	ldr	r2, [r7, #0]
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	0011      	movs	r1, r2
 8018d72:	0018      	movs	r0, r3
 8018d74:	f000 f8f7 	bl	8018f66 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8018d78:	4b05      	ldr	r3, [pc, #20]	@ (8018d90 <USBD_SetConfig+0x144>)
 8018d7a:	781a      	ldrb	r2, [r3, #0]
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	0011      	movs	r1, r2
 8018d80:	0018      	movs	r0, r3
 8018d82:	f7ff f883 	bl	8017e8c <USBD_ClrClassConfig>
        break;
 8018d86:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	b002      	add	sp, #8
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	46c0      	nop			@ (mov r8, r8)
 8018d90:	200024dc 	.word	0x200024dc

08018d94 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b082      	sub	sp, #8
 8018d98:	af00      	add	r7, sp, #0
 8018d9a:	6078      	str	r0, [r7, #4]
 8018d9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018d9e:	683b      	ldr	r3, [r7, #0]
 8018da0:	88db      	ldrh	r3, [r3, #6]
 8018da2:	2b01      	cmp	r3, #1
 8018da4:	d006      	beq.n	8018db4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8018da6:	683a      	ldr	r2, [r7, #0]
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	0011      	movs	r1, r2
 8018dac:	0018      	movs	r0, r3
 8018dae:	f000 f8da 	bl	8018f66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018db2:	e026      	b.n	8018e02 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	23a7      	movs	r3, #167	@ 0xa7
 8018db8:	009b      	lsls	r3, r3, #2
 8018dba:	5cd3      	ldrb	r3, [r2, r3]
 8018dbc:	2b02      	cmp	r3, #2
 8018dbe:	dc02      	bgt.n	8018dc6 <USBD_GetConfig+0x32>
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	dc03      	bgt.n	8018dcc <USBD_GetConfig+0x38>
 8018dc4:	e016      	b.n	8018df4 <USBD_GetConfig+0x60>
 8018dc6:	2b03      	cmp	r3, #3
 8018dc8:	d00c      	beq.n	8018de4 <USBD_GetConfig+0x50>
 8018dca:	e013      	b.n	8018df4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	2200      	movs	r2, #0
 8018dd0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	3308      	adds	r3, #8
 8018dd6:	0019      	movs	r1, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2201      	movs	r2, #1
 8018ddc:	0018      	movs	r0, r3
 8018dde:	f000 f940 	bl	8019062 <USBD_CtlSendData>
        break;
 8018de2:	e00e      	b.n	8018e02 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	1d19      	adds	r1, r3, #4
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2201      	movs	r2, #1
 8018dec:	0018      	movs	r0, r3
 8018dee:	f000 f938 	bl	8019062 <USBD_CtlSendData>
        break;
 8018df2:	e006      	b.n	8018e02 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8018df4:	683a      	ldr	r2, [r7, #0]
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	0011      	movs	r1, r2
 8018dfa:	0018      	movs	r0, r3
 8018dfc:	f000 f8b3 	bl	8018f66 <USBD_CtlError>
        break;
 8018e00:	46c0      	nop			@ (mov r8, r8)
}
 8018e02:	46c0      	nop			@ (mov r8, r8)
 8018e04:	46bd      	mov	sp, r7
 8018e06:	b002      	add	sp, #8
 8018e08:	bd80      	pop	{r7, pc}

08018e0a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018e0a:	b580      	push	{r7, lr}
 8018e0c:	b082      	sub	sp, #8
 8018e0e:	af00      	add	r7, sp, #0
 8018e10:	6078      	str	r0, [r7, #4]
 8018e12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e14:	687a      	ldr	r2, [r7, #4]
 8018e16:	23a7      	movs	r3, #167	@ 0xa7
 8018e18:	009b      	lsls	r3, r3, #2
 8018e1a:	5cd3      	ldrb	r3, [r2, r3]
 8018e1c:	3b01      	subs	r3, #1
 8018e1e:	2b02      	cmp	r3, #2
 8018e20:	d822      	bhi.n	8018e68 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	88db      	ldrh	r3, [r3, #6]
 8018e26:	2b02      	cmp	r3, #2
 8018e28:	d006      	beq.n	8018e38 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8018e2a:	683a      	ldr	r2, [r7, #0]
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	0011      	movs	r1, r2
 8018e30:	0018      	movs	r0, r3
 8018e32:	f000 f898 	bl	8018f66 <USBD_CtlError>
        break;
 8018e36:	e01e      	b.n	8018e76 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	2201      	movs	r2, #1
 8018e3c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8018e3e:	687a      	ldr	r2, [r7, #4]
 8018e40:	23a9      	movs	r3, #169	@ 0xa9
 8018e42:	009b      	lsls	r3, r3, #2
 8018e44:	58d3      	ldr	r3, [r2, r3]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d005      	beq.n	8018e56 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	68db      	ldr	r3, [r3, #12]
 8018e4e:	2202      	movs	r2, #2
 8018e50:	431a      	orrs	r2, r3
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	330c      	adds	r3, #12
 8018e5a:	0019      	movs	r1, r3
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	2202      	movs	r2, #2
 8018e60:	0018      	movs	r0, r3
 8018e62:	f000 f8fe 	bl	8019062 <USBD_CtlSendData>
      break;
 8018e66:	e006      	b.n	8018e76 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8018e68:	683a      	ldr	r2, [r7, #0]
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	0011      	movs	r1, r2
 8018e6e:	0018      	movs	r0, r3
 8018e70:	f000 f879 	bl	8018f66 <USBD_CtlError>
      break;
 8018e74:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018e76:	46c0      	nop			@ (mov r8, r8)
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	b002      	add	sp, #8
 8018e7c:	bd80      	pop	{r7, pc}

08018e7e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018e7e:	b580      	push	{r7, lr}
 8018e80:	b082      	sub	sp, #8
 8018e82:	af00      	add	r7, sp, #0
 8018e84:	6078      	str	r0, [r7, #4]
 8018e86:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	885b      	ldrh	r3, [r3, #2]
 8018e8c:	2b01      	cmp	r3, #1
 8018e8e:	d108      	bne.n	8018ea2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8018e90:	687a      	ldr	r2, [r7, #4]
 8018e92:	23a9      	movs	r3, #169	@ 0xa9
 8018e94:	009b      	lsls	r3, r3, #2
 8018e96:	2101      	movs	r1, #1
 8018e98:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	0018      	movs	r0, r3
 8018e9e:	f000 f94a 	bl	8019136 <USBD_CtlSendStatus>
  }
}
 8018ea2:	46c0      	nop			@ (mov r8, r8)
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	b002      	add	sp, #8
 8018ea8:	bd80      	pop	{r7, pc}

08018eaa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018eaa:	b580      	push	{r7, lr}
 8018eac:	b082      	sub	sp, #8
 8018eae:	af00      	add	r7, sp, #0
 8018eb0:	6078      	str	r0, [r7, #4]
 8018eb2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018eb4:	687a      	ldr	r2, [r7, #4]
 8018eb6:	23a7      	movs	r3, #167	@ 0xa7
 8018eb8:	009b      	lsls	r3, r3, #2
 8018eba:	5cd3      	ldrb	r3, [r2, r3]
 8018ebc:	3b01      	subs	r3, #1
 8018ebe:	2b02      	cmp	r3, #2
 8018ec0:	d80d      	bhi.n	8018ede <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018ec2:	683b      	ldr	r3, [r7, #0]
 8018ec4:	885b      	ldrh	r3, [r3, #2]
 8018ec6:	2b01      	cmp	r3, #1
 8018ec8:	d110      	bne.n	8018eec <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8018eca:	687a      	ldr	r2, [r7, #4]
 8018ecc:	23a9      	movs	r3, #169	@ 0xa9
 8018ece:	009b      	lsls	r3, r3, #2
 8018ed0:	2100      	movs	r1, #0
 8018ed2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	0018      	movs	r0, r3
 8018ed8:	f000 f92d 	bl	8019136 <USBD_CtlSendStatus>
      }
      break;
 8018edc:	e006      	b.n	8018eec <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8018ede:	683a      	ldr	r2, [r7, #0]
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	0011      	movs	r1, r2
 8018ee4:	0018      	movs	r0, r3
 8018ee6:	f000 f83e 	bl	8018f66 <USBD_CtlError>
      break;
 8018eea:	e000      	b.n	8018eee <USBD_ClrFeature+0x44>
      break;
 8018eec:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018eee:	46c0      	nop			@ (mov r8, r8)
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	b002      	add	sp, #8
 8018ef4:	bd80      	pop	{r7, pc}

08018ef6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018ef6:	b580      	push	{r7, lr}
 8018ef8:	b082      	sub	sp, #8
 8018efa:	af00      	add	r7, sp, #0
 8018efc:	6078      	str	r0, [r7, #4]
 8018efe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8018f00:	683b      	ldr	r3, [r7, #0]
 8018f02:	781a      	ldrb	r2, [r3, #0]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8018f08:	683b      	ldr	r3, [r7, #0]
 8018f0a:	785a      	ldrb	r2, [r3, #1]
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	3302      	adds	r3, #2
 8018f14:	781b      	ldrb	r3, [r3, #0]
 8018f16:	001a      	movs	r2, r3
 8018f18:	683b      	ldr	r3, [r7, #0]
 8018f1a:	3303      	adds	r3, #3
 8018f1c:	781b      	ldrb	r3, [r3, #0]
 8018f1e:	021b      	lsls	r3, r3, #8
 8018f20:	b29b      	uxth	r3, r3
 8018f22:	18d3      	adds	r3, r2, r3
 8018f24:	b29a      	uxth	r2, r3
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8018f2a:	683b      	ldr	r3, [r7, #0]
 8018f2c:	3304      	adds	r3, #4
 8018f2e:	781b      	ldrb	r3, [r3, #0]
 8018f30:	001a      	movs	r2, r3
 8018f32:	683b      	ldr	r3, [r7, #0]
 8018f34:	3305      	adds	r3, #5
 8018f36:	781b      	ldrb	r3, [r3, #0]
 8018f38:	021b      	lsls	r3, r3, #8
 8018f3a:	b29b      	uxth	r3, r3
 8018f3c:	18d3      	adds	r3, r2, r3
 8018f3e:	b29a      	uxth	r2, r3
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8018f44:	683b      	ldr	r3, [r7, #0]
 8018f46:	3306      	adds	r3, #6
 8018f48:	781b      	ldrb	r3, [r3, #0]
 8018f4a:	001a      	movs	r2, r3
 8018f4c:	683b      	ldr	r3, [r7, #0]
 8018f4e:	3307      	adds	r3, #7
 8018f50:	781b      	ldrb	r3, [r3, #0]
 8018f52:	021b      	lsls	r3, r3, #8
 8018f54:	b29b      	uxth	r3, r3
 8018f56:	18d3      	adds	r3, r2, r3
 8018f58:	b29a      	uxth	r2, r3
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	80da      	strh	r2, [r3, #6]

}
 8018f5e:	46c0      	nop			@ (mov r8, r8)
 8018f60:	46bd      	mov	sp, r7
 8018f62:	b002      	add	sp, #8
 8018f64:	bd80      	pop	{r7, pc}

08018f66 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8018f66:	b580      	push	{r7, lr}
 8018f68:	b082      	sub	sp, #8
 8018f6a:	af00      	add	r7, sp, #0
 8018f6c:	6078      	str	r0, [r7, #4]
 8018f6e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2180      	movs	r1, #128	@ 0x80
 8018f74:	0018      	movs	r0, r3
 8018f76:	f000 fd1e 	bl	80199b6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	2100      	movs	r1, #0
 8018f7e:	0018      	movs	r0, r3
 8018f80:	f000 fd19 	bl	80199b6 <USBD_LL_StallEP>
}
 8018f84:	46c0      	nop			@ (mov r8, r8)
 8018f86:	46bd      	mov	sp, r7
 8018f88:	b002      	add	sp, #8
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018f8c:	b590      	push	{r4, r7, lr}
 8018f8e:	b087      	sub	sp, #28
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	60f8      	str	r0, [r7, #12]
 8018f94:	60b9      	str	r1, [r7, #8]
 8018f96:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018f98:	2417      	movs	r4, #23
 8018f9a:	193b      	adds	r3, r7, r4
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d03c      	beq.n	8019020 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	0018      	movs	r0, r3
 8018faa:	f000 f83d 	bl	8019028 <USBD_GetLen>
 8018fae:	0003      	movs	r3, r0
 8018fb0:	3301      	adds	r3, #1
 8018fb2:	b29b      	uxth	r3, r3
 8018fb4:	18db      	adds	r3, r3, r3
 8018fb6:	b29a      	uxth	r2, r3
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8018fbc:	193b      	adds	r3, r7, r4
 8018fbe:	781b      	ldrb	r3, [r3, #0]
 8018fc0:	193a      	adds	r2, r7, r4
 8018fc2:	1c59      	adds	r1, r3, #1
 8018fc4:	7011      	strb	r1, [r2, #0]
 8018fc6:	001a      	movs	r2, r3
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	189b      	adds	r3, r3, r2
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	7812      	ldrb	r2, [r2, #0]
 8018fd0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8018fd2:	193b      	adds	r3, r7, r4
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	193a      	adds	r2, r7, r4
 8018fd8:	1c59      	adds	r1, r3, #1
 8018fda:	7011      	strb	r1, [r2, #0]
 8018fdc:	001a      	movs	r2, r3
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	189b      	adds	r3, r3, r2
 8018fe2:	2203      	movs	r2, #3
 8018fe4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8018fe6:	e017      	b.n	8019018 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	1c5a      	adds	r2, r3, #1
 8018fec:	60fa      	str	r2, [r7, #12]
 8018fee:	2417      	movs	r4, #23
 8018ff0:	193a      	adds	r2, r7, r4
 8018ff2:	7812      	ldrb	r2, [r2, #0]
 8018ff4:	1939      	adds	r1, r7, r4
 8018ff6:	1c50      	adds	r0, r2, #1
 8018ff8:	7008      	strb	r0, [r1, #0]
 8018ffa:	0011      	movs	r1, r2
 8018ffc:	68ba      	ldr	r2, [r7, #8]
 8018ffe:	1852      	adds	r2, r2, r1
 8019000:	781b      	ldrb	r3, [r3, #0]
 8019002:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8019004:	193b      	adds	r3, r7, r4
 8019006:	781b      	ldrb	r3, [r3, #0]
 8019008:	193a      	adds	r2, r7, r4
 801900a:	1c59      	adds	r1, r3, #1
 801900c:	7011      	strb	r1, [r2, #0]
 801900e:	001a      	movs	r2, r3
 8019010:	68bb      	ldr	r3, [r7, #8]
 8019012:	189b      	adds	r3, r3, r2
 8019014:	2200      	movs	r2, #0
 8019016:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d1e3      	bne.n	8018fe8 <USBD_GetString+0x5c>
    }
  }
}
 8019020:	46c0      	nop			@ (mov r8, r8)
 8019022:	46bd      	mov	sp, r7
 8019024:	b007      	add	sp, #28
 8019026:	bd90      	pop	{r4, r7, pc}

08019028 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019028:	b580      	push	{r7, lr}
 801902a:	b084      	sub	sp, #16
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8019030:	230f      	movs	r3, #15
 8019032:	18fb      	adds	r3, r7, r3
 8019034:	2200      	movs	r2, #0
 8019036:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8019038:	e008      	b.n	801904c <USBD_GetLen+0x24>
  {
    len++;
 801903a:	210f      	movs	r1, #15
 801903c:	187b      	adds	r3, r7, r1
 801903e:	781a      	ldrb	r2, [r3, #0]
 8019040:	187b      	adds	r3, r7, r1
 8019042:	3201      	adds	r2, #1
 8019044:	701a      	strb	r2, [r3, #0]
    buf++;
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	3301      	adds	r3, #1
 801904a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	781b      	ldrb	r3, [r3, #0]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d1f2      	bne.n	801903a <USBD_GetLen+0x12>
  }

  return len;
 8019054:	230f      	movs	r3, #15
 8019056:	18fb      	adds	r3, r7, r3
 8019058:	781b      	ldrb	r3, [r3, #0]
}
 801905a:	0018      	movs	r0, r3
 801905c:	46bd      	mov	sp, r7
 801905e:	b004      	add	sp, #16
 8019060:	bd80      	pop	{r7, pc}

08019062 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8019062:	b580      	push	{r7, lr}
 8019064:	b084      	sub	sp, #16
 8019066:	af00      	add	r7, sp, #0
 8019068:	60f8      	str	r0, [r7, #12]
 801906a:	60b9      	str	r1, [r7, #8]
 801906c:	1dbb      	adds	r3, r7, #6
 801906e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019070:	68fa      	ldr	r2, [r7, #12]
 8019072:	23a5      	movs	r3, #165	@ 0xa5
 8019074:	009b      	lsls	r3, r3, #2
 8019076:	2102      	movs	r1, #2
 8019078:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801907a:	1dbb      	adds	r3, r7, #6
 801907c:	881a      	ldrh	r2, [r3, #0]
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8019082:	1dbb      	adds	r3, r7, #6
 8019084:	881a      	ldrh	r2, [r3, #0]
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801908a:	1dbb      	adds	r3, r7, #6
 801908c:	881b      	ldrh	r3, [r3, #0]
 801908e:	68ba      	ldr	r2, [r7, #8]
 8019090:	68f8      	ldr	r0, [r7, #12]
 8019092:	2100      	movs	r1, #0
 8019094:	f000 fd41 	bl	8019b1a <USBD_LL_Transmit>

  return USBD_OK;
 8019098:	2300      	movs	r3, #0
}
 801909a:	0018      	movs	r0, r3
 801909c:	46bd      	mov	sp, r7
 801909e:	b004      	add	sp, #16
 80190a0:	bd80      	pop	{r7, pc}

080190a2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80190a2:	b580      	push	{r7, lr}
 80190a4:	b084      	sub	sp, #16
 80190a6:	af00      	add	r7, sp, #0
 80190a8:	60f8      	str	r0, [r7, #12]
 80190aa:	60b9      	str	r1, [r7, #8]
 80190ac:	1dbb      	adds	r3, r7, #6
 80190ae:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80190b0:	1dbb      	adds	r3, r7, #6
 80190b2:	881b      	ldrh	r3, [r3, #0]
 80190b4:	68ba      	ldr	r2, [r7, #8]
 80190b6:	68f8      	ldr	r0, [r7, #12]
 80190b8:	2100      	movs	r1, #0
 80190ba:	f000 fd2e 	bl	8019b1a <USBD_LL_Transmit>

  return USBD_OK;
 80190be:	2300      	movs	r3, #0
}
 80190c0:	0018      	movs	r0, r3
 80190c2:	46bd      	mov	sp, r7
 80190c4:	b004      	add	sp, #16
 80190c6:	bd80      	pop	{r7, pc}

080190c8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b084      	sub	sp, #16
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	60f8      	str	r0, [r7, #12]
 80190d0:	60b9      	str	r1, [r7, #8]
 80190d2:	1dbb      	adds	r3, r7, #6
 80190d4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80190d6:	68fa      	ldr	r2, [r7, #12]
 80190d8:	23a5      	movs	r3, #165	@ 0xa5
 80190da:	009b      	lsls	r3, r3, #2
 80190dc:	2103      	movs	r1, #3
 80190de:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80190e0:	1dbb      	adds	r3, r7, #6
 80190e2:	8819      	ldrh	r1, [r3, #0]
 80190e4:	68fa      	ldr	r2, [r7, #12]
 80190e6:	23ae      	movs	r3, #174	@ 0xae
 80190e8:	005b      	lsls	r3, r3, #1
 80190ea:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80190ec:	1dbb      	adds	r3, r7, #6
 80190ee:	8819      	ldrh	r1, [r3, #0]
 80190f0:	68fa      	ldr	r2, [r7, #12]
 80190f2:	23b0      	movs	r3, #176	@ 0xb0
 80190f4:	005b      	lsls	r3, r3, #1
 80190f6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80190f8:	1dbb      	adds	r3, r7, #6
 80190fa:	881b      	ldrh	r3, [r3, #0]
 80190fc:	68ba      	ldr	r2, [r7, #8]
 80190fe:	68f8      	ldr	r0, [r7, #12]
 8019100:	2100      	movs	r1, #0
 8019102:	f000 fd41 	bl	8019b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019106:	2300      	movs	r3, #0
}
 8019108:	0018      	movs	r0, r3
 801910a:	46bd      	mov	sp, r7
 801910c:	b004      	add	sp, #16
 801910e:	bd80      	pop	{r7, pc}

08019110 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b084      	sub	sp, #16
 8019114:	af00      	add	r7, sp, #0
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	60b9      	str	r1, [r7, #8]
 801911a:	1dbb      	adds	r3, r7, #6
 801911c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801911e:	1dbb      	adds	r3, r7, #6
 8019120:	881b      	ldrh	r3, [r3, #0]
 8019122:	68ba      	ldr	r2, [r7, #8]
 8019124:	68f8      	ldr	r0, [r7, #12]
 8019126:	2100      	movs	r1, #0
 8019128:	f000 fd2e 	bl	8019b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801912c:	2300      	movs	r3, #0
}
 801912e:	0018      	movs	r0, r3
 8019130:	46bd      	mov	sp, r7
 8019132:	b004      	add	sp, #16
 8019134:	bd80      	pop	{r7, pc}

08019136 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019136:	b580      	push	{r7, lr}
 8019138:	b082      	sub	sp, #8
 801913a:	af00      	add	r7, sp, #0
 801913c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801913e:	687a      	ldr	r2, [r7, #4]
 8019140:	23a5      	movs	r3, #165	@ 0xa5
 8019142:	009b      	lsls	r3, r3, #2
 8019144:	2104      	movs	r1, #4
 8019146:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019148:	6878      	ldr	r0, [r7, #4]
 801914a:	2300      	movs	r3, #0
 801914c:	2200      	movs	r2, #0
 801914e:	2100      	movs	r1, #0
 8019150:	f000 fce3 	bl	8019b1a <USBD_LL_Transmit>

  return USBD_OK;
 8019154:	2300      	movs	r3, #0
}
 8019156:	0018      	movs	r0, r3
 8019158:	46bd      	mov	sp, r7
 801915a:	b002      	add	sp, #8
 801915c:	bd80      	pop	{r7, pc}

0801915e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801915e:	b580      	push	{r7, lr}
 8019160:	b082      	sub	sp, #8
 8019162:	af00      	add	r7, sp, #0
 8019164:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8019166:	687a      	ldr	r2, [r7, #4]
 8019168:	23a5      	movs	r3, #165	@ 0xa5
 801916a:	009b      	lsls	r3, r3, #2
 801916c:	2105      	movs	r1, #5
 801916e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019170:	6878      	ldr	r0, [r7, #4]
 8019172:	2300      	movs	r3, #0
 8019174:	2200      	movs	r2, #0
 8019176:	2100      	movs	r1, #0
 8019178:	f000 fd06 	bl	8019b88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801917c:	2300      	movs	r3, #0
}
 801917e:	0018      	movs	r0, r3
 8019180:	46bd      	mov	sp, r7
 8019182:	b002      	add	sp, #8
 8019184:	bd80      	pop	{r7, pc}
	...

08019188 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019188:	b580      	push	{r7, lr}
 801918a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801918c:	4914      	ldr	r1, [pc, #80]	@ (80191e0 <MX_USB_DEVICE_Init+0x58>)
 801918e:	4b15      	ldr	r3, [pc, #84]	@ (80191e4 <MX_USB_DEVICE_Init+0x5c>)
 8019190:	2200      	movs	r2, #0
 8019192:	0018      	movs	r0, r3
 8019194:	f7fe fdec 	bl	8017d70 <USBD_Init>
 8019198:	1e03      	subs	r3, r0, #0
 801919a:	d001      	beq.n	80191a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801919c:	f7ee f9ae 	bl	80074fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80191a0:	4a11      	ldr	r2, [pc, #68]	@ (80191e8 <MX_USB_DEVICE_Init+0x60>)
 80191a2:	4b10      	ldr	r3, [pc, #64]	@ (80191e4 <MX_USB_DEVICE_Init+0x5c>)
 80191a4:	0011      	movs	r1, r2
 80191a6:	0018      	movs	r0, r3
 80191a8:	f7fe fe13 	bl	8017dd2 <USBD_RegisterClass>
 80191ac:	1e03      	subs	r3, r0, #0
 80191ae:	d001      	beq.n	80191b4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80191b0:	f7ee f9a4 	bl	80074fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80191b4:	4a0d      	ldr	r2, [pc, #52]	@ (80191ec <MX_USB_DEVICE_Init+0x64>)
 80191b6:	4b0b      	ldr	r3, [pc, #44]	@ (80191e4 <MX_USB_DEVICE_Init+0x5c>)
 80191b8:	0011      	movs	r1, r2
 80191ba:	0018      	movs	r0, r3
 80191bc:	f7fe fd28 	bl	8017c10 <USBD_CDC_RegisterInterface>
 80191c0:	1e03      	subs	r3, r0, #0
 80191c2:	d001      	beq.n	80191c8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80191c4:	f7ee f99a 	bl	80074fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80191c8:	4b06      	ldr	r3, [pc, #24]	@ (80191e4 <MX_USB_DEVICE_Init+0x5c>)
 80191ca:	0018      	movs	r0, r3
 80191cc:	f7fe fe21 	bl	8017e12 <USBD_Start>
 80191d0:	1e03      	subs	r3, r0, #0
 80191d2:	d001      	beq.n	80191d8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80191d4:	f7ee f992 	bl	80074fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80191d8:	46c0      	nop			@ (mov r8, r8)
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd80      	pop	{r7, pc}
 80191de:	46c0      	nop			@ (mov r8, r8)
 80191e0:	200001fc 	.word	0x200001fc
 80191e4:	200024e0 	.word	0x200024e0
 80191e8:	200000e8 	.word	0x200000e8
 80191ec:	200001ec 	.word	0x200001ec

080191f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80191f4:	4907      	ldr	r1, [pc, #28]	@ (8019214 <CDC_Init_FS+0x24>)
 80191f6:	4b08      	ldr	r3, [pc, #32]	@ (8019218 <CDC_Init_FS+0x28>)
 80191f8:	2200      	movs	r2, #0
 80191fa:	0018      	movs	r0, r3
 80191fc:	f7fe fd23 	bl	8017c46 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019200:	4a06      	ldr	r2, [pc, #24]	@ (801921c <CDC_Init_FS+0x2c>)
 8019202:	4b05      	ldr	r3, [pc, #20]	@ (8019218 <CDC_Init_FS+0x28>)
 8019204:	0011      	movs	r1, r2
 8019206:	0018      	movs	r0, r3
 8019208:	f7fe fd39 	bl	8017c7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801920c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801920e:	0018      	movs	r0, r3
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}
 8019214:	20002c64 	.word	0x20002c64
 8019218:	200024e0 	.word	0x200024e0
 801921c:	20002864 	.word	0x20002864

08019220 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019224:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019226:	0018      	movs	r0, r3
 8019228:	46bd      	mov	sp, r7
 801922a:	bd80      	pop	{r7, pc}

0801922c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b082      	sub	sp, #8
 8019230:	af00      	add	r7, sp, #0
 8019232:	6039      	str	r1, [r7, #0]
 8019234:	0011      	movs	r1, r2
 8019236:	1dfb      	adds	r3, r7, #7
 8019238:	1c02      	adds	r2, r0, #0
 801923a:	701a      	strb	r2, [r3, #0]
 801923c:	1d3b      	adds	r3, r7, #4
 801923e:	1c0a      	adds	r2, r1, #0
 8019240:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019242:	1dfb      	adds	r3, r7, #7
 8019244:	781b      	ldrb	r3, [r3, #0]
 8019246:	2b23      	cmp	r3, #35	@ 0x23
 8019248:	d804      	bhi.n	8019254 <CDC_Control_FS+0x28>
 801924a:	009a      	lsls	r2, r3, #2
 801924c:	4b04      	ldr	r3, [pc, #16]	@ (8019260 <CDC_Control_FS+0x34>)
 801924e:	18d3      	adds	r3, r2, r3
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019254:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 8019256:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019258:	0018      	movs	r0, r3
 801925a:	46bd      	mov	sp, r7
 801925c:	b002      	add	sp, #8
 801925e:	bd80      	pop	{r7, pc}
 8019260:	08020c20 	.word	0x08020c20

08019264 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b082      	sub	sp, #8
 8019268:	af00      	add	r7, sp, #0
 801926a:	6078      	str	r0, [r7, #4]
 801926c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801926e:	4b12      	ldr	r3, [pc, #72]	@ (80192b8 <CDC_Receive_FS+0x54>)
 8019270:	781b      	ldrb	r3, [r3, #0]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d013      	beq.n	801929e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	b29a      	uxth	r2, r3
 801927c:	2301      	movs	r3, #1
 801927e:	425b      	negs	r3, r3
 8019280:	6879      	ldr	r1, [r7, #4]
 8019282:	480e      	ldr	r0, [pc, #56]	@ (80192bc <CDC_Receive_FS+0x58>)
 8019284:	f7fa fa46 	bl	8013714 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019288:	687a      	ldr	r2, [r7, #4]
 801928a:	4b0d      	ldr	r3, [pc, #52]	@ (80192c0 <CDC_Receive_FS+0x5c>)
 801928c:	0011      	movs	r1, r2
 801928e:	0018      	movs	r0, r3
 8019290:	f7fe fcf5 	bl	8017c7e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019294:	4b0a      	ldr	r3, [pc, #40]	@ (80192c0 <CDC_Receive_FS+0x5c>)
 8019296:	0018      	movs	r0, r3
 8019298:	f7fe fd3c 	bl	8017d14 <USBD_CDC_ReceivePacket>
 801929c:	e006      	b.n	80192ac <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	681a      	ldr	r2, [r3, #0]
 80192a2:	4b08      	ldr	r3, [pc, #32]	@ (80192c4 <CDC_Receive_FS+0x60>)
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	18d2      	adds	r2, r2, r3
 80192a8:	4b06      	ldr	r3, [pc, #24]	@ (80192c4 <CDC_Receive_FS+0x60>)
 80192aa:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80192ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80192ae:	0018      	movs	r0, r3
 80192b0:	46bd      	mov	sp, r7
 80192b2:	b002      	add	sp, #8
 80192b4:	bd80      	pop	{r7, pc}
 80192b6:	46c0      	nop			@ (mov r8, r8)
 80192b8:	200027a4 	.word	0x200027a4
 80192bc:	200027a8 	.word	0x200027a8
 80192c0:	200024e0 	.word	0x200024e0
 80192c4:	20002860 	.word	0x20002860

080192c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80192c8:	b5b0      	push	{r4, r5, r7, lr}
 80192ca:	b084      	sub	sp, #16
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
 80192d0:	000a      	movs	r2, r1
 80192d2:	1cbb      	adds	r3, r7, #2
 80192d4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 80192d6:	230f      	movs	r3, #15
 80192d8:	18fb      	adds	r3, r7, r3
 80192da:	2200      	movs	r2, #0
 80192dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80192de:	4a11      	ldr	r2, [pc, #68]	@ (8019324 <CDC_Transmit_FS+0x5c>)
 80192e0:	23ae      	movs	r3, #174	@ 0xae
 80192e2:	009b      	lsls	r3, r3, #2
 80192e4:	58d3      	ldr	r3, [r2, r3]
 80192e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80192e8:	68ba      	ldr	r2, [r7, #8]
 80192ea:	2385      	movs	r3, #133	@ 0x85
 80192ec:	009b      	lsls	r3, r3, #2
 80192ee:	58d3      	ldr	r3, [r2, r3]
 80192f0:	2b00      	cmp	r3, #0
 80192f2:	d001      	beq.n	80192f8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 80192f4:	2301      	movs	r3, #1
 80192f6:	e010      	b.n	801931a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80192f8:	1cbb      	adds	r3, r7, #2
 80192fa:	881a      	ldrh	r2, [r3, #0]
 80192fc:	6879      	ldr	r1, [r7, #4]
 80192fe:	4b09      	ldr	r3, [pc, #36]	@ (8019324 <CDC_Transmit_FS+0x5c>)
 8019300:	0018      	movs	r0, r3
 8019302:	f7fe fca0 	bl	8017c46 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019306:	250f      	movs	r5, #15
 8019308:	197c      	adds	r4, r7, r5
 801930a:	4b06      	ldr	r3, [pc, #24]	@ (8019324 <CDC_Transmit_FS+0x5c>)
 801930c:	0018      	movs	r0, r3
 801930e:	f7fe fcca 	bl	8017ca6 <USBD_CDC_TransmitPacket>
 8019312:	0003      	movs	r3, r0
 8019314:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8019316:	197b      	adds	r3, r7, r5
 8019318:	781b      	ldrb	r3, [r3, #0]
}
 801931a:	0018      	movs	r0, r3
 801931c:	46bd      	mov	sp, r7
 801931e:	b004      	add	sp, #16
 8019320:	bdb0      	pop	{r4, r5, r7, pc}
 8019322:	46c0      	nop			@ (mov r8, r8)
 8019324:	200024e0 	.word	0x200024e0

08019328 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8019328:	b580      	push	{r7, lr}
 801932a:	af00      	add	r7, sp, #0
  ESPProg = true;
 801932c:	4b02      	ldr	r3, [pc, #8]	@ (8019338 <EnableESPProg+0x10>)
 801932e:	2201      	movs	r2, #1
 8019330:	701a      	strb	r2, [r3, #0]
}
 8019332:	46c0      	nop			@ (mov r8, r8)
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}
 8019338:	200027a4 	.word	0x200027a4

0801933c <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801933c:	b580      	push	{r7, lr}
 801933e:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 8019340:	4b01      	ldr	r3, [pc, #4]	@ (8019348 <GetUsbRxPointer+0xc>)
}
 8019342:	0018      	movs	r0, r3
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}
 8019348:	20002864 	.word	0x20002864

0801934c <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 8019350:	4b07      	ldr	r3, [pc, #28]	@ (8019370 <ResetUsbRxDataSize+0x24>)
 8019352:	2200      	movs	r2, #0
 8019354:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 8019356:	4a07      	ldr	r2, [pc, #28]	@ (8019374 <ResetUsbRxDataSize+0x28>)
 8019358:	4b07      	ldr	r3, [pc, #28]	@ (8019378 <ResetUsbRxDataSize+0x2c>)
 801935a:	0011      	movs	r1, r2
 801935c:	0018      	movs	r0, r3
 801935e:	f7fe fc8e 	bl	8017c7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019362:	4b05      	ldr	r3, [pc, #20]	@ (8019378 <ResetUsbRxDataSize+0x2c>)
 8019364:	0018      	movs	r0, r3
 8019366:	f7fe fcd5 	bl	8017d14 <USBD_CDC_ReceivePacket>
}
 801936a:	46c0      	nop			@ (mov r8, r8)
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}
 8019370:	20002860 	.word	0x20002860
 8019374:	20002864 	.word	0x20002864
 8019378:	200024e0 	.word	0x200024e0

0801937c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801937c:	b580      	push	{r7, lr}
 801937e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 8019380:	4b02      	ldr	r3, [pc, #8]	@ (801938c <GetUsbRxDataSize+0x10>)
 8019382:	681b      	ldr	r3, [r3, #0]
}
 8019384:	0018      	movs	r0, r3
 8019386:	46bd      	mov	sp, r7
 8019388:	bd80      	pop	{r7, pc}
 801938a:	46c0      	nop			@ (mov r8, r8)
 801938c:	20002860 	.word	0x20002860

08019390 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b082      	sub	sp, #8
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 8019398:	687a      	ldr	r2, [r7, #4]
 801939a:	4b07      	ldr	r3, [pc, #28]	@ (80193b8 <GetUsbRxNextChunk+0x28>)
 801939c:	18d2      	adds	r2, r2, r3
 801939e:	4b07      	ldr	r3, [pc, #28]	@ (80193bc <GetUsbRxNextChunk+0x2c>)
 80193a0:	0011      	movs	r1, r2
 80193a2:	0018      	movs	r0, r3
 80193a4:	f7fe fc6b 	bl	8017c7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80193a8:	4b04      	ldr	r3, [pc, #16]	@ (80193bc <GetUsbRxNextChunk+0x2c>)
 80193aa:	0018      	movs	r0, r3
 80193ac:	f7fe fcb2 	bl	8017d14 <USBD_CDC_ReceivePacket>
}
 80193b0:	46c0      	nop			@ (mov r8, r8)
 80193b2:	46bd      	mov	sp, r7
 80193b4:	b002      	add	sp, #8
 80193b6:	bd80      	pop	{r7, pc}
 80193b8:	20002864 	.word	0x20002864
 80193bc:	200024e0 	.word	0x200024e0

080193c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b082      	sub	sp, #8
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	0002      	movs	r2, r0
 80193c8:	6039      	str	r1, [r7, #0]
 80193ca:	1dfb      	adds	r3, r7, #7
 80193cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80193ce:	683b      	ldr	r3, [r7, #0]
 80193d0:	2212      	movs	r2, #18
 80193d2:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80193d4:	4b02      	ldr	r3, [pc, #8]	@ (80193e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80193d6:	0018      	movs	r0, r3
 80193d8:	46bd      	mov	sp, r7
 80193da:	b002      	add	sp, #8
 80193dc:	bd80      	pop	{r7, pc}
 80193de:	46c0      	nop			@ (mov r8, r8)
 80193e0:	20000218 	.word	0x20000218

080193e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	b082      	sub	sp, #8
 80193e8:	af00      	add	r7, sp, #0
 80193ea:	0002      	movs	r2, r0
 80193ec:	6039      	str	r1, [r7, #0]
 80193ee:	1dfb      	adds	r3, r7, #7
 80193f0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80193f2:	683b      	ldr	r3, [r7, #0]
 80193f4:	2204      	movs	r2, #4
 80193f6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80193f8:	4b02      	ldr	r3, [pc, #8]	@ (8019404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80193fa:	0018      	movs	r0, r3
 80193fc:	46bd      	mov	sp, r7
 80193fe:	b002      	add	sp, #8
 8019400:	bd80      	pop	{r7, pc}
 8019402:	46c0      	nop			@ (mov r8, r8)
 8019404:	2000022c 	.word	0x2000022c

08019408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b082      	sub	sp, #8
 801940c:	af00      	add	r7, sp, #0
 801940e:	0002      	movs	r2, r0
 8019410:	6039      	str	r1, [r7, #0]
 8019412:	1dfb      	adds	r3, r7, #7
 8019414:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8019416:	1dfb      	adds	r3, r7, #7
 8019418:	781b      	ldrb	r3, [r3, #0]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d106      	bne.n	801942c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801941e:	683a      	ldr	r2, [r7, #0]
 8019420:	4908      	ldr	r1, [pc, #32]	@ (8019444 <USBD_FS_ProductStrDescriptor+0x3c>)
 8019422:	4b09      	ldr	r3, [pc, #36]	@ (8019448 <USBD_FS_ProductStrDescriptor+0x40>)
 8019424:	0018      	movs	r0, r3
 8019426:	f7ff fdb1 	bl	8018f8c <USBD_GetString>
 801942a:	e005      	b.n	8019438 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801942c:	683a      	ldr	r2, [r7, #0]
 801942e:	4905      	ldr	r1, [pc, #20]	@ (8019444 <USBD_FS_ProductStrDescriptor+0x3c>)
 8019430:	4b05      	ldr	r3, [pc, #20]	@ (8019448 <USBD_FS_ProductStrDescriptor+0x40>)
 8019432:	0018      	movs	r0, r3
 8019434:	f7ff fdaa 	bl	8018f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019438:	4b02      	ldr	r3, [pc, #8]	@ (8019444 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801943a:	0018      	movs	r0, r3
 801943c:	46bd      	mov	sp, r7
 801943e:	b002      	add	sp, #8
 8019440:	bd80      	pop	{r7, pc}
 8019442:	46c0      	nop			@ (mov r8, r8)
 8019444:	20003064 	.word	0x20003064
 8019448:	08020740 	.word	0x08020740

0801944c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801944c:	b580      	push	{r7, lr}
 801944e:	b082      	sub	sp, #8
 8019450:	af00      	add	r7, sp, #0
 8019452:	0002      	movs	r2, r0
 8019454:	6039      	str	r1, [r7, #0]
 8019456:	1dfb      	adds	r3, r7, #7
 8019458:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801945a:	683a      	ldr	r2, [r7, #0]
 801945c:	4904      	ldr	r1, [pc, #16]	@ (8019470 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801945e:	4b05      	ldr	r3, [pc, #20]	@ (8019474 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8019460:	0018      	movs	r0, r3
 8019462:	f7ff fd93 	bl	8018f8c <USBD_GetString>
  return USBD_StrDesc;
 8019466:	4b02      	ldr	r3, [pc, #8]	@ (8019470 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8019468:	0018      	movs	r0, r3
 801946a:	46bd      	mov	sp, r7
 801946c:	b002      	add	sp, #8
 801946e:	bd80      	pop	{r7, pc}
 8019470:	20003064 	.word	0x20003064
 8019474:	08020758 	.word	0x08020758

08019478 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019478:	b580      	push	{r7, lr}
 801947a:	b082      	sub	sp, #8
 801947c:	af00      	add	r7, sp, #0
 801947e:	0002      	movs	r2, r0
 8019480:	6039      	str	r1, [r7, #0]
 8019482:	1dfb      	adds	r3, r7, #7
 8019484:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019486:	683b      	ldr	r3, [r7, #0]
 8019488:	221a      	movs	r2, #26
 801948a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801948c:	f000 f84c 	bl	8019528 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019490:	4b02      	ldr	r3, [pc, #8]	@ (801949c <USBD_FS_SerialStrDescriptor+0x24>)
}
 8019492:	0018      	movs	r0, r3
 8019494:	46bd      	mov	sp, r7
 8019496:	b002      	add	sp, #8
 8019498:	bd80      	pop	{r7, pc}
 801949a:	46c0      	nop			@ (mov r8, r8)
 801949c:	20000230 	.word	0x20000230

080194a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194a0:	b580      	push	{r7, lr}
 80194a2:	b082      	sub	sp, #8
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	0002      	movs	r2, r0
 80194a8:	6039      	str	r1, [r7, #0]
 80194aa:	1dfb      	adds	r3, r7, #7
 80194ac:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80194ae:	1dfb      	adds	r3, r7, #7
 80194b0:	781b      	ldrb	r3, [r3, #0]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d106      	bne.n	80194c4 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80194b6:	683a      	ldr	r2, [r7, #0]
 80194b8:	4908      	ldr	r1, [pc, #32]	@ (80194dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80194ba:	4b09      	ldr	r3, [pc, #36]	@ (80194e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80194bc:	0018      	movs	r0, r3
 80194be:	f7ff fd65 	bl	8018f8c <USBD_GetString>
 80194c2:	e005      	b.n	80194d0 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80194c4:	683a      	ldr	r2, [r7, #0]
 80194c6:	4905      	ldr	r1, [pc, #20]	@ (80194dc <USBD_FS_ConfigStrDescriptor+0x3c>)
 80194c8:	4b05      	ldr	r3, [pc, #20]	@ (80194e0 <USBD_FS_ConfigStrDescriptor+0x40>)
 80194ca:	0018      	movs	r0, r3
 80194cc:	f7ff fd5e 	bl	8018f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 80194d0:	4b02      	ldr	r3, [pc, #8]	@ (80194dc <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 80194d2:	0018      	movs	r0, r3
 80194d4:	46bd      	mov	sp, r7
 80194d6:	b002      	add	sp, #8
 80194d8:	bd80      	pop	{r7, pc}
 80194da:	46c0      	nop			@ (mov r8, r8)
 80194dc:	20003064 	.word	0x20003064
 80194e0:	0802076c 	.word	0x0802076c

080194e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	b082      	sub	sp, #8
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	0002      	movs	r2, r0
 80194ec:	6039      	str	r1, [r7, #0]
 80194ee:	1dfb      	adds	r3, r7, #7
 80194f0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 80194f2:	1dfb      	adds	r3, r7, #7
 80194f4:	781b      	ldrb	r3, [r3, #0]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d106      	bne.n	8019508 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80194fa:	683a      	ldr	r2, [r7, #0]
 80194fc:	4908      	ldr	r1, [pc, #32]	@ (8019520 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 80194fe:	4b09      	ldr	r3, [pc, #36]	@ (8019524 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8019500:	0018      	movs	r0, r3
 8019502:	f7ff fd43 	bl	8018f8c <USBD_GetString>
 8019506:	e005      	b.n	8019514 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019508:	683a      	ldr	r2, [r7, #0]
 801950a:	4905      	ldr	r1, [pc, #20]	@ (8019520 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801950c:	4b05      	ldr	r3, [pc, #20]	@ (8019524 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801950e:	0018      	movs	r0, r3
 8019510:	f7ff fd3c 	bl	8018f8c <USBD_GetString>
  }
  return USBD_StrDesc;
 8019514:	4b02      	ldr	r3, [pc, #8]	@ (8019520 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8019516:	0018      	movs	r0, r3
 8019518:	46bd      	mov	sp, r7
 801951a:	b002      	add	sp, #8
 801951c:	bd80      	pop	{r7, pc}
 801951e:	46c0      	nop			@ (mov r8, r8)
 8019520:	20003064 	.word	0x20003064
 8019524:	08020778 	.word	0x08020778

08019528 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b084      	sub	sp, #16
 801952c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801952e:	4b10      	ldr	r3, [pc, #64]	@ (8019570 <Get_SerialNum+0x48>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019534:	4b0f      	ldr	r3, [pc, #60]	@ (8019574 <Get_SerialNum+0x4c>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801953a:	4b0f      	ldr	r3, [pc, #60]	@ (8019578 <Get_SerialNum+0x50>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019540:	68fa      	ldr	r2, [r7, #12]
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	18d3      	adds	r3, r2, r3
 8019546:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019548:	68fb      	ldr	r3, [r7, #12]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d00b      	beq.n	8019566 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801954e:	490b      	ldr	r1, [pc, #44]	@ (801957c <Get_SerialNum+0x54>)
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	2208      	movs	r2, #8
 8019554:	0018      	movs	r0, r3
 8019556:	f000 f815 	bl	8019584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801955a:	4909      	ldr	r1, [pc, #36]	@ (8019580 <Get_SerialNum+0x58>)
 801955c:	68bb      	ldr	r3, [r7, #8]
 801955e:	2204      	movs	r2, #4
 8019560:	0018      	movs	r0, r3
 8019562:	f000 f80f 	bl	8019584 <IntToUnicode>
  }
}
 8019566:	46c0      	nop			@ (mov r8, r8)
 8019568:	46bd      	mov	sp, r7
 801956a:	b004      	add	sp, #16
 801956c:	bd80      	pop	{r7, pc}
 801956e:	46c0      	nop			@ (mov r8, r8)
 8019570:	1ff80050 	.word	0x1ff80050
 8019574:	1ff80054 	.word	0x1ff80054
 8019578:	1ff80058 	.word	0x1ff80058
 801957c:	20000232 	.word	0x20000232
 8019580:	20000242 	.word	0x20000242

08019584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019584:	b580      	push	{r7, lr}
 8019586:	b086      	sub	sp, #24
 8019588:	af00      	add	r7, sp, #0
 801958a:	60f8      	str	r0, [r7, #12]
 801958c:	60b9      	str	r1, [r7, #8]
 801958e:	1dfb      	adds	r3, r7, #7
 8019590:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8019592:	2117      	movs	r1, #23
 8019594:	187b      	adds	r3, r7, r1
 8019596:	2200      	movs	r2, #0
 8019598:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801959a:	187b      	adds	r3, r7, r1
 801959c:	2200      	movs	r2, #0
 801959e:	701a      	strb	r2, [r3, #0]
 80195a0:	e02f      	b.n	8019602 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	0f1b      	lsrs	r3, r3, #28
 80195a6:	2b09      	cmp	r3, #9
 80195a8:	d80d      	bhi.n	80195c6 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	0f1b      	lsrs	r3, r3, #28
 80195ae:	b2da      	uxtb	r2, r3
 80195b0:	2317      	movs	r3, #23
 80195b2:	18fb      	adds	r3, r7, r3
 80195b4:	781b      	ldrb	r3, [r3, #0]
 80195b6:	005b      	lsls	r3, r3, #1
 80195b8:	0019      	movs	r1, r3
 80195ba:	68bb      	ldr	r3, [r7, #8]
 80195bc:	185b      	adds	r3, r3, r1
 80195be:	3230      	adds	r2, #48	@ 0x30
 80195c0:	b2d2      	uxtb	r2, r2
 80195c2:	701a      	strb	r2, [r3, #0]
 80195c4:	e00c      	b.n	80195e0 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	0f1b      	lsrs	r3, r3, #28
 80195ca:	b2da      	uxtb	r2, r3
 80195cc:	2317      	movs	r3, #23
 80195ce:	18fb      	adds	r3, r7, r3
 80195d0:	781b      	ldrb	r3, [r3, #0]
 80195d2:	005b      	lsls	r3, r3, #1
 80195d4:	0019      	movs	r1, r3
 80195d6:	68bb      	ldr	r3, [r7, #8]
 80195d8:	185b      	adds	r3, r3, r1
 80195da:	3237      	adds	r2, #55	@ 0x37
 80195dc:	b2d2      	uxtb	r2, r2
 80195de:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	011b      	lsls	r3, r3, #4
 80195e4:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80195e6:	2117      	movs	r1, #23
 80195e8:	187b      	adds	r3, r7, r1
 80195ea:	781b      	ldrb	r3, [r3, #0]
 80195ec:	005b      	lsls	r3, r3, #1
 80195ee:	3301      	adds	r3, #1
 80195f0:	68ba      	ldr	r2, [r7, #8]
 80195f2:	18d3      	adds	r3, r2, r3
 80195f4:	2200      	movs	r2, #0
 80195f6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80195f8:	187b      	adds	r3, r7, r1
 80195fa:	781a      	ldrb	r2, [r3, #0]
 80195fc:	187b      	adds	r3, r7, r1
 80195fe:	3201      	adds	r2, #1
 8019600:	701a      	strb	r2, [r3, #0]
 8019602:	2317      	movs	r3, #23
 8019604:	18fa      	adds	r2, r7, r3
 8019606:	1dfb      	adds	r3, r7, #7
 8019608:	7812      	ldrb	r2, [r2, #0]
 801960a:	781b      	ldrb	r3, [r3, #0]
 801960c:	429a      	cmp	r2, r3
 801960e:	d3c8      	bcc.n	80195a2 <IntToUnicode+0x1e>
  }
}
 8019610:	46c0      	nop			@ (mov r8, r8)
 8019612:	46c0      	nop			@ (mov r8, r8)
 8019614:	46bd      	mov	sp, r7
 8019616:	b006      	add	sp, #24
 8019618:	bd80      	pop	{r7, pc}
	...

0801961c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	b082      	sub	sp, #8
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	4a0a      	ldr	r2, [pc, #40]	@ (8019654 <HAL_PCD_MspInit+0x38>)
 801962a:	4293      	cmp	r3, r2
 801962c:	d10e      	bne.n	801964c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801962e:	4b0a      	ldr	r3, [pc, #40]	@ (8019658 <HAL_PCD_MspInit+0x3c>)
 8019630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019632:	4b09      	ldr	r3, [pc, #36]	@ (8019658 <HAL_PCD_MspInit+0x3c>)
 8019634:	2180      	movs	r1, #128	@ 0x80
 8019636:	0409      	lsls	r1, r1, #16
 8019638:	430a      	orrs	r2, r1
 801963a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801963c:	2200      	movs	r2, #0
 801963e:	2100      	movs	r1, #0
 8019640:	201f      	movs	r0, #31
 8019642:	f7f3 f8d7 	bl	800c7f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8019646:	201f      	movs	r0, #31
 8019648:	f7f3 f8e9 	bl	800c81e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801964c:	46c0      	nop			@ (mov r8, r8)
 801964e:	46bd      	mov	sp, r7
 8019650:	b002      	add	sp, #8
 8019652:	bd80      	pop	{r7, pc}
 8019654:	40005c00 	.word	0x40005c00
 8019658:	40021000 	.word	0x40021000

0801965c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801965c:	b580      	push	{r7, lr}
 801965e:	b082      	sub	sp, #8
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019664:	687a      	ldr	r2, [r7, #4]
 8019666:	23bc      	movs	r3, #188	@ 0xbc
 8019668:	009b      	lsls	r3, r3, #2
 801966a:	58d2      	ldr	r2, [r2, r3]
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	21ac      	movs	r1, #172	@ 0xac
 8019670:	0089      	lsls	r1, r1, #2
 8019672:	468c      	mov	ip, r1
 8019674:	4463      	add	r3, ip
 8019676:	0019      	movs	r1, r3
 8019678:	0010      	movs	r0, r2
 801967a:	f7fe fc1d 	bl	8017eb8 <USBD_LL_SetupStage>
}
 801967e:	46c0      	nop			@ (mov r8, r8)
 8019680:	46bd      	mov	sp, r7
 8019682:	b002      	add	sp, #8
 8019684:	bd80      	pop	{r7, pc}

08019686 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019686:	b590      	push	{r4, r7, lr}
 8019688:	b083      	sub	sp, #12
 801968a:	af00      	add	r7, sp, #0
 801968c:	6078      	str	r0, [r7, #4]
 801968e:	000a      	movs	r2, r1
 8019690:	1cfb      	adds	r3, r7, #3
 8019692:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019694:	687a      	ldr	r2, [r7, #4]
 8019696:	23bc      	movs	r3, #188	@ 0xbc
 8019698:	009b      	lsls	r3, r3, #2
 801969a:	58d4      	ldr	r4, [r2, r3]
 801969c:	1cfb      	adds	r3, r7, #3
 801969e:	781a      	ldrb	r2, [r3, #0]
 80196a0:	6878      	ldr	r0, [r7, #4]
 80196a2:	23be      	movs	r3, #190	@ 0xbe
 80196a4:	0059      	lsls	r1, r3, #1
 80196a6:	0013      	movs	r3, r2
 80196a8:	009b      	lsls	r3, r3, #2
 80196aa:	189b      	adds	r3, r3, r2
 80196ac:	00db      	lsls	r3, r3, #3
 80196ae:	18c3      	adds	r3, r0, r3
 80196b0:	185b      	adds	r3, r3, r1
 80196b2:	681a      	ldr	r2, [r3, #0]
 80196b4:	1cfb      	adds	r3, r7, #3
 80196b6:	781b      	ldrb	r3, [r3, #0]
 80196b8:	0019      	movs	r1, r3
 80196ba:	0020      	movs	r0, r4
 80196bc:	f7fe fc5a 	bl	8017f74 <USBD_LL_DataOutStage>
}
 80196c0:	46c0      	nop			@ (mov r8, r8)
 80196c2:	46bd      	mov	sp, r7
 80196c4:	b003      	add	sp, #12
 80196c6:	bd90      	pop	{r4, r7, pc}

080196c8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b082      	sub	sp, #8
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	6078      	str	r0, [r7, #4]
 80196d0:	000a      	movs	r2, r1
 80196d2:	1cfb      	adds	r3, r7, #3
 80196d4:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80196d6:	687a      	ldr	r2, [r7, #4]
 80196d8:	23bc      	movs	r3, #188	@ 0xbc
 80196da:	009b      	lsls	r3, r3, #2
 80196dc:	58d0      	ldr	r0, [r2, r3]
 80196de:	1cfb      	adds	r3, r7, #3
 80196e0:	781a      	ldrb	r2, [r3, #0]
 80196e2:	6879      	ldr	r1, [r7, #4]
 80196e4:	0013      	movs	r3, r2
 80196e6:	009b      	lsls	r3, r3, #2
 80196e8:	189b      	adds	r3, r3, r2
 80196ea:	00db      	lsls	r3, r3, #3
 80196ec:	18cb      	adds	r3, r1, r3
 80196ee:	333c      	adds	r3, #60	@ 0x3c
 80196f0:	681a      	ldr	r2, [r3, #0]
 80196f2:	1cfb      	adds	r3, r7, #3
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	0019      	movs	r1, r3
 80196f8:	f7fe fcbe 	bl	8018078 <USBD_LL_DataInStage>
}
 80196fc:	46c0      	nop			@ (mov r8, r8)
 80196fe:	46bd      	mov	sp, r7
 8019700:	b002      	add	sp, #8
 8019702:	bd80      	pop	{r7, pc}

08019704 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b082      	sub	sp, #8
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801970c:	687a      	ldr	r2, [r7, #4]
 801970e:	23bc      	movs	r3, #188	@ 0xbc
 8019710:	009b      	lsls	r3, r3, #2
 8019712:	58d3      	ldr	r3, [r2, r3]
 8019714:	0018      	movs	r0, r3
 8019716:	f7fe fdf5 	bl	8018304 <USBD_LL_SOF>
}
 801971a:	46c0      	nop			@ (mov r8, r8)
 801971c:	46bd      	mov	sp, r7
 801971e:	b002      	add	sp, #8
 8019720:	bd80      	pop	{r7, pc}

08019722 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019722:	b580      	push	{r7, lr}
 8019724:	b084      	sub	sp, #16
 8019726:	af00      	add	r7, sp, #0
 8019728:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801972a:	230f      	movs	r3, #15
 801972c:	18fb      	adds	r3, r7, r3
 801972e:	2201      	movs	r2, #1
 8019730:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	689b      	ldr	r3, [r3, #8]
 8019736:	2b02      	cmp	r3, #2
 8019738:	d001      	beq.n	801973e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801973a:	f7ed fedf 	bl	80074fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801973e:	687a      	ldr	r2, [r7, #4]
 8019740:	23bc      	movs	r3, #188	@ 0xbc
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	58d2      	ldr	r2, [r2, r3]
 8019746:	230f      	movs	r3, #15
 8019748:	18fb      	adds	r3, r7, r3
 801974a:	781b      	ldrb	r3, [r3, #0]
 801974c:	0019      	movs	r1, r3
 801974e:	0010      	movs	r0, r2
 8019750:	f7fe fd97 	bl	8018282 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019754:	687a      	ldr	r2, [r7, #4]
 8019756:	23bc      	movs	r3, #188	@ 0xbc
 8019758:	009b      	lsls	r3, r3, #2
 801975a:	58d3      	ldr	r3, [r2, r3]
 801975c:	0018      	movs	r0, r3
 801975e:	f7fe fd48 	bl	80181f2 <USBD_LL_Reset>
}
 8019762:	46c0      	nop			@ (mov r8, r8)
 8019764:	46bd      	mov	sp, r7
 8019766:	b004      	add	sp, #16
 8019768:	bd80      	pop	{r7, pc}
	...

0801976c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b082      	sub	sp, #8
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019774:	687a      	ldr	r2, [r7, #4]
 8019776:	23bc      	movs	r3, #188	@ 0xbc
 8019778:	009b      	lsls	r3, r3, #2
 801977a:	58d3      	ldr	r3, [r2, r3]
 801977c:	0018      	movs	r0, r3
 801977e:	f7fe fd91 	bl	80182a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	699b      	ldr	r3, [r3, #24]
 8019786:	2b00      	cmp	r3, #0
 8019788:	d005      	beq.n	8019796 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801978a:	4b05      	ldr	r3, [pc, #20]	@ (80197a0 <HAL_PCD_SuspendCallback+0x34>)
 801978c:	691a      	ldr	r2, [r3, #16]
 801978e:	4b04      	ldr	r3, [pc, #16]	@ (80197a0 <HAL_PCD_SuspendCallback+0x34>)
 8019790:	2106      	movs	r1, #6
 8019792:	430a      	orrs	r2, r1
 8019794:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8019796:	46c0      	nop			@ (mov r8, r8)
 8019798:	46bd      	mov	sp, r7
 801979a:	b002      	add	sp, #8
 801979c:	bd80      	pop	{r7, pc}
 801979e:	46c0      	nop			@ (mov r8, r8)
 80197a0:	e000ed00 	.word	0xe000ed00

080197a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b082      	sub	sp, #8
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	699b      	ldr	r3, [r3, #24]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d007      	beq.n	80197c4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80197b4:	4b09      	ldr	r3, [pc, #36]	@ (80197dc <HAL_PCD_ResumeCallback+0x38>)
 80197b6:	691a      	ldr	r2, [r3, #16]
 80197b8:	4b08      	ldr	r3, [pc, #32]	@ (80197dc <HAL_PCD_ResumeCallback+0x38>)
 80197ba:	2106      	movs	r1, #6
 80197bc:	438a      	bics	r2, r1
 80197be:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80197c0:	f000 fa44 	bl	8019c4c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80197c4:	687a      	ldr	r2, [r7, #4]
 80197c6:	23bc      	movs	r3, #188	@ 0xbc
 80197c8:	009b      	lsls	r3, r3, #2
 80197ca:	58d3      	ldr	r3, [r2, r3]
 80197cc:	0018      	movs	r0, r3
 80197ce:	f7fe fd81 	bl	80182d4 <USBD_LL_Resume>
}
 80197d2:	46c0      	nop			@ (mov r8, r8)
 80197d4:	46bd      	mov	sp, r7
 80197d6:	b002      	add	sp, #8
 80197d8:	bd80      	pop	{r7, pc}
 80197da:	46c0      	nop			@ (mov r8, r8)
 80197dc:	e000ed00 	.word	0xe000ed00

080197e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b082      	sub	sp, #8
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80197e8:	4a2d      	ldr	r2, [pc, #180]	@ (80198a0 <USBD_LL_Init+0xc0>)
 80197ea:	23bc      	movs	r3, #188	@ 0xbc
 80197ec:	009b      	lsls	r3, r3, #2
 80197ee:	6879      	ldr	r1, [r7, #4]
 80197f0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80197f2:	687a      	ldr	r2, [r7, #4]
 80197f4:	23b0      	movs	r3, #176	@ 0xb0
 80197f6:	009b      	lsls	r3, r3, #2
 80197f8:	4929      	ldr	r1, [pc, #164]	@ (80198a0 <USBD_LL_Init+0xc0>)
 80197fa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80197fc:	4b28      	ldr	r3, [pc, #160]	@ (80198a0 <USBD_LL_Init+0xc0>)
 80197fe:	4a29      	ldr	r2, [pc, #164]	@ (80198a4 <USBD_LL_Init+0xc4>)
 8019800:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8019802:	4b27      	ldr	r3, [pc, #156]	@ (80198a0 <USBD_LL_Init+0xc0>)
 8019804:	2208      	movs	r2, #8
 8019806:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019808:	4b25      	ldr	r3, [pc, #148]	@ (80198a0 <USBD_LL_Init+0xc0>)
 801980a:	2202      	movs	r2, #2
 801980c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801980e:	4b24      	ldr	r3, [pc, #144]	@ (80198a0 <USBD_LL_Init+0xc0>)
 8019810:	2202      	movs	r2, #2
 8019812:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019814:	4b22      	ldr	r3, [pc, #136]	@ (80198a0 <USBD_LL_Init+0xc0>)
 8019816:	2200      	movs	r2, #0
 8019818:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801981a:	4b21      	ldr	r3, [pc, #132]	@ (80198a0 <USBD_LL_Init+0xc0>)
 801981c:	2200      	movs	r2, #0
 801981e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8019820:	4b1f      	ldr	r3, [pc, #124]	@ (80198a0 <USBD_LL_Init+0xc0>)
 8019822:	2200      	movs	r2, #0
 8019824:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019826:	4b1e      	ldr	r3, [pc, #120]	@ (80198a0 <USBD_LL_Init+0xc0>)
 8019828:	0018      	movs	r0, r3
 801982a:	f7f6 f90b 	bl	800fa44 <HAL_PCD_Init>
 801982e:	1e03      	subs	r3, r0, #0
 8019830:	d001      	beq.n	8019836 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8019832:	f7ed fe63 	bl	80074fc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019836:	687a      	ldr	r2, [r7, #4]
 8019838:	23b0      	movs	r3, #176	@ 0xb0
 801983a:	009b      	lsls	r3, r3, #2
 801983c:	58d0      	ldr	r0, [r2, r3]
 801983e:	2318      	movs	r3, #24
 8019840:	2200      	movs	r2, #0
 8019842:	2100      	movs	r1, #0
 8019844:	f7f7 fecc 	bl	80115e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019848:	687a      	ldr	r2, [r7, #4]
 801984a:	23b0      	movs	r3, #176	@ 0xb0
 801984c:	009b      	lsls	r3, r3, #2
 801984e:	58d0      	ldr	r0, [r2, r3]
 8019850:	2358      	movs	r3, #88	@ 0x58
 8019852:	2200      	movs	r2, #0
 8019854:	2180      	movs	r1, #128	@ 0x80
 8019856:	f7f7 fec3 	bl	80115e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801985a:	687a      	ldr	r2, [r7, #4]
 801985c:	23b0      	movs	r3, #176	@ 0xb0
 801985e:	009b      	lsls	r3, r3, #2
 8019860:	58d0      	ldr	r0, [r2, r3]
 8019862:	23c0      	movs	r3, #192	@ 0xc0
 8019864:	2200      	movs	r2, #0
 8019866:	2181      	movs	r1, #129	@ 0x81
 8019868:	f7f7 feba 	bl	80115e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801986c:	687a      	ldr	r2, [r7, #4]
 801986e:	23b0      	movs	r3, #176	@ 0xb0
 8019870:	009b      	lsls	r3, r3, #2
 8019872:	58d0      	ldr	r0, [r2, r3]
 8019874:	2388      	movs	r3, #136	@ 0x88
 8019876:	005b      	lsls	r3, r3, #1
 8019878:	2200      	movs	r2, #0
 801987a:	2101      	movs	r1, #1
 801987c:	f7f7 feb0 	bl	80115e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019880:	687a      	ldr	r2, [r7, #4]
 8019882:	23b0      	movs	r3, #176	@ 0xb0
 8019884:	009b      	lsls	r3, r3, #2
 8019886:	58d0      	ldr	r0, [r2, r3]
 8019888:	2380      	movs	r3, #128	@ 0x80
 801988a:	005b      	lsls	r3, r3, #1
 801988c:	2200      	movs	r2, #0
 801988e:	2182      	movs	r1, #130	@ 0x82
 8019890:	f7f7 fea6 	bl	80115e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019894:	2300      	movs	r3, #0
}
 8019896:	0018      	movs	r0, r3
 8019898:	46bd      	mov	sp, r7
 801989a:	b002      	add	sp, #8
 801989c:	bd80      	pop	{r7, pc}
 801989e:	46c0      	nop			@ (mov r8, r8)
 80198a0:	20003264 	.word	0x20003264
 80198a4:	40005c00 	.word	0x40005c00

080198a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80198a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198aa:	b085      	sub	sp, #20
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198b0:	210f      	movs	r1, #15
 80198b2:	187b      	adds	r3, r7, r1
 80198b4:	2200      	movs	r2, #0
 80198b6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198b8:	260e      	movs	r6, #14
 80198ba:	19bb      	adds	r3, r7, r6
 80198bc:	2200      	movs	r2, #0
 80198be:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80198c0:	687a      	ldr	r2, [r7, #4]
 80198c2:	23b0      	movs	r3, #176	@ 0xb0
 80198c4:	009b      	lsls	r3, r3, #2
 80198c6:	58d3      	ldr	r3, [r2, r3]
 80198c8:	000d      	movs	r5, r1
 80198ca:	187c      	adds	r4, r7, r1
 80198cc:	0018      	movs	r0, r3
 80198ce:	f7f6 f9b9 	bl	800fc44 <HAL_PCD_Start>
 80198d2:	0003      	movs	r3, r0
 80198d4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198d6:	19bc      	adds	r4, r7, r6
 80198d8:	197b      	adds	r3, r7, r5
 80198da:	781b      	ldrb	r3, [r3, #0]
 80198dc:	0018      	movs	r0, r3
 80198de:	f000 f9bc 	bl	8019c5a <USBD_Get_USB_Status>
 80198e2:	0003      	movs	r3, r0
 80198e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80198e6:	19bb      	adds	r3, r7, r6
 80198e8:	781b      	ldrb	r3, [r3, #0]
}
 80198ea:	0018      	movs	r0, r3
 80198ec:	46bd      	mov	sp, r7
 80198ee:	b005      	add	sp, #20
 80198f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080198f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80198f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198f4:	b085      	sub	sp, #20
 80198f6:	af00      	add	r7, sp, #0
 80198f8:	6078      	str	r0, [r7, #4]
 80198fa:	000c      	movs	r4, r1
 80198fc:	0010      	movs	r0, r2
 80198fe:	0019      	movs	r1, r3
 8019900:	1cfb      	adds	r3, r7, #3
 8019902:	1c22      	adds	r2, r4, #0
 8019904:	701a      	strb	r2, [r3, #0]
 8019906:	1cbb      	adds	r3, r7, #2
 8019908:	1c02      	adds	r2, r0, #0
 801990a:	701a      	strb	r2, [r3, #0]
 801990c:	003b      	movs	r3, r7
 801990e:	1c0a      	adds	r2, r1, #0
 8019910:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019912:	260f      	movs	r6, #15
 8019914:	19bb      	adds	r3, r7, r6
 8019916:	2200      	movs	r2, #0
 8019918:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801991a:	250e      	movs	r5, #14
 801991c:	197b      	adds	r3, r7, r5
 801991e:	2200      	movs	r2, #0
 8019920:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019922:	687a      	ldr	r2, [r7, #4]
 8019924:	23b0      	movs	r3, #176	@ 0xb0
 8019926:	009b      	lsls	r3, r3, #2
 8019928:	58d0      	ldr	r0, [r2, r3]
 801992a:	19bc      	adds	r4, r7, r6
 801992c:	1cbb      	adds	r3, r7, #2
 801992e:	781d      	ldrb	r5, [r3, #0]
 8019930:	003b      	movs	r3, r7
 8019932:	881a      	ldrh	r2, [r3, #0]
 8019934:	1cfb      	adds	r3, r7, #3
 8019936:	7819      	ldrb	r1, [r3, #0]
 8019938:	002b      	movs	r3, r5
 801993a:	f7f6 fb18 	bl	800ff6e <HAL_PCD_EP_Open>
 801993e:	0003      	movs	r3, r0
 8019940:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019942:	250e      	movs	r5, #14
 8019944:	197c      	adds	r4, r7, r5
 8019946:	19bb      	adds	r3, r7, r6
 8019948:	781b      	ldrb	r3, [r3, #0]
 801994a:	0018      	movs	r0, r3
 801994c:	f000 f985 	bl	8019c5a <USBD_Get_USB_Status>
 8019950:	0003      	movs	r3, r0
 8019952:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019954:	197b      	adds	r3, r7, r5
 8019956:	781b      	ldrb	r3, [r3, #0]
}
 8019958:	0018      	movs	r0, r3
 801995a:	46bd      	mov	sp, r7
 801995c:	b005      	add	sp, #20
 801995e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019960 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019962:	b085      	sub	sp, #20
 8019964:	af00      	add	r7, sp, #0
 8019966:	6078      	str	r0, [r7, #4]
 8019968:	000a      	movs	r2, r1
 801996a:	1cfb      	adds	r3, r7, #3
 801996c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801996e:	210f      	movs	r1, #15
 8019970:	187b      	adds	r3, r7, r1
 8019972:	2200      	movs	r2, #0
 8019974:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019976:	260e      	movs	r6, #14
 8019978:	19bb      	adds	r3, r7, r6
 801997a:	2200      	movs	r2, #0
 801997c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801997e:	687a      	ldr	r2, [r7, #4]
 8019980:	23b0      	movs	r3, #176	@ 0xb0
 8019982:	009b      	lsls	r3, r3, #2
 8019984:	58d2      	ldr	r2, [r2, r3]
 8019986:	000d      	movs	r5, r1
 8019988:	187c      	adds	r4, r7, r1
 801998a:	1cfb      	adds	r3, r7, #3
 801998c:	781b      	ldrb	r3, [r3, #0]
 801998e:	0019      	movs	r1, r3
 8019990:	0010      	movs	r0, r2
 8019992:	f7f6 fb5b 	bl	801004c <HAL_PCD_EP_Close>
 8019996:	0003      	movs	r3, r0
 8019998:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801999a:	19bc      	adds	r4, r7, r6
 801999c:	197b      	adds	r3, r7, r5
 801999e:	781b      	ldrb	r3, [r3, #0]
 80199a0:	0018      	movs	r0, r3
 80199a2:	f000 f95a 	bl	8019c5a <USBD_Get_USB_Status>
 80199a6:	0003      	movs	r3, r0
 80199a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80199aa:	19bb      	adds	r3, r7, r6
 80199ac:	781b      	ldrb	r3, [r3, #0]
}
 80199ae:	0018      	movs	r0, r3
 80199b0:	46bd      	mov	sp, r7
 80199b2:	b005      	add	sp, #20
 80199b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080199b6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199b8:	b085      	sub	sp, #20
 80199ba:	af00      	add	r7, sp, #0
 80199bc:	6078      	str	r0, [r7, #4]
 80199be:	000a      	movs	r2, r1
 80199c0:	1cfb      	adds	r3, r7, #3
 80199c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199c4:	210f      	movs	r1, #15
 80199c6:	187b      	adds	r3, r7, r1
 80199c8:	2200      	movs	r2, #0
 80199ca:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199cc:	260e      	movs	r6, #14
 80199ce:	19bb      	adds	r3, r7, r6
 80199d0:	2200      	movs	r2, #0
 80199d2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	23b0      	movs	r3, #176	@ 0xb0
 80199d8:	009b      	lsls	r3, r3, #2
 80199da:	58d2      	ldr	r2, [r2, r3]
 80199dc:	000d      	movs	r5, r1
 80199de:	187c      	adds	r4, r7, r1
 80199e0:	1cfb      	adds	r3, r7, #3
 80199e2:	781b      	ldrb	r3, [r3, #0]
 80199e4:	0019      	movs	r1, r3
 80199e6:	0010      	movs	r0, r2
 80199e8:	f7f6 fc0d 	bl	8010206 <HAL_PCD_EP_SetStall>
 80199ec:	0003      	movs	r3, r0
 80199ee:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199f0:	19bc      	adds	r4, r7, r6
 80199f2:	197b      	adds	r3, r7, r5
 80199f4:	781b      	ldrb	r3, [r3, #0]
 80199f6:	0018      	movs	r0, r3
 80199f8:	f000 f92f 	bl	8019c5a <USBD_Get_USB_Status>
 80199fc:	0003      	movs	r3, r0
 80199fe:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019a00:	19bb      	adds	r3, r7, r6
 8019a02:	781b      	ldrb	r3, [r3, #0]
}
 8019a04:	0018      	movs	r0, r3
 8019a06:	46bd      	mov	sp, r7
 8019a08:	b005      	add	sp, #20
 8019a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a0c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a0e:	b085      	sub	sp, #20
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
 8019a14:	000a      	movs	r2, r1
 8019a16:	1cfb      	adds	r3, r7, #3
 8019a18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a1a:	210f      	movs	r1, #15
 8019a1c:	187b      	adds	r3, r7, r1
 8019a1e:	2200      	movs	r2, #0
 8019a20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a22:	260e      	movs	r6, #14
 8019a24:	19bb      	adds	r3, r7, r6
 8019a26:	2200      	movs	r2, #0
 8019a28:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019a2a:	687a      	ldr	r2, [r7, #4]
 8019a2c:	23b0      	movs	r3, #176	@ 0xb0
 8019a2e:	009b      	lsls	r3, r3, #2
 8019a30:	58d2      	ldr	r2, [r2, r3]
 8019a32:	000d      	movs	r5, r1
 8019a34:	187c      	adds	r4, r7, r1
 8019a36:	1cfb      	adds	r3, r7, #3
 8019a38:	781b      	ldrb	r3, [r3, #0]
 8019a3a:	0019      	movs	r1, r3
 8019a3c:	0010      	movs	r0, r2
 8019a3e:	f7f6 fc3e 	bl	80102be <HAL_PCD_EP_ClrStall>
 8019a42:	0003      	movs	r3, r0
 8019a44:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a46:	19bc      	adds	r4, r7, r6
 8019a48:	197b      	adds	r3, r7, r5
 8019a4a:	781b      	ldrb	r3, [r3, #0]
 8019a4c:	0018      	movs	r0, r3
 8019a4e:	f000 f904 	bl	8019c5a <USBD_Get_USB_Status>
 8019a52:	0003      	movs	r3, r0
 8019a54:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019a56:	19bb      	adds	r3, r7, r6
 8019a58:	781b      	ldrb	r3, [r3, #0]
}
 8019a5a:	0018      	movs	r0, r3
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	b005      	add	sp, #20
 8019a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a62 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a62:	b580      	push	{r7, lr}
 8019a64:	b084      	sub	sp, #16
 8019a66:	af00      	add	r7, sp, #0
 8019a68:	6078      	str	r0, [r7, #4]
 8019a6a:	000a      	movs	r2, r1
 8019a6c:	1cfb      	adds	r3, r7, #3
 8019a6e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019a70:	687a      	ldr	r2, [r7, #4]
 8019a72:	23b0      	movs	r3, #176	@ 0xb0
 8019a74:	009b      	lsls	r3, r3, #2
 8019a76:	58d3      	ldr	r3, [r2, r3]
 8019a78:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019a7a:	1cfb      	adds	r3, r7, #3
 8019a7c:	781b      	ldrb	r3, [r3, #0]
 8019a7e:	b25b      	sxtb	r3, r3
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	da0d      	bge.n	8019aa0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019a84:	1cfb      	adds	r3, r7, #3
 8019a86:	781b      	ldrb	r3, [r3, #0]
 8019a88:	227f      	movs	r2, #127	@ 0x7f
 8019a8a:	4013      	ands	r3, r2
 8019a8c:	68f9      	ldr	r1, [r7, #12]
 8019a8e:	1c5a      	adds	r2, r3, #1
 8019a90:	0013      	movs	r3, r2
 8019a92:	009b      	lsls	r3, r3, #2
 8019a94:	189b      	adds	r3, r3, r2
 8019a96:	00db      	lsls	r3, r3, #3
 8019a98:	18cb      	adds	r3, r1, r3
 8019a9a:	3302      	adds	r3, #2
 8019a9c:	781b      	ldrb	r3, [r3, #0]
 8019a9e:	e00d      	b.n	8019abc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019aa0:	1cfb      	adds	r3, r7, #3
 8019aa2:	781b      	ldrb	r3, [r3, #0]
 8019aa4:	227f      	movs	r2, #127	@ 0x7f
 8019aa6:	401a      	ands	r2, r3
 8019aa8:	68f8      	ldr	r0, [r7, #12]
 8019aaa:	23b5      	movs	r3, #181	@ 0xb5
 8019aac:	0059      	lsls	r1, r3, #1
 8019aae:	0013      	movs	r3, r2
 8019ab0:	009b      	lsls	r3, r3, #2
 8019ab2:	189b      	adds	r3, r3, r2
 8019ab4:	00db      	lsls	r3, r3, #3
 8019ab6:	18c3      	adds	r3, r0, r3
 8019ab8:	185b      	adds	r3, r3, r1
 8019aba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019abc:	0018      	movs	r0, r3
 8019abe:	46bd      	mov	sp, r7
 8019ac0:	b004      	add	sp, #16
 8019ac2:	bd80      	pop	{r7, pc}

08019ac4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ac6:	b085      	sub	sp, #20
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]
 8019acc:	000a      	movs	r2, r1
 8019ace:	1cfb      	adds	r3, r7, #3
 8019ad0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ad2:	210f      	movs	r1, #15
 8019ad4:	187b      	adds	r3, r7, r1
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ada:	260e      	movs	r6, #14
 8019adc:	19bb      	adds	r3, r7, r6
 8019ade:	2200      	movs	r2, #0
 8019ae0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019ae2:	687a      	ldr	r2, [r7, #4]
 8019ae4:	23b0      	movs	r3, #176	@ 0xb0
 8019ae6:	009b      	lsls	r3, r3, #2
 8019ae8:	58d2      	ldr	r2, [r2, r3]
 8019aea:	000d      	movs	r5, r1
 8019aec:	187c      	adds	r4, r7, r1
 8019aee:	1cfb      	adds	r3, r7, #3
 8019af0:	781b      	ldrb	r3, [r3, #0]
 8019af2:	0019      	movs	r1, r3
 8019af4:	0010      	movs	r0, r2
 8019af6:	f7f6 fa0f 	bl	800ff18 <HAL_PCD_SetAddress>
 8019afa:	0003      	movs	r3, r0
 8019afc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019afe:	19bc      	adds	r4, r7, r6
 8019b00:	197b      	adds	r3, r7, r5
 8019b02:	781b      	ldrb	r3, [r3, #0]
 8019b04:	0018      	movs	r0, r3
 8019b06:	f000 f8a8 	bl	8019c5a <USBD_Get_USB_Status>
 8019b0a:	0003      	movs	r3, r0
 8019b0c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019b0e:	19bb      	adds	r3, r7, r6
 8019b10:	781b      	ldrb	r3, [r3, #0]
}
 8019b12:	0018      	movs	r0, r3
 8019b14:	46bd      	mov	sp, r7
 8019b16:	b005      	add	sp, #20
 8019b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b1c:	b087      	sub	sp, #28
 8019b1e:	af00      	add	r7, sp, #0
 8019b20:	60f8      	str	r0, [r7, #12]
 8019b22:	0008      	movs	r0, r1
 8019b24:	607a      	str	r2, [r7, #4]
 8019b26:	0019      	movs	r1, r3
 8019b28:	230b      	movs	r3, #11
 8019b2a:	18fb      	adds	r3, r7, r3
 8019b2c:	1c02      	adds	r2, r0, #0
 8019b2e:	701a      	strb	r2, [r3, #0]
 8019b30:	2408      	movs	r4, #8
 8019b32:	193b      	adds	r3, r7, r4
 8019b34:	1c0a      	adds	r2, r1, #0
 8019b36:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b38:	2117      	movs	r1, #23
 8019b3a:	187b      	adds	r3, r7, r1
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b40:	2516      	movs	r5, #22
 8019b42:	197b      	adds	r3, r7, r5
 8019b44:	2200      	movs	r2, #0
 8019b46:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019b48:	68fa      	ldr	r2, [r7, #12]
 8019b4a:	23b0      	movs	r3, #176	@ 0xb0
 8019b4c:	009b      	lsls	r3, r3, #2
 8019b4e:	58d0      	ldr	r0, [r2, r3]
 8019b50:	193b      	adds	r3, r7, r4
 8019b52:	881d      	ldrh	r5, [r3, #0]
 8019b54:	000e      	movs	r6, r1
 8019b56:	187c      	adds	r4, r7, r1
 8019b58:	687a      	ldr	r2, [r7, #4]
 8019b5a:	230b      	movs	r3, #11
 8019b5c:	18fb      	adds	r3, r7, r3
 8019b5e:	7819      	ldrb	r1, [r3, #0]
 8019b60:	002b      	movs	r3, r5
 8019b62:	f7f6 fb14 	bl	801018e <HAL_PCD_EP_Transmit>
 8019b66:	0003      	movs	r3, r0
 8019b68:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b6a:	2516      	movs	r5, #22
 8019b6c:	197c      	adds	r4, r7, r5
 8019b6e:	19bb      	adds	r3, r7, r6
 8019b70:	781b      	ldrb	r3, [r3, #0]
 8019b72:	0018      	movs	r0, r3
 8019b74:	f000 f871 	bl	8019c5a <USBD_Get_USB_Status>
 8019b78:	0003      	movs	r3, r0
 8019b7a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019b7c:	197b      	adds	r3, r7, r5
 8019b7e:	781b      	ldrb	r3, [r3, #0]
}
 8019b80:	0018      	movs	r0, r3
 8019b82:	46bd      	mov	sp, r7
 8019b84:	b007      	add	sp, #28
 8019b86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b8a:	b087      	sub	sp, #28
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	60f8      	str	r0, [r7, #12]
 8019b90:	0008      	movs	r0, r1
 8019b92:	607a      	str	r2, [r7, #4]
 8019b94:	0019      	movs	r1, r3
 8019b96:	230b      	movs	r3, #11
 8019b98:	18fb      	adds	r3, r7, r3
 8019b9a:	1c02      	adds	r2, r0, #0
 8019b9c:	701a      	strb	r2, [r3, #0]
 8019b9e:	2408      	movs	r4, #8
 8019ba0:	193b      	adds	r3, r7, r4
 8019ba2:	1c0a      	adds	r2, r1, #0
 8019ba4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ba6:	2117      	movs	r1, #23
 8019ba8:	187b      	adds	r3, r7, r1
 8019baa:	2200      	movs	r2, #0
 8019bac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bae:	2516      	movs	r5, #22
 8019bb0:	197b      	adds	r3, r7, r5
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019bb6:	68fa      	ldr	r2, [r7, #12]
 8019bb8:	23b0      	movs	r3, #176	@ 0xb0
 8019bba:	009b      	lsls	r3, r3, #2
 8019bbc:	58d0      	ldr	r0, [r2, r3]
 8019bbe:	193b      	adds	r3, r7, r4
 8019bc0:	881d      	ldrh	r5, [r3, #0]
 8019bc2:	000e      	movs	r6, r1
 8019bc4:	187c      	adds	r4, r7, r1
 8019bc6:	687a      	ldr	r2, [r7, #4]
 8019bc8:	230b      	movs	r3, #11
 8019bca:	18fb      	adds	r3, r7, r3
 8019bcc:	7819      	ldrb	r1, [r3, #0]
 8019bce:	002b      	movs	r3, r5
 8019bd0:	f7f6 fa8d 	bl	80100ee <HAL_PCD_EP_Receive>
 8019bd4:	0003      	movs	r3, r0
 8019bd6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019bd8:	2516      	movs	r5, #22
 8019bda:	197c      	adds	r4, r7, r5
 8019bdc:	19bb      	adds	r3, r7, r6
 8019bde:	781b      	ldrb	r3, [r3, #0]
 8019be0:	0018      	movs	r0, r3
 8019be2:	f000 f83a 	bl	8019c5a <USBD_Get_USB_Status>
 8019be6:	0003      	movs	r3, r0
 8019be8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019bea:	197b      	adds	r3, r7, r5
 8019bec:	781b      	ldrb	r3, [r3, #0]
}
 8019bee:	0018      	movs	r0, r3
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	b007      	add	sp, #28
 8019bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019bf6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bf6:	b580      	push	{r7, lr}
 8019bf8:	b082      	sub	sp, #8
 8019bfa:	af00      	add	r7, sp, #0
 8019bfc:	6078      	str	r0, [r7, #4]
 8019bfe:	000a      	movs	r2, r1
 8019c00:	1cfb      	adds	r3, r7, #3
 8019c02:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019c04:	687a      	ldr	r2, [r7, #4]
 8019c06:	23b0      	movs	r3, #176	@ 0xb0
 8019c08:	009b      	lsls	r3, r3, #2
 8019c0a:	58d2      	ldr	r2, [r2, r3]
 8019c0c:	1cfb      	adds	r3, r7, #3
 8019c0e:	781b      	ldrb	r3, [r3, #0]
 8019c10:	0019      	movs	r1, r3
 8019c12:	0010      	movs	r0, r2
 8019c14:	f7f6 faa2 	bl	801015c <HAL_PCD_EP_GetRxCount>
 8019c18:	0003      	movs	r3, r0
}
 8019c1a:	0018      	movs	r0, r3
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	b002      	add	sp, #8
 8019c20:	bd80      	pop	{r7, pc}
	...

08019c24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b082      	sub	sp, #8
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019c2c:	4b02      	ldr	r3, [pc, #8]	@ (8019c38 <USBD_static_malloc+0x14>)
}
 8019c2e:	0018      	movs	r0, r3
 8019c30:	46bd      	mov	sp, r7
 8019c32:	b002      	add	sp, #8
 8019c34:	bd80      	pop	{r7, pc}
 8019c36:	46c0      	nop			@ (mov r8, r8)
 8019c38:	20003558 	.word	0x20003558

08019c3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019c3c:	b580      	push	{r7, lr}
 8019c3e:	b082      	sub	sp, #8
 8019c40:	af00      	add	r7, sp, #0
 8019c42:	6078      	str	r0, [r7, #4]

}
 8019c44:	46c0      	nop			@ (mov r8, r8)
 8019c46:	46bd      	mov	sp, r7
 8019c48:	b002      	add	sp, #8
 8019c4a:	bd80      	pop	{r7, pc}

08019c4c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019c4c:	b580      	push	{r7, lr}
 8019c4e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019c50:	f7ed fb3c 	bl	80072cc <SystemClock_Config>
}
 8019c54:	46c0      	nop			@ (mov r8, r8)
 8019c56:	46bd      	mov	sp, r7
 8019c58:	bd80      	pop	{r7, pc}

08019c5a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019c5a:	b580      	push	{r7, lr}
 8019c5c:	b084      	sub	sp, #16
 8019c5e:	af00      	add	r7, sp, #0
 8019c60:	0002      	movs	r2, r0
 8019c62:	1dfb      	adds	r3, r7, #7
 8019c64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c66:	230f      	movs	r3, #15
 8019c68:	18fb      	adds	r3, r7, r3
 8019c6a:	2200      	movs	r2, #0
 8019c6c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8019c6e:	1dfb      	adds	r3, r7, #7
 8019c70:	781b      	ldrb	r3, [r3, #0]
 8019c72:	2b03      	cmp	r3, #3
 8019c74:	d017      	beq.n	8019ca6 <USBD_Get_USB_Status+0x4c>
 8019c76:	dc1b      	bgt.n	8019cb0 <USBD_Get_USB_Status+0x56>
 8019c78:	2b02      	cmp	r3, #2
 8019c7a:	d00f      	beq.n	8019c9c <USBD_Get_USB_Status+0x42>
 8019c7c:	dc18      	bgt.n	8019cb0 <USBD_Get_USB_Status+0x56>
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d002      	beq.n	8019c88 <USBD_Get_USB_Status+0x2e>
 8019c82:	2b01      	cmp	r3, #1
 8019c84:	d005      	beq.n	8019c92 <USBD_Get_USB_Status+0x38>
 8019c86:	e013      	b.n	8019cb0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019c88:	230f      	movs	r3, #15
 8019c8a:	18fb      	adds	r3, r7, r3
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	701a      	strb	r2, [r3, #0]
    break;
 8019c90:	e013      	b.n	8019cba <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c92:	230f      	movs	r3, #15
 8019c94:	18fb      	adds	r3, r7, r3
 8019c96:	2202      	movs	r2, #2
 8019c98:	701a      	strb	r2, [r3, #0]
    break;
 8019c9a:	e00e      	b.n	8019cba <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c9c:	230f      	movs	r3, #15
 8019c9e:	18fb      	adds	r3, r7, r3
 8019ca0:	2201      	movs	r2, #1
 8019ca2:	701a      	strb	r2, [r3, #0]
    break;
 8019ca4:	e009      	b.n	8019cba <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019ca6:	230f      	movs	r3, #15
 8019ca8:	18fb      	adds	r3, r7, r3
 8019caa:	2202      	movs	r2, #2
 8019cac:	701a      	strb	r2, [r3, #0]
    break;
 8019cae:	e004      	b.n	8019cba <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8019cb0:	230f      	movs	r3, #15
 8019cb2:	18fb      	adds	r3, r7, r3
 8019cb4:	2202      	movs	r2, #2
 8019cb6:	701a      	strb	r2, [r3, #0]
    break;
 8019cb8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8019cba:	230f      	movs	r3, #15
 8019cbc:	18fb      	adds	r3, r7, r3
 8019cbe:	781b      	ldrb	r3, [r3, #0]
}
 8019cc0:	0018      	movs	r0, r3
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	b004      	add	sp, #16
 8019cc6:	bd80      	pop	{r7, pc}

08019cc8 <arm_cfft_radix4by2_q31>:
 8019cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cca:	465f      	mov	r7, fp
 8019ccc:	4656      	mov	r6, sl
 8019cce:	464d      	mov	r5, r9
 8019cd0:	4644      	mov	r4, r8
 8019cd2:	000b      	movs	r3, r1
 8019cd4:	b4f0      	push	{r4, r5, r6, r7}
 8019cd6:	085b      	lsrs	r3, r3, #1
 8019cd8:	b08f      	sub	sp, #60	@ 0x3c
 8019cda:	910a      	str	r1, [sp, #40]	@ 0x28
 8019cdc:	0007      	movs	r7, r0
 8019cde:	9009      	str	r0, [sp, #36]	@ 0x24
 8019ce0:	0011      	movs	r1, r2
 8019ce2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d100      	bne.n	8019cec <arm_cfft_radix4by2_q31+0x24>
 8019cea:	e0a0      	b.n	8019e2e <arm_cfft_radix4by2_q31+0x166>
 8019cec:	0002      	movs	r2, r0
 8019cee:	00db      	lsls	r3, r3, #3
 8019cf0:	3204      	adds	r2, #4
 8019cf2:	4691      	mov	r9, r2
 8019cf4:	4698      	mov	r8, r3
 8019cf6:	000a      	movs	r2, r1
 8019cf8:	464e      	mov	r6, r9
 8019cfa:	4442      	add	r2, r8
 8019cfc:	4699      	mov	r9, r3
 8019cfe:	4688      	mov	r8, r1
 8019d00:	9208      	str	r2, [sp, #32]
 8019d02:	900d      	str	r0, [sp, #52]	@ 0x34
 8019d04:	4643      	mov	r3, r8
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	469b      	mov	fp, r3
 8019d0a:	4643      	mov	r3, r8
 8019d0c:	685b      	ldr	r3, [r3, #4]
 8019d0e:	469a      	mov	sl, r3
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	109c      	asrs	r4, r3, #2
 8019d14:	464b      	mov	r3, r9
 8019d16:	58fb      	ldr	r3, [r7, r3]
 8019d18:	109a      	asrs	r2, r3, #2
 8019d1a:	18a3      	adds	r3, r4, r2
 8019d1c:	603b      	str	r3, [r7, #0]
 8019d1e:	6833      	ldr	r3, [r6, #0]
 8019d20:	1aa4      	subs	r4, r4, r2
 8019d22:	109d      	asrs	r5, r3, #2
 8019d24:	464b      	mov	r3, r9
 8019d26:	58f3      	ldr	r3, [r6, r3]
 8019d28:	17e2      	asrs	r2, r4, #31
 8019d2a:	109b      	asrs	r3, r3, #2
 8019d2c:	18e9      	adds	r1, r5, r3
 8019d2e:	6031      	str	r1, [r6, #0]
 8019d30:	0011      	movs	r1, r2
 8019d32:	465a      	mov	r2, fp
 8019d34:	17d2      	asrs	r2, r2, #31
 8019d36:	0010      	movs	r0, r2
 8019d38:	4652      	mov	r2, sl
 8019d3a:	1aed      	subs	r5, r5, r3
 8019d3c:	17eb      	asrs	r3, r5, #31
 8019d3e:	17d2      	asrs	r2, r2, #31
 8019d40:	9307      	str	r3, [sp, #28]
 8019d42:	9204      	str	r2, [sp, #16]
 8019d44:	0003      	movs	r3, r0
 8019d46:	465a      	mov	r2, fp
 8019d48:	9006      	str	r0, [sp, #24]
 8019d4a:	0020      	movs	r0, r4
 8019d4c:	9105      	str	r1, [sp, #20]
 8019d4e:	f7e6 fc37 	bl	80005c0 <__aeabi_lmul>
 8019d52:	2280      	movs	r2, #128	@ 0x80
 8019d54:	2300      	movs	r3, #0
 8019d56:	0612      	lsls	r2, r2, #24
 8019d58:	1880      	adds	r0, r0, r2
 8019d5a:	4159      	adcs	r1, r3
 8019d5c:	2300      	movs	r3, #0
 8019d5e:	9101      	str	r1, [sp, #4]
 8019d60:	9300      	str	r3, [sp, #0]
 8019d62:	4652      	mov	r2, sl
 8019d64:	9b04      	ldr	r3, [sp, #16]
 8019d66:	0028      	movs	r0, r5
 8019d68:	17e9      	asrs	r1, r5, #31
 8019d6a:	f7e6 fc29 	bl	80005c0 <__aeabi_lmul>
 8019d6e:	9a00      	ldr	r2, [sp, #0]
 8019d70:	9b01      	ldr	r3, [sp, #4]
 8019d72:	1880      	adds	r0, r0, r2
 8019d74:	4159      	adcs	r1, r3
 8019d76:	2280      	movs	r2, #128	@ 0x80
 8019d78:	2300      	movs	r3, #0
 8019d7a:	0612      	lsls	r2, r2, #24
 8019d7c:	1880      	adds	r0, r0, r2
 8019d7e:	4159      	adcs	r1, r3
 8019d80:	464a      	mov	r2, r9
 8019d82:	004b      	lsls	r3, r1, #1
 8019d84:	50bb      	str	r3, [r7, r2]
 8019d86:	4658      	mov	r0, fp
 8019d88:	002a      	movs	r2, r5
 8019d8a:	9b07      	ldr	r3, [sp, #28]
 8019d8c:	9906      	ldr	r1, [sp, #24]
 8019d8e:	f7e6 fc17 	bl	80005c0 <__aeabi_lmul>
 8019d92:	2280      	movs	r2, #128	@ 0x80
 8019d94:	2300      	movs	r3, #0
 8019d96:	0612      	lsls	r2, r2, #24
 8019d98:	1880      	adds	r0, r0, r2
 8019d9a:	4159      	adcs	r1, r3
 8019d9c:	2000      	movs	r0, #0
 8019d9e:	9103      	str	r1, [sp, #12]
 8019da0:	9002      	str	r0, [sp, #8]
 8019da2:	4652      	mov	r2, sl
 8019da4:	9b04      	ldr	r3, [sp, #16]
 8019da6:	0020      	movs	r0, r4
 8019da8:	9905      	ldr	r1, [sp, #20]
 8019daa:	f7e6 fc09 	bl	80005c0 <__aeabi_lmul>
 8019dae:	9a02      	ldr	r2, [sp, #8]
 8019db0:	9b03      	ldr	r3, [sp, #12]
 8019db2:	1a12      	subs	r2, r2, r0
 8019db4:	418b      	sbcs	r3, r1
 8019db6:	2080      	movs	r0, #128	@ 0x80
 8019db8:	2100      	movs	r1, #0
 8019dba:	0600      	lsls	r0, r0, #24
 8019dbc:	1812      	adds	r2, r2, r0
 8019dbe:	414b      	adcs	r3, r1
 8019dc0:	464a      	mov	r2, r9
 8019dc2:	005b      	lsls	r3, r3, #1
 8019dc4:	50b3      	str	r3, [r6, r2]
 8019dc6:	2308      	movs	r3, #8
 8019dc8:	469c      	mov	ip, r3
 8019dca:	9b08      	ldr	r3, [sp, #32]
 8019dcc:	44e0      	add	r8, ip
 8019dce:	3708      	adds	r7, #8
 8019dd0:	3608      	adds	r6, #8
 8019dd2:	4598      	cmp	r8, r3
 8019dd4:	d196      	bne.n	8019d04 <arm_cfft_radix4by2_q31+0x3c>
 8019dd6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019dd8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019dda:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019ddc:	2302      	movs	r3, #2
 8019dde:	003a      	movs	r2, r7
 8019de0:	0029      	movs	r1, r5
 8019de2:	0020      	movs	r0, r4
 8019de4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8019de6:	f000 f957 	bl	801a098 <arm_radix4_butterfly_q31>
 8019dea:	46a4      	mov	ip, r4
 8019dec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019dee:	2302      	movs	r3, #2
 8019df0:	0088      	lsls	r0, r1, #2
 8019df2:	4460      	add	r0, ip
 8019df4:	003a      	movs	r2, r7
 8019df6:	0029      	movs	r1, r5
 8019df8:	f000 f94e 	bl	801a098 <arm_radix4_butterfly_q31>
 8019dfc:	46a4      	mov	ip, r4
 8019dfe:	0128      	lsls	r0, r5, #4
 8019e00:	4460      	add	r0, ip
 8019e02:	6833      	ldr	r3, [r6, #0]
 8019e04:	005b      	lsls	r3, r3, #1
 8019e06:	6033      	str	r3, [r6, #0]
 8019e08:	6873      	ldr	r3, [r6, #4]
 8019e0a:	005b      	lsls	r3, r3, #1
 8019e0c:	6073      	str	r3, [r6, #4]
 8019e0e:	68b3      	ldr	r3, [r6, #8]
 8019e10:	005b      	lsls	r3, r3, #1
 8019e12:	60b3      	str	r3, [r6, #8]
 8019e14:	68f3      	ldr	r3, [r6, #12]
 8019e16:	005b      	lsls	r3, r3, #1
 8019e18:	60f3      	str	r3, [r6, #12]
 8019e1a:	3610      	adds	r6, #16
 8019e1c:	42b0      	cmp	r0, r6
 8019e1e:	d1f0      	bne.n	8019e02 <arm_cfft_radix4by2_q31+0x13a>
 8019e20:	b00f      	add	sp, #60	@ 0x3c
 8019e22:	bc3c      	pop	{r2, r3, r4, r5}
 8019e24:	4690      	mov	r8, r2
 8019e26:	4699      	mov	r9, r3
 8019e28:	46a2      	mov	sl, r4
 8019e2a:	46ab      	mov	fp, r5
 8019e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e2e:	2302      	movs	r3, #2
 8019e30:	2100      	movs	r1, #0
 8019e32:	0015      	movs	r5, r2
 8019e34:	f000 f930 	bl	801a098 <arm_radix4_butterfly_q31>
 8019e38:	46bc      	mov	ip, r7
 8019e3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e3c:	002a      	movs	r2, r5
 8019e3e:	0098      	lsls	r0, r3, #2
 8019e40:	4460      	add	r0, ip
 8019e42:	2302      	movs	r3, #2
 8019e44:	2100      	movs	r1, #0
 8019e46:	f000 f927 	bl	801a098 <arm_radix4_butterfly_q31>
 8019e4a:	e7e9      	b.n	8019e20 <arm_cfft_radix4by2_q31+0x158>

08019e4c <arm_cfft_radix4by2_inverse_q31>:
 8019e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e4e:	465f      	mov	r7, fp
 8019e50:	4656      	mov	r6, sl
 8019e52:	464d      	mov	r5, r9
 8019e54:	4644      	mov	r4, r8
 8019e56:	000b      	movs	r3, r1
 8019e58:	b4f0      	push	{r4, r5, r6, r7}
 8019e5a:	085b      	lsrs	r3, r3, #1
 8019e5c:	b08f      	sub	sp, #60	@ 0x3c
 8019e5e:	910a      	str	r1, [sp, #40]	@ 0x28
 8019e60:	0007      	movs	r7, r0
 8019e62:	9009      	str	r0, [sp, #36]	@ 0x24
 8019e64:	0011      	movs	r1, r2
 8019e66:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019e68:	930c      	str	r3, [sp, #48]	@ 0x30
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d100      	bne.n	8019e70 <arm_cfft_radix4by2_inverse_q31+0x24>
 8019e6e:	e0a0      	b.n	8019fb2 <arm_cfft_radix4by2_inverse_q31+0x166>
 8019e70:	0002      	movs	r2, r0
 8019e72:	00db      	lsls	r3, r3, #3
 8019e74:	3204      	adds	r2, #4
 8019e76:	4691      	mov	r9, r2
 8019e78:	4698      	mov	r8, r3
 8019e7a:	000a      	movs	r2, r1
 8019e7c:	464e      	mov	r6, r9
 8019e7e:	4442      	add	r2, r8
 8019e80:	4699      	mov	r9, r3
 8019e82:	4688      	mov	r8, r1
 8019e84:	9208      	str	r2, [sp, #32]
 8019e86:	900d      	str	r0, [sp, #52]	@ 0x34
 8019e88:	4643      	mov	r3, r8
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	469b      	mov	fp, r3
 8019e8e:	4643      	mov	r3, r8
 8019e90:	685b      	ldr	r3, [r3, #4]
 8019e92:	469a      	mov	sl, r3
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	109c      	asrs	r4, r3, #2
 8019e98:	464b      	mov	r3, r9
 8019e9a:	58fb      	ldr	r3, [r7, r3]
 8019e9c:	109a      	asrs	r2, r3, #2
 8019e9e:	18a3      	adds	r3, r4, r2
 8019ea0:	603b      	str	r3, [r7, #0]
 8019ea2:	6833      	ldr	r3, [r6, #0]
 8019ea4:	1aa4      	subs	r4, r4, r2
 8019ea6:	109d      	asrs	r5, r3, #2
 8019ea8:	464b      	mov	r3, r9
 8019eaa:	58f3      	ldr	r3, [r6, r3]
 8019eac:	17e2      	asrs	r2, r4, #31
 8019eae:	109b      	asrs	r3, r3, #2
 8019eb0:	18e9      	adds	r1, r5, r3
 8019eb2:	6031      	str	r1, [r6, #0]
 8019eb4:	0011      	movs	r1, r2
 8019eb6:	465a      	mov	r2, fp
 8019eb8:	17d2      	asrs	r2, r2, #31
 8019eba:	0010      	movs	r0, r2
 8019ebc:	4652      	mov	r2, sl
 8019ebe:	1aed      	subs	r5, r5, r3
 8019ec0:	17eb      	asrs	r3, r5, #31
 8019ec2:	17d2      	asrs	r2, r2, #31
 8019ec4:	9307      	str	r3, [sp, #28]
 8019ec6:	9204      	str	r2, [sp, #16]
 8019ec8:	0003      	movs	r3, r0
 8019eca:	465a      	mov	r2, fp
 8019ecc:	9006      	str	r0, [sp, #24]
 8019ece:	0020      	movs	r0, r4
 8019ed0:	9105      	str	r1, [sp, #20]
 8019ed2:	f7e6 fb75 	bl	80005c0 <__aeabi_lmul>
 8019ed6:	2280      	movs	r2, #128	@ 0x80
 8019ed8:	2300      	movs	r3, #0
 8019eda:	0612      	lsls	r2, r2, #24
 8019edc:	1880      	adds	r0, r0, r2
 8019ede:	4159      	adcs	r1, r3
 8019ee0:	2300      	movs	r3, #0
 8019ee2:	9101      	str	r1, [sp, #4]
 8019ee4:	9300      	str	r3, [sp, #0]
 8019ee6:	4652      	mov	r2, sl
 8019ee8:	9b04      	ldr	r3, [sp, #16]
 8019eea:	0028      	movs	r0, r5
 8019eec:	17e9      	asrs	r1, r5, #31
 8019eee:	f7e6 fb67 	bl	80005c0 <__aeabi_lmul>
 8019ef2:	9a00      	ldr	r2, [sp, #0]
 8019ef4:	9b01      	ldr	r3, [sp, #4]
 8019ef6:	1a12      	subs	r2, r2, r0
 8019ef8:	418b      	sbcs	r3, r1
 8019efa:	2080      	movs	r0, #128	@ 0x80
 8019efc:	2100      	movs	r1, #0
 8019efe:	0600      	lsls	r0, r0, #24
 8019f00:	1812      	adds	r2, r2, r0
 8019f02:	414b      	adcs	r3, r1
 8019f04:	464a      	mov	r2, r9
 8019f06:	005b      	lsls	r3, r3, #1
 8019f08:	50bb      	str	r3, [r7, r2]
 8019f0a:	4658      	mov	r0, fp
 8019f0c:	002a      	movs	r2, r5
 8019f0e:	9b07      	ldr	r3, [sp, #28]
 8019f10:	9906      	ldr	r1, [sp, #24]
 8019f12:	f7e6 fb55 	bl	80005c0 <__aeabi_lmul>
 8019f16:	2280      	movs	r2, #128	@ 0x80
 8019f18:	2300      	movs	r3, #0
 8019f1a:	0612      	lsls	r2, r2, #24
 8019f1c:	1880      	adds	r0, r0, r2
 8019f1e:	4159      	adcs	r1, r3
 8019f20:	2000      	movs	r0, #0
 8019f22:	9103      	str	r1, [sp, #12]
 8019f24:	9002      	str	r0, [sp, #8]
 8019f26:	4652      	mov	r2, sl
 8019f28:	9b04      	ldr	r3, [sp, #16]
 8019f2a:	0020      	movs	r0, r4
 8019f2c:	9905      	ldr	r1, [sp, #20]
 8019f2e:	f7e6 fb47 	bl	80005c0 <__aeabi_lmul>
 8019f32:	9b02      	ldr	r3, [sp, #8]
 8019f34:	9c03      	ldr	r4, [sp, #12]
 8019f36:	18c0      	adds	r0, r0, r3
 8019f38:	4161      	adcs	r1, r4
 8019f3a:	2380      	movs	r3, #128	@ 0x80
 8019f3c:	2400      	movs	r4, #0
 8019f3e:	061b      	lsls	r3, r3, #24
 8019f40:	18c0      	adds	r0, r0, r3
 8019f42:	4161      	adcs	r1, r4
 8019f44:	464a      	mov	r2, r9
 8019f46:	004b      	lsls	r3, r1, #1
 8019f48:	50b3      	str	r3, [r6, r2]
 8019f4a:	2308      	movs	r3, #8
 8019f4c:	469c      	mov	ip, r3
 8019f4e:	9b08      	ldr	r3, [sp, #32]
 8019f50:	44e0      	add	r8, ip
 8019f52:	3708      	adds	r7, #8
 8019f54:	3608      	adds	r6, #8
 8019f56:	4598      	cmp	r8, r3
 8019f58:	d196      	bne.n	8019e88 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8019f5a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019f5c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019f5e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019f60:	2302      	movs	r3, #2
 8019f62:	003a      	movs	r2, r7
 8019f64:	0029      	movs	r1, r5
 8019f66:	0020      	movs	r0, r4
 8019f68:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8019f6a:	f000 fb3b 	bl	801a5e4 <arm_radix4_butterfly_inverse_q31>
 8019f6e:	46a4      	mov	ip, r4
 8019f70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f72:	2302      	movs	r3, #2
 8019f74:	0088      	lsls	r0, r1, #2
 8019f76:	4460      	add	r0, ip
 8019f78:	003a      	movs	r2, r7
 8019f7a:	0029      	movs	r1, r5
 8019f7c:	f000 fb32 	bl	801a5e4 <arm_radix4_butterfly_inverse_q31>
 8019f80:	46a4      	mov	ip, r4
 8019f82:	0128      	lsls	r0, r5, #4
 8019f84:	4460      	add	r0, ip
 8019f86:	6833      	ldr	r3, [r6, #0]
 8019f88:	005b      	lsls	r3, r3, #1
 8019f8a:	6033      	str	r3, [r6, #0]
 8019f8c:	6873      	ldr	r3, [r6, #4]
 8019f8e:	005b      	lsls	r3, r3, #1
 8019f90:	6073      	str	r3, [r6, #4]
 8019f92:	68b3      	ldr	r3, [r6, #8]
 8019f94:	005b      	lsls	r3, r3, #1
 8019f96:	60b3      	str	r3, [r6, #8]
 8019f98:	68f3      	ldr	r3, [r6, #12]
 8019f9a:	005b      	lsls	r3, r3, #1
 8019f9c:	60f3      	str	r3, [r6, #12]
 8019f9e:	3610      	adds	r6, #16
 8019fa0:	42b0      	cmp	r0, r6
 8019fa2:	d1f0      	bne.n	8019f86 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8019fa4:	b00f      	add	sp, #60	@ 0x3c
 8019fa6:	bc3c      	pop	{r2, r3, r4, r5}
 8019fa8:	4690      	mov	r8, r2
 8019faa:	4699      	mov	r9, r3
 8019fac:	46a2      	mov	sl, r4
 8019fae:	46ab      	mov	fp, r5
 8019fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019fb2:	2302      	movs	r3, #2
 8019fb4:	2100      	movs	r1, #0
 8019fb6:	0015      	movs	r5, r2
 8019fb8:	f000 fb14 	bl	801a5e4 <arm_radix4_butterfly_inverse_q31>
 8019fbc:	46bc      	mov	ip, r7
 8019fbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019fc0:	002a      	movs	r2, r5
 8019fc2:	0098      	lsls	r0, r3, #2
 8019fc4:	4460      	add	r0, ip
 8019fc6:	2302      	movs	r3, #2
 8019fc8:	2100      	movs	r1, #0
 8019fca:	f000 fb0b 	bl	801a5e4 <arm_radix4_butterfly_inverse_q31>
 8019fce:	e7e9      	b.n	8019fa4 <arm_cfft_radix4by2_inverse_q31+0x158>

08019fd0 <arm_cfft_q31>:
 8019fd0:	b570      	push	{r4, r5, r6, lr}
 8019fd2:	001e      	movs	r6, r3
 8019fd4:	2380      	movs	r3, #128	@ 0x80
 8019fd6:	000d      	movs	r5, r1
 8019fd8:	0004      	movs	r4, r0
 8019fda:	8801      	ldrh	r1, [r0, #0]
 8019fdc:	005b      	lsls	r3, r3, #1
 8019fde:	2a01      	cmp	r2, #1
 8019fe0:	d028      	beq.n	801a034 <arm_cfft_q31+0x64>
 8019fe2:	4299      	cmp	r1, r3
 8019fe4:	d020      	beq.n	801a028 <arm_cfft_q31+0x58>
 8019fe6:	d812      	bhi.n	801a00e <arm_cfft_q31+0x3e>
 8019fe8:	2920      	cmp	r1, #32
 8019fea:	d004      	beq.n	8019ff6 <arm_cfft_q31+0x26>
 8019fec:	d949      	bls.n	801a082 <arm_cfft_q31+0xb2>
 8019fee:	2940      	cmp	r1, #64	@ 0x40
 8019ff0:	d01a      	beq.n	801a028 <arm_cfft_q31+0x58>
 8019ff2:	2980      	cmp	r1, #128	@ 0x80
 8019ff4:	d103      	bne.n	8019ffe <arm_cfft_q31+0x2e>
 8019ff6:	6862      	ldr	r2, [r4, #4]
 8019ff8:	0028      	movs	r0, r5
 8019ffa:	f7ff fe65 	bl	8019cc8 <arm_cfft_radix4by2_q31>
 8019ffe:	2e00      	cmp	r6, #0
 801a000:	d004      	beq.n	801a00c <arm_cfft_q31+0x3c>
 801a002:	68a2      	ldr	r2, [r4, #8]
 801a004:	89a1      	ldrh	r1, [r4, #12]
 801a006:	0028      	movs	r0, r5
 801a008:	f7e6 f87e 	bl	8000108 <arm_bitreversal_32>
 801a00c:	bd70      	pop	{r4, r5, r6, pc}
 801a00e:	2380      	movs	r3, #128	@ 0x80
 801a010:	00db      	lsls	r3, r3, #3
 801a012:	4299      	cmp	r1, r3
 801a014:	d008      	beq.n	801a028 <arm_cfft_q31+0x58>
 801a016:	d92f      	bls.n	801a078 <arm_cfft_q31+0xa8>
 801a018:	2380      	movs	r3, #128	@ 0x80
 801a01a:	011b      	lsls	r3, r3, #4
 801a01c:	4299      	cmp	r1, r3
 801a01e:	d0ea      	beq.n	8019ff6 <arm_cfft_q31+0x26>
 801a020:	2380      	movs	r3, #128	@ 0x80
 801a022:	015b      	lsls	r3, r3, #5
 801a024:	4299      	cmp	r1, r3
 801a026:	d1ea      	bne.n	8019ffe <arm_cfft_q31+0x2e>
 801a028:	2301      	movs	r3, #1
 801a02a:	6862      	ldr	r2, [r4, #4]
 801a02c:	0028      	movs	r0, r5
 801a02e:	f000 f833 	bl	801a098 <arm_radix4_butterfly_q31>
 801a032:	e7e4      	b.n	8019ffe <arm_cfft_q31+0x2e>
 801a034:	4299      	cmp	r1, r3
 801a036:	d019      	beq.n	801a06c <arm_cfft_q31+0x9c>
 801a038:	d80b      	bhi.n	801a052 <arm_cfft_q31+0x82>
 801a03a:	2920      	cmp	r1, #32
 801a03c:	d004      	beq.n	801a048 <arm_cfft_q31+0x78>
 801a03e:	d928      	bls.n	801a092 <arm_cfft_q31+0xc2>
 801a040:	2940      	cmp	r1, #64	@ 0x40
 801a042:	d013      	beq.n	801a06c <arm_cfft_q31+0x9c>
 801a044:	2980      	cmp	r1, #128	@ 0x80
 801a046:	d1da      	bne.n	8019ffe <arm_cfft_q31+0x2e>
 801a048:	6862      	ldr	r2, [r4, #4]
 801a04a:	0028      	movs	r0, r5
 801a04c:	f7ff fefe 	bl	8019e4c <arm_cfft_radix4by2_inverse_q31>
 801a050:	e7d5      	b.n	8019ffe <arm_cfft_q31+0x2e>
 801a052:	2380      	movs	r3, #128	@ 0x80
 801a054:	00db      	lsls	r3, r3, #3
 801a056:	4299      	cmp	r1, r3
 801a058:	d008      	beq.n	801a06c <arm_cfft_q31+0x9c>
 801a05a:	d915      	bls.n	801a088 <arm_cfft_q31+0xb8>
 801a05c:	2380      	movs	r3, #128	@ 0x80
 801a05e:	011b      	lsls	r3, r3, #4
 801a060:	4299      	cmp	r1, r3
 801a062:	d0f1      	beq.n	801a048 <arm_cfft_q31+0x78>
 801a064:	2380      	movs	r3, #128	@ 0x80
 801a066:	015b      	lsls	r3, r3, #5
 801a068:	4299      	cmp	r1, r3
 801a06a:	d1c8      	bne.n	8019ffe <arm_cfft_q31+0x2e>
 801a06c:	2301      	movs	r3, #1
 801a06e:	6862      	ldr	r2, [r4, #4]
 801a070:	0028      	movs	r0, r5
 801a072:	f000 fab7 	bl	801a5e4 <arm_radix4_butterfly_inverse_q31>
 801a076:	e7c2      	b.n	8019ffe <arm_cfft_q31+0x2e>
 801a078:	2380      	movs	r3, #128	@ 0x80
 801a07a:	009b      	lsls	r3, r3, #2
 801a07c:	4299      	cmp	r1, r3
 801a07e:	d0ba      	beq.n	8019ff6 <arm_cfft_q31+0x26>
 801a080:	e7bd      	b.n	8019ffe <arm_cfft_q31+0x2e>
 801a082:	2910      	cmp	r1, #16
 801a084:	d1bb      	bne.n	8019ffe <arm_cfft_q31+0x2e>
 801a086:	e7cf      	b.n	801a028 <arm_cfft_q31+0x58>
 801a088:	2380      	movs	r3, #128	@ 0x80
 801a08a:	009b      	lsls	r3, r3, #2
 801a08c:	4299      	cmp	r1, r3
 801a08e:	d0db      	beq.n	801a048 <arm_cfft_q31+0x78>
 801a090:	e7b5      	b.n	8019ffe <arm_cfft_q31+0x2e>
 801a092:	2910      	cmp	r1, #16
 801a094:	d1b3      	bne.n	8019ffe <arm_cfft_q31+0x2e>
 801a096:	e7e9      	b.n	801a06c <arm_cfft_q31+0x9c>

0801a098 <arm_radix4_butterfly_q31>:
 801a098:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a09a:	464d      	mov	r5, r9
 801a09c:	4644      	mov	r4, r8
 801a09e:	465f      	mov	r7, fp
 801a0a0:	4656      	mov	r6, sl
 801a0a2:	469c      	mov	ip, r3
 801a0a4:	b4f0      	push	{r4, r5, r6, r7}
 801a0a6:	b0a7      	sub	sp, #156	@ 0x9c
 801a0a8:	9114      	str	r1, [sp, #80]	@ 0x50
 801a0aa:	0889      	lsrs	r1, r1, #2
 801a0ac:	9310      	str	r3, [sp, #64]	@ 0x40
 801a0ae:	00cb      	lsls	r3, r1, #3
 801a0b0:	0015      	movs	r5, r2
 801a0b2:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a0b4:	18c2      	adds	r2, r0, r3
 801a0b6:	000c      	movs	r4, r1
 801a0b8:	469a      	mov	sl, r3
 801a0ba:	9124      	str	r1, [sp, #144]	@ 0x90
 801a0bc:	18d1      	adds	r1, r2, r3
 801a0be:	4663      	mov	r3, ip
 801a0c0:	468b      	mov	fp, r1
 801a0c2:	0119      	lsls	r1, r3, #4
 801a0c4:	910d      	str	r1, [sp, #52]	@ 0x34
 801a0c6:	00d9      	lsls	r1, r3, #3
 801a0c8:	005b      	lsls	r3, r3, #1
 801a0ca:	4463      	add	r3, ip
 801a0cc:	910e      	str	r1, [sp, #56]	@ 0x38
 801a0ce:	00d9      	lsls	r1, r3, #3
 801a0d0:	465b      	mov	r3, fp
 801a0d2:	44da      	add	sl, fp
 801a0d4:	4690      	mov	r8, r2
 801a0d6:	4683      	mov	fp, r0
 801a0d8:	4699      	mov	r9, r3
 801a0da:	9022      	str	r0, [sp, #136]	@ 0x88
 801a0dc:	9025      	str	r0, [sp, #148]	@ 0x94
 801a0de:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a0e0:	9502      	str	r5, [sp, #8]
 801a0e2:	9500      	str	r5, [sp, #0]
 801a0e4:	9501      	str	r5, [sp, #4]
 801a0e6:	9407      	str	r4, [sp, #28]
 801a0e8:	465b      	mov	r3, fp
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	4642      	mov	r2, r8
 801a0ee:	111c      	asrs	r4, r3, #4
 801a0f0:	464b      	mov	r3, r9
 801a0f2:	4658      	mov	r0, fp
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	6812      	ldr	r2, [r2, #0]
 801a0f8:	111b      	asrs	r3, r3, #4
 801a0fa:	18e7      	adds	r7, r4, r3
 801a0fc:	1ae3      	subs	r3, r4, r3
 801a0fe:	1114      	asrs	r4, r2, #4
 801a100:	4652      	mov	r2, sl
 801a102:	6840      	ldr	r0, [r0, #4]
 801a104:	6812      	ldr	r2, [r2, #0]
 801a106:	1105      	asrs	r5, r0, #4
 801a108:	4648      	mov	r0, r9
 801a10a:	9303      	str	r3, [sp, #12]
 801a10c:	1113      	asrs	r3, r2, #4
 801a10e:	18e2      	adds	r2, r4, r3
 801a110:	465c      	mov	r4, fp
 801a112:	6840      	ldr	r0, [r0, #4]
 801a114:	1103      	asrs	r3, r0, #4
 801a116:	18ee      	adds	r6, r5, r3
 801a118:	1ae8      	subs	r0, r5, r3
 801a11a:	18bb      	adds	r3, r7, r2
 801a11c:	6023      	str	r3, [r4, #0]
 801a11e:	4644      	mov	r4, r8
 801a120:	6864      	ldr	r4, [r4, #4]
 801a122:	9004      	str	r0, [sp, #16]
 801a124:	1125      	asrs	r5, r4, #4
 801a126:	4654      	mov	r4, sl
 801a128:	6864      	ldr	r4, [r4, #4]
 801a12a:	1123      	asrs	r3, r4, #4
 801a12c:	465c      	mov	r4, fp
 801a12e:	18eb      	adds	r3, r5, r3
 801a130:	18f1      	adds	r1, r6, r3
 801a132:	6061      	str	r1, [r4, #4]
 801a134:	4655      	mov	r5, sl
 801a136:	4644      	mov	r4, r8
 801a138:	686d      	ldr	r5, [r5, #4]
 801a13a:	6864      	ldr	r4, [r4, #4]
 801a13c:	1129      	asrs	r1, r5, #4
 801a13e:	1124      	asrs	r4, r4, #4
 801a140:	1a64      	subs	r4, r4, r1
 801a142:	4641      	mov	r1, r8
 801a144:	6809      	ldr	r1, [r1, #0]
 801a146:	9405      	str	r4, [sp, #20]
 801a148:	1108      	asrs	r0, r1, #4
 801a14a:	4651      	mov	r1, sl
 801a14c:	6809      	ldr	r1, [r1, #0]
 801a14e:	1abc      	subs	r4, r7, r2
 801a150:	1109      	asrs	r1, r1, #4
 801a152:	1a41      	subs	r1, r0, r1
 801a154:	17e2      	asrs	r2, r4, #31
 801a156:	9106      	str	r1, [sp, #24]
 801a158:	0011      	movs	r1, r2
 801a15a:	9a01      	ldr	r2, [sp, #4]
 801a15c:	9108      	str	r1, [sp, #32]
 801a15e:	6817      	ldr	r7, [r2, #0]
 801a160:	17fd      	asrs	r5, r7, #31
 801a162:	0028      	movs	r0, r5
 801a164:	1af5      	subs	r5, r6, r3
 801a166:	17ee      	asrs	r6, r5, #31
 801a168:	960a      	str	r6, [sp, #40]	@ 0x28
 801a16a:	6856      	ldr	r6, [r2, #4]
 801a16c:	9009      	str	r0, [sp, #36]	@ 0x24
 801a16e:	17f3      	asrs	r3, r6, #31
 801a170:	003a      	movs	r2, r7
 801a172:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a174:	0003      	movs	r3, r0
 801a176:	0020      	movs	r0, r4
 801a178:	f7e6 fa22 	bl	80005c0 <__aeabi_lmul>
 801a17c:	0032      	movs	r2, r6
 801a17e:	17f3      	asrs	r3, r6, #31
 801a180:	910c      	str	r1, [sp, #48]	@ 0x30
 801a182:	0028      	movs	r0, r5
 801a184:	17e9      	asrs	r1, r5, #31
 801a186:	f7e6 fa1b 	bl	80005c0 <__aeabi_lmul>
 801a18a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a18c:	002a      	movs	r2, r5
 801a18e:	4684      	mov	ip, r0
 801a190:	4640      	mov	r0, r8
 801a192:	4461      	add	r1, ip
 801a194:	0049      	lsls	r1, r1, #1
 801a196:	6001      	str	r1, [r0, #0]
 801a198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a19a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a19c:	0038      	movs	r0, r7
 801a19e:	f7e6 fa0f 	bl	80005c0 <__aeabi_lmul>
 801a1a2:	0032      	movs	r2, r6
 801a1a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1a6:	000d      	movs	r5, r1
 801a1a8:	0020      	movs	r0, r4
 801a1aa:	9908      	ldr	r1, [sp, #32]
 801a1ac:	f7e6 fa08 	bl	80005c0 <__aeabi_lmul>
 801a1b0:	4646      	mov	r6, r8
 801a1b2:	1a6d      	subs	r5, r5, r1
 801a1b4:	006d      	lsls	r5, r5, #1
 801a1b6:	6075      	str	r5, [r6, #4]
 801a1b8:	9903      	ldr	r1, [sp, #12]
 801a1ba:	9d05      	ldr	r5, [sp, #20]
 801a1bc:	000c      	movs	r4, r1
 801a1be:	46ac      	mov	ip, r5
 801a1c0:	4464      	add	r4, ip
 801a1c2:	17e6      	asrs	r6, r4, #31
 801a1c4:	0031      	movs	r1, r6
 801a1c6:	9b00      	ldr	r3, [sp, #0]
 801a1c8:	9804      	ldr	r0, [sp, #16]
 801a1ca:	681e      	ldr	r6, [r3, #0]
 801a1cc:	17f7      	asrs	r7, r6, #31
 801a1ce:	9709      	str	r7, [sp, #36]	@ 0x24
 801a1d0:	9f06      	ldr	r7, [sp, #24]
 801a1d2:	0032      	movs	r2, r6
 801a1d4:	1bc7      	subs	r7, r0, r7
 801a1d6:	17fd      	asrs	r5, r7, #31
 801a1d8:	950a      	str	r5, [sp, #40]	@ 0x28
 801a1da:	685d      	ldr	r5, [r3, #4]
 801a1dc:	17f3      	asrs	r3, r6, #31
 801a1de:	17e8      	asrs	r0, r5, #31
 801a1e0:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a1e2:	0020      	movs	r0, r4
 801a1e4:	9108      	str	r1, [sp, #32]
 801a1e6:	f7e6 f9eb 	bl	80005c0 <__aeabi_lmul>
 801a1ea:	002a      	movs	r2, r5
 801a1ec:	17eb      	asrs	r3, r5, #31
 801a1ee:	910c      	str	r1, [sp, #48]	@ 0x30
 801a1f0:	0038      	movs	r0, r7
 801a1f2:	17f9      	asrs	r1, r7, #31
 801a1f4:	f7e6 f9e4 	bl	80005c0 <__aeabi_lmul>
 801a1f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a1fa:	003a      	movs	r2, r7
 801a1fc:	4684      	mov	ip, r0
 801a1fe:	4648      	mov	r0, r9
 801a200:	4461      	add	r1, ip
 801a202:	0049      	lsls	r1, r1, #1
 801a204:	6001      	str	r1, [r0, #0]
 801a206:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a208:	0030      	movs	r0, r6
 801a20a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a20c:	f7e6 f9d8 	bl	80005c0 <__aeabi_lmul>
 801a210:	002a      	movs	r2, r5
 801a212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a214:	000e      	movs	r6, r1
 801a216:	0020      	movs	r0, r4
 801a218:	9908      	ldr	r1, [sp, #32]
 801a21a:	f7e6 f9d1 	bl	80005c0 <__aeabi_lmul>
 801a21e:	464c      	mov	r4, r9
 801a220:	9d05      	ldr	r5, [sp, #20]
 801a222:	1a76      	subs	r6, r6, r1
 801a224:	9903      	ldr	r1, [sp, #12]
 801a226:	0076      	lsls	r6, r6, #1
 801a228:	6066      	str	r6, [r4, #4]
 801a22a:	1b4c      	subs	r4, r1, r5
 801a22c:	9e06      	ldr	r6, [sp, #24]
 801a22e:	17e1      	asrs	r1, r4, #31
 801a230:	9103      	str	r1, [sp, #12]
 801a232:	9902      	ldr	r1, [sp, #8]
 801a234:	46b4      	mov	ip, r6
 801a236:	680f      	ldr	r7, [r1, #0]
 801a238:	9804      	ldr	r0, [sp, #16]
 801a23a:	17fd      	asrs	r5, r7, #31
 801a23c:	002b      	movs	r3, r5
 801a23e:	684e      	ldr	r6, [r1, #4]
 801a240:	4460      	add	r0, ip
 801a242:	0005      	movs	r5, r0
 801a244:	17c0      	asrs	r0, r0, #31
 801a246:	9005      	str	r0, [sp, #20]
 801a248:	17f0      	asrs	r0, r6, #31
 801a24a:	9006      	str	r0, [sp, #24]
 801a24c:	003a      	movs	r2, r7
 801a24e:	0020      	movs	r0, r4
 801a250:	17e1      	asrs	r1, r4, #31
 801a252:	9304      	str	r3, [sp, #16]
 801a254:	f7e6 f9b4 	bl	80005c0 <__aeabi_lmul>
 801a258:	0032      	movs	r2, r6
 801a25a:	9108      	str	r1, [sp, #32]
 801a25c:	17f3      	asrs	r3, r6, #31
 801a25e:	0028      	movs	r0, r5
 801a260:	17e9      	asrs	r1, r5, #31
 801a262:	f7e6 f9ad 	bl	80005c0 <__aeabi_lmul>
 801a266:	9808      	ldr	r0, [sp, #32]
 801a268:	002a      	movs	r2, r5
 801a26a:	4684      	mov	ip, r0
 801a26c:	4650      	mov	r0, sl
 801a26e:	4461      	add	r1, ip
 801a270:	0049      	lsls	r1, r1, #1
 801a272:	6001      	str	r1, [r0, #0]
 801a274:	9b05      	ldr	r3, [sp, #20]
 801a276:	9904      	ldr	r1, [sp, #16]
 801a278:	0038      	movs	r0, r7
 801a27a:	f7e6 f9a1 	bl	80005c0 <__aeabi_lmul>
 801a27e:	0020      	movs	r0, r4
 801a280:	2408      	movs	r4, #8
 801a282:	000d      	movs	r5, r1
 801a284:	0032      	movs	r2, r6
 801a286:	9b06      	ldr	r3, [sp, #24]
 801a288:	9903      	ldr	r1, [sp, #12]
 801a28a:	f7e6 f999 	bl	80005c0 <__aeabi_lmul>
 801a28e:	46a4      	mov	ip, r4
 801a290:	4650      	mov	r0, sl
 801a292:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a294:	44e3      	add	fp, ip
 801a296:	44e0      	add	r8, ip
 801a298:	44e1      	add	r9, ip
 801a29a:	44e2      	add	sl, ip
 801a29c:	46a4      	mov	ip, r4
 801a29e:	1a6d      	subs	r5, r5, r1
 801a2a0:	006d      	lsls	r5, r5, #1
 801a2a2:	9a01      	ldr	r2, [sp, #4]
 801a2a4:	6045      	str	r5, [r0, #4]
 801a2a6:	9807      	ldr	r0, [sp, #28]
 801a2a8:	4462      	add	r2, ip
 801a2aa:	3801      	subs	r0, #1
 801a2ac:	9201      	str	r2, [sp, #4]
 801a2ae:	9007      	str	r0, [sp, #28]
 801a2b0:	9b00      	ldr	r3, [sp, #0]
 801a2b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a2b4:	9902      	ldr	r1, [sp, #8]
 801a2b6:	4694      	mov	ip, r2
 801a2b8:	4463      	add	r3, ip
 801a2ba:	9300      	str	r3, [sp, #0]
 801a2bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a2be:	469c      	mov	ip, r3
 801a2c0:	4461      	add	r1, ip
 801a2c2:	9102      	str	r1, [sp, #8]
 801a2c4:	2800      	cmp	r0, #0
 801a2c6:	d000      	beq.n	801a2ca <arm_radix4_butterfly_q31+0x232>
 801a2c8:	e70e      	b.n	801a0e8 <arm_radix4_butterfly_q31+0x50>
 801a2ca:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a2cc:	009b      	lsls	r3, r3, #2
 801a2ce:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a2d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a2d2:	9320      	str	r3, [sp, #128]	@ 0x80
 801a2d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a2d6:	2b04      	cmp	r3, #4
 801a2d8:	d800      	bhi.n	801a2dc <arm_radix4_butterfly_q31+0x244>
 801a2da:	e180      	b.n	801a5de <arm_radix4_butterfly_q31+0x546>
 801a2dc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a2de:	0893      	lsrs	r3, r2, #2
 801a2e0:	1e59      	subs	r1, r3, #1
 801a2e2:	9321      	str	r3, [sp, #132]	@ 0x84
 801a2e4:	00db      	lsls	r3, r3, #3
 801a2e6:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a2e8:	00d3      	lsls	r3, r2, #3
 801a2ea:	9300      	str	r3, [sp, #0]
 801a2ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a2ee:	911a      	str	r1, [sp, #104]	@ 0x68
 801a2f0:	00da      	lsls	r2, r3, #3
 801a2f2:	921e      	str	r2, [sp, #120]	@ 0x78
 801a2f4:	011a      	lsls	r2, r3, #4
 801a2f6:	921d      	str	r2, [sp, #116]	@ 0x74
 801a2f8:	001a      	movs	r2, r3
 801a2fa:	4694      	mov	ip, r2
 801a2fc:	005b      	lsls	r3, r3, #1
 801a2fe:	4463      	add	r3, ip
 801a300:	00db      	lsls	r3, r3, #3
 801a302:	931c      	str	r3, [sp, #112]	@ 0x70
 801a304:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a306:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a308:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a30a:	9318      	str	r3, [sp, #96]	@ 0x60
 801a30c:	9319      	str	r3, [sp, #100]	@ 0x64
 801a30e:	9316      	str	r3, [sp, #88]	@ 0x58
 801a310:	2300      	movs	r3, #0
 801a312:	9315      	str	r3, [sp, #84]	@ 0x54
 801a314:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a316:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a318:	681a      	ldr	r2, [r3, #0]
 801a31a:	685b      	ldr	r3, [r3, #4]
 801a31c:	9205      	str	r2, [sp, #20]
 801a31e:	9306      	str	r3, [sp, #24]
 801a320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a322:	468c      	mov	ip, r1
 801a324:	681a      	ldr	r2, [r3, #0]
 801a326:	685b      	ldr	r3, [r3, #4]
 801a328:	9207      	str	r2, [sp, #28]
 801a32a:	9308      	str	r3, [sp, #32]
 801a32c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a32e:	681a      	ldr	r2, [r3, #0]
 801a330:	685b      	ldr	r3, [r3, #4]
 801a332:	9209      	str	r2, [sp, #36]	@ 0x24
 801a334:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a336:	930a      	str	r3, [sp, #40]	@ 0x28
 801a338:	0013      	movs	r3, r2
 801a33a:	4463      	add	r3, ip
 801a33c:	4698      	mov	r8, r3
 801a33e:	0013      	movs	r3, r2
 801a340:	4442      	add	r2, r8
 801a342:	4691      	mov	r9, r2
 801a344:	001a      	movs	r2, r3
 801a346:	444a      	add	r2, r9
 801a348:	4692      	mov	sl, r2
 801a34a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a34c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a34e:	4293      	cmp	r3, r2
 801a350:	d800      	bhi.n	801a354 <arm_radix4_butterfly_q31+0x2bc>
 801a352:	e0dd      	b.n	801a510 <arm_radix4_butterfly_q31+0x478>
 801a354:	4694      	mov	ip, r2
 801a356:	468b      	mov	fp, r1
 801a358:	4644      	mov	r4, r8
 801a35a:	4655      	mov	r5, sl
 801a35c:	9b07      	ldr	r3, [sp, #28]
 801a35e:	17db      	asrs	r3, r3, #31
 801a360:	930c      	str	r3, [sp, #48]	@ 0x30
 801a362:	9b08      	ldr	r3, [sp, #32]
 801a364:	17db      	asrs	r3, r3, #31
 801a366:	930d      	str	r3, [sp, #52]	@ 0x34
 801a368:	9b05      	ldr	r3, [sp, #20]
 801a36a:	17db      	asrs	r3, r3, #31
 801a36c:	930e      	str	r3, [sp, #56]	@ 0x38
 801a36e:	9b06      	ldr	r3, [sp, #24]
 801a370:	17db      	asrs	r3, r3, #31
 801a372:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a376:	17db      	asrs	r3, r3, #31
 801a378:	9310      	str	r3, [sp, #64]	@ 0x40
 801a37a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a37c:	17db      	asrs	r3, r3, #31
 801a37e:	9311      	str	r3, [sp, #68]	@ 0x44
 801a380:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a382:	4463      	add	r3, ip
 801a384:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a386:	465b      	mov	r3, fp
 801a388:	4659      	mov	r1, fp
 801a38a:	681a      	ldr	r2, [r3, #0]
 801a38c:	464b      	mov	r3, r9
 801a38e:	684f      	ldr	r7, [r1, #4]
 801a390:	4649      	mov	r1, r9
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	18d6      	adds	r6, r2, r3
 801a396:	1ad3      	subs	r3, r2, r3
 801a398:	9301      	str	r3, [sp, #4]
 801a39a:	684b      	ldr	r3, [r1, #4]
 801a39c:	18f8      	adds	r0, r7, r3
 801a39e:	1af9      	subs	r1, r7, r3
 801a3a0:	6827      	ldr	r7, [r4, #0]
 801a3a2:	9102      	str	r1, [sp, #8]
 801a3a4:	003a      	movs	r2, r7
 801a3a6:	682f      	ldr	r7, [r5, #0]
 801a3a8:	46bc      	mov	ip, r7
 801a3aa:	465f      	mov	r7, fp
 801a3ac:	4462      	add	r2, ip
 801a3ae:	18b3      	adds	r3, r6, r2
 801a3b0:	109b      	asrs	r3, r3, #2
 801a3b2:	603b      	str	r3, [r7, #0]
 801a3b4:	6867      	ldr	r7, [r4, #4]
 801a3b6:	1ab6      	subs	r6, r6, r2
 801a3b8:	46b8      	mov	r8, r7
 801a3ba:	686f      	ldr	r7, [r5, #4]
 801a3bc:	17f2      	asrs	r2, r6, #31
 801a3be:	46bc      	mov	ip, r7
 801a3c0:	44e0      	add	r8, ip
 801a3c2:	4643      	mov	r3, r8
 801a3c4:	465f      	mov	r7, fp
 801a3c6:	18c1      	adds	r1, r0, r3
 801a3c8:	1089      	asrs	r1, r1, #2
 801a3ca:	6079      	str	r1, [r7, #4]
 801a3cc:	9900      	ldr	r1, [sp, #0]
 801a3ce:	4690      	mov	r8, r2
 801a3d0:	468c      	mov	ip, r1
 801a3d2:	6867      	ldr	r7, [r4, #4]
 801a3d4:	6869      	ldr	r1, [r5, #4]
 801a3d6:	44e3      	add	fp, ip
 801a3d8:	1a7f      	subs	r7, r7, r1
 801a3da:	9703      	str	r7, [sp, #12]
 801a3dc:	6829      	ldr	r1, [r5, #0]
 801a3de:	6827      	ldr	r7, [r4, #0]
 801a3e0:	1a7f      	subs	r7, r7, r1
 801a3e2:	9704      	str	r7, [sp, #16]
 801a3e4:	1ac7      	subs	r7, r0, r3
 801a3e6:	17fa      	asrs	r2, r7, #31
 801a3e8:	4692      	mov	sl, r2
 801a3ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a3ec:	9a07      	ldr	r2, [sp, #28]
 801a3ee:	0030      	movs	r0, r6
 801a3f0:	4641      	mov	r1, r8
 801a3f2:	f7e6 f8e5 	bl	80005c0 <__aeabi_lmul>
 801a3f6:	9a08      	ldr	r2, [sp, #32]
 801a3f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a3fa:	9112      	str	r1, [sp, #72]	@ 0x48
 801a3fc:	0038      	movs	r0, r7
 801a3fe:	4651      	mov	r1, sl
 801a400:	f7e6 f8de 	bl	80005c0 <__aeabi_lmul>
 801a404:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a406:	9a07      	ldr	r2, [sp, #28]
 801a408:	4684      	mov	ip, r0
 801a40a:	4461      	add	r1, ip
 801a40c:	1049      	asrs	r1, r1, #1
 801a40e:	6021      	str	r1, [r4, #0]
 801a410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a412:	0038      	movs	r0, r7
 801a414:	4651      	mov	r1, sl
 801a416:	f7e6 f8d3 	bl	80005c0 <__aeabi_lmul>
 801a41a:	9a08      	ldr	r2, [sp, #32]
 801a41c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a41e:	000f      	movs	r7, r1
 801a420:	0030      	movs	r0, r6
 801a422:	4641      	mov	r1, r8
 801a424:	f7e6 f8cc 	bl	80005c0 <__aeabi_lmul>
 801a428:	9b00      	ldr	r3, [sp, #0]
 801a42a:	9a01      	ldr	r2, [sp, #4]
 801a42c:	469c      	mov	ip, r3
 801a42e:	9803      	ldr	r0, [sp, #12]
 801a430:	1a7f      	subs	r7, r7, r1
 801a432:	107f      	asrs	r7, r7, #1
 801a434:	6067      	str	r7, [r4, #4]
 801a436:	0016      	movs	r6, r2
 801a438:	4464      	add	r4, ip
 801a43a:	4684      	mov	ip, r0
 801a43c:	4466      	add	r6, ip
 801a43e:	17f2      	asrs	r2, r6, #31
 801a440:	4690      	mov	r8, r2
 801a442:	9902      	ldr	r1, [sp, #8]
 801a444:	9f04      	ldr	r7, [sp, #16]
 801a446:	0030      	movs	r0, r6
 801a448:	1bcf      	subs	r7, r1, r7
 801a44a:	17fa      	asrs	r2, r7, #31
 801a44c:	4692      	mov	sl, r2
 801a44e:	4641      	mov	r1, r8
 801a450:	9a05      	ldr	r2, [sp, #20]
 801a452:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a454:	f7e6 f8b4 	bl	80005c0 <__aeabi_lmul>
 801a458:	9a06      	ldr	r2, [sp, #24]
 801a45a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a45c:	9112      	str	r1, [sp, #72]	@ 0x48
 801a45e:	0038      	movs	r0, r7
 801a460:	4651      	mov	r1, sl
 801a462:	f7e6 f8ad 	bl	80005c0 <__aeabi_lmul>
 801a466:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a468:	9a05      	ldr	r2, [sp, #20]
 801a46a:	4684      	mov	ip, r0
 801a46c:	4648      	mov	r0, r9
 801a46e:	4461      	add	r1, ip
 801a470:	1049      	asrs	r1, r1, #1
 801a472:	6001      	str	r1, [r0, #0]
 801a474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a476:	0038      	movs	r0, r7
 801a478:	4651      	mov	r1, sl
 801a47a:	f7e6 f8a1 	bl	80005c0 <__aeabi_lmul>
 801a47e:	9a06      	ldr	r2, [sp, #24]
 801a480:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a482:	000f      	movs	r7, r1
 801a484:	0030      	movs	r0, r6
 801a486:	4641      	mov	r1, r8
 801a488:	f7e6 f89a 	bl	80005c0 <__aeabi_lmul>
 801a48c:	464e      	mov	r6, r9
 801a48e:	9a00      	ldr	r2, [sp, #0]
 801a490:	9b01      	ldr	r3, [sp, #4]
 801a492:	4694      	mov	ip, r2
 801a494:	9803      	ldr	r0, [sp, #12]
 801a496:	1a7f      	subs	r7, r7, r1
 801a498:	107f      	asrs	r7, r7, #1
 801a49a:	6077      	str	r7, [r6, #4]
 801a49c:	1a1e      	subs	r6, r3, r0
 801a49e:	9b04      	ldr	r3, [sp, #16]
 801a4a0:	44e1      	add	r9, ip
 801a4a2:	469c      	mov	ip, r3
 801a4a4:	17f0      	asrs	r0, r6, #31
 801a4a6:	4680      	mov	r8, r0
 801a4a8:	9902      	ldr	r1, [sp, #8]
 801a4aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a4ac:	4461      	add	r1, ip
 801a4ae:	17cb      	asrs	r3, r1, #31
 801a4b0:	000f      	movs	r7, r1
 801a4b2:	469a      	mov	sl, r3
 801a4b4:	0030      	movs	r0, r6
 801a4b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a4b8:	4641      	mov	r1, r8
 801a4ba:	f7e6 f881 	bl	80005c0 <__aeabi_lmul>
 801a4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a4c2:	9101      	str	r1, [sp, #4]
 801a4c4:	0038      	movs	r0, r7
 801a4c6:	4651      	mov	r1, sl
 801a4c8:	f7e6 f87a 	bl	80005c0 <__aeabi_lmul>
 801a4cc:	9801      	ldr	r0, [sp, #4]
 801a4ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a4d0:	4684      	mov	ip, r0
 801a4d2:	4461      	add	r1, ip
 801a4d4:	1049      	asrs	r1, r1, #1
 801a4d6:	6029      	str	r1, [r5, #0]
 801a4d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a4da:	0038      	movs	r0, r7
 801a4dc:	4651      	mov	r1, sl
 801a4de:	f7e6 f86f 	bl	80005c0 <__aeabi_lmul>
 801a4e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a4e4:	000f      	movs	r7, r1
 801a4e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a4e8:	0030      	movs	r0, r6
 801a4ea:	4641      	mov	r1, r8
 801a4ec:	f7e6 f868 	bl	80005c0 <__aeabi_lmul>
 801a4f0:	1a7f      	subs	r7, r7, r1
 801a4f2:	107f      	asrs	r7, r7, #1
 801a4f4:	606f      	str	r7, [r5, #4]
 801a4f6:	9a00      	ldr	r2, [sp, #0]
 801a4f8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a4fa:	4694      	mov	ip, r2
 801a4fc:	4465      	add	r5, ip
 801a4fe:	468c      	mov	ip, r1
 801a500:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a502:	0013      	movs	r3, r2
 801a504:	4462      	add	r2, ip
 801a506:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a508:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a50a:	429a      	cmp	r2, r3
 801a50c:	d900      	bls.n	801a510 <arm_radix4_butterfly_q31+0x478>
 801a50e:	e73a      	b.n	801a386 <arm_radix4_butterfly_q31+0x2ee>
 801a510:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a512:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a514:	468c      	mov	ip, r1
 801a516:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801a518:	4462      	add	r2, ip
 801a51a:	468c      	mov	ip, r1
 801a51c:	9216      	str	r2, [sp, #88]	@ 0x58
 801a51e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801a520:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a522:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a524:	4462      	add	r2, ip
 801a526:	468c      	mov	ip, r1
 801a528:	9219      	str	r2, [sp, #100]	@ 0x64
 801a52a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a52c:	3301      	adds	r3, #1
 801a52e:	4462      	add	r2, ip
 801a530:	9218      	str	r2, [sp, #96]	@ 0x60
 801a532:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a534:	9315      	str	r3, [sp, #84]	@ 0x54
 801a536:	3208      	adds	r2, #8
 801a538:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a53a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a53c:	4293      	cmp	r3, r2
 801a53e:	d800      	bhi.n	801a542 <arm_radix4_butterfly_q31+0x4aa>
 801a540:	e6e8      	b.n	801a314 <arm_radix4_butterfly_q31+0x27c>
 801a542:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a544:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a546:	009b      	lsls	r3, r3, #2
 801a548:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a54a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a54c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a54e:	089b      	lsrs	r3, r3, #2
 801a550:	9320      	str	r3, [sp, #128]	@ 0x80
 801a552:	2b04      	cmp	r3, #4
 801a554:	d900      	bls.n	801a558 <arm_radix4_butterfly_q31+0x4c0>
 801a556:	e6c1      	b.n	801a2dc <arm_radix4_butterfly_q31+0x244>
 801a558:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a55a:	469a      	mov	sl, r3
 801a55c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a55e:	691c      	ldr	r4, [r3, #16]
 801a560:	685a      	ldr	r2, [r3, #4]
 801a562:	46a1      	mov	r9, r4
 801a564:	4690      	mov	r8, r2
 801a566:	6819      	ldr	r1, [r3, #0]
 801a568:	689a      	ldr	r2, [r3, #8]
 801a56a:	699f      	ldr	r7, [r3, #24]
 801a56c:	188d      	adds	r5, r1, r2
 801a56e:	444d      	add	r5, r9
 801a570:	19ed      	adds	r5, r5, r7
 801a572:	69de      	ldr	r6, [r3, #28]
 801a574:	601d      	str	r5, [r3, #0]
 801a576:	4645      	mov	r5, r8
 801a578:	46b4      	mov	ip, r6
 801a57a:	68d8      	ldr	r0, [r3, #12]
 801a57c:	695c      	ldr	r4, [r3, #20]
 801a57e:	182d      	adds	r5, r5, r0
 801a580:	192d      	adds	r5, r5, r4
 801a582:	4465      	add	r5, ip
 801a584:	605d      	str	r5, [r3, #4]
 801a586:	1a8d      	subs	r5, r1, r2
 801a588:	444d      	add	r5, r9
 801a58a:	1bed      	subs	r5, r5, r7
 801a58c:	609d      	str	r5, [r3, #8]
 801a58e:	4645      	mov	r5, r8
 801a590:	1a2d      	subs	r5, r5, r0
 801a592:	192d      	adds	r5, r5, r4
 801a594:	1bad      	subs	r5, r5, r6
 801a596:	464e      	mov	r6, r9
 801a598:	60dd      	str	r5, [r3, #12]
 801a59a:	180d      	adds	r5, r1, r0
 801a59c:	1bad      	subs	r5, r5, r6
 801a59e:	4666      	mov	r6, ip
 801a5a0:	1bad      	subs	r5, r5, r6
 801a5a2:	611d      	str	r5, [r3, #16]
 801a5a4:	4645      	mov	r5, r8
 801a5a6:	1aad      	subs	r5, r5, r2
 801a5a8:	4442      	add	r2, r8
 801a5aa:	1b12      	subs	r2, r2, r4
 801a5ac:	1bd2      	subs	r2, r2, r7
 801a5ae:	1a08      	subs	r0, r1, r0
 801a5b0:	61da      	str	r2, [r3, #28]
 801a5b2:	4649      	mov	r1, r9
 801a5b4:	2201      	movs	r2, #1
 801a5b6:	1a41      	subs	r1, r0, r1
 801a5b8:	4252      	negs	r2, r2
 801a5ba:	4461      	add	r1, ip
 801a5bc:	4694      	mov	ip, r2
 801a5be:	44e2      	add	sl, ip
 801a5c0:	4652      	mov	r2, sl
 801a5c2:	1b2d      	subs	r5, r5, r4
 801a5c4:	19ed      	adds	r5, r5, r7
 801a5c6:	615d      	str	r5, [r3, #20]
 801a5c8:	6199      	str	r1, [r3, #24]
 801a5ca:	3320      	adds	r3, #32
 801a5cc:	2a00      	cmp	r2, #0
 801a5ce:	d1c6      	bne.n	801a55e <arm_radix4_butterfly_q31+0x4c6>
 801a5d0:	b027      	add	sp, #156	@ 0x9c
 801a5d2:	bc3c      	pop	{r2, r3, r4, r5}
 801a5d4:	4690      	mov	r8, r2
 801a5d6:	4699      	mov	r9, r3
 801a5d8:	46a2      	mov	sl, r4
 801a5da:	46ab      	mov	fp, r5
 801a5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5de:	469a      	mov	sl, r3
 801a5e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a5e2:	e7bc      	b.n	801a55e <arm_radix4_butterfly_q31+0x4c6>

0801a5e4 <arm_radix4_butterfly_inverse_q31>:
 801a5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5e6:	464d      	mov	r5, r9
 801a5e8:	4644      	mov	r4, r8
 801a5ea:	465f      	mov	r7, fp
 801a5ec:	4656      	mov	r6, sl
 801a5ee:	b4f0      	push	{r4, r5, r6, r7}
 801a5f0:	b0a7      	sub	sp, #156	@ 0x9c
 801a5f2:	469c      	mov	ip, r3
 801a5f4:	9114      	str	r1, [sp, #80]	@ 0x50
 801a5f6:	0889      	lsrs	r1, r1, #2
 801a5f8:	9310      	str	r3, [sp, #64]	@ 0x40
 801a5fa:	00cb      	lsls	r3, r1, #3
 801a5fc:	0015      	movs	r5, r2
 801a5fe:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a600:	18c2      	adds	r2, r0, r3
 801a602:	000c      	movs	r4, r1
 801a604:	9124      	str	r1, [sp, #144]	@ 0x90
 801a606:	18d1      	adds	r1, r2, r3
 801a608:	468b      	mov	fp, r1
 801a60a:	469a      	mov	sl, r3
 801a60c:	4663      	mov	r3, ip
 801a60e:	44da      	add	sl, fp
 801a610:	46d0      	mov	r8, sl
 801a612:	4681      	mov	r9, r0
 801a614:	4692      	mov	sl, r2
 801a616:	0119      	lsls	r1, r3, #4
 801a618:	910d      	str	r1, [sp, #52]	@ 0x34
 801a61a:	00d9      	lsls	r1, r3, #3
 801a61c:	005b      	lsls	r3, r3, #1
 801a61e:	4463      	add	r3, ip
 801a620:	910e      	str	r1, [sp, #56]	@ 0x38
 801a622:	00d9      	lsls	r1, r3, #3
 801a624:	9022      	str	r0, [sp, #136]	@ 0x88
 801a626:	9025      	str	r0, [sp, #148]	@ 0x94
 801a628:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a62a:	9502      	str	r5, [sp, #8]
 801a62c:	9500      	str	r5, [sp, #0]
 801a62e:	9501      	str	r5, [sp, #4]
 801a630:	9409      	str	r4, [sp, #36]	@ 0x24
 801a632:	464b      	mov	r3, r9
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	4652      	mov	r2, sl
 801a638:	111c      	asrs	r4, r3, #4
 801a63a:	465b      	mov	r3, fp
 801a63c:	4648      	mov	r0, r9
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	6812      	ldr	r2, [r2, #0]
 801a642:	6840      	ldr	r0, [r0, #4]
 801a644:	111b      	asrs	r3, r3, #4
 801a646:	18e7      	adds	r7, r4, r3
 801a648:	1ae3      	subs	r3, r4, r3
 801a64a:	1114      	asrs	r4, r2, #4
 801a64c:	4642      	mov	r2, r8
 801a64e:	1105      	asrs	r5, r0, #4
 801a650:	4658      	mov	r0, fp
 801a652:	6812      	ldr	r2, [r2, #0]
 801a654:	6840      	ldr	r0, [r0, #4]
 801a656:	9303      	str	r3, [sp, #12]
 801a658:	1113      	asrs	r3, r2, #4
 801a65a:	18e2      	adds	r2, r4, r3
 801a65c:	1103      	asrs	r3, r0, #4
 801a65e:	18ee      	adds	r6, r5, r3
 801a660:	1ae8      	subs	r0, r5, r3
 801a662:	464d      	mov	r5, r9
 801a664:	18bb      	adds	r3, r7, r2
 801a666:	602b      	str	r3, [r5, #0]
 801a668:	4641      	mov	r1, r8
 801a66a:	4655      	mov	r5, sl
 801a66c:	6849      	ldr	r1, [r1, #4]
 801a66e:	686d      	ldr	r5, [r5, #4]
 801a670:	110b      	asrs	r3, r1, #4
 801a672:	112d      	asrs	r5, r5, #4
 801a674:	18eb      	adds	r3, r5, r3
 801a676:	464d      	mov	r5, r9
 801a678:	18f1      	adds	r1, r6, r3
 801a67a:	6069      	str	r1, [r5, #4]
 801a67c:	4655      	mov	r5, sl
 801a67e:	686d      	ldr	r5, [r5, #4]
 801a680:	9004      	str	r0, [sp, #16]
 801a682:	112c      	asrs	r4, r5, #4
 801a684:	4645      	mov	r5, r8
 801a686:	686d      	ldr	r5, [r5, #4]
 801a688:	1129      	asrs	r1, r5, #4
 801a68a:	1a65      	subs	r5, r4, r1
 801a68c:	4651      	mov	r1, sl
 801a68e:	6809      	ldr	r1, [r1, #0]
 801a690:	1abc      	subs	r4, r7, r2
 801a692:	1108      	asrs	r0, r1, #4
 801a694:	4641      	mov	r1, r8
 801a696:	17e2      	asrs	r2, r4, #31
 801a698:	6809      	ldr	r1, [r1, #0]
 801a69a:	9207      	str	r2, [sp, #28]
 801a69c:	9a01      	ldr	r2, [sp, #4]
 801a69e:	1109      	asrs	r1, r1, #4
 801a6a0:	6817      	ldr	r7, [r2, #0]
 801a6a2:	1a41      	subs	r1, r0, r1
 801a6a4:	9106      	str	r1, [sp, #24]
 801a6a6:	0039      	movs	r1, r7
 801a6a8:	17ff      	asrs	r7, r7, #31
 801a6aa:	0038      	movs	r0, r7
 801a6ac:	9505      	str	r5, [sp, #20]
 801a6ae:	1af5      	subs	r5, r6, r3
 801a6b0:	17ef      	asrs	r7, r5, #31
 801a6b2:	970b      	str	r7, [sp, #44]	@ 0x2c
 801a6b4:	6857      	ldr	r7, [r2, #4]
 801a6b6:	0003      	movs	r3, r0
 801a6b8:	17fe      	asrs	r6, r7, #31
 801a6ba:	000a      	movs	r2, r1
 801a6bc:	9108      	str	r1, [sp, #32]
 801a6be:	900a      	str	r0, [sp, #40]	@ 0x28
 801a6c0:	17e1      	asrs	r1, r4, #31
 801a6c2:	0020      	movs	r0, r4
 801a6c4:	960c      	str	r6, [sp, #48]	@ 0x30
 801a6c6:	f7e5 ff7b 	bl	80005c0 <__aeabi_lmul>
 801a6ca:	003a      	movs	r2, r7
 801a6cc:	17fb      	asrs	r3, r7, #31
 801a6ce:	000e      	movs	r6, r1
 801a6d0:	0028      	movs	r0, r5
 801a6d2:	17e9      	asrs	r1, r5, #31
 801a6d4:	f7e5 ff74 	bl	80005c0 <__aeabi_lmul>
 801a6d8:	4653      	mov	r3, sl
 801a6da:	1a76      	subs	r6, r6, r1
 801a6dc:	0076      	lsls	r6, r6, #1
 801a6de:	601e      	str	r6, [r3, #0]
 801a6e0:	002a      	movs	r2, r5
 801a6e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a6e4:	9808      	ldr	r0, [sp, #32]
 801a6e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a6e8:	f7e5 ff6a 	bl	80005c0 <__aeabi_lmul>
 801a6ec:	003a      	movs	r2, r7
 801a6ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a6f0:	000d      	movs	r5, r1
 801a6f2:	0020      	movs	r0, r4
 801a6f4:	9907      	ldr	r1, [sp, #28]
 801a6f6:	f7e5 ff63 	bl	80005c0 <__aeabi_lmul>
 801a6fa:	4657      	mov	r7, sl
 801a6fc:	186d      	adds	r5, r5, r1
 801a6fe:	006d      	lsls	r5, r5, #1
 801a700:	607d      	str	r5, [r7, #4]
 801a702:	9b03      	ldr	r3, [sp, #12]
 801a704:	9e06      	ldr	r6, [sp, #24]
 801a706:	9d05      	ldr	r5, [sp, #20]
 801a708:	46b4      	mov	ip, r6
 801a70a:	1b5d      	subs	r5, r3, r5
 801a70c:	9b00      	ldr	r3, [sp, #0]
 801a70e:	17ef      	asrs	r7, r5, #31
 801a710:	0039      	movs	r1, r7
 801a712:	681f      	ldr	r7, [r3, #0]
 801a714:	17fc      	asrs	r4, r7, #31
 801a716:	0020      	movs	r0, r4
 801a718:	9c04      	ldr	r4, [sp, #16]
 801a71a:	4464      	add	r4, ip
 801a71c:	17e6      	asrs	r6, r4, #31
 801a71e:	9407      	str	r4, [sp, #28]
 801a720:	9608      	str	r6, [sp, #32]
 801a722:	685e      	ldr	r6, [r3, #4]
 801a724:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a726:	17f2      	asrs	r2, r6, #31
 801a728:	0003      	movs	r3, r0
 801a72a:	920c      	str	r2, [sp, #48]	@ 0x30
 801a72c:	0028      	movs	r0, r5
 801a72e:	003a      	movs	r2, r7
 801a730:	910a      	str	r1, [sp, #40]	@ 0x28
 801a732:	f7e5 ff45 	bl	80005c0 <__aeabi_lmul>
 801a736:	0032      	movs	r2, r6
 801a738:	17f3      	asrs	r3, r6, #31
 801a73a:	9807      	ldr	r0, [sp, #28]
 801a73c:	000c      	movs	r4, r1
 801a73e:	9908      	ldr	r1, [sp, #32]
 801a740:	f7e5 ff3e 	bl	80005c0 <__aeabi_lmul>
 801a744:	4658      	mov	r0, fp
 801a746:	1a64      	subs	r4, r4, r1
 801a748:	0064      	lsls	r4, r4, #1
 801a74a:	9a07      	ldr	r2, [sp, #28]
 801a74c:	6004      	str	r4, [r0, #0]
 801a74e:	9b08      	ldr	r3, [sp, #32]
 801a750:	0038      	movs	r0, r7
 801a752:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a754:	f7e5 ff34 	bl	80005c0 <__aeabi_lmul>
 801a758:	0032      	movs	r2, r6
 801a75a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a75c:	000c      	movs	r4, r1
 801a75e:	0028      	movs	r0, r5
 801a760:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a762:	f7e5 ff2d 	bl	80005c0 <__aeabi_lmul>
 801a766:	9d05      	ldr	r5, [sp, #20]
 801a768:	465f      	mov	r7, fp
 801a76a:	46ac      	mov	ip, r5
 801a76c:	1864      	adds	r4, r4, r1
 801a76e:	9903      	ldr	r1, [sp, #12]
 801a770:	0064      	lsls	r4, r4, #1
 801a772:	4461      	add	r1, ip
 801a774:	607c      	str	r4, [r7, #4]
 801a776:	000c      	movs	r4, r1
 801a778:	17c9      	asrs	r1, r1, #31
 801a77a:	9105      	str	r1, [sp, #20]
 801a77c:	9902      	ldr	r1, [sp, #8]
 801a77e:	9804      	ldr	r0, [sp, #16]
 801a780:	680d      	ldr	r5, [r1, #0]
 801a782:	9e06      	ldr	r6, [sp, #24]
 801a784:	002b      	movs	r3, r5
 801a786:	17ed      	asrs	r5, r5, #31
 801a788:	684f      	ldr	r7, [r1, #4]
 801a78a:	9503      	str	r5, [sp, #12]
 801a78c:	1b85      	subs	r5, r0, r6
 801a78e:	17e8      	asrs	r0, r5, #31
 801a790:	001a      	movs	r2, r3
 801a792:	9006      	str	r0, [sp, #24]
 801a794:	17fe      	asrs	r6, r7, #31
 801a796:	9304      	str	r3, [sp, #16]
 801a798:	0020      	movs	r0, r4
 801a79a:	9b03      	ldr	r3, [sp, #12]
 801a79c:	17e1      	asrs	r1, r4, #31
 801a79e:	9607      	str	r6, [sp, #28]
 801a7a0:	f7e5 ff0e 	bl	80005c0 <__aeabi_lmul>
 801a7a4:	003a      	movs	r2, r7
 801a7a6:	000e      	movs	r6, r1
 801a7a8:	17fb      	asrs	r3, r7, #31
 801a7aa:	0028      	movs	r0, r5
 801a7ac:	17e9      	asrs	r1, r5, #31
 801a7ae:	f7e5 ff07 	bl	80005c0 <__aeabi_lmul>
 801a7b2:	4640      	mov	r0, r8
 801a7b4:	1a76      	subs	r6, r6, r1
 801a7b6:	0076      	lsls	r6, r6, #1
 801a7b8:	002a      	movs	r2, r5
 801a7ba:	9b06      	ldr	r3, [sp, #24]
 801a7bc:	6006      	str	r6, [r0, #0]
 801a7be:	9903      	ldr	r1, [sp, #12]
 801a7c0:	9804      	ldr	r0, [sp, #16]
 801a7c2:	f7e5 fefd 	bl	80005c0 <__aeabi_lmul>
 801a7c6:	0020      	movs	r0, r4
 801a7c8:	2408      	movs	r4, #8
 801a7ca:	9b07      	ldr	r3, [sp, #28]
 801a7cc:	000d      	movs	r5, r1
 801a7ce:	003a      	movs	r2, r7
 801a7d0:	9905      	ldr	r1, [sp, #20]
 801a7d2:	f7e5 fef5 	bl	80005c0 <__aeabi_lmul>
 801a7d6:	4640      	mov	r0, r8
 801a7d8:	46a4      	mov	ip, r4
 801a7da:	186d      	adds	r5, r5, r1
 801a7dc:	006d      	lsls	r5, r5, #1
 801a7de:	6045      	str	r5, [r0, #4]
 801a7e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a7e2:	44e1      	add	r9, ip
 801a7e4:	3801      	subs	r0, #1
 801a7e6:	9009      	str	r0, [sp, #36]	@ 0x24
 801a7e8:	9a01      	ldr	r2, [sp, #4]
 801a7ea:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a7ec:	44e2      	add	sl, ip
 801a7ee:	44e3      	add	fp, ip
 801a7f0:	44e0      	add	r8, ip
 801a7f2:	46a4      	mov	ip, r4
 801a7f4:	4462      	add	r2, ip
 801a7f6:	9201      	str	r2, [sp, #4]
 801a7f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a7fa:	9b00      	ldr	r3, [sp, #0]
 801a7fc:	4694      	mov	ip, r2
 801a7fe:	4463      	add	r3, ip
 801a800:	9300      	str	r3, [sp, #0]
 801a802:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a804:	9902      	ldr	r1, [sp, #8]
 801a806:	469c      	mov	ip, r3
 801a808:	4461      	add	r1, ip
 801a80a:	9102      	str	r1, [sp, #8]
 801a80c:	2800      	cmp	r0, #0
 801a80e:	d000      	beq.n	801a812 <arm_radix4_butterfly_inverse_q31+0x22e>
 801a810:	e70f      	b.n	801a632 <arm_radix4_butterfly_inverse_q31+0x4e>
 801a812:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a814:	009b      	lsls	r3, r3, #2
 801a816:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a818:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a81a:	9320      	str	r3, [sp, #128]	@ 0x80
 801a81c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a81e:	2b04      	cmp	r3, #4
 801a820:	d800      	bhi.n	801a824 <arm_radix4_butterfly_inverse_q31+0x240>
 801a822:	e17c      	b.n	801ab1e <arm_radix4_butterfly_inverse_q31+0x53a>
 801a824:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a826:	0893      	lsrs	r3, r2, #2
 801a828:	1e59      	subs	r1, r3, #1
 801a82a:	9321      	str	r3, [sp, #132]	@ 0x84
 801a82c:	00db      	lsls	r3, r3, #3
 801a82e:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a830:	00d3      	lsls	r3, r2, #3
 801a832:	9300      	str	r3, [sp, #0]
 801a834:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a836:	911a      	str	r1, [sp, #104]	@ 0x68
 801a838:	00da      	lsls	r2, r3, #3
 801a83a:	921e      	str	r2, [sp, #120]	@ 0x78
 801a83c:	011a      	lsls	r2, r3, #4
 801a83e:	921d      	str	r2, [sp, #116]	@ 0x74
 801a840:	001a      	movs	r2, r3
 801a842:	4694      	mov	ip, r2
 801a844:	005b      	lsls	r3, r3, #1
 801a846:	4463      	add	r3, ip
 801a848:	00db      	lsls	r3, r3, #3
 801a84a:	931c      	str	r3, [sp, #112]	@ 0x70
 801a84c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a84e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a850:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a852:	9318      	str	r3, [sp, #96]	@ 0x60
 801a854:	9319      	str	r3, [sp, #100]	@ 0x64
 801a856:	9316      	str	r3, [sp, #88]	@ 0x58
 801a858:	2300      	movs	r3, #0
 801a85a:	9315      	str	r3, [sp, #84]	@ 0x54
 801a85c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a85e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a860:	681a      	ldr	r2, [r3, #0]
 801a862:	685b      	ldr	r3, [r3, #4]
 801a864:	9205      	str	r2, [sp, #20]
 801a866:	9306      	str	r3, [sp, #24]
 801a868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a86a:	468c      	mov	ip, r1
 801a86c:	681a      	ldr	r2, [r3, #0]
 801a86e:	685b      	ldr	r3, [r3, #4]
 801a870:	9207      	str	r2, [sp, #28]
 801a872:	9308      	str	r3, [sp, #32]
 801a874:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a876:	681a      	ldr	r2, [r3, #0]
 801a878:	685b      	ldr	r3, [r3, #4]
 801a87a:	9209      	str	r2, [sp, #36]	@ 0x24
 801a87c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a87e:	930a      	str	r3, [sp, #40]	@ 0x28
 801a880:	0013      	movs	r3, r2
 801a882:	4463      	add	r3, ip
 801a884:	4698      	mov	r8, r3
 801a886:	0013      	movs	r3, r2
 801a888:	4442      	add	r2, r8
 801a88a:	4691      	mov	r9, r2
 801a88c:	001a      	movs	r2, r3
 801a88e:	444a      	add	r2, r9
 801a890:	4692      	mov	sl, r2
 801a892:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a894:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a896:	4293      	cmp	r3, r2
 801a898:	d800      	bhi.n	801a89c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801a89a:	e0d9      	b.n	801aa50 <arm_radix4_butterfly_inverse_q31+0x46c>
 801a89c:	4694      	mov	ip, r2
 801a89e:	4644      	mov	r4, r8
 801a8a0:	4655      	mov	r5, sl
 801a8a2:	4688      	mov	r8, r1
 801a8a4:	9b07      	ldr	r3, [sp, #28]
 801a8a6:	17db      	asrs	r3, r3, #31
 801a8a8:	930c      	str	r3, [sp, #48]	@ 0x30
 801a8aa:	9b08      	ldr	r3, [sp, #32]
 801a8ac:	17db      	asrs	r3, r3, #31
 801a8ae:	930d      	str	r3, [sp, #52]	@ 0x34
 801a8b0:	9b05      	ldr	r3, [sp, #20]
 801a8b2:	17db      	asrs	r3, r3, #31
 801a8b4:	930e      	str	r3, [sp, #56]	@ 0x38
 801a8b6:	9b06      	ldr	r3, [sp, #24]
 801a8b8:	17db      	asrs	r3, r3, #31
 801a8ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8be:	17db      	asrs	r3, r3, #31
 801a8c0:	9310      	str	r3, [sp, #64]	@ 0x40
 801a8c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a8c4:	17db      	asrs	r3, r3, #31
 801a8c6:	9311      	str	r3, [sp, #68]	@ 0x44
 801a8c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a8ca:	4463      	add	r3, ip
 801a8cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a8ce:	4643      	mov	r3, r8
 801a8d0:	4641      	mov	r1, r8
 801a8d2:	681a      	ldr	r2, [r3, #0]
 801a8d4:	464b      	mov	r3, r9
 801a8d6:	684f      	ldr	r7, [r1, #4]
 801a8d8:	4649      	mov	r1, r9
 801a8da:	681b      	ldr	r3, [r3, #0]
 801a8dc:	18d6      	adds	r6, r2, r3
 801a8de:	1ad3      	subs	r3, r2, r3
 801a8e0:	9301      	str	r3, [sp, #4]
 801a8e2:	684b      	ldr	r3, [r1, #4]
 801a8e4:	1af9      	subs	r1, r7, r3
 801a8e6:	9102      	str	r1, [sp, #8]
 801a8e8:	6829      	ldr	r1, [r5, #0]
 801a8ea:	18f8      	adds	r0, r7, r3
 801a8ec:	468c      	mov	ip, r1
 801a8ee:	6827      	ldr	r7, [r4, #0]
 801a8f0:	4467      	add	r7, ip
 801a8f2:	003a      	movs	r2, r7
 801a8f4:	19f3      	adds	r3, r6, r7
 801a8f6:	4647      	mov	r7, r8
 801a8f8:	109b      	asrs	r3, r3, #2
 801a8fa:	603b      	str	r3, [r7, #0]
 801a8fc:	6869      	ldr	r1, [r5, #4]
 801a8fe:	6867      	ldr	r7, [r4, #4]
 801a900:	468c      	mov	ip, r1
 801a902:	4467      	add	r7, ip
 801a904:	003b      	movs	r3, r7
 801a906:	19c1      	adds	r1, r0, r7
 801a908:	4647      	mov	r7, r8
 801a90a:	1ab6      	subs	r6, r6, r2
 801a90c:	1089      	asrs	r1, r1, #2
 801a90e:	6079      	str	r1, [r7, #4]
 801a910:	17f2      	asrs	r2, r6, #31
 801a912:	9900      	ldr	r1, [sp, #0]
 801a914:	4692      	mov	sl, r2
 801a916:	468c      	mov	ip, r1
 801a918:	6867      	ldr	r7, [r4, #4]
 801a91a:	6869      	ldr	r1, [r5, #4]
 801a91c:	44e0      	add	r8, ip
 801a91e:	1a7f      	subs	r7, r7, r1
 801a920:	9703      	str	r7, [sp, #12]
 801a922:	6821      	ldr	r1, [r4, #0]
 801a924:	682f      	ldr	r7, [r5, #0]
 801a926:	1bc9      	subs	r1, r1, r7
 801a928:	1ac7      	subs	r7, r0, r3
 801a92a:	17fa      	asrs	r2, r7, #31
 801a92c:	4693      	mov	fp, r2
 801a92e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a930:	9a07      	ldr	r2, [sp, #28]
 801a932:	9104      	str	r1, [sp, #16]
 801a934:	0030      	movs	r0, r6
 801a936:	4651      	mov	r1, sl
 801a938:	f7e5 fe42 	bl	80005c0 <__aeabi_lmul>
 801a93c:	9a08      	ldr	r2, [sp, #32]
 801a93e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a940:	9112      	str	r1, [sp, #72]	@ 0x48
 801a942:	0038      	movs	r0, r7
 801a944:	4659      	mov	r1, fp
 801a946:	f7e5 fe3b 	bl	80005c0 <__aeabi_lmul>
 801a94a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a94c:	9a07      	ldr	r2, [sp, #28]
 801a94e:	1a41      	subs	r1, r0, r1
 801a950:	1049      	asrs	r1, r1, #1
 801a952:	6021      	str	r1, [r4, #0]
 801a954:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a956:	0038      	movs	r0, r7
 801a958:	4659      	mov	r1, fp
 801a95a:	f7e5 fe31 	bl	80005c0 <__aeabi_lmul>
 801a95e:	9a08      	ldr	r2, [sp, #32]
 801a960:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a962:	000f      	movs	r7, r1
 801a964:	0030      	movs	r0, r6
 801a966:	4651      	mov	r1, sl
 801a968:	f7e5 fe2a 	bl	80005c0 <__aeabi_lmul>
 801a96c:	9b00      	ldr	r3, [sp, #0]
 801a96e:	187f      	adds	r7, r7, r1
 801a970:	469c      	mov	ip, r3
 801a972:	107f      	asrs	r7, r7, #1
 801a974:	6067      	str	r7, [r4, #4]
 801a976:	9a01      	ldr	r2, [sp, #4]
 801a978:	9f03      	ldr	r7, [sp, #12]
 801a97a:	9802      	ldr	r0, [sp, #8]
 801a97c:	1bd7      	subs	r7, r2, r7
 801a97e:	17fe      	asrs	r6, r7, #31
 801a980:	0031      	movs	r1, r6
 801a982:	9e04      	ldr	r6, [sp, #16]
 801a984:	4682      	mov	sl, r0
 801a986:	4464      	add	r4, ip
 801a988:	46b4      	mov	ip, r6
 801a98a:	44e2      	add	sl, ip
 801a98c:	4652      	mov	r2, sl
 801a98e:	17d2      	asrs	r2, r2, #31
 801a990:	4693      	mov	fp, r2
 801a992:	0038      	movs	r0, r7
 801a994:	9a05      	ldr	r2, [sp, #20]
 801a996:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a998:	9112      	str	r1, [sp, #72]	@ 0x48
 801a99a:	f7e5 fe11 	bl	80005c0 <__aeabi_lmul>
 801a99e:	9a06      	ldr	r2, [sp, #24]
 801a9a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a9a2:	000e      	movs	r6, r1
 801a9a4:	4650      	mov	r0, sl
 801a9a6:	4659      	mov	r1, fp
 801a9a8:	f7e5 fe0a 	bl	80005c0 <__aeabi_lmul>
 801a9ac:	4648      	mov	r0, r9
 801a9ae:	1a76      	subs	r6, r6, r1
 801a9b0:	1076      	asrs	r6, r6, #1
 801a9b2:	6006      	str	r6, [r0, #0]
 801a9b4:	9a05      	ldr	r2, [sp, #20]
 801a9b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a9b8:	4650      	mov	r0, sl
 801a9ba:	4659      	mov	r1, fp
 801a9bc:	f7e5 fe00 	bl	80005c0 <__aeabi_lmul>
 801a9c0:	9a06      	ldr	r2, [sp, #24]
 801a9c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a9c4:	000e      	movs	r6, r1
 801a9c6:	0038      	movs	r0, r7
 801a9c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a9ca:	f7e5 fdf9 	bl	80005c0 <__aeabi_lmul>
 801a9ce:	9a00      	ldr	r2, [sp, #0]
 801a9d0:	9f03      	ldr	r7, [sp, #12]
 801a9d2:	4694      	mov	ip, r2
 801a9d4:	1876      	adds	r6, r6, r1
 801a9d6:	4649      	mov	r1, r9
 801a9d8:	44e1      	add	r9, ip
 801a9da:	46bc      	mov	ip, r7
 801a9dc:	9b01      	ldr	r3, [sp, #4]
 801a9de:	1076      	asrs	r6, r6, #1
 801a9e0:	4463      	add	r3, ip
 801a9e2:	17df      	asrs	r7, r3, #31
 801a9e4:	604e      	str	r6, [r1, #4]
 801a9e6:	46ba      	mov	sl, r7
 801a9e8:	001e      	movs	r6, r3
 801a9ea:	9802      	ldr	r0, [sp, #8]
 801a9ec:	9b04      	ldr	r3, [sp, #16]
 801a9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a9f0:	1ac7      	subs	r7, r0, r3
 801a9f2:	17fb      	asrs	r3, r7, #31
 801a9f4:	469b      	mov	fp, r3
 801a9f6:	0030      	movs	r0, r6
 801a9f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a9fa:	4651      	mov	r1, sl
 801a9fc:	f7e5 fde0 	bl	80005c0 <__aeabi_lmul>
 801aa00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aa02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aa04:	9101      	str	r1, [sp, #4]
 801aa06:	0038      	movs	r0, r7
 801aa08:	4659      	mov	r1, fp
 801aa0a:	f7e5 fdd9 	bl	80005c0 <__aeabi_lmul>
 801aa0e:	9801      	ldr	r0, [sp, #4]
 801aa10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801aa12:	1a41      	subs	r1, r0, r1
 801aa14:	1049      	asrs	r1, r1, #1
 801aa16:	6029      	str	r1, [r5, #0]
 801aa18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801aa1a:	0038      	movs	r0, r7
 801aa1c:	4659      	mov	r1, fp
 801aa1e:	f7e5 fdcf 	bl	80005c0 <__aeabi_lmul>
 801aa22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aa24:	000f      	movs	r7, r1
 801aa26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aa28:	0030      	movs	r0, r6
 801aa2a:	4651      	mov	r1, sl
 801aa2c:	f7e5 fdc8 	bl	80005c0 <__aeabi_lmul>
 801aa30:	187f      	adds	r7, r7, r1
 801aa32:	107f      	asrs	r7, r7, #1
 801aa34:	606f      	str	r7, [r5, #4]
 801aa36:	9a00      	ldr	r2, [sp, #0]
 801aa38:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801aa3a:	4694      	mov	ip, r2
 801aa3c:	4465      	add	r5, ip
 801aa3e:	468c      	mov	ip, r1
 801aa40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801aa42:	0013      	movs	r3, r2
 801aa44:	4462      	add	r2, ip
 801aa46:	920b      	str	r2, [sp, #44]	@ 0x2c
 801aa48:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801aa4a:	429a      	cmp	r2, r3
 801aa4c:	d900      	bls.n	801aa50 <arm_radix4_butterfly_inverse_q31+0x46c>
 801aa4e:	e73e      	b.n	801a8ce <arm_radix4_butterfly_inverse_q31+0x2ea>
 801aa50:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801aa52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801aa54:	468c      	mov	ip, r1
 801aa56:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801aa58:	4462      	add	r2, ip
 801aa5a:	468c      	mov	ip, r1
 801aa5c:	9216      	str	r2, [sp, #88]	@ 0x58
 801aa5e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801aa60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801aa62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801aa64:	4462      	add	r2, ip
 801aa66:	468c      	mov	ip, r1
 801aa68:	9219      	str	r2, [sp, #100]	@ 0x64
 801aa6a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801aa6c:	3301      	adds	r3, #1
 801aa6e:	4462      	add	r2, ip
 801aa70:	9218      	str	r2, [sp, #96]	@ 0x60
 801aa72:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801aa74:	9315      	str	r3, [sp, #84]	@ 0x54
 801aa76:	3208      	adds	r2, #8
 801aa78:	9217      	str	r2, [sp, #92]	@ 0x5c
 801aa7a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	d800      	bhi.n	801aa82 <arm_radix4_butterfly_inverse_q31+0x49e>
 801aa80:	e6ec      	b.n	801a85c <arm_radix4_butterfly_inverse_q31+0x278>
 801aa82:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801aa84:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801aa86:	009b      	lsls	r3, r3, #2
 801aa88:	931f      	str	r3, [sp, #124]	@ 0x7c
 801aa8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801aa8c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801aa8e:	089b      	lsrs	r3, r3, #2
 801aa90:	9320      	str	r3, [sp, #128]	@ 0x80
 801aa92:	2b04      	cmp	r3, #4
 801aa94:	d900      	bls.n	801aa98 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801aa96:	e6c5      	b.n	801a824 <arm_radix4_butterfly_inverse_q31+0x240>
 801aa98:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801aa9a:	469a      	mov	sl, r3
 801aa9c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801aa9e:	681a      	ldr	r2, [r3, #0]
 801aaa0:	6918      	ldr	r0, [r3, #16]
 801aaa2:	4691      	mov	r9, r2
 801aaa4:	464c      	mov	r4, r9
 801aaa6:	4680      	mov	r8, r0
 801aaa8:	69de      	ldr	r6, [r3, #28]
 801aaaa:	689d      	ldr	r5, [r3, #8]
 801aaac:	46b4      	mov	ip, r6
 801aaae:	6998      	ldr	r0, [r3, #24]
 801aab0:	1964      	adds	r4, r4, r5
 801aab2:	6859      	ldr	r1, [r3, #4]
 801aab4:	68da      	ldr	r2, [r3, #12]
 801aab6:	4444      	add	r4, r8
 801aab8:	695f      	ldr	r7, [r3, #20]
 801aaba:	1824      	adds	r4, r4, r0
 801aabc:	601c      	str	r4, [r3, #0]
 801aabe:	188c      	adds	r4, r1, r2
 801aac0:	19e4      	adds	r4, r4, r7
 801aac2:	4464      	add	r4, ip
 801aac4:	605c      	str	r4, [r3, #4]
 801aac6:	464c      	mov	r4, r9
 801aac8:	1b64      	subs	r4, r4, r5
 801aaca:	4444      	add	r4, r8
 801aacc:	1a24      	subs	r4, r4, r0
 801aace:	609c      	str	r4, [r3, #8]
 801aad0:	1a8c      	subs	r4, r1, r2
 801aad2:	19e4      	adds	r4, r4, r7
 801aad4:	1ba4      	subs	r4, r4, r6
 801aad6:	60dc      	str	r4, [r3, #12]
 801aad8:	464c      	mov	r4, r9
 801aada:	4646      	mov	r6, r8
 801aadc:	1aa4      	subs	r4, r4, r2
 801aade:	1ba4      	subs	r4, r4, r6
 801aae0:	4464      	add	r4, ip
 801aae2:	611c      	str	r4, [r3, #16]
 801aae4:	194c      	adds	r4, r1, r5
 801aae6:	1be4      	subs	r4, r4, r7
 801aae8:	1a24      	subs	r4, r4, r0
 801aaea:	615c      	str	r4, [r3, #20]
 801aaec:	4644      	mov	r4, r8
 801aaee:	4666      	mov	r6, ip
 801aaf0:	444a      	add	r2, r9
 801aaf2:	1b12      	subs	r2, r2, r4
 801aaf4:	1b92      	subs	r2, r2, r6
 801aaf6:	619a      	str	r2, [r3, #24]
 801aaf8:	1b4a      	subs	r2, r1, r5
 801aafa:	1bd1      	subs	r1, r2, r7
 801aafc:	2201      	movs	r2, #1
 801aafe:	4252      	negs	r2, r2
 801ab00:	4694      	mov	ip, r2
 801ab02:	44e2      	add	sl, ip
 801ab04:	4652      	mov	r2, sl
 801ab06:	1809      	adds	r1, r1, r0
 801ab08:	61d9      	str	r1, [r3, #28]
 801ab0a:	3320      	adds	r3, #32
 801ab0c:	2a00      	cmp	r2, #0
 801ab0e:	d1c6      	bne.n	801aa9e <arm_radix4_butterfly_inverse_q31+0x4ba>
 801ab10:	b027      	add	sp, #156	@ 0x9c
 801ab12:	bc3c      	pop	{r2, r3, r4, r5}
 801ab14:	4690      	mov	r8, r2
 801ab16:	4699      	mov	r9, r3
 801ab18:	46a2      	mov	sl, r4
 801ab1a:	46ab      	mov	fp, r5
 801ab1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab1e:	469a      	mov	sl, r3
 801ab20:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ab22:	e7bc      	b.n	801aa9e <arm_radix4_butterfly_inverse_q31+0x4ba>

0801ab24 <arm_cmplx_mag_squared_q31>:
 801ab24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab26:	464f      	mov	r7, r9
 801ab28:	4646      	mov	r6, r8
 801ab2a:	0004      	movs	r4, r0
 801ab2c:	b4c0      	push	{r6, r7}
 801ab2e:	0016      	movs	r6, r2
 801ab30:	000f      	movs	r7, r1
 801ab32:	2a00      	cmp	r2, #0
 801ab34:	d018      	beq.n	801ab68 <arm_cmplx_mag_squared_q31+0x44>
 801ab36:	6823      	ldr	r3, [r4, #0]
 801ab38:	6822      	ldr	r2, [r4, #0]
 801ab3a:	17d9      	asrs	r1, r3, #31
 801ab3c:	6863      	ldr	r3, [r4, #4]
 801ab3e:	0010      	movs	r0, r2
 801ab40:	4698      	mov	r8, r3
 801ab42:	17db      	asrs	r3, r3, #31
 801ab44:	4699      	mov	r9, r3
 801ab46:	000b      	movs	r3, r1
 801ab48:	f7e5 fd3a 	bl	80005c0 <__aeabi_lmul>
 801ab4c:	4642      	mov	r2, r8
 801ab4e:	104d      	asrs	r5, r1, #1
 801ab50:	464b      	mov	r3, r9
 801ab52:	4640      	mov	r0, r8
 801ab54:	4649      	mov	r1, r9
 801ab56:	f7e5 fd33 	bl	80005c0 <__aeabi_lmul>
 801ab5a:	1049      	asrs	r1, r1, #1
 801ab5c:	1869      	adds	r1, r5, r1
 801ab5e:	3e01      	subs	r6, #1
 801ab60:	c702      	stmia	r7!, {r1}
 801ab62:	3408      	adds	r4, #8
 801ab64:	2e00      	cmp	r6, #0
 801ab66:	d1e6      	bne.n	801ab36 <arm_cmplx_mag_squared_q31+0x12>
 801ab68:	bc0c      	pop	{r2, r3}
 801ab6a:	4690      	mov	r8, r2
 801ab6c:	4699      	mov	r9, r3
 801ab6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ab70 <arm_mult_q31>:
 801ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab72:	4646      	mov	r6, r8
 801ab74:	464f      	mov	r7, r9
 801ab76:	4690      	mov	r8, r2
 801ab78:	b4c0      	push	{r6, r7}
 801ab7a:	001d      	movs	r5, r3
 801ab7c:	0006      	movs	r6, r0
 801ab7e:	000f      	movs	r7, r1
 801ab80:	2400      	movs	r4, #0
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d020      	beq.n	801abc8 <arm_mult_q31+0x58>
 801ab86:	4b12      	ldr	r3, [pc, #72]	@ (801abd0 <arm_mult_q31+0x60>)
 801ab88:	4699      	mov	r9, r3
 801ab8a:	e007      	b.n	801ab9c <arm_mult_q31+0x2c>
 801ab8c:	464b      	mov	r3, r9
 801ab8e:	4059      	eors	r1, r3
 801ab90:	4643      	mov	r3, r8
 801ab92:	3d01      	subs	r5, #1
 801ab94:	5119      	str	r1, [r3, r4]
 801ab96:	3404      	adds	r4, #4
 801ab98:	2d00      	cmp	r5, #0
 801ab9a:	d015      	beq.n	801abc8 <arm_mult_q31+0x58>
 801ab9c:	5933      	ldr	r3, [r6, r4]
 801ab9e:	593a      	ldr	r2, [r7, r4]
 801aba0:	17d9      	asrs	r1, r3, #31
 801aba2:	593b      	ldr	r3, [r7, r4]
 801aba4:	5930      	ldr	r0, [r6, r4]
 801aba6:	17db      	asrs	r3, r3, #31
 801aba8:	f7e5 fd0a 	bl	80005c0 <__aeabi_lmul>
 801abac:	004b      	lsls	r3, r1, #1
 801abae:	0fc0      	lsrs	r0, r0, #31
 801abb0:	4318      	orrs	r0, r3
 801abb2:	17c9      	asrs	r1, r1, #31
 801abb4:	17c3      	asrs	r3, r0, #31
 801abb6:	428b      	cmp	r3, r1
 801abb8:	d1e8      	bne.n	801ab8c <arm_mult_q31+0x1c>
 801abba:	0001      	movs	r1, r0
 801abbc:	4643      	mov	r3, r8
 801abbe:	3d01      	subs	r5, #1
 801abc0:	5119      	str	r1, [r3, r4]
 801abc2:	3404      	adds	r4, #4
 801abc4:	2d00      	cmp	r5, #0
 801abc6:	d1e9      	bne.n	801ab9c <arm_mult_q31+0x2c>
 801abc8:	bc0c      	pop	{r2, r3}
 801abca:	4690      	mov	r8, r2
 801abcc:	4699      	mov	r9, r3
 801abce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abd0:	7fffffff 	.word	0x7fffffff

0801abd4 <arm_add_q31>:
 801abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abd6:	465f      	mov	r7, fp
 801abd8:	4656      	mov	r6, sl
 801abda:	464d      	mov	r5, r9
 801abdc:	4644      	mov	r4, r8
 801abde:	b4f0      	push	{r4, r5, r6, r7}
 801abe0:	4693      	mov	fp, r2
 801abe2:	b083      	sub	sp, #12
 801abe4:	4681      	mov	r9, r0
 801abe6:	468a      	mov	sl, r1
 801abe8:	4698      	mov	r8, r3
 801abea:	2200      	movs	r2, #0
 801abec:	2b00      	cmp	r3, #0
 801abee:	d020      	beq.n	801ac32 <arm_add_q31+0x5e>
 801abf0:	4649      	mov	r1, r9
 801abf2:	4653      	mov	r3, sl
 801abf4:	588e      	ldr	r6, [r1, r2]
 801abf6:	589b      	ldr	r3, [r3, r2]
 801abf8:	17f7      	asrs	r7, r6, #31
 801abfa:	001c      	movs	r4, r3
 801abfc:	0030      	movs	r0, r6
 801abfe:	0039      	movs	r1, r7
 801ac00:	17dd      	asrs	r5, r3, #31
 801ac02:	46b4      	mov	ip, r6
 801ac04:	1900      	adds	r0, r0, r4
 801ac06:	4169      	adcs	r1, r5
 801ac08:	4463      	add	r3, ip
 801ac0a:	9000      	str	r0, [sp, #0]
 801ac0c:	9101      	str	r1, [sp, #4]
 801ac0e:	17d9      	asrs	r1, r3, #31
 801ac10:	468c      	mov	ip, r1
 801ac12:	9901      	ldr	r1, [sp, #4]
 801ac14:	458c      	cmp	ip, r1
 801ac16:	d002      	beq.n	801ac1e <arm_add_q31+0x4a>
 801ac18:	17cb      	asrs	r3, r1, #31
 801ac1a:	4909      	ldr	r1, [pc, #36]	@ (801ac40 <arm_add_q31+0x6c>)
 801ac1c:	404b      	eors	r3, r1
 801ac1e:	4659      	mov	r1, fp
 801ac20:	508b      	str	r3, [r1, r2]
 801ac22:	2301      	movs	r3, #1
 801ac24:	425b      	negs	r3, r3
 801ac26:	469c      	mov	ip, r3
 801ac28:	44e0      	add	r8, ip
 801ac2a:	4643      	mov	r3, r8
 801ac2c:	3204      	adds	r2, #4
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d1de      	bne.n	801abf0 <arm_add_q31+0x1c>
 801ac32:	b003      	add	sp, #12
 801ac34:	bc3c      	pop	{r2, r3, r4, r5}
 801ac36:	4690      	mov	r8, r2
 801ac38:	4699      	mov	r9, r3
 801ac3a:	46a2      	mov	sl, r4
 801ac3c:	46ab      	mov	fp, r5
 801ac3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac40:	7fffffff 	.word	0x7fffffff

0801ac44 <atof>:
 801ac44:	b510      	push	{r4, lr}
 801ac46:	2100      	movs	r1, #0
 801ac48:	f000 fe12 	bl	801b870 <strtod>
 801ac4c:	bd10      	pop	{r4, pc}

0801ac4e <atoi>:
 801ac4e:	b510      	push	{r4, lr}
 801ac50:	220a      	movs	r2, #10
 801ac52:	2100      	movs	r1, #0
 801ac54:	f000 fea4 	bl	801b9a0 <strtol>
 801ac58:	bd10      	pop	{r4, pc}
	...

0801ac5c <sulp>:
 801ac5c:	b570      	push	{r4, r5, r6, lr}
 801ac5e:	0016      	movs	r6, r2
 801ac60:	000d      	movs	r5, r1
 801ac62:	f003 fcf3 	bl	801e64c <__ulp>
 801ac66:	2e00      	cmp	r6, #0
 801ac68:	d00d      	beq.n	801ac86 <sulp+0x2a>
 801ac6a:	236b      	movs	r3, #107	@ 0x6b
 801ac6c:	006a      	lsls	r2, r5, #1
 801ac6e:	0d52      	lsrs	r2, r2, #21
 801ac70:	1a9b      	subs	r3, r3, r2
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	dd07      	ble.n	801ac86 <sulp+0x2a>
 801ac76:	2400      	movs	r4, #0
 801ac78:	4a03      	ldr	r2, [pc, #12]	@ (801ac88 <sulp+0x2c>)
 801ac7a:	051b      	lsls	r3, r3, #20
 801ac7c:	189d      	adds	r5, r3, r2
 801ac7e:	002b      	movs	r3, r5
 801ac80:	0022      	movs	r2, r4
 801ac82:	f7e7 fcdb 	bl	800263c <__aeabi_dmul>
 801ac86:	bd70      	pop	{r4, r5, r6, pc}
 801ac88:	3ff00000 	.word	0x3ff00000

0801ac8c <_strtod_l>:
 801ac8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac8e:	b0a3      	sub	sp, #140	@ 0x8c
 801ac90:	921b      	str	r2, [sp, #108]	@ 0x6c
 801ac92:	2200      	movs	r2, #0
 801ac94:	2600      	movs	r6, #0
 801ac96:	2700      	movs	r7, #0
 801ac98:	9005      	str	r0, [sp, #20]
 801ac9a:	9109      	str	r1, [sp, #36]	@ 0x24
 801ac9c:	921e      	str	r2, [sp, #120]	@ 0x78
 801ac9e:	911d      	str	r1, [sp, #116]	@ 0x74
 801aca0:	780a      	ldrb	r2, [r1, #0]
 801aca2:	2a2b      	cmp	r2, #43	@ 0x2b
 801aca4:	d053      	beq.n	801ad4e <_strtod_l+0xc2>
 801aca6:	d83f      	bhi.n	801ad28 <_strtod_l+0x9c>
 801aca8:	2a0d      	cmp	r2, #13
 801acaa:	d839      	bhi.n	801ad20 <_strtod_l+0x94>
 801acac:	2a08      	cmp	r2, #8
 801acae:	d839      	bhi.n	801ad24 <_strtod_l+0x98>
 801acb0:	2a00      	cmp	r2, #0
 801acb2:	d042      	beq.n	801ad3a <_strtod_l+0xae>
 801acb4:	2200      	movs	r2, #0
 801acb6:	9212      	str	r2, [sp, #72]	@ 0x48
 801acb8:	2100      	movs	r1, #0
 801acba:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801acbc:	910c      	str	r1, [sp, #48]	@ 0x30
 801acbe:	782a      	ldrb	r2, [r5, #0]
 801acc0:	2a30      	cmp	r2, #48	@ 0x30
 801acc2:	d000      	beq.n	801acc6 <_strtod_l+0x3a>
 801acc4:	e083      	b.n	801adce <_strtod_l+0x142>
 801acc6:	786a      	ldrb	r2, [r5, #1]
 801acc8:	3120      	adds	r1, #32
 801acca:	438a      	bics	r2, r1
 801accc:	2a58      	cmp	r2, #88	@ 0x58
 801acce:	d000      	beq.n	801acd2 <_strtod_l+0x46>
 801acd0:	e073      	b.n	801adba <_strtod_l+0x12e>
 801acd2:	9302      	str	r3, [sp, #8]
 801acd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801acd6:	4a95      	ldr	r2, [pc, #596]	@ (801af2c <_strtod_l+0x2a0>)
 801acd8:	9301      	str	r3, [sp, #4]
 801acda:	ab1e      	add	r3, sp, #120	@ 0x78
 801acdc:	9300      	str	r3, [sp, #0]
 801acde:	9805      	ldr	r0, [sp, #20]
 801ace0:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ace2:	a91d      	add	r1, sp, #116	@ 0x74
 801ace4:	f002 fd62 	bl	801d7ac <__gethex>
 801ace8:	230f      	movs	r3, #15
 801acea:	0002      	movs	r2, r0
 801acec:	401a      	ands	r2, r3
 801acee:	0004      	movs	r4, r0
 801acf0:	9206      	str	r2, [sp, #24]
 801acf2:	4218      	tst	r0, r3
 801acf4:	d005      	beq.n	801ad02 <_strtod_l+0x76>
 801acf6:	2a06      	cmp	r2, #6
 801acf8:	d12b      	bne.n	801ad52 <_strtod_l+0xc6>
 801acfa:	2300      	movs	r3, #0
 801acfc:	3501      	adds	r5, #1
 801acfe:	951d      	str	r5, [sp, #116]	@ 0x74
 801ad00:	9312      	str	r3, [sp, #72]	@ 0x48
 801ad02:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d002      	beq.n	801ad0e <_strtod_l+0x82>
 801ad08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ad0c:	6013      	str	r3, [r2, #0]
 801ad0e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d019      	beq.n	801ad48 <_strtod_l+0xbc>
 801ad14:	2380      	movs	r3, #128	@ 0x80
 801ad16:	0030      	movs	r0, r6
 801ad18:	061b      	lsls	r3, r3, #24
 801ad1a:	18f9      	adds	r1, r7, r3
 801ad1c:	b023      	add	sp, #140	@ 0x8c
 801ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad20:	2a20      	cmp	r2, #32
 801ad22:	d1c7      	bne.n	801acb4 <_strtod_l+0x28>
 801ad24:	3101      	adds	r1, #1
 801ad26:	e7ba      	b.n	801ac9e <_strtod_l+0x12>
 801ad28:	2a2d      	cmp	r2, #45	@ 0x2d
 801ad2a:	d1c3      	bne.n	801acb4 <_strtod_l+0x28>
 801ad2c:	3a2c      	subs	r2, #44	@ 0x2c
 801ad2e:	9212      	str	r2, [sp, #72]	@ 0x48
 801ad30:	1c4a      	adds	r2, r1, #1
 801ad32:	921d      	str	r2, [sp, #116]	@ 0x74
 801ad34:	784a      	ldrb	r2, [r1, #1]
 801ad36:	2a00      	cmp	r2, #0
 801ad38:	d1be      	bne.n	801acb8 <_strtod_l+0x2c>
 801ad3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad3c:	931d      	str	r3, [sp, #116]	@ 0x74
 801ad3e:	2300      	movs	r3, #0
 801ad40:	9312      	str	r3, [sp, #72]	@ 0x48
 801ad42:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d1df      	bne.n	801ad08 <_strtod_l+0x7c>
 801ad48:	0030      	movs	r0, r6
 801ad4a:	0039      	movs	r1, r7
 801ad4c:	e7e6      	b.n	801ad1c <_strtod_l+0x90>
 801ad4e:	2200      	movs	r2, #0
 801ad50:	e7ed      	b.n	801ad2e <_strtod_l+0xa2>
 801ad52:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ad54:	2a00      	cmp	r2, #0
 801ad56:	d007      	beq.n	801ad68 <_strtod_l+0xdc>
 801ad58:	2135      	movs	r1, #53	@ 0x35
 801ad5a:	a820      	add	r0, sp, #128	@ 0x80
 801ad5c:	f003 fd6c 	bl	801e838 <__copybits>
 801ad60:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ad62:	9805      	ldr	r0, [sp, #20]
 801ad64:	f003 f926 	bl	801dfb4 <_Bfree>
 801ad68:	9806      	ldr	r0, [sp, #24]
 801ad6a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ad6c:	3801      	subs	r0, #1
 801ad6e:	2804      	cmp	r0, #4
 801ad70:	d806      	bhi.n	801ad80 <_strtod_l+0xf4>
 801ad72:	f7e5 fa03 	bl	800017c <__gnu_thumb1_case_uqi>
 801ad76:	0312      	.short	0x0312
 801ad78:	1e1c      	.short	0x1e1c
 801ad7a:	12          	.byte	0x12
 801ad7b:	00          	.byte	0x00
 801ad7c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ad7e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801ad80:	05e4      	lsls	r4, r4, #23
 801ad82:	d502      	bpl.n	801ad8a <_strtod_l+0xfe>
 801ad84:	2380      	movs	r3, #128	@ 0x80
 801ad86:	061b      	lsls	r3, r3, #24
 801ad88:	431f      	orrs	r7, r3
 801ad8a:	4b69      	ldr	r3, [pc, #420]	@ (801af30 <_strtod_l+0x2a4>)
 801ad8c:	423b      	tst	r3, r7
 801ad8e:	d1b8      	bne.n	801ad02 <_strtod_l+0x76>
 801ad90:	f001 fd90 	bl	801c8b4 <__errno>
 801ad94:	2322      	movs	r3, #34	@ 0x22
 801ad96:	6003      	str	r3, [r0, #0]
 801ad98:	e7b3      	b.n	801ad02 <_strtod_l+0x76>
 801ad9a:	4966      	ldr	r1, [pc, #408]	@ (801af34 <_strtod_l+0x2a8>)
 801ad9c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ad9e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ada0:	400a      	ands	r2, r1
 801ada2:	4965      	ldr	r1, [pc, #404]	@ (801af38 <_strtod_l+0x2ac>)
 801ada4:	185b      	adds	r3, r3, r1
 801ada6:	051b      	lsls	r3, r3, #20
 801ada8:	431a      	orrs	r2, r3
 801adaa:	0017      	movs	r7, r2
 801adac:	e7e8      	b.n	801ad80 <_strtod_l+0xf4>
 801adae:	4f60      	ldr	r7, [pc, #384]	@ (801af30 <_strtod_l+0x2a4>)
 801adb0:	e7e6      	b.n	801ad80 <_strtod_l+0xf4>
 801adb2:	2601      	movs	r6, #1
 801adb4:	4f61      	ldr	r7, [pc, #388]	@ (801af3c <_strtod_l+0x2b0>)
 801adb6:	4276      	negs	r6, r6
 801adb8:	e7e2      	b.n	801ad80 <_strtod_l+0xf4>
 801adba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801adbc:	1c5a      	adds	r2, r3, #1
 801adbe:	921d      	str	r2, [sp, #116]	@ 0x74
 801adc0:	785b      	ldrb	r3, [r3, #1]
 801adc2:	2b30      	cmp	r3, #48	@ 0x30
 801adc4:	d0f9      	beq.n	801adba <_strtod_l+0x12e>
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d09b      	beq.n	801ad02 <_strtod_l+0x76>
 801adca:	2301      	movs	r3, #1
 801adcc:	930c      	str	r3, [sp, #48]	@ 0x30
 801adce:	2500      	movs	r5, #0
 801add0:	220a      	movs	r2, #10
 801add2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801add4:	950d      	str	r5, [sp, #52]	@ 0x34
 801add6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801add8:	9508      	str	r5, [sp, #32]
 801adda:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801addc:	7804      	ldrb	r4, [r0, #0]
 801adde:	0023      	movs	r3, r4
 801ade0:	3b30      	subs	r3, #48	@ 0x30
 801ade2:	b2d9      	uxtb	r1, r3
 801ade4:	2909      	cmp	r1, #9
 801ade6:	d927      	bls.n	801ae38 <_strtod_l+0x1ac>
 801ade8:	2201      	movs	r2, #1
 801adea:	4955      	ldr	r1, [pc, #340]	@ (801af40 <_strtod_l+0x2b4>)
 801adec:	f001 fcd4 	bl	801c798 <strncmp>
 801adf0:	2800      	cmp	r0, #0
 801adf2:	d031      	beq.n	801ae58 <_strtod_l+0x1cc>
 801adf4:	2000      	movs	r0, #0
 801adf6:	0023      	movs	r3, r4
 801adf8:	4684      	mov	ip, r0
 801adfa:	9a08      	ldr	r2, [sp, #32]
 801adfc:	900e      	str	r0, [sp, #56]	@ 0x38
 801adfe:	9206      	str	r2, [sp, #24]
 801ae00:	2220      	movs	r2, #32
 801ae02:	0019      	movs	r1, r3
 801ae04:	4391      	bics	r1, r2
 801ae06:	000a      	movs	r2, r1
 801ae08:	2100      	movs	r1, #0
 801ae0a:	9107      	str	r1, [sp, #28]
 801ae0c:	2a45      	cmp	r2, #69	@ 0x45
 801ae0e:	d000      	beq.n	801ae12 <_strtod_l+0x186>
 801ae10:	e0c0      	b.n	801af94 <_strtod_l+0x308>
 801ae12:	9b06      	ldr	r3, [sp, #24]
 801ae14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ae16:	4303      	orrs	r3, r0
 801ae18:	4313      	orrs	r3, r2
 801ae1a:	428b      	cmp	r3, r1
 801ae1c:	d08d      	beq.n	801ad3a <_strtod_l+0xae>
 801ae1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae20:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae22:	3301      	adds	r3, #1
 801ae24:	931d      	str	r3, [sp, #116]	@ 0x74
 801ae26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae28:	785b      	ldrb	r3, [r3, #1]
 801ae2a:	2b2b      	cmp	r3, #43	@ 0x2b
 801ae2c:	d070      	beq.n	801af10 <_strtod_l+0x284>
 801ae2e:	000c      	movs	r4, r1
 801ae30:	2b2d      	cmp	r3, #45	@ 0x2d
 801ae32:	d173      	bne.n	801af1c <_strtod_l+0x290>
 801ae34:	2401      	movs	r4, #1
 801ae36:	e06c      	b.n	801af12 <_strtod_l+0x286>
 801ae38:	9908      	ldr	r1, [sp, #32]
 801ae3a:	2908      	cmp	r1, #8
 801ae3c:	dc09      	bgt.n	801ae52 <_strtod_l+0x1c6>
 801ae3e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ae40:	4351      	muls	r1, r2
 801ae42:	185b      	adds	r3, r3, r1
 801ae44:	930d      	str	r3, [sp, #52]	@ 0x34
 801ae46:	9b08      	ldr	r3, [sp, #32]
 801ae48:	3001      	adds	r0, #1
 801ae4a:	3301      	adds	r3, #1
 801ae4c:	9308      	str	r3, [sp, #32]
 801ae4e:	901d      	str	r0, [sp, #116]	@ 0x74
 801ae50:	e7c3      	b.n	801adda <_strtod_l+0x14e>
 801ae52:	4355      	muls	r5, r2
 801ae54:	195d      	adds	r5, r3, r5
 801ae56:	e7f6      	b.n	801ae46 <_strtod_l+0x1ba>
 801ae58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae5a:	1c5a      	adds	r2, r3, #1
 801ae5c:	921d      	str	r2, [sp, #116]	@ 0x74
 801ae5e:	9a08      	ldr	r2, [sp, #32]
 801ae60:	785b      	ldrb	r3, [r3, #1]
 801ae62:	2a00      	cmp	r2, #0
 801ae64:	d03a      	beq.n	801aedc <_strtod_l+0x250>
 801ae66:	900e      	str	r0, [sp, #56]	@ 0x38
 801ae68:	9206      	str	r2, [sp, #24]
 801ae6a:	001a      	movs	r2, r3
 801ae6c:	3a30      	subs	r2, #48	@ 0x30
 801ae6e:	2a09      	cmp	r2, #9
 801ae70:	d912      	bls.n	801ae98 <_strtod_l+0x20c>
 801ae72:	2201      	movs	r2, #1
 801ae74:	4694      	mov	ip, r2
 801ae76:	e7c3      	b.n	801ae00 <_strtod_l+0x174>
 801ae78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae7a:	3001      	adds	r0, #1
 801ae7c:	1c5a      	adds	r2, r3, #1
 801ae7e:	921d      	str	r2, [sp, #116]	@ 0x74
 801ae80:	785b      	ldrb	r3, [r3, #1]
 801ae82:	2b30      	cmp	r3, #48	@ 0x30
 801ae84:	d0f8      	beq.n	801ae78 <_strtod_l+0x1ec>
 801ae86:	001a      	movs	r2, r3
 801ae88:	3a31      	subs	r2, #49	@ 0x31
 801ae8a:	2a08      	cmp	r2, #8
 801ae8c:	d83b      	bhi.n	801af06 <_strtod_l+0x27a>
 801ae8e:	900e      	str	r0, [sp, #56]	@ 0x38
 801ae90:	2000      	movs	r0, #0
 801ae92:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ae94:	9006      	str	r0, [sp, #24]
 801ae96:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ae98:	001a      	movs	r2, r3
 801ae9a:	1c41      	adds	r1, r0, #1
 801ae9c:	3a30      	subs	r2, #48	@ 0x30
 801ae9e:	2b30      	cmp	r3, #48	@ 0x30
 801aea0:	d016      	beq.n	801aed0 <_strtod_l+0x244>
 801aea2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aea4:	185b      	adds	r3, r3, r1
 801aea6:	930e      	str	r3, [sp, #56]	@ 0x38
 801aea8:	9b06      	ldr	r3, [sp, #24]
 801aeaa:	210a      	movs	r1, #10
 801aeac:	469c      	mov	ip, r3
 801aeae:	4484      	add	ip, r0
 801aeb0:	459c      	cmp	ip, r3
 801aeb2:	d115      	bne.n	801aee0 <_strtod_l+0x254>
 801aeb4:	9906      	ldr	r1, [sp, #24]
 801aeb6:	9b06      	ldr	r3, [sp, #24]
 801aeb8:	3101      	adds	r1, #1
 801aeba:	1809      	adds	r1, r1, r0
 801aebc:	181b      	adds	r3, r3, r0
 801aebe:	9106      	str	r1, [sp, #24]
 801aec0:	2b08      	cmp	r3, #8
 801aec2:	dc19      	bgt.n	801aef8 <_strtod_l+0x26c>
 801aec4:	230a      	movs	r3, #10
 801aec6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801aec8:	434b      	muls	r3, r1
 801aeca:	2100      	movs	r1, #0
 801aecc:	18d3      	adds	r3, r2, r3
 801aece:	930d      	str	r3, [sp, #52]	@ 0x34
 801aed0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aed2:	0008      	movs	r0, r1
 801aed4:	1c5a      	adds	r2, r3, #1
 801aed6:	921d      	str	r2, [sp, #116]	@ 0x74
 801aed8:	785b      	ldrb	r3, [r3, #1]
 801aeda:	e7c6      	b.n	801ae6a <_strtod_l+0x1de>
 801aedc:	9808      	ldr	r0, [sp, #32]
 801aede:	e7d0      	b.n	801ae82 <_strtod_l+0x1f6>
 801aee0:	1c5c      	adds	r4, r3, #1
 801aee2:	2b08      	cmp	r3, #8
 801aee4:	dc04      	bgt.n	801aef0 <_strtod_l+0x264>
 801aee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aee8:	434b      	muls	r3, r1
 801aeea:	930d      	str	r3, [sp, #52]	@ 0x34
 801aeec:	0023      	movs	r3, r4
 801aeee:	e7df      	b.n	801aeb0 <_strtod_l+0x224>
 801aef0:	2c10      	cmp	r4, #16
 801aef2:	dcfb      	bgt.n	801aeec <_strtod_l+0x260>
 801aef4:	434d      	muls	r5, r1
 801aef6:	e7f9      	b.n	801aeec <_strtod_l+0x260>
 801aef8:	2100      	movs	r1, #0
 801aefa:	2b0f      	cmp	r3, #15
 801aefc:	dce8      	bgt.n	801aed0 <_strtod_l+0x244>
 801aefe:	230a      	movs	r3, #10
 801af00:	435d      	muls	r5, r3
 801af02:	1955      	adds	r5, r2, r5
 801af04:	e7e4      	b.n	801aed0 <_strtod_l+0x244>
 801af06:	2200      	movs	r2, #0
 801af08:	920e      	str	r2, [sp, #56]	@ 0x38
 801af0a:	9206      	str	r2, [sp, #24]
 801af0c:	3201      	adds	r2, #1
 801af0e:	e7b1      	b.n	801ae74 <_strtod_l+0x1e8>
 801af10:	2400      	movs	r4, #0
 801af12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af14:	3302      	adds	r3, #2
 801af16:	931d      	str	r3, [sp, #116]	@ 0x74
 801af18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af1a:	789b      	ldrb	r3, [r3, #2]
 801af1c:	001a      	movs	r2, r3
 801af1e:	3a30      	subs	r2, #48	@ 0x30
 801af20:	2a09      	cmp	r2, #9
 801af22:	d913      	bls.n	801af4c <_strtod_l+0x2c0>
 801af24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af26:	921d      	str	r2, [sp, #116]	@ 0x74
 801af28:	2200      	movs	r2, #0
 801af2a:	e032      	b.n	801af92 <_strtod_l+0x306>
 801af2c:	080210b8 	.word	0x080210b8
 801af30:	7ff00000 	.word	0x7ff00000
 801af34:	ffefffff 	.word	0xffefffff
 801af38:	00000433 	.word	0x00000433
 801af3c:	7fffffff 	.word	0x7fffffff
 801af40:	080210a0 	.word	0x080210a0
 801af44:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af46:	1c5a      	adds	r2, r3, #1
 801af48:	921d      	str	r2, [sp, #116]	@ 0x74
 801af4a:	785b      	ldrb	r3, [r3, #1]
 801af4c:	2b30      	cmp	r3, #48	@ 0x30
 801af4e:	d0f9      	beq.n	801af44 <_strtod_l+0x2b8>
 801af50:	2200      	movs	r2, #0
 801af52:	9207      	str	r2, [sp, #28]
 801af54:	001a      	movs	r2, r3
 801af56:	3a31      	subs	r2, #49	@ 0x31
 801af58:	2a08      	cmp	r2, #8
 801af5a:	d81b      	bhi.n	801af94 <_strtod_l+0x308>
 801af5c:	3b30      	subs	r3, #48	@ 0x30
 801af5e:	9310      	str	r3, [sp, #64]	@ 0x40
 801af60:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af62:	9307      	str	r3, [sp, #28]
 801af64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af66:	1c59      	adds	r1, r3, #1
 801af68:	911d      	str	r1, [sp, #116]	@ 0x74
 801af6a:	785b      	ldrb	r3, [r3, #1]
 801af6c:	001a      	movs	r2, r3
 801af6e:	3a30      	subs	r2, #48	@ 0x30
 801af70:	2a09      	cmp	r2, #9
 801af72:	d93a      	bls.n	801afea <_strtod_l+0x35e>
 801af74:	9a07      	ldr	r2, [sp, #28]
 801af76:	1a8a      	subs	r2, r1, r2
 801af78:	49b4      	ldr	r1, [pc, #720]	@ (801b24c <_strtod_l+0x5c0>)
 801af7a:	9107      	str	r1, [sp, #28]
 801af7c:	2a08      	cmp	r2, #8
 801af7e:	dc04      	bgt.n	801af8a <_strtod_l+0x2fe>
 801af80:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801af82:	9207      	str	r2, [sp, #28]
 801af84:	428a      	cmp	r2, r1
 801af86:	dd00      	ble.n	801af8a <_strtod_l+0x2fe>
 801af88:	9107      	str	r1, [sp, #28]
 801af8a:	2c00      	cmp	r4, #0
 801af8c:	d002      	beq.n	801af94 <_strtod_l+0x308>
 801af8e:	9a07      	ldr	r2, [sp, #28]
 801af90:	4252      	negs	r2, r2
 801af92:	9207      	str	r2, [sp, #28]
 801af94:	9a06      	ldr	r2, [sp, #24]
 801af96:	2a00      	cmp	r2, #0
 801af98:	d14d      	bne.n	801b036 <_strtod_l+0x3aa>
 801af9a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801af9c:	4310      	orrs	r0, r2
 801af9e:	d000      	beq.n	801afa2 <_strtod_l+0x316>
 801afa0:	e6af      	b.n	801ad02 <_strtod_l+0x76>
 801afa2:	4662      	mov	r2, ip
 801afa4:	2a00      	cmp	r2, #0
 801afa6:	d000      	beq.n	801afaa <_strtod_l+0x31e>
 801afa8:	e6c7      	b.n	801ad3a <_strtod_l+0xae>
 801afaa:	2b69      	cmp	r3, #105	@ 0x69
 801afac:	d027      	beq.n	801affe <_strtod_l+0x372>
 801afae:	dc23      	bgt.n	801aff8 <_strtod_l+0x36c>
 801afb0:	2b49      	cmp	r3, #73	@ 0x49
 801afb2:	d024      	beq.n	801affe <_strtod_l+0x372>
 801afb4:	2b4e      	cmp	r3, #78	@ 0x4e
 801afb6:	d000      	beq.n	801afba <_strtod_l+0x32e>
 801afb8:	e6bf      	b.n	801ad3a <_strtod_l+0xae>
 801afba:	49a5      	ldr	r1, [pc, #660]	@ (801b250 <_strtod_l+0x5c4>)
 801afbc:	a81d      	add	r0, sp, #116	@ 0x74
 801afbe:	f002 fe2b 	bl	801dc18 <__match>
 801afc2:	2800      	cmp	r0, #0
 801afc4:	d100      	bne.n	801afc8 <_strtod_l+0x33c>
 801afc6:	e6b8      	b.n	801ad3a <_strtod_l+0xae>
 801afc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801afca:	781b      	ldrb	r3, [r3, #0]
 801afcc:	2b28      	cmp	r3, #40	@ 0x28
 801afce:	d12c      	bne.n	801b02a <_strtod_l+0x39e>
 801afd0:	49a0      	ldr	r1, [pc, #640]	@ (801b254 <_strtod_l+0x5c8>)
 801afd2:	aa20      	add	r2, sp, #128	@ 0x80
 801afd4:	a81d      	add	r0, sp, #116	@ 0x74
 801afd6:	f002 fe33 	bl	801dc40 <__hexnan>
 801afda:	2805      	cmp	r0, #5
 801afdc:	d125      	bne.n	801b02a <_strtod_l+0x39e>
 801afde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801afe0:	4a9d      	ldr	r2, [pc, #628]	@ (801b258 <_strtod_l+0x5cc>)
 801afe2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801afe4:	431a      	orrs	r2, r3
 801afe6:	0017      	movs	r7, r2
 801afe8:	e68b      	b.n	801ad02 <_strtod_l+0x76>
 801afea:	220a      	movs	r2, #10
 801afec:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801afee:	434a      	muls	r2, r1
 801aff0:	18d2      	adds	r2, r2, r3
 801aff2:	3a30      	subs	r2, #48	@ 0x30
 801aff4:	9210      	str	r2, [sp, #64]	@ 0x40
 801aff6:	e7b5      	b.n	801af64 <_strtod_l+0x2d8>
 801aff8:	2b6e      	cmp	r3, #110	@ 0x6e
 801affa:	d0de      	beq.n	801afba <_strtod_l+0x32e>
 801affc:	e69d      	b.n	801ad3a <_strtod_l+0xae>
 801affe:	4997      	ldr	r1, [pc, #604]	@ (801b25c <_strtod_l+0x5d0>)
 801b000:	a81d      	add	r0, sp, #116	@ 0x74
 801b002:	f002 fe09 	bl	801dc18 <__match>
 801b006:	2800      	cmp	r0, #0
 801b008:	d100      	bne.n	801b00c <_strtod_l+0x380>
 801b00a:	e696      	b.n	801ad3a <_strtod_l+0xae>
 801b00c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b00e:	4994      	ldr	r1, [pc, #592]	@ (801b260 <_strtod_l+0x5d4>)
 801b010:	3b01      	subs	r3, #1
 801b012:	a81d      	add	r0, sp, #116	@ 0x74
 801b014:	931d      	str	r3, [sp, #116]	@ 0x74
 801b016:	f002 fdff 	bl	801dc18 <__match>
 801b01a:	2800      	cmp	r0, #0
 801b01c:	d102      	bne.n	801b024 <_strtod_l+0x398>
 801b01e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b020:	3301      	adds	r3, #1
 801b022:	931d      	str	r3, [sp, #116]	@ 0x74
 801b024:	2600      	movs	r6, #0
 801b026:	4f8c      	ldr	r7, [pc, #560]	@ (801b258 <_strtod_l+0x5cc>)
 801b028:	e66b      	b.n	801ad02 <_strtod_l+0x76>
 801b02a:	488e      	ldr	r0, [pc, #568]	@ (801b264 <_strtod_l+0x5d8>)
 801b02c:	f001 fc84 	bl	801c938 <nan>
 801b030:	0006      	movs	r6, r0
 801b032:	000f      	movs	r7, r1
 801b034:	e665      	b.n	801ad02 <_strtod_l+0x76>
 801b036:	9b07      	ldr	r3, [sp, #28]
 801b038:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b03a:	1a9b      	subs	r3, r3, r2
 801b03c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b03e:	9b08      	ldr	r3, [sp, #32]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d101      	bne.n	801b048 <_strtod_l+0x3bc>
 801b044:	9b06      	ldr	r3, [sp, #24]
 801b046:	9308      	str	r3, [sp, #32]
 801b048:	9c06      	ldr	r4, [sp, #24]
 801b04a:	2c10      	cmp	r4, #16
 801b04c:	dd00      	ble.n	801b050 <_strtod_l+0x3c4>
 801b04e:	2410      	movs	r4, #16
 801b050:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801b052:	f7e8 f9e3 	bl	800341c <__aeabi_ui2d>
 801b056:	9b06      	ldr	r3, [sp, #24]
 801b058:	0006      	movs	r6, r0
 801b05a:	000f      	movs	r7, r1
 801b05c:	2b09      	cmp	r3, #9
 801b05e:	dc13      	bgt.n	801b088 <_strtod_l+0x3fc>
 801b060:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b062:	2b00      	cmp	r3, #0
 801b064:	d100      	bne.n	801b068 <_strtod_l+0x3dc>
 801b066:	e64c      	b.n	801ad02 <_strtod_l+0x76>
 801b068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	dc00      	bgt.n	801b070 <_strtod_l+0x3e4>
 801b06e:	e07e      	b.n	801b16e <_strtod_l+0x4e2>
 801b070:	2b16      	cmp	r3, #22
 801b072:	dc63      	bgt.n	801b13c <_strtod_l+0x4b0>
 801b074:	497c      	ldr	r1, [pc, #496]	@ (801b268 <_strtod_l+0x5dc>)
 801b076:	00db      	lsls	r3, r3, #3
 801b078:	18c9      	adds	r1, r1, r3
 801b07a:	0032      	movs	r2, r6
 801b07c:	6808      	ldr	r0, [r1, #0]
 801b07e:	6849      	ldr	r1, [r1, #4]
 801b080:	003b      	movs	r3, r7
 801b082:	f7e7 fadb 	bl	800263c <__aeabi_dmul>
 801b086:	e7d3      	b.n	801b030 <_strtod_l+0x3a4>
 801b088:	0022      	movs	r2, r4
 801b08a:	4b77      	ldr	r3, [pc, #476]	@ (801b268 <_strtod_l+0x5dc>)
 801b08c:	3a09      	subs	r2, #9
 801b08e:	00d2      	lsls	r2, r2, #3
 801b090:	189b      	adds	r3, r3, r2
 801b092:	681a      	ldr	r2, [r3, #0]
 801b094:	685b      	ldr	r3, [r3, #4]
 801b096:	f7e7 fad1 	bl	800263c <__aeabi_dmul>
 801b09a:	0006      	movs	r6, r0
 801b09c:	0028      	movs	r0, r5
 801b09e:	000f      	movs	r7, r1
 801b0a0:	f7e8 f9bc 	bl	800341c <__aeabi_ui2d>
 801b0a4:	000b      	movs	r3, r1
 801b0a6:	0002      	movs	r2, r0
 801b0a8:	0039      	movs	r1, r7
 801b0aa:	0030      	movs	r0, r6
 801b0ac:	f7e6 fb1e 	bl	80016ec <__aeabi_dadd>
 801b0b0:	9b06      	ldr	r3, [sp, #24]
 801b0b2:	0006      	movs	r6, r0
 801b0b4:	000f      	movs	r7, r1
 801b0b6:	2b0f      	cmp	r3, #15
 801b0b8:	ddd2      	ble.n	801b060 <_strtod_l+0x3d4>
 801b0ba:	9b06      	ldr	r3, [sp, #24]
 801b0bc:	1b1c      	subs	r4, r3, r4
 801b0be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0c0:	18e4      	adds	r4, r4, r3
 801b0c2:	2c00      	cmp	r4, #0
 801b0c4:	dc00      	bgt.n	801b0c8 <_strtod_l+0x43c>
 801b0c6:	e09b      	b.n	801b200 <_strtod_l+0x574>
 801b0c8:	220f      	movs	r2, #15
 801b0ca:	0023      	movs	r3, r4
 801b0cc:	4013      	ands	r3, r2
 801b0ce:	4214      	tst	r4, r2
 801b0d0:	d00a      	beq.n	801b0e8 <_strtod_l+0x45c>
 801b0d2:	4965      	ldr	r1, [pc, #404]	@ (801b268 <_strtod_l+0x5dc>)
 801b0d4:	00db      	lsls	r3, r3, #3
 801b0d6:	18c9      	adds	r1, r1, r3
 801b0d8:	0032      	movs	r2, r6
 801b0da:	6808      	ldr	r0, [r1, #0]
 801b0dc:	6849      	ldr	r1, [r1, #4]
 801b0de:	003b      	movs	r3, r7
 801b0e0:	f7e7 faac 	bl	800263c <__aeabi_dmul>
 801b0e4:	0006      	movs	r6, r0
 801b0e6:	000f      	movs	r7, r1
 801b0e8:	230f      	movs	r3, #15
 801b0ea:	439c      	bics	r4, r3
 801b0ec:	d073      	beq.n	801b1d6 <_strtod_l+0x54a>
 801b0ee:	3326      	adds	r3, #38	@ 0x26
 801b0f0:	33ff      	adds	r3, #255	@ 0xff
 801b0f2:	429c      	cmp	r4, r3
 801b0f4:	dd4b      	ble.n	801b18e <_strtod_l+0x502>
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	9306      	str	r3, [sp, #24]
 801b0fa:	9307      	str	r3, [sp, #28]
 801b0fc:	930d      	str	r3, [sp, #52]	@ 0x34
 801b0fe:	9308      	str	r3, [sp, #32]
 801b100:	2322      	movs	r3, #34	@ 0x22
 801b102:	2600      	movs	r6, #0
 801b104:	9a05      	ldr	r2, [sp, #20]
 801b106:	4f54      	ldr	r7, [pc, #336]	@ (801b258 <_strtod_l+0x5cc>)
 801b108:	6013      	str	r3, [r2, #0]
 801b10a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b10c:	42b3      	cmp	r3, r6
 801b10e:	d100      	bne.n	801b112 <_strtod_l+0x486>
 801b110:	e5f7      	b.n	801ad02 <_strtod_l+0x76>
 801b112:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b114:	9805      	ldr	r0, [sp, #20]
 801b116:	f002 ff4d 	bl	801dfb4 <_Bfree>
 801b11a:	9908      	ldr	r1, [sp, #32]
 801b11c:	9805      	ldr	r0, [sp, #20]
 801b11e:	f002 ff49 	bl	801dfb4 <_Bfree>
 801b122:	9907      	ldr	r1, [sp, #28]
 801b124:	9805      	ldr	r0, [sp, #20]
 801b126:	f002 ff45 	bl	801dfb4 <_Bfree>
 801b12a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b12c:	9805      	ldr	r0, [sp, #20]
 801b12e:	f002 ff41 	bl	801dfb4 <_Bfree>
 801b132:	9906      	ldr	r1, [sp, #24]
 801b134:	9805      	ldr	r0, [sp, #20]
 801b136:	f002 ff3d 	bl	801dfb4 <_Bfree>
 801b13a:	e5e2      	b.n	801ad02 <_strtod_l+0x76>
 801b13c:	2325      	movs	r3, #37	@ 0x25
 801b13e:	9a06      	ldr	r2, [sp, #24]
 801b140:	1a9b      	subs	r3, r3, r2
 801b142:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b144:	4293      	cmp	r3, r2
 801b146:	dbb8      	blt.n	801b0ba <_strtod_l+0x42e>
 801b148:	240f      	movs	r4, #15
 801b14a:	9b06      	ldr	r3, [sp, #24]
 801b14c:	4d46      	ldr	r5, [pc, #280]	@ (801b268 <_strtod_l+0x5dc>)
 801b14e:	1ae4      	subs	r4, r4, r3
 801b150:	00e1      	lsls	r1, r4, #3
 801b152:	1869      	adds	r1, r5, r1
 801b154:	0032      	movs	r2, r6
 801b156:	6808      	ldr	r0, [r1, #0]
 801b158:	6849      	ldr	r1, [r1, #4]
 801b15a:	003b      	movs	r3, r7
 801b15c:	f7e7 fa6e 	bl	800263c <__aeabi_dmul>
 801b160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b162:	1b1c      	subs	r4, r3, r4
 801b164:	00e4      	lsls	r4, r4, #3
 801b166:	192d      	adds	r5, r5, r4
 801b168:	682a      	ldr	r2, [r5, #0]
 801b16a:	686b      	ldr	r3, [r5, #4]
 801b16c:	e789      	b.n	801b082 <_strtod_l+0x3f6>
 801b16e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b170:	3316      	adds	r3, #22
 801b172:	dba2      	blt.n	801b0ba <_strtod_l+0x42e>
 801b174:	9907      	ldr	r1, [sp, #28]
 801b176:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b178:	4b3b      	ldr	r3, [pc, #236]	@ (801b268 <_strtod_l+0x5dc>)
 801b17a:	1a52      	subs	r2, r2, r1
 801b17c:	00d2      	lsls	r2, r2, #3
 801b17e:	189b      	adds	r3, r3, r2
 801b180:	0030      	movs	r0, r6
 801b182:	681a      	ldr	r2, [r3, #0]
 801b184:	685b      	ldr	r3, [r3, #4]
 801b186:	0039      	movs	r1, r7
 801b188:	f7e6 fe14 	bl	8001db4 <__aeabi_ddiv>
 801b18c:	e750      	b.n	801b030 <_strtod_l+0x3a4>
 801b18e:	2300      	movs	r3, #0
 801b190:	0030      	movs	r0, r6
 801b192:	0039      	movs	r1, r7
 801b194:	4d35      	ldr	r5, [pc, #212]	@ (801b26c <_strtod_l+0x5e0>)
 801b196:	1124      	asrs	r4, r4, #4
 801b198:	9309      	str	r3, [sp, #36]	@ 0x24
 801b19a:	2c01      	cmp	r4, #1
 801b19c:	dc1e      	bgt.n	801b1dc <_strtod_l+0x550>
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d001      	beq.n	801b1a6 <_strtod_l+0x51a>
 801b1a2:	0006      	movs	r6, r0
 801b1a4:	000f      	movs	r7, r1
 801b1a6:	4b32      	ldr	r3, [pc, #200]	@ (801b270 <_strtod_l+0x5e4>)
 801b1a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1aa:	18ff      	adds	r7, r7, r3
 801b1ac:	4b2f      	ldr	r3, [pc, #188]	@ (801b26c <_strtod_l+0x5e0>)
 801b1ae:	00d5      	lsls	r5, r2, #3
 801b1b0:	195d      	adds	r5, r3, r5
 801b1b2:	0032      	movs	r2, r6
 801b1b4:	6828      	ldr	r0, [r5, #0]
 801b1b6:	6869      	ldr	r1, [r5, #4]
 801b1b8:	003b      	movs	r3, r7
 801b1ba:	f7e7 fa3f 	bl	800263c <__aeabi_dmul>
 801b1be:	4b26      	ldr	r3, [pc, #152]	@ (801b258 <_strtod_l+0x5cc>)
 801b1c0:	4a2c      	ldr	r2, [pc, #176]	@ (801b274 <_strtod_l+0x5e8>)
 801b1c2:	0006      	movs	r6, r0
 801b1c4:	400b      	ands	r3, r1
 801b1c6:	4293      	cmp	r3, r2
 801b1c8:	d895      	bhi.n	801b0f6 <_strtod_l+0x46a>
 801b1ca:	4a2b      	ldr	r2, [pc, #172]	@ (801b278 <_strtod_l+0x5ec>)
 801b1cc:	4293      	cmp	r3, r2
 801b1ce:	d913      	bls.n	801b1f8 <_strtod_l+0x56c>
 801b1d0:	2601      	movs	r6, #1
 801b1d2:	4f2a      	ldr	r7, [pc, #168]	@ (801b27c <_strtod_l+0x5f0>)
 801b1d4:	4276      	negs	r6, r6
 801b1d6:	2300      	movs	r3, #0
 801b1d8:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1da:	e086      	b.n	801b2ea <_strtod_l+0x65e>
 801b1dc:	2201      	movs	r2, #1
 801b1de:	4214      	tst	r4, r2
 801b1e0:	d004      	beq.n	801b1ec <_strtod_l+0x560>
 801b1e2:	682a      	ldr	r2, [r5, #0]
 801b1e4:	686b      	ldr	r3, [r5, #4]
 801b1e6:	f7e7 fa29 	bl	800263c <__aeabi_dmul>
 801b1ea:	2301      	movs	r3, #1
 801b1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1ee:	1064      	asrs	r4, r4, #1
 801b1f0:	3201      	adds	r2, #1
 801b1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 801b1f4:	3508      	adds	r5, #8
 801b1f6:	e7d0      	b.n	801b19a <_strtod_l+0x50e>
 801b1f8:	23d4      	movs	r3, #212	@ 0xd4
 801b1fa:	049b      	lsls	r3, r3, #18
 801b1fc:	18cf      	adds	r7, r1, r3
 801b1fe:	e7ea      	b.n	801b1d6 <_strtod_l+0x54a>
 801b200:	2c00      	cmp	r4, #0
 801b202:	d0e8      	beq.n	801b1d6 <_strtod_l+0x54a>
 801b204:	4264      	negs	r4, r4
 801b206:	230f      	movs	r3, #15
 801b208:	0022      	movs	r2, r4
 801b20a:	401a      	ands	r2, r3
 801b20c:	421c      	tst	r4, r3
 801b20e:	d00a      	beq.n	801b226 <_strtod_l+0x59a>
 801b210:	4b15      	ldr	r3, [pc, #84]	@ (801b268 <_strtod_l+0x5dc>)
 801b212:	00d2      	lsls	r2, r2, #3
 801b214:	189b      	adds	r3, r3, r2
 801b216:	0030      	movs	r0, r6
 801b218:	681a      	ldr	r2, [r3, #0]
 801b21a:	685b      	ldr	r3, [r3, #4]
 801b21c:	0039      	movs	r1, r7
 801b21e:	f7e6 fdc9 	bl	8001db4 <__aeabi_ddiv>
 801b222:	0006      	movs	r6, r0
 801b224:	000f      	movs	r7, r1
 801b226:	1124      	asrs	r4, r4, #4
 801b228:	d0d5      	beq.n	801b1d6 <_strtod_l+0x54a>
 801b22a:	2c1f      	cmp	r4, #31
 801b22c:	dd28      	ble.n	801b280 <_strtod_l+0x5f4>
 801b22e:	2300      	movs	r3, #0
 801b230:	9306      	str	r3, [sp, #24]
 801b232:	9307      	str	r3, [sp, #28]
 801b234:	930d      	str	r3, [sp, #52]	@ 0x34
 801b236:	9308      	str	r3, [sp, #32]
 801b238:	2322      	movs	r3, #34	@ 0x22
 801b23a:	9a05      	ldr	r2, [sp, #20]
 801b23c:	2600      	movs	r6, #0
 801b23e:	6013      	str	r3, [r2, #0]
 801b240:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b242:	2700      	movs	r7, #0
 801b244:	2b00      	cmp	r3, #0
 801b246:	d000      	beq.n	801b24a <_strtod_l+0x5be>
 801b248:	e763      	b.n	801b112 <_strtod_l+0x486>
 801b24a:	e55a      	b.n	801ad02 <_strtod_l+0x76>
 801b24c:	00004e1f 	.word	0x00004e1f
 801b250:	08021206 	.word	0x08021206
 801b254:	080210a4 	.word	0x080210a4
 801b258:	7ff00000 	.word	0x7ff00000
 801b25c:	080211fe 	.word	0x080211fe
 801b260:	08021238 	.word	0x08021238
 801b264:	080214c4 	.word	0x080214c4
 801b268:	080213b0 	.word	0x080213b0
 801b26c:	08021388 	.word	0x08021388
 801b270:	fcb00000 	.word	0xfcb00000
 801b274:	7ca00000 	.word	0x7ca00000
 801b278:	7c900000 	.word	0x7c900000
 801b27c:	7fefffff 	.word	0x7fefffff
 801b280:	2310      	movs	r3, #16
 801b282:	0022      	movs	r2, r4
 801b284:	401a      	ands	r2, r3
 801b286:	9209      	str	r2, [sp, #36]	@ 0x24
 801b288:	421c      	tst	r4, r3
 801b28a:	d001      	beq.n	801b290 <_strtod_l+0x604>
 801b28c:	335a      	adds	r3, #90	@ 0x5a
 801b28e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b290:	0030      	movs	r0, r6
 801b292:	0039      	movs	r1, r7
 801b294:	2300      	movs	r3, #0
 801b296:	4dbf      	ldr	r5, [pc, #764]	@ (801b594 <_strtod_l+0x908>)
 801b298:	2201      	movs	r2, #1
 801b29a:	4214      	tst	r4, r2
 801b29c:	d004      	beq.n	801b2a8 <_strtod_l+0x61c>
 801b29e:	682a      	ldr	r2, [r5, #0]
 801b2a0:	686b      	ldr	r3, [r5, #4]
 801b2a2:	f7e7 f9cb 	bl	800263c <__aeabi_dmul>
 801b2a6:	2301      	movs	r3, #1
 801b2a8:	1064      	asrs	r4, r4, #1
 801b2aa:	3508      	adds	r5, #8
 801b2ac:	2c00      	cmp	r4, #0
 801b2ae:	d1f3      	bne.n	801b298 <_strtod_l+0x60c>
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d001      	beq.n	801b2b8 <_strtod_l+0x62c>
 801b2b4:	0006      	movs	r6, r0
 801b2b6:	000f      	movs	r7, r1
 801b2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d00d      	beq.n	801b2da <_strtod_l+0x64e>
 801b2be:	236b      	movs	r3, #107	@ 0x6b
 801b2c0:	007a      	lsls	r2, r7, #1
 801b2c2:	0d52      	lsrs	r2, r2, #21
 801b2c4:	0039      	movs	r1, r7
 801b2c6:	1a9b      	subs	r3, r3, r2
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	dd06      	ble.n	801b2da <_strtod_l+0x64e>
 801b2cc:	2b1f      	cmp	r3, #31
 801b2ce:	dd5a      	ble.n	801b386 <_strtod_l+0x6fa>
 801b2d0:	2600      	movs	r6, #0
 801b2d2:	2b34      	cmp	r3, #52	@ 0x34
 801b2d4:	dd50      	ble.n	801b378 <_strtod_l+0x6ec>
 801b2d6:	27dc      	movs	r7, #220	@ 0xdc
 801b2d8:	04bf      	lsls	r7, r7, #18
 801b2da:	2200      	movs	r2, #0
 801b2dc:	2300      	movs	r3, #0
 801b2de:	0030      	movs	r0, r6
 801b2e0:	0039      	movs	r1, r7
 801b2e2:	f7e5 f8e5 	bl	80004b0 <__aeabi_dcmpeq>
 801b2e6:	2800      	cmp	r0, #0
 801b2e8:	d1a1      	bne.n	801b22e <_strtod_l+0x5a2>
 801b2ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b2ec:	9a08      	ldr	r2, [sp, #32]
 801b2ee:	9300      	str	r3, [sp, #0]
 801b2f0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b2f2:	9b06      	ldr	r3, [sp, #24]
 801b2f4:	9805      	ldr	r0, [sp, #20]
 801b2f6:	f002 fec5 	bl	801e084 <__s2b>
 801b2fa:	900d      	str	r0, [sp, #52]	@ 0x34
 801b2fc:	2800      	cmp	r0, #0
 801b2fe:	d100      	bne.n	801b302 <_strtod_l+0x676>
 801b300:	e6f9      	b.n	801b0f6 <_strtod_l+0x46a>
 801b302:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b304:	9907      	ldr	r1, [sp, #28]
 801b306:	17da      	asrs	r2, r3, #31
 801b308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b30a:	1a5b      	subs	r3, r3, r1
 801b30c:	401a      	ands	r2, r3
 801b30e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b310:	9217      	str	r2, [sp, #92]	@ 0x5c
 801b312:	43db      	mvns	r3, r3
 801b314:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b316:	17db      	asrs	r3, r3, #31
 801b318:	401a      	ands	r2, r3
 801b31a:	2300      	movs	r3, #0
 801b31c:	921a      	str	r2, [sp, #104]	@ 0x68
 801b31e:	9306      	str	r3, [sp, #24]
 801b320:	9307      	str	r3, [sp, #28]
 801b322:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b324:	9805      	ldr	r0, [sp, #20]
 801b326:	6859      	ldr	r1, [r3, #4]
 801b328:	f002 fe00 	bl	801df2c <_Balloc>
 801b32c:	9008      	str	r0, [sp, #32]
 801b32e:	2800      	cmp	r0, #0
 801b330:	d100      	bne.n	801b334 <_strtod_l+0x6a8>
 801b332:	e6e5      	b.n	801b100 <_strtod_l+0x474>
 801b334:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b336:	300c      	adds	r0, #12
 801b338:	0019      	movs	r1, r3
 801b33a:	691a      	ldr	r2, [r3, #16]
 801b33c:	310c      	adds	r1, #12
 801b33e:	3202      	adds	r2, #2
 801b340:	0092      	lsls	r2, r2, #2
 801b342:	f001 faef 	bl	801c924 <memcpy>
 801b346:	ab20      	add	r3, sp, #128	@ 0x80
 801b348:	9301      	str	r3, [sp, #4]
 801b34a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b34c:	9300      	str	r3, [sp, #0]
 801b34e:	0032      	movs	r2, r6
 801b350:	003b      	movs	r3, r7
 801b352:	9805      	ldr	r0, [sp, #20]
 801b354:	9610      	str	r6, [sp, #64]	@ 0x40
 801b356:	9711      	str	r7, [sp, #68]	@ 0x44
 801b358:	f003 f9e4 	bl	801e724 <__d2b>
 801b35c:	901e      	str	r0, [sp, #120]	@ 0x78
 801b35e:	2800      	cmp	r0, #0
 801b360:	d100      	bne.n	801b364 <_strtod_l+0x6d8>
 801b362:	e6cd      	b.n	801b100 <_strtod_l+0x474>
 801b364:	2101      	movs	r1, #1
 801b366:	9805      	ldr	r0, [sp, #20]
 801b368:	f002 ff28 	bl	801e1bc <__i2b>
 801b36c:	9007      	str	r0, [sp, #28]
 801b36e:	2800      	cmp	r0, #0
 801b370:	d10e      	bne.n	801b390 <_strtod_l+0x704>
 801b372:	2300      	movs	r3, #0
 801b374:	9307      	str	r3, [sp, #28]
 801b376:	e6c3      	b.n	801b100 <_strtod_l+0x474>
 801b378:	234b      	movs	r3, #75	@ 0x4b
 801b37a:	1a9a      	subs	r2, r3, r2
 801b37c:	3b4c      	subs	r3, #76	@ 0x4c
 801b37e:	4093      	lsls	r3, r2
 801b380:	4019      	ands	r1, r3
 801b382:	000f      	movs	r7, r1
 801b384:	e7a9      	b.n	801b2da <_strtod_l+0x64e>
 801b386:	2201      	movs	r2, #1
 801b388:	4252      	negs	r2, r2
 801b38a:	409a      	lsls	r2, r3
 801b38c:	4016      	ands	r6, r2
 801b38e:	e7a4      	b.n	801b2da <_strtod_l+0x64e>
 801b390:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801b392:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b394:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801b396:	1ad4      	subs	r4, r2, r3
 801b398:	2b00      	cmp	r3, #0
 801b39a:	db01      	blt.n	801b3a0 <_strtod_l+0x714>
 801b39c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801b39e:	195d      	adds	r5, r3, r5
 801b3a0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b3a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b3a4:	1a5b      	subs	r3, r3, r1
 801b3a6:	2136      	movs	r1, #54	@ 0x36
 801b3a8:	189b      	adds	r3, r3, r2
 801b3aa:	1a8a      	subs	r2, r1, r2
 801b3ac:	497a      	ldr	r1, [pc, #488]	@ (801b598 <_strtod_l+0x90c>)
 801b3ae:	2001      	movs	r0, #1
 801b3b0:	468c      	mov	ip, r1
 801b3b2:	2100      	movs	r1, #0
 801b3b4:	3b01      	subs	r3, #1
 801b3b6:	9116      	str	r1, [sp, #88]	@ 0x58
 801b3b8:	9014      	str	r0, [sp, #80]	@ 0x50
 801b3ba:	4563      	cmp	r3, ip
 801b3bc:	da06      	bge.n	801b3cc <_strtod_l+0x740>
 801b3be:	4661      	mov	r1, ip
 801b3c0:	1ac9      	subs	r1, r1, r3
 801b3c2:	1a52      	subs	r2, r2, r1
 801b3c4:	291f      	cmp	r1, #31
 801b3c6:	dc3f      	bgt.n	801b448 <_strtod_l+0x7bc>
 801b3c8:	4088      	lsls	r0, r1
 801b3ca:	9014      	str	r0, [sp, #80]	@ 0x50
 801b3cc:	18ab      	adds	r3, r5, r2
 801b3ce:	930e      	str	r3, [sp, #56]	@ 0x38
 801b3d0:	18a4      	adds	r4, r4, r2
 801b3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b3d6:	191c      	adds	r4, r3, r4
 801b3d8:	002b      	movs	r3, r5
 801b3da:	4295      	cmp	r5, r2
 801b3dc:	dd00      	ble.n	801b3e0 <_strtod_l+0x754>
 801b3de:	0013      	movs	r3, r2
 801b3e0:	42a3      	cmp	r3, r4
 801b3e2:	dd00      	ble.n	801b3e6 <_strtod_l+0x75a>
 801b3e4:	0023      	movs	r3, r4
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	dd04      	ble.n	801b3f4 <_strtod_l+0x768>
 801b3ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b3ec:	1ae4      	subs	r4, r4, r3
 801b3ee:	1ad2      	subs	r2, r2, r3
 801b3f0:	920e      	str	r2, [sp, #56]	@ 0x38
 801b3f2:	1aed      	subs	r5, r5, r3
 801b3f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	dd16      	ble.n	801b428 <_strtod_l+0x79c>
 801b3fa:	001a      	movs	r2, r3
 801b3fc:	9907      	ldr	r1, [sp, #28]
 801b3fe:	9805      	ldr	r0, [sp, #20]
 801b400:	f002 ffa6 	bl	801e350 <__pow5mult>
 801b404:	9007      	str	r0, [sp, #28]
 801b406:	2800      	cmp	r0, #0
 801b408:	d0b3      	beq.n	801b372 <_strtod_l+0x6e6>
 801b40a:	0001      	movs	r1, r0
 801b40c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b40e:	9805      	ldr	r0, [sp, #20]
 801b410:	f002 feec 	bl	801e1ec <__multiply>
 801b414:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b416:	2800      	cmp	r0, #0
 801b418:	d100      	bne.n	801b41c <_strtod_l+0x790>
 801b41a:	e671      	b.n	801b100 <_strtod_l+0x474>
 801b41c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b41e:	9805      	ldr	r0, [sp, #20]
 801b420:	f002 fdc8 	bl	801dfb4 <_Bfree>
 801b424:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b426:	931e      	str	r3, [sp, #120]	@ 0x78
 801b428:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b42a:	2b00      	cmp	r3, #0
 801b42c:	dc12      	bgt.n	801b454 <_strtod_l+0x7c8>
 801b42e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b430:	2b00      	cmp	r3, #0
 801b432:	dd18      	ble.n	801b466 <_strtod_l+0x7da>
 801b434:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b436:	9908      	ldr	r1, [sp, #32]
 801b438:	9805      	ldr	r0, [sp, #20]
 801b43a:	f002 ff89 	bl	801e350 <__pow5mult>
 801b43e:	9008      	str	r0, [sp, #32]
 801b440:	2800      	cmp	r0, #0
 801b442:	d110      	bne.n	801b466 <_strtod_l+0x7da>
 801b444:	2300      	movs	r3, #0
 801b446:	e65a      	b.n	801b0fe <_strtod_l+0x472>
 801b448:	4954      	ldr	r1, [pc, #336]	@ (801b59c <_strtod_l+0x910>)
 801b44a:	1acb      	subs	r3, r1, r3
 801b44c:	0001      	movs	r1, r0
 801b44e:	4099      	lsls	r1, r3
 801b450:	9116      	str	r1, [sp, #88]	@ 0x58
 801b452:	e7ba      	b.n	801b3ca <_strtod_l+0x73e>
 801b454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b456:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b458:	9805      	ldr	r0, [sp, #20]
 801b45a:	f002 ffd5 	bl	801e408 <__lshift>
 801b45e:	901e      	str	r0, [sp, #120]	@ 0x78
 801b460:	2800      	cmp	r0, #0
 801b462:	d1e4      	bne.n	801b42e <_strtod_l+0x7a2>
 801b464:	e64c      	b.n	801b100 <_strtod_l+0x474>
 801b466:	2c00      	cmp	r4, #0
 801b468:	dd07      	ble.n	801b47a <_strtod_l+0x7ee>
 801b46a:	0022      	movs	r2, r4
 801b46c:	9908      	ldr	r1, [sp, #32]
 801b46e:	9805      	ldr	r0, [sp, #20]
 801b470:	f002 ffca 	bl	801e408 <__lshift>
 801b474:	9008      	str	r0, [sp, #32]
 801b476:	2800      	cmp	r0, #0
 801b478:	d0e4      	beq.n	801b444 <_strtod_l+0x7b8>
 801b47a:	2d00      	cmp	r5, #0
 801b47c:	dd08      	ble.n	801b490 <_strtod_l+0x804>
 801b47e:	002a      	movs	r2, r5
 801b480:	9907      	ldr	r1, [sp, #28]
 801b482:	9805      	ldr	r0, [sp, #20]
 801b484:	f002 ffc0 	bl	801e408 <__lshift>
 801b488:	9007      	str	r0, [sp, #28]
 801b48a:	2800      	cmp	r0, #0
 801b48c:	d100      	bne.n	801b490 <_strtod_l+0x804>
 801b48e:	e637      	b.n	801b100 <_strtod_l+0x474>
 801b490:	9a08      	ldr	r2, [sp, #32]
 801b492:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b494:	9805      	ldr	r0, [sp, #20]
 801b496:	f003 f83f 	bl	801e518 <__mdiff>
 801b49a:	9006      	str	r0, [sp, #24]
 801b49c:	2800      	cmp	r0, #0
 801b49e:	d100      	bne.n	801b4a2 <_strtod_l+0x816>
 801b4a0:	e62e      	b.n	801b100 <_strtod_l+0x474>
 801b4a2:	68c3      	ldr	r3, [r0, #12]
 801b4a4:	9907      	ldr	r1, [sp, #28]
 801b4a6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b4a8:	2300      	movs	r3, #0
 801b4aa:	60c3      	str	r3, [r0, #12]
 801b4ac:	f003 f818 	bl	801e4e0 <__mcmp>
 801b4b0:	2800      	cmp	r0, #0
 801b4b2:	da3b      	bge.n	801b52c <_strtod_l+0x8a0>
 801b4b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b4b6:	4333      	orrs	r3, r6
 801b4b8:	d167      	bne.n	801b58a <_strtod_l+0x8fe>
 801b4ba:	033b      	lsls	r3, r7, #12
 801b4bc:	d165      	bne.n	801b58a <_strtod_l+0x8fe>
 801b4be:	22d6      	movs	r2, #214	@ 0xd6
 801b4c0:	4b37      	ldr	r3, [pc, #220]	@ (801b5a0 <_strtod_l+0x914>)
 801b4c2:	04d2      	lsls	r2, r2, #19
 801b4c4:	403b      	ands	r3, r7
 801b4c6:	4293      	cmp	r3, r2
 801b4c8:	d95f      	bls.n	801b58a <_strtod_l+0x8fe>
 801b4ca:	9b06      	ldr	r3, [sp, #24]
 801b4cc:	695b      	ldr	r3, [r3, #20]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d103      	bne.n	801b4da <_strtod_l+0x84e>
 801b4d2:	9b06      	ldr	r3, [sp, #24]
 801b4d4:	691b      	ldr	r3, [r3, #16]
 801b4d6:	2b01      	cmp	r3, #1
 801b4d8:	dd57      	ble.n	801b58a <_strtod_l+0x8fe>
 801b4da:	9906      	ldr	r1, [sp, #24]
 801b4dc:	2201      	movs	r2, #1
 801b4de:	9805      	ldr	r0, [sp, #20]
 801b4e0:	f002 ff92 	bl	801e408 <__lshift>
 801b4e4:	9907      	ldr	r1, [sp, #28]
 801b4e6:	9006      	str	r0, [sp, #24]
 801b4e8:	f002 fffa 	bl	801e4e0 <__mcmp>
 801b4ec:	2800      	cmp	r0, #0
 801b4ee:	dd4c      	ble.n	801b58a <_strtod_l+0x8fe>
 801b4f0:	4b2b      	ldr	r3, [pc, #172]	@ (801b5a0 <_strtod_l+0x914>)
 801b4f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b4f4:	403b      	ands	r3, r7
 801b4f6:	2a00      	cmp	r2, #0
 801b4f8:	d074      	beq.n	801b5e4 <_strtod_l+0x958>
 801b4fa:	22d6      	movs	r2, #214	@ 0xd6
 801b4fc:	04d2      	lsls	r2, r2, #19
 801b4fe:	4293      	cmp	r3, r2
 801b500:	d870      	bhi.n	801b5e4 <_strtod_l+0x958>
 801b502:	22dc      	movs	r2, #220	@ 0xdc
 801b504:	0492      	lsls	r2, r2, #18
 801b506:	4293      	cmp	r3, r2
 801b508:	d800      	bhi.n	801b50c <_strtod_l+0x880>
 801b50a:	e695      	b.n	801b238 <_strtod_l+0x5ac>
 801b50c:	0030      	movs	r0, r6
 801b50e:	0039      	movs	r1, r7
 801b510:	4b24      	ldr	r3, [pc, #144]	@ (801b5a4 <_strtod_l+0x918>)
 801b512:	2200      	movs	r2, #0
 801b514:	f7e7 f892 	bl	800263c <__aeabi_dmul>
 801b518:	4b21      	ldr	r3, [pc, #132]	@ (801b5a0 <_strtod_l+0x914>)
 801b51a:	0006      	movs	r6, r0
 801b51c:	000f      	movs	r7, r1
 801b51e:	420b      	tst	r3, r1
 801b520:	d000      	beq.n	801b524 <_strtod_l+0x898>
 801b522:	e5f6      	b.n	801b112 <_strtod_l+0x486>
 801b524:	2322      	movs	r3, #34	@ 0x22
 801b526:	9a05      	ldr	r2, [sp, #20]
 801b528:	6013      	str	r3, [r2, #0]
 801b52a:	e5f2      	b.n	801b112 <_strtod_l+0x486>
 801b52c:	970e      	str	r7, [sp, #56]	@ 0x38
 801b52e:	2800      	cmp	r0, #0
 801b530:	d175      	bne.n	801b61e <_strtod_l+0x992>
 801b532:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b534:	033b      	lsls	r3, r7, #12
 801b536:	0b1b      	lsrs	r3, r3, #12
 801b538:	2a00      	cmp	r2, #0
 801b53a:	d039      	beq.n	801b5b0 <_strtod_l+0x924>
 801b53c:	4a1a      	ldr	r2, [pc, #104]	@ (801b5a8 <_strtod_l+0x91c>)
 801b53e:	4293      	cmp	r3, r2
 801b540:	d138      	bne.n	801b5b4 <_strtod_l+0x928>
 801b542:	2101      	movs	r1, #1
 801b544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b546:	4249      	negs	r1, r1
 801b548:	0032      	movs	r2, r6
 801b54a:	0008      	movs	r0, r1
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d00b      	beq.n	801b568 <_strtod_l+0x8dc>
 801b550:	24d4      	movs	r4, #212	@ 0xd4
 801b552:	4b13      	ldr	r3, [pc, #76]	@ (801b5a0 <_strtod_l+0x914>)
 801b554:	0008      	movs	r0, r1
 801b556:	403b      	ands	r3, r7
 801b558:	04e4      	lsls	r4, r4, #19
 801b55a:	42a3      	cmp	r3, r4
 801b55c:	d804      	bhi.n	801b568 <_strtod_l+0x8dc>
 801b55e:	306c      	adds	r0, #108	@ 0x6c
 801b560:	0d1b      	lsrs	r3, r3, #20
 801b562:	1ac3      	subs	r3, r0, r3
 801b564:	4099      	lsls	r1, r3
 801b566:	0008      	movs	r0, r1
 801b568:	4282      	cmp	r2, r0
 801b56a:	d123      	bne.n	801b5b4 <_strtod_l+0x928>
 801b56c:	4b0f      	ldr	r3, [pc, #60]	@ (801b5ac <_strtod_l+0x920>)
 801b56e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b570:	4299      	cmp	r1, r3
 801b572:	d102      	bne.n	801b57a <_strtod_l+0x8ee>
 801b574:	3201      	adds	r2, #1
 801b576:	d100      	bne.n	801b57a <_strtod_l+0x8ee>
 801b578:	e5c2      	b.n	801b100 <_strtod_l+0x474>
 801b57a:	4b09      	ldr	r3, [pc, #36]	@ (801b5a0 <_strtod_l+0x914>)
 801b57c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b57e:	2600      	movs	r6, #0
 801b580:	401a      	ands	r2, r3
 801b582:	0013      	movs	r3, r2
 801b584:	2280      	movs	r2, #128	@ 0x80
 801b586:	0352      	lsls	r2, r2, #13
 801b588:	189f      	adds	r7, r3, r2
 801b58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d1bd      	bne.n	801b50c <_strtod_l+0x880>
 801b590:	e5bf      	b.n	801b112 <_strtod_l+0x486>
 801b592:	46c0      	nop			@ (mov r8, r8)
 801b594:	080210d0 	.word	0x080210d0
 801b598:	fffffc02 	.word	0xfffffc02
 801b59c:	fffffbe2 	.word	0xfffffbe2
 801b5a0:	7ff00000 	.word	0x7ff00000
 801b5a4:	39500000 	.word	0x39500000
 801b5a8:	000fffff 	.word	0x000fffff
 801b5ac:	7fefffff 	.word	0x7fefffff
 801b5b0:	4333      	orrs	r3, r6
 801b5b2:	d09d      	beq.n	801b4f0 <_strtod_l+0x864>
 801b5b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d01c      	beq.n	801b5f4 <_strtod_l+0x968>
 801b5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5bc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b5be:	4213      	tst	r3, r2
 801b5c0:	d0e3      	beq.n	801b58a <_strtod_l+0x8fe>
 801b5c2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b5c4:	0030      	movs	r0, r6
 801b5c6:	0039      	movs	r1, r7
 801b5c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d016      	beq.n	801b5fc <_strtod_l+0x970>
 801b5ce:	f7ff fb45 	bl	801ac5c <sulp>
 801b5d2:	0002      	movs	r2, r0
 801b5d4:	000b      	movs	r3, r1
 801b5d6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b5d8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b5da:	f7e6 f887 	bl	80016ec <__aeabi_dadd>
 801b5de:	0006      	movs	r6, r0
 801b5e0:	000f      	movs	r7, r1
 801b5e2:	e7d2      	b.n	801b58a <_strtod_l+0x8fe>
 801b5e4:	2601      	movs	r6, #1
 801b5e6:	4a92      	ldr	r2, [pc, #584]	@ (801b830 <_strtod_l+0xba4>)
 801b5e8:	4276      	negs	r6, r6
 801b5ea:	189b      	adds	r3, r3, r2
 801b5ec:	4a91      	ldr	r2, [pc, #580]	@ (801b834 <_strtod_l+0xba8>)
 801b5ee:	431a      	orrs	r2, r3
 801b5f0:	0017      	movs	r7, r2
 801b5f2:	e7ca      	b.n	801b58a <_strtod_l+0x8fe>
 801b5f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b5f6:	4233      	tst	r3, r6
 801b5f8:	d0c7      	beq.n	801b58a <_strtod_l+0x8fe>
 801b5fa:	e7e2      	b.n	801b5c2 <_strtod_l+0x936>
 801b5fc:	f7ff fb2e 	bl	801ac5c <sulp>
 801b600:	0002      	movs	r2, r0
 801b602:	000b      	movs	r3, r1
 801b604:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b606:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b608:	f7e7 fae0 	bl	8002bcc <__aeabi_dsub>
 801b60c:	2200      	movs	r2, #0
 801b60e:	2300      	movs	r3, #0
 801b610:	0006      	movs	r6, r0
 801b612:	000f      	movs	r7, r1
 801b614:	f7e4 ff4c 	bl	80004b0 <__aeabi_dcmpeq>
 801b618:	2800      	cmp	r0, #0
 801b61a:	d0b6      	beq.n	801b58a <_strtod_l+0x8fe>
 801b61c:	e60c      	b.n	801b238 <_strtod_l+0x5ac>
 801b61e:	9907      	ldr	r1, [sp, #28]
 801b620:	9806      	ldr	r0, [sp, #24]
 801b622:	f003 f8df 	bl	801e7e4 <__ratio>
 801b626:	2380      	movs	r3, #128	@ 0x80
 801b628:	2200      	movs	r2, #0
 801b62a:	05db      	lsls	r3, r3, #23
 801b62c:	0004      	movs	r4, r0
 801b62e:	000d      	movs	r5, r1
 801b630:	f7e4 ff4e 	bl	80004d0 <__aeabi_dcmple>
 801b634:	2800      	cmp	r0, #0
 801b636:	d06c      	beq.n	801b712 <_strtod_l+0xa86>
 801b638:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b63a:	2b00      	cmp	r3, #0
 801b63c:	d177      	bne.n	801b72e <_strtod_l+0xaa2>
 801b63e:	2e00      	cmp	r6, #0
 801b640:	d157      	bne.n	801b6f2 <_strtod_l+0xa66>
 801b642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b644:	031b      	lsls	r3, r3, #12
 801b646:	d15a      	bne.n	801b6fe <_strtod_l+0xa72>
 801b648:	2200      	movs	r2, #0
 801b64a:	0020      	movs	r0, r4
 801b64c:	0029      	movs	r1, r5
 801b64e:	4b7a      	ldr	r3, [pc, #488]	@ (801b838 <_strtod_l+0xbac>)
 801b650:	f7e4 ff34 	bl	80004bc <__aeabi_dcmplt>
 801b654:	2800      	cmp	r0, #0
 801b656:	d159      	bne.n	801b70c <_strtod_l+0xa80>
 801b658:	0020      	movs	r0, r4
 801b65a:	0029      	movs	r1, r5
 801b65c:	2200      	movs	r2, #0
 801b65e:	4b77      	ldr	r3, [pc, #476]	@ (801b83c <_strtod_l+0xbb0>)
 801b660:	f7e6 ffec 	bl	800263c <__aeabi_dmul>
 801b664:	0004      	movs	r4, r0
 801b666:	000d      	movs	r5, r1
 801b668:	2380      	movs	r3, #128	@ 0x80
 801b66a:	061b      	lsls	r3, r3, #24
 801b66c:	18eb      	adds	r3, r5, r3
 801b66e:	940a      	str	r4, [sp, #40]	@ 0x28
 801b670:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b672:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b676:	9214      	str	r2, [sp, #80]	@ 0x50
 801b678:	9315      	str	r3, [sp, #84]	@ 0x54
 801b67a:	4a71      	ldr	r2, [pc, #452]	@ (801b840 <_strtod_l+0xbb4>)
 801b67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b67e:	4013      	ands	r3, r2
 801b680:	9316      	str	r3, [sp, #88]	@ 0x58
 801b682:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b684:	4b6f      	ldr	r3, [pc, #444]	@ (801b844 <_strtod_l+0xbb8>)
 801b686:	429a      	cmp	r2, r3
 801b688:	d000      	beq.n	801b68c <_strtod_l+0xa00>
 801b68a:	e087      	b.n	801b79c <_strtod_l+0xb10>
 801b68c:	4a6e      	ldr	r2, [pc, #440]	@ (801b848 <_strtod_l+0xbbc>)
 801b68e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b690:	4694      	mov	ip, r2
 801b692:	4463      	add	r3, ip
 801b694:	001f      	movs	r7, r3
 801b696:	0030      	movs	r0, r6
 801b698:	0019      	movs	r1, r3
 801b69a:	f002 ffd7 	bl	801e64c <__ulp>
 801b69e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b6a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b6a2:	f7e6 ffcb 	bl	800263c <__aeabi_dmul>
 801b6a6:	0032      	movs	r2, r6
 801b6a8:	003b      	movs	r3, r7
 801b6aa:	f7e6 f81f 	bl	80016ec <__aeabi_dadd>
 801b6ae:	4a64      	ldr	r2, [pc, #400]	@ (801b840 <_strtod_l+0xbb4>)
 801b6b0:	4b66      	ldr	r3, [pc, #408]	@ (801b84c <_strtod_l+0xbc0>)
 801b6b2:	0006      	movs	r6, r0
 801b6b4:	400a      	ands	r2, r1
 801b6b6:	429a      	cmp	r2, r3
 801b6b8:	d940      	bls.n	801b73c <_strtod_l+0xab0>
 801b6ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b6bc:	4a64      	ldr	r2, [pc, #400]	@ (801b850 <_strtod_l+0xbc4>)
 801b6be:	4293      	cmp	r3, r2
 801b6c0:	d103      	bne.n	801b6ca <_strtod_l+0xa3e>
 801b6c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6c4:	3301      	adds	r3, #1
 801b6c6:	d100      	bne.n	801b6ca <_strtod_l+0xa3e>
 801b6c8:	e51a      	b.n	801b100 <_strtod_l+0x474>
 801b6ca:	2601      	movs	r6, #1
 801b6cc:	4f60      	ldr	r7, [pc, #384]	@ (801b850 <_strtod_l+0xbc4>)
 801b6ce:	4276      	negs	r6, r6
 801b6d0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b6d2:	9805      	ldr	r0, [sp, #20]
 801b6d4:	f002 fc6e 	bl	801dfb4 <_Bfree>
 801b6d8:	9908      	ldr	r1, [sp, #32]
 801b6da:	9805      	ldr	r0, [sp, #20]
 801b6dc:	f002 fc6a 	bl	801dfb4 <_Bfree>
 801b6e0:	9907      	ldr	r1, [sp, #28]
 801b6e2:	9805      	ldr	r0, [sp, #20]
 801b6e4:	f002 fc66 	bl	801dfb4 <_Bfree>
 801b6e8:	9906      	ldr	r1, [sp, #24]
 801b6ea:	9805      	ldr	r0, [sp, #20]
 801b6ec:	f002 fc62 	bl	801dfb4 <_Bfree>
 801b6f0:	e617      	b.n	801b322 <_strtod_l+0x696>
 801b6f2:	2e01      	cmp	r6, #1
 801b6f4:	d103      	bne.n	801b6fe <_strtod_l+0xa72>
 801b6f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d100      	bne.n	801b6fe <_strtod_l+0xa72>
 801b6fc:	e59c      	b.n	801b238 <_strtod_l+0x5ac>
 801b6fe:	2300      	movs	r3, #0
 801b700:	4c54      	ldr	r4, [pc, #336]	@ (801b854 <_strtod_l+0xbc8>)
 801b702:	4d4d      	ldr	r5, [pc, #308]	@ (801b838 <_strtod_l+0xbac>)
 801b704:	930a      	str	r3, [sp, #40]	@ 0x28
 801b706:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b708:	2400      	movs	r4, #0
 801b70a:	e7b2      	b.n	801b672 <_strtod_l+0x9e6>
 801b70c:	2400      	movs	r4, #0
 801b70e:	4d4b      	ldr	r5, [pc, #300]	@ (801b83c <_strtod_l+0xbb0>)
 801b710:	e7aa      	b.n	801b668 <_strtod_l+0x9dc>
 801b712:	0020      	movs	r0, r4
 801b714:	0029      	movs	r1, r5
 801b716:	4b49      	ldr	r3, [pc, #292]	@ (801b83c <_strtod_l+0xbb0>)
 801b718:	2200      	movs	r2, #0
 801b71a:	f7e6 ff8f 	bl	800263c <__aeabi_dmul>
 801b71e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b720:	0004      	movs	r4, r0
 801b722:	000d      	movs	r5, r1
 801b724:	2b00      	cmp	r3, #0
 801b726:	d09f      	beq.n	801b668 <_strtod_l+0x9dc>
 801b728:	940a      	str	r4, [sp, #40]	@ 0x28
 801b72a:	950b      	str	r5, [sp, #44]	@ 0x2c
 801b72c:	e7a1      	b.n	801b672 <_strtod_l+0x9e6>
 801b72e:	2300      	movs	r3, #0
 801b730:	4c41      	ldr	r4, [pc, #260]	@ (801b838 <_strtod_l+0xbac>)
 801b732:	0025      	movs	r5, r4
 801b734:	930a      	str	r3, [sp, #40]	@ 0x28
 801b736:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b738:	001c      	movs	r4, r3
 801b73a:	e79a      	b.n	801b672 <_strtod_l+0x9e6>
 801b73c:	23d4      	movs	r3, #212	@ 0xd4
 801b73e:	049b      	lsls	r3, r3, #18
 801b740:	18cf      	adds	r7, r1, r3
 801b742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b744:	9710      	str	r7, [sp, #64]	@ 0x40
 801b746:	2b00      	cmp	r3, #0
 801b748:	d1c2      	bne.n	801b6d0 <_strtod_l+0xa44>
 801b74a:	4b3d      	ldr	r3, [pc, #244]	@ (801b840 <_strtod_l+0xbb4>)
 801b74c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b74e:	403b      	ands	r3, r7
 801b750:	429a      	cmp	r2, r3
 801b752:	d1bd      	bne.n	801b6d0 <_strtod_l+0xa44>
 801b754:	0020      	movs	r0, r4
 801b756:	0029      	movs	r1, r5
 801b758:	f7e4 ff96 	bl	8000688 <__aeabi_d2lz>
 801b75c:	f7e4 ffce 	bl	80006fc <__aeabi_l2d>
 801b760:	0002      	movs	r2, r0
 801b762:	000b      	movs	r3, r1
 801b764:	0020      	movs	r0, r4
 801b766:	0029      	movs	r1, r5
 801b768:	f7e7 fa30 	bl	8002bcc <__aeabi_dsub>
 801b76c:	033c      	lsls	r4, r7, #12
 801b76e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b770:	0b24      	lsrs	r4, r4, #12
 801b772:	4334      	orrs	r4, r6
 801b774:	900e      	str	r0, [sp, #56]	@ 0x38
 801b776:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b778:	4a37      	ldr	r2, [pc, #220]	@ (801b858 <_strtod_l+0xbcc>)
 801b77a:	431c      	orrs	r4, r3
 801b77c:	d052      	beq.n	801b824 <_strtod_l+0xb98>
 801b77e:	4b37      	ldr	r3, [pc, #220]	@ (801b85c <_strtod_l+0xbd0>)
 801b780:	f7e4 fe9c 	bl	80004bc <__aeabi_dcmplt>
 801b784:	2800      	cmp	r0, #0
 801b786:	d000      	beq.n	801b78a <_strtod_l+0xafe>
 801b788:	e4c3      	b.n	801b112 <_strtod_l+0x486>
 801b78a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b78c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b78e:	4a34      	ldr	r2, [pc, #208]	@ (801b860 <_strtod_l+0xbd4>)
 801b790:	4b2a      	ldr	r3, [pc, #168]	@ (801b83c <_strtod_l+0xbb0>)
 801b792:	f7e4 fea7 	bl	80004e4 <__aeabi_dcmpgt>
 801b796:	2800      	cmp	r0, #0
 801b798:	d09a      	beq.n	801b6d0 <_strtod_l+0xa44>
 801b79a:	e4ba      	b.n	801b112 <_strtod_l+0x486>
 801b79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d02a      	beq.n	801b7f8 <_strtod_l+0xb6c>
 801b7a2:	23d4      	movs	r3, #212	@ 0xd4
 801b7a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b7a6:	04db      	lsls	r3, r3, #19
 801b7a8:	429a      	cmp	r2, r3
 801b7aa:	d825      	bhi.n	801b7f8 <_strtod_l+0xb6c>
 801b7ac:	0020      	movs	r0, r4
 801b7ae:	0029      	movs	r1, r5
 801b7b0:	4a2c      	ldr	r2, [pc, #176]	@ (801b864 <_strtod_l+0xbd8>)
 801b7b2:	4b2d      	ldr	r3, [pc, #180]	@ (801b868 <_strtod_l+0xbdc>)
 801b7b4:	f7e4 fe8c 	bl	80004d0 <__aeabi_dcmple>
 801b7b8:	2800      	cmp	r0, #0
 801b7ba:	d016      	beq.n	801b7ea <_strtod_l+0xb5e>
 801b7bc:	0020      	movs	r0, r4
 801b7be:	0029      	movs	r1, r5
 801b7c0:	f7e4 ff44 	bl	800064c <__aeabi_d2uiz>
 801b7c4:	2800      	cmp	r0, #0
 801b7c6:	d100      	bne.n	801b7ca <_strtod_l+0xb3e>
 801b7c8:	3001      	adds	r0, #1
 801b7ca:	f7e7 fe27 	bl	800341c <__aeabi_ui2d>
 801b7ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b7d0:	0004      	movs	r4, r0
 801b7d2:	000d      	movs	r5, r1
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d122      	bne.n	801b81e <_strtod_l+0xb92>
 801b7d8:	2380      	movs	r3, #128	@ 0x80
 801b7da:	061b      	lsls	r3, r3, #24
 801b7dc:	18cb      	adds	r3, r1, r3
 801b7de:	9018      	str	r0, [sp, #96]	@ 0x60
 801b7e0:	9319      	str	r3, [sp, #100]	@ 0x64
 801b7e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b7e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b7e6:	9214      	str	r2, [sp, #80]	@ 0x50
 801b7e8:	9315      	str	r3, [sp, #84]	@ 0x54
 801b7ea:	22d6      	movs	r2, #214	@ 0xd6
 801b7ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b7ee:	04d2      	lsls	r2, r2, #19
 801b7f0:	189b      	adds	r3, r3, r2
 801b7f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b7f4:	1a9b      	subs	r3, r3, r2
 801b7f6:	9315      	str	r3, [sp, #84]	@ 0x54
 801b7f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b7fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b7fc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b7fe:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801b800:	f002 ff24 	bl	801e64c <__ulp>
 801b804:	0002      	movs	r2, r0
 801b806:	000b      	movs	r3, r1
 801b808:	0030      	movs	r0, r6
 801b80a:	0039      	movs	r1, r7
 801b80c:	f7e6 ff16 	bl	800263c <__aeabi_dmul>
 801b810:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b812:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b814:	f7e5 ff6a 	bl	80016ec <__aeabi_dadd>
 801b818:	0006      	movs	r6, r0
 801b81a:	000f      	movs	r7, r1
 801b81c:	e791      	b.n	801b742 <_strtod_l+0xab6>
 801b81e:	9418      	str	r4, [sp, #96]	@ 0x60
 801b820:	9519      	str	r5, [sp, #100]	@ 0x64
 801b822:	e7de      	b.n	801b7e2 <_strtod_l+0xb56>
 801b824:	4b11      	ldr	r3, [pc, #68]	@ (801b86c <_strtod_l+0xbe0>)
 801b826:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b828:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b82a:	f7e4 fe47 	bl	80004bc <__aeabi_dcmplt>
 801b82e:	e7b2      	b.n	801b796 <_strtod_l+0xb0a>
 801b830:	fff00000 	.word	0xfff00000
 801b834:	000fffff 	.word	0x000fffff
 801b838:	3ff00000 	.word	0x3ff00000
 801b83c:	3fe00000 	.word	0x3fe00000
 801b840:	7ff00000 	.word	0x7ff00000
 801b844:	7fe00000 	.word	0x7fe00000
 801b848:	fcb00000 	.word	0xfcb00000
 801b84c:	7c9fffff 	.word	0x7c9fffff
 801b850:	7fefffff 	.word	0x7fefffff
 801b854:	bff00000 	.word	0xbff00000
 801b858:	94a03595 	.word	0x94a03595
 801b85c:	3fdfffff 	.word	0x3fdfffff
 801b860:	35afe535 	.word	0x35afe535
 801b864:	ffc00000 	.word	0xffc00000
 801b868:	41dfffff 	.word	0x41dfffff
 801b86c:	3fcfffff 	.word	0x3fcfffff

0801b870 <strtod>:
 801b870:	b510      	push	{r4, lr}
 801b872:	4c04      	ldr	r4, [pc, #16]	@ (801b884 <strtod+0x14>)
 801b874:	000a      	movs	r2, r1
 801b876:	0001      	movs	r1, r0
 801b878:	4b03      	ldr	r3, [pc, #12]	@ (801b888 <strtod+0x18>)
 801b87a:	6820      	ldr	r0, [r4, #0]
 801b87c:	f7ff fa06 	bl	801ac8c <_strtod_l>
 801b880:	bd10      	pop	{r4, pc}
 801b882:	46c0      	nop			@ (mov r8, r8)
 801b884:	200003c4 	.word	0x200003c4
 801b888:	20000258 	.word	0x20000258

0801b88c <_strtol_l.constprop.0>:
 801b88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b88e:	b085      	sub	sp, #20
 801b890:	0017      	movs	r7, r2
 801b892:	001e      	movs	r6, r3
 801b894:	9003      	str	r0, [sp, #12]
 801b896:	9101      	str	r1, [sp, #4]
 801b898:	2b24      	cmp	r3, #36	@ 0x24
 801b89a:	d844      	bhi.n	801b926 <_strtol_l.constprop.0+0x9a>
 801b89c:	000c      	movs	r4, r1
 801b89e:	2b01      	cmp	r3, #1
 801b8a0:	d041      	beq.n	801b926 <_strtol_l.constprop.0+0x9a>
 801b8a2:	4b3d      	ldr	r3, [pc, #244]	@ (801b998 <_strtol_l.constprop.0+0x10c>)
 801b8a4:	2208      	movs	r2, #8
 801b8a6:	469c      	mov	ip, r3
 801b8a8:	0023      	movs	r3, r4
 801b8aa:	4661      	mov	r1, ip
 801b8ac:	781d      	ldrb	r5, [r3, #0]
 801b8ae:	3401      	adds	r4, #1
 801b8b0:	5d48      	ldrb	r0, [r1, r5]
 801b8b2:	0001      	movs	r1, r0
 801b8b4:	4011      	ands	r1, r2
 801b8b6:	4210      	tst	r0, r2
 801b8b8:	d1f6      	bne.n	801b8a8 <_strtol_l.constprop.0+0x1c>
 801b8ba:	2d2d      	cmp	r5, #45	@ 0x2d
 801b8bc:	d13a      	bne.n	801b934 <_strtol_l.constprop.0+0xa8>
 801b8be:	7825      	ldrb	r5, [r4, #0]
 801b8c0:	1c9c      	adds	r4, r3, #2
 801b8c2:	2301      	movs	r3, #1
 801b8c4:	9300      	str	r3, [sp, #0]
 801b8c6:	2210      	movs	r2, #16
 801b8c8:	0033      	movs	r3, r6
 801b8ca:	4393      	bics	r3, r2
 801b8cc:	d109      	bne.n	801b8e2 <_strtol_l.constprop.0+0x56>
 801b8ce:	2d30      	cmp	r5, #48	@ 0x30
 801b8d0:	d136      	bne.n	801b940 <_strtol_l.constprop.0+0xb4>
 801b8d2:	2120      	movs	r1, #32
 801b8d4:	7823      	ldrb	r3, [r4, #0]
 801b8d6:	438b      	bics	r3, r1
 801b8d8:	2b58      	cmp	r3, #88	@ 0x58
 801b8da:	d131      	bne.n	801b940 <_strtol_l.constprop.0+0xb4>
 801b8dc:	0016      	movs	r6, r2
 801b8de:	7865      	ldrb	r5, [r4, #1]
 801b8e0:	3402      	adds	r4, #2
 801b8e2:	4a2e      	ldr	r2, [pc, #184]	@ (801b99c <_strtol_l.constprop.0+0x110>)
 801b8e4:	9b00      	ldr	r3, [sp, #0]
 801b8e6:	4694      	mov	ip, r2
 801b8e8:	4463      	add	r3, ip
 801b8ea:	0031      	movs	r1, r6
 801b8ec:	0018      	movs	r0, r3
 801b8ee:	9302      	str	r3, [sp, #8]
 801b8f0:	f7e4 fcde 	bl	80002b0 <__aeabi_uidivmod>
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	4684      	mov	ip, r0
 801b8f8:	0010      	movs	r0, r2
 801b8fa:	002b      	movs	r3, r5
 801b8fc:	3b30      	subs	r3, #48	@ 0x30
 801b8fe:	2b09      	cmp	r3, #9
 801b900:	d825      	bhi.n	801b94e <_strtol_l.constprop.0+0xc2>
 801b902:	001d      	movs	r5, r3
 801b904:	42ae      	cmp	r6, r5
 801b906:	dd31      	ble.n	801b96c <_strtol_l.constprop.0+0xe0>
 801b908:	1c53      	adds	r3, r2, #1
 801b90a:	d009      	beq.n	801b920 <_strtol_l.constprop.0+0x94>
 801b90c:	2201      	movs	r2, #1
 801b90e:	4252      	negs	r2, r2
 801b910:	4584      	cmp	ip, r0
 801b912:	d305      	bcc.n	801b920 <_strtol_l.constprop.0+0x94>
 801b914:	d101      	bne.n	801b91a <_strtol_l.constprop.0+0x8e>
 801b916:	42a9      	cmp	r1, r5
 801b918:	db25      	blt.n	801b966 <_strtol_l.constprop.0+0xda>
 801b91a:	2201      	movs	r2, #1
 801b91c:	4370      	muls	r0, r6
 801b91e:	1828      	adds	r0, r5, r0
 801b920:	7825      	ldrb	r5, [r4, #0]
 801b922:	3401      	adds	r4, #1
 801b924:	e7e9      	b.n	801b8fa <_strtol_l.constprop.0+0x6e>
 801b926:	f000 ffc5 	bl	801c8b4 <__errno>
 801b92a:	2316      	movs	r3, #22
 801b92c:	6003      	str	r3, [r0, #0]
 801b92e:	2000      	movs	r0, #0
 801b930:	b005      	add	sp, #20
 801b932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b934:	9100      	str	r1, [sp, #0]
 801b936:	2d2b      	cmp	r5, #43	@ 0x2b
 801b938:	d1c5      	bne.n	801b8c6 <_strtol_l.constprop.0+0x3a>
 801b93a:	7825      	ldrb	r5, [r4, #0]
 801b93c:	1c9c      	adds	r4, r3, #2
 801b93e:	e7c2      	b.n	801b8c6 <_strtol_l.constprop.0+0x3a>
 801b940:	2e00      	cmp	r6, #0
 801b942:	d1ce      	bne.n	801b8e2 <_strtol_l.constprop.0+0x56>
 801b944:	3608      	adds	r6, #8
 801b946:	2d30      	cmp	r5, #48	@ 0x30
 801b948:	d0cb      	beq.n	801b8e2 <_strtol_l.constprop.0+0x56>
 801b94a:	3602      	adds	r6, #2
 801b94c:	e7c9      	b.n	801b8e2 <_strtol_l.constprop.0+0x56>
 801b94e:	002b      	movs	r3, r5
 801b950:	3b41      	subs	r3, #65	@ 0x41
 801b952:	2b19      	cmp	r3, #25
 801b954:	d801      	bhi.n	801b95a <_strtol_l.constprop.0+0xce>
 801b956:	3d37      	subs	r5, #55	@ 0x37
 801b958:	e7d4      	b.n	801b904 <_strtol_l.constprop.0+0x78>
 801b95a:	002b      	movs	r3, r5
 801b95c:	3b61      	subs	r3, #97	@ 0x61
 801b95e:	2b19      	cmp	r3, #25
 801b960:	d804      	bhi.n	801b96c <_strtol_l.constprop.0+0xe0>
 801b962:	3d57      	subs	r5, #87	@ 0x57
 801b964:	e7ce      	b.n	801b904 <_strtol_l.constprop.0+0x78>
 801b966:	2201      	movs	r2, #1
 801b968:	4252      	negs	r2, r2
 801b96a:	e7d9      	b.n	801b920 <_strtol_l.constprop.0+0x94>
 801b96c:	1c53      	adds	r3, r2, #1
 801b96e:	d108      	bne.n	801b982 <_strtol_l.constprop.0+0xf6>
 801b970:	2322      	movs	r3, #34	@ 0x22
 801b972:	9a03      	ldr	r2, [sp, #12]
 801b974:	9802      	ldr	r0, [sp, #8]
 801b976:	6013      	str	r3, [r2, #0]
 801b978:	2f00      	cmp	r7, #0
 801b97a:	d0d9      	beq.n	801b930 <_strtol_l.constprop.0+0xa4>
 801b97c:	1e63      	subs	r3, r4, #1
 801b97e:	9301      	str	r3, [sp, #4]
 801b980:	e007      	b.n	801b992 <_strtol_l.constprop.0+0x106>
 801b982:	9b00      	ldr	r3, [sp, #0]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d000      	beq.n	801b98a <_strtol_l.constprop.0+0xfe>
 801b988:	4240      	negs	r0, r0
 801b98a:	2f00      	cmp	r7, #0
 801b98c:	d0d0      	beq.n	801b930 <_strtol_l.constprop.0+0xa4>
 801b98e:	2a00      	cmp	r2, #0
 801b990:	d1f4      	bne.n	801b97c <_strtol_l.constprop.0+0xf0>
 801b992:	9b01      	ldr	r3, [sp, #4]
 801b994:	603b      	str	r3, [r7, #0]
 801b996:	e7cb      	b.n	801b930 <_strtol_l.constprop.0+0xa4>
 801b998:	080210f9 	.word	0x080210f9
 801b99c:	7fffffff 	.word	0x7fffffff

0801b9a0 <strtol>:
 801b9a0:	b510      	push	{r4, lr}
 801b9a2:	4c04      	ldr	r4, [pc, #16]	@ (801b9b4 <strtol+0x14>)
 801b9a4:	0013      	movs	r3, r2
 801b9a6:	000a      	movs	r2, r1
 801b9a8:	0001      	movs	r1, r0
 801b9aa:	6820      	ldr	r0, [r4, #0]
 801b9ac:	f7ff ff6e 	bl	801b88c <_strtol_l.constprop.0>
 801b9b0:	bd10      	pop	{r4, pc}
 801b9b2:	46c0      	nop			@ (mov r8, r8)
 801b9b4:	200003c4 	.word	0x200003c4

0801b9b8 <__cvt>:
 801b9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9ba:	001f      	movs	r7, r3
 801b9bc:	2300      	movs	r3, #0
 801b9be:	0016      	movs	r6, r2
 801b9c0:	b08b      	sub	sp, #44	@ 0x2c
 801b9c2:	429f      	cmp	r7, r3
 801b9c4:	da04      	bge.n	801b9d0 <__cvt+0x18>
 801b9c6:	2180      	movs	r1, #128	@ 0x80
 801b9c8:	0609      	lsls	r1, r1, #24
 801b9ca:	187b      	adds	r3, r7, r1
 801b9cc:	001f      	movs	r7, r3
 801b9ce:	232d      	movs	r3, #45	@ 0x2d
 801b9d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b9d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b9d4:	7013      	strb	r3, [r2, #0]
 801b9d6:	2320      	movs	r3, #32
 801b9d8:	2203      	movs	r2, #3
 801b9da:	439d      	bics	r5, r3
 801b9dc:	2d46      	cmp	r5, #70	@ 0x46
 801b9de:	d007      	beq.n	801b9f0 <__cvt+0x38>
 801b9e0:	002b      	movs	r3, r5
 801b9e2:	3b45      	subs	r3, #69	@ 0x45
 801b9e4:	4259      	negs	r1, r3
 801b9e6:	414b      	adcs	r3, r1
 801b9e8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b9ea:	3a01      	subs	r2, #1
 801b9ec:	18cb      	adds	r3, r1, r3
 801b9ee:	9310      	str	r3, [sp, #64]	@ 0x40
 801b9f0:	ab09      	add	r3, sp, #36	@ 0x24
 801b9f2:	9304      	str	r3, [sp, #16]
 801b9f4:	ab08      	add	r3, sp, #32
 801b9f6:	9303      	str	r3, [sp, #12]
 801b9f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b9fa:	9200      	str	r2, [sp, #0]
 801b9fc:	9302      	str	r3, [sp, #8]
 801b9fe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ba00:	0032      	movs	r2, r6
 801ba02:	9301      	str	r3, [sp, #4]
 801ba04:	003b      	movs	r3, r7
 801ba06:	f001 f82b 	bl	801ca60 <_dtoa_r>
 801ba0a:	0004      	movs	r4, r0
 801ba0c:	2d47      	cmp	r5, #71	@ 0x47
 801ba0e:	d11b      	bne.n	801ba48 <__cvt+0x90>
 801ba10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ba12:	07db      	lsls	r3, r3, #31
 801ba14:	d511      	bpl.n	801ba3a <__cvt+0x82>
 801ba16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ba18:	18c3      	adds	r3, r0, r3
 801ba1a:	9307      	str	r3, [sp, #28]
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	2300      	movs	r3, #0
 801ba20:	0030      	movs	r0, r6
 801ba22:	0039      	movs	r1, r7
 801ba24:	f7e4 fd44 	bl	80004b0 <__aeabi_dcmpeq>
 801ba28:	2800      	cmp	r0, #0
 801ba2a:	d001      	beq.n	801ba30 <__cvt+0x78>
 801ba2c:	9b07      	ldr	r3, [sp, #28]
 801ba2e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba30:	2230      	movs	r2, #48	@ 0x30
 801ba32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba34:	9907      	ldr	r1, [sp, #28]
 801ba36:	428b      	cmp	r3, r1
 801ba38:	d320      	bcc.n	801ba7c <__cvt+0xc4>
 801ba3a:	0020      	movs	r0, r4
 801ba3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ba3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801ba40:	1b1b      	subs	r3, r3, r4
 801ba42:	6013      	str	r3, [r2, #0]
 801ba44:	b00b      	add	sp, #44	@ 0x2c
 801ba46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ba4a:	18c3      	adds	r3, r0, r3
 801ba4c:	9307      	str	r3, [sp, #28]
 801ba4e:	2d46      	cmp	r5, #70	@ 0x46
 801ba50:	d1e4      	bne.n	801ba1c <__cvt+0x64>
 801ba52:	7803      	ldrb	r3, [r0, #0]
 801ba54:	2b30      	cmp	r3, #48	@ 0x30
 801ba56:	d10c      	bne.n	801ba72 <__cvt+0xba>
 801ba58:	2200      	movs	r2, #0
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	0030      	movs	r0, r6
 801ba5e:	0039      	movs	r1, r7
 801ba60:	f7e4 fd26 	bl	80004b0 <__aeabi_dcmpeq>
 801ba64:	2800      	cmp	r0, #0
 801ba66:	d104      	bne.n	801ba72 <__cvt+0xba>
 801ba68:	2301      	movs	r3, #1
 801ba6a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ba6c:	1a9b      	subs	r3, r3, r2
 801ba6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ba70:	6013      	str	r3, [r2, #0]
 801ba72:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ba74:	9a07      	ldr	r2, [sp, #28]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	18d3      	adds	r3, r2, r3
 801ba7a:	e7ce      	b.n	801ba1a <__cvt+0x62>
 801ba7c:	1c59      	adds	r1, r3, #1
 801ba7e:	9109      	str	r1, [sp, #36]	@ 0x24
 801ba80:	701a      	strb	r2, [r3, #0]
 801ba82:	e7d6      	b.n	801ba32 <__cvt+0x7a>

0801ba84 <__exponent>:
 801ba84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba86:	232b      	movs	r3, #43	@ 0x2b
 801ba88:	0005      	movs	r5, r0
 801ba8a:	000c      	movs	r4, r1
 801ba8c:	b085      	sub	sp, #20
 801ba8e:	7002      	strb	r2, [r0, #0]
 801ba90:	2900      	cmp	r1, #0
 801ba92:	da01      	bge.n	801ba98 <__exponent+0x14>
 801ba94:	424c      	negs	r4, r1
 801ba96:	3302      	adds	r3, #2
 801ba98:	706b      	strb	r3, [r5, #1]
 801ba9a:	2c09      	cmp	r4, #9
 801ba9c:	dd2c      	ble.n	801baf8 <__exponent+0x74>
 801ba9e:	ab02      	add	r3, sp, #8
 801baa0:	1dde      	adds	r6, r3, #7
 801baa2:	0020      	movs	r0, r4
 801baa4:	210a      	movs	r1, #10
 801baa6:	f7e4 fced 	bl	8000484 <__aeabi_idivmod>
 801baaa:	0037      	movs	r7, r6
 801baac:	3130      	adds	r1, #48	@ 0x30
 801baae:	3e01      	subs	r6, #1
 801bab0:	0020      	movs	r0, r4
 801bab2:	7031      	strb	r1, [r6, #0]
 801bab4:	210a      	movs	r1, #10
 801bab6:	9401      	str	r4, [sp, #4]
 801bab8:	f7e4 fbfe 	bl	80002b8 <__divsi3>
 801babc:	9b01      	ldr	r3, [sp, #4]
 801babe:	0004      	movs	r4, r0
 801bac0:	2b63      	cmp	r3, #99	@ 0x63
 801bac2:	dcee      	bgt.n	801baa2 <__exponent+0x1e>
 801bac4:	1eba      	subs	r2, r7, #2
 801bac6:	1ca8      	adds	r0, r5, #2
 801bac8:	0001      	movs	r1, r0
 801baca:	0013      	movs	r3, r2
 801bacc:	3430      	adds	r4, #48	@ 0x30
 801bace:	7014      	strb	r4, [r2, #0]
 801bad0:	ac02      	add	r4, sp, #8
 801bad2:	3407      	adds	r4, #7
 801bad4:	429c      	cmp	r4, r3
 801bad6:	d80a      	bhi.n	801baee <__exponent+0x6a>
 801bad8:	2300      	movs	r3, #0
 801bada:	42a2      	cmp	r2, r4
 801badc:	d803      	bhi.n	801bae6 <__exponent+0x62>
 801bade:	3309      	adds	r3, #9
 801bae0:	aa02      	add	r2, sp, #8
 801bae2:	189b      	adds	r3, r3, r2
 801bae4:	1bdb      	subs	r3, r3, r7
 801bae6:	18c0      	adds	r0, r0, r3
 801bae8:	1b40      	subs	r0, r0, r5
 801baea:	b005      	add	sp, #20
 801baec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801baee:	781c      	ldrb	r4, [r3, #0]
 801baf0:	3301      	adds	r3, #1
 801baf2:	700c      	strb	r4, [r1, #0]
 801baf4:	3101      	adds	r1, #1
 801baf6:	e7eb      	b.n	801bad0 <__exponent+0x4c>
 801baf8:	2330      	movs	r3, #48	@ 0x30
 801bafa:	18e4      	adds	r4, r4, r3
 801bafc:	70ab      	strb	r3, [r5, #2]
 801bafe:	1d28      	adds	r0, r5, #4
 801bb00:	70ec      	strb	r4, [r5, #3]
 801bb02:	e7f1      	b.n	801bae8 <__exponent+0x64>

0801bb04 <_printf_float>:
 801bb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb06:	b097      	sub	sp, #92	@ 0x5c
 801bb08:	000d      	movs	r5, r1
 801bb0a:	920a      	str	r2, [sp, #40]	@ 0x28
 801bb0c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801bb0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bb10:	9009      	str	r0, [sp, #36]	@ 0x24
 801bb12:	f000 fe7d 	bl	801c810 <_localeconv_r>
 801bb16:	6803      	ldr	r3, [r0, #0]
 801bb18:	0018      	movs	r0, r3
 801bb1a:	930d      	str	r3, [sp, #52]	@ 0x34
 801bb1c:	f7e4 fb26 	bl	800016c <strlen>
 801bb20:	2300      	movs	r3, #0
 801bb22:	900f      	str	r0, [sp, #60]	@ 0x3c
 801bb24:	9314      	str	r3, [sp, #80]	@ 0x50
 801bb26:	7e2b      	ldrb	r3, [r5, #24]
 801bb28:	2207      	movs	r2, #7
 801bb2a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bb2c:	682b      	ldr	r3, [r5, #0]
 801bb2e:	930e      	str	r3, [sp, #56]	@ 0x38
 801bb30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801bb32:	6823      	ldr	r3, [r4, #0]
 801bb34:	05c9      	lsls	r1, r1, #23
 801bb36:	d545      	bpl.n	801bbc4 <_printf_float+0xc0>
 801bb38:	189b      	adds	r3, r3, r2
 801bb3a:	4393      	bics	r3, r2
 801bb3c:	001a      	movs	r2, r3
 801bb3e:	3208      	adds	r2, #8
 801bb40:	6022      	str	r2, [r4, #0]
 801bb42:	2201      	movs	r2, #1
 801bb44:	681e      	ldr	r6, [r3, #0]
 801bb46:	685f      	ldr	r7, [r3, #4]
 801bb48:	007b      	lsls	r3, r7, #1
 801bb4a:	085b      	lsrs	r3, r3, #1
 801bb4c:	9311      	str	r3, [sp, #68]	@ 0x44
 801bb4e:	9610      	str	r6, [sp, #64]	@ 0x40
 801bb50:	64ae      	str	r6, [r5, #72]	@ 0x48
 801bb52:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801bb54:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801bb56:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801bb58:	4ba7      	ldr	r3, [pc, #668]	@ (801bdf8 <_printf_float+0x2f4>)
 801bb5a:	4252      	negs	r2, r2
 801bb5c:	f7e7 fbd2 	bl	8003304 <__aeabi_dcmpun>
 801bb60:	2800      	cmp	r0, #0
 801bb62:	d131      	bne.n	801bbc8 <_printf_float+0xc4>
 801bb64:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801bb66:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801bb68:	2201      	movs	r2, #1
 801bb6a:	4ba3      	ldr	r3, [pc, #652]	@ (801bdf8 <_printf_float+0x2f4>)
 801bb6c:	4252      	negs	r2, r2
 801bb6e:	f7e4 fcaf 	bl	80004d0 <__aeabi_dcmple>
 801bb72:	2800      	cmp	r0, #0
 801bb74:	d128      	bne.n	801bbc8 <_printf_float+0xc4>
 801bb76:	2200      	movs	r2, #0
 801bb78:	2300      	movs	r3, #0
 801bb7a:	0030      	movs	r0, r6
 801bb7c:	0039      	movs	r1, r7
 801bb7e:	f7e4 fc9d 	bl	80004bc <__aeabi_dcmplt>
 801bb82:	2800      	cmp	r0, #0
 801bb84:	d003      	beq.n	801bb8e <_printf_float+0x8a>
 801bb86:	002b      	movs	r3, r5
 801bb88:	222d      	movs	r2, #45	@ 0x2d
 801bb8a:	3343      	adds	r3, #67	@ 0x43
 801bb8c:	701a      	strb	r2, [r3, #0]
 801bb8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb90:	4f9a      	ldr	r7, [pc, #616]	@ (801bdfc <_printf_float+0x2f8>)
 801bb92:	2b47      	cmp	r3, #71	@ 0x47
 801bb94:	d900      	bls.n	801bb98 <_printf_float+0x94>
 801bb96:	4f9a      	ldr	r7, [pc, #616]	@ (801be00 <_printf_float+0x2fc>)
 801bb98:	2303      	movs	r3, #3
 801bb9a:	2400      	movs	r4, #0
 801bb9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bb9e:	612b      	str	r3, [r5, #16]
 801bba0:	3301      	adds	r3, #1
 801bba2:	439a      	bics	r2, r3
 801bba4:	602a      	str	r2, [r5, #0]
 801bba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bba8:	0029      	movs	r1, r5
 801bbaa:	9300      	str	r3, [sp, #0]
 801bbac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bbae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bbb0:	aa15      	add	r2, sp, #84	@ 0x54
 801bbb2:	f000 f9e5 	bl	801bf80 <_printf_common>
 801bbb6:	3001      	adds	r0, #1
 801bbb8:	d000      	beq.n	801bbbc <_printf_float+0xb8>
 801bbba:	e09f      	b.n	801bcfc <_printf_float+0x1f8>
 801bbbc:	2001      	movs	r0, #1
 801bbbe:	4240      	negs	r0, r0
 801bbc0:	b017      	add	sp, #92	@ 0x5c
 801bbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbc4:	3307      	adds	r3, #7
 801bbc6:	e7b8      	b.n	801bb3a <_printf_float+0x36>
 801bbc8:	0032      	movs	r2, r6
 801bbca:	003b      	movs	r3, r7
 801bbcc:	0030      	movs	r0, r6
 801bbce:	0039      	movs	r1, r7
 801bbd0:	f7e7 fb98 	bl	8003304 <__aeabi_dcmpun>
 801bbd4:	2800      	cmp	r0, #0
 801bbd6:	d00b      	beq.n	801bbf0 <_printf_float+0xec>
 801bbd8:	2f00      	cmp	r7, #0
 801bbda:	da03      	bge.n	801bbe4 <_printf_float+0xe0>
 801bbdc:	002b      	movs	r3, r5
 801bbde:	222d      	movs	r2, #45	@ 0x2d
 801bbe0:	3343      	adds	r3, #67	@ 0x43
 801bbe2:	701a      	strb	r2, [r3, #0]
 801bbe4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbe6:	4f87      	ldr	r7, [pc, #540]	@ (801be04 <_printf_float+0x300>)
 801bbe8:	2b47      	cmp	r3, #71	@ 0x47
 801bbea:	d9d5      	bls.n	801bb98 <_printf_float+0x94>
 801bbec:	4f86      	ldr	r7, [pc, #536]	@ (801be08 <_printf_float+0x304>)
 801bbee:	e7d3      	b.n	801bb98 <_printf_float+0x94>
 801bbf0:	2220      	movs	r2, #32
 801bbf2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bbf4:	686b      	ldr	r3, [r5, #4]
 801bbf6:	4394      	bics	r4, r2
 801bbf8:	1c5a      	adds	r2, r3, #1
 801bbfa:	d146      	bne.n	801bc8a <_printf_float+0x186>
 801bbfc:	3307      	adds	r3, #7
 801bbfe:	606b      	str	r3, [r5, #4]
 801bc00:	2380      	movs	r3, #128	@ 0x80
 801bc02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bc04:	00db      	lsls	r3, r3, #3
 801bc06:	4313      	orrs	r3, r2
 801bc08:	2200      	movs	r2, #0
 801bc0a:	602b      	str	r3, [r5, #0]
 801bc0c:	9206      	str	r2, [sp, #24]
 801bc0e:	aa14      	add	r2, sp, #80	@ 0x50
 801bc10:	9205      	str	r2, [sp, #20]
 801bc12:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bc14:	a90a      	add	r1, sp, #40	@ 0x28
 801bc16:	9204      	str	r2, [sp, #16]
 801bc18:	aa13      	add	r2, sp, #76	@ 0x4c
 801bc1a:	9203      	str	r2, [sp, #12]
 801bc1c:	2223      	movs	r2, #35	@ 0x23
 801bc1e:	1852      	adds	r2, r2, r1
 801bc20:	9202      	str	r2, [sp, #8]
 801bc22:	9301      	str	r3, [sp, #4]
 801bc24:	686b      	ldr	r3, [r5, #4]
 801bc26:	0032      	movs	r2, r6
 801bc28:	9300      	str	r3, [sp, #0]
 801bc2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc2c:	003b      	movs	r3, r7
 801bc2e:	f7ff fec3 	bl	801b9b8 <__cvt>
 801bc32:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bc34:	0007      	movs	r7, r0
 801bc36:	2c47      	cmp	r4, #71	@ 0x47
 801bc38:	d12d      	bne.n	801bc96 <_printf_float+0x192>
 801bc3a:	1cd3      	adds	r3, r2, #3
 801bc3c:	db02      	blt.n	801bc44 <_printf_float+0x140>
 801bc3e:	686b      	ldr	r3, [r5, #4]
 801bc40:	429a      	cmp	r2, r3
 801bc42:	dd48      	ble.n	801bcd6 <_printf_float+0x1d2>
 801bc44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc46:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bc48:	3b02      	subs	r3, #2
 801bc4a:	b2db      	uxtb	r3, r3
 801bc4c:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc4e:	0028      	movs	r0, r5
 801bc50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bc52:	3901      	subs	r1, #1
 801bc54:	3050      	adds	r0, #80	@ 0x50
 801bc56:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bc58:	f7ff ff14 	bl	801ba84 <__exponent>
 801bc5c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bc5e:	0004      	movs	r4, r0
 801bc60:	1813      	adds	r3, r2, r0
 801bc62:	612b      	str	r3, [r5, #16]
 801bc64:	2a01      	cmp	r2, #1
 801bc66:	dc02      	bgt.n	801bc6e <_printf_float+0x16a>
 801bc68:	682a      	ldr	r2, [r5, #0]
 801bc6a:	07d2      	lsls	r2, r2, #31
 801bc6c:	d501      	bpl.n	801bc72 <_printf_float+0x16e>
 801bc6e:	3301      	adds	r3, #1
 801bc70:	612b      	str	r3, [r5, #16]
 801bc72:	2323      	movs	r3, #35	@ 0x23
 801bc74:	aa0a      	add	r2, sp, #40	@ 0x28
 801bc76:	189b      	adds	r3, r3, r2
 801bc78:	781b      	ldrb	r3, [r3, #0]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	d100      	bne.n	801bc80 <_printf_float+0x17c>
 801bc7e:	e792      	b.n	801bba6 <_printf_float+0xa2>
 801bc80:	002b      	movs	r3, r5
 801bc82:	222d      	movs	r2, #45	@ 0x2d
 801bc84:	3343      	adds	r3, #67	@ 0x43
 801bc86:	701a      	strb	r2, [r3, #0]
 801bc88:	e78d      	b.n	801bba6 <_printf_float+0xa2>
 801bc8a:	2c47      	cmp	r4, #71	@ 0x47
 801bc8c:	d1b8      	bne.n	801bc00 <_printf_float+0xfc>
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d1b6      	bne.n	801bc00 <_printf_float+0xfc>
 801bc92:	3301      	adds	r3, #1
 801bc94:	e7b3      	b.n	801bbfe <_printf_float+0xfa>
 801bc96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc98:	0011      	movs	r1, r2
 801bc9a:	2b65      	cmp	r3, #101	@ 0x65
 801bc9c:	d9d7      	bls.n	801bc4e <_printf_float+0x14a>
 801bc9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bca0:	2b66      	cmp	r3, #102	@ 0x66
 801bca2:	d11a      	bne.n	801bcda <_printf_float+0x1d6>
 801bca4:	686b      	ldr	r3, [r5, #4]
 801bca6:	2a00      	cmp	r2, #0
 801bca8:	dd09      	ble.n	801bcbe <_printf_float+0x1ba>
 801bcaa:	612a      	str	r2, [r5, #16]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d102      	bne.n	801bcb6 <_printf_float+0x1b2>
 801bcb0:	6829      	ldr	r1, [r5, #0]
 801bcb2:	07c9      	lsls	r1, r1, #31
 801bcb4:	d50b      	bpl.n	801bcce <_printf_float+0x1ca>
 801bcb6:	3301      	adds	r3, #1
 801bcb8:	189b      	adds	r3, r3, r2
 801bcba:	612b      	str	r3, [r5, #16]
 801bcbc:	e007      	b.n	801bcce <_printf_float+0x1ca>
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d103      	bne.n	801bcca <_printf_float+0x1c6>
 801bcc2:	2201      	movs	r2, #1
 801bcc4:	6829      	ldr	r1, [r5, #0]
 801bcc6:	4211      	tst	r1, r2
 801bcc8:	d000      	beq.n	801bccc <_printf_float+0x1c8>
 801bcca:	1c9a      	adds	r2, r3, #2
 801bccc:	612a      	str	r2, [r5, #16]
 801bcce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bcd0:	2400      	movs	r4, #0
 801bcd2:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bcd4:	e7cd      	b.n	801bc72 <_printf_float+0x16e>
 801bcd6:	2367      	movs	r3, #103	@ 0x67
 801bcd8:	930c      	str	r3, [sp, #48]	@ 0x30
 801bcda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bcdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bcde:	4299      	cmp	r1, r3
 801bce0:	db06      	blt.n	801bcf0 <_printf_float+0x1ec>
 801bce2:	682b      	ldr	r3, [r5, #0]
 801bce4:	6129      	str	r1, [r5, #16]
 801bce6:	07db      	lsls	r3, r3, #31
 801bce8:	d5f1      	bpl.n	801bcce <_printf_float+0x1ca>
 801bcea:	3101      	adds	r1, #1
 801bcec:	6129      	str	r1, [r5, #16]
 801bcee:	e7ee      	b.n	801bcce <_printf_float+0x1ca>
 801bcf0:	2201      	movs	r2, #1
 801bcf2:	2900      	cmp	r1, #0
 801bcf4:	dce0      	bgt.n	801bcb8 <_printf_float+0x1b4>
 801bcf6:	1892      	adds	r2, r2, r2
 801bcf8:	1a52      	subs	r2, r2, r1
 801bcfa:	e7dd      	b.n	801bcb8 <_printf_float+0x1b4>
 801bcfc:	682a      	ldr	r2, [r5, #0]
 801bcfe:	0553      	lsls	r3, r2, #21
 801bd00:	d408      	bmi.n	801bd14 <_printf_float+0x210>
 801bd02:	692b      	ldr	r3, [r5, #16]
 801bd04:	003a      	movs	r2, r7
 801bd06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd0a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bd0c:	47a0      	blx	r4
 801bd0e:	3001      	adds	r0, #1
 801bd10:	d129      	bne.n	801bd66 <_printf_float+0x262>
 801bd12:	e753      	b.n	801bbbc <_printf_float+0xb8>
 801bd14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bd16:	2b65      	cmp	r3, #101	@ 0x65
 801bd18:	d800      	bhi.n	801bd1c <_printf_float+0x218>
 801bd1a:	e0da      	b.n	801bed2 <_printf_float+0x3ce>
 801bd1c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801bd1e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801bd20:	2200      	movs	r2, #0
 801bd22:	2300      	movs	r3, #0
 801bd24:	f7e4 fbc4 	bl	80004b0 <__aeabi_dcmpeq>
 801bd28:	2800      	cmp	r0, #0
 801bd2a:	d033      	beq.n	801bd94 <_printf_float+0x290>
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	4a37      	ldr	r2, [pc, #220]	@ (801be0c <_printf_float+0x308>)
 801bd30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bd36:	47a0      	blx	r4
 801bd38:	3001      	adds	r0, #1
 801bd3a:	d100      	bne.n	801bd3e <_printf_float+0x23a>
 801bd3c:	e73e      	b.n	801bbbc <_printf_float+0xb8>
 801bd3e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bd40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bd42:	42b3      	cmp	r3, r6
 801bd44:	db02      	blt.n	801bd4c <_printf_float+0x248>
 801bd46:	682b      	ldr	r3, [r5, #0]
 801bd48:	07db      	lsls	r3, r3, #31
 801bd4a:	d50c      	bpl.n	801bd66 <_printf_float+0x262>
 801bd4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bd4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bd52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd56:	47a0      	blx	r4
 801bd58:	2400      	movs	r4, #0
 801bd5a:	3001      	adds	r0, #1
 801bd5c:	d100      	bne.n	801bd60 <_printf_float+0x25c>
 801bd5e:	e72d      	b.n	801bbbc <_printf_float+0xb8>
 801bd60:	1e73      	subs	r3, r6, #1
 801bd62:	42a3      	cmp	r3, r4
 801bd64:	dc0a      	bgt.n	801bd7c <_printf_float+0x278>
 801bd66:	682b      	ldr	r3, [r5, #0]
 801bd68:	079b      	lsls	r3, r3, #30
 801bd6a:	d500      	bpl.n	801bd6e <_printf_float+0x26a>
 801bd6c:	e105      	b.n	801bf7a <_printf_float+0x476>
 801bd6e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bd70:	68e8      	ldr	r0, [r5, #12]
 801bd72:	4298      	cmp	r0, r3
 801bd74:	db00      	blt.n	801bd78 <_printf_float+0x274>
 801bd76:	e723      	b.n	801bbc0 <_printf_float+0xbc>
 801bd78:	0018      	movs	r0, r3
 801bd7a:	e721      	b.n	801bbc0 <_printf_float+0xbc>
 801bd7c:	002a      	movs	r2, r5
 801bd7e:	2301      	movs	r3, #1
 801bd80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bd86:	321a      	adds	r2, #26
 801bd88:	47b8      	blx	r7
 801bd8a:	3001      	adds	r0, #1
 801bd8c:	d100      	bne.n	801bd90 <_printf_float+0x28c>
 801bd8e:	e715      	b.n	801bbbc <_printf_float+0xb8>
 801bd90:	3401      	adds	r4, #1
 801bd92:	e7e5      	b.n	801bd60 <_printf_float+0x25c>
 801bd94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	dc3a      	bgt.n	801be10 <_printf_float+0x30c>
 801bd9a:	2301      	movs	r3, #1
 801bd9c:	4a1b      	ldr	r2, [pc, #108]	@ (801be0c <_printf_float+0x308>)
 801bd9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bda0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bda2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bda4:	47a0      	blx	r4
 801bda6:	3001      	adds	r0, #1
 801bda8:	d100      	bne.n	801bdac <_printf_float+0x2a8>
 801bdaa:	e707      	b.n	801bbbc <_printf_float+0xb8>
 801bdac:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bdae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bdb0:	4333      	orrs	r3, r6
 801bdb2:	d102      	bne.n	801bdba <_printf_float+0x2b6>
 801bdb4:	682b      	ldr	r3, [r5, #0]
 801bdb6:	07db      	lsls	r3, r3, #31
 801bdb8:	d5d5      	bpl.n	801bd66 <_printf_float+0x262>
 801bdba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bdbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bdbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bdc0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdc2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bdc4:	47a0      	blx	r4
 801bdc6:	2300      	movs	r3, #0
 801bdc8:	3001      	adds	r0, #1
 801bdca:	d100      	bne.n	801bdce <_printf_float+0x2ca>
 801bdcc:	e6f6      	b.n	801bbbc <_printf_float+0xb8>
 801bdce:	930c      	str	r3, [sp, #48]	@ 0x30
 801bdd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bdd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bdd4:	425b      	negs	r3, r3
 801bdd6:	4293      	cmp	r3, r2
 801bdd8:	dc01      	bgt.n	801bdde <_printf_float+0x2da>
 801bdda:	0033      	movs	r3, r6
 801bddc:	e792      	b.n	801bd04 <_printf_float+0x200>
 801bdde:	002a      	movs	r2, r5
 801bde0:	2301      	movs	r3, #1
 801bde2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bde4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bde6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bde8:	321a      	adds	r2, #26
 801bdea:	47a0      	blx	r4
 801bdec:	3001      	adds	r0, #1
 801bdee:	d100      	bne.n	801bdf2 <_printf_float+0x2ee>
 801bdf0:	e6e4      	b.n	801bbbc <_printf_float+0xb8>
 801bdf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bdf4:	3301      	adds	r3, #1
 801bdf6:	e7ea      	b.n	801bdce <_printf_float+0x2ca>
 801bdf8:	7fefffff 	.word	0x7fefffff
 801bdfc:	080211f9 	.word	0x080211f9
 801be00:	080211fd 	.word	0x080211fd
 801be04:	08021201 	.word	0x08021201
 801be08:	08021205 	.word	0x08021205
 801be0c:	08021209 	.word	0x08021209
 801be10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801be12:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801be14:	930c      	str	r3, [sp, #48]	@ 0x30
 801be16:	429e      	cmp	r6, r3
 801be18:	dd00      	ble.n	801be1c <_printf_float+0x318>
 801be1a:	001e      	movs	r6, r3
 801be1c:	2e00      	cmp	r6, #0
 801be1e:	dc31      	bgt.n	801be84 <_printf_float+0x380>
 801be20:	43f3      	mvns	r3, r6
 801be22:	2400      	movs	r4, #0
 801be24:	17db      	asrs	r3, r3, #31
 801be26:	4033      	ands	r3, r6
 801be28:	930e      	str	r3, [sp, #56]	@ 0x38
 801be2a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801be2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801be2e:	1af3      	subs	r3, r6, r3
 801be30:	42a3      	cmp	r3, r4
 801be32:	dc30      	bgt.n	801be96 <_printf_float+0x392>
 801be34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801be36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801be38:	429a      	cmp	r2, r3
 801be3a:	dc38      	bgt.n	801beae <_printf_float+0x3aa>
 801be3c:	682b      	ldr	r3, [r5, #0]
 801be3e:	07db      	lsls	r3, r3, #31
 801be40:	d435      	bmi.n	801beae <_printf_float+0x3aa>
 801be42:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801be44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801be48:	1b9b      	subs	r3, r3, r6
 801be4a:	1b14      	subs	r4, r2, r4
 801be4c:	429c      	cmp	r4, r3
 801be4e:	dd00      	ble.n	801be52 <_printf_float+0x34e>
 801be50:	001c      	movs	r4, r3
 801be52:	2c00      	cmp	r4, #0
 801be54:	dc34      	bgt.n	801bec0 <_printf_float+0x3bc>
 801be56:	43e3      	mvns	r3, r4
 801be58:	2600      	movs	r6, #0
 801be5a:	17db      	asrs	r3, r3, #31
 801be5c:	401c      	ands	r4, r3
 801be5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801be60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801be62:	1ad3      	subs	r3, r2, r3
 801be64:	1b1b      	subs	r3, r3, r4
 801be66:	42b3      	cmp	r3, r6
 801be68:	dc00      	bgt.n	801be6c <_printf_float+0x368>
 801be6a:	e77c      	b.n	801bd66 <_printf_float+0x262>
 801be6c:	002a      	movs	r2, r5
 801be6e:	2301      	movs	r3, #1
 801be70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be74:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801be76:	321a      	adds	r2, #26
 801be78:	47b8      	blx	r7
 801be7a:	3001      	adds	r0, #1
 801be7c:	d100      	bne.n	801be80 <_printf_float+0x37c>
 801be7e:	e69d      	b.n	801bbbc <_printf_float+0xb8>
 801be80:	3601      	adds	r6, #1
 801be82:	e7ec      	b.n	801be5e <_printf_float+0x35a>
 801be84:	0033      	movs	r3, r6
 801be86:	003a      	movs	r2, r7
 801be88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be8c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801be8e:	47a0      	blx	r4
 801be90:	3001      	adds	r0, #1
 801be92:	d1c5      	bne.n	801be20 <_printf_float+0x31c>
 801be94:	e692      	b.n	801bbbc <_printf_float+0xb8>
 801be96:	002a      	movs	r2, r5
 801be98:	2301      	movs	r3, #1
 801be9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be9e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bea0:	321a      	adds	r2, #26
 801bea2:	47b0      	blx	r6
 801bea4:	3001      	adds	r0, #1
 801bea6:	d100      	bne.n	801beaa <_printf_float+0x3a6>
 801bea8:	e688      	b.n	801bbbc <_printf_float+0xb8>
 801beaa:	3401      	adds	r4, #1
 801beac:	e7bd      	b.n	801be2a <_printf_float+0x326>
 801beae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801beb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801beb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801beb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801beb6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801beb8:	47a0      	blx	r4
 801beba:	3001      	adds	r0, #1
 801bebc:	d1c1      	bne.n	801be42 <_printf_float+0x33e>
 801bebe:	e67d      	b.n	801bbbc <_printf_float+0xb8>
 801bec0:	19ba      	adds	r2, r7, r6
 801bec2:	0023      	movs	r3, r4
 801bec4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bec8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801beca:	47b0      	blx	r6
 801becc:	3001      	adds	r0, #1
 801bece:	d1c2      	bne.n	801be56 <_printf_float+0x352>
 801bed0:	e674      	b.n	801bbbc <_printf_float+0xb8>
 801bed2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bed4:	930c      	str	r3, [sp, #48]	@ 0x30
 801bed6:	2b01      	cmp	r3, #1
 801bed8:	dc02      	bgt.n	801bee0 <_printf_float+0x3dc>
 801beda:	2301      	movs	r3, #1
 801bedc:	421a      	tst	r2, r3
 801bede:	d039      	beq.n	801bf54 <_printf_float+0x450>
 801bee0:	2301      	movs	r3, #1
 801bee2:	003a      	movs	r2, r7
 801bee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bee8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801beea:	47b0      	blx	r6
 801beec:	3001      	adds	r0, #1
 801beee:	d100      	bne.n	801bef2 <_printf_float+0x3ee>
 801bef0:	e664      	b.n	801bbbc <_printf_float+0xb8>
 801bef2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bef6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bef8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801befa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801befc:	47b0      	blx	r6
 801befe:	3001      	adds	r0, #1
 801bf00:	d100      	bne.n	801bf04 <_printf_float+0x400>
 801bf02:	e65b      	b.n	801bbbc <_printf_float+0xb8>
 801bf04:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801bf06:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801bf08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	3b01      	subs	r3, #1
 801bf0e:	930c      	str	r3, [sp, #48]	@ 0x30
 801bf10:	2300      	movs	r3, #0
 801bf12:	f7e4 facd 	bl	80004b0 <__aeabi_dcmpeq>
 801bf16:	2800      	cmp	r0, #0
 801bf18:	d11a      	bne.n	801bf50 <_printf_float+0x44c>
 801bf1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf1c:	1c7a      	adds	r2, r7, #1
 801bf1e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf20:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bf22:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bf24:	47b0      	blx	r6
 801bf26:	3001      	adds	r0, #1
 801bf28:	d10e      	bne.n	801bf48 <_printf_float+0x444>
 801bf2a:	e647      	b.n	801bbbc <_printf_float+0xb8>
 801bf2c:	002a      	movs	r2, r5
 801bf2e:	2301      	movs	r3, #1
 801bf30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bf34:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bf36:	321a      	adds	r2, #26
 801bf38:	47b8      	blx	r7
 801bf3a:	3001      	adds	r0, #1
 801bf3c:	d100      	bne.n	801bf40 <_printf_float+0x43c>
 801bf3e:	e63d      	b.n	801bbbc <_printf_float+0xb8>
 801bf40:	3601      	adds	r6, #1
 801bf42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bf44:	429e      	cmp	r6, r3
 801bf46:	dbf1      	blt.n	801bf2c <_printf_float+0x428>
 801bf48:	002a      	movs	r2, r5
 801bf4a:	0023      	movs	r3, r4
 801bf4c:	3250      	adds	r2, #80	@ 0x50
 801bf4e:	e6da      	b.n	801bd06 <_printf_float+0x202>
 801bf50:	2600      	movs	r6, #0
 801bf52:	e7f6      	b.n	801bf42 <_printf_float+0x43e>
 801bf54:	003a      	movs	r2, r7
 801bf56:	e7e2      	b.n	801bf1e <_printf_float+0x41a>
 801bf58:	002a      	movs	r2, r5
 801bf5a:	2301      	movs	r3, #1
 801bf5c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bf60:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bf62:	3219      	adds	r2, #25
 801bf64:	47b0      	blx	r6
 801bf66:	3001      	adds	r0, #1
 801bf68:	d100      	bne.n	801bf6c <_printf_float+0x468>
 801bf6a:	e627      	b.n	801bbbc <_printf_float+0xb8>
 801bf6c:	3401      	adds	r4, #1
 801bf6e:	68eb      	ldr	r3, [r5, #12]
 801bf70:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bf72:	1a9b      	subs	r3, r3, r2
 801bf74:	42a3      	cmp	r3, r4
 801bf76:	dcef      	bgt.n	801bf58 <_printf_float+0x454>
 801bf78:	e6f9      	b.n	801bd6e <_printf_float+0x26a>
 801bf7a:	2400      	movs	r4, #0
 801bf7c:	e7f7      	b.n	801bf6e <_printf_float+0x46a>
 801bf7e:	46c0      	nop			@ (mov r8, r8)

0801bf80 <_printf_common>:
 801bf80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bf82:	0016      	movs	r6, r2
 801bf84:	9301      	str	r3, [sp, #4]
 801bf86:	688a      	ldr	r2, [r1, #8]
 801bf88:	690b      	ldr	r3, [r1, #16]
 801bf8a:	000c      	movs	r4, r1
 801bf8c:	9000      	str	r0, [sp, #0]
 801bf8e:	4293      	cmp	r3, r2
 801bf90:	da00      	bge.n	801bf94 <_printf_common+0x14>
 801bf92:	0013      	movs	r3, r2
 801bf94:	0022      	movs	r2, r4
 801bf96:	6033      	str	r3, [r6, #0]
 801bf98:	3243      	adds	r2, #67	@ 0x43
 801bf9a:	7812      	ldrb	r2, [r2, #0]
 801bf9c:	2a00      	cmp	r2, #0
 801bf9e:	d001      	beq.n	801bfa4 <_printf_common+0x24>
 801bfa0:	3301      	adds	r3, #1
 801bfa2:	6033      	str	r3, [r6, #0]
 801bfa4:	6823      	ldr	r3, [r4, #0]
 801bfa6:	069b      	lsls	r3, r3, #26
 801bfa8:	d502      	bpl.n	801bfb0 <_printf_common+0x30>
 801bfaa:	6833      	ldr	r3, [r6, #0]
 801bfac:	3302      	adds	r3, #2
 801bfae:	6033      	str	r3, [r6, #0]
 801bfb0:	6822      	ldr	r2, [r4, #0]
 801bfb2:	2306      	movs	r3, #6
 801bfb4:	0015      	movs	r5, r2
 801bfb6:	401d      	ands	r5, r3
 801bfb8:	421a      	tst	r2, r3
 801bfba:	d027      	beq.n	801c00c <_printf_common+0x8c>
 801bfbc:	0023      	movs	r3, r4
 801bfbe:	3343      	adds	r3, #67	@ 0x43
 801bfc0:	781b      	ldrb	r3, [r3, #0]
 801bfc2:	1e5a      	subs	r2, r3, #1
 801bfc4:	4193      	sbcs	r3, r2
 801bfc6:	6822      	ldr	r2, [r4, #0]
 801bfc8:	0692      	lsls	r2, r2, #26
 801bfca:	d430      	bmi.n	801c02e <_printf_common+0xae>
 801bfcc:	0022      	movs	r2, r4
 801bfce:	9901      	ldr	r1, [sp, #4]
 801bfd0:	9800      	ldr	r0, [sp, #0]
 801bfd2:	9d08      	ldr	r5, [sp, #32]
 801bfd4:	3243      	adds	r2, #67	@ 0x43
 801bfd6:	47a8      	blx	r5
 801bfd8:	3001      	adds	r0, #1
 801bfda:	d025      	beq.n	801c028 <_printf_common+0xa8>
 801bfdc:	2206      	movs	r2, #6
 801bfde:	6823      	ldr	r3, [r4, #0]
 801bfe0:	2500      	movs	r5, #0
 801bfe2:	4013      	ands	r3, r2
 801bfe4:	2b04      	cmp	r3, #4
 801bfe6:	d105      	bne.n	801bff4 <_printf_common+0x74>
 801bfe8:	6833      	ldr	r3, [r6, #0]
 801bfea:	68e5      	ldr	r5, [r4, #12]
 801bfec:	1aed      	subs	r5, r5, r3
 801bfee:	43eb      	mvns	r3, r5
 801bff0:	17db      	asrs	r3, r3, #31
 801bff2:	401d      	ands	r5, r3
 801bff4:	68a3      	ldr	r3, [r4, #8]
 801bff6:	6922      	ldr	r2, [r4, #16]
 801bff8:	4293      	cmp	r3, r2
 801bffa:	dd01      	ble.n	801c000 <_printf_common+0x80>
 801bffc:	1a9b      	subs	r3, r3, r2
 801bffe:	18ed      	adds	r5, r5, r3
 801c000:	2600      	movs	r6, #0
 801c002:	42b5      	cmp	r5, r6
 801c004:	d120      	bne.n	801c048 <_printf_common+0xc8>
 801c006:	2000      	movs	r0, #0
 801c008:	e010      	b.n	801c02c <_printf_common+0xac>
 801c00a:	3501      	adds	r5, #1
 801c00c:	68e3      	ldr	r3, [r4, #12]
 801c00e:	6832      	ldr	r2, [r6, #0]
 801c010:	1a9b      	subs	r3, r3, r2
 801c012:	42ab      	cmp	r3, r5
 801c014:	ddd2      	ble.n	801bfbc <_printf_common+0x3c>
 801c016:	0022      	movs	r2, r4
 801c018:	2301      	movs	r3, #1
 801c01a:	9901      	ldr	r1, [sp, #4]
 801c01c:	9800      	ldr	r0, [sp, #0]
 801c01e:	9f08      	ldr	r7, [sp, #32]
 801c020:	3219      	adds	r2, #25
 801c022:	47b8      	blx	r7
 801c024:	3001      	adds	r0, #1
 801c026:	d1f0      	bne.n	801c00a <_printf_common+0x8a>
 801c028:	2001      	movs	r0, #1
 801c02a:	4240      	negs	r0, r0
 801c02c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c02e:	2030      	movs	r0, #48	@ 0x30
 801c030:	18e1      	adds	r1, r4, r3
 801c032:	3143      	adds	r1, #67	@ 0x43
 801c034:	7008      	strb	r0, [r1, #0]
 801c036:	0021      	movs	r1, r4
 801c038:	1c5a      	adds	r2, r3, #1
 801c03a:	3145      	adds	r1, #69	@ 0x45
 801c03c:	7809      	ldrb	r1, [r1, #0]
 801c03e:	18a2      	adds	r2, r4, r2
 801c040:	3243      	adds	r2, #67	@ 0x43
 801c042:	3302      	adds	r3, #2
 801c044:	7011      	strb	r1, [r2, #0]
 801c046:	e7c1      	b.n	801bfcc <_printf_common+0x4c>
 801c048:	0022      	movs	r2, r4
 801c04a:	2301      	movs	r3, #1
 801c04c:	9901      	ldr	r1, [sp, #4]
 801c04e:	9800      	ldr	r0, [sp, #0]
 801c050:	9f08      	ldr	r7, [sp, #32]
 801c052:	321a      	adds	r2, #26
 801c054:	47b8      	blx	r7
 801c056:	3001      	adds	r0, #1
 801c058:	d0e6      	beq.n	801c028 <_printf_common+0xa8>
 801c05a:	3601      	adds	r6, #1
 801c05c:	e7d1      	b.n	801c002 <_printf_common+0x82>
	...

0801c060 <_printf_i>:
 801c060:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c062:	b08b      	sub	sp, #44	@ 0x2c
 801c064:	9206      	str	r2, [sp, #24]
 801c066:	000a      	movs	r2, r1
 801c068:	3243      	adds	r2, #67	@ 0x43
 801c06a:	9307      	str	r3, [sp, #28]
 801c06c:	9005      	str	r0, [sp, #20]
 801c06e:	9203      	str	r2, [sp, #12]
 801c070:	7e0a      	ldrb	r2, [r1, #24]
 801c072:	000c      	movs	r4, r1
 801c074:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c076:	2a78      	cmp	r2, #120	@ 0x78
 801c078:	d809      	bhi.n	801c08e <_printf_i+0x2e>
 801c07a:	2a62      	cmp	r2, #98	@ 0x62
 801c07c:	d80b      	bhi.n	801c096 <_printf_i+0x36>
 801c07e:	2a00      	cmp	r2, #0
 801c080:	d100      	bne.n	801c084 <_printf_i+0x24>
 801c082:	e0bc      	b.n	801c1fe <_printf_i+0x19e>
 801c084:	497b      	ldr	r1, [pc, #492]	@ (801c274 <_printf_i+0x214>)
 801c086:	9104      	str	r1, [sp, #16]
 801c088:	2a58      	cmp	r2, #88	@ 0x58
 801c08a:	d100      	bne.n	801c08e <_printf_i+0x2e>
 801c08c:	e090      	b.n	801c1b0 <_printf_i+0x150>
 801c08e:	0025      	movs	r5, r4
 801c090:	3542      	adds	r5, #66	@ 0x42
 801c092:	702a      	strb	r2, [r5, #0]
 801c094:	e022      	b.n	801c0dc <_printf_i+0x7c>
 801c096:	0010      	movs	r0, r2
 801c098:	3863      	subs	r0, #99	@ 0x63
 801c09a:	2815      	cmp	r0, #21
 801c09c:	d8f7      	bhi.n	801c08e <_printf_i+0x2e>
 801c09e:	f7e4 f877 	bl	8000190 <__gnu_thumb1_case_shi>
 801c0a2:	0016      	.short	0x0016
 801c0a4:	fff6001f 	.word	0xfff6001f
 801c0a8:	fff6fff6 	.word	0xfff6fff6
 801c0ac:	001ffff6 	.word	0x001ffff6
 801c0b0:	fff6fff6 	.word	0xfff6fff6
 801c0b4:	fff6fff6 	.word	0xfff6fff6
 801c0b8:	003600a1 	.word	0x003600a1
 801c0bc:	fff60080 	.word	0xfff60080
 801c0c0:	00b2fff6 	.word	0x00b2fff6
 801c0c4:	0036fff6 	.word	0x0036fff6
 801c0c8:	fff6fff6 	.word	0xfff6fff6
 801c0cc:	0084      	.short	0x0084
 801c0ce:	0025      	movs	r5, r4
 801c0d0:	681a      	ldr	r2, [r3, #0]
 801c0d2:	3542      	adds	r5, #66	@ 0x42
 801c0d4:	1d11      	adds	r1, r2, #4
 801c0d6:	6019      	str	r1, [r3, #0]
 801c0d8:	6813      	ldr	r3, [r2, #0]
 801c0da:	702b      	strb	r3, [r5, #0]
 801c0dc:	2301      	movs	r3, #1
 801c0de:	e0a0      	b.n	801c222 <_printf_i+0x1c2>
 801c0e0:	6818      	ldr	r0, [r3, #0]
 801c0e2:	6809      	ldr	r1, [r1, #0]
 801c0e4:	1d02      	adds	r2, r0, #4
 801c0e6:	060d      	lsls	r5, r1, #24
 801c0e8:	d50b      	bpl.n	801c102 <_printf_i+0xa2>
 801c0ea:	6806      	ldr	r6, [r0, #0]
 801c0ec:	601a      	str	r2, [r3, #0]
 801c0ee:	2e00      	cmp	r6, #0
 801c0f0:	da03      	bge.n	801c0fa <_printf_i+0x9a>
 801c0f2:	232d      	movs	r3, #45	@ 0x2d
 801c0f4:	9a03      	ldr	r2, [sp, #12]
 801c0f6:	4276      	negs	r6, r6
 801c0f8:	7013      	strb	r3, [r2, #0]
 801c0fa:	4b5e      	ldr	r3, [pc, #376]	@ (801c274 <_printf_i+0x214>)
 801c0fc:	270a      	movs	r7, #10
 801c0fe:	9304      	str	r3, [sp, #16]
 801c100:	e018      	b.n	801c134 <_printf_i+0xd4>
 801c102:	6806      	ldr	r6, [r0, #0]
 801c104:	601a      	str	r2, [r3, #0]
 801c106:	0649      	lsls	r1, r1, #25
 801c108:	d5f1      	bpl.n	801c0ee <_printf_i+0x8e>
 801c10a:	b236      	sxth	r6, r6
 801c10c:	e7ef      	b.n	801c0ee <_printf_i+0x8e>
 801c10e:	6808      	ldr	r0, [r1, #0]
 801c110:	6819      	ldr	r1, [r3, #0]
 801c112:	c940      	ldmia	r1!, {r6}
 801c114:	0605      	lsls	r5, r0, #24
 801c116:	d402      	bmi.n	801c11e <_printf_i+0xbe>
 801c118:	0640      	lsls	r0, r0, #25
 801c11a:	d500      	bpl.n	801c11e <_printf_i+0xbe>
 801c11c:	b2b6      	uxth	r6, r6
 801c11e:	6019      	str	r1, [r3, #0]
 801c120:	4b54      	ldr	r3, [pc, #336]	@ (801c274 <_printf_i+0x214>)
 801c122:	270a      	movs	r7, #10
 801c124:	9304      	str	r3, [sp, #16]
 801c126:	2a6f      	cmp	r2, #111	@ 0x6f
 801c128:	d100      	bne.n	801c12c <_printf_i+0xcc>
 801c12a:	3f02      	subs	r7, #2
 801c12c:	0023      	movs	r3, r4
 801c12e:	2200      	movs	r2, #0
 801c130:	3343      	adds	r3, #67	@ 0x43
 801c132:	701a      	strb	r2, [r3, #0]
 801c134:	6863      	ldr	r3, [r4, #4]
 801c136:	60a3      	str	r3, [r4, #8]
 801c138:	2b00      	cmp	r3, #0
 801c13a:	db03      	blt.n	801c144 <_printf_i+0xe4>
 801c13c:	2104      	movs	r1, #4
 801c13e:	6822      	ldr	r2, [r4, #0]
 801c140:	438a      	bics	r2, r1
 801c142:	6022      	str	r2, [r4, #0]
 801c144:	2e00      	cmp	r6, #0
 801c146:	d102      	bne.n	801c14e <_printf_i+0xee>
 801c148:	9d03      	ldr	r5, [sp, #12]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d00c      	beq.n	801c168 <_printf_i+0x108>
 801c14e:	9d03      	ldr	r5, [sp, #12]
 801c150:	0030      	movs	r0, r6
 801c152:	0039      	movs	r1, r7
 801c154:	f7e4 f8ac 	bl	80002b0 <__aeabi_uidivmod>
 801c158:	9b04      	ldr	r3, [sp, #16]
 801c15a:	3d01      	subs	r5, #1
 801c15c:	5c5b      	ldrb	r3, [r3, r1]
 801c15e:	702b      	strb	r3, [r5, #0]
 801c160:	0033      	movs	r3, r6
 801c162:	0006      	movs	r6, r0
 801c164:	429f      	cmp	r7, r3
 801c166:	d9f3      	bls.n	801c150 <_printf_i+0xf0>
 801c168:	2f08      	cmp	r7, #8
 801c16a:	d109      	bne.n	801c180 <_printf_i+0x120>
 801c16c:	6823      	ldr	r3, [r4, #0]
 801c16e:	07db      	lsls	r3, r3, #31
 801c170:	d506      	bpl.n	801c180 <_printf_i+0x120>
 801c172:	6862      	ldr	r2, [r4, #4]
 801c174:	6923      	ldr	r3, [r4, #16]
 801c176:	429a      	cmp	r2, r3
 801c178:	dc02      	bgt.n	801c180 <_printf_i+0x120>
 801c17a:	2330      	movs	r3, #48	@ 0x30
 801c17c:	3d01      	subs	r5, #1
 801c17e:	702b      	strb	r3, [r5, #0]
 801c180:	9b03      	ldr	r3, [sp, #12]
 801c182:	1b5b      	subs	r3, r3, r5
 801c184:	6123      	str	r3, [r4, #16]
 801c186:	9b07      	ldr	r3, [sp, #28]
 801c188:	0021      	movs	r1, r4
 801c18a:	9300      	str	r3, [sp, #0]
 801c18c:	9805      	ldr	r0, [sp, #20]
 801c18e:	9b06      	ldr	r3, [sp, #24]
 801c190:	aa09      	add	r2, sp, #36	@ 0x24
 801c192:	f7ff fef5 	bl	801bf80 <_printf_common>
 801c196:	3001      	adds	r0, #1
 801c198:	d148      	bne.n	801c22c <_printf_i+0x1cc>
 801c19a:	2001      	movs	r0, #1
 801c19c:	4240      	negs	r0, r0
 801c19e:	b00b      	add	sp, #44	@ 0x2c
 801c1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c1a2:	2220      	movs	r2, #32
 801c1a4:	6809      	ldr	r1, [r1, #0]
 801c1a6:	430a      	orrs	r2, r1
 801c1a8:	6022      	str	r2, [r4, #0]
 801c1aa:	2278      	movs	r2, #120	@ 0x78
 801c1ac:	4932      	ldr	r1, [pc, #200]	@ (801c278 <_printf_i+0x218>)
 801c1ae:	9104      	str	r1, [sp, #16]
 801c1b0:	0021      	movs	r1, r4
 801c1b2:	3145      	adds	r1, #69	@ 0x45
 801c1b4:	700a      	strb	r2, [r1, #0]
 801c1b6:	6819      	ldr	r1, [r3, #0]
 801c1b8:	6822      	ldr	r2, [r4, #0]
 801c1ba:	c940      	ldmia	r1!, {r6}
 801c1bc:	0610      	lsls	r0, r2, #24
 801c1be:	d402      	bmi.n	801c1c6 <_printf_i+0x166>
 801c1c0:	0650      	lsls	r0, r2, #25
 801c1c2:	d500      	bpl.n	801c1c6 <_printf_i+0x166>
 801c1c4:	b2b6      	uxth	r6, r6
 801c1c6:	6019      	str	r1, [r3, #0]
 801c1c8:	07d3      	lsls	r3, r2, #31
 801c1ca:	d502      	bpl.n	801c1d2 <_printf_i+0x172>
 801c1cc:	2320      	movs	r3, #32
 801c1ce:	4313      	orrs	r3, r2
 801c1d0:	6023      	str	r3, [r4, #0]
 801c1d2:	2e00      	cmp	r6, #0
 801c1d4:	d001      	beq.n	801c1da <_printf_i+0x17a>
 801c1d6:	2710      	movs	r7, #16
 801c1d8:	e7a8      	b.n	801c12c <_printf_i+0xcc>
 801c1da:	2220      	movs	r2, #32
 801c1dc:	6823      	ldr	r3, [r4, #0]
 801c1de:	4393      	bics	r3, r2
 801c1e0:	6023      	str	r3, [r4, #0]
 801c1e2:	e7f8      	b.n	801c1d6 <_printf_i+0x176>
 801c1e4:	681a      	ldr	r2, [r3, #0]
 801c1e6:	680d      	ldr	r5, [r1, #0]
 801c1e8:	1d10      	adds	r0, r2, #4
 801c1ea:	6949      	ldr	r1, [r1, #20]
 801c1ec:	6018      	str	r0, [r3, #0]
 801c1ee:	6813      	ldr	r3, [r2, #0]
 801c1f0:	062e      	lsls	r6, r5, #24
 801c1f2:	d501      	bpl.n	801c1f8 <_printf_i+0x198>
 801c1f4:	6019      	str	r1, [r3, #0]
 801c1f6:	e002      	b.n	801c1fe <_printf_i+0x19e>
 801c1f8:	066d      	lsls	r5, r5, #25
 801c1fa:	d5fb      	bpl.n	801c1f4 <_printf_i+0x194>
 801c1fc:	8019      	strh	r1, [r3, #0]
 801c1fe:	2300      	movs	r3, #0
 801c200:	9d03      	ldr	r5, [sp, #12]
 801c202:	6123      	str	r3, [r4, #16]
 801c204:	e7bf      	b.n	801c186 <_printf_i+0x126>
 801c206:	681a      	ldr	r2, [r3, #0]
 801c208:	1d11      	adds	r1, r2, #4
 801c20a:	6019      	str	r1, [r3, #0]
 801c20c:	6815      	ldr	r5, [r2, #0]
 801c20e:	2100      	movs	r1, #0
 801c210:	0028      	movs	r0, r5
 801c212:	6862      	ldr	r2, [r4, #4]
 801c214:	f000 fb7b 	bl	801c90e <memchr>
 801c218:	2800      	cmp	r0, #0
 801c21a:	d001      	beq.n	801c220 <_printf_i+0x1c0>
 801c21c:	1b40      	subs	r0, r0, r5
 801c21e:	6060      	str	r0, [r4, #4]
 801c220:	6863      	ldr	r3, [r4, #4]
 801c222:	6123      	str	r3, [r4, #16]
 801c224:	2300      	movs	r3, #0
 801c226:	9a03      	ldr	r2, [sp, #12]
 801c228:	7013      	strb	r3, [r2, #0]
 801c22a:	e7ac      	b.n	801c186 <_printf_i+0x126>
 801c22c:	002a      	movs	r2, r5
 801c22e:	6923      	ldr	r3, [r4, #16]
 801c230:	9906      	ldr	r1, [sp, #24]
 801c232:	9805      	ldr	r0, [sp, #20]
 801c234:	9d07      	ldr	r5, [sp, #28]
 801c236:	47a8      	blx	r5
 801c238:	3001      	adds	r0, #1
 801c23a:	d0ae      	beq.n	801c19a <_printf_i+0x13a>
 801c23c:	6823      	ldr	r3, [r4, #0]
 801c23e:	079b      	lsls	r3, r3, #30
 801c240:	d415      	bmi.n	801c26e <_printf_i+0x20e>
 801c242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c244:	68e0      	ldr	r0, [r4, #12]
 801c246:	4298      	cmp	r0, r3
 801c248:	daa9      	bge.n	801c19e <_printf_i+0x13e>
 801c24a:	0018      	movs	r0, r3
 801c24c:	e7a7      	b.n	801c19e <_printf_i+0x13e>
 801c24e:	0022      	movs	r2, r4
 801c250:	2301      	movs	r3, #1
 801c252:	9906      	ldr	r1, [sp, #24]
 801c254:	9805      	ldr	r0, [sp, #20]
 801c256:	9e07      	ldr	r6, [sp, #28]
 801c258:	3219      	adds	r2, #25
 801c25a:	47b0      	blx	r6
 801c25c:	3001      	adds	r0, #1
 801c25e:	d09c      	beq.n	801c19a <_printf_i+0x13a>
 801c260:	3501      	adds	r5, #1
 801c262:	68e3      	ldr	r3, [r4, #12]
 801c264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c266:	1a9b      	subs	r3, r3, r2
 801c268:	42ab      	cmp	r3, r5
 801c26a:	dcf0      	bgt.n	801c24e <_printf_i+0x1ee>
 801c26c:	e7e9      	b.n	801c242 <_printf_i+0x1e2>
 801c26e:	2500      	movs	r5, #0
 801c270:	e7f7      	b.n	801c262 <_printf_i+0x202>
 801c272:	46c0      	nop			@ (mov r8, r8)
 801c274:	0802120b 	.word	0x0802120b
 801c278:	0802121c 	.word	0x0802121c

0801c27c <std>:
 801c27c:	2300      	movs	r3, #0
 801c27e:	b510      	push	{r4, lr}
 801c280:	0004      	movs	r4, r0
 801c282:	6003      	str	r3, [r0, #0]
 801c284:	6043      	str	r3, [r0, #4]
 801c286:	6083      	str	r3, [r0, #8]
 801c288:	8181      	strh	r1, [r0, #12]
 801c28a:	6643      	str	r3, [r0, #100]	@ 0x64
 801c28c:	81c2      	strh	r2, [r0, #14]
 801c28e:	6103      	str	r3, [r0, #16]
 801c290:	6143      	str	r3, [r0, #20]
 801c292:	6183      	str	r3, [r0, #24]
 801c294:	0019      	movs	r1, r3
 801c296:	2208      	movs	r2, #8
 801c298:	305c      	adds	r0, #92	@ 0x5c
 801c29a:	f000 fa67 	bl	801c76c <memset>
 801c29e:	4b0b      	ldr	r3, [pc, #44]	@ (801c2cc <std+0x50>)
 801c2a0:	6224      	str	r4, [r4, #32]
 801c2a2:	6263      	str	r3, [r4, #36]	@ 0x24
 801c2a4:	4b0a      	ldr	r3, [pc, #40]	@ (801c2d0 <std+0x54>)
 801c2a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c2a8:	4b0a      	ldr	r3, [pc, #40]	@ (801c2d4 <std+0x58>)
 801c2aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c2ac:	4b0a      	ldr	r3, [pc, #40]	@ (801c2d8 <std+0x5c>)
 801c2ae:	6323      	str	r3, [r4, #48]	@ 0x30
 801c2b0:	4b0a      	ldr	r3, [pc, #40]	@ (801c2dc <std+0x60>)
 801c2b2:	429c      	cmp	r4, r3
 801c2b4:	d005      	beq.n	801c2c2 <std+0x46>
 801c2b6:	4b0a      	ldr	r3, [pc, #40]	@ (801c2e0 <std+0x64>)
 801c2b8:	429c      	cmp	r4, r3
 801c2ba:	d002      	beq.n	801c2c2 <std+0x46>
 801c2bc:	4b09      	ldr	r3, [pc, #36]	@ (801c2e4 <std+0x68>)
 801c2be:	429c      	cmp	r4, r3
 801c2c0:	d103      	bne.n	801c2ca <std+0x4e>
 801c2c2:	0020      	movs	r0, r4
 801c2c4:	3058      	adds	r0, #88	@ 0x58
 801c2c6:	f000 fb1f 	bl	801c908 <__retarget_lock_init_recursive>
 801c2ca:	bd10      	pop	{r4, pc}
 801c2cc:	0801c525 	.word	0x0801c525
 801c2d0:	0801c54d 	.word	0x0801c54d
 801c2d4:	0801c585 	.word	0x0801c585
 801c2d8:	0801c5b1 	.word	0x0801c5b1
 801c2dc:	20003778 	.word	0x20003778
 801c2e0:	200037e0 	.word	0x200037e0
 801c2e4:	20003848 	.word	0x20003848

0801c2e8 <stdio_exit_handler>:
 801c2e8:	b510      	push	{r4, lr}
 801c2ea:	4a03      	ldr	r2, [pc, #12]	@ (801c2f8 <stdio_exit_handler+0x10>)
 801c2ec:	4903      	ldr	r1, [pc, #12]	@ (801c2fc <stdio_exit_handler+0x14>)
 801c2ee:	4804      	ldr	r0, [pc, #16]	@ (801c300 <stdio_exit_handler+0x18>)
 801c2f0:	f000 f86c 	bl	801c3cc <_fwalk_sglue>
 801c2f4:	bd10      	pop	{r4, pc}
 801c2f6:	46c0      	nop			@ (mov r8, r8)
 801c2f8:	2000024c 	.word	0x2000024c
 801c2fc:	0801ef2d 	.word	0x0801ef2d
 801c300:	200003c8 	.word	0x200003c8

0801c304 <cleanup_stdio>:
 801c304:	6841      	ldr	r1, [r0, #4]
 801c306:	4b0b      	ldr	r3, [pc, #44]	@ (801c334 <cleanup_stdio+0x30>)
 801c308:	b510      	push	{r4, lr}
 801c30a:	0004      	movs	r4, r0
 801c30c:	4299      	cmp	r1, r3
 801c30e:	d001      	beq.n	801c314 <cleanup_stdio+0x10>
 801c310:	f002 fe0c 	bl	801ef2c <_fflush_r>
 801c314:	68a1      	ldr	r1, [r4, #8]
 801c316:	4b08      	ldr	r3, [pc, #32]	@ (801c338 <cleanup_stdio+0x34>)
 801c318:	4299      	cmp	r1, r3
 801c31a:	d002      	beq.n	801c322 <cleanup_stdio+0x1e>
 801c31c:	0020      	movs	r0, r4
 801c31e:	f002 fe05 	bl	801ef2c <_fflush_r>
 801c322:	68e1      	ldr	r1, [r4, #12]
 801c324:	4b05      	ldr	r3, [pc, #20]	@ (801c33c <cleanup_stdio+0x38>)
 801c326:	4299      	cmp	r1, r3
 801c328:	d002      	beq.n	801c330 <cleanup_stdio+0x2c>
 801c32a:	0020      	movs	r0, r4
 801c32c:	f002 fdfe 	bl	801ef2c <_fflush_r>
 801c330:	bd10      	pop	{r4, pc}
 801c332:	46c0      	nop			@ (mov r8, r8)
 801c334:	20003778 	.word	0x20003778
 801c338:	200037e0 	.word	0x200037e0
 801c33c:	20003848 	.word	0x20003848

0801c340 <global_stdio_init.part.0>:
 801c340:	b510      	push	{r4, lr}
 801c342:	4b09      	ldr	r3, [pc, #36]	@ (801c368 <global_stdio_init.part.0+0x28>)
 801c344:	4a09      	ldr	r2, [pc, #36]	@ (801c36c <global_stdio_init.part.0+0x2c>)
 801c346:	2104      	movs	r1, #4
 801c348:	601a      	str	r2, [r3, #0]
 801c34a:	4809      	ldr	r0, [pc, #36]	@ (801c370 <global_stdio_init.part.0+0x30>)
 801c34c:	2200      	movs	r2, #0
 801c34e:	f7ff ff95 	bl	801c27c <std>
 801c352:	2201      	movs	r2, #1
 801c354:	2109      	movs	r1, #9
 801c356:	4807      	ldr	r0, [pc, #28]	@ (801c374 <global_stdio_init.part.0+0x34>)
 801c358:	f7ff ff90 	bl	801c27c <std>
 801c35c:	2202      	movs	r2, #2
 801c35e:	2112      	movs	r1, #18
 801c360:	4805      	ldr	r0, [pc, #20]	@ (801c378 <global_stdio_init.part.0+0x38>)
 801c362:	f7ff ff8b 	bl	801c27c <std>
 801c366:	bd10      	pop	{r4, pc}
 801c368:	200038b0 	.word	0x200038b0
 801c36c:	0801c2e9 	.word	0x0801c2e9
 801c370:	20003778 	.word	0x20003778
 801c374:	200037e0 	.word	0x200037e0
 801c378:	20003848 	.word	0x20003848

0801c37c <__sfp_lock_acquire>:
 801c37c:	b510      	push	{r4, lr}
 801c37e:	4802      	ldr	r0, [pc, #8]	@ (801c388 <__sfp_lock_acquire+0xc>)
 801c380:	f000 fac3 	bl	801c90a <__retarget_lock_acquire_recursive>
 801c384:	bd10      	pop	{r4, pc}
 801c386:	46c0      	nop			@ (mov r8, r8)
 801c388:	200038b9 	.word	0x200038b9

0801c38c <__sfp_lock_release>:
 801c38c:	b510      	push	{r4, lr}
 801c38e:	4802      	ldr	r0, [pc, #8]	@ (801c398 <__sfp_lock_release+0xc>)
 801c390:	f000 fabc 	bl	801c90c <__retarget_lock_release_recursive>
 801c394:	bd10      	pop	{r4, pc}
 801c396:	46c0      	nop			@ (mov r8, r8)
 801c398:	200038b9 	.word	0x200038b9

0801c39c <__sinit>:
 801c39c:	b510      	push	{r4, lr}
 801c39e:	0004      	movs	r4, r0
 801c3a0:	f7ff ffec 	bl	801c37c <__sfp_lock_acquire>
 801c3a4:	6a23      	ldr	r3, [r4, #32]
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d002      	beq.n	801c3b0 <__sinit+0x14>
 801c3aa:	f7ff ffef 	bl	801c38c <__sfp_lock_release>
 801c3ae:	bd10      	pop	{r4, pc}
 801c3b0:	4b04      	ldr	r3, [pc, #16]	@ (801c3c4 <__sinit+0x28>)
 801c3b2:	6223      	str	r3, [r4, #32]
 801c3b4:	4b04      	ldr	r3, [pc, #16]	@ (801c3c8 <__sinit+0x2c>)
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d1f6      	bne.n	801c3aa <__sinit+0xe>
 801c3bc:	f7ff ffc0 	bl	801c340 <global_stdio_init.part.0>
 801c3c0:	e7f3      	b.n	801c3aa <__sinit+0xe>
 801c3c2:	46c0      	nop			@ (mov r8, r8)
 801c3c4:	0801c305 	.word	0x0801c305
 801c3c8:	200038b0 	.word	0x200038b0

0801c3cc <_fwalk_sglue>:
 801c3cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c3ce:	0014      	movs	r4, r2
 801c3d0:	2600      	movs	r6, #0
 801c3d2:	9000      	str	r0, [sp, #0]
 801c3d4:	9101      	str	r1, [sp, #4]
 801c3d6:	68a5      	ldr	r5, [r4, #8]
 801c3d8:	6867      	ldr	r7, [r4, #4]
 801c3da:	3f01      	subs	r7, #1
 801c3dc:	d504      	bpl.n	801c3e8 <_fwalk_sglue+0x1c>
 801c3de:	6824      	ldr	r4, [r4, #0]
 801c3e0:	2c00      	cmp	r4, #0
 801c3e2:	d1f8      	bne.n	801c3d6 <_fwalk_sglue+0xa>
 801c3e4:	0030      	movs	r0, r6
 801c3e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c3e8:	89ab      	ldrh	r3, [r5, #12]
 801c3ea:	2b01      	cmp	r3, #1
 801c3ec:	d908      	bls.n	801c400 <_fwalk_sglue+0x34>
 801c3ee:	220e      	movs	r2, #14
 801c3f0:	5eab      	ldrsh	r3, [r5, r2]
 801c3f2:	3301      	adds	r3, #1
 801c3f4:	d004      	beq.n	801c400 <_fwalk_sglue+0x34>
 801c3f6:	0029      	movs	r1, r5
 801c3f8:	9800      	ldr	r0, [sp, #0]
 801c3fa:	9b01      	ldr	r3, [sp, #4]
 801c3fc:	4798      	blx	r3
 801c3fe:	4306      	orrs	r6, r0
 801c400:	3568      	adds	r5, #104	@ 0x68
 801c402:	e7ea      	b.n	801c3da <_fwalk_sglue+0xe>

0801c404 <iprintf>:
 801c404:	b40f      	push	{r0, r1, r2, r3}
 801c406:	b507      	push	{r0, r1, r2, lr}
 801c408:	4905      	ldr	r1, [pc, #20]	@ (801c420 <iprintf+0x1c>)
 801c40a:	ab04      	add	r3, sp, #16
 801c40c:	6808      	ldr	r0, [r1, #0]
 801c40e:	cb04      	ldmia	r3!, {r2}
 801c410:	6881      	ldr	r1, [r0, #8]
 801c412:	9301      	str	r3, [sp, #4]
 801c414:	f002 fbe8 	bl	801ebe8 <_vfiprintf_r>
 801c418:	b003      	add	sp, #12
 801c41a:	bc08      	pop	{r3}
 801c41c:	b004      	add	sp, #16
 801c41e:	4718      	bx	r3
 801c420:	200003c4 	.word	0x200003c4

0801c424 <_puts_r>:
 801c424:	6a03      	ldr	r3, [r0, #32]
 801c426:	b570      	push	{r4, r5, r6, lr}
 801c428:	0005      	movs	r5, r0
 801c42a:	000e      	movs	r6, r1
 801c42c:	6884      	ldr	r4, [r0, #8]
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d101      	bne.n	801c436 <_puts_r+0x12>
 801c432:	f7ff ffb3 	bl	801c39c <__sinit>
 801c436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c438:	07db      	lsls	r3, r3, #31
 801c43a:	d405      	bmi.n	801c448 <_puts_r+0x24>
 801c43c:	89a3      	ldrh	r3, [r4, #12]
 801c43e:	059b      	lsls	r3, r3, #22
 801c440:	d402      	bmi.n	801c448 <_puts_r+0x24>
 801c442:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c444:	f000 fa61 	bl	801c90a <__retarget_lock_acquire_recursive>
 801c448:	89a3      	ldrh	r3, [r4, #12]
 801c44a:	071b      	lsls	r3, r3, #28
 801c44c:	d502      	bpl.n	801c454 <_puts_r+0x30>
 801c44e:	6923      	ldr	r3, [r4, #16]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d11f      	bne.n	801c494 <_puts_r+0x70>
 801c454:	0021      	movs	r1, r4
 801c456:	0028      	movs	r0, r5
 801c458:	f000 f92a 	bl	801c6b0 <__swsetup_r>
 801c45c:	2800      	cmp	r0, #0
 801c45e:	d019      	beq.n	801c494 <_puts_r+0x70>
 801c460:	2501      	movs	r5, #1
 801c462:	426d      	negs	r5, r5
 801c464:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c466:	07db      	lsls	r3, r3, #31
 801c468:	d405      	bmi.n	801c476 <_puts_r+0x52>
 801c46a:	89a3      	ldrh	r3, [r4, #12]
 801c46c:	059b      	lsls	r3, r3, #22
 801c46e:	d402      	bmi.n	801c476 <_puts_r+0x52>
 801c470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c472:	f000 fa4b 	bl	801c90c <__retarget_lock_release_recursive>
 801c476:	0028      	movs	r0, r5
 801c478:	bd70      	pop	{r4, r5, r6, pc}
 801c47a:	3601      	adds	r6, #1
 801c47c:	60a3      	str	r3, [r4, #8]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	da04      	bge.n	801c48c <_puts_r+0x68>
 801c482:	69a2      	ldr	r2, [r4, #24]
 801c484:	429a      	cmp	r2, r3
 801c486:	dc16      	bgt.n	801c4b6 <_puts_r+0x92>
 801c488:	290a      	cmp	r1, #10
 801c48a:	d014      	beq.n	801c4b6 <_puts_r+0x92>
 801c48c:	6823      	ldr	r3, [r4, #0]
 801c48e:	1c5a      	adds	r2, r3, #1
 801c490:	6022      	str	r2, [r4, #0]
 801c492:	7019      	strb	r1, [r3, #0]
 801c494:	68a3      	ldr	r3, [r4, #8]
 801c496:	7831      	ldrb	r1, [r6, #0]
 801c498:	3b01      	subs	r3, #1
 801c49a:	2900      	cmp	r1, #0
 801c49c:	d1ed      	bne.n	801c47a <_puts_r+0x56>
 801c49e:	60a3      	str	r3, [r4, #8]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	da0f      	bge.n	801c4c4 <_puts_r+0xa0>
 801c4a4:	0022      	movs	r2, r4
 801c4a6:	0028      	movs	r0, r5
 801c4a8:	310a      	adds	r1, #10
 801c4aa:	f000 f8bf 	bl	801c62c <__swbuf_r>
 801c4ae:	3001      	adds	r0, #1
 801c4b0:	d0d6      	beq.n	801c460 <_puts_r+0x3c>
 801c4b2:	250a      	movs	r5, #10
 801c4b4:	e7d6      	b.n	801c464 <_puts_r+0x40>
 801c4b6:	0022      	movs	r2, r4
 801c4b8:	0028      	movs	r0, r5
 801c4ba:	f000 f8b7 	bl	801c62c <__swbuf_r>
 801c4be:	3001      	adds	r0, #1
 801c4c0:	d1e8      	bne.n	801c494 <_puts_r+0x70>
 801c4c2:	e7cd      	b.n	801c460 <_puts_r+0x3c>
 801c4c4:	6823      	ldr	r3, [r4, #0]
 801c4c6:	1c5a      	adds	r2, r3, #1
 801c4c8:	6022      	str	r2, [r4, #0]
 801c4ca:	220a      	movs	r2, #10
 801c4cc:	701a      	strb	r2, [r3, #0]
 801c4ce:	e7f0      	b.n	801c4b2 <_puts_r+0x8e>

0801c4d0 <puts>:
 801c4d0:	b510      	push	{r4, lr}
 801c4d2:	4b03      	ldr	r3, [pc, #12]	@ (801c4e0 <puts+0x10>)
 801c4d4:	0001      	movs	r1, r0
 801c4d6:	6818      	ldr	r0, [r3, #0]
 801c4d8:	f7ff ffa4 	bl	801c424 <_puts_r>
 801c4dc:	bd10      	pop	{r4, pc}
 801c4de:	46c0      	nop			@ (mov r8, r8)
 801c4e0:	200003c4 	.word	0x200003c4

0801c4e4 <siprintf>:
 801c4e4:	b40e      	push	{r1, r2, r3}
 801c4e6:	b500      	push	{lr}
 801c4e8:	490b      	ldr	r1, [pc, #44]	@ (801c518 <siprintf+0x34>)
 801c4ea:	b09c      	sub	sp, #112	@ 0x70
 801c4ec:	ab1d      	add	r3, sp, #116	@ 0x74
 801c4ee:	9002      	str	r0, [sp, #8]
 801c4f0:	9006      	str	r0, [sp, #24]
 801c4f2:	9107      	str	r1, [sp, #28]
 801c4f4:	9104      	str	r1, [sp, #16]
 801c4f6:	4809      	ldr	r0, [pc, #36]	@ (801c51c <siprintf+0x38>)
 801c4f8:	4909      	ldr	r1, [pc, #36]	@ (801c520 <siprintf+0x3c>)
 801c4fa:	cb04      	ldmia	r3!, {r2}
 801c4fc:	9105      	str	r1, [sp, #20]
 801c4fe:	6800      	ldr	r0, [r0, #0]
 801c500:	a902      	add	r1, sp, #8
 801c502:	9301      	str	r3, [sp, #4]
 801c504:	f002 fa4a 	bl	801e99c <_svfiprintf_r>
 801c508:	2200      	movs	r2, #0
 801c50a:	9b02      	ldr	r3, [sp, #8]
 801c50c:	701a      	strb	r2, [r3, #0]
 801c50e:	b01c      	add	sp, #112	@ 0x70
 801c510:	bc08      	pop	{r3}
 801c512:	b003      	add	sp, #12
 801c514:	4718      	bx	r3
 801c516:	46c0      	nop			@ (mov r8, r8)
 801c518:	7fffffff 	.word	0x7fffffff
 801c51c:	200003c4 	.word	0x200003c4
 801c520:	ffff0208 	.word	0xffff0208

0801c524 <__sread>:
 801c524:	b570      	push	{r4, r5, r6, lr}
 801c526:	000c      	movs	r4, r1
 801c528:	250e      	movs	r5, #14
 801c52a:	5f49      	ldrsh	r1, [r1, r5]
 801c52c:	f000 f99a 	bl	801c864 <_read_r>
 801c530:	2800      	cmp	r0, #0
 801c532:	db03      	blt.n	801c53c <__sread+0x18>
 801c534:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801c536:	181b      	adds	r3, r3, r0
 801c538:	6563      	str	r3, [r4, #84]	@ 0x54
 801c53a:	bd70      	pop	{r4, r5, r6, pc}
 801c53c:	89a3      	ldrh	r3, [r4, #12]
 801c53e:	4a02      	ldr	r2, [pc, #8]	@ (801c548 <__sread+0x24>)
 801c540:	4013      	ands	r3, r2
 801c542:	81a3      	strh	r3, [r4, #12]
 801c544:	e7f9      	b.n	801c53a <__sread+0x16>
 801c546:	46c0      	nop			@ (mov r8, r8)
 801c548:	ffffefff 	.word	0xffffefff

0801c54c <__swrite>:
 801c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c54e:	001f      	movs	r7, r3
 801c550:	898b      	ldrh	r3, [r1, #12]
 801c552:	0005      	movs	r5, r0
 801c554:	000c      	movs	r4, r1
 801c556:	0016      	movs	r6, r2
 801c558:	05db      	lsls	r3, r3, #23
 801c55a:	d505      	bpl.n	801c568 <__swrite+0x1c>
 801c55c:	230e      	movs	r3, #14
 801c55e:	5ec9      	ldrsh	r1, [r1, r3]
 801c560:	2200      	movs	r2, #0
 801c562:	2302      	movs	r3, #2
 801c564:	f000 f96a 	bl	801c83c <_lseek_r>
 801c568:	89a3      	ldrh	r3, [r4, #12]
 801c56a:	4a05      	ldr	r2, [pc, #20]	@ (801c580 <__swrite+0x34>)
 801c56c:	0028      	movs	r0, r5
 801c56e:	4013      	ands	r3, r2
 801c570:	81a3      	strh	r3, [r4, #12]
 801c572:	0032      	movs	r2, r6
 801c574:	230e      	movs	r3, #14
 801c576:	5ee1      	ldrsh	r1, [r4, r3]
 801c578:	003b      	movs	r3, r7
 801c57a:	f000 f987 	bl	801c88c <_write_r>
 801c57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c580:	ffffefff 	.word	0xffffefff

0801c584 <__sseek>:
 801c584:	b570      	push	{r4, r5, r6, lr}
 801c586:	000c      	movs	r4, r1
 801c588:	250e      	movs	r5, #14
 801c58a:	5f49      	ldrsh	r1, [r1, r5]
 801c58c:	f000 f956 	bl	801c83c <_lseek_r>
 801c590:	89a3      	ldrh	r3, [r4, #12]
 801c592:	1c42      	adds	r2, r0, #1
 801c594:	d103      	bne.n	801c59e <__sseek+0x1a>
 801c596:	4a05      	ldr	r2, [pc, #20]	@ (801c5ac <__sseek+0x28>)
 801c598:	4013      	ands	r3, r2
 801c59a:	81a3      	strh	r3, [r4, #12]
 801c59c:	bd70      	pop	{r4, r5, r6, pc}
 801c59e:	2280      	movs	r2, #128	@ 0x80
 801c5a0:	0152      	lsls	r2, r2, #5
 801c5a2:	4313      	orrs	r3, r2
 801c5a4:	81a3      	strh	r3, [r4, #12]
 801c5a6:	6560      	str	r0, [r4, #84]	@ 0x54
 801c5a8:	e7f8      	b.n	801c59c <__sseek+0x18>
 801c5aa:	46c0      	nop			@ (mov r8, r8)
 801c5ac:	ffffefff 	.word	0xffffefff

0801c5b0 <__sclose>:
 801c5b0:	b510      	push	{r4, lr}
 801c5b2:	230e      	movs	r3, #14
 801c5b4:	5ec9      	ldrsh	r1, [r1, r3]
 801c5b6:	f000 f92f 	bl	801c818 <_close_r>
 801c5ba:	bd10      	pop	{r4, pc}

0801c5bc <_vsniprintf_r>:
 801c5bc:	b530      	push	{r4, r5, lr}
 801c5be:	0014      	movs	r4, r2
 801c5c0:	0005      	movs	r5, r0
 801c5c2:	001a      	movs	r2, r3
 801c5c4:	b09b      	sub	sp, #108	@ 0x6c
 801c5c6:	2c00      	cmp	r4, #0
 801c5c8:	da05      	bge.n	801c5d6 <_vsniprintf_r+0x1a>
 801c5ca:	238b      	movs	r3, #139	@ 0x8b
 801c5cc:	6003      	str	r3, [r0, #0]
 801c5ce:	2001      	movs	r0, #1
 801c5d0:	4240      	negs	r0, r0
 801c5d2:	b01b      	add	sp, #108	@ 0x6c
 801c5d4:	bd30      	pop	{r4, r5, pc}
 801c5d6:	2382      	movs	r3, #130	@ 0x82
 801c5d8:	4668      	mov	r0, sp
 801c5da:	009b      	lsls	r3, r3, #2
 801c5dc:	8183      	strh	r3, [r0, #12]
 801c5de:	2300      	movs	r3, #0
 801c5e0:	9100      	str	r1, [sp, #0]
 801c5e2:	9104      	str	r1, [sp, #16]
 801c5e4:	429c      	cmp	r4, r3
 801c5e6:	d000      	beq.n	801c5ea <_vsniprintf_r+0x2e>
 801c5e8:	1e63      	subs	r3, r4, #1
 801c5ea:	9302      	str	r3, [sp, #8]
 801c5ec:	9305      	str	r3, [sp, #20]
 801c5ee:	2301      	movs	r3, #1
 801c5f0:	4669      	mov	r1, sp
 801c5f2:	425b      	negs	r3, r3
 801c5f4:	81cb      	strh	r3, [r1, #14]
 801c5f6:	0028      	movs	r0, r5
 801c5f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c5fa:	f002 f9cf 	bl	801e99c <_svfiprintf_r>
 801c5fe:	1c43      	adds	r3, r0, #1
 801c600:	da01      	bge.n	801c606 <_vsniprintf_r+0x4a>
 801c602:	238b      	movs	r3, #139	@ 0x8b
 801c604:	602b      	str	r3, [r5, #0]
 801c606:	2c00      	cmp	r4, #0
 801c608:	d0e3      	beq.n	801c5d2 <_vsniprintf_r+0x16>
 801c60a:	2200      	movs	r2, #0
 801c60c:	9b00      	ldr	r3, [sp, #0]
 801c60e:	701a      	strb	r2, [r3, #0]
 801c610:	e7df      	b.n	801c5d2 <_vsniprintf_r+0x16>
	...

0801c614 <vsniprintf>:
 801c614:	b513      	push	{r0, r1, r4, lr}
 801c616:	4c04      	ldr	r4, [pc, #16]	@ (801c628 <vsniprintf+0x14>)
 801c618:	9300      	str	r3, [sp, #0]
 801c61a:	0013      	movs	r3, r2
 801c61c:	000a      	movs	r2, r1
 801c61e:	0001      	movs	r1, r0
 801c620:	6820      	ldr	r0, [r4, #0]
 801c622:	f7ff ffcb 	bl	801c5bc <_vsniprintf_r>
 801c626:	bd16      	pop	{r1, r2, r4, pc}
 801c628:	200003c4 	.word	0x200003c4

0801c62c <__swbuf_r>:
 801c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c62e:	0006      	movs	r6, r0
 801c630:	000d      	movs	r5, r1
 801c632:	0014      	movs	r4, r2
 801c634:	2800      	cmp	r0, #0
 801c636:	d004      	beq.n	801c642 <__swbuf_r+0x16>
 801c638:	6a03      	ldr	r3, [r0, #32]
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d101      	bne.n	801c642 <__swbuf_r+0x16>
 801c63e:	f7ff fead 	bl	801c39c <__sinit>
 801c642:	69a3      	ldr	r3, [r4, #24]
 801c644:	60a3      	str	r3, [r4, #8]
 801c646:	89a3      	ldrh	r3, [r4, #12]
 801c648:	071b      	lsls	r3, r3, #28
 801c64a:	d502      	bpl.n	801c652 <__swbuf_r+0x26>
 801c64c:	6923      	ldr	r3, [r4, #16]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d109      	bne.n	801c666 <__swbuf_r+0x3a>
 801c652:	0021      	movs	r1, r4
 801c654:	0030      	movs	r0, r6
 801c656:	f000 f82b 	bl	801c6b0 <__swsetup_r>
 801c65a:	2800      	cmp	r0, #0
 801c65c:	d003      	beq.n	801c666 <__swbuf_r+0x3a>
 801c65e:	2501      	movs	r5, #1
 801c660:	426d      	negs	r5, r5
 801c662:	0028      	movs	r0, r5
 801c664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c666:	6923      	ldr	r3, [r4, #16]
 801c668:	6820      	ldr	r0, [r4, #0]
 801c66a:	b2ef      	uxtb	r7, r5
 801c66c:	1ac0      	subs	r0, r0, r3
 801c66e:	6963      	ldr	r3, [r4, #20]
 801c670:	b2ed      	uxtb	r5, r5
 801c672:	4283      	cmp	r3, r0
 801c674:	dc05      	bgt.n	801c682 <__swbuf_r+0x56>
 801c676:	0021      	movs	r1, r4
 801c678:	0030      	movs	r0, r6
 801c67a:	f002 fc57 	bl	801ef2c <_fflush_r>
 801c67e:	2800      	cmp	r0, #0
 801c680:	d1ed      	bne.n	801c65e <__swbuf_r+0x32>
 801c682:	68a3      	ldr	r3, [r4, #8]
 801c684:	3001      	adds	r0, #1
 801c686:	3b01      	subs	r3, #1
 801c688:	60a3      	str	r3, [r4, #8]
 801c68a:	6823      	ldr	r3, [r4, #0]
 801c68c:	1c5a      	adds	r2, r3, #1
 801c68e:	6022      	str	r2, [r4, #0]
 801c690:	701f      	strb	r7, [r3, #0]
 801c692:	6963      	ldr	r3, [r4, #20]
 801c694:	4283      	cmp	r3, r0
 801c696:	d004      	beq.n	801c6a2 <__swbuf_r+0x76>
 801c698:	89a3      	ldrh	r3, [r4, #12]
 801c69a:	07db      	lsls	r3, r3, #31
 801c69c:	d5e1      	bpl.n	801c662 <__swbuf_r+0x36>
 801c69e:	2d0a      	cmp	r5, #10
 801c6a0:	d1df      	bne.n	801c662 <__swbuf_r+0x36>
 801c6a2:	0021      	movs	r1, r4
 801c6a4:	0030      	movs	r0, r6
 801c6a6:	f002 fc41 	bl	801ef2c <_fflush_r>
 801c6aa:	2800      	cmp	r0, #0
 801c6ac:	d0d9      	beq.n	801c662 <__swbuf_r+0x36>
 801c6ae:	e7d6      	b.n	801c65e <__swbuf_r+0x32>

0801c6b0 <__swsetup_r>:
 801c6b0:	4b2d      	ldr	r3, [pc, #180]	@ (801c768 <__swsetup_r+0xb8>)
 801c6b2:	b570      	push	{r4, r5, r6, lr}
 801c6b4:	0005      	movs	r5, r0
 801c6b6:	6818      	ldr	r0, [r3, #0]
 801c6b8:	000c      	movs	r4, r1
 801c6ba:	2800      	cmp	r0, #0
 801c6bc:	d004      	beq.n	801c6c8 <__swsetup_r+0x18>
 801c6be:	6a03      	ldr	r3, [r0, #32]
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d101      	bne.n	801c6c8 <__swsetup_r+0x18>
 801c6c4:	f7ff fe6a 	bl	801c39c <__sinit>
 801c6c8:	230c      	movs	r3, #12
 801c6ca:	5ee2      	ldrsh	r2, [r4, r3]
 801c6cc:	0713      	lsls	r3, r2, #28
 801c6ce:	d423      	bmi.n	801c718 <__swsetup_r+0x68>
 801c6d0:	06d3      	lsls	r3, r2, #27
 801c6d2:	d407      	bmi.n	801c6e4 <__swsetup_r+0x34>
 801c6d4:	2309      	movs	r3, #9
 801c6d6:	602b      	str	r3, [r5, #0]
 801c6d8:	2340      	movs	r3, #64	@ 0x40
 801c6da:	2001      	movs	r0, #1
 801c6dc:	4313      	orrs	r3, r2
 801c6de:	81a3      	strh	r3, [r4, #12]
 801c6e0:	4240      	negs	r0, r0
 801c6e2:	e03a      	b.n	801c75a <__swsetup_r+0xaa>
 801c6e4:	0752      	lsls	r2, r2, #29
 801c6e6:	d513      	bpl.n	801c710 <__swsetup_r+0x60>
 801c6e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c6ea:	2900      	cmp	r1, #0
 801c6ec:	d008      	beq.n	801c700 <__swsetup_r+0x50>
 801c6ee:	0023      	movs	r3, r4
 801c6f0:	3344      	adds	r3, #68	@ 0x44
 801c6f2:	4299      	cmp	r1, r3
 801c6f4:	d002      	beq.n	801c6fc <__swsetup_r+0x4c>
 801c6f6:	0028      	movs	r0, r5
 801c6f8:	f000 ffa6 	bl	801d648 <_free_r>
 801c6fc:	2300      	movs	r3, #0
 801c6fe:	6363      	str	r3, [r4, #52]	@ 0x34
 801c700:	2224      	movs	r2, #36	@ 0x24
 801c702:	89a3      	ldrh	r3, [r4, #12]
 801c704:	4393      	bics	r3, r2
 801c706:	81a3      	strh	r3, [r4, #12]
 801c708:	2300      	movs	r3, #0
 801c70a:	6063      	str	r3, [r4, #4]
 801c70c:	6923      	ldr	r3, [r4, #16]
 801c70e:	6023      	str	r3, [r4, #0]
 801c710:	2308      	movs	r3, #8
 801c712:	89a2      	ldrh	r2, [r4, #12]
 801c714:	4313      	orrs	r3, r2
 801c716:	81a3      	strh	r3, [r4, #12]
 801c718:	6923      	ldr	r3, [r4, #16]
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d10b      	bne.n	801c736 <__swsetup_r+0x86>
 801c71e:	21a0      	movs	r1, #160	@ 0xa0
 801c720:	2280      	movs	r2, #128	@ 0x80
 801c722:	89a3      	ldrh	r3, [r4, #12]
 801c724:	0089      	lsls	r1, r1, #2
 801c726:	0092      	lsls	r2, r2, #2
 801c728:	400b      	ands	r3, r1
 801c72a:	4293      	cmp	r3, r2
 801c72c:	d003      	beq.n	801c736 <__swsetup_r+0x86>
 801c72e:	0021      	movs	r1, r4
 801c730:	0028      	movs	r0, r5
 801c732:	f002 fc51 	bl	801efd8 <__smakebuf_r>
 801c736:	230c      	movs	r3, #12
 801c738:	5ee2      	ldrsh	r2, [r4, r3]
 801c73a:	2101      	movs	r1, #1
 801c73c:	0013      	movs	r3, r2
 801c73e:	400b      	ands	r3, r1
 801c740:	420a      	tst	r2, r1
 801c742:	d00b      	beq.n	801c75c <__swsetup_r+0xac>
 801c744:	2300      	movs	r3, #0
 801c746:	60a3      	str	r3, [r4, #8]
 801c748:	6963      	ldr	r3, [r4, #20]
 801c74a:	425b      	negs	r3, r3
 801c74c:	61a3      	str	r3, [r4, #24]
 801c74e:	2000      	movs	r0, #0
 801c750:	6923      	ldr	r3, [r4, #16]
 801c752:	4283      	cmp	r3, r0
 801c754:	d101      	bne.n	801c75a <__swsetup_r+0xaa>
 801c756:	0613      	lsls	r3, r2, #24
 801c758:	d4be      	bmi.n	801c6d8 <__swsetup_r+0x28>
 801c75a:	bd70      	pop	{r4, r5, r6, pc}
 801c75c:	0791      	lsls	r1, r2, #30
 801c75e:	d400      	bmi.n	801c762 <__swsetup_r+0xb2>
 801c760:	6963      	ldr	r3, [r4, #20]
 801c762:	60a3      	str	r3, [r4, #8]
 801c764:	e7f3      	b.n	801c74e <__swsetup_r+0x9e>
 801c766:	46c0      	nop			@ (mov r8, r8)
 801c768:	200003c4 	.word	0x200003c4

0801c76c <memset>:
 801c76c:	0003      	movs	r3, r0
 801c76e:	1882      	adds	r2, r0, r2
 801c770:	4293      	cmp	r3, r2
 801c772:	d100      	bne.n	801c776 <memset+0xa>
 801c774:	4770      	bx	lr
 801c776:	7019      	strb	r1, [r3, #0]
 801c778:	3301      	adds	r3, #1
 801c77a:	e7f9      	b.n	801c770 <memset+0x4>

0801c77c <strchr>:
 801c77c:	b2c9      	uxtb	r1, r1
 801c77e:	7803      	ldrb	r3, [r0, #0]
 801c780:	2b00      	cmp	r3, #0
 801c782:	d004      	beq.n	801c78e <strchr+0x12>
 801c784:	428b      	cmp	r3, r1
 801c786:	d100      	bne.n	801c78a <strchr+0xe>
 801c788:	4770      	bx	lr
 801c78a:	3001      	adds	r0, #1
 801c78c:	e7f7      	b.n	801c77e <strchr+0x2>
 801c78e:	424b      	negs	r3, r1
 801c790:	4159      	adcs	r1, r3
 801c792:	4249      	negs	r1, r1
 801c794:	4008      	ands	r0, r1
 801c796:	e7f7      	b.n	801c788 <strchr+0xc>

0801c798 <strncmp>:
 801c798:	b530      	push	{r4, r5, lr}
 801c79a:	0005      	movs	r5, r0
 801c79c:	1e10      	subs	r0, r2, #0
 801c79e:	d00b      	beq.n	801c7b8 <strncmp+0x20>
 801c7a0:	2400      	movs	r4, #0
 801c7a2:	3a01      	subs	r2, #1
 801c7a4:	5d2b      	ldrb	r3, [r5, r4]
 801c7a6:	5d08      	ldrb	r0, [r1, r4]
 801c7a8:	4283      	cmp	r3, r0
 801c7aa:	d104      	bne.n	801c7b6 <strncmp+0x1e>
 801c7ac:	42a2      	cmp	r2, r4
 801c7ae:	d002      	beq.n	801c7b6 <strncmp+0x1e>
 801c7b0:	3401      	adds	r4, #1
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d1f6      	bne.n	801c7a4 <strncmp+0xc>
 801c7b6:	1a18      	subs	r0, r3, r0
 801c7b8:	bd30      	pop	{r4, r5, pc}

0801c7ba <strncpy>:
 801c7ba:	0003      	movs	r3, r0
 801c7bc:	b530      	push	{r4, r5, lr}
 801c7be:	001d      	movs	r5, r3
 801c7c0:	2a00      	cmp	r2, #0
 801c7c2:	d006      	beq.n	801c7d2 <strncpy+0x18>
 801c7c4:	780c      	ldrb	r4, [r1, #0]
 801c7c6:	3a01      	subs	r2, #1
 801c7c8:	3301      	adds	r3, #1
 801c7ca:	702c      	strb	r4, [r5, #0]
 801c7cc:	3101      	adds	r1, #1
 801c7ce:	2c00      	cmp	r4, #0
 801c7d0:	d1f5      	bne.n	801c7be <strncpy+0x4>
 801c7d2:	2100      	movs	r1, #0
 801c7d4:	189a      	adds	r2, r3, r2
 801c7d6:	4293      	cmp	r3, r2
 801c7d8:	d100      	bne.n	801c7dc <strncpy+0x22>
 801c7da:	bd30      	pop	{r4, r5, pc}
 801c7dc:	7019      	strb	r1, [r3, #0]
 801c7de:	3301      	adds	r3, #1
 801c7e0:	e7f9      	b.n	801c7d6 <strncpy+0x1c>

0801c7e2 <strstr>:
 801c7e2:	780a      	ldrb	r2, [r1, #0]
 801c7e4:	b530      	push	{r4, r5, lr}
 801c7e6:	2a00      	cmp	r2, #0
 801c7e8:	d10c      	bne.n	801c804 <strstr+0x22>
 801c7ea:	bd30      	pop	{r4, r5, pc}
 801c7ec:	429a      	cmp	r2, r3
 801c7ee:	d108      	bne.n	801c802 <strstr+0x20>
 801c7f0:	2301      	movs	r3, #1
 801c7f2:	5ccc      	ldrb	r4, [r1, r3]
 801c7f4:	2c00      	cmp	r4, #0
 801c7f6:	d0f8      	beq.n	801c7ea <strstr+0x8>
 801c7f8:	5cc5      	ldrb	r5, [r0, r3]
 801c7fa:	42a5      	cmp	r5, r4
 801c7fc:	d101      	bne.n	801c802 <strstr+0x20>
 801c7fe:	3301      	adds	r3, #1
 801c800:	e7f7      	b.n	801c7f2 <strstr+0x10>
 801c802:	3001      	adds	r0, #1
 801c804:	7803      	ldrb	r3, [r0, #0]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d1f0      	bne.n	801c7ec <strstr+0xa>
 801c80a:	0018      	movs	r0, r3
 801c80c:	e7ed      	b.n	801c7ea <strstr+0x8>
	...

0801c810 <_localeconv_r>:
 801c810:	4800      	ldr	r0, [pc, #0]	@ (801c814 <_localeconv_r+0x4>)
 801c812:	4770      	bx	lr
 801c814:	20000348 	.word	0x20000348

0801c818 <_close_r>:
 801c818:	2300      	movs	r3, #0
 801c81a:	b570      	push	{r4, r5, r6, lr}
 801c81c:	4d06      	ldr	r5, [pc, #24]	@ (801c838 <_close_r+0x20>)
 801c81e:	0004      	movs	r4, r0
 801c820:	0008      	movs	r0, r1
 801c822:	602b      	str	r3, [r5, #0]
 801c824:	f7ee fb7a 	bl	800af1c <_close>
 801c828:	1c43      	adds	r3, r0, #1
 801c82a:	d103      	bne.n	801c834 <_close_r+0x1c>
 801c82c:	682b      	ldr	r3, [r5, #0]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d000      	beq.n	801c834 <_close_r+0x1c>
 801c832:	6023      	str	r3, [r4, #0]
 801c834:	bd70      	pop	{r4, r5, r6, pc}
 801c836:	46c0      	nop			@ (mov r8, r8)
 801c838:	200038b4 	.word	0x200038b4

0801c83c <_lseek_r>:
 801c83c:	b570      	push	{r4, r5, r6, lr}
 801c83e:	0004      	movs	r4, r0
 801c840:	0008      	movs	r0, r1
 801c842:	0011      	movs	r1, r2
 801c844:	001a      	movs	r2, r3
 801c846:	2300      	movs	r3, #0
 801c848:	4d05      	ldr	r5, [pc, #20]	@ (801c860 <_lseek_r+0x24>)
 801c84a:	602b      	str	r3, [r5, #0]
 801c84c:	f7ee fb87 	bl	800af5e <_lseek>
 801c850:	1c43      	adds	r3, r0, #1
 801c852:	d103      	bne.n	801c85c <_lseek_r+0x20>
 801c854:	682b      	ldr	r3, [r5, #0]
 801c856:	2b00      	cmp	r3, #0
 801c858:	d000      	beq.n	801c85c <_lseek_r+0x20>
 801c85a:	6023      	str	r3, [r4, #0]
 801c85c:	bd70      	pop	{r4, r5, r6, pc}
 801c85e:	46c0      	nop			@ (mov r8, r8)
 801c860:	200038b4 	.word	0x200038b4

0801c864 <_read_r>:
 801c864:	b570      	push	{r4, r5, r6, lr}
 801c866:	0004      	movs	r4, r0
 801c868:	0008      	movs	r0, r1
 801c86a:	0011      	movs	r1, r2
 801c86c:	001a      	movs	r2, r3
 801c86e:	2300      	movs	r3, #0
 801c870:	4d05      	ldr	r5, [pc, #20]	@ (801c888 <_read_r+0x24>)
 801c872:	602b      	str	r3, [r5, #0]
 801c874:	f7ee fb35 	bl	800aee2 <_read>
 801c878:	1c43      	adds	r3, r0, #1
 801c87a:	d103      	bne.n	801c884 <_read_r+0x20>
 801c87c:	682b      	ldr	r3, [r5, #0]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d000      	beq.n	801c884 <_read_r+0x20>
 801c882:	6023      	str	r3, [r4, #0]
 801c884:	bd70      	pop	{r4, r5, r6, pc}
 801c886:	46c0      	nop			@ (mov r8, r8)
 801c888:	200038b4 	.word	0x200038b4

0801c88c <_write_r>:
 801c88c:	b570      	push	{r4, r5, r6, lr}
 801c88e:	0004      	movs	r4, r0
 801c890:	0008      	movs	r0, r1
 801c892:	0011      	movs	r1, r2
 801c894:	001a      	movs	r2, r3
 801c896:	2300      	movs	r3, #0
 801c898:	4d05      	ldr	r5, [pc, #20]	@ (801c8b0 <_write_r+0x24>)
 801c89a:	602b      	str	r3, [r5, #0]
 801c89c:	f7ee ffee 	bl	800b87c <_write>
 801c8a0:	1c43      	adds	r3, r0, #1
 801c8a2:	d103      	bne.n	801c8ac <_write_r+0x20>
 801c8a4:	682b      	ldr	r3, [r5, #0]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d000      	beq.n	801c8ac <_write_r+0x20>
 801c8aa:	6023      	str	r3, [r4, #0]
 801c8ac:	bd70      	pop	{r4, r5, r6, pc}
 801c8ae:	46c0      	nop			@ (mov r8, r8)
 801c8b0:	200038b4 	.word	0x200038b4

0801c8b4 <__errno>:
 801c8b4:	4b01      	ldr	r3, [pc, #4]	@ (801c8bc <__errno+0x8>)
 801c8b6:	6818      	ldr	r0, [r3, #0]
 801c8b8:	4770      	bx	lr
 801c8ba:	46c0      	nop			@ (mov r8, r8)
 801c8bc:	200003c4 	.word	0x200003c4

0801c8c0 <__libc_init_array>:
 801c8c0:	b570      	push	{r4, r5, r6, lr}
 801c8c2:	2600      	movs	r6, #0
 801c8c4:	4c0c      	ldr	r4, [pc, #48]	@ (801c8f8 <__libc_init_array+0x38>)
 801c8c6:	4d0d      	ldr	r5, [pc, #52]	@ (801c8fc <__libc_init_array+0x3c>)
 801c8c8:	1b64      	subs	r4, r4, r5
 801c8ca:	10a4      	asrs	r4, r4, #2
 801c8cc:	42a6      	cmp	r6, r4
 801c8ce:	d109      	bne.n	801c8e4 <__libc_init_array+0x24>
 801c8d0:	2600      	movs	r6, #0
 801c8d2:	f002 fee9 	bl	801f6a8 <_init>
 801c8d6:	4c0a      	ldr	r4, [pc, #40]	@ (801c900 <__libc_init_array+0x40>)
 801c8d8:	4d0a      	ldr	r5, [pc, #40]	@ (801c904 <__libc_init_array+0x44>)
 801c8da:	1b64      	subs	r4, r4, r5
 801c8dc:	10a4      	asrs	r4, r4, #2
 801c8de:	42a6      	cmp	r6, r4
 801c8e0:	d105      	bne.n	801c8ee <__libc_init_array+0x2e>
 801c8e2:	bd70      	pop	{r4, r5, r6, pc}
 801c8e4:	00b3      	lsls	r3, r6, #2
 801c8e6:	58eb      	ldr	r3, [r5, r3]
 801c8e8:	4798      	blx	r3
 801c8ea:	3601      	adds	r6, #1
 801c8ec:	e7ee      	b.n	801c8cc <__libc_init_array+0xc>
 801c8ee:	00b3      	lsls	r3, r6, #2
 801c8f0:	58eb      	ldr	r3, [r5, r3]
 801c8f2:	4798      	blx	r3
 801c8f4:	3601      	adds	r6, #1
 801c8f6:	e7f2      	b.n	801c8de <__libc_init_array+0x1e>
 801c8f8:	080214e8 	.word	0x080214e8
 801c8fc:	080214e8 	.word	0x080214e8
 801c900:	080214ec 	.word	0x080214ec
 801c904:	080214e8 	.word	0x080214e8

0801c908 <__retarget_lock_init_recursive>:
 801c908:	4770      	bx	lr

0801c90a <__retarget_lock_acquire_recursive>:
 801c90a:	4770      	bx	lr

0801c90c <__retarget_lock_release_recursive>:
 801c90c:	4770      	bx	lr

0801c90e <memchr>:
 801c90e:	b2c9      	uxtb	r1, r1
 801c910:	1882      	adds	r2, r0, r2
 801c912:	4290      	cmp	r0, r2
 801c914:	d101      	bne.n	801c91a <memchr+0xc>
 801c916:	2000      	movs	r0, #0
 801c918:	4770      	bx	lr
 801c91a:	7803      	ldrb	r3, [r0, #0]
 801c91c:	428b      	cmp	r3, r1
 801c91e:	d0fb      	beq.n	801c918 <memchr+0xa>
 801c920:	3001      	adds	r0, #1
 801c922:	e7f6      	b.n	801c912 <memchr+0x4>

0801c924 <memcpy>:
 801c924:	2300      	movs	r3, #0
 801c926:	b510      	push	{r4, lr}
 801c928:	429a      	cmp	r2, r3
 801c92a:	d100      	bne.n	801c92e <memcpy+0xa>
 801c92c:	bd10      	pop	{r4, pc}
 801c92e:	5ccc      	ldrb	r4, [r1, r3]
 801c930:	54c4      	strb	r4, [r0, r3]
 801c932:	3301      	adds	r3, #1
 801c934:	e7f8      	b.n	801c928 <memcpy+0x4>
	...

0801c938 <nan>:
 801c938:	2000      	movs	r0, #0
 801c93a:	4901      	ldr	r1, [pc, #4]	@ (801c940 <nan+0x8>)
 801c93c:	4770      	bx	lr
 801c93e:	46c0      	nop			@ (mov r8, r8)
 801c940:	7ff80000 	.word	0x7ff80000

0801c944 <quorem>:
 801c944:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c946:	6902      	ldr	r2, [r0, #16]
 801c948:	690f      	ldr	r7, [r1, #16]
 801c94a:	b087      	sub	sp, #28
 801c94c:	0006      	movs	r6, r0
 801c94e:	000b      	movs	r3, r1
 801c950:	2000      	movs	r0, #0
 801c952:	9102      	str	r1, [sp, #8]
 801c954:	42ba      	cmp	r2, r7
 801c956:	db6d      	blt.n	801ca34 <quorem+0xf0>
 801c958:	3f01      	subs	r7, #1
 801c95a:	00bc      	lsls	r4, r7, #2
 801c95c:	3314      	adds	r3, #20
 801c95e:	9305      	str	r3, [sp, #20]
 801c960:	191b      	adds	r3, r3, r4
 801c962:	9303      	str	r3, [sp, #12]
 801c964:	0033      	movs	r3, r6
 801c966:	3314      	adds	r3, #20
 801c968:	191c      	adds	r4, r3, r4
 801c96a:	9301      	str	r3, [sp, #4]
 801c96c:	6823      	ldr	r3, [r4, #0]
 801c96e:	9304      	str	r3, [sp, #16]
 801c970:	9b03      	ldr	r3, [sp, #12]
 801c972:	9804      	ldr	r0, [sp, #16]
 801c974:	681d      	ldr	r5, [r3, #0]
 801c976:	3501      	adds	r5, #1
 801c978:	0029      	movs	r1, r5
 801c97a:	f7e3 fc13 	bl	80001a4 <__udivsi3>
 801c97e:	9b04      	ldr	r3, [sp, #16]
 801c980:	9000      	str	r0, [sp, #0]
 801c982:	42ab      	cmp	r3, r5
 801c984:	d32b      	bcc.n	801c9de <quorem+0x9a>
 801c986:	9b05      	ldr	r3, [sp, #20]
 801c988:	9d01      	ldr	r5, [sp, #4]
 801c98a:	469c      	mov	ip, r3
 801c98c:	2300      	movs	r3, #0
 801c98e:	9305      	str	r3, [sp, #20]
 801c990:	9304      	str	r3, [sp, #16]
 801c992:	4662      	mov	r2, ip
 801c994:	ca08      	ldmia	r2!, {r3}
 801c996:	6828      	ldr	r0, [r5, #0]
 801c998:	4694      	mov	ip, r2
 801c99a:	9a00      	ldr	r2, [sp, #0]
 801c99c:	b299      	uxth	r1, r3
 801c99e:	4351      	muls	r1, r2
 801c9a0:	9a05      	ldr	r2, [sp, #20]
 801c9a2:	0c1b      	lsrs	r3, r3, #16
 801c9a4:	1889      	adds	r1, r1, r2
 801c9a6:	9a00      	ldr	r2, [sp, #0]
 801c9a8:	4353      	muls	r3, r2
 801c9aa:	0c0a      	lsrs	r2, r1, #16
 801c9ac:	189b      	adds	r3, r3, r2
 801c9ae:	0c1a      	lsrs	r2, r3, #16
 801c9b0:	b289      	uxth	r1, r1
 801c9b2:	9205      	str	r2, [sp, #20]
 801c9b4:	b282      	uxth	r2, r0
 801c9b6:	1a52      	subs	r2, r2, r1
 801c9b8:	9904      	ldr	r1, [sp, #16]
 801c9ba:	0c00      	lsrs	r0, r0, #16
 801c9bc:	1852      	adds	r2, r2, r1
 801c9be:	b29b      	uxth	r3, r3
 801c9c0:	1411      	asrs	r1, r2, #16
 801c9c2:	1ac3      	subs	r3, r0, r3
 801c9c4:	185b      	adds	r3, r3, r1
 801c9c6:	1419      	asrs	r1, r3, #16
 801c9c8:	b292      	uxth	r2, r2
 801c9ca:	041b      	lsls	r3, r3, #16
 801c9cc:	431a      	orrs	r2, r3
 801c9ce:	9b03      	ldr	r3, [sp, #12]
 801c9d0:	9104      	str	r1, [sp, #16]
 801c9d2:	c504      	stmia	r5!, {r2}
 801c9d4:	4563      	cmp	r3, ip
 801c9d6:	d2dc      	bcs.n	801c992 <quorem+0x4e>
 801c9d8:	6823      	ldr	r3, [r4, #0]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d030      	beq.n	801ca40 <quorem+0xfc>
 801c9de:	0030      	movs	r0, r6
 801c9e0:	9902      	ldr	r1, [sp, #8]
 801c9e2:	f001 fd7d 	bl	801e4e0 <__mcmp>
 801c9e6:	2800      	cmp	r0, #0
 801c9e8:	db23      	blt.n	801ca32 <quorem+0xee>
 801c9ea:	0034      	movs	r4, r6
 801c9ec:	2500      	movs	r5, #0
 801c9ee:	9902      	ldr	r1, [sp, #8]
 801c9f0:	3414      	adds	r4, #20
 801c9f2:	3114      	adds	r1, #20
 801c9f4:	6823      	ldr	r3, [r4, #0]
 801c9f6:	c901      	ldmia	r1!, {r0}
 801c9f8:	9302      	str	r3, [sp, #8]
 801c9fa:	466b      	mov	r3, sp
 801c9fc:	891b      	ldrh	r3, [r3, #8]
 801c9fe:	b282      	uxth	r2, r0
 801ca00:	1a9a      	subs	r2, r3, r2
 801ca02:	9b02      	ldr	r3, [sp, #8]
 801ca04:	1952      	adds	r2, r2, r5
 801ca06:	0c00      	lsrs	r0, r0, #16
 801ca08:	0c1b      	lsrs	r3, r3, #16
 801ca0a:	1a1b      	subs	r3, r3, r0
 801ca0c:	1410      	asrs	r0, r2, #16
 801ca0e:	181b      	adds	r3, r3, r0
 801ca10:	141d      	asrs	r5, r3, #16
 801ca12:	b292      	uxth	r2, r2
 801ca14:	041b      	lsls	r3, r3, #16
 801ca16:	431a      	orrs	r2, r3
 801ca18:	9b03      	ldr	r3, [sp, #12]
 801ca1a:	c404      	stmia	r4!, {r2}
 801ca1c:	428b      	cmp	r3, r1
 801ca1e:	d2e9      	bcs.n	801c9f4 <quorem+0xb0>
 801ca20:	9a01      	ldr	r2, [sp, #4]
 801ca22:	00bb      	lsls	r3, r7, #2
 801ca24:	18d3      	adds	r3, r2, r3
 801ca26:	681a      	ldr	r2, [r3, #0]
 801ca28:	2a00      	cmp	r2, #0
 801ca2a:	d013      	beq.n	801ca54 <quorem+0x110>
 801ca2c:	9b00      	ldr	r3, [sp, #0]
 801ca2e:	3301      	adds	r3, #1
 801ca30:	9300      	str	r3, [sp, #0]
 801ca32:	9800      	ldr	r0, [sp, #0]
 801ca34:	b007      	add	sp, #28
 801ca36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca38:	6823      	ldr	r3, [r4, #0]
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d104      	bne.n	801ca48 <quorem+0x104>
 801ca3e:	3f01      	subs	r7, #1
 801ca40:	9b01      	ldr	r3, [sp, #4]
 801ca42:	3c04      	subs	r4, #4
 801ca44:	42a3      	cmp	r3, r4
 801ca46:	d3f7      	bcc.n	801ca38 <quorem+0xf4>
 801ca48:	6137      	str	r7, [r6, #16]
 801ca4a:	e7c8      	b.n	801c9de <quorem+0x9a>
 801ca4c:	681a      	ldr	r2, [r3, #0]
 801ca4e:	2a00      	cmp	r2, #0
 801ca50:	d104      	bne.n	801ca5c <quorem+0x118>
 801ca52:	3f01      	subs	r7, #1
 801ca54:	9a01      	ldr	r2, [sp, #4]
 801ca56:	3b04      	subs	r3, #4
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	d3f7      	bcc.n	801ca4c <quorem+0x108>
 801ca5c:	6137      	str	r7, [r6, #16]
 801ca5e:	e7e5      	b.n	801ca2c <quorem+0xe8>

0801ca60 <_dtoa_r>:
 801ca60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca62:	0014      	movs	r4, r2
 801ca64:	001d      	movs	r5, r3
 801ca66:	69c6      	ldr	r6, [r0, #28]
 801ca68:	b09d      	sub	sp, #116	@ 0x74
 801ca6a:	940a      	str	r4, [sp, #40]	@ 0x28
 801ca6c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801ca6e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801ca70:	9003      	str	r0, [sp, #12]
 801ca72:	2e00      	cmp	r6, #0
 801ca74:	d10f      	bne.n	801ca96 <_dtoa_r+0x36>
 801ca76:	2010      	movs	r0, #16
 801ca78:	f001 f98a 	bl	801dd90 <malloc>
 801ca7c:	9b03      	ldr	r3, [sp, #12]
 801ca7e:	1e02      	subs	r2, r0, #0
 801ca80:	61d8      	str	r0, [r3, #28]
 801ca82:	d104      	bne.n	801ca8e <_dtoa_r+0x2e>
 801ca84:	21ef      	movs	r1, #239	@ 0xef
 801ca86:	4bc7      	ldr	r3, [pc, #796]	@ (801cda4 <_dtoa_r+0x344>)
 801ca88:	48c7      	ldr	r0, [pc, #796]	@ (801cda8 <_dtoa_r+0x348>)
 801ca8a:	f002 fb2f 	bl	801f0ec <__assert_func>
 801ca8e:	6046      	str	r6, [r0, #4]
 801ca90:	6086      	str	r6, [r0, #8]
 801ca92:	6006      	str	r6, [r0, #0]
 801ca94:	60c6      	str	r6, [r0, #12]
 801ca96:	9b03      	ldr	r3, [sp, #12]
 801ca98:	69db      	ldr	r3, [r3, #28]
 801ca9a:	6819      	ldr	r1, [r3, #0]
 801ca9c:	2900      	cmp	r1, #0
 801ca9e:	d00b      	beq.n	801cab8 <_dtoa_r+0x58>
 801caa0:	685a      	ldr	r2, [r3, #4]
 801caa2:	2301      	movs	r3, #1
 801caa4:	4093      	lsls	r3, r2
 801caa6:	604a      	str	r2, [r1, #4]
 801caa8:	608b      	str	r3, [r1, #8]
 801caaa:	9803      	ldr	r0, [sp, #12]
 801caac:	f001 fa82 	bl	801dfb4 <_Bfree>
 801cab0:	2200      	movs	r2, #0
 801cab2:	9b03      	ldr	r3, [sp, #12]
 801cab4:	69db      	ldr	r3, [r3, #28]
 801cab6:	601a      	str	r2, [r3, #0]
 801cab8:	2d00      	cmp	r5, #0
 801caba:	da1e      	bge.n	801cafa <_dtoa_r+0x9a>
 801cabc:	2301      	movs	r3, #1
 801cabe:	603b      	str	r3, [r7, #0]
 801cac0:	006b      	lsls	r3, r5, #1
 801cac2:	085b      	lsrs	r3, r3, #1
 801cac4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cac6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cac8:	4bb8      	ldr	r3, [pc, #736]	@ (801cdac <_dtoa_r+0x34c>)
 801caca:	4ab8      	ldr	r2, [pc, #736]	@ (801cdac <_dtoa_r+0x34c>)
 801cacc:	403b      	ands	r3, r7
 801cace:	4293      	cmp	r3, r2
 801cad0:	d116      	bne.n	801cb00 <_dtoa_r+0xa0>
 801cad2:	4bb7      	ldr	r3, [pc, #732]	@ (801cdb0 <_dtoa_r+0x350>)
 801cad4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cad6:	6013      	str	r3, [r2, #0]
 801cad8:	033b      	lsls	r3, r7, #12
 801cada:	0b1b      	lsrs	r3, r3, #12
 801cadc:	4323      	orrs	r3, r4
 801cade:	d101      	bne.n	801cae4 <_dtoa_r+0x84>
 801cae0:	f000 fd83 	bl	801d5ea <_dtoa_r+0xb8a>
 801cae4:	4bb3      	ldr	r3, [pc, #716]	@ (801cdb4 <_dtoa_r+0x354>)
 801cae6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801cae8:	9308      	str	r3, [sp, #32]
 801caea:	2a00      	cmp	r2, #0
 801caec:	d002      	beq.n	801caf4 <_dtoa_r+0x94>
 801caee:	4bb2      	ldr	r3, [pc, #712]	@ (801cdb8 <_dtoa_r+0x358>)
 801caf0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801caf2:	6013      	str	r3, [r2, #0]
 801caf4:	9808      	ldr	r0, [sp, #32]
 801caf6:	b01d      	add	sp, #116	@ 0x74
 801caf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cafa:	2300      	movs	r3, #0
 801cafc:	603b      	str	r3, [r7, #0]
 801cafe:	e7e2      	b.n	801cac6 <_dtoa_r+0x66>
 801cb00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cb02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cb04:	9212      	str	r2, [sp, #72]	@ 0x48
 801cb06:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cb08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cb0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	2300      	movs	r3, #0
 801cb10:	f7e3 fcce 	bl	80004b0 <__aeabi_dcmpeq>
 801cb14:	1e06      	subs	r6, r0, #0
 801cb16:	d00b      	beq.n	801cb30 <_dtoa_r+0xd0>
 801cb18:	2301      	movs	r3, #1
 801cb1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cb1c:	6013      	str	r3, [r2, #0]
 801cb1e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d002      	beq.n	801cb2a <_dtoa_r+0xca>
 801cb24:	4ba5      	ldr	r3, [pc, #660]	@ (801cdbc <_dtoa_r+0x35c>)
 801cb26:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801cb28:	6013      	str	r3, [r2, #0]
 801cb2a:	4ba5      	ldr	r3, [pc, #660]	@ (801cdc0 <_dtoa_r+0x360>)
 801cb2c:	9308      	str	r3, [sp, #32]
 801cb2e:	e7e1      	b.n	801caf4 <_dtoa_r+0x94>
 801cb30:	ab1a      	add	r3, sp, #104	@ 0x68
 801cb32:	9301      	str	r3, [sp, #4]
 801cb34:	ab1b      	add	r3, sp, #108	@ 0x6c
 801cb36:	9300      	str	r3, [sp, #0]
 801cb38:	9803      	ldr	r0, [sp, #12]
 801cb3a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cb3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cb3e:	f001 fdf1 	bl	801e724 <__d2b>
 801cb42:	007a      	lsls	r2, r7, #1
 801cb44:	9005      	str	r0, [sp, #20]
 801cb46:	0d52      	lsrs	r2, r2, #21
 801cb48:	d100      	bne.n	801cb4c <_dtoa_r+0xec>
 801cb4a:	e07b      	b.n	801cc44 <_dtoa_r+0x1e4>
 801cb4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cb4e:	9618      	str	r6, [sp, #96]	@ 0x60
 801cb50:	0319      	lsls	r1, r3, #12
 801cb52:	4b9c      	ldr	r3, [pc, #624]	@ (801cdc4 <_dtoa_r+0x364>)
 801cb54:	0b09      	lsrs	r1, r1, #12
 801cb56:	430b      	orrs	r3, r1
 801cb58:	499b      	ldr	r1, [pc, #620]	@ (801cdc8 <_dtoa_r+0x368>)
 801cb5a:	1857      	adds	r7, r2, r1
 801cb5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cb5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cb60:	0019      	movs	r1, r3
 801cb62:	2200      	movs	r2, #0
 801cb64:	4b99      	ldr	r3, [pc, #612]	@ (801cdcc <_dtoa_r+0x36c>)
 801cb66:	f7e6 f831 	bl	8002bcc <__aeabi_dsub>
 801cb6a:	4a99      	ldr	r2, [pc, #612]	@ (801cdd0 <_dtoa_r+0x370>)
 801cb6c:	4b99      	ldr	r3, [pc, #612]	@ (801cdd4 <_dtoa_r+0x374>)
 801cb6e:	f7e5 fd65 	bl	800263c <__aeabi_dmul>
 801cb72:	4a99      	ldr	r2, [pc, #612]	@ (801cdd8 <_dtoa_r+0x378>)
 801cb74:	4b99      	ldr	r3, [pc, #612]	@ (801cddc <_dtoa_r+0x37c>)
 801cb76:	f7e4 fdb9 	bl	80016ec <__aeabi_dadd>
 801cb7a:	0004      	movs	r4, r0
 801cb7c:	0038      	movs	r0, r7
 801cb7e:	000d      	movs	r5, r1
 801cb80:	f7e6 fc1e 	bl	80033c0 <__aeabi_i2d>
 801cb84:	4a96      	ldr	r2, [pc, #600]	@ (801cde0 <_dtoa_r+0x380>)
 801cb86:	4b97      	ldr	r3, [pc, #604]	@ (801cde4 <_dtoa_r+0x384>)
 801cb88:	f7e5 fd58 	bl	800263c <__aeabi_dmul>
 801cb8c:	0002      	movs	r2, r0
 801cb8e:	000b      	movs	r3, r1
 801cb90:	0020      	movs	r0, r4
 801cb92:	0029      	movs	r1, r5
 801cb94:	f7e4 fdaa 	bl	80016ec <__aeabi_dadd>
 801cb98:	0004      	movs	r4, r0
 801cb9a:	000d      	movs	r5, r1
 801cb9c:	f7e6 fbd4 	bl	8003348 <__aeabi_d2iz>
 801cba0:	2200      	movs	r2, #0
 801cba2:	9004      	str	r0, [sp, #16]
 801cba4:	2300      	movs	r3, #0
 801cba6:	0020      	movs	r0, r4
 801cba8:	0029      	movs	r1, r5
 801cbaa:	f7e3 fc87 	bl	80004bc <__aeabi_dcmplt>
 801cbae:	2800      	cmp	r0, #0
 801cbb0:	d00b      	beq.n	801cbca <_dtoa_r+0x16a>
 801cbb2:	9804      	ldr	r0, [sp, #16]
 801cbb4:	f7e6 fc04 	bl	80033c0 <__aeabi_i2d>
 801cbb8:	002b      	movs	r3, r5
 801cbba:	0022      	movs	r2, r4
 801cbbc:	f7e3 fc78 	bl	80004b0 <__aeabi_dcmpeq>
 801cbc0:	4243      	negs	r3, r0
 801cbc2:	4158      	adcs	r0, r3
 801cbc4:	9b04      	ldr	r3, [sp, #16]
 801cbc6:	1a1b      	subs	r3, r3, r0
 801cbc8:	9304      	str	r3, [sp, #16]
 801cbca:	2301      	movs	r3, #1
 801cbcc:	9315      	str	r3, [sp, #84]	@ 0x54
 801cbce:	9b04      	ldr	r3, [sp, #16]
 801cbd0:	2b16      	cmp	r3, #22
 801cbd2:	d810      	bhi.n	801cbf6 <_dtoa_r+0x196>
 801cbd4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cbd6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cbd8:	9a04      	ldr	r2, [sp, #16]
 801cbda:	4b83      	ldr	r3, [pc, #524]	@ (801cde8 <_dtoa_r+0x388>)
 801cbdc:	00d2      	lsls	r2, r2, #3
 801cbde:	189b      	adds	r3, r3, r2
 801cbe0:	681a      	ldr	r2, [r3, #0]
 801cbe2:	685b      	ldr	r3, [r3, #4]
 801cbe4:	f7e3 fc6a 	bl	80004bc <__aeabi_dcmplt>
 801cbe8:	2800      	cmp	r0, #0
 801cbea:	d047      	beq.n	801cc7c <_dtoa_r+0x21c>
 801cbec:	9b04      	ldr	r3, [sp, #16]
 801cbee:	3b01      	subs	r3, #1
 801cbf0:	9304      	str	r3, [sp, #16]
 801cbf2:	2300      	movs	r3, #0
 801cbf4:	9315      	str	r3, [sp, #84]	@ 0x54
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801cbfa:	9206      	str	r2, [sp, #24]
 801cbfc:	1bdb      	subs	r3, r3, r7
 801cbfe:	1e5a      	subs	r2, r3, #1
 801cc00:	d53e      	bpl.n	801cc80 <_dtoa_r+0x220>
 801cc02:	2201      	movs	r2, #1
 801cc04:	1ad3      	subs	r3, r2, r3
 801cc06:	9306      	str	r3, [sp, #24]
 801cc08:	2300      	movs	r3, #0
 801cc0a:	930d      	str	r3, [sp, #52]	@ 0x34
 801cc0c:	9b04      	ldr	r3, [sp, #16]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	db38      	blt.n	801cc84 <_dtoa_r+0x224>
 801cc12:	9a04      	ldr	r2, [sp, #16]
 801cc14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc16:	4694      	mov	ip, r2
 801cc18:	4463      	add	r3, ip
 801cc1a:	930d      	str	r3, [sp, #52]	@ 0x34
 801cc1c:	2300      	movs	r3, #0
 801cc1e:	9214      	str	r2, [sp, #80]	@ 0x50
 801cc20:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cc22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cc24:	2401      	movs	r4, #1
 801cc26:	2b09      	cmp	r3, #9
 801cc28:	d867      	bhi.n	801ccfa <_dtoa_r+0x29a>
 801cc2a:	2b05      	cmp	r3, #5
 801cc2c:	dd02      	ble.n	801cc34 <_dtoa_r+0x1d4>
 801cc2e:	2400      	movs	r4, #0
 801cc30:	3b04      	subs	r3, #4
 801cc32:	9322      	str	r3, [sp, #136]	@ 0x88
 801cc34:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cc36:	1e98      	subs	r0, r3, #2
 801cc38:	2803      	cmp	r0, #3
 801cc3a:	d867      	bhi.n	801cd0c <_dtoa_r+0x2ac>
 801cc3c:	f7e3 fa9e 	bl	800017c <__gnu_thumb1_case_uqi>
 801cc40:	5b383a2b 	.word	0x5b383a2b
 801cc44:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cc46:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801cc48:	18f6      	adds	r6, r6, r3
 801cc4a:	4b68      	ldr	r3, [pc, #416]	@ (801cdec <_dtoa_r+0x38c>)
 801cc4c:	18f2      	adds	r2, r6, r3
 801cc4e:	2a20      	cmp	r2, #32
 801cc50:	dd0f      	ble.n	801cc72 <_dtoa_r+0x212>
 801cc52:	2340      	movs	r3, #64	@ 0x40
 801cc54:	1a9b      	subs	r3, r3, r2
 801cc56:	409f      	lsls	r7, r3
 801cc58:	4b65      	ldr	r3, [pc, #404]	@ (801cdf0 <_dtoa_r+0x390>)
 801cc5a:	0038      	movs	r0, r7
 801cc5c:	18f3      	adds	r3, r6, r3
 801cc5e:	40dc      	lsrs	r4, r3
 801cc60:	4320      	orrs	r0, r4
 801cc62:	f7e6 fbdb 	bl	800341c <__aeabi_ui2d>
 801cc66:	2201      	movs	r2, #1
 801cc68:	4b62      	ldr	r3, [pc, #392]	@ (801cdf4 <_dtoa_r+0x394>)
 801cc6a:	1e77      	subs	r7, r6, #1
 801cc6c:	18cb      	adds	r3, r1, r3
 801cc6e:	9218      	str	r2, [sp, #96]	@ 0x60
 801cc70:	e776      	b.n	801cb60 <_dtoa_r+0x100>
 801cc72:	2320      	movs	r3, #32
 801cc74:	0020      	movs	r0, r4
 801cc76:	1a9b      	subs	r3, r3, r2
 801cc78:	4098      	lsls	r0, r3
 801cc7a:	e7f2      	b.n	801cc62 <_dtoa_r+0x202>
 801cc7c:	9015      	str	r0, [sp, #84]	@ 0x54
 801cc7e:	e7ba      	b.n	801cbf6 <_dtoa_r+0x196>
 801cc80:	920d      	str	r2, [sp, #52]	@ 0x34
 801cc82:	e7c3      	b.n	801cc0c <_dtoa_r+0x1ac>
 801cc84:	9b06      	ldr	r3, [sp, #24]
 801cc86:	9a04      	ldr	r2, [sp, #16]
 801cc88:	1a9b      	subs	r3, r3, r2
 801cc8a:	9306      	str	r3, [sp, #24]
 801cc8c:	4253      	negs	r3, r2
 801cc8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cc90:	2300      	movs	r3, #0
 801cc92:	9314      	str	r3, [sp, #80]	@ 0x50
 801cc94:	e7c5      	b.n	801cc22 <_dtoa_r+0x1c2>
 801cc96:	2300      	movs	r3, #0
 801cc98:	9310      	str	r3, [sp, #64]	@ 0x40
 801cc9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cc9c:	930e      	str	r3, [sp, #56]	@ 0x38
 801cc9e:	9309      	str	r3, [sp, #36]	@ 0x24
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	dc13      	bgt.n	801cccc <_dtoa_r+0x26c>
 801cca4:	2301      	movs	r3, #1
 801cca6:	001a      	movs	r2, r3
 801cca8:	930e      	str	r3, [sp, #56]	@ 0x38
 801ccaa:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccac:	9223      	str	r2, [sp, #140]	@ 0x8c
 801ccae:	e00d      	b.n	801cccc <_dtoa_r+0x26c>
 801ccb0:	2301      	movs	r3, #1
 801ccb2:	e7f1      	b.n	801cc98 <_dtoa_r+0x238>
 801ccb4:	2300      	movs	r3, #0
 801ccb6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ccb8:	9310      	str	r3, [sp, #64]	@ 0x40
 801ccba:	4694      	mov	ip, r2
 801ccbc:	9b04      	ldr	r3, [sp, #16]
 801ccbe:	4463      	add	r3, ip
 801ccc0:	930e      	str	r3, [sp, #56]	@ 0x38
 801ccc2:	3301      	adds	r3, #1
 801ccc4:	9309      	str	r3, [sp, #36]	@ 0x24
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	dc00      	bgt.n	801cccc <_dtoa_r+0x26c>
 801ccca:	2301      	movs	r3, #1
 801cccc:	9a03      	ldr	r2, [sp, #12]
 801ccce:	2100      	movs	r1, #0
 801ccd0:	69d0      	ldr	r0, [r2, #28]
 801ccd2:	2204      	movs	r2, #4
 801ccd4:	0015      	movs	r5, r2
 801ccd6:	3514      	adds	r5, #20
 801ccd8:	429d      	cmp	r5, r3
 801ccda:	d91b      	bls.n	801cd14 <_dtoa_r+0x2b4>
 801ccdc:	6041      	str	r1, [r0, #4]
 801ccde:	9803      	ldr	r0, [sp, #12]
 801cce0:	f001 f924 	bl	801df2c <_Balloc>
 801cce4:	9008      	str	r0, [sp, #32]
 801cce6:	2800      	cmp	r0, #0
 801cce8:	d117      	bne.n	801cd1a <_dtoa_r+0x2ba>
 801ccea:	21b0      	movs	r1, #176	@ 0xb0
 801ccec:	4b42      	ldr	r3, [pc, #264]	@ (801cdf8 <_dtoa_r+0x398>)
 801ccee:	482e      	ldr	r0, [pc, #184]	@ (801cda8 <_dtoa_r+0x348>)
 801ccf0:	9a08      	ldr	r2, [sp, #32]
 801ccf2:	31ff      	adds	r1, #255	@ 0xff
 801ccf4:	e6c9      	b.n	801ca8a <_dtoa_r+0x2a>
 801ccf6:	2301      	movs	r3, #1
 801ccf8:	e7dd      	b.n	801ccb6 <_dtoa_r+0x256>
 801ccfa:	2300      	movs	r3, #0
 801ccfc:	9410      	str	r4, [sp, #64]	@ 0x40
 801ccfe:	9322      	str	r3, [sp, #136]	@ 0x88
 801cd00:	3b01      	subs	r3, #1
 801cd02:	930e      	str	r3, [sp, #56]	@ 0x38
 801cd04:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd06:	2200      	movs	r2, #0
 801cd08:	3313      	adds	r3, #19
 801cd0a:	e7cf      	b.n	801ccac <_dtoa_r+0x24c>
 801cd0c:	2301      	movs	r3, #1
 801cd0e:	9310      	str	r3, [sp, #64]	@ 0x40
 801cd10:	3b02      	subs	r3, #2
 801cd12:	e7f6      	b.n	801cd02 <_dtoa_r+0x2a2>
 801cd14:	3101      	adds	r1, #1
 801cd16:	0052      	lsls	r2, r2, #1
 801cd18:	e7dc      	b.n	801ccd4 <_dtoa_r+0x274>
 801cd1a:	9b03      	ldr	r3, [sp, #12]
 801cd1c:	9a08      	ldr	r2, [sp, #32]
 801cd1e:	69db      	ldr	r3, [r3, #28]
 801cd20:	601a      	str	r2, [r3, #0]
 801cd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd24:	2b0e      	cmp	r3, #14
 801cd26:	d900      	bls.n	801cd2a <_dtoa_r+0x2ca>
 801cd28:	e0d9      	b.n	801cede <_dtoa_r+0x47e>
 801cd2a:	2c00      	cmp	r4, #0
 801cd2c:	d100      	bne.n	801cd30 <_dtoa_r+0x2d0>
 801cd2e:	e0d6      	b.n	801cede <_dtoa_r+0x47e>
 801cd30:	9b04      	ldr	r3, [sp, #16]
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	dd64      	ble.n	801ce00 <_dtoa_r+0x3a0>
 801cd36:	210f      	movs	r1, #15
 801cd38:	9a04      	ldr	r2, [sp, #16]
 801cd3a:	4b2b      	ldr	r3, [pc, #172]	@ (801cde8 <_dtoa_r+0x388>)
 801cd3c:	400a      	ands	r2, r1
 801cd3e:	00d2      	lsls	r2, r2, #3
 801cd40:	189b      	adds	r3, r3, r2
 801cd42:	681e      	ldr	r6, [r3, #0]
 801cd44:	685f      	ldr	r7, [r3, #4]
 801cd46:	9b04      	ldr	r3, [sp, #16]
 801cd48:	2402      	movs	r4, #2
 801cd4a:	111d      	asrs	r5, r3, #4
 801cd4c:	05db      	lsls	r3, r3, #23
 801cd4e:	d50a      	bpl.n	801cd66 <_dtoa_r+0x306>
 801cd50:	4b2a      	ldr	r3, [pc, #168]	@ (801cdfc <_dtoa_r+0x39c>)
 801cd52:	400d      	ands	r5, r1
 801cd54:	6a1a      	ldr	r2, [r3, #32]
 801cd56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd58:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cd5a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cd5c:	f7e5 f82a 	bl	8001db4 <__aeabi_ddiv>
 801cd60:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd62:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cd64:	3401      	adds	r4, #1
 801cd66:	4b25      	ldr	r3, [pc, #148]	@ (801cdfc <_dtoa_r+0x39c>)
 801cd68:	930c      	str	r3, [sp, #48]	@ 0x30
 801cd6a:	2d00      	cmp	r5, #0
 801cd6c:	d108      	bne.n	801cd80 <_dtoa_r+0x320>
 801cd6e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cd70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cd72:	0032      	movs	r2, r6
 801cd74:	003b      	movs	r3, r7
 801cd76:	f7e5 f81d 	bl	8001db4 <__aeabi_ddiv>
 801cd7a:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd7c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cd7e:	e05a      	b.n	801ce36 <_dtoa_r+0x3d6>
 801cd80:	2301      	movs	r3, #1
 801cd82:	421d      	tst	r5, r3
 801cd84:	d009      	beq.n	801cd9a <_dtoa_r+0x33a>
 801cd86:	18e4      	adds	r4, r4, r3
 801cd88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cd8a:	0030      	movs	r0, r6
 801cd8c:	681a      	ldr	r2, [r3, #0]
 801cd8e:	685b      	ldr	r3, [r3, #4]
 801cd90:	0039      	movs	r1, r7
 801cd92:	f7e5 fc53 	bl	800263c <__aeabi_dmul>
 801cd96:	0006      	movs	r6, r0
 801cd98:	000f      	movs	r7, r1
 801cd9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cd9c:	106d      	asrs	r5, r5, #1
 801cd9e:	3308      	adds	r3, #8
 801cda0:	e7e2      	b.n	801cd68 <_dtoa_r+0x308>
 801cda2:	46c0      	nop			@ (mov r8, r8)
 801cda4:	08021242 	.word	0x08021242
 801cda8:	08021259 	.word	0x08021259
 801cdac:	7ff00000 	.word	0x7ff00000
 801cdb0:	0000270f 	.word	0x0000270f
 801cdb4:	0802123e 	.word	0x0802123e
 801cdb8:	08021241 	.word	0x08021241
 801cdbc:	0802120a 	.word	0x0802120a
 801cdc0:	08021209 	.word	0x08021209
 801cdc4:	3ff00000 	.word	0x3ff00000
 801cdc8:	fffffc01 	.word	0xfffffc01
 801cdcc:	3ff80000 	.word	0x3ff80000
 801cdd0:	636f4361 	.word	0x636f4361
 801cdd4:	3fd287a7 	.word	0x3fd287a7
 801cdd8:	8b60c8b3 	.word	0x8b60c8b3
 801cddc:	3fc68a28 	.word	0x3fc68a28
 801cde0:	509f79fb 	.word	0x509f79fb
 801cde4:	3fd34413 	.word	0x3fd34413
 801cde8:	080213b0 	.word	0x080213b0
 801cdec:	00000432 	.word	0x00000432
 801cdf0:	00000412 	.word	0x00000412
 801cdf4:	fe100000 	.word	0xfe100000
 801cdf8:	080212b1 	.word	0x080212b1
 801cdfc:	08021388 	.word	0x08021388
 801ce00:	9b04      	ldr	r3, [sp, #16]
 801ce02:	2402      	movs	r4, #2
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d016      	beq.n	801ce36 <_dtoa_r+0x3d6>
 801ce08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ce0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ce0c:	220f      	movs	r2, #15
 801ce0e:	425d      	negs	r5, r3
 801ce10:	402a      	ands	r2, r5
 801ce12:	4bd7      	ldr	r3, [pc, #860]	@ (801d170 <_dtoa_r+0x710>)
 801ce14:	00d2      	lsls	r2, r2, #3
 801ce16:	189b      	adds	r3, r3, r2
 801ce18:	681a      	ldr	r2, [r3, #0]
 801ce1a:	685b      	ldr	r3, [r3, #4]
 801ce1c:	f7e5 fc0e 	bl	800263c <__aeabi_dmul>
 801ce20:	2701      	movs	r7, #1
 801ce22:	2300      	movs	r3, #0
 801ce24:	900a      	str	r0, [sp, #40]	@ 0x28
 801ce26:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ce28:	4ed2      	ldr	r6, [pc, #840]	@ (801d174 <_dtoa_r+0x714>)
 801ce2a:	112d      	asrs	r5, r5, #4
 801ce2c:	2d00      	cmp	r5, #0
 801ce2e:	d000      	beq.n	801ce32 <_dtoa_r+0x3d2>
 801ce30:	e0ba      	b.n	801cfa8 <_dtoa_r+0x548>
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d1a1      	bne.n	801cd7a <_dtoa_r+0x31a>
 801ce36:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ce38:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ce3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d100      	bne.n	801ce42 <_dtoa_r+0x3e2>
 801ce40:	e0bd      	b.n	801cfbe <_dtoa_r+0x55e>
 801ce42:	2200      	movs	r2, #0
 801ce44:	0030      	movs	r0, r6
 801ce46:	0039      	movs	r1, r7
 801ce48:	4bcb      	ldr	r3, [pc, #812]	@ (801d178 <_dtoa_r+0x718>)
 801ce4a:	f7e3 fb37 	bl	80004bc <__aeabi_dcmplt>
 801ce4e:	2800      	cmp	r0, #0
 801ce50:	d100      	bne.n	801ce54 <_dtoa_r+0x3f4>
 801ce52:	e0b4      	b.n	801cfbe <_dtoa_r+0x55e>
 801ce54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d100      	bne.n	801ce5c <_dtoa_r+0x3fc>
 801ce5a:	e0b0      	b.n	801cfbe <_dtoa_r+0x55e>
 801ce5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	dd39      	ble.n	801ced6 <_dtoa_r+0x476>
 801ce62:	9b04      	ldr	r3, [sp, #16]
 801ce64:	2200      	movs	r2, #0
 801ce66:	3b01      	subs	r3, #1
 801ce68:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce6a:	0030      	movs	r0, r6
 801ce6c:	4bc3      	ldr	r3, [pc, #780]	@ (801d17c <_dtoa_r+0x71c>)
 801ce6e:	0039      	movs	r1, r7
 801ce70:	f7e5 fbe4 	bl	800263c <__aeabi_dmul>
 801ce74:	900a      	str	r0, [sp, #40]	@ 0x28
 801ce76:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ce78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce7a:	3401      	adds	r4, #1
 801ce7c:	0020      	movs	r0, r4
 801ce7e:	9311      	str	r3, [sp, #68]	@ 0x44
 801ce80:	f7e6 fa9e 	bl	80033c0 <__aeabi_i2d>
 801ce84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ce86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce88:	f7e5 fbd8 	bl	800263c <__aeabi_dmul>
 801ce8c:	4bbc      	ldr	r3, [pc, #752]	@ (801d180 <_dtoa_r+0x720>)
 801ce8e:	2200      	movs	r2, #0
 801ce90:	f7e4 fc2c 	bl	80016ec <__aeabi_dadd>
 801ce94:	4bbb      	ldr	r3, [pc, #748]	@ (801d184 <_dtoa_r+0x724>)
 801ce96:	0006      	movs	r6, r0
 801ce98:	18cf      	adds	r7, r1, r3
 801ce9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d000      	beq.n	801cea2 <_dtoa_r+0x442>
 801cea0:	e091      	b.n	801cfc6 <_dtoa_r+0x566>
 801cea2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cea4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cea6:	2200      	movs	r2, #0
 801cea8:	4bb7      	ldr	r3, [pc, #732]	@ (801d188 <_dtoa_r+0x728>)
 801ceaa:	f7e5 fe8f 	bl	8002bcc <__aeabi_dsub>
 801ceae:	0032      	movs	r2, r6
 801ceb0:	003b      	movs	r3, r7
 801ceb2:	0004      	movs	r4, r0
 801ceb4:	000d      	movs	r5, r1
 801ceb6:	f7e3 fb15 	bl	80004e4 <__aeabi_dcmpgt>
 801ceba:	2800      	cmp	r0, #0
 801cebc:	d000      	beq.n	801cec0 <_dtoa_r+0x460>
 801cebe:	e29d      	b.n	801d3fc <_dtoa_r+0x99c>
 801cec0:	2180      	movs	r1, #128	@ 0x80
 801cec2:	0609      	lsls	r1, r1, #24
 801cec4:	187b      	adds	r3, r7, r1
 801cec6:	0032      	movs	r2, r6
 801cec8:	0020      	movs	r0, r4
 801ceca:	0029      	movs	r1, r5
 801cecc:	f7e3 faf6 	bl	80004bc <__aeabi_dcmplt>
 801ced0:	2800      	cmp	r0, #0
 801ced2:	d000      	beq.n	801ced6 <_dtoa_r+0x476>
 801ced4:	e130      	b.n	801d138 <_dtoa_r+0x6d8>
 801ced6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ced8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ceda:	930a      	str	r3, [sp, #40]	@ 0x28
 801cedc:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cede:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	da00      	bge.n	801cee6 <_dtoa_r+0x486>
 801cee4:	e177      	b.n	801d1d6 <_dtoa_r+0x776>
 801cee6:	9a04      	ldr	r2, [sp, #16]
 801cee8:	2a0e      	cmp	r2, #14
 801ceea:	dd00      	ble.n	801ceee <_dtoa_r+0x48e>
 801ceec:	e173      	b.n	801d1d6 <_dtoa_r+0x776>
 801ceee:	4ba0      	ldr	r3, [pc, #640]	@ (801d170 <_dtoa_r+0x710>)
 801cef0:	00d2      	lsls	r2, r2, #3
 801cef2:	189b      	adds	r3, r3, r2
 801cef4:	685c      	ldr	r4, [r3, #4]
 801cef6:	681b      	ldr	r3, [r3, #0]
 801cef8:	9306      	str	r3, [sp, #24]
 801cefa:	9407      	str	r4, [sp, #28]
 801cefc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	da03      	bge.n	801cf0a <_dtoa_r+0x4aa>
 801cf02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf04:	2b00      	cmp	r3, #0
 801cf06:	dc00      	bgt.n	801cf0a <_dtoa_r+0x4aa>
 801cf08:	e106      	b.n	801d118 <_dtoa_r+0x6b8>
 801cf0a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cf0c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cf0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf10:	9d08      	ldr	r5, [sp, #32]
 801cf12:	3b01      	subs	r3, #1
 801cf14:	195b      	adds	r3, r3, r5
 801cf16:	930a      	str	r3, [sp, #40]	@ 0x28
 801cf18:	9a06      	ldr	r2, [sp, #24]
 801cf1a:	9b07      	ldr	r3, [sp, #28]
 801cf1c:	0030      	movs	r0, r6
 801cf1e:	0039      	movs	r1, r7
 801cf20:	f7e4 ff48 	bl	8001db4 <__aeabi_ddiv>
 801cf24:	f7e6 fa10 	bl	8003348 <__aeabi_d2iz>
 801cf28:	9009      	str	r0, [sp, #36]	@ 0x24
 801cf2a:	f7e6 fa49 	bl	80033c0 <__aeabi_i2d>
 801cf2e:	9a06      	ldr	r2, [sp, #24]
 801cf30:	9b07      	ldr	r3, [sp, #28]
 801cf32:	f7e5 fb83 	bl	800263c <__aeabi_dmul>
 801cf36:	0002      	movs	r2, r0
 801cf38:	000b      	movs	r3, r1
 801cf3a:	0030      	movs	r0, r6
 801cf3c:	0039      	movs	r1, r7
 801cf3e:	f7e5 fe45 	bl	8002bcc <__aeabi_dsub>
 801cf42:	002b      	movs	r3, r5
 801cf44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cf46:	3501      	adds	r5, #1
 801cf48:	3230      	adds	r2, #48	@ 0x30
 801cf4a:	701a      	strb	r2, [r3, #0]
 801cf4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cf4e:	002c      	movs	r4, r5
 801cf50:	429a      	cmp	r2, r3
 801cf52:	d000      	beq.n	801cf56 <_dtoa_r+0x4f6>
 801cf54:	e131      	b.n	801d1ba <_dtoa_r+0x75a>
 801cf56:	0002      	movs	r2, r0
 801cf58:	000b      	movs	r3, r1
 801cf5a:	f7e4 fbc7 	bl	80016ec <__aeabi_dadd>
 801cf5e:	9a06      	ldr	r2, [sp, #24]
 801cf60:	9b07      	ldr	r3, [sp, #28]
 801cf62:	0006      	movs	r6, r0
 801cf64:	000f      	movs	r7, r1
 801cf66:	f7e3 fabd 	bl	80004e4 <__aeabi_dcmpgt>
 801cf6a:	2800      	cmp	r0, #0
 801cf6c:	d000      	beq.n	801cf70 <_dtoa_r+0x510>
 801cf6e:	e10f      	b.n	801d190 <_dtoa_r+0x730>
 801cf70:	9a06      	ldr	r2, [sp, #24]
 801cf72:	9b07      	ldr	r3, [sp, #28]
 801cf74:	0030      	movs	r0, r6
 801cf76:	0039      	movs	r1, r7
 801cf78:	f7e3 fa9a 	bl	80004b0 <__aeabi_dcmpeq>
 801cf7c:	2800      	cmp	r0, #0
 801cf7e:	d003      	beq.n	801cf88 <_dtoa_r+0x528>
 801cf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf82:	07dd      	lsls	r5, r3, #31
 801cf84:	d500      	bpl.n	801cf88 <_dtoa_r+0x528>
 801cf86:	e103      	b.n	801d190 <_dtoa_r+0x730>
 801cf88:	9905      	ldr	r1, [sp, #20]
 801cf8a:	9803      	ldr	r0, [sp, #12]
 801cf8c:	f001 f812 	bl	801dfb4 <_Bfree>
 801cf90:	2300      	movs	r3, #0
 801cf92:	7023      	strb	r3, [r4, #0]
 801cf94:	9b04      	ldr	r3, [sp, #16]
 801cf96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cf98:	3301      	adds	r3, #1
 801cf9a:	6013      	str	r3, [r2, #0]
 801cf9c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cf9e:	2b00      	cmp	r3, #0
 801cfa0:	d100      	bne.n	801cfa4 <_dtoa_r+0x544>
 801cfa2:	e5a7      	b.n	801caf4 <_dtoa_r+0x94>
 801cfa4:	601c      	str	r4, [r3, #0]
 801cfa6:	e5a5      	b.n	801caf4 <_dtoa_r+0x94>
 801cfa8:	423d      	tst	r5, r7
 801cfaa:	d005      	beq.n	801cfb8 <_dtoa_r+0x558>
 801cfac:	6832      	ldr	r2, [r6, #0]
 801cfae:	6873      	ldr	r3, [r6, #4]
 801cfb0:	f7e5 fb44 	bl	800263c <__aeabi_dmul>
 801cfb4:	003b      	movs	r3, r7
 801cfb6:	3401      	adds	r4, #1
 801cfb8:	106d      	asrs	r5, r5, #1
 801cfba:	3608      	adds	r6, #8
 801cfbc:	e736      	b.n	801ce2c <_dtoa_r+0x3cc>
 801cfbe:	9b04      	ldr	r3, [sp, #16]
 801cfc0:	930c      	str	r3, [sp, #48]	@ 0x30
 801cfc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cfc4:	e75a      	b.n	801ce7c <_dtoa_r+0x41c>
 801cfc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cfc8:	4b69      	ldr	r3, [pc, #420]	@ (801d170 <_dtoa_r+0x710>)
 801cfca:	3a01      	subs	r2, #1
 801cfcc:	00d2      	lsls	r2, r2, #3
 801cfce:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cfd0:	189b      	adds	r3, r3, r2
 801cfd2:	681a      	ldr	r2, [r3, #0]
 801cfd4:	685b      	ldr	r3, [r3, #4]
 801cfd6:	2900      	cmp	r1, #0
 801cfd8:	d04c      	beq.n	801d074 <_dtoa_r+0x614>
 801cfda:	2000      	movs	r0, #0
 801cfdc:	496b      	ldr	r1, [pc, #428]	@ (801d18c <_dtoa_r+0x72c>)
 801cfde:	f7e4 fee9 	bl	8001db4 <__aeabi_ddiv>
 801cfe2:	0032      	movs	r2, r6
 801cfe4:	003b      	movs	r3, r7
 801cfe6:	f7e5 fdf1 	bl	8002bcc <__aeabi_dsub>
 801cfea:	9a08      	ldr	r2, [sp, #32]
 801cfec:	0006      	movs	r6, r0
 801cfee:	4694      	mov	ip, r2
 801cff0:	000f      	movs	r7, r1
 801cff2:	9b08      	ldr	r3, [sp, #32]
 801cff4:	9316      	str	r3, [sp, #88]	@ 0x58
 801cff6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cff8:	4463      	add	r3, ip
 801cffa:	9311      	str	r3, [sp, #68]	@ 0x44
 801cffc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cffe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d000:	f7e6 f9a2 	bl	8003348 <__aeabi_d2iz>
 801d004:	0005      	movs	r5, r0
 801d006:	f7e6 f9db 	bl	80033c0 <__aeabi_i2d>
 801d00a:	0002      	movs	r2, r0
 801d00c:	000b      	movs	r3, r1
 801d00e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d010:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d012:	f7e5 fddb 	bl	8002bcc <__aeabi_dsub>
 801d016:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d018:	3530      	adds	r5, #48	@ 0x30
 801d01a:	1c5c      	adds	r4, r3, #1
 801d01c:	701d      	strb	r5, [r3, #0]
 801d01e:	0032      	movs	r2, r6
 801d020:	003b      	movs	r3, r7
 801d022:	900a      	str	r0, [sp, #40]	@ 0x28
 801d024:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d026:	f7e3 fa49 	bl	80004bc <__aeabi_dcmplt>
 801d02a:	2800      	cmp	r0, #0
 801d02c:	d16a      	bne.n	801d104 <_dtoa_r+0x6a4>
 801d02e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d030:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d032:	2000      	movs	r0, #0
 801d034:	4950      	ldr	r1, [pc, #320]	@ (801d178 <_dtoa_r+0x718>)
 801d036:	f7e5 fdc9 	bl	8002bcc <__aeabi_dsub>
 801d03a:	0032      	movs	r2, r6
 801d03c:	003b      	movs	r3, r7
 801d03e:	f7e3 fa3d 	bl	80004bc <__aeabi_dcmplt>
 801d042:	2800      	cmp	r0, #0
 801d044:	d000      	beq.n	801d048 <_dtoa_r+0x5e8>
 801d046:	e0a5      	b.n	801d194 <_dtoa_r+0x734>
 801d048:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d04a:	42a3      	cmp	r3, r4
 801d04c:	d100      	bne.n	801d050 <_dtoa_r+0x5f0>
 801d04e:	e742      	b.n	801ced6 <_dtoa_r+0x476>
 801d050:	2200      	movs	r2, #0
 801d052:	0030      	movs	r0, r6
 801d054:	0039      	movs	r1, r7
 801d056:	4b49      	ldr	r3, [pc, #292]	@ (801d17c <_dtoa_r+0x71c>)
 801d058:	f7e5 faf0 	bl	800263c <__aeabi_dmul>
 801d05c:	2200      	movs	r2, #0
 801d05e:	0006      	movs	r6, r0
 801d060:	000f      	movs	r7, r1
 801d062:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d064:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d066:	4b45      	ldr	r3, [pc, #276]	@ (801d17c <_dtoa_r+0x71c>)
 801d068:	f7e5 fae8 	bl	800263c <__aeabi_dmul>
 801d06c:	9416      	str	r4, [sp, #88]	@ 0x58
 801d06e:	900a      	str	r0, [sp, #40]	@ 0x28
 801d070:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d072:	e7c3      	b.n	801cffc <_dtoa_r+0x59c>
 801d074:	0030      	movs	r0, r6
 801d076:	0039      	movs	r1, r7
 801d078:	f7e5 fae0 	bl	800263c <__aeabi_dmul>
 801d07c:	9d08      	ldr	r5, [sp, #32]
 801d07e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801d080:	002b      	movs	r3, r5
 801d082:	4694      	mov	ip, r2
 801d084:	9016      	str	r0, [sp, #88]	@ 0x58
 801d086:	9117      	str	r1, [sp, #92]	@ 0x5c
 801d088:	4463      	add	r3, ip
 801d08a:	9319      	str	r3, [sp, #100]	@ 0x64
 801d08c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d08e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d090:	f7e6 f95a 	bl	8003348 <__aeabi_d2iz>
 801d094:	0004      	movs	r4, r0
 801d096:	f7e6 f993 	bl	80033c0 <__aeabi_i2d>
 801d09a:	000b      	movs	r3, r1
 801d09c:	0002      	movs	r2, r0
 801d09e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d0a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d0a2:	f7e5 fd93 	bl	8002bcc <__aeabi_dsub>
 801d0a6:	3430      	adds	r4, #48	@ 0x30
 801d0a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d0aa:	702c      	strb	r4, [r5, #0]
 801d0ac:	3501      	adds	r5, #1
 801d0ae:	0006      	movs	r6, r0
 801d0b0:	000f      	movs	r7, r1
 801d0b2:	42ab      	cmp	r3, r5
 801d0b4:	d129      	bne.n	801d10a <_dtoa_r+0x6aa>
 801d0b6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801d0b8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d0ba:	9b08      	ldr	r3, [sp, #32]
 801d0bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d0be:	469c      	mov	ip, r3
 801d0c0:	2200      	movs	r2, #0
 801d0c2:	4b32      	ldr	r3, [pc, #200]	@ (801d18c <_dtoa_r+0x72c>)
 801d0c4:	4464      	add	r4, ip
 801d0c6:	f7e4 fb11 	bl	80016ec <__aeabi_dadd>
 801d0ca:	0002      	movs	r2, r0
 801d0cc:	000b      	movs	r3, r1
 801d0ce:	0030      	movs	r0, r6
 801d0d0:	0039      	movs	r1, r7
 801d0d2:	f7e3 fa07 	bl	80004e4 <__aeabi_dcmpgt>
 801d0d6:	2800      	cmp	r0, #0
 801d0d8:	d15c      	bne.n	801d194 <_dtoa_r+0x734>
 801d0da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d0dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d0de:	2000      	movs	r0, #0
 801d0e0:	492a      	ldr	r1, [pc, #168]	@ (801d18c <_dtoa_r+0x72c>)
 801d0e2:	f7e5 fd73 	bl	8002bcc <__aeabi_dsub>
 801d0e6:	0002      	movs	r2, r0
 801d0e8:	000b      	movs	r3, r1
 801d0ea:	0030      	movs	r0, r6
 801d0ec:	0039      	movs	r1, r7
 801d0ee:	f7e3 f9e5 	bl	80004bc <__aeabi_dcmplt>
 801d0f2:	2800      	cmp	r0, #0
 801d0f4:	d100      	bne.n	801d0f8 <_dtoa_r+0x698>
 801d0f6:	e6ee      	b.n	801ced6 <_dtoa_r+0x476>
 801d0f8:	0023      	movs	r3, r4
 801d0fa:	3c01      	subs	r4, #1
 801d0fc:	7822      	ldrb	r2, [r4, #0]
 801d0fe:	2a30      	cmp	r2, #48	@ 0x30
 801d100:	d0fa      	beq.n	801d0f8 <_dtoa_r+0x698>
 801d102:	001c      	movs	r4, r3
 801d104:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d106:	9304      	str	r3, [sp, #16]
 801d108:	e73e      	b.n	801cf88 <_dtoa_r+0x528>
 801d10a:	2200      	movs	r2, #0
 801d10c:	4b1b      	ldr	r3, [pc, #108]	@ (801d17c <_dtoa_r+0x71c>)
 801d10e:	f7e5 fa95 	bl	800263c <__aeabi_dmul>
 801d112:	900a      	str	r0, [sp, #40]	@ 0x28
 801d114:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d116:	e7b9      	b.n	801d08c <_dtoa_r+0x62c>
 801d118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d10c      	bne.n	801d138 <_dtoa_r+0x6d8>
 801d11e:	9806      	ldr	r0, [sp, #24]
 801d120:	9907      	ldr	r1, [sp, #28]
 801d122:	2200      	movs	r2, #0
 801d124:	4b18      	ldr	r3, [pc, #96]	@ (801d188 <_dtoa_r+0x728>)
 801d126:	f7e5 fa89 	bl	800263c <__aeabi_dmul>
 801d12a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d12c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d12e:	f7e3 f9e3 	bl	80004f8 <__aeabi_dcmpge>
 801d132:	2800      	cmp	r0, #0
 801d134:	d100      	bne.n	801d138 <_dtoa_r+0x6d8>
 801d136:	e164      	b.n	801d402 <_dtoa_r+0x9a2>
 801d138:	2600      	movs	r6, #0
 801d13a:	0037      	movs	r7, r6
 801d13c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d13e:	9c08      	ldr	r4, [sp, #32]
 801d140:	43db      	mvns	r3, r3
 801d142:	930c      	str	r3, [sp, #48]	@ 0x30
 801d144:	2300      	movs	r3, #0
 801d146:	9304      	str	r3, [sp, #16]
 801d148:	0031      	movs	r1, r6
 801d14a:	9803      	ldr	r0, [sp, #12]
 801d14c:	f000 ff32 	bl	801dfb4 <_Bfree>
 801d150:	2f00      	cmp	r7, #0
 801d152:	d0d7      	beq.n	801d104 <_dtoa_r+0x6a4>
 801d154:	9b04      	ldr	r3, [sp, #16]
 801d156:	2b00      	cmp	r3, #0
 801d158:	d005      	beq.n	801d166 <_dtoa_r+0x706>
 801d15a:	42bb      	cmp	r3, r7
 801d15c:	d003      	beq.n	801d166 <_dtoa_r+0x706>
 801d15e:	0019      	movs	r1, r3
 801d160:	9803      	ldr	r0, [sp, #12]
 801d162:	f000 ff27 	bl	801dfb4 <_Bfree>
 801d166:	0039      	movs	r1, r7
 801d168:	9803      	ldr	r0, [sp, #12]
 801d16a:	f000 ff23 	bl	801dfb4 <_Bfree>
 801d16e:	e7c9      	b.n	801d104 <_dtoa_r+0x6a4>
 801d170:	080213b0 	.word	0x080213b0
 801d174:	08021388 	.word	0x08021388
 801d178:	3ff00000 	.word	0x3ff00000
 801d17c:	40240000 	.word	0x40240000
 801d180:	401c0000 	.word	0x401c0000
 801d184:	fcc00000 	.word	0xfcc00000
 801d188:	40140000 	.word	0x40140000
 801d18c:	3fe00000 	.word	0x3fe00000
 801d190:	9b04      	ldr	r3, [sp, #16]
 801d192:	930c      	str	r3, [sp, #48]	@ 0x30
 801d194:	0023      	movs	r3, r4
 801d196:	001c      	movs	r4, r3
 801d198:	3b01      	subs	r3, #1
 801d19a:	781a      	ldrb	r2, [r3, #0]
 801d19c:	2a39      	cmp	r2, #57	@ 0x39
 801d19e:	d108      	bne.n	801d1b2 <_dtoa_r+0x752>
 801d1a0:	9a08      	ldr	r2, [sp, #32]
 801d1a2:	429a      	cmp	r2, r3
 801d1a4:	d1f7      	bne.n	801d196 <_dtoa_r+0x736>
 801d1a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d1a8:	9908      	ldr	r1, [sp, #32]
 801d1aa:	3201      	adds	r2, #1
 801d1ac:	920c      	str	r2, [sp, #48]	@ 0x30
 801d1ae:	2230      	movs	r2, #48	@ 0x30
 801d1b0:	700a      	strb	r2, [r1, #0]
 801d1b2:	781a      	ldrb	r2, [r3, #0]
 801d1b4:	3201      	adds	r2, #1
 801d1b6:	701a      	strb	r2, [r3, #0]
 801d1b8:	e7a4      	b.n	801d104 <_dtoa_r+0x6a4>
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	4bc6      	ldr	r3, [pc, #792]	@ (801d4d8 <_dtoa_r+0xa78>)
 801d1be:	f7e5 fa3d 	bl	800263c <__aeabi_dmul>
 801d1c2:	2200      	movs	r2, #0
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	0006      	movs	r6, r0
 801d1c8:	000f      	movs	r7, r1
 801d1ca:	f7e3 f971 	bl	80004b0 <__aeabi_dcmpeq>
 801d1ce:	2800      	cmp	r0, #0
 801d1d0:	d100      	bne.n	801d1d4 <_dtoa_r+0x774>
 801d1d2:	e6a1      	b.n	801cf18 <_dtoa_r+0x4b8>
 801d1d4:	e6d8      	b.n	801cf88 <_dtoa_r+0x528>
 801d1d6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801d1d8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801d1da:	9c06      	ldr	r4, [sp, #24]
 801d1dc:	2f00      	cmp	r7, #0
 801d1de:	d014      	beq.n	801d20a <_dtoa_r+0x7aa>
 801d1e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d1e2:	2a01      	cmp	r2, #1
 801d1e4:	dd00      	ble.n	801d1e8 <_dtoa_r+0x788>
 801d1e6:	e0c8      	b.n	801d37a <_dtoa_r+0x91a>
 801d1e8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d1ea:	2a00      	cmp	r2, #0
 801d1ec:	d100      	bne.n	801d1f0 <_dtoa_r+0x790>
 801d1ee:	e0be      	b.n	801d36e <_dtoa_r+0x90e>
 801d1f0:	4aba      	ldr	r2, [pc, #744]	@ (801d4dc <_dtoa_r+0xa7c>)
 801d1f2:	189b      	adds	r3, r3, r2
 801d1f4:	9a06      	ldr	r2, [sp, #24]
 801d1f6:	2101      	movs	r1, #1
 801d1f8:	18d2      	adds	r2, r2, r3
 801d1fa:	9206      	str	r2, [sp, #24]
 801d1fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d1fe:	9803      	ldr	r0, [sp, #12]
 801d200:	18d3      	adds	r3, r2, r3
 801d202:	930d      	str	r3, [sp, #52]	@ 0x34
 801d204:	f000 ffda 	bl	801e1bc <__i2b>
 801d208:	0007      	movs	r7, r0
 801d20a:	2c00      	cmp	r4, #0
 801d20c:	d00e      	beq.n	801d22c <_dtoa_r+0x7cc>
 801d20e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d210:	2b00      	cmp	r3, #0
 801d212:	dd0b      	ble.n	801d22c <_dtoa_r+0x7cc>
 801d214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d216:	0023      	movs	r3, r4
 801d218:	4294      	cmp	r4, r2
 801d21a:	dd00      	ble.n	801d21e <_dtoa_r+0x7be>
 801d21c:	0013      	movs	r3, r2
 801d21e:	9a06      	ldr	r2, [sp, #24]
 801d220:	1ae4      	subs	r4, r4, r3
 801d222:	1ad2      	subs	r2, r2, r3
 801d224:	9206      	str	r2, [sp, #24]
 801d226:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d228:	1ad3      	subs	r3, r2, r3
 801d22a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d22c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d01f      	beq.n	801d272 <_dtoa_r+0x812>
 801d232:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d234:	2b00      	cmp	r3, #0
 801d236:	d100      	bne.n	801d23a <_dtoa_r+0x7da>
 801d238:	e0b5      	b.n	801d3a6 <_dtoa_r+0x946>
 801d23a:	2d00      	cmp	r5, #0
 801d23c:	d010      	beq.n	801d260 <_dtoa_r+0x800>
 801d23e:	0039      	movs	r1, r7
 801d240:	002a      	movs	r2, r5
 801d242:	9803      	ldr	r0, [sp, #12]
 801d244:	f001 f884 	bl	801e350 <__pow5mult>
 801d248:	9a05      	ldr	r2, [sp, #20]
 801d24a:	0001      	movs	r1, r0
 801d24c:	0007      	movs	r7, r0
 801d24e:	9803      	ldr	r0, [sp, #12]
 801d250:	f000 ffcc 	bl	801e1ec <__multiply>
 801d254:	0006      	movs	r6, r0
 801d256:	9905      	ldr	r1, [sp, #20]
 801d258:	9803      	ldr	r0, [sp, #12]
 801d25a:	f000 feab 	bl	801dfb4 <_Bfree>
 801d25e:	9605      	str	r6, [sp, #20]
 801d260:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d262:	1b5a      	subs	r2, r3, r5
 801d264:	42ab      	cmp	r3, r5
 801d266:	d004      	beq.n	801d272 <_dtoa_r+0x812>
 801d268:	9905      	ldr	r1, [sp, #20]
 801d26a:	9803      	ldr	r0, [sp, #12]
 801d26c:	f001 f870 	bl	801e350 <__pow5mult>
 801d270:	9005      	str	r0, [sp, #20]
 801d272:	2101      	movs	r1, #1
 801d274:	9803      	ldr	r0, [sp, #12]
 801d276:	f000 ffa1 	bl	801e1bc <__i2b>
 801d27a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d27c:	0006      	movs	r6, r0
 801d27e:	2b00      	cmp	r3, #0
 801d280:	d100      	bne.n	801d284 <_dtoa_r+0x824>
 801d282:	e1bc      	b.n	801d5fe <_dtoa_r+0xb9e>
 801d284:	001a      	movs	r2, r3
 801d286:	0001      	movs	r1, r0
 801d288:	9803      	ldr	r0, [sp, #12]
 801d28a:	f001 f861 	bl	801e350 <__pow5mult>
 801d28e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d290:	0006      	movs	r6, r0
 801d292:	2500      	movs	r5, #0
 801d294:	2b01      	cmp	r3, #1
 801d296:	dc16      	bgt.n	801d2c6 <_dtoa_r+0x866>
 801d298:	2500      	movs	r5, #0
 801d29a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d29c:	42ab      	cmp	r3, r5
 801d29e:	d10e      	bne.n	801d2be <_dtoa_r+0x85e>
 801d2a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2a2:	031b      	lsls	r3, r3, #12
 801d2a4:	42ab      	cmp	r3, r5
 801d2a6:	d10a      	bne.n	801d2be <_dtoa_r+0x85e>
 801d2a8:	4b8d      	ldr	r3, [pc, #564]	@ (801d4e0 <_dtoa_r+0xa80>)
 801d2aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d2ac:	4213      	tst	r3, r2
 801d2ae:	d006      	beq.n	801d2be <_dtoa_r+0x85e>
 801d2b0:	9b06      	ldr	r3, [sp, #24]
 801d2b2:	3501      	adds	r5, #1
 801d2b4:	3301      	adds	r3, #1
 801d2b6:	9306      	str	r3, [sp, #24]
 801d2b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2ba:	3301      	adds	r3, #1
 801d2bc:	930d      	str	r3, [sp, #52]	@ 0x34
 801d2be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d2c0:	2001      	movs	r0, #1
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	d008      	beq.n	801d2d8 <_dtoa_r+0x878>
 801d2c6:	6933      	ldr	r3, [r6, #16]
 801d2c8:	3303      	adds	r3, #3
 801d2ca:	009b      	lsls	r3, r3, #2
 801d2cc:	18f3      	adds	r3, r6, r3
 801d2ce:	6858      	ldr	r0, [r3, #4]
 801d2d0:	f000 ff24 	bl	801e11c <__hi0bits>
 801d2d4:	2320      	movs	r3, #32
 801d2d6:	1a18      	subs	r0, r3, r0
 801d2d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2da:	1818      	adds	r0, r3, r0
 801d2dc:	0002      	movs	r2, r0
 801d2de:	231f      	movs	r3, #31
 801d2e0:	401a      	ands	r2, r3
 801d2e2:	4218      	tst	r0, r3
 801d2e4:	d065      	beq.n	801d3b2 <_dtoa_r+0x952>
 801d2e6:	3301      	adds	r3, #1
 801d2e8:	1a9b      	subs	r3, r3, r2
 801d2ea:	2b04      	cmp	r3, #4
 801d2ec:	dd5d      	ble.n	801d3aa <_dtoa_r+0x94a>
 801d2ee:	231c      	movs	r3, #28
 801d2f0:	1a9b      	subs	r3, r3, r2
 801d2f2:	9a06      	ldr	r2, [sp, #24]
 801d2f4:	18e4      	adds	r4, r4, r3
 801d2f6:	18d2      	adds	r2, r2, r3
 801d2f8:	9206      	str	r2, [sp, #24]
 801d2fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d2fc:	18d3      	adds	r3, r2, r3
 801d2fe:	930d      	str	r3, [sp, #52]	@ 0x34
 801d300:	9b06      	ldr	r3, [sp, #24]
 801d302:	2b00      	cmp	r3, #0
 801d304:	dd05      	ble.n	801d312 <_dtoa_r+0x8b2>
 801d306:	001a      	movs	r2, r3
 801d308:	9905      	ldr	r1, [sp, #20]
 801d30a:	9803      	ldr	r0, [sp, #12]
 801d30c:	f001 f87c 	bl	801e408 <__lshift>
 801d310:	9005      	str	r0, [sp, #20]
 801d312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d314:	2b00      	cmp	r3, #0
 801d316:	dd05      	ble.n	801d324 <_dtoa_r+0x8c4>
 801d318:	0031      	movs	r1, r6
 801d31a:	001a      	movs	r2, r3
 801d31c:	9803      	ldr	r0, [sp, #12]
 801d31e:	f001 f873 	bl	801e408 <__lshift>
 801d322:	0006      	movs	r6, r0
 801d324:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d326:	2b00      	cmp	r3, #0
 801d328:	d045      	beq.n	801d3b6 <_dtoa_r+0x956>
 801d32a:	0031      	movs	r1, r6
 801d32c:	9805      	ldr	r0, [sp, #20]
 801d32e:	f001 f8d7 	bl	801e4e0 <__mcmp>
 801d332:	2800      	cmp	r0, #0
 801d334:	da3f      	bge.n	801d3b6 <_dtoa_r+0x956>
 801d336:	9b04      	ldr	r3, [sp, #16]
 801d338:	220a      	movs	r2, #10
 801d33a:	3b01      	subs	r3, #1
 801d33c:	930c      	str	r3, [sp, #48]	@ 0x30
 801d33e:	9905      	ldr	r1, [sp, #20]
 801d340:	2300      	movs	r3, #0
 801d342:	9803      	ldr	r0, [sp, #12]
 801d344:	f000 fe5a 	bl	801dffc <__multadd>
 801d348:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d34a:	9005      	str	r0, [sp, #20]
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d100      	bne.n	801d352 <_dtoa_r+0x8f2>
 801d350:	e15c      	b.n	801d60c <_dtoa_r+0xbac>
 801d352:	2300      	movs	r3, #0
 801d354:	0039      	movs	r1, r7
 801d356:	220a      	movs	r2, #10
 801d358:	9803      	ldr	r0, [sp, #12]
 801d35a:	f000 fe4f 	bl	801dffc <__multadd>
 801d35e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d360:	0007      	movs	r7, r0
 801d362:	2b00      	cmp	r3, #0
 801d364:	dc55      	bgt.n	801d412 <_dtoa_r+0x9b2>
 801d366:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d368:	2b02      	cmp	r3, #2
 801d36a:	dc2d      	bgt.n	801d3c8 <_dtoa_r+0x968>
 801d36c:	e051      	b.n	801d412 <_dtoa_r+0x9b2>
 801d36e:	2336      	movs	r3, #54	@ 0x36
 801d370:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d372:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801d374:	9c06      	ldr	r4, [sp, #24]
 801d376:	1a9b      	subs	r3, r3, r2
 801d378:	e73c      	b.n	801d1f4 <_dtoa_r+0x794>
 801d37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d37c:	1e5d      	subs	r5, r3, #1
 801d37e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d380:	42ab      	cmp	r3, r5
 801d382:	db08      	blt.n	801d396 <_dtoa_r+0x936>
 801d384:	1b5d      	subs	r5, r3, r5
 801d386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d388:	9c06      	ldr	r4, [sp, #24]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	db00      	blt.n	801d390 <_dtoa_r+0x930>
 801d38e:	e731      	b.n	801d1f4 <_dtoa_r+0x794>
 801d390:	1ae4      	subs	r4, r4, r3
 801d392:	2300      	movs	r3, #0
 801d394:	e72e      	b.n	801d1f4 <_dtoa_r+0x794>
 801d396:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d398:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d39a:	1aeb      	subs	r3, r5, r3
 801d39c:	18d3      	adds	r3, r2, r3
 801d39e:	950f      	str	r5, [sp, #60]	@ 0x3c
 801d3a0:	9314      	str	r3, [sp, #80]	@ 0x50
 801d3a2:	2500      	movs	r5, #0
 801d3a4:	e7ef      	b.n	801d386 <_dtoa_r+0x926>
 801d3a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d3a8:	e75e      	b.n	801d268 <_dtoa_r+0x808>
 801d3aa:	2b04      	cmp	r3, #4
 801d3ac:	d0a8      	beq.n	801d300 <_dtoa_r+0x8a0>
 801d3ae:	331c      	adds	r3, #28
 801d3b0:	e79f      	b.n	801d2f2 <_dtoa_r+0x892>
 801d3b2:	0013      	movs	r3, r2
 801d3b4:	e7fb      	b.n	801d3ae <_dtoa_r+0x94e>
 801d3b6:	9b04      	ldr	r3, [sp, #16]
 801d3b8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d3ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3bc:	930e      	str	r3, [sp, #56]	@ 0x38
 801d3be:	2b00      	cmp	r3, #0
 801d3c0:	dc23      	bgt.n	801d40a <_dtoa_r+0x9aa>
 801d3c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d3c4:	2b02      	cmp	r3, #2
 801d3c6:	dd20      	ble.n	801d40a <_dtoa_r+0x9aa>
 801d3c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d000      	beq.n	801d3d0 <_dtoa_r+0x970>
 801d3ce:	e6b5      	b.n	801d13c <_dtoa_r+0x6dc>
 801d3d0:	0031      	movs	r1, r6
 801d3d2:	2205      	movs	r2, #5
 801d3d4:	9803      	ldr	r0, [sp, #12]
 801d3d6:	f000 fe11 	bl	801dffc <__multadd>
 801d3da:	0006      	movs	r6, r0
 801d3dc:	0001      	movs	r1, r0
 801d3de:	9805      	ldr	r0, [sp, #20]
 801d3e0:	f001 f87e 	bl	801e4e0 <__mcmp>
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	dc00      	bgt.n	801d3ea <_dtoa_r+0x98a>
 801d3e8:	e6a8      	b.n	801d13c <_dtoa_r+0x6dc>
 801d3ea:	9b08      	ldr	r3, [sp, #32]
 801d3ec:	9a08      	ldr	r2, [sp, #32]
 801d3ee:	1c5c      	adds	r4, r3, #1
 801d3f0:	2331      	movs	r3, #49	@ 0x31
 801d3f2:	7013      	strb	r3, [r2, #0]
 801d3f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d3f6:	3301      	adds	r3, #1
 801d3f8:	930c      	str	r3, [sp, #48]	@ 0x30
 801d3fa:	e6a3      	b.n	801d144 <_dtoa_r+0x6e4>
 801d3fc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d3fe:	0037      	movs	r7, r6
 801d400:	e7f3      	b.n	801d3ea <_dtoa_r+0x98a>
 801d402:	9b04      	ldr	r3, [sp, #16]
 801d404:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801d406:	930c      	str	r3, [sp, #48]	@ 0x30
 801d408:	e7f9      	b.n	801d3fe <_dtoa_r+0x99e>
 801d40a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d100      	bne.n	801d412 <_dtoa_r+0x9b2>
 801d410:	e100      	b.n	801d614 <_dtoa_r+0xbb4>
 801d412:	2c00      	cmp	r4, #0
 801d414:	dd05      	ble.n	801d422 <_dtoa_r+0x9c2>
 801d416:	0039      	movs	r1, r7
 801d418:	0022      	movs	r2, r4
 801d41a:	9803      	ldr	r0, [sp, #12]
 801d41c:	f000 fff4 	bl	801e408 <__lshift>
 801d420:	0007      	movs	r7, r0
 801d422:	0038      	movs	r0, r7
 801d424:	2d00      	cmp	r5, #0
 801d426:	d018      	beq.n	801d45a <_dtoa_r+0x9fa>
 801d428:	6879      	ldr	r1, [r7, #4]
 801d42a:	9803      	ldr	r0, [sp, #12]
 801d42c:	f000 fd7e 	bl	801df2c <_Balloc>
 801d430:	1e04      	subs	r4, r0, #0
 801d432:	d105      	bne.n	801d440 <_dtoa_r+0x9e0>
 801d434:	0022      	movs	r2, r4
 801d436:	4b2b      	ldr	r3, [pc, #172]	@ (801d4e4 <_dtoa_r+0xa84>)
 801d438:	482b      	ldr	r0, [pc, #172]	@ (801d4e8 <_dtoa_r+0xa88>)
 801d43a:	492c      	ldr	r1, [pc, #176]	@ (801d4ec <_dtoa_r+0xa8c>)
 801d43c:	f7ff fb25 	bl	801ca8a <_dtoa_r+0x2a>
 801d440:	0039      	movs	r1, r7
 801d442:	693a      	ldr	r2, [r7, #16]
 801d444:	310c      	adds	r1, #12
 801d446:	3202      	adds	r2, #2
 801d448:	0092      	lsls	r2, r2, #2
 801d44a:	300c      	adds	r0, #12
 801d44c:	f7ff fa6a 	bl	801c924 <memcpy>
 801d450:	2201      	movs	r2, #1
 801d452:	0021      	movs	r1, r4
 801d454:	9803      	ldr	r0, [sp, #12]
 801d456:	f000 ffd7 	bl	801e408 <__lshift>
 801d45a:	9b08      	ldr	r3, [sp, #32]
 801d45c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d45e:	9306      	str	r3, [sp, #24]
 801d460:	3b01      	subs	r3, #1
 801d462:	189b      	adds	r3, r3, r2
 801d464:	2201      	movs	r2, #1
 801d466:	9704      	str	r7, [sp, #16]
 801d468:	0007      	movs	r7, r0
 801d46a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d46e:	4013      	ands	r3, r2
 801d470:	930e      	str	r3, [sp, #56]	@ 0x38
 801d472:	0031      	movs	r1, r6
 801d474:	9805      	ldr	r0, [sp, #20]
 801d476:	f7ff fa65 	bl	801c944 <quorem>
 801d47a:	9904      	ldr	r1, [sp, #16]
 801d47c:	0005      	movs	r5, r0
 801d47e:	900a      	str	r0, [sp, #40]	@ 0x28
 801d480:	9805      	ldr	r0, [sp, #20]
 801d482:	f001 f82d 	bl	801e4e0 <__mcmp>
 801d486:	003a      	movs	r2, r7
 801d488:	900d      	str	r0, [sp, #52]	@ 0x34
 801d48a:	0031      	movs	r1, r6
 801d48c:	9803      	ldr	r0, [sp, #12]
 801d48e:	f001 f843 	bl	801e518 <__mdiff>
 801d492:	2201      	movs	r2, #1
 801d494:	68c3      	ldr	r3, [r0, #12]
 801d496:	0004      	movs	r4, r0
 801d498:	3530      	adds	r5, #48	@ 0x30
 801d49a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d104      	bne.n	801d4aa <_dtoa_r+0xa4a>
 801d4a0:	0001      	movs	r1, r0
 801d4a2:	9805      	ldr	r0, [sp, #20]
 801d4a4:	f001 f81c 	bl	801e4e0 <__mcmp>
 801d4a8:	9009      	str	r0, [sp, #36]	@ 0x24
 801d4aa:	0021      	movs	r1, r4
 801d4ac:	9803      	ldr	r0, [sp, #12]
 801d4ae:	f000 fd81 	bl	801dfb4 <_Bfree>
 801d4b2:	9b06      	ldr	r3, [sp, #24]
 801d4b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4b6:	1c5c      	adds	r4, r3, #1
 801d4b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d4ba:	4313      	orrs	r3, r2
 801d4bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d4be:	4313      	orrs	r3, r2
 801d4c0:	d116      	bne.n	801d4f0 <_dtoa_r+0xa90>
 801d4c2:	2d39      	cmp	r5, #57	@ 0x39
 801d4c4:	d02f      	beq.n	801d526 <_dtoa_r+0xac6>
 801d4c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	dd01      	ble.n	801d4d0 <_dtoa_r+0xa70>
 801d4cc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801d4ce:	3531      	adds	r5, #49	@ 0x31
 801d4d0:	9b06      	ldr	r3, [sp, #24]
 801d4d2:	701d      	strb	r5, [r3, #0]
 801d4d4:	e638      	b.n	801d148 <_dtoa_r+0x6e8>
 801d4d6:	46c0      	nop			@ (mov r8, r8)
 801d4d8:	40240000 	.word	0x40240000
 801d4dc:	00000433 	.word	0x00000433
 801d4e0:	7ff00000 	.word	0x7ff00000
 801d4e4:	080212b1 	.word	0x080212b1
 801d4e8:	08021259 	.word	0x08021259
 801d4ec:	000002ef 	.word	0x000002ef
 801d4f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	db04      	blt.n	801d500 <_dtoa_r+0xaa0>
 801d4f6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d4f8:	4313      	orrs	r3, r2
 801d4fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d4fc:	4313      	orrs	r3, r2
 801d4fe:	d11e      	bne.n	801d53e <_dtoa_r+0xade>
 801d500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d502:	2b00      	cmp	r3, #0
 801d504:	dde4      	ble.n	801d4d0 <_dtoa_r+0xa70>
 801d506:	9905      	ldr	r1, [sp, #20]
 801d508:	2201      	movs	r2, #1
 801d50a:	9803      	ldr	r0, [sp, #12]
 801d50c:	f000 ff7c 	bl	801e408 <__lshift>
 801d510:	0031      	movs	r1, r6
 801d512:	9005      	str	r0, [sp, #20]
 801d514:	f000 ffe4 	bl	801e4e0 <__mcmp>
 801d518:	2800      	cmp	r0, #0
 801d51a:	dc02      	bgt.n	801d522 <_dtoa_r+0xac2>
 801d51c:	d1d8      	bne.n	801d4d0 <_dtoa_r+0xa70>
 801d51e:	07eb      	lsls	r3, r5, #31
 801d520:	d5d6      	bpl.n	801d4d0 <_dtoa_r+0xa70>
 801d522:	2d39      	cmp	r5, #57	@ 0x39
 801d524:	d1d2      	bne.n	801d4cc <_dtoa_r+0xa6c>
 801d526:	2339      	movs	r3, #57	@ 0x39
 801d528:	9a06      	ldr	r2, [sp, #24]
 801d52a:	7013      	strb	r3, [r2, #0]
 801d52c:	0023      	movs	r3, r4
 801d52e:	001c      	movs	r4, r3
 801d530:	3b01      	subs	r3, #1
 801d532:	781a      	ldrb	r2, [r3, #0]
 801d534:	2a39      	cmp	r2, #57	@ 0x39
 801d536:	d04f      	beq.n	801d5d8 <_dtoa_r+0xb78>
 801d538:	3201      	adds	r2, #1
 801d53a:	701a      	strb	r2, [r3, #0]
 801d53c:	e604      	b.n	801d148 <_dtoa_r+0x6e8>
 801d53e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d540:	2b00      	cmp	r3, #0
 801d542:	dd03      	ble.n	801d54c <_dtoa_r+0xaec>
 801d544:	2d39      	cmp	r5, #57	@ 0x39
 801d546:	d0ee      	beq.n	801d526 <_dtoa_r+0xac6>
 801d548:	3501      	adds	r5, #1
 801d54a:	e7c1      	b.n	801d4d0 <_dtoa_r+0xa70>
 801d54c:	9b06      	ldr	r3, [sp, #24]
 801d54e:	9a06      	ldr	r2, [sp, #24]
 801d550:	701d      	strb	r5, [r3, #0]
 801d552:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d554:	4293      	cmp	r3, r2
 801d556:	d02a      	beq.n	801d5ae <_dtoa_r+0xb4e>
 801d558:	2300      	movs	r3, #0
 801d55a:	220a      	movs	r2, #10
 801d55c:	9905      	ldr	r1, [sp, #20]
 801d55e:	9803      	ldr	r0, [sp, #12]
 801d560:	f000 fd4c 	bl	801dffc <__multadd>
 801d564:	9b04      	ldr	r3, [sp, #16]
 801d566:	9005      	str	r0, [sp, #20]
 801d568:	42bb      	cmp	r3, r7
 801d56a:	d109      	bne.n	801d580 <_dtoa_r+0xb20>
 801d56c:	2300      	movs	r3, #0
 801d56e:	220a      	movs	r2, #10
 801d570:	9904      	ldr	r1, [sp, #16]
 801d572:	9803      	ldr	r0, [sp, #12]
 801d574:	f000 fd42 	bl	801dffc <__multadd>
 801d578:	9004      	str	r0, [sp, #16]
 801d57a:	0007      	movs	r7, r0
 801d57c:	9406      	str	r4, [sp, #24]
 801d57e:	e778      	b.n	801d472 <_dtoa_r+0xa12>
 801d580:	9904      	ldr	r1, [sp, #16]
 801d582:	2300      	movs	r3, #0
 801d584:	220a      	movs	r2, #10
 801d586:	9803      	ldr	r0, [sp, #12]
 801d588:	f000 fd38 	bl	801dffc <__multadd>
 801d58c:	2300      	movs	r3, #0
 801d58e:	9004      	str	r0, [sp, #16]
 801d590:	220a      	movs	r2, #10
 801d592:	0039      	movs	r1, r7
 801d594:	9803      	ldr	r0, [sp, #12]
 801d596:	f000 fd31 	bl	801dffc <__multadd>
 801d59a:	e7ee      	b.n	801d57a <_dtoa_r+0xb1a>
 801d59c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d59e:	2401      	movs	r4, #1
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	dd00      	ble.n	801d5a6 <_dtoa_r+0xb46>
 801d5a4:	001c      	movs	r4, r3
 801d5a6:	9b08      	ldr	r3, [sp, #32]
 801d5a8:	191c      	adds	r4, r3, r4
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	9304      	str	r3, [sp, #16]
 801d5ae:	9905      	ldr	r1, [sp, #20]
 801d5b0:	2201      	movs	r2, #1
 801d5b2:	9803      	ldr	r0, [sp, #12]
 801d5b4:	f000 ff28 	bl	801e408 <__lshift>
 801d5b8:	0031      	movs	r1, r6
 801d5ba:	9005      	str	r0, [sp, #20]
 801d5bc:	f000 ff90 	bl	801e4e0 <__mcmp>
 801d5c0:	2800      	cmp	r0, #0
 801d5c2:	dcb3      	bgt.n	801d52c <_dtoa_r+0xacc>
 801d5c4:	d101      	bne.n	801d5ca <_dtoa_r+0xb6a>
 801d5c6:	07ed      	lsls	r5, r5, #31
 801d5c8:	d4b0      	bmi.n	801d52c <_dtoa_r+0xacc>
 801d5ca:	0023      	movs	r3, r4
 801d5cc:	001c      	movs	r4, r3
 801d5ce:	3b01      	subs	r3, #1
 801d5d0:	781a      	ldrb	r2, [r3, #0]
 801d5d2:	2a30      	cmp	r2, #48	@ 0x30
 801d5d4:	d0fa      	beq.n	801d5cc <_dtoa_r+0xb6c>
 801d5d6:	e5b7      	b.n	801d148 <_dtoa_r+0x6e8>
 801d5d8:	9a08      	ldr	r2, [sp, #32]
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	d1a7      	bne.n	801d52e <_dtoa_r+0xace>
 801d5de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d5e0:	3301      	adds	r3, #1
 801d5e2:	930c      	str	r3, [sp, #48]	@ 0x30
 801d5e4:	2331      	movs	r3, #49	@ 0x31
 801d5e6:	7013      	strb	r3, [r2, #0]
 801d5e8:	e5ae      	b.n	801d148 <_dtoa_r+0x6e8>
 801d5ea:	4b15      	ldr	r3, [pc, #84]	@ (801d640 <_dtoa_r+0xbe0>)
 801d5ec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801d5ee:	9308      	str	r3, [sp, #32]
 801d5f0:	4b14      	ldr	r3, [pc, #80]	@ (801d644 <_dtoa_r+0xbe4>)
 801d5f2:	2a00      	cmp	r2, #0
 801d5f4:	d001      	beq.n	801d5fa <_dtoa_r+0xb9a>
 801d5f6:	f7ff fa7b 	bl	801caf0 <_dtoa_r+0x90>
 801d5fa:	f7ff fa7b 	bl	801caf4 <_dtoa_r+0x94>
 801d5fe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d600:	2b01      	cmp	r3, #1
 801d602:	dc00      	bgt.n	801d606 <_dtoa_r+0xba6>
 801d604:	e648      	b.n	801d298 <_dtoa_r+0x838>
 801d606:	2001      	movs	r0, #1
 801d608:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d60a:	e665      	b.n	801d2d8 <_dtoa_r+0x878>
 801d60c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d60e:	2b00      	cmp	r3, #0
 801d610:	dc00      	bgt.n	801d614 <_dtoa_r+0xbb4>
 801d612:	e6d6      	b.n	801d3c2 <_dtoa_r+0x962>
 801d614:	2400      	movs	r4, #0
 801d616:	0031      	movs	r1, r6
 801d618:	9805      	ldr	r0, [sp, #20]
 801d61a:	f7ff f993 	bl	801c944 <quorem>
 801d61e:	9b08      	ldr	r3, [sp, #32]
 801d620:	3030      	adds	r0, #48	@ 0x30
 801d622:	5518      	strb	r0, [r3, r4]
 801d624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d626:	3401      	adds	r4, #1
 801d628:	0005      	movs	r5, r0
 801d62a:	429c      	cmp	r4, r3
 801d62c:	dab6      	bge.n	801d59c <_dtoa_r+0xb3c>
 801d62e:	2300      	movs	r3, #0
 801d630:	220a      	movs	r2, #10
 801d632:	9905      	ldr	r1, [sp, #20]
 801d634:	9803      	ldr	r0, [sp, #12]
 801d636:	f000 fce1 	bl	801dffc <__multadd>
 801d63a:	9005      	str	r0, [sp, #20]
 801d63c:	e7eb      	b.n	801d616 <_dtoa_r+0xbb6>
 801d63e:	46c0      	nop			@ (mov r8, r8)
 801d640:	08021235 	.word	0x08021235
 801d644:	0802123d 	.word	0x0802123d

0801d648 <_free_r>:
 801d648:	b570      	push	{r4, r5, r6, lr}
 801d64a:	0005      	movs	r5, r0
 801d64c:	1e0c      	subs	r4, r1, #0
 801d64e:	d010      	beq.n	801d672 <_free_r+0x2a>
 801d650:	3c04      	subs	r4, #4
 801d652:	6823      	ldr	r3, [r4, #0]
 801d654:	2b00      	cmp	r3, #0
 801d656:	da00      	bge.n	801d65a <_free_r+0x12>
 801d658:	18e4      	adds	r4, r4, r3
 801d65a:	0028      	movs	r0, r5
 801d65c:	f000 fc56 	bl	801df0c <__malloc_lock>
 801d660:	4a1d      	ldr	r2, [pc, #116]	@ (801d6d8 <_free_r+0x90>)
 801d662:	6813      	ldr	r3, [r2, #0]
 801d664:	2b00      	cmp	r3, #0
 801d666:	d105      	bne.n	801d674 <_free_r+0x2c>
 801d668:	6063      	str	r3, [r4, #4]
 801d66a:	6014      	str	r4, [r2, #0]
 801d66c:	0028      	movs	r0, r5
 801d66e:	f000 fc55 	bl	801df1c <__malloc_unlock>
 801d672:	bd70      	pop	{r4, r5, r6, pc}
 801d674:	42a3      	cmp	r3, r4
 801d676:	d908      	bls.n	801d68a <_free_r+0x42>
 801d678:	6820      	ldr	r0, [r4, #0]
 801d67a:	1821      	adds	r1, r4, r0
 801d67c:	428b      	cmp	r3, r1
 801d67e:	d1f3      	bne.n	801d668 <_free_r+0x20>
 801d680:	6819      	ldr	r1, [r3, #0]
 801d682:	685b      	ldr	r3, [r3, #4]
 801d684:	1809      	adds	r1, r1, r0
 801d686:	6021      	str	r1, [r4, #0]
 801d688:	e7ee      	b.n	801d668 <_free_r+0x20>
 801d68a:	001a      	movs	r2, r3
 801d68c:	685b      	ldr	r3, [r3, #4]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d001      	beq.n	801d696 <_free_r+0x4e>
 801d692:	42a3      	cmp	r3, r4
 801d694:	d9f9      	bls.n	801d68a <_free_r+0x42>
 801d696:	6811      	ldr	r1, [r2, #0]
 801d698:	1850      	adds	r0, r2, r1
 801d69a:	42a0      	cmp	r0, r4
 801d69c:	d10b      	bne.n	801d6b6 <_free_r+0x6e>
 801d69e:	6820      	ldr	r0, [r4, #0]
 801d6a0:	1809      	adds	r1, r1, r0
 801d6a2:	1850      	adds	r0, r2, r1
 801d6a4:	6011      	str	r1, [r2, #0]
 801d6a6:	4283      	cmp	r3, r0
 801d6a8:	d1e0      	bne.n	801d66c <_free_r+0x24>
 801d6aa:	6818      	ldr	r0, [r3, #0]
 801d6ac:	685b      	ldr	r3, [r3, #4]
 801d6ae:	1841      	adds	r1, r0, r1
 801d6b0:	6011      	str	r1, [r2, #0]
 801d6b2:	6053      	str	r3, [r2, #4]
 801d6b4:	e7da      	b.n	801d66c <_free_r+0x24>
 801d6b6:	42a0      	cmp	r0, r4
 801d6b8:	d902      	bls.n	801d6c0 <_free_r+0x78>
 801d6ba:	230c      	movs	r3, #12
 801d6bc:	602b      	str	r3, [r5, #0]
 801d6be:	e7d5      	b.n	801d66c <_free_r+0x24>
 801d6c0:	6820      	ldr	r0, [r4, #0]
 801d6c2:	1821      	adds	r1, r4, r0
 801d6c4:	428b      	cmp	r3, r1
 801d6c6:	d103      	bne.n	801d6d0 <_free_r+0x88>
 801d6c8:	6819      	ldr	r1, [r3, #0]
 801d6ca:	685b      	ldr	r3, [r3, #4]
 801d6cc:	1809      	adds	r1, r1, r0
 801d6ce:	6021      	str	r1, [r4, #0]
 801d6d0:	6063      	str	r3, [r4, #4]
 801d6d2:	6054      	str	r4, [r2, #4]
 801d6d4:	e7ca      	b.n	801d66c <_free_r+0x24>
 801d6d6:	46c0      	nop			@ (mov r8, r8)
 801d6d8:	200038c0 	.word	0x200038c0

0801d6dc <rshift>:
 801d6dc:	0002      	movs	r2, r0
 801d6de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6e0:	6904      	ldr	r4, [r0, #16]
 801d6e2:	b085      	sub	sp, #20
 801d6e4:	3214      	adds	r2, #20
 801d6e6:	114b      	asrs	r3, r1, #5
 801d6e8:	0016      	movs	r6, r2
 801d6ea:	9302      	str	r3, [sp, #8]
 801d6ec:	429c      	cmp	r4, r3
 801d6ee:	dd31      	ble.n	801d754 <rshift+0x78>
 801d6f0:	261f      	movs	r6, #31
 801d6f2:	000f      	movs	r7, r1
 801d6f4:	009b      	lsls	r3, r3, #2
 801d6f6:	00a5      	lsls	r5, r4, #2
 801d6f8:	18d3      	adds	r3, r2, r3
 801d6fa:	4037      	ands	r7, r6
 801d6fc:	1955      	adds	r5, r2, r5
 801d6fe:	9300      	str	r3, [sp, #0]
 801d700:	9701      	str	r7, [sp, #4]
 801d702:	4231      	tst	r1, r6
 801d704:	d10d      	bne.n	801d722 <rshift+0x46>
 801d706:	0016      	movs	r6, r2
 801d708:	0019      	movs	r1, r3
 801d70a:	428d      	cmp	r5, r1
 801d70c:	d836      	bhi.n	801d77c <rshift+0xa0>
 801d70e:	9b00      	ldr	r3, [sp, #0]
 801d710:	2600      	movs	r6, #0
 801d712:	3b03      	subs	r3, #3
 801d714:	429d      	cmp	r5, r3
 801d716:	d302      	bcc.n	801d71e <rshift+0x42>
 801d718:	9b02      	ldr	r3, [sp, #8]
 801d71a:	1ae4      	subs	r4, r4, r3
 801d71c:	00a6      	lsls	r6, r4, #2
 801d71e:	1996      	adds	r6, r2, r6
 801d720:	e018      	b.n	801d754 <rshift+0x78>
 801d722:	2120      	movs	r1, #32
 801d724:	9e01      	ldr	r6, [sp, #4]
 801d726:	9f01      	ldr	r7, [sp, #4]
 801d728:	1b89      	subs	r1, r1, r6
 801d72a:	9e00      	ldr	r6, [sp, #0]
 801d72c:	9103      	str	r1, [sp, #12]
 801d72e:	ce02      	ldmia	r6!, {r1}
 801d730:	4694      	mov	ip, r2
 801d732:	40f9      	lsrs	r1, r7
 801d734:	42b5      	cmp	r5, r6
 801d736:	d816      	bhi.n	801d766 <rshift+0x8a>
 801d738:	9b00      	ldr	r3, [sp, #0]
 801d73a:	2600      	movs	r6, #0
 801d73c:	3301      	adds	r3, #1
 801d73e:	429d      	cmp	r5, r3
 801d740:	d303      	bcc.n	801d74a <rshift+0x6e>
 801d742:	9b02      	ldr	r3, [sp, #8]
 801d744:	1ae4      	subs	r4, r4, r3
 801d746:	00a6      	lsls	r6, r4, #2
 801d748:	3e04      	subs	r6, #4
 801d74a:	1996      	adds	r6, r2, r6
 801d74c:	6031      	str	r1, [r6, #0]
 801d74e:	2900      	cmp	r1, #0
 801d750:	d000      	beq.n	801d754 <rshift+0x78>
 801d752:	3604      	adds	r6, #4
 801d754:	1ab1      	subs	r1, r6, r2
 801d756:	1089      	asrs	r1, r1, #2
 801d758:	6101      	str	r1, [r0, #16]
 801d75a:	4296      	cmp	r6, r2
 801d75c:	d101      	bne.n	801d762 <rshift+0x86>
 801d75e:	2300      	movs	r3, #0
 801d760:	6143      	str	r3, [r0, #20]
 801d762:	b005      	add	sp, #20
 801d764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d766:	6837      	ldr	r7, [r6, #0]
 801d768:	9b03      	ldr	r3, [sp, #12]
 801d76a:	409f      	lsls	r7, r3
 801d76c:	430f      	orrs	r7, r1
 801d76e:	4661      	mov	r1, ip
 801d770:	c180      	stmia	r1!, {r7}
 801d772:	468c      	mov	ip, r1
 801d774:	9b01      	ldr	r3, [sp, #4]
 801d776:	ce02      	ldmia	r6!, {r1}
 801d778:	40d9      	lsrs	r1, r3
 801d77a:	e7db      	b.n	801d734 <rshift+0x58>
 801d77c:	c980      	ldmia	r1!, {r7}
 801d77e:	c680      	stmia	r6!, {r7}
 801d780:	e7c3      	b.n	801d70a <rshift+0x2e>

0801d782 <__hexdig_fun>:
 801d782:	0002      	movs	r2, r0
 801d784:	3a30      	subs	r2, #48	@ 0x30
 801d786:	0003      	movs	r3, r0
 801d788:	2a09      	cmp	r2, #9
 801d78a:	d802      	bhi.n	801d792 <__hexdig_fun+0x10>
 801d78c:	3b20      	subs	r3, #32
 801d78e:	b2d8      	uxtb	r0, r3
 801d790:	4770      	bx	lr
 801d792:	0002      	movs	r2, r0
 801d794:	3a61      	subs	r2, #97	@ 0x61
 801d796:	2a05      	cmp	r2, #5
 801d798:	d801      	bhi.n	801d79e <__hexdig_fun+0x1c>
 801d79a:	3b47      	subs	r3, #71	@ 0x47
 801d79c:	e7f7      	b.n	801d78e <__hexdig_fun+0xc>
 801d79e:	001a      	movs	r2, r3
 801d7a0:	3a41      	subs	r2, #65	@ 0x41
 801d7a2:	2000      	movs	r0, #0
 801d7a4:	2a05      	cmp	r2, #5
 801d7a6:	d8f3      	bhi.n	801d790 <__hexdig_fun+0xe>
 801d7a8:	3b27      	subs	r3, #39	@ 0x27
 801d7aa:	e7f0      	b.n	801d78e <__hexdig_fun+0xc>

0801d7ac <__gethex>:
 801d7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d7ae:	b089      	sub	sp, #36	@ 0x24
 801d7b0:	9307      	str	r3, [sp, #28]
 801d7b2:	680b      	ldr	r3, [r1, #0]
 801d7b4:	9201      	str	r2, [sp, #4]
 801d7b6:	9003      	str	r0, [sp, #12]
 801d7b8:	9106      	str	r1, [sp, #24]
 801d7ba:	1c9a      	adds	r2, r3, #2
 801d7bc:	0011      	movs	r1, r2
 801d7be:	3201      	adds	r2, #1
 801d7c0:	1e50      	subs	r0, r2, #1
 801d7c2:	7800      	ldrb	r0, [r0, #0]
 801d7c4:	2830      	cmp	r0, #48	@ 0x30
 801d7c6:	d0f9      	beq.n	801d7bc <__gethex+0x10>
 801d7c8:	1acb      	subs	r3, r1, r3
 801d7ca:	3b02      	subs	r3, #2
 801d7cc:	9305      	str	r3, [sp, #20]
 801d7ce:	9100      	str	r1, [sp, #0]
 801d7d0:	f7ff ffd7 	bl	801d782 <__hexdig_fun>
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	001d      	movs	r5, r3
 801d7d8:	9302      	str	r3, [sp, #8]
 801d7da:	4298      	cmp	r0, r3
 801d7dc:	d11e      	bne.n	801d81c <__gethex+0x70>
 801d7de:	2201      	movs	r2, #1
 801d7e0:	49a6      	ldr	r1, [pc, #664]	@ (801da7c <__gethex+0x2d0>)
 801d7e2:	9800      	ldr	r0, [sp, #0]
 801d7e4:	f7fe ffd8 	bl	801c798 <strncmp>
 801d7e8:	0007      	movs	r7, r0
 801d7ea:	42a8      	cmp	r0, r5
 801d7ec:	d000      	beq.n	801d7f0 <__gethex+0x44>
 801d7ee:	e06a      	b.n	801d8c6 <__gethex+0x11a>
 801d7f0:	9b00      	ldr	r3, [sp, #0]
 801d7f2:	7858      	ldrb	r0, [r3, #1]
 801d7f4:	1c5c      	adds	r4, r3, #1
 801d7f6:	f7ff ffc4 	bl	801d782 <__hexdig_fun>
 801d7fa:	2301      	movs	r3, #1
 801d7fc:	9302      	str	r3, [sp, #8]
 801d7fe:	42a8      	cmp	r0, r5
 801d800:	d02f      	beq.n	801d862 <__gethex+0xb6>
 801d802:	9400      	str	r4, [sp, #0]
 801d804:	9b00      	ldr	r3, [sp, #0]
 801d806:	7818      	ldrb	r0, [r3, #0]
 801d808:	2830      	cmp	r0, #48	@ 0x30
 801d80a:	d009      	beq.n	801d820 <__gethex+0x74>
 801d80c:	f7ff ffb9 	bl	801d782 <__hexdig_fun>
 801d810:	4242      	negs	r2, r0
 801d812:	4142      	adcs	r2, r0
 801d814:	2301      	movs	r3, #1
 801d816:	0025      	movs	r5, r4
 801d818:	9202      	str	r2, [sp, #8]
 801d81a:	9305      	str	r3, [sp, #20]
 801d81c:	9c00      	ldr	r4, [sp, #0]
 801d81e:	e004      	b.n	801d82a <__gethex+0x7e>
 801d820:	9b00      	ldr	r3, [sp, #0]
 801d822:	3301      	adds	r3, #1
 801d824:	9300      	str	r3, [sp, #0]
 801d826:	e7ed      	b.n	801d804 <__gethex+0x58>
 801d828:	3401      	adds	r4, #1
 801d82a:	7820      	ldrb	r0, [r4, #0]
 801d82c:	f7ff ffa9 	bl	801d782 <__hexdig_fun>
 801d830:	1e07      	subs	r7, r0, #0
 801d832:	d1f9      	bne.n	801d828 <__gethex+0x7c>
 801d834:	2201      	movs	r2, #1
 801d836:	0020      	movs	r0, r4
 801d838:	4990      	ldr	r1, [pc, #576]	@ (801da7c <__gethex+0x2d0>)
 801d83a:	f7fe ffad 	bl	801c798 <strncmp>
 801d83e:	2800      	cmp	r0, #0
 801d840:	d10d      	bne.n	801d85e <__gethex+0xb2>
 801d842:	2d00      	cmp	r5, #0
 801d844:	d106      	bne.n	801d854 <__gethex+0xa8>
 801d846:	3401      	adds	r4, #1
 801d848:	0025      	movs	r5, r4
 801d84a:	7820      	ldrb	r0, [r4, #0]
 801d84c:	f7ff ff99 	bl	801d782 <__hexdig_fun>
 801d850:	2800      	cmp	r0, #0
 801d852:	d102      	bne.n	801d85a <__gethex+0xae>
 801d854:	1b2d      	subs	r5, r5, r4
 801d856:	00af      	lsls	r7, r5, #2
 801d858:	e003      	b.n	801d862 <__gethex+0xb6>
 801d85a:	3401      	adds	r4, #1
 801d85c:	e7f5      	b.n	801d84a <__gethex+0x9e>
 801d85e:	2d00      	cmp	r5, #0
 801d860:	d1f8      	bne.n	801d854 <__gethex+0xa8>
 801d862:	2220      	movs	r2, #32
 801d864:	7823      	ldrb	r3, [r4, #0]
 801d866:	0026      	movs	r6, r4
 801d868:	4393      	bics	r3, r2
 801d86a:	2b50      	cmp	r3, #80	@ 0x50
 801d86c:	d11d      	bne.n	801d8aa <__gethex+0xfe>
 801d86e:	7863      	ldrb	r3, [r4, #1]
 801d870:	2b2b      	cmp	r3, #43	@ 0x2b
 801d872:	d02d      	beq.n	801d8d0 <__gethex+0x124>
 801d874:	2b2d      	cmp	r3, #45	@ 0x2d
 801d876:	d02f      	beq.n	801d8d8 <__gethex+0x12c>
 801d878:	2300      	movs	r3, #0
 801d87a:	1c66      	adds	r6, r4, #1
 801d87c:	9304      	str	r3, [sp, #16]
 801d87e:	7830      	ldrb	r0, [r6, #0]
 801d880:	f7ff ff7f 	bl	801d782 <__hexdig_fun>
 801d884:	1e43      	subs	r3, r0, #1
 801d886:	b2db      	uxtb	r3, r3
 801d888:	0005      	movs	r5, r0
 801d88a:	2b18      	cmp	r3, #24
 801d88c:	d82a      	bhi.n	801d8e4 <__gethex+0x138>
 801d88e:	7870      	ldrb	r0, [r6, #1]
 801d890:	f7ff ff77 	bl	801d782 <__hexdig_fun>
 801d894:	1e43      	subs	r3, r0, #1
 801d896:	b2db      	uxtb	r3, r3
 801d898:	3601      	adds	r6, #1
 801d89a:	3d10      	subs	r5, #16
 801d89c:	2b18      	cmp	r3, #24
 801d89e:	d91d      	bls.n	801d8dc <__gethex+0x130>
 801d8a0:	9b04      	ldr	r3, [sp, #16]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d000      	beq.n	801d8a8 <__gethex+0xfc>
 801d8a6:	426d      	negs	r5, r5
 801d8a8:	197f      	adds	r7, r7, r5
 801d8aa:	9b06      	ldr	r3, [sp, #24]
 801d8ac:	601e      	str	r6, [r3, #0]
 801d8ae:	9b02      	ldr	r3, [sp, #8]
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	d019      	beq.n	801d8e8 <__gethex+0x13c>
 801d8b4:	9b05      	ldr	r3, [sp, #20]
 801d8b6:	2606      	movs	r6, #6
 801d8b8:	425a      	negs	r2, r3
 801d8ba:	4153      	adcs	r3, r2
 801d8bc:	425b      	negs	r3, r3
 801d8be:	401e      	ands	r6, r3
 801d8c0:	0030      	movs	r0, r6
 801d8c2:	b009      	add	sp, #36	@ 0x24
 801d8c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8c6:	2301      	movs	r3, #1
 801d8c8:	2700      	movs	r7, #0
 801d8ca:	9c00      	ldr	r4, [sp, #0]
 801d8cc:	9302      	str	r3, [sp, #8]
 801d8ce:	e7c8      	b.n	801d862 <__gethex+0xb6>
 801d8d0:	2300      	movs	r3, #0
 801d8d2:	9304      	str	r3, [sp, #16]
 801d8d4:	1ca6      	adds	r6, r4, #2
 801d8d6:	e7d2      	b.n	801d87e <__gethex+0xd2>
 801d8d8:	2301      	movs	r3, #1
 801d8da:	e7fa      	b.n	801d8d2 <__gethex+0x126>
 801d8dc:	230a      	movs	r3, #10
 801d8de:	435d      	muls	r5, r3
 801d8e0:	182d      	adds	r5, r5, r0
 801d8e2:	e7d4      	b.n	801d88e <__gethex+0xe2>
 801d8e4:	0026      	movs	r6, r4
 801d8e6:	e7e0      	b.n	801d8aa <__gethex+0xfe>
 801d8e8:	9b00      	ldr	r3, [sp, #0]
 801d8ea:	9902      	ldr	r1, [sp, #8]
 801d8ec:	1ae3      	subs	r3, r4, r3
 801d8ee:	3b01      	subs	r3, #1
 801d8f0:	2b07      	cmp	r3, #7
 801d8f2:	dc0a      	bgt.n	801d90a <__gethex+0x15e>
 801d8f4:	9803      	ldr	r0, [sp, #12]
 801d8f6:	f000 fb19 	bl	801df2c <_Balloc>
 801d8fa:	1e05      	subs	r5, r0, #0
 801d8fc:	d108      	bne.n	801d910 <__gethex+0x164>
 801d8fe:	002a      	movs	r2, r5
 801d900:	21e4      	movs	r1, #228	@ 0xe4
 801d902:	4b5f      	ldr	r3, [pc, #380]	@ (801da80 <__gethex+0x2d4>)
 801d904:	485f      	ldr	r0, [pc, #380]	@ (801da84 <__gethex+0x2d8>)
 801d906:	f001 fbf1 	bl	801f0ec <__assert_func>
 801d90a:	3101      	adds	r1, #1
 801d90c:	105b      	asrs	r3, r3, #1
 801d90e:	e7ef      	b.n	801d8f0 <__gethex+0x144>
 801d910:	0003      	movs	r3, r0
 801d912:	3314      	adds	r3, #20
 801d914:	9302      	str	r3, [sp, #8]
 801d916:	9305      	str	r3, [sp, #20]
 801d918:	2300      	movs	r3, #0
 801d91a:	001e      	movs	r6, r3
 801d91c:	9304      	str	r3, [sp, #16]
 801d91e:	9b00      	ldr	r3, [sp, #0]
 801d920:	42a3      	cmp	r3, r4
 801d922:	d338      	bcc.n	801d996 <__gethex+0x1ea>
 801d924:	9c05      	ldr	r4, [sp, #20]
 801d926:	9b02      	ldr	r3, [sp, #8]
 801d928:	c440      	stmia	r4!, {r6}
 801d92a:	1ae4      	subs	r4, r4, r3
 801d92c:	10a4      	asrs	r4, r4, #2
 801d92e:	0030      	movs	r0, r6
 801d930:	612c      	str	r4, [r5, #16]
 801d932:	f000 fbf3 	bl	801e11c <__hi0bits>
 801d936:	9b01      	ldr	r3, [sp, #4]
 801d938:	0164      	lsls	r4, r4, #5
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	1a26      	subs	r6, r4, r0
 801d93e:	9300      	str	r3, [sp, #0]
 801d940:	429e      	cmp	r6, r3
 801d942:	dd52      	ble.n	801d9ea <__gethex+0x23e>
 801d944:	1af6      	subs	r6, r6, r3
 801d946:	0031      	movs	r1, r6
 801d948:	0028      	movs	r0, r5
 801d94a:	f000 ff96 	bl	801e87a <__any_on>
 801d94e:	1e04      	subs	r4, r0, #0
 801d950:	d00f      	beq.n	801d972 <__gethex+0x1c6>
 801d952:	2401      	movs	r4, #1
 801d954:	231f      	movs	r3, #31
 801d956:	0020      	movs	r0, r4
 801d958:	1e72      	subs	r2, r6, #1
 801d95a:	4013      	ands	r3, r2
 801d95c:	4098      	lsls	r0, r3
 801d95e:	0003      	movs	r3, r0
 801d960:	1151      	asrs	r1, r2, #5
 801d962:	9802      	ldr	r0, [sp, #8]
 801d964:	0089      	lsls	r1, r1, #2
 801d966:	5809      	ldr	r1, [r1, r0]
 801d968:	4219      	tst	r1, r3
 801d96a:	d002      	beq.n	801d972 <__gethex+0x1c6>
 801d96c:	42a2      	cmp	r2, r4
 801d96e:	dc34      	bgt.n	801d9da <__gethex+0x22e>
 801d970:	2402      	movs	r4, #2
 801d972:	0031      	movs	r1, r6
 801d974:	0028      	movs	r0, r5
 801d976:	f7ff feb1 	bl	801d6dc <rshift>
 801d97a:	19bf      	adds	r7, r7, r6
 801d97c:	9b01      	ldr	r3, [sp, #4]
 801d97e:	689b      	ldr	r3, [r3, #8]
 801d980:	42bb      	cmp	r3, r7
 801d982:	da42      	bge.n	801da0a <__gethex+0x25e>
 801d984:	0029      	movs	r1, r5
 801d986:	9803      	ldr	r0, [sp, #12]
 801d988:	f000 fb14 	bl	801dfb4 <_Bfree>
 801d98c:	2300      	movs	r3, #0
 801d98e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d990:	26a3      	movs	r6, #163	@ 0xa3
 801d992:	6013      	str	r3, [r2, #0]
 801d994:	e794      	b.n	801d8c0 <__gethex+0x114>
 801d996:	3c01      	subs	r4, #1
 801d998:	7823      	ldrb	r3, [r4, #0]
 801d99a:	2b2e      	cmp	r3, #46	@ 0x2e
 801d99c:	d012      	beq.n	801d9c4 <__gethex+0x218>
 801d99e:	9b04      	ldr	r3, [sp, #16]
 801d9a0:	2b20      	cmp	r3, #32
 801d9a2:	d104      	bne.n	801d9ae <__gethex+0x202>
 801d9a4:	9b05      	ldr	r3, [sp, #20]
 801d9a6:	c340      	stmia	r3!, {r6}
 801d9a8:	2600      	movs	r6, #0
 801d9aa:	9305      	str	r3, [sp, #20]
 801d9ac:	9604      	str	r6, [sp, #16]
 801d9ae:	7820      	ldrb	r0, [r4, #0]
 801d9b0:	f7ff fee7 	bl	801d782 <__hexdig_fun>
 801d9b4:	230f      	movs	r3, #15
 801d9b6:	4018      	ands	r0, r3
 801d9b8:	9b04      	ldr	r3, [sp, #16]
 801d9ba:	4098      	lsls	r0, r3
 801d9bc:	3304      	adds	r3, #4
 801d9be:	4306      	orrs	r6, r0
 801d9c0:	9304      	str	r3, [sp, #16]
 801d9c2:	e7ac      	b.n	801d91e <__gethex+0x172>
 801d9c4:	9b00      	ldr	r3, [sp, #0]
 801d9c6:	42a3      	cmp	r3, r4
 801d9c8:	d8e9      	bhi.n	801d99e <__gethex+0x1f2>
 801d9ca:	2201      	movs	r2, #1
 801d9cc:	0020      	movs	r0, r4
 801d9ce:	492b      	ldr	r1, [pc, #172]	@ (801da7c <__gethex+0x2d0>)
 801d9d0:	f7fe fee2 	bl	801c798 <strncmp>
 801d9d4:	2800      	cmp	r0, #0
 801d9d6:	d1e2      	bne.n	801d99e <__gethex+0x1f2>
 801d9d8:	e7a1      	b.n	801d91e <__gethex+0x172>
 801d9da:	0028      	movs	r0, r5
 801d9dc:	1eb1      	subs	r1, r6, #2
 801d9de:	f000 ff4c 	bl	801e87a <__any_on>
 801d9e2:	2800      	cmp	r0, #0
 801d9e4:	d0c4      	beq.n	801d970 <__gethex+0x1c4>
 801d9e6:	2403      	movs	r4, #3
 801d9e8:	e7c3      	b.n	801d972 <__gethex+0x1c6>
 801d9ea:	9b00      	ldr	r3, [sp, #0]
 801d9ec:	2400      	movs	r4, #0
 801d9ee:	429e      	cmp	r6, r3
 801d9f0:	dac4      	bge.n	801d97c <__gethex+0x1d0>
 801d9f2:	1b9e      	subs	r6, r3, r6
 801d9f4:	0029      	movs	r1, r5
 801d9f6:	0032      	movs	r2, r6
 801d9f8:	9803      	ldr	r0, [sp, #12]
 801d9fa:	f000 fd05 	bl	801e408 <__lshift>
 801d9fe:	0003      	movs	r3, r0
 801da00:	3314      	adds	r3, #20
 801da02:	0005      	movs	r5, r0
 801da04:	1bbf      	subs	r7, r7, r6
 801da06:	9302      	str	r3, [sp, #8]
 801da08:	e7b8      	b.n	801d97c <__gethex+0x1d0>
 801da0a:	9b01      	ldr	r3, [sp, #4]
 801da0c:	685e      	ldr	r6, [r3, #4]
 801da0e:	42be      	cmp	r6, r7
 801da10:	dd6f      	ble.n	801daf2 <__gethex+0x346>
 801da12:	9b00      	ldr	r3, [sp, #0]
 801da14:	1bf6      	subs	r6, r6, r7
 801da16:	42b3      	cmp	r3, r6
 801da18:	dc36      	bgt.n	801da88 <__gethex+0x2dc>
 801da1a:	9b01      	ldr	r3, [sp, #4]
 801da1c:	68db      	ldr	r3, [r3, #12]
 801da1e:	2b02      	cmp	r3, #2
 801da20:	d024      	beq.n	801da6c <__gethex+0x2c0>
 801da22:	2b03      	cmp	r3, #3
 801da24:	d026      	beq.n	801da74 <__gethex+0x2c8>
 801da26:	2b01      	cmp	r3, #1
 801da28:	d117      	bne.n	801da5a <__gethex+0x2ae>
 801da2a:	9b00      	ldr	r3, [sp, #0]
 801da2c:	42b3      	cmp	r3, r6
 801da2e:	d114      	bne.n	801da5a <__gethex+0x2ae>
 801da30:	2b01      	cmp	r3, #1
 801da32:	d10b      	bne.n	801da4c <__gethex+0x2a0>
 801da34:	9b01      	ldr	r3, [sp, #4]
 801da36:	9a07      	ldr	r2, [sp, #28]
 801da38:	685b      	ldr	r3, [r3, #4]
 801da3a:	2662      	movs	r6, #98	@ 0x62
 801da3c:	6013      	str	r3, [r2, #0]
 801da3e:	2301      	movs	r3, #1
 801da40:	9a02      	ldr	r2, [sp, #8]
 801da42:	612b      	str	r3, [r5, #16]
 801da44:	6013      	str	r3, [r2, #0]
 801da46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da48:	601d      	str	r5, [r3, #0]
 801da4a:	e739      	b.n	801d8c0 <__gethex+0x114>
 801da4c:	9900      	ldr	r1, [sp, #0]
 801da4e:	0028      	movs	r0, r5
 801da50:	3901      	subs	r1, #1
 801da52:	f000 ff12 	bl	801e87a <__any_on>
 801da56:	2800      	cmp	r0, #0
 801da58:	d1ec      	bne.n	801da34 <__gethex+0x288>
 801da5a:	0029      	movs	r1, r5
 801da5c:	9803      	ldr	r0, [sp, #12]
 801da5e:	f000 faa9 	bl	801dfb4 <_Bfree>
 801da62:	2300      	movs	r3, #0
 801da64:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801da66:	2650      	movs	r6, #80	@ 0x50
 801da68:	6013      	str	r3, [r2, #0]
 801da6a:	e729      	b.n	801d8c0 <__gethex+0x114>
 801da6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d1f3      	bne.n	801da5a <__gethex+0x2ae>
 801da72:	e7df      	b.n	801da34 <__gethex+0x288>
 801da74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da76:	2b00      	cmp	r3, #0
 801da78:	d1dc      	bne.n	801da34 <__gethex+0x288>
 801da7a:	e7ee      	b.n	801da5a <__gethex+0x2ae>
 801da7c:	080210a0 	.word	0x080210a0
 801da80:	080212b1 	.word	0x080212b1
 801da84:	080212c2 	.word	0x080212c2
 801da88:	1e77      	subs	r7, r6, #1
 801da8a:	2c00      	cmp	r4, #0
 801da8c:	d12f      	bne.n	801daee <__gethex+0x342>
 801da8e:	2f00      	cmp	r7, #0
 801da90:	d004      	beq.n	801da9c <__gethex+0x2f0>
 801da92:	0039      	movs	r1, r7
 801da94:	0028      	movs	r0, r5
 801da96:	f000 fef0 	bl	801e87a <__any_on>
 801da9a:	0004      	movs	r4, r0
 801da9c:	231f      	movs	r3, #31
 801da9e:	117a      	asrs	r2, r7, #5
 801daa0:	401f      	ands	r7, r3
 801daa2:	3b1e      	subs	r3, #30
 801daa4:	40bb      	lsls	r3, r7
 801daa6:	9902      	ldr	r1, [sp, #8]
 801daa8:	0092      	lsls	r2, r2, #2
 801daaa:	5852      	ldr	r2, [r2, r1]
 801daac:	421a      	tst	r2, r3
 801daae:	d001      	beq.n	801dab4 <__gethex+0x308>
 801dab0:	2302      	movs	r3, #2
 801dab2:	431c      	orrs	r4, r3
 801dab4:	9b00      	ldr	r3, [sp, #0]
 801dab6:	0031      	movs	r1, r6
 801dab8:	1b9b      	subs	r3, r3, r6
 801daba:	2602      	movs	r6, #2
 801dabc:	0028      	movs	r0, r5
 801dabe:	9300      	str	r3, [sp, #0]
 801dac0:	f7ff fe0c 	bl	801d6dc <rshift>
 801dac4:	9b01      	ldr	r3, [sp, #4]
 801dac6:	685f      	ldr	r7, [r3, #4]
 801dac8:	2c00      	cmp	r4, #0
 801daca:	d03f      	beq.n	801db4c <__gethex+0x3a0>
 801dacc:	9b01      	ldr	r3, [sp, #4]
 801dace:	68db      	ldr	r3, [r3, #12]
 801dad0:	2b02      	cmp	r3, #2
 801dad2:	d010      	beq.n	801daf6 <__gethex+0x34a>
 801dad4:	2b03      	cmp	r3, #3
 801dad6:	d012      	beq.n	801dafe <__gethex+0x352>
 801dad8:	2b01      	cmp	r3, #1
 801dada:	d106      	bne.n	801daea <__gethex+0x33e>
 801dadc:	07a2      	lsls	r2, r4, #30
 801dade:	d504      	bpl.n	801daea <__gethex+0x33e>
 801dae0:	9a02      	ldr	r2, [sp, #8]
 801dae2:	6812      	ldr	r2, [r2, #0]
 801dae4:	4314      	orrs	r4, r2
 801dae6:	421c      	tst	r4, r3
 801dae8:	d10c      	bne.n	801db04 <__gethex+0x358>
 801daea:	2310      	movs	r3, #16
 801daec:	e02d      	b.n	801db4a <__gethex+0x39e>
 801daee:	2401      	movs	r4, #1
 801daf0:	e7d4      	b.n	801da9c <__gethex+0x2f0>
 801daf2:	2601      	movs	r6, #1
 801daf4:	e7e8      	b.n	801dac8 <__gethex+0x31c>
 801daf6:	2301      	movs	r3, #1
 801daf8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801dafa:	1a9b      	subs	r3, r3, r2
 801dafc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dafe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db00:	2b00      	cmp	r3, #0
 801db02:	d0f2      	beq.n	801daea <__gethex+0x33e>
 801db04:	692b      	ldr	r3, [r5, #16]
 801db06:	2000      	movs	r0, #0
 801db08:	9302      	str	r3, [sp, #8]
 801db0a:	009b      	lsls	r3, r3, #2
 801db0c:	9304      	str	r3, [sp, #16]
 801db0e:	002b      	movs	r3, r5
 801db10:	9a04      	ldr	r2, [sp, #16]
 801db12:	3314      	adds	r3, #20
 801db14:	1899      	adds	r1, r3, r2
 801db16:	681a      	ldr	r2, [r3, #0]
 801db18:	1c54      	adds	r4, r2, #1
 801db1a:	d01c      	beq.n	801db56 <__gethex+0x3aa>
 801db1c:	3201      	adds	r2, #1
 801db1e:	601a      	str	r2, [r3, #0]
 801db20:	002b      	movs	r3, r5
 801db22:	3314      	adds	r3, #20
 801db24:	2e02      	cmp	r6, #2
 801db26:	d13f      	bne.n	801dba8 <__gethex+0x3fc>
 801db28:	9a01      	ldr	r2, [sp, #4]
 801db2a:	9900      	ldr	r1, [sp, #0]
 801db2c:	6812      	ldr	r2, [r2, #0]
 801db2e:	3a01      	subs	r2, #1
 801db30:	428a      	cmp	r2, r1
 801db32:	d109      	bne.n	801db48 <__gethex+0x39c>
 801db34:	000a      	movs	r2, r1
 801db36:	201f      	movs	r0, #31
 801db38:	4010      	ands	r0, r2
 801db3a:	2201      	movs	r2, #1
 801db3c:	4082      	lsls	r2, r0
 801db3e:	1149      	asrs	r1, r1, #5
 801db40:	0089      	lsls	r1, r1, #2
 801db42:	58cb      	ldr	r3, [r1, r3]
 801db44:	4213      	tst	r3, r2
 801db46:	d13d      	bne.n	801dbc4 <__gethex+0x418>
 801db48:	2320      	movs	r3, #32
 801db4a:	431e      	orrs	r6, r3
 801db4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db4e:	601d      	str	r5, [r3, #0]
 801db50:	9b07      	ldr	r3, [sp, #28]
 801db52:	601f      	str	r7, [r3, #0]
 801db54:	e6b4      	b.n	801d8c0 <__gethex+0x114>
 801db56:	c301      	stmia	r3!, {r0}
 801db58:	4299      	cmp	r1, r3
 801db5a:	d8dc      	bhi.n	801db16 <__gethex+0x36a>
 801db5c:	68ab      	ldr	r3, [r5, #8]
 801db5e:	9a02      	ldr	r2, [sp, #8]
 801db60:	429a      	cmp	r2, r3
 801db62:	db18      	blt.n	801db96 <__gethex+0x3ea>
 801db64:	6869      	ldr	r1, [r5, #4]
 801db66:	9803      	ldr	r0, [sp, #12]
 801db68:	3101      	adds	r1, #1
 801db6a:	f000 f9df 	bl	801df2c <_Balloc>
 801db6e:	1e04      	subs	r4, r0, #0
 801db70:	d104      	bne.n	801db7c <__gethex+0x3d0>
 801db72:	0022      	movs	r2, r4
 801db74:	2184      	movs	r1, #132	@ 0x84
 801db76:	4b1d      	ldr	r3, [pc, #116]	@ (801dbec <__gethex+0x440>)
 801db78:	481d      	ldr	r0, [pc, #116]	@ (801dbf0 <__gethex+0x444>)
 801db7a:	e6c4      	b.n	801d906 <__gethex+0x15a>
 801db7c:	0029      	movs	r1, r5
 801db7e:	692a      	ldr	r2, [r5, #16]
 801db80:	310c      	adds	r1, #12
 801db82:	3202      	adds	r2, #2
 801db84:	0092      	lsls	r2, r2, #2
 801db86:	300c      	adds	r0, #12
 801db88:	f7fe fecc 	bl	801c924 <memcpy>
 801db8c:	0029      	movs	r1, r5
 801db8e:	9803      	ldr	r0, [sp, #12]
 801db90:	f000 fa10 	bl	801dfb4 <_Bfree>
 801db94:	0025      	movs	r5, r4
 801db96:	692b      	ldr	r3, [r5, #16]
 801db98:	1c5a      	adds	r2, r3, #1
 801db9a:	612a      	str	r2, [r5, #16]
 801db9c:	2201      	movs	r2, #1
 801db9e:	3304      	adds	r3, #4
 801dba0:	009b      	lsls	r3, r3, #2
 801dba2:	18eb      	adds	r3, r5, r3
 801dba4:	605a      	str	r2, [r3, #4]
 801dba6:	e7bb      	b.n	801db20 <__gethex+0x374>
 801dba8:	692a      	ldr	r2, [r5, #16]
 801dbaa:	9902      	ldr	r1, [sp, #8]
 801dbac:	428a      	cmp	r2, r1
 801dbae:	dd0b      	ble.n	801dbc8 <__gethex+0x41c>
 801dbb0:	2101      	movs	r1, #1
 801dbb2:	0028      	movs	r0, r5
 801dbb4:	f7ff fd92 	bl	801d6dc <rshift>
 801dbb8:	9b01      	ldr	r3, [sp, #4]
 801dbba:	3701      	adds	r7, #1
 801dbbc:	689b      	ldr	r3, [r3, #8]
 801dbbe:	42bb      	cmp	r3, r7
 801dbc0:	da00      	bge.n	801dbc4 <__gethex+0x418>
 801dbc2:	e6df      	b.n	801d984 <__gethex+0x1d8>
 801dbc4:	2601      	movs	r6, #1
 801dbc6:	e7bf      	b.n	801db48 <__gethex+0x39c>
 801dbc8:	221f      	movs	r2, #31
 801dbca:	9c00      	ldr	r4, [sp, #0]
 801dbcc:	9900      	ldr	r1, [sp, #0]
 801dbce:	4014      	ands	r4, r2
 801dbd0:	4211      	tst	r1, r2
 801dbd2:	d0f7      	beq.n	801dbc4 <__gethex+0x418>
 801dbd4:	9a04      	ldr	r2, [sp, #16]
 801dbd6:	189b      	adds	r3, r3, r2
 801dbd8:	3b04      	subs	r3, #4
 801dbda:	6818      	ldr	r0, [r3, #0]
 801dbdc:	f000 fa9e 	bl	801e11c <__hi0bits>
 801dbe0:	2320      	movs	r3, #32
 801dbe2:	1b1b      	subs	r3, r3, r4
 801dbe4:	4298      	cmp	r0, r3
 801dbe6:	dbe3      	blt.n	801dbb0 <__gethex+0x404>
 801dbe8:	e7ec      	b.n	801dbc4 <__gethex+0x418>
 801dbea:	46c0      	nop			@ (mov r8, r8)
 801dbec:	080212b1 	.word	0x080212b1
 801dbf0:	080212c2 	.word	0x080212c2

0801dbf4 <L_shift>:
 801dbf4:	2308      	movs	r3, #8
 801dbf6:	b570      	push	{r4, r5, r6, lr}
 801dbf8:	2520      	movs	r5, #32
 801dbfa:	1a9a      	subs	r2, r3, r2
 801dbfc:	0092      	lsls	r2, r2, #2
 801dbfe:	1aad      	subs	r5, r5, r2
 801dc00:	6843      	ldr	r3, [r0, #4]
 801dc02:	6804      	ldr	r4, [r0, #0]
 801dc04:	001e      	movs	r6, r3
 801dc06:	40ae      	lsls	r6, r5
 801dc08:	40d3      	lsrs	r3, r2
 801dc0a:	4334      	orrs	r4, r6
 801dc0c:	6004      	str	r4, [r0, #0]
 801dc0e:	6043      	str	r3, [r0, #4]
 801dc10:	3004      	adds	r0, #4
 801dc12:	4288      	cmp	r0, r1
 801dc14:	d3f4      	bcc.n	801dc00 <L_shift+0xc>
 801dc16:	bd70      	pop	{r4, r5, r6, pc}

0801dc18 <__match>:
 801dc18:	b530      	push	{r4, r5, lr}
 801dc1a:	6803      	ldr	r3, [r0, #0]
 801dc1c:	780c      	ldrb	r4, [r1, #0]
 801dc1e:	3301      	adds	r3, #1
 801dc20:	2c00      	cmp	r4, #0
 801dc22:	d102      	bne.n	801dc2a <__match+0x12>
 801dc24:	6003      	str	r3, [r0, #0]
 801dc26:	2001      	movs	r0, #1
 801dc28:	bd30      	pop	{r4, r5, pc}
 801dc2a:	781a      	ldrb	r2, [r3, #0]
 801dc2c:	0015      	movs	r5, r2
 801dc2e:	3d41      	subs	r5, #65	@ 0x41
 801dc30:	2d19      	cmp	r5, #25
 801dc32:	d800      	bhi.n	801dc36 <__match+0x1e>
 801dc34:	3220      	adds	r2, #32
 801dc36:	3101      	adds	r1, #1
 801dc38:	42a2      	cmp	r2, r4
 801dc3a:	d0ef      	beq.n	801dc1c <__match+0x4>
 801dc3c:	2000      	movs	r0, #0
 801dc3e:	e7f3      	b.n	801dc28 <__match+0x10>

0801dc40 <__hexnan>:
 801dc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc42:	680b      	ldr	r3, [r1, #0]
 801dc44:	b08b      	sub	sp, #44	@ 0x2c
 801dc46:	9201      	str	r2, [sp, #4]
 801dc48:	9901      	ldr	r1, [sp, #4]
 801dc4a:	115a      	asrs	r2, r3, #5
 801dc4c:	0092      	lsls	r2, r2, #2
 801dc4e:	188a      	adds	r2, r1, r2
 801dc50:	9202      	str	r2, [sp, #8]
 801dc52:	0019      	movs	r1, r3
 801dc54:	221f      	movs	r2, #31
 801dc56:	4011      	ands	r1, r2
 801dc58:	9008      	str	r0, [sp, #32]
 801dc5a:	9106      	str	r1, [sp, #24]
 801dc5c:	4213      	tst	r3, r2
 801dc5e:	d002      	beq.n	801dc66 <__hexnan+0x26>
 801dc60:	9b02      	ldr	r3, [sp, #8]
 801dc62:	3304      	adds	r3, #4
 801dc64:	9302      	str	r3, [sp, #8]
 801dc66:	9b02      	ldr	r3, [sp, #8]
 801dc68:	2500      	movs	r5, #0
 801dc6a:	1f1f      	subs	r7, r3, #4
 801dc6c:	003e      	movs	r6, r7
 801dc6e:	003c      	movs	r4, r7
 801dc70:	9b08      	ldr	r3, [sp, #32]
 801dc72:	603d      	str	r5, [r7, #0]
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	9507      	str	r5, [sp, #28]
 801dc78:	9305      	str	r3, [sp, #20]
 801dc7a:	9503      	str	r5, [sp, #12]
 801dc7c:	9b05      	ldr	r3, [sp, #20]
 801dc7e:	3301      	adds	r3, #1
 801dc80:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc82:	9b05      	ldr	r3, [sp, #20]
 801dc84:	785b      	ldrb	r3, [r3, #1]
 801dc86:	9304      	str	r3, [sp, #16]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d028      	beq.n	801dcde <__hexnan+0x9e>
 801dc8c:	9804      	ldr	r0, [sp, #16]
 801dc8e:	f7ff fd78 	bl	801d782 <__hexdig_fun>
 801dc92:	2800      	cmp	r0, #0
 801dc94:	d155      	bne.n	801dd42 <__hexnan+0x102>
 801dc96:	9b04      	ldr	r3, [sp, #16]
 801dc98:	2b20      	cmp	r3, #32
 801dc9a:	d819      	bhi.n	801dcd0 <__hexnan+0x90>
 801dc9c:	9b03      	ldr	r3, [sp, #12]
 801dc9e:	9a07      	ldr	r2, [sp, #28]
 801dca0:	4293      	cmp	r3, r2
 801dca2:	dd12      	ble.n	801dcca <__hexnan+0x8a>
 801dca4:	42b4      	cmp	r4, r6
 801dca6:	d206      	bcs.n	801dcb6 <__hexnan+0x76>
 801dca8:	2d07      	cmp	r5, #7
 801dcaa:	dc04      	bgt.n	801dcb6 <__hexnan+0x76>
 801dcac:	002a      	movs	r2, r5
 801dcae:	0031      	movs	r1, r6
 801dcb0:	0020      	movs	r0, r4
 801dcb2:	f7ff ff9f 	bl	801dbf4 <L_shift>
 801dcb6:	9b01      	ldr	r3, [sp, #4]
 801dcb8:	2508      	movs	r5, #8
 801dcba:	429c      	cmp	r4, r3
 801dcbc:	d905      	bls.n	801dcca <__hexnan+0x8a>
 801dcbe:	1f26      	subs	r6, r4, #4
 801dcc0:	2500      	movs	r5, #0
 801dcc2:	0034      	movs	r4, r6
 801dcc4:	9b03      	ldr	r3, [sp, #12]
 801dcc6:	6035      	str	r5, [r6, #0]
 801dcc8:	9307      	str	r3, [sp, #28]
 801dcca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dccc:	9305      	str	r3, [sp, #20]
 801dcce:	e7d5      	b.n	801dc7c <__hexnan+0x3c>
 801dcd0:	9b04      	ldr	r3, [sp, #16]
 801dcd2:	2b29      	cmp	r3, #41	@ 0x29
 801dcd4:	d15a      	bne.n	801dd8c <__hexnan+0x14c>
 801dcd6:	9b05      	ldr	r3, [sp, #20]
 801dcd8:	9a08      	ldr	r2, [sp, #32]
 801dcda:	3302      	adds	r3, #2
 801dcdc:	6013      	str	r3, [r2, #0]
 801dcde:	9b03      	ldr	r3, [sp, #12]
 801dce0:	2b00      	cmp	r3, #0
 801dce2:	d053      	beq.n	801dd8c <__hexnan+0x14c>
 801dce4:	42b4      	cmp	r4, r6
 801dce6:	d206      	bcs.n	801dcf6 <__hexnan+0xb6>
 801dce8:	2d07      	cmp	r5, #7
 801dcea:	dc04      	bgt.n	801dcf6 <__hexnan+0xb6>
 801dcec:	002a      	movs	r2, r5
 801dcee:	0031      	movs	r1, r6
 801dcf0:	0020      	movs	r0, r4
 801dcf2:	f7ff ff7f 	bl	801dbf4 <L_shift>
 801dcf6:	9b01      	ldr	r3, [sp, #4]
 801dcf8:	429c      	cmp	r4, r3
 801dcfa:	d936      	bls.n	801dd6a <__hexnan+0x12a>
 801dcfc:	001a      	movs	r2, r3
 801dcfe:	0023      	movs	r3, r4
 801dd00:	cb02      	ldmia	r3!, {r1}
 801dd02:	c202      	stmia	r2!, {r1}
 801dd04:	429f      	cmp	r7, r3
 801dd06:	d2fb      	bcs.n	801dd00 <__hexnan+0xc0>
 801dd08:	9b02      	ldr	r3, [sp, #8]
 801dd0a:	1c61      	adds	r1, r4, #1
 801dd0c:	1eda      	subs	r2, r3, #3
 801dd0e:	2304      	movs	r3, #4
 801dd10:	4291      	cmp	r1, r2
 801dd12:	d805      	bhi.n	801dd20 <__hexnan+0xe0>
 801dd14:	9b02      	ldr	r3, [sp, #8]
 801dd16:	3b04      	subs	r3, #4
 801dd18:	1b1b      	subs	r3, r3, r4
 801dd1a:	089b      	lsrs	r3, r3, #2
 801dd1c:	3301      	adds	r3, #1
 801dd1e:	009b      	lsls	r3, r3, #2
 801dd20:	9a01      	ldr	r2, [sp, #4]
 801dd22:	18d3      	adds	r3, r2, r3
 801dd24:	2200      	movs	r2, #0
 801dd26:	c304      	stmia	r3!, {r2}
 801dd28:	429f      	cmp	r7, r3
 801dd2a:	d2fc      	bcs.n	801dd26 <__hexnan+0xe6>
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	d104      	bne.n	801dd3c <__hexnan+0xfc>
 801dd32:	9b01      	ldr	r3, [sp, #4]
 801dd34:	429f      	cmp	r7, r3
 801dd36:	d127      	bne.n	801dd88 <__hexnan+0x148>
 801dd38:	2301      	movs	r3, #1
 801dd3a:	603b      	str	r3, [r7, #0]
 801dd3c:	2005      	movs	r0, #5
 801dd3e:	b00b      	add	sp, #44	@ 0x2c
 801dd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd42:	9b03      	ldr	r3, [sp, #12]
 801dd44:	3501      	adds	r5, #1
 801dd46:	3301      	adds	r3, #1
 801dd48:	9303      	str	r3, [sp, #12]
 801dd4a:	2d08      	cmp	r5, #8
 801dd4c:	dd06      	ble.n	801dd5c <__hexnan+0x11c>
 801dd4e:	9b01      	ldr	r3, [sp, #4]
 801dd50:	429c      	cmp	r4, r3
 801dd52:	d9ba      	bls.n	801dcca <__hexnan+0x8a>
 801dd54:	2300      	movs	r3, #0
 801dd56:	2501      	movs	r5, #1
 801dd58:	3c04      	subs	r4, #4
 801dd5a:	6023      	str	r3, [r4, #0]
 801dd5c:	220f      	movs	r2, #15
 801dd5e:	6823      	ldr	r3, [r4, #0]
 801dd60:	4010      	ands	r0, r2
 801dd62:	011b      	lsls	r3, r3, #4
 801dd64:	4303      	orrs	r3, r0
 801dd66:	6023      	str	r3, [r4, #0]
 801dd68:	e7af      	b.n	801dcca <__hexnan+0x8a>
 801dd6a:	9b06      	ldr	r3, [sp, #24]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d0dd      	beq.n	801dd2c <__hexnan+0xec>
 801dd70:	2320      	movs	r3, #32
 801dd72:	9a06      	ldr	r2, [sp, #24]
 801dd74:	9902      	ldr	r1, [sp, #8]
 801dd76:	1a9b      	subs	r3, r3, r2
 801dd78:	2201      	movs	r2, #1
 801dd7a:	4252      	negs	r2, r2
 801dd7c:	40da      	lsrs	r2, r3
 801dd7e:	3904      	subs	r1, #4
 801dd80:	680b      	ldr	r3, [r1, #0]
 801dd82:	4013      	ands	r3, r2
 801dd84:	600b      	str	r3, [r1, #0]
 801dd86:	e7d1      	b.n	801dd2c <__hexnan+0xec>
 801dd88:	3f04      	subs	r7, #4
 801dd8a:	e7cf      	b.n	801dd2c <__hexnan+0xec>
 801dd8c:	2004      	movs	r0, #4
 801dd8e:	e7d6      	b.n	801dd3e <__hexnan+0xfe>

0801dd90 <malloc>:
 801dd90:	b510      	push	{r4, lr}
 801dd92:	4b03      	ldr	r3, [pc, #12]	@ (801dda0 <malloc+0x10>)
 801dd94:	0001      	movs	r1, r0
 801dd96:	6818      	ldr	r0, [r3, #0]
 801dd98:	f000 f826 	bl	801dde8 <_malloc_r>
 801dd9c:	bd10      	pop	{r4, pc}
 801dd9e:	46c0      	nop			@ (mov r8, r8)
 801dda0:	200003c4 	.word	0x200003c4

0801dda4 <sbrk_aligned>:
 801dda4:	b570      	push	{r4, r5, r6, lr}
 801dda6:	4e0f      	ldr	r6, [pc, #60]	@ (801dde4 <sbrk_aligned+0x40>)
 801dda8:	000d      	movs	r5, r1
 801ddaa:	6831      	ldr	r1, [r6, #0]
 801ddac:	0004      	movs	r4, r0
 801ddae:	2900      	cmp	r1, #0
 801ddb0:	d102      	bne.n	801ddb8 <sbrk_aligned+0x14>
 801ddb2:	f001 f989 	bl	801f0c8 <_sbrk_r>
 801ddb6:	6030      	str	r0, [r6, #0]
 801ddb8:	0029      	movs	r1, r5
 801ddba:	0020      	movs	r0, r4
 801ddbc:	f001 f984 	bl	801f0c8 <_sbrk_r>
 801ddc0:	1c43      	adds	r3, r0, #1
 801ddc2:	d103      	bne.n	801ddcc <sbrk_aligned+0x28>
 801ddc4:	2501      	movs	r5, #1
 801ddc6:	426d      	negs	r5, r5
 801ddc8:	0028      	movs	r0, r5
 801ddca:	bd70      	pop	{r4, r5, r6, pc}
 801ddcc:	2303      	movs	r3, #3
 801ddce:	1cc5      	adds	r5, r0, #3
 801ddd0:	439d      	bics	r5, r3
 801ddd2:	42a8      	cmp	r0, r5
 801ddd4:	d0f8      	beq.n	801ddc8 <sbrk_aligned+0x24>
 801ddd6:	1a29      	subs	r1, r5, r0
 801ddd8:	0020      	movs	r0, r4
 801ddda:	f001 f975 	bl	801f0c8 <_sbrk_r>
 801ddde:	3001      	adds	r0, #1
 801dde0:	d1f2      	bne.n	801ddc8 <sbrk_aligned+0x24>
 801dde2:	e7ef      	b.n	801ddc4 <sbrk_aligned+0x20>
 801dde4:	200038bc 	.word	0x200038bc

0801dde8 <_malloc_r>:
 801dde8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ddea:	2203      	movs	r2, #3
 801ddec:	1ccb      	adds	r3, r1, #3
 801ddee:	4393      	bics	r3, r2
 801ddf0:	3308      	adds	r3, #8
 801ddf2:	0005      	movs	r5, r0
 801ddf4:	001f      	movs	r7, r3
 801ddf6:	2b0c      	cmp	r3, #12
 801ddf8:	d234      	bcs.n	801de64 <_malloc_r+0x7c>
 801ddfa:	270c      	movs	r7, #12
 801ddfc:	42b9      	cmp	r1, r7
 801ddfe:	d833      	bhi.n	801de68 <_malloc_r+0x80>
 801de00:	0028      	movs	r0, r5
 801de02:	f000 f883 	bl	801df0c <__malloc_lock>
 801de06:	4e37      	ldr	r6, [pc, #220]	@ (801dee4 <_malloc_r+0xfc>)
 801de08:	6833      	ldr	r3, [r6, #0]
 801de0a:	001c      	movs	r4, r3
 801de0c:	2c00      	cmp	r4, #0
 801de0e:	d12f      	bne.n	801de70 <_malloc_r+0x88>
 801de10:	0039      	movs	r1, r7
 801de12:	0028      	movs	r0, r5
 801de14:	f7ff ffc6 	bl	801dda4 <sbrk_aligned>
 801de18:	0004      	movs	r4, r0
 801de1a:	1c43      	adds	r3, r0, #1
 801de1c:	d15f      	bne.n	801dede <_malloc_r+0xf6>
 801de1e:	6834      	ldr	r4, [r6, #0]
 801de20:	9400      	str	r4, [sp, #0]
 801de22:	9b00      	ldr	r3, [sp, #0]
 801de24:	2b00      	cmp	r3, #0
 801de26:	d14a      	bne.n	801debe <_malloc_r+0xd6>
 801de28:	2c00      	cmp	r4, #0
 801de2a:	d052      	beq.n	801ded2 <_malloc_r+0xea>
 801de2c:	6823      	ldr	r3, [r4, #0]
 801de2e:	0028      	movs	r0, r5
 801de30:	18e3      	adds	r3, r4, r3
 801de32:	9900      	ldr	r1, [sp, #0]
 801de34:	9301      	str	r3, [sp, #4]
 801de36:	f001 f947 	bl	801f0c8 <_sbrk_r>
 801de3a:	9b01      	ldr	r3, [sp, #4]
 801de3c:	4283      	cmp	r3, r0
 801de3e:	d148      	bne.n	801ded2 <_malloc_r+0xea>
 801de40:	6823      	ldr	r3, [r4, #0]
 801de42:	0028      	movs	r0, r5
 801de44:	1aff      	subs	r7, r7, r3
 801de46:	0039      	movs	r1, r7
 801de48:	f7ff ffac 	bl	801dda4 <sbrk_aligned>
 801de4c:	3001      	adds	r0, #1
 801de4e:	d040      	beq.n	801ded2 <_malloc_r+0xea>
 801de50:	6823      	ldr	r3, [r4, #0]
 801de52:	19db      	adds	r3, r3, r7
 801de54:	6023      	str	r3, [r4, #0]
 801de56:	6833      	ldr	r3, [r6, #0]
 801de58:	685a      	ldr	r2, [r3, #4]
 801de5a:	2a00      	cmp	r2, #0
 801de5c:	d133      	bne.n	801dec6 <_malloc_r+0xde>
 801de5e:	9b00      	ldr	r3, [sp, #0]
 801de60:	6033      	str	r3, [r6, #0]
 801de62:	e019      	b.n	801de98 <_malloc_r+0xb0>
 801de64:	2b00      	cmp	r3, #0
 801de66:	dac9      	bge.n	801ddfc <_malloc_r+0x14>
 801de68:	230c      	movs	r3, #12
 801de6a:	602b      	str	r3, [r5, #0]
 801de6c:	2000      	movs	r0, #0
 801de6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801de70:	6821      	ldr	r1, [r4, #0]
 801de72:	1bc9      	subs	r1, r1, r7
 801de74:	d420      	bmi.n	801deb8 <_malloc_r+0xd0>
 801de76:	290b      	cmp	r1, #11
 801de78:	d90a      	bls.n	801de90 <_malloc_r+0xa8>
 801de7a:	19e2      	adds	r2, r4, r7
 801de7c:	6027      	str	r7, [r4, #0]
 801de7e:	42a3      	cmp	r3, r4
 801de80:	d104      	bne.n	801de8c <_malloc_r+0xa4>
 801de82:	6032      	str	r2, [r6, #0]
 801de84:	6863      	ldr	r3, [r4, #4]
 801de86:	6011      	str	r1, [r2, #0]
 801de88:	6053      	str	r3, [r2, #4]
 801de8a:	e005      	b.n	801de98 <_malloc_r+0xb0>
 801de8c:	605a      	str	r2, [r3, #4]
 801de8e:	e7f9      	b.n	801de84 <_malloc_r+0x9c>
 801de90:	6862      	ldr	r2, [r4, #4]
 801de92:	42a3      	cmp	r3, r4
 801de94:	d10e      	bne.n	801deb4 <_malloc_r+0xcc>
 801de96:	6032      	str	r2, [r6, #0]
 801de98:	0028      	movs	r0, r5
 801de9a:	f000 f83f 	bl	801df1c <__malloc_unlock>
 801de9e:	0020      	movs	r0, r4
 801dea0:	2207      	movs	r2, #7
 801dea2:	300b      	adds	r0, #11
 801dea4:	1d23      	adds	r3, r4, #4
 801dea6:	4390      	bics	r0, r2
 801dea8:	1ac2      	subs	r2, r0, r3
 801deaa:	4298      	cmp	r0, r3
 801deac:	d0df      	beq.n	801de6e <_malloc_r+0x86>
 801deae:	1a1b      	subs	r3, r3, r0
 801deb0:	50a3      	str	r3, [r4, r2]
 801deb2:	e7dc      	b.n	801de6e <_malloc_r+0x86>
 801deb4:	605a      	str	r2, [r3, #4]
 801deb6:	e7ef      	b.n	801de98 <_malloc_r+0xb0>
 801deb8:	0023      	movs	r3, r4
 801deba:	6864      	ldr	r4, [r4, #4]
 801debc:	e7a6      	b.n	801de0c <_malloc_r+0x24>
 801debe:	9c00      	ldr	r4, [sp, #0]
 801dec0:	6863      	ldr	r3, [r4, #4]
 801dec2:	9300      	str	r3, [sp, #0]
 801dec4:	e7ad      	b.n	801de22 <_malloc_r+0x3a>
 801dec6:	001a      	movs	r2, r3
 801dec8:	685b      	ldr	r3, [r3, #4]
 801deca:	42a3      	cmp	r3, r4
 801decc:	d1fb      	bne.n	801dec6 <_malloc_r+0xde>
 801dece:	2300      	movs	r3, #0
 801ded0:	e7da      	b.n	801de88 <_malloc_r+0xa0>
 801ded2:	230c      	movs	r3, #12
 801ded4:	0028      	movs	r0, r5
 801ded6:	602b      	str	r3, [r5, #0]
 801ded8:	f000 f820 	bl	801df1c <__malloc_unlock>
 801dedc:	e7c6      	b.n	801de6c <_malloc_r+0x84>
 801dede:	6007      	str	r7, [r0, #0]
 801dee0:	e7da      	b.n	801de98 <_malloc_r+0xb0>
 801dee2:	46c0      	nop			@ (mov r8, r8)
 801dee4:	200038c0 	.word	0x200038c0

0801dee8 <__ascii_mbtowc>:
 801dee8:	b082      	sub	sp, #8
 801deea:	2900      	cmp	r1, #0
 801deec:	d100      	bne.n	801def0 <__ascii_mbtowc+0x8>
 801deee:	a901      	add	r1, sp, #4
 801def0:	1e10      	subs	r0, r2, #0
 801def2:	d006      	beq.n	801df02 <__ascii_mbtowc+0x1a>
 801def4:	2b00      	cmp	r3, #0
 801def6:	d006      	beq.n	801df06 <__ascii_mbtowc+0x1e>
 801def8:	7813      	ldrb	r3, [r2, #0]
 801defa:	600b      	str	r3, [r1, #0]
 801defc:	7810      	ldrb	r0, [r2, #0]
 801defe:	1e43      	subs	r3, r0, #1
 801df00:	4198      	sbcs	r0, r3
 801df02:	b002      	add	sp, #8
 801df04:	4770      	bx	lr
 801df06:	2002      	movs	r0, #2
 801df08:	4240      	negs	r0, r0
 801df0a:	e7fa      	b.n	801df02 <__ascii_mbtowc+0x1a>

0801df0c <__malloc_lock>:
 801df0c:	b510      	push	{r4, lr}
 801df0e:	4802      	ldr	r0, [pc, #8]	@ (801df18 <__malloc_lock+0xc>)
 801df10:	f7fe fcfb 	bl	801c90a <__retarget_lock_acquire_recursive>
 801df14:	bd10      	pop	{r4, pc}
 801df16:	46c0      	nop			@ (mov r8, r8)
 801df18:	200038b8 	.word	0x200038b8

0801df1c <__malloc_unlock>:
 801df1c:	b510      	push	{r4, lr}
 801df1e:	4802      	ldr	r0, [pc, #8]	@ (801df28 <__malloc_unlock+0xc>)
 801df20:	f7fe fcf4 	bl	801c90c <__retarget_lock_release_recursive>
 801df24:	bd10      	pop	{r4, pc}
 801df26:	46c0      	nop			@ (mov r8, r8)
 801df28:	200038b8 	.word	0x200038b8

0801df2c <_Balloc>:
 801df2c:	b570      	push	{r4, r5, r6, lr}
 801df2e:	69c5      	ldr	r5, [r0, #28]
 801df30:	0006      	movs	r6, r0
 801df32:	000c      	movs	r4, r1
 801df34:	2d00      	cmp	r5, #0
 801df36:	d10e      	bne.n	801df56 <_Balloc+0x2a>
 801df38:	2010      	movs	r0, #16
 801df3a:	f7ff ff29 	bl	801dd90 <malloc>
 801df3e:	1e02      	subs	r2, r0, #0
 801df40:	61f0      	str	r0, [r6, #28]
 801df42:	d104      	bne.n	801df4e <_Balloc+0x22>
 801df44:	216b      	movs	r1, #107	@ 0x6b
 801df46:	4b19      	ldr	r3, [pc, #100]	@ (801dfac <_Balloc+0x80>)
 801df48:	4819      	ldr	r0, [pc, #100]	@ (801dfb0 <_Balloc+0x84>)
 801df4a:	f001 f8cf 	bl	801f0ec <__assert_func>
 801df4e:	6045      	str	r5, [r0, #4]
 801df50:	6085      	str	r5, [r0, #8]
 801df52:	6005      	str	r5, [r0, #0]
 801df54:	60c5      	str	r5, [r0, #12]
 801df56:	69f5      	ldr	r5, [r6, #28]
 801df58:	68eb      	ldr	r3, [r5, #12]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d013      	beq.n	801df86 <_Balloc+0x5a>
 801df5e:	69f3      	ldr	r3, [r6, #28]
 801df60:	00a2      	lsls	r2, r4, #2
 801df62:	68db      	ldr	r3, [r3, #12]
 801df64:	189b      	adds	r3, r3, r2
 801df66:	6818      	ldr	r0, [r3, #0]
 801df68:	2800      	cmp	r0, #0
 801df6a:	d118      	bne.n	801df9e <_Balloc+0x72>
 801df6c:	2101      	movs	r1, #1
 801df6e:	000d      	movs	r5, r1
 801df70:	40a5      	lsls	r5, r4
 801df72:	1d6a      	adds	r2, r5, #5
 801df74:	0030      	movs	r0, r6
 801df76:	0092      	lsls	r2, r2, #2
 801df78:	f001 f8d6 	bl	801f128 <_calloc_r>
 801df7c:	2800      	cmp	r0, #0
 801df7e:	d00c      	beq.n	801df9a <_Balloc+0x6e>
 801df80:	6044      	str	r4, [r0, #4]
 801df82:	6085      	str	r5, [r0, #8]
 801df84:	e00d      	b.n	801dfa2 <_Balloc+0x76>
 801df86:	2221      	movs	r2, #33	@ 0x21
 801df88:	2104      	movs	r1, #4
 801df8a:	0030      	movs	r0, r6
 801df8c:	f001 f8cc 	bl	801f128 <_calloc_r>
 801df90:	69f3      	ldr	r3, [r6, #28]
 801df92:	60e8      	str	r0, [r5, #12]
 801df94:	68db      	ldr	r3, [r3, #12]
 801df96:	2b00      	cmp	r3, #0
 801df98:	d1e1      	bne.n	801df5e <_Balloc+0x32>
 801df9a:	2000      	movs	r0, #0
 801df9c:	bd70      	pop	{r4, r5, r6, pc}
 801df9e:	6802      	ldr	r2, [r0, #0]
 801dfa0:	601a      	str	r2, [r3, #0]
 801dfa2:	2300      	movs	r3, #0
 801dfa4:	6103      	str	r3, [r0, #16]
 801dfa6:	60c3      	str	r3, [r0, #12]
 801dfa8:	e7f8      	b.n	801df9c <_Balloc+0x70>
 801dfaa:	46c0      	nop			@ (mov r8, r8)
 801dfac:	08021242 	.word	0x08021242
 801dfb0:	08021322 	.word	0x08021322

0801dfb4 <_Bfree>:
 801dfb4:	b570      	push	{r4, r5, r6, lr}
 801dfb6:	69c6      	ldr	r6, [r0, #28]
 801dfb8:	0005      	movs	r5, r0
 801dfba:	000c      	movs	r4, r1
 801dfbc:	2e00      	cmp	r6, #0
 801dfbe:	d10e      	bne.n	801dfde <_Bfree+0x2a>
 801dfc0:	2010      	movs	r0, #16
 801dfc2:	f7ff fee5 	bl	801dd90 <malloc>
 801dfc6:	1e02      	subs	r2, r0, #0
 801dfc8:	61e8      	str	r0, [r5, #28]
 801dfca:	d104      	bne.n	801dfd6 <_Bfree+0x22>
 801dfcc:	218f      	movs	r1, #143	@ 0x8f
 801dfce:	4b09      	ldr	r3, [pc, #36]	@ (801dff4 <_Bfree+0x40>)
 801dfd0:	4809      	ldr	r0, [pc, #36]	@ (801dff8 <_Bfree+0x44>)
 801dfd2:	f001 f88b 	bl	801f0ec <__assert_func>
 801dfd6:	6046      	str	r6, [r0, #4]
 801dfd8:	6086      	str	r6, [r0, #8]
 801dfda:	6006      	str	r6, [r0, #0]
 801dfdc:	60c6      	str	r6, [r0, #12]
 801dfde:	2c00      	cmp	r4, #0
 801dfe0:	d007      	beq.n	801dff2 <_Bfree+0x3e>
 801dfe2:	69eb      	ldr	r3, [r5, #28]
 801dfe4:	6862      	ldr	r2, [r4, #4]
 801dfe6:	68db      	ldr	r3, [r3, #12]
 801dfe8:	0092      	lsls	r2, r2, #2
 801dfea:	189b      	adds	r3, r3, r2
 801dfec:	681a      	ldr	r2, [r3, #0]
 801dfee:	6022      	str	r2, [r4, #0]
 801dff0:	601c      	str	r4, [r3, #0]
 801dff2:	bd70      	pop	{r4, r5, r6, pc}
 801dff4:	08021242 	.word	0x08021242
 801dff8:	08021322 	.word	0x08021322

0801dffc <__multadd>:
 801dffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dffe:	000f      	movs	r7, r1
 801e000:	9001      	str	r0, [sp, #4]
 801e002:	000c      	movs	r4, r1
 801e004:	001e      	movs	r6, r3
 801e006:	2000      	movs	r0, #0
 801e008:	690d      	ldr	r5, [r1, #16]
 801e00a:	3714      	adds	r7, #20
 801e00c:	683b      	ldr	r3, [r7, #0]
 801e00e:	3001      	adds	r0, #1
 801e010:	b299      	uxth	r1, r3
 801e012:	4351      	muls	r1, r2
 801e014:	0c1b      	lsrs	r3, r3, #16
 801e016:	4353      	muls	r3, r2
 801e018:	1989      	adds	r1, r1, r6
 801e01a:	0c0e      	lsrs	r6, r1, #16
 801e01c:	199b      	adds	r3, r3, r6
 801e01e:	0c1e      	lsrs	r6, r3, #16
 801e020:	b289      	uxth	r1, r1
 801e022:	041b      	lsls	r3, r3, #16
 801e024:	185b      	adds	r3, r3, r1
 801e026:	c708      	stmia	r7!, {r3}
 801e028:	4285      	cmp	r5, r0
 801e02a:	dcef      	bgt.n	801e00c <__multadd+0x10>
 801e02c:	2e00      	cmp	r6, #0
 801e02e:	d022      	beq.n	801e076 <__multadd+0x7a>
 801e030:	68a3      	ldr	r3, [r4, #8]
 801e032:	42ab      	cmp	r3, r5
 801e034:	dc19      	bgt.n	801e06a <__multadd+0x6e>
 801e036:	6861      	ldr	r1, [r4, #4]
 801e038:	9801      	ldr	r0, [sp, #4]
 801e03a:	3101      	adds	r1, #1
 801e03c:	f7ff ff76 	bl	801df2c <_Balloc>
 801e040:	1e07      	subs	r7, r0, #0
 801e042:	d105      	bne.n	801e050 <__multadd+0x54>
 801e044:	003a      	movs	r2, r7
 801e046:	21ba      	movs	r1, #186	@ 0xba
 801e048:	4b0c      	ldr	r3, [pc, #48]	@ (801e07c <__multadd+0x80>)
 801e04a:	480d      	ldr	r0, [pc, #52]	@ (801e080 <__multadd+0x84>)
 801e04c:	f001 f84e 	bl	801f0ec <__assert_func>
 801e050:	0021      	movs	r1, r4
 801e052:	6922      	ldr	r2, [r4, #16]
 801e054:	310c      	adds	r1, #12
 801e056:	3202      	adds	r2, #2
 801e058:	0092      	lsls	r2, r2, #2
 801e05a:	300c      	adds	r0, #12
 801e05c:	f7fe fc62 	bl	801c924 <memcpy>
 801e060:	0021      	movs	r1, r4
 801e062:	9801      	ldr	r0, [sp, #4]
 801e064:	f7ff ffa6 	bl	801dfb4 <_Bfree>
 801e068:	003c      	movs	r4, r7
 801e06a:	1d2b      	adds	r3, r5, #4
 801e06c:	009b      	lsls	r3, r3, #2
 801e06e:	18e3      	adds	r3, r4, r3
 801e070:	3501      	adds	r5, #1
 801e072:	605e      	str	r6, [r3, #4]
 801e074:	6125      	str	r5, [r4, #16]
 801e076:	0020      	movs	r0, r4
 801e078:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e07a:	46c0      	nop			@ (mov r8, r8)
 801e07c:	080212b1 	.word	0x080212b1
 801e080:	08021322 	.word	0x08021322

0801e084 <__s2b>:
 801e084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e086:	0007      	movs	r7, r0
 801e088:	0018      	movs	r0, r3
 801e08a:	000c      	movs	r4, r1
 801e08c:	3008      	adds	r0, #8
 801e08e:	2109      	movs	r1, #9
 801e090:	9301      	str	r3, [sp, #4]
 801e092:	0015      	movs	r5, r2
 801e094:	f7e2 f910 	bl	80002b8 <__divsi3>
 801e098:	2301      	movs	r3, #1
 801e09a:	2100      	movs	r1, #0
 801e09c:	4283      	cmp	r3, r0
 801e09e:	db0a      	blt.n	801e0b6 <__s2b+0x32>
 801e0a0:	0038      	movs	r0, r7
 801e0a2:	f7ff ff43 	bl	801df2c <_Balloc>
 801e0a6:	1e01      	subs	r1, r0, #0
 801e0a8:	d108      	bne.n	801e0bc <__s2b+0x38>
 801e0aa:	000a      	movs	r2, r1
 801e0ac:	4b19      	ldr	r3, [pc, #100]	@ (801e114 <__s2b+0x90>)
 801e0ae:	481a      	ldr	r0, [pc, #104]	@ (801e118 <__s2b+0x94>)
 801e0b0:	31d3      	adds	r1, #211	@ 0xd3
 801e0b2:	f001 f81b 	bl	801f0ec <__assert_func>
 801e0b6:	005b      	lsls	r3, r3, #1
 801e0b8:	3101      	adds	r1, #1
 801e0ba:	e7ef      	b.n	801e09c <__s2b+0x18>
 801e0bc:	9b08      	ldr	r3, [sp, #32]
 801e0be:	6143      	str	r3, [r0, #20]
 801e0c0:	2301      	movs	r3, #1
 801e0c2:	6103      	str	r3, [r0, #16]
 801e0c4:	2d09      	cmp	r5, #9
 801e0c6:	dd18      	ble.n	801e0fa <__s2b+0x76>
 801e0c8:	0023      	movs	r3, r4
 801e0ca:	3309      	adds	r3, #9
 801e0cc:	001e      	movs	r6, r3
 801e0ce:	9300      	str	r3, [sp, #0]
 801e0d0:	1964      	adds	r4, r4, r5
 801e0d2:	7833      	ldrb	r3, [r6, #0]
 801e0d4:	220a      	movs	r2, #10
 801e0d6:	0038      	movs	r0, r7
 801e0d8:	3b30      	subs	r3, #48	@ 0x30
 801e0da:	f7ff ff8f 	bl	801dffc <__multadd>
 801e0de:	3601      	adds	r6, #1
 801e0e0:	0001      	movs	r1, r0
 801e0e2:	42a6      	cmp	r6, r4
 801e0e4:	d1f5      	bne.n	801e0d2 <__s2b+0x4e>
 801e0e6:	002c      	movs	r4, r5
 801e0e8:	9b00      	ldr	r3, [sp, #0]
 801e0ea:	3c08      	subs	r4, #8
 801e0ec:	191c      	adds	r4, r3, r4
 801e0ee:	002e      	movs	r6, r5
 801e0f0:	9b01      	ldr	r3, [sp, #4]
 801e0f2:	429e      	cmp	r6, r3
 801e0f4:	db04      	blt.n	801e100 <__s2b+0x7c>
 801e0f6:	0008      	movs	r0, r1
 801e0f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e0fa:	2509      	movs	r5, #9
 801e0fc:	340a      	adds	r4, #10
 801e0fe:	e7f6      	b.n	801e0ee <__s2b+0x6a>
 801e100:	1b63      	subs	r3, r4, r5
 801e102:	5d9b      	ldrb	r3, [r3, r6]
 801e104:	220a      	movs	r2, #10
 801e106:	0038      	movs	r0, r7
 801e108:	3b30      	subs	r3, #48	@ 0x30
 801e10a:	f7ff ff77 	bl	801dffc <__multadd>
 801e10e:	3601      	adds	r6, #1
 801e110:	0001      	movs	r1, r0
 801e112:	e7ed      	b.n	801e0f0 <__s2b+0x6c>
 801e114:	080212b1 	.word	0x080212b1
 801e118:	08021322 	.word	0x08021322

0801e11c <__hi0bits>:
 801e11c:	2280      	movs	r2, #128	@ 0x80
 801e11e:	0003      	movs	r3, r0
 801e120:	0252      	lsls	r2, r2, #9
 801e122:	2000      	movs	r0, #0
 801e124:	4293      	cmp	r3, r2
 801e126:	d201      	bcs.n	801e12c <__hi0bits+0x10>
 801e128:	041b      	lsls	r3, r3, #16
 801e12a:	3010      	adds	r0, #16
 801e12c:	2280      	movs	r2, #128	@ 0x80
 801e12e:	0452      	lsls	r2, r2, #17
 801e130:	4293      	cmp	r3, r2
 801e132:	d201      	bcs.n	801e138 <__hi0bits+0x1c>
 801e134:	3008      	adds	r0, #8
 801e136:	021b      	lsls	r3, r3, #8
 801e138:	2280      	movs	r2, #128	@ 0x80
 801e13a:	0552      	lsls	r2, r2, #21
 801e13c:	4293      	cmp	r3, r2
 801e13e:	d201      	bcs.n	801e144 <__hi0bits+0x28>
 801e140:	3004      	adds	r0, #4
 801e142:	011b      	lsls	r3, r3, #4
 801e144:	2280      	movs	r2, #128	@ 0x80
 801e146:	05d2      	lsls	r2, r2, #23
 801e148:	4293      	cmp	r3, r2
 801e14a:	d201      	bcs.n	801e150 <__hi0bits+0x34>
 801e14c:	3002      	adds	r0, #2
 801e14e:	009b      	lsls	r3, r3, #2
 801e150:	2b00      	cmp	r3, #0
 801e152:	db03      	blt.n	801e15c <__hi0bits+0x40>
 801e154:	3001      	adds	r0, #1
 801e156:	4213      	tst	r3, r2
 801e158:	d100      	bne.n	801e15c <__hi0bits+0x40>
 801e15a:	2020      	movs	r0, #32
 801e15c:	4770      	bx	lr

0801e15e <__lo0bits>:
 801e15e:	6803      	ldr	r3, [r0, #0]
 801e160:	0001      	movs	r1, r0
 801e162:	2207      	movs	r2, #7
 801e164:	0018      	movs	r0, r3
 801e166:	4010      	ands	r0, r2
 801e168:	4213      	tst	r3, r2
 801e16a:	d00d      	beq.n	801e188 <__lo0bits+0x2a>
 801e16c:	3a06      	subs	r2, #6
 801e16e:	2000      	movs	r0, #0
 801e170:	4213      	tst	r3, r2
 801e172:	d105      	bne.n	801e180 <__lo0bits+0x22>
 801e174:	3002      	adds	r0, #2
 801e176:	4203      	tst	r3, r0
 801e178:	d003      	beq.n	801e182 <__lo0bits+0x24>
 801e17a:	40d3      	lsrs	r3, r2
 801e17c:	0010      	movs	r0, r2
 801e17e:	600b      	str	r3, [r1, #0]
 801e180:	4770      	bx	lr
 801e182:	089b      	lsrs	r3, r3, #2
 801e184:	600b      	str	r3, [r1, #0]
 801e186:	e7fb      	b.n	801e180 <__lo0bits+0x22>
 801e188:	b29a      	uxth	r2, r3
 801e18a:	2a00      	cmp	r2, #0
 801e18c:	d101      	bne.n	801e192 <__lo0bits+0x34>
 801e18e:	2010      	movs	r0, #16
 801e190:	0c1b      	lsrs	r3, r3, #16
 801e192:	b2da      	uxtb	r2, r3
 801e194:	2a00      	cmp	r2, #0
 801e196:	d101      	bne.n	801e19c <__lo0bits+0x3e>
 801e198:	3008      	adds	r0, #8
 801e19a:	0a1b      	lsrs	r3, r3, #8
 801e19c:	071a      	lsls	r2, r3, #28
 801e19e:	d101      	bne.n	801e1a4 <__lo0bits+0x46>
 801e1a0:	3004      	adds	r0, #4
 801e1a2:	091b      	lsrs	r3, r3, #4
 801e1a4:	079a      	lsls	r2, r3, #30
 801e1a6:	d101      	bne.n	801e1ac <__lo0bits+0x4e>
 801e1a8:	3002      	adds	r0, #2
 801e1aa:	089b      	lsrs	r3, r3, #2
 801e1ac:	07da      	lsls	r2, r3, #31
 801e1ae:	d4e9      	bmi.n	801e184 <__lo0bits+0x26>
 801e1b0:	3001      	adds	r0, #1
 801e1b2:	085b      	lsrs	r3, r3, #1
 801e1b4:	d1e6      	bne.n	801e184 <__lo0bits+0x26>
 801e1b6:	2020      	movs	r0, #32
 801e1b8:	e7e2      	b.n	801e180 <__lo0bits+0x22>
	...

0801e1bc <__i2b>:
 801e1bc:	b510      	push	{r4, lr}
 801e1be:	000c      	movs	r4, r1
 801e1c0:	2101      	movs	r1, #1
 801e1c2:	f7ff feb3 	bl	801df2c <_Balloc>
 801e1c6:	2800      	cmp	r0, #0
 801e1c8:	d107      	bne.n	801e1da <__i2b+0x1e>
 801e1ca:	2146      	movs	r1, #70	@ 0x46
 801e1cc:	4c05      	ldr	r4, [pc, #20]	@ (801e1e4 <__i2b+0x28>)
 801e1ce:	0002      	movs	r2, r0
 801e1d0:	4b05      	ldr	r3, [pc, #20]	@ (801e1e8 <__i2b+0x2c>)
 801e1d2:	0020      	movs	r0, r4
 801e1d4:	31ff      	adds	r1, #255	@ 0xff
 801e1d6:	f000 ff89 	bl	801f0ec <__assert_func>
 801e1da:	2301      	movs	r3, #1
 801e1dc:	6144      	str	r4, [r0, #20]
 801e1de:	6103      	str	r3, [r0, #16]
 801e1e0:	bd10      	pop	{r4, pc}
 801e1e2:	46c0      	nop			@ (mov r8, r8)
 801e1e4:	08021322 	.word	0x08021322
 801e1e8:	080212b1 	.word	0x080212b1

0801e1ec <__multiply>:
 801e1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1ee:	0014      	movs	r4, r2
 801e1f0:	690a      	ldr	r2, [r1, #16]
 801e1f2:	6923      	ldr	r3, [r4, #16]
 801e1f4:	000d      	movs	r5, r1
 801e1f6:	b08b      	sub	sp, #44	@ 0x2c
 801e1f8:	429a      	cmp	r2, r3
 801e1fa:	db02      	blt.n	801e202 <__multiply+0x16>
 801e1fc:	0023      	movs	r3, r4
 801e1fe:	000c      	movs	r4, r1
 801e200:	001d      	movs	r5, r3
 801e202:	6927      	ldr	r7, [r4, #16]
 801e204:	692e      	ldr	r6, [r5, #16]
 801e206:	6861      	ldr	r1, [r4, #4]
 801e208:	19bb      	adds	r3, r7, r6
 801e20a:	9303      	str	r3, [sp, #12]
 801e20c:	68a3      	ldr	r3, [r4, #8]
 801e20e:	19ba      	adds	r2, r7, r6
 801e210:	4293      	cmp	r3, r2
 801e212:	da00      	bge.n	801e216 <__multiply+0x2a>
 801e214:	3101      	adds	r1, #1
 801e216:	f7ff fe89 	bl	801df2c <_Balloc>
 801e21a:	9002      	str	r0, [sp, #8]
 801e21c:	2800      	cmp	r0, #0
 801e21e:	d106      	bne.n	801e22e <__multiply+0x42>
 801e220:	21b1      	movs	r1, #177	@ 0xb1
 801e222:	4b49      	ldr	r3, [pc, #292]	@ (801e348 <__multiply+0x15c>)
 801e224:	4849      	ldr	r0, [pc, #292]	@ (801e34c <__multiply+0x160>)
 801e226:	9a02      	ldr	r2, [sp, #8]
 801e228:	0049      	lsls	r1, r1, #1
 801e22a:	f000 ff5f 	bl	801f0ec <__assert_func>
 801e22e:	9b02      	ldr	r3, [sp, #8]
 801e230:	2200      	movs	r2, #0
 801e232:	3314      	adds	r3, #20
 801e234:	469c      	mov	ip, r3
 801e236:	19bb      	adds	r3, r7, r6
 801e238:	009b      	lsls	r3, r3, #2
 801e23a:	4463      	add	r3, ip
 801e23c:	9304      	str	r3, [sp, #16]
 801e23e:	4663      	mov	r3, ip
 801e240:	9904      	ldr	r1, [sp, #16]
 801e242:	428b      	cmp	r3, r1
 801e244:	d32a      	bcc.n	801e29c <__multiply+0xb0>
 801e246:	0023      	movs	r3, r4
 801e248:	00bf      	lsls	r7, r7, #2
 801e24a:	3314      	adds	r3, #20
 801e24c:	3514      	adds	r5, #20
 801e24e:	9308      	str	r3, [sp, #32]
 801e250:	00b6      	lsls	r6, r6, #2
 801e252:	19db      	adds	r3, r3, r7
 801e254:	9305      	str	r3, [sp, #20]
 801e256:	19ab      	adds	r3, r5, r6
 801e258:	9309      	str	r3, [sp, #36]	@ 0x24
 801e25a:	2304      	movs	r3, #4
 801e25c:	9306      	str	r3, [sp, #24]
 801e25e:	0023      	movs	r3, r4
 801e260:	9a05      	ldr	r2, [sp, #20]
 801e262:	3315      	adds	r3, #21
 801e264:	9501      	str	r5, [sp, #4]
 801e266:	429a      	cmp	r2, r3
 801e268:	d305      	bcc.n	801e276 <__multiply+0x8a>
 801e26a:	1b13      	subs	r3, r2, r4
 801e26c:	3b15      	subs	r3, #21
 801e26e:	089b      	lsrs	r3, r3, #2
 801e270:	3301      	adds	r3, #1
 801e272:	009b      	lsls	r3, r3, #2
 801e274:	9306      	str	r3, [sp, #24]
 801e276:	9b01      	ldr	r3, [sp, #4]
 801e278:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e27a:	4293      	cmp	r3, r2
 801e27c:	d310      	bcc.n	801e2a0 <__multiply+0xb4>
 801e27e:	9b03      	ldr	r3, [sp, #12]
 801e280:	2b00      	cmp	r3, #0
 801e282:	dd05      	ble.n	801e290 <__multiply+0xa4>
 801e284:	9b04      	ldr	r3, [sp, #16]
 801e286:	3b04      	subs	r3, #4
 801e288:	9304      	str	r3, [sp, #16]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d056      	beq.n	801e33e <__multiply+0x152>
 801e290:	9b02      	ldr	r3, [sp, #8]
 801e292:	9a03      	ldr	r2, [sp, #12]
 801e294:	0018      	movs	r0, r3
 801e296:	611a      	str	r2, [r3, #16]
 801e298:	b00b      	add	sp, #44	@ 0x2c
 801e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e29c:	c304      	stmia	r3!, {r2}
 801e29e:	e7cf      	b.n	801e240 <__multiply+0x54>
 801e2a0:	9b01      	ldr	r3, [sp, #4]
 801e2a2:	6818      	ldr	r0, [r3, #0]
 801e2a4:	b280      	uxth	r0, r0
 801e2a6:	2800      	cmp	r0, #0
 801e2a8:	d01e      	beq.n	801e2e8 <__multiply+0xfc>
 801e2aa:	4667      	mov	r7, ip
 801e2ac:	2500      	movs	r5, #0
 801e2ae:	9e08      	ldr	r6, [sp, #32]
 801e2b0:	ce02      	ldmia	r6!, {r1}
 801e2b2:	683b      	ldr	r3, [r7, #0]
 801e2b4:	9307      	str	r3, [sp, #28]
 801e2b6:	b28b      	uxth	r3, r1
 801e2b8:	4343      	muls	r3, r0
 801e2ba:	001a      	movs	r2, r3
 801e2bc:	466b      	mov	r3, sp
 801e2be:	0c09      	lsrs	r1, r1, #16
 801e2c0:	8b9b      	ldrh	r3, [r3, #28]
 801e2c2:	4341      	muls	r1, r0
 801e2c4:	18d3      	adds	r3, r2, r3
 801e2c6:	9a07      	ldr	r2, [sp, #28]
 801e2c8:	195b      	adds	r3, r3, r5
 801e2ca:	0c12      	lsrs	r2, r2, #16
 801e2cc:	1889      	adds	r1, r1, r2
 801e2ce:	0c1a      	lsrs	r2, r3, #16
 801e2d0:	188a      	adds	r2, r1, r2
 801e2d2:	b29b      	uxth	r3, r3
 801e2d4:	0c15      	lsrs	r5, r2, #16
 801e2d6:	0412      	lsls	r2, r2, #16
 801e2d8:	431a      	orrs	r2, r3
 801e2da:	9b05      	ldr	r3, [sp, #20]
 801e2dc:	c704      	stmia	r7!, {r2}
 801e2de:	42b3      	cmp	r3, r6
 801e2e0:	d8e6      	bhi.n	801e2b0 <__multiply+0xc4>
 801e2e2:	4663      	mov	r3, ip
 801e2e4:	9a06      	ldr	r2, [sp, #24]
 801e2e6:	509d      	str	r5, [r3, r2]
 801e2e8:	9b01      	ldr	r3, [sp, #4]
 801e2ea:	6818      	ldr	r0, [r3, #0]
 801e2ec:	0c00      	lsrs	r0, r0, #16
 801e2ee:	d020      	beq.n	801e332 <__multiply+0x146>
 801e2f0:	4663      	mov	r3, ip
 801e2f2:	0025      	movs	r5, r4
 801e2f4:	4661      	mov	r1, ip
 801e2f6:	2700      	movs	r7, #0
 801e2f8:	681b      	ldr	r3, [r3, #0]
 801e2fa:	3514      	adds	r5, #20
 801e2fc:	682a      	ldr	r2, [r5, #0]
 801e2fe:	680e      	ldr	r6, [r1, #0]
 801e300:	b292      	uxth	r2, r2
 801e302:	4342      	muls	r2, r0
 801e304:	0c36      	lsrs	r6, r6, #16
 801e306:	1992      	adds	r2, r2, r6
 801e308:	19d2      	adds	r2, r2, r7
 801e30a:	0416      	lsls	r6, r2, #16
 801e30c:	b29b      	uxth	r3, r3
 801e30e:	431e      	orrs	r6, r3
 801e310:	600e      	str	r6, [r1, #0]
 801e312:	cd40      	ldmia	r5!, {r6}
 801e314:	684b      	ldr	r3, [r1, #4]
 801e316:	0c36      	lsrs	r6, r6, #16
 801e318:	4346      	muls	r6, r0
 801e31a:	b29b      	uxth	r3, r3
 801e31c:	0c12      	lsrs	r2, r2, #16
 801e31e:	18f3      	adds	r3, r6, r3
 801e320:	189b      	adds	r3, r3, r2
 801e322:	9a05      	ldr	r2, [sp, #20]
 801e324:	0c1f      	lsrs	r7, r3, #16
 801e326:	3104      	adds	r1, #4
 801e328:	42aa      	cmp	r2, r5
 801e32a:	d8e7      	bhi.n	801e2fc <__multiply+0x110>
 801e32c:	4662      	mov	r2, ip
 801e32e:	9906      	ldr	r1, [sp, #24]
 801e330:	5053      	str	r3, [r2, r1]
 801e332:	9b01      	ldr	r3, [sp, #4]
 801e334:	3304      	adds	r3, #4
 801e336:	9301      	str	r3, [sp, #4]
 801e338:	2304      	movs	r3, #4
 801e33a:	449c      	add	ip, r3
 801e33c:	e79b      	b.n	801e276 <__multiply+0x8a>
 801e33e:	9b03      	ldr	r3, [sp, #12]
 801e340:	3b01      	subs	r3, #1
 801e342:	9303      	str	r3, [sp, #12]
 801e344:	e79b      	b.n	801e27e <__multiply+0x92>
 801e346:	46c0      	nop			@ (mov r8, r8)
 801e348:	080212b1 	.word	0x080212b1
 801e34c:	08021322 	.word	0x08021322

0801e350 <__pow5mult>:
 801e350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e352:	2303      	movs	r3, #3
 801e354:	0015      	movs	r5, r2
 801e356:	0007      	movs	r7, r0
 801e358:	000e      	movs	r6, r1
 801e35a:	401a      	ands	r2, r3
 801e35c:	421d      	tst	r5, r3
 801e35e:	d008      	beq.n	801e372 <__pow5mult+0x22>
 801e360:	4925      	ldr	r1, [pc, #148]	@ (801e3f8 <__pow5mult+0xa8>)
 801e362:	3a01      	subs	r2, #1
 801e364:	0092      	lsls	r2, r2, #2
 801e366:	5852      	ldr	r2, [r2, r1]
 801e368:	2300      	movs	r3, #0
 801e36a:	0031      	movs	r1, r6
 801e36c:	f7ff fe46 	bl	801dffc <__multadd>
 801e370:	0006      	movs	r6, r0
 801e372:	10ad      	asrs	r5, r5, #2
 801e374:	d03d      	beq.n	801e3f2 <__pow5mult+0xa2>
 801e376:	69fc      	ldr	r4, [r7, #28]
 801e378:	2c00      	cmp	r4, #0
 801e37a:	d10f      	bne.n	801e39c <__pow5mult+0x4c>
 801e37c:	2010      	movs	r0, #16
 801e37e:	f7ff fd07 	bl	801dd90 <malloc>
 801e382:	1e02      	subs	r2, r0, #0
 801e384:	61f8      	str	r0, [r7, #28]
 801e386:	d105      	bne.n	801e394 <__pow5mult+0x44>
 801e388:	21b4      	movs	r1, #180	@ 0xb4
 801e38a:	4b1c      	ldr	r3, [pc, #112]	@ (801e3fc <__pow5mult+0xac>)
 801e38c:	481c      	ldr	r0, [pc, #112]	@ (801e400 <__pow5mult+0xb0>)
 801e38e:	31ff      	adds	r1, #255	@ 0xff
 801e390:	f000 feac 	bl	801f0ec <__assert_func>
 801e394:	6044      	str	r4, [r0, #4]
 801e396:	6084      	str	r4, [r0, #8]
 801e398:	6004      	str	r4, [r0, #0]
 801e39a:	60c4      	str	r4, [r0, #12]
 801e39c:	69fb      	ldr	r3, [r7, #28]
 801e39e:	689c      	ldr	r4, [r3, #8]
 801e3a0:	9301      	str	r3, [sp, #4]
 801e3a2:	2c00      	cmp	r4, #0
 801e3a4:	d108      	bne.n	801e3b8 <__pow5mult+0x68>
 801e3a6:	0038      	movs	r0, r7
 801e3a8:	4916      	ldr	r1, [pc, #88]	@ (801e404 <__pow5mult+0xb4>)
 801e3aa:	f7ff ff07 	bl	801e1bc <__i2b>
 801e3ae:	9b01      	ldr	r3, [sp, #4]
 801e3b0:	0004      	movs	r4, r0
 801e3b2:	6098      	str	r0, [r3, #8]
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	6003      	str	r3, [r0, #0]
 801e3b8:	2301      	movs	r3, #1
 801e3ba:	421d      	tst	r5, r3
 801e3bc:	d00a      	beq.n	801e3d4 <__pow5mult+0x84>
 801e3be:	0031      	movs	r1, r6
 801e3c0:	0022      	movs	r2, r4
 801e3c2:	0038      	movs	r0, r7
 801e3c4:	f7ff ff12 	bl	801e1ec <__multiply>
 801e3c8:	0031      	movs	r1, r6
 801e3ca:	9001      	str	r0, [sp, #4]
 801e3cc:	0038      	movs	r0, r7
 801e3ce:	f7ff fdf1 	bl	801dfb4 <_Bfree>
 801e3d2:	9e01      	ldr	r6, [sp, #4]
 801e3d4:	106d      	asrs	r5, r5, #1
 801e3d6:	d00c      	beq.n	801e3f2 <__pow5mult+0xa2>
 801e3d8:	6820      	ldr	r0, [r4, #0]
 801e3da:	2800      	cmp	r0, #0
 801e3dc:	d107      	bne.n	801e3ee <__pow5mult+0x9e>
 801e3de:	0022      	movs	r2, r4
 801e3e0:	0021      	movs	r1, r4
 801e3e2:	0038      	movs	r0, r7
 801e3e4:	f7ff ff02 	bl	801e1ec <__multiply>
 801e3e8:	2300      	movs	r3, #0
 801e3ea:	6020      	str	r0, [r4, #0]
 801e3ec:	6003      	str	r3, [r0, #0]
 801e3ee:	0004      	movs	r4, r0
 801e3f0:	e7e2      	b.n	801e3b8 <__pow5mult+0x68>
 801e3f2:	0030      	movs	r0, r6
 801e3f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e3f6:	46c0      	nop			@ (mov r8, r8)
 801e3f8:	0802137c 	.word	0x0802137c
 801e3fc:	08021242 	.word	0x08021242
 801e400:	08021322 	.word	0x08021322
 801e404:	00000271 	.word	0x00000271

0801e408 <__lshift>:
 801e408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e40a:	000c      	movs	r4, r1
 801e40c:	0016      	movs	r6, r2
 801e40e:	6923      	ldr	r3, [r4, #16]
 801e410:	1157      	asrs	r7, r2, #5
 801e412:	b085      	sub	sp, #20
 801e414:	18fb      	adds	r3, r7, r3
 801e416:	9301      	str	r3, [sp, #4]
 801e418:	3301      	adds	r3, #1
 801e41a:	9300      	str	r3, [sp, #0]
 801e41c:	6849      	ldr	r1, [r1, #4]
 801e41e:	68a3      	ldr	r3, [r4, #8]
 801e420:	9002      	str	r0, [sp, #8]
 801e422:	9a00      	ldr	r2, [sp, #0]
 801e424:	4293      	cmp	r3, r2
 801e426:	db10      	blt.n	801e44a <__lshift+0x42>
 801e428:	9802      	ldr	r0, [sp, #8]
 801e42a:	f7ff fd7f 	bl	801df2c <_Balloc>
 801e42e:	2300      	movs	r3, #0
 801e430:	0001      	movs	r1, r0
 801e432:	0005      	movs	r5, r0
 801e434:	001a      	movs	r2, r3
 801e436:	3114      	adds	r1, #20
 801e438:	4298      	cmp	r0, r3
 801e43a:	d10c      	bne.n	801e456 <__lshift+0x4e>
 801e43c:	21ef      	movs	r1, #239	@ 0xef
 801e43e:	002a      	movs	r2, r5
 801e440:	4b25      	ldr	r3, [pc, #148]	@ (801e4d8 <__lshift+0xd0>)
 801e442:	4826      	ldr	r0, [pc, #152]	@ (801e4dc <__lshift+0xd4>)
 801e444:	0049      	lsls	r1, r1, #1
 801e446:	f000 fe51 	bl	801f0ec <__assert_func>
 801e44a:	3101      	adds	r1, #1
 801e44c:	005b      	lsls	r3, r3, #1
 801e44e:	e7e8      	b.n	801e422 <__lshift+0x1a>
 801e450:	0098      	lsls	r0, r3, #2
 801e452:	500a      	str	r2, [r1, r0]
 801e454:	3301      	adds	r3, #1
 801e456:	42bb      	cmp	r3, r7
 801e458:	dbfa      	blt.n	801e450 <__lshift+0x48>
 801e45a:	43fb      	mvns	r3, r7
 801e45c:	17db      	asrs	r3, r3, #31
 801e45e:	401f      	ands	r7, r3
 801e460:	00bf      	lsls	r7, r7, #2
 801e462:	0023      	movs	r3, r4
 801e464:	201f      	movs	r0, #31
 801e466:	19c9      	adds	r1, r1, r7
 801e468:	0037      	movs	r7, r6
 801e46a:	6922      	ldr	r2, [r4, #16]
 801e46c:	3314      	adds	r3, #20
 801e46e:	0092      	lsls	r2, r2, #2
 801e470:	189a      	adds	r2, r3, r2
 801e472:	4007      	ands	r7, r0
 801e474:	4206      	tst	r6, r0
 801e476:	d029      	beq.n	801e4cc <__lshift+0xc4>
 801e478:	3001      	adds	r0, #1
 801e47a:	1bc0      	subs	r0, r0, r7
 801e47c:	9003      	str	r0, [sp, #12]
 801e47e:	468c      	mov	ip, r1
 801e480:	2000      	movs	r0, #0
 801e482:	681e      	ldr	r6, [r3, #0]
 801e484:	40be      	lsls	r6, r7
 801e486:	4306      	orrs	r6, r0
 801e488:	4660      	mov	r0, ip
 801e48a:	c040      	stmia	r0!, {r6}
 801e48c:	4684      	mov	ip, r0
 801e48e:	9e03      	ldr	r6, [sp, #12]
 801e490:	cb01      	ldmia	r3!, {r0}
 801e492:	40f0      	lsrs	r0, r6
 801e494:	429a      	cmp	r2, r3
 801e496:	d8f4      	bhi.n	801e482 <__lshift+0x7a>
 801e498:	0026      	movs	r6, r4
 801e49a:	3615      	adds	r6, #21
 801e49c:	2304      	movs	r3, #4
 801e49e:	42b2      	cmp	r2, r6
 801e4a0:	d304      	bcc.n	801e4ac <__lshift+0xa4>
 801e4a2:	1b13      	subs	r3, r2, r4
 801e4a4:	3b15      	subs	r3, #21
 801e4a6:	089b      	lsrs	r3, r3, #2
 801e4a8:	3301      	adds	r3, #1
 801e4aa:	009b      	lsls	r3, r3, #2
 801e4ac:	50c8      	str	r0, [r1, r3]
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	d002      	beq.n	801e4b8 <__lshift+0xb0>
 801e4b2:	9b01      	ldr	r3, [sp, #4]
 801e4b4:	3302      	adds	r3, #2
 801e4b6:	9300      	str	r3, [sp, #0]
 801e4b8:	9b00      	ldr	r3, [sp, #0]
 801e4ba:	9802      	ldr	r0, [sp, #8]
 801e4bc:	3b01      	subs	r3, #1
 801e4be:	0021      	movs	r1, r4
 801e4c0:	612b      	str	r3, [r5, #16]
 801e4c2:	f7ff fd77 	bl	801dfb4 <_Bfree>
 801e4c6:	0028      	movs	r0, r5
 801e4c8:	b005      	add	sp, #20
 801e4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4cc:	cb01      	ldmia	r3!, {r0}
 801e4ce:	c101      	stmia	r1!, {r0}
 801e4d0:	429a      	cmp	r2, r3
 801e4d2:	d8fb      	bhi.n	801e4cc <__lshift+0xc4>
 801e4d4:	e7f0      	b.n	801e4b8 <__lshift+0xb0>
 801e4d6:	46c0      	nop			@ (mov r8, r8)
 801e4d8:	080212b1 	.word	0x080212b1
 801e4dc:	08021322 	.word	0x08021322

0801e4e0 <__mcmp>:
 801e4e0:	b530      	push	{r4, r5, lr}
 801e4e2:	690b      	ldr	r3, [r1, #16]
 801e4e4:	6904      	ldr	r4, [r0, #16]
 801e4e6:	0002      	movs	r2, r0
 801e4e8:	1ae0      	subs	r0, r4, r3
 801e4ea:	429c      	cmp	r4, r3
 801e4ec:	d10f      	bne.n	801e50e <__mcmp+0x2e>
 801e4ee:	3214      	adds	r2, #20
 801e4f0:	009b      	lsls	r3, r3, #2
 801e4f2:	3114      	adds	r1, #20
 801e4f4:	0014      	movs	r4, r2
 801e4f6:	18c9      	adds	r1, r1, r3
 801e4f8:	18d2      	adds	r2, r2, r3
 801e4fa:	3a04      	subs	r2, #4
 801e4fc:	3904      	subs	r1, #4
 801e4fe:	6815      	ldr	r5, [r2, #0]
 801e500:	680b      	ldr	r3, [r1, #0]
 801e502:	429d      	cmp	r5, r3
 801e504:	d004      	beq.n	801e510 <__mcmp+0x30>
 801e506:	2001      	movs	r0, #1
 801e508:	429d      	cmp	r5, r3
 801e50a:	d200      	bcs.n	801e50e <__mcmp+0x2e>
 801e50c:	3802      	subs	r0, #2
 801e50e:	bd30      	pop	{r4, r5, pc}
 801e510:	4294      	cmp	r4, r2
 801e512:	d3f2      	bcc.n	801e4fa <__mcmp+0x1a>
 801e514:	e7fb      	b.n	801e50e <__mcmp+0x2e>
	...

0801e518 <__mdiff>:
 801e518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e51a:	000c      	movs	r4, r1
 801e51c:	b087      	sub	sp, #28
 801e51e:	9000      	str	r0, [sp, #0]
 801e520:	0011      	movs	r1, r2
 801e522:	0020      	movs	r0, r4
 801e524:	0017      	movs	r7, r2
 801e526:	f7ff ffdb 	bl	801e4e0 <__mcmp>
 801e52a:	1e05      	subs	r5, r0, #0
 801e52c:	d110      	bne.n	801e550 <__mdiff+0x38>
 801e52e:	0001      	movs	r1, r0
 801e530:	9800      	ldr	r0, [sp, #0]
 801e532:	f7ff fcfb 	bl	801df2c <_Balloc>
 801e536:	1e02      	subs	r2, r0, #0
 801e538:	d104      	bne.n	801e544 <__mdiff+0x2c>
 801e53a:	4b40      	ldr	r3, [pc, #256]	@ (801e63c <__mdiff+0x124>)
 801e53c:	4840      	ldr	r0, [pc, #256]	@ (801e640 <__mdiff+0x128>)
 801e53e:	4941      	ldr	r1, [pc, #260]	@ (801e644 <__mdiff+0x12c>)
 801e540:	f000 fdd4 	bl	801f0ec <__assert_func>
 801e544:	2301      	movs	r3, #1
 801e546:	6145      	str	r5, [r0, #20]
 801e548:	6103      	str	r3, [r0, #16]
 801e54a:	0010      	movs	r0, r2
 801e54c:	b007      	add	sp, #28
 801e54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e550:	2600      	movs	r6, #0
 801e552:	42b0      	cmp	r0, r6
 801e554:	da03      	bge.n	801e55e <__mdiff+0x46>
 801e556:	0023      	movs	r3, r4
 801e558:	003c      	movs	r4, r7
 801e55a:	001f      	movs	r7, r3
 801e55c:	3601      	adds	r6, #1
 801e55e:	6861      	ldr	r1, [r4, #4]
 801e560:	9800      	ldr	r0, [sp, #0]
 801e562:	f7ff fce3 	bl	801df2c <_Balloc>
 801e566:	1e02      	subs	r2, r0, #0
 801e568:	d103      	bne.n	801e572 <__mdiff+0x5a>
 801e56a:	4b34      	ldr	r3, [pc, #208]	@ (801e63c <__mdiff+0x124>)
 801e56c:	4834      	ldr	r0, [pc, #208]	@ (801e640 <__mdiff+0x128>)
 801e56e:	4936      	ldr	r1, [pc, #216]	@ (801e648 <__mdiff+0x130>)
 801e570:	e7e6      	b.n	801e540 <__mdiff+0x28>
 801e572:	6923      	ldr	r3, [r4, #16]
 801e574:	3414      	adds	r4, #20
 801e576:	9300      	str	r3, [sp, #0]
 801e578:	009b      	lsls	r3, r3, #2
 801e57a:	18e3      	adds	r3, r4, r3
 801e57c:	0021      	movs	r1, r4
 801e57e:	9401      	str	r4, [sp, #4]
 801e580:	003c      	movs	r4, r7
 801e582:	9302      	str	r3, [sp, #8]
 801e584:	693b      	ldr	r3, [r7, #16]
 801e586:	3414      	adds	r4, #20
 801e588:	009b      	lsls	r3, r3, #2
 801e58a:	18e3      	adds	r3, r4, r3
 801e58c:	9303      	str	r3, [sp, #12]
 801e58e:	0003      	movs	r3, r0
 801e590:	60c6      	str	r6, [r0, #12]
 801e592:	468c      	mov	ip, r1
 801e594:	2000      	movs	r0, #0
 801e596:	3314      	adds	r3, #20
 801e598:	9304      	str	r3, [sp, #16]
 801e59a:	9305      	str	r3, [sp, #20]
 801e59c:	4663      	mov	r3, ip
 801e59e:	cb20      	ldmia	r3!, {r5}
 801e5a0:	b2a9      	uxth	r1, r5
 801e5a2:	000e      	movs	r6, r1
 801e5a4:	469c      	mov	ip, r3
 801e5a6:	cc08      	ldmia	r4!, {r3}
 801e5a8:	0c2d      	lsrs	r5, r5, #16
 801e5aa:	b299      	uxth	r1, r3
 801e5ac:	1a71      	subs	r1, r6, r1
 801e5ae:	1809      	adds	r1, r1, r0
 801e5b0:	0c1b      	lsrs	r3, r3, #16
 801e5b2:	1408      	asrs	r0, r1, #16
 801e5b4:	1aeb      	subs	r3, r5, r3
 801e5b6:	181b      	adds	r3, r3, r0
 801e5b8:	1418      	asrs	r0, r3, #16
 801e5ba:	b289      	uxth	r1, r1
 801e5bc:	041b      	lsls	r3, r3, #16
 801e5be:	4319      	orrs	r1, r3
 801e5c0:	9b05      	ldr	r3, [sp, #20]
 801e5c2:	c302      	stmia	r3!, {r1}
 801e5c4:	9305      	str	r3, [sp, #20]
 801e5c6:	9b03      	ldr	r3, [sp, #12]
 801e5c8:	42a3      	cmp	r3, r4
 801e5ca:	d8e7      	bhi.n	801e59c <__mdiff+0x84>
 801e5cc:	0039      	movs	r1, r7
 801e5ce:	9c03      	ldr	r4, [sp, #12]
 801e5d0:	3115      	adds	r1, #21
 801e5d2:	2304      	movs	r3, #4
 801e5d4:	428c      	cmp	r4, r1
 801e5d6:	d304      	bcc.n	801e5e2 <__mdiff+0xca>
 801e5d8:	1be3      	subs	r3, r4, r7
 801e5da:	3b15      	subs	r3, #21
 801e5dc:	089b      	lsrs	r3, r3, #2
 801e5de:	3301      	adds	r3, #1
 801e5e0:	009b      	lsls	r3, r3, #2
 801e5e2:	9901      	ldr	r1, [sp, #4]
 801e5e4:	18cd      	adds	r5, r1, r3
 801e5e6:	9904      	ldr	r1, [sp, #16]
 801e5e8:	002e      	movs	r6, r5
 801e5ea:	18cb      	adds	r3, r1, r3
 801e5ec:	001f      	movs	r7, r3
 801e5ee:	9902      	ldr	r1, [sp, #8]
 801e5f0:	428e      	cmp	r6, r1
 801e5f2:	d311      	bcc.n	801e618 <__mdiff+0x100>
 801e5f4:	9c02      	ldr	r4, [sp, #8]
 801e5f6:	1ee9      	subs	r1, r5, #3
 801e5f8:	2000      	movs	r0, #0
 801e5fa:	428c      	cmp	r4, r1
 801e5fc:	d304      	bcc.n	801e608 <__mdiff+0xf0>
 801e5fe:	0021      	movs	r1, r4
 801e600:	3103      	adds	r1, #3
 801e602:	1b49      	subs	r1, r1, r5
 801e604:	0889      	lsrs	r1, r1, #2
 801e606:	0088      	lsls	r0, r1, #2
 801e608:	181b      	adds	r3, r3, r0
 801e60a:	3b04      	subs	r3, #4
 801e60c:	6819      	ldr	r1, [r3, #0]
 801e60e:	2900      	cmp	r1, #0
 801e610:	d010      	beq.n	801e634 <__mdiff+0x11c>
 801e612:	9b00      	ldr	r3, [sp, #0]
 801e614:	6113      	str	r3, [r2, #16]
 801e616:	e798      	b.n	801e54a <__mdiff+0x32>
 801e618:	4684      	mov	ip, r0
 801e61a:	ce02      	ldmia	r6!, {r1}
 801e61c:	b288      	uxth	r0, r1
 801e61e:	4460      	add	r0, ip
 801e620:	1400      	asrs	r0, r0, #16
 801e622:	0c0c      	lsrs	r4, r1, #16
 801e624:	1904      	adds	r4, r0, r4
 801e626:	4461      	add	r1, ip
 801e628:	1420      	asrs	r0, r4, #16
 801e62a:	b289      	uxth	r1, r1
 801e62c:	0424      	lsls	r4, r4, #16
 801e62e:	4321      	orrs	r1, r4
 801e630:	c702      	stmia	r7!, {r1}
 801e632:	e7dc      	b.n	801e5ee <__mdiff+0xd6>
 801e634:	9900      	ldr	r1, [sp, #0]
 801e636:	3901      	subs	r1, #1
 801e638:	9100      	str	r1, [sp, #0]
 801e63a:	e7e6      	b.n	801e60a <__mdiff+0xf2>
 801e63c:	080212b1 	.word	0x080212b1
 801e640:	08021322 	.word	0x08021322
 801e644:	00000237 	.word	0x00000237
 801e648:	00000245 	.word	0x00000245

0801e64c <__ulp>:
 801e64c:	b510      	push	{r4, lr}
 801e64e:	2400      	movs	r4, #0
 801e650:	4b0c      	ldr	r3, [pc, #48]	@ (801e684 <__ulp+0x38>)
 801e652:	4a0d      	ldr	r2, [pc, #52]	@ (801e688 <__ulp+0x3c>)
 801e654:	400b      	ands	r3, r1
 801e656:	189b      	adds	r3, r3, r2
 801e658:	42a3      	cmp	r3, r4
 801e65a:	dc06      	bgt.n	801e66a <__ulp+0x1e>
 801e65c:	425b      	negs	r3, r3
 801e65e:	151a      	asrs	r2, r3, #20
 801e660:	2a13      	cmp	r2, #19
 801e662:	dc05      	bgt.n	801e670 <__ulp+0x24>
 801e664:	2380      	movs	r3, #128	@ 0x80
 801e666:	031b      	lsls	r3, r3, #12
 801e668:	4113      	asrs	r3, r2
 801e66a:	0019      	movs	r1, r3
 801e66c:	0020      	movs	r0, r4
 801e66e:	bd10      	pop	{r4, pc}
 801e670:	3a14      	subs	r2, #20
 801e672:	2401      	movs	r4, #1
 801e674:	2a1e      	cmp	r2, #30
 801e676:	dc02      	bgt.n	801e67e <__ulp+0x32>
 801e678:	2480      	movs	r4, #128	@ 0x80
 801e67a:	0624      	lsls	r4, r4, #24
 801e67c:	40d4      	lsrs	r4, r2
 801e67e:	2300      	movs	r3, #0
 801e680:	e7f3      	b.n	801e66a <__ulp+0x1e>
 801e682:	46c0      	nop			@ (mov r8, r8)
 801e684:	7ff00000 	.word	0x7ff00000
 801e688:	fcc00000 	.word	0xfcc00000

0801e68c <__b2d>:
 801e68c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e68e:	0006      	movs	r6, r0
 801e690:	6903      	ldr	r3, [r0, #16]
 801e692:	3614      	adds	r6, #20
 801e694:	009b      	lsls	r3, r3, #2
 801e696:	18f3      	adds	r3, r6, r3
 801e698:	1f1d      	subs	r5, r3, #4
 801e69a:	682c      	ldr	r4, [r5, #0]
 801e69c:	000f      	movs	r7, r1
 801e69e:	0020      	movs	r0, r4
 801e6a0:	9301      	str	r3, [sp, #4]
 801e6a2:	f7ff fd3b 	bl	801e11c <__hi0bits>
 801e6a6:	2220      	movs	r2, #32
 801e6a8:	1a12      	subs	r2, r2, r0
 801e6aa:	603a      	str	r2, [r7, #0]
 801e6ac:	0003      	movs	r3, r0
 801e6ae:	4a1c      	ldr	r2, [pc, #112]	@ (801e720 <__b2d+0x94>)
 801e6b0:	280a      	cmp	r0, #10
 801e6b2:	dc15      	bgt.n	801e6e0 <__b2d+0x54>
 801e6b4:	210b      	movs	r1, #11
 801e6b6:	0027      	movs	r7, r4
 801e6b8:	1a09      	subs	r1, r1, r0
 801e6ba:	40cf      	lsrs	r7, r1
 801e6bc:	433a      	orrs	r2, r7
 801e6be:	468c      	mov	ip, r1
 801e6c0:	0011      	movs	r1, r2
 801e6c2:	2200      	movs	r2, #0
 801e6c4:	42ae      	cmp	r6, r5
 801e6c6:	d202      	bcs.n	801e6ce <__b2d+0x42>
 801e6c8:	9a01      	ldr	r2, [sp, #4]
 801e6ca:	3a08      	subs	r2, #8
 801e6cc:	6812      	ldr	r2, [r2, #0]
 801e6ce:	3315      	adds	r3, #21
 801e6d0:	409c      	lsls	r4, r3
 801e6d2:	4663      	mov	r3, ip
 801e6d4:	0027      	movs	r7, r4
 801e6d6:	40da      	lsrs	r2, r3
 801e6d8:	4317      	orrs	r7, r2
 801e6da:	0038      	movs	r0, r7
 801e6dc:	b003      	add	sp, #12
 801e6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6e0:	2700      	movs	r7, #0
 801e6e2:	42ae      	cmp	r6, r5
 801e6e4:	d202      	bcs.n	801e6ec <__b2d+0x60>
 801e6e6:	9d01      	ldr	r5, [sp, #4]
 801e6e8:	3d08      	subs	r5, #8
 801e6ea:	682f      	ldr	r7, [r5, #0]
 801e6ec:	210b      	movs	r1, #11
 801e6ee:	4249      	negs	r1, r1
 801e6f0:	468c      	mov	ip, r1
 801e6f2:	449c      	add	ip, r3
 801e6f4:	2b0b      	cmp	r3, #11
 801e6f6:	d010      	beq.n	801e71a <__b2d+0x8e>
 801e6f8:	4661      	mov	r1, ip
 801e6fa:	2320      	movs	r3, #32
 801e6fc:	408c      	lsls	r4, r1
 801e6fe:	1a5b      	subs	r3, r3, r1
 801e700:	0039      	movs	r1, r7
 801e702:	40d9      	lsrs	r1, r3
 801e704:	430c      	orrs	r4, r1
 801e706:	4322      	orrs	r2, r4
 801e708:	0011      	movs	r1, r2
 801e70a:	2200      	movs	r2, #0
 801e70c:	42b5      	cmp	r5, r6
 801e70e:	d901      	bls.n	801e714 <__b2d+0x88>
 801e710:	3d04      	subs	r5, #4
 801e712:	682a      	ldr	r2, [r5, #0]
 801e714:	4664      	mov	r4, ip
 801e716:	40a7      	lsls	r7, r4
 801e718:	e7dd      	b.n	801e6d6 <__b2d+0x4a>
 801e71a:	4322      	orrs	r2, r4
 801e71c:	0011      	movs	r1, r2
 801e71e:	e7dc      	b.n	801e6da <__b2d+0x4e>
 801e720:	3ff00000 	.word	0x3ff00000

0801e724 <__d2b>:
 801e724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e726:	2101      	movs	r1, #1
 801e728:	0016      	movs	r6, r2
 801e72a:	001f      	movs	r7, r3
 801e72c:	f7ff fbfe 	bl	801df2c <_Balloc>
 801e730:	1e04      	subs	r4, r0, #0
 801e732:	d105      	bne.n	801e740 <__d2b+0x1c>
 801e734:	0022      	movs	r2, r4
 801e736:	4b25      	ldr	r3, [pc, #148]	@ (801e7cc <__d2b+0xa8>)
 801e738:	4825      	ldr	r0, [pc, #148]	@ (801e7d0 <__d2b+0xac>)
 801e73a:	4926      	ldr	r1, [pc, #152]	@ (801e7d4 <__d2b+0xb0>)
 801e73c:	f000 fcd6 	bl	801f0ec <__assert_func>
 801e740:	033b      	lsls	r3, r7, #12
 801e742:	007d      	lsls	r5, r7, #1
 801e744:	0b1b      	lsrs	r3, r3, #12
 801e746:	0d6d      	lsrs	r5, r5, #21
 801e748:	d002      	beq.n	801e750 <__d2b+0x2c>
 801e74a:	2280      	movs	r2, #128	@ 0x80
 801e74c:	0352      	lsls	r2, r2, #13
 801e74e:	4313      	orrs	r3, r2
 801e750:	9301      	str	r3, [sp, #4]
 801e752:	2e00      	cmp	r6, #0
 801e754:	d025      	beq.n	801e7a2 <__d2b+0x7e>
 801e756:	4668      	mov	r0, sp
 801e758:	9600      	str	r6, [sp, #0]
 801e75a:	f7ff fd00 	bl	801e15e <__lo0bits>
 801e75e:	9b01      	ldr	r3, [sp, #4]
 801e760:	9900      	ldr	r1, [sp, #0]
 801e762:	2800      	cmp	r0, #0
 801e764:	d01b      	beq.n	801e79e <__d2b+0x7a>
 801e766:	2220      	movs	r2, #32
 801e768:	001e      	movs	r6, r3
 801e76a:	1a12      	subs	r2, r2, r0
 801e76c:	4096      	lsls	r6, r2
 801e76e:	0032      	movs	r2, r6
 801e770:	40c3      	lsrs	r3, r0
 801e772:	430a      	orrs	r2, r1
 801e774:	6162      	str	r2, [r4, #20]
 801e776:	9301      	str	r3, [sp, #4]
 801e778:	9e01      	ldr	r6, [sp, #4]
 801e77a:	61a6      	str	r6, [r4, #24]
 801e77c:	1e73      	subs	r3, r6, #1
 801e77e:	419e      	sbcs	r6, r3
 801e780:	3601      	adds	r6, #1
 801e782:	6126      	str	r6, [r4, #16]
 801e784:	2d00      	cmp	r5, #0
 801e786:	d014      	beq.n	801e7b2 <__d2b+0x8e>
 801e788:	2635      	movs	r6, #53	@ 0x35
 801e78a:	4b13      	ldr	r3, [pc, #76]	@ (801e7d8 <__d2b+0xb4>)
 801e78c:	18ed      	adds	r5, r5, r3
 801e78e:	9b08      	ldr	r3, [sp, #32]
 801e790:	182d      	adds	r5, r5, r0
 801e792:	601d      	str	r5, [r3, #0]
 801e794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e796:	1a36      	subs	r6, r6, r0
 801e798:	601e      	str	r6, [r3, #0]
 801e79a:	0020      	movs	r0, r4
 801e79c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e79e:	6161      	str	r1, [r4, #20]
 801e7a0:	e7ea      	b.n	801e778 <__d2b+0x54>
 801e7a2:	a801      	add	r0, sp, #4
 801e7a4:	f7ff fcdb 	bl	801e15e <__lo0bits>
 801e7a8:	9b01      	ldr	r3, [sp, #4]
 801e7aa:	2601      	movs	r6, #1
 801e7ac:	6163      	str	r3, [r4, #20]
 801e7ae:	3020      	adds	r0, #32
 801e7b0:	e7e7      	b.n	801e782 <__d2b+0x5e>
 801e7b2:	4b0a      	ldr	r3, [pc, #40]	@ (801e7dc <__d2b+0xb8>)
 801e7b4:	18c0      	adds	r0, r0, r3
 801e7b6:	9b08      	ldr	r3, [sp, #32]
 801e7b8:	6018      	str	r0, [r3, #0]
 801e7ba:	4b09      	ldr	r3, [pc, #36]	@ (801e7e0 <__d2b+0xbc>)
 801e7bc:	18f3      	adds	r3, r6, r3
 801e7be:	009b      	lsls	r3, r3, #2
 801e7c0:	18e3      	adds	r3, r4, r3
 801e7c2:	6958      	ldr	r0, [r3, #20]
 801e7c4:	f7ff fcaa 	bl	801e11c <__hi0bits>
 801e7c8:	0176      	lsls	r6, r6, #5
 801e7ca:	e7e3      	b.n	801e794 <__d2b+0x70>
 801e7cc:	080212b1 	.word	0x080212b1
 801e7d0:	08021322 	.word	0x08021322
 801e7d4:	0000030f 	.word	0x0000030f
 801e7d8:	fffffbcd 	.word	0xfffffbcd
 801e7dc:	fffffbce 	.word	0xfffffbce
 801e7e0:	3fffffff 	.word	0x3fffffff

0801e7e4 <__ratio>:
 801e7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e7e6:	b087      	sub	sp, #28
 801e7e8:	000f      	movs	r7, r1
 801e7ea:	a904      	add	r1, sp, #16
 801e7ec:	0006      	movs	r6, r0
 801e7ee:	f7ff ff4d 	bl	801e68c <__b2d>
 801e7f2:	9000      	str	r0, [sp, #0]
 801e7f4:	9101      	str	r1, [sp, #4]
 801e7f6:	9b00      	ldr	r3, [sp, #0]
 801e7f8:	9c01      	ldr	r4, [sp, #4]
 801e7fa:	0038      	movs	r0, r7
 801e7fc:	a905      	add	r1, sp, #20
 801e7fe:	9302      	str	r3, [sp, #8]
 801e800:	9403      	str	r4, [sp, #12]
 801e802:	f7ff ff43 	bl	801e68c <__b2d>
 801e806:	000d      	movs	r5, r1
 801e808:	0002      	movs	r2, r0
 801e80a:	000b      	movs	r3, r1
 801e80c:	6930      	ldr	r0, [r6, #16]
 801e80e:	6939      	ldr	r1, [r7, #16]
 801e810:	9e04      	ldr	r6, [sp, #16]
 801e812:	1a40      	subs	r0, r0, r1
 801e814:	9905      	ldr	r1, [sp, #20]
 801e816:	0140      	lsls	r0, r0, #5
 801e818:	1a71      	subs	r1, r6, r1
 801e81a:	1841      	adds	r1, r0, r1
 801e81c:	0508      	lsls	r0, r1, #20
 801e81e:	2900      	cmp	r1, #0
 801e820:	dd08      	ble.n	801e834 <__ratio+0x50>
 801e822:	9901      	ldr	r1, [sp, #4]
 801e824:	1841      	adds	r1, r0, r1
 801e826:	9103      	str	r1, [sp, #12]
 801e828:	9802      	ldr	r0, [sp, #8]
 801e82a:	9903      	ldr	r1, [sp, #12]
 801e82c:	f7e3 fac2 	bl	8001db4 <__aeabi_ddiv>
 801e830:	b007      	add	sp, #28
 801e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e834:	1a2b      	subs	r3, r5, r0
 801e836:	e7f7      	b.n	801e828 <__ratio+0x44>

0801e838 <__copybits>:
 801e838:	b570      	push	{r4, r5, r6, lr}
 801e83a:	0014      	movs	r4, r2
 801e83c:	0005      	movs	r5, r0
 801e83e:	3901      	subs	r1, #1
 801e840:	6913      	ldr	r3, [r2, #16]
 801e842:	1149      	asrs	r1, r1, #5
 801e844:	3101      	adds	r1, #1
 801e846:	0089      	lsls	r1, r1, #2
 801e848:	3414      	adds	r4, #20
 801e84a:	009b      	lsls	r3, r3, #2
 801e84c:	1841      	adds	r1, r0, r1
 801e84e:	18e3      	adds	r3, r4, r3
 801e850:	42a3      	cmp	r3, r4
 801e852:	d80d      	bhi.n	801e870 <__copybits+0x38>
 801e854:	0014      	movs	r4, r2
 801e856:	3411      	adds	r4, #17
 801e858:	2500      	movs	r5, #0
 801e85a:	429c      	cmp	r4, r3
 801e85c:	d803      	bhi.n	801e866 <__copybits+0x2e>
 801e85e:	1a9b      	subs	r3, r3, r2
 801e860:	3b11      	subs	r3, #17
 801e862:	089b      	lsrs	r3, r3, #2
 801e864:	009d      	lsls	r5, r3, #2
 801e866:	2300      	movs	r3, #0
 801e868:	1940      	adds	r0, r0, r5
 801e86a:	4281      	cmp	r1, r0
 801e86c:	d803      	bhi.n	801e876 <__copybits+0x3e>
 801e86e:	bd70      	pop	{r4, r5, r6, pc}
 801e870:	cc40      	ldmia	r4!, {r6}
 801e872:	c540      	stmia	r5!, {r6}
 801e874:	e7ec      	b.n	801e850 <__copybits+0x18>
 801e876:	c008      	stmia	r0!, {r3}
 801e878:	e7f7      	b.n	801e86a <__copybits+0x32>

0801e87a <__any_on>:
 801e87a:	0002      	movs	r2, r0
 801e87c:	6900      	ldr	r0, [r0, #16]
 801e87e:	b510      	push	{r4, lr}
 801e880:	3214      	adds	r2, #20
 801e882:	114b      	asrs	r3, r1, #5
 801e884:	4298      	cmp	r0, r3
 801e886:	db13      	blt.n	801e8b0 <__any_on+0x36>
 801e888:	dd0c      	ble.n	801e8a4 <__any_on+0x2a>
 801e88a:	241f      	movs	r4, #31
 801e88c:	0008      	movs	r0, r1
 801e88e:	4020      	ands	r0, r4
 801e890:	4221      	tst	r1, r4
 801e892:	d007      	beq.n	801e8a4 <__any_on+0x2a>
 801e894:	0099      	lsls	r1, r3, #2
 801e896:	588c      	ldr	r4, [r1, r2]
 801e898:	0021      	movs	r1, r4
 801e89a:	40c1      	lsrs	r1, r0
 801e89c:	4081      	lsls	r1, r0
 801e89e:	2001      	movs	r0, #1
 801e8a0:	428c      	cmp	r4, r1
 801e8a2:	d104      	bne.n	801e8ae <__any_on+0x34>
 801e8a4:	009b      	lsls	r3, r3, #2
 801e8a6:	18d3      	adds	r3, r2, r3
 801e8a8:	4293      	cmp	r3, r2
 801e8aa:	d803      	bhi.n	801e8b4 <__any_on+0x3a>
 801e8ac:	2000      	movs	r0, #0
 801e8ae:	bd10      	pop	{r4, pc}
 801e8b0:	0003      	movs	r3, r0
 801e8b2:	e7f7      	b.n	801e8a4 <__any_on+0x2a>
 801e8b4:	3b04      	subs	r3, #4
 801e8b6:	6819      	ldr	r1, [r3, #0]
 801e8b8:	2900      	cmp	r1, #0
 801e8ba:	d0f5      	beq.n	801e8a8 <__any_on+0x2e>
 801e8bc:	2001      	movs	r0, #1
 801e8be:	e7f6      	b.n	801e8ae <__any_on+0x34>

0801e8c0 <__ascii_wctomb>:
 801e8c0:	0003      	movs	r3, r0
 801e8c2:	1e08      	subs	r0, r1, #0
 801e8c4:	d005      	beq.n	801e8d2 <__ascii_wctomb+0x12>
 801e8c6:	2aff      	cmp	r2, #255	@ 0xff
 801e8c8:	d904      	bls.n	801e8d4 <__ascii_wctomb+0x14>
 801e8ca:	228a      	movs	r2, #138	@ 0x8a
 801e8cc:	2001      	movs	r0, #1
 801e8ce:	601a      	str	r2, [r3, #0]
 801e8d0:	4240      	negs	r0, r0
 801e8d2:	4770      	bx	lr
 801e8d4:	2001      	movs	r0, #1
 801e8d6:	700a      	strb	r2, [r1, #0]
 801e8d8:	e7fb      	b.n	801e8d2 <__ascii_wctomb+0x12>
	...

0801e8dc <__ssputs_r>:
 801e8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8de:	688e      	ldr	r6, [r1, #8]
 801e8e0:	b085      	sub	sp, #20
 801e8e2:	001f      	movs	r7, r3
 801e8e4:	000c      	movs	r4, r1
 801e8e6:	680b      	ldr	r3, [r1, #0]
 801e8e8:	9002      	str	r0, [sp, #8]
 801e8ea:	9203      	str	r2, [sp, #12]
 801e8ec:	42be      	cmp	r6, r7
 801e8ee:	d830      	bhi.n	801e952 <__ssputs_r+0x76>
 801e8f0:	210c      	movs	r1, #12
 801e8f2:	5e62      	ldrsh	r2, [r4, r1]
 801e8f4:	2190      	movs	r1, #144	@ 0x90
 801e8f6:	00c9      	lsls	r1, r1, #3
 801e8f8:	420a      	tst	r2, r1
 801e8fa:	d028      	beq.n	801e94e <__ssputs_r+0x72>
 801e8fc:	2003      	movs	r0, #3
 801e8fe:	6921      	ldr	r1, [r4, #16]
 801e900:	1a5b      	subs	r3, r3, r1
 801e902:	9301      	str	r3, [sp, #4]
 801e904:	6963      	ldr	r3, [r4, #20]
 801e906:	4343      	muls	r3, r0
 801e908:	9801      	ldr	r0, [sp, #4]
 801e90a:	0fdd      	lsrs	r5, r3, #31
 801e90c:	18ed      	adds	r5, r5, r3
 801e90e:	1c7b      	adds	r3, r7, #1
 801e910:	181b      	adds	r3, r3, r0
 801e912:	106d      	asrs	r5, r5, #1
 801e914:	42ab      	cmp	r3, r5
 801e916:	d900      	bls.n	801e91a <__ssputs_r+0x3e>
 801e918:	001d      	movs	r5, r3
 801e91a:	0552      	lsls	r2, r2, #21
 801e91c:	d528      	bpl.n	801e970 <__ssputs_r+0x94>
 801e91e:	0029      	movs	r1, r5
 801e920:	9802      	ldr	r0, [sp, #8]
 801e922:	f7ff fa61 	bl	801dde8 <_malloc_r>
 801e926:	1e06      	subs	r6, r0, #0
 801e928:	d02c      	beq.n	801e984 <__ssputs_r+0xa8>
 801e92a:	9a01      	ldr	r2, [sp, #4]
 801e92c:	6921      	ldr	r1, [r4, #16]
 801e92e:	f7fd fff9 	bl	801c924 <memcpy>
 801e932:	89a2      	ldrh	r2, [r4, #12]
 801e934:	4b18      	ldr	r3, [pc, #96]	@ (801e998 <__ssputs_r+0xbc>)
 801e936:	401a      	ands	r2, r3
 801e938:	2380      	movs	r3, #128	@ 0x80
 801e93a:	4313      	orrs	r3, r2
 801e93c:	81a3      	strh	r3, [r4, #12]
 801e93e:	9b01      	ldr	r3, [sp, #4]
 801e940:	6126      	str	r6, [r4, #16]
 801e942:	18f6      	adds	r6, r6, r3
 801e944:	6026      	str	r6, [r4, #0]
 801e946:	003e      	movs	r6, r7
 801e948:	6165      	str	r5, [r4, #20]
 801e94a:	1aed      	subs	r5, r5, r3
 801e94c:	60a5      	str	r5, [r4, #8]
 801e94e:	42be      	cmp	r6, r7
 801e950:	d900      	bls.n	801e954 <__ssputs_r+0x78>
 801e952:	003e      	movs	r6, r7
 801e954:	0032      	movs	r2, r6
 801e956:	9903      	ldr	r1, [sp, #12]
 801e958:	6820      	ldr	r0, [r4, #0]
 801e95a:	f000 fb7e 	bl	801f05a <memmove>
 801e95e:	2000      	movs	r0, #0
 801e960:	68a3      	ldr	r3, [r4, #8]
 801e962:	1b9b      	subs	r3, r3, r6
 801e964:	60a3      	str	r3, [r4, #8]
 801e966:	6823      	ldr	r3, [r4, #0]
 801e968:	199b      	adds	r3, r3, r6
 801e96a:	6023      	str	r3, [r4, #0]
 801e96c:	b005      	add	sp, #20
 801e96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e970:	002a      	movs	r2, r5
 801e972:	9802      	ldr	r0, [sp, #8]
 801e974:	f000 fc05 	bl	801f182 <_realloc_r>
 801e978:	1e06      	subs	r6, r0, #0
 801e97a:	d1e0      	bne.n	801e93e <__ssputs_r+0x62>
 801e97c:	6921      	ldr	r1, [r4, #16]
 801e97e:	9802      	ldr	r0, [sp, #8]
 801e980:	f7fe fe62 	bl	801d648 <_free_r>
 801e984:	230c      	movs	r3, #12
 801e986:	2001      	movs	r0, #1
 801e988:	9a02      	ldr	r2, [sp, #8]
 801e98a:	4240      	negs	r0, r0
 801e98c:	6013      	str	r3, [r2, #0]
 801e98e:	89a2      	ldrh	r2, [r4, #12]
 801e990:	3334      	adds	r3, #52	@ 0x34
 801e992:	4313      	orrs	r3, r2
 801e994:	81a3      	strh	r3, [r4, #12]
 801e996:	e7e9      	b.n	801e96c <__ssputs_r+0x90>
 801e998:	fffffb7f 	.word	0xfffffb7f

0801e99c <_svfiprintf_r>:
 801e99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e99e:	b0a1      	sub	sp, #132	@ 0x84
 801e9a0:	9003      	str	r0, [sp, #12]
 801e9a2:	001d      	movs	r5, r3
 801e9a4:	898b      	ldrh	r3, [r1, #12]
 801e9a6:	000f      	movs	r7, r1
 801e9a8:	0016      	movs	r6, r2
 801e9aa:	061b      	lsls	r3, r3, #24
 801e9ac:	d511      	bpl.n	801e9d2 <_svfiprintf_r+0x36>
 801e9ae:	690b      	ldr	r3, [r1, #16]
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d10e      	bne.n	801e9d2 <_svfiprintf_r+0x36>
 801e9b4:	2140      	movs	r1, #64	@ 0x40
 801e9b6:	f7ff fa17 	bl	801dde8 <_malloc_r>
 801e9ba:	6038      	str	r0, [r7, #0]
 801e9bc:	6138      	str	r0, [r7, #16]
 801e9be:	2800      	cmp	r0, #0
 801e9c0:	d105      	bne.n	801e9ce <_svfiprintf_r+0x32>
 801e9c2:	230c      	movs	r3, #12
 801e9c4:	9a03      	ldr	r2, [sp, #12]
 801e9c6:	6013      	str	r3, [r2, #0]
 801e9c8:	2001      	movs	r0, #1
 801e9ca:	4240      	negs	r0, r0
 801e9cc:	e0cf      	b.n	801eb6e <_svfiprintf_r+0x1d2>
 801e9ce:	2340      	movs	r3, #64	@ 0x40
 801e9d0:	617b      	str	r3, [r7, #20]
 801e9d2:	2300      	movs	r3, #0
 801e9d4:	ac08      	add	r4, sp, #32
 801e9d6:	6163      	str	r3, [r4, #20]
 801e9d8:	3320      	adds	r3, #32
 801e9da:	7663      	strb	r3, [r4, #25]
 801e9dc:	3310      	adds	r3, #16
 801e9de:	76a3      	strb	r3, [r4, #26]
 801e9e0:	9507      	str	r5, [sp, #28]
 801e9e2:	0035      	movs	r5, r6
 801e9e4:	782b      	ldrb	r3, [r5, #0]
 801e9e6:	2b00      	cmp	r3, #0
 801e9e8:	d001      	beq.n	801e9ee <_svfiprintf_r+0x52>
 801e9ea:	2b25      	cmp	r3, #37	@ 0x25
 801e9ec:	d148      	bne.n	801ea80 <_svfiprintf_r+0xe4>
 801e9ee:	1bab      	subs	r3, r5, r6
 801e9f0:	9305      	str	r3, [sp, #20]
 801e9f2:	42b5      	cmp	r5, r6
 801e9f4:	d00b      	beq.n	801ea0e <_svfiprintf_r+0x72>
 801e9f6:	0032      	movs	r2, r6
 801e9f8:	0039      	movs	r1, r7
 801e9fa:	9803      	ldr	r0, [sp, #12]
 801e9fc:	f7ff ff6e 	bl	801e8dc <__ssputs_r>
 801ea00:	3001      	adds	r0, #1
 801ea02:	d100      	bne.n	801ea06 <_svfiprintf_r+0x6a>
 801ea04:	e0ae      	b.n	801eb64 <_svfiprintf_r+0x1c8>
 801ea06:	6963      	ldr	r3, [r4, #20]
 801ea08:	9a05      	ldr	r2, [sp, #20]
 801ea0a:	189b      	adds	r3, r3, r2
 801ea0c:	6163      	str	r3, [r4, #20]
 801ea0e:	782b      	ldrb	r3, [r5, #0]
 801ea10:	2b00      	cmp	r3, #0
 801ea12:	d100      	bne.n	801ea16 <_svfiprintf_r+0x7a>
 801ea14:	e0a6      	b.n	801eb64 <_svfiprintf_r+0x1c8>
 801ea16:	2201      	movs	r2, #1
 801ea18:	2300      	movs	r3, #0
 801ea1a:	4252      	negs	r2, r2
 801ea1c:	6062      	str	r2, [r4, #4]
 801ea1e:	a904      	add	r1, sp, #16
 801ea20:	3254      	adds	r2, #84	@ 0x54
 801ea22:	1852      	adds	r2, r2, r1
 801ea24:	1c6e      	adds	r6, r5, #1
 801ea26:	6023      	str	r3, [r4, #0]
 801ea28:	60e3      	str	r3, [r4, #12]
 801ea2a:	60a3      	str	r3, [r4, #8]
 801ea2c:	7013      	strb	r3, [r2, #0]
 801ea2e:	65a3      	str	r3, [r4, #88]	@ 0x58
 801ea30:	4b54      	ldr	r3, [pc, #336]	@ (801eb84 <_svfiprintf_r+0x1e8>)
 801ea32:	2205      	movs	r2, #5
 801ea34:	0018      	movs	r0, r3
 801ea36:	7831      	ldrb	r1, [r6, #0]
 801ea38:	9305      	str	r3, [sp, #20]
 801ea3a:	f7fd ff68 	bl	801c90e <memchr>
 801ea3e:	1c75      	adds	r5, r6, #1
 801ea40:	2800      	cmp	r0, #0
 801ea42:	d11f      	bne.n	801ea84 <_svfiprintf_r+0xe8>
 801ea44:	6822      	ldr	r2, [r4, #0]
 801ea46:	06d3      	lsls	r3, r2, #27
 801ea48:	d504      	bpl.n	801ea54 <_svfiprintf_r+0xb8>
 801ea4a:	2353      	movs	r3, #83	@ 0x53
 801ea4c:	a904      	add	r1, sp, #16
 801ea4e:	185b      	adds	r3, r3, r1
 801ea50:	2120      	movs	r1, #32
 801ea52:	7019      	strb	r1, [r3, #0]
 801ea54:	0713      	lsls	r3, r2, #28
 801ea56:	d504      	bpl.n	801ea62 <_svfiprintf_r+0xc6>
 801ea58:	2353      	movs	r3, #83	@ 0x53
 801ea5a:	a904      	add	r1, sp, #16
 801ea5c:	185b      	adds	r3, r3, r1
 801ea5e:	212b      	movs	r1, #43	@ 0x2b
 801ea60:	7019      	strb	r1, [r3, #0]
 801ea62:	7833      	ldrb	r3, [r6, #0]
 801ea64:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea66:	d016      	beq.n	801ea96 <_svfiprintf_r+0xfa>
 801ea68:	0035      	movs	r5, r6
 801ea6a:	2100      	movs	r1, #0
 801ea6c:	200a      	movs	r0, #10
 801ea6e:	68e3      	ldr	r3, [r4, #12]
 801ea70:	782a      	ldrb	r2, [r5, #0]
 801ea72:	1c6e      	adds	r6, r5, #1
 801ea74:	3a30      	subs	r2, #48	@ 0x30
 801ea76:	2a09      	cmp	r2, #9
 801ea78:	d950      	bls.n	801eb1c <_svfiprintf_r+0x180>
 801ea7a:	2900      	cmp	r1, #0
 801ea7c:	d111      	bne.n	801eaa2 <_svfiprintf_r+0x106>
 801ea7e:	e017      	b.n	801eab0 <_svfiprintf_r+0x114>
 801ea80:	3501      	adds	r5, #1
 801ea82:	e7af      	b.n	801e9e4 <_svfiprintf_r+0x48>
 801ea84:	9b05      	ldr	r3, [sp, #20]
 801ea86:	6822      	ldr	r2, [r4, #0]
 801ea88:	1ac0      	subs	r0, r0, r3
 801ea8a:	2301      	movs	r3, #1
 801ea8c:	4083      	lsls	r3, r0
 801ea8e:	4313      	orrs	r3, r2
 801ea90:	002e      	movs	r6, r5
 801ea92:	6023      	str	r3, [r4, #0]
 801ea94:	e7cc      	b.n	801ea30 <_svfiprintf_r+0x94>
 801ea96:	9b07      	ldr	r3, [sp, #28]
 801ea98:	1d19      	adds	r1, r3, #4
 801ea9a:	681b      	ldr	r3, [r3, #0]
 801ea9c:	9107      	str	r1, [sp, #28]
 801ea9e:	2b00      	cmp	r3, #0
 801eaa0:	db01      	blt.n	801eaa6 <_svfiprintf_r+0x10a>
 801eaa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801eaa4:	e004      	b.n	801eab0 <_svfiprintf_r+0x114>
 801eaa6:	425b      	negs	r3, r3
 801eaa8:	60e3      	str	r3, [r4, #12]
 801eaaa:	2302      	movs	r3, #2
 801eaac:	4313      	orrs	r3, r2
 801eaae:	6023      	str	r3, [r4, #0]
 801eab0:	782b      	ldrb	r3, [r5, #0]
 801eab2:	2b2e      	cmp	r3, #46	@ 0x2e
 801eab4:	d10c      	bne.n	801ead0 <_svfiprintf_r+0x134>
 801eab6:	786b      	ldrb	r3, [r5, #1]
 801eab8:	2b2a      	cmp	r3, #42	@ 0x2a
 801eaba:	d134      	bne.n	801eb26 <_svfiprintf_r+0x18a>
 801eabc:	9b07      	ldr	r3, [sp, #28]
 801eabe:	3502      	adds	r5, #2
 801eac0:	1d1a      	adds	r2, r3, #4
 801eac2:	681b      	ldr	r3, [r3, #0]
 801eac4:	9207      	str	r2, [sp, #28]
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	da01      	bge.n	801eace <_svfiprintf_r+0x132>
 801eaca:	2301      	movs	r3, #1
 801eacc:	425b      	negs	r3, r3
 801eace:	9309      	str	r3, [sp, #36]	@ 0x24
 801ead0:	4e2d      	ldr	r6, [pc, #180]	@ (801eb88 <_svfiprintf_r+0x1ec>)
 801ead2:	2203      	movs	r2, #3
 801ead4:	0030      	movs	r0, r6
 801ead6:	7829      	ldrb	r1, [r5, #0]
 801ead8:	f7fd ff19 	bl	801c90e <memchr>
 801eadc:	2800      	cmp	r0, #0
 801eade:	d006      	beq.n	801eaee <_svfiprintf_r+0x152>
 801eae0:	2340      	movs	r3, #64	@ 0x40
 801eae2:	1b80      	subs	r0, r0, r6
 801eae4:	4083      	lsls	r3, r0
 801eae6:	6822      	ldr	r2, [r4, #0]
 801eae8:	3501      	adds	r5, #1
 801eaea:	4313      	orrs	r3, r2
 801eaec:	6023      	str	r3, [r4, #0]
 801eaee:	7829      	ldrb	r1, [r5, #0]
 801eaf0:	2206      	movs	r2, #6
 801eaf2:	4826      	ldr	r0, [pc, #152]	@ (801eb8c <_svfiprintf_r+0x1f0>)
 801eaf4:	1c6e      	adds	r6, r5, #1
 801eaf6:	7621      	strb	r1, [r4, #24]
 801eaf8:	f7fd ff09 	bl	801c90e <memchr>
 801eafc:	2800      	cmp	r0, #0
 801eafe:	d038      	beq.n	801eb72 <_svfiprintf_r+0x1d6>
 801eb00:	4b23      	ldr	r3, [pc, #140]	@ (801eb90 <_svfiprintf_r+0x1f4>)
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d122      	bne.n	801eb4c <_svfiprintf_r+0x1b0>
 801eb06:	2207      	movs	r2, #7
 801eb08:	9b07      	ldr	r3, [sp, #28]
 801eb0a:	3307      	adds	r3, #7
 801eb0c:	4393      	bics	r3, r2
 801eb0e:	3308      	adds	r3, #8
 801eb10:	9307      	str	r3, [sp, #28]
 801eb12:	6963      	ldr	r3, [r4, #20]
 801eb14:	9a04      	ldr	r2, [sp, #16]
 801eb16:	189b      	adds	r3, r3, r2
 801eb18:	6163      	str	r3, [r4, #20]
 801eb1a:	e762      	b.n	801e9e2 <_svfiprintf_r+0x46>
 801eb1c:	4343      	muls	r3, r0
 801eb1e:	0035      	movs	r5, r6
 801eb20:	2101      	movs	r1, #1
 801eb22:	189b      	adds	r3, r3, r2
 801eb24:	e7a4      	b.n	801ea70 <_svfiprintf_r+0xd4>
 801eb26:	2300      	movs	r3, #0
 801eb28:	200a      	movs	r0, #10
 801eb2a:	0019      	movs	r1, r3
 801eb2c:	3501      	adds	r5, #1
 801eb2e:	6063      	str	r3, [r4, #4]
 801eb30:	782a      	ldrb	r2, [r5, #0]
 801eb32:	1c6e      	adds	r6, r5, #1
 801eb34:	3a30      	subs	r2, #48	@ 0x30
 801eb36:	2a09      	cmp	r2, #9
 801eb38:	d903      	bls.n	801eb42 <_svfiprintf_r+0x1a6>
 801eb3a:	2b00      	cmp	r3, #0
 801eb3c:	d0c8      	beq.n	801ead0 <_svfiprintf_r+0x134>
 801eb3e:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb40:	e7c6      	b.n	801ead0 <_svfiprintf_r+0x134>
 801eb42:	4341      	muls	r1, r0
 801eb44:	0035      	movs	r5, r6
 801eb46:	2301      	movs	r3, #1
 801eb48:	1889      	adds	r1, r1, r2
 801eb4a:	e7f1      	b.n	801eb30 <_svfiprintf_r+0x194>
 801eb4c:	aa07      	add	r2, sp, #28
 801eb4e:	9200      	str	r2, [sp, #0]
 801eb50:	0021      	movs	r1, r4
 801eb52:	003a      	movs	r2, r7
 801eb54:	4b0f      	ldr	r3, [pc, #60]	@ (801eb94 <_svfiprintf_r+0x1f8>)
 801eb56:	9803      	ldr	r0, [sp, #12]
 801eb58:	f7fc ffd4 	bl	801bb04 <_printf_float>
 801eb5c:	9004      	str	r0, [sp, #16]
 801eb5e:	9b04      	ldr	r3, [sp, #16]
 801eb60:	3301      	adds	r3, #1
 801eb62:	d1d6      	bne.n	801eb12 <_svfiprintf_r+0x176>
 801eb64:	89bb      	ldrh	r3, [r7, #12]
 801eb66:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801eb68:	065b      	lsls	r3, r3, #25
 801eb6a:	d500      	bpl.n	801eb6e <_svfiprintf_r+0x1d2>
 801eb6c:	e72c      	b.n	801e9c8 <_svfiprintf_r+0x2c>
 801eb6e:	b021      	add	sp, #132	@ 0x84
 801eb70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eb72:	aa07      	add	r2, sp, #28
 801eb74:	9200      	str	r2, [sp, #0]
 801eb76:	0021      	movs	r1, r4
 801eb78:	003a      	movs	r2, r7
 801eb7a:	4b06      	ldr	r3, [pc, #24]	@ (801eb94 <_svfiprintf_r+0x1f8>)
 801eb7c:	9803      	ldr	r0, [sp, #12]
 801eb7e:	f7fd fa6f 	bl	801c060 <_printf_i>
 801eb82:	e7eb      	b.n	801eb5c <_svfiprintf_r+0x1c0>
 801eb84:	08021478 	.word	0x08021478
 801eb88:	0802147e 	.word	0x0802147e
 801eb8c:	08021482 	.word	0x08021482
 801eb90:	0801bb05 	.word	0x0801bb05
 801eb94:	0801e8dd 	.word	0x0801e8dd

0801eb98 <__sfputc_r>:
 801eb98:	6893      	ldr	r3, [r2, #8]
 801eb9a:	b510      	push	{r4, lr}
 801eb9c:	3b01      	subs	r3, #1
 801eb9e:	6093      	str	r3, [r2, #8]
 801eba0:	2b00      	cmp	r3, #0
 801eba2:	da04      	bge.n	801ebae <__sfputc_r+0x16>
 801eba4:	6994      	ldr	r4, [r2, #24]
 801eba6:	42a3      	cmp	r3, r4
 801eba8:	db07      	blt.n	801ebba <__sfputc_r+0x22>
 801ebaa:	290a      	cmp	r1, #10
 801ebac:	d005      	beq.n	801ebba <__sfputc_r+0x22>
 801ebae:	6813      	ldr	r3, [r2, #0]
 801ebb0:	1c58      	adds	r0, r3, #1
 801ebb2:	6010      	str	r0, [r2, #0]
 801ebb4:	7019      	strb	r1, [r3, #0]
 801ebb6:	0008      	movs	r0, r1
 801ebb8:	bd10      	pop	{r4, pc}
 801ebba:	f7fd fd37 	bl	801c62c <__swbuf_r>
 801ebbe:	0001      	movs	r1, r0
 801ebc0:	e7f9      	b.n	801ebb6 <__sfputc_r+0x1e>

0801ebc2 <__sfputs_r>:
 801ebc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ebc4:	0006      	movs	r6, r0
 801ebc6:	000f      	movs	r7, r1
 801ebc8:	0014      	movs	r4, r2
 801ebca:	18d5      	adds	r5, r2, r3
 801ebcc:	42ac      	cmp	r4, r5
 801ebce:	d101      	bne.n	801ebd4 <__sfputs_r+0x12>
 801ebd0:	2000      	movs	r0, #0
 801ebd2:	e007      	b.n	801ebe4 <__sfputs_r+0x22>
 801ebd4:	7821      	ldrb	r1, [r4, #0]
 801ebd6:	003a      	movs	r2, r7
 801ebd8:	0030      	movs	r0, r6
 801ebda:	f7ff ffdd 	bl	801eb98 <__sfputc_r>
 801ebde:	3401      	adds	r4, #1
 801ebe0:	1c43      	adds	r3, r0, #1
 801ebe2:	d1f3      	bne.n	801ebcc <__sfputs_r+0xa>
 801ebe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ebe8 <_vfiprintf_r>:
 801ebe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ebea:	b0a1      	sub	sp, #132	@ 0x84
 801ebec:	000f      	movs	r7, r1
 801ebee:	0015      	movs	r5, r2
 801ebf0:	001e      	movs	r6, r3
 801ebf2:	9003      	str	r0, [sp, #12]
 801ebf4:	2800      	cmp	r0, #0
 801ebf6:	d004      	beq.n	801ec02 <_vfiprintf_r+0x1a>
 801ebf8:	6a03      	ldr	r3, [r0, #32]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d101      	bne.n	801ec02 <_vfiprintf_r+0x1a>
 801ebfe:	f7fd fbcd 	bl	801c39c <__sinit>
 801ec02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ec04:	07db      	lsls	r3, r3, #31
 801ec06:	d405      	bmi.n	801ec14 <_vfiprintf_r+0x2c>
 801ec08:	89bb      	ldrh	r3, [r7, #12]
 801ec0a:	059b      	lsls	r3, r3, #22
 801ec0c:	d402      	bmi.n	801ec14 <_vfiprintf_r+0x2c>
 801ec0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ec10:	f7fd fe7b 	bl	801c90a <__retarget_lock_acquire_recursive>
 801ec14:	89bb      	ldrh	r3, [r7, #12]
 801ec16:	071b      	lsls	r3, r3, #28
 801ec18:	d502      	bpl.n	801ec20 <_vfiprintf_r+0x38>
 801ec1a:	693b      	ldr	r3, [r7, #16]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d113      	bne.n	801ec48 <_vfiprintf_r+0x60>
 801ec20:	0039      	movs	r1, r7
 801ec22:	9803      	ldr	r0, [sp, #12]
 801ec24:	f7fd fd44 	bl	801c6b0 <__swsetup_r>
 801ec28:	2800      	cmp	r0, #0
 801ec2a:	d00d      	beq.n	801ec48 <_vfiprintf_r+0x60>
 801ec2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ec2e:	07db      	lsls	r3, r3, #31
 801ec30:	d503      	bpl.n	801ec3a <_vfiprintf_r+0x52>
 801ec32:	2001      	movs	r0, #1
 801ec34:	4240      	negs	r0, r0
 801ec36:	b021      	add	sp, #132	@ 0x84
 801ec38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ec3a:	89bb      	ldrh	r3, [r7, #12]
 801ec3c:	059b      	lsls	r3, r3, #22
 801ec3e:	d4f8      	bmi.n	801ec32 <_vfiprintf_r+0x4a>
 801ec40:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ec42:	f7fd fe63 	bl	801c90c <__retarget_lock_release_recursive>
 801ec46:	e7f4      	b.n	801ec32 <_vfiprintf_r+0x4a>
 801ec48:	2300      	movs	r3, #0
 801ec4a:	ac08      	add	r4, sp, #32
 801ec4c:	6163      	str	r3, [r4, #20]
 801ec4e:	3320      	adds	r3, #32
 801ec50:	7663      	strb	r3, [r4, #25]
 801ec52:	3310      	adds	r3, #16
 801ec54:	76a3      	strb	r3, [r4, #26]
 801ec56:	9607      	str	r6, [sp, #28]
 801ec58:	002e      	movs	r6, r5
 801ec5a:	7833      	ldrb	r3, [r6, #0]
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d001      	beq.n	801ec64 <_vfiprintf_r+0x7c>
 801ec60:	2b25      	cmp	r3, #37	@ 0x25
 801ec62:	d148      	bne.n	801ecf6 <_vfiprintf_r+0x10e>
 801ec64:	1b73      	subs	r3, r6, r5
 801ec66:	9305      	str	r3, [sp, #20]
 801ec68:	42ae      	cmp	r6, r5
 801ec6a:	d00b      	beq.n	801ec84 <_vfiprintf_r+0x9c>
 801ec6c:	002a      	movs	r2, r5
 801ec6e:	0039      	movs	r1, r7
 801ec70:	9803      	ldr	r0, [sp, #12]
 801ec72:	f7ff ffa6 	bl	801ebc2 <__sfputs_r>
 801ec76:	3001      	adds	r0, #1
 801ec78:	d100      	bne.n	801ec7c <_vfiprintf_r+0x94>
 801ec7a:	e0ae      	b.n	801edda <_vfiprintf_r+0x1f2>
 801ec7c:	6963      	ldr	r3, [r4, #20]
 801ec7e:	9a05      	ldr	r2, [sp, #20]
 801ec80:	189b      	adds	r3, r3, r2
 801ec82:	6163      	str	r3, [r4, #20]
 801ec84:	7833      	ldrb	r3, [r6, #0]
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d100      	bne.n	801ec8c <_vfiprintf_r+0xa4>
 801ec8a:	e0a6      	b.n	801edda <_vfiprintf_r+0x1f2>
 801ec8c:	2201      	movs	r2, #1
 801ec8e:	2300      	movs	r3, #0
 801ec90:	4252      	negs	r2, r2
 801ec92:	6062      	str	r2, [r4, #4]
 801ec94:	a904      	add	r1, sp, #16
 801ec96:	3254      	adds	r2, #84	@ 0x54
 801ec98:	1852      	adds	r2, r2, r1
 801ec9a:	1c75      	adds	r5, r6, #1
 801ec9c:	6023      	str	r3, [r4, #0]
 801ec9e:	60e3      	str	r3, [r4, #12]
 801eca0:	60a3      	str	r3, [r4, #8]
 801eca2:	7013      	strb	r3, [r2, #0]
 801eca4:	65a3      	str	r3, [r4, #88]	@ 0x58
 801eca6:	4b59      	ldr	r3, [pc, #356]	@ (801ee0c <_vfiprintf_r+0x224>)
 801eca8:	2205      	movs	r2, #5
 801ecaa:	0018      	movs	r0, r3
 801ecac:	7829      	ldrb	r1, [r5, #0]
 801ecae:	9305      	str	r3, [sp, #20]
 801ecb0:	f7fd fe2d 	bl	801c90e <memchr>
 801ecb4:	1c6e      	adds	r6, r5, #1
 801ecb6:	2800      	cmp	r0, #0
 801ecb8:	d11f      	bne.n	801ecfa <_vfiprintf_r+0x112>
 801ecba:	6822      	ldr	r2, [r4, #0]
 801ecbc:	06d3      	lsls	r3, r2, #27
 801ecbe:	d504      	bpl.n	801ecca <_vfiprintf_r+0xe2>
 801ecc0:	2353      	movs	r3, #83	@ 0x53
 801ecc2:	a904      	add	r1, sp, #16
 801ecc4:	185b      	adds	r3, r3, r1
 801ecc6:	2120      	movs	r1, #32
 801ecc8:	7019      	strb	r1, [r3, #0]
 801ecca:	0713      	lsls	r3, r2, #28
 801eccc:	d504      	bpl.n	801ecd8 <_vfiprintf_r+0xf0>
 801ecce:	2353      	movs	r3, #83	@ 0x53
 801ecd0:	a904      	add	r1, sp, #16
 801ecd2:	185b      	adds	r3, r3, r1
 801ecd4:	212b      	movs	r1, #43	@ 0x2b
 801ecd6:	7019      	strb	r1, [r3, #0]
 801ecd8:	782b      	ldrb	r3, [r5, #0]
 801ecda:	2b2a      	cmp	r3, #42	@ 0x2a
 801ecdc:	d016      	beq.n	801ed0c <_vfiprintf_r+0x124>
 801ecde:	002e      	movs	r6, r5
 801ece0:	2100      	movs	r1, #0
 801ece2:	200a      	movs	r0, #10
 801ece4:	68e3      	ldr	r3, [r4, #12]
 801ece6:	7832      	ldrb	r2, [r6, #0]
 801ece8:	1c75      	adds	r5, r6, #1
 801ecea:	3a30      	subs	r2, #48	@ 0x30
 801ecec:	2a09      	cmp	r2, #9
 801ecee:	d950      	bls.n	801ed92 <_vfiprintf_r+0x1aa>
 801ecf0:	2900      	cmp	r1, #0
 801ecf2:	d111      	bne.n	801ed18 <_vfiprintf_r+0x130>
 801ecf4:	e017      	b.n	801ed26 <_vfiprintf_r+0x13e>
 801ecf6:	3601      	adds	r6, #1
 801ecf8:	e7af      	b.n	801ec5a <_vfiprintf_r+0x72>
 801ecfa:	9b05      	ldr	r3, [sp, #20]
 801ecfc:	6822      	ldr	r2, [r4, #0]
 801ecfe:	1ac0      	subs	r0, r0, r3
 801ed00:	2301      	movs	r3, #1
 801ed02:	4083      	lsls	r3, r0
 801ed04:	4313      	orrs	r3, r2
 801ed06:	0035      	movs	r5, r6
 801ed08:	6023      	str	r3, [r4, #0]
 801ed0a:	e7cc      	b.n	801eca6 <_vfiprintf_r+0xbe>
 801ed0c:	9b07      	ldr	r3, [sp, #28]
 801ed0e:	1d19      	adds	r1, r3, #4
 801ed10:	681b      	ldr	r3, [r3, #0]
 801ed12:	9107      	str	r1, [sp, #28]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	db01      	blt.n	801ed1c <_vfiprintf_r+0x134>
 801ed18:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ed1a:	e004      	b.n	801ed26 <_vfiprintf_r+0x13e>
 801ed1c:	425b      	negs	r3, r3
 801ed1e:	60e3      	str	r3, [r4, #12]
 801ed20:	2302      	movs	r3, #2
 801ed22:	4313      	orrs	r3, r2
 801ed24:	6023      	str	r3, [r4, #0]
 801ed26:	7833      	ldrb	r3, [r6, #0]
 801ed28:	2b2e      	cmp	r3, #46	@ 0x2e
 801ed2a:	d10c      	bne.n	801ed46 <_vfiprintf_r+0x15e>
 801ed2c:	7873      	ldrb	r3, [r6, #1]
 801ed2e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ed30:	d134      	bne.n	801ed9c <_vfiprintf_r+0x1b4>
 801ed32:	9b07      	ldr	r3, [sp, #28]
 801ed34:	3602      	adds	r6, #2
 801ed36:	1d1a      	adds	r2, r3, #4
 801ed38:	681b      	ldr	r3, [r3, #0]
 801ed3a:	9207      	str	r2, [sp, #28]
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	da01      	bge.n	801ed44 <_vfiprintf_r+0x15c>
 801ed40:	2301      	movs	r3, #1
 801ed42:	425b      	negs	r3, r3
 801ed44:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed46:	4d32      	ldr	r5, [pc, #200]	@ (801ee10 <_vfiprintf_r+0x228>)
 801ed48:	2203      	movs	r2, #3
 801ed4a:	0028      	movs	r0, r5
 801ed4c:	7831      	ldrb	r1, [r6, #0]
 801ed4e:	f7fd fdde 	bl	801c90e <memchr>
 801ed52:	2800      	cmp	r0, #0
 801ed54:	d006      	beq.n	801ed64 <_vfiprintf_r+0x17c>
 801ed56:	2340      	movs	r3, #64	@ 0x40
 801ed58:	1b40      	subs	r0, r0, r5
 801ed5a:	4083      	lsls	r3, r0
 801ed5c:	6822      	ldr	r2, [r4, #0]
 801ed5e:	3601      	adds	r6, #1
 801ed60:	4313      	orrs	r3, r2
 801ed62:	6023      	str	r3, [r4, #0]
 801ed64:	7831      	ldrb	r1, [r6, #0]
 801ed66:	2206      	movs	r2, #6
 801ed68:	482a      	ldr	r0, [pc, #168]	@ (801ee14 <_vfiprintf_r+0x22c>)
 801ed6a:	1c75      	adds	r5, r6, #1
 801ed6c:	7621      	strb	r1, [r4, #24]
 801ed6e:	f7fd fdce 	bl	801c90e <memchr>
 801ed72:	2800      	cmp	r0, #0
 801ed74:	d040      	beq.n	801edf8 <_vfiprintf_r+0x210>
 801ed76:	4b28      	ldr	r3, [pc, #160]	@ (801ee18 <_vfiprintf_r+0x230>)
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	d122      	bne.n	801edc2 <_vfiprintf_r+0x1da>
 801ed7c:	2207      	movs	r2, #7
 801ed7e:	9b07      	ldr	r3, [sp, #28]
 801ed80:	3307      	adds	r3, #7
 801ed82:	4393      	bics	r3, r2
 801ed84:	3308      	adds	r3, #8
 801ed86:	9307      	str	r3, [sp, #28]
 801ed88:	6963      	ldr	r3, [r4, #20]
 801ed8a:	9a04      	ldr	r2, [sp, #16]
 801ed8c:	189b      	adds	r3, r3, r2
 801ed8e:	6163      	str	r3, [r4, #20]
 801ed90:	e762      	b.n	801ec58 <_vfiprintf_r+0x70>
 801ed92:	4343      	muls	r3, r0
 801ed94:	002e      	movs	r6, r5
 801ed96:	2101      	movs	r1, #1
 801ed98:	189b      	adds	r3, r3, r2
 801ed9a:	e7a4      	b.n	801ece6 <_vfiprintf_r+0xfe>
 801ed9c:	2300      	movs	r3, #0
 801ed9e:	200a      	movs	r0, #10
 801eda0:	0019      	movs	r1, r3
 801eda2:	3601      	adds	r6, #1
 801eda4:	6063      	str	r3, [r4, #4]
 801eda6:	7832      	ldrb	r2, [r6, #0]
 801eda8:	1c75      	adds	r5, r6, #1
 801edaa:	3a30      	subs	r2, #48	@ 0x30
 801edac:	2a09      	cmp	r2, #9
 801edae:	d903      	bls.n	801edb8 <_vfiprintf_r+0x1d0>
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d0c8      	beq.n	801ed46 <_vfiprintf_r+0x15e>
 801edb4:	9109      	str	r1, [sp, #36]	@ 0x24
 801edb6:	e7c6      	b.n	801ed46 <_vfiprintf_r+0x15e>
 801edb8:	4341      	muls	r1, r0
 801edba:	002e      	movs	r6, r5
 801edbc:	2301      	movs	r3, #1
 801edbe:	1889      	adds	r1, r1, r2
 801edc0:	e7f1      	b.n	801eda6 <_vfiprintf_r+0x1be>
 801edc2:	aa07      	add	r2, sp, #28
 801edc4:	9200      	str	r2, [sp, #0]
 801edc6:	0021      	movs	r1, r4
 801edc8:	003a      	movs	r2, r7
 801edca:	4b14      	ldr	r3, [pc, #80]	@ (801ee1c <_vfiprintf_r+0x234>)
 801edcc:	9803      	ldr	r0, [sp, #12]
 801edce:	f7fc fe99 	bl	801bb04 <_printf_float>
 801edd2:	9004      	str	r0, [sp, #16]
 801edd4:	9b04      	ldr	r3, [sp, #16]
 801edd6:	3301      	adds	r3, #1
 801edd8:	d1d6      	bne.n	801ed88 <_vfiprintf_r+0x1a0>
 801edda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801eddc:	07db      	lsls	r3, r3, #31
 801edde:	d405      	bmi.n	801edec <_vfiprintf_r+0x204>
 801ede0:	89bb      	ldrh	r3, [r7, #12]
 801ede2:	059b      	lsls	r3, r3, #22
 801ede4:	d402      	bmi.n	801edec <_vfiprintf_r+0x204>
 801ede6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801ede8:	f7fd fd90 	bl	801c90c <__retarget_lock_release_recursive>
 801edec:	89bb      	ldrh	r3, [r7, #12]
 801edee:	065b      	lsls	r3, r3, #25
 801edf0:	d500      	bpl.n	801edf4 <_vfiprintf_r+0x20c>
 801edf2:	e71e      	b.n	801ec32 <_vfiprintf_r+0x4a>
 801edf4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801edf6:	e71e      	b.n	801ec36 <_vfiprintf_r+0x4e>
 801edf8:	aa07      	add	r2, sp, #28
 801edfa:	9200      	str	r2, [sp, #0]
 801edfc:	0021      	movs	r1, r4
 801edfe:	003a      	movs	r2, r7
 801ee00:	4b06      	ldr	r3, [pc, #24]	@ (801ee1c <_vfiprintf_r+0x234>)
 801ee02:	9803      	ldr	r0, [sp, #12]
 801ee04:	f7fd f92c 	bl	801c060 <_printf_i>
 801ee08:	e7e3      	b.n	801edd2 <_vfiprintf_r+0x1ea>
 801ee0a:	46c0      	nop			@ (mov r8, r8)
 801ee0c:	08021478 	.word	0x08021478
 801ee10:	0802147e 	.word	0x0802147e
 801ee14:	08021482 	.word	0x08021482
 801ee18:	0801bb05 	.word	0x0801bb05
 801ee1c:	0801ebc3 	.word	0x0801ebc3

0801ee20 <__sflush_r>:
 801ee20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ee22:	220c      	movs	r2, #12
 801ee24:	5e8b      	ldrsh	r3, [r1, r2]
 801ee26:	0005      	movs	r5, r0
 801ee28:	000c      	movs	r4, r1
 801ee2a:	071a      	lsls	r2, r3, #28
 801ee2c:	d456      	bmi.n	801eedc <__sflush_r+0xbc>
 801ee2e:	684a      	ldr	r2, [r1, #4]
 801ee30:	2a00      	cmp	r2, #0
 801ee32:	dc02      	bgt.n	801ee3a <__sflush_r+0x1a>
 801ee34:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801ee36:	2a00      	cmp	r2, #0
 801ee38:	dd4e      	ble.n	801eed8 <__sflush_r+0xb8>
 801ee3a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801ee3c:	2f00      	cmp	r7, #0
 801ee3e:	d04b      	beq.n	801eed8 <__sflush_r+0xb8>
 801ee40:	2200      	movs	r2, #0
 801ee42:	2080      	movs	r0, #128	@ 0x80
 801ee44:	682e      	ldr	r6, [r5, #0]
 801ee46:	602a      	str	r2, [r5, #0]
 801ee48:	001a      	movs	r2, r3
 801ee4a:	0140      	lsls	r0, r0, #5
 801ee4c:	6a21      	ldr	r1, [r4, #32]
 801ee4e:	4002      	ands	r2, r0
 801ee50:	4203      	tst	r3, r0
 801ee52:	d033      	beq.n	801eebc <__sflush_r+0x9c>
 801ee54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ee56:	89a3      	ldrh	r3, [r4, #12]
 801ee58:	075b      	lsls	r3, r3, #29
 801ee5a:	d506      	bpl.n	801ee6a <__sflush_r+0x4a>
 801ee5c:	6863      	ldr	r3, [r4, #4]
 801ee5e:	1ad2      	subs	r2, r2, r3
 801ee60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d001      	beq.n	801ee6a <__sflush_r+0x4a>
 801ee66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ee68:	1ad2      	subs	r2, r2, r3
 801ee6a:	2300      	movs	r3, #0
 801ee6c:	0028      	movs	r0, r5
 801ee6e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801ee70:	6a21      	ldr	r1, [r4, #32]
 801ee72:	47b8      	blx	r7
 801ee74:	89a2      	ldrh	r2, [r4, #12]
 801ee76:	1c43      	adds	r3, r0, #1
 801ee78:	d106      	bne.n	801ee88 <__sflush_r+0x68>
 801ee7a:	6829      	ldr	r1, [r5, #0]
 801ee7c:	291d      	cmp	r1, #29
 801ee7e:	d846      	bhi.n	801ef0e <__sflush_r+0xee>
 801ee80:	4b29      	ldr	r3, [pc, #164]	@ (801ef28 <__sflush_r+0x108>)
 801ee82:	410b      	asrs	r3, r1
 801ee84:	07db      	lsls	r3, r3, #31
 801ee86:	d442      	bmi.n	801ef0e <__sflush_r+0xee>
 801ee88:	2300      	movs	r3, #0
 801ee8a:	6063      	str	r3, [r4, #4]
 801ee8c:	6923      	ldr	r3, [r4, #16]
 801ee8e:	6023      	str	r3, [r4, #0]
 801ee90:	04d2      	lsls	r2, r2, #19
 801ee92:	d505      	bpl.n	801eea0 <__sflush_r+0x80>
 801ee94:	1c43      	adds	r3, r0, #1
 801ee96:	d102      	bne.n	801ee9e <__sflush_r+0x7e>
 801ee98:	682b      	ldr	r3, [r5, #0]
 801ee9a:	2b00      	cmp	r3, #0
 801ee9c:	d100      	bne.n	801eea0 <__sflush_r+0x80>
 801ee9e:	6560      	str	r0, [r4, #84]	@ 0x54
 801eea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801eea2:	602e      	str	r6, [r5, #0]
 801eea4:	2900      	cmp	r1, #0
 801eea6:	d017      	beq.n	801eed8 <__sflush_r+0xb8>
 801eea8:	0023      	movs	r3, r4
 801eeaa:	3344      	adds	r3, #68	@ 0x44
 801eeac:	4299      	cmp	r1, r3
 801eeae:	d002      	beq.n	801eeb6 <__sflush_r+0x96>
 801eeb0:	0028      	movs	r0, r5
 801eeb2:	f7fe fbc9 	bl	801d648 <_free_r>
 801eeb6:	2300      	movs	r3, #0
 801eeb8:	6363      	str	r3, [r4, #52]	@ 0x34
 801eeba:	e00d      	b.n	801eed8 <__sflush_r+0xb8>
 801eebc:	2301      	movs	r3, #1
 801eebe:	0028      	movs	r0, r5
 801eec0:	47b8      	blx	r7
 801eec2:	0002      	movs	r2, r0
 801eec4:	1c43      	adds	r3, r0, #1
 801eec6:	d1c6      	bne.n	801ee56 <__sflush_r+0x36>
 801eec8:	682b      	ldr	r3, [r5, #0]
 801eeca:	2b00      	cmp	r3, #0
 801eecc:	d0c3      	beq.n	801ee56 <__sflush_r+0x36>
 801eece:	2b1d      	cmp	r3, #29
 801eed0:	d001      	beq.n	801eed6 <__sflush_r+0xb6>
 801eed2:	2b16      	cmp	r3, #22
 801eed4:	d11a      	bne.n	801ef0c <__sflush_r+0xec>
 801eed6:	602e      	str	r6, [r5, #0]
 801eed8:	2000      	movs	r0, #0
 801eeda:	e01e      	b.n	801ef1a <__sflush_r+0xfa>
 801eedc:	690e      	ldr	r6, [r1, #16]
 801eede:	2e00      	cmp	r6, #0
 801eee0:	d0fa      	beq.n	801eed8 <__sflush_r+0xb8>
 801eee2:	680f      	ldr	r7, [r1, #0]
 801eee4:	600e      	str	r6, [r1, #0]
 801eee6:	1bba      	subs	r2, r7, r6
 801eee8:	9201      	str	r2, [sp, #4]
 801eeea:	2200      	movs	r2, #0
 801eeec:	079b      	lsls	r3, r3, #30
 801eeee:	d100      	bne.n	801eef2 <__sflush_r+0xd2>
 801eef0:	694a      	ldr	r2, [r1, #20]
 801eef2:	60a2      	str	r2, [r4, #8]
 801eef4:	9b01      	ldr	r3, [sp, #4]
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	ddee      	ble.n	801eed8 <__sflush_r+0xb8>
 801eefa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801eefc:	0032      	movs	r2, r6
 801eefe:	001f      	movs	r7, r3
 801ef00:	0028      	movs	r0, r5
 801ef02:	9b01      	ldr	r3, [sp, #4]
 801ef04:	6a21      	ldr	r1, [r4, #32]
 801ef06:	47b8      	blx	r7
 801ef08:	2800      	cmp	r0, #0
 801ef0a:	dc07      	bgt.n	801ef1c <__sflush_r+0xfc>
 801ef0c:	89a2      	ldrh	r2, [r4, #12]
 801ef0e:	2340      	movs	r3, #64	@ 0x40
 801ef10:	2001      	movs	r0, #1
 801ef12:	4313      	orrs	r3, r2
 801ef14:	b21b      	sxth	r3, r3
 801ef16:	81a3      	strh	r3, [r4, #12]
 801ef18:	4240      	negs	r0, r0
 801ef1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ef1c:	9b01      	ldr	r3, [sp, #4]
 801ef1e:	1836      	adds	r6, r6, r0
 801ef20:	1a1b      	subs	r3, r3, r0
 801ef22:	9301      	str	r3, [sp, #4]
 801ef24:	e7e6      	b.n	801eef4 <__sflush_r+0xd4>
 801ef26:	46c0      	nop			@ (mov r8, r8)
 801ef28:	dfbffffe 	.word	0xdfbffffe

0801ef2c <_fflush_r>:
 801ef2c:	690b      	ldr	r3, [r1, #16]
 801ef2e:	b570      	push	{r4, r5, r6, lr}
 801ef30:	0005      	movs	r5, r0
 801ef32:	000c      	movs	r4, r1
 801ef34:	2b00      	cmp	r3, #0
 801ef36:	d102      	bne.n	801ef3e <_fflush_r+0x12>
 801ef38:	2500      	movs	r5, #0
 801ef3a:	0028      	movs	r0, r5
 801ef3c:	bd70      	pop	{r4, r5, r6, pc}
 801ef3e:	2800      	cmp	r0, #0
 801ef40:	d004      	beq.n	801ef4c <_fflush_r+0x20>
 801ef42:	6a03      	ldr	r3, [r0, #32]
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d101      	bne.n	801ef4c <_fflush_r+0x20>
 801ef48:	f7fd fa28 	bl	801c39c <__sinit>
 801ef4c:	220c      	movs	r2, #12
 801ef4e:	5ea3      	ldrsh	r3, [r4, r2]
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d0f1      	beq.n	801ef38 <_fflush_r+0xc>
 801ef54:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ef56:	07d2      	lsls	r2, r2, #31
 801ef58:	d404      	bmi.n	801ef64 <_fflush_r+0x38>
 801ef5a:	059b      	lsls	r3, r3, #22
 801ef5c:	d402      	bmi.n	801ef64 <_fflush_r+0x38>
 801ef5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ef60:	f7fd fcd3 	bl	801c90a <__retarget_lock_acquire_recursive>
 801ef64:	0028      	movs	r0, r5
 801ef66:	0021      	movs	r1, r4
 801ef68:	f7ff ff5a 	bl	801ee20 <__sflush_r>
 801ef6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ef6e:	0005      	movs	r5, r0
 801ef70:	07db      	lsls	r3, r3, #31
 801ef72:	d4e2      	bmi.n	801ef3a <_fflush_r+0xe>
 801ef74:	89a3      	ldrh	r3, [r4, #12]
 801ef76:	059b      	lsls	r3, r3, #22
 801ef78:	d4df      	bmi.n	801ef3a <_fflush_r+0xe>
 801ef7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ef7c:	f7fd fcc6 	bl	801c90c <__retarget_lock_release_recursive>
 801ef80:	e7db      	b.n	801ef3a <_fflush_r+0xe>
	...

0801ef84 <__swhatbuf_r>:
 801ef84:	b570      	push	{r4, r5, r6, lr}
 801ef86:	000e      	movs	r6, r1
 801ef88:	001d      	movs	r5, r3
 801ef8a:	230e      	movs	r3, #14
 801ef8c:	5ec9      	ldrsh	r1, [r1, r3]
 801ef8e:	0014      	movs	r4, r2
 801ef90:	b096      	sub	sp, #88	@ 0x58
 801ef92:	2900      	cmp	r1, #0
 801ef94:	da0c      	bge.n	801efb0 <__swhatbuf_r+0x2c>
 801ef96:	89b2      	ldrh	r2, [r6, #12]
 801ef98:	2380      	movs	r3, #128	@ 0x80
 801ef9a:	0011      	movs	r1, r2
 801ef9c:	4019      	ands	r1, r3
 801ef9e:	421a      	tst	r2, r3
 801efa0:	d114      	bne.n	801efcc <__swhatbuf_r+0x48>
 801efa2:	2380      	movs	r3, #128	@ 0x80
 801efa4:	00db      	lsls	r3, r3, #3
 801efa6:	2000      	movs	r0, #0
 801efa8:	6029      	str	r1, [r5, #0]
 801efaa:	6023      	str	r3, [r4, #0]
 801efac:	b016      	add	sp, #88	@ 0x58
 801efae:	bd70      	pop	{r4, r5, r6, pc}
 801efb0:	466a      	mov	r2, sp
 801efb2:	f000 f865 	bl	801f080 <_fstat_r>
 801efb6:	2800      	cmp	r0, #0
 801efb8:	dbed      	blt.n	801ef96 <__swhatbuf_r+0x12>
 801efba:	23f0      	movs	r3, #240	@ 0xf0
 801efbc:	9901      	ldr	r1, [sp, #4]
 801efbe:	021b      	lsls	r3, r3, #8
 801efc0:	4019      	ands	r1, r3
 801efc2:	4b04      	ldr	r3, [pc, #16]	@ (801efd4 <__swhatbuf_r+0x50>)
 801efc4:	18c9      	adds	r1, r1, r3
 801efc6:	424b      	negs	r3, r1
 801efc8:	4159      	adcs	r1, r3
 801efca:	e7ea      	b.n	801efa2 <__swhatbuf_r+0x1e>
 801efcc:	2100      	movs	r1, #0
 801efce:	2340      	movs	r3, #64	@ 0x40
 801efd0:	e7e9      	b.n	801efa6 <__swhatbuf_r+0x22>
 801efd2:	46c0      	nop			@ (mov r8, r8)
 801efd4:	ffffe000 	.word	0xffffe000

0801efd8 <__smakebuf_r>:
 801efd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efda:	2602      	movs	r6, #2
 801efdc:	898b      	ldrh	r3, [r1, #12]
 801efde:	0005      	movs	r5, r0
 801efe0:	000c      	movs	r4, r1
 801efe2:	b085      	sub	sp, #20
 801efe4:	4233      	tst	r3, r6
 801efe6:	d007      	beq.n	801eff8 <__smakebuf_r+0x20>
 801efe8:	0023      	movs	r3, r4
 801efea:	3347      	adds	r3, #71	@ 0x47
 801efec:	6023      	str	r3, [r4, #0]
 801efee:	6123      	str	r3, [r4, #16]
 801eff0:	2301      	movs	r3, #1
 801eff2:	6163      	str	r3, [r4, #20]
 801eff4:	b005      	add	sp, #20
 801eff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eff8:	ab03      	add	r3, sp, #12
 801effa:	aa02      	add	r2, sp, #8
 801effc:	f7ff ffc2 	bl	801ef84 <__swhatbuf_r>
 801f000:	9f02      	ldr	r7, [sp, #8]
 801f002:	9001      	str	r0, [sp, #4]
 801f004:	0039      	movs	r1, r7
 801f006:	0028      	movs	r0, r5
 801f008:	f7fe feee 	bl	801dde8 <_malloc_r>
 801f00c:	2800      	cmp	r0, #0
 801f00e:	d108      	bne.n	801f022 <__smakebuf_r+0x4a>
 801f010:	220c      	movs	r2, #12
 801f012:	5ea3      	ldrsh	r3, [r4, r2]
 801f014:	059a      	lsls	r2, r3, #22
 801f016:	d4ed      	bmi.n	801eff4 <__smakebuf_r+0x1c>
 801f018:	2203      	movs	r2, #3
 801f01a:	4393      	bics	r3, r2
 801f01c:	431e      	orrs	r6, r3
 801f01e:	81a6      	strh	r6, [r4, #12]
 801f020:	e7e2      	b.n	801efe8 <__smakebuf_r+0x10>
 801f022:	2380      	movs	r3, #128	@ 0x80
 801f024:	89a2      	ldrh	r2, [r4, #12]
 801f026:	6020      	str	r0, [r4, #0]
 801f028:	4313      	orrs	r3, r2
 801f02a:	81a3      	strh	r3, [r4, #12]
 801f02c:	9b03      	ldr	r3, [sp, #12]
 801f02e:	6120      	str	r0, [r4, #16]
 801f030:	6167      	str	r7, [r4, #20]
 801f032:	2b00      	cmp	r3, #0
 801f034:	d00c      	beq.n	801f050 <__smakebuf_r+0x78>
 801f036:	0028      	movs	r0, r5
 801f038:	230e      	movs	r3, #14
 801f03a:	5ee1      	ldrsh	r1, [r4, r3]
 801f03c:	f000 f832 	bl	801f0a4 <_isatty_r>
 801f040:	2800      	cmp	r0, #0
 801f042:	d005      	beq.n	801f050 <__smakebuf_r+0x78>
 801f044:	2303      	movs	r3, #3
 801f046:	89a2      	ldrh	r2, [r4, #12]
 801f048:	439a      	bics	r2, r3
 801f04a:	3b02      	subs	r3, #2
 801f04c:	4313      	orrs	r3, r2
 801f04e:	81a3      	strh	r3, [r4, #12]
 801f050:	89a3      	ldrh	r3, [r4, #12]
 801f052:	9a01      	ldr	r2, [sp, #4]
 801f054:	4313      	orrs	r3, r2
 801f056:	81a3      	strh	r3, [r4, #12]
 801f058:	e7cc      	b.n	801eff4 <__smakebuf_r+0x1c>

0801f05a <memmove>:
 801f05a:	b510      	push	{r4, lr}
 801f05c:	4288      	cmp	r0, r1
 801f05e:	d806      	bhi.n	801f06e <memmove+0x14>
 801f060:	2300      	movs	r3, #0
 801f062:	429a      	cmp	r2, r3
 801f064:	d008      	beq.n	801f078 <memmove+0x1e>
 801f066:	5ccc      	ldrb	r4, [r1, r3]
 801f068:	54c4      	strb	r4, [r0, r3]
 801f06a:	3301      	adds	r3, #1
 801f06c:	e7f9      	b.n	801f062 <memmove+0x8>
 801f06e:	188b      	adds	r3, r1, r2
 801f070:	4298      	cmp	r0, r3
 801f072:	d2f5      	bcs.n	801f060 <memmove+0x6>
 801f074:	3a01      	subs	r2, #1
 801f076:	d200      	bcs.n	801f07a <memmove+0x20>
 801f078:	bd10      	pop	{r4, pc}
 801f07a:	5c8b      	ldrb	r3, [r1, r2]
 801f07c:	5483      	strb	r3, [r0, r2]
 801f07e:	e7f9      	b.n	801f074 <memmove+0x1a>

0801f080 <_fstat_r>:
 801f080:	2300      	movs	r3, #0
 801f082:	b570      	push	{r4, r5, r6, lr}
 801f084:	4d06      	ldr	r5, [pc, #24]	@ (801f0a0 <_fstat_r+0x20>)
 801f086:	0004      	movs	r4, r0
 801f088:	0008      	movs	r0, r1
 801f08a:	0011      	movs	r1, r2
 801f08c:	602b      	str	r3, [r5, #0]
 801f08e:	f7eb ff4f 	bl	800af30 <_fstat>
 801f092:	1c43      	adds	r3, r0, #1
 801f094:	d103      	bne.n	801f09e <_fstat_r+0x1e>
 801f096:	682b      	ldr	r3, [r5, #0]
 801f098:	2b00      	cmp	r3, #0
 801f09a:	d000      	beq.n	801f09e <_fstat_r+0x1e>
 801f09c:	6023      	str	r3, [r4, #0]
 801f09e:	bd70      	pop	{r4, r5, r6, pc}
 801f0a0:	200038b4 	.word	0x200038b4

0801f0a4 <_isatty_r>:
 801f0a4:	2300      	movs	r3, #0
 801f0a6:	b570      	push	{r4, r5, r6, lr}
 801f0a8:	4d06      	ldr	r5, [pc, #24]	@ (801f0c4 <_isatty_r+0x20>)
 801f0aa:	0004      	movs	r4, r0
 801f0ac:	0008      	movs	r0, r1
 801f0ae:	602b      	str	r3, [r5, #0]
 801f0b0:	f7eb ff4c 	bl	800af4c <_isatty>
 801f0b4:	1c43      	adds	r3, r0, #1
 801f0b6:	d103      	bne.n	801f0c0 <_isatty_r+0x1c>
 801f0b8:	682b      	ldr	r3, [r5, #0]
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	d000      	beq.n	801f0c0 <_isatty_r+0x1c>
 801f0be:	6023      	str	r3, [r4, #0]
 801f0c0:	bd70      	pop	{r4, r5, r6, pc}
 801f0c2:	46c0      	nop			@ (mov r8, r8)
 801f0c4:	200038b4 	.word	0x200038b4

0801f0c8 <_sbrk_r>:
 801f0c8:	2300      	movs	r3, #0
 801f0ca:	b570      	push	{r4, r5, r6, lr}
 801f0cc:	4d06      	ldr	r5, [pc, #24]	@ (801f0e8 <_sbrk_r+0x20>)
 801f0ce:	0004      	movs	r4, r0
 801f0d0:	0008      	movs	r0, r1
 801f0d2:	602b      	str	r3, [r5, #0]
 801f0d4:	f7eb ff4e 	bl	800af74 <_sbrk>
 801f0d8:	1c43      	adds	r3, r0, #1
 801f0da:	d103      	bne.n	801f0e4 <_sbrk_r+0x1c>
 801f0dc:	682b      	ldr	r3, [r5, #0]
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	d000      	beq.n	801f0e4 <_sbrk_r+0x1c>
 801f0e2:	6023      	str	r3, [r4, #0]
 801f0e4:	bd70      	pop	{r4, r5, r6, pc}
 801f0e6:	46c0      	nop			@ (mov r8, r8)
 801f0e8:	200038b4 	.word	0x200038b4

0801f0ec <__assert_func>:
 801f0ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801f0ee:	0014      	movs	r4, r2
 801f0f0:	001a      	movs	r2, r3
 801f0f2:	4b09      	ldr	r3, [pc, #36]	@ (801f118 <__assert_func+0x2c>)
 801f0f4:	0005      	movs	r5, r0
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	000e      	movs	r6, r1
 801f0fa:	68d8      	ldr	r0, [r3, #12]
 801f0fc:	4b07      	ldr	r3, [pc, #28]	@ (801f11c <__assert_func+0x30>)
 801f0fe:	2c00      	cmp	r4, #0
 801f100:	d101      	bne.n	801f106 <__assert_func+0x1a>
 801f102:	4b07      	ldr	r3, [pc, #28]	@ (801f120 <__assert_func+0x34>)
 801f104:	001c      	movs	r4, r3
 801f106:	4907      	ldr	r1, [pc, #28]	@ (801f124 <__assert_func+0x38>)
 801f108:	9301      	str	r3, [sp, #4]
 801f10a:	9402      	str	r4, [sp, #8]
 801f10c:	002b      	movs	r3, r5
 801f10e:	9600      	str	r6, [sp, #0]
 801f110:	f000 f866 	bl	801f1e0 <fiprintf>
 801f114:	f000 f874 	bl	801f200 <abort>
 801f118:	200003c4 	.word	0x200003c4
 801f11c:	08021489 	.word	0x08021489
 801f120:	080214c4 	.word	0x080214c4
 801f124:	08021496 	.word	0x08021496

0801f128 <_calloc_r>:
 801f128:	b570      	push	{r4, r5, r6, lr}
 801f12a:	0c0b      	lsrs	r3, r1, #16
 801f12c:	0c15      	lsrs	r5, r2, #16
 801f12e:	2b00      	cmp	r3, #0
 801f130:	d11e      	bne.n	801f170 <_calloc_r+0x48>
 801f132:	2d00      	cmp	r5, #0
 801f134:	d10c      	bne.n	801f150 <_calloc_r+0x28>
 801f136:	b289      	uxth	r1, r1
 801f138:	b294      	uxth	r4, r2
 801f13a:	434c      	muls	r4, r1
 801f13c:	0021      	movs	r1, r4
 801f13e:	f7fe fe53 	bl	801dde8 <_malloc_r>
 801f142:	1e05      	subs	r5, r0, #0
 801f144:	d01a      	beq.n	801f17c <_calloc_r+0x54>
 801f146:	0022      	movs	r2, r4
 801f148:	2100      	movs	r1, #0
 801f14a:	f7fd fb0f 	bl	801c76c <memset>
 801f14e:	e016      	b.n	801f17e <_calloc_r+0x56>
 801f150:	1c2b      	adds	r3, r5, #0
 801f152:	1c0c      	adds	r4, r1, #0
 801f154:	b289      	uxth	r1, r1
 801f156:	b292      	uxth	r2, r2
 801f158:	434a      	muls	r2, r1
 801f15a:	b29b      	uxth	r3, r3
 801f15c:	b2a1      	uxth	r1, r4
 801f15e:	4359      	muls	r1, r3
 801f160:	0c14      	lsrs	r4, r2, #16
 801f162:	190c      	adds	r4, r1, r4
 801f164:	0c23      	lsrs	r3, r4, #16
 801f166:	d107      	bne.n	801f178 <_calloc_r+0x50>
 801f168:	0424      	lsls	r4, r4, #16
 801f16a:	b292      	uxth	r2, r2
 801f16c:	4314      	orrs	r4, r2
 801f16e:	e7e5      	b.n	801f13c <_calloc_r+0x14>
 801f170:	2d00      	cmp	r5, #0
 801f172:	d101      	bne.n	801f178 <_calloc_r+0x50>
 801f174:	1c14      	adds	r4, r2, #0
 801f176:	e7ed      	b.n	801f154 <_calloc_r+0x2c>
 801f178:	230c      	movs	r3, #12
 801f17a:	6003      	str	r3, [r0, #0]
 801f17c:	2500      	movs	r5, #0
 801f17e:	0028      	movs	r0, r5
 801f180:	bd70      	pop	{r4, r5, r6, pc}

0801f182 <_realloc_r>:
 801f182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f184:	0006      	movs	r6, r0
 801f186:	000c      	movs	r4, r1
 801f188:	0015      	movs	r5, r2
 801f18a:	2900      	cmp	r1, #0
 801f18c:	d105      	bne.n	801f19a <_realloc_r+0x18>
 801f18e:	0011      	movs	r1, r2
 801f190:	f7fe fe2a 	bl	801dde8 <_malloc_r>
 801f194:	0004      	movs	r4, r0
 801f196:	0020      	movs	r0, r4
 801f198:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f19a:	2a00      	cmp	r2, #0
 801f19c:	d103      	bne.n	801f1a6 <_realloc_r+0x24>
 801f19e:	f7fe fa53 	bl	801d648 <_free_r>
 801f1a2:	2400      	movs	r4, #0
 801f1a4:	e7f7      	b.n	801f196 <_realloc_r+0x14>
 801f1a6:	f000 f832 	bl	801f20e <_malloc_usable_size_r>
 801f1aa:	0007      	movs	r7, r0
 801f1ac:	4285      	cmp	r5, r0
 801f1ae:	d802      	bhi.n	801f1b6 <_realloc_r+0x34>
 801f1b0:	0843      	lsrs	r3, r0, #1
 801f1b2:	42ab      	cmp	r3, r5
 801f1b4:	d3ef      	bcc.n	801f196 <_realloc_r+0x14>
 801f1b6:	0029      	movs	r1, r5
 801f1b8:	0030      	movs	r0, r6
 801f1ba:	f7fe fe15 	bl	801dde8 <_malloc_r>
 801f1be:	9001      	str	r0, [sp, #4]
 801f1c0:	2800      	cmp	r0, #0
 801f1c2:	d0ee      	beq.n	801f1a2 <_realloc_r+0x20>
 801f1c4:	002a      	movs	r2, r5
 801f1c6:	42bd      	cmp	r5, r7
 801f1c8:	d900      	bls.n	801f1cc <_realloc_r+0x4a>
 801f1ca:	003a      	movs	r2, r7
 801f1cc:	0021      	movs	r1, r4
 801f1ce:	9801      	ldr	r0, [sp, #4]
 801f1d0:	f7fd fba8 	bl	801c924 <memcpy>
 801f1d4:	0021      	movs	r1, r4
 801f1d6:	0030      	movs	r0, r6
 801f1d8:	f7fe fa36 	bl	801d648 <_free_r>
 801f1dc:	9c01      	ldr	r4, [sp, #4]
 801f1de:	e7da      	b.n	801f196 <_realloc_r+0x14>

0801f1e0 <fiprintf>:
 801f1e0:	b40e      	push	{r1, r2, r3}
 801f1e2:	b517      	push	{r0, r1, r2, r4, lr}
 801f1e4:	4c05      	ldr	r4, [pc, #20]	@ (801f1fc <fiprintf+0x1c>)
 801f1e6:	ab05      	add	r3, sp, #20
 801f1e8:	cb04      	ldmia	r3!, {r2}
 801f1ea:	0001      	movs	r1, r0
 801f1ec:	6820      	ldr	r0, [r4, #0]
 801f1ee:	9301      	str	r3, [sp, #4]
 801f1f0:	f7ff fcfa 	bl	801ebe8 <_vfiprintf_r>
 801f1f4:	bc1e      	pop	{r1, r2, r3, r4}
 801f1f6:	bc08      	pop	{r3}
 801f1f8:	b003      	add	sp, #12
 801f1fa:	4718      	bx	r3
 801f1fc:	200003c4 	.word	0x200003c4

0801f200 <abort>:
 801f200:	2006      	movs	r0, #6
 801f202:	b510      	push	{r4, lr}
 801f204:	f000 f834 	bl	801f270 <raise>
 801f208:	2001      	movs	r0, #1
 801f20a:	f7eb fe5d 	bl	800aec8 <_exit>

0801f20e <_malloc_usable_size_r>:
 801f20e:	1f0b      	subs	r3, r1, #4
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	1f18      	subs	r0, r3, #4
 801f214:	2b00      	cmp	r3, #0
 801f216:	da01      	bge.n	801f21c <_malloc_usable_size_r+0xe>
 801f218:	580b      	ldr	r3, [r1, r0]
 801f21a:	18c0      	adds	r0, r0, r3
 801f21c:	4770      	bx	lr

0801f21e <_raise_r>:
 801f21e:	b570      	push	{r4, r5, r6, lr}
 801f220:	0004      	movs	r4, r0
 801f222:	000d      	movs	r5, r1
 801f224:	291f      	cmp	r1, #31
 801f226:	d904      	bls.n	801f232 <_raise_r+0x14>
 801f228:	2316      	movs	r3, #22
 801f22a:	6003      	str	r3, [r0, #0]
 801f22c:	2001      	movs	r0, #1
 801f22e:	4240      	negs	r0, r0
 801f230:	bd70      	pop	{r4, r5, r6, pc}
 801f232:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801f234:	2b00      	cmp	r3, #0
 801f236:	d004      	beq.n	801f242 <_raise_r+0x24>
 801f238:	008a      	lsls	r2, r1, #2
 801f23a:	189b      	adds	r3, r3, r2
 801f23c:	681a      	ldr	r2, [r3, #0]
 801f23e:	2a00      	cmp	r2, #0
 801f240:	d108      	bne.n	801f254 <_raise_r+0x36>
 801f242:	0020      	movs	r0, r4
 801f244:	f000 f830 	bl	801f2a8 <_getpid_r>
 801f248:	002a      	movs	r2, r5
 801f24a:	0001      	movs	r1, r0
 801f24c:	0020      	movs	r0, r4
 801f24e:	f000 f819 	bl	801f284 <_kill_r>
 801f252:	e7ed      	b.n	801f230 <_raise_r+0x12>
 801f254:	2a01      	cmp	r2, #1
 801f256:	d009      	beq.n	801f26c <_raise_r+0x4e>
 801f258:	1c51      	adds	r1, r2, #1
 801f25a:	d103      	bne.n	801f264 <_raise_r+0x46>
 801f25c:	2316      	movs	r3, #22
 801f25e:	6003      	str	r3, [r0, #0]
 801f260:	2001      	movs	r0, #1
 801f262:	e7e5      	b.n	801f230 <_raise_r+0x12>
 801f264:	2100      	movs	r1, #0
 801f266:	0028      	movs	r0, r5
 801f268:	6019      	str	r1, [r3, #0]
 801f26a:	4790      	blx	r2
 801f26c:	2000      	movs	r0, #0
 801f26e:	e7df      	b.n	801f230 <_raise_r+0x12>

0801f270 <raise>:
 801f270:	b510      	push	{r4, lr}
 801f272:	4b03      	ldr	r3, [pc, #12]	@ (801f280 <raise+0x10>)
 801f274:	0001      	movs	r1, r0
 801f276:	6818      	ldr	r0, [r3, #0]
 801f278:	f7ff ffd1 	bl	801f21e <_raise_r>
 801f27c:	bd10      	pop	{r4, pc}
 801f27e:	46c0      	nop			@ (mov r8, r8)
 801f280:	200003c4 	.word	0x200003c4

0801f284 <_kill_r>:
 801f284:	2300      	movs	r3, #0
 801f286:	b570      	push	{r4, r5, r6, lr}
 801f288:	4d06      	ldr	r5, [pc, #24]	@ (801f2a4 <_kill_r+0x20>)
 801f28a:	0004      	movs	r4, r0
 801f28c:	0008      	movs	r0, r1
 801f28e:	0011      	movs	r1, r2
 801f290:	602b      	str	r3, [r5, #0]
 801f292:	f7eb fe09 	bl	800aea8 <_kill>
 801f296:	1c43      	adds	r3, r0, #1
 801f298:	d103      	bne.n	801f2a2 <_kill_r+0x1e>
 801f29a:	682b      	ldr	r3, [r5, #0]
 801f29c:	2b00      	cmp	r3, #0
 801f29e:	d000      	beq.n	801f2a2 <_kill_r+0x1e>
 801f2a0:	6023      	str	r3, [r4, #0]
 801f2a2:	bd70      	pop	{r4, r5, r6, pc}
 801f2a4:	200038b4 	.word	0x200038b4

0801f2a8 <_getpid_r>:
 801f2a8:	b510      	push	{r4, lr}
 801f2aa:	f7eb fdf7 	bl	800ae9c <_getpid>
 801f2ae:	bd10      	pop	{r4, pc}

0801f2b0 <expf>:
 801f2b0:	b570      	push	{r4, r5, r6, lr}
 801f2b2:	1c04      	adds	r4, r0, #0
 801f2b4:	f000 f8e6 	bl	801f484 <__ieee754_expf>
 801f2b8:	1c05      	adds	r5, r0, #0
 801f2ba:	1c20      	adds	r0, r4, #0
 801f2bc:	f000 f83c 	bl	801f338 <finitef>
 801f2c0:	2800      	cmp	r0, #0
 801f2c2:	d00b      	beq.n	801f2dc <expf+0x2c>
 801f2c4:	490c      	ldr	r1, [pc, #48]	@ (801f2f8 <expf+0x48>)
 801f2c6:	1c20      	adds	r0, r4, #0
 801f2c8:	f7e1 f946 	bl	8000558 <__aeabi_fcmpgt>
 801f2cc:	2800      	cmp	r0, #0
 801f2ce:	d007      	beq.n	801f2e0 <expf+0x30>
 801f2d0:	f7fd faf0 	bl	801c8b4 <__errno>
 801f2d4:	25ff      	movs	r5, #255	@ 0xff
 801f2d6:	2322      	movs	r3, #34	@ 0x22
 801f2d8:	05ed      	lsls	r5, r5, #23
 801f2da:	6003      	str	r3, [r0, #0]
 801f2dc:	1c28      	adds	r0, r5, #0
 801f2de:	bd70      	pop	{r4, r5, r6, pc}
 801f2e0:	4906      	ldr	r1, [pc, #24]	@ (801f2fc <expf+0x4c>)
 801f2e2:	1c20      	adds	r0, r4, #0
 801f2e4:	f7e1 f924 	bl	8000530 <__aeabi_fcmplt>
 801f2e8:	2800      	cmp	r0, #0
 801f2ea:	d0f7      	beq.n	801f2dc <expf+0x2c>
 801f2ec:	f7fd fae2 	bl	801c8b4 <__errno>
 801f2f0:	2322      	movs	r3, #34	@ 0x22
 801f2f2:	2500      	movs	r5, #0
 801f2f4:	6003      	str	r3, [r0, #0]
 801f2f6:	e7f1      	b.n	801f2dc <expf+0x2c>
 801f2f8:	42b17217 	.word	0x42b17217
 801f2fc:	c2cff1b5 	.word	0xc2cff1b5

0801f300 <sqrtf>:
 801f300:	b570      	push	{r4, r5, r6, lr}
 801f302:	1c05      	adds	r5, r0, #0
 801f304:	f000 f822 	bl	801f34c <__ieee754_sqrtf>
 801f308:	1c29      	adds	r1, r5, #0
 801f30a:	1c04      	adds	r4, r0, #0
 801f30c:	1c28      	adds	r0, r5, #0
 801f30e:	f7e2 f929 	bl	8001564 <__aeabi_fcmpun>
 801f312:	2800      	cmp	r0, #0
 801f314:	d10e      	bne.n	801f334 <sqrtf+0x34>
 801f316:	2100      	movs	r1, #0
 801f318:	1c28      	adds	r0, r5, #0
 801f31a:	f7e1 f909 	bl	8000530 <__aeabi_fcmplt>
 801f31e:	2800      	cmp	r0, #0
 801f320:	d008      	beq.n	801f334 <sqrtf+0x34>
 801f322:	f7fd fac7 	bl	801c8b4 <__errno>
 801f326:	2321      	movs	r3, #33	@ 0x21
 801f328:	2100      	movs	r1, #0
 801f32a:	6003      	str	r3, [r0, #0]
 801f32c:	1c08      	adds	r0, r1, #0
 801f32e:	f7e1 fc51 	bl	8000bd4 <__aeabi_fdiv>
 801f332:	1c04      	adds	r4, r0, #0
 801f334:	1c20      	adds	r0, r4, #0
 801f336:	bd70      	pop	{r4, r5, r6, pc}

0801f338 <finitef>:
 801f338:	22ff      	movs	r2, #255	@ 0xff
 801f33a:	0043      	lsls	r3, r0, #1
 801f33c:	085b      	lsrs	r3, r3, #1
 801f33e:	2001      	movs	r0, #1
 801f340:	05d2      	lsls	r2, r2, #23
 801f342:	4293      	cmp	r3, r2
 801f344:	db00      	blt.n	801f348 <finitef+0x10>
 801f346:	2000      	movs	r0, #0
 801f348:	4770      	bx	lr
	...

0801f34c <__ieee754_sqrtf>:
 801f34c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f34e:	0003      	movs	r3, r0
 801f350:	0042      	lsls	r2, r0, #1
 801f352:	1c04      	adds	r4, r0, #0
 801f354:	20ff      	movs	r0, #255	@ 0xff
 801f356:	0852      	lsrs	r2, r2, #1
 801f358:	05c0      	lsls	r0, r0, #23
 801f35a:	4282      	cmp	r2, r0
 801f35c:	d30a      	bcc.n	801f374 <__ieee754_sqrtf+0x28>
 801f35e:	1c21      	adds	r1, r4, #0
 801f360:	1c20      	adds	r0, r4, #0
 801f362:	f7e1 fe1d 	bl	8000fa0 <__aeabi_fmul>
 801f366:	1c01      	adds	r1, r0, #0
 801f368:	1c20      	adds	r0, r4, #0
 801f36a:	f7e1 faa9 	bl	80008c0 <__aeabi_fadd>
 801f36e:	1c04      	adds	r4, r0, #0
 801f370:	1c20      	adds	r0, r4, #0
 801f372:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f374:	2a00      	cmp	r2, #0
 801f376:	d0fb      	beq.n	801f370 <__ieee754_sqrtf+0x24>
 801f378:	2c00      	cmp	r4, #0
 801f37a:	da07      	bge.n	801f38c <__ieee754_sqrtf+0x40>
 801f37c:	1c21      	adds	r1, r4, #0
 801f37e:	1c20      	adds	r0, r4, #0
 801f380:	f7e1 ff4c 	bl	800121c <__aeabi_fsub>
 801f384:	1c01      	adds	r1, r0, #0
 801f386:	f7e1 fc25 	bl	8000bd4 <__aeabi_fdiv>
 801f38a:	e7f0      	b.n	801f36e <__ieee754_sqrtf+0x22>
 801f38c:	0022      	movs	r2, r4
 801f38e:	15e1      	asrs	r1, r4, #23
 801f390:	4002      	ands	r2, r0
 801f392:	4204      	tst	r4, r0
 801f394:	d046      	beq.n	801f424 <__ieee754_sqrtf+0xd8>
 801f396:	2280      	movs	r2, #128	@ 0x80
 801f398:	000f      	movs	r7, r1
 801f39a:	025b      	lsls	r3, r3, #9
 801f39c:	0a5b      	lsrs	r3, r3, #9
 801f39e:	0412      	lsls	r2, r2, #16
 801f3a0:	3f7f      	subs	r7, #127	@ 0x7f
 801f3a2:	4313      	orrs	r3, r2
 801f3a4:	07c9      	lsls	r1, r1, #31
 801f3a6:	d400      	bmi.n	801f3aa <__ieee754_sqrtf+0x5e>
 801f3a8:	005b      	lsls	r3, r3, #1
 801f3aa:	2400      	movs	r4, #0
 801f3ac:	2180      	movs	r1, #128	@ 0x80
 801f3ae:	2019      	movs	r0, #25
 801f3b0:	0026      	movs	r6, r4
 801f3b2:	107f      	asrs	r7, r7, #1
 801f3b4:	005b      	lsls	r3, r3, #1
 801f3b6:	0449      	lsls	r1, r1, #17
 801f3b8:	1875      	adds	r5, r6, r1
 801f3ba:	001a      	movs	r2, r3
 801f3bc:	429d      	cmp	r5, r3
 801f3be:	dc02      	bgt.n	801f3c6 <__ieee754_sqrtf+0x7a>
 801f3c0:	186e      	adds	r6, r5, r1
 801f3c2:	1b5a      	subs	r2, r3, r5
 801f3c4:	1864      	adds	r4, r4, r1
 801f3c6:	3801      	subs	r0, #1
 801f3c8:	0053      	lsls	r3, r2, #1
 801f3ca:	0849      	lsrs	r1, r1, #1
 801f3cc:	2800      	cmp	r0, #0
 801f3ce:	d1f3      	bne.n	801f3b8 <__ieee754_sqrtf+0x6c>
 801f3d0:	2a00      	cmp	r2, #0
 801f3d2:	d019      	beq.n	801f408 <__ieee754_sqrtf+0xbc>
 801f3d4:	4d17      	ldr	r5, [pc, #92]	@ (801f434 <__ieee754_sqrtf+0xe8>)
 801f3d6:	4e18      	ldr	r6, [pc, #96]	@ (801f438 <__ieee754_sqrtf+0xec>)
 801f3d8:	6828      	ldr	r0, [r5, #0]
 801f3da:	6831      	ldr	r1, [r6, #0]
 801f3dc:	682b      	ldr	r3, [r5, #0]
 801f3de:	9301      	str	r3, [sp, #4]
 801f3e0:	f7e1 ff1c 	bl	800121c <__aeabi_fsub>
 801f3e4:	1c01      	adds	r1, r0, #0
 801f3e6:	9801      	ldr	r0, [sp, #4]
 801f3e8:	f7e1 f8ac 	bl	8000544 <__aeabi_fcmple>
 801f3ec:	2800      	cmp	r0, #0
 801f3ee:	d00b      	beq.n	801f408 <__ieee754_sqrtf+0xbc>
 801f3f0:	6828      	ldr	r0, [r5, #0]
 801f3f2:	6831      	ldr	r1, [r6, #0]
 801f3f4:	f7e1 fa64 	bl	80008c0 <__aeabi_fadd>
 801f3f8:	682d      	ldr	r5, [r5, #0]
 801f3fa:	1c01      	adds	r1, r0, #0
 801f3fc:	1c28      	adds	r0, r5, #0
 801f3fe:	f7e1 f897 	bl	8000530 <__aeabi_fcmplt>
 801f402:	2800      	cmp	r0, #0
 801f404:	d011      	beq.n	801f42a <__ieee754_sqrtf+0xde>
 801f406:	3402      	adds	r4, #2
 801f408:	23fc      	movs	r3, #252	@ 0xfc
 801f40a:	1064      	asrs	r4, r4, #1
 801f40c:	059b      	lsls	r3, r3, #22
 801f40e:	18e3      	adds	r3, r4, r3
 801f410:	05fc      	lsls	r4, r7, #23
 801f412:	18e4      	adds	r4, r4, r3
 801f414:	e7ac      	b.n	801f370 <__ieee754_sqrtf+0x24>
 801f416:	005b      	lsls	r3, r3, #1
 801f418:	3201      	adds	r2, #1
 801f41a:	4203      	tst	r3, r0
 801f41c:	d0fb      	beq.n	801f416 <__ieee754_sqrtf+0xca>
 801f41e:	3a01      	subs	r2, #1
 801f420:	1a89      	subs	r1, r1, r2
 801f422:	e7b8      	b.n	801f396 <__ieee754_sqrtf+0x4a>
 801f424:	2080      	movs	r0, #128	@ 0x80
 801f426:	0400      	lsls	r0, r0, #16
 801f428:	e7f7      	b.n	801f41a <__ieee754_sqrtf+0xce>
 801f42a:	2301      	movs	r3, #1
 801f42c:	3401      	adds	r4, #1
 801f42e:	439c      	bics	r4, r3
 801f430:	e7ea      	b.n	801f408 <__ieee754_sqrtf+0xbc>
 801f432:	46c0      	nop			@ (mov r8, r8)
 801f434:	20000418 	.word	0x20000418
 801f438:	20000414 	.word	0x20000414

0801f43c <roundf>:
 801f43c:	0dc3      	lsrs	r3, r0, #23
 801f43e:	b2db      	uxtb	r3, r3
 801f440:	3b7f      	subs	r3, #127	@ 0x7f
 801f442:	0002      	movs	r2, r0
 801f444:	b510      	push	{r4, lr}
 801f446:	2b16      	cmp	r3, #22
 801f448:	dc13      	bgt.n	801f472 <roundf+0x36>
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	da07      	bge.n	801f45e <roundf+0x22>
 801f44e:	0fc2      	lsrs	r2, r0, #31
 801f450:	07d0      	lsls	r0, r2, #31
 801f452:	3301      	adds	r3, #1
 801f454:	d102      	bne.n	801f45c <roundf+0x20>
 801f456:	23fe      	movs	r3, #254	@ 0xfe
 801f458:	059b      	lsls	r3, r3, #22
 801f45a:	4318      	orrs	r0, r3
 801f45c:	bd10      	pop	{r4, pc}
 801f45e:	4908      	ldr	r1, [pc, #32]	@ (801f480 <roundf+0x44>)
 801f460:	4119      	asrs	r1, r3
 801f462:	4208      	tst	r0, r1
 801f464:	d0fa      	beq.n	801f45c <roundf+0x20>
 801f466:	2080      	movs	r0, #128	@ 0x80
 801f468:	03c0      	lsls	r0, r0, #15
 801f46a:	4118      	asrs	r0, r3
 801f46c:	1880      	adds	r0, r0, r2
 801f46e:	4388      	bics	r0, r1
 801f470:	e7f4      	b.n	801f45c <roundf+0x20>
 801f472:	2b80      	cmp	r3, #128	@ 0x80
 801f474:	d1f2      	bne.n	801f45c <roundf+0x20>
 801f476:	1c01      	adds	r1, r0, #0
 801f478:	f7e1 fa22 	bl	80008c0 <__aeabi_fadd>
 801f47c:	e7ee      	b.n	801f45c <roundf+0x20>
 801f47e:	46c0      	nop			@ (mov r8, r8)
 801f480:	007fffff 	.word	0x007fffff

0801f484 <__ieee754_expf>:
 801f484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f486:	21ff      	movs	r1, #255	@ 0xff
 801f488:	0043      	lsls	r3, r0, #1
 801f48a:	1c04      	adds	r4, r0, #0
 801f48c:	085b      	lsrs	r3, r3, #1
 801f48e:	05c9      	lsls	r1, r1, #23
 801f490:	428b      	cmp	r3, r1
 801f492:	d904      	bls.n	801f49e <__ieee754_expf+0x1a>
 801f494:	1c01      	adds	r1, r0, #0
 801f496:	1c20      	adds	r0, r4, #0
 801f498:	f7e1 fa12 	bl	80008c0 <__aeabi_fadd>
 801f49c:	e00d      	b.n	801f4ba <__ieee754_expf+0x36>
 801f49e:	0fc6      	lsrs	r6, r0, #31
 801f4a0:	428b      	cmp	r3, r1
 801f4a2:	d104      	bne.n	801f4ae <__ieee754_expf+0x2a>
 801f4a4:	2e00      	cmp	r6, #0
 801f4a6:	d000      	beq.n	801f4aa <__ieee754_expf+0x26>
 801f4a8:	e0ba      	b.n	801f620 <__ieee754_expf+0x19c>
 801f4aa:	1c20      	adds	r0, r4, #0
 801f4ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f4ae:	495d      	ldr	r1, [pc, #372]	@ (801f624 <__ieee754_expf+0x1a0>)
 801f4b0:	4288      	cmp	r0, r1
 801f4b2:	dd04      	ble.n	801f4be <__ieee754_expf+0x3a>
 801f4b4:	2000      	movs	r0, #0
 801f4b6:	f000 f8f1 	bl	801f69c <__math_oflowf>
 801f4ba:	1c04      	adds	r4, r0, #0
 801f4bc:	e7f5      	b.n	801f4aa <__ieee754_expf+0x26>
 801f4be:	2800      	cmp	r0, #0
 801f4c0:	da06      	bge.n	801f4d0 <__ieee754_expf+0x4c>
 801f4c2:	4a59      	ldr	r2, [pc, #356]	@ (801f628 <__ieee754_expf+0x1a4>)
 801f4c4:	4293      	cmp	r3, r2
 801f4c6:	d903      	bls.n	801f4d0 <__ieee754_expf+0x4c>
 801f4c8:	2000      	movs	r0, #0
 801f4ca:	f000 f8e1 	bl	801f690 <__math_uflowf>
 801f4ce:	e7f4      	b.n	801f4ba <__ieee754_expf+0x36>
 801f4d0:	4a56      	ldr	r2, [pc, #344]	@ (801f62c <__ieee754_expf+0x1a8>)
 801f4d2:	4293      	cmp	r3, r2
 801f4d4:	d96e      	bls.n	801f5b4 <__ieee754_expf+0x130>
 801f4d6:	4a56      	ldr	r2, [pc, #344]	@ (801f630 <__ieee754_expf+0x1ac>)
 801f4d8:	00b5      	lsls	r5, r6, #2
 801f4da:	4293      	cmp	r3, r2
 801f4dc:	d84e      	bhi.n	801f57c <__ieee754_expf+0xf8>
 801f4de:	4b55      	ldr	r3, [pc, #340]	@ (801f634 <__ieee754_expf+0x1b0>)
 801f4e0:	1c20      	adds	r0, r4, #0
 801f4e2:	5959      	ldr	r1, [r3, r5]
 801f4e4:	f7e1 fe9a 	bl	800121c <__aeabi_fsub>
 801f4e8:	4b53      	ldr	r3, [pc, #332]	@ (801f638 <__ieee754_expf+0x1b4>)
 801f4ea:	1c07      	adds	r7, r0, #0
 801f4ec:	595b      	ldr	r3, [r3, r5]
 801f4ee:	2501      	movs	r5, #1
 801f4f0:	1bad      	subs	r5, r5, r6
 801f4f2:	9300      	str	r3, [sp, #0]
 801f4f4:	1bad      	subs	r5, r5, r6
 801f4f6:	9900      	ldr	r1, [sp, #0]
 801f4f8:	1c38      	adds	r0, r7, #0
 801f4fa:	f7e1 fe8f 	bl	800121c <__aeabi_fsub>
 801f4fe:	1c04      	adds	r4, r0, #0
 801f500:	1c21      	adds	r1, r4, #0
 801f502:	1c20      	adds	r0, r4, #0
 801f504:	f7e1 fd4c 	bl	8000fa0 <__aeabi_fmul>
 801f508:	494c      	ldr	r1, [pc, #304]	@ (801f63c <__ieee754_expf+0x1b8>)
 801f50a:	1c06      	adds	r6, r0, #0
 801f50c:	f7e1 fd48 	bl	8000fa0 <__aeabi_fmul>
 801f510:	494b      	ldr	r1, [pc, #300]	@ (801f640 <__ieee754_expf+0x1bc>)
 801f512:	f7e1 fe83 	bl	800121c <__aeabi_fsub>
 801f516:	1c31      	adds	r1, r6, #0
 801f518:	f7e1 fd42 	bl	8000fa0 <__aeabi_fmul>
 801f51c:	4949      	ldr	r1, [pc, #292]	@ (801f644 <__ieee754_expf+0x1c0>)
 801f51e:	f7e1 f9cf 	bl	80008c0 <__aeabi_fadd>
 801f522:	1c31      	adds	r1, r6, #0
 801f524:	f7e1 fd3c 	bl	8000fa0 <__aeabi_fmul>
 801f528:	4947      	ldr	r1, [pc, #284]	@ (801f648 <__ieee754_expf+0x1c4>)
 801f52a:	f7e1 fe77 	bl	800121c <__aeabi_fsub>
 801f52e:	1c31      	adds	r1, r6, #0
 801f530:	f7e1 fd36 	bl	8000fa0 <__aeabi_fmul>
 801f534:	4945      	ldr	r1, [pc, #276]	@ (801f64c <__ieee754_expf+0x1c8>)
 801f536:	f7e1 f9c3 	bl	80008c0 <__aeabi_fadd>
 801f53a:	1c31      	adds	r1, r6, #0
 801f53c:	f7e1 fd30 	bl	8000fa0 <__aeabi_fmul>
 801f540:	1c01      	adds	r1, r0, #0
 801f542:	1c20      	adds	r0, r4, #0
 801f544:	f7e1 fe6a 	bl	800121c <__aeabi_fsub>
 801f548:	1c01      	adds	r1, r0, #0
 801f54a:	1c06      	adds	r6, r0, #0
 801f54c:	1c20      	adds	r0, r4, #0
 801f54e:	f7e1 fd27 	bl	8000fa0 <__aeabi_fmul>
 801f552:	9001      	str	r0, [sp, #4]
 801f554:	2d00      	cmp	r5, #0
 801f556:	d140      	bne.n	801f5da <__ieee754_expf+0x156>
 801f558:	2180      	movs	r1, #128	@ 0x80
 801f55a:	1c30      	adds	r0, r6, #0
 801f55c:	05c9      	lsls	r1, r1, #23
 801f55e:	f7e1 fe5d 	bl	800121c <__aeabi_fsub>
 801f562:	1c01      	adds	r1, r0, #0
 801f564:	9801      	ldr	r0, [sp, #4]
 801f566:	f7e1 fb35 	bl	8000bd4 <__aeabi_fdiv>
 801f56a:	1c21      	adds	r1, r4, #0
 801f56c:	f7e1 fe56 	bl	800121c <__aeabi_fsub>
 801f570:	1c01      	adds	r1, r0, #0
 801f572:	20fe      	movs	r0, #254	@ 0xfe
 801f574:	0580      	lsls	r0, r0, #22
 801f576:	f7e1 fe51 	bl	800121c <__aeabi_fsub>
 801f57a:	e79e      	b.n	801f4ba <__ieee754_expf+0x36>
 801f57c:	4934      	ldr	r1, [pc, #208]	@ (801f650 <__ieee754_expf+0x1cc>)
 801f57e:	1c20      	adds	r0, r4, #0
 801f580:	f7e1 fd0e 	bl	8000fa0 <__aeabi_fmul>
 801f584:	4b33      	ldr	r3, [pc, #204]	@ (801f654 <__ieee754_expf+0x1d0>)
 801f586:	5959      	ldr	r1, [r3, r5]
 801f588:	f7e1 f99a 	bl	80008c0 <__aeabi_fadd>
 801f58c:	f7e2 f800 	bl	8001590 <__aeabi_f2iz>
 801f590:	0005      	movs	r5, r0
 801f592:	f7e2 f81d 	bl	80015d0 <__aeabi_i2f>
 801f596:	4930      	ldr	r1, [pc, #192]	@ (801f658 <__ieee754_expf+0x1d4>)
 801f598:	1c06      	adds	r6, r0, #0
 801f59a:	f7e1 fd01 	bl	8000fa0 <__aeabi_fmul>
 801f59e:	1c01      	adds	r1, r0, #0
 801f5a0:	1c20      	adds	r0, r4, #0
 801f5a2:	f7e1 fe3b 	bl	800121c <__aeabi_fsub>
 801f5a6:	492d      	ldr	r1, [pc, #180]	@ (801f65c <__ieee754_expf+0x1d8>)
 801f5a8:	1c07      	adds	r7, r0, #0
 801f5aa:	1c30      	adds	r0, r6, #0
 801f5ac:	f7e1 fcf8 	bl	8000fa0 <__aeabi_fmul>
 801f5b0:	9000      	str	r0, [sp, #0]
 801f5b2:	e7a0      	b.n	801f4f6 <__ieee754_expf+0x72>
 801f5b4:	22d0      	movs	r2, #208	@ 0xd0
 801f5b6:	0592      	lsls	r2, r2, #22
 801f5b8:	4293      	cmp	r3, r2
 801f5ba:	d20c      	bcs.n	801f5d6 <__ieee754_expf+0x152>
 801f5bc:	4928      	ldr	r1, [pc, #160]	@ (801f660 <__ieee754_expf+0x1dc>)
 801f5be:	1c20      	adds	r0, r4, #0
 801f5c0:	f7e1 f97e 	bl	80008c0 <__aeabi_fadd>
 801f5c4:	21fe      	movs	r1, #254	@ 0xfe
 801f5c6:	0589      	lsls	r1, r1, #22
 801f5c8:	f7e0 ffc6 	bl	8000558 <__aeabi_fcmpgt>
 801f5cc:	1e05      	subs	r5, r0, #0
 801f5ce:	d097      	beq.n	801f500 <__ieee754_expf+0x7c>
 801f5d0:	21fe      	movs	r1, #254	@ 0xfe
 801f5d2:	0589      	lsls	r1, r1, #22
 801f5d4:	e75f      	b.n	801f496 <__ieee754_expf+0x12>
 801f5d6:	2500      	movs	r5, #0
 801f5d8:	e792      	b.n	801f500 <__ieee754_expf+0x7c>
 801f5da:	2080      	movs	r0, #128	@ 0x80
 801f5dc:	1c31      	adds	r1, r6, #0
 801f5de:	05c0      	lsls	r0, r0, #23
 801f5e0:	f7e1 fe1c 	bl	800121c <__aeabi_fsub>
 801f5e4:	1c01      	adds	r1, r0, #0
 801f5e6:	9801      	ldr	r0, [sp, #4]
 801f5e8:	f7e1 faf4 	bl	8000bd4 <__aeabi_fdiv>
 801f5ec:	1c01      	adds	r1, r0, #0
 801f5ee:	9800      	ldr	r0, [sp, #0]
 801f5f0:	f7e1 fe14 	bl	800121c <__aeabi_fsub>
 801f5f4:	1c39      	adds	r1, r7, #0
 801f5f6:	f7e1 fe11 	bl	800121c <__aeabi_fsub>
 801f5fa:	1c01      	adds	r1, r0, #0
 801f5fc:	20fe      	movs	r0, #254	@ 0xfe
 801f5fe:	0580      	lsls	r0, r0, #22
 801f600:	f7e1 fe0c 	bl	800121c <__aeabi_fsub>
 801f604:	002b      	movs	r3, r5
 801f606:	337d      	adds	r3, #125	@ 0x7d
 801f608:	db02      	blt.n	801f610 <__ieee754_expf+0x18c>
 801f60a:	05ec      	lsls	r4, r5, #23
 801f60c:	1824      	adds	r4, r4, r0
 801f60e:	e74c      	b.n	801f4aa <__ieee754_expf+0x26>
 801f610:	21d8      	movs	r1, #216	@ 0xd8
 801f612:	3564      	adds	r5, #100	@ 0x64
 801f614:	05ed      	lsls	r5, r5, #23
 801f616:	1828      	adds	r0, r5, r0
 801f618:	0509      	lsls	r1, r1, #20
 801f61a:	f7e1 fcc1 	bl	8000fa0 <__aeabi_fmul>
 801f61e:	e74c      	b.n	801f4ba <__ieee754_expf+0x36>
 801f620:	2400      	movs	r4, #0
 801f622:	e742      	b.n	801f4aa <__ieee754_expf+0x26>
 801f624:	42b17217 	.word	0x42b17217
 801f628:	42cff1b5 	.word	0x42cff1b5
 801f62c:	3eb17218 	.word	0x3eb17218
 801f630:	3f851591 	.word	0x3f851591
 801f634:	080214d0 	.word	0x080214d0
 801f638:	080214c8 	.word	0x080214c8
 801f63c:	3331bb4c 	.word	0x3331bb4c
 801f640:	35ddea0e 	.word	0x35ddea0e
 801f644:	388ab355 	.word	0x388ab355
 801f648:	3b360b61 	.word	0x3b360b61
 801f64c:	3e2aaaab 	.word	0x3e2aaaab
 801f650:	3fb8aa3b 	.word	0x3fb8aa3b
 801f654:	080214d8 	.word	0x080214d8
 801f658:	3f317180 	.word	0x3f317180
 801f65c:	3717f7d1 	.word	0x3717f7d1
 801f660:	7149f2ca 	.word	0x7149f2ca

0801f664 <with_errnof>:
 801f664:	b570      	push	{r4, r5, r6, lr}
 801f666:	000d      	movs	r5, r1
 801f668:	1c04      	adds	r4, r0, #0
 801f66a:	f7fd f923 	bl	801c8b4 <__errno>
 801f66e:	6005      	str	r5, [r0, #0]
 801f670:	1c20      	adds	r0, r4, #0
 801f672:	bd70      	pop	{r4, r5, r6, pc}

0801f674 <xflowf>:
 801f674:	b510      	push	{r4, lr}
 801f676:	1c0b      	adds	r3, r1, #0
 801f678:	2800      	cmp	r0, #0
 801f67a:	d002      	beq.n	801f682 <xflowf+0xe>
 801f67c:	2380      	movs	r3, #128	@ 0x80
 801f67e:	061b      	lsls	r3, r3, #24
 801f680:	18cb      	adds	r3, r1, r3
 801f682:	1c18      	adds	r0, r3, #0
 801f684:	f7e1 fc8c 	bl	8000fa0 <__aeabi_fmul>
 801f688:	2122      	movs	r1, #34	@ 0x22
 801f68a:	f7ff ffeb 	bl	801f664 <with_errnof>
 801f68e:	bd10      	pop	{r4, pc}

0801f690 <__math_uflowf>:
 801f690:	2180      	movs	r1, #128	@ 0x80
 801f692:	b510      	push	{r4, lr}
 801f694:	0549      	lsls	r1, r1, #21
 801f696:	f7ff ffed 	bl	801f674 <xflowf>
 801f69a:	bd10      	pop	{r4, pc}

0801f69c <__math_oflowf>:
 801f69c:	21e0      	movs	r1, #224	@ 0xe0
 801f69e:	b510      	push	{r4, lr}
 801f6a0:	05c9      	lsls	r1, r1, #23
 801f6a2:	f7ff ffe7 	bl	801f674 <xflowf>
 801f6a6:	bd10      	pop	{r4, pc}

0801f6a8 <_init>:
 801f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6aa:	46c0      	nop			@ (mov r8, r8)
 801f6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f6ae:	bc08      	pop	{r3}
 801f6b0:	469e      	mov	lr, r3
 801f6b2:	4770      	bx	lr

0801f6b4 <_fini>:
 801f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6b6:	46c0      	nop			@ (mov r8, r8)
 801f6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f6ba:	bc08      	pop	{r3}
 801f6bc:	469e      	mov	lr, r3
 801f6be:	4770      	bx	lr
