
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000215b0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002690  08021670  08021670  00022670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023d00  08023d00  00025424  2**0
                  CONTENTS
  4 .ARM          00000008  08023d00  08023d00  00024d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023d08  08023d08  00025424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023d08  08023d08  00024d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023d0c  08023d0c  00024d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000424  20000000  08023d10  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  20000424  08024134  00025424  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20003904  08024134  00025904  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00025424  2**0
                  CONTENTS, READONLY
 12 .debug_info   000342ab  00000000  00000000  0002544c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000969f  00000000  00000000  000596f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab0  00000000  00000000  00062d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f8c  00000000  00000000  00065848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023179  00000000  00000000  000677d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042da0  00000000  00000000  0008a94d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a031a  00000000  00000000  000cd6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016da07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ace0  00000000  00000000  0016dab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00178798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  00178805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017ad81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000424 	.word	0x20000424
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08021658 	.word	0x08021658

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000428 	.word	0x20000428
 8000104:	08021658 	.word	0x08021658

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08022f44 	.word	0x08022f44
 8000e0c:	08022f84 	.word	0x08022f84
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	08022fc0 	.word	0x08022fc0
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00a ffca 	bl	800e5fc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b f821 	bl	800e6cc <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00a ffd4 	bl	800e658 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	20000440 	.word	0x20000440

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00a ff50 	bl	800e5fc <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00a ff7f 	bl	800e674 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00a ff63 	bl	800e658 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000998 	.word	0x20000998

080037b0 <setCharges>:
void setCharges(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037b4:	f002 fbbe 	bl	8005f34 <ReadBatteryVoltage>
 80037b8:	1c02      	adds	r2, r0, #0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <setCharges+0x20>)
 80037bc:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037be:	f002 fc1b 	bl	8005ff8 <ReadSolarVoltage>
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <setCharges+0x24>)
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000570 	.word	0x20000570
 80037d4:	20000574 	.word	0x20000574

080037d8 <checkEEprom>:
bool checkEEprom(){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <checkEEprom+0x5c>)
 80037e0:	4815      	ldr	r0, [pc, #84]	@ (8003838 <checkEEprom+0x60>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	0019      	movs	r1, r3
 80037e6:	f7ff ff87 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00e      	b.n	8003810 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <checkEEprom+0x5c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <checkEEprom+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <checkEEprom+0x64>)
 8003804:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	3201      	adds	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b0b      	cmp	r3, #11
 8003816:	d9ec      	bls.n	80037f2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <checkEEprom+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <checkEEprom+0x68>)
 8003824:	701a      	strb	r2, [r3, #0]
  return test;
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <checkEEprom+0x68>)
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	200009a8 	.word	0x200009a8
 8003838:	0808000c 	.word	0x0808000c
 800383c:	200009b4 	.word	0x200009b4
 8003840:	200009b8 	.word	0x200009b8

08003844 <checkName>:
bool checkName(){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <checkName+0x5c>)
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <checkName+0x60>)
 800384e:	221e      	movs	r2, #30
 8003850:	0019      	movs	r1, r3
 8003852:	f7ff ff51 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00e      	b.n	800387c <checkName+0x38>
    configSum += nameConfig[i];
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <checkName+0x5c>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	001a      	movs	r2, r3
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <checkName+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <checkName+0x64>)
 8003870:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	3201      	adds	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d9ec      	bls.n	800385e <checkName+0x1a>
  }
  test = (configSum != 0);
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <checkName+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	4193      	sbcs	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <checkName+0x68>)
 8003890:	701a      	strb	r2, [r3, #0]
  return test;
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <checkName+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	200009bc 	.word	0x200009bc
 80038a4:	08080090 	.word	0x08080090
 80038a8:	200009dc 	.word	0x200009dc
 80038ac:	200009e0 	.word	0x200009e0

080038b0 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <ESP_GetHT+0x20>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <ESP_GetHT+0x24>)
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	20000568 	.word	0x20000568
 80038d4:	2000056c 	.word	0x2000056c

080038d8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	1dbb      	adds	r3, r7, #6
 80038e4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <setMeasurement+0x2c>)
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <setMeasurement+0x30>)
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setMeasurement+0x34>)
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000568 	.word	0x20000568
 8003908:	2000056c 	.word	0x2000056c
 800390c:	20000578 	.word	0x20000578

08003910 <setMic>:
void setMic(float dB){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <setMic+0x18>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	2000057c 	.word	0x2000057c

0800392c <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	0002      	movs	r2, r0
 8003934:	1dbb      	adds	r3, r7, #6
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	1c0a      	adds	r2, r1, #0
 800393c:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 800393e:	1dbb      	adds	r3, r7, #6
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	0018      	movs	r0, r3
 8003944:	f7fd fe44 	bl	80015d0 <__aeabi_i2f>
 8003948:	1c03      	adds	r3, r0, #0
 800394a:	490d      	ldr	r1, [pc, #52]	@ (8003980 <setPMs+0x54>)
 800394c:	1c18      	adds	r0, r3, #0
 800394e:	f7fd f941 	bl	8000bd4 <__aeabi_fdiv>
 8003952:	1c03      	adds	r3, r0, #0
 8003954:	1c1a      	adds	r2, r3, #0
 8003956:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <setPMs+0x58>)
 8003958:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	0018      	movs	r0, r3
 8003960:	f7fd fe36 	bl	80015d0 <__aeabi_i2f>
 8003964:	1c03      	adds	r3, r0, #0
 8003966:	4906      	ldr	r1, [pc, #24]	@ (8003980 <setPMs+0x54>)
 8003968:	1c18      	adds	r0, r3, #0
 800396a:	f7fd f933 	bl	8000bd4 <__aeabi_fdiv>
 800396e:	1c03      	adds	r3, r0, #0
 8003970:	1c1a      	adds	r2, r3, #0
 8003972:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <setPMs+0x5c>)
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	46bd      	mov	sp, r7
 800397a:	b002      	add	sp, #8
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	41200000 	.word	0x41200000
 8003984:	20000580 	.word	0x20000580
 8003988:	20000584 	.word	0x20000584

0800398c <SetConfigMode>:

void SetConfigMode(){
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003990:	4b02      	ldr	r3, [pc, #8]	@ (800399c <SetConfigMode+0x10>)
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	2000054f 	.word	0x2000054f

080039a0 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039a4:	f009 fe54 	bl	800d650 <HAL_GetUIDw0>
 80039a8:	0002      	movs	r2, r0
 80039aa:	4b07      	ldr	r3, [pc, #28]	@ (80039c8 <ESP_GetUID+0x28>)
 80039ac:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039ae:	f009 fe59 	bl	800d664 <HAL_GetUIDw1>
 80039b2:	0002      	movs	r2, r0
 80039b4:	4b04      	ldr	r3, [pc, #16]	@ (80039c8 <ESP_GetUID+0x28>)
 80039b6:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039b8:	f009 fe5e 	bl	800d678 <HAL_GetUIDw2>
 80039bc:	0002      	movs	r2, r0
 80039be:	4b02      	ldr	r3, [pc, #8]	@ (80039c8 <ESP_GetUID+0x28>)
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000554 	.word	0x20000554

080039cc <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039d4:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <ESP_Init+0x2c>)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039da:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <ESP_Init+0x30>)
 80039dc:	2202      	movs	r2, #2
 80039de:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 80039e0:	f7ff ffde 	bl	80039a0 <ESP_GetUID>
  beurs = checkEEprom();
 80039e4:	f7ff fef8 	bl	80037d8 <checkEEprom>
 80039e8:	0003      	movs	r3, r0
 80039ea:	001a      	movs	r2, r3
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <ESP_Init+0x34>)
 80039ee:	701a      	strb	r2, [r3, #0]
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000444 	.word	0x20000444
 80039fc:	20000028 	.word	0x20000028
 8003a00:	20000552 	.word	0x20000552

08003a04 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	000a      	movs	r2, r1
 8003a0e:	1cbb      	adds	r3, r7, #2
 8003a10:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a10      	ldr	r2, [pc, #64]	@ (8003a58 <ESP_Send+0x54>)
 8003a16:	4911      	ldr	r1, [pc, #68]	@ (8003a5c <ESP_Send+0x58>)
 8003a18:	2003      	movs	r0, #3
 8003a1a:	f009 fa4d 	bl	800ceb8 <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <ESP_Send+0x5c>)
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	250f      	movs	r5, #15
 8003a24:	197c      	adds	r4, r7, r5
 8003a26:	1cbb      	adds	r3, r7, #2
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	f011 ff47 	bl	80158c0 <HAL_UART_Transmit_DMA>
 8003a32:	0003      	movs	r3, r0
 8003a34:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a36:	197b      	adds	r3, r7, r5
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a3e:	4a09      	ldr	r2, [pc, #36]	@ (8003a64 <ESP_Send+0x60>)
 8003a40:	4b09      	ldr	r3, [pc, #36]	@ (8003a68 <ESP_Send+0x64>)
 8003a42:	0019      	movs	r1, r3
 8003a44:	2001      	movs	r0, #1
 8003a46:	f009 fa37 	bl	800ceb8 <CreateLine>
    return false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <ESP_Send+0x4c>
  }
  return true;
 8003a4e:	2301      	movs	r3, #1
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b004      	add	sp, #16
 8003a56:	bdb0      	pop	{r4, r5, r7, pc}
 8003a58:	08021670 	.word	0x08021670
 8003a5c:	08021680 	.word	0x08021680
 8003a60:	20000444 	.word	0x20000444
 8003a64:	08021684 	.word	0x08021684
 8003a68:	080216a4 	.word	0x080216a4

08003a6c <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a6c:	b5b0      	push	{r4, r5, r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	000a      	movs	r2, r1
 8003a76:	1cbb      	adds	r3, r7, #2
 8003a78:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a7a:	4b13      	ldr	r3, [pc, #76]	@ (8003ac8 <ESP_Receive+0x5c>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a80:	4b12      	ldr	r3, [pc, #72]	@ (8003acc <ESP_Receive+0x60>)
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	250f      	movs	r5, #15
 8003a86:	197c      	adds	r4, r7, r5
 8003a88:	1cbb      	adds	r3, r7, #2
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0019      	movs	r1, r3
 8003a90:	f011 ffa6 	bl	80159e0 <HAL_UART_Receive_DMA>
 8003a94:	0003      	movs	r3, r0
 8003a96:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a98:	197b      	adds	r3, r7, r5
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00d      	beq.n	8003abc <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <ESP_Receive+0x60>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2284      	movs	r2, #132	@ 0x84
 8003aa6:	589b      	ldr	r3, [r3, r2]
 8003aa8:	4a09      	ldr	r2, [pc, #36]	@ (8003ad0 <ESP_Receive+0x64>)
 8003aaa:	490a      	ldr	r1, [pc, #40]	@ (8003ad4 <ESP_Receive+0x68>)
 8003aac:	2001      	movs	r0, #1
 8003aae:	f009 fa03 	bl	800ceb8 <CreateLine>
    RxComplete = true;
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <ESP_Receive+0x5c>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
    return false;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <ESP_Receive+0x52>
  }
  return true;
 8003abc:	2301      	movs	r3, #1
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	20000448 	.word	0x20000448
 8003acc:	20000444 	.word	0x20000444
 8003ad0:	080216a8 	.word	0x080216a8
 8003ad4:	080216a4 	.word	0x080216a4

08003ad8 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <HAL_UART_ErrorCallback+0x2c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d107      	bne.n	8003afa <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2284      	movs	r2, #132	@ 0x84
 8003aee:	589b      	ldr	r3, [r3, r2]
 8003af0:	4a05      	ldr	r2, [pc, #20]	@ (8003b08 <HAL_UART_ErrorCallback+0x30>)
 8003af2:	4906      	ldr	r1, [pc, #24]	@ (8003b0c <HAL_UART_ErrorCallback+0x34>)
 8003af4:	2003      	movs	r0, #3
 8003af6:	f009 f9df 	bl	800ceb8 <CreateLine>
  }
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	20000444 	.word	0x20000444
 8003b08:	080216d8 	.word	0x080216d8
 8003b0c:	08021680 	.word	0x08021680

08003b10 <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e010      	b.n	8003b42 <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	001a      	movs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	1898      	adds	r0, r3, r2
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	18d3      	adds	r3, r2, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	001a      	movs	r2, r3
 8003b34:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <uint8ArrayToString+0x44>)
 8003b36:	0019      	movs	r1, r3
 8003b38:	f01a fcac 	bl	801e494 <siprintf>
  for (int i = 0; i < 12; i++)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b0b      	cmp	r3, #11
 8003b46:	ddeb      	ble.n	8003b20 <uint8ArrayToString+0x10>
  }
}
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b004      	add	sp, #16
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	08021704 	.word	0x08021704

08003b58 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b5a:	b089      	sub	sp, #36	@ 0x24
 8003b5c:	af04      	add	r7, sp, #16
 8003b5e:	0002      	movs	r2, r0
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b64:	4be5      	ldr	r3, [pc, #916]	@ (8003efc <CreateMessage+0x3a4>)
 8003b66:	48e6      	ldr	r0, [pc, #920]	@ (8003f00 <CreateMessage+0x3a8>)
 8003b68:	220c      	movs	r2, #12
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	f7ff fdc4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b70:	4be4      	ldr	r3, [pc, #912]	@ (8003f04 <CreateMessage+0x3ac>)
 8003b72:	48e5      	ldr	r0, [pc, #916]	@ (8003f08 <CreateMessage+0x3b0>)
 8003b74:	220c      	movs	r2, #12
 8003b76:	0019      	movs	r1, r3
 8003b78:	f7ff fdbe 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b7c:	4be3      	ldr	r3, [pc, #908]	@ (8003f0c <CreateMessage+0x3b4>)
 8003b7e:	48e4      	ldr	r0, [pc, #912]	@ (8003f10 <CreateMessage+0x3b8>)
 8003b80:	220c      	movs	r2, #12
 8003b82:	0019      	movs	r1, r3
 8003b84:	f7ff fdb8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b88:	4be2      	ldr	r3, [pc, #904]	@ (8003f14 <CreateMessage+0x3bc>)
 8003b8a:	48e3      	ldr	r0, [pc, #908]	@ (8003f18 <CreateMessage+0x3c0>)
 8003b8c:	220c      	movs	r2, #12
 8003b8e:	0019      	movs	r1, r3
 8003b90:	f7ff fdb2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b94:	4be1      	ldr	r3, [pc, #900]	@ (8003f1c <CreateMessage+0x3c4>)
 8003b96:	48e2      	ldr	r0, [pc, #904]	@ (8003f20 <CreateMessage+0x3c8>)
 8003b98:	220c      	movs	r2, #12
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	f7ff fdac 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003ba0:	4be0      	ldr	r3, [pc, #896]	@ (8003f24 <CreateMessage+0x3cc>)
 8003ba2:	48e1      	ldr	r0, [pc, #900]	@ (8003f28 <CreateMessage+0x3d0>)
 8003ba4:	220c      	movs	r2, #12
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	f7ff fda6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003bac:	4bdf      	ldr	r3, [pc, #892]	@ (8003f2c <CreateMessage+0x3d4>)
 8003bae:	48e0      	ldr	r0, [pc, #896]	@ (8003f30 <CreateMessage+0x3d8>)
 8003bb0:	220c      	movs	r2, #12
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	f7ff fda0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003bb8:	4bde      	ldr	r3, [pc, #888]	@ (8003f34 <CreateMessage+0x3dc>)
 8003bba:	48df      	ldr	r0, [pc, #892]	@ (8003f38 <CreateMessage+0x3e0>)
 8003bbc:	220c      	movs	r2, #12
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	f7ff fd9a 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003bc4:	f7ff fe3e 	bl	8003844 <checkName>
 8003bc8:	1e03      	subs	r3, r0, #0
 8003bca:	d006      	beq.n	8003bda <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003bcc:	4bdb      	ldr	r3, [pc, #876]	@ (8003f3c <CreateMessage+0x3e4>)
 8003bce:	48dc      	ldr	r0, [pc, #880]	@ (8003f40 <CreateMessage+0x3e8>)
 8003bd0:	221e      	movs	r2, #30
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	f7ff fd90 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003bd8:	e005      	b.n	8003be6 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003bda:	4bd8      	ldr	r3, [pc, #864]	@ (8003f3c <CreateMessage+0x3e4>)
 8003bdc:	4ad9      	ldr	r2, [pc, #868]	@ (8003f44 <CreateMessage+0x3ec>)
 8003bde:	6811      	ldr	r1, [r2, #0]
 8003be0:	6019      	str	r1, [r3, #0]
 8003be2:	7912      	ldrb	r2, [r2, #4]
 8003be4:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003be6:	f7ff fde3 	bl	80037b0 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	00da      	lsls	r2, r3, #3
 8003bee:	4bd6      	ldr	r3, [pc, #856]	@ (8003f48 <CreateMessage+0x3f0>)
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f01a fd92 	bl	801e71c <memset>
  uint16_t index = 0;
 8003bf8:	260e      	movs	r6, #14
 8003bfa:	19bb      	adds	r3, r7, r6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003c00:	19bb      	adds	r3, r7, r6
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	4bd0      	ldr	r3, [pc, #832]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	4ad0      	ldr	r2, [pc, #832]	@ (8003f4c <CreateMessage+0x3f4>)
 8003c0a:	0011      	movs	r1, r2
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f01a fc41 	bl	801e494 <siprintf>
  index = strlen(message);
 8003c12:	4bcd      	ldr	r3, [pc, #820]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c14:	0018      	movs	r0, r3
 8003c16:	f7fc faa9 	bl	800016c <strlen>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	19bb      	adds	r3, r7, r6
 8003c1e:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003c20:	4ab6      	ldr	r2, [pc, #728]	@ (8003efc <CreateMessage+0x3a4>)
 8003c22:	4bcb      	ldr	r3, [pc, #812]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7ff ff72 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003c2c:	19bb      	adds	r3, r7, r6
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	4bc5      	ldr	r3, [pc, #788]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c32:	18d4      	adds	r4, r2, r3
 8003c34:	4bc7      	ldr	r3, [pc, #796]	@ (8003f54 <CreateMessage+0x3fc>)
 8003c36:	689d      	ldr	r5, [r3, #8]
 8003c38:	4bc7      	ldr	r3, [pc, #796]	@ (8003f58 <CreateMessage+0x400>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c18      	adds	r0, r3, #0
 8003c3e:	f7ff fc11 	bl	8003464 <__aeabi_f2d>
 8003c42:	0002      	movs	r2, r0
 8003c44:	000b      	movs	r3, r1
 8003c46:	48bd      	ldr	r0, [pc, #756]	@ (8003f3c <CreateMessage+0x3e4>)
 8003c48:	49c4      	ldr	r1, [pc, #784]	@ (8003f5c <CreateMessage+0x404>)
 8003c4a:	9202      	str	r2, [sp, #8]
 8003c4c:	9303      	str	r3, [sp, #12]
 8003c4e:	4bc0      	ldr	r3, [pc, #768]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	0003      	movs	r3, r0
 8003c54:	002a      	movs	r2, r5
 8003c56:	0020      	movs	r0, r4
 8003c58:	f01a fc1c 	bl	801e494 <siprintf>
  index = strlen(message);
 8003c5c:	4bba      	ldr	r3, [pc, #744]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c5e:	0018      	movs	r0, r3
 8003c60:	f7fc fa84 	bl	800016c <strlen>
 8003c64:	0002      	movs	r2, r0
 8003c66:	19bb      	adds	r3, r7, r6
 8003c68:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003c6a:	4aa6      	ldr	r2, [pc, #664]	@ (8003f04 <CreateMessage+0x3ac>)
 8003c6c:	4bb8      	ldr	r3, [pc, #736]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c6e:	0011      	movs	r1, r2
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7ff ff4d 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003c76:	19bb      	adds	r3, r7, r6
 8003c78:	881a      	ldrh	r2, [r3, #0]
 8003c7a:	4bb3      	ldr	r3, [pc, #716]	@ (8003f48 <CreateMessage+0x3f0>)
 8003c7c:	18d4      	adds	r4, r2, r3
 8003c7e:	4bb5      	ldr	r3, [pc, #724]	@ (8003f54 <CreateMessage+0x3fc>)
 8003c80:	689d      	ldr	r5, [r3, #8]
 8003c82:	4bb7      	ldr	r3, [pc, #732]	@ (8003f60 <CreateMessage+0x408>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1c18      	adds	r0, r3, #0
 8003c88:	f7ff fbec 	bl	8003464 <__aeabi_f2d>
 8003c8c:	0002      	movs	r2, r0
 8003c8e:	000b      	movs	r3, r1
 8003c90:	48aa      	ldr	r0, [pc, #680]	@ (8003f3c <CreateMessage+0x3e4>)
 8003c92:	49b4      	ldr	r1, [pc, #720]	@ (8003f64 <CreateMessage+0x40c>)
 8003c94:	9202      	str	r2, [sp, #8]
 8003c96:	9303      	str	r3, [sp, #12]
 8003c98:	4bad      	ldr	r3, [pc, #692]	@ (8003f50 <CreateMessage+0x3f8>)
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	0003      	movs	r3, r0
 8003c9e:	002a      	movs	r2, r5
 8003ca0:	0020      	movs	r0, r4
 8003ca2:	f01a fbf7 	bl	801e494 <siprintf>
  index = strlen(message);
 8003ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8003f48 <CreateMessage+0x3f0>)
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7fc fa5f 	bl	800016c <strlen>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	19bb      	adds	r3, r7, r6
 8003cb2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003cb4:	4a95      	ldr	r2, [pc, #596]	@ (8003f0c <CreateMessage+0x3b4>)
 8003cb6:	4ba6      	ldr	r3, [pc, #664]	@ (8003f50 <CreateMessage+0x3f8>)
 8003cb8:	0011      	movs	r1, r2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7ff ff28 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003cc0:	19bb      	adds	r3, r7, r6
 8003cc2:	881a      	ldrh	r2, [r3, #0]
 8003cc4:	4ba0      	ldr	r3, [pc, #640]	@ (8003f48 <CreateMessage+0x3f0>)
 8003cc6:	18d4      	adds	r4, r2, r3
 8003cc8:	4ba2      	ldr	r3, [pc, #648]	@ (8003f54 <CreateMessage+0x3fc>)
 8003cca:	689d      	ldr	r5, [r3, #8]
 8003ccc:	4ba6      	ldr	r3, [pc, #664]	@ (8003f68 <CreateMessage+0x410>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c18      	adds	r0, r3, #0
 8003cd2:	f7ff fbc7 	bl	8003464 <__aeabi_f2d>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	000b      	movs	r3, r1
 8003cda:	4898      	ldr	r0, [pc, #608]	@ (8003f3c <CreateMessage+0x3e4>)
 8003cdc:	49a3      	ldr	r1, [pc, #652]	@ (8003f6c <CreateMessage+0x414>)
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9303      	str	r3, [sp, #12]
 8003ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8003f50 <CreateMessage+0x3f8>)
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	0003      	movs	r3, r0
 8003ce8:	002a      	movs	r2, r5
 8003cea:	0020      	movs	r0, r4
 8003cec:	f01a fbd2 	bl	801e494 <siprintf>
  index = strlen(message);
 8003cf0:	4b95      	ldr	r3, [pc, #596]	@ (8003f48 <CreateMessage+0x3f0>)
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	f7fc fa3a 	bl	800016c <strlen>
 8003cf8:	0002      	movs	r2, r0
 8003cfa:	19bb      	adds	r3, r7, r6
 8003cfc:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003cfe:	4a85      	ldr	r2, [pc, #532]	@ (8003f14 <CreateMessage+0x3bc>)
 8003d00:	4b93      	ldr	r3, [pc, #588]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d02:	0011      	movs	r1, r2
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7ff ff03 	bl	8003b10 <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003d0a:	19bb      	adds	r3, r7, r6
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d10:	18d0      	adds	r0, r2, r3
 8003d12:	4b90      	ldr	r3, [pc, #576]	@ (8003f54 <CreateMessage+0x3fc>)
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	4b96      	ldr	r3, [pc, #600]	@ (8003f70 <CreateMessage+0x418>)
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	4c88      	ldr	r4, [pc, #544]	@ (8003f3c <CreateMessage+0x3e4>)
 8003d1c:	4995      	ldr	r1, [pc, #596]	@ (8003f74 <CreateMessage+0x41c>)
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	4b8b      	ldr	r3, [pc, #556]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	0023      	movs	r3, r4
 8003d26:	f01a fbb5 	bl	801e494 <siprintf>
  index = strlen(message);
 8003d2a:	4b87      	ldr	r3, [pc, #540]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7fc fa1d 	bl	800016c <strlen>
 8003d32:	0002      	movs	r2, r0
 8003d34:	19bb      	adds	r3, r7, r6
 8003d36:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4053      	eors	r3, r2
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d100      	bne.n	8003d48 <CreateMessage+0x1f0>
 8003d46:	e094      	b.n	8003e72 <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003d48:	4a74      	ldr	r2, [pc, #464]	@ (8003f1c <CreateMessage+0x3c4>)
 8003d4a:	4b81      	ldr	r3, [pc, #516]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff fede 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d54:	19bb      	adds	r3, r7, r6
 8003d56:	881a      	ldrh	r2, [r3, #0]
 8003d58:	4b7b      	ldr	r3, [pc, #492]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d5a:	18d4      	adds	r4, r2, r3
 8003d5c:	4b7d      	ldr	r3, [pc, #500]	@ (8003f54 <CreateMessage+0x3fc>)
 8003d5e:	689d      	ldr	r5, [r3, #8]
 8003d60:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <CreateMessage+0x420>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1c18      	adds	r0, r3, #0
 8003d66:	f7ff fb7d 	bl	8003464 <__aeabi_f2d>
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	000b      	movs	r3, r1
 8003d6e:	4873      	ldr	r0, [pc, #460]	@ (8003f3c <CreateMessage+0x3e4>)
 8003d70:	4982      	ldr	r1, [pc, #520]	@ (8003f7c <CreateMessage+0x424>)
 8003d72:	9202      	str	r2, [sp, #8]
 8003d74:	9303      	str	r3, [sp, #12]
 8003d76:	4b76      	ldr	r3, [pc, #472]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	002a      	movs	r2, r5
 8003d7e:	0020      	movs	r0, r4
 8003d80:	f01a fb88 	bl	801e494 <siprintf>
    index = strlen(message);
 8003d84:	4b70      	ldr	r3, [pc, #448]	@ (8003f48 <CreateMessage+0x3f0>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fc f9f0 	bl	800016c <strlen>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	19bb      	adds	r3, r7, r6
 8003d90:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d92:	4a64      	ldr	r2, [pc, #400]	@ (8003f24 <CreateMessage+0x3cc>)
 8003d94:	4b6e      	ldr	r3, [pc, #440]	@ (8003f50 <CreateMessage+0x3f8>)
 8003d96:	0011      	movs	r1, r2
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff feb9 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d9e:	19bb      	adds	r3, r7, r6
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	4b69      	ldr	r3, [pc, #420]	@ (8003f48 <CreateMessage+0x3f0>)
 8003da4:	18d4      	adds	r4, r2, r3
 8003da6:	4b6b      	ldr	r3, [pc, #428]	@ (8003f54 <CreateMessage+0x3fc>)
 8003da8:	689d      	ldr	r5, [r3, #8]
 8003daa:	4b75      	ldr	r3, [pc, #468]	@ (8003f80 <CreateMessage+0x428>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	1c18      	adds	r0, r3, #0
 8003db0:	f7ff fb58 	bl	8003464 <__aeabi_f2d>
 8003db4:	0002      	movs	r2, r0
 8003db6:	000b      	movs	r3, r1
 8003db8:	4860      	ldr	r0, [pc, #384]	@ (8003f3c <CreateMessage+0x3e4>)
 8003dba:	4972      	ldr	r1, [pc, #456]	@ (8003f84 <CreateMessage+0x42c>)
 8003dbc:	9202      	str	r2, [sp, #8]
 8003dbe:	9303      	str	r3, [sp, #12]
 8003dc0:	4b63      	ldr	r3, [pc, #396]	@ (8003f50 <CreateMessage+0x3f8>)
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	002a      	movs	r2, r5
 8003dc8:	0020      	movs	r0, r4
 8003dca:	f01a fb63 	bl	801e494 <siprintf>
    index = strlen(message);
 8003dce:	4b5e      	ldr	r3, [pc, #376]	@ (8003f48 <CreateMessage+0x3f0>)
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f7fc f9cb 	bl	800016c <strlen>
 8003dd6:	0002      	movs	r2, r0
 8003dd8:	19bb      	adds	r3, r7, r6
 8003dda:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003ddc:	4a53      	ldr	r2, [pc, #332]	@ (8003f2c <CreateMessage+0x3d4>)
 8003dde:	4b5c      	ldr	r3, [pc, #368]	@ (8003f50 <CreateMessage+0x3f8>)
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7ff fe94 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003de8:	19bb      	adds	r3, r7, r6
 8003dea:	881a      	ldrh	r2, [r3, #0]
 8003dec:	4b56      	ldr	r3, [pc, #344]	@ (8003f48 <CreateMessage+0x3f0>)
 8003dee:	18d4      	adds	r4, r2, r3
 8003df0:	4b58      	ldr	r3, [pc, #352]	@ (8003f54 <CreateMessage+0x3fc>)
 8003df2:	689d      	ldr	r5, [r3, #8]
 8003df4:	4b64      	ldr	r3, [pc, #400]	@ (8003f88 <CreateMessage+0x430>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1c18      	adds	r0, r3, #0
 8003dfa:	f7ff fb33 	bl	8003464 <__aeabi_f2d>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	000b      	movs	r3, r1
 8003e02:	484e      	ldr	r0, [pc, #312]	@ (8003f3c <CreateMessage+0x3e4>)
 8003e04:	4961      	ldr	r1, [pc, #388]	@ (8003f8c <CreateMessage+0x434>)
 8003e06:	9202      	str	r2, [sp, #8]
 8003e08:	9303      	str	r3, [sp, #12]
 8003e0a:	4b51      	ldr	r3, [pc, #324]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	0003      	movs	r3, r0
 8003e10:	002a      	movs	r2, r5
 8003e12:	0020      	movs	r0, r4
 8003e14:	f01a fb3e 	bl	801e494 <siprintf>
    index = strlen(message);
 8003e18:	4b4b      	ldr	r3, [pc, #300]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f7fc f9a6 	bl	800016c <strlen>
 8003e20:	0002      	movs	r2, r0
 8003e22:	19bb      	adds	r3, r7, r6
 8003e24:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003e26:	4a43      	ldr	r2, [pc, #268]	@ (8003f34 <CreateMessage+0x3dc>)
 8003e28:	4b49      	ldr	r3, [pc, #292]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e2a:	0011      	movs	r1, r2
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fe6f 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003e32:	19bb      	adds	r3, r7, r6
 8003e34:	881a      	ldrh	r2, [r3, #0]
 8003e36:	4b44      	ldr	r3, [pc, #272]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e38:	18d4      	adds	r4, r2, r3
 8003e3a:	4b46      	ldr	r3, [pc, #280]	@ (8003f54 <CreateMessage+0x3fc>)
 8003e3c:	689d      	ldr	r5, [r3, #8]
 8003e3e:	4b54      	ldr	r3, [pc, #336]	@ (8003f90 <CreateMessage+0x438>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	1c18      	adds	r0, r3, #0
 8003e44:	f7ff fb0e 	bl	8003464 <__aeabi_f2d>
 8003e48:	0002      	movs	r2, r0
 8003e4a:	000b      	movs	r3, r1
 8003e4c:	483b      	ldr	r0, [pc, #236]	@ (8003f3c <CreateMessage+0x3e4>)
 8003e4e:	4951      	ldr	r1, [pc, #324]	@ (8003f94 <CreateMessage+0x43c>)
 8003e50:	9202      	str	r2, [sp, #8]
 8003e52:	9303      	str	r3, [sp, #12]
 8003e54:	4b3e      	ldr	r3, [pc, #248]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	0003      	movs	r3, r0
 8003e5a:	002a      	movs	r2, r5
 8003e5c:	0020      	movs	r0, r4
 8003e5e:	f01a fb19 	bl	801e494 <siprintf>
    index = strlen(message);
 8003e62:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7fc f981 	bl	800016c <strlen>
 8003e6a:	0002      	movs	r2, r0
 8003e6c:	19bb      	adds	r3, r7, r6
 8003e6e:	801a      	strh	r2, [r3, #0]
 8003e70:	e025      	b.n	8003ebe <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003e72:	4a2a      	ldr	r2, [pc, #168]	@ (8003f1c <CreateMessage+0x3c4>)
 8003e74:	4b36      	ldr	r3, [pc, #216]	@ (8003f50 <CreateMessage+0x3f8>)
 8003e76:	0011      	movs	r1, r2
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7ff fe49 	bl	8003b10 <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003e7e:	260e      	movs	r6, #14
 8003e80:	19bb      	adds	r3, r7, r6
 8003e82:	881a      	ldrh	r2, [r3, #0]
 8003e84:	4b30      	ldr	r3, [pc, #192]	@ (8003f48 <CreateMessage+0x3f0>)
 8003e86:	18d4      	adds	r4, r2, r3
 8003e88:	4b32      	ldr	r3, [pc, #200]	@ (8003f54 <CreateMessage+0x3fc>)
 8003e8a:	689d      	ldr	r5, [r3, #8]
 8003e8c:	4b3a      	ldr	r3, [pc, #232]	@ (8003f78 <CreateMessage+0x420>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1c18      	adds	r0, r3, #0
 8003e92:	f7ff fae7 	bl	8003464 <__aeabi_f2d>
 8003e96:	0002      	movs	r2, r0
 8003e98:	000b      	movs	r3, r1
 8003e9a:	4828      	ldr	r0, [pc, #160]	@ (8003f3c <CreateMessage+0x3e4>)
 8003e9c:	493e      	ldr	r1, [pc, #248]	@ (8003f98 <CreateMessage+0x440>)
 8003e9e:	9202      	str	r2, [sp, #8]
 8003ea0:	9303      	str	r3, [sp, #12]
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <CreateMessage+0x3f8>)
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	002a      	movs	r2, r5
 8003eaa:	0020      	movs	r0, r4
 8003eac:	f01a faf2 	bl	801e494 <siprintf>
    index = strlen(message);
 8003eb0:	4b25      	ldr	r3, [pc, #148]	@ (8003f48 <CreateMessage+0x3f0>)
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f7fc f95a 	bl	800016c <strlen>
 8003eb8:	0002      	movs	r2, r0
 8003eba:	19bb      	adds	r3, r7, r6
 8003ebc:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003ebe:	240e      	movs	r4, #14
 8003ec0:	193b      	adds	r3, r7, r4
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	4a35      	ldr	r2, [pc, #212]	@ (8003f9c <CreateMessage+0x444>)
 8003ec6:	4936      	ldr	r1, [pc, #216]	@ (8003fa0 <CreateMessage+0x448>)
 8003ec8:	2003      	movs	r0, #3
 8003eca:	f008 fff5 	bl	800ceb8 <CreateLine>
  index = sprintf(&message[index], "]");
 8003ece:	193b      	adds	r3, r7, r4
 8003ed0:	881a      	ldrh	r2, [r3, #0]
 8003ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f48 <CreateMessage+0x3f0>)
 8003ed4:	18d3      	adds	r3, r2, r3
 8003ed6:	4a33      	ldr	r2, [pc, #204]	@ (8003fa4 <CreateMessage+0x44c>)
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f01a fada 	bl	801e494 <siprintf>
 8003ee0:	0002      	movs	r2, r0
 8003ee2:	193b      	adds	r3, r7, r4
 8003ee4:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003ee6:	4b18      	ldr	r3, [pc, #96]	@ (8003f48 <CreateMessage+0x3f0>)
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc f93f 	bl	800016c <strlen>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	b29b      	uxth	r3, r3
}
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b005      	add	sp, #20
 8003ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	200009e4 	.word	0x200009e4
 8003f00:	0808000c 	.word	0x0808000c
 8003f04:	200009f0 	.word	0x200009f0
 8003f08:	08080018 	.word	0x08080018
 8003f0c:	200009fc 	.word	0x200009fc
 8003f10:	08080048 	.word	0x08080048
 8003f14:	20000a08 	.word	0x20000a08
 8003f18:	08080030 	.word	0x08080030
 8003f1c:	20000a14 	.word	0x20000a14
 8003f20:	0808006c 	.word	0x0808006c
 8003f24:	20000a20 	.word	0x20000a20
 8003f28:	08080078 	.word	0x08080078
 8003f2c:	20000a2c 	.word	0x20000a2c
 8003f30:	08080054 	.word	0x08080054
 8003f34:	20000a38 	.word	0x20000a38
 8003f38:	08080060 	.word	0x08080060
 8003f3c:	20000a44 	.word	0x20000a44
 8003f40:	08080090 	.word	0x08080090
 8003f44:	08023024 	.word	0x08023024
 8003f48:	20000588 	.word	0x20000588
 8003f4c:	0802170c 	.word	0x0802170c
 8003f50:	20000a64 	.word	0x20000a64
 8003f54:	20000554 	.word	0x20000554
 8003f58:	20000568 	.word	0x20000568
 8003f5c:	08021710 	.word	0x08021710
 8003f60:	2000056c 	.word	0x2000056c
 8003f64:	08021764 	.word	0x08021764
 8003f68:	2000057c 	.word	0x2000057c
 8003f6c:	080217bc 	.word	0x080217bc
 8003f70:	20000578 	.word	0x20000578
 8003f74:	08021818 	.word	0x08021818
 8003f78:	20000570 	.word	0x20000570
 8003f7c:	0802186c 	.word	0x0802186c
 8003f80:	20000574 	.word	0x20000574
 8003f84:	080218cc 	.word	0x080218cc
 8003f88:	20000580 	.word	0x20000580
 8003f8c:	0802192c 	.word	0x0802192c
 8003f90:	20000584 	.word	0x20000584
 8003f94:	08021988 	.word	0x08021988
 8003f98:	080219e0 	.word	0x080219e0
 8003f9c:	08021a38 	.word	0x08021a38
 8003fa0:	08021680 	.word	0x08021680
 8003fa4:	08021a50 	.word	0x08021a50

08003fa8 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003fac:	2064      	movs	r0, #100	@ 0x64
 8003fae:	f009 fb2b 	bl	800d608 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003fb2:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <StartProg+0x60>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2101      	movs	r1, #1
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f00a fd7a 	bl	800eab2 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003fbe:	2064      	movs	r0, #100	@ 0x64
 8003fc0:	f009 fb22 	bl	800d608 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003fc4:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <StartProg+0x60>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2102      	movs	r1, #2
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f00a fd71 	bl	800eab2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003fd0:	23fa      	movs	r3, #250	@ 0xfa
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f009 fb17 	bl	800d608 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003fda:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <StartProg+0x60>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	2101      	movs	r1, #1
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f00a fd66 	bl	800eab2 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003fe6:	23fa      	movs	r3, #250	@ 0xfa
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	0018      	movs	r0, r3
 8003fec:	f009 fb0c 	bl	800d608 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <StartProg+0x60>)
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f00a fd5b 	bl	800eab2 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ffc:	2028      	movs	r0, #40	@ 0x28
 8003ffe:	f009 fb03 	bl	800d608 <HAL_Delay>
}
 8004002:	46c0      	nop			@ (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	50001c00 	.word	0x50001c00

0800400c <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 800400c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800400e:	b0d9      	sub	sp, #356	@ 0x164
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	0008      	movs	r0, r1
 8004016:	0011      	movs	r1, r2
 8004018:	4ba1      	ldr	r3, [pc, #644]	@ (80042a0 <ParseBuffer+0x294>)
 800401a:	24b0      	movs	r4, #176	@ 0xb0
 800401c:	0064      	lsls	r4, r4, #1
 800401e:	191b      	adds	r3, r3, r4
 8004020:	19db      	adds	r3, r3, r7
 8004022:	1c02      	adds	r2, r0, #0
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	4b9f      	ldr	r3, [pc, #636]	@ (80042a4 <ParseBuffer+0x298>)
 8004028:	191b      	adds	r3, r3, r4
 800402a:	19db      	adds	r3, r3, r7
 800402c:	1c0a      	adds	r2, r1, #0
 800402e:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8004030:	2380      	movs	r3, #128	@ 0x80
 8004032:	005a      	lsls	r2, r3, #1
 8004034:	2348      	movs	r3, #72	@ 0x48
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	2100      	movs	r1, #0
 800403a:	0018      	movs	r0, r3
 800403c:	f01a fb6e 	bl	801e71c <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8004040:	2360      	movs	r3, #96	@ 0x60
 8004042:	33ff      	adds	r3, #255	@ 0xff
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	2203      	movs	r2, #3
 8004048:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 800404a:	23ae      	movs	r3, #174	@ 0xae
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2200      	movs	r2, #0
 8004052:	801a      	strh	r2, [r3, #0]
 8004054:	e013      	b.n	800407e <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004056:	20ae      	movs	r0, #174	@ 0xae
 8004058:	0040      	lsls	r0, r0, #1
 800405a:	183b      	adds	r3, r7, r0
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	18d2      	adds	r2, r2, r3
 8004062:	183b      	adds	r3, r7, r0
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	7811      	ldrb	r1, [r2, #0]
 8004068:	4a8f      	ldr	r2, [pc, #572]	@ (80042a8 <ParseBuffer+0x29c>)
 800406a:	24b0      	movs	r4, #176	@ 0xb0
 800406c:	0064      	lsls	r4, r4, #1
 800406e:	1912      	adds	r2, r2, r4
 8004070:	19d2      	adds	r2, r2, r7
 8004072:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8004074:	183b      	adds	r3, r7, r0
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	183b      	adds	r3, r7, r0
 800407a:	3201      	adds	r2, #1
 800407c:	801a      	strh	r2, [r3, #0]
 800407e:	23ae      	movs	r3, #174	@ 0xae
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	18fa      	adds	r2, r7, r3
 8004084:	4b86      	ldr	r3, [pc, #536]	@ (80042a0 <ParseBuffer+0x294>)
 8004086:	24b0      	movs	r4, #176	@ 0xb0
 8004088:	0064      	lsls	r4, r4, #1
 800408a:	191b      	adds	r3, r3, r4
 800408c:	19db      	adds	r3, r3, r7
 800408e:	8812      	ldrh	r2, [r2, #0]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d3df      	bcc.n	8004056 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8004096:	4b82      	ldr	r3, [pc, #520]	@ (80042a0 <ParseBuffer+0x294>)
 8004098:	191b      	adds	r3, r3, r4
 800409a:	19db      	adds	r3, r3, r7
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	4a82      	ldr	r2, [pc, #520]	@ (80042a8 <ParseBuffer+0x29c>)
 80040a0:	1912      	adds	r2, r2, r4
 80040a2:	19d2      	adds	r2, r2, r7
 80040a4:	2100      	movs	r1, #0
 80040a6:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80040a8:	2648      	movs	r6, #72	@ 0x48
 80040aa:	19bb      	adds	r3, r7, r6
 80040ac:	4a7f      	ldr	r2, [pc, #508]	@ (80042ac <ParseBuffer+0x2a0>)
 80040ae:	4980      	ldr	r1, [pc, #512]	@ (80042b0 <ParseBuffer+0x2a4>)
 80040b0:	2003      	movs	r0, #3
 80040b2:	f008 ff01 	bl	800ceb8 <CreateLine>
#endif
  char * ParsePoint = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	22ac      	movs	r2, #172	@ 0xac
 80040ba:	0052      	lsls	r2, r2, #1
 80040bc:	18b9      	adds	r1, r7, r2
 80040be:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80040c0:	4b7c      	ldr	r3, [pc, #496]	@ (80042b4 <ParseBuffer+0x2a8>)
 80040c2:	0025      	movs	r5, r4
 80040c4:	195b      	adds	r3, r3, r5
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	4a7b      	ldr	r2, [pc, #492]	@ (80042b8 <ParseBuffer+0x2ac>)
 80040ca:	8811      	ldrh	r1, [r2, #0]
 80040cc:	8019      	strh	r1, [r3, #0]
 80040ce:	7892      	ldrb	r2, [r2, #2]
 80040d0:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80040d2:	4b7a      	ldr	r3, [pc, #488]	@ (80042bc <ParseBuffer+0x2b0>)
 80040d4:	195b      	adds	r3, r3, r5
 80040d6:	19db      	adds	r3, r3, r7
 80040d8:	4a79      	ldr	r2, [pc, #484]	@ (80042c0 <ParseBuffer+0x2b4>)
 80040da:	6811      	ldr	r1, [r2, #0]
 80040dc:	6019      	str	r1, [r3, #0]
 80040de:	8892      	ldrh	r2, [r2, #4]
 80040e0:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 80040e2:	4b78      	ldr	r3, [pc, #480]	@ (80042c4 <ParseBuffer+0x2b8>)
 80040e4:	195b      	adds	r3, r3, r5
 80040e6:	19db      	adds	r3, r3, r7
 80040e8:	4a77      	ldr	r2, [pc, #476]	@ (80042c8 <ParseBuffer+0x2bc>)
 80040ea:	6811      	ldr	r1, [r2, #0]
 80040ec:	6019      	str	r1, [r3, #0]
 80040ee:	7912      	ldrb	r2, [r2, #4]
 80040f0:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 80040f2:	4b76      	ldr	r3, [pc, #472]	@ (80042cc <ParseBuffer+0x2c0>)
 80040f4:	195b      	adds	r3, r3, r5
 80040f6:	19db      	adds	r3, r3, r7
 80040f8:	4a75      	ldr	r2, [pc, #468]	@ (80042d0 <ParseBuffer+0x2c4>)
 80040fa:	6811      	ldr	r1, [r2, #0]
 80040fc:	6019      	str	r1, [r3, #0]
 80040fe:	8892      	ldrh	r2, [r2, #4]
 8004100:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8004102:	4b74      	ldr	r3, [pc, #464]	@ (80042d4 <ParseBuffer+0x2c8>)
 8004104:	195b      	adds	r3, r3, r5
 8004106:	19db      	adds	r3, r3, r7
 8004108:	223e      	movs	r2, #62	@ 0x3e
 800410a:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 800410c:	4b72      	ldr	r3, [pc, #456]	@ (80042d8 <ParseBuffer+0x2cc>)
 800410e:	195b      	adds	r3, r3, r5
 8004110:	19db      	adds	r3, r3, r7
 8004112:	4a72      	ldr	r2, [pc, #456]	@ (80042dc <ParseBuffer+0x2d0>)
 8004114:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004116:	c313      	stmia	r3!, {r0, r1, r4}
 8004118:	8811      	ldrh	r1, [r2, #0]
 800411a:	8019      	strh	r1, [r3, #0]
 800411c:	7892      	ldrb	r2, [r2, #2]
 800411e:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8004120:	4b6f      	ldr	r3, [pc, #444]	@ (80042e0 <ParseBuffer+0x2d4>)
 8004122:	195b      	adds	r3, r3, r5
 8004124:	19db      	adds	r3, r3, r7
 8004126:	4a6f      	ldr	r2, [pc, #444]	@ (80042e4 <ParseBuffer+0x2d8>)
 8004128:	ca13      	ldmia	r2!, {r0, r1, r4}
 800412a:	c313      	stmia	r3!, {r0, r1, r4}
 800412c:	8812      	ldrh	r2, [r2, #0]
 800412e:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8004130:	4b5c      	ldr	r3, [pc, #368]	@ (80042a4 <ParseBuffer+0x298>)
 8004132:	195b      	adds	r3, r3, r5
 8004134:	19db      	adds	r3, r3, r7
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 800413c:	2344      	movs	r3, #68	@ 0x44
 800413e:	18fa      	adds	r2, r7, r3
 8004140:	19bb      	adds	r3, r7, r6
 8004142:	0011      	movs	r1, r2
 8004144:	0018      	movs	r0, r3
 8004146:	f01a fb24 	bl	801e792 <strstr>
 800414a:	0003      	movs	r3, r0
 800414c:	22ac      	movs	r2, #172	@ 0xac
 800414e:	0052      	lsls	r2, r2, #1
 8004150:	18ba      	adds	r2, r7, r2
 8004152:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004154:	4b53      	ldr	r3, [pc, #332]	@ (80042a4 <ParseBuffer+0x298>)
 8004156:	22b0      	movs	r2, #176	@ 0xb0
 8004158:	0052      	lsls	r2, r2, #1
 800415a:	189b      	adds	r3, r3, r2
 800415c:	19db      	adds	r3, r3, r7
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10c      	bne.n	800417e <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004164:	232c      	movs	r3, #44	@ 0x2c
 8004166:	18fa      	adds	r2, r7, r3
 8004168:	2348      	movs	r3, #72	@ 0x48
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	0011      	movs	r1, r2
 800416e:	0018      	movs	r0, r3
 8004170:	f01a fb0f 	bl	801e792 <strstr>
 8004174:	0003      	movs	r3, r0
 8004176:	22ac      	movs	r2, #172	@ 0xac
 8004178:	0052      	lsls	r2, r2, #1
 800417a:	18ba      	adds	r2, r7, r2
 800417c:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800417e:	4b49      	ldr	r3, [pc, #292]	@ (80042a4 <ParseBuffer+0x298>)
 8004180:	22b0      	movs	r2, #176	@ 0xb0
 8004182:	0052      	lsls	r2, r2, #1
 8004184:	189b      	adds	r3, r3, r2
 8004186:	19db      	adds	r3, r3, r7
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d10c      	bne.n	80041a8 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800418e:	2328      	movs	r3, #40	@ 0x28
 8004190:	18fa      	adds	r2, r7, r3
 8004192:	2348      	movs	r3, #72	@ 0x48
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	0011      	movs	r1, r2
 8004198:	0018      	movs	r0, r3
 800419a:	f01a fafa 	bl	801e792 <strstr>
 800419e:	0003      	movs	r3, r0
 80041a0:	22ac      	movs	r2, #172	@ 0xac
 80041a2:	0052      	lsls	r2, r2, #1
 80041a4:	18ba      	adds	r2, r7, r2
 80041a6:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80041a8:	4b3e      	ldr	r3, [pc, #248]	@ (80042a4 <ParseBuffer+0x298>)
 80041aa:	22b0      	movs	r2, #176	@ 0xb0
 80041ac:	0052      	lsls	r2, r2, #1
 80041ae:	189b      	adds	r3, r3, r2
 80041b0:	19db      	adds	r3, r3, r7
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d10c      	bne.n	80041d2 <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80041b8:	2308      	movs	r3, #8
 80041ba:	18fa      	adds	r2, r7, r3
 80041bc:	2348      	movs	r3, #72	@ 0x48
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f01a fae5 	bl	801e792 <strstr>
 80041c8:	0003      	movs	r3, r0
 80041ca:	22ac      	movs	r2, #172	@ 0xac
 80041cc:	0052      	lsls	r2, r2, #1
 80041ce:	18ba      	adds	r2, r7, r2
 80041d0:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80041d2:	233c      	movs	r3, #60	@ 0x3c
 80041d4:	18fa      	adds	r2, r7, r3
 80041d6:	2448      	movs	r4, #72	@ 0x48
 80041d8:	193b      	adds	r3, r7, r4
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f01a fad8 	bl	801e792 <strstr>
 80041e2:	0003      	movs	r3, r0
 80041e4:	22aa      	movs	r2, #170	@ 0xaa
 80041e6:	0052      	lsls	r2, r2, #1
 80041e8:	18ba      	adds	r2, r7, r2
 80041ea:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80041ec:	2318      	movs	r3, #24
 80041ee:	18fa      	adds	r2, r7, r3
 80041f0:	193b      	adds	r3, r7, r4
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f01a facc 	bl	801e792 <strstr>
 80041fa:	0003      	movs	r3, r0
 80041fc:	22a8      	movs	r2, #168	@ 0xa8
 80041fe:	0052      	lsls	r2, r2, #1
 8004200:	18ba      	adds	r2, r7, r2
 8004202:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004204:	4a38      	ldr	r2, [pc, #224]	@ (80042e8 <ParseBuffer+0x2dc>)
 8004206:	193b      	adds	r3, r7, r4
 8004208:	0011      	movs	r1, r2
 800420a:	0018      	movs	r0, r3
 800420c:	f01a fac1 	bl	801e792 <strstr>
 8004210:	0003      	movs	r3, r0
 8004212:	22a6      	movs	r2, #166	@ 0xa6
 8004214:	0052      	lsls	r2, r2, #1
 8004216:	18ba      	adds	r2, r7, r2
 8004218:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 800421a:	2334      	movs	r3, #52	@ 0x34
 800421c:	18fa      	adds	r2, r7, r3
 800421e:	193b      	adds	r3, r7, r4
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f01a fab5 	bl	801e792 <strstr>
 8004228:	0003      	movs	r3, r0
 800422a:	22a4      	movs	r2, #164	@ 0xa4
 800422c:	0052      	lsls	r2, r2, #1
 800422e:	18ba      	adds	r2, r7, r2
 8004230:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 8004232:	4b1b      	ldr	r3, [pc, #108]	@ (80042a0 <ParseBuffer+0x294>)
 8004234:	21b0      	movs	r1, #176	@ 0xb0
 8004236:	0049      	lsls	r1, r1, #1
 8004238:	185b      	adds	r3, r3, r1
 800423a:	19db      	adds	r3, r3, r7
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d800      	bhi.n	8004244 <ParseBuffer+0x238>
 8004242:	e0c0      	b.n	80043c6 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004244:	22ac      	movs	r2, #172	@ 0xac
 8004246:	0052      	lsls	r2, r2, #1
 8004248:	18bb      	adds	r3, r7, r2
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d053      	beq.n	80042f8 <ParseBuffer+0x2ec>
 8004250:	18bb      	adds	r3, r7, r2
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b4f      	cmp	r3, #79	@ 0x4f
 8004258:	d14e      	bne.n	80042f8 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 800425a:	2360      	movs	r3, #96	@ 0x60
 800425c:	33ff      	adds	r3, #255	@ 0xff
 800425e:	18fb      	adds	r3, r7, r3
 8004260:	2200      	movs	r2, #0
 8004262:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004264:	4b21      	ldr	r3, [pc, #132]	@ (80042ec <ParseBuffer+0x2e0>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b12      	cmp	r3, #18
 800426a:	d145      	bne.n	80042f8 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <ParseBuffer+0x294>)
 800426e:	185b      	adds	r3, r3, r1
 8004270:	19db      	adds	r3, r3, r7
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	2b2b      	cmp	r3, #43	@ 0x2b
 8004276:	d10b      	bne.n	8004290 <ParseBuffer+0x284>
 8004278:	4b0b      	ldr	r3, [pc, #44]	@ (80042a8 <ParseBuffer+0x29c>)
 800427a:	185b      	adds	r3, r3, r1
 800427c:	19db      	adds	r3, r3, r7
 800427e:	2221      	movs	r2, #33	@ 0x21
 8004280:	5c9b      	ldrb	r3, [r3, r2]
 8004282:	2b32      	cmp	r3, #50	@ 0x32
 8004284:	d104      	bne.n	8004290 <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004286:	193b      	adds	r3, r7, r4
 8004288:	0018      	movs	r0, r3
 800428a:	f002 f89f 	bl	80063cc <ParseTime>
 800428e:	e033      	b.n	80042f8 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 8004290:	4a17      	ldr	r2, [pc, #92]	@ (80042f0 <ParseBuffer+0x2e4>)
 8004292:	4b18      	ldr	r3, [pc, #96]	@ (80042f4 <ParseBuffer+0x2e8>)
 8004294:	0019      	movs	r1, r3
 8004296:	2001      	movs	r0, #1
 8004298:	f008 fe0e 	bl	800ceb8 <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 800429c:	2306      	movs	r3, #6
 800429e:	e096      	b.n	80043ce <ParseBuffer+0x3c2>
 80042a0:	fffffea2 	.word	0xfffffea2
 80042a4:	fffffea1 	.word	0xfffffea1
 80042a8:	fffffee8 	.word	0xfffffee8
 80042ac:	08021a54 	.word	0x08021a54
 80042b0:	08021680 	.word	0x08021680
 80042b4:	fffffee4 	.word	0xfffffee4
 80042b8:	08021a80 	.word	0x08021a80
 80042bc:	fffffedc 	.word	0xfffffedc
 80042c0:	08021a84 	.word	0x08021a84
 80042c4:	fffffed4 	.word	0xfffffed4
 80042c8:	08021a8c 	.word	0x08021a8c
 80042cc:	fffffecc 	.word	0xfffffecc
 80042d0:	08021a94 	.word	0x08021a94
 80042d4:	fffffec8 	.word	0xfffffec8
 80042d8:	fffffeb8 	.word	0xfffffeb8
 80042dc:	08021a9c 	.word	0x08021a9c
 80042e0:	fffffea8 	.word	0xfffffea8
 80042e4:	08021aac 	.word	0x08021aac
 80042e8:	08023000 	.word	0x08023000
 80042ec:	200009a2 	.word	0x200009a2
 80042f0:	08021a6c 	.word	0x08021a6c
 80042f4:	080216a4 	.word	0x080216a4
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80042f8:	22ac      	movs	r2, #172	@ 0xac
 80042fa:	0052      	lsls	r2, r2, #1
 80042fc:	18bb      	adds	r3, r7, r2
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <ParseBuffer+0x30c>
 8004304:	18bb      	adds	r3, r7, r2
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b72      	cmp	r3, #114	@ 0x72
 800430c:	d104      	bne.n	8004318 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800430e:	2360      	movs	r3, #96	@ 0x60
 8004310:	33ff      	adds	r3, #255	@ 0xff
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2202      	movs	r2, #2
 8004316:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004318:	22ac      	movs	r2, #172	@ 0xac
 800431a:	0052      	lsls	r2, r2, #1
 800431c:	18bb      	adds	r3, r7, r2
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d009      	beq.n	8004338 <ParseBuffer+0x32c>
 8004324:	18bb      	adds	r3, r7, r2
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b3e      	cmp	r3, #62	@ 0x3e
 800432c:	d104      	bne.n	8004338 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800432e:	2360      	movs	r3, #96	@ 0x60
 8004330:	33ff      	adds	r3, #255	@ 0xff
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	2205      	movs	r2, #5
 8004336:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004338:	22ac      	movs	r2, #172	@ 0xac
 800433a:	0052      	lsls	r2, r2, #1
 800433c:	18bb      	adds	r3, r7, r2
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <ParseBuffer+0x34c>
 8004344:	18bb      	adds	r3, r7, r2
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b2b      	cmp	r3, #43	@ 0x2b
 800434c:	d104      	bne.n	8004358 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800434e:	2360      	movs	r3, #96	@ 0x60
 8004350:	33ff      	adds	r3, #255	@ 0xff
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	220b      	movs	r2, #11
 8004356:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004358:	22aa      	movs	r2, #170	@ 0xaa
 800435a:	0052      	lsls	r2, r2, #1
 800435c:	18bb      	adds	r3, r7, r2
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <ParseBuffer+0x362>
 8004364:	18bb      	adds	r3, r7, r2
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b45      	cmp	r3, #69	@ 0x45
 800436c:	d00a      	beq.n	8004384 <ParseBuffer+0x378>
 800436e:	22a4      	movs	r2, #164	@ 0xa4
 8004370:	0052      	lsls	r2, r2, #1
 8004372:	18bb      	adds	r3, r7, r2
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d009      	beq.n	800438e <ParseBuffer+0x382>
 800437a:	18bb      	adds	r3, r7, r2
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b46      	cmp	r3, #70	@ 0x46
 8004382:	d104      	bne.n	800438e <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 8004384:	2360      	movs	r3, #96	@ 0x60
 8004386:	33ff      	adds	r3, #255	@ 0xff
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 800438e:	22a8      	movs	r2, #168	@ 0xa8
 8004390:	0052      	lsls	r2, r2, #1
 8004392:	18bb      	adds	r3, r7, r2
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <ParseBuffer+0x39e>
 800439a:	18bb      	adds	r3, r7, r2
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b57      	cmp	r3, #87	@ 0x57
 80043a2:	d102      	bne.n	80043aa <ParseBuffer+0x39e>
      ConnectionMade = true;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	@ (80043d8 <ParseBuffer+0x3cc>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80043aa:	22a6      	movs	r2, #166	@ 0xa6
 80043ac:	0052      	lsls	r2, r2, #1
 80043ae:	18bb      	adds	r3, r7, r2
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d007      	beq.n	80043c6 <ParseBuffer+0x3ba>
 80043b6:	18bb      	adds	r3, r7, r2
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b32      	cmp	r3, #50	@ 0x32
 80043be:	d102      	bne.n	80043c6 <ParseBuffer+0x3ba>
      beurs = true;
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <ParseBuffer+0x3d0>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80043c6:	2360      	movs	r3, #96	@ 0x60
 80043c8:	33ff      	adds	r3, #255	@ 0xff
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	781b      	ldrb	r3, [r3, #0]

}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b059      	add	sp, #356	@ 0x164
 80043d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	20000550 	.word	0x20000550
 80043dc:	20000552 	.word	0x20000552

080043e0 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80043e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <PollAwake+0x34>)
 80043e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f7fb febd 	bl	800016c <strlen>
 80043f2:	0003      	movs	r3, r0
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7ff fb02 	bl	8003a04 <ESP_Send>
 8004400:	1e03      	subs	r3, r0, #0
 8004402:	d001      	beq.n	8004408 <PollAwake+0x28>
    return true;
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <PollAwake+0x2a>
  }
  else{
    return false;
 8004408:	2300      	movs	r3, #0
  }
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b002      	add	sp, #8
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	08021abc 	.word	0x08021abc

08004418 <RFPower>:
bool RFPower(){
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800441e:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <RFPower+0x34>)
 8004420:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0018      	movs	r0, r3
 8004426:	f7fb fea1 	bl	800016c <strlen>
 800442a:	0003      	movs	r3, r0
 800442c:	b29a      	uxth	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0011      	movs	r1, r2
 8004432:	0018      	movs	r0, r3
 8004434:	f7ff fae6 	bl	8003a04 <ESP_Send>
 8004438:	1e03      	subs	r3, r0, #0
 800443a:	d001      	beq.n	8004440 <RFPower+0x28>
    return true;
 800443c:	2301      	movs	r3, #1
 800443e:	e000      	b.n	8004442 <RFPower+0x2a>
  }
  else{
    return false;
 8004440:	2300      	movs	r3, #0
  }
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b002      	add	sp, #8
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	08021ac4 	.word	0x08021ac4

08004450 <CheckRFPower>:
bool CheckRFPower(){
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <CheckRFPower+0x34>)
 8004458:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0018      	movs	r0, r3
 800445e:	f7fb fe85 	bl	800016c <strlen>
 8004462:	0003      	movs	r3, r0
 8004464:	b29a      	uxth	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	0011      	movs	r1, r2
 800446a:	0018      	movs	r0, r3
 800446c:	f7ff faca 	bl	8003a04 <ESP_Send>
 8004470:	1e03      	subs	r3, r0, #0
 8004472:	d001      	beq.n	8004478 <CheckRFPower+0x28>
    return true;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004478:	2300      	movs	r3, #0
  }
}
 800447a:	0018      	movs	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	b002      	add	sp, #8
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	08021ad4 	.word	0x08021ad4

08004488 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <ATRestore+0x34>)
 8004490:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0018      	movs	r0, r3
 8004496:	f7fb fe69 	bl	800016c <strlen>
 800449a:	0003      	movs	r3, r0
 800449c:	b29a      	uxth	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0011      	movs	r1, r2
 80044a2:	0018      	movs	r0, r3
 80044a4:	f7ff faae 	bl	8003a04 <ESP_Send>
 80044a8:	1e03      	subs	r3, r0, #0
 80044aa:	d001      	beq.n	80044b0 <ATRestore+0x28>
    return true;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <ATRestore+0x2a>
  }
  else{
    return false;
 80044b0:	2300      	movs	r3, #0
  }
}
 80044b2:	0018      	movs	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b002      	add	sp, #8
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	08021ae4 	.word	0x08021ae4

080044c0 <CWINIT>:
bool CWINIT(){
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80044c6:	4b0b      	ldr	r3, [pc, #44]	@ (80044f4 <CWINIT+0x34>)
 80044c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f7fb fe4d 	bl	800016c <strlen>
 80044d2:	0003      	movs	r3, r0
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f7ff fa92 	bl	8003a04 <ESP_Send>
 80044e0:	1e03      	subs	r3, r0, #0
 80044e2:	d001      	beq.n	80044e8 <CWINIT+0x28>
    return true;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <CWINIT+0x2a>
  }
  else{
    return false;
 80044e8:	2300      	movs	r3, #0
  }
}
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b002      	add	sp, #8
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	46c0      	nop			@ (mov r8, r8)
 80044f4:	08021af4 	.word	0x08021af4

080044f8 <CWMODE1>:
bool CWMODE1(){
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80044fe:	4b0b      	ldr	r3, [pc, #44]	@ (800452c <CWMODE1+0x34>)
 8004500:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fb fe31 	bl	800016c <strlen>
 800450a:	0003      	movs	r3, r0
 800450c:	b29a      	uxth	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0011      	movs	r1, r2
 8004512:	0018      	movs	r0, r3
 8004514:	f7ff fa76 	bl	8003a04 <ESP_Send>
 8004518:	1e03      	subs	r3, r0, #0
 800451a:	d001      	beq.n	8004520 <CWMODE1+0x28>
    return true;
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <CWMODE1+0x2a>
  }
  else{
    return false;
 8004520:	2300      	movs	r3, #0
  }
}
 8004522:	0018      	movs	r0, r3
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}
 800452a:	46c0      	nop			@ (mov r8, r8)
 800452c:	08021b04 	.word	0x08021b04

08004530 <CWMODE2>:
bool CWMODE2(){
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004536:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <CWMODE2+0x34>)
 8004538:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f7fb fe15 	bl	800016c <strlen>
 8004542:	0003      	movs	r3, r0
 8004544:	b29a      	uxth	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0011      	movs	r1, r2
 800454a:	0018      	movs	r0, r3
 800454c:	f7ff fa5a 	bl	8003a04 <ESP_Send>
 8004550:	1e03      	subs	r3, r0, #0
 8004552:	d001      	beq.n	8004558 <CWMODE2+0x28>
    return true;
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <CWMODE2+0x2a>
  }
  else{
    return false;
 8004558:	2300      	movs	r3, #0
  }
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b002      	add	sp, #8
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	08021b14 	.word	0x08021b14

08004568 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800456e:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <CWAUTOCONN+0x34>)
 8004570:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f7fb fdf9 	bl	800016c <strlen>
 800457a:	0003      	movs	r3, r0
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0011      	movs	r1, r2
 8004582:	0018      	movs	r0, r3
 8004584:	f7ff fa3e 	bl	8003a04 <ESP_Send>
 8004588:	1e03      	subs	r3, r0, #0
 800458a:	d001      	beq.n	8004590 <CWAUTOCONN+0x28>
    return true;
 800458c:	2301      	movs	r3, #1
 800458e:	e000      	b.n	8004592 <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004590:	2300      	movs	r3, #0
  }
}
 8004592:	0018      	movs	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	b002      	add	sp, #8
 8004598:	bd80      	pop	{r7, pc}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	08021b24 	.word	0x08021b24

080045a0 <CWJAP>:
bool CWJAP(){
 80045a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a2:	46c6      	mov	lr, r8
 80045a4:	b500      	push	{lr}
 80045a6:	b0a2      	sub	sp, #136	@ 0x88
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	466b      	mov	r3, sp
 80045ac:	4698      	mov	r8, r3
  beursTest = true;
 80045ae:	4b39      	ldr	r3, [pc, #228]	@ (8004694 <CWJAP+0xf4>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80045b4:	2618      	movs	r6, #24
 80045b6:	19bb      	adds	r3, r7, r6
 80045b8:	2264      	movs	r2, #100	@ 0x64
 80045ba:	2100      	movs	r1, #0
 80045bc:	0018      	movs	r0, r3
 80045be:	f01a f8ad 	bl	801e71c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80045c2:	4b35      	ldr	r3, [pc, #212]	@ (8004698 <CWJAP+0xf8>)
 80045c4:	4a35      	ldr	r2, [pc, #212]	@ (800469c <CWJAP+0xfc>)
 80045c6:	4936      	ldr	r1, [pc, #216]	@ (80046a0 <CWJAP+0x100>)
 80045c8:	19b8      	adds	r0, r7, r6
 80045ca:	f019 ff63 	bl	801e494 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80045ce:	19bb      	adds	r3, r7, r6
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7fb fdcb 	bl	800016c <strlen>
 80045d6:	0002      	movs	r2, r0
 80045d8:	216f      	movs	r1, #111	@ 0x6f
 80045da:	0030      	movs	r0, r6
 80045dc:	180b      	adds	r3, r1, r0
 80045de:	19db      	adds	r3, r3, r7
 80045e0:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80045e2:	180b      	adds	r3, r1, r0
 80045e4:	19db      	adds	r3, r3, r7
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	3301      	adds	r3, #1
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	2180      	movs	r1, #128	@ 0x80
 80045ee:	1879      	adds	r1, r7, r1
 80045f0:	600a      	str	r2, [r1, #0]
 80045f2:	001a      	movs	r2, r3
 80045f4:	60ba      	str	r2, [r7, #8]
 80045f6:	2200      	movs	r2, #0
 80045f8:	60fa      	str	r2, [r7, #12]
 80045fa:	68b8      	ldr	r0, [r7, #8]
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	0002      	movs	r2, r0
 8004600:	0f52      	lsrs	r2, r2, #29
 8004602:	000e      	movs	r6, r1
 8004604:	00f6      	lsls	r6, r6, #3
 8004606:	617e      	str	r6, [r7, #20]
 8004608:	697e      	ldr	r6, [r7, #20]
 800460a:	4316      	orrs	r6, r2
 800460c:	617e      	str	r6, [r7, #20]
 800460e:	0002      	movs	r2, r0
 8004610:	00d2      	lsls	r2, r2, #3
 8004612:	613a      	str	r2, [r7, #16]
 8004614:	001a      	movs	r2, r3
 8004616:	603a      	str	r2, [r7, #0]
 8004618:	2200      	movs	r2, #0
 800461a:	607a      	str	r2, [r7, #4]
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	0002      	movs	r2, r0
 8004622:	0f52      	lsrs	r2, r2, #29
 8004624:	000e      	movs	r6, r1
 8004626:	00f5      	lsls	r5, r6, #3
 8004628:	4315      	orrs	r5, r2
 800462a:	0002      	movs	r2, r0
 800462c:	00d4      	lsls	r4, r2, #3
 800462e:	3307      	adds	r3, #7
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	466a      	mov	r2, sp
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	469d      	mov	sp, r3
 800463a:	466b      	mov	r3, sp
 800463c:	3300      	adds	r3, #0
 800463e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004640:	246f      	movs	r4, #111	@ 0x6f
 8004642:	2518      	movs	r5, #24
 8004644:	1963      	adds	r3, r4, r5
 8004646:	19db      	adds	r3, r3, r7
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	001a      	movs	r2, r3
 800464e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004650:	2100      	movs	r1, #0
 8004652:	0018      	movs	r0, r3
 8004654:	f01a f862 	bl	801e71c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004658:	1963      	adds	r3, r4, r5
 800465a:	19db      	adds	r3, r3, r7
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	1979      	adds	r1, r7, r5
 8004660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004662:	0018      	movs	r0, r3
 8004664:	f01a f881 	bl	801e76a <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004668:	1963      	adds	r3, r4, r5
 800466a:	19db      	adds	r3, r3, r7
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	b29a      	uxth	r2, r3
 8004670:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004672:	0011      	movs	r1, r2
 8004674:	0018      	movs	r0, r3
 8004676:	f7ff f9c5 	bl	8003a04 <ESP_Send>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d001      	beq.n	8004682 <CWJAP+0xe2>
    return true;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <CWJAP+0xe4>
  }
  else{
    return false;
 8004682:	2300      	movs	r3, #0
 8004684:	46c5      	mov	sp, r8
  }
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b022      	add	sp, #136	@ 0x88
 800468c:	bc80      	pop	{r7}
 800468e:	46b8      	mov	r8, r7
 8004690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	20000551 	.word	0x20000551
 8004698:	0802300c 	.word	0x0802300c
 800469c:	08023000 	.word	0x08023000
 80046a0:	08021b38 	.word	0x08021b38

080046a4 <CWMODE3>:
bool CWMODE3(){
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80046aa:	4b0b      	ldr	r3, [pc, #44]	@ (80046d8 <CWMODE3+0x34>)
 80046ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fb fd5b 	bl	800016c <strlen>
 80046b6:	0003      	movs	r3, r0
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0011      	movs	r1, r2
 80046be:	0018      	movs	r0, r3
 80046c0:	f7ff f9a0 	bl	8003a04 <ESP_Send>
 80046c4:	1e03      	subs	r3, r0, #0
 80046c6:	d001      	beq.n	80046cc <CWMODE3+0x28>
    return true;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <CWMODE3+0x2a>
  }
  else{
    return false;
 80046cc:	2300      	movs	r3, #0
  }
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	46c0      	nop			@ (mov r8, r8)
 80046d8:	08021b50 	.word	0x08021b50

080046dc <CWSTATE>:
bool CWSTATE(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80046e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <CWSTATE+0x34>)
 80046e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7fb fd3f 	bl	800016c <strlen>
 80046ee:	0003      	movs	r3, r0
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	0011      	movs	r1, r2
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff f984 	bl	8003a04 <ESP_Send>
 80046fc:	1e03      	subs	r3, r0, #0
 80046fe:	d001      	beq.n	8004704 <CWSTATE+0x28>
    return true;
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004704:	2300      	movs	r3, #0
  }
}
 8004706:	0018      	movs	r0, r3
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}
 800470e:	46c0      	nop			@ (mov r8, r8)
 8004710:	08021b60 	.word	0x08021b60

08004714 <CWSAP>:
bool CWSAP(){
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 800471a:	4b0b      	ldr	r3, [pc, #44]	@ (8004748 <CWSAP+0x34>)
 800471c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f7fb fd23 	bl	800016c <strlen>
 8004726:	0003      	movs	r3, r0
 8004728:	b29a      	uxth	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff f968 	bl	8003a04 <ESP_Send>
 8004734:	1e03      	subs	r3, r0, #0
 8004736:	d001      	beq.n	800473c <CWSAP+0x28>
    return true;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <CWSAP+0x2a>
  }
  else{
    return false;
 800473c:	2300      	movs	r3, #0
  }
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b002      	add	sp, #8
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			@ (mov r8, r8)
 8004748:	08021b70 	.word	0x08021b70

0800474c <CIPMUX>:
bool CIPMUX(){
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <CIPMUX+0x34>)
 8004754:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0018      	movs	r0, r3
 800475a:	f7fb fd07 	bl	800016c <strlen>
 800475e:	0003      	movs	r3, r0
 8004760:	b29a      	uxth	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0011      	movs	r1, r2
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff f94c 	bl	8003a04 <ESP_Send>
 800476c:	1e03      	subs	r3, r0, #0
 800476e:	d001      	beq.n	8004774 <CIPMUX+0x28>
    return true;
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <CIPMUX+0x2a>
  }
  else{
    return false;
 8004774:	2300      	movs	r3, #0
  }
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b002      	add	sp, #8
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			@ (mov r8, r8)
 8004780:	08021b94 	.word	0x08021b94

08004784 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800478a:	4b0b      	ldr	r3, [pc, #44]	@ (80047b8 <WEBSERVER+0x34>)
 800478c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0018      	movs	r0, r3
 8004792:	f7fb fceb 	bl	800016c <strlen>
 8004796:	0003      	movs	r3, r0
 8004798:	b29a      	uxth	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0011      	movs	r1, r2
 800479e:	0018      	movs	r0, r3
 80047a0:	f7ff f930 	bl	8003a04 <ESP_Send>
 80047a4:	1e03      	subs	r3, r0, #0
 80047a6:	d001      	beq.n	80047ac <WEBSERVER+0x28>
    return true;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <WEBSERVER+0x2a>
  }
  else{
    return false;
 80047ac:	2300      	movs	r3, #0
  }
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	08021ba4 	.word	0x08021ba4

080047bc <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b0c5      	sub	sp, #276	@ 0x114
 80047c0:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	005a      	lsls	r2, r3, #1
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	2100      	movs	r1, #0
 80047ca:	0018      	movs	r0, r3
 80047cc:	f019 ffa6 	bl	801e71c <memset>
  uint16_t length = CreateMessage(beurs);
 80047d0:	4b22      	ldr	r3, [pc, #136]	@ (800485c <HTTPCPOST+0xa0>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	1dfc      	adds	r4, r7, #7
 80047d6:	34ff      	adds	r4, #255	@ 0xff
 80047d8:	0018      	movs	r0, r3
 80047da:	f7ff f9bd 	bl	8003b58 <CreateMessage>
 80047de:	0003      	movs	r3, r0
 80047e0:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <HTTPCPOST+0xa0>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80047ea:	1dfb      	adds	r3, r7, #7
 80047ec:	33ff      	adds	r3, #255	@ 0xff
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004860 <HTTPCPOST+0xa4>)
 80047f2:	491c      	ldr	r1, [pc, #112]	@ (8004864 <HTTPCPOST+0xa8>)
 80047f4:	1d38      	adds	r0, r7, #4
 80047f6:	f019 fe4d 	bl	801e494 <siprintf>
 80047fa:	e016      	b.n	800482a <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80047fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <HTTPCPOST+0xac>)
 80047fe:	481b      	ldr	r0, [pc, #108]	@ (800486c <HTTPCPOST+0xb0>)
 8004800:	220c      	movs	r2, #12
 8004802:	0019      	movs	r1, r3
 8004804:	f7fe ff78 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004808:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <HTTPCPOST+0xac>)
 800480a:	4b19      	ldr	r3, [pc, #100]	@ (8004870 <HTTPCPOST+0xb4>)
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f97e 	bl	8003b10 <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004814:	1dfb      	adds	r3, r7, #7
 8004816:	33ff      	adds	r3, #255	@ 0xff
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	4c15      	ldr	r4, [pc, #84]	@ (8004870 <HTTPCPOST+0xb4>)
 800481c:	4a15      	ldr	r2, [pc, #84]	@ (8004874 <HTTPCPOST+0xb8>)
 800481e:	4916      	ldr	r1, [pc, #88]	@ (8004878 <HTTPCPOST+0xbc>)
 8004820:	1d38      	adds	r0, r7, #4
 8004822:	9300      	str	r3, [sp, #0]
 8004824:	0023      	movs	r3, r4
 8004826:	f019 fe35 	bl	801e494 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	0018      	movs	r0, r3
 800482e:	f7fb fc9d 	bl	800016c <strlen>
 8004832:	0002      	movs	r2, r0
 8004834:	1d7b      	adds	r3, r7, #5
 8004836:	33ff      	adds	r3, #255	@ 0xff
 8004838:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 800483a:	1d7b      	adds	r3, r7, #5
 800483c:	33ff      	adds	r3, #255	@ 0xff
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	1d3b      	adds	r3, r7, #4
 8004842:	0011      	movs	r1, r2
 8004844:	0018      	movs	r0, r3
 8004846:	f7ff f8dd 	bl	8003a04 <ESP_Send>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d001      	beq.n	8004852 <HTTPCPOST+0x96>
    return true;
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HTTPCPOST+0x98>
  }
  else{
    return false;
 8004852:	2300      	movs	r3, #0
  }
}
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b043      	add	sp, #268	@ 0x10c
 800485a:	bd90      	pop	{r4, r7, pc}
 800485c:	20000552 	.word	0x20000552
 8004860:	0802302c 	.word	0x0802302c
 8004864:	08021bbc 	.word	0x08021bbc
 8004868:	20000a80 	.word	0x20000a80
 800486c:	08080000 	.word	0x08080000
 8004870:	20000a8c 	.word	0x20000a8c
 8004874:	08023068 	.word	0x08023068
 8004878:	08021bf4 	.word	0x08021bf4

0800487c <SENDDATA>:
bool SENDDATA(){
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <SENDDATA+0x34>)
 8004884:	0018      	movs	r0, r3
 8004886:	f7fb fc71 	bl	800016c <strlen>
 800488a:	0002      	movs	r2, r0
 800488c:	1dbb      	adds	r3, r7, #6
 800488e:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004890:	1dbb      	adds	r3, r7, #6
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <SENDDATA+0x34>)
 8004896:	0011      	movs	r1, r2
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff f8b3 	bl	8003a04 <ESP_Send>
 800489e:	1e03      	subs	r3, r0, #0
 80048a0:	d001      	beq.n	80048a6 <SENDDATA+0x2a>
    return true;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <SENDDATA+0x2c>
  }
  else{
    return false;
 80048a6:	2300      	movs	r3, #0
  }
}
 80048a8:	0018      	movs	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000588 	.word	0x20000588

080048b4 <SLEEP>:
bool SLEEP(){
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80048ba:	4b0b      	ldr	r3, [pc, #44]	@ (80048e8 <SLEEP+0x34>)
 80048bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fb fc53 	bl	800016c <strlen>
 80048c6:	0003      	movs	r3, r0
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0011      	movs	r1, r2
 80048ce:	0018      	movs	r0, r3
 80048d0:	f7ff f898 	bl	8003a04 <ESP_Send>
 80048d4:	1e03      	subs	r3, r0, #0
 80048d6:	d001      	beq.n	80048dc <SLEEP+0x28>
    return true;
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <SLEEP+0x2a>
  }
  else{
    return false;
 80048dc:	2300      	movs	r3, #0
  }
}
 80048de:	0018      	movs	r0, r3
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b002      	add	sp, #8
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	46c0      	nop			@ (mov r8, r8)
 80048e8:	08021c34 	.word	0x08021c34

080048ec <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80048f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004928 <CIPSNTPCFG+0x3c>)
 80048f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f7fb fc37 	bl	800016c <strlen>
 80048fe:	0003      	movs	r3, r0
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f7ff f87c 	bl	8003a04 <ESP_Send>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d006      	beq.n	800491e <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 8004910:	23fa      	movs	r3, #250	@ 0xfa
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	0018      	movs	r0, r3
 8004916:	f008 fe77 	bl	800d608 <HAL_Delay>
    return true;
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800491e:	2300      	movs	r3, #0
  }
}
 8004920:	0018      	movs	r0, r3
 8004922:	46bd      	mov	sp, r7
 8004924:	b002      	add	sp, #8
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08021c44 	.word	0x08021c44

0800492c <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 8004932:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <CIPSNTPTIME+0x34>)
 8004934:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f7fb fc17 	bl	800016c <strlen>
 800493e:	0003      	movs	r3, r0
 8004940:	b29a      	uxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0011      	movs	r1, r2
 8004946:	0018      	movs	r0, r3
 8004948:	f7ff f85c 	bl	8003a04 <ESP_Send>
 800494c:	1e03      	subs	r3, r0, #0
 800494e:	d001      	beq.n	8004954 <CIPSNTPTIME+0x28>
    return true;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004954:	2300      	movs	r3, #0
  }
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b002      	add	sp, #8
 800495c:	bd80      	pop	{r7, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	08021c94 	.word	0x08021c94

08004964 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 800496a:	4b0b      	ldr	r3, [pc, #44]	@ (8004998 <CIPSNTPINTV+0x34>)
 800496c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0018      	movs	r0, r3
 8004972:	f7fb fbfb 	bl	800016c <strlen>
 8004976:	0003      	movs	r3, r0
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	0011      	movs	r1, r2
 800497e:	0018      	movs	r0, r3
 8004980:	f7ff f840 	bl	8003a04 <ESP_Send>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d001      	beq.n	800498c <CIPSNTPINTV+0x28>
    return true;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 800498c:	2300      	movs	r3, #0
  }
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b002      	add	sp, #8
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			@ (mov r8, r8)
 8004998:	08021ca8 	.word	0x08021ca8

0800499c <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 800499c:	b5b0      	push	{r4, r5, r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	0002      	movs	r2, r0
 80049a4:	1dfb      	adds	r3, r7, #7
 80049a6:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80049a8:	4b73      	ldr	r3, [pc, #460]	@ (8004b78 <DMA_ProcessBuffer+0x1dc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	200e      	movs	r0, #14
 80049b2:	183b      	adds	r3, r7, r0
 80049b4:	2180      	movs	r1, #128	@ 0x80
 80049b6:	0049      	lsls	r1, r1, #1
 80049b8:	1a8a      	subs	r2, r1, r2
 80049ba:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 80049bc:	230d      	movs	r3, #13
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	2203      	movs	r2, #3
 80049c2:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 80049c4:	183b      	adds	r3, r7, r0
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	2380      	movs	r3, #128	@ 0x80
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d903      	bls.n	80049d8 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 80049d0:	183b      	adds	r3, r7, r0
 80049d2:	2280      	movs	r2, #128	@ 0x80
 80049d4:	0052      	lsls	r2, r2, #1
 80049d6:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 80049d8:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	001a      	movs	r2, r3
 80049e0:	230e      	movs	r3, #14
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d131      	bne.n	8004a4e <DMA_ProcessBuffer+0xb2>
      if(retry > 30){
 80049ea:	4b65      	ldr	r3, [pc, #404]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b1e      	cmp	r3, #30
 80049f0:	d91b      	bls.n	8004a2a <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80049f2:	4b63      	ldr	r3, [pc, #396]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80049f8:	4b62      	ldr	r3, [pc, #392]	@ (8004b84 <DMA_ProcessBuffer+0x1e8>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <DMA_ProcessBuffer+0x74>
 8004a00:	4b61      	ldr	r3, [pc, #388]	@ (8004b88 <DMA_ProcessBuffer+0x1ec>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004a08:	230d      	movs	r3, #13
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004a10:	4b5c      	ldr	r3, [pc, #368]	@ (8004b84 <DMA_ProcessBuffer+0x1e8>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d103      	bne.n	8004a20 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004a18:	4b5c      	ldr	r3, [pc, #368]	@ (8004b8c <DMA_ProcessBuffer+0x1f0>)
 8004a1a:	220b      	movs	r2, #11
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e016      	b.n	8004a4e <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004a20:	230d      	movs	r3, #13
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	2206      	movs	r2, #6
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	e011      	b.n	8004a4e <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004a2a:	4b55      	ldr	r3, [pc, #340]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4b53      	ldr	r3, [pc, #332]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 8004a34:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004a36:	f008 fddd 	bl	800d5f4 <HAL_GetTick>
 8004a3a:	0003      	movs	r3, r0
 8004a3c:	33f5      	adds	r3, #245	@ 0xf5
 8004a3e:	33ff      	adds	r3, #255	@ 0xff
 8004a40:	001a      	movs	r2, r3
 8004a42:	4b53      	ldr	r3, [pc, #332]	@ (8004b90 <DMA_ProcessBuffer+0x1f4>)
 8004a44:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004a46:	230d      	movs	r3, #13
 8004a48:	18fb      	adds	r3, r7, r3
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	001a      	movs	r2, r3
 8004a56:	210e      	movs	r1, #14
 8004a58:	187b      	adds	r3, r7, r1
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <DMA_ProcessBuffer+0xc6>
 8004a60:	e082      	b.n	8004b68 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004a62:	4b47      	ldr	r3, [pc, #284]	@ (8004b80 <DMA_ProcessBuffer+0x1e4>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004a68:	4b4a      	ldr	r3, [pc, #296]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4b43      	ldr	r3, [pc, #268]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d109      	bne.n	8004a8c <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004a78:	187b      	adds	r3, r7, r1
 8004a7a:	881b      	ldrh	r3, [r3, #0]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b45      	ldr	r3, [pc, #276]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004a80:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004a82:	230d      	movs	r3, #13
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	220a      	movs	r2, #10
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e06d      	b.n	8004b68 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004a8c:	4b41      	ldr	r3, [pc, #260]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	001a      	movs	r2, r3
 8004a94:	210e      	movs	r1, #14
 8004a96:	187b      	adds	r3, r7, r1
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8004b94 <DMA_ProcessBuffer+0x1f8>)
 8004aa6:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004aa8:	230d      	movs	r3, #13
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	220a      	movs	r2, #10
 8004aae:	701a      	strb	r2, [r3, #0]
 8004ab0:	e05a      	b.n	8004b68 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004ab2:	4b32      	ldr	r3, [pc, #200]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	001a      	movs	r2, r3
 8004aba:	210e      	movs	r1, #14
 8004abc:	187b      	adds	r3, r7, r1
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d917      	bls.n	8004af4 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004ac4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	001a      	movs	r2, r3
 8004acc:	4b32      	ldr	r3, [pc, #200]	@ (8004b98 <DMA_ProcessBuffer+0x1fc>)
 8004ace:	18d0      	adds	r0, r2, r3
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	001a      	movs	r2, r3
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	b299      	uxth	r1, r3
 8004ae0:	230d      	movs	r3, #13
 8004ae2:	18fc      	adds	r4, r7, r3
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	001a      	movs	r2, r3
 8004aea:	f7ff fa8f 	bl	800400c <ParseBuffer>
 8004aee:	0003      	movs	r3, r0
 8004af0:	7023      	strb	r3, [r4, #0]
 8004af2:	e026      	b.n	8004b42 <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004af4:	4b21      	ldr	r3, [pc, #132]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	001a      	movs	r2, r3
 8004afc:	4b26      	ldr	r3, [pc, #152]	@ (8004b98 <DMA_ProcessBuffer+0x1fc>)
 8004afe:	18d0      	adds	r0, r2, r3
 8004b00:	4b1e      	ldr	r3, [pc, #120]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	001a      	movs	r2, r3
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	1a9b      	subs	r3, r3, r2
 8004b0e:	b299      	uxth	r1, r3
 8004b10:	250d      	movs	r5, #13
 8004b12:	197c      	adds	r4, r7, r5
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	001a      	movs	r2, r3
 8004b1a:	f7ff fa77 	bl	800400c <ParseBuffer>
 8004b1e:	0003      	movs	r3, r0
 8004b20:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004b22:	210e      	movs	r1, #14
 8004b24:	187b      	adds	r3, r7, r1
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004b2c:	197c      	adds	r4, r7, r5
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	781a      	ldrb	r2, [r3, #0]
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	8819      	ldrh	r1, [r3, #0]
 8004b36:	4b18      	ldr	r3, [pc, #96]	@ (8004b98 <DMA_ProcessBuffer+0x1fc>)
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fa67 	bl	800400c <ParseBuffer>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004b42:	4b0e      	ldr	r3, [pc, #56]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	0018      	movs	r0, r3
 8004b4a:	240e      	movs	r4, #14
 8004b4c:	193b      	adds	r3, r7, r4
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	4a12      	ldr	r2, [pc, #72]	@ (8004b9c <DMA_ProcessBuffer+0x200>)
 8004b52:	4913      	ldr	r1, [pc, #76]	@ (8004ba0 <DMA_ProcessBuffer+0x204>)
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	0003      	movs	r3, r0
 8004b58:	2003      	movs	r0, #3
 8004b5a:	f008 f9ad 	bl	800ceb8 <CreateLine>
          OldPos = pos;
 8004b5e:	193b      	adds	r3, r7, r4
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <DMA_ProcessBuffer+0x1e0>)
 8004b66:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004b68:	230d      	movs	r3, #13
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	781b      	ldrb	r3, [r3, #0]
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b004      	add	sp, #16
 8004b74:	bdb0      	pop	{r4, r5, r7, pc}
 8004b76:	46c0      	nop			@ (mov r8, r8)
 8004b78:	20002454 	.word	0x20002454
 8004b7c:	20000aa5 	.word	0x20000aa5
 8004b80:	200009a0 	.word	0x200009a0
 8004b84:	200009a2 	.word	0x200009a2
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	20000028 	.word	0x20000028
 8004b90:	20000994 	.word	0x20000994
 8004b94:	20000aa6 	.word	0x20000aa6
 8004b98:	2000044c 	.word	0x2000044c
 8004b9c:	08021cc0 	.word	0x08021cc0
 8004ba0:	08021680 	.word	0x08021680

08004ba4 <clearDMABuffer>:

void clearDMABuffer(){
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004ba8:	2380      	movs	r3, #128	@ 0x80
 8004baa:	005a      	lsls	r2, r3, #1
 8004bac:	4b03      	ldr	r3, [pc, #12]	@ (8004bbc <clearDMABuffer+0x18>)
 8004bae:	2100      	movs	r1, #0
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f019 fdb3 	bl	801e71c <memset>
}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	2000044c 	.word	0x2000044c

08004bc0 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	1dfb      	adds	r3, r7, #7
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	1dbb      	adds	r3, r7, #6
 8004bce:	1c0a      	adds	r2, r1, #0
 8004bd0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004bd2:	210f      	movs	r1, #15
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004bda:	1dbb      	adds	r3, r7, #6
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004be2:	187b      	adds	r3, r7, r1
 8004be4:	1dfa      	adds	r2, r7, #7
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	4251      	negs	r1, r2
 8004bea:	414a      	adcs	r2, r1
 8004bec:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004bee:	1dbb      	adds	r3, r7, #6
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004bf6:	230f      	movs	r3, #15
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	1dfa      	adds	r2, r7, #7
 8004bfc:	7812      	ldrb	r2, [r2, #0]
 8004bfe:	3a02      	subs	r2, #2
 8004c00:	4251      	negs	r1, r2
 8004c02:	414a      	adcs	r2, r1
 8004c04:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d107      	bne.n	8004c1e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004c0e:	230f      	movs	r3, #15
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	1dfa      	adds	r2, r7, #7
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	3a05      	subs	r2, #5
 8004c18:	4251      	negs	r1, r2
 8004c1a:	414a      	adcs	r2, r1
 8004c1c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004c1e:	1dbb      	adds	r3, r7, #6
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d107      	bne.n	8004c36 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004c26:	230f      	movs	r3, #15
 8004c28:	18fb      	adds	r3, r7, r3
 8004c2a:	1dfa      	adds	r2, r7, #7
 8004c2c:	7812      	ldrb	r2, [r2, #0]
 8004c2e:	3a0b      	subs	r2, #11
 8004c30:	4251      	negs	r1, r2
 8004c32:	414a      	adcs	r2, r1
 8004c34:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004c36:	230f      	movs	r3, #15
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
}
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	b004      	add	sp, #16
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	1dfb      	adds	r3, r7, #7
 8004c4e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004c50:	230f      	movs	r3, #15
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004c58:	1dfb      	adds	r3, r7, #7
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b13      	cmp	r3, #19
 8004c5e:	d900      	bls.n	8004c62 <AT_Send+0x1e>
 8004c60:	e18a      	b.n	8004f78 <AT_Send+0x334>
 8004c62:	009a      	lsls	r2, r3, #2
 8004c64:	4bc8      	ldr	r3, [pc, #800]	@ (8004f88 <AT_Send+0x344>)
 8004c66:	18d3      	adds	r3, r2, r3
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004c6c:	4bc7      	ldr	r3, [pc, #796]	@ (8004f8c <AT_Send+0x348>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f008 f8cb 	bl	800ce0c <TimestampIsReached>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d100      	bne.n	8004c7c <AT_Send+0x38>
 8004c7a:	e17c      	b.n	8004f76 <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	18fc      	adds	r4, r7, r3
 8004c80:	f7ff fbae 	bl	80043e0 <PollAwake>
 8004c84:	0003      	movs	r3, r0
 8004c86:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004c88:	f008 fcb4 	bl	800d5f4 <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	3332      	adds	r3, #50	@ 0x32
 8004c90:	001a      	movs	r2, r3
 8004c92:	4bbe      	ldr	r3, [pc, #760]	@ (8004f8c <AT_Send+0x348>)
 8004c94:	601a      	str	r2, [r3, #0]
  }
  break;
 8004c96:	e16e      	b.n	8004f76 <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004c98:	4abd      	ldr	r2, [pc, #756]	@ (8004f90 <AT_Send+0x34c>)
 8004c9a:	4bbe      	ldr	r3, [pc, #760]	@ (8004f94 <AT_Send+0x350>)
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	2003      	movs	r0, #3
 8004ca0:	f008 f90a 	bl	800ceb8 <CreateLine>
    ATCommandSend = RFPower();
 8004ca4:	230f      	movs	r3, #15
 8004ca6:	18fc      	adds	r4, r7, r3
 8004ca8:	f7ff fbb6 	bl	8004418 <RFPower>
 8004cac:	0003      	movs	r3, r0
 8004cae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cb0:	f008 fca0 	bl	800d5f4 <HAL_GetTick>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	330a      	adds	r3, #10
 8004cb8:	001a      	movs	r2, r3
 8004cba:	4bb4      	ldr	r3, [pc, #720]	@ (8004f8c <AT_Send+0x348>)
 8004cbc:	601a      	str	r2, [r3, #0]
    break;
 8004cbe:	e15b      	b.n	8004f78 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004cc0:	4ab5      	ldr	r2, [pc, #724]	@ (8004f98 <AT_Send+0x354>)
 8004cc2:	4bb4      	ldr	r3, [pc, #720]	@ (8004f94 <AT_Send+0x350>)
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	2003      	movs	r0, #3
 8004cc8:	f008 f8f6 	bl	800ceb8 <CreateLine>
    ATCommandSend = CheckRFPower();
 8004ccc:	230f      	movs	r3, #15
 8004cce:	18fc      	adds	r4, r7, r3
 8004cd0:	f7ff fbbe 	bl	8004450 <CheckRFPower>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cd8:	f008 fc8c 	bl	800d5f4 <HAL_GetTick>
 8004cdc:	0003      	movs	r3, r0
 8004cde:	330a      	adds	r3, #10
 8004ce0:	001a      	movs	r2, r3
 8004ce2:	4baa      	ldr	r3, [pc, #680]	@ (8004f8c <AT_Send+0x348>)
 8004ce4:	601a      	str	r2, [r3, #0]
    break;
 8004ce6:	e147      	b.n	8004f78 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004ce8:	4aac      	ldr	r2, [pc, #688]	@ (8004f9c <AT_Send+0x358>)
 8004cea:	4baa      	ldr	r3, [pc, #680]	@ (8004f94 <AT_Send+0x350>)
 8004cec:	0019      	movs	r1, r3
 8004cee:	2003      	movs	r0, #3
 8004cf0:	f008 f8e2 	bl	800ceb8 <CreateLine>
    ATCommandSend = ATRestore();
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	18fc      	adds	r4, r7, r3
 8004cf8:	f7ff fbc6 	bl	8004488 <ATRestore>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d00:	f008 fc78 	bl	800d5f4 <HAL_GetTick>
 8004d04:	0003      	movs	r3, r0
 8004d06:	3332      	adds	r3, #50	@ 0x32
 8004d08:	001a      	movs	r2, r3
 8004d0a:	4ba0      	ldr	r3, [pc, #640]	@ (8004f8c <AT_Send+0x348>)
 8004d0c:	601a      	str	r2, [r3, #0]
    break;
 8004d0e:	e133      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004d10:	4aa3      	ldr	r2, [pc, #652]	@ (8004fa0 <AT_Send+0x35c>)
 8004d12:	4ba0      	ldr	r3, [pc, #640]	@ (8004f94 <AT_Send+0x350>)
 8004d14:	0019      	movs	r1, r3
 8004d16:	2003      	movs	r0, #3
 8004d18:	f008 f8ce 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWINIT();
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fc      	adds	r4, r7, r3
 8004d20:	f7ff fbce 	bl	80044c0 <CWINIT>
 8004d24:	0003      	movs	r3, r0
 8004d26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d28:	f008 fc64 	bl	800d5f4 <HAL_GetTick>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	33f5      	adds	r3, #245	@ 0xf5
 8004d30:	33ff      	adds	r3, #255	@ 0xff
 8004d32:	001a      	movs	r2, r3
 8004d34:	4b95      	ldr	r3, [pc, #596]	@ (8004f8c <AT_Send+0x348>)
 8004d36:	601a      	str	r2, [r3, #0]
    break;
 8004d38:	e11e      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004d3a:	4a9a      	ldr	r2, [pc, #616]	@ (8004fa4 <AT_Send+0x360>)
 8004d3c:	4b95      	ldr	r3, [pc, #596]	@ (8004f94 <AT_Send+0x350>)
 8004d3e:	0019      	movs	r1, r3
 8004d40:	2003      	movs	r0, #3
 8004d42:	f008 f8b9 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWSTATE();
 8004d46:	230f      	movs	r3, #15
 8004d48:	18fc      	adds	r4, r7, r3
 8004d4a:	f7ff fcc7 	bl	80046dc <CWSTATE>
 8004d4e:	0003      	movs	r3, r0
 8004d50:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d52:	f008 fc4f 	bl	800d5f4 <HAL_GetTick>
 8004d56:	0003      	movs	r3, r0
 8004d58:	33f5      	adds	r3, #245	@ 0xf5
 8004d5a:	33ff      	adds	r3, #255	@ 0xff
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	@ (8004f8c <AT_Send+0x348>)
 8004d60:	601a      	str	r2, [r3, #0]
    break;
 8004d62:	e109      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004d64:	4a90      	ldr	r2, [pc, #576]	@ (8004fa8 <AT_Send+0x364>)
 8004d66:	4b8b      	ldr	r3, [pc, #556]	@ (8004f94 <AT_Send+0x350>)
 8004d68:	0019      	movs	r1, r3
 8004d6a:	2003      	movs	r0, #3
 8004d6c:	f008 f8a4 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWMODE1();
 8004d70:	230f      	movs	r3, #15
 8004d72:	18fc      	adds	r4, r7, r3
 8004d74:	f7ff fbc0 	bl	80044f8 <CWMODE1>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d7c:	f008 fc3a 	bl	800d5f4 <HAL_GetTick>
 8004d80:	0003      	movs	r3, r0
 8004d82:	330a      	adds	r3, #10
 8004d84:	001a      	movs	r2, r3
 8004d86:	4b81      	ldr	r3, [pc, #516]	@ (8004f8c <AT_Send+0x348>)
 8004d88:	601a      	str	r2, [r3, #0]
    break;
 8004d8a:	e0f5      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004d8c:	4a86      	ldr	r2, [pc, #536]	@ (8004fa8 <AT_Send+0x364>)
 8004d8e:	4b81      	ldr	r3, [pc, #516]	@ (8004f94 <AT_Send+0x350>)
 8004d90:	0019      	movs	r1, r3
 8004d92:	2003      	movs	r0, #3
 8004d94:	f008 f890 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWMODE2();
 8004d98:	230f      	movs	r3, #15
 8004d9a:	18fc      	adds	r4, r7, r3
 8004d9c:	f7ff fbc8 	bl	8004530 <CWMODE2>
 8004da0:	0003      	movs	r3, r0
 8004da2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004da4:	f008 fc26 	bl	800d5f4 <HAL_GetTick>
 8004da8:	0003      	movs	r3, r0
 8004daa:	330a      	adds	r3, #10
 8004dac:	001a      	movs	r2, r3
 8004dae:	4b77      	ldr	r3, [pc, #476]	@ (8004f8c <AT_Send+0x348>)
 8004db0:	601a      	str	r2, [r3, #0]
    break;
 8004db2:	e0e1      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004db4:	4a7d      	ldr	r2, [pc, #500]	@ (8004fac <AT_Send+0x368>)
 8004db6:	4b77      	ldr	r3, [pc, #476]	@ (8004f94 <AT_Send+0x350>)
 8004db8:	0019      	movs	r1, r3
 8004dba:	2003      	movs	r0, #3
 8004dbc:	f008 f87c 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004dc0:	230f      	movs	r3, #15
 8004dc2:	18fc      	adds	r4, r7, r3
 8004dc4:	f7ff fbd0 	bl	8004568 <CWAUTOCONN>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dcc:	f008 fc12 	bl	800d5f4 <HAL_GetTick>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	330a      	adds	r3, #10
 8004dd4:	001a      	movs	r2, r3
 8004dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f8c <AT_Send+0x348>)
 8004dd8:	601a      	str	r2, [r3, #0]
    break;
 8004dda:	e0cd      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004ddc:	4a74      	ldr	r2, [pc, #464]	@ (8004fb0 <AT_Send+0x36c>)
 8004dde:	4b6d      	ldr	r3, [pc, #436]	@ (8004f94 <AT_Send+0x350>)
 8004de0:	0019      	movs	r1, r3
 8004de2:	2003      	movs	r0, #3
 8004de4:	f008 f868 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWJAP();
 8004de8:	230f      	movs	r3, #15
 8004dea:	18fc      	adds	r4, r7, r3
 8004dec:	f7ff fbd8 	bl	80045a0 <CWJAP>
 8004df0:	0003      	movs	r3, r0
 8004df2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004df4:	f008 fbfe 	bl	800d5f4 <HAL_GetTick>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	3332      	adds	r3, #50	@ 0x32
 8004dfc:	001a      	movs	r2, r3
 8004dfe:	4b63      	ldr	r3, [pc, #396]	@ (8004f8c <AT_Send+0x348>)
 8004e00:	601a      	str	r2, [r3, #0]
    break;
 8004e02:	e0b9      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004e04:	4a6b      	ldr	r2, [pc, #428]	@ (8004fb4 <AT_Send+0x370>)
 8004e06:	4b63      	ldr	r3, [pc, #396]	@ (8004f94 <AT_Send+0x350>)
 8004e08:	0019      	movs	r1, r3
 8004e0a:	2003      	movs	r0, #3
 8004e0c:	f008 f854 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWMODE3();
 8004e10:	230f      	movs	r3, #15
 8004e12:	18fc      	adds	r4, r7, r3
 8004e14:	f7ff fc46 	bl	80046a4 <CWMODE3>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e1c:	f008 fbea 	bl	800d5f4 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	330a      	adds	r3, #10
 8004e24:	001a      	movs	r2, r3
 8004e26:	4b59      	ldr	r3, [pc, #356]	@ (8004f8c <AT_Send+0x348>)
 8004e28:	601a      	str	r2, [r3, #0]
    break;
 8004e2a:	e0a5      	b.n	8004f78 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004e2c:	4a62      	ldr	r2, [pc, #392]	@ (8004fb8 <AT_Send+0x374>)
 8004e2e:	4b59      	ldr	r3, [pc, #356]	@ (8004f94 <AT_Send+0x350>)
 8004e30:	0019      	movs	r1, r3
 8004e32:	2003      	movs	r0, #3
 8004e34:	f008 f840 	bl	800ceb8 <CreateLine>
    ATCommandSend = CWSAP();
 8004e38:	230f      	movs	r3, #15
 8004e3a:	18fc      	adds	r4, r7, r3
 8004e3c:	f7ff fc6a 	bl	8004714 <CWSAP>
 8004e40:	0003      	movs	r3, r0
 8004e42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e44:	f008 fbd6 	bl	800d5f4 <HAL_GetTick>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	330a      	adds	r3, #10
 8004e4c:	001a      	movs	r2, r3
 8004e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8004f8c <AT_Send+0x348>)
 8004e50:	601a      	str	r2, [r3, #0]
    break;
 8004e52:	e091      	b.n	8004f78 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004e54:	230f      	movs	r3, #15
 8004e56:	18fc      	adds	r4, r7, r3
 8004e58:	f7ff fc78 	bl	800474c <CIPMUX>
 8004e5c:	0003      	movs	r3, r0
 8004e5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e60:	f008 fbc8 	bl	800d5f4 <HAL_GetTick>
 8004e64:	0003      	movs	r3, r0
 8004e66:	330a      	adds	r3, #10
 8004e68:	001a      	movs	r2, r3
 8004e6a:	4b48      	ldr	r3, [pc, #288]	@ (8004f8c <AT_Send+0x348>)
 8004e6c:	601a      	str	r2, [r3, #0]
    break;
 8004e6e:	e083      	b.n	8004f78 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004e70:	230f      	movs	r3, #15
 8004e72:	18fc      	adds	r4, r7, r3
 8004e74:	f7ff fc86 	bl	8004784 <WEBSERVER>
 8004e78:	0003      	movs	r3, r0
 8004e7a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e7c:	f008 fbba 	bl	800d5f4 <HAL_GetTick>
 8004e80:	0003      	movs	r3, r0
 8004e82:	330a      	adds	r3, #10
 8004e84:	001a      	movs	r2, r3
 8004e86:	4b41      	ldr	r3, [pc, #260]	@ (8004f8c <AT_Send+0x348>)
 8004e88:	601a      	str	r2, [r3, #0]
    break;
 8004e8a:	e075      	b.n	8004f78 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004e8c:	230f      	movs	r3, #15
 8004e8e:	18fc      	adds	r4, r7, r3
 8004e90:	f7ff fc94 	bl	80047bc <HTTPCPOST>
 8004e94:	0003      	movs	r3, r0
 8004e96:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e98:	f008 fbac 	bl	800d5f4 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	33f5      	adds	r3, #245	@ 0xf5
 8004ea0:	33ff      	adds	r3, #255	@ 0xff
 8004ea2:	001a      	movs	r2, r3
 8004ea4:	4b39      	ldr	r3, [pc, #228]	@ (8004f8c <AT_Send+0x348>)
 8004ea6:	601a      	str	r2, [r3, #0]
    break;
 8004ea8:	e066      	b.n	8004f78 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004eaa:	4a44      	ldr	r2, [pc, #272]	@ (8004fbc <AT_Send+0x378>)
 8004eac:	4b39      	ldr	r3, [pc, #228]	@ (8004f94 <AT_Send+0x350>)
 8004eae:	0019      	movs	r1, r3
 8004eb0:	2003      	movs	r0, #3
 8004eb2:	f008 f801 	bl	800ceb8 <CreateLine>
    ATCommandSend = SENDDATA();
 8004eb6:	230f      	movs	r3, #15
 8004eb8:	18fc      	adds	r4, r7, r3
 8004eba:	f7ff fcdf 	bl	800487c <SENDDATA>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004ec2:	f008 fb97 	bl	800d5f4 <HAL_GetTick>
 8004ec6:	0003      	movs	r3, r0
 8004ec8:	33f5      	adds	r3, #245	@ 0xf5
 8004eca:	33ff      	adds	r3, #255	@ 0xff
 8004ecc:	001a      	movs	r2, r3
 8004ece:	4b2f      	ldr	r3, [pc, #188]	@ (8004f8c <AT_Send+0x348>)
 8004ed0:	601a      	str	r2, [r3, #0]
    break;
 8004ed2:	e051      	b.n	8004f78 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc0 <AT_Send+0x37c>)
 8004ed6:	4b2f      	ldr	r3, [pc, #188]	@ (8004f94 <AT_Send+0x350>)
 8004ed8:	0019      	movs	r1, r3
 8004eda:	2003      	movs	r0, #3
 8004edc:	f007 ffec 	bl	800ceb8 <CreateLine>
    ATCommandSend = SLEEP();
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	18fc      	adds	r4, r7, r3
 8004ee4:	f7ff fce6 	bl	80048b4 <SLEEP>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004eec:	f008 fb82 	bl	800d5f4 <HAL_GetTick>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	330a      	adds	r3, #10
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <AT_Send+0x348>)
 8004ef8:	601a      	str	r2, [r3, #0]
    break;
 8004efa:	e03d      	b.n	8004f78 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004efc:	4a31      	ldr	r2, [pc, #196]	@ (8004fc4 <AT_Send+0x380>)
 8004efe:	4b25      	ldr	r3, [pc, #148]	@ (8004f94 <AT_Send+0x350>)
 8004f00:	0019      	movs	r1, r3
 8004f02:	2003      	movs	r0, #3
 8004f04:	f007 ffd8 	bl	800ceb8 <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004f08:	230f      	movs	r3, #15
 8004f0a:	18fc      	adds	r4, r7, r3
 8004f0c:	f7ff fcee 	bl	80048ec <CIPSNTPCFG>
 8004f10:	0003      	movs	r3, r0
 8004f12:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f14:	f008 fb6e 	bl	800d5f4 <HAL_GetTick>
 8004f18:	0003      	movs	r3, r0
 8004f1a:	330a      	adds	r3, #10
 8004f1c:	001a      	movs	r2, r3
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f8c <AT_Send+0x348>)
 8004f20:	601a      	str	r2, [r3, #0]
    break;
 8004f22:	e029      	b.n	8004f78 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004f24:	4a28      	ldr	r2, [pc, #160]	@ (8004fc8 <AT_Send+0x384>)
 8004f26:	4b1b      	ldr	r3, [pc, #108]	@ (8004f94 <AT_Send+0x350>)
 8004f28:	0019      	movs	r1, r3
 8004f2a:	2003      	movs	r0, #3
 8004f2c:	f007 ffc4 	bl	800ceb8 <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004f30:	230f      	movs	r3, #15
 8004f32:	18fc      	adds	r4, r7, r3
 8004f34:	f7ff fcfa 	bl	800492c <CIPSNTPTIME>
 8004f38:	0003      	movs	r3, r0
 8004f3a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f3c:	f008 fb5a 	bl	800d5f4 <HAL_GetTick>
 8004f40:	0003      	movs	r3, r0
 8004f42:	33f5      	adds	r3, #245	@ 0xf5
 8004f44:	33ff      	adds	r3, #255	@ 0xff
 8004f46:	001a      	movs	r2, r3
 8004f48:	4b10      	ldr	r3, [pc, #64]	@ (8004f8c <AT_Send+0x348>)
 8004f4a:	601a      	str	r2, [r3, #0]
    break;
 8004f4c:	e014      	b.n	8004f78 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004fcc <AT_Send+0x388>)
 8004f50:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <AT_Send+0x350>)
 8004f52:	0019      	movs	r1, r3
 8004f54:	2003      	movs	r0, #3
 8004f56:	f007 ffaf 	bl	800ceb8 <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004f5a:	230f      	movs	r3, #15
 8004f5c:	18fc      	adds	r4, r7, r3
 8004f5e:	f7ff fd01 	bl	8004964 <CIPSNTPINTV>
 8004f62:	0003      	movs	r3, r0
 8004f64:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f66:	f008 fb45 	bl	800d5f4 <HAL_GetTick>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	330a      	adds	r3, #10
 8004f6e:	001a      	movs	r2, r3
 8004f70:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <AT_Send+0x348>)
 8004f72:	601a      	str	r2, [r3, #0]
    break;
 8004f74:	e000      	b.n	8004f78 <AT_Send+0x334>
  break;
 8004f76:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004f78:	230f      	movs	r3, #15
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	781b      	ldrb	r3, [r3, #0]
}
 8004f7e:	0018      	movs	r0, r3
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b005      	add	sp, #20
 8004f84:	bd90      	pop	{r4, r7, pc}
 8004f86:	46c0      	nop			@ (mov r8, r8)
 8004f88:	08023090 	.word	0x08023090
 8004f8c:	20000994 	.word	0x20000994
 8004f90:	08021ce8 	.word	0x08021ce8
 8004f94:	08021680 	.word	0x08021680
 8004f98:	08021cfc 	.word	0x08021cfc
 8004f9c:	08021d10 	.word	0x08021d10
 8004fa0:	08021d20 	.word	0x08021d20
 8004fa4:	08021d34 	.word	0x08021d34
 8004fa8:	08021d4c 	.word	0x08021d4c
 8004fac:	08021d64 	.word	0x08021d64
 8004fb0:	08021d7c 	.word	0x08021d7c
 8004fb4:	08021d90 	.word	0x08021d90
 8004fb8:	08021dac 	.word	0x08021dac
 8004fbc:	08021dc8 	.word	0x08021dc8
 8004fc0:	08021dd8 	.word	0x08021dd8
 8004fc4:	08021dfc 	.word	0x08021dfc
 8004fc8:	08021e10 	.word	0x08021e10
 8004fcc:	08021e28 	.word	0x08021e28

08004fd0 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004fd6:	1dfb      	adds	r3, r7, #7
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004fdc:	4b7a      	ldr	r3, [pc, #488]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	d900      	bls.n	8004fe6 <ESP_WakeTest+0x16>
 8004fe4:	e0d6      	b.n	8005194 <ESP_WakeTest+0x1c4>
 8004fe6:	009a      	lsls	r2, r3, #2
 8004fe8:	4b78      	ldr	r3, [pc, #480]	@ (80051cc <ESP_WakeTest+0x1fc>)
 8004fea:	18d3      	adds	r3, r2, r3
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004ff0:	4b77      	ldr	r3, [pc, #476]	@ (80051d0 <ESP_WakeTest+0x200>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	4053      	eors	r3, r2
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d036      	beq.n	800506c <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ffe:	2380      	movs	r3, #128	@ 0x80
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	4874      	ldr	r0, [pc, #464]	@ (80051d4 <ESP_WakeTest+0x204>)
 8005004:	2200      	movs	r2, #0
 8005006:	0019      	movs	r1, r3
 8005008:	f009 fd53 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 800500c:	2032      	movs	r0, #50	@ 0x32
 800500e:	f008 fafb 	bl	800d608 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005012:	2380      	movs	r3, #128	@ 0x80
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	486f      	ldr	r0, [pc, #444]	@ (80051d4 <ESP_WakeTest+0x204>)
 8005018:	2201      	movs	r2, #1
 800501a:	0019      	movs	r1, r3
 800501c:	f009 fd49 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005020:	200a      	movs	r0, #10
 8005022:	f008 faf1 	bl	800d608 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005026:	4b6c      	ldr	r3, [pc, #432]	@ (80051d8 <ESP_WakeTest+0x208>)
 8005028:	2200      	movs	r2, #0
 800502a:	2101      	movs	r1, #1
 800502c:	0018      	movs	r0, r3
 800502e:	f009 fd40 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005032:	200a      	movs	r0, #10
 8005034:	f008 fae8 	bl	800d608 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005038:	4b67      	ldr	r3, [pc, #412]	@ (80051d8 <ESP_WakeTest+0x208>)
 800503a:	2201      	movs	r2, #1
 800503c:	2102      	movs	r1, #2
 800503e:	0018      	movs	r0, r3
 8005040:	f009 fd37 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005044:	200a      	movs	r0, #10
 8005046:	f008 fadf 	bl	800d608 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800504a:	4b63      	ldr	r3, [pc, #396]	@ (80051d8 <ESP_WakeTest+0x208>)
 800504c:	2201      	movs	r2, #1
 800504e:	2101      	movs	r1, #1
 8005050:	0018      	movs	r0, r3
 8005052:	f009 fd2e 	bl	800eab2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005056:	f008 facd 	bl	800d5f4 <HAL_GetTick>
 800505a:	0003      	movs	r3, r0
 800505c:	22af      	movs	r2, #175	@ 0xaf
 800505e:	0092      	lsls	r2, r2, #2
 8005060:	189a      	adds	r2, r3, r2
 8005062:	4b5e      	ldr	r3, [pc, #376]	@ (80051dc <ESP_WakeTest+0x20c>)
 8005064:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005066:	4b5a      	ldr	r3, [pc, #360]	@ (80051d0 <ESP_WakeTest+0x200>)
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800506c:	2380      	movs	r3, #128	@ 0x80
 800506e:	005a      	lsls	r2, r3, #1
 8005070:	4b5b      	ldr	r3, [pc, #364]	@ (80051e0 <ESP_WakeTest+0x210>)
 8005072:	0011      	movs	r1, r2
 8005074:	0018      	movs	r0, r3
 8005076:	f7fe fcf9 	bl	8003a6c <ESP_Receive>
 800507a:	1e03      	subs	r3, r0, #0
 800507c:	d100      	bne.n	8005080 <ESP_WakeTest+0xb0>
 800507e:	e099      	b.n	80051b4 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8005080:	4b51      	ldr	r3, [pc, #324]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005086:	e095      	b.n	80051b4 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8005088:	4b54      	ldr	r3, [pc, #336]	@ (80051dc <ESP_WakeTest+0x20c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0018      	movs	r0, r3
 800508e:	f007 febd 	bl	800ce0c <TimestampIsReached>
 8005092:	1e03      	subs	r3, r0, #0
 8005094:	d100      	bne.n	8005098 <ESP_WakeTest+0xc8>
 8005096:	e08f      	b.n	80051b8 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8005098:	4b52      	ldr	r3, [pc, #328]	@ (80051e4 <ESP_WakeTest+0x214>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	1dfc      	adds	r4, r7, #7
 800509e:	0018      	movs	r0, r3
 80050a0:	f7ff fdd0 	bl	8004c44 <AT_Send>
 80050a4:	0003      	movs	r3, r0
 80050a6:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80050a8:	1dfb      	adds	r3, r7, #7
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d100      	bne.n	80050b2 <ESP_WakeTest+0xe2>
 80050b0:	e082      	b.n	80051b8 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80050b2:	4b45      	ldr	r3, [pc, #276]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 80050b4:	2202      	movs	r2, #2
 80050b6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80050b8:	e07e      	b.n	80051b8 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80050ba:	4b48      	ldr	r3, [pc, #288]	@ (80051dc <ESP_WakeTest+0x20c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	0018      	movs	r0, r3
 80050c0:	f007 fea4 	bl	800ce0c <TimestampIsReached>
 80050c4:	1e03      	subs	r3, r0, #0
 80050c6:	d100      	bne.n	80050ca <ESP_WakeTest+0xfa>
 80050c8:	e078      	b.n	80051bc <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80050ca:	4b47      	ldr	r3, [pc, #284]	@ (80051e8 <ESP_WakeTest+0x218>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	0018      	movs	r0, r3
 80050d0:	f7ff fc64 	bl	800499c <DMA_ProcessBuffer>
 80050d4:	0003      	movs	r3, r0
 80050d6:	001a      	movs	r2, r3
 80050d8:	4b44      	ldr	r3, [pc, #272]	@ (80051ec <ESP_WakeTest+0x21c>)
 80050da:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80050dc:	4b43      	ldr	r3, [pc, #268]	@ (80051ec <ESP_WakeTest+0x21c>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	4b41      	ldr	r3, [pc, #260]	@ (80051e8 <ESP_WakeTest+0x218>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	1dbc      	adds	r4, r7, #6
 80050e6:	0019      	movs	r1, r3
 80050e8:	0010      	movs	r0, r2
 80050ea:	f7ff fd69 	bl	8004bc0 <ATCompare>
 80050ee:	0003      	movs	r3, r0
 80050f0:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80050f2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ec <ESP_WakeTest+0x21c>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d102      	bne.n	8005100 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 80050fa:	4b33      	ldr	r3, [pc, #204]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8005100:	4b3a      	ldr	r3, [pc, #232]	@ (80051ec <ESP_WakeTest+0x21c>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b07      	cmp	r3, #7
 8005106:	d104      	bne.n	8005112 <ESP_WakeTest+0x142>
          StartProg();
 8005108:	f7fe ff4e 	bl	8003fa8 <StartProg>
          TestState = ESP_TEST_BOOT;
 800510c:	4b2e      	ldr	r3, [pc, #184]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 800510e:	2205      	movs	r2, #5
 8005110:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005112:	4b36      	ldr	r3, [pc, #216]	@ (80051ec <ESP_WakeTest+0x21c>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	2b03      	cmp	r3, #3
 8005118:	d109      	bne.n	800512e <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 800511a:	f008 fa6b 	bl	800d5f4 <HAL_GetTick>
 800511e:	0003      	movs	r3, r0
 8005120:	3332      	adds	r3, #50	@ 0x32
 8005122:	001a      	movs	r2, r3
 8005124:	4b2d      	ldr	r3, [pc, #180]	@ (80051dc <ESP_WakeTest+0x20c>)
 8005126:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8005128:	4b27      	ldr	r3, [pc, #156]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 800512a:	2201      	movs	r2, #1
 800512c:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800512e:	1dbb      	adds	r3, r7, #6
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d042      	beq.n	80051bc <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8005136:	4b24      	ldr	r3, [pc, #144]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005138:	2203      	movs	r2, #3
 800513a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800513c:	e03e      	b.n	80051bc <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800513e:	4b2c      	ldr	r3, [pc, #176]	@ (80051f0 <ESP_WakeTest+0x220>)
 8005140:	22fa      	movs	r2, #250	@ 0xfa
 8005142:	0112      	lsls	r2, r2, #4
 8005144:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8005146:	4b2a      	ldr	r3, [pc, #168]	@ (80051f0 <ESP_WakeTest+0x220>)
 8005148:	4a2a      	ldr	r2, [pc, #168]	@ (80051f4 <ESP_WakeTest+0x224>)
 800514a:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 800514c:	4b28      	ldr	r3, [pc, #160]	@ (80051f0 <ESP_WakeTest+0x220>)
 800514e:	22fa      	movs	r2, #250	@ 0xfa
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005154:	4b1c      	ldr	r3, [pc, #112]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005156:	2204      	movs	r2, #4
 8005158:	701a      	strb	r2, [r3, #0]

      break;
 800515a:	e030      	b.n	80051be <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 800515c:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <ESP_WakeTest+0x228>)
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 8005162:	4b1b      	ldr	r3, [pc, #108]	@ (80051d0 <ESP_WakeTest+0x200>)
 8005164:	2200      	movs	r2, #0
 8005166:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005168:	4b1b      	ldr	r3, [pc, #108]	@ (80051d8 <ESP_WakeTest+0x208>)
 800516a:	2200      	movs	r2, #0
 800516c:	2101      	movs	r1, #1
 800516e:	0018      	movs	r0, r3
 8005170:	f009 fc9f 	bl	800eab2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	011b      	lsls	r3, r3, #4
 8005178:	4816      	ldr	r0, [pc, #88]	@ (80051d4 <ESP_WakeTest+0x204>)
 800517a:	2200      	movs	r2, #0
 800517c:	0019      	movs	r1, r3
 800517e:	f009 fc98 	bl	800eab2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005182:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <ESP_WakeTest+0x208>)
 8005184:	2200      	movs	r2, #0
 8005186:	2102      	movs	r1, #2
 8005188:	0018      	movs	r0, r3
 800518a:	f009 fc92 	bl	800eab2 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 800518e:	f002 ff05 	bl	8007f9c <SetESPMeasurementDone>
      break;
 8005192:	e014      	b.n	80051be <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 8005194:	4b0c      	ldr	r3, [pc, #48]	@ (80051c8 <ESP_WakeTest+0x1f8>)
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
      break;
 800519a:	e010      	b.n	80051be <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 800519c:	4b14      	ldr	r3, [pc, #80]	@ (80051f0 <ESP_WakeTest+0x220>)
 800519e:	22fa      	movs	r2, #250	@ 0xfa
 80051a0:	0112      	lsls	r2, r2, #4
 80051a2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80051a4:	4b12      	ldr	r3, [pc, #72]	@ (80051f0 <ESP_WakeTest+0x220>)
 80051a6:	22fa      	movs	r2, #250	@ 0xfa
 80051a8:	0112      	lsls	r2, r2, #4
 80051aa:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80051ac:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <ESP_WakeTest+0x220>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80051b2:	e004      	b.n	80051be <ESP_WakeTest+0x1ee>
      break;
 80051b4:	46c0      	nop			@ (mov r8, r8)
 80051b6:	e002      	b.n	80051be <ESP_WakeTest+0x1ee>
      break;
 80051b8:	46c0      	nop			@ (mov r8, r8)
 80051ba:	e000      	b.n	80051be <ESP_WakeTest+0x1ee>
      break;
 80051bc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80051be:	46c0      	nop			@ (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b003      	add	sp, #12
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	200009a4 	.word	0x200009a4
 80051cc:	080230e0 	.word	0x080230e0
 80051d0:	2000054c 	.word	0x2000054c
 80051d4:	50000800 	.word	0x50000800
 80051d8:	50001c00 	.word	0x50001c00
 80051dc:	20000994 	.word	0x20000994
 80051e0:	2000044c 	.word	0x2000044c
 80051e4:	200009a2 	.word	0x200009a2
 80051e8:	200009a1 	.word	0x200009a1
 80051ec:	20000029 	.word	0x20000029
 80051f0:	40000400 	.word	0x40000400
 80051f4:	00000bb8 	.word	0x00000bb8
 80051f8:	20000000 	.word	0x20000000

080051fc <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af04      	add	r7, sp, #16
  bool ATSend = false;
 8005202:	1dfb      	adds	r3, r7, #7
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 8005208:	4bda      	ldr	r3, [pc, #872]	@ (8005574 <ESP_Upkeep+0x378>)
 800520a:	781a      	ldrb	r2, [r3, #0]
 800520c:	4bda      	ldr	r3, [pc, #872]	@ (8005578 <ESP_Upkeep+0x37c>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d01f      	beq.n	8005254 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005214:	4bd7      	ldr	r3, [pc, #860]	@ (8005574 <ESP_Upkeep+0x378>)
 8005216:	781a      	ldrb	r2, [r3, #0]
 8005218:	4bd7      	ldr	r3, [pc, #860]	@ (8005578 <ESP_Upkeep+0x37c>)
 800521a:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 800521c:	4bd6      	ldr	r3, [pc, #856]	@ (8005578 <ESP_Upkeep+0x37c>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d103      	bne.n	800522c <ESP_Upkeep+0x30>
 8005224:	4bd5      	ldr	r3, [pc, #852]	@ (800557c <ESP_Upkeep+0x380>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b0e      	cmp	r3, #14
 800522a:	d013      	beq.n	8005254 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 800522c:	4bd2      	ldr	r3, [pc, #840]	@ (8005578 <ESP_Upkeep+0x37c>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	001d      	movs	r5, r3
 8005232:	4bd2      	ldr	r3, [pc, #840]	@ (800557c <ESP_Upkeep+0x380>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	0018      	movs	r0, r3
 8005238:	4bd1      	ldr	r3, [pc, #836]	@ (8005580 <ESP_Upkeep+0x384>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	001c      	movs	r4, r3
 800523e:	4bd1      	ldr	r3, [pc, #836]	@ (8005584 <ESP_Upkeep+0x388>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	4ad1      	ldr	r2, [pc, #836]	@ (8005588 <ESP_Upkeep+0x38c>)
 8005244:	49d1      	ldr	r1, [pc, #836]	@ (800558c <ESP_Upkeep+0x390>)
 8005246:	9302      	str	r3, [sp, #8]
 8005248:	9401      	str	r4, [sp, #4]
 800524a:	9000      	str	r0, [sp, #0]
 800524c:	002b      	movs	r3, r5
 800524e:	2003      	movs	r0, #3
 8005250:	f007 fe32 	bl	800ceb8 <CreateLine>
    }
  }

  switch (EspState) {
 8005254:	4bc7      	ldr	r3, [pc, #796]	@ (8005574 <ESP_Upkeep+0x378>)
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	2b0f      	cmp	r3, #15
 800525a:	d901      	bls.n	8005260 <ESP_Upkeep+0x64>
 800525c:	f000 fbc0 	bl	80059e0 <ESP_Upkeep+0x7e4>
 8005260:	009a      	lsls	r2, r3, #2
 8005262:	4bcb      	ldr	r3, [pc, #812]	@ (8005590 <ESP_Upkeep+0x394>)
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 800526a:	4bc2      	ldr	r3, [pc, #776]	@ (8005574 <ESP_Upkeep+0x378>)
 800526c:	2201      	movs	r2, #1
 800526e:	701a      	strb	r2, [r3, #0]
      break;
 8005270:	f000 fbcf 	bl	8005a12 <ESP_Upkeep+0x816>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8005274:	4bc7      	ldr	r3, [pc, #796]	@ (8005594 <ESP_Upkeep+0x398>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	2201      	movs	r2, #1
 800527a:	4053      	eors	r3, r2
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d036      	beq.n	80052f0 <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	48c4      	ldr	r0, [pc, #784]	@ (8005598 <ESP_Upkeep+0x39c>)
 8005288:	2200      	movs	r2, #0
 800528a:	0019      	movs	r1, r3
 800528c:	f009 fc11 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005290:	2001      	movs	r0, #1
 8005292:	f008 f9b9 	bl	800d608 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8005296:	2380      	movs	r3, #128	@ 0x80
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	48bf      	ldr	r0, [pc, #764]	@ (8005598 <ESP_Upkeep+0x39c>)
 800529c:	2201      	movs	r2, #1
 800529e:	0019      	movs	r1, r3
 80052a0:	f009 fc07 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052a4:	2001      	movs	r0, #1
 80052a6:	f008 f9af 	bl	800d608 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052aa:	4bbc      	ldr	r3, [pc, #752]	@ (800559c <ESP_Upkeep+0x3a0>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	2101      	movs	r1, #1
 80052b0:	0018      	movs	r0, r3
 80052b2:	f009 fbfe 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052b6:	2001      	movs	r0, #1
 80052b8:	f008 f9a6 	bl	800d608 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052bc:	4bb7      	ldr	r3, [pc, #732]	@ (800559c <ESP_Upkeep+0x3a0>)
 80052be:	2201      	movs	r2, #1
 80052c0:	2102      	movs	r1, #2
 80052c2:	0018      	movs	r0, r3
 80052c4:	f009 fbf5 	bl	800eab2 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052c8:	2001      	movs	r0, #1
 80052ca:	f008 f99d 	bl	800d608 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052ce:	4bb3      	ldr	r3, [pc, #716]	@ (800559c <ESP_Upkeep+0x3a0>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	2101      	movs	r1, #1
 80052d4:	0018      	movs	r0, r3
 80052d6:	f009 fbec 	bl	800eab2 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80052da:	f008 f98b 	bl	800d5f4 <HAL_GetTick>
 80052de:	0003      	movs	r3, r0
 80052e0:	22af      	movs	r2, #175	@ 0xaf
 80052e2:	0092      	lsls	r2, r2, #2
 80052e4:	189a      	adds	r2, r3, r2
 80052e6:	4bae      	ldr	r3, [pc, #696]	@ (80055a0 <ESP_Upkeep+0x3a4>)
 80052e8:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80052ea:	4baa      	ldr	r3, [pc, #680]	@ (8005594 <ESP_Upkeep+0x398>)
 80052ec:	2201      	movs	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	005a      	lsls	r2, r3, #1
 80052f4:	4bab      	ldr	r3, [pc, #684]	@ (80055a4 <ESP_Upkeep+0x3a8>)
 80052f6:	0011      	movs	r1, r2
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7fe fbb7 	bl	8003a6c <ESP_Receive>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d100      	bne.n	8005304 <ESP_Upkeep+0x108>
 8005302:	e379      	b.n	80059f8 <ESP_Upkeep+0x7fc>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005304:	4b9b      	ldr	r3, [pc, #620]	@ (8005574 <ESP_Upkeep+0x378>)
 8005306:	220f      	movs	r2, #15
 8005308:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 800530a:	f008 f973 	bl	800d5f4 <HAL_GetTick>
 800530e:	0003      	movs	r3, r0
 8005310:	22fa      	movs	r2, #250	@ 0xfa
 8005312:	00d2      	lsls	r2, r2, #3
 8005314:	189a      	adds	r2, r3, r2
 8005316:	4ba4      	ldr	r3, [pc, #656]	@ (80055a8 <ESP_Upkeep+0x3ac>)
 8005318:	601a      	str	r2, [r3, #0]
      }
      break;
 800531a:	e36d      	b.n	80059f8 <ESP_Upkeep+0x7fc>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 800531c:	2001      	movs	r0, #1
 800531e:	f7ff fb3d 	bl	800499c <DMA_ProcessBuffer>
 8005322:	0003      	movs	r3, r0
 8005324:	001a      	movs	r2, r3
 8005326:	4ba1      	ldr	r3, [pc, #644]	@ (80055ac <ESP_Upkeep+0x3b0>)
 8005328:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 800532a:	4ba0      	ldr	r3, [pc, #640]	@ (80055ac <ESP_Upkeep+0x3b0>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	1dbc      	adds	r4, r7, #6
 8005330:	2101      	movs	r1, #1
 8005332:	0018      	movs	r0, r3
 8005334:	f7ff fc44 	bl	8004bc0 <ATCompare>
 8005338:	0003      	movs	r3, r0
 800533a:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 800533c:	1dbb      	adds	r3, r7, #6
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d107      	bne.n	8005354 <ESP_Upkeep+0x158>
 8005344:	4b98      	ldr	r3, [pc, #608]	@ (80055a8 <ESP_Upkeep+0x3ac>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0018      	movs	r0, r3
 800534a:	f007 fd5f 	bl	800ce0c <TimestampIsReached>
 800534e:	1e03      	subs	r3, r0, #0
 8005350:	d100      	bne.n	8005354 <ESP_Upkeep+0x158>
 8005352:	e353      	b.n	80059fc <ESP_Upkeep+0x800>
          EspState = ESP_STATE_MODE_SELECT;
 8005354:	4b87      	ldr	r3, [pc, #540]	@ (8005574 <ESP_Upkeep+0x378>)
 8005356:	220b      	movs	r2, #11
 8005358:	701a      	strb	r2, [r3, #0]
        }
        break;
 800535a:	e34f      	b.n	80059fc <ESP_Upkeep+0x800>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 800535c:	4b94      	ldr	r3, [pc, #592]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800535e:	2209      	movs	r2, #9
 8005360:	2114      	movs	r1, #20
 8005362:	0018      	movs	r0, r3
 8005364:	f019 f9da 	bl	801e71c <memset>
      if(!InitIsDone || WifiReset){
 8005368:	4b92      	ldr	r3, [pc, #584]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	4053      	eors	r3, r2
 8005370:	b2db      	uxtb	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d103      	bne.n	800537e <ESP_Upkeep+0x182>
 8005376:	4b90      	ldr	r3, [pc, #576]	@ (80055b8 <ESP_Upkeep+0x3bc>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01a      	beq.n	80053b4 <ESP_Upkeep+0x1b8>
        memcpy(ATCommandArray, AT_INIT, 7);
 800537e:	4b8c      	ldr	r3, [pc, #560]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 8005380:	4a8e      	ldr	r2, [pc, #568]	@ (80055bc <ESP_Upkeep+0x3c0>)
 8005382:	6811      	ldr	r1, [r2, #0]
 8005384:	6019      	str	r1, [r3, #0]
 8005386:	8891      	ldrh	r1, [r2, #4]
 8005388:	8099      	strh	r1, [r3, #4]
 800538a:	7992      	ldrb	r2, [r2, #6]
 800538c:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 800538e:	4b79      	ldr	r3, [pc, #484]	@ (8005574 <ESP_Upkeep+0x378>)
 8005390:	2204      	movs	r2, #4
 8005392:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005394:	4b8a      	ldr	r3, [pc, #552]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 800539a:	4b79      	ldr	r3, [pc, #484]	@ (8005580 <ESP_Upkeep+0x384>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80053a0:	4b87      	ldr	r3, [pc, #540]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	001a      	movs	r2, r3
 80053a6:	4b82      	ldr	r3, [pc, #520]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80053a8:	5c9a      	ldrb	r2, [r3, r2]
 80053aa:	4b74      	ldr	r3, [pc, #464]	@ (800557c <ESP_Upkeep+0x380>)
 80053ac:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053ae:	4b75      	ldr	r3, [pc, #468]	@ (8005584 <ESP_Upkeep+0x388>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80053b4:	4b7f      	ldr	r3, [pc, #508]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01f      	beq.n	80053fc <ESP_Upkeep+0x200>
 80053bc:	4b81      	ldr	r3, [pc, #516]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2201      	movs	r2, #1
 80053c2:	4053      	eors	r3, r2
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <ESP_Upkeep+0x200>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80053ca:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80053cc:	4a7e      	ldr	r2, [pc, #504]	@ (80055c8 <ESP_Upkeep+0x3cc>)
 80053ce:	6811      	ldr	r1, [r2, #0]
 80053d0:	6019      	str	r1, [r3, #0]
 80053d2:	8892      	ldrh	r2, [r2, #4]
 80053d4:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80053d6:	4b67      	ldr	r3, [pc, #412]	@ (8005574 <ESP_Upkeep+0x378>)
 80053d8:	2204      	movs	r2, #4
 80053da:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053dc:	4b78      	ldr	r3, [pc, #480]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80053e2:	4b67      	ldr	r3, [pc, #412]	@ (8005580 <ESP_Upkeep+0x384>)
 80053e4:	2201      	movs	r2, #1
 80053e6:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80053e8:	4b75      	ldr	r3, [pc, #468]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	001a      	movs	r2, r3
 80053ee:	4b70      	ldr	r3, [pc, #448]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80053f0:	5c9a      	ldrb	r2, [r3, r2]
 80053f2:	4b62      	ldr	r3, [pc, #392]	@ (800557c <ESP_Upkeep+0x380>)
 80053f4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053f6:	4b63      	ldr	r3, [pc, #396]	@ (8005584 <ESP_Upkeep+0x388>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80053fc:	4b6d      	ldr	r3, [pc, #436]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d021      	beq.n	8005448 <ESP_Upkeep+0x24c>
 8005404:	4b6f      	ldr	r3, [pc, #444]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01d      	beq.n	8005448 <ESP_Upkeep+0x24c>
 800540c:	4b6f      	ldr	r3, [pc, #444]	@ (80055cc <ESP_Upkeep+0x3d0>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2201      	movs	r2, #1
 8005412:	4053      	eors	r3, r2
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 800541a:	4b6d      	ldr	r3, [pc, #436]	@ (80055d0 <ESP_Upkeep+0x3d4>)
 800541c:	881a      	ldrh	r2, [r3, #0]
 800541e:	4b64      	ldr	r3, [pc, #400]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 8005420:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005422:	4b54      	ldr	r3, [pc, #336]	@ (8005574 <ESP_Upkeep+0x378>)
 8005424:	2204      	movs	r2, #4
 8005426:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005428:	4b65      	ldr	r3, [pc, #404]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800542e:	4b54      	ldr	r3, [pc, #336]	@ (8005580 <ESP_Upkeep+0x384>)
 8005430:	2204      	movs	r2, #4
 8005432:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005434:	4b62      	ldr	r3, [pc, #392]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	001a      	movs	r2, r3
 800543a:	4b5d      	ldr	r3, [pc, #372]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800543c:	5c9a      	ldrb	r2, [r3, r2]
 800543e:	4b4f      	ldr	r3, [pc, #316]	@ (800557c <ESP_Upkeep+0x380>)
 8005440:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005442:	4b50      	ldr	r3, [pc, #320]	@ (8005584 <ESP_Upkeep+0x388>)
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005448:	4b5a      	ldr	r3, [pc, #360]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02e      	beq.n	80054ae <ESP_Upkeep+0x2b2>
 8005450:	4b5c      	ldr	r3, [pc, #368]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02a      	beq.n	80054ae <ESP_Upkeep+0x2b2>
 8005458:	4b5c      	ldr	r3, [pc, #368]	@ (80055cc <ESP_Upkeep+0x3d0>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d026      	beq.n	80054ae <ESP_Upkeep+0x2b2>
 8005460:	4b5c      	ldr	r3, [pc, #368]	@ (80055d4 <ESP_Upkeep+0x3d8>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2201      	movs	r2, #1
 8005466:	4053      	eors	r3, r2
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01f      	beq.n	80054ae <ESP_Upkeep+0x2b2>
        memcpy(ATCommandArray, AT_SEND, 3);
 800546e:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 8005470:	4a59      	ldr	r2, [pc, #356]	@ (80055d8 <ESP_Upkeep+0x3dc>)
 8005472:	8811      	ldrh	r1, [r2, #0]
 8005474:	8019      	strh	r1, [r3, #0]
 8005476:	7892      	ldrb	r2, [r2, #2]
 8005478:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 800547a:	4b3e      	ldr	r3, [pc, #248]	@ (8005574 <ESP_Upkeep+0x378>)
 800547c:	2204      	movs	r2, #4
 800547e:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005480:	4b4f      	ldr	r3, [pc, #316]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8005486:	4b3e      	ldr	r3, [pc, #248]	@ (8005580 <ESP_Upkeep+0x384>)
 8005488:	2202      	movs	r2, #2
 800548a:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800548c:	f008 f8b2 	bl	800d5f4 <HAL_GetTick>
 8005490:	0002      	movs	r2, r0
 8005492:	4b52      	ldr	r3, [pc, #328]	@ (80055dc <ESP_Upkeep+0x3e0>)
 8005494:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005496:	f006 fe7f 	bl	800c198 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800549a:	4b49      	ldr	r3, [pc, #292]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	001a      	movs	r2, r3
 80054a0:	4b43      	ldr	r3, [pc, #268]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80054a2:	5c9a      	ldrb	r2, [r3, r2]
 80054a4:	4b35      	ldr	r3, [pc, #212]	@ (800557c <ESP_Upkeep+0x380>)
 80054a6:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054a8:	4b36      	ldr	r3, [pc, #216]	@ (8005584 <ESP_Upkeep+0x388>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80054ae:	4b4c      	ldr	r3, [pc, #304]	@ (80055e0 <ESP_Upkeep+0x3e4>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01a      	beq.n	80054ec <ESP_Upkeep+0x2f0>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80054b6:	4b3e      	ldr	r3, [pc, #248]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80054b8:	4a4a      	ldr	r2, [pc, #296]	@ (80055e4 <ESP_Upkeep+0x3e8>)
 80054ba:	6811      	ldr	r1, [r2, #0]
 80054bc:	6019      	str	r1, [r3, #0]
 80054be:	7912      	ldrb	r2, [r2, #4]
 80054c0:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005574 <ESP_Upkeep+0x378>)
 80054c4:	2204      	movs	r2, #4
 80054c6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054c8:	4b3d      	ldr	r3, [pc, #244]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80054ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005580 <ESP_Upkeep+0x384>)
 80054d0:	2203      	movs	r2, #3
 80054d2:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 80054d4:	f006 fe60 	bl	800c198 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80054d8:	4b39      	ldr	r3, [pc, #228]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	001a      	movs	r2, r3
 80054de:	4b34      	ldr	r3, [pc, #208]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 80054e0:	5c9a      	ldrb	r2, [r3, r2]
 80054e2:	4b26      	ldr	r3, [pc, #152]	@ (800557c <ESP_Upkeep+0x380>)
 80054e4:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054e6:	4b27      	ldr	r3, [pc, #156]	@ (8005584 <ESP_Upkeep+0x388>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80054ec:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <ESP_Upkeep+0x3b8>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d100      	bne.n	80054f6 <ESP_Upkeep+0x2fa>
 80054f4:	e284      	b.n	8005a00 <ESP_Upkeep+0x804>
 80054f6:	4b33      	ldr	r3, [pc, #204]	@ (80055c4 <ESP_Upkeep+0x3c8>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d100      	bne.n	8005500 <ESP_Upkeep+0x304>
 80054fe:	e27f      	b.n	8005a00 <ESP_Upkeep+0x804>
 8005500:	4b32      	ldr	r3, [pc, #200]	@ (80055cc <ESP_Upkeep+0x3d0>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d100      	bne.n	800550a <ESP_Upkeep+0x30e>
 8005508:	e27a      	b.n	8005a00 <ESP_Upkeep+0x804>
 800550a:	4b32      	ldr	r3, [pc, #200]	@ (80055d4 <ESP_Upkeep+0x3d8>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d100      	bne.n	8005514 <ESP_Upkeep+0x318>
 8005512:	e275      	b.n	8005a00 <ESP_Upkeep+0x804>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005514:	4b34      	ldr	r3, [pc, #208]	@ (80055e8 <ESP_Upkeep+0x3ec>)
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 800551a:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800551c:	4b15      	ldr	r3, [pc, #84]	@ (8005574 <ESP_Upkeep+0x378>)
 800551e:	2204      	movs	r2, #4
 8005520:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005522:	4b27      	ldr	r3, [pc, #156]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <ESP_Upkeep+0x384>)
 800552a:	2205      	movs	r2, #5
 800552c:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800552e:	f008 f861 	bl	800d5f4 <HAL_GetTick>
 8005532:	0002      	movs	r2, r0
 8005534:	4b29      	ldr	r3, [pc, #164]	@ (80055dc <ESP_Upkeep+0x3e0>)
 8005536:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005538:	f006 fe2e 	bl	800c198 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800553c:	4b20      	ldr	r3, [pc, #128]	@ (80055c0 <ESP_Upkeep+0x3c4>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	001a      	movs	r2, r3
 8005542:	4b1b      	ldr	r3, [pc, #108]	@ (80055b0 <ESP_Upkeep+0x3b4>)
 8005544:	5c9a      	ldrb	r2, [r3, r2]
 8005546:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <ESP_Upkeep+0x380>)
 8005548:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800554a:	4b0e      	ldr	r3, [pc, #56]	@ (8005584 <ESP_Upkeep+0x388>)
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005550:	e256      	b.n	8005a00 <ESP_Upkeep+0x804>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005552:	4b0a      	ldr	r3, [pc, #40]	@ (800557c <ESP_Upkeep+0x380>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	1dfc      	adds	r4, r7, #7
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fb73 	bl	8004c44 <AT_Send>
 800555e:	0003      	movs	r3, r0
 8005560:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005562:	1dfb      	adds	r3, r7, #7
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d100      	bne.n	800556c <ESP_Upkeep+0x370>
 800556a:	e24b      	b.n	8005a04 <ESP_Upkeep+0x808>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 800556c:	4b01      	ldr	r3, [pc, #4]	@ (8005574 <ESP_Upkeep+0x378>)
 800556e:	2203      	movs	r2, #3
 8005570:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005572:	e247      	b.n	8005a04 <ESP_Upkeep+0x808>
 8005574:	20000028 	.word	0x20000028
 8005578:	20000002 	.word	0x20000002
 800557c:	200009a2 	.word	0x200009a2
 8005580:	200009a3 	.word	0x200009a3
 8005584:	200009a1 	.word	0x200009a1
 8005588:	08021e48 	.word	0x08021e48
 800558c:	08021680 	.word	0x08021680
 8005590:	080230f8 	.word	0x080230f8
 8005594:	2000054c 	.word	0x2000054c
 8005598:	50000800 	.word	0x50000800
 800559c:	50001c00 	.word	0x50001c00
 80055a0:	20000994 	.word	0x20000994
 80055a4:	2000044c 	.word	0x2000044c
 80055a8:	20000aa8 	.word	0x20000aa8
 80055ac:	2000002a 	.word	0x2000002a
 80055b0:	20000988 	.word	0x20000988
 80055b4:	2000054d 	.word	0x2000054d
 80055b8:	2000054e 	.word	0x2000054e
 80055bc:	20000004 	.word	0x20000004
 80055c0:	20000992 	.word	0x20000992
 80055c4:	20000550 	.word	0x20000550
 80055c8:	20000014 	.word	0x20000014
 80055cc:	20000551 	.word	0x20000551
 80055d0:	20000010 	.word	0x20000010
 80055d4:	20000001 	.word	0x20000001
 80055d8:	2000000c 	.word	0x2000000c
 80055dc:	20000560 	.word	0x20000560
 80055e0:	2000054f 	.word	0x2000054f
 80055e4:	2000001c 	.word	0x2000001c
 80055e8:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80055ec:	4bdc      	ldr	r3, [pc, #880]	@ (8005960 <ESP_Upkeep+0x764>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f007 fc0b 	bl	800ce0c <TimestampIsReached>
 80055f6:	1e03      	subs	r3, r0, #0
 80055f8:	d100      	bne.n	80055fc <ESP_Upkeep+0x400>
 80055fa:	e205      	b.n	8005a08 <ESP_Upkeep+0x80c>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80055fc:	4bd9      	ldr	r3, [pc, #868]	@ (8005964 <ESP_Upkeep+0x768>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	0018      	movs	r0, r3
 8005602:	f7ff f9cb 	bl	800499c <DMA_ProcessBuffer>
 8005606:	0003      	movs	r3, r0
 8005608:	001a      	movs	r2, r3
 800560a:	4bd7      	ldr	r3, [pc, #860]	@ (8005968 <ESP_Upkeep+0x76c>)
 800560c:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800560e:	4bd6      	ldr	r3, [pc, #856]	@ (8005968 <ESP_Upkeep+0x76c>)
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	4bd4      	ldr	r3, [pc, #848]	@ (8005964 <ESP_Upkeep+0x768>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	1d7c      	adds	r4, r7, #5
 8005618:	0019      	movs	r1, r3
 800561a:	0010      	movs	r0, r2
 800561c:	f7ff fad0 	bl	8004bc0 <ATCompare>
 8005620:	0003      	movs	r3, r0
 8005622:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005624:	4bd0      	ldr	r3, [pc, #832]	@ (8005968 <ESP_Upkeep+0x76c>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d136      	bne.n	800569a <ESP_Upkeep+0x49e>
          if(ATCommand == AT_SENDDATA){
 800562c:	4bcf      	ldr	r3, [pc, #828]	@ (800596c <ESP_Upkeep+0x770>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b0f      	cmp	r3, #15
 8005632:	d108      	bne.n	8005646 <ESP_Upkeep+0x44a>
            ATCommand = AT_HTTPCPOST;
 8005634:	4bcd      	ldr	r3, [pc, #820]	@ (800596c <ESP_Upkeep+0x770>)
 8005636:	220e      	movs	r2, #14
 8005638:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800563a:	4bca      	ldr	r3, [pc, #808]	@ (8005964 <ESP_Upkeep+0x768>)
 800563c:	2202      	movs	r2, #2
 800563e:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005640:	4bcb      	ldr	r3, [pc, #812]	@ (8005970 <ESP_Upkeep+0x774>)
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005646:	4bcb      	ldr	r3, [pc, #812]	@ (8005974 <ESP_Upkeep+0x778>)
 8005648:	2204      	movs	r2, #4
 800564a:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 800564c:	4bca      	ldr	r3, [pc, #808]	@ (8005978 <ESP_Upkeep+0x77c>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	3301      	adds	r3, #1
 8005652:	b2da      	uxtb	r2, r3
 8005654:	4bc8      	ldr	r3, [pc, #800]	@ (8005978 <ESP_Upkeep+0x77c>)
 8005656:	701a      	strb	r2, [r3, #0]
          if (errorcntr == 4) {
 8005658:	4bc7      	ldr	r3, [pc, #796]	@ (8005978 <ESP_Upkeep+0x77c>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d11c      	bne.n	800569a <ESP_Upkeep+0x49e>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005660:	f007 ffc8 	bl	800d5f4 <HAL_GetTick>
 8005664:	0003      	movs	r3, r0
 8005666:	4ac5      	ldr	r2, [pc, #788]	@ (800597c <ESP_Upkeep+0x780>)
 8005668:	189a      	adds	r2, r3, r2
 800566a:	4bbd      	ldr	r3, [pc, #756]	@ (8005960 <ESP_Upkeep+0x764>)
 800566c:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 800566e:	f006 fdab 	bl	800c1c8 <ResetESPIndicator>
            clearDMABuffer();
 8005672:	f7ff fa97 	bl	8004ba4 <clearDMABuffer>
            stop = HAL_GetTick();
 8005676:	f007 ffbd 	bl	800d5f4 <HAL_GetTick>
 800567a:	0002      	movs	r2, r0
 800567c:	4bc0      	ldr	r3, [pc, #768]	@ (8005980 <ESP_Upkeep+0x784>)
 800567e:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 8005680:	4bbf      	ldr	r3, [pc, #764]	@ (8005980 <ESP_Upkeep+0x784>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4bbf      	ldr	r3, [pc, #764]	@ (8005984 <ESP_Upkeep+0x788>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	4abf      	ldr	r2, [pc, #764]	@ (8005988 <ESP_Upkeep+0x78c>)
 800568c:	49bf      	ldr	r1, [pc, #764]	@ (800598c <ESP_Upkeep+0x790>)
 800568e:	2003      	movs	r0, #3
 8005690:	f007 fc12 	bl	800ceb8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005694:	4bb7      	ldr	r3, [pc, #732]	@ (8005974 <ESP_Upkeep+0x778>)
 8005696:	220d      	movs	r2, #13
 8005698:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800569a:	4bb3      	ldr	r3, [pc, #716]	@ (8005968 <ESP_Upkeep+0x76c>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d106      	bne.n	80056b0 <ESP_Upkeep+0x4b4>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056a2:	f007 ffa7 	bl	800d5f4 <HAL_GetTick>
 80056a6:	0003      	movs	r3, r0
 80056a8:	330a      	adds	r3, #10
 80056aa:	001a      	movs	r2, r3
 80056ac:	4bac      	ldr	r3, [pc, #688]	@ (8005960 <ESP_Upkeep+0x764>)
 80056ae:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80056b0:	4bad      	ldr	r3, [pc, #692]	@ (8005968 <ESP_Upkeep+0x76c>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b0a      	cmp	r3, #10
 80056b6:	d106      	bne.n	80056c6 <ESP_Upkeep+0x4ca>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056b8:	f007 ff9c 	bl	800d5f4 <HAL_GetTick>
 80056bc:	0003      	movs	r3, r0
 80056be:	330a      	adds	r3, #10
 80056c0:	001a      	movs	r2, r3
 80056c2:	4ba7      	ldr	r3, [pc, #668]	@ (8005960 <ESP_Upkeep+0x764>)
 80056c4:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80056c6:	4ba8      	ldr	r3, [pc, #672]	@ (8005968 <ESP_Upkeep+0x76c>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b06      	cmp	r3, #6
 80056cc:	d116      	bne.n	80056fc <ESP_Upkeep+0x500>
          if(ATCommand != AT_SENDDATA){
 80056ce:	4ba7      	ldr	r3, [pc, #668]	@ (800596c <ESP_Upkeep+0x770>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b0f      	cmp	r3, #15
 80056d4:	d003      	beq.n	80056de <ESP_Upkeep+0x4e2>
            EspState = ESP_STATE_SEND;
 80056d6:	4ba7      	ldr	r3, [pc, #668]	@ (8005974 <ESP_Upkeep+0x778>)
 80056d8:	2204      	movs	r2, #4
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e00e      	b.n	80056fc <ESP_Upkeep+0x500>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 80056de:	4ba3      	ldr	r3, [pc, #652]	@ (800596c <ESP_Upkeep+0x770>)
 80056e0:	220e      	movs	r2, #14
 80056e2:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 80056e4:	4ba2      	ldr	r3, [pc, #648]	@ (8005970 <ESP_Upkeep+0x774>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	4ba0      	ldr	r3, [pc, #640]	@ (8005970 <ESP_Upkeep+0x774>)
 80056ee:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80056f0:	4b9c      	ldr	r3, [pc, #624]	@ (8005964 <ESP_Upkeep+0x768>)
 80056f2:	2202      	movs	r2, #2
 80056f4:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80056f6:	4b9f      	ldr	r3, [pc, #636]	@ (8005974 <ESP_Upkeep+0x778>)
 80056f8:	2204      	movs	r2, #4
 80056fa:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80056fc:	1d7b      	adds	r3, r7, #5
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d100      	bne.n	8005706 <ESP_Upkeep+0x50a>
 8005704:	e180      	b.n	8005a08 <ESP_Upkeep+0x80c>
          EspState = ESP_STATE_NEXT_AT;
 8005706:	4b9b      	ldr	r3, [pc, #620]	@ (8005974 <ESP_Upkeep+0x778>)
 8005708:	2205      	movs	r2, #5
 800570a:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800570c:	e17c      	b.n	8005a08 <ESP_Upkeep+0x80c>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 800570e:	4b98      	ldr	r3, [pc, #608]	@ (8005970 <ESP_Upkeep+0x774>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4b96      	ldr	r3, [pc, #600]	@ (8005970 <ESP_Upkeep+0x774>)
 8005718:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 800571a:	4b95      	ldr	r3, [pc, #596]	@ (8005970 <ESP_Upkeep+0x774>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	001a      	movs	r2, r3
 8005720:	4b9b      	ldr	r3, [pc, #620]	@ (8005990 <ESP_Upkeep+0x794>)
 8005722:	5c9a      	ldrb	r2, [r3, r2]
 8005724:	4b91      	ldr	r3, [pc, #580]	@ (800596c <ESP_Upkeep+0x770>)
 8005726:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8005728:	4b90      	ldr	r3, [pc, #576]	@ (800596c <ESP_Upkeep+0x770>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d102      	bne.n	8005736 <ESP_Upkeep+0x53a>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005730:	4b8c      	ldr	r3, [pc, #560]	@ (8005964 <ESP_Upkeep+0x768>)
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005736:	4b8d      	ldr	r3, [pc, #564]	@ (800596c <ESP_Upkeep+0x770>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b0e      	cmp	r3, #14
 800573c:	d102      	bne.n	8005744 <ESP_Upkeep+0x548>
        ATExpectation = RECEIVE_EXPECTATION_START;
 800573e:	4b89      	ldr	r3, [pc, #548]	@ (8005964 <ESP_Upkeep+0x768>)
 8005740:	2202      	movs	r2, #2
 8005742:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005744:	4b89      	ldr	r3, [pc, #548]	@ (800596c <ESP_Upkeep+0x770>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b0e      	cmp	r3, #14
 800574a:	d006      	beq.n	800575a <ESP_Upkeep+0x55e>
 800574c:	4b87      	ldr	r3, [pc, #540]	@ (800596c <ESP_Upkeep+0x770>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d002      	beq.n	800575a <ESP_Upkeep+0x55e>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005754:	4b83      	ldr	r3, [pc, #524]	@ (8005964 <ESP_Upkeep+0x768>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 800575a:	4b84      	ldr	r3, [pc, #528]	@ (800596c <ESP_Upkeep+0x770>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b11      	cmp	r3, #17
 8005760:	d102      	bne.n	8005768 <ESP_Upkeep+0x56c>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005762:	4b80      	ldr	r3, [pc, #512]	@ (8005964 <ESP_Upkeep+0x768>)
 8005764:	2205      	movs	r2, #5
 8005766:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8005768:	4b82      	ldr	r3, [pc, #520]	@ (8005974 <ESP_Upkeep+0x778>)
 800576a:	2204      	movs	r2, #4
 800576c:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 800576e:	4b7f      	ldr	r3, [pc, #508]	@ (800596c <ESP_Upkeep+0x770>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b14      	cmp	r3, #20
 8005774:	d000      	beq.n	8005778 <ESP_Upkeep+0x57c>
 8005776:	e149      	b.n	8005a0c <ESP_Upkeep+0x810>
        if(Mode == AT_MODE_SEND){
 8005778:	4b86      	ldr	r3, [pc, #536]	@ (8005994 <ESP_Upkeep+0x798>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d11d      	bne.n	80057bc <ESP_Upkeep+0x5c0>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 8005780:	f007 ff38 	bl	800d5f4 <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	4a7d      	ldr	r2, [pc, #500]	@ (800597c <ESP_Upkeep+0x780>)
 8005788:	189a      	adds	r2, r3, r2
 800578a:	4b75      	ldr	r3, [pc, #468]	@ (8005960 <ESP_Upkeep+0x764>)
 800578c:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 800578e:	f006 fd1b 	bl	800c1c8 <ResetESPIndicator>
          clearDMABuffer();
 8005792:	f7ff fa07 	bl	8004ba4 <clearDMABuffer>
          stop = HAL_GetTick();
 8005796:	f007 ff2d 	bl	800d5f4 <HAL_GetTick>
 800579a:	0002      	movs	r2, r0
 800579c:	4b78      	ldr	r3, [pc, #480]	@ (8005980 <ESP_Upkeep+0x784>)
 800579e:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 80057a0:	4b77      	ldr	r3, [pc, #476]	@ (8005980 <ESP_Upkeep+0x784>)
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	4b77      	ldr	r3, [pc, #476]	@ (8005984 <ESP_Upkeep+0x788>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	4a7b      	ldr	r2, [pc, #492]	@ (8005998 <ESP_Upkeep+0x79c>)
 80057ac:	4977      	ldr	r1, [pc, #476]	@ (800598c <ESP_Upkeep+0x790>)
 80057ae:	2003      	movs	r0, #3
 80057b0:	f007 fb82 	bl	800ceb8 <CreateLine>
          EspState = ESP_STATE_DEINIT;
 80057b4:	4b6f      	ldr	r3, [pc, #444]	@ (8005974 <ESP_Upkeep+0x778>)
 80057b6:	220d      	movs	r2, #13
 80057b8:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80057ba:	e127      	b.n	8005a0c <ESP_Upkeep+0x810>
        else if (Mode == AT_MODE_GETTIME) {
 80057bc:	4b75      	ldr	r3, [pc, #468]	@ (8005994 <ESP_Upkeep+0x798>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b05      	cmp	r3, #5
 80057c2:	d12e      	bne.n	8005822 <ESP_Upkeep+0x626>
            setTime = false;
 80057c4:	4b75      	ldr	r3, [pc, #468]	@ (800599c <ESP_Upkeep+0x7a0>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 80057ca:	f007 ff13 	bl	800d5f4 <HAL_GetTick>
 80057ce:	0003      	movs	r3, r0
 80057d0:	4a73      	ldr	r2, [pc, #460]	@ (80059a0 <ESP_Upkeep+0x7a4>)
 80057d2:	189a      	adds	r2, r3, r2
 80057d4:	4b73      	ldr	r3, [pc, #460]	@ (80059a4 <ESP_Upkeep+0x7a8>)
 80057d6:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 80057d8:	4b72      	ldr	r3, [pc, #456]	@ (80059a4 <ESP_Upkeep+0x7a8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a72      	ldr	r2, [pc, #456]	@ (80059a8 <ESP_Upkeep+0x7ac>)
 80057de:	496b      	ldr	r1, [pc, #428]	@ (800598c <ESP_Upkeep+0x790>)
 80057e0:	2003      	movs	r0, #3
 80057e2:	f007 fb69 	bl	800ceb8 <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 80057e6:	4b71      	ldr	r3, [pc, #452]	@ (80059ac <ESP_Upkeep+0x7b0>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b5d      	ldr	r3, [pc, #372]	@ (8005960 <ESP_Upkeep+0x764>)
 80057ec:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 80057ee:	f006 fceb 	bl	800c1c8 <ResetESPIndicator>
            clearDMABuffer();
 80057f2:	f7ff f9d7 	bl	8004ba4 <clearDMABuffer>
            stop = HAL_GetTick();
 80057f6:	f007 fefd 	bl	800d5f4 <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	4b60      	ldr	r3, [pc, #384]	@ (8005980 <ESP_Upkeep+0x784>)
 80057fe:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 8005800:	4b5f      	ldr	r3, [pc, #380]	@ (8005980 <ESP_Upkeep+0x784>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b5f      	ldr	r3, [pc, #380]	@ (8005984 <ESP_Upkeep+0x788>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	4a69      	ldr	r2, [pc, #420]	@ (80059b0 <ESP_Upkeep+0x7b4>)
 800580c:	495f      	ldr	r1, [pc, #380]	@ (800598c <ESP_Upkeep+0x790>)
 800580e:	2003      	movs	r0, #3
 8005810:	f007 fb52 	bl	800ceb8 <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005814:	4b57      	ldr	r3, [pc, #348]	@ (8005974 <ESP_Upkeep+0x778>)
 8005816:	220d      	movs	r2, #13
 8005818:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 800581a:	4b5e      	ldr	r3, [pc, #376]	@ (8005994 <ESP_Upkeep+0x798>)
 800581c:	2202      	movs	r2, #2
 800581e:	701a      	strb	r2, [r3, #0]
    break;
 8005820:	e0f4      	b.n	8005a0c <ESP_Upkeep+0x810>
          EspState = ESP_STATE_RESET;
 8005822:	4b54      	ldr	r3, [pc, #336]	@ (8005974 <ESP_Upkeep+0x778>)
 8005824:	2209      	movs	r2, #9
 8005826:	701a      	strb	r2, [r3, #0]
    break;
 8005828:	e0f0      	b.n	8005a0c <ESP_Upkeep+0x810>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 800582a:	4b62      	ldr	r3, [pc, #392]	@ (80059b4 <ESP_Upkeep+0x7b8>)
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005830:	4b61      	ldr	r3, [pc, #388]	@ (80059b8 <ESP_Upkeep+0x7bc>)
 8005832:	2200      	movs	r2, #0
 8005834:	2101      	movs	r1, #1
 8005836:	0018      	movs	r0, r3
 8005838:	f009 f93b 	bl	800eab2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800583c:	2001      	movs	r0, #1
 800583e:	f007 fee3 	bl	800d608 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005842:	2380      	movs	r3, #128	@ 0x80
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	485d      	ldr	r0, [pc, #372]	@ (80059bc <ESP_Upkeep+0x7c0>)
 8005848:	2200      	movs	r2, #0
 800584a:	0019      	movs	r1, r3
 800584c:	f009 f931 	bl	800eab2 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005850:	2001      	movs	r0, #1
 8005852:	f007 fed9 	bl	800d608 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005856:	4b58      	ldr	r3, [pc, #352]	@ (80059b8 <ESP_Upkeep+0x7bc>)
 8005858:	2200      	movs	r2, #0
 800585a:	2102      	movs	r1, #2
 800585c:	0018      	movs	r0, r3
 800585e:	f009 f928 	bl	800eab2 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 8005862:	4b44      	ldr	r3, [pc, #272]	@ (8005974 <ESP_Upkeep+0x778>)
 8005864:	2209      	movs	r2, #9
 8005866:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 8005868:	2001      	movs	r0, #1
 800586a:	f007 fecd 	bl	800d608 <HAL_Delay>
      errorcntr = 0;
 800586e:	4b42      	ldr	r3, [pc, #264]	@ (8005978 <ESP_Upkeep+0x77c>)
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
      break;
 8005874:	e0cd      	b.n	8005a12 <ESP_Upkeep+0x816>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 8005876:	4b3a      	ldr	r3, [pc, #232]	@ (8005960 <ESP_Upkeep+0x764>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	0018      	movs	r0, r3
 800587c:	f007 fac6 	bl	800ce0c <TimestampIsReached>
 8005880:	1e03      	subs	r3, r0, #0
 8005882:	d103      	bne.n	800588c <ESP_Upkeep+0x690>
 8005884:	4b4e      	ldr	r3, [pc, #312]	@ (80059c0 <ESP_Upkeep+0x7c4>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d035      	beq.n	80058f8 <ESP_Upkeep+0x6fc>
        if(Mode == AT_MODE_INIT){
 800588c:	4b41      	ldr	r3, [pc, #260]	@ (8005994 <ESP_Upkeep+0x798>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d105      	bne.n	80058a0 <ESP_Upkeep+0x6a4>
          InitIsDone = true;
 8005894:	4b4b      	ldr	r3, [pc, #300]	@ (80059c4 <ESP_Upkeep+0x7c8>)
 8005896:	2201      	movs	r2, #1
 8005898:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800589a:	4b36      	ldr	r3, [pc, #216]	@ (8005974 <ESP_Upkeep+0x778>)
 800589c:	220b      	movs	r2, #11
 800589e:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80058a0:	4b3c      	ldr	r3, [pc, #240]	@ (8005994 <ESP_Upkeep+0x798>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d108      	bne.n	80058ba <ESP_Upkeep+0x6be>
          ConnectionMade = true;
 80058a8:	4b47      	ldr	r3, [pc, #284]	@ (80059c8 <ESP_Upkeep+0x7cc>)
 80058aa:	2201      	movs	r2, #1
 80058ac:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80058ae:	4b47      	ldr	r3, [pc, #284]	@ (80059cc <ESP_Upkeep+0x7d0>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80058b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005974 <ESP_Upkeep+0x778>)
 80058b6:	220b      	movs	r2, #11
 80058b8:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80058ba:	4b36      	ldr	r3, [pc, #216]	@ (8005994 <ESP_Upkeep+0x798>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d102      	bne.n	80058c8 <ESP_Upkeep+0x6cc>
          EspState = ESP_STATE_INIT;
 80058c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005974 <ESP_Upkeep+0x778>)
 80058c4:	2202      	movs	r2, #2
 80058c6:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 80058c8:	4b32      	ldr	r3, [pc, #200]	@ (8005994 <ESP_Upkeep+0x798>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d108      	bne.n	80058e2 <ESP_Upkeep+0x6e6>
          EspState = ESP_STATE_CONFIG;
 80058d0:	4b28      	ldr	r3, [pc, #160]	@ (8005974 <ESP_Upkeep+0x778>)
 80058d2:	220e      	movs	r2, #14
 80058d4:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 80058d6:	4a3e      	ldr	r2, [pc, #248]	@ (80059d0 <ESP_Upkeep+0x7d4>)
 80058d8:	4b2c      	ldr	r3, [pc, #176]	@ (800598c <ESP_Upkeep+0x790>)
 80058da:	0019      	movs	r1, r3
 80058dc:	2003      	movs	r0, #3
 80058de:	f007 faeb 	bl	800ceb8 <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 80058e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005994 <ESP_Upkeep+0x798>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d127      	bne.n	800593a <ESP_Upkeep+0x73e>
          EspState = ESP_STATE_MODE_SELECT;
 80058ea:	4b22      	ldr	r3, [pc, #136]	@ (8005974 <ESP_Upkeep+0x778>)
 80058ec:	220b      	movs	r2, #11
 80058ee:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 80058f0:	4b38      	ldr	r3, [pc, #224]	@ (80059d4 <ESP_Upkeep+0x7d8>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 80058f6:	e020      	b.n	800593a <ESP_Upkeep+0x73e>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 80058f8:	4b2a      	ldr	r3, [pc, #168]	@ (80059a4 <ESP_Upkeep+0x7a8>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	0018      	movs	r0, r3
 80058fe:	f007 fa85 	bl	800ce0c <TimestampIsReached>
 8005902:	1e03      	subs	r3, r0, #0
 8005904:	d100      	bne.n	8005908 <ESP_Upkeep+0x70c>
 8005906:	e083      	b.n	8005a10 <ESP_Upkeep+0x814>
        if(Mode == AT_MODE_SEND ) {
 8005908:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <ESP_Upkeep+0x798>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d000      	beq.n	8005912 <ESP_Upkeep+0x716>
 8005910:	e07e      	b.n	8005a10 <ESP_Upkeep+0x814>
            Mode = AT_MODE_GETTIME;
 8005912:	4b20      	ldr	r3, [pc, #128]	@ (8005994 <ESP_Upkeep+0x798>)
 8005914:	2205      	movs	r2, #5
 8005916:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005918:	4b16      	ldr	r3, [pc, #88]	@ (8005974 <ESP_Upkeep+0x778>)
 800591a:	2202      	movs	r2, #2
 800591c:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 800591e:	4b10      	ldr	r3, [pc, #64]	@ (8005960 <ESP_Upkeep+0x764>)
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b22      	ldr	r3, [pc, #136]	@ (80059ac <ESP_Upkeep+0x7b0>)
 8005924:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005926:	4b1d      	ldr	r3, [pc, #116]	@ (800599c <ESP_Upkeep+0x7a0>)
 8005928:	2201      	movs	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 800592c:	4a2a      	ldr	r2, [pc, #168]	@ (80059d8 <ESP_Upkeep+0x7dc>)
 800592e:	4b17      	ldr	r3, [pc, #92]	@ (800598c <ESP_Upkeep+0x790>)
 8005930:	0019      	movs	r1, r3
 8005932:	2003      	movs	r0, #3
 8005934:	f007 fac0 	bl	800ceb8 <CreateLine>
        }
      }
      break;
 8005938:	e06a      	b.n	8005a10 <ESP_Upkeep+0x814>
 800593a:	e069      	b.n	8005a10 <ESP_Upkeep+0x814>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 800593c:	f015 fcd6 	bl	801b2ec <GetUsbRxPointer>
 8005940:	0003      	movs	r3, r0
 8005942:	0018      	movs	r0, r3
 8005944:	f000 f8e4 	bl	8005b10 <Process_PC_Config>
      break;
 8005948:	e063      	b.n	8005a12 <ESP_Upkeep+0x816>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 800594a:	4a24      	ldr	r2, [pc, #144]	@ (80059dc <ESP_Upkeep+0x7e0>)
 800594c:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <ESP_Upkeep+0x790>)
 800594e:	0019      	movs	r1, r3
 8005950:	2003      	movs	r0, #3
 8005952:	f007 fab1 	bl	800ceb8 <CreateLine>
      EspState = ESP_STATE_INIT;
 8005956:	4b07      	ldr	r3, [pc, #28]	@ (8005974 <ESP_Upkeep+0x778>)
 8005958:	2202      	movs	r2, #2
 800595a:	701a      	strb	r2, [r3, #0]
      break;
 800595c:	e059      	b.n	8005a12 <ESP_Upkeep+0x816>
 800595e:	46c0      	nop			@ (mov r8, r8)
 8005960:	20000994 	.word	0x20000994
 8005964:	200009a1 	.word	0x200009a1
 8005968:	2000002a 	.word	0x2000002a
 800596c:	200009a2 	.word	0x200009a2
 8005970:	20000992 	.word	0x20000992
 8005974:	20000028 	.word	0x20000028
 8005978:	20000993 	.word	0x20000993
 800597c:	000493e0 	.word	0x000493e0
 8005980:	20000564 	.word	0x20000564
 8005984:	20000560 	.word	0x20000560
 8005988:	08021e74 	.word	0x08021e74
 800598c:	08021680 	.word	0x08021680
 8005990:	20000988 	.word	0x20000988
 8005994:	200009a3 	.word	0x200009a3
 8005998:	08021ea8 	.word	0x08021ea8
 800599c:	20000001 	.word	0x20000001
 80059a0:	002c4020 	.word	0x002c4020
 80059a4:	20000998 	.word	0x20000998
 80059a8:	08021ec0 	.word	0x08021ec0
 80059ac:	2000099c 	.word	0x2000099c
 80059b0:	08021f04 	.word	0x08021f04
 80059b4:	2000054c 	.word	0x2000054c
 80059b8:	50001c00 	.word	0x50001c00
 80059bc:	50000800 	.word	0x50000800
 80059c0:	2000054f 	.word	0x2000054f
 80059c4:	2000054d 	.word	0x2000054d
 80059c8:	20000550 	.word	0x20000550
 80059cc:	20000552 	.word	0x20000552
 80059d0:	08021f24 	.word	0x08021f24
 80059d4:	20000551 	.word	0x20000551
 80059d8:	08021f3c 	.word	0x08021f3c
 80059dc:	08021f4c 	.word	0x08021f4c

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 80059e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005a20 <ESP_Upkeep+0x824>)
 80059e2:	4b10      	ldr	r3, [pc, #64]	@ (8005a24 <ESP_Upkeep+0x828>)
 80059e4:	0019      	movs	r1, r3
 80059e6:	2003      	movs	r0, #3
 80059e8:	f007 fa66 	bl	800ceb8 <CreateLine>
      EspState = ESP_STATE_ERROR;
 80059ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005a28 <ESP_Upkeep+0x82c>)
 80059ee:	2207      	movs	r2, #7
 80059f0:	701a      	strb	r2, [r3, #0]
      break;
 80059f2:	e00e      	b.n	8005a12 <ESP_Upkeep+0x816>
      break;
 80059f4:	46c0      	nop			@ (mov r8, r8)
 80059f6:	e00c      	b.n	8005a12 <ESP_Upkeep+0x816>
      break;
 80059f8:	46c0      	nop			@ (mov r8, r8)
 80059fa:	e00a      	b.n	8005a12 <ESP_Upkeep+0x816>
        break;
 80059fc:	46c0      	nop			@ (mov r8, r8)
 80059fe:	e008      	b.n	8005a12 <ESP_Upkeep+0x816>
    break;
 8005a00:	46c0      	nop			@ (mov r8, r8)
 8005a02:	e006      	b.n	8005a12 <ESP_Upkeep+0x816>
    break;
 8005a04:	46c0      	nop			@ (mov r8, r8)
 8005a06:	e004      	b.n	8005a12 <ESP_Upkeep+0x816>
      break;
 8005a08:	46c0      	nop			@ (mov r8, r8)
 8005a0a:	e002      	b.n	8005a12 <ESP_Upkeep+0x816>
    break;
 8005a0c:	46c0      	nop			@ (mov r8, r8)
 8005a0e:	e000      	b.n	8005a12 <ESP_Upkeep+0x816>
      break;
 8005a10:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005a12:	4b05      	ldr	r3, [pc, #20]	@ (8005a28 <ESP_Upkeep+0x82c>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
}
 8005a16:	0018      	movs	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a1e:	46c0      	nop			@ (mov r8, r8)
 8005a20:	08021f60 	.word	0x08021f60
 8005a24:	08021680 	.word	0x08021680
 8005a28:	20000028 	.word	0x20000028

08005a2c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005a34:	4b09      	ldr	r3, [pc, #36]	@ (8005a5c <I2CSensors_Init+0x30>)
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005a3a:	4a09      	ldr	r2, [pc, #36]	@ (8005a60 <I2CSensors_Init+0x34>)
 8005a3c:	4b09      	ldr	r3, [pc, #36]	@ (8005a64 <I2CSensors_Init+0x38>)
 8005a3e:	0011      	movs	r1, r2
 8005a40:	0018      	movs	r0, r3
 8005a42:	f001 f9a7 	bl	8006d94 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005a46:	4a06      	ldr	r2, [pc, #24]	@ (8005a60 <I2CSensors_Init+0x34>)
 8005a48:	4b06      	ldr	r3, [pc, #24]	@ (8005a64 <I2CSensors_Init+0x38>)
 8005a4a:	0011      	movs	r1, r2
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f001 f811 	bl	8006a74 <Gas_Init>
}
 8005a52:	46c0      	nop			@ (mov r8, r8)
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	20000aac 	.word	0x20000aac
 8005a60:	08005abd 	.word	0x08005abd
 8005a64:	08005a69 	.word	0x08005a69

08005a68 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005a68:	b5b0      	push	{r4, r5, r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6039      	str	r1, [r7, #0]
 8005a70:	0011      	movs	r1, r2
 8005a72:	1dfb      	adds	r3, r7, #7
 8005a74:	1c02      	adds	r2, r0, #0
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	1dbb      	adds	r3, r7, #6
 8005a7a:	1c0a      	adds	r2, r1, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ab8 <ReadI2C+0x50>)
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	1dfb      	adds	r3, r7, #7
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	18db      	adds	r3, r3, r3
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	1dbb      	adds	r3, r7, #6
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	250f      	movs	r5, #15
 8005a94:	197c      	adds	r4, r7, r5
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	f009 fbd4 	bl	800f244 <HAL_I2C_Master_Receive_DMA>
 8005a9c:	0003      	movs	r3, r0
 8005a9e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005aa0:	197b      	adds	r3, r7, r5
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <ReadI2C+0x44>
        return false;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e000      	b.n	8005aae <ReadI2C+0x46>
    }
    return true;
 8005aac:	2301      	movs	r3, #1
}
 8005aae:	0018      	movs	r0, r3
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	b004      	add	sp, #16
 8005ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ab6:	46c0      	nop			@ (mov r8, r8)
 8005ab8:	20000aac 	.word	0x20000aac

08005abc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005abc:	b5b0      	push	{r4, r5, r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6039      	str	r1, [r7, #0]
 8005ac4:	0011      	movs	r1, r2
 8005ac6:	1dfb      	adds	r3, r7, #7
 8005ac8:	1c02      	adds	r2, r0, #0
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	1dbb      	adds	r3, r7, #6
 8005ace:	1c0a      	adds	r2, r1, #0
 8005ad0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8005b0c <WriteI2C+0x50>)
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	1dfb      	adds	r3, r7, #7
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	18db      	adds	r3, r3, r3
 8005ade:	b299      	uxth	r1, r3
 8005ae0:	1dbb      	adds	r3, r7, #6
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	250f      	movs	r5, #15
 8005ae8:	197c      	adds	r4, r7, r5
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	f009 faa4 	bl	800f038 <HAL_I2C_Master_Transmit_DMA>
 8005af0:	0003      	movs	r3, r0
 8005af2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005af4:	197b      	adds	r3, r7, r5
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <WriteI2C+0x44>
        return false;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <WriteI2C+0x46>
    }
    return true;
 8005b00:	2301      	movs	r3, #1
}
 8005b02:	0018      	movs	r0, r3
 8005b04:	46bd      	mov	sp, r7
 8005b06:	b004      	add	sp, #16
 8005b08:	bdb0      	pop	{r4, r5, r7, pc}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	20000aac 	.word	0x20000aac

08005b10 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005b10:	b590      	push	{r4, r7, lr}
 8005b12:	b0c3      	sub	sp, #268	@ 0x10c
 8005b14:	af3e      	add	r7, sp, #248	@ 0xf8
 8005b16:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005b18:	f015 fc08 	bl	801b32c <GetUsbRxDataSize>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b05      	cmp	r3, #5
 8005b24:	d971      	bls.n	8005c0a <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2123      	movs	r1, #35	@ 0x23
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f018 fdfe 	bl	801e72c <strchr>
 8005b30:	0003      	movs	r3, r0
 8005b32:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d065      	beq.n	8005c06 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785a      	ldrb	r2, [r3, #1]
 8005b3e:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b40:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	789a      	ldrb	r2, [r3, #2]
 8005b46:	4b32      	ldr	r3, [pc, #200]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b48:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005b4a:	4b31      	ldr	r3, [pc, #196]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	3305      	adds	r3, #5
 8005b50:	001a      	movs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d351      	bcc.n	8005bfc <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	1cd9      	adds	r1, r3, #3
 8005b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b5e:	785b      	ldrb	r3, [r3, #1]
 8005b60:	001a      	movs	r2, r3
 8005b62:	4b2c      	ldr	r3, [pc, #176]	@ (8005c14 <Process_PC_Config+0x104>)
 8005b64:	0018      	movs	r0, r3
 8005b66:	f018 feb5 	bl	801e8d4 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005b6a:	4b29      	ldr	r3, [pc, #164]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b6c:	785b      	ldrb	r3, [r3, #1]
 8005b6e:	3303      	adds	r3, #3
 8005b70:	001a      	movs	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	189b      	adds	r3, r3, r2
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	b21a      	sxth	r2, r3
 8005b7c:	4b24      	ldr	r3, [pc, #144]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	3304      	adds	r3, #4
 8005b82:	68b9      	ldr	r1, [r7, #8]
 8005b84:	18cb      	adds	r3, r1, r3
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	b21b      	sxth	r3, r3
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	b21b      	sxth	r3, r3
 8005b8e:	b299      	uxth	r1, r3
 8005b90:	4a1f      	ldr	r2, [pc, #124]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b92:	2381      	movs	r3, #129	@ 0x81
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005b98:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <Process_PC_Config+0x100>)
 8005b9a:	2381      	movs	r3, #129	@ 0x81
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	5ad4      	ldrh	r4, [r2, r3]
 8005ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c10 <Process_PC_Config+0x100>)
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	3303      	adds	r3, #3
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	0011      	movs	r1, r2
 8005bac:	0018      	movs	r0, r3
 8005bae:	f000 f975 	bl	8005e9c <CRC16_ARC>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	429c      	cmp	r4, r3
 8005bb6:	d007      	beq.n	8005bc8 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005bb8:	4b15      	ldr	r3, [pc, #84]	@ (8005c10 <Process_PC_Config+0x100>)
 8005bba:	785a      	ldrb	r2, [r3, #1]
 8005bbc:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <Process_PC_Config+0x104>)
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f000 f919 	bl	8005df8 <Create_Message>
 8005bc6:	e016      	b.n	8005bf6 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005bc8:	4c11      	ldr	r4, [pc, #68]	@ (8005c10 <Process_PC_Config+0x100>)
 8005bca:	466b      	mov	r3, sp
 8005bcc:	0018      	movs	r0, r3
 8005bce:	0023      	movs	r3, r4
 8005bd0:	3310      	adds	r3, #16
 8005bd2:	22f4      	movs	r2, #244	@ 0xf4
 8005bd4:	0019      	movs	r1, r3
 8005bd6:	f018 fe7d 	bl	801e8d4 <memcpy>
 8005bda:	6820      	ldr	r0, [r4, #0]
 8005bdc:	6861      	ldr	r1, [r4, #4]
 8005bde:	68a2      	ldr	r2, [r4, #8]
 8005be0:	68e3      	ldr	r3, [r4, #12]
 8005be2:	f000 f819 	bl	8005c18 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005be6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <Process_PC_Config+0x100>)
 8005be8:	7818      	ldrb	r0, [r3, #0]
 8005bea:	4b09      	ldr	r3, [pc, #36]	@ (8005c10 <Process_PC_Config+0x100>)
 8005bec:	785a      	ldrb	r2, [r3, #1]
 8005bee:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <Process_PC_Config+0x104>)
 8005bf0:	0019      	movs	r1, r3
 8005bf2:	f000 f901 	bl	8005df8 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005bf6:	f015 fb81 	bl	801b2fc <ResetUsbRxDataSize>
                return;
 8005bfa:	e006      	b.n	8005c0a <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	0018      	movs	r0, r3
 8005c00:	f015 fb9e 	bl	801b340 <GetUsbRxNextChunk>
 8005c04:	e001      	b.n	8005c0a <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005c06:	f015 fb79 	bl	801b2fc <ResetUsbRxDataSize>
        }
    }
}
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	b005      	add	sp, #20
 8005c0e:	bd90      	pop	{r4, r7, pc}
 8005c10:	20000ab0 	.word	0x20000ab0
 8005c14:	20000ab2 	.word	0x20000ab2

08005c18 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005c18:	b084      	sub	sp, #16
 8005c1a:	b5b0      	push	{r4, r5, r7, lr}
 8005c1c:	b082      	sub	sp, #8
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	2518      	movs	r5, #24
 8005c22:	197c      	adds	r4, r7, r5
 8005c24:	6020      	str	r0, [r4, #0]
 8005c26:	6061      	str	r1, [r4, #4]
 8005c28:	60a2      	str	r2, [r4, #8]
 8005c2a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005c2c:	197b      	adds	r3, r7, r5
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c32:	d100      	bne.n	8005c36 <ProcessCmd+0x1e>
 8005c34:	e09c      	b.n	8005d70 <ProcessCmd+0x158>
 8005c36:	dd00      	ble.n	8005c3a <ProcessCmd+0x22>
 8005c38:	e0bc      	b.n	8005db4 <ProcessCmd+0x19c>
 8005c3a:	2b0c      	cmp	r3, #12
 8005c3c:	dc0a      	bgt.n	8005c54 <ProcessCmd+0x3c>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da00      	bge.n	8005c44 <ProcessCmd+0x2c>
 8005c42:	e0b7      	b.n	8005db4 <ProcessCmd+0x19c>
 8005c44:	2b0c      	cmp	r3, #12
 8005c46:	d900      	bls.n	8005c4a <ProcessCmd+0x32>
 8005c48:	e0b4      	b.n	8005db4 <ProcessCmd+0x19c>
 8005c4a:	009a      	lsls	r2, r3, #2
 8005c4c:	4b5d      	ldr	r3, [pc, #372]	@ (8005dc4 <ProcessCmd+0x1ac>)
 8005c4e:	18d3      	adds	r3, r2, r3
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	469f      	mov	pc, r3
 8005c54:	2bfd      	cmp	r3, #253	@ 0xfd
 8005c56:	d100      	bne.n	8005c5a <ProcessCmd+0x42>
 8005c58:	e084      	b.n	8005d64 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005c5a:	e0ab      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c5c:	2118      	movs	r1, #24
 8005c5e:	187b      	adds	r3, r7, r1
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	001a      	movs	r2, r3
 8005c64:	187b      	adds	r3, r7, r1
 8005c66:	1c99      	adds	r1, r3, #2
 8005c68:	4857      	ldr	r0, [pc, #348]	@ (8005dc8 <ProcessCmd+0x1b0>)
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	f7fd fd28 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c70:	e0a0      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c72:	2118      	movs	r1, #24
 8005c74:	187b      	adds	r3, r7, r1
 8005c76:	785b      	ldrb	r3, [r3, #1]
 8005c78:	001a      	movs	r2, r3
 8005c7a:	187b      	adds	r3, r7, r1
 8005c7c:	1c99      	adds	r1, r3, #2
 8005c7e:	4853      	ldr	r0, [pc, #332]	@ (8005dcc <ProcessCmd+0x1b4>)
 8005c80:	230c      	movs	r3, #12
 8005c82:	f7fd fd1d 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c86:	e095      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c88:	2118      	movs	r1, #24
 8005c8a:	187b      	adds	r3, r7, r1
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	001a      	movs	r2, r3
 8005c90:	187b      	adds	r3, r7, r1
 8005c92:	1c99      	adds	r1, r3, #2
 8005c94:	484e      	ldr	r0, [pc, #312]	@ (8005dd0 <ProcessCmd+0x1b8>)
 8005c96:	230c      	movs	r3, #12
 8005c98:	f7fd fd12 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005c9c:	e08a      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c9e:	2118      	movs	r1, #24
 8005ca0:	187b      	adds	r3, r7, r1
 8005ca2:	785b      	ldrb	r3, [r3, #1]
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	187b      	adds	r3, r7, r1
 8005ca8:	1c99      	adds	r1, r3, #2
 8005caa:	484a      	ldr	r0, [pc, #296]	@ (8005dd4 <ProcessCmd+0x1bc>)
 8005cac:	230c      	movs	r3, #12
 8005cae:	f7fd fd07 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cb2:	e07f      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cb4:	2118      	movs	r1, #24
 8005cb6:	187b      	adds	r3, r7, r1
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	001a      	movs	r2, r3
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	1c99      	adds	r1, r3, #2
 8005cc0:	4845      	ldr	r0, [pc, #276]	@ (8005dd8 <ProcessCmd+0x1c0>)
 8005cc2:	230c      	movs	r3, #12
 8005cc4:	f7fd fcfc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cc8:	e074      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cca:	2118      	movs	r1, #24
 8005ccc:	187b      	adds	r3, r7, r1
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	187b      	adds	r3, r7, r1
 8005cd4:	1c99      	adds	r1, r3, #2
 8005cd6:	4841      	ldr	r0, [pc, #260]	@ (8005ddc <ProcessCmd+0x1c4>)
 8005cd8:	230c      	movs	r3, #12
 8005cda:	f7fd fcf1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cde:	e069      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ce0:	2118      	movs	r1, #24
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	785b      	ldrb	r3, [r3, #1]
 8005ce6:	001a      	movs	r2, r3
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	1c99      	adds	r1, r3, #2
 8005cec:	483c      	ldr	r0, [pc, #240]	@ (8005de0 <ProcessCmd+0x1c8>)
 8005cee:	230c      	movs	r3, #12
 8005cf0:	f7fd fce6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cf4:	e05e      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005cf6:	2118      	movs	r1, #24
 8005cf8:	187b      	adds	r3, r7, r1
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	001a      	movs	r2, r3
 8005cfe:	187b      	adds	r3, r7, r1
 8005d00:	1c99      	adds	r1, r3, #2
 8005d02:	4838      	ldr	r0, [pc, #224]	@ (8005de4 <ProcessCmd+0x1cc>)
 8005d04:	231e      	movs	r3, #30
 8005d06:	f7fd fcdb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d0a:	e053      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d0c:	2118      	movs	r1, #24
 8005d0e:	187b      	adds	r3, r7, r1
 8005d10:	785b      	ldrb	r3, [r3, #1]
 8005d12:	001a      	movs	r2, r3
 8005d14:	187b      	adds	r3, r7, r1
 8005d16:	1c99      	adds	r1, r3, #2
 8005d18:	4833      	ldr	r0, [pc, #204]	@ (8005de8 <ProcessCmd+0x1d0>)
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	f7fd fcd0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d20:	e048      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d22:	2118      	movs	r1, #24
 8005d24:	187b      	adds	r3, r7, r1
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	001a      	movs	r2, r3
 8005d2a:	187b      	adds	r3, r7, r1
 8005d2c:	1c99      	adds	r1, r3, #2
 8005d2e:	482f      	ldr	r0, [pc, #188]	@ (8005dec <ProcessCmd+0x1d4>)
 8005d30:	230c      	movs	r3, #12
 8005d32:	f7fd fcc5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d36:	e03d      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d38:	2118      	movs	r1, #24
 8005d3a:	187b      	adds	r3, r7, r1
 8005d3c:	785b      	ldrb	r3, [r3, #1]
 8005d3e:	001a      	movs	r2, r3
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	1c99      	adds	r1, r3, #2
 8005d44:	482a      	ldr	r0, [pc, #168]	@ (8005df0 <ProcessCmd+0x1d8>)
 8005d46:	230c      	movs	r3, #12
 8005d48:	f7fd fcba 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d4c:	e032      	b.n	8005db4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d4e:	2118      	movs	r1, #24
 8005d50:	187b      	adds	r3, r7, r1
 8005d52:	785b      	ldrb	r3, [r3, #1]
 8005d54:	001a      	movs	r2, r3
 8005d56:	187b      	adds	r3, r7, r1
 8005d58:	1c99      	adds	r1, r3, #2
 8005d5a:	4826      	ldr	r0, [pc, #152]	@ (8005df4 <ProcessCmd+0x1dc>)
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	f7fd fcaf 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d62:	e027      	b.n	8005db4 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005d64:	4b18      	ldr	r3, [pc, #96]	@ (8005dc8 <ProcessCmd+0x1b0>)
 8005d66:	21ba      	movs	r1, #186	@ 0xba
 8005d68:	0018      	movs	r0, r3
 8005d6a:	f7fd fcee 	bl	800374a <ClearEEprom>
        break;
 8005d6e:	e021      	b.n	8005db4 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005d70:	2118      	movs	r1, #24
 8005d72:	187b      	adds	r3, r7, r1
 8005d74:	789b      	ldrb	r3, [r3, #2]
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	b21a      	sxth	r2, r3
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	78db      	ldrb	r3, [r3, #3]
 8005d7e:	b21b      	sxth	r3, r3
 8005d80:	4313      	orrs	r3, r2
 8005d82:	b21a      	sxth	r2, r3
 8005d84:	1dbb      	adds	r3, r7, #6
 8005d86:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005d88:	1dbb      	adds	r3, r7, #6
 8005d8a:	881a      	ldrh	r2, [r3, #0]
 8005d8c:	23c0      	movs	r3, #192	@ 0xc0
 8005d8e:	015b      	lsls	r3, r3, #5
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d207      	bcs.n	8005da4 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005d94:	1dbb      	adds	r3, r7, #6
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc8 <ProcessCmd+0x1b0>)
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	0010      	movs	r0, r2
 8005d9e:	f7fd fcd4 	bl	800374a <ClearEEprom>
            break;
 8005da2:	e006      	b.n	8005db2 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005da4:	23c0      	movs	r3, #192	@ 0xc0
 8005da6:	015b      	lsls	r3, r3, #5
 8005da8:	4a07      	ldr	r2, [pc, #28]	@ (8005dc8 <ProcessCmd+0x1b0>)
 8005daa:	0019      	movs	r1, r3
 8005dac:	0010      	movs	r0, r2
 8005dae:	f7fd fccc 	bl	800374a <ClearEEprom>
            break;
 8005db2:	46c0      	nop			@ (mov r8, r8)
}
 8005db4:	46c0      	nop			@ (mov r8, r8)
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bcb0      	pop	{r4, r5, r7}
 8005dbc:	bc08      	pop	{r3}
 8005dbe:	b004      	add	sp, #16
 8005dc0:	4718      	bx	r3
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	08023138 	.word	0x08023138
 8005dc8:	08080000 	.word	0x08080000
 8005dcc:	0808000c 	.word	0x0808000c
 8005dd0:	08080018 	.word	0x08080018
 8005dd4:	08080024 	.word	0x08080024
 8005dd8:	08080030 	.word	0x08080030
 8005ddc:	0808003c 	.word	0x0808003c
 8005de0:	08080048 	.word	0x08080048
 8005de4:	08080090 	.word	0x08080090
 8005de8:	08080078 	.word	0x08080078
 8005dec:	0808006c 	.word	0x0808006c
 8005df0:	08080060 	.word	0x08080060
 8005df4:	08080054 	.word	0x08080054

08005df8 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6039      	str	r1, [r7, #0]
 8005e00:	0011      	movs	r1, r2
 8005e02:	1dfb      	adds	r3, r7, #7
 8005e04:	1c02      	adds	r2, r0, #0
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	1dbb      	adds	r3, r7, #6
 8005e0a:	1c0a      	adds	r2, r1, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005e0e:	2223      	movs	r2, #35	@ 0x23
 8005e10:	4b20      	ldr	r3, [pc, #128]	@ (8005e94 <Create_Message+0x9c>)
 8005e12:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005e14:	4b1f      	ldr	r3, [pc, #124]	@ (8005e94 <Create_Message+0x9c>)
 8005e16:	1dfa      	adds	r2, r7, #7
 8005e18:	7812      	ldrb	r2, [r2, #0]
 8005e1a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005e94 <Create_Message+0x9c>)
 8005e1e:	1dba      	adds	r2, r7, #6
 8005e20:	7812      	ldrb	r2, [r2, #0]
 8005e22:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005e24:	1dbb      	adds	r3, r7, #6
 8005e26:	781a      	ldrb	r2, [r3, #0]
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005e98 <Create_Message+0xa0>)
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f018 fd51 	bl	801e8d4 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005e32:	1dbb      	adds	r3, r7, #6
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	250e      	movs	r5, #14
 8005e3a:	197b      	adds	r3, r7, r5
 8005e3c:	3203      	adds	r2, #3
 8005e3e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005e40:	260c      	movs	r6, #12
 8005e42:	19bc      	adds	r4, r7, r6
 8005e44:	197b      	adds	r3, r7, r5
 8005e46:	881a      	ldrh	r2, [r3, #0]
 8005e48:	4b12      	ldr	r3, [pc, #72]	@ (8005e94 <Create_Message+0x9c>)
 8005e4a:	0011      	movs	r1, r2
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f000 f825 	bl	8005e9c <CRC16_ARC>
 8005e52:	0003      	movs	r3, r0
 8005e54:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005e56:	0030      	movs	r0, r6
 8005e58:	183b      	adds	r3, r7, r0
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	0a1b      	lsrs	r3, r3, #8
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	197b      	adds	r3, r7, r5
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	b2d1      	uxtb	r1, r2
 8005e66:	4a0b      	ldr	r2, [pc, #44]	@ (8005e94 <Create_Message+0x9c>)
 8005e68:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005e6a:	197b      	adds	r3, r7, r5
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	183a      	adds	r2, r7, r0
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	b2d1      	uxtb	r1, r2
 8005e76:	4a07      	ldr	r2, [pc, #28]	@ (8005e94 <Create_Message+0x9c>)
 8005e78:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005e7a:	197b      	adds	r3, r7, r5
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	3302      	adds	r3, #2
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <Create_Message+0x9c>)
 8005e84:	0011      	movs	r1, r2
 8005e86:	0018      	movs	r0, r3
 8005e88:	f015 f9f6 	bl	801b278 <CDC_Transmit_FS>
}
 8005e8c:	46c0      	nop			@ (mov r8, r8)
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b005      	add	sp, #20
 8005e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e94:	20000bb4 	.word	0x20000bb4
 8005e98:	20000bb7 	.word	0x20000bb7

08005e9c <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	000a      	movs	r2, r1
 8005ea6:	1cbb      	adds	r3, r7, #2
 8005ea8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005eaa:	2316      	movs	r3, #22
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	2200      	movs	r2, #0
 8005eb0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	e02e      	b.n	8005f16 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	18d3      	adds	r3, r2, r3
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	0019      	movs	r1, r3
 8005ec2:	2216      	movs	r2, #22
 8005ec4:	18bb      	adds	r3, r7, r2
 8005ec6:	18ba      	adds	r2, r7, r2
 8005ec8:	8812      	ldrh	r2, [r2, #0]
 8005eca:	404a      	eors	r2, r1
 8005ecc:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
 8005ed2:	e01a      	b.n	8005f0a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005ed4:	2116      	movs	r1, #22
 8005ed6:	187b      	adds	r3, r7, r1
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	2201      	movs	r2, #1
 8005edc:	4013      	ands	r3, r2
 8005ede:	d00b      	beq.n	8005ef8 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	187a      	adds	r2, r7, r1
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	0852      	lsrs	r2, r2, #1
 8005ee8:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005eea:	187b      	adds	r3, r7, r1
 8005eec:	187a      	adds	r2, r7, r1
 8005eee:	8812      	ldrh	r2, [r2, #0]
 8005ef0:	490f      	ldr	r1, [pc, #60]	@ (8005f30 <CRC16_ARC+0x94>)
 8005ef2:	404a      	eors	r2, r1
 8005ef4:	801a      	strh	r2, [r3, #0]
 8005ef6:	e005      	b.n	8005f04 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005ef8:	2216      	movs	r2, #22
 8005efa:	18bb      	adds	r3, r7, r2
 8005efc:	18ba      	adds	r2, r7, r2
 8005efe:	8812      	ldrh	r2, [r2, #0]
 8005f00:	0852      	lsrs	r2, r2, #1
 8005f02:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3301      	adds	r3, #1
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b07      	cmp	r3, #7
 8005f0e:	dde1      	ble.n	8005ed4 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	3301      	adds	r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	1cbb      	adds	r3, r7, #2
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	dbcb      	blt.n	8005eb8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005f20:	2316      	movs	r3, #22
 8005f22:	18fb      	adds	r3, r7, r3
 8005f24:	881b      	ldrh	r3, [r3, #0]
}
 8005f26:	0018      	movs	r0, r3
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	b006      	add	sp, #24
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	ffffa001 	.word	0xffffa001

08005f34 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 8005f38:	4b26      	ldr	r3, [pc, #152]	@ (8005fd4 <ReadBatteryVoltage+0xa0>)
 8005f3a:	4a27      	ldr	r2, [pc, #156]	@ (8005fd8 <ReadBatteryVoltage+0xa4>)
 8005f3c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005f3e:	4b25      	ldr	r3, [pc, #148]	@ (8005fd4 <ReadBatteryVoltage+0xa0>)
 8005f40:	2280      	movs	r2, #128	@ 0x80
 8005f42:	0152      	lsls	r2, r2, #5
 8005f44:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005f46:	4a23      	ldr	r2, [pc, #140]	@ (8005fd4 <ReadBatteryVoltage+0xa0>)
 8005f48:	4b24      	ldr	r3, [pc, #144]	@ (8005fdc <ReadBatteryVoltage+0xa8>)
 8005f4a:	0011      	movs	r1, r2
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f007 fe0d 	bl	800db6c <HAL_ADC_ConfigChannel>
 8005f52:	1e03      	subs	r3, r0, #0
 8005f54:	d001      	beq.n	8005f5a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8005f56:	f001 fbf3 	bl	8007740 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8005f5a:	4b20      	ldr	r3, [pc, #128]	@ (8005fdc <ReadBatteryVoltage+0xa8>)
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f007 fd09 	bl	800d974 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8005f62:	4b1e      	ldr	r3, [pc, #120]	@ (8005fdc <ReadBatteryVoltage+0xa8>)
 8005f64:	2101      	movs	r1, #1
 8005f66:	0018      	movs	r0, r3
 8005f68:	f007 fd58 	bl	800da1c <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fdc <ReadBatteryVoltage+0xa8>)
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f007 fdf0 	bl	800db54 <HAL_ADC_GetValue>
 8005f74:	0002      	movs	r2, r0
 8005f76:	4b1a      	ldr	r3, [pc, #104]	@ (8005fe0 <ReadBatteryVoltage+0xac>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4353      	muls	r3, r2
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	4919      	ldr	r1, [pc, #100]	@ (8005fe4 <ReadBatteryVoltage+0xb0>)
 8005f80:	0018      	movs	r0, r3
 8005f82:	f7fa f90f 	bl	80001a4 <__udivsi3>
 8005f86:	0003      	movs	r3, r0
 8005f88:	001a      	movs	r2, r3
 8005f8a:	4b17      	ldr	r3, [pc, #92]	@ (8005fe8 <ReadBatteryVoltage+0xb4>)
 8005f8c:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8005f8e:	4b16      	ldr	r3, [pc, #88]	@ (8005fe8 <ReadBatteryVoltage+0xb4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7fb fb68 	bl	8001668 <__aeabi_ui2f>
 8005f98:	1c03      	adds	r3, r0, #0
 8005f9a:	4914      	ldr	r1, [pc, #80]	@ (8005fec <ReadBatteryVoltage+0xb8>)
 8005f9c:	1c18      	adds	r0, r3, #0
 8005f9e:	f7fa fe19 	bl	8000bd4 <__aeabi_fdiv>
 8005fa2:	1c03      	adds	r3, r0, #0
 8005fa4:	1c1a      	adds	r2, r3, #0
 8005fa6:	4b12      	ldr	r3, [pc, #72]	@ (8005ff0 <ReadBatteryVoltage+0xbc>)
 8005fa8:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8005faa:	4b0a      	ldr	r3, [pc, #40]	@ (8005fd4 <ReadBatteryVoltage+0xa0>)
 8005fac:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd8 <ReadBatteryVoltage+0xa4>)
 8005fae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8005fb0:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <ReadBatteryVoltage+0xa0>)
 8005fb2:	4a10      	ldr	r2, [pc, #64]	@ (8005ff4 <ReadBatteryVoltage+0xc0>)
 8005fb4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005fb6:	4a07      	ldr	r2, [pc, #28]	@ (8005fd4 <ReadBatteryVoltage+0xa0>)
 8005fb8:	4b08      	ldr	r3, [pc, #32]	@ (8005fdc <ReadBatteryVoltage+0xa8>)
 8005fba:	0011      	movs	r1, r2
 8005fbc:	0018      	movs	r0, r3
 8005fbe:	f007 fdd5 	bl	800db6c <HAL_ADC_ConfigChannel>
 8005fc2:	1e03      	subs	r3, r0, #0
 8005fc4:	d001      	beq.n	8005fca <ReadBatteryVoltage+0x96>
    Error_Handler();
 8005fc6:	f001 fbbb 	bl	8007740 <Error_Handler>
  }
  return trueValue;
 8005fca:	4b09      	ldr	r3, [pc, #36]	@ (8005ff0 <ReadBatteryVoltage+0xbc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 }
 8005fce:	1c18      	adds	r0, r3, #0
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20000cbc 	.word	0x20000cbc
 8005fd8:	38004000 	.word	0x38004000
 8005fdc:	20000ce0 	.word	0x20000ce0
 8005fe0:	2000002c 	.word	0x2000002c
 8005fe4:	00000fff 	.word	0x00000fff
 8005fe8:	20000cc4 	.word	0x20000cc4
 8005fec:	447a0000 	.word	0x447a0000
 8005ff0:	20000cc8 	.word	0x20000cc8
 8005ff4:	00001001 	.word	0x00001001

08005ff8 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 8005ffc:	4b27      	ldr	r3, [pc, #156]	@ (800609c <ReadSolarVoltage+0xa4>)
 8005ffe:	4a28      	ldr	r2, [pc, #160]	@ (80060a0 <ReadSolarVoltage+0xa8>)
 8006000:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006002:	4b26      	ldr	r3, [pc, #152]	@ (800609c <ReadSolarVoltage+0xa4>)
 8006004:	2280      	movs	r2, #128	@ 0x80
 8006006:	0152      	lsls	r2, r2, #5
 8006008:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800600a:	4a24      	ldr	r2, [pc, #144]	@ (800609c <ReadSolarVoltage+0xa4>)
 800600c:	4b25      	ldr	r3, [pc, #148]	@ (80060a4 <ReadSolarVoltage+0xac>)
 800600e:	0011      	movs	r1, r2
 8006010:	0018      	movs	r0, r3
 8006012:	f007 fdab 	bl	800db6c <HAL_ADC_ConfigChannel>
 8006016:	1e03      	subs	r3, r0, #0
 8006018:	d001      	beq.n	800601e <ReadSolarVoltage+0x26>
    Error_Handler();
 800601a:	f001 fb91 	bl	8007740 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800601e:	4b21      	ldr	r3, [pc, #132]	@ (80060a4 <ReadSolarVoltage+0xac>)
 8006020:	0018      	movs	r0, r3
 8006022:	f007 fca7 	bl	800d974 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006026:	4b1f      	ldr	r3, [pc, #124]	@ (80060a4 <ReadSolarVoltage+0xac>)
 8006028:	2101      	movs	r1, #1
 800602a:	0018      	movs	r0, r3
 800602c:	f007 fcf6 	bl	800da1c <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006030:	4b1c      	ldr	r3, [pc, #112]	@ (80060a4 <ReadSolarVoltage+0xac>)
 8006032:	0018      	movs	r0, r3
 8006034:	f007 fd8e 	bl	800db54 <HAL_ADC_GetValue>
 8006038:	0002      	movs	r2, r0
 800603a:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <ReadSolarVoltage+0xb0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	435a      	muls	r2, r3
 8006040:	0013      	movs	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	189b      	adds	r3, r3, r2
 8006046:	4919      	ldr	r1, [pc, #100]	@ (80060ac <ReadSolarVoltage+0xb4>)
 8006048:	0018      	movs	r0, r3
 800604a:	f7fa f8ab 	bl	80001a4 <__udivsi3>
 800604e:	0003      	movs	r3, r0
 8006050:	001a      	movs	r2, r3
 8006052:	4b17      	ldr	r3, [pc, #92]	@ (80060b0 <ReadSolarVoltage+0xb8>)
 8006054:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 8006056:	4b16      	ldr	r3, [pc, #88]	@ (80060b0 <ReadSolarVoltage+0xb8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	0018      	movs	r0, r3
 800605c:	f7fb fb04 	bl	8001668 <__aeabi_ui2f>
 8006060:	1c03      	adds	r3, r0, #0
 8006062:	4914      	ldr	r1, [pc, #80]	@ (80060b4 <ReadSolarVoltage+0xbc>)
 8006064:	1c18      	adds	r0, r3, #0
 8006066:	f7fa fdb5 	bl	8000bd4 <__aeabi_fdiv>
 800606a:	1c03      	adds	r3, r0, #0
 800606c:	1c1a      	adds	r2, r3, #0
 800606e:	4b12      	ldr	r3, [pc, #72]	@ (80060b8 <ReadSolarVoltage+0xc0>)
 8006070:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 8006072:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <ReadSolarVoltage+0xa4>)
 8006074:	4a0a      	ldr	r2, [pc, #40]	@ (80060a0 <ReadSolarVoltage+0xa8>)
 8006076:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8006078:	4b08      	ldr	r3, [pc, #32]	@ (800609c <ReadSolarVoltage+0xa4>)
 800607a:	4a10      	ldr	r2, [pc, #64]	@ (80060bc <ReadSolarVoltage+0xc4>)
 800607c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800607e:	4a07      	ldr	r2, [pc, #28]	@ (800609c <ReadSolarVoltage+0xa4>)
 8006080:	4b08      	ldr	r3, [pc, #32]	@ (80060a4 <ReadSolarVoltage+0xac>)
 8006082:	0011      	movs	r1, r2
 8006084:	0018      	movs	r0, r3
 8006086:	f007 fd71 	bl	800db6c <HAL_ADC_ConfigChannel>
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d001      	beq.n	8006092 <ReadSolarVoltage+0x9a>
    Error_Handler();
 800608e:	f001 fb57 	bl	8007740 <Error_Handler>
  }
  return trueValue;
 8006092:	4b09      	ldr	r3, [pc, #36]	@ (80060b8 <ReadSolarVoltage+0xc0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 }
 8006096:	1c18      	adds	r0, r3, #0
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20000cbc 	.word	0x20000cbc
 80060a0:	3c008000 	.word	0x3c008000
 80060a4:	20000ce0 	.word	0x20000ce0
 80060a8:	2000002c 	.word	0x2000002c
 80060ac:	00000fff 	.word	0x00000fff
 80060b0:	20000ccc 	.word	0x20000ccc
 80060b4:	447a0000 	.word	0x447a0000
 80060b8:	20000cd0 	.word	0x20000cd0
 80060bc:	00001001 	.word	0x00001001

080060c0 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 80060c4:	23a0      	movs	r3, #160	@ 0xa0
 80060c6:	05db      	lsls	r3, r3, #23
 80060c8:	2180      	movs	r1, #128	@ 0x80
 80060ca:	0018      	movs	r0, r3
 80060cc:	f008 fcd4 	bl	800ea78 <HAL_GPIO_ReadPin>
 80060d0:	0003      	movs	r3, r0
 80060d2:	1e5a      	subs	r2, r3, #1
 80060d4:	4193      	sbcs	r3, r2
 80060d6:	b2db      	uxtb	r3, r3
}
 80060d8:	0018      	movs	r0, r3
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 80060de:	b580      	push	{r7, lr}
 80060e0:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 80060e2:	2380      	movs	r3, #128	@ 0x80
 80060e4:	021a      	lsls	r2, r3, #8
 80060e6:	23a0      	movs	r3, #160	@ 0xa0
 80060e8:	05db      	lsls	r3, r3, #23
 80060ea:	0011      	movs	r1, r2
 80060ec:	0018      	movs	r0, r3
 80060ee:	f008 fcc3 	bl	800ea78 <HAL_GPIO_ReadPin>
 80060f2:	0003      	movs	r3, r0
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	4193      	sbcs	r3, r2
 80060f8:	b2db      	uxtb	r3, r3
}
 80060fa:	0018      	movs	r0, r3
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006104:	4b05      	ldr	r3, [pc, #20]	@ (800611c <UserButton_Pressed+0x1c>)
 8006106:	2104      	movs	r1, #4
 8006108:	0018      	movs	r0, r3
 800610a:	f008 fcb5 	bl	800ea78 <HAL_GPIO_ReadPin>
 800610e:	0003      	movs	r3, r0
 8006110:	425a      	negs	r2, r3
 8006112:	4153      	adcs	r3, r2
 8006114:	b2db      	uxtb	r3, r3
}
 8006116:	0018      	movs	r0, r3
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	50000c00 	.word	0x50000c00

08006120 <showTime>:
uint8_t iMinute = 0;
uint8_t myUptimeminute = 0;
uint8_t myUptimehour = 0;
uint16_t myUptimeday = 0;

void showTime() {
 8006120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006122:	46ce      	mov	lr, r9
 8006124:	4647      	mov	r7, r8
 8006126:	b580      	push	{r7, lr}
 8006128:	b08d      	sub	sp, #52	@ 0x34
 800612a:	af06      	add	r7, sp, #24
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800612c:	003a      	movs	r2, r7
 800612e:	1d3b      	adds	r3, r7, #4
 8006130:	0011      	movs	r1, r2
 8006132:	0018      	movs	r0, r3
 8006134:	f000 fa16 	bl	8006564 <RTC_GetTime>
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 8006138:	003b      	movs	r3, r7
 800613a:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 800613c:	469c      	mov	ip, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 800613e:	003b      	movs	r3, r7
 8006140:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8006142:	4698      	mov	r8, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 8006144:	003b      	movs	r3, r7
 8006146:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8006148:	4699      	mov	r9, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 800614a:	1d3b      	adds	r3, r7, #4
 800614c:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 800614e:	001a      	movs	r2, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes,
 8006150:	1d3b      	adds	r3, r7, #4
 8006152:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8006154:	0019      	movs	r1, r3
      currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8006156:	1d3b      	adds	r3, r7, #4
 8006158:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 800615a:	001c      	movs	r4, r3
 800615c:	4b0d      	ldr	r3, [pc, #52]	@ (8006194 <showTime+0x74>)
 800615e:	881b      	ldrh	r3, [r3, #0]
 8006160:	001d      	movs	r5, r3
 8006162:	4b0d      	ldr	r3, [pc, #52]	@ (8006198 <showTime+0x78>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	001e      	movs	r6, r3
 8006168:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <showTime+0x7c>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	480c      	ldr	r0, [pc, #48]	@ (80061a0 <showTime+0x80>)
 800616e:	9305      	str	r3, [sp, #20]
 8006170:	9604      	str	r6, [sp, #16]
 8006172:	9503      	str	r5, [sp, #12]
 8006174:	9402      	str	r4, [sp, #8]
 8006176:	9101      	str	r1, [sp, #4]
 8006178:	9200      	str	r2, [sp, #0]
 800617a:	464b      	mov	r3, r9
 800617c:	4642      	mov	r2, r8
 800617e:	4661      	mov	r1, ip
 8006180:	f018 f918 	bl	801e3b4 <iprintf>
}
 8006184:	46c0      	nop			@ (mov r8, r8)
 8006186:	46bd      	mov	sp, r7
 8006188:	b007      	add	sp, #28
 800618a:	bcc0      	pop	{r6, r7}
 800618c:	46b9      	mov	r9, r7
 800618e:	46b0      	mov	r8, r6
 8006190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	20000cdc 	.word	0x20000cdc
 8006198:	20000cda 	.word	0x20000cda
 800619c:	20000cd9 	.word	0x20000cd9
 80061a0:	08021fdc 	.word	0x08021fdc

080061a4 <setiMinute>:

void setiMinute(uint8_t minute) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	0002      	movs	r2, r0
 80061ac:	1dfb      	adds	r3, r7, #7
 80061ae:	701a      	strb	r2, [r3, #0]
  iMinute = minute;
 80061b0:	4b07      	ldr	r3, [pc, #28]	@ (80061d0 <setiMinute+0x2c>)
 80061b2:	1dfa      	adds	r2, r7, #7
 80061b4:	7812      	ldrb	r2, [r2, #0]
 80061b6:	701a      	strb	r2, [r3, #0]
  Debug("iMinute set to: %d", iMinute);
 80061b8:	4b05      	ldr	r3, [pc, #20]	@ (80061d0 <setiMinute+0x2c>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	4a05      	ldr	r2, [pc, #20]	@ (80061d4 <setiMinute+0x30>)
 80061be:	4906      	ldr	r1, [pc, #24]	@ (80061d8 <setiMinute+0x34>)
 80061c0:	2003      	movs	r0, #3
 80061c2:	f006 fe79 	bl	800ceb8 <CreateLine>
}
 80061c6:	46c0      	nop			@ (mov r8, r8)
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b002      	add	sp, #8
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	46c0      	nop			@ (mov r8, r8)
 80061d0:	20000cd8 	.word	0x20000cd8
 80061d4:	08022030 	.word	0x08022030
 80061d8:	08022044 	.word	0x08022044

080061dc <UpdateSystemUptime>:

void UpdateSystemUptime() {
 80061dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061de:	b08d      	sub	sp, #52	@ 0x34
 80061e0:	af06      	add	r7, sp, #24
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80061e2:	003a      	movs	r2, r7
 80061e4:	1d3b      	adds	r3, r7, #4
 80061e6:	0011      	movs	r1, r2
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 f9bb 	bl	8006564 <RTC_GetTime>
  if (iMinute != currentTime.Minutes) {
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	785a      	ldrb	r2, [r3, #1]
 80061f2:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <UpdateSystemUptime+0xa8>)
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d009      	beq.n	800620e <UpdateSystemUptime+0x32>
    iMinute = currentTime.Minutes;
 80061fa:	1d3b      	adds	r3, r7, #4
 80061fc:	785a      	ldrb	r2, [r3, #1]
 80061fe:	4b21      	ldr	r3, [pc, #132]	@ (8006284 <UpdateSystemUptime+0xa8>)
 8006200:	701a      	strb	r2, [r3, #0]
    myUptimeminute++;
 8006202:	4b21      	ldr	r3, [pc, #132]	@ (8006288 <UpdateSystemUptime+0xac>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	4b1f      	ldr	r3, [pc, #124]	@ (8006288 <UpdateSystemUptime+0xac>)
 800620c:	701a      	strb	r2, [r3, #0]
  }
  if (myUptimeminute == 60) {
 800620e:	4b1e      	ldr	r3, [pc, #120]	@ (8006288 <UpdateSystemUptime+0xac>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b3c      	cmp	r3, #60	@ 0x3c
 8006214:	d115      	bne.n	8006242 <UpdateSystemUptime+0x66>
    myUptimeminute = 0;
 8006216:	4b1c      	ldr	r3, [pc, #112]	@ (8006288 <UpdateSystemUptime+0xac>)
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
    myUptimehour++;
 800621c:	4b1b      	ldr	r3, [pc, #108]	@ (800628c <UpdateSystemUptime+0xb0>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	b2da      	uxtb	r2, r3
 8006224:	4b19      	ldr	r3, [pc, #100]	@ (800628c <UpdateSystemUptime+0xb0>)
 8006226:	701a      	strb	r2, [r3, #0]
    if (myUptimehour == 24) {
 8006228:	4b18      	ldr	r3, [pc, #96]	@ (800628c <UpdateSystemUptime+0xb0>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b18      	cmp	r3, #24
 800622e:	d108      	bne.n	8006242 <UpdateSystemUptime+0x66>
      myUptimehour = 0;
 8006230:	4b16      	ldr	r3, [pc, #88]	@ (800628c <UpdateSystemUptime+0xb0>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
      myUptimeday++;
 8006236:	4b16      	ldr	r3, [pc, #88]	@ (8006290 <UpdateSystemUptime+0xb4>)
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	3301      	adds	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	4b14      	ldr	r3, [pc, #80]	@ (8006290 <UpdateSystemUptime+0xb4>)
 8006240:	801a      	strh	r2, [r3, #0]
    }
  }
  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm",
 8006242:	1d3b      	adds	r3, r7, #4
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	469c      	mov	ip, r3
 8006248:	1d3b      	adds	r3, r7, #4
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	0018      	movs	r0, r3
 800624e:	1d3b      	adds	r3, r7, #4
 8006250:	789b      	ldrb	r3, [r3, #2]
 8006252:	001c      	movs	r4, r3
 8006254:	4b0e      	ldr	r3, [pc, #56]	@ (8006290 <UpdateSystemUptime+0xb4>)
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	001d      	movs	r5, r3
 800625a:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <UpdateSystemUptime+0xb0>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	001e      	movs	r6, r3
 8006260:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <UpdateSystemUptime+0xac>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	4a0b      	ldr	r2, [pc, #44]	@ (8006294 <UpdateSystemUptime+0xb8>)
 8006266:	490c      	ldr	r1, [pc, #48]	@ (8006298 <UpdateSystemUptime+0xbc>)
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	9603      	str	r6, [sp, #12]
 800626c:	9502      	str	r5, [sp, #8]
 800626e:	9401      	str	r4, [sp, #4]
 8006270:	9000      	str	r0, [sp, #0]
 8006272:	4663      	mov	r3, ip
 8006274:	2002      	movs	r0, #2
 8006276:	f006 fe1f 	bl	800ceb8 <CreateLine>
      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
}
 800627a:	46c0      	nop			@ (mov r8, r8)
 800627c:	46bd      	mov	sp, r7
 800627e:	b007      	add	sp, #28
 8006280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	20000cd8 	.word	0x20000cd8
 8006288:	20000cd9 	.word	0x20000cd9
 800628c:	20000cda 	.word	0x20000cda
 8006290:	20000cdc 	.word	0x20000cdc
 8006294:	08022048 	.word	0x08022048
 8006298:	0802208c 	.word	0x0802208c

0800629c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	0008      	movs	r0, r1
 80062a6:	0011      	movs	r1, r2
 80062a8:	1cfb      	adds	r3, r7, #3
 80062aa:	1c02      	adds	r2, r0, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	1cbb      	adds	r3, r7, #2
 80062b0:	1c0a      	adds	r2, r1, #0
 80062b2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80062b4:	230e      	movs	r3, #14
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	1cfa      	adds	r2, r7, #3
 80062c2:	7812      	ldrb	r2, [r2, #0]
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e015      	b.n	80062f4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80062c8:	200f      	movs	r0, #15
 80062ca:	183b      	adds	r3, r7, r0
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	18d2      	adds	r2, r2, r3
 80062d2:	240e      	movs	r4, #14
 80062d4:	193b      	adds	r3, r7, r4
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	7811      	ldrb	r1, [r2, #0]
 80062da:	2208      	movs	r2, #8
 80062dc:	18ba      	adds	r2, r7, r2
 80062de:	54d1      	strb	r1, [r2, r3]
    pos++;
 80062e0:	193b      	adds	r3, r7, r4
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	3201      	adds	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80062ea:	183b      	adds	r3, r7, r0
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	3201      	adds	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	200f      	movs	r0, #15
 80062f6:	183a      	adds	r2, r7, r0
 80062f8:	1cbb      	adds	r3, r7, #2
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d9e2      	bls.n	80062c8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006302:	230e      	movs	r3, #14
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	18ba      	adds	r2, r7, r2
 800630c:	2100      	movs	r1, #0
 800630e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006310:	1cfb      	adds	r3, r7, #3
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b13      	cmp	r3, #19
 8006316:	d849      	bhi.n	80063ac <aBuff2int+0x110>
    if (start == 17) { //month
 8006318:	1cfb      	adds	r3, r7, #3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b11      	cmp	r3, #17
 800631e:	d122      	bne.n	8006366 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006320:	183b      	adds	r3, r7, r0
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	e018      	b.n	800635a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006328:	240f      	movs	r4, #15
 800632a:	193b      	adds	r3, r7, r4
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	4b25      	ldr	r3, [pc, #148]	@ (80063c4 <aBuff2int+0x128>)
 8006330:	0092      	lsls	r2, r2, #2
 8006332:	58d2      	ldr	r2, [r2, r3]
 8006334:	2308      	movs	r3, #8
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	0011      	movs	r1, r2
 800633a:	0018      	movs	r0, r3
 800633c:	f7f9 ff0c 	bl	8000158 <strcmp>
 8006340:	1e03      	subs	r3, r0, #0
 8006342:	d104      	bne.n	800634e <aBuff2int+0xb2>
          return i+1;
 8006344:	193b      	adds	r3, r7, r4
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e035      	b.n	80063ba <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800634e:	210f      	movs	r1, #15
 8006350:	187b      	adds	r3, r7, r1
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	187b      	adds	r3, r7, r1
 8006356:	3201      	adds	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	230f      	movs	r3, #15
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b0b      	cmp	r3, #11
 8006362:	d9e1      	bls.n	8006328 <aBuff2int+0x8c>
 8006364:	e022      	b.n	80063ac <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006366:	230f      	movs	r3, #15
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e018      	b.n	80063a2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006370:	240f      	movs	r4, #15
 8006372:	193b      	adds	r3, r7, r4
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	4b14      	ldr	r3, [pc, #80]	@ (80063c8 <aBuff2int+0x12c>)
 8006378:	0092      	lsls	r2, r2, #2
 800637a:	58d2      	ldr	r2, [r2, r3]
 800637c:	2308      	movs	r3, #8
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	0011      	movs	r1, r2
 8006382:	0018      	movs	r0, r3
 8006384:	f7f9 fee8 	bl	8000158 <strcmp>
 8006388:	1e03      	subs	r3, r0, #0
 800638a:	d104      	bne.n	8006396 <aBuff2int+0xfa>
          return i+1;
 800638c:	193b      	adds	r3, r7, r4
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e011      	b.n	80063ba <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006396:	210f      	movs	r1, #15
 8006398:	187b      	adds	r3, r7, r1
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	187b      	adds	r3, r7, r1
 800639e:	3201      	adds	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	230f      	movs	r3, #15
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b06      	cmp	r3, #6
 80063aa:	d9e1      	bls.n	8006370 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80063ac:	2308      	movs	r3, #8
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	0018      	movs	r0, r3
 80063b2:	f016 fc24 	bl	801cbfe <atoi>
 80063b6:	0003      	movs	r3, r0
 80063b8:	b2db      	uxtb	r3, r3
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b005      	add	sp, #20
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	20000050 	.word	0x20000050
 80063c8:	20000034 	.word	0x20000034

080063cc <ParseTime>:

void ParseTime(char* buffer) {
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	b08b      	sub	sp, #44	@ 0x2c
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80063d4:	2508      	movs	r5, #8
 80063d6:	197a      	adds	r2, r7, r5
 80063d8:	240c      	movs	r4, #12
 80063da:	193b      	adds	r3, r7, r4
 80063dc:	0011      	movs	r1, r2
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f8c0 	bl	8006564 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2219      	movs	r2, #25
 80063e8:	2118      	movs	r1, #24
 80063ea:	0018      	movs	r0, r3
 80063ec:	f7ff ff56 	bl	800629c <aBuff2int>
 80063f0:	0003      	movs	r3, r0
 80063f2:	001a      	movs	r2, r3
 80063f4:	193b      	adds	r3, r7, r4
 80063f6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	221c      	movs	r2, #28
 80063fc:	211b      	movs	r1, #27
 80063fe:	0018      	movs	r0, r3
 8006400:	f7ff ff4c 	bl	800629c <aBuff2int>
 8006404:	0003      	movs	r3, r0
 8006406:	001a      	movs	r2, r3
 8006408:	193b      	adds	r3, r7, r4
 800640a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	221f      	movs	r2, #31
 8006410:	211e      	movs	r1, #30
 8006412:	0018      	movs	r0, r3
 8006414:	f7ff ff42 	bl	800629c <aBuff2int>
 8006418:	0003      	movs	r3, r0
 800641a:	001a      	movs	r2, r3
 800641c:	193b      	adds	r3, r7, r4
 800641e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	@ 0x24
 8006424:	2123      	movs	r1, #35	@ 0x23
 8006426:	0018      	movs	r0, r3
 8006428:	f7ff ff38 	bl	800629c <aBuff2int>
 800642c:	0003      	movs	r3, r0
 800642e:	001a      	movs	r2, r3
 8006430:	002e      	movs	r6, r5
 8006432:	19bb      	adds	r3, r7, r6
 8006434:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2213      	movs	r2, #19
 800643a:	2111      	movs	r1, #17
 800643c:	0018      	movs	r0, r3
 800643e:	f7ff ff2d 	bl	800629c <aBuff2int>
 8006442:	0003      	movs	r3, r0
 8006444:	001a      	movs	r2, r3
 8006446:	19bb      	adds	r3, r7, r6
 8006448:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2216      	movs	r2, #22
 800644e:	2115      	movs	r1, #21
 8006450:	0018      	movs	r0, r3
 8006452:	f7ff ff23 	bl	800629c <aBuff2int>
 8006456:	0003      	movs	r3, r0
 8006458:	001a      	movs	r2, r3
 800645a:	19bb      	adds	r3, r7, r6
 800645c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	220f      	movs	r2, #15
 8006462:	210d      	movs	r1, #13
 8006464:	0018      	movs	r0, r3
 8006466:	f7ff ff19 	bl	800629c <aBuff2int>
 800646a:	0003      	movs	r3, r0
 800646c:	001a      	movs	r2, r3
 800646e:	19bb      	adds	r3, r7, r6
 8006470:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006472:	0025      	movs	r5, r4
 8006474:	197b      	adds	r3, r7, r5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	001c      	movs	r4, r3
 800647a:	197b      	adds	r3, r7, r5
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	0018      	movs	r0, r3
 8006480:	197b      	adds	r3, r7, r5
 8006482:	789b      	ldrb	r3, [r3, #2]
 8006484:	4a0c      	ldr	r2, [pc, #48]	@ (80064b8 <ParseTime+0xec>)
 8006486:	490d      	ldr	r1, [pc, #52]	@ (80064bc <ParseTime+0xf0>)
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	9000      	str	r0, [sp, #0]
 800648c:	0023      	movs	r3, r4
 800648e:	2003      	movs	r0, #3
 8006490:	f006 fd12 	bl	800ceb8 <CreateLine>
  RTC_SetTime(&currentTime);
 8006494:	197b      	adds	r3, r7, r5
 8006496:	0018      	movs	r0, r3
 8006498:	f000 f812 	bl	80064c0 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800649c:	19bb      	adds	r3, r7, r6
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f842 	bl	8006528 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80064a4:	19bb      	adds	r3, r7, r6
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d101      	bne.n	80064b0 <ParseTime+0xe4>
    reset_fanCleaningDone();
 80064ac:	f001 ff9a 	bl	80083e4 <reset_fanCleaningDone>
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 80064b0:	46c0      	nop			@ (mov r8, r8)
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b009      	add	sp, #36	@ 0x24
 80064b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b8:	08022090 	.word	0x08022090
 80064bc:	08022044 	.word	0x08022044

080064c0 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80064da:	4b0f      	ldr	r3, [pc, #60]	@ (8006518 <RTC_SetTime+0x58>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	0018      	movs	r0, r3
 80064e4:	f00e f8d6 	bl	8014694 <HAL_RTC_SetTime>
 80064e8:	1e03      	subs	r3, r0, #0
 80064ea:	d005      	beq.n	80064f8 <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 80064ec:	4a0b      	ldr	r2, [pc, #44]	@ (800651c <RTC_SetTime+0x5c>)
 80064ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006520 <RTC_SetTime+0x60>)
 80064f0:	0019      	movs	r1, r3
 80064f2:	2001      	movs	r0, #1
 80064f4:	f006 fce0 	bl	800ceb8 <CreateLine>
    }
    if (firstTimeUpdate) {
 80064f8:	4b0a      	ldr	r3, [pc, #40]	@ (8006524 <RTC_SetTime+0x64>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d007      	beq.n	8006510 <RTC_SetTime+0x50>
      firstTimeUpdate = false;
 8006500:	4b08      	ldr	r3, [pc, #32]	@ (8006524 <RTC_SetTime+0x64>)
 8006502:	2200      	movs	r2, #0
 8006504:	701a      	strb	r2, [r3, #0]
      setiMinute(sTime->Minutes);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	0018      	movs	r0, r3
 800650c:	f7ff fe4a 	bl	80061a4 <setiMinute>
    }
}
 8006510:	46c0      	nop			@ (mov r8, r8)
 8006512:	46bd      	mov	sp, r7
 8006514:	b002      	add	sp, #8
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000cd4 	.word	0x20000cd4
 800651c:	080220c8 	.word	0x080220c8
 8006520:	080220e4 	.word	0x080220e4
 8006524:	20000030 	.word	0x20000030

08006528 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006530:	4b09      	ldr	r3, [pc, #36]	@ (8006558 <RTC_SetDate+0x30>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	0018      	movs	r0, r3
 800653a:	f00e f9b3 	bl	80148a4 <HAL_RTC_SetDate>
 800653e:	1e03      	subs	r3, r0, #0
 8006540:	d005      	beq.n	800654e <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 8006542:	4a06      	ldr	r2, [pc, #24]	@ (800655c <RTC_SetDate+0x34>)
 8006544:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <RTC_SetDate+0x38>)
 8006546:	0019      	movs	r1, r3
 8006548:	2001      	movs	r0, #1
 800654a:	f006 fcb5 	bl	800ceb8 <CreateLine>
    }
}
 800654e:	46c0      	nop			@ (mov r8, r8)
 8006550:	46bd      	mov	sp, r7
 8006552:	b002      	add	sp, #8
 8006554:	bd80      	pop	{r7, pc}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	20000cd4 	.word	0x20000cd4
 800655c:	080220e8 	.word	0x080220e8
 8006560:	080220e4 	.word	0x080220e4

08006564 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 800656e:	4b11      	ldr	r3, [pc, #68]	@ (80065b4 <RTC_GetTime+0x50>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	0018      	movs	r0, r3
 8006578:	f00e f936 	bl	80147e8 <HAL_RTC_GetTime>
 800657c:	1e03      	subs	r3, r0, #0
 800657e:	d005      	beq.n	800658c <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 8006580:	4a0d      	ldr	r2, [pc, #52]	@ (80065b8 <RTC_GetTime+0x54>)
 8006582:	4b0e      	ldr	r3, [pc, #56]	@ (80065bc <RTC_GetTime+0x58>)
 8006584:	0019      	movs	r1, r3
 8006586:	2001      	movs	r0, #1
 8006588:	f006 fc96 	bl	800ceb8 <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 800658c:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <RTC_GetTime+0x50>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6839      	ldr	r1, [r7, #0]
 8006592:	2200      	movs	r2, #0
 8006594:	0018      	movs	r0, r3
 8006596:	f00e fa19 	bl	80149cc <HAL_RTC_GetDate>
 800659a:	1e03      	subs	r3, r0, #0
 800659c:	d005      	beq.n	80065aa <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 800659e:	4a08      	ldr	r2, [pc, #32]	@ (80065c0 <RTC_GetTime+0x5c>)
 80065a0:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <RTC_GetTime+0x58>)
 80065a2:	0019      	movs	r1, r3
 80065a4:	2001      	movs	r0, #1
 80065a6:	f006 fc87 	bl	800ceb8 <CreateLine>
    }
}
 80065aa:	46c0      	nop			@ (mov r8, r8)
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b002      	add	sp, #8
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	20000cd4 	.word	0x20000cd4
 80065b8:	08022104 	.word	0x08022104
 80065bc:	080220e4 	.word	0x080220e4
 80065c0:	08022120 	.word	0x08022120

080065c4 <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80065ca:	003a      	movs	r2, r7
 80065cc:	1d3b      	adds	r3, r7, #4
 80065ce:	0011      	movs	r1, r2
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7ff ffc7 	bl	8006564 <RTC_GetTime>
  return currentDate.WeekDay;
 80065d6:	003b      	movs	r3, r7
 80065d8:	781b      	ldrb	r3, [r3, #0]
}
 80065da:	0018      	movs	r0, r3
 80065dc:	46bd      	mov	sp, r7
 80065de:	b006      	add	sp, #24
 80065e0:	bd80      	pop	{r7, pc}
	...

080065e4 <InitClock>:

    // Instellen op Stop mode met low-power regulator
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
}

void InitClock(RTC_HandleTypeDef* h_hrtc){
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 80065ec:	4b03      	ldr	r3, [pc, #12]	@ (80065fc <InitClock+0x18>)
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	601a      	str	r2, [r3, #0]
}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b002      	add	sp, #8
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	46c0      	nop			@ (mov r8, r8)
 80065fc:	20000cd4 	.word	0x20000cd4

08006600 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006606:	003b      	movs	r3, r7
 8006608:	0018      	movs	r0, r3
 800660a:	2308      	movs	r3, #8
 800660c:	001a      	movs	r2, r3
 800660e:	2100      	movs	r1, #0
 8006610:	f018 f884 	bl	801e71c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006614:	4b30      	ldr	r3, [pc, #192]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006616:	4a31      	ldr	r2, [pc, #196]	@ (80066dc <MX_ADC_Init+0xdc>)
 8006618:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800661a:	4b2f      	ldr	r3, [pc, #188]	@ (80066d8 <MX_ADC_Init+0xd8>)
 800661c:	2200      	movs	r2, #0
 800661e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006620:	4b2d      	ldr	r3, [pc, #180]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006622:	22c0      	movs	r2, #192	@ 0xc0
 8006624:	0612      	lsls	r2, r2, #24
 8006626:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006628:	4b2b      	ldr	r3, [pc, #172]	@ (80066d8 <MX_ADC_Init+0xd8>)
 800662a:	2200      	movs	r2, #0
 800662c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800662e:	4b2a      	ldr	r3, [pc, #168]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006630:	2200      	movs	r2, #0
 8006632:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006634:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006636:	2201      	movs	r2, #1
 8006638:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800663a:	4b27      	ldr	r3, [pc, #156]	@ (80066d8 <MX_ADC_Init+0xd8>)
 800663c:	2200      	movs	r2, #0
 800663e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006640:	4b25      	ldr	r3, [pc, #148]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006642:	2220      	movs	r2, #32
 8006644:	2100      	movs	r1, #0
 8006646:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006648:	4b23      	ldr	r3, [pc, #140]	@ (80066d8 <MX_ADC_Init+0xd8>)
 800664a:	2221      	movs	r2, #33	@ 0x21
 800664c:	2101      	movs	r1, #1
 800664e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006650:	4b21      	ldr	r3, [pc, #132]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006652:	2200      	movs	r2, #0
 8006654:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006656:	4b20      	ldr	r3, [pc, #128]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006658:	22c2      	movs	r2, #194	@ 0xc2
 800665a:	32ff      	adds	r2, #255	@ 0xff
 800665c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800665e:	4b1e      	ldr	r3, [pc, #120]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006660:	222c      	movs	r2, #44	@ 0x2c
 8006662:	2100      	movs	r1, #0
 8006664:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006666:	4b1c      	ldr	r3, [pc, #112]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006668:	2204      	movs	r2, #4
 800666a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800666c:	4b1a      	ldr	r3, [pc, #104]	@ (80066d8 <MX_ADC_Init+0xd8>)
 800666e:	2200      	movs	r2, #0
 8006670:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006672:	4b19      	ldr	r3, [pc, #100]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006674:	2200      	movs	r2, #0
 8006676:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006678:	4b17      	ldr	r3, [pc, #92]	@ (80066d8 <MX_ADC_Init+0xd8>)
 800667a:	2200      	movs	r2, #0
 800667c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800667e:	4b16      	ldr	r3, [pc, #88]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006680:	2200      	movs	r2, #0
 8006682:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8006684:	4b14      	ldr	r3, [pc, #80]	@ (80066d8 <MX_ADC_Init+0xd8>)
 8006686:	0018      	movs	r0, r3
 8006688:	f007 f800 	bl	800d68c <HAL_ADC_Init>
 800668c:	1e03      	subs	r3, r0, #0
 800668e:	d001      	beq.n	8006694 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8006690:	f001 f856 	bl	8007740 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006694:	003b      	movs	r3, r7
 8006696:	4a12      	ldr	r2, [pc, #72]	@ (80066e0 <MX_ADC_Init+0xe0>)
 8006698:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800669a:	003b      	movs	r3, r7
 800669c:	2280      	movs	r2, #128	@ 0x80
 800669e:	0152      	lsls	r2, r2, #5
 80066a0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80066a2:	003a      	movs	r2, r7
 80066a4:	4b0c      	ldr	r3, [pc, #48]	@ (80066d8 <MX_ADC_Init+0xd8>)
 80066a6:	0011      	movs	r1, r2
 80066a8:	0018      	movs	r0, r3
 80066aa:	f007 fa5f 	bl	800db6c <HAL_ADC_ConfigChannel>
 80066ae:	1e03      	subs	r3, r0, #0
 80066b0:	d001      	beq.n	80066b6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80066b2:	f001 f845 	bl	8007740 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80066b6:	003b      	movs	r3, r7
 80066b8:	4a0a      	ldr	r2, [pc, #40]	@ (80066e4 <MX_ADC_Init+0xe4>)
 80066ba:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80066bc:	003a      	movs	r2, r7
 80066be:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <MX_ADC_Init+0xd8>)
 80066c0:	0011      	movs	r1, r2
 80066c2:	0018      	movs	r0, r3
 80066c4:	f007 fa52 	bl	800db6c <HAL_ADC_ConfigChannel>
 80066c8:	1e03      	subs	r3, r0, #0
 80066ca:	d001      	beq.n	80066d0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80066cc:	f001 f838 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80066d0:	46c0      	nop			@ (mov r8, r8)
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b002      	add	sp, #8
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	20000ce0 	.word	0x20000ce0
 80066dc:	40012400 	.word	0x40012400
 80066e0:	38004000 	.word	0x38004000
 80066e4:	3c008000 	.word	0x3c008000

080066e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80066e8:	b590      	push	{r4, r7, lr}
 80066ea:	b089      	sub	sp, #36	@ 0x24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f0:	240c      	movs	r4, #12
 80066f2:	193b      	adds	r3, r7, r4
 80066f4:	0018      	movs	r0, r3
 80066f6:	2314      	movs	r3, #20
 80066f8:	001a      	movs	r2, r3
 80066fa:	2100      	movs	r1, #0
 80066fc:	f018 f80e 	bl	801e71c <memset>
  if(adcHandle->Instance==ADC1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a14      	ldr	r2, [pc, #80]	@ (8006758 <HAL_ADC_MspInit+0x70>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d121      	bne.n	800674e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800670a:	4b14      	ldr	r3, [pc, #80]	@ (800675c <HAL_ADC_MspInit+0x74>)
 800670c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800670e:	4b13      	ldr	r3, [pc, #76]	@ (800675c <HAL_ADC_MspInit+0x74>)
 8006710:	2180      	movs	r1, #128	@ 0x80
 8006712:	0089      	lsls	r1, r1, #2
 8006714:	430a      	orrs	r2, r1
 8006716:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006718:	4b10      	ldr	r3, [pc, #64]	@ (800675c <HAL_ADC_MspInit+0x74>)
 800671a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671c:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <HAL_ADC_MspInit+0x74>)
 800671e:	2104      	movs	r1, #4
 8006720:	430a      	orrs	r2, r1
 8006722:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006724:	4b0d      	ldr	r3, [pc, #52]	@ (800675c <HAL_ADC_MspInit+0x74>)
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	2204      	movs	r2, #4
 800672a:	4013      	ands	r3, r2
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006730:	193b      	adds	r3, r7, r4
 8006732:	2230      	movs	r2, #48	@ 0x30
 8006734:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006736:	193b      	adds	r3, r7, r4
 8006738:	2203      	movs	r2, #3
 800673a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673c:	193b      	adds	r3, r7, r4
 800673e:	2200      	movs	r2, #0
 8006740:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006742:	193b      	adds	r3, r7, r4
 8006744:	4a06      	ldr	r2, [pc, #24]	@ (8006760 <HAL_ADC_MspInit+0x78>)
 8006746:	0019      	movs	r1, r3
 8006748:	0010      	movs	r0, r2
 800674a:	f008 f817 	bl	800e77c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800674e:	46c0      	nop			@ (mov r8, r8)
 8006750:	46bd      	mov	sp, r7
 8006752:	b009      	add	sp, #36	@ 0x24
 8006754:	bd90      	pop	{r4, r7, pc}
 8006756:	46c0      	nop			@ (mov r8, r8)
 8006758:	40012400 	.word	0x40012400
 800675c:	40021000 	.word	0x40021000
 8006760:	50000800 	.word	0x50000800

08006764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800676a:	4b10      	ldr	r3, [pc, #64]	@ (80067ac <MX_DMA_Init+0x48>)
 800676c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800676e:	4b0f      	ldr	r3, [pc, #60]	@ (80067ac <MX_DMA_Init+0x48>)
 8006770:	2101      	movs	r1, #1
 8006772:	430a      	orrs	r2, r1
 8006774:	631a      	str	r2, [r3, #48]	@ 0x30
 8006776:	4b0d      	ldr	r3, [pc, #52]	@ (80067ac <MX_DMA_Init+0x48>)
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	2201      	movs	r2, #1
 800677c:	4013      	ands	r3, r2
 800677e:	607b      	str	r3, [r7, #4]
 8006780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006782:	2200      	movs	r2, #0
 8006784:	2100      	movs	r1, #0
 8006786:	200a      	movs	r0, #10
 8006788:	f007 fbaa 	bl	800dee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800678c:	200a      	movs	r0, #10
 800678e:	f007 fbbc 	bl	800df0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006792:	2200      	movs	r2, #0
 8006794:	2103      	movs	r1, #3
 8006796:	200b      	movs	r0, #11
 8006798:	f007 fba2 	bl	800dee0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800679c:	200b      	movs	r0, #11
 800679e:	f007 fbb4 	bl	800df0a <HAL_NVIC_EnableIRQ>

}
 80067a2:	46c0      	nop			@ (mov r8, r8)
 80067a4:	46bd      	mov	sp, r7
 80067a6:	b002      	add	sp, #8
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	46c0      	nop			@ (mov r8, r8)
 80067ac:	40021000 	.word	0x40021000

080067b0 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b7f      	cmp	r3, #127	@ 0x7f
 80067c0:	d901      	bls.n	80067c6 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80067c2:	237f      	movs	r3, #127	@ 0x7f
 80067c4:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80067c6:	2017      	movs	r0, #23
 80067c8:	183b      	adds	r3, r7, r0
 80067ca:	490d      	ldr	r1, [pc, #52]	@ (8006800 <accessLUT10log10+0x50>)
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	188a      	adds	r2, r1, r2
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80067d4:	0001      	movs	r1, r0
 80067d6:	187b      	adds	r3, r7, r1
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	2206      	movs	r2, #6
 80067dc:	4113      	asrs	r3, r2
 80067de:	001a      	movs	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 80067e4:	187b      	adds	r3, r7, r1
 80067e6:	781a      	ldrb	r2, [r3, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2106      	movs	r1, #6
 80067ee:	408b      	lsls	r3, r1
 80067f0:	1ad2      	subs	r2, r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	46c0      	nop			@ (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b006      	add	sp, #24
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	0802316c 	.word	0x0802316c

08006804 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006804:	b5b0      	push	{r4, r5, r7, lr}
 8006806:	b090      	sub	sp, #64	@ 0x40
 8006808:	af00      	add	r7, sp, #0
 800680a:	6138      	str	r0, [r7, #16]
 800680c:	6179      	str	r1, [r7, #20]
 800680e:	60fa      	str	r2, [r7, #12]
 8006810:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006812:	2308      	movs	r3, #8
 8006814:	001a      	movs	r2, r3
 8006816:	3a20      	subs	r2, #32
 8006818:	2a00      	cmp	r2, #0
 800681a:	db03      	blt.n	8006824 <efficient10log10+0x20>
 800681c:	2101      	movs	r1, #1
 800681e:	4091      	lsls	r1, r2
 8006820:	000d      	movs	r5, r1
 8006822:	e008      	b.n	8006836 <efficient10log10+0x32>
 8006824:	2220      	movs	r2, #32
 8006826:	1ad2      	subs	r2, r2, r3
 8006828:	2101      	movs	r1, #1
 800682a:	40d1      	lsrs	r1, r2
 800682c:	000a      	movs	r2, r1
 800682e:	2100      	movs	r1, #0
 8006830:	4099      	lsls	r1, r3
 8006832:	000d      	movs	r5, r1
 8006834:	4315      	orrs	r5, r2
 8006836:	2201      	movs	r2, #1
 8006838:	409a      	lsls	r2, r3
 800683a:	0014      	movs	r4, r2
 800683c:	2201      	movs	r2, #1
 800683e:	4252      	negs	r2, r2
 8006840:	17d3      	asrs	r3, r2, #31
 8006842:	1912      	adds	r2, r2, r4
 8006844:	416b      	adcs	r3, r5
 8006846:	633a      	str	r2, [r7, #48]	@ 0x30
 8006848:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800684a:	2336      	movs	r3, #54	@ 0x36
 800684c:	2208      	movs	r2, #8
 800684e:	189b      	adds	r3, r3, r2
 8006850:	19db      	adds	r3, r3, r7
 8006852:	2200      	movs	r2, #0
 8006854:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006856:	e017      	b.n	8006888 <efficient10log10+0x84>
    {
        P = P >> 1;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	07db      	lsls	r3, r3, #31
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	0852      	lsrs	r2, r2, #1
 8006860:	603a      	str	r2, [r7, #0]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	431a      	orrs	r2, r3
 8006866:	603a      	str	r2, [r7, #0]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	085b      	lsrs	r3, r3, #1
 800686c:	607b      	str	r3, [r7, #4]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	687c      	ldr	r4, [r7, #4]
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	617c      	str	r4, [r7, #20]
        bShift++;
 8006876:	2136      	movs	r1, #54	@ 0x36
 8006878:	2008      	movs	r0, #8
 800687a:	180b      	adds	r3, r1, r0
 800687c:	19db      	adds	r3, r3, r7
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	180b      	adds	r3, r1, r0
 8006882:	19db      	adds	r3, r3, r7
 8006884:	3201      	adds	r2, #1
 8006886:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688c:	429a      	cmp	r2, r3
 800688e:	d8e3      	bhi.n	8006858 <efficient10log10+0x54>
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006894:	429a      	cmp	r2, r3
 8006896:	d103      	bne.n	80068a0 <efficient10log10+0x9c>
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	429a      	cmp	r2, r3
 800689e:	d8db      	bhi.n	8006858 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	2308      	movs	r3, #8
 80068a4:	3b01      	subs	r3, #1
 80068a6:	2101      	movs	r1, #1
 80068a8:	4099      	lsls	r1, r3
 80068aa:	000b      	movs	r3, r1
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80068b8:	231c      	movs	r3, #28
 80068ba:	2408      	movs	r4, #8
 80068bc:	191b      	adds	r3, r3, r4
 80068be:	19da      	adds	r2, r3, r7
 80068c0:	2320      	movs	r3, #32
 80068c2:	191b      	adds	r3, r3, r4
 80068c4:	19d9      	adds	r1, r3, r7
 80068c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c8:	0018      	movs	r0, r3
 80068ca:	f7ff ff71 	bl	80067b0 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80068ce:	2215      	movs	r2, #21
 80068d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d2:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80068d4:	2036      	movs	r0, #54	@ 0x36
 80068d6:	1902      	adds	r2, r0, r4
 80068d8:	19d2      	adds	r2, r2, r7
 80068da:	8812      	ldrh	r2, [r2, #0]
 80068dc:	2103      	movs	r1, #3
 80068de:	434a      	muls	r2, r1
 80068e0:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80068e2:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 80068e4:	0021      	movs	r1, r4
 80068e6:	1843      	adds	r3, r0, r1
 80068e8:	19db      	adds	r3, r3, r7
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	2201      	movs	r2, #1
 80068ee:	4353      	muls	r3, r2
 80068f0:	2203      	movs	r2, #3
 80068f2:	4113      	asrs	r3, r2
 80068f4:	001a      	movs	r2, r3
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 80068fa:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 80068fc:	2314      	movs	r3, #20
 80068fe:	185b      	adds	r3, r3, r1
 8006900:	19da      	adds	r2, r3, r7
 8006902:	2318      	movs	r3, #24
 8006904:	185b      	adds	r3, r3, r1
 8006906:	19db      	adds	r3, r3, r7
 8006908:	0011      	movs	r1, r2
 800690a:	0018      	movs	r0, r3
 800690c:	f000 f80a 	bl	8006924 <correctIntFracNumber>
    integerPart[0] = intPart;
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	601a      	str	r2, [r3, #0]
}
 800691c:	46c0      	nop			@ (mov r8, r8)
 800691e:	46bd      	mov	sp, r7
 8006920:	b010      	add	sp, #64	@ 0x40
 8006922:	bdb0      	pop	{r4, r5, r7, pc}

08006924 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 800692e:	e00a      	b.n	8006946 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3b0a      	subs	r3, #10
 8006940:	001a      	movs	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b09      	cmp	r3, #9
 800694c:	dcf0      	bgt.n	8006930 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 800694e:	e00a      	b.n	8006966 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	330a      	adds	r3, #10
 8006960:	001a      	movs	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3309      	adds	r3, #9
 800696c:	dbf0      	blt.n	8006950 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	da0f      	bge.n	8006996 <correctIntFracNumber+0x72>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	dd0b      	ble.n	8006996 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3b0a      	subs	r3, #10
 800698e:	001a      	movs	r2, r3
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006994:	e012      	b.n	80069bc <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	dd0e      	ble.n	80069bc <correctIntFracNumber+0x98>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da0a      	bge.n	80069bc <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	330a      	adds	r3, #10
 80069b6:	001a      	movs	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	601a      	str	r2, [r3, #0]
}
 80069bc:	46c0      	nop			@ (mov r8, r8)
 80069be:	46bd      	mov	sp, r7
 80069c0:	b002      	add	sp, #8
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80069d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <Gadget_Init+0x40>)
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	f001 fa93 	bl	8007f00 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	68b9      	ldr	r1, [r7, #8]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	0018      	movs	r0, r3
 80069e2:	f000 ff11 	bl	8007808 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	0018      	movs	r0, r3
 80069ea:	f7fc ffef 	bl	80039cc <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 80069ee:	4a06      	ldr	r2, [pc, #24]	@ (8006a08 <Gadget_Init+0x44>)
 80069f0:	4b06      	ldr	r3, [pc, #24]	@ (8006a0c <Gadget_Init+0x48>)
 80069f2:	0019      	movs	r1, r3
 80069f4:	2003      	movs	r0, #3
 80069f6:	f006 fa5f 	bl	800ceb8 <CreateLine>
}
 80069fa:	46c0      	nop			@ (mov r8, r8)
 80069fc:	46bd      	mov	sp, r7
 80069fe:	b004      	add	sp, #16
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	20000080 	.word	0x20000080
 8006a08:	0802216c 	.word	0x0802216c
 8006a0c:	08022180 	.word	0x08022180

08006a10 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006a10:	b580      	push	{r7, lr}
 8006a12:	af00      	add	r7, sp, #0
  Meas_Test();
 8006a14:	f001 f830 	bl	8007a78 <Meas_Test>
}
 8006a18:	46c0      	nop			@ (mov r8, r8)
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <UpkeepGadget>:

bool UpkeepGadget() {
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8006a26:	f001 f9e3 	bl	8007df0 <Meas_Upkeep>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	001a      	movs	r2, r3
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a6c <UpkeepGadget+0x4c>)
 8006a30:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8006a32:	f001 f8c5 	bl	8007bc0 <Mic_Upkeep>
 8006a36:	0003      	movs	r3, r0
 8006a38:	001a      	movs	r2, r3
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a70 <UpkeepGadget+0x50>)
 8006a3c:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <UpkeepGadget+0x4c>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d103      	bne.n	8006a4e <UpkeepGadget+0x2e>
 8006a46:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <UpkeepGadget+0x50>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b03      	cmp	r3, #3
 8006a4c:	d001      	beq.n	8006a52 <UpkeepGadget+0x32>
 8006a4e:	2201      	movs	r2, #1
 8006a50:	e000      	b.n	8006a54 <UpkeepGadget+0x34>
 8006a52:	2200      	movs	r2, #0
 8006a54:	1dfb      	adds	r3, r7, #7
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006a60:	1dfb      	adds	r3, r7, #7
 8006a62:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006a64:	0018      	movs	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	b002      	add	sp, #8
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000d3c 	.word	0x20000d3c
 8006a70:	20000d3d 	.word	0x20000d3d

08006a74 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	0011      	movs	r1, r2
 8006a84:	0018      	movs	r0, r3
 8006a86:	f003 fe07 	bl	800a698 <SGP_Init>
}
 8006a8a:	46c0      	nop			@ (mov r8, r8)
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	b002      	add	sp, #8
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006a92:	b580      	push	{r7, lr}
 8006a94:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006a96:	f003 fe19 	bl	800a6cc <SGP_StartMeasurement>
}
 8006a9a:	46c0      	nop			@ (mov r8, r8)
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f003 fe7e 	bl	800a7ac <SGP_GetMeasurementValues>
 8006ab0:	0003      	movs	r3, r0
}
 8006ab2:	0018      	movs	r0, r3
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	b002      	add	sp, #8
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8006aba:	b580      	push	{r7, lr}
 8006abc:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8006abe:	f004 f883 	bl	800abc8 <SGP_DeviceConnected>
 8006ac2:	0003      	movs	r3, r0
}
 8006ac4:	0018      	movs	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006acc:	b590      	push	{r4, r7, lr}
 8006ace:	b08b      	sub	sp, #44	@ 0x2c
 8006ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ad2:	2414      	movs	r4, #20
 8006ad4:	193b      	adds	r3, r7, r4
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	2314      	movs	r3, #20
 8006ada:	001a      	movs	r2, r3
 8006adc:	2100      	movs	r1, #0
 8006ade:	f017 fe1d 	bl	801e71c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ae2:	4b7c      	ldr	r3, [pc, #496]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae6:	4b7b      	ldr	r3, [pc, #492]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006ae8:	2104      	movs	r1, #4
 8006aea:	430a      	orrs	r2, r1
 8006aec:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006aee:	4b79      	ldr	r3, [pc, #484]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af2:	2204      	movs	r2, #4
 8006af4:	4013      	ands	r3, r2
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006afa:	4b76      	ldr	r3, [pc, #472]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006afe:	4b75      	ldr	r3, [pc, #468]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b00:	2180      	movs	r1, #128	@ 0x80
 8006b02:	430a      	orrs	r2, r1
 8006b04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b06:	4b73      	ldr	r3, [pc, #460]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0a:	2280      	movs	r2, #128	@ 0x80
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b12:	4b70      	ldr	r3, [pc, #448]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	4b6f      	ldr	r3, [pc, #444]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b18:	2101      	movs	r1, #1
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	2201      	movs	r2, #1
 8006b24:	4013      	ands	r3, r2
 8006b26:	60bb      	str	r3, [r7, #8]
 8006b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2e:	4b69      	ldr	r3, [pc, #420]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b30:	2102      	movs	r1, #2
 8006b32:	430a      	orrs	r2, r1
 8006b34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b36:	4b67      	ldr	r3, [pc, #412]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b42:	4b64      	ldr	r3, [pc, #400]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b46:	4b63      	ldr	r3, [pc, #396]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b48:	2108      	movs	r1, #8
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006b4e:	4b61      	ldr	r3, [pc, #388]	@ (8006cd4 <MX_GPIO_Init+0x208>)
 8006b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b52:	2208      	movs	r2, #8
 8006b54:	4013      	ands	r3, r2
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8006cd8 <MX_GPIO_Init+0x20c>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	2101      	movs	r1, #1
 8006b60:	0018      	movs	r0, r3
 8006b62:	f007 ffa6 	bl	800eab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006b66:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd8 <MX_GPIO_Init+0x20c>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2102      	movs	r1, #2
 8006b6c:	0018      	movs	r0, r3
 8006b6e:	f007 ffa0 	bl	800eab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006b72:	495a      	ldr	r1, [pc, #360]	@ (8006cdc <MX_GPIO_Init+0x210>)
 8006b74:	4b5a      	ldr	r3, [pc, #360]	@ (8006ce0 <MX_GPIO_Init+0x214>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f007 ff9a 	bl	800eab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006b7e:	2380      	movs	r3, #128	@ 0x80
 8006b80:	011b      	lsls	r3, r3, #4
 8006b82:	4858      	ldr	r0, [pc, #352]	@ (8006ce4 <MX_GPIO_Init+0x218>)
 8006b84:	2201      	movs	r2, #1
 8006b86:	0019      	movs	r1, r3
 8006b88:	f007 ff93 	bl	800eab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006b8c:	2380      	movs	r3, #128	@ 0x80
 8006b8e:	015b      	lsls	r3, r3, #5
 8006b90:	4854      	ldr	r0, [pc, #336]	@ (8006ce4 <MX_GPIO_Init+0x218>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	0019      	movs	r1, r3
 8006b96:	f007 ff8c 	bl	800eab2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8006b9a:	193b      	adds	r3, r7, r4
 8006b9c:	4a52      	ldr	r2, [pc, #328]	@ (8006ce8 <MX_GPIO_Init+0x21c>)
 8006b9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ba0:	193b      	adds	r3, r7, r4
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba6:	193b      	adds	r3, r7, r4
 8006ba8:	2200      	movs	r2, #0
 8006baa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bac:	193b      	adds	r3, r7, r4
 8006bae:	4a4d      	ldr	r2, [pc, #308]	@ (8006ce4 <MX_GPIO_Init+0x218>)
 8006bb0:	0019      	movs	r1, r3
 8006bb2:	0010      	movs	r0, r2
 8006bb4:	f007 fde2 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006bb8:	193b      	adds	r3, r7, r4
 8006bba:	2203      	movs	r2, #3
 8006bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bbe:	193b      	adds	r3, r7, r4
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bc4:	193b      	adds	r3, r7, r4
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bca:	193b      	adds	r3, r7, r4
 8006bcc:	2200      	movs	r2, #0
 8006bce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006bd0:	193b      	adds	r3, r7, r4
 8006bd2:	4a41      	ldr	r2, [pc, #260]	@ (8006cd8 <MX_GPIO_Init+0x20c>)
 8006bd4:	0019      	movs	r1, r3
 8006bd6:	0010      	movs	r0, r2
 8006bd8:	f007 fdd0 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006bdc:	193b      	adds	r3, r7, r4
 8006bde:	2270      	movs	r2, #112	@ 0x70
 8006be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006be2:	193b      	adds	r3, r7, r4
 8006be4:	2203      	movs	r2, #3
 8006be6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be8:	193b      	adds	r3, r7, r4
 8006bea:	2200      	movs	r2, #0
 8006bec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bee:	193a      	adds	r2, r7, r4
 8006bf0:	23a0      	movs	r3, #160	@ 0xa0
 8006bf2:	05db      	lsls	r3, r3, #23
 8006bf4:	0011      	movs	r1, r2
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	f007 fdc0 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8006bfc:	193b      	adds	r3, r7, r4
 8006bfe:	4a3b      	ldr	r2, [pc, #236]	@ (8006cec <MX_GPIO_Init+0x220>)
 8006c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c02:	193b      	adds	r3, r7, r4
 8006c04:	2200      	movs	r2, #0
 8006c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c08:	193b      	adds	r3, r7, r4
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c0e:	193a      	adds	r2, r7, r4
 8006c10:	23a0      	movs	r3, #160	@ 0xa0
 8006c12:	05db      	lsls	r3, r3, #23
 8006c14:	0011      	movs	r1, r2
 8006c16:	0018      	movs	r0, r3
 8006c18:	f007 fdb0 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8006c1c:	193b      	adds	r3, r7, r4
 8006c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8006cdc <MX_GPIO_Init+0x210>)
 8006c20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c22:	193b      	adds	r3, r7, r4
 8006c24:	2201      	movs	r2, #1
 8006c26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c28:	193b      	adds	r3, r7, r4
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c2e:	193b      	adds	r3, r7, r4
 8006c30:	2200      	movs	r2, #0
 8006c32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c34:	193b      	adds	r3, r7, r4
 8006c36:	4a2a      	ldr	r2, [pc, #168]	@ (8006ce0 <MX_GPIO_Init+0x214>)
 8006c38:	0019      	movs	r1, r3
 8006c3a:	0010      	movs	r0, r2
 8006c3c:	f007 fd9e 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8006c40:	193b      	adds	r3, r7, r4
 8006c42:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf0 <MX_GPIO_Init+0x224>)
 8006c44:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c46:	193b      	adds	r3, r7, r4
 8006c48:	2203      	movs	r2, #3
 8006c4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4c:	193b      	adds	r3, r7, r4
 8006c4e:	2200      	movs	r2, #0
 8006c50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	4a22      	ldr	r2, [pc, #136]	@ (8006ce0 <MX_GPIO_Init+0x214>)
 8006c56:	0019      	movs	r1, r3
 8006c58:	0010      	movs	r0, r2
 8006c5a:	f007 fd8f 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006c5e:	0021      	movs	r1, r4
 8006c60:	187b      	adds	r3, r7, r1
 8006c62:	2280      	movs	r2, #128	@ 0x80
 8006c64:	0092      	lsls	r2, r2, #2
 8006c66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c68:	000c      	movs	r4, r1
 8006c6a:	193b      	adds	r3, r7, r4
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c70:	193b      	adds	r3, r7, r4
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006c76:	193b      	adds	r3, r7, r4
 8006c78:	4a1a      	ldr	r2, [pc, #104]	@ (8006ce4 <MX_GPIO_Init+0x218>)
 8006c7a:	0019      	movs	r1, r3
 8006c7c:	0010      	movs	r0, r2
 8006c7e:	f007 fd7d 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006c82:	0021      	movs	r1, r4
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	22c0      	movs	r2, #192	@ 0xc0
 8006c88:	0152      	lsls	r2, r2, #5
 8006c8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c8c:	000c      	movs	r4, r1
 8006c8e:	193b      	adds	r3, r7, r4
 8006c90:	2201      	movs	r2, #1
 8006c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c94:	193b      	adds	r3, r7, r4
 8006c96:	2200      	movs	r2, #0
 8006c98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9a:	193b      	adds	r3, r7, r4
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ca0:	193b      	adds	r3, r7, r4
 8006ca2:	4a10      	ldr	r2, [pc, #64]	@ (8006ce4 <MX_GPIO_Init+0x218>)
 8006ca4:	0019      	movs	r1, r3
 8006ca6:	0010      	movs	r0, r2
 8006ca8:	f007 fd68 	bl	800e77c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006cac:	0021      	movs	r1, r4
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	2204      	movs	r2, #4
 8006cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cb4:	187b      	adds	r3, r7, r1
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cba:	187b      	adds	r3, r7, r1
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006cc0:	187b      	adds	r3, r7, r1
 8006cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf4 <MX_GPIO_Init+0x228>)
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	0010      	movs	r0, r2
 8006cc8:	f007 fd58 	bl	800e77c <HAL_GPIO_Init>

}
 8006ccc:	46c0      	nop			@ (mov r8, r8)
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	b00b      	add	sp, #44	@ 0x2c
 8006cd2:	bd90      	pop	{r4, r7, pc}
 8006cd4:	40021000 	.word	0x40021000
 8006cd8:	50001c00 	.word	0x50001c00
 8006cdc:	00000301 	.word	0x00000301
 8006ce0:	50000400 	.word	0x50000400
 8006ce4:	50000800 	.word	0x50000800
 8006ce8:	0000200c 	.word	0x0000200c
 8006cec:	00008180 	.word	0x00008180
 8006cf0:	0000403e 	.word	0x0000403e
 8006cf4:	50000c00 	.word	0x50000c00

08006cf8 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2100      	movs	r1, #0
 8006d06:	0018      	movs	r0, r3
 8006d08:	f00e f91c 	bl	8014f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2108      	movs	r1, #8
 8006d10:	0018      	movs	r0, r3
 8006d12:	f00e f917 	bl	8014f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	210c      	movs	r1, #12
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f00e f912 	bl	8014f44 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006d20:	2380      	movs	r3, #128	@ 0x80
 8006d22:	05db      	lsls	r3, r3, #23
 8006d24:	22fa      	movs	r2, #250	@ 0xfa
 8006d26:	0112      	lsls	r2, r2, #4
 8006d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006d2a:	2380      	movs	r3, #128	@ 0x80
 8006d2c:	05db      	lsls	r3, r3, #23
 8006d2e:	22fa      	movs	r2, #250	@ 0xfa
 8006d30:	0112      	lsls	r2, r2, #4
 8006d32:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006d34:	2380      	movs	r3, #128	@ 0x80
 8006d36:	05db      	lsls	r3, r3, #23
 8006d38:	22fa      	movs	r2, #250	@ 0xfa
 8006d3a:	0112      	lsls	r2, r2, #4
 8006d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006d3e:	2380      	movs	r3, #128	@ 0x80
 8006d40:	05db      	lsls	r3, r3, #23
 8006d42:	22fa      	movs	r2, #250	@ 0xfa
 8006d44:	0112      	lsls	r2, r2, #4
 8006d46:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	2100      	movs	r1, #0
 8006d4c:	0018      	movs	r0, r3
 8006d4e:	f00e f8f9 	bl	8014f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2104      	movs	r1, #4
 8006d56:	0018      	movs	r0, r3
 8006d58:	f00e f8f4 	bl	8014f44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2108      	movs	r1, #8
 8006d60:	0018      	movs	r0, r3
 8006d62:	f00e f8ef 	bl	8014f44 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006d66:	4b0a      	ldr	r3, [pc, #40]	@ (8006d90 <GPIO_InitPWMLEDs+0x98>)
 8006d68:	22fa      	movs	r2, #250	@ 0xfa
 8006d6a:	0112      	lsls	r2, r2, #4
 8006d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006d6e:	4b08      	ldr	r3, [pc, #32]	@ (8006d90 <GPIO_InitPWMLEDs+0x98>)
 8006d70:	22fa      	movs	r2, #250	@ 0xfa
 8006d72:	0112      	lsls	r2, r2, #4
 8006d74:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006d76:	4b06      	ldr	r3, [pc, #24]	@ (8006d90 <GPIO_InitPWMLEDs+0x98>)
 8006d78:	22fa      	movs	r2, #250	@ 0xfa
 8006d7a:	0112      	lsls	r2, r2, #4
 8006d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006d7e:	4b04      	ldr	r3, [pc, #16]	@ (8006d90 <GPIO_InitPWMLEDs+0x98>)
 8006d80:	22fa      	movs	r2, #250	@ 0xfa
 8006d82:	0112      	lsls	r2, r2, #4
 8006d84:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006d86:	46c0      	nop			@ (mov r8, r8)
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	b002      	add	sp, #8
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	46c0      	nop			@ (mov r8, r8)
 8006d90:	40000400 	.word	0x40000400

08006d94 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006d9e:	683a      	ldr	r2, [r7, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	0011      	movs	r1, r2
 8006da4:	0018      	movs	r0, r3
 8006da6:	f006 f9e9 	bl	800d17c <HIDS_Init>
}
 8006daa:	46c0      	nop			@ (mov r8, r8)
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b002      	add	sp, #8
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006db2:	b580      	push	{r7, lr}
 8006db4:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006db6:	f006 fa03 	bl	800d1c0 <HIDS_StartMeasurement>
}
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	0011      	movs	r1, r2
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f006 fadb 	bl	800d38c <HIDS_GetMeasurementValues>
 8006dd6:	0003      	movs	r3, r0
}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b002      	add	sp, #8
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006de4:	f006 fa76 	bl	800d2d4 <HIDS_DeviceConnected>
 8006de8:	0003      	movs	r3, r0
}
 8006dea:	0018      	movs	r0, r3
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006df4:	4b1b      	ldr	r3, [pc, #108]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006df6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e68 <MX_I2C1_Init+0x78>)
 8006df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e6c <MX_I2C1_Init+0x7c>)
 8006dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006e00:	4b18      	ldr	r3, [pc, #96]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e06:	4b17      	ldr	r3, [pc, #92]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e0c:	4b15      	ldr	r3, [pc, #84]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006e12:	4b14      	ldr	r3, [pc, #80]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e18:	4b12      	ldr	r3, [pc, #72]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e1e:	4b11      	ldr	r3, [pc, #68]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e24:	4b0f      	ldr	r3, [pc, #60]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f007 fe5d 	bl	800eaec <HAL_I2C_Init>
 8006e32:	1e03      	subs	r3, r0, #0
 8006e34:	d001      	beq.n	8006e3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006e36:	f000 fc83 	bl	8007740 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	0018      	movs	r0, r3
 8006e40:	f00a fa2e 	bl	80112a0 <HAL_I2CEx_ConfigAnalogFilter>
 8006e44:	1e03      	subs	r3, r0, #0
 8006e46:	d001      	beq.n	8006e4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006e48:	f000 fc7a 	bl	8007740 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006e4c:	4b05      	ldr	r3, [pc, #20]	@ (8006e64 <MX_I2C1_Init+0x74>)
 8006e4e:	2100      	movs	r1, #0
 8006e50:	0018      	movs	r0, r3
 8006e52:	f00a fa71 	bl	8011338 <HAL_I2CEx_ConfigDigitalFilter>
 8006e56:	1e03      	subs	r3, r0, #0
 8006e58:	d001      	beq.n	8006e5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006e5a:	f000 fc71 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	20000d40 	.word	0x20000d40
 8006e68:	40005400 	.word	0x40005400
 8006e6c:	00503d58 	.word	0x00503d58

08006e70 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006e76:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee8 <MX_I2C2_Init+0x78>)
 8006e78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006eec <MX_I2C2_Init+0x7c>)
 8006e7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006e80:	4b18      	ldr	r3, [pc, #96]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e86:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006e88:	2201      	movs	r2, #1
 8006e8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e8c:	4b15      	ldr	r3, [pc, #84]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006e92:	4b14      	ldr	r3, [pc, #80]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e98:	4b12      	ldr	r3, [pc, #72]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e9e:	4b11      	ldr	r3, [pc, #68]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006eac:	0018      	movs	r0, r3
 8006eae:	f007 fe1d 	bl	800eaec <HAL_I2C_Init>
 8006eb2:	1e03      	subs	r3, r0, #0
 8006eb4:	d001      	beq.n	8006eba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006eb6:	f000 fc43 	bl	8007740 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006eba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	f00a f9ee 	bl	80112a0 <HAL_I2CEx_ConfigAnalogFilter>
 8006ec4:	1e03      	subs	r3, r0, #0
 8006ec6:	d001      	beq.n	8006ecc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006ec8:	f000 fc3a 	bl	8007740 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006ecc:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <MX_I2C2_Init+0x74>)
 8006ece:	2100      	movs	r1, #0
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f00a fa31 	bl	8011338 <HAL_I2CEx_ConfigDigitalFilter>
 8006ed6:	1e03      	subs	r3, r0, #0
 8006ed8:	d001      	beq.n	8006ede <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006eda:	f000 fc31 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006ede:	46c0      	nop			@ (mov r8, r8)
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20000d94 	.word	0x20000d94
 8006ee8:	40005800 	.word	0x40005800
 8006eec:	00503d58 	.word	0x00503d58

08006ef0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006ef0:	b590      	push	{r4, r7, lr}
 8006ef2:	b08b      	sub	sp, #44	@ 0x2c
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ef8:	2414      	movs	r4, #20
 8006efa:	193b      	adds	r3, r7, r4
 8006efc:	0018      	movs	r0, r3
 8006efe:	2314      	movs	r3, #20
 8006f00:	001a      	movs	r2, r3
 8006f02:	2100      	movs	r1, #0
 8006f04:	f017 fc0a 	bl	801e71c <memset>
  if(i2cHandle->Instance==I2C1)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8007084 <HAL_I2C_MspInit+0x194>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d000      	beq.n	8006f14 <HAL_I2C_MspInit+0x24>
 8006f12:	e083      	b.n	800701c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f14:	4b5c      	ldr	r3, [pc, #368]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8006f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f18:	4b5b      	ldr	r3, [pc, #364]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006f20:	4b59      	ldr	r3, [pc, #356]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	2202      	movs	r2, #2
 8006f26:	4013      	ands	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]
 8006f2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f2c:	0021      	movs	r1, r4
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	22c0      	movs	r2, #192	@ 0xc0
 8006f32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f34:	187b      	adds	r3, r7, r1
 8006f36:	2212      	movs	r2, #18
 8006f38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3a:	187b      	adds	r3, r7, r1
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f40:	187b      	adds	r3, r7, r1
 8006f42:	2203      	movs	r2, #3
 8006f44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006f46:	187b      	adds	r3, r7, r1
 8006f48:	2201      	movs	r2, #1
 8006f4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f4c:	187b      	adds	r3, r7, r1
 8006f4e:	4a4f      	ldr	r2, [pc, #316]	@ (800708c <HAL_I2C_MspInit+0x19c>)
 8006f50:	0019      	movs	r1, r3
 8006f52:	0010      	movs	r0, r2
 8006f54:	f007 fc12 	bl	800e77c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006f58:	4b4b      	ldr	r3, [pc, #300]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8006f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8006f5e:	2180      	movs	r1, #128	@ 0x80
 8006f60:	0389      	lsls	r1, r1, #14
 8006f62:	430a      	orrs	r2, r1
 8006f64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006f66:	4b4a      	ldr	r3, [pc, #296]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f68:	4a4a      	ldr	r2, [pc, #296]	@ (8007094 <HAL_I2C_MspInit+0x1a4>)
 8006f6a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006f6c:	4b48      	ldr	r3, [pc, #288]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f6e:	2206      	movs	r2, #6
 8006f70:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f72:	4b47      	ldr	r3, [pc, #284]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f78:	4b45      	ldr	r3, [pc, #276]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f7e:	4b44      	ldr	r3, [pc, #272]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f80:	2280      	movs	r2, #128	@ 0x80
 8006f82:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f84:	4b42      	ldr	r3, [pc, #264]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f8a:	4b41      	ldr	r3, [pc, #260]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006f90:	4b3f      	ldr	r3, [pc, #252]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f96:	4b3e      	ldr	r3, [pc, #248]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	f006 ffd0 	bl	800df44 <HAL_DMA_Init>
 8006fa4:	1e03      	subs	r3, r0, #0
 8006fa6:	d001      	beq.n	8006fac <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006fa8:	f000 fbca 	bl	8007740 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a38      	ldr	r2, [pc, #224]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006fb2:	4b37      	ldr	r3, [pc, #220]	@ (8007090 <HAL_I2C_MspInit+0x1a0>)
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006fb8:	4b37      	ldr	r3, [pc, #220]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fba:	4a38      	ldr	r2, [pc, #224]	@ (800709c <HAL_I2C_MspInit+0x1ac>)
 8006fbc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006fbe:	4b36      	ldr	r3, [pc, #216]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fc0:	2206      	movs	r2, #6
 8006fc2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fc4:	4b34      	ldr	r3, [pc, #208]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fc6:	2210      	movs	r2, #16
 8006fc8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fca:	4b33      	ldr	r3, [pc, #204]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fd0:	4b31      	ldr	r3, [pc, #196]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fd2:	2280      	movs	r2, #128	@ 0x80
 8006fd4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006fd6:	4b30      	ldr	r3, [pc, #192]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fdc:	4b2e      	ldr	r3, [pc, #184]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fde:	2200      	movs	r2, #0
 8006fe0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006fee:	4b2a      	ldr	r3, [pc, #168]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8006ff0:	0018      	movs	r0, r3
 8006ff2:	f006 ffa7 	bl	800df44 <HAL_DMA_Init>
 8006ff6:	1e03      	subs	r3, r0, #0
 8006ff8:	d001      	beq.n	8006ffe <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006ffa:	f000 fba1 	bl	8007740 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a25      	ldr	r2, [pc, #148]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8007002:	639a      	str	r2, [r3, #56]	@ 0x38
 8007004:	4b24      	ldr	r3, [pc, #144]	@ (8007098 <HAL_I2C_MspInit+0x1a8>)
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800700a:	2200      	movs	r2, #0
 800700c:	2100      	movs	r1, #0
 800700e:	2017      	movs	r0, #23
 8007010:	f006 ff66 	bl	800dee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007014:	2017      	movs	r0, #23
 8007016:	f006 ff78 	bl	800df0a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800701a:	e02e      	b.n	800707a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a1f      	ldr	r2, [pc, #124]	@ (80070a0 <HAL_I2C_MspInit+0x1b0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d129      	bne.n	800707a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007026:	4b18      	ldr	r3, [pc, #96]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8007028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702a:	4b17      	ldr	r3, [pc, #92]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 800702c:	2102      	movs	r1, #2
 800702e:	430a      	orrs	r2, r1
 8007030:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007032:	4b15      	ldr	r3, [pc, #84]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	2202      	movs	r2, #2
 8007038:	4013      	ands	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800703e:	2114      	movs	r1, #20
 8007040:	187b      	adds	r3, r7, r1
 8007042:	22c0      	movs	r2, #192	@ 0xc0
 8007044:	0112      	lsls	r2, r2, #4
 8007046:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007048:	187b      	adds	r3, r7, r1
 800704a:	2212      	movs	r2, #18
 800704c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704e:	187b      	adds	r3, r7, r1
 8007050:	2200      	movs	r2, #0
 8007052:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007054:	187b      	adds	r3, r7, r1
 8007056:	2203      	movs	r2, #3
 8007058:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800705a:	187b      	adds	r3, r7, r1
 800705c:	2206      	movs	r2, #6
 800705e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007060:	187b      	adds	r3, r7, r1
 8007062:	4a0a      	ldr	r2, [pc, #40]	@ (800708c <HAL_I2C_MspInit+0x19c>)
 8007064:	0019      	movs	r1, r3
 8007066:	0010      	movs	r0, r2
 8007068:	f007 fb88 	bl	800e77c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 800706e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007070:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <HAL_I2C_MspInit+0x198>)
 8007072:	2180      	movs	r1, #128	@ 0x80
 8007074:	03c9      	lsls	r1, r1, #15
 8007076:	430a      	orrs	r2, r1
 8007078:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	46bd      	mov	sp, r7
 800707e:	b00b      	add	sp, #44	@ 0x2c
 8007080:	bd90      	pop	{r4, r7, pc}
 8007082:	46c0      	nop			@ (mov r8, r8)
 8007084:	40005400 	.word	0x40005400
 8007088:	40021000 	.word	0x40021000
 800708c:	50000400 	.word	0x50000400
 8007090:	20000de8 	.word	0x20000de8
 8007094:	40020030 	.word	0x40020030
 8007098:	20000e30 	.word	0x20000e30
 800709c:	4002001c 	.word	0x4002001c
 80070a0:	40005800 	.word	0x40005800

080070a4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80070a8:	4b10      	ldr	r3, [pc, #64]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070aa:	4a11      	ldr	r2, [pc, #68]	@ (80070f0 <MX_I2S2_Init+0x4c>)
 80070ac:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80070ae:	4b0f      	ldr	r3, [pc, #60]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070b0:	22c0      	movs	r2, #192	@ 0xc0
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80070b6:	4b0d      	ldr	r3, [pc, #52]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80070bc:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070be:	2203      	movs	r2, #3
 80070c0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80070c2:	4b0a      	ldr	r3, [pc, #40]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80070c8:	4b08      	ldr	r3, [pc, #32]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070ca:	22fa      	movs	r2, #250	@ 0xfa
 80070cc:	0192      	lsls	r2, r2, #6
 80070ce:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80070d0:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80070d6:	4b05      	ldr	r3, [pc, #20]	@ (80070ec <MX_I2S2_Init+0x48>)
 80070d8:	0018      	movs	r0, r3
 80070da:	f00a f979 	bl	80113d0 <HAL_I2S_Init>
 80070de:	1e03      	subs	r3, r0, #0
 80070e0:	d001      	beq.n	80070e6 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80070e2:	f000 fb2d 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80070e6:	46c0      	nop			@ (mov r8, r8)
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000e78 	.word	0x20000e78
 80070f0:	40003800 	.word	0x40003800

080070f4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b089      	sub	sp, #36	@ 0x24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070fc:	240c      	movs	r4, #12
 80070fe:	193b      	adds	r3, r7, r4
 8007100:	0018      	movs	r0, r3
 8007102:	2314      	movs	r3, #20
 8007104:	001a      	movs	r2, r3
 8007106:	2100      	movs	r1, #0
 8007108:	f017 fb08 	bl	801e71c <memset>
  if(i2sHandle->Instance==SPI2)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2d      	ldr	r2, [pc, #180]	@ (80071c8 <HAL_I2S_MspInit+0xd4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d154      	bne.n	80071c0 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007116:	4b2d      	ldr	r3, [pc, #180]	@ (80071cc <HAL_I2S_MspInit+0xd8>)
 8007118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711a:	4b2c      	ldr	r3, [pc, #176]	@ (80071cc <HAL_I2S_MspInit+0xd8>)
 800711c:	2180      	movs	r1, #128	@ 0x80
 800711e:	01c9      	lsls	r1, r1, #7
 8007120:	430a      	orrs	r2, r1
 8007122:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007124:	4b29      	ldr	r3, [pc, #164]	@ (80071cc <HAL_I2S_MspInit+0xd8>)
 8007126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007128:	4b28      	ldr	r3, [pc, #160]	@ (80071cc <HAL_I2S_MspInit+0xd8>)
 800712a:	2102      	movs	r1, #2
 800712c:	430a      	orrs	r2, r1
 800712e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007130:	4b26      	ldr	r3, [pc, #152]	@ (80071cc <HAL_I2S_MspInit+0xd8>)
 8007132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007134:	2202      	movs	r2, #2
 8007136:	4013      	ands	r3, r2
 8007138:	60bb      	str	r3, [r7, #8]
 800713a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800713c:	193b      	adds	r3, r7, r4
 800713e:	22b0      	movs	r2, #176	@ 0xb0
 8007140:	0212      	lsls	r2, r2, #8
 8007142:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007144:	0021      	movs	r1, r4
 8007146:	187b      	adds	r3, r7, r1
 8007148:	2202      	movs	r2, #2
 800714a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800714c:	187b      	adds	r3, r7, r1
 800714e:	2200      	movs	r2, #0
 8007150:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007152:	187b      	adds	r3, r7, r1
 8007154:	2200      	movs	r2, #0
 8007156:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8007158:	187b      	adds	r3, r7, r1
 800715a:	2200      	movs	r2, #0
 800715c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800715e:	187b      	adds	r3, r7, r1
 8007160:	4a1b      	ldr	r2, [pc, #108]	@ (80071d0 <HAL_I2S_MspInit+0xdc>)
 8007162:	0019      	movs	r1, r3
 8007164:	0010      	movs	r0, r2
 8007166:	f007 fb09 	bl	800e77c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 800716a:	4b1a      	ldr	r3, [pc, #104]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 800716c:	4a1a      	ldr	r2, [pc, #104]	@ (80071d8 <HAL_I2S_MspInit+0xe4>)
 800716e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8007170:	4b18      	ldr	r3, [pc, #96]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 8007172:	2202      	movs	r2, #2
 8007174:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007176:	4b17      	ldr	r3, [pc, #92]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 8007178:	2200      	movs	r2, #0
 800717a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800717c:	4b15      	ldr	r3, [pc, #84]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 800717e:	2200      	movs	r2, #0
 8007180:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007182:	4b14      	ldr	r3, [pc, #80]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 8007184:	2280      	movs	r2, #128	@ 0x80
 8007186:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007188:	4b12      	ldr	r3, [pc, #72]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 800718a:	2280      	movs	r2, #128	@ 0x80
 800718c:	0052      	lsls	r2, r2, #1
 800718e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007190:	4b10      	ldr	r3, [pc, #64]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 8007192:	2280      	movs	r2, #128	@ 0x80
 8007194:	00d2      	lsls	r2, r2, #3
 8007196:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8007198:	4b0e      	ldr	r3, [pc, #56]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 800719a:	2220      	movs	r2, #32
 800719c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800719e:	4b0d      	ldr	r3, [pc, #52]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80071a4:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 80071a6:	0018      	movs	r0, r3
 80071a8:	f006 fecc 	bl	800df44 <HAL_DMA_Init>
 80071ac:	1e03      	subs	r3, r0, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80071b0:	f000 fac6 	bl	8007740 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a07      	ldr	r2, [pc, #28]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 80071b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80071ba:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <HAL_I2S_MspInit+0xe0>)
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80071c0:	46c0      	nop			@ (mov r8, r8)
 80071c2:	46bd      	mov	sp, r7
 80071c4:	b009      	add	sp, #36	@ 0x24
 80071c6:	bd90      	pop	{r4, r7, pc}
 80071c8:	40003800 	.word	0x40003800
 80071cc:	40021000 	.word	0x40021000
 80071d0:	50000400 	.word	0x50000400
 80071d4:	20000eb4 	.word	0x20000eb4
 80071d8:	40020044 	.word	0x40020044

080071dc <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80071dc:	b580      	push	{r7, lr}
 80071de:	af00      	add	r7, sp, #0
  testDone = true;
 80071e0:	4b1e      	ldr	r3, [pc, #120]	@ (800725c <SetTestDone+0x80>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 80071e6:	23fa      	movs	r3, #250	@ 0xfa
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	0018      	movs	r0, r3
 80071ec:	f006 fa0c 	bl	800d608 <HAL_Delay>
  SetDBLED(false, false, true);
 80071f0:	2201      	movs	r2, #1
 80071f2:	2100      	movs	r1, #0
 80071f4:	2000      	movs	r0, #0
 80071f6:	f004 fef5 	bl	800bfe4 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 80071fa:	4a19      	ldr	r2, [pc, #100]	@ (8007260 <SetTestDone+0x84>)
 80071fc:	23fa      	movs	r3, #250	@ 0xfa
 80071fe:	0119      	lsls	r1, r3, #4
 8007200:	23fa      	movs	r3, #250	@ 0xfa
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	0018      	movs	r0, r3
 8007206:	f004 feb9 	bl	800bf7c <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 800720a:	4a15      	ldr	r2, [pc, #84]	@ (8007260 <SetTestDone+0x84>)
 800720c:	23fa      	movs	r3, #250	@ 0xfa
 800720e:	0119      	lsls	r1, r3, #4
 8007210:	23fa      	movs	r3, #250	@ 0xfa
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	0018      	movs	r0, r3
 8007216:	f004 ff2f 	bl	800c078 <SetVocLED>
  HAL_Delay(1000);
 800721a:	23fa      	movs	r3, #250	@ 0xfa
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	0018      	movs	r0, r3
 8007220:	f006 f9f2 	bl	800d608 <HAL_Delay>
  SetDBLED(false, false, false);
 8007224:	2200      	movs	r2, #0
 8007226:	2100      	movs	r1, #0
 8007228:	2000      	movs	r0, #0
 800722a:	f004 fedb 	bl	800bfe4 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 800722e:	23fa      	movs	r3, #250	@ 0xfa
 8007230:	011a      	lsls	r2, r3, #4
 8007232:	23fa      	movs	r3, #250	@ 0xfa
 8007234:	0119      	lsls	r1, r3, #4
 8007236:	23fa      	movs	r3, #250	@ 0xfa
 8007238:	011b      	lsls	r3, r3, #4
 800723a:	0018      	movs	r0, r3
 800723c:	f004 fe9e 	bl	800bf7c <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007240:	23fa      	movs	r3, #250	@ 0xfa
 8007242:	011a      	lsls	r2, r3, #4
 8007244:	23fa      	movs	r3, #250	@ 0xfa
 8007246:	0119      	lsls	r1, r3, #4
 8007248:	23fa      	movs	r3, #250	@ 0xfa
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	0018      	movs	r0, r3
 800724e:	f004 ff13 	bl	800c078 <SetVocLED>
  InitDone();
 8007252:	f004 fe3d 	bl	800bed0 <InitDone>
}
 8007256:	46c0      	nop			@ (mov r8, r8)
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20000efc 	.word	0x20000efc
 8007260:	00000bb8 	.word	0x00000bb8

08007264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007268:	f006 f95e 	bl	800d528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800726c:	f000 f930 	bl	80074d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007270:	f7ff fc2c 	bl	8006acc <MX_GPIO_Init>
  MX_DMA_Init();
 8007274:	f7ff fa76 	bl	8006764 <MX_DMA_Init>
  MX_I2C1_Init();
 8007278:	f7ff fdba 	bl	8006df0 <MX_I2C1_Init>
  MX_I2S2_Init();
 800727c:	f7ff ff12 	bl	80070a4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007280:	f005 fc28 	bl	800cad4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8007284:	f7ff fdf4 	bl	8006e70 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007288:	f005 fa1c 	bl	800c6c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800728c:	f005 fa8e 	bl	800c7ac <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007290:	f005 fc54 	bl	800cb3c <MX_USART4_UART_Init>
  MX_ADC_Init();
 8007294:	f7ff f9b4 	bl	8006600 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007298:	f013 ff4e 	bl	801b138 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 800729c:	f000 fffc 	bl	8008298 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80072a0:	f005 fbe2 	bl	800ca68 <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80072a4:	f005 fb00 	bl	800c8a8 <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80072a8:	4a6c      	ldr	r2, [pc, #432]	@ (800745c <main+0x1f8>)
 80072aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007460 <main+0x1fc>)
 80072ac:	0011      	movs	r1, r2
 80072ae:	0018      	movs	r0, r3
 80072b0:	f7ff fd22 	bl	8006cf8 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80072b4:	f7fe ff24 	bl	8006100 <UserButton_Pressed>
 80072b8:	1e03      	subs	r3, r0, #0
 80072ba:	d004      	beq.n	80072c6 <main+0x62>
    EnableESPProg();
 80072bc:	f014 f80c 	bl	801b2d8 <EnableESPProg>
    ESP_Programming = true;
 80072c0:	4b68      	ldr	r3, [pc, #416]	@ (8007464 <main+0x200>)
 80072c2:	2201      	movs	r2, #1
 80072c4:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 80072c6:	2003      	movs	r0, #3
 80072c8:	f005 fe60 	bl	800cf8c <SetVerboseLevel>
  BinaryReleaseInfo();
 80072cc:	f005 fe76 	bl	800cfbc <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80072d0:	4965      	ldr	r1, [pc, #404]	@ (8007468 <main+0x204>)
 80072d2:	4b66      	ldr	r3, [pc, #408]	@ (800746c <main+0x208>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	0018      	movs	r0, r3
 80072d8:	f00e fa94 	bl	8015804 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 80072dc:	4b64      	ldr	r3, [pc, #400]	@ (8007470 <main+0x20c>)
 80072de:	0018      	movs	r0, r3
 80072e0:	f7ff f980 	bl	80065e4 <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 80072e4:	4a63      	ldr	r2, [pc, #396]	@ (8007474 <main+0x210>)
 80072e6:	4964      	ldr	r1, [pc, #400]	@ (8007478 <main+0x214>)
 80072e8:	4864      	ldr	r0, [pc, #400]	@ (800747c <main+0x218>)
 80072ea:	230b      	movs	r3, #11
 80072ec:	f003 ff66 	bl	800b1bc <soundInit>
 80072f0:	0003      	movs	r3, r0
 80072f2:	001a      	movs	r2, r3
 80072f4:	2301      	movs	r3, #1
 80072f6:	4053      	eors	r3, r2
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 80072fe:	4a60      	ldr	r2, [pc, #384]	@ (8007480 <main+0x21c>)
 8007300:	4b60      	ldr	r3, [pc, #384]	@ (8007484 <main+0x220>)
 8007302:	21d9      	movs	r1, #217	@ 0xd9
 8007304:	0018      	movs	r0, r3
 8007306:	f005 fe8d 	bl	800d024 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 800730a:	4b5f      	ldr	r3, [pc, #380]	@ (8007488 <main+0x224>)
 800730c:	4a5f      	ldr	r2, [pc, #380]	@ (800748c <main+0x228>)
 800730e:	495a      	ldr	r1, [pc, #360]	@ (8007478 <main+0x214>)
 8007310:	485f      	ldr	r0, [pc, #380]	@ (8007490 <main+0x22c>)
 8007312:	f7ff fb57 	bl	80069c4 <Gadget_Init>
  Debug("Clock init done");
 8007316:	4a5f      	ldr	r2, [pc, #380]	@ (8007494 <main+0x230>)
 8007318:	4b5f      	ldr	r3, [pc, #380]	@ (8007498 <main+0x234>)
 800731a:	0019      	movs	r1, r3
 800731c:	2003      	movs	r0, #3
 800731e:	f005 fdcb 	bl	800ceb8 <CreateLine>
  if (!probe_sen5x()) {
 8007322:	f001 f869 	bl	80083f8 <probe_sen5x>
 8007326:	1e03      	subs	r3, r0, #0
 8007328:	d10a      	bne.n	8007340 <main+0xdc>
    sen5x_Present = true; // not present
 800732a:	4b5c      	ldr	r3, [pc, #368]	@ (800749c <main+0x238>)
 800732c:	2201      	movs	r2, #1
 800732e:	701a      	strb	r2, [r3, #0]
    sen5x_Power_Off();      // switch off buck converter
 8007330:	f001 f84a 	bl	80083c8 <sen5x_Power_Off>
    Debug("sen5x sensor not detected, polling disabled.");
 8007334:	4a5a      	ldr	r2, [pc, #360]	@ (80074a0 <main+0x23c>)
 8007336:	4b58      	ldr	r3, [pc, #352]	@ (8007498 <main+0x234>)
 8007338:	0019      	movs	r1, r3
 800733a:	2003      	movs	r0, #3
 800733c:	f005 fdbc 	bl	800ceb8 <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007340:	4b58      	ldr	r3, [pc, #352]	@ (80074a4 <main+0x240>)
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d019      	beq.n	800737c <main+0x118>
 8007348:	4b46      	ldr	r3, [pc, #280]	@ (8007464 <main+0x200>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	2201      	movs	r2, #1
 800734e:	4053      	eors	r3, r2
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d012      	beq.n	800737c <main+0x118>
 8007356:	4b54      	ldr	r3, [pc, #336]	@ (80074a8 <main+0x244>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2201      	movs	r2, #1
 800735c:	4053      	eors	r3, r2
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <main+0x118>
      MeasurementBusy = UpkeepGadget();
 8007364:	f7ff fb5c 	bl	8006a20 <UpkeepGadget>
 8007368:	0003      	movs	r3, r0
 800736a:	001a      	movs	r2, r3
 800736c:	4b4f      	ldr	r3, [pc, #316]	@ (80074ac <main+0x248>)
 800736e:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007370:	f7fd ff44 	bl	80051fc <ESP_Upkeep>
 8007374:	0003      	movs	r3, r0
 8007376:	001a      	movs	r2, r3
 8007378:	4b4d      	ldr	r3, [pc, #308]	@ (80074b0 <main+0x24c>)
 800737a:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 800737c:	4b49      	ldr	r3, [pc, #292]	@ (80074a4 <main+0x240>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	2201      	movs	r2, #1
 8007382:	4053      	eors	r3, r2
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00f      	beq.n	80073aa <main+0x146>
 800738a:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <main+0x200>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	2201      	movs	r2, #1
 8007390:	4053      	eors	r3, r2
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <main+0x146>
 8007398:	4b43      	ldr	r3, [pc, #268]	@ (80074a8 <main+0x244>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2201      	movs	r2, #1
 800739e:	4053      	eors	r3, r2
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <main+0x146>
      Gadget_Test();
 80073a6:	f7ff fb33 	bl	8006a10 <Gadget_Test>
    }
    Status_Upkeep();
 80073aa:	f005 f835 	bl	800c418 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 80073ae:	4b41      	ldr	r3, [pc, #260]	@ (80074b4 <main+0x250>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	0018      	movs	r0, r3
 80073b4:	f005 fd2a 	bl	800ce0c <TimestampIsReached>
 80073b8:	1e03      	subs	r3, r0, #0
 80073ba:	d00c      	beq.n	80073d6 <main+0x172>
      charge = Battery_Upkeep();
 80073bc:	f005 f833 	bl	800c426 <Battery_Upkeep>
 80073c0:	0003      	movs	r3, r0
 80073c2:	001a      	movs	r2, r3
 80073c4:	4b3c      	ldr	r3, [pc, #240]	@ (80074b8 <main+0x254>)
 80073c6:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 80073c8:	f006 f914 	bl	800d5f4 <HAL_GetTick>
 80073cc:	0003      	movs	r3, r0
 80073ce:	4a3b      	ldr	r2, [pc, #236]	@ (80074bc <main+0x258>)
 80073d0:	189a      	adds	r2, r3, r2
 80073d2:	4b38      	ldr	r3, [pc, #224]	@ (80074b4 <main+0x250>)
 80073d4:	601a      	str	r2, [r3, #0]
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 80073d6:	4b38      	ldr	r3, [pc, #224]	@ (80074b8 <main+0x254>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d107      	bne.n	80073ee <main+0x18a>
 80073de:	4b34      	ldr	r3, [pc, #208]	@ (80074b0 <main+0x24c>)
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b09      	cmp	r3, #9
 80073e4:	d103      	bne.n	80073ee <main+0x18a>
      batteryEmpty = true;
 80073e6:	4b30      	ldr	r3, [pc, #192]	@ (80074a8 <main+0x244>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e002      	b.n	80073f4 <main+0x190>
    }
    else{
      batteryEmpty = false;
 80073ee:	4b2e      	ldr	r3, [pc, #184]	@ (80074a8 <main+0x244>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
    }
    if(charge == BATTERY_FULL){

    }
    if(TimestampIsReached(timeReadTimer)){
 80073f4:	4b32      	ldr	r3, [pc, #200]	@ (80074c0 <main+0x25c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	0018      	movs	r0, r3
 80073fa:	f005 fd07 	bl	800ce0c <TimestampIsReached>
 80073fe:	1e03      	subs	r3, r0, #0
 8007400:	d008      	beq.n	8007414 <main+0x1b0>
      UpdateSystemUptime();
 8007402:	f7fe feeb 	bl	80061dc <UpdateSystemUptime>
      timeReadTimer  = HAL_GetTick() + 30000;
 8007406:	f006 f8f5 	bl	800d5f4 <HAL_GetTick>
 800740a:	0003      	movs	r3, r0
 800740c:	4a2d      	ldr	r2, [pc, #180]	@ (80074c4 <main+0x260>)
 800740e:	189a      	adds	r2, r3, r2
 8007410:	4b2b      	ldr	r3, [pc, #172]	@ (80074c0 <main+0x25c>)
 8007412:	601a      	str	r2, [r3, #0]
    }

    if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && sen5x_Present) {
 8007414:	4b28      	ldr	r3, [pc, #160]	@ (80074b8 <main+0x254>)
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b02      	cmp	r3, #2
 800741a:	d803      	bhi.n	8007424 <main+0x1c0>
 800741c:	4b26      	ldr	r3, [pc, #152]	@ (80074b8 <main+0x254>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d18d      	bne.n	8007340 <main+0xdc>
 8007424:	4b1d      	ldr	r3, [pc, #116]	@ (800749c <main+0x238>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d089      	beq.n	8007340 <main+0xdc>
      if  (charge > BATTERY_LOW) {
 800742c:	4b22      	ldr	r3, [pc, #136]	@ (80074b8 <main+0x254>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d903      	bls.n	800743c <main+0x1d8>
        sen5x_statemachine(0);
 8007434:	2000      	movs	r0, #0
 8007436:	f001 fb75 	bl	8008b24 <sen5x_statemachine>
 800743a:	e781      	b.n	8007340 <main+0xdc>
      }
      else {
        if (charge == USB_PLUGGED_IN) {
 800743c:	4b1e      	ldr	r3, [pc, #120]	@ (80074b8 <main+0x254>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d103      	bne.n	800744c <main+0x1e8>
          sen5x_statemachine(USB_PLUGGED_IN);
 8007444:	2001      	movs	r0, #1
 8007446:	f001 fb6d 	bl	8008b24 <sen5x_statemachine>
 800744a:	e779      	b.n	8007340 <main+0xdc>
        }
        else  {
          Info("Battery level insufficient for sen5x operation");
 800744c:	4a1e      	ldr	r2, [pc, #120]	@ (80074c8 <main+0x264>)
 800744e:	4b1f      	ldr	r3, [pc, #124]	@ (80074cc <main+0x268>)
 8007450:	0019      	movs	r1, r3
 8007452:	2002      	movs	r0, #2
 8007454:	f005 fd30 	bl	800ceb8 <CreateLine>
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007458:	e772      	b.n	8007340 <main+0xdc>
 800745a:	46c0      	nop			@ (mov r8, r8)
 800745c:	200021ac 	.word	0x200021ac
 8007460:	2000216c 	.word	0x2000216c
 8007464:	20000efd 	.word	0x20000efd
 8007468:	20000f10 	.word	0x20000f10
 800746c:	200022e4 	.word	0x200022e4
 8007470:	200011c0 	.word	0x200011c0
 8007474:	200021ec 	.word	0x200021ec
 8007478:	20000e78 	.word	0x20000e78
 800747c:	20000eb4 	.word	0x20000eb4
 8007480:	08022184 	.word	0x08022184
 8007484:	0802323c 	.word	0x0802323c
 8007488:	20000ce0 	.word	0x20000ce0
 800748c:	2000239c 	.word	0x2000239c
 8007490:	20000d40 	.word	0x20000d40
 8007494:	08022198 	.word	0x08022198
 8007498:	080221a8 	.word	0x080221a8
 800749c:	20000f00 	.word	0x20000f00
 80074a0:	080221ac 	.word	0x080221ac
 80074a4:	20000efc 	.word	0x20000efc
 80074a8:	20000efe 	.word	0x20000efe
 80074ac:	20000eff 	.word	0x20000eff
 80074b0:	20000f0d 	.word	0x20000f0d
 80074b4:	20000f04 	.word	0x20000f04
 80074b8:	20000f0c 	.word	0x20000f0c
 80074bc:	0000ea60 	.word	0x0000ea60
 80074c0:	20000f08 	.word	0x20000f08
 80074c4:	00007530 	.word	0x00007530
 80074c8:	080221dc 	.word	0x080221dc
 80074cc:	0802220c 	.word	0x0802220c

080074d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074d0:	b590      	push	{r4, r7, lr}
 80074d2:	b09d      	sub	sp, #116	@ 0x74
 80074d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074d6:	2438      	movs	r4, #56	@ 0x38
 80074d8:	193b      	adds	r3, r7, r4
 80074da:	0018      	movs	r0, r3
 80074dc:	2338      	movs	r3, #56	@ 0x38
 80074de:	001a      	movs	r2, r3
 80074e0:	2100      	movs	r1, #0
 80074e2:	f017 f91b 	bl	801e71c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074e6:	2324      	movs	r3, #36	@ 0x24
 80074e8:	18fb      	adds	r3, r7, r3
 80074ea:	0018      	movs	r0, r3
 80074ec:	2314      	movs	r3, #20
 80074ee:	001a      	movs	r2, r3
 80074f0:	2100      	movs	r1, #0
 80074f2:	f017 f913 	bl	801e71c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80074f6:	003b      	movs	r3, r7
 80074f8:	0018      	movs	r0, r3
 80074fa:	2324      	movs	r3, #36	@ 0x24
 80074fc:	001a      	movs	r2, r3
 80074fe:	2100      	movs	r1, #0
 8007500:	f017 f90c 	bl	801e71c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007504:	4b34      	ldr	r3, [pc, #208]	@ (80075d8 <SystemClock_Config+0x108>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a34      	ldr	r2, [pc, #208]	@ (80075dc <SystemClock_Config+0x10c>)
 800750a:	401a      	ands	r2, r3
 800750c:	4b32      	ldr	r3, [pc, #200]	@ (80075d8 <SystemClock_Config+0x108>)
 800750e:	2180      	movs	r1, #128	@ 0x80
 8007510:	0109      	lsls	r1, r1, #4
 8007512:	430a      	orrs	r2, r1
 8007514:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007516:	f00c f8bf 	bl	8013698 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800751a:	4b31      	ldr	r3, [pc, #196]	@ (80075e0 <SystemClock_Config+0x110>)
 800751c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800751e:	4a2f      	ldr	r2, [pc, #188]	@ (80075dc <SystemClock_Config+0x10c>)
 8007520:	401a      	ands	r2, r3
 8007522:	4b2f      	ldr	r3, [pc, #188]	@ (80075e0 <SystemClock_Config+0x110>)
 8007524:	2180      	movs	r1, #128	@ 0x80
 8007526:	0149      	lsls	r1, r1, #5
 8007528:	430a      	orrs	r2, r1
 800752a:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800752c:	193b      	adds	r3, r7, r4
 800752e:	2226      	movs	r2, #38	@ 0x26
 8007530:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8007532:	193b      	adds	r3, r7, r4
 8007534:	2280      	movs	r2, #128	@ 0x80
 8007536:	0052      	lsls	r2, r2, #1
 8007538:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800753a:	0021      	movs	r1, r4
 800753c:	187b      	adds	r3, r7, r1
 800753e:	2201      	movs	r2, #1
 8007540:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007542:	187b      	adds	r3, r7, r1
 8007544:	2210      	movs	r2, #16
 8007546:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007548:	187b      	adds	r3, r7, r1
 800754a:	2201      	movs	r2, #1
 800754c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800754e:	187b      	adds	r3, r7, r1
 8007550:	2200      	movs	r2, #0
 8007552:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007554:	187b      	adds	r3, r7, r1
 8007556:	0018      	movs	r0, r3
 8007558:	f00c f8ac 	bl	80136b4 <HAL_RCC_OscConfig>
 800755c:	1e03      	subs	r3, r0, #0
 800755e:	d001      	beq.n	8007564 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007560:	f000 f8ee 	bl	8007740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007564:	2124      	movs	r1, #36	@ 0x24
 8007566:	187b      	adds	r3, r7, r1
 8007568:	220f      	movs	r2, #15
 800756a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800756c:	187b      	adds	r3, r7, r1
 800756e:	2201      	movs	r2, #1
 8007570:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007572:	187b      	adds	r3, r7, r1
 8007574:	2200      	movs	r2, #0
 8007576:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007578:	187b      	adds	r3, r7, r1
 800757a:	2200      	movs	r2, #0
 800757c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800757e:	187b      	adds	r3, r7, r1
 8007580:	2200      	movs	r2, #0
 8007582:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007584:	187b      	adds	r3, r7, r1
 8007586:	2100      	movs	r1, #0
 8007588:	0018      	movs	r0, r3
 800758a:	f00c fc67 	bl	8013e5c <HAL_RCC_ClockConfig>
 800758e:	1e03      	subs	r3, r0, #0
 8007590:	d001      	beq.n	8007596 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007592:	f000 f8d5 	bl	8007740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007596:	003b      	movs	r3, r7
 8007598:	226d      	movs	r2, #109	@ 0x6d
 800759a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800759c:	003b      	movs	r3, r7
 800759e:	2200      	movs	r2, #0
 80075a0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80075a2:	003b      	movs	r3, r7
 80075a4:	2200      	movs	r2, #0
 80075a6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80075a8:	003b      	movs	r3, r7
 80075aa:	2200      	movs	r2, #0
 80075ac:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80075ae:	003b      	movs	r3, r7
 80075b0:	2280      	movs	r2, #128	@ 0x80
 80075b2:	0252      	lsls	r2, r2, #9
 80075b4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80075b6:	003b      	movs	r3, r7
 80075b8:	2280      	movs	r2, #128	@ 0x80
 80075ba:	04d2      	lsls	r2, r2, #19
 80075bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80075be:	003b      	movs	r3, r7
 80075c0:	0018      	movs	r0, r3
 80075c2:	f00c fe6f 	bl	80142a4 <HAL_RCCEx_PeriphCLKConfig>
 80075c6:	1e03      	subs	r3, r0, #0
 80075c8:	d001      	beq.n	80075ce <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80075ca:	f000 f8b9 	bl	8007740 <Error_Handler>
  }
}
 80075ce:	46c0      	nop			@ (mov r8, r8)
 80075d0:	46bd      	mov	sp, r7
 80075d2:	b01d      	add	sp, #116	@ 0x74
 80075d4:	bd90      	pop	{r4, r7, pc}
 80075d6:	46c0      	nop			@ (mov r8, r8)
 80075d8:	40007000 	.word	0x40007000
 80075dc:	ffffe7ff 	.word	0xffffe7ff
 80075e0:	40021000 	.word	0x40021000

080075e4 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	000a      	movs	r2, r1
 80075ee:	1cbb      	adds	r3, r7, #2
 80075f0:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 80075f2:	4c06      	ldr	r4, [pc, #24]	@ (800760c <printString+0x28>)
 80075f4:	1cbb      	adds	r3, r7, #2
 80075f6:	881a      	ldrh	r2, [r3, #0]
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4805      	ldr	r0, [pc, #20]	@ (8007610 <printString+0x2c>)
 80075fc:	0023      	movs	r3, r4
 80075fe:	f00e f861 	bl	80156c4 <HAL_UART_Transmit>
}
 8007602:	46c0      	nop			@ (mov r8, r8)
 8007604:	46bd      	mov	sp, r7
 8007606:	b003      	add	sp, #12
 8007608:	bd90      	pop	{r4, r7, pc}
 800760a:	46c0      	nop			@ (mov r8, r8)
 800760c:	0000ffff 	.word	0x0000ffff
 8007610:	200022e4 	.word	0x200022e4

08007614 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 800761c:	4936      	ldr	r1, [pc, #216]	@ (80076f8 <HAL_UART_RxCpltCallback+0xe4>)
 800761e:	4b37      	ldr	r3, [pc, #220]	@ (80076fc <HAL_UART_RxCpltCallback+0xe8>)
 8007620:	2201      	movs	r2, #1
 8007622:	0018      	movs	r0, r3
 8007624:	f00e f8ee 	bl	8015804 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007628:	4b33      	ldr	r3, [pc, #204]	@ (80076f8 <HAL_UART_RxCpltCallback+0xe4>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	3b61      	subs	r3, #97	@ 0x61
 800762e:	2b13      	cmp	r3, #19
 8007630:	d830      	bhi.n	8007694 <HAL_UART_RxCpltCallback+0x80>
 8007632:	009a      	lsls	r2, r3, #2
 8007634:	4b32      	ldr	r3, [pc, #200]	@ (8007700 <HAL_UART_RxCpltCallback+0xec>)
 8007636:	18d3      	adds	r3, r2, r3
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 800763c:	4b31      	ldr	r3, [pc, #196]	@ (8007704 <HAL_UART_RxCpltCallback+0xf0>)
 800763e:	0018      	movs	r0, r3
 8007640:	f016 ff1e 	bl	801e480 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8007644:	2003      	movs	r0, #3
 8007646:	f005 fca1 	bl	800cf8c <SetVerboseLevel>
      break;
 800764a:	e04a      	b.n	80076e2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 800764c:	f7fc f8a6 	bl	800379c <forceNTPupdate>
    break;
 8007650:	e047      	b.n	80076e2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8007652:	4b2d      	ldr	r3, [pc, #180]	@ (8007708 <HAL_UART_RxCpltCallback+0xf4>)
 8007654:	0018      	movs	r0, r3
 8007656:	f016 ff13 	bl	801e480 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 800765a:	2002      	movs	r0, #2
 800765c:	f005 fc96 	bl	800cf8c <SetVerboseLevel>
      break;
 8007660:	e03f      	b.n	80076e2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007662:	4b2a      	ldr	r3, [pc, #168]	@ (800770c <HAL_UART_RxCpltCallback+0xf8>)
 8007664:	0018      	movs	r0, r3
 8007666:	f016 ff0b 	bl	801e480 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 800766a:	2001      	movs	r0, #1
 800766c:	f005 fc8e 	bl	800cf8c <SetVerboseLevel>
      break;
 8007670:	e037      	b.n	80076e2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007672:	4b27      	ldr	r3, [pc, #156]	@ (8007710 <HAL_UART_RxCpltCallback+0xfc>)
 8007674:	0018      	movs	r0, r3
 8007676:	f016 ff03 	bl	801e480 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 800767a:	2000      	movs	r0, #0
 800767c:	f005 fc86 	bl	800cf8c <SetVerboseLevel>
      break;
 8007680:	e02f      	b.n	80076e2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007682:	f005 ffb7 	bl	800d5f4 <HAL_GetTick>
 8007686:	0002      	movs	r2, r0
 8007688:	4b22      	ldr	r3, [pc, #136]	@ (8007714 <HAL_UART_RxCpltCallback+0x100>)
 800768a:	601a      	str	r2, [r3, #0]
      break;
 800768c:	e029      	b.n	80076e2 <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 800768e:	f7fe fd47 	bl	8006120 <showTime>
      break;
 8007692:	e026      	b.n	80076e2 <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007694:	4a20      	ldr	r2, [pc, #128]	@ (8007718 <HAL_UART_RxCpltCallback+0x104>)
 8007696:	4b21      	ldr	r3, [pc, #132]	@ (800771c <HAL_UART_RxCpltCallback+0x108>)
 8007698:	0019      	movs	r1, r3
 800769a:	2001      	movs	r0, #1
 800769c:	f005 fc0c 	bl	800ceb8 <CreateLine>
      printf("Possible commands:\r\n\r\n");
 80076a0:	4b1f      	ldr	r3, [pc, #124]	@ (8007720 <HAL_UART_RxCpltCallback+0x10c>)
 80076a2:	0018      	movs	r0, r3
 80076a4:	f016 feec 	bl	801e480 <puts>
      printf("a - VerboseLevel set to all\r\n");
 80076a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007724 <HAL_UART_RxCpltCallback+0x110>)
 80076aa:	0018      	movs	r0, r3
 80076ac:	f016 fee8 	bl	801e480 <puts>
      printf("f - Force NTP time synchronization\r\n");
 80076b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007728 <HAL_UART_RxCpltCallback+0x114>)
 80076b2:	0018      	movs	r0, r3
 80076b4:	f016 fee4 	bl	801e480 <puts>
      printf("i - VerboseLevel set to info\r\n");
 80076b8:	4b1c      	ldr	r3, [pc, #112]	@ (800772c <HAL_UART_RxCpltCallback+0x118>)
 80076ba:	0018      	movs	r0, r3
 80076bc:	f016 fee0 	bl	801e480 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 80076c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007730 <HAL_UART_RxCpltCallback+0x11c>)
 80076c2:	0018      	movs	r0, r3
 80076c4:	f016 fedc 	bl	801e480 <puts>
      printf("n - VerboseLevel set to none\r\n");
 80076c8:	4b1a      	ldr	r3, [pc, #104]	@ (8007734 <HAL_UART_RxCpltCallback+0x120>)
 80076ca:	0018      	movs	r0, r3
 80076cc:	f016 fed8 	bl	801e480 <puts>
      printf("s - Start particle measurement\r\n");
 80076d0:	4b19      	ldr	r3, [pc, #100]	@ (8007738 <HAL_UART_RxCpltCallback+0x124>)
 80076d2:	0018      	movs	r0, r3
 80076d4:	f016 fed4 	bl	801e480 <puts>
      printf("t - Show actual systemtime\r\n");
 80076d8:	4b18      	ldr	r3, [pc, #96]	@ (800773c <HAL_UART_RxCpltCallback+0x128>)
 80076da:	0018      	movs	r0, r3
 80076dc:	f016 fed0 	bl	801e480 <puts>
  break;
 80076e0:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 80076e2:	4905      	ldr	r1, [pc, #20]	@ (80076f8 <HAL_UART_RxCpltCallback+0xe4>)
 80076e4:	4b05      	ldr	r3, [pc, #20]	@ (80076fc <HAL_UART_RxCpltCallback+0xe8>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	0018      	movs	r0, r3
 80076ea:	f00e f88b 	bl	8015804 <HAL_UART_Receive_IT>
}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	46bd      	mov	sp, r7
 80076f2:	b002      	add	sp, #8
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	46c0      	nop			@ (mov r8, r8)
 80076f8:	20000f10 	.word	0x20000f10
 80076fc:	200022e4 	.word	0x200022e4
 8007700:	080231ec 	.word	0x080231ec
 8007704:	08022210 	.word	0x08022210
 8007708:	0802222c 	.word	0x0802222c
 800770c:	08022248 	.word	0x08022248
 8007710:	08022268 	.word	0x08022268
 8007714:	200011e8 	.word	0x200011e8
 8007718:	08022284 	.word	0x08022284
 800771c:	080222b4 	.word	0x080222b4
 8007720:	080222b8 	.word	0x080222b8
 8007724:	080222d0 	.word	0x080222d0
 8007728:	080222f0 	.word	0x080222f0
 800772c:	08022314 	.word	0x08022314
 8007730:	08022334 	.word	0x08022334
 8007734:	08022358 	.word	0x08022358
 8007738:	08022378 	.word	0x08022378
 800773c:	08022398 	.word	0x08022398

08007740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8007744:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <Error_Handler+0x18>)
 8007746:	4b05      	ldr	r3, [pc, #20]	@ (800775c <Error_Handler+0x1c>)
 8007748:	0019      	movs	r1, r3
 800774a:	2001      	movs	r0, #1
 800774c:	f005 fbb4 	bl	800ceb8 <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007750:	b672      	cpsid	i
}
 8007752:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8007754:	46c0      	nop			@ (mov r8, r8)
 8007756:	e7fd      	b.n	8007754 <Error_Handler+0x14>
 8007758:	080223b4 	.word	0x080223b4
 800775c:	080222b4 	.word	0x080222b4

08007760 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007764:	f7ff fb25 	bl	8006db2 <HT_StartMeasurement>
}
 8007768:	46c0      	nop			@ (mov r8, r8)
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007774:	4a04      	ldr	r2, [pc, #16]	@ (8007788 <HT_IsMeasurementDoneWrapper+0x18>)
 8007776:	4b05      	ldr	r3, [pc, #20]	@ (800778c <HT_IsMeasurementDoneWrapper+0x1c>)
 8007778:	0011      	movs	r1, r2
 800777a:	0018      	movs	r0, r3
 800777c:	f7ff fb20 	bl	8006dc0 <HT_GetMeasurementValues>
 8007780:	0003      	movs	r3, r0
}
 8007782:	0018      	movs	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	20000f24 	.word	0x20000f24
 800778c:	20000f20 	.word	0x20000f20

08007790 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007794:	f7ff f97d 	bl	8006a92 <Gas_StartMeasurement>
}
 8007798:	46c0      	nop			@ (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 80077a0:	b580      	push	{r7, lr}
 80077a2:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 80077a4:	4b03      	ldr	r3, [pc, #12]	@ (80077b4 <VOC_IsMeasurementDoneWrapper+0x14>)
 80077a6:	0018      	movs	r0, r3
 80077a8:	f7ff f97a 	bl	8006aa0 <Gas_GetMeasurementValues>
 80077ac:	0003      	movs	r3, r0
}
 80077ae:	0018      	movs	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20000f28 	.word	0x20000f28

080077b8 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
}
 80077bc:	46c0      	nop			@ (mov r8, r8)
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80077c2:	b580      	push	{r7, lr}
 80077c4:	af00      	add	r7, sp, #0
  return true;
 80077c6:	2301      	movs	r3, #1
}
 80077c8:	0018      	movs	r0, r3
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <MIC_IsTestMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
  return MIC_MeasurementDone();
}

bool MIC_IsTestMeasurementDoneWrapper(void) {
 80077ce:	b580      	push	{r7, lr}
 80077d0:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 80077d2:	f000 fd0f 	bl	80081f4 <MIC_TestMeasurementDone>
 80077d6:	0003      	movs	r3, r0
}
 80077d8:	0018      	movs	r0, r3
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
	...

080077e0 <testInit>:

void testInit(){
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80077e4:	4b07      	ldr	r3, [pc, #28]	@ (8007804 <testInit+0x24>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 80077ea:	4b06      	ldr	r3, [pc, #24]	@ (8007804 <testInit+0x24>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 80077f0:	4b04      	ldr	r3, [pc, #16]	@ (8007804 <testInit+0x24>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80077f6:	4b03      	ldr	r3, [pc, #12]	@ (8007804 <testInit+0x24>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	705a      	strb	r2, [r3, #1]
}
 80077fc:	46c0      	nop			@ (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	46c0      	nop			@ (mov r8, r8)
 8007804:	20000f64 	.word	0x20000f64

08007808 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8007808:	b5b0      	push	{r4, r5, r7, lr}
 800780a:	b092      	sub	sp, #72	@ 0x48
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 8007814:	f7ff ffe4 	bl	80077e0 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8007818:	4b6e      	ldr	r3, [pc, #440]	@ (80079d4 <Meas_Init+0x1cc>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <Meas_Init+0x20>
 8007820:	4b6c      	ldr	r3, [pc, #432]	@ (80079d4 <Meas_Init+0x1cc>)
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d068      	beq.n	80078fa <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	0018      	movs	r0, r3
 800782c:	f7fe f8fe 	bl	8005a2c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8007830:	f7ff fad6 	bl	8006de0 <HT_DeviceConnected>
 8007834:	0003      	movs	r3, r0
 8007836:	001a      	movs	r2, r3
 8007838:	2301      	movs	r3, #1
 800783a:	4053      	eors	r3, r2
 800783c:	b2db      	uxtb	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00c      	beq.n	800785c <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 8007842:	4a65      	ldr	r2, [pc, #404]	@ (80079d8 <Meas_Init+0x1d0>)
 8007844:	4b65      	ldr	r3, [pc, #404]	@ (80079dc <Meas_Init+0x1d4>)
 8007846:	0019      	movs	r1, r3
 8007848:	2001      	movs	r0, #1
 800784a:	f005 fb35 	bl	800ceb8 <CreateLine>
       MeasTest.HT_Tested = false;
 800784e:	4b64      	ldr	r3, [pc, #400]	@ (80079e0 <Meas_Init+0x1d8>)
 8007850:	2200      	movs	r2, #0
 8007852:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8007854:	4b5f      	ldr	r3, [pc, #380]	@ (80079d4 <Meas_Init+0x1cc>)
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
 800785a:	e008      	b.n	800786e <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 800785c:	4b60      	ldr	r3, [pc, #384]	@ (80079e0 <Meas_Init+0x1d8>)
 800785e:	2201      	movs	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8007862:	4a60      	ldr	r2, [pc, #384]	@ (80079e4 <Meas_Init+0x1dc>)
 8007864:	4b60      	ldr	r3, [pc, #384]	@ (80079e8 <Meas_Init+0x1e0>)
 8007866:	0019      	movs	r1, r3
 8007868:	2003      	movs	r0, #3
 800786a:	f005 fb25 	bl	800ceb8 <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 800786e:	f7ff f924 	bl	8006aba <Gas_DeviceConnected>
 8007872:	0003      	movs	r3, r0
 8007874:	001a      	movs	r2, r3
 8007876:	2301      	movs	r3, #1
 8007878:	4053      	eors	r3, r2
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00c      	beq.n	800789a <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8007880:	4b57      	ldr	r3, [pc, #348]	@ (80079e0 <Meas_Init+0x1d8>)
 8007882:	2200      	movs	r2, #0
 8007884:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8007886:	4a59      	ldr	r2, [pc, #356]	@ (80079ec <Meas_Init+0x1e4>)
 8007888:	4b54      	ldr	r3, [pc, #336]	@ (80079dc <Meas_Init+0x1d4>)
 800788a:	0019      	movs	r1, r3
 800788c:	2001      	movs	r0, #1
 800788e:	f005 fb13 	bl	800ceb8 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8007892:	4b50      	ldr	r3, [pc, #320]	@ (80079d4 <Meas_Init+0x1cc>)
 8007894:	2200      	movs	r2, #0
 8007896:	705a      	strb	r2, [r3, #1]
 8007898:	e008      	b.n	80078ac <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 800789a:	4b51      	ldr	r3, [pc, #324]	@ (80079e0 <Meas_Init+0x1d8>)
 800789c:	2201      	movs	r2, #1
 800789e:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 80078a0:	4a53      	ldr	r2, [pc, #332]	@ (80079f0 <Meas_Init+0x1e8>)
 80078a2:	4b51      	ldr	r3, [pc, #324]	@ (80079e8 <Meas_Init+0x1e0>)
 80078a4:	0019      	movs	r1, r3
 80078a6:	2003      	movs	r0, #3
 80078a8:	f005 fb06 	bl	800ceb8 <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 80078ac:	4b4c      	ldr	r3, [pc, #304]	@ (80079e0 <Meas_Init+0x1d8>)
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <Meas_Init+0xc0>
 80078b4:	4b4a      	ldr	r3, [pc, #296]	@ (80079e0 <Meas_Init+0x1d8>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d005      	beq.n	80078c8 <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 80078bc:	2200      	movs	r2, #0
 80078be:	2101      	movs	r1, #1
 80078c0:	2000      	movs	r0, #0
 80078c2:	f004 fb8f 	bl	800bfe4 <SetDBLED>
 80078c6:	e018      	b.n	80078fa <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 80078c8:	2200      	movs	r2, #0
 80078ca:	2100      	movs	r1, #0
 80078cc:	2001      	movs	r0, #1
 80078ce:	f004 fb89 	bl	800bfe4 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80078d2:	4b48      	ldr	r3, [pc, #288]	@ (80079f4 <Meas_Init+0x1ec>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	2101      	movs	r1, #1
 80078d8:	0018      	movs	r0, r3
 80078da:	f007 f8ea 	bl	800eab2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80078de:	2380      	movs	r3, #128	@ 0x80
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	4844      	ldr	r0, [pc, #272]	@ (80079f4 <Meas_Init+0x1ec>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	0019      	movs	r1, r3
 80078e8:	f007 f8e3 	bl	800eab2 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80078ec:	2380      	movs	r3, #128	@ 0x80
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4840      	ldr	r0, [pc, #256]	@ (80079f4 <Meas_Init+0x1ec>)
 80078f2:	2201      	movs	r2, #1
 80078f4:	0019      	movs	r1, r3
 80078f6:	f007 f8dc 	bl	800eab2 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80078fa:	4b36      	ldr	r3, [pc, #216]	@ (80079d4 <Meas_Init+0x1cc>)
 80078fc:	78db      	ldrb	r3, [r3, #3]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 8007902:	4a3d      	ldr	r2, [pc, #244]	@ (80079f8 <Meas_Init+0x1f0>)
 8007904:	4b3d      	ldr	r3, [pc, #244]	@ (80079fc <Meas_Init+0x1f4>)
 8007906:	0019      	movs	r1, r3
 8007908:	2002      	movs	r0, #2
 800790a:	f005 fad5 	bl	800ceb8 <CreateLine>
          enableMicrophone(true);
 800790e:	2001      	movs	r0, #1
 8007910:	f003 fcbc 	bl	800b28c <enableMicrophone>

  }
  uint8_t offset = 0;
 8007914:	2547      	movs	r5, #71	@ 0x47
 8007916:	197b      	adds	r3, r7, r5
 8007918:	2200      	movs	r2, #0
 800791a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 800791c:	197b      	adds	r3, r7, r5
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	197a      	adds	r2, r7, r5
 8007922:	1c59      	adds	r1, r3, #1
 8007924:	7011      	strb	r1, [r2, #0]
 8007926:	4a2b      	ldr	r2, [pc, #172]	@ (80079d4 <Meas_Init+0x1cc>)
 8007928:	7814      	ldrb	r4, [r2, #0]
 800792a:	4a35      	ldr	r2, [pc, #212]	@ (8007a00 <Meas_Init+0x1f8>)
 800792c:	0119      	lsls	r1, r3, #4
 800792e:	4835      	ldr	r0, [pc, #212]	@ (8007a04 <Meas_Init+0x1fc>)
 8007930:	5088      	str	r0, [r1, r2]
 8007932:	4933      	ldr	r1, [pc, #204]	@ (8007a00 <Meas_Init+0x1f8>)
 8007934:	011a      	lsls	r2, r3, #4
 8007936:	188a      	adds	r2, r1, r2
 8007938:	3204      	adds	r2, #4
 800793a:	4933      	ldr	r1, [pc, #204]	@ (8007a08 <Meas_Init+0x200>)
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	4930      	ldr	r1, [pc, #192]	@ (8007a00 <Meas_Init+0x1f8>)
 8007940:	011a      	lsls	r2, r3, #4
 8007942:	188a      	adds	r2, r1, r2
 8007944:	3208      	adds	r2, #8
 8007946:	4931      	ldr	r1, [pc, #196]	@ (8007a0c <Meas_Init+0x204>)
 8007948:	6011      	str	r1, [r2, #0]
 800794a:	4a2d      	ldr	r2, [pc, #180]	@ (8007a00 <Meas_Init+0x1f8>)
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	18d3      	adds	r3, r2, r3
 8007950:	330c      	adds	r3, #12
 8007952:	1c22      	adds	r2, r4, #0
 8007954:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8007956:	197b      	adds	r3, r7, r5
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	197a      	adds	r2, r7, r5
 800795c:	1c59      	adds	r1, r3, #1
 800795e:	7011      	strb	r1, [r2, #0]
 8007960:	4a1c      	ldr	r2, [pc, #112]	@ (80079d4 <Meas_Init+0x1cc>)
 8007962:	7854      	ldrb	r4, [r2, #1]
 8007964:	4a26      	ldr	r2, [pc, #152]	@ (8007a00 <Meas_Init+0x1f8>)
 8007966:	0119      	lsls	r1, r3, #4
 8007968:	4829      	ldr	r0, [pc, #164]	@ (8007a10 <Meas_Init+0x208>)
 800796a:	5088      	str	r0, [r1, r2]
 800796c:	4924      	ldr	r1, [pc, #144]	@ (8007a00 <Meas_Init+0x1f8>)
 800796e:	011a      	lsls	r2, r3, #4
 8007970:	188a      	adds	r2, r1, r2
 8007972:	3204      	adds	r2, #4
 8007974:	4927      	ldr	r1, [pc, #156]	@ (8007a14 <Meas_Init+0x20c>)
 8007976:	6011      	str	r1, [r2, #0]
 8007978:	4921      	ldr	r1, [pc, #132]	@ (8007a00 <Meas_Init+0x1f8>)
 800797a:	011a      	lsls	r2, r3, #4
 800797c:	188a      	adds	r2, r1, r2
 800797e:	3208      	adds	r2, #8
 8007980:	4925      	ldr	r1, [pc, #148]	@ (8007a18 <Meas_Init+0x210>)
 8007982:	6011      	str	r1, [r2, #0]
 8007984:	4a1e      	ldr	r2, [pc, #120]	@ (8007a00 <Meas_Init+0x1f8>)
 8007986:	011b      	lsls	r3, r3, #4
 8007988:	18d3      	adds	r3, r2, r3
 800798a:	330c      	adds	r3, #12
 800798c:	1c22      	adds	r2, r4, #0
 800798e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8007990:	197b      	adds	r3, r7, r5
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	197a      	adds	r2, r7, r5
 8007996:	1c59      	adds	r1, r3, #1
 8007998:	7011      	strb	r1, [r2, #0]
 800799a:	4a0e      	ldr	r2, [pc, #56]	@ (80079d4 <Meas_Init+0x1cc>)
 800799c:	7894      	ldrb	r4, [r2, #2]
 800799e:	4a18      	ldr	r2, [pc, #96]	@ (8007a00 <Meas_Init+0x1f8>)
 80079a0:	0119      	lsls	r1, r3, #4
 80079a2:	481e      	ldr	r0, [pc, #120]	@ (8007a1c <Meas_Init+0x214>)
 80079a4:	5088      	str	r0, [r1, r2]
 80079a6:	4916      	ldr	r1, [pc, #88]	@ (8007a00 <Meas_Init+0x1f8>)
 80079a8:	011a      	lsls	r2, r3, #4
 80079aa:	188a      	adds	r2, r1, r2
 80079ac:	3204      	adds	r2, #4
 80079ae:	491c      	ldr	r1, [pc, #112]	@ (8007a20 <Meas_Init+0x218>)
 80079b0:	6011      	str	r1, [r2, #0]
 80079b2:	4913      	ldr	r1, [pc, #76]	@ (8007a00 <Meas_Init+0x1f8>)
 80079b4:	011a      	lsls	r2, r3, #4
 80079b6:	188a      	adds	r2, r1, r2
 80079b8:	3208      	adds	r2, #8
 80079ba:	491a      	ldr	r1, [pc, #104]	@ (8007a24 <Meas_Init+0x21c>)
 80079bc:	6011      	str	r1, [r2, #0]
 80079be:	4a10      	ldr	r2, [pc, #64]	@ (8007a00 <Meas_Init+0x1f8>)
 80079c0:	011b      	lsls	r3, r3, #4
 80079c2:	18d3      	adds	r3, r2, r3
 80079c4:	330c      	adds	r3, #12
 80079c6:	1c22      	adds	r2, r4, #0
 80079c8:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	46bd      	mov	sp, r7
 80079ce:	b012      	add	sp, #72	@ 0x48
 80079d0:	bdb0      	pop	{r4, r5, r7, pc}
 80079d2:	46c0      	nop			@ (mov r8, r8)
 80079d4:	20000f60 	.word	0x20000f60
 80079d8:	080223e0 	.word	0x080223e0
 80079dc:	08022410 	.word	0x08022410
 80079e0:	20000f64 	.word	0x20000f64
 80079e4:	08022414 	.word	0x08022414
 80079e8:	08022440 	.word	0x08022440
 80079ec:	08022444 	.word	0x08022444
 80079f0:	08022460 	.word	0x08022460
 80079f4:	50000400 	.word	0x50000400
 80079f8:	08022478 	.word	0x08022478
 80079fc:	0802249c 	.word	0x0802249c
 8007a00:	20000f30 	.word	0x20000f30
 8007a04:	08007761 	.word	0x08007761
 8007a08:	08007771 	.word	0x08007771
 8007a0c:	20000f2c 	.word	0x20000f2c
 8007a10:	08007791 	.word	0x08007791
 8007a14:	080077a1 	.word	0x080077a1
 8007a18:	20000f2d 	.word	0x20000f2d
 8007a1c:	080077b9 	.word	0x080077b9
 8007a20:	080077c3 	.word	0x080077c3
 8007a24:	20000f2e 	.word	0x20000f2e

08007a28 <StartMeasurements>:

void StartMeasurements(void) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007a2c:	4b10      	ldr	r3, [pc, #64]	@ (8007a70 <StartMeasurements+0x48>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e015      	b.n	8007a60 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007a34:	4b0e      	ldr	r3, [pc, #56]	@ (8007a70 <StartMeasurements+0x48>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	4a0e      	ldr	r2, [pc, #56]	@ (8007a74 <StartMeasurements+0x4c>)
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	18d3      	adds	r3, r2, r3
 8007a3e:	330c      	adds	r3, #12
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8007a46:	4b0a      	ldr	r3, [pc, #40]	@ (8007a70 <StartMeasurements+0x48>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	001a      	movs	r2, r3
 8007a4c:	4b09      	ldr	r3, [pc, #36]	@ (8007a74 <StartMeasurements+0x4c>)
 8007a4e:	0112      	lsls	r2, r2, #4
 8007a50:	58d3      	ldr	r3, [r2, r3]
 8007a52:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007a54:	4b06      	ldr	r3, [pc, #24]	@ (8007a70 <StartMeasurements+0x48>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <StartMeasurements+0x48>)
 8007a5e:	701a      	strb	r2, [r3, #0]
 8007a60:	4b03      	ldr	r3, [pc, #12]	@ (8007a70 <StartMeasurements+0x48>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b02      	cmp	r3, #2
 8007a66:	d9e5      	bls.n	8007a34 <StartMeasurements+0xc>
    }
  }
}
 8007a68:	46c0      	nop			@ (mov r8, r8)
 8007a6a:	46c0      	nop			@ (mov r8, r8)
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000f68 	.word	0x20000f68
 8007a74:	20000f30 	.word	0x20000f30

08007a78 <Meas_Test>:

void Meas_Test(){
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007a7c:	4b23      	ldr	r3, [pc, #140]	@ (8007b0c <Meas_Test+0x94>)
 8007a7e:	78db      	ldrb	r3, [r3, #3]
 8007a80:	2201      	movs	r2, #1
 8007a82:	4053      	eors	r3, r2
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <Meas_Test+0x16>
    ESP_WakeTest();
 8007a8a:	f7fd faa1 	bl	8004fd0 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8007a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8007b0c <Meas_Test+0x94>)
 8007a90:	789b      	ldrb	r3, [r3, #2]
 8007a92:	2201      	movs	r2, #1
 8007a94:	4053      	eors	r3, r2
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01b      	beq.n	8007ad4 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007a9c:	f7ff fe97 	bl	80077ce <MIC_IsTestMeasurementDoneWrapper>
 8007aa0:	1e03      	subs	r3, r0, #0
 8007aa2:	d00b      	beq.n	8007abc <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8007aa4:	4b19      	ldr	r3, [pc, #100]	@ (8007b0c <Meas_Test+0x94>)
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007aaa:	23fa      	movs	r3, #250	@ 0xfa
 8007aac:	011a      	lsls	r2, r3, #4
 8007aae:	4918      	ldr	r1, [pc, #96]	@ (8007b10 <Meas_Test+0x98>)
 8007ab0:	23fa      	movs	r3, #250	@ 0xfa
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f004 fa61 	bl	800bf7c <SetStatusLED>
 8007aba:	e00b      	b.n	8007ad4 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007abc:	f003 fbc2 	bl	800b244 <micSettlingComplete>
 8007ac0:	1e03      	subs	r3, r0, #0
 8007ac2:	d007      	beq.n	8007ad4 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007ac4:	23fa      	movs	r3, #250	@ 0xfa
 8007ac6:	011a      	lsls	r2, r3, #4
 8007ac8:	23fa      	movs	r3, #250	@ 0xfa
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	4810      	ldr	r0, [pc, #64]	@ (8007b10 <Meas_Test+0x98>)
 8007ace:	0019      	movs	r1, r3
 8007ad0:	f004 fa54 	bl	800bf7c <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8007ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8007b0c <Meas_Test+0x94>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d013      	beq.n	8007b04 <Meas_Test+0x8c>
 8007adc:	4b0b      	ldr	r3, [pc, #44]	@ (8007b0c <Meas_Test+0x94>)
 8007ade:	785b      	ldrb	r3, [r3, #1]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00f      	beq.n	8007b04 <Meas_Test+0x8c>
 8007ae4:	4b09      	ldr	r3, [pc, #36]	@ (8007b0c <Meas_Test+0x94>)
 8007ae6:	78db      	ldrb	r3, [r3, #3]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <Meas_Test+0x8c>
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <Meas_Test+0x94>)
 8007aee:	789b      	ldrb	r3, [r3, #2]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <Meas_Test+0x8c>
    Info("Test completed");
 8007af4:	4a07      	ldr	r2, [pc, #28]	@ (8007b14 <Meas_Test+0x9c>)
 8007af6:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <Meas_Test+0xa0>)
 8007af8:	0019      	movs	r1, r3
 8007afa:	2002      	movs	r0, #2
 8007afc:	f005 f9dc 	bl	800ceb8 <CreateLine>
    SetTestDone();
 8007b00:	f7ff fb6c 	bl	80071dc <SetTestDone>
  }
}
 8007b04:	46c0      	nop			@ (mov r8, r8)
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	46c0      	nop			@ (mov r8, r8)
 8007b0c:	20000f64 	.word	0x20000f64
 8007b10:	00000bb8 	.word	0x00000bb8
 8007b14:	080224a0 	.word	0x080224a0
 8007b18:	0802249c 	.word	0x0802249c

08007b1c <ResetMeasurements>:
void ResetMeasurements(void) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8007b20:	4b0a      	ldr	r3, [pc, #40]	@ (8007b4c <ResetMeasurements+0x30>)
 8007b22:	2200      	movs	r2, #0
 8007b24:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8007b26:	4b09      	ldr	r3, [pc, #36]	@ (8007b4c <ResetMeasurements+0x30>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8007b2c:	4b07      	ldr	r3, [pc, #28]	@ (8007b4c <ResetMeasurements+0x30>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8007b32:	4b06      	ldr	r3, [pc, #24]	@ (8007b4c <ResetMeasurements+0x30>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8007b38:	4b04      	ldr	r3, [pc, #16]	@ (8007b4c <ResetMeasurements+0x30>)
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8007b3e:	4b03      	ldr	r3, [pc, #12]	@ (8007b4c <ResetMeasurements+0x30>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	739a      	strb	r2, [r3, #14]
//  MeasurementCtx.MIC_measurementDone = false;
}
 8007b44:	46c0      	nop			@ (mov r8, r8)
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	46c0      	nop			@ (mov r8, r8)
 8007b4c:	20000f20 	.word	0x20000f20

08007b50 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007b54:	4b18      	ldr	r3, [pc, #96]	@ (8007bb8 <MeasurementsCompleted+0x68>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	701a      	strb	r2, [r3, #0]
 8007b5a:	e024      	b.n	8007ba6 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007b5c:	4b16      	ldr	r3, [pc, #88]	@ (8007bb8 <MeasurementsCompleted+0x68>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	4a16      	ldr	r2, [pc, #88]	@ (8007bbc <MeasurementsCompleted+0x6c>)
 8007b62:	011b      	lsls	r3, r3, #4
 8007b64:	18d3      	adds	r3, r2, r3
 8007b66:	330c      	adds	r3, #12
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d015      	beq.n	8007b9a <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8007b6e:	4b12      	ldr	r3, [pc, #72]	@ (8007bb8 <MeasurementsCompleted+0x68>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	4a12      	ldr	r2, [pc, #72]	@ (8007bbc <MeasurementsCompleted+0x6c>)
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	18d3      	adds	r3, r2, r3
 8007b78:	3304      	adds	r3, #4
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4798      	blx	r3
 8007b7e:	1e03      	subs	r3, r0, #0
 8007b80:	d009      	beq.n	8007b96 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8007b82:	4b0d      	ldr	r3, [pc, #52]	@ (8007bb8 <MeasurementsCompleted+0x68>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	4a0d      	ldr	r2, [pc, #52]	@ (8007bbc <MeasurementsCompleted+0x6c>)
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	18d3      	adds	r3, r2, r3
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2201      	movs	r2, #1
 8007b92:	701a      	strb	r2, [r3, #0]
 8007b94:	e001      	b.n	8007b9a <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007b96:	2300      	movs	r3, #0
 8007b98:	e00a      	b.n	8007bb0 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007b9a:	4b07      	ldr	r3, [pc, #28]	@ (8007bb8 <MeasurementsCompleted+0x68>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	4b05      	ldr	r3, [pc, #20]	@ (8007bb8 <MeasurementsCompleted+0x68>)
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	4b04      	ldr	r3, [pc, #16]	@ (8007bb8 <MeasurementsCompleted+0x68>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d9d6      	bls.n	8007b5c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8007bae:	2301      	movs	r3, #1
}
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	46c0      	nop			@ (mov r8, r8)
 8007bb8:	20000f68 	.word	0x20000f68
 8007bbc:	20000f30 	.word	0x20000f30

08007bc0 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8007bc0:	b590      	push	{r4, r7, lr}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 8007bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8007db8 <Mic_Upkeep+0x1f8>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b03      	cmp	r3, #3
 8007bcc:	d100      	bne.n	8007bd0 <Mic_Upkeep+0x10>
 8007bce:	e0c0      	b.n	8007d52 <Mic_Upkeep+0x192>
 8007bd0:	dd00      	ble.n	8007bd4 <Mic_Upkeep+0x14>
 8007bd2:	e0db      	b.n	8007d8c <Mic_Upkeep+0x1cc>
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d037      	beq.n	8007c48 <Mic_Upkeep+0x88>
 8007bd8:	dd00      	ble.n	8007bdc <Mic_Upkeep+0x1c>
 8007bda:	e0d7      	b.n	8007d8c <Mic_Upkeep+0x1cc>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <Mic_Upkeep+0x26>
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d014      	beq.n	8007c0e <Mic_Upkeep+0x4e>
 8007be4:	e0d2      	b.n	8007d8c <Mic_Upkeep+0x1cc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 8007be6:	2001      	movs	r0, #1
 8007be8:	f003 fb50 	bl	800b28c <enableMicrophone>
 8007bec:	0003      	movs	r3, r0
 8007bee:	001a      	movs	r2, r3
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	4053      	eors	r3, r2
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d005      	beq.n	8007c06 <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8007bfa:	4a70      	ldr	r2, [pc, #448]	@ (8007dbc <Mic_Upkeep+0x1fc>)
 8007bfc:	4b70      	ldr	r3, [pc, #448]	@ (8007dc0 <Mic_Upkeep+0x200>)
 8007bfe:	21c7      	movs	r1, #199	@ 0xc7
 8007c00:	0018      	movs	r0, r3
 8007c02:	f005 fa0f 	bl	800d024 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 8007c06:	4b6c      	ldr	r3, [pc, #432]	@ (8007db8 <Mic_Upkeep+0x1f8>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	701a      	strb	r2, [r3, #0]
    break;
 8007c0c:	e0cd      	b.n	8007daa <Mic_Upkeep+0x1ea>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8007c0e:	f003 fb19 	bl	800b244 <micSettlingComplete>
 8007c12:	1e03      	subs	r3, r0, #0
 8007c14:	d105      	bne.n	8007c22 <Mic_Upkeep+0x62>
 8007c16:	4b6b      	ldr	r3, [pc, #428]	@ (8007dc4 <Mic_Upkeep+0x204>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d100      	bne.n	8007c22 <Mic_Upkeep+0x62>
 8007c20:	e0be      	b.n	8007da0 <Mic_Upkeep+0x1e0>
      if (!startSPLcalculation())
 8007c22:	f003 fb9d 	bl	800b360 <startSPLcalculation>
 8007c26:	0003      	movs	r3, r0
 8007c28:	001a      	movs	r2, r3
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	4053      	eors	r3, r2
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d005      	beq.n	8007c40 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8007c34:	4a61      	ldr	r2, [pc, #388]	@ (8007dbc <Mic_Upkeep+0x1fc>)
 8007c36:	4b62      	ldr	r3, [pc, #392]	@ (8007dc0 <Mic_Upkeep+0x200>)
 8007c38:	21d0      	movs	r1, #208	@ 0xd0
 8007c3a:	0018      	movs	r0, r3
 8007c3c:	f005 f9f2 	bl	800d024 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8007c40:	4b5d      	ldr	r3, [pc, #372]	@ (8007db8 <Mic_Upkeep+0x1f8>)
 8007c42:	2202      	movs	r2, #2
 8007c44:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007c46:	e0ab      	b.n	8007da0 <Mic_Upkeep+0x1e0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 8007c48:	4b5f      	ldr	r3, [pc, #380]	@ (8007dc8 <Mic_Upkeep+0x208>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	2101      	movs	r1, #1
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f003 f9da 	bl	800b008 <getSoundData>
 8007c54:	1e03      	subs	r3, r0, #0
 8007c56:	d100      	bne.n	8007c5a <Mic_Upkeep+0x9a>
 8007c58:	e0a4      	b.n	8007da4 <Mic_Upkeep+0x1e4>
      clearMaximumAmplitude();
 8007c5a:	f003 fad3 	bl	800b204 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8007dc8 <Mic_Upkeep+0x208>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007c64:	4b58      	ldr	r3, [pc, #352]	@ (8007dc8 <Mic_Upkeep+0x208>)
 8007c66:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007c68:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007c6a:	4b57      	ldr	r3, [pc, #348]	@ (8007dc8 <Mic_Upkeep+0x208>)
 8007c6c:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007c6e:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8007c70:	4b55      	ldr	r3, [pc, #340]	@ (8007dc8 <Mic_Upkeep+0x208>)
 8007c72:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007c74:	4855      	ldr	r0, [pc, #340]	@ (8007dcc <Mic_Upkeep+0x20c>)
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	0023      	movs	r3, r4
 8007c7a:	f000 faeb 	bl	8008254 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8007c7e:	4b52      	ldr	r3, [pc, #328]	@ (8007dc8 <Mic_Upkeep+0x208>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	001a      	movs	r2, r3
 8007c84:	4b50      	ldr	r3, [pc, #320]	@ (8007dc8 <Mic_Upkeep+0x208>)
 8007c86:	785b      	ldrb	r3, [r3, #1]
 8007c88:	4951      	ldr	r1, [pc, #324]	@ (8007dd0 <Mic_Upkeep+0x210>)
 8007c8a:	0038      	movs	r0, r7
 8007c8c:	f016 fc02 	bl	801e494 <siprintf>

      dBValue = atof(dBbuffer);
 8007c90:	003b      	movs	r3, r7
 8007c92:	0018      	movs	r0, r3
 8007c94:	f014 ffae 	bl	801cbf4 <atof>
 8007c98:	0002      	movs	r2, r0
 8007c9a:	000b      	movs	r3, r1
 8007c9c:	0010      	movs	r0, r2
 8007c9e:	0019      	movs	r1, r3
 8007ca0:	f7fb fc28 	bl	80034f4 <__aeabi_d2f>
 8007ca4:	1c02      	adds	r2, r0, #0
 8007ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8007dd4 <Mic_Upkeep+0x214>)
 8007ca8:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8007caa:	4b4a      	ldr	r3, [pc, #296]	@ (8007dd4 <Mic_Upkeep+0x214>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	494a      	ldr	r1, [pc, #296]	@ (8007dd8 <Mic_Upkeep+0x218>)
 8007cb0:	1c18      	adds	r0, r3, #0
 8007cb2:	f7f9 f975 	bl	8000fa0 <__aeabi_fmul>
 8007cb6:	1c03      	adds	r3, r0, #0
 8007cb8:	1c18      	adds	r0, r3, #0
 8007cba:	f7fb fbd3 	bl	8003464 <__aeabi_f2d>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	4b46      	ldr	r3, [pc, #280]	@ (8007ddc <Mic_Upkeep+0x21c>)
 8007cc2:	f7f9 fd13 	bl	80016ec <__aeabi_dadd>
 8007cc6:	0002      	movs	r2, r0
 8007cc8:	000b      	movs	r3, r1
 8007cca:	0010      	movs	r0, r2
 8007ccc:	0019      	movs	r1, r3
 8007cce:	f7fb fb3b 	bl	8003348 <__aeabi_d2iz>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	0018      	movs	r0, r3
 8007cd6:	f7fb fb73 	bl	80033c0 <__aeabi_i2d>
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4b40      	ldr	r3, [pc, #256]	@ (8007de0 <Mic_Upkeep+0x220>)
 8007cde:	f7fa f869 	bl	8001db4 <__aeabi_ddiv>
 8007ce2:	0002      	movs	r2, r0
 8007ce4:	000b      	movs	r3, r1
 8007ce6:	0010      	movs	r0, r2
 8007ce8:	0019      	movs	r1, r3
 8007cea:	f7fb fc03 	bl	80034f4 <__aeabi_d2f>
 8007cee:	1c02      	adds	r2, r0, #0
 8007cf0:	4b38      	ldr	r3, [pc, #224]	@ (8007dd4 <Mic_Upkeep+0x214>)
 8007cf2:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8007cf4:	f000 f95c 	bl	8007fb0 <MIC_Print>
      if (!startSPLcalculation()) {
 8007cf8:	f003 fb32 	bl	800b360 <startSPLcalculation>
 8007cfc:	0003      	movs	r3, r0
 8007cfe:	001a      	movs	r2, r3
 8007d00:	2301      	movs	r3, #1
 8007d02:	4053      	eors	r3, r2
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d005      	beq.n	8007d16 <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 8007d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007dbc <Mic_Upkeep+0x1fc>)
 8007d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8007dc0 <Mic_Upkeep+0x200>)
 8007d0e:	21e3      	movs	r1, #227	@ 0xe3
 8007d10:	0018      	movs	r0, r3
 8007d12:	f005 f987 	bl	800d024 <errorHandler>
      }
      if (!enableMicrophone(false))
 8007d16:	2000      	movs	r0, #0
 8007d18:	f003 fab8 	bl	800b28c <enableMicrophone>
 8007d1c:	0003      	movs	r3, r0
 8007d1e:	001a      	movs	r2, r3
 8007d20:	2301      	movs	r3, #1
 8007d22:	4053      	eors	r3, r2
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d005      	beq.n	8007d36 <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007d2a:	4a24      	ldr	r2, [pc, #144]	@ (8007dbc <Mic_Upkeep+0x1fc>)
 8007d2c:	4b24      	ldr	r3, [pc, #144]	@ (8007dc0 <Mic_Upkeep+0x200>)
 8007d2e:	21e7      	movs	r1, #231	@ 0xe7
 8007d30:	0018      	movs	r0, r3
 8007d32:	f005 f977 	bl	800d024 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 8007d36:	f005 fc5d 	bl	800d5f4 <HAL_GetTick>
 8007d3a:	0003      	movs	r3, r0
 8007d3c:	22fa      	movs	r2, #250	@ 0xfa
 8007d3e:	0092      	lsls	r2, r2, #2
 8007d40:	189a      	adds	r2, r3, r2
 8007d42:	4b28      	ldr	r3, [pc, #160]	@ (8007de4 <Mic_Upkeep+0x224>)
 8007d44:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8007d46:	4b1c      	ldr	r3, [pc, #112]	@ (8007db8 <Mic_Upkeep+0x1f8>)
 8007d48:	2203      	movs	r2, #3
 8007d4a:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8007d4c:	f004 fa0e 	bl	800c16c <ResetMICIndicator>
    }
    break;
 8007d50:	e028      	b.n	8007da4 <Mic_Upkeep+0x1e4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007d52:	4b24      	ldr	r3, [pc, #144]	@ (8007de4 <Mic_Upkeep+0x224>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	0018      	movs	r0, r3
 8007d58:	f005 f858 	bl	800ce0c <TimestampIsReached>
 8007d5c:	1e03      	subs	r3, r0, #0
 8007d5e:	d023      	beq.n	8007da8 <Mic_Upkeep+0x1e8>
      if (!enableMicrophone(true))
 8007d60:	2001      	movs	r0, #1
 8007d62:	f003 fa93 	bl	800b28c <enableMicrophone>
 8007d66:	0003      	movs	r3, r0
 8007d68:	001a      	movs	r2, r3
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4053      	eors	r3, r2
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <Mic_Upkeep+0x1c0>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007d74:	4a11      	ldr	r2, [pc, #68]	@ (8007dbc <Mic_Upkeep+0x1fc>)
 8007d76:	4b12      	ldr	r3, [pc, #72]	@ (8007dc0 <Mic_Upkeep+0x200>)
 8007d78:	21f4      	movs	r1, #244	@ 0xf4
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f005 f952 	bl	800d024 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007d80:	4b0d      	ldr	r3, [pc, #52]	@ (8007db8 <Mic_Upkeep+0x1f8>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007d86:	f004 f9d9 	bl	800c13c <SetMICIndicator>
    }
    break;
 8007d8a:	e00d      	b.n	8007da8 <Mic_Upkeep+0x1e8>

  default:
    Debug("Unexpected occurrence happened");
 8007d8c:	4a16      	ldr	r2, [pc, #88]	@ (8007de8 <Mic_Upkeep+0x228>)
 8007d8e:	4b17      	ldr	r3, [pc, #92]	@ (8007dec <Mic_Upkeep+0x22c>)
 8007d90:	0019      	movs	r1, r3
 8007d92:	2003      	movs	r0, #3
 8007d94:	f005 f890 	bl	800ceb8 <CreateLine>
    MicState = MIC_STATE_INIT;
 8007d98:	4b07      	ldr	r3, [pc, #28]	@ (8007db8 <Mic_Upkeep+0x1f8>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
    break;
 8007d9e:	e004      	b.n	8007daa <Mic_Upkeep+0x1ea>
    break;
 8007da0:	46c0      	nop			@ (mov r8, r8)
 8007da2:	e002      	b.n	8007daa <Mic_Upkeep+0x1ea>
    break;
 8007da4:	46c0      	nop			@ (mov r8, r8)
 8007da6:	e000      	b.n	8007daa <Mic_Upkeep+0x1ea>
    break;
 8007da8:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007daa:	4b03      	ldr	r3, [pc, #12]	@ (8007db8 <Mic_Upkeep+0x1f8>)
 8007dac:	781b      	ldrb	r3, [r3, #0]
}
 8007dae:	0018      	movs	r0, r3
 8007db0:	46bd      	mov	sp, r7
 8007db2:	b003      	add	sp, #12
 8007db4:	bd90      	pop	{r4, r7, pc}
 8007db6:	46c0      	nop			@ (mov r8, r8)
 8007db8:	20000f86 	.word	0x20000f86
 8007dbc:	080224b0 	.word	0x080224b0
 8007dc0:	08023260 	.word	0x08023260
 8007dc4:	200012c4 	.word	0x200012c4
 8007dc8:	20000f74 	.word	0x20000f74
 8007dcc:	080224cc 	.word	0x080224cc
 8007dd0:	080224f8 	.word	0x080224f8
 8007dd4:	20000fb8 	.word	0x20000fb8
 8007dd8:	42c80000 	.word	0x42c80000
 8007ddc:	3fe00000 	.word	0x3fe00000
 8007de0:	40590000 	.word	0x40590000
 8007de4:	20000f70 	.word	0x20000f70
 8007de8:	08022500 	.word	0x08022500
 8007dec:	08022440 	.word	0x08022440

08007df0 <Meas_Upkeep>:

MeasurementState Meas_Upkeep(void) {
 8007df0:	b5b0      	push	{r4, r5, r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007df6:	4b39      	ldr	r3, [pc, #228]	@ (8007edc <Meas_Upkeep+0xec>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b06      	cmp	r3, #6
 8007dfc:	d862      	bhi.n	8007ec4 <Meas_Upkeep+0xd4>
 8007dfe:	009a      	lsls	r2, r3, #2
 8007e00:	4b37      	ldr	r3, [pc, #220]	@ (8007ee0 <Meas_Upkeep+0xf0>)
 8007e02:	18d3      	adds	r3, r2, r3
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007e08:	4a36      	ldr	r2, [pc, #216]	@ (8007ee4 <Meas_Upkeep+0xf4>)
 8007e0a:	4b37      	ldr	r3, [pc, #220]	@ (8007ee8 <Meas_Upkeep+0xf8>)
 8007e0c:	0019      	movs	r1, r3
 8007e0e:	2003      	movs	r0, #3
 8007e10:	f005 f852 	bl	800ceb8 <CreateLine>
    break;
 8007e14:	e05d      	b.n	8007ed2 <Meas_Upkeep+0xe2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007e16:	f7ff fe81 	bl	8007b1c <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8007e1a:	4b30      	ldr	r3, [pc, #192]	@ (8007edc <Meas_Upkeep+0xec>)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	701a      	strb	r2, [r3, #0]
    break;
 8007e20:	e057      	b.n	8007ed2 <Meas_Upkeep+0xe2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8007e22:	f7ff fe01 	bl	8007a28 <StartMeasurements>
    SetMeasurementIndicator();
 8007e26:	f004 f95b 	bl	800c0e0 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8007e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007edc <Meas_Upkeep+0xec>)
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	701a      	strb	r2, [r3, #0]
   break;
 8007e30:	e04f      	b.n	8007ed2 <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8007e32:	f7ff fe8d 	bl	8007b50 <MeasurementsCompleted>
 8007e36:	1e03      	subs	r3, r0, #0
 8007e38:	d048      	beq.n	8007ecc <Meas_Upkeep+0xdc>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007e3a:	4b28      	ldr	r3, [pc, #160]	@ (8007edc <Meas_Upkeep+0xec>)
 8007e3c:	2203      	movs	r2, #3
 8007e3e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007e40:	e044      	b.n	8007ecc <Meas_Upkeep+0xdc>
  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
//    Debug("Processing results.");
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007e42:	4b2a      	ldr	r3, [pc, #168]	@ (8007eec <Meas_Upkeep+0xfc>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	4a2a      	ldr	r2, [pc, #168]	@ (8007ef0 <Meas_Upkeep+0x100>)
 8007e48:	4927      	ldr	r1, [pc, #156]	@ (8007ee8 <Meas_Upkeep+0xf8>)
 8007e4a:	2003      	movs	r0, #3
 8007e4c:	f005 f834 	bl	800ceb8 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007e50:	4b26      	ldr	r3, [pc, #152]	@ (8007eec <Meas_Upkeep+0xfc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	1c18      	adds	r0, r3, #0
 8007e56:	f7fb fb05 	bl	8003464 <__aeabi_f2d>
 8007e5a:	0004      	movs	r4, r0
 8007e5c:	000d      	movs	r5, r1
 8007e5e:	4b23      	ldr	r3, [pc, #140]	@ (8007eec <Meas_Upkeep+0xfc>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	1c18      	adds	r0, r3, #0
 8007e64:	f7fb fafe 	bl	8003464 <__aeabi_f2d>
 8007e68:	0002      	movs	r2, r0
 8007e6a:	000b      	movs	r3, r1
 8007e6c:	4821      	ldr	r0, [pc, #132]	@ (8007ef4 <Meas_Upkeep+0x104>)
 8007e6e:	491e      	ldr	r1, [pc, #120]	@ (8007ee8 <Meas_Upkeep+0xf8>)
 8007e70:	9202      	str	r2, [sp, #8]
 8007e72:	9303      	str	r3, [sp, #12]
 8007e74:	9400      	str	r4, [sp, #0]
 8007e76:	9501      	str	r5, [sp, #4]
 8007e78:	0002      	movs	r2, r0
 8007e7a:	2003      	movs	r0, #3
 8007e7c:	f005 f81c 	bl	800ceb8 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007e80:	4b1a      	ldr	r3, [pc, #104]	@ (8007eec <Meas_Upkeep+0xfc>)
 8007e82:	6858      	ldr	r0, [r3, #4]
 8007e84:	4b19      	ldr	r3, [pc, #100]	@ (8007eec <Meas_Upkeep+0xfc>)
 8007e86:	6819      	ldr	r1, [r3, #0]
 8007e88:	4b18      	ldr	r3, [pc, #96]	@ (8007eec <Meas_Upkeep+0xfc>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	001a      	movs	r2, r3
 8007e90:	f7fb fd22 	bl	80038d8 <setMeasurement>
    ResetMeasurementIndicator();
 8007e94:	f004 f93c 	bl	800c110 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007e98:	f005 fbac 	bl	800d5f4 <HAL_GetTick>
 8007e9c:	0003      	movs	r3, r0
 8007e9e:	4a16      	ldr	r2, [pc, #88]	@ (8007ef8 <Meas_Upkeep+0x108>)
 8007ea0:	189a      	adds	r2, r3, r2
 8007ea2:	4b16      	ldr	r3, [pc, #88]	@ (8007efc <Meas_Upkeep+0x10c>)
 8007ea4:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8007edc <Meas_Upkeep+0xec>)
 8007ea8:	2206      	movs	r2, #6
 8007eaa:	701a      	strb	r2, [r3, #0]
    break;
 8007eac:	e011      	b.n	8007ed2 <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007eae:	4b13      	ldr	r3, [pc, #76]	@ (8007efc <Meas_Upkeep+0x10c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	0018      	movs	r0, r3
 8007eb4:	f004 ffaa 	bl	800ce0c <TimestampIsReached>
 8007eb8:	1e03      	subs	r3, r0, #0
 8007eba:	d009      	beq.n	8007ed0 <Meas_Upkeep+0xe0>
      MeasState = MEAS_STATE_INIT;
 8007ebc:	4b07      	ldr	r3, [pc, #28]	@ (8007edc <Meas_Upkeep+0xec>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007ec2:	e005      	b.n	8007ed0 <Meas_Upkeep+0xe0>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007ec4:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <Meas_Upkeep+0xec>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	701a      	strb	r2, [r3, #0]
    break;
 8007eca:	e002      	b.n	8007ed2 <Meas_Upkeep+0xe2>
    break;
 8007ecc:	46c0      	nop			@ (mov r8, r8)
 8007ece:	e000      	b.n	8007ed2 <Meas_Upkeep+0xe2>
    break;
 8007ed0:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007ed2:	4b02      	ldr	r3, [pc, #8]	@ (8007edc <Meas_Upkeep+0xec>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
}
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bdb0      	pop	{r4, r5, r7, pc}
 8007edc:	20000f87 	.word	0x20000f87
 8007ee0:	08023244 	.word	0x08023244
 8007ee4:	08022520 	.word	0x08022520
 8007ee8:	08022440 	.word	0x08022440
 8007eec:	20000f20 	.word	0x20000f20
 8007ef0:	08022540 	.word	0x08022540
 8007ef4:	08022558 	.word	0x08022558
 8007ef8:	00002710 	.word	0x00002710
 8007efc:	20000f6c 	.word	0x20000f6c

08007f00 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007f00:	b590      	push	{r4, r7, lr}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	1d3b      	adds	r3, r7, #4
 8007f08:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007f0a:	240f      	movs	r4, #15
 8007f0c:	193b      	adds	r3, r7, r4
 8007f0e:	2200      	movs	r2, #0
 8007f10:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007f12:	4b20      	ldr	r3, [pc, #128]	@ (8007f94 <Meas_SetEnabledSensors+0x94>)
 8007f14:	1d3a      	adds	r2, r7, #4
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007f1a:	193b      	adds	r3, r7, r4
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	193a      	adds	r2, r7, r4
 8007f20:	1c59      	adds	r1, r3, #1
 8007f22:	7011      	strb	r1, [r2, #0]
 8007f24:	0018      	movs	r0, r3
 8007f26:	1d3b      	adds	r3, r7, #4
 8007f28:	7819      	ldrb	r1, [r3, #0]
 8007f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007f98 <Meas_SetEnabledSensors+0x98>)
 8007f2c:	0103      	lsls	r3, r0, #4
 8007f2e:	18d3      	adds	r3, r2, r3
 8007f30:	330c      	adds	r3, #12
 8007f32:	1c0a      	adds	r2, r1, #0
 8007f34:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007f36:	193b      	adds	r3, r7, r4
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	193a      	adds	r2, r7, r4
 8007f3c:	1c59      	adds	r1, r3, #1
 8007f3e:	7011      	strb	r1, [r2, #0]
 8007f40:	0018      	movs	r0, r3
 8007f42:	1d3b      	adds	r3, r7, #4
 8007f44:	7859      	ldrb	r1, [r3, #1]
 8007f46:	4a14      	ldr	r2, [pc, #80]	@ (8007f98 <Meas_SetEnabledSensors+0x98>)
 8007f48:	0103      	lsls	r3, r0, #4
 8007f4a:	18d3      	adds	r3, r2, r3
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	1c0a      	adds	r2, r1, #0
 8007f50:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007f52:	193b      	adds	r3, r7, r4
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	193a      	adds	r2, r7, r4
 8007f58:	1c59      	adds	r1, r3, #1
 8007f5a:	7011      	strb	r1, [r2, #0]
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	1d3b      	adds	r3, r7, #4
 8007f60:	7899      	ldrb	r1, [r3, #2]
 8007f62:	4a0d      	ldr	r2, [pc, #52]	@ (8007f98 <Meas_SetEnabledSensors+0x98>)
 8007f64:	0103      	lsls	r3, r0, #4
 8007f66:	18d3      	adds	r3, r2, r3
 8007f68:	330c      	adds	r3, #12
 8007f6a:	1c0a      	adds	r2, r1, #0
 8007f6c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007f6e:	193b      	adds	r3, r7, r4
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	193a      	adds	r2, r7, r4
 8007f74:	1c59      	adds	r1, r3, #1
 8007f76:	7011      	strb	r1, [r2, #0]
 8007f78:	0018      	movs	r0, r3
 8007f7a:	1d3b      	adds	r3, r7, #4
 8007f7c:	78d9      	ldrb	r1, [r3, #3]
 8007f7e:	4a06      	ldr	r2, [pc, #24]	@ (8007f98 <Meas_SetEnabledSensors+0x98>)
 8007f80:	0103      	lsls	r3, r0, #4
 8007f82:	18d3      	adds	r3, r2, r3
 8007f84:	330c      	adds	r3, #12
 8007f86:	1c0a      	adds	r2, r1, #0
 8007f88:	701a      	strb	r2, [r3, #0]
}
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	b005      	add	sp, #20
 8007f90:	bd90      	pop	{r4, r7, pc}
 8007f92:	46c0      	nop			@ (mov r8, r8)
 8007f94:	20000f60 	.word	0x20000f60
 8007f98:	20000f30 	.word	0x20000f30

08007f9c <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007fa0:	4b02      	ldr	r3, [pc, #8]	@ (8007fac <SetESPMeasurementDone+0x10>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	70da      	strb	r2, [r3, #3]
}
 8007fa6:	46c0      	nop			@ (mov r8, r8)
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000f64 	.word	0x20000f64

08007fb0 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007fb6:	4b81      	ldr	r3, [pc, #516]	@ (80081bc <MIC_Print+0x20c>)
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	4b81      	ldr	r3, [pc, #516]	@ (80081c0 <MIC_Print+0x210>)
 8007fbc:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007fbe:	4b81      	ldr	r3, [pc, #516]	@ (80081c4 <MIC_Print+0x214>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	2b09      	cmp	r3, #9
 8007fc4:	d80e      	bhi.n	8007fe4 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80081c4 <MIC_Print+0x214>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	001a      	movs	r2, r3
 8007fcc:	4b7c      	ldr	r3, [pc, #496]	@ (80081c0 <MIC_Print+0x210>)
 8007fce:	6819      	ldr	r1, [r3, #0]
 8007fd0:	4b7d      	ldr	r3, [pc, #500]	@ (80081c8 <MIC_Print+0x218>)
 8007fd2:	0092      	lsls	r2, r2, #2
 8007fd4:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80081c4 <MIC_Print+0x214>)
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	4b79      	ldr	r3, [pc, #484]	@ (80081c4 <MIC_Print+0x214>)
 8007fe0:	701a      	strb	r2, [r3, #0]
 8007fe2:	e013      	b.n	800800c <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007fe4:	4b77      	ldr	r3, [pc, #476]	@ (80081c4 <MIC_Print+0x214>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007fea:	4b76      	ldr	r3, [pc, #472]	@ (80081c4 <MIC_Print+0x214>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	001a      	movs	r2, r3
 8007ff0:	4b73      	ldr	r3, [pc, #460]	@ (80081c0 <MIC_Print+0x210>)
 8007ff2:	6819      	ldr	r1, [r3, #0]
 8007ff4:	4b74      	ldr	r3, [pc, #464]	@ (80081c8 <MIC_Print+0x218>)
 8007ff6:	0092      	lsls	r2, r2, #2
 8007ff8:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007ffa:	4b72      	ldr	r3, [pc, #456]	@ (80081c4 <MIC_Print+0x214>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	3301      	adds	r3, #1
 8008000:	b2da      	uxtb	r2, r3
 8008002:	4b70      	ldr	r3, [pc, #448]	@ (80081c4 <MIC_Print+0x214>)
 8008004:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8008006:	4b71      	ldr	r3, [pc, #452]	@ (80081cc <MIC_Print+0x21c>)
 8008008:	2201      	movs	r2, #1
 800800a:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 800800c:	4b6f      	ldr	r3, [pc, #444]	@ (80081cc <MIC_Print+0x21c>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2201      	movs	r2, #1
 8008012:	4053      	eors	r3, r2
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 800801a:	4b69      	ldr	r3, [pc, #420]	@ (80081c0 <MIC_Print+0x210>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	1c18      	adds	r0, r3, #0
 8008020:	f7fb fc76 	bl	8003910 <setMic>
 8008024:	e02d      	b.n	8008082 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8008026:	4b6a      	ldr	r3, [pc, #424]	@ (80081d0 <MIC_Print+0x220>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 800802c:	1dfb      	adds	r3, r7, #7
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
 8008032:	e013      	b.n	800805c <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8008034:	1dfb      	adds	r3, r7, #7
 8008036:	781a      	ldrb	r2, [r3, #0]
 8008038:	4b63      	ldr	r3, [pc, #396]	@ (80081c8 <MIC_Print+0x218>)
 800803a:	0092      	lsls	r2, r2, #2
 800803c:	58d2      	ldr	r2, [r2, r3]
 800803e:	4b64      	ldr	r3, [pc, #400]	@ (80081d0 <MIC_Print+0x220>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	1c19      	adds	r1, r3, #0
 8008044:	1c10      	adds	r0, r2, #0
 8008046:	f7f8 fc3b 	bl	80008c0 <__aeabi_fadd>
 800804a:	1c03      	adds	r3, r0, #0
 800804c:	1c1a      	adds	r2, r3, #0
 800804e:	4b60      	ldr	r3, [pc, #384]	@ (80081d0 <MIC_Print+0x220>)
 8008050:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8008052:	1dfb      	adds	r3, r7, #7
 8008054:	781a      	ldrb	r2, [r3, #0]
 8008056:	1dfb      	adds	r3, r7, #7
 8008058:	3201      	adds	r2, #1
 800805a:	701a      	strb	r2, [r3, #0]
 800805c:	1dfb      	adds	r3, r7, #7
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	2b09      	cmp	r3, #9
 8008062:	d9e7      	bls.n	8008034 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8008064:	4b5a      	ldr	r3, [pc, #360]	@ (80081d0 <MIC_Print+0x220>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	495a      	ldr	r1, [pc, #360]	@ (80081d4 <MIC_Print+0x224>)
 800806a:	1c18      	adds	r0, r3, #0
 800806c:	f7f8 fdb2 	bl	8000bd4 <__aeabi_fdiv>
 8008070:	1c03      	adds	r3, r0, #0
 8008072:	1c1a      	adds	r2, r3, #0
 8008074:	4b56      	ldr	r3, [pc, #344]	@ (80081d0 <MIC_Print+0x220>)
 8008076:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8008078:	4b55      	ldr	r3, [pc, #340]	@ (80081d0 <MIC_Print+0x220>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	1c18      	adds	r0, r3, #0
 800807e:	f7fb fc47 	bl	8003910 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8008082:	4b4f      	ldr	r3, [pc, #316]	@ (80081c0 <MIC_Print+0x210>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4954      	ldr	r1, [pc, #336]	@ (80081d8 <MIC_Print+0x228>)
 8008088:	1c18      	adds	r0, r3, #0
 800808a:	f7f8 fa6f 	bl	800056c <__aeabi_fcmpge>
 800808e:	1e03      	subs	r3, r0, #0
 8008090:	d004      	beq.n	800809c <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8008092:	2201      	movs	r2, #1
 8008094:	2101      	movs	r1, #1
 8008096:	2001      	movs	r0, #1
 8008098:	f003 ffa4 	bl	800bfe4 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 800809c:	4b48      	ldr	r3, [pc, #288]	@ (80081c0 <MIC_Print+0x210>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	494d      	ldr	r1, [pc, #308]	@ (80081d8 <MIC_Print+0x228>)
 80080a2:	1c18      	adds	r0, r3, #0
 80080a4:	f7f8 fa44 	bl	8000530 <__aeabi_fcmplt>
 80080a8:	1e03      	subs	r3, r0, #0
 80080aa:	d00c      	beq.n	80080c6 <MIC_Print+0x116>
 80080ac:	4b44      	ldr	r3, [pc, #272]	@ (80081c0 <MIC_Print+0x210>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	494a      	ldr	r1, [pc, #296]	@ (80081dc <MIC_Print+0x22c>)
 80080b2:	1c18      	adds	r0, r3, #0
 80080b4:	f7f8 fa5a 	bl	800056c <__aeabi_fcmpge>
 80080b8:	1e03      	subs	r3, r0, #0
 80080ba:	d004      	beq.n	80080c6 <MIC_Print+0x116>
    SetDBLED(true, false, false);
 80080bc:	2200      	movs	r2, #0
 80080be:	2100      	movs	r1, #0
 80080c0:	2001      	movs	r0, #1
 80080c2:	f003 ff8f 	bl	800bfe4 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 80080c6:	4b3e      	ldr	r3, [pc, #248]	@ (80081c0 <MIC_Print+0x210>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4944      	ldr	r1, [pc, #272]	@ (80081dc <MIC_Print+0x22c>)
 80080cc:	1c18      	adds	r0, r3, #0
 80080ce:	f7f8 fa2f 	bl	8000530 <__aeabi_fcmplt>
 80080d2:	1e03      	subs	r3, r0, #0
 80080d4:	d00c      	beq.n	80080f0 <MIC_Print+0x140>
 80080d6:	4b3a      	ldr	r3, [pc, #232]	@ (80081c0 <MIC_Print+0x210>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4941      	ldr	r1, [pc, #260]	@ (80081e0 <MIC_Print+0x230>)
 80080dc:	1c18      	adds	r0, r3, #0
 80080de:	f7f8 fa45 	bl	800056c <__aeabi_fcmpge>
 80080e2:	1e03      	subs	r3, r0, #0
 80080e4:	d004      	beq.n	80080f0 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 80080e6:	2200      	movs	r2, #0
 80080e8:	2101      	movs	r1, #1
 80080ea:	2001      	movs	r0, #1
 80080ec:	f003 ff7a 	bl	800bfe4 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 80080f0:	4b33      	ldr	r3, [pc, #204]	@ (80081c0 <MIC_Print+0x210>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	493a      	ldr	r1, [pc, #232]	@ (80081e0 <MIC_Print+0x230>)
 80080f6:	1c18      	adds	r0, r3, #0
 80080f8:	f7f8 fa1a 	bl	8000530 <__aeabi_fcmplt>
 80080fc:	1e03      	subs	r3, r0, #0
 80080fe:	d00c      	beq.n	800811a <MIC_Print+0x16a>
 8008100:	4b2f      	ldr	r3, [pc, #188]	@ (80081c0 <MIC_Print+0x210>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4937      	ldr	r1, [pc, #220]	@ (80081e4 <MIC_Print+0x234>)
 8008106:	1c18      	adds	r0, r3, #0
 8008108:	f7f8 fa30 	bl	800056c <__aeabi_fcmpge>
 800810c:	1e03      	subs	r3, r0, #0
 800810e:	d004      	beq.n	800811a <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 8008110:	2200      	movs	r2, #0
 8008112:	2101      	movs	r1, #1
 8008114:	2000      	movs	r0, #0
 8008116:	f003 ff65 	bl	800bfe4 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 800811a:	4b29      	ldr	r3, [pc, #164]	@ (80081c0 <MIC_Print+0x210>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4931      	ldr	r1, [pc, #196]	@ (80081e4 <MIC_Print+0x234>)
 8008120:	1c18      	adds	r0, r3, #0
 8008122:	f7f8 fa05 	bl	8000530 <__aeabi_fcmplt>
 8008126:	1e03      	subs	r3, r0, #0
 8008128:	d00c      	beq.n	8008144 <MIC_Print+0x194>
 800812a:	4b25      	ldr	r3, [pc, #148]	@ (80081c0 <MIC_Print+0x210>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	492e      	ldr	r1, [pc, #184]	@ (80081e8 <MIC_Print+0x238>)
 8008130:	1c18      	adds	r0, r3, #0
 8008132:	f7f8 fa1b 	bl	800056c <__aeabi_fcmpge>
 8008136:	1e03      	subs	r3, r0, #0
 8008138:	d004      	beq.n	8008144 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 800813a:	2201      	movs	r2, #1
 800813c:	2100      	movs	r1, #0
 800813e:	2000      	movs	r0, #0
 8008140:	f003 ff50 	bl	800bfe4 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8008144:	4b1e      	ldr	r3, [pc, #120]	@ (80081c0 <MIC_Print+0x210>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4927      	ldr	r1, [pc, #156]	@ (80081e8 <MIC_Print+0x238>)
 800814a:	1c18      	adds	r0, r3, #0
 800814c:	f7f8 f9f0 	bl	8000530 <__aeabi_fcmplt>
 8008150:	1e03      	subs	r3, r0, #0
 8008152:	d00c      	beq.n	800816e <MIC_Print+0x1be>
 8008154:	4b1a      	ldr	r3, [pc, #104]	@ (80081c0 <MIC_Print+0x210>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4924      	ldr	r1, [pc, #144]	@ (80081ec <MIC_Print+0x23c>)
 800815a:	1c18      	adds	r0, r3, #0
 800815c:	f7f8 fa06 	bl	800056c <__aeabi_fcmpge>
 8008160:	1e03      	subs	r3, r0, #0
 8008162:	d004      	beq.n	800816e <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8008164:	2201      	movs	r2, #1
 8008166:	2101      	movs	r1, #1
 8008168:	2000      	movs	r0, #0
 800816a:	f003 ff3b 	bl	800bfe4 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 800816e:	4b14      	ldr	r3, [pc, #80]	@ (80081c0 <MIC_Print+0x210>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	491e      	ldr	r1, [pc, #120]	@ (80081ec <MIC_Print+0x23c>)
 8008174:	1c18      	adds	r0, r3, #0
 8008176:	f7f8 f9db 	bl	8000530 <__aeabi_fcmplt>
 800817a:	1e03      	subs	r3, r0, #0
 800817c:	d00c      	beq.n	8008198 <MIC_Print+0x1e8>
 800817e:	4b10      	ldr	r3, [pc, #64]	@ (80081c0 <MIC_Print+0x210>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	491b      	ldr	r1, [pc, #108]	@ (80081f0 <MIC_Print+0x240>)
 8008184:	1c18      	adds	r0, r3, #0
 8008186:	f7f8 f9f1 	bl	800056c <__aeabi_fcmpge>
 800818a:	1e03      	subs	r3, r0, #0
 800818c:	d004      	beq.n	8008198 <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 800818e:	2201      	movs	r2, #1
 8008190:	2100      	movs	r1, #0
 8008192:	2001      	movs	r0, #1
 8008194:	f003 ff26 	bl	800bfe4 <SetDBLED>
  }
  if(dBc < 35){//off
 8008198:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <MIC_Print+0x210>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4914      	ldr	r1, [pc, #80]	@ (80081f0 <MIC_Print+0x240>)
 800819e:	1c18      	adds	r0, r3, #0
 80081a0:	f7f8 f9c6 	bl	8000530 <__aeabi_fcmplt>
 80081a4:	1e03      	subs	r3, r0, #0
 80081a6:	d100      	bne.n	80081aa <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 80081a8:	e004      	b.n	80081b4 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 80081aa:	2200      	movs	r2, #0
 80081ac:	2100      	movs	r1, #0
 80081ae:	2000      	movs	r0, #0
 80081b0:	f003 ff18 	bl	800bfe4 <SetDBLED>
}
 80081b4:	46c0      	nop			@ (mov r8, r8)
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b002      	add	sp, #8
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000fb8 	.word	0x20000fb8
 80081c0:	20000f88 	.word	0x20000f88
 80081c4:	20000fbc 	.word	0x20000fbc
 80081c8:	20000f8c 	.word	0x20000f8c
 80081cc:	20000fbd 	.word	0x20000fbd
 80081d0:	20000fb4 	.word	0x20000fb4
 80081d4:	41200000 	.word	0x41200000
 80081d8:	42b40000 	.word	0x42b40000
 80081dc:	42a00000 	.word	0x42a00000
 80081e0:	428c0000 	.word	0x428c0000
 80081e4:	42700000 	.word	0x42700000
 80081e8:	42480000 	.word	0x42480000
 80081ec:	42200000 	.word	0x42200000
 80081f0:	420c0000 	.word	0x420c0000

080081f4 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 80081fa:	4b11      	ldr	r3, [pc, #68]	@ (8008240 <MIC_TestMeasurementDone+0x4c>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	4a10      	ldr	r2, [pc, #64]	@ (8008244 <MIC_TestMeasurementDone+0x50>)
 8008202:	4911      	ldr	r1, [pc, #68]	@ (8008248 <MIC_TestMeasurementDone+0x54>)
 8008204:	2002      	movs	r0, #2
 8008206:	f004 fe57 	bl	800ceb8 <CreateLine>
  if(DataReady) {
 800820a:	4b0d      	ldr	r3, [pc, #52]	@ (8008240 <MIC_TestMeasurementDone+0x4c>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d010      	beq.n	8008236 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8008214:	1dfb      	adds	r3, r7, #7
 8008216:	4a0d      	ldr	r2, [pc, #52]	@ (800824c <MIC_TestMeasurementDone+0x58>)
 8008218:	7812      	ldrb	r2, [r2, #0]
 800821a:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 800821c:	4b0b      	ldr	r3, [pc, #44]	@ (800824c <MIC_TestMeasurementDone+0x58>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	4a0b      	ldr	r2, [pc, #44]	@ (8008250 <MIC_TestMeasurementDone+0x5c>)
 8008224:	4908      	ldr	r1, [pc, #32]	@ (8008248 <MIC_TestMeasurementDone+0x54>)
 8008226:	2002      	movs	r0, #2
 8008228:	f004 fe46 	bl	800ceb8 <CreateLine>
    ResetMICIndicator();
 800822c:	f003 ff9e 	bl	800c16c <ResetMICIndicator>
    return Check;
 8008230:	1dfb      	adds	r3, r7, #7
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	e000      	b.n	8008238 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8008236:	2300      	movs	r3, #0
}
 8008238:	0018      	movs	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	b002      	add	sp, #8
 800823e:	bd80      	pop	{r7, pc}
 8008240:	200012c4 	.word	0x200012c4
 8008244:	0802258c 	.word	0x0802258c
 8008248:	080225b8 	.word	0x080225b8
 800824c:	200012c5 	.word	0x200012c5
 8008250:	080225bc 	.word	0x080225bc

08008254 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008254:	b40f      	push	{r0, r1, r2, r3}
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 800825c:	2314      	movs	r3, #20
 800825e:	18fb      	adds	r3, r7, r3
 8008260:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	2180      	movs	r1, #128	@ 0x80
 8008268:	0089      	lsls	r1, r1, #2
 800826a:	480a      	ldr	r0, [pc, #40]	@ (8008294 <print+0x40>)
 800826c:	f016 f9aa 	bl	801e5c4 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8008270:	4b08      	ldr	r3, [pc, #32]	@ (8008294 <print+0x40>)
 8008272:	0018      	movs	r0, r3
 8008274:	f7f7 ff7a 	bl	800016c <strlen>
 8008278:	0003      	movs	r3, r0
 800827a:	b29a      	uxth	r2, r3
 800827c:	4b05      	ldr	r3, [pc, #20]	@ (8008294 <print+0x40>)
 800827e:	0011      	movs	r1, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f7ff f9af 	bl	80075e4 <printString>
}
 8008286:	46c0      	nop			@ (mov r8, r8)
 8008288:	46bd      	mov	sp, r7
 800828a:	b002      	add	sp, #8
 800828c:	bc80      	pop	{r7}
 800828e:	bc08      	pop	{r3}
 8008290:	b004      	add	sp, #16
 8008292:	4718      	bx	r3
 8008294:	20000fc0 	.word	0x20000fc0

08008298 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800829e:	1d3b      	adds	r3, r7, #4
 80082a0:	0018      	movs	r0, r3
 80082a2:	2314      	movs	r3, #20
 80082a4:	001a      	movs	r2, r3
 80082a6:	2100      	movs	r1, #0
 80082a8:	f016 fa38 	bl	801e71c <memset>
  RTC_DateTypeDef sDate = {0};
 80082ac:	003b      	movs	r3, r7
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80082b2:	4b2e      	ldr	r3, [pc, #184]	@ (800836c <MX_RTC_Init+0xd4>)
 80082b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008370 <MX_RTC_Init+0xd8>)
 80082b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80082b8:	4b2c      	ldr	r3, [pc, #176]	@ (800836c <MX_RTC_Init+0xd4>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80082be:	4b2b      	ldr	r3, [pc, #172]	@ (800836c <MX_RTC_Init+0xd4>)
 80082c0:	227f      	movs	r2, #127	@ 0x7f
 80082c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80082c4:	4b29      	ldr	r3, [pc, #164]	@ (800836c <MX_RTC_Init+0xd4>)
 80082c6:	22ff      	movs	r2, #255	@ 0xff
 80082c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80082ca:	4b28      	ldr	r3, [pc, #160]	@ (800836c <MX_RTC_Init+0xd4>)
 80082cc:	2200      	movs	r2, #0
 80082ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80082d0:	4b26      	ldr	r3, [pc, #152]	@ (800836c <MX_RTC_Init+0xd4>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80082d6:	4b25      	ldr	r3, [pc, #148]	@ (800836c <MX_RTC_Init+0xd4>)
 80082d8:	2200      	movs	r2, #0
 80082da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80082dc:	4b23      	ldr	r3, [pc, #140]	@ (800836c <MX_RTC_Init+0xd4>)
 80082de:	2200      	movs	r2, #0
 80082e0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80082e2:	4b22      	ldr	r3, [pc, #136]	@ (800836c <MX_RTC_Init+0xd4>)
 80082e4:	0018      	movs	r0, r3
 80082e6:	f00c f939 	bl	801455c <HAL_RTC_Init>
 80082ea:	1e03      	subs	r3, r0, #0
 80082ec:	d001      	beq.n	80082f2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80082ee:	f7ff fa27 	bl	8007740 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	220d      	movs	r2, #13
 80082f6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80082f8:	1d3b      	adds	r3, r7, #4
 80082fa:	2200      	movs	r2, #0
 80082fc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80082fe:	1d3b      	adds	r3, r7, #4
 8008300:	2200      	movs	r2, #0
 8008302:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008304:	1d3b      	adds	r3, r7, #4
 8008306:	2200      	movs	r2, #0
 8008308:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800830a:	1d3b      	adds	r3, r7, #4
 800830c:	2200      	movs	r2, #0
 800830e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008310:	1d39      	adds	r1, r7, #4
 8008312:	4b16      	ldr	r3, [pc, #88]	@ (800836c <MX_RTC_Init+0xd4>)
 8008314:	2200      	movs	r2, #0
 8008316:	0018      	movs	r0, r3
 8008318:	f00c f9bc 	bl	8014694 <HAL_RTC_SetTime>
 800831c:	1e03      	subs	r3, r0, #0
 800831e:	d001      	beq.n	8008324 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008320:	f7ff fa0e 	bl	8007740 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008324:	003b      	movs	r3, r7
 8008326:	2206      	movs	r2, #6
 8008328:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800832a:	003b      	movs	r3, r7
 800832c:	2211      	movs	r2, #17
 800832e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008330:	003b      	movs	r3, r7
 8008332:	2217      	movs	r2, #23
 8008334:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008336:	003b      	movs	r3, r7
 8008338:	2218      	movs	r2, #24
 800833a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800833c:	0039      	movs	r1, r7
 800833e:	4b0b      	ldr	r3, [pc, #44]	@ (800836c <MX_RTC_Init+0xd4>)
 8008340:	2200      	movs	r2, #0
 8008342:	0018      	movs	r0, r3
 8008344:	f00c faae 	bl	80148a4 <HAL_RTC_SetDate>
 8008348:	1e03      	subs	r3, r0, #0
 800834a:	d001      	beq.n	8008350 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 800834c:	f7ff f9f8 	bl	8007740 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008350:	4b06      	ldr	r3, [pc, #24]	@ (800836c <MX_RTC_Init+0xd4>)
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	0018      	movs	r0, r3
 8008358:	f00c fc5e 	bl	8014c18 <HAL_RTCEx_SetWakeUpTimer>
 800835c:	1e03      	subs	r3, r0, #0
 800835e:	d001      	beq.n	8008364 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8008360:	f7ff f9ee 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008364:	46c0      	nop			@ (mov r8, r8)
 8008366:	46bd      	mov	sp, r7
 8008368:	b006      	add	sp, #24
 800836a:	bd80      	pop	{r7, pc}
 800836c:	200011c0 	.word	0x200011c0
 8008370:	40002800 	.word	0x40002800

08008374 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a06      	ldr	r2, [pc, #24]	@ (800839c <HAL_RTC_MspInit+0x28>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d106      	bne.n	8008394 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008386:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <HAL_RTC_MspInit+0x2c>)
 8008388:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800838a:	4b05      	ldr	r3, [pc, #20]	@ (80083a0 <HAL_RTC_MspInit+0x2c>)
 800838c:	2180      	movs	r1, #128	@ 0x80
 800838e:	02c9      	lsls	r1, r1, #11
 8008390:	430a      	orrs	r2, r1
 8008392:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008394:	46c0      	nop			@ (mov r8, r8)
 8008396:	46bd      	mov	sp, r7
 8008398:	b002      	add	sp, #8
 800839a:	bd80      	pop	{r7, pc}
 800839c:	40002800 	.word	0x40002800
 80083a0:	40021000 	.word	0x40021000

080083a4 <sen5x_Power_On>:
static sen5x_states samplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;



void sen5x_Power_On(void) {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
//  Debug("executing sen5x_Power_On");
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80083a8:	2380      	movs	r3, #128	@ 0x80
 80083aa:	015b      	lsls	r3, r3, #5
 80083ac:	4805      	ldr	r0, [pc, #20]	@ (80083c4 <sen5x_Power_On+0x20>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	0019      	movs	r1, r3
 80083b2:	f006 fb7e 	bl	800eab2 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 80083b6:	20c8      	movs	r0, #200	@ 0xc8
 80083b8:	f005 f926 	bl	800d608 <HAL_Delay>
  return;
 80083bc:	46c0      	nop			@ (mov r8, r8)
}
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	46c0      	nop			@ (mov r8, r8)
 80083c4:	50000800 	.word	0x50000800

080083c8 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	af00      	add	r7, sp, #0
//  Debug("executing sen5x_Power_Off");
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80083cc:	2380      	movs	r3, #128	@ 0x80
 80083ce:	015b      	lsls	r3, r3, #5
 80083d0:	4803      	ldr	r0, [pc, #12]	@ (80083e0 <sen5x_Power_Off+0x18>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	0019      	movs	r1, r3
 80083d6:	f006 fb6c 	bl	800eab2 <HAL_GPIO_WritePin>
  return;
 80083da:	46c0      	nop			@ (mov r8, r8)
}
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	50000800 	.word	0x50000800

080083e4 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 80083e8:	4b02      	ldr	r3, [pc, #8]	@ (80083f4 <reset_fanCleaningDone+0x10>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
}
 80083ee:	46c0      	nop			@ (mov r8, r8)
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200011e4 	.word	0x200011e4

080083f8 <probe_sen5x>:

int16_t probe_sen5x(void) {
 80083f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083fa:	b09b      	sub	sp, #108	@ 0x6c
 80083fc:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 80083fe:	2456      	movs	r4, #86	@ 0x56
 8008400:	193b      	adds	r3, r7, r4
 8008402:	2200      	movs	r2, #0
 8008404:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008406:	2355      	movs	r3, #85	@ 0x55
 8008408:	18fb      	adds	r3, r7, r3
 800840a:	2220      	movs	r2, #32
 800840c:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 800840e:	2354      	movs	r3, #84	@ 0x54
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	2220      	movs	r2, #32
 8008414:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008416:	f7ff ffc5 	bl	80083a4 <sen5x_Power_On>

  error = sen5x_device_reset();
 800841a:	0025      	movs	r5, r4
 800841c:	193c      	adds	r4, r7, r4
 800841e:	f000 ffe1 	bl	80093e4 <sen5x_device_reset>
 8008422:	0003      	movs	r3, r0
 8008424:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008426:	002c      	movs	r4, r5
 8008428:	193b      	adds	r3, r7, r4
 800842a:	2200      	movs	r2, #0
 800842c:	5e9b      	ldrsh	r3, [r3, r2]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00b      	beq.n	800844a <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 8008432:	193b      	adds	r3, r7, r4
 8008434:	2200      	movs	r2, #0
 8008436:	5e9b      	ldrsh	r3, [r3, r2]
 8008438:	4a6d      	ldr	r2, [pc, #436]	@ (80085f0 <probe_sen5x+0x1f8>)
 800843a:	496e      	ldr	r1, [pc, #440]	@ (80085f4 <probe_sen5x+0x1fc>)
 800843c:	2001      	movs	r0, #1
 800843e:	f004 fd3b 	bl	800ceb8 <CreateLine>
      return error;
 8008442:	193b      	adds	r3, r7, r4
 8008444:	2200      	movs	r2, #0
 8008446:	5e9b      	ldrsh	r3, [r3, r2]
 8008448:	e0ce      	b.n	80085e8 <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 800844a:	2556      	movs	r5, #86	@ 0x56
 800844c:	197c      	adds	r4, r7, r5
 800844e:	2355      	movs	r3, #85	@ 0x55
 8008450:	18fb      	adds	r3, r7, r3
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	232c      	movs	r3, #44	@ 0x2c
 8008456:	18fb      	adds	r3, r7, r3
 8008458:	0011      	movs	r1, r2
 800845a:	0018      	movs	r0, r3
 800845c:	f000 feae 	bl	80091bc <sen5x_get_serial_number>
 8008460:	0003      	movs	r3, r0
 8008462:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008464:	197b      	adds	r3, r7, r5
 8008466:	2200      	movs	r2, #0
 8008468:	5e9b      	ldrsh	r3, [r3, r2]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00b      	beq.n	8008486 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 800846e:	197b      	adds	r3, r7, r5
 8008470:	2200      	movs	r2, #0
 8008472:	5e9a      	ldrsh	r2, [r3, r2]
 8008474:	4b60      	ldr	r3, [pc, #384]	@ (80085f8 <probe_sen5x+0x200>)
 8008476:	0011      	movs	r1, r2
 8008478:	0018      	movs	r0, r3
 800847a:	f015 ff9b 	bl	801e3b4 <iprintf>
      return error;
 800847e:	197b      	adds	r3, r7, r5
 8008480:	2200      	movs	r2, #0
 8008482:	5e9b      	ldrsh	r3, [r3, r2]
 8008484:	e0b0      	b.n	80085e8 <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 8008486:	232c      	movs	r3, #44	@ 0x2c
 8008488:	18fa      	adds	r2, r7, r3
 800848a:	4b5c      	ldr	r3, [pc, #368]	@ (80085fc <probe_sen5x+0x204>)
 800848c:	0011      	movs	r1, r2
 800848e:	0018      	movs	r0, r3
 8008490:	f015 ff90 	bl	801e3b4 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 8008494:	2556      	movs	r5, #86	@ 0x56
 8008496:	197c      	adds	r4, r7, r5
 8008498:	2354      	movs	r3, #84	@ 0x54
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	781a      	ldrb	r2, [r3, #0]
 800849e:	230c      	movs	r3, #12
 80084a0:	18fb      	adds	r3, r7, r3
 80084a2:	0011      	movs	r1, r2
 80084a4:	0018      	movs	r0, r3
 80084a6:	f000 fe33 	bl	8009110 <sen5x_get_product_name>
 80084aa:	0003      	movs	r3, r0
 80084ac:	8023      	strh	r3, [r4, #0]
  if (error) {
 80084ae:	197b      	adds	r3, r7, r5
 80084b0:	2200      	movs	r2, #0
 80084b2:	5e9b      	ldrsh	r3, [r3, r2]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00b      	beq.n	80084d0 <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 80084b8:	197b      	adds	r3, r7, r5
 80084ba:	2200      	movs	r2, #0
 80084bc:	5e9a      	ldrsh	r2, [r3, r2]
 80084be:	4b50      	ldr	r3, [pc, #320]	@ (8008600 <probe_sen5x+0x208>)
 80084c0:	0011      	movs	r1, r2
 80084c2:	0018      	movs	r0, r3
 80084c4:	f015 ff76 	bl	801e3b4 <iprintf>
      return error;
 80084c8:	197b      	adds	r3, r7, r5
 80084ca:	2200      	movs	r2, #0
 80084cc:	5e9b      	ldrsh	r3, [r3, r2]
 80084ce:	e08b      	b.n	80085e8 <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 80084d0:	230c      	movs	r3, #12
 80084d2:	18fa      	adds	r2, r7, r3
 80084d4:	4b4b      	ldr	r3, [pc, #300]	@ (8008604 <probe_sen5x+0x20c>)
 80084d6:	0011      	movs	r1, r2
 80084d8:	0018      	movs	r0, r3
 80084da:	f015 ff6b 	bl	801e3b4 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 80084de:	2656      	movs	r6, #86	@ 0x56
 80084e0:	19bc      	adds	r4, r7, r6
 80084e2:	2308      	movs	r3, #8
 80084e4:	18fd      	adds	r5, r7, r3
 80084e6:	2309      	movs	r3, #9
 80084e8:	18fa      	adds	r2, r7, r3
 80084ea:	230a      	movs	r3, #10
 80084ec:	18f9      	adds	r1, r7, r3
 80084ee:	230b      	movs	r3, #11
 80084f0:	18f8      	adds	r0, r7, r3
 80084f2:	1d7b      	adds	r3, r7, #5
 80084f4:	9302      	str	r3, [sp, #8]
 80084f6:	1dbb      	adds	r3, r7, #6
 80084f8:	9301      	str	r3, [sp, #4]
 80084fa:	1dfb      	adds	r3, r7, #7
 80084fc:	9300      	str	r3, [sp, #0]
 80084fe:	002b      	movs	r3, r5
 8008500:	f000 feb2 	bl	8009268 <sen5x_get_version>
 8008504:	0003      	movs	r3, r0
 8008506:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008508:	19bb      	adds	r3, r7, r6
 800850a:	2200      	movs	r2, #0
 800850c:	5e9b      	ldrsh	r3, [r3, r2]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008512:	19bb      	adds	r3, r7, r6
 8008514:	2200      	movs	r2, #0
 8008516:	5e9a      	ldrsh	r2, [r3, r2]
 8008518:	4b3b      	ldr	r3, [pc, #236]	@ (8008608 <probe_sen5x+0x210>)
 800851a:	0011      	movs	r1, r2
 800851c:	0018      	movs	r0, r3
 800851e:	f015 ff49 	bl	801e3b4 <iprintf>
      return error;
 8008522:	19bb      	adds	r3, r7, r6
 8008524:	2200      	movs	r2, #0
 8008526:	5e9b      	ldrsh	r3, [r3, r2]
 8008528:	e05e      	b.n	80085e8 <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 800852a:	230b      	movs	r3, #11
 800852c:	18fb      	adds	r3, r7, r3
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	0019      	movs	r1, r3
 8008532:	230a      	movs	r3, #10
 8008534:	18fb      	adds	r3, r7, r3
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	001a      	movs	r2, r3
 800853a:	2308      	movs	r3, #8
 800853c:	18fb      	adds	r3, r7, r3
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	001c      	movs	r4, r3
 8008542:	1dfb      	adds	r3, r7, #7
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	4831      	ldr	r0, [pc, #196]	@ (800860c <probe_sen5x+0x214>)
 8008548:	9300      	str	r3, [sp, #0]
 800854a:	0023      	movs	r3, r4
 800854c:	f015 ff32 	bl	801e3b4 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008550:	2300      	movs	r3, #0
 8008552:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008554:	264e      	movs	r6, #78	@ 0x4e
 8008556:	19bb      	adds	r3, r7, r6
 8008558:	2200      	movs	r2, #0
 800855a:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 800855c:	234c      	movs	r3, #76	@ 0x4c
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	2200      	movs	r2, #0
 8008562:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008564:	492a      	ldr	r1, [pc, #168]	@ (8008610 <probe_sen5x+0x218>)
 8008566:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008568:	f7f8 fd1a 	bl	8000fa0 <__aeabi_fmul>
 800856c:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 800856e:	1c18      	adds	r0, r3, #0
 8008570:	f7f9 f80e 	bl	8001590 <__aeabi_f2iz>
 8008574:	0003      	movs	r3, r0
 8008576:	b218      	sxth	r0, r3
 8008578:	2556      	movs	r5, #86	@ 0x56
 800857a:	197c      	adds	r4, r7, r5
 800857c:	234c      	movs	r3, #76	@ 0x4c
 800857e:	18fb      	adds	r3, r7, r3
 8008580:	881a      	ldrh	r2, [r3, #0]
 8008582:	19bb      	adds	r3, r7, r6
 8008584:	2100      	movs	r1, #0
 8008586:	5e5b      	ldrsh	r3, [r3, r1]
 8008588:	0019      	movs	r1, r3
 800858a:	f000 fd5d 	bl	8009048 <sen5x_set_temperature_offset_parameters>
 800858e:	0003      	movs	r3, r0
 8008590:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008592:	197b      	adds	r3, r7, r5
 8008594:	2200      	movs	r2, #0
 8008596:	5e9b      	ldrsh	r3, [r3, r2]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 800859c:	197b      	adds	r3, r7, r5
 800859e:	2200      	movs	r2, #0
 80085a0:	5e9b      	ldrsh	r3, [r3, r2]
 80085a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008614 <probe_sen5x+0x21c>)
 80085a4:	4913      	ldr	r1, [pc, #76]	@ (80085f4 <probe_sen5x+0x1fc>)
 80085a6:	2001      	movs	r0, #1
 80085a8:	f004 fc86 	bl	800ceb8 <CreateLine>
      return error;
 80085ac:	197b      	adds	r3, r7, r5
 80085ae:	2200      	movs	r2, #0
 80085b0:	5e9b      	ldrsh	r3, [r3, r2]
 80085b2:	e019      	b.n	80085e8 <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 80085b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80085b6:	f7fa ff55 	bl	8003464 <__aeabi_f2d>
 80085ba:	0002      	movs	r2, r0
 80085bc:	000b      	movs	r3, r1
 80085be:	4816      	ldr	r0, [pc, #88]	@ (8008618 <probe_sen5x+0x220>)
 80085c0:	4916      	ldr	r1, [pc, #88]	@ (800861c <probe_sen5x+0x224>)
 80085c2:	9200      	str	r2, [sp, #0]
 80085c4:	9301      	str	r3, [sp, #4]
 80085c6:	0002      	movs	r2, r0
 80085c8:	2002      	movs	r0, #2
 80085ca:	f004 fc75 	bl	800ceb8 <CreateLine>
  }
  sen5x_Power_Off();
 80085ce:	f7ff fefb 	bl	80083c8 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 80085d2:	f005 f80f 	bl	800d5f4 <HAL_GetTick>
 80085d6:	0003      	movs	r3, r0
 80085d8:	4a11      	ldr	r2, [pc, #68]	@ (8008620 <probe_sen5x+0x228>)
 80085da:	189a      	adds	r2, r3, r2
 80085dc:	4b11      	ldr	r3, [pc, #68]	@ (8008624 <probe_sen5x+0x22c>)
 80085de:	601a      	str	r2, [r3, #0]
  return error;
 80085e0:	2356      	movs	r3, #86	@ 0x56
 80085e2:	18fb      	adds	r3, r7, r3
 80085e4:	2200      	movs	r2, #0
 80085e6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80085e8:	0018      	movs	r0, r3
 80085ea:	46bd      	mov	sp, r7
 80085ec:	b017      	add	sp, #92	@ 0x5c
 80085ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085f0:	080225d4 	.word	0x080225d4
 80085f4:	08022600 	.word	0x08022600
 80085f8:	08022604 	.word	0x08022604
 80085fc:	08022634 	.word	0x08022634
 8008600:	08022648 	.word	0x08022648
 8008604:	08022678 	.word	0x08022678
 8008608:	0802268c 	.word	0x0802268c
 800860c:	080226b8 	.word	0x080226b8
 8008610:	43480000 	.word	0x43480000
 8008614:	080226dc 	.word	0x080226dc
 8008618:	0802271c 	.word	0x0802271c
 800861c:	08022754 	.word	0x08022754
 8008620:	000061a8 	.word	0x000061a8
 8008624:	200011e8 	.word	0x200011e8

08008628 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008628:	b590      	push	{r4, r7, lr}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 800862e:	1dbb      	adds	r3, r7, #6
 8008630:	2200      	movs	r2, #0
 8008632:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 8008634:	1dbc      	adds	r4, r7, #6
 8008636:	f000 fb93 	bl	8008d60 <sen5x_start_measurement>
 800863a:	0003      	movs	r3, r0
 800863c:	8023      	strh	r3, [r4, #0]
  if (error) {
 800863e:	1dbb      	adds	r3, r7, #6
 8008640:	2200      	movs	r2, #0
 8008642:	5e9b      	ldrsh	r3, [r3, r2]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d007      	beq.n	8008658 <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008648:	1dbb      	adds	r3, r7, #6
 800864a:	2200      	movs	r2, #0
 800864c:	5e9b      	ldrsh	r3, [r3, r2]
 800864e:	4a06      	ldr	r2, [pc, #24]	@ (8008668 <sen5x_lightup_measurement+0x40>)
 8008650:	4906      	ldr	r1, [pc, #24]	@ (800866c <sen5x_lightup_measurement+0x44>)
 8008652:	2001      	movs	r0, #1
 8008654:	f004 fc30 	bl	800ceb8 <CreateLine>
  }
  return error;
 8008658:	1dbb      	adds	r3, r7, #6
 800865a:	2200      	movs	r2, #0
 800865c:	5e9b      	ldrsh	r3, [r3, r2]
}
 800865e:	0018      	movs	r0, r3
 8008660:	46bd      	mov	sp, r7
 8008662:	b003      	add	sp, #12
 8008664:	bd90      	pop	{r4, r7, pc}
 8008666:	46c0      	nop			@ (mov r8, r8)
 8008668:	08022758 	.word	0x08022758
 800866c:	08022600 	.word	0x08022600

08008670 <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008670:	b590      	push	{r4, r7, lr}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008676:	1dbb      	adds	r3, r7, #6
 8008678:	2200      	movs	r2, #0
 800867a:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 800867c:	1dbc      	adds	r4, r7, #6
 800867e:	f000 fb9d 	bl	8008dbc <sen5x_stop_measurement>
 8008682:	0003      	movs	r3, r0
 8008684:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008686:	1dbb      	adds	r3, r7, #6
 8008688:	2200      	movs	r2, #0
 800868a:	5e9b      	ldrsh	r3, [r3, r2]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d007      	beq.n	80086a0 <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008690:	1dbb      	adds	r3, r7, #6
 8008692:	2200      	movs	r2, #0
 8008694:	5e9b      	ldrsh	r3, [r3, r2]
 8008696:	4a06      	ldr	r2, [pc, #24]	@ (80086b0 <sen5x_extinguish_measurement+0x40>)
 8008698:	4906      	ldr	r1, [pc, #24]	@ (80086b4 <sen5x_extinguish_measurement+0x44>)
 800869a:	2001      	movs	r0, #1
 800869c:	f004 fc0c 	bl	800ceb8 <CreateLine>
  }
  return error;
 80086a0:	1dbb      	adds	r3, r7, #6
 80086a2:	2200      	movs	r2, #0
 80086a4:	5e9b      	ldrsh	r3, [r3, r2]
}
 80086a6:	0018      	movs	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	b003      	add	sp, #12
 80086ac:	bd90      	pop	{r4, r7, pc}
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	08022788 	.word	0x08022788
 80086b4:	08022600 	.word	0x08022600

080086b8 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 80086b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086ba:	b08d      	sub	sp, #52	@ 0x34
 80086bc:	af04      	add	r7, sp, #16
 80086be:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 80086c0:	261e      	movs	r6, #30
 80086c2:	19bb      	adds	r3, r7, r6
 80086c4:	2200      	movs	r2, #0
 80086c6:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 80086c8:	19bc      	adds	r4, r7, r6
 80086ca:	2316      	movs	r3, #22
 80086cc:	18fd      	adds	r5, r7, r3
 80086ce:	2318      	movs	r3, #24
 80086d0:	18fa      	adds	r2, r7, r3
 80086d2:	231a      	movs	r3, #26
 80086d4:	18f9      	adds	r1, r7, r3
 80086d6:	231c      	movs	r3, #28
 80086d8:	18f8      	adds	r0, r7, r3
 80086da:	230e      	movs	r3, #14
 80086dc:	18fb      	adds	r3, r7, r3
 80086de:	9303      	str	r3, [sp, #12]
 80086e0:	2310      	movs	r3, #16
 80086e2:	18fb      	adds	r3, r7, r3
 80086e4:	9302      	str	r3, [sp, #8]
 80086e6:	2312      	movs	r3, #18
 80086e8:	18fb      	adds	r3, r7, r3
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	2314      	movs	r3, #20
 80086ee:	18fb      	adds	r3, r7, r3
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	002b      	movs	r3, r5
 80086f4:	f000 fbe4 	bl	8008ec0 <sen5x_read_measured_values>
 80086f8:	0003      	movs	r3, r0
 80086fa:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 80086fc:	19bb      	adds	r3, r7, r6
 80086fe:	2200      	movs	r2, #0
 8008700:	5e9b      	ldrsh	r3, [r3, r2]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <sen5x_read_measurement+0x56>
    return error;
 8008706:	19bb      	adds	r3, r7, r6
 8008708:	2200      	movs	r2, #0
 800870a:	5e9b      	ldrsh	r3, [r3, r2]
 800870c:	e034      	b.n	8008778 <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 800870e:	231c      	movs	r3, #28
 8008710:	18fb      	adds	r3, r7, r3
 8008712:	881a      	ldrh	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8008718:	211a      	movs	r1, #26
 800871a:	187b      	adds	r3, r7, r1
 800871c:	881a      	ldrh	r2, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8008722:	2318      	movs	r3, #24
 8008724:	18fb      	adds	r3, r7, r3
 8008726:	881a      	ldrh	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 800872c:	2016      	movs	r0, #22
 800872e:	183b      	adds	r3, r7, r0
 8008730:	881a      	ldrh	r2, [r3, #0]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8008736:	2314      	movs	r3, #20
 8008738:	18fb      	adds	r3, r7, r3
 800873a:	2200      	movs	r2, #0
 800873c:	5e9a      	ldrsh	r2, [r3, r2]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8008742:	2312      	movs	r3, #18
 8008744:	18fb      	adds	r3, r7, r3
 8008746:	2200      	movs	r2, #0
 8008748:	5e9a      	ldrsh	r2, [r3, r2]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 800874e:	2310      	movs	r3, #16
 8008750:	18fb      	adds	r3, r7, r3
 8008752:	2200      	movs	r2, #0
 8008754:	5e9a      	ldrsh	r2, [r3, r2]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 800875a:	230e      	movs	r3, #14
 800875c:	18fb      	adds	r3, r7, r3
 800875e:	2200      	movs	r2, #0
 8008760:	5e9a      	ldrsh	r2, [r3, r2]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 8008766:	187b      	adds	r3, r7, r1
 8008768:	881a      	ldrh	r2, [r3, #0]
 800876a:	183b      	adds	r3, r7, r0
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	0019      	movs	r1, r3
 8008770:	0010      	movs	r0, r2
 8008772:	f7fb f8db 	bl	800392c <setPMs>
  return 0;
 8008776:	2300      	movs	r3, #0
}
 8008778:	0018      	movs	r0, r3
 800877a:	46bd      	mov	sp, r7
 800877c:	b009      	add	sp, #36	@ 0x24
 800877e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008780 <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 8008786:	1dbb      	adds	r3, r7, #6
 8008788:	2200      	movs	r2, #0
 800878a:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
    if (sen5x_read_measurement(&sen5x_data)) {
 800878c:	4b6b      	ldr	r3, [pc, #428]	@ (800893c <sen5x_measurement+0x1bc>)
 800878e:	0018      	movs	r0, r3
 8008790:	f7ff ff92 	bl	80086b8 <sen5x_read_measurement>
 8008794:	1e03      	subs	r3, r0, #0
 8008796:	d008      	beq.n	80087aa <sen5x_measurement+0x2a>
      Error("Error executing sen5x_read_measured_values(): %i", error);
 8008798:	1dbb      	adds	r3, r7, #6
 800879a:	2200      	movs	r2, #0
 800879c:	5e9b      	ldrsh	r3, [r3, r2]
 800879e:	4a68      	ldr	r2, [pc, #416]	@ (8008940 <sen5x_measurement+0x1c0>)
 80087a0:	4968      	ldr	r1, [pc, #416]	@ (8008944 <sen5x_measurement+0x1c4>)
 80087a2:	2001      	movs	r0, #1
 80087a4:	f004 fb88 	bl	800ceb8 <CreateLine>
 80087a8:	e0c1      	b.n	800892e <sen5x_measurement+0x1ae>
    }
    else {
      if (sen5xSamples == 0) {
 80087aa:	4b67      	ldr	r3, [pc, #412]	@ (8008948 <sen5x_measurement+0x1c8>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <sen5x_measurement+0x36>
      return 0; // first sample reads zero's
 80087b2:	2300      	movs	r3, #0
 80087b4:	e0be      	b.n	8008934 <sen5x_measurement+0x1b4>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 80087b6:	4b61      	ldr	r3, [pc, #388]	@ (800893c <sen5x_measurement+0x1bc>)
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7f8 ff08 	bl	80015d0 <__aeabi_i2f>
 80087c0:	1c03      	adds	r3, r0, #0
 80087c2:	4962      	ldr	r1, [pc, #392]	@ (800894c <sen5x_measurement+0x1cc>)
 80087c4:	1c18      	adds	r0, r3, #0
 80087c6:	f7f8 fa05 	bl	8000bd4 <__aeabi_fdiv>
 80087ca:	1c03      	adds	r3, r0, #0
 80087cc:	1c18      	adds	r0, r3, #0
 80087ce:	f7fa fe49 	bl	8003464 <__aeabi_f2d>
 80087d2:	0002      	movs	r2, r0
 80087d4:	000b      	movs	r3, r1
 80087d6:	495e      	ldr	r1, [pc, #376]	@ (8008950 <sen5x_measurement+0x1d0>)
 80087d8:	0008      	movs	r0, r1
 80087da:	f015 fdeb 	bl	801e3b4 <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 80087de:	4b57      	ldr	r3, [pc, #348]	@ (800893c <sen5x_measurement+0x1bc>)
 80087e0:	885b      	ldrh	r3, [r3, #2]
 80087e2:	0018      	movs	r0, r3
 80087e4:	f7f8 fef4 	bl	80015d0 <__aeabi_i2f>
 80087e8:	1c03      	adds	r3, r0, #0
 80087ea:	4958      	ldr	r1, [pc, #352]	@ (800894c <sen5x_measurement+0x1cc>)
 80087ec:	1c18      	adds	r0, r3, #0
 80087ee:	f7f8 f9f1 	bl	8000bd4 <__aeabi_fdiv>
 80087f2:	1c03      	adds	r3, r0, #0
 80087f4:	1c18      	adds	r0, r3, #0
 80087f6:	f7fa fe35 	bl	8003464 <__aeabi_f2d>
 80087fa:	0002      	movs	r2, r0
 80087fc:	000b      	movs	r3, r1
 80087fe:	4955      	ldr	r1, [pc, #340]	@ (8008954 <sen5x_measurement+0x1d4>)
 8008800:	0008      	movs	r0, r1
 8008802:	f015 fdd7 	bl	801e3b4 <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8008806:	4b4d      	ldr	r3, [pc, #308]	@ (800893c <sen5x_measurement+0x1bc>)
 8008808:	889b      	ldrh	r3, [r3, #4]
 800880a:	0018      	movs	r0, r3
 800880c:	f7f8 fee0 	bl	80015d0 <__aeabi_i2f>
 8008810:	1c03      	adds	r3, r0, #0
 8008812:	494e      	ldr	r1, [pc, #312]	@ (800894c <sen5x_measurement+0x1cc>)
 8008814:	1c18      	adds	r0, r3, #0
 8008816:	f7f8 f9dd 	bl	8000bd4 <__aeabi_fdiv>
 800881a:	1c03      	adds	r3, r0, #0
 800881c:	1c18      	adds	r0, r3, #0
 800881e:	f7fa fe21 	bl	8003464 <__aeabi_f2d>
 8008822:	0002      	movs	r2, r0
 8008824:	000b      	movs	r3, r1
 8008826:	494c      	ldr	r1, [pc, #304]	@ (8008958 <sen5x_measurement+0x1d8>)
 8008828:	0008      	movs	r0, r1
 800882a:	f015 fdc3 	bl	801e3b4 <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 800882e:	4b43      	ldr	r3, [pc, #268]	@ (800893c <sen5x_measurement+0x1bc>)
 8008830:	88db      	ldrh	r3, [r3, #6]
 8008832:	0018      	movs	r0, r3
 8008834:	f7f8 fecc 	bl	80015d0 <__aeabi_i2f>
 8008838:	1c03      	adds	r3, r0, #0
 800883a:	4944      	ldr	r1, [pc, #272]	@ (800894c <sen5x_measurement+0x1cc>)
 800883c:	1c18      	adds	r0, r3, #0
 800883e:	f7f8 f9c9 	bl	8000bd4 <__aeabi_fdiv>
 8008842:	1c03      	adds	r3, r0, #0
 8008844:	1c18      	adds	r0, r3, #0
 8008846:	f7fa fe0d 	bl	8003464 <__aeabi_f2d>
 800884a:	0002      	movs	r2, r0
 800884c:	000b      	movs	r3, r1
 800884e:	4943      	ldr	r1, [pc, #268]	@ (800895c <sen5x_measurement+0x1dc>)
 8008850:	0008      	movs	r0, r1
 8008852:	f015 fdaf 	bl	801e3b4 <iprintf>
    if (sen5x_data.ambient_humidity != 0x7fff) {
 8008856:	4b39      	ldr	r3, [pc, #228]	@ (800893c <sen5x_measurement+0x1bc>)
 8008858:	2208      	movs	r2, #8
 800885a:	5e9b      	ldrsh	r3, [r3, r2]
 800885c:	4a40      	ldr	r2, [pc, #256]	@ (8008960 <sen5x_measurement+0x1e0>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d014      	beq.n	800888c <sen5x_measurement+0x10c>
      printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8008862:	4b36      	ldr	r3, [pc, #216]	@ (800893c <sen5x_measurement+0x1bc>)
 8008864:	2208      	movs	r2, #8
 8008866:	5e9b      	ldrsh	r3, [r3, r2]
 8008868:	0018      	movs	r0, r3
 800886a:	f7f8 feb1 	bl	80015d0 <__aeabi_i2f>
 800886e:	1c03      	adds	r3, r0, #0
 8008870:	493c      	ldr	r1, [pc, #240]	@ (8008964 <sen5x_measurement+0x1e4>)
 8008872:	1c18      	adds	r0, r3, #0
 8008874:	f7f8 f9ae 	bl	8000bd4 <__aeabi_fdiv>
 8008878:	1c03      	adds	r3, r0, #0
 800887a:	1c18      	adds	r0, r3, #0
 800887c:	f7fa fdf2 	bl	8003464 <__aeabi_f2d>
 8008880:	0002      	movs	r2, r0
 8008882:	000b      	movs	r3, r1
 8008884:	4938      	ldr	r1, [pc, #224]	@ (8008968 <sen5x_measurement+0x1e8>)
 8008886:	0008      	movs	r0, r1
 8008888:	f015 fd94 	bl	801e3b4 <iprintf>
    }
    if (sen5x_data.ambient_temperature != 0x7fff) {
 800888c:	4b2b      	ldr	r3, [pc, #172]	@ (800893c <sen5x_measurement+0x1bc>)
 800888e:	220a      	movs	r2, #10
 8008890:	5e9b      	ldrsh	r3, [r3, r2]
 8008892:	4a33      	ldr	r2, [pc, #204]	@ (8008960 <sen5x_measurement+0x1e0>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d014      	beq.n	80088c2 <sen5x_measurement+0x142>
      printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8008898:	4b28      	ldr	r3, [pc, #160]	@ (800893c <sen5x_measurement+0x1bc>)
 800889a:	220a      	movs	r2, #10
 800889c:	5e9b      	ldrsh	r3, [r3, r2]
 800889e:	0018      	movs	r0, r3
 80088a0:	f7f8 fe96 	bl	80015d0 <__aeabi_i2f>
 80088a4:	1c03      	adds	r3, r0, #0
 80088a6:	4931      	ldr	r1, [pc, #196]	@ (800896c <sen5x_measurement+0x1ec>)
 80088a8:	1c18      	adds	r0, r3, #0
 80088aa:	f7f8 f993 	bl	8000bd4 <__aeabi_fdiv>
 80088ae:	1c03      	adds	r3, r0, #0
 80088b0:	1c18      	adds	r0, r3, #0
 80088b2:	f7fa fdd7 	bl	8003464 <__aeabi_f2d>
 80088b6:	0002      	movs	r2, r0
 80088b8:	000b      	movs	r3, r1
 80088ba:	492d      	ldr	r1, [pc, #180]	@ (8008970 <sen5x_measurement+0x1f0>)
 80088bc:	0008      	movs	r0, r1
 80088be:	f015 fd79 	bl	801e3b4 <iprintf>
    }
    if (sen5x_data.voc_index != 0x7fff) {
 80088c2:	4b1e      	ldr	r3, [pc, #120]	@ (800893c <sen5x_measurement+0x1bc>)
 80088c4:	220c      	movs	r2, #12
 80088c6:	5e9b      	ldrsh	r3, [r3, r2]
 80088c8:	4a25      	ldr	r2, [pc, #148]	@ (8008960 <sen5x_measurement+0x1e0>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d014      	beq.n	80088f8 <sen5x_measurement+0x178>
      printf("Voc index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 80088ce:	4b1b      	ldr	r3, [pc, #108]	@ (800893c <sen5x_measurement+0x1bc>)
 80088d0:	220c      	movs	r2, #12
 80088d2:	5e9b      	ldrsh	r3, [r3, r2]
 80088d4:	0018      	movs	r0, r3
 80088d6:	f7f8 fe7b 	bl	80015d0 <__aeabi_i2f>
 80088da:	1c03      	adds	r3, r0, #0
 80088dc:	491b      	ldr	r1, [pc, #108]	@ (800894c <sen5x_measurement+0x1cc>)
 80088de:	1c18      	adds	r0, r3, #0
 80088e0:	f7f8 f978 	bl	8000bd4 <__aeabi_fdiv>
 80088e4:	1c03      	adds	r3, r0, #0
 80088e6:	1c18      	adds	r0, r3, #0
 80088e8:	f7fa fdbc 	bl	8003464 <__aeabi_f2d>
 80088ec:	0002      	movs	r2, r0
 80088ee:	000b      	movs	r3, r1
 80088f0:	4920      	ldr	r1, [pc, #128]	@ (8008974 <sen5x_measurement+0x1f4>)
 80088f2:	0008      	movs	r0, r1
 80088f4:	f015 fd5e 	bl	801e3b4 <iprintf>
    }
    if (sen5x_data.nox_index != 0x7fff) {
 80088f8:	4b10      	ldr	r3, [pc, #64]	@ (800893c <sen5x_measurement+0x1bc>)
 80088fa:	220e      	movs	r2, #14
 80088fc:	5e9b      	ldrsh	r3, [r3, r2]
 80088fe:	4a18      	ldr	r2, [pc, #96]	@ (8008960 <sen5x_measurement+0x1e0>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d014      	beq.n	800892e <sen5x_measurement+0x1ae>
      printf("Nox index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8008904:	4b0d      	ldr	r3, [pc, #52]	@ (800893c <sen5x_measurement+0x1bc>)
 8008906:	220e      	movs	r2, #14
 8008908:	5e9b      	ldrsh	r3, [r3, r2]
 800890a:	0018      	movs	r0, r3
 800890c:	f7f8 fe60 	bl	80015d0 <__aeabi_i2f>
 8008910:	1c03      	adds	r3, r0, #0
 8008912:	490e      	ldr	r1, [pc, #56]	@ (800894c <sen5x_measurement+0x1cc>)
 8008914:	1c18      	adds	r0, r3, #0
 8008916:	f7f8 f95d 	bl	8000bd4 <__aeabi_fdiv>
 800891a:	1c03      	adds	r3, r0, #0
 800891c:	1c18      	adds	r0, r3, #0
 800891e:	f7fa fda1 	bl	8003464 <__aeabi_f2d>
 8008922:	0002      	movs	r2, r0
 8008924:	000b      	movs	r3, r1
 8008926:	4914      	ldr	r1, [pc, #80]	@ (8008978 <sen5x_measurement+0x1f8>)
 8008928:	0008      	movs	r0, r1
 800892a:	f015 fd43 	bl	801e3b4 <iprintf>
    }
  }
  return error;
 800892e:	1dbb      	adds	r3, r7, #6
 8008930:	2200      	movs	r2, #0
 8008932:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008934:	0018      	movs	r0, r3
 8008936:	46bd      	mov	sp, r7
 8008938:	b002      	add	sp, #8
 800893a:	bd80      	pop	{r7, pc}
 800893c:	200011f0 	.word	0x200011f0
 8008940:	080227b8 	.word	0x080227b8
 8008944:	08022600 	.word	0x08022600
 8008948:	200011ec 	.word	0x200011ec
 800894c:	41200000 	.word	0x41200000
 8008950:	080227ec 	.word	0x080227ec
 8008954:	08022818 	.word	0x08022818
 8008958:	08022844 	.word	0x08022844
 800895c:	08022870 	.word	0x08022870
 8008960:	00007fff 	.word	0x00007fff
 8008964:	42c80000 	.word	0x42c80000
 8008968:	0802289c 	.word	0x0802289c
 800896c:	43480000 	.word	0x43480000
 8008970:	080228bc 	.word	0x080228bc
 8008974:	080228dc 	.word	0x080228dc
 8008978:	080228f0 	.word	0x080228f0

0800897c <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 800897c:	b590      	push	{r4, r7, lr}
 800897e:	b085      	sub	sp, #20
 8008980:	af02      	add	r7, sp, #8
 8008982:	6039      	str	r1, [r7, #0]
 8008984:	0011      	movs	r1, r2
 8008986:	1dfb      	adds	r3, r7, #7
 8008988:	1c02      	adds	r2, r0, #0
 800898a:	701a      	strb	r2, [r3, #0]
 800898c:	1d3b      	adds	r3, r7, #4
 800898e:	1c0a      	adds	r2, r1, #0
 8008990:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8008992:	1dfb      	adds	r3, r7, #7
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	b29b      	uxth	r3, r3
 8008998:	18db      	adds	r3, r3, r3
 800899a:	b299      	uxth	r1, r3
 800899c:	1d3b      	adds	r3, r7, #4
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	4805      	ldr	r0, [pc, #20]	@ (80089b8 <sensirion_i2c_hal_read+0x3c>)
 80089a4:	2464      	movs	r4, #100	@ 0x64
 80089a6:	9400      	str	r4, [sp, #0]
 80089a8:	f006 fa3e 	bl	800ee28 <HAL_I2C_Master_Receive>
 80089ac:	0003      	movs	r3, r0
 80089ae:	b25b      	sxtb	r3, r3
}
 80089b0:	0018      	movs	r0, r3
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b003      	add	sp, #12
 80089b6:	bd90      	pop	{r4, r7, pc}
 80089b8:	20000d94 	.word	0x20000d94

080089bc <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b085      	sub	sp, #20
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	6039      	str	r1, [r7, #0]
 80089c4:	0011      	movs	r1, r2
 80089c6:	1dfb      	adds	r3, r7, #7
 80089c8:	1c02      	adds	r2, r0, #0
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	1d3b      	adds	r3, r7, #4
 80089ce:	1c0a      	adds	r2, r1, #0
 80089d0:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 80089d2:	1dfb      	adds	r3, r7, #7
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	18db      	adds	r3, r3, r3
 80089da:	b299      	uxth	r1, r3
 80089dc:	1d3b      	adds	r3, r7, #4
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	4805      	ldr	r0, [pc, #20]	@ (80089f8 <sensirion_i2c_hal_write+0x3c>)
 80089e4:	2464      	movs	r4, #100	@ 0x64
 80089e6:	9400      	str	r4, [sp, #0]
 80089e8:	f006 f916 	bl	800ec18 <HAL_I2C_Master_Transmit>
 80089ec:	0003      	movs	r3, r0
 80089ee:	b25b      	sxtb	r3, r3
}
 80089f0:	0018      	movs	r0, r3
 80089f2:	46bd      	mov	sp, r7
 80089f4:	b003      	add	sp, #12
 80089f6:	bd90      	pop	{r4, r7, pc}
 80089f8:	20000d94 	.word	0x20000d94

080089fc <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	22fa      	movs	r2, #250	@ 0xfa
 8008a08:	0091      	lsls	r1, r2, #2
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f7f7 fbca 	bl	80001a4 <__udivsi3>
 8008a10:	0003      	movs	r3, r0
 8008a12:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	22fa      	movs	r2, #250	@ 0xfa
 8008a18:	0091      	lsls	r1, r2, #2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f7f7 fc48 	bl	80002b0 <__aeabi_uidivmod>
 8008a20:	1e0b      	subs	r3, r1, #0
 8008a22:	d002      	beq.n	8008a2a <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3301      	adds	r3, #1
 8008a28:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	f004 fdeb 	bl	800d608 <HAL_Delay>
}
 8008a32:	46c0      	nop			@ (mov r8, r8)
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b004      	add	sp, #16
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8008a46:	1d3b      	adds	r3, r7, #4
 8008a48:	0018      	movs	r0, r3
 8008a4a:	f000 fc79 	bl	8009340 <sen5x_read_device_status>
 8008a4e:	1e03      	subs	r3, r0, #0
 8008a50:	d005      	beq.n	8008a5e <sen5x_check_for_errors+0x22>
    Error("Error reading sen5x device status register");
 8008a52:	4a2a      	ldr	r2, [pc, #168]	@ (8008afc <sen5x_check_for_errors+0xc0>)
 8008a54:	4b2a      	ldr	r3, [pc, #168]	@ (8008b00 <sen5x_check_for_errors+0xc4>)
 8008a56:	0019      	movs	r1, r3
 8008a58:	2001      	movs	r0, #1
 8008a5a:	f004 fa2d 	bl	800ceb8 <CreateLine>
  }
  if (device_status == 0) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d107      	bne.n	8008a74 <sen5x_check_for_errors+0x38>
    Debug("sen5x operates normal");
 8008a64:	4a27      	ldr	r2, [pc, #156]	@ (8008b04 <sen5x_check_for_errors+0xc8>)
 8008a66:	4b28      	ldr	r3, [pc, #160]	@ (8008b08 <sen5x_check_for_errors+0xcc>)
 8008a68:	0019      	movs	r1, r3
 8008a6a:	2003      	movs	r0, #3
 8008a6c:	f004 fa24 	bl	800ceb8 <CreateLine>
    return 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e03e      	b.n	8008af2 <sen5x_check_for_errors+0xb6>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	2380      	movs	r3, #128	@ 0x80
 8008a78:	039b      	lsls	r3, r3, #14
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	d005      	beq.n	8008a8a <sen5x_check_for_errors+0x4e>
    Debug("sen5x Fan speed out of range");
 8008a7e:	4a23      	ldr	r2, [pc, #140]	@ (8008b0c <sen5x_check_for_errors+0xd0>)
 8008a80:	4b21      	ldr	r3, [pc, #132]	@ (8008b08 <sen5x_check_for_errors+0xcc>)
 8008a82:	0019      	movs	r1, r3
 8008a84:	2003      	movs	r0, #3
 8008a86:	f004 fa17 	bl	800ceb8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	2380      	movs	r3, #128	@ 0x80
 8008a8e:	031b      	lsls	r3, r3, #12
 8008a90:	4013      	ands	r3, r2
 8008a92:	d005      	beq.n	8008aa0 <sen5x_check_for_errors+0x64>
    Debug("sen5x Fan cleaning active");
 8008a94:	4a1e      	ldr	r2, [pc, #120]	@ (8008b10 <sen5x_check_for_errors+0xd4>)
 8008a96:	4b1c      	ldr	r3, [pc, #112]	@ (8008b08 <sen5x_check_for_errors+0xcc>)
 8008a98:	0019      	movs	r1, r3
 8008a9a:	2003      	movs	r0, #3
 8008a9c:	f004 fa0c 	bl	800ceb8 <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2280      	movs	r2, #128	@ 0x80
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	d005      	beq.n	8008ab4 <sen5x_check_for_errors+0x78>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8008aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8008b14 <sen5x_check_for_errors+0xd8>)
 8008aaa:	4b17      	ldr	r3, [pc, #92]	@ (8008b08 <sen5x_check_for_errors+0xcc>)
 8008aac:	0019      	movs	r1, r3
 8008aae:	2003      	movs	r0, #3
 8008ab0:	f004 fa02 	bl	800ceb8 <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2240      	movs	r2, #64	@ 0x40
 8008ab8:	4013      	ands	r3, r2
 8008aba:	d005      	beq.n	8008ac8 <sen5x_check_for_errors+0x8c>
    Debug("sen5x RHT communication error");
 8008abc:	4a16      	ldr	r2, [pc, #88]	@ (8008b18 <sen5x_check_for_errors+0xdc>)
 8008abe:	4b12      	ldr	r3, [pc, #72]	@ (8008b08 <sen5x_check_for_errors+0xcc>)
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	2003      	movs	r0, #3
 8008ac4:	f004 f9f8 	bl	800ceb8 <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2220      	movs	r2, #32
 8008acc:	4013      	ands	r3, r2
 8008ace:	d005      	beq.n	8008adc <sen5x_check_for_errors+0xa0>
    Debug("sen5x Laser failure");
 8008ad0:	4a12      	ldr	r2, [pc, #72]	@ (8008b1c <sen5x_check_for_errors+0xe0>)
 8008ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b08 <sen5x_check_for_errors+0xcc>)
 8008ad4:	0019      	movs	r1, r3
 8008ad6:	2003      	movs	r0, #3
 8008ad8:	f004 f9ee 	bl	800ceb8 <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2210      	movs	r2, #16
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	d005      	beq.n	8008af0 <sen5x_check_for_errors+0xb4>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8008ae4:	4a0e      	ldr	r2, [pc, #56]	@ (8008b20 <sen5x_check_for_errors+0xe4>)
 8008ae6:	4b08      	ldr	r3, [pc, #32]	@ (8008b08 <sen5x_check_for_errors+0xcc>)
 8008ae8:	0019      	movs	r1, r3
 8008aea:	2003      	movs	r0, #3
 8008aec:	f004 f9e4 	bl	800ceb8 <CreateLine>
  }
  return 1;
 8008af0:	2301      	movs	r3, #1
}
 8008af2:	0018      	movs	r0, r3
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b002      	add	sp, #8
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	46c0      	nop			@ (mov r8, r8)
 8008afc:	08022904 	.word	0x08022904
 8008b00:	08022600 	.word	0x08022600
 8008b04:	08022930 	.word	0x08022930
 8008b08:	08022948 	.word	0x08022948
 8008b0c:	0802294c 	.word	0x0802294c
 8008b10:	0802296c 	.word	0x0802296c
 8008b14:	08022988 	.word	0x08022988
 8008b18:	080229ac 	.word	0x080229ac
 8008b1c:	080229cc 	.word	0x080229cc
 8008b20:	080229e0 	.word	0x080229e0

08008b24 <sen5x_statemachine>:

void sen5x_statemachine(uint8_t delayfactor) {
 8008b24:	b590      	push	{r4, r7, lr}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	0002      	movs	r2, r0
 8008b2c:	1dfb      	adds	r3, r7, #7
 8008b2e:	701a      	strb	r2, [r3, #0]
  bool data_ready = false;
 8008b30:	230f      	movs	r3, #15
 8008b32:	18fb      	adds	r3, r7, r3
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
  if (delayfactor == USB_PLUGGED_IN) {
 8008b38:	1dfb      	adds	r3, r7, #7
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d103      	bne.n	8008b48 <sen5x_statemachine+0x24>
    delayfactor =100;
 8008b40:	1dfb      	adds	r3, r7, #7
 8008b42:	2264      	movs	r2, #100	@ 0x64
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	e002      	b.n	8008b4e <sen5x_statemachine+0x2a>
  }
  else {
    delayfactor = 1;
 8008b48:	1dfb      	adds	r3, r7, #7
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	701a      	strb	r2, [r3, #0]
  }
  if (TimestampIsReached(sen5xReadTimer)) {
 8008b4e:	4b71      	ldr	r3, [pc, #452]	@ (8008d14 <sen5x_statemachine+0x1f0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	0018      	movs	r0, r3
 8008b54:	f004 f95a 	bl	800ce0c <TimestampIsReached>
 8008b58:	1e03      	subs	r3, r0, #0
 8008b5a:	d100      	bne.n	8008b5e <sen5x_statemachine+0x3a>
 8008b5c:	e0d5      	b.n	8008d0a <sen5x_statemachine+0x1e6>
    switch (samplesState) {
 8008b5e:	4b6e      	ldr	r3, [pc, #440]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b05      	cmp	r3, #5
 8008b64:	d900      	bls.n	8008b68 <sen5x_statemachine+0x44>
 8008b66:	e0d0      	b.n	8008d0a <sen5x_statemachine+0x1e6>
 8008b68:	009a      	lsls	r2, r3, #2
 8008b6a:	4b6c      	ldr	r3, [pc, #432]	@ (8008d1c <sen5x_statemachine+0x1f8>)
 8008b6c:	18d3      	adds	r3, r2, r3
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 8008b72:	4a6b      	ldr	r2, [pc, #428]	@ (8008d20 <sen5x_statemachine+0x1fc>)
 8008b74:	4b6b      	ldr	r3, [pc, #428]	@ (8008d24 <sen5x_statemachine+0x200>)
 8008b76:	0019      	movs	r1, r3
 8008b78:	2001      	movs	r0, #1
 8008b7a:	f004 f99d 	bl	800ceb8 <CreateLine>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8008b7e:	f004 fd39 	bl	800d5f4 <HAL_GetTick>
 8008b82:	0004      	movs	r4, r0
 8008b84:	1dfb      	adds	r3, r7, #7
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	0019      	movs	r1, r3
 8008b8a:	4867      	ldr	r0, [pc, #412]	@ (8008d28 <sen5x_statemachine+0x204>)
 8008b8c:	f7f7 fb94 	bl	80002b8 <__divsi3>
 8008b90:	0003      	movs	r3, r0
 8008b92:	18e2      	adds	r2, r4, r3
 8008b94:	4b5f      	ldr	r3, [pc, #380]	@ (8008d14 <sen5x_statemachine+0x1f0>)
 8008b96:	601a      	str	r2, [r3, #0]
      break;
 8008b98:	e0b7      	b.n	8008d0a <sen5x_statemachine+0x1e6>
    case LIGHT_OUT:
//      Debug(" state is LIGHT_OUT");
      sen5x_Power_On();
 8008b9a:	f7ff fc03 	bl	80083a4 <sen5x_Power_On>
      Debug("sen5x powered on, warming up for 30 sec.");
 8008b9e:	4a63      	ldr	r2, [pc, #396]	@ (8008d2c <sen5x_statemachine+0x208>)
 8008ba0:	4b63      	ldr	r3, [pc, #396]	@ (8008d30 <sen5x_statemachine+0x20c>)
 8008ba2:	0019      	movs	r1, r3
 8008ba4:	2003      	movs	r0, #3
 8008ba6:	f004 f987 	bl	800ceb8 <CreateLine>
      if (sen5x_lightup_measurement()) {
 8008baa:	f7ff fd3d 	bl	8008628 <sen5x_lightup_measurement>
 8008bae:	1e03      	subs	r3, r0, #0
 8008bb0:	d005      	beq.n	8008bbe <sen5x_statemachine+0x9a>
        Error("Error executing sen5x_lightup_measurement()");
 8008bb2:	4a60      	ldr	r2, [pc, #384]	@ (8008d34 <sen5x_statemachine+0x210>)
 8008bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8008d24 <sen5x_statemachine+0x200>)
 8008bb6:	0019      	movs	r1, r3
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f004 f97d 	bl	800ceb8 <CreateLine>
      }
      samplesState = CHECK_SEN5X;
 8008bbe:	4b56      	ldr	r3, [pc, #344]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008bc0:	2203      	movs	r2, #3
 8008bc2:	701a      	strb	r2, [r3, #0]
      sen5xReadTimer = HAL_GetTick() + 30000;
 8008bc4:	f004 fd16 	bl	800d5f4 <HAL_GetTick>
 8008bc8:	0003      	movs	r3, r0
 8008bca:	4a5b      	ldr	r2, [pc, #364]	@ (8008d38 <sen5x_statemachine+0x214>)
 8008bcc:	189a      	adds	r2, r3, r2
 8008bce:	4b51      	ldr	r3, [pc, #324]	@ (8008d14 <sen5x_statemachine+0x1f0>)
 8008bd0:	601a      	str	r2, [r3, #0]
      break;
 8008bd2:	e09a      	b.n	8008d0a <sen5x_statemachine+0x1e6>
    case CHECK_SEN5X:
      samplesState = LIGHT_ON;
 8008bd4:	4b50      	ldr	r3, [pc, #320]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 8008bda:	4b58      	ldr	r3, [pc, #352]	@ (8008d3c <sen5x_statemachine+0x218>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d905      	bls.n	8008bee <sen5x_statemachine+0xca>
        samplesState = S5X_DISABLED;
 8008be2:	4b4d      	ldr	r3, [pc, #308]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 8008be8:	f7ff fbee 	bl	80083c8 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 8008bec:	e08c      	b.n	8008d08 <sen5x_statemachine+0x1e4>
        if (sen5x_check_for_errors()) {
 8008bee:	f7ff ff25 	bl	8008a3c <sen5x_check_for_errors>
 8008bf2:	1e03      	subs	r3, r0, #0
 8008bf4:	d100      	bne.n	8008bf8 <sen5x_statemachine+0xd4>
 8008bf6:	e087      	b.n	8008d08 <sen5x_statemachine+0x1e4>
          if (sen5x_device_reset()) {
 8008bf8:	f000 fbf4 	bl	80093e4 <sen5x_device_reset>
 8008bfc:	1e03      	subs	r3, r0, #0
 8008bfe:	d006      	beq.n	8008c0e <sen5x_statemachine+0xea>
            Error("Error resetting sen5x");
 8008c00:	4a4f      	ldr	r2, [pc, #316]	@ (8008d40 <sen5x_statemachine+0x21c>)
 8008c02:	4b48      	ldr	r3, [pc, #288]	@ (8008d24 <sen5x_statemachine+0x200>)
 8008c04:	0019      	movs	r1, r3
 8008c06:	2001      	movs	r0, #1
 8008c08:	f004 f956 	bl	800ceb8 <CreateLine>
 8008c0c:	e005      	b.n	8008c1a <sen5x_statemachine+0xf6>
            Info("sen5x reset executed");
 8008c0e:	4a4d      	ldr	r2, [pc, #308]	@ (8008d44 <sen5x_statemachine+0x220>)
 8008c10:	4b4d      	ldr	r3, [pc, #308]	@ (8008d48 <sen5x_statemachine+0x224>)
 8008c12:	0019      	movs	r1, r3
 8008c14:	2002      	movs	r0, #2
 8008c16:	f004 f94f 	bl	800ceb8 <CreateLine>
          sen5xErrors++;
 8008c1a:	4b48      	ldr	r3, [pc, #288]	@ (8008d3c <sen5x_statemachine+0x218>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	4b46      	ldr	r3, [pc, #280]	@ (8008d3c <sen5x_statemachine+0x218>)
 8008c24:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8008c26:	f004 fce5 	bl	800d5f4 <HAL_GetTick>
 8008c2a:	0003      	movs	r3, r0
 8008c2c:	3396      	adds	r3, #150	@ 0x96
 8008c2e:	001a      	movs	r2, r3
 8008c30:	4b38      	ldr	r3, [pc, #224]	@ (8008d14 <sen5x_statemachine+0x1f0>)
 8008c32:	601a      	str	r2, [r3, #0]
      break;
 8008c34:	e068      	b.n	8008d08 <sen5x_statemachine+0x1e4>
    case LIGHT_ON:
//      Debug(" state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 8008c36:	240f      	movs	r4, #15
 8008c38:	193b      	adds	r3, r7, r4
 8008c3a:	0018      	movs	r0, r3
 8008c3c:	f000 f8ee 	bl	8008e1c <sen5x_read_data_ready>
      if (data_ready) {
 8008c40:	193b      	adds	r3, r7, r4
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d026      	beq.n	8008c96 <sen5x_statemachine+0x172>
        if (sen5x_measurement()) {
 8008c48:	f7ff fd9a 	bl	8008780 <sen5x_measurement>
 8008c4c:	1e03      	subs	r3, r0, #0
 8008c4e:	d005      	beq.n	8008c5c <sen5x_statemachine+0x138>
          Error("Error executing sen5x_measurement()");
 8008c50:	4a3e      	ldr	r2, [pc, #248]	@ (8008d4c <sen5x_statemachine+0x228>)
 8008c52:	4b34      	ldr	r3, [pc, #208]	@ (8008d24 <sen5x_statemachine+0x200>)
 8008c54:	0019      	movs	r1, r3
 8008c56:	2001      	movs	r0, #1
 8008c58:	f004 f92e 	bl	800ceb8 <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 8008c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d50 <sen5x_statemachine+0x22c>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d012      	beq.n	8008c8a <sen5x_statemachine+0x166>
          if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 8008c64:	f7fd fcae 	bl	80065c4 <RTC_GetWeekday>
 8008c68:	0003      	movs	r3, r0
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d10a      	bne.n	8008c84 <sen5x_statemachine+0x160>
 8008c6e:	4b39      	ldr	r3, [pc, #228]	@ (8008d54 <sen5x_statemachine+0x230>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2201      	movs	r2, #1
 8008c74:	4053      	eors	r3, r2
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d003      	beq.n	8008c84 <sen5x_statemachine+0x160>
            samplesState = CLEAN_FAN;
 8008c7c:	4b26      	ldr	r3, [pc, #152]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008c7e:	2204      	movs	r2, #4
 8008c80:	701a      	strb	r2, [r3, #0]
 8008c82:	e002      	b.n	8008c8a <sen5x_statemachine+0x166>
          }
          else {
            samplesState = SAMPLES_TAKEN;
 8008c84:	4b24      	ldr	r3, [pc, #144]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008c86:	2205      	movs	r2, #5
 8008c88:	701a      	strb	r2, [r3, #0]
          }
        }
        sen5xSamples++;
 8008c8a:	4b31      	ldr	r3, [pc, #196]	@ (8008d50 <sen5x_statemachine+0x22c>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	b2da      	uxtb	r2, r3
 8008c92:	4b2f      	ldr	r3, [pc, #188]	@ (8008d50 <sen5x_statemachine+0x22c>)
 8008c94:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 8008c96:	f004 fcad 	bl	800d5f4 <HAL_GetTick>
 8008c9a:	0003      	movs	r3, r0
 8008c9c:	22fa      	movs	r2, #250	@ 0xfa
 8008c9e:	0092      	lsls	r2, r2, #2
 8008ca0:	189a      	adds	r2, r3, r2
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8008d14 <sen5x_statemachine+0x1f0>)
 8008ca4:	601a      	str	r2, [r3, #0]
      break;
 8008ca6:	e030      	b.n	8008d0a <sen5x_statemachine+0x1e6>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      sen5x_start_fan_cleaning();
 8008ca8:	f000 f99e 	bl	8008fe8 <sen5x_start_fan_cleaning>
      sen5xReadTimer = HAL_GetTick() + 11000;
 8008cac:	f004 fca2 	bl	800d5f4 <HAL_GetTick>
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	4a29      	ldr	r2, [pc, #164]	@ (8008d58 <sen5x_statemachine+0x234>)
 8008cb4:	189a      	adds	r2, r3, r2
 8008cb6:	4b17      	ldr	r3, [pc, #92]	@ (8008d14 <sen5x_statemachine+0x1f0>)
 8008cb8:	601a      	str	r2, [r3, #0]
      fanCleaningDone = true;
 8008cba:	4b26      	ldr	r3, [pc, #152]	@ (8008d54 <sen5x_statemachine+0x230>)
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	701a      	strb	r2, [r3, #0]
      samplesState = SAMPLES_TAKEN;
 8008cc0:	4b15      	ldr	r3, [pc, #84]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008cc2:	2205      	movs	r2, #5
 8008cc4:	701a      	strb	r2, [r3, #0]
      break;
 8008cc6:	e020      	b.n	8008d0a <sen5x_statemachine+0x1e6>

    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      sen5xSamples = 0;
 8008cc8:	4b21      	ldr	r3, [pc, #132]	@ (8008d50 <sen5x_statemachine+0x22c>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 8008cce:	f7ff fccf 	bl	8008670 <sen5x_extinguish_measurement>
 8008cd2:	1e03      	subs	r3, r0, #0
 8008cd4:	d005      	beq.n	8008ce2 <sen5x_statemachine+0x1be>
        Error("Error executing sen5x_extinguish_measurement()");
 8008cd6:	4a21      	ldr	r2, [pc, #132]	@ (8008d5c <sen5x_statemachine+0x238>)
 8008cd8:	4b12      	ldr	r3, [pc, #72]	@ (8008d24 <sen5x_statemachine+0x200>)
 8008cda:	0019      	movs	r1, r3
 8008cdc:	2001      	movs	r0, #1
 8008cde:	f004 f8eb 	bl	800ceb8 <CreateLine>
      }
      sen5x_Power_Off();
 8008ce2:	f7ff fb71 	bl	80083c8 <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8008ce6:	f004 fc85 	bl	800d5f4 <HAL_GetTick>
 8008cea:	0004      	movs	r4, r0
 8008cec:	1dfb      	adds	r3, r7, #7
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	0019      	movs	r1, r3
 8008cf2:	480d      	ldr	r0, [pc, #52]	@ (8008d28 <sen5x_statemachine+0x204>)
 8008cf4:	f7f7 fae0 	bl	80002b8 <__divsi3>
 8008cf8:	0003      	movs	r3, r0
 8008cfa:	18e2      	adds	r2, r4, r3
 8008cfc:	4b05      	ldr	r3, [pc, #20]	@ (8008d14 <sen5x_statemachine+0x1f0>)
 8008cfe:	601a      	str	r2, [r3, #0]
      samplesState = LIGHT_OUT;
 8008d00:	4b05      	ldr	r3, [pc, #20]	@ (8008d18 <sen5x_statemachine+0x1f4>)
 8008d02:	2201      	movs	r2, #1
 8008d04:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8008d06:	e000      	b.n	8008d0a <sen5x_statemachine+0x1e6>
      break;
 8008d08:	46c0      	nop			@ (mov r8, r8)
}
 8008d0a:	46c0      	nop			@ (mov r8, r8)
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b005      	add	sp, #20
 8008d10:	bd90      	pop	{r4, r7, pc}
 8008d12:	46c0      	nop			@ (mov r8, r8)
 8008d14:	200011e8 	.word	0x200011e8
 8008d18:	20000084 	.word	0x20000084
 8008d1c:	0802326c 	.word	0x0802326c
 8008d20:	08022a1c 	.word	0x08022a1c
 8008d24:	08022600 	.word	0x08022600
 8008d28:	002fefd8 	.word	0x002fefd8
 8008d2c:	08022a4c 	.word	0x08022a4c
 8008d30:	08022948 	.word	0x08022948
 8008d34:	08022a78 	.word	0x08022a78
 8008d38:	00007530 	.word	0x00007530
 8008d3c:	200011ed 	.word	0x200011ed
 8008d40:	08022aa4 	.word	0x08022aa4
 8008d44:	08022abc 	.word	0x08022abc
 8008d48:	08022754 	.word	0x08022754
 8008d4c:	08022ad4 	.word	0x08022ad4
 8008d50:	200011ec 	.word	0x200011ec
 8008d54:	200011e4 	.word	0x200011e4
 8008d58:	00002af8 	.word	0x00002af8
 8008d5c:	08022af8 	.word	0x08022af8

08008d60 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008d66:	1dbb      	adds	r3, r7, #6
 8008d68:	2200      	movs	r2, #0
 8008d6a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8008d6c:	1dbc      	adds	r4, r7, #6
 8008d6e:	1dbb      	adds	r3, r7, #6
 8008d70:	8819      	ldrh	r1, [r3, #0]
 8008d72:	003b      	movs	r3, r7
 8008d74:	2221      	movs	r2, #33	@ 0x21
 8008d76:	0018      	movs	r0, r3
 8008d78:	f001 fb26 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8008d7c:	0003      	movs	r3, r0
 8008d7e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008d80:	1d3c      	adds	r4, r7, #4
 8008d82:	1dbb      	adds	r3, r7, #6
 8008d84:	881a      	ldrh	r2, [r3, #0]
 8008d86:	003b      	movs	r3, r7
 8008d88:	0019      	movs	r1, r3
 8008d8a:	2069      	movs	r0, #105	@ 0x69
 8008d8c:	f001 fba0 	bl	800a4d0 <sensirion_i2c_write_data>
 8008d90:	0003      	movs	r3, r0
 8008d92:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008d94:	1d3b      	adds	r3, r7, #4
 8008d96:	2200      	movs	r2, #0
 8008d98:	5e9b      	ldrsh	r3, [r3, r2]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <sen5x_start_measurement+0x46>
        return error;
 8008d9e:	1d3b      	adds	r3, r7, #4
 8008da0:	2200      	movs	r2, #0
 8008da2:	5e9b      	ldrsh	r3, [r3, r2]
 8008da4:	e004      	b.n	8008db0 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 8008da6:	4b04      	ldr	r3, [pc, #16]	@ (8008db8 <sen5x_start_measurement+0x58>)
 8008da8:	0018      	movs	r0, r3
 8008daa:	f7ff fe27 	bl	80089fc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	0018      	movs	r0, r3
 8008db2:	46bd      	mov	sp, r7
 8008db4:	b003      	add	sp, #12
 8008db6:	bd90      	pop	{r4, r7, pc}
 8008db8:	0000c350 	.word	0x0000c350

08008dbc <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8008dbc:	b590      	push	{r4, r7, lr}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008dc2:	1dbb      	adds	r3, r7, #6
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 8008dc8:	1dbc      	adds	r4, r7, #6
 8008dca:	2382      	movs	r3, #130	@ 0x82
 8008dcc:	005a      	lsls	r2, r3, #1
 8008dce:	1dbb      	adds	r3, r7, #6
 8008dd0:	8819      	ldrh	r1, [r3, #0]
 8008dd2:	003b      	movs	r3, r7
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f001 faf7 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8008dda:	0003      	movs	r3, r0
 8008ddc:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008dde:	1d3c      	adds	r4, r7, #4
 8008de0:	1dbb      	adds	r3, r7, #6
 8008de2:	881a      	ldrh	r2, [r3, #0]
 8008de4:	003b      	movs	r3, r7
 8008de6:	0019      	movs	r1, r3
 8008de8:	2069      	movs	r0, #105	@ 0x69
 8008dea:	f001 fb71 	bl	800a4d0 <sensirion_i2c_write_data>
 8008dee:	0003      	movs	r3, r0
 8008df0:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008df2:	1d3b      	adds	r3, r7, #4
 8008df4:	2200      	movs	r2, #0
 8008df6:	5e9b      	ldrsh	r3, [r3, r2]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <sen5x_stop_measurement+0x48>
        return error;
 8008dfc:	1d3b      	adds	r3, r7, #4
 8008dfe:	2200      	movs	r2, #0
 8008e00:	5e9b      	ldrsh	r3, [r3, r2]
 8008e02:	e004      	b.n	8008e0e <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8008e04:	4b04      	ldr	r3, [pc, #16]	@ (8008e18 <sen5x_stop_measurement+0x5c>)
 8008e06:	0018      	movs	r0, r3
 8008e08:	f7ff fdf8 	bl	80089fc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	0018      	movs	r0, r3
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b003      	add	sp, #12
 8008e14:	bd90      	pop	{r4, r7, pc}
 8008e16:	46c0      	nop			@ (mov r8, r8)
 8008e18:	00030d40 	.word	0x00030d40

08008e1c <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8008e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8008e24:	250e      	movs	r5, #14
 8008e26:	197b      	adds	r3, r7, r5
 8008e28:	2200      	movs	r2, #0
 8008e2a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8008e2c:	197c      	adds	r4, r7, r5
 8008e2e:	4a22      	ldr	r2, [pc, #136]	@ (8008eb8 <sen5x_read_data_ready+0x9c>)
 8008e30:	197b      	adds	r3, r7, r5
 8008e32:	8819      	ldrh	r1, [r3, #0]
 8008e34:	2308      	movs	r3, #8
 8008e36:	18fb      	adds	r3, r7, r3
 8008e38:	0018      	movs	r0, r3
 8008e3a:	f001 fac5 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8008e3e:	0003      	movs	r3, r0
 8008e40:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008e42:	260c      	movs	r6, #12
 8008e44:	19bc      	adds	r4, r7, r6
 8008e46:	197b      	adds	r3, r7, r5
 8008e48:	881a      	ldrh	r2, [r3, #0]
 8008e4a:	2308      	movs	r3, #8
 8008e4c:	18fb      	adds	r3, r7, r3
 8008e4e:	0019      	movs	r1, r3
 8008e50:	2069      	movs	r0, #105	@ 0x69
 8008e52:	f001 fb3d 	bl	800a4d0 <sensirion_i2c_write_data>
 8008e56:	0003      	movs	r3, r0
 8008e58:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008e5a:	19bb      	adds	r3, r7, r6
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	5e9b      	ldrsh	r3, [r3, r2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d003      	beq.n	8008e6c <sen5x_read_data_ready+0x50>
        return error;
 8008e64:	19bb      	adds	r3, r7, r6
 8008e66:	2200      	movs	r2, #0
 8008e68:	5e9b      	ldrsh	r3, [r3, r2]
 8008e6a:	e020      	b.n	8008eae <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8008e6c:	4b13      	ldr	r3, [pc, #76]	@ (8008ebc <sen5x_read_data_ready+0xa0>)
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f7ff fdc4 	bl	80089fc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 8008e74:	250c      	movs	r5, #12
 8008e76:	197c      	adds	r4, r7, r5
 8008e78:	2308      	movs	r3, #8
 8008e7a:	18fb      	adds	r3, r7, r3
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	0019      	movs	r1, r3
 8008e80:	2069      	movs	r0, #105	@ 0x69
 8008e82:	f001 fb3d 	bl	800a500 <sensirion_i2c_read_data_inplace>
 8008e86:	0003      	movs	r3, r0
 8008e88:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008e8a:	197b      	adds	r3, r7, r5
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	5e9b      	ldrsh	r3, [r3, r2]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d003      	beq.n	8008e9c <sen5x_read_data_ready+0x80>
        return error;
 8008e94:	197b      	adds	r3, r7, r5
 8008e96:	2200      	movs	r2, #0
 8008e98:	5e9b      	ldrsh	r3, [r3, r2]
 8008e9a:	e008      	b.n	8008eae <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 8008e9c:	2308      	movs	r3, #8
 8008e9e:	18fb      	adds	r3, r7, r3
 8008ea0:	785b      	ldrb	r3, [r3, #1]
 8008ea2:	1e5a      	subs	r2, r3, #1
 8008ea4:	4193      	sbcs	r3, r2
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	0018      	movs	r0, r3
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	b005      	add	sp, #20
 8008eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb6:	46c0      	nop			@ (mov r8, r8)
 8008eb8:	00000202 	.word	0x00000202
 8008ebc:	00004e20 	.word	0x00004e20

08008ec0 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8008ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec2:	b08d      	sub	sp, #52	@ 0x34
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8008ece:	252e      	movs	r5, #46	@ 0x2e
 8008ed0:	197b      	adds	r3, r7, r5
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8008ed6:	197c      	adds	r4, r7, r5
 8008ed8:	23f1      	movs	r3, #241	@ 0xf1
 8008eda:	009a      	lsls	r2, r3, #2
 8008edc:	197b      	adds	r3, r7, r5
 8008ede:	8819      	ldrh	r1, [r3, #0]
 8008ee0:	2314      	movs	r3, #20
 8008ee2:	18fb      	adds	r3, r7, r3
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f001 fa6f 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8008eea:	0003      	movs	r3, r0
 8008eec:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8008eee:	262c      	movs	r6, #44	@ 0x2c
 8008ef0:	19bc      	adds	r4, r7, r6
 8008ef2:	197b      	adds	r3, r7, r5
 8008ef4:	881a      	ldrh	r2, [r3, #0]
 8008ef6:	2314      	movs	r3, #20
 8008ef8:	18fb      	adds	r3, r7, r3
 8008efa:	0019      	movs	r1, r3
 8008efc:	2069      	movs	r0, #105	@ 0x69
 8008efe:	f001 fae7 	bl	800a4d0 <sensirion_i2c_write_data>
 8008f02:	0003      	movs	r3, r0
 8008f04:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008f06:	19bb      	adds	r3, r7, r6
 8008f08:	2200      	movs	r2, #0
 8008f0a:	5e9b      	ldrsh	r3, [r3, r2]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <sen5x_read_measured_values+0x58>
        return error;
 8008f10:	19bb      	adds	r3, r7, r6
 8008f12:	2200      	movs	r2, #0
 8008f14:	5e9b      	ldrsh	r3, [r3, r2]
 8008f16:	e060      	b.n	8008fda <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8008f18:	4b32      	ldr	r3, [pc, #200]	@ (8008fe4 <sen5x_read_measured_values+0x124>)
 8008f1a:	0018      	movs	r0, r3
 8008f1c:	f7ff fd6e 	bl	80089fc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8008f20:	252c      	movs	r5, #44	@ 0x2c
 8008f22:	197c      	adds	r4, r7, r5
 8008f24:	2314      	movs	r3, #20
 8008f26:	18fb      	adds	r3, r7, r3
 8008f28:	2210      	movs	r2, #16
 8008f2a:	0019      	movs	r1, r3
 8008f2c:	2069      	movs	r0, #105	@ 0x69
 8008f2e:	f001 fae7 	bl	800a500 <sensirion_i2c_read_data_inplace>
 8008f32:	0003      	movs	r3, r0
 8008f34:	8023      	strh	r3, [r4, #0]
    if (error) {
 8008f36:	197b      	adds	r3, r7, r5
 8008f38:	2200      	movs	r2, #0
 8008f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d003      	beq.n	8008f48 <sen5x_read_measured_values+0x88>
        return error;
 8008f40:	197b      	adds	r3, r7, r5
 8008f42:	2200      	movs	r2, #0
 8008f44:	5e9b      	ldrsh	r3, [r3, r2]
 8008f46:	e048      	b.n	8008fda <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8008f48:	2414      	movs	r4, #20
 8008f4a:	193b      	adds	r3, r7, r4
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	f000 fa79 	bl	8009444 <sensirion_common_bytes_to_uint16_t>
 8008f52:	0003      	movs	r3, r0
 8008f54:	001a      	movs	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 8008f5a:	193b      	adds	r3, r7, r4
 8008f5c:	3302      	adds	r3, #2
 8008f5e:	0018      	movs	r0, r3
 8008f60:	f000 fa70 	bl	8009444 <sensirion_common_bytes_to_uint16_t>
 8008f64:	0003      	movs	r3, r0
 8008f66:	001a      	movs	r2, r3
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 8008f6c:	193b      	adds	r3, r7, r4
 8008f6e:	3304      	adds	r3, #4
 8008f70:	0018      	movs	r0, r3
 8008f72:	f000 fa67 	bl	8009444 <sensirion_common_bytes_to_uint16_t>
 8008f76:	0003      	movs	r3, r0
 8008f78:	001a      	movs	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 8008f7e:	193b      	adds	r3, r7, r4
 8008f80:	3306      	adds	r3, #6
 8008f82:	0018      	movs	r0, r3
 8008f84:	f000 fa5e 	bl	8009444 <sensirion_common_bytes_to_uint16_t>
 8008f88:	0003      	movs	r3, r0
 8008f8a:	001a      	movs	r2, r3
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 8008f90:	193b      	adds	r3, r7, r4
 8008f92:	3308      	adds	r3, #8
 8008f94:	0018      	movs	r0, r3
 8008f96:	f000 fa81 	bl	800949c <sensirion_common_bytes_to_int16_t>
 8008f9a:	0003      	movs	r3, r0
 8008f9c:	001a      	movs	r2, r3
 8008f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fa0:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8008fa2:	193b      	adds	r3, r7, r4
 8008fa4:	330a      	adds	r3, #10
 8008fa6:	0018      	movs	r0, r3
 8008fa8:	f000 fa78 	bl	800949c <sensirion_common_bytes_to_int16_t>
 8008fac:	0003      	movs	r3, r0
 8008fae:	001a      	movs	r2, r3
 8008fb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fb2:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8008fb4:	193b      	adds	r3, r7, r4
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	0018      	movs	r0, r3
 8008fba:	f000 fa6f 	bl	800949c <sensirion_common_bytes_to_int16_t>
 8008fbe:	0003      	movs	r3, r0
 8008fc0:	001a      	movs	r2, r3
 8008fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fc4:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8008fc6:	193b      	adds	r3, r7, r4
 8008fc8:	330e      	adds	r3, #14
 8008fca:	0018      	movs	r0, r3
 8008fcc:	f000 fa66 	bl	800949c <sensirion_common_bytes_to_int16_t>
 8008fd0:	0003      	movs	r3, r0
 8008fd2:	001a      	movs	r2, r3
 8008fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fd6:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	0018      	movs	r0, r3
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	b00d      	add	sp, #52	@ 0x34
 8008fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe2:	46c0      	nop			@ (mov r8, r8)
 8008fe4:	00004e20 	.word	0x00004e20

08008fe8 <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8008fee:	1dbb      	adds	r3, r7, #6
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8008ff4:	1dbc      	adds	r4, r7, #6
 8008ff6:	4a12      	ldr	r2, [pc, #72]	@ (8009040 <sen5x_start_fan_cleaning+0x58>)
 8008ff8:	1dbb      	adds	r3, r7, #6
 8008ffa:	8819      	ldrh	r1, [r3, #0]
 8008ffc:	003b      	movs	r3, r7
 8008ffe:	0018      	movs	r0, r3
 8009000:	f001 f9e2 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8009004:	0003      	movs	r3, r0
 8009006:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009008:	1d3c      	adds	r4, r7, #4
 800900a:	1dbb      	adds	r3, r7, #6
 800900c:	881a      	ldrh	r2, [r3, #0]
 800900e:	003b      	movs	r3, r7
 8009010:	0019      	movs	r1, r3
 8009012:	2069      	movs	r0, #105	@ 0x69
 8009014:	f001 fa5c 	bl	800a4d0 <sensirion_i2c_write_data>
 8009018:	0003      	movs	r3, r0
 800901a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800901c:	1d3b      	adds	r3, r7, #4
 800901e:	2200      	movs	r2, #0
 8009020:	5e9b      	ldrsh	r3, [r3, r2]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <sen5x_start_fan_cleaning+0x46>
        return error;
 8009026:	1d3b      	adds	r3, r7, #4
 8009028:	2200      	movs	r2, #0
 800902a:	5e9b      	ldrsh	r3, [r3, r2]
 800902c:	e004      	b.n	8009038 <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 800902e:	4b05      	ldr	r3, [pc, #20]	@ (8009044 <sen5x_start_fan_cleaning+0x5c>)
 8009030:	0018      	movs	r0, r3
 8009032:	f7ff fce3 	bl	80089fc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009036:	2300      	movs	r3, #0
}
 8009038:	0018      	movs	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	b003      	add	sp, #12
 800903e:	bd90      	pop	{r4, r7, pc}
 8009040:	00005607 	.word	0x00005607
 8009044:	00004e20 	.word	0x00004e20

08009048 <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 8009048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	0004      	movs	r4, r0
 8009050:	0008      	movs	r0, r1
 8009052:	0011      	movs	r1, r2
 8009054:	1dbb      	adds	r3, r7, #6
 8009056:	1c22      	adds	r2, r4, #0
 8009058:	801a      	strh	r2, [r3, #0]
 800905a:	1d3b      	adds	r3, r7, #4
 800905c:	1c02      	adds	r2, r0, #0
 800905e:	801a      	strh	r2, [r3, #0]
 8009060:	1cbb      	adds	r3, r7, #2
 8009062:	1c0a      	adds	r2, r1, #0
 8009064:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 8009066:	2516      	movs	r5, #22
 8009068:	197b      	adds	r3, r7, r5
 800906a:	2200      	movs	r2, #0
 800906c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 800906e:	197c      	adds	r4, r7, r5
 8009070:	4a25      	ldr	r2, [pc, #148]	@ (8009108 <sen5x_set_temperature_offset_parameters+0xc0>)
 8009072:	197b      	adds	r3, r7, r5
 8009074:	8819      	ldrh	r1, [r3, #0]
 8009076:	2608      	movs	r6, #8
 8009078:	19bb      	adds	r3, r7, r6
 800907a:	0018      	movs	r0, r3
 800907c:	f001 f9a4 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8009080:	0003      	movs	r3, r0
 8009082:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 8009084:	197c      	adds	r4, r7, r5
 8009086:	1dbb      	adds	r3, r7, #6
 8009088:	2200      	movs	r2, #0
 800908a:	5e9a      	ldrsh	r2, [r3, r2]
 800908c:	197b      	adds	r3, r7, r5
 800908e:	8819      	ldrh	r1, [r3, #0]
 8009090:	19bb      	adds	r3, r7, r6
 8009092:	0018      	movs	r0, r3
 8009094:	f001 fa03 	bl	800a49e <sensirion_i2c_add_int16_t_to_buffer>
 8009098:	0003      	movs	r3, r0
 800909a:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 800909c:	197c      	adds	r4, r7, r5
 800909e:	1d3b      	adds	r3, r7, #4
 80090a0:	2200      	movs	r2, #0
 80090a2:	5e9a      	ldrsh	r2, [r3, r2]
 80090a4:	197b      	adds	r3, r7, r5
 80090a6:	8819      	ldrh	r1, [r3, #0]
 80090a8:	19bb      	adds	r3, r7, r6
 80090aa:	0018      	movs	r0, r3
 80090ac:	f001 f9f7 	bl	800a49e <sensirion_i2c_add_int16_t_to_buffer>
 80090b0:	0003      	movs	r3, r0
 80090b2:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 80090b4:	197c      	adds	r4, r7, r5
 80090b6:	1cbb      	adds	r3, r7, #2
 80090b8:	881a      	ldrh	r2, [r3, #0]
 80090ba:	197b      	adds	r3, r7, r5
 80090bc:	8819      	ldrh	r1, [r3, #0]
 80090be:	19bb      	adds	r3, r7, r6
 80090c0:	0018      	movs	r0, r3
 80090c2:	f001 f9ad 	bl	800a420 <sensirion_i2c_add_uint16_t_to_buffer>
 80090c6:	0003      	movs	r3, r0
 80090c8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80090ca:	2214      	movs	r2, #20
 80090cc:	18bc      	adds	r4, r7, r2
 80090ce:	197b      	adds	r3, r7, r5
 80090d0:	881a      	ldrh	r2, [r3, #0]
 80090d2:	19bb      	adds	r3, r7, r6
 80090d4:	0019      	movs	r1, r3
 80090d6:	2069      	movs	r0, #105	@ 0x69
 80090d8:	f001 f9fa 	bl	800a4d0 <sensirion_i2c_write_data>
 80090dc:	0003      	movs	r3, r0
 80090de:	8023      	strh	r3, [r4, #0]
    if (error) {
 80090e0:	2214      	movs	r2, #20
 80090e2:	18bb      	adds	r3, r7, r2
 80090e4:	2100      	movs	r1, #0
 80090e6:	5e5b      	ldrsh	r3, [r3, r1]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 80090ec:	18bb      	adds	r3, r7, r2
 80090ee:	2200      	movs	r2, #0
 80090f0:	5e9b      	ldrsh	r3, [r3, r2]
 80090f2:	e004      	b.n	80090fe <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 80090f4:	4b05      	ldr	r3, [pc, #20]	@ (800910c <sen5x_set_temperature_offset_parameters+0xc4>)
 80090f6:	0018      	movs	r0, r3
 80090f8:	f7ff fc80 	bl	80089fc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	0018      	movs	r0, r3
 8009100:	46bd      	mov	sp, r7
 8009102:	b007      	add	sp, #28
 8009104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009106:	46c0      	nop			@ (mov r8, r8)
 8009108:	000060b2 	.word	0x000060b2
 800910c:	00004e20 	.word	0x00004e20

08009110 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009112:	b091      	sub	sp, #68	@ 0x44
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	000a      	movs	r2, r1
 800911a:	1cfb      	adds	r3, r7, #3
 800911c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800911e:	253e      	movs	r5, #62	@ 0x3e
 8009120:	197b      	adds	r3, r7, r5
 8009122:	2200      	movs	r2, #0
 8009124:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8009126:	197c      	adds	r4, r7, r5
 8009128:	4a22      	ldr	r2, [pc, #136]	@ (80091b4 <sen5x_get_product_name+0xa4>)
 800912a:	197b      	adds	r3, r7, r5
 800912c:	8819      	ldrh	r1, [r3, #0]
 800912e:	230c      	movs	r3, #12
 8009130:	18fb      	adds	r3, r7, r3
 8009132:	0018      	movs	r0, r3
 8009134:	f001 f948 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8009138:	0003      	movs	r3, r0
 800913a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800913c:	263c      	movs	r6, #60	@ 0x3c
 800913e:	19bc      	adds	r4, r7, r6
 8009140:	197b      	adds	r3, r7, r5
 8009142:	881a      	ldrh	r2, [r3, #0]
 8009144:	230c      	movs	r3, #12
 8009146:	18fb      	adds	r3, r7, r3
 8009148:	0019      	movs	r1, r3
 800914a:	2069      	movs	r0, #105	@ 0x69
 800914c:	f001 f9c0 	bl	800a4d0 <sensirion_i2c_write_data>
 8009150:	0003      	movs	r3, r0
 8009152:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009154:	19bb      	adds	r3, r7, r6
 8009156:	2200      	movs	r2, #0
 8009158:	5e9b      	ldrsh	r3, [r3, r2]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <sen5x_get_product_name+0x56>
        return error;
 800915e:	19bb      	adds	r3, r7, r6
 8009160:	2200      	movs	r2, #0
 8009162:	5e9b      	ldrsh	r3, [r3, r2]
 8009164:	e021      	b.n	80091aa <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009166:	4b14      	ldr	r3, [pc, #80]	@ (80091b8 <sen5x_get_product_name+0xa8>)
 8009168:	0018      	movs	r0, r3
 800916a:	f7ff fc47 	bl	80089fc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800916e:	253c      	movs	r5, #60	@ 0x3c
 8009170:	197c      	adds	r4, r7, r5
 8009172:	230c      	movs	r3, #12
 8009174:	18fb      	adds	r3, r7, r3
 8009176:	2220      	movs	r2, #32
 8009178:	0019      	movs	r1, r3
 800917a:	2069      	movs	r0, #105	@ 0x69
 800917c:	f001 f9c0 	bl	800a500 <sensirion_i2c_read_data_inplace>
 8009180:	0003      	movs	r3, r0
 8009182:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009184:	197b      	adds	r3, r7, r5
 8009186:	2200      	movs	r2, #0
 8009188:	5e9b      	ldrsh	r3, [r3, r2]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d003      	beq.n	8009196 <sen5x_get_product_name+0x86>
        return error;
 800918e:	197b      	adds	r3, r7, r5
 8009190:	2200      	movs	r2, #0
 8009192:	5e9b      	ldrsh	r3, [r3, r2]
 8009194:	e009      	b.n	80091aa <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8009196:	1cfb      	adds	r3, r7, #3
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	b29a      	uxth	r2, r3
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	230c      	movs	r3, #12
 80091a0:	18fb      	adds	r3, r7, r3
 80091a2:	0018      	movs	r0, r3
 80091a4:	f000 f988 	bl	80094b8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	0018      	movs	r0, r3
 80091ac:	46bd      	mov	sp, r7
 80091ae:	b011      	add	sp, #68	@ 0x44
 80091b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091b2:	46c0      	nop			@ (mov r8, r8)
 80091b4:	0000d014 	.word	0x0000d014
 80091b8:	0000c350 	.word	0x0000c350

080091bc <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	b091      	sub	sp, #68	@ 0x44
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	000a      	movs	r2, r1
 80091c6:	1cfb      	adds	r3, r7, #3
 80091c8:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 80091ca:	253e      	movs	r5, #62	@ 0x3e
 80091cc:	197b      	adds	r3, r7, r5
 80091ce:	2200      	movs	r2, #0
 80091d0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 80091d2:	197c      	adds	r4, r7, r5
 80091d4:	4a22      	ldr	r2, [pc, #136]	@ (8009260 <sen5x_get_serial_number+0xa4>)
 80091d6:	197b      	adds	r3, r7, r5
 80091d8:	8819      	ldrh	r1, [r3, #0]
 80091da:	230c      	movs	r3, #12
 80091dc:	18fb      	adds	r3, r7, r3
 80091de:	0018      	movs	r0, r3
 80091e0:	f001 f8f2 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 80091e4:	0003      	movs	r3, r0
 80091e6:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80091e8:	263c      	movs	r6, #60	@ 0x3c
 80091ea:	19bc      	adds	r4, r7, r6
 80091ec:	197b      	adds	r3, r7, r5
 80091ee:	881a      	ldrh	r2, [r3, #0]
 80091f0:	230c      	movs	r3, #12
 80091f2:	18fb      	adds	r3, r7, r3
 80091f4:	0019      	movs	r1, r3
 80091f6:	2069      	movs	r0, #105	@ 0x69
 80091f8:	f001 f96a 	bl	800a4d0 <sensirion_i2c_write_data>
 80091fc:	0003      	movs	r3, r0
 80091fe:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009200:	19bb      	adds	r3, r7, r6
 8009202:	2200      	movs	r2, #0
 8009204:	5e9b      	ldrsh	r3, [r3, r2]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <sen5x_get_serial_number+0x56>
        return error;
 800920a:	19bb      	adds	r3, r7, r6
 800920c:	2200      	movs	r2, #0
 800920e:	5e9b      	ldrsh	r3, [r3, r2]
 8009210:	e021      	b.n	8009256 <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009212:	4b14      	ldr	r3, [pc, #80]	@ (8009264 <sen5x_get_serial_number+0xa8>)
 8009214:	0018      	movs	r0, r3
 8009216:	f7ff fbf1 	bl	80089fc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800921a:	253c      	movs	r5, #60	@ 0x3c
 800921c:	197c      	adds	r4, r7, r5
 800921e:	230c      	movs	r3, #12
 8009220:	18fb      	adds	r3, r7, r3
 8009222:	2220      	movs	r2, #32
 8009224:	0019      	movs	r1, r3
 8009226:	2069      	movs	r0, #105	@ 0x69
 8009228:	f001 f96a 	bl	800a500 <sensirion_i2c_read_data_inplace>
 800922c:	0003      	movs	r3, r0
 800922e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009230:	197b      	adds	r3, r7, r5
 8009232:	2200      	movs	r2, #0
 8009234:	5e9b      	ldrsh	r3, [r3, r2]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d003      	beq.n	8009242 <sen5x_get_serial_number+0x86>
        return error;
 800923a:	197b      	adds	r3, r7, r5
 800923c:	2200      	movs	r2, #0
 800923e:	5e9b      	ldrsh	r3, [r3, r2]
 8009240:	e009      	b.n	8009256 <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009242:	1cfb      	adds	r3, r7, #3
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	b29a      	uxth	r2, r3
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	230c      	movs	r3, #12
 800924c:	18fb      	adds	r3, r7, r3
 800924e:	0018      	movs	r0, r3
 8009250:	f000 f932 	bl	80094b8 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8009254:	2300      	movs	r3, #0
}
 8009256:	0018      	movs	r0, r3
 8009258:	46bd      	mov	sp, r7
 800925a:	b011      	add	sp, #68	@ 0x44
 800925c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925e:	46c0      	nop			@ (mov r8, r8)
 8009260:	0000d033 	.word	0x0000d033
 8009264:	0000c350 	.word	0x0000c350

08009268 <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 8009268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800926a:	b089      	sub	sp, #36	@ 0x24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 8009276:	251e      	movs	r5, #30
 8009278:	197b      	adds	r3, r7, r5
 800927a:	2200      	movs	r2, #0
 800927c:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 800927e:	197c      	adds	r4, r7, r5
 8009280:	23d1      	movs	r3, #209	@ 0xd1
 8009282:	021a      	lsls	r2, r3, #8
 8009284:	197b      	adds	r3, r7, r5
 8009286:	8819      	ldrh	r1, [r3, #0]
 8009288:	2310      	movs	r3, #16
 800928a:	18fb      	adds	r3, r7, r3
 800928c:	0018      	movs	r0, r3
 800928e:	f001 f89b 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8009292:	0003      	movs	r3, r0
 8009294:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009296:	261c      	movs	r6, #28
 8009298:	19bc      	adds	r4, r7, r6
 800929a:	197b      	adds	r3, r7, r5
 800929c:	881a      	ldrh	r2, [r3, #0]
 800929e:	2310      	movs	r3, #16
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	0019      	movs	r1, r3
 80092a4:	2069      	movs	r0, #105	@ 0x69
 80092a6:	f001 f913 	bl	800a4d0 <sensirion_i2c_write_data>
 80092aa:	0003      	movs	r3, r0
 80092ac:	8023      	strh	r3, [r4, #0]
    if (error) {
 80092ae:	19bb      	adds	r3, r7, r6
 80092b0:	2200      	movs	r2, #0
 80092b2:	5e9b      	ldrsh	r3, [r3, r2]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <sen5x_get_version+0x58>
        return error;
 80092b8:	19bb      	adds	r3, r7, r6
 80092ba:	2200      	movs	r2, #0
 80092bc:	5e9b      	ldrsh	r3, [r3, r2]
 80092be:	e038      	b.n	8009332 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80092c0:	4b1e      	ldr	r3, [pc, #120]	@ (800933c <sen5x_get_version+0xd4>)
 80092c2:	0018      	movs	r0, r3
 80092c4:	f7ff fb9a 	bl	80089fc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 80092c8:	251c      	movs	r5, #28
 80092ca:	197c      	adds	r4, r7, r5
 80092cc:	2310      	movs	r3, #16
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	2208      	movs	r2, #8
 80092d2:	0019      	movs	r1, r3
 80092d4:	2069      	movs	r0, #105	@ 0x69
 80092d6:	f001 f913 	bl	800a500 <sensirion_i2c_read_data_inplace>
 80092da:	0003      	movs	r3, r0
 80092dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 80092de:	197b      	adds	r3, r7, r5
 80092e0:	2200      	movs	r2, #0
 80092e2:	5e9b      	ldrsh	r3, [r3, r2]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <sen5x_get_version+0x88>
        return error;
 80092e8:	197b      	adds	r3, r7, r5
 80092ea:	2200      	movs	r2, #0
 80092ec:	5e9b      	ldrsh	r3, [r3, r2]
 80092ee:	e020      	b.n	8009332 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 80092f0:	2110      	movs	r1, #16
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	781a      	ldrb	r2, [r3, #0]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 80092fa:	187b      	adds	r3, r7, r1
 80092fc:	785a      	ldrb	r2, [r3, #1]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009302:	187b      	adds	r3, r7, r1
 8009304:	789b      	ldrb	r3, [r3, #2]
 8009306:	1e5a      	subs	r2, r3, #1
 8009308:	4193      	sbcs	r3, r2
 800930a:	b2da      	uxtb	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009310:	187b      	adds	r3, r7, r1
 8009312:	78da      	ldrb	r2, [r3, #3]
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 8009318:	187b      	adds	r3, r7, r1
 800931a:	791a      	ldrb	r2, [r3, #4]
 800931c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800931e:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009320:	187b      	adds	r3, r7, r1
 8009322:	795a      	ldrb	r2, [r3, #5]
 8009324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009326:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 8009328:	187b      	adds	r3, r7, r1
 800932a:	799a      	ldrb	r2, [r3, #6]
 800932c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800932e:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009330:	2300      	movs	r3, #0
}
 8009332:	0018      	movs	r0, r3
 8009334:	46bd      	mov	sp, r7
 8009336:	b009      	add	sp, #36	@ 0x24
 8009338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800933a:	46c0      	nop			@ (mov r8, r8)
 800933c:	00004e20 	.word	0x00004e20

08009340 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009342:	b087      	sub	sp, #28
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 8009348:	2516      	movs	r5, #22
 800934a:	197b      	adds	r3, r7, r5
 800934c:	2200      	movs	r2, #0
 800934e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 8009350:	197c      	adds	r4, r7, r5
 8009352:	4a22      	ldr	r2, [pc, #136]	@ (80093dc <sen5x_read_device_status+0x9c>)
 8009354:	197b      	adds	r3, r7, r5
 8009356:	8819      	ldrh	r1, [r3, #0]
 8009358:	230c      	movs	r3, #12
 800935a:	18fb      	adds	r3, r7, r3
 800935c:	0018      	movs	r0, r3
 800935e:	f001 f833 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8009362:	0003      	movs	r3, r0
 8009364:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009366:	2614      	movs	r6, #20
 8009368:	19bc      	adds	r4, r7, r6
 800936a:	197b      	adds	r3, r7, r5
 800936c:	881a      	ldrh	r2, [r3, #0]
 800936e:	230c      	movs	r3, #12
 8009370:	18fb      	adds	r3, r7, r3
 8009372:	0019      	movs	r1, r3
 8009374:	2069      	movs	r0, #105	@ 0x69
 8009376:	f001 f8ab 	bl	800a4d0 <sensirion_i2c_write_data>
 800937a:	0003      	movs	r3, r0
 800937c:	8023      	strh	r3, [r4, #0]
    if (error) {
 800937e:	19bb      	adds	r3, r7, r6
 8009380:	2200      	movs	r2, #0
 8009382:	5e9b      	ldrsh	r3, [r3, r2]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d003      	beq.n	8009390 <sen5x_read_device_status+0x50>
        return error;
 8009388:	19bb      	adds	r3, r7, r6
 800938a:	2200      	movs	r2, #0
 800938c:	5e9b      	ldrsh	r3, [r3, r2]
 800938e:	e020      	b.n	80093d2 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009390:	4b13      	ldr	r3, [pc, #76]	@ (80093e0 <sen5x_read_device_status+0xa0>)
 8009392:	0018      	movs	r0, r3
 8009394:	f7ff fb32 	bl	80089fc <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 8009398:	2514      	movs	r5, #20
 800939a:	197c      	adds	r4, r7, r5
 800939c:	230c      	movs	r3, #12
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	2204      	movs	r2, #4
 80093a2:	0019      	movs	r1, r3
 80093a4:	2069      	movs	r0, #105	@ 0x69
 80093a6:	f001 f8ab 	bl	800a500 <sensirion_i2c_read_data_inplace>
 80093aa:	0003      	movs	r3, r0
 80093ac:	8023      	strh	r3, [r4, #0]
    if (error) {
 80093ae:	197b      	adds	r3, r7, r5
 80093b0:	2200      	movs	r2, #0
 80093b2:	5e9b      	ldrsh	r3, [r3, r2]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <sen5x_read_device_status+0x80>
        return error;
 80093b8:	197b      	adds	r3, r7, r5
 80093ba:	2200      	movs	r2, #0
 80093bc:	5e9b      	ldrsh	r3, [r3, r2]
 80093be:	e008      	b.n	80093d2 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 80093c0:	230c      	movs	r3, #12
 80093c2:	18fb      	adds	r3, r7, r3
 80093c4:	0018      	movs	r0, r3
 80093c6:	f000 f850 	bl	800946a <sensirion_common_bytes_to_uint32_t>
 80093ca:	0002      	movs	r2, r0
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	0018      	movs	r0, r3
 80093d4:	46bd      	mov	sp, r7
 80093d6:	b007      	add	sp, #28
 80093d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093da:	46c0      	nop			@ (mov r8, r8)
 80093dc:	0000d206 	.word	0x0000d206
 80093e0:	00004e20 	.word	0x00004e20

080093e4 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 80093e4:	b590      	push	{r4, r7, lr}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80093ea:	1dbb      	adds	r3, r7, #6
 80093ec:	2200      	movs	r2, #0
 80093ee:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 80093f0:	1dbc      	adds	r4, r7, #6
 80093f2:	4a12      	ldr	r2, [pc, #72]	@ (800943c <sen5x_device_reset+0x58>)
 80093f4:	1dbb      	adds	r3, r7, #6
 80093f6:	8819      	ldrh	r1, [r3, #0]
 80093f8:	003b      	movs	r3, r7
 80093fa:	0018      	movs	r0, r3
 80093fc:	f000 ffe4 	bl	800a3c8 <sensirion_i2c_add_command_to_buffer>
 8009400:	0003      	movs	r3, r0
 8009402:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009404:	1d3c      	adds	r4, r7, #4
 8009406:	1dbb      	adds	r3, r7, #6
 8009408:	881a      	ldrh	r2, [r3, #0]
 800940a:	003b      	movs	r3, r7
 800940c:	0019      	movs	r1, r3
 800940e:	2069      	movs	r0, #105	@ 0x69
 8009410:	f001 f85e 	bl	800a4d0 <sensirion_i2c_write_data>
 8009414:	0003      	movs	r3, r0
 8009416:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	2200      	movs	r2, #0
 800941c:	5e9b      	ldrsh	r3, [r3, r2]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d003      	beq.n	800942a <sen5x_device_reset+0x46>
        return error;
 8009422:	1d3b      	adds	r3, r7, #4
 8009424:	2200      	movs	r2, #0
 8009426:	5e9b      	ldrsh	r3, [r3, r2]
 8009428:	e004      	b.n	8009434 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800942a:	4b05      	ldr	r3, [pc, #20]	@ (8009440 <sen5x_device_reset+0x5c>)
 800942c:	0018      	movs	r0, r3
 800942e:	f7ff fae5 	bl	80089fc <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009432:	2300      	movs	r3, #0
}
 8009434:	0018      	movs	r0, r3
 8009436:	46bd      	mov	sp, r7
 8009438:	b003      	add	sp, #12
 800943a:	bd90      	pop	{r4, r7, pc}
 800943c:	0000d304 	.word	0x0000d304
 8009440:	00030d40 	.word	0x00030d40

08009444 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	021b      	lsls	r3, r3, #8
 8009452:	b21a      	sxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	3301      	adds	r3, #1
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b21b      	sxth	r3, r3
 800945c:	4313      	orrs	r3, r2
 800945e:	b21b      	sxth	r3, r3
 8009460:	b29b      	uxth	r3, r3
}
 8009462:	0018      	movs	r0, r3
 8009464:	46bd      	mov	sp, r7
 8009466:	b002      	add	sp, #8
 8009468:	bd80      	pop	{r7, pc}

0800946a <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	061a      	lsls	r2, r3, #24
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	3301      	adds	r3, #1
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	041b      	lsls	r3, r3, #16
 8009480:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	3302      	adds	r3, #2
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 800948a:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	3203      	adds	r2, #3
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	4313      	orrs	r3, r2
}
 8009494:	0018      	movs	r0, r3
 8009496:	46bd      	mov	sp, r7
 8009498:	b002      	add	sp, #8
 800949a:	bd80      	pop	{r7, pc}

0800949c <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	0018      	movs	r0, r3
 80094a8:	f7ff ffcc 	bl	8009444 <sensirion_common_bytes_to_uint16_t>
 80094ac:	0003      	movs	r3, r0
 80094ae:	b21b      	sxth	r3, r3
}
 80094b0:	0018      	movs	r0, r3
 80094b2:	46bd      	mov	sp, r7
 80094b4:	b002      	add	sp, #8
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	1dbb      	adds	r3, r7, #6
 80094c4:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 80094c6:	2316      	movs	r3, #22
 80094c8:	18fb      	adds	r3, r7, r3
 80094ca:	2200      	movs	r2, #0
 80094cc:	801a      	strh	r2, [r3, #0]
 80094ce:	e00f      	b.n	80094f0 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 80094d0:	2016      	movs	r0, #22
 80094d2:	183b      	adds	r3, r7, r0
 80094d4:	881b      	ldrh	r3, [r3, #0]
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	18d2      	adds	r2, r2, r3
 80094da:	183b      	adds	r3, r7, r0
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	68b9      	ldr	r1, [r7, #8]
 80094e0:	18cb      	adds	r3, r1, r3
 80094e2:	7812      	ldrb	r2, [r2, #0]
 80094e4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 80094e6:	183b      	adds	r3, r7, r0
 80094e8:	881a      	ldrh	r2, [r3, #0]
 80094ea:	183b      	adds	r3, r7, r0
 80094ec:	3201      	adds	r2, #1
 80094ee:	801a      	strh	r2, [r3, #0]
 80094f0:	2316      	movs	r3, #22
 80094f2:	18fa      	adds	r2, r7, r3
 80094f4:	1dbb      	adds	r3, r7, #6
 80094f6:	8812      	ldrh	r2, [r2, #0]
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3e8      	bcc.n	80094d0 <sensirion_common_copy_bytes+0x18>
    }
}
 80094fe:	46c0      	nop			@ (mov r8, r8)
 8009500:	46c0      	nop			@ (mov r8, r8)
 8009502:	46bd      	mov	sp, r7
 8009504:	b006      	add	sp, #24
 8009506:	bd80      	pop	{r7, pc}

08009508 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d113      	bne.n	800954e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	22fe      	movs	r2, #254	@ 0xfe
 800952a:	0592      	lsls	r2, r2, #22
 800952c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	4a1a      	ldr	r2, [pc, #104]	@ (800959c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009532:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	4a1a      	ldr	r2, [pc, #104]	@ (80095a0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009538:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4a19      	ldr	r2, [pc, #100]	@ (80095a4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800953e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a19      	ldr	r2, [pc, #100]	@ (80095a8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009544:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4a18      	ldr	r2, [pc, #96]	@ (80095ac <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800954a:	61da      	str	r2, [r3, #28]
 800954c:	e011      	b.n	8009572 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	4a17      	ldr	r2, [pc, #92]	@ (80095b0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009552:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4a17      	ldr	r2, [pc, #92]	@ (80095b4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009558:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a16      	ldr	r2, [pc, #88]	@ (80095b8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800955e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4a16      	ldr	r2, [pc, #88]	@ (80095bc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009564:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4a15      	ldr	r2, [pc, #84]	@ (80095c0 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 800956a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	4a15      	ldr	r2, [pc, #84]	@ (80095c4 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009570:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4a14      	ldr	r2, [pc, #80]	@ (80095c8 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009576:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4a14      	ldr	r2, [pc, #80]	@ (80095cc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800957c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	4a12      	ldr	r2, [pc, #72]	@ (80095cc <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009582:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4a12      	ldr	r2, [pc, #72]	@ (80095d0 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009588:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	0018      	movs	r0, r3
 800958e:	f000 f831 	bl	80095f4 <GasIndexAlgorithm_reset>
}
 8009592:	46c0      	nop			@ (mov r8, r8)
 8009594:	46bd      	mov	sp, r7
 8009596:	b004      	add	sp, #16
 8009598:	bd80      	pop	{r7, pc}
 800959a:	46c0      	nop			@ (mov r8, r8)
 800959c:	00002710 	.word	0x00002710
 80095a0:	44340000 	.word	0x44340000
 80095a4:	46859800 	.word	0x46859800
 80095a8:	46a05000 	.word	0x46a05000
 80095ac:	41f00000 	.word	0x41f00000
 80095b0:	42c80000 	.word	0x42c80000
 80095b4:	00004e20 	.word	0x00004e20
 80095b8:	43340000 	.word	0x43340000
 80095bc:	4528c000 	.word	0x4528c000
 80095c0:	45a32000 	.word	0x45a32000
 80095c4:	43aa0000 	.word	0x43aa0000
 80095c8:	43660000 	.word	0x43660000
 80095cc:	41400000 	.word	0x41400000
 80095d0:	42480000 	.word	0x42480000

080095d4 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 80095de:	22fe      	movs	r2, #254	@ 0xfe
 80095e0:	0592      	lsls	r2, r2, #22
 80095e2:	6839      	ldr	r1, [r7, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	0018      	movs	r0, r3
 80095e8:	f7ff ff8e 	bl	8009508 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 80095ec:	46c0      	nop			@ (mov r8, r8)
 80095ee:	46bd      	mov	sp, r7
 80095f0:	b002      	add	sp, #8
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	0018      	movs	r0, r3
 8009612:	f000 f805 	bl	8009620 <GasIndexAlgorithm__init_instances>
}
 8009616:	46c0      	nop			@ (mov r8, r8)
 8009618:	46bd      	mov	sp, r7
 800961a:	b002      	add	sp, #8
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	0018      	movs	r0, r3
 800962c:	f000 f8e8 	bl	8009800 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	0018      	movs	r0, r3
 8009634:	f000 f9a6 	bl	8009984 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009638:	1c04      	adds	r4, r0, #0
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0018      	movs	r0, r3
 800963e:	f000 f9ab 	bl	8009998 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009642:	1c02      	adds	r2, r0, #0
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	1c21      	adds	r1, r4, #0
 8009648:	0018      	movs	r0, r3
 800964a:	f000 fc3b 	bl	8009ec4 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d107      	bne.n	8009666 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009656:	23fe      	movs	r3, #254	@ 0xfe
 8009658:	059b      	lsls	r3, r3, #22
 800965a:	4a0a      	ldr	r2, [pc, #40]	@ (8009684 <GasIndexAlgorithm__init_instances+0x64>)
 800965c:	490a      	ldr	r1, [pc, #40]	@ (8009688 <GasIndexAlgorithm__init_instances+0x68>)
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fc86 	bl	8009f70 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8009664:	e005      	b.n	8009672 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009666:	4b09      	ldr	r3, [pc, #36]	@ (800968c <GasIndexAlgorithm__init_instances+0x6c>)
 8009668:	4a09      	ldr	r2, [pc, #36]	@ (8009690 <GasIndexAlgorithm__init_instances+0x70>)
 800966a:	490a      	ldr	r1, [pc, #40]	@ (8009694 <GasIndexAlgorithm__init_instances+0x74>)
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fc7f 	bl	8009f70 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	0018      	movs	r0, r3
 8009676:	f000 fd35 	bl	800a0e4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 800967a:	46c0      	nop			@ (mov r8, r8)
 800967c:	46bd      	mov	sp, r7
 800967e:	b003      	add	sp, #12
 8009680:	bd90      	pop	{r4, r7, pc}
 8009682:	46c0      	nop			@ (mov r8, r8)
 8009684:	bc257a78 	.word	0xbc257a78
 8009688:	44198000 	.word	0x44198000
 800968c:	42c80000 	.word	0x42c80000
 8009690:	bbd4fdf4 	.word	0xbbd4fdf4
 8009694:	43550000 	.word	0x43550000

08009698 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096a8:	4952      	ldr	r1, [pc, #328]	@ (80097f4 <GasIndexAlgorithm_process+0x15c>)
 80096aa:	1c18      	adds	r0, r3, #0
 80096ac:	f7f6 ff4a 	bl	8000544 <__aeabi_fcmple>
 80096b0:	1e03      	subs	r3, r0, #0
 80096b2:	d00c      	beq.n	80096ce <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	1c19      	adds	r1, r3, #0
 80096be:	1c10      	adds	r0, r2, #0
 80096c0:	f7f7 f8fe 	bl	80008c0 <__aeabi_fadd>
 80096c4:	1c03      	adds	r3, r0, #0
 80096c6:	1c1a      	adds	r2, r3, #0
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80096cc:	e080      	b.n	80097d0 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dd25      	ble.n	8009720 <GasIndexAlgorithm_process+0x88>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	4a48      	ldr	r2, [pc, #288]	@ (80097f8 <GasIndexAlgorithm_process+0x160>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	dc21      	bgt.n	8009720 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	dc04      	bgt.n	80096f0 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	3301      	adds	r3, #1
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	e00d      	b.n	800970c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	4a41      	ldr	r2, [pc, #260]	@ (80097fc <GasIndexAlgorithm_process+0x164>)
 80096f6:	4694      	mov	ip, r2
 80096f8:	4463      	add	r3, ip
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	dd05      	ble.n	800970c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	4a3d      	ldr	r2, [pc, #244]	@ (80097fc <GasIndexAlgorithm_process+0x164>)
 8009706:	4694      	mov	ip, r2
 8009708:	4463      	add	r3, ip
 800970a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	0018      	movs	r0, r3
 8009716:	f7f7 ff5b 	bl	80015d0 <__aeabi_i2f>
 800971a:	1c02      	adds	r2, r0, #0
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d005      	beq.n	8009734 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	0018      	movs	r0, r3
 800972c:	f000 f945 	bl	80099ba <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8009730:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8009732:	d014      	beq.n	800975e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	1c11      	adds	r1, r2, #0
 800973c:	0018      	movs	r0, r3
 800973e:	f000 fbd1 	bl	8009ee4 <GasIndexAlgorithm__mox_model__process>
 8009742:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	1c11      	adds	r1, r2, #0
 8009750:	0018      	movs	r0, r3
 8009752:	f000 fc25 	bl	8009fa0 <GasIndexAlgorithm__sigmoid_scaled__process>
 8009756:	1c02      	adds	r2, r0, #0
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	639a      	str	r2, [r3, #56]	@ 0x38
 800975c:	e003      	b.n	8009766 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1c11      	adds	r1, r2, #0
 800976e:	0018      	movs	r0, r3
 8009770:	f000 fcec 	bl	800a14c <GasIndexAlgorithm__adaptive_lowpass__process>
 8009774:	1c02      	adds	r2, r0, #0
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800977e:	21fc      	movs	r1, #252	@ 0xfc
 8009780:	0589      	lsls	r1, r1, #22
 8009782:	1c18      	adds	r0, r3, #0
 8009784:	f7f6 fed4 	bl	8000530 <__aeabi_fcmplt>
 8009788:	1e03      	subs	r3, r0, #0
 800978a:	d003      	beq.n	8009794 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	22fc      	movs	r2, #252	@ 0xfc
 8009790:	0592      	lsls	r2, r2, #22
 8009792:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009798:	2100      	movs	r1, #0
 800979a:	1c18      	adds	r0, r3, #0
 800979c:	f7f6 fedc 	bl	8000558 <__aeabi_fcmpgt>
 80097a0:	1e03      	subs	r3, r0, #0
 80097a2:	d015      	beq.n	80097d0 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	1c11      	adds	r1, r2, #0
 80097ac:	0018      	movs	r0, r3
 80097ae:	f000 fa4f 	bl	8009c50 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	0018      	movs	r0, r3
 80097b6:	f000 f8e5 	bl	8009984 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80097ba:	1c04      	adds	r4, r0, #0
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	0018      	movs	r0, r3
 80097c0:	f000 f8ea 	bl	8009998 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80097c4:	1c02      	adds	r2, r0, #0
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1c21      	adds	r1, r4, #0
 80097ca:	0018      	movs	r0, r3
 80097cc:	f000 fb7a 	bl	8009ec4 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d4:	21fc      	movs	r1, #252	@ 0xfc
 80097d6:	0589      	lsls	r1, r1, #22
 80097d8:	1c18      	adds	r0, r3, #0
 80097da:	f7f7 f871 	bl	80008c0 <__aeabi_fadd>
 80097de:	1c03      	adds	r3, r0, #0
 80097e0:	1c18      	adds	r0, r3, #0
 80097e2:	f7f7 fed5 	bl	8001590 <__aeabi_f2iz>
 80097e6:	0002      	movs	r2, r0
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	601a      	str	r2, [r3, #0]
    return;
 80097ec:	46c0      	nop			@ (mov r8, r8)
}
 80097ee:	46bd      	mov	sp, r7
 80097f0:	b005      	add	sp, #20
 80097f2:	bd90      	pop	{r4, r7, pc}
 80097f4:	42340000 	.word	0x42340000
 80097f8:	0000fde7 	.word	0x0000fde7
 80097fc:	00007fff 	.word	0x00007fff

08009800 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8009800:	b5b0      	push	{r4, r5, r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	223c      	movs	r2, #60	@ 0x3c
 800980c:	2100      	movs	r1, #0
 800980e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	4952      	ldr	r1, [pc, #328]	@ (8009974 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800982a:	1c18      	adds	r0, r3, #0
 800982c:	f7f7 f9d2 	bl	8000bd4 <__aeabi_fdiv>
 8009830:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009832:	2188      	movs	r1, #136	@ 0x88
 8009834:	05c9      	lsls	r1, r1, #23
 8009836:	1c18      	adds	r0, r3, #0
 8009838:	f7f7 fbb2 	bl	8000fa0 <__aeabi_fmul>
 800983c:	1c03      	adds	r3, r0, #0
 800983e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	494a      	ldr	r1, [pc, #296]	@ (8009974 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800984a:	1c18      	adds	r0, r3, #0
 800984c:	f7f7 f9c2 	bl	8000bd4 <__aeabi_fdiv>
 8009850:	1c03      	adds	r3, r0, #0
 8009852:	1c19      	adds	r1, r3, #0
 8009854:	1c20      	adds	r0, r4, #0
 8009856:	f7f7 f833 	bl	80008c0 <__aeabi_fadd>
 800985a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800985c:	1c19      	adds	r1, r3, #0
 800985e:	1c28      	adds	r0, r5, #0
 8009860:	f7f7 f9b8 	bl	8000bd4 <__aeabi_fdiv>
 8009864:	1c03      	adds	r3, r0, #0
 8009866:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	4940      	ldr	r1, [pc, #256]	@ (8009974 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009872:	1c18      	adds	r0, r3, #0
 8009874:	f7f7 f9ae 	bl	8000bd4 <__aeabi_fdiv>
 8009878:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800987a:	2185      	movs	r1, #133	@ 0x85
 800987c:	05c9      	lsls	r1, r1, #23
 800987e:	1c18      	adds	r0, r3, #0
 8009880:	f7f7 fb8e 	bl	8000fa0 <__aeabi_fmul>
 8009884:	1c03      	adds	r3, r0, #0
 8009886:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	4938      	ldr	r1, [pc, #224]	@ (8009974 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009892:	1c18      	adds	r0, r3, #0
 8009894:	f7f7 f99e 	bl	8000bd4 <__aeabi_fdiv>
 8009898:	1c03      	adds	r3, r0, #0
 800989a:	1c19      	adds	r1, r3, #0
 800989c:	1c20      	adds	r0, r4, #0
 800989e:	f7f7 f80f 	bl	80008c0 <__aeabi_fadd>
 80098a2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80098a4:	1c19      	adds	r1, r3, #0
 80098a6:	1c28      	adds	r0, r5, #0
 80098a8:	f7f7 f994 	bl	8000bd4 <__aeabi_fdiv>
 80098ac:	1c03      	adds	r3, r0, #0
 80098ae:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d118      	bne.n	80098ee <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80098c0:	2188      	movs	r1, #136	@ 0x88
 80098c2:	05c9      	lsls	r1, r1, #23
 80098c4:	1c18      	adds	r0, r3, #0
 80098c6:	f7f7 fb6b 	bl	8000fa0 <__aeabi_fmul>
 80098ca:	1c03      	adds	r3, r0, #0
 80098cc:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 80098d2:	4929      	ldr	r1, [pc, #164]	@ (8009978 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 80098d4:	1c18      	adds	r0, r3, #0
 80098d6:	f7f6 fff3 	bl	80008c0 <__aeabi_fadd>
 80098da:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80098dc:	1c19      	adds	r1, r3, #0
 80098de:	1c20      	adds	r0, r4, #0
 80098e0:	f7f7 f978 	bl	8000bd4 <__aeabi_fdiv>
 80098e4:	1c03      	adds	r3, r0, #0
 80098e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	655a      	str	r2, [r3, #84]	@ 0x54
 80098ec:	e017      	b.n	800991e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80098f2:	2188      	movs	r1, #136	@ 0x88
 80098f4:	05c9      	lsls	r1, r1, #23
 80098f6:	1c18      	adds	r0, r3, #0
 80098f8:	f7f7 fb52 	bl	8000fa0 <__aeabi_fmul>
 80098fc:	1c03      	adds	r3, r0, #0
 80098fe:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8009904:	491d      	ldr	r1, [pc, #116]	@ (800997c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8009906:	1c18      	adds	r0, r3, #0
 8009908:	f7f6 ffda 	bl	80008c0 <__aeabi_fadd>
 800990c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 800990e:	1c19      	adds	r1, r3, #0
 8009910:	1c20      	adds	r0, r4, #0
 8009912:	f7f7 f95f 	bl	8000bd4 <__aeabi_fdiv>
 8009916:	1c03      	adds	r3, r0, #0
 8009918:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009922:	2185      	movs	r1, #133	@ 0x85
 8009924:	05c9      	lsls	r1, r1, #23
 8009926:	1c18      	adds	r0, r3, #0
 8009928:	f7f7 fb3a 	bl	8000fa0 <__aeabi_fmul>
 800992c:	1c03      	adds	r3, r0, #0
 800992e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	4912      	ldr	r1, [pc, #72]	@ (8009980 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8009936:	1c18      	adds	r0, r3, #0
 8009938:	f7f6 ffc2 	bl	80008c0 <__aeabi_fadd>
 800993c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 800993e:	1c19      	adds	r1, r3, #0
 8009940:	1c20      	adds	r0, r4, #0
 8009942:	f7f7 f947 	bl	8000bd4 <__aeabi_fdiv>
 8009946:	1c03      	adds	r3, r0, #0
 8009948:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800996c:	46c0      	nop			@ (mov r8, r8)
 800996e:	46bd      	mov	sp, r7
 8009970:	b002      	add	sp, #8
 8009972:	bdb0      	pop	{r4, r5, r7, pc}
 8009974:	45610000 	.word	0x45610000
 8009978:	44960000 	.word	0x44960000
 800997c:	41a00000 	.word	0x41a00000
 8009980:	451c4000 	.word	0x451c4000

08009984 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8009990:	1c18      	adds	r0, r3, #0
 8009992:	46bd      	mov	sp, r7
 8009994:	b002      	add	sp, #8
 8009996:	bd80      	pop	{r7, pc}

08009998 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 80099a8:	1c19      	adds	r1, r3, #0
 80099aa:	1c10      	adds	r0, r2, #0
 80099ac:	f7f6 ff88 	bl	80008c0 <__aeabi_fadd>
 80099b0:	1c03      	adds	r3, r0, #0
}
 80099b2:	1c18      	adds	r0, r3, #0
 80099b4:	46bd      	mov	sp, r7
 80099b6:	b002      	add	sp, #8
 80099b8:	bd80      	pop	{r7, pc}

080099ba <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	223c      	movs	r2, #60	@ 0x3c
 80099c6:	5c9b      	ldrb	r3, [r3, r2]
}
 80099c8:	0018      	movs	r0, r3
 80099ca:	46bd      	mov	sp, r7
 80099cc:	b002      	add	sp, #8
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 80099d0:	b5b0      	push	{r4, r5, r7, lr}
 80099d2:	b08c      	sub	sp, #48	@ 0x30
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 80099dc:	1c19      	adds	r1, r3, #0
 80099de:	4895      	ldr	r0, [pc, #596]	@ (8009c34 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 80099e0:	f7f7 fc1c 	bl	800121c <__aeabi_fsub>
 80099e4:	1c03      	adds	r3, r0, #0
 80099e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099ec:	1c19      	adds	r1, r3, #0
 80099ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099f0:	f7f6 fdb2 	bl	8000558 <__aeabi_fcmpgt>
 80099f4:	1e03      	subs	r3, r0, #0
 80099f6:	d00b      	beq.n	8009a10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8009a00:	1c19      	adds	r1, r3, #0
 8009a02:	1c10      	adds	r0, r2, #0
 8009a04:	f7f6 ff5c 	bl	80008c0 <__aeabi_fadd>
 8009a08:	1c03      	adds	r3, r0, #0
 8009a0a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a14:	1c19      	adds	r1, r3, #0
 8009a16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a18:	f7f6 fd9e 	bl	8000558 <__aeabi_fcmpgt>
 8009a1c:	1e03      	subs	r3, r0, #0
 8009a1e:	d00b      	beq.n	8009a38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8009a28:	1c19      	adds	r1, r3, #0
 8009a2a:	1c10      	adds	r0, r2, #0
 8009a2c:	f7f6 ff48 	bl	80008c0 <__aeabi_fadd>
 8009a30:	1c03      	adds	r3, r0, #0
 8009a32:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6959      	ldr	r1, [r3, #20]
 8009a3c:	4a7e      	ldr	r2, [pc, #504]	@ (8009c38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	0018      	movs	r0, r3
 8009a42:	f000 f9f1 	bl	8009e28 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	1c11      	adds	r1, r2, #0
 8009a4e:	0018      	movs	r0, r3
 8009a50:	f000 f9fa 	bl	8009e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009a54:	1c03      	adds	r3, r0, #0
 8009a56:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009a64:	1c19      	adds	r1, r3, #0
 8009a66:	1c10      	adds	r0, r2, #0
 8009a68:	f7f7 fbd8 	bl	800121c <__aeabi_fsub>
 8009a6c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a70:	1c18      	adds	r0, r3, #0
 8009a72:	f7f7 fa95 	bl	8000fa0 <__aeabi_fmul>
 8009a76:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009a78:	1c19      	adds	r1, r3, #0
 8009a7a:	1c20      	adds	r0, r4, #0
 8009a7c:	f7f6 ff20 	bl	80008c0 <__aeabi_fadd>
 8009a80:	1c03      	adds	r3, r0, #0
 8009a82:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8009a8c:	1c19      	adds	r1, r3, #0
 8009a8e:	486b      	ldr	r0, [pc, #428]	@ (8009c3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8009a90:	f7f7 fbc4 	bl	800121c <__aeabi_fsub>
 8009a94:	1c03      	adds	r3, r0, #0
 8009a96:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	1c11      	adds	r1, r2, #0
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f000 f9d1 	bl	8009e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009aa6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8009aa8:	1c19      	adds	r1, r3, #0
 8009aaa:	1c28      	adds	r0, r5, #0
 8009aac:	f7f7 fa78 	bl	8000fa0 <__aeabi_fmul>
 8009ab0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8009ab2:	1c19      	adds	r1, r3, #0
 8009ab4:	1c20      	adds	r0, r4, #0
 8009ab6:	f7f6 ff03 	bl	80008c0 <__aeabi_fadd>
 8009aba:	1c03      	adds	r3, r0, #0
 8009abc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009abe:	4a60      	ldr	r2, [pc, #384]	@ (8009c40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8009ac0:	6a39      	ldr	r1, [r7, #32]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f000 f9af 	bl	8009e28 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	1c11      	adds	r1, r2, #0
 8009ad2:	0018      	movs	r0, r3
 8009ad4:	f000 f9b8 	bl	8009e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009ad8:	1c03      	adds	r3, r0, #0
 8009ada:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8009adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ade:	69f8      	ldr	r0, [r7, #28]
 8009ae0:	f7f7 fa5e 	bl	8000fa0 <__aeabi_fmul>
 8009ae4:	1c03      	adds	r3, r0, #0
 8009ae6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6999      	ldr	r1, [r3, #24]
 8009af0:	4a51      	ldr	r2, [pc, #324]	@ (8009c38 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	0018      	movs	r0, r3
 8009af6:	f000 f997 	bl	8009e28 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	1c11      	adds	r1, r2, #0
 8009b02:	0018      	movs	r0, r3
 8009b04:	f000 f9a0 	bl	8009e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b08:	1c03      	adds	r3, r0, #0
 8009b0a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8009b18:	1c19      	adds	r1, r3, #0
 8009b1a:	1c10      	adds	r0, r2, #0
 8009b1c:	f7f7 fb7e 	bl	800121c <__aeabi_fsub>
 8009b20:	1c03      	adds	r3, r0, #0
 8009b22:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8009b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b26:	69b8      	ldr	r0, [r7, #24]
 8009b28:	f7f7 fb78 	bl	800121c <__aeabi_fsub>
 8009b2c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8009b2e:	1c19      	adds	r1, r3, #0
 8009b30:	1c28      	adds	r0, r5, #0
 8009b32:	f7f7 fa35 	bl	8000fa0 <__aeabi_fmul>
 8009b36:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8009b38:	1c19      	adds	r1, r3, #0
 8009b3a:	1c20      	adds	r0, r4, #0
 8009b3c:	f7f6 fec0 	bl	80008c0 <__aeabi_fadd>
 8009b40:	1c03      	adds	r3, r0, #0
 8009b42:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8009b4c:	1c19      	adds	r1, r3, #0
 8009b4e:	483b      	ldr	r0, [pc, #236]	@ (8009c3c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8009b50:	f7f7 fb64 	bl	800121c <__aeabi_fsub>
 8009b54:	1c03      	adds	r3, r0, #0
 8009b56:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	1c11      	adds	r1, r2, #0
 8009b60:	0018      	movs	r0, r3
 8009b62:	f000 f971 	bl	8009e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b66:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8009b68:	1c19      	adds	r1, r3, #0
 8009b6a:	1c28      	adds	r0, r5, #0
 8009b6c:	f7f7 fa18 	bl	8000fa0 <__aeabi_fmul>
 8009b70:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8009b72:	1c19      	adds	r1, r3, #0
 8009b74:	1c20      	adds	r0, r4, #0
 8009b76:	f7f6 fea3 	bl	80008c0 <__aeabi_fadd>
 8009b7a:	1c03      	adds	r3, r0, #0
 8009b7c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009b7e:	4a30      	ldr	r2, [pc, #192]	@ (8009c40 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8009b80:	6939      	ldr	r1, [r7, #16]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	0018      	movs	r0, r3
 8009b86:	f000 f94f 	bl	8009e28 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	1c11      	adds	r1, r2, #0
 8009b92:	0018      	movs	r0, r3
 8009b94:	f000 f958 	bl	8009e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009b98:	1c03      	adds	r3, r0, #0
 8009b9a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8009b9c:	6979      	ldr	r1, [r7, #20]
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f7f7 f9fe 	bl	8000fa0 <__aeabi_fmul>
 8009ba4:	1c03      	adds	r3, r0, #0
 8009ba6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	4923      	ldr	r1, [pc, #140]	@ (8009c44 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8009bb6:	1c18      	adds	r0, r3, #0
 8009bb8:	f7f7 f80c 	bl	8000bd4 <__aeabi_fdiv>
 8009bbc:	1c03      	adds	r3, r0, #0
 8009bbe:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8009bc0:	69f9      	ldr	r1, [r7, #28]
 8009bc2:	20fe      	movs	r0, #254	@ 0xfe
 8009bc4:	0580      	lsls	r0, r0, #22
 8009bc6:	f7f7 fb29 	bl	800121c <__aeabi_fsub>
 8009bca:	1c03      	adds	r3, r0, #0
 8009bcc:	491e      	ldr	r1, [pc, #120]	@ (8009c48 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8009bce:	1c18      	adds	r0, r3, #0
 8009bd0:	f7f7 f9e6 	bl	8000fa0 <__aeabi_fmul>
 8009bd4:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8009bd6:	491d      	ldr	r1, [pc, #116]	@ (8009c4c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8009bd8:	1c18      	adds	r0, r3, #0
 8009bda:	f7f7 fb1f 	bl	800121c <__aeabi_fsub>
 8009bde:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8009be0:	1c19      	adds	r1, r3, #0
 8009be2:	1c28      	adds	r0, r5, #0
 8009be4:	f7f7 f9dc 	bl	8000fa0 <__aeabi_fmul>
 8009be8:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8009bea:	1c19      	adds	r1, r3, #0
 8009bec:	1c20      	adds	r0, r4, #0
 8009bee:	f7f6 fe67 	bl	80008c0 <__aeabi_fadd>
 8009bf2:	1c03      	adds	r3, r0, #0
 8009bf4:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bfe:	2100      	movs	r1, #0
 8009c00:	1c18      	adds	r0, r3, #0
 8009c02:	f7f6 fc95 	bl	8000530 <__aeabi_fcmplt>
 8009c06:	1e03      	subs	r3, r0, #0
 8009c08:	d002      	beq.n	8009c10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8009c18:	1c19      	adds	r1, r3, #0
 8009c1a:	1c10      	adds	r0, r2, #0
 8009c1c:	f7f6 fc9c 	bl	8000558 <__aeabi_fcmpgt>
 8009c20:	1e03      	subs	r3, r0, #0
 8009c22:	d100      	bne.n	8009c26 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8009c24:	e002      	b.n	8009c2c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009c2c:	46c0      	nop			@ (mov r8, r8)
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	b00c      	add	sp, #48	@ 0x30
 8009c32:	bdb0      	pop	{r4, r5, r7, pc}
 8009c34:	46fffe00 	.word	0x46fffe00
 8009c38:	3c23d70a 	.word	0x3c23d70a
 8009c3c:	43ff0000 	.word	0x43ff0000
 8009c40:	3db851ec 	.word	0x3db851ec
 8009c44:	42700000 	.word	0x42700000
 8009c48:	3fa66666 	.word	0x3fa66666
 8009c4c:	3e99999a 	.word	0x3e99999a

08009c50 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8009c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	223c      	movs	r2, #60	@ 0x3c
 8009c5e:	5c9b      	ldrb	r3, [r3, r2]
 8009c60:	2201      	movs	r2, #1
 8009c62:	4053      	eors	r3, r2
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	223c      	movs	r2, #60	@ 0x3c
 8009c6e:	2101      	movs	r1, #1
 8009c70:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8009c7e:	e0c8      	b.n	8009e12 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c84:	4965      	ldr	r1, [pc, #404]	@ (8009e1c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8009c86:	1c18      	adds	r0, r3, #0
 8009c88:	f7f6 fc70 	bl	800056c <__aeabi_fcmpge>
 8009c8c:	1e03      	subs	r3, r0, #0
 8009c8e:	d107      	bne.n	8009ca0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8009c94:	4962      	ldr	r1, [pc, #392]	@ (8009e20 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8009c96:	1c18      	adds	r0, r3, #0
 8009c98:	f7f6 fc54 	bl	8000544 <__aeabi_fcmple>
 8009c9c:	1e03      	subs	r3, r0, #0
 8009c9e:	d00e      	beq.n	8009cbe <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8009ca8:	1c19      	adds	r1, r3, #0
 8009caa:	1c10      	adds	r0, r2, #0
 8009cac:	f7f6 fe08 	bl	80008c0 <__aeabi_fadd>
 8009cb0:	1c03      	adds	r3, r0, #0
 8009cb2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc2:	1c19      	adds	r1, r3, #0
 8009cc4:	6838      	ldr	r0, [r7, #0]
 8009cc6:	f7f7 faa9 	bl	800121c <__aeabi_fsub>
 8009cca:	1c03      	adds	r3, r0, #0
 8009ccc:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	0018      	movs	r0, r3
 8009cd2:	f7ff fe7d 	bl	80099d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cda:	1c19      	adds	r1, r3, #0
 8009cdc:	6838      	ldr	r0, [r7, #0]
 8009cde:	f7f7 fa9d 	bl	800121c <__aeabi_fsub>
 8009ce2:	1c03      	adds	r3, r0, #0
 8009ce4:	2185      	movs	r1, #133	@ 0x85
 8009ce6:	05c9      	lsls	r1, r1, #23
 8009ce8:	1c18      	adds	r0, r3, #0
 8009cea:	f7f6 ff73 	bl	8000bd4 <__aeabi_fdiv>
 8009cee:	1c03      	adds	r3, r0, #0
 8009cf0:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f7f6 fc1b 	bl	8000530 <__aeabi_fcmplt>
 8009cfa:	1e03      	subs	r3, r0, #0
 8009cfc:	d008      	beq.n	8009d10 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d02:	68f9      	ldr	r1, [r7, #12]
 8009d04:	1c18      	adds	r0, r3, #0
 8009d06:	f7f7 fa89 	bl	800121c <__aeabi_fsub>
 8009d0a:	1c03      	adds	r3, r0, #0
 8009d0c:	617b      	str	r3, [r7, #20]
 8009d0e:	e007      	b.n	8009d20 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d14:	1c19      	adds	r1, r3, #0
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f7f6 fdd2 	bl	80008c0 <__aeabi_fadd>
 8009d1c:	1c03      	adds	r3, r0, #0
 8009d1e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8009d20:	23fe      	movs	r3, #254	@ 0xfe
 8009d22:	059b      	lsls	r3, r3, #22
 8009d24:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8009d26:	493f      	ldr	r1, [pc, #252]	@ (8009e24 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8009d28:	6978      	ldr	r0, [r7, #20]
 8009d2a:	f7f6 fc15 	bl	8000558 <__aeabi_fcmpgt>
 8009d2e:	1e03      	subs	r3, r0, #0
 8009d30:	d010      	beq.n	8009d54 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8009d32:	493c      	ldr	r1, [pc, #240]	@ (8009e24 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8009d34:	6978      	ldr	r0, [r7, #20]
 8009d36:	f7f6 ff4d 	bl	8000bd4 <__aeabi_fdiv>
 8009d3a:	1c03      	adds	r3, r0, #0
 8009d3c:	1c1c      	adds	r4, r3, #0
 8009d3e:	4939      	ldr	r1, [pc, #228]	@ (8009e24 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8009d40:	6978      	ldr	r0, [r7, #20]
 8009d42:	f7f6 ff47 	bl	8000bd4 <__aeabi_fdiv>
 8009d46:	1c03      	adds	r3, r0, #0
 8009d48:	1c19      	adds	r1, r3, #0
 8009d4a:	1c20      	adds	r0, r4, #0
 8009d4c:	f7f7 f928 	bl	8000fa0 <__aeabi_fmul>
 8009d50:	1c03      	adds	r3, r0, #0
 8009d52:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8009d58:	1c19      	adds	r1, r3, #0
 8009d5a:	2085      	movs	r0, #133	@ 0x85
 8009d5c:	05c0      	lsls	r0, r0, #23
 8009d5e:	f7f7 fa5d 	bl	800121c <__aeabi_fsub>
 8009d62:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8009d64:	6939      	ldr	r1, [r7, #16]
 8009d66:	1c18      	adds	r0, r3, #0
 8009d68:	f7f7 f91a 	bl	8000fa0 <__aeabi_fmul>
 8009d6c:	1c03      	adds	r3, r0, #0
 8009d6e:	1c18      	adds	r0, r3, #0
 8009d70:	f017 fa9e 	bl	80212b0 <sqrtf>
 8009d74:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009d7e:	2185      	movs	r1, #133	@ 0x85
 8009d80:	05c9      	lsls	r1, r1, #23
 8009d82:	6938      	ldr	r0, [r7, #16]
 8009d84:	f7f7 f90c 	bl	8000fa0 <__aeabi_fmul>
 8009d88:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8009d8a:	1c19      	adds	r1, r3, #0
 8009d8c:	1c28      	adds	r0, r5, #0
 8009d8e:	f7f6 ff21 	bl	8000bd4 <__aeabi_fdiv>
 8009d92:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8009d94:	1c19      	adds	r1, r3, #0
 8009d96:	1c20      	adds	r0, r4, #0
 8009d98:	f7f7 f902 	bl	8000fa0 <__aeabi_fmul>
 8009d9c:	1c03      	adds	r3, r0, #0
 8009d9e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009da4:	68f9      	ldr	r1, [r7, #12]
 8009da6:	1c18      	adds	r0, r3, #0
 8009da8:	f7f7 f8fa 	bl	8000fa0 <__aeabi_fmul>
 8009dac:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8009dae:	6939      	ldr	r1, [r7, #16]
 8009db0:	1c18      	adds	r0, r3, #0
 8009db2:	f7f6 ff0f 	bl	8000bd4 <__aeabi_fdiv>
 8009db6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8009db8:	68f9      	ldr	r1, [r7, #12]
 8009dba:	1c18      	adds	r0, r3, #0
 8009dbc:	f7f7 f8f0 	bl	8000fa0 <__aeabi_fmul>
 8009dc0:	1c03      	adds	r3, r0, #0
             sqrtf(
 8009dc2:	1c19      	adds	r1, r3, #0
 8009dc4:	1c20      	adds	r0, r4, #0
 8009dc6:	f7f6 fd7b 	bl	80008c0 <__aeabi_fadd>
 8009dca:	1c03      	adds	r3, r0, #0
 8009dcc:	1c18      	adds	r0, r3, #0
 8009dce:	f017 fa6f 	bl	80212b0 <sqrtf>
 8009dd2:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8009dd4:	1c19      	adds	r1, r3, #0
 8009dd6:	1c30      	adds	r0, r6, #0
 8009dd8:	f7f7 f8e2 	bl	8000fa0 <__aeabi_fmul>
 8009ddc:	1c03      	adds	r3, r0, #0
 8009dde:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	1c18      	adds	r0, r3, #0
 8009df0:	f7f7 f8d6 	bl	8000fa0 <__aeabi_fmul>
 8009df4:	1c03      	adds	r3, r0, #0
 8009df6:	2182      	movs	r1, #130	@ 0x82
 8009df8:	05c9      	lsls	r1, r1, #23
 8009dfa:	1c18      	adds	r0, r3, #0
 8009dfc:	f7f6 feea 	bl	8000bd4 <__aeabi_fdiv>
 8009e00:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8009e02:	1c19      	adds	r1, r3, #0
 8009e04:	1c20      	adds	r0, r4, #0
 8009e06:	f7f6 fd5b 	bl	80008c0 <__aeabi_fadd>
 8009e0a:	1c03      	adds	r3, r0, #0
 8009e0c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009e12:	46c0      	nop			@ (mov r8, r8)
 8009e14:	46bd      	mov	sp, r7
 8009e16:	b007      	add	sp, #28
 8009e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1a:	46c0      	nop			@ (mov r8, r8)
 8009e1c:	42c80000 	.word	0x42c80000
 8009e20:	c2c80000 	.word	0xc2c80000
 8009e24:	44b40000 	.word	0x44b40000

08009e28 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	60b9      	str	r1, [r7, #8]
 8009e32:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e40:	46c0      	nop			@ (mov r8, r8)
 8009e42:	46bd      	mov	sp, r7
 8009e44:	b004      	add	sp, #16
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8009e48:	b590      	push	{r4, r7, lr}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e5a:	1c19      	adds	r1, r3, #0
 8009e5c:	6838      	ldr	r0, [r7, #0]
 8009e5e:	f7f7 f9dd 	bl	800121c <__aeabi_fsub>
 8009e62:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8009e64:	1c19      	adds	r1, r3, #0
 8009e66:	1c20      	adds	r0, r4, #0
 8009e68:	f7f7 f89a 	bl	8000fa0 <__aeabi_fmul>
 8009e6c:	1c03      	adds	r3, r0, #0
 8009e6e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8009e70:	4912      	ldr	r1, [pc, #72]	@ (8009ebc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7f6 fb5c 	bl	8000530 <__aeabi_fcmplt>
 8009e78:	1e03      	subs	r3, r0, #0
 8009e7a:	d002      	beq.n	8009e82 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8009e7c:	23fe      	movs	r3, #254	@ 0xfe
 8009e7e:	059b      	lsls	r3, r3, #22
 8009e80:	e018      	b.n	8009eb4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8009e82:	490f      	ldr	r1, [pc, #60]	@ (8009ec0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7f6 fb67 	bl	8000558 <__aeabi_fcmpgt>
 8009e8a:	1e03      	subs	r3, r0, #0
 8009e8c:	d001      	beq.n	8009e92 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	e010      	b.n	8009eb4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	1c18      	adds	r0, r3, #0
 8009e96:	f017 f9e3 	bl	8021260 <expf>
 8009e9a:	1c03      	adds	r3, r0, #0
 8009e9c:	21fe      	movs	r1, #254	@ 0xfe
 8009e9e:	0589      	lsls	r1, r1, #22
 8009ea0:	1c18      	adds	r0, r3, #0
 8009ea2:	f7f6 fd0d 	bl	80008c0 <__aeabi_fadd>
 8009ea6:	1c03      	adds	r3, r0, #0
 8009ea8:	1c19      	adds	r1, r3, #0
 8009eaa:	20fe      	movs	r0, #254	@ 0xfe
 8009eac:	0580      	lsls	r0, r0, #22
 8009eae:	f7f6 fe91 	bl	8000bd4 <__aeabi_fdiv>
 8009eb2:	1c03      	adds	r3, r0, #0
    }
}
 8009eb4:	1c18      	adds	r0, r3, #0
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	b005      	add	sp, #20
 8009eba:	bd90      	pop	{r4, r7, pc}
 8009ebc:	c2480000 	.word	0xc2480000
 8009ec0:	42480000 	.word	0x42480000

08009ec4 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8009edc:	46c0      	nop			@ (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b004      	add	sp, #16
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8009ee4:	b590      	push	{r4, r7, lr}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d114      	bne.n	8009f20 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009efa:	1c19      	adds	r1, r3, #0
 8009efc:	6838      	ldr	r0, [r7, #0]
 8009efe:	f7f7 f98d 	bl	800121c <__aeabi_fsub>
 8009f02:	1c03      	adds	r3, r0, #0
 8009f04:	4918      	ldr	r1, [pc, #96]	@ (8009f68 <GasIndexAlgorithm__mox_model__process+0x84>)
 8009f06:	1c18      	adds	r0, r3, #0
 8009f08:	f7f6 fe64 	bl	8000bd4 <__aeabi_fdiv>
 8009f0c:	1c03      	adds	r3, r0, #0
 8009f0e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8009f14:	1c19      	adds	r1, r3, #0
 8009f16:	1c10      	adds	r0, r2, #0
 8009f18:	f7f7 f842 	bl	8000fa0 <__aeabi_fmul>
 8009f1c:	1c03      	adds	r3, r0, #0
 8009f1e:	e01f      	b.n	8009f60 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f24:	1c19      	adds	r1, r3, #0
 8009f26:	6838      	ldr	r0, [r7, #0]
 8009f28:	f7f7 f978 	bl	800121c <__aeabi_fsub>
 8009f2c:	1c03      	adds	r3, r0, #0
 8009f2e:	1c1a      	adds	r2, r3, #0
 8009f30:	2380      	movs	r3, #128	@ 0x80
 8009f32:	061b      	lsls	r3, r3, #24
 8009f34:	4053      	eors	r3, r2
 8009f36:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f3c:	490b      	ldr	r1, [pc, #44]	@ (8009f6c <GasIndexAlgorithm__mox_model__process+0x88>)
 8009f3e:	1c18      	adds	r0, r3, #0
 8009f40:	f7f6 fcbe 	bl	80008c0 <__aeabi_fadd>
 8009f44:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8009f46:	1c19      	adds	r1, r3, #0
 8009f48:	1c20      	adds	r0, r4, #0
 8009f4a:	f7f6 fe43 	bl	8000bd4 <__aeabi_fdiv>
 8009f4e:	1c03      	adds	r3, r0, #0
 8009f50:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8009f56:	1c19      	adds	r1, r3, #0
 8009f58:	1c10      	adds	r0, r2, #0
 8009f5a:	f7f7 f821 	bl	8000fa0 <__aeabi_fmul>
 8009f5e:	1c03      	adds	r3, r0, #0
    }
}
 8009f60:	1c18      	adds	r0, r3, #0
 8009f62:	46bd      	mov	sp, r7
 8009f64:	b003      	add	sp, #12
 8009f66:	bd90      	pop	{r4, r7, pc}
 8009f68:	44fa0000 	.word	0x44fa0000
 8009f6c:	435c0000 	.word	0x435c0000

08009f70 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2180      	movs	r1, #128	@ 0x80
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2184      	movs	r1, #132	@ 0x84
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2188      	movs	r1, #136	@ 0x88
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	505a      	str	r2, [r3, r1]
}
 8009f96:	46c0      	nop			@ (mov r8, r8)
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	b004      	add	sp, #16
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2280      	movs	r2, #128	@ 0x80
 8009fae:	589c      	ldr	r4, [r3, r2]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2284      	movs	r2, #132	@ 0x84
 8009fb4:	589b      	ldr	r3, [r3, r2]
 8009fb6:	1c19      	adds	r1, r3, #0
 8009fb8:	6838      	ldr	r0, [r7, #0]
 8009fba:	f7f7 f92f 	bl	800121c <__aeabi_fsub>
 8009fbe:	1c03      	adds	r3, r0, #0
 8009fc0:	1c19      	adds	r1, r3, #0
 8009fc2:	1c20      	adds	r0, r4, #0
 8009fc4:	f7f6 ffec 	bl	8000fa0 <__aeabi_fmul>
 8009fc8:	1c03      	adds	r3, r0, #0
 8009fca:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8009fcc:	4940      	ldr	r1, [pc, #256]	@ (800a0d0 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8009fce:	68b8      	ldr	r0, [r7, #8]
 8009fd0:	f7f6 faae 	bl	8000530 <__aeabi_fcmplt>
 8009fd4:	1e03      	subs	r3, r0, #0
 8009fd6:	d001      	beq.n	8009fdc <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8009fd8:	4b3e      	ldr	r3, [pc, #248]	@ (800a0d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8009fda:	e075      	b.n	800a0c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8009fdc:	493e      	ldr	r1, [pc, #248]	@ (800a0d8 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8009fde:	68b8      	ldr	r0, [r7, #8]
 8009fe0:	f7f6 faba 	bl	8000558 <__aeabi_fcmpgt>
 8009fe4:	1e03      	subs	r3, r0, #0
 8009fe6:	d001      	beq.n	8009fec <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	e06d      	b.n	800a0c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8009fec:	2100      	movs	r1, #0
 8009fee:	6838      	ldr	r0, [r7, #0]
 8009ff0:	f7f6 fabc 	bl	800056c <__aeabi_fcmpge>
 8009ff4:	1e03      	subs	r3, r0, #0
 8009ff6:	d047      	beq.n	800a088 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2288      	movs	r2, #136	@ 0x88
 8009ffc:	589b      	ldr	r3, [r3, r2]
 8009ffe:	21fe      	movs	r1, #254	@ 0xfe
 800a000:	0589      	lsls	r1, r1, #22
 800a002:	1c18      	adds	r0, r3, #0
 800a004:	f7f6 fa8e 	bl	8000524 <__aeabi_fcmpeq>
 800a008:	1e03      	subs	r3, r0, #0
 800a00a:	d00e      	beq.n	800a02a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	1c19      	adds	r1, r3, #0
 800a012:	20fe      	movs	r0, #254	@ 0xfe
 800a014:	0580      	lsls	r0, r0, #22
 800a016:	f7f7 f901 	bl	800121c <__aeabi_fsub>
 800a01a:	1c03      	adds	r3, r0, #0
 800a01c:	492f      	ldr	r1, [pc, #188]	@ (800a0dc <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800a01e:	1c18      	adds	r0, r3, #0
 800a020:	f7f6 ffbe 	bl	8000fa0 <__aeabi_fmul>
 800a024:	1c03      	adds	r3, r0, #0
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	e012      	b.n	800a050 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	492c      	ldr	r1, [pc, #176]	@ (800a0e0 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800a030:	1c18      	adds	r0, r3, #0
 800a032:	f7f6 ffb5 	bl	8000fa0 <__aeabi_fmul>
 800a036:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800a038:	1c19      	adds	r1, r3, #0
 800a03a:	4826      	ldr	r0, [pc, #152]	@ (800a0d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a03c:	f7f7 f8ee 	bl	800121c <__aeabi_fsub>
 800a040:	1c03      	adds	r3, r0, #0
 800a042:	2181      	movs	r1, #129	@ 0x81
 800a044:	05c9      	lsls	r1, r1, #23
 800a046:	1c18      	adds	r0, r3, #0
 800a048:	f7f6 fdc4 	bl	8000bd4 <__aeabi_fdiv>
 800a04c:	1c03      	adds	r3, r0, #0
 800a04e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a050:	4920      	ldr	r1, [pc, #128]	@ (800a0d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a052:	68f8      	ldr	r0, [r7, #12]
 800a054:	f7f6 fc34 	bl	80008c0 <__aeabi_fadd>
 800a058:	1c03      	adds	r3, r0, #0
 800a05a:	1c1c      	adds	r4, r3, #0
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	1c18      	adds	r0, r3, #0
 800a060:	f017 f8fe 	bl	8021260 <expf>
 800a064:	1c03      	adds	r3, r0, #0
 800a066:	21fe      	movs	r1, #254	@ 0xfe
 800a068:	0589      	lsls	r1, r1, #22
 800a06a:	1c18      	adds	r0, r3, #0
 800a06c:	f7f6 fc28 	bl	80008c0 <__aeabi_fadd>
 800a070:	1c03      	adds	r3, r0, #0
 800a072:	1c19      	adds	r1, r3, #0
 800a074:	1c20      	adds	r0, r4, #0
 800a076:	f7f6 fdad 	bl	8000bd4 <__aeabi_fdiv>
 800a07a:	1c03      	adds	r3, r0, #0
 800a07c:	68f9      	ldr	r1, [r7, #12]
 800a07e:	1c18      	adds	r0, r3, #0
 800a080:	f7f7 f8cc 	bl	800121c <__aeabi_fsub>
 800a084:	1c03      	adds	r3, r0, #0
 800a086:	e01f      	b.n	800a0c8 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2188      	movs	r1, #136	@ 0x88
 800a090:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800a092:	1c19      	adds	r1, r3, #0
 800a094:	1c10      	adds	r0, r2, #0
 800a096:	f7f6 fd9d 	bl	8000bd4 <__aeabi_fdiv>
 800a09a:	1c03      	adds	r3, r0, #0
 800a09c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	1c18      	adds	r0, r3, #0
 800a0a2:	f017 f8dd 	bl	8021260 <expf>
 800a0a6:	1c03      	adds	r3, r0, #0
 800a0a8:	21fe      	movs	r1, #254	@ 0xfe
 800a0aa:	0589      	lsls	r1, r1, #22
 800a0ac:	1c18      	adds	r0, r3, #0
 800a0ae:	f7f6 fc07 	bl	80008c0 <__aeabi_fadd>
 800a0b2:	1c03      	adds	r3, r0, #0
 800a0b4:	1c19      	adds	r1, r3, #0
 800a0b6:	4807      	ldr	r0, [pc, #28]	@ (800a0d4 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a0b8:	f7f6 fd8c 	bl	8000bd4 <__aeabi_fdiv>
 800a0bc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a0be:	1c19      	adds	r1, r3, #0
 800a0c0:	1c20      	adds	r0, r4, #0
 800a0c2:	f7f6 ff6d 	bl	8000fa0 <__aeabi_fmul>
 800a0c6:	1c03      	adds	r3, r0, #0
        }
    }
}
 800a0c8:	1c18      	adds	r0, r3, #0
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	b005      	add	sp, #20
 800a0ce:	bd90      	pop	{r4, r7, pc}
 800a0d0:	c2480000 	.word	0xc2480000
 800a0d4:	43fa0000 	.word	0x43fa0000
 800a0d8:	42480000 	.word	0x42480000
 800a0dc:	3f8041ab 	.word	0x3f8041ab
 800a0e0:	40a00000 	.word	0x40a00000

0800a0e4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a0e4:	b590      	push	{r4, r7, lr}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	4913      	ldr	r1, [pc, #76]	@ (800a144 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800a0f6:	1c18      	adds	r0, r3, #0
 800a0f8:	f7f6 fbe2 	bl	80008c0 <__aeabi_fadd>
 800a0fc:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a0fe:	1c19      	adds	r1, r3, #0
 800a100:	1c20      	adds	r0, r4, #0
 800a102:	f7f6 fd67 	bl	8000bd4 <__aeabi_fdiv>
 800a106:	1c03      	adds	r3, r0, #0
 800a108:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	228c      	movs	r2, #140	@ 0x8c
 800a10e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	490b      	ldr	r1, [pc, #44]	@ (800a148 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800a11a:	1c18      	adds	r0, r3, #0
 800a11c:	f7f6 fbd0 	bl	80008c0 <__aeabi_fadd>
 800a120:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a122:	1c19      	adds	r1, r3, #0
 800a124:	1c20      	adds	r0, r4, #0
 800a126:	f7f6 fd55 	bl	8000bd4 <__aeabi_fdiv>
 800a12a:	1c03      	adds	r3, r0, #0
 800a12c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2290      	movs	r2, #144	@ 0x90
 800a132:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2294      	movs	r2, #148	@ 0x94
 800a138:	2100      	movs	r1, #0
 800a13a:	5499      	strb	r1, [r3, r2]
}
 800a13c:	46c0      	nop			@ (mov r8, r8)
 800a13e:	46bd      	mov	sp, r7
 800a140:	b003      	add	sp, #12
 800a142:	bd90      	pop	{r4, r7, pc}
 800a144:	41a00000 	.word	0x41a00000
 800a148:	43fa0000 	.word	0x43fa0000

0800a14c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800a14c:	b590      	push	{r4, r7, lr}
 800a14e:	b087      	sub	sp, #28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2294      	movs	r2, #148	@ 0x94
 800a15a:	5c9b      	ldrb	r3, [r3, r2]
 800a15c:	2201      	movs	r2, #1
 800a15e:	4053      	eors	r3, r2
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d00f      	beq.n	800a186 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2198      	movs	r1, #152	@ 0x98
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	219c      	movs	r1, #156	@ 0x9c
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	21a0      	movs	r1, #160	@ 0xa0
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2294      	movs	r2, #148	@ 0x94
 800a182:	2101      	movs	r1, #1
 800a184:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	228c      	movs	r2, #140	@ 0x8c
 800a18a:	589b      	ldr	r3, [r3, r2]
 800a18c:	1c19      	adds	r1, r3, #0
 800a18e:	20fe      	movs	r0, #254	@ 0xfe
 800a190:	0580      	lsls	r0, r0, #22
 800a192:	f7f7 f843 	bl	800121c <__aeabi_fsub>
 800a196:	1c03      	adds	r3, r0, #0
 800a198:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2298      	movs	r2, #152	@ 0x98
 800a19e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a1a0:	1c19      	adds	r1, r3, #0
 800a1a2:	f7f6 fefd 	bl	8000fa0 <__aeabi_fmul>
 800a1a6:	1c03      	adds	r3, r0, #0
 800a1a8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	228c      	movs	r2, #140	@ 0x8c
 800a1ae:	589b      	ldr	r3, [r3, r2]
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	1c18      	adds	r0, r3, #0
 800a1b4:	f7f6 fef4 	bl	8000fa0 <__aeabi_fmul>
 800a1b8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800a1ba:	1c19      	adds	r1, r3, #0
 800a1bc:	1c20      	adds	r0, r4, #0
 800a1be:	f7f6 fb7f 	bl	80008c0 <__aeabi_fadd>
 800a1c2:	1c03      	adds	r3, r0, #0
 800a1c4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2298      	movs	r2, #152	@ 0x98
 800a1ca:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2290      	movs	r2, #144	@ 0x90
 800a1d0:	589b      	ldr	r3, [r3, r2]
 800a1d2:	1c19      	adds	r1, r3, #0
 800a1d4:	20fe      	movs	r0, #254	@ 0xfe
 800a1d6:	0580      	lsls	r0, r0, #22
 800a1d8:	f7f7 f820 	bl	800121c <__aeabi_fsub>
 800a1dc:	1c03      	adds	r3, r0, #0
 800a1de:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	229c      	movs	r2, #156	@ 0x9c
 800a1e4:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a1e6:	1c19      	adds	r1, r3, #0
 800a1e8:	f7f6 feda 	bl	8000fa0 <__aeabi_fmul>
 800a1ec:	1c03      	adds	r3, r0, #0
 800a1ee:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2290      	movs	r2, #144	@ 0x90
 800a1f4:	589b      	ldr	r3, [r3, r2]
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	1c18      	adds	r0, r3, #0
 800a1fa:	f7f6 fed1 	bl	8000fa0 <__aeabi_fmul>
 800a1fe:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800a200:	1c19      	adds	r1, r3, #0
 800a202:	1c20      	adds	r0, r4, #0
 800a204:	f7f6 fb5c 	bl	80008c0 <__aeabi_fadd>
 800a208:	1c03      	adds	r3, r0, #0
 800a20a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	229c      	movs	r2, #156	@ 0x9c
 800a210:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2298      	movs	r2, #152	@ 0x98
 800a216:	589a      	ldr	r2, [r3, r2]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	219c      	movs	r1, #156	@ 0x9c
 800a21c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800a21e:	1c19      	adds	r1, r3, #0
 800a220:	1c10      	adds	r0, r2, #0
 800a222:	f7f6 fffb 	bl	800121c <__aeabi_fsub>
 800a226:	1c03      	adds	r3, r0, #0
 800a228:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800a22a:	2100      	movs	r1, #0
 800a22c:	6978      	ldr	r0, [r7, #20]
 800a22e:	f7f6 f97f 	bl	8000530 <__aeabi_fcmplt>
 800a232:	1e03      	subs	r3, r0, #0
 800a234:	d004      	beq.n	800a240 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2280      	movs	r2, #128	@ 0x80
 800a23a:	0612      	lsls	r2, r2, #24
 800a23c:	4053      	eors	r3, r2
 800a23e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800a240:	4923      	ldr	r1, [pc, #140]	@ (800a2d0 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800a242:	6978      	ldr	r0, [r7, #20]
 800a244:	f7f6 feac 	bl	8000fa0 <__aeabi_fmul>
 800a248:	1c03      	adds	r3, r0, #0
 800a24a:	1c18      	adds	r0, r3, #0
 800a24c:	f017 f808 	bl	8021260 <expf>
 800a250:	1c03      	adds	r3, r0, #0
 800a252:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800a254:	491f      	ldr	r1, [pc, #124]	@ (800a2d4 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800a256:	6938      	ldr	r0, [r7, #16]
 800a258:	f7f6 fea2 	bl	8000fa0 <__aeabi_fmul>
 800a25c:	1c03      	adds	r3, r0, #0
 800a25e:	491e      	ldr	r1, [pc, #120]	@ (800a2d8 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800a260:	1c18      	adds	r0, r3, #0
 800a262:	f7f6 fb2d 	bl	80008c0 <__aeabi_fadd>
 800a266:	1c03      	adds	r3, r0, #0
 800a268:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	685c      	ldr	r4, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	68f9      	ldr	r1, [r7, #12]
 800a274:	1c18      	adds	r0, r3, #0
 800a276:	f7f6 fb23 	bl	80008c0 <__aeabi_fadd>
 800a27a:	1c03      	adds	r3, r0, #0
 800a27c:	1c19      	adds	r1, r3, #0
 800a27e:	1c20      	adds	r0, r4, #0
 800a280:	f7f6 fca8 	bl	8000bd4 <__aeabi_fdiv>
 800a284:	1c03      	adds	r3, r0, #0
 800a286:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800a288:	68b9      	ldr	r1, [r7, #8]
 800a28a:	20fe      	movs	r0, #254	@ 0xfe
 800a28c:	0580      	lsls	r0, r0, #22
 800a28e:	f7f6 ffc5 	bl	800121c <__aeabi_fsub>
 800a292:	1c03      	adds	r3, r0, #0
 800a294:	1c18      	adds	r0, r3, #0
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	22a0      	movs	r2, #160	@ 0xa0
 800a29a:	589b      	ldr	r3, [r3, r2]
 800a29c:	1c19      	adds	r1, r3, #0
 800a29e:	f7f6 fe7f 	bl	8000fa0 <__aeabi_fmul>
 800a2a2:	1c03      	adds	r3, r0, #0
 800a2a4:	1c1c      	adds	r4, r3, #0
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	68b8      	ldr	r0, [r7, #8]
 800a2aa:	f7f6 fe79 	bl	8000fa0 <__aeabi_fmul>
 800a2ae:	1c03      	adds	r3, r0, #0
 800a2b0:	1c19      	adds	r1, r3, #0
 800a2b2:	1c20      	adds	r0, r4, #0
 800a2b4:	f7f6 fb04 	bl	80008c0 <__aeabi_fadd>
 800a2b8:	1c03      	adds	r3, r0, #0
 800a2ba:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	22a0      	movs	r2, #160	@ 0xa0
 800a2c0:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	22a0      	movs	r2, #160	@ 0xa0
 800a2c6:	589b      	ldr	r3, [r3, r2]
}
 800a2c8:	1c18      	adds	r0, r3, #0
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	b007      	add	sp, #28
 800a2ce:	bd90      	pop	{r4, r7, pc}
 800a2d0:	be4ccccd 	.word	0xbe4ccccd
 800a2d4:	43f00000 	.word	0x43f00000
 800a2d8:	41a00000 	.word	0x41a00000

0800a2dc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	000a      	movs	r2, r1
 800a2e6:	1cbb      	adds	r3, r7, #2
 800a2e8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800a2ea:	230d      	movs	r3, #13
 800a2ec:	18fb      	adds	r3, r7, r3
 800a2ee:	22ff      	movs	r2, #255	@ 0xff
 800a2f0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a2f2:	230e      	movs	r3, #14
 800a2f4:	18fb      	adds	r3, r7, r3
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	801a      	strh	r2, [r3, #0]
 800a2fa:	e037      	b.n	800a36c <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800a2fc:	230e      	movs	r3, #14
 800a2fe:	18fb      	adds	r3, r7, r3
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	18d3      	adds	r3, r2, r3
 800a306:	7819      	ldrb	r1, [r3, #0]
 800a308:	220d      	movs	r2, #13
 800a30a:	18bb      	adds	r3, r7, r2
 800a30c:	18ba      	adds	r2, r7, r2
 800a30e:	7812      	ldrb	r2, [r2, #0]
 800a310:	404a      	eors	r2, r1
 800a312:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a314:	230c      	movs	r3, #12
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	2208      	movs	r2, #8
 800a31a:	701a      	strb	r2, [r3, #0]
 800a31c:	e01b      	b.n	800a356 <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800a31e:	210d      	movs	r1, #13
 800a320:	187b      	adds	r3, r7, r1
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	b25b      	sxtb	r3, r3
 800a326:	2b00      	cmp	r3, #0
 800a328:	da09      	bge.n	800a33e <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800a32a:	187b      	adds	r3, r7, r1
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	005b      	lsls	r3, r3, #1
 800a330:	b25b      	sxtb	r3, r3
 800a332:	2231      	movs	r2, #49	@ 0x31
 800a334:	4053      	eors	r3, r2
 800a336:	b25a      	sxtb	r2, r3
 800a338:	187b      	adds	r3, r7, r1
 800a33a:	701a      	strb	r2, [r3, #0]
 800a33c:	e005      	b.n	800a34a <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800a33e:	230d      	movs	r3, #13
 800a340:	18fa      	adds	r2, r7, r3
 800a342:	18fb      	adds	r3, r7, r3
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	18db      	adds	r3, r3, r3
 800a348:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a34a:	220c      	movs	r2, #12
 800a34c:	18bb      	adds	r3, r7, r2
 800a34e:	18ba      	adds	r2, r7, r2
 800a350:	7812      	ldrb	r2, [r2, #0]
 800a352:	3a01      	subs	r2, #1
 800a354:	701a      	strb	r2, [r3, #0]
 800a356:	230c      	movs	r3, #12
 800a358:	18fb      	adds	r3, r7, r3
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1de      	bne.n	800a31e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a360:	220e      	movs	r2, #14
 800a362:	18bb      	adds	r3, r7, r2
 800a364:	18ba      	adds	r2, r7, r2
 800a366:	8812      	ldrh	r2, [r2, #0]
 800a368:	3201      	adds	r2, #1
 800a36a:	801a      	strh	r2, [r3, #0]
 800a36c:	230e      	movs	r3, #14
 800a36e:	18fa      	adds	r2, r7, r3
 800a370:	1cbb      	adds	r3, r7, #2
 800a372:	8812      	ldrh	r2, [r2, #0]
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d3c0      	bcc.n	800a2fc <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800a37a:	230d      	movs	r3, #13
 800a37c:	18fb      	adds	r3, r7, r3
 800a37e:	781b      	ldrb	r3, [r3, #0]
}
 800a380:	0018      	movs	r0, r3
 800a382:	46bd      	mov	sp, r7
 800a384:	b004      	add	sp, #16
 800a386:	bd80      	pop	{r7, pc}

0800a388 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	0008      	movs	r0, r1
 800a392:	0011      	movs	r1, r2
 800a394:	1cbb      	adds	r3, r7, #2
 800a396:	1c02      	adds	r2, r0, #0
 800a398:	801a      	strh	r2, [r3, #0]
 800a39a:	1c7b      	adds	r3, r7, #1
 800a39c:	1c0a      	adds	r2, r1, #0
 800a39e:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800a3a0:	1cbb      	adds	r3, r7, #2
 800a3a2:	881a      	ldrh	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	0011      	movs	r1, r2
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	f7ff ff97 	bl	800a2dc <sensirion_i2c_generate_crc>
 800a3ae:	0003      	movs	r3, r0
 800a3b0:	001a      	movs	r2, r3
 800a3b2:	1c7b      	adds	r3, r7, #1
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d001      	beq.n	800a3be <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e000      	b.n	800a3c0 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	b002      	add	sp, #8
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	0008      	movs	r0, r1
 800a3d2:	0011      	movs	r1, r2
 800a3d4:	1cbb      	adds	r3, r7, #2
 800a3d6:	1c02      	adds	r2, r0, #0
 800a3d8:	801a      	strh	r2, [r3, #0]
 800a3da:	003b      	movs	r3, r7
 800a3dc:	1c0a      	adds	r2, r1, #0
 800a3de:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800a3e0:	003b      	movs	r3, r7
 800a3e2:	881b      	ldrh	r3, [r3, #0]
 800a3e4:	0a1b      	lsrs	r3, r3, #8
 800a3e6:	b299      	uxth	r1, r3
 800a3e8:	1cbb      	adds	r3, r7, #2
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	1cba      	adds	r2, r7, #2
 800a3ee:	1c58      	adds	r0, r3, #1
 800a3f0:	8010      	strh	r0, [r2, #0]
 800a3f2:	001a      	movs	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	189b      	adds	r3, r3, r2
 800a3f8:	b2ca      	uxtb	r2, r1
 800a3fa:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800a3fc:	1cbb      	adds	r3, r7, #2
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	1cba      	adds	r2, r7, #2
 800a402:	1c59      	adds	r1, r3, #1
 800a404:	8011      	strh	r1, [r2, #0]
 800a406:	001a      	movs	r2, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	189b      	adds	r3, r3, r2
 800a40c:	003a      	movs	r2, r7
 800a40e:	8812      	ldrh	r2, [r2, #0]
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	701a      	strb	r2, [r3, #0]
    return offset;
 800a414:	1cbb      	adds	r3, r7, #2
 800a416:	881b      	ldrh	r3, [r3, #0]
}
 800a418:	0018      	movs	r0, r3
 800a41a:	46bd      	mov	sp, r7
 800a41c:	b002      	add	sp, #8
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800a420:	b590      	push	{r4, r7, lr}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	0008      	movs	r0, r1
 800a42a:	0011      	movs	r1, r2
 800a42c:	1cbb      	adds	r3, r7, #2
 800a42e:	1c02      	adds	r2, r0, #0
 800a430:	801a      	strh	r2, [r3, #0]
 800a432:	003b      	movs	r3, r7
 800a434:	1c0a      	adds	r2, r1, #0
 800a436:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800a438:	003b      	movs	r3, r7
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	0a1b      	lsrs	r3, r3, #8
 800a43e:	b299      	uxth	r1, r3
 800a440:	1cbb      	adds	r3, r7, #2
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	1cba      	adds	r2, r7, #2
 800a446:	1c58      	adds	r0, r3, #1
 800a448:	8010      	strh	r0, [r2, #0]
 800a44a:	001a      	movs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	189b      	adds	r3, r3, r2
 800a450:	b2ca      	uxtb	r2, r1
 800a452:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800a454:	1cbb      	adds	r3, r7, #2
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	1cba      	adds	r2, r7, #2
 800a45a:	1c59      	adds	r1, r3, #1
 800a45c:	8011      	strh	r1, [r2, #0]
 800a45e:	001a      	movs	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	189b      	adds	r3, r3, r2
 800a464:	003a      	movs	r2, r7
 800a466:	8812      	ldrh	r2, [r2, #0]
 800a468:	b2d2      	uxtb	r2, r2
 800a46a:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800a46c:	1cbb      	adds	r3, r7, #2
 800a46e:	881b      	ldrh	r3, [r3, #0]
 800a470:	3b02      	subs	r3, #2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800a476:	1cbb      	adds	r3, r7, #2
 800a478:	881b      	ldrh	r3, [r3, #0]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	18d4      	adds	r4, r2, r3
 800a47e:	2102      	movs	r1, #2
 800a480:	f7ff ff2c 	bl	800a2dc <sensirion_i2c_generate_crc>
 800a484:	0003      	movs	r3, r0
 800a486:	7023      	strb	r3, [r4, #0]
    offset++;
 800a488:	1cbb      	adds	r3, r7, #2
 800a48a:	881a      	ldrh	r2, [r3, #0]
 800a48c:	1cbb      	adds	r3, r7, #2
 800a48e:	3201      	adds	r2, #1
 800a490:	801a      	strh	r2, [r3, #0]

    return offset;
 800a492:	1cbb      	adds	r3, r7, #2
 800a494:	881b      	ldrh	r3, [r3, #0]
}
 800a496:	0018      	movs	r0, r3
 800a498:	46bd      	mov	sp, r7
 800a49a:	b003      	add	sp, #12
 800a49c:	bd90      	pop	{r4, r7, pc}

0800a49e <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	0008      	movs	r0, r1
 800a4a8:	0011      	movs	r1, r2
 800a4aa:	1cbb      	adds	r3, r7, #2
 800a4ac:	1c02      	adds	r2, r0, #0
 800a4ae:	801a      	strh	r2, [r3, #0]
 800a4b0:	003b      	movs	r3, r7
 800a4b2:	1c0a      	adds	r2, r1, #0
 800a4b4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800a4b6:	003b      	movs	r3, r7
 800a4b8:	881a      	ldrh	r2, [r3, #0]
 800a4ba:	1cbb      	adds	r3, r7, #2
 800a4bc:	8819      	ldrh	r1, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	0018      	movs	r0, r3
 800a4c2:	f7ff ffad 	bl	800a420 <sensirion_i2c_add_uint16_t_to_buffer>
 800a4c6:	0003      	movs	r3, r0
}
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	b002      	add	sp, #8
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b082      	sub	sp, #8
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6039      	str	r1, [r7, #0]
 800a4d8:	0011      	movs	r1, r2
 800a4da:	1dfb      	adds	r3, r7, #7
 800a4dc:	1c02      	adds	r2, r0, #0
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	1d3b      	adds	r3, r7, #4
 800a4e2:	1c0a      	adds	r2, r1, #0
 800a4e4:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800a4e6:	1d3b      	adds	r3, r7, #4
 800a4e8:	881a      	ldrh	r2, [r3, #0]
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	1dfb      	adds	r3, r7, #7
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	0018      	movs	r0, r3
 800a4f2:	f7fe fa63 	bl	80089bc <sensirion_i2c_hal_write>
 800a4f6:	0003      	movs	r3, r0
}
 800a4f8:	0018      	movs	r0, r3
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	b002      	add	sp, #8
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800a500:	b5b0      	push	{r4, r5, r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6039      	str	r1, [r7, #0]
 800a508:	0011      	movs	r1, r2
 800a50a:	1dfb      	adds	r3, r7, #7
 800a50c:	1c02      	adds	r2, r0, #0
 800a50e:	701a      	strb	r2, [r3, #0]
 800a510:	1d3b      	adds	r3, r7, #4
 800a512:	1c0a      	adds	r2, r1, #0
 800a514:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800a516:	1d3b      	adds	r3, r7, #4
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	220a      	movs	r2, #10
 800a520:	18ba      	adds	r2, r7, r2
 800a522:	1c19      	adds	r1, r3, #0
 800a524:	1c0b      	adds	r3, r1, #0
 800a526:	18db      	adds	r3, r3, r3
 800a528:	185b      	adds	r3, r3, r1
 800a52a:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800a52c:	1d3b      	adds	r3, r7, #4
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	2201      	movs	r2, #1
 800a532:	4013      	ands	r3, r2
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800a53a:	2304      	movs	r3, #4
 800a53c:	e06b      	b.n	800a616 <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800a53e:	230a      	movs	r3, #10
 800a540:	18fb      	adds	r3, r7, r3
 800a542:	881a      	ldrh	r2, [r3, #0]
 800a544:	6839      	ldr	r1, [r7, #0]
 800a546:	1dfb      	adds	r3, r7, #7
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	0018      	movs	r0, r3
 800a54c:	f7fe fa16 	bl	800897c <sensirion_i2c_hal_read>
 800a550:	0003      	movs	r3, r0
 800a552:	001a      	movs	r2, r3
 800a554:	2108      	movs	r1, #8
 800a556:	187b      	adds	r3, r7, r1
 800a558:	801a      	strh	r2, [r3, #0]
    if (error) {
 800a55a:	000a      	movs	r2, r1
 800a55c:	18bb      	adds	r3, r7, r2
 800a55e:	2100      	movs	r1, #0
 800a560:	5e5b      	ldrsh	r3, [r3, r1]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800a566:	18bb      	adds	r3, r7, r2
 800a568:	2200      	movs	r2, #0
 800a56a:	5e9b      	ldrsh	r3, [r3, r2]
 800a56c:	e053      	b.n	800a616 <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800a56e:	230e      	movs	r3, #14
 800a570:	18fb      	adds	r3, r7, r3
 800a572:	2200      	movs	r2, #0
 800a574:	801a      	strh	r2, [r3, #0]
 800a576:	230c      	movs	r3, #12
 800a578:	18fb      	adds	r3, r7, r3
 800a57a:	2200      	movs	r2, #0
 800a57c:	801a      	strh	r2, [r3, #0]
 800a57e:	e041      	b.n	800a604 <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800a580:	210e      	movs	r1, #14
 800a582:	187b      	adds	r3, r7, r1
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800a58a:	187b      	adds	r3, r7, r1
 800a58c:	881b      	ldrh	r3, [r3, #0]
 800a58e:	3302      	adds	r3, #2
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	001a      	movs	r2, r3
 800a598:	2102      	movs	r1, #2
 800a59a:	f7ff fef5 	bl	800a388 <sensirion_i2c_check_crc>
 800a59e:	0003      	movs	r3, r0
 800a5a0:	001a      	movs	r2, r3
 800a5a2:	2108      	movs	r1, #8
 800a5a4:	187b      	adds	r3, r7, r1
 800a5a6:	801a      	strh	r2, [r3, #0]
        if (error) {
 800a5a8:	000a      	movs	r2, r1
 800a5aa:	18bb      	adds	r3, r7, r2
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	5e5b      	ldrsh	r3, [r3, r1]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d003      	beq.n	800a5bc <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800a5b4:	18bb      	adds	r3, r7, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	5e9b      	ldrsh	r3, [r3, r2]
 800a5ba:	e02c      	b.n	800a616 <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800a5bc:	240e      	movs	r4, #14
 800a5be:	193b      	adds	r3, r7, r4
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	18d2      	adds	r2, r2, r3
 800a5c6:	250c      	movs	r5, #12
 800a5c8:	197b      	adds	r3, r7, r5
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	1979      	adds	r1, r7, r5
 800a5ce:	1c58      	adds	r0, r3, #1
 800a5d0:	8008      	strh	r0, [r1, #0]
 800a5d2:	0019      	movs	r1, r3
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	185b      	adds	r3, r3, r1
 800a5d8:	7812      	ldrb	r2, [r2, #0]
 800a5da:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800a5dc:	193b      	adds	r3, r7, r4
 800a5de:	881b      	ldrh	r3, [r3, #0]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	18d2      	adds	r2, r2, r3
 800a5e6:	197b      	adds	r3, r7, r5
 800a5e8:	881b      	ldrh	r3, [r3, #0]
 800a5ea:	1979      	adds	r1, r7, r5
 800a5ec:	1c58      	adds	r0, r3, #1
 800a5ee:	8008      	strh	r0, [r1, #0]
 800a5f0:	0019      	movs	r1, r3
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	185b      	adds	r3, r3, r1
 800a5f6:	7812      	ldrb	r2, [r2, #0]
 800a5f8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800a5fa:	193b      	adds	r3, r7, r4
 800a5fc:	193a      	adds	r2, r7, r4
 800a5fe:	8812      	ldrh	r2, [r2, #0]
 800a600:	3203      	adds	r2, #3
 800a602:	801a      	strh	r2, [r3, #0]
 800a604:	230e      	movs	r3, #14
 800a606:	18fa      	adds	r2, r7, r3
 800a608:	230a      	movs	r3, #10
 800a60a:	18fb      	adds	r3, r7, r3
 800a60c:	8812      	ldrh	r2, [r2, #0]
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	429a      	cmp	r2, r3
 800a612:	d3b5      	bcc.n	800a580 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800a614:	2300      	movs	r3, #0
}
 800a616:	0018      	movs	r0, r3
 800a618:	46bd      	mov	sp, r7
 800a61a:	b004      	add	sp, #16
 800a61c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a620 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6039      	str	r1, [r7, #0]
 800a628:	0011      	movs	r1, r2
 800a62a:	1dfb      	adds	r3, r7, #7
 800a62c:	1c02      	adds	r2, r0, #0
 800a62e:	701a      	strb	r2, [r3, #0]
 800a630:	1dbb      	adds	r3, r7, #6
 800a632:	1c0a      	adds	r2, r1, #0
 800a634:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800a636:	4b08      	ldr	r3, [pc, #32]	@ (800a658 <ReadRegister+0x38>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d008      	beq.n	800a650 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800a63e:	4b06      	ldr	r3, [pc, #24]	@ (800a658 <ReadRegister+0x38>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	1dba      	adds	r2, r7, #6
 800a644:	7814      	ldrb	r4, [r2, #0]
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	1dfa      	adds	r2, r7, #7
 800a64a:	7810      	ldrb	r0, [r2, #0]
 800a64c:	0022      	movs	r2, r4
 800a64e:	4798      	blx	r3
  }
}
 800a650:	46c0      	nop			@ (mov r8, r8)
 800a652:	46bd      	mov	sp, r7
 800a654:	b003      	add	sp, #12
 800a656:	bd90      	pop	{r4, r7, pc}
 800a658:	20001200 	.word	0x20001200

0800a65c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800a65c:	b590      	push	{r4, r7, lr}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6039      	str	r1, [r7, #0]
 800a664:	0011      	movs	r1, r2
 800a666:	1dfb      	adds	r3, r7, #7
 800a668:	1c02      	adds	r2, r0, #0
 800a66a:	701a      	strb	r2, [r3, #0]
 800a66c:	1dbb      	adds	r3, r7, #6
 800a66e:	1c0a      	adds	r2, r1, #0
 800a670:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800a672:	4b08      	ldr	r3, [pc, #32]	@ (800a694 <WriteRegister+0x38>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d008      	beq.n	800a68c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800a67a:	4b06      	ldr	r3, [pc, #24]	@ (800a694 <WriteRegister+0x38>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	1dba      	adds	r2, r7, #6
 800a680:	7814      	ldrb	r4, [r2, #0]
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	1dfa      	adds	r2, r7, #7
 800a686:	7810      	ldrb	r0, [r2, #0]
 800a688:	0022      	movs	r2, r4
 800a68a:	4798      	blx	r3
  }
}
 800a68c:	46c0      	nop			@ (mov r8, r8)
 800a68e:	46bd      	mov	sp, r7
 800a690:	b003      	add	sp, #12
 800a692:	bd90      	pop	{r4, r7, pc}
 800a694:	20001204 	.word	0x20001204

0800a698 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800a6a2:	4b07      	ldr	r3, [pc, #28]	@ (800a6c0 <SGP_Init+0x28>)
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800a6a8:	4b06      	ldr	r3, [pc, #24]	@ (800a6c4 <SGP_Init+0x2c>)
 800a6aa:	683a      	ldr	r2, [r7, #0]
 800a6ac:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800a6ae:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <SGP_Init+0x30>)
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	0018      	movs	r0, r3
 800a6b4:	f7fe ff8e 	bl	80095d4 <GasIndexAlgorithm_init>
}
 800a6b8:	46c0      	nop			@ (mov r8, r8)
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	b002      	add	sp, #8
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20001200 	.word	0x20001200
 800a6c4:	20001204 	.word	0x20001204
 800a6c8:	20001214 	.word	0x20001214

0800a6cc <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800a6d0:	4b13      	ldr	r3, [pc, #76]	@ (800a720 <SGP_StartMeasurement+0x54>)
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d00d      	beq.n	800a6f4 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a6d8:	4b12      	ldr	r3, [pc, #72]	@ (800a724 <SGP_StartMeasurement+0x58>)
 800a6da:	2208      	movs	r2, #8
 800a6dc:	0019      	movs	r1, r3
 800a6de:	2059      	movs	r0, #89	@ 0x59
 800a6e0:	f7ff ffbc 	bl	800a65c <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a6e4:	f002 fc62 	bl	800cfac <GetCurrentHalTicks>
 800a6e8:	0003      	movs	r3, r0
 800a6ea:	331e      	adds	r3, #30
 800a6ec:	001a      	movs	r2, r3
 800a6ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a728 <SGP_StartMeasurement+0x5c>)
 800a6f0:	601a      	str	r2, [r3, #0]
 800a6f2:	e00c      	b.n	800a70e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a6f4:	4b0d      	ldr	r3, [pc, #52]	@ (800a72c <SGP_StartMeasurement+0x60>)
 800a6f6:	2208      	movs	r2, #8
 800a6f8:	0019      	movs	r1, r3
 800a6fa:	2059      	movs	r0, #89	@ 0x59
 800a6fc:	f7ff ffae 	bl	800a65c <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800a700:	f002 fc54 	bl	800cfac <GetCurrentHalTicks>
 800a704:	0003      	movs	r3, r0
 800a706:	33aa      	adds	r3, #170	@ 0xaa
 800a708:	001a      	movs	r2, r3
 800a70a:	4b09      	ldr	r3, [pc, #36]	@ (800a730 <SGP_StartMeasurement+0x64>)
 800a70c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800a70e:	4b09      	ldr	r3, [pc, #36]	@ (800a734 <SGP_StartMeasurement+0x68>)
 800a710:	2200      	movs	r2, #0
 800a712:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800a714:	4b08      	ldr	r3, [pc, #32]	@ (800a738 <SGP_StartMeasurement+0x6c>)
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
}
 800a71a:	46c0      	nop			@ (mov r8, r8)
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	200012bc 	.word	0x200012bc
 800a724:	20000098 	.word	0x20000098
 800a728:	200000ac 	.word	0x200000ac
 800a72c:	20000090 	.word	0x20000090
 800a730:	200000a4 	.word	0x200000a4
 800a734:	20001212 	.word	0x20001212
 800a738:	20001213 	.word	0x20001213

0800a73c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
 800a740:	4b04      	ldr	r3, [pc, #16]	@ (800a754 <SGP_HeatedUp+0x18>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	0018      	movs	r0, r3
 800a746:	f002 fb61 	bl	800ce0c <TimestampIsReached>
 800a74a:	0003      	movs	r3, r0
 800a74c:	0018      	movs	r0, r3
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	46c0      	nop			@ (mov r8, r8)
 800a754:	200000a4 	.word	0x200000a4

0800a758 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800a758:	b580      	push	{r7, lr}
 800a75a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800a75c:	4b04      	ldr	r3, [pc, #16]	@ (800a770 <SGP_MeasurementReady+0x18>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	0018      	movs	r0, r3
 800a762:	f002 fb53 	bl	800ce0c <TimestampIsReached>
 800a766:	0003      	movs	r3, r0
}
 800a768:	0018      	movs	r0, r3
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	46c0      	nop			@ (mov r8, r8)
 800a770:	200000ac 	.word	0x200000ac

0800a774 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800a778:	4b04      	ldr	r3, [pc, #16]	@ (800a78c <SGP_MeasurementDone+0x18>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	0018      	movs	r0, r3
 800a77e:	f002 fb45 	bl	800ce0c <TimestampIsReached>
 800a782:	0003      	movs	r3, r0
}
 800a784:	0018      	movs	r0, r3
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	46c0      	nop			@ (mov r8, r8)
 800a78c:	200000a8 	.word	0x200000a8

0800a790 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800a794:	4b04      	ldr	r3, [pc, #16]	@ (800a7a8 <SGP_TurnHeaterOff+0x18>)
 800a796:	2202      	movs	r2, #2
 800a798:	0019      	movs	r1, r3
 800a79a:	2059      	movs	r0, #89	@ 0x59
 800a79c:	f7ff ff5e 	bl	800a65c <WriteRegister>
}
 800a7a0:	46c0      	nop			@ (mov r8, r8)
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	46c0      	nop			@ (mov r8, r8)
 800a7a8:	20000088 	.word	0x20000088

0800a7ac <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800a7ac:	b5b0      	push	{r4, r5, r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af02      	add	r7, sp, #8
 800a7b2:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800a7b4:	f7ff ffc2 	bl	800a73c <SGP_HeatedUp>
 800a7b8:	1e03      	subs	r3, r0, #0
 800a7ba:	d038      	beq.n	800a82e <SGP_GetMeasurementValues+0x82>
 800a7bc:	4bd2      	ldr	r3, [pc, #840]	@ (800ab08 <SGP_GetMeasurementValues+0x35c>)
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	4053      	eors	r3, r2
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d031      	beq.n	800a82e <SGP_GetMeasurementValues+0x82>
 800a7ca:	4bd0      	ldr	r3, [pc, #832]	@ (800ab0c <SGP_GetMeasurementValues+0x360>)
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4053      	eors	r3, r2
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d02a      	beq.n	800a82e <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up");
 800a7d8:	4acd      	ldr	r2, [pc, #820]	@ (800ab10 <SGP_GetMeasurementValues+0x364>)
 800a7da:	4bce      	ldr	r3, [pc, #824]	@ (800ab14 <SGP_GetMeasurementValues+0x368>)
 800a7dc:	0019      	movs	r1, r3
 800a7de:	2003      	movs	r0, #3
 800a7e0:	f002 fb6a 	bl	800ceb8 <CreateLine>
    HeatUpIsDone = true;
 800a7e4:	4bc8      	ldr	r3, [pc, #800]	@ (800ab08 <SGP_GetMeasurementValues+0x35c>)
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800a7ea:	4bcb      	ldr	r3, [pc, #812]	@ (800ab18 <SGP_GetMeasurementValues+0x36c>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d00d      	beq.n	800a80e <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a7f2:	4bca      	ldr	r3, [pc, #808]	@ (800ab1c <SGP_GetMeasurementValues+0x370>)
 800a7f4:	2208      	movs	r2, #8
 800a7f6:	0019      	movs	r1, r3
 800a7f8:	2059      	movs	r0, #89	@ 0x59
 800a7fa:	f7ff ff2f 	bl	800a65c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a7fe:	f002 fbd5 	bl	800cfac <GetCurrentHalTicks>
 800a802:	0003      	movs	r3, r0
 800a804:	331e      	adds	r3, #30
 800a806:	001a      	movs	r2, r3
 800a808:	4bc5      	ldr	r3, [pc, #788]	@ (800ab20 <SGP_GetMeasurementValues+0x374>)
 800a80a:	601a      	str	r2, [r3, #0]
 800a80c:	e00c      	b.n	800a828 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800a80e:	4bc5      	ldr	r3, [pc, #788]	@ (800ab24 <SGP_GetMeasurementValues+0x378>)
 800a810:	2208      	movs	r2, #8
 800a812:	0019      	movs	r1, r3
 800a814:	2059      	movs	r0, #89	@ 0x59
 800a816:	f7ff ff21 	bl	800a65c <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800a81a:	f002 fbc7 	bl	800cfac <GetCurrentHalTicks>
 800a81e:	0003      	movs	r3, r0
 800a820:	331e      	adds	r3, #30
 800a822:	001a      	movs	r2, r3
 800a824:	4bbe      	ldr	r3, [pc, #760]	@ (800ab20 <SGP_GetMeasurementValues+0x374>)
 800a826:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800a828:	4bb8      	ldr	r3, [pc, #736]	@ (800ab0c <SGP_GetMeasurementValues+0x360>)
 800a82a:	2201      	movs	r2, #1
 800a82c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800a82e:	4bb6      	ldr	r3, [pc, #728]	@ (800ab08 <SGP_GetMeasurementValues+0x35c>)
 800a830:	781b      	ldrb	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d100      	bne.n	800a838 <SGP_GetMeasurementValues+0x8c>
 800a836:	e1a1      	b.n	800ab7c <SGP_GetMeasurementValues+0x3d0>
 800a838:	f7ff ff8e 	bl	800a758 <SGP_MeasurementReady>
 800a83c:	1e03      	subs	r3, r0, #0
 800a83e:	d100      	bne.n	800a842 <SGP_GetMeasurementValues+0x96>
 800a840:	e19c      	b.n	800ab7c <SGP_GetMeasurementValues+0x3d0>
 800a842:	4bb9      	ldr	r3, [pc, #740]	@ (800ab28 <SGP_GetMeasurementValues+0x37c>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2201      	movs	r2, #1
 800a848:	4053      	eors	r3, r2
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d100      	bne.n	800a852 <SGP_GetMeasurementValues+0xa6>
 800a850:	e194      	b.n	800ab7c <SGP_GetMeasurementValues+0x3d0>
    Debug("SGP sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
 800a852:	4bb6      	ldr	r3, [pc, #728]	@ (800ab2c <SGP_GetMeasurementValues+0x380>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	3301      	adds	r3, #1
 800a858:	4ab5      	ldr	r2, [pc, #724]	@ (800ab30 <SGP_GetMeasurementValues+0x384>)
 800a85a:	49ae      	ldr	r1, [pc, #696]	@ (800ab14 <SGP_GetMeasurementValues+0x368>)
 800a85c:	2003      	movs	r0, #3
 800a85e:	f002 fb2b 	bl	800ceb8 <CreateLine>
    MeasurementIsReady = true;
 800a862:	4bb1      	ldr	r3, [pc, #708]	@ (800ab28 <SGP_GetMeasurementValues+0x37c>)
 800a864:	2201      	movs	r2, #1
 800a866:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800a868:	4bb2      	ldr	r3, [pc, #712]	@ (800ab34 <SGP_GetMeasurementValues+0x388>)
 800a86a:	2203      	movs	r2, #3
 800a86c:	0019      	movs	r1, r3
 800a86e:	2059      	movs	r0, #89	@ 0x59
 800a870:	f7ff fed6 	bl	800a620 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800a874:	4baf      	ldr	r3, [pc, #700]	@ (800ab34 <SGP_GetMeasurementValues+0x388>)
 800a876:	2203      	movs	r2, #3
 800a878:	2103      	movs	r1, #3
 800a87a:	0018      	movs	r0, r3
 800a87c:	f000 f9e4 	bl	800ac48 <CheckCRC>
 800a880:	0003      	movs	r3, r0
 800a882:	001a      	movs	r2, r3
 800a884:	2301      	movs	r3, #1
 800a886:	4053      	eors	r3, r2
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d02a      	beq.n	800a8e4 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800a88e:	4aaa      	ldr	r2, [pc, #680]	@ (800ab38 <SGP_GetMeasurementValues+0x38c>)
 800a890:	4baa      	ldr	r3, [pc, #680]	@ (800ab3c <SGP_GetMeasurementValues+0x390>)
 800a892:	0019      	movs	r1, r3
 800a894:	2001      	movs	r0, #1
 800a896:	f002 fb0f 	bl	800ceb8 <CreateLine>
      Info("SGP_Measure buffer structure:");
 800a89a:	4aa9      	ldr	r2, [pc, #676]	@ (800ab40 <SGP_GetMeasurementValues+0x394>)
 800a89c:	4ba9      	ldr	r3, [pc, #676]	@ (800ab44 <SGP_GetMeasurementValues+0x398>)
 800a89e:	0019      	movs	r1, r3
 800a8a0:	2002      	movs	r0, #2
 800a8a2:	f002 fb09 	bl	800ceb8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800a8a6:	230f      	movs	r3, #15
 800a8a8:	18fb      	adds	r3, r7, r3
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	e012      	b.n	800a8d6 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800a8b0:	240f      	movs	r4, #15
 800a8b2:	193b      	adds	r3, r7, r4
 800a8b4:	7818      	ldrb	r0, [r3, #0]
 800a8b6:	193b      	adds	r3, r7, r4
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	4a9e      	ldr	r2, [pc, #632]	@ (800ab34 <SGP_GetMeasurementValues+0x388>)
 800a8bc:	5cd3      	ldrb	r3, [r2, r3]
 800a8be:	4aa2      	ldr	r2, [pc, #648]	@ (800ab48 <SGP_GetMeasurementValues+0x39c>)
 800a8c0:	4994      	ldr	r1, [pc, #592]	@ (800ab14 <SGP_GetMeasurementValues+0x368>)
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	0003      	movs	r3, r0
 800a8c6:	2003      	movs	r0, #3
 800a8c8:	f002 faf6 	bl	800ceb8 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800a8cc:	193b      	adds	r3, r7, r4
 800a8ce:	781a      	ldrb	r2, [r3, #0]
 800a8d0:	193b      	adds	r3, r7, r4
 800a8d2:	3201      	adds	r2, #1
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	230f      	movs	r3, #15
 800a8d8:	18fb      	adds	r3, r7, r3
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d9e7      	bls.n	800a8b0 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e163      	b.n	800abac <SGP_GetMeasurementValues+0x400>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800a8e4:	f002 fb62 	bl	800cfac <GetCurrentHalTicks>
 800a8e8:	0003      	movs	r3, r0
 800a8ea:	22fa      	movs	r2, #250	@ 0xfa
 800a8ec:	0092      	lsls	r2, r2, #2
 800a8ee:	189a      	adds	r2, r3, r2
 800a8f0:	4b96      	ldr	r3, [pc, #600]	@ (800ab4c <SGP_GetMeasurementValues+0x3a0>)
 800a8f2:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800a8f4:	f7ff ff4c 	bl	800a790 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800a8f8:	4b8c      	ldr	r3, [pc, #560]	@ (800ab2c <SGP_GetMeasurementValues+0x380>)
 800a8fa:	781b      	ldrb	r3, [r3, #0]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	b2da      	uxtb	r2, r3
 800a900:	4b8a      	ldr	r3, [pc, #552]	@ (800ab2c <SGP_GetMeasurementValues+0x380>)
 800a902:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800a904:	4b89      	ldr	r3, [pc, #548]	@ (800ab2c <SGP_GetMeasurementValues+0x380>)
 800a906:	781a      	ldrb	r2, [r3, #0]
 800a908:	4b91      	ldr	r3, [pc, #580]	@ (800ab50 <SGP_GetMeasurementValues+0x3a4>)
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d200      	bcs.n	800a912 <SGP_GetMeasurementValues+0x166>
 800a910:	e134      	b.n	800ab7c <SGP_GetMeasurementValues+0x3d0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800a912:	4b88      	ldr	r3, [pc, #544]	@ (800ab34 <SGP_GetMeasurementValues+0x388>)
 800a914:	785b      	ldrb	r3, [r3, #1]
 800a916:	021b      	lsls	r3, r3, #8
 800a918:	b21a      	sxth	r2, r3
 800a91a:	4b86      	ldr	r3, [pc, #536]	@ (800ab34 <SGP_GetMeasurementValues+0x388>)
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	b21b      	sxth	r3, r3
 800a920:	4313      	orrs	r3, r2
 800a922:	b21a      	sxth	r2, r3
 800a924:	240c      	movs	r4, #12
 800a926:	193b      	adds	r3, r7, r4
 800a928:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800a92a:	193b      	adds	r3, r7, r4
 800a92c:	881b      	ldrh	r3, [r3, #0]
 800a92e:	4a89      	ldr	r2, [pc, #548]	@ (800ab54 <SGP_GetMeasurementValues+0x3a8>)
 800a930:	4978      	ldr	r1, [pc, #480]	@ (800ab14 <SGP_GetMeasurementValues+0x368>)
 800a932:	2003      	movs	r0, #3
 800a934:	f002 fac0 	bl	800ceb8 <CreateLine>
      int32_t tempVocIndex = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800a93c:	193b      	adds	r3, r7, r4
 800a93e:	8819      	ldrh	r1, [r3, #0]
 800a940:	2308      	movs	r3, #8
 800a942:	18fa      	adds	r2, r7, r3
 800a944:	4b84      	ldr	r3, [pc, #528]	@ (800ab58 <SGP_GetMeasurementValues+0x3ac>)
 800a946:	0018      	movs	r0, r3
 800a948:	f7fe fea6 	bl	8009698 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	4a83      	ldr	r2, [pc, #524]	@ (800ab5c <SGP_GetMeasurementValues+0x3b0>)
 800a950:	4970      	ldr	r1, [pc, #448]	@ (800ab14 <SGP_GetMeasurementValues+0x368>)
 800a952:	2003      	movs	r0, #3
 800a954:	f002 fab0 	bl	800ceb8 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800a958:	68ba      	ldr	r2, [r7, #8]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2b00      	cmp	r3, #0
 800a964:	dd5a      	ble.n	800aa1c <SGP_GetMeasurementValues+0x270>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b64      	cmp	r3, #100	@ 0x64
 800a96c:	dc56      	bgt.n	800aa1c <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	0018      	movs	r0, r3
 800a974:	f7f8 fd24 	bl	80033c0 <__aeabi_i2d>
 800a978:	2200      	movs	r2, #0
 800a97a:	4b79      	ldr	r3, [pc, #484]	@ (800ab60 <SGP_GetMeasurementValues+0x3b4>)
 800a97c:	f7f7 fa1a 	bl	8001db4 <__aeabi_ddiv>
 800a980:	0002      	movs	r2, r0
 800a982:	000b      	movs	r3, r1
 800a984:	2000      	movs	r0, #0
 800a986:	4977      	ldr	r1, [pc, #476]	@ (800ab64 <SGP_GetMeasurementValues+0x3b8>)
 800a988:	f7f8 f920 	bl	8002bcc <__aeabi_dsub>
 800a98c:	0002      	movs	r2, r0
 800a98e:	000b      	movs	r3, r1
 800a990:	0014      	movs	r4, r2
 800a992:	001d      	movs	r5, r3
 800a994:	4b74      	ldr	r3, [pc, #464]	@ (800ab68 <SGP_GetMeasurementValues+0x3bc>)
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	0018      	movs	r0, r3
 800a99a:	f7f8 fd11 	bl	80033c0 <__aeabi_i2d>
 800a99e:	0002      	movs	r2, r0
 800a9a0:	000b      	movs	r3, r1
 800a9a2:	0020      	movs	r0, r4
 800a9a4:	0029      	movs	r1, r5
 800a9a6:	f7f7 fe49 	bl	800263c <__aeabi_dmul>
 800a9aa:	0002      	movs	r2, r0
 800a9ac:	000b      	movs	r3, r1
 800a9ae:	0010      	movs	r0, r2
 800a9b0:	0019      	movs	r1, r3
 800a9b2:	f7f5 fe4b 	bl	800064c <__aeabi_d2uiz>
 800a9b6:	0003      	movs	r3, r0
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	4b6c      	ldr	r3, [pc, #432]	@ (800ab6c <SGP_GetMeasurementValues+0x3c0>)
 800a9bc:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f7f8 fcfc 	bl	80033c0 <__aeabi_i2d>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4b65      	ldr	r3, [pc, #404]	@ (800ab60 <SGP_GetMeasurementValues+0x3b4>)
 800a9cc:	f7f7 f9f2 	bl	8001db4 <__aeabi_ddiv>
 800a9d0:	0002      	movs	r2, r0
 800a9d2:	000b      	movs	r3, r1
 800a9d4:	0014      	movs	r4, r2
 800a9d6:	001d      	movs	r5, r3
 800a9d8:	4b63      	ldr	r3, [pc, #396]	@ (800ab68 <SGP_GetMeasurementValues+0x3bc>)
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	0018      	movs	r0, r3
 800a9de:	f7f8 fcef 	bl	80033c0 <__aeabi_i2d>
 800a9e2:	0002      	movs	r2, r0
 800a9e4:	000b      	movs	r3, r1
 800a9e6:	0020      	movs	r0, r4
 800a9e8:	0029      	movs	r1, r5
 800a9ea:	f7f7 fe27 	bl	800263c <__aeabi_dmul>
 800a9ee:	0002      	movs	r2, r0
 800a9f0:	000b      	movs	r3, r1
 800a9f2:	0010      	movs	r0, r2
 800a9f4:	0019      	movs	r1, r3
 800a9f6:	f7f5 fe29 	bl	800064c <__aeabi_d2uiz>
 800a9fa:	0003      	movs	r3, r0
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	4b5c      	ldr	r3, [pc, #368]	@ (800ab70 <SGP_GetMeasurementValues+0x3c4>)
 800aa00:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800aa02:	4b59      	ldr	r3, [pc, #356]	@ (800ab68 <SGP_GetMeasurementValues+0x3bc>)
 800aa04:	881a      	ldrh	r2, [r3, #0]
 800aa06:	4b5b      	ldr	r3, [pc, #364]	@ (800ab74 <SGP_GetMeasurementValues+0x3c8>)
 800aa08:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800aa0a:	4b5a      	ldr	r3, [pc, #360]	@ (800ab74 <SGP_GetMeasurementValues+0x3c8>)
 800aa0c:	8818      	ldrh	r0, [r3, #0]
 800aa0e:	4b57      	ldr	r3, [pc, #348]	@ (800ab6c <SGP_GetMeasurementValues+0x3c0>)
 800aa10:	8819      	ldrh	r1, [r3, #0]
 800aa12:	4b57      	ldr	r3, [pc, #348]	@ (800ab70 <SGP_GetMeasurementValues+0x3c4>)
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	001a      	movs	r2, r3
 800aa18:	f001 fb2e 	bl	800c078 <SetVocLED>
      }
      if(*vocIndex > 100){
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b64      	cmp	r3, #100	@ 0x64
 800aa22:	dd66      	ble.n	800aaf2 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	0018      	movs	r0, r3
 800aa2a:	f7f8 fcc9 	bl	80033c0 <__aeabi_i2d>
 800aa2e:	2200      	movs	r2, #0
 800aa30:	4b4b      	ldr	r3, [pc, #300]	@ (800ab60 <SGP_GetMeasurementValues+0x3b4>)
 800aa32:	f7f8 f8cb 	bl	8002bcc <__aeabi_dsub>
 800aa36:	0002      	movs	r2, r0
 800aa38:	000b      	movs	r3, r1
 800aa3a:	0010      	movs	r0, r2
 800aa3c:	0019      	movs	r1, r3
 800aa3e:	2200      	movs	r2, #0
 800aa40:	4b4d      	ldr	r3, [pc, #308]	@ (800ab78 <SGP_GetMeasurementValues+0x3cc>)
 800aa42:	f7f7 f9b7 	bl	8001db4 <__aeabi_ddiv>
 800aa46:	0002      	movs	r2, r0
 800aa48:	000b      	movs	r3, r1
 800aa4a:	0014      	movs	r4, r2
 800aa4c:	001d      	movs	r5, r3
 800aa4e:	4b46      	ldr	r3, [pc, #280]	@ (800ab68 <SGP_GetMeasurementValues+0x3bc>)
 800aa50:	881b      	ldrh	r3, [r3, #0]
 800aa52:	0018      	movs	r0, r3
 800aa54:	f7f8 fcb4 	bl	80033c0 <__aeabi_i2d>
 800aa58:	0002      	movs	r2, r0
 800aa5a:	000b      	movs	r3, r1
 800aa5c:	0020      	movs	r0, r4
 800aa5e:	0029      	movs	r1, r5
 800aa60:	f7f7 fdec 	bl	800263c <__aeabi_dmul>
 800aa64:	0002      	movs	r2, r0
 800aa66:	000b      	movs	r3, r1
 800aa68:	0010      	movs	r0, r2
 800aa6a:	0019      	movs	r1, r3
 800aa6c:	f7f5 fdee 	bl	800064c <__aeabi_d2uiz>
 800aa70:	0003      	movs	r3, r0
 800aa72:	b29a      	uxth	r2, r3
 800aa74:	4b3d      	ldr	r3, [pc, #244]	@ (800ab6c <SGP_GetMeasurementValues+0x3c0>)
 800aa76:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	0018      	movs	r0, r3
 800aa7e:	f7f8 fc9f 	bl	80033c0 <__aeabi_i2d>
 800aa82:	2200      	movs	r2, #0
 800aa84:	4b36      	ldr	r3, [pc, #216]	@ (800ab60 <SGP_GetMeasurementValues+0x3b4>)
 800aa86:	f7f8 f8a1 	bl	8002bcc <__aeabi_dsub>
 800aa8a:	0002      	movs	r2, r0
 800aa8c:	000b      	movs	r3, r1
 800aa8e:	0010      	movs	r0, r2
 800aa90:	0019      	movs	r1, r3
 800aa92:	2200      	movs	r2, #0
 800aa94:	4b38      	ldr	r3, [pc, #224]	@ (800ab78 <SGP_GetMeasurementValues+0x3cc>)
 800aa96:	f7f7 f98d 	bl	8001db4 <__aeabi_ddiv>
 800aa9a:	0002      	movs	r2, r0
 800aa9c:	000b      	movs	r3, r1
 800aa9e:	2000      	movs	r0, #0
 800aaa0:	4930      	ldr	r1, [pc, #192]	@ (800ab64 <SGP_GetMeasurementValues+0x3b8>)
 800aaa2:	f7f8 f893 	bl	8002bcc <__aeabi_dsub>
 800aaa6:	0002      	movs	r2, r0
 800aaa8:	000b      	movs	r3, r1
 800aaaa:	0014      	movs	r4, r2
 800aaac:	001d      	movs	r5, r3
 800aaae:	4b2e      	ldr	r3, [pc, #184]	@ (800ab68 <SGP_GetMeasurementValues+0x3bc>)
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	0018      	movs	r0, r3
 800aab4:	f7f8 fc84 	bl	80033c0 <__aeabi_i2d>
 800aab8:	0002      	movs	r2, r0
 800aaba:	000b      	movs	r3, r1
 800aabc:	0020      	movs	r0, r4
 800aabe:	0029      	movs	r1, r5
 800aac0:	f7f7 fdbc 	bl	800263c <__aeabi_dmul>
 800aac4:	0002      	movs	r2, r0
 800aac6:	000b      	movs	r3, r1
 800aac8:	0010      	movs	r0, r2
 800aaca:	0019      	movs	r1, r3
 800aacc:	f7f5 fdbe 	bl	800064c <__aeabi_d2uiz>
 800aad0:	0003      	movs	r3, r0
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	4b27      	ldr	r3, [pc, #156]	@ (800ab74 <SGP_GetMeasurementValues+0x3c8>)
 800aad6:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800aad8:	4b23      	ldr	r3, [pc, #140]	@ (800ab68 <SGP_GetMeasurementValues+0x3bc>)
 800aada:	881a      	ldrh	r2, [r3, #0]
 800aadc:	4b24      	ldr	r3, [pc, #144]	@ (800ab70 <SGP_GetMeasurementValues+0x3c4>)
 800aade:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800aae0:	4b24      	ldr	r3, [pc, #144]	@ (800ab74 <SGP_GetMeasurementValues+0x3c8>)
 800aae2:	8818      	ldrh	r0, [r3, #0]
 800aae4:	4b21      	ldr	r3, [pc, #132]	@ (800ab6c <SGP_GetMeasurementValues+0x3c0>)
 800aae6:	8819      	ldrh	r1, [r3, #0]
 800aae8:	4b21      	ldr	r3, [pc, #132]	@ (800ab70 <SGP_GetMeasurementValues+0x3c4>)
 800aaea:	881b      	ldrh	r3, [r3, #0]
 800aaec:	001a      	movs	r2, r3
 800aaee:	f001 fac3 	bl	800c078 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800aaf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ab2c <SGP_GetMeasurementValues+0x380>)
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800aaf8:	4b07      	ldr	r3, [pc, #28]	@ (800ab18 <SGP_GetMeasurementValues+0x36c>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800aafe:	4b03      	ldr	r3, [pc, #12]	@ (800ab0c <SGP_GetMeasurementValues+0x360>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e051      	b.n	800abac <SGP_GetMeasurementValues+0x400>
 800ab08:	20001212 	.word	0x20001212
 800ab0c:	200012bd 	.word	0x200012bd
 800ab10:	08022b28 	.word	0x08022b28
 800ab14:	08022b3c 	.word	0x08022b3c
 800ab18:	200012bc 	.word	0x200012bc
 800ab1c:	20000098 	.word	0x20000098
 800ab20:	200000ac 	.word	0x200000ac
 800ab24:	20000090 	.word	0x20000090
 800ab28:	20001213 	.word	0x20001213
 800ab2c:	20001211 	.word	0x20001211
 800ab30:	08022b40 	.word	0x08022b40
 800ab34:	20001208 	.word	0x20001208
 800ab38:	08022b58 	.word	0x08022b58
 800ab3c:	08022b7c 	.word	0x08022b7c
 800ab40:	08022b80 	.word	0x08022b80
 800ab44:	08022ba0 	.word	0x08022ba0
 800ab48:	08022ba4 	.word	0x08022ba4
 800ab4c:	200000a8 	.word	0x200000a8
 800ab50:	200000a0 	.word	0x200000a0
 800ab54:	08022bc4 	.word	0x08022bc4
 800ab58:	20001214 	.word	0x20001214
 800ab5c:	08022bd8 	.word	0x08022bd8
 800ab60:	40590000 	.word	0x40590000
 800ab64:	3ff00000 	.word	0x3ff00000
 800ab68:	200000b0 	.word	0x200000b0
 800ab6c:	200012c2 	.word	0x200012c2
 800ab70:	200012c0 	.word	0x200012c0
 800ab74:	200012be 	.word	0x200012be
 800ab78:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800ab7c:	f7ff fdfa 	bl	800a774 <SGP_MeasurementDone>
 800ab80:	1e03      	subs	r3, r0, #0
 800ab82:	d012      	beq.n	800abaa <SGP_GetMeasurementValues+0x3fe>
 800ab84:	4b0b      	ldr	r3, [pc, #44]	@ (800abb4 <SGP_GetMeasurementValues+0x408>)
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00e      	beq.n	800abaa <SGP_GetMeasurementValues+0x3fe>
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	@ (800abb8 <SGP_GetMeasurementValues+0x40c>)
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00a      	beq.n	800abaa <SGP_GetMeasurementValues+0x3fe>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800ab94:	4a09      	ldr	r2, [pc, #36]	@ (800abbc <SGP_GetMeasurementValues+0x410>)
 800ab96:	4b0a      	ldr	r3, [pc, #40]	@ (800abc0 <SGP_GetMeasurementValues+0x414>)
 800ab98:	0019      	movs	r1, r3
 800ab9a:	2003      	movs	r0, #3
 800ab9c:	f002 f98c 	bl	800ceb8 <CreateLine>
    SGP_StartMeasurement();
 800aba0:	f7ff fd94 	bl	800a6cc <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800aba4:	4b07      	ldr	r3, [pc, #28]	@ (800abc4 <SGP_GetMeasurementValues+0x418>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	0018      	movs	r0, r3
 800abae:	46bd      	mov	sp, r7
 800abb0:	b004      	add	sp, #16
 800abb2:	bdb0      	pop	{r4, r5, r7, pc}
 800abb4:	20001212 	.word	0x20001212
 800abb8:	20001213 	.word	0x20001213
 800abbc:	08022bec 	.word	0x08022bec
 800abc0:	08022b3c 	.word	0x08022b3c
 800abc4:	200012bd 	.word	0x200012bd

0800abc8 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800abce:	4b1a      	ldr	r3, [pc, #104]	@ (800ac38 <SGP_DeviceConnected+0x70>)
 800abd0:	2202      	movs	r2, #2
 800abd2:	0019      	movs	r1, r3
 800abd4:	2059      	movs	r0, #89	@ 0x59
 800abd6:	f7ff fd41 	bl	800a65c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800abda:	2001      	movs	r0, #1
 800abdc:	f002 fd14 	bl	800d608 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800abe0:	4b16      	ldr	r3, [pc, #88]	@ (800ac3c <SGP_DeviceConnected+0x74>)
 800abe2:	2209      	movs	r2, #9
 800abe4:	0019      	movs	r1, r3
 800abe6:	2059      	movs	r0, #89	@ 0x59
 800abe8:	f7ff fd1a 	bl	800a620 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800abec:	1dfb      	adds	r3, r7, #7
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]
 800abf2:	e011      	b.n	800ac18 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800abf4:	1dfb      	adds	r3, r7, #7
 800abf6:	7818      	ldrb	r0, [r3, #0]
 800abf8:	1dfb      	adds	r3, r7, #7
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	4a0f      	ldr	r2, [pc, #60]	@ (800ac3c <SGP_DeviceConnected+0x74>)
 800abfe:	5cd3      	ldrb	r3, [r2, r3]
 800ac00:	4a0f      	ldr	r2, [pc, #60]	@ (800ac40 <SGP_DeviceConnected+0x78>)
 800ac02:	4910      	ldr	r1, [pc, #64]	@ (800ac44 <SGP_DeviceConnected+0x7c>)
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	0003      	movs	r3, r0
 800ac08:	2002      	movs	r0, #2
 800ac0a:	f002 f955 	bl	800ceb8 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800ac0e:	1dfb      	adds	r3, r7, #7
 800ac10:	781a      	ldrb	r2, [r3, #0]
 800ac12:	1dfb      	adds	r3, r7, #7
 800ac14:	3201      	adds	r2, #1
 800ac16:	701a      	strb	r2, [r3, #0]
 800ac18:	1dfb      	adds	r3, r7, #7
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	2b08      	cmp	r3, #8
 800ac1e:	d9e9      	bls.n	800abf4 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800ac20:	4b06      	ldr	r3, [pc, #24]	@ (800ac3c <SGP_DeviceConnected+0x74>)
 800ac22:	2203      	movs	r2, #3
 800ac24:	2109      	movs	r1, #9
 800ac26:	0018      	movs	r0, r3
 800ac28:	f000 f80e 	bl	800ac48 <CheckCRC>
 800ac2c:	0003      	movs	r3, r0
}
 800ac2e:	0018      	movs	r0, r3
 800ac30:	46bd      	mov	sp, r7
 800ac32:	b002      	add	sp, #8
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	46c0      	nop			@ (mov r8, r8)
 800ac38:	2000008c 	.word	0x2000008c
 800ac3c:	20001208 	.word	0x20001208
 800ac40:	08022c0c 	.word	0x08022c0c
 800ac44:	08022ba0 	.word	0x08022ba0

0800ac48 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800ac48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4a:	b08f      	sub	sp, #60	@ 0x3c
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6278      	str	r0, [r7, #36]	@ 0x24
 800ac50:	0008      	movs	r0, r1
 800ac52:	0011      	movs	r1, r2
 800ac54:	2323      	movs	r3, #35	@ 0x23
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	1c02      	adds	r2, r0, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
 800ac5c:	2322      	movs	r3, #34	@ 0x22
 800ac5e:	18fb      	adds	r3, r7, r3
 800ac60:	1c0a      	adds	r2, r1, #0
 800ac62:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ac64:	2317      	movs	r3, #23
 800ac66:	2220      	movs	r2, #32
 800ac68:	189b      	adds	r3, r3, r2
 800ac6a:	19db      	adds	r3, r3, r7
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	701a      	strb	r2, [r3, #0]
 800ac70:	e09f      	b.n	800adb2 <CheckCRC+0x16a>
 800ac72:	466b      	mov	r3, sp
 800ac74:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800ac76:	2322      	movs	r3, #34	@ 0x22
 800ac78:	18fb      	adds	r3, r7, r3
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	001a      	movs	r2, r3
 800ac7e:	3a01      	subs	r2, #1
 800ac80:	633a      	str	r2, [r7, #48]	@ 0x30
 800ac82:	60bb      	str	r3, [r7, #8]
 800ac84:	2200      	movs	r2, #0
 800ac86:	60fa      	str	r2, [r7, #12]
 800ac88:	68b8      	ldr	r0, [r7, #8]
 800ac8a:	68f9      	ldr	r1, [r7, #12]
 800ac8c:	0002      	movs	r2, r0
 800ac8e:	0f52      	lsrs	r2, r2, #29
 800ac90:	000c      	movs	r4, r1
 800ac92:	00e4      	lsls	r4, r4, #3
 800ac94:	61fc      	str	r4, [r7, #28]
 800ac96:	69fc      	ldr	r4, [r7, #28]
 800ac98:	4314      	orrs	r4, r2
 800ac9a:	61fc      	str	r4, [r7, #28]
 800ac9c:	0002      	movs	r2, r0
 800ac9e:	00d2      	lsls	r2, r2, #3
 800aca0:	61ba      	str	r2, [r7, #24]
 800aca2:	603b      	str	r3, [r7, #0]
 800aca4:	2200      	movs	r2, #0
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	6838      	ldr	r0, [r7, #0]
 800acaa:	6879      	ldr	r1, [r7, #4]
 800acac:	0002      	movs	r2, r0
 800acae:	0f52      	lsrs	r2, r2, #29
 800acb0:	000c      	movs	r4, r1
 800acb2:	00e4      	lsls	r4, r4, #3
 800acb4:	617c      	str	r4, [r7, #20]
 800acb6:	697c      	ldr	r4, [r7, #20]
 800acb8:	4314      	orrs	r4, r2
 800acba:	617c      	str	r4, [r7, #20]
 800acbc:	0002      	movs	r2, r0
 800acbe:	00d2      	lsls	r2, r2, #3
 800acc0:	613a      	str	r2, [r7, #16]
 800acc2:	3307      	adds	r3, #7
 800acc4:	08db      	lsrs	r3, r3, #3
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	466a      	mov	r2, sp
 800acca:	1ad3      	subs	r3, r2, r3
 800accc:	469d      	mov	sp, r3
 800acce:	466b      	mov	r3, sp
 800acd0:	3300      	adds	r3, #0
 800acd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800acd4:	2316      	movs	r3, #22
 800acd6:	2220      	movs	r2, #32
 800acd8:	189b      	adds	r3, r3, r2
 800acda:	19db      	adds	r3, r3, r7
 800acdc:	2200      	movs	r2, #0
 800acde:	701a      	strb	r2, [r3, #0]
 800ace0:	e01e      	b.n	800ad20 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800ace2:	2317      	movs	r3, #23
 800ace4:	2220      	movs	r2, #32
 800ace6:	189b      	adds	r3, r3, r2
 800ace8:	19db      	adds	r3, r3, r7
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	2116      	movs	r1, #22
 800acee:	2320      	movs	r3, #32
 800acf0:	18cb      	adds	r3, r1, r3
 800acf2:	19db      	adds	r3, r3, r7
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	18d3      	adds	r3, r2, r3
 800acf8:	001a      	movs	r2, r3
 800acfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfc:	189a      	adds	r2, r3, r2
 800acfe:	0008      	movs	r0, r1
 800ad00:	2320      	movs	r3, #32
 800ad02:	18cb      	adds	r3, r1, r3
 800ad04:	19db      	adds	r3, r3, r7
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	7811      	ldrb	r1, [r2, #0]
 800ad0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ad0c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800ad0e:	2320      	movs	r3, #32
 800ad10:	18c3      	adds	r3, r0, r3
 800ad12:	19db      	adds	r3, r3, r7
 800ad14:	781a      	ldrb	r2, [r3, #0]
 800ad16:	2320      	movs	r3, #32
 800ad18:	18c3      	adds	r3, r0, r3
 800ad1a:	19db      	adds	r3, r3, r7
 800ad1c:	3201      	adds	r2, #1
 800ad1e:	701a      	strb	r2, [r3, #0]
 800ad20:	2316      	movs	r3, #22
 800ad22:	2220      	movs	r2, #32
 800ad24:	189b      	adds	r3, r3, r2
 800ad26:	19da      	adds	r2, r3, r7
 800ad28:	2322      	movs	r3, #34	@ 0x22
 800ad2a:	18fb      	adds	r3, r7, r3
 800ad2c:	7812      	ldrb	r2, [r2, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d3d6      	bcc.n	800ace2 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800ad34:	2417      	movs	r4, #23
 800ad36:	2320      	movs	r3, #32
 800ad38:	18e3      	adds	r3, r4, r3
 800ad3a:	19db      	adds	r3, r3, r7
 800ad3c:	781a      	ldrb	r2, [r3, #0]
 800ad3e:	2322      	movs	r3, #34	@ 0x22
 800ad40:	18fb      	adds	r3, r7, r3
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	18d3      	adds	r3, r2, r3
 800ad46:	3b01      	subs	r3, #1
 800ad48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad4a:	18d2      	adds	r2, r2, r3
 800ad4c:	250b      	movs	r5, #11
 800ad4e:	2320      	movs	r3, #32
 800ad50:	18eb      	adds	r3, r5, r3
 800ad52:	19db      	adds	r3, r3, r7
 800ad54:	7812      	ldrb	r2, [r2, #0]
 800ad56:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800ad58:	2322      	movs	r3, #34	@ 0x22
 800ad5a:	18fb      	adds	r3, r7, r3
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad64:	0011      	movs	r1, r2
 800ad66:	0018      	movs	r0, r3
 800ad68:	f000 f838 	bl	800addc <CalculateCRC>
 800ad6c:	0003      	movs	r3, r0
 800ad6e:	001a      	movs	r2, r3
 800ad70:	2320      	movs	r3, #32
 800ad72:	18eb      	adds	r3, r5, r3
 800ad74:	19db      	adds	r3, r3, r7
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d00c      	beq.n	800ad96 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800ad7c:	2320      	movs	r3, #32
 800ad7e:	18e3      	adds	r3, r4, r3
 800ad80:	19db      	adds	r3, r3, r7
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	3301      	adds	r3, #1
 800ad86:	4a13      	ldr	r2, [pc, #76]	@ (800add4 <CheckCRC+0x18c>)
 800ad88:	4913      	ldr	r1, [pc, #76]	@ (800add8 <CheckCRC+0x190>)
 800ad8a:	2001      	movs	r0, #1
 800ad8c:	f002 f894 	bl	800ceb8 <CreateLine>
      return false;
 800ad90:	2300      	movs	r3, #0
 800ad92:	46b5      	mov	sp, r6
 800ad94:	e019      	b.n	800adca <CheckCRC+0x182>
 800ad96:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800ad98:	2217      	movs	r2, #23
 800ad9a:	2320      	movs	r3, #32
 800ad9c:	18d3      	adds	r3, r2, r3
 800ad9e:	19db      	adds	r3, r3, r7
 800ada0:	2120      	movs	r1, #32
 800ada2:	1852      	adds	r2, r2, r1
 800ada4:	19d1      	adds	r1, r2, r7
 800ada6:	2222      	movs	r2, #34	@ 0x22
 800ada8:	18ba      	adds	r2, r7, r2
 800adaa:	7809      	ldrb	r1, [r1, #0]
 800adac:	7812      	ldrb	r2, [r2, #0]
 800adae:	188a      	adds	r2, r1, r2
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	2317      	movs	r3, #23
 800adb4:	2220      	movs	r2, #32
 800adb6:	189b      	adds	r3, r3, r2
 800adb8:	19da      	adds	r2, r3, r7
 800adba:	2323      	movs	r3, #35	@ 0x23
 800adbc:	18fb      	adds	r3, r7, r3
 800adbe:	7812      	ldrb	r2, [r2, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d200      	bcs.n	800adc8 <CheckCRC+0x180>
 800adc6:	e754      	b.n	800ac72 <CheckCRC+0x2a>
    }
  }
  return true;
 800adc8:	2301      	movs	r3, #1
}
 800adca:	0018      	movs	r0, r3
 800adcc:	46bd      	mov	sp, r7
 800adce:	b00f      	add	sp, #60	@ 0x3c
 800add0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add2:	46c0      	nop			@ (mov r8, r8)
 800add4:	08022c2c 	.word	0x08022c2c
 800add8:	08022b7c 	.word	0x08022b7c

0800addc <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	000a      	movs	r2, r1
 800ade6:	1cfb      	adds	r3, r7, #3
 800ade8:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800adea:	230f      	movs	r3, #15
 800adec:	18fb      	adds	r3, r7, r3
 800adee:	22ff      	movs	r2, #255	@ 0xff
 800adf0:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800adf2:	230e      	movs	r3, #14
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	2200      	movs	r2, #0
 800adf8:	701a      	strb	r2, [r3, #0]
 800adfa:	e037      	b.n	800ae6c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800adfc:	230e      	movs	r3, #14
 800adfe:	18fb      	adds	r3, r7, r3
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	18d3      	adds	r3, r2, r3
 800ae06:	7819      	ldrb	r1, [r3, #0]
 800ae08:	220f      	movs	r2, #15
 800ae0a:	18bb      	adds	r3, r7, r2
 800ae0c:	18ba      	adds	r2, r7, r2
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	404a      	eors	r2, r1
 800ae12:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800ae14:	230d      	movs	r3, #13
 800ae16:	18fb      	adds	r3, r7, r3
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
 800ae1c:	e01b      	b.n	800ae56 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800ae1e:	210f      	movs	r1, #15
 800ae20:	187b      	adds	r3, r7, r1
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	b25b      	sxtb	r3, r3
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	da09      	bge.n	800ae3e <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800ae2a:	187b      	adds	r3, r7, r1
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	b25b      	sxtb	r3, r3
 800ae32:	2231      	movs	r2, #49	@ 0x31
 800ae34:	4053      	eors	r3, r2
 800ae36:	b25a      	sxtb	r2, r3
 800ae38:	187b      	adds	r3, r7, r1
 800ae3a:	701a      	strb	r2, [r3, #0]
 800ae3c:	e005      	b.n	800ae4a <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800ae3e:	230f      	movs	r3, #15
 800ae40:	18fa      	adds	r2, r7, r3
 800ae42:	18fb      	adds	r3, r7, r3
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	18db      	adds	r3, r3, r3
 800ae48:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800ae4a:	210d      	movs	r1, #13
 800ae4c:	187b      	adds	r3, r7, r1
 800ae4e:	781a      	ldrb	r2, [r3, #0]
 800ae50:	187b      	adds	r3, r7, r1
 800ae52:	3201      	adds	r2, #1
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	230d      	movs	r3, #13
 800ae58:	18fb      	adds	r3, r7, r3
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	2b07      	cmp	r3, #7
 800ae5e:	d9de      	bls.n	800ae1e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800ae60:	210e      	movs	r1, #14
 800ae62:	187b      	adds	r3, r7, r1
 800ae64:	781a      	ldrb	r2, [r3, #0]
 800ae66:	187b      	adds	r3, r7, r1
 800ae68:	3201      	adds	r2, #1
 800ae6a:	701a      	strb	r2, [r3, #0]
 800ae6c:	230e      	movs	r3, #14
 800ae6e:	18fa      	adds	r2, r7, r3
 800ae70:	1cfb      	adds	r3, r7, #3
 800ae72:	7812      	ldrb	r2, [r2, #0]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d3c0      	bcc.n	800adfc <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800ae7a:	230f      	movs	r3, #15
 800ae7c:	18fb      	adds	r3, r7, r3
 800ae7e:	781b      	ldrb	r3, [r3, #0]
}
 800ae80:	0018      	movs	r0, r3
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b004      	add	sp, #16
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4936      	ldr	r1, [pc, #216]	@ (800af70 <SGP_GetHT+0xe8>)
 800ae98:	1c18      	adds	r0, r3, #0
 800ae9a:	f7f5 fd11 	bl	80008c0 <__aeabi_fadd>
 800ae9e:	1c03      	adds	r3, r0, #0
 800aea0:	4934      	ldr	r1, [pc, #208]	@ (800af74 <SGP_GetHT+0xec>)
 800aea2:	1c18      	adds	r0, r3, #0
 800aea4:	f7f5 fe96 	bl	8000bd4 <__aeabi_fdiv>
 800aea8:	1c03      	adds	r3, r0, #0
 800aeaa:	4933      	ldr	r1, [pc, #204]	@ (800af78 <SGP_GetHT+0xf0>)
 800aeac:	1c18      	adds	r0, r3, #0
 800aeae:	f7f6 f877 	bl	8000fa0 <__aeabi_fmul>
 800aeb2:	1c03      	adds	r3, r0, #0
 800aeb4:	1c18      	adds	r0, r3, #0
 800aeb6:	f7f5 fbb1 	bl	800061c <__aeabi_f2uiz>
 800aeba:	0003      	movs	r3, r0
 800aebc:	b29a      	uxth	r2, r3
 800aebe:	4b2f      	ldr	r3, [pc, #188]	@ (800af7c <SGP_GetHT+0xf4>)
 800aec0:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	492e      	ldr	r1, [pc, #184]	@ (800af80 <SGP_GetHT+0xf8>)
 800aec8:	1c18      	adds	r0, r3, #0
 800aeca:	f7f5 fe83 	bl	8000bd4 <__aeabi_fdiv>
 800aece:	1c03      	adds	r3, r0, #0
 800aed0:	4929      	ldr	r1, [pc, #164]	@ (800af78 <SGP_GetHT+0xf0>)
 800aed2:	1c18      	adds	r0, r3, #0
 800aed4:	f7f6 f864 	bl	8000fa0 <__aeabi_fmul>
 800aed8:	1c03      	adds	r3, r0, #0
 800aeda:	1c18      	adds	r0, r3, #0
 800aedc:	f7f5 fb9e 	bl	800061c <__aeabi_f2uiz>
 800aee0:	0003      	movs	r3, r0
 800aee2:	b29a      	uxth	r2, r3
 800aee4:	4b27      	ldr	r3, [pc, #156]	@ (800af84 <SGP_GetHT+0xfc>)
 800aee6:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800aee8:	4b26      	ldr	r3, [pc, #152]	@ (800af84 <SGP_GetHT+0xfc>)
 800aeea:	881b      	ldrh	r3, [r3, #0]
 800aeec:	0a1b      	lsrs	r3, r3, #8
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	b2da      	uxtb	r2, r3
 800aef2:	4b25      	ldr	r3, [pc, #148]	@ (800af88 <SGP_GetHT+0x100>)
 800aef4:	709a      	strb	r2, [r3, #2]
 800aef6:	4b24      	ldr	r3, [pc, #144]	@ (800af88 <SGP_GetHT+0x100>)
 800aef8:	789a      	ldrb	r2, [r3, #2]
 800aefa:	210c      	movs	r1, #12
 800aefc:	187b      	adds	r3, r7, r1
 800aefe:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800af00:	4b20      	ldr	r3, [pc, #128]	@ (800af84 <SGP_GetHT+0xfc>)
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b2da      	uxtb	r2, r3
 800af06:	4b20      	ldr	r3, [pc, #128]	@ (800af88 <SGP_GetHT+0x100>)
 800af08:	70da      	strb	r2, [r3, #3]
 800af0a:	4b1f      	ldr	r3, [pc, #124]	@ (800af88 <SGP_GetHT+0x100>)
 800af0c:	78da      	ldrb	r2, [r3, #3]
 800af0e:	187b      	adds	r3, r7, r1
 800af10:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800af12:	187b      	adds	r3, r7, r1
 800af14:	2102      	movs	r1, #2
 800af16:	0018      	movs	r0, r3
 800af18:	f7ff ff60 	bl	800addc <CalculateCRC>
 800af1c:	0003      	movs	r3, r0
 800af1e:	001a      	movs	r2, r3
 800af20:	4b19      	ldr	r3, [pc, #100]	@ (800af88 <SGP_GetHT+0x100>)
 800af22:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800af24:	4b15      	ldr	r3, [pc, #84]	@ (800af7c <SGP_GetHT+0xf4>)
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	0a1b      	lsrs	r3, r3, #8
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	4b16      	ldr	r3, [pc, #88]	@ (800af88 <SGP_GetHT+0x100>)
 800af30:	715a      	strb	r2, [r3, #5]
 800af32:	4b15      	ldr	r3, [pc, #84]	@ (800af88 <SGP_GetHT+0x100>)
 800af34:	795a      	ldrb	r2, [r3, #5]
 800af36:	2108      	movs	r1, #8
 800af38:	187b      	adds	r3, r7, r1
 800af3a:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800af3c:	4b0f      	ldr	r3, [pc, #60]	@ (800af7c <SGP_GetHT+0xf4>)
 800af3e:	881b      	ldrh	r3, [r3, #0]
 800af40:	b2da      	uxtb	r2, r3
 800af42:	4b11      	ldr	r3, [pc, #68]	@ (800af88 <SGP_GetHT+0x100>)
 800af44:	719a      	strb	r2, [r3, #6]
 800af46:	4b10      	ldr	r3, [pc, #64]	@ (800af88 <SGP_GetHT+0x100>)
 800af48:	799a      	ldrb	r2, [r3, #6]
 800af4a:	187b      	adds	r3, r7, r1
 800af4c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800af4e:	187b      	adds	r3, r7, r1
 800af50:	2102      	movs	r1, #2
 800af52:	0018      	movs	r0, r3
 800af54:	f7ff ff42 	bl	800addc <CalculateCRC>
 800af58:	0003      	movs	r3, r0
 800af5a:	001a      	movs	r2, r3
 800af5c:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <SGP_GetHT+0x100>)
 800af5e:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800af60:	4b0a      	ldr	r3, [pc, #40]	@ (800af8c <SGP_GetHT+0x104>)
 800af62:	2201      	movs	r2, #1
 800af64:	701a      	strb	r2, [r3, #0]
}
 800af66:	46c0      	nop			@ (mov r8, r8)
 800af68:	46bd      	mov	sp, r7
 800af6a:	b004      	add	sp, #16
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	46c0      	nop			@ (mov r8, r8)
 800af70:	42340000 	.word	0x42340000
 800af74:	432f0000 	.word	0x432f0000
 800af78:	477fff00 	.word	0x477fff00
 800af7c:	200012ba 	.word	0x200012ba
 800af80:	42c80000 	.word	0x42c80000
 800af84:	200012b8 	.word	0x200012b8
 800af88:	20000098 	.word	0x20000098
 800af8c:	200012bc 	.word	0x200012bc

0800af90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	0002      	movs	r2, r0
 800af98:	1dfb      	adds	r3, r7, #7
 800af9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800af9c:	1dfb      	adds	r3, r7, #7
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2b7f      	cmp	r3, #127	@ 0x7f
 800afa2:	d809      	bhi.n	800afb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afa4:	1dfb      	adds	r3, r7, #7
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	001a      	movs	r2, r3
 800afaa:	231f      	movs	r3, #31
 800afac:	401a      	ands	r2, r3
 800afae:	4b04      	ldr	r3, [pc, #16]	@ (800afc0 <__NVIC_EnableIRQ+0x30>)
 800afb0:	2101      	movs	r1, #1
 800afb2:	4091      	lsls	r1, r2
 800afb4:	000a      	movs	r2, r1
 800afb6:	601a      	str	r2, [r3, #0]
  }
}
 800afb8:	46c0      	nop			@ (mov r8, r8)
 800afba:	46bd      	mov	sp, r7
 800afbc:	b002      	add	sp, #8
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	e000e100 	.word	0xe000e100

0800afc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	0002      	movs	r2, r0
 800afcc:	1dfb      	adds	r3, r7, #7
 800afce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800afd0:	1dfb      	adds	r3, r7, #7
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	2b7f      	cmp	r3, #127	@ 0x7f
 800afd6:	d810      	bhi.n	800affa <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800afd8:	1dfb      	adds	r3, r7, #7
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	001a      	movs	r2, r3
 800afde:	231f      	movs	r3, #31
 800afe0:	4013      	ands	r3, r2
 800afe2:	4908      	ldr	r1, [pc, #32]	@ (800b004 <__NVIC_DisableIRQ+0x40>)
 800afe4:	2201      	movs	r2, #1
 800afe6:	409a      	lsls	r2, r3
 800afe8:	0013      	movs	r3, r2
 800afea:	2280      	movs	r2, #128	@ 0x80
 800afec:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800afee:	f3bf 8f4f 	dsb	sy
}
 800aff2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800aff4:	f3bf 8f6f 	isb	sy
}
 800aff8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800affa:	46c0      	nop			@ (mov r8, r8)
 800affc:	46bd      	mov	sp, r7
 800affe:	b002      	add	sp, #8
 800b000:	bd80      	pop	{r7, pc}
 800b002:	46c0      	nop			@ (mov r8, r8)
 800b004:	e000e100 	.word	0xe000e100

0800b008 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800b008:	b5b0      	push	{r4, r5, r7, lr}
 800b00a:	b088      	sub	sp, #32
 800b00c:	af02      	add	r7, sp, #8
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	0008      	movs	r0, r1
 800b012:	0011      	movs	r1, r2
 800b014:	1cfb      	adds	r3, r7, #3
 800b016:	1c02      	adds	r2, r0, #0
 800b018:	701a      	strb	r2, [r3, #0]
 800b01a:	1cbb      	adds	r3, r7, #2
 800b01c:	1c0a      	adds	r2, r1, #0
 800b01e:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800b020:	4b5b      	ldr	r3, [pc, #364]	@ (800b190 <getSoundData+0x188>)
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2201      	movs	r2, #1
 800b028:	4053      	eors	r3, r2
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d107      	bne.n	800b040 <getSoundData+0x38>
 800b030:	4b58      	ldr	r3, [pc, #352]	@ (800b194 <getSoundData+0x18c>)
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	b2db      	uxtb	r3, r3
 800b036:	2201      	movs	r2, #1
 800b038:	4053      	eors	r3, r2
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d001      	beq.n	800b044 <getSoundData+0x3c>
    {
        return false;
 800b040:	2300      	movs	r3, #0
 800b042:	e0a0      	b.n	800b186 <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800b044:	4b54      	ldr	r3, [pc, #336]	@ (800b198 <getSoundData+0x190>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b04e:	4b53      	ldr	r3, [pc, #332]	@ (800b19c <getSoundData+0x194>)
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	b25b      	sxtb	r3, r3
 800b054:	0018      	movs	r0, r3
 800b056:	f7ff ffb5 	bl	800afc4 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800b05a:	f3bf 8f4f 	dsb	sy
}
 800b05e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b060:	f3bf 8f6f 	isb	sy
}
 800b064:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800b066:	1cfb      	adds	r3, r7, #3
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d04c      	beq.n	800b108 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800b06e:	4b4c      	ldr	r3, [pc, #304]	@ (800b1a0 <getSoundData+0x198>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d11b      	bne.n	800b0ae <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]
 800b086:	e00e      	b.n	800b0a6 <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	18d3      	adds	r3, r2, r3
 800b08e:	3302      	adds	r3, #2
 800b090:	2200      	movs	r2, #0
 800b092:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	18d3      	adds	r3, r2, r3
 800b09a:	3308      	adds	r3, #8
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b05      	cmp	r3, #5
 800b0aa:	d9ed      	bls.n	800b088 <getSoundData+0x80>
 800b0ac:	e02c      	b.n	800b108 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	1c59      	adds	r1, r3, #1
 800b0b4:	4b3b      	ldr	r3, [pc, #236]	@ (800b1a4 <getSoundData+0x19c>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	4b3b      	ldr	r3, [pc, #236]	@ (800b1a8 <getSoundData+0x1a0>)
 800b0ba:	681c      	ldr	r4, [r3, #0]
 800b0bc:	4b38      	ldr	r3, [pc, #224]	@ (800b1a0 <getSoundData+0x198>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	0023      	movs	r3, r4
 800b0c4:	f000 fde8 	bl	800bc98 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	613b      	str	r3, [r7, #16]
 800b0cc:	e019      	b.n	800b102 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	18d3      	adds	r3, r2, r3
 800b0d4:	1c98      	adds	r0, r3, #2
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800b0de:	4b33      	ldr	r3, [pc, #204]	@ (800b1ac <getSoundData+0x1a4>)
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	0092      	lsls	r2, r2, #2
 800b0e4:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800b0e6:	4b32      	ldr	r3, [pc, #200]	@ (800b1b0 <getSoundData+0x1a8>)
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	0092      	lsls	r2, r2, #2
 800b0ec:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b0ee:	4b2c      	ldr	r3, [pc, #176]	@ (800b1a0 <getSoundData+0x198>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	0013      	movs	r3, r2
 800b0f6:	0022      	movs	r2, r4
 800b0f8:	f000 fdce 	bl	800bc98 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	3301      	adds	r3, #1
 800b100:	613b      	str	r3, [r7, #16]
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	2b05      	cmp	r3, #5
 800b106:	d9e2      	bls.n	800b0ce <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800b108:	1cbb      	adds	r3, r7, #2
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d028      	beq.n	800b162 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800b110:	240e      	movs	r4, #14
 800b112:	193b      	adds	r3, r7, r4
 800b114:	2200      	movs	r2, #0
 800b116:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800b118:	250d      	movs	r5, #13
 800b11a:	197b      	adds	r3, r7, r5
 800b11c:	2200      	movs	r2, #0
 800b11e:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800b120:	4b24      	ldr	r3, [pc, #144]	@ (800b1b4 <getSoundData+0x1ac>)
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	4924      	ldr	r1, [pc, #144]	@ (800b1b8 <getSoundData+0x1b0>)
 800b126:	197b      	adds	r3, r7, r5
 800b128:	193a      	adds	r2, r7, r4
 800b12a:	f000 fe59 	bl	800bde0 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800b12e:	193b      	adds	r3, r7, r4
 800b130:	881a      	ldrh	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	21ff      	movs	r1, #255	@ 0xff
 800b136:	4011      	ands	r1, r2
 800b138:	000c      	movs	r4, r1
 800b13a:	7b99      	ldrb	r1, [r3, #14]
 800b13c:	2000      	movs	r0, #0
 800b13e:	4001      	ands	r1, r0
 800b140:	1c08      	adds	r0, r1, #0
 800b142:	1c21      	adds	r1, r4, #0
 800b144:	4301      	orrs	r1, r0
 800b146:	7399      	strb	r1, [r3, #14]
 800b148:	0a12      	lsrs	r2, r2, #8
 800b14a:	b290      	uxth	r0, r2
 800b14c:	7bda      	ldrb	r2, [r3, #15]
 800b14e:	2100      	movs	r1, #0
 800b150:	400a      	ands	r2, r1
 800b152:	1c11      	adds	r1, r2, #0
 800b154:	1c02      	adds	r2, r0, #0
 800b156:	430a      	orrs	r2, r1
 800b158:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800b15a:	197b      	adds	r3, r7, r5
 800b15c:	781a      	ldrb	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800b162:	f000 f86f 	bl	800b244 <micSettlingComplete>
 800b166:	0003      	movs	r3, r0
 800b168:	001a      	movs	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800b16e:	4b0a      	ldr	r3, [pc, #40]	@ (800b198 <getSoundData+0x190>)
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b178:	4b08      	ldr	r3, [pc, #32]	@ (800b19c <getSoundData+0x194>)
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	b25b      	sxtb	r3, r3
 800b17e:	0018      	movs	r0, r3
 800b180:	f7ff ff06 	bl	800af90 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800b184:	2301      	movs	r3, #1
}
 800b186:	0018      	movs	r0, r3
 800b188:	46bd      	mov	sp, r7
 800b18a:	b006      	add	sp, #24
 800b18c:	bdb0      	pop	{r4, r5, r7, pc}
 800b18e:	46c0      	nop			@ (mov r8, r8)
 800b190:	200012c5 	.word	0x200012c5
 800b194:	200012c8 	.word	0x200012c8
 800b198:	200012c7 	.word	0x200012c7
 800b19c:	20001d18 	.word	0x20001d18
 800b1a0:	20001d54 	.word	0x20001d54
 800b1a4:	20001d1c 	.word	0x20001d1c
 800b1a8:	20001d20 	.word	0x20001d20
 800b1ac:	20001d24 	.word	0x20001d24
 800b1b0:	20001d3c 	.word	0x20001d3c
 800b1b4:	200012d0 	.word	0x200012d0
 800b1b8:	3b5c7333 	.word	0x3b5c7333

0800b1bc <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	607a      	str	r2, [r7, #4]
 800b1c8:	001a      	movs	r2, r3
 800b1ca:	1cfb      	adds	r3, r7, #3
 800b1cc:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800b1ce:	4b09      	ldr	r3, [pc, #36]	@ (800b1f4 <soundInit+0x38>)
 800b1d0:	68ba      	ldr	r2, [r7, #8]
 800b1d2:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800b1d4:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <soundInit+0x3c>)
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800b1da:	4b08      	ldr	r3, [pc, #32]	@ (800b1fc <soundInit+0x40>)
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800b1e0:	4b07      	ldr	r3, [pc, #28]	@ (800b200 <soundInit+0x44>)
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	569a      	ldrsb	r2, [r3, r2]
 800b1e6:	4b06      	ldr	r3, [pc, #24]	@ (800b200 <soundInit+0x44>)
 800b1e8:	701a      	strb	r2, [r3, #0]

    return true;
 800b1ea:	2301      	movs	r3, #1
}
 800b1ec:	0018      	movs	r0, r3
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	b004      	add	sp, #16
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	20001d10 	.word	0x20001d10
 800b1f8:	20001d0c 	.word	0x20001d0c
 800b1fc:	20001d14 	.word	0x20001d14
 800b200:	20001d18 	.word	0x20001d18

0800b204 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800b208:	4b02      	ldr	r3, [pc, #8]	@ (800b214 <clearMaximumAmplitude+0x10>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	601a      	str	r2, [r3, #0]
}
 800b20e:	46c0      	nop			@ (mov r8, r8)
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	200012d0 	.word	0x200012d0

0800b218 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800b21c:	4b08      	ldr	r3, [pc, #32]	@ (800b240 <startMicSettlingPeriod+0x28>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2200      	movs	r2, #0
 800b224:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800b226:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <startMicSettlingPeriod+0x28>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	0018      	movs	r0, r3
 800b22c:	f009 fde2 	bl	8014df4 <HAL_TIM_Base_Start>
 800b230:	1e03      	subs	r3, r0, #0
 800b232:	d001      	beq.n	800b238 <startMicSettlingPeriod+0x20>
    {
        return false;
 800b234:	2300      	movs	r3, #0
 800b236:	e000      	b.n	800b23a <startMicSettlingPeriod+0x22>
    }
    return true;
 800b238:	2301      	movs	r3, #1
}
 800b23a:	0018      	movs	r0, r3
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	20001d0c 	.word	0x20001d0c

0800b244 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800b24a:	4b0e      	ldr	r3, [pc, #56]	@ (800b284 <micSettlingComplete+0x40>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	2201      	movs	r2, #1
 800b254:	401a      	ands	r2, r3
 800b256:	1dfb      	adds	r3, r7, #7
 800b258:	3a01      	subs	r2, #1
 800b25a:	4251      	negs	r1, r2
 800b25c:	414a      	adcs	r2, r1
 800b25e:	701a      	strb	r2, [r3, #0]
    if (complete)
 800b260:	1dfb      	adds	r3, r7, #7
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d007      	beq.n	800b278 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800b268:	4b06      	ldr	r3, [pc, #24]	@ (800b284 <micSettlingComplete+0x40>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	0018      	movs	r0, r3
 800b26e:	f009 fe0b 	bl	8014e88 <HAL_TIM_Base_Stop>
      DataReady = true;
 800b272:	4b05      	ldr	r3, [pc, #20]	@ (800b288 <micSettlingComplete+0x44>)
 800b274:	2201      	movs	r2, #1
 800b276:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800b278:	1dfb      	adds	r3, r7, #7
 800b27a:	781b      	ldrb	r3, [r3, #0]
}
 800b27c:	0018      	movs	r0, r3
 800b27e:	46bd      	mov	sp, r7
 800b280:	b002      	add	sp, #8
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20001d0c 	.word	0x20001d0c
 800b288:	200012c4 	.word	0x200012c4

0800b28c <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	0002      	movs	r2, r0
 800b294:	1dfb      	adds	r3, r7, #7
 800b296:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800b298:	4b29      	ldr	r3, [pc, #164]	@ (800b340 <enableMicrophone+0xb4>)
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	1dfa      	adds	r2, r7, #7
 800b2a0:	7812      	ldrb	r2, [r2, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d101      	bne.n	800b2aa <enableMicrophone+0x1e>
    {
        return true;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e045      	b.n	800b336 <enableMicrophone+0xaa>
    }
    if (bEnable)
 800b2aa:	1dfb      	adds	r3, r7, #7
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d025      	beq.n	800b2fe <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800b2b2:	f7ff ffb1 	bl	800b218 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800b2b6:	4b23      	ldr	r3, [pc, #140]	@ (800b344 <enableMicrophone+0xb8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2280      	movs	r2, #128	@ 0x80
 800b2bc:	0092      	lsls	r2, r2, #2
 800b2be:	4922      	ldr	r1, [pc, #136]	@ (800b348 <enableMicrophone+0xbc>)
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	f006 f977 	bl	80115b4 <HAL_I2S_Receive_DMA>
 800b2c6:	1e03      	subs	r3, r0, #0
 800b2c8:	d001      	beq.n	800b2ce <enableMicrophone+0x42>
        {
            return false;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e033      	b.n	800b336 <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800b2ce:	f7ff ff99 	bl	800b204 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800b2d2:	4b1e      	ldr	r3, [pc, #120]	@ (800b34c <enableMicrophone+0xc0>)
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b2d8:	4b1d      	ldr	r3, [pc, #116]	@ (800b350 <enableMicrophone+0xc4>)
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	b25b      	sxtb	r3, r3
 800b2de:	0018      	movs	r0, r3
 800b2e0:	f7ff fe56 	bl	800af90 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800b2e4:	4b1b      	ldr	r3, [pc, #108]	@ (800b354 <enableMicrophone+0xc8>)
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800b2ea:	4b15      	ldr	r3, [pc, #84]	@ (800b340 <enableMicrophone+0xb4>)
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b2f0:	4b19      	ldr	r3, [pc, #100]	@ (800b358 <enableMicrophone+0xcc>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b2f6:	4b19      	ldr	r3, [pc, #100]	@ (800b35c <enableMicrophone+0xd0>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	701a      	strb	r2, [r3, #0]
 800b2fc:	e01a      	b.n	800b334 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b2fe:	4b14      	ldr	r3, [pc, #80]	@ (800b350 <enableMicrophone+0xc4>)
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b25b      	sxtb	r3, r3
 800b304:	0018      	movs	r0, r3
 800b306:	f7ff fe5d 	bl	800afc4 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800b30a:	4b12      	ldr	r3, [pc, #72]	@ (800b354 <enableMicrophone+0xc8>)
 800b30c:	2200      	movs	r2, #0
 800b30e:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b310:	4b11      	ldr	r3, [pc, #68]	@ (800b358 <enableMicrophone+0xcc>)
 800b312:	2200      	movs	r2, #0
 800b314:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b316:	4b11      	ldr	r3, [pc, #68]	@ (800b35c <enableMicrophone+0xd0>)
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800b31c:	4b09      	ldr	r3, [pc, #36]	@ (800b344 <enableMicrophone+0xb8>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	0018      	movs	r0, r3
 800b322:	f006 fa09 	bl	8011738 <HAL_I2S_DMAStop>
 800b326:	1e03      	subs	r3, r0, #0
 800b328:	d001      	beq.n	800b32e <enableMicrophone+0xa2>
        {
            return false;
 800b32a:	2300      	movs	r3, #0
 800b32c:	e003      	b.n	800b336 <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800b32e:	4b04      	ldr	r3, [pc, #16]	@ (800b340 <enableMicrophone+0xb4>)
 800b330:	2200      	movs	r2, #0
 800b332:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800b334:	2301      	movs	r3, #1
}
 800b336:	0018      	movs	r0, r3
 800b338:	46bd      	mov	sp, r7
 800b33a:	b002      	add	sp, #8
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	46c0      	nop			@ (mov r8, r8)
 800b340:	200012c5 	.word	0x200012c5
 800b344:	20001d10 	.word	0x20001d10
 800b348:	2000130c 	.word	0x2000130c
 800b34c:	200012cc 	.word	0x200012cc
 800b350:	20001d18 	.word	0x20001d18
 800b354:	200012c7 	.word	0x200012c7
 800b358:	200012c6 	.word	0x200012c6
 800b35c:	200012c8 	.word	0x200012c8

0800b360 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800b364:	4b0c      	ldr	r3, [pc, #48]	@ (800b398 <startSPLcalculation+0x38>)
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2201      	movs	r2, #1
 800b36c:	4053      	eors	r3, r2
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <startSPLcalculation+0x18>
    {
        return false;
 800b374:	2300      	movs	r3, #0
 800b376:	e00c      	b.n	800b392 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800b378:	4b08      	ldr	r3, [pc, #32]	@ (800b39c <startSPLcalculation+0x3c>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <startSPLcalculation+0x26>
    {
        return true;
 800b382:	2301      	movs	r3, #1
 800b384:	e005      	b.n	800b392 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800b386:	f000 fb63 	bl	800ba50 <resetSPLstate>
    SPLcalcEnabled = true;
 800b38a:	4b04      	ldr	r3, [pc, #16]	@ (800b39c <startSPLcalculation+0x3c>)
 800b38c:	2201      	movs	r2, #1
 800b38e:	701a      	strb	r2, [r3, #0]
    return true;
 800b390:	2301      	movs	r3, #1
}
 800b392:	0018      	movs	r0, r3
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	200012c5 	.word	0x200012c5
 800b39c:	200012c6 	.word	0x200012c6

0800b3a0 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b3a8:	4b05      	ldr	r3, [pc, #20]	@ (800b3c0 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d102      	bne.n	800b3b8 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	f000 f81a 	bl	800b3ec <processHalfDMAbuffer>
  }
}
 800b3b8:	46c0      	nop			@ (mov r8, r8)
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	b002      	add	sp, #8
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	20001d10 	.word	0x20001d10

0800b3c4 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b3cc:	4b06      	ldr	r3, [pc, #24]	@ (800b3e8 <HAL_I2S_RxCpltCallback+0x24>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d104      	bne.n	800b3e0 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800b3d6:	2380      	movs	r3, #128	@ 0x80
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	0018      	movs	r0, r3
 800b3dc:	f000 f806 	bl	800b3ec <processHalfDMAbuffer>
  }
}
 800b3e0:	46c0      	nop			@ (mov r8, r8)
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	b002      	add	sp, #8
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20001d10 	.word	0x20001d10

0800b3ec <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	005a      	lsls	r2, r3, #1
 800b3f8:	4b15      	ldr	r3, [pc, #84]	@ (800b450 <processHalfDMAbuffer+0x64>)
 800b3fa:	18d3      	adds	r3, r2, r3
 800b3fc:	4a15      	ldr	r2, [pc, #84]	@ (800b454 <processHalfDMAbuffer+0x68>)
 800b3fe:	2180      	movs	r1, #128	@ 0x80
 800b400:	0089      	lsls	r1, r1, #2
 800b402:	0018      	movs	r0, r3
 800b404:	f000 fd35 	bl	800be72 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800b408:	4b13      	ldr	r3, [pc, #76]	@ (800b458 <processHalfDMAbuffer+0x6c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	425a      	negs	r2, r3
 800b40e:	4153      	adcs	r3, r2
 800b410:	b2da      	uxtb	r2, r3
 800b412:	4b11      	ldr	r3, [pc, #68]	@ (800b458 <processHalfDMAbuffer+0x6c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2109      	movs	r1, #9
 800b418:	4299      	cmp	r1, r3
 800b41a:	419b      	sbcs	r3, r3
 800b41c:	425b      	negs	r3, r3
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	480c      	ldr	r0, [pc, #48]	@ (800b454 <processHalfDMAbuffer+0x68>)
 800b422:	2180      	movs	r1, #128	@ 0x80
 800b424:	f000 fb46 	bl	800bab4 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800b428:	4b0b      	ldr	r3, [pc, #44]	@ (800b458 <processHalfDMAbuffer+0x6c>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	2b09      	cmp	r3, #9
 800b42e:	d804      	bhi.n	800b43a <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800b430:	4b09      	ldr	r3, [pc, #36]	@ (800b458 <processHalfDMAbuffer+0x6c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	4b08      	ldr	r3, [pc, #32]	@ (800b458 <processHalfDMAbuffer+0x6c>)
 800b438:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800b43a:	4b08      	ldr	r3, [pc, #32]	@ (800b45c <processHalfDMAbuffer+0x70>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800b444:	f000 f826 	bl	800b494 <calculateSPLQ31>
    }
}
 800b448:	46c0      	nop			@ (mov r8, r8)
 800b44a:	46bd      	mov	sp, r7
 800b44c:	b002      	add	sp, #8
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	2000130c 	.word	0x2000130c
 800b454:	20001b0c 	.word	0x20001b0c
 800b458:	200012cc 	.word	0x200012cc
 800b45c:	200012c6 	.word	0x200012c6

0800b460 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b468:	4b07      	ldr	r3, [pc, #28]	@ (800b488 <HAL_I2S_ErrorCallback+0x28>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d106      	bne.n	800b480 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800b472:	4a06      	ldr	r2, [pc, #24]	@ (800b48c <HAL_I2S_ErrorCallback+0x2c>)
 800b474:	239f      	movs	r3, #159	@ 0x9f
 800b476:	0059      	lsls	r1, r3, #1
 800b478:	4b05      	ldr	r3, [pc, #20]	@ (800b490 <HAL_I2S_ErrorCallback+0x30>)
 800b47a:	0018      	movs	r0, r3
 800b47c:	f001 fdd2 	bl	800d024 <errorHandler>
  }
}
 800b480:	46c0      	nop			@ (mov r8, r8)
 800b482:	46bd      	mov	sp, r7
 800b484:	b002      	add	sp, #8
 800b486:	bd80      	pop	{r7, pc}
 800b488:	20001d10 	.word	0x20001d10
 800b48c:	08022cd4 	.word	0x08022cd4
 800b490:	08023354 	.word	0x08023354

0800b494 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800b494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b496:	b0b3      	sub	sp, #204	@ 0xcc
 800b498:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800b49a:	4ae2      	ldr	r2, [pc, #904]	@ (800b824 <calculateSPLQ31+0x390>)
 800b49c:	2338      	movs	r3, #56	@ 0x38
 800b49e:	2030      	movs	r0, #48	@ 0x30
 800b4a0:	181b      	adds	r3, r3, r0
 800b4a2:	19d9      	adds	r1, r3, r7
 800b4a4:	2334      	movs	r3, #52	@ 0x34
 800b4a6:	181b      	adds	r3, r3, r0
 800b4a8:	19d8      	adds	r0, r3, r7
 800b4aa:	2380      	movs	r3, #128	@ 0x80
 800b4ac:	f000 fc36 	bl	800bd1c <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800b4b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	da00      	bge.n	800b4b8 <calculateSPLQ31+0x24>
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	105b      	asrs	r3, r3, #1
 800b4ba:	001a      	movs	r2, r3
 800b4bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	da00      	bge.n	800b4c4 <calculateSPLQ31+0x30>
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	105b      	asrs	r3, r3, #1
 800b4c6:	18d3      	adds	r3, r2, r3
 800b4c8:	2188      	movs	r1, #136	@ 0x88
 800b4ca:	187a      	adds	r2, r7, r1
 800b4cc:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800b4ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b4d0:	187b      	adds	r3, r7, r1
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	1ad3      	subs	r3, r2, r3
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	2284      	movs	r2, #132	@ 0x84
 800b4da:	18b9      	adds	r1, r7, r2
 800b4dc:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800b4de:	18bb      	adds	r3, r7, r2
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4ad1      	ldr	r2, [pc, #836]	@ (800b828 <calculateSPLQ31+0x394>)
 800b4e4:	0019      	movs	r1, r3
 800b4e6:	0010      	movs	r0, r2
 800b4e8:	f000 fc58 	bl	800bd9c <getPo2factor>
 800b4ec:	0003      	movs	r3, r0
 800b4ee:	2280      	movs	r2, #128	@ 0x80
 800b4f0:	18ba      	adds	r2, r7, r2
 800b4f2:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	2284      	movs	r2, #132	@ 0x84
 800b4f8:	2130      	movs	r1, #48	@ 0x30
 800b4fa:	1852      	adds	r2, r2, r1
 800b4fc:	19d2      	adds	r2, r2, r7
 800b4fe:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800b500:	2300      	movs	r3, #0
 800b502:	2280      	movs	r2, #128	@ 0x80
 800b504:	1852      	adds	r2, r2, r1
 800b506:	19d2      	adds	r2, r2, r7
 800b508:	6013      	str	r3, [r2, #0]
 800b50a:	e032      	b.n	800b572 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800b50c:	4ac5      	ldr	r2, [pc, #788]	@ (800b824 <calculateSPLQ31+0x390>)
 800b50e:	2680      	movs	r6, #128	@ 0x80
 800b510:	2330      	movs	r3, #48	@ 0x30
 800b512:	18f1      	adds	r1, r6, r3
 800b514:	19cb      	adds	r3, r1, r7
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	589a      	ldr	r2, [r3, r2]
 800b51c:	2188      	movs	r1, #136	@ 0x88
 800b51e:	1879      	adds	r1, r7, r1
 800b520:	680b      	ldr	r3, [r1, #0]
 800b522:	1ad2      	subs	r2, r2, r3
 800b524:	2180      	movs	r1, #128	@ 0x80
 800b526:	1879      	adds	r1, r7, r1
 800b528:	680b      	ldr	r3, [r1, #0]
 800b52a:	409a      	lsls	r2, r3
 800b52c:	0011      	movs	r1, r2
 800b52e:	4abf      	ldr	r2, [pc, #764]	@ (800b82c <calculateSPLQ31+0x398>)
 800b530:	2084      	movs	r0, #132	@ 0x84
 800b532:	2330      	movs	r3, #48	@ 0x30
 800b534:	18c3      	adds	r3, r0, r3
 800b536:	19db      	adds	r3, r3, r7
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800b53e:	2230      	movs	r2, #48	@ 0x30
 800b540:	1883      	adds	r3, r0, r2
 800b542:	19db      	adds	r3, r3, r7
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	49b8      	ldr	r1, [pc, #736]	@ (800b82c <calculateSPLQ31+0x398>)
 800b54a:	009a      	lsls	r2, r3, #2
 800b54c:	2300      	movs	r3, #0
 800b54e:	5053      	str	r3, [r2, r1]
        count += 2;
 800b550:	2230      	movs	r2, #48	@ 0x30
 800b552:	1883      	adds	r3, r0, r2
 800b554:	19db      	adds	r3, r3, r7
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3302      	adds	r3, #2
 800b55a:	0011      	movs	r1, r2
 800b55c:	1882      	adds	r2, r0, r2
 800b55e:	19d2      	adds	r2, r2, r7
 800b560:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800b562:	000a      	movs	r2, r1
 800b564:	18b3      	adds	r3, r6, r2
 800b566:	19db      	adds	r3, r3, r7
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3301      	adds	r3, #1
 800b56c:	18b2      	adds	r2, r6, r2
 800b56e:	19d2      	adds	r2, r2, r7
 800b570:	6013      	str	r3, [r2, #0]
 800b572:	2380      	movs	r3, #128	@ 0x80
 800b574:	2630      	movs	r6, #48	@ 0x30
 800b576:	199b      	adds	r3, r3, r6
 800b578:	19db      	adds	r3, r3, r7
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b57e:	d9c5      	bls.n	800b50c <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800b580:	4bab      	ldr	r3, [pc, #684]	@ (800b830 <calculateSPLQ31+0x39c>)
 800b582:	6818      	ldr	r0, [r3, #0]
 800b584:	49a9      	ldr	r1, [pc, #676]	@ (800b82c <calculateSPLQ31+0x398>)
 800b586:	2301      	movs	r3, #1
 800b588:	2200      	movs	r2, #0
 800b58a:	f010 fcf9 	bl	801bf80 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800b58e:	4aa9      	ldr	r2, [pc, #676]	@ (800b834 <calculateSPLQ31+0x3a0>)
 800b590:	2338      	movs	r3, #56	@ 0x38
 800b592:	199b      	adds	r3, r3, r6
 800b594:	19d9      	adds	r1, r3, r7
 800b596:	2334      	movs	r3, #52	@ 0x34
 800b598:	199b      	adds	r3, r3, r6
 800b59a:	19d8      	adds	r0, r3, r7
 800b59c:	237e      	movs	r3, #126	@ 0x7e
 800b59e:	f000 fbbd 	bl	800bd1c <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800b5a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b5a4:	2380      	movs	r3, #128	@ 0x80
 800b5a6:	061b      	lsls	r3, r3, #24
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d101      	bne.n	800b5b0 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800b5ac:	4b9e      	ldr	r3, [pc, #632]	@ (800b828 <calculateSPLQ31+0x394>)
 800b5ae:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800b5b0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b5b2:	2380      	movs	r3, #128	@ 0x80
 800b5b4:	061b      	lsls	r3, r3, #24
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d101      	bne.n	800b5be <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800b5ba:	4b9b      	ldr	r3, [pc, #620]	@ (800b828 <calculateSPLQ31+0x394>)
 800b5bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800b5be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5c0:	17da      	asrs	r2, r3, #31
 800b5c2:	189b      	adds	r3, r3, r2
 800b5c4:	4053      	eors	r3, r2
 800b5c6:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800b5c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5ca:	17da      	asrs	r2, r3, #31
 800b5cc:	189b      	adds	r3, r3, r2
 800b5ce:	4053      	eors	r3, r2
 800b5d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800b5d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b5d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	dd01      	ble.n	800b5de <calculateSPLQ31+0x14a>
    {
        max = min;
 800b5da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5dc:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800b5de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5e0:	3304      	adds	r3, #4
 800b5e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800b5e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5e6:	4a90      	ldr	r2, [pc, #576]	@ (800b828 <calculateSPLQ31+0x394>)
 800b5e8:	0019      	movs	r1, r3
 800b5ea:	0010      	movs	r0, r2
 800b5ec:	f000 fbd6 	bl	800bd9c <getPo2factor>
 800b5f0:	0003      	movs	r3, r0
 800b5f2:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	22ac      	movs	r2, #172	@ 0xac
 800b5f8:	18ba      	adds	r2, r7, r2
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	e012      	b.n	800b624 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800b5fe:	4a8b      	ldr	r2, [pc, #556]	@ (800b82c <calculateSPLQ31+0x398>)
 800b600:	20ac      	movs	r0, #172	@ 0xac
 800b602:	183b      	adds	r3, r7, r0
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	589a      	ldr	r2, [r3, r2]
 800b60a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b60c:	409a      	lsls	r2, r3
 800b60e:	0011      	movs	r1, r2
 800b610:	4a86      	ldr	r2, [pc, #536]	@ (800b82c <calculateSPLQ31+0x398>)
 800b612:	183b      	adds	r3, r7, r0
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800b61a:	183b      	adds	r3, r7, r0
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3301      	adds	r3, #1
 800b620:	183a      	adds	r2, r7, r0
 800b622:	6013      	str	r3, [r2, #0]
 800b624:	23ac      	movs	r3, #172	@ 0xac
 800b626:	18fb      	adds	r3, r7, r3
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b62c:	d9e7      	bls.n	800b5fe <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800b62e:	4b7d      	ldr	r3, [pc, #500]	@ (800b824 <calculateSPLQ31+0x390>)
 800b630:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800b632:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800b634:	4b7d      	ldr	r3, [pc, #500]	@ (800b82c <calculateSPLQ31+0x398>)
 800b636:	2240      	movs	r2, #64	@ 0x40
 800b638:	0018      	movs	r0, r3
 800b63a:	f011 fa4b 	bl	801cad4 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800b63e:	2330      	movs	r3, #48	@ 0x30
 800b640:	18fb      	adds	r3, r7, r3
 800b642:	0018      	movs	r0, r3
 800b644:	2330      	movs	r3, #48	@ 0x30
 800b646:	001a      	movs	r2, r3
 800b648:	2100      	movs	r1, #0
 800b64a:	f013 f867 	bl	801e71c <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800b64e:	2200      	movs	r2, #0
 800b650:	2300      	movs	r3, #0
 800b652:	21a0      	movs	r1, #160	@ 0xa0
 800b654:	1879      	adds	r1, r7, r1
 800b656:	600a      	str	r2, [r1, #0]
 800b658:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800b65a:	2301      	movs	r3, #1
 800b65c:	229c      	movs	r2, #156	@ 0x9c
 800b65e:	18ba      	adds	r2, r7, r2
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	e05b      	b.n	800b71c <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800b664:	269c      	movs	r6, #156	@ 0x9c
 800b666:	19bb      	adds	r3, r7, r6
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	009a      	lsls	r2, r3, #2
 800b66c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b66e:	189b      	adds	r3, r3, r2
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	17db      	asrs	r3, r3, #31
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	4b6f      	ldr	r3, [pc, #444]	@ (800b838 <calculateSPLQ31+0x3a4>)
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	19bb      	adds	r3, r7, r6
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	005b      	lsls	r3, r3, #1
 800b682:	18d3      	adds	r3, r2, r3
 800b684:	881b      	ldrh	r3, [r3, #0]
 800b686:	60bb      	str	r3, [r7, #8]
 800b688:	2300      	movs	r3, #0
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	6938      	ldr	r0, [r7, #16]
 800b692:	6979      	ldr	r1, [r7, #20]
 800b694:	f7f4 ff94 	bl	80005c0 <__aeabi_lmul>
 800b698:	0002      	movs	r2, r0
 800b69a:	000b      	movs	r3, r1
 800b69c:	0010      	movs	r0, r2
 800b69e:	0019      	movs	r1, r3
 800b6a0:	23a0      	movs	r3, #160	@ 0xa0
 800b6a2:	18fa      	adds	r2, r7, r3
 800b6a4:	6853      	ldr	r3, [r2, #4]
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	1812      	adds	r2, r2, r0
 800b6aa:	414b      	adcs	r3, r1
 800b6ac:	21a0      	movs	r1, #160	@ 0xa0
 800b6ae:	1879      	adds	r1, r7, r1
 800b6b0:	600a      	str	r2, [r1, #0]
 800b6b2:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800b6b4:	4b61      	ldr	r3, [pc, #388]	@ (800b83c <calculateSPLQ31+0x3a8>)
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	19bb      	adds	r3, r7, r6
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	18d3      	adds	r3, r2, r3
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b06      	cmp	r3, #6
 800b6c2:	d025      	beq.n	800b710 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800b6c4:	4b5d      	ldr	r3, [pc, #372]	@ (800b83c <calculateSPLQ31+0x3a8>)
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	19bb      	adds	r3, r7, r6
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	18d3      	adds	r3, r2, r3
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	2230      	movs	r2, #48	@ 0x30
 800b6d2:	18ba      	adds	r2, r7, r2
 800b6d4:	00db      	lsls	r3, r3, #3
 800b6d6:	18d3      	adds	r3, r2, r3
 800b6d8:	6818      	ldr	r0, [r3, #0]
 800b6da:	6859      	ldr	r1, [r3, #4]
 800b6dc:	19bb      	adds	r3, r7, r6
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	009a      	lsls	r2, r3, #2
 800b6e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b6e4:	189b      	adds	r3, r3, r2
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	603b      	str	r3, [r7, #0]
 800b6ea:	17db      	asrs	r3, r3, #31
 800b6ec:	607b      	str	r3, [r7, #4]
 800b6ee:	4b53      	ldr	r3, [pc, #332]	@ (800b83c <calculateSPLQ31+0x3a8>)
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	19be      	adds	r6, r7, r6
 800b6f4:	6833      	ldr	r3, [r6, #0]
 800b6f6:	18d3      	adds	r3, r2, r3
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	001e      	movs	r6, r3
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	1880      	adds	r0, r0, r2
 800b702:	4159      	adcs	r1, r3
 800b704:	2330      	movs	r3, #48	@ 0x30
 800b706:	18fa      	adds	r2, r7, r3
 800b708:	00f3      	lsls	r3, r6, #3
 800b70a:	18d3      	adds	r3, r2, r3
 800b70c:	6018      	str	r0, [r3, #0]
 800b70e:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800b710:	229c      	movs	r2, #156	@ 0x9c
 800b712:	18bb      	adds	r3, r7, r2
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3301      	adds	r3, #1
 800b718:	18ba      	adds	r2, r7, r2
 800b71a:	6013      	str	r3, [r2, #0]
 800b71c:	239c      	movs	r3, #156	@ 0x9c
 800b71e:	18fb      	adds	r3, r7, r3
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b3f      	cmp	r3, #63	@ 0x3f
 800b724:	d99e      	bls.n	800b664 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800b726:	2380      	movs	r3, #128	@ 0x80
 800b728:	18fb      	adds	r3, r7, r3
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	001a      	movs	r2, r3
 800b730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b732:	005b      	lsls	r3, r3, #1
 800b734:	18d3      	adds	r3, r2, r3
 800b736:	3b22      	subs	r3, #34	@ 0x22
 800b738:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800b73a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b73c:	17da      	asrs	r2, r3, #31
 800b73e:	189b      	adds	r3, r3, r2
 800b740:	4053      	eors	r3, r2
 800b742:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800b744:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b746:	2b00      	cmp	r3, #0
 800b748:	da62      	bge.n	800b810 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800b74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b74c:	3b20      	subs	r3, #32
 800b74e:	2b00      	cmp	r3, #0
 800b750:	db05      	blt.n	800b75e <calculateSPLQ31+0x2ca>
 800b752:	22a0      	movs	r2, #160	@ 0xa0
 800b754:	18ba      	adds	r2, r7, r2
 800b756:	6812      	ldr	r2, [r2, #0]
 800b758:	409a      	lsls	r2, r3
 800b75a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b75c:	e010      	b.n	800b780 <calculateSPLQ31+0x2ec>
 800b75e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b760:	2220      	movs	r2, #32
 800b762:	1ad3      	subs	r3, r2, r3
 800b764:	22a0      	movs	r2, #160	@ 0xa0
 800b766:	18ba      	adds	r2, r7, r2
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	40da      	lsrs	r2, r3
 800b76c:	0013      	movs	r3, r2
 800b76e:	22a4      	movs	r2, #164	@ 0xa4
 800b770:	18ba      	adds	r2, r7, r2
 800b772:	6811      	ldr	r1, [r2, #0]
 800b774:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b776:	4091      	lsls	r1, r2
 800b778:	6279      	str	r1, [r7, #36]	@ 0x24
 800b77a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b77c:	431a      	orrs	r2, r3
 800b77e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b780:	21a0      	movs	r1, #160	@ 0xa0
 800b782:	187b      	adds	r3, r7, r1
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b788:	409a      	lsls	r2, r3
 800b78a:	623a      	str	r2, [r7, #32]
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800b790:	187a      	adds	r2, r7, r1
 800b792:	6013      	str	r3, [r2, #0]
 800b794:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b796:	2300      	movs	r3, #0
 800b798:	2298      	movs	r2, #152	@ 0x98
 800b79a:	18ba      	adds	r2, r7, r2
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	e031      	b.n	800b804 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800b7a0:	2330      	movs	r3, #48	@ 0x30
 800b7a2:	18fa      	adds	r2, r7, r3
 800b7a4:	2398      	movs	r3, #152	@ 0x98
 800b7a6:	18fb      	adds	r3, r7, r3
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	00db      	lsls	r3, r3, #3
 800b7ac:	18d3      	adds	r3, r2, r3
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b7b4:	3920      	subs	r1, #32
 800b7b6:	2900      	cmp	r1, #0
 800b7b8:	db03      	blt.n	800b7c2 <calculateSPLQ31+0x32e>
 800b7ba:	0010      	movs	r0, r2
 800b7bc:	4088      	lsls	r0, r1
 800b7be:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b7c0:	e00c      	b.n	800b7dc <calculateSPLQ31+0x348>
 800b7c2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b7c4:	2020      	movs	r0, #32
 800b7c6:	1a41      	subs	r1, r0, r1
 800b7c8:	0010      	movs	r0, r2
 800b7ca:	40c8      	lsrs	r0, r1
 800b7cc:	0001      	movs	r1, r0
 800b7ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b7d0:	001c      	movs	r4, r3
 800b7d2:	4084      	lsls	r4, r0
 800b7d4:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800b7d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b7d8:	4308      	orrs	r0, r1
 800b7da:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800b7dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b7de:	0013      	movs	r3, r2
 800b7e0:	408b      	lsls	r3, r1
 800b7e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b7e4:	2330      	movs	r3, #48	@ 0x30
 800b7e6:	18fa      	adds	r2, r7, r3
 800b7e8:	2098      	movs	r0, #152	@ 0x98
 800b7ea:	183b      	adds	r3, r7, r0
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	00db      	lsls	r3, r3, #3
 800b7f0:	18d3      	adds	r3, r2, r3
 800b7f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7f6:	6019      	str	r1, [r3, #0]
 800b7f8:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b7fa:	183b      	adds	r3, r7, r0
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	3301      	adds	r3, #1
 800b800:	183a      	adds	r2, r7, r0
 800b802:	6013      	str	r3, [r2, #0]
 800b804:	2398      	movs	r3, #152	@ 0x98
 800b806:	18fb      	adds	r3, r7, r3
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b05      	cmp	r3, #5
 800b80c:	d9c8      	bls.n	800b7a0 <calculateSPLQ31+0x30c>
 800b80e:	e06b      	b.n	800b8e8 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800b810:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b812:	3b20      	subs	r3, #32
 800b814:	2b00      	cmp	r3, #0
 800b816:	db13      	blt.n	800b840 <calculateSPLQ31+0x3ac>
 800b818:	22a4      	movs	r2, #164	@ 0xa4
 800b81a:	18ba      	adds	r2, r7, r2
 800b81c:	6812      	ldr	r2, [r2, #0]
 800b81e:	40da      	lsrs	r2, r3
 800b820:	61ba      	str	r2, [r7, #24]
 800b822:	e01e      	b.n	800b862 <calculateSPLQ31+0x3ce>
 800b824:	20001b0c 	.word	0x20001b0c
 800b828:	7fffffff 	.word	0x7fffffff
 800b82c:	20001d58 	.word	0x20001d58
 800b830:	200000b4 	.word	0x200000b4
 800b834:	20001d60 	.word	0x20001d60
 800b838:	200000b8 	.word	0x200000b8
 800b83c:	200000c4 	.word	0x200000c4
 800b840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b842:	2220      	movs	r2, #32
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	22a4      	movs	r2, #164	@ 0xa4
 800b848:	18ba      	adds	r2, r7, r2
 800b84a:	6812      	ldr	r2, [r2, #0]
 800b84c:	409a      	lsls	r2, r3
 800b84e:	0013      	movs	r3, r2
 800b850:	22a0      	movs	r2, #160	@ 0xa0
 800b852:	18ba      	adds	r2, r7, r2
 800b854:	6811      	ldr	r1, [r2, #0]
 800b856:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b858:	40d1      	lsrs	r1, r2
 800b85a:	61b9      	str	r1, [r7, #24]
 800b85c:	69ba      	ldr	r2, [r7, #24]
 800b85e:	431a      	orrs	r2, r3
 800b860:	61ba      	str	r2, [r7, #24]
 800b862:	23a4      	movs	r3, #164	@ 0xa4
 800b864:	18fb      	adds	r3, r7, r3
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b86a:	40da      	lsrs	r2, r3
 800b86c:	61fa      	str	r2, [r7, #28]
 800b86e:	69ba      	ldr	r2, [r7, #24]
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	21a0      	movs	r1, #160	@ 0xa0
 800b874:	1879      	adds	r1, r7, r1
 800b876:	600a      	str	r2, [r1, #0]
 800b878:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b87a:	2300      	movs	r3, #0
 800b87c:	2294      	movs	r2, #148	@ 0x94
 800b87e:	18ba      	adds	r2, r7, r2
 800b880:	6013      	str	r3, [r2, #0]
 800b882:	e02c      	b.n	800b8de <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800b884:	2330      	movs	r3, #48	@ 0x30
 800b886:	18fa      	adds	r2, r7, r3
 800b888:	2394      	movs	r3, #148	@ 0x94
 800b88a:	18fb      	adds	r3, r7, r3
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	00db      	lsls	r3, r3, #3
 800b890:	18d3      	adds	r3, r2, r3
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b898:	3920      	subs	r1, #32
 800b89a:	2900      	cmp	r1, #0
 800b89c:	db03      	blt.n	800b8a6 <calculateSPLQ31+0x412>
 800b89e:	0018      	movs	r0, r3
 800b8a0:	40c8      	lsrs	r0, r1
 800b8a2:	0004      	movs	r4, r0
 800b8a4:	e00a      	b.n	800b8bc <calculateSPLQ31+0x428>
 800b8a6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b8a8:	2020      	movs	r0, #32
 800b8aa:	1a41      	subs	r1, r0, r1
 800b8ac:	0018      	movs	r0, r3
 800b8ae:	4088      	lsls	r0, r1
 800b8b0:	0001      	movs	r1, r0
 800b8b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b8b4:	0016      	movs	r6, r2
 800b8b6:	40c6      	lsrs	r6, r0
 800b8b8:	0034      	movs	r4, r6
 800b8ba:	430c      	orrs	r4, r1
 800b8bc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b8be:	40cb      	lsrs	r3, r1
 800b8c0:	001d      	movs	r5, r3
 800b8c2:	2330      	movs	r3, #48	@ 0x30
 800b8c4:	18fa      	adds	r2, r7, r3
 800b8c6:	2194      	movs	r1, #148	@ 0x94
 800b8c8:	187b      	adds	r3, r7, r1
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	18d3      	adds	r3, r2, r3
 800b8d0:	601c      	str	r4, [r3, #0]
 800b8d2:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b8d4:	187b      	adds	r3, r7, r1
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	187a      	adds	r2, r7, r1
 800b8dc:	6013      	str	r3, [r2, #0]
 800b8de:	2394      	movs	r3, #148	@ 0x94
 800b8e0:	18fb      	adds	r3, r7, r3
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b05      	cmp	r3, #5
 800b8e6:	d9cd      	bls.n	800b884 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800b8e8:	230f      	movs	r3, #15
 800b8ea:	425d      	negs	r5, r3
 800b8ec:	2305      	movs	r3, #5
 800b8ee:	425e      	negs	r6, r3
 800b8f0:	4b4a      	ldr	r3, [pc, #296]	@ (800ba1c <calculateSPLQ31+0x588>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	4b4a      	ldr	r3, [pc, #296]	@ (800ba20 <calculateSPLQ31+0x58c>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	21a0      	movs	r1, #160	@ 0xa0
 800b8fe:	1879      	adds	r1, r7, r1
 800b900:	6808      	ldr	r0, [r1, #0]
 800b902:	6849      	ldr	r1, [r1, #4]
 800b904:	4c47      	ldr	r4, [pc, #284]	@ (800ba24 <calculateSPLQ31+0x590>)
 800b906:	9403      	str	r4, [sp, #12]
 800b908:	4c47      	ldr	r4, [pc, #284]	@ (800ba28 <calculateSPLQ31+0x594>)
 800b90a:	9402      	str	r4, [sp, #8]
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	9200      	str	r2, [sp, #0]
 800b910:	0033      	movs	r3, r6
 800b912:	002a      	movs	r2, r5
 800b914:	f000 fa86 	bl	800be24 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b918:	2300      	movs	r3, #0
 800b91a:	2290      	movs	r2, #144	@ 0x90
 800b91c:	18ba      	adds	r2, r7, r2
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	e026      	b.n	800b970 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800b922:	2330      	movs	r3, #48	@ 0x30
 800b924:	18fa      	adds	r2, r7, r3
 800b926:	2490      	movs	r4, #144	@ 0x90
 800b928:	193b      	adds	r3, r7, r4
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	00db      	lsls	r3, r3, #3
 800b92e:	18d3      	adds	r3, r2, r3
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	6859      	ldr	r1, [r3, #4]
 800b934:	230f      	movs	r3, #15
 800b936:	425d      	negs	r5, r3
 800b938:	2305      	movs	r3, #5
 800b93a:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800b93c:	193b      	adds	r3, r7, r4
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	009a      	lsls	r2, r3, #2
 800b942:	4b3a      	ldr	r3, [pc, #232]	@ (800ba2c <calculateSPLQ31+0x598>)
 800b944:	18d3      	adds	r3, r2, r3
 800b946:	193a      	adds	r2, r7, r4
 800b948:	6812      	ldr	r2, [r2, #0]
 800b94a:	0094      	lsls	r4, r2, #2
 800b94c:	4a38      	ldr	r2, [pc, #224]	@ (800ba30 <calculateSPLQ31+0x59c>)
 800b94e:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800b950:	9203      	str	r2, [sp, #12]
 800b952:	9302      	str	r3, [sp, #8]
 800b954:	2300      	movs	r3, #0
 800b956:	9301      	str	r3, [sp, #4]
 800b958:	2300      	movs	r3, #0
 800b95a:	9300      	str	r3, [sp, #0]
 800b95c:	0033      	movs	r3, r6
 800b95e:	002a      	movs	r2, r5
 800b960:	f000 fa60 	bl	800be24 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800b964:	2490      	movs	r4, #144	@ 0x90
 800b966:	193b      	adds	r3, r7, r4
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	3301      	adds	r3, #1
 800b96c:	193a      	adds	r2, r7, r4
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	2390      	movs	r3, #144	@ 0x90
 800b972:	18fb      	adds	r3, r7, r3
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2b05      	cmp	r3, #5
 800b978:	d9d3      	bls.n	800b922 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800b97a:	4b2b      	ldr	r3, [pc, #172]	@ (800ba28 <calculateSPLQ31+0x594>)
 800b97c:	681a      	ldr	r2, [r3, #0]
 800b97e:	4b2d      	ldr	r3, [pc, #180]	@ (800ba34 <calculateSPLQ31+0x5a0>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	18d2      	adds	r2, r2, r3
 800b984:	4b2b      	ldr	r3, [pc, #172]	@ (800ba34 <calculateSPLQ31+0x5a0>)
 800b986:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800b988:	4b26      	ldr	r3, [pc, #152]	@ (800ba24 <calculateSPLQ31+0x590>)
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	4b2a      	ldr	r3, [pc, #168]	@ (800ba38 <calculateSPLQ31+0x5a4>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	18d2      	adds	r2, r2, r3
 800b992:	4b29      	ldr	r3, [pc, #164]	@ (800ba38 <calculateSPLQ31+0x5a4>)
 800b994:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b996:	2300      	movs	r3, #0
 800b998:	228c      	movs	r2, #140	@ 0x8c
 800b99a:	18ba      	adds	r2, r7, r2
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	e025      	b.n	800b9ec <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800b9a0:	4b22      	ldr	r3, [pc, #136]	@ (800ba2c <calculateSPLQ31+0x598>)
 800b9a2:	208c      	movs	r0, #140	@ 0x8c
 800b9a4:	183a      	adds	r2, r7, r0
 800b9a6:	6812      	ldr	r2, [r2, #0]
 800b9a8:	0092      	lsls	r2, r2, #2
 800b9aa:	58d2      	ldr	r2, [r2, r3]
 800b9ac:	4b23      	ldr	r3, [pc, #140]	@ (800ba3c <calculateSPLQ31+0x5a8>)
 800b9ae:	1839      	adds	r1, r7, r0
 800b9b0:	6809      	ldr	r1, [r1, #0]
 800b9b2:	0089      	lsls	r1, r1, #2
 800b9b4:	58cb      	ldr	r3, [r1, r3]
 800b9b6:	18d1      	adds	r1, r2, r3
 800b9b8:	4b20      	ldr	r3, [pc, #128]	@ (800ba3c <calculateSPLQ31+0x5a8>)
 800b9ba:	183a      	adds	r2, r7, r0
 800b9bc:	6812      	ldr	r2, [r2, #0]
 800b9be:	0092      	lsls	r2, r2, #2
 800b9c0:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800b9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800ba30 <calculateSPLQ31+0x59c>)
 800b9c4:	183a      	adds	r2, r7, r0
 800b9c6:	6812      	ldr	r2, [r2, #0]
 800b9c8:	0092      	lsls	r2, r2, #2
 800b9ca:	58d2      	ldr	r2, [r2, r3]
 800b9cc:	4b1c      	ldr	r3, [pc, #112]	@ (800ba40 <calculateSPLQ31+0x5ac>)
 800b9ce:	1839      	adds	r1, r7, r0
 800b9d0:	6809      	ldr	r1, [r1, #0]
 800b9d2:	0089      	lsls	r1, r1, #2
 800b9d4:	58cb      	ldr	r3, [r1, r3]
 800b9d6:	18d1      	adds	r1, r2, r3
 800b9d8:	4b19      	ldr	r3, [pc, #100]	@ (800ba40 <calculateSPLQ31+0x5ac>)
 800b9da:	183a      	adds	r2, r7, r0
 800b9dc:	6812      	ldr	r2, [r2, #0]
 800b9de:	0092      	lsls	r2, r2, #2
 800b9e0:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b9e2:	183b      	adds	r3, r7, r0
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	183a      	adds	r2, r7, r0
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	238c      	movs	r3, #140	@ 0x8c
 800b9ee:	18fb      	adds	r3, r7, r3
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2b05      	cmp	r3, #5
 800b9f4:	d9d4      	bls.n	800b9a0 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800b9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ba44 <calculateSPLQ31+0x5b0>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	4b11      	ldr	r3, [pc, #68]	@ (800ba44 <calculateSPLQ31+0x5b0>)
 800b9fe:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800ba00:	4b10      	ldr	r3, [pc, #64]	@ (800ba44 <calculateSPLQ31+0x5b0>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b0f      	cmp	r3, #15
 800ba06:	d905      	bls.n	800ba14 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800ba08:	4b0f      	ldr	r3, [pc, #60]	@ (800ba48 <calculateSPLQ31+0x5b4>)
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800ba0e:	4b0f      	ldr	r3, [pc, #60]	@ (800ba4c <calculateSPLQ31+0x5b8>)
 800ba10:	2200      	movs	r2, #0
 800ba12:	701a      	strb	r2, [r3, #0]
    }
}
 800ba14:	46c0      	nop			@ (mov r8, r8)
 800ba16:	46bd      	mov	sp, r7
 800ba18:	b02f      	add	sp, #188	@ 0xbc
 800ba1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba1c:	200000bc 	.word	0x200000bc
 800ba20:	200000c0 	.word	0x200000c0
 800ba24:	200012d8 	.word	0x200012d8
 800ba28:	200012d4 	.word	0x200012d4
 800ba2c:	200012dc 	.word	0x200012dc
 800ba30:	200012f4 	.word	0x200012f4
 800ba34:	20001d1c 	.word	0x20001d1c
 800ba38:	20001d20 	.word	0x20001d20
 800ba3c:	20001d24 	.word	0x20001d24
 800ba40:	20001d3c 	.word	0x20001d3c
 800ba44:	20001d54 	.word	0x20001d54
 800ba48:	200012c8 	.word	0x200012c8
 800ba4c:	200012c6 	.word	0x200012c6

0800ba50 <resetSPLstate>:

static void resetSPLstate(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b082      	sub	sp, #8
 800ba54:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800ba56:	4b11      	ldr	r3, [pc, #68]	@ (800ba9c <resetSPLstate+0x4c>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800ba5c:	4b10      	ldr	r3, [pc, #64]	@ (800baa0 <resetSPLstate+0x50>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800ba62:	4b10      	ldr	r3, [pc, #64]	@ (800baa4 <resetSPLstate+0x54>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ba68:	2300      	movs	r3, #0
 800ba6a:	607b      	str	r3, [r7, #4]
 800ba6c:	e00c      	b.n	800ba88 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800ba6e:	4b0e      	ldr	r3, [pc, #56]	@ (800baa8 <resetSPLstate+0x58>)
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	0092      	lsls	r2, r2, #2
 800ba74:	2100      	movs	r1, #0
 800ba76:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800ba78:	4b0c      	ldr	r3, [pc, #48]	@ (800baac <resetSPLstate+0x5c>)
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	0092      	lsls	r2, r2, #2
 800ba7e:	2100      	movs	r1, #0
 800ba80:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3301      	adds	r3, #1
 800ba86:	607b      	str	r3, [r7, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	d9ef      	bls.n	800ba6e <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800ba8e:	4b08      	ldr	r3, [pc, #32]	@ (800bab0 <resetSPLstate+0x60>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	701a      	strb	r2, [r3, #0]
}
 800ba94:	46c0      	nop			@ (mov r8, r8)
 800ba96:	46bd      	mov	sp, r7
 800ba98:	b002      	add	sp, #8
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	20001d1c 	.word	0x20001d1c
 800baa0:	20001d20 	.word	0x20001d20
 800baa4:	20001d54 	.word	0x20001d54
 800baa8:	20001d24 	.word	0x20001d24
 800baac:	20001d3c 	.word	0x20001d3c
 800bab0:	200012c8 	.word	0x200012c8

0800bab4 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800bab4:	b5b0      	push	{r4, r5, r7, lr}
 800bab6:	b090      	sub	sp, #64	@ 0x40
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	0019      	movs	r1, r3
 800bac0:	1dfb      	adds	r3, r7, #7
 800bac2:	701a      	strb	r2, [r3, #0]
 800bac4:	1dbb      	adds	r3, r7, #6
 800bac6:	1c0a      	adds	r2, r1, #0
 800bac8:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800baca:	1dfb      	adds	r3, r7, #7
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d005      	beq.n	800bade <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800bad2:	4b3b      	ldr	r3, [pc, #236]	@ (800bbc0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800bad8:	4b3a      	ldr	r3, [pc, #232]	@ (800bbc4 <getFilteredMaxAmplitudeQ31+0x110>)
 800bada:	2200      	movs	r2, #0
 800badc:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800bade:	2300      	movs	r3, #0
 800bae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800bae6:	2305      	movs	r3, #5
 800bae8:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800baea:	2300      	movs	r3, #0
 800baec:	637b      	str	r3, [r7, #52]	@ 0x34
 800baee:	e040      	b.n	800bb72 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800baf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	18d3      	adds	r3, r2, r3
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafc:	409a      	lsls	r2, r3
 800bafe:	0013      	movs	r3, r2
 800bb00:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800bb02:	4b30      	ldr	r3, [pc, #192]	@ (800bbc4 <getFilteredMaxAmplitudeQ31+0x110>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	425a      	negs	r2, r3
 800bb08:	4b2e      	ldr	r3, [pc, #184]	@ (800bbc4 <getFilteredMaxAmplitudeQ31+0x110>)
 800bb0a:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800bb0c:	2418      	movs	r4, #24
 800bb0e:	193a      	adds	r2, r7, r4
 800bb10:	492c      	ldr	r1, [pc, #176]	@ (800bbc4 <getFilteredMaxAmplitudeQ31+0x110>)
 800bb12:	231c      	movs	r3, #28
 800bb14:	18f8      	adds	r0, r7, r3
 800bb16:	2301      	movs	r3, #1
 800bb18:	f011 f834 	bl	801cb84 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800bb1c:	2514      	movs	r5, #20
 800bb1e:	197a      	adds	r2, r7, r5
 800bb20:	1939      	adds	r1, r7, r4
 800bb22:	4829      	ldr	r0, [pc, #164]	@ (800bbc8 <getFilteredMaxAmplitudeQ31+0x114>)
 800bb24:	2301      	movs	r3, #1
 800bb26:	f010 fffb 	bl	801cb20 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800bb2a:	2410      	movs	r4, #16
 800bb2c:	193a      	adds	r2, r7, r4
 800bb2e:	4924      	ldr	r1, [pc, #144]	@ (800bbc0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb30:	4826      	ldr	r0, [pc, #152]	@ (800bbcc <getFilteredMaxAmplitudeQ31+0x118>)
 800bb32:	2301      	movs	r3, #1
 800bb34:	f010 fff4 	bl	801cb20 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800bb38:	4a21      	ldr	r2, [pc, #132]	@ (800bbc0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb3a:	1939      	adds	r1, r7, r4
 800bb3c:	1978      	adds	r0, r7, r5
 800bb3e:	2301      	movs	r3, #1
 800bb40:	f011 f820 	bl	801cb84 <arm_add_q31>

        lastData = fx;
 800bb44:	69fa      	ldr	r2, [r7, #28]
 800bb46:	4b1f      	ldr	r3, [pc, #124]	@ (800bbc4 <getFilteredMaxAmplitudeQ31+0x110>)
 800bb48:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800bb4a:	4b1d      	ldr	r3, [pc, #116]	@ (800bbc0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bb50:	429a      	cmp	r2, r3
 800bb52:	da03      	bge.n	800bb5c <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800bb54:	4b1a      	ldr	r3, [pc, #104]	@ (800bbc0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb5a:	e007      	b.n	800bb6c <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800bb5c:	4b18      	ldr	r3, [pc, #96]	@ (800bbc0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb62:	429a      	cmp	r2, r3
 800bb64:	dd02      	ble.n	800bb6c <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800bb66:	4b16      	ldr	r3, [pc, #88]	@ (800bbc0 <getFilteredMaxAmplitudeQ31+0x10c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800bb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb6e:	3301      	adds	r3, #1
 800bb70:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d3ba      	bcc.n	800baf0 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800bb7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7c:	17da      	asrs	r2, r3, #31
 800bb7e:	189b      	adds	r3, r3, r2
 800bb80:	4053      	eors	r3, r2
 800bb82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800bb84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb86:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800bb88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d200      	bcs.n	800bb92 <getFilteredMaxAmplitudeQ31+0xde>
 800bb90:	0013      	movs	r3, r2
 800bb92:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800bb94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb98:	40da      	lsrs	r2, r3
 800bb9a:	0013      	movs	r3, r2
 800bb9c:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800bb9e:	1dbb      	adds	r3, r7, #6
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d007      	beq.n	800bbb6 <getFilteredMaxAmplitudeQ31+0x102>
 800bba6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbd0 <getFilteredMaxAmplitudeQ31+0x11c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6a3a      	ldr	r2, [r7, #32]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d902      	bls.n	800bbb6 <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800bbb0:	4b07      	ldr	r3, [pc, #28]	@ (800bbd0 <getFilteredMaxAmplitudeQ31+0x11c>)
 800bbb2:	6a3a      	ldr	r2, [r7, #32]
 800bbb4:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800bbb6:	6a3b      	ldr	r3, [r7, #32]
}
 800bbb8:	0018      	movs	r0, r3
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	b010      	add	sp, #64	@ 0x40
 800bbbe:	bdb0      	pop	{r4, r5, r7, pc}
 800bbc0:	20002158 	.word	0x20002158
 800bbc4:	2000215c 	.word	0x2000215c
 800bbc8:	0802334c 	.word	0x0802334c
 800bbcc:	08023350 	.word	0x08023350
 800bbd0:	200012d0 	.word	0x200012d0

0800bbd4 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800bbe0:	4913      	ldr	r1, [pc, #76]	@ (800bc30 <floatToIntAndFrac2dp+0x5c>)
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f7f5 f9dc 	bl	8000fa0 <__aeabi_fmul>
 800bbe8:	1c03      	adds	r3, r0, #0
 800bbea:	1c18      	adds	r0, r3, #0
 800bbec:	f015 fbfe 	bl	80213ec <roundf>
 800bbf0:	1c03      	adds	r3, r0, #0
 800bbf2:	1c18      	adds	r0, r3, #0
 800bbf4:	f7f4 fd12 	bl	800061c <__aeabi_f2uiz>
 800bbf8:	0003      	movs	r3, r0
 800bbfa:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	2164      	movs	r1, #100	@ 0x64
 800bc00:	0018      	movs	r0, r3
 800bc02:	f7f4 facf 	bl	80001a4 <__udivsi3>
 800bc06:	0003      	movs	r3, r0
 800bc08:	001a      	movs	r2, r3
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	b2da      	uxtb	r2, r3
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2164      	movs	r1, #100	@ 0x64
 800bc1a:	434b      	muls	r3, r1
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	1ad3      	subs	r3, r2, r3
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	701a      	strb	r2, [r3, #0]
}
 800bc26:	46c0      	nop			@ (mov r8, r8)
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	b006      	add	sp, #24
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	46c0      	nop			@ (mov r8, r8)
 800bc30:	42c80000 	.word	0x42c80000

0800bc34 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800bc40:	4914      	ldr	r1, [pc, #80]	@ (800bc94 <floatToIntAndFrac1dp+0x60>)
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f7f5 f9ac 	bl	8000fa0 <__aeabi_fmul>
 800bc48:	1c03      	adds	r3, r0, #0
 800bc4a:	1c18      	adds	r0, r3, #0
 800bc4c:	f015 fbce 	bl	80213ec <roundf>
 800bc50:	1c03      	adds	r3, r0, #0
 800bc52:	1c18      	adds	r0, r3, #0
 800bc54:	f7f4 fce2 	bl	800061c <__aeabi_f2uiz>
 800bc58:	0003      	movs	r3, r0
 800bc5a:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	210a      	movs	r1, #10
 800bc60:	0018      	movs	r0, r3
 800bc62:	f7f4 fa9f 	bl	80001a4 <__udivsi3>
 800bc66:	0003      	movs	r3, r0
 800bc68:	001a      	movs	r2, r3
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	b2da      	uxtb	r2, r3
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	1c19      	adds	r1, r3, #0
 800bc7a:	0089      	lsls	r1, r1, #2
 800bc7c:	18cb      	adds	r3, r1, r3
 800bc7e:	18db      	adds	r3, r3, r3
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	b2da      	uxtb	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	701a      	strb	r2, [r3, #0]
}
 800bc8a:	46c0      	nop			@ (mov r8, r8)
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	b006      	add	sp, #24
 800bc90:	bd80      	pop	{r7, pc}
 800bc92:	46c0      	nop			@ (mov r8, r8)
 800bc94:	41200000 	.word	0x41200000

0800bc98 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800bc98:	b590      	push	{r4, r7, lr}
 800bc9a:	b087      	sub	sp, #28
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	60f8      	str	r0, [r7, #12]
 800bca0:	60b9      	str	r1, [r7, #8]
 800bca2:	607a      	str	r2, [r7, #4]
 800bca4:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7f5 fc92 	bl	80015d0 <__aeabi_i2f>
 800bcac:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800bcae:	6838      	ldr	r0, [r7, #0]
 800bcb0:	f7f5 fc8e 	bl	80015d0 <__aeabi_i2f>
 800bcb4:	1c03      	adds	r3, r0, #0
 800bcb6:	4918      	ldr	r1, [pc, #96]	@ (800bd18 <sumToIntAverage+0x80>)
 800bcb8:	1c18      	adds	r0, r3, #0
 800bcba:	f7f4 ff8b 	bl	8000bd4 <__aeabi_fdiv>
 800bcbe:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800bcc0:	1c19      	adds	r1, r3, #0
 800bcc2:	1c20      	adds	r0, r4, #0
 800bcc4:	f7f4 fdfc 	bl	80008c0 <__aeabi_fadd>
 800bcc8:	1c03      	adds	r3, r0, #0
 800bcca:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800bccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcce:	f7f5 fccb 	bl	8001668 <__aeabi_ui2f>
 800bcd2:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800bcd4:	1c19      	adds	r1, r3, #0
 800bcd6:	1c20      	adds	r0, r4, #0
 800bcd8:	f7f4 ff7c 	bl	8000bd4 <__aeabi_fdiv>
 800bcdc:	1c03      	adds	r3, r0, #0
 800bcde:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800bce0:	2300      	movs	r3, #0
 800bce2:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800bce4:	68ba      	ldr	r2, [r7, #8]
 800bce6:	2310      	movs	r3, #16
 800bce8:	18f9      	adds	r1, r7, r3
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	1c18      	adds	r0, r3, #0
 800bcee:	f7ff ffa1 	bl	800bc34 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	2bff      	cmp	r3, #255	@ 0xff
 800bcf6:	d906      	bls.n	800bd06 <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	22ff      	movs	r2, #255	@ 0xff
 800bcfc:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2209      	movs	r2, #9
 800bd02:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800bd04:	e003      	b.n	800bd0e <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	701a      	strb	r2, [r3, #0]
}
 800bd0e:	46c0      	nop			@ (mov r8, r8)
 800bd10:	46bd      	mov	sp, r7
 800bd12:	b007      	add	sp, #28
 800bd14:	bd90      	pop	{r4, r7, pc}
 800bd16:	46c0      	nop			@ (mov r8, r8)
 800bd18:	41200000 	.word	0x41200000

0800bd1c <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
 800bd28:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	2280      	movs	r2, #128	@ 0x80
 800bd2e:	0612      	lsls	r2, r2, #24
 800bd30:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	4a18      	ldr	r2, [pc, #96]	@ (800bd98 <findMinMax+0x7c>)
 800bd36:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e022      	b.n	800bd84 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	18d3      	adds	r3, r2, r3
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	da06      	bge.n	800bd5e <findMinMax+0x42>
        {
            min[0] = array[i];
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	18d3      	adds	r3, r2, r3
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	18d3      	adds	r3, r2, r3
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	dd06      	ble.n	800bd7e <findMinMax+0x62>
        {
            max[0] = array[i];
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	18d3      	adds	r3, r2, r3
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	3301      	adds	r3, #1
 800bd82:	617b      	str	r3, [r7, #20]
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d3d8      	bcc.n	800bd3e <findMinMax+0x22>
        }
    }
}
 800bd8c:	46c0      	nop			@ (mov r8, r8)
 800bd8e:	46c0      	nop			@ (mov r8, r8)
 800bd90:	46bd      	mov	sp, r7
 800bd92:	b006      	add	sp, #24
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	46c0      	nop			@ (mov r8, r8)
 800bd98:	7fffffff 	.word	0x7fffffff

0800bd9c <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800bda6:	2300      	movs	r3, #0
 800bda8:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d302      	bcc.n	800bdb8 <getPo2factor+0x1c>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d107      	bne.n	800bdc8 <getPo2factor+0x2c>
    {
        return 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	e00d      	b.n	800bdd8 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	607b      	str	r3, [r7, #4]
        bitShift++;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d2f5      	bcs.n	800bdbc <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
}
 800bdd8:	0018      	movs	r0, r3
 800bdda:	46bd      	mov	sp, r7
 800bddc:	b004      	add	sp, #16
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800bdee:	68f8      	ldr	r0, [r7, #12]
 800bdf0:	f7f5 fc3a 	bl	8001668 <__aeabi_ui2f>
 800bdf4:	1c03      	adds	r3, r0, #0
 800bdf6:	1c19      	adds	r1, r3, #0
 800bdf8:	68b8      	ldr	r0, [r7, #8]
 800bdfa:	f7f5 f8d1 	bl	8000fa0 <__aeabi_fmul>
 800bdfe:	1c03      	adds	r3, r0, #0
 800be00:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	2310      	movs	r3, #16
 800be0a:	18f9      	adds	r1, r7, r3
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	1c18      	adds	r0, r3, #0
 800be10:	f7ff fee0 	bl	800bbd4 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	b29a      	uxth	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	801a      	strh	r2, [r3, #0]
}
 800be1c:	46c0      	nop			@ (mov r8, r8)
 800be1e:	46bd      	mov	sp, r7
 800be20:	b006      	add	sp, #24
 800be22:	bd80      	pop	{r7, pc}

0800be24 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60b8      	str	r0, [r7, #8]
 800be2c:	60f9      	str	r1, [r7, #12]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800be32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be34:	6a3a      	ldr	r2, [r7, #32]
 800be36:	68b8      	ldr	r0, [r7, #8]
 800be38:	68f9      	ldr	r1, [r7, #12]
 800be3a:	f7fa fce3 	bl	8006804 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800be3e:	6a3b      	ldr	r3, [r7, #32]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	18d2      	adds	r2, r2, r3
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	18d2      	adds	r2, r2, r3
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800be4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	18d2      	adds	r2, r2, r3
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	18d2      	adds	r2, r2, r3
 800be5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5c:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800be5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	0011      	movs	r1, r2
 800be64:	0018      	movs	r0, r3
 800be66:	f7fa fd5d 	bl	8006924 <correctIntFracNumber>
}
 800be6a:	46c0      	nop			@ (mov r8, r8)
 800be6c:	46bd      	mov	sp, r7
 800be6e:	b004      	add	sp, #16
 800be70:	bd80      	pop	{r7, pc}

0800be72 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b086      	sub	sp, #24
 800be76:	af00      	add	r7, sp, #0
 800be78:	60f8      	str	r0, [r7, #12]
 800be7a:	60b9      	str	r1, [r7, #8]
 800be7c:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800be7e:	2300      	movs	r3, #0
 800be80:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	e019      	b.n	800bebc <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	005b      	lsls	r3, r3, #1
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	18d3      	adds	r3, r2, r3
 800be90:	881b      	ldrh	r3, [r3, #0]
 800be92:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	3201      	adds	r2, #1
 800be98:	0052      	lsls	r2, r2, #1
 800be9a:	68f9      	ldr	r1, [r7, #12]
 800be9c:	188a      	adds	r2, r1, r2
 800be9e:	8812      	ldrh	r2, [r2, #0]
 800bea0:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800bea2:	0019      	movs	r1, r3
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800beac:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800beae:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	3301      	adds	r3, #1
 800beb4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	3304      	adds	r3, #4
 800beba:	613b      	str	r3, [r7, #16]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d3e1      	bcc.n	800be88 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800bec4:	46c0      	nop			@ (mov r8, r8)
 800bec6:	46c0      	nop			@ (mov r8, r8)
 800bec8:	46bd      	mov	sp, r7
 800beca:	b006      	add	sp, #24
 800becc:	bd80      	pop	{r7, pc}
	...

0800bed0 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800bed0:	b580      	push	{r7, lr}
 800bed2:	af00      	add	r7, sp, #0
  init = false;
 800bed4:	4b02      	ldr	r3, [pc, #8]	@ (800bee0 <InitDone+0x10>)
 800bed6:	2200      	movs	r2, #0
 800bed8:	701a      	strb	r2, [r3, #0]
}
 800beda:	46c0      	nop			@ (mov r8, r8)
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	200000c8 	.word	0x200000c8

0800bee4 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800beea:	f7fa f823 	bl	8005f34 <ReadBatteryVoltage>
 800beee:	1c03      	adds	r3, r0, #0
 800bef0:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800bef2:	491f      	ldr	r1, [pc, #124]	@ (800bf70 <batteryChargeCheck+0x8c>)
 800bef4:	6838      	ldr	r0, [r7, #0]
 800bef6:	f7f4 fb1b 	bl	8000530 <__aeabi_fcmplt>
 800befa:	1e03      	subs	r3, r0, #0
 800befc:	d002      	beq.n	800bf04 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800befe:	1dfb      	adds	r3, r7, #7
 800bf00:	2200      	movs	r2, #0
 800bf02:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800bf04:	6838      	ldr	r0, [r7, #0]
 800bf06:	f7f7 faad 	bl	8003464 <__aeabi_f2d>
 800bf0a:	4a1a      	ldr	r2, [pc, #104]	@ (800bf74 <batteryChargeCheck+0x90>)
 800bf0c:	4b1a      	ldr	r3, [pc, #104]	@ (800bf78 <batteryChargeCheck+0x94>)
 800bf0e:	f7f4 fad5 	bl	80004bc <__aeabi_dcmplt>
 800bf12:	1e03      	subs	r3, r0, #0
 800bf14:	d008      	beq.n	800bf28 <batteryChargeCheck+0x44>
 800bf16:	4916      	ldr	r1, [pc, #88]	@ (800bf70 <batteryChargeCheck+0x8c>)
 800bf18:	6838      	ldr	r0, [r7, #0]
 800bf1a:	f7f4 fb27 	bl	800056c <__aeabi_fcmpge>
 800bf1e:	1e03      	subs	r3, r0, #0
 800bf20:	d002      	beq.n	800bf28 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800bf22:	1dfb      	adds	r3, r7, #7
 800bf24:	2202      	movs	r2, #2
 800bf26:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800bf28:	2181      	movs	r1, #129	@ 0x81
 800bf2a:	05c9      	lsls	r1, r1, #23
 800bf2c:	6838      	ldr	r0, [r7, #0]
 800bf2e:	f7f4 faff 	bl	8000530 <__aeabi_fcmplt>
 800bf32:	1e03      	subs	r3, r0, #0
 800bf34:	d00b      	beq.n	800bf4e <batteryChargeCheck+0x6a>
 800bf36:	6838      	ldr	r0, [r7, #0]
 800bf38:	f7f7 fa94 	bl	8003464 <__aeabi_f2d>
 800bf3c:	4a0d      	ldr	r2, [pc, #52]	@ (800bf74 <batteryChargeCheck+0x90>)
 800bf3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bf78 <batteryChargeCheck+0x94>)
 800bf40:	f7f4 fada 	bl	80004f8 <__aeabi_dcmpge>
 800bf44:	1e03      	subs	r3, r0, #0
 800bf46:	d002      	beq.n	800bf4e <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800bf48:	1dfb      	adds	r3, r7, #7
 800bf4a:	2203      	movs	r2, #3
 800bf4c:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800bf4e:	2181      	movs	r1, #129	@ 0x81
 800bf50:	05c9      	lsls	r1, r1, #23
 800bf52:	6838      	ldr	r0, [r7, #0]
 800bf54:	f7f4 fb0a 	bl	800056c <__aeabi_fcmpge>
 800bf58:	1e03      	subs	r3, r0, #0
 800bf5a:	d002      	beq.n	800bf62 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800bf5c:	1dfb      	adds	r3, r7, #7
 800bf5e:	2204      	movs	r2, #4
 800bf60:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800bf62:	1dfb      	adds	r3, r7, #7
 800bf64:	781b      	ldrb	r3, [r3, #0]
}
 800bf66:	0018      	movs	r0, r3
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	b002      	add	sp, #8
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	46c0      	nop			@ (mov r8, r8)
 800bf70:	40600000 	.word	0x40600000
 800bf74:	9999999a 	.word	0x9999999a
 800bf78:	400d9999 	.word	0x400d9999

0800bf7c <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800bf7c:	b590      	push	{r4, r7, lr}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	0004      	movs	r4, r0
 800bf84:	0008      	movs	r0, r1
 800bf86:	0011      	movs	r1, r2
 800bf88:	1dbb      	adds	r3, r7, #6
 800bf8a:	1c22      	adds	r2, r4, #0
 800bf8c:	801a      	strh	r2, [r3, #0]
 800bf8e:	1d3b      	adds	r3, r7, #4
 800bf90:	1c02      	adds	r2, r0, #0
 800bf92:	801a      	strh	r2, [r3, #0]
 800bf94:	1cbb      	adds	r3, r7, #2
 800bf96:	1c0a      	adds	r2, r1, #0
 800bf98:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800bf9a:	4b0f      	ldr	r3, [pc, #60]	@ (800bfd8 <SetStatusLED+0x5c>)
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d107      	bne.n	800bfb2 <SetStatusLED+0x36>
 800bfa2:	4b0e      	ldr	r3, [pc, #56]	@ (800bfdc <SetStatusLED+0x60>)
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d103      	bne.n	800bfb2 <SetStatusLED+0x36>
 800bfaa:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe0 <SetStatusLED+0x64>)
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d00e      	beq.n	800bfd0 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800bfb2:	2380      	movs	r3, #128	@ 0x80
 800bfb4:	05db      	lsls	r3, r3, #23
 800bfb6:	1dba      	adds	r2, r7, #6
 800bfb8:	8812      	ldrh	r2, [r2, #0]
 800bfba:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800bfbc:	2380      	movs	r3, #128	@ 0x80
 800bfbe:	05db      	lsls	r3, r3, #23
 800bfc0:	1d3a      	adds	r2, r7, #4
 800bfc2:	8812      	ldrh	r2, [r2, #0]
 800bfc4:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800bfc6:	2380      	movs	r3, #128	@ 0x80
 800bfc8:	05db      	lsls	r3, r3, #23
 800bfca:	1cba      	adds	r2, r7, #2
 800bfcc:	8812      	ldrh	r2, [r2, #0]
 800bfce:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800bfd0:	46c0      	nop			@ (mov r8, r8)
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	b003      	add	sp, #12
 800bfd6:	bd90      	pop	{r4, r7, pc}
 800bfd8:	20002161 	.word	0x20002161
 800bfdc:	200000c8 	.word	0x200000c8
 800bfe0:	20002162 	.word	0x20002162

0800bfe4 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800bfe4:	b590      	push	{r4, r7, lr}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	0004      	movs	r4, r0
 800bfec:	0008      	movs	r0, r1
 800bfee:	0011      	movs	r1, r2
 800bff0:	1dfb      	adds	r3, r7, #7
 800bff2:	1c22      	adds	r2, r4, #0
 800bff4:	701a      	strb	r2, [r3, #0]
 800bff6:	1dbb      	adds	r3, r7, #6
 800bff8:	1c02      	adds	r2, r0, #0
 800bffa:	701a      	strb	r2, [r3, #0]
 800bffc:	1d7b      	adds	r3, r7, #5
 800bffe:	1c0a      	adds	r2, r1, #0
 800c000:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800c002:	4b19      	ldr	r3, [pc, #100]	@ (800c068 <SetDBLED+0x84>)
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d107      	bne.n	800c01a <SetDBLED+0x36>
 800c00a:	4b18      	ldr	r3, [pc, #96]	@ (800c06c <SetDBLED+0x88>)
 800c00c:	781b      	ldrb	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d103      	bne.n	800c01a <SetDBLED+0x36>
 800c012:	4b17      	ldr	r3, [pc, #92]	@ (800c070 <SetDBLED+0x8c>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d022      	beq.n	800c060 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800c01a:	1dfb      	adds	r3, r7, #7
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	2201      	movs	r2, #1
 800c020:	4053      	eors	r3, r2
 800c022:	b2db      	uxtb	r3, r3
 800c024:	001a      	movs	r2, r3
 800c026:	4b13      	ldr	r3, [pc, #76]	@ (800c074 <SetDBLED+0x90>)
 800c028:	2101      	movs	r1, #1
 800c02a:	0018      	movs	r0, r3
 800c02c:	f002 fd41 	bl	800eab2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800c030:	1dbb      	adds	r3, r7, #6
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	2201      	movs	r2, #1
 800c036:	4053      	eors	r3, r2
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	001a      	movs	r2, r3
 800c03c:	2380      	movs	r3, #128	@ 0x80
 800c03e:	005b      	lsls	r3, r3, #1
 800c040:	480c      	ldr	r0, [pc, #48]	@ (800c074 <SetDBLED+0x90>)
 800c042:	0019      	movs	r1, r3
 800c044:	f002 fd35 	bl	800eab2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800c048:	1d7b      	adds	r3, r7, #5
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	2201      	movs	r2, #1
 800c04e:	4053      	eors	r3, r2
 800c050:	b2db      	uxtb	r3, r3
 800c052:	001a      	movs	r2, r3
 800c054:	2380      	movs	r3, #128	@ 0x80
 800c056:	009b      	lsls	r3, r3, #2
 800c058:	4806      	ldr	r0, [pc, #24]	@ (800c074 <SetDBLED+0x90>)
 800c05a:	0019      	movs	r1, r3
 800c05c:	f002 fd29 	bl	800eab2 <HAL_GPIO_WritePin>
  }
}
 800c060:	46c0      	nop			@ (mov r8, r8)
 800c062:	46bd      	mov	sp, r7
 800c064:	b003      	add	sp, #12
 800c066:	bd90      	pop	{r4, r7, pc}
 800c068:	20002161 	.word	0x20002161
 800c06c:	200000c8 	.word	0x200000c8
 800c070:	20002162 	.word	0x20002162
 800c074:	50000400 	.word	0x50000400

0800c078 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800c078:	b590      	push	{r4, r7, lr}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	0004      	movs	r4, r0
 800c080:	0008      	movs	r0, r1
 800c082:	0011      	movs	r1, r2
 800c084:	1dbb      	adds	r3, r7, #6
 800c086:	1c22      	adds	r2, r4, #0
 800c088:	801a      	strh	r2, [r3, #0]
 800c08a:	1d3b      	adds	r3, r7, #4
 800c08c:	1c02      	adds	r2, r0, #0
 800c08e:	801a      	strh	r2, [r3, #0]
 800c090:	1cbb      	adds	r3, r7, #2
 800c092:	1c0a      	adds	r2, r1, #0
 800c094:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c096:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d0 <SetVocLED+0x58>)
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d107      	bne.n	800c0ae <SetVocLED+0x36>
 800c09e:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d4 <SetVocLED+0x5c>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d103      	bne.n	800c0ae <SetVocLED+0x36>
 800c0a6:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d8 <SetVocLED+0x60>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800c0ae:	4b0b      	ldr	r3, [pc, #44]	@ (800c0dc <SetVocLED+0x64>)
 800c0b0:	1dba      	adds	r2, r7, #6
 800c0b2:	8812      	ldrh	r2, [r2, #0]
 800c0b4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800c0b6:	4b09      	ldr	r3, [pc, #36]	@ (800c0dc <SetVocLED+0x64>)
 800c0b8:	1d3a      	adds	r2, r7, #4
 800c0ba:	8812      	ldrh	r2, [r2, #0]
 800c0bc:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800c0be:	4b07      	ldr	r3, [pc, #28]	@ (800c0dc <SetVocLED+0x64>)
 800c0c0:	1cba      	adds	r2, r7, #2
 800c0c2:	8812      	ldrh	r2, [r2, #0]
 800c0c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c0c6:	46c0      	nop			@ (mov r8, r8)
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	b003      	add	sp, #12
 800c0cc:	bd90      	pop	{r4, r7, pc}
 800c0ce:	46c0      	nop			@ (mov r8, r8)
 800c0d0:	20002161 	.word	0x20002161
 800c0d4:	200000c8 	.word	0x200000c8
 800c0d8:	20002162 	.word	0x20002162
 800c0dc:	40000400 	.word	0x40000400

0800c0e0 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c0e4:	4b07      	ldr	r3, [pc, #28]	@ (800c104 <SetMeasurementIndicator+0x24>)
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d103      	bne.n	800c0f4 <SetMeasurementIndicator+0x14>
 800c0ec:	4b06      	ldr	r3, [pc, #24]	@ (800c108 <SetMeasurementIndicator+0x28>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800c0f4:	2380      	movs	r3, #128	@ 0x80
 800c0f6:	05db      	lsls	r3, r3, #23
 800c0f8:	4a04      	ldr	r2, [pc, #16]	@ (800c10c <SetMeasurementIndicator+0x2c>)
 800c0fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c0fc:	46c0      	nop			@ (mov r8, r8)
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	46c0      	nop			@ (mov r8, r8)
 800c104:	20002161 	.word	0x20002161
 800c108:	20002162 	.word	0x20002162
 800c10c:	00000bb8 	.word	0x00000bb8

0800c110 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c114:	4b07      	ldr	r3, [pc, #28]	@ (800c134 <ResetMeasurementIndicator+0x24>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d103      	bne.n	800c124 <ResetMeasurementIndicator+0x14>
 800c11c:	4b06      	ldr	r3, [pc, #24]	@ (800c138 <ResetMeasurementIndicator+0x28>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d004      	beq.n	800c12e <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800c124:	2380      	movs	r3, #128	@ 0x80
 800c126:	05db      	lsls	r3, r3, #23
 800c128:	22fa      	movs	r2, #250	@ 0xfa
 800c12a:	0112      	lsls	r2, r2, #4
 800c12c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c12e:	46c0      	nop			@ (mov r8, r8)
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}
 800c134:	20002161 	.word	0x20002161
 800c138:	20002162 	.word	0x20002162

0800c13c <SetMICIndicator>:
void SetMICIndicator(){
 800c13c:	b580      	push	{r7, lr}
 800c13e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c140:	4b07      	ldr	r3, [pc, #28]	@ (800c160 <SetMICIndicator+0x24>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d103      	bne.n	800c150 <SetMICIndicator+0x14>
 800c148:	4b06      	ldr	r3, [pc, #24]	@ (800c164 <SetMICIndicator+0x28>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800c150:	2380      	movs	r3, #128	@ 0x80
 800c152:	05db      	lsls	r3, r3, #23
 800c154:	4a04      	ldr	r2, [pc, #16]	@ (800c168 <SetMICIndicator+0x2c>)
 800c156:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c158:	46c0      	nop			@ (mov r8, r8)
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	46c0      	nop			@ (mov r8, r8)
 800c160:	20002161 	.word	0x20002161
 800c164:	20002162 	.word	0x20002162
 800c168:	00000bb8 	.word	0x00000bb8

0800c16c <ResetMICIndicator>:
void ResetMICIndicator(){
 800c16c:	b580      	push	{r7, lr}
 800c16e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c170:	4b07      	ldr	r3, [pc, #28]	@ (800c190 <ResetMICIndicator+0x24>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d103      	bne.n	800c180 <ResetMICIndicator+0x14>
 800c178:	4b06      	ldr	r3, [pc, #24]	@ (800c194 <ResetMICIndicator+0x28>)
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d004      	beq.n	800c18a <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800c180:	2380      	movs	r3, #128	@ 0x80
 800c182:	05db      	lsls	r3, r3, #23
 800c184:	22fa      	movs	r2, #250	@ 0xfa
 800c186:	0112      	lsls	r2, r2, #4
 800c188:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c18a:	46c0      	nop			@ (mov r8, r8)
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	20002161 	.word	0x20002161
 800c194:	20002162 	.word	0x20002162

0800c198 <SetESPIndicator>:
void SetESPIndicator(){
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c19c:	4b07      	ldr	r3, [pc, #28]	@ (800c1bc <SetESPIndicator+0x24>)
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d103      	bne.n	800c1ac <SetESPIndicator+0x14>
 800c1a4:	4b06      	ldr	r3, [pc, #24]	@ (800c1c0 <SetESPIndicator+0x28>)
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800c1ac:	2380      	movs	r3, #128	@ 0x80
 800c1ae:	05db      	lsls	r3, r3, #23
 800c1b0:	4a04      	ldr	r2, [pc, #16]	@ (800c1c4 <SetESPIndicator+0x2c>)
 800c1b2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c1b4:	46c0      	nop			@ (mov r8, r8)
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	46c0      	nop			@ (mov r8, r8)
 800c1bc:	20002161 	.word	0x20002161
 800c1c0:	20002162 	.word	0x20002162
 800c1c4:	00000bb8 	.word	0x00000bb8

0800c1c8 <ResetESPIndicator>:
void ResetESPIndicator(){
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c1cc:	4b07      	ldr	r3, [pc, #28]	@ (800c1ec <ResetESPIndicator+0x24>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d103      	bne.n	800c1dc <ResetESPIndicator+0x14>
 800c1d4:	4b06      	ldr	r3, [pc, #24]	@ (800c1f0 <ResetESPIndicator+0x28>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d004      	beq.n	800c1e6 <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800c1dc:	2380      	movs	r3, #128	@ 0x80
 800c1de:	05db      	lsls	r3, r3, #23
 800c1e0:	22fa      	movs	r2, #250	@ 0xfa
 800c1e2:	0112      	lsls	r2, r2, #4
 800c1e4:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c1e6:	46c0      	nop			@ (mov r8, r8)
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	20002161 	.word	0x20002161
 800c1f0:	20002162 	.word	0x20002162

0800c1f4 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800c1f8:	23fa      	movs	r3, #250	@ 0xfa
 800c1fa:	011a      	lsls	r2, r3, #4
 800c1fc:	23fa      	movs	r3, #250	@ 0xfa
 800c1fe:	0119      	lsls	r1, r3, #4
 800c200:	23fa      	movs	r3, #250	@ 0xfa
 800c202:	011b      	lsls	r3, r3, #4
 800c204:	0018      	movs	r0, r3
 800c206:	f7ff feb9 	bl	800bf7c <SetStatusLED>
  SetDBLED(false,false,false);
 800c20a:	2200      	movs	r2, #0
 800c20c:	2100      	movs	r1, #0
 800c20e:	2000      	movs	r0, #0
 800c210:	f7ff fee8 	bl	800bfe4 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800c214:	23fa      	movs	r3, #250	@ 0xfa
 800c216:	011a      	lsls	r2, r3, #4
 800c218:	23fa      	movs	r3, #250	@ 0xfa
 800c21a:	0119      	lsls	r1, r3, #4
 800c21c:	23fa      	movs	r3, #250	@ 0xfa
 800c21e:	011b      	lsls	r3, r3, #4
 800c220:	0018      	movs	r0, r3
 800c222:	f7ff ff29 	bl	800c078 <SetVocLED>
return;
 800c226:	46c0      	nop			@ (mov r8, r8)
}
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <powerCheck>:

Battery_Status powerCheck(){
 800c22c:	b590      	push	{r4, r7, lr}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800c232:	f7f9 ff45 	bl	80060c0 <Check_USB_PowerOn>
 800c236:	0003      	movs	r3, r0
 800c238:	001a      	movs	r2, r3
 800c23a:	2301      	movs	r3, #1
 800c23c:	4053      	eors	r3, r2
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b00      	cmp	r3, #0
 800c242:	d005      	beq.n	800c250 <powerCheck+0x24>
    status = batteryChargeCheck();
 800c244:	1dfc      	adds	r4, r7, #7
 800c246:	f7ff fe4d 	bl	800bee4 <batteryChargeCheck>
 800c24a:	0003      	movs	r3, r0
 800c24c:	7023      	strb	r3, [r4, #0]
 800c24e:	e002      	b.n	800c256 <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800c250:	1dfb      	adds	r3, r7, #7
 800c252:	2201      	movs	r2, #1
 800c254:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c256:	1dfb      	adds	r3, r7, #7
 800c258:	781b      	ldrb	r3, [r3, #0]
}
 800c25a:	0018      	movs	r0, r3
 800c25c:	46bd      	mov	sp, r7
 800c25e:	b003      	add	sp, #12
 800c260:	bd90      	pop	{r4, r7, pc}
	...

0800c264 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	0002      	movs	r2, r0
 800c26c:	1dfb      	adds	r3, r7, #7
 800c26e:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800c270:	1dfb      	adds	r3, r7, #7
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d105      	bne.n	800c284 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800c278:	4a18      	ldr	r2, [pc, #96]	@ (800c2dc <powerDisplay+0x78>)
 800c27a:	4b19      	ldr	r3, [pc, #100]	@ (800c2e0 <powerDisplay+0x7c>)
 800c27c:	0019      	movs	r1, r3
 800c27e:	2003      	movs	r0, #3
 800c280:	f000 fe1a 	bl	800ceb8 <CreateLine>

  }
  if(status == BATTERY_FULL){
 800c284:	1dfb      	adds	r3, r7, #7
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d105      	bne.n	800c298 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800c28c:	4a15      	ldr	r2, [pc, #84]	@ (800c2e4 <powerDisplay+0x80>)
 800c28e:	4b14      	ldr	r3, [pc, #80]	@ (800c2e0 <powerDisplay+0x7c>)
 800c290:	0019      	movs	r1, r3
 800c292:	2003      	movs	r0, #3
 800c294:	f000 fe10 	bl	800ceb8 <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800c298:	1dfb      	adds	r3, r7, #7
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b03      	cmp	r3, #3
 800c29e:	d105      	bne.n	800c2ac <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800c2a0:	4a11      	ldr	r2, [pc, #68]	@ (800c2e8 <powerDisplay+0x84>)
 800c2a2:	4b0f      	ldr	r3, [pc, #60]	@ (800c2e0 <powerDisplay+0x7c>)
 800c2a4:	0019      	movs	r1, r3
 800c2a6:	2003      	movs	r0, #3
 800c2a8:	f000 fe06 	bl	800ceb8 <CreateLine>
  }
  if(status == BATTERY_LOW){
 800c2ac:	1dfb      	adds	r3, r7, #7
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d105      	bne.n	800c2c0 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800c2b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c2ec <powerDisplay+0x88>)
 800c2b6:	4b0a      	ldr	r3, [pc, #40]	@ (800c2e0 <powerDisplay+0x7c>)
 800c2b8:	0019      	movs	r1, r3
 800c2ba:	2003      	movs	r0, #3
 800c2bc:	f000 fdfc 	bl	800ceb8 <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800c2c0:	1dfb      	adds	r3, r7, #7
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d105      	bne.n	800c2d4 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800c2c8:	4a09      	ldr	r2, [pc, #36]	@ (800c2f0 <powerDisplay+0x8c>)
 800c2ca:	4b05      	ldr	r3, [pc, #20]	@ (800c2e0 <powerDisplay+0x7c>)
 800c2cc:	0019      	movs	r1, r3
 800c2ce:	2003      	movs	r0, #3
 800c2d0:	f000 fdf2 	bl	800ceb8 <CreateLine>
  }
}
 800c2d4:	46c0      	nop			@ (mov r8, r8)
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	b002      	add	sp, #8
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	08022cf4 	.word	0x08022cf4
 800c2e0:	08022d04 	.word	0x08022d04
 800c2e4:	08022d08 	.word	0x08022d08
 800c2e8:	08022d20 	.word	0x08022d20
 800c2ec:	08022d40 	.word	0x08022d40
 800c2f0:	08022d58 	.word	0x08022d58

0800c2f4 <configCheck>:

void configCheck(){
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800c2f8:	f7f9 fef1 	bl	80060de <BootButton_Pressed>
 800c2fc:	1e03      	subs	r3, r0, #0
 800c2fe:	d007      	beq.n	800c310 <configCheck+0x1c>
 800c300:	f7f9 fefe 	bl	8006100 <UserButton_Pressed>
 800c304:	1e03      	subs	r3, r0, #0
 800c306:	d003      	beq.n	800c310 <configCheck+0x1c>
    configSet = true;
 800c308:	4b3d      	ldr	r3, [pc, #244]	@ (800c400 <configCheck+0x10c>)
 800c30a:	2201      	movs	r2, #1
 800c30c:	701a      	strb	r2, [r3, #0]
 800c30e:	e00a      	b.n	800c326 <configCheck+0x32>
  }
  else{
    configSet = false;
 800c310:	4b3b      	ldr	r3, [pc, #236]	@ (800c400 <configCheck+0x10c>)
 800c312:	2200      	movs	r2, #0
 800c314:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800c316:	f001 f96d 	bl	800d5f4 <HAL_GetTick>
 800c31a:	0003      	movs	r3, r0
 800c31c:	22fa      	movs	r2, #250	@ 0xfa
 800c31e:	00d2      	lsls	r2, r2, #3
 800c320:	189a      	adds	r2, r3, r2
 800c322:	4b38      	ldr	r3, [pc, #224]	@ (800c404 <configCheck+0x110>)
 800c324:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800c326:	4b36      	ldr	r3, [pc, #216]	@ (800c400 <configCheck+0x10c>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00d      	beq.n	800c34a <configCheck+0x56>
 800c32e:	4b35      	ldr	r3, [pc, #212]	@ (800c404 <configCheck+0x110>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	0018      	movs	r0, r3
 800c334:	f000 fd6a 	bl	800ce0c <TimestampIsReached>
 800c338:	1e03      	subs	r3, r0, #0
 800c33a:	d006      	beq.n	800c34a <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800c33c:	f7f7 fb26 	bl	800398c <SetConfigMode>
    SetDBLED(true, true, true);
 800c340:	2201      	movs	r2, #1
 800c342:	2101      	movs	r1, #1
 800c344:	2001      	movs	r0, #1
 800c346:	f7ff fe4d 	bl	800bfe4 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800c34a:	f7f9 fec8 	bl	80060de <BootButton_Pressed>
 800c34e:	0003      	movs	r3, r0
 800c350:	001a      	movs	r2, r3
 800c352:	2301      	movs	r3, #1
 800c354:	4053      	eors	r3, r2
 800c356:	b2db      	uxtb	r3, r3
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d01d      	beq.n	800c398 <configCheck+0xa4>
 800c35c:	f7f9 fed0 	bl	8006100 <UserButton_Pressed>
 800c360:	1e03      	subs	r3, r0, #0
 800c362:	d019      	beq.n	800c398 <configCheck+0xa4>
 800c364:	4b28      	ldr	r3, [pc, #160]	@ (800c408 <configCheck+0x114>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2201      	movs	r2, #1
 800c36a:	4053      	eors	r3, r2
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d012      	beq.n	800c398 <configCheck+0xa4>
    SetLEDsOff();
 800c372:	f7ff ff3f 	bl	800c1f4 <SetLEDsOff>
    userToggle = !userToggle;
 800c376:	4b25      	ldr	r3, [pc, #148]	@ (800c40c <configCheck+0x118>)
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	1e5a      	subs	r2, r3, #1
 800c37c:	4193      	sbcs	r3, r2
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	2201      	movs	r2, #1
 800c382:	4053      	eors	r3, r2
 800c384:	b2db      	uxtb	r3, r3
 800c386:	1c1a      	adds	r2, r3, #0
 800c388:	2301      	movs	r3, #1
 800c38a:	4013      	ands	r3, r2
 800c38c:	b2da      	uxtb	r2, r3
 800c38e:	4b1f      	ldr	r3, [pc, #124]	@ (800c40c <configCheck+0x118>)
 800c390:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800c392:	4b1d      	ldr	r3, [pc, #116]	@ (800c408 <configCheck+0x114>)
 800c394:	2201      	movs	r2, #1
 800c396:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800c398:	f7f9 fea1 	bl	80060de <BootButton_Pressed>
 800c39c:	0003      	movs	r3, r0
 800c39e:	001a      	movs	r2, r3
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	4053      	eors	r3, r2
 800c3a4:	b2db      	uxtb	r3, r3
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00b      	beq.n	800c3c2 <configCheck+0xce>
 800c3aa:	f7f9 fea9 	bl	8006100 <UserButton_Pressed>
 800c3ae:	0003      	movs	r3, r0
 800c3b0:	001a      	movs	r2, r3
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	4053      	eors	r3, r2
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d002      	beq.n	800c3c2 <configCheck+0xce>
    buttonHeld = false;
 800c3bc:	4b12      	ldr	r3, [pc, #72]	@ (800c408 <configCheck+0x114>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800c3c2:	f7f9 fe7d 	bl	80060c0 <Check_USB_PowerOn>
 800c3c6:	1e03      	subs	r3, r0, #0
 800c3c8:	d003      	beq.n	800c3d2 <configCheck+0xde>
    usbPluggedIn = true;
 800c3ca:	4b11      	ldr	r3, [pc, #68]	@ (800c410 <configCheck+0x11c>)
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800c3d0:	e012      	b.n	800c3f8 <configCheck+0x104>
    if(!userToggle && !init){
 800c3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c40c <configCheck+0x118>)
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	4053      	eors	r3, r2
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d008      	beq.n	800c3f2 <configCheck+0xfe>
 800c3e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c414 <configCheck+0x120>)
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	4053      	eors	r3, r2
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d001      	beq.n	800c3f2 <configCheck+0xfe>
      SetLEDsOff();
 800c3ee:	f7ff ff01 	bl	800c1f4 <SetLEDsOff>
    usbPluggedIn = false;
 800c3f2:	4b07      	ldr	r3, [pc, #28]	@ (800c410 <configCheck+0x11c>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	701a      	strb	r2, [r3, #0]
}
 800c3f8:	46c0      	nop			@ (mov r8, r8)
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}
 800c3fe:	46c0      	nop			@ (mov r8, r8)
 800c400:	20002160 	.word	0x20002160
 800c404:	20002164 	.word	0x20002164
 800c408:	20002163 	.word	0x20002163
 800c40c:	20002162 	.word	0x20002162
 800c410:	20002161 	.word	0x20002161
 800c414:	200000c8 	.word	0x200000c8

0800c418 <Status_Upkeep>:
  RTC_SetWakeUpTimer(sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800c418:	b580      	push	{r7, lr}
 800c41a:	af00      	add	r7, sp, #0
  configCheck();
 800c41c:	f7ff ff6a 	bl	800c2f4 <configCheck>
}
 800c420:	46c0      	nop			@ (mov r8, r8)
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800c426:	b590      	push	{r4, r7, lr}
 800c428:	b083      	sub	sp, #12
 800c42a:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800c42c:	1dfc      	adds	r4, r7, #7
 800c42e:	f7ff fefd 	bl	800c22c <powerCheck>
 800c432:	0003      	movs	r3, r0
 800c434:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800c436:	1dfb      	adds	r3, r7, #7
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	0018      	movs	r0, r3
 800c43c:	f7ff ff12 	bl	800c264 <powerDisplay>
  return status;
 800c440:	1dfb      	adds	r3, r7, #7
 800c442:	781b      	ldrb	r3, [r3, #0]

}
 800c444:	0018      	movs	r0, r3
 800c446:	46bd      	mov	sp, r7
 800c448:	b003      	add	sp, #12
 800c44a:	bd90      	pop	{r4, r7, pc}

0800c44c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c450:	4b07      	ldr	r3, [pc, #28]	@ (800c470 <HAL_MspInit+0x24>)
 800c452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c454:	4b06      	ldr	r3, [pc, #24]	@ (800c470 <HAL_MspInit+0x24>)
 800c456:	2101      	movs	r1, #1
 800c458:	430a      	orrs	r2, r1
 800c45a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800c45c:	4b04      	ldr	r3, [pc, #16]	@ (800c470 <HAL_MspInit+0x24>)
 800c45e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c460:	4b03      	ldr	r3, [pc, #12]	@ (800c470 <HAL_MspInit+0x24>)
 800c462:	2180      	movs	r1, #128	@ 0x80
 800c464:	0549      	lsls	r1, r1, #21
 800c466:	430a      	orrs	r2, r1
 800c468:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c46a:	46c0      	nop			@ (mov r8, r8)
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	40021000 	.word	0x40021000

0800c474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c478:	46c0      	nop			@ (mov r8, r8)
 800c47a:	e7fd      	b.n	800c478 <NMI_Handler+0x4>

0800c47c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c480:	46c0      	nop			@ (mov r8, r8)
 800c482:	e7fd      	b.n	800c480 <HardFault_Handler+0x4>

0800c484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800c488:	46c0      	nop			@ (mov r8, r8)
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800c492:	46c0      	nop			@ (mov r8, r8)
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c49c:	f001 f898 	bl	800d5d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c4a0:	46c0      	nop			@ (mov r8, r8)
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800c4ac:	4b05      	ldr	r3, [pc, #20]	@ (800c4c4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f001 fead 	bl	800e20e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800c4b4:	4b04      	ldr	r3, [pc, #16]	@ (800c4c8 <DMA1_Channel2_3_IRQHandler+0x20>)
 800c4b6:	0018      	movs	r0, r3
 800c4b8:	f001 fea9 	bl	800e20e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800c4bc:	46c0      	nop			@ (mov r8, r8)
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	46c0      	nop			@ (mov r8, r8)
 800c4c4:	20000e30 	.word	0x20000e30
 800c4c8:	20000de8 	.word	0x20000de8

0800c4cc <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800c4d0:	4b07      	ldr	r3, [pc, #28]	@ (800c4f0 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800c4d2:	0018      	movs	r0, r3
 800c4d4:	f001 fe9b 	bl	800e20e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800c4d8:	4b06      	ldr	r3, [pc, #24]	@ (800c4f4 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800c4da:	0018      	movs	r0, r3
 800c4dc:	f001 fe97 	bl	800e20e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800c4e0:	4b05      	ldr	r3, [pc, #20]	@ (800c4f8 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800c4e2:	0018      	movs	r0, r3
 800c4e4:	f001 fe93 	bl	800e20e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800c4e8:	46c0      	nop			@ (mov r8, r8)
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	46c0      	nop			@ (mov r8, r8)
 800c4f0:	20000eb4 	.word	0x20000eb4
 800c4f4:	20002454 	.word	0x20002454
 800c4f8:	2000249c 	.word	0x2000249c

0800c4fc <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c500:	4b03      	ldr	r3, [pc, #12]	@ (800c510 <USART4_5_IRQHandler+0x14>)
 800c502:	0018      	movs	r0, r3
 800c504:	f009 faca 	bl	8015a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800c508:	46c0      	nop			@ (mov r8, r8)
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	46c0      	nop			@ (mov r8, r8)
 800c510:	2000239c 	.word	0x2000239c

0800c514 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800c518:	4b09      	ldr	r3, [pc, #36]	@ (800c540 <I2C1_IRQHandler+0x2c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	699a      	ldr	r2, [r3, #24]
 800c51e:	23e0      	movs	r3, #224	@ 0xe0
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	4013      	ands	r3, r2
 800c524:	d004      	beq.n	800c530 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800c526:	4b06      	ldr	r3, [pc, #24]	@ (800c540 <I2C1_IRQHandler+0x2c>)
 800c528:	0018      	movs	r0, r3
 800c52a:	f002 ffab 	bl	800f484 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800c52e:	e003      	b.n	800c538 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800c530:	4b03      	ldr	r3, [pc, #12]	@ (800c540 <I2C1_IRQHandler+0x2c>)
 800c532:	0018      	movs	r0, r3
 800c534:	f002 ff8c 	bl	800f450 <HAL_I2C_EV_IRQHandler>
}
 800c538:	46c0      	nop			@ (mov r8, r8)
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	46c0      	nop			@ (mov r8, r8)
 800c540:	20000d40 	.word	0x20000d40

0800c544 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c548:	4b03      	ldr	r3, [pc, #12]	@ (800c558 <USART1_IRQHandler+0x14>)
 800c54a:	0018      	movs	r0, r3
 800c54c:	f009 faa6 	bl	8015a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c550:	46c0      	nop			@ (mov r8, r8)
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	46c0      	nop			@ (mov r8, r8)
 800c558:	200022e4 	.word	0x200022e4

0800c55c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800c560:	4b03      	ldr	r3, [pc, #12]	@ (800c570 <USB_IRQHandler+0x14>)
 800c562:	0018      	movs	r0, r3
 800c564:	f005 fb6c 	bl	8011c40 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800c568:	46c0      	nop			@ (mov r8, r8)
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	46c0      	nop			@ (mov r8, r8)
 800c570:	200032a4 	.word	0x200032a4

0800c574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	af00      	add	r7, sp, #0
  return 1;
 800c578:	2301      	movs	r3, #1
}
 800c57a:	0018      	movs	r0, r3
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <_kill>:

int _kill(int pid, int sig)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800c58a:	f012 f96b 	bl	801e864 <__errno>
 800c58e:	0003      	movs	r3, r0
 800c590:	2216      	movs	r2, #22
 800c592:	601a      	str	r2, [r3, #0]
  return -1;
 800c594:	2301      	movs	r3, #1
 800c596:	425b      	negs	r3, r3
}
 800c598:	0018      	movs	r0, r3
 800c59a:	46bd      	mov	sp, r7
 800c59c:	b002      	add	sp, #8
 800c59e:	bd80      	pop	{r7, pc}

0800c5a0 <_exit>:

void _exit (int status)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	425a      	negs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	0011      	movs	r1, r2
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	f7ff ffe5 	bl	800c580 <_kill>
  while (1) {}    /* Make sure we hang here */
 800c5b6:	46c0      	nop			@ (mov r8, r8)
 800c5b8:	e7fd      	b.n	800c5b6 <_exit+0x16>

0800c5ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b086      	sub	sp, #24
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	60f8      	str	r0, [r7, #12]
 800c5c2:	60b9      	str	r1, [r7, #8]
 800c5c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	617b      	str	r3, [r7, #20]
 800c5ca:	e00a      	b.n	800c5e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800c5cc:	e000      	b.n	800c5d0 <_read+0x16>
 800c5ce:	bf00      	nop
 800c5d0:	0001      	movs	r1, r0
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	1c5a      	adds	r2, r3, #1
 800c5d6:	60ba      	str	r2, [r7, #8]
 800c5d8:	b2ca      	uxtb	r2, r1
 800c5da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	617b      	str	r3, [r7, #20]
 800c5e2:	697a      	ldr	r2, [r7, #20]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	dbf0      	blt.n	800c5cc <_read+0x12>
  }

  return len;
 800c5ea:	687b      	ldr	r3, [r7, #4]
}
 800c5ec:	0018      	movs	r0, r3
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	b006      	add	sp, #24
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	425b      	negs	r3, r3
}
 800c600:	0018      	movs	r0, r3
 800c602:	46bd      	mov	sp, r7
 800c604:	b002      	add	sp, #8
 800c606:	bd80      	pop	{r7, pc}

0800c608 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2280      	movs	r2, #128	@ 0x80
 800c616:	0192      	lsls	r2, r2, #6
 800c618:	605a      	str	r2, [r3, #4]
  return 0;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	0018      	movs	r0, r3
 800c61e:	46bd      	mov	sp, r7
 800c620:	b002      	add	sp, #8
 800c622:	bd80      	pop	{r7, pc}

0800c624 <_isatty>:

int _isatty(int file)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800c62c:	2301      	movs	r3, #1
}
 800c62e:	0018      	movs	r0, r3
 800c630:	46bd      	mov	sp, r7
 800c632:	b002      	add	sp, #8
 800c634:	bd80      	pop	{r7, pc}

0800c636 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	60f8      	str	r0, [r7, #12]
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800c642:	2300      	movs	r3, #0
}
 800c644:	0018      	movs	r0, r3
 800c646:	46bd      	mov	sp, r7
 800c648:	b004      	add	sp, #16
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b086      	sub	sp, #24
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800c654:	4a14      	ldr	r2, [pc, #80]	@ (800c6a8 <_sbrk+0x5c>)
 800c656:	4b15      	ldr	r3, [pc, #84]	@ (800c6ac <_sbrk+0x60>)
 800c658:	1ad3      	subs	r3, r2, r3
 800c65a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800c660:	4b13      	ldr	r3, [pc, #76]	@ (800c6b0 <_sbrk+0x64>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d102      	bne.n	800c66e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800c668:	4b11      	ldr	r3, [pc, #68]	@ (800c6b0 <_sbrk+0x64>)
 800c66a:	4a12      	ldr	r2, [pc, #72]	@ (800c6b4 <_sbrk+0x68>)
 800c66c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800c66e:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <_sbrk+0x64>)
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	18d3      	adds	r3, r2, r3
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d207      	bcs.n	800c68c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800c67c:	f012 f8f2 	bl	801e864 <__errno>
 800c680:	0003      	movs	r3, r0
 800c682:	220c      	movs	r2, #12
 800c684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800c686:	2301      	movs	r3, #1
 800c688:	425b      	negs	r3, r3
 800c68a:	e009      	b.n	800c6a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800c68c:	4b08      	ldr	r3, [pc, #32]	@ (800c6b0 <_sbrk+0x64>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800c692:	4b07      	ldr	r3, [pc, #28]	@ (800c6b0 <_sbrk+0x64>)
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	18d2      	adds	r2, r2, r3
 800c69a:	4b05      	ldr	r3, [pc, #20]	@ (800c6b0 <_sbrk+0x64>)
 800c69c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800c69e:	68fb      	ldr	r3, [r7, #12]
}
 800c6a0:	0018      	movs	r0, r3
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	b006      	add	sp, #24
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	20005000 	.word	0x20005000
 800c6ac:	00000400 	.word	0x00000400
 800c6b0:	20002168 	.word	0x20002168
 800c6b4:	20003908 	.word	0x20003908

0800c6b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800c6bc:	46c0      	nop			@ (mov r8, r8)
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
	...

0800c6c4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c6ca:	2310      	movs	r3, #16
 800c6cc:	18fb      	adds	r3, r7, r3
 800c6ce:	0018      	movs	r0, r3
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	001a      	movs	r2, r3
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	f012 f821 	bl	801e71c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c6da:	003b      	movs	r3, r7
 800c6dc:	0018      	movs	r0, r3
 800c6de:	2310      	movs	r3, #16
 800c6e0:	001a      	movs	r2, r3
 800c6e2:	2100      	movs	r1, #0
 800c6e4:	f012 f81a 	bl	801e71c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800c6e8:	4b2e      	ldr	r3, [pc, #184]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c6ea:	2280      	movs	r2, #128	@ 0x80
 800c6ec:	05d2      	lsls	r2, r2, #23
 800c6ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800c6f0:	4b2c      	ldr	r3, [pc, #176]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c6f6:	4b2b      	ldr	r3, [pc, #172]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800c6fc:	4b29      	ldr	r3, [pc, #164]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c6fe:	4a2a      	ldr	r2, [pc, #168]	@ (800c7a8 <MX_TIM2_Init+0xe4>)
 800c700:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c702:	4b28      	ldr	r3, [pc, #160]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c704:	2200      	movs	r2, #0
 800c706:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c708:	4b26      	ldr	r3, [pc, #152]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800c70e:	4b25      	ldr	r3, [pc, #148]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c710:	0018      	movs	r0, r3
 800c712:	f008 fbd7 	bl	8014ec4 <HAL_TIM_PWM_Init>
 800c716:	1e03      	subs	r3, r0, #0
 800c718:	d001      	beq.n	800c71e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800c71a:	f7fb f811 	bl	8007740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c71e:	2110      	movs	r1, #16
 800c720:	187b      	adds	r3, r7, r1
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c726:	187b      	adds	r3, r7, r1
 800c728:	2200      	movs	r2, #0
 800c72a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800c72c:	187a      	adds	r2, r7, r1
 800c72e:	4b1d      	ldr	r3, [pc, #116]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c730:	0011      	movs	r1, r2
 800c732:	0018      	movs	r0, r3
 800c734:	f008 fee4 	bl	8015500 <HAL_TIMEx_MasterConfigSynchronization>
 800c738:	1e03      	subs	r3, r0, #0
 800c73a:	d001      	beq.n	800c740 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800c73c:	f7fb f800 	bl	8007740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c740:	003b      	movs	r3, r7
 800c742:	2260      	movs	r2, #96	@ 0x60
 800c744:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800c746:	003b      	movs	r3, r7
 800c748:	2200      	movs	r2, #0
 800c74a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c74c:	003b      	movs	r3, r7
 800c74e:	2200      	movs	r2, #0
 800c750:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c752:	003b      	movs	r3, r7
 800c754:	2200      	movs	r2, #0
 800c756:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c758:	0039      	movs	r1, r7
 800c75a:	4b12      	ldr	r3, [pc, #72]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c75c:	2200      	movs	r2, #0
 800c75e:	0018      	movs	r0, r3
 800c760:	f008 fc82 	bl	8015068 <HAL_TIM_PWM_ConfigChannel>
 800c764:	1e03      	subs	r3, r0, #0
 800c766:	d001      	beq.n	800c76c <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800c768:	f7fa ffea 	bl	8007740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c76c:	0039      	movs	r1, r7
 800c76e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c770:	2208      	movs	r2, #8
 800c772:	0018      	movs	r0, r3
 800c774:	f008 fc78 	bl	8015068 <HAL_TIM_PWM_ConfigChannel>
 800c778:	1e03      	subs	r3, r0, #0
 800c77a:	d001      	beq.n	800c780 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800c77c:	f7fa ffe0 	bl	8007740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800c780:	0039      	movs	r1, r7
 800c782:	4b08      	ldr	r3, [pc, #32]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c784:	220c      	movs	r2, #12
 800c786:	0018      	movs	r0, r3
 800c788:	f008 fc6e 	bl	8015068 <HAL_TIM_PWM_ConfigChannel>
 800c78c:	1e03      	subs	r3, r0, #0
 800c78e:	d001      	beq.n	800c794 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800c790:	f7fa ffd6 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800c794:	4b03      	ldr	r3, [pc, #12]	@ (800c7a4 <MX_TIM2_Init+0xe0>)
 800c796:	0018      	movs	r0, r3
 800c798:	f000 f8fe 	bl	800c998 <HAL_TIM_MspPostInit>

}
 800c79c:	46c0      	nop			@ (mov r8, r8)
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	b006      	add	sp, #24
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	2000216c 	.word	0x2000216c
 800c7a8:	0000ffff 	.word	0x0000ffff

0800c7ac <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c7b2:	2310      	movs	r3, #16
 800c7b4:	18fb      	adds	r3, r7, r3
 800c7b6:	0018      	movs	r0, r3
 800c7b8:	2308      	movs	r3, #8
 800c7ba:	001a      	movs	r2, r3
 800c7bc:	2100      	movs	r1, #0
 800c7be:	f011 ffad 	bl	801e71c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800c7c2:	003b      	movs	r3, r7
 800c7c4:	0018      	movs	r0, r3
 800c7c6:	2310      	movs	r3, #16
 800c7c8:	001a      	movs	r2, r3
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	f011 ffa6 	bl	801e71c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800c7d0:	4b32      	ldr	r3, [pc, #200]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c7d2:	4a33      	ldr	r2, [pc, #204]	@ (800c8a0 <MX_TIM3_Init+0xf4>)
 800c7d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800c7d6:	4b31      	ldr	r3, [pc, #196]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c7dc:	4b2f      	ldr	r3, [pc, #188]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800c7e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c7e4:	4a2f      	ldr	r2, [pc, #188]	@ (800c8a4 <MX_TIM3_Init+0xf8>)
 800c7e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800c7e8:	4b2c      	ldr	r3, [pc, #176]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c7ee:	4b2b      	ldr	r3, [pc, #172]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800c7f4:	4b29      	ldr	r3, [pc, #164]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c7f6:	0018      	movs	r0, r3
 800c7f8:	f008 fb64 	bl	8014ec4 <HAL_TIM_PWM_Init>
 800c7fc:	1e03      	subs	r3, r0, #0
 800c7fe:	d001      	beq.n	800c804 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800c800:	f7fa ff9e 	bl	8007740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c804:	2110      	movs	r1, #16
 800c806:	187b      	adds	r3, r7, r1
 800c808:	2200      	movs	r2, #0
 800c80a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c80c:	187b      	adds	r3, r7, r1
 800c80e:	2200      	movs	r2, #0
 800c810:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800c812:	187a      	adds	r2, r7, r1
 800c814:	4b21      	ldr	r3, [pc, #132]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c816:	0011      	movs	r1, r2
 800c818:	0018      	movs	r0, r3
 800c81a:	f008 fe71 	bl	8015500 <HAL_TIMEx_MasterConfigSynchronization>
 800c81e:	1e03      	subs	r3, r0, #0
 800c820:	d001      	beq.n	800c826 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800c822:	f7fa ff8d 	bl	8007740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800c826:	003b      	movs	r3, r7
 800c828:	2260      	movs	r2, #96	@ 0x60
 800c82a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800c82c:	003b      	movs	r3, r7
 800c82e:	2200      	movs	r2, #0
 800c830:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800c832:	003b      	movs	r3, r7
 800c834:	2200      	movs	r2, #0
 800c836:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800c838:	003b      	movs	r3, r7
 800c83a:	2200      	movs	r2, #0
 800c83c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800c83e:	0039      	movs	r1, r7
 800c840:	4b16      	ldr	r3, [pc, #88]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c842:	2200      	movs	r2, #0
 800c844:	0018      	movs	r0, r3
 800c846:	f008 fc0f 	bl	8015068 <HAL_TIM_PWM_ConfigChannel>
 800c84a:	1e03      	subs	r3, r0, #0
 800c84c:	d001      	beq.n	800c852 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800c84e:	f7fa ff77 	bl	8007740 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800c852:	4b12      	ldr	r3, [pc, #72]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c854:	2104      	movs	r1, #4
 800c856:	0018      	movs	r0, r3
 800c858:	f008 feb0 	bl	80155bc <HAL_TIMEx_RemapConfig>
 800c85c:	1e03      	subs	r3, r0, #0
 800c85e:	d001      	beq.n	800c864 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800c860:	f7fa ff6e 	bl	8007740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800c864:	0039      	movs	r1, r7
 800c866:	4b0d      	ldr	r3, [pc, #52]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c868:	2204      	movs	r2, #4
 800c86a:	0018      	movs	r0, r3
 800c86c:	f008 fbfc 	bl	8015068 <HAL_TIM_PWM_ConfigChannel>
 800c870:	1e03      	subs	r3, r0, #0
 800c872:	d001      	beq.n	800c878 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800c874:	f7fa ff64 	bl	8007740 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800c878:	0039      	movs	r1, r7
 800c87a:	4b08      	ldr	r3, [pc, #32]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c87c:	2208      	movs	r2, #8
 800c87e:	0018      	movs	r0, r3
 800c880:	f008 fbf2 	bl	8015068 <HAL_TIM_PWM_ConfigChannel>
 800c884:	1e03      	subs	r3, r0, #0
 800c886:	d001      	beq.n	800c88c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800c888:	f7fa ff5a 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800c88c:	4b03      	ldr	r3, [pc, #12]	@ (800c89c <MX_TIM3_Init+0xf0>)
 800c88e:	0018      	movs	r0, r3
 800c890:	f000 f882 	bl	800c998 <HAL_TIM_MspPostInit>

}
 800c894:	46c0      	nop			@ (mov r8, r8)
 800c896:	46bd      	mov	sp, r7
 800c898:	b006      	add	sp, #24
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	200021ac 	.word	0x200021ac
 800c8a0:	40000400 	.word	0x40000400
 800c8a4:	0000ffff 	.word	0x0000ffff

0800c8a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b082      	sub	sp, #8
 800c8ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800c8ae:	003b      	movs	r3, r7
 800c8b0:	0018      	movs	r0, r3
 800c8b2:	2308      	movs	r3, #8
 800c8b4:	001a      	movs	r2, r3
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	f011 ff30 	bl	801e71c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800c8bc:	4b15      	ldr	r3, [pc, #84]	@ (800c914 <MX_TIM6_Init+0x6c>)
 800c8be:	4a16      	ldr	r2, [pc, #88]	@ (800c918 <MX_TIM6_Init+0x70>)
 800c8c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800c8c2:	4b14      	ldr	r3, [pc, #80]	@ (800c914 <MX_TIM6_Init+0x6c>)
 800c8c4:	220a      	movs	r2, #10
 800c8c6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c8c8:	4b12      	ldr	r3, [pc, #72]	@ (800c914 <MX_TIM6_Init+0x6c>)
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800c8ce:	4b11      	ldr	r3, [pc, #68]	@ (800c914 <MX_TIM6_Init+0x6c>)
 800c8d0:	4a12      	ldr	r2, [pc, #72]	@ (800c91c <MX_TIM6_Init+0x74>)
 800c8d2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800c8d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c914 <MX_TIM6_Init+0x6c>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800c8da:	4b0e      	ldr	r3, [pc, #56]	@ (800c914 <MX_TIM6_Init+0x6c>)
 800c8dc:	0018      	movs	r0, r3
 800c8de:	f008 fa49 	bl	8014d74 <HAL_TIM_Base_Init>
 800c8e2:	1e03      	subs	r3, r0, #0
 800c8e4:	d001      	beq.n	800c8ea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800c8e6:	f7fa ff2b 	bl	8007740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800c8ea:	003b      	movs	r3, r7
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800c8f0:	003b      	movs	r3, r7
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800c8f6:	003a      	movs	r2, r7
 800c8f8:	4b06      	ldr	r3, [pc, #24]	@ (800c914 <MX_TIM6_Init+0x6c>)
 800c8fa:	0011      	movs	r1, r2
 800c8fc:	0018      	movs	r0, r3
 800c8fe:	f008 fdff 	bl	8015500 <HAL_TIMEx_MasterConfigSynchronization>
 800c902:	1e03      	subs	r3, r0, #0
 800c904:	d001      	beq.n	800c90a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800c906:	f7fa ff1b 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800c90a:	46c0      	nop			@ (mov r8, r8)
 800c90c:	46bd      	mov	sp, r7
 800c90e:	b002      	add	sp, #8
 800c910:	bd80      	pop	{r7, pc}
 800c912:	46c0      	nop			@ (mov r8, r8)
 800c914:	200021ec 	.word	0x200021ec
 800c918:	40001000 	.word	0x40001000
 800c91c:	0000ffff 	.word	0x0000ffff

0800c920 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	2380      	movs	r3, #128	@ 0x80
 800c92e:	05db      	lsls	r3, r3, #23
 800c930:	429a      	cmp	r2, r3
 800c932:	d106      	bne.n	800c942 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c934:	4b0a      	ldr	r3, [pc, #40]	@ (800c960 <HAL_TIM_PWM_MspInit+0x40>)
 800c936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c938:	4b09      	ldr	r3, [pc, #36]	@ (800c960 <HAL_TIM_PWM_MspInit+0x40>)
 800c93a:	2101      	movs	r1, #1
 800c93c:	430a      	orrs	r2, r1
 800c93e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800c940:	e00a      	b.n	800c958 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a07      	ldr	r2, [pc, #28]	@ (800c964 <HAL_TIM_PWM_MspInit+0x44>)
 800c948:	4293      	cmp	r3, r2
 800c94a:	d105      	bne.n	800c958 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c94c:	4b04      	ldr	r3, [pc, #16]	@ (800c960 <HAL_TIM_PWM_MspInit+0x40>)
 800c94e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c950:	4b03      	ldr	r3, [pc, #12]	@ (800c960 <HAL_TIM_PWM_MspInit+0x40>)
 800c952:	2102      	movs	r1, #2
 800c954:	430a      	orrs	r2, r1
 800c956:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800c958:	46c0      	nop			@ (mov r8, r8)
 800c95a:	46bd      	mov	sp, r7
 800c95c:	b002      	add	sp, #8
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	40021000 	.word	0x40021000
 800c964:	40000400 	.word	0x40000400

0800c968 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4a06      	ldr	r2, [pc, #24]	@ (800c990 <HAL_TIM_Base_MspInit+0x28>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d105      	bne.n	800c986 <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800c97a:	4b06      	ldr	r3, [pc, #24]	@ (800c994 <HAL_TIM_Base_MspInit+0x2c>)
 800c97c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c97e:	4b05      	ldr	r3, [pc, #20]	@ (800c994 <HAL_TIM_Base_MspInit+0x2c>)
 800c980:	2110      	movs	r1, #16
 800c982:	430a      	orrs	r2, r1
 800c984:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800c986:	46c0      	nop			@ (mov r8, r8)
 800c988:	46bd      	mov	sp, r7
 800c98a:	b002      	add	sp, #8
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	46c0      	nop			@ (mov r8, r8)
 800c990:	40001000 	.word	0x40001000
 800c994:	40021000 	.word	0x40021000

0800c998 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800c998:	b590      	push	{r4, r7, lr}
 800c99a:	b08b      	sub	sp, #44	@ 0x2c
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9a0:	2414      	movs	r4, #20
 800c9a2:	193b      	adds	r3, r7, r4
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	2314      	movs	r3, #20
 800c9a8:	001a      	movs	r2, r3
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	f011 feb6 	bl	801e71c <memset>
  if(timHandle->Instance==TIM2)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	2380      	movs	r3, #128	@ 0x80
 800c9b6:	05db      	lsls	r3, r3, #23
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d123      	bne.n	800ca04 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9bc:	4b27      	ldr	r3, [pc, #156]	@ (800ca5c <HAL_TIM_MspPostInit+0xc4>)
 800c9be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9c0:	4b26      	ldr	r3, [pc, #152]	@ (800ca5c <HAL_TIM_MspPostInit+0xc4>)
 800c9c2:	2101      	movs	r1, #1
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c9c8:	4b24      	ldr	r3, [pc, #144]	@ (800ca5c <HAL_TIM_MspPostInit+0xc4>)
 800c9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	613b      	str	r3, [r7, #16]
 800c9d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800c9d4:	0021      	movs	r1, r4
 800c9d6:	187b      	adds	r3, r7, r1
 800c9d8:	220d      	movs	r2, #13
 800c9da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9dc:	187b      	adds	r3, r7, r1
 800c9de:	2202      	movs	r2, #2
 800c9e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9e2:	187b      	adds	r3, r7, r1
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c9e8:	187b      	adds	r3, r7, r1
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800c9ee:	187b      	adds	r3, r7, r1
 800c9f0:	2202      	movs	r2, #2
 800c9f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c9f4:	187a      	adds	r2, r7, r1
 800c9f6:	23a0      	movs	r3, #160	@ 0xa0
 800c9f8:	05db      	lsls	r3, r3, #23
 800c9fa:	0011      	movs	r1, r2
 800c9fc:	0018      	movs	r0, r3
 800c9fe:	f001 febd 	bl	800e77c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800ca02:	e027      	b.n	800ca54 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a15      	ldr	r2, [pc, #84]	@ (800ca60 <HAL_TIM_MspPostInit+0xc8>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d122      	bne.n	800ca54 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca0e:	4b13      	ldr	r3, [pc, #76]	@ (800ca5c <HAL_TIM_MspPostInit+0xc4>)
 800ca10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca12:	4b12      	ldr	r3, [pc, #72]	@ (800ca5c <HAL_TIM_MspPostInit+0xc4>)
 800ca14:	2104      	movs	r1, #4
 800ca16:	430a      	orrs	r2, r1
 800ca18:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ca1a:	4b10      	ldr	r3, [pc, #64]	@ (800ca5c <HAL_TIM_MspPostInit+0xc4>)
 800ca1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca1e:	2204      	movs	r2, #4
 800ca20:	4013      	ands	r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800ca26:	2114      	movs	r1, #20
 800ca28:	187b      	adds	r3, r7, r1
 800ca2a:	22e0      	movs	r2, #224	@ 0xe0
 800ca2c:	0052      	lsls	r2, r2, #1
 800ca2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca30:	187b      	adds	r3, r7, r1
 800ca32:	2202      	movs	r2, #2
 800ca34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca36:	187b      	adds	r3, r7, r1
 800ca38:	2200      	movs	r2, #0
 800ca3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ca3c:	187b      	adds	r3, r7, r1
 800ca3e:	2200      	movs	r2, #0
 800ca40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ca42:	187b      	adds	r3, r7, r1
 800ca44:	2202      	movs	r2, #2
 800ca46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ca48:	187b      	adds	r3, r7, r1
 800ca4a:	4a06      	ldr	r2, [pc, #24]	@ (800ca64 <HAL_TIM_MspPostInit+0xcc>)
 800ca4c:	0019      	movs	r1, r3
 800ca4e:	0010      	movs	r0, r2
 800ca50:	f001 fe94 	bl	800e77c <HAL_GPIO_Init>
}
 800ca54:	46c0      	nop			@ (mov r8, r8)
 800ca56:	46bd      	mov	sp, r7
 800ca58:	b00b      	add	sp, #44	@ 0x2c
 800ca5a:	bd90      	pop	{r4, r7, pc}
 800ca5c:	40021000 	.word	0x40021000
 800ca60:	40000400 	.word	0x40000400
 800ca64:	50000800 	.word	0x50000800

0800ca68 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800ca6c:	4b17      	ldr	r3, [pc, #92]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca6e:	4a18      	ldr	r2, [pc, #96]	@ (800cad0 <MX_LPUART1_UART_Init+0x68>)
 800ca70:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800ca72:	4b16      	ldr	r3, [pc, #88]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca74:	22e1      	movs	r2, #225	@ 0xe1
 800ca76:	0252      	lsls	r2, r2, #9
 800ca78:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ca7a:	4b14      	ldr	r3, [pc, #80]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800ca80:	4b12      	ldr	r3, [pc, #72]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca82:	2200      	movs	r2, #0
 800ca84:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800ca86:	4b11      	ldr	r3, [pc, #68]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800ca8c:	4b0f      	ldr	r3, [pc, #60]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca8e:	220c      	movs	r2, #12
 800ca90:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ca92:	4b0e      	ldr	r3, [pc, #56]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca94:	2200      	movs	r2, #0
 800ca96:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ca98:	4b0c      	ldr	r3, [pc, #48]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800ca9e:	4b0b      	ldr	r3, [pc, #44]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800caa0:	2218      	movs	r2, #24
 800caa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800caa4:	4b09      	ldr	r3, [pc, #36]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800caa6:	2280      	movs	r2, #128	@ 0x80
 800caa8:	0212      	lsls	r2, r2, #8
 800caaa:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800caac:	4b07      	ldr	r3, [pc, #28]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800caae:	2280      	movs	r2, #128	@ 0x80
 800cab0:	0152      	lsls	r2, r2, #5
 800cab2:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800cab4:	4b05      	ldr	r3, [pc, #20]	@ (800cacc <MX_LPUART1_UART_Init+0x64>)
 800cab6:	0018      	movs	r0, r3
 800cab8:	f008 fd9e 	bl	80155f8 <HAL_UART_Init>
 800cabc:	1e03      	subs	r3, r0, #0
 800cabe:	d001      	beq.n	800cac4 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800cac0:	f7fa fe3e 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800cac4:	46c0      	nop			@ (mov r8, r8)
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	46c0      	nop			@ (mov r8, r8)
 800cacc:	2000222c 	.word	0x2000222c
 800cad0:	40004800 	.word	0x40004800

0800cad4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cad8:	4b16      	ldr	r3, [pc, #88]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cada:	4a17      	ldr	r2, [pc, #92]	@ (800cb38 <MX_USART1_UART_Init+0x64>)
 800cadc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800cade:	4b15      	ldr	r3, [pc, #84]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cae0:	22e1      	movs	r2, #225	@ 0xe1
 800cae2:	0252      	lsls	r2, r2, #9
 800cae4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cae6:	4b13      	ldr	r3, [pc, #76]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cae8:	2200      	movs	r2, #0
 800caea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800caec:	4b11      	ldr	r3, [pc, #68]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800caee:	2200      	movs	r2, #0
 800caf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800caf2:	4b10      	ldr	r3, [pc, #64]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800caf8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cafa:	220c      	movs	r2, #12
 800cafc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cafe:	4b0d      	ldr	r3, [pc, #52]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb04:	4b0b      	ldr	r3, [pc, #44]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cb0a:	4b0a      	ldr	r3, [pc, #40]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800cb10:	4b08      	ldr	r3, [pc, #32]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cb12:	2208      	movs	r2, #8
 800cb14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800cb16:	4b07      	ldr	r3, [pc, #28]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cb18:	2280      	movs	r2, #128	@ 0x80
 800cb1a:	0212      	lsls	r2, r2, #8
 800cb1c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cb1e:	4b05      	ldr	r3, [pc, #20]	@ (800cb34 <MX_USART1_UART_Init+0x60>)
 800cb20:	0018      	movs	r0, r3
 800cb22:	f008 fd69 	bl	80155f8 <HAL_UART_Init>
 800cb26:	1e03      	subs	r3, r0, #0
 800cb28:	d001      	beq.n	800cb2e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800cb2a:	f7fa fe09 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cb2e:	46c0      	nop			@ (mov r8, r8)
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	200022e4 	.word	0x200022e4
 800cb38:	40013800 	.word	0x40013800

0800cb3c <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800cb40:	4b14      	ldr	r3, [pc, #80]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb42:	4a15      	ldr	r2, [pc, #84]	@ (800cb98 <MX_USART4_UART_Init+0x5c>)
 800cb44:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800cb46:	4b13      	ldr	r3, [pc, #76]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb48:	22e1      	movs	r2, #225	@ 0xe1
 800cb4a:	0252      	lsls	r2, r2, #9
 800cb4c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800cb4e:	4b11      	ldr	r3, [pc, #68]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800cb54:	4b0f      	ldr	r3, [pc, #60]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800cb5a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800cb60:	4b0c      	ldr	r3, [pc, #48]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb62:	220c      	movs	r2, #12
 800cb64:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cb66:	4b0b      	ldr	r3, [pc, #44]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800cb6c:	4b09      	ldr	r3, [pc, #36]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb6e:	2200      	movs	r2, #0
 800cb70:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800cb72:	4b08      	ldr	r3, [pc, #32]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800cb78:	4b06      	ldr	r3, [pc, #24]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800cb7e:	4b05      	ldr	r3, [pc, #20]	@ (800cb94 <MX_USART4_UART_Init+0x58>)
 800cb80:	0018      	movs	r0, r3
 800cb82:	f008 fd39 	bl	80155f8 <HAL_UART_Init>
 800cb86:	1e03      	subs	r3, r0, #0
 800cb88:	d001      	beq.n	800cb8e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800cb8a:	f7fa fdd9 	bl	8007740 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800cb8e:	46c0      	nop			@ (mov r8, r8)
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	2000239c 	.word	0x2000239c
 800cb98:	40004c00 	.word	0x40004c00

0800cb9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b08d      	sub	sp, #52	@ 0x34
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cba4:	241c      	movs	r4, #28
 800cba6:	193b      	adds	r3, r7, r4
 800cba8:	0018      	movs	r0, r3
 800cbaa:	2314      	movs	r3, #20
 800cbac:	001a      	movs	r2, r3
 800cbae:	2100      	movs	r1, #0
 800cbb0:	f011 fdb4 	bl	801e71c <memset>
  if(uartHandle->Instance==LPUART1)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a8b      	ldr	r2, [pc, #556]	@ (800cde8 <HAL_UART_MspInit+0x24c>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d129      	bne.n	800cc12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800cbbe:	4b8b      	ldr	r3, [pc, #556]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cbc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbc2:	4b8a      	ldr	r3, [pc, #552]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cbc4:	2180      	movs	r1, #128	@ 0x80
 800cbc6:	02c9      	lsls	r1, r1, #11
 800cbc8:	430a      	orrs	r2, r1
 800cbca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cbcc:	4b87      	ldr	r3, [pc, #540]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cbce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbd0:	4b86      	ldr	r3, [pc, #536]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cbd2:	2104      	movs	r1, #4
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cbd8:	4b84      	ldr	r3, [pc, #528]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbdc:	2204      	movs	r2, #4
 800cbde:	4013      	ands	r3, r2
 800cbe0:	61bb      	str	r3, [r7, #24]
 800cbe2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cbe4:	0021      	movs	r1, r4
 800cbe6:	187b      	adds	r3, r7, r1
 800cbe8:	2203      	movs	r2, #3
 800cbea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbec:	187b      	adds	r3, r7, r1
 800cbee:	2202      	movs	r2, #2
 800cbf0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbf2:	187b      	adds	r3, r7, r1
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbf8:	187b      	adds	r3, r7, r1
 800cbfa:	2203      	movs	r2, #3
 800cbfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800cbfe:	187b      	adds	r3, r7, r1
 800cc00:	2206      	movs	r2, #6
 800cc02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cc04:	187b      	adds	r3, r7, r1
 800cc06:	4a7a      	ldr	r2, [pc, #488]	@ (800cdf0 <HAL_UART_MspInit+0x254>)
 800cc08:	0019      	movs	r1, r3
 800cc0a:	0010      	movs	r0, r2
 800cc0c:	f001 fdb6 	bl	800e77c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800cc10:	e0e5      	b.n	800cdde <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a77      	ldr	r2, [pc, #476]	@ (800cdf4 <HAL_UART_MspInit+0x258>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d133      	bne.n	800cc84 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800cc1c:	4b73      	ldr	r3, [pc, #460]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cc1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc20:	4b72      	ldr	r3, [pc, #456]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cc22:	2180      	movs	r1, #128	@ 0x80
 800cc24:	01c9      	lsls	r1, r1, #7
 800cc26:	430a      	orrs	r2, r1
 800cc28:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc2a:	4b70      	ldr	r3, [pc, #448]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc2e:	4b6f      	ldr	r3, [pc, #444]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cc30:	2101      	movs	r1, #1
 800cc32:	430a      	orrs	r2, r1
 800cc34:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cc36:	4b6d      	ldr	r3, [pc, #436]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	617b      	str	r3, [r7, #20]
 800cc40:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800cc42:	211c      	movs	r1, #28
 800cc44:	187b      	adds	r3, r7, r1
 800cc46:	22c0      	movs	r2, #192	@ 0xc0
 800cc48:	00d2      	lsls	r2, r2, #3
 800cc4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc4c:	187b      	adds	r3, r7, r1
 800cc4e:	2202      	movs	r2, #2
 800cc50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc52:	187b      	adds	r3, r7, r1
 800cc54:	2200      	movs	r2, #0
 800cc56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc58:	187b      	adds	r3, r7, r1
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800cc5e:	187b      	adds	r3, r7, r1
 800cc60:	2204      	movs	r2, #4
 800cc62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cc64:	187a      	adds	r2, r7, r1
 800cc66:	23a0      	movs	r3, #160	@ 0xa0
 800cc68:	05db      	lsls	r3, r3, #23
 800cc6a:	0011      	movs	r1, r2
 800cc6c:	0018      	movs	r0, r3
 800cc6e:	f001 fd85 	bl	800e77c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800cc72:	2200      	movs	r2, #0
 800cc74:	2100      	movs	r1, #0
 800cc76:	201b      	movs	r0, #27
 800cc78:	f001 f932 	bl	800dee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800cc7c:	201b      	movs	r0, #27
 800cc7e:	f001 f944 	bl	800df0a <HAL_NVIC_EnableIRQ>
}
 800cc82:	e0ac      	b.n	800cdde <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4a5b      	ldr	r2, [pc, #364]	@ (800cdf8 <HAL_UART_MspInit+0x25c>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d000      	beq.n	800cc90 <HAL_UART_MspInit+0xf4>
 800cc8e:	e0a6      	b.n	800cdde <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800cc90:	4b56      	ldr	r3, [pc, #344]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cc92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc94:	4b55      	ldr	r3, [pc, #340]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cc96:	2180      	movs	r1, #128	@ 0x80
 800cc98:	0309      	lsls	r1, r1, #12
 800cc9a:	430a      	orrs	r2, r1
 800cc9c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cc9e:	4b53      	ldr	r3, [pc, #332]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cca2:	4b52      	ldr	r3, [pc, #328]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800cca4:	2101      	movs	r1, #1
 800cca6:	430a      	orrs	r2, r1
 800cca8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ccaa:	4b50      	ldr	r3, [pc, #320]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800ccac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccae:	2201      	movs	r2, #1
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	613b      	str	r3, [r7, #16]
 800ccb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccb6:	4b4d      	ldr	r3, [pc, #308]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800ccb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccba:	4b4c      	ldr	r3, [pc, #304]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800ccbc:	2104      	movs	r1, #4
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ccc2:	4b4a      	ldr	r3, [pc, #296]	@ (800cdec <HAL_UART_MspInit+0x250>)
 800ccc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc6:	2204      	movs	r2, #4
 800ccc8:	4013      	ands	r3, r2
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800ccce:	241c      	movs	r4, #28
 800ccd0:	193b      	adds	r3, r7, r4
 800ccd2:	2202      	movs	r2, #2
 800ccd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccd6:	193b      	adds	r3, r7, r4
 800ccd8:	2202      	movs	r2, #2
 800ccda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccdc:	193b      	adds	r3, r7, r4
 800ccde:	2200      	movs	r2, #0
 800cce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cce2:	193b      	adds	r3, r7, r4
 800cce4:	2203      	movs	r2, #3
 800cce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800cce8:	193b      	adds	r3, r7, r4
 800ccea:	2206      	movs	r2, #6
 800ccec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ccee:	193a      	adds	r2, r7, r4
 800ccf0:	23a0      	movs	r3, #160	@ 0xa0
 800ccf2:	05db      	lsls	r3, r3, #23
 800ccf4:	0011      	movs	r1, r2
 800ccf6:	0018      	movs	r0, r3
 800ccf8:	f001 fd40 	bl	800e77c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800ccfc:	0021      	movs	r1, r4
 800ccfe:	187b      	adds	r3, r7, r1
 800cd00:	2280      	movs	r2, #128	@ 0x80
 800cd02:	00d2      	lsls	r2, r2, #3
 800cd04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd06:	187b      	adds	r3, r7, r1
 800cd08:	2202      	movs	r2, #2
 800cd0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd0c:	187b      	adds	r3, r7, r1
 800cd0e:	2200      	movs	r2, #0
 800cd10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd12:	187b      	adds	r3, r7, r1
 800cd14:	2203      	movs	r2, #3
 800cd16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800cd18:	187b      	adds	r3, r7, r1
 800cd1a:	2206      	movs	r2, #6
 800cd1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd1e:	187b      	adds	r3, r7, r1
 800cd20:	4a33      	ldr	r2, [pc, #204]	@ (800cdf0 <HAL_UART_MspInit+0x254>)
 800cd22:	0019      	movs	r1, r3
 800cd24:	0010      	movs	r0, r2
 800cd26:	f001 fd29 	bl	800e77c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800cd2a:	4b34      	ldr	r3, [pc, #208]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd2c:	4a34      	ldr	r2, [pc, #208]	@ (800ce00 <HAL_UART_MspInit+0x264>)
 800cd2e:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800cd30:	4b32      	ldr	r3, [pc, #200]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd32:	220c      	movs	r2, #12
 800cd34:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cd36:	4b31      	ldr	r3, [pc, #196]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd38:	2200      	movs	r2, #0
 800cd3a:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd3c:	4b2f      	ldr	r3, [pc, #188]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800cd42:	4b2e      	ldr	r3, [pc, #184]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd44:	2280      	movs	r2, #128	@ 0x80
 800cd46:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd48:	4b2c      	ldr	r3, [pc, #176]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cd4e:	4b2b      	ldr	r3, [pc, #172]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd50:	2200      	movs	r2, #0
 800cd52:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800cd54:	4b29      	ldr	r3, [pc, #164]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd56:	2220      	movs	r2, #32
 800cd58:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800cd5a:	4b28      	ldr	r3, [pc, #160]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800cd60:	4b26      	ldr	r3, [pc, #152]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd62:	0018      	movs	r0, r3
 800cd64:	f001 f8ee 	bl	800df44 <HAL_DMA_Init>
 800cd68:	1e03      	subs	r3, r0, #0
 800cd6a:	d001      	beq.n	800cd70 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800cd6c:	f7fa fce8 	bl	8007740 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a22      	ldr	r2, [pc, #136]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd74:	675a      	str	r2, [r3, #116]	@ 0x74
 800cd76:	4b21      	ldr	r3, [pc, #132]	@ (800cdfc <HAL_UART_MspInit+0x260>)
 800cd78:	687a      	ldr	r2, [r7, #4]
 800cd7a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800cd7c:	4b21      	ldr	r3, [pc, #132]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cd7e:	4a22      	ldr	r2, [pc, #136]	@ (800ce08 <HAL_UART_MspInit+0x26c>)
 800cd80:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800cd82:	4b20      	ldr	r3, [pc, #128]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cd84:	220c      	movs	r2, #12
 800cd86:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cd88:	4b1e      	ldr	r3, [pc, #120]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cd8a:	2210      	movs	r2, #16
 800cd8c:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cd94:	4b1b      	ldr	r3, [pc, #108]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cd96:	2280      	movs	r2, #128	@ 0x80
 800cd98:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd9a:	4b1a      	ldr	r3, [pc, #104]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cda0:	4b18      	ldr	r3, [pc, #96]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cda2:	2200      	movs	r2, #0
 800cda4:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800cda6:	4b17      	ldr	r3, [pc, #92]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cda8:	2200      	movs	r2, #0
 800cdaa:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cdac:	4b15      	ldr	r3, [pc, #84]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cdae:	2200      	movs	r2, #0
 800cdb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800cdb2:	4b14      	ldr	r3, [pc, #80]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cdb4:	0018      	movs	r0, r3
 800cdb6:	f001 f8c5 	bl	800df44 <HAL_DMA_Init>
 800cdba:	1e03      	subs	r3, r0, #0
 800cdbc:	d001      	beq.n	800cdc2 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800cdbe:	f7fa fcbf 	bl	8007740 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	4a0f      	ldr	r2, [pc, #60]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cdc6:	671a      	str	r2, [r3, #112]	@ 0x70
 800cdc8:	4b0e      	ldr	r3, [pc, #56]	@ (800ce04 <HAL_UART_MspInit+0x268>)
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	200e      	movs	r0, #14
 800cdd4:	f001 f884 	bl	800dee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800cdd8:	200e      	movs	r0, #14
 800cdda:	f001 f896 	bl	800df0a <HAL_NVIC_EnableIRQ>
}
 800cdde:	46c0      	nop			@ (mov r8, r8)
 800cde0:	46bd      	mov	sp, r7
 800cde2:	b00d      	add	sp, #52	@ 0x34
 800cde4:	bd90      	pop	{r4, r7, pc}
 800cde6:	46c0      	nop			@ (mov r8, r8)
 800cde8:	40004800 	.word	0x40004800
 800cdec:	40021000 	.word	0x40021000
 800cdf0:	50000800 	.word	0x50000800
 800cdf4:	40013800 	.word	0x40013800
 800cdf8:	40004c00 	.word	0x40004c00
 800cdfc:	20002454 	.word	0x20002454
 800ce00:	4002006c 	.word	0x4002006c
 800ce04:	2000249c 	.word	0x2000249c
 800ce08:	40020080 	.word	0x40020080

0800ce0c <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b086      	sub	sp, #24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800ce14:	f000 fbee 	bl	800d5f4 <HAL_GetTick>
 800ce18:	0003      	movs	r3, r0
 800ce1a:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800ce1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ce90 <TimestampIsReached+0x84>)
 800ce1e:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800ce20:	697a      	ldr	r2, [r7, #20]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d307      	bcc.n	800ce38 <TimestampIsReached+0x2c>
 800ce28:	697a      	ldr	r2, [r7, #20]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	693a      	ldr	r2, [r7, #16]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d901      	bls.n	800ce38 <TimestampIsReached+0x2c>
 800ce34:	2201      	movs	r2, #1
 800ce36:	e000      	b.n	800ce3a <TimestampIsReached+0x2e>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	230f      	movs	r3, #15
 800ce3c:	18fb      	adds	r3, r7, r3
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	781a      	ldrb	r2, [r3, #0]
 800ce42:	2101      	movs	r1, #1
 800ce44:	400a      	ands	r2, r1
 800ce46:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d207      	bcs.n	800ce60 <TimestampIsReached+0x54>
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	1ad3      	subs	r3, r2, r3
 800ce56:	693a      	ldr	r2, [r7, #16]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d201      	bcs.n	800ce60 <TimestampIsReached+0x54>
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	e000      	b.n	800ce62 <TimestampIsReached+0x56>
 800ce60:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800ce62:	200e      	movs	r0, #14
 800ce64:	183b      	adds	r3, r7, r0
 800ce66:	701a      	strb	r2, [r3, #0]
 800ce68:	781a      	ldrb	r2, [r3, #0]
 800ce6a:	2101      	movs	r1, #1
 800ce6c:	400a      	ands	r2, r1
 800ce6e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800ce70:	230f      	movs	r3, #15
 800ce72:	18fb      	adds	r3, r7, r3
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d103      	bne.n	800ce82 <TimestampIsReached+0x76>
 800ce7a:	183b      	adds	r3, r7, r0
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e000      	b.n	800ce88 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	0018      	movs	r0, r3
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	b006      	add	sp, #24
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	7fffffff 	.word	0x7fffffff

0800ce94 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800ce9c:	f000 fbaa 	bl	800d5f4 <HAL_GetTick>
 800cea0:	0002      	movs	r2, r0
 800cea2:	4904      	ldr	r1, [pc, #16]	@ (800ceb4 <AddTimestamp+0x20>)
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	0018      	movs	r0, r3
 800cea8:	f011 faf4 	bl	801e494 <siprintf>
}
 800ceac:	46c0      	nop			@ (mov r8, r8)
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	b002      	add	sp, #8
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	08022d7c 	.word	0x08022d7c

0800ceb8 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800ceb8:	b40c      	push	{r2, r3}
 800ceba:	b5b0      	push	{r4, r5, r7, lr}
 800cebc:	b0a4      	sub	sp, #144	@ 0x90
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	0002      	movs	r2, r0
 800cec2:	6039      	str	r1, [r7, #0]
 800cec4:	1dfb      	adds	r3, r7, #7
 800cec6:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800cec8:	4b23      	ldr	r3, [pc, #140]	@ (800cf58 <CreateLine+0xa0>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	1dfa      	adds	r2, r7, #7
 800cece:	7812      	ldrb	r2, [r2, #0]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d839      	bhi.n	800cf48 <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	4921      	ldr	r1, [pc, #132]	@ (800cf5c <CreateLine+0xa4>)
 800ced8:	240c      	movs	r4, #12
 800ceda:	193b      	adds	r3, r7, r4
 800cedc:	0018      	movs	r0, r3
 800cede:	f011 fad9 	bl	801e494 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800cee2:	4b1d      	ldr	r3, [pc, #116]	@ (800cf58 <CreateLine+0xa0>)
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d909      	bls.n	800cefe <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800ceea:	193b      	adds	r3, r7, r4
 800ceec:	0018      	movs	r0, r3
 800ceee:	f7f3 f93d 	bl	800016c <strlen>
 800cef2:	0002      	movs	r2, r0
 800cef4:	193b      	adds	r3, r7, r4
 800cef6:	189b      	adds	r3, r3, r2
 800cef8:	0018      	movs	r0, r3
 800cefa:	f7ff ffcb 	bl	800ce94 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800cefe:	240c      	movs	r4, #12
 800cf00:	193b      	adds	r3, r7, r4
 800cf02:	0018      	movs	r0, r3
 800cf04:	f7f3 f932 	bl	800016c <strlen>
 800cf08:	0003      	movs	r3, r0
 800cf0a:	218c      	movs	r1, #140	@ 0x8c
 800cf0c:	187a      	adds	r2, r7, r1
 800cf0e:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800cf10:	239c      	movs	r3, #156	@ 0x9c
 800cf12:	2508      	movs	r5, #8
 800cf14:	195b      	adds	r3, r3, r5
 800cf16:	19db      	adds	r3, r3, r7
 800cf18:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800cf1a:	193a      	adds	r2, r7, r4
 800cf1c:	187b      	adds	r3, r7, r1
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	18d0      	adds	r0, r2, r3
 800cf22:	187b      	adds	r3, r7, r1
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2280      	movs	r2, #128	@ 0x80
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	0019      	movs	r1, r3
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2298      	movs	r2, #152	@ 0x98
 800cf30:	1952      	adds	r2, r2, r5
 800cf32:	19d2      	adds	r2, r2, r7
 800cf34:	6812      	ldr	r2, [r2, #0]
 800cf36:	f011 fb45 	bl	801e5c4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800cf3a:	193a      	adds	r2, r7, r4
 800cf3c:	4b08      	ldr	r3, [pc, #32]	@ (800cf60 <CreateLine+0xa8>)
 800cf3e:	0011      	movs	r1, r2
 800cf40:	0018      	movs	r0, r3
 800cf42:	f011 fa37 	bl	801e3b4 <iprintf>
 800cf46:	e000      	b.n	800cf4a <CreateLine+0x92>
    return;
 800cf48:	46c0      	nop			@ (mov r8, r8)
}
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	b024      	add	sp, #144	@ 0x90
 800cf4e:	bcb0      	pop	{r4, r5, r7}
 800cf50:	bc08      	pop	{r3}
 800cf52:	b002      	add	sp, #8
 800cf54:	4718      	bx	r3
 800cf56:	46c0      	nop			@ (mov r8, r8)
 800cf58:	200000d0 	.word	0x200000d0
 800cf5c:	08022d88 	.word	0x08022d88
 800cf60:	08022d8c 	.word	0x08022d8c

0800cf64 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	68b9      	ldr	r1, [r7, #8]
 800cf76:	4804      	ldr	r0, [pc, #16]	@ (800cf88 <_write+0x24>)
 800cf78:	2364      	movs	r3, #100	@ 0x64
 800cf7a:	f008 fba3 	bl	80156c4 <HAL_UART_Transmit>
  return count;
 800cf7e:	687b      	ldr	r3, [r7, #4]
}
 800cf80:	0018      	movs	r0, r3
 800cf82:	46bd      	mov	sp, r7
 800cf84:	b004      	add	sp, #16
 800cf86:	bd80      	pop	{r7, pc}
 800cf88:	200022e4 	.word	0x200022e4

0800cf8c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	0002      	movs	r2, r0
 800cf94:	1dfb      	adds	r3, r7, #7
 800cf96:	701a      	strb	r2, [r3, #0]
 800cf98:	4b03      	ldr	r3, [pc, #12]	@ (800cfa8 <SetVerboseLevel+0x1c>)
 800cf9a:	1dfa      	adds	r2, r7, #7
 800cf9c:	7812      	ldrb	r2, [r2, #0]
 800cf9e:	701a      	strb	r2, [r3, #0]
 800cfa0:	46c0      	nop			@ (mov r8, r8)
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	b002      	add	sp, #8
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	200000d0 	.word	0x200000d0

0800cfac <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800cfac:	b580      	push	{r7, lr}
 800cfae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cfb0:	f000 fb20 	bl	800d5f4 <HAL_GetTick>
 800cfb4:	0003      	movs	r3, r0
}
 800cfb6:	0018      	movs	r0, r3
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800cfc2:	4a0f      	ldr	r2, [pc, #60]	@ (800d000 <BinaryReleaseInfo+0x44>)
 800cfc4:	4b0f      	ldr	r3, [pc, #60]	@ (800d004 <BinaryReleaseInfo+0x48>)
 800cfc6:	0019      	movs	r1, r3
 800cfc8:	2002      	movs	r0, #2
 800cfca:	f7ff ff75 	bl	800ceb8 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800cfce:	480e      	ldr	r0, [pc, #56]	@ (800d008 <BinaryReleaseInfo+0x4c>)
 800cfd0:	4a0e      	ldr	r2, [pc, #56]	@ (800d00c <BinaryReleaseInfo+0x50>)
 800cfd2:	490c      	ldr	r1, [pc, #48]	@ (800d004 <BinaryReleaseInfo+0x48>)
 800cfd4:	4b0e      	ldr	r3, [pc, #56]	@ (800d010 <BinaryReleaseInfo+0x54>)
 800cfd6:	9300      	str	r3, [sp, #0]
 800cfd8:	0003      	movs	r3, r0
 800cfda:	2002      	movs	r0, #2
 800cfdc:	f7ff ff6c 	bl	800ceb8 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800cfe0:	4b0c      	ldr	r3, [pc, #48]	@ (800d014 <BinaryReleaseInfo+0x58>)
 800cfe2:	4a0d      	ldr	r2, [pc, #52]	@ (800d018 <BinaryReleaseInfo+0x5c>)
 800cfe4:	4907      	ldr	r1, [pc, #28]	@ (800d004 <BinaryReleaseInfo+0x48>)
 800cfe6:	2002      	movs	r0, #2
 800cfe8:	f7ff ff66 	bl	800ceb8 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800cfec:	4b0b      	ldr	r3, [pc, #44]	@ (800d01c <BinaryReleaseInfo+0x60>)
 800cfee:	4a0c      	ldr	r2, [pc, #48]	@ (800d020 <BinaryReleaseInfo+0x64>)
 800cff0:	4904      	ldr	r1, [pc, #16]	@ (800d004 <BinaryReleaseInfo+0x48>)
 800cff2:	2002      	movs	r0, #2
 800cff4:	f7ff ff60 	bl	800ceb8 <CreateLine>
}
 800cff8:	46c0      	nop			@ (mov r8, r8)
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	46c0      	nop			@ (mov r8, r8)
 800d000:	08022d94 	.word	0x08022d94
 800d004:	08022dc0 	.word	0x08022dc0
 800d008:	08022dc4 	.word	0x08022dc4
 800d00c:	08022dd0 	.word	0x08022dd0
 800d010:	08022de4 	.word	0x08022de4
 800d014:	08022df0 	.word	0x08022df0
 800d018:	08022df8 	.word	0x08022df8
 800d01c:	08022e00 	.word	0x08022e00
 800d020:	08022e08 	.word	0x08022e08

0800d024 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	68ba      	ldr	r2, [r7, #8]
 800d034:	68f9      	ldr	r1, [r7, #12]
 800d036:	4803      	ldr	r0, [pc, #12]	@ (800d044 <errorHandler+0x20>)
 800d038:	f011 f9bc 	bl	801e3b4 <iprintf>
//    while (true)
//    {
//    }
}
 800d03c:	46c0      	nop			@ (mov r8, r8)
 800d03e:	46bd      	mov	sp, r7
 800d040:	b004      	add	sp, #16
 800d042:	bd80      	pop	{r7, pc}
 800d044:	08022e20 	.word	0x08022e20

0800d048 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d048:	b590      	push	{r4, r7, lr}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6039      	str	r1, [r7, #0]
 800d050:	0011      	movs	r1, r2
 800d052:	1dfb      	adds	r3, r7, #7
 800d054:	1c02      	adds	r2, r0, #0
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	1dbb      	adds	r3, r7, #6
 800d05a:	1c0a      	adds	r2, r1, #0
 800d05c:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800d05e:	4b0a      	ldr	r3, [pc, #40]	@ (800d088 <ReadRegister+0x40>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800d066:	4b08      	ldr	r3, [pc, #32]	@ (800d088 <ReadRegister+0x40>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	1dba      	adds	r2, r7, #6
 800d06c:	7814      	ldrb	r4, [r2, #0]
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	1dfa      	adds	r2, r7, #7
 800d072:	7810      	ldrb	r0, [r2, #0]
 800d074:	0022      	movs	r2, r4
 800d076:	4798      	blx	r3
 800d078:	0003      	movs	r3, r0
 800d07a:	e000      	b.n	800d07e <ReadRegister+0x36>
	}
	return false;
 800d07c:	2300      	movs	r3, #0
}
 800d07e:	0018      	movs	r0, r3
 800d080:	46bd      	mov	sp, r7
 800d082:	b003      	add	sp, #12
 800d084:	bd90      	pop	{r4, r7, pc}
 800d086:	46c0      	nop			@ (mov r8, r8)
 800d088:	200024e4 	.word	0x200024e4

0800d08c <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d08c:	b590      	push	{r4, r7, lr}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6039      	str	r1, [r7, #0]
 800d094:	0011      	movs	r1, r2
 800d096:	1dfb      	adds	r3, r7, #7
 800d098:	1c02      	adds	r2, r0, #0
 800d09a:	701a      	strb	r2, [r3, #0]
 800d09c:	1dbb      	adds	r3, r7, #6
 800d09e:	1c0a      	adds	r2, r1, #0
 800d0a0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d0cc <WriteRegister+0x40>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800d0aa:	4b08      	ldr	r3, [pc, #32]	@ (800d0cc <WriteRegister+0x40>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	1dba      	adds	r2, r7, #6
 800d0b0:	7814      	ldrb	r4, [r2, #0]
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	1dfa      	adds	r2, r7, #7
 800d0b6:	7810      	ldrb	r0, [r2, #0]
 800d0b8:	0022      	movs	r2, r4
 800d0ba:	4798      	blx	r3
 800d0bc:	0003      	movs	r3, r0
 800d0be:	e000      	b.n	800d0c2 <WriteRegister+0x36>
  }
  return false;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	0018      	movs	r0, r3
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	b003      	add	sp, #12
 800d0c8:	bd90      	pop	{r4, r7, pc}
 800d0ca:	46c0      	nop			@ (mov r8, r8)
 800d0cc:	200024e8 	.word	0x200024e8

0800d0d0 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	000a      	movs	r2, r1
 800d0da:	1cfb      	adds	r3, r7, #3
 800d0dc:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800d0de:	230f      	movs	r3, #15
 800d0e0:	18fb      	adds	r3, r7, r3
 800d0e2:	22ff      	movs	r2, #255	@ 0xff
 800d0e4:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800d0e6:	230e      	movs	r3, #14
 800d0e8:	18fb      	adds	r3, r7, r3
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	701a      	strb	r2, [r3, #0]
 800d0ee:	e037      	b.n	800d160 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800d0f0:	230e      	movs	r3, #14
 800d0f2:	18fb      	adds	r3, r7, r3
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	18d3      	adds	r3, r2, r3
 800d0fa:	7819      	ldrb	r1, [r3, #0]
 800d0fc:	220f      	movs	r2, #15
 800d0fe:	18bb      	adds	r3, r7, r2
 800d100:	18ba      	adds	r2, r7, r2
 800d102:	7812      	ldrb	r2, [r2, #0]
 800d104:	404a      	eors	r2, r1
 800d106:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800d108:	230d      	movs	r3, #13
 800d10a:	18fb      	adds	r3, r7, r3
 800d10c:	2200      	movs	r2, #0
 800d10e:	701a      	strb	r2, [r3, #0]
 800d110:	e01b      	b.n	800d14a <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800d112:	210f      	movs	r1, #15
 800d114:	187b      	adds	r3, r7, r1
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	b25b      	sxtb	r3, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	da09      	bge.n	800d132 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800d11e:	187b      	adds	r3, r7, r1
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	005b      	lsls	r3, r3, #1
 800d124:	b25b      	sxtb	r3, r3
 800d126:	2231      	movs	r2, #49	@ 0x31
 800d128:	4053      	eors	r3, r2
 800d12a:	b25a      	sxtb	r2, r3
 800d12c:	187b      	adds	r3, r7, r1
 800d12e:	701a      	strb	r2, [r3, #0]
 800d130:	e005      	b.n	800d13e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800d132:	230f      	movs	r3, #15
 800d134:	18fa      	adds	r2, r7, r3
 800d136:	18fb      	adds	r3, r7, r3
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	18db      	adds	r3, r3, r3
 800d13c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800d13e:	210d      	movs	r1, #13
 800d140:	187b      	adds	r3, r7, r1
 800d142:	781a      	ldrb	r2, [r3, #0]
 800d144:	187b      	adds	r3, r7, r1
 800d146:	3201      	adds	r2, #1
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	230d      	movs	r3, #13
 800d14c:	18fb      	adds	r3, r7, r3
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	2b07      	cmp	r3, #7
 800d152:	d9de      	bls.n	800d112 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800d154:	210e      	movs	r1, #14
 800d156:	187b      	adds	r3, r7, r1
 800d158:	781a      	ldrb	r2, [r3, #0]
 800d15a:	187b      	adds	r3, r7, r1
 800d15c:	3201      	adds	r2, #1
 800d15e:	701a      	strb	r2, [r3, #0]
 800d160:	230e      	movs	r3, #14
 800d162:	18fa      	adds	r2, r7, r3
 800d164:	1cfb      	adds	r3, r7, #3
 800d166:	7812      	ldrb	r2, [r2, #0]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d3c0      	bcc.n	800d0f0 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800d16e:	230f      	movs	r3, #15
 800d170:	18fb      	adds	r3, r7, r3
 800d172:	781b      	ldrb	r3, [r3, #0]
}
 800d174:	0018      	movs	r0, r3
 800d176:	46bd      	mov	sp, r7
 800d178:	b004      	add	sp, #16
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800d186:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b0 <HIDS_Init+0x34>)
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800d18c:	4b09      	ldr	r3, [pc, #36]	@ (800d1b4 <HIDS_Init+0x38>)
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800d192:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <HIDS_Init+0x3c>)
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	0018      	movs	r0, r3
 800d198:	f000 f8da 	bl	800d350 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800d19c:	4b07      	ldr	r3, [pc, #28]	@ (800d1bc <HIDS_Init+0x40>)
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	0018      	movs	r0, r3
 800d1a2:	f000 f82b 	bl	800d1fc <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800d1a6:	46c0      	nop			@ (mov r8, r8)
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	b002      	add	sp, #8
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	46c0      	nop			@ (mov r8, r8)
 800d1b0:	200024e4 	.word	0x200024e4
 800d1b4:	200024e8 	.word	0x200024e8
 800d1b8:	200000d2 	.word	0x200000d2
 800d1bc:	200000d1 	.word	0x200000d1

0800d1c0 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800d1c4:	f7ff fef2 	bl	800cfac <GetCurrentHalTicks>
 800d1c8:	0002      	movs	r2, r0
 800d1ca:	4b08      	ldr	r3, [pc, #32]	@ (800d1ec <HIDS_StartMeasurement+0x2c>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	18d2      	adds	r2, r2, r3
 800d1d0:	4b07      	ldr	r3, [pc, #28]	@ (800d1f0 <HIDS_StartMeasurement+0x30>)
 800d1d2:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800d1d4:	4b07      	ldr	r3, [pc, #28]	@ (800d1f4 <HIDS_StartMeasurement+0x34>)
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	0019      	movs	r1, r3
 800d1da:	2044      	movs	r0, #68	@ 0x44
 800d1dc:	f7ff ff56 	bl	800d08c <WriteRegister>
  MeasurementDone = false;
 800d1e0:	4b05      	ldr	r3, [pc, #20]	@ (800d1f8 <HIDS_StartMeasurement+0x38>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	701a      	strb	r2, [r3, #0]
}
 800d1e6:	46c0      	nop			@ (mov r8, r8)
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	200000d8 	.word	0x200000d8
 800d1f0:	200000d4 	.word	0x200000d4
 800d1f4:	200000d2 	.word	0x200000d2
 800d1f8:	200024fa 	.word	0x200024fa

0800d1fc <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
 800d202:	0002      	movs	r2, r0
 800d204:	1dfb      	adds	r3, r7, #7
 800d206:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800d208:	4b03      	ldr	r3, [pc, #12]	@ (800d218 <HIDS_SetHeaterMode+0x1c>)
 800d20a:	1dfa      	adds	r2, r7, #7
 800d20c:	7812      	ldrb	r2, [r2, #0]
 800d20e:	701a      	strb	r2, [r3, #0]
}
 800d210:	46c0      	nop			@ (mov r8, r8)
 800d212:	46bd      	mov	sp, r7
 800d214:	b002      	add	sp, #8
 800d216:	bd80      	pop	{r7, pc}
 800d218:	200000d1 	.word	0x200000d1

0800d21c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800d21c:	b590      	push	{r4, r7, lr}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	781a      	ldrb	r2, [r3, #0]
 800d228:	210c      	movs	r1, #12
 800d22a:	187b      	adds	r3, r7, r1
 800d22c:	701a      	strb	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	785a      	ldrb	r2, [r3, #1]
 800d232:	187b      	adds	r3, r7, r1
 800d234:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800d236:	240f      	movs	r4, #15
 800d238:	193b      	adds	r3, r7, r4
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	7892      	ldrb	r2, [r2, #2]
 800d23e:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800d240:	187b      	adds	r3, r7, r1
 800d242:	2102      	movs	r1, #2
 800d244:	0018      	movs	r0, r3
 800d246:	f7ff ff43 	bl	800d0d0 <CalculateCRC>
 800d24a:	0003      	movs	r3, r0
 800d24c:	001a      	movs	r2, r3
 800d24e:	193b      	adds	r3, r7, r4
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	4293      	cmp	r3, r2
 800d254:	d007      	beq.n	800d266 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800d256:	4a1a      	ldr	r2, [pc, #104]	@ (800d2c0 <CheckCRC+0xa4>)
 800d258:	4b1a      	ldr	r3, [pc, #104]	@ (800d2c4 <CheckCRC+0xa8>)
 800d25a:	0019      	movs	r1, r3
 800d25c:	2001      	movs	r0, #1
 800d25e:	f7ff fe2b 	bl	800ceb8 <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800d262:	2300      	movs	r3, #0
 800d264:	e027      	b.n	800d2b6 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	78da      	ldrb	r2, [r3, #3]
 800d26a:	2108      	movs	r1, #8
 800d26c:	187b      	adds	r3, r7, r1
 800d26e:	701a      	strb	r2, [r3, #0]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	791a      	ldrb	r2, [r3, #4]
 800d274:	187b      	adds	r3, r7, r1
 800d276:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800d278:	240e      	movs	r4, #14
 800d27a:	193b      	adds	r3, r7, r4
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	7952      	ldrb	r2, [r2, #5]
 800d280:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800d282:	187b      	adds	r3, r7, r1
 800d284:	2102      	movs	r1, #2
 800d286:	0018      	movs	r0, r3
 800d288:	f7ff ff22 	bl	800d0d0 <CalculateCRC>
 800d28c:	0003      	movs	r3, r0
 800d28e:	001a      	movs	r2, r3
 800d290:	193b      	adds	r3, r7, r4
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	4293      	cmp	r3, r2
 800d296:	d00d      	beq.n	800d2b4 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800d298:	4a0b      	ldr	r2, [pc, #44]	@ (800d2c8 <CheckCRC+0xac>)
 800d29a:	4b0a      	ldr	r3, [pc, #40]	@ (800d2c4 <CheckCRC+0xa8>)
 800d29c:	0019      	movs	r1, r3
 800d29e:	2001      	movs	r0, #1
 800d2a0:	f7ff fe0a 	bl	800ceb8 <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800d2a4:	4a09      	ldr	r2, [pc, #36]	@ (800d2cc <CheckCRC+0xb0>)
 800d2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d0 <CheckCRC+0xb4>)
 800d2a8:	2170      	movs	r1, #112	@ 0x70
 800d2aa:	0018      	movs	r0, r3
 800d2ac:	f7ff feba 	bl	800d024 <errorHandler>
		return false;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	e000      	b.n	800d2b6 <CheckCRC+0x9a>
	}
	return true;
 800d2b4:	2301      	movs	r3, #1
}
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	b005      	add	sp, #20
 800d2bc:	bd90      	pop	{r4, r7, pc}
 800d2be:	46c0      	nop			@ (mov r8, r8)
 800d2c0:	08022e6c 	.word	0x08022e6c
 800d2c4:	08022e94 	.word	0x08022e94
 800d2c8:	08022e98 	.word	0x08022e98
 800d2cc:	08022ec4 	.word	0x08022ec4
 800d2d0:	08023390 	.word	0x08023390

0800d2d4 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800d2da:	1dbb      	adds	r3, r7, #6
 800d2dc:	2289      	movs	r2, #137	@ 0x89
 800d2de:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800d2e0:	1dbb      	adds	r3, r7, #6
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	0019      	movs	r1, r3
 800d2e6:	2044      	movs	r0, #68	@ 0x44
 800d2e8:	f7ff fed0 	bl	800d08c <WriteRegister>
	HAL_Delay(30);
 800d2ec:	201e      	movs	r0, #30
 800d2ee:	f000 f98b 	bl	800d608 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800d2f2:	4b14      	ldr	r3, [pc, #80]	@ (800d344 <HIDS_DeviceConnected+0x70>)
 800d2f4:	2206      	movs	r2, #6
 800d2f6:	0019      	movs	r1, r3
 800d2f8:	2044      	movs	r0, #68	@ 0x44
 800d2fa:	f7ff fea5 	bl	800d048 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d2fe:	1dfb      	adds	r3, r7, #7
 800d300:	2200      	movs	r2, #0
 800d302:	701a      	strb	r2, [r3, #0]
 800d304:	e011      	b.n	800d32a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800d306:	1dfb      	adds	r3, r7, #7
 800d308:	7818      	ldrb	r0, [r3, #0]
 800d30a:	1dfb      	adds	r3, r7, #7
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	4a0d      	ldr	r2, [pc, #52]	@ (800d344 <HIDS_DeviceConnected+0x70>)
 800d310:	5cd3      	ldrb	r3, [r2, r3]
 800d312:	4a0d      	ldr	r2, [pc, #52]	@ (800d348 <HIDS_DeviceConnected+0x74>)
 800d314:	490d      	ldr	r1, [pc, #52]	@ (800d34c <HIDS_DeviceConnected+0x78>)
 800d316:	9300      	str	r3, [sp, #0]
 800d318:	0003      	movs	r3, r0
 800d31a:	2002      	movs	r0, #2
 800d31c:	f7ff fdcc 	bl	800ceb8 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d320:	1dfb      	adds	r3, r7, #7
 800d322:	781a      	ldrb	r2, [r3, #0]
 800d324:	1dfb      	adds	r3, r7, #7
 800d326:	3201      	adds	r2, #1
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	1dfb      	adds	r3, r7, #7
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b05      	cmp	r3, #5
 800d330:	d9e9      	bls.n	800d306 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800d332:	4b04      	ldr	r3, [pc, #16]	@ (800d344 <HIDS_DeviceConnected+0x70>)
 800d334:	0018      	movs	r0, r3
 800d336:	f7ff ff71 	bl	800d21c <CheckCRC>
 800d33a:	0003      	movs	r3, r0
}
 800d33c:	0018      	movs	r0, r3
 800d33e:	46bd      	mov	sp, r7
 800d340:	b002      	add	sp, #8
 800d342:	bd80      	pop	{r7, pc}
 800d344:	200024ec 	.word	0x200024ec
 800d348:	08022edc 	.word	0x08022edc
 800d34c:	08022e68 	.word	0x08022e68

0800d350 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	0002      	movs	r2, r0
 800d358:	1dfb      	adds	r3, r7, #7
 800d35a:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800d35c:	4b03      	ldr	r3, [pc, #12]	@ (800d36c <HIDS_SetMeasurementMode+0x1c>)
 800d35e:	1dfa      	adds	r2, r7, #7
 800d360:	7812      	ldrb	r2, [r2, #0]
 800d362:	701a      	strb	r2, [r3, #0]
}
 800d364:	46c0      	nop			@ (mov r8, r8)
 800d366:	46bd      	mov	sp, r7
 800d368:	b002      	add	sp, #8
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	200000d2 	.word	0x200000d2

0800d370 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800d370:	b580      	push	{r7, lr}
 800d372:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800d374:	4b04      	ldr	r3, [pc, #16]	@ (800d388 <HIDS_MeasurementReady+0x18>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	0018      	movs	r0, r3
 800d37a:	f7ff fd47 	bl	800ce0c <TimestampIsReached>
 800d37e:	0003      	movs	r3, r0
}
 800d380:	0018      	movs	r0, r3
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	46c0      	nop			@ (mov r8, r8)
 800d388:	200000d4 	.word	0x200000d4

0800d38c <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800d38c:	b590      	push	{r4, r7, lr}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800d396:	4b49      	ldr	r3, [pc, #292]	@ (800d4bc <HIDS_GetMeasurementValues+0x130>)
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <HIDS_GetMeasurementValues+0x16>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	e087      	b.n	800d4b2 <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800d3a2:	f7ff ffe5 	bl	800d370 <HIDS_MeasurementReady>
 800d3a6:	0003      	movs	r3, r0
 800d3a8:	001a      	movs	r2, r3
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	4053      	eors	r3, r2
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d001      	beq.n	800d3b8 <HIDS_GetMeasurementValues+0x2c>
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	e07c      	b.n	800d4b2 <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800d3b8:	2316      	movs	r3, #22
 800d3ba:	18fc      	adds	r4, r7, r3
 800d3bc:	4b40      	ldr	r3, [pc, #256]	@ (800d4c0 <HIDS_GetMeasurementValues+0x134>)
 800d3be:	2206      	movs	r2, #6
 800d3c0:	0019      	movs	r1, r3
 800d3c2:	2044      	movs	r0, #68	@ 0x44
 800d3c4:	f7ff fe40 	bl	800d048 <ReadRegister>
 800d3c8:	0003      	movs	r3, r0
 800d3ca:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800d3cc:	4b3c      	ldr	r3, [pc, #240]	@ (800d4c0 <HIDS_GetMeasurementValues+0x134>)
 800d3ce:	0018      	movs	r0, r3
 800d3d0:	f7ff ff24 	bl	800d21c <CheckCRC>
 800d3d4:	0003      	movs	r3, r0
 800d3d6:	001a      	movs	r2, r3
 800d3d8:	2301      	movs	r3, #1
 800d3da:	4053      	eors	r3, r2
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d011      	beq.n	800d406 <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800d3e2:	2317      	movs	r3, #23
 800d3e4:	18fb      	adds	r3, r7, r3
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e005      	b.n	800d3f8 <HIDS_GetMeasurementValues+0x6c>
 800d3ec:	2117      	movs	r1, #23
 800d3ee:	187b      	adds	r3, r7, r1
 800d3f0:	781a      	ldrb	r2, [r3, #0]
 800d3f2:	187b      	adds	r3, r7, r1
 800d3f4:	3201      	adds	r2, #1
 800d3f6:	701a      	strb	r2, [r3, #0]
 800d3f8:	2317      	movs	r3, #23
 800d3fa:	18fb      	adds	r3, r7, r3
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	2b05      	cmp	r3, #5
 800d400:	d9f4      	bls.n	800d3ec <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800d402:	2300      	movs	r3, #0
 800d404:	e055      	b.n	800d4b2 <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800d406:	4b2e      	ldr	r3, [pc, #184]	@ (800d4c0 <HIDS_GetMeasurementValues+0x134>)
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	021b      	lsls	r3, r3, #8
 800d40c:	4a2c      	ldr	r2, [pc, #176]	@ (800d4c0 <HIDS_GetMeasurementValues+0x134>)
 800d40e:	7852      	ldrb	r2, [r2, #1]
 800d410:	4313      	orrs	r3, r2
 800d412:	22af      	movs	r2, #175	@ 0xaf
 800d414:	4353      	muls	r3, r2
 800d416:	0018      	movs	r0, r3
 800d418:	f7f5 ffd2 	bl	80033c0 <__aeabi_i2d>
 800d41c:	2200      	movs	r2, #0
 800d41e:	4b29      	ldr	r3, [pc, #164]	@ (800d4c4 <HIDS_GetMeasurementValues+0x138>)
 800d420:	f7f4 fcc8 	bl	8001db4 <__aeabi_ddiv>
 800d424:	0002      	movs	r2, r0
 800d426:	000b      	movs	r3, r1
 800d428:	0010      	movs	r0, r2
 800d42a:	0019      	movs	r1, r3
 800d42c:	f7f6 f862 	bl	80034f4 <__aeabi_d2f>
 800d430:	1c03      	adds	r3, r0, #0
 800d432:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800d434:	4924      	ldr	r1, [pc, #144]	@ (800d4c8 <HIDS_GetMeasurementValues+0x13c>)
 800d436:	6938      	ldr	r0, [r7, #16]
 800d438:	f7f3 fef0 	bl	800121c <__aeabi_fsub>
 800d43c:	1c03      	adds	r3, r0, #0
 800d43e:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800d440:	4b1f      	ldr	r3, [pc, #124]	@ (800d4c0 <HIDS_GetMeasurementValues+0x134>)
 800d442:	78db      	ldrb	r3, [r3, #3]
 800d444:	021b      	lsls	r3, r3, #8
 800d446:	4a1e      	ldr	r2, [pc, #120]	@ (800d4c0 <HIDS_GetMeasurementValues+0x134>)
 800d448:	7912      	ldrb	r2, [r2, #4]
 800d44a:	431a      	orrs	r2, r3
 800d44c:	0013      	movs	r3, r2
 800d44e:	015b      	lsls	r3, r3, #5
 800d450:	1a9b      	subs	r3, r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	189b      	adds	r3, r3, r2
 800d456:	0018      	movs	r0, r3
 800d458:	f7f5 ffb2 	bl	80033c0 <__aeabi_i2d>
 800d45c:	2200      	movs	r2, #0
 800d45e:	4b19      	ldr	r3, [pc, #100]	@ (800d4c4 <HIDS_GetMeasurementValues+0x138>)
 800d460:	f7f4 fca8 	bl	8001db4 <__aeabi_ddiv>
 800d464:	0002      	movs	r2, r0
 800d466:	000b      	movs	r3, r1
 800d468:	0010      	movs	r0, r2
 800d46a:	0019      	movs	r1, r3
 800d46c:	f7f6 f842 	bl	80034f4 <__aeabi_d2f>
 800d470:	1c03      	adds	r3, r0, #0
 800d472:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800d474:	4915      	ldr	r1, [pc, #84]	@ (800d4cc <HIDS_GetMeasurementValues+0x140>)
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f7f3 fed0 	bl	800121c <__aeabi_fsub>
 800d47c:	1c03      	adds	r3, r0, #0
 800d47e:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	68fa      	ldr	r2, [r7, #12]
 800d48a:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	0011      	movs	r1, r2
 800d492:	0018      	movs	r0, r3
 800d494:	f7fd fcf8 	bl	800ae88 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	1c11      	adds	r1, r2, #0
 800d49e:	1c18      	adds	r0, r3, #0
 800d4a0:	f7f6 fa06 	bl	80038b0 <ESP_GetHT>

   measurements = 0;
 800d4a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d0 <HIDS_GetMeasurementValues+0x144>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800d4aa:	4b04      	ldr	r3, [pc, #16]	@ (800d4bc <HIDS_GetMeasurementValues+0x130>)
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800d4b0:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800d4b2:	0018      	movs	r0, r3
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	b007      	add	sp, #28
 800d4b8:	bd90      	pop	{r4, r7, pc}
 800d4ba:	46c0      	nop			@ (mov r8, r8)
 800d4bc:	200024fa 	.word	0x200024fa
 800d4c0:	200024f4 	.word	0x200024f4
 800d4c4:	40efffe0 	.word	0x40efffe0
 800d4c8:	42340000 	.word	0x42340000
 800d4cc:	40c00000 	.word	0x40c00000
 800d4d0:	200024fc 	.word	0x200024fc

0800d4d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800d4d4:	480d      	ldr	r0, [pc, #52]	@ (800d50c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800d4d6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800d4d8:	f7ff f8ee 	bl	800c6b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800d4dc:	480c      	ldr	r0, [pc, #48]	@ (800d510 <LoopForever+0x6>)
  ldr r1, =_edata
 800d4de:	490d      	ldr	r1, [pc, #52]	@ (800d514 <LoopForever+0xa>)
  ldr r2, =_sidata
 800d4e0:	4a0d      	ldr	r2, [pc, #52]	@ (800d518 <LoopForever+0xe>)
  movs r3, #0
 800d4e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800d4e4:	e002      	b.n	800d4ec <LoopCopyDataInit>

0800d4e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800d4e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d4e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d4ea:	3304      	adds	r3, #4

0800d4ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d4ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d4ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800d4f0:	d3f9      	bcc.n	800d4e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800d4f2:	4a0a      	ldr	r2, [pc, #40]	@ (800d51c <LoopForever+0x12>)
  ldr r4, =_ebss
 800d4f4:	4c0a      	ldr	r4, [pc, #40]	@ (800d520 <LoopForever+0x16>)
  movs r3, #0
 800d4f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800d4f8:	e001      	b.n	800d4fe <LoopFillZerobss>

0800d4fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800d4fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800d4fc:	3204      	adds	r2, #4

0800d4fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800d4fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800d500:	d3fb      	bcc.n	800d4fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800d502:	f011 f9b5 	bl	801e870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d506:	f7f9 fead 	bl	8007264 <main>

0800d50a <LoopForever>:

LoopForever:
    b LoopForever
 800d50a:	e7fe      	b.n	800d50a <LoopForever>
   ldr   r0, =_estack
 800d50c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800d510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800d514:	20000424 	.word	0x20000424
  ldr r2, =_sidata
 800d518:	08023d10 	.word	0x08023d10
  ldr r2, =_sbss
 800d51c:	20000424 	.word	0x20000424
  ldr r4, =_ebss
 800d520:	20003904 	.word	0x20003904

0800d524 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d524:	e7fe      	b.n	800d524 <ADC1_COMP_IRQHandler>
	...

0800d528 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d52e:	1dfb      	adds	r3, r7, #7
 800d530:	2200      	movs	r2, #0
 800d532:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800d534:	4b0b      	ldr	r3, [pc, #44]	@ (800d564 <HAL_Init+0x3c>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	4b0a      	ldr	r3, [pc, #40]	@ (800d564 <HAL_Init+0x3c>)
 800d53a:	2140      	movs	r1, #64	@ 0x40
 800d53c:	430a      	orrs	r2, r1
 800d53e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d540:	2003      	movs	r0, #3
 800d542:	f000 f811 	bl	800d568 <HAL_InitTick>
 800d546:	1e03      	subs	r3, r0, #0
 800d548:	d003      	beq.n	800d552 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800d54a:	1dfb      	adds	r3, r7, #7
 800d54c:	2201      	movs	r2, #1
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e001      	b.n	800d556 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d552:	f7fe ff7b 	bl	800c44c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d556:	1dfb      	adds	r3, r7, #7
 800d558:	781b      	ldrb	r3, [r3, #0]
}
 800d55a:	0018      	movs	r0, r3
 800d55c:	46bd      	mov	sp, r7
 800d55e:	b002      	add	sp, #8
 800d560:	bd80      	pop	{r7, pc}
 800d562:	46c0      	nop			@ (mov r8, r8)
 800d564:	40022000 	.word	0x40022000

0800d568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d568:	b590      	push	{r4, r7, lr}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d570:	4b14      	ldr	r3, [pc, #80]	@ (800d5c4 <HAL_InitTick+0x5c>)
 800d572:	681c      	ldr	r4, [r3, #0]
 800d574:	4b14      	ldr	r3, [pc, #80]	@ (800d5c8 <HAL_InitTick+0x60>)
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	0019      	movs	r1, r3
 800d57a:	23fa      	movs	r3, #250	@ 0xfa
 800d57c:	0098      	lsls	r0, r3, #2
 800d57e:	f7f2 fe11 	bl	80001a4 <__udivsi3>
 800d582:	0003      	movs	r3, r0
 800d584:	0019      	movs	r1, r3
 800d586:	0020      	movs	r0, r4
 800d588:	f7f2 fe0c 	bl	80001a4 <__udivsi3>
 800d58c:	0003      	movs	r3, r0
 800d58e:	0018      	movs	r0, r3
 800d590:	f000 fccb 	bl	800df2a <HAL_SYSTICK_Config>
 800d594:	1e03      	subs	r3, r0, #0
 800d596:	d001      	beq.n	800d59c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	e00f      	b.n	800d5bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2b03      	cmp	r3, #3
 800d5a0:	d80b      	bhi.n	800d5ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d5a2:	6879      	ldr	r1, [r7, #4]
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	425b      	negs	r3, r3
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f000 fc98 	bl	800dee0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d5b0:	4b06      	ldr	r3, [pc, #24]	@ (800d5cc <HAL_InitTick+0x64>)
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	e000      	b.n	800d5bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
}
 800d5bc:	0018      	movs	r0, r3
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	b003      	add	sp, #12
 800d5c2:	bd90      	pop	{r4, r7, pc}
 800d5c4:	200000cc 	.word	0x200000cc
 800d5c8:	200000e0 	.word	0x200000e0
 800d5cc:	200000dc 	.word	0x200000dc

0800d5d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d5d4:	4b05      	ldr	r3, [pc, #20]	@ (800d5ec <HAL_IncTick+0x1c>)
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	001a      	movs	r2, r3
 800d5da:	4b05      	ldr	r3, [pc, #20]	@ (800d5f0 <HAL_IncTick+0x20>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	18d2      	adds	r2, r2, r3
 800d5e0:	4b03      	ldr	r3, [pc, #12]	@ (800d5f0 <HAL_IncTick+0x20>)
 800d5e2:	601a      	str	r2, [r3, #0]
}
 800d5e4:	46c0      	nop			@ (mov r8, r8)
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	46c0      	nop			@ (mov r8, r8)
 800d5ec:	200000e0 	.word	0x200000e0
 800d5f0:	20002500 	.word	0x20002500

0800d5f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	af00      	add	r7, sp, #0
  return uwTick;
 800d5f8:	4b02      	ldr	r3, [pc, #8]	@ (800d604 <HAL_GetTick+0x10>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
}
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	46c0      	nop			@ (mov r8, r8)
 800d604:	20002500 	.word	0x20002500

0800d608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d610:	f7ff fff0 	bl	800d5f4 <HAL_GetTick>
 800d614:	0003      	movs	r3, r0
 800d616:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	3301      	adds	r3, #1
 800d620:	d005      	beq.n	800d62e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d622:	4b0a      	ldr	r3, [pc, #40]	@ (800d64c <HAL_Delay+0x44>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	001a      	movs	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	189b      	adds	r3, r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d62e:	46c0      	nop			@ (mov r8, r8)
 800d630:	f7ff ffe0 	bl	800d5f4 <HAL_GetTick>
 800d634:	0002      	movs	r2, r0
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	68fa      	ldr	r2, [r7, #12]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d8f7      	bhi.n	800d630 <HAL_Delay+0x28>
  {
  }
}
 800d640:	46c0      	nop			@ (mov r8, r8)
 800d642:	46c0      	nop			@ (mov r8, r8)
 800d644:	46bd      	mov	sp, r7
 800d646:	b004      	add	sp, #16
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	46c0      	nop			@ (mov r8, r8)
 800d64c:	200000e0 	.word	0x200000e0

0800d650 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800d654:	4b02      	ldr	r3, [pc, #8]	@ (800d660 <HAL_GetUIDw0+0x10>)
 800d656:	681b      	ldr	r3, [r3, #0]
}
 800d658:	0018      	movs	r0, r3
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	46c0      	nop			@ (mov r8, r8)
 800d660:	1ff80050 	.word	0x1ff80050

0800d664 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800d668:	4b02      	ldr	r3, [pc, #8]	@ (800d674 <HAL_GetUIDw1+0x10>)
 800d66a:	681b      	ldr	r3, [r3, #0]
}
 800d66c:	0018      	movs	r0, r3
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	46c0      	nop			@ (mov r8, r8)
 800d674:	1ff80054 	.word	0x1ff80054

0800d678 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800d67c:	4b02      	ldr	r3, [pc, #8]	@ (800d688 <HAL_GetUIDw2+0x10>)
 800d67e:	681b      	ldr	r3, [r3, #0]
}
 800d680:	0018      	movs	r0, r3
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	46c0      	nop			@ (mov r8, r8)
 800d688:	1ff80064 	.word	0x1ff80064

0800d68c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e159      	b.n	800d952 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10a      	bne.n	800d6bc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2250      	movs	r2, #80	@ 0x50
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	0018      	movs	r0, r3
 800d6b8:	f7f9 f816 	bl	80066e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6c0:	2210      	movs	r2, #16
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	2b10      	cmp	r3, #16
 800d6c6:	d005      	beq.n	800d6d4 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	2204      	movs	r2, #4
 800d6d0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800d6d2:	d00b      	beq.n	800d6ec <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6d8:	2210      	movs	r2, #16
 800d6da:	431a      	orrs	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2250      	movs	r2, #80	@ 0x50
 800d6e4:	2100      	movs	r1, #0
 800d6e6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e132      	b.n	800d952 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6f0:	4a9a      	ldr	r2, [pc, #616]	@ (800d95c <HAL_ADC_Init+0x2d0>)
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	431a      	orrs	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	2203      	movs	r2, #3
 800d704:	4013      	ands	r3, r2
 800d706:	2b01      	cmp	r3, #1
 800d708:	d108      	bne.n	800d71c <HAL_ADC_Init+0x90>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	2201      	movs	r2, #1
 800d712:	4013      	ands	r3, r2
 800d714:	2b01      	cmp	r3, #1
 800d716:	d101      	bne.n	800d71c <HAL_ADC_Init+0x90>
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <HAL_ADC_Init+0x92>
 800d71c:	2300      	movs	r3, #0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d149      	bne.n	800d7b6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	685a      	ldr	r2, [r3, #4]
 800d726:	23c0      	movs	r3, #192	@ 0xc0
 800d728:	061b      	lsls	r3, r3, #24
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d00b      	beq.n	800d746 <HAL_ADC_Init+0xba>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	685a      	ldr	r2, [r3, #4]
 800d732:	2380      	movs	r3, #128	@ 0x80
 800d734:	05db      	lsls	r3, r3, #23
 800d736:	429a      	cmp	r2, r3
 800d738:	d005      	beq.n	800d746 <HAL_ADC_Init+0xba>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	685a      	ldr	r2, [r3, #4]
 800d73e:	2380      	movs	r3, #128	@ 0x80
 800d740:	061b      	lsls	r3, r3, #24
 800d742:	429a      	cmp	r2, r3
 800d744:	d111      	bne.n	800d76a <HAL_ADC_Init+0xde>
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	691a      	ldr	r2, [r3, #16]
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	0092      	lsls	r2, r2, #2
 800d752:	0892      	lsrs	r2, r2, #2
 800d754:	611a      	str	r2, [r3, #16]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6919      	ldr	r1, [r3, #16]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685a      	ldr	r2, [r3, #4]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	430a      	orrs	r2, r1
 800d766:	611a      	str	r2, [r3, #16]
 800d768:	e014      	b.n	800d794 <HAL_ADC_Init+0x108>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	691a      	ldr	r2, [r3, #16]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	0092      	lsls	r2, r2, #2
 800d776:	0892      	lsrs	r2, r2, #2
 800d778:	611a      	str	r2, [r3, #16]
 800d77a:	4b79      	ldr	r3, [pc, #484]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	4b78      	ldr	r3, [pc, #480]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d780:	4978      	ldr	r1, [pc, #480]	@ (800d964 <HAL_ADC_Init+0x2d8>)
 800d782:	400a      	ands	r2, r1
 800d784:	601a      	str	r2, [r3, #0]
 800d786:	4b76      	ldr	r3, [pc, #472]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d788:	6819      	ldr	r1, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685a      	ldr	r2, [r3, #4]
 800d78e:	4b74      	ldr	r3, [pc, #464]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d790:	430a      	orrs	r2, r1
 800d792:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68da      	ldr	r2, [r3, #12]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2118      	movs	r1, #24
 800d7a0:	438a      	bics	r2, r1
 800d7a2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68d9      	ldr	r1, [r3, #12]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	689a      	ldr	r2, [r3, #8]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	430a      	orrs	r2, r1
 800d7b4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800d7b6:	4b6a      	ldr	r3, [pc, #424]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	4b69      	ldr	r3, [pc, #420]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d7bc:	496a      	ldr	r1, [pc, #424]	@ (800d968 <HAL_ADC_Init+0x2dc>)
 800d7be:	400a      	ands	r2, r1
 800d7c0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800d7c2:	4b67      	ldr	r3, [pc, #412]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d7c4:	6819      	ldr	r1, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7ca:	065a      	lsls	r2, r3, #25
 800d7cc:	4b64      	ldr	r3, [pc, #400]	@ (800d960 <HAL_ADC_Init+0x2d4>)
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	689a      	ldr	r2, [r3, #8]
 800d7d8:	2380      	movs	r3, #128	@ 0x80
 800d7da:	055b      	lsls	r3, r3, #21
 800d7dc:	4013      	ands	r3, r2
 800d7de:	d108      	bne.n	800d7f2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	689a      	ldr	r2, [r3, #8]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2180      	movs	r1, #128	@ 0x80
 800d7ec:	0549      	lsls	r1, r1, #21
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	68da      	ldr	r2, [r3, #12]
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	495b      	ldr	r1, [pc, #364]	@ (800d96c <HAL_ADC_Init+0x2e0>)
 800d7fe:	400a      	ands	r2, r1
 800d800:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	68d9      	ldr	r1, [r3, #12]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	691b      	ldr	r3, [r3, #16]
 800d810:	2b02      	cmp	r3, #2
 800d812:	d101      	bne.n	800d818 <HAL_ADC_Init+0x18c>
 800d814:	2304      	movs	r3, #4
 800d816:	e000      	b.n	800d81a <HAL_ADC_Init+0x18e>
 800d818:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d81a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2020      	movs	r0, #32
 800d820:	5c1b      	ldrb	r3, [r3, r0]
 800d822:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800d824:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	202c      	movs	r0, #44	@ 0x2c
 800d82a:	5c1b      	ldrb	r3, [r3, r0]
 800d82c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800d82e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800d834:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800d83c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	69db      	ldr	r3, [r3, #28]
 800d842:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800d844:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	430a      	orrs	r2, r1
 800d84c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d852:	23c2      	movs	r3, #194	@ 0xc2
 800d854:	33ff      	adds	r3, #255	@ 0xff
 800d856:	429a      	cmp	r2, r3
 800d858:	d00b      	beq.n	800d872 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68d9      	ldr	r1, [r3, #12]
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	430a      	orrs	r2, r1
 800d870:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2221      	movs	r2, #33	@ 0x21
 800d876:	5c9b      	ldrb	r3, [r3, r2]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d11a      	bne.n	800d8b2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2220      	movs	r2, #32
 800d880:	5c9b      	ldrb	r3, [r3, r2]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d109      	bne.n	800d89a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	68da      	ldr	r2, [r3, #12]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2180      	movs	r1, #128	@ 0x80
 800d892:	0249      	lsls	r1, r1, #9
 800d894:	430a      	orrs	r2, r1
 800d896:	60da      	str	r2, [r3, #12]
 800d898:	e00b      	b.n	800d8b2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d89e:	2220      	movs	r2, #32
 800d8a0:	431a      	orrs	r2, r3
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d11f      	bne.n	800d8fa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	691a      	ldr	r2, [r3, #16]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	492a      	ldr	r1, [pc, #168]	@ (800d970 <HAL_ADC_Init+0x2e4>)
 800d8c6:	400a      	ands	r2, r1
 800d8c8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6919      	ldr	r1, [r3, #16]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d8d8:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800d8de:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	430a      	orrs	r2, r1
 800d8e6:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	691a      	ldr	r2, [r3, #16]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2101      	movs	r1, #1
 800d8f4:	430a      	orrs	r2, r1
 800d8f6:	611a      	str	r2, [r3, #16]
 800d8f8:	e00e      	b.n	800d918 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	2201      	movs	r2, #1
 800d902:	4013      	ands	r3, r2
 800d904:	2b01      	cmp	r3, #1
 800d906:	d107      	bne.n	800d918 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	691a      	ldr	r2, [r3, #16]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2101      	movs	r1, #1
 800d914:	438a      	bics	r2, r1
 800d916:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	695a      	ldr	r2, [r3, #20]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	2107      	movs	r1, #7
 800d924:	438a      	bics	r2, r1
 800d926:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	6959      	ldr	r1, [r3, #20]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	430a      	orrs	r2, r1
 800d938:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d944:	2203      	movs	r2, #3
 800d946:	4393      	bics	r3, r2
 800d948:	2201      	movs	r2, #1
 800d94a:	431a      	orrs	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800d950:	2300      	movs	r3, #0
}
 800d952:	0018      	movs	r0, r3
 800d954:	46bd      	mov	sp, r7
 800d956:	b002      	add	sp, #8
 800d958:	bd80      	pop	{r7, pc}
 800d95a:	46c0      	nop			@ (mov r8, r8)
 800d95c:	fffffefd 	.word	0xfffffefd
 800d960:	40012708 	.word	0x40012708
 800d964:	ffc3ffff 	.word	0xffc3ffff
 800d968:	fdffffff 	.word	0xfdffffff
 800d96c:	fffe0219 	.word	0xfffe0219
 800d970:	fffffc03 	.word	0xfffffc03

0800d974 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800d974:	b590      	push	{r4, r7, lr}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d97c:	230f      	movs	r3, #15
 800d97e:	18fb      	adds	r3, r7, r3
 800d980:	2200      	movs	r2, #0
 800d982:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	2204      	movs	r2, #4
 800d98c:	4013      	ands	r3, r2
 800d98e:	d138      	bne.n	800da02 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2250      	movs	r2, #80	@ 0x50
 800d994:	5c9b      	ldrb	r3, [r3, r2]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d101      	bne.n	800d99e <HAL_ADC_Start+0x2a>
 800d99a:	2302      	movs	r3, #2
 800d99c:	e038      	b.n	800da10 <HAL_ADC_Start+0x9c>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2250      	movs	r2, #80	@ 0x50
 800d9a2:	2101      	movs	r1, #1
 800d9a4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	69db      	ldr	r3, [r3, #28]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d007      	beq.n	800d9be <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800d9ae:	230f      	movs	r3, #15
 800d9b0:	18fc      	adds	r4, r7, r3
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	0018      	movs	r0, r3
 800d9b6:	f000 f95f 	bl	800dc78 <ADC_Enable>
 800d9ba:	0003      	movs	r3, r0
 800d9bc:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800d9be:	230f      	movs	r3, #15
 800d9c0:	18fb      	adds	r3, r7, r3
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d120      	bne.n	800da0a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d9cc:	4a12      	ldr	r2, [pc, #72]	@ (800da18 <HAL_ADC_Start+0xa4>)
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	2280      	movs	r2, #128	@ 0x80
 800d9d2:	0052      	lsls	r2, r2, #1
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2250      	movs	r2, #80	@ 0x50
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	221c      	movs	r2, #28
 800d9ee:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	689a      	ldr	r2, [r3, #8]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2104      	movs	r1, #4
 800d9fc:	430a      	orrs	r2, r1
 800d9fe:	609a      	str	r2, [r3, #8]
 800da00:	e003      	b.n	800da0a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800da02:	230f      	movs	r3, #15
 800da04:	18fb      	adds	r3, r7, r3
 800da06:	2202      	movs	r2, #2
 800da08:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800da0a:	230f      	movs	r3, #15
 800da0c:	18fb      	adds	r3, r7, r3
 800da0e:	781b      	ldrb	r3, [r3, #0]
}
 800da10:	0018      	movs	r0, r3
 800da12:	46bd      	mov	sp, r7
 800da14:	b005      	add	sp, #20
 800da16:	bd90      	pop	{r4, r7, pc}
 800da18:	fffff0fe 	.word	0xfffff0fe

0800da1c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800da26:	2300      	movs	r3, #0
 800da28:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	2b08      	cmp	r3, #8
 800da34:	d102      	bne.n	800da3c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800da36:	2308      	movs	r3, #8
 800da38:	60fb      	str	r3, [r7, #12]
 800da3a:	e014      	b.n	800da66 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	2201      	movs	r2, #1
 800da44:	4013      	ands	r3, r2
 800da46:	2b01      	cmp	r3, #1
 800da48:	d10b      	bne.n	800da62 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da4e:	2220      	movs	r2, #32
 800da50:	431a      	orrs	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2250      	movs	r2, #80	@ 0x50
 800da5a:	2100      	movs	r1, #0
 800da5c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	e072      	b.n	800db48 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800da62:	230c      	movs	r3, #12
 800da64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800da66:	f7ff fdc5 	bl	800d5f4 <HAL_GetTick>
 800da6a:	0003      	movs	r3, r0
 800da6c:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800da6e:	e01f      	b.n	800dab0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	3301      	adds	r3, #1
 800da74:	d01c      	beq.n	800dab0 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d007      	beq.n	800da8c <HAL_ADC_PollForConversion+0x70>
 800da7c:	f7ff fdba 	bl	800d5f4 <HAL_GetTick>
 800da80:	0002      	movs	r2, r0
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d211      	bcs.n	800dab0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	4013      	ands	r3, r2
 800da96:	d10b      	bne.n	800dab0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da9c:	2204      	movs	r2, #4
 800da9e:	431a      	orrs	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2250      	movs	r2, #80	@ 0x50
 800daa8:	2100      	movs	r1, #0
 800daaa:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800daac:	2303      	movs	r3, #3
 800daae:	e04b      	b.n	800db48 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	68fa      	ldr	r2, [r7, #12]
 800dab8:	4013      	ands	r3, r2
 800daba:	d0d9      	beq.n	800da70 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dac0:	2280      	movs	r2, #128	@ 0x80
 800dac2:	0092      	lsls	r2, r2, #2
 800dac4:	431a      	orrs	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68da      	ldr	r2, [r3, #12]
 800dad0:	23c0      	movs	r3, #192	@ 0xc0
 800dad2:	011b      	lsls	r3, r3, #4
 800dad4:	4013      	ands	r3, r2
 800dad6:	d12e      	bne.n	800db36 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2220      	movs	r2, #32
 800dadc:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d129      	bne.n	800db36 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2208      	movs	r2, #8
 800daea:	4013      	ands	r3, r2
 800daec:	2b08      	cmp	r3, #8
 800daee:	d122      	bne.n	800db36 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	2204      	movs	r2, #4
 800daf8:	4013      	ands	r3, r2
 800dafa:	d110      	bne.n	800db1e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	685a      	ldr	r2, [r3, #4]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	210c      	movs	r1, #12
 800db08:	438a      	bics	r2, r1
 800db0a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db10:	4a0f      	ldr	r2, [pc, #60]	@ (800db50 <HAL_ADC_PollForConversion+0x134>)
 800db12:	4013      	ands	r3, r2
 800db14:	2201      	movs	r2, #1
 800db16:	431a      	orrs	r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	655a      	str	r2, [r3, #84]	@ 0x54
 800db1c:	e00b      	b.n	800db36 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db22:	2220      	movs	r2, #32
 800db24:	431a      	orrs	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db2e:	2201      	movs	r2, #1
 800db30:	431a      	orrs	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	699b      	ldr	r3, [r3, #24]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d103      	bne.n	800db46 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	220c      	movs	r2, #12
 800db44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db46:	2300      	movs	r3, #0
}
 800db48:	0018      	movs	r0, r3
 800db4a:	46bd      	mov	sp, r7
 800db4c:	b004      	add	sp, #16
 800db4e:	bd80      	pop	{r7, pc}
 800db50:	fffffefe 	.word	0xfffffefe

0800db54 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b082      	sub	sp, #8
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800db62:	0018      	movs	r0, r3
 800db64:	46bd      	mov	sp, r7
 800db66:	b002      	add	sp, #8
 800db68:	bd80      	pop	{r7, pc}
	...

0800db6c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2250      	movs	r2, #80	@ 0x50
 800db7a:	5c9b      	ldrb	r3, [r3, r2]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d101      	bne.n	800db84 <HAL_ADC_ConfigChannel+0x18>
 800db80:	2302      	movs	r3, #2
 800db82:	e06c      	b.n	800dc5e <HAL_ADC_ConfigChannel+0xf2>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2250      	movs	r2, #80	@ 0x50
 800db88:	2101      	movs	r1, #1
 800db8a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	689b      	ldr	r3, [r3, #8]
 800db92:	2204      	movs	r2, #4
 800db94:	4013      	ands	r3, r2
 800db96:	d00b      	beq.n	800dbb0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800db9c:	2220      	movs	r2, #32
 800db9e:	431a      	orrs	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2250      	movs	r2, #80	@ 0x50
 800dba8:	2100      	movs	r1, #0
 800dbaa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e056      	b.n	800dc5e <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	4a2c      	ldr	r2, [pc, #176]	@ (800dc68 <HAL_ADC_ConfigChannel+0xfc>)
 800dbb6:	4293      	cmp	r3, r2
 800dbb8:	d028      	beq.n	800dc0c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	035b      	lsls	r3, r3, #13
 800dbc6:	0b5a      	lsrs	r2, r3, #13
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	430a      	orrs	r2, r1
 800dbce:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	681a      	ldr	r2, [r3, #0]
 800dbd4:	2380      	movs	r3, #128	@ 0x80
 800dbd6:	02db      	lsls	r3, r3, #11
 800dbd8:	4013      	ands	r3, r2
 800dbda:	d009      	beq.n	800dbf0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800dbdc:	4b23      	ldr	r3, [pc, #140]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dbde:	681a      	ldr	r2, [r3, #0]
 800dbe0:	4b22      	ldr	r3, [pc, #136]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dbe2:	2180      	movs	r1, #128	@ 0x80
 800dbe4:	0409      	lsls	r1, r1, #16
 800dbe6:	430a      	orrs	r2, r1
 800dbe8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800dbea:	200a      	movs	r0, #10
 800dbec:	f000 f8ac 	bl	800dd48 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	2380      	movs	r3, #128	@ 0x80
 800dbf6:	029b      	lsls	r3, r3, #10
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	d02b      	beq.n	800dc54 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800dbfc:	4b1b      	ldr	r3, [pc, #108]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	4b1a      	ldr	r3, [pc, #104]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dc02:	2180      	movs	r1, #128	@ 0x80
 800dc04:	03c9      	lsls	r1, r1, #15
 800dc06:	430a      	orrs	r2, r1
 800dc08:	601a      	str	r2, [r3, #0]
 800dc0a:	e023      	b.n	800dc54 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	035b      	lsls	r3, r3, #13
 800dc18:	0b5b      	lsrs	r3, r3, #13
 800dc1a:	43d9      	mvns	r1, r3
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	400a      	ands	r2, r1
 800dc22:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	2380      	movs	r3, #128	@ 0x80
 800dc2a:	02db      	lsls	r3, r3, #11
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	d005      	beq.n	800dc3c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800dc30:	4b0e      	ldr	r3, [pc, #56]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	4b0d      	ldr	r3, [pc, #52]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dc36:	490e      	ldr	r1, [pc, #56]	@ (800dc70 <HAL_ADC_ConfigChannel+0x104>)
 800dc38:	400a      	ands	r2, r1
 800dc3a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	2380      	movs	r3, #128	@ 0x80
 800dc42:	029b      	lsls	r3, r3, #10
 800dc44:	4013      	ands	r3, r2
 800dc46:	d005      	beq.n	800dc54 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800dc48:	4b08      	ldr	r3, [pc, #32]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	4b07      	ldr	r3, [pc, #28]	@ (800dc6c <HAL_ADC_ConfigChannel+0x100>)
 800dc4e:	4909      	ldr	r1, [pc, #36]	@ (800dc74 <HAL_ADC_ConfigChannel+0x108>)
 800dc50:	400a      	ands	r2, r1
 800dc52:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2250      	movs	r2, #80	@ 0x50
 800dc58:	2100      	movs	r1, #0
 800dc5a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	0018      	movs	r0, r3
 800dc60:	46bd      	mov	sp, r7
 800dc62:	b002      	add	sp, #8
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	46c0      	nop			@ (mov r8, r8)
 800dc68:	00001001 	.word	0x00001001
 800dc6c:	40012708 	.word	0x40012708
 800dc70:	ff7fffff 	.word	0xff7fffff
 800dc74:	ffbfffff 	.word	0xffbfffff

0800dc78 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b084      	sub	sp, #16
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800dc80:	2300      	movs	r3, #0
 800dc82:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	2203      	movs	r2, #3
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d108      	bne.n	800dca4 <ADC_Enable+0x2c>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	4013      	ands	r3, r2
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d101      	bne.n	800dca4 <ADC_Enable+0x2c>
 800dca0:	2301      	movs	r3, #1
 800dca2:	e000      	b.n	800dca6 <ADC_Enable+0x2e>
 800dca4:	2300      	movs	r3, #0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d146      	bne.n	800dd38 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	4a24      	ldr	r2, [pc, #144]	@ (800dd44 <ADC_Enable+0xcc>)
 800dcb2:	4013      	ands	r3, r2
 800dcb4:	d00d      	beq.n	800dcd2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcba:	2210      	movs	r2, #16
 800dcbc:	431a      	orrs	r2, r3
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	431a      	orrs	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e033      	b.n	800dd3a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2101      	movs	r1, #1
 800dcde:	430a      	orrs	r2, r1
 800dce0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800dce2:	2001      	movs	r0, #1
 800dce4:	f000 f830 	bl	800dd48 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800dce8:	f7ff fc84 	bl	800d5f4 <HAL_GetTick>
 800dcec:	0003      	movs	r3, r0
 800dcee:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800dcf0:	e01b      	b.n	800dd2a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800dcf2:	f7ff fc7f 	bl	800d5f4 <HAL_GetTick>
 800dcf6:	0002      	movs	r2, r0
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	1ad3      	subs	r3, r2, r3
 800dcfc:	2b0a      	cmp	r3, #10
 800dcfe:	d914      	bls.n	800dd2a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2201      	movs	r2, #1
 800dd08:	4013      	ands	r3, r2
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	d00d      	beq.n	800dd2a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd12:	2210      	movs	r2, #16
 800dd14:	431a      	orrs	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd1e:	2201      	movs	r2, #1
 800dd20:	431a      	orrs	r2, r3
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e007      	b.n	800dd3a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2201      	movs	r2, #1
 800dd32:	4013      	ands	r3, r2
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d1dc      	bne.n	800dcf2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	0018      	movs	r0, r3
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	b004      	add	sp, #16
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	46c0      	nop			@ (mov r8, r8)
 800dd44:	80000017 	.word	0x80000017

0800dd48 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800dd50:	4b0b      	ldr	r3, [pc, #44]	@ (800dd80 <ADC_DelayMicroSecond+0x38>)
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	490b      	ldr	r1, [pc, #44]	@ (800dd84 <ADC_DelayMicroSecond+0x3c>)
 800dd56:	0018      	movs	r0, r3
 800dd58:	f7f2 fa24 	bl	80001a4 <__udivsi3>
 800dd5c:	0003      	movs	r3, r0
 800dd5e:	001a      	movs	r2, r3
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	4353      	muls	r3, r2
 800dd64:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800dd66:	e002      	b.n	800dd6e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1f9      	bne.n	800dd68 <ADC_DelayMicroSecond+0x20>
  }
}
 800dd74:	46c0      	nop			@ (mov r8, r8)
 800dd76:	46c0      	nop			@ (mov r8, r8)
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	b004      	add	sp, #16
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	46c0      	nop			@ (mov r8, r8)
 800dd80:	200000cc 	.word	0x200000cc
 800dd84:	000f4240 	.word	0x000f4240

0800dd88 <__NVIC_EnableIRQ>:
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	0002      	movs	r2, r0
 800dd90:	1dfb      	adds	r3, r7, #7
 800dd92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800dd94:	1dfb      	adds	r3, r7, #7
 800dd96:	781b      	ldrb	r3, [r3, #0]
 800dd98:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd9a:	d809      	bhi.n	800ddb0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd9c:	1dfb      	adds	r3, r7, #7
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	001a      	movs	r2, r3
 800dda2:	231f      	movs	r3, #31
 800dda4:	401a      	ands	r2, r3
 800dda6:	4b04      	ldr	r3, [pc, #16]	@ (800ddb8 <__NVIC_EnableIRQ+0x30>)
 800dda8:	2101      	movs	r1, #1
 800ddaa:	4091      	lsls	r1, r2
 800ddac:	000a      	movs	r2, r1
 800ddae:	601a      	str	r2, [r3, #0]
}
 800ddb0:	46c0      	nop			@ (mov r8, r8)
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	b002      	add	sp, #8
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	e000e100 	.word	0xe000e100

0800ddbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ddbc:	b590      	push	{r4, r7, lr}
 800ddbe:	b083      	sub	sp, #12
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	0002      	movs	r2, r0
 800ddc4:	6039      	str	r1, [r7, #0]
 800ddc6:	1dfb      	adds	r3, r7, #7
 800ddc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800ddca:	1dfb      	adds	r3, r7, #7
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddd0:	d828      	bhi.n	800de24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800ddd2:	4a2f      	ldr	r2, [pc, #188]	@ (800de90 <__NVIC_SetPriority+0xd4>)
 800ddd4:	1dfb      	adds	r3, r7, #7
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	b25b      	sxtb	r3, r3
 800ddda:	089b      	lsrs	r3, r3, #2
 800dddc:	33c0      	adds	r3, #192	@ 0xc0
 800ddde:	009b      	lsls	r3, r3, #2
 800dde0:	589b      	ldr	r3, [r3, r2]
 800dde2:	1dfa      	adds	r2, r7, #7
 800dde4:	7812      	ldrb	r2, [r2, #0]
 800dde6:	0011      	movs	r1, r2
 800dde8:	2203      	movs	r2, #3
 800ddea:	400a      	ands	r2, r1
 800ddec:	00d2      	lsls	r2, r2, #3
 800ddee:	21ff      	movs	r1, #255	@ 0xff
 800ddf0:	4091      	lsls	r1, r2
 800ddf2:	000a      	movs	r2, r1
 800ddf4:	43d2      	mvns	r2, r2
 800ddf6:	401a      	ands	r2, r3
 800ddf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	019b      	lsls	r3, r3, #6
 800ddfe:	22ff      	movs	r2, #255	@ 0xff
 800de00:	401a      	ands	r2, r3
 800de02:	1dfb      	adds	r3, r7, #7
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	0018      	movs	r0, r3
 800de08:	2303      	movs	r3, #3
 800de0a:	4003      	ands	r3, r0
 800de0c:	00db      	lsls	r3, r3, #3
 800de0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800de10:	481f      	ldr	r0, [pc, #124]	@ (800de90 <__NVIC_SetPriority+0xd4>)
 800de12:	1dfb      	adds	r3, r7, #7
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	b25b      	sxtb	r3, r3
 800de18:	089b      	lsrs	r3, r3, #2
 800de1a:	430a      	orrs	r2, r1
 800de1c:	33c0      	adds	r3, #192	@ 0xc0
 800de1e:	009b      	lsls	r3, r3, #2
 800de20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800de22:	e031      	b.n	800de88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800de24:	4a1b      	ldr	r2, [pc, #108]	@ (800de94 <__NVIC_SetPriority+0xd8>)
 800de26:	1dfb      	adds	r3, r7, #7
 800de28:	781b      	ldrb	r3, [r3, #0]
 800de2a:	0019      	movs	r1, r3
 800de2c:	230f      	movs	r3, #15
 800de2e:	400b      	ands	r3, r1
 800de30:	3b08      	subs	r3, #8
 800de32:	089b      	lsrs	r3, r3, #2
 800de34:	3306      	adds	r3, #6
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	18d3      	adds	r3, r2, r3
 800de3a:	3304      	adds	r3, #4
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	1dfa      	adds	r2, r7, #7
 800de40:	7812      	ldrb	r2, [r2, #0]
 800de42:	0011      	movs	r1, r2
 800de44:	2203      	movs	r2, #3
 800de46:	400a      	ands	r2, r1
 800de48:	00d2      	lsls	r2, r2, #3
 800de4a:	21ff      	movs	r1, #255	@ 0xff
 800de4c:	4091      	lsls	r1, r2
 800de4e:	000a      	movs	r2, r1
 800de50:	43d2      	mvns	r2, r2
 800de52:	401a      	ands	r2, r3
 800de54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	019b      	lsls	r3, r3, #6
 800de5a:	22ff      	movs	r2, #255	@ 0xff
 800de5c:	401a      	ands	r2, r3
 800de5e:	1dfb      	adds	r3, r7, #7
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	0018      	movs	r0, r3
 800de64:	2303      	movs	r3, #3
 800de66:	4003      	ands	r3, r0
 800de68:	00db      	lsls	r3, r3, #3
 800de6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800de6c:	4809      	ldr	r0, [pc, #36]	@ (800de94 <__NVIC_SetPriority+0xd8>)
 800de6e:	1dfb      	adds	r3, r7, #7
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	001c      	movs	r4, r3
 800de74:	230f      	movs	r3, #15
 800de76:	4023      	ands	r3, r4
 800de78:	3b08      	subs	r3, #8
 800de7a:	089b      	lsrs	r3, r3, #2
 800de7c:	430a      	orrs	r2, r1
 800de7e:	3306      	adds	r3, #6
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	18c3      	adds	r3, r0, r3
 800de84:	3304      	adds	r3, #4
 800de86:	601a      	str	r2, [r3, #0]
}
 800de88:	46c0      	nop			@ (mov r8, r8)
 800de8a:	46bd      	mov	sp, r7
 800de8c:	b003      	add	sp, #12
 800de8e:	bd90      	pop	{r4, r7, pc}
 800de90:	e000e100 	.word	0xe000e100
 800de94:	e000ed00 	.word	0xe000ed00

0800de98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	1e5a      	subs	r2, r3, #1
 800dea4:	2380      	movs	r3, #128	@ 0x80
 800dea6:	045b      	lsls	r3, r3, #17
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d301      	bcc.n	800deb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800deac:	2301      	movs	r3, #1
 800deae:	e010      	b.n	800ded2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800deb0:	4b0a      	ldr	r3, [pc, #40]	@ (800dedc <SysTick_Config+0x44>)
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	3a01      	subs	r2, #1
 800deb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800deb8:	2301      	movs	r3, #1
 800deba:	425b      	negs	r3, r3
 800debc:	2103      	movs	r1, #3
 800debe:	0018      	movs	r0, r3
 800dec0:	f7ff ff7c 	bl	800ddbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dec4:	4b05      	ldr	r3, [pc, #20]	@ (800dedc <SysTick_Config+0x44>)
 800dec6:	2200      	movs	r2, #0
 800dec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800deca:	4b04      	ldr	r3, [pc, #16]	@ (800dedc <SysTick_Config+0x44>)
 800decc:	2207      	movs	r2, #7
 800dece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	0018      	movs	r0, r3
 800ded4:	46bd      	mov	sp, r7
 800ded6:	b002      	add	sp, #8
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	46c0      	nop			@ (mov r8, r8)
 800dedc:	e000e010 	.word	0xe000e010

0800dee0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
 800deea:	210f      	movs	r1, #15
 800deec:	187b      	adds	r3, r7, r1
 800deee:	1c02      	adds	r2, r0, #0
 800def0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	187b      	adds	r3, r7, r1
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	b25b      	sxtb	r3, r3
 800defa:	0011      	movs	r1, r2
 800defc:	0018      	movs	r0, r3
 800defe:	f7ff ff5d 	bl	800ddbc <__NVIC_SetPriority>
}
 800df02:	46c0      	nop			@ (mov r8, r8)
 800df04:	46bd      	mov	sp, r7
 800df06:	b004      	add	sp, #16
 800df08:	bd80      	pop	{r7, pc}

0800df0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b082      	sub	sp, #8
 800df0e:	af00      	add	r7, sp, #0
 800df10:	0002      	movs	r2, r0
 800df12:	1dfb      	adds	r3, r7, #7
 800df14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800df16:	1dfb      	adds	r3, r7, #7
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	b25b      	sxtb	r3, r3
 800df1c:	0018      	movs	r0, r3
 800df1e:	f7ff ff33 	bl	800dd88 <__NVIC_EnableIRQ>
}
 800df22:	46c0      	nop			@ (mov r8, r8)
 800df24:	46bd      	mov	sp, r7
 800df26:	b002      	add	sp, #8
 800df28:	bd80      	pop	{r7, pc}

0800df2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b082      	sub	sp, #8
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	0018      	movs	r0, r3
 800df36:	f7ff ffaf 	bl	800de98 <SysTick_Config>
 800df3a:	0003      	movs	r3, r0
}
 800df3c:	0018      	movs	r0, r3
 800df3e:	46bd      	mov	sp, r7
 800df40:	b002      	add	sp, #8
 800df42:	bd80      	pop	{r7, pc}

0800df44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d101      	bne.n	800df56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	e061      	b.n	800e01a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a32      	ldr	r2, [pc, #200]	@ (800e024 <HAL_DMA_Init+0xe0>)
 800df5c:	4694      	mov	ip, r2
 800df5e:	4463      	add	r3, ip
 800df60:	2114      	movs	r1, #20
 800df62:	0018      	movs	r0, r3
 800df64:	f7f2 f91e 	bl	80001a4 <__udivsi3>
 800df68:	0003      	movs	r3, r0
 800df6a:	009a      	lsls	r2, r3, #2
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	4a2d      	ldr	r2, [pc, #180]	@ (800e028 <HAL_DMA_Init+0xe4>)
 800df74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2225      	movs	r2, #37	@ 0x25
 800df7a:	2102      	movs	r1, #2
 800df7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	4a28      	ldr	r2, [pc, #160]	@ (800e02c <HAL_DMA_Init+0xe8>)
 800df8a:	4013      	ands	r3, r2
 800df8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800df96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dfa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dfae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	689a      	ldr	r2, [r3, #8]
 800dfc8:	2380      	movs	r3, #128	@ 0x80
 800dfca:	01db      	lsls	r3, r3, #7
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d018      	beq.n	800e002 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800dfd0:	4b17      	ldr	r3, [pc, #92]	@ (800e030 <HAL_DMA_Init+0xec>)
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfd8:	211c      	movs	r1, #28
 800dfda:	400b      	ands	r3, r1
 800dfdc:	210f      	movs	r1, #15
 800dfde:	4099      	lsls	r1, r3
 800dfe0:	000b      	movs	r3, r1
 800dfe2:	43d9      	mvns	r1, r3
 800dfe4:	4b12      	ldr	r3, [pc, #72]	@ (800e030 <HAL_DMA_Init+0xec>)
 800dfe6:	400a      	ands	r2, r1
 800dfe8:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800dfea:	4b11      	ldr	r3, [pc, #68]	@ (800e030 <HAL_DMA_Init+0xec>)
 800dfec:	6819      	ldr	r1, [r3, #0]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	685a      	ldr	r2, [r3, #4]
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dff6:	201c      	movs	r0, #28
 800dff8:	4003      	ands	r3, r0
 800dffa:	409a      	lsls	r2, r3
 800dffc:	4b0c      	ldr	r3, [pc, #48]	@ (800e030 <HAL_DMA_Init+0xec>)
 800dffe:	430a      	orrs	r2, r1
 800e000:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	2200      	movs	r2, #0
 800e006:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2225      	movs	r2, #37	@ 0x25
 800e00c:	2101      	movs	r1, #1
 800e00e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2224      	movs	r2, #36	@ 0x24
 800e014:	2100      	movs	r1, #0
 800e016:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	0018      	movs	r0, r3
 800e01c:	46bd      	mov	sp, r7
 800e01e:	b004      	add	sp, #16
 800e020:	bd80      	pop	{r7, pc}
 800e022:	46c0      	nop			@ (mov r8, r8)
 800e024:	bffdfff8 	.word	0xbffdfff8
 800e028:	40020000 	.word	0x40020000
 800e02c:	ffff800f 	.word	0xffff800f
 800e030:	400200a8 	.word	0x400200a8

0800e034 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b086      	sub	sp, #24
 800e038:	af00      	add	r7, sp, #0
 800e03a:	60f8      	str	r0, [r7, #12]
 800e03c:	60b9      	str	r1, [r7, #8]
 800e03e:	607a      	str	r2, [r7, #4]
 800e040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e042:	2317      	movs	r3, #23
 800e044:	18fb      	adds	r3, r7, r3
 800e046:	2200      	movs	r2, #0
 800e048:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2224      	movs	r2, #36	@ 0x24
 800e04e:	5c9b      	ldrb	r3, [r3, r2]
 800e050:	2b01      	cmp	r3, #1
 800e052:	d101      	bne.n	800e058 <HAL_DMA_Start_IT+0x24>
 800e054:	2302      	movs	r3, #2
 800e056:	e04f      	b.n	800e0f8 <HAL_DMA_Start_IT+0xc4>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2224      	movs	r2, #36	@ 0x24
 800e05c:	2101      	movs	r1, #1
 800e05e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2225      	movs	r2, #37	@ 0x25
 800e064:	5c9b      	ldrb	r3, [r3, r2]
 800e066:	b2db      	uxtb	r3, r3
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d13a      	bne.n	800e0e2 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2225      	movs	r2, #37	@ 0x25
 800e070:	2102      	movs	r1, #2
 800e072:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2200      	movs	r2, #0
 800e078:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2101      	movs	r1, #1
 800e086:	438a      	bics	r2, r1
 800e088:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	68b9      	ldr	r1, [r7, #8]
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f000 f976 	bl	800e382 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d008      	beq.n	800e0b0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	210e      	movs	r1, #14
 800e0aa:	430a      	orrs	r2, r1
 800e0ac:	601a      	str	r2, [r3, #0]
 800e0ae:	e00f      	b.n	800e0d0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2104      	movs	r1, #4
 800e0bc:	438a      	bics	r2, r1
 800e0be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	210a      	movs	r1, #10
 800e0cc:	430a      	orrs	r2, r1
 800e0ce:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	2101      	movs	r1, #1
 800e0dc:	430a      	orrs	r2, r1
 800e0de:	601a      	str	r2, [r3, #0]
 800e0e0:	e007      	b.n	800e0f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2224      	movs	r2, #36	@ 0x24
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800e0ea:	2317      	movs	r3, #23
 800e0ec:	18fb      	adds	r3, r7, r3
 800e0ee:	2202      	movs	r2, #2
 800e0f0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800e0f2:	2317      	movs	r3, #23
 800e0f4:	18fb      	adds	r3, r7, r3
 800e0f6:	781b      	ldrb	r3, [r3, #0]
}
 800e0f8:	0018      	movs	r0, r3
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	b006      	add	sp, #24
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e108:	230f      	movs	r3, #15
 800e10a:	18fb      	adds	r3, r7, r3
 800e10c:	2200      	movs	r2, #0
 800e10e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2225      	movs	r2, #37	@ 0x25
 800e114:	5c9b      	ldrb	r3, [r3, r2]
 800e116:	b2db      	uxtb	r3, r3
 800e118:	2b02      	cmp	r3, #2
 800e11a:	d008      	beq.n	800e12e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2204      	movs	r2, #4
 800e120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2224      	movs	r2, #36	@ 0x24
 800e126:	2100      	movs	r1, #0
 800e128:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800e12a:	2301      	movs	r3, #1
 800e12c:	e024      	b.n	800e178 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	210e      	movs	r1, #14
 800e13a:	438a      	bics	r2, r1
 800e13c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2101      	movs	r1, #1
 800e14a:	438a      	bics	r2, r1
 800e14c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e152:	221c      	movs	r2, #28
 800e154:	401a      	ands	r2, r3
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e15a:	2101      	movs	r1, #1
 800e15c:	4091      	lsls	r1, r2
 800e15e:	000a      	movs	r2, r1
 800e160:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2225      	movs	r2, #37	@ 0x25
 800e166:	2101      	movs	r1, #1
 800e168:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2224      	movs	r2, #36	@ 0x24
 800e16e:	2100      	movs	r1, #0
 800e170:	5499      	strb	r1, [r3, r2]

    return status;
 800e172:	230f      	movs	r3, #15
 800e174:	18fb      	adds	r3, r7, r3
 800e176:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e178:	0018      	movs	r0, r3
 800e17a:	46bd      	mov	sp, r7
 800e17c:	b004      	add	sp, #16
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b084      	sub	sp, #16
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e188:	210f      	movs	r1, #15
 800e18a:	187b      	adds	r3, r7, r1
 800e18c:	2200      	movs	r2, #0
 800e18e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2225      	movs	r2, #37	@ 0x25
 800e194:	5c9b      	ldrb	r3, [r3, r2]
 800e196:	b2db      	uxtb	r3, r3
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d006      	beq.n	800e1aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2204      	movs	r2, #4
 800e1a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800e1a2:	187b      	adds	r3, r7, r1
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	701a      	strb	r2, [r3, #0]
 800e1a8:	e02a      	b.n	800e200 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	210e      	movs	r1, #14
 800e1b6:	438a      	bics	r2, r1
 800e1b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	2101      	movs	r1, #1
 800e1c6:	438a      	bics	r2, r1
 800e1c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1ce:	221c      	movs	r2, #28
 800e1d0:	401a      	ands	r2, r3
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1d6:	2101      	movs	r1, #1
 800e1d8:	4091      	lsls	r1, r2
 800e1da:	000a      	movs	r2, r1
 800e1dc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	2225      	movs	r2, #37	@ 0x25
 800e1e2:	2101      	movs	r1, #1
 800e1e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2224      	movs	r2, #36	@ 0x24
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d004      	beq.n	800e200 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	0010      	movs	r0, r2
 800e1fe:	4798      	blx	r3
    }
  }
  return status;
 800e200:	230f      	movs	r3, #15
 800e202:	18fb      	adds	r3, r7, r3
 800e204:	781b      	ldrb	r3, [r3, #0]
}
 800e206:	0018      	movs	r0, r3
 800e208:	46bd      	mov	sp, r7
 800e20a:	b004      	add	sp, #16
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e20e:	b580      	push	{r7, lr}
 800e210:	b084      	sub	sp, #16
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e22a:	221c      	movs	r2, #28
 800e22c:	4013      	ands	r3, r2
 800e22e:	2204      	movs	r2, #4
 800e230:	409a      	lsls	r2, r3
 800e232:	0013      	movs	r3, r2
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	4013      	ands	r3, r2
 800e238:	d026      	beq.n	800e288 <HAL_DMA_IRQHandler+0x7a>
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	2204      	movs	r2, #4
 800e23e:	4013      	ands	r3, r2
 800e240:	d022      	beq.n	800e288 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2220      	movs	r2, #32
 800e24a:	4013      	ands	r3, r2
 800e24c:	d107      	bne.n	800e25e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2104      	movs	r1, #4
 800e25a:	438a      	bics	r2, r1
 800e25c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e262:	221c      	movs	r2, #28
 800e264:	401a      	ands	r2, r3
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e26a:	2104      	movs	r1, #4
 800e26c:	4091      	lsls	r1, r2
 800e26e:	000a      	movs	r2, r1
 800e270:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e276:	2b00      	cmp	r3, #0
 800e278:	d100      	bne.n	800e27c <HAL_DMA_IRQHandler+0x6e>
 800e27a:	e071      	b.n	800e360 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	0010      	movs	r0, r2
 800e284:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800e286:	e06b      	b.n	800e360 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e28c:	221c      	movs	r2, #28
 800e28e:	4013      	ands	r3, r2
 800e290:	2202      	movs	r2, #2
 800e292:	409a      	lsls	r2, r3
 800e294:	0013      	movs	r3, r2
 800e296:	68fa      	ldr	r2, [r7, #12]
 800e298:	4013      	ands	r3, r2
 800e29a:	d02d      	beq.n	800e2f8 <HAL_DMA_IRQHandler+0xea>
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2202      	movs	r2, #2
 800e2a0:	4013      	ands	r3, r2
 800e2a2:	d029      	beq.n	800e2f8 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2220      	movs	r2, #32
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	d10b      	bne.n	800e2c8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	210a      	movs	r1, #10
 800e2bc:	438a      	bics	r2, r1
 800e2be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2225      	movs	r2, #37	@ 0x25
 800e2c4:	2101      	movs	r1, #1
 800e2c6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2cc:	221c      	movs	r2, #28
 800e2ce:	401a      	ands	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2d4:	2102      	movs	r1, #2
 800e2d6:	4091      	lsls	r1, r2
 800e2d8:	000a      	movs	r2, r1
 800e2da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2224      	movs	r2, #36	@ 0x24
 800e2e0:	2100      	movs	r1, #0
 800e2e2:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d039      	beq.n	800e360 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	0010      	movs	r0, r2
 800e2f4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e2f6:	e033      	b.n	800e360 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2fc:	221c      	movs	r2, #28
 800e2fe:	4013      	ands	r3, r2
 800e300:	2208      	movs	r2, #8
 800e302:	409a      	lsls	r2, r3
 800e304:	0013      	movs	r3, r2
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	4013      	ands	r3, r2
 800e30a:	d02a      	beq.n	800e362 <HAL_DMA_IRQHandler+0x154>
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2208      	movs	r2, #8
 800e310:	4013      	ands	r3, r2
 800e312:	d026      	beq.n	800e362 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	210e      	movs	r1, #14
 800e320:	438a      	bics	r2, r1
 800e322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e328:	221c      	movs	r2, #28
 800e32a:	401a      	ands	r2, r3
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e330:	2101      	movs	r1, #1
 800e332:	4091      	lsls	r1, r2
 800e334:	000a      	movs	r2, r1
 800e336:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2225      	movs	r2, #37	@ 0x25
 800e342:	2101      	movs	r1, #1
 800e344:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2224      	movs	r2, #36	@ 0x24
 800e34a:	2100      	movs	r1, #0
 800e34c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e352:	2b00      	cmp	r3, #0
 800e354:	d005      	beq.n	800e362 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	0010      	movs	r0, r2
 800e35e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e360:	46c0      	nop			@ (mov r8, r8)
 800e362:	46c0      	nop			@ (mov r8, r8)
}
 800e364:	46bd      	mov	sp, r7
 800e366:	b004      	add	sp, #16
 800e368:	bd80      	pop	{r7, pc}

0800e36a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e36a:	b580      	push	{r7, lr}
 800e36c:	b082      	sub	sp, #8
 800e36e:	af00      	add	r7, sp, #0
 800e370:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2225      	movs	r2, #37	@ 0x25
 800e376:	5c9b      	ldrb	r3, [r3, r2]
 800e378:	b2db      	uxtb	r3, r3
}
 800e37a:	0018      	movs	r0, r3
 800e37c:	46bd      	mov	sp, r7
 800e37e:	b002      	add	sp, #8
 800e380:	bd80      	pop	{r7, pc}

0800e382 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b084      	sub	sp, #16
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
 800e38e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e394:	221c      	movs	r2, #28
 800e396:	401a      	ands	r2, r3
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e39c:	2101      	movs	r1, #1
 800e39e:	4091      	lsls	r1, r2
 800e3a0:	000a      	movs	r2, r1
 800e3a2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	683a      	ldr	r2, [r7, #0]
 800e3aa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	689b      	ldr	r3, [r3, #8]
 800e3b0:	2b10      	cmp	r3, #16
 800e3b2:	d108      	bne.n	800e3c6 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e3c4:	e007      	b.n	800e3d6 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	687a      	ldr	r2, [r7, #4]
 800e3d4:	60da      	str	r2, [r3, #12]
}
 800e3d6:	46c0      	nop			@ (mov r8, r8)
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	b004      	add	sp, #16
 800e3dc:	bd80      	pop	{r7, pc}
	...

0800e3e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800e3e8:	f7ff f904 	bl	800d5f4 <HAL_GetTick>
 800e3ec:	0003      	movs	r3, r0
 800e3ee:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e3f0:	e00f      	b.n	800e412 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	d00c      	beq.n	800e412 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d007      	beq.n	800e40e <FLASH_WaitForLastOperation+0x2e>
 800e3fe:	f7ff f8f9 	bl	800d5f4 <HAL_GetTick>
 800e402:	0002      	movs	r2, r0
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	1ad3      	subs	r3, r2, r3
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d201      	bcs.n	800e412 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800e40e:	2303      	movs	r3, #3
 800e410:	e052      	b.n	800e4b8 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e412:	4b2b      	ldr	r3, [pc, #172]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	2201      	movs	r2, #1
 800e418:	4013      	ands	r3, r2
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d0e9      	beq.n	800e3f2 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800e41e:	4b28      	ldr	r3, [pc, #160]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e420:	699b      	ldr	r3, [r3, #24]
 800e422:	2202      	movs	r2, #2
 800e424:	4013      	ands	r3, r2
 800e426:	2b02      	cmp	r3, #2
 800e428:	d102      	bne.n	800e430 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e42a:	4b25      	ldr	r3, [pc, #148]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e42c:	2202      	movs	r2, #2
 800e42e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e430:	4b23      	ldr	r3, [pc, #140]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e432:	699a      	ldr	r2, [r3, #24]
 800e434:	2380      	movs	r3, #128	@ 0x80
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	401a      	ands	r2, r3
 800e43a:	2380      	movs	r3, #128	@ 0x80
 800e43c:	005b      	lsls	r3, r3, #1
 800e43e:	429a      	cmp	r2, r3
 800e440:	d035      	beq.n	800e4ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e442:	4b1f      	ldr	r3, [pc, #124]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e444:	699a      	ldr	r2, [r3, #24]
 800e446:	2380      	movs	r3, #128	@ 0x80
 800e448:	009b      	lsls	r3, r3, #2
 800e44a:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800e44c:	2380      	movs	r3, #128	@ 0x80
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	429a      	cmp	r2, r3
 800e452:	d02c      	beq.n	800e4ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e454:	4b1a      	ldr	r3, [pc, #104]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e456:	699a      	ldr	r2, [r3, #24]
 800e458:	2380      	movs	r3, #128	@ 0x80
 800e45a:	00db      	lsls	r3, r3, #3
 800e45c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800e45e:	2380      	movs	r3, #128	@ 0x80
 800e460:	00db      	lsls	r3, r3, #3
 800e462:	429a      	cmp	r2, r3
 800e464:	d023      	beq.n	800e4ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e466:	4b16      	ldr	r3, [pc, #88]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e468:	699a      	ldr	r2, [r3, #24]
 800e46a:	2380      	movs	r3, #128	@ 0x80
 800e46c:	011b      	lsls	r3, r3, #4
 800e46e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800e470:	2380      	movs	r3, #128	@ 0x80
 800e472:	011b      	lsls	r3, r3, #4
 800e474:	429a      	cmp	r2, r3
 800e476:	d01a      	beq.n	800e4ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e478:	4b11      	ldr	r3, [pc, #68]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e47a:	699a      	ldr	r2, [r3, #24]
 800e47c:	2380      	movs	r3, #128	@ 0x80
 800e47e:	019b      	lsls	r3, r3, #6
 800e480:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800e482:	2380      	movs	r3, #128	@ 0x80
 800e484:	019b      	lsls	r3, r3, #6
 800e486:	429a      	cmp	r2, r3
 800e488:	d011      	beq.n	800e4ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e48a:	4b0d      	ldr	r3, [pc, #52]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e48c:	699a      	ldr	r2, [r3, #24]
 800e48e:	2380      	movs	r3, #128	@ 0x80
 800e490:	029b      	lsls	r3, r3, #10
 800e492:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800e494:	2380      	movs	r3, #128	@ 0x80
 800e496:	029b      	lsls	r3, r3, #10
 800e498:	429a      	cmp	r2, r3
 800e49a:	d008      	beq.n	800e4ae <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800e49c:	4b08      	ldr	r3, [pc, #32]	@ (800e4c0 <FLASH_WaitForLastOperation+0xe0>)
 800e49e:	699a      	ldr	r2, [r3, #24]
 800e4a0:	2380      	movs	r3, #128	@ 0x80
 800e4a2:	025b      	lsls	r3, r3, #9
 800e4a4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800e4a6:	2380      	movs	r3, #128	@ 0x80
 800e4a8:	025b      	lsls	r3, r3, #9
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d103      	bne.n	800e4b6 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800e4ae:	f000 f809 	bl	800e4c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	e000      	b.n	800e4b8 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800e4b6:	2300      	movs	r3, #0
}
 800e4b8:	0018      	movs	r0, r3
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	b004      	add	sp, #16
 800e4be:	bd80      	pop	{r7, pc}
 800e4c0:	40022000 	.word	0x40022000

0800e4c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800e4ce:	4b49      	ldr	r3, [pc, #292]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e4d0:	699a      	ldr	r2, [r3, #24]
 800e4d2:	2380      	movs	r3, #128	@ 0x80
 800e4d4:	005b      	lsls	r3, r3, #1
 800e4d6:	401a      	ands	r2, r3
 800e4d8:	2380      	movs	r3, #128	@ 0x80
 800e4da:	005b      	lsls	r3, r3, #1
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d10a      	bne.n	800e4f6 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e4e0:	4b45      	ldr	r3, [pc, #276]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e4e2:	695b      	ldr	r3, [r3, #20]
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	431a      	orrs	r2, r3
 800e4e8:	4b43      	ldr	r3, [pc, #268]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e4ea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2280      	movs	r2, #128	@ 0x80
 800e4f0:	0052      	lsls	r2, r2, #1
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800e4f6:	4b3f      	ldr	r3, [pc, #252]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e4f8:	699a      	ldr	r2, [r3, #24]
 800e4fa:	2380      	movs	r3, #128	@ 0x80
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	401a      	ands	r2, r3
 800e500:	2380      	movs	r3, #128	@ 0x80
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	429a      	cmp	r2, r3
 800e506:	d10a      	bne.n	800e51e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e508:	4b3b      	ldr	r3, [pc, #236]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	2201      	movs	r2, #1
 800e50e:	431a      	orrs	r2, r3
 800e510:	4b39      	ldr	r3, [pc, #228]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e512:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2280      	movs	r2, #128	@ 0x80
 800e518:	0092      	lsls	r2, r2, #2
 800e51a:	4313      	orrs	r3, r2
 800e51c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800e51e:	4b35      	ldr	r3, [pc, #212]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e520:	699a      	ldr	r2, [r3, #24]
 800e522:	2380      	movs	r3, #128	@ 0x80
 800e524:	00db      	lsls	r3, r3, #3
 800e526:	401a      	ands	r2, r3
 800e528:	2380      	movs	r3, #128	@ 0x80
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d10a      	bne.n	800e546 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800e530:	4b31      	ldr	r3, [pc, #196]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e532:	695b      	ldr	r3, [r3, #20]
 800e534:	2208      	movs	r2, #8
 800e536:	431a      	orrs	r2, r3
 800e538:	4b2f      	ldr	r3, [pc, #188]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e53a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2280      	movs	r2, #128	@ 0x80
 800e540:	00d2      	lsls	r2, r2, #3
 800e542:	4313      	orrs	r3, r2
 800e544:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800e546:	4b2b      	ldr	r3, [pc, #172]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e548:	699a      	ldr	r2, [r3, #24]
 800e54a:	2380      	movs	r3, #128	@ 0x80
 800e54c:	011b      	lsls	r3, r3, #4
 800e54e:	401a      	ands	r2, r3
 800e550:	2380      	movs	r3, #128	@ 0x80
 800e552:	011b      	lsls	r3, r3, #4
 800e554:	429a      	cmp	r2, r3
 800e556:	d10a      	bne.n	800e56e <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800e558:	4b27      	ldr	r3, [pc, #156]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e55a:	695b      	ldr	r3, [r3, #20]
 800e55c:	2204      	movs	r2, #4
 800e55e:	431a      	orrs	r2, r3
 800e560:	4b25      	ldr	r3, [pc, #148]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e562:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2280      	movs	r2, #128	@ 0x80
 800e568:	0112      	lsls	r2, r2, #4
 800e56a:	4313      	orrs	r3, r2
 800e56c:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800e56e:	4b21      	ldr	r3, [pc, #132]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e570:	699a      	ldr	r2, [r3, #24]
 800e572:	2380      	movs	r3, #128	@ 0x80
 800e574:	019b      	lsls	r3, r3, #6
 800e576:	401a      	ands	r2, r3
 800e578:	2380      	movs	r3, #128	@ 0x80
 800e57a:	019b      	lsls	r3, r3, #6
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d10a      	bne.n	800e596 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e580:	4b1d      	ldr	r3, [pc, #116]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e582:	695b      	ldr	r3, [r3, #20]
 800e584:	2210      	movs	r2, #16
 800e586:	431a      	orrs	r2, r3
 800e588:	4b1b      	ldr	r3, [pc, #108]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e58a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2280      	movs	r2, #128	@ 0x80
 800e590:	0192      	lsls	r2, r2, #6
 800e592:	4313      	orrs	r3, r2
 800e594:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800e596:	4b17      	ldr	r3, [pc, #92]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e598:	699a      	ldr	r2, [r3, #24]
 800e59a:	2380      	movs	r3, #128	@ 0x80
 800e59c:	029b      	lsls	r3, r3, #10
 800e59e:	401a      	ands	r2, r3
 800e5a0:	2380      	movs	r3, #128	@ 0x80
 800e5a2:	029b      	lsls	r3, r3, #10
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d109      	bne.n	800e5bc <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800e5a8:	4b13      	ldr	r3, [pc, #76]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e5aa:	695b      	ldr	r3, [r3, #20]
 800e5ac:	2220      	movs	r2, #32
 800e5ae:	431a      	orrs	r2, r3
 800e5b0:	4b11      	ldr	r3, [pc, #68]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e5b2:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2220      	movs	r2, #32
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800e5bc:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e5be:	699a      	ldr	r2, [r3, #24]
 800e5c0:	2380      	movs	r3, #128	@ 0x80
 800e5c2:	025b      	lsls	r3, r3, #9
 800e5c4:	401a      	ands	r2, r3
 800e5c6:	2380      	movs	r3, #128	@ 0x80
 800e5c8:	025b      	lsls	r3, r3, #9
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d10a      	bne.n	800e5e4 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800e5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e5d0:	695b      	ldr	r3, [r3, #20]
 800e5d2:	2240      	movs	r2, #64	@ 0x40
 800e5d4:	431a      	orrs	r2, r3
 800e5d6:	4b08      	ldr	r3, [pc, #32]	@ (800e5f8 <FLASH_SetErrorCode+0x134>)
 800e5d8:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2280      	movs	r2, #128	@ 0x80
 800e5de:	0252      	lsls	r2, r2, #9
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800e5e4:	4b03      	ldr	r3, [pc, #12]	@ (800e5f4 <FLASH_SetErrorCode+0x130>)
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	619a      	str	r2, [r3, #24]
}  
 800e5ea:	46c0      	nop			@ (mov r8, r8)
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	b002      	add	sp, #8
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	46c0      	nop			@ (mov r8, r8)
 800e5f4:	40022000 	.word	0x40022000
 800e5f8:	20002504 	.word	0x20002504

0800e5fc <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800e602:	4b12      	ldr	r3, [pc, #72]	@ (800e64c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	2201      	movs	r2, #1
 800e608:	4013      	ands	r3, r2
 800e60a:	d019      	beq.n	800e640 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e60c:	f3ef 8310 	mrs	r3, PRIMASK
 800e610:	607b      	str	r3, [r7, #4]
  return(result);
 800e612:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800e614:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e616:	b672      	cpsid	i
}
 800e618:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800e61a:	4b0c      	ldr	r3, [pc, #48]	@ (800e64c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e61c:	4a0c      	ldr	r2, [pc, #48]	@ (800e650 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800e61e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800e620:	4b0a      	ldr	r3, [pc, #40]	@ (800e64c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e622:	4a0c      	ldr	r2, [pc, #48]	@ (800e654 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800e624:	60da      	str	r2, [r3, #12]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	f383 8810 	msr	PRIMASK, r3
}
 800e630:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800e632:	4b06      	ldr	r3, [pc, #24]	@ (800e64c <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	4013      	ands	r3, r2
 800e63a:	d001      	beq.n	800e640 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	e000      	b.n	800e642 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800e640:	2300      	movs	r3, #0
}
 800e642:	0018      	movs	r0, r3
 800e644:	46bd      	mov	sp, r7
 800e646:	b004      	add	sp, #16
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	46c0      	nop			@ (mov r8, r8)
 800e64c:	40022000 	.word	0x40022000
 800e650:	89abcdef 	.word	0x89abcdef
 800e654:	02030405 	.word	0x02030405

0800e658 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800e65c:	4b04      	ldr	r3, [pc, #16]	@ (800e670 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	4b03      	ldr	r3, [pc, #12]	@ (800e670 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800e662:	2101      	movs	r1, #1
 800e664:	430a      	orrs	r2, r1
 800e666:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800e668:	2300      	movs	r3, #0
}
 800e66a:	0018      	movs	r0, r3
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	40022000 	.word	0x40022000

0800e674 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800e674:	b5b0      	push	{r4, r5, r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e67c:	250f      	movs	r5, #15
 800e67e:	197b      	adds	r3, r7, r5
 800e680:	2200      	movs	r2, #0
 800e682:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e684:	197c      	adds	r4, r7, r5
 800e686:	4b0f      	ldr	r3, [pc, #60]	@ (800e6c4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800e688:	0018      	movs	r0, r3
 800e68a:	f7ff fea9 	bl	800e3e0 <FLASH_WaitForLastOperation>
 800e68e:	0003      	movs	r3, r0
 800e690:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800e692:	0029      	movs	r1, r5
 800e694:	187b      	adds	r3, r7, r1
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10c      	bne.n	800e6b6 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e69c:	4b0a      	ldr	r3, [pc, #40]	@ (800e6c8 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e6a8:	187c      	adds	r4, r7, r1
 800e6aa:	4b06      	ldr	r3, [pc, #24]	@ (800e6c4 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800e6ac:	0018      	movs	r0, r3
 800e6ae:	f7ff fe97 	bl	800e3e0 <FLASH_WaitForLastOperation>
 800e6b2:	0003      	movs	r3, r0
 800e6b4:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800e6b6:	230f      	movs	r3, #15
 800e6b8:	18fb      	adds	r3, r7, r3
 800e6ba:	781b      	ldrb	r3, [r3, #0]
}  
 800e6bc:	0018      	movs	r0, r3
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	b004      	add	sp, #16
 800e6c2:	bdb0      	pop	{r4, r5, r7, pc}
 800e6c4:	0000c350 	.word	0x0000c350
 800e6c8:	20002504 	.word	0x20002504

0800e6cc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800e6cc:	b5b0      	push	{r4, r5, r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e6d8:	2317      	movs	r3, #23
 800e6da:	18fb      	adds	r3, r7, r3
 800e6dc:	2201      	movs	r2, #1
 800e6de:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e6e0:	4b24      	ldr	r3, [pc, #144]	@ (800e774 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e6e2:	7c1b      	ldrb	r3, [r3, #16]
 800e6e4:	2b01      	cmp	r3, #1
 800e6e6:	d101      	bne.n	800e6ec <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800e6e8:	2302      	movs	r3, #2
 800e6ea:	e03e      	b.n	800e76a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800e6ec:	4b21      	ldr	r3, [pc, #132]	@ (800e774 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e6f2:	2517      	movs	r5, #23
 800e6f4:	197c      	adds	r4, r7, r5
 800e6f6:	4b20      	ldr	r3, [pc, #128]	@ (800e778 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800e6f8:	0018      	movs	r0, r3
 800e6fa:	f7ff fe71 	bl	800e3e0 <FLASH_WaitForLastOperation>
 800e6fe:	0003      	movs	r3, r0
 800e700:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800e702:	197b      	adds	r3, r7, r5
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d129      	bne.n	800e75e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e70a:	4b1a      	ldr	r3, [pc, #104]	@ (800e774 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b02      	cmp	r3, #2
 800e714:	d103      	bne.n	800e71e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	601a      	str	r2, [r3, #0]
 800e71c:	e013      	b.n	800e746 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b01      	cmp	r3, #1
 800e722:	d104      	bne.n	800e72e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	687a      	ldr	r2, [r7, #4]
 800e728:	b292      	uxth	r2, r2
 800e72a:	801a      	strh	r2, [r3, #0]
 800e72c:	e00b      	b.n	800e746 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d104      	bne.n	800e73e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	b2d2      	uxtb	r2, r2
 800e73a:	701a      	strb	r2, [r3, #0]
 800e73c:	e003      	b.n	800e746 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800e73e:	2317      	movs	r3, #23
 800e740:	18fb      	adds	r3, r7, r3
 800e742:	2201      	movs	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800e746:	2217      	movs	r2, #23
 800e748:	18bb      	adds	r3, r7, r2
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d106      	bne.n	800e75e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800e750:	18bc      	adds	r4, r7, r2
 800e752:	4b09      	ldr	r3, [pc, #36]	@ (800e778 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800e754:	0018      	movs	r0, r3
 800e756:	f7ff fe43 	bl	800e3e0 <FLASH_WaitForLastOperation>
 800e75a:	0003      	movs	r3, r0
 800e75c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e75e:	4b05      	ldr	r3, [pc, #20]	@ (800e774 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800e760:	2200      	movs	r2, #0
 800e762:	741a      	strb	r2, [r3, #16]

  return status;
 800e764:	2317      	movs	r3, #23
 800e766:	18fb      	adds	r3, r7, r3
 800e768:	781b      	ldrb	r3, [r3, #0]
}
 800e76a:	0018      	movs	r0, r3
 800e76c:	46bd      	mov	sp, r7
 800e76e:	b006      	add	sp, #24
 800e770:	bdb0      	pop	{r4, r5, r7, pc}
 800e772:	46c0      	nop			@ (mov r8, r8)
 800e774:	20002504 	.word	0x20002504
 800e778:	0000c350 	.word	0x0000c350

0800e77c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b086      	sub	sp, #24
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800e786:	2300      	movs	r3, #0
 800e788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e78a:	2300      	movs	r3, #0
 800e78c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800e78e:	2300      	movs	r3, #0
 800e790:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800e792:	e155      	b.n	800ea40 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2101      	movs	r1, #1
 800e79a:	697a      	ldr	r2, [r7, #20]
 800e79c:	4091      	lsls	r1, r2
 800e79e:	000a      	movs	r2, r1
 800e7a0:	4013      	ands	r3, r2
 800e7a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d100      	bne.n	800e7ac <HAL_GPIO_Init+0x30>
 800e7aa:	e146      	b.n	800ea3a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	2203      	movs	r2, #3
 800e7b2:	4013      	ands	r3, r2
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d005      	beq.n	800e7c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	685b      	ldr	r3, [r3, #4]
 800e7bc:	2203      	movs	r2, #3
 800e7be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d130      	bne.n	800e826 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	689b      	ldr	r3, [r3, #8]
 800e7c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	005b      	lsls	r3, r3, #1
 800e7ce:	2203      	movs	r2, #3
 800e7d0:	409a      	lsls	r2, r3
 800e7d2:	0013      	movs	r3, r2
 800e7d4:	43da      	mvns	r2, r3
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	4013      	ands	r3, r2
 800e7da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	68da      	ldr	r2, [r3, #12]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	005b      	lsls	r3, r3, #1
 800e7e4:	409a      	lsls	r2, r3
 800e7e6:	0013      	movs	r3, r2
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	409a      	lsls	r2, r3
 800e800:	0013      	movs	r3, r2
 800e802:	43da      	mvns	r2, r3
 800e804:	693b      	ldr	r3, [r7, #16]
 800e806:	4013      	ands	r3, r2
 800e808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	091b      	lsrs	r3, r3, #4
 800e810:	2201      	movs	r2, #1
 800e812:	401a      	ands	r2, r3
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	409a      	lsls	r2, r3
 800e818:	0013      	movs	r3, r2
 800e81a:	693a      	ldr	r2, [r7, #16]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	693a      	ldr	r2, [r7, #16]
 800e824:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	685b      	ldr	r3, [r3, #4]
 800e82a:	2203      	movs	r2, #3
 800e82c:	4013      	ands	r3, r2
 800e82e:	2b03      	cmp	r3, #3
 800e830:	d017      	beq.n	800e862 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	005b      	lsls	r3, r3, #1
 800e83c:	2203      	movs	r2, #3
 800e83e:	409a      	lsls	r2, r3
 800e840:	0013      	movs	r3, r2
 800e842:	43da      	mvns	r2, r3
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	4013      	ands	r3, r2
 800e848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	689a      	ldr	r2, [r3, #8]
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	005b      	lsls	r3, r3, #1
 800e852:	409a      	lsls	r2, r3
 800e854:	0013      	movs	r3, r2
 800e856:	693a      	ldr	r2, [r7, #16]
 800e858:	4313      	orrs	r3, r2
 800e85a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	2203      	movs	r2, #3
 800e868:	4013      	ands	r3, r2
 800e86a:	2b02      	cmp	r3, #2
 800e86c:	d123      	bne.n	800e8b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	08da      	lsrs	r2, r3, #3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	3208      	adds	r2, #8
 800e876:	0092      	lsls	r2, r2, #2
 800e878:	58d3      	ldr	r3, [r2, r3]
 800e87a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2207      	movs	r2, #7
 800e880:	4013      	ands	r3, r2
 800e882:	009b      	lsls	r3, r3, #2
 800e884:	220f      	movs	r2, #15
 800e886:	409a      	lsls	r2, r3
 800e888:	0013      	movs	r3, r2
 800e88a:	43da      	mvns	r2, r3
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	4013      	ands	r3, r2
 800e890:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	691a      	ldr	r2, [r3, #16]
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	2107      	movs	r1, #7
 800e89a:	400b      	ands	r3, r1
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	409a      	lsls	r2, r3
 800e8a0:	0013      	movs	r3, r2
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	08da      	lsrs	r2, r3, #3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	3208      	adds	r2, #8
 800e8b0:	0092      	lsls	r2, r2, #2
 800e8b2:	6939      	ldr	r1, [r7, #16]
 800e8b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	005b      	lsls	r3, r3, #1
 800e8c0:	2203      	movs	r2, #3
 800e8c2:	409a      	lsls	r2, r3
 800e8c4:	0013      	movs	r3, r2
 800e8c6:	43da      	mvns	r2, r3
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	4013      	ands	r3, r2
 800e8cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	2203      	movs	r2, #3
 800e8d4:	401a      	ands	r2, r3
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	409a      	lsls	r2, r3
 800e8dc:	0013      	movs	r3, r2
 800e8de:	693a      	ldr	r2, [r7, #16]
 800e8e0:	4313      	orrs	r3, r2
 800e8e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	693a      	ldr	r2, [r7, #16]
 800e8e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e8ea:	683b      	ldr	r3, [r7, #0]
 800e8ec:	685a      	ldr	r2, [r3, #4]
 800e8ee:	23c0      	movs	r3, #192	@ 0xc0
 800e8f0:	029b      	lsls	r3, r3, #10
 800e8f2:	4013      	ands	r3, r2
 800e8f4:	d100      	bne.n	800e8f8 <HAL_GPIO_Init+0x17c>
 800e8f6:	e0a0      	b.n	800ea3a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e8f8:	4b57      	ldr	r3, [pc, #348]	@ (800ea58 <HAL_GPIO_Init+0x2dc>)
 800e8fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8fc:	4b56      	ldr	r3, [pc, #344]	@ (800ea58 <HAL_GPIO_Init+0x2dc>)
 800e8fe:	2101      	movs	r1, #1
 800e900:	430a      	orrs	r2, r1
 800e902:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800e904:	4a55      	ldr	r2, [pc, #340]	@ (800ea5c <HAL_GPIO_Init+0x2e0>)
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	089b      	lsrs	r3, r3, #2
 800e90a:	3302      	adds	r3, #2
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	589b      	ldr	r3, [r3, r2]
 800e910:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	2203      	movs	r2, #3
 800e916:	4013      	ands	r3, r2
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	220f      	movs	r2, #15
 800e91c:	409a      	lsls	r2, r3
 800e91e:	0013      	movs	r3, r2
 800e920:	43da      	mvns	r2, r3
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	4013      	ands	r3, r2
 800e926:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	23a0      	movs	r3, #160	@ 0xa0
 800e92c:	05db      	lsls	r3, r3, #23
 800e92e:	429a      	cmp	r2, r3
 800e930:	d01f      	beq.n	800e972 <HAL_GPIO_Init+0x1f6>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a4a      	ldr	r2, [pc, #296]	@ (800ea60 <HAL_GPIO_Init+0x2e4>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d019      	beq.n	800e96e <HAL_GPIO_Init+0x1f2>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a49      	ldr	r2, [pc, #292]	@ (800ea64 <HAL_GPIO_Init+0x2e8>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d013      	beq.n	800e96a <HAL_GPIO_Init+0x1ee>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4a48      	ldr	r2, [pc, #288]	@ (800ea68 <HAL_GPIO_Init+0x2ec>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d00d      	beq.n	800e966 <HAL_GPIO_Init+0x1ea>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a47      	ldr	r2, [pc, #284]	@ (800ea6c <HAL_GPIO_Init+0x2f0>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d007      	beq.n	800e962 <HAL_GPIO_Init+0x1e6>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a46      	ldr	r2, [pc, #280]	@ (800ea70 <HAL_GPIO_Init+0x2f4>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d101      	bne.n	800e95e <HAL_GPIO_Init+0x1e2>
 800e95a:	2305      	movs	r3, #5
 800e95c:	e00a      	b.n	800e974 <HAL_GPIO_Init+0x1f8>
 800e95e:	2306      	movs	r3, #6
 800e960:	e008      	b.n	800e974 <HAL_GPIO_Init+0x1f8>
 800e962:	2304      	movs	r3, #4
 800e964:	e006      	b.n	800e974 <HAL_GPIO_Init+0x1f8>
 800e966:	2303      	movs	r3, #3
 800e968:	e004      	b.n	800e974 <HAL_GPIO_Init+0x1f8>
 800e96a:	2302      	movs	r3, #2
 800e96c:	e002      	b.n	800e974 <HAL_GPIO_Init+0x1f8>
 800e96e:	2301      	movs	r3, #1
 800e970:	e000      	b.n	800e974 <HAL_GPIO_Init+0x1f8>
 800e972:	2300      	movs	r3, #0
 800e974:	697a      	ldr	r2, [r7, #20]
 800e976:	2103      	movs	r1, #3
 800e978:	400a      	ands	r2, r1
 800e97a:	0092      	lsls	r2, r2, #2
 800e97c:	4093      	lsls	r3, r2
 800e97e:	693a      	ldr	r2, [r7, #16]
 800e980:	4313      	orrs	r3, r2
 800e982:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e984:	4935      	ldr	r1, [pc, #212]	@ (800ea5c <HAL_GPIO_Init+0x2e0>)
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	089b      	lsrs	r3, r3, #2
 800e98a:	3302      	adds	r3, #2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e992:	4b38      	ldr	r3, [pc, #224]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	43da      	mvns	r2, r3
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	4013      	ands	r3, r2
 800e9a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	685a      	ldr	r2, [r3, #4]
 800e9a6:	2380      	movs	r3, #128	@ 0x80
 800e9a8:	035b      	lsls	r3, r3, #13
 800e9aa:	4013      	ands	r3, r2
 800e9ac:	d003      	beq.n	800e9b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800e9b6:	4b2f      	ldr	r3, [pc, #188]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800e9b8:	693a      	ldr	r2, [r7, #16]
 800e9ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800e9bc:	4b2d      	ldr	r3, [pc, #180]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	43da      	mvns	r2, r3
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	2380      	movs	r3, #128	@ 0x80
 800e9d2:	039b      	lsls	r3, r3, #14
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	d003      	beq.n	800e9e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800e9d8:	693a      	ldr	r2, [r7, #16]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800e9e0:	4b24      	ldr	r3, [pc, #144]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800e9e2:	693a      	ldr	r2, [r7, #16]
 800e9e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800e9e6:	4b23      	ldr	r3, [pc, #140]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	43da      	mvns	r2, r3
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	685a      	ldr	r2, [r3, #4]
 800e9fa:	2380      	movs	r3, #128	@ 0x80
 800e9fc:	029b      	lsls	r3, r3, #10
 800e9fe:	4013      	ands	r3, r2
 800ea00:	d003      	beq.n	800ea0a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800ea02:	693a      	ldr	r2, [r7, #16]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ea0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800ea0c:	693a      	ldr	r2, [r7, #16]
 800ea0e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ea10:	4b18      	ldr	r3, [pc, #96]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	43da      	mvns	r2, r3
 800ea1a:	693b      	ldr	r3, [r7, #16]
 800ea1c:	4013      	ands	r3, r2
 800ea1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	685a      	ldr	r2, [r3, #4]
 800ea24:	2380      	movs	r3, #128	@ 0x80
 800ea26:	025b      	lsls	r3, r3, #9
 800ea28:	4013      	ands	r3, r2
 800ea2a:	d003      	beq.n	800ea34 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800ea2c:	693a      	ldr	r2, [r7, #16]
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	4313      	orrs	r3, r2
 800ea32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ea34:	4b0f      	ldr	r3, [pc, #60]	@ (800ea74 <HAL_GPIO_Init+0x2f8>)
 800ea36:	693a      	ldr	r2, [r7, #16]
 800ea38:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	40da      	lsrs	r2, r3
 800ea48:	1e13      	subs	r3, r2, #0
 800ea4a:	d000      	beq.n	800ea4e <HAL_GPIO_Init+0x2d2>
 800ea4c:	e6a2      	b.n	800e794 <HAL_GPIO_Init+0x18>
  }
}
 800ea4e:	46c0      	nop			@ (mov r8, r8)
 800ea50:	46c0      	nop			@ (mov r8, r8)
 800ea52:	46bd      	mov	sp, r7
 800ea54:	b006      	add	sp, #24
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	40021000 	.word	0x40021000
 800ea5c:	40010000 	.word	0x40010000
 800ea60:	50000400 	.word	0x50000400
 800ea64:	50000800 	.word	0x50000800
 800ea68:	50000c00 	.word	0x50000c00
 800ea6c:	50001000 	.word	0x50001000
 800ea70:	50001c00 	.word	0x50001c00
 800ea74:	40010400 	.word	0x40010400

0800ea78 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	000a      	movs	r2, r1
 800ea82:	1cbb      	adds	r3, r7, #2
 800ea84:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	1cba      	adds	r2, r7, #2
 800ea8c:	8812      	ldrh	r2, [r2, #0]
 800ea8e:	4013      	ands	r3, r2
 800ea90:	d004      	beq.n	800ea9c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800ea92:	230f      	movs	r3, #15
 800ea94:	18fb      	adds	r3, r7, r3
 800ea96:	2201      	movs	r2, #1
 800ea98:	701a      	strb	r2, [r3, #0]
 800ea9a:	e003      	b.n	800eaa4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ea9c:	230f      	movs	r3, #15
 800ea9e:	18fb      	adds	r3, r7, r3
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800eaa4:	230f      	movs	r3, #15
 800eaa6:	18fb      	adds	r3, r7, r3
 800eaa8:	781b      	ldrb	r3, [r3, #0]
}
 800eaaa:	0018      	movs	r0, r3
 800eaac:	46bd      	mov	sp, r7
 800eaae:	b004      	add	sp, #16
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b082      	sub	sp, #8
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	0008      	movs	r0, r1
 800eabc:	0011      	movs	r1, r2
 800eabe:	1cbb      	adds	r3, r7, #2
 800eac0:	1c02      	adds	r2, r0, #0
 800eac2:	801a      	strh	r2, [r3, #0]
 800eac4:	1c7b      	adds	r3, r7, #1
 800eac6:	1c0a      	adds	r2, r1, #0
 800eac8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800eaca:	1c7b      	adds	r3, r7, #1
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d004      	beq.n	800eadc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ead2:	1cbb      	adds	r3, r7, #2
 800ead4:	881a      	ldrh	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800eada:	e003      	b.n	800eae4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800eadc:	1cbb      	adds	r3, r7, #2
 800eade:	881a      	ldrh	r2, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800eae4:	46c0      	nop			@ (mov r8, r8)
 800eae6:	46bd      	mov	sp, r7
 800eae8:	b002      	add	sp, #8
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d101      	bne.n	800eafe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	e082      	b.n	800ec04 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2241      	movs	r2, #65	@ 0x41
 800eb02:	5c9b      	ldrb	r3, [r3, r2]
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d107      	bne.n	800eb1a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2240      	movs	r2, #64	@ 0x40
 800eb0e:	2100      	movs	r1, #0
 800eb10:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	0018      	movs	r0, r3
 800eb16:	f7f8 f9eb 	bl	8006ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2241      	movs	r2, #65	@ 0x41
 800eb1e:	2124      	movs	r1, #36	@ 0x24
 800eb20:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2101      	movs	r1, #1
 800eb2e:	438a      	bics	r2, r1
 800eb30:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	685a      	ldr	r2, [r3, #4]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4934      	ldr	r1, [pc, #208]	@ (800ec0c <HAL_I2C_Init+0x120>)
 800eb3c:	400a      	ands	r2, r1
 800eb3e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	689a      	ldr	r2, [r3, #8]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	4931      	ldr	r1, [pc, #196]	@ (800ec10 <HAL_I2C_Init+0x124>)
 800eb4c:	400a      	ands	r2, r1
 800eb4e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	68db      	ldr	r3, [r3, #12]
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d108      	bne.n	800eb6a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	689a      	ldr	r2, [r3, #8]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2180      	movs	r1, #128	@ 0x80
 800eb62:	0209      	lsls	r1, r1, #8
 800eb64:	430a      	orrs	r2, r1
 800eb66:	609a      	str	r2, [r3, #8]
 800eb68:	e007      	b.n	800eb7a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	689a      	ldr	r2, [r3, #8]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2184      	movs	r1, #132	@ 0x84
 800eb74:	0209      	lsls	r1, r1, #8
 800eb76:	430a      	orrs	r2, r1
 800eb78:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	2b02      	cmp	r3, #2
 800eb80:	d104      	bne.n	800eb8c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2280      	movs	r2, #128	@ 0x80
 800eb88:	0112      	lsls	r2, r2, #4
 800eb8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	491f      	ldr	r1, [pc, #124]	@ (800ec14 <HAL_I2C_Init+0x128>)
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	68da      	ldr	r2, [r3, #12]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	491a      	ldr	r1, [pc, #104]	@ (800ec10 <HAL_I2C_Init+0x124>)
 800eba8:	400a      	ands	r2, r1
 800ebaa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	691a      	ldr	r2, [r3, #16]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	695b      	ldr	r3, [r3, #20]
 800ebb4:	431a      	orrs	r2, r3
 800ebb6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	430a      	orrs	r2, r1
 800ebc4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	69d9      	ldr	r1, [r3, #28]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a1a      	ldr	r2, [r3, #32]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	430a      	orrs	r2, r1
 800ebd4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	2101      	movs	r1, #1
 800ebe2:	430a      	orrs	r2, r1
 800ebe4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2241      	movs	r2, #65	@ 0x41
 800ebf0:	2120      	movs	r1, #32
 800ebf2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2242      	movs	r2, #66	@ 0x42
 800ebfe:	2100      	movs	r1, #0
 800ec00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	0018      	movs	r0, r3
 800ec06:	46bd      	mov	sp, r7
 800ec08:	b002      	add	sp, #8
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	f0ffffff 	.word	0xf0ffffff
 800ec10:	ffff7fff 	.word	0xffff7fff
 800ec14:	02008000 	.word	0x02008000

0800ec18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ec18:	b590      	push	{r4, r7, lr}
 800ec1a:	b089      	sub	sp, #36	@ 0x24
 800ec1c:	af02      	add	r7, sp, #8
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	0008      	movs	r0, r1
 800ec22:	607a      	str	r2, [r7, #4]
 800ec24:	0019      	movs	r1, r3
 800ec26:	230a      	movs	r3, #10
 800ec28:	18fb      	adds	r3, r7, r3
 800ec2a:	1c02      	adds	r2, r0, #0
 800ec2c:	801a      	strh	r2, [r3, #0]
 800ec2e:	2308      	movs	r3, #8
 800ec30:	18fb      	adds	r3, r7, r3
 800ec32:	1c0a      	adds	r2, r1, #0
 800ec34:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2241      	movs	r2, #65	@ 0x41
 800ec3a:	5c9b      	ldrb	r3, [r3, r2]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	2b20      	cmp	r3, #32
 800ec40:	d000      	beq.n	800ec44 <HAL_I2C_Master_Transmit+0x2c>
 800ec42:	e0e7      	b.n	800ee14 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2240      	movs	r2, #64	@ 0x40
 800ec48:	5c9b      	ldrb	r3, [r3, r2]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d101      	bne.n	800ec52 <HAL_I2C_Master_Transmit+0x3a>
 800ec4e:	2302      	movs	r3, #2
 800ec50:	e0e1      	b.n	800ee16 <HAL_I2C_Master_Transmit+0x1fe>
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2240      	movs	r2, #64	@ 0x40
 800ec56:	2101      	movs	r1, #1
 800ec58:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ec5a:	f7fe fccb 	bl	800d5f4 <HAL_GetTick>
 800ec5e:	0003      	movs	r3, r0
 800ec60:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ec62:	2380      	movs	r3, #128	@ 0x80
 800ec64:	0219      	lsls	r1, r3, #8
 800ec66:	68f8      	ldr	r0, [r7, #12]
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	2319      	movs	r3, #25
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f001 ff98 	bl	8010ba4 <I2C_WaitOnFlagUntilTimeout>
 800ec74:	1e03      	subs	r3, r0, #0
 800ec76:	d001      	beq.n	800ec7c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e0cc      	b.n	800ee16 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2241      	movs	r2, #65	@ 0x41
 800ec80:	2121      	movs	r1, #33	@ 0x21
 800ec82:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2242      	movs	r2, #66	@ 0x42
 800ec88:	2110      	movs	r1, #16
 800ec8a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2208      	movs	r2, #8
 800ec9c:	18ba      	adds	r2, r7, r2
 800ec9e:	8812      	ldrh	r2, [r2, #0]
 800eca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	2bff      	cmp	r3, #255	@ 0xff
 800ecb0:	d911      	bls.n	800ecd6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	22ff      	movs	r2, #255	@ 0xff
 800ecb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ecbc:	b2da      	uxtb	r2, r3
 800ecbe:	2380      	movs	r3, #128	@ 0x80
 800ecc0:	045c      	lsls	r4, r3, #17
 800ecc2:	230a      	movs	r3, #10
 800ecc4:	18fb      	adds	r3, r7, r3
 800ecc6:	8819      	ldrh	r1, [r3, #0]
 800ecc8:	68f8      	ldr	r0, [r7, #12]
 800ecca:	4b55      	ldr	r3, [pc, #340]	@ (800ee20 <HAL_I2C_Master_Transmit+0x208>)
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	0023      	movs	r3, r4
 800ecd0:	f002 f9ba 	bl	8011048 <I2C_TransferConfig>
 800ecd4:	e075      	b.n	800edc2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	2380      	movs	r3, #128	@ 0x80
 800ece8:	049c      	lsls	r4, r3, #18
 800ecea:	230a      	movs	r3, #10
 800ecec:	18fb      	adds	r3, r7, r3
 800ecee:	8819      	ldrh	r1, [r3, #0]
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	4b4b      	ldr	r3, [pc, #300]	@ (800ee20 <HAL_I2C_Master_Transmit+0x208>)
 800ecf4:	9300      	str	r3, [sp, #0]
 800ecf6:	0023      	movs	r3, r4
 800ecf8:	f002 f9a6 	bl	8011048 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ecfc:	e061      	b.n	800edc2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	0018      	movs	r0, r3
 800ed06:	f001 ff9b 	bl	8010c40 <I2C_WaitOnTXISFlagUntilTimeout>
 800ed0a:	1e03      	subs	r3, r0, #0
 800ed0c:	d001      	beq.n	800ed12 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e081      	b.n	800ee16 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed16:	781a      	ldrb	r2, [r3, #0]
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed22:	1c5a      	adds	r2, r3, #1
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	3b01      	subs	r3, #1
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d03a      	beq.n	800edc2 <HAL_I2C_Master_Transmit+0x1aa>
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d136      	bne.n	800edc2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ed54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed56:	68f8      	ldr	r0, [r7, #12]
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	0013      	movs	r3, r2
 800ed5e:	2200      	movs	r2, #0
 800ed60:	2180      	movs	r1, #128	@ 0x80
 800ed62:	f001 ff1f 	bl	8010ba4 <I2C_WaitOnFlagUntilTimeout>
 800ed66:	1e03      	subs	r3, r0, #0
 800ed68:	d001      	beq.n	800ed6e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e053      	b.n	800ee16 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	2bff      	cmp	r3, #255	@ 0xff
 800ed76:	d911      	bls.n	800ed9c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	22ff      	movs	r2, #255	@ 0xff
 800ed7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed82:	b2da      	uxtb	r2, r3
 800ed84:	2380      	movs	r3, #128	@ 0x80
 800ed86:	045c      	lsls	r4, r3, #17
 800ed88:	230a      	movs	r3, #10
 800ed8a:	18fb      	adds	r3, r7, r3
 800ed8c:	8819      	ldrh	r1, [r3, #0]
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	2300      	movs	r3, #0
 800ed92:	9300      	str	r3, [sp, #0]
 800ed94:	0023      	movs	r3, r4
 800ed96:	f002 f957 	bl	8011048 <I2C_TransferConfig>
 800ed9a:	e012      	b.n	800edc2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800edaa:	b2da      	uxtb	r2, r3
 800edac:	2380      	movs	r3, #128	@ 0x80
 800edae:	049c      	lsls	r4, r3, #18
 800edb0:	230a      	movs	r3, #10
 800edb2:	18fb      	adds	r3, r7, r3
 800edb4:	8819      	ldrh	r1, [r3, #0]
 800edb6:	68f8      	ldr	r0, [r7, #12]
 800edb8:	2300      	movs	r3, #0
 800edba:	9300      	str	r3, [sp, #0]
 800edbc:	0023      	movs	r3, r4
 800edbe:	f002 f943 	bl	8011048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d198      	bne.n	800ecfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800edcc:	697a      	ldr	r2, [r7, #20]
 800edce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	0018      	movs	r0, r3
 800edd4:	f001 ff7a 	bl	8010ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 800edd8:	1e03      	subs	r3, r0, #0
 800edda:	d001      	beq.n	800ede0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800eddc:	2301      	movs	r3, #1
 800edde:	e01a      	b.n	800ee16 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	2220      	movs	r2, #32
 800ede6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	490c      	ldr	r1, [pc, #48]	@ (800ee24 <HAL_I2C_Master_Transmit+0x20c>)
 800edf4:	400a      	ands	r2, r1
 800edf6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2241      	movs	r2, #65	@ 0x41
 800edfc:	2120      	movs	r1, #32
 800edfe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	2242      	movs	r2, #66	@ 0x42
 800ee04:	2100      	movs	r1, #0
 800ee06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2240      	movs	r2, #64	@ 0x40
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	e000      	b.n	800ee16 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800ee14:	2302      	movs	r3, #2
  }
}
 800ee16:	0018      	movs	r0, r3
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	b007      	add	sp, #28
 800ee1c:	bd90      	pop	{r4, r7, pc}
 800ee1e:	46c0      	nop			@ (mov r8, r8)
 800ee20:	80002000 	.word	0x80002000
 800ee24:	fe00e800 	.word	0xfe00e800

0800ee28 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800ee28:	b590      	push	{r4, r7, lr}
 800ee2a:	b089      	sub	sp, #36	@ 0x24
 800ee2c:	af02      	add	r7, sp, #8
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	0008      	movs	r0, r1
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	0019      	movs	r1, r3
 800ee36:	230a      	movs	r3, #10
 800ee38:	18fb      	adds	r3, r7, r3
 800ee3a:	1c02      	adds	r2, r0, #0
 800ee3c:	801a      	strh	r2, [r3, #0]
 800ee3e:	2308      	movs	r3, #8
 800ee40:	18fb      	adds	r3, r7, r3
 800ee42:	1c0a      	adds	r2, r1, #0
 800ee44:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2241      	movs	r2, #65	@ 0x41
 800ee4a:	5c9b      	ldrb	r3, [r3, r2]
 800ee4c:	b2db      	uxtb	r3, r3
 800ee4e:	2b20      	cmp	r3, #32
 800ee50:	d000      	beq.n	800ee54 <HAL_I2C_Master_Receive+0x2c>
 800ee52:	e0e8      	b.n	800f026 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2240      	movs	r2, #64	@ 0x40
 800ee58:	5c9b      	ldrb	r3, [r3, r2]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d101      	bne.n	800ee62 <HAL_I2C_Master_Receive+0x3a>
 800ee5e:	2302      	movs	r3, #2
 800ee60:	e0e2      	b.n	800f028 <HAL_I2C_Master_Receive+0x200>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2240      	movs	r2, #64	@ 0x40
 800ee66:	2101      	movs	r1, #1
 800ee68:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ee6a:	f7fe fbc3 	bl	800d5f4 <HAL_GetTick>
 800ee6e:	0003      	movs	r3, r0
 800ee70:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ee72:	2380      	movs	r3, #128	@ 0x80
 800ee74:	0219      	lsls	r1, r3, #8
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	2319      	movs	r3, #25
 800ee7e:	2201      	movs	r2, #1
 800ee80:	f001 fe90 	bl	8010ba4 <I2C_WaitOnFlagUntilTimeout>
 800ee84:	1e03      	subs	r3, r0, #0
 800ee86:	d001      	beq.n	800ee8c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800ee88:	2301      	movs	r3, #1
 800ee8a:	e0cd      	b.n	800f028 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2241      	movs	r2, #65	@ 0x41
 800ee90:	2122      	movs	r1, #34	@ 0x22
 800ee92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2242      	movs	r2, #66	@ 0x42
 800ee98:	2110      	movs	r1, #16
 800ee9a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2208      	movs	r2, #8
 800eeac:	18ba      	adds	r2, r7, r2
 800eeae:	8812      	ldrh	r2, [r2, #0]
 800eeb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	2bff      	cmp	r3, #255	@ 0xff
 800eec0:	d911      	bls.n	800eee6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	22ff      	movs	r2, #255	@ 0xff
 800eec6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eecc:	b2da      	uxtb	r2, r3
 800eece:	2380      	movs	r3, #128	@ 0x80
 800eed0:	045c      	lsls	r4, r3, #17
 800eed2:	230a      	movs	r3, #10
 800eed4:	18fb      	adds	r3, r7, r3
 800eed6:	8819      	ldrh	r1, [r3, #0]
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	4b55      	ldr	r3, [pc, #340]	@ (800f030 <HAL_I2C_Master_Receive+0x208>)
 800eedc:	9300      	str	r3, [sp, #0]
 800eede:	0023      	movs	r3, r4
 800eee0:	f002 f8b2 	bl	8011048 <I2C_TransferConfig>
 800eee4:	e076      	b.n	800efd4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eeea:	b29a      	uxth	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eef4:	b2da      	uxtb	r2, r3
 800eef6:	2380      	movs	r3, #128	@ 0x80
 800eef8:	049c      	lsls	r4, r3, #18
 800eefa:	230a      	movs	r3, #10
 800eefc:	18fb      	adds	r3, r7, r3
 800eefe:	8819      	ldrh	r1, [r3, #0]
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	4b4b      	ldr	r3, [pc, #300]	@ (800f030 <HAL_I2C_Master_Receive+0x208>)
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	0023      	movs	r3, r4
 800ef08:	f002 f89e 	bl	8011048 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800ef0c:	e062      	b.n	800efd4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	0018      	movs	r0, r3
 800ef16:	f001 ff1d 	bl	8010d54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ef1a:	1e03      	subs	r3, r0, #0
 800ef1c:	d001      	beq.n	800ef22 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e082      	b.n	800f028 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef2c:	b2d2      	uxtb	r2, r2
 800ef2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef58:	b29b      	uxth	r3, r3
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d03a      	beq.n	800efd4 <HAL_I2C_Master_Receive+0x1ac>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d136      	bne.n	800efd4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ef66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ef68:	68f8      	ldr	r0, [r7, #12]
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	0013      	movs	r3, r2
 800ef70:	2200      	movs	r2, #0
 800ef72:	2180      	movs	r1, #128	@ 0x80
 800ef74:	f001 fe16 	bl	8010ba4 <I2C_WaitOnFlagUntilTimeout>
 800ef78:	1e03      	subs	r3, r0, #0
 800ef7a:	d001      	beq.n	800ef80 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e053      	b.n	800f028 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	2bff      	cmp	r3, #255	@ 0xff
 800ef88:	d911      	bls.n	800efae <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	22ff      	movs	r2, #255	@ 0xff
 800ef8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef94:	b2da      	uxtb	r2, r3
 800ef96:	2380      	movs	r3, #128	@ 0x80
 800ef98:	045c      	lsls	r4, r3, #17
 800ef9a:	230a      	movs	r3, #10
 800ef9c:	18fb      	adds	r3, r7, r3
 800ef9e:	8819      	ldrh	r1, [r3, #0]
 800efa0:	68f8      	ldr	r0, [r7, #12]
 800efa2:	2300      	movs	r3, #0
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	0023      	movs	r3, r4
 800efa8:	f002 f84e 	bl	8011048 <I2C_TransferConfig>
 800efac:	e012      	b.n	800efd4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800efbc:	b2da      	uxtb	r2, r3
 800efbe:	2380      	movs	r3, #128	@ 0x80
 800efc0:	049c      	lsls	r4, r3, #18
 800efc2:	230a      	movs	r3, #10
 800efc4:	18fb      	adds	r3, r7, r3
 800efc6:	8819      	ldrh	r1, [r3, #0]
 800efc8:	68f8      	ldr	r0, [r7, #12]
 800efca:	2300      	movs	r3, #0
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	0023      	movs	r3, r4
 800efd0:	f002 f83a 	bl	8011048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800efd8:	b29b      	uxth	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d197      	bne.n	800ef0e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800efde:	697a      	ldr	r2, [r7, #20]
 800efe0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	0018      	movs	r0, r3
 800efe6:	f001 fe71 	bl	8010ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 800efea:	1e03      	subs	r3, r0, #0
 800efec:	d001      	beq.n	800eff2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800efee:	2301      	movs	r3, #1
 800eff0:	e01a      	b.n	800f028 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	2220      	movs	r2, #32
 800eff8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	685a      	ldr	r2, [r3, #4]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	490b      	ldr	r1, [pc, #44]	@ (800f034 <HAL_I2C_Master_Receive+0x20c>)
 800f006:	400a      	ands	r2, r1
 800f008:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2241      	movs	r2, #65	@ 0x41
 800f00e:	2120      	movs	r1, #32
 800f010:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2242      	movs	r2, #66	@ 0x42
 800f016:	2100      	movs	r1, #0
 800f018:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2240      	movs	r2, #64	@ 0x40
 800f01e:	2100      	movs	r1, #0
 800f020:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	e000      	b.n	800f028 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800f026:	2302      	movs	r3, #2
  }
}
 800f028:	0018      	movs	r0, r3
 800f02a:	46bd      	mov	sp, r7
 800f02c:	b007      	add	sp, #28
 800f02e:	bd90      	pop	{r4, r7, pc}
 800f030:	80002400 	.word	0x80002400
 800f034:	fe00e800 	.word	0xfe00e800

0800f038 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800f038:	b5b0      	push	{r4, r5, r7, lr}
 800f03a:	b088      	sub	sp, #32
 800f03c:	af02      	add	r7, sp, #8
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	0008      	movs	r0, r1
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	0019      	movs	r1, r3
 800f046:	230a      	movs	r3, #10
 800f048:	18fb      	adds	r3, r7, r3
 800f04a:	1c02      	adds	r2, r0, #0
 800f04c:	801a      	strh	r2, [r3, #0]
 800f04e:	2308      	movs	r3, #8
 800f050:	18fb      	adds	r3, r7, r3
 800f052:	1c0a      	adds	r2, r1, #0
 800f054:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2241      	movs	r2, #65	@ 0x41
 800f05a:	5c9b      	ldrb	r3, [r3, r2]
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	2b20      	cmp	r3, #32
 800f060:	d000      	beq.n	800f064 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800f062:	e0dd      	b.n	800f220 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	699a      	ldr	r2, [r3, #24]
 800f06a:	2380      	movs	r3, #128	@ 0x80
 800f06c:	021b      	lsls	r3, r3, #8
 800f06e:	401a      	ands	r2, r3
 800f070:	2380      	movs	r3, #128	@ 0x80
 800f072:	021b      	lsls	r3, r3, #8
 800f074:	429a      	cmp	r2, r3
 800f076:	d101      	bne.n	800f07c <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800f078:	2302      	movs	r3, #2
 800f07a:	e0d2      	b.n	800f222 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2240      	movs	r2, #64	@ 0x40
 800f080:	5c9b      	ldrb	r3, [r3, r2]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d101      	bne.n	800f08a <HAL_I2C_Master_Transmit_DMA+0x52>
 800f086:	2302      	movs	r3, #2
 800f088:	e0cb      	b.n	800f222 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2240      	movs	r2, #64	@ 0x40
 800f08e:	2101      	movs	r1, #1
 800f090:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2241      	movs	r2, #65	@ 0x41
 800f096:	2121      	movs	r1, #33	@ 0x21
 800f098:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2242      	movs	r2, #66	@ 0x42
 800f09e:	2110      	movs	r1, #16
 800f0a0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	687a      	ldr	r2, [r7, #4]
 800f0ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	2208      	movs	r2, #8
 800f0b2:	18ba      	adds	r2, r7, r2
 800f0b4:	8812      	ldrh	r2, [r2, #0]
 800f0b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	4a5c      	ldr	r2, [pc, #368]	@ (800f22c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800f0bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	4a5b      	ldr	r2, [pc, #364]	@ (800f230 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800f0c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	2bff      	cmp	r3, #255	@ 0xff
 800f0cc:	d906      	bls.n	800f0dc <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	22ff      	movs	r2, #255	@ 0xff
 800f0d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f0d4:	2380      	movs	r3, #128	@ 0x80
 800f0d6:	045b      	lsls	r3, r3, #17
 800f0d8:	617b      	str	r3, [r7, #20]
 800f0da:	e007      	b.n	800f0ec <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f0e6:	2380      	movs	r3, #128	@ 0x80
 800f0e8:	049b      	lsls	r3, r3, #18
 800f0ea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d100      	bne.n	800f0f6 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800f0f4:	e078      	b.n	800f1e8 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d023      	beq.n	800f146 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f102:	4a4c      	ldr	r2, [pc, #304]	@ (800f234 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800f104:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f10a:	4a4b      	ldr	r2, [pc, #300]	@ (800f238 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800f10c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f112:	2200      	movs	r2, #0
 800f114:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f11a:	2200      	movs	r2, #0
 800f11c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f122:	6879      	ldr	r1, [r7, #4]
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	3328      	adds	r3, #40	@ 0x28
 800f12a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f130:	2513      	movs	r5, #19
 800f132:	197c      	adds	r4, r7, r5
 800f134:	f7fe ff7e 	bl	800e034 <HAL_DMA_Start_IT>
 800f138:	0003      	movs	r3, r0
 800f13a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f13c:	197b      	adds	r3, r7, r5
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d13d      	bne.n	800f1c0 <HAL_I2C_Master_Transmit_DMA+0x188>
 800f144:	e013      	b.n	800f16e <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2241      	movs	r2, #65	@ 0x41
 800f14a:	2120      	movs	r1, #32
 800f14c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2242      	movs	r2, #66	@ 0x42
 800f152:	2100      	movs	r1, #0
 800f154:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f15a:	2280      	movs	r2, #128	@ 0x80
 800f15c:	431a      	orrs	r2, r3
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	2240      	movs	r2, #64	@ 0x40
 800f166:	2100      	movs	r1, #0
 800f168:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f16a:	2301      	movs	r3, #1
 800f16c:	e059      	b.n	800f222 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f172:	b2da      	uxtb	r2, r3
 800f174:	697c      	ldr	r4, [r7, #20]
 800f176:	230a      	movs	r3, #10
 800f178:	18fb      	adds	r3, r7, r3
 800f17a:	8819      	ldrh	r1, [r3, #0]
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	4b2f      	ldr	r3, [pc, #188]	@ (800f23c <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f180:	9300      	str	r3, [sp, #0]
 800f182:	0023      	movs	r3, r4
 800f184:	f001 ff60 	bl	8011048 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f192:	1ad3      	subs	r3, r2, r3
 800f194:	b29a      	uxth	r2, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	2240      	movs	r2, #64	@ 0x40
 800f19e:	2100      	movs	r1, #0
 800f1a0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2110      	movs	r1, #16
 800f1a6:	0018      	movs	r0, r3
 800f1a8:	f001 ff88 	bl	80110bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2180      	movs	r1, #128	@ 0x80
 800f1b8:	01c9      	lsls	r1, r1, #7
 800f1ba:	430a      	orrs	r2, r1
 800f1bc:	601a      	str	r2, [r3, #0]
 800f1be:	e02d      	b.n	800f21c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2241      	movs	r2, #65	@ 0x41
 800f1c4:	2120      	movs	r1, #32
 800f1c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	2242      	movs	r2, #66	@ 0x42
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1d4:	2210      	movs	r2, #16
 800f1d6:	431a      	orrs	r2, r3
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2240      	movs	r2, #64	@ 0x40
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e01c      	b.n	800f222 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	4a15      	ldr	r2, [pc, #84]	@ (800f240 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800f1ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f1f2:	b2da      	uxtb	r2, r3
 800f1f4:	2380      	movs	r3, #128	@ 0x80
 800f1f6:	049c      	lsls	r4, r3, #18
 800f1f8:	230a      	movs	r3, #10
 800f1fa:	18fb      	adds	r3, r7, r3
 800f1fc:	8819      	ldrh	r1, [r3, #0]
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	4b0e      	ldr	r3, [pc, #56]	@ (800f23c <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	0023      	movs	r3, r4
 800f206:	f001 ff1f 	bl	8011048 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	2240      	movs	r2, #64	@ 0x40
 800f20e:	2100      	movs	r1, #0
 800f210:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2101      	movs	r1, #1
 800f216:	0018      	movs	r0, r3
 800f218:	f001 ff50 	bl	80110bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800f21c:	2300      	movs	r3, #0
 800f21e:	e000      	b.n	800f222 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f220:	2302      	movs	r3, #2
  }
}
 800f222:	0018      	movs	r0, r3
 800f224:	46bd      	mov	sp, r7
 800f226:	b006      	add	sp, #24
 800f228:	bdb0      	pop	{r4, r5, r7, pc}
 800f22a:	46c0      	nop			@ (mov r8, r8)
 800f22c:	ffff0000 	.word	0xffff0000
 800f230:	0800fa3d 	.word	0x0800fa3d
 800f234:	080109f5 	.word	0x080109f5
 800f238:	08010b35 	.word	0x08010b35
 800f23c:	80002000 	.word	0x80002000
 800f240:	0800f5e9 	.word	0x0800f5e9

0800f244 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800f244:	b5b0      	push	{r4, r5, r7, lr}
 800f246:	b088      	sub	sp, #32
 800f248:	af02      	add	r7, sp, #8
 800f24a:	60f8      	str	r0, [r7, #12]
 800f24c:	0008      	movs	r0, r1
 800f24e:	607a      	str	r2, [r7, #4]
 800f250:	0019      	movs	r1, r3
 800f252:	230a      	movs	r3, #10
 800f254:	18fb      	adds	r3, r7, r3
 800f256:	1c02      	adds	r2, r0, #0
 800f258:	801a      	strh	r2, [r3, #0]
 800f25a:	2308      	movs	r3, #8
 800f25c:	18fb      	adds	r3, r7, r3
 800f25e:	1c0a      	adds	r2, r1, #0
 800f260:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	2241      	movs	r2, #65	@ 0x41
 800f266:	5c9b      	ldrb	r3, [r3, r2]
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	2b20      	cmp	r3, #32
 800f26c:	d000      	beq.n	800f270 <HAL_I2C_Master_Receive_DMA+0x2c>
 800f26e:	e0dd      	b.n	800f42c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	699a      	ldr	r2, [r3, #24]
 800f276:	2380      	movs	r3, #128	@ 0x80
 800f278:	021b      	lsls	r3, r3, #8
 800f27a:	401a      	ands	r2, r3
 800f27c:	2380      	movs	r3, #128	@ 0x80
 800f27e:	021b      	lsls	r3, r3, #8
 800f280:	429a      	cmp	r2, r3
 800f282:	d101      	bne.n	800f288 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800f284:	2302      	movs	r3, #2
 800f286:	e0d2      	b.n	800f42e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2240      	movs	r2, #64	@ 0x40
 800f28c:	5c9b      	ldrb	r3, [r3, r2]
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d101      	bne.n	800f296 <HAL_I2C_Master_Receive_DMA+0x52>
 800f292:	2302      	movs	r3, #2
 800f294:	e0cb      	b.n	800f42e <HAL_I2C_Master_Receive_DMA+0x1ea>
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2240      	movs	r2, #64	@ 0x40
 800f29a:	2101      	movs	r1, #1
 800f29c:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2241      	movs	r2, #65	@ 0x41
 800f2a2:	2122      	movs	r1, #34	@ 0x22
 800f2a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2242      	movs	r2, #66	@ 0x42
 800f2aa:	2110      	movs	r1, #16
 800f2ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2208      	movs	r2, #8
 800f2be:	18ba      	adds	r2, r7, r2
 800f2c0:	8812      	ldrh	r2, [r2, #0]
 800f2c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	4a5c      	ldr	r2, [pc, #368]	@ (800f438 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800f2c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	4a5b      	ldr	r2, [pc, #364]	@ (800f43c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800f2ce:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	2bff      	cmp	r3, #255	@ 0xff
 800f2d8:	d906      	bls.n	800f2e8 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	22ff      	movs	r2, #255	@ 0xff
 800f2de:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f2e0:	2380      	movs	r3, #128	@ 0x80
 800f2e2:	045b      	lsls	r3, r3, #17
 800f2e4:	617b      	str	r3, [r7, #20]
 800f2e6:	e007      	b.n	800f2f8 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f2f2:	2380      	movs	r3, #128	@ 0x80
 800f2f4:	049b      	lsls	r3, r3, #18
 800f2f6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d100      	bne.n	800f302 <HAL_I2C_Master_Receive_DMA+0xbe>
 800f300:	e078      	b.n	800f3f4 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f306:	2b00      	cmp	r3, #0
 800f308:	d023      	beq.n	800f352 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f30e:	4a4c      	ldr	r2, [pc, #304]	@ (800f440 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800f310:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f316:	4a4b      	ldr	r2, [pc, #300]	@ (800f444 <HAL_I2C_Master_Receive_DMA+0x200>)
 800f318:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f31e:	2200      	movs	r2, #0
 800f320:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f326:	2200      	movs	r2, #0
 800f328:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	3324      	adds	r3, #36	@ 0x24
 800f334:	0019      	movs	r1, r3
 800f336:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f33c:	2513      	movs	r5, #19
 800f33e:	197c      	adds	r4, r7, r5
 800f340:	f7fe fe78 	bl	800e034 <HAL_DMA_Start_IT>
 800f344:	0003      	movs	r3, r0
 800f346:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f348:	197b      	adds	r3, r7, r5
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d13d      	bne.n	800f3cc <HAL_I2C_Master_Receive_DMA+0x188>
 800f350:	e013      	b.n	800f37a <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2241      	movs	r2, #65	@ 0x41
 800f356:	2120      	movs	r1, #32
 800f358:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	2242      	movs	r2, #66	@ 0x42
 800f35e:	2100      	movs	r1, #0
 800f360:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f366:	2280      	movs	r2, #128	@ 0x80
 800f368:	431a      	orrs	r2, r3
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2240      	movs	r2, #64	@ 0x40
 800f372:	2100      	movs	r1, #0
 800f374:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f376:	2301      	movs	r3, #1
 800f378:	e059      	b.n	800f42e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f37e:	b2da      	uxtb	r2, r3
 800f380:	697c      	ldr	r4, [r7, #20]
 800f382:	230a      	movs	r3, #10
 800f384:	18fb      	adds	r3, r7, r3
 800f386:	8819      	ldrh	r1, [r3, #0]
 800f388:	68f8      	ldr	r0, [r7, #12]
 800f38a:	4b2f      	ldr	r3, [pc, #188]	@ (800f448 <HAL_I2C_Master_Receive_DMA+0x204>)
 800f38c:	9300      	str	r3, [sp, #0]
 800f38e:	0023      	movs	r3, r4
 800f390:	f001 fe5a 	bl	8011048 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f398:	b29a      	uxth	r2, r3
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	2240      	movs	r2, #64	@ 0x40
 800f3aa:	2100      	movs	r1, #0
 800f3ac:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	2110      	movs	r1, #16
 800f3b2:	0018      	movs	r0, r3
 800f3b4:	f001 fe82 	bl	80110bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	681a      	ldr	r2, [r3, #0]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	2180      	movs	r1, #128	@ 0x80
 800f3c4:	0209      	lsls	r1, r1, #8
 800f3c6:	430a      	orrs	r2, r1
 800f3c8:	601a      	str	r2, [r3, #0]
 800f3ca:	e02d      	b.n	800f428 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2241      	movs	r2, #65	@ 0x41
 800f3d0:	2120      	movs	r1, #32
 800f3d2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2242      	movs	r2, #66	@ 0x42
 800f3d8:	2100      	movs	r1, #0
 800f3da:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3e0:	2210      	movs	r2, #16
 800f3e2:	431a      	orrs	r2, r3
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2240      	movs	r2, #64	@ 0x40
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e01c      	b.n	800f42e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4a15      	ldr	r2, [pc, #84]	@ (800f44c <HAL_I2C_Master_Receive_DMA+0x208>)
 800f3f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3fe:	b2da      	uxtb	r2, r3
 800f400:	2380      	movs	r3, #128	@ 0x80
 800f402:	049c      	lsls	r4, r3, #18
 800f404:	230a      	movs	r3, #10
 800f406:	18fb      	adds	r3, r7, r3
 800f408:	8819      	ldrh	r1, [r3, #0]
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	4b0e      	ldr	r3, [pc, #56]	@ (800f448 <HAL_I2C_Master_Receive_DMA+0x204>)
 800f40e:	9300      	str	r3, [sp, #0]
 800f410:	0023      	movs	r3, r4
 800f412:	f001 fe19 	bl	8011048 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2240      	movs	r2, #64	@ 0x40
 800f41a:	2100      	movs	r1, #0
 800f41c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2101      	movs	r1, #1
 800f422:	0018      	movs	r0, r3
 800f424:	f001 fe4a 	bl	80110bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800f428:	2300      	movs	r3, #0
 800f42a:	e000      	b.n	800f42e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f42c:	2302      	movs	r3, #2
  }
}
 800f42e:	0018      	movs	r0, r3
 800f430:	46bd      	mov	sp, r7
 800f432:	b006      	add	sp, #24
 800f434:	bdb0      	pop	{r4, r5, r7, pc}
 800f436:	46c0      	nop			@ (mov r8, r8)
 800f438:	ffff0000 	.word	0xffff0000
 800f43c:	0800fa3d 	.word	0x0800fa3d
 800f440:	08010a95 	.word	0x08010a95
 800f444:	08010b35 	.word	0x08010b35
 800f448:	80002400 	.word	0x80002400
 800f44c:	0800f5e9 	.word	0x0800f5e9

0800f450 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d005      	beq.n	800f47c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f474:	68ba      	ldr	r2, [r7, #8]
 800f476:	68f9      	ldr	r1, [r7, #12]
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	4798      	blx	r3
  }
}
 800f47c:	46c0      	nop			@ (mov r8, r8)
 800f47e:	46bd      	mov	sp, r7
 800f480:	b004      	add	sp, #16
 800f482:	bd80      	pop	{r7, pc}

0800f484 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b086      	sub	sp, #24
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f49c:	697a      	ldr	r2, [r7, #20]
 800f49e:	2380      	movs	r3, #128	@ 0x80
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	4013      	ands	r3, r2
 800f4a4:	d00e      	beq.n	800f4c4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f4a6:	693b      	ldr	r3, [r7, #16]
 800f4a8:	2280      	movs	r2, #128	@ 0x80
 800f4aa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800f4ac:	d00a      	beq.n	800f4c4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	431a      	orrs	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2280      	movs	r2, #128	@ 0x80
 800f4c0:	0052      	lsls	r2, r2, #1
 800f4c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f4c4:	697a      	ldr	r2, [r7, #20]
 800f4c6:	2380      	movs	r3, #128	@ 0x80
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	d00e      	beq.n	800f4ec <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	2280      	movs	r2, #128	@ 0x80
 800f4d2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800f4d4:	d00a      	beq.n	800f4ec <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4da:	2208      	movs	r2, #8
 800f4dc:	431a      	orrs	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	2280      	movs	r2, #128	@ 0x80
 800f4e8:	00d2      	lsls	r2, r2, #3
 800f4ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f4ec:	697a      	ldr	r2, [r7, #20]
 800f4ee:	2380      	movs	r3, #128	@ 0x80
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	4013      	ands	r3, r2
 800f4f4:	d00e      	beq.n	800f514 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2280      	movs	r2, #128	@ 0x80
 800f4fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800f4fc:	d00a      	beq.n	800f514 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f502:	2202      	movs	r2, #2
 800f504:	431a      	orrs	r2, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	2280      	movs	r2, #128	@ 0x80
 800f510:	0092      	lsls	r2, r2, #2
 800f512:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f518:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	220b      	movs	r2, #11
 800f51e:	4013      	ands	r3, r2
 800f520:	d005      	beq.n	800f52e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800f522:	68fa      	ldr	r2, [r7, #12]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	0011      	movs	r1, r2
 800f528:	0018      	movs	r0, r3
 800f52a:	f001 f915 	bl	8010758 <I2C_ITError>
  }
}
 800f52e:	46c0      	nop			@ (mov r8, r8)
 800f530:	46bd      	mov	sp, r7
 800f532:	b006      	add	sp, #24
 800f534:	bd80      	pop	{r7, pc}

0800f536 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f536:	b580      	push	{r7, lr}
 800f538:	b082      	sub	sp, #8
 800f53a:	af00      	add	r7, sp, #0
 800f53c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f53e:	46c0      	nop			@ (mov r8, r8)
 800f540:	46bd      	mov	sp, r7
 800f542:	b002      	add	sp, #8
 800f544:	bd80      	pop	{r7, pc}

0800f546 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f546:	b580      	push	{r7, lr}
 800f548:	b082      	sub	sp, #8
 800f54a:	af00      	add	r7, sp, #0
 800f54c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f54e:	46c0      	nop			@ (mov r8, r8)
 800f550:	46bd      	mov	sp, r7
 800f552:	b002      	add	sp, #8
 800f554:	bd80      	pop	{r7, pc}

0800f556 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f556:	b580      	push	{r7, lr}
 800f558:	b082      	sub	sp, #8
 800f55a:	af00      	add	r7, sp, #0
 800f55c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f55e:	46c0      	nop			@ (mov r8, r8)
 800f560:	46bd      	mov	sp, r7
 800f562:	b002      	add	sp, #8
 800f564:	bd80      	pop	{r7, pc}

0800f566 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b082      	sub	sp, #8
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f56e:	46c0      	nop			@ (mov r8, r8)
 800f570:	46bd      	mov	sp, r7
 800f572:	b002      	add	sp, #8
 800f574:	bd80      	pop	{r7, pc}

0800f576 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f576:	b580      	push	{r7, lr}
 800f578:	b082      	sub	sp, #8
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
 800f57e:	0008      	movs	r0, r1
 800f580:	0011      	movs	r1, r2
 800f582:	1cfb      	adds	r3, r7, #3
 800f584:	1c02      	adds	r2, r0, #0
 800f586:	701a      	strb	r2, [r3, #0]
 800f588:	003b      	movs	r3, r7
 800f58a:	1c0a      	adds	r2, r1, #0
 800f58c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f58e:	46c0      	nop			@ (mov r8, r8)
 800f590:	46bd      	mov	sp, r7
 800f592:	b002      	add	sp, #8
 800f594:	bd80      	pop	{r7, pc}

0800f596 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800f59e:	46c0      	nop			@ (mov r8, r8)
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	b002      	add	sp, #8
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b082      	sub	sp, #8
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f5ae:	46c0      	nop			@ (mov r8, r8)
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	b002      	add	sp, #8
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b082      	sub	sp, #8
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f5be:	46c0      	nop			@ (mov r8, r8)
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	b002      	add	sp, #8
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b082      	sub	sp, #8
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f5ce:	46c0      	nop			@ (mov r8, r8)
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	b002      	add	sp, #8
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b082      	sub	sp, #8
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f5de:	46c0      	nop			@ (mov r8, r8)
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	b002      	add	sp, #8
 800f5e4:	bd80      	pop	{r7, pc}
	...

0800f5e8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800f5e8:	b590      	push	{r4, r7, lr}
 800f5ea:	b089      	sub	sp, #36	@ 0x24
 800f5ec:	af02      	add	r7, sp, #8
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2240      	movs	r2, #64	@ 0x40
 800f5fc:	5c9b      	ldrb	r3, [r3, r2]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d101      	bne.n	800f606 <I2C_Master_ISR_IT+0x1e>
 800f602:	2302      	movs	r3, #2
 800f604:	e113      	b.n	800f82e <I2C_Master_ISR_IT+0x246>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2240      	movs	r2, #64	@ 0x40
 800f60a:	2101      	movs	r1, #1
 800f60c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	2210      	movs	r2, #16
 800f612:	4013      	ands	r3, r2
 800f614:	d012      	beq.n	800f63c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2210      	movs	r2, #16
 800f61a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f61c:	d00e      	beq.n	800f63c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2210      	movs	r2, #16
 800f624:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f62a:	2204      	movs	r2, #4
 800f62c:	431a      	orrs	r2, r3
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	0018      	movs	r0, r3
 800f636:	f001 f9ba 	bl	80109ae <I2C_Flush_TXDR>
 800f63a:	e0e5      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	2204      	movs	r2, #4
 800f640:	4013      	ands	r3, r2
 800f642:	d021      	beq.n	800f688 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2204      	movs	r2, #4
 800f648:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f64a:	d01d      	beq.n	800f688 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	2204      	movs	r2, #4
 800f650:	4393      	bics	r3, r2
 800f652:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f65e:	b2d2      	uxtb	r2, r2
 800f660:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f666:	1c5a      	adds	r2, r3, #1
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f670:	3b01      	subs	r3, #1
 800f672:	b29a      	uxth	r2, r3
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f67c:	b29b      	uxth	r3, r3
 800f67e:	3b01      	subs	r3, #1
 800f680:	b29a      	uxth	r2, r3
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f686:	e0bf      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	2202      	movs	r2, #2
 800f68c:	4013      	ands	r3, r2
 800f68e:	d01c      	beq.n	800f6ca <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2202      	movs	r2, #2
 800f694:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f696:	d018      	beq.n	800f6ca <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f69c:	781a      	ldrb	r2, [r3, #0]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6a8:	1c5a      	adds	r2, r3, #1
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f6c8:	e09e      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	2280      	movs	r2, #128	@ 0x80
 800f6ce:	4013      	ands	r3, r2
 800f6d0:	d100      	bne.n	800f6d4 <I2C_Master_ISR_IT+0xec>
 800f6d2:	e069      	b.n	800f7a8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2240      	movs	r2, #64	@ 0x40
 800f6d8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800f6da:	d065      	beq.n	800f7a8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d04a      	beq.n	800f77c <I2C_Master_ISR_IT+0x194>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d146      	bne.n	800f77c <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	b29a      	uxth	r2, r3
 800f6f6:	2112      	movs	r1, #18
 800f6f8:	187b      	adds	r3, r7, r1
 800f6fa:	0592      	lsls	r2, r2, #22
 800f6fc:	0d92      	lsrs	r2, r2, #22
 800f6fe:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f704:	b29b      	uxth	r3, r3
 800f706:	2bff      	cmp	r3, #255	@ 0xff
 800f708:	d910      	bls.n	800f72c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	22ff      	movs	r2, #255	@ 0xff
 800f70e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f714:	b2da      	uxtb	r2, r3
 800f716:	2380      	movs	r3, #128	@ 0x80
 800f718:	045c      	lsls	r4, r3, #17
 800f71a:	187b      	adds	r3, r7, r1
 800f71c:	8819      	ldrh	r1, [r3, #0]
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	2300      	movs	r3, #0
 800f722:	9300      	str	r3, [sp, #0]
 800f724:	0023      	movs	r3, r4
 800f726:	f001 fc8f 	bl	8011048 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f72a:	e03c      	b.n	800f7a6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f730:	b29a      	uxth	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f73a:	4a3f      	ldr	r2, [pc, #252]	@ (800f838 <I2C_Master_ISR_IT+0x250>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d00e      	beq.n	800f75e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f744:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800f74a:	2312      	movs	r3, #18
 800f74c:	18fb      	adds	r3, r7, r3
 800f74e:	8819      	ldrh	r1, [r3, #0]
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	2300      	movs	r3, #0
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	0023      	movs	r3, r4
 800f758:	f001 fc76 	bl	8011048 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f75c:	e023      	b.n	800f7a6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f762:	b2da      	uxtb	r2, r3
 800f764:	2380      	movs	r3, #128	@ 0x80
 800f766:	049c      	lsls	r4, r3, #18
 800f768:	2312      	movs	r3, #18
 800f76a:	18fb      	adds	r3, r7, r3
 800f76c:	8819      	ldrh	r1, [r3, #0]
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	2300      	movs	r3, #0
 800f772:	9300      	str	r3, [sp, #0]
 800f774:	0023      	movs	r3, r4
 800f776:	f001 fc67 	bl	8011048 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f77a:	e014      	b.n	800f7a6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	685a      	ldr	r2, [r3, #4]
 800f782:	2380      	movs	r3, #128	@ 0x80
 800f784:	049b      	lsls	r3, r3, #18
 800f786:	401a      	ands	r2, r3
 800f788:	2380      	movs	r3, #128	@ 0x80
 800f78a:	049b      	lsls	r3, r3, #18
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d004      	beq.n	800f79a <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	0018      	movs	r0, r3
 800f794:	f000 fcf4 	bl	8010180 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f798:	e036      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	2140      	movs	r1, #64	@ 0x40
 800f79e:	0018      	movs	r0, r3
 800f7a0:	f000 ffda 	bl	8010758 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f7a4:	e030      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
 800f7a6:	e02f      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	2240      	movs	r2, #64	@ 0x40
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	d02b      	beq.n	800f808 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2240      	movs	r2, #64	@ 0x40
 800f7b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800f7b6:	d027      	beq.n	800f808 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d11d      	bne.n	800f7fe <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	685a      	ldr	r2, [r3, #4]
 800f7c8:	2380      	movs	r3, #128	@ 0x80
 800f7ca:	049b      	lsls	r3, r3, #18
 800f7cc:	401a      	ands	r2, r3
 800f7ce:	2380      	movs	r3, #128	@ 0x80
 800f7d0:	049b      	lsls	r3, r3, #18
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d018      	beq.n	800f808 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7da:	4a17      	ldr	r2, [pc, #92]	@ (800f838 <I2C_Master_ISR_IT+0x250>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d109      	bne.n	800f7f4 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	685a      	ldr	r2, [r3, #4]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2180      	movs	r1, #128	@ 0x80
 800f7ec:	01c9      	lsls	r1, r1, #7
 800f7ee:	430a      	orrs	r2, r1
 800f7f0:	605a      	str	r2, [r3, #4]
 800f7f2:	e009      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	0018      	movs	r0, r3
 800f7f8:	f000 fcc2 	bl	8010180 <I2C_ITMasterSeqCplt>
 800f7fc:	e004      	b.n	800f808 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2140      	movs	r1, #64	@ 0x40
 800f802:	0018      	movs	r0, r3
 800f804:	f000 ffa8 	bl	8010758 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	2220      	movs	r2, #32
 800f80c:	4013      	ands	r3, r2
 800f80e:	d009      	beq.n	800f824 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2220      	movs	r2, #32
 800f814:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f816:	d005      	beq.n	800f824 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800f818:	697a      	ldr	r2, [r7, #20]
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	0011      	movs	r1, r2
 800f81e:	0018      	movs	r0, r3
 800f820:	f000 fd54 	bl	80102cc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2240      	movs	r2, #64	@ 0x40
 800f828:	2100      	movs	r1, #0
 800f82a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f82c:	2300      	movs	r3, #0
}
 800f82e:	0018      	movs	r0, r3
 800f830:	46bd      	mov	sp, r7
 800f832:	b007      	add	sp, #28
 800f834:	bd90      	pop	{r4, r7, pc}
 800f836:	46c0      	nop			@ (mov r8, r8)
 800f838:	ffff0000 	.word	0xffff0000

0800f83c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b086      	sub	sp, #24
 800f840:	af00      	add	r7, sp, #0
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f84c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2240      	movs	r2, #64	@ 0x40
 800f856:	5c9b      	ldrb	r3, [r3, r2]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d101      	bne.n	800f860 <I2C_Slave_ISR_IT+0x24>
 800f85c:	2302      	movs	r3, #2
 800f85e:	e0e6      	b.n	800fa2e <I2C_Slave_ISR_IT+0x1f2>
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2240      	movs	r2, #64	@ 0x40
 800f864:	2101      	movs	r1, #1
 800f866:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	2220      	movs	r2, #32
 800f86c:	4013      	ands	r3, r2
 800f86e:	d009      	beq.n	800f884 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2220      	movs	r2, #32
 800f874:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800f876:	d005      	beq.n	800f884 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800f878:	693a      	ldr	r2, [r7, #16]
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	0011      	movs	r1, r2
 800f87e:	0018      	movs	r0, r3
 800f880:	f000 fdf2 	bl	8010468 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	2210      	movs	r2, #16
 800f888:	4013      	ands	r3, r2
 800f88a:	d052      	beq.n	800f932 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2210      	movs	r2, #16
 800f890:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800f892:	d04e      	beq.n	800f932 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f898:	b29b      	uxth	r3, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d12d      	bne.n	800f8fa <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2241      	movs	r2, #65	@ 0x41
 800f8a2:	5c9b      	ldrb	r3, [r3, r2]
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	2b28      	cmp	r3, #40	@ 0x28
 800f8a8:	d10b      	bne.n	800f8c2 <I2C_Slave_ISR_IT+0x86>
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	2380      	movs	r3, #128	@ 0x80
 800f8ae:	049b      	lsls	r3, r3, #18
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d106      	bne.n	800f8c2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800f8b4:	693a      	ldr	r2, [r7, #16]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	0011      	movs	r1, r2
 800f8ba:	0018      	movs	r0, r3
 800f8bc:	f000 fef4 	bl	80106a8 <I2C_ITListenCplt>
 800f8c0:	e036      	b.n	800f930 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2241      	movs	r2, #65	@ 0x41
 800f8c6:	5c9b      	ldrb	r3, [r3, r2]
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	2b29      	cmp	r3, #41	@ 0x29
 800f8cc:	d110      	bne.n	800f8f0 <I2C_Slave_ISR_IT+0xb4>
 800f8ce:	697b      	ldr	r3, [r7, #20]
 800f8d0:	4a59      	ldr	r2, [pc, #356]	@ (800fa38 <I2C_Slave_ISR_IT+0x1fc>)
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d00c      	beq.n	800f8f0 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	2210      	movs	r2, #16
 800f8dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	0018      	movs	r0, r3
 800f8e2:	f001 f864 	bl	80109ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	0018      	movs	r0, r3
 800f8ea:	f000 fc8b 	bl	8010204 <I2C_ITSlaveSeqCplt>
 800f8ee:	e01f      	b.n	800f930 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2210      	movs	r2, #16
 800f8f6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800f8f8:	e091      	b.n	800fa1e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	2210      	movs	r2, #16
 800f900:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f906:	2204      	movs	r2, #4
 800f908:	431a      	orrs	r2, r3
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d005      	beq.n	800f920 <I2C_Slave_ISR_IT+0xe4>
 800f914:	697a      	ldr	r2, [r7, #20]
 800f916:	2380      	movs	r3, #128	@ 0x80
 800f918:	045b      	lsls	r3, r3, #17
 800f91a:	429a      	cmp	r2, r3
 800f91c:	d000      	beq.n	800f920 <I2C_Slave_ISR_IT+0xe4>
 800f91e:	e07e      	b.n	800fa1e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	0011      	movs	r1, r2
 800f928:	0018      	movs	r0, r3
 800f92a:	f000 ff15 	bl	8010758 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800f92e:	e076      	b.n	800fa1e <I2C_Slave_ISR_IT+0x1e2>
 800f930:	e075      	b.n	800fa1e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	2204      	movs	r2, #4
 800f936:	4013      	ands	r3, r2
 800f938:	d02f      	beq.n	800f99a <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2204      	movs	r2, #4
 800f93e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800f940:	d02b      	beq.n	800f99a <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f946:	b29b      	uxth	r3, r3
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d018      	beq.n	800f97e <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f956:	b2d2      	uxtb	r2, r2
 800f958:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f968:	3b01      	subs	r3, #1
 800f96a:	b29a      	uxth	r2, r3
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f974:	b29b      	uxth	r3, r3
 800f976:	3b01      	subs	r3, #1
 800f978:	b29a      	uxth	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f982:	b29b      	uxth	r3, r3
 800f984:	2b00      	cmp	r3, #0
 800f986:	d14c      	bne.n	800fa22 <I2C_Slave_ISR_IT+0x1e6>
 800f988:	697b      	ldr	r3, [r7, #20]
 800f98a:	4a2b      	ldr	r2, [pc, #172]	@ (800fa38 <I2C_Slave_ISR_IT+0x1fc>)
 800f98c:	4293      	cmp	r3, r2
 800f98e:	d048      	beq.n	800fa22 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	0018      	movs	r0, r3
 800f994:	f000 fc36 	bl	8010204 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800f998:	e043      	b.n	800fa22 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	2208      	movs	r2, #8
 800f99e:	4013      	ands	r3, r2
 800f9a0:	d00a      	beq.n	800f9b8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2208      	movs	r2, #8
 800f9a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800f9a8:	d006      	beq.n	800f9b8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800f9aa:	693a      	ldr	r2, [r7, #16]
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	0011      	movs	r1, r2
 800f9b0:	0018      	movs	r0, r3
 800f9b2:	f000 fb41 	bl	8010038 <I2C_ITAddrCplt>
 800f9b6:	e035      	b.n	800fa24 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f9b8:	693b      	ldr	r3, [r7, #16]
 800f9ba:	2202      	movs	r2, #2
 800f9bc:	4013      	ands	r3, r2
 800f9be:	d031      	beq.n	800fa24 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2202      	movs	r2, #2
 800f9c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800f9c6:	d02d      	beq.n	800fa24 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d018      	beq.n	800fa04 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9d6:	781a      	ldrb	r2, [r3, #0]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9e2:	1c5a      	adds	r2, r3, #1
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	b29a      	uxth	r2, r3
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	851a      	strh	r2, [r3, #40]	@ 0x28
 800fa02:	e00f      	b.n	800fa24 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800fa04:	697a      	ldr	r2, [r7, #20]
 800fa06:	2380      	movs	r3, #128	@ 0x80
 800fa08:	045b      	lsls	r3, r3, #17
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d002      	beq.n	800fa14 <I2C_Slave_ISR_IT+0x1d8>
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d107      	bne.n	800fa24 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	0018      	movs	r0, r3
 800fa18:	f000 fbf4 	bl	8010204 <I2C_ITSlaveSeqCplt>
 800fa1c:	e002      	b.n	800fa24 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800fa1e:	46c0      	nop			@ (mov r8, r8)
 800fa20:	e000      	b.n	800fa24 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800fa22:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2240      	movs	r2, #64	@ 0x40
 800fa28:	2100      	movs	r1, #0
 800fa2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fa2c:	2300      	movs	r3, #0
}
 800fa2e:	0018      	movs	r0, r3
 800fa30:	46bd      	mov	sp, r7
 800fa32:	b006      	add	sp, #24
 800fa34:	bd80      	pop	{r7, pc}
 800fa36:	46c0      	nop			@ (mov r8, r8)
 800fa38:	ffff0000 	.word	0xffff0000

0800fa3c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800fa3c:	b590      	push	{r4, r7, lr}
 800fa3e:	b089      	sub	sp, #36	@ 0x24
 800fa40:	af02      	add	r7, sp, #8
 800fa42:	60f8      	str	r0, [r7, #12]
 800fa44:	60b9      	str	r1, [r7, #8]
 800fa46:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2240      	movs	r2, #64	@ 0x40
 800fa4c:	5c9b      	ldrb	r3, [r3, r2]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d101      	bne.n	800fa56 <I2C_Master_ISR_DMA+0x1a>
 800fa52:	2302      	movs	r3, #2
 800fa54:	e0e7      	b.n	800fc26 <I2C_Master_ISR_DMA+0x1ea>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2240      	movs	r2, #64	@ 0x40
 800fa5a:	2101      	movs	r1, #1
 800fa5c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	2210      	movs	r2, #16
 800fa62:	4013      	ands	r3, r2
 800fa64:	d017      	beq.n	800fa96 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2210      	movs	r2, #16
 800fa6a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fa6c:	d013      	beq.n	800fa96 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2210      	movs	r2, #16
 800fa74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa7a:	2204      	movs	r2, #4
 800fa7c:	431a      	orrs	r2, r3
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2120      	movs	r1, #32
 800fa86:	0018      	movs	r0, r3
 800fa88:	f001 fb18 	bl	80110bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	0018      	movs	r0, r3
 800fa90:	f000 ff8d 	bl	80109ae <I2C_Flush_TXDR>
 800fa94:	e0c2      	b.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	2280      	movs	r2, #128	@ 0x80
 800fa9a:	4013      	ands	r3, r2
 800fa9c:	d100      	bne.n	800faa0 <I2C_Master_ISR_DMA+0x64>
 800fa9e:	e07c      	b.n	800fb9a <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2240      	movs	r2, #64	@ 0x40
 800faa4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800faa6:	d100      	bne.n	800faaa <I2C_Master_ISR_DMA+0x6e>
 800faa8:	e077      	b.n	800fb9a <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2140      	movs	r1, #64	@ 0x40
 800fab6:	438a      	bics	r2, r1
 800fab8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d055      	beq.n	800fb70 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	685b      	ldr	r3, [r3, #4]
 800faca:	b29a      	uxth	r2, r3
 800facc:	2312      	movs	r3, #18
 800face:	18fb      	adds	r3, r7, r3
 800fad0:	0592      	lsls	r2, r2, #22
 800fad2:	0d92      	lsrs	r2, r2, #22
 800fad4:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fada:	b29b      	uxth	r3, r3
 800fadc:	2bff      	cmp	r3, #255	@ 0xff
 800fade:	d906      	bls.n	800faee <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	22ff      	movs	r2, #255	@ 0xff
 800fae4:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800fae6:	2380      	movs	r3, #128	@ 0x80
 800fae8:	045b      	lsls	r3, r3, #17
 800faea:	617b      	str	r3, [r7, #20]
 800faec:	e010      	b.n	800fb10 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fafc:	4a4c      	ldr	r2, [pc, #304]	@ (800fc30 <I2C_Master_ISR_DMA+0x1f4>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d003      	beq.n	800fb0a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb06:	617b      	str	r3, [r7, #20]
 800fb08:	e002      	b.n	800fb10 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800fb0a:	2380      	movs	r3, #128	@ 0x80
 800fb0c:	049b      	lsls	r3, r3, #18
 800fb0e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	697c      	ldr	r4, [r7, #20]
 800fb18:	2312      	movs	r3, #18
 800fb1a:	18fb      	adds	r3, r7, r3
 800fb1c:	8819      	ldrh	r1, [r3, #0]
 800fb1e:	68f8      	ldr	r0, [r7, #12]
 800fb20:	2300      	movs	r3, #0
 800fb22:	9300      	str	r3, [sp, #0]
 800fb24:	0023      	movs	r3, r4
 800fb26:	f001 fa8f 	bl	8011048 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fb2e:	b29a      	uxth	r2, r3
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2241      	movs	r2, #65	@ 0x41
 800fb40:	5c9b      	ldrb	r3, [r3, r2]
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b22      	cmp	r3, #34	@ 0x22
 800fb46:	d109      	bne.n	800fb5c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2180      	movs	r1, #128	@ 0x80
 800fb54:	0209      	lsls	r1, r1, #8
 800fb56:	430a      	orrs	r2, r1
 800fb58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fb5a:	e05f      	b.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2180      	movs	r1, #128	@ 0x80
 800fb68:	01c9      	lsls	r1, r1, #7
 800fb6a:	430a      	orrs	r2, r1
 800fb6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fb6e:	e055      	b.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	685a      	ldr	r2, [r3, #4]
 800fb76:	2380      	movs	r3, #128	@ 0x80
 800fb78:	049b      	lsls	r3, r3, #18
 800fb7a:	401a      	ands	r2, r3
 800fb7c:	2380      	movs	r3, #128	@ 0x80
 800fb7e:	049b      	lsls	r3, r3, #18
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d004      	beq.n	800fb8e <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	0018      	movs	r0, r3
 800fb88:	f000 fafa 	bl	8010180 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800fb8c:	e046      	b.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	2140      	movs	r1, #64	@ 0x40
 800fb92:	0018      	movs	r0, r3
 800fb94:	f000 fde0 	bl	8010758 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800fb98:	e040      	b.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	2240      	movs	r2, #64	@ 0x40
 800fb9e:	4013      	ands	r3, r2
 800fba0:	d02c      	beq.n	800fbfc <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2240      	movs	r2, #64	@ 0x40
 800fba6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fba8:	d028      	beq.n	800fbfc <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d11d      	bne.n	800fbf0 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	685a      	ldr	r2, [r3, #4]
 800fbba:	2380      	movs	r3, #128	@ 0x80
 800fbbc:	049b      	lsls	r3, r3, #18
 800fbbe:	401a      	ands	r2, r3
 800fbc0:	2380      	movs	r3, #128	@ 0x80
 800fbc2:	049b      	lsls	r3, r3, #18
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d028      	beq.n	800fc1a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbcc:	4a18      	ldr	r2, [pc, #96]	@ (800fc30 <I2C_Master_ISR_DMA+0x1f4>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d109      	bne.n	800fbe6 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	685a      	ldr	r2, [r3, #4]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	2180      	movs	r1, #128	@ 0x80
 800fbde:	01c9      	lsls	r1, r1, #7
 800fbe0:	430a      	orrs	r2, r1
 800fbe2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800fbe4:	e019      	b.n	800fc1a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	0018      	movs	r0, r3
 800fbea:	f000 fac9 	bl	8010180 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800fbee:	e014      	b.n	800fc1a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2140      	movs	r1, #64	@ 0x40
 800fbf4:	0018      	movs	r0, r3
 800fbf6:	f000 fdaf 	bl	8010758 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800fbfa:	e00e      	b.n	800fc1a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2220      	movs	r2, #32
 800fc00:	4013      	ands	r3, r2
 800fc02:	d00b      	beq.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2220      	movs	r2, #32
 800fc08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fc0a:	d007      	beq.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800fc0c:	68ba      	ldr	r2, [r7, #8]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	0011      	movs	r1, r2
 800fc12:	0018      	movs	r0, r3
 800fc14:	f000 fb5a 	bl	80102cc <I2C_ITMasterCplt>
 800fc18:	e000      	b.n	800fc1c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800fc1a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2240      	movs	r2, #64	@ 0x40
 800fc20:	2100      	movs	r1, #0
 800fc22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fc24:	2300      	movs	r3, #0
}
 800fc26:	0018      	movs	r0, r3
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	b007      	add	sp, #28
 800fc2c:	bd90      	pop	{r4, r7, pc}
 800fc2e:	46c0      	nop			@ (mov r8, r8)
 800fc30:	ffff0000 	.word	0xffff0000

0800fc34 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800fc34:	b590      	push	{r4, r7, lr}
 800fc36:	b089      	sub	sp, #36	@ 0x24
 800fc38:	af02      	add	r7, sp, #8
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800fc40:	4b88      	ldr	r3, [pc, #544]	@ (800fe64 <I2C_Mem_ISR_DMA+0x230>)
 800fc42:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2240      	movs	r2, #64	@ 0x40
 800fc48:	5c9b      	ldrb	r3, [r3, r2]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d101      	bne.n	800fc52 <I2C_Mem_ISR_DMA+0x1e>
 800fc4e:	2302      	movs	r3, #2
 800fc50:	e104      	b.n	800fe5c <I2C_Mem_ISR_DMA+0x228>
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	2240      	movs	r2, #64	@ 0x40
 800fc56:	2101      	movs	r1, #1
 800fc58:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	2210      	movs	r2, #16
 800fc5e:	4013      	ands	r3, r2
 800fc60:	d017      	beq.n	800fc92 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2210      	movs	r2, #16
 800fc66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fc68:	d013      	beq.n	800fc92 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2210      	movs	r2, #16
 800fc70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc76:	2204      	movs	r2, #4
 800fc78:	431a      	orrs	r2, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2120      	movs	r1, #32
 800fc82:	0018      	movs	r0, r3
 800fc84:	f001 fa1a 	bl	80110bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	0018      	movs	r0, r3
 800fc8c:	f000 fe8f 	bl	80109ae <I2C_Flush_TXDR>
 800fc90:	e0df      	b.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	2202      	movs	r2, #2
 800fc96:	4013      	ands	r3, r2
 800fc98:	d00d      	beq.n	800fcb6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2202      	movs	r2, #2
 800fc9e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fca0:	d009      	beq.n	800fcb6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800fcaa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2201      	movs	r2, #1
 800fcb0:	4252      	negs	r2, r2
 800fcb2:	651a      	str	r2, [r3, #80]	@ 0x50
 800fcb4:	e0cd      	b.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800fcb6:	68bb      	ldr	r3, [r7, #8]
 800fcb8:	2280      	movs	r2, #128	@ 0x80
 800fcba:	4013      	ands	r3, r2
 800fcbc:	d05e      	beq.n	800fd7c <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2240      	movs	r2, #64	@ 0x40
 800fcc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800fcc4:	d05a      	beq.n	800fd7c <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2110      	movs	r1, #16
 800fcca:	0018      	movs	r0, r3
 800fccc:	f001 f9f6 	bl	80110bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d04a      	beq.n	800fd70 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcde:	b29b      	uxth	r3, r3
 800fce0:	2bff      	cmp	r3, #255	@ 0xff
 800fce2:	d910      	bls.n	800fd06 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	22ff      	movs	r2, #255	@ 0xff
 800fce8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcee:	b299      	uxth	r1, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcf4:	b2da      	uxtb	r2, r3
 800fcf6:	2380      	movs	r3, #128	@ 0x80
 800fcf8:	045b      	lsls	r3, r3, #17
 800fcfa:	68f8      	ldr	r0, [r7, #12]
 800fcfc:	2400      	movs	r4, #0
 800fcfe:	9400      	str	r4, [sp, #0]
 800fd00:	f001 f9a2 	bl	8011048 <I2C_TransferConfig>
 800fd04:	e011      	b.n	800fd2a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd0a:	b29a      	uxth	r2, r3
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd14:	b299      	uxth	r1, r3
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd1a:	b2da      	uxtb	r2, r3
 800fd1c:	2380      	movs	r3, #128	@ 0x80
 800fd1e:	049b      	lsls	r3, r3, #18
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	2400      	movs	r4, #0
 800fd24:	9400      	str	r4, [sp, #0]
 800fd26:	f001 f98f 	bl	8011048 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd34:	1ad3      	subs	r3, r2, r3
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	2241      	movs	r2, #65	@ 0x41
 800fd40:	5c9b      	ldrb	r3, [r3, r2]
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	2b22      	cmp	r3, #34	@ 0x22
 800fd46:	d109      	bne.n	800fd5c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	681a      	ldr	r2, [r3, #0]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2180      	movs	r1, #128	@ 0x80
 800fd54:	0209      	lsls	r1, r1, #8
 800fd56:	430a      	orrs	r2, r1
 800fd58:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fd5a:	e07a      	b.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2180      	movs	r1, #128	@ 0x80
 800fd68:	01c9      	lsls	r1, r1, #7
 800fd6a:	430a      	orrs	r2, r1
 800fd6c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800fd6e:	e070      	b.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	2140      	movs	r1, #64	@ 0x40
 800fd74:	0018      	movs	r0, r3
 800fd76:	f000 fcef 	bl	8010758 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800fd7a:	e06a      	b.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	2240      	movs	r2, #64	@ 0x40
 800fd80:	4013      	ands	r3, r2
 800fd82:	d058      	beq.n	800fe36 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2240      	movs	r2, #64	@ 0x40
 800fd88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800fd8a:	d054      	beq.n	800fe36 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2241      	movs	r2, #65	@ 0x41
 800fd90:	5c9b      	ldrb	r3, [r3, r2]
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	2b22      	cmp	r3, #34	@ 0x22
 800fd96:	d101      	bne.n	800fd9c <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800fd98:	4b33      	ldr	r3, [pc, #204]	@ (800fe68 <I2C_Mem_ISR_DMA+0x234>)
 800fd9a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	2bff      	cmp	r3, #255	@ 0xff
 800fda4:	d911      	bls.n	800fdca <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	22ff      	movs	r2, #255	@ 0xff
 800fdaa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdb0:	b299      	uxth	r1, r3
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	2380      	movs	r3, #128	@ 0x80
 800fdba:	045c      	lsls	r4, r3, #17
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	0023      	movs	r3, r4
 800fdc4:	f001 f940 	bl	8011048 <I2C_TransferConfig>
 800fdc8:	e012      	b.n	800fdf0 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdd8:	b299      	uxth	r1, r3
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdde:	b2da      	uxtb	r2, r3
 800fde0:	2380      	movs	r3, #128	@ 0x80
 800fde2:	049c      	lsls	r4, r3, #18
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	0023      	movs	r3, r4
 800fdec:	f001 f92c 	bl	8011048 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fdfa:	1ad3      	subs	r3, r2, r3
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2241      	movs	r2, #65	@ 0x41
 800fe06:	5c9b      	ldrb	r3, [r3, r2]
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	2b22      	cmp	r3, #34	@ 0x22
 800fe0c:	d109      	bne.n	800fe22 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	2180      	movs	r1, #128	@ 0x80
 800fe1a:	0209      	lsls	r1, r1, #8
 800fe1c:	430a      	orrs	r2, r1
 800fe1e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fe20:	e017      	b.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2180      	movs	r1, #128	@ 0x80
 800fe2e:	01c9      	lsls	r1, r1, #7
 800fe30:	430a      	orrs	r2, r1
 800fe32:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fe34:	e00d      	b.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	2220      	movs	r2, #32
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	d009      	beq.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2220      	movs	r2, #32
 800fe42:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe44:	d005      	beq.n	800fe52 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800fe46:	68ba      	ldr	r2, [r7, #8]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	0011      	movs	r1, r2
 800fe4c:	0018      	movs	r0, r3
 800fe4e:	f000 fa3d 	bl	80102cc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2240      	movs	r2, #64	@ 0x40
 800fe56:	2100      	movs	r1, #0
 800fe58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fe5a:	2300      	movs	r3, #0
}
 800fe5c:	0018      	movs	r0, r3
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	b007      	add	sp, #28
 800fe62:	bd90      	pop	{r4, r7, pc}
 800fe64:	80002000 	.word	0x80002000
 800fe68:	80002400 	.word	0x80002400

0800fe6c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b088      	sub	sp, #32
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe7c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2240      	movs	r2, #64	@ 0x40
 800fe86:	5c9b      	ldrb	r3, [r3, r2]
 800fe88:	2b01      	cmp	r3, #1
 800fe8a:	d101      	bne.n	800fe90 <I2C_Slave_ISR_DMA+0x24>
 800fe8c:	2302      	movs	r3, #2
 800fe8e:	e0cd      	b.n	801002c <I2C_Slave_ISR_DMA+0x1c0>
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2240      	movs	r2, #64	@ 0x40
 800fe94:	2101      	movs	r1, #1
 800fe96:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	2220      	movs	r2, #32
 800fe9c:	4013      	ands	r3, r2
 800fe9e:	d009      	beq.n	800feb4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2220      	movs	r2, #32
 800fea4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fea6:	d005      	beq.n	800feb4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800fea8:	68ba      	ldr	r2, [r7, #8]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	0011      	movs	r1, r2
 800feae:	0018      	movs	r0, r3
 800feb0:	f000 fada 	bl	8010468 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800feb4:	68bb      	ldr	r3, [r7, #8]
 800feb6:	2210      	movs	r2, #16
 800feb8:	4013      	ands	r3, r2
 800feba:	d100      	bne.n	800febe <I2C_Slave_ISR_DMA+0x52>
 800febc:	e0a3      	b.n	8010006 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2210      	movs	r2, #16
 800fec2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800fec4:	d100      	bne.n	800fec8 <I2C_Slave_ISR_DMA+0x5c>
 800fec6:	e09e      	b.n	8010006 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	2380      	movs	r3, #128	@ 0x80
 800fecc:	01db      	lsls	r3, r3, #7
 800fece:	4013      	ands	r3, r2
 800fed0:	d105      	bne.n	800fede <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	2380      	movs	r3, #128	@ 0x80
 800fed6:	021b      	lsls	r3, r3, #8
 800fed8:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800feda:	d100      	bne.n	800fede <I2C_Slave_ISR_DMA+0x72>
 800fedc:	e08c      	b.n	800fff8 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00c      	beq.n	800ff00 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	2380      	movs	r3, #128	@ 0x80
 800feea:	021b      	lsls	r3, r3, #8
 800feec:	4013      	ands	r3, r2
 800feee:	d007      	beq.n	800ff00 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d101      	bne.n	800ff00 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800fefc:	2301      	movs	r3, #1
 800fefe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d00c      	beq.n	800ff22 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	2380      	movs	r3, #128	@ 0x80
 800ff0c:	01db      	lsls	r3, r3, #7
 800ff0e:	4013      	ands	r3, r2
 800ff10:	d007      	beq.n	800ff22 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d101      	bne.n	800ff22 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ff22:	69fb      	ldr	r3, [r7, #28]
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d12d      	bne.n	800ff84 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	2241      	movs	r2, #65	@ 0x41
 800ff2c:	5c9b      	ldrb	r3, [r3, r2]
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	2b28      	cmp	r3, #40	@ 0x28
 800ff32:	d10b      	bne.n	800ff4c <I2C_Slave_ISR_DMA+0xe0>
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	2380      	movs	r3, #128	@ 0x80
 800ff38:	049b      	lsls	r3, r3, #18
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d106      	bne.n	800ff4c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	0011      	movs	r1, r2
 800ff44:	0018      	movs	r0, r3
 800ff46:	f000 fbaf 	bl	80106a8 <I2C_ITListenCplt>
 800ff4a:	e054      	b.n	800fff6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2241      	movs	r2, #65	@ 0x41
 800ff50:	5c9b      	ldrb	r3, [r3, r2]
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	2b29      	cmp	r3, #41	@ 0x29
 800ff56:	d110      	bne.n	800ff7a <I2C_Slave_ISR_DMA+0x10e>
 800ff58:	69bb      	ldr	r3, [r7, #24]
 800ff5a:	4a36      	ldr	r2, [pc, #216]	@ (8010034 <I2C_Slave_ISR_DMA+0x1c8>)
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d00c      	beq.n	800ff7a <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2210      	movs	r2, #16
 800ff66:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	0018      	movs	r0, r3
 800ff6c:	f000 fd1f 	bl	80109ae <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	0018      	movs	r0, r3
 800ff74:	f000 f946 	bl	8010204 <I2C_ITSlaveSeqCplt>
 800ff78:	e03d      	b.n	800fff6 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	2210      	movs	r2, #16
 800ff80:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ff82:	e03e      	b.n	8010002 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2210      	movs	r2, #16
 800ff8a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff90:	2204      	movs	r2, #4
 800ff92:	431a      	orrs	r2, r3
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ff98:	2317      	movs	r3, #23
 800ff9a:	18fb      	adds	r3, r7, r3
 800ff9c:	68fa      	ldr	r2, [r7, #12]
 800ff9e:	2141      	movs	r1, #65	@ 0x41
 800ffa0:	5c52      	ldrb	r2, [r2, r1]
 800ffa2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ffa4:	69bb      	ldr	r3, [r7, #24]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d004      	beq.n	800ffb4 <I2C_Slave_ISR_DMA+0x148>
 800ffaa:	69ba      	ldr	r2, [r7, #24]
 800ffac:	2380      	movs	r3, #128	@ 0x80
 800ffae:	045b      	lsls	r3, r3, #17
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d126      	bne.n	8010002 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ffb4:	2217      	movs	r2, #23
 800ffb6:	18bb      	adds	r3, r7, r2
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b21      	cmp	r3, #33	@ 0x21
 800ffbc:	d003      	beq.n	800ffc6 <I2C_Slave_ISR_DMA+0x15a>
 800ffbe:	18bb      	adds	r3, r7, r2
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	2b29      	cmp	r3, #41	@ 0x29
 800ffc4:	d103      	bne.n	800ffce <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2221      	movs	r2, #33	@ 0x21
 800ffca:	631a      	str	r2, [r3, #48]	@ 0x30
 800ffcc:	e00b      	b.n	800ffe6 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ffce:	2217      	movs	r2, #23
 800ffd0:	18bb      	adds	r3, r7, r2
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	2b22      	cmp	r3, #34	@ 0x22
 800ffd6:	d003      	beq.n	800ffe0 <I2C_Slave_ISR_DMA+0x174>
 800ffd8:	18bb      	adds	r3, r7, r2
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffde:	d102      	bne.n	800ffe6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2222      	movs	r2, #34	@ 0x22
 800ffe4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	0011      	movs	r1, r2
 800ffee:	0018      	movs	r0, r3
 800fff0:	f000 fbb2 	bl	8010758 <I2C_ITError>
      if (treatdmanack == 1U)
 800fff4:	e005      	b.n	8010002 <I2C_Slave_ISR_DMA+0x196>
 800fff6:	e004      	b.n	8010002 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2210      	movs	r2, #16
 800fffe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010000:	e00f      	b.n	8010022 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010002:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010004:	e00d      	b.n	8010022 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	2208      	movs	r2, #8
 801000a:	4013      	ands	r3, r2
 801000c:	d009      	beq.n	8010022 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2208      	movs	r2, #8
 8010012:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010014:	d005      	beq.n	8010022 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	0011      	movs	r1, r2
 801001c:	0018      	movs	r0, r3
 801001e:	f000 f80b 	bl	8010038 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2240      	movs	r2, #64	@ 0x40
 8010026:	2100      	movs	r1, #0
 8010028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801002a:	2300      	movs	r3, #0
}
 801002c:	0018      	movs	r0, r3
 801002e:	46bd      	mov	sp, r7
 8010030:	b008      	add	sp, #32
 8010032:	bd80      	pop	{r7, pc}
 8010034:	ffff0000 	.word	0xffff0000

08010038 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010038:	b5b0      	push	{r4, r5, r7, lr}
 801003a:	b084      	sub	sp, #16
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2241      	movs	r2, #65	@ 0x41
 8010046:	5c9b      	ldrb	r3, [r3, r2]
 8010048:	b2db      	uxtb	r3, r3
 801004a:	001a      	movs	r2, r3
 801004c:	2328      	movs	r3, #40	@ 0x28
 801004e:	4013      	ands	r3, r2
 8010050:	2b28      	cmp	r3, #40	@ 0x28
 8010052:	d000      	beq.n	8010056 <I2C_ITAddrCplt+0x1e>
 8010054:	e088      	b.n	8010168 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	699b      	ldr	r3, [r3, #24]
 801005c:	0c1b      	lsrs	r3, r3, #16
 801005e:	b2da      	uxtb	r2, r3
 8010060:	250f      	movs	r5, #15
 8010062:	197b      	adds	r3, r7, r5
 8010064:	2101      	movs	r1, #1
 8010066:	400a      	ands	r2, r1
 8010068:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	699b      	ldr	r3, [r3, #24]
 8010070:	0c1b      	lsrs	r3, r3, #16
 8010072:	b29a      	uxth	r2, r3
 8010074:	200c      	movs	r0, #12
 8010076:	183b      	adds	r3, r7, r0
 8010078:	21fe      	movs	r1, #254	@ 0xfe
 801007a:	400a      	ands	r2, r1
 801007c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	b29a      	uxth	r2, r3
 8010086:	240a      	movs	r4, #10
 8010088:	193b      	adds	r3, r7, r4
 801008a:	0592      	lsls	r2, r2, #22
 801008c:	0d92      	lsrs	r2, r2, #22
 801008e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	68db      	ldr	r3, [r3, #12]
 8010096:	b29a      	uxth	r2, r3
 8010098:	2308      	movs	r3, #8
 801009a:	18fb      	adds	r3, r7, r3
 801009c:	21fe      	movs	r1, #254	@ 0xfe
 801009e:	400a      	ands	r2, r1
 80100a0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	2b02      	cmp	r3, #2
 80100a8:	d148      	bne.n	801013c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80100aa:	0021      	movs	r1, r4
 80100ac:	187b      	adds	r3, r7, r1
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	09db      	lsrs	r3, r3, #7
 80100b2:	b29a      	uxth	r2, r3
 80100b4:	183b      	adds	r3, r7, r0
 80100b6:	881b      	ldrh	r3, [r3, #0]
 80100b8:	4053      	eors	r3, r2
 80100ba:	b29b      	uxth	r3, r3
 80100bc:	001a      	movs	r2, r3
 80100be:	2306      	movs	r3, #6
 80100c0:	4013      	ands	r3, r2
 80100c2:	d120      	bne.n	8010106 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80100c4:	183b      	adds	r3, r7, r0
 80100c6:	187a      	adds	r2, r7, r1
 80100c8:	8812      	ldrh	r2, [r2, #0]
 80100ca:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100d0:	1c5a      	adds	r2, r3, #1
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80100da:	2b02      	cmp	r3, #2
 80100dc:	d14c      	bne.n	8010178 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2208      	movs	r2, #8
 80100ea:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2240      	movs	r2, #64	@ 0x40
 80100f0:	2100      	movs	r1, #0
 80100f2:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80100f4:	183b      	adds	r3, r7, r0
 80100f6:	881a      	ldrh	r2, [r3, #0]
 80100f8:	197b      	adds	r3, r7, r5
 80100fa:	7819      	ldrb	r1, [r3, #0]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	0018      	movs	r0, r3
 8010100:	f7ff fa39 	bl	800f576 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010104:	e038      	b.n	8010178 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8010106:	240c      	movs	r4, #12
 8010108:	193b      	adds	r3, r7, r4
 801010a:	2208      	movs	r2, #8
 801010c:	18ba      	adds	r2, r7, r2
 801010e:	8812      	ldrh	r2, [r2, #0]
 8010110:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010112:	2380      	movs	r3, #128	@ 0x80
 8010114:	021a      	lsls	r2, r3, #8
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	0011      	movs	r1, r2
 801011a:	0018      	movs	r0, r3
 801011c:	f001 f85c 	bl	80111d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2240      	movs	r2, #64	@ 0x40
 8010124:	2100      	movs	r1, #0
 8010126:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010128:	193b      	adds	r3, r7, r4
 801012a:	881a      	ldrh	r2, [r3, #0]
 801012c:	230f      	movs	r3, #15
 801012e:	18fb      	adds	r3, r7, r3
 8010130:	7819      	ldrb	r1, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	0018      	movs	r0, r3
 8010136:	f7ff fa1e 	bl	800f576 <HAL_I2C_AddrCallback>
}
 801013a:	e01d      	b.n	8010178 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 801013c:	2380      	movs	r3, #128	@ 0x80
 801013e:	021a      	lsls	r2, r3, #8
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	0011      	movs	r1, r2
 8010144:	0018      	movs	r0, r3
 8010146:	f001 f847 	bl	80111d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2240      	movs	r2, #64	@ 0x40
 801014e:	2100      	movs	r1, #0
 8010150:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010152:	230c      	movs	r3, #12
 8010154:	18fb      	adds	r3, r7, r3
 8010156:	881a      	ldrh	r2, [r3, #0]
 8010158:	230f      	movs	r3, #15
 801015a:	18fb      	adds	r3, r7, r3
 801015c:	7819      	ldrb	r1, [r3, #0]
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	0018      	movs	r0, r3
 8010162:	f7ff fa08 	bl	800f576 <HAL_I2C_AddrCallback>
}
 8010166:	e007      	b.n	8010178 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	2208      	movs	r2, #8
 801016e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	2240      	movs	r2, #64	@ 0x40
 8010174:	2100      	movs	r1, #0
 8010176:	5499      	strb	r1, [r3, r2]
}
 8010178:	46c0      	nop			@ (mov r8, r8)
 801017a:	46bd      	mov	sp, r7
 801017c:	b004      	add	sp, #16
 801017e:	bdb0      	pop	{r4, r5, r7, pc}

08010180 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b082      	sub	sp, #8
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2242      	movs	r2, #66	@ 0x42
 801018c:	2100      	movs	r1, #0
 801018e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2241      	movs	r2, #65	@ 0x41
 8010194:	5c9b      	ldrb	r3, [r3, r2]
 8010196:	b2db      	uxtb	r3, r3
 8010198:	2b21      	cmp	r3, #33	@ 0x21
 801019a:	d117      	bne.n	80101cc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2241      	movs	r2, #65	@ 0x41
 80101a0:	2120      	movs	r1, #32
 80101a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2211      	movs	r2, #17
 80101a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2200      	movs	r2, #0
 80101ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2101      	movs	r1, #1
 80101b4:	0018      	movs	r0, r3
 80101b6:	f001 f80f 	bl	80111d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2240      	movs	r2, #64	@ 0x40
 80101be:	2100      	movs	r1, #0
 80101c0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	0018      	movs	r0, r3
 80101c6:	f7ff f9b6 	bl	800f536 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80101ca:	e016      	b.n	80101fa <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2241      	movs	r2, #65	@ 0x41
 80101d0:	2120      	movs	r1, #32
 80101d2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2212      	movs	r2, #18
 80101d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2200      	movs	r2, #0
 80101de:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2102      	movs	r1, #2
 80101e4:	0018      	movs	r0, r3
 80101e6:	f000 fff7 	bl	80111d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2240      	movs	r2, #64	@ 0x40
 80101ee:	2100      	movs	r1, #0
 80101f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	0018      	movs	r0, r3
 80101f6:	f7ff f9a6 	bl	800f546 <HAL_I2C_MasterRxCpltCallback>
}
 80101fa:	46c0      	nop			@ (mov r8, r8)
 80101fc:	46bd      	mov	sp, r7
 80101fe:	b002      	add	sp, #8
 8010200:	bd80      	pop	{r7, pc}
	...

08010204 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2242      	movs	r2, #66	@ 0x42
 8010218:	2100      	movs	r1, #0
 801021a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 801021c:	68fa      	ldr	r2, [r7, #12]
 801021e:	2380      	movs	r3, #128	@ 0x80
 8010220:	01db      	lsls	r3, r3, #7
 8010222:	4013      	ands	r3, r2
 8010224:	d008      	beq.n	8010238 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	4924      	ldr	r1, [pc, #144]	@ (80102c4 <I2C_ITSlaveSeqCplt+0xc0>)
 8010232:	400a      	ands	r2, r1
 8010234:	601a      	str	r2, [r3, #0]
 8010236:	e00c      	b.n	8010252 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	2380      	movs	r3, #128	@ 0x80
 801023c:	021b      	lsls	r3, r3, #8
 801023e:	4013      	ands	r3, r2
 8010240:	d007      	beq.n	8010252 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	491e      	ldr	r1, [pc, #120]	@ (80102c8 <I2C_ITSlaveSeqCplt+0xc4>)
 801024e:	400a      	ands	r2, r1
 8010250:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2241      	movs	r2, #65	@ 0x41
 8010256:	5c9b      	ldrb	r3, [r3, r2]
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b29      	cmp	r3, #41	@ 0x29
 801025c:	d114      	bne.n	8010288 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2241      	movs	r2, #65	@ 0x41
 8010262:	2128      	movs	r1, #40	@ 0x28
 8010264:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2221      	movs	r2, #33	@ 0x21
 801026a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2101      	movs	r1, #1
 8010270:	0018      	movs	r0, r3
 8010272:	f000 ffb1 	bl	80111d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2240      	movs	r2, #64	@ 0x40
 801027a:	2100      	movs	r1, #0
 801027c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	0018      	movs	r0, r3
 8010282:	f7ff f968 	bl	800f556 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010286:	e019      	b.n	80102bc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2241      	movs	r2, #65	@ 0x41
 801028c:	5c9b      	ldrb	r3, [r3, r2]
 801028e:	b2db      	uxtb	r3, r3
 8010290:	2b2a      	cmp	r3, #42	@ 0x2a
 8010292:	d113      	bne.n	80102bc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2241      	movs	r2, #65	@ 0x41
 8010298:	2128      	movs	r1, #40	@ 0x28
 801029a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2222      	movs	r2, #34	@ 0x22
 80102a0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2102      	movs	r1, #2
 80102a6:	0018      	movs	r0, r3
 80102a8:	f000 ff96 	bl	80111d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2240      	movs	r2, #64	@ 0x40
 80102b0:	2100      	movs	r1, #0
 80102b2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	0018      	movs	r0, r3
 80102b8:	f7ff f955 	bl	800f566 <HAL_I2C_SlaveRxCpltCallback>
}
 80102bc:	46c0      	nop			@ (mov r8, r8)
 80102be:	46bd      	mov	sp, r7
 80102c0:	b004      	add	sp, #16
 80102c2:	bd80      	pop	{r7, pc}
 80102c4:	ffffbfff 	.word	0xffffbfff
 80102c8:	ffff7fff 	.word	0xffff7fff

080102cc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b086      	sub	sp, #24
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	2220      	movs	r2, #32
 80102e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2241      	movs	r2, #65	@ 0x41
 80102e6:	5c9b      	ldrb	r3, [r3, r2]
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	2b21      	cmp	r3, #33	@ 0x21
 80102ec:	d108      	bne.n	8010300 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2101      	movs	r1, #1
 80102f2:	0018      	movs	r0, r3
 80102f4:	f000 ff70 	bl	80111d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2211      	movs	r2, #17
 80102fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80102fe:	e00d      	b.n	801031c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2241      	movs	r2, #65	@ 0x41
 8010304:	5c9b      	ldrb	r3, [r3, r2]
 8010306:	b2db      	uxtb	r3, r3
 8010308:	2b22      	cmp	r3, #34	@ 0x22
 801030a:	d107      	bne.n	801031c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2102      	movs	r1, #2
 8010310:	0018      	movs	r0, r3
 8010312:	f000 ff61 	bl	80111d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2212      	movs	r2, #18
 801031a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	685a      	ldr	r2, [r3, #4]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	494e      	ldr	r1, [pc, #312]	@ (8010460 <I2C_ITMasterCplt+0x194>)
 8010328:	400a      	ands	r2, r1
 801032a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4a4b      	ldr	r2, [pc, #300]	@ (8010464 <I2C_ITMasterCplt+0x198>)
 8010336:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	2210      	movs	r2, #16
 801033c:	4013      	ands	r3, r2
 801033e:	d009      	beq.n	8010354 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2210      	movs	r2, #16
 8010346:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801034c:	2204      	movs	r2, #4
 801034e:	431a      	orrs	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2241      	movs	r2, #65	@ 0x41
 8010358:	5c9b      	ldrb	r3, [r3, r2]
 801035a:	b2db      	uxtb	r3, r3
 801035c:	2b60      	cmp	r3, #96	@ 0x60
 801035e:	d109      	bne.n	8010374 <I2C_ITMasterCplt+0xa8>
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	2204      	movs	r2, #4
 8010364:	4013      	ands	r3, r2
 8010366:	d005      	beq.n	8010374 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801036e:	b2db      	uxtb	r3, r3
 8010370:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010372:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	0018      	movs	r0, r3
 8010378:	f000 fb19 	bl	80109ae <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010380:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2241      	movs	r2, #65	@ 0x41
 8010386:	5c9b      	ldrb	r3, [r3, r2]
 8010388:	b2db      	uxtb	r3, r3
 801038a:	2b60      	cmp	r3, #96	@ 0x60
 801038c:	d002      	beq.n	8010394 <I2C_ITMasterCplt+0xc8>
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d007      	beq.n	80103a4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	0011      	movs	r1, r2
 801039c:	0018      	movs	r0, r3
 801039e:	f000 f9db 	bl	8010758 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80103a2:	e058      	b.n	8010456 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2241      	movs	r2, #65	@ 0x41
 80103a8:	5c9b      	ldrb	r3, [r3, r2]
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	2b21      	cmp	r3, #33	@ 0x21
 80103ae:	d126      	bne.n	80103fe <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2241      	movs	r2, #65	@ 0x41
 80103b4:	2120      	movs	r1, #32
 80103b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	2200      	movs	r2, #0
 80103bc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	2242      	movs	r2, #66	@ 0x42
 80103c2:	5c9b      	ldrb	r3, [r3, r2]
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	2b40      	cmp	r3, #64	@ 0x40
 80103c8:	d10c      	bne.n	80103e4 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2242      	movs	r2, #66	@ 0x42
 80103ce:	2100      	movs	r1, #0
 80103d0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2240      	movs	r2, #64	@ 0x40
 80103d6:	2100      	movs	r1, #0
 80103d8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	0018      	movs	r0, r3
 80103de:	f7ff f8e2 	bl	800f5a6 <HAL_I2C_MemTxCpltCallback>
}
 80103e2:	e038      	b.n	8010456 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2242      	movs	r2, #66	@ 0x42
 80103e8:	2100      	movs	r1, #0
 80103ea:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2240      	movs	r2, #64	@ 0x40
 80103f0:	2100      	movs	r1, #0
 80103f2:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	0018      	movs	r0, r3
 80103f8:	f7ff f89d 	bl	800f536 <HAL_I2C_MasterTxCpltCallback>
}
 80103fc:	e02b      	b.n	8010456 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2241      	movs	r2, #65	@ 0x41
 8010402:	5c9b      	ldrb	r3, [r3, r2]
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b22      	cmp	r3, #34	@ 0x22
 8010408:	d125      	bne.n	8010456 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2241      	movs	r2, #65	@ 0x41
 801040e:	2120      	movs	r1, #32
 8010410:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2242      	movs	r2, #66	@ 0x42
 801041c:	5c9b      	ldrb	r3, [r3, r2]
 801041e:	b2db      	uxtb	r3, r3
 8010420:	2b40      	cmp	r3, #64	@ 0x40
 8010422:	d10c      	bne.n	801043e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2242      	movs	r2, #66	@ 0x42
 8010428:	2100      	movs	r1, #0
 801042a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2240      	movs	r2, #64	@ 0x40
 8010430:	2100      	movs	r1, #0
 8010432:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	0018      	movs	r0, r3
 8010438:	f7ff f8bd 	bl	800f5b6 <HAL_I2C_MemRxCpltCallback>
}
 801043c:	e00b      	b.n	8010456 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2242      	movs	r2, #66	@ 0x42
 8010442:	2100      	movs	r1, #0
 8010444:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2240      	movs	r2, #64	@ 0x40
 801044a:	2100      	movs	r1, #0
 801044c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	0018      	movs	r0, r3
 8010452:	f7ff f878 	bl	800f546 <HAL_I2C_MasterRxCpltCallback>
}
 8010456:	46c0      	nop			@ (mov r8, r8)
 8010458:	46bd      	mov	sp, r7
 801045a:	b006      	add	sp, #24
 801045c:	bd80      	pop	{r7, pc}
 801045e:	46c0      	nop			@ (mov r8, r8)
 8010460:	fe00e800 	.word	0xfe00e800
 8010464:	ffff0000 	.word	0xffff0000

08010468 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b086      	sub	sp, #24
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
 8010470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 801047e:	200f      	movs	r0, #15
 8010480:	183b      	adds	r3, r7, r0
 8010482:	687a      	ldr	r2, [r7, #4]
 8010484:	2141      	movs	r1, #65	@ 0x41
 8010486:	5c52      	ldrb	r2, [r2, r1]
 8010488:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	2220      	movs	r2, #32
 8010490:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010492:	183b      	adds	r3, r7, r0
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	2b21      	cmp	r3, #33	@ 0x21
 8010498:	d003      	beq.n	80104a2 <I2C_ITSlaveCplt+0x3a>
 801049a:	183b      	adds	r3, r7, r0
 801049c:	781b      	ldrb	r3, [r3, #0]
 801049e:	2b29      	cmp	r3, #41	@ 0x29
 80104a0:	d109      	bne.n	80104b6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80104a2:	4a7b      	ldr	r2, [pc, #492]	@ (8010690 <I2C_ITSlaveCplt+0x228>)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	0011      	movs	r1, r2
 80104a8:	0018      	movs	r0, r3
 80104aa:	f000 fe95 	bl	80111d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2221      	movs	r2, #33	@ 0x21
 80104b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80104b4:	e011      	b.n	80104da <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80104b6:	220f      	movs	r2, #15
 80104b8:	18bb      	adds	r3, r7, r2
 80104ba:	781b      	ldrb	r3, [r3, #0]
 80104bc:	2b22      	cmp	r3, #34	@ 0x22
 80104be:	d003      	beq.n	80104c8 <I2C_ITSlaveCplt+0x60>
 80104c0:	18bb      	adds	r3, r7, r2
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80104c6:	d108      	bne.n	80104da <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80104c8:	4a72      	ldr	r2, [pc, #456]	@ (8010694 <I2C_ITSlaveCplt+0x22c>)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	0011      	movs	r1, r2
 80104ce:	0018      	movs	r0, r3
 80104d0:	f000 fe82 	bl	80111d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2222      	movs	r2, #34	@ 0x22
 80104d8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	685a      	ldr	r2, [r3, #4]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	2180      	movs	r1, #128	@ 0x80
 80104e6:	0209      	lsls	r1, r1, #8
 80104e8:	430a      	orrs	r2, r1
 80104ea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	685a      	ldr	r2, [r3, #4]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4968      	ldr	r1, [pc, #416]	@ (8010698 <I2C_ITSlaveCplt+0x230>)
 80104f8:	400a      	ands	r2, r1
 80104fa:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	0018      	movs	r0, r3
 8010500:	f000 fa55 	bl	80109ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010504:	693a      	ldr	r2, [r7, #16]
 8010506:	2380      	movs	r3, #128	@ 0x80
 8010508:	01db      	lsls	r3, r3, #7
 801050a:	4013      	ands	r3, r2
 801050c:	d013      	beq.n	8010536 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	681a      	ldr	r2, [r3, #0]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4960      	ldr	r1, [pc, #384]	@ (801069c <I2C_ITSlaveCplt+0x234>)
 801051a:	400a      	ands	r2, r1
 801051c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010522:	2b00      	cmp	r3, #0
 8010524:	d01f      	beq.n	8010566 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	b29a      	uxth	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010534:	e017      	b.n	8010566 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010536:	693a      	ldr	r2, [r7, #16]
 8010538:	2380      	movs	r3, #128	@ 0x80
 801053a:	021b      	lsls	r3, r3, #8
 801053c:	4013      	ands	r3, r2
 801053e:	d012      	beq.n	8010566 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4955      	ldr	r1, [pc, #340]	@ (80106a0 <I2C_ITSlaveCplt+0x238>)
 801054c:	400a      	ands	r2, r1
 801054e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010554:	2b00      	cmp	r3, #0
 8010556:	d006      	beq.n	8010566 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	b29a      	uxth	r2, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	2204      	movs	r2, #4
 801056a:	4013      	ands	r3, r2
 801056c:	d020      	beq.n	80105b0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	2204      	movs	r2, #4
 8010572:	4393      	bics	r3, r2
 8010574:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010580:	b2d2      	uxtb	r2, r2
 8010582:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010588:	1c5a      	adds	r2, r3, #1
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00c      	beq.n	80105b0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801059a:	3b01      	subs	r3, #1
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	3b01      	subs	r3, #1
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d005      	beq.n	80105c6 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105be:	2204      	movs	r2, #4
 80105c0:	431a      	orrs	r2, r3
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2242      	movs	r2, #66	@ 0x42
 80105ca:	2100      	movs	r1, #0
 80105cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2200      	movs	r2, #0
 80105d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d013      	beq.n	8010604 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	0011      	movs	r1, r2
 80105e4:	0018      	movs	r0, r3
 80105e6:	f000 f8b7 	bl	8010758 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2241      	movs	r2, #65	@ 0x41
 80105ee:	5c9b      	ldrb	r3, [r3, r2]
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	2b28      	cmp	r3, #40	@ 0x28
 80105f4:	d147      	bne.n	8010686 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80105f6:	697a      	ldr	r2, [r7, #20]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	0011      	movs	r1, r2
 80105fc:	0018      	movs	r0, r3
 80105fe:	f000 f853 	bl	80106a8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010602:	e040      	b.n	8010686 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010608:	4a26      	ldr	r2, [pc, #152]	@ (80106a4 <I2C_ITSlaveCplt+0x23c>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d016      	beq.n	801063c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	0018      	movs	r0, r3
 8010612:	f7ff fdf7 	bl	8010204 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	4a22      	ldr	r2, [pc, #136]	@ (80106a4 <I2C_ITSlaveCplt+0x23c>)
 801061a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2241      	movs	r2, #65	@ 0x41
 8010620:	2120      	movs	r1, #32
 8010622:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	2240      	movs	r2, #64	@ 0x40
 801062e:	2100      	movs	r1, #0
 8010630:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	0018      	movs	r0, r3
 8010636:	f7fe ffae 	bl	800f596 <HAL_I2C_ListenCpltCallback>
}
 801063a:	e024      	b.n	8010686 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2241      	movs	r2, #65	@ 0x41
 8010640:	5c9b      	ldrb	r3, [r3, r2]
 8010642:	b2db      	uxtb	r3, r3
 8010644:	2b22      	cmp	r3, #34	@ 0x22
 8010646:	d10f      	bne.n	8010668 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2241      	movs	r2, #65	@ 0x41
 801064c:	2120      	movs	r1, #32
 801064e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2200      	movs	r2, #0
 8010654:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2240      	movs	r2, #64	@ 0x40
 801065a:	2100      	movs	r1, #0
 801065c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	0018      	movs	r0, r3
 8010662:	f7fe ff80 	bl	800f566 <HAL_I2C_SlaveRxCpltCallback>
}
 8010666:	e00e      	b.n	8010686 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2241      	movs	r2, #65	@ 0x41
 801066c:	2120      	movs	r1, #32
 801066e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2240      	movs	r2, #64	@ 0x40
 801067a:	2100      	movs	r1, #0
 801067c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	0018      	movs	r0, r3
 8010682:	f7fe ff68 	bl	800f556 <HAL_I2C_SlaveTxCpltCallback>
}
 8010686:	46c0      	nop			@ (mov r8, r8)
 8010688:	46bd      	mov	sp, r7
 801068a:	b006      	add	sp, #24
 801068c:	bd80      	pop	{r7, pc}
 801068e:	46c0      	nop			@ (mov r8, r8)
 8010690:	00008001 	.word	0x00008001
 8010694:	00008002 	.word	0x00008002
 8010698:	fe00e800 	.word	0xfe00e800
 801069c:	ffffbfff 	.word	0xffffbfff
 80106a0:	ffff7fff 	.word	0xffff7fff
 80106a4:	ffff0000 	.word	0xffff0000

080106a8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b082      	sub	sp, #8
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	4a26      	ldr	r2, [pc, #152]	@ (8010750 <I2C_ITListenCplt+0xa8>)
 80106b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2241      	movs	r2, #65	@ 0x41
 80106c2:	2120      	movs	r1, #32
 80106c4:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	2242      	movs	r2, #66	@ 0x42
 80106ca:	2100      	movs	r1, #0
 80106cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	2204      	movs	r2, #4
 80106d8:	4013      	ands	r3, r2
 80106da:	d022      	beq.n	8010722 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106e6:	b2d2      	uxtb	r2, r2
 80106e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d012      	beq.n	8010722 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010700:	3b01      	subs	r3, #1
 8010702:	b29a      	uxth	r2, r3
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801070c:	b29b      	uxth	r3, r3
 801070e:	3b01      	subs	r3, #1
 8010710:	b29a      	uxth	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801071a:	2204      	movs	r2, #4
 801071c:	431a      	orrs	r2, r3
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010722:	4a0c      	ldr	r2, [pc, #48]	@ (8010754 <I2C_ITListenCplt+0xac>)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	0011      	movs	r1, r2
 8010728:	0018      	movs	r0, r3
 801072a:	f000 fd55 	bl	80111d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2210      	movs	r2, #16
 8010734:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2240      	movs	r2, #64	@ 0x40
 801073a:	2100      	movs	r1, #0
 801073c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	0018      	movs	r0, r3
 8010742:	f7fe ff28 	bl	800f596 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010746:	46c0      	nop			@ (mov r8, r8)
 8010748:	46bd      	mov	sp, r7
 801074a:	b002      	add	sp, #8
 801074c:	bd80      	pop	{r7, pc}
 801074e:	46c0      	nop			@ (mov r8, r8)
 8010750:	ffff0000 	.word	0xffff0000
 8010754:	00008003 	.word	0x00008003

08010758 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010762:	200f      	movs	r0, #15
 8010764:	183b      	adds	r3, r7, r0
 8010766:	687a      	ldr	r2, [r7, #4]
 8010768:	2141      	movs	r1, #65	@ 0x41
 801076a:	5c52      	ldrb	r2, [r2, r1]
 801076c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2242      	movs	r2, #66	@ 0x42
 8010772:	2100      	movs	r1, #0
 8010774:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	4a72      	ldr	r2, [pc, #456]	@ (8010944 <I2C_ITError+0x1ec>)
 801077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2200      	movs	r2, #0
 8010780:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	431a      	orrs	r2, r3
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 801078e:	183b      	adds	r3, r7, r0
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	2b28      	cmp	r3, #40	@ 0x28
 8010794:	d007      	beq.n	80107a6 <I2C_ITError+0x4e>
 8010796:	183b      	adds	r3, r7, r0
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b29      	cmp	r3, #41	@ 0x29
 801079c:	d003      	beq.n	80107a6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 801079e:	183b      	adds	r3, r7, r0
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80107a4:	d10c      	bne.n	80107c0 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2103      	movs	r1, #3
 80107aa:	0018      	movs	r0, r3
 80107ac:	f000 fd14 	bl	80111d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2241      	movs	r2, #65	@ 0x41
 80107b4:	2128      	movs	r1, #40	@ 0x28
 80107b6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a63      	ldr	r2, [pc, #396]	@ (8010948 <I2C_ITError+0x1f0>)
 80107bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80107be:	e032      	b.n	8010826 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80107c0:	4a62      	ldr	r2, [pc, #392]	@ (801094c <I2C_ITError+0x1f4>)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	0011      	movs	r1, r2
 80107c6:	0018      	movs	r0, r3
 80107c8:	f000 fd06 	bl	80111d8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	0018      	movs	r0, r3
 80107d0:	f000 f8ed 	bl	80109ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2241      	movs	r2, #65	@ 0x41
 80107d8:	5c9b      	ldrb	r3, [r3, r2]
 80107da:	b2db      	uxtb	r3, r3
 80107dc:	2b60      	cmp	r3, #96	@ 0x60
 80107de:	d01f      	beq.n	8010820 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2241      	movs	r2, #65	@ 0x41
 80107e4:	2120      	movs	r1, #32
 80107e6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	2220      	movs	r2, #32
 80107f0:	4013      	ands	r3, r2
 80107f2:	2b20      	cmp	r3, #32
 80107f4:	d114      	bne.n	8010820 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	699b      	ldr	r3, [r3, #24]
 80107fc:	2210      	movs	r2, #16
 80107fe:	4013      	ands	r3, r2
 8010800:	2b10      	cmp	r3, #16
 8010802:	d109      	bne.n	8010818 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	2210      	movs	r2, #16
 801080a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010810:	2204      	movs	r2, #4
 8010812:	431a      	orrs	r2, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2220      	movs	r2, #32
 801081e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801082a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010830:	2b00      	cmp	r3, #0
 8010832:	d03b      	beq.n	80108ac <I2C_ITError+0x154>
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	2b11      	cmp	r3, #17
 8010838:	d002      	beq.n	8010840 <I2C_ITError+0xe8>
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	2b21      	cmp	r3, #33	@ 0x21
 801083e:	d135      	bne.n	80108ac <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	2380      	movs	r3, #128	@ 0x80
 8010848:	01db      	lsls	r3, r3, #7
 801084a:	401a      	ands	r2, r3
 801084c:	2380      	movs	r3, #128	@ 0x80
 801084e:	01db      	lsls	r3, r3, #7
 8010850:	429a      	cmp	r2, r3
 8010852:	d107      	bne.n	8010864 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	493c      	ldr	r1, [pc, #240]	@ (8010950 <I2C_ITError+0x1f8>)
 8010860:	400a      	ands	r2, r1
 8010862:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010868:	0018      	movs	r0, r3
 801086a:	f7fd fd7e 	bl	800e36a <HAL_DMA_GetState>
 801086e:	0003      	movs	r3, r0
 8010870:	2b01      	cmp	r3, #1
 8010872:	d016      	beq.n	80108a2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010878:	4a36      	ldr	r2, [pc, #216]	@ (8010954 <I2C_ITError+0x1fc>)
 801087a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2240      	movs	r2, #64	@ 0x40
 8010880:	2100      	movs	r1, #0
 8010882:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010888:	0018      	movs	r0, r3
 801088a:	f7fd fc79 	bl	800e180 <HAL_DMA_Abort_IT>
 801088e:	1e03      	subs	r3, r0, #0
 8010890:	d051      	beq.n	8010936 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010896:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801089c:	0018      	movs	r0, r3
 801089e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108a0:	e049      	b.n	8010936 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	0018      	movs	r0, r3
 80108a6:	f000 f859 	bl	801095c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80108aa:	e044      	b.n	8010936 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d03b      	beq.n	801092c <I2C_ITError+0x1d4>
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	2b12      	cmp	r3, #18
 80108b8:	d002      	beq.n	80108c0 <I2C_ITError+0x168>
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	2b22      	cmp	r3, #34	@ 0x22
 80108be:	d135      	bne.n	801092c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	2380      	movs	r3, #128	@ 0x80
 80108c8:	021b      	lsls	r3, r3, #8
 80108ca:	401a      	ands	r2, r3
 80108cc:	2380      	movs	r3, #128	@ 0x80
 80108ce:	021b      	lsls	r3, r3, #8
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d107      	bne.n	80108e4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	491e      	ldr	r1, [pc, #120]	@ (8010958 <I2C_ITError+0x200>)
 80108e0:	400a      	ands	r2, r1
 80108e2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108e8:	0018      	movs	r0, r3
 80108ea:	f7fd fd3e 	bl	800e36a <HAL_DMA_GetState>
 80108ee:	0003      	movs	r3, r0
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d016      	beq.n	8010922 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80108f8:	4a16      	ldr	r2, [pc, #88]	@ (8010954 <I2C_ITError+0x1fc>)
 80108fa:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2240      	movs	r2, #64	@ 0x40
 8010900:	2100      	movs	r1, #0
 8010902:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010908:	0018      	movs	r0, r3
 801090a:	f7fd fc39 	bl	800e180 <HAL_DMA_Abort_IT>
 801090e:	1e03      	subs	r3, r0, #0
 8010910:	d013      	beq.n	801093a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801091c:	0018      	movs	r0, r3
 801091e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010920:	e00b      	b.n	801093a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	0018      	movs	r0, r3
 8010926:	f000 f819 	bl	801095c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801092a:	e006      	b.n	801093a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	0018      	movs	r0, r3
 8010930:	f000 f814 	bl	801095c <I2C_TreatErrorCallback>
  }
}
 8010934:	e002      	b.n	801093c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010936:	46c0      	nop			@ (mov r8, r8)
 8010938:	e000      	b.n	801093c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 801093a:	46c0      	nop			@ (mov r8, r8)
}
 801093c:	46c0      	nop			@ (mov r8, r8)
 801093e:	46bd      	mov	sp, r7
 8010940:	b004      	add	sp, #16
 8010942:	bd80      	pop	{r7, pc}
 8010944:	ffff0000 	.word	0xffff0000
 8010948:	0800f83d 	.word	0x0800f83d
 801094c:	00008003 	.word	0x00008003
 8010950:	ffffbfff 	.word	0xffffbfff
 8010954:	08010b67 	.word	0x08010b67
 8010958:	ffff7fff 	.word	0xffff7fff

0801095c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2241      	movs	r2, #65	@ 0x41
 8010968:	5c9b      	ldrb	r3, [r3, r2]
 801096a:	b2db      	uxtb	r3, r3
 801096c:	2b60      	cmp	r3, #96	@ 0x60
 801096e:	d10f      	bne.n	8010990 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2241      	movs	r2, #65	@ 0x41
 8010974:	2120      	movs	r1, #32
 8010976:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	2200      	movs	r2, #0
 801097c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	2240      	movs	r2, #64	@ 0x40
 8010982:	2100      	movs	r1, #0
 8010984:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	0018      	movs	r0, r3
 801098a:	f7fe fe24 	bl	800f5d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801098e:	e00a      	b.n	80109a6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2240      	movs	r2, #64	@ 0x40
 801099a:	2100      	movs	r1, #0
 801099c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	0018      	movs	r0, r3
 80109a2:	f7fe fe10 	bl	800f5c6 <HAL_I2C_ErrorCallback>
}
 80109a6:	46c0      	nop			@ (mov r8, r8)
 80109a8:	46bd      	mov	sp, r7
 80109aa:	b002      	add	sp, #8
 80109ac:	bd80      	pop	{r7, pc}

080109ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b082      	sub	sp, #8
 80109b2:	af00      	add	r7, sp, #0
 80109b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	699b      	ldr	r3, [r3, #24]
 80109bc:	2202      	movs	r2, #2
 80109be:	4013      	ands	r3, r2
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d103      	bne.n	80109cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	2200      	movs	r2, #0
 80109ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	699b      	ldr	r3, [r3, #24]
 80109d2:	2201      	movs	r2, #1
 80109d4:	4013      	ands	r3, r2
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d007      	beq.n	80109ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	699a      	ldr	r2, [r3, #24]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2101      	movs	r1, #1
 80109e6:	430a      	orrs	r2, r1
 80109e8:	619a      	str	r2, [r3, #24]
  }
}
 80109ea:	46c0      	nop			@ (mov r8, r8)
 80109ec:	46bd      	mov	sp, r7
 80109ee:	b002      	add	sp, #8
 80109f0:	bd80      	pop	{r7, pc}
	...

080109f4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a00:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	4920      	ldr	r1, [pc, #128]	@ (8010a90 <I2C_DMAMasterTransmitCplt+0x9c>)
 8010a0e:	400a      	ands	r2, r1
 8010a10:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d105      	bne.n	8010a28 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	2120      	movs	r1, #32
 8010a20:	0018      	movs	r0, r3
 8010a22:	f000 fb4b 	bl	80110bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8010a26:	e02e      	b.n	8010a86 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010a30:	189a      	adds	r2, r3, r2
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	2bff      	cmp	r3, #255	@ 0xff
 8010a3e:	d903      	bls.n	8010a48 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	22ff      	movs	r2, #255	@ 0xff
 8010a44:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010a46:	e004      	b.n	8010a52 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a5a:	0019      	movs	r1, r3
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	3328      	adds	r3, #40	@ 0x28
 8010a62:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8010a68:	f7fd fae4 	bl	800e034 <HAL_DMA_Start_IT>
 8010a6c:	1e03      	subs	r3, r0, #0
 8010a6e:	d005      	beq.n	8010a7c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2110      	movs	r1, #16
 8010a74:	0018      	movs	r0, r3
 8010a76:	f7ff fe6f 	bl	8010758 <I2C_ITError>
}
 8010a7a:	e004      	b.n	8010a86 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	2140      	movs	r1, #64	@ 0x40
 8010a80:	0018      	movs	r0, r3
 8010a82:	f000 fb1b 	bl	80110bc <I2C_Enable_IRQ>
}
 8010a86:	46c0      	nop			@ (mov r8, r8)
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	b004      	add	sp, #16
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	46c0      	nop			@ (mov r8, r8)
 8010a90:	ffffbfff 	.word	0xffffbfff

08010a94 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aa0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	4920      	ldr	r1, [pc, #128]	@ (8010b30 <I2C_DMAMasterReceiveCplt+0x9c>)
 8010aae:	400a      	ands	r2, r1
 8010ab0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d105      	bne.n	8010ac8 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2120      	movs	r1, #32
 8010ac0:	0018      	movs	r0, r3
 8010ac2:	f000 fafb 	bl	80110bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8010ac6:	e02e      	b.n	8010b26 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8010ad0:	189a      	adds	r2, r3, r2
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	2bff      	cmp	r3, #255	@ 0xff
 8010ade:	d903      	bls.n	8010ae8 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	22ff      	movs	r2, #255	@ 0xff
 8010ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010ae6:	e004      	b.n	8010af2 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	3324      	adds	r3, #36	@ 0x24
 8010afc:	0019      	movs	r1, r3
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b02:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8010b08:	f7fd fa94 	bl	800e034 <HAL_DMA_Start_IT>
 8010b0c:	1e03      	subs	r3, r0, #0
 8010b0e:	d005      	beq.n	8010b1c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2110      	movs	r1, #16
 8010b14:	0018      	movs	r0, r3
 8010b16:	f7ff fe1f 	bl	8010758 <I2C_ITError>
}
 8010b1a:	e004      	b.n	8010b26 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2140      	movs	r1, #64	@ 0x40
 8010b20:	0018      	movs	r0, r3
 8010b22:	f000 facb 	bl	80110bc <I2C_Enable_IRQ>
}
 8010b26:	46c0      	nop			@ (mov r8, r8)
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	b004      	add	sp, #16
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	46c0      	nop			@ (mov r8, r8)
 8010b30:	ffff7fff 	.word	0xffff7fff

08010b34 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b084      	sub	sp, #16
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b40:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	685a      	ldr	r2, [r3, #4]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	2180      	movs	r1, #128	@ 0x80
 8010b4e:	0209      	lsls	r1, r1, #8
 8010b50:	430a      	orrs	r2, r1
 8010b52:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2110      	movs	r1, #16
 8010b58:	0018      	movs	r0, r3
 8010b5a:	f7ff fdfd 	bl	8010758 <I2C_ITError>
}
 8010b5e:	46c0      	nop			@ (mov r8, r8)
 8010b60:	46bd      	mov	sp, r7
 8010b62:	b004      	add	sp, #16
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b72:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d003      	beq.n	8010b84 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b80:	2200      	movs	r2, #0
 8010b82:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d003      	beq.n	8010b94 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b90:	2200      	movs	r2, #0
 8010b92:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	0018      	movs	r0, r3
 8010b98:	f7ff fee0 	bl	801095c <I2C_TreatErrorCallback>
}
 8010b9c:	46c0      	nop			@ (mov r8, r8)
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	b004      	add	sp, #16
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b084      	sub	sp, #16
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	603b      	str	r3, [r7, #0]
 8010bb0:	1dfb      	adds	r3, r7, #7
 8010bb2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010bb4:	e030      	b.n	8010c18 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010bb6:	683b      	ldr	r3, [r7, #0]
 8010bb8:	3301      	adds	r3, #1
 8010bba:	d02d      	beq.n	8010c18 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010bbc:	f7fc fd1a 	bl	800d5f4 <HAL_GetTick>
 8010bc0:	0002      	movs	r2, r0
 8010bc2:	69bb      	ldr	r3, [r7, #24]
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	683a      	ldr	r2, [r7, #0]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d302      	bcc.n	8010bd2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d122      	bne.n	8010c18 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	699b      	ldr	r3, [r3, #24]
 8010bd8:	68ba      	ldr	r2, [r7, #8]
 8010bda:	4013      	ands	r3, r2
 8010bdc:	68ba      	ldr	r2, [r7, #8]
 8010bde:	1ad3      	subs	r3, r2, r3
 8010be0:	425a      	negs	r2, r3
 8010be2:	4153      	adcs	r3, r2
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	001a      	movs	r2, r3
 8010be8:	1dfb      	adds	r3, r7, #7
 8010bea:	781b      	ldrb	r3, [r3, #0]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d113      	bne.n	8010c18 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bf4:	2220      	movs	r2, #32
 8010bf6:	431a      	orrs	r2, r3
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2241      	movs	r2, #65	@ 0x41
 8010c00:	2120      	movs	r1, #32
 8010c02:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	2242      	movs	r2, #66	@ 0x42
 8010c08:	2100      	movs	r1, #0
 8010c0a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	2240      	movs	r2, #64	@ 0x40
 8010c10:	2100      	movs	r1, #0
 8010c12:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8010c14:	2301      	movs	r3, #1
 8010c16:	e00f      	b.n	8010c38 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	699b      	ldr	r3, [r3, #24]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	4013      	ands	r3, r2
 8010c22:	68ba      	ldr	r2, [r7, #8]
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	425a      	negs	r2, r3
 8010c28:	4153      	adcs	r3, r2
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	001a      	movs	r2, r3
 8010c2e:	1dfb      	adds	r3, r7, #7
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d0bf      	beq.n	8010bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c36:	2300      	movs	r3, #0
}
 8010c38:	0018      	movs	r0, r3
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	b004      	add	sp, #16
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010c4c:	e032      	b.n	8010cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	68b9      	ldr	r1, [r7, #8]
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	0018      	movs	r0, r3
 8010c56:	f000 f8ff 	bl	8010e58 <I2C_IsErrorOccurred>
 8010c5a:	1e03      	subs	r3, r0, #0
 8010c5c:	d001      	beq.n	8010c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010c5e:	2301      	movs	r3, #1
 8010c60:	e030      	b.n	8010cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	3301      	adds	r3, #1
 8010c66:	d025      	beq.n	8010cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c68:	f7fc fcc4 	bl	800d5f4 <HAL_GetTick>
 8010c6c:	0002      	movs	r2, r0
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	1ad3      	subs	r3, r2, r3
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d302      	bcc.n	8010c7e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d11a      	bne.n	8010cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	699b      	ldr	r3, [r3, #24]
 8010c84:	2202      	movs	r2, #2
 8010c86:	4013      	ands	r3, r2
 8010c88:	2b02      	cmp	r3, #2
 8010c8a:	d013      	beq.n	8010cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c90:	2220      	movs	r2, #32
 8010c92:	431a      	orrs	r2, r3
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	2241      	movs	r2, #65	@ 0x41
 8010c9c:	2120      	movs	r1, #32
 8010c9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2242      	movs	r2, #66	@ 0x42
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2240      	movs	r2, #64	@ 0x40
 8010cac:	2100      	movs	r1, #0
 8010cae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	e007      	b.n	8010cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	699b      	ldr	r3, [r3, #24]
 8010cba:	2202      	movs	r2, #2
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d1c5      	bne.n	8010c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8010cc2:	2300      	movs	r3, #0
}
 8010cc4:	0018      	movs	r0, r3
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	b004      	add	sp, #16
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	60b9      	str	r1, [r7, #8]
 8010cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010cd8:	e02f      	b.n	8010d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	68b9      	ldr	r1, [r7, #8]
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	0018      	movs	r0, r3
 8010ce2:	f000 f8b9 	bl	8010e58 <I2C_IsErrorOccurred>
 8010ce6:	1e03      	subs	r3, r0, #0
 8010ce8:	d001      	beq.n	8010cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010cea:	2301      	movs	r3, #1
 8010cec:	e02d      	b.n	8010d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010cee:	f7fc fc81 	bl	800d5f4 <HAL_GetTick>
 8010cf2:	0002      	movs	r2, r0
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	1ad3      	subs	r3, r2, r3
 8010cf8:	68ba      	ldr	r2, [r7, #8]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d302      	bcc.n	8010d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8010cfe:	68bb      	ldr	r3, [r7, #8]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d11a      	bne.n	8010d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	2220      	movs	r2, #32
 8010d0c:	4013      	ands	r3, r2
 8010d0e:	2b20      	cmp	r3, #32
 8010d10:	d013      	beq.n	8010d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d16:	2220      	movs	r2, #32
 8010d18:	431a      	orrs	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2241      	movs	r2, #65	@ 0x41
 8010d22:	2120      	movs	r1, #32
 8010d24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2242      	movs	r2, #66	@ 0x42
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2240      	movs	r2, #64	@ 0x40
 8010d32:	2100      	movs	r1, #0
 8010d34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010d36:	2301      	movs	r3, #1
 8010d38:	e007      	b.n	8010d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	699b      	ldr	r3, [r3, #24]
 8010d40:	2220      	movs	r2, #32
 8010d42:	4013      	ands	r3, r2
 8010d44:	2b20      	cmp	r3, #32
 8010d46:	d1c8      	bne.n	8010cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010d48:	2300      	movs	r3, #0
}
 8010d4a:	0018      	movs	r0, r3
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	b004      	add	sp, #16
 8010d50:	bd80      	pop	{r7, pc}
	...

08010d54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010d60:	e06b      	b.n	8010e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8010d62:	687a      	ldr	r2, [r7, #4]
 8010d64:	68b9      	ldr	r1, [r7, #8]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	0018      	movs	r0, r3
 8010d6a:	f000 f875 	bl	8010e58 <I2C_IsErrorOccurred>
 8010d6e:	1e03      	subs	r3, r0, #0
 8010d70:	d001      	beq.n	8010d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8010d72:	2301      	movs	r3, #1
 8010d74:	e069      	b.n	8010e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	699b      	ldr	r3, [r3, #24]
 8010d7c:	2220      	movs	r2, #32
 8010d7e:	4013      	ands	r3, r2
 8010d80:	2b20      	cmp	r3, #32
 8010d82:	d138      	bne.n	8010df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	699b      	ldr	r3, [r3, #24]
 8010d8a:	2204      	movs	r2, #4
 8010d8c:	4013      	ands	r3, r2
 8010d8e:	2b04      	cmp	r3, #4
 8010d90:	d105      	bne.n	8010d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d001      	beq.n	8010d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	e055      	b.n	8010e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	699b      	ldr	r3, [r3, #24]
 8010da4:	2210      	movs	r2, #16
 8010da6:	4013      	ands	r3, r2
 8010da8:	2b10      	cmp	r3, #16
 8010daa:	d107      	bne.n	8010dbc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	2210      	movs	r2, #16
 8010db2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2204      	movs	r2, #4
 8010db8:	645a      	str	r2, [r3, #68]	@ 0x44
 8010dba:	e002      	b.n	8010dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	2220      	movs	r2, #32
 8010dc8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	685a      	ldr	r2, [r3, #4]
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	491f      	ldr	r1, [pc, #124]	@ (8010e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8010dd6:	400a      	ands	r2, r1
 8010dd8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2241      	movs	r2, #65	@ 0x41
 8010dde:	2120      	movs	r1, #32
 8010de0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2242      	movs	r2, #66	@ 0x42
 8010de6:	2100      	movs	r1, #0
 8010de8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2240      	movs	r2, #64	@ 0x40
 8010dee:	2100      	movs	r1, #0
 8010df0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010df2:	2301      	movs	r3, #1
 8010df4:	e029      	b.n	8010e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010df6:	f7fc fbfd 	bl	800d5f4 <HAL_GetTick>
 8010dfa:	0002      	movs	r2, r0
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	1ad3      	subs	r3, r2, r3
 8010e00:	68ba      	ldr	r2, [r7, #8]
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d302      	bcc.n	8010e0c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d116      	bne.n	8010e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	699b      	ldr	r3, [r3, #24]
 8010e12:	2204      	movs	r2, #4
 8010e14:	4013      	ands	r3, r2
 8010e16:	2b04      	cmp	r3, #4
 8010e18:	d00f      	beq.n	8010e3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e1e:	2220      	movs	r2, #32
 8010e20:	431a      	orrs	r2, r3
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2241      	movs	r2, #65	@ 0x41
 8010e2a:	2120      	movs	r1, #32
 8010e2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2240      	movs	r2, #64	@ 0x40
 8010e32:	2100      	movs	r1, #0
 8010e34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8010e36:	2301      	movs	r3, #1
 8010e38:	e007      	b.n	8010e4a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	699b      	ldr	r3, [r3, #24]
 8010e40:	2204      	movs	r2, #4
 8010e42:	4013      	ands	r3, r2
 8010e44:	2b04      	cmp	r3, #4
 8010e46:	d18c      	bne.n	8010d62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	0018      	movs	r0, r3
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	b004      	add	sp, #16
 8010e50:	bd80      	pop	{r7, pc}
 8010e52:	46c0      	nop			@ (mov r8, r8)
 8010e54:	fe00e800 	.word	0xfe00e800

08010e58 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b08a      	sub	sp, #40	@ 0x28
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	60f8      	str	r0, [r7, #12]
 8010e60:	60b9      	str	r1, [r7, #8]
 8010e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e64:	2327      	movs	r3, #39	@ 0x27
 8010e66:	18fb      	adds	r3, r7, r3
 8010e68:	2200      	movs	r2, #0
 8010e6a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	699b      	ldr	r3, [r3, #24]
 8010e72:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8010e74:	2300      	movs	r3, #0
 8010e76:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	2210      	movs	r2, #16
 8010e80:	4013      	ands	r3, r2
 8010e82:	d100      	bne.n	8010e86 <I2C_IsErrorOccurred+0x2e>
 8010e84:	e079      	b.n	8010f7a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2210      	movs	r2, #16
 8010e8c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010e8e:	e057      	b.n	8010f40 <I2C_IsErrorOccurred+0xe8>
 8010e90:	2227      	movs	r2, #39	@ 0x27
 8010e92:	18bb      	adds	r3, r7, r2
 8010e94:	18ba      	adds	r2, r7, r2
 8010e96:	7812      	ldrb	r2, [r2, #0]
 8010e98:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	d04f      	beq.n	8010f40 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8010ea0:	f7fc fba8 	bl	800d5f4 <HAL_GetTick>
 8010ea4:	0002      	movs	r2, r0
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	68ba      	ldr	r2, [r7, #8]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d302      	bcc.n	8010eb6 <I2C_IsErrorOccurred+0x5e>
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d144      	bne.n	8010f40 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	2380      	movs	r3, #128	@ 0x80
 8010ebe:	01db      	lsls	r3, r3, #7
 8010ec0:	4013      	ands	r3, r2
 8010ec2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8010ec4:	2013      	movs	r0, #19
 8010ec6:	183b      	adds	r3, r7, r0
 8010ec8:	68fa      	ldr	r2, [r7, #12]
 8010eca:	2142      	movs	r1, #66	@ 0x42
 8010ecc:	5c52      	ldrb	r2, [r2, r1]
 8010ece:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	699a      	ldr	r2, [r3, #24]
 8010ed6:	2380      	movs	r3, #128	@ 0x80
 8010ed8:	021b      	lsls	r3, r3, #8
 8010eda:	401a      	ands	r2, r3
 8010edc:	2380      	movs	r3, #128	@ 0x80
 8010ede:	021b      	lsls	r3, r3, #8
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d126      	bne.n	8010f32 <I2C_IsErrorOccurred+0xda>
 8010ee4:	697a      	ldr	r2, [r7, #20]
 8010ee6:	2380      	movs	r3, #128	@ 0x80
 8010ee8:	01db      	lsls	r3, r3, #7
 8010eea:	429a      	cmp	r2, r3
 8010eec:	d021      	beq.n	8010f32 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8010eee:	183b      	adds	r3, r7, r0
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	2b20      	cmp	r3, #32
 8010ef4:	d01d      	beq.n	8010f32 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	685a      	ldr	r2, [r3, #4]
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2180      	movs	r1, #128	@ 0x80
 8010f02:	01c9      	lsls	r1, r1, #7
 8010f04:	430a      	orrs	r2, r1
 8010f06:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8010f08:	f7fc fb74 	bl	800d5f4 <HAL_GetTick>
 8010f0c:	0003      	movs	r3, r0
 8010f0e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010f10:	e00f      	b.n	8010f32 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8010f12:	f7fc fb6f 	bl	800d5f4 <HAL_GetTick>
 8010f16:	0002      	movs	r2, r0
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	2b19      	cmp	r3, #25
 8010f1e:	d908      	bls.n	8010f32 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8010f20:	6a3b      	ldr	r3, [r7, #32]
 8010f22:	2220      	movs	r2, #32
 8010f24:	4313      	orrs	r3, r2
 8010f26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8010f28:	2327      	movs	r3, #39	@ 0x27
 8010f2a:	18fb      	adds	r3, r7, r3
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	701a      	strb	r2, [r3, #0]

              break;
 8010f30:	e006      	b.n	8010f40 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	699b      	ldr	r3, [r3, #24]
 8010f38:	2220      	movs	r2, #32
 8010f3a:	4013      	ands	r3, r2
 8010f3c:	2b20      	cmp	r3, #32
 8010f3e:	d1e8      	bne.n	8010f12 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	699b      	ldr	r3, [r3, #24]
 8010f46:	2220      	movs	r2, #32
 8010f48:	4013      	ands	r3, r2
 8010f4a:	2b20      	cmp	r3, #32
 8010f4c:	d004      	beq.n	8010f58 <I2C_IsErrorOccurred+0x100>
 8010f4e:	2327      	movs	r3, #39	@ 0x27
 8010f50:	18fb      	adds	r3, r7, r3
 8010f52:	781b      	ldrb	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d09b      	beq.n	8010e90 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8010f58:	2327      	movs	r3, #39	@ 0x27
 8010f5a:	18fb      	adds	r3, r7, r3
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d103      	bne.n	8010f6a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2220      	movs	r2, #32
 8010f68:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8010f6a:	6a3b      	ldr	r3, [r7, #32]
 8010f6c:	2204      	movs	r2, #4
 8010f6e:	4313      	orrs	r3, r2
 8010f70:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8010f72:	2327      	movs	r3, #39	@ 0x27
 8010f74:	18fb      	adds	r3, r7, r3
 8010f76:	2201      	movs	r2, #1
 8010f78:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	699b      	ldr	r3, [r3, #24]
 8010f80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8010f82:	69ba      	ldr	r2, [r7, #24]
 8010f84:	2380      	movs	r3, #128	@ 0x80
 8010f86:	005b      	lsls	r3, r3, #1
 8010f88:	4013      	ands	r3, r2
 8010f8a:	d00c      	beq.n	8010fa6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8010f8c:	6a3b      	ldr	r3, [r7, #32]
 8010f8e:	2201      	movs	r2, #1
 8010f90:	4313      	orrs	r3, r2
 8010f92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2280      	movs	r2, #128	@ 0x80
 8010f9a:	0052      	lsls	r2, r2, #1
 8010f9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010f9e:	2327      	movs	r3, #39	@ 0x27
 8010fa0:	18fb      	adds	r3, r7, r3
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8010fa6:	69ba      	ldr	r2, [r7, #24]
 8010fa8:	2380      	movs	r3, #128	@ 0x80
 8010faa:	00db      	lsls	r3, r3, #3
 8010fac:	4013      	ands	r3, r2
 8010fae:	d00c      	beq.n	8010fca <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8010fb0:	6a3b      	ldr	r3, [r7, #32]
 8010fb2:	2208      	movs	r2, #8
 8010fb4:	4313      	orrs	r3, r2
 8010fb6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2280      	movs	r2, #128	@ 0x80
 8010fbe:	00d2      	lsls	r2, r2, #3
 8010fc0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010fc2:	2327      	movs	r3, #39	@ 0x27
 8010fc4:	18fb      	adds	r3, r7, r3
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8010fca:	69ba      	ldr	r2, [r7, #24]
 8010fcc:	2380      	movs	r3, #128	@ 0x80
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4013      	ands	r3, r2
 8010fd2:	d00c      	beq.n	8010fee <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8010fd4:	6a3b      	ldr	r3, [r7, #32]
 8010fd6:	2202      	movs	r2, #2
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2280      	movs	r2, #128	@ 0x80
 8010fe2:	0092      	lsls	r2, r2, #2
 8010fe4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8010fe6:	2327      	movs	r3, #39	@ 0x27
 8010fe8:	18fb      	adds	r3, r7, r3
 8010fea:	2201      	movs	r2, #1
 8010fec:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8010fee:	2327      	movs	r3, #39	@ 0x27
 8010ff0:	18fb      	adds	r3, r7, r3
 8010ff2:	781b      	ldrb	r3, [r3, #0]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d01d      	beq.n	8011034 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	0018      	movs	r0, r3
 8010ffc:	f7ff fcd7 	bl	80109ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	685a      	ldr	r2, [r3, #4]
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	490e      	ldr	r1, [pc, #56]	@ (8011044 <I2C_IsErrorOccurred+0x1ec>)
 801100c:	400a      	ands	r2, r1
 801100e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011014:	6a3b      	ldr	r3, [r7, #32]
 8011016:	431a      	orrs	r2, r3
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2241      	movs	r2, #65	@ 0x41
 8011020:	2120      	movs	r1, #32
 8011022:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2242      	movs	r2, #66	@ 0x42
 8011028:	2100      	movs	r1, #0
 801102a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2240      	movs	r2, #64	@ 0x40
 8011030:	2100      	movs	r1, #0
 8011032:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011034:	2327      	movs	r3, #39	@ 0x27
 8011036:	18fb      	adds	r3, r7, r3
 8011038:	781b      	ldrb	r3, [r3, #0]
}
 801103a:	0018      	movs	r0, r3
 801103c:	46bd      	mov	sp, r7
 801103e:	b00a      	add	sp, #40	@ 0x28
 8011040:	bd80      	pop	{r7, pc}
 8011042:	46c0      	nop			@ (mov r8, r8)
 8011044:	fe00e800 	.word	0xfe00e800

08011048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8011048:	b590      	push	{r4, r7, lr}
 801104a:	b087      	sub	sp, #28
 801104c:	af00      	add	r7, sp, #0
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	0008      	movs	r0, r1
 8011052:	0011      	movs	r1, r2
 8011054:	607b      	str	r3, [r7, #4]
 8011056:	240a      	movs	r4, #10
 8011058:	193b      	adds	r3, r7, r4
 801105a:	1c02      	adds	r2, r0, #0
 801105c:	801a      	strh	r2, [r3, #0]
 801105e:	2009      	movs	r0, #9
 8011060:	183b      	adds	r3, r7, r0
 8011062:	1c0a      	adds	r2, r1, #0
 8011064:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011066:	193b      	adds	r3, r7, r4
 8011068:	881b      	ldrh	r3, [r3, #0]
 801106a:	059b      	lsls	r3, r3, #22
 801106c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801106e:	183b      	adds	r3, r7, r0
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	0419      	lsls	r1, r3, #16
 8011074:	23ff      	movs	r3, #255	@ 0xff
 8011076:	041b      	lsls	r3, r3, #16
 8011078:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801107a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011082:	4313      	orrs	r3, r2
 8011084:	005b      	lsls	r3, r3, #1
 8011086:	085b      	lsrs	r3, r3, #1
 8011088:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011092:	0d51      	lsrs	r1, r2, #21
 8011094:	2280      	movs	r2, #128	@ 0x80
 8011096:	00d2      	lsls	r2, r2, #3
 8011098:	400a      	ands	r2, r1
 801109a:	4907      	ldr	r1, [pc, #28]	@ (80110b8 <I2C_TransferConfig+0x70>)
 801109c:	430a      	orrs	r2, r1
 801109e:	43d2      	mvns	r2, r2
 80110a0:	401a      	ands	r2, r3
 80110a2:	0011      	movs	r1, r2
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	697a      	ldr	r2, [r7, #20]
 80110aa:	430a      	orrs	r2, r1
 80110ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80110ae:	46c0      	nop			@ (mov r8, r8)
 80110b0:	46bd      	mov	sp, r7
 80110b2:	b007      	add	sp, #28
 80110b4:	bd90      	pop	{r4, r7, pc}
 80110b6:	46c0      	nop			@ (mov r8, r8)
 80110b8:	03ff63ff 	.word	0x03ff63ff

080110bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b084      	sub	sp, #16
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
 80110c4:	000a      	movs	r2, r1
 80110c6:	1cbb      	adds	r3, r7, #2
 80110c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80110ca:	2300      	movs	r3, #0
 80110cc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80110d2:	4b3e      	ldr	r3, [pc, #248]	@ (80111cc <I2C_Enable_IRQ+0x110>)
 80110d4:	429a      	cmp	r2, r3
 80110d6:	d035      	beq.n	8011144 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80110dc:	4b3c      	ldr	r3, [pc, #240]	@ (80111d0 <I2C_Enable_IRQ+0x114>)
 80110de:	429a      	cmp	r2, r3
 80110e0:	d030      	beq.n	8011144 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80110e6:	4b3b      	ldr	r3, [pc, #236]	@ (80111d4 <I2C_Enable_IRQ+0x118>)
 80110e8:	429a      	cmp	r2, r3
 80110ea:	d02b      	beq.n	8011144 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80110ec:	1cbb      	adds	r3, r7, #2
 80110ee:	2200      	movs	r2, #0
 80110f0:	5e9b      	ldrsh	r3, [r3, r2]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	da03      	bge.n	80110fe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	22b8      	movs	r2, #184	@ 0xb8
 80110fa:	4313      	orrs	r3, r2
 80110fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80110fe:	1cbb      	adds	r3, r7, #2
 8011100:	881b      	ldrh	r3, [r3, #0]
 8011102:	2201      	movs	r2, #1
 8011104:	4013      	ands	r3, r2
 8011106:	d003      	beq.n	8011110 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	22f2      	movs	r2, #242	@ 0xf2
 801110c:	4313      	orrs	r3, r2
 801110e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011110:	1cbb      	adds	r3, r7, #2
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	2202      	movs	r2, #2
 8011116:	4013      	ands	r3, r2
 8011118:	d003      	beq.n	8011122 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	22f4      	movs	r2, #244	@ 0xf4
 801111e:	4313      	orrs	r3, r2
 8011120:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011122:	1cbb      	adds	r3, r7, #2
 8011124:	881b      	ldrh	r3, [r3, #0]
 8011126:	2b10      	cmp	r3, #16
 8011128:	d103      	bne.n	8011132 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2290      	movs	r2, #144	@ 0x90
 801112e:	4313      	orrs	r3, r2
 8011130:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011132:	1cbb      	adds	r3, r7, #2
 8011134:	881b      	ldrh	r3, [r3, #0]
 8011136:	2b20      	cmp	r3, #32
 8011138:	d13c      	bne.n	80111b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	2220      	movs	r2, #32
 801113e:	4313      	orrs	r3, r2
 8011140:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011142:	e037      	b.n	80111b4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011144:	1cbb      	adds	r3, r7, #2
 8011146:	2200      	movs	r2, #0
 8011148:	5e9b      	ldrsh	r3, [r3, r2]
 801114a:	2b00      	cmp	r3, #0
 801114c:	da03      	bge.n	8011156 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	22b8      	movs	r2, #184	@ 0xb8
 8011152:	4313      	orrs	r3, r2
 8011154:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011156:	1cbb      	adds	r3, r7, #2
 8011158:	881b      	ldrh	r3, [r3, #0]
 801115a:	2201      	movs	r2, #1
 801115c:	4013      	ands	r3, r2
 801115e:	d003      	beq.n	8011168 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	22f2      	movs	r2, #242	@ 0xf2
 8011164:	4313      	orrs	r3, r2
 8011166:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011168:	1cbb      	adds	r3, r7, #2
 801116a:	881b      	ldrh	r3, [r3, #0]
 801116c:	2202      	movs	r2, #2
 801116e:	4013      	ands	r3, r2
 8011170:	d003      	beq.n	801117a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	22f4      	movs	r2, #244	@ 0xf4
 8011176:	4313      	orrs	r3, r2
 8011178:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801117a:	1cbb      	adds	r3, r7, #2
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	2b10      	cmp	r3, #16
 8011180:	d103      	bne.n	801118a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	2290      	movs	r2, #144	@ 0x90
 8011186:	4313      	orrs	r3, r2
 8011188:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801118a:	1cbb      	adds	r3, r7, #2
 801118c:	881b      	ldrh	r3, [r3, #0]
 801118e:	2b20      	cmp	r3, #32
 8011190:	d103      	bne.n	801119a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	2260      	movs	r2, #96	@ 0x60
 8011196:	4313      	orrs	r3, r2
 8011198:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801119e:	4b0d      	ldr	r3, [pc, #52]	@ (80111d4 <I2C_Enable_IRQ+0x118>)
 80111a0:	429a      	cmp	r2, r3
 80111a2:	d007      	beq.n	80111b4 <I2C_Enable_IRQ+0xf8>
 80111a4:	1cbb      	adds	r3, r7, #2
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	2b40      	cmp	r3, #64	@ 0x40
 80111aa:	d103      	bne.n	80111b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2240      	movs	r2, #64	@ 0x40
 80111b0:	4313      	orrs	r3, r2
 80111b2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	6819      	ldr	r1, [r3, #0]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	68fa      	ldr	r2, [r7, #12]
 80111c0:	430a      	orrs	r2, r1
 80111c2:	601a      	str	r2, [r3, #0]
}
 80111c4:	46c0      	nop			@ (mov r8, r8)
 80111c6:	46bd      	mov	sp, r7
 80111c8:	b004      	add	sp, #16
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	0800fa3d 	.word	0x0800fa3d
 80111d0:	0800fe6d 	.word	0x0800fe6d
 80111d4:	0800fc35 	.word	0x0800fc35

080111d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	000a      	movs	r2, r1
 80111e2:	1cbb      	adds	r3, r7, #2
 80111e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80111e6:	2300      	movs	r3, #0
 80111e8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80111ea:	1cbb      	adds	r3, r7, #2
 80111ec:	881b      	ldrh	r3, [r3, #0]
 80111ee:	2201      	movs	r2, #1
 80111f0:	4013      	ands	r3, r2
 80111f2:	d010      	beq.n	8011216 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2242      	movs	r2, #66	@ 0x42
 80111f8:	4313      	orrs	r3, r2
 80111fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2241      	movs	r2, #65	@ 0x41
 8011200:	5c9b      	ldrb	r3, [r3, r2]
 8011202:	b2db      	uxtb	r3, r3
 8011204:	001a      	movs	r2, r3
 8011206:	2328      	movs	r3, #40	@ 0x28
 8011208:	4013      	ands	r3, r2
 801120a:	2b28      	cmp	r3, #40	@ 0x28
 801120c:	d003      	beq.n	8011216 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	22b0      	movs	r2, #176	@ 0xb0
 8011212:	4313      	orrs	r3, r2
 8011214:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011216:	1cbb      	adds	r3, r7, #2
 8011218:	881b      	ldrh	r3, [r3, #0]
 801121a:	2202      	movs	r2, #2
 801121c:	4013      	ands	r3, r2
 801121e:	d010      	beq.n	8011242 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2244      	movs	r2, #68	@ 0x44
 8011224:	4313      	orrs	r3, r2
 8011226:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2241      	movs	r2, #65	@ 0x41
 801122c:	5c9b      	ldrb	r3, [r3, r2]
 801122e:	b2db      	uxtb	r3, r3
 8011230:	001a      	movs	r2, r3
 8011232:	2328      	movs	r3, #40	@ 0x28
 8011234:	4013      	ands	r3, r2
 8011236:	2b28      	cmp	r3, #40	@ 0x28
 8011238:	d003      	beq.n	8011242 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	22b0      	movs	r2, #176	@ 0xb0
 801123e:	4313      	orrs	r3, r2
 8011240:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011242:	1cbb      	adds	r3, r7, #2
 8011244:	2200      	movs	r2, #0
 8011246:	5e9b      	ldrsh	r3, [r3, r2]
 8011248:	2b00      	cmp	r3, #0
 801124a:	da03      	bge.n	8011254 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	22b8      	movs	r2, #184	@ 0xb8
 8011250:	4313      	orrs	r3, r2
 8011252:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011254:	1cbb      	adds	r3, r7, #2
 8011256:	881b      	ldrh	r3, [r3, #0]
 8011258:	2b10      	cmp	r3, #16
 801125a:	d103      	bne.n	8011264 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2290      	movs	r2, #144	@ 0x90
 8011260:	4313      	orrs	r3, r2
 8011262:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011264:	1cbb      	adds	r3, r7, #2
 8011266:	881b      	ldrh	r3, [r3, #0]
 8011268:	2b20      	cmp	r3, #32
 801126a:	d103      	bne.n	8011274 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	2220      	movs	r2, #32
 8011270:	4313      	orrs	r3, r2
 8011272:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011274:	1cbb      	adds	r3, r7, #2
 8011276:	881b      	ldrh	r3, [r3, #0]
 8011278:	2b40      	cmp	r3, #64	@ 0x40
 801127a:	d103      	bne.n	8011284 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2240      	movs	r2, #64	@ 0x40
 8011280:	4313      	orrs	r3, r2
 8011282:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	43d9      	mvns	r1, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	400a      	ands	r2, r1
 8011294:	601a      	str	r2, [r3, #0]
}
 8011296:	46c0      	nop			@ (mov r8, r8)
 8011298:	46bd      	mov	sp, r7
 801129a:	b004      	add	sp, #16
 801129c:	bd80      	pop	{r7, pc}
	...

080112a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
 80112a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2241      	movs	r2, #65	@ 0x41
 80112ae:	5c9b      	ldrb	r3, [r3, r2]
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	2b20      	cmp	r3, #32
 80112b4:	d138      	bne.n	8011328 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2240      	movs	r2, #64	@ 0x40
 80112ba:	5c9b      	ldrb	r3, [r3, r2]
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d101      	bne.n	80112c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80112c0:	2302      	movs	r3, #2
 80112c2:	e032      	b.n	801132a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2240      	movs	r2, #64	@ 0x40
 80112c8:	2101      	movs	r1, #1
 80112ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2241      	movs	r2, #65	@ 0x41
 80112d0:	2124      	movs	r1, #36	@ 0x24
 80112d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2101      	movs	r1, #1
 80112e0:	438a      	bics	r2, r1
 80112e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4911      	ldr	r1, [pc, #68]	@ (8011334 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80112f0:	400a      	ands	r2, r1
 80112f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	6819      	ldr	r1, [r3, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	683a      	ldr	r2, [r7, #0]
 8011300:	430a      	orrs	r2, r1
 8011302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	2101      	movs	r1, #1
 8011310:	430a      	orrs	r2, r1
 8011312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2241      	movs	r2, #65	@ 0x41
 8011318:	2120      	movs	r1, #32
 801131a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2240      	movs	r2, #64	@ 0x40
 8011320:	2100      	movs	r1, #0
 8011322:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011324:	2300      	movs	r3, #0
 8011326:	e000      	b.n	801132a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8011328:	2302      	movs	r3, #2
  }
}
 801132a:	0018      	movs	r0, r3
 801132c:	46bd      	mov	sp, r7
 801132e:	b002      	add	sp, #8
 8011330:	bd80      	pop	{r7, pc}
 8011332:	46c0      	nop			@ (mov r8, r8)
 8011334:	ffffefff 	.word	0xffffefff

08011338 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2241      	movs	r2, #65	@ 0x41
 8011346:	5c9b      	ldrb	r3, [r3, r2]
 8011348:	b2db      	uxtb	r3, r3
 801134a:	2b20      	cmp	r3, #32
 801134c:	d139      	bne.n	80113c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2240      	movs	r2, #64	@ 0x40
 8011352:	5c9b      	ldrb	r3, [r3, r2]
 8011354:	2b01      	cmp	r3, #1
 8011356:	d101      	bne.n	801135c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8011358:	2302      	movs	r3, #2
 801135a:	e033      	b.n	80113c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	2240      	movs	r2, #64	@ 0x40
 8011360:	2101      	movs	r1, #1
 8011362:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2241      	movs	r2, #65	@ 0x41
 8011368:	2124      	movs	r1, #36	@ 0x24
 801136a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2101      	movs	r1, #1
 8011378:	438a      	bics	r2, r1
 801137a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	4a11      	ldr	r2, [pc, #68]	@ (80113cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8011388:	4013      	ands	r3, r2
 801138a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	021b      	lsls	r3, r3, #8
 8011390:	68fa      	ldr	r2, [r7, #12]
 8011392:	4313      	orrs	r3, r2
 8011394:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	68fa      	ldr	r2, [r7, #12]
 801139c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2101      	movs	r1, #1
 80113aa:	430a      	orrs	r2, r1
 80113ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2241      	movs	r2, #65	@ 0x41
 80113b2:	2120      	movs	r1, #32
 80113b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2240      	movs	r2, #64	@ 0x40
 80113ba:	2100      	movs	r1, #0
 80113bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80113be:	2300      	movs	r3, #0
 80113c0:	e000      	b.n	80113c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80113c2:	2302      	movs	r3, #2
  }
}
 80113c4:	0018      	movs	r0, r3
 80113c6:	46bd      	mov	sp, r7
 80113c8:	b004      	add	sp, #16
 80113ca:	bd80      	pop	{r7, pc}
 80113cc:	fffff0ff 	.word	0xfffff0ff

080113d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b088      	sub	sp, #32
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d101      	bne.n	80113e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80113de:	2301      	movs	r3, #1
 80113e0:	e0e1      	b.n	80115a6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2235      	movs	r2, #53	@ 0x35
 80113e6:	5c9b      	ldrb	r3, [r3, r2]
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d107      	bne.n	80113fe <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2234      	movs	r2, #52	@ 0x34
 80113f2:	2100      	movs	r1, #0
 80113f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	0018      	movs	r0, r3
 80113fa:	f7f5 fe7b 	bl	80070f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2235      	movs	r2, #53	@ 0x35
 8011402:	2102      	movs	r1, #2
 8011404:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	69da      	ldr	r2, [r3, #28]
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4967      	ldr	r1, [pc, #412]	@ (80115b0 <HAL_I2S_Init+0x1e0>)
 8011412:	400a      	ands	r2, r1
 8011414:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	2202      	movs	r2, #2
 801141c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	695b      	ldr	r3, [r3, #20]
 8011422:	2b02      	cmp	r3, #2
 8011424:	d073      	beq.n	801150e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	68db      	ldr	r3, [r3, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d102      	bne.n	8011434 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 801142e:	2310      	movs	r3, #16
 8011430:	617b      	str	r3, [r7, #20]
 8011432:	e001      	b.n	8011438 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011434:	2320      	movs	r3, #32
 8011436:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	689b      	ldr	r3, [r3, #8]
 801143c:	2b20      	cmp	r3, #32
 801143e:	d802      	bhi.n	8011446 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	005b      	lsls	r3, r3, #1
 8011444:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8011446:	f002 fe51 	bl	80140ec <HAL_RCC_GetSysClockFreq>
 801144a:	0003      	movs	r3, r0
 801144c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	691a      	ldr	r2, [r3, #16]
 8011452:	2380      	movs	r3, #128	@ 0x80
 8011454:	009b      	lsls	r3, r3, #2
 8011456:	429a      	cmp	r2, r3
 8011458:	d131      	bne.n	80114be <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d016      	beq.n	8011490 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	0019      	movs	r1, r3
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f7ee fe9b 	bl	80001a4 <__udivsi3>
 801146e:	0003      	movs	r3, r0
 8011470:	001a      	movs	r2, r3
 8011472:	0013      	movs	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	189b      	adds	r3, r3, r2
 8011478:	005b      	lsls	r3, r3, #1
 801147a:	001a      	movs	r2, r3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	695b      	ldr	r3, [r3, #20]
 8011480:	0019      	movs	r1, r3
 8011482:	0010      	movs	r0, r2
 8011484:	f7ee fe8e 	bl	80001a4 <__udivsi3>
 8011488:	0003      	movs	r3, r0
 801148a:	3305      	adds	r3, #5
 801148c:	613b      	str	r3, [r7, #16]
 801148e:	e02a      	b.n	80114e6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	00db      	lsls	r3, r3, #3
 8011494:	0019      	movs	r1, r3
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f7ee fe84 	bl	80001a4 <__udivsi3>
 801149c:	0003      	movs	r3, r0
 801149e:	001a      	movs	r2, r3
 80114a0:	0013      	movs	r3, r2
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	189b      	adds	r3, r3, r2
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	001a      	movs	r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	695b      	ldr	r3, [r3, #20]
 80114ae:	0019      	movs	r1, r3
 80114b0:	0010      	movs	r0, r2
 80114b2:	f7ee fe77 	bl	80001a4 <__udivsi3>
 80114b6:	0003      	movs	r3, r0
 80114b8:	3305      	adds	r3, #5
 80114ba:	613b      	str	r3, [r7, #16]
 80114bc:	e013      	b.n	80114e6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80114be:	6979      	ldr	r1, [r7, #20]
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	f7ee fe6f 	bl	80001a4 <__udivsi3>
 80114c6:	0003      	movs	r3, r0
 80114c8:	001a      	movs	r2, r3
 80114ca:	0013      	movs	r3, r2
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	189b      	adds	r3, r3, r2
 80114d0:	005b      	lsls	r3, r3, #1
 80114d2:	001a      	movs	r2, r3
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	695b      	ldr	r3, [r3, #20]
 80114d8:	0019      	movs	r1, r3
 80114da:	0010      	movs	r0, r2
 80114dc:	f7ee fe62 	bl	80001a4 <__udivsi3>
 80114e0:	0003      	movs	r3, r0
 80114e2:	3305      	adds	r3, #5
 80114e4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80114e6:	693b      	ldr	r3, [r7, #16]
 80114e8:	210a      	movs	r1, #10
 80114ea:	0018      	movs	r0, r3
 80114ec:	f7ee fe5a 	bl	80001a4 <__udivsi3>
 80114f0:	0003      	movs	r3, r0
 80114f2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	2201      	movs	r2, #1
 80114f8:	4013      	ands	r3, r2
 80114fa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80114fc:	693a      	ldr	r2, [r7, #16]
 80114fe:	69bb      	ldr	r3, [r7, #24]
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	085b      	lsrs	r3, r3, #1
 8011504:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	021b      	lsls	r3, r3, #8
 801150a:	61bb      	str	r3, [r7, #24]
 801150c:	e003      	b.n	8011516 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 801150e:	2302      	movs	r3, #2
 8011510:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011512:	2300      	movs	r3, #0
 8011514:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011516:	69fb      	ldr	r3, [r7, #28]
 8011518:	2b01      	cmp	r3, #1
 801151a:	d902      	bls.n	8011522 <HAL_I2S_Init+0x152>
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	2bff      	cmp	r3, #255	@ 0xff
 8011520:	d907      	bls.n	8011532 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011526:	2210      	movs	r2, #16
 8011528:	431a      	orrs	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 801152e:	2301      	movs	r3, #1
 8011530:	e039      	b.n	80115a6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	691a      	ldr	r2, [r3, #16]
 8011536:	69bb      	ldr	r3, [r7, #24]
 8011538:	431a      	orrs	r2, r3
 801153a:	0011      	movs	r1, r2
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	69fa      	ldr	r2, [r7, #28]
 8011542:	430a      	orrs	r2, r1
 8011544:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	69db      	ldr	r3, [r3, #28]
 801154c:	4a18      	ldr	r2, [pc, #96]	@ (80115b0 <HAL_I2S_Init+0x1e0>)
 801154e:	401a      	ands	r2, r3
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6859      	ldr	r1, [r3, #4]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	689b      	ldr	r3, [r3, #8]
 8011558:	4319      	orrs	r1, r3
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	4319      	orrs	r1, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	699b      	ldr	r3, [r3, #24]
 8011564:	430b      	orrs	r3, r1
 8011566:	431a      	orrs	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	2180      	movs	r1, #128	@ 0x80
 801156e:	0109      	lsls	r1, r1, #4
 8011570:	430a      	orrs	r2, r1
 8011572:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	689b      	ldr	r3, [r3, #8]
 8011578:	2b30      	cmp	r3, #48	@ 0x30
 801157a:	d003      	beq.n	8011584 <HAL_I2S_Init+0x1b4>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	689b      	ldr	r3, [r3, #8]
 8011580:	2bb0      	cmp	r3, #176	@ 0xb0
 8011582:	d108      	bne.n	8011596 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	69da      	ldr	r2, [r3, #28]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	2180      	movs	r1, #128	@ 0x80
 8011590:	0149      	lsls	r1, r1, #5
 8011592:	430a      	orrs	r2, r1
 8011594:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2200      	movs	r2, #0
 801159a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2235      	movs	r2, #53	@ 0x35
 80115a0:	2101      	movs	r1, #1
 80115a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80115a4:	2300      	movs	r3, #0
}
 80115a6:	0018      	movs	r0, r3
 80115a8:	46bd      	mov	sp, r7
 80115aa:	b008      	add	sp, #32
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	46c0      	nop			@ (mov r8, r8)
 80115b0:	fffff040 	.word	0xfffff040

080115b4 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	1dbb      	adds	r3, r7, #6
 80115c0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80115c2:	68bb      	ldr	r3, [r7, #8]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d003      	beq.n	80115d0 <HAL_I2S_Receive_DMA+0x1c>
 80115c8:	1dbb      	adds	r3, r7, #6
 80115ca:	881b      	ldrh	r3, [r3, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d101      	bne.n	80115d4 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 80115d0:	2301      	movs	r3, #1
 80115d2:	e0a6      	b.n	8011722 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	2234      	movs	r2, #52	@ 0x34
 80115d8:	5c9b      	ldrb	r3, [r3, r2]
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d101      	bne.n	80115e4 <HAL_I2S_Receive_DMA+0x30>
 80115e0:	2302      	movs	r3, #2
 80115e2:	e09e      	b.n	8011722 <HAL_I2S_Receive_DMA+0x16e>
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	2234      	movs	r2, #52	@ 0x34
 80115e8:	2101      	movs	r1, #1
 80115ea:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2235      	movs	r2, #53	@ 0x35
 80115f0:	5c9b      	ldrb	r3, [r3, r2]
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d005      	beq.n	8011604 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2234      	movs	r2, #52	@ 0x34
 80115fc:	2100      	movs	r1, #0
 80115fe:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8011600:	2302      	movs	r3, #2
 8011602:	e08e      	b.n	8011722 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2235      	movs	r2, #53	@ 0x35
 8011608:	2104      	movs	r1, #4
 801160a:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2200      	movs	r2, #0
 8011610:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	68ba      	ldr	r2, [r7, #8]
 8011616:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	69db      	ldr	r3, [r3, #28]
 801161e:	2207      	movs	r2, #7
 8011620:	4013      	ands	r3, r2
 8011622:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	2b03      	cmp	r3, #3
 8011628:	d002      	beq.n	8011630 <HAL_I2S_Receive_DMA+0x7c>
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2b05      	cmp	r3, #5
 801162e:	d10c      	bne.n	801164a <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8011630:	1dbb      	adds	r3, r7, #6
 8011632:	881b      	ldrh	r3, [r3, #0]
 8011634:	18db      	adds	r3, r3, r3
 8011636:	b29a      	uxth	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 801163c:	1dbb      	adds	r3, r7, #6
 801163e:	881b      	ldrh	r3, [r3, #0]
 8011640:	18db      	adds	r3, r3, r3
 8011642:	b29a      	uxth	r2, r3
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011648:	e007      	b.n	801165a <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	1dba      	adds	r2, r7, #6
 801164e:	8812      	ldrh	r2, [r2, #0]
 8011650:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	1dba      	adds	r2, r7, #6
 8011656:	8812      	ldrh	r2, [r2, #0]
 8011658:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801165e:	4a33      	ldr	r2, [pc, #204]	@ (801172c <HAL_I2S_Receive_DMA+0x178>)
 8011660:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011666:	4a32      	ldr	r2, [pc, #200]	@ (8011730 <HAL_I2S_Receive_DMA+0x17c>)
 8011668:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801166e:	4a31      	ldr	r2, [pc, #196]	@ (8011734 <HAL_I2S_Receive_DMA+0x180>)
 8011670:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	69da      	ldr	r2, [r3, #28]
 8011678:	23c0      	movs	r3, #192	@ 0xc0
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	401a      	ands	r2, r3
 801167e:	23c0      	movs	r3, #192	@ 0xc0
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	429a      	cmp	r2, r3
 8011684:	d10a      	bne.n	801169c <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011686:	2300      	movs	r3, #0
 8011688:	613b      	str	r3, [r7, #16]
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	68db      	ldr	r3, [r3, #12]
 8011690:	613b      	str	r3, [r7, #16]
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	613b      	str	r3, [r7, #16]
 801169a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	330c      	adds	r3, #12
 80116a6:	0019      	movs	r1, r3
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116ac:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80116b2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80116b4:	f7fc fcbe 	bl	800e034 <HAL_DMA_Start_IT>
 80116b8:	1e03      	subs	r3, r0, #0
 80116ba:	d00f      	beq.n	80116dc <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116c0:	2208      	movs	r2, #8
 80116c2:	431a      	orrs	r2, r3
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2235      	movs	r2, #53	@ 0x35
 80116cc:	2101      	movs	r1, #1
 80116ce:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2234      	movs	r2, #52	@ 0x34
 80116d4:	2100      	movs	r1, #0
 80116d6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80116d8:	2301      	movs	r3, #1
 80116da:	e022      	b.n	8011722 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	69da      	ldr	r2, [r3, #28]
 80116e2:	2380      	movs	r3, #128	@ 0x80
 80116e4:	00db      	lsls	r3, r3, #3
 80116e6:	4013      	ands	r3, r2
 80116e8:	d108      	bne.n	80116fc <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	69da      	ldr	r2, [r3, #28]
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	2180      	movs	r1, #128	@ 0x80
 80116f6:	00c9      	lsls	r1, r1, #3
 80116f8:	430a      	orrs	r2, r1
 80116fa:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	685b      	ldr	r3, [r3, #4]
 8011702:	2201      	movs	r2, #1
 8011704:	4013      	ands	r3, r2
 8011706:	d107      	bne.n	8011718 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	685a      	ldr	r2, [r3, #4]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2101      	movs	r1, #1
 8011714:	430a      	orrs	r2, r1
 8011716:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	2234      	movs	r2, #52	@ 0x34
 801171c:	2100      	movs	r1, #0
 801171e:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8011720:	2300      	movs	r3, #0
}
 8011722:	0018      	movs	r0, r3
 8011724:	46bd      	mov	sp, r7
 8011726:	b006      	add	sp, #24
 8011728:	bd80      	pop	{r7, pc}
 801172a:	46c0      	nop			@ (mov r8, r8)
 801172c:	08011915 	.word	0x08011915
 8011730:	080118d1 	.word	0x080118d1
 8011734:	08011933 	.word	0x08011933

08011738 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b086      	sub	sp, #24
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011740:	2317      	movs	r3, #23
 8011742:	18fb      	adds	r3, r7, r3
 8011744:	2200      	movs	r2, #0
 8011746:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	685a      	ldr	r2, [r3, #4]
 801174c:	2380      	movs	r3, #128	@ 0x80
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	429a      	cmp	r2, r3
 8011752:	d003      	beq.n	801175c <HAL_I2S_DMAStop+0x24>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d158      	bne.n	801180e <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011760:	2b00      	cmp	r3, #0
 8011762:	d010      	beq.n	8011786 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011768:	0018      	movs	r0, r3
 801176a:	f7fc fcc9 	bl	800e100 <HAL_DMA_Abort>
 801176e:	1e03      	subs	r3, r0, #0
 8011770:	d009      	beq.n	8011786 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011776:	2208      	movs	r2, #8
 8011778:	431a      	orrs	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 801177e:	2317      	movs	r3, #23
 8011780:	18fb      	adds	r3, r7, r3
 8011782:	2201      	movs	r2, #1
 8011784:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	2364      	movs	r3, #100	@ 0x64
 801178a:	2201      	movs	r2, #1
 801178c:	2102      	movs	r1, #2
 801178e:	f000 f8f7 	bl	8011980 <I2S_WaitFlagStateUntilTimeout>
 8011792:	1e03      	subs	r3, r0, #0
 8011794:	d00d      	beq.n	80117b2 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801179a:	2201      	movs	r2, #1
 801179c:	431a      	orrs	r2, r3
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2235      	movs	r2, #53	@ 0x35
 80117a6:	2101      	movs	r1, #1
 80117a8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80117aa:	2317      	movs	r3, #23
 80117ac:	18fb      	adds	r3, r7, r3
 80117ae:	2201      	movs	r2, #1
 80117b0:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	2364      	movs	r3, #100	@ 0x64
 80117b6:	2200      	movs	r2, #0
 80117b8:	2180      	movs	r1, #128	@ 0x80
 80117ba:	f000 f8e1 	bl	8011980 <I2S_WaitFlagStateUntilTimeout>
 80117be:	1e03      	subs	r3, r0, #0
 80117c0:	d00d      	beq.n	80117de <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80117c6:	2201      	movs	r2, #1
 80117c8:	431a      	orrs	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2235      	movs	r2, #53	@ 0x35
 80117d2:	2101      	movs	r1, #1
 80117d4:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 80117d6:	2317      	movs	r3, #23
 80117d8:	18fb      	adds	r3, r7, r3
 80117da:	2201      	movs	r2, #1
 80117dc:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	69da      	ldr	r2, [r3, #28]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4938      	ldr	r1, [pc, #224]	@ (80118cc <HAL_I2S_DMAStop+0x194>)
 80117ea:	400a      	ands	r2, r1
 80117ec:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80117ee:	2300      	movs	r3, #0
 80117f0:	613b      	str	r3, [r7, #16]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	613b      	str	r3, [r7, #16]
 80117fa:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	2102      	movs	r1, #2
 8011808:	438a      	bics	r2, r1
 801180a:	605a      	str	r2, [r3, #4]
 801180c:	e053      	b.n	80118b6 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	685a      	ldr	r2, [r3, #4]
 8011812:	23c0      	movs	r3, #192	@ 0xc0
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	429a      	cmp	r2, r3
 8011818:	d005      	beq.n	8011826 <HAL_I2S_DMAStop+0xee>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	2380      	movs	r3, #128	@ 0x80
 8011820:	005b      	lsls	r3, r3, #1
 8011822:	429a      	cmp	r2, r3
 8011824:	d147      	bne.n	80118b6 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801182a:	2b00      	cmp	r3, #0
 801182c:	d010      	beq.n	8011850 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011832:	0018      	movs	r0, r3
 8011834:	f7fc fc64 	bl	800e100 <HAL_DMA_Abort>
 8011838:	1e03      	subs	r3, r0, #0
 801183a:	d009      	beq.n	8011850 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011840:	2208      	movs	r2, #8
 8011842:	431a      	orrs	r2, r3
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8011848:	2317      	movs	r3, #23
 801184a:	18fb      	adds	r3, r7, r3
 801184c:	2201      	movs	r2, #1
 801184e:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	69da      	ldr	r2, [r3, #28]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	491c      	ldr	r1, [pc, #112]	@ (80118cc <HAL_I2S_DMAStop+0x194>)
 801185c:	400a      	ands	r2, r1
 801185e:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011860:	2300      	movs	r3, #0
 8011862:	60fb      	str	r3, [r7, #12]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	68db      	ldr	r3, [r3, #12]
 801186a:	60fb      	str	r3, [r7, #12]
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	689b      	ldr	r3, [r3, #8]
 8011872:	60fb      	str	r3, [r7, #12]
 8011874:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	685a      	ldr	r2, [r3, #4]
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2101      	movs	r1, #1
 8011882:	438a      	bics	r2, r1
 8011884:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	685a      	ldr	r2, [r3, #4]
 801188a:	2380      	movs	r3, #128	@ 0x80
 801188c:	005b      	lsls	r3, r3, #1
 801188e:	429a      	cmp	r2, r3
 8011890:	d10e      	bne.n	80118b0 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011896:	2240      	movs	r2, #64	@ 0x40
 8011898:	431a      	orrs	r2, r3
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2235      	movs	r2, #53	@ 0x35
 80118a2:	2101      	movs	r1, #1
 80118a4:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 80118a6:	2317      	movs	r3, #23
 80118a8:	18fb      	adds	r3, r7, r3
 80118aa:	2201      	movs	r2, #1
 80118ac:	701a      	strb	r2, [r3, #0]
 80118ae:	e002      	b.n	80118b6 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	2235      	movs	r2, #53	@ 0x35
 80118ba:	2101      	movs	r1, #1
 80118bc:	5499      	strb	r1, [r3, r2]

  return errorcode;
 80118be:	2317      	movs	r3, #23
 80118c0:	18fb      	adds	r3, r7, r3
 80118c2:	781b      	ldrb	r3, [r3, #0]
}
 80118c4:	0018      	movs	r0, r3
 80118c6:	46bd      	mov	sp, r7
 80118c8:	b006      	add	sp, #24
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	fffffbff 	.word	0xfffffbff

080118d0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118dc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	69db      	ldr	r3, [r3, #28]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d10e      	bne.n	8011904 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	685a      	ldr	r2, [r3, #4]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	2101      	movs	r1, #1
 80118f2:	438a      	bics	r2, r1
 80118f4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2200      	movs	r2, #0
 80118fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2235      	movs	r2, #53	@ 0x35
 8011900:	2101      	movs	r1, #1
 8011902:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	0018      	movs	r0, r3
 8011908:	f7f9 fd5c 	bl	800b3c4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801190c:	46c0      	nop			@ (mov r8, r8)
 801190e:	46bd      	mov	sp, r7
 8011910:	b004      	add	sp, #16
 8011912:	bd80      	pop	{r7, pc}

08011914 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011920:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	0018      	movs	r0, r3
 8011926:	f7f9 fd3b 	bl	800b3a0 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 801192a:	46c0      	nop			@ (mov r8, r8)
 801192c:	46bd      	mov	sp, r7
 801192e:	b004      	add	sp, #16
 8011930:	bd80      	pop	{r7, pc}

08011932 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8011932:	b580      	push	{r7, lr}
 8011934:	b084      	sub	sp, #16
 8011936:	af00      	add	r7, sp, #0
 8011938:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801193e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	685a      	ldr	r2, [r3, #4]
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2103      	movs	r1, #3
 801194c:	438a      	bics	r2, r1
 801194e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	2200      	movs	r2, #0
 8011954:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2200      	movs	r2, #0
 801195a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2235      	movs	r2, #53	@ 0x35
 8011960:	2101      	movs	r1, #1
 8011962:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011968:	2208      	movs	r2, #8
 801196a:	431a      	orrs	r2, r3
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	0018      	movs	r0, r3
 8011974:	f7f9 fd74 	bl	800b460 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011978:	46c0      	nop			@ (mov r8, r8)
 801197a:	46bd      	mov	sp, r7
 801197c:	b004      	add	sp, #16
 801197e:	bd80      	pop	{r7, pc}

08011980 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b086      	sub	sp, #24
 8011984:	af00      	add	r7, sp, #0
 8011986:	60f8      	str	r0, [r7, #12]
 8011988:	60b9      	str	r1, [r7, #8]
 801198a:	603b      	str	r3, [r7, #0]
 801198c:	1dfb      	adds	r3, r7, #7
 801198e:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8011990:	f7fb fe30 	bl	800d5f4 <HAL_GetTick>
 8011994:	0003      	movs	r3, r0
 8011996:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011998:	e017      	b.n	80119ca <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	3301      	adds	r3, #1
 801199e:	d014      	beq.n	80119ca <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 80119a0:	f7fb fe28 	bl	800d5f4 <HAL_GetTick>
 80119a4:	0002      	movs	r2, r0
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	1ad3      	subs	r3, r2, r3
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d902      	bls.n	80119b6 <I2S_WaitFlagStateUntilTimeout+0x36>
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d109      	bne.n	80119ca <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	2235      	movs	r2, #53	@ 0x35
 80119ba:	2101      	movs	r1, #1
 80119bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2234      	movs	r2, #52	@ 0x34
 80119c2:	2100      	movs	r1, #0
 80119c4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80119c6:	2303      	movs	r3, #3
 80119c8:	e00f      	b.n	80119ea <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	689b      	ldr	r3, [r3, #8]
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	4013      	ands	r3, r2
 80119d4:	68ba      	ldr	r2, [r7, #8]
 80119d6:	1ad3      	subs	r3, r2, r3
 80119d8:	425a      	negs	r2, r3
 80119da:	4153      	adcs	r3, r2
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	001a      	movs	r2, r3
 80119e0:	1dfb      	adds	r3, r7, #7
 80119e2:	781b      	ldrb	r3, [r3, #0]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d1d8      	bne.n	801199a <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80119e8:	2300      	movs	r3, #0
}
 80119ea:	0018      	movs	r0, r3
 80119ec:	46bd      	mov	sp, r7
 80119ee:	b006      	add	sp, #24
 80119f0:	bd80      	pop	{r7, pc}
	...

080119f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80119f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f6:	b08b      	sub	sp, #44	@ 0x2c
 80119f8:	af06      	add	r7, sp, #24
 80119fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d101      	bne.n	8011a06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8011a02:	2301      	movs	r3, #1
 8011a04:	e0f0      	b.n	8011be8 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	4a79      	ldr	r2, [pc, #484]	@ (8011bf0 <HAL_PCD_Init+0x1fc>)
 8011a0a:	5c9b      	ldrb	r3, [r3, r2]
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d108      	bne.n	8011a24 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	23aa      	movs	r3, #170	@ 0xaa
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	2100      	movs	r1, #0
 8011a1a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	0018      	movs	r0, r3
 8011a20:	f009 fdd4 	bl	801b5cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4a72      	ldr	r2, [pc, #456]	@ (8011bf0 <HAL_PCD_Init+0x1fc>)
 8011a28:	2103      	movs	r1, #3
 8011a2a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	0018      	movs	r0, r3
 8011a32:	f005 fd87 	bl	8017544 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011a36:	230f      	movs	r3, #15
 8011a38:	18fb      	adds	r3, r7, r3
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	701a      	strb	r2, [r3, #0]
 8011a3e:	e049      	b.n	8011ad4 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011a40:	200f      	movs	r0, #15
 8011a42:	183b      	adds	r3, r7, r0
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	6879      	ldr	r1, [r7, #4]
 8011a48:	1c5a      	adds	r2, r3, #1
 8011a4a:	0013      	movs	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	189b      	adds	r3, r3, r2
 8011a50:	00db      	lsls	r3, r3, #3
 8011a52:	18cb      	adds	r3, r1, r3
 8011a54:	3301      	adds	r3, #1
 8011a56:	2201      	movs	r2, #1
 8011a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8011a5a:	183b      	adds	r3, r7, r0
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	6879      	ldr	r1, [r7, #4]
 8011a60:	1c5a      	adds	r2, r3, #1
 8011a62:	0013      	movs	r3, r2
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	189b      	adds	r3, r3, r2
 8011a68:	00db      	lsls	r3, r3, #3
 8011a6a:	183a      	adds	r2, r7, r0
 8011a6c:	7812      	ldrb	r2, [r2, #0]
 8011a6e:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8011a70:	183b      	adds	r3, r7, r0
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	6879      	ldr	r1, [r7, #4]
 8011a76:	1c5a      	adds	r2, r3, #1
 8011a78:	0013      	movs	r3, r2
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	189b      	adds	r3, r3, r2
 8011a7e:	00db      	lsls	r3, r3, #3
 8011a80:	18cb      	adds	r3, r1, r3
 8011a82:	3303      	adds	r3, #3
 8011a84:	2200      	movs	r2, #0
 8011a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8011a88:	183b      	adds	r3, r7, r0
 8011a8a:	781a      	ldrb	r2, [r3, #0]
 8011a8c:	6879      	ldr	r1, [r7, #4]
 8011a8e:	0013      	movs	r3, r2
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	189b      	adds	r3, r3, r2
 8011a94:	00db      	lsls	r3, r3, #3
 8011a96:	18cb      	adds	r3, r1, r3
 8011a98:	3338      	adds	r3, #56	@ 0x38
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8011a9e:	183b      	adds	r3, r7, r0
 8011aa0:	781a      	ldrb	r2, [r3, #0]
 8011aa2:	6879      	ldr	r1, [r7, #4]
 8011aa4:	0013      	movs	r3, r2
 8011aa6:	009b      	lsls	r3, r3, #2
 8011aa8:	189b      	adds	r3, r3, r2
 8011aaa:	00db      	lsls	r3, r3, #3
 8011aac:	18cb      	adds	r3, r1, r3
 8011aae:	333c      	adds	r3, #60	@ 0x3c
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011ab4:	183b      	adds	r3, r7, r0
 8011ab6:	781a      	ldrb	r2, [r3, #0]
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	0013      	movs	r3, r2
 8011abc:	009b      	lsls	r3, r3, #2
 8011abe:	189b      	adds	r3, r3, r2
 8011ac0:	00db      	lsls	r3, r3, #3
 8011ac2:	18cb      	adds	r3, r1, r3
 8011ac4:	3340      	adds	r3, #64	@ 0x40
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011aca:	183b      	adds	r3, r7, r0
 8011acc:	781a      	ldrb	r2, [r3, #0]
 8011ace:	183b      	adds	r3, r7, r0
 8011ad0:	3201      	adds	r2, #1
 8011ad2:	701a      	strb	r2, [r3, #0]
 8011ad4:	210f      	movs	r1, #15
 8011ad6:	187b      	adds	r3, r7, r1
 8011ad8:	781a      	ldrb	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	685b      	ldr	r3, [r3, #4]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d3ae      	bcc.n	8011a40 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011ae2:	187b      	adds	r3, r7, r1
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	701a      	strb	r2, [r3, #0]
 8011ae8:	e056      	b.n	8011b98 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8011aea:	240f      	movs	r4, #15
 8011aec:	193b      	adds	r3, r7, r4
 8011aee:	781a      	ldrb	r2, [r3, #0]
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	236a      	movs	r3, #106	@ 0x6a
 8011af4:	33ff      	adds	r3, #255	@ 0xff
 8011af6:	0019      	movs	r1, r3
 8011af8:	0013      	movs	r3, r2
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	189b      	adds	r3, r3, r2
 8011afe:	00db      	lsls	r3, r3, #3
 8011b00:	18c3      	adds	r3, r0, r3
 8011b02:	185b      	adds	r3, r3, r1
 8011b04:	2200      	movs	r2, #0
 8011b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011b08:	193b      	adds	r3, r7, r4
 8011b0a:	781a      	ldrb	r2, [r3, #0]
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	23b4      	movs	r3, #180	@ 0xb4
 8011b10:	0059      	lsls	r1, r3, #1
 8011b12:	0013      	movs	r3, r2
 8011b14:	009b      	lsls	r3, r3, #2
 8011b16:	189b      	adds	r3, r3, r2
 8011b18:	00db      	lsls	r3, r3, #3
 8011b1a:	18c3      	adds	r3, r0, r3
 8011b1c:	185b      	adds	r3, r3, r1
 8011b1e:	193a      	adds	r2, r7, r4
 8011b20:	7812      	ldrb	r2, [r2, #0]
 8011b22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8011b24:	193b      	adds	r3, r7, r4
 8011b26:	781a      	ldrb	r2, [r3, #0]
 8011b28:	6878      	ldr	r0, [r7, #4]
 8011b2a:	236c      	movs	r3, #108	@ 0x6c
 8011b2c:	33ff      	adds	r3, #255	@ 0xff
 8011b2e:	0019      	movs	r1, r3
 8011b30:	0013      	movs	r3, r2
 8011b32:	009b      	lsls	r3, r3, #2
 8011b34:	189b      	adds	r3, r3, r2
 8011b36:	00db      	lsls	r3, r3, #3
 8011b38:	18c3      	adds	r3, r0, r3
 8011b3a:	185b      	adds	r3, r3, r1
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011b40:	193b      	adds	r3, r7, r4
 8011b42:	781a      	ldrb	r2, [r3, #0]
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	23bc      	movs	r3, #188	@ 0xbc
 8011b48:	0059      	lsls	r1, r3, #1
 8011b4a:	0013      	movs	r3, r2
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	189b      	adds	r3, r3, r2
 8011b50:	00db      	lsls	r3, r3, #3
 8011b52:	18c3      	adds	r3, r0, r3
 8011b54:	185b      	adds	r3, r3, r1
 8011b56:	2200      	movs	r2, #0
 8011b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011b5a:	193b      	adds	r3, r7, r4
 8011b5c:	781a      	ldrb	r2, [r3, #0]
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	23be      	movs	r3, #190	@ 0xbe
 8011b62:	0059      	lsls	r1, r3, #1
 8011b64:	0013      	movs	r3, r2
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	189b      	adds	r3, r3, r2
 8011b6a:	00db      	lsls	r3, r3, #3
 8011b6c:	18c3      	adds	r3, r0, r3
 8011b6e:	185b      	adds	r3, r3, r1
 8011b70:	2200      	movs	r2, #0
 8011b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8011b74:	193b      	adds	r3, r7, r4
 8011b76:	781a      	ldrb	r2, [r3, #0]
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	23c0      	movs	r3, #192	@ 0xc0
 8011b7c:	0059      	lsls	r1, r3, #1
 8011b7e:	0013      	movs	r3, r2
 8011b80:	009b      	lsls	r3, r3, #2
 8011b82:	189b      	adds	r3, r3, r2
 8011b84:	00db      	lsls	r3, r3, #3
 8011b86:	18c3      	adds	r3, r0, r3
 8011b88:	185b      	adds	r3, r3, r1
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011b8e:	193b      	adds	r3, r7, r4
 8011b90:	781a      	ldrb	r2, [r3, #0]
 8011b92:	193b      	adds	r3, r7, r4
 8011b94:	3201      	adds	r2, #1
 8011b96:	701a      	strb	r2, [r3, #0]
 8011b98:	230f      	movs	r3, #15
 8011b9a:	18fb      	adds	r3, r7, r3
 8011b9c:	781a      	ldrb	r2, [r3, #0]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d3a1      	bcc.n	8011aea <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6818      	ldr	r0, [r3, #0]
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	466a      	mov	r2, sp
 8011bae:	0011      	movs	r1, r2
 8011bb0:	001a      	movs	r2, r3
 8011bb2:	3210      	adds	r2, #16
 8011bb4:	ca70      	ldmia	r2!, {r4, r5, r6}
 8011bb6:	c170      	stmia	r1!, {r4, r5, r6}
 8011bb8:	ca30      	ldmia	r2!, {r4, r5}
 8011bba:	c130      	stmia	r1!, {r4, r5}
 8011bbc:	6859      	ldr	r1, [r3, #4]
 8011bbe:	689a      	ldr	r2, [r3, #8]
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	f005 fcd9 	bl	8017578 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2224      	movs	r2, #36	@ 0x24
 8011bca:	2100      	movs	r1, #0
 8011bcc:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4a07      	ldr	r2, [pc, #28]	@ (8011bf0 <HAL_PCD_Init+0x1fc>)
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	69db      	ldr	r3, [r3, #28]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d103      	bne.n	8011be6 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	0018      	movs	r0, r3
 8011be2:	f001 fd23 	bl	801362c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8011be6:	2300      	movs	r3, #0
}
 8011be8:	0018      	movs	r0, r3
 8011bea:	46bd      	mov	sp, r7
 8011bec:	b005      	add	sp, #20
 8011bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011bf0:	000002a9 	.word	0x000002a9

08011bf4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	23aa      	movs	r3, #170	@ 0xaa
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	5cd3      	ldrb	r3, [r2, r3]
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d101      	bne.n	8011c0c <HAL_PCD_Start+0x18>
 8011c08:	2302      	movs	r3, #2
 8011c0a:	e014      	b.n	8011c36 <HAL_PCD_Start+0x42>
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	23aa      	movs	r3, #170	@ 0xaa
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	2101      	movs	r1, #1
 8011c14:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	0018      	movs	r0, r3
 8011c1c:	f005 fc7c 	bl	8017518 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	0018      	movs	r0, r3
 8011c26:	f007 fc7f 	bl	8019528 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	23aa      	movs	r3, #170	@ 0xaa
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	2100      	movs	r1, #0
 8011c32:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8011c34:	2300      	movs	r3, #0
}
 8011c36:	0018      	movs	r0, r3
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	b002      	add	sp, #8
 8011c3c:	bd80      	pop	{r7, pc}
	...

08011c40 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	0018      	movs	r0, r3
 8011c4e:	f007 fc81 	bl	8019554 <USB_ReadInterrupts>
 8011c52:	0003      	movs	r3, r0
 8011c54:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8011c56:	68fa      	ldr	r2, [r7, #12]
 8011c58:	2380      	movs	r3, #128	@ 0x80
 8011c5a:	021b      	lsls	r3, r3, #8
 8011c5c:	4013      	ands	r3, r2
 8011c5e:	d004      	beq.n	8011c6a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	0018      	movs	r0, r3
 8011c64:	f000 fb62 	bl	801232c <PCD_EP_ISR_Handler>

    return;
 8011c68:	e11d      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8011c6a:	68fa      	ldr	r2, [r7, #12]
 8011c6c:	2380      	movs	r3, #128	@ 0x80
 8011c6e:	00db      	lsls	r3, r3, #3
 8011c70:	4013      	ands	r3, r2
 8011c72:	d015      	beq.n	8011ca0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2244      	movs	r2, #68	@ 0x44
 8011c7a:	5a9b      	ldrh	r3, [r3, r2]
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	498a      	ldr	r1, [pc, #552]	@ (8011eac <HAL_PCD_IRQHandler+0x26c>)
 8011c84:	400a      	ands	r2, r1
 8011c86:	b291      	uxth	r1, r2
 8011c88:	2244      	movs	r2, #68	@ 0x44
 8011c8a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	0018      	movs	r0, r3
 8011c90:	f009 fd1f 	bl	801b6d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2100      	movs	r1, #0
 8011c98:	0018      	movs	r0, r3
 8011c9a:	f000 f915 	bl	8011ec8 <HAL_PCD_SetAddress>

    return;
 8011c9e:	e102      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	2380      	movs	r3, #128	@ 0x80
 8011ca4:	01db      	lsls	r3, r3, #7
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	d00c      	beq.n	8011cc4 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	2244      	movs	r2, #68	@ 0x44
 8011cb0:	5a9b      	ldrh	r3, [r3, r2]
 8011cb2:	b29a      	uxth	r2, r3
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	497d      	ldr	r1, [pc, #500]	@ (8011eb0 <HAL_PCD_IRQHandler+0x270>)
 8011cba:	400a      	ands	r2, r1
 8011cbc:	b291      	uxth	r1, r2
 8011cbe:	2244      	movs	r2, #68	@ 0x44
 8011cc0:	5299      	strh	r1, [r3, r2]

    return;
 8011cc2:	e0f0      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8011cc4:	68fa      	ldr	r2, [r7, #12]
 8011cc6:	2380      	movs	r3, #128	@ 0x80
 8011cc8:	019b      	lsls	r3, r3, #6
 8011cca:	4013      	ands	r3, r2
 8011ccc:	d00c      	beq.n	8011ce8 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2244      	movs	r2, #68	@ 0x44
 8011cd4:	5a9b      	ldrh	r3, [r3, r2]
 8011cd6:	b29a      	uxth	r2, r3
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	4975      	ldr	r1, [pc, #468]	@ (8011eb4 <HAL_PCD_IRQHandler+0x274>)
 8011cde:	400a      	ands	r2, r1
 8011ce0:	b291      	uxth	r1, r2
 8011ce2:	2244      	movs	r2, #68	@ 0x44
 8011ce4:	5299      	strh	r1, [r3, r2]

    return;
 8011ce6:	e0de      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	2380      	movs	r3, #128	@ 0x80
 8011cec:	015b      	lsls	r3, r3, #5
 8011cee:	4013      	ands	r3, r2
 8011cf0:	d038      	beq.n	8011d64 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	2240      	movs	r2, #64	@ 0x40
 8011cf8:	5a9b      	ldrh	r3, [r3, r2]
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2104      	movs	r1, #4
 8011d02:	438a      	bics	r2, r1
 8011d04:	b291      	uxth	r1, r2
 8011d06:	2240      	movs	r2, #64	@ 0x40
 8011d08:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	2240      	movs	r2, #64	@ 0x40
 8011d10:	5a9b      	ldrh	r3, [r3, r2]
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2108      	movs	r1, #8
 8011d1a:	438a      	bics	r2, r1
 8011d1c:	b291      	uxth	r1, r2
 8011d1e:	2240      	movs	r2, #64	@ 0x40
 8011d20:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	23b8      	movs	r3, #184	@ 0xb8
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	5cd3      	ldrb	r3, [r2, r3]
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d109      	bne.n	8011d42 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	23b8      	movs	r3, #184	@ 0xb8
 8011d32:	009b      	lsls	r3, r3, #2
 8011d34:	2100      	movs	r1, #0
 8011d36:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	0018      	movs	r0, r3
 8011d3e:	f001 fc9f 	bl	8013680 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	0018      	movs	r0, r3
 8011d46:	f009 fd05 	bl	801b754 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	2244      	movs	r2, #68	@ 0x44
 8011d50:	5a9b      	ldrh	r3, [r3, r2]
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	4957      	ldr	r1, [pc, #348]	@ (8011eb8 <HAL_PCD_IRQHandler+0x278>)
 8011d5a:	400a      	ands	r2, r1
 8011d5c:	b291      	uxth	r1, r2
 8011d5e:	2244      	movs	r2, #68	@ 0x44
 8011d60:	5299      	strh	r1, [r3, r2]

    return;
 8011d62:	e0a0      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8011d64:	68fa      	ldr	r2, [r7, #12]
 8011d66:	2380      	movs	r3, #128	@ 0x80
 8011d68:	011b      	lsls	r3, r3, #4
 8011d6a:	4013      	ands	r3, r2
 8011d6c:	d028      	beq.n	8011dc0 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2240      	movs	r2, #64	@ 0x40
 8011d74:	5a9b      	ldrh	r3, [r3, r2]
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2108      	movs	r1, #8
 8011d7e:	430a      	orrs	r2, r1
 8011d80:	b291      	uxth	r1, r2
 8011d82:	2240      	movs	r2, #64	@ 0x40
 8011d84:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	2244      	movs	r2, #68	@ 0x44
 8011d8c:	5a9b      	ldrh	r3, [r3, r2]
 8011d8e:	b29a      	uxth	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	4949      	ldr	r1, [pc, #292]	@ (8011ebc <HAL_PCD_IRQHandler+0x27c>)
 8011d96:	400a      	ands	r2, r1
 8011d98:	b291      	uxth	r1, r2
 8011d9a:	2244      	movs	r2, #68	@ 0x44
 8011d9c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	2240      	movs	r2, #64	@ 0x40
 8011da4:	5a9b      	ldrh	r3, [r3, r2]
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2104      	movs	r1, #4
 8011dae:	430a      	orrs	r2, r1
 8011db0:	b291      	uxth	r1, r2
 8011db2:	2240      	movs	r2, #64	@ 0x40
 8011db4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	0018      	movs	r0, r3
 8011dba:	f009 fcaf 	bl	801b71c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011dbe:	e072      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	2280      	movs	r2, #128	@ 0x80
 8011dc4:	4013      	ands	r3, r2
 8011dc6:	d046      	beq.n	8011e56 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	2244      	movs	r2, #68	@ 0x44
 8011dce:	5a9b      	ldrh	r3, [r3, r2]
 8011dd0:	b29a      	uxth	r2, r3
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	2180      	movs	r1, #128	@ 0x80
 8011dd8:	438a      	bics	r2, r1
 8011dda:	b291      	uxth	r1, r2
 8011ddc:	2244      	movs	r2, #68	@ 0x44
 8011dde:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	23b8      	movs	r3, #184	@ 0xb8
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	5cd3      	ldrb	r3, [r2, r3]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d12f      	bne.n	8011e4c <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	2240      	movs	r2, #64	@ 0x40
 8011df2:	5a9b      	ldrh	r3, [r3, r2]
 8011df4:	b29a      	uxth	r2, r3
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	2104      	movs	r1, #4
 8011dfc:	430a      	orrs	r2, r1
 8011dfe:	b291      	uxth	r1, r2
 8011e00:	2240      	movs	r2, #64	@ 0x40
 8011e02:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	2240      	movs	r2, #64	@ 0x40
 8011e0a:	5a9b      	ldrh	r3, [r3, r2]
 8011e0c:	b29a      	uxth	r2, r3
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2108      	movs	r1, #8
 8011e14:	430a      	orrs	r2, r1
 8011e16:	b291      	uxth	r1, r2
 8011e18:	2240      	movs	r2, #64	@ 0x40
 8011e1a:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	23b8      	movs	r3, #184	@ 0xb8
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	2101      	movs	r1, #1
 8011e24:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	2254      	movs	r2, #84	@ 0x54
 8011e2c:	5a9b      	ldrh	r3, [r3, r2]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	089b      	lsrs	r3, r3, #2
 8011e32:	223c      	movs	r2, #60	@ 0x3c
 8011e34:	4013      	ands	r3, r2
 8011e36:	0019      	movs	r1, r3
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	23b9      	movs	r3, #185	@ 0xb9
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2101      	movs	r1, #1
 8011e44:	0018      	movs	r0, r3
 8011e46:	f001 fc1b 	bl	8013680 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8011e4a:	e02c      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	0018      	movs	r0, r3
 8011e50:	f009 fc64 	bl	801b71c <HAL_PCD_SuspendCallback>
    return;
 8011e54:	e027      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8011e56:	68fa      	ldr	r2, [r7, #12]
 8011e58:	2380      	movs	r3, #128	@ 0x80
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	4013      	ands	r3, r2
 8011e5e:	d010      	beq.n	8011e82 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	2244      	movs	r2, #68	@ 0x44
 8011e66:	5a9b      	ldrh	r3, [r3, r2]
 8011e68:	b29a      	uxth	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	4914      	ldr	r1, [pc, #80]	@ (8011ec0 <HAL_PCD_IRQHandler+0x280>)
 8011e70:	400a      	ands	r2, r1
 8011e72:	b291      	uxth	r1, r2
 8011e74:	2244      	movs	r2, #68	@ 0x44
 8011e76:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	0018      	movs	r0, r3
 8011e7c:	f009 fc1a 	bl	801b6b4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8011e80:	e011      	b.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8011e82:	68fa      	ldr	r2, [r7, #12]
 8011e84:	2380      	movs	r3, #128	@ 0x80
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	4013      	ands	r3, r2
 8011e8a:	d00c      	beq.n	8011ea6 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	2244      	movs	r2, #68	@ 0x44
 8011e92:	5a9b      	ldrh	r3, [r3, r2]
 8011e94:	b29a      	uxth	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	490a      	ldr	r1, [pc, #40]	@ (8011ec4 <HAL_PCD_IRQHandler+0x284>)
 8011e9c:	400a      	ands	r2, r1
 8011e9e:	b291      	uxth	r1, r2
 8011ea0:	2244      	movs	r2, #68	@ 0x44
 8011ea2:	5299      	strh	r1, [r3, r2]

    return;
 8011ea4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	b004      	add	sp, #16
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	fffffbff 	.word	0xfffffbff
 8011eb0:	ffffbfff 	.word	0xffffbfff
 8011eb4:	ffffdfff 	.word	0xffffdfff
 8011eb8:	ffffefff 	.word	0xffffefff
 8011ebc:	fffff7ff 	.word	0xfffff7ff
 8011ec0:	fffffdff 	.word	0xfffffdff
 8011ec4:	fffffeff 	.word	0xfffffeff

08011ec8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	000a      	movs	r2, r1
 8011ed2:	1cfb      	adds	r3, r7, #3
 8011ed4:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8011ed6:	687a      	ldr	r2, [r7, #4]
 8011ed8:	23aa      	movs	r3, #170	@ 0xaa
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	5cd3      	ldrb	r3, [r2, r3]
 8011ede:	2b01      	cmp	r3, #1
 8011ee0:	d101      	bne.n	8011ee6 <HAL_PCD_SetAddress+0x1e>
 8011ee2:	2302      	movs	r3, #2
 8011ee4:	e017      	b.n	8011f16 <HAL_PCD_SetAddress+0x4e>
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	23aa      	movs	r3, #170	@ 0xaa
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	2101      	movs	r1, #1
 8011eee:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	1cfa      	adds	r2, r7, #3
 8011ef4:	2124      	movs	r1, #36	@ 0x24
 8011ef6:	7812      	ldrb	r2, [r2, #0]
 8011ef8:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	681a      	ldr	r2, [r3, #0]
 8011efe:	1cfb      	adds	r3, r7, #3
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	0019      	movs	r1, r3
 8011f04:	0010      	movs	r0, r2
 8011f06:	f007 fafb 	bl	8019500 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8011f0a:	687a      	ldr	r2, [r7, #4]
 8011f0c:	23aa      	movs	r3, #170	@ 0xaa
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	2100      	movs	r1, #0
 8011f12:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	0018      	movs	r0, r3
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	b002      	add	sp, #8
 8011f1c:	bd80      	pop	{r7, pc}

08011f1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8011f1e:	b590      	push	{r4, r7, lr}
 8011f20:	b085      	sub	sp, #20
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
 8011f26:	000c      	movs	r4, r1
 8011f28:	0010      	movs	r0, r2
 8011f2a:	0019      	movs	r1, r3
 8011f2c:	1cfb      	adds	r3, r7, #3
 8011f2e:	1c22      	adds	r2, r4, #0
 8011f30:	701a      	strb	r2, [r3, #0]
 8011f32:	003b      	movs	r3, r7
 8011f34:	1c02      	adds	r2, r0, #0
 8011f36:	801a      	strh	r2, [r3, #0]
 8011f38:	1cbb      	adds	r3, r7, #2
 8011f3a:	1c0a      	adds	r2, r1, #0
 8011f3c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8011f3e:	230b      	movs	r3, #11
 8011f40:	18fb      	adds	r3, r7, r3
 8011f42:	2200      	movs	r2, #0
 8011f44:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8011f46:	1cfb      	adds	r3, r7, #3
 8011f48:	781b      	ldrb	r3, [r3, #0]
 8011f4a:	b25b      	sxtb	r3, r3
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	da0f      	bge.n	8011f70 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8011f50:	1cfb      	adds	r3, r7, #3
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	2207      	movs	r2, #7
 8011f56:	4013      	ands	r3, r2
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	0013      	movs	r3, r2
 8011f5c:	009b      	lsls	r3, r3, #2
 8011f5e:	189b      	adds	r3, r3, r2
 8011f60:	00db      	lsls	r3, r3, #3
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	18d3      	adds	r3, r2, r3
 8011f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2201      	movs	r2, #1
 8011f6c:	705a      	strb	r2, [r3, #1]
 8011f6e:	e00f      	b.n	8011f90 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8011f70:	1cfb      	adds	r3, r7, #3
 8011f72:	781b      	ldrb	r3, [r3, #0]
 8011f74:	2207      	movs	r2, #7
 8011f76:	401a      	ands	r2, r3
 8011f78:	0013      	movs	r3, r2
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	189b      	adds	r3, r3, r2
 8011f7e:	00db      	lsls	r3, r3, #3
 8011f80:	3369      	adds	r3, #105	@ 0x69
 8011f82:	33ff      	adds	r3, #255	@ 0xff
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	18d3      	adds	r3, r2, r3
 8011f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8011f90:	1cfb      	adds	r3, r7, #3
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	2207      	movs	r2, #7
 8011f96:	4013      	ands	r3, r2
 8011f98:	b2da      	uxtb	r2, r3
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8011f9e:	003b      	movs	r3, r7
 8011fa0:	881a      	ldrh	r2, [r3, #0]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	1cba      	adds	r2, r7, #2
 8011faa:	7812      	ldrb	r2, [r2, #0]
 8011fac:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8011fae:	1cbb      	adds	r3, r7, #2
 8011fb0:	781b      	ldrb	r3, [r3, #0]
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	d102      	bne.n	8011fbc <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	23aa      	movs	r3, #170	@ 0xaa
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	5cd3      	ldrb	r3, [r2, r3]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d101      	bne.n	8011fcc <HAL_PCD_EP_Open+0xae>
 8011fc8:	2302      	movs	r3, #2
 8011fca:	e013      	b.n	8011ff4 <HAL_PCD_EP_Open+0xd6>
 8011fcc:	687a      	ldr	r2, [r7, #4]
 8011fce:	23aa      	movs	r3, #170	@ 0xaa
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	2101      	movs	r1, #1
 8011fd4:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	68fa      	ldr	r2, [r7, #12]
 8011fdc:	0011      	movs	r1, r2
 8011fde:	0018      	movs	r0, r3
 8011fe0:	f005 faf2 	bl	80175c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	23aa      	movs	r3, #170	@ 0xaa
 8011fe8:	009b      	lsls	r3, r3, #2
 8011fea:	2100      	movs	r1, #0
 8011fec:	54d1      	strb	r1, [r2, r3]

  return ret;
 8011fee:	230b      	movs	r3, #11
 8011ff0:	18fb      	adds	r3, r7, r3
 8011ff2:	781b      	ldrb	r3, [r3, #0]
}
 8011ff4:	0018      	movs	r0, r3
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	b005      	add	sp, #20
 8011ffa:	bd90      	pop	{r4, r7, pc}

08011ffc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b084      	sub	sp, #16
 8012000:	af00      	add	r7, sp, #0
 8012002:	6078      	str	r0, [r7, #4]
 8012004:	000a      	movs	r2, r1
 8012006:	1cfb      	adds	r3, r7, #3
 8012008:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801200a:	1cfb      	adds	r3, r7, #3
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	b25b      	sxtb	r3, r3
 8012010:	2b00      	cmp	r3, #0
 8012012:	da0f      	bge.n	8012034 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012014:	1cfb      	adds	r3, r7, #3
 8012016:	781b      	ldrb	r3, [r3, #0]
 8012018:	2207      	movs	r2, #7
 801201a:	4013      	ands	r3, r2
 801201c:	1c5a      	adds	r2, r3, #1
 801201e:	0013      	movs	r3, r2
 8012020:	009b      	lsls	r3, r3, #2
 8012022:	189b      	adds	r3, r3, r2
 8012024:	00db      	lsls	r3, r3, #3
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	18d3      	adds	r3, r2, r3
 801202a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2201      	movs	r2, #1
 8012030:	705a      	strb	r2, [r3, #1]
 8012032:	e00f      	b.n	8012054 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012034:	1cfb      	adds	r3, r7, #3
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	2207      	movs	r2, #7
 801203a:	401a      	ands	r2, r3
 801203c:	0013      	movs	r3, r2
 801203e:	009b      	lsls	r3, r3, #2
 8012040:	189b      	adds	r3, r3, r2
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	3369      	adds	r3, #105	@ 0x69
 8012046:	33ff      	adds	r3, #255	@ 0xff
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	18d3      	adds	r3, r2, r3
 801204c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2200      	movs	r2, #0
 8012052:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012054:	1cfb      	adds	r3, r7, #3
 8012056:	781b      	ldrb	r3, [r3, #0]
 8012058:	2207      	movs	r2, #7
 801205a:	4013      	ands	r3, r2
 801205c:	b2da      	uxtb	r2, r3
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	23aa      	movs	r3, #170	@ 0xaa
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	5cd3      	ldrb	r3, [r2, r3]
 801206a:	2b01      	cmp	r3, #1
 801206c:	d101      	bne.n	8012072 <HAL_PCD_EP_Close+0x76>
 801206e:	2302      	movs	r3, #2
 8012070:	e011      	b.n	8012096 <HAL_PCD_EP_Close+0x9a>
 8012072:	687a      	ldr	r2, [r7, #4]
 8012074:	23aa      	movs	r3, #170	@ 0xaa
 8012076:	009b      	lsls	r3, r3, #2
 8012078:	2101      	movs	r1, #1
 801207a:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	68fa      	ldr	r2, [r7, #12]
 8012082:	0011      	movs	r1, r2
 8012084:	0018      	movs	r0, r3
 8012086:	f005 fe41 	bl	8017d0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	23aa      	movs	r3, #170	@ 0xaa
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	2100      	movs	r1, #0
 8012092:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8012094:	2300      	movs	r3, #0
}
 8012096:	0018      	movs	r0, r3
 8012098:	46bd      	mov	sp, r7
 801209a:	b004      	add	sp, #16
 801209c:	bd80      	pop	{r7, pc}

0801209e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801209e:	b580      	push	{r7, lr}
 80120a0:	b086      	sub	sp, #24
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	60f8      	str	r0, [r7, #12]
 80120a6:	607a      	str	r2, [r7, #4]
 80120a8:	603b      	str	r3, [r7, #0]
 80120aa:	200b      	movs	r0, #11
 80120ac:	183b      	adds	r3, r7, r0
 80120ae:	1c0a      	adds	r2, r1, #0
 80120b0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80120b2:	0001      	movs	r1, r0
 80120b4:	187b      	adds	r3, r7, r1
 80120b6:	781b      	ldrb	r3, [r3, #0]
 80120b8:	2207      	movs	r2, #7
 80120ba:	401a      	ands	r2, r3
 80120bc:	0013      	movs	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	189b      	adds	r3, r3, r2
 80120c2:	00db      	lsls	r3, r3, #3
 80120c4:	3369      	adds	r3, #105	@ 0x69
 80120c6:	33ff      	adds	r3, #255	@ 0xff
 80120c8:	68fa      	ldr	r2, [r7, #12]
 80120ca:	18d3      	adds	r3, r2, r3
 80120cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	683a      	ldr	r2, [r7, #0]
 80120d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80120da:	697b      	ldr	r3, [r7, #20]
 80120dc:	2200      	movs	r2, #0
 80120de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80120e0:	697b      	ldr	r3, [r7, #20]
 80120e2:	2200      	movs	r2, #0
 80120e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80120e6:	187b      	adds	r3, r7, r1
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	2207      	movs	r2, #7
 80120ec:	4013      	ands	r3, r2
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	697b      	ldr	r3, [r7, #20]
 80120f2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	697a      	ldr	r2, [r7, #20]
 80120fa:	0011      	movs	r1, r2
 80120fc:	0018      	movs	r0, r3
 80120fe:	f005 ffc5 	bl	801808c <USB_EPStartXfer>

  return HAL_OK;
 8012102:	2300      	movs	r3, #0
}
 8012104:	0018      	movs	r0, r3
 8012106:	46bd      	mov	sp, r7
 8012108:	b006      	add	sp, #24
 801210a:	bd80      	pop	{r7, pc}

0801210c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
 8012114:	000a      	movs	r2, r1
 8012116:	1cfb      	adds	r3, r7, #3
 8012118:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801211a:	1cfb      	adds	r3, r7, #3
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	2207      	movs	r2, #7
 8012120:	401a      	ands	r2, r3
 8012122:	6878      	ldr	r0, [r7, #4]
 8012124:	23c2      	movs	r3, #194	@ 0xc2
 8012126:	0059      	lsls	r1, r3, #1
 8012128:	0013      	movs	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	189b      	adds	r3, r3, r2
 801212e:	00db      	lsls	r3, r3, #3
 8012130:	18c3      	adds	r3, r0, r3
 8012132:	185b      	adds	r3, r3, r1
 8012134:	681b      	ldr	r3, [r3, #0]
}
 8012136:	0018      	movs	r0, r3
 8012138:	46bd      	mov	sp, r7
 801213a:	b002      	add	sp, #8
 801213c:	bd80      	pop	{r7, pc}

0801213e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801213e:	b580      	push	{r7, lr}
 8012140:	b086      	sub	sp, #24
 8012142:	af00      	add	r7, sp, #0
 8012144:	60f8      	str	r0, [r7, #12]
 8012146:	607a      	str	r2, [r7, #4]
 8012148:	603b      	str	r3, [r7, #0]
 801214a:	200b      	movs	r0, #11
 801214c:	183b      	adds	r3, r7, r0
 801214e:	1c0a      	adds	r2, r1, #0
 8012150:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012152:	183b      	adds	r3, r7, r0
 8012154:	781b      	ldrb	r3, [r3, #0]
 8012156:	2207      	movs	r2, #7
 8012158:	4013      	ands	r3, r2
 801215a:	1c5a      	adds	r2, r3, #1
 801215c:	0013      	movs	r3, r2
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	189b      	adds	r3, r3, r2
 8012162:	00db      	lsls	r3, r3, #3
 8012164:	68fa      	ldr	r2, [r7, #12]
 8012166:	18d3      	adds	r3, r2, r3
 8012168:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	687a      	ldr	r2, [r7, #4]
 801216e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	683a      	ldr	r2, [r7, #0]
 8012174:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	2224      	movs	r2, #36	@ 0x24
 801217a:	2101      	movs	r1, #1
 801217c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	683a      	ldr	r2, [r7, #0]
 8012182:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	2200      	movs	r2, #0
 8012188:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801218a:	697b      	ldr	r3, [r7, #20]
 801218c:	2201      	movs	r2, #1
 801218e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012190:	183b      	adds	r3, r7, r0
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	2207      	movs	r2, #7
 8012196:	4013      	ands	r3, r2
 8012198:	b2da      	uxtb	r2, r3
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	697a      	ldr	r2, [r7, #20]
 80121a4:	0011      	movs	r1, r2
 80121a6:	0018      	movs	r0, r3
 80121a8:	f005 ff70 	bl	801808c <USB_EPStartXfer>

  return HAL_OK;
 80121ac:	2300      	movs	r3, #0
}
 80121ae:	0018      	movs	r0, r3
 80121b0:	46bd      	mov	sp, r7
 80121b2:	b006      	add	sp, #24
 80121b4:	bd80      	pop	{r7, pc}

080121b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80121b6:	b580      	push	{r7, lr}
 80121b8:	b084      	sub	sp, #16
 80121ba:	af00      	add	r7, sp, #0
 80121bc:	6078      	str	r0, [r7, #4]
 80121be:	000a      	movs	r2, r1
 80121c0:	1cfb      	adds	r3, r7, #3
 80121c2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80121c4:	1cfb      	adds	r3, r7, #3
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	2207      	movs	r2, #7
 80121ca:	401a      	ands	r2, r3
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d901      	bls.n	80121d8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80121d4:	2301      	movs	r3, #1
 80121d6:	e046      	b.n	8012266 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80121d8:	1cfb      	adds	r3, r7, #3
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	b25b      	sxtb	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	da0f      	bge.n	8012202 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80121e2:	1cfb      	adds	r3, r7, #3
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	2207      	movs	r2, #7
 80121e8:	4013      	ands	r3, r2
 80121ea:	1c5a      	adds	r2, r3, #1
 80121ec:	0013      	movs	r3, r2
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	189b      	adds	r3, r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	687a      	ldr	r2, [r7, #4]
 80121f6:	18d3      	adds	r3, r2, r3
 80121f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2201      	movs	r2, #1
 80121fe:	705a      	strb	r2, [r3, #1]
 8012200:	e00d      	b.n	801221e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012202:	1cfb      	adds	r3, r7, #3
 8012204:	781a      	ldrb	r2, [r3, #0]
 8012206:	0013      	movs	r3, r2
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	189b      	adds	r3, r3, r2
 801220c:	00db      	lsls	r3, r3, #3
 801220e:	3369      	adds	r3, #105	@ 0x69
 8012210:	33ff      	adds	r3, #255	@ 0xff
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	18d3      	adds	r3, r2, r3
 8012216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	2200      	movs	r2, #0
 801221c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2201      	movs	r2, #1
 8012222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012224:	1cfb      	adds	r3, r7, #3
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	2207      	movs	r2, #7
 801222a:	4013      	ands	r3, r2
 801222c:	b2da      	uxtb	r2, r3
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012232:	687a      	ldr	r2, [r7, #4]
 8012234:	23aa      	movs	r3, #170	@ 0xaa
 8012236:	009b      	lsls	r3, r3, #2
 8012238:	5cd3      	ldrb	r3, [r2, r3]
 801223a:	2b01      	cmp	r3, #1
 801223c:	d101      	bne.n	8012242 <HAL_PCD_EP_SetStall+0x8c>
 801223e:	2302      	movs	r3, #2
 8012240:	e011      	b.n	8012266 <HAL_PCD_EP_SetStall+0xb0>
 8012242:	687a      	ldr	r2, [r7, #4]
 8012244:	23aa      	movs	r3, #170	@ 0xaa
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	2101      	movs	r1, #1
 801224a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	68fa      	ldr	r2, [r7, #12]
 8012252:	0011      	movs	r1, r2
 8012254:	0018      	movs	r0, r3
 8012256:	f007 f851 	bl	80192fc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	23aa      	movs	r3, #170	@ 0xaa
 801225e:	009b      	lsls	r3, r3, #2
 8012260:	2100      	movs	r1, #0
 8012262:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012264:	2300      	movs	r3, #0
}
 8012266:	0018      	movs	r0, r3
 8012268:	46bd      	mov	sp, r7
 801226a:	b004      	add	sp, #16
 801226c:	bd80      	pop	{r7, pc}

0801226e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801226e:	b580      	push	{r7, lr}
 8012270:	b084      	sub	sp, #16
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
 8012276:	000a      	movs	r2, r1
 8012278:	1cfb      	adds	r3, r7, #3
 801227a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801227c:	1cfb      	adds	r3, r7, #3
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	220f      	movs	r2, #15
 8012282:	401a      	ands	r2, r3
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	429a      	cmp	r2, r3
 801228a:	d901      	bls.n	8012290 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 801228c:	2301      	movs	r3, #1
 801228e:	e048      	b.n	8012322 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8012290:	1cfb      	adds	r3, r7, #3
 8012292:	781b      	ldrb	r3, [r3, #0]
 8012294:	b25b      	sxtb	r3, r3
 8012296:	2b00      	cmp	r3, #0
 8012298:	da0f      	bge.n	80122ba <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801229a:	1cfb      	adds	r3, r7, #3
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	2207      	movs	r2, #7
 80122a0:	4013      	ands	r3, r2
 80122a2:	1c5a      	adds	r2, r3, #1
 80122a4:	0013      	movs	r3, r2
 80122a6:	009b      	lsls	r3, r3, #2
 80122a8:	189b      	adds	r3, r3, r2
 80122aa:	00db      	lsls	r3, r3, #3
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	18d3      	adds	r3, r2, r3
 80122b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2201      	movs	r2, #1
 80122b6:	705a      	strb	r2, [r3, #1]
 80122b8:	e00f      	b.n	80122da <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80122ba:	1cfb      	adds	r3, r7, #3
 80122bc:	781b      	ldrb	r3, [r3, #0]
 80122be:	2207      	movs	r2, #7
 80122c0:	401a      	ands	r2, r3
 80122c2:	0013      	movs	r3, r2
 80122c4:	009b      	lsls	r3, r3, #2
 80122c6:	189b      	adds	r3, r3, r2
 80122c8:	00db      	lsls	r3, r3, #3
 80122ca:	3369      	adds	r3, #105	@ 0x69
 80122cc:	33ff      	adds	r3, #255	@ 0xff
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	18d3      	adds	r3, r2, r3
 80122d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2200      	movs	r2, #0
 80122d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	2200      	movs	r2, #0
 80122de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80122e0:	1cfb      	adds	r3, r7, #3
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	2207      	movs	r2, #7
 80122e6:	4013      	ands	r3, r2
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80122ee:	687a      	ldr	r2, [r7, #4]
 80122f0:	23aa      	movs	r3, #170	@ 0xaa
 80122f2:	009b      	lsls	r3, r3, #2
 80122f4:	5cd3      	ldrb	r3, [r2, r3]
 80122f6:	2b01      	cmp	r3, #1
 80122f8:	d101      	bne.n	80122fe <HAL_PCD_EP_ClrStall+0x90>
 80122fa:	2302      	movs	r3, #2
 80122fc:	e011      	b.n	8012322 <HAL_PCD_EP_ClrStall+0xb4>
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	23aa      	movs	r3, #170	@ 0xaa
 8012302:	009b      	lsls	r3, r3, #2
 8012304:	2101      	movs	r1, #1
 8012306:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	0011      	movs	r1, r2
 8012310:	0018      	movs	r0, r3
 8012312:	f007 f843 	bl	801939c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8012316:	687a      	ldr	r2, [r7, #4]
 8012318:	23aa      	movs	r3, #170	@ 0xaa
 801231a:	009b      	lsls	r3, r3, #2
 801231c:	2100      	movs	r1, #0
 801231e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012320:	2300      	movs	r3, #0
}
 8012322:	0018      	movs	r0, r3
 8012324:	46bd      	mov	sp, r7
 8012326:	b004      	add	sp, #16
 8012328:	bd80      	pop	{r7, pc}
	...

0801232c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 801232c:	b5b0      	push	{r4, r5, r7, lr}
 801232e:	b096      	sub	sp, #88	@ 0x58
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012334:	f000 fbec 	bl	8012b10 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	204e      	movs	r0, #78	@ 0x4e
 801233e:	183b      	adds	r3, r7, r0
 8012340:	2144      	movs	r1, #68	@ 0x44
 8012342:	5a52      	ldrh	r2, [r2, r1]
 8012344:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8012346:	183b      	adds	r3, r7, r0
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	b2da      	uxtb	r2, r3
 801234c:	244d      	movs	r4, #77	@ 0x4d
 801234e:	193b      	adds	r3, r7, r4
 8012350:	210f      	movs	r1, #15
 8012352:	400a      	ands	r2, r1
 8012354:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8012356:	193b      	adds	r3, r7, r4
 8012358:	781b      	ldrb	r3, [r3, #0]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d000      	beq.n	8012360 <PCD_EP_ISR_Handler+0x34>
 801235e:	e18f      	b.n	8012680 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012360:	183b      	adds	r3, r7, r0
 8012362:	881b      	ldrh	r3, [r3, #0]
 8012364:	2210      	movs	r2, #16
 8012366:	4013      	ands	r3, r2
 8012368:	d155      	bne.n	8012416 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	881b      	ldrh	r3, [r3, #0]
 8012370:	b29a      	uxth	r2, r3
 8012372:	200e      	movs	r0, #14
 8012374:	183b      	adds	r3, r7, r0
 8012376:	49bb      	ldr	r1, [pc, #748]	@ (8012664 <PCD_EP_ISR_Handler+0x338>)
 8012378:	400a      	ands	r2, r1
 801237a:	801a      	strh	r2, [r3, #0]
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	183a      	adds	r2, r7, r0
 8012382:	8812      	ldrh	r2, [r2, #0]
 8012384:	49b8      	ldr	r1, [pc, #736]	@ (8012668 <PCD_EP_ISR_Handler+0x33c>)
 8012386:	430a      	orrs	r2, r1
 8012388:	b292      	uxth	r2, r2
 801238a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	3328      	adds	r3, #40	@ 0x28
 8012390:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	2250      	movs	r2, #80	@ 0x50
 8012398:	5a9b      	ldrh	r3, [r3, r2]
 801239a:	b29b      	uxth	r3, r3
 801239c:	001a      	movs	r2, r3
 801239e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	18d2      	adds	r2, r2, r3
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	18d3      	adds	r3, r2, r3
 80123ac:	4aaf      	ldr	r2, [pc, #700]	@ (801266c <PCD_EP_ISR_Handler+0x340>)
 80123ae:	4694      	mov	ip, r2
 80123b0:	4463      	add	r3, ip
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	059b      	lsls	r3, r3, #22
 80123b6:	0d9a      	lsrs	r2, r3, #22
 80123b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80123bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123be:	695a      	ldr	r2, [r3, #20]
 80123c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123c2:	69db      	ldr	r3, [r3, #28]
 80123c4:	18d2      	adds	r2, r2, r3
 80123c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123c8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2100      	movs	r1, #0
 80123ce:	0018      	movs	r0, r3
 80123d0:	f009 f952 	bl	801b678 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2224      	movs	r2, #36	@ 0x24
 80123d8:	5c9b      	ldrb	r3, [r3, r2]
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <PCD_EP_ISR_Handler+0xb8>
 80123e0:	f000 fb96 	bl	8012b10 <PCD_EP_ISR_Handler+0x7e4>
 80123e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123e6:	699b      	ldr	r3, [r3, #24]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d001      	beq.n	80123f0 <PCD_EP_ISR_Handler+0xc4>
 80123ec:	f000 fb90 	bl	8012b10 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2224      	movs	r2, #36	@ 0x24
 80123f4:	5c9b      	ldrb	r3, [r3, r2]
 80123f6:	b2db      	uxtb	r3, r3
 80123f8:	2280      	movs	r2, #128	@ 0x80
 80123fa:	4252      	negs	r2, r2
 80123fc:	4313      	orrs	r3, r2
 80123fe:	b2da      	uxtb	r2, r3
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	0011      	movs	r1, r2
 8012406:	224c      	movs	r2, #76	@ 0x4c
 8012408:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2224      	movs	r2, #36	@ 0x24
 801240e:	2100      	movs	r1, #0
 8012410:	5499      	strb	r1, [r3, r2]
 8012412:	f000 fb7d 	bl	8012b10 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	3369      	adds	r3, #105	@ 0x69
 801241a:	33ff      	adds	r3, #255	@ 0xff
 801241c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	214a      	movs	r1, #74	@ 0x4a
 8012424:	187b      	adds	r3, r7, r1
 8012426:	8812      	ldrh	r2, [r2, #0]
 8012428:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 801242a:	187b      	adds	r3, r7, r1
 801242c:	881a      	ldrh	r2, [r3, #0]
 801242e:	2380      	movs	r3, #128	@ 0x80
 8012430:	011b      	lsls	r3, r3, #4
 8012432:	4013      	ands	r3, r2
 8012434:	d037      	beq.n	80124a6 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	2250      	movs	r2, #80	@ 0x50
 801243c:	5a9b      	ldrh	r3, [r3, r2]
 801243e:	b29b      	uxth	r3, r3
 8012440:	001a      	movs	r2, r3
 8012442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012444:	781b      	ldrb	r3, [r3, #0]
 8012446:	00db      	lsls	r3, r3, #3
 8012448:	18d2      	adds	r2, r2, r3
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	18d3      	adds	r3, r2, r3
 8012450:	4a87      	ldr	r2, [pc, #540]	@ (8012670 <PCD_EP_ISR_Handler+0x344>)
 8012452:	4694      	mov	ip, r2
 8012454:	4463      	add	r3, ip
 8012456:	881b      	ldrh	r3, [r3, #0]
 8012458:	059b      	lsls	r3, r3, #22
 801245a:	0d9a      	lsrs	r2, r3, #22
 801245c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801245e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6818      	ldr	r0, [r3, #0]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	22ac      	movs	r2, #172	@ 0xac
 8012468:	0092      	lsls	r2, r2, #2
 801246a:	1899      	adds	r1, r3, r2
 801246c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801246e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8012470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012472:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012474:	b29b      	uxth	r3, r3
 8012476:	f007 f8c4 	bl	8019602 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	b29a      	uxth	r2, r3
 8012482:	2010      	movs	r0, #16
 8012484:	183b      	adds	r3, r7, r0
 8012486:	497b      	ldr	r1, [pc, #492]	@ (8012674 <PCD_EP_ISR_Handler+0x348>)
 8012488:	400a      	ands	r2, r1
 801248a:	801a      	strh	r2, [r3, #0]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	183a      	adds	r2, r7, r0
 8012492:	8812      	ldrh	r2, [r2, #0]
 8012494:	2180      	movs	r1, #128	@ 0x80
 8012496:	430a      	orrs	r2, r1
 8012498:	b292      	uxth	r2, r2
 801249a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	0018      	movs	r0, r3
 80124a0:	f009 f8b4 	bl	801b60c <HAL_PCD_SetupStageCallback>
 80124a4:	e334      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80124a6:	234a      	movs	r3, #74	@ 0x4a
 80124a8:	18fb      	adds	r3, r7, r3
 80124aa:	2200      	movs	r2, #0
 80124ac:	5e9b      	ldrsh	r3, [r3, r2]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	db00      	blt.n	80124b4 <PCD_EP_ISR_Handler+0x188>
 80124b2:	e32d      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	881b      	ldrh	r3, [r3, #0]
 80124ba:	b29a      	uxth	r2, r3
 80124bc:	201e      	movs	r0, #30
 80124be:	183b      	adds	r3, r7, r0
 80124c0:	496c      	ldr	r1, [pc, #432]	@ (8012674 <PCD_EP_ISR_Handler+0x348>)
 80124c2:	400a      	ands	r2, r1
 80124c4:	801a      	strh	r2, [r3, #0]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	183a      	adds	r2, r7, r0
 80124cc:	8812      	ldrh	r2, [r2, #0]
 80124ce:	2180      	movs	r1, #128	@ 0x80
 80124d0:	430a      	orrs	r2, r1
 80124d2:	b292      	uxth	r2, r2
 80124d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2250      	movs	r2, #80	@ 0x50
 80124dc:	5a9b      	ldrh	r3, [r3, r2]
 80124de:	b29b      	uxth	r3, r3
 80124e0:	001a      	movs	r2, r3
 80124e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	00db      	lsls	r3, r3, #3
 80124e8:	18d2      	adds	r2, r2, r3
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	18d3      	adds	r3, r2, r3
 80124f0:	4a5f      	ldr	r2, [pc, #380]	@ (8012670 <PCD_EP_ISR_Handler+0x344>)
 80124f2:	4694      	mov	ip, r2
 80124f4:	4463      	add	r3, ip
 80124f6:	881b      	ldrh	r3, [r3, #0]
 80124f8:	059b      	lsls	r3, r3, #22
 80124fa:	0d9a      	lsrs	r2, r3, #22
 80124fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8012500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012502:	69db      	ldr	r3, [r3, #28]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d01a      	beq.n	801253e <PCD_EP_ISR_Handler+0x212>
 8012508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801250a:	695b      	ldr	r3, [r3, #20]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d016      	beq.n	801253e <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6818      	ldr	r0, [r3, #0]
 8012514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012516:	6959      	ldr	r1, [r3, #20]
 8012518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801251a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 801251c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801251e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012520:	b29b      	uxth	r3, r3
 8012522:	f007 f86e 	bl	8019602 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8012526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012528:	695a      	ldr	r2, [r3, #20]
 801252a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801252c:	69db      	ldr	r3, [r3, #28]
 801252e:	18d2      	adds	r2, r2, r3
 8012530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012532:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2100      	movs	r1, #0
 8012538:	0018      	movs	r0, r3
 801253a:	f009 f87c 	bl	801b636 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681a      	ldr	r2, [r3, #0]
 8012542:	214a      	movs	r1, #74	@ 0x4a
 8012544:	187b      	adds	r3, r7, r1
 8012546:	8812      	ldrh	r2, [r2, #0]
 8012548:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 801254a:	187b      	adds	r3, r7, r1
 801254c:	881a      	ldrh	r2, [r3, #0]
 801254e:	2380      	movs	r3, #128	@ 0x80
 8012550:	011b      	lsls	r3, r3, #4
 8012552:	4013      	ands	r3, r2
 8012554:	d000      	beq.n	8012558 <PCD_EP_ISR_Handler+0x22c>
 8012556:	e2db      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
 8012558:	187b      	adds	r3, r7, r1
 801255a:	881a      	ldrh	r2, [r3, #0]
 801255c:	23c0      	movs	r3, #192	@ 0xc0
 801255e:	019b      	lsls	r3, r3, #6
 8012560:	401a      	ands	r2, r3
 8012562:	23c0      	movs	r3, #192	@ 0xc0
 8012564:	019b      	lsls	r3, r3, #6
 8012566:	429a      	cmp	r2, r3
 8012568:	d100      	bne.n	801256c <PCD_EP_ISR_Handler+0x240>
 801256a:	e2d1      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	61bb      	str	r3, [r7, #24]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2250      	movs	r2, #80	@ 0x50
 8012578:	5a9b      	ldrh	r3, [r3, r2]
 801257a:	b29b      	uxth	r3, r3
 801257c:	001a      	movs	r2, r3
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	189b      	adds	r3, r3, r2
 8012582:	61bb      	str	r3, [r7, #24]
 8012584:	69bb      	ldr	r3, [r7, #24]
 8012586:	4a3a      	ldr	r2, [pc, #232]	@ (8012670 <PCD_EP_ISR_Handler+0x344>)
 8012588:	4694      	mov	ip, r2
 801258a:	4463      	add	r3, ip
 801258c:	617b      	str	r3, [r7, #20]
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	881b      	ldrh	r3, [r3, #0]
 8012592:	b29b      	uxth	r3, r3
 8012594:	059b      	lsls	r3, r3, #22
 8012596:	0d9b      	lsrs	r3, r3, #22
 8012598:	b29a      	uxth	r2, r3
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	801a      	strh	r2, [r3, #0]
 801259e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125a0:	691b      	ldr	r3, [r3, #16]
 80125a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80125a4:	d91a      	bls.n	80125dc <PCD_EP_ISR_Handler+0x2b0>
 80125a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125a8:	691b      	ldr	r3, [r3, #16]
 80125aa:	095b      	lsrs	r3, r3, #5
 80125ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80125ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125b0:	691b      	ldr	r3, [r3, #16]
 80125b2:	221f      	movs	r2, #31
 80125b4:	4013      	ands	r3, r2
 80125b6:	d102      	bne.n	80125be <PCD_EP_ISR_Handler+0x292>
 80125b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125ba:	3b01      	subs	r3, #1
 80125bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80125be:	697b      	ldr	r3, [r7, #20]
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	b29a      	uxth	r2, r3
 80125c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	029b      	lsls	r3, r3, #10
 80125ca:	b29b      	uxth	r3, r3
 80125cc:	4313      	orrs	r3, r2
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	4a25      	ldr	r2, [pc, #148]	@ (8012668 <PCD_EP_ISR_Handler+0x33c>)
 80125d2:	4313      	orrs	r3, r2
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	801a      	strh	r2, [r3, #0]
 80125da:	e023      	b.n	8012624 <PCD_EP_ISR_Handler+0x2f8>
 80125dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125de:	691b      	ldr	r3, [r3, #16]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d108      	bne.n	80125f6 <PCD_EP_ISR_Handler+0x2ca>
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	881b      	ldrh	r3, [r3, #0]
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	4a1f      	ldr	r2, [pc, #124]	@ (8012668 <PCD_EP_ISR_Handler+0x33c>)
 80125ec:	4313      	orrs	r3, r2
 80125ee:	b29a      	uxth	r2, r3
 80125f0:	697b      	ldr	r3, [r7, #20]
 80125f2:	801a      	strh	r2, [r3, #0]
 80125f4:	e016      	b.n	8012624 <PCD_EP_ISR_Handler+0x2f8>
 80125f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80125f8:	691b      	ldr	r3, [r3, #16]
 80125fa:	085b      	lsrs	r3, r3, #1
 80125fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80125fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012600:	691b      	ldr	r3, [r3, #16]
 8012602:	2201      	movs	r2, #1
 8012604:	4013      	ands	r3, r2
 8012606:	d002      	beq.n	801260e <PCD_EP_ISR_Handler+0x2e2>
 8012608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801260a:	3301      	adds	r3, #1
 801260c:	647b      	str	r3, [r7, #68]	@ 0x44
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	881b      	ldrh	r3, [r3, #0]
 8012612:	b29a      	uxth	r2, r3
 8012614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012616:	b29b      	uxth	r3, r3
 8012618:	029b      	lsls	r3, r3, #10
 801261a:	b29b      	uxth	r3, r3
 801261c:	4313      	orrs	r3, r2
 801261e:	b29a      	uxth	r2, r3
 8012620:	697b      	ldr	r3, [r7, #20]
 8012622:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	881b      	ldrh	r3, [r3, #0]
 801262a:	b29a      	uxth	r2, r3
 801262c:	2012      	movs	r0, #18
 801262e:	183b      	adds	r3, r7, r0
 8012630:	4911      	ldr	r1, [pc, #68]	@ (8012678 <PCD_EP_ISR_Handler+0x34c>)
 8012632:	400a      	ands	r2, r1
 8012634:	801a      	strh	r2, [r3, #0]
 8012636:	183b      	adds	r3, r7, r0
 8012638:	183a      	adds	r2, r7, r0
 801263a:	8812      	ldrh	r2, [r2, #0]
 801263c:	2180      	movs	r1, #128	@ 0x80
 801263e:	0149      	lsls	r1, r1, #5
 8012640:	404a      	eors	r2, r1
 8012642:	801a      	strh	r2, [r3, #0]
 8012644:	183b      	adds	r3, r7, r0
 8012646:	183a      	adds	r2, r7, r0
 8012648:	8812      	ldrh	r2, [r2, #0]
 801264a:	2180      	movs	r1, #128	@ 0x80
 801264c:	0189      	lsls	r1, r1, #6
 801264e:	404a      	eors	r2, r1
 8012650:	801a      	strh	r2, [r3, #0]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	183a      	adds	r2, r7, r0
 8012658:	8812      	ldrh	r2, [r2, #0]
 801265a:	4908      	ldr	r1, [pc, #32]	@ (801267c <PCD_EP_ISR_Handler+0x350>)
 801265c:	430a      	orrs	r2, r1
 801265e:	b292      	uxth	r2, r2
 8012660:	801a      	strh	r2, [r3, #0]
 8012662:	e255      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
 8012664:	ffff8f0f 	.word	0xffff8f0f
 8012668:	ffff8000 	.word	0xffff8000
 801266c:	00000402 	.word	0x00000402
 8012670:	00000406 	.word	0x00000406
 8012674:	00000f8f 	.word	0x00000f8f
 8012678:	ffffbf8f 	.word	0xffffbf8f
 801267c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	001a      	movs	r2, r3
 8012686:	204d      	movs	r0, #77	@ 0x4d
 8012688:	183b      	adds	r3, r7, r0
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	18d2      	adds	r2, r2, r3
 8012690:	214a      	movs	r1, #74	@ 0x4a
 8012692:	187b      	adds	r3, r7, r1
 8012694:	8812      	ldrh	r2, [r2, #0]
 8012696:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012698:	187b      	adds	r3, r7, r1
 801269a:	2200      	movs	r2, #0
 801269c:	5e9b      	ldrsh	r3, [r3, r2]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	db00      	blt.n	80126a4 <PCD_EP_ISR_Handler+0x378>
 80126a2:	e0fa      	b.n	801289a <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	001a      	movs	r2, r3
 80126aa:	183b      	adds	r3, r7, r0
 80126ac:	781b      	ldrb	r3, [r3, #0]
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	18d3      	adds	r3, r2, r3
 80126b2:	881b      	ldrh	r3, [r3, #0]
 80126b4:	b29a      	uxth	r2, r3
 80126b6:	2448      	movs	r4, #72	@ 0x48
 80126b8:	193b      	adds	r3, r7, r4
 80126ba:	49d1      	ldr	r1, [pc, #836]	@ (8012a00 <PCD_EP_ISR_Handler+0x6d4>)
 80126bc:	400a      	ands	r2, r1
 80126be:	801a      	strh	r2, [r3, #0]
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	001a      	movs	r2, r3
 80126c6:	183b      	adds	r3, r7, r0
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	009b      	lsls	r3, r3, #2
 80126cc:	18d3      	adds	r3, r2, r3
 80126ce:	193a      	adds	r2, r7, r4
 80126d0:	8812      	ldrh	r2, [r2, #0]
 80126d2:	2180      	movs	r1, #128	@ 0x80
 80126d4:	430a      	orrs	r2, r1
 80126d6:	b292      	uxth	r2, r2
 80126d8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80126da:	183b      	adds	r3, r7, r0
 80126dc:	781a      	ldrb	r2, [r3, #0]
 80126de:	0013      	movs	r3, r2
 80126e0:	009b      	lsls	r3, r3, #2
 80126e2:	189b      	adds	r3, r3, r2
 80126e4:	00db      	lsls	r3, r3, #3
 80126e6:	3369      	adds	r3, #105	@ 0x69
 80126e8:	33ff      	adds	r3, #255	@ 0xff
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	18d3      	adds	r3, r2, r3
 80126ee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80126f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126f2:	7b1b      	ldrb	r3, [r3, #12]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d125      	bne.n	8012744 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2250      	movs	r2, #80	@ 0x50
 80126fe:	5a9b      	ldrh	r3, [r3, r2]
 8012700:	b29b      	uxth	r3, r3
 8012702:	001a      	movs	r2, r3
 8012704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	00db      	lsls	r3, r3, #3
 801270a:	18d2      	adds	r2, r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	18d3      	adds	r3, r2, r3
 8012712:	4abc      	ldr	r2, [pc, #752]	@ (8012a04 <PCD_EP_ISR_Handler+0x6d8>)
 8012714:	4694      	mov	ip, r2
 8012716:	4463      	add	r3, ip
 8012718:	881a      	ldrh	r2, [r3, #0]
 801271a:	2450      	movs	r4, #80	@ 0x50
 801271c:	193b      	adds	r3, r7, r4
 801271e:	0592      	lsls	r2, r2, #22
 8012720:	0d92      	lsrs	r2, r2, #22
 8012722:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8012724:	193b      	adds	r3, r7, r4
 8012726:	881b      	ldrh	r3, [r3, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d100      	bne.n	801272e <PCD_EP_ISR_Handler+0x402>
 801272c:	e08d      	b.n	801284a <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	6818      	ldr	r0, [r3, #0]
 8012732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012734:	6959      	ldr	r1, [r3, #20]
 8012736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012738:	88da      	ldrh	r2, [r3, #6]
 801273a:	193b      	adds	r3, r7, r4
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	f006 ff60 	bl	8019602 <USB_ReadPMA>
 8012742:	e082      	b.n	801284a <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8012744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012746:	78db      	ldrb	r3, [r3, #3]
 8012748:	2b02      	cmp	r3, #2
 801274a:	d10c      	bne.n	8012766 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 801274c:	2350      	movs	r3, #80	@ 0x50
 801274e:	18fc      	adds	r4, r7, r3
 8012750:	234a      	movs	r3, #74	@ 0x4a
 8012752:	18fb      	adds	r3, r7, r3
 8012754:	881a      	ldrh	r2, [r3, #0]
 8012756:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	0018      	movs	r0, r3
 801275c:	f000 f9ec 	bl	8012b38 <HAL_PCD_EP_DB_Receive>
 8012760:	0003      	movs	r3, r0
 8012762:	8023      	strh	r3, [r4, #0]
 8012764:	e071      	b.n	801284a <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	001a      	movs	r2, r3
 801276c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801276e:	781b      	ldrb	r3, [r3, #0]
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	18d3      	adds	r3, r2, r3
 8012774:	881b      	ldrh	r3, [r3, #0]
 8012776:	b29a      	uxth	r2, r3
 8012778:	2052      	movs	r0, #82	@ 0x52
 801277a:	183b      	adds	r3, r7, r0
 801277c:	49a2      	ldr	r1, [pc, #648]	@ (8012a08 <PCD_EP_ISR_Handler+0x6dc>)
 801277e:	400a      	ands	r2, r1
 8012780:	801a      	strh	r2, [r3, #0]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	001a      	movs	r2, r3
 8012788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	009b      	lsls	r3, r3, #2
 801278e:	18d3      	adds	r3, r2, r3
 8012790:	183a      	adds	r2, r7, r0
 8012792:	8812      	ldrh	r2, [r2, #0]
 8012794:	499d      	ldr	r1, [pc, #628]	@ (8012a0c <PCD_EP_ISR_Handler+0x6e0>)
 8012796:	430a      	orrs	r2, r1
 8012798:	b292      	uxth	r2, r2
 801279a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	001a      	movs	r2, r3
 80127a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	009b      	lsls	r3, r3, #2
 80127a8:	18d3      	adds	r3, r2, r3
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	001a      	movs	r2, r3
 80127b0:	2380      	movs	r3, #128	@ 0x80
 80127b2:	01db      	lsls	r3, r3, #7
 80127b4:	4013      	ands	r3, r2
 80127b6:	d024      	beq.n	8012802 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	2250      	movs	r2, #80	@ 0x50
 80127be:	5a9b      	ldrh	r3, [r3, r2]
 80127c0:	b29b      	uxth	r3, r3
 80127c2:	001a      	movs	r2, r3
 80127c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	00db      	lsls	r3, r3, #3
 80127ca:	18d2      	adds	r2, r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	681b      	ldr	r3, [r3, #0]
 80127d0:	18d3      	adds	r3, r2, r3
 80127d2:	4a8f      	ldr	r2, [pc, #572]	@ (8012a10 <PCD_EP_ISR_Handler+0x6e4>)
 80127d4:	4694      	mov	ip, r2
 80127d6:	4463      	add	r3, ip
 80127d8:	881a      	ldrh	r2, [r3, #0]
 80127da:	2450      	movs	r4, #80	@ 0x50
 80127dc:	193b      	adds	r3, r7, r4
 80127de:	0592      	lsls	r2, r2, #22
 80127e0:	0d92      	lsrs	r2, r2, #22
 80127e2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80127e4:	193b      	adds	r3, r7, r4
 80127e6:	881b      	ldrh	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d02e      	beq.n	801284a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	6818      	ldr	r0, [r3, #0]
 80127f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127f2:	6959      	ldr	r1, [r3, #20]
 80127f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127f6:	891a      	ldrh	r2, [r3, #8]
 80127f8:	193b      	adds	r3, r7, r4
 80127fa:	881b      	ldrh	r3, [r3, #0]
 80127fc:	f006 ff01 	bl	8019602 <USB_ReadPMA>
 8012800:	e023      	b.n	801284a <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	2250      	movs	r2, #80	@ 0x50
 8012808:	5a9b      	ldrh	r3, [r3, r2]
 801280a:	b29b      	uxth	r3, r3
 801280c:	001a      	movs	r2, r3
 801280e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	00db      	lsls	r3, r3, #3
 8012814:	18d2      	adds	r2, r2, r3
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	18d3      	adds	r3, r2, r3
 801281c:	4a79      	ldr	r2, [pc, #484]	@ (8012a04 <PCD_EP_ISR_Handler+0x6d8>)
 801281e:	4694      	mov	ip, r2
 8012820:	4463      	add	r3, ip
 8012822:	881a      	ldrh	r2, [r3, #0]
 8012824:	2450      	movs	r4, #80	@ 0x50
 8012826:	193b      	adds	r3, r7, r4
 8012828:	0592      	lsls	r2, r2, #22
 801282a:	0d92      	lsrs	r2, r2, #22
 801282c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 801282e:	193b      	adds	r3, r7, r4
 8012830:	881b      	ldrh	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d009      	beq.n	801284a <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6818      	ldr	r0, [r3, #0]
 801283a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801283c:	6959      	ldr	r1, [r3, #20]
 801283e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012840:	895a      	ldrh	r2, [r3, #10]
 8012842:	193b      	adds	r3, r7, r4
 8012844:	881b      	ldrh	r3, [r3, #0]
 8012846:	f006 fedc 	bl	8019602 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 801284a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801284c:	69da      	ldr	r2, [r3, #28]
 801284e:	2150      	movs	r1, #80	@ 0x50
 8012850:	187b      	adds	r3, r7, r1
 8012852:	881b      	ldrh	r3, [r3, #0]
 8012854:	18d2      	adds	r2, r2, r3
 8012856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012858:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 801285a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801285c:	695a      	ldr	r2, [r3, #20]
 801285e:	187b      	adds	r3, r7, r1
 8012860:	881b      	ldrh	r3, [r3, #0]
 8012862:	18d2      	adds	r2, r2, r3
 8012864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012866:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8012868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801286a:	699b      	ldr	r3, [r3, #24]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d005      	beq.n	801287c <PCD_EP_ISR_Handler+0x550>
 8012870:	187b      	adds	r3, r7, r1
 8012872:	881a      	ldrh	r2, [r3, #0]
 8012874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012876:	691b      	ldr	r3, [r3, #16]
 8012878:	429a      	cmp	r2, r3
 801287a:	d207      	bcs.n	801288c <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 801287c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801287e:	781a      	ldrb	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	0011      	movs	r1, r2
 8012884:	0018      	movs	r0, r3
 8012886:	f008 fed6 	bl	801b636 <HAL_PCD_DataOutStageCallback>
 801288a:	e006      	b.n	801289a <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012892:	0011      	movs	r1, r2
 8012894:	0018      	movs	r0, r3
 8012896:	f005 fbf9 	bl	801808c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 801289a:	244a      	movs	r4, #74	@ 0x4a
 801289c:	193b      	adds	r3, r7, r4
 801289e:	881b      	ldrh	r3, [r3, #0]
 80128a0:	2280      	movs	r2, #128	@ 0x80
 80128a2:	4013      	ands	r3, r2
 80128a4:	d100      	bne.n	80128a8 <PCD_EP_ISR_Handler+0x57c>
 80128a6:	e133      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80128a8:	204d      	movs	r0, #77	@ 0x4d
 80128aa:	183b      	adds	r3, r7, r0
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	1c5a      	adds	r2, r3, #1
 80128b0:	0013      	movs	r3, r2
 80128b2:	009b      	lsls	r3, r3, #2
 80128b4:	189b      	adds	r3, r3, r2
 80128b6:	00db      	lsls	r3, r3, #3
 80128b8:	687a      	ldr	r2, [r7, #4]
 80128ba:	18d3      	adds	r3, r2, r3
 80128bc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	001a      	movs	r2, r3
 80128c4:	183b      	adds	r3, r7, r0
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	18d3      	adds	r3, r2, r3
 80128cc:	881b      	ldrh	r3, [r3, #0]
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	2542      	movs	r5, #66	@ 0x42
 80128d2:	197b      	adds	r3, r7, r5
 80128d4:	494f      	ldr	r1, [pc, #316]	@ (8012a14 <PCD_EP_ISR_Handler+0x6e8>)
 80128d6:	400a      	ands	r2, r1
 80128d8:	801a      	strh	r2, [r3, #0]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	001a      	movs	r2, r3
 80128e0:	183b      	adds	r3, r7, r0
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	18d3      	adds	r3, r2, r3
 80128e8:	197a      	adds	r2, r7, r5
 80128ea:	8812      	ldrh	r2, [r2, #0]
 80128ec:	494a      	ldr	r1, [pc, #296]	@ (8012a18 <PCD_EP_ISR_Handler+0x6ec>)
 80128ee:	430a      	orrs	r2, r1
 80128f0:	b292      	uxth	r2, r2
 80128f2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80128f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128f6:	78db      	ldrb	r3, [r3, #3]
 80128f8:	2b01      	cmp	r3, #1
 80128fa:	d000      	beq.n	80128fe <PCD_EP_ISR_Handler+0x5d2>
 80128fc:	e0af      	b.n	8012a5e <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80128fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012900:	2200      	movs	r2, #0
 8012902:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8012904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012906:	7b1b      	ldrb	r3, [r3, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d100      	bne.n	801290e <PCD_EP_ISR_Handler+0x5e2>
 801290c:	e09f      	b.n	8012a4e <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 801290e:	193b      	adds	r3, r7, r4
 8012910:	881b      	ldrh	r3, [r3, #0]
 8012912:	2240      	movs	r2, #64	@ 0x40
 8012914:	4013      	ands	r3, r2
 8012916:	d046      	beq.n	80129a6 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012918:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801291a:	785b      	ldrb	r3, [r3, #1]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d125      	bne.n	801296c <PCD_EP_ISR_Handler+0x640>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	627b      	str	r3, [r7, #36]	@ 0x24
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	2250      	movs	r2, #80	@ 0x50
 801292c:	5a9b      	ldrh	r3, [r3, r2]
 801292e:	b29b      	uxth	r3, r3
 8012930:	001a      	movs	r2, r3
 8012932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012934:	189b      	adds	r3, r3, r2
 8012936:	627b      	str	r3, [r7, #36]	@ 0x24
 8012938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801293a:	781b      	ldrb	r3, [r3, #0]
 801293c:	00da      	lsls	r2, r3, #3
 801293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012940:	18d3      	adds	r3, r2, r3
 8012942:	4a33      	ldr	r2, [pc, #204]	@ (8012a10 <PCD_EP_ISR_Handler+0x6e4>)
 8012944:	4694      	mov	ip, r2
 8012946:	4463      	add	r3, ip
 8012948:	623b      	str	r3, [r7, #32]
 801294a:	6a3b      	ldr	r3, [r7, #32]
 801294c:	881b      	ldrh	r3, [r3, #0]
 801294e:	b29b      	uxth	r3, r3
 8012950:	059b      	lsls	r3, r3, #22
 8012952:	0d9b      	lsrs	r3, r3, #22
 8012954:	b29a      	uxth	r2, r3
 8012956:	6a3b      	ldr	r3, [r7, #32]
 8012958:	801a      	strh	r2, [r3, #0]
 801295a:	6a3b      	ldr	r3, [r7, #32]
 801295c:	881b      	ldrh	r3, [r3, #0]
 801295e:	b29b      	uxth	r3, r3
 8012960:	4a2d      	ldr	r2, [pc, #180]	@ (8012a18 <PCD_EP_ISR_Handler+0x6ec>)
 8012962:	4313      	orrs	r3, r2
 8012964:	b29a      	uxth	r2, r3
 8012966:	6a3b      	ldr	r3, [r7, #32]
 8012968:	801a      	strh	r2, [r3, #0]
 801296a:	e070      	b.n	8012a4e <PCD_EP_ISR_Handler+0x722>
 801296c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801296e:	785b      	ldrb	r3, [r3, #1]
 8012970:	2b01      	cmp	r3, #1
 8012972:	d16c      	bne.n	8012a4e <PCD_EP_ISR_Handler+0x722>
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2250      	movs	r2, #80	@ 0x50
 8012980:	5a9b      	ldrh	r3, [r3, r2]
 8012982:	b29b      	uxth	r3, r3
 8012984:	001a      	movs	r2, r3
 8012986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012988:	189b      	adds	r3, r3, r2
 801298a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801298c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	00da      	lsls	r2, r3, #3
 8012992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012994:	18d3      	adds	r3, r2, r3
 8012996:	4a1e      	ldr	r2, [pc, #120]	@ (8012a10 <PCD_EP_ISR_Handler+0x6e4>)
 8012998:	4694      	mov	ip, r2
 801299a:	4463      	add	r3, ip
 801299c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129a0:	2200      	movs	r2, #0
 80129a2:	801a      	strh	r2, [r3, #0]
 80129a4:	e053      	b.n	8012a4e <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80129ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129ae:	785b      	ldrb	r3, [r3, #1]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d133      	bne.n	8012a1c <PCD_EP_ISR_Handler+0x6f0>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	2250      	movs	r2, #80	@ 0x50
 80129c0:	5a9b      	ldrh	r3, [r3, r2]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	001a      	movs	r2, r3
 80129c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129c8:	189b      	adds	r3, r3, r2
 80129ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80129cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129ce:	781b      	ldrb	r3, [r3, #0]
 80129d0:	00da      	lsls	r2, r3, #3
 80129d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129d4:	18d3      	adds	r3, r2, r3
 80129d6:	4a0b      	ldr	r2, [pc, #44]	@ (8012a04 <PCD_EP_ISR_Handler+0x6d8>)
 80129d8:	4694      	mov	ip, r2
 80129da:	4463      	add	r3, ip
 80129dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80129de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129e0:	881b      	ldrh	r3, [r3, #0]
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	059b      	lsls	r3, r3, #22
 80129e6:	0d9b      	lsrs	r3, r3, #22
 80129e8:	b29a      	uxth	r2, r3
 80129ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ec:	801a      	strh	r2, [r3, #0]
 80129ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129f0:	881b      	ldrh	r3, [r3, #0]
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	4a08      	ldr	r2, [pc, #32]	@ (8012a18 <PCD_EP_ISR_Handler+0x6ec>)
 80129f6:	4313      	orrs	r3, r2
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129fc:	801a      	strh	r2, [r3, #0]
 80129fe:	e026      	b.n	8012a4e <PCD_EP_ISR_Handler+0x722>
 8012a00:	00000f8f 	.word	0x00000f8f
 8012a04:	00000406 	.word	0x00000406
 8012a08:	ffff8f8f 	.word	0xffff8f8f
 8012a0c:	ffff80c0 	.word	0xffff80c0
 8012a10:	00000402 	.word	0x00000402
 8012a14:	ffff8f0f 	.word	0xffff8f0f
 8012a18:	ffff8000 	.word	0xffff8000
 8012a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a1e:	785b      	ldrb	r3, [r3, #1]
 8012a20:	2b01      	cmp	r3, #1
 8012a22:	d114      	bne.n	8012a4e <PCD_EP_ISR_Handler+0x722>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2250      	movs	r2, #80	@ 0x50
 8012a2a:	5a9b      	ldrh	r3, [r3, r2]
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	001a      	movs	r2, r3
 8012a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a32:	189b      	adds	r3, r3, r2
 8012a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a38:	781b      	ldrb	r3, [r3, #0]
 8012a3a:	00da      	lsls	r2, r3, #3
 8012a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a3e:	18d3      	adds	r3, r2, r3
 8012a40:	4a3b      	ldr	r2, [pc, #236]	@ (8012b30 <PCD_EP_ISR_Handler+0x804>)
 8012a42:	4694      	mov	ip, r2
 8012a44:	4463      	add	r3, ip
 8012a46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a50:	781a      	ldrb	r2, [r3, #0]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	0011      	movs	r1, r2
 8012a56:	0018      	movs	r0, r3
 8012a58:	f008 fe0e 	bl	801b678 <HAL_PCD_DataInStageCallback>
 8012a5c:	e058      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8012a5e:	234a      	movs	r3, #74	@ 0x4a
 8012a60:	18fb      	adds	r3, r7, r3
 8012a62:	881a      	ldrh	r2, [r3, #0]
 8012a64:	2380      	movs	r3, #128	@ 0x80
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	4013      	ands	r3, r2
 8012a6a:	d149      	bne.n	8012b00 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	2250      	movs	r2, #80	@ 0x50
 8012a72:	5a9b      	ldrh	r3, [r3, r2]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	001a      	movs	r2, r3
 8012a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	00db      	lsls	r3, r3, #3
 8012a7e:	18d2      	adds	r2, r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	18d3      	adds	r3, r2, r3
 8012a86:	4a2b      	ldr	r2, [pc, #172]	@ (8012b34 <PCD_EP_ISR_Handler+0x808>)
 8012a88:	4694      	mov	ip, r2
 8012a8a:	4463      	add	r3, ip
 8012a8c:	881a      	ldrh	r2, [r3, #0]
 8012a8e:	2140      	movs	r1, #64	@ 0x40
 8012a90:	187b      	adds	r3, r7, r1
 8012a92:	0592      	lsls	r2, r2, #22
 8012a94:	0d92      	lsrs	r2, r2, #22
 8012a96:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8012a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a9a:	699a      	ldr	r2, [r3, #24]
 8012a9c:	187b      	adds	r3, r7, r1
 8012a9e:	881b      	ldrh	r3, [r3, #0]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d907      	bls.n	8012ab4 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8012aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aa6:	699a      	ldr	r2, [r3, #24]
 8012aa8:	187b      	adds	r3, r7, r1
 8012aaa:	881b      	ldrh	r3, [r3, #0]
 8012aac:	1ad2      	subs	r2, r2, r3
 8012aae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ab0:	619a      	str	r2, [r3, #24]
 8012ab2:	e002      	b.n	8012aba <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8012ab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8012aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012abc:	699b      	ldr	r3, [r3, #24]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d107      	bne.n	8012ad2 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ac4:	781a      	ldrb	r2, [r3, #0]
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	0011      	movs	r1, r2
 8012aca:	0018      	movs	r0, r3
 8012acc:	f008 fdd4 	bl	801b678 <HAL_PCD_DataInStageCallback>
 8012ad0:	e01e      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8012ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ad4:	695a      	ldr	r2, [r3, #20]
 8012ad6:	2140      	movs	r1, #64	@ 0x40
 8012ad8:	187b      	adds	r3, r7, r1
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	18d2      	adds	r2, r2, r3
 8012ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ae0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8012ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ae4:	69da      	ldr	r2, [r3, #28]
 8012ae6:	187b      	adds	r3, r7, r1
 8012ae8:	881b      	ldrh	r3, [r3, #0]
 8012aea:	18d2      	adds	r2, r2, r3
 8012aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012aee:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012af6:	0011      	movs	r1, r2
 8012af8:	0018      	movs	r0, r3
 8012afa:	f005 fac7 	bl	801808c <USB_EPStartXfer>
 8012afe:	e007      	b.n	8012b10 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8012b00:	234a      	movs	r3, #74	@ 0x4a
 8012b02:	18fb      	adds	r3, r7, r3
 8012b04:	881a      	ldrh	r2, [r3, #0]
 8012b06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	0018      	movs	r0, r3
 8012b0c:	f000 f930 	bl	8012d70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	2244      	movs	r2, #68	@ 0x44
 8012b16:	5a9b      	ldrh	r3, [r3, r2]
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	b21b      	sxth	r3, r3
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	da01      	bge.n	8012b24 <PCD_EP_ISR_Handler+0x7f8>
 8012b20:	f7ff fc0a 	bl	8012338 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8012b24:	2300      	movs	r3, #0
}
 8012b26:	0018      	movs	r0, r3
 8012b28:	46bd      	mov	sp, r7
 8012b2a:	b016      	add	sp, #88	@ 0x58
 8012b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b2e:	46c0      	nop			@ (mov r8, r8)
 8012b30:	00000406 	.word	0x00000406
 8012b34:	00000402 	.word	0x00000402

08012b38 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b089      	sub	sp, #36	@ 0x24
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	60f8      	str	r0, [r7, #12]
 8012b40:	60b9      	str	r1, [r7, #8]
 8012b42:	1dbb      	adds	r3, r7, #6
 8012b44:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012b46:	1dbb      	adds	r3, r7, #6
 8012b48:	881a      	ldrh	r2, [r3, #0]
 8012b4a:	2380      	movs	r3, #128	@ 0x80
 8012b4c:	01db      	lsls	r3, r3, #7
 8012b4e:	4013      	ands	r3, r2
 8012b50:	d100      	bne.n	8012b54 <HAL_PCD_EP_DB_Receive+0x1c>
 8012b52:	e07d      	b.n	8012c50 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012b54:	68fb      	ldr	r3, [r7, #12]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2250      	movs	r2, #80	@ 0x50
 8012b5a:	5a9b      	ldrh	r3, [r3, r2]
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	001a      	movs	r2, r3
 8012b60:	68bb      	ldr	r3, [r7, #8]
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	00db      	lsls	r3, r3, #3
 8012b66:	18d2      	adds	r2, r2, r3
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	18d3      	adds	r3, r2, r3
 8012b6e:	4a7a      	ldr	r2, [pc, #488]	@ (8012d58 <HAL_PCD_EP_DB_Receive+0x220>)
 8012b70:	4694      	mov	ip, r2
 8012b72:	4463      	add	r3, ip
 8012b74:	881a      	ldrh	r2, [r3, #0]
 8012b76:	211a      	movs	r1, #26
 8012b78:	187b      	adds	r3, r7, r1
 8012b7a:	0592      	lsls	r2, r2, #22
 8012b7c:	0d92      	lsrs	r2, r2, #22
 8012b7e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	699a      	ldr	r2, [r3, #24]
 8012b84:	187b      	adds	r3, r7, r1
 8012b86:	881b      	ldrh	r3, [r3, #0]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d307      	bcc.n	8012b9c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	699a      	ldr	r2, [r3, #24]
 8012b90:	187b      	adds	r3, r7, r1
 8012b92:	881b      	ldrh	r3, [r3, #0]
 8012b94:	1ad2      	subs	r2, r2, r3
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	619a      	str	r2, [r3, #24]
 8012b9a:	e002      	b.n	8012ba2 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	699b      	ldr	r3, [r3, #24]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d121      	bne.n	8012bee <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	001a      	movs	r2, r3
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	009b      	lsls	r3, r3, #2
 8012bb6:	18d3      	adds	r3, r2, r3
 8012bb8:	881b      	ldrh	r3, [r3, #0]
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	2018      	movs	r0, #24
 8012bbe:	183b      	adds	r3, r7, r0
 8012bc0:	4966      	ldr	r1, [pc, #408]	@ (8012d5c <HAL_PCD_EP_DB_Receive+0x224>)
 8012bc2:	400a      	ands	r2, r1
 8012bc4:	801a      	strh	r2, [r3, #0]
 8012bc6:	183b      	adds	r3, r7, r0
 8012bc8:	183a      	adds	r2, r7, r0
 8012bca:	8812      	ldrh	r2, [r2, #0]
 8012bcc:	2180      	movs	r1, #128	@ 0x80
 8012bce:	0189      	lsls	r1, r1, #6
 8012bd0:	404a      	eors	r2, r1
 8012bd2:	801a      	strh	r2, [r3, #0]
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	001a      	movs	r2, r3
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	009b      	lsls	r3, r3, #2
 8012be0:	18d3      	adds	r3, r2, r3
 8012be2:	183a      	adds	r2, r7, r0
 8012be4:	8812      	ldrh	r2, [r2, #0]
 8012be6:	495e      	ldr	r1, [pc, #376]	@ (8012d60 <HAL_PCD_EP_DB_Receive+0x228>)
 8012be8:	430a      	orrs	r2, r1
 8012bea:	b292      	uxth	r2, r2
 8012bec:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012bee:	1dbb      	adds	r3, r7, #6
 8012bf0:	881b      	ldrh	r3, [r3, #0]
 8012bf2:	2240      	movs	r2, #64	@ 0x40
 8012bf4:	4013      	ands	r3, r2
 8012bf6:	d01a      	beq.n	8012c2e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	001a      	movs	r2, r3
 8012bfe:	68bb      	ldr	r3, [r7, #8]
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	18d3      	adds	r3, r2, r3
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	2016      	movs	r0, #22
 8012c0c:	183b      	adds	r3, r7, r0
 8012c0e:	4955      	ldr	r1, [pc, #340]	@ (8012d64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8012c10:	400a      	ands	r2, r1
 8012c12:	801a      	strh	r2, [r3, #0]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	001a      	movs	r2, r3
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	009b      	lsls	r3, r3, #2
 8012c20:	18d3      	adds	r3, r2, r3
 8012c22:	183a      	adds	r2, r7, r0
 8012c24:	8812      	ldrh	r2, [r2, #0]
 8012c26:	4950      	ldr	r1, [pc, #320]	@ (8012d68 <HAL_PCD_EP_DB_Receive+0x230>)
 8012c28:	430a      	orrs	r2, r1
 8012c2a:	b292      	uxth	r2, r2
 8012c2c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8012c2e:	241a      	movs	r4, #26
 8012c30:	193b      	adds	r3, r7, r4
 8012c32:	881b      	ldrh	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d100      	bne.n	8012c3a <HAL_PCD_EP_DB_Receive+0x102>
 8012c38:	e086      	b.n	8012d48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	6818      	ldr	r0, [r3, #0]
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	6959      	ldr	r1, [r3, #20]
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	891a      	ldrh	r2, [r3, #8]
 8012c46:	193b      	adds	r3, r7, r4
 8012c48:	881b      	ldrh	r3, [r3, #0]
 8012c4a:	f006 fcda 	bl	8019602 <USB_ReadPMA>
 8012c4e:	e07b      	b.n	8012d48 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	2250      	movs	r2, #80	@ 0x50
 8012c56:	5a9b      	ldrh	r3, [r3, r2]
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	001a      	movs	r2, r3
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	781b      	ldrb	r3, [r3, #0]
 8012c60:	00db      	lsls	r3, r3, #3
 8012c62:	18d2      	adds	r2, r2, r3
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	18d3      	adds	r3, r2, r3
 8012c6a:	4a40      	ldr	r2, [pc, #256]	@ (8012d6c <HAL_PCD_EP_DB_Receive+0x234>)
 8012c6c:	4694      	mov	ip, r2
 8012c6e:	4463      	add	r3, ip
 8012c70:	881a      	ldrh	r2, [r3, #0]
 8012c72:	211a      	movs	r1, #26
 8012c74:	187b      	adds	r3, r7, r1
 8012c76:	0592      	lsls	r2, r2, #22
 8012c78:	0d92      	lsrs	r2, r2, #22
 8012c7a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	699a      	ldr	r2, [r3, #24]
 8012c80:	187b      	adds	r3, r7, r1
 8012c82:	881b      	ldrh	r3, [r3, #0]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d307      	bcc.n	8012c98 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	699a      	ldr	r2, [r3, #24]
 8012c8c:	187b      	adds	r3, r7, r1
 8012c8e:	881b      	ldrh	r3, [r3, #0]
 8012c90:	1ad2      	subs	r2, r2, r3
 8012c92:	68bb      	ldr	r3, [r7, #8]
 8012c94:	619a      	str	r2, [r3, #24]
 8012c96:	e002      	b.n	8012c9e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8012c98:	68bb      	ldr	r3, [r7, #8]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	699b      	ldr	r3, [r3, #24]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d121      	bne.n	8012cea <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	001a      	movs	r2, r3
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	781b      	ldrb	r3, [r3, #0]
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	18d3      	adds	r3, r2, r3
 8012cb4:	881b      	ldrh	r3, [r3, #0]
 8012cb6:	b29a      	uxth	r2, r3
 8012cb8:	201e      	movs	r0, #30
 8012cba:	183b      	adds	r3, r7, r0
 8012cbc:	4927      	ldr	r1, [pc, #156]	@ (8012d5c <HAL_PCD_EP_DB_Receive+0x224>)
 8012cbe:	400a      	ands	r2, r1
 8012cc0:	801a      	strh	r2, [r3, #0]
 8012cc2:	183b      	adds	r3, r7, r0
 8012cc4:	183a      	adds	r2, r7, r0
 8012cc6:	8812      	ldrh	r2, [r2, #0]
 8012cc8:	2180      	movs	r1, #128	@ 0x80
 8012cca:	0189      	lsls	r1, r1, #6
 8012ccc:	404a      	eors	r2, r1
 8012cce:	801a      	strh	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	001a      	movs	r2, r3
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	18d3      	adds	r3, r2, r3
 8012cde:	183a      	adds	r2, r7, r0
 8012ce0:	8812      	ldrh	r2, [r2, #0]
 8012ce2:	491f      	ldr	r1, [pc, #124]	@ (8012d60 <HAL_PCD_EP_DB_Receive+0x228>)
 8012ce4:	430a      	orrs	r2, r1
 8012ce6:	b292      	uxth	r2, r2
 8012ce8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8012cea:	1dbb      	adds	r3, r7, #6
 8012cec:	881b      	ldrh	r3, [r3, #0]
 8012cee:	2240      	movs	r2, #64	@ 0x40
 8012cf0:	4013      	ands	r3, r2
 8012cf2:	d11a      	bne.n	8012d2a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	001a      	movs	r2, r3
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	009b      	lsls	r3, r3, #2
 8012d00:	18d3      	adds	r3, r2, r3
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	b29a      	uxth	r2, r3
 8012d06:	201c      	movs	r0, #28
 8012d08:	183b      	adds	r3, r7, r0
 8012d0a:	4916      	ldr	r1, [pc, #88]	@ (8012d64 <HAL_PCD_EP_DB_Receive+0x22c>)
 8012d0c:	400a      	ands	r2, r1
 8012d0e:	801a      	strh	r2, [r3, #0]
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	001a      	movs	r2, r3
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	18d3      	adds	r3, r2, r3
 8012d1e:	183a      	adds	r2, r7, r0
 8012d20:	8812      	ldrh	r2, [r2, #0]
 8012d22:	4911      	ldr	r1, [pc, #68]	@ (8012d68 <HAL_PCD_EP_DB_Receive+0x230>)
 8012d24:	430a      	orrs	r2, r1
 8012d26:	b292      	uxth	r2, r2
 8012d28:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8012d2a:	241a      	movs	r4, #26
 8012d2c:	193b      	adds	r3, r7, r4
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d009      	beq.n	8012d48 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	6818      	ldr	r0, [r3, #0]
 8012d38:	68bb      	ldr	r3, [r7, #8]
 8012d3a:	6959      	ldr	r1, [r3, #20]
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	895a      	ldrh	r2, [r3, #10]
 8012d40:	193b      	adds	r3, r7, r4
 8012d42:	881b      	ldrh	r3, [r3, #0]
 8012d44:	f006 fc5d 	bl	8019602 <USB_ReadPMA>
    }
  }

  return count;
 8012d48:	231a      	movs	r3, #26
 8012d4a:	18fb      	adds	r3, r7, r3
 8012d4c:	881b      	ldrh	r3, [r3, #0]
}
 8012d4e:	0018      	movs	r0, r3
 8012d50:	46bd      	mov	sp, r7
 8012d52:	b009      	add	sp, #36	@ 0x24
 8012d54:	bd90      	pop	{r4, r7, pc}
 8012d56:	46c0      	nop			@ (mov r8, r8)
 8012d58:	00000402 	.word	0x00000402
 8012d5c:	ffffbf8f 	.word	0xffffbf8f
 8012d60:	ffff8080 	.word	0xffff8080
 8012d64:	ffff8f8f 	.word	0xffff8f8f
 8012d68:	ffff80c0 	.word	0xffff80c0
 8012d6c:	00000406 	.word	0x00000406

08012d70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b0a4      	sub	sp, #144	@ 0x90
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	1dbb      	adds	r3, r7, #6
 8012d7c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012d7e:	1dbb      	adds	r3, r7, #6
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	2240      	movs	r2, #64	@ 0x40
 8012d84:	4013      	ands	r3, r2
 8012d86:	d100      	bne.n	8012d8a <HAL_PCD_EP_DB_Transmit+0x1a>
 8012d88:	e1e4      	b.n	8013154 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	2250      	movs	r2, #80	@ 0x50
 8012d90:	5a9b      	ldrh	r3, [r3, r2]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	001a      	movs	r2, r3
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	00db      	lsls	r3, r3, #3
 8012d9c:	18d2      	adds	r2, r2, r3
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	18d3      	adds	r3, r2, r3
 8012da4:	4ad0      	ldr	r2, [pc, #832]	@ (80130e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8012da6:	4694      	mov	ip, r2
 8012da8:	4463      	add	r3, ip
 8012daa:	881a      	ldrh	r2, [r3, #0]
 8012dac:	2186      	movs	r1, #134	@ 0x86
 8012dae:	187b      	adds	r3, r7, r1
 8012db0:	0592      	lsls	r2, r2, #22
 8012db2:	0d92      	lsrs	r2, r2, #22
 8012db4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	699a      	ldr	r2, [r3, #24]
 8012dba:	187b      	adds	r3, r7, r1
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d907      	bls.n	8012dd2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	699a      	ldr	r2, [r3, #24]
 8012dc6:	187b      	adds	r3, r7, r1
 8012dc8:	881b      	ldrh	r3, [r3, #0]
 8012dca:	1ad2      	subs	r2, r2, r3
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	619a      	str	r2, [r3, #24]
 8012dd0:	e002      	b.n	8012dd8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	699b      	ldr	r3, [r3, #24]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d000      	beq.n	8012de2 <HAL_PCD_EP_DB_Transmit+0x72>
 8012de0:	e0b5      	b.n	8012f4e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	785b      	ldrb	r3, [r3, #1]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d125      	bne.n	8012e36 <HAL_PCD_EP_DB_Transmit+0xc6>
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2250      	movs	r2, #80	@ 0x50
 8012df6:	5a9b      	ldrh	r3, [r3, r2]
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	001a      	movs	r2, r3
 8012dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012dfe:	189b      	adds	r3, r3, r2
 8012e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	00da      	lsls	r2, r3, #3
 8012e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e0a:	18d3      	adds	r3, r2, r3
 8012e0c:	4ab6      	ldr	r2, [pc, #728]	@ (80130e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8012e0e:	4694      	mov	ip, r2
 8012e10:	4463      	add	r3, ip
 8012e12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e16:	881b      	ldrh	r3, [r3, #0]
 8012e18:	b29b      	uxth	r3, r3
 8012e1a:	059b      	lsls	r3, r3, #22
 8012e1c:	0d9b      	lsrs	r3, r3, #22
 8012e1e:	b29a      	uxth	r2, r3
 8012e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e22:	801a      	strh	r2, [r3, #0]
 8012e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e26:	881b      	ldrh	r3, [r3, #0]
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	4ab0      	ldr	r2, [pc, #704]	@ (80130ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 8012e2c:	4313      	orrs	r3, r2
 8012e2e:	b29a      	uxth	r2, r3
 8012e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e32:	801a      	strh	r2, [r3, #0]
 8012e34:	e01b      	b.n	8012e6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	785b      	ldrb	r3, [r3, #1]
 8012e3a:	2b01      	cmp	r3, #1
 8012e3c:	d117      	bne.n	8012e6e <HAL_PCD_EP_DB_Transmit+0xfe>
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	2250      	movs	r2, #80	@ 0x50
 8012e4a:	5a9b      	ldrh	r3, [r3, r2]
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	001a      	movs	r2, r3
 8012e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e52:	189b      	adds	r3, r3, r2
 8012e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	781b      	ldrb	r3, [r3, #0]
 8012e5a:	00da      	lsls	r2, r3, #3
 8012e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e5e:	18d3      	adds	r3, r2, r3
 8012e60:	4aa1      	ldr	r2, [pc, #644]	@ (80130e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8012e62:	4694      	mov	ip, r2
 8012e64:	4463      	add	r3, ip
 8012e66:	633b      	str	r3, [r7, #48]	@ 0x30
 8012e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	785b      	ldrb	r3, [r3, #1]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d125      	bne.n	8012ec8 <HAL_PCD_EP_DB_Transmit+0x158>
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	61fb      	str	r3, [r7, #28]
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	2250      	movs	r2, #80	@ 0x50
 8012e88:	5a9b      	ldrh	r3, [r3, r2]
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	001a      	movs	r2, r3
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	189b      	adds	r3, r3, r2
 8012e92:	61fb      	str	r3, [r7, #28]
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	00da      	lsls	r2, r3, #3
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	18d3      	adds	r3, r2, r3
 8012e9e:	4a94      	ldr	r2, [pc, #592]	@ (80130f0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8012ea0:	4694      	mov	ip, r2
 8012ea2:	4463      	add	r3, ip
 8012ea4:	61bb      	str	r3, [r7, #24]
 8012ea6:	69bb      	ldr	r3, [r7, #24]
 8012ea8:	881b      	ldrh	r3, [r3, #0]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	059b      	lsls	r3, r3, #22
 8012eae:	0d9b      	lsrs	r3, r3, #22
 8012eb0:	b29a      	uxth	r2, r3
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	801a      	strh	r2, [r3, #0]
 8012eb6:	69bb      	ldr	r3, [r7, #24]
 8012eb8:	881b      	ldrh	r3, [r3, #0]
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	4a8b      	ldr	r2, [pc, #556]	@ (80130ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	69bb      	ldr	r3, [r7, #24]
 8012ec4:	801a      	strh	r2, [r3, #0]
 8012ec6:	e018      	b.n	8012efa <HAL_PCD_EP_DB_Transmit+0x18a>
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	785b      	ldrb	r3, [r3, #1]
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d114      	bne.n	8012efa <HAL_PCD_EP_DB_Transmit+0x18a>
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	2250      	movs	r2, #80	@ 0x50
 8012ed6:	5a9b      	ldrh	r3, [r3, r2]
 8012ed8:	b29b      	uxth	r3, r3
 8012eda:	001a      	movs	r2, r3
 8012edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ede:	189b      	adds	r3, r3, r2
 8012ee0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	00da      	lsls	r2, r3, #3
 8012ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eea:	18d3      	adds	r3, r2, r3
 8012eec:	4a80      	ldr	r2, [pc, #512]	@ (80130f0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8012eee:	4694      	mov	ip, r2
 8012ef0:	4463      	add	r3, ip
 8012ef2:	623b      	str	r3, [r7, #32]
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	781a      	ldrb	r2, [r3, #0]
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	0011      	movs	r1, r2
 8012f02:	0018      	movs	r0, r3
 8012f04:	f008 fbb8 	bl	801b678 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012f08:	1dbb      	adds	r3, r7, #6
 8012f0a:	881a      	ldrh	r2, [r3, #0]
 8012f0c:	2380      	movs	r3, #128	@ 0x80
 8012f0e:	01db      	lsls	r3, r3, #7
 8012f10:	4013      	ands	r3, r2
 8012f12:	d100      	bne.n	8012f16 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8012f14:	e309      	b.n	801352a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	001a      	movs	r2, r3
 8012f1c:	68bb      	ldr	r3, [r7, #8]
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	009b      	lsls	r3, r3, #2
 8012f22:	18d3      	adds	r3, r2, r3
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	2016      	movs	r0, #22
 8012f2a:	183b      	adds	r3, r7, r0
 8012f2c:	4971      	ldr	r1, [pc, #452]	@ (80130f4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8012f2e:	400a      	ands	r2, r1
 8012f30:	801a      	strh	r2, [r3, #0]
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	001a      	movs	r2, r3
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	781b      	ldrb	r3, [r3, #0]
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	18d3      	adds	r3, r2, r3
 8012f40:	183a      	adds	r2, r7, r0
 8012f42:	8812      	ldrh	r2, [r2, #0]
 8012f44:	496c      	ldr	r1, [pc, #432]	@ (80130f8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8012f46:	430a      	orrs	r2, r1
 8012f48:	b292      	uxth	r2, r2
 8012f4a:	801a      	strh	r2, [r3, #0]
 8012f4c:	e2ed      	b.n	801352a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8012f4e:	1dbb      	adds	r3, r7, #6
 8012f50:	881a      	ldrh	r2, [r3, #0]
 8012f52:	2380      	movs	r3, #128	@ 0x80
 8012f54:	01db      	lsls	r3, r3, #7
 8012f56:	4013      	ands	r3, r2
 8012f58:	d01a      	beq.n	8012f90 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	001a      	movs	r2, r3
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	009b      	lsls	r3, r3, #2
 8012f66:	18d3      	adds	r3, r2, r3
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	208a      	movs	r0, #138	@ 0x8a
 8012f6e:	183b      	adds	r3, r7, r0
 8012f70:	4960      	ldr	r1, [pc, #384]	@ (80130f4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8012f72:	400a      	ands	r2, r1
 8012f74:	801a      	strh	r2, [r3, #0]
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	001a      	movs	r2, r3
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	18d3      	adds	r3, r2, r3
 8012f84:	183a      	adds	r2, r7, r0
 8012f86:	8812      	ldrh	r2, [r2, #0]
 8012f88:	495b      	ldr	r1, [pc, #364]	@ (80130f8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8012f8a:	430a      	orrs	r2, r1
 8012f8c:	b292      	uxth	r2, r2
 8012f8e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	2224      	movs	r2, #36	@ 0x24
 8012f94:	5c9b      	ldrb	r3, [r3, r2]
 8012f96:	2b01      	cmp	r3, #1
 8012f98:	d000      	beq.n	8012f9c <HAL_PCD_EP_DB_Transmit+0x22c>
 8012f9a:	e2c6      	b.n	801352a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	695a      	ldr	r2, [r3, #20]
 8012fa0:	2186      	movs	r1, #134	@ 0x86
 8012fa2:	187b      	adds	r3, r7, r1
 8012fa4:	881b      	ldrh	r3, [r3, #0]
 8012fa6:	18d2      	adds	r2, r2, r3
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	69da      	ldr	r2, [r3, #28]
 8012fb0:	187b      	adds	r3, r7, r1
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	18d2      	adds	r2, r2, r3
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	6a1a      	ldr	r2, [r3, #32]
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	691b      	ldr	r3, [r3, #16]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d30c      	bcc.n	8012fe0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8012fc6:	68bb      	ldr	r3, [r7, #8]
 8012fc8:	691b      	ldr	r3, [r3, #16]
 8012fca:	218c      	movs	r1, #140	@ 0x8c
 8012fcc:	187a      	adds	r2, r7, r1
 8012fce:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	6a1a      	ldr	r2, [r3, #32]
 8012fd4:	187b      	adds	r3, r7, r1
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	1ad2      	subs	r2, r2, r3
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	621a      	str	r2, [r3, #32]
 8012fde:	e01a      	b.n	8013016 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	6a1b      	ldr	r3, [r3, #32]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10a      	bne.n	8012ffe <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8012fe8:	2386      	movs	r3, #134	@ 0x86
 8012fea:	18fb      	adds	r3, r7, r3
 8012fec:	881b      	ldrh	r3, [r3, #0]
 8012fee:	228c      	movs	r2, #140	@ 0x8c
 8012ff0:	18ba      	adds	r2, r7, r2
 8012ff2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	2224      	movs	r2, #36	@ 0x24
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	5499      	strb	r1, [r3, r2]
 8012ffc:	e00b      	b.n	8013016 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	2224      	movs	r2, #36	@ 0x24
 8013002:	2100      	movs	r1, #0
 8013004:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	6a1b      	ldr	r3, [r3, #32]
 801300a:	228c      	movs	r2, #140	@ 0x8c
 801300c:	18ba      	adds	r2, r7, r2
 801300e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	2200      	movs	r2, #0
 8013014:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	785b      	ldrb	r3, [r3, #1]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d000      	beq.n	8013020 <HAL_PCD_EP_DB_Transmit+0x2b0>
 801301e:	e06d      	b.n	80130fc <HAL_PCD_EP_DB_Transmit+0x38c>
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2250      	movs	r2, #80	@ 0x50
 801302c:	5a9b      	ldrh	r3, [r3, r2]
 801302e:	b29b      	uxth	r3, r3
 8013030:	001a      	movs	r2, r3
 8013032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013034:	189b      	adds	r3, r3, r2
 8013036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	00da      	lsls	r2, r3, #3
 801303e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013040:	18d3      	adds	r3, r2, r3
 8013042:	4a29      	ldr	r2, [pc, #164]	@ (80130e8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8013044:	4694      	mov	ip, r2
 8013046:	4463      	add	r3, ip
 8013048:	63bb      	str	r3, [r7, #56]	@ 0x38
 801304a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801304c:	881b      	ldrh	r3, [r3, #0]
 801304e:	b29b      	uxth	r3, r3
 8013050:	059b      	lsls	r3, r3, #22
 8013052:	0d9b      	lsrs	r3, r3, #22
 8013054:	b29a      	uxth	r2, r3
 8013056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013058:	801a      	strh	r2, [r3, #0]
 801305a:	228c      	movs	r2, #140	@ 0x8c
 801305c:	18bb      	adds	r3, r7, r2
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	2b3e      	cmp	r3, #62	@ 0x3e
 8013062:	d91a      	bls.n	801309a <HAL_PCD_EP_DB_Transmit+0x32a>
 8013064:	18bb      	adds	r3, r7, r2
 8013066:	681b      	ldr	r3, [r3, #0]
 8013068:	095b      	lsrs	r3, r3, #5
 801306a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801306c:	18bb      	adds	r3, r7, r2
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	221f      	movs	r2, #31
 8013072:	4013      	ands	r3, r2
 8013074:	d102      	bne.n	801307c <HAL_PCD_EP_DB_Transmit+0x30c>
 8013076:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013078:	3b01      	subs	r3, #1
 801307a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801307c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801307e:	881b      	ldrh	r3, [r3, #0]
 8013080:	b29a      	uxth	r2, r3
 8013082:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013084:	b29b      	uxth	r3, r3
 8013086:	029b      	lsls	r3, r3, #10
 8013088:	b29b      	uxth	r3, r3
 801308a:	4313      	orrs	r3, r2
 801308c:	b29b      	uxth	r3, r3
 801308e:	4a17      	ldr	r2, [pc, #92]	@ (80130ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013090:	4313      	orrs	r3, r2
 8013092:	b29a      	uxth	r2, r3
 8013094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013096:	801a      	strh	r2, [r3, #0]
 8013098:	e04f      	b.n	801313a <HAL_PCD_EP_DB_Transmit+0x3ca>
 801309a:	238c      	movs	r3, #140	@ 0x8c
 801309c:	18fb      	adds	r3, r7, r3
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d108      	bne.n	80130b6 <HAL_PCD_EP_DB_Transmit+0x346>
 80130a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130a6:	881b      	ldrh	r3, [r3, #0]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	4a10      	ldr	r2, [pc, #64]	@ (80130ec <HAL_PCD_EP_DB_Transmit+0x37c>)
 80130ac:	4313      	orrs	r3, r2
 80130ae:	b29a      	uxth	r2, r3
 80130b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130b2:	801a      	strh	r2, [r3, #0]
 80130b4:	e041      	b.n	801313a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80130b6:	228c      	movs	r2, #140	@ 0x8c
 80130b8:	18bb      	adds	r3, r7, r2
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	085b      	lsrs	r3, r3, #1
 80130be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80130c0:	18bb      	adds	r3, r7, r2
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	2201      	movs	r2, #1
 80130c6:	4013      	ands	r3, r2
 80130c8:	d002      	beq.n	80130d0 <HAL_PCD_EP_DB_Transmit+0x360>
 80130ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130cc:	3301      	adds	r3, #1
 80130ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80130d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130d8:	b29b      	uxth	r3, r3
 80130da:	029b      	lsls	r3, r3, #10
 80130dc:	b29b      	uxth	r3, r3
 80130de:	4313      	orrs	r3, r2
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80130e4:	801a      	strh	r2, [r3, #0]
 80130e6:	e028      	b.n	801313a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80130e8:	00000402 	.word	0x00000402
 80130ec:	ffff8000 	.word	0xffff8000
 80130f0:	00000406 	.word	0x00000406
 80130f4:	ffff8f8f 	.word	0xffff8f8f
 80130f8:	ffffc080 	.word	0xffffc080
 80130fc:	68bb      	ldr	r3, [r7, #8]
 80130fe:	785b      	ldrb	r3, [r3, #1]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d11a      	bne.n	801313a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	647b      	str	r3, [r7, #68]	@ 0x44
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	2250      	movs	r2, #80	@ 0x50
 8013110:	5a9b      	ldrh	r3, [r3, r2]
 8013112:	b29b      	uxth	r3, r3
 8013114:	001a      	movs	r2, r3
 8013116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013118:	189b      	adds	r3, r3, r2
 801311a:	647b      	str	r3, [r7, #68]	@ 0x44
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	00da      	lsls	r2, r3, #3
 8013122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013124:	18d3      	adds	r3, r2, r3
 8013126:	4adb      	ldr	r2, [pc, #876]	@ (8013494 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013128:	4694      	mov	ip, r2
 801312a:	4463      	add	r3, ip
 801312c:	643b      	str	r3, [r7, #64]	@ 0x40
 801312e:	238c      	movs	r3, #140	@ 0x8c
 8013130:	18fb      	adds	r3, r7, r3
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	b29a      	uxth	r2, r3
 8013136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013138:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6818      	ldr	r0, [r3, #0]
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	6959      	ldr	r1, [r3, #20]
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	891a      	ldrh	r2, [r3, #8]
 8013146:	238c      	movs	r3, #140	@ 0x8c
 8013148:	18fb      	adds	r3, r7, r3
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	b29b      	uxth	r3, r3
 801314e:	f006 fa0f 	bl	8019570 <USB_WritePMA>
 8013152:	e1ea      	b.n	801352a <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	2250      	movs	r2, #80	@ 0x50
 801315a:	5a9b      	ldrh	r3, [r3, r2]
 801315c:	b29b      	uxth	r3, r3
 801315e:	001a      	movs	r2, r3
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	781b      	ldrb	r3, [r3, #0]
 8013164:	00db      	lsls	r3, r3, #3
 8013166:	18d2      	adds	r2, r2, r3
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	18d3      	adds	r3, r2, r3
 801316e:	4aca      	ldr	r2, [pc, #808]	@ (8013498 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013170:	4694      	mov	ip, r2
 8013172:	4463      	add	r3, ip
 8013174:	881a      	ldrh	r2, [r3, #0]
 8013176:	2186      	movs	r1, #134	@ 0x86
 8013178:	187b      	adds	r3, r7, r1
 801317a:	0592      	lsls	r2, r2, #22
 801317c:	0d92      	lsrs	r2, r2, #22
 801317e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013180:	68bb      	ldr	r3, [r7, #8]
 8013182:	699a      	ldr	r2, [r3, #24]
 8013184:	187b      	adds	r3, r7, r1
 8013186:	881b      	ldrh	r3, [r3, #0]
 8013188:	429a      	cmp	r2, r3
 801318a:	d307      	bcc.n	801319c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	699a      	ldr	r2, [r3, #24]
 8013190:	187b      	adds	r3, r7, r1
 8013192:	881b      	ldrh	r3, [r3, #0]
 8013194:	1ad2      	subs	r2, r2, r3
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	619a      	str	r2, [r3, #24]
 801319a:	e002      	b.n	80131a2 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	2200      	movs	r2, #0
 80131a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80131a2:	68bb      	ldr	r3, [r7, #8]
 80131a4:	699b      	ldr	r3, [r3, #24]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d000      	beq.n	80131ac <HAL_PCD_EP_DB_Transmit+0x43c>
 80131aa:	e0bb      	b.n	8013324 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	785b      	ldrb	r3, [r3, #1]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d125      	bne.n	8013200 <HAL_PCD_EP_DB_Transmit+0x490>
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2250      	movs	r2, #80	@ 0x50
 80131c0:	5a9b      	ldrh	r3, [r3, r2]
 80131c2:	b29b      	uxth	r3, r3
 80131c4:	001a      	movs	r2, r3
 80131c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80131c8:	189b      	adds	r3, r3, r2
 80131ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	00da      	lsls	r2, r3, #3
 80131d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80131d4:	18d3      	adds	r3, r2, r3
 80131d6:	4aaf      	ldr	r2, [pc, #700]	@ (8013494 <HAL_PCD_EP_DB_Transmit+0x724>)
 80131d8:	4694      	mov	ip, r2
 80131da:	4463      	add	r3, ip
 80131dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80131de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131e0:	881b      	ldrh	r3, [r3, #0]
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	059b      	lsls	r3, r3, #22
 80131e6:	0d9b      	lsrs	r3, r3, #22
 80131e8:	b29a      	uxth	r2, r3
 80131ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131ec:	801a      	strh	r2, [r3, #0]
 80131ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131f0:	881b      	ldrh	r3, [r3, #0]
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	4aa9      	ldr	r2, [pc, #676]	@ (801349c <HAL_PCD_EP_DB_Transmit+0x72c>)
 80131f6:	4313      	orrs	r3, r2
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80131fc:	801a      	strh	r2, [r3, #0]
 80131fe:	e01b      	b.n	8013238 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	785b      	ldrb	r3, [r3, #1]
 8013204:	2b01      	cmp	r3, #1
 8013206:	d117      	bne.n	8013238 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	667b      	str	r3, [r7, #100]	@ 0x64
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2250      	movs	r2, #80	@ 0x50
 8013214:	5a9b      	ldrh	r3, [r3, r2]
 8013216:	b29b      	uxth	r3, r3
 8013218:	001a      	movs	r2, r3
 801321a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801321c:	189b      	adds	r3, r3, r2
 801321e:	667b      	str	r3, [r7, #100]	@ 0x64
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	781b      	ldrb	r3, [r3, #0]
 8013224:	00da      	lsls	r2, r3, #3
 8013226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013228:	18d3      	adds	r3, r2, r3
 801322a:	4a9a      	ldr	r2, [pc, #616]	@ (8013494 <HAL_PCD_EP_DB_Transmit+0x724>)
 801322c:	4694      	mov	ip, r2
 801322e:	4463      	add	r3, ip
 8013230:	663b      	str	r3, [r7, #96]	@ 0x60
 8013232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013234:	2200      	movs	r2, #0
 8013236:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	677b      	str	r3, [r7, #116]	@ 0x74
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	785b      	ldrb	r3, [r3, #1]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d12b      	bne.n	801329e <HAL_PCD_EP_DB_Transmit+0x52e>
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2250      	movs	r2, #80	@ 0x50
 8013252:	5a9b      	ldrh	r3, [r3, r2]
 8013254:	b29b      	uxth	r3, r3
 8013256:	001a      	movs	r2, r3
 8013258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801325a:	189b      	adds	r3, r3, r2
 801325c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801325e:	68bb      	ldr	r3, [r7, #8]
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	00da      	lsls	r2, r3, #3
 8013264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013266:	18d3      	adds	r3, r2, r3
 8013268:	4a8b      	ldr	r2, [pc, #556]	@ (8013498 <HAL_PCD_EP_DB_Transmit+0x728>)
 801326a:	4694      	mov	ip, r2
 801326c:	4463      	add	r3, ip
 801326e:	2180      	movs	r1, #128	@ 0x80
 8013270:	187a      	adds	r2, r7, r1
 8013272:	6013      	str	r3, [r2, #0]
 8013274:	187b      	adds	r3, r7, r1
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	881b      	ldrh	r3, [r3, #0]
 801327a:	b29b      	uxth	r3, r3
 801327c:	059b      	lsls	r3, r3, #22
 801327e:	0d9b      	lsrs	r3, r3, #22
 8013280:	b29a      	uxth	r2, r3
 8013282:	187b      	adds	r3, r7, r1
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	801a      	strh	r2, [r3, #0]
 8013288:	187b      	adds	r3, r7, r1
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	881b      	ldrh	r3, [r3, #0]
 801328e:	b29b      	uxth	r3, r3
 8013290:	4a82      	ldr	r2, [pc, #520]	@ (801349c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013292:	4313      	orrs	r3, r2
 8013294:	b29a      	uxth	r2, r3
 8013296:	187b      	adds	r3, r7, r1
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	801a      	strh	r2, [r3, #0]
 801329c:	e018      	b.n	80132d0 <HAL_PCD_EP_DB_Transmit+0x560>
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	785b      	ldrb	r3, [r3, #1]
 80132a2:	2b01      	cmp	r3, #1
 80132a4:	d114      	bne.n	80132d0 <HAL_PCD_EP_DB_Transmit+0x560>
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	2250      	movs	r2, #80	@ 0x50
 80132ac:	5a9b      	ldrh	r3, [r3, r2]
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	001a      	movs	r2, r3
 80132b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80132b4:	189b      	adds	r3, r3, r2
 80132b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	00da      	lsls	r2, r3, #3
 80132be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80132c0:	18d3      	adds	r3, r2, r3
 80132c2:	4a75      	ldr	r2, [pc, #468]	@ (8013498 <HAL_PCD_EP_DB_Transmit+0x728>)
 80132c4:	4694      	mov	ip, r2
 80132c6:	4463      	add	r3, ip
 80132c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80132ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80132cc:	2200      	movs	r2, #0
 80132ce:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	781a      	ldrb	r2, [r3, #0]
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	0011      	movs	r1, r2
 80132d8:	0018      	movs	r0, r3
 80132da:	f008 f9cd 	bl	801b678 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80132de:	1dbb      	adds	r3, r7, #6
 80132e0:	881a      	ldrh	r2, [r3, #0]
 80132e2:	2380      	movs	r3, #128	@ 0x80
 80132e4:	01db      	lsls	r3, r3, #7
 80132e6:	4013      	ands	r3, r2
 80132e8:	d000      	beq.n	80132ec <HAL_PCD_EP_DB_Transmit+0x57c>
 80132ea:	e11e      	b.n	801352a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	001a      	movs	r2, r3
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	009b      	lsls	r3, r3, #2
 80132f8:	18d3      	adds	r3, r2, r3
 80132fa:	881b      	ldrh	r3, [r3, #0]
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	2088      	movs	r0, #136	@ 0x88
 8013300:	183b      	adds	r3, r7, r0
 8013302:	4967      	ldr	r1, [pc, #412]	@ (80134a0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8013304:	400a      	ands	r2, r1
 8013306:	801a      	strh	r2, [r3, #0]
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	001a      	movs	r2, r3
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	18d3      	adds	r3, r2, r3
 8013316:	183a      	adds	r2, r7, r0
 8013318:	8812      	ldrh	r2, [r2, #0]
 801331a:	4962      	ldr	r1, [pc, #392]	@ (80134a4 <HAL_PCD_EP_DB_Transmit+0x734>)
 801331c:	430a      	orrs	r2, r1
 801331e:	b292      	uxth	r2, r2
 8013320:	801a      	strh	r2, [r3, #0]
 8013322:	e102      	b.n	801352a <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013324:	1dbb      	adds	r3, r7, #6
 8013326:	881a      	ldrh	r2, [r3, #0]
 8013328:	2380      	movs	r3, #128	@ 0x80
 801332a:	01db      	lsls	r3, r3, #7
 801332c:	4013      	ands	r3, r2
 801332e:	d11a      	bne.n	8013366 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	001a      	movs	r2, r3
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	009b      	lsls	r3, r3, #2
 801333c:	18d3      	adds	r3, r2, r3
 801333e:	881b      	ldrh	r3, [r3, #0]
 8013340:	b29a      	uxth	r2, r3
 8013342:	204e      	movs	r0, #78	@ 0x4e
 8013344:	183b      	adds	r3, r7, r0
 8013346:	4956      	ldr	r1, [pc, #344]	@ (80134a0 <HAL_PCD_EP_DB_Transmit+0x730>)
 8013348:	400a      	ands	r2, r1
 801334a:	801a      	strh	r2, [r3, #0]
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	001a      	movs	r2, r3
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	009b      	lsls	r3, r3, #2
 8013358:	18d3      	adds	r3, r2, r3
 801335a:	183a      	adds	r2, r7, r0
 801335c:	8812      	ldrh	r2, [r2, #0]
 801335e:	4951      	ldr	r1, [pc, #324]	@ (80134a4 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013360:	430a      	orrs	r2, r1
 8013362:	b292      	uxth	r2, r2
 8013364:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8013366:	68bb      	ldr	r3, [r7, #8]
 8013368:	2224      	movs	r2, #36	@ 0x24
 801336a:	5c9b      	ldrb	r3, [r3, r2]
 801336c:	2b01      	cmp	r3, #1
 801336e:	d000      	beq.n	8013372 <HAL_PCD_EP_DB_Transmit+0x602>
 8013370:	e0db      	b.n	801352a <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	695a      	ldr	r2, [r3, #20]
 8013376:	2186      	movs	r1, #134	@ 0x86
 8013378:	187b      	adds	r3, r7, r1
 801337a:	881b      	ldrh	r3, [r3, #0]
 801337c:	18d2      	adds	r2, r2, r3
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	69da      	ldr	r2, [r3, #28]
 8013386:	187b      	adds	r3, r7, r1
 8013388:	881b      	ldrh	r3, [r3, #0]
 801338a:	18d2      	adds	r2, r2, r3
 801338c:	68bb      	ldr	r3, [r7, #8]
 801338e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8013390:	68bb      	ldr	r3, [r7, #8]
 8013392:	6a1a      	ldr	r2, [r3, #32]
 8013394:	68bb      	ldr	r3, [r7, #8]
 8013396:	691b      	ldr	r3, [r3, #16]
 8013398:	429a      	cmp	r2, r3
 801339a:	d30c      	bcc.n	80133b6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 801339c:	68bb      	ldr	r3, [r7, #8]
 801339e:	691b      	ldr	r3, [r3, #16]
 80133a0:	218c      	movs	r1, #140	@ 0x8c
 80133a2:	187a      	adds	r2, r7, r1
 80133a4:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80133a6:	68bb      	ldr	r3, [r7, #8]
 80133a8:	6a1a      	ldr	r2, [r3, #32]
 80133aa:	187b      	adds	r3, r7, r1
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	1ad2      	subs	r2, r2, r3
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	621a      	str	r2, [r3, #32]
 80133b4:	e01a      	b.n	80133ec <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	6a1b      	ldr	r3, [r3, #32]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d10a      	bne.n	80133d4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80133be:	2386      	movs	r3, #134	@ 0x86
 80133c0:	18fb      	adds	r3, r7, r3
 80133c2:	881b      	ldrh	r3, [r3, #0]
 80133c4:	228c      	movs	r2, #140	@ 0x8c
 80133c6:	18ba      	adds	r2, r7, r2
 80133c8:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	2224      	movs	r2, #36	@ 0x24
 80133ce:	2100      	movs	r1, #0
 80133d0:	5499      	strb	r1, [r3, r2]
 80133d2:	e00b      	b.n	80133ec <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	6a1b      	ldr	r3, [r3, #32]
 80133d8:	228c      	movs	r2, #140	@ 0x8c
 80133da:	18ba      	adds	r2, r7, r2
 80133dc:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80133de:	68bb      	ldr	r3, [r7, #8]
 80133e0:	2200      	movs	r2, #0
 80133e2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80133e4:	68bb      	ldr	r3, [r7, #8]
 80133e6:	2224      	movs	r2, #36	@ 0x24
 80133e8:	2100      	movs	r1, #0
 80133ea:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	785b      	ldrb	r3, [r3, #1]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d000      	beq.n	80133fc <HAL_PCD_EP_DB_Transmit+0x68c>
 80133fa:	e06e      	b.n	80134da <HAL_PCD_EP_DB_Transmit+0x76a>
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2250      	movs	r2, #80	@ 0x50
 8013408:	5a9b      	ldrh	r3, [r3, r2]
 801340a:	b29b      	uxth	r3, r3
 801340c:	001a      	movs	r2, r3
 801340e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013410:	189b      	adds	r3, r3, r2
 8013412:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	00da      	lsls	r2, r3, #3
 801341a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801341c:	18d3      	adds	r3, r2, r3
 801341e:	4a1e      	ldr	r2, [pc, #120]	@ (8013498 <HAL_PCD_EP_DB_Transmit+0x728>)
 8013420:	4694      	mov	ip, r2
 8013422:	4463      	add	r3, ip
 8013424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013428:	881b      	ldrh	r3, [r3, #0]
 801342a:	b29b      	uxth	r3, r3
 801342c:	059b      	lsls	r3, r3, #22
 801342e:	0d9b      	lsrs	r3, r3, #22
 8013430:	b29a      	uxth	r2, r3
 8013432:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013434:	801a      	strh	r2, [r3, #0]
 8013436:	228c      	movs	r2, #140	@ 0x8c
 8013438:	18bb      	adds	r3, r7, r2
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	2b3e      	cmp	r3, #62	@ 0x3e
 801343e:	d91a      	bls.n	8013476 <HAL_PCD_EP_DB_Transmit+0x706>
 8013440:	18bb      	adds	r3, r7, r2
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	095b      	lsrs	r3, r3, #5
 8013446:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013448:	18bb      	adds	r3, r7, r2
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	221f      	movs	r2, #31
 801344e:	4013      	ands	r3, r2
 8013450:	d102      	bne.n	8013458 <HAL_PCD_EP_DB_Transmit+0x6e8>
 8013452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013454:	3b01      	subs	r3, #1
 8013456:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013458:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801345a:	881b      	ldrh	r3, [r3, #0]
 801345c:	b29a      	uxth	r2, r3
 801345e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013460:	b29b      	uxth	r3, r3
 8013462:	029b      	lsls	r3, r3, #10
 8013464:	b29b      	uxth	r3, r3
 8013466:	4313      	orrs	r3, r2
 8013468:	b29b      	uxth	r3, r3
 801346a:	4a0c      	ldr	r2, [pc, #48]	@ (801349c <HAL_PCD_EP_DB_Transmit+0x72c>)
 801346c:	4313      	orrs	r3, r2
 801346e:	b29a      	uxth	r2, r3
 8013470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013472:	801a      	strh	r2, [r3, #0]
 8013474:	e04d      	b.n	8013512 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013476:	238c      	movs	r3, #140	@ 0x8c
 8013478:	18fb      	adds	r3, r7, r3
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d113      	bne.n	80134a8 <HAL_PCD_EP_DB_Transmit+0x738>
 8013480:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013482:	881b      	ldrh	r3, [r3, #0]
 8013484:	b29b      	uxth	r3, r3
 8013486:	4a05      	ldr	r2, [pc, #20]	@ (801349c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013488:	4313      	orrs	r3, r2
 801348a:	b29a      	uxth	r2, r3
 801348c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801348e:	801a      	strh	r2, [r3, #0]
 8013490:	e03f      	b.n	8013512 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013492:	46c0      	nop			@ (mov r8, r8)
 8013494:	00000402 	.word	0x00000402
 8013498:	00000406 	.word	0x00000406
 801349c:	ffff8000 	.word	0xffff8000
 80134a0:	ffff8f8f 	.word	0xffff8f8f
 80134a4:	ffffc080 	.word	0xffffc080
 80134a8:	228c      	movs	r2, #140	@ 0x8c
 80134aa:	18bb      	adds	r3, r7, r2
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	085b      	lsrs	r3, r3, #1
 80134b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80134b2:	18bb      	adds	r3, r7, r2
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	2201      	movs	r2, #1
 80134b8:	4013      	ands	r3, r2
 80134ba:	d002      	beq.n	80134c2 <HAL_PCD_EP_DB_Transmit+0x752>
 80134bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134be:	3301      	adds	r3, #1
 80134c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80134c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134c4:	881b      	ldrh	r3, [r3, #0]
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	029b      	lsls	r3, r3, #10
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4313      	orrs	r3, r2
 80134d2:	b29a      	uxth	r2, r3
 80134d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134d6:	801a      	strh	r2, [r3, #0]
 80134d8:	e01b      	b.n	8013512 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	785b      	ldrb	r3, [r3, #1]
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d117      	bne.n	8013512 <HAL_PCD_EP_DB_Transmit+0x7a2>
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2250      	movs	r2, #80	@ 0x50
 80134e8:	5a9b      	ldrh	r3, [r3, r2]
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	001a      	movs	r2, r3
 80134ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134f0:	189b      	adds	r3, r3, r2
 80134f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	00da      	lsls	r2, r3, #3
 80134fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134fc:	18d3      	adds	r3, r2, r3
 80134fe:	4a21      	ldr	r2, [pc, #132]	@ (8013584 <HAL_PCD_EP_DB_Transmit+0x814>)
 8013500:	4694      	mov	ip, r2
 8013502:	4463      	add	r3, ip
 8013504:	653b      	str	r3, [r7, #80]	@ 0x50
 8013506:	238c      	movs	r3, #140	@ 0x8c
 8013508:	18fb      	adds	r3, r7, r3
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	b29a      	uxth	r2, r3
 801350e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013510:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	6818      	ldr	r0, [r3, #0]
 8013516:	68bb      	ldr	r3, [r7, #8]
 8013518:	6959      	ldr	r1, [r3, #20]
 801351a:	68bb      	ldr	r3, [r7, #8]
 801351c:	895a      	ldrh	r2, [r3, #10]
 801351e:	238c      	movs	r3, #140	@ 0x8c
 8013520:	18fb      	adds	r3, r7, r3
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	b29b      	uxth	r3, r3
 8013526:	f006 f823 	bl	8019570 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	001a      	movs	r2, r3
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	18d3      	adds	r3, r2, r3
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	b29a      	uxth	r2, r3
 801353c:	2014      	movs	r0, #20
 801353e:	183b      	adds	r3, r7, r0
 8013540:	4911      	ldr	r1, [pc, #68]	@ (8013588 <HAL_PCD_EP_DB_Transmit+0x818>)
 8013542:	400a      	ands	r2, r1
 8013544:	801a      	strh	r2, [r3, #0]
 8013546:	183b      	adds	r3, r7, r0
 8013548:	183a      	adds	r2, r7, r0
 801354a:	8812      	ldrh	r2, [r2, #0]
 801354c:	2110      	movs	r1, #16
 801354e:	404a      	eors	r2, r1
 8013550:	801a      	strh	r2, [r3, #0]
 8013552:	183b      	adds	r3, r7, r0
 8013554:	183a      	adds	r2, r7, r0
 8013556:	8812      	ldrh	r2, [r2, #0]
 8013558:	2120      	movs	r1, #32
 801355a:	404a      	eors	r2, r1
 801355c:	801a      	strh	r2, [r3, #0]
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	001a      	movs	r2, r3
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	18d3      	adds	r3, r2, r3
 801356c:	183a      	adds	r2, r7, r0
 801356e:	8812      	ldrh	r2, [r2, #0]
 8013570:	4906      	ldr	r1, [pc, #24]	@ (801358c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8013572:	430a      	orrs	r2, r1
 8013574:	b292      	uxth	r2, r2
 8013576:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8013578:	2300      	movs	r3, #0
}
 801357a:	0018      	movs	r0, r3
 801357c:	46bd      	mov	sp, r7
 801357e:	b024      	add	sp, #144	@ 0x90
 8013580:	bd80      	pop	{r7, pc}
 8013582:	46c0      	nop			@ (mov r8, r8)
 8013584:	00000406 	.word	0x00000406
 8013588:	ffff8fbf 	.word	0xffff8fbf
 801358c:	ffff8080 	.word	0xffff8080

08013590 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8013590:	b590      	push	{r4, r7, lr}
 8013592:	b087      	sub	sp, #28
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	0008      	movs	r0, r1
 801359a:	0011      	movs	r1, r2
 801359c:	607b      	str	r3, [r7, #4]
 801359e:	240a      	movs	r4, #10
 80135a0:	193b      	adds	r3, r7, r4
 80135a2:	1c02      	adds	r2, r0, #0
 80135a4:	801a      	strh	r2, [r3, #0]
 80135a6:	2308      	movs	r3, #8
 80135a8:	18fb      	adds	r3, r7, r3
 80135aa:	1c0a      	adds	r2, r1, #0
 80135ac:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80135ae:	0021      	movs	r1, r4
 80135b0:	187b      	adds	r3, r7, r1
 80135b2:	881b      	ldrh	r3, [r3, #0]
 80135b4:	2280      	movs	r2, #128	@ 0x80
 80135b6:	4013      	ands	r3, r2
 80135b8:	b29b      	uxth	r3, r3
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d00c      	beq.n	80135d8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80135be:	187b      	adds	r3, r7, r1
 80135c0:	881b      	ldrh	r3, [r3, #0]
 80135c2:	2207      	movs	r2, #7
 80135c4:	4013      	ands	r3, r2
 80135c6:	1c5a      	adds	r2, r3, #1
 80135c8:	0013      	movs	r3, r2
 80135ca:	009b      	lsls	r3, r3, #2
 80135cc:	189b      	adds	r3, r3, r2
 80135ce:	00db      	lsls	r3, r3, #3
 80135d0:	68fa      	ldr	r2, [r7, #12]
 80135d2:	18d3      	adds	r3, r2, r3
 80135d4:	617b      	str	r3, [r7, #20]
 80135d6:	e00b      	b.n	80135f0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80135d8:	230a      	movs	r3, #10
 80135da:	18fb      	adds	r3, r7, r3
 80135dc:	881a      	ldrh	r2, [r3, #0]
 80135de:	0013      	movs	r3, r2
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	189b      	adds	r3, r3, r2
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	3369      	adds	r3, #105	@ 0x69
 80135e8:	33ff      	adds	r3, #255	@ 0xff
 80135ea:	68fa      	ldr	r2, [r7, #12]
 80135ec:	18d3      	adds	r3, r2, r3
 80135ee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80135f0:	2308      	movs	r3, #8
 80135f2:	18fb      	adds	r3, r7, r3
 80135f4:	881b      	ldrh	r3, [r3, #0]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d107      	bne.n	801360a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	2200      	movs	r2, #0
 80135fe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	b29a      	uxth	r2, r3
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	80da      	strh	r2, [r3, #6]
 8013608:	e00b      	b.n	8013622 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	2201      	movs	r2, #1
 801360e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	b29a      	uxth	r2, r3
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	0c1b      	lsrs	r3, r3, #16
 801361c:	b29a      	uxth	r2, r3
 801361e:	697b      	ldr	r3, [r7, #20]
 8013620:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013622:	2300      	movs	r3, #0
}
 8013624:	0018      	movs	r0, r3
 8013626:	46bd      	mov	sp, r7
 8013628:	b007      	add	sp, #28
 801362a:	bd90      	pop	{r4, r7, pc}

0801362c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b084      	sub	sp, #16
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 801363a:	687a      	ldr	r2, [r7, #4]
 801363c:	23ba      	movs	r3, #186	@ 0xba
 801363e:	009b      	lsls	r3, r3, #2
 8013640:	2101      	movs	r1, #1
 8013642:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8013644:	687a      	ldr	r2, [r7, #4]
 8013646:	23b8      	movs	r3, #184	@ 0xb8
 8013648:	009b      	lsls	r3, r3, #2
 801364a:	2100      	movs	r1, #0
 801364c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2254      	movs	r2, #84	@ 0x54
 8013652:	5a9b      	ldrh	r3, [r3, r2]
 8013654:	b29b      	uxth	r3, r3
 8013656:	2201      	movs	r2, #1
 8013658:	4313      	orrs	r3, r2
 801365a:	b299      	uxth	r1, r3
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2254      	movs	r2, #84	@ 0x54
 8013660:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2254      	movs	r2, #84	@ 0x54
 8013666:	5a9b      	ldrh	r3, [r3, r2]
 8013668:	b29b      	uxth	r3, r3
 801366a:	2202      	movs	r2, #2
 801366c:	4313      	orrs	r3, r2
 801366e:	b299      	uxth	r1, r3
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2254      	movs	r2, #84	@ 0x54
 8013674:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013676:	2300      	movs	r3, #0
}
 8013678:	0018      	movs	r0, r3
 801367a:	46bd      	mov	sp, r7
 801367c:	b004      	add	sp, #16
 801367e:	bd80      	pop	{r7, pc}

08013680 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b082      	sub	sp, #8
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
 8013688:	000a      	movs	r2, r1
 801368a:	1cfb      	adds	r3, r7, #3
 801368c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801368e:	46c0      	nop			@ (mov r8, r8)
 8013690:	46bd      	mov	sp, r7
 8013692:	b002      	add	sp, #8
 8013694:	bd80      	pop	{r7, pc}
	...

08013698 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 801369c:	4b04      	ldr	r3, [pc, #16]	@ (80136b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	4b03      	ldr	r3, [pc, #12]	@ (80136b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80136a2:	2180      	movs	r1, #128	@ 0x80
 80136a4:	0049      	lsls	r1, r1, #1
 80136a6:	430a      	orrs	r2, r1
 80136a8:	601a      	str	r2, [r3, #0]
}
 80136aa:	46c0      	nop			@ (mov r8, r8)
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	40007000 	.word	0x40007000

080136b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80136b4:	b5b0      	push	{r4, r5, r7, lr}
 80136b6:	b08a      	sub	sp, #40	@ 0x28
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d102      	bne.n	80136c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80136c2:	2301      	movs	r3, #1
 80136c4:	f000 fbbf 	bl	8013e46 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80136c8:	4bc9      	ldr	r3, [pc, #804]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80136ca:	68db      	ldr	r3, [r3, #12]
 80136cc:	220c      	movs	r2, #12
 80136ce:	4013      	ands	r3, r2
 80136d0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80136d2:	4bc7      	ldr	r3, [pc, #796]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80136d4:	68da      	ldr	r2, [r3, #12]
 80136d6:	2380      	movs	r3, #128	@ 0x80
 80136d8:	025b      	lsls	r3, r3, #9
 80136da:	4013      	ands	r3, r2
 80136dc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	2201      	movs	r2, #1
 80136e4:	4013      	ands	r3, r2
 80136e6:	d100      	bne.n	80136ea <HAL_RCC_OscConfig+0x36>
 80136e8:	e07e      	b.n	80137e8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	2b08      	cmp	r3, #8
 80136ee:	d007      	beq.n	8013700 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	2b0c      	cmp	r3, #12
 80136f4:	d112      	bne.n	801371c <HAL_RCC_OscConfig+0x68>
 80136f6:	69ba      	ldr	r2, [r7, #24]
 80136f8:	2380      	movs	r3, #128	@ 0x80
 80136fa:	025b      	lsls	r3, r3, #9
 80136fc:	429a      	cmp	r2, r3
 80136fe:	d10d      	bne.n	801371c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013700:	4bbb      	ldr	r3, [pc, #748]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013702:	681a      	ldr	r2, [r3, #0]
 8013704:	2380      	movs	r3, #128	@ 0x80
 8013706:	029b      	lsls	r3, r3, #10
 8013708:	4013      	ands	r3, r2
 801370a:	d100      	bne.n	801370e <HAL_RCC_OscConfig+0x5a>
 801370c:	e06b      	b.n	80137e6 <HAL_RCC_OscConfig+0x132>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	685b      	ldr	r3, [r3, #4]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d167      	bne.n	80137e6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8013716:	2301      	movs	r3, #1
 8013718:	f000 fb95 	bl	8013e46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	685a      	ldr	r2, [r3, #4]
 8013720:	2380      	movs	r3, #128	@ 0x80
 8013722:	025b      	lsls	r3, r3, #9
 8013724:	429a      	cmp	r2, r3
 8013726:	d107      	bne.n	8013738 <HAL_RCC_OscConfig+0x84>
 8013728:	4bb1      	ldr	r3, [pc, #708]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801372a:	681a      	ldr	r2, [r3, #0]
 801372c:	4bb0      	ldr	r3, [pc, #704]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801372e:	2180      	movs	r1, #128	@ 0x80
 8013730:	0249      	lsls	r1, r1, #9
 8013732:	430a      	orrs	r2, r1
 8013734:	601a      	str	r2, [r3, #0]
 8013736:	e027      	b.n	8013788 <HAL_RCC_OscConfig+0xd4>
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	685a      	ldr	r2, [r3, #4]
 801373c:	23a0      	movs	r3, #160	@ 0xa0
 801373e:	02db      	lsls	r3, r3, #11
 8013740:	429a      	cmp	r2, r3
 8013742:	d10e      	bne.n	8013762 <HAL_RCC_OscConfig+0xae>
 8013744:	4baa      	ldr	r3, [pc, #680]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013746:	681a      	ldr	r2, [r3, #0]
 8013748:	4ba9      	ldr	r3, [pc, #676]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801374a:	2180      	movs	r1, #128	@ 0x80
 801374c:	02c9      	lsls	r1, r1, #11
 801374e:	430a      	orrs	r2, r1
 8013750:	601a      	str	r2, [r3, #0]
 8013752:	4ba7      	ldr	r3, [pc, #668]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	4ba6      	ldr	r3, [pc, #664]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013758:	2180      	movs	r1, #128	@ 0x80
 801375a:	0249      	lsls	r1, r1, #9
 801375c:	430a      	orrs	r2, r1
 801375e:	601a      	str	r2, [r3, #0]
 8013760:	e012      	b.n	8013788 <HAL_RCC_OscConfig+0xd4>
 8013762:	4ba3      	ldr	r3, [pc, #652]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	4ba2      	ldr	r3, [pc, #648]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013768:	49a2      	ldr	r1, [pc, #648]	@ (80139f4 <HAL_RCC_OscConfig+0x340>)
 801376a:	400a      	ands	r2, r1
 801376c:	601a      	str	r2, [r3, #0]
 801376e:	4ba0      	ldr	r3, [pc, #640]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	2380      	movs	r3, #128	@ 0x80
 8013774:	025b      	lsls	r3, r3, #9
 8013776:	4013      	ands	r3, r2
 8013778:	60fb      	str	r3, [r7, #12]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	4b9c      	ldr	r3, [pc, #624]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801377e:	681a      	ldr	r2, [r3, #0]
 8013780:	4b9b      	ldr	r3, [pc, #620]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013782:	499d      	ldr	r1, [pc, #628]	@ (80139f8 <HAL_RCC_OscConfig+0x344>)
 8013784:	400a      	ands	r2, r1
 8013786:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	685b      	ldr	r3, [r3, #4]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d015      	beq.n	80137bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013790:	f7f9 ff30 	bl	800d5f4 <HAL_GetTick>
 8013794:	0003      	movs	r3, r0
 8013796:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013798:	e009      	b.n	80137ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801379a:	f7f9 ff2b 	bl	800d5f4 <HAL_GetTick>
 801379e:	0002      	movs	r2, r0
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	1ad3      	subs	r3, r2, r3
 80137a4:	2b64      	cmp	r3, #100	@ 0x64
 80137a6:	d902      	bls.n	80137ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80137a8:	2303      	movs	r3, #3
 80137aa:	f000 fb4c 	bl	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80137ae:	4b90      	ldr	r3, [pc, #576]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	2380      	movs	r3, #128	@ 0x80
 80137b4:	029b      	lsls	r3, r3, #10
 80137b6:	4013      	ands	r3, r2
 80137b8:	d0ef      	beq.n	801379a <HAL_RCC_OscConfig+0xe6>
 80137ba:	e015      	b.n	80137e8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80137bc:	f7f9 ff1a 	bl	800d5f4 <HAL_GetTick>
 80137c0:	0003      	movs	r3, r0
 80137c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80137c4:	e008      	b.n	80137d8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80137c6:	f7f9 ff15 	bl	800d5f4 <HAL_GetTick>
 80137ca:	0002      	movs	r2, r0
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	2b64      	cmp	r3, #100	@ 0x64
 80137d2:	d901      	bls.n	80137d8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80137d4:	2303      	movs	r3, #3
 80137d6:	e336      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80137d8:	4b85      	ldr	r3, [pc, #532]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	2380      	movs	r3, #128	@ 0x80
 80137de:	029b      	lsls	r3, r3, #10
 80137e0:	4013      	ands	r3, r2
 80137e2:	d1f0      	bne.n	80137c6 <HAL_RCC_OscConfig+0x112>
 80137e4:	e000      	b.n	80137e8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80137e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	2202      	movs	r2, #2
 80137ee:	4013      	ands	r3, r2
 80137f0:	d100      	bne.n	80137f4 <HAL_RCC_OscConfig+0x140>
 80137f2:	e099      	b.n	8013928 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	68db      	ldr	r3, [r3, #12]
 80137f8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80137fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137fc:	2220      	movs	r2, #32
 80137fe:	4013      	ands	r3, r2
 8013800:	d009      	beq.n	8013816 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8013802:	4b7b      	ldr	r3, [pc, #492]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013804:	681a      	ldr	r2, [r3, #0]
 8013806:	4b7a      	ldr	r3, [pc, #488]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013808:	2120      	movs	r1, #32
 801380a:	430a      	orrs	r2, r1
 801380c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 801380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013810:	2220      	movs	r2, #32
 8013812:	4393      	bics	r3, r2
 8013814:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	2b04      	cmp	r3, #4
 801381a:	d005      	beq.n	8013828 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	2b0c      	cmp	r3, #12
 8013820:	d13e      	bne.n	80138a0 <HAL_RCC_OscConfig+0x1ec>
 8013822:	69bb      	ldr	r3, [r7, #24]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d13b      	bne.n	80138a0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8013828:	4b71      	ldr	r3, [pc, #452]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	2204      	movs	r2, #4
 801382e:	4013      	ands	r3, r2
 8013830:	d004      	beq.n	801383c <HAL_RCC_OscConfig+0x188>
 8013832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013834:	2b00      	cmp	r3, #0
 8013836:	d101      	bne.n	801383c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8013838:	2301      	movs	r3, #1
 801383a:	e304      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801383c:	4b6c      	ldr	r3, [pc, #432]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	4a6e      	ldr	r2, [pc, #440]	@ (80139fc <HAL_RCC_OscConfig+0x348>)
 8013842:	4013      	ands	r3, r2
 8013844:	0019      	movs	r1, r3
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	691b      	ldr	r3, [r3, #16]
 801384a:	021a      	lsls	r2, r3, #8
 801384c:	4b68      	ldr	r3, [pc, #416]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801384e:	430a      	orrs	r2, r1
 8013850:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8013852:	4b67      	ldr	r3, [pc, #412]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2209      	movs	r2, #9
 8013858:	4393      	bics	r3, r2
 801385a:	0019      	movs	r1, r3
 801385c:	4b64      	ldr	r3, [pc, #400]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801385e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013860:	430a      	orrs	r2, r1
 8013862:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013864:	f000 fc42 	bl	80140ec <HAL_RCC_GetSysClockFreq>
 8013868:	0001      	movs	r1, r0
 801386a:	4b61      	ldr	r3, [pc, #388]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801386c:	68db      	ldr	r3, [r3, #12]
 801386e:	091b      	lsrs	r3, r3, #4
 8013870:	220f      	movs	r2, #15
 8013872:	4013      	ands	r3, r2
 8013874:	4a62      	ldr	r2, [pc, #392]	@ (8013a00 <HAL_RCC_OscConfig+0x34c>)
 8013876:	5cd3      	ldrb	r3, [r2, r3]
 8013878:	000a      	movs	r2, r1
 801387a:	40da      	lsrs	r2, r3
 801387c:	4b61      	ldr	r3, [pc, #388]	@ (8013a04 <HAL_RCC_OscConfig+0x350>)
 801387e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8013880:	4b61      	ldr	r3, [pc, #388]	@ (8013a08 <HAL_RCC_OscConfig+0x354>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2513      	movs	r5, #19
 8013886:	197c      	adds	r4, r7, r5
 8013888:	0018      	movs	r0, r3
 801388a:	f7f9 fe6d 	bl	800d568 <HAL_InitTick>
 801388e:	0003      	movs	r3, r0
 8013890:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8013892:	197b      	adds	r3, r7, r5
 8013894:	781b      	ldrb	r3, [r3, #0]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d046      	beq.n	8013928 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 801389a:	197b      	adds	r3, r7, r5
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	e2d2      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80138a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d027      	beq.n	80138f6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80138a6:	4b52      	ldr	r3, [pc, #328]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	2209      	movs	r2, #9
 80138ac:	4393      	bics	r3, r2
 80138ae:	0019      	movs	r1, r3
 80138b0:	4b4f      	ldr	r3, [pc, #316]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80138b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80138b4:	430a      	orrs	r2, r1
 80138b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80138b8:	f7f9 fe9c 	bl	800d5f4 <HAL_GetTick>
 80138bc:	0003      	movs	r3, r0
 80138be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80138c0:	e008      	b.n	80138d4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80138c2:	f7f9 fe97 	bl	800d5f4 <HAL_GetTick>
 80138c6:	0002      	movs	r2, r0
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	1ad3      	subs	r3, r2, r3
 80138cc:	2b02      	cmp	r3, #2
 80138ce:	d901      	bls.n	80138d4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80138d0:	2303      	movs	r3, #3
 80138d2:	e2b8      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80138d4:	4b46      	ldr	r3, [pc, #280]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	2204      	movs	r2, #4
 80138da:	4013      	ands	r3, r2
 80138dc:	d0f1      	beq.n	80138c2 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80138de:	4b44      	ldr	r3, [pc, #272]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	4a46      	ldr	r2, [pc, #280]	@ (80139fc <HAL_RCC_OscConfig+0x348>)
 80138e4:	4013      	ands	r3, r2
 80138e6:	0019      	movs	r1, r3
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	691b      	ldr	r3, [r3, #16]
 80138ec:	021a      	lsls	r2, r3, #8
 80138ee:	4b40      	ldr	r3, [pc, #256]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80138f0:	430a      	orrs	r2, r1
 80138f2:	605a      	str	r2, [r3, #4]
 80138f4:	e018      	b.n	8013928 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80138f6:	4b3e      	ldr	r3, [pc, #248]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80138f8:	681a      	ldr	r2, [r3, #0]
 80138fa:	4b3d      	ldr	r3, [pc, #244]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80138fc:	2101      	movs	r1, #1
 80138fe:	438a      	bics	r2, r1
 8013900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013902:	f7f9 fe77 	bl	800d5f4 <HAL_GetTick>
 8013906:	0003      	movs	r3, r0
 8013908:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801390a:	e008      	b.n	801391e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801390c:	f7f9 fe72 	bl	800d5f4 <HAL_GetTick>
 8013910:	0002      	movs	r2, r0
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	1ad3      	subs	r3, r2, r3
 8013916:	2b02      	cmp	r3, #2
 8013918:	d901      	bls.n	801391e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 801391a:	2303      	movs	r3, #3
 801391c:	e293      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801391e:	4b34      	ldr	r3, [pc, #208]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2204      	movs	r2, #4
 8013924:	4013      	ands	r3, r2
 8013926:	d1f1      	bne.n	801390c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	2210      	movs	r2, #16
 801392e:	4013      	ands	r3, r2
 8013930:	d100      	bne.n	8013934 <HAL_RCC_OscConfig+0x280>
 8013932:	e0a2      	b.n	8013a7a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d140      	bne.n	80139bc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 801393a:	4b2d      	ldr	r3, [pc, #180]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	2380      	movs	r3, #128	@ 0x80
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	4013      	ands	r3, r2
 8013944:	d005      	beq.n	8013952 <HAL_RCC_OscConfig+0x29e>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	69db      	ldr	r3, [r3, #28]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d101      	bne.n	8013952 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801394e:	2301      	movs	r3, #1
 8013950:	e279      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013952:	4b27      	ldr	r3, [pc, #156]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013954:	685b      	ldr	r3, [r3, #4]
 8013956:	4a2d      	ldr	r2, [pc, #180]	@ (8013a0c <HAL_RCC_OscConfig+0x358>)
 8013958:	4013      	ands	r3, r2
 801395a:	0019      	movs	r1, r3
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013960:	4b23      	ldr	r3, [pc, #140]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013962:	430a      	orrs	r2, r1
 8013964:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013966:	4b22      	ldr	r3, [pc, #136]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	021b      	lsls	r3, r3, #8
 801396c:	0a19      	lsrs	r1, r3, #8
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6a1b      	ldr	r3, [r3, #32]
 8013972:	061a      	lsls	r2, r3, #24
 8013974:	4b1e      	ldr	r3, [pc, #120]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 8013976:	430a      	orrs	r2, r1
 8013978:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801397e:	0b5b      	lsrs	r3, r3, #13
 8013980:	3301      	adds	r3, #1
 8013982:	2280      	movs	r2, #128	@ 0x80
 8013984:	0212      	lsls	r2, r2, #8
 8013986:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8013988:	4b19      	ldr	r3, [pc, #100]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 801398a:	68db      	ldr	r3, [r3, #12]
 801398c:	091b      	lsrs	r3, r3, #4
 801398e:	210f      	movs	r1, #15
 8013990:	400b      	ands	r3, r1
 8013992:	491b      	ldr	r1, [pc, #108]	@ (8013a00 <HAL_RCC_OscConfig+0x34c>)
 8013994:	5ccb      	ldrb	r3, [r1, r3]
 8013996:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8013998:	4b1a      	ldr	r3, [pc, #104]	@ (8013a04 <HAL_RCC_OscConfig+0x350>)
 801399a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 801399c:	4b1a      	ldr	r3, [pc, #104]	@ (8013a08 <HAL_RCC_OscConfig+0x354>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2513      	movs	r5, #19
 80139a2:	197c      	adds	r4, r7, r5
 80139a4:	0018      	movs	r0, r3
 80139a6:	f7f9 fddf 	bl	800d568 <HAL_InitTick>
 80139aa:	0003      	movs	r3, r0
 80139ac:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80139ae:	197b      	adds	r3, r7, r5
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d061      	beq.n	8013a7a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80139b6:	197b      	adds	r3, r7, r5
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	e244      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	69db      	ldr	r3, [r3, #28]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d040      	beq.n	8013a46 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80139c4:	4b0a      	ldr	r3, [pc, #40]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	4b09      	ldr	r3, [pc, #36]	@ (80139f0 <HAL_RCC_OscConfig+0x33c>)
 80139ca:	2180      	movs	r1, #128	@ 0x80
 80139cc:	0049      	lsls	r1, r1, #1
 80139ce:	430a      	orrs	r2, r1
 80139d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80139d2:	f7f9 fe0f 	bl	800d5f4 <HAL_GetTick>
 80139d6:	0003      	movs	r3, r0
 80139d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80139da:	e019      	b.n	8013a10 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80139dc:	f7f9 fe0a 	bl	800d5f4 <HAL_GetTick>
 80139e0:	0002      	movs	r2, r0
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	1ad3      	subs	r3, r2, r3
 80139e6:	2b02      	cmp	r3, #2
 80139e8:	d912      	bls.n	8013a10 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80139ea:	2303      	movs	r3, #3
 80139ec:	e22b      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
 80139ee:	46c0      	nop			@ (mov r8, r8)
 80139f0:	40021000 	.word	0x40021000
 80139f4:	fffeffff 	.word	0xfffeffff
 80139f8:	fffbffff 	.word	0xfffbffff
 80139fc:	ffffe0ff 	.word	0xffffe0ff
 8013a00:	0802336c 	.word	0x0802336c
 8013a04:	200000cc 	.word	0x200000cc
 8013a08:	200000dc 	.word	0x200000dc
 8013a0c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8013a10:	4bca      	ldr	r3, [pc, #808]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a12:	681a      	ldr	r2, [r3, #0]
 8013a14:	2380      	movs	r3, #128	@ 0x80
 8013a16:	009b      	lsls	r3, r3, #2
 8013a18:	4013      	ands	r3, r2
 8013a1a:	d0df      	beq.n	80139dc <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8013a1c:	4bc7      	ldr	r3, [pc, #796]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a1e:	685b      	ldr	r3, [r3, #4]
 8013a20:	4ac7      	ldr	r2, [pc, #796]	@ (8013d40 <HAL_RCC_OscConfig+0x68c>)
 8013a22:	4013      	ands	r3, r2
 8013a24:	0019      	movs	r1, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013a2a:	4bc4      	ldr	r3, [pc, #784]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a2c:	430a      	orrs	r2, r1
 8013a2e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8013a30:	4bc2      	ldr	r3, [pc, #776]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	021b      	lsls	r3, r3, #8
 8013a36:	0a19      	lsrs	r1, r3, #8
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6a1b      	ldr	r3, [r3, #32]
 8013a3c:	061a      	lsls	r2, r3, #24
 8013a3e:	4bbf      	ldr	r3, [pc, #764]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a40:	430a      	orrs	r2, r1
 8013a42:	605a      	str	r2, [r3, #4]
 8013a44:	e019      	b.n	8013a7a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8013a46:	4bbd      	ldr	r3, [pc, #756]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	4bbc      	ldr	r3, [pc, #752]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a4c:	49bd      	ldr	r1, [pc, #756]	@ (8013d44 <HAL_RCC_OscConfig+0x690>)
 8013a4e:	400a      	ands	r2, r1
 8013a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013a52:	f7f9 fdcf 	bl	800d5f4 <HAL_GetTick>
 8013a56:	0003      	movs	r3, r0
 8013a58:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8013a5a:	e008      	b.n	8013a6e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8013a5c:	f7f9 fdca 	bl	800d5f4 <HAL_GetTick>
 8013a60:	0002      	movs	r2, r0
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	1ad3      	subs	r3, r2, r3
 8013a66:	2b02      	cmp	r3, #2
 8013a68:	d901      	bls.n	8013a6e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8013a6a:	2303      	movs	r3, #3
 8013a6c:	e1eb      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8013a6e:	4bb3      	ldr	r3, [pc, #716]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a70:	681a      	ldr	r2, [r3, #0]
 8013a72:	2380      	movs	r3, #128	@ 0x80
 8013a74:	009b      	lsls	r3, r3, #2
 8013a76:	4013      	ands	r3, r2
 8013a78:	d1f0      	bne.n	8013a5c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2208      	movs	r2, #8
 8013a80:	4013      	ands	r3, r2
 8013a82:	d036      	beq.n	8013af2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	695b      	ldr	r3, [r3, #20]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d019      	beq.n	8013ac0 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8013a8c:	4bab      	ldr	r3, [pc, #684]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013a90:	4baa      	ldr	r3, [pc, #680]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013a92:	2101      	movs	r1, #1
 8013a94:	430a      	orrs	r2, r1
 8013a96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013a98:	f7f9 fdac 	bl	800d5f4 <HAL_GetTick>
 8013a9c:	0003      	movs	r3, r0
 8013a9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013aa0:	e008      	b.n	8013ab4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013aa2:	f7f9 fda7 	bl	800d5f4 <HAL_GetTick>
 8013aa6:	0002      	movs	r2, r0
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	1ad3      	subs	r3, r2, r3
 8013aac:	2b02      	cmp	r3, #2
 8013aae:	d901      	bls.n	8013ab4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8013ab0:	2303      	movs	r3, #3
 8013ab2:	e1c8      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8013ab4:	4ba1      	ldr	r3, [pc, #644]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013ab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013ab8:	2202      	movs	r2, #2
 8013aba:	4013      	ands	r3, r2
 8013abc:	d0f1      	beq.n	8013aa2 <HAL_RCC_OscConfig+0x3ee>
 8013abe:	e018      	b.n	8013af2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013ac0:	4b9e      	ldr	r3, [pc, #632]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013ac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013ac4:	4b9d      	ldr	r3, [pc, #628]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013ac6:	2101      	movs	r1, #1
 8013ac8:	438a      	bics	r2, r1
 8013aca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013acc:	f7f9 fd92 	bl	800d5f4 <HAL_GetTick>
 8013ad0:	0003      	movs	r3, r0
 8013ad2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013ad4:	e008      	b.n	8013ae8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8013ad6:	f7f9 fd8d 	bl	800d5f4 <HAL_GetTick>
 8013ada:	0002      	movs	r2, r0
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	1ad3      	subs	r3, r2, r3
 8013ae0:	2b02      	cmp	r3, #2
 8013ae2:	d901      	bls.n	8013ae8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8013ae4:	2303      	movs	r3, #3
 8013ae6:	e1ae      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8013ae8:	4b94      	ldr	r3, [pc, #592]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013aec:	2202      	movs	r2, #2
 8013aee:	4013      	ands	r3, r2
 8013af0:	d1f1      	bne.n	8013ad6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	2204      	movs	r2, #4
 8013af8:	4013      	ands	r3, r2
 8013afa:	d100      	bne.n	8013afe <HAL_RCC_OscConfig+0x44a>
 8013afc:	e0ae      	b.n	8013c5c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8013afe:	2023      	movs	r0, #35	@ 0x23
 8013b00:	183b      	adds	r3, r7, r0
 8013b02:	2200      	movs	r2, #0
 8013b04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013b06:	4b8d      	ldr	r3, [pc, #564]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b0a:	2380      	movs	r3, #128	@ 0x80
 8013b0c:	055b      	lsls	r3, r3, #21
 8013b0e:	4013      	ands	r3, r2
 8013b10:	d109      	bne.n	8013b26 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8013b12:	4b8a      	ldr	r3, [pc, #552]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013b16:	4b89      	ldr	r3, [pc, #548]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b18:	2180      	movs	r1, #128	@ 0x80
 8013b1a:	0549      	lsls	r1, r1, #21
 8013b1c:	430a      	orrs	r2, r1
 8013b1e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8013b20:	183b      	adds	r3, r7, r0
 8013b22:	2201      	movs	r2, #1
 8013b24:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b26:	4b88      	ldr	r3, [pc, #544]	@ (8013d48 <HAL_RCC_OscConfig+0x694>)
 8013b28:	681a      	ldr	r2, [r3, #0]
 8013b2a:	2380      	movs	r3, #128	@ 0x80
 8013b2c:	005b      	lsls	r3, r3, #1
 8013b2e:	4013      	ands	r3, r2
 8013b30:	d11a      	bne.n	8013b68 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8013b32:	4b85      	ldr	r3, [pc, #532]	@ (8013d48 <HAL_RCC_OscConfig+0x694>)
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	4b84      	ldr	r3, [pc, #528]	@ (8013d48 <HAL_RCC_OscConfig+0x694>)
 8013b38:	2180      	movs	r1, #128	@ 0x80
 8013b3a:	0049      	lsls	r1, r1, #1
 8013b3c:	430a      	orrs	r2, r1
 8013b3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8013b40:	f7f9 fd58 	bl	800d5f4 <HAL_GetTick>
 8013b44:	0003      	movs	r3, r0
 8013b46:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b48:	e008      	b.n	8013b5c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013b4a:	f7f9 fd53 	bl	800d5f4 <HAL_GetTick>
 8013b4e:	0002      	movs	r2, r0
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	1ad3      	subs	r3, r2, r3
 8013b54:	2b64      	cmp	r3, #100	@ 0x64
 8013b56:	d901      	bls.n	8013b5c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8013b58:	2303      	movs	r3, #3
 8013b5a:	e174      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8013b5c:	4b7a      	ldr	r3, [pc, #488]	@ (8013d48 <HAL_RCC_OscConfig+0x694>)
 8013b5e:	681a      	ldr	r2, [r3, #0]
 8013b60:	2380      	movs	r3, #128	@ 0x80
 8013b62:	005b      	lsls	r3, r3, #1
 8013b64:	4013      	ands	r3, r2
 8013b66:	d0f0      	beq.n	8013b4a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	689a      	ldr	r2, [r3, #8]
 8013b6c:	2380      	movs	r3, #128	@ 0x80
 8013b6e:	005b      	lsls	r3, r3, #1
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d107      	bne.n	8013b84 <HAL_RCC_OscConfig+0x4d0>
 8013b74:	4b71      	ldr	r3, [pc, #452]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b78:	4b70      	ldr	r3, [pc, #448]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b7a:	2180      	movs	r1, #128	@ 0x80
 8013b7c:	0049      	lsls	r1, r1, #1
 8013b7e:	430a      	orrs	r2, r1
 8013b80:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b82:	e031      	b.n	8013be8 <HAL_RCC_OscConfig+0x534>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	689b      	ldr	r3, [r3, #8]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d10c      	bne.n	8013ba6 <HAL_RCC_OscConfig+0x4f2>
 8013b8c:	4b6b      	ldr	r3, [pc, #428]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b90:	4b6a      	ldr	r3, [pc, #424]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b92:	496c      	ldr	r1, [pc, #432]	@ (8013d44 <HAL_RCC_OscConfig+0x690>)
 8013b94:	400a      	ands	r2, r1
 8013b96:	651a      	str	r2, [r3, #80]	@ 0x50
 8013b98:	4b68      	ldr	r3, [pc, #416]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013b9c:	4b67      	ldr	r3, [pc, #412]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013b9e:	496b      	ldr	r1, [pc, #428]	@ (8013d4c <HAL_RCC_OscConfig+0x698>)
 8013ba0:	400a      	ands	r2, r1
 8013ba2:	651a      	str	r2, [r3, #80]	@ 0x50
 8013ba4:	e020      	b.n	8013be8 <HAL_RCC_OscConfig+0x534>
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	689a      	ldr	r2, [r3, #8]
 8013baa:	23a0      	movs	r3, #160	@ 0xa0
 8013bac:	00db      	lsls	r3, r3, #3
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d10e      	bne.n	8013bd0 <HAL_RCC_OscConfig+0x51c>
 8013bb2:	4b62      	ldr	r3, [pc, #392]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013bb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bb6:	4b61      	ldr	r3, [pc, #388]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013bb8:	2180      	movs	r1, #128	@ 0x80
 8013bba:	00c9      	lsls	r1, r1, #3
 8013bbc:	430a      	orrs	r2, r1
 8013bbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8013bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013bc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013bc6:	2180      	movs	r1, #128	@ 0x80
 8013bc8:	0049      	lsls	r1, r1, #1
 8013bca:	430a      	orrs	r2, r1
 8013bcc:	651a      	str	r2, [r3, #80]	@ 0x50
 8013bce:	e00b      	b.n	8013be8 <HAL_RCC_OscConfig+0x534>
 8013bd0:	4b5a      	ldr	r3, [pc, #360]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013bd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013bd4:	4b59      	ldr	r3, [pc, #356]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013bd6:	495b      	ldr	r1, [pc, #364]	@ (8013d44 <HAL_RCC_OscConfig+0x690>)
 8013bd8:	400a      	ands	r2, r1
 8013bda:	651a      	str	r2, [r3, #80]	@ 0x50
 8013bdc:	4b57      	ldr	r3, [pc, #348]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013bde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013be0:	4b56      	ldr	r3, [pc, #344]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013be2:	495a      	ldr	r1, [pc, #360]	@ (8013d4c <HAL_RCC_OscConfig+0x698>)
 8013be4:	400a      	ands	r2, r1
 8013be6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	689b      	ldr	r3, [r3, #8]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d015      	beq.n	8013c1c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013bf0:	f7f9 fd00 	bl	800d5f4 <HAL_GetTick>
 8013bf4:	0003      	movs	r3, r0
 8013bf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013bf8:	e009      	b.n	8013c0e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013bfa:	f7f9 fcfb 	bl	800d5f4 <HAL_GetTick>
 8013bfe:	0002      	movs	r2, r0
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	1ad3      	subs	r3, r2, r3
 8013c04:	4a52      	ldr	r2, [pc, #328]	@ (8013d50 <HAL_RCC_OscConfig+0x69c>)
 8013c06:	4293      	cmp	r3, r2
 8013c08:	d901      	bls.n	8013c0e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8013c0a:	2303      	movs	r3, #3
 8013c0c:	e11b      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8013c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c12:	2380      	movs	r3, #128	@ 0x80
 8013c14:	009b      	lsls	r3, r3, #2
 8013c16:	4013      	ands	r3, r2
 8013c18:	d0ef      	beq.n	8013bfa <HAL_RCC_OscConfig+0x546>
 8013c1a:	e014      	b.n	8013c46 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8013c1c:	f7f9 fcea 	bl	800d5f4 <HAL_GetTick>
 8013c20:	0003      	movs	r3, r0
 8013c22:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013c24:	e009      	b.n	8013c3a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8013c26:	f7f9 fce5 	bl	800d5f4 <HAL_GetTick>
 8013c2a:	0002      	movs	r2, r0
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	1ad3      	subs	r3, r2, r3
 8013c30:	4a47      	ldr	r2, [pc, #284]	@ (8013d50 <HAL_RCC_OscConfig+0x69c>)
 8013c32:	4293      	cmp	r3, r2
 8013c34:	d901      	bls.n	8013c3a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8013c36:	2303      	movs	r3, #3
 8013c38:	e105      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8013c3a:	4b40      	ldr	r3, [pc, #256]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013c3e:	2380      	movs	r3, #128	@ 0x80
 8013c40:	009b      	lsls	r3, r3, #2
 8013c42:	4013      	ands	r3, r2
 8013c44:	d1ef      	bne.n	8013c26 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8013c46:	2323      	movs	r3, #35	@ 0x23
 8013c48:	18fb      	adds	r3, r7, r3
 8013c4a:	781b      	ldrb	r3, [r3, #0]
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d105      	bne.n	8013c5c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8013c50:	4b3a      	ldr	r3, [pc, #232]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c54:	4b39      	ldr	r3, [pc, #228]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c56:	493f      	ldr	r1, [pc, #252]	@ (8013d54 <HAL_RCC_OscConfig+0x6a0>)
 8013c58:	400a      	ands	r2, r1
 8013c5a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2220      	movs	r2, #32
 8013c62:	4013      	ands	r3, r2
 8013c64:	d049      	beq.n	8013cfa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	699b      	ldr	r3, [r3, #24]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d026      	beq.n	8013cbc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8013c6e:	4b33      	ldr	r3, [pc, #204]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c70:	689a      	ldr	r2, [r3, #8]
 8013c72:	4b32      	ldr	r3, [pc, #200]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c74:	2101      	movs	r1, #1
 8013c76:	430a      	orrs	r2, r1
 8013c78:	609a      	str	r2, [r3, #8]
 8013c7a:	4b30      	ldr	r3, [pc, #192]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013c7e:	4b2f      	ldr	r3, [pc, #188]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013c80:	2101      	movs	r1, #1
 8013c82:	430a      	orrs	r2, r1
 8013c84:	635a      	str	r2, [r3, #52]	@ 0x34
 8013c86:	4b34      	ldr	r3, [pc, #208]	@ (8013d58 <HAL_RCC_OscConfig+0x6a4>)
 8013c88:	6a1a      	ldr	r2, [r3, #32]
 8013c8a:	4b33      	ldr	r3, [pc, #204]	@ (8013d58 <HAL_RCC_OscConfig+0x6a4>)
 8013c8c:	2180      	movs	r1, #128	@ 0x80
 8013c8e:	0189      	lsls	r1, r1, #6
 8013c90:	430a      	orrs	r2, r1
 8013c92:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013c94:	f7f9 fcae 	bl	800d5f4 <HAL_GetTick>
 8013c98:	0003      	movs	r3, r0
 8013c9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013c9c:	e008      	b.n	8013cb0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013c9e:	f7f9 fca9 	bl	800d5f4 <HAL_GetTick>
 8013ca2:	0002      	movs	r2, r0
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	1ad3      	subs	r3, r2, r3
 8013ca8:	2b02      	cmp	r3, #2
 8013caa:	d901      	bls.n	8013cb0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8013cac:	2303      	movs	r3, #3
 8013cae:	e0ca      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8013cb0:	4b22      	ldr	r3, [pc, #136]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013cb2:	689b      	ldr	r3, [r3, #8]
 8013cb4:	2202      	movs	r2, #2
 8013cb6:	4013      	ands	r3, r2
 8013cb8:	d0f1      	beq.n	8013c9e <HAL_RCC_OscConfig+0x5ea>
 8013cba:	e01e      	b.n	8013cfa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8013cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013cbe:	689a      	ldr	r2, [r3, #8]
 8013cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013cc2:	2101      	movs	r1, #1
 8013cc4:	438a      	bics	r2, r1
 8013cc6:	609a      	str	r2, [r3, #8]
 8013cc8:	4b23      	ldr	r3, [pc, #140]	@ (8013d58 <HAL_RCC_OscConfig+0x6a4>)
 8013cca:	6a1a      	ldr	r2, [r3, #32]
 8013ccc:	4b22      	ldr	r3, [pc, #136]	@ (8013d58 <HAL_RCC_OscConfig+0x6a4>)
 8013cce:	4923      	ldr	r1, [pc, #140]	@ (8013d5c <HAL_RCC_OscConfig+0x6a8>)
 8013cd0:	400a      	ands	r2, r1
 8013cd2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013cd4:	f7f9 fc8e 	bl	800d5f4 <HAL_GetTick>
 8013cd8:	0003      	movs	r3, r0
 8013cda:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013cdc:	e008      	b.n	8013cf0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8013cde:	f7f9 fc89 	bl	800d5f4 <HAL_GetTick>
 8013ce2:	0002      	movs	r2, r0
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	1ad3      	subs	r3, r2, r3
 8013ce8:	2b02      	cmp	r3, #2
 8013cea:	d901      	bls.n	8013cf0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8013cec:	2303      	movs	r3, #3
 8013cee:	e0aa      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8013cf0:	4b12      	ldr	r3, [pc, #72]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013cf2:	689b      	ldr	r3, [r3, #8]
 8013cf4:	2202      	movs	r2, #2
 8013cf6:	4013      	ands	r3, r2
 8013cf8:	d1f1      	bne.n	8013cde <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d100      	bne.n	8013d04 <HAL_RCC_OscConfig+0x650>
 8013d02:	e09f      	b.n	8013e44 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	2b0c      	cmp	r3, #12
 8013d08:	d100      	bne.n	8013d0c <HAL_RCC_OscConfig+0x658>
 8013d0a:	e078      	b.n	8013dfe <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d10:	2b02      	cmp	r3, #2
 8013d12:	d159      	bne.n	8013dc8 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013d14:	4b09      	ldr	r3, [pc, #36]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013d16:	681a      	ldr	r2, [r3, #0]
 8013d18:	4b08      	ldr	r3, [pc, #32]	@ (8013d3c <HAL_RCC_OscConfig+0x688>)
 8013d1a:	4911      	ldr	r1, [pc, #68]	@ (8013d60 <HAL_RCC_OscConfig+0x6ac>)
 8013d1c:	400a      	ands	r2, r1
 8013d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d20:	f7f9 fc68 	bl	800d5f4 <HAL_GetTick>
 8013d24:	0003      	movs	r3, r0
 8013d26:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013d28:	e01c      	b.n	8013d64 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013d2a:	f7f9 fc63 	bl	800d5f4 <HAL_GetTick>
 8013d2e:	0002      	movs	r2, r0
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	1ad3      	subs	r3, r2, r3
 8013d34:	2b02      	cmp	r3, #2
 8013d36:	d915      	bls.n	8013d64 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8013d38:	2303      	movs	r3, #3
 8013d3a:	e084      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
 8013d3c:	40021000 	.word	0x40021000
 8013d40:	ffff1fff 	.word	0xffff1fff
 8013d44:	fffffeff 	.word	0xfffffeff
 8013d48:	40007000 	.word	0x40007000
 8013d4c:	fffffbff 	.word	0xfffffbff
 8013d50:	00001388 	.word	0x00001388
 8013d54:	efffffff 	.word	0xefffffff
 8013d58:	40010000 	.word	0x40010000
 8013d5c:	ffffdfff 	.word	0xffffdfff
 8013d60:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013d64:	4b3a      	ldr	r3, [pc, #232]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013d66:	681a      	ldr	r2, [r3, #0]
 8013d68:	2380      	movs	r3, #128	@ 0x80
 8013d6a:	049b      	lsls	r3, r3, #18
 8013d6c:	4013      	ands	r3, r2
 8013d6e:	d1dc      	bne.n	8013d2a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8013d70:	4b37      	ldr	r3, [pc, #220]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	4a37      	ldr	r2, [pc, #220]	@ (8013e54 <HAL_RCC_OscConfig+0x7a0>)
 8013d76:	4013      	ands	r3, r2
 8013d78:	0019      	movs	r1, r3
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d82:	431a      	orrs	r2, r3
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d88:	431a      	orrs	r2, r3
 8013d8a:	4b31      	ldr	r3, [pc, #196]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013d8c:	430a      	orrs	r2, r1
 8013d8e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8013d90:	4b2f      	ldr	r3, [pc, #188]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	4b2e      	ldr	r3, [pc, #184]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013d96:	2180      	movs	r1, #128	@ 0x80
 8013d98:	0449      	lsls	r1, r1, #17
 8013d9a:	430a      	orrs	r2, r1
 8013d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013d9e:	f7f9 fc29 	bl	800d5f4 <HAL_GetTick>
 8013da2:	0003      	movs	r3, r0
 8013da4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8013da6:	e008      	b.n	8013dba <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013da8:	f7f9 fc24 	bl	800d5f4 <HAL_GetTick>
 8013dac:	0002      	movs	r2, r0
 8013dae:	697b      	ldr	r3, [r7, #20]
 8013db0:	1ad3      	subs	r3, r2, r3
 8013db2:	2b02      	cmp	r3, #2
 8013db4:	d901      	bls.n	8013dba <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8013db6:	2303      	movs	r3, #3
 8013db8:	e045      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8013dba:	4b25      	ldr	r3, [pc, #148]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	2380      	movs	r3, #128	@ 0x80
 8013dc0:	049b      	lsls	r3, r3, #18
 8013dc2:	4013      	ands	r3, r2
 8013dc4:	d0f0      	beq.n	8013da8 <HAL_RCC_OscConfig+0x6f4>
 8013dc6:	e03d      	b.n	8013e44 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013dc8:	4b21      	ldr	r3, [pc, #132]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013dca:	681a      	ldr	r2, [r3, #0]
 8013dcc:	4b20      	ldr	r3, [pc, #128]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013dce:	4922      	ldr	r1, [pc, #136]	@ (8013e58 <HAL_RCC_OscConfig+0x7a4>)
 8013dd0:	400a      	ands	r2, r1
 8013dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013dd4:	f7f9 fc0e 	bl	800d5f4 <HAL_GetTick>
 8013dd8:	0003      	movs	r3, r0
 8013dda:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013ddc:	e008      	b.n	8013df0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8013dde:	f7f9 fc09 	bl	800d5f4 <HAL_GetTick>
 8013de2:	0002      	movs	r2, r0
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	2b02      	cmp	r3, #2
 8013dea:	d901      	bls.n	8013df0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8013dec:	2303      	movs	r3, #3
 8013dee:	e02a      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8013df0:	4b17      	ldr	r3, [pc, #92]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	2380      	movs	r3, #128	@ 0x80
 8013df6:	049b      	lsls	r3, r3, #18
 8013df8:	4013      	ands	r3, r2
 8013dfa:	d1f0      	bne.n	8013dde <HAL_RCC_OscConfig+0x72a>
 8013dfc:	e022      	b.n	8013e44 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e02:	2b01      	cmp	r3, #1
 8013e04:	d101      	bne.n	8013e0a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8013e06:	2301      	movs	r3, #1
 8013e08:	e01d      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8013e0a:	4b11      	ldr	r3, [pc, #68]	@ (8013e50 <HAL_RCC_OscConfig+0x79c>)
 8013e0c:	68db      	ldr	r3, [r3, #12]
 8013e0e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013e10:	69ba      	ldr	r2, [r7, #24]
 8013e12:	2380      	movs	r3, #128	@ 0x80
 8013e14:	025b      	lsls	r3, r3, #9
 8013e16:	401a      	ands	r2, r3
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d10f      	bne.n	8013e40 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8013e20:	69ba      	ldr	r2, [r7, #24]
 8013e22:	23f0      	movs	r3, #240	@ 0xf0
 8013e24:	039b      	lsls	r3, r3, #14
 8013e26:	401a      	ands	r2, r3
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d107      	bne.n	8013e40 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8013e30:	69ba      	ldr	r2, [r7, #24]
 8013e32:	23c0      	movs	r3, #192	@ 0xc0
 8013e34:	041b      	lsls	r3, r3, #16
 8013e36:	401a      	ands	r2, r3
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d001      	beq.n	8013e44 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8013e40:	2301      	movs	r3, #1
 8013e42:	e000      	b.n	8013e46 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8013e44:	2300      	movs	r3, #0
}
 8013e46:	0018      	movs	r0, r3
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	b00a      	add	sp, #40	@ 0x28
 8013e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8013e4e:	46c0      	nop			@ (mov r8, r8)
 8013e50:	40021000 	.word	0x40021000
 8013e54:	ff02ffff 	.word	0xff02ffff
 8013e58:	feffffff 	.word	0xfeffffff

08013e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8013e5c:	b5b0      	push	{r4, r5, r7, lr}
 8013e5e:	b084      	sub	sp, #16
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d101      	bne.n	8013e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	e128      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8013e70:	4b96      	ldr	r3, [pc, #600]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2201      	movs	r2, #1
 8013e76:	4013      	ands	r3, r2
 8013e78:	683a      	ldr	r2, [r7, #0]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d91e      	bls.n	8013ebc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013e7e:	4b93      	ldr	r3, [pc, #588]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	2201      	movs	r2, #1
 8013e84:	4393      	bics	r3, r2
 8013e86:	0019      	movs	r1, r3
 8013e88:	4b90      	ldr	r3, [pc, #576]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 8013e8a:	683a      	ldr	r2, [r7, #0]
 8013e8c:	430a      	orrs	r2, r1
 8013e8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8013e90:	f7f9 fbb0 	bl	800d5f4 <HAL_GetTick>
 8013e94:	0003      	movs	r3, r0
 8013e96:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013e98:	e009      	b.n	8013eae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013e9a:	f7f9 fbab 	bl	800d5f4 <HAL_GetTick>
 8013e9e:	0002      	movs	r2, r0
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	1ad3      	subs	r3, r2, r3
 8013ea4:	4a8a      	ldr	r2, [pc, #552]	@ (80140d0 <HAL_RCC_ClockConfig+0x274>)
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	d901      	bls.n	8013eae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8013eaa:	2303      	movs	r3, #3
 8013eac:	e109      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013eae:	4b87      	ldr	r3, [pc, #540]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	2201      	movs	r2, #1
 8013eb4:	4013      	ands	r3, r2
 8013eb6:	683a      	ldr	r2, [r7, #0]
 8013eb8:	429a      	cmp	r2, r3
 8013eba:	d1ee      	bne.n	8013e9a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	2202      	movs	r2, #2
 8013ec2:	4013      	ands	r3, r2
 8013ec4:	d009      	beq.n	8013eda <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013ec6:	4b83      	ldr	r3, [pc, #524]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013ec8:	68db      	ldr	r3, [r3, #12]
 8013eca:	22f0      	movs	r2, #240	@ 0xf0
 8013ecc:	4393      	bics	r3, r2
 8013ece:	0019      	movs	r1, r3
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	689a      	ldr	r2, [r3, #8]
 8013ed4:	4b7f      	ldr	r3, [pc, #508]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013ed6:	430a      	orrs	r2, r1
 8013ed8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	2201      	movs	r2, #1
 8013ee0:	4013      	ands	r3, r2
 8013ee2:	d100      	bne.n	8013ee6 <HAL_RCC_ClockConfig+0x8a>
 8013ee4:	e089      	b.n	8013ffa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	685b      	ldr	r3, [r3, #4]
 8013eea:	2b02      	cmp	r3, #2
 8013eec:	d107      	bne.n	8013efe <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013eee:	4b79      	ldr	r3, [pc, #484]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	2380      	movs	r3, #128	@ 0x80
 8013ef4:	029b      	lsls	r3, r3, #10
 8013ef6:	4013      	ands	r3, r2
 8013ef8:	d120      	bne.n	8013f3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013efa:	2301      	movs	r3, #1
 8013efc:	e0e1      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	685b      	ldr	r3, [r3, #4]
 8013f02:	2b03      	cmp	r3, #3
 8013f04:	d107      	bne.n	8013f16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8013f06:	4b73      	ldr	r3, [pc, #460]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013f08:	681a      	ldr	r2, [r3, #0]
 8013f0a:	2380      	movs	r3, #128	@ 0x80
 8013f0c:	049b      	lsls	r3, r3, #18
 8013f0e:	4013      	ands	r3, r2
 8013f10:	d114      	bne.n	8013f3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013f12:	2301      	movs	r3, #1
 8013f14:	e0d5      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	2b01      	cmp	r3, #1
 8013f1c:	d106      	bne.n	8013f2c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013f1e:	4b6d      	ldr	r3, [pc, #436]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	2204      	movs	r2, #4
 8013f24:	4013      	ands	r3, r2
 8013f26:	d109      	bne.n	8013f3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013f28:	2301      	movs	r3, #1
 8013f2a:	e0ca      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8013f2c:	4b69      	ldr	r3, [pc, #420]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	2380      	movs	r3, #128	@ 0x80
 8013f32:	009b      	lsls	r3, r3, #2
 8013f34:	4013      	ands	r3, r2
 8013f36:	d101      	bne.n	8013f3c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e0c2      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8013f3c:	4b65      	ldr	r3, [pc, #404]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013f3e:	68db      	ldr	r3, [r3, #12]
 8013f40:	2203      	movs	r2, #3
 8013f42:	4393      	bics	r3, r2
 8013f44:	0019      	movs	r1, r3
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	685a      	ldr	r2, [r3, #4]
 8013f4a:	4b62      	ldr	r3, [pc, #392]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013f4c:	430a      	orrs	r2, r1
 8013f4e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8013f50:	f7f9 fb50 	bl	800d5f4 <HAL_GetTick>
 8013f54:	0003      	movs	r3, r0
 8013f56:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	685b      	ldr	r3, [r3, #4]
 8013f5c:	2b02      	cmp	r3, #2
 8013f5e:	d111      	bne.n	8013f84 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013f60:	e009      	b.n	8013f76 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f62:	f7f9 fb47 	bl	800d5f4 <HAL_GetTick>
 8013f66:	0002      	movs	r2, r0
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	1ad3      	subs	r3, r2, r3
 8013f6c:	4a58      	ldr	r2, [pc, #352]	@ (80140d0 <HAL_RCC_ClockConfig+0x274>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d901      	bls.n	8013f76 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8013f72:	2303      	movs	r3, #3
 8013f74:	e0a5      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013f76:	4b57      	ldr	r3, [pc, #348]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	220c      	movs	r2, #12
 8013f7c:	4013      	ands	r3, r2
 8013f7e:	2b08      	cmp	r3, #8
 8013f80:	d1ef      	bne.n	8013f62 <HAL_RCC_ClockConfig+0x106>
 8013f82:	e03a      	b.n	8013ffa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	2b03      	cmp	r3, #3
 8013f8a:	d111      	bne.n	8013fb0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013f8c:	e009      	b.n	8013fa2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013f8e:	f7f9 fb31 	bl	800d5f4 <HAL_GetTick>
 8013f92:	0002      	movs	r2, r0
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	1ad3      	subs	r3, r2, r3
 8013f98:	4a4d      	ldr	r2, [pc, #308]	@ (80140d0 <HAL_RCC_ClockConfig+0x274>)
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d901      	bls.n	8013fa2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8013f9e:	2303      	movs	r3, #3
 8013fa0:	e08f      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	220c      	movs	r2, #12
 8013fa8:	4013      	ands	r3, r2
 8013faa:	2b0c      	cmp	r3, #12
 8013fac:	d1ef      	bne.n	8013f8e <HAL_RCC_ClockConfig+0x132>
 8013fae:	e024      	b.n	8013ffa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	2b01      	cmp	r3, #1
 8013fb6:	d11b      	bne.n	8013ff0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013fb8:	e009      	b.n	8013fce <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013fba:	f7f9 fb1b 	bl	800d5f4 <HAL_GetTick>
 8013fbe:	0002      	movs	r2, r0
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	1ad3      	subs	r3, r2, r3
 8013fc4:	4a42      	ldr	r2, [pc, #264]	@ (80140d0 <HAL_RCC_ClockConfig+0x274>)
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d901      	bls.n	8013fce <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8013fca:	2303      	movs	r3, #3
 8013fcc:	e079      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013fce:	4b41      	ldr	r3, [pc, #260]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013fd0:	68db      	ldr	r3, [r3, #12]
 8013fd2:	220c      	movs	r2, #12
 8013fd4:	4013      	ands	r3, r2
 8013fd6:	2b04      	cmp	r3, #4
 8013fd8:	d1ef      	bne.n	8013fba <HAL_RCC_ClockConfig+0x15e>
 8013fda:	e00e      	b.n	8013ffa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013fdc:	f7f9 fb0a 	bl	800d5f4 <HAL_GetTick>
 8013fe0:	0002      	movs	r2, r0
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	1ad3      	subs	r3, r2, r3
 8013fe6:	4a3a      	ldr	r2, [pc, #232]	@ (80140d0 <HAL_RCC_ClockConfig+0x274>)
 8013fe8:	4293      	cmp	r3, r2
 8013fea:	d901      	bls.n	8013ff0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8013fec:	2303      	movs	r3, #3
 8013fee:	e068      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8013ff0:	4b38      	ldr	r3, [pc, #224]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8013ff2:	68db      	ldr	r3, [r3, #12]
 8013ff4:	220c      	movs	r2, #12
 8013ff6:	4013      	ands	r3, r2
 8013ff8:	d1f0      	bne.n	8013fdc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8013ffa:	4b34      	ldr	r3, [pc, #208]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2201      	movs	r2, #1
 8014000:	4013      	ands	r3, r2
 8014002:	683a      	ldr	r2, [r7, #0]
 8014004:	429a      	cmp	r2, r3
 8014006:	d21e      	bcs.n	8014046 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014008:	4b30      	ldr	r3, [pc, #192]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	2201      	movs	r2, #1
 801400e:	4393      	bics	r3, r2
 8014010:	0019      	movs	r1, r3
 8014012:	4b2e      	ldr	r3, [pc, #184]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 8014014:	683a      	ldr	r2, [r7, #0]
 8014016:	430a      	orrs	r2, r1
 8014018:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801401a:	f7f9 faeb 	bl	800d5f4 <HAL_GetTick>
 801401e:	0003      	movs	r3, r0
 8014020:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014022:	e009      	b.n	8014038 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014024:	f7f9 fae6 	bl	800d5f4 <HAL_GetTick>
 8014028:	0002      	movs	r2, r0
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	1ad3      	subs	r3, r2, r3
 801402e:	4a28      	ldr	r2, [pc, #160]	@ (80140d0 <HAL_RCC_ClockConfig+0x274>)
 8014030:	4293      	cmp	r3, r2
 8014032:	d901      	bls.n	8014038 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8014034:	2303      	movs	r3, #3
 8014036:	e044      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014038:	4b24      	ldr	r3, [pc, #144]	@ (80140cc <HAL_RCC_ClockConfig+0x270>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	2201      	movs	r2, #1
 801403e:	4013      	ands	r3, r2
 8014040:	683a      	ldr	r2, [r7, #0]
 8014042:	429a      	cmp	r2, r3
 8014044:	d1ee      	bne.n	8014024 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	2204      	movs	r2, #4
 801404c:	4013      	ands	r3, r2
 801404e:	d009      	beq.n	8014064 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014050:	4b20      	ldr	r3, [pc, #128]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	4a20      	ldr	r2, [pc, #128]	@ (80140d8 <HAL_RCC_ClockConfig+0x27c>)
 8014056:	4013      	ands	r3, r2
 8014058:	0019      	movs	r1, r3
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	68da      	ldr	r2, [r3, #12]
 801405e:	4b1d      	ldr	r3, [pc, #116]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8014060:	430a      	orrs	r2, r1
 8014062:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	2208      	movs	r2, #8
 801406a:	4013      	ands	r3, r2
 801406c:	d00a      	beq.n	8014084 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801406e:	4b19      	ldr	r3, [pc, #100]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8014070:	68db      	ldr	r3, [r3, #12]
 8014072:	4a1a      	ldr	r2, [pc, #104]	@ (80140dc <HAL_RCC_ClockConfig+0x280>)
 8014074:	4013      	ands	r3, r2
 8014076:	0019      	movs	r1, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	691b      	ldr	r3, [r3, #16]
 801407c:	00da      	lsls	r2, r3, #3
 801407e:	4b15      	ldr	r3, [pc, #84]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 8014080:	430a      	orrs	r2, r1
 8014082:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8014084:	f000 f832 	bl	80140ec <HAL_RCC_GetSysClockFreq>
 8014088:	0001      	movs	r1, r0
 801408a:	4b12      	ldr	r3, [pc, #72]	@ (80140d4 <HAL_RCC_ClockConfig+0x278>)
 801408c:	68db      	ldr	r3, [r3, #12]
 801408e:	091b      	lsrs	r3, r3, #4
 8014090:	220f      	movs	r2, #15
 8014092:	4013      	ands	r3, r2
 8014094:	4a12      	ldr	r2, [pc, #72]	@ (80140e0 <HAL_RCC_ClockConfig+0x284>)
 8014096:	5cd3      	ldrb	r3, [r2, r3]
 8014098:	000a      	movs	r2, r1
 801409a:	40da      	lsrs	r2, r3
 801409c:	4b11      	ldr	r3, [pc, #68]	@ (80140e4 <HAL_RCC_ClockConfig+0x288>)
 801409e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80140a0:	4b11      	ldr	r3, [pc, #68]	@ (80140e8 <HAL_RCC_ClockConfig+0x28c>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	250b      	movs	r5, #11
 80140a6:	197c      	adds	r4, r7, r5
 80140a8:	0018      	movs	r0, r3
 80140aa:	f7f9 fa5d 	bl	800d568 <HAL_InitTick>
 80140ae:	0003      	movs	r3, r0
 80140b0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80140b2:	197b      	adds	r3, r7, r5
 80140b4:	781b      	ldrb	r3, [r3, #0]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d002      	beq.n	80140c0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80140ba:	197b      	adds	r3, r7, r5
 80140bc:	781b      	ldrb	r3, [r3, #0]
 80140be:	e000      	b.n	80140c2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80140c0:	2300      	movs	r3, #0
}
 80140c2:	0018      	movs	r0, r3
 80140c4:	46bd      	mov	sp, r7
 80140c6:	b004      	add	sp, #16
 80140c8:	bdb0      	pop	{r4, r5, r7, pc}
 80140ca:	46c0      	nop			@ (mov r8, r8)
 80140cc:	40022000 	.word	0x40022000
 80140d0:	00001388 	.word	0x00001388
 80140d4:	40021000 	.word	0x40021000
 80140d8:	fffff8ff 	.word	0xfffff8ff
 80140dc:	ffffc7ff 	.word	0xffffc7ff
 80140e0:	0802336c 	.word	0x0802336c
 80140e4:	200000cc 	.word	0x200000cc
 80140e8:	200000dc 	.word	0x200000dc

080140ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80140ec:	b5b0      	push	{r4, r5, r7, lr}
 80140ee:	b08e      	sub	sp, #56	@ 0x38
 80140f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80140f2:	4b4c      	ldr	r3, [pc, #304]	@ (8014224 <HAL_RCC_GetSysClockFreq+0x138>)
 80140f4:	68db      	ldr	r3, [r3, #12]
 80140f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80140f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80140fa:	230c      	movs	r3, #12
 80140fc:	4013      	ands	r3, r2
 80140fe:	2b0c      	cmp	r3, #12
 8014100:	d014      	beq.n	801412c <HAL_RCC_GetSysClockFreq+0x40>
 8014102:	d900      	bls.n	8014106 <HAL_RCC_GetSysClockFreq+0x1a>
 8014104:	e07b      	b.n	80141fe <HAL_RCC_GetSysClockFreq+0x112>
 8014106:	2b04      	cmp	r3, #4
 8014108:	d002      	beq.n	8014110 <HAL_RCC_GetSysClockFreq+0x24>
 801410a:	2b08      	cmp	r3, #8
 801410c:	d00b      	beq.n	8014126 <HAL_RCC_GetSysClockFreq+0x3a>
 801410e:	e076      	b.n	80141fe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014110:	4b44      	ldr	r3, [pc, #272]	@ (8014224 <HAL_RCC_GetSysClockFreq+0x138>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	2210      	movs	r2, #16
 8014116:	4013      	ands	r3, r2
 8014118:	d002      	beq.n	8014120 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 801411a:	4b43      	ldr	r3, [pc, #268]	@ (8014228 <HAL_RCC_GetSysClockFreq+0x13c>)
 801411c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 801411e:	e07c      	b.n	801421a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014120:	4b42      	ldr	r3, [pc, #264]	@ (801422c <HAL_RCC_GetSysClockFreq+0x140>)
 8014122:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014124:	e079      	b.n	801421a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8014126:	4b42      	ldr	r3, [pc, #264]	@ (8014230 <HAL_RCC_GetSysClockFreq+0x144>)
 8014128:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801412a:	e076      	b.n	801421a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 801412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801412e:	0c9a      	lsrs	r2, r3, #18
 8014130:	230f      	movs	r3, #15
 8014132:	401a      	ands	r2, r3
 8014134:	4b3f      	ldr	r3, [pc, #252]	@ (8014234 <HAL_RCC_GetSysClockFreq+0x148>)
 8014136:	5c9b      	ldrb	r3, [r3, r2]
 8014138:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 801413a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801413c:	0d9a      	lsrs	r2, r3, #22
 801413e:	2303      	movs	r3, #3
 8014140:	4013      	ands	r3, r2
 8014142:	3301      	adds	r3, #1
 8014144:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8014146:	4b37      	ldr	r3, [pc, #220]	@ (8014224 <HAL_RCC_GetSysClockFreq+0x138>)
 8014148:	68da      	ldr	r2, [r3, #12]
 801414a:	2380      	movs	r3, #128	@ 0x80
 801414c:	025b      	lsls	r3, r3, #9
 801414e:	4013      	ands	r3, r2
 8014150:	d01a      	beq.n	8014188 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8014152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014154:	61bb      	str	r3, [r7, #24]
 8014156:	2300      	movs	r3, #0
 8014158:	61fb      	str	r3, [r7, #28]
 801415a:	4a35      	ldr	r2, [pc, #212]	@ (8014230 <HAL_RCC_GetSysClockFreq+0x144>)
 801415c:	2300      	movs	r3, #0
 801415e:	69b8      	ldr	r0, [r7, #24]
 8014160:	69f9      	ldr	r1, [r7, #28]
 8014162:	f7ec fa2d 	bl	80005c0 <__aeabi_lmul>
 8014166:	0002      	movs	r2, r0
 8014168:	000b      	movs	r3, r1
 801416a:	0010      	movs	r0, r2
 801416c:	0019      	movs	r1, r3
 801416e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014170:	613b      	str	r3, [r7, #16]
 8014172:	2300      	movs	r3, #0
 8014174:	617b      	str	r3, [r7, #20]
 8014176:	693a      	ldr	r2, [r7, #16]
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	f7ec fa01 	bl	8000580 <__aeabi_uldivmod>
 801417e:	0002      	movs	r2, r0
 8014180:	000b      	movs	r3, r1
 8014182:	0013      	movs	r3, r2
 8014184:	637b      	str	r3, [r7, #52]	@ 0x34
 8014186:	e037      	b.n	80141f8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014188:	4b26      	ldr	r3, [pc, #152]	@ (8014224 <HAL_RCC_GetSysClockFreq+0x138>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	2210      	movs	r2, #16
 801418e:	4013      	ands	r3, r2
 8014190:	d01a      	beq.n	80141c8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8014192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014194:	60bb      	str	r3, [r7, #8]
 8014196:	2300      	movs	r3, #0
 8014198:	60fb      	str	r3, [r7, #12]
 801419a:	4a23      	ldr	r2, [pc, #140]	@ (8014228 <HAL_RCC_GetSysClockFreq+0x13c>)
 801419c:	2300      	movs	r3, #0
 801419e:	68b8      	ldr	r0, [r7, #8]
 80141a0:	68f9      	ldr	r1, [r7, #12]
 80141a2:	f7ec fa0d 	bl	80005c0 <__aeabi_lmul>
 80141a6:	0002      	movs	r2, r0
 80141a8:	000b      	movs	r3, r1
 80141aa:	0010      	movs	r0, r2
 80141ac:	0019      	movs	r1, r3
 80141ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141b0:	603b      	str	r3, [r7, #0]
 80141b2:	2300      	movs	r3, #0
 80141b4:	607b      	str	r3, [r7, #4]
 80141b6:	683a      	ldr	r2, [r7, #0]
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f7ec f9e1 	bl	8000580 <__aeabi_uldivmod>
 80141be:	0002      	movs	r2, r0
 80141c0:	000b      	movs	r3, r1
 80141c2:	0013      	movs	r3, r2
 80141c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80141c6:	e017      	b.n	80141f8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80141c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80141ca:	0018      	movs	r0, r3
 80141cc:	2300      	movs	r3, #0
 80141ce:	0019      	movs	r1, r3
 80141d0:	4a16      	ldr	r2, [pc, #88]	@ (801422c <HAL_RCC_GetSysClockFreq+0x140>)
 80141d2:	2300      	movs	r3, #0
 80141d4:	f7ec f9f4 	bl	80005c0 <__aeabi_lmul>
 80141d8:	0002      	movs	r2, r0
 80141da:	000b      	movs	r3, r1
 80141dc:	0010      	movs	r0, r2
 80141de:	0019      	movs	r1, r3
 80141e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80141e2:	001c      	movs	r4, r3
 80141e4:	2300      	movs	r3, #0
 80141e6:	001d      	movs	r5, r3
 80141e8:	0022      	movs	r2, r4
 80141ea:	002b      	movs	r3, r5
 80141ec:	f7ec f9c8 	bl	8000580 <__aeabi_uldivmod>
 80141f0:	0002      	movs	r2, r0
 80141f2:	000b      	movs	r3, r1
 80141f4:	0013      	movs	r3, r2
 80141f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80141f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80141fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80141fc:	e00d      	b.n	801421a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80141fe:	4b09      	ldr	r3, [pc, #36]	@ (8014224 <HAL_RCC_GetSysClockFreq+0x138>)
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	0b5b      	lsrs	r3, r3, #13
 8014204:	2207      	movs	r2, #7
 8014206:	4013      	ands	r3, r2
 8014208:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 801420a:	6a3b      	ldr	r3, [r7, #32]
 801420c:	3301      	adds	r3, #1
 801420e:	2280      	movs	r2, #128	@ 0x80
 8014210:	0212      	lsls	r2, r2, #8
 8014212:	409a      	lsls	r2, r3
 8014214:	0013      	movs	r3, r2
 8014216:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014218:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 801421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801421c:	0018      	movs	r0, r3
 801421e:	46bd      	mov	sp, r7
 8014220:	b00e      	add	sp, #56	@ 0x38
 8014222:	bdb0      	pop	{r4, r5, r7, pc}
 8014224:	40021000 	.word	0x40021000
 8014228:	003d0900 	.word	0x003d0900
 801422c:	00f42400 	.word	0x00f42400
 8014230:	007a1200 	.word	0x007a1200
 8014234:	08023384 	.word	0x08023384

08014238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801423c:	4b02      	ldr	r3, [pc, #8]	@ (8014248 <HAL_RCC_GetHCLKFreq+0x10>)
 801423e:	681b      	ldr	r3, [r3, #0]
}
 8014240:	0018      	movs	r0, r3
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	46c0      	nop			@ (mov r8, r8)
 8014248:	200000cc 	.word	0x200000cc

0801424c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014250:	f7ff fff2 	bl	8014238 <HAL_RCC_GetHCLKFreq>
 8014254:	0001      	movs	r1, r0
 8014256:	4b06      	ldr	r3, [pc, #24]	@ (8014270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014258:	68db      	ldr	r3, [r3, #12]
 801425a:	0a1b      	lsrs	r3, r3, #8
 801425c:	2207      	movs	r2, #7
 801425e:	4013      	ands	r3, r2
 8014260:	4a04      	ldr	r2, [pc, #16]	@ (8014274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8014262:	5cd3      	ldrb	r3, [r2, r3]
 8014264:	40d9      	lsrs	r1, r3
 8014266:	000b      	movs	r3, r1
}
 8014268:	0018      	movs	r0, r3
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	46c0      	nop			@ (mov r8, r8)
 8014270:	40021000 	.word	0x40021000
 8014274:	0802337c 	.word	0x0802337c

08014278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801427c:	f7ff ffdc 	bl	8014238 <HAL_RCC_GetHCLKFreq>
 8014280:	0001      	movs	r1, r0
 8014282:	4b06      	ldr	r3, [pc, #24]	@ (801429c <HAL_RCC_GetPCLK2Freq+0x24>)
 8014284:	68db      	ldr	r3, [r3, #12]
 8014286:	0adb      	lsrs	r3, r3, #11
 8014288:	2207      	movs	r2, #7
 801428a:	4013      	ands	r3, r2
 801428c:	4a04      	ldr	r2, [pc, #16]	@ (80142a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801428e:	5cd3      	ldrb	r3, [r2, r3]
 8014290:	40d9      	lsrs	r1, r3
 8014292:	000b      	movs	r3, r1
}
 8014294:	0018      	movs	r0, r3
 8014296:	46bd      	mov	sp, r7
 8014298:	bd80      	pop	{r7, pc}
 801429a:	46c0      	nop			@ (mov r8, r8)
 801429c:	40021000 	.word	0x40021000
 80142a0:	0802337c 	.word	0x0802337c

080142a4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b086      	sub	sp, #24
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80142ac:	2017      	movs	r0, #23
 80142ae:	183b      	adds	r3, r7, r0
 80142b0:	2200      	movs	r2, #0
 80142b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	2220      	movs	r2, #32
 80142ba:	4013      	ands	r3, r2
 80142bc:	d100      	bne.n	80142c0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80142be:	e0c7      	b.n	8014450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80142c0:	4b9b      	ldr	r3, [pc, #620]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80142c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80142c4:	2380      	movs	r3, #128	@ 0x80
 80142c6:	055b      	lsls	r3, r3, #21
 80142c8:	4013      	ands	r3, r2
 80142ca:	d109      	bne.n	80142e0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80142cc:	4b98      	ldr	r3, [pc, #608]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80142ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80142d0:	4b97      	ldr	r3, [pc, #604]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80142d2:	2180      	movs	r1, #128	@ 0x80
 80142d4:	0549      	lsls	r1, r1, #21
 80142d6:	430a      	orrs	r2, r1
 80142d8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80142da:	183b      	adds	r3, r7, r0
 80142dc:	2201      	movs	r2, #1
 80142de:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80142e0:	4b94      	ldr	r3, [pc, #592]	@ (8014534 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80142e2:	681a      	ldr	r2, [r3, #0]
 80142e4:	2380      	movs	r3, #128	@ 0x80
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	4013      	ands	r3, r2
 80142ea:	d11a      	bne.n	8014322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80142ec:	4b91      	ldr	r3, [pc, #580]	@ (8014534 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	4b90      	ldr	r3, [pc, #576]	@ (8014534 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80142f2:	2180      	movs	r1, #128	@ 0x80
 80142f4:	0049      	lsls	r1, r1, #1
 80142f6:	430a      	orrs	r2, r1
 80142f8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80142fa:	f7f9 f97b 	bl	800d5f4 <HAL_GetTick>
 80142fe:	0003      	movs	r3, r0
 8014300:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014302:	e008      	b.n	8014316 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014304:	f7f9 f976 	bl	800d5f4 <HAL_GetTick>
 8014308:	0002      	movs	r2, r0
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	1ad3      	subs	r3, r2, r3
 801430e:	2b64      	cmp	r3, #100	@ 0x64
 8014310:	d901      	bls.n	8014316 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8014312:	2303      	movs	r3, #3
 8014314:	e107      	b.n	8014526 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014316:	4b87      	ldr	r3, [pc, #540]	@ (8014534 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014318:	681a      	ldr	r2, [r3, #0]
 801431a:	2380      	movs	r3, #128	@ 0x80
 801431c:	005b      	lsls	r3, r3, #1
 801431e:	4013      	ands	r3, r2
 8014320:	d0f0      	beq.n	8014304 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8014322:	4b83      	ldr	r3, [pc, #524]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014324:	681a      	ldr	r2, [r3, #0]
 8014326:	23c0      	movs	r3, #192	@ 0xc0
 8014328:	039b      	lsls	r3, r3, #14
 801432a:	4013      	ands	r3, r2
 801432c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	685a      	ldr	r2, [r3, #4]
 8014332:	23c0      	movs	r3, #192	@ 0xc0
 8014334:	039b      	lsls	r3, r3, #14
 8014336:	4013      	ands	r3, r2
 8014338:	68fa      	ldr	r2, [r7, #12]
 801433a:	429a      	cmp	r2, r3
 801433c:	d013      	beq.n	8014366 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	685a      	ldr	r2, [r3, #4]
 8014342:	23c0      	movs	r3, #192	@ 0xc0
 8014344:	029b      	lsls	r3, r3, #10
 8014346:	401a      	ands	r2, r3
 8014348:	23c0      	movs	r3, #192	@ 0xc0
 801434a:	029b      	lsls	r3, r3, #10
 801434c:	429a      	cmp	r2, r3
 801434e:	d10a      	bne.n	8014366 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014350:	4b77      	ldr	r3, [pc, #476]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014352:	681a      	ldr	r2, [r3, #0]
 8014354:	2380      	movs	r3, #128	@ 0x80
 8014356:	029b      	lsls	r3, r3, #10
 8014358:	401a      	ands	r2, r3
 801435a:	2380      	movs	r3, #128	@ 0x80
 801435c:	029b      	lsls	r3, r3, #10
 801435e:	429a      	cmp	r2, r3
 8014360:	d101      	bne.n	8014366 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8014362:	2301      	movs	r3, #1
 8014364:	e0df      	b.n	8014526 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8014366:	4b72      	ldr	r3, [pc, #456]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801436a:	23c0      	movs	r3, #192	@ 0xc0
 801436c:	029b      	lsls	r3, r3, #10
 801436e:	4013      	ands	r3, r2
 8014370:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d03b      	beq.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	685a      	ldr	r2, [r3, #4]
 801437c:	23c0      	movs	r3, #192	@ 0xc0
 801437e:	029b      	lsls	r3, r3, #10
 8014380:	4013      	ands	r3, r2
 8014382:	68fa      	ldr	r2, [r7, #12]
 8014384:	429a      	cmp	r2, r3
 8014386:	d033      	beq.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	2220      	movs	r2, #32
 801438e:	4013      	ands	r3, r2
 8014390:	d02e      	beq.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8014392:	4b67      	ldr	r3, [pc, #412]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014396:	4a68      	ldr	r2, [pc, #416]	@ (8014538 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014398:	4013      	ands	r3, r2
 801439a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801439c:	4b64      	ldr	r3, [pc, #400]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801439e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80143a0:	4b63      	ldr	r3, [pc, #396]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143a2:	2180      	movs	r1, #128	@ 0x80
 80143a4:	0309      	lsls	r1, r1, #12
 80143a6:	430a      	orrs	r2, r1
 80143a8:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80143aa:	4b61      	ldr	r3, [pc, #388]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80143ae:	4b60      	ldr	r3, [pc, #384]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143b0:	4962      	ldr	r1, [pc, #392]	@ (801453c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80143b2:	400a      	ands	r2, r1
 80143b4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80143b6:	4b5e      	ldr	r3, [pc, #376]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143b8:	68fa      	ldr	r2, [r7, #12]
 80143ba:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80143bc:	68fa      	ldr	r2, [r7, #12]
 80143be:	2380      	movs	r3, #128	@ 0x80
 80143c0:	005b      	lsls	r3, r3, #1
 80143c2:	4013      	ands	r3, r2
 80143c4:	d014      	beq.n	80143f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80143c6:	f7f9 f915 	bl	800d5f4 <HAL_GetTick>
 80143ca:	0003      	movs	r3, r0
 80143cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80143ce:	e009      	b.n	80143e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80143d0:	f7f9 f910 	bl	800d5f4 <HAL_GetTick>
 80143d4:	0002      	movs	r2, r0
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	1ad3      	subs	r3, r2, r3
 80143da:	4a59      	ldr	r2, [pc, #356]	@ (8014540 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80143dc:	4293      	cmp	r3, r2
 80143de:	d901      	bls.n	80143e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80143e0:	2303      	movs	r3, #3
 80143e2:	e0a0      	b.n	8014526 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80143e4:	4b52      	ldr	r3, [pc, #328]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80143e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80143e8:	2380      	movs	r3, #128	@ 0x80
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	4013      	ands	r3, r2
 80143ee:	d0ef      	beq.n	80143d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2220      	movs	r2, #32
 80143f6:	4013      	ands	r3, r2
 80143f8:	d01f      	beq.n	801443a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	685a      	ldr	r2, [r3, #4]
 80143fe:	23c0      	movs	r3, #192	@ 0xc0
 8014400:	029b      	lsls	r3, r3, #10
 8014402:	401a      	ands	r2, r3
 8014404:	23c0      	movs	r3, #192	@ 0xc0
 8014406:	029b      	lsls	r3, r3, #10
 8014408:	429a      	cmp	r2, r3
 801440a:	d10c      	bne.n	8014426 <HAL_RCCEx_PeriphCLKConfig+0x182>
 801440c:	4b48      	ldr	r3, [pc, #288]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	4a4c      	ldr	r2, [pc, #304]	@ (8014544 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8014412:	4013      	ands	r3, r2
 8014414:	0019      	movs	r1, r3
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	685a      	ldr	r2, [r3, #4]
 801441a:	23c0      	movs	r3, #192	@ 0xc0
 801441c:	039b      	lsls	r3, r3, #14
 801441e:	401a      	ands	r2, r3
 8014420:	4b43      	ldr	r3, [pc, #268]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014422:	430a      	orrs	r2, r1
 8014424:	601a      	str	r2, [r3, #0]
 8014426:	4b42      	ldr	r3, [pc, #264]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014428:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	685a      	ldr	r2, [r3, #4]
 801442e:	23c0      	movs	r3, #192	@ 0xc0
 8014430:	029b      	lsls	r3, r3, #10
 8014432:	401a      	ands	r2, r3
 8014434:	4b3e      	ldr	r3, [pc, #248]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014436:	430a      	orrs	r2, r1
 8014438:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801443a:	2317      	movs	r3, #23
 801443c:	18fb      	adds	r3, r7, r3
 801443e:	781b      	ldrb	r3, [r3, #0]
 8014440:	2b01      	cmp	r3, #1
 8014442:	d105      	bne.n	8014450 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014444:	4b3a      	ldr	r3, [pc, #232]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014448:	4b39      	ldr	r3, [pc, #228]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801444a:	493f      	ldr	r1, [pc, #252]	@ (8014548 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 801444c:	400a      	ands	r2, r1
 801444e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2201      	movs	r2, #1
 8014456:	4013      	ands	r3, r2
 8014458:	d009      	beq.n	801446e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801445a:	4b35      	ldr	r3, [pc, #212]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801445c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801445e:	2203      	movs	r2, #3
 8014460:	4393      	bics	r3, r2
 8014462:	0019      	movs	r1, r3
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	689a      	ldr	r2, [r3, #8]
 8014468:	4b31      	ldr	r3, [pc, #196]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801446a:	430a      	orrs	r2, r1
 801446c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	2202      	movs	r2, #2
 8014474:	4013      	ands	r3, r2
 8014476:	d009      	beq.n	801448c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014478:	4b2d      	ldr	r3, [pc, #180]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801447a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801447c:	220c      	movs	r2, #12
 801447e:	4393      	bics	r3, r2
 8014480:	0019      	movs	r1, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	68da      	ldr	r2, [r3, #12]
 8014486:	4b2a      	ldr	r3, [pc, #168]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014488:	430a      	orrs	r2, r1
 801448a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	2204      	movs	r2, #4
 8014492:	4013      	ands	r3, r2
 8014494:	d009      	beq.n	80144aa <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014496:	4b26      	ldr	r3, [pc, #152]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801449a:	4a2c      	ldr	r2, [pc, #176]	@ (801454c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 801449c:	4013      	ands	r3, r2
 801449e:	0019      	movs	r1, r3
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	691a      	ldr	r2, [r3, #16]
 80144a4:	4b22      	ldr	r3, [pc, #136]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144a6:	430a      	orrs	r2, r1
 80144a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2208      	movs	r2, #8
 80144b0:	4013      	ands	r3, r2
 80144b2:	d009      	beq.n	80144c8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80144b4:	4b1e      	ldr	r3, [pc, #120]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144b8:	4a25      	ldr	r2, [pc, #148]	@ (8014550 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80144ba:	4013      	ands	r3, r2
 80144bc:	0019      	movs	r1, r3
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	695a      	ldr	r2, [r3, #20]
 80144c2:	4b1b      	ldr	r3, [pc, #108]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144c4:	430a      	orrs	r2, r1
 80144c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681a      	ldr	r2, [r3, #0]
 80144cc:	2380      	movs	r3, #128	@ 0x80
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	4013      	ands	r3, r2
 80144d2:	d009      	beq.n	80144e8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80144d4:	4b16      	ldr	r3, [pc, #88]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144d8:	4a17      	ldr	r2, [pc, #92]	@ (8014538 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80144da:	4013      	ands	r3, r2
 80144dc:	0019      	movs	r1, r3
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	699a      	ldr	r2, [r3, #24]
 80144e2:	4b13      	ldr	r3, [pc, #76]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144e4:	430a      	orrs	r2, r1
 80144e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2240      	movs	r2, #64	@ 0x40
 80144ee:	4013      	ands	r3, r2
 80144f0:	d009      	beq.n	8014506 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80144f2:	4b0f      	ldr	r3, [pc, #60]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80144f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144f6:	4a17      	ldr	r2, [pc, #92]	@ (8014554 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80144f8:	4013      	ands	r3, r2
 80144fa:	0019      	movs	r1, r3
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6a1a      	ldr	r2, [r3, #32]
 8014500:	4b0b      	ldr	r3, [pc, #44]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014502:	430a      	orrs	r2, r1
 8014504:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	2280      	movs	r2, #128	@ 0x80
 801450c:	4013      	ands	r3, r2
 801450e:	d009      	beq.n	8014524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8014510:	4b07      	ldr	r3, [pc, #28]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014514:	4a10      	ldr	r2, [pc, #64]	@ (8014558 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8014516:	4013      	ands	r3, r2
 8014518:	0019      	movs	r1, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	69da      	ldr	r2, [r3, #28]
 801451e:	4b04      	ldr	r3, [pc, #16]	@ (8014530 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014520:	430a      	orrs	r2, r1
 8014522:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8014524:	2300      	movs	r3, #0
}
 8014526:	0018      	movs	r0, r3
 8014528:	46bd      	mov	sp, r7
 801452a:	b006      	add	sp, #24
 801452c:	bd80      	pop	{r7, pc}
 801452e:	46c0      	nop			@ (mov r8, r8)
 8014530:	40021000 	.word	0x40021000
 8014534:	40007000 	.word	0x40007000
 8014538:	fffcffff 	.word	0xfffcffff
 801453c:	fff7ffff 	.word	0xfff7ffff
 8014540:	00001388 	.word	0x00001388
 8014544:	ffcfffff 	.word	0xffcfffff
 8014548:	efffffff 	.word	0xefffffff
 801454c:	fffff3ff 	.word	0xfffff3ff
 8014550:	ffffcfff 	.word	0xffffcfff
 8014554:	fbffffff 	.word	0xfbffffff
 8014558:	fff3ffff 	.word	0xfff3ffff

0801455c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 801455c:	b5b0      	push	{r4, r5, r7, lr}
 801455e:	b084      	sub	sp, #16
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014564:	230f      	movs	r3, #15
 8014566:	18fb      	adds	r3, r7, r3
 8014568:	2201      	movs	r2, #1
 801456a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8014572:	2301      	movs	r3, #1
 8014574:	e088      	b.n	8014688 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2221      	movs	r2, #33	@ 0x21
 801457a:	5c9b      	ldrb	r3, [r3, r2]
 801457c:	b2db      	uxtb	r3, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	d107      	bne.n	8014592 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	2220      	movs	r2, #32
 8014586:	2100      	movs	r1, #0
 8014588:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	0018      	movs	r0, r3
 801458e:	f7f3 fef1 	bl	8008374 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2221      	movs	r2, #33	@ 0x21
 8014596:	2102      	movs	r1, #2
 8014598:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	68db      	ldr	r3, [r3, #12]
 80145a0:	2210      	movs	r2, #16
 80145a2:	4013      	ands	r3, r2
 80145a4:	2b10      	cmp	r3, #16
 80145a6:	d05f      	beq.n	8014668 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	22ca      	movs	r2, #202	@ 0xca
 80145ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	2253      	movs	r2, #83	@ 0x53
 80145b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80145b8:	250f      	movs	r5, #15
 80145ba:	197c      	adds	r4, r7, r5
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	0018      	movs	r0, r3
 80145c0:	f000 fa7c 	bl	8014abc <RTC_EnterInitMode>
 80145c4:	0003      	movs	r3, r0
 80145c6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80145c8:	0028      	movs	r0, r5
 80145ca:	183b      	adds	r3, r7, r0
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d12c      	bne.n	801462c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	689a      	ldr	r2, [r3, #8]
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	492c      	ldr	r1, [pc, #176]	@ (8014690 <HAL_RTC_Init+0x134>)
 80145de:	400a      	ands	r2, r1
 80145e0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	6899      	ldr	r1, [r3, #8]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	685a      	ldr	r2, [r3, #4]
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	691b      	ldr	r3, [r3, #16]
 80145f0:	431a      	orrs	r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	699b      	ldr	r3, [r3, #24]
 80145f6:	431a      	orrs	r2, r3
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	430a      	orrs	r2, r1
 80145fe:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	68d2      	ldr	r2, [r2, #12]
 8014608:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	6919      	ldr	r1, [r3, #16]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	041a      	lsls	r2, r3, #16
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	430a      	orrs	r2, r1
 801461c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 801461e:	183c      	adds	r4, r7, r0
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	0018      	movs	r0, r3
 8014624:	f000 fa8e 	bl	8014b44 <RTC_ExitInitMode>
 8014628:	0003      	movs	r3, r0
 801462a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 801462c:	230f      	movs	r3, #15
 801462e:	18fb      	adds	r3, r7, r3
 8014630:	781b      	ldrb	r3, [r3, #0]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d113      	bne.n	801465e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	2103      	movs	r1, #3
 8014642:	438a      	bics	r2, r1
 8014644:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	69da      	ldr	r2, [r3, #28]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	695b      	ldr	r3, [r3, #20]
 8014654:	431a      	orrs	r2, r3
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	430a      	orrs	r2, r1
 801465c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	22ff      	movs	r2, #255	@ 0xff
 8014664:	625a      	str	r2, [r3, #36]	@ 0x24
 8014666:	e003      	b.n	8014670 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8014668:	230f      	movs	r3, #15
 801466a:	18fb      	adds	r3, r7, r3
 801466c:	2200      	movs	r2, #0
 801466e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8014670:	230f      	movs	r3, #15
 8014672:	18fb      	adds	r3, r7, r3
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d103      	bne.n	8014682 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2221      	movs	r2, #33	@ 0x21
 801467e:	2101      	movs	r1, #1
 8014680:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8014682:	230f      	movs	r3, #15
 8014684:	18fb      	adds	r3, r7, r3
 8014686:	781b      	ldrb	r3, [r3, #0]
}
 8014688:	0018      	movs	r0, r3
 801468a:	46bd      	mov	sp, r7
 801468c:	b004      	add	sp, #16
 801468e:	bdb0      	pop	{r4, r5, r7, pc}
 8014690:	ff8fffbf 	.word	0xff8fffbf

08014694 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014694:	b5b0      	push	{r4, r5, r7, lr}
 8014696:	b086      	sub	sp, #24
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80146a0:	2300      	movs	r3, #0
 80146a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	2220      	movs	r2, #32
 80146a8:	5c9b      	ldrb	r3, [r3, r2]
 80146aa:	2b01      	cmp	r3, #1
 80146ac:	d101      	bne.n	80146b2 <HAL_RTC_SetTime+0x1e>
 80146ae:	2302      	movs	r3, #2
 80146b0:	e092      	b.n	80147d8 <HAL_RTC_SetTime+0x144>
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	2220      	movs	r2, #32
 80146b6:	2101      	movs	r1, #1
 80146b8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	2221      	movs	r2, #33	@ 0x21
 80146be:	2102      	movs	r1, #2
 80146c0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d125      	bne.n	8014714 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	689b      	ldr	r3, [r3, #8]
 80146ce:	2240      	movs	r2, #64	@ 0x40
 80146d0:	4013      	ands	r3, r2
 80146d2:	d102      	bne.n	80146da <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	2200      	movs	r2, #0
 80146d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80146da:	68bb      	ldr	r3, [r7, #8]
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	0018      	movs	r0, r3
 80146e0:	f000 fa5a 	bl	8014b98 <RTC_ByteToBcd2>
 80146e4:	0003      	movs	r3, r0
 80146e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	785b      	ldrb	r3, [r3, #1]
 80146ec:	0018      	movs	r0, r3
 80146ee:	f000 fa53 	bl	8014b98 <RTC_ByteToBcd2>
 80146f2:	0003      	movs	r3, r0
 80146f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80146f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	789b      	ldrb	r3, [r3, #2]
 80146fc:	0018      	movs	r0, r3
 80146fe:	f000 fa4b 	bl	8014b98 <RTC_ByteToBcd2>
 8014702:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014704:	0022      	movs	r2, r4
 8014706:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	78db      	ldrb	r3, [r3, #3]
 801470c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 801470e:	4313      	orrs	r3, r2
 8014710:	617b      	str	r3, [r7, #20]
 8014712:	e017      	b.n	8014744 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	689b      	ldr	r3, [r3, #8]
 801471a:	2240      	movs	r2, #64	@ 0x40
 801471c:	4013      	ands	r3, r2
 801471e:	d102      	bne.n	8014726 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	2200      	movs	r2, #0
 8014724:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	781b      	ldrb	r3, [r3, #0]
 801472a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	785b      	ldrb	r3, [r3, #1]
 8014730:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014732:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8014734:	68ba      	ldr	r2, [r7, #8]
 8014736:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8014738:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	78db      	ldrb	r3, [r3, #3]
 801473e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014740:	4313      	orrs	r3, r2
 8014742:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	22ca      	movs	r2, #202	@ 0xca
 801474a:	625a      	str	r2, [r3, #36]	@ 0x24
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	2253      	movs	r2, #83	@ 0x53
 8014752:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014754:	2513      	movs	r5, #19
 8014756:	197c      	adds	r4, r7, r5
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	0018      	movs	r0, r3
 801475c:	f000 f9ae 	bl	8014abc <RTC_EnterInitMode>
 8014760:	0003      	movs	r3, r0
 8014762:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014764:	0028      	movs	r0, r5
 8014766:	183b      	adds	r3, r7, r0
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d120      	bne.n	80147b0 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	697a      	ldr	r2, [r7, #20]
 8014774:	491a      	ldr	r1, [pc, #104]	@ (80147e0 <HAL_RTC_SetTime+0x14c>)
 8014776:	400a      	ands	r2, r1
 8014778:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	689a      	ldr	r2, [r3, #8]
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	4917      	ldr	r1, [pc, #92]	@ (80147e4 <HAL_RTC_SetTime+0x150>)
 8014786:	400a      	ands	r2, r1
 8014788:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	6899      	ldr	r1, [r3, #8]
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	68da      	ldr	r2, [r3, #12]
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	691b      	ldr	r3, [r3, #16]
 8014798:	431a      	orrs	r2, r3
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	430a      	orrs	r2, r1
 80147a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80147a2:	183c      	adds	r4, r7, r0
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	0018      	movs	r0, r3
 80147a8:	f000 f9cc 	bl	8014b44 <RTC_ExitInitMode>
 80147ac:	0003      	movs	r3, r0
 80147ae:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 80147b0:	2313      	movs	r3, #19
 80147b2:	18fb      	adds	r3, r7, r3
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d103      	bne.n	80147c2 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2221      	movs	r2, #33	@ 0x21
 80147be:	2101      	movs	r1, #1
 80147c0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	22ff      	movs	r2, #255	@ 0xff
 80147c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2220      	movs	r2, #32
 80147ce:	2100      	movs	r1, #0
 80147d0:	5499      	strb	r1, [r3, r2]

  return status;
 80147d2:	2313      	movs	r3, #19
 80147d4:	18fb      	adds	r3, r7, r3
 80147d6:	781b      	ldrb	r3, [r3, #0]
}
 80147d8:	0018      	movs	r0, r3
 80147da:	46bd      	mov	sp, r7
 80147dc:	b006      	add	sp, #24
 80147de:	bdb0      	pop	{r4, r5, r7, pc}
 80147e0:	007f7f7f 	.word	0x007f7f7f
 80147e4:	fffbffff 	.word	0xfffbffff

080147e8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80147e8:	b580      	push	{r7, lr}
 80147ea:	b086      	sub	sp, #24
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	60b9      	str	r1, [r7, #8]
 80147f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80147f4:	2300      	movs	r3, #0
 80147f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	691b      	ldr	r3, [r3, #16]
 8014808:	045b      	lsls	r3, r3, #17
 801480a:	0c5a      	lsrs	r2, r3, #17
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	4a22      	ldr	r2, [pc, #136]	@ (80148a0 <HAL_RTC_GetTime+0xb8>)
 8014818:	4013      	ands	r3, r2
 801481a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	0c1b      	lsrs	r3, r3, #16
 8014820:	b2db      	uxtb	r3, r3
 8014822:	223f      	movs	r2, #63	@ 0x3f
 8014824:	4013      	ands	r3, r2
 8014826:	b2da      	uxtb	r2, r3
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	0a1b      	lsrs	r3, r3, #8
 8014830:	b2db      	uxtb	r3, r3
 8014832:	227f      	movs	r2, #127	@ 0x7f
 8014834:	4013      	ands	r3, r2
 8014836:	b2da      	uxtb	r2, r3
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	b2db      	uxtb	r3, r3
 8014840:	227f      	movs	r2, #127	@ 0x7f
 8014842:	4013      	ands	r3, r2
 8014844:	b2da      	uxtb	r2, r3
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	0d9b      	lsrs	r3, r3, #22
 801484e:	b2db      	uxtb	r3, r3
 8014850:	2201      	movs	r2, #1
 8014852:	4013      	ands	r3, r2
 8014854:	b2da      	uxtb	r2, r3
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2b00      	cmp	r3, #0
 801485e:	d11a      	bne.n	8014896 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	781b      	ldrb	r3, [r3, #0]
 8014864:	0018      	movs	r0, r3
 8014866:	f000 f9b8 	bl	8014bda <RTC_Bcd2ToByte>
 801486a:	0003      	movs	r3, r0
 801486c:	001a      	movs	r2, r3
 801486e:	68bb      	ldr	r3, [r7, #8]
 8014870:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	785b      	ldrb	r3, [r3, #1]
 8014876:	0018      	movs	r0, r3
 8014878:	f000 f9af 	bl	8014bda <RTC_Bcd2ToByte>
 801487c:	0003      	movs	r3, r0
 801487e:	001a      	movs	r2, r3
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	789b      	ldrb	r3, [r3, #2]
 8014888:	0018      	movs	r0, r3
 801488a:	f000 f9a6 	bl	8014bda <RTC_Bcd2ToByte>
 801488e:	0003      	movs	r3, r0
 8014890:	001a      	movs	r2, r3
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8014896:	2300      	movs	r3, #0
}
 8014898:	0018      	movs	r0, r3
 801489a:	46bd      	mov	sp, r7
 801489c:	b006      	add	sp, #24
 801489e:	bd80      	pop	{r7, pc}
 80148a0:	007f7f7f 	.word	0x007f7f7f

080148a4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80148a4:	b5b0      	push	{r4, r5, r7, lr}
 80148a6:	b086      	sub	sp, #24
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	60f8      	str	r0, [r7, #12]
 80148ac:	60b9      	str	r1, [r7, #8]
 80148ae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80148b0:	2300      	movs	r3, #0
 80148b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2220      	movs	r2, #32
 80148b8:	5c9b      	ldrb	r3, [r3, r2]
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d101      	bne.n	80148c2 <HAL_RTC_SetDate+0x1e>
 80148be:	2302      	movs	r3, #2
 80148c0:	e07e      	b.n	80149c0 <HAL_RTC_SetDate+0x11c>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	2220      	movs	r2, #32
 80148c6:	2101      	movs	r1, #1
 80148c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2221      	movs	r2, #33	@ 0x21
 80148ce:	2102      	movs	r1, #2
 80148d0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d10e      	bne.n	80148f6 <HAL_RTC_SetDate+0x52>
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	785b      	ldrb	r3, [r3, #1]
 80148dc:	001a      	movs	r2, r3
 80148de:	2310      	movs	r3, #16
 80148e0:	4013      	ands	r3, r2
 80148e2:	d008      	beq.n	80148f6 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	785b      	ldrb	r3, [r3, #1]
 80148e8:	2210      	movs	r2, #16
 80148ea:	4393      	bics	r3, r2
 80148ec:	b2db      	uxtb	r3, r3
 80148ee:	330a      	adds	r3, #10
 80148f0:	b2da      	uxtb	r2, r3
 80148f2:	68bb      	ldr	r3, [r7, #8]
 80148f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d11c      	bne.n	8014936 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	78db      	ldrb	r3, [r3, #3]
 8014900:	0018      	movs	r0, r3
 8014902:	f000 f949 	bl	8014b98 <RTC_ByteToBcd2>
 8014906:	0003      	movs	r3, r0
 8014908:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	785b      	ldrb	r3, [r3, #1]
 801490e:	0018      	movs	r0, r3
 8014910:	f000 f942 	bl	8014b98 <RTC_ByteToBcd2>
 8014914:	0003      	movs	r3, r0
 8014916:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014918:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	789b      	ldrb	r3, [r3, #2]
 801491e:	0018      	movs	r0, r3
 8014920:	f000 f93a 	bl	8014b98 <RTC_ByteToBcd2>
 8014924:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8014926:	0022      	movs	r2, r4
 8014928:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	781b      	ldrb	r3, [r3, #0]
 801492e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014930:	4313      	orrs	r3, r2
 8014932:	617b      	str	r3, [r7, #20]
 8014934:	e00e      	b.n	8014954 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014936:	68bb      	ldr	r3, [r7, #8]
 8014938:	78db      	ldrb	r3, [r3, #3]
 801493a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	785b      	ldrb	r3, [r3, #1]
 8014940:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014942:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8014944:	68ba      	ldr	r2, [r7, #8]
 8014946:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8014948:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8014950:	4313      	orrs	r3, r2
 8014952:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	22ca      	movs	r2, #202	@ 0xca
 801495a:	625a      	str	r2, [r3, #36]	@ 0x24
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	2253      	movs	r2, #83	@ 0x53
 8014962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014964:	2513      	movs	r5, #19
 8014966:	197c      	adds	r4, r7, r5
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	0018      	movs	r0, r3
 801496c:	f000 f8a6 	bl	8014abc <RTC_EnterInitMode>
 8014970:	0003      	movs	r3, r0
 8014972:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014974:	0028      	movs	r0, r5
 8014976:	183b      	adds	r3, r7, r0
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d10c      	bne.n	8014998 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	697a      	ldr	r2, [r7, #20]
 8014984:	4910      	ldr	r1, [pc, #64]	@ (80149c8 <HAL_RTC_SetDate+0x124>)
 8014986:	400a      	ands	r2, r1
 8014988:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801498a:	183c      	adds	r4, r7, r0
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	0018      	movs	r0, r3
 8014990:	f000 f8d8 	bl	8014b44 <RTC_ExitInitMode>
 8014994:	0003      	movs	r3, r0
 8014996:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014998:	2313      	movs	r3, #19
 801499a:	18fb      	adds	r3, r7, r3
 801499c:	781b      	ldrb	r3, [r3, #0]
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d103      	bne.n	80149aa <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2221      	movs	r2, #33	@ 0x21
 80149a6:	2101      	movs	r1, #1
 80149a8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	22ff      	movs	r2, #255	@ 0xff
 80149b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	2220      	movs	r2, #32
 80149b6:	2100      	movs	r1, #0
 80149b8:	5499      	strb	r1, [r3, r2]

  return status;
 80149ba:	2313      	movs	r3, #19
 80149bc:	18fb      	adds	r3, r7, r3
 80149be:	781b      	ldrb	r3, [r3, #0]
}
 80149c0:	0018      	movs	r0, r3
 80149c2:	46bd      	mov	sp, r7
 80149c4:	b006      	add	sp, #24
 80149c6:	bdb0      	pop	{r4, r5, r7, pc}
 80149c8:	00ffff3f 	.word	0x00ffff3f

080149cc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b086      	sub	sp, #24
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	60f8      	str	r0, [r7, #12]
 80149d4:	60b9      	str	r1, [r7, #8]
 80149d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80149d8:	2300      	movs	r3, #0
 80149da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	4a21      	ldr	r2, [pc, #132]	@ (8014a68 <HAL_RTC_GetDate+0x9c>)
 80149e4:	4013      	ands	r3, r2
 80149e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	0c1b      	lsrs	r3, r3, #16
 80149ec:	b2da      	uxtb	r2, r3
 80149ee:	68bb      	ldr	r3, [r7, #8]
 80149f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80149f2:	697b      	ldr	r3, [r7, #20]
 80149f4:	0a1b      	lsrs	r3, r3, #8
 80149f6:	b2db      	uxtb	r3, r3
 80149f8:	221f      	movs	r2, #31
 80149fa:	4013      	ands	r3, r2
 80149fc:	b2da      	uxtb	r2, r3
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	223f      	movs	r2, #63	@ 0x3f
 8014a08:	4013      	ands	r3, r2
 8014a0a:	b2da      	uxtb	r2, r3
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	0b5b      	lsrs	r3, r3, #13
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	2207      	movs	r2, #7
 8014a18:	4013      	ands	r3, r2
 8014a1a:	b2da      	uxtb	r2, r3
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d11a      	bne.n	8014a5c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	78db      	ldrb	r3, [r3, #3]
 8014a2a:	0018      	movs	r0, r3
 8014a2c:	f000 f8d5 	bl	8014bda <RTC_Bcd2ToByte>
 8014a30:	0003      	movs	r3, r0
 8014a32:	001a      	movs	r2, r3
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	785b      	ldrb	r3, [r3, #1]
 8014a3c:	0018      	movs	r0, r3
 8014a3e:	f000 f8cc 	bl	8014bda <RTC_Bcd2ToByte>
 8014a42:	0003      	movs	r3, r0
 8014a44:	001a      	movs	r2, r3
 8014a46:	68bb      	ldr	r3, [r7, #8]
 8014a48:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	789b      	ldrb	r3, [r3, #2]
 8014a4e:	0018      	movs	r0, r3
 8014a50:	f000 f8c3 	bl	8014bda <RTC_Bcd2ToByte>
 8014a54:	0003      	movs	r3, r0
 8014a56:	001a      	movs	r2, r3
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8014a5c:	2300      	movs	r3, #0
}
 8014a5e:	0018      	movs	r0, r3
 8014a60:	46bd      	mov	sp, r7
 8014a62:	b006      	add	sp, #24
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	46c0      	nop			@ (mov r8, r8)
 8014a68:	00ffff3f 	.word	0x00ffff3f

08014a6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014a74:	2300      	movs	r3, #0
 8014a76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8014ab8 <HAL_RTC_WaitForSynchro+0x4c>)
 8014a7e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014a80:	f7f8 fdb8 	bl	800d5f4 <HAL_GetTick>
 8014a84:	0003      	movs	r3, r0
 8014a86:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014a88:	e00a      	b.n	8014aa0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014a8a:	f7f8 fdb3 	bl	800d5f4 <HAL_GetTick>
 8014a8e:	0002      	movs	r2, r0
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	1ad2      	subs	r2, r2, r3
 8014a94:	23fa      	movs	r3, #250	@ 0xfa
 8014a96:	009b      	lsls	r3, r3, #2
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d901      	bls.n	8014aa0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8014a9c:	2303      	movs	r3, #3
 8014a9e:	e006      	b.n	8014aae <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	68db      	ldr	r3, [r3, #12]
 8014aa6:	2220      	movs	r2, #32
 8014aa8:	4013      	ands	r3, r2
 8014aaa:	d0ee      	beq.n	8014a8a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8014aac:	2300      	movs	r3, #0
}
 8014aae:	0018      	movs	r0, r3
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	b004      	add	sp, #16
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	46c0      	nop			@ (mov r8, r8)
 8014ab8:	0001ff5f 	.word	0x0001ff5f

08014abc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b084      	sub	sp, #16
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8014ac8:	230f      	movs	r3, #15
 8014aca:	18fb      	adds	r3, r7, r3
 8014acc:	2200      	movs	r2, #0
 8014ace:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	68db      	ldr	r3, [r3, #12]
 8014ad6:	2240      	movs	r2, #64	@ 0x40
 8014ad8:	4013      	ands	r3, r2
 8014ada:	d12c      	bne.n	8014b36 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	68da      	ldr	r2, [r3, #12]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	2180      	movs	r1, #128	@ 0x80
 8014ae8:	430a      	orrs	r2, r1
 8014aea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8014aec:	f7f8 fd82 	bl	800d5f4 <HAL_GetTick>
 8014af0:	0003      	movs	r3, r0
 8014af2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014af4:	e014      	b.n	8014b20 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014af6:	f7f8 fd7d 	bl	800d5f4 <HAL_GetTick>
 8014afa:	0002      	movs	r2, r0
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	1ad2      	subs	r2, r2, r3
 8014b00:	200f      	movs	r0, #15
 8014b02:	183b      	adds	r3, r7, r0
 8014b04:	1839      	adds	r1, r7, r0
 8014b06:	7809      	ldrb	r1, [r1, #0]
 8014b08:	7019      	strb	r1, [r3, #0]
 8014b0a:	23fa      	movs	r3, #250	@ 0xfa
 8014b0c:	009b      	lsls	r3, r3, #2
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d906      	bls.n	8014b20 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	2221      	movs	r2, #33	@ 0x21
 8014b16:	2104      	movs	r1, #4
 8014b18:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8014b1a:	183b      	adds	r3, r7, r0
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	68db      	ldr	r3, [r3, #12]
 8014b26:	2240      	movs	r2, #64	@ 0x40
 8014b28:	4013      	ands	r3, r2
 8014b2a:	d104      	bne.n	8014b36 <RTC_EnterInitMode+0x7a>
 8014b2c:	230f      	movs	r3, #15
 8014b2e:	18fb      	adds	r3, r7, r3
 8014b30:	781b      	ldrb	r3, [r3, #0]
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d1df      	bne.n	8014af6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8014b36:	230f      	movs	r3, #15
 8014b38:	18fb      	adds	r3, r7, r3
 8014b3a:	781b      	ldrb	r3, [r3, #0]
}
 8014b3c:	0018      	movs	r0, r3
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	b004      	add	sp, #16
 8014b42:	bd80      	pop	{r7, pc}

08014b44 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8014b44:	b590      	push	{r4, r7, lr}
 8014b46:	b085      	sub	sp, #20
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014b4c:	240f      	movs	r4, #15
 8014b4e:	193b      	adds	r3, r7, r4
 8014b50:	2200      	movs	r2, #0
 8014b52:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	68da      	ldr	r2, [r3, #12]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	2180      	movs	r1, #128	@ 0x80
 8014b60:	438a      	bics	r2, r1
 8014b62:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	689b      	ldr	r3, [r3, #8]
 8014b6a:	2220      	movs	r2, #32
 8014b6c:	4013      	ands	r3, r2
 8014b6e:	d10c      	bne.n	8014b8a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	0018      	movs	r0, r3
 8014b74:	f7ff ff7a 	bl	8014a6c <HAL_RTC_WaitForSynchro>
 8014b78:	1e03      	subs	r3, r0, #0
 8014b7a:	d006      	beq.n	8014b8a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2221      	movs	r2, #33	@ 0x21
 8014b80:	2104      	movs	r1, #4
 8014b82:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8014b84:	193b      	adds	r3, r7, r4
 8014b86:	2201      	movs	r2, #1
 8014b88:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8014b8a:	230f      	movs	r3, #15
 8014b8c:	18fb      	adds	r3, r7, r3
 8014b8e:	781b      	ldrb	r3, [r3, #0]
}
 8014b90:	0018      	movs	r0, r3
 8014b92:	46bd      	mov	sp, r7
 8014b94:	b005      	add	sp, #20
 8014b96:	bd90      	pop	{r4, r7, pc}

08014b98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b084      	sub	sp, #16
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	0002      	movs	r2, r0
 8014ba0:	1dfb      	adds	r3, r7, #7
 8014ba2:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8014ba8:	e007      	b.n	8014bba <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	3301      	adds	r3, #1
 8014bae:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8014bb0:	1dfb      	adds	r3, r7, #7
 8014bb2:	1dfa      	adds	r2, r7, #7
 8014bb4:	7812      	ldrb	r2, [r2, #0]
 8014bb6:	3a0a      	subs	r2, #10
 8014bb8:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8014bba:	1dfb      	adds	r3, r7, #7
 8014bbc:	781b      	ldrb	r3, [r3, #0]
 8014bbe:	2b09      	cmp	r3, #9
 8014bc0:	d8f3      	bhi.n	8014baa <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	011b      	lsls	r3, r3, #4
 8014bc8:	b2da      	uxtb	r2, r3
 8014bca:	1dfb      	adds	r3, r7, #7
 8014bcc:	781b      	ldrb	r3, [r3, #0]
 8014bce:	4313      	orrs	r3, r2
 8014bd0:	b2db      	uxtb	r3, r3
}
 8014bd2:	0018      	movs	r0, r3
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	b004      	add	sp, #16
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b084      	sub	sp, #16
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	0002      	movs	r2, r0
 8014be2:	1dfb      	adds	r3, r7, #7
 8014be4:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8014be6:	2300      	movs	r3, #0
 8014be8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8014bea:	1dfb      	adds	r3, r7, #7
 8014bec:	781b      	ldrb	r3, [r3, #0]
 8014bee:	091b      	lsrs	r3, r3, #4
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	001a      	movs	r2, r3
 8014bf4:	0013      	movs	r3, r2
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	189b      	adds	r3, r3, r2
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	b2da      	uxtb	r2, r3
 8014c02:	1dfb      	adds	r3, r7, #7
 8014c04:	781b      	ldrb	r3, [r3, #0]
 8014c06:	210f      	movs	r1, #15
 8014c08:	400b      	ands	r3, r1
 8014c0a:	b2db      	uxtb	r3, r3
 8014c0c:	18d3      	adds	r3, r2, r3
 8014c0e:	b2db      	uxtb	r3, r3
}
 8014c10:	0018      	movs	r0, r3
 8014c12:	46bd      	mov	sp, r7
 8014c14:	b004      	add	sp, #16
 8014c16:	bd80      	pop	{r7, pc}

08014c18 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b086      	sub	sp, #24
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8014c24:	2300      	movs	r3, #0
 8014c26:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	2220      	movs	r2, #32
 8014c2c:	5c9b      	ldrb	r3, [r3, r2]
 8014c2e:	2b01      	cmp	r3, #1
 8014c30:	d101      	bne.n	8014c36 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8014c32:	2302      	movs	r3, #2
 8014c34:	e096      	b.n	8014d64 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2220      	movs	r2, #32
 8014c3a:	2101      	movs	r1, #1
 8014c3c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	2221      	movs	r2, #33	@ 0x21
 8014c42:	2102      	movs	r1, #2
 8014c44:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	22ca      	movs	r2, #202	@ 0xca
 8014c4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	2253      	movs	r2, #83	@ 0x53
 8014c54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	689a      	ldr	r2, [r3, #8]
 8014c5c:	2380      	movs	r3, #128	@ 0x80
 8014c5e:	00db      	lsls	r3, r3, #3
 8014c60:	4013      	ands	r3, r2
 8014c62:	d021      	beq.n	8014ca8 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8014c64:	f7f8 fcc6 	bl	800d5f4 <HAL_GetTick>
 8014c68:	0003      	movs	r3, r0
 8014c6a:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8014c6c:	e016      	b.n	8014c9c <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014c6e:	f7f8 fcc1 	bl	800d5f4 <HAL_GetTick>
 8014c72:	0002      	movs	r2, r0
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	1ad2      	subs	r2, r2, r3
 8014c78:	23fa      	movs	r3, #250	@ 0xfa
 8014c7a:	009b      	lsls	r3, r3, #2
 8014c7c:	429a      	cmp	r2, r3
 8014c7e:	d90d      	bls.n	8014c9c <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	22ff      	movs	r2, #255	@ 0xff
 8014c86:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2221      	movs	r2, #33	@ 0x21
 8014c8c:	2103      	movs	r1, #3
 8014c8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	2220      	movs	r2, #32
 8014c94:	2100      	movs	r1, #0
 8014c96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8014c98:	2303      	movs	r3, #3
 8014c9a:	e063      	b.n	8014d64 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	2204      	movs	r2, #4
 8014ca4:	4013      	ands	r3, r2
 8014ca6:	d1e2      	bne.n	8014c6e <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	689a      	ldr	r2, [r3, #8]
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	492e      	ldr	r1, [pc, #184]	@ (8014d6c <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8014cb4:	400a      	ands	r2, r1
 8014cb6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	68db      	ldr	r3, [r3, #12]
 8014cbe:	22ff      	movs	r2, #255	@ 0xff
 8014cc0:	401a      	ands	r2, r3
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	492a      	ldr	r1, [pc, #168]	@ (8014d70 <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8014cc8:	430a      	orrs	r2, r1
 8014cca:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8014ccc:	f7f8 fc92 	bl	800d5f4 <HAL_GetTick>
 8014cd0:	0003      	movs	r3, r0
 8014cd2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8014cd4:	e016      	b.n	8014d04 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8014cd6:	f7f8 fc8d 	bl	800d5f4 <HAL_GetTick>
 8014cda:	0002      	movs	r2, r0
 8014cdc:	697b      	ldr	r3, [r7, #20]
 8014cde:	1ad2      	subs	r2, r2, r3
 8014ce0:	23fa      	movs	r3, #250	@ 0xfa
 8014ce2:	009b      	lsls	r3, r3, #2
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d90d      	bls.n	8014d04 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	22ff      	movs	r2, #255	@ 0xff
 8014cee:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2221      	movs	r2, #33	@ 0x21
 8014cf4:	2103      	movs	r1, #3
 8014cf6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	2220      	movs	r2, #32
 8014cfc:	2100      	movs	r1, #0
 8014cfe:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8014d00:	2303      	movs	r3, #3
 8014d02:	e02f      	b.n	8014d64 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	68db      	ldr	r3, [r3, #12]
 8014d0a:	2204      	movs	r2, #4
 8014d0c:	4013      	ands	r3, r2
 8014d0e:	d0e2      	beq.n	8014cd6 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	689a      	ldr	r2, [r3, #8]
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	2107      	movs	r1, #7
 8014d1c:	438a      	bics	r2, r1
 8014d1e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	6899      	ldr	r1, [r3, #8]
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	687a      	ldr	r2, [r7, #4]
 8014d2c:	430a      	orrs	r2, r1
 8014d2e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	68ba      	ldr	r2, [r7, #8]
 8014d36:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	689a      	ldr	r2, [r3, #8]
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2180      	movs	r1, #128	@ 0x80
 8014d44:	00c9      	lsls	r1, r1, #3
 8014d46:	430a      	orrs	r2, r1
 8014d48:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	22ff      	movs	r2, #255	@ 0xff
 8014d50:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2221      	movs	r2, #33	@ 0x21
 8014d56:	2101      	movs	r1, #1
 8014d58:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2220      	movs	r2, #32
 8014d5e:	2100      	movs	r1, #0
 8014d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014d62:	2300      	movs	r3, #0
}
 8014d64:	0018      	movs	r0, r3
 8014d66:	46bd      	mov	sp, r7
 8014d68:	b006      	add	sp, #24
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	fffffbff 	.word	0xfffffbff
 8014d70:	fffffb7f 	.word	0xfffffb7f

08014d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d101      	bne.n	8014d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014d82:	2301      	movs	r3, #1
 8014d84:	e032      	b.n	8014dec <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	2239      	movs	r2, #57	@ 0x39
 8014d8a:	5c9b      	ldrb	r3, [r3, r2]
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d107      	bne.n	8014da2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2238      	movs	r2, #56	@ 0x38
 8014d96:	2100      	movs	r1, #0
 8014d98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	0018      	movs	r0, r3
 8014d9e:	f7f7 fde3 	bl	800c968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2239      	movs	r2, #57	@ 0x39
 8014da6:	2102      	movs	r1, #2
 8014da8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681a      	ldr	r2, [r3, #0]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	3304      	adds	r3, #4
 8014db2:	0019      	movs	r1, r3
 8014db4:	0010      	movs	r0, r2
 8014db6:	f000 fa1d 	bl	80151f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	223e      	movs	r2, #62	@ 0x3e
 8014dbe:	2101      	movs	r1, #1
 8014dc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	223a      	movs	r2, #58	@ 0x3a
 8014dc6:	2101      	movs	r1, #1
 8014dc8:	5499      	strb	r1, [r3, r2]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	223b      	movs	r2, #59	@ 0x3b
 8014dce:	2101      	movs	r1, #1
 8014dd0:	5499      	strb	r1, [r3, r2]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	223c      	movs	r2, #60	@ 0x3c
 8014dd6:	2101      	movs	r1, #1
 8014dd8:	5499      	strb	r1, [r3, r2]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	223d      	movs	r2, #61	@ 0x3d
 8014dde:	2101      	movs	r1, #1
 8014de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2239      	movs	r2, #57	@ 0x39
 8014de6:	2101      	movs	r1, #1
 8014de8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014dea:	2300      	movs	r3, #0
}
 8014dec:	0018      	movs	r0, r3
 8014dee:	46bd      	mov	sp, r7
 8014df0:	b002      	add	sp, #8
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2239      	movs	r2, #57	@ 0x39
 8014e00:	5c9b      	ldrb	r3, [r3, r2]
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d001      	beq.n	8014e0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8014e08:	2301      	movs	r3, #1
 8014e0a:	e033      	b.n	8014e74 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2239      	movs	r2, #57	@ 0x39
 8014e10:	2102      	movs	r1, #2
 8014e12:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	681a      	ldr	r2, [r3, #0]
 8014e18:	2380      	movs	r3, #128	@ 0x80
 8014e1a:	05db      	lsls	r3, r3, #23
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d00e      	beq.n	8014e3e <HAL_TIM_Base_Start+0x4a>
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	4a15      	ldr	r2, [pc, #84]	@ (8014e7c <HAL_TIM_Base_Start+0x88>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d009      	beq.n	8014e3e <HAL_TIM_Base_Start+0x4a>
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	4a14      	ldr	r2, [pc, #80]	@ (8014e80 <HAL_TIM_Base_Start+0x8c>)
 8014e30:	4293      	cmp	r3, r2
 8014e32:	d004      	beq.n	8014e3e <HAL_TIM_Base_Start+0x4a>
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4a12      	ldr	r2, [pc, #72]	@ (8014e84 <HAL_TIM_Base_Start+0x90>)
 8014e3a:	4293      	cmp	r3, r2
 8014e3c:	d111      	bne.n	8014e62 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	689b      	ldr	r3, [r3, #8]
 8014e44:	2207      	movs	r2, #7
 8014e46:	4013      	ands	r3, r2
 8014e48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	2b06      	cmp	r3, #6
 8014e4e:	d010      	beq.n	8014e72 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	681a      	ldr	r2, [r3, #0]
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2101      	movs	r1, #1
 8014e5c:	430a      	orrs	r2, r1
 8014e5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014e60:	e007      	b.n	8014e72 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	681a      	ldr	r2, [r3, #0]
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	2101      	movs	r1, #1
 8014e6e:	430a      	orrs	r2, r1
 8014e70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8014e72:	2300      	movs	r3, #0
}
 8014e74:	0018      	movs	r0, r3
 8014e76:	46bd      	mov	sp, r7
 8014e78:	b004      	add	sp, #16
 8014e7a:	bd80      	pop	{r7, pc}
 8014e7c:	40000400 	.word	0x40000400
 8014e80:	40010800 	.word	0x40010800
 8014e84:	40011400 	.word	0x40011400

08014e88 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	6a1b      	ldr	r3, [r3, #32]
 8014e96:	4a0a      	ldr	r2, [pc, #40]	@ (8014ec0 <HAL_TIM_Base_Stop+0x38>)
 8014e98:	4013      	ands	r3, r2
 8014e9a:	d107      	bne.n	8014eac <HAL_TIM_Base_Stop+0x24>
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	681a      	ldr	r2, [r3, #0]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	2101      	movs	r1, #1
 8014ea8:	438a      	bics	r2, r1
 8014eaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2239      	movs	r2, #57	@ 0x39
 8014eb0:	2101      	movs	r1, #1
 8014eb2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8014eb4:	2300      	movs	r3, #0
}
 8014eb6:	0018      	movs	r0, r3
 8014eb8:	46bd      	mov	sp, r7
 8014eba:	b002      	add	sp, #8
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	46c0      	nop			@ (mov r8, r8)
 8014ec0:	00001111 	.word	0x00001111

08014ec4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b082      	sub	sp, #8
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d101      	bne.n	8014ed6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	e032      	b.n	8014f3c <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2239      	movs	r2, #57	@ 0x39
 8014eda:	5c9b      	ldrb	r3, [r3, r2]
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d107      	bne.n	8014ef2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	2238      	movs	r2, #56	@ 0x38
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	0018      	movs	r0, r3
 8014eee:	f7f7 fd17 	bl	800c920 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2239      	movs	r2, #57	@ 0x39
 8014ef6:	2102      	movs	r1, #2
 8014ef8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681a      	ldr	r2, [r3, #0]
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	3304      	adds	r3, #4
 8014f02:	0019      	movs	r1, r3
 8014f04:	0010      	movs	r0, r2
 8014f06:	f000 f975 	bl	80151f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	223e      	movs	r2, #62	@ 0x3e
 8014f0e:	2101      	movs	r1, #1
 8014f10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	223a      	movs	r2, #58	@ 0x3a
 8014f16:	2101      	movs	r1, #1
 8014f18:	5499      	strb	r1, [r3, r2]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	223b      	movs	r2, #59	@ 0x3b
 8014f1e:	2101      	movs	r1, #1
 8014f20:	5499      	strb	r1, [r3, r2]
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	223c      	movs	r2, #60	@ 0x3c
 8014f26:	2101      	movs	r1, #1
 8014f28:	5499      	strb	r1, [r3, r2]
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	223d      	movs	r2, #61	@ 0x3d
 8014f2e:	2101      	movs	r1, #1
 8014f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2239      	movs	r2, #57	@ 0x39
 8014f36:	2101      	movs	r1, #1
 8014f38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8014f3a:	2300      	movs	r3, #0
}
 8014f3c:	0018      	movs	r0, r3
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	b002      	add	sp, #8
 8014f42:	bd80      	pop	{r7, pc}

08014f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b084      	sub	sp, #16
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	6078      	str	r0, [r7, #4]
 8014f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d108      	bne.n	8014f66 <HAL_TIM_PWM_Start+0x22>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	223a      	movs	r2, #58	@ 0x3a
 8014f58:	5c9b      	ldrb	r3, [r3, r2]
 8014f5a:	b2db      	uxtb	r3, r3
 8014f5c:	3b01      	subs	r3, #1
 8014f5e:	1e5a      	subs	r2, r3, #1
 8014f60:	4193      	sbcs	r3, r2
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	e01f      	b.n	8014fa6 <HAL_TIM_PWM_Start+0x62>
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	2b04      	cmp	r3, #4
 8014f6a:	d108      	bne.n	8014f7e <HAL_TIM_PWM_Start+0x3a>
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	223b      	movs	r2, #59	@ 0x3b
 8014f70:	5c9b      	ldrb	r3, [r3, r2]
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	3b01      	subs	r3, #1
 8014f76:	1e5a      	subs	r2, r3, #1
 8014f78:	4193      	sbcs	r3, r2
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	e013      	b.n	8014fa6 <HAL_TIM_PWM_Start+0x62>
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	2b08      	cmp	r3, #8
 8014f82:	d108      	bne.n	8014f96 <HAL_TIM_PWM_Start+0x52>
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	223c      	movs	r2, #60	@ 0x3c
 8014f88:	5c9b      	ldrb	r3, [r3, r2]
 8014f8a:	b2db      	uxtb	r3, r3
 8014f8c:	3b01      	subs	r3, #1
 8014f8e:	1e5a      	subs	r2, r3, #1
 8014f90:	4193      	sbcs	r3, r2
 8014f92:	b2db      	uxtb	r3, r3
 8014f94:	e007      	b.n	8014fa6 <HAL_TIM_PWM_Start+0x62>
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	223d      	movs	r2, #61	@ 0x3d
 8014f9a:	5c9b      	ldrb	r3, [r3, r2]
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	3b01      	subs	r3, #1
 8014fa0:	1e5a      	subs	r2, r3, #1
 8014fa2:	4193      	sbcs	r3, r2
 8014fa4:	b2db      	uxtb	r3, r3
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d001      	beq.n	8014fae <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8014faa:	2301      	movs	r3, #1
 8014fac:	e052      	b.n	8015054 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d104      	bne.n	8014fbe <HAL_TIM_PWM_Start+0x7a>
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	223a      	movs	r2, #58	@ 0x3a
 8014fb8:	2102      	movs	r1, #2
 8014fba:	5499      	strb	r1, [r3, r2]
 8014fbc:	e013      	b.n	8014fe6 <HAL_TIM_PWM_Start+0xa2>
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	2b04      	cmp	r3, #4
 8014fc2:	d104      	bne.n	8014fce <HAL_TIM_PWM_Start+0x8a>
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	223b      	movs	r2, #59	@ 0x3b
 8014fc8:	2102      	movs	r1, #2
 8014fca:	5499      	strb	r1, [r3, r2]
 8014fcc:	e00b      	b.n	8014fe6 <HAL_TIM_PWM_Start+0xa2>
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	2b08      	cmp	r3, #8
 8014fd2:	d104      	bne.n	8014fde <HAL_TIM_PWM_Start+0x9a>
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	223c      	movs	r2, #60	@ 0x3c
 8014fd8:	2102      	movs	r1, #2
 8014fda:	5499      	strb	r1, [r3, r2]
 8014fdc:	e003      	b.n	8014fe6 <HAL_TIM_PWM_Start+0xa2>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	223d      	movs	r2, #61	@ 0x3d
 8014fe2:	2102      	movs	r1, #2
 8014fe4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	6839      	ldr	r1, [r7, #0]
 8014fec:	2201      	movs	r2, #1
 8014fee:	0018      	movs	r0, r3
 8014ff0:	f000 fa62 	bl	80154b8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681a      	ldr	r2, [r3, #0]
 8014ff8:	2380      	movs	r3, #128	@ 0x80
 8014ffa:	05db      	lsls	r3, r3, #23
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d00e      	beq.n	801501e <HAL_TIM_PWM_Start+0xda>
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	4a15      	ldr	r2, [pc, #84]	@ (801505c <HAL_TIM_PWM_Start+0x118>)
 8015006:	4293      	cmp	r3, r2
 8015008:	d009      	beq.n	801501e <HAL_TIM_PWM_Start+0xda>
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	4a14      	ldr	r2, [pc, #80]	@ (8015060 <HAL_TIM_PWM_Start+0x11c>)
 8015010:	4293      	cmp	r3, r2
 8015012:	d004      	beq.n	801501e <HAL_TIM_PWM_Start+0xda>
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	4a12      	ldr	r2, [pc, #72]	@ (8015064 <HAL_TIM_PWM_Start+0x120>)
 801501a:	4293      	cmp	r3, r2
 801501c:	d111      	bne.n	8015042 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	2207      	movs	r2, #7
 8015026:	4013      	ands	r3, r2
 8015028:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2b06      	cmp	r3, #6
 801502e:	d010      	beq.n	8015052 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2101      	movs	r1, #1
 801503c:	430a      	orrs	r2, r1
 801503e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015040:	e007      	b.n	8015052 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	2101      	movs	r1, #1
 801504e:	430a      	orrs	r2, r1
 8015050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8015052:	2300      	movs	r3, #0
}
 8015054:	0018      	movs	r0, r3
 8015056:	46bd      	mov	sp, r7
 8015058:	b004      	add	sp, #16
 801505a:	bd80      	pop	{r7, pc}
 801505c:	40000400 	.word	0x40000400
 8015060:	40010800 	.word	0x40010800
 8015064:	40011400 	.word	0x40011400

08015068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b086      	sub	sp, #24
 801506c:	af00      	add	r7, sp, #0
 801506e:	60f8      	str	r0, [r7, #12]
 8015070:	60b9      	str	r1, [r7, #8]
 8015072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015074:	2317      	movs	r3, #23
 8015076:	18fb      	adds	r3, r7, r3
 8015078:	2200      	movs	r2, #0
 801507a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	2238      	movs	r2, #56	@ 0x38
 8015080:	5c9b      	ldrb	r3, [r3, r2]
 8015082:	2b01      	cmp	r3, #1
 8015084:	d101      	bne.n	801508a <HAL_TIM_PWM_ConfigChannel+0x22>
 8015086:	2302      	movs	r3, #2
 8015088:	e0ad      	b.n	80151e6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	2238      	movs	r2, #56	@ 0x38
 801508e:	2101      	movs	r1, #1
 8015090:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	2b0c      	cmp	r3, #12
 8015096:	d100      	bne.n	801509a <HAL_TIM_PWM_ConfigChannel+0x32>
 8015098:	e076      	b.n	8015188 <HAL_TIM_PWM_ConfigChannel+0x120>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	2b0c      	cmp	r3, #12
 801509e:	d900      	bls.n	80150a2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80150a0:	e095      	b.n	80151ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2b08      	cmp	r3, #8
 80150a6:	d04e      	beq.n	8015146 <HAL_TIM_PWM_ConfigChannel+0xde>
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	2b08      	cmp	r3, #8
 80150ac:	d900      	bls.n	80150b0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80150ae:	e08e      	b.n	80151ce <HAL_TIM_PWM_ConfigChannel+0x166>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d003      	beq.n	80150be <HAL_TIM_PWM_ConfigChannel+0x56>
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2b04      	cmp	r3, #4
 80150ba:	d021      	beq.n	8015100 <HAL_TIM_PWM_ConfigChannel+0x98>
 80150bc:	e087      	b.n	80151ce <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	68ba      	ldr	r2, [r7, #8]
 80150c4:	0011      	movs	r1, r2
 80150c6:	0018      	movs	r0, r3
 80150c8:	f000 f8f2 	bl	80152b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	699a      	ldr	r2, [r3, #24]
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2108      	movs	r1, #8
 80150d8:	430a      	orrs	r2, r1
 80150da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	699a      	ldr	r2, [r3, #24]
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2104      	movs	r1, #4
 80150e8:	438a      	bics	r2, r1
 80150ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	6999      	ldr	r1, [r3, #24]
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	68da      	ldr	r2, [r3, #12]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	430a      	orrs	r2, r1
 80150fc:	619a      	str	r2, [r3, #24]
      break;
 80150fe:	e06b      	b.n	80151d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	68ba      	ldr	r2, [r7, #8]
 8015106:	0011      	movs	r1, r2
 8015108:	0018      	movs	r0, r3
 801510a:	f000 f90d 	bl	8015328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	699a      	ldr	r2, [r3, #24]
 8015114:	68fb      	ldr	r3, [r7, #12]
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	2180      	movs	r1, #128	@ 0x80
 801511a:	0109      	lsls	r1, r1, #4
 801511c:	430a      	orrs	r2, r1
 801511e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	699a      	ldr	r2, [r3, #24]
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	4931      	ldr	r1, [pc, #196]	@ (80151f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 801512c:	400a      	ands	r2, r1
 801512e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	6999      	ldr	r1, [r3, #24]
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	68db      	ldr	r3, [r3, #12]
 801513a:	021a      	lsls	r2, r3, #8
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	430a      	orrs	r2, r1
 8015142:	619a      	str	r2, [r3, #24]
      break;
 8015144:	e048      	b.n	80151d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	68ba      	ldr	r2, [r7, #8]
 801514c:	0011      	movs	r1, r2
 801514e:	0018      	movs	r0, r3
 8015150:	f000 f92c 	bl	80153ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	69da      	ldr	r2, [r3, #28]
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	2108      	movs	r1, #8
 8015160:	430a      	orrs	r2, r1
 8015162:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	69da      	ldr	r2, [r3, #28]
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	2104      	movs	r1, #4
 8015170:	438a      	bics	r2, r1
 8015172:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	69d9      	ldr	r1, [r3, #28]
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	68da      	ldr	r2, [r3, #12]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	430a      	orrs	r2, r1
 8015184:	61da      	str	r2, [r3, #28]
      break;
 8015186:	e027      	b.n	80151d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	68ba      	ldr	r2, [r7, #8]
 801518e:	0011      	movs	r1, r2
 8015190:	0018      	movs	r0, r3
 8015192:	f000 f94b 	bl	801542c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	69da      	ldr	r2, [r3, #28]
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	2180      	movs	r1, #128	@ 0x80
 80151a2:	0109      	lsls	r1, r1, #4
 80151a4:	430a      	orrs	r2, r1
 80151a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	69da      	ldr	r2, [r3, #28]
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	490f      	ldr	r1, [pc, #60]	@ (80151f0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80151b4:	400a      	ands	r2, r1
 80151b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	69d9      	ldr	r1, [r3, #28]
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	68db      	ldr	r3, [r3, #12]
 80151c2:	021a      	lsls	r2, r3, #8
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	430a      	orrs	r2, r1
 80151ca:	61da      	str	r2, [r3, #28]
      break;
 80151cc:	e004      	b.n	80151d8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80151ce:	2317      	movs	r3, #23
 80151d0:	18fb      	adds	r3, r7, r3
 80151d2:	2201      	movs	r2, #1
 80151d4:	701a      	strb	r2, [r3, #0]
      break;
 80151d6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	2238      	movs	r2, #56	@ 0x38
 80151dc:	2100      	movs	r1, #0
 80151de:	5499      	strb	r1, [r3, r2]

  return status;
 80151e0:	2317      	movs	r3, #23
 80151e2:	18fb      	adds	r3, r7, r3
 80151e4:	781b      	ldrb	r3, [r3, #0]
}
 80151e6:	0018      	movs	r0, r3
 80151e8:	46bd      	mov	sp, r7
 80151ea:	b006      	add	sp, #24
 80151ec:	bd80      	pop	{r7, pc}
 80151ee:	46c0      	nop			@ (mov r8, r8)
 80151f0:	fffffbff 	.word	0xfffffbff

080151f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b084      	sub	sp, #16
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015204:	687a      	ldr	r2, [r7, #4]
 8015206:	2380      	movs	r3, #128	@ 0x80
 8015208:	05db      	lsls	r3, r3, #23
 801520a:	429a      	cmp	r2, r3
 801520c:	d00b      	beq.n	8015226 <TIM_Base_SetConfig+0x32>
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	4a23      	ldr	r2, [pc, #140]	@ (80152a0 <TIM_Base_SetConfig+0xac>)
 8015212:	4293      	cmp	r3, r2
 8015214:	d007      	beq.n	8015226 <TIM_Base_SetConfig+0x32>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	4a22      	ldr	r2, [pc, #136]	@ (80152a4 <TIM_Base_SetConfig+0xb0>)
 801521a:	4293      	cmp	r3, r2
 801521c:	d003      	beq.n	8015226 <TIM_Base_SetConfig+0x32>
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	4a21      	ldr	r2, [pc, #132]	@ (80152a8 <TIM_Base_SetConfig+0xb4>)
 8015222:	4293      	cmp	r3, r2
 8015224:	d108      	bne.n	8015238 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2270      	movs	r2, #112	@ 0x70
 801522a:	4393      	bics	r3, r2
 801522c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	68fa      	ldr	r2, [r7, #12]
 8015234:	4313      	orrs	r3, r2
 8015236:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	2380      	movs	r3, #128	@ 0x80
 801523c:	05db      	lsls	r3, r3, #23
 801523e:	429a      	cmp	r2, r3
 8015240:	d00b      	beq.n	801525a <TIM_Base_SetConfig+0x66>
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	4a16      	ldr	r2, [pc, #88]	@ (80152a0 <TIM_Base_SetConfig+0xac>)
 8015246:	4293      	cmp	r3, r2
 8015248:	d007      	beq.n	801525a <TIM_Base_SetConfig+0x66>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	4a15      	ldr	r2, [pc, #84]	@ (80152a4 <TIM_Base_SetConfig+0xb0>)
 801524e:	4293      	cmp	r3, r2
 8015250:	d003      	beq.n	801525a <TIM_Base_SetConfig+0x66>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	4a14      	ldr	r2, [pc, #80]	@ (80152a8 <TIM_Base_SetConfig+0xb4>)
 8015256:	4293      	cmp	r3, r2
 8015258:	d108      	bne.n	801526c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	4a13      	ldr	r2, [pc, #76]	@ (80152ac <TIM_Base_SetConfig+0xb8>)
 801525e:	4013      	ands	r3, r2
 8015260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	68db      	ldr	r3, [r3, #12]
 8015266:	68fa      	ldr	r2, [r7, #12]
 8015268:	4313      	orrs	r3, r2
 801526a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	2280      	movs	r2, #128	@ 0x80
 8015270:	4393      	bics	r3, r2
 8015272:	001a      	movs	r2, r3
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	691b      	ldr	r3, [r3, #16]
 8015278:	4313      	orrs	r3, r2
 801527a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	68fa      	ldr	r2, [r7, #12]
 8015280:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	689a      	ldr	r2, [r3, #8]
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2201      	movs	r2, #1
 8015296:	615a      	str	r2, [r3, #20]
}
 8015298:	46c0      	nop			@ (mov r8, r8)
 801529a:	46bd      	mov	sp, r7
 801529c:	b004      	add	sp, #16
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	40000400 	.word	0x40000400
 80152a4:	40010800 	.word	0x40010800
 80152a8:	40011400 	.word	0x40011400
 80152ac:	fffffcff 	.word	0xfffffcff

080152b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b086      	sub	sp, #24
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6a1b      	ldr	r3, [r3, #32]
 80152be:	2201      	movs	r2, #1
 80152c0:	4393      	bics	r3, r2
 80152c2:	001a      	movs	r2, r3
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	6a1b      	ldr	r3, [r3, #32]
 80152cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	685b      	ldr	r3, [r3, #4]
 80152d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	699b      	ldr	r3, [r3, #24]
 80152d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	2270      	movs	r2, #112	@ 0x70
 80152de:	4393      	bics	r3, r2
 80152e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2203      	movs	r2, #3
 80152e6:	4393      	bics	r3, r2
 80152e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	68fa      	ldr	r2, [r7, #12]
 80152f0:	4313      	orrs	r3, r2
 80152f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	2202      	movs	r2, #2
 80152f8:	4393      	bics	r3, r2
 80152fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80152fc:	683b      	ldr	r3, [r7, #0]
 80152fe:	689b      	ldr	r3, [r3, #8]
 8015300:	697a      	ldr	r2, [r7, #20]
 8015302:	4313      	orrs	r3, r2
 8015304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	693a      	ldr	r2, [r7, #16]
 801530a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	68fa      	ldr	r2, [r7, #12]
 8015310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	685a      	ldr	r2, [r3, #4]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	697a      	ldr	r2, [r7, #20]
 801531e:	621a      	str	r2, [r3, #32]
}
 8015320:	46c0      	nop			@ (mov r8, r8)
 8015322:	46bd      	mov	sp, r7
 8015324:	b006      	add	sp, #24
 8015326:	bd80      	pop	{r7, pc}

08015328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b086      	sub	sp, #24
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
 8015330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	6a1b      	ldr	r3, [r3, #32]
 8015336:	2210      	movs	r2, #16
 8015338:	4393      	bics	r3, r2
 801533a:	001a      	movs	r2, r3
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6a1b      	ldr	r3, [r3, #32]
 8015344:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	685b      	ldr	r3, [r3, #4]
 801534a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	699b      	ldr	r3, [r3, #24]
 8015350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	4a13      	ldr	r2, [pc, #76]	@ (80153a4 <TIM_OC2_SetConfig+0x7c>)
 8015356:	4013      	ands	r3, r2
 8015358:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	4a12      	ldr	r2, [pc, #72]	@ (80153a8 <TIM_OC2_SetConfig+0x80>)
 801535e:	4013      	ands	r3, r2
 8015360:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	021b      	lsls	r3, r3, #8
 8015368:	68fa      	ldr	r2, [r7, #12]
 801536a:	4313      	orrs	r3, r2
 801536c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	2220      	movs	r2, #32
 8015372:	4393      	bics	r3, r2
 8015374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	689b      	ldr	r3, [r3, #8]
 801537a:	011b      	lsls	r3, r3, #4
 801537c:	697a      	ldr	r2, [r7, #20]
 801537e:	4313      	orrs	r3, r2
 8015380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	693a      	ldr	r2, [r7, #16]
 8015386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	68fa      	ldr	r2, [r7, #12]
 801538c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	685a      	ldr	r2, [r3, #4]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	697a      	ldr	r2, [r7, #20]
 801539a:	621a      	str	r2, [r3, #32]
}
 801539c:	46c0      	nop			@ (mov r8, r8)
 801539e:	46bd      	mov	sp, r7
 80153a0:	b006      	add	sp, #24
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	ffff8fff 	.word	0xffff8fff
 80153a8:	fffffcff 	.word	0xfffffcff

080153ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b086      	sub	sp, #24
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
 80153b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	6a1b      	ldr	r3, [r3, #32]
 80153ba:	4a1a      	ldr	r2, [pc, #104]	@ (8015424 <TIM_OC3_SetConfig+0x78>)
 80153bc:	401a      	ands	r2, r3
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	6a1b      	ldr	r3, [r3, #32]
 80153c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	69db      	ldr	r3, [r3, #28]
 80153d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2270      	movs	r2, #112	@ 0x70
 80153d8:	4393      	bics	r3, r2
 80153da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	2203      	movs	r2, #3
 80153e0:	4393      	bics	r3, r2
 80153e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	68fa      	ldr	r2, [r7, #12]
 80153ea:	4313      	orrs	r3, r2
 80153ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	4a0d      	ldr	r2, [pc, #52]	@ (8015428 <TIM_OC3_SetConfig+0x7c>)
 80153f2:	4013      	ands	r3, r2
 80153f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	689b      	ldr	r3, [r3, #8]
 80153fa:	021b      	lsls	r3, r3, #8
 80153fc:	697a      	ldr	r2, [r7, #20]
 80153fe:	4313      	orrs	r3, r2
 8015400:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	693a      	ldr	r2, [r7, #16]
 8015406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	685a      	ldr	r2, [r3, #4]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	697a      	ldr	r2, [r7, #20]
 801541a:	621a      	str	r2, [r3, #32]
}
 801541c:	46c0      	nop			@ (mov r8, r8)
 801541e:	46bd      	mov	sp, r7
 8015420:	b006      	add	sp, #24
 8015422:	bd80      	pop	{r7, pc}
 8015424:	fffffeff 	.word	0xfffffeff
 8015428:	fffffdff 	.word	0xfffffdff

0801542c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b086      	sub	sp, #24
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
 8015434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6a1b      	ldr	r3, [r3, #32]
 801543a:	4a1b      	ldr	r2, [pc, #108]	@ (80154a8 <TIM_OC4_SetConfig+0x7c>)
 801543c:	401a      	ands	r2, r3
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6a1b      	ldr	r3, [r3, #32]
 8015446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	685b      	ldr	r3, [r3, #4]
 801544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	69db      	ldr	r3, [r3, #28]
 8015452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	4a15      	ldr	r2, [pc, #84]	@ (80154ac <TIM_OC4_SetConfig+0x80>)
 8015458:	4013      	ands	r3, r2
 801545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	4a14      	ldr	r2, [pc, #80]	@ (80154b0 <TIM_OC4_SetConfig+0x84>)
 8015460:	4013      	ands	r3, r2
 8015462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	021b      	lsls	r3, r3, #8
 801546a:	68fa      	ldr	r2, [r7, #12]
 801546c:	4313      	orrs	r3, r2
 801546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	4a10      	ldr	r2, [pc, #64]	@ (80154b4 <TIM_OC4_SetConfig+0x88>)
 8015474:	4013      	ands	r3, r2
 8015476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	689b      	ldr	r3, [r3, #8]
 801547c:	031b      	lsls	r3, r3, #12
 801547e:	697a      	ldr	r2, [r7, #20]
 8015480:	4313      	orrs	r3, r2
 8015482:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	693a      	ldr	r2, [r7, #16]
 8015488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	68fa      	ldr	r2, [r7, #12]
 801548e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	685a      	ldr	r2, [r3, #4]
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	697a      	ldr	r2, [r7, #20]
 801549c:	621a      	str	r2, [r3, #32]
}
 801549e:	46c0      	nop			@ (mov r8, r8)
 80154a0:	46bd      	mov	sp, r7
 80154a2:	b006      	add	sp, #24
 80154a4:	bd80      	pop	{r7, pc}
 80154a6:	46c0      	nop			@ (mov r8, r8)
 80154a8:	ffffefff 	.word	0xffffefff
 80154ac:	ffff8fff 	.word	0xffff8fff
 80154b0:	fffffcff 	.word	0xfffffcff
 80154b4:	ffffdfff 	.word	0xffffdfff

080154b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b086      	sub	sp, #24
 80154bc:	af00      	add	r7, sp, #0
 80154be:	60f8      	str	r0, [r7, #12]
 80154c0:	60b9      	str	r1, [r7, #8]
 80154c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	221f      	movs	r2, #31
 80154c8:	4013      	ands	r3, r2
 80154ca:	2201      	movs	r2, #1
 80154cc:	409a      	lsls	r2, r3
 80154ce:	0013      	movs	r3, r2
 80154d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	6a1b      	ldr	r3, [r3, #32]
 80154d6:	697a      	ldr	r2, [r7, #20]
 80154d8:	43d2      	mvns	r2, r2
 80154da:	401a      	ands	r2, r3
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	6a1a      	ldr	r2, [r3, #32]
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	211f      	movs	r1, #31
 80154e8:	400b      	ands	r3, r1
 80154ea:	6879      	ldr	r1, [r7, #4]
 80154ec:	4099      	lsls	r1, r3
 80154ee:	000b      	movs	r3, r1
 80154f0:	431a      	orrs	r2, r3
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	621a      	str	r2, [r3, #32]
}
 80154f6:	46c0      	nop			@ (mov r8, r8)
 80154f8:	46bd      	mov	sp, r7
 80154fa:	b006      	add	sp, #24
 80154fc:	bd80      	pop	{r7, pc}
	...

08015500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2238      	movs	r2, #56	@ 0x38
 801550e:	5c9b      	ldrb	r3, [r3, r2]
 8015510:	2b01      	cmp	r3, #1
 8015512:	d101      	bne.n	8015518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015514:	2302      	movs	r3, #2
 8015516:	e047      	b.n	80155a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	2238      	movs	r2, #56	@ 0x38
 801551c:	2101      	movs	r1, #1
 801551e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2239      	movs	r2, #57	@ 0x39
 8015524:	2102      	movs	r1, #2
 8015526:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	689b      	ldr	r3, [r3, #8]
 8015536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	2270      	movs	r2, #112	@ 0x70
 801553c:	4393      	bics	r3, r2
 801553e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	68fa      	ldr	r2, [r7, #12]
 8015546:	4313      	orrs	r3, r2
 8015548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	68fa      	ldr	r2, [r7, #12]
 8015550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	2380      	movs	r3, #128	@ 0x80
 8015558:	05db      	lsls	r3, r3, #23
 801555a:	429a      	cmp	r2, r3
 801555c:	d00e      	beq.n	801557c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	4a13      	ldr	r2, [pc, #76]	@ (80155b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8015564:	4293      	cmp	r3, r2
 8015566:	d009      	beq.n	801557c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	4a11      	ldr	r2, [pc, #68]	@ (80155b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801556e:	4293      	cmp	r3, r2
 8015570:	d004      	beq.n	801557c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	4a10      	ldr	r2, [pc, #64]	@ (80155b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8015578:	4293      	cmp	r3, r2
 801557a:	d10c      	bne.n	8015596 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	2280      	movs	r2, #128	@ 0x80
 8015580:	4393      	bics	r3, r2
 8015582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015584:	683b      	ldr	r3, [r7, #0]
 8015586:	685b      	ldr	r3, [r3, #4]
 8015588:	68ba      	ldr	r2, [r7, #8]
 801558a:	4313      	orrs	r3, r2
 801558c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	68ba      	ldr	r2, [r7, #8]
 8015594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	2239      	movs	r2, #57	@ 0x39
 801559a:	2101      	movs	r1, #1
 801559c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	2238      	movs	r2, #56	@ 0x38
 80155a2:	2100      	movs	r1, #0
 80155a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80155a6:	2300      	movs	r3, #0
}
 80155a8:	0018      	movs	r0, r3
 80155aa:	46bd      	mov	sp, r7
 80155ac:	b004      	add	sp, #16
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	40000400 	.word	0x40000400
 80155b4:	40010800 	.word	0x40010800
 80155b8:	40011400 	.word	0x40011400

080155bc <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b082      	sub	sp, #8
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	2238      	movs	r2, #56	@ 0x38
 80155ca:	5c9b      	ldrb	r3, [r3, r2]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	d101      	bne.n	80155d4 <HAL_TIMEx_RemapConfig+0x18>
 80155d0:	2302      	movs	r3, #2
 80155d2:	e00c      	b.n	80155ee <HAL_TIMEx_RemapConfig+0x32>
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	2238      	movs	r2, #56	@ 0x38
 80155d8:	2101      	movs	r1, #1
 80155da:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	683a      	ldr	r2, [r7, #0]
 80155e2:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2238      	movs	r2, #56	@ 0x38
 80155e8:	2100      	movs	r1, #0
 80155ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80155ec:	2300      	movs	r3, #0
}
 80155ee:	0018      	movs	r0, r3
 80155f0:	46bd      	mov	sp, r7
 80155f2:	b002      	add	sp, #8
 80155f4:	bd80      	pop	{r7, pc}
	...

080155f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d101      	bne.n	801560a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015606:	2301      	movs	r3, #1
 8015608:	e053      	b.n	80156b2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801560e:	2b00      	cmp	r3, #0
 8015610:	d116      	bne.n	8015640 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2278      	movs	r2, #120	@ 0x78
 8015616:	2100      	movs	r1, #0
 8015618:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	0018      	movs	r0, r3
 801561e:	f000 fd65 	bl	80160ec <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	22b0      	movs	r2, #176	@ 0xb0
 8015626:	589b      	ldr	r3, [r3, r2]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d103      	bne.n	8015634 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	21b0      	movs	r1, #176	@ 0xb0
 8015630:	4a22      	ldr	r2, [pc, #136]	@ (80156bc <HAL_UART_Init+0xc4>)
 8015632:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	22b0      	movs	r2, #176	@ 0xb0
 8015638:	589b      	ldr	r3, [r3, r2]
 801563a:	687a      	ldr	r2, [r7, #4]
 801563c:	0010      	movs	r0, r2
 801563e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	2224      	movs	r2, #36	@ 0x24
 8015644:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	681a      	ldr	r2, [r3, #0]
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	2101      	movs	r1, #1
 8015652:	438a      	bics	r2, r1
 8015654:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	0018      	movs	r0, r3
 801565a:	f000 fd8b 	bl	8016174 <UART_SetConfig>
 801565e:	0003      	movs	r3, r0
 8015660:	2b01      	cmp	r3, #1
 8015662:	d101      	bne.n	8015668 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8015664:	2301      	movs	r3, #1
 8015666:	e024      	b.n	80156b2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801566c:	2b00      	cmp	r3, #0
 801566e:	d003      	beq.n	8015678 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	0018      	movs	r0, r3
 8015674:	f001 f81c 	bl	80166b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	685a      	ldr	r2, [r3, #4]
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	490f      	ldr	r1, [pc, #60]	@ (80156c0 <HAL_UART_Init+0xc8>)
 8015684:	400a      	ands	r2, r1
 8015686:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	689a      	ldr	r2, [r3, #8]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	212a      	movs	r1, #42	@ 0x2a
 8015694:	438a      	bics	r2, r1
 8015696:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	2101      	movs	r1, #1
 80156a4:	430a      	orrs	r2, r1
 80156a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	0018      	movs	r0, r3
 80156ac:	f001 f8b4 	bl	8016818 <UART_CheckIdleState>
 80156b0:	0003      	movs	r3, r0
}
 80156b2:	0018      	movs	r0, r3
 80156b4:	46bd      	mov	sp, r7
 80156b6:	b002      	add	sp, #8
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	46c0      	nop			@ (mov r8, r8)
 80156bc:	0800cb9d 	.word	0x0800cb9d
 80156c0:	ffffb7ff 	.word	0xffffb7ff

080156c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08a      	sub	sp, #40	@ 0x28
 80156c8:	af02      	add	r7, sp, #8
 80156ca:	60f8      	str	r0, [r7, #12]
 80156cc:	60b9      	str	r1, [r7, #8]
 80156ce:	603b      	str	r3, [r7, #0]
 80156d0:	1dbb      	adds	r3, r7, #6
 80156d2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80156d8:	2b20      	cmp	r3, #32
 80156da:	d000      	beq.n	80156de <HAL_UART_Transmit+0x1a>
 80156dc:	e08c      	b.n	80157f8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80156de:	68bb      	ldr	r3, [r7, #8]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d003      	beq.n	80156ec <HAL_UART_Transmit+0x28>
 80156e4:	1dbb      	adds	r3, r7, #6
 80156e6:	881b      	ldrh	r3, [r3, #0]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d101      	bne.n	80156f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80156ec:	2301      	movs	r3, #1
 80156ee:	e084      	b.n	80157fa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	689a      	ldr	r2, [r3, #8]
 80156f4:	2380      	movs	r3, #128	@ 0x80
 80156f6:	015b      	lsls	r3, r3, #5
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d109      	bne.n	8015710 <HAL_UART_Transmit+0x4c>
 80156fc:	68fb      	ldr	r3, [r7, #12]
 80156fe:	691b      	ldr	r3, [r3, #16]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d105      	bne.n	8015710 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015704:	68bb      	ldr	r3, [r7, #8]
 8015706:	2201      	movs	r2, #1
 8015708:	4013      	ands	r3, r2
 801570a:	d001      	beq.n	8015710 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 801570c:	2301      	movs	r3, #1
 801570e:	e074      	b.n	80157fa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	2284      	movs	r2, #132	@ 0x84
 8015714:	2100      	movs	r1, #0
 8015716:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	2221      	movs	r2, #33	@ 0x21
 801571c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801571e:	f7f7 ff69 	bl	800d5f4 <HAL_GetTick>
 8015722:	0003      	movs	r3, r0
 8015724:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	1dba      	adds	r2, r7, #6
 801572a:	2150      	movs	r1, #80	@ 0x50
 801572c:	8812      	ldrh	r2, [r2, #0]
 801572e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	1dba      	adds	r2, r7, #6
 8015734:	2152      	movs	r1, #82	@ 0x52
 8015736:	8812      	ldrh	r2, [r2, #0]
 8015738:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	689a      	ldr	r2, [r3, #8]
 801573e:	2380      	movs	r3, #128	@ 0x80
 8015740:	015b      	lsls	r3, r3, #5
 8015742:	429a      	cmp	r2, r3
 8015744:	d108      	bne.n	8015758 <HAL_UART_Transmit+0x94>
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	691b      	ldr	r3, [r3, #16]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d104      	bne.n	8015758 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 801574e:	2300      	movs	r3, #0
 8015750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	61bb      	str	r3, [r7, #24]
 8015756:	e003      	b.n	8015760 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801575c:	2300      	movs	r3, #0
 801575e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015760:	e02f      	b.n	80157c2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015762:	697a      	ldr	r2, [r7, #20]
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	9300      	str	r3, [sp, #0]
 801576a:	0013      	movs	r3, r2
 801576c:	2200      	movs	r2, #0
 801576e:	2180      	movs	r1, #128	@ 0x80
 8015770:	f001 f8fa 	bl	8016968 <UART_WaitOnFlagUntilTimeout>
 8015774:	1e03      	subs	r3, r0, #0
 8015776:	d004      	beq.n	8015782 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	2220      	movs	r2, #32
 801577c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801577e:	2303      	movs	r3, #3
 8015780:	e03b      	b.n	80157fa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d10b      	bne.n	80157a0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015788:	69bb      	ldr	r3, [r7, #24]
 801578a:	881b      	ldrh	r3, [r3, #0]
 801578c:	001a      	movs	r2, r3
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	05d2      	lsls	r2, r2, #23
 8015794:	0dd2      	lsrs	r2, r2, #23
 8015796:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015798:	69bb      	ldr	r3, [r7, #24]
 801579a:	3302      	adds	r3, #2
 801579c:	61bb      	str	r3, [r7, #24]
 801579e:	e007      	b.n	80157b0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	781a      	ldrb	r2, [r3, #0]
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80157aa:	69fb      	ldr	r3, [r7, #28]
 80157ac:	3301      	adds	r3, #1
 80157ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	2252      	movs	r2, #82	@ 0x52
 80157b4:	5a9b      	ldrh	r3, [r3, r2]
 80157b6:	b29b      	uxth	r3, r3
 80157b8:	3b01      	subs	r3, #1
 80157ba:	b299      	uxth	r1, r3
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	2252      	movs	r2, #82	@ 0x52
 80157c0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	2252      	movs	r2, #82	@ 0x52
 80157c6:	5a9b      	ldrh	r3, [r3, r2]
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d1c9      	bne.n	8015762 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80157ce:	697a      	ldr	r2, [r7, #20]
 80157d0:	68f8      	ldr	r0, [r7, #12]
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	9300      	str	r3, [sp, #0]
 80157d6:	0013      	movs	r3, r2
 80157d8:	2200      	movs	r2, #0
 80157da:	2140      	movs	r1, #64	@ 0x40
 80157dc:	f001 f8c4 	bl	8016968 <UART_WaitOnFlagUntilTimeout>
 80157e0:	1e03      	subs	r3, r0, #0
 80157e2:	d004      	beq.n	80157ee <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	2220      	movs	r2, #32
 80157e8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80157ea:	2303      	movs	r3, #3
 80157ec:	e005      	b.n	80157fa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	2220      	movs	r2, #32
 80157f2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80157f4:	2300      	movs	r3, #0
 80157f6:	e000      	b.n	80157fa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80157f8:	2302      	movs	r3, #2
  }
}
 80157fa:	0018      	movs	r0, r3
 80157fc:	46bd      	mov	sp, r7
 80157fe:	b008      	add	sp, #32
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b088      	sub	sp, #32
 8015808:	af00      	add	r7, sp, #0
 801580a:	60f8      	str	r0, [r7, #12]
 801580c:	60b9      	str	r1, [r7, #8]
 801580e:	1dbb      	adds	r3, r7, #6
 8015810:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	2280      	movs	r2, #128	@ 0x80
 8015816:	589b      	ldr	r3, [r3, r2]
 8015818:	2b20      	cmp	r3, #32
 801581a:	d14a      	bne.n	80158b2 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d003      	beq.n	801582a <HAL_UART_Receive_IT+0x26>
 8015822:	1dbb      	adds	r3, r7, #6
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d101      	bne.n	801582e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 801582a:	2301      	movs	r3, #1
 801582c:	e042      	b.n	80158b4 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	689a      	ldr	r2, [r3, #8]
 8015832:	2380      	movs	r3, #128	@ 0x80
 8015834:	015b      	lsls	r3, r3, #5
 8015836:	429a      	cmp	r2, r3
 8015838:	d109      	bne.n	801584e <HAL_UART_Receive_IT+0x4a>
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	691b      	ldr	r3, [r3, #16]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d105      	bne.n	801584e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	2201      	movs	r2, #1
 8015846:	4013      	ands	r3, r2
 8015848:	d001      	beq.n	801584e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 801584a:	2301      	movs	r3, #1
 801584c:	e032      	b.n	80158b4 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	2200      	movs	r2, #0
 8015852:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	4a18      	ldr	r2, [pc, #96]	@ (80158bc <HAL_UART_Receive_IT+0xb8>)
 801585a:	4293      	cmp	r3, r2
 801585c:	d020      	beq.n	80158a0 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	685a      	ldr	r2, [r3, #4]
 8015864:	2380      	movs	r3, #128	@ 0x80
 8015866:	041b      	lsls	r3, r3, #16
 8015868:	4013      	ands	r3, r2
 801586a:	d019      	beq.n	80158a0 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801586c:	f3ef 8310 	mrs	r3, PRIMASK
 8015870:	613b      	str	r3, [r7, #16]
  return(result);
 8015872:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015874:	61fb      	str	r3, [r7, #28]
 8015876:	2301      	movs	r3, #1
 8015878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	f383 8810 	msr	PRIMASK, r3
}
 8015880:	46c0      	nop			@ (mov r8, r8)
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	681a      	ldr	r2, [r3, #0]
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	2180      	movs	r1, #128	@ 0x80
 801588e:	04c9      	lsls	r1, r1, #19
 8015890:	430a      	orrs	r2, r1
 8015892:	601a      	str	r2, [r3, #0]
 8015894:	69fb      	ldr	r3, [r7, #28]
 8015896:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015898:	69bb      	ldr	r3, [r7, #24]
 801589a:	f383 8810 	msr	PRIMASK, r3
}
 801589e:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80158a0:	1dbb      	adds	r3, r7, #6
 80158a2:	881a      	ldrh	r2, [r3, #0]
 80158a4:	68b9      	ldr	r1, [r7, #8]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	0018      	movs	r0, r3
 80158aa:	f001 f8c7 	bl	8016a3c <UART_Start_Receive_IT>
 80158ae:	0003      	movs	r3, r0
 80158b0:	e000      	b.n	80158b4 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80158b2:	2302      	movs	r3, #2
  }
}
 80158b4:	0018      	movs	r0, r3
 80158b6:	46bd      	mov	sp, r7
 80158b8:	b008      	add	sp, #32
 80158ba:	bd80      	pop	{r7, pc}
 80158bc:	40004800 	.word	0x40004800

080158c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	b088      	sub	sp, #32
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	60f8      	str	r0, [r7, #12]
 80158c8:	60b9      	str	r1, [r7, #8]
 80158ca:	1dbb      	adds	r3, r7, #6
 80158cc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80158d2:	2b20      	cmp	r3, #32
 80158d4:	d000      	beq.n	80158d8 <HAL_UART_Transmit_DMA+0x18>
 80158d6:	e077      	b.n	80159c8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d003      	beq.n	80158e6 <HAL_UART_Transmit_DMA+0x26>
 80158de:	1dbb      	adds	r3, r7, #6
 80158e0:	881b      	ldrh	r3, [r3, #0]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d101      	bne.n	80158ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80158e6:	2301      	movs	r3, #1
 80158e8:	e06f      	b.n	80159ca <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	689a      	ldr	r2, [r3, #8]
 80158ee:	2380      	movs	r3, #128	@ 0x80
 80158f0:	015b      	lsls	r3, r3, #5
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d109      	bne.n	801590a <HAL_UART_Transmit_DMA+0x4a>
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	691b      	ldr	r3, [r3, #16]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d105      	bne.n	801590a <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	2201      	movs	r2, #1
 8015902:	4013      	ands	r3, r2
 8015904:	d001      	beq.n	801590a <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8015906:	2301      	movs	r3, #1
 8015908:	e05f      	b.n	80159ca <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	68ba      	ldr	r2, [r7, #8]
 801590e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	1dba      	adds	r2, r7, #6
 8015914:	2150      	movs	r1, #80	@ 0x50
 8015916:	8812      	ldrh	r2, [r2, #0]
 8015918:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	1dba      	adds	r2, r7, #6
 801591e:	2152      	movs	r1, #82	@ 0x52
 8015920:	8812      	ldrh	r2, [r2, #0]
 8015922:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	2284      	movs	r2, #132	@ 0x84
 8015928:	2100      	movs	r1, #0
 801592a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	2221      	movs	r2, #33	@ 0x21
 8015930:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015936:	2b00      	cmp	r3, #0
 8015938:	d027      	beq.n	801598a <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801593e:	4a25      	ldr	r2, [pc, #148]	@ (80159d4 <HAL_UART_Transmit_DMA+0x114>)
 8015940:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015946:	4a24      	ldr	r2, [pc, #144]	@ (80159d8 <HAL_UART_Transmit_DMA+0x118>)
 8015948:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801594e:	4a23      	ldr	r2, [pc, #140]	@ (80159dc <HAL_UART_Transmit_DMA+0x11c>)
 8015950:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015956:	2200      	movs	r2, #0
 8015958:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015962:	0019      	movs	r1, r3
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	3328      	adds	r3, #40	@ 0x28
 801596a:	001a      	movs	r2, r3
 801596c:	1dbb      	adds	r3, r7, #6
 801596e:	881b      	ldrh	r3, [r3, #0]
 8015970:	f7f8 fb60 	bl	800e034 <HAL_DMA_Start_IT>
 8015974:	1e03      	subs	r3, r0, #0
 8015976:	d008      	beq.n	801598a <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	2284      	movs	r2, #132	@ 0x84
 801597c:	2110      	movs	r1, #16
 801597e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	2220      	movs	r2, #32
 8015984:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8015986:	2301      	movs	r3, #1
 8015988:	e01f      	b.n	80159ca <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	2240      	movs	r2, #64	@ 0x40
 8015990:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015992:	f3ef 8310 	mrs	r3, PRIMASK
 8015996:	613b      	str	r3, [r7, #16]
  return(result);
 8015998:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801599a:	61fb      	str	r3, [r7, #28]
 801599c:	2301      	movs	r3, #1
 801599e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80159a0:	697b      	ldr	r3, [r7, #20]
 80159a2:	f383 8810 	msr	PRIMASK, r3
}
 80159a6:	46c0      	nop			@ (mov r8, r8)
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	689a      	ldr	r2, [r3, #8]
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2180      	movs	r1, #128	@ 0x80
 80159b4:	430a      	orrs	r2, r1
 80159b6:	609a      	str	r2, [r3, #8]
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80159bc:	69bb      	ldr	r3, [r7, #24]
 80159be:	f383 8810 	msr	PRIMASK, r3
}
 80159c2:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80159c4:	2300      	movs	r3, #0
 80159c6:	e000      	b.n	80159ca <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80159c8:	2302      	movs	r3, #2
  }
}
 80159ca:	0018      	movs	r0, r3
 80159cc:	46bd      	mov	sp, r7
 80159ce:	b008      	add	sp, #32
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	46c0      	nop			@ (mov r8, r8)
 80159d4:	08016e21 	.word	0x08016e21
 80159d8:	08016ebd 	.word	0x08016ebd
 80159dc:	0801705d 	.word	0x0801705d

080159e0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b088      	sub	sp, #32
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	60f8      	str	r0, [r7, #12]
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	1dbb      	adds	r3, r7, #6
 80159ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	2280      	movs	r2, #128	@ 0x80
 80159f2:	589b      	ldr	r3, [r3, r2]
 80159f4:	2b20      	cmp	r3, #32
 80159f6:	d14a      	bne.n	8015a8e <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d003      	beq.n	8015a06 <HAL_UART_Receive_DMA+0x26>
 80159fe:	1dbb      	adds	r3, r7, #6
 8015a00:	881b      	ldrh	r3, [r3, #0]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d101      	bne.n	8015a0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015a06:	2301      	movs	r3, #1
 8015a08:	e042      	b.n	8015a90 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015a0a:	68fb      	ldr	r3, [r7, #12]
 8015a0c:	689a      	ldr	r2, [r3, #8]
 8015a0e:	2380      	movs	r3, #128	@ 0x80
 8015a10:	015b      	lsls	r3, r3, #5
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d109      	bne.n	8015a2a <HAL_UART_Receive_DMA+0x4a>
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	691b      	ldr	r3, [r3, #16]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d105      	bne.n	8015a2a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	2201      	movs	r2, #1
 8015a22:	4013      	ands	r3, r2
 8015a24:	d001      	beq.n	8015a2a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8015a26:	2301      	movs	r3, #1
 8015a28:	e032      	b.n	8015a90 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	2200      	movs	r2, #0
 8015a2e:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	4a18      	ldr	r2, [pc, #96]	@ (8015a98 <HAL_UART_Receive_DMA+0xb8>)
 8015a36:	4293      	cmp	r3, r2
 8015a38:	d020      	beq.n	8015a7c <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	685a      	ldr	r2, [r3, #4]
 8015a40:	2380      	movs	r3, #128	@ 0x80
 8015a42:	041b      	lsls	r3, r3, #16
 8015a44:	4013      	ands	r3, r2
 8015a46:	d019      	beq.n	8015a7c <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a48:	f3ef 8310 	mrs	r3, PRIMASK
 8015a4c:	613b      	str	r3, [r7, #16]
  return(result);
 8015a4e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015a50:	61fb      	str	r3, [r7, #28]
 8015a52:	2301      	movs	r3, #1
 8015a54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a56:	697b      	ldr	r3, [r7, #20]
 8015a58:	f383 8810 	msr	PRIMASK, r3
}
 8015a5c:	46c0      	nop			@ (mov r8, r8)
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	681a      	ldr	r2, [r3, #0]
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	681b      	ldr	r3, [r3, #0]
 8015a68:	2180      	movs	r1, #128	@ 0x80
 8015a6a:	04c9      	lsls	r1, r1, #19
 8015a6c:	430a      	orrs	r2, r1
 8015a6e:	601a      	str	r2, [r3, #0]
 8015a70:	69fb      	ldr	r3, [r7, #28]
 8015a72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015a74:	69bb      	ldr	r3, [r7, #24]
 8015a76:	f383 8810 	msr	PRIMASK, r3
}
 8015a7a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015a7c:	1dbb      	adds	r3, r7, #6
 8015a7e:	881a      	ldrh	r2, [r3, #0]
 8015a80:	68b9      	ldr	r1, [r7, #8]
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	0018      	movs	r0, r3
 8015a86:	f001 f8a3 	bl	8016bd0 <UART_Start_Receive_DMA>
 8015a8a:	0003      	movs	r3, r0
 8015a8c:	e000      	b.n	8015a90 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8015a8e:	2302      	movs	r3, #2
  }
}
 8015a90:	0018      	movs	r0, r3
 8015a92:	46bd      	mov	sp, r7
 8015a94:	b008      	add	sp, #32
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	40004800 	.word	0x40004800

08015a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015a9c:	b590      	push	{r4, r7, lr}
 8015a9e:	b0ab      	sub	sp, #172	@ 0xac
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	69db      	ldr	r3, [r3, #28]
 8015aaa:	22a4      	movs	r2, #164	@ 0xa4
 8015aac:	18b9      	adds	r1, r7, r2
 8015aae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	20a0      	movs	r0, #160	@ 0xa0
 8015ab8:	1839      	adds	r1, r7, r0
 8015aba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	689b      	ldr	r3, [r3, #8]
 8015ac2:	219c      	movs	r1, #156	@ 0x9c
 8015ac4:	1879      	adds	r1, r7, r1
 8015ac6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015ac8:	0011      	movs	r1, r2
 8015aca:	18bb      	adds	r3, r7, r2
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	4a9c      	ldr	r2, [pc, #624]	@ (8015d40 <HAL_UART_IRQHandler+0x2a4>)
 8015ad0:	4013      	ands	r3, r2
 8015ad2:	2298      	movs	r2, #152	@ 0x98
 8015ad4:	18bc      	adds	r4, r7, r2
 8015ad6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8015ad8:	18bb      	adds	r3, r7, r2
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d114      	bne.n	8015b0a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8015ae0:	187b      	adds	r3, r7, r1
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	2220      	movs	r2, #32
 8015ae6:	4013      	ands	r3, r2
 8015ae8:	d00f      	beq.n	8015b0a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015aea:	183b      	adds	r3, r7, r0
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2220      	movs	r2, #32
 8015af0:	4013      	ands	r3, r2
 8015af2:	d00a      	beq.n	8015b0a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d100      	bne.n	8015afe <HAL_UART_IRQHandler+0x62>
 8015afc:	e2aa      	b.n	8016054 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b02:	687a      	ldr	r2, [r7, #4]
 8015b04:	0010      	movs	r0, r2
 8015b06:	4798      	blx	r3
      }
      return;
 8015b08:	e2a4      	b.n	8016054 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015b0a:	2398      	movs	r3, #152	@ 0x98
 8015b0c:	18fb      	adds	r3, r7, r3
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d100      	bne.n	8015b16 <HAL_UART_IRQHandler+0x7a>
 8015b14:	e11a      	b.n	8015d4c <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8015b16:	239c      	movs	r3, #156	@ 0x9c
 8015b18:	18fb      	adds	r3, r7, r3
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	4013      	ands	r3, r2
 8015b20:	d106      	bne.n	8015b30 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8015b22:	23a0      	movs	r3, #160	@ 0xa0
 8015b24:	18fb      	adds	r3, r7, r3
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	4a86      	ldr	r2, [pc, #536]	@ (8015d44 <HAL_UART_IRQHandler+0x2a8>)
 8015b2a:	4013      	ands	r3, r2
 8015b2c:	d100      	bne.n	8015b30 <HAL_UART_IRQHandler+0x94>
 8015b2e:	e10d      	b.n	8015d4c <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015b30:	23a4      	movs	r3, #164	@ 0xa4
 8015b32:	18fb      	adds	r3, r7, r3
 8015b34:	681b      	ldr	r3, [r3, #0]
 8015b36:	2201      	movs	r2, #1
 8015b38:	4013      	ands	r3, r2
 8015b3a:	d012      	beq.n	8015b62 <HAL_UART_IRQHandler+0xc6>
 8015b3c:	23a0      	movs	r3, #160	@ 0xa0
 8015b3e:	18fb      	adds	r3, r7, r3
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	2380      	movs	r3, #128	@ 0x80
 8015b44:	005b      	lsls	r3, r3, #1
 8015b46:	4013      	ands	r3, r2
 8015b48:	d00b      	beq.n	8015b62 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	681b      	ldr	r3, [r3, #0]
 8015b4e:	2201      	movs	r2, #1
 8015b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2284      	movs	r2, #132	@ 0x84
 8015b56:	589b      	ldr	r3, [r3, r2]
 8015b58:	2201      	movs	r2, #1
 8015b5a:	431a      	orrs	r2, r3
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	2184      	movs	r1, #132	@ 0x84
 8015b60:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b62:	23a4      	movs	r3, #164	@ 0xa4
 8015b64:	18fb      	adds	r3, r7, r3
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	2202      	movs	r2, #2
 8015b6a:	4013      	ands	r3, r2
 8015b6c:	d011      	beq.n	8015b92 <HAL_UART_IRQHandler+0xf6>
 8015b6e:	239c      	movs	r3, #156	@ 0x9c
 8015b70:	18fb      	adds	r3, r7, r3
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	2201      	movs	r2, #1
 8015b76:	4013      	ands	r3, r2
 8015b78:	d00b      	beq.n	8015b92 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2202      	movs	r2, #2
 8015b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	2284      	movs	r2, #132	@ 0x84
 8015b86:	589b      	ldr	r3, [r3, r2]
 8015b88:	2204      	movs	r2, #4
 8015b8a:	431a      	orrs	r2, r3
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	2184      	movs	r1, #132	@ 0x84
 8015b90:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b92:	23a4      	movs	r3, #164	@ 0xa4
 8015b94:	18fb      	adds	r3, r7, r3
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	2204      	movs	r2, #4
 8015b9a:	4013      	ands	r3, r2
 8015b9c:	d011      	beq.n	8015bc2 <HAL_UART_IRQHandler+0x126>
 8015b9e:	239c      	movs	r3, #156	@ 0x9c
 8015ba0:	18fb      	adds	r3, r7, r3
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	2201      	movs	r2, #1
 8015ba6:	4013      	ands	r3, r2
 8015ba8:	d00b      	beq.n	8015bc2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	2204      	movs	r2, #4
 8015bb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2284      	movs	r2, #132	@ 0x84
 8015bb6:	589b      	ldr	r3, [r3, r2]
 8015bb8:	2202      	movs	r2, #2
 8015bba:	431a      	orrs	r2, r3
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	2184      	movs	r1, #132	@ 0x84
 8015bc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015bc2:	23a4      	movs	r3, #164	@ 0xa4
 8015bc4:	18fb      	adds	r3, r7, r3
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	2208      	movs	r2, #8
 8015bca:	4013      	ands	r3, r2
 8015bcc:	d017      	beq.n	8015bfe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8015bce:	23a0      	movs	r3, #160	@ 0xa0
 8015bd0:	18fb      	adds	r3, r7, r3
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2220      	movs	r2, #32
 8015bd6:	4013      	ands	r3, r2
 8015bd8:	d105      	bne.n	8015be6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8015bda:	239c      	movs	r3, #156	@ 0x9c
 8015bdc:	18fb      	adds	r3, r7, r3
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2201      	movs	r2, #1
 8015be2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8015be4:	d00b      	beq.n	8015bfe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	2208      	movs	r2, #8
 8015bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2284      	movs	r2, #132	@ 0x84
 8015bf2:	589b      	ldr	r3, [r3, r2]
 8015bf4:	2208      	movs	r2, #8
 8015bf6:	431a      	orrs	r2, r3
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2184      	movs	r1, #132	@ 0x84
 8015bfc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015bfe:	23a4      	movs	r3, #164	@ 0xa4
 8015c00:	18fb      	adds	r3, r7, r3
 8015c02:	681a      	ldr	r2, [r3, #0]
 8015c04:	2380      	movs	r3, #128	@ 0x80
 8015c06:	011b      	lsls	r3, r3, #4
 8015c08:	4013      	ands	r3, r2
 8015c0a:	d013      	beq.n	8015c34 <HAL_UART_IRQHandler+0x198>
 8015c0c:	23a0      	movs	r3, #160	@ 0xa0
 8015c0e:	18fb      	adds	r3, r7, r3
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	2380      	movs	r3, #128	@ 0x80
 8015c14:	04db      	lsls	r3, r3, #19
 8015c16:	4013      	ands	r3, r2
 8015c18:	d00c      	beq.n	8015c34 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	2280      	movs	r2, #128	@ 0x80
 8015c20:	0112      	lsls	r2, r2, #4
 8015c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	2284      	movs	r2, #132	@ 0x84
 8015c28:	589b      	ldr	r3, [r3, r2]
 8015c2a:	2220      	movs	r2, #32
 8015c2c:	431a      	orrs	r2, r3
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2184      	movs	r1, #132	@ 0x84
 8015c32:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	2284      	movs	r2, #132	@ 0x84
 8015c38:	589b      	ldr	r3, [r3, r2]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d100      	bne.n	8015c40 <HAL_UART_IRQHandler+0x1a4>
 8015c3e:	e20b      	b.n	8016058 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8015c40:	23a4      	movs	r3, #164	@ 0xa4
 8015c42:	18fb      	adds	r3, r7, r3
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	2220      	movs	r2, #32
 8015c48:	4013      	ands	r3, r2
 8015c4a:	d00e      	beq.n	8015c6a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8015c4c:	23a0      	movs	r3, #160	@ 0xa0
 8015c4e:	18fb      	adds	r3, r7, r3
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	2220      	movs	r2, #32
 8015c54:	4013      	ands	r3, r2
 8015c56:	d008      	beq.n	8015c6a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d004      	beq.n	8015c6a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	0010      	movs	r0, r2
 8015c68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2284      	movs	r2, #132	@ 0x84
 8015c6e:	589b      	ldr	r3, [r3, r2]
 8015c70:	2194      	movs	r1, #148	@ 0x94
 8015c72:	187a      	adds	r2, r7, r1
 8015c74:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	2240      	movs	r2, #64	@ 0x40
 8015c7e:	4013      	ands	r3, r2
 8015c80:	2b40      	cmp	r3, #64	@ 0x40
 8015c82:	d004      	beq.n	8015c8e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015c84:	187b      	adds	r3, r7, r1
 8015c86:	681b      	ldr	r3, [r3, #0]
 8015c88:	2228      	movs	r2, #40	@ 0x28
 8015c8a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c8c:	d04b      	beq.n	8015d26 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	0018      	movs	r0, r3
 8015c92:	f001 f861 	bl	8016d58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	689b      	ldr	r3, [r3, #8]
 8015c9c:	2240      	movs	r2, #64	@ 0x40
 8015c9e:	4013      	ands	r3, r2
 8015ca0:	2b40      	cmp	r3, #64	@ 0x40
 8015ca2:	d139      	bne.n	8015d18 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8015ca8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8015caa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015cac:	2090      	movs	r0, #144	@ 0x90
 8015cae:	183a      	adds	r2, r7, r0
 8015cb0:	6013      	str	r3, [r2, #0]
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8015cb8:	f383 8810 	msr	PRIMASK, r3
}
 8015cbc:	46c0      	nop			@ (mov r8, r8)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	689a      	ldr	r2, [r3, #8]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	2140      	movs	r1, #64	@ 0x40
 8015cca:	438a      	bics	r2, r1
 8015ccc:	609a      	str	r2, [r3, #8]
 8015cce:	183b      	adds	r3, r7, r0
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015cd6:	f383 8810 	msr	PRIMASK, r3
}
 8015cda:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d012      	beq.n	8015d0a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ce8:	4a17      	ldr	r2, [pc, #92]	@ (8015d48 <HAL_UART_IRQHandler+0x2ac>)
 8015cea:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cf0:	0018      	movs	r0, r3
 8015cf2:	f7f8 fa45 	bl	800e180 <HAL_DMA_Abort_IT>
 8015cf6:	1e03      	subs	r3, r0, #0
 8015cf8:	d020      	beq.n	8015d3c <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015cfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d04:	0018      	movs	r0, r3
 8015d06:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d08:	e018      	b.n	8015d3c <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	2298      	movs	r2, #152	@ 0x98
 8015d0e:	589b      	ldr	r3, [r3, r2]
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	0010      	movs	r0, r2
 8015d14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d16:	e011      	b.n	8015d3c <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2298      	movs	r2, #152	@ 0x98
 8015d1c:	589b      	ldr	r3, [r3, r2]
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	0010      	movs	r0, r2
 8015d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d24:	e00a      	b.n	8015d3c <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2298      	movs	r2, #152	@ 0x98
 8015d2a:	589b      	ldr	r3, [r3, r2]
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	0010      	movs	r0, r2
 8015d30:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	2284      	movs	r2, #132	@ 0x84
 8015d36:	2100      	movs	r1, #0
 8015d38:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8015d3a:	e18d      	b.n	8016058 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d3c:	46c0      	nop			@ (mov r8, r8)
    return;
 8015d3e:	e18b      	b.n	8016058 <HAL_UART_IRQHandler+0x5bc>
 8015d40:	0000080f 	.word	0x0000080f
 8015d44:	04000120 	.word	0x04000120
 8015d48:	080170e5 	.word	0x080170e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015d50:	2b01      	cmp	r3, #1
 8015d52:	d000      	beq.n	8015d56 <HAL_UART_IRQHandler+0x2ba>
 8015d54:	e13d      	b.n	8015fd2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015d56:	23a4      	movs	r3, #164	@ 0xa4
 8015d58:	18fb      	adds	r3, r7, r3
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	2210      	movs	r2, #16
 8015d5e:	4013      	ands	r3, r2
 8015d60:	d100      	bne.n	8015d64 <HAL_UART_IRQHandler+0x2c8>
 8015d62:	e136      	b.n	8015fd2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015d64:	23a0      	movs	r3, #160	@ 0xa0
 8015d66:	18fb      	adds	r3, r7, r3
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	2210      	movs	r2, #16
 8015d6c:	4013      	ands	r3, r2
 8015d6e:	d100      	bne.n	8015d72 <HAL_UART_IRQHandler+0x2d6>
 8015d70:	e12f      	b.n	8015fd2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	681b      	ldr	r3, [r3, #0]
 8015d76:	2210      	movs	r2, #16
 8015d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	689b      	ldr	r3, [r3, #8]
 8015d80:	2240      	movs	r2, #64	@ 0x40
 8015d82:	4013      	ands	r3, r2
 8015d84:	2b40      	cmp	r3, #64	@ 0x40
 8015d86:	d000      	beq.n	8015d8a <HAL_UART_IRQHandler+0x2ee>
 8015d88:	e0a2      	b.n	8015ed0 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	685a      	ldr	r2, [r3, #4]
 8015d92:	217e      	movs	r1, #126	@ 0x7e
 8015d94:	187b      	adds	r3, r7, r1
 8015d96:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8015d98:	187b      	adds	r3, r7, r1
 8015d9a:	881b      	ldrh	r3, [r3, #0]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d100      	bne.n	8015da2 <HAL_UART_IRQHandler+0x306>
 8015da0:	e15c      	b.n	801605c <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2258      	movs	r2, #88	@ 0x58
 8015da6:	5a9b      	ldrh	r3, [r3, r2]
 8015da8:	187a      	adds	r2, r7, r1
 8015daa:	8812      	ldrh	r2, [r2, #0]
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d300      	bcc.n	8015db2 <HAL_UART_IRQHandler+0x316>
 8015db0:	e154      	b.n	801605c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	187a      	adds	r2, r7, r1
 8015db6:	215a      	movs	r1, #90	@ 0x5a
 8015db8:	8812      	ldrh	r2, [r2, #0]
 8015dba:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	2220      	movs	r2, #32
 8015dc6:	4013      	ands	r3, r2
 8015dc8:	d16f      	bne.n	8015eaa <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dca:	f3ef 8310 	mrs	r3, PRIMASK
 8015dce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8015dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8015dd4:	2301      	movs	r3, #1
 8015dd6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dda:	f383 8810 	msr	PRIMASK, r3
}
 8015dde:	46c0      	nop			@ (mov r8, r8)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	681a      	ldr	r2, [r3, #0]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	49a0      	ldr	r1, [pc, #640]	@ (801606c <HAL_UART_IRQHandler+0x5d0>)
 8015dec:	400a      	ands	r2, r1
 8015dee:	601a      	str	r2, [r3, #0]
 8015df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8015df2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015df6:	f383 8810 	msr	PRIMASK, r3
}
 8015dfa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8015e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8015e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015e04:	677b      	str	r3, [r7, #116]	@ 0x74
 8015e06:	2301      	movs	r3, #1
 8015e08:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015e0c:	f383 8810 	msr	PRIMASK, r3
}
 8015e10:	46c0      	nop			@ (mov r8, r8)
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	689a      	ldr	r2, [r3, #8]
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	2101      	movs	r1, #1
 8015e1e:	438a      	bics	r2, r1
 8015e20:	609a      	str	r2, [r3, #8]
 8015e22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015e24:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015e28:	f383 8810 	msr	PRIMASK, r3
}
 8015e2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e32:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8015e34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015e36:	673b      	str	r3, [r7, #112]	@ 0x70
 8015e38:	2301      	movs	r3, #1
 8015e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015e3e:	f383 8810 	msr	PRIMASK, r3
}
 8015e42:	46c0      	nop			@ (mov r8, r8)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	689a      	ldr	r2, [r3, #8]
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2140      	movs	r1, #64	@ 0x40
 8015e50:	438a      	bics	r2, r1
 8015e52:	609a      	str	r2, [r3, #8]
 8015e54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8015e56:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015e5a:	f383 8810 	msr	PRIMASK, r3
}
 8015e5e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2280      	movs	r2, #128	@ 0x80
 8015e64:	2120      	movs	r1, #32
 8015e66:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e72:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8015e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015e76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8015e78:	2301      	movs	r3, #1
 8015e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015e7e:	f383 8810 	msr	PRIMASK, r3
}
 8015e82:	46c0      	nop			@ (mov r8, r8)
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	681a      	ldr	r2, [r3, #0]
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	2110      	movs	r1, #16
 8015e90:	438a      	bics	r2, r1
 8015e92:	601a      	str	r2, [r3, #0]
 8015e94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015e96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015e9a:	f383 8810 	msr	PRIMASK, r3
}
 8015e9e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ea4:	0018      	movs	r0, r3
 8015ea6:	f7f8 f92b 	bl	800e100 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	2202      	movs	r2, #2
 8015eae:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	22ac      	movs	r2, #172	@ 0xac
 8015eb4:	589b      	ldr	r3, [r3, r2]
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	2158      	movs	r1, #88	@ 0x58
 8015eba:	5a51      	ldrh	r1, [r2, r1]
 8015ebc:	687a      	ldr	r2, [r7, #4]
 8015ebe:	205a      	movs	r0, #90	@ 0x5a
 8015ec0:	5a12      	ldrh	r2, [r2, r0]
 8015ec2:	b292      	uxth	r2, r2
 8015ec4:	1a8a      	subs	r2, r1, r2
 8015ec6:	b291      	uxth	r1, r2
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	0010      	movs	r0, r2
 8015ecc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015ece:	e0c5      	b.n	801605c <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2258      	movs	r2, #88	@ 0x58
 8015ed4:	5a99      	ldrh	r1, [r3, r2]
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	225a      	movs	r2, #90	@ 0x5a
 8015eda:	5a9b      	ldrh	r3, [r3, r2]
 8015edc:	b29a      	uxth	r2, r3
 8015ede:	208e      	movs	r0, #142	@ 0x8e
 8015ee0:	183b      	adds	r3, r7, r0
 8015ee2:	1a8a      	subs	r2, r1, r2
 8015ee4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	225a      	movs	r2, #90	@ 0x5a
 8015eea:	5a9b      	ldrh	r3, [r3, r2]
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d100      	bne.n	8015ef4 <HAL_UART_IRQHandler+0x458>
 8015ef2:	e0b5      	b.n	8016060 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8015ef4:	183b      	adds	r3, r7, r0
 8015ef6:	881b      	ldrh	r3, [r3, #0]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d100      	bne.n	8015efe <HAL_UART_IRQHandler+0x462>
 8015efc:	e0b0      	b.n	8016060 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015efe:	f3ef 8310 	mrs	r3, PRIMASK
 8015f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f04:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015f06:	2488      	movs	r4, #136	@ 0x88
 8015f08:	193a      	adds	r2, r7, r4
 8015f0a:	6013      	str	r3, [r2, #0]
 8015f0c:	2301      	movs	r3, #1
 8015f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	f383 8810 	msr	PRIMASK, r3
}
 8015f16:	46c0      	nop			@ (mov r8, r8)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	681a      	ldr	r2, [r3, #0]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4953      	ldr	r1, [pc, #332]	@ (8016070 <HAL_UART_IRQHandler+0x5d4>)
 8015f24:	400a      	ands	r2, r1
 8015f26:	601a      	str	r2, [r3, #0]
 8015f28:	193b      	adds	r3, r7, r4
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f2e:	697b      	ldr	r3, [r7, #20]
 8015f30:	f383 8810 	msr	PRIMASK, r3
}
 8015f34:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f36:	f3ef 8310 	mrs	r3, PRIMASK
 8015f3a:	61bb      	str	r3, [r7, #24]
  return(result);
 8015f3c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f3e:	2484      	movs	r4, #132	@ 0x84
 8015f40:	193a      	adds	r2, r7, r4
 8015f42:	6013      	str	r3, [r2, #0]
 8015f44:	2301      	movs	r3, #1
 8015f46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f48:	69fb      	ldr	r3, [r7, #28]
 8015f4a:	f383 8810 	msr	PRIMASK, r3
}
 8015f4e:	46c0      	nop			@ (mov r8, r8)
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	689a      	ldr	r2, [r3, #8]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2101      	movs	r1, #1
 8015f5c:	438a      	bics	r2, r1
 8015f5e:	609a      	str	r2, [r3, #8]
 8015f60:	193b      	adds	r3, r7, r4
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f66:	6a3b      	ldr	r3, [r7, #32]
 8015f68:	f383 8810 	msr	PRIMASK, r3
}
 8015f6c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	2280      	movs	r2, #128	@ 0x80
 8015f72:	2120      	movs	r1, #32
 8015f74:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f82:	f3ef 8310 	mrs	r3, PRIMASK
 8015f86:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8015f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f8a:	2480      	movs	r4, #128	@ 0x80
 8015f8c:	193a      	adds	r2, r7, r4
 8015f8e:	6013      	str	r3, [r2, #0]
 8015f90:	2301      	movs	r3, #1
 8015f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f96:	f383 8810 	msr	PRIMASK, r3
}
 8015f9a:	46c0      	nop			@ (mov r8, r8)
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	681a      	ldr	r2, [r3, #0]
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2110      	movs	r1, #16
 8015fa8:	438a      	bics	r2, r1
 8015faa:	601a      	str	r2, [r3, #0]
 8015fac:	193b      	adds	r3, r7, r4
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fb4:	f383 8810 	msr	PRIMASK, r3
}
 8015fb8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2202      	movs	r2, #2
 8015fbe:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	22ac      	movs	r2, #172	@ 0xac
 8015fc4:	589b      	ldr	r3, [r3, r2]
 8015fc6:	183a      	adds	r2, r7, r0
 8015fc8:	8811      	ldrh	r1, [r2, #0]
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	0010      	movs	r0, r2
 8015fce:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015fd0:	e046      	b.n	8016060 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8015fd2:	23a4      	movs	r3, #164	@ 0xa4
 8015fd4:	18fb      	adds	r3, r7, r3
 8015fd6:	681a      	ldr	r2, [r3, #0]
 8015fd8:	2380      	movs	r3, #128	@ 0x80
 8015fda:	035b      	lsls	r3, r3, #13
 8015fdc:	4013      	ands	r3, r2
 8015fde:	d012      	beq.n	8016006 <HAL_UART_IRQHandler+0x56a>
 8015fe0:	239c      	movs	r3, #156	@ 0x9c
 8015fe2:	18fb      	adds	r3, r7, r3
 8015fe4:	681a      	ldr	r2, [r3, #0]
 8015fe6:	2380      	movs	r3, #128	@ 0x80
 8015fe8:	03db      	lsls	r3, r3, #15
 8015fea:	4013      	ands	r3, r2
 8015fec:	d00b      	beq.n	8016006 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	2280      	movs	r2, #128	@ 0x80
 8015ff4:	0352      	lsls	r2, r2, #13
 8015ff6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	22a8      	movs	r2, #168	@ 0xa8
 8015ffc:	589b      	ldr	r3, [r3, r2]
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	0010      	movs	r0, r2
 8016002:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016004:	e02f      	b.n	8016066 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8016006:	23a4      	movs	r3, #164	@ 0xa4
 8016008:	18fb      	adds	r3, r7, r3
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2280      	movs	r2, #128	@ 0x80
 801600e:	4013      	ands	r3, r2
 8016010:	d00f      	beq.n	8016032 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016012:	23a0      	movs	r3, #160	@ 0xa0
 8016014:	18fb      	adds	r3, r7, r3
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	2280      	movs	r2, #128	@ 0x80
 801601a:	4013      	ands	r3, r2
 801601c:	d009      	beq.n	8016032 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016022:	2b00      	cmp	r3, #0
 8016024:	d01e      	beq.n	8016064 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801602a:	687a      	ldr	r2, [r7, #4]
 801602c:	0010      	movs	r0, r2
 801602e:	4798      	blx	r3
    }
    return;
 8016030:	e018      	b.n	8016064 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016032:	23a4      	movs	r3, #164	@ 0xa4
 8016034:	18fb      	adds	r3, r7, r3
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	2240      	movs	r2, #64	@ 0x40
 801603a:	4013      	ands	r3, r2
 801603c:	d013      	beq.n	8016066 <HAL_UART_IRQHandler+0x5ca>
 801603e:	23a0      	movs	r3, #160	@ 0xa0
 8016040:	18fb      	adds	r3, r7, r3
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	2240      	movs	r2, #64	@ 0x40
 8016046:	4013      	ands	r3, r2
 8016048:	d00d      	beq.n	8016066 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	0018      	movs	r0, r3
 801604e:	f001 f862 	bl	8017116 <UART_EndTransmit_IT>
    return;
 8016052:	e008      	b.n	8016066 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016054:	46c0      	nop			@ (mov r8, r8)
 8016056:	e006      	b.n	8016066 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016058:	46c0      	nop			@ (mov r8, r8)
 801605a:	e004      	b.n	8016066 <HAL_UART_IRQHandler+0x5ca>
      return;
 801605c:	46c0      	nop			@ (mov r8, r8)
 801605e:	e002      	b.n	8016066 <HAL_UART_IRQHandler+0x5ca>
      return;
 8016060:	46c0      	nop			@ (mov r8, r8)
 8016062:	e000      	b.n	8016066 <HAL_UART_IRQHandler+0x5ca>
    return;
 8016064:	46c0      	nop			@ (mov r8, r8)
  }

}
 8016066:	46bd      	mov	sp, r7
 8016068:	b02b      	add	sp, #172	@ 0xac
 801606a:	bd90      	pop	{r4, r7, pc}
 801606c:	fffffeff 	.word	0xfffffeff
 8016070:	fffffedf 	.word	0xfffffedf

08016074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801607c:	46c0      	nop			@ (mov r8, r8)
 801607e:	46bd      	mov	sp, r7
 8016080:	b002      	add	sp, #8
 8016082:	bd80      	pop	{r7, pc}

08016084 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801608c:	46c0      	nop			@ (mov r8, r8)
 801608e:	46bd      	mov	sp, r7
 8016090:	b002      	add	sp, #8
 8016092:	bd80      	pop	{r7, pc}

08016094 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801609c:	46c0      	nop			@ (mov r8, r8)
 801609e:	46bd      	mov	sp, r7
 80160a0:	b002      	add	sp, #8
 80160a2:	bd80      	pop	{r7, pc}

080160a4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80160ac:	46c0      	nop			@ (mov r8, r8)
 80160ae:	46bd      	mov	sp, r7
 80160b0:	b002      	add	sp, #8
 80160b2:	bd80      	pop	{r7, pc}

080160b4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80160bc:	46c0      	nop			@ (mov r8, r8)
 80160be:	46bd      	mov	sp, r7
 80160c0:	b002      	add	sp, #8
 80160c2:	bd80      	pop	{r7, pc}

080160c4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b082      	sub	sp, #8
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80160cc:	46c0      	nop			@ (mov r8, r8)
 80160ce:	46bd      	mov	sp, r7
 80160d0:	b002      	add	sp, #8
 80160d2:	bd80      	pop	{r7, pc}

080160d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b082      	sub	sp, #8
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
 80160dc:	000a      	movs	r2, r1
 80160de:	1cbb      	adds	r3, r7, #2
 80160e0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80160e2:	46c0      	nop			@ (mov r8, r8)
 80160e4:	46bd      	mov	sp, r7
 80160e6:	b002      	add	sp, #8
 80160e8:	bd80      	pop	{r7, pc}
	...

080160ec <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b082      	sub	sp, #8
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2188      	movs	r1, #136	@ 0x88
 80160f8:	4a14      	ldr	r2, [pc, #80]	@ (801614c <UART_InitCallbacksToDefault+0x60>)
 80160fa:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	218c      	movs	r1, #140	@ 0x8c
 8016100:	4a13      	ldr	r2, [pc, #76]	@ (8016150 <UART_InitCallbacksToDefault+0x64>)
 8016102:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2190      	movs	r1, #144	@ 0x90
 8016108:	4a12      	ldr	r2, [pc, #72]	@ (8016154 <UART_InitCallbacksToDefault+0x68>)
 801610a:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2194      	movs	r1, #148	@ 0x94
 8016110:	4a11      	ldr	r2, [pc, #68]	@ (8016158 <UART_InitCallbacksToDefault+0x6c>)
 8016112:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2198      	movs	r1, #152	@ 0x98
 8016118:	4a10      	ldr	r2, [pc, #64]	@ (801615c <UART_InitCallbacksToDefault+0x70>)
 801611a:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	219c      	movs	r1, #156	@ 0x9c
 8016120:	4a0f      	ldr	r2, [pc, #60]	@ (8016160 <UART_InitCallbacksToDefault+0x74>)
 8016122:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	21a0      	movs	r1, #160	@ 0xa0
 8016128:	4a0e      	ldr	r2, [pc, #56]	@ (8016164 <UART_InitCallbacksToDefault+0x78>)
 801612a:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	21a4      	movs	r1, #164	@ 0xa4
 8016130:	4a0d      	ldr	r2, [pc, #52]	@ (8016168 <UART_InitCallbacksToDefault+0x7c>)
 8016132:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	21a8      	movs	r1, #168	@ 0xa8
 8016138:	4a0c      	ldr	r2, [pc, #48]	@ (801616c <UART_InitCallbacksToDefault+0x80>)
 801613a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	21ac      	movs	r1, #172	@ 0xac
 8016140:	4a0b      	ldr	r2, [pc, #44]	@ (8016170 <UART_InitCallbacksToDefault+0x84>)
 8016142:	505a      	str	r2, [r3, r1]

}
 8016144:	46c0      	nop			@ (mov r8, r8)
 8016146:	46bd      	mov	sp, r7
 8016148:	b002      	add	sp, #8
 801614a:	bd80      	pop	{r7, pc}
 801614c:	08016085 	.word	0x08016085
 8016150:	08016075 	.word	0x08016075
 8016154:	08016095 	.word	0x08016095
 8016158:	08007615 	.word	0x08007615
 801615c:	08003ad9 	.word	0x08003ad9
 8016160:	080160a5 	.word	0x080160a5
 8016164:	080160b5 	.word	0x080160b5
 8016168:	080160c5 	.word	0x080160c5
 801616c:	08017509 	.word	0x08017509
 8016170:	080160d5 	.word	0x080160d5

08016174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016174:	b5b0      	push	{r4, r5, r7, lr}
 8016176:	b08e      	sub	sp, #56	@ 0x38
 8016178:	af00      	add	r7, sp, #0
 801617a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801617c:	231a      	movs	r3, #26
 801617e:	2218      	movs	r2, #24
 8016180:	189b      	adds	r3, r3, r2
 8016182:	19db      	adds	r3, r3, r7
 8016184:	2200      	movs	r2, #0
 8016186:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016188:	69fb      	ldr	r3, [r7, #28]
 801618a:	689a      	ldr	r2, [r3, #8]
 801618c:	69fb      	ldr	r3, [r7, #28]
 801618e:	691b      	ldr	r3, [r3, #16]
 8016190:	431a      	orrs	r2, r3
 8016192:	69fb      	ldr	r3, [r7, #28]
 8016194:	695b      	ldr	r3, [r3, #20]
 8016196:	431a      	orrs	r2, r3
 8016198:	69fb      	ldr	r3, [r7, #28]
 801619a:	69db      	ldr	r3, [r3, #28]
 801619c:	4313      	orrs	r3, r2
 801619e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80161a0:	69fb      	ldr	r3, [r7, #28]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	4ac3      	ldr	r2, [pc, #780]	@ (80164b4 <UART_SetConfig+0x340>)
 80161a8:	4013      	ands	r3, r2
 80161aa:	0019      	movs	r1, r3
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161b2:	430a      	orrs	r2, r1
 80161b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80161b6:	69fb      	ldr	r3, [r7, #28]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	685b      	ldr	r3, [r3, #4]
 80161bc:	4abe      	ldr	r2, [pc, #760]	@ (80164b8 <UART_SetConfig+0x344>)
 80161be:	4013      	ands	r3, r2
 80161c0:	0019      	movs	r1, r3
 80161c2:	69fb      	ldr	r3, [r7, #28]
 80161c4:	68da      	ldr	r2, [r3, #12]
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	430a      	orrs	r2, r1
 80161cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80161ce:	69fb      	ldr	r3, [r7, #28]
 80161d0:	699b      	ldr	r3, [r3, #24]
 80161d2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80161d4:	69fb      	ldr	r3, [r7, #28]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	4ab8      	ldr	r2, [pc, #736]	@ (80164bc <UART_SetConfig+0x348>)
 80161da:	4293      	cmp	r3, r2
 80161dc:	d004      	beq.n	80161e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80161de:	69fb      	ldr	r3, [r7, #28]
 80161e0:	6a1b      	ldr	r3, [r3, #32]
 80161e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161e4:	4313      	orrs	r3, r2
 80161e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80161e8:	69fb      	ldr	r3, [r7, #28]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	689b      	ldr	r3, [r3, #8]
 80161ee:	4ab4      	ldr	r2, [pc, #720]	@ (80164c0 <UART_SetConfig+0x34c>)
 80161f0:	4013      	ands	r3, r2
 80161f2:	0019      	movs	r1, r3
 80161f4:	69fb      	ldr	r3, [r7, #28]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161fa:	430a      	orrs	r2, r1
 80161fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80161fe:	69fb      	ldr	r3, [r7, #28]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	4ab0      	ldr	r2, [pc, #704]	@ (80164c4 <UART_SetConfig+0x350>)
 8016204:	4293      	cmp	r3, r2
 8016206:	d131      	bne.n	801626c <UART_SetConfig+0xf8>
 8016208:	4baf      	ldr	r3, [pc, #700]	@ (80164c8 <UART_SetConfig+0x354>)
 801620a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801620c:	2203      	movs	r2, #3
 801620e:	4013      	ands	r3, r2
 8016210:	2b03      	cmp	r3, #3
 8016212:	d01d      	beq.n	8016250 <UART_SetConfig+0xdc>
 8016214:	d823      	bhi.n	801625e <UART_SetConfig+0xea>
 8016216:	2b02      	cmp	r3, #2
 8016218:	d00c      	beq.n	8016234 <UART_SetConfig+0xc0>
 801621a:	d820      	bhi.n	801625e <UART_SetConfig+0xea>
 801621c:	2b00      	cmp	r3, #0
 801621e:	d002      	beq.n	8016226 <UART_SetConfig+0xb2>
 8016220:	2b01      	cmp	r3, #1
 8016222:	d00e      	beq.n	8016242 <UART_SetConfig+0xce>
 8016224:	e01b      	b.n	801625e <UART_SetConfig+0xea>
 8016226:	231b      	movs	r3, #27
 8016228:	2218      	movs	r2, #24
 801622a:	189b      	adds	r3, r3, r2
 801622c:	19db      	adds	r3, r3, r7
 801622e:	2201      	movs	r2, #1
 8016230:	701a      	strb	r2, [r3, #0]
 8016232:	e0b4      	b.n	801639e <UART_SetConfig+0x22a>
 8016234:	231b      	movs	r3, #27
 8016236:	2218      	movs	r2, #24
 8016238:	189b      	adds	r3, r3, r2
 801623a:	19db      	adds	r3, r3, r7
 801623c:	2202      	movs	r2, #2
 801623e:	701a      	strb	r2, [r3, #0]
 8016240:	e0ad      	b.n	801639e <UART_SetConfig+0x22a>
 8016242:	231b      	movs	r3, #27
 8016244:	2218      	movs	r2, #24
 8016246:	189b      	adds	r3, r3, r2
 8016248:	19db      	adds	r3, r3, r7
 801624a:	2204      	movs	r2, #4
 801624c:	701a      	strb	r2, [r3, #0]
 801624e:	e0a6      	b.n	801639e <UART_SetConfig+0x22a>
 8016250:	231b      	movs	r3, #27
 8016252:	2218      	movs	r2, #24
 8016254:	189b      	adds	r3, r3, r2
 8016256:	19db      	adds	r3, r3, r7
 8016258:	2208      	movs	r2, #8
 801625a:	701a      	strb	r2, [r3, #0]
 801625c:	e09f      	b.n	801639e <UART_SetConfig+0x22a>
 801625e:	231b      	movs	r3, #27
 8016260:	2218      	movs	r2, #24
 8016262:	189b      	adds	r3, r3, r2
 8016264:	19db      	adds	r3, r3, r7
 8016266:	2210      	movs	r2, #16
 8016268:	701a      	strb	r2, [r3, #0]
 801626a:	e098      	b.n	801639e <UART_SetConfig+0x22a>
 801626c:	69fb      	ldr	r3, [r7, #28]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	4a96      	ldr	r2, [pc, #600]	@ (80164cc <UART_SetConfig+0x358>)
 8016272:	4293      	cmp	r3, r2
 8016274:	d131      	bne.n	80162da <UART_SetConfig+0x166>
 8016276:	4b94      	ldr	r3, [pc, #592]	@ (80164c8 <UART_SetConfig+0x354>)
 8016278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801627a:	220c      	movs	r2, #12
 801627c:	4013      	ands	r3, r2
 801627e:	2b0c      	cmp	r3, #12
 8016280:	d01d      	beq.n	80162be <UART_SetConfig+0x14a>
 8016282:	d823      	bhi.n	80162cc <UART_SetConfig+0x158>
 8016284:	2b08      	cmp	r3, #8
 8016286:	d00c      	beq.n	80162a2 <UART_SetConfig+0x12e>
 8016288:	d820      	bhi.n	80162cc <UART_SetConfig+0x158>
 801628a:	2b00      	cmp	r3, #0
 801628c:	d002      	beq.n	8016294 <UART_SetConfig+0x120>
 801628e:	2b04      	cmp	r3, #4
 8016290:	d00e      	beq.n	80162b0 <UART_SetConfig+0x13c>
 8016292:	e01b      	b.n	80162cc <UART_SetConfig+0x158>
 8016294:	231b      	movs	r3, #27
 8016296:	2218      	movs	r2, #24
 8016298:	189b      	adds	r3, r3, r2
 801629a:	19db      	adds	r3, r3, r7
 801629c:	2200      	movs	r2, #0
 801629e:	701a      	strb	r2, [r3, #0]
 80162a0:	e07d      	b.n	801639e <UART_SetConfig+0x22a>
 80162a2:	231b      	movs	r3, #27
 80162a4:	2218      	movs	r2, #24
 80162a6:	189b      	adds	r3, r3, r2
 80162a8:	19db      	adds	r3, r3, r7
 80162aa:	2202      	movs	r2, #2
 80162ac:	701a      	strb	r2, [r3, #0]
 80162ae:	e076      	b.n	801639e <UART_SetConfig+0x22a>
 80162b0:	231b      	movs	r3, #27
 80162b2:	2218      	movs	r2, #24
 80162b4:	189b      	adds	r3, r3, r2
 80162b6:	19db      	adds	r3, r3, r7
 80162b8:	2204      	movs	r2, #4
 80162ba:	701a      	strb	r2, [r3, #0]
 80162bc:	e06f      	b.n	801639e <UART_SetConfig+0x22a>
 80162be:	231b      	movs	r3, #27
 80162c0:	2218      	movs	r2, #24
 80162c2:	189b      	adds	r3, r3, r2
 80162c4:	19db      	adds	r3, r3, r7
 80162c6:	2208      	movs	r2, #8
 80162c8:	701a      	strb	r2, [r3, #0]
 80162ca:	e068      	b.n	801639e <UART_SetConfig+0x22a>
 80162cc:	231b      	movs	r3, #27
 80162ce:	2218      	movs	r2, #24
 80162d0:	189b      	adds	r3, r3, r2
 80162d2:	19db      	adds	r3, r3, r7
 80162d4:	2210      	movs	r2, #16
 80162d6:	701a      	strb	r2, [r3, #0]
 80162d8:	e061      	b.n	801639e <UART_SetConfig+0x22a>
 80162da:	69fb      	ldr	r3, [r7, #28]
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	4a7c      	ldr	r2, [pc, #496]	@ (80164d0 <UART_SetConfig+0x35c>)
 80162e0:	4293      	cmp	r3, r2
 80162e2:	d106      	bne.n	80162f2 <UART_SetConfig+0x17e>
 80162e4:	231b      	movs	r3, #27
 80162e6:	2218      	movs	r2, #24
 80162e8:	189b      	adds	r3, r3, r2
 80162ea:	19db      	adds	r3, r3, r7
 80162ec:	2200      	movs	r2, #0
 80162ee:	701a      	strb	r2, [r3, #0]
 80162f0:	e055      	b.n	801639e <UART_SetConfig+0x22a>
 80162f2:	69fb      	ldr	r3, [r7, #28]
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4a77      	ldr	r2, [pc, #476]	@ (80164d4 <UART_SetConfig+0x360>)
 80162f8:	4293      	cmp	r3, r2
 80162fa:	d106      	bne.n	801630a <UART_SetConfig+0x196>
 80162fc:	231b      	movs	r3, #27
 80162fe:	2218      	movs	r2, #24
 8016300:	189b      	adds	r3, r3, r2
 8016302:	19db      	adds	r3, r3, r7
 8016304:	2200      	movs	r2, #0
 8016306:	701a      	strb	r2, [r3, #0]
 8016308:	e049      	b.n	801639e <UART_SetConfig+0x22a>
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	4a6b      	ldr	r2, [pc, #428]	@ (80164bc <UART_SetConfig+0x348>)
 8016310:	4293      	cmp	r3, r2
 8016312:	d13e      	bne.n	8016392 <UART_SetConfig+0x21e>
 8016314:	4b6c      	ldr	r3, [pc, #432]	@ (80164c8 <UART_SetConfig+0x354>)
 8016316:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016318:	23c0      	movs	r3, #192	@ 0xc0
 801631a:	011b      	lsls	r3, r3, #4
 801631c:	4013      	ands	r3, r2
 801631e:	22c0      	movs	r2, #192	@ 0xc0
 8016320:	0112      	lsls	r2, r2, #4
 8016322:	4293      	cmp	r3, r2
 8016324:	d027      	beq.n	8016376 <UART_SetConfig+0x202>
 8016326:	22c0      	movs	r2, #192	@ 0xc0
 8016328:	0112      	lsls	r2, r2, #4
 801632a:	4293      	cmp	r3, r2
 801632c:	d82a      	bhi.n	8016384 <UART_SetConfig+0x210>
 801632e:	2280      	movs	r2, #128	@ 0x80
 8016330:	0112      	lsls	r2, r2, #4
 8016332:	4293      	cmp	r3, r2
 8016334:	d011      	beq.n	801635a <UART_SetConfig+0x1e6>
 8016336:	2280      	movs	r2, #128	@ 0x80
 8016338:	0112      	lsls	r2, r2, #4
 801633a:	4293      	cmp	r3, r2
 801633c:	d822      	bhi.n	8016384 <UART_SetConfig+0x210>
 801633e:	2b00      	cmp	r3, #0
 8016340:	d004      	beq.n	801634c <UART_SetConfig+0x1d8>
 8016342:	2280      	movs	r2, #128	@ 0x80
 8016344:	00d2      	lsls	r2, r2, #3
 8016346:	4293      	cmp	r3, r2
 8016348:	d00e      	beq.n	8016368 <UART_SetConfig+0x1f4>
 801634a:	e01b      	b.n	8016384 <UART_SetConfig+0x210>
 801634c:	231b      	movs	r3, #27
 801634e:	2218      	movs	r2, #24
 8016350:	189b      	adds	r3, r3, r2
 8016352:	19db      	adds	r3, r3, r7
 8016354:	2200      	movs	r2, #0
 8016356:	701a      	strb	r2, [r3, #0]
 8016358:	e021      	b.n	801639e <UART_SetConfig+0x22a>
 801635a:	231b      	movs	r3, #27
 801635c:	2218      	movs	r2, #24
 801635e:	189b      	adds	r3, r3, r2
 8016360:	19db      	adds	r3, r3, r7
 8016362:	2202      	movs	r2, #2
 8016364:	701a      	strb	r2, [r3, #0]
 8016366:	e01a      	b.n	801639e <UART_SetConfig+0x22a>
 8016368:	231b      	movs	r3, #27
 801636a:	2218      	movs	r2, #24
 801636c:	189b      	adds	r3, r3, r2
 801636e:	19db      	adds	r3, r3, r7
 8016370:	2204      	movs	r2, #4
 8016372:	701a      	strb	r2, [r3, #0]
 8016374:	e013      	b.n	801639e <UART_SetConfig+0x22a>
 8016376:	231b      	movs	r3, #27
 8016378:	2218      	movs	r2, #24
 801637a:	189b      	adds	r3, r3, r2
 801637c:	19db      	adds	r3, r3, r7
 801637e:	2208      	movs	r2, #8
 8016380:	701a      	strb	r2, [r3, #0]
 8016382:	e00c      	b.n	801639e <UART_SetConfig+0x22a>
 8016384:	231b      	movs	r3, #27
 8016386:	2218      	movs	r2, #24
 8016388:	189b      	adds	r3, r3, r2
 801638a:	19db      	adds	r3, r3, r7
 801638c:	2210      	movs	r2, #16
 801638e:	701a      	strb	r2, [r3, #0]
 8016390:	e005      	b.n	801639e <UART_SetConfig+0x22a>
 8016392:	231b      	movs	r3, #27
 8016394:	2218      	movs	r2, #24
 8016396:	189b      	adds	r3, r3, r2
 8016398:	19db      	adds	r3, r3, r7
 801639a:	2210      	movs	r2, #16
 801639c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	4a46      	ldr	r2, [pc, #280]	@ (80164bc <UART_SetConfig+0x348>)
 80163a4:	4293      	cmp	r3, r2
 80163a6:	d000      	beq.n	80163aa <UART_SetConfig+0x236>
 80163a8:	e09a      	b.n	80164e0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80163aa:	231b      	movs	r3, #27
 80163ac:	2218      	movs	r2, #24
 80163ae:	189b      	adds	r3, r3, r2
 80163b0:	19db      	adds	r3, r3, r7
 80163b2:	781b      	ldrb	r3, [r3, #0]
 80163b4:	2b08      	cmp	r3, #8
 80163b6:	d01d      	beq.n	80163f4 <UART_SetConfig+0x280>
 80163b8:	dc20      	bgt.n	80163fc <UART_SetConfig+0x288>
 80163ba:	2b04      	cmp	r3, #4
 80163bc:	d015      	beq.n	80163ea <UART_SetConfig+0x276>
 80163be:	dc1d      	bgt.n	80163fc <UART_SetConfig+0x288>
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d002      	beq.n	80163ca <UART_SetConfig+0x256>
 80163c4:	2b02      	cmp	r3, #2
 80163c6:	d005      	beq.n	80163d4 <UART_SetConfig+0x260>
 80163c8:	e018      	b.n	80163fc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80163ca:	f7fd ff3f 	bl	801424c <HAL_RCC_GetPCLK1Freq>
 80163ce:	0003      	movs	r3, r0
 80163d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80163d2:	e01c      	b.n	801640e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80163d4:	4b3c      	ldr	r3, [pc, #240]	@ (80164c8 <UART_SetConfig+0x354>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2210      	movs	r2, #16
 80163da:	4013      	ands	r3, r2
 80163dc:	d002      	beq.n	80163e4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80163de:	4b3e      	ldr	r3, [pc, #248]	@ (80164d8 <UART_SetConfig+0x364>)
 80163e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80163e2:	e014      	b.n	801640e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80163e4:	4b3d      	ldr	r3, [pc, #244]	@ (80164dc <UART_SetConfig+0x368>)
 80163e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80163e8:	e011      	b.n	801640e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80163ea:	f7fd fe7f 	bl	80140ec <HAL_RCC_GetSysClockFreq>
 80163ee:	0003      	movs	r3, r0
 80163f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80163f2:	e00c      	b.n	801640e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80163f4:	2380      	movs	r3, #128	@ 0x80
 80163f6:	021b      	lsls	r3, r3, #8
 80163f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80163fa:	e008      	b.n	801640e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80163fc:	2300      	movs	r3, #0
 80163fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016400:	231a      	movs	r3, #26
 8016402:	2218      	movs	r2, #24
 8016404:	189b      	adds	r3, r3, r2
 8016406:	19db      	adds	r3, r3, r7
 8016408:	2201      	movs	r2, #1
 801640a:	701a      	strb	r2, [r3, #0]
        break;
 801640c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801640e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016410:	2b00      	cmp	r3, #0
 8016412:	d100      	bne.n	8016416 <UART_SetConfig+0x2a2>
 8016414:	e133      	b.n	801667e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016416:	69fb      	ldr	r3, [r7, #28]
 8016418:	685a      	ldr	r2, [r3, #4]
 801641a:	0013      	movs	r3, r2
 801641c:	005b      	lsls	r3, r3, #1
 801641e:	189b      	adds	r3, r3, r2
 8016420:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016422:	429a      	cmp	r2, r3
 8016424:	d305      	bcc.n	8016432 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8016426:	69fb      	ldr	r3, [r7, #28]
 8016428:	685b      	ldr	r3, [r3, #4]
 801642a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 801642c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801642e:	429a      	cmp	r2, r3
 8016430:	d906      	bls.n	8016440 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8016432:	231a      	movs	r3, #26
 8016434:	2218      	movs	r2, #24
 8016436:	189b      	adds	r3, r3, r2
 8016438:	19db      	adds	r3, r3, r7
 801643a:	2201      	movs	r2, #1
 801643c:	701a      	strb	r2, [r3, #0]
 801643e:	e11e      	b.n	801667e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8016440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016442:	613b      	str	r3, [r7, #16]
 8016444:	2300      	movs	r3, #0
 8016446:	617b      	str	r3, [r7, #20]
 8016448:	6939      	ldr	r1, [r7, #16]
 801644a:	697a      	ldr	r2, [r7, #20]
 801644c:	000b      	movs	r3, r1
 801644e:	0e1b      	lsrs	r3, r3, #24
 8016450:	0010      	movs	r0, r2
 8016452:	0205      	lsls	r5, r0, #8
 8016454:	431d      	orrs	r5, r3
 8016456:	000b      	movs	r3, r1
 8016458:	021c      	lsls	r4, r3, #8
 801645a:	69fb      	ldr	r3, [r7, #28]
 801645c:	685b      	ldr	r3, [r3, #4]
 801645e:	085b      	lsrs	r3, r3, #1
 8016460:	60bb      	str	r3, [r7, #8]
 8016462:	2300      	movs	r3, #0
 8016464:	60fb      	str	r3, [r7, #12]
 8016466:	68b8      	ldr	r0, [r7, #8]
 8016468:	68f9      	ldr	r1, [r7, #12]
 801646a:	1900      	adds	r0, r0, r4
 801646c:	4169      	adcs	r1, r5
 801646e:	69fb      	ldr	r3, [r7, #28]
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	603b      	str	r3, [r7, #0]
 8016474:	2300      	movs	r3, #0
 8016476:	607b      	str	r3, [r7, #4]
 8016478:	683a      	ldr	r2, [r7, #0]
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	f7ea f880 	bl	8000580 <__aeabi_uldivmod>
 8016480:	0002      	movs	r2, r0
 8016482:	000b      	movs	r3, r1
 8016484:	0013      	movs	r3, r2
 8016486:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016488:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801648a:	23c0      	movs	r3, #192	@ 0xc0
 801648c:	009b      	lsls	r3, r3, #2
 801648e:	429a      	cmp	r2, r3
 8016490:	d309      	bcc.n	80164a6 <UART_SetConfig+0x332>
 8016492:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016494:	2380      	movs	r3, #128	@ 0x80
 8016496:	035b      	lsls	r3, r3, #13
 8016498:	429a      	cmp	r2, r3
 801649a:	d204      	bcs.n	80164a6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 801649c:	69fb      	ldr	r3, [r7, #28]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80164a2:	60da      	str	r2, [r3, #12]
 80164a4:	e0eb      	b.n	801667e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80164a6:	231a      	movs	r3, #26
 80164a8:	2218      	movs	r2, #24
 80164aa:	189b      	adds	r3, r3, r2
 80164ac:	19db      	adds	r3, r3, r7
 80164ae:	2201      	movs	r2, #1
 80164b0:	701a      	strb	r2, [r3, #0]
 80164b2:	e0e4      	b.n	801667e <UART_SetConfig+0x50a>
 80164b4:	efff69f3 	.word	0xefff69f3
 80164b8:	ffffcfff 	.word	0xffffcfff
 80164bc:	40004800 	.word	0x40004800
 80164c0:	fffff4ff 	.word	0xfffff4ff
 80164c4:	40013800 	.word	0x40013800
 80164c8:	40021000 	.word	0x40021000
 80164cc:	40004400 	.word	0x40004400
 80164d0:	40004c00 	.word	0x40004c00
 80164d4:	40005000 	.word	0x40005000
 80164d8:	003d0900 	.word	0x003d0900
 80164dc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	69da      	ldr	r2, [r3, #28]
 80164e4:	2380      	movs	r3, #128	@ 0x80
 80164e6:	021b      	lsls	r3, r3, #8
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d000      	beq.n	80164ee <UART_SetConfig+0x37a>
 80164ec:	e070      	b.n	80165d0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80164ee:	231b      	movs	r3, #27
 80164f0:	2218      	movs	r2, #24
 80164f2:	189b      	adds	r3, r3, r2
 80164f4:	19db      	adds	r3, r3, r7
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	2b08      	cmp	r3, #8
 80164fa:	d822      	bhi.n	8016542 <UART_SetConfig+0x3ce>
 80164fc:	009a      	lsls	r2, r3, #2
 80164fe:	4b67      	ldr	r3, [pc, #412]	@ (801669c <UART_SetConfig+0x528>)
 8016500:	18d3      	adds	r3, r2, r3
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016506:	f7fd fea1 	bl	801424c <HAL_RCC_GetPCLK1Freq>
 801650a:	0003      	movs	r3, r0
 801650c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801650e:	e021      	b.n	8016554 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016510:	f7fd feb2 	bl	8014278 <HAL_RCC_GetPCLK2Freq>
 8016514:	0003      	movs	r3, r0
 8016516:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016518:	e01c      	b.n	8016554 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801651a:	4b61      	ldr	r3, [pc, #388]	@ (80166a0 <UART_SetConfig+0x52c>)
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	2210      	movs	r2, #16
 8016520:	4013      	ands	r3, r2
 8016522:	d002      	beq.n	801652a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016524:	4b5f      	ldr	r3, [pc, #380]	@ (80166a4 <UART_SetConfig+0x530>)
 8016526:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016528:	e014      	b.n	8016554 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 801652a:	4b5f      	ldr	r3, [pc, #380]	@ (80166a8 <UART_SetConfig+0x534>)
 801652c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801652e:	e011      	b.n	8016554 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016530:	f7fd fddc 	bl	80140ec <HAL_RCC_GetSysClockFreq>
 8016534:	0003      	movs	r3, r0
 8016536:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016538:	e00c      	b.n	8016554 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801653a:	2380      	movs	r3, #128	@ 0x80
 801653c:	021b      	lsls	r3, r3, #8
 801653e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016540:	e008      	b.n	8016554 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8016542:	2300      	movs	r3, #0
 8016544:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016546:	231a      	movs	r3, #26
 8016548:	2218      	movs	r2, #24
 801654a:	189b      	adds	r3, r3, r2
 801654c:	19db      	adds	r3, r3, r7
 801654e:	2201      	movs	r2, #1
 8016550:	701a      	strb	r2, [r3, #0]
        break;
 8016552:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016556:	2b00      	cmp	r3, #0
 8016558:	d100      	bne.n	801655c <UART_SetConfig+0x3e8>
 801655a:	e090      	b.n	801667e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801655c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801655e:	005a      	lsls	r2, r3, #1
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	085b      	lsrs	r3, r3, #1
 8016566:	18d2      	adds	r2, r2, r3
 8016568:	69fb      	ldr	r3, [r7, #28]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	0019      	movs	r1, r3
 801656e:	0010      	movs	r0, r2
 8016570:	f7e9 fe18 	bl	80001a4 <__udivsi3>
 8016574:	0003      	movs	r3, r0
 8016576:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801657a:	2b0f      	cmp	r3, #15
 801657c:	d921      	bls.n	80165c2 <UART_SetConfig+0x44e>
 801657e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016580:	2380      	movs	r3, #128	@ 0x80
 8016582:	025b      	lsls	r3, r3, #9
 8016584:	429a      	cmp	r2, r3
 8016586:	d21c      	bcs.n	80165c2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801658a:	b29a      	uxth	r2, r3
 801658c:	200e      	movs	r0, #14
 801658e:	2418      	movs	r4, #24
 8016590:	1903      	adds	r3, r0, r4
 8016592:	19db      	adds	r3, r3, r7
 8016594:	210f      	movs	r1, #15
 8016596:	438a      	bics	r2, r1
 8016598:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801659a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801659c:	085b      	lsrs	r3, r3, #1
 801659e:	b29b      	uxth	r3, r3
 80165a0:	2207      	movs	r2, #7
 80165a2:	4013      	ands	r3, r2
 80165a4:	b299      	uxth	r1, r3
 80165a6:	1903      	adds	r3, r0, r4
 80165a8:	19db      	adds	r3, r3, r7
 80165aa:	1902      	adds	r2, r0, r4
 80165ac:	19d2      	adds	r2, r2, r7
 80165ae:	8812      	ldrh	r2, [r2, #0]
 80165b0:	430a      	orrs	r2, r1
 80165b2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80165b4:	69fb      	ldr	r3, [r7, #28]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	1902      	adds	r2, r0, r4
 80165ba:	19d2      	adds	r2, r2, r7
 80165bc:	8812      	ldrh	r2, [r2, #0]
 80165be:	60da      	str	r2, [r3, #12]
 80165c0:	e05d      	b.n	801667e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80165c2:	231a      	movs	r3, #26
 80165c4:	2218      	movs	r2, #24
 80165c6:	189b      	adds	r3, r3, r2
 80165c8:	19db      	adds	r3, r3, r7
 80165ca:	2201      	movs	r2, #1
 80165cc:	701a      	strb	r2, [r3, #0]
 80165ce:	e056      	b.n	801667e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80165d0:	231b      	movs	r3, #27
 80165d2:	2218      	movs	r2, #24
 80165d4:	189b      	adds	r3, r3, r2
 80165d6:	19db      	adds	r3, r3, r7
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	2b08      	cmp	r3, #8
 80165dc:	d822      	bhi.n	8016624 <UART_SetConfig+0x4b0>
 80165de:	009a      	lsls	r2, r3, #2
 80165e0:	4b32      	ldr	r3, [pc, #200]	@ (80166ac <UART_SetConfig+0x538>)
 80165e2:	18d3      	adds	r3, r2, r3
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80165e8:	f7fd fe30 	bl	801424c <HAL_RCC_GetPCLK1Freq>
 80165ec:	0003      	movs	r3, r0
 80165ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80165f0:	e021      	b.n	8016636 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80165f2:	f7fd fe41 	bl	8014278 <HAL_RCC_GetPCLK2Freq>
 80165f6:	0003      	movs	r3, r0
 80165f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80165fa:	e01c      	b.n	8016636 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80165fc:	4b28      	ldr	r3, [pc, #160]	@ (80166a0 <UART_SetConfig+0x52c>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	2210      	movs	r2, #16
 8016602:	4013      	ands	r3, r2
 8016604:	d002      	beq.n	801660c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016606:	4b27      	ldr	r3, [pc, #156]	@ (80166a4 <UART_SetConfig+0x530>)
 8016608:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801660a:	e014      	b.n	8016636 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 801660c:	4b26      	ldr	r3, [pc, #152]	@ (80166a8 <UART_SetConfig+0x534>)
 801660e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016610:	e011      	b.n	8016636 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016612:	f7fd fd6b 	bl	80140ec <HAL_RCC_GetSysClockFreq>
 8016616:	0003      	movs	r3, r0
 8016618:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801661a:	e00c      	b.n	8016636 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801661c:	2380      	movs	r3, #128	@ 0x80
 801661e:	021b      	lsls	r3, r3, #8
 8016620:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016622:	e008      	b.n	8016636 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8016624:	2300      	movs	r3, #0
 8016626:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016628:	231a      	movs	r3, #26
 801662a:	2218      	movs	r2, #24
 801662c:	189b      	adds	r3, r3, r2
 801662e:	19db      	adds	r3, r3, r7
 8016630:	2201      	movs	r2, #1
 8016632:	701a      	strb	r2, [r3, #0]
        break;
 8016634:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8016636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016638:	2b00      	cmp	r3, #0
 801663a:	d020      	beq.n	801667e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801663c:	69fb      	ldr	r3, [r7, #28]
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	085a      	lsrs	r2, r3, #1
 8016642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016644:	18d2      	adds	r2, r2, r3
 8016646:	69fb      	ldr	r3, [r7, #28]
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	0019      	movs	r1, r3
 801664c:	0010      	movs	r0, r2
 801664e:	f7e9 fda9 	bl	80001a4 <__udivsi3>
 8016652:	0003      	movs	r3, r0
 8016654:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016658:	2b0f      	cmp	r3, #15
 801665a:	d90a      	bls.n	8016672 <UART_SetConfig+0x4fe>
 801665c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801665e:	2380      	movs	r3, #128	@ 0x80
 8016660:	025b      	lsls	r3, r3, #9
 8016662:	429a      	cmp	r2, r3
 8016664:	d205      	bcs.n	8016672 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016668:	b29a      	uxth	r2, r3
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	60da      	str	r2, [r3, #12]
 8016670:	e005      	b.n	801667e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8016672:	231a      	movs	r3, #26
 8016674:	2218      	movs	r2, #24
 8016676:	189b      	adds	r3, r3, r2
 8016678:	19db      	adds	r3, r3, r7
 801667a:	2201      	movs	r2, #1
 801667c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801667e:	69fb      	ldr	r3, [r7, #28]
 8016680:	2200      	movs	r2, #0
 8016682:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8016684:	69fb      	ldr	r3, [r7, #28]
 8016686:	2200      	movs	r2, #0
 8016688:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801668a:	231a      	movs	r3, #26
 801668c:	2218      	movs	r2, #24
 801668e:	189b      	adds	r3, r3, r2
 8016690:	19db      	adds	r3, r3, r7
 8016692:	781b      	ldrb	r3, [r3, #0]
}
 8016694:	0018      	movs	r0, r3
 8016696:	46bd      	mov	sp, r7
 8016698:	b00e      	add	sp, #56	@ 0x38
 801669a:	bdb0      	pop	{r4, r5, r7, pc}
 801669c:	0802339c 	.word	0x0802339c
 80166a0:	40021000 	.word	0x40021000
 80166a4:	003d0900 	.word	0x003d0900
 80166a8:	00f42400 	.word	0x00f42400
 80166ac:	080233c0 	.word	0x080233c0

080166b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166bc:	2201      	movs	r2, #1
 80166be:	4013      	ands	r3, r2
 80166c0:	d00b      	beq.n	80166da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	685b      	ldr	r3, [r3, #4]
 80166c8:	4a4a      	ldr	r2, [pc, #296]	@ (80167f4 <UART_AdvFeatureConfig+0x144>)
 80166ca:	4013      	ands	r3, r2
 80166cc:	0019      	movs	r1, r3
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	430a      	orrs	r2, r1
 80166d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166de:	2202      	movs	r2, #2
 80166e0:	4013      	ands	r3, r2
 80166e2:	d00b      	beq.n	80166fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	685b      	ldr	r3, [r3, #4]
 80166ea:	4a43      	ldr	r2, [pc, #268]	@ (80167f8 <UART_AdvFeatureConfig+0x148>)
 80166ec:	4013      	ands	r3, r2
 80166ee:	0019      	movs	r1, r3
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	430a      	orrs	r2, r1
 80166fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016700:	2204      	movs	r2, #4
 8016702:	4013      	ands	r3, r2
 8016704:	d00b      	beq.n	801671e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	4a3b      	ldr	r2, [pc, #236]	@ (80167fc <UART_AdvFeatureConfig+0x14c>)
 801670e:	4013      	ands	r3, r2
 8016710:	0019      	movs	r1, r3
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	430a      	orrs	r2, r1
 801671c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016722:	2208      	movs	r2, #8
 8016724:	4013      	ands	r3, r2
 8016726:	d00b      	beq.n	8016740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	4a34      	ldr	r2, [pc, #208]	@ (8016800 <UART_AdvFeatureConfig+0x150>)
 8016730:	4013      	ands	r3, r2
 8016732:	0019      	movs	r1, r3
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	430a      	orrs	r2, r1
 801673e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016744:	2210      	movs	r2, #16
 8016746:	4013      	ands	r3, r2
 8016748:	d00b      	beq.n	8016762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	689b      	ldr	r3, [r3, #8]
 8016750:	4a2c      	ldr	r2, [pc, #176]	@ (8016804 <UART_AdvFeatureConfig+0x154>)
 8016752:	4013      	ands	r3, r2
 8016754:	0019      	movs	r1, r3
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	430a      	orrs	r2, r1
 8016760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016766:	2220      	movs	r2, #32
 8016768:	4013      	ands	r3, r2
 801676a:	d00b      	beq.n	8016784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	689b      	ldr	r3, [r3, #8]
 8016772:	4a25      	ldr	r2, [pc, #148]	@ (8016808 <UART_AdvFeatureConfig+0x158>)
 8016774:	4013      	ands	r3, r2
 8016776:	0019      	movs	r1, r3
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	430a      	orrs	r2, r1
 8016782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016788:	2240      	movs	r2, #64	@ 0x40
 801678a:	4013      	ands	r3, r2
 801678c:	d01d      	beq.n	80167ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	4a1d      	ldr	r2, [pc, #116]	@ (801680c <UART_AdvFeatureConfig+0x15c>)
 8016796:	4013      	ands	r3, r2
 8016798:	0019      	movs	r1, r3
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	430a      	orrs	r2, r1
 80167a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80167aa:	2380      	movs	r3, #128	@ 0x80
 80167ac:	035b      	lsls	r3, r3, #13
 80167ae:	429a      	cmp	r2, r3
 80167b0:	d10b      	bne.n	80167ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	4a15      	ldr	r2, [pc, #84]	@ (8016810 <UART_AdvFeatureConfig+0x160>)
 80167ba:	4013      	ands	r3, r2
 80167bc:	0019      	movs	r1, r3
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	430a      	orrs	r2, r1
 80167c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80167ce:	2280      	movs	r2, #128	@ 0x80
 80167d0:	4013      	ands	r3, r2
 80167d2:	d00b      	beq.n	80167ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	4a0e      	ldr	r2, [pc, #56]	@ (8016814 <UART_AdvFeatureConfig+0x164>)
 80167dc:	4013      	ands	r3, r2
 80167de:	0019      	movs	r1, r3
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	430a      	orrs	r2, r1
 80167ea:	605a      	str	r2, [r3, #4]
  }
}
 80167ec:	46c0      	nop			@ (mov r8, r8)
 80167ee:	46bd      	mov	sp, r7
 80167f0:	b002      	add	sp, #8
 80167f2:	bd80      	pop	{r7, pc}
 80167f4:	fffdffff 	.word	0xfffdffff
 80167f8:	fffeffff 	.word	0xfffeffff
 80167fc:	fffbffff 	.word	0xfffbffff
 8016800:	ffff7fff 	.word	0xffff7fff
 8016804:	ffffefff 	.word	0xffffefff
 8016808:	ffffdfff 	.word	0xffffdfff
 801680c:	ffefffff 	.word	0xffefffff
 8016810:	ff9fffff 	.word	0xff9fffff
 8016814:	fff7ffff 	.word	0xfff7ffff

08016818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016818:	b580      	push	{r7, lr}
 801681a:	b092      	sub	sp, #72	@ 0x48
 801681c:	af02      	add	r7, sp, #8
 801681e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2284      	movs	r2, #132	@ 0x84
 8016824:	2100      	movs	r1, #0
 8016826:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016828:	f7f6 fee4 	bl	800d5f4 <HAL_GetTick>
 801682c:	0003      	movs	r3, r0
 801682e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2208      	movs	r2, #8
 8016838:	4013      	ands	r3, r2
 801683a:	2b08      	cmp	r3, #8
 801683c:	d12c      	bne.n	8016898 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801683e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016840:	2280      	movs	r2, #128	@ 0x80
 8016842:	0391      	lsls	r1, r2, #14
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	4a46      	ldr	r2, [pc, #280]	@ (8016960 <UART_CheckIdleState+0x148>)
 8016848:	9200      	str	r2, [sp, #0]
 801684a:	2200      	movs	r2, #0
 801684c:	f000 f88c 	bl	8016968 <UART_WaitOnFlagUntilTimeout>
 8016850:	1e03      	subs	r3, r0, #0
 8016852:	d021      	beq.n	8016898 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016854:	f3ef 8310 	mrs	r3, PRIMASK
 8016858:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 801685c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801685e:	2301      	movs	r3, #1
 8016860:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016864:	f383 8810 	msr	PRIMASK, r3
}
 8016868:	46c0      	nop			@ (mov r8, r8)
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	681a      	ldr	r2, [r3, #0]
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2180      	movs	r1, #128	@ 0x80
 8016876:	438a      	bics	r2, r1
 8016878:	601a      	str	r2, [r3, #0]
 801687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801687c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016880:	f383 8810 	msr	PRIMASK, r3
}
 8016884:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2220      	movs	r2, #32
 801688a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	2278      	movs	r2, #120	@ 0x78
 8016890:	2100      	movs	r1, #0
 8016892:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016894:	2303      	movs	r3, #3
 8016896:	e05f      	b.n	8016958 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	2204      	movs	r2, #4
 80168a0:	4013      	ands	r3, r2
 80168a2:	2b04      	cmp	r3, #4
 80168a4:	d146      	bne.n	8016934 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80168a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80168a8:	2280      	movs	r2, #128	@ 0x80
 80168aa:	03d1      	lsls	r1, r2, #15
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	4a2c      	ldr	r2, [pc, #176]	@ (8016960 <UART_CheckIdleState+0x148>)
 80168b0:	9200      	str	r2, [sp, #0]
 80168b2:	2200      	movs	r2, #0
 80168b4:	f000 f858 	bl	8016968 <UART_WaitOnFlagUntilTimeout>
 80168b8:	1e03      	subs	r3, r0, #0
 80168ba:	d03b      	beq.n	8016934 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168bc:	f3ef 8310 	mrs	r3, PRIMASK
 80168c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80168c2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80168c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80168c6:	2301      	movs	r3, #1
 80168c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	f383 8810 	msr	PRIMASK, r3
}
 80168d0:	46c0      	nop			@ (mov r8, r8)
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	681a      	ldr	r2, [r3, #0]
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	4921      	ldr	r1, [pc, #132]	@ (8016964 <UART_CheckIdleState+0x14c>)
 80168de:	400a      	ands	r2, r1
 80168e0:	601a      	str	r2, [r3, #0]
 80168e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80168e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	f383 8810 	msr	PRIMASK, r3
}
 80168ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168ee:	f3ef 8310 	mrs	r3, PRIMASK
 80168f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80168f4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80168f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80168f8:	2301      	movs	r3, #1
 80168fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168fc:	69fb      	ldr	r3, [r7, #28]
 80168fe:	f383 8810 	msr	PRIMASK, r3
}
 8016902:	46c0      	nop			@ (mov r8, r8)
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	689a      	ldr	r2, [r3, #8]
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	2101      	movs	r1, #1
 8016910:	438a      	bics	r2, r1
 8016912:	609a      	str	r2, [r3, #8]
 8016914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016916:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016918:	6a3b      	ldr	r3, [r7, #32]
 801691a:	f383 8810 	msr	PRIMASK, r3
}
 801691e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2280      	movs	r2, #128	@ 0x80
 8016924:	2120      	movs	r1, #32
 8016926:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	2278      	movs	r2, #120	@ 0x78
 801692c:	2100      	movs	r1, #0
 801692e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016930:	2303      	movs	r3, #3
 8016932:	e011      	b.n	8016958 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2220      	movs	r2, #32
 8016938:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2280      	movs	r2, #128	@ 0x80
 801693e:	2120      	movs	r1, #32
 8016940:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2200      	movs	r2, #0
 8016946:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	2200      	movs	r2, #0
 801694c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	2278      	movs	r2, #120	@ 0x78
 8016952:	2100      	movs	r1, #0
 8016954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8016956:	2300      	movs	r3, #0
}
 8016958:	0018      	movs	r0, r3
 801695a:	46bd      	mov	sp, r7
 801695c:	b010      	add	sp, #64	@ 0x40
 801695e:	bd80      	pop	{r7, pc}
 8016960:	01ffffff 	.word	0x01ffffff
 8016964:	fffffedf 	.word	0xfffffedf

08016968 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b084      	sub	sp, #16
 801696c:	af00      	add	r7, sp, #0
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	60b9      	str	r1, [r7, #8]
 8016972:	603b      	str	r3, [r7, #0]
 8016974:	1dfb      	adds	r3, r7, #7
 8016976:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016978:	e04b      	b.n	8016a12 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801697a:	69bb      	ldr	r3, [r7, #24]
 801697c:	3301      	adds	r3, #1
 801697e:	d048      	beq.n	8016a12 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016980:	f7f6 fe38 	bl	800d5f4 <HAL_GetTick>
 8016984:	0002      	movs	r2, r0
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	1ad3      	subs	r3, r2, r3
 801698a:	69ba      	ldr	r2, [r7, #24]
 801698c:	429a      	cmp	r2, r3
 801698e:	d302      	bcc.n	8016996 <UART_WaitOnFlagUntilTimeout+0x2e>
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d101      	bne.n	801699a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8016996:	2303      	movs	r3, #3
 8016998:	e04b      	b.n	8016a32 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	2204      	movs	r2, #4
 80169a2:	4013      	ands	r3, r2
 80169a4:	d035      	beq.n	8016a12 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	69db      	ldr	r3, [r3, #28]
 80169ac:	2208      	movs	r2, #8
 80169ae:	4013      	ands	r3, r2
 80169b0:	2b08      	cmp	r3, #8
 80169b2:	d111      	bne.n	80169d8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	2208      	movs	r2, #8
 80169ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	0018      	movs	r0, r3
 80169c0:	f000 f9ca 	bl	8016d58 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2284      	movs	r2, #132	@ 0x84
 80169c8:	2108      	movs	r1, #8
 80169ca:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	2278      	movs	r2, #120	@ 0x78
 80169d0:	2100      	movs	r1, #0
 80169d2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80169d4:	2301      	movs	r3, #1
 80169d6:	e02c      	b.n	8016a32 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	69da      	ldr	r2, [r3, #28]
 80169de:	2380      	movs	r3, #128	@ 0x80
 80169e0:	011b      	lsls	r3, r3, #4
 80169e2:	401a      	ands	r2, r3
 80169e4:	2380      	movs	r3, #128	@ 0x80
 80169e6:	011b      	lsls	r3, r3, #4
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d112      	bne.n	8016a12 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	2280      	movs	r2, #128	@ 0x80
 80169f2:	0112      	lsls	r2, r2, #4
 80169f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	0018      	movs	r0, r3
 80169fa:	f000 f9ad 	bl	8016d58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	2284      	movs	r2, #132	@ 0x84
 8016a02:	2120      	movs	r1, #32
 8016a04:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	2278      	movs	r2, #120	@ 0x78
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8016a0e:	2303      	movs	r3, #3
 8016a10:	e00f      	b.n	8016a32 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	69db      	ldr	r3, [r3, #28]
 8016a18:	68ba      	ldr	r2, [r7, #8]
 8016a1a:	4013      	ands	r3, r2
 8016a1c:	68ba      	ldr	r2, [r7, #8]
 8016a1e:	1ad3      	subs	r3, r2, r3
 8016a20:	425a      	negs	r2, r3
 8016a22:	4153      	adcs	r3, r2
 8016a24:	b2db      	uxtb	r3, r3
 8016a26:	001a      	movs	r2, r3
 8016a28:	1dfb      	adds	r3, r7, #7
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d0a4      	beq.n	801697a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8016a30:	2300      	movs	r3, #0
}
 8016a32:	0018      	movs	r0, r3
 8016a34:	46bd      	mov	sp, r7
 8016a36:	b004      	add	sp, #16
 8016a38:	bd80      	pop	{r7, pc}
	...

08016a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b090      	sub	sp, #64	@ 0x40
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	60f8      	str	r0, [r7, #12]
 8016a44:	60b9      	str	r1, [r7, #8]
 8016a46:	1dbb      	adds	r3, r7, #6
 8016a48:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	68ba      	ldr	r2, [r7, #8]
 8016a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	1dba      	adds	r2, r7, #6
 8016a54:	2158      	movs	r1, #88	@ 0x58
 8016a56:	8812      	ldrh	r2, [r2, #0]
 8016a58:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	1dba      	adds	r2, r7, #6
 8016a5e:	215a      	movs	r1, #90	@ 0x5a
 8016a60:	8812      	ldrh	r2, [r2, #0]
 8016a62:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8016a64:	68fb      	ldr	r3, [r7, #12]
 8016a66:	2200      	movs	r2, #0
 8016a68:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	689a      	ldr	r2, [r3, #8]
 8016a6e:	2380      	movs	r3, #128	@ 0x80
 8016a70:	015b      	lsls	r3, r3, #5
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d10d      	bne.n	8016a92 <UART_Start_Receive_IT+0x56>
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	691b      	ldr	r3, [r3, #16]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d104      	bne.n	8016a88 <UART_Start_Receive_IT+0x4c>
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	225c      	movs	r2, #92	@ 0x5c
 8016a82:	4950      	ldr	r1, [pc, #320]	@ (8016bc4 <UART_Start_Receive_IT+0x188>)
 8016a84:	5299      	strh	r1, [r3, r2]
 8016a86:	e02e      	b.n	8016ae6 <UART_Start_Receive_IT+0xaa>
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	225c      	movs	r2, #92	@ 0x5c
 8016a8c:	21ff      	movs	r1, #255	@ 0xff
 8016a8e:	5299      	strh	r1, [r3, r2]
 8016a90:	e029      	b.n	8016ae6 <UART_Start_Receive_IT+0xaa>
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	689b      	ldr	r3, [r3, #8]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d10d      	bne.n	8016ab6 <UART_Start_Receive_IT+0x7a>
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	691b      	ldr	r3, [r3, #16]
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d104      	bne.n	8016aac <UART_Start_Receive_IT+0x70>
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	225c      	movs	r2, #92	@ 0x5c
 8016aa6:	21ff      	movs	r1, #255	@ 0xff
 8016aa8:	5299      	strh	r1, [r3, r2]
 8016aaa:	e01c      	b.n	8016ae6 <UART_Start_Receive_IT+0xaa>
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	225c      	movs	r2, #92	@ 0x5c
 8016ab0:	217f      	movs	r1, #127	@ 0x7f
 8016ab2:	5299      	strh	r1, [r3, r2]
 8016ab4:	e017      	b.n	8016ae6 <UART_Start_Receive_IT+0xaa>
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	689a      	ldr	r2, [r3, #8]
 8016aba:	2380      	movs	r3, #128	@ 0x80
 8016abc:	055b      	lsls	r3, r3, #21
 8016abe:	429a      	cmp	r2, r3
 8016ac0:	d10d      	bne.n	8016ade <UART_Start_Receive_IT+0xa2>
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	691b      	ldr	r3, [r3, #16]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d104      	bne.n	8016ad4 <UART_Start_Receive_IT+0x98>
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	225c      	movs	r2, #92	@ 0x5c
 8016ace:	217f      	movs	r1, #127	@ 0x7f
 8016ad0:	5299      	strh	r1, [r3, r2]
 8016ad2:	e008      	b.n	8016ae6 <UART_Start_Receive_IT+0xaa>
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	225c      	movs	r2, #92	@ 0x5c
 8016ad8:	213f      	movs	r1, #63	@ 0x3f
 8016ada:	5299      	strh	r1, [r3, r2]
 8016adc:	e003      	b.n	8016ae6 <UART_Start_Receive_IT+0xaa>
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	225c      	movs	r2, #92	@ 0x5c
 8016ae2:	2100      	movs	r1, #0
 8016ae4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	2284      	movs	r2, #132	@ 0x84
 8016aea:	2100      	movs	r1, #0
 8016aec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016aee:	68fb      	ldr	r3, [r7, #12]
 8016af0:	2280      	movs	r2, #128	@ 0x80
 8016af2:	2122      	movs	r1, #34	@ 0x22
 8016af4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016af6:	f3ef 8310 	mrs	r3, PRIMASK
 8016afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8016afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016b00:	2301      	movs	r3, #1
 8016b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b06:	f383 8810 	msr	PRIMASK, r3
}
 8016b0a:	46c0      	nop			@ (mov r8, r8)
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	689a      	ldr	r2, [r3, #8]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	2101      	movs	r1, #1
 8016b18:	430a      	orrs	r2, r1
 8016b1a:	609a      	str	r2, [r3, #8]
 8016b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016b1e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b22:	f383 8810 	msr	PRIMASK, r3
}
 8016b26:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	689a      	ldr	r2, [r3, #8]
 8016b2c:	2380      	movs	r3, #128	@ 0x80
 8016b2e:	015b      	lsls	r3, r3, #5
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d107      	bne.n	8016b44 <UART_Start_Receive_IT+0x108>
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	691b      	ldr	r3, [r3, #16]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d103      	bne.n	8016b44 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	4a22      	ldr	r2, [pc, #136]	@ (8016bc8 <UART_Start_Receive_IT+0x18c>)
 8016b40:	669a      	str	r2, [r3, #104]	@ 0x68
 8016b42:	e002      	b.n	8016b4a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	4a21      	ldr	r2, [pc, #132]	@ (8016bcc <UART_Start_Receive_IT+0x190>)
 8016b48:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	691b      	ldr	r3, [r3, #16]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d019      	beq.n	8016b86 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b52:	f3ef 8310 	mrs	r3, PRIMASK
 8016b56:	61fb      	str	r3, [r7, #28]
  return(result);
 8016b58:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8016b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b60:	6a3b      	ldr	r3, [r7, #32]
 8016b62:	f383 8810 	msr	PRIMASK, r3
}
 8016b66:	46c0      	nop			@ (mov r8, r8)
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	681a      	ldr	r2, [r3, #0]
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2190      	movs	r1, #144	@ 0x90
 8016b74:	0049      	lsls	r1, r1, #1
 8016b76:	430a      	orrs	r2, r1
 8016b78:	601a      	str	r2, [r3, #0]
 8016b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b80:	f383 8810 	msr	PRIMASK, r3
}
 8016b84:	e018      	b.n	8016bb8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b86:	f3ef 8310 	mrs	r3, PRIMASK
 8016b8a:	613b      	str	r3, [r7, #16]
  return(result);
 8016b8c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8016b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016b90:	2301      	movs	r3, #1
 8016b92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b94:	697b      	ldr	r3, [r7, #20]
 8016b96:	f383 8810 	msr	PRIMASK, r3
}
 8016b9a:	46c0      	nop			@ (mov r8, r8)
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	681a      	ldr	r2, [r3, #0]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	2120      	movs	r1, #32
 8016ba8:	430a      	orrs	r2, r1
 8016baa:	601a      	str	r2, [r3, #0]
 8016bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016bae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bb0:	69bb      	ldr	r3, [r7, #24]
 8016bb2:	f383 8810 	msr	PRIMASK, r3
}
 8016bb6:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8016bb8:	2300      	movs	r3, #0
}
 8016bba:	0018      	movs	r0, r3
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	b010      	add	sp, #64	@ 0x40
 8016bc0:	bd80      	pop	{r7, pc}
 8016bc2:	46c0      	nop			@ (mov r8, r8)
 8016bc4:	000001ff 	.word	0x000001ff
 8016bc8:	0801733d 	.word	0x0801733d
 8016bcc:	08017171 	.word	0x08017171

08016bd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016bd0:	b580      	push	{r7, lr}
 8016bd2:	b090      	sub	sp, #64	@ 0x40
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	60f8      	str	r0, [r7, #12]
 8016bd8:	60b9      	str	r1, [r7, #8]
 8016bda:	1dbb      	adds	r3, r7, #6
 8016bdc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	68ba      	ldr	r2, [r7, #8]
 8016be2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	1dba      	adds	r2, r7, #6
 8016be8:	2158      	movs	r1, #88	@ 0x58
 8016bea:	8812      	ldrh	r2, [r2, #0]
 8016bec:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2284      	movs	r2, #132	@ 0x84
 8016bf2:	2100      	movs	r1, #0
 8016bf4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2280      	movs	r2, #128	@ 0x80
 8016bfa:	2122      	movs	r1, #34	@ 0x22
 8016bfc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d028      	beq.n	8016c58 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8016c06:	68fb      	ldr	r3, [r7, #12]
 8016c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c0a:	4a3e      	ldr	r2, [pc, #248]	@ (8016d04 <UART_Start_Receive_DMA+0x134>)
 8016c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c12:	4a3d      	ldr	r2, [pc, #244]	@ (8016d08 <UART_Start_Receive_DMA+0x138>)
 8016c14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c1a:	4a3c      	ldr	r2, [pc, #240]	@ (8016d0c <UART_Start_Receive_DMA+0x13c>)
 8016c1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c22:	2200      	movs	r2, #0
 8016c24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	3324      	adds	r3, #36	@ 0x24
 8016c30:	0019      	movs	r1, r3
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016c36:	001a      	movs	r2, r3
 8016c38:	1dbb      	adds	r3, r7, #6
 8016c3a:	881b      	ldrh	r3, [r3, #0]
 8016c3c:	f7f7 f9fa 	bl	800e034 <HAL_DMA_Start_IT>
 8016c40:	1e03      	subs	r3, r0, #0
 8016c42:	d009      	beq.n	8016c58 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2284      	movs	r2, #132	@ 0x84
 8016c48:	2110      	movs	r1, #16
 8016c4a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	2280      	movs	r2, #128	@ 0x80
 8016c50:	2120      	movs	r1, #32
 8016c52:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8016c54:	2301      	movs	r3, #1
 8016c56:	e050      	b.n	8016cfa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	691b      	ldr	r3, [r3, #16]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d019      	beq.n	8016c94 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c60:	f3ef 8310 	mrs	r3, PRIMASK
 8016c64:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8016c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016c6a:	2301      	movs	r3, #1
 8016c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c70:	f383 8810 	msr	PRIMASK, r3
}
 8016c74:	46c0      	nop			@ (mov r8, r8)
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	681a      	ldr	r2, [r3, #0]
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	2180      	movs	r1, #128	@ 0x80
 8016c82:	0049      	lsls	r1, r1, #1
 8016c84:	430a      	orrs	r2, r1
 8016c86:	601a      	str	r2, [r3, #0]
 8016c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c8e:	f383 8810 	msr	PRIMASK, r3
}
 8016c92:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c94:	f3ef 8310 	mrs	r3, PRIMASK
 8016c98:	613b      	str	r3, [r7, #16]
  return(result);
 8016c9a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016c9e:	2301      	movs	r3, #1
 8016ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	f383 8810 	msr	PRIMASK, r3
}
 8016ca8:	46c0      	nop			@ (mov r8, r8)
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	689a      	ldr	r2, [r3, #8]
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	2101      	movs	r1, #1
 8016cb6:	430a      	orrs	r2, r1
 8016cb8:	609a      	str	r2, [r3, #8]
 8016cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016cbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cbe:	69bb      	ldr	r3, [r7, #24]
 8016cc0:	f383 8810 	msr	PRIMASK, r3
}
 8016cc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8016cca:	61fb      	str	r3, [r7, #28]
  return(result);
 8016ccc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8016cd0:	2301      	movs	r3, #1
 8016cd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cd4:	6a3b      	ldr	r3, [r7, #32]
 8016cd6:	f383 8810 	msr	PRIMASK, r3
}
 8016cda:	46c0      	nop			@ (mov r8, r8)
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	689a      	ldr	r2, [r3, #8]
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	2140      	movs	r1, #64	@ 0x40
 8016ce8:	430a      	orrs	r2, r1
 8016cea:	609a      	str	r2, [r3, #8]
 8016cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cf2:	f383 8810 	msr	PRIMASK, r3
}
 8016cf6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8016cf8:	2300      	movs	r3, #0
}
 8016cfa:	0018      	movs	r0, r3
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	b010      	add	sp, #64	@ 0x40
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	46c0      	nop			@ (mov r8, r8)
 8016d04:	08016ee1 	.word	0x08016ee1
 8016d08:	08017015 	.word	0x08017015
 8016d0c:	0801705d 	.word	0x0801705d

08016d10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b086      	sub	sp, #24
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d18:	f3ef 8310 	mrs	r3, PRIMASK
 8016d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8016d1e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016d20:	617b      	str	r3, [r7, #20]
 8016d22:	2301      	movs	r3, #1
 8016d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	f383 8810 	msr	PRIMASK, r3
}
 8016d2c:	46c0      	nop			@ (mov r8, r8)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	681a      	ldr	r2, [r3, #0]
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	21c0      	movs	r1, #192	@ 0xc0
 8016d3a:	438a      	bics	r2, r1
 8016d3c:	601a      	str	r2, [r3, #0]
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	f383 8810 	msr	PRIMASK, r3
}
 8016d48:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	2220      	movs	r2, #32
 8016d4e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8016d50:	46c0      	nop			@ (mov r8, r8)
 8016d52:	46bd      	mov	sp, r7
 8016d54:	b006      	add	sp, #24
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b08e      	sub	sp, #56	@ 0x38
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d60:	f3ef 8310 	mrs	r3, PRIMASK
 8016d64:	617b      	str	r3, [r7, #20]
  return(result);
 8016d66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d6e:	69bb      	ldr	r3, [r7, #24]
 8016d70:	f383 8810 	msr	PRIMASK, r3
}
 8016d74:	46c0      	nop			@ (mov r8, r8)
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	681a      	ldr	r2, [r3, #0]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	4926      	ldr	r1, [pc, #152]	@ (8016e1c <UART_EndRxTransfer+0xc4>)
 8016d82:	400a      	ands	r2, r1
 8016d84:	601a      	str	r2, [r3, #0]
 8016d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d8a:	69fb      	ldr	r3, [r7, #28]
 8016d8c:	f383 8810 	msr	PRIMASK, r3
}
 8016d90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d92:	f3ef 8310 	mrs	r3, PRIMASK
 8016d96:	623b      	str	r3, [r7, #32]
  return(result);
 8016d98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016da2:	f383 8810 	msr	PRIMASK, r3
}
 8016da6:	46c0      	nop			@ (mov r8, r8)
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	689a      	ldr	r2, [r3, #8]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	2101      	movs	r1, #1
 8016db4:	438a      	bics	r2, r1
 8016db6:	609a      	str	r2, [r3, #8]
 8016db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dbe:	f383 8810 	msr	PRIMASK, r3
}
 8016dc2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016dc8:	2b01      	cmp	r3, #1
 8016dca:	d118      	bne.n	8016dfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8016dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8016dd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016dd6:	2301      	movs	r3, #1
 8016dd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	f383 8810 	msr	PRIMASK, r3
}
 8016de0:	46c0      	nop			@ (mov r8, r8)
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	681a      	ldr	r2, [r3, #0]
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	2110      	movs	r1, #16
 8016dee:	438a      	bics	r2, r1
 8016df0:	601a      	str	r2, [r3, #0]
 8016df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016df6:	693b      	ldr	r3, [r7, #16]
 8016df8:	f383 8810 	msr	PRIMASK, r3
}
 8016dfc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	2280      	movs	r2, #128	@ 0x80
 8016e02:	2120      	movs	r1, #32
 8016e04:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	2200      	movs	r2, #0
 8016e0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8016e12:	46c0      	nop			@ (mov r8, r8)
 8016e14:	46bd      	mov	sp, r7
 8016e16:	b00e      	add	sp, #56	@ 0x38
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	46c0      	nop			@ (mov r8, r8)
 8016e1c:	fffffedf 	.word	0xfffffedf

08016e20 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016e20:	b580      	push	{r7, lr}
 8016e22:	b08c      	sub	sp, #48	@ 0x30
 8016e24:	af00      	add	r7, sp, #0
 8016e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	2220      	movs	r2, #32
 8016e36:	4013      	ands	r3, r2
 8016e38:	d135      	bne.n	8016ea6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8016e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e3c:	2252      	movs	r2, #82	@ 0x52
 8016e3e:	2100      	movs	r1, #0
 8016e40:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e42:	f3ef 8310 	mrs	r3, PRIMASK
 8016e46:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e48:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e50:	693b      	ldr	r3, [r7, #16]
 8016e52:	f383 8810 	msr	PRIMASK, r3
}
 8016e56:	46c0      	nop			@ (mov r8, r8)
 8016e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	689a      	ldr	r2, [r3, #8]
 8016e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	2180      	movs	r1, #128	@ 0x80
 8016e64:	438a      	bics	r2, r1
 8016e66:	609a      	str	r2, [r3, #8]
 8016e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e6c:	697b      	ldr	r3, [r7, #20]
 8016e6e:	f383 8810 	msr	PRIMASK, r3
}
 8016e72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e74:	f3ef 8310 	mrs	r3, PRIMASK
 8016e78:	61bb      	str	r3, [r7, #24]
  return(result);
 8016e7a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8016e7e:	2301      	movs	r3, #1
 8016e80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e82:	69fb      	ldr	r3, [r7, #28]
 8016e84:	f383 8810 	msr	PRIMASK, r3
}
 8016e88:	46c0      	nop			@ (mov r8, r8)
 8016e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	681a      	ldr	r2, [r3, #0]
 8016e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	2140      	movs	r1, #64	@ 0x40
 8016e96:	430a      	orrs	r2, r1
 8016e98:	601a      	str	r2, [r3, #0]
 8016e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e9e:	6a3b      	ldr	r3, [r7, #32]
 8016ea0:	f383 8810 	msr	PRIMASK, r3
}
 8016ea4:	e006      	b.n	8016eb4 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8016ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ea8:	228c      	movs	r2, #140	@ 0x8c
 8016eaa:	589b      	ldr	r3, [r3, r2]
 8016eac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016eae:	0010      	movs	r0, r2
 8016eb0:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016eb2:	46c0      	nop			@ (mov r8, r8)
 8016eb4:	46c0      	nop			@ (mov r8, r8)
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	b00c      	add	sp, #48	@ 0x30
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b084      	sub	sp, #16
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ec8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	2288      	movs	r2, #136	@ 0x88
 8016ece:	589b      	ldr	r3, [r3, r2]
 8016ed0:	68fa      	ldr	r2, [r7, #12]
 8016ed2:	0010      	movs	r0, r2
 8016ed4:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016ed6:	46c0      	nop			@ (mov r8, r8)
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	b004      	add	sp, #16
 8016edc:	bd80      	pop	{r7, pc}
	...

08016ee0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b094      	sub	sp, #80	@ 0x50
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016eec:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	2220      	movs	r2, #32
 8016ef6:	4013      	ands	r3, r2
 8016ef8:	d16f      	bne.n	8016fda <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8016efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016efc:	225a      	movs	r2, #90	@ 0x5a
 8016efe:	2100      	movs	r1, #0
 8016f00:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f02:	f3ef 8310 	mrs	r3, PRIMASK
 8016f06:	61bb      	str	r3, [r7, #24]
  return(result);
 8016f08:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8016f0c:	2301      	movs	r3, #1
 8016f0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	f383 8810 	msr	PRIMASK, r3
}
 8016f16:	46c0      	nop			@ (mov r8, r8)
 8016f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	681a      	ldr	r2, [r3, #0]
 8016f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	493b      	ldr	r1, [pc, #236]	@ (8017010 <UART_DMAReceiveCplt+0x130>)
 8016f24:	400a      	ands	r2, r1
 8016f26:	601a      	str	r2, [r3, #0]
 8016f28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016f2a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f2c:	6a3b      	ldr	r3, [r7, #32]
 8016f2e:	f383 8810 	msr	PRIMASK, r3
}
 8016f32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f34:	f3ef 8310 	mrs	r3, PRIMASK
 8016f38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8016f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8016f3e:	2301      	movs	r3, #1
 8016f40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f44:	f383 8810 	msr	PRIMASK, r3
}
 8016f48:	46c0      	nop			@ (mov r8, r8)
 8016f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	689a      	ldr	r2, [r3, #8]
 8016f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	2101      	movs	r1, #1
 8016f56:	438a      	bics	r2, r1
 8016f58:	609a      	str	r2, [r3, #8]
 8016f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016f60:	f383 8810 	msr	PRIMASK, r3
}
 8016f64:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f66:	f3ef 8310 	mrs	r3, PRIMASK
 8016f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016f6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8016f70:	2301      	movs	r3, #1
 8016f72:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f76:	f383 8810 	msr	PRIMASK, r3
}
 8016f7a:	46c0      	nop			@ (mov r8, r8)
 8016f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f7e:	681b      	ldr	r3, [r3, #0]
 8016f80:	689a      	ldr	r2, [r3, #8]
 8016f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	2140      	movs	r1, #64	@ 0x40
 8016f88:	438a      	bics	r2, r1
 8016f8a:	609a      	str	r2, [r3, #8]
 8016f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016f8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f92:	f383 8810 	msr	PRIMASK, r3
}
 8016f96:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016f9a:	2280      	movs	r2, #128	@ 0x80
 8016f9c:	2120      	movs	r1, #32
 8016f9e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016fa4:	2b01      	cmp	r3, #1
 8016fa6:	d118      	bne.n	8016fda <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8016fac:	60fb      	str	r3, [r7, #12]
  return(result);
 8016fae:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fb6:	693b      	ldr	r3, [r7, #16]
 8016fb8:	f383 8810 	msr	PRIMASK, r3
}
 8016fbc:	46c0      	nop			@ (mov r8, r8)
 8016fbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	681a      	ldr	r2, [r3, #0]
 8016fc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	2110      	movs	r1, #16
 8016fca:	438a      	bics	r2, r1
 8016fcc:	601a      	str	r2, [r3, #0]
 8016fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016fd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	f383 8810 	msr	PRIMASK, r3
}
 8016fd8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fdc:	2200      	movs	r2, #0
 8016fde:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8016fe4:	2b01      	cmp	r3, #1
 8016fe6:	d109      	bne.n	8016ffc <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8016fe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fea:	22ac      	movs	r2, #172	@ 0xac
 8016fec:	589b      	ldr	r3, [r3, r2]
 8016fee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016ff0:	2158      	movs	r1, #88	@ 0x58
 8016ff2:	5a51      	ldrh	r1, [r2, r1]
 8016ff4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016ff6:	0010      	movs	r0, r2
 8016ff8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016ffa:	e005      	b.n	8017008 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8016ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016ffe:	2294      	movs	r2, #148	@ 0x94
 8017000:	589b      	ldr	r3, [r3, r2]
 8017002:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017004:	0010      	movs	r0, r2
 8017006:	4798      	blx	r3
}
 8017008:	46c0      	nop			@ (mov r8, r8)
 801700a:	46bd      	mov	sp, r7
 801700c:	b014      	add	sp, #80	@ 0x50
 801700e:	bd80      	pop	{r7, pc}
 8017010:	fffffeff 	.word	0xfffffeff

08017014 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017014:	b580      	push	{r7, lr}
 8017016:	b084      	sub	sp, #16
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017020:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	2201      	movs	r2, #1
 8017026:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801702c:	2b01      	cmp	r3, #1
 801702e:	d10b      	bne.n	8017048 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	22ac      	movs	r2, #172	@ 0xac
 8017034:	589b      	ldr	r3, [r3, r2]
 8017036:	68fa      	ldr	r2, [r7, #12]
 8017038:	2158      	movs	r1, #88	@ 0x58
 801703a:	5a52      	ldrh	r2, [r2, r1]
 801703c:	0852      	lsrs	r2, r2, #1
 801703e:	b291      	uxth	r1, r2
 8017040:	68fa      	ldr	r2, [r7, #12]
 8017042:	0010      	movs	r0, r2
 8017044:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017046:	e005      	b.n	8017054 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	2290      	movs	r2, #144	@ 0x90
 801704c:	589b      	ldr	r3, [r3, r2]
 801704e:	68fa      	ldr	r2, [r7, #12]
 8017050:	0010      	movs	r0, r2
 8017052:	4798      	blx	r3
}
 8017054:	46c0      	nop			@ (mov r8, r8)
 8017056:	46bd      	mov	sp, r7
 8017058:	b004      	add	sp, #16
 801705a:	bd80      	pop	{r7, pc}

0801705c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b086      	sub	sp, #24
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017068:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801706e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	2280      	movs	r2, #128	@ 0x80
 8017074:	589b      	ldr	r3, [r3, r2]
 8017076:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	689b      	ldr	r3, [r3, #8]
 801707e:	2280      	movs	r2, #128	@ 0x80
 8017080:	4013      	ands	r3, r2
 8017082:	2b80      	cmp	r3, #128	@ 0x80
 8017084:	d10a      	bne.n	801709c <UART_DMAError+0x40>
 8017086:	693b      	ldr	r3, [r7, #16]
 8017088:	2b21      	cmp	r3, #33	@ 0x21
 801708a:	d107      	bne.n	801709c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801708c:	697b      	ldr	r3, [r7, #20]
 801708e:	2252      	movs	r2, #82	@ 0x52
 8017090:	2100      	movs	r1, #0
 8017092:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017094:	697b      	ldr	r3, [r7, #20]
 8017096:	0018      	movs	r0, r3
 8017098:	f7ff fe3a 	bl	8016d10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801709c:	697b      	ldr	r3, [r7, #20]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	689b      	ldr	r3, [r3, #8]
 80170a2:	2240      	movs	r2, #64	@ 0x40
 80170a4:	4013      	ands	r3, r2
 80170a6:	2b40      	cmp	r3, #64	@ 0x40
 80170a8:	d10a      	bne.n	80170c0 <UART_DMAError+0x64>
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	2b22      	cmp	r3, #34	@ 0x22
 80170ae:	d107      	bne.n	80170c0 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80170b0:	697b      	ldr	r3, [r7, #20]
 80170b2:	225a      	movs	r2, #90	@ 0x5a
 80170b4:	2100      	movs	r1, #0
 80170b6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	0018      	movs	r0, r3
 80170bc:	f7ff fe4c 	bl	8016d58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80170c0:	697b      	ldr	r3, [r7, #20]
 80170c2:	2284      	movs	r2, #132	@ 0x84
 80170c4:	589b      	ldr	r3, [r3, r2]
 80170c6:	2210      	movs	r2, #16
 80170c8:	431a      	orrs	r2, r3
 80170ca:	697b      	ldr	r3, [r7, #20]
 80170cc:	2184      	movs	r1, #132	@ 0x84
 80170ce:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80170d0:	697b      	ldr	r3, [r7, #20]
 80170d2:	2298      	movs	r2, #152	@ 0x98
 80170d4:	589b      	ldr	r3, [r3, r2]
 80170d6:	697a      	ldr	r2, [r7, #20]
 80170d8:	0010      	movs	r0, r2
 80170da:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80170dc:	46c0      	nop			@ (mov r8, r8)
 80170de:	46bd      	mov	sp, r7
 80170e0:	b006      	add	sp, #24
 80170e2:	bd80      	pop	{r7, pc}

080170e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b084      	sub	sp, #16
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80170f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	225a      	movs	r2, #90	@ 0x5a
 80170f6:	2100      	movs	r1, #0
 80170f8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	2252      	movs	r2, #82	@ 0x52
 80170fe:	2100      	movs	r1, #0
 8017100:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	2298      	movs	r2, #152	@ 0x98
 8017106:	589b      	ldr	r3, [r3, r2]
 8017108:	68fa      	ldr	r2, [r7, #12]
 801710a:	0010      	movs	r0, r2
 801710c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801710e:	46c0      	nop			@ (mov r8, r8)
 8017110:	46bd      	mov	sp, r7
 8017112:	b004      	add	sp, #16
 8017114:	bd80      	pop	{r7, pc}

08017116 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017116:	b580      	push	{r7, lr}
 8017118:	b086      	sub	sp, #24
 801711a:	af00      	add	r7, sp, #0
 801711c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801711e:	f3ef 8310 	mrs	r3, PRIMASK
 8017122:	60bb      	str	r3, [r7, #8]
  return(result);
 8017124:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017126:	617b      	str	r3, [r7, #20]
 8017128:	2301      	movs	r3, #1
 801712a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	f383 8810 	msr	PRIMASK, r3
}
 8017132:	46c0      	nop			@ (mov r8, r8)
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	681a      	ldr	r2, [r3, #0]
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	2140      	movs	r1, #64	@ 0x40
 8017140:	438a      	bics	r2, r1
 8017142:	601a      	str	r2, [r3, #0]
 8017144:	697b      	ldr	r3, [r7, #20]
 8017146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017148:	693b      	ldr	r3, [r7, #16]
 801714a:	f383 8810 	msr	PRIMASK, r3
}
 801714e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2220      	movs	r2, #32
 8017154:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	2200      	movs	r2, #0
 801715a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	228c      	movs	r2, #140	@ 0x8c
 8017160:	589b      	ldr	r3, [r3, r2]
 8017162:	687a      	ldr	r2, [r7, #4]
 8017164:	0010      	movs	r0, r2
 8017166:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017168:	46c0      	nop			@ (mov r8, r8)
 801716a:	46bd      	mov	sp, r7
 801716c:	b006      	add	sp, #24
 801716e:	bd80      	pop	{r7, pc}

08017170 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b094      	sub	sp, #80	@ 0x50
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8017178:	204e      	movs	r0, #78	@ 0x4e
 801717a:	183b      	adds	r3, r7, r0
 801717c:	687a      	ldr	r2, [r7, #4]
 801717e:	215c      	movs	r1, #92	@ 0x5c
 8017180:	5a52      	ldrh	r2, [r2, r1]
 8017182:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2280      	movs	r2, #128	@ 0x80
 8017188:	589b      	ldr	r3, [r3, r2]
 801718a:	2b22      	cmp	r3, #34	@ 0x22
 801718c:	d000      	beq.n	8017190 <UART_RxISR_8BIT+0x20>
 801718e:	e0c2      	b.n	8017316 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017196:	214c      	movs	r1, #76	@ 0x4c
 8017198:	187b      	adds	r3, r7, r1
 801719a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801719c:	187b      	adds	r3, r7, r1
 801719e:	881b      	ldrh	r3, [r3, #0]
 80171a0:	b2da      	uxtb	r2, r3
 80171a2:	183b      	adds	r3, r7, r0
 80171a4:	881b      	ldrh	r3, [r3, #0]
 80171a6:	b2d9      	uxtb	r1, r3
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80171ac:	400a      	ands	r2, r1
 80171ae:	b2d2      	uxtb	r2, r2
 80171b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80171b6:	1c5a      	adds	r2, r3, #1
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	225a      	movs	r2, #90	@ 0x5a
 80171c0:	5a9b      	ldrh	r3, [r3, r2]
 80171c2:	b29b      	uxth	r3, r3
 80171c4:	3b01      	subs	r3, #1
 80171c6:	b299      	uxth	r1, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	225a      	movs	r2, #90	@ 0x5a
 80171cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	225a      	movs	r2, #90	@ 0x5a
 80171d2:	5a9b      	ldrh	r3, [r3, r2]
 80171d4:	b29b      	uxth	r3, r3
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d000      	beq.n	80171dc <UART_RxISR_8BIT+0x6c>
 80171da:	e0a4      	b.n	8017326 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80171dc:	f3ef 8310 	mrs	r3, PRIMASK
 80171e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80171e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80171e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80171e6:	2301      	movs	r3, #1
 80171e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80171ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171ec:	f383 8810 	msr	PRIMASK, r3
}
 80171f0:	46c0      	nop			@ (mov r8, r8)
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	681a      	ldr	r2, [r3, #0]
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	494c      	ldr	r1, [pc, #304]	@ (8017330 <UART_RxISR_8BIT+0x1c0>)
 80171fe:	400a      	ands	r2, r1
 8017200:	601a      	str	r2, [r3, #0]
 8017202:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017208:	f383 8810 	msr	PRIMASK, r3
}
 801720c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801720e:	f3ef 8310 	mrs	r3, PRIMASK
 8017212:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017216:	647b      	str	r3, [r7, #68]	@ 0x44
 8017218:	2301      	movs	r3, #1
 801721a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801721c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801721e:	f383 8810 	msr	PRIMASK, r3
}
 8017222:	46c0      	nop			@ (mov r8, r8)
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	689a      	ldr	r2, [r3, #8]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	2101      	movs	r1, #1
 8017230:	438a      	bics	r2, r1
 8017232:	609a      	str	r2, [r3, #8]
 8017234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017236:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801723a:	f383 8810 	msr	PRIMASK, r3
}
 801723e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2280      	movs	r2, #128	@ 0x80
 8017244:	2120      	movs	r1, #32
 8017246:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2200      	movs	r2, #0
 801724c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	2200      	movs	r2, #0
 8017252:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	4a36      	ldr	r2, [pc, #216]	@ (8017334 <UART_RxISR_8BIT+0x1c4>)
 801725a:	4293      	cmp	r3, r2
 801725c:	d01f      	beq.n	801729e <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	685a      	ldr	r2, [r3, #4]
 8017264:	2380      	movs	r3, #128	@ 0x80
 8017266:	041b      	lsls	r3, r3, #16
 8017268:	4013      	ands	r3, r2
 801726a:	d018      	beq.n	801729e <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801726c:	f3ef 8310 	mrs	r3, PRIMASK
 8017270:	61bb      	str	r3, [r7, #24]
  return(result);
 8017272:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017274:	643b      	str	r3, [r7, #64]	@ 0x40
 8017276:	2301      	movs	r3, #1
 8017278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801727a:	69fb      	ldr	r3, [r7, #28]
 801727c:	f383 8810 	msr	PRIMASK, r3
}
 8017280:	46c0      	nop			@ (mov r8, r8)
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	681a      	ldr	r2, [r3, #0]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	492a      	ldr	r1, [pc, #168]	@ (8017338 <UART_RxISR_8BIT+0x1c8>)
 801728e:	400a      	ands	r2, r1
 8017290:	601a      	str	r2, [r3, #0]
 8017292:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017294:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017296:	6a3b      	ldr	r3, [r7, #32]
 8017298:	f383 8810 	msr	PRIMASK, r3
}
 801729c:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80172a2:	2b01      	cmp	r3, #1
 80172a4:	d130      	bne.n	8017308 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	2200      	movs	r2, #0
 80172aa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80172ac:	f3ef 8310 	mrs	r3, PRIMASK
 80172b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80172b2:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80172b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80172b6:	2301      	movs	r3, #1
 80172b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172ba:	693b      	ldr	r3, [r7, #16]
 80172bc:	f383 8810 	msr	PRIMASK, r3
}
 80172c0:	46c0      	nop			@ (mov r8, r8)
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	681a      	ldr	r2, [r3, #0]
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	2110      	movs	r1, #16
 80172ce:	438a      	bics	r2, r1
 80172d0:	601a      	str	r2, [r3, #0]
 80172d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80172d6:	697b      	ldr	r3, [r7, #20]
 80172d8:	f383 8810 	msr	PRIMASK, r3
}
 80172dc:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	69db      	ldr	r3, [r3, #28]
 80172e4:	2210      	movs	r2, #16
 80172e6:	4013      	ands	r3, r2
 80172e8:	2b10      	cmp	r3, #16
 80172ea:	d103      	bne.n	80172f4 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	2210      	movs	r2, #16
 80172f2:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	22ac      	movs	r2, #172	@ 0xac
 80172f8:	589b      	ldr	r3, [r3, r2]
 80172fa:	687a      	ldr	r2, [r7, #4]
 80172fc:	2158      	movs	r1, #88	@ 0x58
 80172fe:	5a51      	ldrh	r1, [r2, r1]
 8017300:	687a      	ldr	r2, [r7, #4]
 8017302:	0010      	movs	r0, r2
 8017304:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017306:	e00e      	b.n	8017326 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2294      	movs	r2, #148	@ 0x94
 801730c:	589b      	ldr	r3, [r3, r2]
 801730e:	687a      	ldr	r2, [r7, #4]
 8017310:	0010      	movs	r0, r2
 8017312:	4798      	blx	r3
}
 8017314:	e007      	b.n	8017326 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	681b      	ldr	r3, [r3, #0]
 801731a:	699a      	ldr	r2, [r3, #24]
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2108      	movs	r1, #8
 8017322:	430a      	orrs	r2, r1
 8017324:	619a      	str	r2, [r3, #24]
}
 8017326:	46c0      	nop			@ (mov r8, r8)
 8017328:	46bd      	mov	sp, r7
 801732a:	b014      	add	sp, #80	@ 0x50
 801732c:	bd80      	pop	{r7, pc}
 801732e:	46c0      	nop			@ (mov r8, r8)
 8017330:	fffffedf 	.word	0xfffffedf
 8017334:	40004800 	.word	0x40004800
 8017338:	fbffffff 	.word	0xfbffffff

0801733c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b094      	sub	sp, #80	@ 0x50
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017344:	204e      	movs	r0, #78	@ 0x4e
 8017346:	183b      	adds	r3, r7, r0
 8017348:	687a      	ldr	r2, [r7, #4]
 801734a:	215c      	movs	r1, #92	@ 0x5c
 801734c:	5a52      	ldrh	r2, [r2, r1]
 801734e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2280      	movs	r2, #128	@ 0x80
 8017354:	589b      	ldr	r3, [r3, r2]
 8017356:	2b22      	cmp	r3, #34	@ 0x22
 8017358:	d000      	beq.n	801735c <UART_RxISR_16BIT+0x20>
 801735a:	e0c2      	b.n	80174e2 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017362:	214c      	movs	r1, #76	@ 0x4c
 8017364:	187b      	adds	r3, r7, r1
 8017366:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801736c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801736e:	187b      	adds	r3, r7, r1
 8017370:	183a      	adds	r2, r7, r0
 8017372:	881b      	ldrh	r3, [r3, #0]
 8017374:	8812      	ldrh	r2, [r2, #0]
 8017376:	4013      	ands	r3, r2
 8017378:	b29a      	uxth	r2, r3
 801737a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801737c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017382:	1c9a      	adds	r2, r3, #2
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	225a      	movs	r2, #90	@ 0x5a
 801738c:	5a9b      	ldrh	r3, [r3, r2]
 801738e:	b29b      	uxth	r3, r3
 8017390:	3b01      	subs	r3, #1
 8017392:	b299      	uxth	r1, r3
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	225a      	movs	r2, #90	@ 0x5a
 8017398:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	225a      	movs	r2, #90	@ 0x5a
 801739e:	5a9b      	ldrh	r3, [r3, r2]
 80173a0:	b29b      	uxth	r3, r3
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d000      	beq.n	80173a8 <UART_RxISR_16BIT+0x6c>
 80173a6:	e0a4      	b.n	80174f2 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173a8:	f3ef 8310 	mrs	r3, PRIMASK
 80173ac:	623b      	str	r3, [r7, #32]
  return(result);
 80173ae:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80173b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80173b2:	2301      	movs	r3, #1
 80173b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173b8:	f383 8810 	msr	PRIMASK, r3
}
 80173bc:	46c0      	nop			@ (mov r8, r8)
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	681a      	ldr	r2, [r3, #0]
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	494c      	ldr	r1, [pc, #304]	@ (80174fc <UART_RxISR_16BIT+0x1c0>)
 80173ca:	400a      	ands	r2, r1
 80173cc:	601a      	str	r2, [r3, #0]
 80173ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80173d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173d4:	f383 8810 	msr	PRIMASK, r3
}
 80173d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173da:	f3ef 8310 	mrs	r3, PRIMASK
 80173de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80173e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80173e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80173e4:	2301      	movs	r3, #1
 80173e6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ea:	f383 8810 	msr	PRIMASK, r3
}
 80173ee:	46c0      	nop			@ (mov r8, r8)
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	689a      	ldr	r2, [r3, #8]
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	2101      	movs	r1, #1
 80173fc:	438a      	bics	r2, r1
 80173fe:	609a      	str	r2, [r3, #8]
 8017400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017402:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017406:	f383 8810 	msr	PRIMASK, r3
}
 801740a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	2280      	movs	r2, #128	@ 0x80
 8017410:	2120      	movs	r1, #32
 8017412:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2200      	movs	r2, #0
 8017418:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	2200      	movs	r2, #0
 801741e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	4a36      	ldr	r2, [pc, #216]	@ (8017500 <UART_RxISR_16BIT+0x1c4>)
 8017426:	4293      	cmp	r3, r2
 8017428:	d01f      	beq.n	801746a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	685a      	ldr	r2, [r3, #4]
 8017430:	2380      	movs	r3, #128	@ 0x80
 8017432:	041b      	lsls	r3, r3, #16
 8017434:	4013      	ands	r3, r2
 8017436:	d018      	beq.n	801746a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017438:	f3ef 8310 	mrs	r3, PRIMASK
 801743c:	617b      	str	r3, [r7, #20]
  return(result);
 801743e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017440:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017442:	2301      	movs	r3, #1
 8017444:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017446:	69bb      	ldr	r3, [r7, #24]
 8017448:	f383 8810 	msr	PRIMASK, r3
}
 801744c:	46c0      	nop			@ (mov r8, r8)
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	681a      	ldr	r2, [r3, #0]
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	492a      	ldr	r1, [pc, #168]	@ (8017504 <UART_RxISR_16BIT+0x1c8>)
 801745a:	400a      	ands	r2, r1
 801745c:	601a      	str	r2, [r3, #0]
 801745e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017460:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017462:	69fb      	ldr	r3, [r7, #28]
 8017464:	f383 8810 	msr	PRIMASK, r3
}
 8017468:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801746e:	2b01      	cmp	r3, #1
 8017470:	d130      	bne.n	80174d4 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017478:	f3ef 8310 	mrs	r3, PRIMASK
 801747c:	60bb      	str	r3, [r7, #8]
  return(result);
 801747e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017480:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017482:	2301      	movs	r3, #1
 8017484:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	f383 8810 	msr	PRIMASK, r3
}
 801748c:	46c0      	nop			@ (mov r8, r8)
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	681a      	ldr	r2, [r3, #0]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	2110      	movs	r1, #16
 801749a:	438a      	bics	r2, r1
 801749c:	601a      	str	r2, [r3, #0]
 801749e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	f383 8810 	msr	PRIMASK, r3
}
 80174a8:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	69db      	ldr	r3, [r3, #28]
 80174b0:	2210      	movs	r2, #16
 80174b2:	4013      	ands	r3, r2
 80174b4:	2b10      	cmp	r3, #16
 80174b6:	d103      	bne.n	80174c0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	2210      	movs	r2, #16
 80174be:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	22ac      	movs	r2, #172	@ 0xac
 80174c4:	589b      	ldr	r3, [r3, r2]
 80174c6:	687a      	ldr	r2, [r7, #4]
 80174c8:	2158      	movs	r1, #88	@ 0x58
 80174ca:	5a51      	ldrh	r1, [r2, r1]
 80174cc:	687a      	ldr	r2, [r7, #4]
 80174ce:	0010      	movs	r0, r2
 80174d0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80174d2:	e00e      	b.n	80174f2 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	2294      	movs	r2, #148	@ 0x94
 80174d8:	589b      	ldr	r3, [r3, r2]
 80174da:	687a      	ldr	r2, [r7, #4]
 80174dc:	0010      	movs	r0, r2
 80174de:	4798      	blx	r3
}
 80174e0:	e007      	b.n	80174f2 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	699a      	ldr	r2, [r3, #24]
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	2108      	movs	r1, #8
 80174ee:	430a      	orrs	r2, r1
 80174f0:	619a      	str	r2, [r3, #24]
}
 80174f2:	46c0      	nop			@ (mov r8, r8)
 80174f4:	46bd      	mov	sp, r7
 80174f6:	b014      	add	sp, #80	@ 0x50
 80174f8:	bd80      	pop	{r7, pc}
 80174fa:	46c0      	nop			@ (mov r8, r8)
 80174fc:	fffffedf 	.word	0xfffffedf
 8017500:	40004800 	.word	0x40004800
 8017504:	fbffffff 	.word	0xfbffffff

08017508 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017510:	46c0      	nop			@ (mov r8, r8)
 8017512:	46bd      	mov	sp, r7
 8017514:	b002      	add	sp, #8
 8017516:	bd80      	pop	{r7, pc}

08017518 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b084      	sub	sp, #16
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2244      	movs	r2, #68	@ 0x44
 8017524:	2100      	movs	r1, #0
 8017526:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8017528:	4b05      	ldr	r3, [pc, #20]	@ (8017540 <USB_EnableGlobalInt+0x28>)
 801752a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	b299      	uxth	r1, r3
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2240      	movs	r2, #64	@ 0x40
 8017534:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017536:	2300      	movs	r3, #0
}
 8017538:	0018      	movs	r0, r3
 801753a:	46bd      	mov	sp, r7
 801753c:	b004      	add	sp, #16
 801753e:	bd80      	pop	{r7, pc}
 8017540:	0000bf80 	.word	0x0000bf80

08017544 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b084      	sub	sp, #16
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801754c:	4b09      	ldr	r3, [pc, #36]	@ (8017574 <USB_DisableGlobalInt+0x30>)
 801754e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	2240      	movs	r2, #64	@ 0x40
 8017554:	5a9b      	ldrh	r3, [r3, r2]
 8017556:	b29b      	uxth	r3, r3
 8017558:	68fa      	ldr	r2, [r7, #12]
 801755a:	b292      	uxth	r2, r2
 801755c:	43d2      	mvns	r2, r2
 801755e:	b292      	uxth	r2, r2
 8017560:	4013      	ands	r3, r2
 8017562:	b299      	uxth	r1, r3
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	2240      	movs	r2, #64	@ 0x40
 8017568:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 801756a:	2300      	movs	r3, #0
}
 801756c:	0018      	movs	r0, r3
 801756e:	46bd      	mov	sp, r7
 8017570:	b004      	add	sp, #16
 8017572:	bd80      	pop	{r7, pc}
 8017574:	0000bf80 	.word	0x0000bf80

08017578 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8017578:	b084      	sub	sp, #16
 801757a:	b590      	push	{r4, r7, lr}
 801757c:	b083      	sub	sp, #12
 801757e:	af00      	add	r7, sp, #0
 8017580:	6078      	str	r0, [r7, #4]
 8017582:	2004      	movs	r0, #4
 8017584:	2410      	movs	r4, #16
 8017586:	1900      	adds	r0, r0, r4
 8017588:	2408      	movs	r4, #8
 801758a:	46a4      	mov	ip, r4
 801758c:	44bc      	add	ip, r7
 801758e:	4460      	add	r0, ip
 8017590:	6001      	str	r1, [r0, #0]
 8017592:	6042      	str	r2, [r0, #4]
 8017594:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	2240      	movs	r2, #64	@ 0x40
 801759a:	2101      	movs	r1, #1
 801759c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	2240      	movs	r2, #64	@ 0x40
 80175a2:	2100      	movs	r1, #0
 80175a4:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	2244      	movs	r2, #68	@ 0x44
 80175aa:	2100      	movs	r1, #0
 80175ac:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	2250      	movs	r2, #80	@ 0x50
 80175b2:	2100      	movs	r1, #0
 80175b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80175b6:	2300      	movs	r3, #0
}
 80175b8:	0018      	movs	r0, r3
 80175ba:	46bd      	mov	sp, r7
 80175bc:	b003      	add	sp, #12
 80175be:	bc90      	pop	{r4, r7}
 80175c0:	bc08      	pop	{r3}
 80175c2:	b004      	add	sp, #16
 80175c4:	4718      	bx	r3
	...

080175c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	b09c      	sub	sp, #112	@ 0x70
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	6078      	str	r0, [r7, #4]
 80175d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80175d2:	236f      	movs	r3, #111	@ 0x6f
 80175d4:	18fb      	adds	r3, r7, r3
 80175d6:	2200      	movs	r2, #0
 80175d8:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80175da:	687a      	ldr	r2, [r7, #4]
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	781b      	ldrb	r3, [r3, #0]
 80175e0:	009b      	lsls	r3, r3, #2
 80175e2:	18d3      	adds	r3, r2, r3
 80175e4:	881b      	ldrh	r3, [r3, #0]
 80175e6:	b29a      	uxth	r2, r3
 80175e8:	236c      	movs	r3, #108	@ 0x6c
 80175ea:	18fb      	adds	r3, r7, r3
 80175ec:	49a3      	ldr	r1, [pc, #652]	@ (801787c <USB_ActivateEndpoint+0x2b4>)
 80175ee:	400a      	ands	r2, r1
 80175f0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	78db      	ldrb	r3, [r3, #3]
 80175f6:	2b03      	cmp	r3, #3
 80175f8:	d017      	beq.n	801762a <USB_ActivateEndpoint+0x62>
 80175fa:	dc28      	bgt.n	801764e <USB_ActivateEndpoint+0x86>
 80175fc:	2b02      	cmp	r3, #2
 80175fe:	d00e      	beq.n	801761e <USB_ActivateEndpoint+0x56>
 8017600:	dc25      	bgt.n	801764e <USB_ActivateEndpoint+0x86>
 8017602:	2b00      	cmp	r3, #0
 8017604:	d002      	beq.n	801760c <USB_ActivateEndpoint+0x44>
 8017606:	2b01      	cmp	r3, #1
 8017608:	d018      	beq.n	801763c <USB_ActivateEndpoint+0x74>
 801760a:	e020      	b.n	801764e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801760c:	226c      	movs	r2, #108	@ 0x6c
 801760e:	18bb      	adds	r3, r7, r2
 8017610:	18ba      	adds	r2, r7, r2
 8017612:	8812      	ldrh	r2, [r2, #0]
 8017614:	2180      	movs	r1, #128	@ 0x80
 8017616:	0089      	lsls	r1, r1, #2
 8017618:	430a      	orrs	r2, r1
 801761a:	801a      	strh	r2, [r3, #0]
      break;
 801761c:	e01c      	b.n	8017658 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801761e:	226c      	movs	r2, #108	@ 0x6c
 8017620:	18bb      	adds	r3, r7, r2
 8017622:	18ba      	adds	r2, r7, r2
 8017624:	8812      	ldrh	r2, [r2, #0]
 8017626:	801a      	strh	r2, [r3, #0]
      break;
 8017628:	e016      	b.n	8017658 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801762a:	226c      	movs	r2, #108	@ 0x6c
 801762c:	18bb      	adds	r3, r7, r2
 801762e:	18ba      	adds	r2, r7, r2
 8017630:	8812      	ldrh	r2, [r2, #0]
 8017632:	21c0      	movs	r1, #192	@ 0xc0
 8017634:	00c9      	lsls	r1, r1, #3
 8017636:	430a      	orrs	r2, r1
 8017638:	801a      	strh	r2, [r3, #0]
      break;
 801763a:	e00d      	b.n	8017658 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801763c:	226c      	movs	r2, #108	@ 0x6c
 801763e:	18bb      	adds	r3, r7, r2
 8017640:	18ba      	adds	r2, r7, r2
 8017642:	8812      	ldrh	r2, [r2, #0]
 8017644:	2180      	movs	r1, #128	@ 0x80
 8017646:	00c9      	lsls	r1, r1, #3
 8017648:	430a      	orrs	r2, r1
 801764a:	801a      	strh	r2, [r3, #0]
      break;
 801764c:	e004      	b.n	8017658 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801764e:	236f      	movs	r3, #111	@ 0x6f
 8017650:	18fb      	adds	r3, r7, r3
 8017652:	2201      	movs	r2, #1
 8017654:	701a      	strb	r2, [r3, #0]
      break;
 8017656:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8017658:	687a      	ldr	r2, [r7, #4]
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	18d3      	adds	r3, r2, r3
 8017662:	226c      	movs	r2, #108	@ 0x6c
 8017664:	18ba      	adds	r2, r7, r2
 8017666:	8812      	ldrh	r2, [r2, #0]
 8017668:	4985      	ldr	r1, [pc, #532]	@ (8017880 <USB_ActivateEndpoint+0x2b8>)
 801766a:	430a      	orrs	r2, r1
 801766c:	b292      	uxth	r2, r2
 801766e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8017670:	687a      	ldr	r2, [r7, #4]
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	781b      	ldrb	r3, [r3, #0]
 8017676:	009b      	lsls	r3, r3, #2
 8017678:	18d3      	adds	r3, r2, r3
 801767a:	881b      	ldrh	r3, [r3, #0]
 801767c:	b29b      	uxth	r3, r3
 801767e:	b21b      	sxth	r3, r3
 8017680:	4a80      	ldr	r2, [pc, #512]	@ (8017884 <USB_ActivateEndpoint+0x2bc>)
 8017682:	4013      	ands	r3, r2
 8017684:	b21a      	sxth	r2, r3
 8017686:	683b      	ldr	r3, [r7, #0]
 8017688:	781b      	ldrb	r3, [r3, #0]
 801768a:	b21b      	sxth	r3, r3
 801768c:	4313      	orrs	r3, r2
 801768e:	b21a      	sxth	r2, r3
 8017690:	2166      	movs	r1, #102	@ 0x66
 8017692:	187b      	adds	r3, r7, r1
 8017694:	801a      	strh	r2, [r3, #0]
 8017696:	687a      	ldr	r2, [r7, #4]
 8017698:	683b      	ldr	r3, [r7, #0]
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	18d3      	adds	r3, r2, r3
 80176a0:	187a      	adds	r2, r7, r1
 80176a2:	8812      	ldrh	r2, [r2, #0]
 80176a4:	4976      	ldr	r1, [pc, #472]	@ (8017880 <USB_ActivateEndpoint+0x2b8>)
 80176a6:	430a      	orrs	r2, r1
 80176a8:	b292      	uxth	r2, r2
 80176aa:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80176ac:	683b      	ldr	r3, [r7, #0]
 80176ae:	7b1b      	ldrb	r3, [r3, #12]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d000      	beq.n	80176b6 <USB_ActivateEndpoint+0xee>
 80176b4:	e178      	b.n	80179a8 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80176b6:	683b      	ldr	r3, [r7, #0]
 80176b8:	785b      	ldrb	r3, [r3, #1]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d100      	bne.n	80176c0 <USB_ActivateEndpoint+0xf8>
 80176be:	e07a      	b.n	80177b6 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	61bb      	str	r3, [r7, #24]
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2250      	movs	r2, #80	@ 0x50
 80176c8:	5a9b      	ldrh	r3, [r3, r2]
 80176ca:	b29b      	uxth	r3, r3
 80176cc:	001a      	movs	r2, r3
 80176ce:	69bb      	ldr	r3, [r7, #24]
 80176d0:	189b      	adds	r3, r3, r2
 80176d2:	61bb      	str	r3, [r7, #24]
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	781b      	ldrb	r3, [r3, #0]
 80176d8:	00da      	lsls	r2, r3, #3
 80176da:	69bb      	ldr	r3, [r7, #24]
 80176dc:	18d3      	adds	r3, r2, r3
 80176de:	2280      	movs	r2, #128	@ 0x80
 80176e0:	00d2      	lsls	r2, r2, #3
 80176e2:	4694      	mov	ip, r2
 80176e4:	4463      	add	r3, ip
 80176e6:	617b      	str	r3, [r7, #20]
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	88db      	ldrh	r3, [r3, #6]
 80176ec:	085b      	lsrs	r3, r3, #1
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	18db      	adds	r3, r3, r3
 80176f2:	b29a      	uxth	r2, r3
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80176f8:	687a      	ldr	r2, [r7, #4]
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	009b      	lsls	r3, r3, #2
 8017700:	18d2      	adds	r2, r2, r3
 8017702:	2112      	movs	r1, #18
 8017704:	187b      	adds	r3, r7, r1
 8017706:	8812      	ldrh	r2, [r2, #0]
 8017708:	801a      	strh	r2, [r3, #0]
 801770a:	187b      	adds	r3, r7, r1
 801770c:	881b      	ldrh	r3, [r3, #0]
 801770e:	2240      	movs	r2, #64	@ 0x40
 8017710:	4013      	ands	r3, r2
 8017712:	d016      	beq.n	8017742 <USB_ActivateEndpoint+0x17a>
 8017714:	687a      	ldr	r2, [r7, #4]
 8017716:	683b      	ldr	r3, [r7, #0]
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	009b      	lsls	r3, r3, #2
 801771c:	18d3      	adds	r3, r2, r3
 801771e:	881b      	ldrh	r3, [r3, #0]
 8017720:	b29a      	uxth	r2, r3
 8017722:	2010      	movs	r0, #16
 8017724:	183b      	adds	r3, r7, r0
 8017726:	4957      	ldr	r1, [pc, #348]	@ (8017884 <USB_ActivateEndpoint+0x2bc>)
 8017728:	400a      	ands	r2, r1
 801772a:	801a      	strh	r2, [r3, #0]
 801772c:	687a      	ldr	r2, [r7, #4]
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	781b      	ldrb	r3, [r3, #0]
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	18d3      	adds	r3, r2, r3
 8017736:	183a      	adds	r2, r7, r0
 8017738:	8812      	ldrh	r2, [r2, #0]
 801773a:	4953      	ldr	r1, [pc, #332]	@ (8017888 <USB_ActivateEndpoint+0x2c0>)
 801773c:	430a      	orrs	r2, r1
 801773e:	b292      	uxth	r2, r2
 8017740:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	78db      	ldrb	r3, [r3, #3]
 8017746:	2b01      	cmp	r3, #1
 8017748:	d01d      	beq.n	8017786 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801774a:	687a      	ldr	r2, [r7, #4]
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	009b      	lsls	r3, r3, #2
 8017752:	18d3      	adds	r3, r2, r3
 8017754:	881b      	ldrh	r3, [r3, #0]
 8017756:	b29a      	uxth	r2, r3
 8017758:	200c      	movs	r0, #12
 801775a:	183b      	adds	r3, r7, r0
 801775c:	494b      	ldr	r1, [pc, #300]	@ (801788c <USB_ActivateEndpoint+0x2c4>)
 801775e:	400a      	ands	r2, r1
 8017760:	801a      	strh	r2, [r3, #0]
 8017762:	183b      	adds	r3, r7, r0
 8017764:	183a      	adds	r2, r7, r0
 8017766:	8812      	ldrh	r2, [r2, #0]
 8017768:	2120      	movs	r1, #32
 801776a:	404a      	eors	r2, r1
 801776c:	801a      	strh	r2, [r3, #0]
 801776e:	687a      	ldr	r2, [r7, #4]
 8017770:	683b      	ldr	r3, [r7, #0]
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	009b      	lsls	r3, r3, #2
 8017776:	18d3      	adds	r3, r2, r3
 8017778:	183a      	adds	r2, r7, r0
 801777a:	8812      	ldrh	r2, [r2, #0]
 801777c:	4940      	ldr	r1, [pc, #256]	@ (8017880 <USB_ActivateEndpoint+0x2b8>)
 801777e:	430a      	orrs	r2, r1
 8017780:	b292      	uxth	r2, r2
 8017782:	801a      	strh	r2, [r3, #0]
 8017784:	e2b4      	b.n	8017cf0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	009b      	lsls	r3, r3, #2
 801778e:	18d3      	adds	r3, r2, r3
 8017790:	881b      	ldrh	r3, [r3, #0]
 8017792:	b29a      	uxth	r2, r3
 8017794:	200e      	movs	r0, #14
 8017796:	183b      	adds	r3, r7, r0
 8017798:	493c      	ldr	r1, [pc, #240]	@ (801788c <USB_ActivateEndpoint+0x2c4>)
 801779a:	400a      	ands	r2, r1
 801779c:	801a      	strh	r2, [r3, #0]
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	009b      	lsls	r3, r3, #2
 80177a6:	18d3      	adds	r3, r2, r3
 80177a8:	183a      	adds	r2, r7, r0
 80177aa:	8812      	ldrh	r2, [r2, #0]
 80177ac:	4934      	ldr	r1, [pc, #208]	@ (8017880 <USB_ActivateEndpoint+0x2b8>)
 80177ae:	430a      	orrs	r2, r1
 80177b0:	b292      	uxth	r2, r2
 80177b2:	801a      	strh	r2, [r3, #0]
 80177b4:	e29c      	b.n	8017cf0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	2250      	movs	r2, #80	@ 0x50
 80177be:	5a9b      	ldrh	r3, [r3, r2]
 80177c0:	b29b      	uxth	r3, r3
 80177c2:	001a      	movs	r2, r3
 80177c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177c6:	189b      	adds	r3, r3, r2
 80177c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	00da      	lsls	r2, r3, #3
 80177d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177d2:	18d3      	adds	r3, r2, r3
 80177d4:	4a2e      	ldr	r2, [pc, #184]	@ (8017890 <USB_ActivateEndpoint+0x2c8>)
 80177d6:	4694      	mov	ip, r2
 80177d8:	4463      	add	r3, ip
 80177da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80177dc:	683b      	ldr	r3, [r7, #0]
 80177de:	88db      	ldrh	r3, [r3, #6]
 80177e0:	085b      	lsrs	r3, r3, #1
 80177e2:	b29b      	uxth	r3, r3
 80177e4:	18db      	adds	r3, r3, r3
 80177e6:	b29a      	uxth	r2, r3
 80177e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177ea:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	2250      	movs	r2, #80	@ 0x50
 80177f4:	5a9b      	ldrh	r3, [r3, r2]
 80177f6:	b29b      	uxth	r3, r3
 80177f8:	001a      	movs	r2, r3
 80177fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177fc:	189b      	adds	r3, r3, r2
 80177fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017800:	683b      	ldr	r3, [r7, #0]
 8017802:	781b      	ldrb	r3, [r3, #0]
 8017804:	00da      	lsls	r2, r3, #3
 8017806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017808:	18d3      	adds	r3, r2, r3
 801780a:	4a22      	ldr	r2, [pc, #136]	@ (8017894 <USB_ActivateEndpoint+0x2cc>)
 801780c:	4694      	mov	ip, r2
 801780e:	4463      	add	r3, ip
 8017810:	627b      	str	r3, [r7, #36]	@ 0x24
 8017812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017814:	881b      	ldrh	r3, [r3, #0]
 8017816:	b29b      	uxth	r3, r3
 8017818:	059b      	lsls	r3, r3, #22
 801781a:	0d9b      	lsrs	r3, r3, #22
 801781c:	b29a      	uxth	r2, r3
 801781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017820:	801a      	strh	r2, [r3, #0]
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	691b      	ldr	r3, [r3, #16]
 8017826:	2b3e      	cmp	r3, #62	@ 0x3e
 8017828:	d91a      	bls.n	8017860 <USB_ActivateEndpoint+0x298>
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	691b      	ldr	r3, [r3, #16]
 801782e:	095b      	lsrs	r3, r3, #5
 8017830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	691b      	ldr	r3, [r3, #16]
 8017836:	221f      	movs	r2, #31
 8017838:	4013      	ands	r3, r2
 801783a:	d102      	bne.n	8017842 <USB_ActivateEndpoint+0x27a>
 801783c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801783e:	3b01      	subs	r3, #1
 8017840:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017844:	881b      	ldrh	r3, [r3, #0]
 8017846:	b29a      	uxth	r2, r3
 8017848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801784a:	b29b      	uxth	r3, r3
 801784c:	029b      	lsls	r3, r3, #10
 801784e:	b29b      	uxth	r3, r3
 8017850:	4313      	orrs	r3, r2
 8017852:	b29b      	uxth	r3, r3
 8017854:	4a10      	ldr	r2, [pc, #64]	@ (8017898 <USB_ActivateEndpoint+0x2d0>)
 8017856:	4313      	orrs	r3, r2
 8017858:	b29a      	uxth	r2, r3
 801785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801785c:	801a      	strh	r2, [r3, #0]
 801785e:	e034      	b.n	80178ca <USB_ActivateEndpoint+0x302>
 8017860:	683b      	ldr	r3, [r7, #0]
 8017862:	691b      	ldr	r3, [r3, #16]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d119      	bne.n	801789c <USB_ActivateEndpoint+0x2d4>
 8017868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801786a:	881b      	ldrh	r3, [r3, #0]
 801786c:	b29b      	uxth	r3, r3
 801786e:	4a0a      	ldr	r2, [pc, #40]	@ (8017898 <USB_ActivateEndpoint+0x2d0>)
 8017870:	4313      	orrs	r3, r2
 8017872:	b29a      	uxth	r2, r3
 8017874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017876:	801a      	strh	r2, [r3, #0]
 8017878:	e027      	b.n	80178ca <USB_ActivateEndpoint+0x302>
 801787a:	46c0      	nop			@ (mov r8, r8)
 801787c:	ffff898f 	.word	0xffff898f
 8017880:	ffff8080 	.word	0xffff8080
 8017884:	ffff8f8f 	.word	0xffff8f8f
 8017888:	ffff80c0 	.word	0xffff80c0
 801788c:	ffff8fbf 	.word	0xffff8fbf
 8017890:	00000404 	.word	0x00000404
 8017894:	00000406 	.word	0x00000406
 8017898:	ffff8000 	.word	0xffff8000
 801789c:	683b      	ldr	r3, [r7, #0]
 801789e:	691b      	ldr	r3, [r3, #16]
 80178a0:	085b      	lsrs	r3, r3, #1
 80178a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	691b      	ldr	r3, [r3, #16]
 80178a8:	2201      	movs	r2, #1
 80178aa:	4013      	ands	r3, r2
 80178ac:	d002      	beq.n	80178b4 <USB_ActivateEndpoint+0x2ec>
 80178ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80178b0:	3301      	adds	r3, #1
 80178b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80178b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178b6:	881b      	ldrh	r3, [r3, #0]
 80178b8:	b29a      	uxth	r2, r3
 80178ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80178bc:	b29b      	uxth	r3, r3
 80178be:	029b      	lsls	r3, r3, #10
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	4313      	orrs	r3, r2
 80178c4:	b29a      	uxth	r2, r3
 80178c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80178ca:	687a      	ldr	r2, [r7, #4]
 80178cc:	683b      	ldr	r3, [r7, #0]
 80178ce:	781b      	ldrb	r3, [r3, #0]
 80178d0:	009b      	lsls	r3, r3, #2
 80178d2:	18d2      	adds	r2, r2, r3
 80178d4:	2122      	movs	r1, #34	@ 0x22
 80178d6:	187b      	adds	r3, r7, r1
 80178d8:	8812      	ldrh	r2, [r2, #0]
 80178da:	801a      	strh	r2, [r3, #0]
 80178dc:	187b      	adds	r3, r7, r1
 80178de:	881a      	ldrh	r2, [r3, #0]
 80178e0:	2380      	movs	r3, #128	@ 0x80
 80178e2:	01db      	lsls	r3, r3, #7
 80178e4:	4013      	ands	r3, r2
 80178e6:	d016      	beq.n	8017916 <USB_ActivateEndpoint+0x34e>
 80178e8:	687a      	ldr	r2, [r7, #4]
 80178ea:	683b      	ldr	r3, [r7, #0]
 80178ec:	781b      	ldrb	r3, [r3, #0]
 80178ee:	009b      	lsls	r3, r3, #2
 80178f0:	18d3      	adds	r3, r2, r3
 80178f2:	881b      	ldrh	r3, [r3, #0]
 80178f4:	b29a      	uxth	r2, r3
 80178f6:	2020      	movs	r0, #32
 80178f8:	183b      	adds	r3, r7, r0
 80178fa:	49dd      	ldr	r1, [pc, #884]	@ (8017c70 <USB_ActivateEndpoint+0x6a8>)
 80178fc:	400a      	ands	r2, r1
 80178fe:	801a      	strh	r2, [r3, #0]
 8017900:	687a      	ldr	r2, [r7, #4]
 8017902:	683b      	ldr	r3, [r7, #0]
 8017904:	781b      	ldrb	r3, [r3, #0]
 8017906:	009b      	lsls	r3, r3, #2
 8017908:	18d3      	adds	r3, r2, r3
 801790a:	183a      	adds	r2, r7, r0
 801790c:	8812      	ldrh	r2, [r2, #0]
 801790e:	49d9      	ldr	r1, [pc, #868]	@ (8017c74 <USB_ActivateEndpoint+0x6ac>)
 8017910:	430a      	orrs	r2, r1
 8017912:	b292      	uxth	r2, r2
 8017914:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8017916:	683b      	ldr	r3, [r7, #0]
 8017918:	781b      	ldrb	r3, [r3, #0]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d125      	bne.n	801796a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801791e:	687a      	ldr	r2, [r7, #4]
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	781b      	ldrb	r3, [r3, #0]
 8017924:	009b      	lsls	r3, r3, #2
 8017926:	18d3      	adds	r3, r2, r3
 8017928:	881b      	ldrh	r3, [r3, #0]
 801792a:	b29a      	uxth	r2, r3
 801792c:	201c      	movs	r0, #28
 801792e:	183b      	adds	r3, r7, r0
 8017930:	49d1      	ldr	r1, [pc, #836]	@ (8017c78 <USB_ActivateEndpoint+0x6b0>)
 8017932:	400a      	ands	r2, r1
 8017934:	801a      	strh	r2, [r3, #0]
 8017936:	183b      	adds	r3, r7, r0
 8017938:	183a      	adds	r2, r7, r0
 801793a:	8812      	ldrh	r2, [r2, #0]
 801793c:	2180      	movs	r1, #128	@ 0x80
 801793e:	0149      	lsls	r1, r1, #5
 8017940:	404a      	eors	r2, r1
 8017942:	801a      	strh	r2, [r3, #0]
 8017944:	183b      	adds	r3, r7, r0
 8017946:	183a      	adds	r2, r7, r0
 8017948:	8812      	ldrh	r2, [r2, #0]
 801794a:	2180      	movs	r1, #128	@ 0x80
 801794c:	0189      	lsls	r1, r1, #6
 801794e:	404a      	eors	r2, r1
 8017950:	801a      	strh	r2, [r3, #0]
 8017952:	687a      	ldr	r2, [r7, #4]
 8017954:	683b      	ldr	r3, [r7, #0]
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	009b      	lsls	r3, r3, #2
 801795a:	18d3      	adds	r3, r2, r3
 801795c:	183a      	adds	r2, r7, r0
 801795e:	8812      	ldrh	r2, [r2, #0]
 8017960:	49c6      	ldr	r1, [pc, #792]	@ (8017c7c <USB_ActivateEndpoint+0x6b4>)
 8017962:	430a      	orrs	r2, r1
 8017964:	b292      	uxth	r2, r2
 8017966:	801a      	strh	r2, [r3, #0]
 8017968:	e1c2      	b.n	8017cf0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 801796a:	687a      	ldr	r2, [r7, #4]
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	781b      	ldrb	r3, [r3, #0]
 8017970:	009b      	lsls	r3, r3, #2
 8017972:	18d3      	adds	r3, r2, r3
 8017974:	881b      	ldrh	r3, [r3, #0]
 8017976:	b29a      	uxth	r2, r3
 8017978:	201e      	movs	r0, #30
 801797a:	183b      	adds	r3, r7, r0
 801797c:	49be      	ldr	r1, [pc, #760]	@ (8017c78 <USB_ActivateEndpoint+0x6b0>)
 801797e:	400a      	ands	r2, r1
 8017980:	801a      	strh	r2, [r3, #0]
 8017982:	183b      	adds	r3, r7, r0
 8017984:	183a      	adds	r2, r7, r0
 8017986:	8812      	ldrh	r2, [r2, #0]
 8017988:	2180      	movs	r1, #128	@ 0x80
 801798a:	0189      	lsls	r1, r1, #6
 801798c:	404a      	eors	r2, r1
 801798e:	801a      	strh	r2, [r3, #0]
 8017990:	687a      	ldr	r2, [r7, #4]
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	781b      	ldrb	r3, [r3, #0]
 8017996:	009b      	lsls	r3, r3, #2
 8017998:	18d3      	adds	r3, r2, r3
 801799a:	183a      	adds	r2, r7, r0
 801799c:	8812      	ldrh	r2, [r2, #0]
 801799e:	49b7      	ldr	r1, [pc, #732]	@ (8017c7c <USB_ActivateEndpoint+0x6b4>)
 80179a0:	430a      	orrs	r2, r1
 80179a2:	b292      	uxth	r2, r2
 80179a4:	801a      	strh	r2, [r3, #0]
 80179a6:	e1a3      	b.n	8017cf0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80179a8:	683b      	ldr	r3, [r7, #0]
 80179aa:	78db      	ldrb	r3, [r3, #3]
 80179ac:	2b02      	cmp	r3, #2
 80179ae:	d117      	bne.n	80179e0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80179b0:	687a      	ldr	r2, [r7, #4]
 80179b2:	683b      	ldr	r3, [r7, #0]
 80179b4:	781b      	ldrb	r3, [r3, #0]
 80179b6:	009b      	lsls	r3, r3, #2
 80179b8:	18d3      	adds	r3, r2, r3
 80179ba:	881b      	ldrh	r3, [r3, #0]
 80179bc:	b29a      	uxth	r2, r3
 80179be:	2062      	movs	r0, #98	@ 0x62
 80179c0:	183b      	adds	r3, r7, r0
 80179c2:	49ab      	ldr	r1, [pc, #684]	@ (8017c70 <USB_ActivateEndpoint+0x6a8>)
 80179c4:	400a      	ands	r2, r1
 80179c6:	801a      	strh	r2, [r3, #0]
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	683b      	ldr	r3, [r7, #0]
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	009b      	lsls	r3, r3, #2
 80179d0:	18d3      	adds	r3, r2, r3
 80179d2:	183a      	adds	r2, r7, r0
 80179d4:	8812      	ldrh	r2, [r2, #0]
 80179d6:	49aa      	ldr	r1, [pc, #680]	@ (8017c80 <USB_ActivateEndpoint+0x6b8>)
 80179d8:	430a      	orrs	r2, r1
 80179da:	b292      	uxth	r2, r2
 80179dc:	801a      	strh	r2, [r3, #0]
 80179de:	e016      	b.n	8017a0e <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80179e0:	687a      	ldr	r2, [r7, #4]
 80179e2:	683b      	ldr	r3, [r7, #0]
 80179e4:	781b      	ldrb	r3, [r3, #0]
 80179e6:	009b      	lsls	r3, r3, #2
 80179e8:	18d3      	adds	r3, r2, r3
 80179ea:	881b      	ldrh	r3, [r3, #0]
 80179ec:	b29a      	uxth	r2, r3
 80179ee:	2064      	movs	r0, #100	@ 0x64
 80179f0:	183b      	adds	r3, r7, r0
 80179f2:	49a4      	ldr	r1, [pc, #656]	@ (8017c84 <USB_ActivateEndpoint+0x6bc>)
 80179f4:	400a      	ands	r2, r1
 80179f6:	801a      	strh	r2, [r3, #0]
 80179f8:	687a      	ldr	r2, [r7, #4]
 80179fa:	683b      	ldr	r3, [r7, #0]
 80179fc:	781b      	ldrb	r3, [r3, #0]
 80179fe:	009b      	lsls	r3, r3, #2
 8017a00:	18d3      	adds	r3, r2, r3
 8017a02:	183a      	adds	r2, r7, r0
 8017a04:	8812      	ldrh	r2, [r2, #0]
 8017a06:	499d      	ldr	r1, [pc, #628]	@ (8017c7c <USB_ActivateEndpoint+0x6b4>)
 8017a08:	430a      	orrs	r2, r1
 8017a0a:	b292      	uxth	r2, r2
 8017a0c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	2250      	movs	r2, #80	@ 0x50
 8017a16:	5a9b      	ldrh	r3, [r3, r2]
 8017a18:	b29b      	uxth	r3, r3
 8017a1a:	001a      	movs	r2, r3
 8017a1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a1e:	189b      	adds	r3, r3, r2
 8017a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017a22:	683b      	ldr	r3, [r7, #0]
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	00da      	lsls	r2, r3, #3
 8017a28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017a2a:	18d3      	adds	r3, r2, r3
 8017a2c:	2280      	movs	r2, #128	@ 0x80
 8017a2e:	00d2      	lsls	r2, r2, #3
 8017a30:	4694      	mov	ip, r2
 8017a32:	4463      	add	r3, ip
 8017a34:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	891b      	ldrh	r3, [r3, #8]
 8017a3a:	085b      	lsrs	r3, r3, #1
 8017a3c:	b29b      	uxth	r3, r3
 8017a3e:	18db      	adds	r3, r3, r3
 8017a40:	b29a      	uxth	r2, r3
 8017a42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017a44:	801a      	strh	r2, [r3, #0]
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	657b      	str	r3, [r7, #84]	@ 0x54
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2250      	movs	r2, #80	@ 0x50
 8017a4e:	5a9b      	ldrh	r3, [r3, r2]
 8017a50:	b29b      	uxth	r3, r3
 8017a52:	001a      	movs	r2, r3
 8017a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a56:	189b      	adds	r3, r3, r2
 8017a58:	657b      	str	r3, [r7, #84]	@ 0x54
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	781b      	ldrb	r3, [r3, #0]
 8017a5e:	00da      	lsls	r2, r3, #3
 8017a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017a62:	18d3      	adds	r3, r2, r3
 8017a64:	4a88      	ldr	r2, [pc, #544]	@ (8017c88 <USB_ActivateEndpoint+0x6c0>)
 8017a66:	4694      	mov	ip, r2
 8017a68:	4463      	add	r3, ip
 8017a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	895b      	ldrh	r3, [r3, #10]
 8017a70:	085b      	lsrs	r3, r3, #1
 8017a72:	b29b      	uxth	r3, r3
 8017a74:	18db      	adds	r3, r3, r3
 8017a76:	b29a      	uxth	r2, r3
 8017a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017a7a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8017a7c:	683b      	ldr	r3, [r7, #0]
 8017a7e:	785b      	ldrb	r3, [r3, #1]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d000      	beq.n	8017a86 <USB_ActivateEndpoint+0x4be>
 8017a84:	e087      	b.n	8017b96 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017a86:	687a      	ldr	r2, [r7, #4]
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	009b      	lsls	r3, r3, #2
 8017a8e:	18d2      	adds	r2, r2, r3
 8017a90:	2140      	movs	r1, #64	@ 0x40
 8017a92:	187b      	adds	r3, r7, r1
 8017a94:	8812      	ldrh	r2, [r2, #0]
 8017a96:	801a      	strh	r2, [r3, #0]
 8017a98:	187b      	adds	r3, r7, r1
 8017a9a:	881a      	ldrh	r2, [r3, #0]
 8017a9c:	2380      	movs	r3, #128	@ 0x80
 8017a9e:	01db      	lsls	r3, r3, #7
 8017aa0:	4013      	ands	r3, r2
 8017aa2:	d016      	beq.n	8017ad2 <USB_ActivateEndpoint+0x50a>
 8017aa4:	687a      	ldr	r2, [r7, #4]
 8017aa6:	683b      	ldr	r3, [r7, #0]
 8017aa8:	781b      	ldrb	r3, [r3, #0]
 8017aaa:	009b      	lsls	r3, r3, #2
 8017aac:	18d3      	adds	r3, r2, r3
 8017aae:	881b      	ldrh	r3, [r3, #0]
 8017ab0:	b29a      	uxth	r2, r3
 8017ab2:	203e      	movs	r0, #62	@ 0x3e
 8017ab4:	183b      	adds	r3, r7, r0
 8017ab6:	496e      	ldr	r1, [pc, #440]	@ (8017c70 <USB_ActivateEndpoint+0x6a8>)
 8017ab8:	400a      	ands	r2, r1
 8017aba:	801a      	strh	r2, [r3, #0]
 8017abc:	687a      	ldr	r2, [r7, #4]
 8017abe:	683b      	ldr	r3, [r7, #0]
 8017ac0:	781b      	ldrb	r3, [r3, #0]
 8017ac2:	009b      	lsls	r3, r3, #2
 8017ac4:	18d3      	adds	r3, r2, r3
 8017ac6:	183a      	adds	r2, r7, r0
 8017ac8:	8812      	ldrh	r2, [r2, #0]
 8017aca:	496a      	ldr	r1, [pc, #424]	@ (8017c74 <USB_ActivateEndpoint+0x6ac>)
 8017acc:	430a      	orrs	r2, r1
 8017ace:	b292      	uxth	r2, r2
 8017ad0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017ad2:	687a      	ldr	r2, [r7, #4]
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	781b      	ldrb	r3, [r3, #0]
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	18d2      	adds	r2, r2, r3
 8017adc:	213c      	movs	r1, #60	@ 0x3c
 8017ade:	187b      	adds	r3, r7, r1
 8017ae0:	8812      	ldrh	r2, [r2, #0]
 8017ae2:	801a      	strh	r2, [r3, #0]
 8017ae4:	187b      	adds	r3, r7, r1
 8017ae6:	881b      	ldrh	r3, [r3, #0]
 8017ae8:	2240      	movs	r2, #64	@ 0x40
 8017aea:	4013      	ands	r3, r2
 8017aec:	d016      	beq.n	8017b1c <USB_ActivateEndpoint+0x554>
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	781b      	ldrb	r3, [r3, #0]
 8017af4:	009b      	lsls	r3, r3, #2
 8017af6:	18d3      	adds	r3, r2, r3
 8017af8:	881b      	ldrh	r3, [r3, #0]
 8017afa:	b29a      	uxth	r2, r3
 8017afc:	203a      	movs	r0, #58	@ 0x3a
 8017afe:	183b      	adds	r3, r7, r0
 8017b00:	495b      	ldr	r1, [pc, #364]	@ (8017c70 <USB_ActivateEndpoint+0x6a8>)
 8017b02:	400a      	ands	r2, r1
 8017b04:	801a      	strh	r2, [r3, #0]
 8017b06:	687a      	ldr	r2, [r7, #4]
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	781b      	ldrb	r3, [r3, #0]
 8017b0c:	009b      	lsls	r3, r3, #2
 8017b0e:	18d3      	adds	r3, r2, r3
 8017b10:	183a      	adds	r2, r7, r0
 8017b12:	8812      	ldrh	r2, [r2, #0]
 8017b14:	495d      	ldr	r1, [pc, #372]	@ (8017c8c <USB_ActivateEndpoint+0x6c4>)
 8017b16:	430a      	orrs	r2, r1
 8017b18:	b292      	uxth	r2, r2
 8017b1a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8017b1c:	687a      	ldr	r2, [r7, #4]
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	781b      	ldrb	r3, [r3, #0]
 8017b22:	009b      	lsls	r3, r3, #2
 8017b24:	18d3      	adds	r3, r2, r3
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	b29a      	uxth	r2, r3
 8017b2a:	2038      	movs	r0, #56	@ 0x38
 8017b2c:	183b      	adds	r3, r7, r0
 8017b2e:	4952      	ldr	r1, [pc, #328]	@ (8017c78 <USB_ActivateEndpoint+0x6b0>)
 8017b30:	400a      	ands	r2, r1
 8017b32:	801a      	strh	r2, [r3, #0]
 8017b34:	183b      	adds	r3, r7, r0
 8017b36:	183a      	adds	r2, r7, r0
 8017b38:	8812      	ldrh	r2, [r2, #0]
 8017b3a:	2180      	movs	r1, #128	@ 0x80
 8017b3c:	0149      	lsls	r1, r1, #5
 8017b3e:	404a      	eors	r2, r1
 8017b40:	801a      	strh	r2, [r3, #0]
 8017b42:	183b      	adds	r3, r7, r0
 8017b44:	183a      	adds	r2, r7, r0
 8017b46:	8812      	ldrh	r2, [r2, #0]
 8017b48:	2180      	movs	r1, #128	@ 0x80
 8017b4a:	0189      	lsls	r1, r1, #6
 8017b4c:	404a      	eors	r2, r1
 8017b4e:	801a      	strh	r2, [r3, #0]
 8017b50:	687a      	ldr	r2, [r7, #4]
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	781b      	ldrb	r3, [r3, #0]
 8017b56:	009b      	lsls	r3, r3, #2
 8017b58:	18d3      	adds	r3, r2, r3
 8017b5a:	183a      	adds	r2, r7, r0
 8017b5c:	8812      	ldrh	r2, [r2, #0]
 8017b5e:	4947      	ldr	r1, [pc, #284]	@ (8017c7c <USB_ActivateEndpoint+0x6b4>)
 8017b60:	430a      	orrs	r2, r1
 8017b62:	b292      	uxth	r2, r2
 8017b64:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017b66:	687a      	ldr	r2, [r7, #4]
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	009b      	lsls	r3, r3, #2
 8017b6e:	18d3      	adds	r3, r2, r3
 8017b70:	881b      	ldrh	r3, [r3, #0]
 8017b72:	b29a      	uxth	r2, r3
 8017b74:	2036      	movs	r0, #54	@ 0x36
 8017b76:	183b      	adds	r3, r7, r0
 8017b78:	4945      	ldr	r1, [pc, #276]	@ (8017c90 <USB_ActivateEndpoint+0x6c8>)
 8017b7a:	400a      	ands	r2, r1
 8017b7c:	801a      	strh	r2, [r3, #0]
 8017b7e:	687a      	ldr	r2, [r7, #4]
 8017b80:	683b      	ldr	r3, [r7, #0]
 8017b82:	781b      	ldrb	r3, [r3, #0]
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	18d3      	adds	r3, r2, r3
 8017b88:	183a      	adds	r2, r7, r0
 8017b8a:	8812      	ldrh	r2, [r2, #0]
 8017b8c:	493b      	ldr	r1, [pc, #236]	@ (8017c7c <USB_ActivateEndpoint+0x6b4>)
 8017b8e:	430a      	orrs	r2, r1
 8017b90:	b292      	uxth	r2, r2
 8017b92:	801a      	strh	r2, [r3, #0]
 8017b94:	e0ac      	b.n	8017cf0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017b96:	687a      	ldr	r2, [r7, #4]
 8017b98:	683b      	ldr	r3, [r7, #0]
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	009b      	lsls	r3, r3, #2
 8017b9e:	18d2      	adds	r2, r2, r3
 8017ba0:	214e      	movs	r1, #78	@ 0x4e
 8017ba2:	187b      	adds	r3, r7, r1
 8017ba4:	8812      	ldrh	r2, [r2, #0]
 8017ba6:	801a      	strh	r2, [r3, #0]
 8017ba8:	187b      	adds	r3, r7, r1
 8017baa:	881a      	ldrh	r2, [r3, #0]
 8017bac:	2380      	movs	r3, #128	@ 0x80
 8017bae:	01db      	lsls	r3, r3, #7
 8017bb0:	4013      	ands	r3, r2
 8017bb2:	d016      	beq.n	8017be2 <USB_ActivateEndpoint+0x61a>
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	781b      	ldrb	r3, [r3, #0]
 8017bba:	009b      	lsls	r3, r3, #2
 8017bbc:	18d3      	adds	r3, r2, r3
 8017bbe:	881b      	ldrh	r3, [r3, #0]
 8017bc0:	b29a      	uxth	r2, r3
 8017bc2:	204c      	movs	r0, #76	@ 0x4c
 8017bc4:	183b      	adds	r3, r7, r0
 8017bc6:	492a      	ldr	r1, [pc, #168]	@ (8017c70 <USB_ActivateEndpoint+0x6a8>)
 8017bc8:	400a      	ands	r2, r1
 8017bca:	801a      	strh	r2, [r3, #0]
 8017bcc:	687a      	ldr	r2, [r7, #4]
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	781b      	ldrb	r3, [r3, #0]
 8017bd2:	009b      	lsls	r3, r3, #2
 8017bd4:	18d3      	adds	r3, r2, r3
 8017bd6:	183a      	adds	r2, r7, r0
 8017bd8:	8812      	ldrh	r2, [r2, #0]
 8017bda:	4926      	ldr	r1, [pc, #152]	@ (8017c74 <USB_ActivateEndpoint+0x6ac>)
 8017bdc:	430a      	orrs	r2, r1
 8017bde:	b292      	uxth	r2, r2
 8017be0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017be2:	687a      	ldr	r2, [r7, #4]
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	781b      	ldrb	r3, [r3, #0]
 8017be8:	009b      	lsls	r3, r3, #2
 8017bea:	18d2      	adds	r2, r2, r3
 8017bec:	214a      	movs	r1, #74	@ 0x4a
 8017bee:	187b      	adds	r3, r7, r1
 8017bf0:	8812      	ldrh	r2, [r2, #0]
 8017bf2:	801a      	strh	r2, [r3, #0]
 8017bf4:	187b      	adds	r3, r7, r1
 8017bf6:	881b      	ldrh	r3, [r3, #0]
 8017bf8:	2240      	movs	r2, #64	@ 0x40
 8017bfa:	4013      	ands	r3, r2
 8017bfc:	d016      	beq.n	8017c2c <USB_ActivateEndpoint+0x664>
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	683b      	ldr	r3, [r7, #0]
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	009b      	lsls	r3, r3, #2
 8017c06:	18d3      	adds	r3, r2, r3
 8017c08:	881b      	ldrh	r3, [r3, #0]
 8017c0a:	b29a      	uxth	r2, r3
 8017c0c:	2048      	movs	r0, #72	@ 0x48
 8017c0e:	183b      	adds	r3, r7, r0
 8017c10:	4917      	ldr	r1, [pc, #92]	@ (8017c70 <USB_ActivateEndpoint+0x6a8>)
 8017c12:	400a      	ands	r2, r1
 8017c14:	801a      	strh	r2, [r3, #0]
 8017c16:	687a      	ldr	r2, [r7, #4]
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	781b      	ldrb	r3, [r3, #0]
 8017c1c:	009b      	lsls	r3, r3, #2
 8017c1e:	18d3      	adds	r3, r2, r3
 8017c20:	183a      	adds	r2, r7, r0
 8017c22:	8812      	ldrh	r2, [r2, #0]
 8017c24:	4919      	ldr	r1, [pc, #100]	@ (8017c8c <USB_ActivateEndpoint+0x6c4>)
 8017c26:	430a      	orrs	r2, r1
 8017c28:	b292      	uxth	r2, r2
 8017c2a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	78db      	ldrb	r3, [r3, #3]
 8017c30:	2b01      	cmp	r3, #1
 8017c32:	d02f      	beq.n	8017c94 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8017c34:	687a      	ldr	r2, [r7, #4]
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	781b      	ldrb	r3, [r3, #0]
 8017c3a:	009b      	lsls	r3, r3, #2
 8017c3c:	18d3      	adds	r3, r2, r3
 8017c3e:	881b      	ldrh	r3, [r3, #0]
 8017c40:	b29a      	uxth	r2, r3
 8017c42:	2044      	movs	r0, #68	@ 0x44
 8017c44:	183b      	adds	r3, r7, r0
 8017c46:	4912      	ldr	r1, [pc, #72]	@ (8017c90 <USB_ActivateEndpoint+0x6c8>)
 8017c48:	400a      	ands	r2, r1
 8017c4a:	801a      	strh	r2, [r3, #0]
 8017c4c:	183b      	adds	r3, r7, r0
 8017c4e:	183a      	adds	r2, r7, r0
 8017c50:	8812      	ldrh	r2, [r2, #0]
 8017c52:	2120      	movs	r1, #32
 8017c54:	404a      	eors	r2, r1
 8017c56:	801a      	strh	r2, [r3, #0]
 8017c58:	687a      	ldr	r2, [r7, #4]
 8017c5a:	683b      	ldr	r3, [r7, #0]
 8017c5c:	781b      	ldrb	r3, [r3, #0]
 8017c5e:	009b      	lsls	r3, r3, #2
 8017c60:	18d3      	adds	r3, r2, r3
 8017c62:	183a      	adds	r2, r7, r0
 8017c64:	8812      	ldrh	r2, [r2, #0]
 8017c66:	4905      	ldr	r1, [pc, #20]	@ (8017c7c <USB_ActivateEndpoint+0x6b4>)
 8017c68:	430a      	orrs	r2, r1
 8017c6a:	b292      	uxth	r2, r2
 8017c6c:	801a      	strh	r2, [r3, #0]
 8017c6e:	e028      	b.n	8017cc2 <USB_ActivateEndpoint+0x6fa>
 8017c70:	ffff8f8f 	.word	0xffff8f8f
 8017c74:	ffffc080 	.word	0xffffc080
 8017c78:	ffffbf8f 	.word	0xffffbf8f
 8017c7c:	ffff8080 	.word	0xffff8080
 8017c80:	ffff8180 	.word	0xffff8180
 8017c84:	ffff8e8f 	.word	0xffff8e8f
 8017c88:	00000404 	.word	0x00000404
 8017c8c:	ffff80c0 	.word	0xffff80c0
 8017c90:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017c94:	687a      	ldr	r2, [r7, #4]
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	781b      	ldrb	r3, [r3, #0]
 8017c9a:	009b      	lsls	r3, r3, #2
 8017c9c:	18d3      	adds	r3, r2, r3
 8017c9e:	881b      	ldrh	r3, [r3, #0]
 8017ca0:	b29a      	uxth	r2, r3
 8017ca2:	2046      	movs	r0, #70	@ 0x46
 8017ca4:	183b      	adds	r3, r7, r0
 8017ca6:	4916      	ldr	r1, [pc, #88]	@ (8017d00 <USB_ActivateEndpoint+0x738>)
 8017ca8:	400a      	ands	r2, r1
 8017caa:	801a      	strh	r2, [r3, #0]
 8017cac:	687a      	ldr	r2, [r7, #4]
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	781b      	ldrb	r3, [r3, #0]
 8017cb2:	009b      	lsls	r3, r3, #2
 8017cb4:	18d3      	adds	r3, r2, r3
 8017cb6:	183a      	adds	r2, r7, r0
 8017cb8:	8812      	ldrh	r2, [r2, #0]
 8017cba:	4912      	ldr	r1, [pc, #72]	@ (8017d04 <USB_ActivateEndpoint+0x73c>)
 8017cbc:	430a      	orrs	r2, r1
 8017cbe:	b292      	uxth	r2, r2
 8017cc0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017cc2:	687a      	ldr	r2, [r7, #4]
 8017cc4:	683b      	ldr	r3, [r7, #0]
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	009b      	lsls	r3, r3, #2
 8017cca:	18d3      	adds	r3, r2, r3
 8017ccc:	881b      	ldrh	r3, [r3, #0]
 8017cce:	b29a      	uxth	r2, r3
 8017cd0:	2042      	movs	r0, #66	@ 0x42
 8017cd2:	183b      	adds	r3, r7, r0
 8017cd4:	490c      	ldr	r1, [pc, #48]	@ (8017d08 <USB_ActivateEndpoint+0x740>)
 8017cd6:	400a      	ands	r2, r1
 8017cd8:	801a      	strh	r2, [r3, #0]
 8017cda:	687a      	ldr	r2, [r7, #4]
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	009b      	lsls	r3, r3, #2
 8017ce2:	18d3      	adds	r3, r2, r3
 8017ce4:	183a      	adds	r2, r7, r0
 8017ce6:	8812      	ldrh	r2, [r2, #0]
 8017ce8:	4906      	ldr	r1, [pc, #24]	@ (8017d04 <USB_ActivateEndpoint+0x73c>)
 8017cea:	430a      	orrs	r2, r1
 8017cec:	b292      	uxth	r2, r2
 8017cee:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8017cf0:	236f      	movs	r3, #111	@ 0x6f
 8017cf2:	18fb      	adds	r3, r7, r3
 8017cf4:	781b      	ldrb	r3, [r3, #0]
}
 8017cf6:	0018      	movs	r0, r3
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	b01c      	add	sp, #112	@ 0x70
 8017cfc:	bd80      	pop	{r7, pc}
 8017cfe:	46c0      	nop			@ (mov r8, r8)
 8017d00:	ffff8fbf 	.word	0xffff8fbf
 8017d04:	ffff8080 	.word	0xffff8080
 8017d08:	ffffbf8f 	.word	0xffffbf8f

08017d0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b08c      	sub	sp, #48	@ 0x30
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
 8017d14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	7b1b      	ldrb	r3, [r3, #12]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d000      	beq.n	8017d20 <USB_DeactivateEndpoint+0x14>
 8017d1e:	e07e      	b.n	8017e1e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8017d20:	683b      	ldr	r3, [r7, #0]
 8017d22:	785b      	ldrb	r3, [r3, #1]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d03c      	beq.n	8017da2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017d28:	687a      	ldr	r2, [r7, #4]
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	781b      	ldrb	r3, [r3, #0]
 8017d2e:	009b      	lsls	r3, r3, #2
 8017d30:	18d2      	adds	r2, r2, r3
 8017d32:	210c      	movs	r1, #12
 8017d34:	187b      	adds	r3, r7, r1
 8017d36:	8812      	ldrh	r2, [r2, #0]
 8017d38:	801a      	strh	r2, [r3, #0]
 8017d3a:	187b      	adds	r3, r7, r1
 8017d3c:	881b      	ldrh	r3, [r3, #0]
 8017d3e:	2240      	movs	r2, #64	@ 0x40
 8017d40:	4013      	ands	r3, r2
 8017d42:	d016      	beq.n	8017d72 <USB_DeactivateEndpoint+0x66>
 8017d44:	687a      	ldr	r2, [r7, #4]
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	781b      	ldrb	r3, [r3, #0]
 8017d4a:	009b      	lsls	r3, r3, #2
 8017d4c:	18d3      	adds	r3, r2, r3
 8017d4e:	881b      	ldrh	r3, [r3, #0]
 8017d50:	b29a      	uxth	r2, r3
 8017d52:	200a      	movs	r0, #10
 8017d54:	183b      	adds	r3, r7, r0
 8017d56:	49c7      	ldr	r1, [pc, #796]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017d58:	400a      	ands	r2, r1
 8017d5a:	801a      	strh	r2, [r3, #0]
 8017d5c:	687a      	ldr	r2, [r7, #4]
 8017d5e:	683b      	ldr	r3, [r7, #0]
 8017d60:	781b      	ldrb	r3, [r3, #0]
 8017d62:	009b      	lsls	r3, r3, #2
 8017d64:	18d3      	adds	r3, r2, r3
 8017d66:	183a      	adds	r2, r7, r0
 8017d68:	8812      	ldrh	r2, [r2, #0]
 8017d6a:	49c3      	ldr	r1, [pc, #780]	@ (8018078 <USB_DeactivateEndpoint+0x36c>)
 8017d6c:	430a      	orrs	r2, r1
 8017d6e:	b292      	uxth	r2, r2
 8017d70:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017d72:	687a      	ldr	r2, [r7, #4]
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	009b      	lsls	r3, r3, #2
 8017d7a:	18d3      	adds	r3, r2, r3
 8017d7c:	881b      	ldrh	r3, [r3, #0]
 8017d7e:	b29a      	uxth	r2, r3
 8017d80:	2008      	movs	r0, #8
 8017d82:	183b      	adds	r3, r7, r0
 8017d84:	49bd      	ldr	r1, [pc, #756]	@ (801807c <USB_DeactivateEndpoint+0x370>)
 8017d86:	400a      	ands	r2, r1
 8017d88:	801a      	strh	r2, [r3, #0]
 8017d8a:	687a      	ldr	r2, [r7, #4]
 8017d8c:	683b      	ldr	r3, [r7, #0]
 8017d8e:	781b      	ldrb	r3, [r3, #0]
 8017d90:	009b      	lsls	r3, r3, #2
 8017d92:	18d3      	adds	r3, r2, r3
 8017d94:	183a      	adds	r2, r7, r0
 8017d96:	8812      	ldrh	r2, [r2, #0]
 8017d98:	49b9      	ldr	r1, [pc, #740]	@ (8018080 <USB_DeactivateEndpoint+0x374>)
 8017d9a:	430a      	orrs	r2, r1
 8017d9c:	b292      	uxth	r2, r2
 8017d9e:	801a      	strh	r2, [r3, #0]
 8017da0:	e163      	b.n	801806a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017da2:	687a      	ldr	r2, [r7, #4]
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	781b      	ldrb	r3, [r3, #0]
 8017da8:	009b      	lsls	r3, r3, #2
 8017daa:	18d2      	adds	r2, r2, r3
 8017dac:	2112      	movs	r1, #18
 8017dae:	187b      	adds	r3, r7, r1
 8017db0:	8812      	ldrh	r2, [r2, #0]
 8017db2:	801a      	strh	r2, [r3, #0]
 8017db4:	187b      	adds	r3, r7, r1
 8017db6:	881a      	ldrh	r2, [r3, #0]
 8017db8:	2380      	movs	r3, #128	@ 0x80
 8017dba:	01db      	lsls	r3, r3, #7
 8017dbc:	4013      	ands	r3, r2
 8017dbe:	d016      	beq.n	8017dee <USB_DeactivateEndpoint+0xe2>
 8017dc0:	687a      	ldr	r2, [r7, #4]
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	781b      	ldrb	r3, [r3, #0]
 8017dc6:	009b      	lsls	r3, r3, #2
 8017dc8:	18d3      	adds	r3, r2, r3
 8017dca:	881b      	ldrh	r3, [r3, #0]
 8017dcc:	b29a      	uxth	r2, r3
 8017dce:	2010      	movs	r0, #16
 8017dd0:	183b      	adds	r3, r7, r0
 8017dd2:	49a8      	ldr	r1, [pc, #672]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017dd4:	400a      	ands	r2, r1
 8017dd6:	801a      	strh	r2, [r3, #0]
 8017dd8:	687a      	ldr	r2, [r7, #4]
 8017dda:	683b      	ldr	r3, [r7, #0]
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	009b      	lsls	r3, r3, #2
 8017de0:	18d3      	adds	r3, r2, r3
 8017de2:	183a      	adds	r2, r7, r0
 8017de4:	8812      	ldrh	r2, [r2, #0]
 8017de6:	49a7      	ldr	r1, [pc, #668]	@ (8018084 <USB_DeactivateEndpoint+0x378>)
 8017de8:	430a      	orrs	r2, r1
 8017dea:	b292      	uxth	r2, r2
 8017dec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017dee:	687a      	ldr	r2, [r7, #4]
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	781b      	ldrb	r3, [r3, #0]
 8017df4:	009b      	lsls	r3, r3, #2
 8017df6:	18d3      	adds	r3, r2, r3
 8017df8:	881b      	ldrh	r3, [r3, #0]
 8017dfa:	b29a      	uxth	r2, r3
 8017dfc:	200e      	movs	r0, #14
 8017dfe:	183b      	adds	r3, r7, r0
 8017e00:	49a1      	ldr	r1, [pc, #644]	@ (8018088 <USB_DeactivateEndpoint+0x37c>)
 8017e02:	400a      	ands	r2, r1
 8017e04:	801a      	strh	r2, [r3, #0]
 8017e06:	687a      	ldr	r2, [r7, #4]
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	781b      	ldrb	r3, [r3, #0]
 8017e0c:	009b      	lsls	r3, r3, #2
 8017e0e:	18d3      	adds	r3, r2, r3
 8017e10:	183a      	adds	r2, r7, r0
 8017e12:	8812      	ldrh	r2, [r2, #0]
 8017e14:	499a      	ldr	r1, [pc, #616]	@ (8018080 <USB_DeactivateEndpoint+0x374>)
 8017e16:	430a      	orrs	r2, r1
 8017e18:	b292      	uxth	r2, r2
 8017e1a:	801a      	strh	r2, [r3, #0]
 8017e1c:	e125      	b.n	801806a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	785b      	ldrb	r3, [r3, #1]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d000      	beq.n	8017e28 <USB_DeactivateEndpoint+0x11c>
 8017e26:	e090      	b.n	8017f4a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017e28:	687a      	ldr	r2, [r7, #4]
 8017e2a:	683b      	ldr	r3, [r7, #0]
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	009b      	lsls	r3, r3, #2
 8017e30:	18d2      	adds	r2, r2, r3
 8017e32:	2120      	movs	r1, #32
 8017e34:	187b      	adds	r3, r7, r1
 8017e36:	8812      	ldrh	r2, [r2, #0]
 8017e38:	801a      	strh	r2, [r3, #0]
 8017e3a:	187b      	adds	r3, r7, r1
 8017e3c:	881a      	ldrh	r2, [r3, #0]
 8017e3e:	2380      	movs	r3, #128	@ 0x80
 8017e40:	01db      	lsls	r3, r3, #7
 8017e42:	4013      	ands	r3, r2
 8017e44:	d016      	beq.n	8017e74 <USB_DeactivateEndpoint+0x168>
 8017e46:	687a      	ldr	r2, [r7, #4]
 8017e48:	683b      	ldr	r3, [r7, #0]
 8017e4a:	781b      	ldrb	r3, [r3, #0]
 8017e4c:	009b      	lsls	r3, r3, #2
 8017e4e:	18d3      	adds	r3, r2, r3
 8017e50:	881b      	ldrh	r3, [r3, #0]
 8017e52:	b29a      	uxth	r2, r3
 8017e54:	201e      	movs	r0, #30
 8017e56:	183b      	adds	r3, r7, r0
 8017e58:	4986      	ldr	r1, [pc, #536]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017e5a:	400a      	ands	r2, r1
 8017e5c:	801a      	strh	r2, [r3, #0]
 8017e5e:	687a      	ldr	r2, [r7, #4]
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	18d3      	adds	r3, r2, r3
 8017e68:	183a      	adds	r2, r7, r0
 8017e6a:	8812      	ldrh	r2, [r2, #0]
 8017e6c:	4985      	ldr	r1, [pc, #532]	@ (8018084 <USB_DeactivateEndpoint+0x378>)
 8017e6e:	430a      	orrs	r2, r1
 8017e70:	b292      	uxth	r2, r2
 8017e72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017e74:	687a      	ldr	r2, [r7, #4]
 8017e76:	683b      	ldr	r3, [r7, #0]
 8017e78:	781b      	ldrb	r3, [r3, #0]
 8017e7a:	009b      	lsls	r3, r3, #2
 8017e7c:	18d2      	adds	r2, r2, r3
 8017e7e:	211c      	movs	r1, #28
 8017e80:	187b      	adds	r3, r7, r1
 8017e82:	8812      	ldrh	r2, [r2, #0]
 8017e84:	801a      	strh	r2, [r3, #0]
 8017e86:	187b      	adds	r3, r7, r1
 8017e88:	881b      	ldrh	r3, [r3, #0]
 8017e8a:	2240      	movs	r2, #64	@ 0x40
 8017e8c:	4013      	ands	r3, r2
 8017e8e:	d016      	beq.n	8017ebe <USB_DeactivateEndpoint+0x1b2>
 8017e90:	687a      	ldr	r2, [r7, #4]
 8017e92:	683b      	ldr	r3, [r7, #0]
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	009b      	lsls	r3, r3, #2
 8017e98:	18d3      	adds	r3, r2, r3
 8017e9a:	881b      	ldrh	r3, [r3, #0]
 8017e9c:	b29a      	uxth	r2, r3
 8017e9e:	201a      	movs	r0, #26
 8017ea0:	183b      	adds	r3, r7, r0
 8017ea2:	4974      	ldr	r1, [pc, #464]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017ea4:	400a      	ands	r2, r1
 8017ea6:	801a      	strh	r2, [r3, #0]
 8017ea8:	687a      	ldr	r2, [r7, #4]
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	781b      	ldrb	r3, [r3, #0]
 8017eae:	009b      	lsls	r3, r3, #2
 8017eb0:	18d3      	adds	r3, r2, r3
 8017eb2:	183a      	adds	r2, r7, r0
 8017eb4:	8812      	ldrh	r2, [r2, #0]
 8017eb6:	4970      	ldr	r1, [pc, #448]	@ (8018078 <USB_DeactivateEndpoint+0x36c>)
 8017eb8:	430a      	orrs	r2, r1
 8017eba:	b292      	uxth	r2, r2
 8017ebc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	009b      	lsls	r3, r3, #2
 8017ec6:	18d3      	adds	r3, r2, r3
 8017ec8:	881b      	ldrh	r3, [r3, #0]
 8017eca:	b29a      	uxth	r2, r3
 8017ecc:	2018      	movs	r0, #24
 8017ece:	183b      	adds	r3, r7, r0
 8017ed0:	4968      	ldr	r1, [pc, #416]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017ed2:	400a      	ands	r2, r1
 8017ed4:	801a      	strh	r2, [r3, #0]
 8017ed6:	687a      	ldr	r2, [r7, #4]
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	781b      	ldrb	r3, [r3, #0]
 8017edc:	009b      	lsls	r3, r3, #2
 8017ede:	18d3      	adds	r3, r2, r3
 8017ee0:	183a      	adds	r2, r7, r0
 8017ee2:	8812      	ldrh	r2, [r2, #0]
 8017ee4:	4964      	ldr	r1, [pc, #400]	@ (8018078 <USB_DeactivateEndpoint+0x36c>)
 8017ee6:	430a      	orrs	r2, r1
 8017ee8:	b292      	uxth	r2, r2
 8017eea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8017eec:	687a      	ldr	r2, [r7, #4]
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	781b      	ldrb	r3, [r3, #0]
 8017ef2:	009b      	lsls	r3, r3, #2
 8017ef4:	18d3      	adds	r3, r2, r3
 8017ef6:	881b      	ldrh	r3, [r3, #0]
 8017ef8:	b29a      	uxth	r2, r3
 8017efa:	2016      	movs	r0, #22
 8017efc:	183b      	adds	r3, r7, r0
 8017efe:	4962      	ldr	r1, [pc, #392]	@ (8018088 <USB_DeactivateEndpoint+0x37c>)
 8017f00:	400a      	ands	r2, r1
 8017f02:	801a      	strh	r2, [r3, #0]
 8017f04:	687a      	ldr	r2, [r7, #4]
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	781b      	ldrb	r3, [r3, #0]
 8017f0a:	009b      	lsls	r3, r3, #2
 8017f0c:	18d3      	adds	r3, r2, r3
 8017f0e:	183a      	adds	r2, r7, r0
 8017f10:	8812      	ldrh	r2, [r2, #0]
 8017f12:	495b      	ldr	r1, [pc, #364]	@ (8018080 <USB_DeactivateEndpoint+0x374>)
 8017f14:	430a      	orrs	r2, r1
 8017f16:	b292      	uxth	r2, r2
 8017f18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8017f1a:	687a      	ldr	r2, [r7, #4]
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	009b      	lsls	r3, r3, #2
 8017f22:	18d3      	adds	r3, r2, r3
 8017f24:	881b      	ldrh	r3, [r3, #0]
 8017f26:	b29a      	uxth	r2, r3
 8017f28:	2014      	movs	r0, #20
 8017f2a:	183b      	adds	r3, r7, r0
 8017f2c:	4953      	ldr	r1, [pc, #332]	@ (801807c <USB_DeactivateEndpoint+0x370>)
 8017f2e:	400a      	ands	r2, r1
 8017f30:	801a      	strh	r2, [r3, #0]
 8017f32:	687a      	ldr	r2, [r7, #4]
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	781b      	ldrb	r3, [r3, #0]
 8017f38:	009b      	lsls	r3, r3, #2
 8017f3a:	18d3      	adds	r3, r2, r3
 8017f3c:	183a      	adds	r2, r7, r0
 8017f3e:	8812      	ldrh	r2, [r2, #0]
 8017f40:	494f      	ldr	r1, [pc, #316]	@ (8018080 <USB_DeactivateEndpoint+0x374>)
 8017f42:	430a      	orrs	r2, r1
 8017f44:	b292      	uxth	r2, r2
 8017f46:	801a      	strh	r2, [r3, #0]
 8017f48:	e08f      	b.n	801806a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8017f4a:	687a      	ldr	r2, [r7, #4]
 8017f4c:	683b      	ldr	r3, [r7, #0]
 8017f4e:	781b      	ldrb	r3, [r3, #0]
 8017f50:	009b      	lsls	r3, r3, #2
 8017f52:	18d2      	adds	r2, r2, r3
 8017f54:	212e      	movs	r1, #46	@ 0x2e
 8017f56:	187b      	adds	r3, r7, r1
 8017f58:	8812      	ldrh	r2, [r2, #0]
 8017f5a:	801a      	strh	r2, [r3, #0]
 8017f5c:	187b      	adds	r3, r7, r1
 8017f5e:	881a      	ldrh	r2, [r3, #0]
 8017f60:	2380      	movs	r3, #128	@ 0x80
 8017f62:	01db      	lsls	r3, r3, #7
 8017f64:	4013      	ands	r3, r2
 8017f66:	d016      	beq.n	8017f96 <USB_DeactivateEndpoint+0x28a>
 8017f68:	687a      	ldr	r2, [r7, #4]
 8017f6a:	683b      	ldr	r3, [r7, #0]
 8017f6c:	781b      	ldrb	r3, [r3, #0]
 8017f6e:	009b      	lsls	r3, r3, #2
 8017f70:	18d3      	adds	r3, r2, r3
 8017f72:	881b      	ldrh	r3, [r3, #0]
 8017f74:	b29a      	uxth	r2, r3
 8017f76:	202c      	movs	r0, #44	@ 0x2c
 8017f78:	183b      	adds	r3, r7, r0
 8017f7a:	493e      	ldr	r1, [pc, #248]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017f7c:	400a      	ands	r2, r1
 8017f7e:	801a      	strh	r2, [r3, #0]
 8017f80:	687a      	ldr	r2, [r7, #4]
 8017f82:	683b      	ldr	r3, [r7, #0]
 8017f84:	781b      	ldrb	r3, [r3, #0]
 8017f86:	009b      	lsls	r3, r3, #2
 8017f88:	18d3      	adds	r3, r2, r3
 8017f8a:	183a      	adds	r2, r7, r0
 8017f8c:	8812      	ldrh	r2, [r2, #0]
 8017f8e:	493d      	ldr	r1, [pc, #244]	@ (8018084 <USB_DeactivateEndpoint+0x378>)
 8017f90:	430a      	orrs	r2, r1
 8017f92:	b292      	uxth	r2, r2
 8017f94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017f96:	687a      	ldr	r2, [r7, #4]
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	781b      	ldrb	r3, [r3, #0]
 8017f9c:	009b      	lsls	r3, r3, #2
 8017f9e:	18d2      	adds	r2, r2, r3
 8017fa0:	212a      	movs	r1, #42	@ 0x2a
 8017fa2:	187b      	adds	r3, r7, r1
 8017fa4:	8812      	ldrh	r2, [r2, #0]
 8017fa6:	801a      	strh	r2, [r3, #0]
 8017fa8:	187b      	adds	r3, r7, r1
 8017faa:	881b      	ldrh	r3, [r3, #0]
 8017fac:	2240      	movs	r2, #64	@ 0x40
 8017fae:	4013      	ands	r3, r2
 8017fb0:	d016      	beq.n	8017fe0 <USB_DeactivateEndpoint+0x2d4>
 8017fb2:	687a      	ldr	r2, [r7, #4]
 8017fb4:	683b      	ldr	r3, [r7, #0]
 8017fb6:	781b      	ldrb	r3, [r3, #0]
 8017fb8:	009b      	lsls	r3, r3, #2
 8017fba:	18d3      	adds	r3, r2, r3
 8017fbc:	881b      	ldrh	r3, [r3, #0]
 8017fbe:	b29a      	uxth	r2, r3
 8017fc0:	2028      	movs	r0, #40	@ 0x28
 8017fc2:	183b      	adds	r3, r7, r0
 8017fc4:	492b      	ldr	r1, [pc, #172]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017fc6:	400a      	ands	r2, r1
 8017fc8:	801a      	strh	r2, [r3, #0]
 8017fca:	687a      	ldr	r2, [r7, #4]
 8017fcc:	683b      	ldr	r3, [r7, #0]
 8017fce:	781b      	ldrb	r3, [r3, #0]
 8017fd0:	009b      	lsls	r3, r3, #2
 8017fd2:	18d3      	adds	r3, r2, r3
 8017fd4:	183a      	adds	r2, r7, r0
 8017fd6:	8812      	ldrh	r2, [r2, #0]
 8017fd8:	4927      	ldr	r1, [pc, #156]	@ (8018078 <USB_DeactivateEndpoint+0x36c>)
 8017fda:	430a      	orrs	r2, r1
 8017fdc:	b292      	uxth	r2, r2
 8017fde:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8017fe0:	687a      	ldr	r2, [r7, #4]
 8017fe2:	683b      	ldr	r3, [r7, #0]
 8017fe4:	781b      	ldrb	r3, [r3, #0]
 8017fe6:	009b      	lsls	r3, r3, #2
 8017fe8:	18d3      	adds	r3, r2, r3
 8017fea:	881b      	ldrh	r3, [r3, #0]
 8017fec:	b29a      	uxth	r2, r3
 8017fee:	2026      	movs	r0, #38	@ 0x26
 8017ff0:	183b      	adds	r3, r7, r0
 8017ff2:	4920      	ldr	r1, [pc, #128]	@ (8018074 <USB_DeactivateEndpoint+0x368>)
 8017ff4:	400a      	ands	r2, r1
 8017ff6:	801a      	strh	r2, [r3, #0]
 8017ff8:	687a      	ldr	r2, [r7, #4]
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	009b      	lsls	r3, r3, #2
 8018000:	18d3      	adds	r3, r2, r3
 8018002:	183a      	adds	r2, r7, r0
 8018004:	8812      	ldrh	r2, [r2, #0]
 8018006:	491f      	ldr	r1, [pc, #124]	@ (8018084 <USB_DeactivateEndpoint+0x378>)
 8018008:	430a      	orrs	r2, r1
 801800a:	b292      	uxth	r2, r2
 801800c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	683b      	ldr	r3, [r7, #0]
 8018012:	781b      	ldrb	r3, [r3, #0]
 8018014:	009b      	lsls	r3, r3, #2
 8018016:	18d3      	adds	r3, r2, r3
 8018018:	881b      	ldrh	r3, [r3, #0]
 801801a:	b29a      	uxth	r2, r3
 801801c:	2024      	movs	r0, #36	@ 0x24
 801801e:	183b      	adds	r3, r7, r0
 8018020:	4916      	ldr	r1, [pc, #88]	@ (801807c <USB_DeactivateEndpoint+0x370>)
 8018022:	400a      	ands	r2, r1
 8018024:	801a      	strh	r2, [r3, #0]
 8018026:	687a      	ldr	r2, [r7, #4]
 8018028:	683b      	ldr	r3, [r7, #0]
 801802a:	781b      	ldrb	r3, [r3, #0]
 801802c:	009b      	lsls	r3, r3, #2
 801802e:	18d3      	adds	r3, r2, r3
 8018030:	183a      	adds	r2, r7, r0
 8018032:	8812      	ldrh	r2, [r2, #0]
 8018034:	4912      	ldr	r1, [pc, #72]	@ (8018080 <USB_DeactivateEndpoint+0x374>)
 8018036:	430a      	orrs	r2, r1
 8018038:	b292      	uxth	r2, r2
 801803a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801803c:	687a      	ldr	r2, [r7, #4]
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	781b      	ldrb	r3, [r3, #0]
 8018042:	009b      	lsls	r3, r3, #2
 8018044:	18d3      	adds	r3, r2, r3
 8018046:	881b      	ldrh	r3, [r3, #0]
 8018048:	b29a      	uxth	r2, r3
 801804a:	2022      	movs	r0, #34	@ 0x22
 801804c:	183b      	adds	r3, r7, r0
 801804e:	490e      	ldr	r1, [pc, #56]	@ (8018088 <USB_DeactivateEndpoint+0x37c>)
 8018050:	400a      	ands	r2, r1
 8018052:	801a      	strh	r2, [r3, #0]
 8018054:	687a      	ldr	r2, [r7, #4]
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	781b      	ldrb	r3, [r3, #0]
 801805a:	009b      	lsls	r3, r3, #2
 801805c:	18d3      	adds	r3, r2, r3
 801805e:	183a      	adds	r2, r7, r0
 8018060:	8812      	ldrh	r2, [r2, #0]
 8018062:	4907      	ldr	r1, [pc, #28]	@ (8018080 <USB_DeactivateEndpoint+0x374>)
 8018064:	430a      	orrs	r2, r1
 8018066:	b292      	uxth	r2, r2
 8018068:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801806a:	2300      	movs	r3, #0
}
 801806c:	0018      	movs	r0, r3
 801806e:	46bd      	mov	sp, r7
 8018070:	b00c      	add	sp, #48	@ 0x30
 8018072:	bd80      	pop	{r7, pc}
 8018074:	ffff8f8f 	.word	0xffff8f8f
 8018078:	ffff80c0 	.word	0xffff80c0
 801807c:	ffff8fbf 	.word	0xffff8fbf
 8018080:	ffff8080 	.word	0xffff8080
 8018084:	ffffc080 	.word	0xffffc080
 8018088:	ffffbf8f 	.word	0xffffbf8f

0801808c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801808c:	b590      	push	{r4, r7, lr}
 801808e:	b0c3      	sub	sp, #268	@ 0x10c
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
 8018094:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8018096:	683b      	ldr	r3, [r7, #0]
 8018098:	785b      	ldrb	r3, [r3, #1]
 801809a:	2b01      	cmp	r3, #1
 801809c:	d001      	beq.n	80180a2 <USB_EPStartXfer+0x16>
 801809e:	f000 fd2d 	bl	8018afc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80180a2:	683b      	ldr	r3, [r7, #0]
 80180a4:	699a      	ldr	r2, [r3, #24]
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	429a      	cmp	r2, r3
 80180ac:	d905      	bls.n	80180ba <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	691b      	ldr	r3, [r3, #16]
 80180b2:	1d7a      	adds	r2, r7, #5
 80180b4:	32ff      	adds	r2, #255	@ 0xff
 80180b6:	6013      	str	r3, [r2, #0]
 80180b8:	e004      	b.n	80180c4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80180ba:	683b      	ldr	r3, [r7, #0]
 80180bc:	699b      	ldr	r3, [r3, #24]
 80180be:	1d7a      	adds	r2, r7, #5
 80180c0:	32ff      	adds	r2, #255	@ 0xff
 80180c2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80180c4:	683b      	ldr	r3, [r7, #0]
 80180c6:	7b1b      	ldrb	r3, [r3, #12]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d125      	bne.n	8018118 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80180cc:	683b      	ldr	r3, [r7, #0]
 80180ce:	6959      	ldr	r1, [r3, #20]
 80180d0:	683b      	ldr	r3, [r7, #0]
 80180d2:	88da      	ldrh	r2, [r3, #6]
 80180d4:	1d7b      	adds	r3, r7, #5
 80180d6:	33ff      	adds	r3, #255	@ 0xff
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	b29b      	uxth	r3, r3
 80180dc:	6878      	ldr	r0, [r7, #4]
 80180de:	f001 fa47 	bl	8019570 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	613b      	str	r3, [r7, #16]
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2250      	movs	r2, #80	@ 0x50
 80180ea:	5a9b      	ldrh	r3, [r3, r2]
 80180ec:	b29b      	uxth	r3, r3
 80180ee:	001a      	movs	r2, r3
 80180f0:	693b      	ldr	r3, [r7, #16]
 80180f2:	189b      	adds	r3, r3, r2
 80180f4:	613b      	str	r3, [r7, #16]
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	781b      	ldrb	r3, [r3, #0]
 80180fa:	00da      	lsls	r2, r3, #3
 80180fc:	693b      	ldr	r3, [r7, #16]
 80180fe:	18d3      	adds	r3, r2, r3
 8018100:	4ad7      	ldr	r2, [pc, #860]	@ (8018460 <USB_EPStartXfer+0x3d4>)
 8018102:	4694      	mov	ip, r2
 8018104:	4463      	add	r3, ip
 8018106:	60fb      	str	r3, [r7, #12]
 8018108:	1d7b      	adds	r3, r7, #5
 801810a:	33ff      	adds	r3, #255	@ 0xff
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	b29a      	uxth	r2, r3
 8018110:	68fb      	ldr	r3, [r7, #12]
 8018112:	801a      	strh	r2, [r3, #0]
 8018114:	f000 fccd 	bl	8018ab2 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8018118:	683b      	ldr	r3, [r7, #0]
 801811a:	78db      	ldrb	r3, [r3, #3]
 801811c:	2b02      	cmp	r3, #2
 801811e:	d000      	beq.n	8018122 <USB_EPStartXfer+0x96>
 8018120:	e362      	b.n	80187e8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8018122:	683b      	ldr	r3, [r7, #0]
 8018124:	6a1a      	ldr	r2, [r3, #32]
 8018126:	683b      	ldr	r3, [r7, #0]
 8018128:	691b      	ldr	r3, [r3, #16]
 801812a:	429a      	cmp	r2, r3
 801812c:	d800      	bhi.n	8018130 <USB_EPStartXfer+0xa4>
 801812e:	e309      	b.n	8018744 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018130:	687a      	ldr	r2, [r7, #4]
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	009b      	lsls	r3, r3, #2
 8018138:	18d3      	adds	r3, r2, r3
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	b29a      	uxth	r2, r3
 801813e:	2056      	movs	r0, #86	@ 0x56
 8018140:	183b      	adds	r3, r7, r0
 8018142:	49c8      	ldr	r1, [pc, #800]	@ (8018464 <USB_EPStartXfer+0x3d8>)
 8018144:	400a      	ands	r2, r1
 8018146:	801a      	strh	r2, [r3, #0]
 8018148:	687a      	ldr	r2, [r7, #4]
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	781b      	ldrb	r3, [r3, #0]
 801814e:	009b      	lsls	r3, r3, #2
 8018150:	18d3      	adds	r3, r2, r3
 8018152:	183a      	adds	r2, r7, r0
 8018154:	8812      	ldrh	r2, [r2, #0]
 8018156:	49c4      	ldr	r1, [pc, #784]	@ (8018468 <USB_EPStartXfer+0x3dc>)
 8018158:	430a      	orrs	r2, r1
 801815a:	b292      	uxth	r2, r2
 801815c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	6a1a      	ldr	r2, [r3, #32]
 8018162:	1d7b      	adds	r3, r7, #5
 8018164:	33ff      	adds	r3, #255	@ 0xff
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	1ad2      	subs	r2, r2, r3
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801816e:	687a      	ldr	r2, [r7, #4]
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	009b      	lsls	r3, r3, #2
 8018176:	18d3      	adds	r3, r2, r3
 8018178:	881b      	ldrh	r3, [r3, #0]
 801817a:	b29b      	uxth	r3, r3
 801817c:	001a      	movs	r2, r3
 801817e:	2340      	movs	r3, #64	@ 0x40
 8018180:	4013      	ands	r3, r2
 8018182:	d100      	bne.n	8018186 <USB_EPStartXfer+0xfa>
 8018184:	e176      	b.n	8018474 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	633b      	str	r3, [r7, #48]	@ 0x30
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	785b      	ldrb	r3, [r3, #1]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d000      	beq.n	8018194 <USB_EPStartXfer+0x108>
 8018192:	e074      	b.n	801827e <USB_EPStartXfer+0x1f2>
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2250      	movs	r2, #80	@ 0x50
 801819c:	5a9b      	ldrh	r3, [r3, r2]
 801819e:	b29b      	uxth	r3, r3
 80181a0:	001a      	movs	r2, r3
 80181a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181a4:	189b      	adds	r3, r3, r2
 80181a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80181a8:	683b      	ldr	r3, [r7, #0]
 80181aa:	781b      	ldrb	r3, [r3, #0]
 80181ac:	00da      	lsls	r2, r3, #3
 80181ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181b0:	18d3      	adds	r3, r2, r3
 80181b2:	4aae      	ldr	r2, [pc, #696]	@ (801846c <USB_EPStartXfer+0x3e0>)
 80181b4:	4694      	mov	ip, r2
 80181b6:	4463      	add	r3, ip
 80181b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80181ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181bc:	881b      	ldrh	r3, [r3, #0]
 80181be:	b29b      	uxth	r3, r3
 80181c0:	059b      	lsls	r3, r3, #22
 80181c2:	0d9b      	lsrs	r3, r3, #22
 80181c4:	b29a      	uxth	r2, r3
 80181c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c8:	801a      	strh	r2, [r3, #0]
 80181ca:	1d7b      	adds	r3, r7, #5
 80181cc:	33ff      	adds	r3, #255	@ 0xff
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80181d2:	d924      	bls.n	801821e <USB_EPStartXfer+0x192>
 80181d4:	1d7b      	adds	r3, r7, #5
 80181d6:	33ff      	adds	r3, #255	@ 0xff
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	095b      	lsrs	r3, r3, #5
 80181dc:	1c7a      	adds	r2, r7, #1
 80181de:	32ff      	adds	r2, #255	@ 0xff
 80181e0:	6013      	str	r3, [r2, #0]
 80181e2:	1d7b      	adds	r3, r7, #5
 80181e4:	33ff      	adds	r3, #255	@ 0xff
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	221f      	movs	r2, #31
 80181ea:	4013      	ands	r3, r2
 80181ec:	d106      	bne.n	80181fc <USB_EPStartXfer+0x170>
 80181ee:	1c7b      	adds	r3, r7, #1
 80181f0:	33ff      	adds	r3, #255	@ 0xff
 80181f2:	681b      	ldr	r3, [r3, #0]
 80181f4:	3b01      	subs	r3, #1
 80181f6:	1c7a      	adds	r2, r7, #1
 80181f8:	32ff      	adds	r2, #255	@ 0xff
 80181fa:	6013      	str	r3, [r2, #0]
 80181fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181fe:	881b      	ldrh	r3, [r3, #0]
 8018200:	b29a      	uxth	r2, r3
 8018202:	1c7b      	adds	r3, r7, #1
 8018204:	33ff      	adds	r3, #255	@ 0xff
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	b29b      	uxth	r3, r3
 801820a:	029b      	lsls	r3, r3, #10
 801820c:	b29b      	uxth	r3, r3
 801820e:	4313      	orrs	r3, r2
 8018210:	b29b      	uxth	r3, r3
 8018212:	4a97      	ldr	r2, [pc, #604]	@ (8018470 <USB_EPStartXfer+0x3e4>)
 8018214:	4313      	orrs	r3, r2
 8018216:	b29a      	uxth	r2, r3
 8018218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801821a:	801a      	strh	r2, [r3, #0]
 801821c:	e04a      	b.n	80182b4 <USB_EPStartXfer+0x228>
 801821e:	1d7b      	adds	r3, r7, #5
 8018220:	33ff      	adds	r3, #255	@ 0xff
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	2b00      	cmp	r3, #0
 8018226:	d108      	bne.n	801823a <USB_EPStartXfer+0x1ae>
 8018228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801822a:	881b      	ldrh	r3, [r3, #0]
 801822c:	b29b      	uxth	r3, r3
 801822e:	4a90      	ldr	r2, [pc, #576]	@ (8018470 <USB_EPStartXfer+0x3e4>)
 8018230:	4313      	orrs	r3, r2
 8018232:	b29a      	uxth	r2, r3
 8018234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018236:	801a      	strh	r2, [r3, #0]
 8018238:	e03c      	b.n	80182b4 <USB_EPStartXfer+0x228>
 801823a:	1d7b      	adds	r3, r7, #5
 801823c:	33ff      	adds	r3, #255	@ 0xff
 801823e:	681b      	ldr	r3, [r3, #0]
 8018240:	085b      	lsrs	r3, r3, #1
 8018242:	1c7a      	adds	r2, r7, #1
 8018244:	32ff      	adds	r2, #255	@ 0xff
 8018246:	6013      	str	r3, [r2, #0]
 8018248:	1d7b      	adds	r3, r7, #5
 801824a:	33ff      	adds	r3, #255	@ 0xff
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	2201      	movs	r2, #1
 8018250:	4013      	ands	r3, r2
 8018252:	d006      	beq.n	8018262 <USB_EPStartXfer+0x1d6>
 8018254:	1c7b      	adds	r3, r7, #1
 8018256:	33ff      	adds	r3, #255	@ 0xff
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	3301      	adds	r3, #1
 801825c:	1c7a      	adds	r2, r7, #1
 801825e:	32ff      	adds	r2, #255	@ 0xff
 8018260:	6013      	str	r3, [r2, #0]
 8018262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018264:	881b      	ldrh	r3, [r3, #0]
 8018266:	b29a      	uxth	r2, r3
 8018268:	1c7b      	adds	r3, r7, #1
 801826a:	33ff      	adds	r3, #255	@ 0xff
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	b29b      	uxth	r3, r3
 8018270:	029b      	lsls	r3, r3, #10
 8018272:	b29b      	uxth	r3, r3
 8018274:	4313      	orrs	r3, r2
 8018276:	b29a      	uxth	r2, r3
 8018278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801827a:	801a      	strh	r2, [r3, #0]
 801827c:	e01a      	b.n	80182b4 <USB_EPStartXfer+0x228>
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	785b      	ldrb	r3, [r3, #1]
 8018282:	2b01      	cmp	r3, #1
 8018284:	d116      	bne.n	80182b4 <USB_EPStartXfer+0x228>
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	2250      	movs	r2, #80	@ 0x50
 801828a:	5a9b      	ldrh	r3, [r3, r2]
 801828c:	b29b      	uxth	r3, r3
 801828e:	001a      	movs	r2, r3
 8018290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018292:	189b      	adds	r3, r3, r2
 8018294:	633b      	str	r3, [r7, #48]	@ 0x30
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	781b      	ldrb	r3, [r3, #0]
 801829a:	00da      	lsls	r2, r3, #3
 801829c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801829e:	18d3      	adds	r3, r2, r3
 80182a0:	4a72      	ldr	r2, [pc, #456]	@ (801846c <USB_EPStartXfer+0x3e0>)
 80182a2:	4694      	mov	ip, r2
 80182a4:	4463      	add	r3, ip
 80182a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80182a8:	1d7b      	adds	r3, r7, #5
 80182aa:	33ff      	adds	r3, #255	@ 0xff
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	b29a      	uxth	r2, r3
 80182b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80182b2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80182b4:	2076      	movs	r0, #118	@ 0x76
 80182b6:	183b      	adds	r3, r7, r0
 80182b8:	683a      	ldr	r2, [r7, #0]
 80182ba:	8952      	ldrh	r2, [r2, #10]
 80182bc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	6959      	ldr	r1, [r3, #20]
 80182c2:	1d7b      	adds	r3, r7, #5
 80182c4:	33ff      	adds	r3, #255	@ 0xff
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	b29c      	uxth	r4, r3
 80182ca:	183b      	adds	r3, r7, r0
 80182cc:	881a      	ldrh	r2, [r3, #0]
 80182ce:	6878      	ldr	r0, [r7, #4]
 80182d0:	0023      	movs	r3, r4
 80182d2:	f001 f94d 	bl	8019570 <USB_WritePMA>
            ep->xfer_buff += len;
 80182d6:	683b      	ldr	r3, [r7, #0]
 80182d8:	695a      	ldr	r2, [r3, #20]
 80182da:	1d7b      	adds	r3, r7, #5
 80182dc:	33ff      	adds	r3, #255	@ 0xff
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	18d2      	adds	r2, r2, r3
 80182e2:	683b      	ldr	r3, [r7, #0]
 80182e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80182e6:	683b      	ldr	r3, [r7, #0]
 80182e8:	6a1a      	ldr	r2, [r3, #32]
 80182ea:	683b      	ldr	r3, [r7, #0]
 80182ec:	691b      	ldr	r3, [r3, #16]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d908      	bls.n	8018304 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 80182f2:	683b      	ldr	r3, [r7, #0]
 80182f4:	6a1a      	ldr	r2, [r3, #32]
 80182f6:	1d7b      	adds	r3, r7, #5
 80182f8:	33ff      	adds	r3, #255	@ 0xff
 80182fa:	681b      	ldr	r3, [r3, #0]
 80182fc:	1ad2      	subs	r2, r2, r3
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	621a      	str	r2, [r3, #32]
 8018302:	e007      	b.n	8018314 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8018304:	683b      	ldr	r3, [r7, #0]
 8018306:	6a1b      	ldr	r3, [r3, #32]
 8018308:	1d7a      	adds	r2, r7, #5
 801830a:	32ff      	adds	r2, #255	@ 0xff
 801830c:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801830e:	683b      	ldr	r3, [r7, #0]
 8018310:	2200      	movs	r2, #0
 8018312:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018314:	683b      	ldr	r3, [r7, #0]
 8018316:	785b      	ldrb	r3, [r3, #1]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d000      	beq.n	801831e <USB_EPStartXfer+0x292>
 801831c:	e070      	b.n	8018400 <USB_EPStartXfer+0x374>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	61bb      	str	r3, [r7, #24]
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	2250      	movs	r2, #80	@ 0x50
 8018326:	5a9b      	ldrh	r3, [r3, r2]
 8018328:	b29b      	uxth	r3, r3
 801832a:	001a      	movs	r2, r3
 801832c:	69bb      	ldr	r3, [r7, #24]
 801832e:	189b      	adds	r3, r3, r2
 8018330:	61bb      	str	r3, [r7, #24]
 8018332:	683b      	ldr	r3, [r7, #0]
 8018334:	781b      	ldrb	r3, [r3, #0]
 8018336:	00da      	lsls	r2, r3, #3
 8018338:	69bb      	ldr	r3, [r7, #24]
 801833a:	18d3      	adds	r3, r2, r3
 801833c:	4a48      	ldr	r2, [pc, #288]	@ (8018460 <USB_EPStartXfer+0x3d4>)
 801833e:	4694      	mov	ip, r2
 8018340:	4463      	add	r3, ip
 8018342:	617b      	str	r3, [r7, #20]
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	881b      	ldrh	r3, [r3, #0]
 8018348:	b29b      	uxth	r3, r3
 801834a:	059b      	lsls	r3, r3, #22
 801834c:	0d9b      	lsrs	r3, r3, #22
 801834e:	b29a      	uxth	r2, r3
 8018350:	697b      	ldr	r3, [r7, #20]
 8018352:	801a      	strh	r2, [r3, #0]
 8018354:	1d7b      	adds	r3, r7, #5
 8018356:	33ff      	adds	r3, #255	@ 0xff
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	2b3e      	cmp	r3, #62	@ 0x3e
 801835c:	d922      	bls.n	80183a4 <USB_EPStartXfer+0x318>
 801835e:	1d7b      	adds	r3, r7, #5
 8018360:	33ff      	adds	r3, #255	@ 0xff
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	095b      	lsrs	r3, r3, #5
 8018366:	21fc      	movs	r1, #252	@ 0xfc
 8018368:	187a      	adds	r2, r7, r1
 801836a:	6013      	str	r3, [r2, #0]
 801836c:	1d7b      	adds	r3, r7, #5
 801836e:	33ff      	adds	r3, #255	@ 0xff
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	221f      	movs	r2, #31
 8018374:	4013      	ands	r3, r2
 8018376:	d104      	bne.n	8018382 <USB_EPStartXfer+0x2f6>
 8018378:	187b      	adds	r3, r7, r1
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	3b01      	subs	r3, #1
 801837e:	187a      	adds	r2, r7, r1
 8018380:	6013      	str	r3, [r2, #0]
 8018382:	697b      	ldr	r3, [r7, #20]
 8018384:	881b      	ldrh	r3, [r3, #0]
 8018386:	b29a      	uxth	r2, r3
 8018388:	23fc      	movs	r3, #252	@ 0xfc
 801838a:	18fb      	adds	r3, r7, r3
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	b29b      	uxth	r3, r3
 8018390:	029b      	lsls	r3, r3, #10
 8018392:	b29b      	uxth	r3, r3
 8018394:	4313      	orrs	r3, r2
 8018396:	b29b      	uxth	r3, r3
 8018398:	4a35      	ldr	r2, [pc, #212]	@ (8018470 <USB_EPStartXfer+0x3e4>)
 801839a:	4313      	orrs	r3, r2
 801839c:	b29a      	uxth	r2, r3
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	801a      	strh	r2, [r3, #0]
 80183a2:	e04a      	b.n	801843a <USB_EPStartXfer+0x3ae>
 80183a4:	1d7b      	adds	r3, r7, #5
 80183a6:	33ff      	adds	r3, #255	@ 0xff
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d108      	bne.n	80183c0 <USB_EPStartXfer+0x334>
 80183ae:	697b      	ldr	r3, [r7, #20]
 80183b0:	881b      	ldrh	r3, [r3, #0]
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	4a2e      	ldr	r2, [pc, #184]	@ (8018470 <USB_EPStartXfer+0x3e4>)
 80183b6:	4313      	orrs	r3, r2
 80183b8:	b29a      	uxth	r2, r3
 80183ba:	697b      	ldr	r3, [r7, #20]
 80183bc:	801a      	strh	r2, [r3, #0]
 80183be:	e03c      	b.n	801843a <USB_EPStartXfer+0x3ae>
 80183c0:	1d7b      	adds	r3, r7, #5
 80183c2:	33ff      	adds	r3, #255	@ 0xff
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	085b      	lsrs	r3, r3, #1
 80183c8:	21fc      	movs	r1, #252	@ 0xfc
 80183ca:	187a      	adds	r2, r7, r1
 80183cc:	6013      	str	r3, [r2, #0]
 80183ce:	1d7b      	adds	r3, r7, #5
 80183d0:	33ff      	adds	r3, #255	@ 0xff
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	2201      	movs	r2, #1
 80183d6:	4013      	ands	r3, r2
 80183d8:	d004      	beq.n	80183e4 <USB_EPStartXfer+0x358>
 80183da:	187b      	adds	r3, r7, r1
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	3301      	adds	r3, #1
 80183e0:	187a      	adds	r2, r7, r1
 80183e2:	6013      	str	r3, [r2, #0]
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	881b      	ldrh	r3, [r3, #0]
 80183e8:	b29a      	uxth	r2, r3
 80183ea:	23fc      	movs	r3, #252	@ 0xfc
 80183ec:	18fb      	adds	r3, r7, r3
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	b29b      	uxth	r3, r3
 80183f2:	029b      	lsls	r3, r3, #10
 80183f4:	b29b      	uxth	r3, r3
 80183f6:	4313      	orrs	r3, r2
 80183f8:	b29a      	uxth	r2, r3
 80183fa:	697b      	ldr	r3, [r7, #20]
 80183fc:	801a      	strh	r2, [r3, #0]
 80183fe:	e01c      	b.n	801843a <USB_EPStartXfer+0x3ae>
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	785b      	ldrb	r3, [r3, #1]
 8018404:	2b01      	cmp	r3, #1
 8018406:	d118      	bne.n	801843a <USB_EPStartXfer+0x3ae>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	623b      	str	r3, [r7, #32]
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	2250      	movs	r2, #80	@ 0x50
 8018410:	5a9b      	ldrh	r3, [r3, r2]
 8018412:	b29b      	uxth	r3, r3
 8018414:	001a      	movs	r2, r3
 8018416:	6a3b      	ldr	r3, [r7, #32]
 8018418:	189b      	adds	r3, r3, r2
 801841a:	623b      	str	r3, [r7, #32]
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	00da      	lsls	r2, r3, #3
 8018422:	6a3b      	ldr	r3, [r7, #32]
 8018424:	18d3      	adds	r3, r2, r3
 8018426:	4a0e      	ldr	r2, [pc, #56]	@ (8018460 <USB_EPStartXfer+0x3d4>)
 8018428:	4694      	mov	ip, r2
 801842a:	4463      	add	r3, ip
 801842c:	61fb      	str	r3, [r7, #28]
 801842e:	1d7b      	adds	r3, r7, #5
 8018430:	33ff      	adds	r3, #255	@ 0xff
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	b29a      	uxth	r2, r3
 8018436:	69fb      	ldr	r3, [r7, #28]
 8018438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801843a:	2076      	movs	r0, #118	@ 0x76
 801843c:	183b      	adds	r3, r7, r0
 801843e:	683a      	ldr	r2, [r7, #0]
 8018440:	8912      	ldrh	r2, [r2, #8]
 8018442:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018444:	683b      	ldr	r3, [r7, #0]
 8018446:	6959      	ldr	r1, [r3, #20]
 8018448:	1d7b      	adds	r3, r7, #5
 801844a:	33ff      	adds	r3, #255	@ 0xff
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	b29c      	uxth	r4, r3
 8018450:	183b      	adds	r3, r7, r0
 8018452:	881a      	ldrh	r2, [r3, #0]
 8018454:	6878      	ldr	r0, [r7, #4]
 8018456:	0023      	movs	r3, r4
 8018458:	f001 f88a 	bl	8019570 <USB_WritePMA>
 801845c:	e329      	b.n	8018ab2 <USB_EPStartXfer+0xa26>
 801845e:	46c0      	nop			@ (mov r8, r8)
 8018460:	00000402 	.word	0x00000402
 8018464:	ffff8f8f 	.word	0xffff8f8f
 8018468:	ffff8180 	.word	0xffff8180
 801846c:	00000406 	.word	0x00000406
 8018470:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018474:	683b      	ldr	r3, [r7, #0]
 8018476:	785b      	ldrb	r3, [r3, #1]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d000      	beq.n	801847e <USB_EPStartXfer+0x3f2>
 801847c:	e070      	b.n	8018560 <USB_EPStartXfer+0x4d4>
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2250      	movs	r2, #80	@ 0x50
 8018486:	5a9b      	ldrh	r3, [r3, r2]
 8018488:	b29b      	uxth	r3, r3
 801848a:	001a      	movs	r2, r3
 801848c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801848e:	189b      	adds	r3, r3, r2
 8018490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018492:	683b      	ldr	r3, [r7, #0]
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	00da      	lsls	r2, r3, #3
 8018498:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801849a:	18d3      	adds	r3, r2, r3
 801849c:	4acd      	ldr	r2, [pc, #820]	@ (80187d4 <USB_EPStartXfer+0x748>)
 801849e:	4694      	mov	ip, r2
 80184a0:	4463      	add	r3, ip
 80184a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80184a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184a6:	881b      	ldrh	r3, [r3, #0]
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	059b      	lsls	r3, r3, #22
 80184ac:	0d9b      	lsrs	r3, r3, #22
 80184ae:	b29a      	uxth	r2, r3
 80184b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184b2:	801a      	strh	r2, [r3, #0]
 80184b4:	1d7b      	adds	r3, r7, #5
 80184b6:	33ff      	adds	r3, #255	@ 0xff
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80184bc:	d922      	bls.n	8018504 <USB_EPStartXfer+0x478>
 80184be:	1d7b      	adds	r3, r7, #5
 80184c0:	33ff      	adds	r3, #255	@ 0xff
 80184c2:	681b      	ldr	r3, [r3, #0]
 80184c4:	095b      	lsrs	r3, r3, #5
 80184c6:	21f8      	movs	r1, #248	@ 0xf8
 80184c8:	187a      	adds	r2, r7, r1
 80184ca:	6013      	str	r3, [r2, #0]
 80184cc:	1d7b      	adds	r3, r7, #5
 80184ce:	33ff      	adds	r3, #255	@ 0xff
 80184d0:	681b      	ldr	r3, [r3, #0]
 80184d2:	221f      	movs	r2, #31
 80184d4:	4013      	ands	r3, r2
 80184d6:	d104      	bne.n	80184e2 <USB_EPStartXfer+0x456>
 80184d8:	187b      	adds	r3, r7, r1
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	3b01      	subs	r3, #1
 80184de:	187a      	adds	r2, r7, r1
 80184e0:	6013      	str	r3, [r2, #0]
 80184e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80184e4:	881b      	ldrh	r3, [r3, #0]
 80184e6:	b29a      	uxth	r2, r3
 80184e8:	23f8      	movs	r3, #248	@ 0xf8
 80184ea:	18fb      	adds	r3, r7, r3
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	b29b      	uxth	r3, r3
 80184f0:	029b      	lsls	r3, r3, #10
 80184f2:	b29b      	uxth	r3, r3
 80184f4:	4313      	orrs	r3, r2
 80184f6:	b29b      	uxth	r3, r3
 80184f8:	4ab7      	ldr	r2, [pc, #732]	@ (80187d8 <USB_EPStartXfer+0x74c>)
 80184fa:	4313      	orrs	r3, r2
 80184fc:	b29a      	uxth	r2, r3
 80184fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018500:	801a      	strh	r2, [r3, #0]
 8018502:	e04a      	b.n	801859a <USB_EPStartXfer+0x50e>
 8018504:	1d7b      	adds	r3, r7, #5
 8018506:	33ff      	adds	r3, #255	@ 0xff
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d108      	bne.n	8018520 <USB_EPStartXfer+0x494>
 801850e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018510:	881b      	ldrh	r3, [r3, #0]
 8018512:	b29b      	uxth	r3, r3
 8018514:	4ab0      	ldr	r2, [pc, #704]	@ (80187d8 <USB_EPStartXfer+0x74c>)
 8018516:	4313      	orrs	r3, r2
 8018518:	b29a      	uxth	r2, r3
 801851a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801851c:	801a      	strh	r2, [r3, #0]
 801851e:	e03c      	b.n	801859a <USB_EPStartXfer+0x50e>
 8018520:	1d7b      	adds	r3, r7, #5
 8018522:	33ff      	adds	r3, #255	@ 0xff
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	085b      	lsrs	r3, r3, #1
 8018528:	21f8      	movs	r1, #248	@ 0xf8
 801852a:	187a      	adds	r2, r7, r1
 801852c:	6013      	str	r3, [r2, #0]
 801852e:	1d7b      	adds	r3, r7, #5
 8018530:	33ff      	adds	r3, #255	@ 0xff
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	2201      	movs	r2, #1
 8018536:	4013      	ands	r3, r2
 8018538:	d004      	beq.n	8018544 <USB_EPStartXfer+0x4b8>
 801853a:	187b      	adds	r3, r7, r1
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	3301      	adds	r3, #1
 8018540:	187a      	adds	r2, r7, r1
 8018542:	6013      	str	r3, [r2, #0]
 8018544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018546:	881b      	ldrh	r3, [r3, #0]
 8018548:	b29a      	uxth	r2, r3
 801854a:	23f8      	movs	r3, #248	@ 0xf8
 801854c:	18fb      	adds	r3, r7, r3
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	b29b      	uxth	r3, r3
 8018552:	029b      	lsls	r3, r3, #10
 8018554:	b29b      	uxth	r3, r3
 8018556:	4313      	orrs	r3, r2
 8018558:	b29a      	uxth	r2, r3
 801855a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801855c:	801a      	strh	r2, [r3, #0]
 801855e:	e01c      	b.n	801859a <USB_EPStartXfer+0x50e>
 8018560:	683b      	ldr	r3, [r7, #0]
 8018562:	785b      	ldrb	r3, [r3, #1]
 8018564:	2b01      	cmp	r3, #1
 8018566:	d118      	bne.n	801859a <USB_EPStartXfer+0x50e>
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	653b      	str	r3, [r7, #80]	@ 0x50
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	2250      	movs	r2, #80	@ 0x50
 8018570:	5a9b      	ldrh	r3, [r3, r2]
 8018572:	b29b      	uxth	r3, r3
 8018574:	001a      	movs	r2, r3
 8018576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018578:	189b      	adds	r3, r3, r2
 801857a:	653b      	str	r3, [r7, #80]	@ 0x50
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	781b      	ldrb	r3, [r3, #0]
 8018580:	00da      	lsls	r2, r3, #3
 8018582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018584:	18d3      	adds	r3, r2, r3
 8018586:	4a93      	ldr	r2, [pc, #588]	@ (80187d4 <USB_EPStartXfer+0x748>)
 8018588:	4694      	mov	ip, r2
 801858a:	4463      	add	r3, ip
 801858c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801858e:	1d7b      	adds	r3, r7, #5
 8018590:	33ff      	adds	r3, #255	@ 0xff
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	b29a      	uxth	r2, r3
 8018596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018598:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801859a:	2076      	movs	r0, #118	@ 0x76
 801859c:	183b      	adds	r3, r7, r0
 801859e:	683a      	ldr	r2, [r7, #0]
 80185a0:	8912      	ldrh	r2, [r2, #8]
 80185a2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	6959      	ldr	r1, [r3, #20]
 80185a8:	1d7b      	adds	r3, r7, #5
 80185aa:	33ff      	adds	r3, #255	@ 0xff
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	b29c      	uxth	r4, r3
 80185b0:	183b      	adds	r3, r7, r0
 80185b2:	881a      	ldrh	r2, [r3, #0]
 80185b4:	6878      	ldr	r0, [r7, #4]
 80185b6:	0023      	movs	r3, r4
 80185b8:	f000 ffda 	bl	8019570 <USB_WritePMA>
            ep->xfer_buff += len;
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	695a      	ldr	r2, [r3, #20]
 80185c0:	1d7b      	adds	r3, r7, #5
 80185c2:	33ff      	adds	r3, #255	@ 0xff
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	18d2      	adds	r2, r2, r3
 80185c8:	683b      	ldr	r3, [r7, #0]
 80185ca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80185cc:	683b      	ldr	r3, [r7, #0]
 80185ce:	6a1a      	ldr	r2, [r3, #32]
 80185d0:	683b      	ldr	r3, [r7, #0]
 80185d2:	691b      	ldr	r3, [r3, #16]
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d908      	bls.n	80185ea <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 80185d8:	683b      	ldr	r3, [r7, #0]
 80185da:	6a1a      	ldr	r2, [r3, #32]
 80185dc:	1d7b      	adds	r3, r7, #5
 80185de:	33ff      	adds	r3, #255	@ 0xff
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	1ad2      	subs	r2, r2, r3
 80185e4:	683b      	ldr	r3, [r7, #0]
 80185e6:	621a      	str	r2, [r3, #32]
 80185e8:	e007      	b.n	80185fa <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80185ea:	683b      	ldr	r3, [r7, #0]
 80185ec:	6a1b      	ldr	r3, [r3, #32]
 80185ee:	1d7a      	adds	r2, r7, #5
 80185f0:	32ff      	adds	r2, #255	@ 0xff
 80185f2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80185f4:	683b      	ldr	r3, [r7, #0]
 80185f6:	2200      	movs	r2, #0
 80185f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80185fe:	683b      	ldr	r3, [r7, #0]
 8018600:	785b      	ldrb	r3, [r3, #1]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d000      	beq.n	8018608 <USB_EPStartXfer+0x57c>
 8018606:	e070      	b.n	80186ea <USB_EPStartXfer+0x65e>
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	2250      	movs	r2, #80	@ 0x50
 8018610:	5a9b      	ldrh	r3, [r3, r2]
 8018612:	b29b      	uxth	r3, r3
 8018614:	001a      	movs	r2, r3
 8018616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018618:	189b      	adds	r3, r3, r2
 801861a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	781b      	ldrb	r3, [r3, #0]
 8018620:	00da      	lsls	r2, r3, #3
 8018622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018624:	18d3      	adds	r3, r2, r3
 8018626:	4a6d      	ldr	r2, [pc, #436]	@ (80187dc <USB_EPStartXfer+0x750>)
 8018628:	4694      	mov	ip, r2
 801862a:	4463      	add	r3, ip
 801862c:	637b      	str	r3, [r7, #52]	@ 0x34
 801862e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018630:	881b      	ldrh	r3, [r3, #0]
 8018632:	b29b      	uxth	r3, r3
 8018634:	059b      	lsls	r3, r3, #22
 8018636:	0d9b      	lsrs	r3, r3, #22
 8018638:	b29a      	uxth	r2, r3
 801863a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801863c:	801a      	strh	r2, [r3, #0]
 801863e:	1d7b      	adds	r3, r7, #5
 8018640:	33ff      	adds	r3, #255	@ 0xff
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	2b3e      	cmp	r3, #62	@ 0x3e
 8018646:	d922      	bls.n	801868e <USB_EPStartXfer+0x602>
 8018648:	1d7b      	adds	r3, r7, #5
 801864a:	33ff      	adds	r3, #255	@ 0xff
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	095b      	lsrs	r3, r3, #5
 8018650:	21f4      	movs	r1, #244	@ 0xf4
 8018652:	187a      	adds	r2, r7, r1
 8018654:	6013      	str	r3, [r2, #0]
 8018656:	1d7b      	adds	r3, r7, #5
 8018658:	33ff      	adds	r3, #255	@ 0xff
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	221f      	movs	r2, #31
 801865e:	4013      	ands	r3, r2
 8018660:	d104      	bne.n	801866c <USB_EPStartXfer+0x5e0>
 8018662:	187b      	adds	r3, r7, r1
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	3b01      	subs	r3, #1
 8018668:	187a      	adds	r2, r7, r1
 801866a:	6013      	str	r3, [r2, #0]
 801866c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801866e:	881b      	ldrh	r3, [r3, #0]
 8018670:	b29a      	uxth	r2, r3
 8018672:	23f4      	movs	r3, #244	@ 0xf4
 8018674:	18fb      	adds	r3, r7, r3
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	b29b      	uxth	r3, r3
 801867a:	029b      	lsls	r3, r3, #10
 801867c:	b29b      	uxth	r3, r3
 801867e:	4313      	orrs	r3, r2
 8018680:	b29b      	uxth	r3, r3
 8018682:	4a55      	ldr	r2, [pc, #340]	@ (80187d8 <USB_EPStartXfer+0x74c>)
 8018684:	4313      	orrs	r3, r2
 8018686:	b29a      	uxth	r2, r3
 8018688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801868a:	801a      	strh	r2, [r3, #0]
 801868c:	e048      	b.n	8018720 <USB_EPStartXfer+0x694>
 801868e:	1d7b      	adds	r3, r7, #5
 8018690:	33ff      	adds	r3, #255	@ 0xff
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	2b00      	cmp	r3, #0
 8018696:	d108      	bne.n	80186aa <USB_EPStartXfer+0x61e>
 8018698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801869a:	881b      	ldrh	r3, [r3, #0]
 801869c:	b29b      	uxth	r3, r3
 801869e:	4a4e      	ldr	r2, [pc, #312]	@ (80187d8 <USB_EPStartXfer+0x74c>)
 80186a0:	4313      	orrs	r3, r2
 80186a2:	b29a      	uxth	r2, r3
 80186a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186a6:	801a      	strh	r2, [r3, #0]
 80186a8:	e03a      	b.n	8018720 <USB_EPStartXfer+0x694>
 80186aa:	1d7b      	adds	r3, r7, #5
 80186ac:	33ff      	adds	r3, #255	@ 0xff
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	085b      	lsrs	r3, r3, #1
 80186b2:	21f4      	movs	r1, #244	@ 0xf4
 80186b4:	187a      	adds	r2, r7, r1
 80186b6:	6013      	str	r3, [r2, #0]
 80186b8:	1d7b      	adds	r3, r7, #5
 80186ba:	33ff      	adds	r3, #255	@ 0xff
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	2201      	movs	r2, #1
 80186c0:	4013      	ands	r3, r2
 80186c2:	d004      	beq.n	80186ce <USB_EPStartXfer+0x642>
 80186c4:	187b      	adds	r3, r7, r1
 80186c6:	681b      	ldr	r3, [r3, #0]
 80186c8:	3301      	adds	r3, #1
 80186ca:	187a      	adds	r2, r7, r1
 80186cc:	6013      	str	r3, [r2, #0]
 80186ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186d0:	881b      	ldrh	r3, [r3, #0]
 80186d2:	b29a      	uxth	r2, r3
 80186d4:	23f4      	movs	r3, #244	@ 0xf4
 80186d6:	18fb      	adds	r3, r7, r3
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	b29b      	uxth	r3, r3
 80186dc:	029b      	lsls	r3, r3, #10
 80186de:	b29b      	uxth	r3, r3
 80186e0:	4313      	orrs	r3, r2
 80186e2:	b29a      	uxth	r2, r3
 80186e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80186e6:	801a      	strh	r2, [r3, #0]
 80186e8:	e01a      	b.n	8018720 <USB_EPStartXfer+0x694>
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	785b      	ldrb	r3, [r3, #1]
 80186ee:	2b01      	cmp	r3, #1
 80186f0:	d116      	bne.n	8018720 <USB_EPStartXfer+0x694>
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	2250      	movs	r2, #80	@ 0x50
 80186f6:	5a9b      	ldrh	r3, [r3, r2]
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	001a      	movs	r2, r3
 80186fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186fe:	189b      	adds	r3, r3, r2
 8018700:	643b      	str	r3, [r7, #64]	@ 0x40
 8018702:	683b      	ldr	r3, [r7, #0]
 8018704:	781b      	ldrb	r3, [r3, #0]
 8018706:	00da      	lsls	r2, r3, #3
 8018708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801870a:	18d3      	adds	r3, r2, r3
 801870c:	4a33      	ldr	r2, [pc, #204]	@ (80187dc <USB_EPStartXfer+0x750>)
 801870e:	4694      	mov	ip, r2
 8018710:	4463      	add	r3, ip
 8018712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018714:	1d7b      	adds	r3, r7, #5
 8018716:	33ff      	adds	r3, #255	@ 0xff
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	b29a      	uxth	r2, r3
 801871c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801871e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8018720:	2076      	movs	r0, #118	@ 0x76
 8018722:	183b      	adds	r3, r7, r0
 8018724:	683a      	ldr	r2, [r7, #0]
 8018726:	8952      	ldrh	r2, [r2, #10]
 8018728:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801872a:	683b      	ldr	r3, [r7, #0]
 801872c:	6959      	ldr	r1, [r3, #20]
 801872e:	1d7b      	adds	r3, r7, #5
 8018730:	33ff      	adds	r3, #255	@ 0xff
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	b29c      	uxth	r4, r3
 8018736:	183b      	adds	r3, r7, r0
 8018738:	881a      	ldrh	r2, [r3, #0]
 801873a:	6878      	ldr	r0, [r7, #4]
 801873c:	0023      	movs	r3, r4
 801873e:	f000 ff17 	bl	8019570 <USB_WritePMA>
 8018742:	e1b6      	b.n	8018ab2 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8018744:	683b      	ldr	r3, [r7, #0]
 8018746:	6a1b      	ldr	r3, [r3, #32]
 8018748:	1d7a      	adds	r2, r7, #5
 801874a:	32ff      	adds	r2, #255	@ 0xff
 801874c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801874e:	687a      	ldr	r2, [r7, #4]
 8018750:	683b      	ldr	r3, [r7, #0]
 8018752:	781b      	ldrb	r3, [r3, #0]
 8018754:	009b      	lsls	r3, r3, #2
 8018756:	18d3      	adds	r3, r2, r3
 8018758:	881b      	ldrh	r3, [r3, #0]
 801875a:	b29a      	uxth	r2, r3
 801875c:	2062      	movs	r0, #98	@ 0x62
 801875e:	183b      	adds	r3, r7, r0
 8018760:	491f      	ldr	r1, [pc, #124]	@ (80187e0 <USB_EPStartXfer+0x754>)
 8018762:	400a      	ands	r2, r1
 8018764:	801a      	strh	r2, [r3, #0]
 8018766:	687a      	ldr	r2, [r7, #4]
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	781b      	ldrb	r3, [r3, #0]
 801876c:	009b      	lsls	r3, r3, #2
 801876e:	18d3      	adds	r3, r2, r3
 8018770:	183a      	adds	r2, r7, r0
 8018772:	8812      	ldrh	r2, [r2, #0]
 8018774:	491b      	ldr	r1, [pc, #108]	@ (80187e4 <USB_EPStartXfer+0x758>)
 8018776:	430a      	orrs	r2, r1
 8018778:	b292      	uxth	r2, r2
 801877a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	2250      	movs	r2, #80	@ 0x50
 8018784:	5a9b      	ldrh	r3, [r3, r2]
 8018786:	b29b      	uxth	r3, r3
 8018788:	001a      	movs	r2, r3
 801878a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801878c:	189b      	adds	r3, r3, r2
 801878e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018790:	683b      	ldr	r3, [r7, #0]
 8018792:	781b      	ldrb	r3, [r3, #0]
 8018794:	00da      	lsls	r2, r3, #3
 8018796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018798:	18d3      	adds	r3, r2, r3
 801879a:	4a0e      	ldr	r2, [pc, #56]	@ (80187d4 <USB_EPStartXfer+0x748>)
 801879c:	4694      	mov	ip, r2
 801879e:	4463      	add	r3, ip
 80187a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80187a2:	1d7b      	adds	r3, r7, #5
 80187a4:	33ff      	adds	r3, #255	@ 0xff
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	b29a      	uxth	r2, r3
 80187aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80187ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80187ae:	2076      	movs	r0, #118	@ 0x76
 80187b0:	183b      	adds	r3, r7, r0
 80187b2:	683a      	ldr	r2, [r7, #0]
 80187b4:	8912      	ldrh	r2, [r2, #8]
 80187b6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	6959      	ldr	r1, [r3, #20]
 80187bc:	1d7b      	adds	r3, r7, #5
 80187be:	33ff      	adds	r3, #255	@ 0xff
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	b29c      	uxth	r4, r3
 80187c4:	183b      	adds	r3, r7, r0
 80187c6:	881a      	ldrh	r2, [r3, #0]
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	0023      	movs	r3, r4
 80187cc:	f000 fed0 	bl	8019570 <USB_WritePMA>
 80187d0:	e16f      	b.n	8018ab2 <USB_EPStartXfer+0xa26>
 80187d2:	46c0      	nop			@ (mov r8, r8)
 80187d4:	00000402 	.word	0x00000402
 80187d8:	ffff8000 	.word	0xffff8000
 80187dc:	00000406 	.word	0x00000406
 80187e0:	ffff8e8f 	.word	0xffff8e8f
 80187e4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	6a1a      	ldr	r2, [r3, #32]
 80187ec:	1d7b      	adds	r3, r7, #5
 80187ee:	33ff      	adds	r3, #255	@ 0xff
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	1ad2      	subs	r2, r2, r3
 80187f4:	683b      	ldr	r3, [r7, #0]
 80187f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80187f8:	687a      	ldr	r2, [r7, #4]
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	781b      	ldrb	r3, [r3, #0]
 80187fe:	009b      	lsls	r3, r3, #2
 8018800:	18d3      	adds	r3, r2, r3
 8018802:	881b      	ldrh	r3, [r3, #0]
 8018804:	b29b      	uxth	r3, r3
 8018806:	001a      	movs	r2, r3
 8018808:	2340      	movs	r3, #64	@ 0x40
 801880a:	4013      	ands	r3, r2
 801880c:	d100      	bne.n	8018810 <USB_EPStartXfer+0x784>
 801880e:	e0a4      	b.n	801895a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	673b      	str	r3, [r7, #112]	@ 0x70
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	785b      	ldrb	r3, [r3, #1]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d000      	beq.n	801881e <USB_EPStartXfer+0x792>
 801881c:	e070      	b.n	8018900 <USB_EPStartXfer+0x874>
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2250      	movs	r2, #80	@ 0x50
 8018826:	5a9b      	ldrh	r3, [r3, r2]
 8018828:	b29b      	uxth	r3, r3
 801882a:	001a      	movs	r2, r3
 801882c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801882e:	189b      	adds	r3, r3, r2
 8018830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	00da      	lsls	r2, r3, #3
 8018838:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801883a:	18d3      	adds	r3, r2, r3
 801883c:	4abc      	ldr	r2, [pc, #752]	@ (8018b30 <USB_EPStartXfer+0xaa4>)
 801883e:	4694      	mov	ip, r2
 8018840:	4463      	add	r3, ip
 8018842:	667b      	str	r3, [r7, #100]	@ 0x64
 8018844:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018846:	881b      	ldrh	r3, [r3, #0]
 8018848:	b29b      	uxth	r3, r3
 801884a:	059b      	lsls	r3, r3, #22
 801884c:	0d9b      	lsrs	r3, r3, #22
 801884e:	b29a      	uxth	r2, r3
 8018850:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018852:	801a      	strh	r2, [r3, #0]
 8018854:	1d7b      	adds	r3, r7, #5
 8018856:	33ff      	adds	r3, #255	@ 0xff
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	2b3e      	cmp	r3, #62	@ 0x3e
 801885c:	d922      	bls.n	80188a4 <USB_EPStartXfer+0x818>
 801885e:	1d7b      	adds	r3, r7, #5
 8018860:	33ff      	adds	r3, #255	@ 0xff
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	095b      	lsrs	r3, r3, #5
 8018866:	21f0      	movs	r1, #240	@ 0xf0
 8018868:	187a      	adds	r2, r7, r1
 801886a:	6013      	str	r3, [r2, #0]
 801886c:	1d7b      	adds	r3, r7, #5
 801886e:	33ff      	adds	r3, #255	@ 0xff
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	221f      	movs	r2, #31
 8018874:	4013      	ands	r3, r2
 8018876:	d104      	bne.n	8018882 <USB_EPStartXfer+0x7f6>
 8018878:	187b      	adds	r3, r7, r1
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	3b01      	subs	r3, #1
 801887e:	187a      	adds	r2, r7, r1
 8018880:	6013      	str	r3, [r2, #0]
 8018882:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8018884:	881b      	ldrh	r3, [r3, #0]
 8018886:	b29a      	uxth	r2, r3
 8018888:	23f0      	movs	r3, #240	@ 0xf0
 801888a:	18fb      	adds	r3, r7, r3
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	b29b      	uxth	r3, r3
 8018890:	029b      	lsls	r3, r3, #10
 8018892:	b29b      	uxth	r3, r3
 8018894:	4313      	orrs	r3, r2
 8018896:	b29b      	uxth	r3, r3
 8018898:	4aa6      	ldr	r2, [pc, #664]	@ (8018b34 <USB_EPStartXfer+0xaa8>)
 801889a:	4313      	orrs	r3, r2
 801889c:	b29a      	uxth	r2, r3
 801889e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188a0:	801a      	strh	r2, [r3, #0]
 80188a2:	e048      	b.n	8018936 <USB_EPStartXfer+0x8aa>
 80188a4:	1d7b      	adds	r3, r7, #5
 80188a6:	33ff      	adds	r3, #255	@ 0xff
 80188a8:	681b      	ldr	r3, [r3, #0]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d108      	bne.n	80188c0 <USB_EPStartXfer+0x834>
 80188ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188b0:	881b      	ldrh	r3, [r3, #0]
 80188b2:	b29b      	uxth	r3, r3
 80188b4:	4a9f      	ldr	r2, [pc, #636]	@ (8018b34 <USB_EPStartXfer+0xaa8>)
 80188b6:	4313      	orrs	r3, r2
 80188b8:	b29a      	uxth	r2, r3
 80188ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188bc:	801a      	strh	r2, [r3, #0]
 80188be:	e03a      	b.n	8018936 <USB_EPStartXfer+0x8aa>
 80188c0:	1d7b      	adds	r3, r7, #5
 80188c2:	33ff      	adds	r3, #255	@ 0xff
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	085b      	lsrs	r3, r3, #1
 80188c8:	21f0      	movs	r1, #240	@ 0xf0
 80188ca:	187a      	adds	r2, r7, r1
 80188cc:	6013      	str	r3, [r2, #0]
 80188ce:	1d7b      	adds	r3, r7, #5
 80188d0:	33ff      	adds	r3, #255	@ 0xff
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	2201      	movs	r2, #1
 80188d6:	4013      	ands	r3, r2
 80188d8:	d004      	beq.n	80188e4 <USB_EPStartXfer+0x858>
 80188da:	187b      	adds	r3, r7, r1
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	3301      	adds	r3, #1
 80188e0:	187a      	adds	r2, r7, r1
 80188e2:	6013      	str	r3, [r2, #0]
 80188e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188e6:	881b      	ldrh	r3, [r3, #0]
 80188e8:	b29a      	uxth	r2, r3
 80188ea:	23f0      	movs	r3, #240	@ 0xf0
 80188ec:	18fb      	adds	r3, r7, r3
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	b29b      	uxth	r3, r3
 80188f2:	029b      	lsls	r3, r3, #10
 80188f4:	b29b      	uxth	r3, r3
 80188f6:	4313      	orrs	r3, r2
 80188f8:	b29a      	uxth	r2, r3
 80188fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80188fc:	801a      	strh	r2, [r3, #0]
 80188fe:	e01a      	b.n	8018936 <USB_EPStartXfer+0x8aa>
 8018900:	683b      	ldr	r3, [r7, #0]
 8018902:	785b      	ldrb	r3, [r3, #1]
 8018904:	2b01      	cmp	r3, #1
 8018906:	d116      	bne.n	8018936 <USB_EPStartXfer+0x8aa>
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2250      	movs	r2, #80	@ 0x50
 801890c:	5a9b      	ldrh	r3, [r3, r2]
 801890e:	b29b      	uxth	r3, r3
 8018910:	001a      	movs	r2, r3
 8018912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018914:	189b      	adds	r3, r3, r2
 8018916:	673b      	str	r3, [r7, #112]	@ 0x70
 8018918:	683b      	ldr	r3, [r7, #0]
 801891a:	781b      	ldrb	r3, [r3, #0]
 801891c:	00da      	lsls	r2, r3, #3
 801891e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018920:	18d3      	adds	r3, r2, r3
 8018922:	4a83      	ldr	r2, [pc, #524]	@ (8018b30 <USB_EPStartXfer+0xaa4>)
 8018924:	4694      	mov	ip, r2
 8018926:	4463      	add	r3, ip
 8018928:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801892a:	1d7b      	adds	r3, r7, #5
 801892c:	33ff      	adds	r3, #255	@ 0xff
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	b29a      	uxth	r2, r3
 8018932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8018934:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8018936:	2076      	movs	r0, #118	@ 0x76
 8018938:	183b      	adds	r3, r7, r0
 801893a:	683a      	ldr	r2, [r7, #0]
 801893c:	8952      	ldrh	r2, [r2, #10]
 801893e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018940:	683b      	ldr	r3, [r7, #0]
 8018942:	6959      	ldr	r1, [r3, #20]
 8018944:	1d7b      	adds	r3, r7, #5
 8018946:	33ff      	adds	r3, #255	@ 0xff
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	b29c      	uxth	r4, r3
 801894c:	183b      	adds	r3, r7, r0
 801894e:	881a      	ldrh	r2, [r3, #0]
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	0023      	movs	r3, r4
 8018954:	f000 fe0c 	bl	8019570 <USB_WritePMA>
 8018958:	e0ab      	b.n	8018ab2 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801895a:	683b      	ldr	r3, [r7, #0]
 801895c:	785b      	ldrb	r3, [r3, #1]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d000      	beq.n	8018964 <USB_EPStartXfer+0x8d8>
 8018962:	e070      	b.n	8018a46 <USB_EPStartXfer+0x9ba>
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	2250      	movs	r2, #80	@ 0x50
 801896c:	5a9b      	ldrh	r3, [r3, r2]
 801896e:	b29b      	uxth	r3, r3
 8018970:	001a      	movs	r2, r3
 8018972:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018974:	189b      	adds	r3, r3, r2
 8018976:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8018978:	683b      	ldr	r3, [r7, #0]
 801897a:	781b      	ldrb	r3, [r3, #0]
 801897c:	00da      	lsls	r2, r3, #3
 801897e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018980:	18d3      	adds	r3, r2, r3
 8018982:	4a6d      	ldr	r2, [pc, #436]	@ (8018b38 <USB_EPStartXfer+0xaac>)
 8018984:	4694      	mov	ip, r2
 8018986:	4463      	add	r3, ip
 8018988:	67bb      	str	r3, [r7, #120]	@ 0x78
 801898a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801898c:	881b      	ldrh	r3, [r3, #0]
 801898e:	b29b      	uxth	r3, r3
 8018990:	059b      	lsls	r3, r3, #22
 8018992:	0d9b      	lsrs	r3, r3, #22
 8018994:	b29a      	uxth	r2, r3
 8018996:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018998:	801a      	strh	r2, [r3, #0]
 801899a:	1d7b      	adds	r3, r7, #5
 801899c:	33ff      	adds	r3, #255	@ 0xff
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80189a2:	d922      	bls.n	80189ea <USB_EPStartXfer+0x95e>
 80189a4:	1d7b      	adds	r3, r7, #5
 80189a6:	33ff      	adds	r3, #255	@ 0xff
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	095b      	lsrs	r3, r3, #5
 80189ac:	21ec      	movs	r1, #236	@ 0xec
 80189ae:	187a      	adds	r2, r7, r1
 80189b0:	6013      	str	r3, [r2, #0]
 80189b2:	1d7b      	adds	r3, r7, #5
 80189b4:	33ff      	adds	r3, #255	@ 0xff
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	221f      	movs	r2, #31
 80189ba:	4013      	ands	r3, r2
 80189bc:	d104      	bne.n	80189c8 <USB_EPStartXfer+0x93c>
 80189be:	187b      	adds	r3, r7, r1
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	3b01      	subs	r3, #1
 80189c4:	187a      	adds	r2, r7, r1
 80189c6:	6013      	str	r3, [r2, #0]
 80189c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80189ca:	881b      	ldrh	r3, [r3, #0]
 80189cc:	b29a      	uxth	r2, r3
 80189ce:	23ec      	movs	r3, #236	@ 0xec
 80189d0:	18fb      	adds	r3, r7, r3
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	029b      	lsls	r3, r3, #10
 80189d8:	b29b      	uxth	r3, r3
 80189da:	4313      	orrs	r3, r2
 80189dc:	b29b      	uxth	r3, r3
 80189de:	4a55      	ldr	r2, [pc, #340]	@ (8018b34 <USB_EPStartXfer+0xaa8>)
 80189e0:	4313      	orrs	r3, r2
 80189e2:	b29a      	uxth	r2, r3
 80189e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80189e6:	801a      	strh	r2, [r3, #0]
 80189e8:	e052      	b.n	8018a90 <USB_EPStartXfer+0xa04>
 80189ea:	1d7b      	adds	r3, r7, #5
 80189ec:	33ff      	adds	r3, #255	@ 0xff
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d108      	bne.n	8018a06 <USB_EPStartXfer+0x97a>
 80189f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80189f6:	881b      	ldrh	r3, [r3, #0]
 80189f8:	b29b      	uxth	r3, r3
 80189fa:	4a4e      	ldr	r2, [pc, #312]	@ (8018b34 <USB_EPStartXfer+0xaa8>)
 80189fc:	4313      	orrs	r3, r2
 80189fe:	b29a      	uxth	r2, r3
 8018a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018a02:	801a      	strh	r2, [r3, #0]
 8018a04:	e044      	b.n	8018a90 <USB_EPStartXfer+0xa04>
 8018a06:	1d7b      	adds	r3, r7, #5
 8018a08:	33ff      	adds	r3, #255	@ 0xff
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	085b      	lsrs	r3, r3, #1
 8018a0e:	21ec      	movs	r1, #236	@ 0xec
 8018a10:	187a      	adds	r2, r7, r1
 8018a12:	6013      	str	r3, [r2, #0]
 8018a14:	1d7b      	adds	r3, r7, #5
 8018a16:	33ff      	adds	r3, #255	@ 0xff
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	2201      	movs	r2, #1
 8018a1c:	4013      	ands	r3, r2
 8018a1e:	d004      	beq.n	8018a2a <USB_EPStartXfer+0x99e>
 8018a20:	187b      	adds	r3, r7, r1
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	3301      	adds	r3, #1
 8018a26:	187a      	adds	r2, r7, r1
 8018a28:	6013      	str	r3, [r2, #0]
 8018a2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018a2c:	881b      	ldrh	r3, [r3, #0]
 8018a2e:	b29a      	uxth	r2, r3
 8018a30:	23ec      	movs	r3, #236	@ 0xec
 8018a32:	18fb      	adds	r3, r7, r3
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	b29b      	uxth	r3, r3
 8018a38:	029b      	lsls	r3, r3, #10
 8018a3a:	b29b      	uxth	r3, r3
 8018a3c:	4313      	orrs	r3, r2
 8018a3e:	b29a      	uxth	r2, r3
 8018a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018a42:	801a      	strh	r2, [r3, #0]
 8018a44:	e024      	b.n	8018a90 <USB_EPStartXfer+0xa04>
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	785b      	ldrb	r3, [r3, #1]
 8018a4a:	2b01      	cmp	r3, #1
 8018a4c:	d120      	bne.n	8018a90 <USB_EPStartXfer+0xa04>
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	2184      	movs	r1, #132	@ 0x84
 8018a52:	187a      	adds	r2, r7, r1
 8018a54:	6013      	str	r3, [r2, #0]
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	2250      	movs	r2, #80	@ 0x50
 8018a5a:	5a9b      	ldrh	r3, [r3, r2]
 8018a5c:	b29b      	uxth	r3, r3
 8018a5e:	001a      	movs	r2, r3
 8018a60:	187b      	adds	r3, r7, r1
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	189b      	adds	r3, r3, r2
 8018a66:	187a      	adds	r2, r7, r1
 8018a68:	6013      	str	r3, [r2, #0]
 8018a6a:	683b      	ldr	r3, [r7, #0]
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	00da      	lsls	r2, r3, #3
 8018a70:	187b      	adds	r3, r7, r1
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	18d3      	adds	r3, r2, r3
 8018a76:	4a30      	ldr	r2, [pc, #192]	@ (8018b38 <USB_EPStartXfer+0xaac>)
 8018a78:	4694      	mov	ip, r2
 8018a7a:	4463      	add	r3, ip
 8018a7c:	2180      	movs	r1, #128	@ 0x80
 8018a7e:	187a      	adds	r2, r7, r1
 8018a80:	6013      	str	r3, [r2, #0]
 8018a82:	1d7b      	adds	r3, r7, #5
 8018a84:	33ff      	adds	r3, #255	@ 0xff
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	b29a      	uxth	r2, r3
 8018a8a:	187b      	adds	r3, r7, r1
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8018a90:	2076      	movs	r0, #118	@ 0x76
 8018a92:	183b      	adds	r3, r7, r0
 8018a94:	683a      	ldr	r2, [r7, #0]
 8018a96:	8912      	ldrh	r2, [r2, #8]
 8018a98:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	6959      	ldr	r1, [r3, #20]
 8018a9e:	1d7b      	adds	r3, r7, #5
 8018aa0:	33ff      	adds	r3, #255	@ 0xff
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	b29c      	uxth	r4, r3
 8018aa6:	183b      	adds	r3, r7, r0
 8018aa8:	881a      	ldrh	r2, [r3, #0]
 8018aaa:	6878      	ldr	r0, [r7, #4]
 8018aac:	0023      	movs	r3, r4
 8018aae:	f000 fd5f 	bl	8019570 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8018ab2:	687a      	ldr	r2, [r7, #4]
 8018ab4:	683b      	ldr	r3, [r7, #0]
 8018ab6:	781b      	ldrb	r3, [r3, #0]
 8018ab8:	009b      	lsls	r3, r3, #2
 8018aba:	18d3      	adds	r3, r2, r3
 8018abc:	881b      	ldrh	r3, [r3, #0]
 8018abe:	b29a      	uxth	r2, r3
 8018ac0:	200a      	movs	r0, #10
 8018ac2:	183b      	adds	r3, r7, r0
 8018ac4:	491d      	ldr	r1, [pc, #116]	@ (8018b3c <USB_EPStartXfer+0xab0>)
 8018ac6:	400a      	ands	r2, r1
 8018ac8:	801a      	strh	r2, [r3, #0]
 8018aca:	183b      	adds	r3, r7, r0
 8018acc:	183a      	adds	r2, r7, r0
 8018ace:	8812      	ldrh	r2, [r2, #0]
 8018ad0:	2110      	movs	r1, #16
 8018ad2:	404a      	eors	r2, r1
 8018ad4:	801a      	strh	r2, [r3, #0]
 8018ad6:	183b      	adds	r3, r7, r0
 8018ad8:	183a      	adds	r2, r7, r0
 8018ada:	8812      	ldrh	r2, [r2, #0]
 8018adc:	2120      	movs	r1, #32
 8018ade:	404a      	eors	r2, r1
 8018ae0:	801a      	strh	r2, [r3, #0]
 8018ae2:	687a      	ldr	r2, [r7, #4]
 8018ae4:	683b      	ldr	r3, [r7, #0]
 8018ae6:	781b      	ldrb	r3, [r3, #0]
 8018ae8:	009b      	lsls	r3, r3, #2
 8018aea:	18d3      	adds	r3, r2, r3
 8018aec:	183a      	adds	r2, r7, r0
 8018aee:	8812      	ldrh	r2, [r2, #0]
 8018af0:	4913      	ldr	r1, [pc, #76]	@ (8018b40 <USB_EPStartXfer+0xab4>)
 8018af2:	430a      	orrs	r2, r1
 8018af4:	b292      	uxth	r2, r2
 8018af6:	801a      	strh	r2, [r3, #0]
 8018af8:	f000 fbf4 	bl	80192e4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8018afc:	683b      	ldr	r3, [r7, #0]
 8018afe:	7b1b      	ldrb	r3, [r3, #12]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d000      	beq.n	8018b06 <USB_EPStartXfer+0xa7a>
 8018b04:	e0a9      	b.n	8018c5a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8018b06:	683b      	ldr	r3, [r7, #0]
 8018b08:	699a      	ldr	r2, [r3, #24]
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	691b      	ldr	r3, [r3, #16]
 8018b0e:	429a      	cmp	r2, r3
 8018b10:	d918      	bls.n	8018b44 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8018b12:	683b      	ldr	r3, [r7, #0]
 8018b14:	691b      	ldr	r3, [r3, #16]
 8018b16:	1d7a      	adds	r2, r7, #5
 8018b18:	32ff      	adds	r2, #255	@ 0xff
 8018b1a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8018b1c:	683b      	ldr	r3, [r7, #0]
 8018b1e:	699a      	ldr	r2, [r3, #24]
 8018b20:	1d7b      	adds	r3, r7, #5
 8018b22:	33ff      	adds	r3, #255	@ 0xff
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	1ad2      	subs	r2, r2, r3
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	619a      	str	r2, [r3, #24]
 8018b2c:	e012      	b.n	8018b54 <USB_EPStartXfer+0xac8>
 8018b2e:	46c0      	nop			@ (mov r8, r8)
 8018b30:	00000406 	.word	0x00000406
 8018b34:	ffff8000 	.word	0xffff8000
 8018b38:	00000402 	.word	0x00000402
 8018b3c:	ffff8fbf 	.word	0xffff8fbf
 8018b40:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8018b44:	683b      	ldr	r3, [r7, #0]
 8018b46:	699b      	ldr	r3, [r3, #24]
 8018b48:	1d7a      	adds	r2, r7, #5
 8018b4a:	32ff      	adds	r2, #255	@ 0xff
 8018b4c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	2200      	movs	r2, #0
 8018b52:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	2190      	movs	r1, #144	@ 0x90
 8018b58:	187a      	adds	r2, r7, r1
 8018b5a:	6013      	str	r3, [r2, #0]
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2250      	movs	r2, #80	@ 0x50
 8018b60:	5a9b      	ldrh	r3, [r3, r2]
 8018b62:	b29b      	uxth	r3, r3
 8018b64:	001a      	movs	r2, r3
 8018b66:	187b      	adds	r3, r7, r1
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	189b      	adds	r3, r3, r2
 8018b6c:	187a      	adds	r2, r7, r1
 8018b6e:	6013      	str	r3, [r2, #0]
 8018b70:	683b      	ldr	r3, [r7, #0]
 8018b72:	781b      	ldrb	r3, [r3, #0]
 8018b74:	00da      	lsls	r2, r3, #3
 8018b76:	187b      	adds	r3, r7, r1
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	18d3      	adds	r3, r2, r3
 8018b7c:	4acf      	ldr	r2, [pc, #828]	@ (8018ebc <USB_EPStartXfer+0xe30>)
 8018b7e:	4694      	mov	ip, r2
 8018b80:	4463      	add	r3, ip
 8018b82:	218c      	movs	r1, #140	@ 0x8c
 8018b84:	187a      	adds	r2, r7, r1
 8018b86:	6013      	str	r3, [r2, #0]
 8018b88:	187b      	adds	r3, r7, r1
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	881b      	ldrh	r3, [r3, #0]
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	059b      	lsls	r3, r3, #22
 8018b92:	0d9b      	lsrs	r3, r3, #22
 8018b94:	b29a      	uxth	r2, r3
 8018b96:	187b      	adds	r3, r7, r1
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	801a      	strh	r2, [r3, #0]
 8018b9c:	1d7b      	adds	r3, r7, #5
 8018b9e:	33ff      	adds	r3, #255	@ 0xff
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	2b3e      	cmp	r3, #62	@ 0x3e
 8018ba4:	d925      	bls.n	8018bf2 <USB_EPStartXfer+0xb66>
 8018ba6:	1d7b      	adds	r3, r7, #5
 8018ba8:	33ff      	adds	r3, #255	@ 0xff
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	095b      	lsrs	r3, r3, #5
 8018bae:	21e8      	movs	r1, #232	@ 0xe8
 8018bb0:	187a      	adds	r2, r7, r1
 8018bb2:	6013      	str	r3, [r2, #0]
 8018bb4:	1d7b      	adds	r3, r7, #5
 8018bb6:	33ff      	adds	r3, #255	@ 0xff
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	221f      	movs	r2, #31
 8018bbc:	4013      	ands	r3, r2
 8018bbe:	d104      	bne.n	8018bca <USB_EPStartXfer+0xb3e>
 8018bc0:	187b      	adds	r3, r7, r1
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	3b01      	subs	r3, #1
 8018bc6:	187a      	adds	r2, r7, r1
 8018bc8:	6013      	str	r3, [r2, #0]
 8018bca:	218c      	movs	r1, #140	@ 0x8c
 8018bcc:	187b      	adds	r3, r7, r1
 8018bce:	681b      	ldr	r3, [r3, #0]
 8018bd0:	881b      	ldrh	r3, [r3, #0]
 8018bd2:	b29a      	uxth	r2, r3
 8018bd4:	23e8      	movs	r3, #232	@ 0xe8
 8018bd6:	18fb      	adds	r3, r7, r3
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	b29b      	uxth	r3, r3
 8018bdc:	029b      	lsls	r3, r3, #10
 8018bde:	b29b      	uxth	r3, r3
 8018be0:	4313      	orrs	r3, r2
 8018be2:	b29b      	uxth	r3, r3
 8018be4:	4ab6      	ldr	r2, [pc, #728]	@ (8018ec0 <USB_EPStartXfer+0xe34>)
 8018be6:	4313      	orrs	r3, r2
 8018be8:	b29a      	uxth	r2, r3
 8018bea:	187b      	adds	r3, r7, r1
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	801a      	strh	r2, [r3, #0]
 8018bf0:	e353      	b.n	801929a <USB_EPStartXfer+0x120e>
 8018bf2:	1d7b      	adds	r3, r7, #5
 8018bf4:	33ff      	adds	r3, #255	@ 0xff
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d10b      	bne.n	8018c14 <USB_EPStartXfer+0xb88>
 8018bfc:	218c      	movs	r1, #140	@ 0x8c
 8018bfe:	187b      	adds	r3, r7, r1
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	881b      	ldrh	r3, [r3, #0]
 8018c04:	b29b      	uxth	r3, r3
 8018c06:	4aae      	ldr	r2, [pc, #696]	@ (8018ec0 <USB_EPStartXfer+0xe34>)
 8018c08:	4313      	orrs	r3, r2
 8018c0a:	b29a      	uxth	r2, r3
 8018c0c:	187b      	adds	r3, r7, r1
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	801a      	strh	r2, [r3, #0]
 8018c12:	e342      	b.n	801929a <USB_EPStartXfer+0x120e>
 8018c14:	1d7b      	adds	r3, r7, #5
 8018c16:	33ff      	adds	r3, #255	@ 0xff
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	085b      	lsrs	r3, r3, #1
 8018c1c:	21e8      	movs	r1, #232	@ 0xe8
 8018c1e:	187a      	adds	r2, r7, r1
 8018c20:	6013      	str	r3, [r2, #0]
 8018c22:	1d7b      	adds	r3, r7, #5
 8018c24:	33ff      	adds	r3, #255	@ 0xff
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	2201      	movs	r2, #1
 8018c2a:	4013      	ands	r3, r2
 8018c2c:	d004      	beq.n	8018c38 <USB_EPStartXfer+0xbac>
 8018c2e:	187b      	adds	r3, r7, r1
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	3301      	adds	r3, #1
 8018c34:	187a      	adds	r2, r7, r1
 8018c36:	6013      	str	r3, [r2, #0]
 8018c38:	218c      	movs	r1, #140	@ 0x8c
 8018c3a:	187b      	adds	r3, r7, r1
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	881b      	ldrh	r3, [r3, #0]
 8018c40:	b29a      	uxth	r2, r3
 8018c42:	23e8      	movs	r3, #232	@ 0xe8
 8018c44:	18fb      	adds	r3, r7, r3
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	b29b      	uxth	r3, r3
 8018c4a:	029b      	lsls	r3, r3, #10
 8018c4c:	b29b      	uxth	r3, r3
 8018c4e:	4313      	orrs	r3, r2
 8018c50:	b29a      	uxth	r2, r3
 8018c52:	187b      	adds	r3, r7, r1
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	801a      	strh	r2, [r3, #0]
 8018c58:	e31f      	b.n	801929a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8018c5a:	683b      	ldr	r3, [r7, #0]
 8018c5c:	78db      	ldrb	r3, [r3, #3]
 8018c5e:	2b02      	cmp	r3, #2
 8018c60:	d000      	beq.n	8018c64 <USB_EPStartXfer+0xbd8>
 8018c62:	e191      	b.n	8018f88 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	785b      	ldrb	r3, [r3, #1]
 8018c68:	2b00      	cmp	r3, #0
 8018c6a:	d000      	beq.n	8018c6e <USB_EPStartXfer+0xbe2>
 8018c6c:	e07c      	b.n	8018d68 <USB_EPStartXfer+0xcdc>
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	21ac      	movs	r1, #172	@ 0xac
 8018c72:	187a      	adds	r2, r7, r1
 8018c74:	6013      	str	r3, [r2, #0]
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	2250      	movs	r2, #80	@ 0x50
 8018c7a:	5a9b      	ldrh	r3, [r3, r2]
 8018c7c:	b29b      	uxth	r3, r3
 8018c7e:	001a      	movs	r2, r3
 8018c80:	187b      	adds	r3, r7, r1
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	189b      	adds	r3, r3, r2
 8018c86:	187a      	adds	r2, r7, r1
 8018c88:	6013      	str	r3, [r2, #0]
 8018c8a:	683b      	ldr	r3, [r7, #0]
 8018c8c:	781b      	ldrb	r3, [r3, #0]
 8018c8e:	00da      	lsls	r2, r3, #3
 8018c90:	187b      	adds	r3, r7, r1
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	18d3      	adds	r3, r2, r3
 8018c96:	4a8b      	ldr	r2, [pc, #556]	@ (8018ec4 <USB_EPStartXfer+0xe38>)
 8018c98:	4694      	mov	ip, r2
 8018c9a:	4463      	add	r3, ip
 8018c9c:	21a8      	movs	r1, #168	@ 0xa8
 8018c9e:	187a      	adds	r2, r7, r1
 8018ca0:	6013      	str	r3, [r2, #0]
 8018ca2:	187b      	adds	r3, r7, r1
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	881b      	ldrh	r3, [r3, #0]
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	059b      	lsls	r3, r3, #22
 8018cac:	0d9b      	lsrs	r3, r3, #22
 8018cae:	b29a      	uxth	r2, r3
 8018cb0:	187b      	adds	r3, r7, r1
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	801a      	strh	r2, [r3, #0]
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	691b      	ldr	r3, [r3, #16]
 8018cba:	2b3e      	cmp	r3, #62	@ 0x3e
 8018cbc:	d923      	bls.n	8018d06 <USB_EPStartXfer+0xc7a>
 8018cbe:	683b      	ldr	r3, [r7, #0]
 8018cc0:	691b      	ldr	r3, [r3, #16]
 8018cc2:	095b      	lsrs	r3, r3, #5
 8018cc4:	21e4      	movs	r1, #228	@ 0xe4
 8018cc6:	187a      	adds	r2, r7, r1
 8018cc8:	6013      	str	r3, [r2, #0]
 8018cca:	683b      	ldr	r3, [r7, #0]
 8018ccc:	691b      	ldr	r3, [r3, #16]
 8018cce:	221f      	movs	r2, #31
 8018cd0:	4013      	ands	r3, r2
 8018cd2:	d104      	bne.n	8018cde <USB_EPStartXfer+0xc52>
 8018cd4:	187b      	adds	r3, r7, r1
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	3b01      	subs	r3, #1
 8018cda:	187a      	adds	r2, r7, r1
 8018cdc:	6013      	str	r3, [r2, #0]
 8018cde:	21a8      	movs	r1, #168	@ 0xa8
 8018ce0:	187b      	adds	r3, r7, r1
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	881b      	ldrh	r3, [r3, #0]
 8018ce6:	b29a      	uxth	r2, r3
 8018ce8:	23e4      	movs	r3, #228	@ 0xe4
 8018cea:	18fb      	adds	r3, r7, r3
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	b29b      	uxth	r3, r3
 8018cf0:	029b      	lsls	r3, r3, #10
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	4313      	orrs	r3, r2
 8018cf6:	b29b      	uxth	r3, r3
 8018cf8:	4a71      	ldr	r2, [pc, #452]	@ (8018ec0 <USB_EPStartXfer+0xe34>)
 8018cfa:	4313      	orrs	r3, r2
 8018cfc:	b29a      	uxth	r2, r3
 8018cfe:	187b      	adds	r3, r7, r1
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	801a      	strh	r2, [r3, #0]
 8018d04:	e054      	b.n	8018db0 <USB_EPStartXfer+0xd24>
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	691b      	ldr	r3, [r3, #16]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d10b      	bne.n	8018d26 <USB_EPStartXfer+0xc9a>
 8018d0e:	21a8      	movs	r1, #168	@ 0xa8
 8018d10:	187b      	adds	r3, r7, r1
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	881b      	ldrh	r3, [r3, #0]
 8018d16:	b29b      	uxth	r3, r3
 8018d18:	4a69      	ldr	r2, [pc, #420]	@ (8018ec0 <USB_EPStartXfer+0xe34>)
 8018d1a:	4313      	orrs	r3, r2
 8018d1c:	b29a      	uxth	r2, r3
 8018d1e:	187b      	adds	r3, r7, r1
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	801a      	strh	r2, [r3, #0]
 8018d24:	e044      	b.n	8018db0 <USB_EPStartXfer+0xd24>
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	691b      	ldr	r3, [r3, #16]
 8018d2a:	085b      	lsrs	r3, r3, #1
 8018d2c:	21e4      	movs	r1, #228	@ 0xe4
 8018d2e:	187a      	adds	r2, r7, r1
 8018d30:	6013      	str	r3, [r2, #0]
 8018d32:	683b      	ldr	r3, [r7, #0]
 8018d34:	691b      	ldr	r3, [r3, #16]
 8018d36:	2201      	movs	r2, #1
 8018d38:	4013      	ands	r3, r2
 8018d3a:	d004      	beq.n	8018d46 <USB_EPStartXfer+0xcba>
 8018d3c:	187b      	adds	r3, r7, r1
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	3301      	adds	r3, #1
 8018d42:	187a      	adds	r2, r7, r1
 8018d44:	6013      	str	r3, [r2, #0]
 8018d46:	21a8      	movs	r1, #168	@ 0xa8
 8018d48:	187b      	adds	r3, r7, r1
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	881b      	ldrh	r3, [r3, #0]
 8018d4e:	b29a      	uxth	r2, r3
 8018d50:	23e4      	movs	r3, #228	@ 0xe4
 8018d52:	18fb      	adds	r3, r7, r3
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	b29b      	uxth	r3, r3
 8018d58:	029b      	lsls	r3, r3, #10
 8018d5a:	b29b      	uxth	r3, r3
 8018d5c:	4313      	orrs	r3, r2
 8018d5e:	b29a      	uxth	r2, r3
 8018d60:	187b      	adds	r3, r7, r1
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	801a      	strh	r2, [r3, #0]
 8018d66:	e023      	b.n	8018db0 <USB_EPStartXfer+0xd24>
 8018d68:	683b      	ldr	r3, [r7, #0]
 8018d6a:	785b      	ldrb	r3, [r3, #1]
 8018d6c:	2b01      	cmp	r3, #1
 8018d6e:	d11f      	bne.n	8018db0 <USB_EPStartXfer+0xd24>
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	21b4      	movs	r1, #180	@ 0xb4
 8018d74:	187a      	adds	r2, r7, r1
 8018d76:	6013      	str	r3, [r2, #0]
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	2250      	movs	r2, #80	@ 0x50
 8018d7c:	5a9b      	ldrh	r3, [r3, r2]
 8018d7e:	b29b      	uxth	r3, r3
 8018d80:	001a      	movs	r2, r3
 8018d82:	187b      	adds	r3, r7, r1
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	189b      	adds	r3, r3, r2
 8018d88:	187a      	adds	r2, r7, r1
 8018d8a:	6013      	str	r3, [r2, #0]
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	781b      	ldrb	r3, [r3, #0]
 8018d90:	00da      	lsls	r2, r3, #3
 8018d92:	187b      	adds	r3, r7, r1
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	18d3      	adds	r3, r2, r3
 8018d98:	4a4a      	ldr	r2, [pc, #296]	@ (8018ec4 <USB_EPStartXfer+0xe38>)
 8018d9a:	4694      	mov	ip, r2
 8018d9c:	4463      	add	r3, ip
 8018d9e:	21b0      	movs	r1, #176	@ 0xb0
 8018da0:	187a      	adds	r2, r7, r1
 8018da2:	6013      	str	r3, [r2, #0]
 8018da4:	683b      	ldr	r3, [r7, #0]
 8018da6:	691b      	ldr	r3, [r3, #16]
 8018da8:	b29a      	uxth	r2, r3
 8018daa:	187b      	adds	r3, r7, r1
 8018dac:	681b      	ldr	r3, [r3, #0]
 8018dae:	801a      	strh	r2, [r3, #0]
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	22a4      	movs	r2, #164	@ 0xa4
 8018db4:	18ba      	adds	r2, r7, r2
 8018db6:	6013      	str	r3, [r2, #0]
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	785b      	ldrb	r3, [r3, #1]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d000      	beq.n	8018dc2 <USB_EPStartXfer+0xd36>
 8018dc0:	e082      	b.n	8018ec8 <USB_EPStartXfer+0xe3c>
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	219c      	movs	r1, #156	@ 0x9c
 8018dc6:	187a      	adds	r2, r7, r1
 8018dc8:	6013      	str	r3, [r2, #0]
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2250      	movs	r2, #80	@ 0x50
 8018dce:	5a9b      	ldrh	r3, [r3, r2]
 8018dd0:	b29b      	uxth	r3, r3
 8018dd2:	001a      	movs	r2, r3
 8018dd4:	187b      	adds	r3, r7, r1
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	189b      	adds	r3, r3, r2
 8018dda:	187a      	adds	r2, r7, r1
 8018ddc:	6013      	str	r3, [r2, #0]
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	781b      	ldrb	r3, [r3, #0]
 8018de2:	00da      	lsls	r2, r3, #3
 8018de4:	187b      	adds	r3, r7, r1
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	18d3      	adds	r3, r2, r3
 8018dea:	4a34      	ldr	r2, [pc, #208]	@ (8018ebc <USB_EPStartXfer+0xe30>)
 8018dec:	4694      	mov	ip, r2
 8018dee:	4463      	add	r3, ip
 8018df0:	2198      	movs	r1, #152	@ 0x98
 8018df2:	187a      	adds	r2, r7, r1
 8018df4:	6013      	str	r3, [r2, #0]
 8018df6:	187b      	adds	r3, r7, r1
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	881b      	ldrh	r3, [r3, #0]
 8018dfc:	b29b      	uxth	r3, r3
 8018dfe:	059b      	lsls	r3, r3, #22
 8018e00:	0d9b      	lsrs	r3, r3, #22
 8018e02:	b29a      	uxth	r2, r3
 8018e04:	187b      	adds	r3, r7, r1
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	801a      	strh	r2, [r3, #0]
 8018e0a:	683b      	ldr	r3, [r7, #0]
 8018e0c:	691b      	ldr	r3, [r3, #16]
 8018e0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8018e10:	d923      	bls.n	8018e5a <USB_EPStartXfer+0xdce>
 8018e12:	683b      	ldr	r3, [r7, #0]
 8018e14:	691b      	ldr	r3, [r3, #16]
 8018e16:	095b      	lsrs	r3, r3, #5
 8018e18:	21e0      	movs	r1, #224	@ 0xe0
 8018e1a:	187a      	adds	r2, r7, r1
 8018e1c:	6013      	str	r3, [r2, #0]
 8018e1e:	683b      	ldr	r3, [r7, #0]
 8018e20:	691b      	ldr	r3, [r3, #16]
 8018e22:	221f      	movs	r2, #31
 8018e24:	4013      	ands	r3, r2
 8018e26:	d104      	bne.n	8018e32 <USB_EPStartXfer+0xda6>
 8018e28:	187b      	adds	r3, r7, r1
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	3b01      	subs	r3, #1
 8018e2e:	187a      	adds	r2, r7, r1
 8018e30:	6013      	str	r3, [r2, #0]
 8018e32:	2198      	movs	r1, #152	@ 0x98
 8018e34:	187b      	adds	r3, r7, r1
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	881b      	ldrh	r3, [r3, #0]
 8018e3a:	b29a      	uxth	r2, r3
 8018e3c:	23e0      	movs	r3, #224	@ 0xe0
 8018e3e:	18fb      	adds	r3, r7, r3
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	b29b      	uxth	r3, r3
 8018e44:	029b      	lsls	r3, r3, #10
 8018e46:	b29b      	uxth	r3, r3
 8018e48:	4313      	orrs	r3, r2
 8018e4a:	b29b      	uxth	r3, r3
 8018e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8018ec0 <USB_EPStartXfer+0xe34>)
 8018e4e:	4313      	orrs	r3, r2
 8018e50:	b29a      	uxth	r2, r3
 8018e52:	187b      	adds	r3, r7, r1
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	801a      	strh	r2, [r3, #0]
 8018e58:	e057      	b.n	8018f0a <USB_EPStartXfer+0xe7e>
 8018e5a:	683b      	ldr	r3, [r7, #0]
 8018e5c:	691b      	ldr	r3, [r3, #16]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d10b      	bne.n	8018e7a <USB_EPStartXfer+0xdee>
 8018e62:	2198      	movs	r1, #152	@ 0x98
 8018e64:	187b      	adds	r3, r7, r1
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	881b      	ldrh	r3, [r3, #0]
 8018e6a:	b29b      	uxth	r3, r3
 8018e6c:	4a14      	ldr	r2, [pc, #80]	@ (8018ec0 <USB_EPStartXfer+0xe34>)
 8018e6e:	4313      	orrs	r3, r2
 8018e70:	b29a      	uxth	r2, r3
 8018e72:	187b      	adds	r3, r7, r1
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	801a      	strh	r2, [r3, #0]
 8018e78:	e047      	b.n	8018f0a <USB_EPStartXfer+0xe7e>
 8018e7a:	683b      	ldr	r3, [r7, #0]
 8018e7c:	691b      	ldr	r3, [r3, #16]
 8018e7e:	085b      	lsrs	r3, r3, #1
 8018e80:	21e0      	movs	r1, #224	@ 0xe0
 8018e82:	187a      	adds	r2, r7, r1
 8018e84:	6013      	str	r3, [r2, #0]
 8018e86:	683b      	ldr	r3, [r7, #0]
 8018e88:	691b      	ldr	r3, [r3, #16]
 8018e8a:	2201      	movs	r2, #1
 8018e8c:	4013      	ands	r3, r2
 8018e8e:	d004      	beq.n	8018e9a <USB_EPStartXfer+0xe0e>
 8018e90:	187b      	adds	r3, r7, r1
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	3301      	adds	r3, #1
 8018e96:	187a      	adds	r2, r7, r1
 8018e98:	6013      	str	r3, [r2, #0]
 8018e9a:	2198      	movs	r1, #152	@ 0x98
 8018e9c:	187b      	adds	r3, r7, r1
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	881b      	ldrh	r3, [r3, #0]
 8018ea2:	b29a      	uxth	r2, r3
 8018ea4:	23e0      	movs	r3, #224	@ 0xe0
 8018ea6:	18fb      	adds	r3, r7, r3
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	029b      	lsls	r3, r3, #10
 8018eae:	b29b      	uxth	r3, r3
 8018eb0:	4313      	orrs	r3, r2
 8018eb2:	b29a      	uxth	r2, r3
 8018eb4:	187b      	adds	r3, r7, r1
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	801a      	strh	r2, [r3, #0]
 8018eba:	e026      	b.n	8018f0a <USB_EPStartXfer+0xe7e>
 8018ebc:	00000406 	.word	0x00000406
 8018ec0:	ffff8000 	.word	0xffff8000
 8018ec4:	00000402 	.word	0x00000402
 8018ec8:	683b      	ldr	r3, [r7, #0]
 8018eca:	785b      	ldrb	r3, [r3, #1]
 8018ecc:	2b01      	cmp	r3, #1
 8018ece:	d11c      	bne.n	8018f0a <USB_EPStartXfer+0xe7e>
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	2250      	movs	r2, #80	@ 0x50
 8018ed4:	5a9b      	ldrh	r3, [r3, r2]
 8018ed6:	b29b      	uxth	r3, r3
 8018ed8:	001a      	movs	r2, r3
 8018eda:	21a4      	movs	r1, #164	@ 0xa4
 8018edc:	187b      	adds	r3, r7, r1
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	189b      	adds	r3, r3, r2
 8018ee2:	187a      	adds	r2, r7, r1
 8018ee4:	6013      	str	r3, [r2, #0]
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	781b      	ldrb	r3, [r3, #0]
 8018eea:	00da      	lsls	r2, r3, #3
 8018eec:	187b      	adds	r3, r7, r1
 8018eee:	681b      	ldr	r3, [r3, #0]
 8018ef0:	18d3      	adds	r3, r2, r3
 8018ef2:	4ad2      	ldr	r2, [pc, #840]	@ (801923c <USB_EPStartXfer+0x11b0>)
 8018ef4:	4694      	mov	ip, r2
 8018ef6:	4463      	add	r3, ip
 8018ef8:	21a0      	movs	r1, #160	@ 0xa0
 8018efa:	187a      	adds	r2, r7, r1
 8018efc:	6013      	str	r3, [r2, #0]
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	691b      	ldr	r3, [r3, #16]
 8018f02:	b29a      	uxth	r2, r3
 8018f04:	187b      	adds	r3, r7, r1
 8018f06:	681b      	ldr	r3, [r3, #0]
 8018f08:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8018f0a:	683b      	ldr	r3, [r7, #0]
 8018f0c:	69db      	ldr	r3, [r3, #28]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d100      	bne.n	8018f14 <USB_EPStartXfer+0xe88>
 8018f12:	e1c2      	b.n	801929a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8018f14:	687a      	ldr	r2, [r7, #4]
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	781b      	ldrb	r3, [r3, #0]
 8018f1a:	009b      	lsls	r3, r3, #2
 8018f1c:	18d2      	adds	r2, r2, r3
 8018f1e:	2196      	movs	r1, #150	@ 0x96
 8018f20:	187b      	adds	r3, r7, r1
 8018f22:	8812      	ldrh	r2, [r2, #0]
 8018f24:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8018f26:	187b      	adds	r3, r7, r1
 8018f28:	881a      	ldrh	r2, [r3, #0]
 8018f2a:	2380      	movs	r3, #128	@ 0x80
 8018f2c:	01db      	lsls	r3, r3, #7
 8018f2e:	4013      	ands	r3, r2
 8018f30:	d004      	beq.n	8018f3c <USB_EPStartXfer+0xeb0>
 8018f32:	187b      	adds	r3, r7, r1
 8018f34:	881b      	ldrh	r3, [r3, #0]
 8018f36:	2240      	movs	r2, #64	@ 0x40
 8018f38:	4013      	ands	r3, r2
 8018f3a:	d10d      	bne.n	8018f58 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8018f3c:	2196      	movs	r1, #150	@ 0x96
 8018f3e:	187b      	adds	r3, r7, r1
 8018f40:	881a      	ldrh	r2, [r3, #0]
 8018f42:	2380      	movs	r3, #128	@ 0x80
 8018f44:	01db      	lsls	r3, r3, #7
 8018f46:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8018f48:	d000      	beq.n	8018f4c <USB_EPStartXfer+0xec0>
 8018f4a:	e1a6      	b.n	801929a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8018f4c:	187b      	adds	r3, r7, r1
 8018f4e:	881b      	ldrh	r3, [r3, #0]
 8018f50:	2240      	movs	r2, #64	@ 0x40
 8018f52:	4013      	ands	r3, r2
 8018f54:	d000      	beq.n	8018f58 <USB_EPStartXfer+0xecc>
 8018f56:	e1a0      	b.n	801929a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8018f58:	687a      	ldr	r2, [r7, #4]
 8018f5a:	683b      	ldr	r3, [r7, #0]
 8018f5c:	781b      	ldrb	r3, [r3, #0]
 8018f5e:	009b      	lsls	r3, r3, #2
 8018f60:	18d3      	adds	r3, r2, r3
 8018f62:	881b      	ldrh	r3, [r3, #0]
 8018f64:	b29a      	uxth	r2, r3
 8018f66:	2094      	movs	r0, #148	@ 0x94
 8018f68:	183b      	adds	r3, r7, r0
 8018f6a:	49b5      	ldr	r1, [pc, #724]	@ (8019240 <USB_EPStartXfer+0x11b4>)
 8018f6c:	400a      	ands	r2, r1
 8018f6e:	801a      	strh	r2, [r3, #0]
 8018f70:	687a      	ldr	r2, [r7, #4]
 8018f72:	683b      	ldr	r3, [r7, #0]
 8018f74:	781b      	ldrb	r3, [r3, #0]
 8018f76:	009b      	lsls	r3, r3, #2
 8018f78:	18d3      	adds	r3, r2, r3
 8018f7a:	183a      	adds	r2, r7, r0
 8018f7c:	8812      	ldrh	r2, [r2, #0]
 8018f7e:	49b1      	ldr	r1, [pc, #708]	@ (8019244 <USB_EPStartXfer+0x11b8>)
 8018f80:	430a      	orrs	r2, r1
 8018f82:	b292      	uxth	r2, r2
 8018f84:	801a      	strh	r2, [r3, #0]
 8018f86:	e188      	b.n	801929a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8018f88:	683b      	ldr	r3, [r7, #0]
 8018f8a:	78db      	ldrb	r3, [r3, #3]
 8018f8c:	2b01      	cmp	r3, #1
 8018f8e:	d000      	beq.n	8018f92 <USB_EPStartXfer+0xf06>
 8018f90:	e181      	b.n	8019296 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8018f92:	683b      	ldr	r3, [r7, #0]
 8018f94:	699a      	ldr	r2, [r3, #24]
 8018f96:	683b      	ldr	r3, [r7, #0]
 8018f98:	691b      	ldr	r3, [r3, #16]
 8018f9a:	429a      	cmp	r2, r3
 8018f9c:	d90d      	bls.n	8018fba <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	691b      	ldr	r3, [r3, #16]
 8018fa2:	1d7a      	adds	r2, r7, #5
 8018fa4:	32ff      	adds	r2, #255	@ 0xff
 8018fa6:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	699a      	ldr	r2, [r3, #24]
 8018fac:	1d7b      	adds	r3, r7, #5
 8018fae:	33ff      	adds	r3, #255	@ 0xff
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	1ad2      	subs	r2, r2, r3
 8018fb4:	683b      	ldr	r3, [r7, #0]
 8018fb6:	619a      	str	r2, [r3, #24]
 8018fb8:	e007      	b.n	8018fca <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	699b      	ldr	r3, [r3, #24]
 8018fbe:	1d7a      	adds	r2, r7, #5
 8018fc0:	32ff      	adds	r2, #255	@ 0xff
 8018fc2:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8018fc4:	683b      	ldr	r3, [r7, #0]
 8018fc6:	2200      	movs	r2, #0
 8018fc8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8018fca:	683b      	ldr	r3, [r7, #0]
 8018fcc:	785b      	ldrb	r3, [r3, #1]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d000      	beq.n	8018fd4 <USB_EPStartXfer+0xf48>
 8018fd2:	e082      	b.n	80190da <USB_EPStartXfer+0x104e>
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	21cc      	movs	r1, #204	@ 0xcc
 8018fd8:	187a      	adds	r2, r7, r1
 8018fda:	6013      	str	r3, [r2, #0]
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	2250      	movs	r2, #80	@ 0x50
 8018fe0:	5a9b      	ldrh	r3, [r3, r2]
 8018fe2:	b29b      	uxth	r3, r3
 8018fe4:	001a      	movs	r2, r3
 8018fe6:	187b      	adds	r3, r7, r1
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	189b      	adds	r3, r3, r2
 8018fec:	187a      	adds	r2, r7, r1
 8018fee:	6013      	str	r3, [r2, #0]
 8018ff0:	683b      	ldr	r3, [r7, #0]
 8018ff2:	781b      	ldrb	r3, [r3, #0]
 8018ff4:	00da      	lsls	r2, r3, #3
 8018ff6:	187b      	adds	r3, r7, r1
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	18d3      	adds	r3, r2, r3
 8018ffc:	4a92      	ldr	r2, [pc, #584]	@ (8019248 <USB_EPStartXfer+0x11bc>)
 8018ffe:	4694      	mov	ip, r2
 8019000:	4463      	add	r3, ip
 8019002:	21c8      	movs	r1, #200	@ 0xc8
 8019004:	187a      	adds	r2, r7, r1
 8019006:	6013      	str	r3, [r2, #0]
 8019008:	187b      	adds	r3, r7, r1
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	881b      	ldrh	r3, [r3, #0]
 801900e:	b29b      	uxth	r3, r3
 8019010:	059b      	lsls	r3, r3, #22
 8019012:	0d9b      	lsrs	r3, r3, #22
 8019014:	b29a      	uxth	r2, r3
 8019016:	187b      	adds	r3, r7, r1
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	801a      	strh	r2, [r3, #0]
 801901c:	1d7b      	adds	r3, r7, #5
 801901e:	33ff      	adds	r3, #255	@ 0xff
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	2b3e      	cmp	r3, #62	@ 0x3e
 8019024:	d925      	bls.n	8019072 <USB_EPStartXfer+0xfe6>
 8019026:	1d7b      	adds	r3, r7, #5
 8019028:	33ff      	adds	r3, #255	@ 0xff
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	095b      	lsrs	r3, r3, #5
 801902e:	21dc      	movs	r1, #220	@ 0xdc
 8019030:	187a      	adds	r2, r7, r1
 8019032:	6013      	str	r3, [r2, #0]
 8019034:	1d7b      	adds	r3, r7, #5
 8019036:	33ff      	adds	r3, #255	@ 0xff
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	221f      	movs	r2, #31
 801903c:	4013      	ands	r3, r2
 801903e:	d104      	bne.n	801904a <USB_EPStartXfer+0xfbe>
 8019040:	187b      	adds	r3, r7, r1
 8019042:	681b      	ldr	r3, [r3, #0]
 8019044:	3b01      	subs	r3, #1
 8019046:	187a      	adds	r2, r7, r1
 8019048:	6013      	str	r3, [r2, #0]
 801904a:	21c8      	movs	r1, #200	@ 0xc8
 801904c:	187b      	adds	r3, r7, r1
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	881b      	ldrh	r3, [r3, #0]
 8019052:	b29a      	uxth	r2, r3
 8019054:	23dc      	movs	r3, #220	@ 0xdc
 8019056:	18fb      	adds	r3, r7, r3
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	b29b      	uxth	r3, r3
 801905c:	029b      	lsls	r3, r3, #10
 801905e:	b29b      	uxth	r3, r3
 8019060:	4313      	orrs	r3, r2
 8019062:	b29b      	uxth	r3, r3
 8019064:	4a79      	ldr	r2, [pc, #484]	@ (801924c <USB_EPStartXfer+0x11c0>)
 8019066:	4313      	orrs	r3, r2
 8019068:	b29a      	uxth	r2, r3
 801906a:	187b      	adds	r3, r7, r1
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	801a      	strh	r2, [r3, #0]
 8019070:	e058      	b.n	8019124 <USB_EPStartXfer+0x1098>
 8019072:	1d7b      	adds	r3, r7, #5
 8019074:	33ff      	adds	r3, #255	@ 0xff
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	2b00      	cmp	r3, #0
 801907a:	d10b      	bne.n	8019094 <USB_EPStartXfer+0x1008>
 801907c:	21c8      	movs	r1, #200	@ 0xc8
 801907e:	187b      	adds	r3, r7, r1
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	881b      	ldrh	r3, [r3, #0]
 8019084:	b29b      	uxth	r3, r3
 8019086:	4a71      	ldr	r2, [pc, #452]	@ (801924c <USB_EPStartXfer+0x11c0>)
 8019088:	4313      	orrs	r3, r2
 801908a:	b29a      	uxth	r2, r3
 801908c:	187b      	adds	r3, r7, r1
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	801a      	strh	r2, [r3, #0]
 8019092:	e047      	b.n	8019124 <USB_EPStartXfer+0x1098>
 8019094:	1d7b      	adds	r3, r7, #5
 8019096:	33ff      	adds	r3, #255	@ 0xff
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	085b      	lsrs	r3, r3, #1
 801909c:	21dc      	movs	r1, #220	@ 0xdc
 801909e:	187a      	adds	r2, r7, r1
 80190a0:	6013      	str	r3, [r2, #0]
 80190a2:	1d7b      	adds	r3, r7, #5
 80190a4:	33ff      	adds	r3, #255	@ 0xff
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	2201      	movs	r2, #1
 80190aa:	4013      	ands	r3, r2
 80190ac:	d004      	beq.n	80190b8 <USB_EPStartXfer+0x102c>
 80190ae:	187b      	adds	r3, r7, r1
 80190b0:	681b      	ldr	r3, [r3, #0]
 80190b2:	3301      	adds	r3, #1
 80190b4:	187a      	adds	r2, r7, r1
 80190b6:	6013      	str	r3, [r2, #0]
 80190b8:	21c8      	movs	r1, #200	@ 0xc8
 80190ba:	187b      	adds	r3, r7, r1
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	881b      	ldrh	r3, [r3, #0]
 80190c0:	b29a      	uxth	r2, r3
 80190c2:	23dc      	movs	r3, #220	@ 0xdc
 80190c4:	18fb      	adds	r3, r7, r3
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	029b      	lsls	r3, r3, #10
 80190cc:	b29b      	uxth	r3, r3
 80190ce:	4313      	orrs	r3, r2
 80190d0:	b29a      	uxth	r2, r3
 80190d2:	187b      	adds	r3, r7, r1
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	801a      	strh	r2, [r3, #0]
 80190d8:	e024      	b.n	8019124 <USB_EPStartXfer+0x1098>
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	785b      	ldrb	r3, [r3, #1]
 80190de:	2b01      	cmp	r3, #1
 80190e0:	d120      	bne.n	8019124 <USB_EPStartXfer+0x1098>
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	21d4      	movs	r1, #212	@ 0xd4
 80190e6:	187a      	adds	r2, r7, r1
 80190e8:	6013      	str	r3, [r2, #0]
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	2250      	movs	r2, #80	@ 0x50
 80190ee:	5a9b      	ldrh	r3, [r3, r2]
 80190f0:	b29b      	uxth	r3, r3
 80190f2:	001a      	movs	r2, r3
 80190f4:	187b      	adds	r3, r7, r1
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	189b      	adds	r3, r3, r2
 80190fa:	187a      	adds	r2, r7, r1
 80190fc:	6013      	str	r3, [r2, #0]
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	781b      	ldrb	r3, [r3, #0]
 8019102:	00da      	lsls	r2, r3, #3
 8019104:	187b      	adds	r3, r7, r1
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	18d3      	adds	r3, r2, r3
 801910a:	4a4f      	ldr	r2, [pc, #316]	@ (8019248 <USB_EPStartXfer+0x11bc>)
 801910c:	4694      	mov	ip, r2
 801910e:	4463      	add	r3, ip
 8019110:	21d0      	movs	r1, #208	@ 0xd0
 8019112:	187a      	adds	r2, r7, r1
 8019114:	6013      	str	r3, [r2, #0]
 8019116:	1d7b      	adds	r3, r7, #5
 8019118:	33ff      	adds	r3, #255	@ 0xff
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	b29a      	uxth	r2, r3
 801911e:	187b      	adds	r3, r7, r1
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	801a      	strh	r2, [r3, #0]
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	22c4      	movs	r2, #196	@ 0xc4
 8019128:	18ba      	adds	r2, r7, r2
 801912a:	6013      	str	r3, [r2, #0]
 801912c:	683b      	ldr	r3, [r7, #0]
 801912e:	785b      	ldrb	r3, [r3, #1]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d000      	beq.n	8019136 <USB_EPStartXfer+0x10aa>
 8019134:	e08c      	b.n	8019250 <USB_EPStartXfer+0x11c4>
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	21bc      	movs	r1, #188	@ 0xbc
 801913a:	187a      	adds	r2, r7, r1
 801913c:	6013      	str	r3, [r2, #0]
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	2250      	movs	r2, #80	@ 0x50
 8019142:	5a9b      	ldrh	r3, [r3, r2]
 8019144:	b29b      	uxth	r3, r3
 8019146:	001a      	movs	r2, r3
 8019148:	187b      	adds	r3, r7, r1
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	189b      	adds	r3, r3, r2
 801914e:	187a      	adds	r2, r7, r1
 8019150:	6013      	str	r3, [r2, #0]
 8019152:	683b      	ldr	r3, [r7, #0]
 8019154:	781b      	ldrb	r3, [r3, #0]
 8019156:	00da      	lsls	r2, r3, #3
 8019158:	187b      	adds	r3, r7, r1
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	18d3      	adds	r3, r2, r3
 801915e:	4a37      	ldr	r2, [pc, #220]	@ (801923c <USB_EPStartXfer+0x11b0>)
 8019160:	4694      	mov	ip, r2
 8019162:	4463      	add	r3, ip
 8019164:	21b8      	movs	r1, #184	@ 0xb8
 8019166:	187a      	adds	r2, r7, r1
 8019168:	6013      	str	r3, [r2, #0]
 801916a:	187b      	adds	r3, r7, r1
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	881b      	ldrh	r3, [r3, #0]
 8019170:	b29b      	uxth	r3, r3
 8019172:	059b      	lsls	r3, r3, #22
 8019174:	0d9b      	lsrs	r3, r3, #22
 8019176:	b29a      	uxth	r2, r3
 8019178:	187b      	adds	r3, r7, r1
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	801a      	strh	r2, [r3, #0]
 801917e:	1d7b      	adds	r3, r7, #5
 8019180:	33ff      	adds	r3, #255	@ 0xff
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	2b3e      	cmp	r3, #62	@ 0x3e
 8019186:	d925      	bls.n	80191d4 <USB_EPStartXfer+0x1148>
 8019188:	1d7b      	adds	r3, r7, #5
 801918a:	33ff      	adds	r3, #255	@ 0xff
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	095b      	lsrs	r3, r3, #5
 8019190:	21d8      	movs	r1, #216	@ 0xd8
 8019192:	187a      	adds	r2, r7, r1
 8019194:	6013      	str	r3, [r2, #0]
 8019196:	1d7b      	adds	r3, r7, #5
 8019198:	33ff      	adds	r3, #255	@ 0xff
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	221f      	movs	r2, #31
 801919e:	4013      	ands	r3, r2
 80191a0:	d104      	bne.n	80191ac <USB_EPStartXfer+0x1120>
 80191a2:	187b      	adds	r3, r7, r1
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	3b01      	subs	r3, #1
 80191a8:	187a      	adds	r2, r7, r1
 80191aa:	6013      	str	r3, [r2, #0]
 80191ac:	21b8      	movs	r1, #184	@ 0xb8
 80191ae:	187b      	adds	r3, r7, r1
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	881b      	ldrh	r3, [r3, #0]
 80191b4:	b29a      	uxth	r2, r3
 80191b6:	23d8      	movs	r3, #216	@ 0xd8
 80191b8:	18fb      	adds	r3, r7, r3
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	b29b      	uxth	r3, r3
 80191be:	029b      	lsls	r3, r3, #10
 80191c0:	b29b      	uxth	r3, r3
 80191c2:	4313      	orrs	r3, r2
 80191c4:	b29b      	uxth	r3, r3
 80191c6:	4a21      	ldr	r2, [pc, #132]	@ (801924c <USB_EPStartXfer+0x11c0>)
 80191c8:	4313      	orrs	r3, r2
 80191ca:	b29a      	uxth	r2, r3
 80191cc:	187b      	adds	r3, r7, r1
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	801a      	strh	r2, [r3, #0]
 80191d2:	e062      	b.n	801929a <USB_EPStartXfer+0x120e>
 80191d4:	1d7b      	adds	r3, r7, #5
 80191d6:	33ff      	adds	r3, #255	@ 0xff
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d10b      	bne.n	80191f6 <USB_EPStartXfer+0x116a>
 80191de:	21b8      	movs	r1, #184	@ 0xb8
 80191e0:	187b      	adds	r3, r7, r1
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	881b      	ldrh	r3, [r3, #0]
 80191e6:	b29b      	uxth	r3, r3
 80191e8:	4a18      	ldr	r2, [pc, #96]	@ (801924c <USB_EPStartXfer+0x11c0>)
 80191ea:	4313      	orrs	r3, r2
 80191ec:	b29a      	uxth	r2, r3
 80191ee:	187b      	adds	r3, r7, r1
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	801a      	strh	r2, [r3, #0]
 80191f4:	e051      	b.n	801929a <USB_EPStartXfer+0x120e>
 80191f6:	1d7b      	adds	r3, r7, #5
 80191f8:	33ff      	adds	r3, #255	@ 0xff
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	085b      	lsrs	r3, r3, #1
 80191fe:	21d8      	movs	r1, #216	@ 0xd8
 8019200:	187a      	adds	r2, r7, r1
 8019202:	6013      	str	r3, [r2, #0]
 8019204:	1d7b      	adds	r3, r7, #5
 8019206:	33ff      	adds	r3, #255	@ 0xff
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	2201      	movs	r2, #1
 801920c:	4013      	ands	r3, r2
 801920e:	d004      	beq.n	801921a <USB_EPStartXfer+0x118e>
 8019210:	187b      	adds	r3, r7, r1
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	3301      	adds	r3, #1
 8019216:	187a      	adds	r2, r7, r1
 8019218:	6013      	str	r3, [r2, #0]
 801921a:	21b8      	movs	r1, #184	@ 0xb8
 801921c:	187b      	adds	r3, r7, r1
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	881b      	ldrh	r3, [r3, #0]
 8019222:	b29a      	uxth	r2, r3
 8019224:	23d8      	movs	r3, #216	@ 0xd8
 8019226:	18fb      	adds	r3, r7, r3
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	b29b      	uxth	r3, r3
 801922c:	029b      	lsls	r3, r3, #10
 801922e:	b29b      	uxth	r3, r3
 8019230:	4313      	orrs	r3, r2
 8019232:	b29a      	uxth	r2, r3
 8019234:	187b      	adds	r3, r7, r1
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	801a      	strh	r2, [r3, #0]
 801923a:	e02e      	b.n	801929a <USB_EPStartXfer+0x120e>
 801923c:	00000406 	.word	0x00000406
 8019240:	ffff8f8f 	.word	0xffff8f8f
 8019244:	ffff80c0 	.word	0xffff80c0
 8019248:	00000402 	.word	0x00000402
 801924c:	ffff8000 	.word	0xffff8000
 8019250:	683b      	ldr	r3, [r7, #0]
 8019252:	785b      	ldrb	r3, [r3, #1]
 8019254:	2b01      	cmp	r3, #1
 8019256:	d120      	bne.n	801929a <USB_EPStartXfer+0x120e>
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	2250      	movs	r2, #80	@ 0x50
 801925c:	5a9b      	ldrh	r3, [r3, r2]
 801925e:	b29b      	uxth	r3, r3
 8019260:	001a      	movs	r2, r3
 8019262:	21c4      	movs	r1, #196	@ 0xc4
 8019264:	187b      	adds	r3, r7, r1
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	189b      	adds	r3, r3, r2
 801926a:	187a      	adds	r2, r7, r1
 801926c:	6013      	str	r3, [r2, #0]
 801926e:	683b      	ldr	r3, [r7, #0]
 8019270:	781b      	ldrb	r3, [r3, #0]
 8019272:	00da      	lsls	r2, r3, #3
 8019274:	187b      	adds	r3, r7, r1
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	18d3      	adds	r3, r2, r3
 801927a:	4a1d      	ldr	r2, [pc, #116]	@ (80192f0 <USB_EPStartXfer+0x1264>)
 801927c:	4694      	mov	ip, r2
 801927e:	4463      	add	r3, ip
 8019280:	21c0      	movs	r1, #192	@ 0xc0
 8019282:	187a      	adds	r2, r7, r1
 8019284:	6013      	str	r3, [r2, #0]
 8019286:	1d7b      	adds	r3, r7, #5
 8019288:	33ff      	adds	r3, #255	@ 0xff
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	b29a      	uxth	r2, r3
 801928e:	187b      	adds	r3, r7, r1
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	801a      	strh	r2, [r3, #0]
 8019294:	e001      	b.n	801929a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8019296:	2301      	movs	r3, #1
 8019298:	e025      	b.n	80192e6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801929a:	687a      	ldr	r2, [r7, #4]
 801929c:	683b      	ldr	r3, [r7, #0]
 801929e:	781b      	ldrb	r3, [r3, #0]
 80192a0:	009b      	lsls	r3, r3, #2
 80192a2:	18d3      	adds	r3, r2, r3
 80192a4:	881b      	ldrh	r3, [r3, #0]
 80192a6:	b29a      	uxth	r2, r3
 80192a8:	208a      	movs	r0, #138	@ 0x8a
 80192aa:	183b      	adds	r3, r7, r0
 80192ac:	4911      	ldr	r1, [pc, #68]	@ (80192f4 <USB_EPStartXfer+0x1268>)
 80192ae:	400a      	ands	r2, r1
 80192b0:	801a      	strh	r2, [r3, #0]
 80192b2:	183b      	adds	r3, r7, r0
 80192b4:	183a      	adds	r2, r7, r0
 80192b6:	8812      	ldrh	r2, [r2, #0]
 80192b8:	2180      	movs	r1, #128	@ 0x80
 80192ba:	0149      	lsls	r1, r1, #5
 80192bc:	404a      	eors	r2, r1
 80192be:	801a      	strh	r2, [r3, #0]
 80192c0:	183b      	adds	r3, r7, r0
 80192c2:	183a      	adds	r2, r7, r0
 80192c4:	8812      	ldrh	r2, [r2, #0]
 80192c6:	2180      	movs	r1, #128	@ 0x80
 80192c8:	0189      	lsls	r1, r1, #6
 80192ca:	404a      	eors	r2, r1
 80192cc:	801a      	strh	r2, [r3, #0]
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	009b      	lsls	r3, r3, #2
 80192d6:	18d3      	adds	r3, r2, r3
 80192d8:	183a      	adds	r2, r7, r0
 80192da:	8812      	ldrh	r2, [r2, #0]
 80192dc:	4906      	ldr	r1, [pc, #24]	@ (80192f8 <USB_EPStartXfer+0x126c>)
 80192de:	430a      	orrs	r2, r1
 80192e0:	b292      	uxth	r2, r2
 80192e2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80192e4:	2300      	movs	r3, #0
}
 80192e6:	0018      	movs	r0, r3
 80192e8:	46bd      	mov	sp, r7
 80192ea:	b043      	add	sp, #268	@ 0x10c
 80192ec:	bd90      	pop	{r4, r7, pc}
 80192ee:	46c0      	nop			@ (mov r8, r8)
 80192f0:	00000406 	.word	0x00000406
 80192f4:	ffffbf8f 	.word	0xffffbf8f
 80192f8:	ffff8080 	.word	0xffff8080

080192fc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80192fc:	b580      	push	{r7, lr}
 80192fe:	b084      	sub	sp, #16
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8019306:	683b      	ldr	r3, [r7, #0]
 8019308:	785b      	ldrb	r3, [r3, #1]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d01d      	beq.n	801934a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801930e:	687a      	ldr	r2, [r7, #4]
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	781b      	ldrb	r3, [r3, #0]
 8019314:	009b      	lsls	r3, r3, #2
 8019316:	18d3      	adds	r3, r2, r3
 8019318:	881b      	ldrh	r3, [r3, #0]
 801931a:	b29a      	uxth	r2, r3
 801931c:	200c      	movs	r0, #12
 801931e:	183b      	adds	r3, r7, r0
 8019320:	491b      	ldr	r1, [pc, #108]	@ (8019390 <USB_EPSetStall+0x94>)
 8019322:	400a      	ands	r2, r1
 8019324:	801a      	strh	r2, [r3, #0]
 8019326:	183b      	adds	r3, r7, r0
 8019328:	183a      	adds	r2, r7, r0
 801932a:	8812      	ldrh	r2, [r2, #0]
 801932c:	2110      	movs	r1, #16
 801932e:	404a      	eors	r2, r1
 8019330:	801a      	strh	r2, [r3, #0]
 8019332:	687a      	ldr	r2, [r7, #4]
 8019334:	683b      	ldr	r3, [r7, #0]
 8019336:	781b      	ldrb	r3, [r3, #0]
 8019338:	009b      	lsls	r3, r3, #2
 801933a:	18d3      	adds	r3, r2, r3
 801933c:	183a      	adds	r2, r7, r0
 801933e:	8812      	ldrh	r2, [r2, #0]
 8019340:	4914      	ldr	r1, [pc, #80]	@ (8019394 <USB_EPSetStall+0x98>)
 8019342:	430a      	orrs	r2, r1
 8019344:	b292      	uxth	r2, r2
 8019346:	801a      	strh	r2, [r3, #0]
 8019348:	e01d      	b.n	8019386 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801934a:	687a      	ldr	r2, [r7, #4]
 801934c:	683b      	ldr	r3, [r7, #0]
 801934e:	781b      	ldrb	r3, [r3, #0]
 8019350:	009b      	lsls	r3, r3, #2
 8019352:	18d3      	adds	r3, r2, r3
 8019354:	881b      	ldrh	r3, [r3, #0]
 8019356:	b29a      	uxth	r2, r3
 8019358:	200e      	movs	r0, #14
 801935a:	183b      	adds	r3, r7, r0
 801935c:	490e      	ldr	r1, [pc, #56]	@ (8019398 <USB_EPSetStall+0x9c>)
 801935e:	400a      	ands	r2, r1
 8019360:	801a      	strh	r2, [r3, #0]
 8019362:	183b      	adds	r3, r7, r0
 8019364:	183a      	adds	r2, r7, r0
 8019366:	8812      	ldrh	r2, [r2, #0]
 8019368:	2180      	movs	r1, #128	@ 0x80
 801936a:	0149      	lsls	r1, r1, #5
 801936c:	404a      	eors	r2, r1
 801936e:	801a      	strh	r2, [r3, #0]
 8019370:	687a      	ldr	r2, [r7, #4]
 8019372:	683b      	ldr	r3, [r7, #0]
 8019374:	781b      	ldrb	r3, [r3, #0]
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	18d3      	adds	r3, r2, r3
 801937a:	183a      	adds	r2, r7, r0
 801937c:	8812      	ldrh	r2, [r2, #0]
 801937e:	4905      	ldr	r1, [pc, #20]	@ (8019394 <USB_EPSetStall+0x98>)
 8019380:	430a      	orrs	r2, r1
 8019382:	b292      	uxth	r2, r2
 8019384:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019386:	2300      	movs	r3, #0
}
 8019388:	0018      	movs	r0, r3
 801938a:	46bd      	mov	sp, r7
 801938c:	b004      	add	sp, #16
 801938e:	bd80      	pop	{r7, pc}
 8019390:	ffff8fbf 	.word	0xffff8fbf
 8019394:	ffff8080 	.word	0xffff8080
 8019398:	ffffbf8f 	.word	0xffffbf8f

0801939c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b086      	sub	sp, #24
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
 80193a4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80193a6:	683b      	ldr	r3, [r7, #0]
 80193a8:	7b1b      	ldrb	r3, [r3, #12]
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d000      	beq.n	80193b0 <USB_EPClearStall+0x14>
 80193ae:	e095      	b.n	80194dc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80193b0:	683b      	ldr	r3, [r7, #0]
 80193b2:	785b      	ldrb	r3, [r3, #1]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d046      	beq.n	8019446 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80193b8:	687a      	ldr	r2, [r7, #4]
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	781b      	ldrb	r3, [r3, #0]
 80193be:	009b      	lsls	r3, r3, #2
 80193c0:	18d2      	adds	r2, r2, r3
 80193c2:	2110      	movs	r1, #16
 80193c4:	187b      	adds	r3, r7, r1
 80193c6:	8812      	ldrh	r2, [r2, #0]
 80193c8:	801a      	strh	r2, [r3, #0]
 80193ca:	187b      	adds	r3, r7, r1
 80193cc:	881b      	ldrh	r3, [r3, #0]
 80193ce:	2240      	movs	r2, #64	@ 0x40
 80193d0:	4013      	ands	r3, r2
 80193d2:	d016      	beq.n	8019402 <USB_EPClearStall+0x66>
 80193d4:	687a      	ldr	r2, [r7, #4]
 80193d6:	683b      	ldr	r3, [r7, #0]
 80193d8:	781b      	ldrb	r3, [r3, #0]
 80193da:	009b      	lsls	r3, r3, #2
 80193dc:	18d3      	adds	r3, r2, r3
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	b29a      	uxth	r2, r3
 80193e2:	200e      	movs	r0, #14
 80193e4:	183b      	adds	r3, r7, r0
 80193e6:	4940      	ldr	r1, [pc, #256]	@ (80194e8 <USB_EPClearStall+0x14c>)
 80193e8:	400a      	ands	r2, r1
 80193ea:	801a      	strh	r2, [r3, #0]
 80193ec:	687a      	ldr	r2, [r7, #4]
 80193ee:	683b      	ldr	r3, [r7, #0]
 80193f0:	781b      	ldrb	r3, [r3, #0]
 80193f2:	009b      	lsls	r3, r3, #2
 80193f4:	18d3      	adds	r3, r2, r3
 80193f6:	183a      	adds	r2, r7, r0
 80193f8:	8812      	ldrh	r2, [r2, #0]
 80193fa:	493c      	ldr	r1, [pc, #240]	@ (80194ec <USB_EPClearStall+0x150>)
 80193fc:	430a      	orrs	r2, r1
 80193fe:	b292      	uxth	r2, r2
 8019400:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019402:	683b      	ldr	r3, [r7, #0]
 8019404:	78db      	ldrb	r3, [r3, #3]
 8019406:	2b01      	cmp	r3, #1
 8019408:	d068      	beq.n	80194dc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801940a:	687a      	ldr	r2, [r7, #4]
 801940c:	683b      	ldr	r3, [r7, #0]
 801940e:	781b      	ldrb	r3, [r3, #0]
 8019410:	009b      	lsls	r3, r3, #2
 8019412:	18d3      	adds	r3, r2, r3
 8019414:	881b      	ldrh	r3, [r3, #0]
 8019416:	b29a      	uxth	r2, r3
 8019418:	200c      	movs	r0, #12
 801941a:	183b      	adds	r3, r7, r0
 801941c:	4934      	ldr	r1, [pc, #208]	@ (80194f0 <USB_EPClearStall+0x154>)
 801941e:	400a      	ands	r2, r1
 8019420:	801a      	strh	r2, [r3, #0]
 8019422:	183b      	adds	r3, r7, r0
 8019424:	183a      	adds	r2, r7, r0
 8019426:	8812      	ldrh	r2, [r2, #0]
 8019428:	2120      	movs	r1, #32
 801942a:	404a      	eors	r2, r1
 801942c:	801a      	strh	r2, [r3, #0]
 801942e:	687a      	ldr	r2, [r7, #4]
 8019430:	683b      	ldr	r3, [r7, #0]
 8019432:	781b      	ldrb	r3, [r3, #0]
 8019434:	009b      	lsls	r3, r3, #2
 8019436:	18d3      	adds	r3, r2, r3
 8019438:	183a      	adds	r2, r7, r0
 801943a:	8812      	ldrh	r2, [r2, #0]
 801943c:	492d      	ldr	r1, [pc, #180]	@ (80194f4 <USB_EPClearStall+0x158>)
 801943e:	430a      	orrs	r2, r1
 8019440:	b292      	uxth	r2, r2
 8019442:	801a      	strh	r2, [r3, #0]
 8019444:	e04a      	b.n	80194dc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019446:	687a      	ldr	r2, [r7, #4]
 8019448:	683b      	ldr	r3, [r7, #0]
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	009b      	lsls	r3, r3, #2
 801944e:	18d2      	adds	r2, r2, r3
 8019450:	2116      	movs	r1, #22
 8019452:	187b      	adds	r3, r7, r1
 8019454:	8812      	ldrh	r2, [r2, #0]
 8019456:	801a      	strh	r2, [r3, #0]
 8019458:	187b      	adds	r3, r7, r1
 801945a:	881a      	ldrh	r2, [r3, #0]
 801945c:	2380      	movs	r3, #128	@ 0x80
 801945e:	01db      	lsls	r3, r3, #7
 8019460:	4013      	ands	r3, r2
 8019462:	d016      	beq.n	8019492 <USB_EPClearStall+0xf6>
 8019464:	687a      	ldr	r2, [r7, #4]
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	009b      	lsls	r3, r3, #2
 801946c:	18d3      	adds	r3, r2, r3
 801946e:	881b      	ldrh	r3, [r3, #0]
 8019470:	b29a      	uxth	r2, r3
 8019472:	2014      	movs	r0, #20
 8019474:	183b      	adds	r3, r7, r0
 8019476:	491c      	ldr	r1, [pc, #112]	@ (80194e8 <USB_EPClearStall+0x14c>)
 8019478:	400a      	ands	r2, r1
 801947a:	801a      	strh	r2, [r3, #0]
 801947c:	687a      	ldr	r2, [r7, #4]
 801947e:	683b      	ldr	r3, [r7, #0]
 8019480:	781b      	ldrb	r3, [r3, #0]
 8019482:	009b      	lsls	r3, r3, #2
 8019484:	18d3      	adds	r3, r2, r3
 8019486:	183a      	adds	r2, r7, r0
 8019488:	8812      	ldrh	r2, [r2, #0]
 801948a:	491b      	ldr	r1, [pc, #108]	@ (80194f8 <USB_EPClearStall+0x15c>)
 801948c:	430a      	orrs	r2, r1
 801948e:	b292      	uxth	r2, r2
 8019490:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019492:	687a      	ldr	r2, [r7, #4]
 8019494:	683b      	ldr	r3, [r7, #0]
 8019496:	781b      	ldrb	r3, [r3, #0]
 8019498:	009b      	lsls	r3, r3, #2
 801949a:	18d3      	adds	r3, r2, r3
 801949c:	881b      	ldrh	r3, [r3, #0]
 801949e:	b29a      	uxth	r2, r3
 80194a0:	2012      	movs	r0, #18
 80194a2:	183b      	adds	r3, r7, r0
 80194a4:	4915      	ldr	r1, [pc, #84]	@ (80194fc <USB_EPClearStall+0x160>)
 80194a6:	400a      	ands	r2, r1
 80194a8:	801a      	strh	r2, [r3, #0]
 80194aa:	183b      	adds	r3, r7, r0
 80194ac:	183a      	adds	r2, r7, r0
 80194ae:	8812      	ldrh	r2, [r2, #0]
 80194b0:	2180      	movs	r1, #128	@ 0x80
 80194b2:	0149      	lsls	r1, r1, #5
 80194b4:	404a      	eors	r2, r1
 80194b6:	801a      	strh	r2, [r3, #0]
 80194b8:	183b      	adds	r3, r7, r0
 80194ba:	183a      	adds	r2, r7, r0
 80194bc:	8812      	ldrh	r2, [r2, #0]
 80194be:	2180      	movs	r1, #128	@ 0x80
 80194c0:	0189      	lsls	r1, r1, #6
 80194c2:	404a      	eors	r2, r1
 80194c4:	801a      	strh	r2, [r3, #0]
 80194c6:	687a      	ldr	r2, [r7, #4]
 80194c8:	683b      	ldr	r3, [r7, #0]
 80194ca:	781b      	ldrb	r3, [r3, #0]
 80194cc:	009b      	lsls	r3, r3, #2
 80194ce:	18d3      	adds	r3, r2, r3
 80194d0:	183a      	adds	r2, r7, r0
 80194d2:	8812      	ldrh	r2, [r2, #0]
 80194d4:	4907      	ldr	r1, [pc, #28]	@ (80194f4 <USB_EPClearStall+0x158>)
 80194d6:	430a      	orrs	r2, r1
 80194d8:	b292      	uxth	r2, r2
 80194da:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80194dc:	2300      	movs	r3, #0
}
 80194de:	0018      	movs	r0, r3
 80194e0:	46bd      	mov	sp, r7
 80194e2:	b006      	add	sp, #24
 80194e4:	bd80      	pop	{r7, pc}
 80194e6:	46c0      	nop			@ (mov r8, r8)
 80194e8:	ffff8f8f 	.word	0xffff8f8f
 80194ec:	ffff80c0 	.word	0xffff80c0
 80194f0:	ffff8fbf 	.word	0xffff8fbf
 80194f4:	ffff8080 	.word	0xffff8080
 80194f8:	ffffc080 	.word	0xffffc080
 80194fc:	ffffbf8f 	.word	0xffffbf8f

08019500 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8019500:	b580      	push	{r7, lr}
 8019502:	b082      	sub	sp, #8
 8019504:	af00      	add	r7, sp, #0
 8019506:	6078      	str	r0, [r7, #4]
 8019508:	000a      	movs	r2, r1
 801950a:	1cfb      	adds	r3, r7, #3
 801950c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801950e:	1cfb      	adds	r3, r7, #3
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	2b00      	cmp	r3, #0
 8019514:	d103      	bne.n	801951e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	224c      	movs	r2, #76	@ 0x4c
 801951a:	2180      	movs	r1, #128	@ 0x80
 801951c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801951e:	2300      	movs	r3, #0
}
 8019520:	0018      	movs	r0, r3
 8019522:	46bd      	mov	sp, r7
 8019524:	b002      	add	sp, #8
 8019526:	bd80      	pop	{r7, pc}

08019528 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b082      	sub	sp, #8
 801952c:	af00      	add	r7, sp, #0
 801952e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	2258      	movs	r2, #88	@ 0x58
 8019534:	5a9b      	ldrh	r3, [r3, r2]
 8019536:	b29b      	uxth	r3, r3
 8019538:	4a05      	ldr	r2, [pc, #20]	@ (8019550 <USB_DevConnect+0x28>)
 801953a:	4313      	orrs	r3, r2
 801953c:	b299      	uxth	r1, r3
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	2258      	movs	r2, #88	@ 0x58
 8019542:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019544:	2300      	movs	r3, #0
}
 8019546:	0018      	movs	r0, r3
 8019548:	46bd      	mov	sp, r7
 801954a:	b002      	add	sp, #8
 801954c:	bd80      	pop	{r7, pc}
 801954e:	46c0      	nop			@ (mov r8, r8)
 8019550:	ffff8000 	.word	0xffff8000

08019554 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b084      	sub	sp, #16
 8019558:	af00      	add	r7, sp, #0
 801955a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	2244      	movs	r2, #68	@ 0x44
 8019560:	5a9b      	ldrh	r3, [r3, r2]
 8019562:	b29b      	uxth	r3, r3
 8019564:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8019566:	68fb      	ldr	r3, [r7, #12]
}
 8019568:	0018      	movs	r0, r3
 801956a:	46bd      	mov	sp, r7
 801956c:	b004      	add	sp, #16
 801956e:	bd80      	pop	{r7, pc}

08019570 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b08a      	sub	sp, #40	@ 0x28
 8019574:	af00      	add	r7, sp, #0
 8019576:	60f8      	str	r0, [r7, #12]
 8019578:	60b9      	str	r1, [r7, #8]
 801957a:	0019      	movs	r1, r3
 801957c:	1dbb      	adds	r3, r7, #6
 801957e:	801a      	strh	r2, [r3, #0]
 8019580:	1d3b      	adds	r3, r7, #4
 8019582:	1c0a      	adds	r2, r1, #0
 8019584:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8019586:	1d3b      	adds	r3, r7, #4
 8019588:	881b      	ldrh	r3, [r3, #0]
 801958a:	3301      	adds	r3, #1
 801958c:	085b      	lsrs	r3, r3, #1
 801958e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8019598:	1dbb      	adds	r3, r7, #6
 801959a:	881a      	ldrh	r2, [r3, #0]
 801959c:	697b      	ldr	r3, [r7, #20]
 801959e:	18d3      	adds	r3, r2, r3
 80195a0:	2280      	movs	r2, #128	@ 0x80
 80195a2:	00d2      	lsls	r2, r2, #3
 80195a4:	4694      	mov	ip, r2
 80195a6:	4463      	add	r3, ip
 80195a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80195aa:	69bb      	ldr	r3, [r7, #24]
 80195ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80195ae:	e020      	b.n	80195f2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80195b0:	69fb      	ldr	r3, [r7, #28]
 80195b2:	781a      	ldrb	r2, [r3, #0]
 80195b4:	2112      	movs	r1, #18
 80195b6:	187b      	adds	r3, r7, r1
 80195b8:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80195ba:	69fb      	ldr	r3, [r7, #28]
 80195bc:	3301      	adds	r3, #1
 80195be:	781b      	ldrb	r3, [r3, #0]
 80195c0:	021b      	lsls	r3, r3, #8
 80195c2:	b21a      	sxth	r2, r3
 80195c4:	187b      	adds	r3, r7, r1
 80195c6:	2000      	movs	r0, #0
 80195c8:	5e1b      	ldrsh	r3, [r3, r0]
 80195ca:	4313      	orrs	r3, r2
 80195cc:	b21a      	sxth	r2, r3
 80195ce:	187b      	adds	r3, r7, r1
 80195d0:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80195d2:	6a3b      	ldr	r3, [r7, #32]
 80195d4:	187a      	adds	r2, r7, r1
 80195d6:	8812      	ldrh	r2, [r2, #0]
 80195d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80195da:	6a3b      	ldr	r3, [r7, #32]
 80195dc:	3302      	adds	r3, #2
 80195de:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80195e0:	69fb      	ldr	r3, [r7, #28]
 80195e2:	3301      	adds	r3, #1
 80195e4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80195e6:	69fb      	ldr	r3, [r7, #28]
 80195e8:	3301      	adds	r3, #1
 80195ea:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80195ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195ee:	3b01      	subs	r3, #1
 80195f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80195f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d1db      	bne.n	80195b0 <USB_WritePMA+0x40>
  }
}
 80195f8:	46c0      	nop			@ (mov r8, r8)
 80195fa:	46c0      	nop			@ (mov r8, r8)
 80195fc:	46bd      	mov	sp, r7
 80195fe:	b00a      	add	sp, #40	@ 0x28
 8019600:	bd80      	pop	{r7, pc}

08019602 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019602:	b580      	push	{r7, lr}
 8019604:	b08a      	sub	sp, #40	@ 0x28
 8019606:	af00      	add	r7, sp, #0
 8019608:	60f8      	str	r0, [r7, #12]
 801960a:	60b9      	str	r1, [r7, #8]
 801960c:	0019      	movs	r1, r3
 801960e:	1dbb      	adds	r3, r7, #6
 8019610:	801a      	strh	r2, [r3, #0]
 8019612:	1d3b      	adds	r3, r7, #4
 8019614:	1c0a      	adds	r2, r1, #0
 8019616:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8019618:	1d3b      	adds	r3, r7, #4
 801961a:	881b      	ldrh	r3, [r3, #0]
 801961c:	085b      	lsrs	r3, r3, #1
 801961e:	b29b      	uxth	r3, r3
 8019620:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019626:	68bb      	ldr	r3, [r7, #8]
 8019628:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801962a:	1dbb      	adds	r3, r7, #6
 801962c:	881a      	ldrh	r2, [r3, #0]
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	18d3      	adds	r3, r2, r3
 8019632:	2280      	movs	r2, #128	@ 0x80
 8019634:	00d2      	lsls	r2, r2, #3
 8019636:	4694      	mov	ip, r2
 8019638:	4463      	add	r3, ip
 801963a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801963c:	69bb      	ldr	r3, [r7, #24]
 801963e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019640:	e018      	b.n	8019674 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8019642:	6a3b      	ldr	r3, [r7, #32]
 8019644:	881b      	ldrh	r3, [r3, #0]
 8019646:	b29b      	uxth	r3, r3
 8019648:	613b      	str	r3, [r7, #16]
    pdwVal++;
 801964a:	6a3b      	ldr	r3, [r7, #32]
 801964c:	3302      	adds	r3, #2
 801964e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	b2da      	uxtb	r2, r3
 8019654:	69fb      	ldr	r3, [r7, #28]
 8019656:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019658:	69fb      	ldr	r3, [r7, #28]
 801965a:	3301      	adds	r3, #1
 801965c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801965e:	693b      	ldr	r3, [r7, #16]
 8019660:	0a1b      	lsrs	r3, r3, #8
 8019662:	b2da      	uxtb	r2, r3
 8019664:	69fb      	ldr	r3, [r7, #28]
 8019666:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019668:	69fb      	ldr	r3, [r7, #28]
 801966a:	3301      	adds	r3, #1
 801966c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801966e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019670:	3b01      	subs	r3, #1
 8019672:	627b      	str	r3, [r7, #36]	@ 0x24
 8019674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019676:	2b00      	cmp	r3, #0
 8019678:	d1e3      	bne.n	8019642 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 801967a:	1d3b      	adds	r3, r7, #4
 801967c:	881b      	ldrh	r3, [r3, #0]
 801967e:	2201      	movs	r2, #1
 8019680:	4013      	ands	r3, r2
 8019682:	b29b      	uxth	r3, r3
 8019684:	2b00      	cmp	r3, #0
 8019686:	d007      	beq.n	8019698 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8019688:	6a3b      	ldr	r3, [r7, #32]
 801968a:	881b      	ldrh	r3, [r3, #0]
 801968c:	b29b      	uxth	r3, r3
 801968e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019690:	693b      	ldr	r3, [r7, #16]
 8019692:	b2da      	uxtb	r2, r3
 8019694:	69fb      	ldr	r3, [r7, #28]
 8019696:	701a      	strb	r2, [r3, #0]
  }
}
 8019698:	46c0      	nop			@ (mov r8, r8)
 801969a:	46bd      	mov	sp, r7
 801969c:	b00a      	add	sp, #40	@ 0x28
 801969e:	bd80      	pop	{r7, pc}

080196a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b084      	sub	sp, #16
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	000a      	movs	r2, r1
 80196aa:	1cfb      	adds	r3, r7, #3
 80196ac:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80196ae:	230f      	movs	r3, #15
 80196b0:	18fb      	adds	r3, r7, r3
 80196b2:	2200      	movs	r2, #0
 80196b4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	7c1b      	ldrb	r3, [r3, #16]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d116      	bne.n	80196ec <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80196be:	2380      	movs	r3, #128	@ 0x80
 80196c0:	009b      	lsls	r3, r3, #2
 80196c2:	6878      	ldr	r0, [r7, #4]
 80196c4:	2202      	movs	r2, #2
 80196c6:	2181      	movs	r1, #129	@ 0x81
 80196c8:	f002 f8eb 	bl	801b8a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2201      	movs	r2, #1
 80196d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80196d2:	2380      	movs	r3, #128	@ 0x80
 80196d4:	009b      	lsls	r3, r3, #2
 80196d6:	6878      	ldr	r0, [r7, #4]
 80196d8:	2202      	movs	r2, #2
 80196da:	2101      	movs	r1, #1
 80196dc:	f002 f8e1 	bl	801b8a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80196e0:	687a      	ldr	r2, [r7, #4]
 80196e2:	23b6      	movs	r3, #182	@ 0xb6
 80196e4:	005b      	lsls	r3, r3, #1
 80196e6:	2101      	movs	r1, #1
 80196e8:	50d1      	str	r1, [r2, r3]
 80196ea:	e013      	b.n	8019714 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80196ec:	6878      	ldr	r0, [r7, #4]
 80196ee:	2340      	movs	r3, #64	@ 0x40
 80196f0:	2202      	movs	r2, #2
 80196f2:	2181      	movs	r1, #129	@ 0x81
 80196f4:	f002 f8d5 	bl	801b8a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	2201      	movs	r2, #1
 80196fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80196fe:	6878      	ldr	r0, [r7, #4]
 8019700:	2340      	movs	r3, #64	@ 0x40
 8019702:	2202      	movs	r2, #2
 8019704:	2101      	movs	r1, #1
 8019706:	f002 f8cc 	bl	801b8a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801970a:	687a      	ldr	r2, [r7, #4]
 801970c:	23b6      	movs	r3, #182	@ 0xb6
 801970e:	005b      	lsls	r3, r3, #1
 8019710:	2101      	movs	r1, #1
 8019712:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8019714:	6878      	ldr	r0, [r7, #4]
 8019716:	2308      	movs	r3, #8
 8019718:	2203      	movs	r2, #3
 801971a:	2182      	movs	r1, #130	@ 0x82
 801971c:	f002 f8c1 	bl	801b8a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	2201      	movs	r2, #1
 8019724:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8019726:	2387      	movs	r3, #135	@ 0x87
 8019728:	009b      	lsls	r3, r3, #2
 801972a:	0018      	movs	r0, r3
 801972c:	f002 fa52 	bl	801bbd4 <USBD_static_malloc>
 8019730:	0001      	movs	r1, r0
 8019732:	687a      	ldr	r2, [r7, #4]
 8019734:	23ae      	movs	r3, #174	@ 0xae
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 801973a:	687a      	ldr	r2, [r7, #4]
 801973c:	23ae      	movs	r3, #174	@ 0xae
 801973e:	009b      	lsls	r3, r3, #2
 8019740:	58d3      	ldr	r3, [r2, r3]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d104      	bne.n	8019750 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8019746:	230f      	movs	r3, #15
 8019748:	18fb      	adds	r3, r7, r3
 801974a:	2201      	movs	r2, #1
 801974c:	701a      	strb	r2, [r3, #0]
 801974e:	e02c      	b.n	80197aa <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019750:	687a      	ldr	r2, [r7, #4]
 8019752:	23ae      	movs	r3, #174	@ 0xae
 8019754:	009b      	lsls	r3, r3, #2
 8019756:	58d3      	ldr	r3, [r2, r3]
 8019758:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801975a:	687a      	ldr	r2, [r7, #4]
 801975c:	23af      	movs	r3, #175	@ 0xaf
 801975e:	009b      	lsls	r3, r3, #2
 8019760:	58d3      	ldr	r3, [r2, r3]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8019766:	68ba      	ldr	r2, [r7, #8]
 8019768:	2385      	movs	r3, #133	@ 0x85
 801976a:	009b      	lsls	r3, r3, #2
 801976c:	2100      	movs	r1, #0
 801976e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8019770:	68ba      	ldr	r2, [r7, #8]
 8019772:	2386      	movs	r3, #134	@ 0x86
 8019774:	009b      	lsls	r3, r3, #2
 8019776:	2100      	movs	r1, #0
 8019778:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	7c1b      	ldrb	r3, [r3, #16]
 801977e:	2b00      	cmp	r3, #0
 8019780:	d10a      	bne.n	8019798 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019782:	68ba      	ldr	r2, [r7, #8]
 8019784:	2381      	movs	r3, #129	@ 0x81
 8019786:	009b      	lsls	r3, r3, #2
 8019788:	58d2      	ldr	r2, [r2, r3]
 801978a:	2380      	movs	r3, #128	@ 0x80
 801978c:	009b      	lsls	r3, r3, #2
 801978e:	6878      	ldr	r0, [r7, #4]
 8019790:	2101      	movs	r1, #1
 8019792:	f002 f9d1 	bl	801bb38 <USBD_LL_PrepareReceive>
 8019796:	e008      	b.n	80197aa <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8019798:	68ba      	ldr	r2, [r7, #8]
 801979a:	2381      	movs	r3, #129	@ 0x81
 801979c:	009b      	lsls	r3, r3, #2
 801979e:	58d2      	ldr	r2, [r2, r3]
 80197a0:	6878      	ldr	r0, [r7, #4]
 80197a2:	2340      	movs	r3, #64	@ 0x40
 80197a4:	2101      	movs	r1, #1
 80197a6:	f002 f9c7 	bl	801bb38 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80197aa:	230f      	movs	r3, #15
 80197ac:	18fb      	adds	r3, r7, r3
 80197ae:	781b      	ldrb	r3, [r3, #0]
}
 80197b0:	0018      	movs	r0, r3
 80197b2:	46bd      	mov	sp, r7
 80197b4:	b004      	add	sp, #16
 80197b6:	bd80      	pop	{r7, pc}

080197b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b084      	sub	sp, #16
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	000a      	movs	r2, r1
 80197c2:	1cfb      	adds	r3, r7, #3
 80197c4:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80197c6:	230f      	movs	r3, #15
 80197c8:	18fb      	adds	r3, r7, r3
 80197ca:	2200      	movs	r2, #0
 80197cc:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	2181      	movs	r1, #129	@ 0x81
 80197d2:	0018      	movs	r0, r3
 80197d4:	f002 f89c 	bl	801b910 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	2200      	movs	r2, #0
 80197dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	2101      	movs	r1, #1
 80197e2:	0018      	movs	r0, r3
 80197e4:	f002 f894 	bl	801b910 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80197e8:	687a      	ldr	r2, [r7, #4]
 80197ea:	23b6      	movs	r3, #182	@ 0xb6
 80197ec:	005b      	lsls	r3, r3, #1
 80197ee:	2100      	movs	r1, #0
 80197f0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	2182      	movs	r1, #130	@ 0x82
 80197f6:	0018      	movs	r0, r3
 80197f8:	f002 f88a 	bl	801b910 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	2200      	movs	r2, #0
 8019800:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8019802:	687a      	ldr	r2, [r7, #4]
 8019804:	23ae      	movs	r3, #174	@ 0xae
 8019806:	009b      	lsls	r3, r3, #2
 8019808:	58d3      	ldr	r3, [r2, r3]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d011      	beq.n	8019832 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801980e:	687a      	ldr	r2, [r7, #4]
 8019810:	23af      	movs	r3, #175	@ 0xaf
 8019812:	009b      	lsls	r3, r3, #2
 8019814:	58d3      	ldr	r3, [r2, r3]
 8019816:	685b      	ldr	r3, [r3, #4]
 8019818:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801981a:	687a      	ldr	r2, [r7, #4]
 801981c:	23ae      	movs	r3, #174	@ 0xae
 801981e:	009b      	lsls	r3, r3, #2
 8019820:	58d3      	ldr	r3, [r2, r3]
 8019822:	0018      	movs	r0, r3
 8019824:	f002 f9e2 	bl	801bbec <USBD_static_free>
    pdev->pClassData = NULL;
 8019828:	687a      	ldr	r2, [r7, #4]
 801982a:	23ae      	movs	r3, #174	@ 0xae
 801982c:	009b      	lsls	r3, r3, #2
 801982e:	2100      	movs	r1, #0
 8019830:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8019832:	230f      	movs	r3, #15
 8019834:	18fb      	adds	r3, r7, r3
 8019836:	781b      	ldrb	r3, [r3, #0]
}
 8019838:	0018      	movs	r0, r3
 801983a:	46bd      	mov	sp, r7
 801983c:	b004      	add	sp, #16
 801983e:	bd80      	pop	{r7, pc}

08019840 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b086      	sub	sp, #24
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
 8019848:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	23ae      	movs	r3, #174	@ 0xae
 801984e:	009b      	lsls	r3, r3, #2
 8019850:	58d3      	ldr	r3, [r2, r3]
 8019852:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8019854:	230f      	movs	r3, #15
 8019856:	18fb      	adds	r3, r7, r3
 8019858:	2200      	movs	r2, #0
 801985a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801985c:	230c      	movs	r3, #12
 801985e:	18fb      	adds	r3, r7, r3
 8019860:	2200      	movs	r2, #0
 8019862:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8019864:	2317      	movs	r3, #23
 8019866:	18fb      	adds	r3, r7, r3
 8019868:	2200      	movs	r2, #0
 801986a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801986c:	683b      	ldr	r3, [r7, #0]
 801986e:	781b      	ldrb	r3, [r3, #0]
 8019870:	001a      	movs	r2, r3
 8019872:	2360      	movs	r3, #96	@ 0x60
 8019874:	4013      	ands	r3, r2
 8019876:	d03d      	beq.n	80198f4 <USBD_CDC_Setup+0xb4>
 8019878:	2b20      	cmp	r3, #32
 801987a:	d000      	beq.n	801987e <USBD_CDC_Setup+0x3e>
 801987c:	e094      	b.n	80199a8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801987e:	683b      	ldr	r3, [r7, #0]
 8019880:	88db      	ldrh	r3, [r3, #6]
 8019882:	2b00      	cmp	r3, #0
 8019884:	d02b      	beq.n	80198de <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8019886:	683b      	ldr	r3, [r7, #0]
 8019888:	781b      	ldrb	r3, [r3, #0]
 801988a:	b25b      	sxtb	r3, r3
 801988c:	2b00      	cmp	r3, #0
 801988e:	da12      	bge.n	80198b6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8019890:	687a      	ldr	r2, [r7, #4]
 8019892:	23af      	movs	r3, #175	@ 0xaf
 8019894:	009b      	lsls	r3, r3, #2
 8019896:	58d3      	ldr	r3, [r2, r3]
 8019898:	689b      	ldr	r3, [r3, #8]
 801989a:	683a      	ldr	r2, [r7, #0]
 801989c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801989e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80198a0:	683a      	ldr	r2, [r7, #0]
 80198a2:	88d2      	ldrh	r2, [r2, #6]
 80198a4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80198a6:	6939      	ldr	r1, [r7, #16]
 80198a8:	683b      	ldr	r3, [r7, #0]
 80198aa:	88da      	ldrh	r2, [r3, #6]
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	0018      	movs	r0, r3
 80198b0:	f001 fbaf 	bl	801b012 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80198b4:	e083      	b.n	80199be <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80198b6:	683b      	ldr	r3, [r7, #0]
 80198b8:	7859      	ldrb	r1, [r3, #1]
 80198ba:	693a      	ldr	r2, [r7, #16]
 80198bc:	2380      	movs	r3, #128	@ 0x80
 80198be:	009b      	lsls	r3, r3, #2
 80198c0:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80198c2:	683b      	ldr	r3, [r7, #0]
 80198c4:	88db      	ldrh	r3, [r3, #6]
 80198c6:	b2d9      	uxtb	r1, r3
 80198c8:	693b      	ldr	r3, [r7, #16]
 80198ca:	4a40      	ldr	r2, [pc, #256]	@ (80199cc <USBD_CDC_Setup+0x18c>)
 80198cc:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80198ce:	6939      	ldr	r1, [r7, #16]
 80198d0:	683b      	ldr	r3, [r7, #0]
 80198d2:	88da      	ldrh	r2, [r3, #6]
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	0018      	movs	r0, r3
 80198d8:	f001 fbce 	bl	801b078 <USBD_CtlPrepareRx>
      break;
 80198dc:	e06f      	b.n	80199be <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80198de:	687a      	ldr	r2, [r7, #4]
 80198e0:	23af      	movs	r3, #175	@ 0xaf
 80198e2:	009b      	lsls	r3, r3, #2
 80198e4:	58d3      	ldr	r3, [r2, r3]
 80198e6:	689b      	ldr	r3, [r3, #8]
 80198e8:	683a      	ldr	r2, [r7, #0]
 80198ea:	7850      	ldrb	r0, [r2, #1]
 80198ec:	6839      	ldr	r1, [r7, #0]
 80198ee:	2200      	movs	r2, #0
 80198f0:	4798      	blx	r3
      break;
 80198f2:	e064      	b.n	80199be <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80198f4:	683b      	ldr	r3, [r7, #0]
 80198f6:	785b      	ldrb	r3, [r3, #1]
 80198f8:	2b0b      	cmp	r3, #11
 80198fa:	d037      	beq.n	801996c <USBD_CDC_Setup+0x12c>
 80198fc:	dc47      	bgt.n	801998e <USBD_CDC_Setup+0x14e>
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d002      	beq.n	8019908 <USBD_CDC_Setup+0xc8>
 8019902:	2b0a      	cmp	r3, #10
 8019904:	d019      	beq.n	801993a <USBD_CDC_Setup+0xfa>
 8019906:	e042      	b.n	801998e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8019908:	687a      	ldr	r2, [r7, #4]
 801990a:	23a7      	movs	r3, #167	@ 0xa7
 801990c:	009b      	lsls	r3, r3, #2
 801990e:	5cd3      	ldrb	r3, [r2, r3]
 8019910:	2b03      	cmp	r3, #3
 8019912:	d107      	bne.n	8019924 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8019914:	230c      	movs	r3, #12
 8019916:	18f9      	adds	r1, r7, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2202      	movs	r2, #2
 801991c:	0018      	movs	r0, r3
 801991e:	f001 fb78 	bl	801b012 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019922:	e040      	b.n	80199a6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8019924:	683a      	ldr	r2, [r7, #0]
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	0011      	movs	r1, r2
 801992a:	0018      	movs	r0, r3
 801992c:	f001 faf3 	bl	801af16 <USBD_CtlError>
            ret = USBD_FAIL;
 8019930:	2317      	movs	r3, #23
 8019932:	18fb      	adds	r3, r7, r3
 8019934:	2202      	movs	r2, #2
 8019936:	701a      	strb	r2, [r3, #0]
          break;
 8019938:	e035      	b.n	80199a6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	23a7      	movs	r3, #167	@ 0xa7
 801993e:	009b      	lsls	r3, r3, #2
 8019940:	5cd3      	ldrb	r3, [r2, r3]
 8019942:	2b03      	cmp	r3, #3
 8019944:	d107      	bne.n	8019956 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8019946:	230f      	movs	r3, #15
 8019948:	18f9      	adds	r1, r7, r3
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	2201      	movs	r2, #1
 801994e:	0018      	movs	r0, r3
 8019950:	f001 fb5f 	bl	801b012 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8019954:	e027      	b.n	80199a6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8019956:	683a      	ldr	r2, [r7, #0]
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	0011      	movs	r1, r2
 801995c:	0018      	movs	r0, r3
 801995e:	f001 fada 	bl	801af16 <USBD_CtlError>
            ret = USBD_FAIL;
 8019962:	2317      	movs	r3, #23
 8019964:	18fb      	adds	r3, r7, r3
 8019966:	2202      	movs	r2, #2
 8019968:	701a      	strb	r2, [r3, #0]
          break;
 801996a:	e01c      	b.n	80199a6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801996c:	687a      	ldr	r2, [r7, #4]
 801996e:	23a7      	movs	r3, #167	@ 0xa7
 8019970:	009b      	lsls	r3, r3, #2
 8019972:	5cd3      	ldrb	r3, [r2, r3]
 8019974:	2b03      	cmp	r3, #3
 8019976:	d015      	beq.n	80199a4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8019978:	683a      	ldr	r2, [r7, #0]
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	0011      	movs	r1, r2
 801997e:	0018      	movs	r0, r3
 8019980:	f001 fac9 	bl	801af16 <USBD_CtlError>
            ret = USBD_FAIL;
 8019984:	2317      	movs	r3, #23
 8019986:	18fb      	adds	r3, r7, r3
 8019988:	2202      	movs	r2, #2
 801998a:	701a      	strb	r2, [r3, #0]
          }
          break;
 801998c:	e00a      	b.n	80199a4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801998e:	683a      	ldr	r2, [r7, #0]
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	0011      	movs	r1, r2
 8019994:	0018      	movs	r0, r3
 8019996:	f001 fabe 	bl	801af16 <USBD_CtlError>
          ret = USBD_FAIL;
 801999a:	2317      	movs	r3, #23
 801999c:	18fb      	adds	r3, r7, r3
 801999e:	2202      	movs	r2, #2
 80199a0:	701a      	strb	r2, [r3, #0]
          break;
 80199a2:	e000      	b.n	80199a6 <USBD_CDC_Setup+0x166>
          break;
 80199a4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80199a6:	e00a      	b.n	80199be <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80199a8:	683a      	ldr	r2, [r7, #0]
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	0011      	movs	r1, r2
 80199ae:	0018      	movs	r0, r3
 80199b0:	f001 fab1 	bl	801af16 <USBD_CtlError>
      ret = USBD_FAIL;
 80199b4:	2317      	movs	r3, #23
 80199b6:	18fb      	adds	r3, r7, r3
 80199b8:	2202      	movs	r2, #2
 80199ba:	701a      	strb	r2, [r3, #0]
      break;
 80199bc:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80199be:	2317      	movs	r3, #23
 80199c0:	18fb      	adds	r3, r7, r3
 80199c2:	781b      	ldrb	r3, [r3, #0]
}
 80199c4:	0018      	movs	r0, r3
 80199c6:	46bd      	mov	sp, r7
 80199c8:	b006      	add	sp, #24
 80199ca:	bd80      	pop	{r7, pc}
 80199cc:	00000201 	.word	0x00000201

080199d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b084      	sub	sp, #16
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	000a      	movs	r2, r1
 80199da:	1cfb      	adds	r3, r7, #3
 80199dc:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80199de:	687a      	ldr	r2, [r7, #4]
 80199e0:	23ae      	movs	r3, #174	@ 0xae
 80199e2:	009b      	lsls	r3, r3, #2
 80199e4:	58d3      	ldr	r3, [r2, r3]
 80199e6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80199e8:	687a      	ldr	r2, [r7, #4]
 80199ea:	23b0      	movs	r3, #176	@ 0xb0
 80199ec:	009b      	lsls	r3, r3, #2
 80199ee:	58d3      	ldr	r3, [r2, r3]
 80199f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80199f2:	687a      	ldr	r2, [r7, #4]
 80199f4:	23ae      	movs	r3, #174	@ 0xae
 80199f6:	009b      	lsls	r3, r3, #2
 80199f8:	58d3      	ldr	r3, [r2, r3]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d03e      	beq.n	8019a7c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80199fe:	1cfb      	adds	r3, r7, #3
 8019a00:	781a      	ldrb	r2, [r3, #0]
 8019a02:	6879      	ldr	r1, [r7, #4]
 8019a04:	0013      	movs	r3, r2
 8019a06:	009b      	lsls	r3, r3, #2
 8019a08:	189b      	adds	r3, r3, r2
 8019a0a:	009b      	lsls	r3, r3, #2
 8019a0c:	18cb      	adds	r3, r1, r3
 8019a0e:	331c      	adds	r3, #28
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d02b      	beq.n	8019a6e <USBD_CDC_DataIn+0x9e>
 8019a16:	1cfb      	adds	r3, r7, #3
 8019a18:	781a      	ldrb	r2, [r3, #0]
 8019a1a:	6879      	ldr	r1, [r7, #4]
 8019a1c:	0013      	movs	r3, r2
 8019a1e:	009b      	lsls	r3, r3, #2
 8019a20:	189b      	adds	r3, r3, r2
 8019a22:	009b      	lsls	r3, r3, #2
 8019a24:	18cb      	adds	r3, r1, r3
 8019a26:	331c      	adds	r3, #28
 8019a28:	6818      	ldr	r0, [r3, #0]
 8019a2a:	1cfb      	adds	r3, r7, #3
 8019a2c:	781a      	ldrb	r2, [r3, #0]
 8019a2e:	68b9      	ldr	r1, [r7, #8]
 8019a30:	0013      	movs	r3, r2
 8019a32:	009b      	lsls	r3, r3, #2
 8019a34:	189b      	adds	r3, r3, r2
 8019a36:	00db      	lsls	r3, r3, #3
 8019a38:	18cb      	adds	r3, r1, r3
 8019a3a:	3338      	adds	r3, #56	@ 0x38
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	0019      	movs	r1, r3
 8019a40:	f7e6 fc36 	bl	80002b0 <__aeabi_uidivmod>
 8019a44:	1e0b      	subs	r3, r1, #0
 8019a46:	d112      	bne.n	8019a6e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8019a48:	1cfb      	adds	r3, r7, #3
 8019a4a:	781a      	ldrb	r2, [r3, #0]
 8019a4c:	6879      	ldr	r1, [r7, #4]
 8019a4e:	0013      	movs	r3, r2
 8019a50:	009b      	lsls	r3, r3, #2
 8019a52:	189b      	adds	r3, r3, r2
 8019a54:	009b      	lsls	r3, r3, #2
 8019a56:	18cb      	adds	r3, r1, r3
 8019a58:	331c      	adds	r3, #28
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8019a5e:	1cfb      	adds	r3, r7, #3
 8019a60:	7819      	ldrb	r1, [r3, #0]
 8019a62:	6878      	ldr	r0, [r7, #4]
 8019a64:	2300      	movs	r3, #0
 8019a66:	2200      	movs	r2, #0
 8019a68:	f002 f82f 	bl	801baca <USBD_LL_Transmit>
 8019a6c:	e004      	b.n	8019a78 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8019a6e:	68fa      	ldr	r2, [r7, #12]
 8019a70:	2385      	movs	r3, #133	@ 0x85
 8019a72:	009b      	lsls	r3, r3, #2
 8019a74:	2100      	movs	r1, #0
 8019a76:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8019a78:	2300      	movs	r3, #0
 8019a7a:	e000      	b.n	8019a7e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8019a7c:	2302      	movs	r3, #2
  }
}
 8019a7e:	0018      	movs	r0, r3
 8019a80:	46bd      	mov	sp, r7
 8019a82:	b004      	add	sp, #16
 8019a84:	bd80      	pop	{r7, pc}

08019a86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8019a86:	b580      	push	{r7, lr}
 8019a88:	b084      	sub	sp, #16
 8019a8a:	af00      	add	r7, sp, #0
 8019a8c:	6078      	str	r0, [r7, #4]
 8019a8e:	000a      	movs	r2, r1
 8019a90:	1cfb      	adds	r3, r7, #3
 8019a92:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019a94:	687a      	ldr	r2, [r7, #4]
 8019a96:	23ae      	movs	r3, #174	@ 0xae
 8019a98:	009b      	lsls	r3, r3, #2
 8019a9a:	58d3      	ldr	r3, [r2, r3]
 8019a9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8019a9e:	1cfb      	adds	r3, r7, #3
 8019aa0:	781a      	ldrb	r2, [r3, #0]
 8019aa2:	687b      	ldr	r3, [r7, #4]
 8019aa4:	0011      	movs	r1, r2
 8019aa6:	0018      	movs	r0, r3
 8019aa8:	f002 f87d 	bl	801bba6 <USBD_LL_GetRxDataSize>
 8019aac:	0001      	movs	r1, r0
 8019aae:	68fa      	ldr	r2, [r7, #12]
 8019ab0:	2383      	movs	r3, #131	@ 0x83
 8019ab2:	009b      	lsls	r3, r3, #2
 8019ab4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8019ab6:	687a      	ldr	r2, [r7, #4]
 8019ab8:	23ae      	movs	r3, #174	@ 0xae
 8019aba:	009b      	lsls	r3, r3, #2
 8019abc:	58d3      	ldr	r3, [r2, r3]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d011      	beq.n	8019ae6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8019ac2:	687a      	ldr	r2, [r7, #4]
 8019ac4:	23af      	movs	r3, #175	@ 0xaf
 8019ac6:	009b      	lsls	r3, r3, #2
 8019ac8:	58d3      	ldr	r3, [r2, r3]
 8019aca:	68da      	ldr	r2, [r3, #12]
 8019acc:	68f9      	ldr	r1, [r7, #12]
 8019ace:	2381      	movs	r3, #129	@ 0x81
 8019ad0:	009b      	lsls	r3, r3, #2
 8019ad2:	58c8      	ldr	r0, [r1, r3]
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	2183      	movs	r1, #131	@ 0x83
 8019ad8:	0089      	lsls	r1, r1, #2
 8019ada:	468c      	mov	ip, r1
 8019adc:	4463      	add	r3, ip
 8019ade:	0019      	movs	r1, r3
 8019ae0:	4790      	blx	r2

    return USBD_OK;
 8019ae2:	2300      	movs	r3, #0
 8019ae4:	e000      	b.n	8019ae8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8019ae6:	2302      	movs	r3, #2
  }
}
 8019ae8:	0018      	movs	r0, r3
 8019aea:	46bd      	mov	sp, r7
 8019aec:	b004      	add	sp, #16
 8019aee:	bd80      	pop	{r7, pc}

08019af0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8019af0:	b590      	push	{r4, r7, lr}
 8019af2:	b085      	sub	sp, #20
 8019af4:	af00      	add	r7, sp, #0
 8019af6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	23ae      	movs	r3, #174	@ 0xae
 8019afc:	009b      	lsls	r3, r3, #2
 8019afe:	58d3      	ldr	r3, [r2, r3]
 8019b00:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8019b02:	687a      	ldr	r2, [r7, #4]
 8019b04:	23af      	movs	r3, #175	@ 0xaf
 8019b06:	009b      	lsls	r3, r3, #2
 8019b08:	58d3      	ldr	r3, [r2, r3]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d018      	beq.n	8019b40 <USBD_CDC_EP0_RxReady+0x50>
 8019b0e:	68fa      	ldr	r2, [r7, #12]
 8019b10:	2380      	movs	r3, #128	@ 0x80
 8019b12:	009b      	lsls	r3, r3, #2
 8019b14:	5cd3      	ldrb	r3, [r2, r3]
 8019b16:	2bff      	cmp	r3, #255	@ 0xff
 8019b18:	d012      	beq.n	8019b40 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019b1a:	687a      	ldr	r2, [r7, #4]
 8019b1c:	23af      	movs	r3, #175	@ 0xaf
 8019b1e:	009b      	lsls	r3, r3, #2
 8019b20:	58d3      	ldr	r3, [r2, r3]
 8019b22:	689b      	ldr	r3, [r3, #8]
 8019b24:	68f9      	ldr	r1, [r7, #12]
 8019b26:	2280      	movs	r2, #128	@ 0x80
 8019b28:	0092      	lsls	r2, r2, #2
 8019b2a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8019b2c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8019b2e:	68fa      	ldr	r2, [r7, #12]
 8019b30:	4c06      	ldr	r4, [pc, #24]	@ (8019b4c <USBD_CDC_EP0_RxReady+0x5c>)
 8019b32:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8019b34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8019b36:	68fa      	ldr	r2, [r7, #12]
 8019b38:	2380      	movs	r3, #128	@ 0x80
 8019b3a:	009b      	lsls	r3, r3, #2
 8019b3c:	21ff      	movs	r1, #255	@ 0xff
 8019b3e:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8019b40:	2300      	movs	r3, #0
}
 8019b42:	0018      	movs	r0, r3
 8019b44:	46bd      	mov	sp, r7
 8019b46:	b005      	add	sp, #20
 8019b48:	bd90      	pop	{r4, r7, pc}
 8019b4a:	46c0      	nop			@ (mov r8, r8)
 8019b4c:	00000201 	.word	0x00000201

08019b50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	2243      	movs	r2, #67	@ 0x43
 8019b5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8019b5e:	4b02      	ldr	r3, [pc, #8]	@ (8019b68 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8019b60:	0018      	movs	r0, r3
 8019b62:	46bd      	mov	sp, r7
 8019b64:	b002      	add	sp, #8
 8019b66:	bd80      	pop	{r7, pc}
 8019b68:	2000016c 	.word	0x2000016c

08019b6c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b082      	sub	sp, #8
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	2243      	movs	r2, #67	@ 0x43
 8019b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8019b7a:	4b02      	ldr	r3, [pc, #8]	@ (8019b84 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8019b7c:	0018      	movs	r0, r3
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	b002      	add	sp, #8
 8019b82:	bd80      	pop	{r7, pc}
 8019b84:	20000128 	.word	0x20000128

08019b88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b082      	sub	sp, #8
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2243      	movs	r2, #67	@ 0x43
 8019b94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8019b96:	4b02      	ldr	r3, [pc, #8]	@ (8019ba0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8019b98:	0018      	movs	r0, r3
 8019b9a:	46bd      	mov	sp, r7
 8019b9c:	b002      	add	sp, #8
 8019b9e:	bd80      	pop	{r7, pc}
 8019ba0:	200001b0 	.word	0x200001b0

08019ba4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b082      	sub	sp, #8
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	220a      	movs	r2, #10
 8019bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8019bb2:	4b02      	ldr	r3, [pc, #8]	@ (8019bbc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8019bb4:	0018      	movs	r0, r3
 8019bb6:	46bd      	mov	sp, r7
 8019bb8:	b002      	add	sp, #8
 8019bba:	bd80      	pop	{r7, pc}
 8019bbc:	200000e4 	.word	0x200000e4

08019bc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b084      	sub	sp, #16
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	6078      	str	r0, [r7, #4]
 8019bc8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8019bca:	200f      	movs	r0, #15
 8019bcc:	183b      	adds	r3, r7, r0
 8019bce:	2202      	movs	r2, #2
 8019bd0:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8019bd2:	683b      	ldr	r3, [r7, #0]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d007      	beq.n	8019be8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8019bd8:	687a      	ldr	r2, [r7, #4]
 8019bda:	23af      	movs	r3, #175	@ 0xaf
 8019bdc:	009b      	lsls	r3, r3, #2
 8019bde:	6839      	ldr	r1, [r7, #0]
 8019be0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8019be2:	183b      	adds	r3, r7, r0
 8019be4:	2200      	movs	r2, #0
 8019be6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8019be8:	230f      	movs	r3, #15
 8019bea:	18fb      	adds	r3, r7, r3
 8019bec:	781b      	ldrb	r3, [r3, #0]
}
 8019bee:	0018      	movs	r0, r3
 8019bf0:	46bd      	mov	sp, r7
 8019bf2:	b004      	add	sp, #16
 8019bf4:	bd80      	pop	{r7, pc}

08019bf6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8019bf6:	b580      	push	{r7, lr}
 8019bf8:	b086      	sub	sp, #24
 8019bfa:	af00      	add	r7, sp, #0
 8019bfc:	60f8      	str	r0, [r7, #12]
 8019bfe:	60b9      	str	r1, [r7, #8]
 8019c00:	1dbb      	adds	r3, r7, #6
 8019c02:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c04:	68fa      	ldr	r2, [r7, #12]
 8019c06:	23ae      	movs	r3, #174	@ 0xae
 8019c08:	009b      	lsls	r3, r3, #2
 8019c0a:	58d3      	ldr	r3, [r2, r3]
 8019c0c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8019c0e:	697a      	ldr	r2, [r7, #20]
 8019c10:	2382      	movs	r3, #130	@ 0x82
 8019c12:	009b      	lsls	r3, r3, #2
 8019c14:	68b9      	ldr	r1, [r7, #8]
 8019c16:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8019c18:	1dbb      	adds	r3, r7, #6
 8019c1a:	8819      	ldrh	r1, [r3, #0]
 8019c1c:	697a      	ldr	r2, [r7, #20]
 8019c1e:	2384      	movs	r3, #132	@ 0x84
 8019c20:	009b      	lsls	r3, r3, #2
 8019c22:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8019c24:	2300      	movs	r3, #0
}
 8019c26:	0018      	movs	r0, r3
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	b006      	add	sp, #24
 8019c2c:	bd80      	pop	{r7, pc}

08019c2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8019c2e:	b580      	push	{r7, lr}
 8019c30:	b084      	sub	sp, #16
 8019c32:	af00      	add	r7, sp, #0
 8019c34:	6078      	str	r0, [r7, #4]
 8019c36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c38:	687a      	ldr	r2, [r7, #4]
 8019c3a:	23ae      	movs	r3, #174	@ 0xae
 8019c3c:	009b      	lsls	r3, r3, #2
 8019c3e:	58d3      	ldr	r3, [r2, r3]
 8019c40:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8019c42:	68fa      	ldr	r2, [r7, #12]
 8019c44:	2381      	movs	r3, #129	@ 0x81
 8019c46:	009b      	lsls	r3, r3, #2
 8019c48:	6839      	ldr	r1, [r7, #0]
 8019c4a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8019c4c:	2300      	movs	r3, #0
}
 8019c4e:	0018      	movs	r0, r3
 8019c50:	46bd      	mov	sp, r7
 8019c52:	b004      	add	sp, #16
 8019c54:	bd80      	pop	{r7, pc}

08019c56 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8019c56:	b580      	push	{r7, lr}
 8019c58:	b084      	sub	sp, #16
 8019c5a:	af00      	add	r7, sp, #0
 8019c5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019c5e:	687a      	ldr	r2, [r7, #4]
 8019c60:	23ae      	movs	r3, #174	@ 0xae
 8019c62:	009b      	lsls	r3, r3, #2
 8019c64:	58d3      	ldr	r3, [r2, r3]
 8019c66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8019c68:	687a      	ldr	r2, [r7, #4]
 8019c6a:	23ae      	movs	r3, #174	@ 0xae
 8019c6c:	009b      	lsls	r3, r3, #2
 8019c6e:	58d3      	ldr	r3, [r2, r3]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d022      	beq.n	8019cba <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8019c74:	68fa      	ldr	r2, [r7, #12]
 8019c76:	2385      	movs	r3, #133	@ 0x85
 8019c78:	009b      	lsls	r3, r3, #2
 8019c7a:	58d3      	ldr	r3, [r2, r3]
 8019c7c:	2b00      	cmp	r3, #0
 8019c7e:	d11a      	bne.n	8019cb6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8019c80:	68fa      	ldr	r2, [r7, #12]
 8019c82:	2385      	movs	r3, #133	@ 0x85
 8019c84:	009b      	lsls	r3, r3, #2
 8019c86:	2101      	movs	r1, #1
 8019c88:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8019c8a:	68fa      	ldr	r2, [r7, #12]
 8019c8c:	2384      	movs	r3, #132	@ 0x84
 8019c8e:	009b      	lsls	r3, r3, #2
 8019c90:	58d2      	ldr	r2, [r2, r3]
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8019c96:	68fa      	ldr	r2, [r7, #12]
 8019c98:	2382      	movs	r3, #130	@ 0x82
 8019c9a:	009b      	lsls	r3, r3, #2
 8019c9c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8019c9e:	68fa      	ldr	r2, [r7, #12]
 8019ca0:	2384      	movs	r3, #132	@ 0x84
 8019ca2:	009b      	lsls	r3, r3, #2
 8019ca4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8019ca6:	b29b      	uxth	r3, r3
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	000a      	movs	r2, r1
 8019cac:	2181      	movs	r1, #129	@ 0x81
 8019cae:	f001 ff0c 	bl	801baca <USBD_LL_Transmit>

      return USBD_OK;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	e002      	b.n	8019cbc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8019cb6:	2301      	movs	r3, #1
 8019cb8:	e000      	b.n	8019cbc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8019cba:	2302      	movs	r3, #2
  }
}
 8019cbc:	0018      	movs	r0, r3
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	b004      	add	sp, #16
 8019cc2:	bd80      	pop	{r7, pc}

08019cc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b084      	sub	sp, #16
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019ccc:	687a      	ldr	r2, [r7, #4]
 8019cce:	23ae      	movs	r3, #174	@ 0xae
 8019cd0:	009b      	lsls	r3, r3, #2
 8019cd2:	58d3      	ldr	r3, [r2, r3]
 8019cd4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8019cd6:	687a      	ldr	r2, [r7, #4]
 8019cd8:	23ae      	movs	r3, #174	@ 0xae
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	58d3      	ldr	r3, [r2, r3]
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d019      	beq.n	8019d16 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	7c1b      	ldrb	r3, [r3, #16]
 8019ce6:	2b00      	cmp	r3, #0
 8019ce8:	d10a      	bne.n	8019d00 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019cea:	68fa      	ldr	r2, [r7, #12]
 8019cec:	2381      	movs	r3, #129	@ 0x81
 8019cee:	009b      	lsls	r3, r3, #2
 8019cf0:	58d2      	ldr	r2, [r2, r3]
 8019cf2:	2380      	movs	r3, #128	@ 0x80
 8019cf4:	009b      	lsls	r3, r3, #2
 8019cf6:	6878      	ldr	r0, [r7, #4]
 8019cf8:	2101      	movs	r1, #1
 8019cfa:	f001 ff1d 	bl	801bb38 <USBD_LL_PrepareReceive>
 8019cfe:	e008      	b.n	8019d12 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8019d00:	68fa      	ldr	r2, [r7, #12]
 8019d02:	2381      	movs	r3, #129	@ 0x81
 8019d04:	009b      	lsls	r3, r3, #2
 8019d06:	58d2      	ldr	r2, [r2, r3]
 8019d08:	6878      	ldr	r0, [r7, #4]
 8019d0a:	2340      	movs	r3, #64	@ 0x40
 8019d0c:	2101      	movs	r1, #1
 8019d0e:	f001 ff13 	bl	801bb38 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8019d12:	2300      	movs	r3, #0
 8019d14:	e000      	b.n	8019d18 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8019d16:	2302      	movs	r3, #2
  }
}
 8019d18:	0018      	movs	r0, r3
 8019d1a:	46bd      	mov	sp, r7
 8019d1c:	b004      	add	sp, #16
 8019d1e:	bd80      	pop	{r7, pc}

08019d20 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b084      	sub	sp, #16
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	60f8      	str	r0, [r7, #12]
 8019d28:	60b9      	str	r1, [r7, #8]
 8019d2a:	1dfb      	adds	r3, r7, #7
 8019d2c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d101      	bne.n	8019d38 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8019d34:	2302      	movs	r3, #2
 8019d36:	e020      	b.n	8019d7a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8019d38:	68fa      	ldr	r2, [r7, #12]
 8019d3a:	23ad      	movs	r3, #173	@ 0xad
 8019d3c:	009b      	lsls	r3, r3, #2
 8019d3e:	58d3      	ldr	r3, [r2, r3]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d004      	beq.n	8019d4e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8019d44:	68fa      	ldr	r2, [r7, #12]
 8019d46:	23ad      	movs	r3, #173	@ 0xad
 8019d48:	009b      	lsls	r3, r3, #2
 8019d4a:	2100      	movs	r1, #0
 8019d4c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8019d4e:	68bb      	ldr	r3, [r7, #8]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d004      	beq.n	8019d5e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8019d54:	68fa      	ldr	r2, [r7, #12]
 8019d56:	23ac      	movs	r3, #172	@ 0xac
 8019d58:	009b      	lsls	r3, r3, #2
 8019d5a:	68b9      	ldr	r1, [r7, #8]
 8019d5c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8019d5e:	68fa      	ldr	r2, [r7, #12]
 8019d60:	23a7      	movs	r3, #167	@ 0xa7
 8019d62:	009b      	lsls	r3, r3, #2
 8019d64:	2101      	movs	r1, #1
 8019d66:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	1dfa      	adds	r2, r7, #7
 8019d6c:	7812      	ldrb	r2, [r2, #0]
 8019d6e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	0018      	movs	r0, r3
 8019d74:	f001 fd0c 	bl	801b790 <USBD_LL_Init>

  return USBD_OK;
 8019d78:	2300      	movs	r3, #0
}
 8019d7a:	0018      	movs	r0, r3
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	b004      	add	sp, #16
 8019d80:	bd80      	pop	{r7, pc}

08019d82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8019d82:	b580      	push	{r7, lr}
 8019d84:	b084      	sub	sp, #16
 8019d86:	af00      	add	r7, sp, #0
 8019d88:	6078      	str	r0, [r7, #4]
 8019d8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8019d8c:	200f      	movs	r0, #15
 8019d8e:	183b      	adds	r3, r7, r0
 8019d90:	2200      	movs	r2, #0
 8019d92:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d008      	beq.n	8019dac <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8019d9a:	687a      	ldr	r2, [r7, #4]
 8019d9c:	23ad      	movs	r3, #173	@ 0xad
 8019d9e:	009b      	lsls	r3, r3, #2
 8019da0:	6839      	ldr	r1, [r7, #0]
 8019da2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8019da4:	183b      	adds	r3, r7, r0
 8019da6:	2200      	movs	r2, #0
 8019da8:	701a      	strb	r2, [r3, #0]
 8019daa:	e003      	b.n	8019db4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8019dac:	230f      	movs	r3, #15
 8019dae:	18fb      	adds	r3, r7, r3
 8019db0:	2202      	movs	r2, #2
 8019db2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8019db4:	230f      	movs	r3, #15
 8019db6:	18fb      	adds	r3, r7, r3
 8019db8:	781b      	ldrb	r3, [r3, #0]
}
 8019dba:	0018      	movs	r0, r3
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	b004      	add	sp, #16
 8019dc0:	bd80      	pop	{r7, pc}

08019dc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8019dc2:	b580      	push	{r7, lr}
 8019dc4:	b082      	sub	sp, #8
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	0018      	movs	r0, r3
 8019dce:	f001 fd43 	bl	801b858 <USBD_LL_Start>

  return USBD_OK;
 8019dd2:	2300      	movs	r3, #0
}
 8019dd4:	0018      	movs	r0, r3
 8019dd6:	46bd      	mov	sp, r7
 8019dd8:	b002      	add	sp, #8
 8019dda:	bd80      	pop	{r7, pc}

08019ddc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b082      	sub	sp, #8
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8019de4:	2300      	movs	r3, #0
}
 8019de6:	0018      	movs	r0, r3
 8019de8:	46bd      	mov	sp, r7
 8019dea:	b002      	add	sp, #8
 8019dec:	bd80      	pop	{r7, pc}

08019dee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8019dee:	b590      	push	{r4, r7, lr}
 8019df0:	b085      	sub	sp, #20
 8019df2:	af00      	add	r7, sp, #0
 8019df4:	6078      	str	r0, [r7, #4]
 8019df6:	000a      	movs	r2, r1
 8019df8:	1cfb      	adds	r3, r7, #3
 8019dfa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8019dfc:	240f      	movs	r4, #15
 8019dfe:	193b      	adds	r3, r7, r4
 8019e00:	2202      	movs	r2, #2
 8019e02:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8019e04:	687a      	ldr	r2, [r7, #4]
 8019e06:	23ad      	movs	r3, #173	@ 0xad
 8019e08:	009b      	lsls	r3, r3, #2
 8019e0a:	58d3      	ldr	r3, [r2, r3]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d00e      	beq.n	8019e2e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8019e10:	687a      	ldr	r2, [r7, #4]
 8019e12:	23ad      	movs	r3, #173	@ 0xad
 8019e14:	009b      	lsls	r3, r3, #2
 8019e16:	58d3      	ldr	r3, [r2, r3]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	1cfa      	adds	r2, r7, #3
 8019e1c:	7811      	ldrb	r1, [r2, #0]
 8019e1e:	687a      	ldr	r2, [r7, #4]
 8019e20:	0010      	movs	r0, r2
 8019e22:	4798      	blx	r3
 8019e24:	1e03      	subs	r3, r0, #0
 8019e26:	d102      	bne.n	8019e2e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8019e28:	193b      	adds	r3, r7, r4
 8019e2a:	2200      	movs	r2, #0
 8019e2c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8019e2e:	230f      	movs	r3, #15
 8019e30:	18fb      	adds	r3, r7, r3
 8019e32:	781b      	ldrb	r3, [r3, #0]
}
 8019e34:	0018      	movs	r0, r3
 8019e36:	46bd      	mov	sp, r7
 8019e38:	b005      	add	sp, #20
 8019e3a:	bd90      	pop	{r4, r7, pc}

08019e3c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b082      	sub	sp, #8
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
 8019e44:	000a      	movs	r2, r1
 8019e46:	1cfb      	adds	r3, r7, #3
 8019e48:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8019e4a:	687a      	ldr	r2, [r7, #4]
 8019e4c:	23ad      	movs	r3, #173	@ 0xad
 8019e4e:	009b      	lsls	r3, r3, #2
 8019e50:	58d3      	ldr	r3, [r2, r3]
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	1cfa      	adds	r2, r7, #3
 8019e56:	7811      	ldrb	r1, [r2, #0]
 8019e58:	687a      	ldr	r2, [r7, #4]
 8019e5a:	0010      	movs	r0, r2
 8019e5c:	4798      	blx	r3

  return USBD_OK;
 8019e5e:	2300      	movs	r3, #0
}
 8019e60:	0018      	movs	r0, r3
 8019e62:	46bd      	mov	sp, r7
 8019e64:	b002      	add	sp, #8
 8019e66:	bd80      	pop	{r7, pc}

08019e68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b082      	sub	sp, #8
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
 8019e70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	22aa      	movs	r2, #170	@ 0xaa
 8019e76:	0092      	lsls	r2, r2, #2
 8019e78:	4694      	mov	ip, r2
 8019e7a:	4463      	add	r3, ip
 8019e7c:	683a      	ldr	r2, [r7, #0]
 8019e7e:	0011      	movs	r1, r2
 8019e80:	0018      	movs	r0, r3
 8019e82:	f001 f810 	bl	801aea6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8019e86:	687a      	ldr	r2, [r7, #4]
 8019e88:	23a5      	movs	r3, #165	@ 0xa5
 8019e8a:	009b      	lsls	r3, r3, #2
 8019e8c:	2101      	movs	r1, #1
 8019e8e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	4a23      	ldr	r2, [pc, #140]	@ (8019f20 <USBD_LL_SetupStage+0xb8>)
 8019e94:	5a9b      	ldrh	r3, [r3, r2]
 8019e96:	0019      	movs	r1, r3
 8019e98:	687a      	ldr	r2, [r7, #4]
 8019e9a:	23a6      	movs	r3, #166	@ 0xa6
 8019e9c:	009b      	lsls	r3, r3, #2
 8019e9e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8019ea0:	687a      	ldr	r2, [r7, #4]
 8019ea2:	23aa      	movs	r3, #170	@ 0xaa
 8019ea4:	009b      	lsls	r3, r3, #2
 8019ea6:	5cd3      	ldrb	r3, [r2, r3]
 8019ea8:	001a      	movs	r2, r3
 8019eaa:	231f      	movs	r3, #31
 8019eac:	4013      	ands	r3, r2
 8019eae:	2b02      	cmp	r3, #2
 8019eb0:	d019      	beq.n	8019ee6 <USBD_LL_SetupStage+0x7e>
 8019eb2:	d822      	bhi.n	8019efa <USBD_LL_SetupStage+0x92>
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d002      	beq.n	8019ebe <USBD_LL_SetupStage+0x56>
 8019eb8:	2b01      	cmp	r3, #1
 8019eba:	d00a      	beq.n	8019ed2 <USBD_LL_SetupStage+0x6a>
 8019ebc:	e01d      	b.n	8019efa <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	22aa      	movs	r2, #170	@ 0xaa
 8019ec2:	0092      	lsls	r2, r2, #2
 8019ec4:	189a      	adds	r2, r3, r2
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	0011      	movs	r1, r2
 8019eca:	0018      	movs	r0, r3
 8019ecc:	f000 fa10 	bl	801a2f0 <USBD_StdDevReq>
      break;
 8019ed0:	e020      	b.n	8019f14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	22aa      	movs	r2, #170	@ 0xaa
 8019ed6:	0092      	lsls	r2, r2, #2
 8019ed8:	189a      	adds	r2, r3, r2
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	0011      	movs	r1, r2
 8019ede:	0018      	movs	r0, r3
 8019ee0:	f000 fa78 	bl	801a3d4 <USBD_StdItfReq>
      break;
 8019ee4:	e016      	b.n	8019f14 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	22aa      	movs	r2, #170	@ 0xaa
 8019eea:	0092      	lsls	r2, r2, #2
 8019eec:	189a      	adds	r2, r3, r2
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	0011      	movs	r1, r2
 8019ef2:	0018      	movs	r0, r3
 8019ef4:	f000 fac5 	bl	801a482 <USBD_StdEPReq>
      break;
 8019ef8:	e00c      	b.n	8019f14 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8019efa:	687a      	ldr	r2, [r7, #4]
 8019efc:	23aa      	movs	r3, #170	@ 0xaa
 8019efe:	009b      	lsls	r3, r3, #2
 8019f00:	5cd3      	ldrb	r3, [r2, r3]
 8019f02:	227f      	movs	r2, #127	@ 0x7f
 8019f04:	4393      	bics	r3, r2
 8019f06:	b2da      	uxtb	r2, r3
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	0011      	movs	r1, r2
 8019f0c:	0018      	movs	r0, r3
 8019f0e:	f001 fd2a 	bl	801b966 <USBD_LL_StallEP>
      break;
 8019f12:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8019f14:	2300      	movs	r3, #0
}
 8019f16:	0018      	movs	r0, r3
 8019f18:	46bd      	mov	sp, r7
 8019f1a:	b002      	add	sp, #8
 8019f1c:	bd80      	pop	{r7, pc}
 8019f1e:	46c0      	nop			@ (mov r8, r8)
 8019f20:	000002ae 	.word	0x000002ae

08019f24 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b086      	sub	sp, #24
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	60f8      	str	r0, [r7, #12]
 8019f2c:	607a      	str	r2, [r7, #4]
 8019f2e:	200b      	movs	r0, #11
 8019f30:	183b      	adds	r3, r7, r0
 8019f32:	1c0a      	adds	r2, r1, #0
 8019f34:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8019f36:	183b      	adds	r3, r7, r0
 8019f38:	781b      	ldrb	r3, [r3, #0]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d154      	bne.n	8019fe8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	3355      	adds	r3, #85	@ 0x55
 8019f42:	33ff      	adds	r3, #255	@ 0xff
 8019f44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8019f46:	68fa      	ldr	r2, [r7, #12]
 8019f48:	23a5      	movs	r3, #165	@ 0xa5
 8019f4a:	009b      	lsls	r3, r3, #2
 8019f4c:	58d3      	ldr	r3, [r2, r3]
 8019f4e:	2b03      	cmp	r3, #3
 8019f50:	d139      	bne.n	8019fc6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8019f52:	697b      	ldr	r3, [r7, #20]
 8019f54:	68da      	ldr	r2, [r3, #12]
 8019f56:	697b      	ldr	r3, [r7, #20]
 8019f58:	691b      	ldr	r3, [r3, #16]
 8019f5a:	429a      	cmp	r2, r3
 8019f5c:	d919      	bls.n	8019f92 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8019f5e:	697b      	ldr	r3, [r7, #20]
 8019f60:	68da      	ldr	r2, [r3, #12]
 8019f62:	697b      	ldr	r3, [r7, #20]
 8019f64:	691b      	ldr	r3, [r3, #16]
 8019f66:	1ad2      	subs	r2, r2, r3
 8019f68:	697b      	ldr	r3, [r7, #20]
 8019f6a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f6c:	697b      	ldr	r3, [r7, #20]
 8019f6e:	68da      	ldr	r2, [r3, #12]
 8019f70:	697b      	ldr	r3, [r7, #20]
 8019f72:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8019f74:	429a      	cmp	r2, r3
 8019f76:	d203      	bcs.n	8019f80 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f78:	697b      	ldr	r3, [r7, #20]
 8019f7a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8019f7c:	b29b      	uxth	r3, r3
 8019f7e:	e002      	b.n	8019f86 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8019f84:	b29b      	uxth	r3, r3
 8019f86:	6879      	ldr	r1, [r7, #4]
 8019f88:	68f8      	ldr	r0, [r7, #12]
 8019f8a:	001a      	movs	r2, r3
 8019f8c:	f001 f898 	bl	801b0c0 <USBD_CtlContinueRx>
 8019f90:	e045      	b.n	801a01e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8019f92:	68fa      	ldr	r2, [r7, #12]
 8019f94:	23ad      	movs	r3, #173	@ 0xad
 8019f96:	009b      	lsls	r3, r3, #2
 8019f98:	58d3      	ldr	r3, [r2, r3]
 8019f9a:	691b      	ldr	r3, [r3, #16]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d00d      	beq.n	8019fbc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019fa0:	68fa      	ldr	r2, [r7, #12]
 8019fa2:	23a7      	movs	r3, #167	@ 0xa7
 8019fa4:	009b      	lsls	r3, r3, #2
 8019fa6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8019fa8:	2b03      	cmp	r3, #3
 8019faa:	d107      	bne.n	8019fbc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8019fac:	68fa      	ldr	r2, [r7, #12]
 8019fae:	23ad      	movs	r3, #173	@ 0xad
 8019fb0:	009b      	lsls	r3, r3, #2
 8019fb2:	58d3      	ldr	r3, [r2, r3]
 8019fb4:	691b      	ldr	r3, [r3, #16]
 8019fb6:	68fa      	ldr	r2, [r7, #12]
 8019fb8:	0010      	movs	r0, r2
 8019fba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	0018      	movs	r0, r3
 8019fc0:	f001 f891 	bl	801b0e6 <USBD_CtlSendStatus>
 8019fc4:	e02b      	b.n	801a01e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8019fc6:	68fa      	ldr	r2, [r7, #12]
 8019fc8:	23a5      	movs	r3, #165	@ 0xa5
 8019fca:	009b      	lsls	r3, r3, #2
 8019fcc:	58d3      	ldr	r3, [r2, r3]
 8019fce:	2b05      	cmp	r3, #5
 8019fd0:	d125      	bne.n	801a01e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8019fd2:	68fa      	ldr	r2, [r7, #12]
 8019fd4:	23a5      	movs	r3, #165	@ 0xa5
 8019fd6:	009b      	lsls	r3, r3, #2
 8019fd8:	2100      	movs	r1, #0
 8019fda:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	2100      	movs	r1, #0
 8019fe0:	0018      	movs	r0, r3
 8019fe2:	f001 fcc0 	bl	801b966 <USBD_LL_StallEP>
 8019fe6:	e01a      	b.n	801a01e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8019fe8:	68fa      	ldr	r2, [r7, #12]
 8019fea:	23ad      	movs	r3, #173	@ 0xad
 8019fec:	009b      	lsls	r3, r3, #2
 8019fee:	58d3      	ldr	r3, [r2, r3]
 8019ff0:	699b      	ldr	r3, [r3, #24]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d011      	beq.n	801a01a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8019ff6:	68fa      	ldr	r2, [r7, #12]
 8019ff8:	23a7      	movs	r3, #167	@ 0xa7
 8019ffa:	009b      	lsls	r3, r3, #2
 8019ffc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8019ffe:	2b03      	cmp	r3, #3
 801a000:	d10b      	bne.n	801a01a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801a002:	68fa      	ldr	r2, [r7, #12]
 801a004:	23ad      	movs	r3, #173	@ 0xad
 801a006:	009b      	lsls	r3, r3, #2
 801a008:	58d3      	ldr	r3, [r2, r3]
 801a00a:	699b      	ldr	r3, [r3, #24]
 801a00c:	220b      	movs	r2, #11
 801a00e:	18ba      	adds	r2, r7, r2
 801a010:	7811      	ldrb	r1, [r2, #0]
 801a012:	68fa      	ldr	r2, [r7, #12]
 801a014:	0010      	movs	r0, r2
 801a016:	4798      	blx	r3
 801a018:	e001      	b.n	801a01e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801a01a:	2302      	movs	r3, #2
 801a01c:	e000      	b.n	801a020 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801a01e:	2300      	movs	r3, #0
}
 801a020:	0018      	movs	r0, r3
 801a022:	46bd      	mov	sp, r7
 801a024:	b006      	add	sp, #24
 801a026:	bd80      	pop	{r7, pc}

0801a028 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b086      	sub	sp, #24
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	60f8      	str	r0, [r7, #12]
 801a030:	607a      	str	r2, [r7, #4]
 801a032:	200b      	movs	r0, #11
 801a034:	183b      	adds	r3, r7, r0
 801a036:	1c0a      	adds	r2, r1, #0
 801a038:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801a03a:	183b      	adds	r3, r7, r0
 801a03c:	781b      	ldrb	r3, [r3, #0]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d000      	beq.n	801a044 <USBD_LL_DataInStage+0x1c>
 801a042:	e08e      	b.n	801a162 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	3314      	adds	r3, #20
 801a048:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a04a:	68fa      	ldr	r2, [r7, #12]
 801a04c:	23a5      	movs	r3, #165	@ 0xa5
 801a04e:	009b      	lsls	r3, r3, #2
 801a050:	58d3      	ldr	r3, [r2, r3]
 801a052:	2b02      	cmp	r3, #2
 801a054:	d164      	bne.n	801a120 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801a056:	697b      	ldr	r3, [r7, #20]
 801a058:	68da      	ldr	r2, [r3, #12]
 801a05a:	697b      	ldr	r3, [r7, #20]
 801a05c:	691b      	ldr	r3, [r3, #16]
 801a05e:	429a      	cmp	r2, r3
 801a060:	d915      	bls.n	801a08e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801a062:	697b      	ldr	r3, [r7, #20]
 801a064:	68da      	ldr	r2, [r3, #12]
 801a066:	697b      	ldr	r3, [r7, #20]
 801a068:	691b      	ldr	r3, [r3, #16]
 801a06a:	1ad2      	subs	r2, r2, r3
 801a06c:	697b      	ldr	r3, [r7, #20]
 801a06e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801a070:	697b      	ldr	r3, [r7, #20]
 801a072:	68db      	ldr	r3, [r3, #12]
 801a074:	b29a      	uxth	r2, r3
 801a076:	6879      	ldr	r1, [r7, #4]
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	0018      	movs	r0, r3
 801a07c:	f000 ffe9 	bl	801b052 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a080:	68f8      	ldr	r0, [r7, #12]
 801a082:	2300      	movs	r3, #0
 801a084:	2200      	movs	r2, #0
 801a086:	2100      	movs	r1, #0
 801a088:	f001 fd56 	bl	801bb38 <USBD_LL_PrepareReceive>
 801a08c:	e059      	b.n	801a142 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a08e:	697b      	ldr	r3, [r7, #20]
 801a090:	689a      	ldr	r2, [r3, #8]
 801a092:	697b      	ldr	r3, [r7, #20]
 801a094:	691b      	ldr	r3, [r3, #16]
 801a096:	0019      	movs	r1, r3
 801a098:	0010      	movs	r0, r2
 801a09a:	f7e6 f909 	bl	80002b0 <__aeabi_uidivmod>
 801a09e:	1e0b      	subs	r3, r1, #0
 801a0a0:	d11f      	bne.n	801a0e2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801a0a2:	697b      	ldr	r3, [r7, #20]
 801a0a4:	689a      	ldr	r2, [r3, #8]
 801a0a6:	697b      	ldr	r3, [r7, #20]
 801a0a8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a0aa:	429a      	cmp	r2, r3
 801a0ac:	d319      	bcc.n	801a0e2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801a0ae:	697b      	ldr	r3, [r7, #20]
 801a0b0:	689a      	ldr	r2, [r3, #8]
 801a0b2:	68f9      	ldr	r1, [r7, #12]
 801a0b4:	23a6      	movs	r3, #166	@ 0xa6
 801a0b6:	009b      	lsls	r3, r3, #2
 801a0b8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801a0ba:	429a      	cmp	r2, r3
 801a0bc:	d211      	bcs.n	801a0e2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	2100      	movs	r1, #0
 801a0c4:	0018      	movs	r0, r3
 801a0c6:	f000 ffc4 	bl	801b052 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a0ca:	68fa      	ldr	r2, [r7, #12]
 801a0cc:	23a6      	movs	r3, #166	@ 0xa6
 801a0ce:	009b      	lsls	r3, r3, #2
 801a0d0:	2100      	movs	r1, #0
 801a0d2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a0d4:	68f8      	ldr	r0, [r7, #12]
 801a0d6:	2300      	movs	r3, #0
 801a0d8:	2200      	movs	r2, #0
 801a0da:	2100      	movs	r1, #0
 801a0dc:	f001 fd2c 	bl	801bb38 <USBD_LL_PrepareReceive>
 801a0e0:	e02f      	b.n	801a142 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a0e2:	68fa      	ldr	r2, [r7, #12]
 801a0e4:	23ad      	movs	r3, #173	@ 0xad
 801a0e6:	009b      	lsls	r3, r3, #2
 801a0e8:	58d3      	ldr	r3, [r2, r3]
 801a0ea:	68db      	ldr	r3, [r3, #12]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d00d      	beq.n	801a10c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a0f0:	68fa      	ldr	r2, [r7, #12]
 801a0f2:	23a7      	movs	r3, #167	@ 0xa7
 801a0f4:	009b      	lsls	r3, r3, #2
 801a0f6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a0f8:	2b03      	cmp	r3, #3
 801a0fa:	d107      	bne.n	801a10c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801a0fc:	68fa      	ldr	r2, [r7, #12]
 801a0fe:	23ad      	movs	r3, #173	@ 0xad
 801a100:	009b      	lsls	r3, r3, #2
 801a102:	58d3      	ldr	r3, [r2, r3]
 801a104:	68db      	ldr	r3, [r3, #12]
 801a106:	68fa      	ldr	r2, [r7, #12]
 801a108:	0010      	movs	r0, r2
 801a10a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	2180      	movs	r1, #128	@ 0x80
 801a110:	0018      	movs	r0, r3
 801a112:	f001 fc28 	bl	801b966 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	0018      	movs	r0, r3
 801a11a:	f000 fff8 	bl	801b10e <USBD_CtlReceiveStatus>
 801a11e:	e010      	b.n	801a142 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a120:	68fa      	ldr	r2, [r7, #12]
 801a122:	23a5      	movs	r3, #165	@ 0xa5
 801a124:	009b      	lsls	r3, r3, #2
 801a126:	58d3      	ldr	r3, [r2, r3]
 801a128:	2b04      	cmp	r3, #4
 801a12a:	d005      	beq.n	801a138 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801a12c:	68fa      	ldr	r2, [r7, #12]
 801a12e:	23a5      	movs	r3, #165	@ 0xa5
 801a130:	009b      	lsls	r3, r3, #2
 801a132:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a134:	2b00      	cmp	r3, #0
 801a136:	d104      	bne.n	801a142 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	2180      	movs	r1, #128	@ 0x80
 801a13c:	0018      	movs	r0, r3
 801a13e:	f001 fc12 	bl	801b966 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801a142:	68fa      	ldr	r2, [r7, #12]
 801a144:	23a8      	movs	r3, #168	@ 0xa8
 801a146:	009b      	lsls	r3, r3, #2
 801a148:	5cd3      	ldrb	r3, [r2, r3]
 801a14a:	2b01      	cmp	r3, #1
 801a14c:	d124      	bne.n	801a198 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801a14e:	68fb      	ldr	r3, [r7, #12]
 801a150:	0018      	movs	r0, r3
 801a152:	f7ff fe43 	bl	8019ddc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a156:	68fa      	ldr	r2, [r7, #12]
 801a158:	23a8      	movs	r3, #168	@ 0xa8
 801a15a:	009b      	lsls	r3, r3, #2
 801a15c:	2100      	movs	r1, #0
 801a15e:	54d1      	strb	r1, [r2, r3]
 801a160:	e01a      	b.n	801a198 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801a162:	68fa      	ldr	r2, [r7, #12]
 801a164:	23ad      	movs	r3, #173	@ 0xad
 801a166:	009b      	lsls	r3, r3, #2
 801a168:	58d3      	ldr	r3, [r2, r3]
 801a16a:	695b      	ldr	r3, [r3, #20]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d011      	beq.n	801a194 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a170:	68fa      	ldr	r2, [r7, #12]
 801a172:	23a7      	movs	r3, #167	@ 0xa7
 801a174:	009b      	lsls	r3, r3, #2
 801a176:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801a178:	2b03      	cmp	r3, #3
 801a17a:	d10b      	bne.n	801a194 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801a17c:	68fa      	ldr	r2, [r7, #12]
 801a17e:	23ad      	movs	r3, #173	@ 0xad
 801a180:	009b      	lsls	r3, r3, #2
 801a182:	58d3      	ldr	r3, [r2, r3]
 801a184:	695b      	ldr	r3, [r3, #20]
 801a186:	220b      	movs	r2, #11
 801a188:	18ba      	adds	r2, r7, r2
 801a18a:	7811      	ldrb	r1, [r2, #0]
 801a18c:	68fa      	ldr	r2, [r7, #12]
 801a18e:	0010      	movs	r0, r2
 801a190:	4798      	blx	r3
 801a192:	e001      	b.n	801a198 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801a194:	2302      	movs	r3, #2
 801a196:	e000      	b.n	801a19a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801a198:	2300      	movs	r3, #0
}
 801a19a:	0018      	movs	r0, r3
 801a19c:	46bd      	mov	sp, r7
 801a19e:	b006      	add	sp, #24
 801a1a0:	bd80      	pop	{r7, pc}

0801a1a2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801a1a2:	b580      	push	{r7, lr}
 801a1a4:	b082      	sub	sp, #8
 801a1a6:	af00      	add	r7, sp, #0
 801a1a8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a1aa:	6878      	ldr	r0, [r7, #4]
 801a1ac:	2340      	movs	r3, #64	@ 0x40
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	2100      	movs	r1, #0
 801a1b2:	f001 fb76 	bl	801b8a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801a1b6:	687a      	ldr	r2, [r7, #4]
 801a1b8:	23ac      	movs	r3, #172	@ 0xac
 801a1ba:	005b      	lsls	r3, r3, #1
 801a1bc:	2101      	movs	r1, #1
 801a1be:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801a1c0:	687a      	ldr	r2, [r7, #4]
 801a1c2:	23b2      	movs	r3, #178	@ 0xb2
 801a1c4:	005b      	lsls	r3, r3, #1
 801a1c6:	2140      	movs	r1, #64	@ 0x40
 801a1c8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801a1ca:	6878      	ldr	r0, [r7, #4]
 801a1cc:	2340      	movs	r3, #64	@ 0x40
 801a1ce:	2200      	movs	r2, #0
 801a1d0:	2180      	movs	r1, #128	@ 0x80
 801a1d2:	f001 fb66 	bl	801b8a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	2201      	movs	r2, #1
 801a1da:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	2240      	movs	r2, #64	@ 0x40
 801a1e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a1e2:	687a      	ldr	r2, [r7, #4]
 801a1e4:	23a7      	movs	r3, #167	@ 0xa7
 801a1e6:	009b      	lsls	r3, r3, #2
 801a1e8:	2101      	movs	r1, #1
 801a1ea:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801a1ec:	687a      	ldr	r2, [r7, #4]
 801a1ee:	23a5      	movs	r3, #165	@ 0xa5
 801a1f0:	009b      	lsls	r3, r3, #2
 801a1f2:	2100      	movs	r1, #0
 801a1f4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801a1fc:	687a      	ldr	r2, [r7, #4]
 801a1fe:	23a9      	movs	r3, #169	@ 0xa9
 801a200:	009b      	lsls	r3, r3, #2
 801a202:	2100      	movs	r1, #0
 801a204:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801a206:	687a      	ldr	r2, [r7, #4]
 801a208:	23ae      	movs	r3, #174	@ 0xae
 801a20a:	009b      	lsls	r3, r3, #2
 801a20c:	58d3      	ldr	r3, [r2, r3]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d00a      	beq.n	801a228 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801a212:	687a      	ldr	r2, [r7, #4]
 801a214:	23ad      	movs	r3, #173	@ 0xad
 801a216:	009b      	lsls	r3, r3, #2
 801a218:	58d3      	ldr	r3, [r2, r3]
 801a21a:	685a      	ldr	r2, [r3, #4]
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	685b      	ldr	r3, [r3, #4]
 801a220:	b2d9      	uxtb	r1, r3
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	0018      	movs	r0, r3
 801a226:	4790      	blx	r2
  }

  return USBD_OK;
 801a228:	2300      	movs	r3, #0
}
 801a22a:	0018      	movs	r0, r3
 801a22c:	46bd      	mov	sp, r7
 801a22e:	b002      	add	sp, #8
 801a230:	bd80      	pop	{r7, pc}

0801a232 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801a232:	b580      	push	{r7, lr}
 801a234:	b082      	sub	sp, #8
 801a236:	af00      	add	r7, sp, #0
 801a238:	6078      	str	r0, [r7, #4]
 801a23a:	000a      	movs	r2, r1
 801a23c:	1cfb      	adds	r3, r7, #3
 801a23e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	1cfa      	adds	r2, r7, #3
 801a244:	7812      	ldrb	r2, [r2, #0]
 801a246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801a248:	2300      	movs	r3, #0
}
 801a24a:	0018      	movs	r0, r3
 801a24c:	46bd      	mov	sp, r7
 801a24e:	b002      	add	sp, #8
 801a250:	bd80      	pop	{r7, pc}
	...

0801a254 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b082      	sub	sp, #8
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801a25c:	687a      	ldr	r2, [r7, #4]
 801a25e:	23a7      	movs	r3, #167	@ 0xa7
 801a260:	009b      	lsls	r3, r3, #2
 801a262:	5cd1      	ldrb	r1, [r2, r3]
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	4a06      	ldr	r2, [pc, #24]	@ (801a280 <USBD_LL_Suspend+0x2c>)
 801a268:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	23a7      	movs	r3, #167	@ 0xa7
 801a26e:	009b      	lsls	r3, r3, #2
 801a270:	2104      	movs	r1, #4
 801a272:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801a274:	2300      	movs	r3, #0
}
 801a276:	0018      	movs	r0, r3
 801a278:	46bd      	mov	sp, r7
 801a27a:	b002      	add	sp, #8
 801a27c:	bd80      	pop	{r7, pc}
 801a27e:	46c0      	nop			@ (mov r8, r8)
 801a280:	0000029d 	.word	0x0000029d

0801a284 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801a284:	b580      	push	{r7, lr}
 801a286:	b082      	sub	sp, #8
 801a288:	af00      	add	r7, sp, #0
 801a28a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801a28c:	687a      	ldr	r2, [r7, #4]
 801a28e:	23a7      	movs	r3, #167	@ 0xa7
 801a290:	009b      	lsls	r3, r3, #2
 801a292:	5cd3      	ldrb	r3, [r2, r3]
 801a294:	2b04      	cmp	r3, #4
 801a296:	d106      	bne.n	801a2a6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	4a05      	ldr	r2, [pc, #20]	@ (801a2b0 <USBD_LL_Resume+0x2c>)
 801a29c:	5c99      	ldrb	r1, [r3, r2]
 801a29e:	687a      	ldr	r2, [r7, #4]
 801a2a0:	23a7      	movs	r3, #167	@ 0xa7
 801a2a2:	009b      	lsls	r3, r3, #2
 801a2a4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801a2a6:	2300      	movs	r3, #0
}
 801a2a8:	0018      	movs	r0, r3
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	b002      	add	sp, #8
 801a2ae:	bd80      	pop	{r7, pc}
 801a2b0:	0000029d 	.word	0x0000029d

0801a2b4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801a2b4:	b580      	push	{r7, lr}
 801a2b6:	b082      	sub	sp, #8
 801a2b8:	af00      	add	r7, sp, #0
 801a2ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a2bc:	687a      	ldr	r2, [r7, #4]
 801a2be:	23a7      	movs	r3, #167	@ 0xa7
 801a2c0:	009b      	lsls	r3, r3, #2
 801a2c2:	5cd3      	ldrb	r3, [r2, r3]
 801a2c4:	2b03      	cmp	r3, #3
 801a2c6:	d10e      	bne.n	801a2e6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801a2c8:	687a      	ldr	r2, [r7, #4]
 801a2ca:	23ad      	movs	r3, #173	@ 0xad
 801a2cc:	009b      	lsls	r3, r3, #2
 801a2ce:	58d3      	ldr	r3, [r2, r3]
 801a2d0:	69db      	ldr	r3, [r3, #28]
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	d007      	beq.n	801a2e6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801a2d6:	687a      	ldr	r2, [r7, #4]
 801a2d8:	23ad      	movs	r3, #173	@ 0xad
 801a2da:	009b      	lsls	r3, r3, #2
 801a2dc:	58d3      	ldr	r3, [r2, r3]
 801a2de:	69db      	ldr	r3, [r3, #28]
 801a2e0:	687a      	ldr	r2, [r7, #4]
 801a2e2:	0010      	movs	r0, r2
 801a2e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801a2e6:	2300      	movs	r3, #0
}
 801a2e8:	0018      	movs	r0, r3
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	b002      	add	sp, #8
 801a2ee:	bd80      	pop	{r7, pc}

0801a2f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b084      	sub	sp, #16
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
 801a2f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a2fa:	230f      	movs	r3, #15
 801a2fc:	18fb      	adds	r3, r7, r3
 801a2fe:	2200      	movs	r2, #0
 801a300:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a302:	683b      	ldr	r3, [r7, #0]
 801a304:	781b      	ldrb	r3, [r3, #0]
 801a306:	001a      	movs	r2, r3
 801a308:	2360      	movs	r3, #96	@ 0x60
 801a30a:	4013      	ands	r3, r2
 801a30c:	2b40      	cmp	r3, #64	@ 0x40
 801a30e:	d004      	beq.n	801a31a <USBD_StdDevReq+0x2a>
 801a310:	d84f      	bhi.n	801a3b2 <USBD_StdDevReq+0xc2>
 801a312:	2b00      	cmp	r3, #0
 801a314:	d00b      	beq.n	801a32e <USBD_StdDevReq+0x3e>
 801a316:	2b20      	cmp	r3, #32
 801a318:	d14b      	bne.n	801a3b2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801a31a:	687a      	ldr	r2, [r7, #4]
 801a31c:	23ad      	movs	r3, #173	@ 0xad
 801a31e:	009b      	lsls	r3, r3, #2
 801a320:	58d3      	ldr	r3, [r2, r3]
 801a322:	689b      	ldr	r3, [r3, #8]
 801a324:	6839      	ldr	r1, [r7, #0]
 801a326:	687a      	ldr	r2, [r7, #4]
 801a328:	0010      	movs	r0, r2
 801a32a:	4798      	blx	r3
      break;
 801a32c:	e048      	b.n	801a3c0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a32e:	683b      	ldr	r3, [r7, #0]
 801a330:	785b      	ldrb	r3, [r3, #1]
 801a332:	2b09      	cmp	r3, #9
 801a334:	d835      	bhi.n	801a3a2 <USBD_StdDevReq+0xb2>
 801a336:	009a      	lsls	r2, r3, #2
 801a338:	4b25      	ldr	r3, [pc, #148]	@ (801a3d0 <USBD_StdDevReq+0xe0>)
 801a33a:	18d3      	adds	r3, r2, r3
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801a340:	683a      	ldr	r2, [r7, #0]
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	0011      	movs	r1, r2
 801a346:	0018      	movs	r0, r3
 801a348:	f000 fa52 	bl	801a7f0 <USBD_GetDescriptor>
          break;
 801a34c:	e030      	b.n	801a3b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801a34e:	683a      	ldr	r2, [r7, #0]
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	0011      	movs	r1, r2
 801a354:	0018      	movs	r0, r3
 801a356:	f000 fbfd 	bl	801ab54 <USBD_SetAddress>
          break;
 801a35a:	e029      	b.n	801a3b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801a35c:	683a      	ldr	r2, [r7, #0]
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	0011      	movs	r1, r2
 801a362:	0018      	movs	r0, r3
 801a364:	f000 fc4a 	bl	801abfc <USBD_SetConfig>
          break;
 801a368:	e022      	b.n	801a3b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801a36a:	683a      	ldr	r2, [r7, #0]
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	0011      	movs	r1, r2
 801a370:	0018      	movs	r0, r3
 801a372:	f000 fce7 	bl	801ad44 <USBD_GetConfig>
          break;
 801a376:	e01b      	b.n	801a3b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801a378:	683a      	ldr	r2, [r7, #0]
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	0011      	movs	r1, r2
 801a37e:	0018      	movs	r0, r3
 801a380:	f000 fd1b 	bl	801adba <USBD_GetStatus>
          break;
 801a384:	e014      	b.n	801a3b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801a386:	683a      	ldr	r2, [r7, #0]
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	0011      	movs	r1, r2
 801a38c:	0018      	movs	r0, r3
 801a38e:	f000 fd4e 	bl	801ae2e <USBD_SetFeature>
          break;
 801a392:	e00d      	b.n	801a3b0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801a394:	683a      	ldr	r2, [r7, #0]
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	0011      	movs	r1, r2
 801a39a:	0018      	movs	r0, r3
 801a39c:	f000 fd5d 	bl	801ae5a <USBD_ClrFeature>
          break;
 801a3a0:	e006      	b.n	801a3b0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801a3a2:	683a      	ldr	r2, [r7, #0]
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	0011      	movs	r1, r2
 801a3a8:	0018      	movs	r0, r3
 801a3aa:	f000 fdb4 	bl	801af16 <USBD_CtlError>
          break;
 801a3ae:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a3b0:	e006      	b.n	801a3c0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801a3b2:	683a      	ldr	r2, [r7, #0]
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	0011      	movs	r1, r2
 801a3b8:	0018      	movs	r0, r3
 801a3ba:	f000 fdac 	bl	801af16 <USBD_CtlError>
      break;
 801a3be:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a3c0:	230f      	movs	r3, #15
 801a3c2:	18fb      	adds	r3, r7, r3
 801a3c4:	781b      	ldrb	r3, [r3, #0]
}
 801a3c6:	0018      	movs	r0, r3
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	b004      	add	sp, #16
 801a3cc:	bd80      	pop	{r7, pc}
 801a3ce:	46c0      	nop			@ (mov r8, r8)
 801a3d0:	080233e4 	.word	0x080233e4

0801a3d4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801a3d4:	b5b0      	push	{r4, r5, r7, lr}
 801a3d6:	b084      	sub	sp, #16
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
 801a3dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801a3de:	230f      	movs	r3, #15
 801a3e0:	18fb      	adds	r3, r7, r3
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a3e6:	683b      	ldr	r3, [r7, #0]
 801a3e8:	781b      	ldrb	r3, [r3, #0]
 801a3ea:	001a      	movs	r2, r3
 801a3ec:	2360      	movs	r3, #96	@ 0x60
 801a3ee:	4013      	ands	r3, r2
 801a3f0:	2b40      	cmp	r3, #64	@ 0x40
 801a3f2:	d004      	beq.n	801a3fe <USBD_StdItfReq+0x2a>
 801a3f4:	d839      	bhi.n	801a46a <USBD_StdItfReq+0x96>
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d001      	beq.n	801a3fe <USBD_StdItfReq+0x2a>
 801a3fa:	2b20      	cmp	r3, #32
 801a3fc:	d135      	bne.n	801a46a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801a3fe:	687a      	ldr	r2, [r7, #4]
 801a400:	23a7      	movs	r3, #167	@ 0xa7
 801a402:	009b      	lsls	r3, r3, #2
 801a404:	5cd3      	ldrb	r3, [r2, r3]
 801a406:	3b01      	subs	r3, #1
 801a408:	2b02      	cmp	r3, #2
 801a40a:	d825      	bhi.n	801a458 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801a40c:	683b      	ldr	r3, [r7, #0]
 801a40e:	889b      	ldrh	r3, [r3, #4]
 801a410:	b2db      	uxtb	r3, r3
 801a412:	2b01      	cmp	r3, #1
 801a414:	d819      	bhi.n	801a44a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a416:	687a      	ldr	r2, [r7, #4]
 801a418:	23ad      	movs	r3, #173	@ 0xad
 801a41a:	009b      	lsls	r3, r3, #2
 801a41c:	58d3      	ldr	r3, [r2, r3]
 801a41e:	689b      	ldr	r3, [r3, #8]
 801a420:	250f      	movs	r5, #15
 801a422:	197c      	adds	r4, r7, r5
 801a424:	6839      	ldr	r1, [r7, #0]
 801a426:	687a      	ldr	r2, [r7, #4]
 801a428:	0010      	movs	r0, r2
 801a42a:	4798      	blx	r3
 801a42c:	0003      	movs	r3, r0
 801a42e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801a430:	683b      	ldr	r3, [r7, #0]
 801a432:	88db      	ldrh	r3, [r3, #6]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d116      	bne.n	801a466 <USBD_StdItfReq+0x92>
 801a438:	197b      	adds	r3, r7, r5
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d112      	bne.n	801a466 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	0018      	movs	r0, r3
 801a444:	f000 fe4f 	bl	801b0e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801a448:	e00d      	b.n	801a466 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801a44a:	683a      	ldr	r2, [r7, #0]
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	0011      	movs	r1, r2
 801a450:	0018      	movs	r0, r3
 801a452:	f000 fd60 	bl	801af16 <USBD_CtlError>
          break;
 801a456:	e006      	b.n	801a466 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801a458:	683a      	ldr	r2, [r7, #0]
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	0011      	movs	r1, r2
 801a45e:	0018      	movs	r0, r3
 801a460:	f000 fd59 	bl	801af16 <USBD_CtlError>
          break;
 801a464:	e000      	b.n	801a468 <USBD_StdItfReq+0x94>
          break;
 801a466:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a468:	e006      	b.n	801a478 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801a46a:	683a      	ldr	r2, [r7, #0]
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	0011      	movs	r1, r2
 801a470:	0018      	movs	r0, r3
 801a472:	f000 fd50 	bl	801af16 <USBD_CtlError>
      break;
 801a476:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801a478:	2300      	movs	r3, #0
}
 801a47a:	0018      	movs	r0, r3
 801a47c:	46bd      	mov	sp, r7
 801a47e:	b004      	add	sp, #16
 801a480:	bdb0      	pop	{r4, r5, r7, pc}

0801a482 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801a482:	b5b0      	push	{r4, r5, r7, lr}
 801a484:	b084      	sub	sp, #16
 801a486:	af00      	add	r7, sp, #0
 801a488:	6078      	str	r0, [r7, #4]
 801a48a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801a48c:	230f      	movs	r3, #15
 801a48e:	18fb      	adds	r3, r7, r3
 801a490:	2200      	movs	r2, #0
 801a492:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	889a      	ldrh	r2, [r3, #4]
 801a498:	230e      	movs	r3, #14
 801a49a:	18fb      	adds	r3, r7, r3
 801a49c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	781b      	ldrb	r3, [r3, #0]
 801a4a2:	001a      	movs	r2, r3
 801a4a4:	2360      	movs	r3, #96	@ 0x60
 801a4a6:	4013      	ands	r3, r2
 801a4a8:	2b40      	cmp	r3, #64	@ 0x40
 801a4aa:	d006      	beq.n	801a4ba <USBD_StdEPReq+0x38>
 801a4ac:	d900      	bls.n	801a4b0 <USBD_StdEPReq+0x2e>
 801a4ae:	e190      	b.n	801a7d2 <USBD_StdEPReq+0x350>
 801a4b0:	2b00      	cmp	r3, #0
 801a4b2:	d00c      	beq.n	801a4ce <USBD_StdEPReq+0x4c>
 801a4b4:	2b20      	cmp	r3, #32
 801a4b6:	d000      	beq.n	801a4ba <USBD_StdEPReq+0x38>
 801a4b8:	e18b      	b.n	801a7d2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801a4ba:	687a      	ldr	r2, [r7, #4]
 801a4bc:	23ad      	movs	r3, #173	@ 0xad
 801a4be:	009b      	lsls	r3, r3, #2
 801a4c0:	58d3      	ldr	r3, [r2, r3]
 801a4c2:	689b      	ldr	r3, [r3, #8]
 801a4c4:	6839      	ldr	r1, [r7, #0]
 801a4c6:	687a      	ldr	r2, [r7, #4]
 801a4c8:	0010      	movs	r0, r2
 801a4ca:	4798      	blx	r3
      break;
 801a4cc:	e188      	b.n	801a7e0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	781b      	ldrb	r3, [r3, #0]
 801a4d2:	001a      	movs	r2, r3
 801a4d4:	2360      	movs	r3, #96	@ 0x60
 801a4d6:	4013      	ands	r3, r2
 801a4d8:	2b20      	cmp	r3, #32
 801a4da:	d10f      	bne.n	801a4fc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801a4dc:	687a      	ldr	r2, [r7, #4]
 801a4de:	23ad      	movs	r3, #173	@ 0xad
 801a4e0:	009b      	lsls	r3, r3, #2
 801a4e2:	58d3      	ldr	r3, [r2, r3]
 801a4e4:	689b      	ldr	r3, [r3, #8]
 801a4e6:	250f      	movs	r5, #15
 801a4e8:	197c      	adds	r4, r7, r5
 801a4ea:	6839      	ldr	r1, [r7, #0]
 801a4ec:	687a      	ldr	r2, [r7, #4]
 801a4ee:	0010      	movs	r0, r2
 801a4f0:	4798      	blx	r3
 801a4f2:	0003      	movs	r3, r0
 801a4f4:	7023      	strb	r3, [r4, #0]

        return ret;
 801a4f6:	197b      	adds	r3, r7, r5
 801a4f8:	781b      	ldrb	r3, [r3, #0]
 801a4fa:	e174      	b.n	801a7e6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801a4fc:	683b      	ldr	r3, [r7, #0]
 801a4fe:	785b      	ldrb	r3, [r3, #1]
 801a500:	2b03      	cmp	r3, #3
 801a502:	d007      	beq.n	801a514 <USBD_StdEPReq+0x92>
 801a504:	dd00      	ble.n	801a508 <USBD_StdEPReq+0x86>
 801a506:	e15c      	b.n	801a7c2 <USBD_StdEPReq+0x340>
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d100      	bne.n	801a50e <USBD_StdEPReq+0x8c>
 801a50c:	e092      	b.n	801a634 <USBD_StdEPReq+0x1b2>
 801a50e:	2b01      	cmp	r3, #1
 801a510:	d04b      	beq.n	801a5aa <USBD_StdEPReq+0x128>
 801a512:	e156      	b.n	801a7c2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	23a7      	movs	r3, #167	@ 0xa7
 801a518:	009b      	lsls	r3, r3, #2
 801a51a:	5cd3      	ldrb	r3, [r2, r3]
 801a51c:	2b02      	cmp	r3, #2
 801a51e:	d002      	beq.n	801a526 <USBD_StdEPReq+0xa4>
 801a520:	2b03      	cmp	r3, #3
 801a522:	d01d      	beq.n	801a560 <USBD_StdEPReq+0xde>
 801a524:	e039      	b.n	801a59a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a526:	220e      	movs	r2, #14
 801a528:	18bb      	adds	r3, r7, r2
 801a52a:	781b      	ldrb	r3, [r3, #0]
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d010      	beq.n	801a552 <USBD_StdEPReq+0xd0>
 801a530:	18bb      	adds	r3, r7, r2
 801a532:	781b      	ldrb	r3, [r3, #0]
 801a534:	2b80      	cmp	r3, #128	@ 0x80
 801a536:	d00c      	beq.n	801a552 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801a538:	18bb      	adds	r3, r7, r2
 801a53a:	781a      	ldrb	r2, [r3, #0]
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	0011      	movs	r1, r2
 801a540:	0018      	movs	r0, r3
 801a542:	f001 fa10 	bl	801b966 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	2180      	movs	r1, #128	@ 0x80
 801a54a:	0018      	movs	r0, r3
 801a54c:	f001 fa0b 	bl	801b966 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a550:	e02a      	b.n	801a5a8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801a552:	683a      	ldr	r2, [r7, #0]
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	0011      	movs	r1, r2
 801a558:	0018      	movs	r0, r3
 801a55a:	f000 fcdc 	bl	801af16 <USBD_CtlError>
              break;
 801a55e:	e023      	b.n	801a5a8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a560:	683b      	ldr	r3, [r7, #0]
 801a562:	885b      	ldrh	r3, [r3, #2]
 801a564:	2b00      	cmp	r3, #0
 801a566:	d113      	bne.n	801a590 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801a568:	220e      	movs	r2, #14
 801a56a:	18bb      	adds	r3, r7, r2
 801a56c:	781b      	ldrb	r3, [r3, #0]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d00e      	beq.n	801a590 <USBD_StdEPReq+0x10e>
 801a572:	18bb      	adds	r3, r7, r2
 801a574:	781b      	ldrb	r3, [r3, #0]
 801a576:	2b80      	cmp	r3, #128	@ 0x80
 801a578:	d00a      	beq.n	801a590 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801a57a:	683b      	ldr	r3, [r7, #0]
 801a57c:	88db      	ldrh	r3, [r3, #6]
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d106      	bne.n	801a590 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801a582:	18bb      	adds	r3, r7, r2
 801a584:	781a      	ldrb	r2, [r3, #0]
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	0011      	movs	r1, r2
 801a58a:	0018      	movs	r0, r3
 801a58c:	f001 f9eb 	bl	801b966 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	0018      	movs	r0, r3
 801a594:	f000 fda7 	bl	801b0e6 <USBD_CtlSendStatus>

              break;
 801a598:	e006      	b.n	801a5a8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801a59a:	683a      	ldr	r2, [r7, #0]
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	0011      	movs	r1, r2
 801a5a0:	0018      	movs	r0, r3
 801a5a2:	f000 fcb8 	bl	801af16 <USBD_CtlError>
              break;
 801a5a6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801a5a8:	e112      	b.n	801a7d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801a5aa:	687a      	ldr	r2, [r7, #4]
 801a5ac:	23a7      	movs	r3, #167	@ 0xa7
 801a5ae:	009b      	lsls	r3, r3, #2
 801a5b0:	5cd3      	ldrb	r3, [r2, r3]
 801a5b2:	2b02      	cmp	r3, #2
 801a5b4:	d002      	beq.n	801a5bc <USBD_StdEPReq+0x13a>
 801a5b6:	2b03      	cmp	r3, #3
 801a5b8:	d01d      	beq.n	801a5f6 <USBD_StdEPReq+0x174>
 801a5ba:	e032      	b.n	801a622 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a5bc:	220e      	movs	r2, #14
 801a5be:	18bb      	adds	r3, r7, r2
 801a5c0:	781b      	ldrb	r3, [r3, #0]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d010      	beq.n	801a5e8 <USBD_StdEPReq+0x166>
 801a5c6:	18bb      	adds	r3, r7, r2
 801a5c8:	781b      	ldrb	r3, [r3, #0]
 801a5ca:	2b80      	cmp	r3, #128	@ 0x80
 801a5cc:	d00c      	beq.n	801a5e8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801a5ce:	18bb      	adds	r3, r7, r2
 801a5d0:	781a      	ldrb	r2, [r3, #0]
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	0011      	movs	r1, r2
 801a5d6:	0018      	movs	r0, r3
 801a5d8:	f001 f9c5 	bl	801b966 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2180      	movs	r1, #128	@ 0x80
 801a5e0:	0018      	movs	r0, r3
 801a5e2:	f001 f9c0 	bl	801b966 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801a5e6:	e024      	b.n	801a632 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801a5e8:	683a      	ldr	r2, [r7, #0]
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	0011      	movs	r1, r2
 801a5ee:	0018      	movs	r0, r3
 801a5f0:	f000 fc91 	bl	801af16 <USBD_CtlError>
              break;
 801a5f4:	e01d      	b.n	801a632 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801a5f6:	683b      	ldr	r3, [r7, #0]
 801a5f8:	885b      	ldrh	r3, [r3, #2]
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d118      	bne.n	801a630 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801a5fe:	210e      	movs	r1, #14
 801a600:	187b      	adds	r3, r7, r1
 801a602:	781b      	ldrb	r3, [r3, #0]
 801a604:	227f      	movs	r2, #127	@ 0x7f
 801a606:	4013      	ands	r3, r2
 801a608:	d006      	beq.n	801a618 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801a60a:	187b      	adds	r3, r7, r1
 801a60c:	781a      	ldrb	r2, [r3, #0]
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	0011      	movs	r1, r2
 801a612:	0018      	movs	r0, r3
 801a614:	f001 f9d2 	bl	801b9bc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	0018      	movs	r0, r3
 801a61c:	f000 fd63 	bl	801b0e6 <USBD_CtlSendStatus>
              }
              break;
 801a620:	e006      	b.n	801a630 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801a622:	683a      	ldr	r2, [r7, #0]
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	0011      	movs	r1, r2
 801a628:	0018      	movs	r0, r3
 801a62a:	f000 fc74 	bl	801af16 <USBD_CtlError>
              break;
 801a62e:	e000      	b.n	801a632 <USBD_StdEPReq+0x1b0>
              break;
 801a630:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801a632:	e0cd      	b.n	801a7d0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801a634:	687a      	ldr	r2, [r7, #4]
 801a636:	23a7      	movs	r3, #167	@ 0xa7
 801a638:	009b      	lsls	r3, r3, #2
 801a63a:	5cd3      	ldrb	r3, [r2, r3]
 801a63c:	2b02      	cmp	r3, #2
 801a63e:	d002      	beq.n	801a646 <USBD_StdEPReq+0x1c4>
 801a640:	2b03      	cmp	r3, #3
 801a642:	d03c      	beq.n	801a6be <USBD_StdEPReq+0x23c>
 801a644:	e0b5      	b.n	801a7b2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801a646:	220e      	movs	r2, #14
 801a648:	18bb      	adds	r3, r7, r2
 801a64a:	781b      	ldrb	r3, [r3, #0]
 801a64c:	2b00      	cmp	r3, #0
 801a64e:	d00a      	beq.n	801a666 <USBD_StdEPReq+0x1e4>
 801a650:	18bb      	adds	r3, r7, r2
 801a652:	781b      	ldrb	r3, [r3, #0]
 801a654:	2b80      	cmp	r3, #128	@ 0x80
 801a656:	d006      	beq.n	801a666 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801a658:	683a      	ldr	r2, [r7, #0]
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	0011      	movs	r1, r2
 801a65e:	0018      	movs	r0, r3
 801a660:	f000 fc59 	bl	801af16 <USBD_CtlError>
                break;
 801a664:	e0ac      	b.n	801a7c0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a666:	220e      	movs	r2, #14
 801a668:	18bb      	adds	r3, r7, r2
 801a66a:	781b      	ldrb	r3, [r3, #0]
 801a66c:	b25b      	sxtb	r3, r3
 801a66e:	2b00      	cmp	r3, #0
 801a670:	da0c      	bge.n	801a68c <USBD_StdEPReq+0x20a>
 801a672:	18bb      	adds	r3, r7, r2
 801a674:	781b      	ldrb	r3, [r3, #0]
 801a676:	227f      	movs	r2, #127	@ 0x7f
 801a678:	401a      	ands	r2, r3
 801a67a:	0013      	movs	r3, r2
 801a67c:	009b      	lsls	r3, r3, #2
 801a67e:	189b      	adds	r3, r3, r2
 801a680:	009b      	lsls	r3, r3, #2
 801a682:	3310      	adds	r3, #16
 801a684:	687a      	ldr	r2, [r7, #4]
 801a686:	18d3      	adds	r3, r2, r3
 801a688:	3304      	adds	r3, #4
 801a68a:	e00d      	b.n	801a6a8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a68c:	230e      	movs	r3, #14
 801a68e:	18fb      	adds	r3, r7, r3
 801a690:	781b      	ldrb	r3, [r3, #0]
 801a692:	227f      	movs	r2, #127	@ 0x7f
 801a694:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a696:	0013      	movs	r3, r2
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	189b      	adds	r3, r3, r2
 801a69c:	009b      	lsls	r3, r3, #2
 801a69e:	3351      	adds	r3, #81	@ 0x51
 801a6a0:	33ff      	adds	r3, #255	@ 0xff
 801a6a2:	687a      	ldr	r2, [r7, #4]
 801a6a4:	18d3      	adds	r3, r2, r3
 801a6a6:	3304      	adds	r3, #4
 801a6a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801a6aa:	68bb      	ldr	r3, [r7, #8]
 801a6ac:	2200      	movs	r2, #0
 801a6ae:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801a6b0:	68b9      	ldr	r1, [r7, #8]
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	2202      	movs	r2, #2
 801a6b6:	0018      	movs	r0, r3
 801a6b8:	f000 fcab 	bl	801b012 <USBD_CtlSendData>
              break;
 801a6bc:	e080      	b.n	801a7c0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801a6be:	220e      	movs	r2, #14
 801a6c0:	18bb      	adds	r3, r7, r2
 801a6c2:	781b      	ldrb	r3, [r3, #0]
 801a6c4:	b25b      	sxtb	r3, r3
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	da14      	bge.n	801a6f4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801a6ca:	18bb      	adds	r3, r7, r2
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	220f      	movs	r2, #15
 801a6d0:	401a      	ands	r2, r3
 801a6d2:	6879      	ldr	r1, [r7, #4]
 801a6d4:	0013      	movs	r3, r2
 801a6d6:	009b      	lsls	r3, r3, #2
 801a6d8:	189b      	adds	r3, r3, r2
 801a6da:	009b      	lsls	r3, r3, #2
 801a6dc:	18cb      	adds	r3, r1, r3
 801a6de:	3318      	adds	r3, #24
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d11e      	bne.n	801a724 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801a6e6:	683a      	ldr	r2, [r7, #0]
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	0011      	movs	r1, r2
 801a6ec:	0018      	movs	r0, r3
 801a6ee:	f000 fc12 	bl	801af16 <USBD_CtlError>
                  break;
 801a6f2:	e065      	b.n	801a7c0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801a6f4:	230e      	movs	r3, #14
 801a6f6:	18fb      	adds	r3, r7, r3
 801a6f8:	781b      	ldrb	r3, [r3, #0]
 801a6fa:	220f      	movs	r2, #15
 801a6fc:	401a      	ands	r2, r3
 801a6fe:	6878      	ldr	r0, [r7, #4]
 801a700:	23ac      	movs	r3, #172	@ 0xac
 801a702:	0059      	lsls	r1, r3, #1
 801a704:	0013      	movs	r3, r2
 801a706:	009b      	lsls	r3, r3, #2
 801a708:	189b      	adds	r3, r3, r2
 801a70a:	009b      	lsls	r3, r3, #2
 801a70c:	18c3      	adds	r3, r0, r3
 801a70e:	185b      	adds	r3, r3, r1
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d106      	bne.n	801a724 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801a716:	683a      	ldr	r2, [r7, #0]
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	0011      	movs	r1, r2
 801a71c:	0018      	movs	r0, r3
 801a71e:	f000 fbfa 	bl	801af16 <USBD_CtlError>
                  break;
 801a722:	e04d      	b.n	801a7c0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a724:	220e      	movs	r2, #14
 801a726:	18bb      	adds	r3, r7, r2
 801a728:	781b      	ldrb	r3, [r3, #0]
 801a72a:	b25b      	sxtb	r3, r3
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	da0c      	bge.n	801a74a <USBD_StdEPReq+0x2c8>
 801a730:	18bb      	adds	r3, r7, r2
 801a732:	781b      	ldrb	r3, [r3, #0]
 801a734:	227f      	movs	r2, #127	@ 0x7f
 801a736:	401a      	ands	r2, r3
 801a738:	0013      	movs	r3, r2
 801a73a:	009b      	lsls	r3, r3, #2
 801a73c:	189b      	adds	r3, r3, r2
 801a73e:	009b      	lsls	r3, r3, #2
 801a740:	3310      	adds	r3, #16
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	18d3      	adds	r3, r2, r3
 801a746:	3304      	adds	r3, #4
 801a748:	e00d      	b.n	801a766 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801a74a:	230e      	movs	r3, #14
 801a74c:	18fb      	adds	r3, r7, r3
 801a74e:	781b      	ldrb	r3, [r3, #0]
 801a750:	227f      	movs	r2, #127	@ 0x7f
 801a752:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801a754:	0013      	movs	r3, r2
 801a756:	009b      	lsls	r3, r3, #2
 801a758:	189b      	adds	r3, r3, r2
 801a75a:	009b      	lsls	r3, r3, #2
 801a75c:	3351      	adds	r3, #81	@ 0x51
 801a75e:	33ff      	adds	r3, #255	@ 0xff
 801a760:	687a      	ldr	r2, [r7, #4]
 801a762:	18d3      	adds	r3, r2, r3
 801a764:	3304      	adds	r3, #4
 801a766:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801a768:	220e      	movs	r2, #14
 801a76a:	18bb      	adds	r3, r7, r2
 801a76c:	781b      	ldrb	r3, [r3, #0]
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d003      	beq.n	801a77a <USBD_StdEPReq+0x2f8>
 801a772:	18bb      	adds	r3, r7, r2
 801a774:	781b      	ldrb	r3, [r3, #0]
 801a776:	2b80      	cmp	r3, #128	@ 0x80
 801a778:	d103      	bne.n	801a782 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	2200      	movs	r2, #0
 801a77e:	601a      	str	r2, [r3, #0]
 801a780:	e010      	b.n	801a7a4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801a782:	230e      	movs	r3, #14
 801a784:	18fb      	adds	r3, r7, r3
 801a786:	781a      	ldrb	r2, [r3, #0]
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	0011      	movs	r1, r2
 801a78c:	0018      	movs	r0, r3
 801a78e:	f001 f940 	bl	801ba12 <USBD_LL_IsStallEP>
 801a792:	1e03      	subs	r3, r0, #0
 801a794:	d003      	beq.n	801a79e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	2201      	movs	r2, #1
 801a79a:	601a      	str	r2, [r3, #0]
 801a79c:	e002      	b.n	801a7a4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801a79e:	68bb      	ldr	r3, [r7, #8]
 801a7a0:	2200      	movs	r2, #0
 801a7a2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801a7a4:	68b9      	ldr	r1, [r7, #8]
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	2202      	movs	r2, #2
 801a7aa:	0018      	movs	r0, r3
 801a7ac:	f000 fc31 	bl	801b012 <USBD_CtlSendData>
              break;
 801a7b0:	e006      	b.n	801a7c0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801a7b2:	683a      	ldr	r2, [r7, #0]
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	0011      	movs	r1, r2
 801a7b8:	0018      	movs	r0, r3
 801a7ba:	f000 fbac 	bl	801af16 <USBD_CtlError>
              break;
 801a7be:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801a7c0:	e006      	b.n	801a7d0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801a7c2:	683a      	ldr	r2, [r7, #0]
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	0011      	movs	r1, r2
 801a7c8:	0018      	movs	r0, r3
 801a7ca:	f000 fba4 	bl	801af16 <USBD_CtlError>
          break;
 801a7ce:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a7d0:	e006      	b.n	801a7e0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801a7d2:	683a      	ldr	r2, [r7, #0]
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	0011      	movs	r1, r2
 801a7d8:	0018      	movs	r0, r3
 801a7da:	f000 fb9c 	bl	801af16 <USBD_CtlError>
      break;
 801a7de:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a7e0:	230f      	movs	r3, #15
 801a7e2:	18fb      	adds	r3, r7, r3
 801a7e4:	781b      	ldrb	r3, [r3, #0]
}
 801a7e6:	0018      	movs	r0, r3
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	b004      	add	sp, #16
 801a7ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801a7f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b084      	sub	sp, #16
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
 801a7f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801a7fa:	2308      	movs	r3, #8
 801a7fc:	18fb      	adds	r3, r7, r3
 801a7fe:	2200      	movs	r2, #0
 801a800:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801a802:	2300      	movs	r3, #0
 801a804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801a806:	230b      	movs	r3, #11
 801a808:	18fb      	adds	r3, r7, r3
 801a80a:	2200      	movs	r2, #0
 801a80c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801a80e:	683b      	ldr	r3, [r7, #0]
 801a810:	885b      	ldrh	r3, [r3, #2]
 801a812:	0a1b      	lsrs	r3, r3, #8
 801a814:	b29b      	uxth	r3, r3
 801a816:	2b07      	cmp	r3, #7
 801a818:	d900      	bls.n	801a81c <USBD_GetDescriptor+0x2c>
 801a81a:	e159      	b.n	801aad0 <USBD_GetDescriptor+0x2e0>
 801a81c:	009a      	lsls	r2, r3, #2
 801a81e:	4bcb      	ldr	r3, [pc, #812]	@ (801ab4c <USBD_GetDescriptor+0x35c>)
 801a820:	18d3      	adds	r3, r2, r3
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801a826:	687a      	ldr	r2, [r7, #4]
 801a828:	23ac      	movs	r3, #172	@ 0xac
 801a82a:	009b      	lsls	r3, r3, #2
 801a82c:	58d3      	ldr	r3, [r2, r3]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	687a      	ldr	r2, [r7, #4]
 801a832:	7c12      	ldrb	r2, [r2, #16]
 801a834:	2108      	movs	r1, #8
 801a836:	1879      	adds	r1, r7, r1
 801a838:	0010      	movs	r0, r2
 801a83a:	4798      	blx	r3
 801a83c:	0003      	movs	r3, r0
 801a83e:	60fb      	str	r3, [r7, #12]
      break;
 801a840:	e153      	b.n	801aaea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	7c1b      	ldrb	r3, [r3, #16]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d10f      	bne.n	801a86a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801a84a:	687a      	ldr	r2, [r7, #4]
 801a84c:	23ad      	movs	r3, #173	@ 0xad
 801a84e:	009b      	lsls	r3, r3, #2
 801a850:	58d3      	ldr	r3, [r2, r3]
 801a852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a854:	2208      	movs	r2, #8
 801a856:	18ba      	adds	r2, r7, r2
 801a858:	0010      	movs	r0, r2
 801a85a:	4798      	blx	r3
 801a85c:	0003      	movs	r3, r0
 801a85e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	3301      	adds	r3, #1
 801a864:	2202      	movs	r2, #2
 801a866:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801a868:	e13f      	b.n	801aaea <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801a86a:	687a      	ldr	r2, [r7, #4]
 801a86c:	23ad      	movs	r3, #173	@ 0xad
 801a86e:	009b      	lsls	r3, r3, #2
 801a870:	58d3      	ldr	r3, [r2, r3]
 801a872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a874:	2208      	movs	r2, #8
 801a876:	18ba      	adds	r2, r7, r2
 801a878:	0010      	movs	r0, r2
 801a87a:	4798      	blx	r3
 801a87c:	0003      	movs	r3, r0
 801a87e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	3301      	adds	r3, #1
 801a884:	2202      	movs	r2, #2
 801a886:	701a      	strb	r2, [r3, #0]
      break;
 801a888:	e12f      	b.n	801aaea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801a88a:	683b      	ldr	r3, [r7, #0]
 801a88c:	885b      	ldrh	r3, [r3, #2]
 801a88e:	b2db      	uxtb	r3, r3
 801a890:	2b05      	cmp	r3, #5
 801a892:	d900      	bls.n	801a896 <USBD_GetDescriptor+0xa6>
 801a894:	e0d0      	b.n	801aa38 <USBD_GetDescriptor+0x248>
 801a896:	009a      	lsls	r2, r3, #2
 801a898:	4bad      	ldr	r3, [pc, #692]	@ (801ab50 <USBD_GetDescriptor+0x360>)
 801a89a:	18d3      	adds	r3, r2, r3
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801a8a0:	687a      	ldr	r2, [r7, #4]
 801a8a2:	23ac      	movs	r3, #172	@ 0xac
 801a8a4:	009b      	lsls	r3, r3, #2
 801a8a6:	58d3      	ldr	r3, [r2, r3]
 801a8a8:	685b      	ldr	r3, [r3, #4]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d00d      	beq.n	801a8ca <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801a8ae:	687a      	ldr	r2, [r7, #4]
 801a8b0:	23ac      	movs	r3, #172	@ 0xac
 801a8b2:	009b      	lsls	r3, r3, #2
 801a8b4:	58d3      	ldr	r3, [r2, r3]
 801a8b6:	685b      	ldr	r3, [r3, #4]
 801a8b8:	687a      	ldr	r2, [r7, #4]
 801a8ba:	7c12      	ldrb	r2, [r2, #16]
 801a8bc:	2108      	movs	r1, #8
 801a8be:	1879      	adds	r1, r7, r1
 801a8c0:	0010      	movs	r0, r2
 801a8c2:	4798      	blx	r3
 801a8c4:	0003      	movs	r3, r0
 801a8c6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a8c8:	e0c3      	b.n	801aa52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a8ca:	683a      	ldr	r2, [r7, #0]
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	0011      	movs	r1, r2
 801a8d0:	0018      	movs	r0, r3
 801a8d2:	f000 fb20 	bl	801af16 <USBD_CtlError>
            err++;
 801a8d6:	210b      	movs	r1, #11
 801a8d8:	187b      	adds	r3, r7, r1
 801a8da:	781a      	ldrb	r2, [r3, #0]
 801a8dc:	187b      	adds	r3, r7, r1
 801a8de:	3201      	adds	r2, #1
 801a8e0:	701a      	strb	r2, [r3, #0]
          break;
 801a8e2:	e0b6      	b.n	801aa52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801a8e4:	687a      	ldr	r2, [r7, #4]
 801a8e6:	23ac      	movs	r3, #172	@ 0xac
 801a8e8:	009b      	lsls	r3, r3, #2
 801a8ea:	58d3      	ldr	r3, [r2, r3]
 801a8ec:	689b      	ldr	r3, [r3, #8]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d00d      	beq.n	801a90e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801a8f2:	687a      	ldr	r2, [r7, #4]
 801a8f4:	23ac      	movs	r3, #172	@ 0xac
 801a8f6:	009b      	lsls	r3, r3, #2
 801a8f8:	58d3      	ldr	r3, [r2, r3]
 801a8fa:	689b      	ldr	r3, [r3, #8]
 801a8fc:	687a      	ldr	r2, [r7, #4]
 801a8fe:	7c12      	ldrb	r2, [r2, #16]
 801a900:	2108      	movs	r1, #8
 801a902:	1879      	adds	r1, r7, r1
 801a904:	0010      	movs	r0, r2
 801a906:	4798      	blx	r3
 801a908:	0003      	movs	r3, r0
 801a90a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a90c:	e0a1      	b.n	801aa52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a90e:	683a      	ldr	r2, [r7, #0]
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	0011      	movs	r1, r2
 801a914:	0018      	movs	r0, r3
 801a916:	f000 fafe 	bl	801af16 <USBD_CtlError>
            err++;
 801a91a:	210b      	movs	r1, #11
 801a91c:	187b      	adds	r3, r7, r1
 801a91e:	781a      	ldrb	r2, [r3, #0]
 801a920:	187b      	adds	r3, r7, r1
 801a922:	3201      	adds	r2, #1
 801a924:	701a      	strb	r2, [r3, #0]
          break;
 801a926:	e094      	b.n	801aa52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801a928:	687a      	ldr	r2, [r7, #4]
 801a92a:	23ac      	movs	r3, #172	@ 0xac
 801a92c:	009b      	lsls	r3, r3, #2
 801a92e:	58d3      	ldr	r3, [r2, r3]
 801a930:	68db      	ldr	r3, [r3, #12]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d00d      	beq.n	801a952 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801a936:	687a      	ldr	r2, [r7, #4]
 801a938:	23ac      	movs	r3, #172	@ 0xac
 801a93a:	009b      	lsls	r3, r3, #2
 801a93c:	58d3      	ldr	r3, [r2, r3]
 801a93e:	68db      	ldr	r3, [r3, #12]
 801a940:	687a      	ldr	r2, [r7, #4]
 801a942:	7c12      	ldrb	r2, [r2, #16]
 801a944:	2108      	movs	r1, #8
 801a946:	1879      	adds	r1, r7, r1
 801a948:	0010      	movs	r0, r2
 801a94a:	4798      	blx	r3
 801a94c:	0003      	movs	r3, r0
 801a94e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a950:	e07f      	b.n	801aa52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a952:	683a      	ldr	r2, [r7, #0]
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	0011      	movs	r1, r2
 801a958:	0018      	movs	r0, r3
 801a95a:	f000 fadc 	bl	801af16 <USBD_CtlError>
            err++;
 801a95e:	210b      	movs	r1, #11
 801a960:	187b      	adds	r3, r7, r1
 801a962:	781a      	ldrb	r2, [r3, #0]
 801a964:	187b      	adds	r3, r7, r1
 801a966:	3201      	adds	r2, #1
 801a968:	701a      	strb	r2, [r3, #0]
          break;
 801a96a:	e072      	b.n	801aa52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801a96c:	687a      	ldr	r2, [r7, #4]
 801a96e:	23ac      	movs	r3, #172	@ 0xac
 801a970:	009b      	lsls	r3, r3, #2
 801a972:	58d3      	ldr	r3, [r2, r3]
 801a974:	691b      	ldr	r3, [r3, #16]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d00d      	beq.n	801a996 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801a97a:	687a      	ldr	r2, [r7, #4]
 801a97c:	23ac      	movs	r3, #172	@ 0xac
 801a97e:	009b      	lsls	r3, r3, #2
 801a980:	58d3      	ldr	r3, [r2, r3]
 801a982:	691b      	ldr	r3, [r3, #16]
 801a984:	687a      	ldr	r2, [r7, #4]
 801a986:	7c12      	ldrb	r2, [r2, #16]
 801a988:	2108      	movs	r1, #8
 801a98a:	1879      	adds	r1, r7, r1
 801a98c:	0010      	movs	r0, r2
 801a98e:	4798      	blx	r3
 801a990:	0003      	movs	r3, r0
 801a992:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a994:	e05d      	b.n	801aa52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a996:	683a      	ldr	r2, [r7, #0]
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	0011      	movs	r1, r2
 801a99c:	0018      	movs	r0, r3
 801a99e:	f000 faba 	bl	801af16 <USBD_CtlError>
            err++;
 801a9a2:	210b      	movs	r1, #11
 801a9a4:	187b      	adds	r3, r7, r1
 801a9a6:	781a      	ldrb	r2, [r3, #0]
 801a9a8:	187b      	adds	r3, r7, r1
 801a9aa:	3201      	adds	r2, #1
 801a9ac:	701a      	strb	r2, [r3, #0]
          break;
 801a9ae:	e050      	b.n	801aa52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801a9b0:	687a      	ldr	r2, [r7, #4]
 801a9b2:	23ac      	movs	r3, #172	@ 0xac
 801a9b4:	009b      	lsls	r3, r3, #2
 801a9b6:	58d3      	ldr	r3, [r2, r3]
 801a9b8:	695b      	ldr	r3, [r3, #20]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d00d      	beq.n	801a9da <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801a9be:	687a      	ldr	r2, [r7, #4]
 801a9c0:	23ac      	movs	r3, #172	@ 0xac
 801a9c2:	009b      	lsls	r3, r3, #2
 801a9c4:	58d3      	ldr	r3, [r2, r3]
 801a9c6:	695b      	ldr	r3, [r3, #20]
 801a9c8:	687a      	ldr	r2, [r7, #4]
 801a9ca:	7c12      	ldrb	r2, [r2, #16]
 801a9cc:	2108      	movs	r1, #8
 801a9ce:	1879      	adds	r1, r7, r1
 801a9d0:	0010      	movs	r0, r2
 801a9d2:	4798      	blx	r3
 801a9d4:	0003      	movs	r3, r0
 801a9d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801a9d8:	e03b      	b.n	801aa52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801a9da:	683a      	ldr	r2, [r7, #0]
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	0011      	movs	r1, r2
 801a9e0:	0018      	movs	r0, r3
 801a9e2:	f000 fa98 	bl	801af16 <USBD_CtlError>
            err++;
 801a9e6:	210b      	movs	r1, #11
 801a9e8:	187b      	adds	r3, r7, r1
 801a9ea:	781a      	ldrb	r2, [r3, #0]
 801a9ec:	187b      	adds	r3, r7, r1
 801a9ee:	3201      	adds	r2, #1
 801a9f0:	701a      	strb	r2, [r3, #0]
          break;
 801a9f2:	e02e      	b.n	801aa52 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801a9f4:	687a      	ldr	r2, [r7, #4]
 801a9f6:	23ac      	movs	r3, #172	@ 0xac
 801a9f8:	009b      	lsls	r3, r3, #2
 801a9fa:	58d3      	ldr	r3, [r2, r3]
 801a9fc:	699b      	ldr	r3, [r3, #24]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d00d      	beq.n	801aa1e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801aa02:	687a      	ldr	r2, [r7, #4]
 801aa04:	23ac      	movs	r3, #172	@ 0xac
 801aa06:	009b      	lsls	r3, r3, #2
 801aa08:	58d3      	ldr	r3, [r2, r3]
 801aa0a:	699b      	ldr	r3, [r3, #24]
 801aa0c:	687a      	ldr	r2, [r7, #4]
 801aa0e:	7c12      	ldrb	r2, [r2, #16]
 801aa10:	2108      	movs	r1, #8
 801aa12:	1879      	adds	r1, r7, r1
 801aa14:	0010      	movs	r0, r2
 801aa16:	4798      	blx	r3
 801aa18:	0003      	movs	r3, r0
 801aa1a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801aa1c:	e019      	b.n	801aa52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801aa1e:	683a      	ldr	r2, [r7, #0]
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	0011      	movs	r1, r2
 801aa24:	0018      	movs	r0, r3
 801aa26:	f000 fa76 	bl	801af16 <USBD_CtlError>
            err++;
 801aa2a:	210b      	movs	r1, #11
 801aa2c:	187b      	adds	r3, r7, r1
 801aa2e:	781a      	ldrb	r2, [r3, #0]
 801aa30:	187b      	adds	r3, r7, r1
 801aa32:	3201      	adds	r2, #1
 801aa34:	701a      	strb	r2, [r3, #0]
          break;
 801aa36:	e00c      	b.n	801aa52 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801aa38:	683a      	ldr	r2, [r7, #0]
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	0011      	movs	r1, r2
 801aa3e:	0018      	movs	r0, r3
 801aa40:	f000 fa69 	bl	801af16 <USBD_CtlError>
          err++;
 801aa44:	210b      	movs	r1, #11
 801aa46:	187b      	adds	r3, r7, r1
 801aa48:	781a      	ldrb	r2, [r3, #0]
 801aa4a:	187b      	adds	r3, r7, r1
 801aa4c:	3201      	adds	r2, #1
 801aa4e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801aa50:	e04b      	b.n	801aaea <USBD_GetDescriptor+0x2fa>
 801aa52:	e04a      	b.n	801aaea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	7c1b      	ldrb	r3, [r3, #16]
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d10b      	bne.n	801aa74 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801aa5c:	687a      	ldr	r2, [r7, #4]
 801aa5e:	23ad      	movs	r3, #173	@ 0xad
 801aa60:	009b      	lsls	r3, r3, #2
 801aa62:	58d3      	ldr	r3, [r2, r3]
 801aa64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aa66:	2208      	movs	r2, #8
 801aa68:	18ba      	adds	r2, r7, r2
 801aa6a:	0010      	movs	r0, r2
 801aa6c:	4798      	blx	r3
 801aa6e:	0003      	movs	r3, r0
 801aa70:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aa72:	e03a      	b.n	801aaea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801aa74:	683a      	ldr	r2, [r7, #0]
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	0011      	movs	r1, r2
 801aa7a:	0018      	movs	r0, r3
 801aa7c:	f000 fa4b 	bl	801af16 <USBD_CtlError>
        err++;
 801aa80:	210b      	movs	r1, #11
 801aa82:	187b      	adds	r3, r7, r1
 801aa84:	781a      	ldrb	r2, [r3, #0]
 801aa86:	187b      	adds	r3, r7, r1
 801aa88:	3201      	adds	r2, #1
 801aa8a:	701a      	strb	r2, [r3, #0]
      break;
 801aa8c:	e02d      	b.n	801aaea <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	7c1b      	ldrb	r3, [r3, #16]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d10f      	bne.n	801aab6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801aa96:	687a      	ldr	r2, [r7, #4]
 801aa98:	23ad      	movs	r3, #173	@ 0xad
 801aa9a:	009b      	lsls	r3, r3, #2
 801aa9c:	58d3      	ldr	r3, [r2, r3]
 801aa9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aaa0:	2208      	movs	r2, #8
 801aaa2:	18ba      	adds	r2, r7, r2
 801aaa4:	0010      	movs	r0, r2
 801aaa6:	4798      	blx	r3
 801aaa8:	0003      	movs	r3, r0
 801aaaa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	3301      	adds	r3, #1
 801aab0:	2207      	movs	r2, #7
 801aab2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801aab4:	e019      	b.n	801aaea <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801aab6:	683a      	ldr	r2, [r7, #0]
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	0011      	movs	r1, r2
 801aabc:	0018      	movs	r0, r3
 801aabe:	f000 fa2a 	bl	801af16 <USBD_CtlError>
        err++;
 801aac2:	210b      	movs	r1, #11
 801aac4:	187b      	adds	r3, r7, r1
 801aac6:	781a      	ldrb	r2, [r3, #0]
 801aac8:	187b      	adds	r3, r7, r1
 801aaca:	3201      	adds	r2, #1
 801aacc:	701a      	strb	r2, [r3, #0]
      break;
 801aace:	e00c      	b.n	801aaea <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801aad0:	683a      	ldr	r2, [r7, #0]
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	0011      	movs	r1, r2
 801aad6:	0018      	movs	r0, r3
 801aad8:	f000 fa1d 	bl	801af16 <USBD_CtlError>
      err++;
 801aadc:	210b      	movs	r1, #11
 801aade:	187b      	adds	r3, r7, r1
 801aae0:	781a      	ldrb	r2, [r3, #0]
 801aae2:	187b      	adds	r3, r7, r1
 801aae4:	3201      	adds	r2, #1
 801aae6:	701a      	strb	r2, [r3, #0]
      break;
 801aae8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801aaea:	230b      	movs	r3, #11
 801aaec:	18fb      	adds	r3, r7, r3
 801aaee:	781b      	ldrb	r3, [r3, #0]
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d127      	bne.n	801ab44 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801aaf4:	2108      	movs	r1, #8
 801aaf6:	187b      	adds	r3, r7, r1
 801aaf8:	881b      	ldrh	r3, [r3, #0]
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d019      	beq.n	801ab32 <USBD_GetDescriptor+0x342>
 801aafe:	683b      	ldr	r3, [r7, #0]
 801ab00:	88db      	ldrh	r3, [r3, #6]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d015      	beq.n	801ab32 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801ab06:	683b      	ldr	r3, [r7, #0]
 801ab08:	88da      	ldrh	r2, [r3, #6]
 801ab0a:	187b      	adds	r3, r7, r1
 801ab0c:	881b      	ldrh	r3, [r3, #0]
 801ab0e:	1c18      	adds	r0, r3, #0
 801ab10:	1c11      	adds	r1, r2, #0
 801ab12:	b28a      	uxth	r2, r1
 801ab14:	b283      	uxth	r3, r0
 801ab16:	429a      	cmp	r2, r3
 801ab18:	d900      	bls.n	801ab1c <USBD_GetDescriptor+0x32c>
 801ab1a:	1c01      	adds	r1, r0, #0
 801ab1c:	b28a      	uxth	r2, r1
 801ab1e:	2108      	movs	r1, #8
 801ab20:	187b      	adds	r3, r7, r1
 801ab22:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801ab24:	187b      	adds	r3, r7, r1
 801ab26:	881a      	ldrh	r2, [r3, #0]
 801ab28:	68f9      	ldr	r1, [r7, #12]
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	0018      	movs	r0, r3
 801ab2e:	f000 fa70 	bl	801b012 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	88db      	ldrh	r3, [r3, #6]
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d105      	bne.n	801ab46 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	0018      	movs	r0, r3
 801ab3e:	f000 fad2 	bl	801b0e6 <USBD_CtlSendStatus>
 801ab42:	e000      	b.n	801ab46 <USBD_GetDescriptor+0x356>
    return;
 801ab44:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801ab46:	46bd      	mov	sp, r7
 801ab48:	b004      	add	sp, #16
 801ab4a:	bd80      	pop	{r7, pc}
 801ab4c:	0802340c 	.word	0x0802340c
 801ab50:	0802342c 	.word	0x0802342c

0801ab54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ab54:	b590      	push	{r4, r7, lr}
 801ab56:	b085      	sub	sp, #20
 801ab58:	af00      	add	r7, sp, #0
 801ab5a:	6078      	str	r0, [r7, #4]
 801ab5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	889b      	ldrh	r3, [r3, #4]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d13d      	bne.n	801abe2 <USBD_SetAddress+0x8e>
 801ab66:	683b      	ldr	r3, [r7, #0]
 801ab68:	88db      	ldrh	r3, [r3, #6]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d139      	bne.n	801abe2 <USBD_SetAddress+0x8e>
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	885b      	ldrh	r3, [r3, #2]
 801ab72:	2b7f      	cmp	r3, #127	@ 0x7f
 801ab74:	d835      	bhi.n	801abe2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	885b      	ldrh	r3, [r3, #2]
 801ab7a:	b2da      	uxtb	r2, r3
 801ab7c:	230f      	movs	r3, #15
 801ab7e:	18fb      	adds	r3, r7, r3
 801ab80:	217f      	movs	r1, #127	@ 0x7f
 801ab82:	400a      	ands	r2, r1
 801ab84:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab86:	687a      	ldr	r2, [r7, #4]
 801ab88:	23a7      	movs	r3, #167	@ 0xa7
 801ab8a:	009b      	lsls	r3, r3, #2
 801ab8c:	5cd3      	ldrb	r3, [r2, r3]
 801ab8e:	2b03      	cmp	r3, #3
 801ab90:	d106      	bne.n	801aba0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801ab92:	683a      	ldr	r2, [r7, #0]
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	0011      	movs	r1, r2
 801ab98:	0018      	movs	r0, r3
 801ab9a:	f000 f9bc 	bl	801af16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab9e:	e027      	b.n	801abf0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	240f      	movs	r4, #15
 801aba4:	193a      	adds	r2, r7, r4
 801aba6:	4914      	ldr	r1, [pc, #80]	@ (801abf8 <USBD_SetAddress+0xa4>)
 801aba8:	7812      	ldrb	r2, [r2, #0]
 801abaa:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801abac:	193b      	adds	r3, r7, r4
 801abae:	781a      	ldrb	r2, [r3, #0]
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	0011      	movs	r1, r2
 801abb4:	0018      	movs	r0, r3
 801abb6:	f000 ff5d 	bl	801ba74 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	0018      	movs	r0, r3
 801abbe:	f000 fa92 	bl	801b0e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801abc2:	193b      	adds	r3, r7, r4
 801abc4:	781b      	ldrb	r3, [r3, #0]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d005      	beq.n	801abd6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801abca:	687a      	ldr	r2, [r7, #4]
 801abcc:	23a7      	movs	r3, #167	@ 0xa7
 801abce:	009b      	lsls	r3, r3, #2
 801abd0:	2102      	movs	r1, #2
 801abd2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abd4:	e00c      	b.n	801abf0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801abd6:	687a      	ldr	r2, [r7, #4]
 801abd8:	23a7      	movs	r3, #167	@ 0xa7
 801abda:	009b      	lsls	r3, r3, #2
 801abdc:	2101      	movs	r1, #1
 801abde:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801abe0:	e006      	b.n	801abf0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801abe2:	683a      	ldr	r2, [r7, #0]
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	0011      	movs	r1, r2
 801abe8:	0018      	movs	r0, r3
 801abea:	f000 f994 	bl	801af16 <USBD_CtlError>
  }
}
 801abee:	46c0      	nop			@ (mov r8, r8)
 801abf0:	46c0      	nop			@ (mov r8, r8)
 801abf2:	46bd      	mov	sp, r7
 801abf4:	b005      	add	sp, #20
 801abf6:	bd90      	pop	{r4, r7, pc}
 801abf8:	0000029e 	.word	0x0000029e

0801abfc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b082      	sub	sp, #8
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
 801ac04:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801ac06:	683b      	ldr	r3, [r7, #0]
 801ac08:	885b      	ldrh	r3, [r3, #2]
 801ac0a:	b2da      	uxtb	r2, r3
 801ac0c:	4b4c      	ldr	r3, [pc, #304]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ac0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801ac10:	4b4b      	ldr	r3, [pc, #300]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ac12:	781b      	ldrb	r3, [r3, #0]
 801ac14:	2b01      	cmp	r3, #1
 801ac16:	d906      	bls.n	801ac26 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801ac18:	683a      	ldr	r2, [r7, #0]
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	0011      	movs	r1, r2
 801ac1e:	0018      	movs	r0, r3
 801ac20:	f000 f979 	bl	801af16 <USBD_CtlError>
 801ac24:	e088      	b.n	801ad38 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801ac26:	687a      	ldr	r2, [r7, #4]
 801ac28:	23a7      	movs	r3, #167	@ 0xa7
 801ac2a:	009b      	lsls	r3, r3, #2
 801ac2c:	5cd3      	ldrb	r3, [r2, r3]
 801ac2e:	2b02      	cmp	r3, #2
 801ac30:	d002      	beq.n	801ac38 <USBD_SetConfig+0x3c>
 801ac32:	2b03      	cmp	r3, #3
 801ac34:	d029      	beq.n	801ac8a <USBD_SetConfig+0x8e>
 801ac36:	e071      	b.n	801ad1c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801ac38:	4b41      	ldr	r3, [pc, #260]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ac3a:	781b      	ldrb	r3, [r3, #0]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d01f      	beq.n	801ac80 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801ac40:	4b3f      	ldr	r3, [pc, #252]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ac42:	781b      	ldrb	r3, [r3, #0]
 801ac44:	001a      	movs	r2, r3
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801ac4a:	687a      	ldr	r2, [r7, #4]
 801ac4c:	23a7      	movs	r3, #167	@ 0xa7
 801ac4e:	009b      	lsls	r3, r3, #2
 801ac50:	2103      	movs	r1, #3
 801ac52:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ac54:	4b3a      	ldr	r3, [pc, #232]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ac56:	781a      	ldrb	r2, [r3, #0]
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	0011      	movs	r1, r2
 801ac5c:	0018      	movs	r0, r3
 801ac5e:	f7ff f8c6 	bl	8019dee <USBD_SetClassConfig>
 801ac62:	0003      	movs	r3, r0
 801ac64:	2b02      	cmp	r3, #2
 801ac66:	d106      	bne.n	801ac76 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801ac68:	683a      	ldr	r2, [r7, #0]
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	0011      	movs	r1, r2
 801ac6e:	0018      	movs	r0, r3
 801ac70:	f000 f951 	bl	801af16 <USBD_CtlError>
            return;
 801ac74:	e060      	b.n	801ad38 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	0018      	movs	r0, r3
 801ac7a:	f000 fa34 	bl	801b0e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801ac7e:	e05b      	b.n	801ad38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	0018      	movs	r0, r3
 801ac84:	f000 fa2f 	bl	801b0e6 <USBD_CtlSendStatus>
        break;
 801ac88:	e056      	b.n	801ad38 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801ac8a:	4b2d      	ldr	r3, [pc, #180]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ac8c:	781b      	ldrb	r3, [r3, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d115      	bne.n	801acbe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801ac92:	687a      	ldr	r2, [r7, #4]
 801ac94:	23a7      	movs	r3, #167	@ 0xa7
 801ac96:	009b      	lsls	r3, r3, #2
 801ac98:	2102      	movs	r1, #2
 801ac9a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801ac9c:	4b28      	ldr	r3, [pc, #160]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	001a      	movs	r2, r3
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801aca6:	4b26      	ldr	r3, [pc, #152]	@ (801ad40 <USBD_SetConfig+0x144>)
 801aca8:	781a      	ldrb	r2, [r3, #0]
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	0011      	movs	r1, r2
 801acae:	0018      	movs	r0, r3
 801acb0:	f7ff f8c4 	bl	8019e3c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	0018      	movs	r0, r3
 801acb8:	f000 fa15 	bl	801b0e6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801acbc:	e03c      	b.n	801ad38 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801acbe:	4b20      	ldr	r3, [pc, #128]	@ (801ad40 <USBD_SetConfig+0x144>)
 801acc0:	781b      	ldrb	r3, [r3, #0]
 801acc2:	001a      	movs	r2, r3
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	685b      	ldr	r3, [r3, #4]
 801acc8:	429a      	cmp	r2, r3
 801acca:	d022      	beq.n	801ad12 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	b2da      	uxtb	r2, r3
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	0011      	movs	r1, r2
 801acd6:	0018      	movs	r0, r3
 801acd8:	f7ff f8b0 	bl	8019e3c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801acdc:	4b18      	ldr	r3, [pc, #96]	@ (801ad40 <USBD_SetConfig+0x144>)
 801acde:	781b      	ldrb	r3, [r3, #0]
 801ace0:	001a      	movs	r2, r3
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801ace6:	4b16      	ldr	r3, [pc, #88]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ace8:	781a      	ldrb	r2, [r3, #0]
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	0011      	movs	r1, r2
 801acee:	0018      	movs	r0, r3
 801acf0:	f7ff f87d 	bl	8019dee <USBD_SetClassConfig>
 801acf4:	0003      	movs	r3, r0
 801acf6:	2b02      	cmp	r3, #2
 801acf8:	d106      	bne.n	801ad08 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801acfa:	683a      	ldr	r2, [r7, #0]
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	0011      	movs	r1, r2
 801ad00:	0018      	movs	r0, r3
 801ad02:	f000 f908 	bl	801af16 <USBD_CtlError>
            return;
 801ad06:	e017      	b.n	801ad38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	0018      	movs	r0, r3
 801ad0c:	f000 f9eb 	bl	801b0e6 <USBD_CtlSendStatus>
        break;
 801ad10:	e012      	b.n	801ad38 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	0018      	movs	r0, r3
 801ad16:	f000 f9e6 	bl	801b0e6 <USBD_CtlSendStatus>
        break;
 801ad1a:	e00d      	b.n	801ad38 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801ad1c:	683a      	ldr	r2, [r7, #0]
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	0011      	movs	r1, r2
 801ad22:	0018      	movs	r0, r3
 801ad24:	f000 f8f7 	bl	801af16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801ad28:	4b05      	ldr	r3, [pc, #20]	@ (801ad40 <USBD_SetConfig+0x144>)
 801ad2a:	781a      	ldrb	r2, [r3, #0]
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	0011      	movs	r1, r2
 801ad30:	0018      	movs	r0, r3
 801ad32:	f7ff f883 	bl	8019e3c <USBD_ClrClassConfig>
        break;
 801ad36:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	b002      	add	sp, #8
 801ad3c:	bd80      	pop	{r7, pc}
 801ad3e:	46c0      	nop			@ (mov r8, r8)
 801ad40:	2000251c 	.word	0x2000251c

0801ad44 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b082      	sub	sp, #8
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
 801ad4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	88db      	ldrh	r3, [r3, #6]
 801ad52:	2b01      	cmp	r3, #1
 801ad54:	d006      	beq.n	801ad64 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801ad56:	683a      	ldr	r2, [r7, #0]
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	0011      	movs	r1, r2
 801ad5c:	0018      	movs	r0, r3
 801ad5e:	f000 f8da 	bl	801af16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801ad62:	e026      	b.n	801adb2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801ad64:	687a      	ldr	r2, [r7, #4]
 801ad66:	23a7      	movs	r3, #167	@ 0xa7
 801ad68:	009b      	lsls	r3, r3, #2
 801ad6a:	5cd3      	ldrb	r3, [r2, r3]
 801ad6c:	2b02      	cmp	r3, #2
 801ad6e:	dc02      	bgt.n	801ad76 <USBD_GetConfig+0x32>
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	dc03      	bgt.n	801ad7c <USBD_GetConfig+0x38>
 801ad74:	e016      	b.n	801ada4 <USBD_GetConfig+0x60>
 801ad76:	2b03      	cmp	r3, #3
 801ad78:	d00c      	beq.n	801ad94 <USBD_GetConfig+0x50>
 801ad7a:	e013      	b.n	801ada4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	3308      	adds	r3, #8
 801ad86:	0019      	movs	r1, r3
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	2201      	movs	r2, #1
 801ad8c:	0018      	movs	r0, r3
 801ad8e:	f000 f940 	bl	801b012 <USBD_CtlSendData>
        break;
 801ad92:	e00e      	b.n	801adb2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	1d19      	adds	r1, r3, #4
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	2201      	movs	r2, #1
 801ad9c:	0018      	movs	r0, r3
 801ad9e:	f000 f938 	bl	801b012 <USBD_CtlSendData>
        break;
 801ada2:	e006      	b.n	801adb2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801ada4:	683a      	ldr	r2, [r7, #0]
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	0011      	movs	r1, r2
 801adaa:	0018      	movs	r0, r3
 801adac:	f000 f8b3 	bl	801af16 <USBD_CtlError>
        break;
 801adb0:	46c0      	nop			@ (mov r8, r8)
}
 801adb2:	46c0      	nop			@ (mov r8, r8)
 801adb4:	46bd      	mov	sp, r7
 801adb6:	b002      	add	sp, #8
 801adb8:	bd80      	pop	{r7, pc}

0801adba <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801adba:	b580      	push	{r7, lr}
 801adbc:	b082      	sub	sp, #8
 801adbe:	af00      	add	r7, sp, #0
 801adc0:	6078      	str	r0, [r7, #4]
 801adc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801adc4:	687a      	ldr	r2, [r7, #4]
 801adc6:	23a7      	movs	r3, #167	@ 0xa7
 801adc8:	009b      	lsls	r3, r3, #2
 801adca:	5cd3      	ldrb	r3, [r2, r3]
 801adcc:	3b01      	subs	r3, #1
 801adce:	2b02      	cmp	r3, #2
 801add0:	d822      	bhi.n	801ae18 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801add2:	683b      	ldr	r3, [r7, #0]
 801add4:	88db      	ldrh	r3, [r3, #6]
 801add6:	2b02      	cmp	r3, #2
 801add8:	d006      	beq.n	801ade8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801adda:	683a      	ldr	r2, [r7, #0]
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	0011      	movs	r1, r2
 801ade0:	0018      	movs	r0, r3
 801ade2:	f000 f898 	bl	801af16 <USBD_CtlError>
        break;
 801ade6:	e01e      	b.n	801ae26 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2201      	movs	r2, #1
 801adec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801adee:	687a      	ldr	r2, [r7, #4]
 801adf0:	23a9      	movs	r3, #169	@ 0xa9
 801adf2:	009b      	lsls	r3, r3, #2
 801adf4:	58d3      	ldr	r3, [r2, r3]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d005      	beq.n	801ae06 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	68db      	ldr	r3, [r3, #12]
 801adfe:	2202      	movs	r2, #2
 801ae00:	431a      	orrs	r2, r3
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801ae06:	687b      	ldr	r3, [r7, #4]
 801ae08:	330c      	adds	r3, #12
 801ae0a:	0019      	movs	r1, r3
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	2202      	movs	r2, #2
 801ae10:	0018      	movs	r0, r3
 801ae12:	f000 f8fe 	bl	801b012 <USBD_CtlSendData>
      break;
 801ae16:	e006      	b.n	801ae26 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801ae18:	683a      	ldr	r2, [r7, #0]
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	0011      	movs	r1, r2
 801ae1e:	0018      	movs	r0, r3
 801ae20:	f000 f879 	bl	801af16 <USBD_CtlError>
      break;
 801ae24:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ae26:	46c0      	nop			@ (mov r8, r8)
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	b002      	add	sp, #8
 801ae2c:	bd80      	pop	{r7, pc}

0801ae2e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ae2e:	b580      	push	{r7, lr}
 801ae30:	b082      	sub	sp, #8
 801ae32:	af00      	add	r7, sp, #0
 801ae34:	6078      	str	r0, [r7, #4]
 801ae36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ae38:	683b      	ldr	r3, [r7, #0]
 801ae3a:	885b      	ldrh	r3, [r3, #2]
 801ae3c:	2b01      	cmp	r3, #1
 801ae3e:	d108      	bne.n	801ae52 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801ae40:	687a      	ldr	r2, [r7, #4]
 801ae42:	23a9      	movs	r3, #169	@ 0xa9
 801ae44:	009b      	lsls	r3, r3, #2
 801ae46:	2101      	movs	r1, #1
 801ae48:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	0018      	movs	r0, r3
 801ae4e:	f000 f94a 	bl	801b0e6 <USBD_CtlSendStatus>
  }
}
 801ae52:	46c0      	nop			@ (mov r8, r8)
 801ae54:	46bd      	mov	sp, r7
 801ae56:	b002      	add	sp, #8
 801ae58:	bd80      	pop	{r7, pc}

0801ae5a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801ae5a:	b580      	push	{r7, lr}
 801ae5c:	b082      	sub	sp, #8
 801ae5e:	af00      	add	r7, sp, #0
 801ae60:	6078      	str	r0, [r7, #4]
 801ae62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801ae64:	687a      	ldr	r2, [r7, #4]
 801ae66:	23a7      	movs	r3, #167	@ 0xa7
 801ae68:	009b      	lsls	r3, r3, #2
 801ae6a:	5cd3      	ldrb	r3, [r2, r3]
 801ae6c:	3b01      	subs	r3, #1
 801ae6e:	2b02      	cmp	r3, #2
 801ae70:	d80d      	bhi.n	801ae8e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801ae72:	683b      	ldr	r3, [r7, #0]
 801ae74:	885b      	ldrh	r3, [r3, #2]
 801ae76:	2b01      	cmp	r3, #1
 801ae78:	d110      	bne.n	801ae9c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801ae7a:	687a      	ldr	r2, [r7, #4]
 801ae7c:	23a9      	movs	r3, #169	@ 0xa9
 801ae7e:	009b      	lsls	r3, r3, #2
 801ae80:	2100      	movs	r1, #0
 801ae82:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	0018      	movs	r0, r3
 801ae88:	f000 f92d 	bl	801b0e6 <USBD_CtlSendStatus>
      }
      break;
 801ae8c:	e006      	b.n	801ae9c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801ae8e:	683a      	ldr	r2, [r7, #0]
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	0011      	movs	r1, r2
 801ae94:	0018      	movs	r0, r3
 801ae96:	f000 f83e 	bl	801af16 <USBD_CtlError>
      break;
 801ae9a:	e000      	b.n	801ae9e <USBD_ClrFeature+0x44>
      break;
 801ae9c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801ae9e:	46c0      	nop			@ (mov r8, r8)
 801aea0:	46bd      	mov	sp, r7
 801aea2:	b002      	add	sp, #8
 801aea4:	bd80      	pop	{r7, pc}

0801aea6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801aea6:	b580      	push	{r7, lr}
 801aea8:	b082      	sub	sp, #8
 801aeaa:	af00      	add	r7, sp, #0
 801aeac:	6078      	str	r0, [r7, #4]
 801aeae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	781a      	ldrb	r2, [r3, #0]
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801aeb8:	683b      	ldr	r3, [r7, #0]
 801aeba:	785a      	ldrb	r2, [r3, #1]
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801aec0:	683b      	ldr	r3, [r7, #0]
 801aec2:	3302      	adds	r3, #2
 801aec4:	781b      	ldrb	r3, [r3, #0]
 801aec6:	001a      	movs	r2, r3
 801aec8:	683b      	ldr	r3, [r7, #0]
 801aeca:	3303      	adds	r3, #3
 801aecc:	781b      	ldrb	r3, [r3, #0]
 801aece:	021b      	lsls	r3, r3, #8
 801aed0:	b29b      	uxth	r3, r3
 801aed2:	18d3      	adds	r3, r2, r3
 801aed4:	b29a      	uxth	r2, r3
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801aeda:	683b      	ldr	r3, [r7, #0]
 801aedc:	3304      	adds	r3, #4
 801aede:	781b      	ldrb	r3, [r3, #0]
 801aee0:	001a      	movs	r2, r3
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	3305      	adds	r3, #5
 801aee6:	781b      	ldrb	r3, [r3, #0]
 801aee8:	021b      	lsls	r3, r3, #8
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	18d3      	adds	r3, r2, r3
 801aeee:	b29a      	uxth	r2, r3
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801aef4:	683b      	ldr	r3, [r7, #0]
 801aef6:	3306      	adds	r3, #6
 801aef8:	781b      	ldrb	r3, [r3, #0]
 801aefa:	001a      	movs	r2, r3
 801aefc:	683b      	ldr	r3, [r7, #0]
 801aefe:	3307      	adds	r3, #7
 801af00:	781b      	ldrb	r3, [r3, #0]
 801af02:	021b      	lsls	r3, r3, #8
 801af04:	b29b      	uxth	r3, r3
 801af06:	18d3      	adds	r3, r2, r3
 801af08:	b29a      	uxth	r2, r3
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	80da      	strh	r2, [r3, #6]

}
 801af0e:	46c0      	nop			@ (mov r8, r8)
 801af10:	46bd      	mov	sp, r7
 801af12:	b002      	add	sp, #8
 801af14:	bd80      	pop	{r7, pc}

0801af16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801af16:	b580      	push	{r7, lr}
 801af18:	b082      	sub	sp, #8
 801af1a:	af00      	add	r7, sp, #0
 801af1c:	6078      	str	r0, [r7, #4]
 801af1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	2180      	movs	r1, #128	@ 0x80
 801af24:	0018      	movs	r0, r3
 801af26:	f000 fd1e 	bl	801b966 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	2100      	movs	r1, #0
 801af2e:	0018      	movs	r0, r3
 801af30:	f000 fd19 	bl	801b966 <USBD_LL_StallEP>
}
 801af34:	46c0      	nop			@ (mov r8, r8)
 801af36:	46bd      	mov	sp, r7
 801af38:	b002      	add	sp, #8
 801af3a:	bd80      	pop	{r7, pc}

0801af3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801af3c:	b590      	push	{r4, r7, lr}
 801af3e:	b087      	sub	sp, #28
 801af40:	af00      	add	r7, sp, #0
 801af42:	60f8      	str	r0, [r7, #12]
 801af44:	60b9      	str	r1, [r7, #8]
 801af46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801af48:	2417      	movs	r4, #23
 801af4a:	193b      	adds	r3, r7, r4
 801af4c:	2200      	movs	r2, #0
 801af4e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	2b00      	cmp	r3, #0
 801af54:	d03c      	beq.n	801afd0 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801af56:	68fb      	ldr	r3, [r7, #12]
 801af58:	0018      	movs	r0, r3
 801af5a:	f000 f83d 	bl	801afd8 <USBD_GetLen>
 801af5e:	0003      	movs	r3, r0
 801af60:	3301      	adds	r3, #1
 801af62:	b29b      	uxth	r3, r3
 801af64:	18db      	adds	r3, r3, r3
 801af66:	b29a      	uxth	r2, r3
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801af6c:	193b      	adds	r3, r7, r4
 801af6e:	781b      	ldrb	r3, [r3, #0]
 801af70:	193a      	adds	r2, r7, r4
 801af72:	1c59      	adds	r1, r3, #1
 801af74:	7011      	strb	r1, [r2, #0]
 801af76:	001a      	movs	r2, r3
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	189b      	adds	r3, r3, r2
 801af7c:	687a      	ldr	r2, [r7, #4]
 801af7e:	7812      	ldrb	r2, [r2, #0]
 801af80:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801af82:	193b      	adds	r3, r7, r4
 801af84:	781b      	ldrb	r3, [r3, #0]
 801af86:	193a      	adds	r2, r7, r4
 801af88:	1c59      	adds	r1, r3, #1
 801af8a:	7011      	strb	r1, [r2, #0]
 801af8c:	001a      	movs	r2, r3
 801af8e:	68bb      	ldr	r3, [r7, #8]
 801af90:	189b      	adds	r3, r3, r2
 801af92:	2203      	movs	r2, #3
 801af94:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801af96:	e017      	b.n	801afc8 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	1c5a      	adds	r2, r3, #1
 801af9c:	60fa      	str	r2, [r7, #12]
 801af9e:	2417      	movs	r4, #23
 801afa0:	193a      	adds	r2, r7, r4
 801afa2:	7812      	ldrb	r2, [r2, #0]
 801afa4:	1939      	adds	r1, r7, r4
 801afa6:	1c50      	adds	r0, r2, #1
 801afa8:	7008      	strb	r0, [r1, #0]
 801afaa:	0011      	movs	r1, r2
 801afac:	68ba      	ldr	r2, [r7, #8]
 801afae:	1852      	adds	r2, r2, r1
 801afb0:	781b      	ldrb	r3, [r3, #0]
 801afb2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801afb4:	193b      	adds	r3, r7, r4
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	193a      	adds	r2, r7, r4
 801afba:	1c59      	adds	r1, r3, #1
 801afbc:	7011      	strb	r1, [r2, #0]
 801afbe:	001a      	movs	r2, r3
 801afc0:	68bb      	ldr	r3, [r7, #8]
 801afc2:	189b      	adds	r3, r3, r2
 801afc4:	2200      	movs	r2, #0
 801afc6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801afc8:	68fb      	ldr	r3, [r7, #12]
 801afca:	781b      	ldrb	r3, [r3, #0]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d1e3      	bne.n	801af98 <USBD_GetString+0x5c>
    }
  }
}
 801afd0:	46c0      	nop			@ (mov r8, r8)
 801afd2:	46bd      	mov	sp, r7
 801afd4:	b007      	add	sp, #28
 801afd6:	bd90      	pop	{r4, r7, pc}

0801afd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801afd8:	b580      	push	{r7, lr}
 801afda:	b084      	sub	sp, #16
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801afe0:	230f      	movs	r3, #15
 801afe2:	18fb      	adds	r3, r7, r3
 801afe4:	2200      	movs	r2, #0
 801afe6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801afe8:	e008      	b.n	801affc <USBD_GetLen+0x24>
  {
    len++;
 801afea:	210f      	movs	r1, #15
 801afec:	187b      	adds	r3, r7, r1
 801afee:	781a      	ldrb	r2, [r3, #0]
 801aff0:	187b      	adds	r3, r7, r1
 801aff2:	3201      	adds	r2, #1
 801aff4:	701a      	strb	r2, [r3, #0]
    buf++;
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	3301      	adds	r3, #1
 801affa:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	781b      	ldrb	r3, [r3, #0]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d1f2      	bne.n	801afea <USBD_GetLen+0x12>
  }

  return len;
 801b004:	230f      	movs	r3, #15
 801b006:	18fb      	adds	r3, r7, r3
 801b008:	781b      	ldrb	r3, [r3, #0]
}
 801b00a:	0018      	movs	r0, r3
 801b00c:	46bd      	mov	sp, r7
 801b00e:	b004      	add	sp, #16
 801b010:	bd80      	pop	{r7, pc}

0801b012 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801b012:	b580      	push	{r7, lr}
 801b014:	b084      	sub	sp, #16
 801b016:	af00      	add	r7, sp, #0
 801b018:	60f8      	str	r0, [r7, #12]
 801b01a:	60b9      	str	r1, [r7, #8]
 801b01c:	1dbb      	adds	r3, r7, #6
 801b01e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b020:	68fa      	ldr	r2, [r7, #12]
 801b022:	23a5      	movs	r3, #165	@ 0xa5
 801b024:	009b      	lsls	r3, r3, #2
 801b026:	2102      	movs	r1, #2
 801b028:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801b02a:	1dbb      	adds	r3, r7, #6
 801b02c:	881a      	ldrh	r2, [r3, #0]
 801b02e:	68fb      	ldr	r3, [r7, #12]
 801b030:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801b032:	1dbb      	adds	r3, r7, #6
 801b034:	881a      	ldrh	r2, [r3, #0]
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b03a:	1dbb      	adds	r3, r7, #6
 801b03c:	881b      	ldrh	r3, [r3, #0]
 801b03e:	68ba      	ldr	r2, [r7, #8]
 801b040:	68f8      	ldr	r0, [r7, #12]
 801b042:	2100      	movs	r1, #0
 801b044:	f000 fd41 	bl	801baca <USBD_LL_Transmit>

  return USBD_OK;
 801b048:	2300      	movs	r3, #0
}
 801b04a:	0018      	movs	r0, r3
 801b04c:	46bd      	mov	sp, r7
 801b04e:	b004      	add	sp, #16
 801b050:	bd80      	pop	{r7, pc}

0801b052 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801b052:	b580      	push	{r7, lr}
 801b054:	b084      	sub	sp, #16
 801b056:	af00      	add	r7, sp, #0
 801b058:	60f8      	str	r0, [r7, #12]
 801b05a:	60b9      	str	r1, [r7, #8]
 801b05c:	1dbb      	adds	r3, r7, #6
 801b05e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b060:	1dbb      	adds	r3, r7, #6
 801b062:	881b      	ldrh	r3, [r3, #0]
 801b064:	68ba      	ldr	r2, [r7, #8]
 801b066:	68f8      	ldr	r0, [r7, #12]
 801b068:	2100      	movs	r1, #0
 801b06a:	f000 fd2e 	bl	801baca <USBD_LL_Transmit>

  return USBD_OK;
 801b06e:	2300      	movs	r3, #0
}
 801b070:	0018      	movs	r0, r3
 801b072:	46bd      	mov	sp, r7
 801b074:	b004      	add	sp, #16
 801b076:	bd80      	pop	{r7, pc}

0801b078 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b084      	sub	sp, #16
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	60f8      	str	r0, [r7, #12]
 801b080:	60b9      	str	r1, [r7, #8]
 801b082:	1dbb      	adds	r3, r7, #6
 801b084:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b086:	68fa      	ldr	r2, [r7, #12]
 801b088:	23a5      	movs	r3, #165	@ 0xa5
 801b08a:	009b      	lsls	r3, r3, #2
 801b08c:	2103      	movs	r1, #3
 801b08e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801b090:	1dbb      	adds	r3, r7, #6
 801b092:	8819      	ldrh	r1, [r3, #0]
 801b094:	68fa      	ldr	r2, [r7, #12]
 801b096:	23ae      	movs	r3, #174	@ 0xae
 801b098:	005b      	lsls	r3, r3, #1
 801b09a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801b09c:	1dbb      	adds	r3, r7, #6
 801b09e:	8819      	ldrh	r1, [r3, #0]
 801b0a0:	68fa      	ldr	r2, [r7, #12]
 801b0a2:	23b0      	movs	r3, #176	@ 0xb0
 801b0a4:	005b      	lsls	r3, r3, #1
 801b0a6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b0a8:	1dbb      	adds	r3, r7, #6
 801b0aa:	881b      	ldrh	r3, [r3, #0]
 801b0ac:	68ba      	ldr	r2, [r7, #8]
 801b0ae:	68f8      	ldr	r0, [r7, #12]
 801b0b0:	2100      	movs	r1, #0
 801b0b2:	f000 fd41 	bl	801bb38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b0b6:	2300      	movs	r3, #0
}
 801b0b8:	0018      	movs	r0, r3
 801b0ba:	46bd      	mov	sp, r7
 801b0bc:	b004      	add	sp, #16
 801b0be:	bd80      	pop	{r7, pc}

0801b0c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801b0c0:	b580      	push	{r7, lr}
 801b0c2:	b084      	sub	sp, #16
 801b0c4:	af00      	add	r7, sp, #0
 801b0c6:	60f8      	str	r0, [r7, #12]
 801b0c8:	60b9      	str	r1, [r7, #8]
 801b0ca:	1dbb      	adds	r3, r7, #6
 801b0cc:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b0ce:	1dbb      	adds	r3, r7, #6
 801b0d0:	881b      	ldrh	r3, [r3, #0]
 801b0d2:	68ba      	ldr	r2, [r7, #8]
 801b0d4:	68f8      	ldr	r0, [r7, #12]
 801b0d6:	2100      	movs	r1, #0
 801b0d8:	f000 fd2e 	bl	801bb38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b0dc:	2300      	movs	r3, #0
}
 801b0de:	0018      	movs	r0, r3
 801b0e0:	46bd      	mov	sp, r7
 801b0e2:	b004      	add	sp, #16
 801b0e4:	bd80      	pop	{r7, pc}

0801b0e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b0e6:	b580      	push	{r7, lr}
 801b0e8:	b082      	sub	sp, #8
 801b0ea:	af00      	add	r7, sp, #0
 801b0ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b0ee:	687a      	ldr	r2, [r7, #4]
 801b0f0:	23a5      	movs	r3, #165	@ 0xa5
 801b0f2:	009b      	lsls	r3, r3, #2
 801b0f4:	2104      	movs	r1, #4
 801b0f6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b0f8:	6878      	ldr	r0, [r7, #4]
 801b0fa:	2300      	movs	r3, #0
 801b0fc:	2200      	movs	r2, #0
 801b0fe:	2100      	movs	r1, #0
 801b100:	f000 fce3 	bl	801baca <USBD_LL_Transmit>

  return USBD_OK;
 801b104:	2300      	movs	r3, #0
}
 801b106:	0018      	movs	r0, r3
 801b108:	46bd      	mov	sp, r7
 801b10a:	b002      	add	sp, #8
 801b10c:	bd80      	pop	{r7, pc}

0801b10e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b10e:	b580      	push	{r7, lr}
 801b110:	b082      	sub	sp, #8
 801b112:	af00      	add	r7, sp, #0
 801b114:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b116:	687a      	ldr	r2, [r7, #4]
 801b118:	23a5      	movs	r3, #165	@ 0xa5
 801b11a:	009b      	lsls	r3, r3, #2
 801b11c:	2105      	movs	r1, #5
 801b11e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b120:	6878      	ldr	r0, [r7, #4]
 801b122:	2300      	movs	r3, #0
 801b124:	2200      	movs	r2, #0
 801b126:	2100      	movs	r1, #0
 801b128:	f000 fd06 	bl	801bb38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b12c:	2300      	movs	r3, #0
}
 801b12e:	0018      	movs	r0, r3
 801b130:	46bd      	mov	sp, r7
 801b132:	b002      	add	sp, #8
 801b134:	bd80      	pop	{r7, pc}
	...

0801b138 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b138:	b580      	push	{r7, lr}
 801b13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b13c:	4914      	ldr	r1, [pc, #80]	@ (801b190 <MX_USB_DEVICE_Init+0x58>)
 801b13e:	4b15      	ldr	r3, [pc, #84]	@ (801b194 <MX_USB_DEVICE_Init+0x5c>)
 801b140:	2200      	movs	r2, #0
 801b142:	0018      	movs	r0, r3
 801b144:	f7fe fdec 	bl	8019d20 <USBD_Init>
 801b148:	1e03      	subs	r3, r0, #0
 801b14a:	d001      	beq.n	801b150 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b14c:	f7ec faf8 	bl	8007740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b150:	4a11      	ldr	r2, [pc, #68]	@ (801b198 <MX_USB_DEVICE_Init+0x60>)
 801b152:	4b10      	ldr	r3, [pc, #64]	@ (801b194 <MX_USB_DEVICE_Init+0x5c>)
 801b154:	0011      	movs	r1, r2
 801b156:	0018      	movs	r0, r3
 801b158:	f7fe fe13 	bl	8019d82 <USBD_RegisterClass>
 801b15c:	1e03      	subs	r3, r0, #0
 801b15e:	d001      	beq.n	801b164 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801b160:	f7ec faee 	bl	8007740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b164:	4a0d      	ldr	r2, [pc, #52]	@ (801b19c <MX_USB_DEVICE_Init+0x64>)
 801b166:	4b0b      	ldr	r3, [pc, #44]	@ (801b194 <MX_USB_DEVICE_Init+0x5c>)
 801b168:	0011      	movs	r1, r2
 801b16a:	0018      	movs	r0, r3
 801b16c:	f7fe fd28 	bl	8019bc0 <USBD_CDC_RegisterInterface>
 801b170:	1e03      	subs	r3, r0, #0
 801b172:	d001      	beq.n	801b178 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801b174:	f7ec fae4 	bl	8007740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b178:	4b06      	ldr	r3, [pc, #24]	@ (801b194 <MX_USB_DEVICE_Init+0x5c>)
 801b17a:	0018      	movs	r0, r3
 801b17c:	f7fe fe21 	bl	8019dc2 <USBD_Start>
 801b180:	1e03      	subs	r3, r0, #0
 801b182:	d001      	beq.n	801b188 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801b184:	f7ec fadc 	bl	8007740 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801b188:	46c0      	nop			@ (mov r8, r8)
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}
 801b18e:	46c0      	nop			@ (mov r8, r8)
 801b190:	20000204 	.word	0x20000204
 801b194:	20002520 	.word	0x20002520
 801b198:	200000f0 	.word	0x200000f0
 801b19c:	200001f4 	.word	0x200001f4

0801b1a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801b1a0:	b580      	push	{r7, lr}
 801b1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801b1a4:	4907      	ldr	r1, [pc, #28]	@ (801b1c4 <CDC_Init_FS+0x24>)
 801b1a6:	4b08      	ldr	r3, [pc, #32]	@ (801b1c8 <CDC_Init_FS+0x28>)
 801b1a8:	2200      	movs	r2, #0
 801b1aa:	0018      	movs	r0, r3
 801b1ac:	f7fe fd23 	bl	8019bf6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801b1b0:	4a06      	ldr	r2, [pc, #24]	@ (801b1cc <CDC_Init_FS+0x2c>)
 801b1b2:	4b05      	ldr	r3, [pc, #20]	@ (801b1c8 <CDC_Init_FS+0x28>)
 801b1b4:	0011      	movs	r1, r2
 801b1b6:	0018      	movs	r0, r3
 801b1b8:	f7fe fd39 	bl	8019c2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801b1bc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801b1be:	0018      	movs	r0, r3
 801b1c0:	46bd      	mov	sp, r7
 801b1c2:	bd80      	pop	{r7, pc}
 801b1c4:	20002ca4 	.word	0x20002ca4
 801b1c8:	20002520 	.word	0x20002520
 801b1cc:	200028a4 	.word	0x200028a4

0801b1d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801b1d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801b1d6:	0018      	movs	r0, r3
 801b1d8:	46bd      	mov	sp, r7
 801b1da:	bd80      	pop	{r7, pc}

0801b1dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801b1dc:	b580      	push	{r7, lr}
 801b1de:	b082      	sub	sp, #8
 801b1e0:	af00      	add	r7, sp, #0
 801b1e2:	6039      	str	r1, [r7, #0]
 801b1e4:	0011      	movs	r1, r2
 801b1e6:	1dfb      	adds	r3, r7, #7
 801b1e8:	1c02      	adds	r2, r0, #0
 801b1ea:	701a      	strb	r2, [r3, #0]
 801b1ec:	1d3b      	adds	r3, r7, #4
 801b1ee:	1c0a      	adds	r2, r1, #0
 801b1f0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801b1f2:	1dfb      	adds	r3, r7, #7
 801b1f4:	781b      	ldrb	r3, [r3, #0]
 801b1f6:	2b23      	cmp	r3, #35	@ 0x23
 801b1f8:	d804      	bhi.n	801b204 <CDC_Control_FS+0x28>
 801b1fa:	009a      	lsls	r2, r3, #2
 801b1fc:	4b04      	ldr	r3, [pc, #16]	@ (801b210 <CDC_Control_FS+0x34>)
 801b1fe:	18d3      	adds	r3, r2, r3
 801b200:	681b      	ldr	r3, [r3, #0]
 801b202:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801b204:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801b206:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801b208:	0018      	movs	r0, r3
 801b20a:	46bd      	mov	sp, r7
 801b20c:	b002      	add	sp, #8
 801b20e:	bd80      	pop	{r7, pc}
 801b210:	08023444 	.word	0x08023444

0801b214 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801b214:	b580      	push	{r7, lr}
 801b216:	b082      	sub	sp, #8
 801b218:	af00      	add	r7, sp, #0
 801b21a:	6078      	str	r0, [r7, #4]
 801b21c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801b21e:	4b12      	ldr	r3, [pc, #72]	@ (801b268 <CDC_Receive_FS+0x54>)
 801b220:	781b      	ldrb	r3, [r3, #0]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d013      	beq.n	801b24e <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801b226:	683b      	ldr	r3, [r7, #0]
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	b29a      	uxth	r2, r3
 801b22c:	2301      	movs	r3, #1
 801b22e:	425b      	negs	r3, r3
 801b230:	6879      	ldr	r1, [r7, #4]
 801b232:	480e      	ldr	r0, [pc, #56]	@ (801b26c <CDC_Receive_FS+0x58>)
 801b234:	f7fa fa46 	bl	80156c4 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801b238:	687a      	ldr	r2, [r7, #4]
 801b23a:	4b0d      	ldr	r3, [pc, #52]	@ (801b270 <CDC_Receive_FS+0x5c>)
 801b23c:	0011      	movs	r1, r2
 801b23e:	0018      	movs	r0, r3
 801b240:	f7fe fcf5 	bl	8019c2e <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b244:	4b0a      	ldr	r3, [pc, #40]	@ (801b270 <CDC_Receive_FS+0x5c>)
 801b246:	0018      	movs	r0, r3
 801b248:	f7fe fd3c 	bl	8019cc4 <USBD_CDC_ReceivePacket>
 801b24c:	e006      	b.n	801b25c <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801b24e:	683b      	ldr	r3, [r7, #0]
 801b250:	681a      	ldr	r2, [r3, #0]
 801b252:	4b08      	ldr	r3, [pc, #32]	@ (801b274 <CDC_Receive_FS+0x60>)
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	18d2      	adds	r2, r2, r3
 801b258:	4b06      	ldr	r3, [pc, #24]	@ (801b274 <CDC_Receive_FS+0x60>)
 801b25a:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801b25c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801b25e:	0018      	movs	r0, r3
 801b260:	46bd      	mov	sp, r7
 801b262:	b002      	add	sp, #8
 801b264:	bd80      	pop	{r7, pc}
 801b266:	46c0      	nop			@ (mov r8, r8)
 801b268:	200027e4 	.word	0x200027e4
 801b26c:	200027e8 	.word	0x200027e8
 801b270:	20002520 	.word	0x20002520
 801b274:	200028a0 	.word	0x200028a0

0801b278 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801b278:	b5b0      	push	{r4, r5, r7, lr}
 801b27a:	b084      	sub	sp, #16
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	6078      	str	r0, [r7, #4]
 801b280:	000a      	movs	r2, r1
 801b282:	1cbb      	adds	r3, r7, #2
 801b284:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801b286:	230f      	movs	r3, #15
 801b288:	18fb      	adds	r3, r7, r3
 801b28a:	2200      	movs	r2, #0
 801b28c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801b28e:	4a11      	ldr	r2, [pc, #68]	@ (801b2d4 <CDC_Transmit_FS+0x5c>)
 801b290:	23ae      	movs	r3, #174	@ 0xae
 801b292:	009b      	lsls	r3, r3, #2
 801b294:	58d3      	ldr	r3, [r2, r3]
 801b296:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801b298:	68ba      	ldr	r2, [r7, #8]
 801b29a:	2385      	movs	r3, #133	@ 0x85
 801b29c:	009b      	lsls	r3, r3, #2
 801b29e:	58d3      	ldr	r3, [r2, r3]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d001      	beq.n	801b2a8 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	e010      	b.n	801b2ca <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801b2a8:	1cbb      	adds	r3, r7, #2
 801b2aa:	881a      	ldrh	r2, [r3, #0]
 801b2ac:	6879      	ldr	r1, [r7, #4]
 801b2ae:	4b09      	ldr	r3, [pc, #36]	@ (801b2d4 <CDC_Transmit_FS+0x5c>)
 801b2b0:	0018      	movs	r0, r3
 801b2b2:	f7fe fca0 	bl	8019bf6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801b2b6:	250f      	movs	r5, #15
 801b2b8:	197c      	adds	r4, r7, r5
 801b2ba:	4b06      	ldr	r3, [pc, #24]	@ (801b2d4 <CDC_Transmit_FS+0x5c>)
 801b2bc:	0018      	movs	r0, r3
 801b2be:	f7fe fcca 	bl	8019c56 <USBD_CDC_TransmitPacket>
 801b2c2:	0003      	movs	r3, r0
 801b2c4:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801b2c6:	197b      	adds	r3, r7, r5
 801b2c8:	781b      	ldrb	r3, [r3, #0]
}
 801b2ca:	0018      	movs	r0, r3
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	b004      	add	sp, #16
 801b2d0:	bdb0      	pop	{r4, r5, r7, pc}
 801b2d2:	46c0      	nop			@ (mov r8, r8)
 801b2d4:	20002520 	.word	0x20002520

0801b2d8 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	af00      	add	r7, sp, #0
  ESPProg = true;
 801b2dc:	4b02      	ldr	r3, [pc, #8]	@ (801b2e8 <EnableESPProg+0x10>)
 801b2de:	2201      	movs	r2, #1
 801b2e0:	701a      	strb	r2, [r3, #0]
}
 801b2e2:	46c0      	nop			@ (mov r8, r8)
 801b2e4:	46bd      	mov	sp, r7
 801b2e6:	bd80      	pop	{r7, pc}
 801b2e8:	200027e4 	.word	0x200027e4

0801b2ec <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801b2ec:	b580      	push	{r7, lr}
 801b2ee:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801b2f0:	4b01      	ldr	r3, [pc, #4]	@ (801b2f8 <GetUsbRxPointer+0xc>)
}
 801b2f2:	0018      	movs	r0, r3
 801b2f4:	46bd      	mov	sp, r7
 801b2f6:	bd80      	pop	{r7, pc}
 801b2f8:	200028a4 	.word	0x200028a4

0801b2fc <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801b2fc:	b580      	push	{r7, lr}
 801b2fe:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801b300:	4b07      	ldr	r3, [pc, #28]	@ (801b320 <ResetUsbRxDataSize+0x24>)
 801b302:	2200      	movs	r2, #0
 801b304:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801b306:	4a07      	ldr	r2, [pc, #28]	@ (801b324 <ResetUsbRxDataSize+0x28>)
 801b308:	4b07      	ldr	r3, [pc, #28]	@ (801b328 <ResetUsbRxDataSize+0x2c>)
 801b30a:	0011      	movs	r1, r2
 801b30c:	0018      	movs	r0, r3
 801b30e:	f7fe fc8e 	bl	8019c2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b312:	4b05      	ldr	r3, [pc, #20]	@ (801b328 <ResetUsbRxDataSize+0x2c>)
 801b314:	0018      	movs	r0, r3
 801b316:	f7fe fcd5 	bl	8019cc4 <USBD_CDC_ReceivePacket>
}
 801b31a:	46c0      	nop			@ (mov r8, r8)
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bd80      	pop	{r7, pc}
 801b320:	200028a0 	.word	0x200028a0
 801b324:	200028a4 	.word	0x200028a4
 801b328:	20002520 	.word	0x20002520

0801b32c <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801b330:	4b02      	ldr	r3, [pc, #8]	@ (801b33c <GetUsbRxDataSize+0x10>)
 801b332:	681b      	ldr	r3, [r3, #0]
}
 801b334:	0018      	movs	r0, r3
 801b336:	46bd      	mov	sp, r7
 801b338:	bd80      	pop	{r7, pc}
 801b33a:	46c0      	nop			@ (mov r8, r8)
 801b33c:	200028a0 	.word	0x200028a0

0801b340 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801b348:	687a      	ldr	r2, [r7, #4]
 801b34a:	4b07      	ldr	r3, [pc, #28]	@ (801b368 <GetUsbRxNextChunk+0x28>)
 801b34c:	18d2      	adds	r2, r2, r3
 801b34e:	4b07      	ldr	r3, [pc, #28]	@ (801b36c <GetUsbRxNextChunk+0x2c>)
 801b350:	0011      	movs	r1, r2
 801b352:	0018      	movs	r0, r3
 801b354:	f7fe fc6b 	bl	8019c2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801b358:	4b04      	ldr	r3, [pc, #16]	@ (801b36c <GetUsbRxNextChunk+0x2c>)
 801b35a:	0018      	movs	r0, r3
 801b35c:	f7fe fcb2 	bl	8019cc4 <USBD_CDC_ReceivePacket>
}
 801b360:	46c0      	nop			@ (mov r8, r8)
 801b362:	46bd      	mov	sp, r7
 801b364:	b002      	add	sp, #8
 801b366:	bd80      	pop	{r7, pc}
 801b368:	200028a4 	.word	0x200028a4
 801b36c:	20002520 	.word	0x20002520

0801b370 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b082      	sub	sp, #8
 801b374:	af00      	add	r7, sp, #0
 801b376:	0002      	movs	r2, r0
 801b378:	6039      	str	r1, [r7, #0]
 801b37a:	1dfb      	adds	r3, r7, #7
 801b37c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801b37e:	683b      	ldr	r3, [r7, #0]
 801b380:	2212      	movs	r2, #18
 801b382:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801b384:	4b02      	ldr	r3, [pc, #8]	@ (801b390 <USBD_FS_DeviceDescriptor+0x20>)
}
 801b386:	0018      	movs	r0, r3
 801b388:	46bd      	mov	sp, r7
 801b38a:	b002      	add	sp, #8
 801b38c:	bd80      	pop	{r7, pc}
 801b38e:	46c0      	nop			@ (mov r8, r8)
 801b390:	20000220 	.word	0x20000220

0801b394 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b082      	sub	sp, #8
 801b398:	af00      	add	r7, sp, #0
 801b39a:	0002      	movs	r2, r0
 801b39c:	6039      	str	r1, [r7, #0]
 801b39e:	1dfb      	adds	r3, r7, #7
 801b3a0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801b3a2:	683b      	ldr	r3, [r7, #0]
 801b3a4:	2204      	movs	r2, #4
 801b3a6:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801b3a8:	4b02      	ldr	r3, [pc, #8]	@ (801b3b4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801b3aa:	0018      	movs	r0, r3
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	b002      	add	sp, #8
 801b3b0:	bd80      	pop	{r7, pc}
 801b3b2:	46c0      	nop			@ (mov r8, r8)
 801b3b4:	20000234 	.word	0x20000234

0801b3b8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b082      	sub	sp, #8
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	0002      	movs	r2, r0
 801b3c0:	6039      	str	r1, [r7, #0]
 801b3c2:	1dfb      	adds	r3, r7, #7
 801b3c4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801b3c6:	1dfb      	adds	r3, r7, #7
 801b3c8:	781b      	ldrb	r3, [r3, #0]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d106      	bne.n	801b3dc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b3ce:	683a      	ldr	r2, [r7, #0]
 801b3d0:	4908      	ldr	r1, [pc, #32]	@ (801b3f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801b3d2:	4b09      	ldr	r3, [pc, #36]	@ (801b3f8 <USBD_FS_ProductStrDescriptor+0x40>)
 801b3d4:	0018      	movs	r0, r3
 801b3d6:	f7ff fdb1 	bl	801af3c <USBD_GetString>
 801b3da:	e005      	b.n	801b3e8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801b3dc:	683a      	ldr	r2, [r7, #0]
 801b3de:	4905      	ldr	r1, [pc, #20]	@ (801b3f4 <USBD_FS_ProductStrDescriptor+0x3c>)
 801b3e0:	4b05      	ldr	r3, [pc, #20]	@ (801b3f8 <USBD_FS_ProductStrDescriptor+0x40>)
 801b3e2:	0018      	movs	r0, r3
 801b3e4:	f7ff fdaa 	bl	801af3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b3e8:	4b02      	ldr	r3, [pc, #8]	@ (801b3f4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801b3ea:	0018      	movs	r0, r3
 801b3ec:	46bd      	mov	sp, r7
 801b3ee:	b002      	add	sp, #8
 801b3f0:	bd80      	pop	{r7, pc}
 801b3f2:	46c0      	nop			@ (mov r8, r8)
 801b3f4:	200030a4 	.word	0x200030a4
 801b3f8:	08022efc 	.word	0x08022efc

0801b3fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b3fc:	b580      	push	{r7, lr}
 801b3fe:	b082      	sub	sp, #8
 801b400:	af00      	add	r7, sp, #0
 801b402:	0002      	movs	r2, r0
 801b404:	6039      	str	r1, [r7, #0]
 801b406:	1dfb      	adds	r3, r7, #7
 801b408:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801b40a:	683a      	ldr	r2, [r7, #0]
 801b40c:	4904      	ldr	r1, [pc, #16]	@ (801b420 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801b40e:	4b05      	ldr	r3, [pc, #20]	@ (801b424 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801b410:	0018      	movs	r0, r3
 801b412:	f7ff fd93 	bl	801af3c <USBD_GetString>
  return USBD_StrDesc;
 801b416:	4b02      	ldr	r3, [pc, #8]	@ (801b420 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801b418:	0018      	movs	r0, r3
 801b41a:	46bd      	mov	sp, r7
 801b41c:	b002      	add	sp, #8
 801b41e:	bd80      	pop	{r7, pc}
 801b420:	200030a4 	.word	0x200030a4
 801b424:	08022f14 	.word	0x08022f14

0801b428 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b082      	sub	sp, #8
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	0002      	movs	r2, r0
 801b430:	6039      	str	r1, [r7, #0]
 801b432:	1dfb      	adds	r3, r7, #7
 801b434:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801b436:	683b      	ldr	r3, [r7, #0]
 801b438:	221a      	movs	r2, #26
 801b43a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801b43c:	f000 f84c 	bl	801b4d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801b440:	4b02      	ldr	r3, [pc, #8]	@ (801b44c <USBD_FS_SerialStrDescriptor+0x24>)
}
 801b442:	0018      	movs	r0, r3
 801b444:	46bd      	mov	sp, r7
 801b446:	b002      	add	sp, #8
 801b448:	bd80      	pop	{r7, pc}
 801b44a:	46c0      	nop			@ (mov r8, r8)
 801b44c:	20000238 	.word	0x20000238

0801b450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b450:	b580      	push	{r7, lr}
 801b452:	b082      	sub	sp, #8
 801b454:	af00      	add	r7, sp, #0
 801b456:	0002      	movs	r2, r0
 801b458:	6039      	str	r1, [r7, #0]
 801b45a:	1dfb      	adds	r3, r7, #7
 801b45c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801b45e:	1dfb      	adds	r3, r7, #7
 801b460:	781b      	ldrb	r3, [r3, #0]
 801b462:	2b00      	cmp	r3, #0
 801b464:	d106      	bne.n	801b474 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b466:	683a      	ldr	r2, [r7, #0]
 801b468:	4908      	ldr	r1, [pc, #32]	@ (801b48c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801b46a:	4b09      	ldr	r3, [pc, #36]	@ (801b490 <USBD_FS_ConfigStrDescriptor+0x40>)
 801b46c:	0018      	movs	r0, r3
 801b46e:	f7ff fd65 	bl	801af3c <USBD_GetString>
 801b472:	e005      	b.n	801b480 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801b474:	683a      	ldr	r2, [r7, #0]
 801b476:	4905      	ldr	r1, [pc, #20]	@ (801b48c <USBD_FS_ConfigStrDescriptor+0x3c>)
 801b478:	4b05      	ldr	r3, [pc, #20]	@ (801b490 <USBD_FS_ConfigStrDescriptor+0x40>)
 801b47a:	0018      	movs	r0, r3
 801b47c:	f7ff fd5e 	bl	801af3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b480:	4b02      	ldr	r3, [pc, #8]	@ (801b48c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801b482:	0018      	movs	r0, r3
 801b484:	46bd      	mov	sp, r7
 801b486:	b002      	add	sp, #8
 801b488:	bd80      	pop	{r7, pc}
 801b48a:	46c0      	nop			@ (mov r8, r8)
 801b48c:	200030a4 	.word	0x200030a4
 801b490:	08022f28 	.word	0x08022f28

0801b494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801b494:	b580      	push	{r7, lr}
 801b496:	b082      	sub	sp, #8
 801b498:	af00      	add	r7, sp, #0
 801b49a:	0002      	movs	r2, r0
 801b49c:	6039      	str	r1, [r7, #0]
 801b49e:	1dfb      	adds	r3, r7, #7
 801b4a0:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801b4a2:	1dfb      	adds	r3, r7, #7
 801b4a4:	781b      	ldrb	r3, [r3, #0]
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	d106      	bne.n	801b4b8 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b4aa:	683a      	ldr	r2, [r7, #0]
 801b4ac:	4908      	ldr	r1, [pc, #32]	@ (801b4d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801b4ae:	4b09      	ldr	r3, [pc, #36]	@ (801b4d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801b4b0:	0018      	movs	r0, r3
 801b4b2:	f7ff fd43 	bl	801af3c <USBD_GetString>
 801b4b6:	e005      	b.n	801b4c4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801b4b8:	683a      	ldr	r2, [r7, #0]
 801b4ba:	4905      	ldr	r1, [pc, #20]	@ (801b4d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801b4bc:	4b05      	ldr	r3, [pc, #20]	@ (801b4d4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801b4be:	0018      	movs	r0, r3
 801b4c0:	f7ff fd3c 	bl	801af3c <USBD_GetString>
  }
  return USBD_StrDesc;
 801b4c4:	4b02      	ldr	r3, [pc, #8]	@ (801b4d0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801b4c6:	0018      	movs	r0, r3
 801b4c8:	46bd      	mov	sp, r7
 801b4ca:	b002      	add	sp, #8
 801b4cc:	bd80      	pop	{r7, pc}
 801b4ce:	46c0      	nop			@ (mov r8, r8)
 801b4d0:	200030a4 	.word	0x200030a4
 801b4d4:	08022f34 	.word	0x08022f34

0801b4d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b084      	sub	sp, #16
 801b4dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801b4de:	4b10      	ldr	r3, [pc, #64]	@ (801b520 <Get_SerialNum+0x48>)
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801b4e4:	4b0f      	ldr	r3, [pc, #60]	@ (801b524 <Get_SerialNum+0x4c>)
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801b4ea:	4b0f      	ldr	r3, [pc, #60]	@ (801b528 <Get_SerialNum+0x50>)
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801b4f0:	68fa      	ldr	r2, [r7, #12]
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	18d3      	adds	r3, r2, r3
 801b4f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801b4f8:	68fb      	ldr	r3, [r7, #12]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d00b      	beq.n	801b516 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801b4fe:	490b      	ldr	r1, [pc, #44]	@ (801b52c <Get_SerialNum+0x54>)
 801b500:	68fb      	ldr	r3, [r7, #12]
 801b502:	2208      	movs	r2, #8
 801b504:	0018      	movs	r0, r3
 801b506:	f000 f815 	bl	801b534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801b50a:	4909      	ldr	r1, [pc, #36]	@ (801b530 <Get_SerialNum+0x58>)
 801b50c:	68bb      	ldr	r3, [r7, #8]
 801b50e:	2204      	movs	r2, #4
 801b510:	0018      	movs	r0, r3
 801b512:	f000 f80f 	bl	801b534 <IntToUnicode>
  }
}
 801b516:	46c0      	nop			@ (mov r8, r8)
 801b518:	46bd      	mov	sp, r7
 801b51a:	b004      	add	sp, #16
 801b51c:	bd80      	pop	{r7, pc}
 801b51e:	46c0      	nop			@ (mov r8, r8)
 801b520:	1ff80050 	.word	0x1ff80050
 801b524:	1ff80054 	.word	0x1ff80054
 801b528:	1ff80058 	.word	0x1ff80058
 801b52c:	2000023a 	.word	0x2000023a
 801b530:	2000024a 	.word	0x2000024a

0801b534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b086      	sub	sp, #24
 801b538:	af00      	add	r7, sp, #0
 801b53a:	60f8      	str	r0, [r7, #12]
 801b53c:	60b9      	str	r1, [r7, #8]
 801b53e:	1dfb      	adds	r3, r7, #7
 801b540:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801b542:	2117      	movs	r1, #23
 801b544:	187b      	adds	r3, r7, r1
 801b546:	2200      	movs	r2, #0
 801b548:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801b54a:	187b      	adds	r3, r7, r1
 801b54c:	2200      	movs	r2, #0
 801b54e:	701a      	strb	r2, [r3, #0]
 801b550:	e02f      	b.n	801b5b2 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801b552:	68fb      	ldr	r3, [r7, #12]
 801b554:	0f1b      	lsrs	r3, r3, #28
 801b556:	2b09      	cmp	r3, #9
 801b558:	d80d      	bhi.n	801b576 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801b55a:	68fb      	ldr	r3, [r7, #12]
 801b55c:	0f1b      	lsrs	r3, r3, #28
 801b55e:	b2da      	uxtb	r2, r3
 801b560:	2317      	movs	r3, #23
 801b562:	18fb      	adds	r3, r7, r3
 801b564:	781b      	ldrb	r3, [r3, #0]
 801b566:	005b      	lsls	r3, r3, #1
 801b568:	0019      	movs	r1, r3
 801b56a:	68bb      	ldr	r3, [r7, #8]
 801b56c:	185b      	adds	r3, r3, r1
 801b56e:	3230      	adds	r2, #48	@ 0x30
 801b570:	b2d2      	uxtb	r2, r2
 801b572:	701a      	strb	r2, [r3, #0]
 801b574:	e00c      	b.n	801b590 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	0f1b      	lsrs	r3, r3, #28
 801b57a:	b2da      	uxtb	r2, r3
 801b57c:	2317      	movs	r3, #23
 801b57e:	18fb      	adds	r3, r7, r3
 801b580:	781b      	ldrb	r3, [r3, #0]
 801b582:	005b      	lsls	r3, r3, #1
 801b584:	0019      	movs	r1, r3
 801b586:	68bb      	ldr	r3, [r7, #8]
 801b588:	185b      	adds	r3, r3, r1
 801b58a:	3237      	adds	r2, #55	@ 0x37
 801b58c:	b2d2      	uxtb	r2, r2
 801b58e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	011b      	lsls	r3, r3, #4
 801b594:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801b596:	2117      	movs	r1, #23
 801b598:	187b      	adds	r3, r7, r1
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	005b      	lsls	r3, r3, #1
 801b59e:	3301      	adds	r3, #1
 801b5a0:	68ba      	ldr	r2, [r7, #8]
 801b5a2:	18d3      	adds	r3, r2, r3
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801b5a8:	187b      	adds	r3, r7, r1
 801b5aa:	781a      	ldrb	r2, [r3, #0]
 801b5ac:	187b      	adds	r3, r7, r1
 801b5ae:	3201      	adds	r2, #1
 801b5b0:	701a      	strb	r2, [r3, #0]
 801b5b2:	2317      	movs	r3, #23
 801b5b4:	18fa      	adds	r2, r7, r3
 801b5b6:	1dfb      	adds	r3, r7, #7
 801b5b8:	7812      	ldrb	r2, [r2, #0]
 801b5ba:	781b      	ldrb	r3, [r3, #0]
 801b5bc:	429a      	cmp	r2, r3
 801b5be:	d3c8      	bcc.n	801b552 <IntToUnicode+0x1e>
  }
}
 801b5c0:	46c0      	nop			@ (mov r8, r8)
 801b5c2:	46c0      	nop			@ (mov r8, r8)
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	b006      	add	sp, #24
 801b5c8:	bd80      	pop	{r7, pc}
	...

0801b5cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801b5cc:	b580      	push	{r7, lr}
 801b5ce:	b082      	sub	sp, #8
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	4a0a      	ldr	r2, [pc, #40]	@ (801b604 <HAL_PCD_MspInit+0x38>)
 801b5da:	4293      	cmp	r3, r2
 801b5dc:	d10e      	bne.n	801b5fc <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801b5de:	4b0a      	ldr	r3, [pc, #40]	@ (801b608 <HAL_PCD_MspInit+0x3c>)
 801b5e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801b5e2:	4b09      	ldr	r3, [pc, #36]	@ (801b608 <HAL_PCD_MspInit+0x3c>)
 801b5e4:	2180      	movs	r1, #128	@ 0x80
 801b5e6:	0409      	lsls	r1, r1, #16
 801b5e8:	430a      	orrs	r2, r1
 801b5ea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801b5ec:	2200      	movs	r2, #0
 801b5ee:	2100      	movs	r1, #0
 801b5f0:	201f      	movs	r0, #31
 801b5f2:	f7f2 fc75 	bl	800dee0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801b5f6:	201f      	movs	r0, #31
 801b5f8:	f7f2 fc87 	bl	800df0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801b5fc:	46c0      	nop			@ (mov r8, r8)
 801b5fe:	46bd      	mov	sp, r7
 801b600:	b002      	add	sp, #8
 801b602:	bd80      	pop	{r7, pc}
 801b604:	40005c00 	.word	0x40005c00
 801b608:	40021000 	.word	0x40021000

0801b60c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b082      	sub	sp, #8
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801b614:	687a      	ldr	r2, [r7, #4]
 801b616:	23bc      	movs	r3, #188	@ 0xbc
 801b618:	009b      	lsls	r3, r3, #2
 801b61a:	58d2      	ldr	r2, [r2, r3]
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	21ac      	movs	r1, #172	@ 0xac
 801b620:	0089      	lsls	r1, r1, #2
 801b622:	468c      	mov	ip, r1
 801b624:	4463      	add	r3, ip
 801b626:	0019      	movs	r1, r3
 801b628:	0010      	movs	r0, r2
 801b62a:	f7fe fc1d 	bl	8019e68 <USBD_LL_SetupStage>
}
 801b62e:	46c0      	nop			@ (mov r8, r8)
 801b630:	46bd      	mov	sp, r7
 801b632:	b002      	add	sp, #8
 801b634:	bd80      	pop	{r7, pc}

0801b636 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b636:	b590      	push	{r4, r7, lr}
 801b638:	b083      	sub	sp, #12
 801b63a:	af00      	add	r7, sp, #0
 801b63c:	6078      	str	r0, [r7, #4]
 801b63e:	000a      	movs	r2, r1
 801b640:	1cfb      	adds	r3, r7, #3
 801b642:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801b644:	687a      	ldr	r2, [r7, #4]
 801b646:	23bc      	movs	r3, #188	@ 0xbc
 801b648:	009b      	lsls	r3, r3, #2
 801b64a:	58d4      	ldr	r4, [r2, r3]
 801b64c:	1cfb      	adds	r3, r7, #3
 801b64e:	781a      	ldrb	r2, [r3, #0]
 801b650:	6878      	ldr	r0, [r7, #4]
 801b652:	23be      	movs	r3, #190	@ 0xbe
 801b654:	0059      	lsls	r1, r3, #1
 801b656:	0013      	movs	r3, r2
 801b658:	009b      	lsls	r3, r3, #2
 801b65a:	189b      	adds	r3, r3, r2
 801b65c:	00db      	lsls	r3, r3, #3
 801b65e:	18c3      	adds	r3, r0, r3
 801b660:	185b      	adds	r3, r3, r1
 801b662:	681a      	ldr	r2, [r3, #0]
 801b664:	1cfb      	adds	r3, r7, #3
 801b666:	781b      	ldrb	r3, [r3, #0]
 801b668:	0019      	movs	r1, r3
 801b66a:	0020      	movs	r0, r4
 801b66c:	f7fe fc5a 	bl	8019f24 <USBD_LL_DataOutStage>
}
 801b670:	46c0      	nop			@ (mov r8, r8)
 801b672:	46bd      	mov	sp, r7
 801b674:	b003      	add	sp, #12
 801b676:	bd90      	pop	{r4, r7, pc}

0801b678 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b082      	sub	sp, #8
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
 801b680:	000a      	movs	r2, r1
 801b682:	1cfb      	adds	r3, r7, #3
 801b684:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801b686:	687a      	ldr	r2, [r7, #4]
 801b688:	23bc      	movs	r3, #188	@ 0xbc
 801b68a:	009b      	lsls	r3, r3, #2
 801b68c:	58d0      	ldr	r0, [r2, r3]
 801b68e:	1cfb      	adds	r3, r7, #3
 801b690:	781a      	ldrb	r2, [r3, #0]
 801b692:	6879      	ldr	r1, [r7, #4]
 801b694:	0013      	movs	r3, r2
 801b696:	009b      	lsls	r3, r3, #2
 801b698:	189b      	adds	r3, r3, r2
 801b69a:	00db      	lsls	r3, r3, #3
 801b69c:	18cb      	adds	r3, r1, r3
 801b69e:	333c      	adds	r3, #60	@ 0x3c
 801b6a0:	681a      	ldr	r2, [r3, #0]
 801b6a2:	1cfb      	adds	r3, r7, #3
 801b6a4:	781b      	ldrb	r3, [r3, #0]
 801b6a6:	0019      	movs	r1, r3
 801b6a8:	f7fe fcbe 	bl	801a028 <USBD_LL_DataInStage>
}
 801b6ac:	46c0      	nop			@ (mov r8, r8)
 801b6ae:	46bd      	mov	sp, r7
 801b6b0:	b002      	add	sp, #8
 801b6b2:	bd80      	pop	{r7, pc}

0801b6b4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b082      	sub	sp, #8
 801b6b8:	af00      	add	r7, sp, #0
 801b6ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801b6bc:	687a      	ldr	r2, [r7, #4]
 801b6be:	23bc      	movs	r3, #188	@ 0xbc
 801b6c0:	009b      	lsls	r3, r3, #2
 801b6c2:	58d3      	ldr	r3, [r2, r3]
 801b6c4:	0018      	movs	r0, r3
 801b6c6:	f7fe fdf5 	bl	801a2b4 <USBD_LL_SOF>
}
 801b6ca:	46c0      	nop			@ (mov r8, r8)
 801b6cc:	46bd      	mov	sp, r7
 801b6ce:	b002      	add	sp, #8
 801b6d0:	bd80      	pop	{r7, pc}

0801b6d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b6d2:	b580      	push	{r7, lr}
 801b6d4:	b084      	sub	sp, #16
 801b6d6:	af00      	add	r7, sp, #0
 801b6d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801b6da:	230f      	movs	r3, #15
 801b6dc:	18fb      	adds	r3, r7, r3
 801b6de:	2201      	movs	r2, #1
 801b6e0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	689b      	ldr	r3, [r3, #8]
 801b6e6:	2b02      	cmp	r3, #2
 801b6e8:	d001      	beq.n	801b6ee <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801b6ea:	f7ec f829 	bl	8007740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801b6ee:	687a      	ldr	r2, [r7, #4]
 801b6f0:	23bc      	movs	r3, #188	@ 0xbc
 801b6f2:	009b      	lsls	r3, r3, #2
 801b6f4:	58d2      	ldr	r2, [r2, r3]
 801b6f6:	230f      	movs	r3, #15
 801b6f8:	18fb      	adds	r3, r7, r3
 801b6fa:	781b      	ldrb	r3, [r3, #0]
 801b6fc:	0019      	movs	r1, r3
 801b6fe:	0010      	movs	r0, r2
 801b700:	f7fe fd97 	bl	801a232 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801b704:	687a      	ldr	r2, [r7, #4]
 801b706:	23bc      	movs	r3, #188	@ 0xbc
 801b708:	009b      	lsls	r3, r3, #2
 801b70a:	58d3      	ldr	r3, [r2, r3]
 801b70c:	0018      	movs	r0, r3
 801b70e:	f7fe fd48 	bl	801a1a2 <USBD_LL_Reset>
}
 801b712:	46c0      	nop			@ (mov r8, r8)
 801b714:	46bd      	mov	sp, r7
 801b716:	b004      	add	sp, #16
 801b718:	bd80      	pop	{r7, pc}
	...

0801b71c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b082      	sub	sp, #8
 801b720:	af00      	add	r7, sp, #0
 801b722:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801b724:	687a      	ldr	r2, [r7, #4]
 801b726:	23bc      	movs	r3, #188	@ 0xbc
 801b728:	009b      	lsls	r3, r3, #2
 801b72a:	58d3      	ldr	r3, [r2, r3]
 801b72c:	0018      	movs	r0, r3
 801b72e:	f7fe fd91 	bl	801a254 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	699b      	ldr	r3, [r3, #24]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d005      	beq.n	801b746 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b73a:	4b05      	ldr	r3, [pc, #20]	@ (801b750 <HAL_PCD_SuspendCallback+0x34>)
 801b73c:	691a      	ldr	r2, [r3, #16]
 801b73e:	4b04      	ldr	r3, [pc, #16]	@ (801b750 <HAL_PCD_SuspendCallback+0x34>)
 801b740:	2106      	movs	r1, #6
 801b742:	430a      	orrs	r2, r1
 801b744:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801b746:	46c0      	nop			@ (mov r8, r8)
 801b748:	46bd      	mov	sp, r7
 801b74a:	b002      	add	sp, #8
 801b74c:	bd80      	pop	{r7, pc}
 801b74e:	46c0      	nop			@ (mov r8, r8)
 801b750:	e000ed00 	.word	0xe000ed00

0801b754 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801b754:	b580      	push	{r7, lr}
 801b756:	b082      	sub	sp, #8
 801b758:	af00      	add	r7, sp, #0
 801b75a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	699b      	ldr	r3, [r3, #24]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d007      	beq.n	801b774 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801b764:	4b09      	ldr	r3, [pc, #36]	@ (801b78c <HAL_PCD_ResumeCallback+0x38>)
 801b766:	691a      	ldr	r2, [r3, #16]
 801b768:	4b08      	ldr	r3, [pc, #32]	@ (801b78c <HAL_PCD_ResumeCallback+0x38>)
 801b76a:	2106      	movs	r1, #6
 801b76c:	438a      	bics	r2, r1
 801b76e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801b770:	f000 fa44 	bl	801bbfc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801b774:	687a      	ldr	r2, [r7, #4]
 801b776:	23bc      	movs	r3, #188	@ 0xbc
 801b778:	009b      	lsls	r3, r3, #2
 801b77a:	58d3      	ldr	r3, [r2, r3]
 801b77c:	0018      	movs	r0, r3
 801b77e:	f7fe fd81 	bl	801a284 <USBD_LL_Resume>
}
 801b782:	46c0      	nop			@ (mov r8, r8)
 801b784:	46bd      	mov	sp, r7
 801b786:	b002      	add	sp, #8
 801b788:	bd80      	pop	{r7, pc}
 801b78a:	46c0      	nop			@ (mov r8, r8)
 801b78c:	e000ed00 	.word	0xe000ed00

0801b790 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801b790:	b580      	push	{r7, lr}
 801b792:	b082      	sub	sp, #8
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801b798:	4a2d      	ldr	r2, [pc, #180]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b79a:	23bc      	movs	r3, #188	@ 0xbc
 801b79c:	009b      	lsls	r3, r3, #2
 801b79e:	6879      	ldr	r1, [r7, #4]
 801b7a0:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801b7a2:	687a      	ldr	r2, [r7, #4]
 801b7a4:	23b0      	movs	r3, #176	@ 0xb0
 801b7a6:	009b      	lsls	r3, r3, #2
 801b7a8:	4929      	ldr	r1, [pc, #164]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7aa:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801b7ac:	4b28      	ldr	r3, [pc, #160]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7ae:	4a29      	ldr	r2, [pc, #164]	@ (801b854 <USBD_LL_Init+0xc4>)
 801b7b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801b7b2:	4b27      	ldr	r3, [pc, #156]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7b4:	2208      	movs	r2, #8
 801b7b6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801b7b8:	4b25      	ldr	r3, [pc, #148]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7ba:	2202      	movs	r2, #2
 801b7bc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801b7be:	4b24      	ldr	r3, [pc, #144]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7c0:	2202      	movs	r2, #2
 801b7c2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801b7c4:	4b22      	ldr	r3, [pc, #136]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7c6:	2200      	movs	r2, #0
 801b7c8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801b7ca:	4b21      	ldr	r3, [pc, #132]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7cc:	2200      	movs	r2, #0
 801b7ce:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801b7d0:	4b1f      	ldr	r3, [pc, #124]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801b7d6:	4b1e      	ldr	r3, [pc, #120]	@ (801b850 <USBD_LL_Init+0xc0>)
 801b7d8:	0018      	movs	r0, r3
 801b7da:	f7f6 f90b 	bl	80119f4 <HAL_PCD_Init>
 801b7de:	1e03      	subs	r3, r0, #0
 801b7e0:	d001      	beq.n	801b7e6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801b7e2:	f7eb ffad 	bl	8007740 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801b7e6:	687a      	ldr	r2, [r7, #4]
 801b7e8:	23b0      	movs	r3, #176	@ 0xb0
 801b7ea:	009b      	lsls	r3, r3, #2
 801b7ec:	58d0      	ldr	r0, [r2, r3]
 801b7ee:	2318      	movs	r3, #24
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	2100      	movs	r1, #0
 801b7f4:	f7f7 fecc 	bl	8013590 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801b7f8:	687a      	ldr	r2, [r7, #4]
 801b7fa:	23b0      	movs	r3, #176	@ 0xb0
 801b7fc:	009b      	lsls	r3, r3, #2
 801b7fe:	58d0      	ldr	r0, [r2, r3]
 801b800:	2358      	movs	r3, #88	@ 0x58
 801b802:	2200      	movs	r2, #0
 801b804:	2180      	movs	r1, #128	@ 0x80
 801b806:	f7f7 fec3 	bl	8013590 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801b80a:	687a      	ldr	r2, [r7, #4]
 801b80c:	23b0      	movs	r3, #176	@ 0xb0
 801b80e:	009b      	lsls	r3, r3, #2
 801b810:	58d0      	ldr	r0, [r2, r3]
 801b812:	23c0      	movs	r3, #192	@ 0xc0
 801b814:	2200      	movs	r2, #0
 801b816:	2181      	movs	r1, #129	@ 0x81
 801b818:	f7f7 feba 	bl	8013590 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801b81c:	687a      	ldr	r2, [r7, #4]
 801b81e:	23b0      	movs	r3, #176	@ 0xb0
 801b820:	009b      	lsls	r3, r3, #2
 801b822:	58d0      	ldr	r0, [r2, r3]
 801b824:	2388      	movs	r3, #136	@ 0x88
 801b826:	005b      	lsls	r3, r3, #1
 801b828:	2200      	movs	r2, #0
 801b82a:	2101      	movs	r1, #1
 801b82c:	f7f7 feb0 	bl	8013590 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801b830:	687a      	ldr	r2, [r7, #4]
 801b832:	23b0      	movs	r3, #176	@ 0xb0
 801b834:	009b      	lsls	r3, r3, #2
 801b836:	58d0      	ldr	r0, [r2, r3]
 801b838:	2380      	movs	r3, #128	@ 0x80
 801b83a:	005b      	lsls	r3, r3, #1
 801b83c:	2200      	movs	r2, #0
 801b83e:	2182      	movs	r1, #130	@ 0x82
 801b840:	f7f7 fea6 	bl	8013590 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801b844:	2300      	movs	r3, #0
}
 801b846:	0018      	movs	r0, r3
 801b848:	46bd      	mov	sp, r7
 801b84a:	b002      	add	sp, #8
 801b84c:	bd80      	pop	{r7, pc}
 801b84e:	46c0      	nop			@ (mov r8, r8)
 801b850:	200032a4 	.word	0x200032a4
 801b854:	40005c00 	.word	0x40005c00

0801b858 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801b858:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b85a:	b085      	sub	sp, #20
 801b85c:	af00      	add	r7, sp, #0
 801b85e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b860:	210f      	movs	r1, #15
 801b862:	187b      	adds	r3, r7, r1
 801b864:	2200      	movs	r2, #0
 801b866:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b868:	260e      	movs	r6, #14
 801b86a:	19bb      	adds	r3, r7, r6
 801b86c:	2200      	movs	r2, #0
 801b86e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801b870:	687a      	ldr	r2, [r7, #4]
 801b872:	23b0      	movs	r3, #176	@ 0xb0
 801b874:	009b      	lsls	r3, r3, #2
 801b876:	58d3      	ldr	r3, [r2, r3]
 801b878:	000d      	movs	r5, r1
 801b87a:	187c      	adds	r4, r7, r1
 801b87c:	0018      	movs	r0, r3
 801b87e:	f7f6 f9b9 	bl	8011bf4 <HAL_PCD_Start>
 801b882:	0003      	movs	r3, r0
 801b884:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b886:	19bc      	adds	r4, r7, r6
 801b888:	197b      	adds	r3, r7, r5
 801b88a:	781b      	ldrb	r3, [r3, #0]
 801b88c:	0018      	movs	r0, r3
 801b88e:	f000 f9bc 	bl	801bc0a <USBD_Get_USB_Status>
 801b892:	0003      	movs	r3, r0
 801b894:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b896:	19bb      	adds	r3, r7, r6
 801b898:	781b      	ldrb	r3, [r3, #0]
}
 801b89a:	0018      	movs	r0, r3
 801b89c:	46bd      	mov	sp, r7
 801b89e:	b005      	add	sp, #20
 801b8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b8a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801b8a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8a4:	b085      	sub	sp, #20
 801b8a6:	af00      	add	r7, sp, #0
 801b8a8:	6078      	str	r0, [r7, #4]
 801b8aa:	000c      	movs	r4, r1
 801b8ac:	0010      	movs	r0, r2
 801b8ae:	0019      	movs	r1, r3
 801b8b0:	1cfb      	adds	r3, r7, #3
 801b8b2:	1c22      	adds	r2, r4, #0
 801b8b4:	701a      	strb	r2, [r3, #0]
 801b8b6:	1cbb      	adds	r3, r7, #2
 801b8b8:	1c02      	adds	r2, r0, #0
 801b8ba:	701a      	strb	r2, [r3, #0]
 801b8bc:	003b      	movs	r3, r7
 801b8be:	1c0a      	adds	r2, r1, #0
 801b8c0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b8c2:	260f      	movs	r6, #15
 801b8c4:	19bb      	adds	r3, r7, r6
 801b8c6:	2200      	movs	r2, #0
 801b8c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b8ca:	250e      	movs	r5, #14
 801b8cc:	197b      	adds	r3, r7, r5
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801b8d2:	687a      	ldr	r2, [r7, #4]
 801b8d4:	23b0      	movs	r3, #176	@ 0xb0
 801b8d6:	009b      	lsls	r3, r3, #2
 801b8d8:	58d0      	ldr	r0, [r2, r3]
 801b8da:	19bc      	adds	r4, r7, r6
 801b8dc:	1cbb      	adds	r3, r7, #2
 801b8de:	781d      	ldrb	r5, [r3, #0]
 801b8e0:	003b      	movs	r3, r7
 801b8e2:	881a      	ldrh	r2, [r3, #0]
 801b8e4:	1cfb      	adds	r3, r7, #3
 801b8e6:	7819      	ldrb	r1, [r3, #0]
 801b8e8:	002b      	movs	r3, r5
 801b8ea:	f7f6 fb18 	bl	8011f1e <HAL_PCD_EP_Open>
 801b8ee:	0003      	movs	r3, r0
 801b8f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b8f2:	250e      	movs	r5, #14
 801b8f4:	197c      	adds	r4, r7, r5
 801b8f6:	19bb      	adds	r3, r7, r6
 801b8f8:	781b      	ldrb	r3, [r3, #0]
 801b8fa:	0018      	movs	r0, r3
 801b8fc:	f000 f985 	bl	801bc0a <USBD_Get_USB_Status>
 801b900:	0003      	movs	r3, r0
 801b902:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b904:	197b      	adds	r3, r7, r5
 801b906:	781b      	ldrb	r3, [r3, #0]
}
 801b908:	0018      	movs	r0, r3
 801b90a:	46bd      	mov	sp, r7
 801b90c:	b005      	add	sp, #20
 801b90e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b910 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b910:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b912:	b085      	sub	sp, #20
 801b914:	af00      	add	r7, sp, #0
 801b916:	6078      	str	r0, [r7, #4]
 801b918:	000a      	movs	r2, r1
 801b91a:	1cfb      	adds	r3, r7, #3
 801b91c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b91e:	210f      	movs	r1, #15
 801b920:	187b      	adds	r3, r7, r1
 801b922:	2200      	movs	r2, #0
 801b924:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b926:	260e      	movs	r6, #14
 801b928:	19bb      	adds	r3, r7, r6
 801b92a:	2200      	movs	r2, #0
 801b92c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801b92e:	687a      	ldr	r2, [r7, #4]
 801b930:	23b0      	movs	r3, #176	@ 0xb0
 801b932:	009b      	lsls	r3, r3, #2
 801b934:	58d2      	ldr	r2, [r2, r3]
 801b936:	000d      	movs	r5, r1
 801b938:	187c      	adds	r4, r7, r1
 801b93a:	1cfb      	adds	r3, r7, #3
 801b93c:	781b      	ldrb	r3, [r3, #0]
 801b93e:	0019      	movs	r1, r3
 801b940:	0010      	movs	r0, r2
 801b942:	f7f6 fb5b 	bl	8011ffc <HAL_PCD_EP_Close>
 801b946:	0003      	movs	r3, r0
 801b948:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b94a:	19bc      	adds	r4, r7, r6
 801b94c:	197b      	adds	r3, r7, r5
 801b94e:	781b      	ldrb	r3, [r3, #0]
 801b950:	0018      	movs	r0, r3
 801b952:	f000 f95a 	bl	801bc0a <USBD_Get_USB_Status>
 801b956:	0003      	movs	r3, r0
 801b958:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b95a:	19bb      	adds	r3, r7, r6
 801b95c:	781b      	ldrb	r3, [r3, #0]
}
 801b95e:	0018      	movs	r0, r3
 801b960:	46bd      	mov	sp, r7
 801b962:	b005      	add	sp, #20
 801b964:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b966 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b966:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b968:	b085      	sub	sp, #20
 801b96a:	af00      	add	r7, sp, #0
 801b96c:	6078      	str	r0, [r7, #4]
 801b96e:	000a      	movs	r2, r1
 801b970:	1cfb      	adds	r3, r7, #3
 801b972:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b974:	210f      	movs	r1, #15
 801b976:	187b      	adds	r3, r7, r1
 801b978:	2200      	movs	r2, #0
 801b97a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b97c:	260e      	movs	r6, #14
 801b97e:	19bb      	adds	r3, r7, r6
 801b980:	2200      	movs	r2, #0
 801b982:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801b984:	687a      	ldr	r2, [r7, #4]
 801b986:	23b0      	movs	r3, #176	@ 0xb0
 801b988:	009b      	lsls	r3, r3, #2
 801b98a:	58d2      	ldr	r2, [r2, r3]
 801b98c:	000d      	movs	r5, r1
 801b98e:	187c      	adds	r4, r7, r1
 801b990:	1cfb      	adds	r3, r7, #3
 801b992:	781b      	ldrb	r3, [r3, #0]
 801b994:	0019      	movs	r1, r3
 801b996:	0010      	movs	r0, r2
 801b998:	f7f6 fc0d 	bl	80121b6 <HAL_PCD_EP_SetStall>
 801b99c:	0003      	movs	r3, r0
 801b99e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b9a0:	19bc      	adds	r4, r7, r6
 801b9a2:	197b      	adds	r3, r7, r5
 801b9a4:	781b      	ldrb	r3, [r3, #0]
 801b9a6:	0018      	movs	r0, r3
 801b9a8:	f000 f92f 	bl	801bc0a <USBD_Get_USB_Status>
 801b9ac:	0003      	movs	r3, r0
 801b9ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801b9b0:	19bb      	adds	r3, r7, r6
 801b9b2:	781b      	ldrb	r3, [r3, #0]
}
 801b9b4:	0018      	movs	r0, r3
 801b9b6:	46bd      	mov	sp, r7
 801b9b8:	b005      	add	sp, #20
 801b9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b9bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9be:	b085      	sub	sp, #20
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
 801b9c4:	000a      	movs	r2, r1
 801b9c6:	1cfb      	adds	r3, r7, #3
 801b9c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801b9ca:	210f      	movs	r1, #15
 801b9cc:	187b      	adds	r3, r7, r1
 801b9ce:	2200      	movs	r2, #0
 801b9d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801b9d2:	260e      	movs	r6, #14
 801b9d4:	19bb      	adds	r3, r7, r6
 801b9d6:	2200      	movs	r2, #0
 801b9d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801b9da:	687a      	ldr	r2, [r7, #4]
 801b9dc:	23b0      	movs	r3, #176	@ 0xb0
 801b9de:	009b      	lsls	r3, r3, #2
 801b9e0:	58d2      	ldr	r2, [r2, r3]
 801b9e2:	000d      	movs	r5, r1
 801b9e4:	187c      	adds	r4, r7, r1
 801b9e6:	1cfb      	adds	r3, r7, #3
 801b9e8:	781b      	ldrb	r3, [r3, #0]
 801b9ea:	0019      	movs	r1, r3
 801b9ec:	0010      	movs	r0, r2
 801b9ee:	f7f6 fc3e 	bl	801226e <HAL_PCD_EP_ClrStall>
 801b9f2:	0003      	movs	r3, r0
 801b9f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801b9f6:	19bc      	adds	r4, r7, r6
 801b9f8:	197b      	adds	r3, r7, r5
 801b9fa:	781b      	ldrb	r3, [r3, #0]
 801b9fc:	0018      	movs	r0, r3
 801b9fe:	f000 f904 	bl	801bc0a <USBD_Get_USB_Status>
 801ba02:	0003      	movs	r3, r0
 801ba04:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801ba06:	19bb      	adds	r3, r7, r6
 801ba08:	781b      	ldrb	r3, [r3, #0]
}
 801ba0a:	0018      	movs	r0, r3
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	b005      	add	sp, #20
 801ba10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ba12 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ba12:	b580      	push	{r7, lr}
 801ba14:	b084      	sub	sp, #16
 801ba16:	af00      	add	r7, sp, #0
 801ba18:	6078      	str	r0, [r7, #4]
 801ba1a:	000a      	movs	r2, r1
 801ba1c:	1cfb      	adds	r3, r7, #3
 801ba1e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801ba20:	687a      	ldr	r2, [r7, #4]
 801ba22:	23b0      	movs	r3, #176	@ 0xb0
 801ba24:	009b      	lsls	r3, r3, #2
 801ba26:	58d3      	ldr	r3, [r2, r3]
 801ba28:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801ba2a:	1cfb      	adds	r3, r7, #3
 801ba2c:	781b      	ldrb	r3, [r3, #0]
 801ba2e:	b25b      	sxtb	r3, r3
 801ba30:	2b00      	cmp	r3, #0
 801ba32:	da0d      	bge.n	801ba50 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801ba34:	1cfb      	adds	r3, r7, #3
 801ba36:	781b      	ldrb	r3, [r3, #0]
 801ba38:	227f      	movs	r2, #127	@ 0x7f
 801ba3a:	4013      	ands	r3, r2
 801ba3c:	68f9      	ldr	r1, [r7, #12]
 801ba3e:	1c5a      	adds	r2, r3, #1
 801ba40:	0013      	movs	r3, r2
 801ba42:	009b      	lsls	r3, r3, #2
 801ba44:	189b      	adds	r3, r3, r2
 801ba46:	00db      	lsls	r3, r3, #3
 801ba48:	18cb      	adds	r3, r1, r3
 801ba4a:	3302      	adds	r3, #2
 801ba4c:	781b      	ldrb	r3, [r3, #0]
 801ba4e:	e00d      	b.n	801ba6c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801ba50:	1cfb      	adds	r3, r7, #3
 801ba52:	781b      	ldrb	r3, [r3, #0]
 801ba54:	227f      	movs	r2, #127	@ 0x7f
 801ba56:	401a      	ands	r2, r3
 801ba58:	68f8      	ldr	r0, [r7, #12]
 801ba5a:	23b5      	movs	r3, #181	@ 0xb5
 801ba5c:	0059      	lsls	r1, r3, #1
 801ba5e:	0013      	movs	r3, r2
 801ba60:	009b      	lsls	r3, r3, #2
 801ba62:	189b      	adds	r3, r3, r2
 801ba64:	00db      	lsls	r3, r3, #3
 801ba66:	18c3      	adds	r3, r0, r3
 801ba68:	185b      	adds	r3, r3, r1
 801ba6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ba6c:	0018      	movs	r0, r3
 801ba6e:	46bd      	mov	sp, r7
 801ba70:	b004      	add	sp, #16
 801ba72:	bd80      	pop	{r7, pc}

0801ba74 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ba74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba76:	b085      	sub	sp, #20
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
 801ba7c:	000a      	movs	r2, r1
 801ba7e:	1cfb      	adds	r3, r7, #3
 801ba80:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ba82:	210f      	movs	r1, #15
 801ba84:	187b      	adds	r3, r7, r1
 801ba86:	2200      	movs	r2, #0
 801ba88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ba8a:	260e      	movs	r6, #14
 801ba8c:	19bb      	adds	r3, r7, r6
 801ba8e:	2200      	movs	r2, #0
 801ba90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ba92:	687a      	ldr	r2, [r7, #4]
 801ba94:	23b0      	movs	r3, #176	@ 0xb0
 801ba96:	009b      	lsls	r3, r3, #2
 801ba98:	58d2      	ldr	r2, [r2, r3]
 801ba9a:	000d      	movs	r5, r1
 801ba9c:	187c      	adds	r4, r7, r1
 801ba9e:	1cfb      	adds	r3, r7, #3
 801baa0:	781b      	ldrb	r3, [r3, #0]
 801baa2:	0019      	movs	r1, r3
 801baa4:	0010      	movs	r0, r2
 801baa6:	f7f6 fa0f 	bl	8011ec8 <HAL_PCD_SetAddress>
 801baaa:	0003      	movs	r3, r0
 801baac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801baae:	19bc      	adds	r4, r7, r6
 801bab0:	197b      	adds	r3, r7, r5
 801bab2:	781b      	ldrb	r3, [r3, #0]
 801bab4:	0018      	movs	r0, r3
 801bab6:	f000 f8a8 	bl	801bc0a <USBD_Get_USB_Status>
 801baba:	0003      	movs	r3, r0
 801babc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801babe:	19bb      	adds	r3, r7, r6
 801bac0:	781b      	ldrb	r3, [r3, #0]
}
 801bac2:	0018      	movs	r0, r3
 801bac4:	46bd      	mov	sp, r7
 801bac6:	b005      	add	sp, #20
 801bac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801baca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801baca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bacc:	b087      	sub	sp, #28
 801bace:	af00      	add	r7, sp, #0
 801bad0:	60f8      	str	r0, [r7, #12]
 801bad2:	0008      	movs	r0, r1
 801bad4:	607a      	str	r2, [r7, #4]
 801bad6:	0019      	movs	r1, r3
 801bad8:	230b      	movs	r3, #11
 801bada:	18fb      	adds	r3, r7, r3
 801badc:	1c02      	adds	r2, r0, #0
 801bade:	701a      	strb	r2, [r3, #0]
 801bae0:	2408      	movs	r4, #8
 801bae2:	193b      	adds	r3, r7, r4
 801bae4:	1c0a      	adds	r2, r1, #0
 801bae6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bae8:	2117      	movs	r1, #23
 801baea:	187b      	adds	r3, r7, r1
 801baec:	2200      	movs	r2, #0
 801baee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801baf0:	2516      	movs	r5, #22
 801baf2:	197b      	adds	r3, r7, r5
 801baf4:	2200      	movs	r2, #0
 801baf6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801baf8:	68fa      	ldr	r2, [r7, #12]
 801bafa:	23b0      	movs	r3, #176	@ 0xb0
 801bafc:	009b      	lsls	r3, r3, #2
 801bafe:	58d0      	ldr	r0, [r2, r3]
 801bb00:	193b      	adds	r3, r7, r4
 801bb02:	881d      	ldrh	r5, [r3, #0]
 801bb04:	000e      	movs	r6, r1
 801bb06:	187c      	adds	r4, r7, r1
 801bb08:	687a      	ldr	r2, [r7, #4]
 801bb0a:	230b      	movs	r3, #11
 801bb0c:	18fb      	adds	r3, r7, r3
 801bb0e:	7819      	ldrb	r1, [r3, #0]
 801bb10:	002b      	movs	r3, r5
 801bb12:	f7f6 fb14 	bl	801213e <HAL_PCD_EP_Transmit>
 801bb16:	0003      	movs	r3, r0
 801bb18:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb1a:	2516      	movs	r5, #22
 801bb1c:	197c      	adds	r4, r7, r5
 801bb1e:	19bb      	adds	r3, r7, r6
 801bb20:	781b      	ldrb	r3, [r3, #0]
 801bb22:	0018      	movs	r0, r3
 801bb24:	f000 f871 	bl	801bc0a <USBD_Get_USB_Status>
 801bb28:	0003      	movs	r3, r0
 801bb2a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801bb2c:	197b      	adds	r3, r7, r5
 801bb2e:	781b      	ldrb	r3, [r3, #0]
}
 801bb30:	0018      	movs	r0, r3
 801bb32:	46bd      	mov	sp, r7
 801bb34:	b007      	add	sp, #28
 801bb36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bb38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb3a:	b087      	sub	sp, #28
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	60f8      	str	r0, [r7, #12]
 801bb40:	0008      	movs	r0, r1
 801bb42:	607a      	str	r2, [r7, #4]
 801bb44:	0019      	movs	r1, r3
 801bb46:	230b      	movs	r3, #11
 801bb48:	18fb      	adds	r3, r7, r3
 801bb4a:	1c02      	adds	r2, r0, #0
 801bb4c:	701a      	strb	r2, [r3, #0]
 801bb4e:	2408      	movs	r4, #8
 801bb50:	193b      	adds	r3, r7, r4
 801bb52:	1c0a      	adds	r2, r1, #0
 801bb54:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801bb56:	2117      	movs	r1, #23
 801bb58:	187b      	adds	r3, r7, r1
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bb5e:	2516      	movs	r5, #22
 801bb60:	197b      	adds	r3, r7, r5
 801bb62:	2200      	movs	r2, #0
 801bb64:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801bb66:	68fa      	ldr	r2, [r7, #12]
 801bb68:	23b0      	movs	r3, #176	@ 0xb0
 801bb6a:	009b      	lsls	r3, r3, #2
 801bb6c:	58d0      	ldr	r0, [r2, r3]
 801bb6e:	193b      	adds	r3, r7, r4
 801bb70:	881d      	ldrh	r5, [r3, #0]
 801bb72:	000e      	movs	r6, r1
 801bb74:	187c      	adds	r4, r7, r1
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	230b      	movs	r3, #11
 801bb7a:	18fb      	adds	r3, r7, r3
 801bb7c:	7819      	ldrb	r1, [r3, #0]
 801bb7e:	002b      	movs	r3, r5
 801bb80:	f7f6 fa8d 	bl	801209e <HAL_PCD_EP_Receive>
 801bb84:	0003      	movs	r3, r0
 801bb86:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801bb88:	2516      	movs	r5, #22
 801bb8a:	197c      	adds	r4, r7, r5
 801bb8c:	19bb      	adds	r3, r7, r6
 801bb8e:	781b      	ldrb	r3, [r3, #0]
 801bb90:	0018      	movs	r0, r3
 801bb92:	f000 f83a 	bl	801bc0a <USBD_Get_USB_Status>
 801bb96:	0003      	movs	r3, r0
 801bb98:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801bb9a:	197b      	adds	r3, r7, r5
 801bb9c:	781b      	ldrb	r3, [r3, #0]
}
 801bb9e:	0018      	movs	r0, r3
 801bba0:	46bd      	mov	sp, r7
 801bba2:	b007      	add	sp, #28
 801bba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bba6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801bba6:	b580      	push	{r7, lr}
 801bba8:	b082      	sub	sp, #8
 801bbaa:	af00      	add	r7, sp, #0
 801bbac:	6078      	str	r0, [r7, #4]
 801bbae:	000a      	movs	r2, r1
 801bbb0:	1cfb      	adds	r3, r7, #3
 801bbb2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801bbb4:	687a      	ldr	r2, [r7, #4]
 801bbb6:	23b0      	movs	r3, #176	@ 0xb0
 801bbb8:	009b      	lsls	r3, r3, #2
 801bbba:	58d2      	ldr	r2, [r2, r3]
 801bbbc:	1cfb      	adds	r3, r7, #3
 801bbbe:	781b      	ldrb	r3, [r3, #0]
 801bbc0:	0019      	movs	r1, r3
 801bbc2:	0010      	movs	r0, r2
 801bbc4:	f7f6 faa2 	bl	801210c <HAL_PCD_EP_GetRxCount>
 801bbc8:	0003      	movs	r3, r0
}
 801bbca:	0018      	movs	r0, r3
 801bbcc:	46bd      	mov	sp, r7
 801bbce:	b002      	add	sp, #8
 801bbd0:	bd80      	pop	{r7, pc}
	...

0801bbd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b082      	sub	sp, #8
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801bbdc:	4b02      	ldr	r3, [pc, #8]	@ (801bbe8 <USBD_static_malloc+0x14>)
}
 801bbde:	0018      	movs	r0, r3
 801bbe0:	46bd      	mov	sp, r7
 801bbe2:	b002      	add	sp, #8
 801bbe4:	bd80      	pop	{r7, pc}
 801bbe6:	46c0      	nop			@ (mov r8, r8)
 801bbe8:	20003598 	.word	0x20003598

0801bbec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801bbec:	b580      	push	{r7, lr}
 801bbee:	b082      	sub	sp, #8
 801bbf0:	af00      	add	r7, sp, #0
 801bbf2:	6078      	str	r0, [r7, #4]

}
 801bbf4:	46c0      	nop			@ (mov r8, r8)
 801bbf6:	46bd      	mov	sp, r7
 801bbf8:	b002      	add	sp, #8
 801bbfa:	bd80      	pop	{r7, pc}

0801bbfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801bc00:	f7eb fc66 	bl	80074d0 <SystemClock_Config>
}
 801bc04:	46c0      	nop			@ (mov r8, r8)
 801bc06:	46bd      	mov	sp, r7
 801bc08:	bd80      	pop	{r7, pc}

0801bc0a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801bc0a:	b580      	push	{r7, lr}
 801bc0c:	b084      	sub	sp, #16
 801bc0e:	af00      	add	r7, sp, #0
 801bc10:	0002      	movs	r2, r0
 801bc12:	1dfb      	adds	r3, r7, #7
 801bc14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801bc16:	230f      	movs	r3, #15
 801bc18:	18fb      	adds	r3, r7, r3
 801bc1a:	2200      	movs	r2, #0
 801bc1c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801bc1e:	1dfb      	adds	r3, r7, #7
 801bc20:	781b      	ldrb	r3, [r3, #0]
 801bc22:	2b03      	cmp	r3, #3
 801bc24:	d017      	beq.n	801bc56 <USBD_Get_USB_Status+0x4c>
 801bc26:	dc1b      	bgt.n	801bc60 <USBD_Get_USB_Status+0x56>
 801bc28:	2b02      	cmp	r3, #2
 801bc2a:	d00f      	beq.n	801bc4c <USBD_Get_USB_Status+0x42>
 801bc2c:	dc18      	bgt.n	801bc60 <USBD_Get_USB_Status+0x56>
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d002      	beq.n	801bc38 <USBD_Get_USB_Status+0x2e>
 801bc32:	2b01      	cmp	r3, #1
 801bc34:	d005      	beq.n	801bc42 <USBD_Get_USB_Status+0x38>
 801bc36:	e013      	b.n	801bc60 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801bc38:	230f      	movs	r3, #15
 801bc3a:	18fb      	adds	r3, r7, r3
 801bc3c:	2200      	movs	r2, #0
 801bc3e:	701a      	strb	r2, [r3, #0]
    break;
 801bc40:	e013      	b.n	801bc6a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801bc42:	230f      	movs	r3, #15
 801bc44:	18fb      	adds	r3, r7, r3
 801bc46:	2202      	movs	r2, #2
 801bc48:	701a      	strb	r2, [r3, #0]
    break;
 801bc4a:	e00e      	b.n	801bc6a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801bc4c:	230f      	movs	r3, #15
 801bc4e:	18fb      	adds	r3, r7, r3
 801bc50:	2201      	movs	r2, #1
 801bc52:	701a      	strb	r2, [r3, #0]
    break;
 801bc54:	e009      	b.n	801bc6a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801bc56:	230f      	movs	r3, #15
 801bc58:	18fb      	adds	r3, r7, r3
 801bc5a:	2202      	movs	r2, #2
 801bc5c:	701a      	strb	r2, [r3, #0]
    break;
 801bc5e:	e004      	b.n	801bc6a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801bc60:	230f      	movs	r3, #15
 801bc62:	18fb      	adds	r3, r7, r3
 801bc64:	2202      	movs	r2, #2
 801bc66:	701a      	strb	r2, [r3, #0]
    break;
 801bc68:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801bc6a:	230f      	movs	r3, #15
 801bc6c:	18fb      	adds	r3, r7, r3
 801bc6e:	781b      	ldrb	r3, [r3, #0]
}
 801bc70:	0018      	movs	r0, r3
 801bc72:	46bd      	mov	sp, r7
 801bc74:	b004      	add	sp, #16
 801bc76:	bd80      	pop	{r7, pc}

0801bc78 <arm_cfft_radix4by2_q31>:
 801bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bc7a:	465f      	mov	r7, fp
 801bc7c:	4656      	mov	r6, sl
 801bc7e:	464d      	mov	r5, r9
 801bc80:	4644      	mov	r4, r8
 801bc82:	000b      	movs	r3, r1
 801bc84:	b4f0      	push	{r4, r5, r6, r7}
 801bc86:	085b      	lsrs	r3, r3, #1
 801bc88:	b08f      	sub	sp, #60	@ 0x3c
 801bc8a:	910a      	str	r1, [sp, #40]	@ 0x28
 801bc8c:	0007      	movs	r7, r0
 801bc8e:	9009      	str	r0, [sp, #36]	@ 0x24
 801bc90:	0011      	movs	r1, r2
 801bc92:	920b      	str	r2, [sp, #44]	@ 0x2c
 801bc94:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d100      	bne.n	801bc9c <arm_cfft_radix4by2_q31+0x24>
 801bc9a:	e0a0      	b.n	801bdde <arm_cfft_radix4by2_q31+0x166>
 801bc9c:	0002      	movs	r2, r0
 801bc9e:	00db      	lsls	r3, r3, #3
 801bca0:	3204      	adds	r2, #4
 801bca2:	4691      	mov	r9, r2
 801bca4:	4698      	mov	r8, r3
 801bca6:	000a      	movs	r2, r1
 801bca8:	464e      	mov	r6, r9
 801bcaa:	4442      	add	r2, r8
 801bcac:	4699      	mov	r9, r3
 801bcae:	4688      	mov	r8, r1
 801bcb0:	9208      	str	r2, [sp, #32]
 801bcb2:	900d      	str	r0, [sp, #52]	@ 0x34
 801bcb4:	4643      	mov	r3, r8
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	469b      	mov	fp, r3
 801bcba:	4643      	mov	r3, r8
 801bcbc:	685b      	ldr	r3, [r3, #4]
 801bcbe:	469a      	mov	sl, r3
 801bcc0:	683b      	ldr	r3, [r7, #0]
 801bcc2:	109c      	asrs	r4, r3, #2
 801bcc4:	464b      	mov	r3, r9
 801bcc6:	58fb      	ldr	r3, [r7, r3]
 801bcc8:	109a      	asrs	r2, r3, #2
 801bcca:	18a3      	adds	r3, r4, r2
 801bccc:	603b      	str	r3, [r7, #0]
 801bcce:	6833      	ldr	r3, [r6, #0]
 801bcd0:	1aa4      	subs	r4, r4, r2
 801bcd2:	109d      	asrs	r5, r3, #2
 801bcd4:	464b      	mov	r3, r9
 801bcd6:	58f3      	ldr	r3, [r6, r3]
 801bcd8:	17e2      	asrs	r2, r4, #31
 801bcda:	109b      	asrs	r3, r3, #2
 801bcdc:	18e9      	adds	r1, r5, r3
 801bcde:	6031      	str	r1, [r6, #0]
 801bce0:	0011      	movs	r1, r2
 801bce2:	465a      	mov	r2, fp
 801bce4:	17d2      	asrs	r2, r2, #31
 801bce6:	0010      	movs	r0, r2
 801bce8:	4652      	mov	r2, sl
 801bcea:	1aed      	subs	r5, r5, r3
 801bcec:	17eb      	asrs	r3, r5, #31
 801bcee:	17d2      	asrs	r2, r2, #31
 801bcf0:	9307      	str	r3, [sp, #28]
 801bcf2:	9204      	str	r2, [sp, #16]
 801bcf4:	0003      	movs	r3, r0
 801bcf6:	465a      	mov	r2, fp
 801bcf8:	9006      	str	r0, [sp, #24]
 801bcfa:	0020      	movs	r0, r4
 801bcfc:	9105      	str	r1, [sp, #20]
 801bcfe:	f7e4 fc5f 	bl	80005c0 <__aeabi_lmul>
 801bd02:	2280      	movs	r2, #128	@ 0x80
 801bd04:	2300      	movs	r3, #0
 801bd06:	0612      	lsls	r2, r2, #24
 801bd08:	1880      	adds	r0, r0, r2
 801bd0a:	4159      	adcs	r1, r3
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	9101      	str	r1, [sp, #4]
 801bd10:	9300      	str	r3, [sp, #0]
 801bd12:	4652      	mov	r2, sl
 801bd14:	9b04      	ldr	r3, [sp, #16]
 801bd16:	0028      	movs	r0, r5
 801bd18:	17e9      	asrs	r1, r5, #31
 801bd1a:	f7e4 fc51 	bl	80005c0 <__aeabi_lmul>
 801bd1e:	9a00      	ldr	r2, [sp, #0]
 801bd20:	9b01      	ldr	r3, [sp, #4]
 801bd22:	1880      	adds	r0, r0, r2
 801bd24:	4159      	adcs	r1, r3
 801bd26:	2280      	movs	r2, #128	@ 0x80
 801bd28:	2300      	movs	r3, #0
 801bd2a:	0612      	lsls	r2, r2, #24
 801bd2c:	1880      	adds	r0, r0, r2
 801bd2e:	4159      	adcs	r1, r3
 801bd30:	464a      	mov	r2, r9
 801bd32:	004b      	lsls	r3, r1, #1
 801bd34:	50bb      	str	r3, [r7, r2]
 801bd36:	4658      	mov	r0, fp
 801bd38:	002a      	movs	r2, r5
 801bd3a:	9b07      	ldr	r3, [sp, #28]
 801bd3c:	9906      	ldr	r1, [sp, #24]
 801bd3e:	f7e4 fc3f 	bl	80005c0 <__aeabi_lmul>
 801bd42:	2280      	movs	r2, #128	@ 0x80
 801bd44:	2300      	movs	r3, #0
 801bd46:	0612      	lsls	r2, r2, #24
 801bd48:	1880      	adds	r0, r0, r2
 801bd4a:	4159      	adcs	r1, r3
 801bd4c:	2000      	movs	r0, #0
 801bd4e:	9103      	str	r1, [sp, #12]
 801bd50:	9002      	str	r0, [sp, #8]
 801bd52:	4652      	mov	r2, sl
 801bd54:	9b04      	ldr	r3, [sp, #16]
 801bd56:	0020      	movs	r0, r4
 801bd58:	9905      	ldr	r1, [sp, #20]
 801bd5a:	f7e4 fc31 	bl	80005c0 <__aeabi_lmul>
 801bd5e:	9a02      	ldr	r2, [sp, #8]
 801bd60:	9b03      	ldr	r3, [sp, #12]
 801bd62:	1a12      	subs	r2, r2, r0
 801bd64:	418b      	sbcs	r3, r1
 801bd66:	2080      	movs	r0, #128	@ 0x80
 801bd68:	2100      	movs	r1, #0
 801bd6a:	0600      	lsls	r0, r0, #24
 801bd6c:	1812      	adds	r2, r2, r0
 801bd6e:	414b      	adcs	r3, r1
 801bd70:	464a      	mov	r2, r9
 801bd72:	005b      	lsls	r3, r3, #1
 801bd74:	50b3      	str	r3, [r6, r2]
 801bd76:	2308      	movs	r3, #8
 801bd78:	469c      	mov	ip, r3
 801bd7a:	9b08      	ldr	r3, [sp, #32]
 801bd7c:	44e0      	add	r8, ip
 801bd7e:	3708      	adds	r7, #8
 801bd80:	3608      	adds	r6, #8
 801bd82:	4598      	cmp	r8, r3
 801bd84:	d196      	bne.n	801bcb4 <arm_cfft_radix4by2_q31+0x3c>
 801bd86:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801bd88:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bd8a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bd8c:	2302      	movs	r3, #2
 801bd8e:	003a      	movs	r2, r7
 801bd90:	0029      	movs	r1, r5
 801bd92:	0020      	movs	r0, r4
 801bd94:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801bd96:	f000 f957 	bl	801c048 <arm_radix4_butterfly_q31>
 801bd9a:	46a4      	mov	ip, r4
 801bd9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd9e:	2302      	movs	r3, #2
 801bda0:	0088      	lsls	r0, r1, #2
 801bda2:	4460      	add	r0, ip
 801bda4:	003a      	movs	r2, r7
 801bda6:	0029      	movs	r1, r5
 801bda8:	f000 f94e 	bl	801c048 <arm_radix4_butterfly_q31>
 801bdac:	46a4      	mov	ip, r4
 801bdae:	0128      	lsls	r0, r5, #4
 801bdb0:	4460      	add	r0, ip
 801bdb2:	6833      	ldr	r3, [r6, #0]
 801bdb4:	005b      	lsls	r3, r3, #1
 801bdb6:	6033      	str	r3, [r6, #0]
 801bdb8:	6873      	ldr	r3, [r6, #4]
 801bdba:	005b      	lsls	r3, r3, #1
 801bdbc:	6073      	str	r3, [r6, #4]
 801bdbe:	68b3      	ldr	r3, [r6, #8]
 801bdc0:	005b      	lsls	r3, r3, #1
 801bdc2:	60b3      	str	r3, [r6, #8]
 801bdc4:	68f3      	ldr	r3, [r6, #12]
 801bdc6:	005b      	lsls	r3, r3, #1
 801bdc8:	60f3      	str	r3, [r6, #12]
 801bdca:	3610      	adds	r6, #16
 801bdcc:	42b0      	cmp	r0, r6
 801bdce:	d1f0      	bne.n	801bdb2 <arm_cfft_radix4by2_q31+0x13a>
 801bdd0:	b00f      	add	sp, #60	@ 0x3c
 801bdd2:	bc3c      	pop	{r2, r3, r4, r5}
 801bdd4:	4690      	mov	r8, r2
 801bdd6:	4699      	mov	r9, r3
 801bdd8:	46a2      	mov	sl, r4
 801bdda:	46ab      	mov	fp, r5
 801bddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bdde:	2302      	movs	r3, #2
 801bde0:	2100      	movs	r1, #0
 801bde2:	0015      	movs	r5, r2
 801bde4:	f000 f930 	bl	801c048 <arm_radix4_butterfly_q31>
 801bde8:	46bc      	mov	ip, r7
 801bdea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bdec:	002a      	movs	r2, r5
 801bdee:	0098      	lsls	r0, r3, #2
 801bdf0:	4460      	add	r0, ip
 801bdf2:	2302      	movs	r3, #2
 801bdf4:	2100      	movs	r1, #0
 801bdf6:	f000 f927 	bl	801c048 <arm_radix4_butterfly_q31>
 801bdfa:	e7e9      	b.n	801bdd0 <arm_cfft_radix4by2_q31+0x158>

0801bdfc <arm_cfft_radix4by2_inverse_q31>:
 801bdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdfe:	465f      	mov	r7, fp
 801be00:	4656      	mov	r6, sl
 801be02:	464d      	mov	r5, r9
 801be04:	4644      	mov	r4, r8
 801be06:	000b      	movs	r3, r1
 801be08:	b4f0      	push	{r4, r5, r6, r7}
 801be0a:	085b      	lsrs	r3, r3, #1
 801be0c:	b08f      	sub	sp, #60	@ 0x3c
 801be0e:	910a      	str	r1, [sp, #40]	@ 0x28
 801be10:	0007      	movs	r7, r0
 801be12:	9009      	str	r0, [sp, #36]	@ 0x24
 801be14:	0011      	movs	r1, r2
 801be16:	920b      	str	r2, [sp, #44]	@ 0x2c
 801be18:	930c      	str	r3, [sp, #48]	@ 0x30
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d100      	bne.n	801be20 <arm_cfft_radix4by2_inverse_q31+0x24>
 801be1e:	e0a0      	b.n	801bf62 <arm_cfft_radix4by2_inverse_q31+0x166>
 801be20:	0002      	movs	r2, r0
 801be22:	00db      	lsls	r3, r3, #3
 801be24:	3204      	adds	r2, #4
 801be26:	4691      	mov	r9, r2
 801be28:	4698      	mov	r8, r3
 801be2a:	000a      	movs	r2, r1
 801be2c:	464e      	mov	r6, r9
 801be2e:	4442      	add	r2, r8
 801be30:	4699      	mov	r9, r3
 801be32:	4688      	mov	r8, r1
 801be34:	9208      	str	r2, [sp, #32]
 801be36:	900d      	str	r0, [sp, #52]	@ 0x34
 801be38:	4643      	mov	r3, r8
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	469b      	mov	fp, r3
 801be3e:	4643      	mov	r3, r8
 801be40:	685b      	ldr	r3, [r3, #4]
 801be42:	469a      	mov	sl, r3
 801be44:	683b      	ldr	r3, [r7, #0]
 801be46:	109c      	asrs	r4, r3, #2
 801be48:	464b      	mov	r3, r9
 801be4a:	58fb      	ldr	r3, [r7, r3]
 801be4c:	109a      	asrs	r2, r3, #2
 801be4e:	18a3      	adds	r3, r4, r2
 801be50:	603b      	str	r3, [r7, #0]
 801be52:	6833      	ldr	r3, [r6, #0]
 801be54:	1aa4      	subs	r4, r4, r2
 801be56:	109d      	asrs	r5, r3, #2
 801be58:	464b      	mov	r3, r9
 801be5a:	58f3      	ldr	r3, [r6, r3]
 801be5c:	17e2      	asrs	r2, r4, #31
 801be5e:	109b      	asrs	r3, r3, #2
 801be60:	18e9      	adds	r1, r5, r3
 801be62:	6031      	str	r1, [r6, #0]
 801be64:	0011      	movs	r1, r2
 801be66:	465a      	mov	r2, fp
 801be68:	17d2      	asrs	r2, r2, #31
 801be6a:	0010      	movs	r0, r2
 801be6c:	4652      	mov	r2, sl
 801be6e:	1aed      	subs	r5, r5, r3
 801be70:	17eb      	asrs	r3, r5, #31
 801be72:	17d2      	asrs	r2, r2, #31
 801be74:	9307      	str	r3, [sp, #28]
 801be76:	9204      	str	r2, [sp, #16]
 801be78:	0003      	movs	r3, r0
 801be7a:	465a      	mov	r2, fp
 801be7c:	9006      	str	r0, [sp, #24]
 801be7e:	0020      	movs	r0, r4
 801be80:	9105      	str	r1, [sp, #20]
 801be82:	f7e4 fb9d 	bl	80005c0 <__aeabi_lmul>
 801be86:	2280      	movs	r2, #128	@ 0x80
 801be88:	2300      	movs	r3, #0
 801be8a:	0612      	lsls	r2, r2, #24
 801be8c:	1880      	adds	r0, r0, r2
 801be8e:	4159      	adcs	r1, r3
 801be90:	2300      	movs	r3, #0
 801be92:	9101      	str	r1, [sp, #4]
 801be94:	9300      	str	r3, [sp, #0]
 801be96:	4652      	mov	r2, sl
 801be98:	9b04      	ldr	r3, [sp, #16]
 801be9a:	0028      	movs	r0, r5
 801be9c:	17e9      	asrs	r1, r5, #31
 801be9e:	f7e4 fb8f 	bl	80005c0 <__aeabi_lmul>
 801bea2:	9a00      	ldr	r2, [sp, #0]
 801bea4:	9b01      	ldr	r3, [sp, #4]
 801bea6:	1a12      	subs	r2, r2, r0
 801bea8:	418b      	sbcs	r3, r1
 801beaa:	2080      	movs	r0, #128	@ 0x80
 801beac:	2100      	movs	r1, #0
 801beae:	0600      	lsls	r0, r0, #24
 801beb0:	1812      	adds	r2, r2, r0
 801beb2:	414b      	adcs	r3, r1
 801beb4:	464a      	mov	r2, r9
 801beb6:	005b      	lsls	r3, r3, #1
 801beb8:	50bb      	str	r3, [r7, r2]
 801beba:	4658      	mov	r0, fp
 801bebc:	002a      	movs	r2, r5
 801bebe:	9b07      	ldr	r3, [sp, #28]
 801bec0:	9906      	ldr	r1, [sp, #24]
 801bec2:	f7e4 fb7d 	bl	80005c0 <__aeabi_lmul>
 801bec6:	2280      	movs	r2, #128	@ 0x80
 801bec8:	2300      	movs	r3, #0
 801beca:	0612      	lsls	r2, r2, #24
 801becc:	1880      	adds	r0, r0, r2
 801bece:	4159      	adcs	r1, r3
 801bed0:	2000      	movs	r0, #0
 801bed2:	9103      	str	r1, [sp, #12]
 801bed4:	9002      	str	r0, [sp, #8]
 801bed6:	4652      	mov	r2, sl
 801bed8:	9b04      	ldr	r3, [sp, #16]
 801beda:	0020      	movs	r0, r4
 801bedc:	9905      	ldr	r1, [sp, #20]
 801bede:	f7e4 fb6f 	bl	80005c0 <__aeabi_lmul>
 801bee2:	9b02      	ldr	r3, [sp, #8]
 801bee4:	9c03      	ldr	r4, [sp, #12]
 801bee6:	18c0      	adds	r0, r0, r3
 801bee8:	4161      	adcs	r1, r4
 801beea:	2380      	movs	r3, #128	@ 0x80
 801beec:	2400      	movs	r4, #0
 801beee:	061b      	lsls	r3, r3, #24
 801bef0:	18c0      	adds	r0, r0, r3
 801bef2:	4161      	adcs	r1, r4
 801bef4:	464a      	mov	r2, r9
 801bef6:	004b      	lsls	r3, r1, #1
 801bef8:	50b3      	str	r3, [r6, r2]
 801befa:	2308      	movs	r3, #8
 801befc:	469c      	mov	ip, r3
 801befe:	9b08      	ldr	r3, [sp, #32]
 801bf00:	44e0      	add	r8, ip
 801bf02:	3708      	adds	r7, #8
 801bf04:	3608      	adds	r6, #8
 801bf06:	4598      	cmp	r8, r3
 801bf08:	d196      	bne.n	801be38 <arm_cfft_radix4by2_inverse_q31+0x3c>
 801bf0a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801bf0c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801bf0e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bf10:	2302      	movs	r3, #2
 801bf12:	003a      	movs	r2, r7
 801bf14:	0029      	movs	r1, r5
 801bf16:	0020      	movs	r0, r4
 801bf18:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801bf1a:	f000 fb3b 	bl	801c594 <arm_radix4_butterfly_inverse_q31>
 801bf1e:	46a4      	mov	ip, r4
 801bf20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bf22:	2302      	movs	r3, #2
 801bf24:	0088      	lsls	r0, r1, #2
 801bf26:	4460      	add	r0, ip
 801bf28:	003a      	movs	r2, r7
 801bf2a:	0029      	movs	r1, r5
 801bf2c:	f000 fb32 	bl	801c594 <arm_radix4_butterfly_inverse_q31>
 801bf30:	46a4      	mov	ip, r4
 801bf32:	0128      	lsls	r0, r5, #4
 801bf34:	4460      	add	r0, ip
 801bf36:	6833      	ldr	r3, [r6, #0]
 801bf38:	005b      	lsls	r3, r3, #1
 801bf3a:	6033      	str	r3, [r6, #0]
 801bf3c:	6873      	ldr	r3, [r6, #4]
 801bf3e:	005b      	lsls	r3, r3, #1
 801bf40:	6073      	str	r3, [r6, #4]
 801bf42:	68b3      	ldr	r3, [r6, #8]
 801bf44:	005b      	lsls	r3, r3, #1
 801bf46:	60b3      	str	r3, [r6, #8]
 801bf48:	68f3      	ldr	r3, [r6, #12]
 801bf4a:	005b      	lsls	r3, r3, #1
 801bf4c:	60f3      	str	r3, [r6, #12]
 801bf4e:	3610      	adds	r6, #16
 801bf50:	42b0      	cmp	r0, r6
 801bf52:	d1f0      	bne.n	801bf36 <arm_cfft_radix4by2_inverse_q31+0x13a>
 801bf54:	b00f      	add	sp, #60	@ 0x3c
 801bf56:	bc3c      	pop	{r2, r3, r4, r5}
 801bf58:	4690      	mov	r8, r2
 801bf5a:	4699      	mov	r9, r3
 801bf5c:	46a2      	mov	sl, r4
 801bf5e:	46ab      	mov	fp, r5
 801bf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bf62:	2302      	movs	r3, #2
 801bf64:	2100      	movs	r1, #0
 801bf66:	0015      	movs	r5, r2
 801bf68:	f000 fb14 	bl	801c594 <arm_radix4_butterfly_inverse_q31>
 801bf6c:	46bc      	mov	ip, r7
 801bf6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf70:	002a      	movs	r2, r5
 801bf72:	0098      	lsls	r0, r3, #2
 801bf74:	4460      	add	r0, ip
 801bf76:	2302      	movs	r3, #2
 801bf78:	2100      	movs	r1, #0
 801bf7a:	f000 fb0b 	bl	801c594 <arm_radix4_butterfly_inverse_q31>
 801bf7e:	e7e9      	b.n	801bf54 <arm_cfft_radix4by2_inverse_q31+0x158>

0801bf80 <arm_cfft_q31>:
 801bf80:	b570      	push	{r4, r5, r6, lr}
 801bf82:	001e      	movs	r6, r3
 801bf84:	2380      	movs	r3, #128	@ 0x80
 801bf86:	000d      	movs	r5, r1
 801bf88:	0004      	movs	r4, r0
 801bf8a:	8801      	ldrh	r1, [r0, #0]
 801bf8c:	005b      	lsls	r3, r3, #1
 801bf8e:	2a01      	cmp	r2, #1
 801bf90:	d028      	beq.n	801bfe4 <arm_cfft_q31+0x64>
 801bf92:	4299      	cmp	r1, r3
 801bf94:	d020      	beq.n	801bfd8 <arm_cfft_q31+0x58>
 801bf96:	d812      	bhi.n	801bfbe <arm_cfft_q31+0x3e>
 801bf98:	2920      	cmp	r1, #32
 801bf9a:	d004      	beq.n	801bfa6 <arm_cfft_q31+0x26>
 801bf9c:	d949      	bls.n	801c032 <arm_cfft_q31+0xb2>
 801bf9e:	2940      	cmp	r1, #64	@ 0x40
 801bfa0:	d01a      	beq.n	801bfd8 <arm_cfft_q31+0x58>
 801bfa2:	2980      	cmp	r1, #128	@ 0x80
 801bfa4:	d103      	bne.n	801bfae <arm_cfft_q31+0x2e>
 801bfa6:	6862      	ldr	r2, [r4, #4]
 801bfa8:	0028      	movs	r0, r5
 801bfaa:	f7ff fe65 	bl	801bc78 <arm_cfft_radix4by2_q31>
 801bfae:	2e00      	cmp	r6, #0
 801bfb0:	d004      	beq.n	801bfbc <arm_cfft_q31+0x3c>
 801bfb2:	68a2      	ldr	r2, [r4, #8]
 801bfb4:	89a1      	ldrh	r1, [r4, #12]
 801bfb6:	0028      	movs	r0, r5
 801bfb8:	f7e4 f8a6 	bl	8000108 <arm_bitreversal_32>
 801bfbc:	bd70      	pop	{r4, r5, r6, pc}
 801bfbe:	2380      	movs	r3, #128	@ 0x80
 801bfc0:	00db      	lsls	r3, r3, #3
 801bfc2:	4299      	cmp	r1, r3
 801bfc4:	d008      	beq.n	801bfd8 <arm_cfft_q31+0x58>
 801bfc6:	d92f      	bls.n	801c028 <arm_cfft_q31+0xa8>
 801bfc8:	2380      	movs	r3, #128	@ 0x80
 801bfca:	011b      	lsls	r3, r3, #4
 801bfcc:	4299      	cmp	r1, r3
 801bfce:	d0ea      	beq.n	801bfa6 <arm_cfft_q31+0x26>
 801bfd0:	2380      	movs	r3, #128	@ 0x80
 801bfd2:	015b      	lsls	r3, r3, #5
 801bfd4:	4299      	cmp	r1, r3
 801bfd6:	d1ea      	bne.n	801bfae <arm_cfft_q31+0x2e>
 801bfd8:	2301      	movs	r3, #1
 801bfda:	6862      	ldr	r2, [r4, #4]
 801bfdc:	0028      	movs	r0, r5
 801bfde:	f000 f833 	bl	801c048 <arm_radix4_butterfly_q31>
 801bfe2:	e7e4      	b.n	801bfae <arm_cfft_q31+0x2e>
 801bfe4:	4299      	cmp	r1, r3
 801bfe6:	d019      	beq.n	801c01c <arm_cfft_q31+0x9c>
 801bfe8:	d80b      	bhi.n	801c002 <arm_cfft_q31+0x82>
 801bfea:	2920      	cmp	r1, #32
 801bfec:	d004      	beq.n	801bff8 <arm_cfft_q31+0x78>
 801bfee:	d928      	bls.n	801c042 <arm_cfft_q31+0xc2>
 801bff0:	2940      	cmp	r1, #64	@ 0x40
 801bff2:	d013      	beq.n	801c01c <arm_cfft_q31+0x9c>
 801bff4:	2980      	cmp	r1, #128	@ 0x80
 801bff6:	d1da      	bne.n	801bfae <arm_cfft_q31+0x2e>
 801bff8:	6862      	ldr	r2, [r4, #4]
 801bffa:	0028      	movs	r0, r5
 801bffc:	f7ff fefe 	bl	801bdfc <arm_cfft_radix4by2_inverse_q31>
 801c000:	e7d5      	b.n	801bfae <arm_cfft_q31+0x2e>
 801c002:	2380      	movs	r3, #128	@ 0x80
 801c004:	00db      	lsls	r3, r3, #3
 801c006:	4299      	cmp	r1, r3
 801c008:	d008      	beq.n	801c01c <arm_cfft_q31+0x9c>
 801c00a:	d915      	bls.n	801c038 <arm_cfft_q31+0xb8>
 801c00c:	2380      	movs	r3, #128	@ 0x80
 801c00e:	011b      	lsls	r3, r3, #4
 801c010:	4299      	cmp	r1, r3
 801c012:	d0f1      	beq.n	801bff8 <arm_cfft_q31+0x78>
 801c014:	2380      	movs	r3, #128	@ 0x80
 801c016:	015b      	lsls	r3, r3, #5
 801c018:	4299      	cmp	r1, r3
 801c01a:	d1c8      	bne.n	801bfae <arm_cfft_q31+0x2e>
 801c01c:	2301      	movs	r3, #1
 801c01e:	6862      	ldr	r2, [r4, #4]
 801c020:	0028      	movs	r0, r5
 801c022:	f000 fab7 	bl	801c594 <arm_radix4_butterfly_inverse_q31>
 801c026:	e7c2      	b.n	801bfae <arm_cfft_q31+0x2e>
 801c028:	2380      	movs	r3, #128	@ 0x80
 801c02a:	009b      	lsls	r3, r3, #2
 801c02c:	4299      	cmp	r1, r3
 801c02e:	d0ba      	beq.n	801bfa6 <arm_cfft_q31+0x26>
 801c030:	e7bd      	b.n	801bfae <arm_cfft_q31+0x2e>
 801c032:	2910      	cmp	r1, #16
 801c034:	d1bb      	bne.n	801bfae <arm_cfft_q31+0x2e>
 801c036:	e7cf      	b.n	801bfd8 <arm_cfft_q31+0x58>
 801c038:	2380      	movs	r3, #128	@ 0x80
 801c03a:	009b      	lsls	r3, r3, #2
 801c03c:	4299      	cmp	r1, r3
 801c03e:	d0db      	beq.n	801bff8 <arm_cfft_q31+0x78>
 801c040:	e7b5      	b.n	801bfae <arm_cfft_q31+0x2e>
 801c042:	2910      	cmp	r1, #16
 801c044:	d1b3      	bne.n	801bfae <arm_cfft_q31+0x2e>
 801c046:	e7e9      	b.n	801c01c <arm_cfft_q31+0x9c>

0801c048 <arm_radix4_butterfly_q31>:
 801c048:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c04a:	464d      	mov	r5, r9
 801c04c:	4644      	mov	r4, r8
 801c04e:	465f      	mov	r7, fp
 801c050:	4656      	mov	r6, sl
 801c052:	469c      	mov	ip, r3
 801c054:	b4f0      	push	{r4, r5, r6, r7}
 801c056:	b0a7      	sub	sp, #156	@ 0x9c
 801c058:	9114      	str	r1, [sp, #80]	@ 0x50
 801c05a:	0889      	lsrs	r1, r1, #2
 801c05c:	9310      	str	r3, [sp, #64]	@ 0x40
 801c05e:	00cb      	lsls	r3, r1, #3
 801c060:	0015      	movs	r5, r2
 801c062:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c064:	18c2      	adds	r2, r0, r3
 801c066:	000c      	movs	r4, r1
 801c068:	469a      	mov	sl, r3
 801c06a:	9124      	str	r1, [sp, #144]	@ 0x90
 801c06c:	18d1      	adds	r1, r2, r3
 801c06e:	4663      	mov	r3, ip
 801c070:	468b      	mov	fp, r1
 801c072:	0119      	lsls	r1, r3, #4
 801c074:	910d      	str	r1, [sp, #52]	@ 0x34
 801c076:	00d9      	lsls	r1, r3, #3
 801c078:	005b      	lsls	r3, r3, #1
 801c07a:	4463      	add	r3, ip
 801c07c:	910e      	str	r1, [sp, #56]	@ 0x38
 801c07e:	00d9      	lsls	r1, r3, #3
 801c080:	465b      	mov	r3, fp
 801c082:	44da      	add	sl, fp
 801c084:	4690      	mov	r8, r2
 801c086:	4683      	mov	fp, r0
 801c088:	4699      	mov	r9, r3
 801c08a:	9022      	str	r0, [sp, #136]	@ 0x88
 801c08c:	9025      	str	r0, [sp, #148]	@ 0x94
 801c08e:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c090:	9502      	str	r5, [sp, #8]
 801c092:	9500      	str	r5, [sp, #0]
 801c094:	9501      	str	r5, [sp, #4]
 801c096:	9407      	str	r4, [sp, #28]
 801c098:	465b      	mov	r3, fp
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	4642      	mov	r2, r8
 801c09e:	111c      	asrs	r4, r3, #4
 801c0a0:	464b      	mov	r3, r9
 801c0a2:	4658      	mov	r0, fp
 801c0a4:	681b      	ldr	r3, [r3, #0]
 801c0a6:	6812      	ldr	r2, [r2, #0]
 801c0a8:	111b      	asrs	r3, r3, #4
 801c0aa:	18e7      	adds	r7, r4, r3
 801c0ac:	1ae3      	subs	r3, r4, r3
 801c0ae:	1114      	asrs	r4, r2, #4
 801c0b0:	4652      	mov	r2, sl
 801c0b2:	6840      	ldr	r0, [r0, #4]
 801c0b4:	6812      	ldr	r2, [r2, #0]
 801c0b6:	1105      	asrs	r5, r0, #4
 801c0b8:	4648      	mov	r0, r9
 801c0ba:	9303      	str	r3, [sp, #12]
 801c0bc:	1113      	asrs	r3, r2, #4
 801c0be:	18e2      	adds	r2, r4, r3
 801c0c0:	465c      	mov	r4, fp
 801c0c2:	6840      	ldr	r0, [r0, #4]
 801c0c4:	1103      	asrs	r3, r0, #4
 801c0c6:	18ee      	adds	r6, r5, r3
 801c0c8:	1ae8      	subs	r0, r5, r3
 801c0ca:	18bb      	adds	r3, r7, r2
 801c0cc:	6023      	str	r3, [r4, #0]
 801c0ce:	4644      	mov	r4, r8
 801c0d0:	6864      	ldr	r4, [r4, #4]
 801c0d2:	9004      	str	r0, [sp, #16]
 801c0d4:	1125      	asrs	r5, r4, #4
 801c0d6:	4654      	mov	r4, sl
 801c0d8:	6864      	ldr	r4, [r4, #4]
 801c0da:	1123      	asrs	r3, r4, #4
 801c0dc:	465c      	mov	r4, fp
 801c0de:	18eb      	adds	r3, r5, r3
 801c0e0:	18f1      	adds	r1, r6, r3
 801c0e2:	6061      	str	r1, [r4, #4]
 801c0e4:	4655      	mov	r5, sl
 801c0e6:	4644      	mov	r4, r8
 801c0e8:	686d      	ldr	r5, [r5, #4]
 801c0ea:	6864      	ldr	r4, [r4, #4]
 801c0ec:	1129      	asrs	r1, r5, #4
 801c0ee:	1124      	asrs	r4, r4, #4
 801c0f0:	1a64      	subs	r4, r4, r1
 801c0f2:	4641      	mov	r1, r8
 801c0f4:	6809      	ldr	r1, [r1, #0]
 801c0f6:	9405      	str	r4, [sp, #20]
 801c0f8:	1108      	asrs	r0, r1, #4
 801c0fa:	4651      	mov	r1, sl
 801c0fc:	6809      	ldr	r1, [r1, #0]
 801c0fe:	1abc      	subs	r4, r7, r2
 801c100:	1109      	asrs	r1, r1, #4
 801c102:	1a41      	subs	r1, r0, r1
 801c104:	17e2      	asrs	r2, r4, #31
 801c106:	9106      	str	r1, [sp, #24]
 801c108:	0011      	movs	r1, r2
 801c10a:	9a01      	ldr	r2, [sp, #4]
 801c10c:	9108      	str	r1, [sp, #32]
 801c10e:	6817      	ldr	r7, [r2, #0]
 801c110:	17fd      	asrs	r5, r7, #31
 801c112:	0028      	movs	r0, r5
 801c114:	1af5      	subs	r5, r6, r3
 801c116:	17ee      	asrs	r6, r5, #31
 801c118:	960a      	str	r6, [sp, #40]	@ 0x28
 801c11a:	6856      	ldr	r6, [r2, #4]
 801c11c:	9009      	str	r0, [sp, #36]	@ 0x24
 801c11e:	17f3      	asrs	r3, r6, #31
 801c120:	003a      	movs	r2, r7
 801c122:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c124:	0003      	movs	r3, r0
 801c126:	0020      	movs	r0, r4
 801c128:	f7e4 fa4a 	bl	80005c0 <__aeabi_lmul>
 801c12c:	0032      	movs	r2, r6
 801c12e:	17f3      	asrs	r3, r6, #31
 801c130:	910c      	str	r1, [sp, #48]	@ 0x30
 801c132:	0028      	movs	r0, r5
 801c134:	17e9      	asrs	r1, r5, #31
 801c136:	f7e4 fa43 	bl	80005c0 <__aeabi_lmul>
 801c13a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c13c:	002a      	movs	r2, r5
 801c13e:	4684      	mov	ip, r0
 801c140:	4640      	mov	r0, r8
 801c142:	4461      	add	r1, ip
 801c144:	0049      	lsls	r1, r1, #1
 801c146:	6001      	str	r1, [r0, #0]
 801c148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c14a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c14c:	0038      	movs	r0, r7
 801c14e:	f7e4 fa37 	bl	80005c0 <__aeabi_lmul>
 801c152:	0032      	movs	r2, r6
 801c154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c156:	000d      	movs	r5, r1
 801c158:	0020      	movs	r0, r4
 801c15a:	9908      	ldr	r1, [sp, #32]
 801c15c:	f7e4 fa30 	bl	80005c0 <__aeabi_lmul>
 801c160:	4646      	mov	r6, r8
 801c162:	1a6d      	subs	r5, r5, r1
 801c164:	006d      	lsls	r5, r5, #1
 801c166:	6075      	str	r5, [r6, #4]
 801c168:	9903      	ldr	r1, [sp, #12]
 801c16a:	9d05      	ldr	r5, [sp, #20]
 801c16c:	000c      	movs	r4, r1
 801c16e:	46ac      	mov	ip, r5
 801c170:	4464      	add	r4, ip
 801c172:	17e6      	asrs	r6, r4, #31
 801c174:	0031      	movs	r1, r6
 801c176:	9b00      	ldr	r3, [sp, #0]
 801c178:	9804      	ldr	r0, [sp, #16]
 801c17a:	681e      	ldr	r6, [r3, #0]
 801c17c:	17f7      	asrs	r7, r6, #31
 801c17e:	9709      	str	r7, [sp, #36]	@ 0x24
 801c180:	9f06      	ldr	r7, [sp, #24]
 801c182:	0032      	movs	r2, r6
 801c184:	1bc7      	subs	r7, r0, r7
 801c186:	17fd      	asrs	r5, r7, #31
 801c188:	950a      	str	r5, [sp, #40]	@ 0x28
 801c18a:	685d      	ldr	r5, [r3, #4]
 801c18c:	17f3      	asrs	r3, r6, #31
 801c18e:	17e8      	asrs	r0, r5, #31
 801c190:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c192:	0020      	movs	r0, r4
 801c194:	9108      	str	r1, [sp, #32]
 801c196:	f7e4 fa13 	bl	80005c0 <__aeabi_lmul>
 801c19a:	002a      	movs	r2, r5
 801c19c:	17eb      	asrs	r3, r5, #31
 801c19e:	910c      	str	r1, [sp, #48]	@ 0x30
 801c1a0:	0038      	movs	r0, r7
 801c1a2:	17f9      	asrs	r1, r7, #31
 801c1a4:	f7e4 fa0c 	bl	80005c0 <__aeabi_lmul>
 801c1a8:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c1aa:	003a      	movs	r2, r7
 801c1ac:	4684      	mov	ip, r0
 801c1ae:	4648      	mov	r0, r9
 801c1b0:	4461      	add	r1, ip
 801c1b2:	0049      	lsls	r1, r1, #1
 801c1b4:	6001      	str	r1, [r0, #0]
 801c1b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c1b8:	0030      	movs	r0, r6
 801c1ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c1bc:	f7e4 fa00 	bl	80005c0 <__aeabi_lmul>
 801c1c0:	002a      	movs	r2, r5
 801c1c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c1c4:	000e      	movs	r6, r1
 801c1c6:	0020      	movs	r0, r4
 801c1c8:	9908      	ldr	r1, [sp, #32]
 801c1ca:	f7e4 f9f9 	bl	80005c0 <__aeabi_lmul>
 801c1ce:	464c      	mov	r4, r9
 801c1d0:	9d05      	ldr	r5, [sp, #20]
 801c1d2:	1a76      	subs	r6, r6, r1
 801c1d4:	9903      	ldr	r1, [sp, #12]
 801c1d6:	0076      	lsls	r6, r6, #1
 801c1d8:	6066      	str	r6, [r4, #4]
 801c1da:	1b4c      	subs	r4, r1, r5
 801c1dc:	9e06      	ldr	r6, [sp, #24]
 801c1de:	17e1      	asrs	r1, r4, #31
 801c1e0:	9103      	str	r1, [sp, #12]
 801c1e2:	9902      	ldr	r1, [sp, #8]
 801c1e4:	46b4      	mov	ip, r6
 801c1e6:	680f      	ldr	r7, [r1, #0]
 801c1e8:	9804      	ldr	r0, [sp, #16]
 801c1ea:	17fd      	asrs	r5, r7, #31
 801c1ec:	002b      	movs	r3, r5
 801c1ee:	684e      	ldr	r6, [r1, #4]
 801c1f0:	4460      	add	r0, ip
 801c1f2:	0005      	movs	r5, r0
 801c1f4:	17c0      	asrs	r0, r0, #31
 801c1f6:	9005      	str	r0, [sp, #20]
 801c1f8:	17f0      	asrs	r0, r6, #31
 801c1fa:	9006      	str	r0, [sp, #24]
 801c1fc:	003a      	movs	r2, r7
 801c1fe:	0020      	movs	r0, r4
 801c200:	17e1      	asrs	r1, r4, #31
 801c202:	9304      	str	r3, [sp, #16]
 801c204:	f7e4 f9dc 	bl	80005c0 <__aeabi_lmul>
 801c208:	0032      	movs	r2, r6
 801c20a:	9108      	str	r1, [sp, #32]
 801c20c:	17f3      	asrs	r3, r6, #31
 801c20e:	0028      	movs	r0, r5
 801c210:	17e9      	asrs	r1, r5, #31
 801c212:	f7e4 f9d5 	bl	80005c0 <__aeabi_lmul>
 801c216:	9808      	ldr	r0, [sp, #32]
 801c218:	002a      	movs	r2, r5
 801c21a:	4684      	mov	ip, r0
 801c21c:	4650      	mov	r0, sl
 801c21e:	4461      	add	r1, ip
 801c220:	0049      	lsls	r1, r1, #1
 801c222:	6001      	str	r1, [r0, #0]
 801c224:	9b05      	ldr	r3, [sp, #20]
 801c226:	9904      	ldr	r1, [sp, #16]
 801c228:	0038      	movs	r0, r7
 801c22a:	f7e4 f9c9 	bl	80005c0 <__aeabi_lmul>
 801c22e:	0020      	movs	r0, r4
 801c230:	2408      	movs	r4, #8
 801c232:	000d      	movs	r5, r1
 801c234:	0032      	movs	r2, r6
 801c236:	9b06      	ldr	r3, [sp, #24]
 801c238:	9903      	ldr	r1, [sp, #12]
 801c23a:	f7e4 f9c1 	bl	80005c0 <__aeabi_lmul>
 801c23e:	46a4      	mov	ip, r4
 801c240:	4650      	mov	r0, sl
 801c242:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c244:	44e3      	add	fp, ip
 801c246:	44e0      	add	r8, ip
 801c248:	44e1      	add	r9, ip
 801c24a:	44e2      	add	sl, ip
 801c24c:	46a4      	mov	ip, r4
 801c24e:	1a6d      	subs	r5, r5, r1
 801c250:	006d      	lsls	r5, r5, #1
 801c252:	9a01      	ldr	r2, [sp, #4]
 801c254:	6045      	str	r5, [r0, #4]
 801c256:	9807      	ldr	r0, [sp, #28]
 801c258:	4462      	add	r2, ip
 801c25a:	3801      	subs	r0, #1
 801c25c:	9201      	str	r2, [sp, #4]
 801c25e:	9007      	str	r0, [sp, #28]
 801c260:	9b00      	ldr	r3, [sp, #0]
 801c262:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c264:	9902      	ldr	r1, [sp, #8]
 801c266:	4694      	mov	ip, r2
 801c268:	4463      	add	r3, ip
 801c26a:	9300      	str	r3, [sp, #0]
 801c26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c26e:	469c      	mov	ip, r3
 801c270:	4461      	add	r1, ip
 801c272:	9102      	str	r1, [sp, #8]
 801c274:	2800      	cmp	r0, #0
 801c276:	d000      	beq.n	801c27a <arm_radix4_butterfly_q31+0x232>
 801c278:	e70e      	b.n	801c098 <arm_radix4_butterfly_q31+0x50>
 801c27a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c27c:	009b      	lsls	r3, r3, #2
 801c27e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c280:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c282:	9320      	str	r3, [sp, #128]	@ 0x80
 801c284:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c286:	2b04      	cmp	r3, #4
 801c288:	d800      	bhi.n	801c28c <arm_radix4_butterfly_q31+0x244>
 801c28a:	e180      	b.n	801c58e <arm_radix4_butterfly_q31+0x546>
 801c28c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c28e:	0893      	lsrs	r3, r2, #2
 801c290:	1e59      	subs	r1, r3, #1
 801c292:	9321      	str	r3, [sp, #132]	@ 0x84
 801c294:	00db      	lsls	r3, r3, #3
 801c296:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c298:	00d3      	lsls	r3, r2, #3
 801c29a:	9300      	str	r3, [sp, #0]
 801c29c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c29e:	911a      	str	r1, [sp, #104]	@ 0x68
 801c2a0:	00da      	lsls	r2, r3, #3
 801c2a2:	921e      	str	r2, [sp, #120]	@ 0x78
 801c2a4:	011a      	lsls	r2, r3, #4
 801c2a6:	921d      	str	r2, [sp, #116]	@ 0x74
 801c2a8:	001a      	movs	r2, r3
 801c2aa:	4694      	mov	ip, r2
 801c2ac:	005b      	lsls	r3, r3, #1
 801c2ae:	4463      	add	r3, ip
 801c2b0:	00db      	lsls	r3, r3, #3
 801c2b2:	931c      	str	r3, [sp, #112]	@ 0x70
 801c2b4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c2b6:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c2b8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c2ba:	9318      	str	r3, [sp, #96]	@ 0x60
 801c2bc:	9319      	str	r3, [sp, #100]	@ 0x64
 801c2be:	9316      	str	r3, [sp, #88]	@ 0x58
 801c2c0:	2300      	movs	r3, #0
 801c2c2:	9315      	str	r3, [sp, #84]	@ 0x54
 801c2c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c2c6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c2c8:	681a      	ldr	r2, [r3, #0]
 801c2ca:	685b      	ldr	r3, [r3, #4]
 801c2cc:	9205      	str	r2, [sp, #20]
 801c2ce:	9306      	str	r3, [sp, #24]
 801c2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c2d2:	468c      	mov	ip, r1
 801c2d4:	681a      	ldr	r2, [r3, #0]
 801c2d6:	685b      	ldr	r3, [r3, #4]
 801c2d8:	9207      	str	r2, [sp, #28]
 801c2da:	9308      	str	r3, [sp, #32]
 801c2dc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c2de:	681a      	ldr	r2, [r3, #0]
 801c2e0:	685b      	ldr	r3, [r3, #4]
 801c2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 801c2e4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c2e6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2e8:	0013      	movs	r3, r2
 801c2ea:	4463      	add	r3, ip
 801c2ec:	4698      	mov	r8, r3
 801c2ee:	0013      	movs	r3, r2
 801c2f0:	4442      	add	r2, r8
 801c2f2:	4691      	mov	r9, r2
 801c2f4:	001a      	movs	r2, r3
 801c2f6:	444a      	add	r2, r9
 801c2f8:	4692      	mov	sl, r2
 801c2fa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c2fc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c2fe:	4293      	cmp	r3, r2
 801c300:	d800      	bhi.n	801c304 <arm_radix4_butterfly_q31+0x2bc>
 801c302:	e0dd      	b.n	801c4c0 <arm_radix4_butterfly_q31+0x478>
 801c304:	4694      	mov	ip, r2
 801c306:	468b      	mov	fp, r1
 801c308:	4644      	mov	r4, r8
 801c30a:	4655      	mov	r5, sl
 801c30c:	9b07      	ldr	r3, [sp, #28]
 801c30e:	17db      	asrs	r3, r3, #31
 801c310:	930c      	str	r3, [sp, #48]	@ 0x30
 801c312:	9b08      	ldr	r3, [sp, #32]
 801c314:	17db      	asrs	r3, r3, #31
 801c316:	930d      	str	r3, [sp, #52]	@ 0x34
 801c318:	9b05      	ldr	r3, [sp, #20]
 801c31a:	17db      	asrs	r3, r3, #31
 801c31c:	930e      	str	r3, [sp, #56]	@ 0x38
 801c31e:	9b06      	ldr	r3, [sp, #24]
 801c320:	17db      	asrs	r3, r3, #31
 801c322:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c326:	17db      	asrs	r3, r3, #31
 801c328:	9310      	str	r3, [sp, #64]	@ 0x40
 801c32a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c32c:	17db      	asrs	r3, r3, #31
 801c32e:	9311      	str	r3, [sp, #68]	@ 0x44
 801c330:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c332:	4463      	add	r3, ip
 801c334:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c336:	465b      	mov	r3, fp
 801c338:	4659      	mov	r1, fp
 801c33a:	681a      	ldr	r2, [r3, #0]
 801c33c:	464b      	mov	r3, r9
 801c33e:	684f      	ldr	r7, [r1, #4]
 801c340:	4649      	mov	r1, r9
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	18d6      	adds	r6, r2, r3
 801c346:	1ad3      	subs	r3, r2, r3
 801c348:	9301      	str	r3, [sp, #4]
 801c34a:	684b      	ldr	r3, [r1, #4]
 801c34c:	18f8      	adds	r0, r7, r3
 801c34e:	1af9      	subs	r1, r7, r3
 801c350:	6827      	ldr	r7, [r4, #0]
 801c352:	9102      	str	r1, [sp, #8]
 801c354:	003a      	movs	r2, r7
 801c356:	682f      	ldr	r7, [r5, #0]
 801c358:	46bc      	mov	ip, r7
 801c35a:	465f      	mov	r7, fp
 801c35c:	4462      	add	r2, ip
 801c35e:	18b3      	adds	r3, r6, r2
 801c360:	109b      	asrs	r3, r3, #2
 801c362:	603b      	str	r3, [r7, #0]
 801c364:	6867      	ldr	r7, [r4, #4]
 801c366:	1ab6      	subs	r6, r6, r2
 801c368:	46b8      	mov	r8, r7
 801c36a:	686f      	ldr	r7, [r5, #4]
 801c36c:	17f2      	asrs	r2, r6, #31
 801c36e:	46bc      	mov	ip, r7
 801c370:	44e0      	add	r8, ip
 801c372:	4643      	mov	r3, r8
 801c374:	465f      	mov	r7, fp
 801c376:	18c1      	adds	r1, r0, r3
 801c378:	1089      	asrs	r1, r1, #2
 801c37a:	6079      	str	r1, [r7, #4]
 801c37c:	9900      	ldr	r1, [sp, #0]
 801c37e:	4690      	mov	r8, r2
 801c380:	468c      	mov	ip, r1
 801c382:	6867      	ldr	r7, [r4, #4]
 801c384:	6869      	ldr	r1, [r5, #4]
 801c386:	44e3      	add	fp, ip
 801c388:	1a7f      	subs	r7, r7, r1
 801c38a:	9703      	str	r7, [sp, #12]
 801c38c:	6829      	ldr	r1, [r5, #0]
 801c38e:	6827      	ldr	r7, [r4, #0]
 801c390:	1a7f      	subs	r7, r7, r1
 801c392:	9704      	str	r7, [sp, #16]
 801c394:	1ac7      	subs	r7, r0, r3
 801c396:	17fa      	asrs	r2, r7, #31
 801c398:	4692      	mov	sl, r2
 801c39a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c39c:	9a07      	ldr	r2, [sp, #28]
 801c39e:	0030      	movs	r0, r6
 801c3a0:	4641      	mov	r1, r8
 801c3a2:	f7e4 f90d 	bl	80005c0 <__aeabi_lmul>
 801c3a6:	9a08      	ldr	r2, [sp, #32]
 801c3a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c3aa:	9112      	str	r1, [sp, #72]	@ 0x48
 801c3ac:	0038      	movs	r0, r7
 801c3ae:	4651      	mov	r1, sl
 801c3b0:	f7e4 f906 	bl	80005c0 <__aeabi_lmul>
 801c3b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c3b6:	9a07      	ldr	r2, [sp, #28]
 801c3b8:	4684      	mov	ip, r0
 801c3ba:	4461      	add	r1, ip
 801c3bc:	1049      	asrs	r1, r1, #1
 801c3be:	6021      	str	r1, [r4, #0]
 801c3c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c3c2:	0038      	movs	r0, r7
 801c3c4:	4651      	mov	r1, sl
 801c3c6:	f7e4 f8fb 	bl	80005c0 <__aeabi_lmul>
 801c3ca:	9a08      	ldr	r2, [sp, #32]
 801c3cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c3ce:	000f      	movs	r7, r1
 801c3d0:	0030      	movs	r0, r6
 801c3d2:	4641      	mov	r1, r8
 801c3d4:	f7e4 f8f4 	bl	80005c0 <__aeabi_lmul>
 801c3d8:	9b00      	ldr	r3, [sp, #0]
 801c3da:	9a01      	ldr	r2, [sp, #4]
 801c3dc:	469c      	mov	ip, r3
 801c3de:	9803      	ldr	r0, [sp, #12]
 801c3e0:	1a7f      	subs	r7, r7, r1
 801c3e2:	107f      	asrs	r7, r7, #1
 801c3e4:	6067      	str	r7, [r4, #4]
 801c3e6:	0016      	movs	r6, r2
 801c3e8:	4464      	add	r4, ip
 801c3ea:	4684      	mov	ip, r0
 801c3ec:	4466      	add	r6, ip
 801c3ee:	17f2      	asrs	r2, r6, #31
 801c3f0:	4690      	mov	r8, r2
 801c3f2:	9902      	ldr	r1, [sp, #8]
 801c3f4:	9f04      	ldr	r7, [sp, #16]
 801c3f6:	0030      	movs	r0, r6
 801c3f8:	1bcf      	subs	r7, r1, r7
 801c3fa:	17fa      	asrs	r2, r7, #31
 801c3fc:	4692      	mov	sl, r2
 801c3fe:	4641      	mov	r1, r8
 801c400:	9a05      	ldr	r2, [sp, #20]
 801c402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c404:	f7e4 f8dc 	bl	80005c0 <__aeabi_lmul>
 801c408:	9a06      	ldr	r2, [sp, #24]
 801c40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c40c:	9112      	str	r1, [sp, #72]	@ 0x48
 801c40e:	0038      	movs	r0, r7
 801c410:	4651      	mov	r1, sl
 801c412:	f7e4 f8d5 	bl	80005c0 <__aeabi_lmul>
 801c416:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c418:	9a05      	ldr	r2, [sp, #20]
 801c41a:	4684      	mov	ip, r0
 801c41c:	4648      	mov	r0, r9
 801c41e:	4461      	add	r1, ip
 801c420:	1049      	asrs	r1, r1, #1
 801c422:	6001      	str	r1, [r0, #0]
 801c424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c426:	0038      	movs	r0, r7
 801c428:	4651      	mov	r1, sl
 801c42a:	f7e4 f8c9 	bl	80005c0 <__aeabi_lmul>
 801c42e:	9a06      	ldr	r2, [sp, #24]
 801c430:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c432:	000f      	movs	r7, r1
 801c434:	0030      	movs	r0, r6
 801c436:	4641      	mov	r1, r8
 801c438:	f7e4 f8c2 	bl	80005c0 <__aeabi_lmul>
 801c43c:	464e      	mov	r6, r9
 801c43e:	9a00      	ldr	r2, [sp, #0]
 801c440:	9b01      	ldr	r3, [sp, #4]
 801c442:	4694      	mov	ip, r2
 801c444:	9803      	ldr	r0, [sp, #12]
 801c446:	1a7f      	subs	r7, r7, r1
 801c448:	107f      	asrs	r7, r7, #1
 801c44a:	6077      	str	r7, [r6, #4]
 801c44c:	1a1e      	subs	r6, r3, r0
 801c44e:	9b04      	ldr	r3, [sp, #16]
 801c450:	44e1      	add	r9, ip
 801c452:	469c      	mov	ip, r3
 801c454:	17f0      	asrs	r0, r6, #31
 801c456:	4680      	mov	r8, r0
 801c458:	9902      	ldr	r1, [sp, #8]
 801c45a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c45c:	4461      	add	r1, ip
 801c45e:	17cb      	asrs	r3, r1, #31
 801c460:	000f      	movs	r7, r1
 801c462:	469a      	mov	sl, r3
 801c464:	0030      	movs	r0, r6
 801c466:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c468:	4641      	mov	r1, r8
 801c46a:	f7e4 f8a9 	bl	80005c0 <__aeabi_lmul>
 801c46e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c470:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c472:	9101      	str	r1, [sp, #4]
 801c474:	0038      	movs	r0, r7
 801c476:	4651      	mov	r1, sl
 801c478:	f7e4 f8a2 	bl	80005c0 <__aeabi_lmul>
 801c47c:	9801      	ldr	r0, [sp, #4]
 801c47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c480:	4684      	mov	ip, r0
 801c482:	4461      	add	r1, ip
 801c484:	1049      	asrs	r1, r1, #1
 801c486:	6029      	str	r1, [r5, #0]
 801c488:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c48a:	0038      	movs	r0, r7
 801c48c:	4651      	mov	r1, sl
 801c48e:	f7e4 f897 	bl	80005c0 <__aeabi_lmul>
 801c492:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c494:	000f      	movs	r7, r1
 801c496:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c498:	0030      	movs	r0, r6
 801c49a:	4641      	mov	r1, r8
 801c49c:	f7e4 f890 	bl	80005c0 <__aeabi_lmul>
 801c4a0:	1a7f      	subs	r7, r7, r1
 801c4a2:	107f      	asrs	r7, r7, #1
 801c4a4:	606f      	str	r7, [r5, #4]
 801c4a6:	9a00      	ldr	r2, [sp, #0]
 801c4a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c4aa:	4694      	mov	ip, r2
 801c4ac:	4465      	add	r5, ip
 801c4ae:	468c      	mov	ip, r1
 801c4b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c4b2:	0013      	movs	r3, r2
 801c4b4:	4462      	add	r2, ip
 801c4b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c4b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c4ba:	429a      	cmp	r2, r3
 801c4bc:	d900      	bls.n	801c4c0 <arm_radix4_butterfly_q31+0x478>
 801c4be:	e73a      	b.n	801c336 <arm_radix4_butterfly_q31+0x2ee>
 801c4c0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801c4c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c4c4:	468c      	mov	ip, r1
 801c4c6:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801c4c8:	4462      	add	r2, ip
 801c4ca:	468c      	mov	ip, r1
 801c4cc:	9216      	str	r2, [sp, #88]	@ 0x58
 801c4ce:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801c4d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c4d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801c4d4:	4462      	add	r2, ip
 801c4d6:	468c      	mov	ip, r1
 801c4d8:	9219      	str	r2, [sp, #100]	@ 0x64
 801c4da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c4dc:	3301      	adds	r3, #1
 801c4de:	4462      	add	r2, ip
 801c4e0:	9218      	str	r2, [sp, #96]	@ 0x60
 801c4e2:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801c4e4:	9315      	str	r3, [sp, #84]	@ 0x54
 801c4e6:	3208      	adds	r2, #8
 801c4e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c4ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c4ec:	4293      	cmp	r3, r2
 801c4ee:	d800      	bhi.n	801c4f2 <arm_radix4_butterfly_q31+0x4aa>
 801c4f0:	e6e8      	b.n	801c2c4 <arm_radix4_butterfly_q31+0x27c>
 801c4f2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c4f4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c4f6:	009b      	lsls	r3, r3, #2
 801c4f8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c4fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801c4fc:	9213      	str	r2, [sp, #76]	@ 0x4c
 801c4fe:	089b      	lsrs	r3, r3, #2
 801c500:	9320      	str	r3, [sp, #128]	@ 0x80
 801c502:	2b04      	cmp	r3, #4
 801c504:	d900      	bls.n	801c508 <arm_radix4_butterfly_q31+0x4c0>
 801c506:	e6c1      	b.n	801c28c <arm_radix4_butterfly_q31+0x244>
 801c508:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c50a:	469a      	mov	sl, r3
 801c50c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c50e:	691c      	ldr	r4, [r3, #16]
 801c510:	685a      	ldr	r2, [r3, #4]
 801c512:	46a1      	mov	r9, r4
 801c514:	4690      	mov	r8, r2
 801c516:	6819      	ldr	r1, [r3, #0]
 801c518:	689a      	ldr	r2, [r3, #8]
 801c51a:	699f      	ldr	r7, [r3, #24]
 801c51c:	188d      	adds	r5, r1, r2
 801c51e:	444d      	add	r5, r9
 801c520:	19ed      	adds	r5, r5, r7
 801c522:	69de      	ldr	r6, [r3, #28]
 801c524:	601d      	str	r5, [r3, #0]
 801c526:	4645      	mov	r5, r8
 801c528:	46b4      	mov	ip, r6
 801c52a:	68d8      	ldr	r0, [r3, #12]
 801c52c:	695c      	ldr	r4, [r3, #20]
 801c52e:	182d      	adds	r5, r5, r0
 801c530:	192d      	adds	r5, r5, r4
 801c532:	4465      	add	r5, ip
 801c534:	605d      	str	r5, [r3, #4]
 801c536:	1a8d      	subs	r5, r1, r2
 801c538:	444d      	add	r5, r9
 801c53a:	1bed      	subs	r5, r5, r7
 801c53c:	609d      	str	r5, [r3, #8]
 801c53e:	4645      	mov	r5, r8
 801c540:	1a2d      	subs	r5, r5, r0
 801c542:	192d      	adds	r5, r5, r4
 801c544:	1bad      	subs	r5, r5, r6
 801c546:	464e      	mov	r6, r9
 801c548:	60dd      	str	r5, [r3, #12]
 801c54a:	180d      	adds	r5, r1, r0
 801c54c:	1bad      	subs	r5, r5, r6
 801c54e:	4666      	mov	r6, ip
 801c550:	1bad      	subs	r5, r5, r6
 801c552:	611d      	str	r5, [r3, #16]
 801c554:	4645      	mov	r5, r8
 801c556:	1aad      	subs	r5, r5, r2
 801c558:	4442      	add	r2, r8
 801c55a:	1b12      	subs	r2, r2, r4
 801c55c:	1bd2      	subs	r2, r2, r7
 801c55e:	1a08      	subs	r0, r1, r0
 801c560:	61da      	str	r2, [r3, #28]
 801c562:	4649      	mov	r1, r9
 801c564:	2201      	movs	r2, #1
 801c566:	1a41      	subs	r1, r0, r1
 801c568:	4252      	negs	r2, r2
 801c56a:	4461      	add	r1, ip
 801c56c:	4694      	mov	ip, r2
 801c56e:	44e2      	add	sl, ip
 801c570:	4652      	mov	r2, sl
 801c572:	1b2d      	subs	r5, r5, r4
 801c574:	19ed      	adds	r5, r5, r7
 801c576:	615d      	str	r5, [r3, #20]
 801c578:	6199      	str	r1, [r3, #24]
 801c57a:	3320      	adds	r3, #32
 801c57c:	2a00      	cmp	r2, #0
 801c57e:	d1c6      	bne.n	801c50e <arm_radix4_butterfly_q31+0x4c6>
 801c580:	b027      	add	sp, #156	@ 0x9c
 801c582:	bc3c      	pop	{r2, r3, r4, r5}
 801c584:	4690      	mov	r8, r2
 801c586:	4699      	mov	r9, r3
 801c588:	46a2      	mov	sl, r4
 801c58a:	46ab      	mov	fp, r5
 801c58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c58e:	469a      	mov	sl, r3
 801c590:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c592:	e7bc      	b.n	801c50e <arm_radix4_butterfly_q31+0x4c6>

0801c594 <arm_radix4_butterfly_inverse_q31>:
 801c594:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c596:	464d      	mov	r5, r9
 801c598:	4644      	mov	r4, r8
 801c59a:	465f      	mov	r7, fp
 801c59c:	4656      	mov	r6, sl
 801c59e:	b4f0      	push	{r4, r5, r6, r7}
 801c5a0:	b0a7      	sub	sp, #156	@ 0x9c
 801c5a2:	469c      	mov	ip, r3
 801c5a4:	9114      	str	r1, [sp, #80]	@ 0x50
 801c5a6:	0889      	lsrs	r1, r1, #2
 801c5a8:	9310      	str	r3, [sp, #64]	@ 0x40
 801c5aa:	00cb      	lsls	r3, r1, #3
 801c5ac:	0015      	movs	r5, r2
 801c5ae:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c5b0:	18c2      	adds	r2, r0, r3
 801c5b2:	000c      	movs	r4, r1
 801c5b4:	9124      	str	r1, [sp, #144]	@ 0x90
 801c5b6:	18d1      	adds	r1, r2, r3
 801c5b8:	468b      	mov	fp, r1
 801c5ba:	469a      	mov	sl, r3
 801c5bc:	4663      	mov	r3, ip
 801c5be:	44da      	add	sl, fp
 801c5c0:	46d0      	mov	r8, sl
 801c5c2:	4681      	mov	r9, r0
 801c5c4:	4692      	mov	sl, r2
 801c5c6:	0119      	lsls	r1, r3, #4
 801c5c8:	910d      	str	r1, [sp, #52]	@ 0x34
 801c5ca:	00d9      	lsls	r1, r3, #3
 801c5cc:	005b      	lsls	r3, r3, #1
 801c5ce:	4463      	add	r3, ip
 801c5d0:	910e      	str	r1, [sp, #56]	@ 0x38
 801c5d2:	00d9      	lsls	r1, r3, #3
 801c5d4:	9022      	str	r0, [sp, #136]	@ 0x88
 801c5d6:	9025      	str	r0, [sp, #148]	@ 0x94
 801c5d8:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c5da:	9502      	str	r5, [sp, #8]
 801c5dc:	9500      	str	r5, [sp, #0]
 801c5de:	9501      	str	r5, [sp, #4]
 801c5e0:	9409      	str	r4, [sp, #36]	@ 0x24
 801c5e2:	464b      	mov	r3, r9
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	4652      	mov	r2, sl
 801c5e8:	111c      	asrs	r4, r3, #4
 801c5ea:	465b      	mov	r3, fp
 801c5ec:	4648      	mov	r0, r9
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	6812      	ldr	r2, [r2, #0]
 801c5f2:	6840      	ldr	r0, [r0, #4]
 801c5f4:	111b      	asrs	r3, r3, #4
 801c5f6:	18e7      	adds	r7, r4, r3
 801c5f8:	1ae3      	subs	r3, r4, r3
 801c5fa:	1114      	asrs	r4, r2, #4
 801c5fc:	4642      	mov	r2, r8
 801c5fe:	1105      	asrs	r5, r0, #4
 801c600:	4658      	mov	r0, fp
 801c602:	6812      	ldr	r2, [r2, #0]
 801c604:	6840      	ldr	r0, [r0, #4]
 801c606:	9303      	str	r3, [sp, #12]
 801c608:	1113      	asrs	r3, r2, #4
 801c60a:	18e2      	adds	r2, r4, r3
 801c60c:	1103      	asrs	r3, r0, #4
 801c60e:	18ee      	adds	r6, r5, r3
 801c610:	1ae8      	subs	r0, r5, r3
 801c612:	464d      	mov	r5, r9
 801c614:	18bb      	adds	r3, r7, r2
 801c616:	602b      	str	r3, [r5, #0]
 801c618:	4641      	mov	r1, r8
 801c61a:	4655      	mov	r5, sl
 801c61c:	6849      	ldr	r1, [r1, #4]
 801c61e:	686d      	ldr	r5, [r5, #4]
 801c620:	110b      	asrs	r3, r1, #4
 801c622:	112d      	asrs	r5, r5, #4
 801c624:	18eb      	adds	r3, r5, r3
 801c626:	464d      	mov	r5, r9
 801c628:	18f1      	adds	r1, r6, r3
 801c62a:	6069      	str	r1, [r5, #4]
 801c62c:	4655      	mov	r5, sl
 801c62e:	686d      	ldr	r5, [r5, #4]
 801c630:	9004      	str	r0, [sp, #16]
 801c632:	112c      	asrs	r4, r5, #4
 801c634:	4645      	mov	r5, r8
 801c636:	686d      	ldr	r5, [r5, #4]
 801c638:	1129      	asrs	r1, r5, #4
 801c63a:	1a65      	subs	r5, r4, r1
 801c63c:	4651      	mov	r1, sl
 801c63e:	6809      	ldr	r1, [r1, #0]
 801c640:	1abc      	subs	r4, r7, r2
 801c642:	1108      	asrs	r0, r1, #4
 801c644:	4641      	mov	r1, r8
 801c646:	17e2      	asrs	r2, r4, #31
 801c648:	6809      	ldr	r1, [r1, #0]
 801c64a:	9207      	str	r2, [sp, #28]
 801c64c:	9a01      	ldr	r2, [sp, #4]
 801c64e:	1109      	asrs	r1, r1, #4
 801c650:	6817      	ldr	r7, [r2, #0]
 801c652:	1a41      	subs	r1, r0, r1
 801c654:	9106      	str	r1, [sp, #24]
 801c656:	0039      	movs	r1, r7
 801c658:	17ff      	asrs	r7, r7, #31
 801c65a:	0038      	movs	r0, r7
 801c65c:	9505      	str	r5, [sp, #20]
 801c65e:	1af5      	subs	r5, r6, r3
 801c660:	17ef      	asrs	r7, r5, #31
 801c662:	970b      	str	r7, [sp, #44]	@ 0x2c
 801c664:	6857      	ldr	r7, [r2, #4]
 801c666:	0003      	movs	r3, r0
 801c668:	17fe      	asrs	r6, r7, #31
 801c66a:	000a      	movs	r2, r1
 801c66c:	9108      	str	r1, [sp, #32]
 801c66e:	900a      	str	r0, [sp, #40]	@ 0x28
 801c670:	17e1      	asrs	r1, r4, #31
 801c672:	0020      	movs	r0, r4
 801c674:	960c      	str	r6, [sp, #48]	@ 0x30
 801c676:	f7e3 ffa3 	bl	80005c0 <__aeabi_lmul>
 801c67a:	003a      	movs	r2, r7
 801c67c:	17fb      	asrs	r3, r7, #31
 801c67e:	000e      	movs	r6, r1
 801c680:	0028      	movs	r0, r5
 801c682:	17e9      	asrs	r1, r5, #31
 801c684:	f7e3 ff9c 	bl	80005c0 <__aeabi_lmul>
 801c688:	4653      	mov	r3, sl
 801c68a:	1a76      	subs	r6, r6, r1
 801c68c:	0076      	lsls	r6, r6, #1
 801c68e:	601e      	str	r6, [r3, #0]
 801c690:	002a      	movs	r2, r5
 801c692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c694:	9808      	ldr	r0, [sp, #32]
 801c696:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c698:	f7e3 ff92 	bl	80005c0 <__aeabi_lmul>
 801c69c:	003a      	movs	r2, r7
 801c69e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c6a0:	000d      	movs	r5, r1
 801c6a2:	0020      	movs	r0, r4
 801c6a4:	9907      	ldr	r1, [sp, #28]
 801c6a6:	f7e3 ff8b 	bl	80005c0 <__aeabi_lmul>
 801c6aa:	4657      	mov	r7, sl
 801c6ac:	186d      	adds	r5, r5, r1
 801c6ae:	006d      	lsls	r5, r5, #1
 801c6b0:	607d      	str	r5, [r7, #4]
 801c6b2:	9b03      	ldr	r3, [sp, #12]
 801c6b4:	9e06      	ldr	r6, [sp, #24]
 801c6b6:	9d05      	ldr	r5, [sp, #20]
 801c6b8:	46b4      	mov	ip, r6
 801c6ba:	1b5d      	subs	r5, r3, r5
 801c6bc:	9b00      	ldr	r3, [sp, #0]
 801c6be:	17ef      	asrs	r7, r5, #31
 801c6c0:	0039      	movs	r1, r7
 801c6c2:	681f      	ldr	r7, [r3, #0]
 801c6c4:	17fc      	asrs	r4, r7, #31
 801c6c6:	0020      	movs	r0, r4
 801c6c8:	9c04      	ldr	r4, [sp, #16]
 801c6ca:	4464      	add	r4, ip
 801c6cc:	17e6      	asrs	r6, r4, #31
 801c6ce:	9407      	str	r4, [sp, #28]
 801c6d0:	9608      	str	r6, [sp, #32]
 801c6d2:	685e      	ldr	r6, [r3, #4]
 801c6d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c6d6:	17f2      	asrs	r2, r6, #31
 801c6d8:	0003      	movs	r3, r0
 801c6da:	920c      	str	r2, [sp, #48]	@ 0x30
 801c6dc:	0028      	movs	r0, r5
 801c6de:	003a      	movs	r2, r7
 801c6e0:	910a      	str	r1, [sp, #40]	@ 0x28
 801c6e2:	f7e3 ff6d 	bl	80005c0 <__aeabi_lmul>
 801c6e6:	0032      	movs	r2, r6
 801c6e8:	17f3      	asrs	r3, r6, #31
 801c6ea:	9807      	ldr	r0, [sp, #28]
 801c6ec:	000c      	movs	r4, r1
 801c6ee:	9908      	ldr	r1, [sp, #32]
 801c6f0:	f7e3 ff66 	bl	80005c0 <__aeabi_lmul>
 801c6f4:	4658      	mov	r0, fp
 801c6f6:	1a64      	subs	r4, r4, r1
 801c6f8:	0064      	lsls	r4, r4, #1
 801c6fa:	9a07      	ldr	r2, [sp, #28]
 801c6fc:	6004      	str	r4, [r0, #0]
 801c6fe:	9b08      	ldr	r3, [sp, #32]
 801c700:	0038      	movs	r0, r7
 801c702:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c704:	f7e3 ff5c 	bl	80005c0 <__aeabi_lmul>
 801c708:	0032      	movs	r2, r6
 801c70a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c70c:	000c      	movs	r4, r1
 801c70e:	0028      	movs	r0, r5
 801c710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c712:	f7e3 ff55 	bl	80005c0 <__aeabi_lmul>
 801c716:	9d05      	ldr	r5, [sp, #20]
 801c718:	465f      	mov	r7, fp
 801c71a:	46ac      	mov	ip, r5
 801c71c:	1864      	adds	r4, r4, r1
 801c71e:	9903      	ldr	r1, [sp, #12]
 801c720:	0064      	lsls	r4, r4, #1
 801c722:	4461      	add	r1, ip
 801c724:	607c      	str	r4, [r7, #4]
 801c726:	000c      	movs	r4, r1
 801c728:	17c9      	asrs	r1, r1, #31
 801c72a:	9105      	str	r1, [sp, #20]
 801c72c:	9902      	ldr	r1, [sp, #8]
 801c72e:	9804      	ldr	r0, [sp, #16]
 801c730:	680d      	ldr	r5, [r1, #0]
 801c732:	9e06      	ldr	r6, [sp, #24]
 801c734:	002b      	movs	r3, r5
 801c736:	17ed      	asrs	r5, r5, #31
 801c738:	684f      	ldr	r7, [r1, #4]
 801c73a:	9503      	str	r5, [sp, #12]
 801c73c:	1b85      	subs	r5, r0, r6
 801c73e:	17e8      	asrs	r0, r5, #31
 801c740:	001a      	movs	r2, r3
 801c742:	9006      	str	r0, [sp, #24]
 801c744:	17fe      	asrs	r6, r7, #31
 801c746:	9304      	str	r3, [sp, #16]
 801c748:	0020      	movs	r0, r4
 801c74a:	9b03      	ldr	r3, [sp, #12]
 801c74c:	17e1      	asrs	r1, r4, #31
 801c74e:	9607      	str	r6, [sp, #28]
 801c750:	f7e3 ff36 	bl	80005c0 <__aeabi_lmul>
 801c754:	003a      	movs	r2, r7
 801c756:	000e      	movs	r6, r1
 801c758:	17fb      	asrs	r3, r7, #31
 801c75a:	0028      	movs	r0, r5
 801c75c:	17e9      	asrs	r1, r5, #31
 801c75e:	f7e3 ff2f 	bl	80005c0 <__aeabi_lmul>
 801c762:	4640      	mov	r0, r8
 801c764:	1a76      	subs	r6, r6, r1
 801c766:	0076      	lsls	r6, r6, #1
 801c768:	002a      	movs	r2, r5
 801c76a:	9b06      	ldr	r3, [sp, #24]
 801c76c:	6006      	str	r6, [r0, #0]
 801c76e:	9903      	ldr	r1, [sp, #12]
 801c770:	9804      	ldr	r0, [sp, #16]
 801c772:	f7e3 ff25 	bl	80005c0 <__aeabi_lmul>
 801c776:	0020      	movs	r0, r4
 801c778:	2408      	movs	r4, #8
 801c77a:	9b07      	ldr	r3, [sp, #28]
 801c77c:	000d      	movs	r5, r1
 801c77e:	003a      	movs	r2, r7
 801c780:	9905      	ldr	r1, [sp, #20]
 801c782:	f7e3 ff1d 	bl	80005c0 <__aeabi_lmul>
 801c786:	4640      	mov	r0, r8
 801c788:	46a4      	mov	ip, r4
 801c78a:	186d      	adds	r5, r5, r1
 801c78c:	006d      	lsls	r5, r5, #1
 801c78e:	6045      	str	r5, [r0, #4]
 801c790:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c792:	44e1      	add	r9, ip
 801c794:	3801      	subs	r0, #1
 801c796:	9009      	str	r0, [sp, #36]	@ 0x24
 801c798:	9a01      	ldr	r2, [sp, #4]
 801c79a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c79c:	44e2      	add	sl, ip
 801c79e:	44e3      	add	fp, ip
 801c7a0:	44e0      	add	r8, ip
 801c7a2:	46a4      	mov	ip, r4
 801c7a4:	4462      	add	r2, ip
 801c7a6:	9201      	str	r2, [sp, #4]
 801c7a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c7aa:	9b00      	ldr	r3, [sp, #0]
 801c7ac:	4694      	mov	ip, r2
 801c7ae:	4463      	add	r3, ip
 801c7b0:	9300      	str	r3, [sp, #0]
 801c7b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7b4:	9902      	ldr	r1, [sp, #8]
 801c7b6:	469c      	mov	ip, r3
 801c7b8:	4461      	add	r1, ip
 801c7ba:	9102      	str	r1, [sp, #8]
 801c7bc:	2800      	cmp	r0, #0
 801c7be:	d000      	beq.n	801c7c2 <arm_radix4_butterfly_inverse_q31+0x22e>
 801c7c0:	e70f      	b.n	801c5e2 <arm_radix4_butterfly_inverse_q31+0x4e>
 801c7c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c7c4:	009b      	lsls	r3, r3, #2
 801c7c6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801c7c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c7ca:	9320      	str	r3, [sp, #128]	@ 0x80
 801c7cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c7ce:	2b04      	cmp	r3, #4
 801c7d0:	d800      	bhi.n	801c7d4 <arm_radix4_butterfly_inverse_q31+0x240>
 801c7d2:	e17c      	b.n	801cace <arm_radix4_butterfly_inverse_q31+0x53a>
 801c7d4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801c7d6:	0893      	lsrs	r3, r2, #2
 801c7d8:	1e59      	subs	r1, r3, #1
 801c7da:	9321      	str	r3, [sp, #132]	@ 0x84
 801c7dc:	00db      	lsls	r3, r3, #3
 801c7de:	931b      	str	r3, [sp, #108]	@ 0x6c
 801c7e0:	00d3      	lsls	r3, r2, #3
 801c7e2:	9300      	str	r3, [sp, #0]
 801c7e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801c7e6:	911a      	str	r1, [sp, #104]	@ 0x68
 801c7e8:	00da      	lsls	r2, r3, #3
 801c7ea:	921e      	str	r2, [sp, #120]	@ 0x78
 801c7ec:	011a      	lsls	r2, r3, #4
 801c7ee:	921d      	str	r2, [sp, #116]	@ 0x74
 801c7f0:	001a      	movs	r2, r3
 801c7f2:	4694      	mov	ip, r2
 801c7f4:	005b      	lsls	r3, r3, #1
 801c7f6:	4463      	add	r3, ip
 801c7f8:	00db      	lsls	r3, r3, #3
 801c7fa:	931c      	str	r3, [sp, #112]	@ 0x70
 801c7fc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c7fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c800:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c802:	9318      	str	r3, [sp, #96]	@ 0x60
 801c804:	9319      	str	r3, [sp, #100]	@ 0x64
 801c806:	9316      	str	r3, [sp, #88]	@ 0x58
 801c808:	2300      	movs	r3, #0
 801c80a:	9315      	str	r3, [sp, #84]	@ 0x54
 801c80c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c80e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c810:	681a      	ldr	r2, [r3, #0]
 801c812:	685b      	ldr	r3, [r3, #4]
 801c814:	9205      	str	r2, [sp, #20]
 801c816:	9306      	str	r3, [sp, #24]
 801c818:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c81a:	468c      	mov	ip, r1
 801c81c:	681a      	ldr	r2, [r3, #0]
 801c81e:	685b      	ldr	r3, [r3, #4]
 801c820:	9207      	str	r2, [sp, #28]
 801c822:	9308      	str	r3, [sp, #32]
 801c824:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c826:	681a      	ldr	r2, [r3, #0]
 801c828:	685b      	ldr	r3, [r3, #4]
 801c82a:	9209      	str	r2, [sp, #36]	@ 0x24
 801c82c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c82e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c830:	0013      	movs	r3, r2
 801c832:	4463      	add	r3, ip
 801c834:	4698      	mov	r8, r3
 801c836:	0013      	movs	r3, r2
 801c838:	4442      	add	r2, r8
 801c83a:	4691      	mov	r9, r2
 801c83c:	001a      	movs	r2, r3
 801c83e:	444a      	add	r2, r9
 801c840:	4692      	mov	sl, r2
 801c842:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c844:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801c846:	4293      	cmp	r3, r2
 801c848:	d800      	bhi.n	801c84c <arm_radix4_butterfly_inverse_q31+0x2b8>
 801c84a:	e0d9      	b.n	801ca00 <arm_radix4_butterfly_inverse_q31+0x46c>
 801c84c:	4694      	mov	ip, r2
 801c84e:	4644      	mov	r4, r8
 801c850:	4655      	mov	r5, sl
 801c852:	4688      	mov	r8, r1
 801c854:	9b07      	ldr	r3, [sp, #28]
 801c856:	17db      	asrs	r3, r3, #31
 801c858:	930c      	str	r3, [sp, #48]	@ 0x30
 801c85a:	9b08      	ldr	r3, [sp, #32]
 801c85c:	17db      	asrs	r3, r3, #31
 801c85e:	930d      	str	r3, [sp, #52]	@ 0x34
 801c860:	9b05      	ldr	r3, [sp, #20]
 801c862:	17db      	asrs	r3, r3, #31
 801c864:	930e      	str	r3, [sp, #56]	@ 0x38
 801c866:	9b06      	ldr	r3, [sp, #24]
 801c868:	17db      	asrs	r3, r3, #31
 801c86a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c86c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c86e:	17db      	asrs	r3, r3, #31
 801c870:	9310      	str	r3, [sp, #64]	@ 0x40
 801c872:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c874:	17db      	asrs	r3, r3, #31
 801c876:	9311      	str	r3, [sp, #68]	@ 0x44
 801c878:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c87a:	4463      	add	r3, ip
 801c87c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c87e:	4643      	mov	r3, r8
 801c880:	4641      	mov	r1, r8
 801c882:	681a      	ldr	r2, [r3, #0]
 801c884:	464b      	mov	r3, r9
 801c886:	684f      	ldr	r7, [r1, #4]
 801c888:	4649      	mov	r1, r9
 801c88a:	681b      	ldr	r3, [r3, #0]
 801c88c:	18d6      	adds	r6, r2, r3
 801c88e:	1ad3      	subs	r3, r2, r3
 801c890:	9301      	str	r3, [sp, #4]
 801c892:	684b      	ldr	r3, [r1, #4]
 801c894:	1af9      	subs	r1, r7, r3
 801c896:	9102      	str	r1, [sp, #8]
 801c898:	6829      	ldr	r1, [r5, #0]
 801c89a:	18f8      	adds	r0, r7, r3
 801c89c:	468c      	mov	ip, r1
 801c89e:	6827      	ldr	r7, [r4, #0]
 801c8a0:	4467      	add	r7, ip
 801c8a2:	003a      	movs	r2, r7
 801c8a4:	19f3      	adds	r3, r6, r7
 801c8a6:	4647      	mov	r7, r8
 801c8a8:	109b      	asrs	r3, r3, #2
 801c8aa:	603b      	str	r3, [r7, #0]
 801c8ac:	6869      	ldr	r1, [r5, #4]
 801c8ae:	6867      	ldr	r7, [r4, #4]
 801c8b0:	468c      	mov	ip, r1
 801c8b2:	4467      	add	r7, ip
 801c8b4:	003b      	movs	r3, r7
 801c8b6:	19c1      	adds	r1, r0, r7
 801c8b8:	4647      	mov	r7, r8
 801c8ba:	1ab6      	subs	r6, r6, r2
 801c8bc:	1089      	asrs	r1, r1, #2
 801c8be:	6079      	str	r1, [r7, #4]
 801c8c0:	17f2      	asrs	r2, r6, #31
 801c8c2:	9900      	ldr	r1, [sp, #0]
 801c8c4:	4692      	mov	sl, r2
 801c8c6:	468c      	mov	ip, r1
 801c8c8:	6867      	ldr	r7, [r4, #4]
 801c8ca:	6869      	ldr	r1, [r5, #4]
 801c8cc:	44e0      	add	r8, ip
 801c8ce:	1a7f      	subs	r7, r7, r1
 801c8d0:	9703      	str	r7, [sp, #12]
 801c8d2:	6821      	ldr	r1, [r4, #0]
 801c8d4:	682f      	ldr	r7, [r5, #0]
 801c8d6:	1bc9      	subs	r1, r1, r7
 801c8d8:	1ac7      	subs	r7, r0, r3
 801c8da:	17fa      	asrs	r2, r7, #31
 801c8dc:	4693      	mov	fp, r2
 801c8de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c8e0:	9a07      	ldr	r2, [sp, #28]
 801c8e2:	9104      	str	r1, [sp, #16]
 801c8e4:	0030      	movs	r0, r6
 801c8e6:	4651      	mov	r1, sl
 801c8e8:	f7e3 fe6a 	bl	80005c0 <__aeabi_lmul>
 801c8ec:	9a08      	ldr	r2, [sp, #32]
 801c8ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c8f0:	9112      	str	r1, [sp, #72]	@ 0x48
 801c8f2:	0038      	movs	r0, r7
 801c8f4:	4659      	mov	r1, fp
 801c8f6:	f7e3 fe63 	bl	80005c0 <__aeabi_lmul>
 801c8fa:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c8fc:	9a07      	ldr	r2, [sp, #28]
 801c8fe:	1a41      	subs	r1, r0, r1
 801c900:	1049      	asrs	r1, r1, #1
 801c902:	6021      	str	r1, [r4, #0]
 801c904:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c906:	0038      	movs	r0, r7
 801c908:	4659      	mov	r1, fp
 801c90a:	f7e3 fe59 	bl	80005c0 <__aeabi_lmul>
 801c90e:	9a08      	ldr	r2, [sp, #32]
 801c910:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c912:	000f      	movs	r7, r1
 801c914:	0030      	movs	r0, r6
 801c916:	4651      	mov	r1, sl
 801c918:	f7e3 fe52 	bl	80005c0 <__aeabi_lmul>
 801c91c:	9b00      	ldr	r3, [sp, #0]
 801c91e:	187f      	adds	r7, r7, r1
 801c920:	469c      	mov	ip, r3
 801c922:	107f      	asrs	r7, r7, #1
 801c924:	6067      	str	r7, [r4, #4]
 801c926:	9a01      	ldr	r2, [sp, #4]
 801c928:	9f03      	ldr	r7, [sp, #12]
 801c92a:	9802      	ldr	r0, [sp, #8]
 801c92c:	1bd7      	subs	r7, r2, r7
 801c92e:	17fe      	asrs	r6, r7, #31
 801c930:	0031      	movs	r1, r6
 801c932:	9e04      	ldr	r6, [sp, #16]
 801c934:	4682      	mov	sl, r0
 801c936:	4464      	add	r4, ip
 801c938:	46b4      	mov	ip, r6
 801c93a:	44e2      	add	sl, ip
 801c93c:	4652      	mov	r2, sl
 801c93e:	17d2      	asrs	r2, r2, #31
 801c940:	4693      	mov	fp, r2
 801c942:	0038      	movs	r0, r7
 801c944:	9a05      	ldr	r2, [sp, #20]
 801c946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c948:	9112      	str	r1, [sp, #72]	@ 0x48
 801c94a:	f7e3 fe39 	bl	80005c0 <__aeabi_lmul>
 801c94e:	9a06      	ldr	r2, [sp, #24]
 801c950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c952:	000e      	movs	r6, r1
 801c954:	4650      	mov	r0, sl
 801c956:	4659      	mov	r1, fp
 801c958:	f7e3 fe32 	bl	80005c0 <__aeabi_lmul>
 801c95c:	4648      	mov	r0, r9
 801c95e:	1a76      	subs	r6, r6, r1
 801c960:	1076      	asrs	r6, r6, #1
 801c962:	6006      	str	r6, [r0, #0]
 801c964:	9a05      	ldr	r2, [sp, #20]
 801c966:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c968:	4650      	mov	r0, sl
 801c96a:	4659      	mov	r1, fp
 801c96c:	f7e3 fe28 	bl	80005c0 <__aeabi_lmul>
 801c970:	9a06      	ldr	r2, [sp, #24]
 801c972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c974:	000e      	movs	r6, r1
 801c976:	0038      	movs	r0, r7
 801c978:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801c97a:	f7e3 fe21 	bl	80005c0 <__aeabi_lmul>
 801c97e:	9a00      	ldr	r2, [sp, #0]
 801c980:	9f03      	ldr	r7, [sp, #12]
 801c982:	4694      	mov	ip, r2
 801c984:	1876      	adds	r6, r6, r1
 801c986:	4649      	mov	r1, r9
 801c988:	44e1      	add	r9, ip
 801c98a:	46bc      	mov	ip, r7
 801c98c:	9b01      	ldr	r3, [sp, #4]
 801c98e:	1076      	asrs	r6, r6, #1
 801c990:	4463      	add	r3, ip
 801c992:	17df      	asrs	r7, r3, #31
 801c994:	604e      	str	r6, [r1, #4]
 801c996:	46ba      	mov	sl, r7
 801c998:	001e      	movs	r6, r3
 801c99a:	9802      	ldr	r0, [sp, #8]
 801c99c:	9b04      	ldr	r3, [sp, #16]
 801c99e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c9a0:	1ac7      	subs	r7, r0, r3
 801c9a2:	17fb      	asrs	r3, r7, #31
 801c9a4:	469b      	mov	fp, r3
 801c9a6:	0030      	movs	r0, r6
 801c9a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c9aa:	4651      	mov	r1, sl
 801c9ac:	f7e3 fe08 	bl	80005c0 <__aeabi_lmul>
 801c9b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c9b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c9b4:	9101      	str	r1, [sp, #4]
 801c9b6:	0038      	movs	r0, r7
 801c9b8:	4659      	mov	r1, fp
 801c9ba:	f7e3 fe01 	bl	80005c0 <__aeabi_lmul>
 801c9be:	9801      	ldr	r0, [sp, #4]
 801c9c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c9c2:	1a41      	subs	r1, r0, r1
 801c9c4:	1049      	asrs	r1, r1, #1
 801c9c6:	6029      	str	r1, [r5, #0]
 801c9c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c9ca:	0038      	movs	r0, r7
 801c9cc:	4659      	mov	r1, fp
 801c9ce:	f7e3 fdf7 	bl	80005c0 <__aeabi_lmul>
 801c9d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801c9d4:	000f      	movs	r7, r1
 801c9d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c9d8:	0030      	movs	r0, r6
 801c9da:	4651      	mov	r1, sl
 801c9dc:	f7e3 fdf0 	bl	80005c0 <__aeabi_lmul>
 801c9e0:	187f      	adds	r7, r7, r1
 801c9e2:	107f      	asrs	r7, r7, #1
 801c9e4:	606f      	str	r7, [r5, #4]
 801c9e6:	9a00      	ldr	r2, [sp, #0]
 801c9e8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c9ea:	4694      	mov	ip, r2
 801c9ec:	4465      	add	r5, ip
 801c9ee:	468c      	mov	ip, r1
 801c9f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c9f2:	0013      	movs	r3, r2
 801c9f4:	4462      	add	r2, ip
 801c9f6:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c9f8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c9fa:	429a      	cmp	r2, r3
 801c9fc:	d900      	bls.n	801ca00 <arm_radix4_butterfly_inverse_q31+0x46c>
 801c9fe:	e73e      	b.n	801c87e <arm_radix4_butterfly_inverse_q31+0x2ea>
 801ca00:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801ca02:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ca04:	468c      	mov	ip, r1
 801ca06:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801ca08:	4462      	add	r2, ip
 801ca0a:	468c      	mov	ip, r1
 801ca0c:	9216      	str	r2, [sp, #88]	@ 0x58
 801ca0e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801ca10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801ca12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ca14:	4462      	add	r2, ip
 801ca16:	468c      	mov	ip, r1
 801ca18:	9219      	str	r2, [sp, #100]	@ 0x64
 801ca1a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801ca1c:	3301      	adds	r3, #1
 801ca1e:	4462      	add	r2, ip
 801ca20:	9218      	str	r2, [sp, #96]	@ 0x60
 801ca22:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801ca24:	9315      	str	r3, [sp, #84]	@ 0x54
 801ca26:	3208      	adds	r2, #8
 801ca28:	9217      	str	r2, [sp, #92]	@ 0x5c
 801ca2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ca2c:	4293      	cmp	r3, r2
 801ca2e:	d800      	bhi.n	801ca32 <arm_radix4_butterfly_inverse_q31+0x49e>
 801ca30:	e6ec      	b.n	801c80c <arm_radix4_butterfly_inverse_q31+0x278>
 801ca32:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ca34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ca36:	009b      	lsls	r3, r3, #2
 801ca38:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ca3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ca3c:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ca3e:	089b      	lsrs	r3, r3, #2
 801ca40:	9320      	str	r3, [sp, #128]	@ 0x80
 801ca42:	2b04      	cmp	r3, #4
 801ca44:	d900      	bls.n	801ca48 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801ca46:	e6c5      	b.n	801c7d4 <arm_radix4_butterfly_inverse_q31+0x240>
 801ca48:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ca4a:	469a      	mov	sl, r3
 801ca4c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ca4e:	681a      	ldr	r2, [r3, #0]
 801ca50:	6918      	ldr	r0, [r3, #16]
 801ca52:	4691      	mov	r9, r2
 801ca54:	464c      	mov	r4, r9
 801ca56:	4680      	mov	r8, r0
 801ca58:	69de      	ldr	r6, [r3, #28]
 801ca5a:	689d      	ldr	r5, [r3, #8]
 801ca5c:	46b4      	mov	ip, r6
 801ca5e:	6998      	ldr	r0, [r3, #24]
 801ca60:	1964      	adds	r4, r4, r5
 801ca62:	6859      	ldr	r1, [r3, #4]
 801ca64:	68da      	ldr	r2, [r3, #12]
 801ca66:	4444      	add	r4, r8
 801ca68:	695f      	ldr	r7, [r3, #20]
 801ca6a:	1824      	adds	r4, r4, r0
 801ca6c:	601c      	str	r4, [r3, #0]
 801ca6e:	188c      	adds	r4, r1, r2
 801ca70:	19e4      	adds	r4, r4, r7
 801ca72:	4464      	add	r4, ip
 801ca74:	605c      	str	r4, [r3, #4]
 801ca76:	464c      	mov	r4, r9
 801ca78:	1b64      	subs	r4, r4, r5
 801ca7a:	4444      	add	r4, r8
 801ca7c:	1a24      	subs	r4, r4, r0
 801ca7e:	609c      	str	r4, [r3, #8]
 801ca80:	1a8c      	subs	r4, r1, r2
 801ca82:	19e4      	adds	r4, r4, r7
 801ca84:	1ba4      	subs	r4, r4, r6
 801ca86:	60dc      	str	r4, [r3, #12]
 801ca88:	464c      	mov	r4, r9
 801ca8a:	4646      	mov	r6, r8
 801ca8c:	1aa4      	subs	r4, r4, r2
 801ca8e:	1ba4      	subs	r4, r4, r6
 801ca90:	4464      	add	r4, ip
 801ca92:	611c      	str	r4, [r3, #16]
 801ca94:	194c      	adds	r4, r1, r5
 801ca96:	1be4      	subs	r4, r4, r7
 801ca98:	1a24      	subs	r4, r4, r0
 801ca9a:	615c      	str	r4, [r3, #20]
 801ca9c:	4644      	mov	r4, r8
 801ca9e:	4666      	mov	r6, ip
 801caa0:	444a      	add	r2, r9
 801caa2:	1b12      	subs	r2, r2, r4
 801caa4:	1b92      	subs	r2, r2, r6
 801caa6:	619a      	str	r2, [r3, #24]
 801caa8:	1b4a      	subs	r2, r1, r5
 801caaa:	1bd1      	subs	r1, r2, r7
 801caac:	2201      	movs	r2, #1
 801caae:	4252      	negs	r2, r2
 801cab0:	4694      	mov	ip, r2
 801cab2:	44e2      	add	sl, ip
 801cab4:	4652      	mov	r2, sl
 801cab6:	1809      	adds	r1, r1, r0
 801cab8:	61d9      	str	r1, [r3, #28]
 801caba:	3320      	adds	r3, #32
 801cabc:	2a00      	cmp	r2, #0
 801cabe:	d1c6      	bne.n	801ca4e <arm_radix4_butterfly_inverse_q31+0x4ba>
 801cac0:	b027      	add	sp, #156	@ 0x9c
 801cac2:	bc3c      	pop	{r2, r3, r4, r5}
 801cac4:	4690      	mov	r8, r2
 801cac6:	4699      	mov	r9, r3
 801cac8:	46a2      	mov	sl, r4
 801caca:	46ab      	mov	fp, r5
 801cacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cace:	469a      	mov	sl, r3
 801cad0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801cad2:	e7bc      	b.n	801ca4e <arm_radix4_butterfly_inverse_q31+0x4ba>

0801cad4 <arm_cmplx_mag_squared_q31>:
 801cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cad6:	464f      	mov	r7, r9
 801cad8:	4646      	mov	r6, r8
 801cada:	0004      	movs	r4, r0
 801cadc:	b4c0      	push	{r6, r7}
 801cade:	0016      	movs	r6, r2
 801cae0:	000f      	movs	r7, r1
 801cae2:	2a00      	cmp	r2, #0
 801cae4:	d018      	beq.n	801cb18 <arm_cmplx_mag_squared_q31+0x44>
 801cae6:	6823      	ldr	r3, [r4, #0]
 801cae8:	6822      	ldr	r2, [r4, #0]
 801caea:	17d9      	asrs	r1, r3, #31
 801caec:	6863      	ldr	r3, [r4, #4]
 801caee:	0010      	movs	r0, r2
 801caf0:	4698      	mov	r8, r3
 801caf2:	17db      	asrs	r3, r3, #31
 801caf4:	4699      	mov	r9, r3
 801caf6:	000b      	movs	r3, r1
 801caf8:	f7e3 fd62 	bl	80005c0 <__aeabi_lmul>
 801cafc:	4642      	mov	r2, r8
 801cafe:	104d      	asrs	r5, r1, #1
 801cb00:	464b      	mov	r3, r9
 801cb02:	4640      	mov	r0, r8
 801cb04:	4649      	mov	r1, r9
 801cb06:	f7e3 fd5b 	bl	80005c0 <__aeabi_lmul>
 801cb0a:	1049      	asrs	r1, r1, #1
 801cb0c:	1869      	adds	r1, r5, r1
 801cb0e:	3e01      	subs	r6, #1
 801cb10:	c702      	stmia	r7!, {r1}
 801cb12:	3408      	adds	r4, #8
 801cb14:	2e00      	cmp	r6, #0
 801cb16:	d1e6      	bne.n	801cae6 <arm_cmplx_mag_squared_q31+0x12>
 801cb18:	bc0c      	pop	{r2, r3}
 801cb1a:	4690      	mov	r8, r2
 801cb1c:	4699      	mov	r9, r3
 801cb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801cb20 <arm_mult_q31>:
 801cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb22:	4646      	mov	r6, r8
 801cb24:	464f      	mov	r7, r9
 801cb26:	4690      	mov	r8, r2
 801cb28:	b4c0      	push	{r6, r7}
 801cb2a:	001d      	movs	r5, r3
 801cb2c:	0006      	movs	r6, r0
 801cb2e:	000f      	movs	r7, r1
 801cb30:	2400      	movs	r4, #0
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d020      	beq.n	801cb78 <arm_mult_q31+0x58>
 801cb36:	4b12      	ldr	r3, [pc, #72]	@ (801cb80 <arm_mult_q31+0x60>)
 801cb38:	4699      	mov	r9, r3
 801cb3a:	e007      	b.n	801cb4c <arm_mult_q31+0x2c>
 801cb3c:	464b      	mov	r3, r9
 801cb3e:	4059      	eors	r1, r3
 801cb40:	4643      	mov	r3, r8
 801cb42:	3d01      	subs	r5, #1
 801cb44:	5119      	str	r1, [r3, r4]
 801cb46:	3404      	adds	r4, #4
 801cb48:	2d00      	cmp	r5, #0
 801cb4a:	d015      	beq.n	801cb78 <arm_mult_q31+0x58>
 801cb4c:	5933      	ldr	r3, [r6, r4]
 801cb4e:	593a      	ldr	r2, [r7, r4]
 801cb50:	17d9      	asrs	r1, r3, #31
 801cb52:	593b      	ldr	r3, [r7, r4]
 801cb54:	5930      	ldr	r0, [r6, r4]
 801cb56:	17db      	asrs	r3, r3, #31
 801cb58:	f7e3 fd32 	bl	80005c0 <__aeabi_lmul>
 801cb5c:	004b      	lsls	r3, r1, #1
 801cb5e:	0fc0      	lsrs	r0, r0, #31
 801cb60:	4318      	orrs	r0, r3
 801cb62:	17c9      	asrs	r1, r1, #31
 801cb64:	17c3      	asrs	r3, r0, #31
 801cb66:	428b      	cmp	r3, r1
 801cb68:	d1e8      	bne.n	801cb3c <arm_mult_q31+0x1c>
 801cb6a:	0001      	movs	r1, r0
 801cb6c:	4643      	mov	r3, r8
 801cb6e:	3d01      	subs	r5, #1
 801cb70:	5119      	str	r1, [r3, r4]
 801cb72:	3404      	adds	r4, #4
 801cb74:	2d00      	cmp	r5, #0
 801cb76:	d1e9      	bne.n	801cb4c <arm_mult_q31+0x2c>
 801cb78:	bc0c      	pop	{r2, r3}
 801cb7a:	4690      	mov	r8, r2
 801cb7c:	4699      	mov	r9, r3
 801cb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb80:	7fffffff 	.word	0x7fffffff

0801cb84 <arm_add_q31>:
 801cb84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb86:	465f      	mov	r7, fp
 801cb88:	4656      	mov	r6, sl
 801cb8a:	464d      	mov	r5, r9
 801cb8c:	4644      	mov	r4, r8
 801cb8e:	b4f0      	push	{r4, r5, r6, r7}
 801cb90:	4693      	mov	fp, r2
 801cb92:	b083      	sub	sp, #12
 801cb94:	4681      	mov	r9, r0
 801cb96:	468a      	mov	sl, r1
 801cb98:	4698      	mov	r8, r3
 801cb9a:	2200      	movs	r2, #0
 801cb9c:	2b00      	cmp	r3, #0
 801cb9e:	d020      	beq.n	801cbe2 <arm_add_q31+0x5e>
 801cba0:	4649      	mov	r1, r9
 801cba2:	4653      	mov	r3, sl
 801cba4:	588e      	ldr	r6, [r1, r2]
 801cba6:	589b      	ldr	r3, [r3, r2]
 801cba8:	17f7      	asrs	r7, r6, #31
 801cbaa:	001c      	movs	r4, r3
 801cbac:	0030      	movs	r0, r6
 801cbae:	0039      	movs	r1, r7
 801cbb0:	17dd      	asrs	r5, r3, #31
 801cbb2:	46b4      	mov	ip, r6
 801cbb4:	1900      	adds	r0, r0, r4
 801cbb6:	4169      	adcs	r1, r5
 801cbb8:	4463      	add	r3, ip
 801cbba:	9000      	str	r0, [sp, #0]
 801cbbc:	9101      	str	r1, [sp, #4]
 801cbbe:	17d9      	asrs	r1, r3, #31
 801cbc0:	468c      	mov	ip, r1
 801cbc2:	9901      	ldr	r1, [sp, #4]
 801cbc4:	458c      	cmp	ip, r1
 801cbc6:	d002      	beq.n	801cbce <arm_add_q31+0x4a>
 801cbc8:	17cb      	asrs	r3, r1, #31
 801cbca:	4909      	ldr	r1, [pc, #36]	@ (801cbf0 <arm_add_q31+0x6c>)
 801cbcc:	404b      	eors	r3, r1
 801cbce:	4659      	mov	r1, fp
 801cbd0:	508b      	str	r3, [r1, r2]
 801cbd2:	2301      	movs	r3, #1
 801cbd4:	425b      	negs	r3, r3
 801cbd6:	469c      	mov	ip, r3
 801cbd8:	44e0      	add	r8, ip
 801cbda:	4643      	mov	r3, r8
 801cbdc:	3204      	adds	r2, #4
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d1de      	bne.n	801cba0 <arm_add_q31+0x1c>
 801cbe2:	b003      	add	sp, #12
 801cbe4:	bc3c      	pop	{r2, r3, r4, r5}
 801cbe6:	4690      	mov	r8, r2
 801cbe8:	4699      	mov	r9, r3
 801cbea:	46a2      	mov	sl, r4
 801cbec:	46ab      	mov	fp, r5
 801cbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbf0:	7fffffff 	.word	0x7fffffff

0801cbf4 <atof>:
 801cbf4:	b510      	push	{r4, lr}
 801cbf6:	2100      	movs	r1, #0
 801cbf8:	f000 fe12 	bl	801d820 <strtod>
 801cbfc:	bd10      	pop	{r4, pc}

0801cbfe <atoi>:
 801cbfe:	b510      	push	{r4, lr}
 801cc00:	220a      	movs	r2, #10
 801cc02:	2100      	movs	r1, #0
 801cc04:	f000 fea4 	bl	801d950 <strtol>
 801cc08:	bd10      	pop	{r4, pc}
	...

0801cc0c <sulp>:
 801cc0c:	b570      	push	{r4, r5, r6, lr}
 801cc0e:	0016      	movs	r6, r2
 801cc10:	000d      	movs	r5, r1
 801cc12:	f003 fcf3 	bl	80205fc <__ulp>
 801cc16:	2e00      	cmp	r6, #0
 801cc18:	d00d      	beq.n	801cc36 <sulp+0x2a>
 801cc1a:	236b      	movs	r3, #107	@ 0x6b
 801cc1c:	006a      	lsls	r2, r5, #1
 801cc1e:	0d52      	lsrs	r2, r2, #21
 801cc20:	1a9b      	subs	r3, r3, r2
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	dd07      	ble.n	801cc36 <sulp+0x2a>
 801cc26:	2400      	movs	r4, #0
 801cc28:	4a03      	ldr	r2, [pc, #12]	@ (801cc38 <sulp+0x2c>)
 801cc2a:	051b      	lsls	r3, r3, #20
 801cc2c:	189d      	adds	r5, r3, r2
 801cc2e:	002b      	movs	r3, r5
 801cc30:	0022      	movs	r2, r4
 801cc32:	f7e5 fd03 	bl	800263c <__aeabi_dmul>
 801cc36:	bd70      	pop	{r4, r5, r6, pc}
 801cc38:	3ff00000 	.word	0x3ff00000

0801cc3c <_strtod_l>:
 801cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc3e:	b0a3      	sub	sp, #140	@ 0x8c
 801cc40:	921b      	str	r2, [sp, #108]	@ 0x6c
 801cc42:	2200      	movs	r2, #0
 801cc44:	2600      	movs	r6, #0
 801cc46:	2700      	movs	r7, #0
 801cc48:	9005      	str	r0, [sp, #20]
 801cc4a:	9109      	str	r1, [sp, #36]	@ 0x24
 801cc4c:	921e      	str	r2, [sp, #120]	@ 0x78
 801cc4e:	911d      	str	r1, [sp, #116]	@ 0x74
 801cc50:	780a      	ldrb	r2, [r1, #0]
 801cc52:	2a2b      	cmp	r2, #43	@ 0x2b
 801cc54:	d053      	beq.n	801ccfe <_strtod_l+0xc2>
 801cc56:	d83f      	bhi.n	801ccd8 <_strtod_l+0x9c>
 801cc58:	2a0d      	cmp	r2, #13
 801cc5a:	d839      	bhi.n	801ccd0 <_strtod_l+0x94>
 801cc5c:	2a08      	cmp	r2, #8
 801cc5e:	d839      	bhi.n	801ccd4 <_strtod_l+0x98>
 801cc60:	2a00      	cmp	r2, #0
 801cc62:	d042      	beq.n	801ccea <_strtod_l+0xae>
 801cc64:	2200      	movs	r2, #0
 801cc66:	9212      	str	r2, [sp, #72]	@ 0x48
 801cc68:	2100      	movs	r1, #0
 801cc6a:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801cc6c:	910c      	str	r1, [sp, #48]	@ 0x30
 801cc6e:	782a      	ldrb	r2, [r5, #0]
 801cc70:	2a30      	cmp	r2, #48	@ 0x30
 801cc72:	d000      	beq.n	801cc76 <_strtod_l+0x3a>
 801cc74:	e083      	b.n	801cd7e <_strtod_l+0x142>
 801cc76:	786a      	ldrb	r2, [r5, #1]
 801cc78:	3120      	adds	r1, #32
 801cc7a:	438a      	bics	r2, r1
 801cc7c:	2a58      	cmp	r2, #88	@ 0x58
 801cc7e:	d000      	beq.n	801cc82 <_strtod_l+0x46>
 801cc80:	e073      	b.n	801cd6a <_strtod_l+0x12e>
 801cc82:	9302      	str	r3, [sp, #8]
 801cc84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cc86:	4a95      	ldr	r2, [pc, #596]	@ (801cedc <_strtod_l+0x2a0>)
 801cc88:	9301      	str	r3, [sp, #4]
 801cc8a:	ab1e      	add	r3, sp, #120	@ 0x78
 801cc8c:	9300      	str	r3, [sp, #0]
 801cc8e:	9805      	ldr	r0, [sp, #20]
 801cc90:	ab1f      	add	r3, sp, #124	@ 0x7c
 801cc92:	a91d      	add	r1, sp, #116	@ 0x74
 801cc94:	f002 fd62 	bl	801f75c <__gethex>
 801cc98:	230f      	movs	r3, #15
 801cc9a:	0002      	movs	r2, r0
 801cc9c:	401a      	ands	r2, r3
 801cc9e:	0004      	movs	r4, r0
 801cca0:	9206      	str	r2, [sp, #24]
 801cca2:	4218      	tst	r0, r3
 801cca4:	d005      	beq.n	801ccb2 <_strtod_l+0x76>
 801cca6:	2a06      	cmp	r2, #6
 801cca8:	d12b      	bne.n	801cd02 <_strtod_l+0xc6>
 801ccaa:	2300      	movs	r3, #0
 801ccac:	3501      	adds	r5, #1
 801ccae:	951d      	str	r5, [sp, #116]	@ 0x74
 801ccb0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ccb2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d002      	beq.n	801ccbe <_strtod_l+0x82>
 801ccb8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ccba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ccbc:	6013      	str	r3, [r2, #0]
 801ccbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d019      	beq.n	801ccf8 <_strtod_l+0xbc>
 801ccc4:	2380      	movs	r3, #128	@ 0x80
 801ccc6:	0030      	movs	r0, r6
 801ccc8:	061b      	lsls	r3, r3, #24
 801ccca:	18f9      	adds	r1, r7, r3
 801cccc:	b023      	add	sp, #140	@ 0x8c
 801ccce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccd0:	2a20      	cmp	r2, #32
 801ccd2:	d1c7      	bne.n	801cc64 <_strtod_l+0x28>
 801ccd4:	3101      	adds	r1, #1
 801ccd6:	e7ba      	b.n	801cc4e <_strtod_l+0x12>
 801ccd8:	2a2d      	cmp	r2, #45	@ 0x2d
 801ccda:	d1c3      	bne.n	801cc64 <_strtod_l+0x28>
 801ccdc:	3a2c      	subs	r2, #44	@ 0x2c
 801ccde:	9212      	str	r2, [sp, #72]	@ 0x48
 801cce0:	1c4a      	adds	r2, r1, #1
 801cce2:	921d      	str	r2, [sp, #116]	@ 0x74
 801cce4:	784a      	ldrb	r2, [r1, #1]
 801cce6:	2a00      	cmp	r2, #0
 801cce8:	d1be      	bne.n	801cc68 <_strtod_l+0x2c>
 801ccea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccec:	931d      	str	r3, [sp, #116]	@ 0x74
 801ccee:	2300      	movs	r3, #0
 801ccf0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ccf2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d1df      	bne.n	801ccb8 <_strtod_l+0x7c>
 801ccf8:	0030      	movs	r0, r6
 801ccfa:	0039      	movs	r1, r7
 801ccfc:	e7e6      	b.n	801cccc <_strtod_l+0x90>
 801ccfe:	2200      	movs	r2, #0
 801cd00:	e7ed      	b.n	801ccde <_strtod_l+0xa2>
 801cd02:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801cd04:	2a00      	cmp	r2, #0
 801cd06:	d007      	beq.n	801cd18 <_strtod_l+0xdc>
 801cd08:	2135      	movs	r1, #53	@ 0x35
 801cd0a:	a820      	add	r0, sp, #128	@ 0x80
 801cd0c:	f003 fd6c 	bl	80207e8 <__copybits>
 801cd10:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801cd12:	9805      	ldr	r0, [sp, #20]
 801cd14:	f003 f926 	bl	801ff64 <_Bfree>
 801cd18:	9806      	ldr	r0, [sp, #24]
 801cd1a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cd1c:	3801      	subs	r0, #1
 801cd1e:	2804      	cmp	r0, #4
 801cd20:	d806      	bhi.n	801cd30 <_strtod_l+0xf4>
 801cd22:	f7e3 fa2b 	bl	800017c <__gnu_thumb1_case_uqi>
 801cd26:	0312      	.short	0x0312
 801cd28:	1e1c      	.short	0x1e1c
 801cd2a:	12          	.byte	0x12
 801cd2b:	00          	.byte	0x00
 801cd2c:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cd2e:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801cd30:	05e4      	lsls	r4, r4, #23
 801cd32:	d502      	bpl.n	801cd3a <_strtod_l+0xfe>
 801cd34:	2380      	movs	r3, #128	@ 0x80
 801cd36:	061b      	lsls	r3, r3, #24
 801cd38:	431f      	orrs	r7, r3
 801cd3a:	4b69      	ldr	r3, [pc, #420]	@ (801cee0 <_strtod_l+0x2a4>)
 801cd3c:	423b      	tst	r3, r7
 801cd3e:	d1b8      	bne.n	801ccb2 <_strtod_l+0x76>
 801cd40:	f001 fd90 	bl	801e864 <__errno>
 801cd44:	2322      	movs	r3, #34	@ 0x22
 801cd46:	6003      	str	r3, [r0, #0]
 801cd48:	e7b3      	b.n	801ccb2 <_strtod_l+0x76>
 801cd4a:	4966      	ldr	r1, [pc, #408]	@ (801cee4 <_strtod_l+0x2a8>)
 801cd4c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801cd4e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cd50:	400a      	ands	r2, r1
 801cd52:	4965      	ldr	r1, [pc, #404]	@ (801cee8 <_strtod_l+0x2ac>)
 801cd54:	185b      	adds	r3, r3, r1
 801cd56:	051b      	lsls	r3, r3, #20
 801cd58:	431a      	orrs	r2, r3
 801cd5a:	0017      	movs	r7, r2
 801cd5c:	e7e8      	b.n	801cd30 <_strtod_l+0xf4>
 801cd5e:	4f60      	ldr	r7, [pc, #384]	@ (801cee0 <_strtod_l+0x2a4>)
 801cd60:	e7e6      	b.n	801cd30 <_strtod_l+0xf4>
 801cd62:	2601      	movs	r6, #1
 801cd64:	4f61      	ldr	r7, [pc, #388]	@ (801ceec <_strtod_l+0x2b0>)
 801cd66:	4276      	negs	r6, r6
 801cd68:	e7e2      	b.n	801cd30 <_strtod_l+0xf4>
 801cd6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cd6c:	1c5a      	adds	r2, r3, #1
 801cd6e:	921d      	str	r2, [sp, #116]	@ 0x74
 801cd70:	785b      	ldrb	r3, [r3, #1]
 801cd72:	2b30      	cmp	r3, #48	@ 0x30
 801cd74:	d0f9      	beq.n	801cd6a <_strtod_l+0x12e>
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d09b      	beq.n	801ccb2 <_strtod_l+0x76>
 801cd7a:	2301      	movs	r3, #1
 801cd7c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cd7e:	2500      	movs	r5, #0
 801cd80:	220a      	movs	r2, #10
 801cd82:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cd84:	950d      	str	r5, [sp, #52]	@ 0x34
 801cd86:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cd88:	9508      	str	r5, [sp, #32]
 801cd8a:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801cd8c:	7804      	ldrb	r4, [r0, #0]
 801cd8e:	0023      	movs	r3, r4
 801cd90:	3b30      	subs	r3, #48	@ 0x30
 801cd92:	b2d9      	uxtb	r1, r3
 801cd94:	2909      	cmp	r1, #9
 801cd96:	d927      	bls.n	801cde8 <_strtod_l+0x1ac>
 801cd98:	2201      	movs	r2, #1
 801cd9a:	4955      	ldr	r1, [pc, #340]	@ (801cef0 <_strtod_l+0x2b4>)
 801cd9c:	f001 fcd4 	bl	801e748 <strncmp>
 801cda0:	2800      	cmp	r0, #0
 801cda2:	d031      	beq.n	801ce08 <_strtod_l+0x1cc>
 801cda4:	2000      	movs	r0, #0
 801cda6:	0023      	movs	r3, r4
 801cda8:	4684      	mov	ip, r0
 801cdaa:	9a08      	ldr	r2, [sp, #32]
 801cdac:	900e      	str	r0, [sp, #56]	@ 0x38
 801cdae:	9206      	str	r2, [sp, #24]
 801cdb0:	2220      	movs	r2, #32
 801cdb2:	0019      	movs	r1, r3
 801cdb4:	4391      	bics	r1, r2
 801cdb6:	000a      	movs	r2, r1
 801cdb8:	2100      	movs	r1, #0
 801cdba:	9107      	str	r1, [sp, #28]
 801cdbc:	2a45      	cmp	r2, #69	@ 0x45
 801cdbe:	d000      	beq.n	801cdc2 <_strtod_l+0x186>
 801cdc0:	e0c0      	b.n	801cf44 <_strtod_l+0x308>
 801cdc2:	9b06      	ldr	r3, [sp, #24]
 801cdc4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cdc6:	4303      	orrs	r3, r0
 801cdc8:	4313      	orrs	r3, r2
 801cdca:	428b      	cmp	r3, r1
 801cdcc:	d08d      	beq.n	801ccea <_strtod_l+0xae>
 801cdce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cdd0:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdd2:	3301      	adds	r3, #1
 801cdd4:	931d      	str	r3, [sp, #116]	@ 0x74
 801cdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cdd8:	785b      	ldrb	r3, [r3, #1]
 801cdda:	2b2b      	cmp	r3, #43	@ 0x2b
 801cddc:	d070      	beq.n	801cec0 <_strtod_l+0x284>
 801cdde:	000c      	movs	r4, r1
 801cde0:	2b2d      	cmp	r3, #45	@ 0x2d
 801cde2:	d173      	bne.n	801cecc <_strtod_l+0x290>
 801cde4:	2401      	movs	r4, #1
 801cde6:	e06c      	b.n	801cec2 <_strtod_l+0x286>
 801cde8:	9908      	ldr	r1, [sp, #32]
 801cdea:	2908      	cmp	r1, #8
 801cdec:	dc09      	bgt.n	801ce02 <_strtod_l+0x1c6>
 801cdee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801cdf0:	4351      	muls	r1, r2
 801cdf2:	185b      	adds	r3, r3, r1
 801cdf4:	930d      	str	r3, [sp, #52]	@ 0x34
 801cdf6:	9b08      	ldr	r3, [sp, #32]
 801cdf8:	3001      	adds	r0, #1
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	9308      	str	r3, [sp, #32]
 801cdfe:	901d      	str	r0, [sp, #116]	@ 0x74
 801ce00:	e7c3      	b.n	801cd8a <_strtod_l+0x14e>
 801ce02:	4355      	muls	r5, r2
 801ce04:	195d      	adds	r5, r3, r5
 801ce06:	e7f6      	b.n	801cdf6 <_strtod_l+0x1ba>
 801ce08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ce0a:	1c5a      	adds	r2, r3, #1
 801ce0c:	921d      	str	r2, [sp, #116]	@ 0x74
 801ce0e:	9a08      	ldr	r2, [sp, #32]
 801ce10:	785b      	ldrb	r3, [r3, #1]
 801ce12:	2a00      	cmp	r2, #0
 801ce14:	d03a      	beq.n	801ce8c <_strtod_l+0x250>
 801ce16:	900e      	str	r0, [sp, #56]	@ 0x38
 801ce18:	9206      	str	r2, [sp, #24]
 801ce1a:	001a      	movs	r2, r3
 801ce1c:	3a30      	subs	r2, #48	@ 0x30
 801ce1e:	2a09      	cmp	r2, #9
 801ce20:	d912      	bls.n	801ce48 <_strtod_l+0x20c>
 801ce22:	2201      	movs	r2, #1
 801ce24:	4694      	mov	ip, r2
 801ce26:	e7c3      	b.n	801cdb0 <_strtod_l+0x174>
 801ce28:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ce2a:	3001      	adds	r0, #1
 801ce2c:	1c5a      	adds	r2, r3, #1
 801ce2e:	921d      	str	r2, [sp, #116]	@ 0x74
 801ce30:	785b      	ldrb	r3, [r3, #1]
 801ce32:	2b30      	cmp	r3, #48	@ 0x30
 801ce34:	d0f8      	beq.n	801ce28 <_strtod_l+0x1ec>
 801ce36:	001a      	movs	r2, r3
 801ce38:	3a31      	subs	r2, #49	@ 0x31
 801ce3a:	2a08      	cmp	r2, #8
 801ce3c:	d83b      	bhi.n	801ceb6 <_strtod_l+0x27a>
 801ce3e:	900e      	str	r0, [sp, #56]	@ 0x38
 801ce40:	2000      	movs	r0, #0
 801ce42:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ce44:	9006      	str	r0, [sp, #24]
 801ce46:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ce48:	001a      	movs	r2, r3
 801ce4a:	1c41      	adds	r1, r0, #1
 801ce4c:	3a30      	subs	r2, #48	@ 0x30
 801ce4e:	2b30      	cmp	r3, #48	@ 0x30
 801ce50:	d016      	beq.n	801ce80 <_strtod_l+0x244>
 801ce52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ce54:	185b      	adds	r3, r3, r1
 801ce56:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce58:	9b06      	ldr	r3, [sp, #24]
 801ce5a:	210a      	movs	r1, #10
 801ce5c:	469c      	mov	ip, r3
 801ce5e:	4484      	add	ip, r0
 801ce60:	459c      	cmp	ip, r3
 801ce62:	d115      	bne.n	801ce90 <_strtod_l+0x254>
 801ce64:	9906      	ldr	r1, [sp, #24]
 801ce66:	9b06      	ldr	r3, [sp, #24]
 801ce68:	3101      	adds	r1, #1
 801ce6a:	1809      	adds	r1, r1, r0
 801ce6c:	181b      	adds	r3, r3, r0
 801ce6e:	9106      	str	r1, [sp, #24]
 801ce70:	2b08      	cmp	r3, #8
 801ce72:	dc19      	bgt.n	801cea8 <_strtod_l+0x26c>
 801ce74:	230a      	movs	r3, #10
 801ce76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ce78:	434b      	muls	r3, r1
 801ce7a:	2100      	movs	r1, #0
 801ce7c:	18d3      	adds	r3, r2, r3
 801ce7e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ce80:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ce82:	0008      	movs	r0, r1
 801ce84:	1c5a      	adds	r2, r3, #1
 801ce86:	921d      	str	r2, [sp, #116]	@ 0x74
 801ce88:	785b      	ldrb	r3, [r3, #1]
 801ce8a:	e7c6      	b.n	801ce1a <_strtod_l+0x1de>
 801ce8c:	9808      	ldr	r0, [sp, #32]
 801ce8e:	e7d0      	b.n	801ce32 <_strtod_l+0x1f6>
 801ce90:	1c5c      	adds	r4, r3, #1
 801ce92:	2b08      	cmp	r3, #8
 801ce94:	dc04      	bgt.n	801cea0 <_strtod_l+0x264>
 801ce96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ce98:	434b      	muls	r3, r1
 801ce9a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ce9c:	0023      	movs	r3, r4
 801ce9e:	e7df      	b.n	801ce60 <_strtod_l+0x224>
 801cea0:	2c10      	cmp	r4, #16
 801cea2:	dcfb      	bgt.n	801ce9c <_strtod_l+0x260>
 801cea4:	434d      	muls	r5, r1
 801cea6:	e7f9      	b.n	801ce9c <_strtod_l+0x260>
 801cea8:	2100      	movs	r1, #0
 801ceaa:	2b0f      	cmp	r3, #15
 801ceac:	dce8      	bgt.n	801ce80 <_strtod_l+0x244>
 801ceae:	230a      	movs	r3, #10
 801ceb0:	435d      	muls	r5, r3
 801ceb2:	1955      	adds	r5, r2, r5
 801ceb4:	e7e4      	b.n	801ce80 <_strtod_l+0x244>
 801ceb6:	2200      	movs	r2, #0
 801ceb8:	920e      	str	r2, [sp, #56]	@ 0x38
 801ceba:	9206      	str	r2, [sp, #24]
 801cebc:	3201      	adds	r2, #1
 801cebe:	e7b1      	b.n	801ce24 <_strtod_l+0x1e8>
 801cec0:	2400      	movs	r4, #0
 801cec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cec4:	3302      	adds	r3, #2
 801cec6:	931d      	str	r3, [sp, #116]	@ 0x74
 801cec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ceca:	789b      	ldrb	r3, [r3, #2]
 801cecc:	001a      	movs	r2, r3
 801cece:	3a30      	subs	r2, #48	@ 0x30
 801ced0:	2a09      	cmp	r2, #9
 801ced2:	d913      	bls.n	801cefc <_strtod_l+0x2c0>
 801ced4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ced6:	921d      	str	r2, [sp, #116]	@ 0x74
 801ced8:	2200      	movs	r2, #0
 801ceda:	e032      	b.n	801cf42 <_strtod_l+0x306>
 801cedc:	080238dc 	.word	0x080238dc
 801cee0:	7ff00000 	.word	0x7ff00000
 801cee4:	ffefffff 	.word	0xffefffff
 801cee8:	00000433 	.word	0x00000433
 801ceec:	7fffffff 	.word	0x7fffffff
 801cef0:	080238c4 	.word	0x080238c4
 801cef4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cef6:	1c5a      	adds	r2, r3, #1
 801cef8:	921d      	str	r2, [sp, #116]	@ 0x74
 801cefa:	785b      	ldrb	r3, [r3, #1]
 801cefc:	2b30      	cmp	r3, #48	@ 0x30
 801cefe:	d0f9      	beq.n	801cef4 <_strtod_l+0x2b8>
 801cf00:	2200      	movs	r2, #0
 801cf02:	9207      	str	r2, [sp, #28]
 801cf04:	001a      	movs	r2, r3
 801cf06:	3a31      	subs	r2, #49	@ 0x31
 801cf08:	2a08      	cmp	r2, #8
 801cf0a:	d81b      	bhi.n	801cf44 <_strtod_l+0x308>
 801cf0c:	3b30      	subs	r3, #48	@ 0x30
 801cf0e:	9310      	str	r3, [sp, #64]	@ 0x40
 801cf10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cf12:	9307      	str	r3, [sp, #28]
 801cf14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cf16:	1c59      	adds	r1, r3, #1
 801cf18:	911d      	str	r1, [sp, #116]	@ 0x74
 801cf1a:	785b      	ldrb	r3, [r3, #1]
 801cf1c:	001a      	movs	r2, r3
 801cf1e:	3a30      	subs	r2, #48	@ 0x30
 801cf20:	2a09      	cmp	r2, #9
 801cf22:	d93a      	bls.n	801cf9a <_strtod_l+0x35e>
 801cf24:	9a07      	ldr	r2, [sp, #28]
 801cf26:	1a8a      	subs	r2, r1, r2
 801cf28:	49b4      	ldr	r1, [pc, #720]	@ (801d1fc <_strtod_l+0x5c0>)
 801cf2a:	9107      	str	r1, [sp, #28]
 801cf2c:	2a08      	cmp	r2, #8
 801cf2e:	dc04      	bgt.n	801cf3a <_strtod_l+0x2fe>
 801cf30:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801cf32:	9207      	str	r2, [sp, #28]
 801cf34:	428a      	cmp	r2, r1
 801cf36:	dd00      	ble.n	801cf3a <_strtod_l+0x2fe>
 801cf38:	9107      	str	r1, [sp, #28]
 801cf3a:	2c00      	cmp	r4, #0
 801cf3c:	d002      	beq.n	801cf44 <_strtod_l+0x308>
 801cf3e:	9a07      	ldr	r2, [sp, #28]
 801cf40:	4252      	negs	r2, r2
 801cf42:	9207      	str	r2, [sp, #28]
 801cf44:	9a06      	ldr	r2, [sp, #24]
 801cf46:	2a00      	cmp	r2, #0
 801cf48:	d14d      	bne.n	801cfe6 <_strtod_l+0x3aa>
 801cf4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cf4c:	4310      	orrs	r0, r2
 801cf4e:	d000      	beq.n	801cf52 <_strtod_l+0x316>
 801cf50:	e6af      	b.n	801ccb2 <_strtod_l+0x76>
 801cf52:	4662      	mov	r2, ip
 801cf54:	2a00      	cmp	r2, #0
 801cf56:	d000      	beq.n	801cf5a <_strtod_l+0x31e>
 801cf58:	e6c7      	b.n	801ccea <_strtod_l+0xae>
 801cf5a:	2b69      	cmp	r3, #105	@ 0x69
 801cf5c:	d027      	beq.n	801cfae <_strtod_l+0x372>
 801cf5e:	dc23      	bgt.n	801cfa8 <_strtod_l+0x36c>
 801cf60:	2b49      	cmp	r3, #73	@ 0x49
 801cf62:	d024      	beq.n	801cfae <_strtod_l+0x372>
 801cf64:	2b4e      	cmp	r3, #78	@ 0x4e
 801cf66:	d000      	beq.n	801cf6a <_strtod_l+0x32e>
 801cf68:	e6bf      	b.n	801ccea <_strtod_l+0xae>
 801cf6a:	49a5      	ldr	r1, [pc, #660]	@ (801d200 <_strtod_l+0x5c4>)
 801cf6c:	a81d      	add	r0, sp, #116	@ 0x74
 801cf6e:	f002 fe2b 	bl	801fbc8 <__match>
 801cf72:	2800      	cmp	r0, #0
 801cf74:	d100      	bne.n	801cf78 <_strtod_l+0x33c>
 801cf76:	e6b8      	b.n	801ccea <_strtod_l+0xae>
 801cf78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cf7a:	781b      	ldrb	r3, [r3, #0]
 801cf7c:	2b28      	cmp	r3, #40	@ 0x28
 801cf7e:	d12c      	bne.n	801cfda <_strtod_l+0x39e>
 801cf80:	49a0      	ldr	r1, [pc, #640]	@ (801d204 <_strtod_l+0x5c8>)
 801cf82:	aa20      	add	r2, sp, #128	@ 0x80
 801cf84:	a81d      	add	r0, sp, #116	@ 0x74
 801cf86:	f002 fe33 	bl	801fbf0 <__hexnan>
 801cf8a:	2805      	cmp	r0, #5
 801cf8c:	d125      	bne.n	801cfda <_strtod_l+0x39e>
 801cf8e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801cf90:	4a9d      	ldr	r2, [pc, #628]	@ (801d208 <_strtod_l+0x5cc>)
 801cf92:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801cf94:	431a      	orrs	r2, r3
 801cf96:	0017      	movs	r7, r2
 801cf98:	e68b      	b.n	801ccb2 <_strtod_l+0x76>
 801cf9a:	220a      	movs	r2, #10
 801cf9c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cf9e:	434a      	muls	r2, r1
 801cfa0:	18d2      	adds	r2, r2, r3
 801cfa2:	3a30      	subs	r2, #48	@ 0x30
 801cfa4:	9210      	str	r2, [sp, #64]	@ 0x40
 801cfa6:	e7b5      	b.n	801cf14 <_strtod_l+0x2d8>
 801cfa8:	2b6e      	cmp	r3, #110	@ 0x6e
 801cfaa:	d0de      	beq.n	801cf6a <_strtod_l+0x32e>
 801cfac:	e69d      	b.n	801ccea <_strtod_l+0xae>
 801cfae:	4997      	ldr	r1, [pc, #604]	@ (801d20c <_strtod_l+0x5d0>)
 801cfb0:	a81d      	add	r0, sp, #116	@ 0x74
 801cfb2:	f002 fe09 	bl	801fbc8 <__match>
 801cfb6:	2800      	cmp	r0, #0
 801cfb8:	d100      	bne.n	801cfbc <_strtod_l+0x380>
 801cfba:	e696      	b.n	801ccea <_strtod_l+0xae>
 801cfbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cfbe:	4994      	ldr	r1, [pc, #592]	@ (801d210 <_strtod_l+0x5d4>)
 801cfc0:	3b01      	subs	r3, #1
 801cfc2:	a81d      	add	r0, sp, #116	@ 0x74
 801cfc4:	931d      	str	r3, [sp, #116]	@ 0x74
 801cfc6:	f002 fdff 	bl	801fbc8 <__match>
 801cfca:	2800      	cmp	r0, #0
 801cfcc:	d102      	bne.n	801cfd4 <_strtod_l+0x398>
 801cfce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801cfd0:	3301      	adds	r3, #1
 801cfd2:	931d      	str	r3, [sp, #116]	@ 0x74
 801cfd4:	2600      	movs	r6, #0
 801cfd6:	4f8c      	ldr	r7, [pc, #560]	@ (801d208 <_strtod_l+0x5cc>)
 801cfd8:	e66b      	b.n	801ccb2 <_strtod_l+0x76>
 801cfda:	488e      	ldr	r0, [pc, #568]	@ (801d214 <_strtod_l+0x5d8>)
 801cfdc:	f001 fc84 	bl	801e8e8 <nan>
 801cfe0:	0006      	movs	r6, r0
 801cfe2:	000f      	movs	r7, r1
 801cfe4:	e665      	b.n	801ccb2 <_strtod_l+0x76>
 801cfe6:	9b07      	ldr	r3, [sp, #28]
 801cfe8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cfea:	1a9b      	subs	r3, r3, r2
 801cfec:	930c      	str	r3, [sp, #48]	@ 0x30
 801cfee:	9b08      	ldr	r3, [sp, #32]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d101      	bne.n	801cff8 <_strtod_l+0x3bc>
 801cff4:	9b06      	ldr	r3, [sp, #24]
 801cff6:	9308      	str	r3, [sp, #32]
 801cff8:	9c06      	ldr	r4, [sp, #24]
 801cffa:	2c10      	cmp	r4, #16
 801cffc:	dd00      	ble.n	801d000 <_strtod_l+0x3c4>
 801cffe:	2410      	movs	r4, #16
 801d000:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d002:	f7e6 fa0b 	bl	800341c <__aeabi_ui2d>
 801d006:	9b06      	ldr	r3, [sp, #24]
 801d008:	0006      	movs	r6, r0
 801d00a:	000f      	movs	r7, r1
 801d00c:	2b09      	cmp	r3, #9
 801d00e:	dc13      	bgt.n	801d038 <_strtod_l+0x3fc>
 801d010:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d012:	2b00      	cmp	r3, #0
 801d014:	d100      	bne.n	801d018 <_strtod_l+0x3dc>
 801d016:	e64c      	b.n	801ccb2 <_strtod_l+0x76>
 801d018:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	dc00      	bgt.n	801d020 <_strtod_l+0x3e4>
 801d01e:	e07e      	b.n	801d11e <_strtod_l+0x4e2>
 801d020:	2b16      	cmp	r3, #22
 801d022:	dc63      	bgt.n	801d0ec <_strtod_l+0x4b0>
 801d024:	497c      	ldr	r1, [pc, #496]	@ (801d218 <_strtod_l+0x5dc>)
 801d026:	00db      	lsls	r3, r3, #3
 801d028:	18c9      	adds	r1, r1, r3
 801d02a:	0032      	movs	r2, r6
 801d02c:	6808      	ldr	r0, [r1, #0]
 801d02e:	6849      	ldr	r1, [r1, #4]
 801d030:	003b      	movs	r3, r7
 801d032:	f7e5 fb03 	bl	800263c <__aeabi_dmul>
 801d036:	e7d3      	b.n	801cfe0 <_strtod_l+0x3a4>
 801d038:	0022      	movs	r2, r4
 801d03a:	4b77      	ldr	r3, [pc, #476]	@ (801d218 <_strtod_l+0x5dc>)
 801d03c:	3a09      	subs	r2, #9
 801d03e:	00d2      	lsls	r2, r2, #3
 801d040:	189b      	adds	r3, r3, r2
 801d042:	681a      	ldr	r2, [r3, #0]
 801d044:	685b      	ldr	r3, [r3, #4]
 801d046:	f7e5 faf9 	bl	800263c <__aeabi_dmul>
 801d04a:	0006      	movs	r6, r0
 801d04c:	0028      	movs	r0, r5
 801d04e:	000f      	movs	r7, r1
 801d050:	f7e6 f9e4 	bl	800341c <__aeabi_ui2d>
 801d054:	000b      	movs	r3, r1
 801d056:	0002      	movs	r2, r0
 801d058:	0039      	movs	r1, r7
 801d05a:	0030      	movs	r0, r6
 801d05c:	f7e4 fb46 	bl	80016ec <__aeabi_dadd>
 801d060:	9b06      	ldr	r3, [sp, #24]
 801d062:	0006      	movs	r6, r0
 801d064:	000f      	movs	r7, r1
 801d066:	2b0f      	cmp	r3, #15
 801d068:	ddd2      	ble.n	801d010 <_strtod_l+0x3d4>
 801d06a:	9b06      	ldr	r3, [sp, #24]
 801d06c:	1b1c      	subs	r4, r3, r4
 801d06e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d070:	18e4      	adds	r4, r4, r3
 801d072:	2c00      	cmp	r4, #0
 801d074:	dc00      	bgt.n	801d078 <_strtod_l+0x43c>
 801d076:	e09b      	b.n	801d1b0 <_strtod_l+0x574>
 801d078:	220f      	movs	r2, #15
 801d07a:	0023      	movs	r3, r4
 801d07c:	4013      	ands	r3, r2
 801d07e:	4214      	tst	r4, r2
 801d080:	d00a      	beq.n	801d098 <_strtod_l+0x45c>
 801d082:	4965      	ldr	r1, [pc, #404]	@ (801d218 <_strtod_l+0x5dc>)
 801d084:	00db      	lsls	r3, r3, #3
 801d086:	18c9      	adds	r1, r1, r3
 801d088:	0032      	movs	r2, r6
 801d08a:	6808      	ldr	r0, [r1, #0]
 801d08c:	6849      	ldr	r1, [r1, #4]
 801d08e:	003b      	movs	r3, r7
 801d090:	f7e5 fad4 	bl	800263c <__aeabi_dmul>
 801d094:	0006      	movs	r6, r0
 801d096:	000f      	movs	r7, r1
 801d098:	230f      	movs	r3, #15
 801d09a:	439c      	bics	r4, r3
 801d09c:	d073      	beq.n	801d186 <_strtod_l+0x54a>
 801d09e:	3326      	adds	r3, #38	@ 0x26
 801d0a0:	33ff      	adds	r3, #255	@ 0xff
 801d0a2:	429c      	cmp	r4, r3
 801d0a4:	dd4b      	ble.n	801d13e <_strtod_l+0x502>
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	9306      	str	r3, [sp, #24]
 801d0aa:	9307      	str	r3, [sp, #28]
 801d0ac:	930d      	str	r3, [sp, #52]	@ 0x34
 801d0ae:	9308      	str	r3, [sp, #32]
 801d0b0:	2322      	movs	r3, #34	@ 0x22
 801d0b2:	2600      	movs	r6, #0
 801d0b4:	9a05      	ldr	r2, [sp, #20]
 801d0b6:	4f54      	ldr	r7, [pc, #336]	@ (801d208 <_strtod_l+0x5cc>)
 801d0b8:	6013      	str	r3, [r2, #0]
 801d0ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d0bc:	42b3      	cmp	r3, r6
 801d0be:	d100      	bne.n	801d0c2 <_strtod_l+0x486>
 801d0c0:	e5f7      	b.n	801ccb2 <_strtod_l+0x76>
 801d0c2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d0c4:	9805      	ldr	r0, [sp, #20]
 801d0c6:	f002 ff4d 	bl	801ff64 <_Bfree>
 801d0ca:	9908      	ldr	r1, [sp, #32]
 801d0cc:	9805      	ldr	r0, [sp, #20]
 801d0ce:	f002 ff49 	bl	801ff64 <_Bfree>
 801d0d2:	9907      	ldr	r1, [sp, #28]
 801d0d4:	9805      	ldr	r0, [sp, #20]
 801d0d6:	f002 ff45 	bl	801ff64 <_Bfree>
 801d0da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d0dc:	9805      	ldr	r0, [sp, #20]
 801d0de:	f002 ff41 	bl	801ff64 <_Bfree>
 801d0e2:	9906      	ldr	r1, [sp, #24]
 801d0e4:	9805      	ldr	r0, [sp, #20]
 801d0e6:	f002 ff3d 	bl	801ff64 <_Bfree>
 801d0ea:	e5e2      	b.n	801ccb2 <_strtod_l+0x76>
 801d0ec:	2325      	movs	r3, #37	@ 0x25
 801d0ee:	9a06      	ldr	r2, [sp, #24]
 801d0f0:	1a9b      	subs	r3, r3, r2
 801d0f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d0f4:	4293      	cmp	r3, r2
 801d0f6:	dbb8      	blt.n	801d06a <_strtod_l+0x42e>
 801d0f8:	240f      	movs	r4, #15
 801d0fa:	9b06      	ldr	r3, [sp, #24]
 801d0fc:	4d46      	ldr	r5, [pc, #280]	@ (801d218 <_strtod_l+0x5dc>)
 801d0fe:	1ae4      	subs	r4, r4, r3
 801d100:	00e1      	lsls	r1, r4, #3
 801d102:	1869      	adds	r1, r5, r1
 801d104:	0032      	movs	r2, r6
 801d106:	6808      	ldr	r0, [r1, #0]
 801d108:	6849      	ldr	r1, [r1, #4]
 801d10a:	003b      	movs	r3, r7
 801d10c:	f7e5 fa96 	bl	800263c <__aeabi_dmul>
 801d110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d112:	1b1c      	subs	r4, r3, r4
 801d114:	00e4      	lsls	r4, r4, #3
 801d116:	192d      	adds	r5, r5, r4
 801d118:	682a      	ldr	r2, [r5, #0]
 801d11a:	686b      	ldr	r3, [r5, #4]
 801d11c:	e789      	b.n	801d032 <_strtod_l+0x3f6>
 801d11e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d120:	3316      	adds	r3, #22
 801d122:	dba2      	blt.n	801d06a <_strtod_l+0x42e>
 801d124:	9907      	ldr	r1, [sp, #28]
 801d126:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d128:	4b3b      	ldr	r3, [pc, #236]	@ (801d218 <_strtod_l+0x5dc>)
 801d12a:	1a52      	subs	r2, r2, r1
 801d12c:	00d2      	lsls	r2, r2, #3
 801d12e:	189b      	adds	r3, r3, r2
 801d130:	0030      	movs	r0, r6
 801d132:	681a      	ldr	r2, [r3, #0]
 801d134:	685b      	ldr	r3, [r3, #4]
 801d136:	0039      	movs	r1, r7
 801d138:	f7e4 fe3c 	bl	8001db4 <__aeabi_ddiv>
 801d13c:	e750      	b.n	801cfe0 <_strtod_l+0x3a4>
 801d13e:	2300      	movs	r3, #0
 801d140:	0030      	movs	r0, r6
 801d142:	0039      	movs	r1, r7
 801d144:	4d35      	ldr	r5, [pc, #212]	@ (801d21c <_strtod_l+0x5e0>)
 801d146:	1124      	asrs	r4, r4, #4
 801d148:	9309      	str	r3, [sp, #36]	@ 0x24
 801d14a:	2c01      	cmp	r4, #1
 801d14c:	dc1e      	bgt.n	801d18c <_strtod_l+0x550>
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d001      	beq.n	801d156 <_strtod_l+0x51a>
 801d152:	0006      	movs	r6, r0
 801d154:	000f      	movs	r7, r1
 801d156:	4b32      	ldr	r3, [pc, #200]	@ (801d220 <_strtod_l+0x5e4>)
 801d158:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d15a:	18ff      	adds	r7, r7, r3
 801d15c:	4b2f      	ldr	r3, [pc, #188]	@ (801d21c <_strtod_l+0x5e0>)
 801d15e:	00d5      	lsls	r5, r2, #3
 801d160:	195d      	adds	r5, r3, r5
 801d162:	0032      	movs	r2, r6
 801d164:	6828      	ldr	r0, [r5, #0]
 801d166:	6869      	ldr	r1, [r5, #4]
 801d168:	003b      	movs	r3, r7
 801d16a:	f7e5 fa67 	bl	800263c <__aeabi_dmul>
 801d16e:	4b26      	ldr	r3, [pc, #152]	@ (801d208 <_strtod_l+0x5cc>)
 801d170:	4a2c      	ldr	r2, [pc, #176]	@ (801d224 <_strtod_l+0x5e8>)
 801d172:	0006      	movs	r6, r0
 801d174:	400b      	ands	r3, r1
 801d176:	4293      	cmp	r3, r2
 801d178:	d895      	bhi.n	801d0a6 <_strtod_l+0x46a>
 801d17a:	4a2b      	ldr	r2, [pc, #172]	@ (801d228 <_strtod_l+0x5ec>)
 801d17c:	4293      	cmp	r3, r2
 801d17e:	d913      	bls.n	801d1a8 <_strtod_l+0x56c>
 801d180:	2601      	movs	r6, #1
 801d182:	4f2a      	ldr	r7, [pc, #168]	@ (801d22c <_strtod_l+0x5f0>)
 801d184:	4276      	negs	r6, r6
 801d186:	2300      	movs	r3, #0
 801d188:	9309      	str	r3, [sp, #36]	@ 0x24
 801d18a:	e086      	b.n	801d29a <_strtod_l+0x65e>
 801d18c:	2201      	movs	r2, #1
 801d18e:	4214      	tst	r4, r2
 801d190:	d004      	beq.n	801d19c <_strtod_l+0x560>
 801d192:	682a      	ldr	r2, [r5, #0]
 801d194:	686b      	ldr	r3, [r5, #4]
 801d196:	f7e5 fa51 	bl	800263c <__aeabi_dmul>
 801d19a:	2301      	movs	r3, #1
 801d19c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d19e:	1064      	asrs	r4, r4, #1
 801d1a0:	3201      	adds	r2, #1
 801d1a2:	9209      	str	r2, [sp, #36]	@ 0x24
 801d1a4:	3508      	adds	r5, #8
 801d1a6:	e7d0      	b.n	801d14a <_strtod_l+0x50e>
 801d1a8:	23d4      	movs	r3, #212	@ 0xd4
 801d1aa:	049b      	lsls	r3, r3, #18
 801d1ac:	18cf      	adds	r7, r1, r3
 801d1ae:	e7ea      	b.n	801d186 <_strtod_l+0x54a>
 801d1b0:	2c00      	cmp	r4, #0
 801d1b2:	d0e8      	beq.n	801d186 <_strtod_l+0x54a>
 801d1b4:	4264      	negs	r4, r4
 801d1b6:	230f      	movs	r3, #15
 801d1b8:	0022      	movs	r2, r4
 801d1ba:	401a      	ands	r2, r3
 801d1bc:	421c      	tst	r4, r3
 801d1be:	d00a      	beq.n	801d1d6 <_strtod_l+0x59a>
 801d1c0:	4b15      	ldr	r3, [pc, #84]	@ (801d218 <_strtod_l+0x5dc>)
 801d1c2:	00d2      	lsls	r2, r2, #3
 801d1c4:	189b      	adds	r3, r3, r2
 801d1c6:	0030      	movs	r0, r6
 801d1c8:	681a      	ldr	r2, [r3, #0]
 801d1ca:	685b      	ldr	r3, [r3, #4]
 801d1cc:	0039      	movs	r1, r7
 801d1ce:	f7e4 fdf1 	bl	8001db4 <__aeabi_ddiv>
 801d1d2:	0006      	movs	r6, r0
 801d1d4:	000f      	movs	r7, r1
 801d1d6:	1124      	asrs	r4, r4, #4
 801d1d8:	d0d5      	beq.n	801d186 <_strtod_l+0x54a>
 801d1da:	2c1f      	cmp	r4, #31
 801d1dc:	dd28      	ble.n	801d230 <_strtod_l+0x5f4>
 801d1de:	2300      	movs	r3, #0
 801d1e0:	9306      	str	r3, [sp, #24]
 801d1e2:	9307      	str	r3, [sp, #28]
 801d1e4:	930d      	str	r3, [sp, #52]	@ 0x34
 801d1e6:	9308      	str	r3, [sp, #32]
 801d1e8:	2322      	movs	r3, #34	@ 0x22
 801d1ea:	9a05      	ldr	r2, [sp, #20]
 801d1ec:	2600      	movs	r6, #0
 801d1ee:	6013      	str	r3, [r2, #0]
 801d1f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d1f2:	2700      	movs	r7, #0
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d000      	beq.n	801d1fa <_strtod_l+0x5be>
 801d1f8:	e763      	b.n	801d0c2 <_strtod_l+0x486>
 801d1fa:	e55a      	b.n	801ccb2 <_strtod_l+0x76>
 801d1fc:	00004e1f 	.word	0x00004e1f
 801d200:	08023a26 	.word	0x08023a26
 801d204:	080238c8 	.word	0x080238c8
 801d208:	7ff00000 	.word	0x7ff00000
 801d20c:	08023a1e 	.word	0x08023a1e
 801d210:	08023a58 	.word	0x08023a58
 801d214:	08023ce4 	.word	0x08023ce4
 801d218:	08023bd0 	.word	0x08023bd0
 801d21c:	08023ba8 	.word	0x08023ba8
 801d220:	fcb00000 	.word	0xfcb00000
 801d224:	7ca00000 	.word	0x7ca00000
 801d228:	7c900000 	.word	0x7c900000
 801d22c:	7fefffff 	.word	0x7fefffff
 801d230:	2310      	movs	r3, #16
 801d232:	0022      	movs	r2, r4
 801d234:	401a      	ands	r2, r3
 801d236:	9209      	str	r2, [sp, #36]	@ 0x24
 801d238:	421c      	tst	r4, r3
 801d23a:	d001      	beq.n	801d240 <_strtod_l+0x604>
 801d23c:	335a      	adds	r3, #90	@ 0x5a
 801d23e:	9309      	str	r3, [sp, #36]	@ 0x24
 801d240:	0030      	movs	r0, r6
 801d242:	0039      	movs	r1, r7
 801d244:	2300      	movs	r3, #0
 801d246:	4dbf      	ldr	r5, [pc, #764]	@ (801d544 <_strtod_l+0x908>)
 801d248:	2201      	movs	r2, #1
 801d24a:	4214      	tst	r4, r2
 801d24c:	d004      	beq.n	801d258 <_strtod_l+0x61c>
 801d24e:	682a      	ldr	r2, [r5, #0]
 801d250:	686b      	ldr	r3, [r5, #4]
 801d252:	f7e5 f9f3 	bl	800263c <__aeabi_dmul>
 801d256:	2301      	movs	r3, #1
 801d258:	1064      	asrs	r4, r4, #1
 801d25a:	3508      	adds	r5, #8
 801d25c:	2c00      	cmp	r4, #0
 801d25e:	d1f3      	bne.n	801d248 <_strtod_l+0x60c>
 801d260:	2b00      	cmp	r3, #0
 801d262:	d001      	beq.n	801d268 <_strtod_l+0x62c>
 801d264:	0006      	movs	r6, r0
 801d266:	000f      	movs	r7, r1
 801d268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d00d      	beq.n	801d28a <_strtod_l+0x64e>
 801d26e:	236b      	movs	r3, #107	@ 0x6b
 801d270:	007a      	lsls	r2, r7, #1
 801d272:	0d52      	lsrs	r2, r2, #21
 801d274:	0039      	movs	r1, r7
 801d276:	1a9b      	subs	r3, r3, r2
 801d278:	2b00      	cmp	r3, #0
 801d27a:	dd06      	ble.n	801d28a <_strtod_l+0x64e>
 801d27c:	2b1f      	cmp	r3, #31
 801d27e:	dd5a      	ble.n	801d336 <_strtod_l+0x6fa>
 801d280:	2600      	movs	r6, #0
 801d282:	2b34      	cmp	r3, #52	@ 0x34
 801d284:	dd50      	ble.n	801d328 <_strtod_l+0x6ec>
 801d286:	27dc      	movs	r7, #220	@ 0xdc
 801d288:	04bf      	lsls	r7, r7, #18
 801d28a:	2200      	movs	r2, #0
 801d28c:	2300      	movs	r3, #0
 801d28e:	0030      	movs	r0, r6
 801d290:	0039      	movs	r1, r7
 801d292:	f7e3 f90d 	bl	80004b0 <__aeabi_dcmpeq>
 801d296:	2800      	cmp	r0, #0
 801d298:	d1a1      	bne.n	801d1de <_strtod_l+0x5a2>
 801d29a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d29c:	9a08      	ldr	r2, [sp, #32]
 801d29e:	9300      	str	r3, [sp, #0]
 801d2a0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d2a2:	9b06      	ldr	r3, [sp, #24]
 801d2a4:	9805      	ldr	r0, [sp, #20]
 801d2a6:	f002 fec5 	bl	8020034 <__s2b>
 801d2aa:	900d      	str	r0, [sp, #52]	@ 0x34
 801d2ac:	2800      	cmp	r0, #0
 801d2ae:	d100      	bne.n	801d2b2 <_strtod_l+0x676>
 801d2b0:	e6f9      	b.n	801d0a6 <_strtod_l+0x46a>
 801d2b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d2b4:	9907      	ldr	r1, [sp, #28]
 801d2b6:	17da      	asrs	r2, r3, #31
 801d2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2ba:	1a5b      	subs	r3, r3, r1
 801d2bc:	401a      	ands	r2, r3
 801d2be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d2c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d2c2:	43db      	mvns	r3, r3
 801d2c4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d2c6:	17db      	asrs	r3, r3, #31
 801d2c8:	401a      	ands	r2, r3
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	921a      	str	r2, [sp, #104]	@ 0x68
 801d2ce:	9306      	str	r3, [sp, #24]
 801d2d0:	9307      	str	r3, [sp, #28]
 801d2d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2d4:	9805      	ldr	r0, [sp, #20]
 801d2d6:	6859      	ldr	r1, [r3, #4]
 801d2d8:	f002 fe00 	bl	801fedc <_Balloc>
 801d2dc:	9008      	str	r0, [sp, #32]
 801d2de:	2800      	cmp	r0, #0
 801d2e0:	d100      	bne.n	801d2e4 <_strtod_l+0x6a8>
 801d2e2:	e6e5      	b.n	801d0b0 <_strtod_l+0x474>
 801d2e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d2e6:	300c      	adds	r0, #12
 801d2e8:	0019      	movs	r1, r3
 801d2ea:	691a      	ldr	r2, [r3, #16]
 801d2ec:	310c      	adds	r1, #12
 801d2ee:	3202      	adds	r2, #2
 801d2f0:	0092      	lsls	r2, r2, #2
 801d2f2:	f001 faef 	bl	801e8d4 <memcpy>
 801d2f6:	ab20      	add	r3, sp, #128	@ 0x80
 801d2f8:	9301      	str	r3, [sp, #4]
 801d2fa:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d2fc:	9300      	str	r3, [sp, #0]
 801d2fe:	0032      	movs	r2, r6
 801d300:	003b      	movs	r3, r7
 801d302:	9805      	ldr	r0, [sp, #20]
 801d304:	9610      	str	r6, [sp, #64]	@ 0x40
 801d306:	9711      	str	r7, [sp, #68]	@ 0x44
 801d308:	f003 f9e4 	bl	80206d4 <__d2b>
 801d30c:	901e      	str	r0, [sp, #120]	@ 0x78
 801d30e:	2800      	cmp	r0, #0
 801d310:	d100      	bne.n	801d314 <_strtod_l+0x6d8>
 801d312:	e6cd      	b.n	801d0b0 <_strtod_l+0x474>
 801d314:	2101      	movs	r1, #1
 801d316:	9805      	ldr	r0, [sp, #20]
 801d318:	f002 ff28 	bl	802016c <__i2b>
 801d31c:	9007      	str	r0, [sp, #28]
 801d31e:	2800      	cmp	r0, #0
 801d320:	d10e      	bne.n	801d340 <_strtod_l+0x704>
 801d322:	2300      	movs	r3, #0
 801d324:	9307      	str	r3, [sp, #28]
 801d326:	e6c3      	b.n	801d0b0 <_strtod_l+0x474>
 801d328:	234b      	movs	r3, #75	@ 0x4b
 801d32a:	1a9a      	subs	r2, r3, r2
 801d32c:	3b4c      	subs	r3, #76	@ 0x4c
 801d32e:	4093      	lsls	r3, r2
 801d330:	4019      	ands	r1, r3
 801d332:	000f      	movs	r7, r1
 801d334:	e7a9      	b.n	801d28a <_strtod_l+0x64e>
 801d336:	2201      	movs	r2, #1
 801d338:	4252      	negs	r2, r2
 801d33a:	409a      	lsls	r2, r3
 801d33c:	4016      	ands	r6, r2
 801d33e:	e7a4      	b.n	801d28a <_strtod_l+0x64e>
 801d340:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d342:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d344:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801d346:	1ad4      	subs	r4, r2, r3
 801d348:	2b00      	cmp	r3, #0
 801d34a:	db01      	blt.n	801d350 <_strtod_l+0x714>
 801d34c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801d34e:	195d      	adds	r5, r3, r5
 801d350:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d352:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801d354:	1a5b      	subs	r3, r3, r1
 801d356:	2136      	movs	r1, #54	@ 0x36
 801d358:	189b      	adds	r3, r3, r2
 801d35a:	1a8a      	subs	r2, r1, r2
 801d35c:	497a      	ldr	r1, [pc, #488]	@ (801d548 <_strtod_l+0x90c>)
 801d35e:	2001      	movs	r0, #1
 801d360:	468c      	mov	ip, r1
 801d362:	2100      	movs	r1, #0
 801d364:	3b01      	subs	r3, #1
 801d366:	9116      	str	r1, [sp, #88]	@ 0x58
 801d368:	9014      	str	r0, [sp, #80]	@ 0x50
 801d36a:	4563      	cmp	r3, ip
 801d36c:	da06      	bge.n	801d37c <_strtod_l+0x740>
 801d36e:	4661      	mov	r1, ip
 801d370:	1ac9      	subs	r1, r1, r3
 801d372:	1a52      	subs	r2, r2, r1
 801d374:	291f      	cmp	r1, #31
 801d376:	dc3f      	bgt.n	801d3f8 <_strtod_l+0x7bc>
 801d378:	4088      	lsls	r0, r1
 801d37a:	9014      	str	r0, [sp, #80]	@ 0x50
 801d37c:	18ab      	adds	r3, r5, r2
 801d37e:	930e      	str	r3, [sp, #56]	@ 0x38
 801d380:	18a4      	adds	r4, r4, r2
 801d382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d386:	191c      	adds	r4, r3, r4
 801d388:	002b      	movs	r3, r5
 801d38a:	4295      	cmp	r5, r2
 801d38c:	dd00      	ble.n	801d390 <_strtod_l+0x754>
 801d38e:	0013      	movs	r3, r2
 801d390:	42a3      	cmp	r3, r4
 801d392:	dd00      	ble.n	801d396 <_strtod_l+0x75a>
 801d394:	0023      	movs	r3, r4
 801d396:	2b00      	cmp	r3, #0
 801d398:	dd04      	ble.n	801d3a4 <_strtod_l+0x768>
 801d39a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d39c:	1ae4      	subs	r4, r4, r3
 801d39e:	1ad2      	subs	r2, r2, r3
 801d3a0:	920e      	str	r2, [sp, #56]	@ 0x38
 801d3a2:	1aed      	subs	r5, r5, r3
 801d3a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	dd16      	ble.n	801d3d8 <_strtod_l+0x79c>
 801d3aa:	001a      	movs	r2, r3
 801d3ac:	9907      	ldr	r1, [sp, #28]
 801d3ae:	9805      	ldr	r0, [sp, #20]
 801d3b0:	f002 ffa6 	bl	8020300 <__pow5mult>
 801d3b4:	9007      	str	r0, [sp, #28]
 801d3b6:	2800      	cmp	r0, #0
 801d3b8:	d0b3      	beq.n	801d322 <_strtod_l+0x6e6>
 801d3ba:	0001      	movs	r1, r0
 801d3bc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d3be:	9805      	ldr	r0, [sp, #20]
 801d3c0:	f002 feec 	bl	802019c <__multiply>
 801d3c4:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d3c6:	2800      	cmp	r0, #0
 801d3c8:	d100      	bne.n	801d3cc <_strtod_l+0x790>
 801d3ca:	e671      	b.n	801d0b0 <_strtod_l+0x474>
 801d3cc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d3ce:	9805      	ldr	r0, [sp, #20]
 801d3d0:	f002 fdc8 	bl	801ff64 <_Bfree>
 801d3d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d3d6:	931e      	str	r3, [sp, #120]	@ 0x78
 801d3d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	dc12      	bgt.n	801d404 <_strtod_l+0x7c8>
 801d3de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	dd18      	ble.n	801d416 <_strtod_l+0x7da>
 801d3e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d3e6:	9908      	ldr	r1, [sp, #32]
 801d3e8:	9805      	ldr	r0, [sp, #20]
 801d3ea:	f002 ff89 	bl	8020300 <__pow5mult>
 801d3ee:	9008      	str	r0, [sp, #32]
 801d3f0:	2800      	cmp	r0, #0
 801d3f2:	d110      	bne.n	801d416 <_strtod_l+0x7da>
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	e65a      	b.n	801d0ae <_strtod_l+0x472>
 801d3f8:	4954      	ldr	r1, [pc, #336]	@ (801d54c <_strtod_l+0x910>)
 801d3fa:	1acb      	subs	r3, r1, r3
 801d3fc:	0001      	movs	r1, r0
 801d3fe:	4099      	lsls	r1, r3
 801d400:	9116      	str	r1, [sp, #88]	@ 0x58
 801d402:	e7ba      	b.n	801d37a <_strtod_l+0x73e>
 801d404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d406:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d408:	9805      	ldr	r0, [sp, #20]
 801d40a:	f002 ffd5 	bl	80203b8 <__lshift>
 801d40e:	901e      	str	r0, [sp, #120]	@ 0x78
 801d410:	2800      	cmp	r0, #0
 801d412:	d1e4      	bne.n	801d3de <_strtod_l+0x7a2>
 801d414:	e64c      	b.n	801d0b0 <_strtod_l+0x474>
 801d416:	2c00      	cmp	r4, #0
 801d418:	dd07      	ble.n	801d42a <_strtod_l+0x7ee>
 801d41a:	0022      	movs	r2, r4
 801d41c:	9908      	ldr	r1, [sp, #32]
 801d41e:	9805      	ldr	r0, [sp, #20]
 801d420:	f002 ffca 	bl	80203b8 <__lshift>
 801d424:	9008      	str	r0, [sp, #32]
 801d426:	2800      	cmp	r0, #0
 801d428:	d0e4      	beq.n	801d3f4 <_strtod_l+0x7b8>
 801d42a:	2d00      	cmp	r5, #0
 801d42c:	dd08      	ble.n	801d440 <_strtod_l+0x804>
 801d42e:	002a      	movs	r2, r5
 801d430:	9907      	ldr	r1, [sp, #28]
 801d432:	9805      	ldr	r0, [sp, #20]
 801d434:	f002 ffc0 	bl	80203b8 <__lshift>
 801d438:	9007      	str	r0, [sp, #28]
 801d43a:	2800      	cmp	r0, #0
 801d43c:	d100      	bne.n	801d440 <_strtod_l+0x804>
 801d43e:	e637      	b.n	801d0b0 <_strtod_l+0x474>
 801d440:	9a08      	ldr	r2, [sp, #32]
 801d442:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d444:	9805      	ldr	r0, [sp, #20]
 801d446:	f003 f83f 	bl	80204c8 <__mdiff>
 801d44a:	9006      	str	r0, [sp, #24]
 801d44c:	2800      	cmp	r0, #0
 801d44e:	d100      	bne.n	801d452 <_strtod_l+0x816>
 801d450:	e62e      	b.n	801d0b0 <_strtod_l+0x474>
 801d452:	68c3      	ldr	r3, [r0, #12]
 801d454:	9907      	ldr	r1, [sp, #28]
 801d456:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d458:	2300      	movs	r3, #0
 801d45a:	60c3      	str	r3, [r0, #12]
 801d45c:	f003 f818 	bl	8020490 <__mcmp>
 801d460:	2800      	cmp	r0, #0
 801d462:	da3b      	bge.n	801d4dc <_strtod_l+0x8a0>
 801d464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d466:	4333      	orrs	r3, r6
 801d468:	d167      	bne.n	801d53a <_strtod_l+0x8fe>
 801d46a:	033b      	lsls	r3, r7, #12
 801d46c:	d165      	bne.n	801d53a <_strtod_l+0x8fe>
 801d46e:	22d6      	movs	r2, #214	@ 0xd6
 801d470:	4b37      	ldr	r3, [pc, #220]	@ (801d550 <_strtod_l+0x914>)
 801d472:	04d2      	lsls	r2, r2, #19
 801d474:	403b      	ands	r3, r7
 801d476:	4293      	cmp	r3, r2
 801d478:	d95f      	bls.n	801d53a <_strtod_l+0x8fe>
 801d47a:	9b06      	ldr	r3, [sp, #24]
 801d47c:	695b      	ldr	r3, [r3, #20]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d103      	bne.n	801d48a <_strtod_l+0x84e>
 801d482:	9b06      	ldr	r3, [sp, #24]
 801d484:	691b      	ldr	r3, [r3, #16]
 801d486:	2b01      	cmp	r3, #1
 801d488:	dd57      	ble.n	801d53a <_strtod_l+0x8fe>
 801d48a:	9906      	ldr	r1, [sp, #24]
 801d48c:	2201      	movs	r2, #1
 801d48e:	9805      	ldr	r0, [sp, #20]
 801d490:	f002 ff92 	bl	80203b8 <__lshift>
 801d494:	9907      	ldr	r1, [sp, #28]
 801d496:	9006      	str	r0, [sp, #24]
 801d498:	f002 fffa 	bl	8020490 <__mcmp>
 801d49c:	2800      	cmp	r0, #0
 801d49e:	dd4c      	ble.n	801d53a <_strtod_l+0x8fe>
 801d4a0:	4b2b      	ldr	r3, [pc, #172]	@ (801d550 <_strtod_l+0x914>)
 801d4a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d4a4:	403b      	ands	r3, r7
 801d4a6:	2a00      	cmp	r2, #0
 801d4a8:	d074      	beq.n	801d594 <_strtod_l+0x958>
 801d4aa:	22d6      	movs	r2, #214	@ 0xd6
 801d4ac:	04d2      	lsls	r2, r2, #19
 801d4ae:	4293      	cmp	r3, r2
 801d4b0:	d870      	bhi.n	801d594 <_strtod_l+0x958>
 801d4b2:	22dc      	movs	r2, #220	@ 0xdc
 801d4b4:	0492      	lsls	r2, r2, #18
 801d4b6:	4293      	cmp	r3, r2
 801d4b8:	d800      	bhi.n	801d4bc <_strtod_l+0x880>
 801d4ba:	e695      	b.n	801d1e8 <_strtod_l+0x5ac>
 801d4bc:	0030      	movs	r0, r6
 801d4be:	0039      	movs	r1, r7
 801d4c0:	4b24      	ldr	r3, [pc, #144]	@ (801d554 <_strtod_l+0x918>)
 801d4c2:	2200      	movs	r2, #0
 801d4c4:	f7e5 f8ba 	bl	800263c <__aeabi_dmul>
 801d4c8:	4b21      	ldr	r3, [pc, #132]	@ (801d550 <_strtod_l+0x914>)
 801d4ca:	0006      	movs	r6, r0
 801d4cc:	000f      	movs	r7, r1
 801d4ce:	420b      	tst	r3, r1
 801d4d0:	d000      	beq.n	801d4d4 <_strtod_l+0x898>
 801d4d2:	e5f6      	b.n	801d0c2 <_strtod_l+0x486>
 801d4d4:	2322      	movs	r3, #34	@ 0x22
 801d4d6:	9a05      	ldr	r2, [sp, #20]
 801d4d8:	6013      	str	r3, [r2, #0]
 801d4da:	e5f2      	b.n	801d0c2 <_strtod_l+0x486>
 801d4dc:	970e      	str	r7, [sp, #56]	@ 0x38
 801d4de:	2800      	cmp	r0, #0
 801d4e0:	d175      	bne.n	801d5ce <_strtod_l+0x992>
 801d4e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d4e4:	033b      	lsls	r3, r7, #12
 801d4e6:	0b1b      	lsrs	r3, r3, #12
 801d4e8:	2a00      	cmp	r2, #0
 801d4ea:	d039      	beq.n	801d560 <_strtod_l+0x924>
 801d4ec:	4a1a      	ldr	r2, [pc, #104]	@ (801d558 <_strtod_l+0x91c>)
 801d4ee:	4293      	cmp	r3, r2
 801d4f0:	d138      	bne.n	801d564 <_strtod_l+0x928>
 801d4f2:	2101      	movs	r1, #1
 801d4f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4f6:	4249      	negs	r1, r1
 801d4f8:	0032      	movs	r2, r6
 801d4fa:	0008      	movs	r0, r1
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	d00b      	beq.n	801d518 <_strtod_l+0x8dc>
 801d500:	24d4      	movs	r4, #212	@ 0xd4
 801d502:	4b13      	ldr	r3, [pc, #76]	@ (801d550 <_strtod_l+0x914>)
 801d504:	0008      	movs	r0, r1
 801d506:	403b      	ands	r3, r7
 801d508:	04e4      	lsls	r4, r4, #19
 801d50a:	42a3      	cmp	r3, r4
 801d50c:	d804      	bhi.n	801d518 <_strtod_l+0x8dc>
 801d50e:	306c      	adds	r0, #108	@ 0x6c
 801d510:	0d1b      	lsrs	r3, r3, #20
 801d512:	1ac3      	subs	r3, r0, r3
 801d514:	4099      	lsls	r1, r3
 801d516:	0008      	movs	r0, r1
 801d518:	4282      	cmp	r2, r0
 801d51a:	d123      	bne.n	801d564 <_strtod_l+0x928>
 801d51c:	4b0f      	ldr	r3, [pc, #60]	@ (801d55c <_strtod_l+0x920>)
 801d51e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d520:	4299      	cmp	r1, r3
 801d522:	d102      	bne.n	801d52a <_strtod_l+0x8ee>
 801d524:	3201      	adds	r2, #1
 801d526:	d100      	bne.n	801d52a <_strtod_l+0x8ee>
 801d528:	e5c2      	b.n	801d0b0 <_strtod_l+0x474>
 801d52a:	4b09      	ldr	r3, [pc, #36]	@ (801d550 <_strtod_l+0x914>)
 801d52c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d52e:	2600      	movs	r6, #0
 801d530:	401a      	ands	r2, r3
 801d532:	0013      	movs	r3, r2
 801d534:	2280      	movs	r2, #128	@ 0x80
 801d536:	0352      	lsls	r2, r2, #13
 801d538:	189f      	adds	r7, r3, r2
 801d53a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d1bd      	bne.n	801d4bc <_strtod_l+0x880>
 801d540:	e5bf      	b.n	801d0c2 <_strtod_l+0x486>
 801d542:	46c0      	nop			@ (mov r8, r8)
 801d544:	080238f0 	.word	0x080238f0
 801d548:	fffffc02 	.word	0xfffffc02
 801d54c:	fffffbe2 	.word	0xfffffbe2
 801d550:	7ff00000 	.word	0x7ff00000
 801d554:	39500000 	.word	0x39500000
 801d558:	000fffff 	.word	0x000fffff
 801d55c:	7fefffff 	.word	0x7fefffff
 801d560:	4333      	orrs	r3, r6
 801d562:	d09d      	beq.n	801d4a0 <_strtod_l+0x864>
 801d564:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d566:	2b00      	cmp	r3, #0
 801d568:	d01c      	beq.n	801d5a4 <_strtod_l+0x968>
 801d56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d56c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d56e:	4213      	tst	r3, r2
 801d570:	d0e3      	beq.n	801d53a <_strtod_l+0x8fe>
 801d572:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d574:	0030      	movs	r0, r6
 801d576:	0039      	movs	r1, r7
 801d578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d016      	beq.n	801d5ac <_strtod_l+0x970>
 801d57e:	f7ff fb45 	bl	801cc0c <sulp>
 801d582:	0002      	movs	r2, r0
 801d584:	000b      	movs	r3, r1
 801d586:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d588:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d58a:	f7e4 f8af 	bl	80016ec <__aeabi_dadd>
 801d58e:	0006      	movs	r6, r0
 801d590:	000f      	movs	r7, r1
 801d592:	e7d2      	b.n	801d53a <_strtod_l+0x8fe>
 801d594:	2601      	movs	r6, #1
 801d596:	4a92      	ldr	r2, [pc, #584]	@ (801d7e0 <_strtod_l+0xba4>)
 801d598:	4276      	negs	r6, r6
 801d59a:	189b      	adds	r3, r3, r2
 801d59c:	4a91      	ldr	r2, [pc, #580]	@ (801d7e4 <_strtod_l+0xba8>)
 801d59e:	431a      	orrs	r2, r3
 801d5a0:	0017      	movs	r7, r2
 801d5a2:	e7ca      	b.n	801d53a <_strtod_l+0x8fe>
 801d5a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d5a6:	4233      	tst	r3, r6
 801d5a8:	d0c7      	beq.n	801d53a <_strtod_l+0x8fe>
 801d5aa:	e7e2      	b.n	801d572 <_strtod_l+0x936>
 801d5ac:	f7ff fb2e 	bl	801cc0c <sulp>
 801d5b0:	0002      	movs	r2, r0
 801d5b2:	000b      	movs	r3, r1
 801d5b4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d5b6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d5b8:	f7e5 fb08 	bl	8002bcc <__aeabi_dsub>
 801d5bc:	2200      	movs	r2, #0
 801d5be:	2300      	movs	r3, #0
 801d5c0:	0006      	movs	r6, r0
 801d5c2:	000f      	movs	r7, r1
 801d5c4:	f7e2 ff74 	bl	80004b0 <__aeabi_dcmpeq>
 801d5c8:	2800      	cmp	r0, #0
 801d5ca:	d0b6      	beq.n	801d53a <_strtod_l+0x8fe>
 801d5cc:	e60c      	b.n	801d1e8 <_strtod_l+0x5ac>
 801d5ce:	9907      	ldr	r1, [sp, #28]
 801d5d0:	9806      	ldr	r0, [sp, #24]
 801d5d2:	f003 f8df 	bl	8020794 <__ratio>
 801d5d6:	2380      	movs	r3, #128	@ 0x80
 801d5d8:	2200      	movs	r2, #0
 801d5da:	05db      	lsls	r3, r3, #23
 801d5dc:	0004      	movs	r4, r0
 801d5de:	000d      	movs	r5, r1
 801d5e0:	f7e2 ff76 	bl	80004d0 <__aeabi_dcmple>
 801d5e4:	2800      	cmp	r0, #0
 801d5e6:	d06c      	beq.n	801d6c2 <_strtod_l+0xa86>
 801d5e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d5ea:	2b00      	cmp	r3, #0
 801d5ec:	d177      	bne.n	801d6de <_strtod_l+0xaa2>
 801d5ee:	2e00      	cmp	r6, #0
 801d5f0:	d157      	bne.n	801d6a2 <_strtod_l+0xa66>
 801d5f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5f4:	031b      	lsls	r3, r3, #12
 801d5f6:	d15a      	bne.n	801d6ae <_strtod_l+0xa72>
 801d5f8:	2200      	movs	r2, #0
 801d5fa:	0020      	movs	r0, r4
 801d5fc:	0029      	movs	r1, r5
 801d5fe:	4b7a      	ldr	r3, [pc, #488]	@ (801d7e8 <_strtod_l+0xbac>)
 801d600:	f7e2 ff5c 	bl	80004bc <__aeabi_dcmplt>
 801d604:	2800      	cmp	r0, #0
 801d606:	d159      	bne.n	801d6bc <_strtod_l+0xa80>
 801d608:	0020      	movs	r0, r4
 801d60a:	0029      	movs	r1, r5
 801d60c:	2200      	movs	r2, #0
 801d60e:	4b77      	ldr	r3, [pc, #476]	@ (801d7ec <_strtod_l+0xbb0>)
 801d610:	f7e5 f814 	bl	800263c <__aeabi_dmul>
 801d614:	0004      	movs	r4, r0
 801d616:	000d      	movs	r5, r1
 801d618:	2380      	movs	r3, #128	@ 0x80
 801d61a:	061b      	lsls	r3, r3, #24
 801d61c:	18eb      	adds	r3, r5, r3
 801d61e:	940a      	str	r4, [sp, #40]	@ 0x28
 801d620:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d622:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d626:	9214      	str	r2, [sp, #80]	@ 0x50
 801d628:	9315      	str	r3, [sp, #84]	@ 0x54
 801d62a:	4a71      	ldr	r2, [pc, #452]	@ (801d7f0 <_strtod_l+0xbb4>)
 801d62c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d62e:	4013      	ands	r3, r2
 801d630:	9316      	str	r3, [sp, #88]	@ 0x58
 801d632:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d634:	4b6f      	ldr	r3, [pc, #444]	@ (801d7f4 <_strtod_l+0xbb8>)
 801d636:	429a      	cmp	r2, r3
 801d638:	d000      	beq.n	801d63c <_strtod_l+0xa00>
 801d63a:	e087      	b.n	801d74c <_strtod_l+0xb10>
 801d63c:	4a6e      	ldr	r2, [pc, #440]	@ (801d7f8 <_strtod_l+0xbbc>)
 801d63e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d640:	4694      	mov	ip, r2
 801d642:	4463      	add	r3, ip
 801d644:	001f      	movs	r7, r3
 801d646:	0030      	movs	r0, r6
 801d648:	0019      	movs	r1, r3
 801d64a:	f002 ffd7 	bl	80205fc <__ulp>
 801d64e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d650:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d652:	f7e4 fff3 	bl	800263c <__aeabi_dmul>
 801d656:	0032      	movs	r2, r6
 801d658:	003b      	movs	r3, r7
 801d65a:	f7e4 f847 	bl	80016ec <__aeabi_dadd>
 801d65e:	4a64      	ldr	r2, [pc, #400]	@ (801d7f0 <_strtod_l+0xbb4>)
 801d660:	4b66      	ldr	r3, [pc, #408]	@ (801d7fc <_strtod_l+0xbc0>)
 801d662:	0006      	movs	r6, r0
 801d664:	400a      	ands	r2, r1
 801d666:	429a      	cmp	r2, r3
 801d668:	d940      	bls.n	801d6ec <_strtod_l+0xab0>
 801d66a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d66c:	4a64      	ldr	r2, [pc, #400]	@ (801d800 <_strtod_l+0xbc4>)
 801d66e:	4293      	cmp	r3, r2
 801d670:	d103      	bne.n	801d67a <_strtod_l+0xa3e>
 801d672:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d674:	3301      	adds	r3, #1
 801d676:	d100      	bne.n	801d67a <_strtod_l+0xa3e>
 801d678:	e51a      	b.n	801d0b0 <_strtod_l+0x474>
 801d67a:	2601      	movs	r6, #1
 801d67c:	4f60      	ldr	r7, [pc, #384]	@ (801d800 <_strtod_l+0xbc4>)
 801d67e:	4276      	negs	r6, r6
 801d680:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d682:	9805      	ldr	r0, [sp, #20]
 801d684:	f002 fc6e 	bl	801ff64 <_Bfree>
 801d688:	9908      	ldr	r1, [sp, #32]
 801d68a:	9805      	ldr	r0, [sp, #20]
 801d68c:	f002 fc6a 	bl	801ff64 <_Bfree>
 801d690:	9907      	ldr	r1, [sp, #28]
 801d692:	9805      	ldr	r0, [sp, #20]
 801d694:	f002 fc66 	bl	801ff64 <_Bfree>
 801d698:	9906      	ldr	r1, [sp, #24]
 801d69a:	9805      	ldr	r0, [sp, #20]
 801d69c:	f002 fc62 	bl	801ff64 <_Bfree>
 801d6a0:	e617      	b.n	801d2d2 <_strtod_l+0x696>
 801d6a2:	2e01      	cmp	r6, #1
 801d6a4:	d103      	bne.n	801d6ae <_strtod_l+0xa72>
 801d6a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d100      	bne.n	801d6ae <_strtod_l+0xa72>
 801d6ac:	e59c      	b.n	801d1e8 <_strtod_l+0x5ac>
 801d6ae:	2300      	movs	r3, #0
 801d6b0:	4c54      	ldr	r4, [pc, #336]	@ (801d804 <_strtod_l+0xbc8>)
 801d6b2:	4d4d      	ldr	r5, [pc, #308]	@ (801d7e8 <_strtod_l+0xbac>)
 801d6b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d6b8:	2400      	movs	r4, #0
 801d6ba:	e7b2      	b.n	801d622 <_strtod_l+0x9e6>
 801d6bc:	2400      	movs	r4, #0
 801d6be:	4d4b      	ldr	r5, [pc, #300]	@ (801d7ec <_strtod_l+0xbb0>)
 801d6c0:	e7aa      	b.n	801d618 <_strtod_l+0x9dc>
 801d6c2:	0020      	movs	r0, r4
 801d6c4:	0029      	movs	r1, r5
 801d6c6:	4b49      	ldr	r3, [pc, #292]	@ (801d7ec <_strtod_l+0xbb0>)
 801d6c8:	2200      	movs	r2, #0
 801d6ca:	f7e4 ffb7 	bl	800263c <__aeabi_dmul>
 801d6ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d6d0:	0004      	movs	r4, r0
 801d6d2:	000d      	movs	r5, r1
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d09f      	beq.n	801d618 <_strtod_l+0x9dc>
 801d6d8:	940a      	str	r4, [sp, #40]	@ 0x28
 801d6da:	950b      	str	r5, [sp, #44]	@ 0x2c
 801d6dc:	e7a1      	b.n	801d622 <_strtod_l+0x9e6>
 801d6de:	2300      	movs	r3, #0
 801d6e0:	4c41      	ldr	r4, [pc, #260]	@ (801d7e8 <_strtod_l+0xbac>)
 801d6e2:	0025      	movs	r5, r4
 801d6e4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d6e8:	001c      	movs	r4, r3
 801d6ea:	e79a      	b.n	801d622 <_strtod_l+0x9e6>
 801d6ec:	23d4      	movs	r3, #212	@ 0xd4
 801d6ee:	049b      	lsls	r3, r3, #18
 801d6f0:	18cf      	adds	r7, r1, r3
 801d6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6f4:	9710      	str	r7, [sp, #64]	@ 0x40
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d1c2      	bne.n	801d680 <_strtod_l+0xa44>
 801d6fa:	4b3d      	ldr	r3, [pc, #244]	@ (801d7f0 <_strtod_l+0xbb4>)
 801d6fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d6fe:	403b      	ands	r3, r7
 801d700:	429a      	cmp	r2, r3
 801d702:	d1bd      	bne.n	801d680 <_strtod_l+0xa44>
 801d704:	0020      	movs	r0, r4
 801d706:	0029      	movs	r1, r5
 801d708:	f7e2 ffbe 	bl	8000688 <__aeabi_d2lz>
 801d70c:	f7e2 fff6 	bl	80006fc <__aeabi_l2d>
 801d710:	0002      	movs	r2, r0
 801d712:	000b      	movs	r3, r1
 801d714:	0020      	movs	r0, r4
 801d716:	0029      	movs	r1, r5
 801d718:	f7e5 fa58 	bl	8002bcc <__aeabi_dsub>
 801d71c:	033c      	lsls	r4, r7, #12
 801d71e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d720:	0b24      	lsrs	r4, r4, #12
 801d722:	4334      	orrs	r4, r6
 801d724:	900e      	str	r0, [sp, #56]	@ 0x38
 801d726:	910f      	str	r1, [sp, #60]	@ 0x3c
 801d728:	4a37      	ldr	r2, [pc, #220]	@ (801d808 <_strtod_l+0xbcc>)
 801d72a:	431c      	orrs	r4, r3
 801d72c:	d052      	beq.n	801d7d4 <_strtod_l+0xb98>
 801d72e:	4b37      	ldr	r3, [pc, #220]	@ (801d80c <_strtod_l+0xbd0>)
 801d730:	f7e2 fec4 	bl	80004bc <__aeabi_dcmplt>
 801d734:	2800      	cmp	r0, #0
 801d736:	d000      	beq.n	801d73a <_strtod_l+0xafe>
 801d738:	e4c3      	b.n	801d0c2 <_strtod_l+0x486>
 801d73a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d73c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d73e:	4a34      	ldr	r2, [pc, #208]	@ (801d810 <_strtod_l+0xbd4>)
 801d740:	4b2a      	ldr	r3, [pc, #168]	@ (801d7ec <_strtod_l+0xbb0>)
 801d742:	f7e2 fecf 	bl	80004e4 <__aeabi_dcmpgt>
 801d746:	2800      	cmp	r0, #0
 801d748:	d09a      	beq.n	801d680 <_strtod_l+0xa44>
 801d74a:	e4ba      	b.n	801d0c2 <_strtod_l+0x486>
 801d74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d02a      	beq.n	801d7a8 <_strtod_l+0xb6c>
 801d752:	23d4      	movs	r3, #212	@ 0xd4
 801d754:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d756:	04db      	lsls	r3, r3, #19
 801d758:	429a      	cmp	r2, r3
 801d75a:	d825      	bhi.n	801d7a8 <_strtod_l+0xb6c>
 801d75c:	0020      	movs	r0, r4
 801d75e:	0029      	movs	r1, r5
 801d760:	4a2c      	ldr	r2, [pc, #176]	@ (801d814 <_strtod_l+0xbd8>)
 801d762:	4b2d      	ldr	r3, [pc, #180]	@ (801d818 <_strtod_l+0xbdc>)
 801d764:	f7e2 feb4 	bl	80004d0 <__aeabi_dcmple>
 801d768:	2800      	cmp	r0, #0
 801d76a:	d016      	beq.n	801d79a <_strtod_l+0xb5e>
 801d76c:	0020      	movs	r0, r4
 801d76e:	0029      	movs	r1, r5
 801d770:	f7e2 ff6c 	bl	800064c <__aeabi_d2uiz>
 801d774:	2800      	cmp	r0, #0
 801d776:	d100      	bne.n	801d77a <_strtod_l+0xb3e>
 801d778:	3001      	adds	r0, #1
 801d77a:	f7e5 fe4f 	bl	800341c <__aeabi_ui2d>
 801d77e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d780:	0004      	movs	r4, r0
 801d782:	000d      	movs	r5, r1
 801d784:	2b00      	cmp	r3, #0
 801d786:	d122      	bne.n	801d7ce <_strtod_l+0xb92>
 801d788:	2380      	movs	r3, #128	@ 0x80
 801d78a:	061b      	lsls	r3, r3, #24
 801d78c:	18cb      	adds	r3, r1, r3
 801d78e:	9018      	str	r0, [sp, #96]	@ 0x60
 801d790:	9319      	str	r3, [sp, #100]	@ 0x64
 801d792:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d794:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d796:	9214      	str	r2, [sp, #80]	@ 0x50
 801d798:	9315      	str	r3, [sp, #84]	@ 0x54
 801d79a:	22d6      	movs	r2, #214	@ 0xd6
 801d79c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d79e:	04d2      	lsls	r2, r2, #19
 801d7a0:	189b      	adds	r3, r3, r2
 801d7a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d7a4:	1a9b      	subs	r3, r3, r2
 801d7a6:	9315      	str	r3, [sp, #84]	@ 0x54
 801d7a8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d7aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d7ac:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801d7ae:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801d7b0:	f002 ff24 	bl	80205fc <__ulp>
 801d7b4:	0002      	movs	r2, r0
 801d7b6:	000b      	movs	r3, r1
 801d7b8:	0030      	movs	r0, r6
 801d7ba:	0039      	movs	r1, r7
 801d7bc:	f7e4 ff3e 	bl	800263c <__aeabi_dmul>
 801d7c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d7c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d7c4:	f7e3 ff92 	bl	80016ec <__aeabi_dadd>
 801d7c8:	0006      	movs	r6, r0
 801d7ca:	000f      	movs	r7, r1
 801d7cc:	e791      	b.n	801d6f2 <_strtod_l+0xab6>
 801d7ce:	9418      	str	r4, [sp, #96]	@ 0x60
 801d7d0:	9519      	str	r5, [sp, #100]	@ 0x64
 801d7d2:	e7de      	b.n	801d792 <_strtod_l+0xb56>
 801d7d4:	4b11      	ldr	r3, [pc, #68]	@ (801d81c <_strtod_l+0xbe0>)
 801d7d6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d7d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d7da:	f7e2 fe6f 	bl	80004bc <__aeabi_dcmplt>
 801d7de:	e7b2      	b.n	801d746 <_strtod_l+0xb0a>
 801d7e0:	fff00000 	.word	0xfff00000
 801d7e4:	000fffff 	.word	0x000fffff
 801d7e8:	3ff00000 	.word	0x3ff00000
 801d7ec:	3fe00000 	.word	0x3fe00000
 801d7f0:	7ff00000 	.word	0x7ff00000
 801d7f4:	7fe00000 	.word	0x7fe00000
 801d7f8:	fcb00000 	.word	0xfcb00000
 801d7fc:	7c9fffff 	.word	0x7c9fffff
 801d800:	7fefffff 	.word	0x7fefffff
 801d804:	bff00000 	.word	0xbff00000
 801d808:	94a03595 	.word	0x94a03595
 801d80c:	3fdfffff 	.word	0x3fdfffff
 801d810:	35afe535 	.word	0x35afe535
 801d814:	ffc00000 	.word	0xffc00000
 801d818:	41dfffff 	.word	0x41dfffff
 801d81c:	3fcfffff 	.word	0x3fcfffff

0801d820 <strtod>:
 801d820:	b510      	push	{r4, lr}
 801d822:	4c04      	ldr	r4, [pc, #16]	@ (801d834 <strtod+0x14>)
 801d824:	000a      	movs	r2, r1
 801d826:	0001      	movs	r1, r0
 801d828:	4b03      	ldr	r3, [pc, #12]	@ (801d838 <strtod+0x18>)
 801d82a:	6820      	ldr	r0, [r4, #0]
 801d82c:	f7ff fa06 	bl	801cc3c <_strtod_l>
 801d830:	bd10      	pop	{r4, pc}
 801d832:	46c0      	nop			@ (mov r8, r8)
 801d834:	200003cc 	.word	0x200003cc
 801d838:	20000260 	.word	0x20000260

0801d83c <_strtol_l.constprop.0>:
 801d83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d83e:	b085      	sub	sp, #20
 801d840:	0017      	movs	r7, r2
 801d842:	001e      	movs	r6, r3
 801d844:	9003      	str	r0, [sp, #12]
 801d846:	9101      	str	r1, [sp, #4]
 801d848:	2b24      	cmp	r3, #36	@ 0x24
 801d84a:	d844      	bhi.n	801d8d6 <_strtol_l.constprop.0+0x9a>
 801d84c:	000c      	movs	r4, r1
 801d84e:	2b01      	cmp	r3, #1
 801d850:	d041      	beq.n	801d8d6 <_strtol_l.constprop.0+0x9a>
 801d852:	4b3d      	ldr	r3, [pc, #244]	@ (801d948 <_strtol_l.constprop.0+0x10c>)
 801d854:	2208      	movs	r2, #8
 801d856:	469c      	mov	ip, r3
 801d858:	0023      	movs	r3, r4
 801d85a:	4661      	mov	r1, ip
 801d85c:	781d      	ldrb	r5, [r3, #0]
 801d85e:	3401      	adds	r4, #1
 801d860:	5d48      	ldrb	r0, [r1, r5]
 801d862:	0001      	movs	r1, r0
 801d864:	4011      	ands	r1, r2
 801d866:	4210      	tst	r0, r2
 801d868:	d1f6      	bne.n	801d858 <_strtol_l.constprop.0+0x1c>
 801d86a:	2d2d      	cmp	r5, #45	@ 0x2d
 801d86c:	d13a      	bne.n	801d8e4 <_strtol_l.constprop.0+0xa8>
 801d86e:	7825      	ldrb	r5, [r4, #0]
 801d870:	1c9c      	adds	r4, r3, #2
 801d872:	2301      	movs	r3, #1
 801d874:	9300      	str	r3, [sp, #0]
 801d876:	2210      	movs	r2, #16
 801d878:	0033      	movs	r3, r6
 801d87a:	4393      	bics	r3, r2
 801d87c:	d109      	bne.n	801d892 <_strtol_l.constprop.0+0x56>
 801d87e:	2d30      	cmp	r5, #48	@ 0x30
 801d880:	d136      	bne.n	801d8f0 <_strtol_l.constprop.0+0xb4>
 801d882:	2120      	movs	r1, #32
 801d884:	7823      	ldrb	r3, [r4, #0]
 801d886:	438b      	bics	r3, r1
 801d888:	2b58      	cmp	r3, #88	@ 0x58
 801d88a:	d131      	bne.n	801d8f0 <_strtol_l.constprop.0+0xb4>
 801d88c:	0016      	movs	r6, r2
 801d88e:	7865      	ldrb	r5, [r4, #1]
 801d890:	3402      	adds	r4, #2
 801d892:	4a2e      	ldr	r2, [pc, #184]	@ (801d94c <_strtol_l.constprop.0+0x110>)
 801d894:	9b00      	ldr	r3, [sp, #0]
 801d896:	4694      	mov	ip, r2
 801d898:	4463      	add	r3, ip
 801d89a:	0031      	movs	r1, r6
 801d89c:	0018      	movs	r0, r3
 801d89e:	9302      	str	r3, [sp, #8]
 801d8a0:	f7e2 fd06 	bl	80002b0 <__aeabi_uidivmod>
 801d8a4:	2200      	movs	r2, #0
 801d8a6:	4684      	mov	ip, r0
 801d8a8:	0010      	movs	r0, r2
 801d8aa:	002b      	movs	r3, r5
 801d8ac:	3b30      	subs	r3, #48	@ 0x30
 801d8ae:	2b09      	cmp	r3, #9
 801d8b0:	d825      	bhi.n	801d8fe <_strtol_l.constprop.0+0xc2>
 801d8b2:	001d      	movs	r5, r3
 801d8b4:	42ae      	cmp	r6, r5
 801d8b6:	dd31      	ble.n	801d91c <_strtol_l.constprop.0+0xe0>
 801d8b8:	1c53      	adds	r3, r2, #1
 801d8ba:	d009      	beq.n	801d8d0 <_strtol_l.constprop.0+0x94>
 801d8bc:	2201      	movs	r2, #1
 801d8be:	4252      	negs	r2, r2
 801d8c0:	4584      	cmp	ip, r0
 801d8c2:	d305      	bcc.n	801d8d0 <_strtol_l.constprop.0+0x94>
 801d8c4:	d101      	bne.n	801d8ca <_strtol_l.constprop.0+0x8e>
 801d8c6:	42a9      	cmp	r1, r5
 801d8c8:	db25      	blt.n	801d916 <_strtol_l.constprop.0+0xda>
 801d8ca:	2201      	movs	r2, #1
 801d8cc:	4370      	muls	r0, r6
 801d8ce:	1828      	adds	r0, r5, r0
 801d8d0:	7825      	ldrb	r5, [r4, #0]
 801d8d2:	3401      	adds	r4, #1
 801d8d4:	e7e9      	b.n	801d8aa <_strtol_l.constprop.0+0x6e>
 801d8d6:	f000 ffc5 	bl	801e864 <__errno>
 801d8da:	2316      	movs	r3, #22
 801d8dc:	6003      	str	r3, [r0, #0]
 801d8de:	2000      	movs	r0, #0
 801d8e0:	b005      	add	sp, #20
 801d8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8e4:	9100      	str	r1, [sp, #0]
 801d8e6:	2d2b      	cmp	r5, #43	@ 0x2b
 801d8e8:	d1c5      	bne.n	801d876 <_strtol_l.constprop.0+0x3a>
 801d8ea:	7825      	ldrb	r5, [r4, #0]
 801d8ec:	1c9c      	adds	r4, r3, #2
 801d8ee:	e7c2      	b.n	801d876 <_strtol_l.constprop.0+0x3a>
 801d8f0:	2e00      	cmp	r6, #0
 801d8f2:	d1ce      	bne.n	801d892 <_strtol_l.constprop.0+0x56>
 801d8f4:	3608      	adds	r6, #8
 801d8f6:	2d30      	cmp	r5, #48	@ 0x30
 801d8f8:	d0cb      	beq.n	801d892 <_strtol_l.constprop.0+0x56>
 801d8fa:	3602      	adds	r6, #2
 801d8fc:	e7c9      	b.n	801d892 <_strtol_l.constprop.0+0x56>
 801d8fe:	002b      	movs	r3, r5
 801d900:	3b41      	subs	r3, #65	@ 0x41
 801d902:	2b19      	cmp	r3, #25
 801d904:	d801      	bhi.n	801d90a <_strtol_l.constprop.0+0xce>
 801d906:	3d37      	subs	r5, #55	@ 0x37
 801d908:	e7d4      	b.n	801d8b4 <_strtol_l.constprop.0+0x78>
 801d90a:	002b      	movs	r3, r5
 801d90c:	3b61      	subs	r3, #97	@ 0x61
 801d90e:	2b19      	cmp	r3, #25
 801d910:	d804      	bhi.n	801d91c <_strtol_l.constprop.0+0xe0>
 801d912:	3d57      	subs	r5, #87	@ 0x57
 801d914:	e7ce      	b.n	801d8b4 <_strtol_l.constprop.0+0x78>
 801d916:	2201      	movs	r2, #1
 801d918:	4252      	negs	r2, r2
 801d91a:	e7d9      	b.n	801d8d0 <_strtol_l.constprop.0+0x94>
 801d91c:	1c53      	adds	r3, r2, #1
 801d91e:	d108      	bne.n	801d932 <_strtol_l.constprop.0+0xf6>
 801d920:	2322      	movs	r3, #34	@ 0x22
 801d922:	9a03      	ldr	r2, [sp, #12]
 801d924:	9802      	ldr	r0, [sp, #8]
 801d926:	6013      	str	r3, [r2, #0]
 801d928:	2f00      	cmp	r7, #0
 801d92a:	d0d9      	beq.n	801d8e0 <_strtol_l.constprop.0+0xa4>
 801d92c:	1e63      	subs	r3, r4, #1
 801d92e:	9301      	str	r3, [sp, #4]
 801d930:	e007      	b.n	801d942 <_strtol_l.constprop.0+0x106>
 801d932:	9b00      	ldr	r3, [sp, #0]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d000      	beq.n	801d93a <_strtol_l.constprop.0+0xfe>
 801d938:	4240      	negs	r0, r0
 801d93a:	2f00      	cmp	r7, #0
 801d93c:	d0d0      	beq.n	801d8e0 <_strtol_l.constprop.0+0xa4>
 801d93e:	2a00      	cmp	r2, #0
 801d940:	d1f4      	bne.n	801d92c <_strtol_l.constprop.0+0xf0>
 801d942:	9b01      	ldr	r3, [sp, #4]
 801d944:	603b      	str	r3, [r7, #0]
 801d946:	e7cb      	b.n	801d8e0 <_strtol_l.constprop.0+0xa4>
 801d948:	08023919 	.word	0x08023919
 801d94c:	7fffffff 	.word	0x7fffffff

0801d950 <strtol>:
 801d950:	b510      	push	{r4, lr}
 801d952:	4c04      	ldr	r4, [pc, #16]	@ (801d964 <strtol+0x14>)
 801d954:	0013      	movs	r3, r2
 801d956:	000a      	movs	r2, r1
 801d958:	0001      	movs	r1, r0
 801d95a:	6820      	ldr	r0, [r4, #0]
 801d95c:	f7ff ff6e 	bl	801d83c <_strtol_l.constprop.0>
 801d960:	bd10      	pop	{r4, pc}
 801d962:	46c0      	nop			@ (mov r8, r8)
 801d964:	200003cc 	.word	0x200003cc

0801d968 <__cvt>:
 801d968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d96a:	001f      	movs	r7, r3
 801d96c:	2300      	movs	r3, #0
 801d96e:	0016      	movs	r6, r2
 801d970:	b08b      	sub	sp, #44	@ 0x2c
 801d972:	429f      	cmp	r7, r3
 801d974:	da04      	bge.n	801d980 <__cvt+0x18>
 801d976:	2180      	movs	r1, #128	@ 0x80
 801d978:	0609      	lsls	r1, r1, #24
 801d97a:	187b      	adds	r3, r7, r1
 801d97c:	001f      	movs	r7, r3
 801d97e:	232d      	movs	r3, #45	@ 0x2d
 801d980:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801d982:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d984:	7013      	strb	r3, [r2, #0]
 801d986:	2320      	movs	r3, #32
 801d988:	2203      	movs	r2, #3
 801d98a:	439d      	bics	r5, r3
 801d98c:	2d46      	cmp	r5, #70	@ 0x46
 801d98e:	d007      	beq.n	801d9a0 <__cvt+0x38>
 801d990:	002b      	movs	r3, r5
 801d992:	3b45      	subs	r3, #69	@ 0x45
 801d994:	4259      	negs	r1, r3
 801d996:	414b      	adcs	r3, r1
 801d998:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d99a:	3a01      	subs	r2, #1
 801d99c:	18cb      	adds	r3, r1, r3
 801d99e:	9310      	str	r3, [sp, #64]	@ 0x40
 801d9a0:	ab09      	add	r3, sp, #36	@ 0x24
 801d9a2:	9304      	str	r3, [sp, #16]
 801d9a4:	ab08      	add	r3, sp, #32
 801d9a6:	9303      	str	r3, [sp, #12]
 801d9a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d9aa:	9200      	str	r2, [sp, #0]
 801d9ac:	9302      	str	r3, [sp, #8]
 801d9ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9b0:	0032      	movs	r2, r6
 801d9b2:	9301      	str	r3, [sp, #4]
 801d9b4:	003b      	movs	r3, r7
 801d9b6:	f001 f82b 	bl	801ea10 <_dtoa_r>
 801d9ba:	0004      	movs	r4, r0
 801d9bc:	2d47      	cmp	r5, #71	@ 0x47
 801d9be:	d11b      	bne.n	801d9f8 <__cvt+0x90>
 801d9c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d9c2:	07db      	lsls	r3, r3, #31
 801d9c4:	d511      	bpl.n	801d9ea <__cvt+0x82>
 801d9c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9c8:	18c3      	adds	r3, r0, r3
 801d9ca:	9307      	str	r3, [sp, #28]
 801d9cc:	2200      	movs	r2, #0
 801d9ce:	2300      	movs	r3, #0
 801d9d0:	0030      	movs	r0, r6
 801d9d2:	0039      	movs	r1, r7
 801d9d4:	f7e2 fd6c 	bl	80004b0 <__aeabi_dcmpeq>
 801d9d8:	2800      	cmp	r0, #0
 801d9da:	d001      	beq.n	801d9e0 <__cvt+0x78>
 801d9dc:	9b07      	ldr	r3, [sp, #28]
 801d9de:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9e0:	2230      	movs	r2, #48	@ 0x30
 801d9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9e4:	9907      	ldr	r1, [sp, #28]
 801d9e6:	428b      	cmp	r3, r1
 801d9e8:	d320      	bcc.n	801da2c <__cvt+0xc4>
 801d9ea:	0020      	movs	r0, r4
 801d9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d9f0:	1b1b      	subs	r3, r3, r4
 801d9f2:	6013      	str	r3, [r2, #0]
 801d9f4:	b00b      	add	sp, #44	@ 0x2c
 801d9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d9fa:	18c3      	adds	r3, r0, r3
 801d9fc:	9307      	str	r3, [sp, #28]
 801d9fe:	2d46      	cmp	r5, #70	@ 0x46
 801da00:	d1e4      	bne.n	801d9cc <__cvt+0x64>
 801da02:	7803      	ldrb	r3, [r0, #0]
 801da04:	2b30      	cmp	r3, #48	@ 0x30
 801da06:	d10c      	bne.n	801da22 <__cvt+0xba>
 801da08:	2200      	movs	r2, #0
 801da0a:	2300      	movs	r3, #0
 801da0c:	0030      	movs	r0, r6
 801da0e:	0039      	movs	r1, r7
 801da10:	f7e2 fd4e 	bl	80004b0 <__aeabi_dcmpeq>
 801da14:	2800      	cmp	r0, #0
 801da16:	d104      	bne.n	801da22 <__cvt+0xba>
 801da18:	2301      	movs	r3, #1
 801da1a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801da1c:	1a9b      	subs	r3, r3, r2
 801da1e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801da20:	6013      	str	r3, [r2, #0]
 801da22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801da24:	9a07      	ldr	r2, [sp, #28]
 801da26:	681b      	ldr	r3, [r3, #0]
 801da28:	18d3      	adds	r3, r2, r3
 801da2a:	e7ce      	b.n	801d9ca <__cvt+0x62>
 801da2c:	1c59      	adds	r1, r3, #1
 801da2e:	9109      	str	r1, [sp, #36]	@ 0x24
 801da30:	701a      	strb	r2, [r3, #0]
 801da32:	e7d6      	b.n	801d9e2 <__cvt+0x7a>

0801da34 <__exponent>:
 801da34:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da36:	232b      	movs	r3, #43	@ 0x2b
 801da38:	0005      	movs	r5, r0
 801da3a:	000c      	movs	r4, r1
 801da3c:	b085      	sub	sp, #20
 801da3e:	7002      	strb	r2, [r0, #0]
 801da40:	2900      	cmp	r1, #0
 801da42:	da01      	bge.n	801da48 <__exponent+0x14>
 801da44:	424c      	negs	r4, r1
 801da46:	3302      	adds	r3, #2
 801da48:	706b      	strb	r3, [r5, #1]
 801da4a:	2c09      	cmp	r4, #9
 801da4c:	dd2c      	ble.n	801daa8 <__exponent+0x74>
 801da4e:	ab02      	add	r3, sp, #8
 801da50:	1dde      	adds	r6, r3, #7
 801da52:	0020      	movs	r0, r4
 801da54:	210a      	movs	r1, #10
 801da56:	f7e2 fd15 	bl	8000484 <__aeabi_idivmod>
 801da5a:	0037      	movs	r7, r6
 801da5c:	3130      	adds	r1, #48	@ 0x30
 801da5e:	3e01      	subs	r6, #1
 801da60:	0020      	movs	r0, r4
 801da62:	7031      	strb	r1, [r6, #0]
 801da64:	210a      	movs	r1, #10
 801da66:	9401      	str	r4, [sp, #4]
 801da68:	f7e2 fc26 	bl	80002b8 <__divsi3>
 801da6c:	9b01      	ldr	r3, [sp, #4]
 801da6e:	0004      	movs	r4, r0
 801da70:	2b63      	cmp	r3, #99	@ 0x63
 801da72:	dcee      	bgt.n	801da52 <__exponent+0x1e>
 801da74:	1eba      	subs	r2, r7, #2
 801da76:	1ca8      	adds	r0, r5, #2
 801da78:	0001      	movs	r1, r0
 801da7a:	0013      	movs	r3, r2
 801da7c:	3430      	adds	r4, #48	@ 0x30
 801da7e:	7014      	strb	r4, [r2, #0]
 801da80:	ac02      	add	r4, sp, #8
 801da82:	3407      	adds	r4, #7
 801da84:	429c      	cmp	r4, r3
 801da86:	d80a      	bhi.n	801da9e <__exponent+0x6a>
 801da88:	2300      	movs	r3, #0
 801da8a:	42a2      	cmp	r2, r4
 801da8c:	d803      	bhi.n	801da96 <__exponent+0x62>
 801da8e:	3309      	adds	r3, #9
 801da90:	aa02      	add	r2, sp, #8
 801da92:	189b      	adds	r3, r3, r2
 801da94:	1bdb      	subs	r3, r3, r7
 801da96:	18c0      	adds	r0, r0, r3
 801da98:	1b40      	subs	r0, r0, r5
 801da9a:	b005      	add	sp, #20
 801da9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da9e:	781c      	ldrb	r4, [r3, #0]
 801daa0:	3301      	adds	r3, #1
 801daa2:	700c      	strb	r4, [r1, #0]
 801daa4:	3101      	adds	r1, #1
 801daa6:	e7eb      	b.n	801da80 <__exponent+0x4c>
 801daa8:	2330      	movs	r3, #48	@ 0x30
 801daaa:	18e4      	adds	r4, r4, r3
 801daac:	70ab      	strb	r3, [r5, #2]
 801daae:	1d28      	adds	r0, r5, #4
 801dab0:	70ec      	strb	r4, [r5, #3]
 801dab2:	e7f1      	b.n	801da98 <__exponent+0x64>

0801dab4 <_printf_float>:
 801dab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dab6:	b097      	sub	sp, #92	@ 0x5c
 801dab8:	000d      	movs	r5, r1
 801daba:	920a      	str	r2, [sp, #40]	@ 0x28
 801dabc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801dabe:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dac0:	9009      	str	r0, [sp, #36]	@ 0x24
 801dac2:	f000 fe7d 	bl	801e7c0 <_localeconv_r>
 801dac6:	6803      	ldr	r3, [r0, #0]
 801dac8:	0018      	movs	r0, r3
 801daca:	930d      	str	r3, [sp, #52]	@ 0x34
 801dacc:	f7e2 fb4e 	bl	800016c <strlen>
 801dad0:	2300      	movs	r3, #0
 801dad2:	900f      	str	r0, [sp, #60]	@ 0x3c
 801dad4:	9314      	str	r3, [sp, #80]	@ 0x50
 801dad6:	7e2b      	ldrb	r3, [r5, #24]
 801dad8:	2207      	movs	r2, #7
 801dada:	930c      	str	r3, [sp, #48]	@ 0x30
 801dadc:	682b      	ldr	r3, [r5, #0]
 801dade:	930e      	str	r3, [sp, #56]	@ 0x38
 801dae0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dae2:	6823      	ldr	r3, [r4, #0]
 801dae4:	05c9      	lsls	r1, r1, #23
 801dae6:	d545      	bpl.n	801db74 <_printf_float+0xc0>
 801dae8:	189b      	adds	r3, r3, r2
 801daea:	4393      	bics	r3, r2
 801daec:	001a      	movs	r2, r3
 801daee:	3208      	adds	r2, #8
 801daf0:	6022      	str	r2, [r4, #0]
 801daf2:	2201      	movs	r2, #1
 801daf4:	681e      	ldr	r6, [r3, #0]
 801daf6:	685f      	ldr	r7, [r3, #4]
 801daf8:	007b      	lsls	r3, r7, #1
 801dafa:	085b      	lsrs	r3, r3, #1
 801dafc:	9311      	str	r3, [sp, #68]	@ 0x44
 801dafe:	9610      	str	r6, [sp, #64]	@ 0x40
 801db00:	64ae      	str	r6, [r5, #72]	@ 0x48
 801db02:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801db04:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801db06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801db08:	4ba7      	ldr	r3, [pc, #668]	@ (801dda8 <_printf_float+0x2f4>)
 801db0a:	4252      	negs	r2, r2
 801db0c:	f7e5 fbfa 	bl	8003304 <__aeabi_dcmpun>
 801db10:	2800      	cmp	r0, #0
 801db12:	d131      	bne.n	801db78 <_printf_float+0xc4>
 801db14:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801db16:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801db18:	2201      	movs	r2, #1
 801db1a:	4ba3      	ldr	r3, [pc, #652]	@ (801dda8 <_printf_float+0x2f4>)
 801db1c:	4252      	negs	r2, r2
 801db1e:	f7e2 fcd7 	bl	80004d0 <__aeabi_dcmple>
 801db22:	2800      	cmp	r0, #0
 801db24:	d128      	bne.n	801db78 <_printf_float+0xc4>
 801db26:	2200      	movs	r2, #0
 801db28:	2300      	movs	r3, #0
 801db2a:	0030      	movs	r0, r6
 801db2c:	0039      	movs	r1, r7
 801db2e:	f7e2 fcc5 	bl	80004bc <__aeabi_dcmplt>
 801db32:	2800      	cmp	r0, #0
 801db34:	d003      	beq.n	801db3e <_printf_float+0x8a>
 801db36:	002b      	movs	r3, r5
 801db38:	222d      	movs	r2, #45	@ 0x2d
 801db3a:	3343      	adds	r3, #67	@ 0x43
 801db3c:	701a      	strb	r2, [r3, #0]
 801db3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db40:	4f9a      	ldr	r7, [pc, #616]	@ (801ddac <_printf_float+0x2f8>)
 801db42:	2b47      	cmp	r3, #71	@ 0x47
 801db44:	d900      	bls.n	801db48 <_printf_float+0x94>
 801db46:	4f9a      	ldr	r7, [pc, #616]	@ (801ddb0 <_printf_float+0x2fc>)
 801db48:	2303      	movs	r3, #3
 801db4a:	2400      	movs	r4, #0
 801db4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801db4e:	612b      	str	r3, [r5, #16]
 801db50:	3301      	adds	r3, #1
 801db52:	439a      	bics	r2, r3
 801db54:	602a      	str	r2, [r5, #0]
 801db56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db58:	0029      	movs	r1, r5
 801db5a:	9300      	str	r3, [sp, #0]
 801db5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801db5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801db60:	aa15      	add	r2, sp, #84	@ 0x54
 801db62:	f000 f9e5 	bl	801df30 <_printf_common>
 801db66:	3001      	adds	r0, #1
 801db68:	d000      	beq.n	801db6c <_printf_float+0xb8>
 801db6a:	e09f      	b.n	801dcac <_printf_float+0x1f8>
 801db6c:	2001      	movs	r0, #1
 801db6e:	4240      	negs	r0, r0
 801db70:	b017      	add	sp, #92	@ 0x5c
 801db72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db74:	3307      	adds	r3, #7
 801db76:	e7b8      	b.n	801daea <_printf_float+0x36>
 801db78:	0032      	movs	r2, r6
 801db7a:	003b      	movs	r3, r7
 801db7c:	0030      	movs	r0, r6
 801db7e:	0039      	movs	r1, r7
 801db80:	f7e5 fbc0 	bl	8003304 <__aeabi_dcmpun>
 801db84:	2800      	cmp	r0, #0
 801db86:	d00b      	beq.n	801dba0 <_printf_float+0xec>
 801db88:	2f00      	cmp	r7, #0
 801db8a:	da03      	bge.n	801db94 <_printf_float+0xe0>
 801db8c:	002b      	movs	r3, r5
 801db8e:	222d      	movs	r2, #45	@ 0x2d
 801db90:	3343      	adds	r3, #67	@ 0x43
 801db92:	701a      	strb	r2, [r3, #0]
 801db94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db96:	4f87      	ldr	r7, [pc, #540]	@ (801ddb4 <_printf_float+0x300>)
 801db98:	2b47      	cmp	r3, #71	@ 0x47
 801db9a:	d9d5      	bls.n	801db48 <_printf_float+0x94>
 801db9c:	4f86      	ldr	r7, [pc, #536]	@ (801ddb8 <_printf_float+0x304>)
 801db9e:	e7d3      	b.n	801db48 <_printf_float+0x94>
 801dba0:	2220      	movs	r2, #32
 801dba2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801dba4:	686b      	ldr	r3, [r5, #4]
 801dba6:	4394      	bics	r4, r2
 801dba8:	1c5a      	adds	r2, r3, #1
 801dbaa:	d146      	bne.n	801dc3a <_printf_float+0x186>
 801dbac:	3307      	adds	r3, #7
 801dbae:	606b      	str	r3, [r5, #4]
 801dbb0:	2380      	movs	r3, #128	@ 0x80
 801dbb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dbb4:	00db      	lsls	r3, r3, #3
 801dbb6:	4313      	orrs	r3, r2
 801dbb8:	2200      	movs	r2, #0
 801dbba:	602b      	str	r3, [r5, #0]
 801dbbc:	9206      	str	r2, [sp, #24]
 801dbbe:	aa14      	add	r2, sp, #80	@ 0x50
 801dbc0:	9205      	str	r2, [sp, #20]
 801dbc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dbc4:	a90a      	add	r1, sp, #40	@ 0x28
 801dbc6:	9204      	str	r2, [sp, #16]
 801dbc8:	aa13      	add	r2, sp, #76	@ 0x4c
 801dbca:	9203      	str	r2, [sp, #12]
 801dbcc:	2223      	movs	r2, #35	@ 0x23
 801dbce:	1852      	adds	r2, r2, r1
 801dbd0:	9202      	str	r2, [sp, #8]
 801dbd2:	9301      	str	r3, [sp, #4]
 801dbd4:	686b      	ldr	r3, [r5, #4]
 801dbd6:	0032      	movs	r2, r6
 801dbd8:	9300      	str	r3, [sp, #0]
 801dbda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dbdc:	003b      	movs	r3, r7
 801dbde:	f7ff fec3 	bl	801d968 <__cvt>
 801dbe2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dbe4:	0007      	movs	r7, r0
 801dbe6:	2c47      	cmp	r4, #71	@ 0x47
 801dbe8:	d12d      	bne.n	801dc46 <_printf_float+0x192>
 801dbea:	1cd3      	adds	r3, r2, #3
 801dbec:	db02      	blt.n	801dbf4 <_printf_float+0x140>
 801dbee:	686b      	ldr	r3, [r5, #4]
 801dbf0:	429a      	cmp	r2, r3
 801dbf2:	dd48      	ble.n	801dc86 <_printf_float+0x1d2>
 801dbf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dbf6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801dbf8:	3b02      	subs	r3, #2
 801dbfa:	b2db      	uxtb	r3, r3
 801dbfc:	930c      	str	r3, [sp, #48]	@ 0x30
 801dbfe:	0028      	movs	r0, r5
 801dc00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dc02:	3901      	subs	r1, #1
 801dc04:	3050      	adds	r0, #80	@ 0x50
 801dc06:	9113      	str	r1, [sp, #76]	@ 0x4c
 801dc08:	f7ff ff14 	bl	801da34 <__exponent>
 801dc0c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801dc0e:	0004      	movs	r4, r0
 801dc10:	1813      	adds	r3, r2, r0
 801dc12:	612b      	str	r3, [r5, #16]
 801dc14:	2a01      	cmp	r2, #1
 801dc16:	dc02      	bgt.n	801dc1e <_printf_float+0x16a>
 801dc18:	682a      	ldr	r2, [r5, #0]
 801dc1a:	07d2      	lsls	r2, r2, #31
 801dc1c:	d501      	bpl.n	801dc22 <_printf_float+0x16e>
 801dc1e:	3301      	adds	r3, #1
 801dc20:	612b      	str	r3, [r5, #16]
 801dc22:	2323      	movs	r3, #35	@ 0x23
 801dc24:	aa0a      	add	r2, sp, #40	@ 0x28
 801dc26:	189b      	adds	r3, r3, r2
 801dc28:	781b      	ldrb	r3, [r3, #0]
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	d100      	bne.n	801dc30 <_printf_float+0x17c>
 801dc2e:	e792      	b.n	801db56 <_printf_float+0xa2>
 801dc30:	002b      	movs	r3, r5
 801dc32:	222d      	movs	r2, #45	@ 0x2d
 801dc34:	3343      	adds	r3, #67	@ 0x43
 801dc36:	701a      	strb	r2, [r3, #0]
 801dc38:	e78d      	b.n	801db56 <_printf_float+0xa2>
 801dc3a:	2c47      	cmp	r4, #71	@ 0x47
 801dc3c:	d1b8      	bne.n	801dbb0 <_printf_float+0xfc>
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d1b6      	bne.n	801dbb0 <_printf_float+0xfc>
 801dc42:	3301      	adds	r3, #1
 801dc44:	e7b3      	b.n	801dbae <_printf_float+0xfa>
 801dc46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc48:	0011      	movs	r1, r2
 801dc4a:	2b65      	cmp	r3, #101	@ 0x65
 801dc4c:	d9d7      	bls.n	801dbfe <_printf_float+0x14a>
 801dc4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc50:	2b66      	cmp	r3, #102	@ 0x66
 801dc52:	d11a      	bne.n	801dc8a <_printf_float+0x1d6>
 801dc54:	686b      	ldr	r3, [r5, #4]
 801dc56:	2a00      	cmp	r2, #0
 801dc58:	dd09      	ble.n	801dc6e <_printf_float+0x1ba>
 801dc5a:	612a      	str	r2, [r5, #16]
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d102      	bne.n	801dc66 <_printf_float+0x1b2>
 801dc60:	6829      	ldr	r1, [r5, #0]
 801dc62:	07c9      	lsls	r1, r1, #31
 801dc64:	d50b      	bpl.n	801dc7e <_printf_float+0x1ca>
 801dc66:	3301      	adds	r3, #1
 801dc68:	189b      	adds	r3, r3, r2
 801dc6a:	612b      	str	r3, [r5, #16]
 801dc6c:	e007      	b.n	801dc7e <_printf_float+0x1ca>
 801dc6e:	2b00      	cmp	r3, #0
 801dc70:	d103      	bne.n	801dc7a <_printf_float+0x1c6>
 801dc72:	2201      	movs	r2, #1
 801dc74:	6829      	ldr	r1, [r5, #0]
 801dc76:	4211      	tst	r1, r2
 801dc78:	d000      	beq.n	801dc7c <_printf_float+0x1c8>
 801dc7a:	1c9a      	adds	r2, r3, #2
 801dc7c:	612a      	str	r2, [r5, #16]
 801dc7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dc80:	2400      	movs	r4, #0
 801dc82:	65ab      	str	r3, [r5, #88]	@ 0x58
 801dc84:	e7cd      	b.n	801dc22 <_printf_float+0x16e>
 801dc86:	2367      	movs	r3, #103	@ 0x67
 801dc88:	930c      	str	r3, [sp, #48]	@ 0x30
 801dc8a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801dc8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801dc8e:	4299      	cmp	r1, r3
 801dc90:	db06      	blt.n	801dca0 <_printf_float+0x1ec>
 801dc92:	682b      	ldr	r3, [r5, #0]
 801dc94:	6129      	str	r1, [r5, #16]
 801dc96:	07db      	lsls	r3, r3, #31
 801dc98:	d5f1      	bpl.n	801dc7e <_printf_float+0x1ca>
 801dc9a:	3101      	adds	r1, #1
 801dc9c:	6129      	str	r1, [r5, #16]
 801dc9e:	e7ee      	b.n	801dc7e <_printf_float+0x1ca>
 801dca0:	2201      	movs	r2, #1
 801dca2:	2900      	cmp	r1, #0
 801dca4:	dce0      	bgt.n	801dc68 <_printf_float+0x1b4>
 801dca6:	1892      	adds	r2, r2, r2
 801dca8:	1a52      	subs	r2, r2, r1
 801dcaa:	e7dd      	b.n	801dc68 <_printf_float+0x1b4>
 801dcac:	682a      	ldr	r2, [r5, #0]
 801dcae:	0553      	lsls	r3, r2, #21
 801dcb0:	d408      	bmi.n	801dcc4 <_printf_float+0x210>
 801dcb2:	692b      	ldr	r3, [r5, #16]
 801dcb4:	003a      	movs	r2, r7
 801dcb6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dcb8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dcba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dcbc:	47a0      	blx	r4
 801dcbe:	3001      	adds	r0, #1
 801dcc0:	d129      	bne.n	801dd16 <_printf_float+0x262>
 801dcc2:	e753      	b.n	801db6c <_printf_float+0xb8>
 801dcc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dcc6:	2b65      	cmp	r3, #101	@ 0x65
 801dcc8:	d800      	bhi.n	801dccc <_printf_float+0x218>
 801dcca:	e0da      	b.n	801de82 <_printf_float+0x3ce>
 801dccc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801dcce:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801dcd0:	2200      	movs	r2, #0
 801dcd2:	2300      	movs	r3, #0
 801dcd4:	f7e2 fbec 	bl	80004b0 <__aeabi_dcmpeq>
 801dcd8:	2800      	cmp	r0, #0
 801dcda:	d033      	beq.n	801dd44 <_printf_float+0x290>
 801dcdc:	2301      	movs	r3, #1
 801dcde:	4a37      	ldr	r2, [pc, #220]	@ (801ddbc <_printf_float+0x308>)
 801dce0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dce2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dce4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dce6:	47a0      	blx	r4
 801dce8:	3001      	adds	r0, #1
 801dcea:	d100      	bne.n	801dcee <_printf_float+0x23a>
 801dcec:	e73e      	b.n	801db6c <_printf_float+0xb8>
 801dcee:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801dcf0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dcf2:	42b3      	cmp	r3, r6
 801dcf4:	db02      	blt.n	801dcfc <_printf_float+0x248>
 801dcf6:	682b      	ldr	r3, [r5, #0]
 801dcf8:	07db      	lsls	r3, r3, #31
 801dcfa:	d50c      	bpl.n	801dd16 <_printf_float+0x262>
 801dcfc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dcfe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dd02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd04:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd06:	47a0      	blx	r4
 801dd08:	2400      	movs	r4, #0
 801dd0a:	3001      	adds	r0, #1
 801dd0c:	d100      	bne.n	801dd10 <_printf_float+0x25c>
 801dd0e:	e72d      	b.n	801db6c <_printf_float+0xb8>
 801dd10:	1e73      	subs	r3, r6, #1
 801dd12:	42a3      	cmp	r3, r4
 801dd14:	dc0a      	bgt.n	801dd2c <_printf_float+0x278>
 801dd16:	682b      	ldr	r3, [r5, #0]
 801dd18:	079b      	lsls	r3, r3, #30
 801dd1a:	d500      	bpl.n	801dd1e <_printf_float+0x26a>
 801dd1c:	e105      	b.n	801df2a <_printf_float+0x476>
 801dd1e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dd20:	68e8      	ldr	r0, [r5, #12]
 801dd22:	4298      	cmp	r0, r3
 801dd24:	db00      	blt.n	801dd28 <_printf_float+0x274>
 801dd26:	e723      	b.n	801db70 <_printf_float+0xbc>
 801dd28:	0018      	movs	r0, r3
 801dd2a:	e721      	b.n	801db70 <_printf_float+0xbc>
 801dd2c:	002a      	movs	r2, r5
 801dd2e:	2301      	movs	r3, #1
 801dd30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd34:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dd36:	321a      	adds	r2, #26
 801dd38:	47b8      	blx	r7
 801dd3a:	3001      	adds	r0, #1
 801dd3c:	d100      	bne.n	801dd40 <_printf_float+0x28c>
 801dd3e:	e715      	b.n	801db6c <_printf_float+0xb8>
 801dd40:	3401      	adds	r4, #1
 801dd42:	e7e5      	b.n	801dd10 <_printf_float+0x25c>
 801dd44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	dc3a      	bgt.n	801ddc0 <_printf_float+0x30c>
 801dd4a:	2301      	movs	r3, #1
 801dd4c:	4a1b      	ldr	r2, [pc, #108]	@ (801ddbc <_printf_float+0x308>)
 801dd4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd54:	47a0      	blx	r4
 801dd56:	3001      	adds	r0, #1
 801dd58:	d100      	bne.n	801dd5c <_printf_float+0x2a8>
 801dd5a:	e707      	b.n	801db6c <_printf_float+0xb8>
 801dd5c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801dd5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd60:	4333      	orrs	r3, r6
 801dd62:	d102      	bne.n	801dd6a <_printf_float+0x2b6>
 801dd64:	682b      	ldr	r3, [r5, #0]
 801dd66:	07db      	lsls	r3, r3, #31
 801dd68:	d5d5      	bpl.n	801dd16 <_printf_float+0x262>
 801dd6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dd6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd70:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd72:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd74:	47a0      	blx	r4
 801dd76:	2300      	movs	r3, #0
 801dd78:	3001      	adds	r0, #1
 801dd7a:	d100      	bne.n	801dd7e <_printf_float+0x2ca>
 801dd7c:	e6f6      	b.n	801db6c <_printf_float+0xb8>
 801dd7e:	930c      	str	r3, [sp, #48]	@ 0x30
 801dd80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dd82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dd84:	425b      	negs	r3, r3
 801dd86:	4293      	cmp	r3, r2
 801dd88:	dc01      	bgt.n	801dd8e <_printf_float+0x2da>
 801dd8a:	0033      	movs	r3, r6
 801dd8c:	e792      	b.n	801dcb4 <_printf_float+0x200>
 801dd8e:	002a      	movs	r2, r5
 801dd90:	2301      	movs	r3, #1
 801dd92:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dd94:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dd96:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801dd98:	321a      	adds	r2, #26
 801dd9a:	47a0      	blx	r4
 801dd9c:	3001      	adds	r0, #1
 801dd9e:	d100      	bne.n	801dda2 <_printf_float+0x2ee>
 801dda0:	e6e4      	b.n	801db6c <_printf_float+0xb8>
 801dda2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dda4:	3301      	adds	r3, #1
 801dda6:	e7ea      	b.n	801dd7e <_printf_float+0x2ca>
 801dda8:	7fefffff 	.word	0x7fefffff
 801ddac:	08023a19 	.word	0x08023a19
 801ddb0:	08023a1d 	.word	0x08023a1d
 801ddb4:	08023a21 	.word	0x08023a21
 801ddb8:	08023a25 	.word	0x08023a25
 801ddbc:	08023a29 	.word	0x08023a29
 801ddc0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ddc2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801ddc4:	930c      	str	r3, [sp, #48]	@ 0x30
 801ddc6:	429e      	cmp	r6, r3
 801ddc8:	dd00      	ble.n	801ddcc <_printf_float+0x318>
 801ddca:	001e      	movs	r6, r3
 801ddcc:	2e00      	cmp	r6, #0
 801ddce:	dc31      	bgt.n	801de34 <_printf_float+0x380>
 801ddd0:	43f3      	mvns	r3, r6
 801ddd2:	2400      	movs	r4, #0
 801ddd4:	17db      	asrs	r3, r3, #31
 801ddd6:	4033      	ands	r3, r6
 801ddd8:	930e      	str	r3, [sp, #56]	@ 0x38
 801ddda:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801dddc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ddde:	1af3      	subs	r3, r6, r3
 801dde0:	42a3      	cmp	r3, r4
 801dde2:	dc30      	bgt.n	801de46 <_printf_float+0x392>
 801dde4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dde6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801dde8:	429a      	cmp	r2, r3
 801ddea:	dc38      	bgt.n	801de5e <_printf_float+0x3aa>
 801ddec:	682b      	ldr	r3, [r5, #0]
 801ddee:	07db      	lsls	r3, r3, #31
 801ddf0:	d435      	bmi.n	801de5e <_printf_float+0x3aa>
 801ddf2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ddf4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ddf6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ddf8:	1b9b      	subs	r3, r3, r6
 801ddfa:	1b14      	subs	r4, r2, r4
 801ddfc:	429c      	cmp	r4, r3
 801ddfe:	dd00      	ble.n	801de02 <_printf_float+0x34e>
 801de00:	001c      	movs	r4, r3
 801de02:	2c00      	cmp	r4, #0
 801de04:	dc34      	bgt.n	801de70 <_printf_float+0x3bc>
 801de06:	43e3      	mvns	r3, r4
 801de08:	2600      	movs	r6, #0
 801de0a:	17db      	asrs	r3, r3, #31
 801de0c:	401c      	ands	r4, r3
 801de0e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801de10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801de12:	1ad3      	subs	r3, r2, r3
 801de14:	1b1b      	subs	r3, r3, r4
 801de16:	42b3      	cmp	r3, r6
 801de18:	dc00      	bgt.n	801de1c <_printf_float+0x368>
 801de1a:	e77c      	b.n	801dd16 <_printf_float+0x262>
 801de1c:	002a      	movs	r2, r5
 801de1e:	2301      	movs	r3, #1
 801de20:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de24:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801de26:	321a      	adds	r2, #26
 801de28:	47b8      	blx	r7
 801de2a:	3001      	adds	r0, #1
 801de2c:	d100      	bne.n	801de30 <_printf_float+0x37c>
 801de2e:	e69d      	b.n	801db6c <_printf_float+0xb8>
 801de30:	3601      	adds	r6, #1
 801de32:	e7ec      	b.n	801de0e <_printf_float+0x35a>
 801de34:	0033      	movs	r3, r6
 801de36:	003a      	movs	r2, r7
 801de38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801de3e:	47a0      	blx	r4
 801de40:	3001      	adds	r0, #1
 801de42:	d1c5      	bne.n	801ddd0 <_printf_float+0x31c>
 801de44:	e692      	b.n	801db6c <_printf_float+0xb8>
 801de46:	002a      	movs	r2, r5
 801de48:	2301      	movs	r3, #1
 801de4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de4e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de50:	321a      	adds	r2, #26
 801de52:	47b0      	blx	r6
 801de54:	3001      	adds	r0, #1
 801de56:	d100      	bne.n	801de5a <_printf_float+0x3a6>
 801de58:	e688      	b.n	801db6c <_printf_float+0xb8>
 801de5a:	3401      	adds	r4, #1
 801de5c:	e7bd      	b.n	801ddda <_printf_float+0x326>
 801de5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801de60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801de62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de64:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de66:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801de68:	47a0      	blx	r4
 801de6a:	3001      	adds	r0, #1
 801de6c:	d1c1      	bne.n	801ddf2 <_printf_float+0x33e>
 801de6e:	e67d      	b.n	801db6c <_printf_float+0xb8>
 801de70:	19ba      	adds	r2, r7, r6
 801de72:	0023      	movs	r3, r4
 801de74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de7a:	47b0      	blx	r6
 801de7c:	3001      	adds	r0, #1
 801de7e:	d1c2      	bne.n	801de06 <_printf_float+0x352>
 801de80:	e674      	b.n	801db6c <_printf_float+0xb8>
 801de82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801de84:	930c      	str	r3, [sp, #48]	@ 0x30
 801de86:	2b01      	cmp	r3, #1
 801de88:	dc02      	bgt.n	801de90 <_printf_float+0x3dc>
 801de8a:	2301      	movs	r3, #1
 801de8c:	421a      	tst	r2, r3
 801de8e:	d039      	beq.n	801df04 <_printf_float+0x450>
 801de90:	2301      	movs	r3, #1
 801de92:	003a      	movs	r2, r7
 801de94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801de96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801de98:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801de9a:	47b0      	blx	r6
 801de9c:	3001      	adds	r0, #1
 801de9e:	d100      	bne.n	801dea2 <_printf_float+0x3ee>
 801dea0:	e664      	b.n	801db6c <_printf_float+0xb8>
 801dea2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801dea6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dea8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801deaa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801deac:	47b0      	blx	r6
 801deae:	3001      	adds	r0, #1
 801deb0:	d100      	bne.n	801deb4 <_printf_float+0x400>
 801deb2:	e65b      	b.n	801db6c <_printf_float+0xb8>
 801deb4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801deb6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801deb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801deba:	2200      	movs	r2, #0
 801debc:	3b01      	subs	r3, #1
 801debe:	930c      	str	r3, [sp, #48]	@ 0x30
 801dec0:	2300      	movs	r3, #0
 801dec2:	f7e2 faf5 	bl	80004b0 <__aeabi_dcmpeq>
 801dec6:	2800      	cmp	r0, #0
 801dec8:	d11a      	bne.n	801df00 <_printf_float+0x44c>
 801deca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801decc:	1c7a      	adds	r2, r7, #1
 801dece:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ded0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ded2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801ded4:	47b0      	blx	r6
 801ded6:	3001      	adds	r0, #1
 801ded8:	d10e      	bne.n	801def8 <_printf_float+0x444>
 801deda:	e647      	b.n	801db6c <_printf_float+0xb8>
 801dedc:	002a      	movs	r2, r5
 801dede:	2301      	movs	r3, #1
 801dee0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801dee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dee4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801dee6:	321a      	adds	r2, #26
 801dee8:	47b8      	blx	r7
 801deea:	3001      	adds	r0, #1
 801deec:	d100      	bne.n	801def0 <_printf_float+0x43c>
 801deee:	e63d      	b.n	801db6c <_printf_float+0xb8>
 801def0:	3601      	adds	r6, #1
 801def2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801def4:	429e      	cmp	r6, r3
 801def6:	dbf1      	blt.n	801dedc <_printf_float+0x428>
 801def8:	002a      	movs	r2, r5
 801defa:	0023      	movs	r3, r4
 801defc:	3250      	adds	r2, #80	@ 0x50
 801defe:	e6da      	b.n	801dcb6 <_printf_float+0x202>
 801df00:	2600      	movs	r6, #0
 801df02:	e7f6      	b.n	801def2 <_printf_float+0x43e>
 801df04:	003a      	movs	r2, r7
 801df06:	e7e2      	b.n	801dece <_printf_float+0x41a>
 801df08:	002a      	movs	r2, r5
 801df0a:	2301      	movs	r3, #1
 801df0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801df0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801df10:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801df12:	3219      	adds	r2, #25
 801df14:	47b0      	blx	r6
 801df16:	3001      	adds	r0, #1
 801df18:	d100      	bne.n	801df1c <_printf_float+0x468>
 801df1a:	e627      	b.n	801db6c <_printf_float+0xb8>
 801df1c:	3401      	adds	r4, #1
 801df1e:	68eb      	ldr	r3, [r5, #12]
 801df20:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801df22:	1a9b      	subs	r3, r3, r2
 801df24:	42a3      	cmp	r3, r4
 801df26:	dcef      	bgt.n	801df08 <_printf_float+0x454>
 801df28:	e6f9      	b.n	801dd1e <_printf_float+0x26a>
 801df2a:	2400      	movs	r4, #0
 801df2c:	e7f7      	b.n	801df1e <_printf_float+0x46a>
 801df2e:	46c0      	nop			@ (mov r8, r8)

0801df30 <_printf_common>:
 801df30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801df32:	0016      	movs	r6, r2
 801df34:	9301      	str	r3, [sp, #4]
 801df36:	688a      	ldr	r2, [r1, #8]
 801df38:	690b      	ldr	r3, [r1, #16]
 801df3a:	000c      	movs	r4, r1
 801df3c:	9000      	str	r0, [sp, #0]
 801df3e:	4293      	cmp	r3, r2
 801df40:	da00      	bge.n	801df44 <_printf_common+0x14>
 801df42:	0013      	movs	r3, r2
 801df44:	0022      	movs	r2, r4
 801df46:	6033      	str	r3, [r6, #0]
 801df48:	3243      	adds	r2, #67	@ 0x43
 801df4a:	7812      	ldrb	r2, [r2, #0]
 801df4c:	2a00      	cmp	r2, #0
 801df4e:	d001      	beq.n	801df54 <_printf_common+0x24>
 801df50:	3301      	adds	r3, #1
 801df52:	6033      	str	r3, [r6, #0]
 801df54:	6823      	ldr	r3, [r4, #0]
 801df56:	069b      	lsls	r3, r3, #26
 801df58:	d502      	bpl.n	801df60 <_printf_common+0x30>
 801df5a:	6833      	ldr	r3, [r6, #0]
 801df5c:	3302      	adds	r3, #2
 801df5e:	6033      	str	r3, [r6, #0]
 801df60:	6822      	ldr	r2, [r4, #0]
 801df62:	2306      	movs	r3, #6
 801df64:	0015      	movs	r5, r2
 801df66:	401d      	ands	r5, r3
 801df68:	421a      	tst	r2, r3
 801df6a:	d027      	beq.n	801dfbc <_printf_common+0x8c>
 801df6c:	0023      	movs	r3, r4
 801df6e:	3343      	adds	r3, #67	@ 0x43
 801df70:	781b      	ldrb	r3, [r3, #0]
 801df72:	1e5a      	subs	r2, r3, #1
 801df74:	4193      	sbcs	r3, r2
 801df76:	6822      	ldr	r2, [r4, #0]
 801df78:	0692      	lsls	r2, r2, #26
 801df7a:	d430      	bmi.n	801dfde <_printf_common+0xae>
 801df7c:	0022      	movs	r2, r4
 801df7e:	9901      	ldr	r1, [sp, #4]
 801df80:	9800      	ldr	r0, [sp, #0]
 801df82:	9d08      	ldr	r5, [sp, #32]
 801df84:	3243      	adds	r2, #67	@ 0x43
 801df86:	47a8      	blx	r5
 801df88:	3001      	adds	r0, #1
 801df8a:	d025      	beq.n	801dfd8 <_printf_common+0xa8>
 801df8c:	2206      	movs	r2, #6
 801df8e:	6823      	ldr	r3, [r4, #0]
 801df90:	2500      	movs	r5, #0
 801df92:	4013      	ands	r3, r2
 801df94:	2b04      	cmp	r3, #4
 801df96:	d105      	bne.n	801dfa4 <_printf_common+0x74>
 801df98:	6833      	ldr	r3, [r6, #0]
 801df9a:	68e5      	ldr	r5, [r4, #12]
 801df9c:	1aed      	subs	r5, r5, r3
 801df9e:	43eb      	mvns	r3, r5
 801dfa0:	17db      	asrs	r3, r3, #31
 801dfa2:	401d      	ands	r5, r3
 801dfa4:	68a3      	ldr	r3, [r4, #8]
 801dfa6:	6922      	ldr	r2, [r4, #16]
 801dfa8:	4293      	cmp	r3, r2
 801dfaa:	dd01      	ble.n	801dfb0 <_printf_common+0x80>
 801dfac:	1a9b      	subs	r3, r3, r2
 801dfae:	18ed      	adds	r5, r5, r3
 801dfb0:	2600      	movs	r6, #0
 801dfb2:	42b5      	cmp	r5, r6
 801dfb4:	d120      	bne.n	801dff8 <_printf_common+0xc8>
 801dfb6:	2000      	movs	r0, #0
 801dfb8:	e010      	b.n	801dfdc <_printf_common+0xac>
 801dfba:	3501      	adds	r5, #1
 801dfbc:	68e3      	ldr	r3, [r4, #12]
 801dfbe:	6832      	ldr	r2, [r6, #0]
 801dfc0:	1a9b      	subs	r3, r3, r2
 801dfc2:	42ab      	cmp	r3, r5
 801dfc4:	ddd2      	ble.n	801df6c <_printf_common+0x3c>
 801dfc6:	0022      	movs	r2, r4
 801dfc8:	2301      	movs	r3, #1
 801dfca:	9901      	ldr	r1, [sp, #4]
 801dfcc:	9800      	ldr	r0, [sp, #0]
 801dfce:	9f08      	ldr	r7, [sp, #32]
 801dfd0:	3219      	adds	r2, #25
 801dfd2:	47b8      	blx	r7
 801dfd4:	3001      	adds	r0, #1
 801dfd6:	d1f0      	bne.n	801dfba <_printf_common+0x8a>
 801dfd8:	2001      	movs	r0, #1
 801dfda:	4240      	negs	r0, r0
 801dfdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dfde:	2030      	movs	r0, #48	@ 0x30
 801dfe0:	18e1      	adds	r1, r4, r3
 801dfe2:	3143      	adds	r1, #67	@ 0x43
 801dfe4:	7008      	strb	r0, [r1, #0]
 801dfe6:	0021      	movs	r1, r4
 801dfe8:	1c5a      	adds	r2, r3, #1
 801dfea:	3145      	adds	r1, #69	@ 0x45
 801dfec:	7809      	ldrb	r1, [r1, #0]
 801dfee:	18a2      	adds	r2, r4, r2
 801dff0:	3243      	adds	r2, #67	@ 0x43
 801dff2:	3302      	adds	r3, #2
 801dff4:	7011      	strb	r1, [r2, #0]
 801dff6:	e7c1      	b.n	801df7c <_printf_common+0x4c>
 801dff8:	0022      	movs	r2, r4
 801dffa:	2301      	movs	r3, #1
 801dffc:	9901      	ldr	r1, [sp, #4]
 801dffe:	9800      	ldr	r0, [sp, #0]
 801e000:	9f08      	ldr	r7, [sp, #32]
 801e002:	321a      	adds	r2, #26
 801e004:	47b8      	blx	r7
 801e006:	3001      	adds	r0, #1
 801e008:	d0e6      	beq.n	801dfd8 <_printf_common+0xa8>
 801e00a:	3601      	adds	r6, #1
 801e00c:	e7d1      	b.n	801dfb2 <_printf_common+0x82>
	...

0801e010 <_printf_i>:
 801e010:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e012:	b08b      	sub	sp, #44	@ 0x2c
 801e014:	9206      	str	r2, [sp, #24]
 801e016:	000a      	movs	r2, r1
 801e018:	3243      	adds	r2, #67	@ 0x43
 801e01a:	9307      	str	r3, [sp, #28]
 801e01c:	9005      	str	r0, [sp, #20]
 801e01e:	9203      	str	r2, [sp, #12]
 801e020:	7e0a      	ldrb	r2, [r1, #24]
 801e022:	000c      	movs	r4, r1
 801e024:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e026:	2a78      	cmp	r2, #120	@ 0x78
 801e028:	d809      	bhi.n	801e03e <_printf_i+0x2e>
 801e02a:	2a62      	cmp	r2, #98	@ 0x62
 801e02c:	d80b      	bhi.n	801e046 <_printf_i+0x36>
 801e02e:	2a00      	cmp	r2, #0
 801e030:	d100      	bne.n	801e034 <_printf_i+0x24>
 801e032:	e0bc      	b.n	801e1ae <_printf_i+0x19e>
 801e034:	497b      	ldr	r1, [pc, #492]	@ (801e224 <_printf_i+0x214>)
 801e036:	9104      	str	r1, [sp, #16]
 801e038:	2a58      	cmp	r2, #88	@ 0x58
 801e03a:	d100      	bne.n	801e03e <_printf_i+0x2e>
 801e03c:	e090      	b.n	801e160 <_printf_i+0x150>
 801e03e:	0025      	movs	r5, r4
 801e040:	3542      	adds	r5, #66	@ 0x42
 801e042:	702a      	strb	r2, [r5, #0]
 801e044:	e022      	b.n	801e08c <_printf_i+0x7c>
 801e046:	0010      	movs	r0, r2
 801e048:	3863      	subs	r0, #99	@ 0x63
 801e04a:	2815      	cmp	r0, #21
 801e04c:	d8f7      	bhi.n	801e03e <_printf_i+0x2e>
 801e04e:	f7e2 f89f 	bl	8000190 <__gnu_thumb1_case_shi>
 801e052:	0016      	.short	0x0016
 801e054:	fff6001f 	.word	0xfff6001f
 801e058:	fff6fff6 	.word	0xfff6fff6
 801e05c:	001ffff6 	.word	0x001ffff6
 801e060:	fff6fff6 	.word	0xfff6fff6
 801e064:	fff6fff6 	.word	0xfff6fff6
 801e068:	003600a1 	.word	0x003600a1
 801e06c:	fff60080 	.word	0xfff60080
 801e070:	00b2fff6 	.word	0x00b2fff6
 801e074:	0036fff6 	.word	0x0036fff6
 801e078:	fff6fff6 	.word	0xfff6fff6
 801e07c:	0084      	.short	0x0084
 801e07e:	0025      	movs	r5, r4
 801e080:	681a      	ldr	r2, [r3, #0]
 801e082:	3542      	adds	r5, #66	@ 0x42
 801e084:	1d11      	adds	r1, r2, #4
 801e086:	6019      	str	r1, [r3, #0]
 801e088:	6813      	ldr	r3, [r2, #0]
 801e08a:	702b      	strb	r3, [r5, #0]
 801e08c:	2301      	movs	r3, #1
 801e08e:	e0a0      	b.n	801e1d2 <_printf_i+0x1c2>
 801e090:	6818      	ldr	r0, [r3, #0]
 801e092:	6809      	ldr	r1, [r1, #0]
 801e094:	1d02      	adds	r2, r0, #4
 801e096:	060d      	lsls	r5, r1, #24
 801e098:	d50b      	bpl.n	801e0b2 <_printf_i+0xa2>
 801e09a:	6806      	ldr	r6, [r0, #0]
 801e09c:	601a      	str	r2, [r3, #0]
 801e09e:	2e00      	cmp	r6, #0
 801e0a0:	da03      	bge.n	801e0aa <_printf_i+0x9a>
 801e0a2:	232d      	movs	r3, #45	@ 0x2d
 801e0a4:	9a03      	ldr	r2, [sp, #12]
 801e0a6:	4276      	negs	r6, r6
 801e0a8:	7013      	strb	r3, [r2, #0]
 801e0aa:	4b5e      	ldr	r3, [pc, #376]	@ (801e224 <_printf_i+0x214>)
 801e0ac:	270a      	movs	r7, #10
 801e0ae:	9304      	str	r3, [sp, #16]
 801e0b0:	e018      	b.n	801e0e4 <_printf_i+0xd4>
 801e0b2:	6806      	ldr	r6, [r0, #0]
 801e0b4:	601a      	str	r2, [r3, #0]
 801e0b6:	0649      	lsls	r1, r1, #25
 801e0b8:	d5f1      	bpl.n	801e09e <_printf_i+0x8e>
 801e0ba:	b236      	sxth	r6, r6
 801e0bc:	e7ef      	b.n	801e09e <_printf_i+0x8e>
 801e0be:	6808      	ldr	r0, [r1, #0]
 801e0c0:	6819      	ldr	r1, [r3, #0]
 801e0c2:	c940      	ldmia	r1!, {r6}
 801e0c4:	0605      	lsls	r5, r0, #24
 801e0c6:	d402      	bmi.n	801e0ce <_printf_i+0xbe>
 801e0c8:	0640      	lsls	r0, r0, #25
 801e0ca:	d500      	bpl.n	801e0ce <_printf_i+0xbe>
 801e0cc:	b2b6      	uxth	r6, r6
 801e0ce:	6019      	str	r1, [r3, #0]
 801e0d0:	4b54      	ldr	r3, [pc, #336]	@ (801e224 <_printf_i+0x214>)
 801e0d2:	270a      	movs	r7, #10
 801e0d4:	9304      	str	r3, [sp, #16]
 801e0d6:	2a6f      	cmp	r2, #111	@ 0x6f
 801e0d8:	d100      	bne.n	801e0dc <_printf_i+0xcc>
 801e0da:	3f02      	subs	r7, #2
 801e0dc:	0023      	movs	r3, r4
 801e0de:	2200      	movs	r2, #0
 801e0e0:	3343      	adds	r3, #67	@ 0x43
 801e0e2:	701a      	strb	r2, [r3, #0]
 801e0e4:	6863      	ldr	r3, [r4, #4]
 801e0e6:	60a3      	str	r3, [r4, #8]
 801e0e8:	2b00      	cmp	r3, #0
 801e0ea:	db03      	blt.n	801e0f4 <_printf_i+0xe4>
 801e0ec:	2104      	movs	r1, #4
 801e0ee:	6822      	ldr	r2, [r4, #0]
 801e0f0:	438a      	bics	r2, r1
 801e0f2:	6022      	str	r2, [r4, #0]
 801e0f4:	2e00      	cmp	r6, #0
 801e0f6:	d102      	bne.n	801e0fe <_printf_i+0xee>
 801e0f8:	9d03      	ldr	r5, [sp, #12]
 801e0fa:	2b00      	cmp	r3, #0
 801e0fc:	d00c      	beq.n	801e118 <_printf_i+0x108>
 801e0fe:	9d03      	ldr	r5, [sp, #12]
 801e100:	0030      	movs	r0, r6
 801e102:	0039      	movs	r1, r7
 801e104:	f7e2 f8d4 	bl	80002b0 <__aeabi_uidivmod>
 801e108:	9b04      	ldr	r3, [sp, #16]
 801e10a:	3d01      	subs	r5, #1
 801e10c:	5c5b      	ldrb	r3, [r3, r1]
 801e10e:	702b      	strb	r3, [r5, #0]
 801e110:	0033      	movs	r3, r6
 801e112:	0006      	movs	r6, r0
 801e114:	429f      	cmp	r7, r3
 801e116:	d9f3      	bls.n	801e100 <_printf_i+0xf0>
 801e118:	2f08      	cmp	r7, #8
 801e11a:	d109      	bne.n	801e130 <_printf_i+0x120>
 801e11c:	6823      	ldr	r3, [r4, #0]
 801e11e:	07db      	lsls	r3, r3, #31
 801e120:	d506      	bpl.n	801e130 <_printf_i+0x120>
 801e122:	6862      	ldr	r2, [r4, #4]
 801e124:	6923      	ldr	r3, [r4, #16]
 801e126:	429a      	cmp	r2, r3
 801e128:	dc02      	bgt.n	801e130 <_printf_i+0x120>
 801e12a:	2330      	movs	r3, #48	@ 0x30
 801e12c:	3d01      	subs	r5, #1
 801e12e:	702b      	strb	r3, [r5, #0]
 801e130:	9b03      	ldr	r3, [sp, #12]
 801e132:	1b5b      	subs	r3, r3, r5
 801e134:	6123      	str	r3, [r4, #16]
 801e136:	9b07      	ldr	r3, [sp, #28]
 801e138:	0021      	movs	r1, r4
 801e13a:	9300      	str	r3, [sp, #0]
 801e13c:	9805      	ldr	r0, [sp, #20]
 801e13e:	9b06      	ldr	r3, [sp, #24]
 801e140:	aa09      	add	r2, sp, #36	@ 0x24
 801e142:	f7ff fef5 	bl	801df30 <_printf_common>
 801e146:	3001      	adds	r0, #1
 801e148:	d148      	bne.n	801e1dc <_printf_i+0x1cc>
 801e14a:	2001      	movs	r0, #1
 801e14c:	4240      	negs	r0, r0
 801e14e:	b00b      	add	sp, #44	@ 0x2c
 801e150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e152:	2220      	movs	r2, #32
 801e154:	6809      	ldr	r1, [r1, #0]
 801e156:	430a      	orrs	r2, r1
 801e158:	6022      	str	r2, [r4, #0]
 801e15a:	2278      	movs	r2, #120	@ 0x78
 801e15c:	4932      	ldr	r1, [pc, #200]	@ (801e228 <_printf_i+0x218>)
 801e15e:	9104      	str	r1, [sp, #16]
 801e160:	0021      	movs	r1, r4
 801e162:	3145      	adds	r1, #69	@ 0x45
 801e164:	700a      	strb	r2, [r1, #0]
 801e166:	6819      	ldr	r1, [r3, #0]
 801e168:	6822      	ldr	r2, [r4, #0]
 801e16a:	c940      	ldmia	r1!, {r6}
 801e16c:	0610      	lsls	r0, r2, #24
 801e16e:	d402      	bmi.n	801e176 <_printf_i+0x166>
 801e170:	0650      	lsls	r0, r2, #25
 801e172:	d500      	bpl.n	801e176 <_printf_i+0x166>
 801e174:	b2b6      	uxth	r6, r6
 801e176:	6019      	str	r1, [r3, #0]
 801e178:	07d3      	lsls	r3, r2, #31
 801e17a:	d502      	bpl.n	801e182 <_printf_i+0x172>
 801e17c:	2320      	movs	r3, #32
 801e17e:	4313      	orrs	r3, r2
 801e180:	6023      	str	r3, [r4, #0]
 801e182:	2e00      	cmp	r6, #0
 801e184:	d001      	beq.n	801e18a <_printf_i+0x17a>
 801e186:	2710      	movs	r7, #16
 801e188:	e7a8      	b.n	801e0dc <_printf_i+0xcc>
 801e18a:	2220      	movs	r2, #32
 801e18c:	6823      	ldr	r3, [r4, #0]
 801e18e:	4393      	bics	r3, r2
 801e190:	6023      	str	r3, [r4, #0]
 801e192:	e7f8      	b.n	801e186 <_printf_i+0x176>
 801e194:	681a      	ldr	r2, [r3, #0]
 801e196:	680d      	ldr	r5, [r1, #0]
 801e198:	1d10      	adds	r0, r2, #4
 801e19a:	6949      	ldr	r1, [r1, #20]
 801e19c:	6018      	str	r0, [r3, #0]
 801e19e:	6813      	ldr	r3, [r2, #0]
 801e1a0:	062e      	lsls	r6, r5, #24
 801e1a2:	d501      	bpl.n	801e1a8 <_printf_i+0x198>
 801e1a4:	6019      	str	r1, [r3, #0]
 801e1a6:	e002      	b.n	801e1ae <_printf_i+0x19e>
 801e1a8:	066d      	lsls	r5, r5, #25
 801e1aa:	d5fb      	bpl.n	801e1a4 <_printf_i+0x194>
 801e1ac:	8019      	strh	r1, [r3, #0]
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	9d03      	ldr	r5, [sp, #12]
 801e1b2:	6123      	str	r3, [r4, #16]
 801e1b4:	e7bf      	b.n	801e136 <_printf_i+0x126>
 801e1b6:	681a      	ldr	r2, [r3, #0]
 801e1b8:	1d11      	adds	r1, r2, #4
 801e1ba:	6019      	str	r1, [r3, #0]
 801e1bc:	6815      	ldr	r5, [r2, #0]
 801e1be:	2100      	movs	r1, #0
 801e1c0:	0028      	movs	r0, r5
 801e1c2:	6862      	ldr	r2, [r4, #4]
 801e1c4:	f000 fb7b 	bl	801e8be <memchr>
 801e1c8:	2800      	cmp	r0, #0
 801e1ca:	d001      	beq.n	801e1d0 <_printf_i+0x1c0>
 801e1cc:	1b40      	subs	r0, r0, r5
 801e1ce:	6060      	str	r0, [r4, #4]
 801e1d0:	6863      	ldr	r3, [r4, #4]
 801e1d2:	6123      	str	r3, [r4, #16]
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	9a03      	ldr	r2, [sp, #12]
 801e1d8:	7013      	strb	r3, [r2, #0]
 801e1da:	e7ac      	b.n	801e136 <_printf_i+0x126>
 801e1dc:	002a      	movs	r2, r5
 801e1de:	6923      	ldr	r3, [r4, #16]
 801e1e0:	9906      	ldr	r1, [sp, #24]
 801e1e2:	9805      	ldr	r0, [sp, #20]
 801e1e4:	9d07      	ldr	r5, [sp, #28]
 801e1e6:	47a8      	blx	r5
 801e1e8:	3001      	adds	r0, #1
 801e1ea:	d0ae      	beq.n	801e14a <_printf_i+0x13a>
 801e1ec:	6823      	ldr	r3, [r4, #0]
 801e1ee:	079b      	lsls	r3, r3, #30
 801e1f0:	d415      	bmi.n	801e21e <_printf_i+0x20e>
 801e1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1f4:	68e0      	ldr	r0, [r4, #12]
 801e1f6:	4298      	cmp	r0, r3
 801e1f8:	daa9      	bge.n	801e14e <_printf_i+0x13e>
 801e1fa:	0018      	movs	r0, r3
 801e1fc:	e7a7      	b.n	801e14e <_printf_i+0x13e>
 801e1fe:	0022      	movs	r2, r4
 801e200:	2301      	movs	r3, #1
 801e202:	9906      	ldr	r1, [sp, #24]
 801e204:	9805      	ldr	r0, [sp, #20]
 801e206:	9e07      	ldr	r6, [sp, #28]
 801e208:	3219      	adds	r2, #25
 801e20a:	47b0      	blx	r6
 801e20c:	3001      	adds	r0, #1
 801e20e:	d09c      	beq.n	801e14a <_printf_i+0x13a>
 801e210:	3501      	adds	r5, #1
 801e212:	68e3      	ldr	r3, [r4, #12]
 801e214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e216:	1a9b      	subs	r3, r3, r2
 801e218:	42ab      	cmp	r3, r5
 801e21a:	dcf0      	bgt.n	801e1fe <_printf_i+0x1ee>
 801e21c:	e7e9      	b.n	801e1f2 <_printf_i+0x1e2>
 801e21e:	2500      	movs	r5, #0
 801e220:	e7f7      	b.n	801e212 <_printf_i+0x202>
 801e222:	46c0      	nop			@ (mov r8, r8)
 801e224:	08023a2b 	.word	0x08023a2b
 801e228:	08023a3c 	.word	0x08023a3c

0801e22c <std>:
 801e22c:	2300      	movs	r3, #0
 801e22e:	b510      	push	{r4, lr}
 801e230:	0004      	movs	r4, r0
 801e232:	6003      	str	r3, [r0, #0]
 801e234:	6043      	str	r3, [r0, #4]
 801e236:	6083      	str	r3, [r0, #8]
 801e238:	8181      	strh	r1, [r0, #12]
 801e23a:	6643      	str	r3, [r0, #100]	@ 0x64
 801e23c:	81c2      	strh	r2, [r0, #14]
 801e23e:	6103      	str	r3, [r0, #16]
 801e240:	6143      	str	r3, [r0, #20]
 801e242:	6183      	str	r3, [r0, #24]
 801e244:	0019      	movs	r1, r3
 801e246:	2208      	movs	r2, #8
 801e248:	305c      	adds	r0, #92	@ 0x5c
 801e24a:	f000 fa67 	bl	801e71c <memset>
 801e24e:	4b0b      	ldr	r3, [pc, #44]	@ (801e27c <std+0x50>)
 801e250:	6224      	str	r4, [r4, #32]
 801e252:	6263      	str	r3, [r4, #36]	@ 0x24
 801e254:	4b0a      	ldr	r3, [pc, #40]	@ (801e280 <std+0x54>)
 801e256:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e258:	4b0a      	ldr	r3, [pc, #40]	@ (801e284 <std+0x58>)
 801e25a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e25c:	4b0a      	ldr	r3, [pc, #40]	@ (801e288 <std+0x5c>)
 801e25e:	6323      	str	r3, [r4, #48]	@ 0x30
 801e260:	4b0a      	ldr	r3, [pc, #40]	@ (801e28c <std+0x60>)
 801e262:	429c      	cmp	r4, r3
 801e264:	d005      	beq.n	801e272 <std+0x46>
 801e266:	4b0a      	ldr	r3, [pc, #40]	@ (801e290 <std+0x64>)
 801e268:	429c      	cmp	r4, r3
 801e26a:	d002      	beq.n	801e272 <std+0x46>
 801e26c:	4b09      	ldr	r3, [pc, #36]	@ (801e294 <std+0x68>)
 801e26e:	429c      	cmp	r4, r3
 801e270:	d103      	bne.n	801e27a <std+0x4e>
 801e272:	0020      	movs	r0, r4
 801e274:	3058      	adds	r0, #88	@ 0x58
 801e276:	f000 fb1f 	bl	801e8b8 <__retarget_lock_init_recursive>
 801e27a:	bd10      	pop	{r4, pc}
 801e27c:	0801e4d5 	.word	0x0801e4d5
 801e280:	0801e4fd 	.word	0x0801e4fd
 801e284:	0801e535 	.word	0x0801e535
 801e288:	0801e561 	.word	0x0801e561
 801e28c:	200037b8 	.word	0x200037b8
 801e290:	20003820 	.word	0x20003820
 801e294:	20003888 	.word	0x20003888

0801e298 <stdio_exit_handler>:
 801e298:	b510      	push	{r4, lr}
 801e29a:	4a03      	ldr	r2, [pc, #12]	@ (801e2a8 <stdio_exit_handler+0x10>)
 801e29c:	4903      	ldr	r1, [pc, #12]	@ (801e2ac <stdio_exit_handler+0x14>)
 801e29e:	4804      	ldr	r0, [pc, #16]	@ (801e2b0 <stdio_exit_handler+0x18>)
 801e2a0:	f000 f86c 	bl	801e37c <_fwalk_sglue>
 801e2a4:	bd10      	pop	{r4, pc}
 801e2a6:	46c0      	nop			@ (mov r8, r8)
 801e2a8:	20000254 	.word	0x20000254
 801e2ac:	08020edd 	.word	0x08020edd
 801e2b0:	200003d0 	.word	0x200003d0

0801e2b4 <cleanup_stdio>:
 801e2b4:	6841      	ldr	r1, [r0, #4]
 801e2b6:	4b0b      	ldr	r3, [pc, #44]	@ (801e2e4 <cleanup_stdio+0x30>)
 801e2b8:	b510      	push	{r4, lr}
 801e2ba:	0004      	movs	r4, r0
 801e2bc:	4299      	cmp	r1, r3
 801e2be:	d001      	beq.n	801e2c4 <cleanup_stdio+0x10>
 801e2c0:	f002 fe0c 	bl	8020edc <_fflush_r>
 801e2c4:	68a1      	ldr	r1, [r4, #8]
 801e2c6:	4b08      	ldr	r3, [pc, #32]	@ (801e2e8 <cleanup_stdio+0x34>)
 801e2c8:	4299      	cmp	r1, r3
 801e2ca:	d002      	beq.n	801e2d2 <cleanup_stdio+0x1e>
 801e2cc:	0020      	movs	r0, r4
 801e2ce:	f002 fe05 	bl	8020edc <_fflush_r>
 801e2d2:	68e1      	ldr	r1, [r4, #12]
 801e2d4:	4b05      	ldr	r3, [pc, #20]	@ (801e2ec <cleanup_stdio+0x38>)
 801e2d6:	4299      	cmp	r1, r3
 801e2d8:	d002      	beq.n	801e2e0 <cleanup_stdio+0x2c>
 801e2da:	0020      	movs	r0, r4
 801e2dc:	f002 fdfe 	bl	8020edc <_fflush_r>
 801e2e0:	bd10      	pop	{r4, pc}
 801e2e2:	46c0      	nop			@ (mov r8, r8)
 801e2e4:	200037b8 	.word	0x200037b8
 801e2e8:	20003820 	.word	0x20003820
 801e2ec:	20003888 	.word	0x20003888

0801e2f0 <global_stdio_init.part.0>:
 801e2f0:	b510      	push	{r4, lr}
 801e2f2:	4b09      	ldr	r3, [pc, #36]	@ (801e318 <global_stdio_init.part.0+0x28>)
 801e2f4:	4a09      	ldr	r2, [pc, #36]	@ (801e31c <global_stdio_init.part.0+0x2c>)
 801e2f6:	2104      	movs	r1, #4
 801e2f8:	601a      	str	r2, [r3, #0]
 801e2fa:	4809      	ldr	r0, [pc, #36]	@ (801e320 <global_stdio_init.part.0+0x30>)
 801e2fc:	2200      	movs	r2, #0
 801e2fe:	f7ff ff95 	bl	801e22c <std>
 801e302:	2201      	movs	r2, #1
 801e304:	2109      	movs	r1, #9
 801e306:	4807      	ldr	r0, [pc, #28]	@ (801e324 <global_stdio_init.part.0+0x34>)
 801e308:	f7ff ff90 	bl	801e22c <std>
 801e30c:	2202      	movs	r2, #2
 801e30e:	2112      	movs	r1, #18
 801e310:	4805      	ldr	r0, [pc, #20]	@ (801e328 <global_stdio_init.part.0+0x38>)
 801e312:	f7ff ff8b 	bl	801e22c <std>
 801e316:	bd10      	pop	{r4, pc}
 801e318:	200038f0 	.word	0x200038f0
 801e31c:	0801e299 	.word	0x0801e299
 801e320:	200037b8 	.word	0x200037b8
 801e324:	20003820 	.word	0x20003820
 801e328:	20003888 	.word	0x20003888

0801e32c <__sfp_lock_acquire>:
 801e32c:	b510      	push	{r4, lr}
 801e32e:	4802      	ldr	r0, [pc, #8]	@ (801e338 <__sfp_lock_acquire+0xc>)
 801e330:	f000 fac3 	bl	801e8ba <__retarget_lock_acquire_recursive>
 801e334:	bd10      	pop	{r4, pc}
 801e336:	46c0      	nop			@ (mov r8, r8)
 801e338:	200038f9 	.word	0x200038f9

0801e33c <__sfp_lock_release>:
 801e33c:	b510      	push	{r4, lr}
 801e33e:	4802      	ldr	r0, [pc, #8]	@ (801e348 <__sfp_lock_release+0xc>)
 801e340:	f000 fabc 	bl	801e8bc <__retarget_lock_release_recursive>
 801e344:	bd10      	pop	{r4, pc}
 801e346:	46c0      	nop			@ (mov r8, r8)
 801e348:	200038f9 	.word	0x200038f9

0801e34c <__sinit>:
 801e34c:	b510      	push	{r4, lr}
 801e34e:	0004      	movs	r4, r0
 801e350:	f7ff ffec 	bl	801e32c <__sfp_lock_acquire>
 801e354:	6a23      	ldr	r3, [r4, #32]
 801e356:	2b00      	cmp	r3, #0
 801e358:	d002      	beq.n	801e360 <__sinit+0x14>
 801e35a:	f7ff ffef 	bl	801e33c <__sfp_lock_release>
 801e35e:	bd10      	pop	{r4, pc}
 801e360:	4b04      	ldr	r3, [pc, #16]	@ (801e374 <__sinit+0x28>)
 801e362:	6223      	str	r3, [r4, #32]
 801e364:	4b04      	ldr	r3, [pc, #16]	@ (801e378 <__sinit+0x2c>)
 801e366:	681b      	ldr	r3, [r3, #0]
 801e368:	2b00      	cmp	r3, #0
 801e36a:	d1f6      	bne.n	801e35a <__sinit+0xe>
 801e36c:	f7ff ffc0 	bl	801e2f0 <global_stdio_init.part.0>
 801e370:	e7f3      	b.n	801e35a <__sinit+0xe>
 801e372:	46c0      	nop			@ (mov r8, r8)
 801e374:	0801e2b5 	.word	0x0801e2b5
 801e378:	200038f0 	.word	0x200038f0

0801e37c <_fwalk_sglue>:
 801e37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e37e:	0014      	movs	r4, r2
 801e380:	2600      	movs	r6, #0
 801e382:	9000      	str	r0, [sp, #0]
 801e384:	9101      	str	r1, [sp, #4]
 801e386:	68a5      	ldr	r5, [r4, #8]
 801e388:	6867      	ldr	r7, [r4, #4]
 801e38a:	3f01      	subs	r7, #1
 801e38c:	d504      	bpl.n	801e398 <_fwalk_sglue+0x1c>
 801e38e:	6824      	ldr	r4, [r4, #0]
 801e390:	2c00      	cmp	r4, #0
 801e392:	d1f8      	bne.n	801e386 <_fwalk_sglue+0xa>
 801e394:	0030      	movs	r0, r6
 801e396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e398:	89ab      	ldrh	r3, [r5, #12]
 801e39a:	2b01      	cmp	r3, #1
 801e39c:	d908      	bls.n	801e3b0 <_fwalk_sglue+0x34>
 801e39e:	220e      	movs	r2, #14
 801e3a0:	5eab      	ldrsh	r3, [r5, r2]
 801e3a2:	3301      	adds	r3, #1
 801e3a4:	d004      	beq.n	801e3b0 <_fwalk_sglue+0x34>
 801e3a6:	0029      	movs	r1, r5
 801e3a8:	9800      	ldr	r0, [sp, #0]
 801e3aa:	9b01      	ldr	r3, [sp, #4]
 801e3ac:	4798      	blx	r3
 801e3ae:	4306      	orrs	r6, r0
 801e3b0:	3568      	adds	r5, #104	@ 0x68
 801e3b2:	e7ea      	b.n	801e38a <_fwalk_sglue+0xe>

0801e3b4 <iprintf>:
 801e3b4:	b40f      	push	{r0, r1, r2, r3}
 801e3b6:	b507      	push	{r0, r1, r2, lr}
 801e3b8:	4905      	ldr	r1, [pc, #20]	@ (801e3d0 <iprintf+0x1c>)
 801e3ba:	ab04      	add	r3, sp, #16
 801e3bc:	6808      	ldr	r0, [r1, #0]
 801e3be:	cb04      	ldmia	r3!, {r2}
 801e3c0:	6881      	ldr	r1, [r0, #8]
 801e3c2:	9301      	str	r3, [sp, #4]
 801e3c4:	f002 fbe8 	bl	8020b98 <_vfiprintf_r>
 801e3c8:	b003      	add	sp, #12
 801e3ca:	bc08      	pop	{r3}
 801e3cc:	b004      	add	sp, #16
 801e3ce:	4718      	bx	r3
 801e3d0:	200003cc 	.word	0x200003cc

0801e3d4 <_puts_r>:
 801e3d4:	6a03      	ldr	r3, [r0, #32]
 801e3d6:	b570      	push	{r4, r5, r6, lr}
 801e3d8:	0005      	movs	r5, r0
 801e3da:	000e      	movs	r6, r1
 801e3dc:	6884      	ldr	r4, [r0, #8]
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d101      	bne.n	801e3e6 <_puts_r+0x12>
 801e3e2:	f7ff ffb3 	bl	801e34c <__sinit>
 801e3e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e3e8:	07db      	lsls	r3, r3, #31
 801e3ea:	d405      	bmi.n	801e3f8 <_puts_r+0x24>
 801e3ec:	89a3      	ldrh	r3, [r4, #12]
 801e3ee:	059b      	lsls	r3, r3, #22
 801e3f0:	d402      	bmi.n	801e3f8 <_puts_r+0x24>
 801e3f2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e3f4:	f000 fa61 	bl	801e8ba <__retarget_lock_acquire_recursive>
 801e3f8:	89a3      	ldrh	r3, [r4, #12]
 801e3fa:	071b      	lsls	r3, r3, #28
 801e3fc:	d502      	bpl.n	801e404 <_puts_r+0x30>
 801e3fe:	6923      	ldr	r3, [r4, #16]
 801e400:	2b00      	cmp	r3, #0
 801e402:	d11f      	bne.n	801e444 <_puts_r+0x70>
 801e404:	0021      	movs	r1, r4
 801e406:	0028      	movs	r0, r5
 801e408:	f000 f92a 	bl	801e660 <__swsetup_r>
 801e40c:	2800      	cmp	r0, #0
 801e40e:	d019      	beq.n	801e444 <_puts_r+0x70>
 801e410:	2501      	movs	r5, #1
 801e412:	426d      	negs	r5, r5
 801e414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e416:	07db      	lsls	r3, r3, #31
 801e418:	d405      	bmi.n	801e426 <_puts_r+0x52>
 801e41a:	89a3      	ldrh	r3, [r4, #12]
 801e41c:	059b      	lsls	r3, r3, #22
 801e41e:	d402      	bmi.n	801e426 <_puts_r+0x52>
 801e420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e422:	f000 fa4b 	bl	801e8bc <__retarget_lock_release_recursive>
 801e426:	0028      	movs	r0, r5
 801e428:	bd70      	pop	{r4, r5, r6, pc}
 801e42a:	3601      	adds	r6, #1
 801e42c:	60a3      	str	r3, [r4, #8]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	da04      	bge.n	801e43c <_puts_r+0x68>
 801e432:	69a2      	ldr	r2, [r4, #24]
 801e434:	429a      	cmp	r2, r3
 801e436:	dc16      	bgt.n	801e466 <_puts_r+0x92>
 801e438:	290a      	cmp	r1, #10
 801e43a:	d014      	beq.n	801e466 <_puts_r+0x92>
 801e43c:	6823      	ldr	r3, [r4, #0]
 801e43e:	1c5a      	adds	r2, r3, #1
 801e440:	6022      	str	r2, [r4, #0]
 801e442:	7019      	strb	r1, [r3, #0]
 801e444:	68a3      	ldr	r3, [r4, #8]
 801e446:	7831      	ldrb	r1, [r6, #0]
 801e448:	3b01      	subs	r3, #1
 801e44a:	2900      	cmp	r1, #0
 801e44c:	d1ed      	bne.n	801e42a <_puts_r+0x56>
 801e44e:	60a3      	str	r3, [r4, #8]
 801e450:	2b00      	cmp	r3, #0
 801e452:	da0f      	bge.n	801e474 <_puts_r+0xa0>
 801e454:	0022      	movs	r2, r4
 801e456:	0028      	movs	r0, r5
 801e458:	310a      	adds	r1, #10
 801e45a:	f000 f8bf 	bl	801e5dc <__swbuf_r>
 801e45e:	3001      	adds	r0, #1
 801e460:	d0d6      	beq.n	801e410 <_puts_r+0x3c>
 801e462:	250a      	movs	r5, #10
 801e464:	e7d6      	b.n	801e414 <_puts_r+0x40>
 801e466:	0022      	movs	r2, r4
 801e468:	0028      	movs	r0, r5
 801e46a:	f000 f8b7 	bl	801e5dc <__swbuf_r>
 801e46e:	3001      	adds	r0, #1
 801e470:	d1e8      	bne.n	801e444 <_puts_r+0x70>
 801e472:	e7cd      	b.n	801e410 <_puts_r+0x3c>
 801e474:	6823      	ldr	r3, [r4, #0]
 801e476:	1c5a      	adds	r2, r3, #1
 801e478:	6022      	str	r2, [r4, #0]
 801e47a:	220a      	movs	r2, #10
 801e47c:	701a      	strb	r2, [r3, #0]
 801e47e:	e7f0      	b.n	801e462 <_puts_r+0x8e>

0801e480 <puts>:
 801e480:	b510      	push	{r4, lr}
 801e482:	4b03      	ldr	r3, [pc, #12]	@ (801e490 <puts+0x10>)
 801e484:	0001      	movs	r1, r0
 801e486:	6818      	ldr	r0, [r3, #0]
 801e488:	f7ff ffa4 	bl	801e3d4 <_puts_r>
 801e48c:	bd10      	pop	{r4, pc}
 801e48e:	46c0      	nop			@ (mov r8, r8)
 801e490:	200003cc 	.word	0x200003cc

0801e494 <siprintf>:
 801e494:	b40e      	push	{r1, r2, r3}
 801e496:	b500      	push	{lr}
 801e498:	490b      	ldr	r1, [pc, #44]	@ (801e4c8 <siprintf+0x34>)
 801e49a:	b09c      	sub	sp, #112	@ 0x70
 801e49c:	ab1d      	add	r3, sp, #116	@ 0x74
 801e49e:	9002      	str	r0, [sp, #8]
 801e4a0:	9006      	str	r0, [sp, #24]
 801e4a2:	9107      	str	r1, [sp, #28]
 801e4a4:	9104      	str	r1, [sp, #16]
 801e4a6:	4809      	ldr	r0, [pc, #36]	@ (801e4cc <siprintf+0x38>)
 801e4a8:	4909      	ldr	r1, [pc, #36]	@ (801e4d0 <siprintf+0x3c>)
 801e4aa:	cb04      	ldmia	r3!, {r2}
 801e4ac:	9105      	str	r1, [sp, #20]
 801e4ae:	6800      	ldr	r0, [r0, #0]
 801e4b0:	a902      	add	r1, sp, #8
 801e4b2:	9301      	str	r3, [sp, #4]
 801e4b4:	f002 fa4a 	bl	802094c <_svfiprintf_r>
 801e4b8:	2200      	movs	r2, #0
 801e4ba:	9b02      	ldr	r3, [sp, #8]
 801e4bc:	701a      	strb	r2, [r3, #0]
 801e4be:	b01c      	add	sp, #112	@ 0x70
 801e4c0:	bc08      	pop	{r3}
 801e4c2:	b003      	add	sp, #12
 801e4c4:	4718      	bx	r3
 801e4c6:	46c0      	nop			@ (mov r8, r8)
 801e4c8:	7fffffff 	.word	0x7fffffff
 801e4cc:	200003cc 	.word	0x200003cc
 801e4d0:	ffff0208 	.word	0xffff0208

0801e4d4 <__sread>:
 801e4d4:	b570      	push	{r4, r5, r6, lr}
 801e4d6:	000c      	movs	r4, r1
 801e4d8:	250e      	movs	r5, #14
 801e4da:	5f49      	ldrsh	r1, [r1, r5]
 801e4dc:	f000 f99a 	bl	801e814 <_read_r>
 801e4e0:	2800      	cmp	r0, #0
 801e4e2:	db03      	blt.n	801e4ec <__sread+0x18>
 801e4e4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801e4e6:	181b      	adds	r3, r3, r0
 801e4e8:	6563      	str	r3, [r4, #84]	@ 0x54
 801e4ea:	bd70      	pop	{r4, r5, r6, pc}
 801e4ec:	89a3      	ldrh	r3, [r4, #12]
 801e4ee:	4a02      	ldr	r2, [pc, #8]	@ (801e4f8 <__sread+0x24>)
 801e4f0:	4013      	ands	r3, r2
 801e4f2:	81a3      	strh	r3, [r4, #12]
 801e4f4:	e7f9      	b.n	801e4ea <__sread+0x16>
 801e4f6:	46c0      	nop			@ (mov r8, r8)
 801e4f8:	ffffefff 	.word	0xffffefff

0801e4fc <__swrite>:
 801e4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e4fe:	001f      	movs	r7, r3
 801e500:	898b      	ldrh	r3, [r1, #12]
 801e502:	0005      	movs	r5, r0
 801e504:	000c      	movs	r4, r1
 801e506:	0016      	movs	r6, r2
 801e508:	05db      	lsls	r3, r3, #23
 801e50a:	d505      	bpl.n	801e518 <__swrite+0x1c>
 801e50c:	230e      	movs	r3, #14
 801e50e:	5ec9      	ldrsh	r1, [r1, r3]
 801e510:	2200      	movs	r2, #0
 801e512:	2302      	movs	r3, #2
 801e514:	f000 f96a 	bl	801e7ec <_lseek_r>
 801e518:	89a3      	ldrh	r3, [r4, #12]
 801e51a:	4a05      	ldr	r2, [pc, #20]	@ (801e530 <__swrite+0x34>)
 801e51c:	0028      	movs	r0, r5
 801e51e:	4013      	ands	r3, r2
 801e520:	81a3      	strh	r3, [r4, #12]
 801e522:	0032      	movs	r2, r6
 801e524:	230e      	movs	r3, #14
 801e526:	5ee1      	ldrsh	r1, [r4, r3]
 801e528:	003b      	movs	r3, r7
 801e52a:	f000 f987 	bl	801e83c <_write_r>
 801e52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e530:	ffffefff 	.word	0xffffefff

0801e534 <__sseek>:
 801e534:	b570      	push	{r4, r5, r6, lr}
 801e536:	000c      	movs	r4, r1
 801e538:	250e      	movs	r5, #14
 801e53a:	5f49      	ldrsh	r1, [r1, r5]
 801e53c:	f000 f956 	bl	801e7ec <_lseek_r>
 801e540:	89a3      	ldrh	r3, [r4, #12]
 801e542:	1c42      	adds	r2, r0, #1
 801e544:	d103      	bne.n	801e54e <__sseek+0x1a>
 801e546:	4a05      	ldr	r2, [pc, #20]	@ (801e55c <__sseek+0x28>)
 801e548:	4013      	ands	r3, r2
 801e54a:	81a3      	strh	r3, [r4, #12]
 801e54c:	bd70      	pop	{r4, r5, r6, pc}
 801e54e:	2280      	movs	r2, #128	@ 0x80
 801e550:	0152      	lsls	r2, r2, #5
 801e552:	4313      	orrs	r3, r2
 801e554:	81a3      	strh	r3, [r4, #12]
 801e556:	6560      	str	r0, [r4, #84]	@ 0x54
 801e558:	e7f8      	b.n	801e54c <__sseek+0x18>
 801e55a:	46c0      	nop			@ (mov r8, r8)
 801e55c:	ffffefff 	.word	0xffffefff

0801e560 <__sclose>:
 801e560:	b510      	push	{r4, lr}
 801e562:	230e      	movs	r3, #14
 801e564:	5ec9      	ldrsh	r1, [r1, r3]
 801e566:	f000 f92f 	bl	801e7c8 <_close_r>
 801e56a:	bd10      	pop	{r4, pc}

0801e56c <_vsniprintf_r>:
 801e56c:	b530      	push	{r4, r5, lr}
 801e56e:	0014      	movs	r4, r2
 801e570:	0005      	movs	r5, r0
 801e572:	001a      	movs	r2, r3
 801e574:	b09b      	sub	sp, #108	@ 0x6c
 801e576:	2c00      	cmp	r4, #0
 801e578:	da05      	bge.n	801e586 <_vsniprintf_r+0x1a>
 801e57a:	238b      	movs	r3, #139	@ 0x8b
 801e57c:	6003      	str	r3, [r0, #0]
 801e57e:	2001      	movs	r0, #1
 801e580:	4240      	negs	r0, r0
 801e582:	b01b      	add	sp, #108	@ 0x6c
 801e584:	bd30      	pop	{r4, r5, pc}
 801e586:	2382      	movs	r3, #130	@ 0x82
 801e588:	4668      	mov	r0, sp
 801e58a:	009b      	lsls	r3, r3, #2
 801e58c:	8183      	strh	r3, [r0, #12]
 801e58e:	2300      	movs	r3, #0
 801e590:	9100      	str	r1, [sp, #0]
 801e592:	9104      	str	r1, [sp, #16]
 801e594:	429c      	cmp	r4, r3
 801e596:	d000      	beq.n	801e59a <_vsniprintf_r+0x2e>
 801e598:	1e63      	subs	r3, r4, #1
 801e59a:	9302      	str	r3, [sp, #8]
 801e59c:	9305      	str	r3, [sp, #20]
 801e59e:	2301      	movs	r3, #1
 801e5a0:	4669      	mov	r1, sp
 801e5a2:	425b      	negs	r3, r3
 801e5a4:	81cb      	strh	r3, [r1, #14]
 801e5a6:	0028      	movs	r0, r5
 801e5a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801e5aa:	f002 f9cf 	bl	802094c <_svfiprintf_r>
 801e5ae:	1c43      	adds	r3, r0, #1
 801e5b0:	da01      	bge.n	801e5b6 <_vsniprintf_r+0x4a>
 801e5b2:	238b      	movs	r3, #139	@ 0x8b
 801e5b4:	602b      	str	r3, [r5, #0]
 801e5b6:	2c00      	cmp	r4, #0
 801e5b8:	d0e3      	beq.n	801e582 <_vsniprintf_r+0x16>
 801e5ba:	2200      	movs	r2, #0
 801e5bc:	9b00      	ldr	r3, [sp, #0]
 801e5be:	701a      	strb	r2, [r3, #0]
 801e5c0:	e7df      	b.n	801e582 <_vsniprintf_r+0x16>
	...

0801e5c4 <vsniprintf>:
 801e5c4:	b513      	push	{r0, r1, r4, lr}
 801e5c6:	4c04      	ldr	r4, [pc, #16]	@ (801e5d8 <vsniprintf+0x14>)
 801e5c8:	9300      	str	r3, [sp, #0]
 801e5ca:	0013      	movs	r3, r2
 801e5cc:	000a      	movs	r2, r1
 801e5ce:	0001      	movs	r1, r0
 801e5d0:	6820      	ldr	r0, [r4, #0]
 801e5d2:	f7ff ffcb 	bl	801e56c <_vsniprintf_r>
 801e5d6:	bd16      	pop	{r1, r2, r4, pc}
 801e5d8:	200003cc 	.word	0x200003cc

0801e5dc <__swbuf_r>:
 801e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5de:	0006      	movs	r6, r0
 801e5e0:	000d      	movs	r5, r1
 801e5e2:	0014      	movs	r4, r2
 801e5e4:	2800      	cmp	r0, #0
 801e5e6:	d004      	beq.n	801e5f2 <__swbuf_r+0x16>
 801e5e8:	6a03      	ldr	r3, [r0, #32]
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	d101      	bne.n	801e5f2 <__swbuf_r+0x16>
 801e5ee:	f7ff fead 	bl	801e34c <__sinit>
 801e5f2:	69a3      	ldr	r3, [r4, #24]
 801e5f4:	60a3      	str	r3, [r4, #8]
 801e5f6:	89a3      	ldrh	r3, [r4, #12]
 801e5f8:	071b      	lsls	r3, r3, #28
 801e5fa:	d502      	bpl.n	801e602 <__swbuf_r+0x26>
 801e5fc:	6923      	ldr	r3, [r4, #16]
 801e5fe:	2b00      	cmp	r3, #0
 801e600:	d109      	bne.n	801e616 <__swbuf_r+0x3a>
 801e602:	0021      	movs	r1, r4
 801e604:	0030      	movs	r0, r6
 801e606:	f000 f82b 	bl	801e660 <__swsetup_r>
 801e60a:	2800      	cmp	r0, #0
 801e60c:	d003      	beq.n	801e616 <__swbuf_r+0x3a>
 801e60e:	2501      	movs	r5, #1
 801e610:	426d      	negs	r5, r5
 801e612:	0028      	movs	r0, r5
 801e614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e616:	6923      	ldr	r3, [r4, #16]
 801e618:	6820      	ldr	r0, [r4, #0]
 801e61a:	b2ef      	uxtb	r7, r5
 801e61c:	1ac0      	subs	r0, r0, r3
 801e61e:	6963      	ldr	r3, [r4, #20]
 801e620:	b2ed      	uxtb	r5, r5
 801e622:	4283      	cmp	r3, r0
 801e624:	dc05      	bgt.n	801e632 <__swbuf_r+0x56>
 801e626:	0021      	movs	r1, r4
 801e628:	0030      	movs	r0, r6
 801e62a:	f002 fc57 	bl	8020edc <_fflush_r>
 801e62e:	2800      	cmp	r0, #0
 801e630:	d1ed      	bne.n	801e60e <__swbuf_r+0x32>
 801e632:	68a3      	ldr	r3, [r4, #8]
 801e634:	3001      	adds	r0, #1
 801e636:	3b01      	subs	r3, #1
 801e638:	60a3      	str	r3, [r4, #8]
 801e63a:	6823      	ldr	r3, [r4, #0]
 801e63c:	1c5a      	adds	r2, r3, #1
 801e63e:	6022      	str	r2, [r4, #0]
 801e640:	701f      	strb	r7, [r3, #0]
 801e642:	6963      	ldr	r3, [r4, #20]
 801e644:	4283      	cmp	r3, r0
 801e646:	d004      	beq.n	801e652 <__swbuf_r+0x76>
 801e648:	89a3      	ldrh	r3, [r4, #12]
 801e64a:	07db      	lsls	r3, r3, #31
 801e64c:	d5e1      	bpl.n	801e612 <__swbuf_r+0x36>
 801e64e:	2d0a      	cmp	r5, #10
 801e650:	d1df      	bne.n	801e612 <__swbuf_r+0x36>
 801e652:	0021      	movs	r1, r4
 801e654:	0030      	movs	r0, r6
 801e656:	f002 fc41 	bl	8020edc <_fflush_r>
 801e65a:	2800      	cmp	r0, #0
 801e65c:	d0d9      	beq.n	801e612 <__swbuf_r+0x36>
 801e65e:	e7d6      	b.n	801e60e <__swbuf_r+0x32>

0801e660 <__swsetup_r>:
 801e660:	4b2d      	ldr	r3, [pc, #180]	@ (801e718 <__swsetup_r+0xb8>)
 801e662:	b570      	push	{r4, r5, r6, lr}
 801e664:	0005      	movs	r5, r0
 801e666:	6818      	ldr	r0, [r3, #0]
 801e668:	000c      	movs	r4, r1
 801e66a:	2800      	cmp	r0, #0
 801e66c:	d004      	beq.n	801e678 <__swsetup_r+0x18>
 801e66e:	6a03      	ldr	r3, [r0, #32]
 801e670:	2b00      	cmp	r3, #0
 801e672:	d101      	bne.n	801e678 <__swsetup_r+0x18>
 801e674:	f7ff fe6a 	bl	801e34c <__sinit>
 801e678:	230c      	movs	r3, #12
 801e67a:	5ee2      	ldrsh	r2, [r4, r3]
 801e67c:	0713      	lsls	r3, r2, #28
 801e67e:	d423      	bmi.n	801e6c8 <__swsetup_r+0x68>
 801e680:	06d3      	lsls	r3, r2, #27
 801e682:	d407      	bmi.n	801e694 <__swsetup_r+0x34>
 801e684:	2309      	movs	r3, #9
 801e686:	602b      	str	r3, [r5, #0]
 801e688:	2340      	movs	r3, #64	@ 0x40
 801e68a:	2001      	movs	r0, #1
 801e68c:	4313      	orrs	r3, r2
 801e68e:	81a3      	strh	r3, [r4, #12]
 801e690:	4240      	negs	r0, r0
 801e692:	e03a      	b.n	801e70a <__swsetup_r+0xaa>
 801e694:	0752      	lsls	r2, r2, #29
 801e696:	d513      	bpl.n	801e6c0 <__swsetup_r+0x60>
 801e698:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e69a:	2900      	cmp	r1, #0
 801e69c:	d008      	beq.n	801e6b0 <__swsetup_r+0x50>
 801e69e:	0023      	movs	r3, r4
 801e6a0:	3344      	adds	r3, #68	@ 0x44
 801e6a2:	4299      	cmp	r1, r3
 801e6a4:	d002      	beq.n	801e6ac <__swsetup_r+0x4c>
 801e6a6:	0028      	movs	r0, r5
 801e6a8:	f000 ffa6 	bl	801f5f8 <_free_r>
 801e6ac:	2300      	movs	r3, #0
 801e6ae:	6363      	str	r3, [r4, #52]	@ 0x34
 801e6b0:	2224      	movs	r2, #36	@ 0x24
 801e6b2:	89a3      	ldrh	r3, [r4, #12]
 801e6b4:	4393      	bics	r3, r2
 801e6b6:	81a3      	strh	r3, [r4, #12]
 801e6b8:	2300      	movs	r3, #0
 801e6ba:	6063      	str	r3, [r4, #4]
 801e6bc:	6923      	ldr	r3, [r4, #16]
 801e6be:	6023      	str	r3, [r4, #0]
 801e6c0:	2308      	movs	r3, #8
 801e6c2:	89a2      	ldrh	r2, [r4, #12]
 801e6c4:	4313      	orrs	r3, r2
 801e6c6:	81a3      	strh	r3, [r4, #12]
 801e6c8:	6923      	ldr	r3, [r4, #16]
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	d10b      	bne.n	801e6e6 <__swsetup_r+0x86>
 801e6ce:	21a0      	movs	r1, #160	@ 0xa0
 801e6d0:	2280      	movs	r2, #128	@ 0x80
 801e6d2:	89a3      	ldrh	r3, [r4, #12]
 801e6d4:	0089      	lsls	r1, r1, #2
 801e6d6:	0092      	lsls	r2, r2, #2
 801e6d8:	400b      	ands	r3, r1
 801e6da:	4293      	cmp	r3, r2
 801e6dc:	d003      	beq.n	801e6e6 <__swsetup_r+0x86>
 801e6de:	0021      	movs	r1, r4
 801e6e0:	0028      	movs	r0, r5
 801e6e2:	f002 fc51 	bl	8020f88 <__smakebuf_r>
 801e6e6:	230c      	movs	r3, #12
 801e6e8:	5ee2      	ldrsh	r2, [r4, r3]
 801e6ea:	2101      	movs	r1, #1
 801e6ec:	0013      	movs	r3, r2
 801e6ee:	400b      	ands	r3, r1
 801e6f0:	420a      	tst	r2, r1
 801e6f2:	d00b      	beq.n	801e70c <__swsetup_r+0xac>
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	60a3      	str	r3, [r4, #8]
 801e6f8:	6963      	ldr	r3, [r4, #20]
 801e6fa:	425b      	negs	r3, r3
 801e6fc:	61a3      	str	r3, [r4, #24]
 801e6fe:	2000      	movs	r0, #0
 801e700:	6923      	ldr	r3, [r4, #16]
 801e702:	4283      	cmp	r3, r0
 801e704:	d101      	bne.n	801e70a <__swsetup_r+0xaa>
 801e706:	0613      	lsls	r3, r2, #24
 801e708:	d4be      	bmi.n	801e688 <__swsetup_r+0x28>
 801e70a:	bd70      	pop	{r4, r5, r6, pc}
 801e70c:	0791      	lsls	r1, r2, #30
 801e70e:	d400      	bmi.n	801e712 <__swsetup_r+0xb2>
 801e710:	6963      	ldr	r3, [r4, #20]
 801e712:	60a3      	str	r3, [r4, #8]
 801e714:	e7f3      	b.n	801e6fe <__swsetup_r+0x9e>
 801e716:	46c0      	nop			@ (mov r8, r8)
 801e718:	200003cc 	.word	0x200003cc

0801e71c <memset>:
 801e71c:	0003      	movs	r3, r0
 801e71e:	1882      	adds	r2, r0, r2
 801e720:	4293      	cmp	r3, r2
 801e722:	d100      	bne.n	801e726 <memset+0xa>
 801e724:	4770      	bx	lr
 801e726:	7019      	strb	r1, [r3, #0]
 801e728:	3301      	adds	r3, #1
 801e72a:	e7f9      	b.n	801e720 <memset+0x4>

0801e72c <strchr>:
 801e72c:	b2c9      	uxtb	r1, r1
 801e72e:	7803      	ldrb	r3, [r0, #0]
 801e730:	2b00      	cmp	r3, #0
 801e732:	d004      	beq.n	801e73e <strchr+0x12>
 801e734:	428b      	cmp	r3, r1
 801e736:	d100      	bne.n	801e73a <strchr+0xe>
 801e738:	4770      	bx	lr
 801e73a:	3001      	adds	r0, #1
 801e73c:	e7f7      	b.n	801e72e <strchr+0x2>
 801e73e:	424b      	negs	r3, r1
 801e740:	4159      	adcs	r1, r3
 801e742:	4249      	negs	r1, r1
 801e744:	4008      	ands	r0, r1
 801e746:	e7f7      	b.n	801e738 <strchr+0xc>

0801e748 <strncmp>:
 801e748:	b530      	push	{r4, r5, lr}
 801e74a:	0005      	movs	r5, r0
 801e74c:	1e10      	subs	r0, r2, #0
 801e74e:	d00b      	beq.n	801e768 <strncmp+0x20>
 801e750:	2400      	movs	r4, #0
 801e752:	3a01      	subs	r2, #1
 801e754:	5d2b      	ldrb	r3, [r5, r4]
 801e756:	5d08      	ldrb	r0, [r1, r4]
 801e758:	4283      	cmp	r3, r0
 801e75a:	d104      	bne.n	801e766 <strncmp+0x1e>
 801e75c:	42a2      	cmp	r2, r4
 801e75e:	d002      	beq.n	801e766 <strncmp+0x1e>
 801e760:	3401      	adds	r4, #1
 801e762:	2b00      	cmp	r3, #0
 801e764:	d1f6      	bne.n	801e754 <strncmp+0xc>
 801e766:	1a18      	subs	r0, r3, r0
 801e768:	bd30      	pop	{r4, r5, pc}

0801e76a <strncpy>:
 801e76a:	0003      	movs	r3, r0
 801e76c:	b530      	push	{r4, r5, lr}
 801e76e:	001d      	movs	r5, r3
 801e770:	2a00      	cmp	r2, #0
 801e772:	d006      	beq.n	801e782 <strncpy+0x18>
 801e774:	780c      	ldrb	r4, [r1, #0]
 801e776:	3a01      	subs	r2, #1
 801e778:	3301      	adds	r3, #1
 801e77a:	702c      	strb	r4, [r5, #0]
 801e77c:	3101      	adds	r1, #1
 801e77e:	2c00      	cmp	r4, #0
 801e780:	d1f5      	bne.n	801e76e <strncpy+0x4>
 801e782:	2100      	movs	r1, #0
 801e784:	189a      	adds	r2, r3, r2
 801e786:	4293      	cmp	r3, r2
 801e788:	d100      	bne.n	801e78c <strncpy+0x22>
 801e78a:	bd30      	pop	{r4, r5, pc}
 801e78c:	7019      	strb	r1, [r3, #0]
 801e78e:	3301      	adds	r3, #1
 801e790:	e7f9      	b.n	801e786 <strncpy+0x1c>

0801e792 <strstr>:
 801e792:	780a      	ldrb	r2, [r1, #0]
 801e794:	b530      	push	{r4, r5, lr}
 801e796:	2a00      	cmp	r2, #0
 801e798:	d10c      	bne.n	801e7b4 <strstr+0x22>
 801e79a:	bd30      	pop	{r4, r5, pc}
 801e79c:	429a      	cmp	r2, r3
 801e79e:	d108      	bne.n	801e7b2 <strstr+0x20>
 801e7a0:	2301      	movs	r3, #1
 801e7a2:	5ccc      	ldrb	r4, [r1, r3]
 801e7a4:	2c00      	cmp	r4, #0
 801e7a6:	d0f8      	beq.n	801e79a <strstr+0x8>
 801e7a8:	5cc5      	ldrb	r5, [r0, r3]
 801e7aa:	42a5      	cmp	r5, r4
 801e7ac:	d101      	bne.n	801e7b2 <strstr+0x20>
 801e7ae:	3301      	adds	r3, #1
 801e7b0:	e7f7      	b.n	801e7a2 <strstr+0x10>
 801e7b2:	3001      	adds	r0, #1
 801e7b4:	7803      	ldrb	r3, [r0, #0]
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d1f0      	bne.n	801e79c <strstr+0xa>
 801e7ba:	0018      	movs	r0, r3
 801e7bc:	e7ed      	b.n	801e79a <strstr+0x8>
	...

0801e7c0 <_localeconv_r>:
 801e7c0:	4800      	ldr	r0, [pc, #0]	@ (801e7c4 <_localeconv_r+0x4>)
 801e7c2:	4770      	bx	lr
 801e7c4:	20000350 	.word	0x20000350

0801e7c8 <_close_r>:
 801e7c8:	2300      	movs	r3, #0
 801e7ca:	b570      	push	{r4, r5, r6, lr}
 801e7cc:	4d06      	ldr	r5, [pc, #24]	@ (801e7e8 <_close_r+0x20>)
 801e7ce:	0004      	movs	r4, r0
 801e7d0:	0008      	movs	r0, r1
 801e7d2:	602b      	str	r3, [r5, #0]
 801e7d4:	f7ed ff0e 	bl	800c5f4 <_close>
 801e7d8:	1c43      	adds	r3, r0, #1
 801e7da:	d103      	bne.n	801e7e4 <_close_r+0x1c>
 801e7dc:	682b      	ldr	r3, [r5, #0]
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d000      	beq.n	801e7e4 <_close_r+0x1c>
 801e7e2:	6023      	str	r3, [r4, #0]
 801e7e4:	bd70      	pop	{r4, r5, r6, pc}
 801e7e6:	46c0      	nop			@ (mov r8, r8)
 801e7e8:	200038f4 	.word	0x200038f4

0801e7ec <_lseek_r>:
 801e7ec:	b570      	push	{r4, r5, r6, lr}
 801e7ee:	0004      	movs	r4, r0
 801e7f0:	0008      	movs	r0, r1
 801e7f2:	0011      	movs	r1, r2
 801e7f4:	001a      	movs	r2, r3
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	4d05      	ldr	r5, [pc, #20]	@ (801e810 <_lseek_r+0x24>)
 801e7fa:	602b      	str	r3, [r5, #0]
 801e7fc:	f7ed ff1b 	bl	800c636 <_lseek>
 801e800:	1c43      	adds	r3, r0, #1
 801e802:	d103      	bne.n	801e80c <_lseek_r+0x20>
 801e804:	682b      	ldr	r3, [r5, #0]
 801e806:	2b00      	cmp	r3, #0
 801e808:	d000      	beq.n	801e80c <_lseek_r+0x20>
 801e80a:	6023      	str	r3, [r4, #0]
 801e80c:	bd70      	pop	{r4, r5, r6, pc}
 801e80e:	46c0      	nop			@ (mov r8, r8)
 801e810:	200038f4 	.word	0x200038f4

0801e814 <_read_r>:
 801e814:	b570      	push	{r4, r5, r6, lr}
 801e816:	0004      	movs	r4, r0
 801e818:	0008      	movs	r0, r1
 801e81a:	0011      	movs	r1, r2
 801e81c:	001a      	movs	r2, r3
 801e81e:	2300      	movs	r3, #0
 801e820:	4d05      	ldr	r5, [pc, #20]	@ (801e838 <_read_r+0x24>)
 801e822:	602b      	str	r3, [r5, #0]
 801e824:	f7ed fec9 	bl	800c5ba <_read>
 801e828:	1c43      	adds	r3, r0, #1
 801e82a:	d103      	bne.n	801e834 <_read_r+0x20>
 801e82c:	682b      	ldr	r3, [r5, #0]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d000      	beq.n	801e834 <_read_r+0x20>
 801e832:	6023      	str	r3, [r4, #0]
 801e834:	bd70      	pop	{r4, r5, r6, pc}
 801e836:	46c0      	nop			@ (mov r8, r8)
 801e838:	200038f4 	.word	0x200038f4

0801e83c <_write_r>:
 801e83c:	b570      	push	{r4, r5, r6, lr}
 801e83e:	0004      	movs	r4, r0
 801e840:	0008      	movs	r0, r1
 801e842:	0011      	movs	r1, r2
 801e844:	001a      	movs	r2, r3
 801e846:	2300      	movs	r3, #0
 801e848:	4d05      	ldr	r5, [pc, #20]	@ (801e860 <_write_r+0x24>)
 801e84a:	602b      	str	r3, [r5, #0]
 801e84c:	f7ee fb8a 	bl	800cf64 <_write>
 801e850:	1c43      	adds	r3, r0, #1
 801e852:	d103      	bne.n	801e85c <_write_r+0x20>
 801e854:	682b      	ldr	r3, [r5, #0]
 801e856:	2b00      	cmp	r3, #0
 801e858:	d000      	beq.n	801e85c <_write_r+0x20>
 801e85a:	6023      	str	r3, [r4, #0]
 801e85c:	bd70      	pop	{r4, r5, r6, pc}
 801e85e:	46c0      	nop			@ (mov r8, r8)
 801e860:	200038f4 	.word	0x200038f4

0801e864 <__errno>:
 801e864:	4b01      	ldr	r3, [pc, #4]	@ (801e86c <__errno+0x8>)
 801e866:	6818      	ldr	r0, [r3, #0]
 801e868:	4770      	bx	lr
 801e86a:	46c0      	nop			@ (mov r8, r8)
 801e86c:	200003cc 	.word	0x200003cc

0801e870 <__libc_init_array>:
 801e870:	b570      	push	{r4, r5, r6, lr}
 801e872:	2600      	movs	r6, #0
 801e874:	4c0c      	ldr	r4, [pc, #48]	@ (801e8a8 <__libc_init_array+0x38>)
 801e876:	4d0d      	ldr	r5, [pc, #52]	@ (801e8ac <__libc_init_array+0x3c>)
 801e878:	1b64      	subs	r4, r4, r5
 801e87a:	10a4      	asrs	r4, r4, #2
 801e87c:	42a6      	cmp	r6, r4
 801e87e:	d109      	bne.n	801e894 <__libc_init_array+0x24>
 801e880:	2600      	movs	r6, #0
 801e882:	f002 fee9 	bl	8021658 <_init>
 801e886:	4c0a      	ldr	r4, [pc, #40]	@ (801e8b0 <__libc_init_array+0x40>)
 801e888:	4d0a      	ldr	r5, [pc, #40]	@ (801e8b4 <__libc_init_array+0x44>)
 801e88a:	1b64      	subs	r4, r4, r5
 801e88c:	10a4      	asrs	r4, r4, #2
 801e88e:	42a6      	cmp	r6, r4
 801e890:	d105      	bne.n	801e89e <__libc_init_array+0x2e>
 801e892:	bd70      	pop	{r4, r5, r6, pc}
 801e894:	00b3      	lsls	r3, r6, #2
 801e896:	58eb      	ldr	r3, [r5, r3]
 801e898:	4798      	blx	r3
 801e89a:	3601      	adds	r6, #1
 801e89c:	e7ee      	b.n	801e87c <__libc_init_array+0xc>
 801e89e:	00b3      	lsls	r3, r6, #2
 801e8a0:	58eb      	ldr	r3, [r5, r3]
 801e8a2:	4798      	blx	r3
 801e8a4:	3601      	adds	r6, #1
 801e8a6:	e7f2      	b.n	801e88e <__libc_init_array+0x1e>
 801e8a8:	08023d08 	.word	0x08023d08
 801e8ac:	08023d08 	.word	0x08023d08
 801e8b0:	08023d0c 	.word	0x08023d0c
 801e8b4:	08023d08 	.word	0x08023d08

0801e8b8 <__retarget_lock_init_recursive>:
 801e8b8:	4770      	bx	lr

0801e8ba <__retarget_lock_acquire_recursive>:
 801e8ba:	4770      	bx	lr

0801e8bc <__retarget_lock_release_recursive>:
 801e8bc:	4770      	bx	lr

0801e8be <memchr>:
 801e8be:	b2c9      	uxtb	r1, r1
 801e8c0:	1882      	adds	r2, r0, r2
 801e8c2:	4290      	cmp	r0, r2
 801e8c4:	d101      	bne.n	801e8ca <memchr+0xc>
 801e8c6:	2000      	movs	r0, #0
 801e8c8:	4770      	bx	lr
 801e8ca:	7803      	ldrb	r3, [r0, #0]
 801e8cc:	428b      	cmp	r3, r1
 801e8ce:	d0fb      	beq.n	801e8c8 <memchr+0xa>
 801e8d0:	3001      	adds	r0, #1
 801e8d2:	e7f6      	b.n	801e8c2 <memchr+0x4>

0801e8d4 <memcpy>:
 801e8d4:	2300      	movs	r3, #0
 801e8d6:	b510      	push	{r4, lr}
 801e8d8:	429a      	cmp	r2, r3
 801e8da:	d100      	bne.n	801e8de <memcpy+0xa>
 801e8dc:	bd10      	pop	{r4, pc}
 801e8de:	5ccc      	ldrb	r4, [r1, r3]
 801e8e0:	54c4      	strb	r4, [r0, r3]
 801e8e2:	3301      	adds	r3, #1
 801e8e4:	e7f8      	b.n	801e8d8 <memcpy+0x4>
	...

0801e8e8 <nan>:
 801e8e8:	2000      	movs	r0, #0
 801e8ea:	4901      	ldr	r1, [pc, #4]	@ (801e8f0 <nan+0x8>)
 801e8ec:	4770      	bx	lr
 801e8ee:	46c0      	nop			@ (mov r8, r8)
 801e8f0:	7ff80000 	.word	0x7ff80000

0801e8f4 <quorem>:
 801e8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8f6:	6902      	ldr	r2, [r0, #16]
 801e8f8:	690f      	ldr	r7, [r1, #16]
 801e8fa:	b087      	sub	sp, #28
 801e8fc:	0006      	movs	r6, r0
 801e8fe:	000b      	movs	r3, r1
 801e900:	2000      	movs	r0, #0
 801e902:	9102      	str	r1, [sp, #8]
 801e904:	42ba      	cmp	r2, r7
 801e906:	db6d      	blt.n	801e9e4 <quorem+0xf0>
 801e908:	3f01      	subs	r7, #1
 801e90a:	00bc      	lsls	r4, r7, #2
 801e90c:	3314      	adds	r3, #20
 801e90e:	9305      	str	r3, [sp, #20]
 801e910:	191b      	adds	r3, r3, r4
 801e912:	9303      	str	r3, [sp, #12]
 801e914:	0033      	movs	r3, r6
 801e916:	3314      	adds	r3, #20
 801e918:	191c      	adds	r4, r3, r4
 801e91a:	9301      	str	r3, [sp, #4]
 801e91c:	6823      	ldr	r3, [r4, #0]
 801e91e:	9304      	str	r3, [sp, #16]
 801e920:	9b03      	ldr	r3, [sp, #12]
 801e922:	9804      	ldr	r0, [sp, #16]
 801e924:	681d      	ldr	r5, [r3, #0]
 801e926:	3501      	adds	r5, #1
 801e928:	0029      	movs	r1, r5
 801e92a:	f7e1 fc3b 	bl	80001a4 <__udivsi3>
 801e92e:	9b04      	ldr	r3, [sp, #16]
 801e930:	9000      	str	r0, [sp, #0]
 801e932:	42ab      	cmp	r3, r5
 801e934:	d32b      	bcc.n	801e98e <quorem+0x9a>
 801e936:	9b05      	ldr	r3, [sp, #20]
 801e938:	9d01      	ldr	r5, [sp, #4]
 801e93a:	469c      	mov	ip, r3
 801e93c:	2300      	movs	r3, #0
 801e93e:	9305      	str	r3, [sp, #20]
 801e940:	9304      	str	r3, [sp, #16]
 801e942:	4662      	mov	r2, ip
 801e944:	ca08      	ldmia	r2!, {r3}
 801e946:	6828      	ldr	r0, [r5, #0]
 801e948:	4694      	mov	ip, r2
 801e94a:	9a00      	ldr	r2, [sp, #0]
 801e94c:	b299      	uxth	r1, r3
 801e94e:	4351      	muls	r1, r2
 801e950:	9a05      	ldr	r2, [sp, #20]
 801e952:	0c1b      	lsrs	r3, r3, #16
 801e954:	1889      	adds	r1, r1, r2
 801e956:	9a00      	ldr	r2, [sp, #0]
 801e958:	4353      	muls	r3, r2
 801e95a:	0c0a      	lsrs	r2, r1, #16
 801e95c:	189b      	adds	r3, r3, r2
 801e95e:	0c1a      	lsrs	r2, r3, #16
 801e960:	b289      	uxth	r1, r1
 801e962:	9205      	str	r2, [sp, #20]
 801e964:	b282      	uxth	r2, r0
 801e966:	1a52      	subs	r2, r2, r1
 801e968:	9904      	ldr	r1, [sp, #16]
 801e96a:	0c00      	lsrs	r0, r0, #16
 801e96c:	1852      	adds	r2, r2, r1
 801e96e:	b29b      	uxth	r3, r3
 801e970:	1411      	asrs	r1, r2, #16
 801e972:	1ac3      	subs	r3, r0, r3
 801e974:	185b      	adds	r3, r3, r1
 801e976:	1419      	asrs	r1, r3, #16
 801e978:	b292      	uxth	r2, r2
 801e97a:	041b      	lsls	r3, r3, #16
 801e97c:	431a      	orrs	r2, r3
 801e97e:	9b03      	ldr	r3, [sp, #12]
 801e980:	9104      	str	r1, [sp, #16]
 801e982:	c504      	stmia	r5!, {r2}
 801e984:	4563      	cmp	r3, ip
 801e986:	d2dc      	bcs.n	801e942 <quorem+0x4e>
 801e988:	6823      	ldr	r3, [r4, #0]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d030      	beq.n	801e9f0 <quorem+0xfc>
 801e98e:	0030      	movs	r0, r6
 801e990:	9902      	ldr	r1, [sp, #8]
 801e992:	f001 fd7d 	bl	8020490 <__mcmp>
 801e996:	2800      	cmp	r0, #0
 801e998:	db23      	blt.n	801e9e2 <quorem+0xee>
 801e99a:	0034      	movs	r4, r6
 801e99c:	2500      	movs	r5, #0
 801e99e:	9902      	ldr	r1, [sp, #8]
 801e9a0:	3414      	adds	r4, #20
 801e9a2:	3114      	adds	r1, #20
 801e9a4:	6823      	ldr	r3, [r4, #0]
 801e9a6:	c901      	ldmia	r1!, {r0}
 801e9a8:	9302      	str	r3, [sp, #8]
 801e9aa:	466b      	mov	r3, sp
 801e9ac:	891b      	ldrh	r3, [r3, #8]
 801e9ae:	b282      	uxth	r2, r0
 801e9b0:	1a9a      	subs	r2, r3, r2
 801e9b2:	9b02      	ldr	r3, [sp, #8]
 801e9b4:	1952      	adds	r2, r2, r5
 801e9b6:	0c00      	lsrs	r0, r0, #16
 801e9b8:	0c1b      	lsrs	r3, r3, #16
 801e9ba:	1a1b      	subs	r3, r3, r0
 801e9bc:	1410      	asrs	r0, r2, #16
 801e9be:	181b      	adds	r3, r3, r0
 801e9c0:	141d      	asrs	r5, r3, #16
 801e9c2:	b292      	uxth	r2, r2
 801e9c4:	041b      	lsls	r3, r3, #16
 801e9c6:	431a      	orrs	r2, r3
 801e9c8:	9b03      	ldr	r3, [sp, #12]
 801e9ca:	c404      	stmia	r4!, {r2}
 801e9cc:	428b      	cmp	r3, r1
 801e9ce:	d2e9      	bcs.n	801e9a4 <quorem+0xb0>
 801e9d0:	9a01      	ldr	r2, [sp, #4]
 801e9d2:	00bb      	lsls	r3, r7, #2
 801e9d4:	18d3      	adds	r3, r2, r3
 801e9d6:	681a      	ldr	r2, [r3, #0]
 801e9d8:	2a00      	cmp	r2, #0
 801e9da:	d013      	beq.n	801ea04 <quorem+0x110>
 801e9dc:	9b00      	ldr	r3, [sp, #0]
 801e9de:	3301      	adds	r3, #1
 801e9e0:	9300      	str	r3, [sp, #0]
 801e9e2:	9800      	ldr	r0, [sp, #0]
 801e9e4:	b007      	add	sp, #28
 801e9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9e8:	6823      	ldr	r3, [r4, #0]
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d104      	bne.n	801e9f8 <quorem+0x104>
 801e9ee:	3f01      	subs	r7, #1
 801e9f0:	9b01      	ldr	r3, [sp, #4]
 801e9f2:	3c04      	subs	r4, #4
 801e9f4:	42a3      	cmp	r3, r4
 801e9f6:	d3f7      	bcc.n	801e9e8 <quorem+0xf4>
 801e9f8:	6137      	str	r7, [r6, #16]
 801e9fa:	e7c8      	b.n	801e98e <quorem+0x9a>
 801e9fc:	681a      	ldr	r2, [r3, #0]
 801e9fe:	2a00      	cmp	r2, #0
 801ea00:	d104      	bne.n	801ea0c <quorem+0x118>
 801ea02:	3f01      	subs	r7, #1
 801ea04:	9a01      	ldr	r2, [sp, #4]
 801ea06:	3b04      	subs	r3, #4
 801ea08:	429a      	cmp	r2, r3
 801ea0a:	d3f7      	bcc.n	801e9fc <quorem+0x108>
 801ea0c:	6137      	str	r7, [r6, #16]
 801ea0e:	e7e5      	b.n	801e9dc <quorem+0xe8>

0801ea10 <_dtoa_r>:
 801ea10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea12:	0014      	movs	r4, r2
 801ea14:	001d      	movs	r5, r3
 801ea16:	69c6      	ldr	r6, [r0, #28]
 801ea18:	b09d      	sub	sp, #116	@ 0x74
 801ea1a:	940a      	str	r4, [sp, #40]	@ 0x28
 801ea1c:	950b      	str	r5, [sp, #44]	@ 0x2c
 801ea1e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801ea20:	9003      	str	r0, [sp, #12]
 801ea22:	2e00      	cmp	r6, #0
 801ea24:	d10f      	bne.n	801ea46 <_dtoa_r+0x36>
 801ea26:	2010      	movs	r0, #16
 801ea28:	f001 f98a 	bl	801fd40 <malloc>
 801ea2c:	9b03      	ldr	r3, [sp, #12]
 801ea2e:	1e02      	subs	r2, r0, #0
 801ea30:	61d8      	str	r0, [r3, #28]
 801ea32:	d104      	bne.n	801ea3e <_dtoa_r+0x2e>
 801ea34:	21ef      	movs	r1, #239	@ 0xef
 801ea36:	4bc7      	ldr	r3, [pc, #796]	@ (801ed54 <_dtoa_r+0x344>)
 801ea38:	48c7      	ldr	r0, [pc, #796]	@ (801ed58 <_dtoa_r+0x348>)
 801ea3a:	f002 fb2f 	bl	802109c <__assert_func>
 801ea3e:	6046      	str	r6, [r0, #4]
 801ea40:	6086      	str	r6, [r0, #8]
 801ea42:	6006      	str	r6, [r0, #0]
 801ea44:	60c6      	str	r6, [r0, #12]
 801ea46:	9b03      	ldr	r3, [sp, #12]
 801ea48:	69db      	ldr	r3, [r3, #28]
 801ea4a:	6819      	ldr	r1, [r3, #0]
 801ea4c:	2900      	cmp	r1, #0
 801ea4e:	d00b      	beq.n	801ea68 <_dtoa_r+0x58>
 801ea50:	685a      	ldr	r2, [r3, #4]
 801ea52:	2301      	movs	r3, #1
 801ea54:	4093      	lsls	r3, r2
 801ea56:	604a      	str	r2, [r1, #4]
 801ea58:	608b      	str	r3, [r1, #8]
 801ea5a:	9803      	ldr	r0, [sp, #12]
 801ea5c:	f001 fa82 	bl	801ff64 <_Bfree>
 801ea60:	2200      	movs	r2, #0
 801ea62:	9b03      	ldr	r3, [sp, #12]
 801ea64:	69db      	ldr	r3, [r3, #28]
 801ea66:	601a      	str	r2, [r3, #0]
 801ea68:	2d00      	cmp	r5, #0
 801ea6a:	da1e      	bge.n	801eaaa <_dtoa_r+0x9a>
 801ea6c:	2301      	movs	r3, #1
 801ea6e:	603b      	str	r3, [r7, #0]
 801ea70:	006b      	lsls	r3, r5, #1
 801ea72:	085b      	lsrs	r3, r3, #1
 801ea74:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea76:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801ea78:	4bb8      	ldr	r3, [pc, #736]	@ (801ed5c <_dtoa_r+0x34c>)
 801ea7a:	4ab8      	ldr	r2, [pc, #736]	@ (801ed5c <_dtoa_r+0x34c>)
 801ea7c:	403b      	ands	r3, r7
 801ea7e:	4293      	cmp	r3, r2
 801ea80:	d116      	bne.n	801eab0 <_dtoa_r+0xa0>
 801ea82:	4bb7      	ldr	r3, [pc, #732]	@ (801ed60 <_dtoa_r+0x350>)
 801ea84:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ea86:	6013      	str	r3, [r2, #0]
 801ea88:	033b      	lsls	r3, r7, #12
 801ea8a:	0b1b      	lsrs	r3, r3, #12
 801ea8c:	4323      	orrs	r3, r4
 801ea8e:	d101      	bne.n	801ea94 <_dtoa_r+0x84>
 801ea90:	f000 fd83 	bl	801f59a <_dtoa_r+0xb8a>
 801ea94:	4bb3      	ldr	r3, [pc, #716]	@ (801ed64 <_dtoa_r+0x354>)
 801ea96:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ea98:	9308      	str	r3, [sp, #32]
 801ea9a:	2a00      	cmp	r2, #0
 801ea9c:	d002      	beq.n	801eaa4 <_dtoa_r+0x94>
 801ea9e:	4bb2      	ldr	r3, [pc, #712]	@ (801ed68 <_dtoa_r+0x358>)
 801eaa0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801eaa2:	6013      	str	r3, [r2, #0]
 801eaa4:	9808      	ldr	r0, [sp, #32]
 801eaa6:	b01d      	add	sp, #116	@ 0x74
 801eaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eaaa:	2300      	movs	r3, #0
 801eaac:	603b      	str	r3, [r7, #0]
 801eaae:	e7e2      	b.n	801ea76 <_dtoa_r+0x66>
 801eab0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eab4:	9212      	str	r2, [sp, #72]	@ 0x48
 801eab6:	9313      	str	r3, [sp, #76]	@ 0x4c
 801eab8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eaba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eabc:	2200      	movs	r2, #0
 801eabe:	2300      	movs	r3, #0
 801eac0:	f7e1 fcf6 	bl	80004b0 <__aeabi_dcmpeq>
 801eac4:	1e06      	subs	r6, r0, #0
 801eac6:	d00b      	beq.n	801eae0 <_dtoa_r+0xd0>
 801eac8:	2301      	movs	r3, #1
 801eaca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801eacc:	6013      	str	r3, [r2, #0]
 801eace:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	d002      	beq.n	801eada <_dtoa_r+0xca>
 801ead4:	4ba5      	ldr	r3, [pc, #660]	@ (801ed6c <_dtoa_r+0x35c>)
 801ead6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ead8:	6013      	str	r3, [r2, #0]
 801eada:	4ba5      	ldr	r3, [pc, #660]	@ (801ed70 <_dtoa_r+0x360>)
 801eadc:	9308      	str	r3, [sp, #32]
 801eade:	e7e1      	b.n	801eaa4 <_dtoa_r+0x94>
 801eae0:	ab1a      	add	r3, sp, #104	@ 0x68
 801eae2:	9301      	str	r3, [sp, #4]
 801eae4:	ab1b      	add	r3, sp, #108	@ 0x6c
 801eae6:	9300      	str	r3, [sp, #0]
 801eae8:	9803      	ldr	r0, [sp, #12]
 801eaea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801eaec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eaee:	f001 fdf1 	bl	80206d4 <__d2b>
 801eaf2:	007a      	lsls	r2, r7, #1
 801eaf4:	9005      	str	r0, [sp, #20]
 801eaf6:	0d52      	lsrs	r2, r2, #21
 801eaf8:	d100      	bne.n	801eafc <_dtoa_r+0xec>
 801eafa:	e07b      	b.n	801ebf4 <_dtoa_r+0x1e4>
 801eafc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801eafe:	9618      	str	r6, [sp, #96]	@ 0x60
 801eb00:	0319      	lsls	r1, r3, #12
 801eb02:	4b9c      	ldr	r3, [pc, #624]	@ (801ed74 <_dtoa_r+0x364>)
 801eb04:	0b09      	lsrs	r1, r1, #12
 801eb06:	430b      	orrs	r3, r1
 801eb08:	499b      	ldr	r1, [pc, #620]	@ (801ed78 <_dtoa_r+0x368>)
 801eb0a:	1857      	adds	r7, r2, r1
 801eb0c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eb0e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eb10:	0019      	movs	r1, r3
 801eb12:	2200      	movs	r2, #0
 801eb14:	4b99      	ldr	r3, [pc, #612]	@ (801ed7c <_dtoa_r+0x36c>)
 801eb16:	f7e4 f859 	bl	8002bcc <__aeabi_dsub>
 801eb1a:	4a99      	ldr	r2, [pc, #612]	@ (801ed80 <_dtoa_r+0x370>)
 801eb1c:	4b99      	ldr	r3, [pc, #612]	@ (801ed84 <_dtoa_r+0x374>)
 801eb1e:	f7e3 fd8d 	bl	800263c <__aeabi_dmul>
 801eb22:	4a99      	ldr	r2, [pc, #612]	@ (801ed88 <_dtoa_r+0x378>)
 801eb24:	4b99      	ldr	r3, [pc, #612]	@ (801ed8c <_dtoa_r+0x37c>)
 801eb26:	f7e2 fde1 	bl	80016ec <__aeabi_dadd>
 801eb2a:	0004      	movs	r4, r0
 801eb2c:	0038      	movs	r0, r7
 801eb2e:	000d      	movs	r5, r1
 801eb30:	f7e4 fc46 	bl	80033c0 <__aeabi_i2d>
 801eb34:	4a96      	ldr	r2, [pc, #600]	@ (801ed90 <_dtoa_r+0x380>)
 801eb36:	4b97      	ldr	r3, [pc, #604]	@ (801ed94 <_dtoa_r+0x384>)
 801eb38:	f7e3 fd80 	bl	800263c <__aeabi_dmul>
 801eb3c:	0002      	movs	r2, r0
 801eb3e:	000b      	movs	r3, r1
 801eb40:	0020      	movs	r0, r4
 801eb42:	0029      	movs	r1, r5
 801eb44:	f7e2 fdd2 	bl	80016ec <__aeabi_dadd>
 801eb48:	0004      	movs	r4, r0
 801eb4a:	000d      	movs	r5, r1
 801eb4c:	f7e4 fbfc 	bl	8003348 <__aeabi_d2iz>
 801eb50:	2200      	movs	r2, #0
 801eb52:	9004      	str	r0, [sp, #16]
 801eb54:	2300      	movs	r3, #0
 801eb56:	0020      	movs	r0, r4
 801eb58:	0029      	movs	r1, r5
 801eb5a:	f7e1 fcaf 	bl	80004bc <__aeabi_dcmplt>
 801eb5e:	2800      	cmp	r0, #0
 801eb60:	d00b      	beq.n	801eb7a <_dtoa_r+0x16a>
 801eb62:	9804      	ldr	r0, [sp, #16]
 801eb64:	f7e4 fc2c 	bl	80033c0 <__aeabi_i2d>
 801eb68:	002b      	movs	r3, r5
 801eb6a:	0022      	movs	r2, r4
 801eb6c:	f7e1 fca0 	bl	80004b0 <__aeabi_dcmpeq>
 801eb70:	4243      	negs	r3, r0
 801eb72:	4158      	adcs	r0, r3
 801eb74:	9b04      	ldr	r3, [sp, #16]
 801eb76:	1a1b      	subs	r3, r3, r0
 801eb78:	9304      	str	r3, [sp, #16]
 801eb7a:	2301      	movs	r3, #1
 801eb7c:	9315      	str	r3, [sp, #84]	@ 0x54
 801eb7e:	9b04      	ldr	r3, [sp, #16]
 801eb80:	2b16      	cmp	r3, #22
 801eb82:	d810      	bhi.n	801eba6 <_dtoa_r+0x196>
 801eb84:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801eb86:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801eb88:	9a04      	ldr	r2, [sp, #16]
 801eb8a:	4b83      	ldr	r3, [pc, #524]	@ (801ed98 <_dtoa_r+0x388>)
 801eb8c:	00d2      	lsls	r2, r2, #3
 801eb8e:	189b      	adds	r3, r3, r2
 801eb90:	681a      	ldr	r2, [r3, #0]
 801eb92:	685b      	ldr	r3, [r3, #4]
 801eb94:	f7e1 fc92 	bl	80004bc <__aeabi_dcmplt>
 801eb98:	2800      	cmp	r0, #0
 801eb9a:	d047      	beq.n	801ec2c <_dtoa_r+0x21c>
 801eb9c:	9b04      	ldr	r3, [sp, #16]
 801eb9e:	3b01      	subs	r3, #1
 801eba0:	9304      	str	r3, [sp, #16]
 801eba2:	2300      	movs	r3, #0
 801eba4:	9315      	str	r3, [sp, #84]	@ 0x54
 801eba6:	2200      	movs	r2, #0
 801eba8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ebaa:	9206      	str	r2, [sp, #24]
 801ebac:	1bdb      	subs	r3, r3, r7
 801ebae:	1e5a      	subs	r2, r3, #1
 801ebb0:	d53e      	bpl.n	801ec30 <_dtoa_r+0x220>
 801ebb2:	2201      	movs	r2, #1
 801ebb4:	1ad3      	subs	r3, r2, r3
 801ebb6:	9306      	str	r3, [sp, #24]
 801ebb8:	2300      	movs	r3, #0
 801ebba:	930d      	str	r3, [sp, #52]	@ 0x34
 801ebbc:	9b04      	ldr	r3, [sp, #16]
 801ebbe:	2b00      	cmp	r3, #0
 801ebc0:	db38      	blt.n	801ec34 <_dtoa_r+0x224>
 801ebc2:	9a04      	ldr	r2, [sp, #16]
 801ebc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ebc6:	4694      	mov	ip, r2
 801ebc8:	4463      	add	r3, ip
 801ebca:	930d      	str	r3, [sp, #52]	@ 0x34
 801ebcc:	2300      	movs	r3, #0
 801ebce:	9214      	str	r2, [sp, #80]	@ 0x50
 801ebd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ebd2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ebd4:	2401      	movs	r4, #1
 801ebd6:	2b09      	cmp	r3, #9
 801ebd8:	d867      	bhi.n	801ecaa <_dtoa_r+0x29a>
 801ebda:	2b05      	cmp	r3, #5
 801ebdc:	dd02      	ble.n	801ebe4 <_dtoa_r+0x1d4>
 801ebde:	2400      	movs	r4, #0
 801ebe0:	3b04      	subs	r3, #4
 801ebe2:	9322      	str	r3, [sp, #136]	@ 0x88
 801ebe4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ebe6:	1e98      	subs	r0, r3, #2
 801ebe8:	2803      	cmp	r0, #3
 801ebea:	d867      	bhi.n	801ecbc <_dtoa_r+0x2ac>
 801ebec:	f7e1 fac6 	bl	800017c <__gnu_thumb1_case_uqi>
 801ebf0:	5b383a2b 	.word	0x5b383a2b
 801ebf4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ebf6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801ebf8:	18f6      	adds	r6, r6, r3
 801ebfa:	4b68      	ldr	r3, [pc, #416]	@ (801ed9c <_dtoa_r+0x38c>)
 801ebfc:	18f2      	adds	r2, r6, r3
 801ebfe:	2a20      	cmp	r2, #32
 801ec00:	dd0f      	ble.n	801ec22 <_dtoa_r+0x212>
 801ec02:	2340      	movs	r3, #64	@ 0x40
 801ec04:	1a9b      	subs	r3, r3, r2
 801ec06:	409f      	lsls	r7, r3
 801ec08:	4b65      	ldr	r3, [pc, #404]	@ (801eda0 <_dtoa_r+0x390>)
 801ec0a:	0038      	movs	r0, r7
 801ec0c:	18f3      	adds	r3, r6, r3
 801ec0e:	40dc      	lsrs	r4, r3
 801ec10:	4320      	orrs	r0, r4
 801ec12:	f7e4 fc03 	bl	800341c <__aeabi_ui2d>
 801ec16:	2201      	movs	r2, #1
 801ec18:	4b62      	ldr	r3, [pc, #392]	@ (801eda4 <_dtoa_r+0x394>)
 801ec1a:	1e77      	subs	r7, r6, #1
 801ec1c:	18cb      	adds	r3, r1, r3
 801ec1e:	9218      	str	r2, [sp, #96]	@ 0x60
 801ec20:	e776      	b.n	801eb10 <_dtoa_r+0x100>
 801ec22:	2320      	movs	r3, #32
 801ec24:	0020      	movs	r0, r4
 801ec26:	1a9b      	subs	r3, r3, r2
 801ec28:	4098      	lsls	r0, r3
 801ec2a:	e7f2      	b.n	801ec12 <_dtoa_r+0x202>
 801ec2c:	9015      	str	r0, [sp, #84]	@ 0x54
 801ec2e:	e7ba      	b.n	801eba6 <_dtoa_r+0x196>
 801ec30:	920d      	str	r2, [sp, #52]	@ 0x34
 801ec32:	e7c3      	b.n	801ebbc <_dtoa_r+0x1ac>
 801ec34:	9b06      	ldr	r3, [sp, #24]
 801ec36:	9a04      	ldr	r2, [sp, #16]
 801ec38:	1a9b      	subs	r3, r3, r2
 801ec3a:	9306      	str	r3, [sp, #24]
 801ec3c:	4253      	negs	r3, r2
 801ec3e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ec40:	2300      	movs	r3, #0
 801ec42:	9314      	str	r3, [sp, #80]	@ 0x50
 801ec44:	e7c5      	b.n	801ebd2 <_dtoa_r+0x1c2>
 801ec46:	2300      	movs	r3, #0
 801ec48:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ec4c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec4e:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	dc13      	bgt.n	801ec7c <_dtoa_r+0x26c>
 801ec54:	2301      	movs	r3, #1
 801ec56:	001a      	movs	r2, r3
 801ec58:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec5a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec5c:	9223      	str	r2, [sp, #140]	@ 0x8c
 801ec5e:	e00d      	b.n	801ec7c <_dtoa_r+0x26c>
 801ec60:	2301      	movs	r3, #1
 801ec62:	e7f1      	b.n	801ec48 <_dtoa_r+0x238>
 801ec64:	2300      	movs	r3, #0
 801ec66:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ec68:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec6a:	4694      	mov	ip, r2
 801ec6c:	9b04      	ldr	r3, [sp, #16]
 801ec6e:	4463      	add	r3, ip
 801ec70:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec72:	3301      	adds	r3, #1
 801ec74:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec76:	2b00      	cmp	r3, #0
 801ec78:	dc00      	bgt.n	801ec7c <_dtoa_r+0x26c>
 801ec7a:	2301      	movs	r3, #1
 801ec7c:	9a03      	ldr	r2, [sp, #12]
 801ec7e:	2100      	movs	r1, #0
 801ec80:	69d0      	ldr	r0, [r2, #28]
 801ec82:	2204      	movs	r2, #4
 801ec84:	0015      	movs	r5, r2
 801ec86:	3514      	adds	r5, #20
 801ec88:	429d      	cmp	r5, r3
 801ec8a:	d91b      	bls.n	801ecc4 <_dtoa_r+0x2b4>
 801ec8c:	6041      	str	r1, [r0, #4]
 801ec8e:	9803      	ldr	r0, [sp, #12]
 801ec90:	f001 f924 	bl	801fedc <_Balloc>
 801ec94:	9008      	str	r0, [sp, #32]
 801ec96:	2800      	cmp	r0, #0
 801ec98:	d117      	bne.n	801ecca <_dtoa_r+0x2ba>
 801ec9a:	21b0      	movs	r1, #176	@ 0xb0
 801ec9c:	4b42      	ldr	r3, [pc, #264]	@ (801eda8 <_dtoa_r+0x398>)
 801ec9e:	482e      	ldr	r0, [pc, #184]	@ (801ed58 <_dtoa_r+0x348>)
 801eca0:	9a08      	ldr	r2, [sp, #32]
 801eca2:	31ff      	adds	r1, #255	@ 0xff
 801eca4:	e6c9      	b.n	801ea3a <_dtoa_r+0x2a>
 801eca6:	2301      	movs	r3, #1
 801eca8:	e7dd      	b.n	801ec66 <_dtoa_r+0x256>
 801ecaa:	2300      	movs	r3, #0
 801ecac:	9410      	str	r4, [sp, #64]	@ 0x40
 801ecae:	9322      	str	r3, [sp, #136]	@ 0x88
 801ecb0:	3b01      	subs	r3, #1
 801ecb2:	930e      	str	r3, [sp, #56]	@ 0x38
 801ecb4:	9309      	str	r3, [sp, #36]	@ 0x24
 801ecb6:	2200      	movs	r2, #0
 801ecb8:	3313      	adds	r3, #19
 801ecba:	e7cf      	b.n	801ec5c <_dtoa_r+0x24c>
 801ecbc:	2301      	movs	r3, #1
 801ecbe:	9310      	str	r3, [sp, #64]	@ 0x40
 801ecc0:	3b02      	subs	r3, #2
 801ecc2:	e7f6      	b.n	801ecb2 <_dtoa_r+0x2a2>
 801ecc4:	3101      	adds	r1, #1
 801ecc6:	0052      	lsls	r2, r2, #1
 801ecc8:	e7dc      	b.n	801ec84 <_dtoa_r+0x274>
 801ecca:	9b03      	ldr	r3, [sp, #12]
 801eccc:	9a08      	ldr	r2, [sp, #32]
 801ecce:	69db      	ldr	r3, [r3, #28]
 801ecd0:	601a      	str	r2, [r3, #0]
 801ecd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ecd4:	2b0e      	cmp	r3, #14
 801ecd6:	d900      	bls.n	801ecda <_dtoa_r+0x2ca>
 801ecd8:	e0d9      	b.n	801ee8e <_dtoa_r+0x47e>
 801ecda:	2c00      	cmp	r4, #0
 801ecdc:	d100      	bne.n	801ece0 <_dtoa_r+0x2d0>
 801ecde:	e0d6      	b.n	801ee8e <_dtoa_r+0x47e>
 801ece0:	9b04      	ldr	r3, [sp, #16]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	dd64      	ble.n	801edb0 <_dtoa_r+0x3a0>
 801ece6:	210f      	movs	r1, #15
 801ece8:	9a04      	ldr	r2, [sp, #16]
 801ecea:	4b2b      	ldr	r3, [pc, #172]	@ (801ed98 <_dtoa_r+0x388>)
 801ecec:	400a      	ands	r2, r1
 801ecee:	00d2      	lsls	r2, r2, #3
 801ecf0:	189b      	adds	r3, r3, r2
 801ecf2:	681e      	ldr	r6, [r3, #0]
 801ecf4:	685f      	ldr	r7, [r3, #4]
 801ecf6:	9b04      	ldr	r3, [sp, #16]
 801ecf8:	2402      	movs	r4, #2
 801ecfa:	111d      	asrs	r5, r3, #4
 801ecfc:	05db      	lsls	r3, r3, #23
 801ecfe:	d50a      	bpl.n	801ed16 <_dtoa_r+0x306>
 801ed00:	4b2a      	ldr	r3, [pc, #168]	@ (801edac <_dtoa_r+0x39c>)
 801ed02:	400d      	ands	r5, r1
 801ed04:	6a1a      	ldr	r2, [r3, #32]
 801ed06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ed08:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ed0a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801ed0c:	f7e3 f852 	bl	8001db4 <__aeabi_ddiv>
 801ed10:	900a      	str	r0, [sp, #40]	@ 0x28
 801ed12:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed14:	3401      	adds	r4, #1
 801ed16:	4b25      	ldr	r3, [pc, #148]	@ (801edac <_dtoa_r+0x39c>)
 801ed18:	930c      	str	r3, [sp, #48]	@ 0x30
 801ed1a:	2d00      	cmp	r5, #0
 801ed1c:	d108      	bne.n	801ed30 <_dtoa_r+0x320>
 801ed1e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ed20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ed22:	0032      	movs	r2, r6
 801ed24:	003b      	movs	r3, r7
 801ed26:	f7e3 f845 	bl	8001db4 <__aeabi_ddiv>
 801ed2a:	900a      	str	r0, [sp, #40]	@ 0x28
 801ed2c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ed2e:	e05a      	b.n	801ede6 <_dtoa_r+0x3d6>
 801ed30:	2301      	movs	r3, #1
 801ed32:	421d      	tst	r5, r3
 801ed34:	d009      	beq.n	801ed4a <_dtoa_r+0x33a>
 801ed36:	18e4      	adds	r4, r4, r3
 801ed38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed3a:	0030      	movs	r0, r6
 801ed3c:	681a      	ldr	r2, [r3, #0]
 801ed3e:	685b      	ldr	r3, [r3, #4]
 801ed40:	0039      	movs	r1, r7
 801ed42:	f7e3 fc7b 	bl	800263c <__aeabi_dmul>
 801ed46:	0006      	movs	r6, r0
 801ed48:	000f      	movs	r7, r1
 801ed4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed4c:	106d      	asrs	r5, r5, #1
 801ed4e:	3308      	adds	r3, #8
 801ed50:	e7e2      	b.n	801ed18 <_dtoa_r+0x308>
 801ed52:	46c0      	nop			@ (mov r8, r8)
 801ed54:	08023a62 	.word	0x08023a62
 801ed58:	08023a79 	.word	0x08023a79
 801ed5c:	7ff00000 	.word	0x7ff00000
 801ed60:	0000270f 	.word	0x0000270f
 801ed64:	08023a5e 	.word	0x08023a5e
 801ed68:	08023a61 	.word	0x08023a61
 801ed6c:	08023a2a 	.word	0x08023a2a
 801ed70:	08023a29 	.word	0x08023a29
 801ed74:	3ff00000 	.word	0x3ff00000
 801ed78:	fffffc01 	.word	0xfffffc01
 801ed7c:	3ff80000 	.word	0x3ff80000
 801ed80:	636f4361 	.word	0x636f4361
 801ed84:	3fd287a7 	.word	0x3fd287a7
 801ed88:	8b60c8b3 	.word	0x8b60c8b3
 801ed8c:	3fc68a28 	.word	0x3fc68a28
 801ed90:	509f79fb 	.word	0x509f79fb
 801ed94:	3fd34413 	.word	0x3fd34413
 801ed98:	08023bd0 	.word	0x08023bd0
 801ed9c:	00000432 	.word	0x00000432
 801eda0:	00000412 	.word	0x00000412
 801eda4:	fe100000 	.word	0xfe100000
 801eda8:	08023ad1 	.word	0x08023ad1
 801edac:	08023ba8 	.word	0x08023ba8
 801edb0:	9b04      	ldr	r3, [sp, #16]
 801edb2:	2402      	movs	r4, #2
 801edb4:	2b00      	cmp	r3, #0
 801edb6:	d016      	beq.n	801ede6 <_dtoa_r+0x3d6>
 801edb8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801edba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801edbc:	220f      	movs	r2, #15
 801edbe:	425d      	negs	r5, r3
 801edc0:	402a      	ands	r2, r5
 801edc2:	4bd7      	ldr	r3, [pc, #860]	@ (801f120 <_dtoa_r+0x710>)
 801edc4:	00d2      	lsls	r2, r2, #3
 801edc6:	189b      	adds	r3, r3, r2
 801edc8:	681a      	ldr	r2, [r3, #0]
 801edca:	685b      	ldr	r3, [r3, #4]
 801edcc:	f7e3 fc36 	bl	800263c <__aeabi_dmul>
 801edd0:	2701      	movs	r7, #1
 801edd2:	2300      	movs	r3, #0
 801edd4:	900a      	str	r0, [sp, #40]	@ 0x28
 801edd6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801edd8:	4ed2      	ldr	r6, [pc, #840]	@ (801f124 <_dtoa_r+0x714>)
 801edda:	112d      	asrs	r5, r5, #4
 801eddc:	2d00      	cmp	r5, #0
 801edde:	d000      	beq.n	801ede2 <_dtoa_r+0x3d2>
 801ede0:	e0ba      	b.n	801ef58 <_dtoa_r+0x548>
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d1a1      	bne.n	801ed2a <_dtoa_r+0x31a>
 801ede6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ede8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801edea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801edec:	2b00      	cmp	r3, #0
 801edee:	d100      	bne.n	801edf2 <_dtoa_r+0x3e2>
 801edf0:	e0bd      	b.n	801ef6e <_dtoa_r+0x55e>
 801edf2:	2200      	movs	r2, #0
 801edf4:	0030      	movs	r0, r6
 801edf6:	0039      	movs	r1, r7
 801edf8:	4bcb      	ldr	r3, [pc, #812]	@ (801f128 <_dtoa_r+0x718>)
 801edfa:	f7e1 fb5f 	bl	80004bc <__aeabi_dcmplt>
 801edfe:	2800      	cmp	r0, #0
 801ee00:	d100      	bne.n	801ee04 <_dtoa_r+0x3f4>
 801ee02:	e0b4      	b.n	801ef6e <_dtoa_r+0x55e>
 801ee04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d100      	bne.n	801ee0c <_dtoa_r+0x3fc>
 801ee0a:	e0b0      	b.n	801ef6e <_dtoa_r+0x55e>
 801ee0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee0e:	2b00      	cmp	r3, #0
 801ee10:	dd39      	ble.n	801ee86 <_dtoa_r+0x476>
 801ee12:	9b04      	ldr	r3, [sp, #16]
 801ee14:	2200      	movs	r2, #0
 801ee16:	3b01      	subs	r3, #1
 801ee18:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee1a:	0030      	movs	r0, r6
 801ee1c:	4bc3      	ldr	r3, [pc, #780]	@ (801f12c <_dtoa_r+0x71c>)
 801ee1e:	0039      	movs	r1, r7
 801ee20:	f7e3 fc0c 	bl	800263c <__aeabi_dmul>
 801ee24:	900a      	str	r0, [sp, #40]	@ 0x28
 801ee26:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ee28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee2a:	3401      	adds	r4, #1
 801ee2c:	0020      	movs	r0, r4
 801ee2e:	9311      	str	r3, [sp, #68]	@ 0x44
 801ee30:	f7e4 fac6 	bl	80033c0 <__aeabi_i2d>
 801ee34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ee36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ee38:	f7e3 fc00 	bl	800263c <__aeabi_dmul>
 801ee3c:	4bbc      	ldr	r3, [pc, #752]	@ (801f130 <_dtoa_r+0x720>)
 801ee3e:	2200      	movs	r2, #0
 801ee40:	f7e2 fc54 	bl	80016ec <__aeabi_dadd>
 801ee44:	4bbb      	ldr	r3, [pc, #748]	@ (801f134 <_dtoa_r+0x724>)
 801ee46:	0006      	movs	r6, r0
 801ee48:	18cf      	adds	r7, r1, r3
 801ee4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ee4c:	2b00      	cmp	r3, #0
 801ee4e:	d000      	beq.n	801ee52 <_dtoa_r+0x442>
 801ee50:	e091      	b.n	801ef76 <_dtoa_r+0x566>
 801ee52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ee54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ee56:	2200      	movs	r2, #0
 801ee58:	4bb7      	ldr	r3, [pc, #732]	@ (801f138 <_dtoa_r+0x728>)
 801ee5a:	f7e3 feb7 	bl	8002bcc <__aeabi_dsub>
 801ee5e:	0032      	movs	r2, r6
 801ee60:	003b      	movs	r3, r7
 801ee62:	0004      	movs	r4, r0
 801ee64:	000d      	movs	r5, r1
 801ee66:	f7e1 fb3d 	bl	80004e4 <__aeabi_dcmpgt>
 801ee6a:	2800      	cmp	r0, #0
 801ee6c:	d000      	beq.n	801ee70 <_dtoa_r+0x460>
 801ee6e:	e29d      	b.n	801f3ac <_dtoa_r+0x99c>
 801ee70:	2180      	movs	r1, #128	@ 0x80
 801ee72:	0609      	lsls	r1, r1, #24
 801ee74:	187b      	adds	r3, r7, r1
 801ee76:	0032      	movs	r2, r6
 801ee78:	0020      	movs	r0, r4
 801ee7a:	0029      	movs	r1, r5
 801ee7c:	f7e1 fb1e 	bl	80004bc <__aeabi_dcmplt>
 801ee80:	2800      	cmp	r0, #0
 801ee82:	d000      	beq.n	801ee86 <_dtoa_r+0x476>
 801ee84:	e130      	b.n	801f0e8 <_dtoa_r+0x6d8>
 801ee86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ee88:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ee8a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee8c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ee8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	da00      	bge.n	801ee96 <_dtoa_r+0x486>
 801ee94:	e177      	b.n	801f186 <_dtoa_r+0x776>
 801ee96:	9a04      	ldr	r2, [sp, #16]
 801ee98:	2a0e      	cmp	r2, #14
 801ee9a:	dd00      	ble.n	801ee9e <_dtoa_r+0x48e>
 801ee9c:	e173      	b.n	801f186 <_dtoa_r+0x776>
 801ee9e:	4ba0      	ldr	r3, [pc, #640]	@ (801f120 <_dtoa_r+0x710>)
 801eea0:	00d2      	lsls	r2, r2, #3
 801eea2:	189b      	adds	r3, r3, r2
 801eea4:	685c      	ldr	r4, [r3, #4]
 801eea6:	681b      	ldr	r3, [r3, #0]
 801eea8:	9306      	str	r3, [sp, #24]
 801eeaa:	9407      	str	r4, [sp, #28]
 801eeac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801eeae:	2b00      	cmp	r3, #0
 801eeb0:	da03      	bge.n	801eeba <_dtoa_r+0x4aa>
 801eeb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	dc00      	bgt.n	801eeba <_dtoa_r+0x4aa>
 801eeb8:	e106      	b.n	801f0c8 <_dtoa_r+0x6b8>
 801eeba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801eebc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801eebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eec0:	9d08      	ldr	r5, [sp, #32]
 801eec2:	3b01      	subs	r3, #1
 801eec4:	195b      	adds	r3, r3, r5
 801eec6:	930a      	str	r3, [sp, #40]	@ 0x28
 801eec8:	9a06      	ldr	r2, [sp, #24]
 801eeca:	9b07      	ldr	r3, [sp, #28]
 801eecc:	0030      	movs	r0, r6
 801eece:	0039      	movs	r1, r7
 801eed0:	f7e2 ff70 	bl	8001db4 <__aeabi_ddiv>
 801eed4:	f7e4 fa38 	bl	8003348 <__aeabi_d2iz>
 801eed8:	9009      	str	r0, [sp, #36]	@ 0x24
 801eeda:	f7e4 fa71 	bl	80033c0 <__aeabi_i2d>
 801eede:	9a06      	ldr	r2, [sp, #24]
 801eee0:	9b07      	ldr	r3, [sp, #28]
 801eee2:	f7e3 fbab 	bl	800263c <__aeabi_dmul>
 801eee6:	0002      	movs	r2, r0
 801eee8:	000b      	movs	r3, r1
 801eeea:	0030      	movs	r0, r6
 801eeec:	0039      	movs	r1, r7
 801eeee:	f7e3 fe6d 	bl	8002bcc <__aeabi_dsub>
 801eef2:	002b      	movs	r3, r5
 801eef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eef6:	3501      	adds	r5, #1
 801eef8:	3230      	adds	r2, #48	@ 0x30
 801eefa:	701a      	strb	r2, [r3, #0]
 801eefc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801eefe:	002c      	movs	r4, r5
 801ef00:	429a      	cmp	r2, r3
 801ef02:	d000      	beq.n	801ef06 <_dtoa_r+0x4f6>
 801ef04:	e131      	b.n	801f16a <_dtoa_r+0x75a>
 801ef06:	0002      	movs	r2, r0
 801ef08:	000b      	movs	r3, r1
 801ef0a:	f7e2 fbef 	bl	80016ec <__aeabi_dadd>
 801ef0e:	9a06      	ldr	r2, [sp, #24]
 801ef10:	9b07      	ldr	r3, [sp, #28]
 801ef12:	0006      	movs	r6, r0
 801ef14:	000f      	movs	r7, r1
 801ef16:	f7e1 fae5 	bl	80004e4 <__aeabi_dcmpgt>
 801ef1a:	2800      	cmp	r0, #0
 801ef1c:	d000      	beq.n	801ef20 <_dtoa_r+0x510>
 801ef1e:	e10f      	b.n	801f140 <_dtoa_r+0x730>
 801ef20:	9a06      	ldr	r2, [sp, #24]
 801ef22:	9b07      	ldr	r3, [sp, #28]
 801ef24:	0030      	movs	r0, r6
 801ef26:	0039      	movs	r1, r7
 801ef28:	f7e1 fac2 	bl	80004b0 <__aeabi_dcmpeq>
 801ef2c:	2800      	cmp	r0, #0
 801ef2e:	d003      	beq.n	801ef38 <_dtoa_r+0x528>
 801ef30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef32:	07dd      	lsls	r5, r3, #31
 801ef34:	d500      	bpl.n	801ef38 <_dtoa_r+0x528>
 801ef36:	e103      	b.n	801f140 <_dtoa_r+0x730>
 801ef38:	9905      	ldr	r1, [sp, #20]
 801ef3a:	9803      	ldr	r0, [sp, #12]
 801ef3c:	f001 f812 	bl	801ff64 <_Bfree>
 801ef40:	2300      	movs	r3, #0
 801ef42:	7023      	strb	r3, [r4, #0]
 801ef44:	9b04      	ldr	r3, [sp, #16]
 801ef46:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801ef48:	3301      	adds	r3, #1
 801ef4a:	6013      	str	r3, [r2, #0]
 801ef4c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d100      	bne.n	801ef54 <_dtoa_r+0x544>
 801ef52:	e5a7      	b.n	801eaa4 <_dtoa_r+0x94>
 801ef54:	601c      	str	r4, [r3, #0]
 801ef56:	e5a5      	b.n	801eaa4 <_dtoa_r+0x94>
 801ef58:	423d      	tst	r5, r7
 801ef5a:	d005      	beq.n	801ef68 <_dtoa_r+0x558>
 801ef5c:	6832      	ldr	r2, [r6, #0]
 801ef5e:	6873      	ldr	r3, [r6, #4]
 801ef60:	f7e3 fb6c 	bl	800263c <__aeabi_dmul>
 801ef64:	003b      	movs	r3, r7
 801ef66:	3401      	adds	r4, #1
 801ef68:	106d      	asrs	r5, r5, #1
 801ef6a:	3608      	adds	r6, #8
 801ef6c:	e736      	b.n	801eddc <_dtoa_r+0x3cc>
 801ef6e:	9b04      	ldr	r3, [sp, #16]
 801ef70:	930c      	str	r3, [sp, #48]	@ 0x30
 801ef72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef74:	e75a      	b.n	801ee2c <_dtoa_r+0x41c>
 801ef76:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ef78:	4b69      	ldr	r3, [pc, #420]	@ (801f120 <_dtoa_r+0x710>)
 801ef7a:	3a01      	subs	r2, #1
 801ef7c:	00d2      	lsls	r2, r2, #3
 801ef7e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801ef80:	189b      	adds	r3, r3, r2
 801ef82:	681a      	ldr	r2, [r3, #0]
 801ef84:	685b      	ldr	r3, [r3, #4]
 801ef86:	2900      	cmp	r1, #0
 801ef88:	d04c      	beq.n	801f024 <_dtoa_r+0x614>
 801ef8a:	2000      	movs	r0, #0
 801ef8c:	496b      	ldr	r1, [pc, #428]	@ (801f13c <_dtoa_r+0x72c>)
 801ef8e:	f7e2 ff11 	bl	8001db4 <__aeabi_ddiv>
 801ef92:	0032      	movs	r2, r6
 801ef94:	003b      	movs	r3, r7
 801ef96:	f7e3 fe19 	bl	8002bcc <__aeabi_dsub>
 801ef9a:	9a08      	ldr	r2, [sp, #32]
 801ef9c:	0006      	movs	r6, r0
 801ef9e:	4694      	mov	ip, r2
 801efa0:	000f      	movs	r7, r1
 801efa2:	9b08      	ldr	r3, [sp, #32]
 801efa4:	9316      	str	r3, [sp, #88]	@ 0x58
 801efa6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801efa8:	4463      	add	r3, ip
 801efaa:	9311      	str	r3, [sp, #68]	@ 0x44
 801efac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801efae:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801efb0:	f7e4 f9ca 	bl	8003348 <__aeabi_d2iz>
 801efb4:	0005      	movs	r5, r0
 801efb6:	f7e4 fa03 	bl	80033c0 <__aeabi_i2d>
 801efba:	0002      	movs	r2, r0
 801efbc:	000b      	movs	r3, r1
 801efbe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801efc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801efc2:	f7e3 fe03 	bl	8002bcc <__aeabi_dsub>
 801efc6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801efc8:	3530      	adds	r5, #48	@ 0x30
 801efca:	1c5c      	adds	r4, r3, #1
 801efcc:	701d      	strb	r5, [r3, #0]
 801efce:	0032      	movs	r2, r6
 801efd0:	003b      	movs	r3, r7
 801efd2:	900a      	str	r0, [sp, #40]	@ 0x28
 801efd4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801efd6:	f7e1 fa71 	bl	80004bc <__aeabi_dcmplt>
 801efda:	2800      	cmp	r0, #0
 801efdc:	d16a      	bne.n	801f0b4 <_dtoa_r+0x6a4>
 801efde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801efe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801efe2:	2000      	movs	r0, #0
 801efe4:	4950      	ldr	r1, [pc, #320]	@ (801f128 <_dtoa_r+0x718>)
 801efe6:	f7e3 fdf1 	bl	8002bcc <__aeabi_dsub>
 801efea:	0032      	movs	r2, r6
 801efec:	003b      	movs	r3, r7
 801efee:	f7e1 fa65 	bl	80004bc <__aeabi_dcmplt>
 801eff2:	2800      	cmp	r0, #0
 801eff4:	d000      	beq.n	801eff8 <_dtoa_r+0x5e8>
 801eff6:	e0a5      	b.n	801f144 <_dtoa_r+0x734>
 801eff8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801effa:	42a3      	cmp	r3, r4
 801effc:	d100      	bne.n	801f000 <_dtoa_r+0x5f0>
 801effe:	e742      	b.n	801ee86 <_dtoa_r+0x476>
 801f000:	2200      	movs	r2, #0
 801f002:	0030      	movs	r0, r6
 801f004:	0039      	movs	r1, r7
 801f006:	4b49      	ldr	r3, [pc, #292]	@ (801f12c <_dtoa_r+0x71c>)
 801f008:	f7e3 fb18 	bl	800263c <__aeabi_dmul>
 801f00c:	2200      	movs	r2, #0
 801f00e:	0006      	movs	r6, r0
 801f010:	000f      	movs	r7, r1
 801f012:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f014:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f016:	4b45      	ldr	r3, [pc, #276]	@ (801f12c <_dtoa_r+0x71c>)
 801f018:	f7e3 fb10 	bl	800263c <__aeabi_dmul>
 801f01c:	9416      	str	r4, [sp, #88]	@ 0x58
 801f01e:	900a      	str	r0, [sp, #40]	@ 0x28
 801f020:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f022:	e7c3      	b.n	801efac <_dtoa_r+0x59c>
 801f024:	0030      	movs	r0, r6
 801f026:	0039      	movs	r1, r7
 801f028:	f7e3 fb08 	bl	800263c <__aeabi_dmul>
 801f02c:	9d08      	ldr	r5, [sp, #32]
 801f02e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f030:	002b      	movs	r3, r5
 801f032:	4694      	mov	ip, r2
 801f034:	9016      	str	r0, [sp, #88]	@ 0x58
 801f036:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f038:	4463      	add	r3, ip
 801f03a:	9319      	str	r3, [sp, #100]	@ 0x64
 801f03c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f03e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f040:	f7e4 f982 	bl	8003348 <__aeabi_d2iz>
 801f044:	0004      	movs	r4, r0
 801f046:	f7e4 f9bb 	bl	80033c0 <__aeabi_i2d>
 801f04a:	000b      	movs	r3, r1
 801f04c:	0002      	movs	r2, r0
 801f04e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f052:	f7e3 fdbb 	bl	8002bcc <__aeabi_dsub>
 801f056:	3430      	adds	r4, #48	@ 0x30
 801f058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f05a:	702c      	strb	r4, [r5, #0]
 801f05c:	3501      	adds	r5, #1
 801f05e:	0006      	movs	r6, r0
 801f060:	000f      	movs	r7, r1
 801f062:	42ab      	cmp	r3, r5
 801f064:	d129      	bne.n	801f0ba <_dtoa_r+0x6aa>
 801f066:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f068:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f06a:	9b08      	ldr	r3, [sp, #32]
 801f06c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f06e:	469c      	mov	ip, r3
 801f070:	2200      	movs	r2, #0
 801f072:	4b32      	ldr	r3, [pc, #200]	@ (801f13c <_dtoa_r+0x72c>)
 801f074:	4464      	add	r4, ip
 801f076:	f7e2 fb39 	bl	80016ec <__aeabi_dadd>
 801f07a:	0002      	movs	r2, r0
 801f07c:	000b      	movs	r3, r1
 801f07e:	0030      	movs	r0, r6
 801f080:	0039      	movs	r1, r7
 801f082:	f7e1 fa2f 	bl	80004e4 <__aeabi_dcmpgt>
 801f086:	2800      	cmp	r0, #0
 801f088:	d15c      	bne.n	801f144 <_dtoa_r+0x734>
 801f08a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f08c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f08e:	2000      	movs	r0, #0
 801f090:	492a      	ldr	r1, [pc, #168]	@ (801f13c <_dtoa_r+0x72c>)
 801f092:	f7e3 fd9b 	bl	8002bcc <__aeabi_dsub>
 801f096:	0002      	movs	r2, r0
 801f098:	000b      	movs	r3, r1
 801f09a:	0030      	movs	r0, r6
 801f09c:	0039      	movs	r1, r7
 801f09e:	f7e1 fa0d 	bl	80004bc <__aeabi_dcmplt>
 801f0a2:	2800      	cmp	r0, #0
 801f0a4:	d100      	bne.n	801f0a8 <_dtoa_r+0x698>
 801f0a6:	e6ee      	b.n	801ee86 <_dtoa_r+0x476>
 801f0a8:	0023      	movs	r3, r4
 801f0aa:	3c01      	subs	r4, #1
 801f0ac:	7822      	ldrb	r2, [r4, #0]
 801f0ae:	2a30      	cmp	r2, #48	@ 0x30
 801f0b0:	d0fa      	beq.n	801f0a8 <_dtoa_r+0x698>
 801f0b2:	001c      	movs	r4, r3
 801f0b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f0b6:	9304      	str	r3, [sp, #16]
 801f0b8:	e73e      	b.n	801ef38 <_dtoa_r+0x528>
 801f0ba:	2200      	movs	r2, #0
 801f0bc:	4b1b      	ldr	r3, [pc, #108]	@ (801f12c <_dtoa_r+0x71c>)
 801f0be:	f7e3 fabd 	bl	800263c <__aeabi_dmul>
 801f0c2:	900a      	str	r0, [sp, #40]	@ 0x28
 801f0c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f0c6:	e7b9      	b.n	801f03c <_dtoa_r+0x62c>
 801f0c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0ca:	2b00      	cmp	r3, #0
 801f0cc:	d10c      	bne.n	801f0e8 <_dtoa_r+0x6d8>
 801f0ce:	9806      	ldr	r0, [sp, #24]
 801f0d0:	9907      	ldr	r1, [sp, #28]
 801f0d2:	2200      	movs	r2, #0
 801f0d4:	4b18      	ldr	r3, [pc, #96]	@ (801f138 <_dtoa_r+0x728>)
 801f0d6:	f7e3 fab1 	bl	800263c <__aeabi_dmul>
 801f0da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0de:	f7e1 fa0b 	bl	80004f8 <__aeabi_dcmpge>
 801f0e2:	2800      	cmp	r0, #0
 801f0e4:	d100      	bne.n	801f0e8 <_dtoa_r+0x6d8>
 801f0e6:	e164      	b.n	801f3b2 <_dtoa_r+0x9a2>
 801f0e8:	2600      	movs	r6, #0
 801f0ea:	0037      	movs	r7, r6
 801f0ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f0ee:	9c08      	ldr	r4, [sp, #32]
 801f0f0:	43db      	mvns	r3, r3
 801f0f2:	930c      	str	r3, [sp, #48]	@ 0x30
 801f0f4:	2300      	movs	r3, #0
 801f0f6:	9304      	str	r3, [sp, #16]
 801f0f8:	0031      	movs	r1, r6
 801f0fa:	9803      	ldr	r0, [sp, #12]
 801f0fc:	f000 ff32 	bl	801ff64 <_Bfree>
 801f100:	2f00      	cmp	r7, #0
 801f102:	d0d7      	beq.n	801f0b4 <_dtoa_r+0x6a4>
 801f104:	9b04      	ldr	r3, [sp, #16]
 801f106:	2b00      	cmp	r3, #0
 801f108:	d005      	beq.n	801f116 <_dtoa_r+0x706>
 801f10a:	42bb      	cmp	r3, r7
 801f10c:	d003      	beq.n	801f116 <_dtoa_r+0x706>
 801f10e:	0019      	movs	r1, r3
 801f110:	9803      	ldr	r0, [sp, #12]
 801f112:	f000 ff27 	bl	801ff64 <_Bfree>
 801f116:	0039      	movs	r1, r7
 801f118:	9803      	ldr	r0, [sp, #12]
 801f11a:	f000 ff23 	bl	801ff64 <_Bfree>
 801f11e:	e7c9      	b.n	801f0b4 <_dtoa_r+0x6a4>
 801f120:	08023bd0 	.word	0x08023bd0
 801f124:	08023ba8 	.word	0x08023ba8
 801f128:	3ff00000 	.word	0x3ff00000
 801f12c:	40240000 	.word	0x40240000
 801f130:	401c0000 	.word	0x401c0000
 801f134:	fcc00000 	.word	0xfcc00000
 801f138:	40140000 	.word	0x40140000
 801f13c:	3fe00000 	.word	0x3fe00000
 801f140:	9b04      	ldr	r3, [sp, #16]
 801f142:	930c      	str	r3, [sp, #48]	@ 0x30
 801f144:	0023      	movs	r3, r4
 801f146:	001c      	movs	r4, r3
 801f148:	3b01      	subs	r3, #1
 801f14a:	781a      	ldrb	r2, [r3, #0]
 801f14c:	2a39      	cmp	r2, #57	@ 0x39
 801f14e:	d108      	bne.n	801f162 <_dtoa_r+0x752>
 801f150:	9a08      	ldr	r2, [sp, #32]
 801f152:	429a      	cmp	r2, r3
 801f154:	d1f7      	bne.n	801f146 <_dtoa_r+0x736>
 801f156:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f158:	9908      	ldr	r1, [sp, #32]
 801f15a:	3201      	adds	r2, #1
 801f15c:	920c      	str	r2, [sp, #48]	@ 0x30
 801f15e:	2230      	movs	r2, #48	@ 0x30
 801f160:	700a      	strb	r2, [r1, #0]
 801f162:	781a      	ldrb	r2, [r3, #0]
 801f164:	3201      	adds	r2, #1
 801f166:	701a      	strb	r2, [r3, #0]
 801f168:	e7a4      	b.n	801f0b4 <_dtoa_r+0x6a4>
 801f16a:	2200      	movs	r2, #0
 801f16c:	4bc6      	ldr	r3, [pc, #792]	@ (801f488 <_dtoa_r+0xa78>)
 801f16e:	f7e3 fa65 	bl	800263c <__aeabi_dmul>
 801f172:	2200      	movs	r2, #0
 801f174:	2300      	movs	r3, #0
 801f176:	0006      	movs	r6, r0
 801f178:	000f      	movs	r7, r1
 801f17a:	f7e1 f999 	bl	80004b0 <__aeabi_dcmpeq>
 801f17e:	2800      	cmp	r0, #0
 801f180:	d100      	bne.n	801f184 <_dtoa_r+0x774>
 801f182:	e6a1      	b.n	801eec8 <_dtoa_r+0x4b8>
 801f184:	e6d8      	b.n	801ef38 <_dtoa_r+0x528>
 801f186:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801f188:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f18a:	9c06      	ldr	r4, [sp, #24]
 801f18c:	2f00      	cmp	r7, #0
 801f18e:	d014      	beq.n	801f1ba <_dtoa_r+0x7aa>
 801f190:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f192:	2a01      	cmp	r2, #1
 801f194:	dd00      	ble.n	801f198 <_dtoa_r+0x788>
 801f196:	e0c8      	b.n	801f32a <_dtoa_r+0x91a>
 801f198:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f19a:	2a00      	cmp	r2, #0
 801f19c:	d100      	bne.n	801f1a0 <_dtoa_r+0x790>
 801f19e:	e0be      	b.n	801f31e <_dtoa_r+0x90e>
 801f1a0:	4aba      	ldr	r2, [pc, #744]	@ (801f48c <_dtoa_r+0xa7c>)
 801f1a2:	189b      	adds	r3, r3, r2
 801f1a4:	9a06      	ldr	r2, [sp, #24]
 801f1a6:	2101      	movs	r1, #1
 801f1a8:	18d2      	adds	r2, r2, r3
 801f1aa:	9206      	str	r2, [sp, #24]
 801f1ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f1ae:	9803      	ldr	r0, [sp, #12]
 801f1b0:	18d3      	adds	r3, r2, r3
 801f1b2:	930d      	str	r3, [sp, #52]	@ 0x34
 801f1b4:	f000 ffda 	bl	802016c <__i2b>
 801f1b8:	0007      	movs	r7, r0
 801f1ba:	2c00      	cmp	r4, #0
 801f1bc:	d00e      	beq.n	801f1dc <_dtoa_r+0x7cc>
 801f1be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	dd0b      	ble.n	801f1dc <_dtoa_r+0x7cc>
 801f1c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f1c6:	0023      	movs	r3, r4
 801f1c8:	4294      	cmp	r4, r2
 801f1ca:	dd00      	ble.n	801f1ce <_dtoa_r+0x7be>
 801f1cc:	0013      	movs	r3, r2
 801f1ce:	9a06      	ldr	r2, [sp, #24]
 801f1d0:	1ae4      	subs	r4, r4, r3
 801f1d2:	1ad2      	subs	r2, r2, r3
 801f1d4:	9206      	str	r2, [sp, #24]
 801f1d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f1d8:	1ad3      	subs	r3, r2, r3
 801f1da:	930d      	str	r3, [sp, #52]	@ 0x34
 801f1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f1de:	2b00      	cmp	r3, #0
 801f1e0:	d01f      	beq.n	801f222 <_dtoa_r+0x812>
 801f1e2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d100      	bne.n	801f1ea <_dtoa_r+0x7da>
 801f1e8:	e0b5      	b.n	801f356 <_dtoa_r+0x946>
 801f1ea:	2d00      	cmp	r5, #0
 801f1ec:	d010      	beq.n	801f210 <_dtoa_r+0x800>
 801f1ee:	0039      	movs	r1, r7
 801f1f0:	002a      	movs	r2, r5
 801f1f2:	9803      	ldr	r0, [sp, #12]
 801f1f4:	f001 f884 	bl	8020300 <__pow5mult>
 801f1f8:	9a05      	ldr	r2, [sp, #20]
 801f1fa:	0001      	movs	r1, r0
 801f1fc:	0007      	movs	r7, r0
 801f1fe:	9803      	ldr	r0, [sp, #12]
 801f200:	f000 ffcc 	bl	802019c <__multiply>
 801f204:	0006      	movs	r6, r0
 801f206:	9905      	ldr	r1, [sp, #20]
 801f208:	9803      	ldr	r0, [sp, #12]
 801f20a:	f000 feab 	bl	801ff64 <_Bfree>
 801f20e:	9605      	str	r6, [sp, #20]
 801f210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f212:	1b5a      	subs	r2, r3, r5
 801f214:	42ab      	cmp	r3, r5
 801f216:	d004      	beq.n	801f222 <_dtoa_r+0x812>
 801f218:	9905      	ldr	r1, [sp, #20]
 801f21a:	9803      	ldr	r0, [sp, #12]
 801f21c:	f001 f870 	bl	8020300 <__pow5mult>
 801f220:	9005      	str	r0, [sp, #20]
 801f222:	2101      	movs	r1, #1
 801f224:	9803      	ldr	r0, [sp, #12]
 801f226:	f000 ffa1 	bl	802016c <__i2b>
 801f22a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f22c:	0006      	movs	r6, r0
 801f22e:	2b00      	cmp	r3, #0
 801f230:	d100      	bne.n	801f234 <_dtoa_r+0x824>
 801f232:	e1bc      	b.n	801f5ae <_dtoa_r+0xb9e>
 801f234:	001a      	movs	r2, r3
 801f236:	0001      	movs	r1, r0
 801f238:	9803      	ldr	r0, [sp, #12]
 801f23a:	f001 f861 	bl	8020300 <__pow5mult>
 801f23e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f240:	0006      	movs	r6, r0
 801f242:	2500      	movs	r5, #0
 801f244:	2b01      	cmp	r3, #1
 801f246:	dc16      	bgt.n	801f276 <_dtoa_r+0x866>
 801f248:	2500      	movs	r5, #0
 801f24a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f24c:	42ab      	cmp	r3, r5
 801f24e:	d10e      	bne.n	801f26e <_dtoa_r+0x85e>
 801f250:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f252:	031b      	lsls	r3, r3, #12
 801f254:	42ab      	cmp	r3, r5
 801f256:	d10a      	bne.n	801f26e <_dtoa_r+0x85e>
 801f258:	4b8d      	ldr	r3, [pc, #564]	@ (801f490 <_dtoa_r+0xa80>)
 801f25a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f25c:	4213      	tst	r3, r2
 801f25e:	d006      	beq.n	801f26e <_dtoa_r+0x85e>
 801f260:	9b06      	ldr	r3, [sp, #24]
 801f262:	3501      	adds	r5, #1
 801f264:	3301      	adds	r3, #1
 801f266:	9306      	str	r3, [sp, #24]
 801f268:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f26a:	3301      	adds	r3, #1
 801f26c:	930d      	str	r3, [sp, #52]	@ 0x34
 801f26e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f270:	2001      	movs	r0, #1
 801f272:	2b00      	cmp	r3, #0
 801f274:	d008      	beq.n	801f288 <_dtoa_r+0x878>
 801f276:	6933      	ldr	r3, [r6, #16]
 801f278:	3303      	adds	r3, #3
 801f27a:	009b      	lsls	r3, r3, #2
 801f27c:	18f3      	adds	r3, r6, r3
 801f27e:	6858      	ldr	r0, [r3, #4]
 801f280:	f000 ff24 	bl	80200cc <__hi0bits>
 801f284:	2320      	movs	r3, #32
 801f286:	1a18      	subs	r0, r3, r0
 801f288:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f28a:	1818      	adds	r0, r3, r0
 801f28c:	0002      	movs	r2, r0
 801f28e:	231f      	movs	r3, #31
 801f290:	401a      	ands	r2, r3
 801f292:	4218      	tst	r0, r3
 801f294:	d065      	beq.n	801f362 <_dtoa_r+0x952>
 801f296:	3301      	adds	r3, #1
 801f298:	1a9b      	subs	r3, r3, r2
 801f29a:	2b04      	cmp	r3, #4
 801f29c:	dd5d      	ble.n	801f35a <_dtoa_r+0x94a>
 801f29e:	231c      	movs	r3, #28
 801f2a0:	1a9b      	subs	r3, r3, r2
 801f2a2:	9a06      	ldr	r2, [sp, #24]
 801f2a4:	18e4      	adds	r4, r4, r3
 801f2a6:	18d2      	adds	r2, r2, r3
 801f2a8:	9206      	str	r2, [sp, #24]
 801f2aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f2ac:	18d3      	adds	r3, r2, r3
 801f2ae:	930d      	str	r3, [sp, #52]	@ 0x34
 801f2b0:	9b06      	ldr	r3, [sp, #24]
 801f2b2:	2b00      	cmp	r3, #0
 801f2b4:	dd05      	ble.n	801f2c2 <_dtoa_r+0x8b2>
 801f2b6:	001a      	movs	r2, r3
 801f2b8:	9905      	ldr	r1, [sp, #20]
 801f2ba:	9803      	ldr	r0, [sp, #12]
 801f2bc:	f001 f87c 	bl	80203b8 <__lshift>
 801f2c0:	9005      	str	r0, [sp, #20]
 801f2c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f2c4:	2b00      	cmp	r3, #0
 801f2c6:	dd05      	ble.n	801f2d4 <_dtoa_r+0x8c4>
 801f2c8:	0031      	movs	r1, r6
 801f2ca:	001a      	movs	r2, r3
 801f2cc:	9803      	ldr	r0, [sp, #12]
 801f2ce:	f001 f873 	bl	80203b8 <__lshift>
 801f2d2:	0006      	movs	r6, r0
 801f2d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d045      	beq.n	801f366 <_dtoa_r+0x956>
 801f2da:	0031      	movs	r1, r6
 801f2dc:	9805      	ldr	r0, [sp, #20]
 801f2de:	f001 f8d7 	bl	8020490 <__mcmp>
 801f2e2:	2800      	cmp	r0, #0
 801f2e4:	da3f      	bge.n	801f366 <_dtoa_r+0x956>
 801f2e6:	9b04      	ldr	r3, [sp, #16]
 801f2e8:	220a      	movs	r2, #10
 801f2ea:	3b01      	subs	r3, #1
 801f2ec:	930c      	str	r3, [sp, #48]	@ 0x30
 801f2ee:	9905      	ldr	r1, [sp, #20]
 801f2f0:	2300      	movs	r3, #0
 801f2f2:	9803      	ldr	r0, [sp, #12]
 801f2f4:	f000 fe5a 	bl	801ffac <__multadd>
 801f2f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f2fa:	9005      	str	r0, [sp, #20]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d100      	bne.n	801f302 <_dtoa_r+0x8f2>
 801f300:	e15c      	b.n	801f5bc <_dtoa_r+0xbac>
 801f302:	2300      	movs	r3, #0
 801f304:	0039      	movs	r1, r7
 801f306:	220a      	movs	r2, #10
 801f308:	9803      	ldr	r0, [sp, #12]
 801f30a:	f000 fe4f 	bl	801ffac <__multadd>
 801f30e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f310:	0007      	movs	r7, r0
 801f312:	2b00      	cmp	r3, #0
 801f314:	dc55      	bgt.n	801f3c2 <_dtoa_r+0x9b2>
 801f316:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f318:	2b02      	cmp	r3, #2
 801f31a:	dc2d      	bgt.n	801f378 <_dtoa_r+0x968>
 801f31c:	e051      	b.n	801f3c2 <_dtoa_r+0x9b2>
 801f31e:	2336      	movs	r3, #54	@ 0x36
 801f320:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f322:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801f324:	9c06      	ldr	r4, [sp, #24]
 801f326:	1a9b      	subs	r3, r3, r2
 801f328:	e73c      	b.n	801f1a4 <_dtoa_r+0x794>
 801f32a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f32c:	1e5d      	subs	r5, r3, #1
 801f32e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f330:	42ab      	cmp	r3, r5
 801f332:	db08      	blt.n	801f346 <_dtoa_r+0x936>
 801f334:	1b5d      	subs	r5, r3, r5
 801f336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f338:	9c06      	ldr	r4, [sp, #24]
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	db00      	blt.n	801f340 <_dtoa_r+0x930>
 801f33e:	e731      	b.n	801f1a4 <_dtoa_r+0x794>
 801f340:	1ae4      	subs	r4, r4, r3
 801f342:	2300      	movs	r3, #0
 801f344:	e72e      	b.n	801f1a4 <_dtoa_r+0x794>
 801f346:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f348:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f34a:	1aeb      	subs	r3, r5, r3
 801f34c:	18d3      	adds	r3, r2, r3
 801f34e:	950f      	str	r5, [sp, #60]	@ 0x3c
 801f350:	9314      	str	r3, [sp, #80]	@ 0x50
 801f352:	2500      	movs	r5, #0
 801f354:	e7ef      	b.n	801f336 <_dtoa_r+0x926>
 801f356:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f358:	e75e      	b.n	801f218 <_dtoa_r+0x808>
 801f35a:	2b04      	cmp	r3, #4
 801f35c:	d0a8      	beq.n	801f2b0 <_dtoa_r+0x8a0>
 801f35e:	331c      	adds	r3, #28
 801f360:	e79f      	b.n	801f2a2 <_dtoa_r+0x892>
 801f362:	0013      	movs	r3, r2
 801f364:	e7fb      	b.n	801f35e <_dtoa_r+0x94e>
 801f366:	9b04      	ldr	r3, [sp, #16]
 801f368:	930c      	str	r3, [sp, #48]	@ 0x30
 801f36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f36c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f36e:	2b00      	cmp	r3, #0
 801f370:	dc23      	bgt.n	801f3ba <_dtoa_r+0x9aa>
 801f372:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f374:	2b02      	cmp	r3, #2
 801f376:	dd20      	ble.n	801f3ba <_dtoa_r+0x9aa>
 801f378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	d000      	beq.n	801f380 <_dtoa_r+0x970>
 801f37e:	e6b5      	b.n	801f0ec <_dtoa_r+0x6dc>
 801f380:	0031      	movs	r1, r6
 801f382:	2205      	movs	r2, #5
 801f384:	9803      	ldr	r0, [sp, #12]
 801f386:	f000 fe11 	bl	801ffac <__multadd>
 801f38a:	0006      	movs	r6, r0
 801f38c:	0001      	movs	r1, r0
 801f38e:	9805      	ldr	r0, [sp, #20]
 801f390:	f001 f87e 	bl	8020490 <__mcmp>
 801f394:	2800      	cmp	r0, #0
 801f396:	dc00      	bgt.n	801f39a <_dtoa_r+0x98a>
 801f398:	e6a8      	b.n	801f0ec <_dtoa_r+0x6dc>
 801f39a:	9b08      	ldr	r3, [sp, #32]
 801f39c:	9a08      	ldr	r2, [sp, #32]
 801f39e:	1c5c      	adds	r4, r3, #1
 801f3a0:	2331      	movs	r3, #49	@ 0x31
 801f3a2:	7013      	strb	r3, [r2, #0]
 801f3a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f3a6:	3301      	adds	r3, #1
 801f3a8:	930c      	str	r3, [sp, #48]	@ 0x30
 801f3aa:	e6a3      	b.n	801f0f4 <_dtoa_r+0x6e4>
 801f3ac:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801f3ae:	0037      	movs	r7, r6
 801f3b0:	e7f3      	b.n	801f39a <_dtoa_r+0x98a>
 801f3b2:	9b04      	ldr	r3, [sp, #16]
 801f3b4:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801f3b6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f3b8:	e7f9      	b.n	801f3ae <_dtoa_r+0x99e>
 801f3ba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	d100      	bne.n	801f3c2 <_dtoa_r+0x9b2>
 801f3c0:	e100      	b.n	801f5c4 <_dtoa_r+0xbb4>
 801f3c2:	2c00      	cmp	r4, #0
 801f3c4:	dd05      	ble.n	801f3d2 <_dtoa_r+0x9c2>
 801f3c6:	0039      	movs	r1, r7
 801f3c8:	0022      	movs	r2, r4
 801f3ca:	9803      	ldr	r0, [sp, #12]
 801f3cc:	f000 fff4 	bl	80203b8 <__lshift>
 801f3d0:	0007      	movs	r7, r0
 801f3d2:	0038      	movs	r0, r7
 801f3d4:	2d00      	cmp	r5, #0
 801f3d6:	d018      	beq.n	801f40a <_dtoa_r+0x9fa>
 801f3d8:	6879      	ldr	r1, [r7, #4]
 801f3da:	9803      	ldr	r0, [sp, #12]
 801f3dc:	f000 fd7e 	bl	801fedc <_Balloc>
 801f3e0:	1e04      	subs	r4, r0, #0
 801f3e2:	d105      	bne.n	801f3f0 <_dtoa_r+0x9e0>
 801f3e4:	0022      	movs	r2, r4
 801f3e6:	4b2b      	ldr	r3, [pc, #172]	@ (801f494 <_dtoa_r+0xa84>)
 801f3e8:	482b      	ldr	r0, [pc, #172]	@ (801f498 <_dtoa_r+0xa88>)
 801f3ea:	492c      	ldr	r1, [pc, #176]	@ (801f49c <_dtoa_r+0xa8c>)
 801f3ec:	f7ff fb25 	bl	801ea3a <_dtoa_r+0x2a>
 801f3f0:	0039      	movs	r1, r7
 801f3f2:	693a      	ldr	r2, [r7, #16]
 801f3f4:	310c      	adds	r1, #12
 801f3f6:	3202      	adds	r2, #2
 801f3f8:	0092      	lsls	r2, r2, #2
 801f3fa:	300c      	adds	r0, #12
 801f3fc:	f7ff fa6a 	bl	801e8d4 <memcpy>
 801f400:	2201      	movs	r2, #1
 801f402:	0021      	movs	r1, r4
 801f404:	9803      	ldr	r0, [sp, #12]
 801f406:	f000 ffd7 	bl	80203b8 <__lshift>
 801f40a:	9b08      	ldr	r3, [sp, #32]
 801f40c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f40e:	9306      	str	r3, [sp, #24]
 801f410:	3b01      	subs	r3, #1
 801f412:	189b      	adds	r3, r3, r2
 801f414:	2201      	movs	r2, #1
 801f416:	9704      	str	r7, [sp, #16]
 801f418:	0007      	movs	r7, r0
 801f41a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f41c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f41e:	4013      	ands	r3, r2
 801f420:	930e      	str	r3, [sp, #56]	@ 0x38
 801f422:	0031      	movs	r1, r6
 801f424:	9805      	ldr	r0, [sp, #20]
 801f426:	f7ff fa65 	bl	801e8f4 <quorem>
 801f42a:	9904      	ldr	r1, [sp, #16]
 801f42c:	0005      	movs	r5, r0
 801f42e:	900a      	str	r0, [sp, #40]	@ 0x28
 801f430:	9805      	ldr	r0, [sp, #20]
 801f432:	f001 f82d 	bl	8020490 <__mcmp>
 801f436:	003a      	movs	r2, r7
 801f438:	900d      	str	r0, [sp, #52]	@ 0x34
 801f43a:	0031      	movs	r1, r6
 801f43c:	9803      	ldr	r0, [sp, #12]
 801f43e:	f001 f843 	bl	80204c8 <__mdiff>
 801f442:	2201      	movs	r2, #1
 801f444:	68c3      	ldr	r3, [r0, #12]
 801f446:	0004      	movs	r4, r0
 801f448:	3530      	adds	r5, #48	@ 0x30
 801f44a:	9209      	str	r2, [sp, #36]	@ 0x24
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d104      	bne.n	801f45a <_dtoa_r+0xa4a>
 801f450:	0001      	movs	r1, r0
 801f452:	9805      	ldr	r0, [sp, #20]
 801f454:	f001 f81c 	bl	8020490 <__mcmp>
 801f458:	9009      	str	r0, [sp, #36]	@ 0x24
 801f45a:	0021      	movs	r1, r4
 801f45c:	9803      	ldr	r0, [sp, #12]
 801f45e:	f000 fd81 	bl	801ff64 <_Bfree>
 801f462:	9b06      	ldr	r3, [sp, #24]
 801f464:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f466:	1c5c      	adds	r4, r3, #1
 801f468:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f46a:	4313      	orrs	r3, r2
 801f46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f46e:	4313      	orrs	r3, r2
 801f470:	d116      	bne.n	801f4a0 <_dtoa_r+0xa90>
 801f472:	2d39      	cmp	r5, #57	@ 0x39
 801f474:	d02f      	beq.n	801f4d6 <_dtoa_r+0xac6>
 801f476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f478:	2b00      	cmp	r3, #0
 801f47a:	dd01      	ble.n	801f480 <_dtoa_r+0xa70>
 801f47c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801f47e:	3531      	adds	r5, #49	@ 0x31
 801f480:	9b06      	ldr	r3, [sp, #24]
 801f482:	701d      	strb	r5, [r3, #0]
 801f484:	e638      	b.n	801f0f8 <_dtoa_r+0x6e8>
 801f486:	46c0      	nop			@ (mov r8, r8)
 801f488:	40240000 	.word	0x40240000
 801f48c:	00000433 	.word	0x00000433
 801f490:	7ff00000 	.word	0x7ff00000
 801f494:	08023ad1 	.word	0x08023ad1
 801f498:	08023a79 	.word	0x08023a79
 801f49c:	000002ef 	.word	0x000002ef
 801f4a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	db04      	blt.n	801f4b0 <_dtoa_r+0xaa0>
 801f4a6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801f4a8:	4313      	orrs	r3, r2
 801f4aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f4ac:	4313      	orrs	r3, r2
 801f4ae:	d11e      	bne.n	801f4ee <_dtoa_r+0xade>
 801f4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	dde4      	ble.n	801f480 <_dtoa_r+0xa70>
 801f4b6:	9905      	ldr	r1, [sp, #20]
 801f4b8:	2201      	movs	r2, #1
 801f4ba:	9803      	ldr	r0, [sp, #12]
 801f4bc:	f000 ff7c 	bl	80203b8 <__lshift>
 801f4c0:	0031      	movs	r1, r6
 801f4c2:	9005      	str	r0, [sp, #20]
 801f4c4:	f000 ffe4 	bl	8020490 <__mcmp>
 801f4c8:	2800      	cmp	r0, #0
 801f4ca:	dc02      	bgt.n	801f4d2 <_dtoa_r+0xac2>
 801f4cc:	d1d8      	bne.n	801f480 <_dtoa_r+0xa70>
 801f4ce:	07eb      	lsls	r3, r5, #31
 801f4d0:	d5d6      	bpl.n	801f480 <_dtoa_r+0xa70>
 801f4d2:	2d39      	cmp	r5, #57	@ 0x39
 801f4d4:	d1d2      	bne.n	801f47c <_dtoa_r+0xa6c>
 801f4d6:	2339      	movs	r3, #57	@ 0x39
 801f4d8:	9a06      	ldr	r2, [sp, #24]
 801f4da:	7013      	strb	r3, [r2, #0]
 801f4dc:	0023      	movs	r3, r4
 801f4de:	001c      	movs	r4, r3
 801f4e0:	3b01      	subs	r3, #1
 801f4e2:	781a      	ldrb	r2, [r3, #0]
 801f4e4:	2a39      	cmp	r2, #57	@ 0x39
 801f4e6:	d04f      	beq.n	801f588 <_dtoa_r+0xb78>
 801f4e8:	3201      	adds	r2, #1
 801f4ea:	701a      	strb	r2, [r3, #0]
 801f4ec:	e604      	b.n	801f0f8 <_dtoa_r+0x6e8>
 801f4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	dd03      	ble.n	801f4fc <_dtoa_r+0xaec>
 801f4f4:	2d39      	cmp	r5, #57	@ 0x39
 801f4f6:	d0ee      	beq.n	801f4d6 <_dtoa_r+0xac6>
 801f4f8:	3501      	adds	r5, #1
 801f4fa:	e7c1      	b.n	801f480 <_dtoa_r+0xa70>
 801f4fc:	9b06      	ldr	r3, [sp, #24]
 801f4fe:	9a06      	ldr	r2, [sp, #24]
 801f500:	701d      	strb	r5, [r3, #0]
 801f502:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f504:	4293      	cmp	r3, r2
 801f506:	d02a      	beq.n	801f55e <_dtoa_r+0xb4e>
 801f508:	2300      	movs	r3, #0
 801f50a:	220a      	movs	r2, #10
 801f50c:	9905      	ldr	r1, [sp, #20]
 801f50e:	9803      	ldr	r0, [sp, #12]
 801f510:	f000 fd4c 	bl	801ffac <__multadd>
 801f514:	9b04      	ldr	r3, [sp, #16]
 801f516:	9005      	str	r0, [sp, #20]
 801f518:	42bb      	cmp	r3, r7
 801f51a:	d109      	bne.n	801f530 <_dtoa_r+0xb20>
 801f51c:	2300      	movs	r3, #0
 801f51e:	220a      	movs	r2, #10
 801f520:	9904      	ldr	r1, [sp, #16]
 801f522:	9803      	ldr	r0, [sp, #12]
 801f524:	f000 fd42 	bl	801ffac <__multadd>
 801f528:	9004      	str	r0, [sp, #16]
 801f52a:	0007      	movs	r7, r0
 801f52c:	9406      	str	r4, [sp, #24]
 801f52e:	e778      	b.n	801f422 <_dtoa_r+0xa12>
 801f530:	9904      	ldr	r1, [sp, #16]
 801f532:	2300      	movs	r3, #0
 801f534:	220a      	movs	r2, #10
 801f536:	9803      	ldr	r0, [sp, #12]
 801f538:	f000 fd38 	bl	801ffac <__multadd>
 801f53c:	2300      	movs	r3, #0
 801f53e:	9004      	str	r0, [sp, #16]
 801f540:	220a      	movs	r2, #10
 801f542:	0039      	movs	r1, r7
 801f544:	9803      	ldr	r0, [sp, #12]
 801f546:	f000 fd31 	bl	801ffac <__multadd>
 801f54a:	e7ee      	b.n	801f52a <_dtoa_r+0xb1a>
 801f54c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f54e:	2401      	movs	r4, #1
 801f550:	2b00      	cmp	r3, #0
 801f552:	dd00      	ble.n	801f556 <_dtoa_r+0xb46>
 801f554:	001c      	movs	r4, r3
 801f556:	9b08      	ldr	r3, [sp, #32]
 801f558:	191c      	adds	r4, r3, r4
 801f55a:	2300      	movs	r3, #0
 801f55c:	9304      	str	r3, [sp, #16]
 801f55e:	9905      	ldr	r1, [sp, #20]
 801f560:	2201      	movs	r2, #1
 801f562:	9803      	ldr	r0, [sp, #12]
 801f564:	f000 ff28 	bl	80203b8 <__lshift>
 801f568:	0031      	movs	r1, r6
 801f56a:	9005      	str	r0, [sp, #20]
 801f56c:	f000 ff90 	bl	8020490 <__mcmp>
 801f570:	2800      	cmp	r0, #0
 801f572:	dcb3      	bgt.n	801f4dc <_dtoa_r+0xacc>
 801f574:	d101      	bne.n	801f57a <_dtoa_r+0xb6a>
 801f576:	07ed      	lsls	r5, r5, #31
 801f578:	d4b0      	bmi.n	801f4dc <_dtoa_r+0xacc>
 801f57a:	0023      	movs	r3, r4
 801f57c:	001c      	movs	r4, r3
 801f57e:	3b01      	subs	r3, #1
 801f580:	781a      	ldrb	r2, [r3, #0]
 801f582:	2a30      	cmp	r2, #48	@ 0x30
 801f584:	d0fa      	beq.n	801f57c <_dtoa_r+0xb6c>
 801f586:	e5b7      	b.n	801f0f8 <_dtoa_r+0x6e8>
 801f588:	9a08      	ldr	r2, [sp, #32]
 801f58a:	429a      	cmp	r2, r3
 801f58c:	d1a7      	bne.n	801f4de <_dtoa_r+0xace>
 801f58e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f590:	3301      	adds	r3, #1
 801f592:	930c      	str	r3, [sp, #48]	@ 0x30
 801f594:	2331      	movs	r3, #49	@ 0x31
 801f596:	7013      	strb	r3, [r2, #0]
 801f598:	e5ae      	b.n	801f0f8 <_dtoa_r+0x6e8>
 801f59a:	4b15      	ldr	r3, [pc, #84]	@ (801f5f0 <_dtoa_r+0xbe0>)
 801f59c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f59e:	9308      	str	r3, [sp, #32]
 801f5a0:	4b14      	ldr	r3, [pc, #80]	@ (801f5f4 <_dtoa_r+0xbe4>)
 801f5a2:	2a00      	cmp	r2, #0
 801f5a4:	d001      	beq.n	801f5aa <_dtoa_r+0xb9a>
 801f5a6:	f7ff fa7b 	bl	801eaa0 <_dtoa_r+0x90>
 801f5aa:	f7ff fa7b 	bl	801eaa4 <_dtoa_r+0x94>
 801f5ae:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f5b0:	2b01      	cmp	r3, #1
 801f5b2:	dc00      	bgt.n	801f5b6 <_dtoa_r+0xba6>
 801f5b4:	e648      	b.n	801f248 <_dtoa_r+0x838>
 801f5b6:	2001      	movs	r0, #1
 801f5b8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801f5ba:	e665      	b.n	801f288 <_dtoa_r+0x878>
 801f5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5be:	2b00      	cmp	r3, #0
 801f5c0:	dc00      	bgt.n	801f5c4 <_dtoa_r+0xbb4>
 801f5c2:	e6d6      	b.n	801f372 <_dtoa_r+0x962>
 801f5c4:	2400      	movs	r4, #0
 801f5c6:	0031      	movs	r1, r6
 801f5c8:	9805      	ldr	r0, [sp, #20]
 801f5ca:	f7ff f993 	bl	801e8f4 <quorem>
 801f5ce:	9b08      	ldr	r3, [sp, #32]
 801f5d0:	3030      	adds	r0, #48	@ 0x30
 801f5d2:	5518      	strb	r0, [r3, r4]
 801f5d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5d6:	3401      	adds	r4, #1
 801f5d8:	0005      	movs	r5, r0
 801f5da:	429c      	cmp	r4, r3
 801f5dc:	dab6      	bge.n	801f54c <_dtoa_r+0xb3c>
 801f5de:	2300      	movs	r3, #0
 801f5e0:	220a      	movs	r2, #10
 801f5e2:	9905      	ldr	r1, [sp, #20]
 801f5e4:	9803      	ldr	r0, [sp, #12]
 801f5e6:	f000 fce1 	bl	801ffac <__multadd>
 801f5ea:	9005      	str	r0, [sp, #20]
 801f5ec:	e7eb      	b.n	801f5c6 <_dtoa_r+0xbb6>
 801f5ee:	46c0      	nop			@ (mov r8, r8)
 801f5f0:	08023a55 	.word	0x08023a55
 801f5f4:	08023a5d 	.word	0x08023a5d

0801f5f8 <_free_r>:
 801f5f8:	b570      	push	{r4, r5, r6, lr}
 801f5fa:	0005      	movs	r5, r0
 801f5fc:	1e0c      	subs	r4, r1, #0
 801f5fe:	d010      	beq.n	801f622 <_free_r+0x2a>
 801f600:	3c04      	subs	r4, #4
 801f602:	6823      	ldr	r3, [r4, #0]
 801f604:	2b00      	cmp	r3, #0
 801f606:	da00      	bge.n	801f60a <_free_r+0x12>
 801f608:	18e4      	adds	r4, r4, r3
 801f60a:	0028      	movs	r0, r5
 801f60c:	f000 fc56 	bl	801febc <__malloc_lock>
 801f610:	4a1d      	ldr	r2, [pc, #116]	@ (801f688 <_free_r+0x90>)
 801f612:	6813      	ldr	r3, [r2, #0]
 801f614:	2b00      	cmp	r3, #0
 801f616:	d105      	bne.n	801f624 <_free_r+0x2c>
 801f618:	6063      	str	r3, [r4, #4]
 801f61a:	6014      	str	r4, [r2, #0]
 801f61c:	0028      	movs	r0, r5
 801f61e:	f000 fc55 	bl	801fecc <__malloc_unlock>
 801f622:	bd70      	pop	{r4, r5, r6, pc}
 801f624:	42a3      	cmp	r3, r4
 801f626:	d908      	bls.n	801f63a <_free_r+0x42>
 801f628:	6820      	ldr	r0, [r4, #0]
 801f62a:	1821      	adds	r1, r4, r0
 801f62c:	428b      	cmp	r3, r1
 801f62e:	d1f3      	bne.n	801f618 <_free_r+0x20>
 801f630:	6819      	ldr	r1, [r3, #0]
 801f632:	685b      	ldr	r3, [r3, #4]
 801f634:	1809      	adds	r1, r1, r0
 801f636:	6021      	str	r1, [r4, #0]
 801f638:	e7ee      	b.n	801f618 <_free_r+0x20>
 801f63a:	001a      	movs	r2, r3
 801f63c:	685b      	ldr	r3, [r3, #4]
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d001      	beq.n	801f646 <_free_r+0x4e>
 801f642:	42a3      	cmp	r3, r4
 801f644:	d9f9      	bls.n	801f63a <_free_r+0x42>
 801f646:	6811      	ldr	r1, [r2, #0]
 801f648:	1850      	adds	r0, r2, r1
 801f64a:	42a0      	cmp	r0, r4
 801f64c:	d10b      	bne.n	801f666 <_free_r+0x6e>
 801f64e:	6820      	ldr	r0, [r4, #0]
 801f650:	1809      	adds	r1, r1, r0
 801f652:	1850      	adds	r0, r2, r1
 801f654:	6011      	str	r1, [r2, #0]
 801f656:	4283      	cmp	r3, r0
 801f658:	d1e0      	bne.n	801f61c <_free_r+0x24>
 801f65a:	6818      	ldr	r0, [r3, #0]
 801f65c:	685b      	ldr	r3, [r3, #4]
 801f65e:	1841      	adds	r1, r0, r1
 801f660:	6011      	str	r1, [r2, #0]
 801f662:	6053      	str	r3, [r2, #4]
 801f664:	e7da      	b.n	801f61c <_free_r+0x24>
 801f666:	42a0      	cmp	r0, r4
 801f668:	d902      	bls.n	801f670 <_free_r+0x78>
 801f66a:	230c      	movs	r3, #12
 801f66c:	602b      	str	r3, [r5, #0]
 801f66e:	e7d5      	b.n	801f61c <_free_r+0x24>
 801f670:	6820      	ldr	r0, [r4, #0]
 801f672:	1821      	adds	r1, r4, r0
 801f674:	428b      	cmp	r3, r1
 801f676:	d103      	bne.n	801f680 <_free_r+0x88>
 801f678:	6819      	ldr	r1, [r3, #0]
 801f67a:	685b      	ldr	r3, [r3, #4]
 801f67c:	1809      	adds	r1, r1, r0
 801f67e:	6021      	str	r1, [r4, #0]
 801f680:	6063      	str	r3, [r4, #4]
 801f682:	6054      	str	r4, [r2, #4]
 801f684:	e7ca      	b.n	801f61c <_free_r+0x24>
 801f686:	46c0      	nop			@ (mov r8, r8)
 801f688:	20003900 	.word	0x20003900

0801f68c <rshift>:
 801f68c:	0002      	movs	r2, r0
 801f68e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f690:	6904      	ldr	r4, [r0, #16]
 801f692:	b085      	sub	sp, #20
 801f694:	3214      	adds	r2, #20
 801f696:	114b      	asrs	r3, r1, #5
 801f698:	0016      	movs	r6, r2
 801f69a:	9302      	str	r3, [sp, #8]
 801f69c:	429c      	cmp	r4, r3
 801f69e:	dd31      	ble.n	801f704 <rshift+0x78>
 801f6a0:	261f      	movs	r6, #31
 801f6a2:	000f      	movs	r7, r1
 801f6a4:	009b      	lsls	r3, r3, #2
 801f6a6:	00a5      	lsls	r5, r4, #2
 801f6a8:	18d3      	adds	r3, r2, r3
 801f6aa:	4037      	ands	r7, r6
 801f6ac:	1955      	adds	r5, r2, r5
 801f6ae:	9300      	str	r3, [sp, #0]
 801f6b0:	9701      	str	r7, [sp, #4]
 801f6b2:	4231      	tst	r1, r6
 801f6b4:	d10d      	bne.n	801f6d2 <rshift+0x46>
 801f6b6:	0016      	movs	r6, r2
 801f6b8:	0019      	movs	r1, r3
 801f6ba:	428d      	cmp	r5, r1
 801f6bc:	d836      	bhi.n	801f72c <rshift+0xa0>
 801f6be:	9b00      	ldr	r3, [sp, #0]
 801f6c0:	2600      	movs	r6, #0
 801f6c2:	3b03      	subs	r3, #3
 801f6c4:	429d      	cmp	r5, r3
 801f6c6:	d302      	bcc.n	801f6ce <rshift+0x42>
 801f6c8:	9b02      	ldr	r3, [sp, #8]
 801f6ca:	1ae4      	subs	r4, r4, r3
 801f6cc:	00a6      	lsls	r6, r4, #2
 801f6ce:	1996      	adds	r6, r2, r6
 801f6d0:	e018      	b.n	801f704 <rshift+0x78>
 801f6d2:	2120      	movs	r1, #32
 801f6d4:	9e01      	ldr	r6, [sp, #4]
 801f6d6:	9f01      	ldr	r7, [sp, #4]
 801f6d8:	1b89      	subs	r1, r1, r6
 801f6da:	9e00      	ldr	r6, [sp, #0]
 801f6dc:	9103      	str	r1, [sp, #12]
 801f6de:	ce02      	ldmia	r6!, {r1}
 801f6e0:	4694      	mov	ip, r2
 801f6e2:	40f9      	lsrs	r1, r7
 801f6e4:	42b5      	cmp	r5, r6
 801f6e6:	d816      	bhi.n	801f716 <rshift+0x8a>
 801f6e8:	9b00      	ldr	r3, [sp, #0]
 801f6ea:	2600      	movs	r6, #0
 801f6ec:	3301      	adds	r3, #1
 801f6ee:	429d      	cmp	r5, r3
 801f6f0:	d303      	bcc.n	801f6fa <rshift+0x6e>
 801f6f2:	9b02      	ldr	r3, [sp, #8]
 801f6f4:	1ae4      	subs	r4, r4, r3
 801f6f6:	00a6      	lsls	r6, r4, #2
 801f6f8:	3e04      	subs	r6, #4
 801f6fa:	1996      	adds	r6, r2, r6
 801f6fc:	6031      	str	r1, [r6, #0]
 801f6fe:	2900      	cmp	r1, #0
 801f700:	d000      	beq.n	801f704 <rshift+0x78>
 801f702:	3604      	adds	r6, #4
 801f704:	1ab1      	subs	r1, r6, r2
 801f706:	1089      	asrs	r1, r1, #2
 801f708:	6101      	str	r1, [r0, #16]
 801f70a:	4296      	cmp	r6, r2
 801f70c:	d101      	bne.n	801f712 <rshift+0x86>
 801f70e:	2300      	movs	r3, #0
 801f710:	6143      	str	r3, [r0, #20]
 801f712:	b005      	add	sp, #20
 801f714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f716:	6837      	ldr	r7, [r6, #0]
 801f718:	9b03      	ldr	r3, [sp, #12]
 801f71a:	409f      	lsls	r7, r3
 801f71c:	430f      	orrs	r7, r1
 801f71e:	4661      	mov	r1, ip
 801f720:	c180      	stmia	r1!, {r7}
 801f722:	468c      	mov	ip, r1
 801f724:	9b01      	ldr	r3, [sp, #4]
 801f726:	ce02      	ldmia	r6!, {r1}
 801f728:	40d9      	lsrs	r1, r3
 801f72a:	e7db      	b.n	801f6e4 <rshift+0x58>
 801f72c:	c980      	ldmia	r1!, {r7}
 801f72e:	c680      	stmia	r6!, {r7}
 801f730:	e7c3      	b.n	801f6ba <rshift+0x2e>

0801f732 <__hexdig_fun>:
 801f732:	0002      	movs	r2, r0
 801f734:	3a30      	subs	r2, #48	@ 0x30
 801f736:	0003      	movs	r3, r0
 801f738:	2a09      	cmp	r2, #9
 801f73a:	d802      	bhi.n	801f742 <__hexdig_fun+0x10>
 801f73c:	3b20      	subs	r3, #32
 801f73e:	b2d8      	uxtb	r0, r3
 801f740:	4770      	bx	lr
 801f742:	0002      	movs	r2, r0
 801f744:	3a61      	subs	r2, #97	@ 0x61
 801f746:	2a05      	cmp	r2, #5
 801f748:	d801      	bhi.n	801f74e <__hexdig_fun+0x1c>
 801f74a:	3b47      	subs	r3, #71	@ 0x47
 801f74c:	e7f7      	b.n	801f73e <__hexdig_fun+0xc>
 801f74e:	001a      	movs	r2, r3
 801f750:	3a41      	subs	r2, #65	@ 0x41
 801f752:	2000      	movs	r0, #0
 801f754:	2a05      	cmp	r2, #5
 801f756:	d8f3      	bhi.n	801f740 <__hexdig_fun+0xe>
 801f758:	3b27      	subs	r3, #39	@ 0x27
 801f75a:	e7f0      	b.n	801f73e <__hexdig_fun+0xc>

0801f75c <__gethex>:
 801f75c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f75e:	b089      	sub	sp, #36	@ 0x24
 801f760:	9307      	str	r3, [sp, #28]
 801f762:	680b      	ldr	r3, [r1, #0]
 801f764:	9201      	str	r2, [sp, #4]
 801f766:	9003      	str	r0, [sp, #12]
 801f768:	9106      	str	r1, [sp, #24]
 801f76a:	1c9a      	adds	r2, r3, #2
 801f76c:	0011      	movs	r1, r2
 801f76e:	3201      	adds	r2, #1
 801f770:	1e50      	subs	r0, r2, #1
 801f772:	7800      	ldrb	r0, [r0, #0]
 801f774:	2830      	cmp	r0, #48	@ 0x30
 801f776:	d0f9      	beq.n	801f76c <__gethex+0x10>
 801f778:	1acb      	subs	r3, r1, r3
 801f77a:	3b02      	subs	r3, #2
 801f77c:	9305      	str	r3, [sp, #20]
 801f77e:	9100      	str	r1, [sp, #0]
 801f780:	f7ff ffd7 	bl	801f732 <__hexdig_fun>
 801f784:	2300      	movs	r3, #0
 801f786:	001d      	movs	r5, r3
 801f788:	9302      	str	r3, [sp, #8]
 801f78a:	4298      	cmp	r0, r3
 801f78c:	d11e      	bne.n	801f7cc <__gethex+0x70>
 801f78e:	2201      	movs	r2, #1
 801f790:	49a6      	ldr	r1, [pc, #664]	@ (801fa2c <__gethex+0x2d0>)
 801f792:	9800      	ldr	r0, [sp, #0]
 801f794:	f7fe ffd8 	bl	801e748 <strncmp>
 801f798:	0007      	movs	r7, r0
 801f79a:	42a8      	cmp	r0, r5
 801f79c:	d000      	beq.n	801f7a0 <__gethex+0x44>
 801f79e:	e06a      	b.n	801f876 <__gethex+0x11a>
 801f7a0:	9b00      	ldr	r3, [sp, #0]
 801f7a2:	7858      	ldrb	r0, [r3, #1]
 801f7a4:	1c5c      	adds	r4, r3, #1
 801f7a6:	f7ff ffc4 	bl	801f732 <__hexdig_fun>
 801f7aa:	2301      	movs	r3, #1
 801f7ac:	9302      	str	r3, [sp, #8]
 801f7ae:	42a8      	cmp	r0, r5
 801f7b0:	d02f      	beq.n	801f812 <__gethex+0xb6>
 801f7b2:	9400      	str	r4, [sp, #0]
 801f7b4:	9b00      	ldr	r3, [sp, #0]
 801f7b6:	7818      	ldrb	r0, [r3, #0]
 801f7b8:	2830      	cmp	r0, #48	@ 0x30
 801f7ba:	d009      	beq.n	801f7d0 <__gethex+0x74>
 801f7bc:	f7ff ffb9 	bl	801f732 <__hexdig_fun>
 801f7c0:	4242      	negs	r2, r0
 801f7c2:	4142      	adcs	r2, r0
 801f7c4:	2301      	movs	r3, #1
 801f7c6:	0025      	movs	r5, r4
 801f7c8:	9202      	str	r2, [sp, #8]
 801f7ca:	9305      	str	r3, [sp, #20]
 801f7cc:	9c00      	ldr	r4, [sp, #0]
 801f7ce:	e004      	b.n	801f7da <__gethex+0x7e>
 801f7d0:	9b00      	ldr	r3, [sp, #0]
 801f7d2:	3301      	adds	r3, #1
 801f7d4:	9300      	str	r3, [sp, #0]
 801f7d6:	e7ed      	b.n	801f7b4 <__gethex+0x58>
 801f7d8:	3401      	adds	r4, #1
 801f7da:	7820      	ldrb	r0, [r4, #0]
 801f7dc:	f7ff ffa9 	bl	801f732 <__hexdig_fun>
 801f7e0:	1e07      	subs	r7, r0, #0
 801f7e2:	d1f9      	bne.n	801f7d8 <__gethex+0x7c>
 801f7e4:	2201      	movs	r2, #1
 801f7e6:	0020      	movs	r0, r4
 801f7e8:	4990      	ldr	r1, [pc, #576]	@ (801fa2c <__gethex+0x2d0>)
 801f7ea:	f7fe ffad 	bl	801e748 <strncmp>
 801f7ee:	2800      	cmp	r0, #0
 801f7f0:	d10d      	bne.n	801f80e <__gethex+0xb2>
 801f7f2:	2d00      	cmp	r5, #0
 801f7f4:	d106      	bne.n	801f804 <__gethex+0xa8>
 801f7f6:	3401      	adds	r4, #1
 801f7f8:	0025      	movs	r5, r4
 801f7fa:	7820      	ldrb	r0, [r4, #0]
 801f7fc:	f7ff ff99 	bl	801f732 <__hexdig_fun>
 801f800:	2800      	cmp	r0, #0
 801f802:	d102      	bne.n	801f80a <__gethex+0xae>
 801f804:	1b2d      	subs	r5, r5, r4
 801f806:	00af      	lsls	r7, r5, #2
 801f808:	e003      	b.n	801f812 <__gethex+0xb6>
 801f80a:	3401      	adds	r4, #1
 801f80c:	e7f5      	b.n	801f7fa <__gethex+0x9e>
 801f80e:	2d00      	cmp	r5, #0
 801f810:	d1f8      	bne.n	801f804 <__gethex+0xa8>
 801f812:	2220      	movs	r2, #32
 801f814:	7823      	ldrb	r3, [r4, #0]
 801f816:	0026      	movs	r6, r4
 801f818:	4393      	bics	r3, r2
 801f81a:	2b50      	cmp	r3, #80	@ 0x50
 801f81c:	d11d      	bne.n	801f85a <__gethex+0xfe>
 801f81e:	7863      	ldrb	r3, [r4, #1]
 801f820:	2b2b      	cmp	r3, #43	@ 0x2b
 801f822:	d02d      	beq.n	801f880 <__gethex+0x124>
 801f824:	2b2d      	cmp	r3, #45	@ 0x2d
 801f826:	d02f      	beq.n	801f888 <__gethex+0x12c>
 801f828:	2300      	movs	r3, #0
 801f82a:	1c66      	adds	r6, r4, #1
 801f82c:	9304      	str	r3, [sp, #16]
 801f82e:	7830      	ldrb	r0, [r6, #0]
 801f830:	f7ff ff7f 	bl	801f732 <__hexdig_fun>
 801f834:	1e43      	subs	r3, r0, #1
 801f836:	b2db      	uxtb	r3, r3
 801f838:	0005      	movs	r5, r0
 801f83a:	2b18      	cmp	r3, #24
 801f83c:	d82a      	bhi.n	801f894 <__gethex+0x138>
 801f83e:	7870      	ldrb	r0, [r6, #1]
 801f840:	f7ff ff77 	bl	801f732 <__hexdig_fun>
 801f844:	1e43      	subs	r3, r0, #1
 801f846:	b2db      	uxtb	r3, r3
 801f848:	3601      	adds	r6, #1
 801f84a:	3d10      	subs	r5, #16
 801f84c:	2b18      	cmp	r3, #24
 801f84e:	d91d      	bls.n	801f88c <__gethex+0x130>
 801f850:	9b04      	ldr	r3, [sp, #16]
 801f852:	2b00      	cmp	r3, #0
 801f854:	d000      	beq.n	801f858 <__gethex+0xfc>
 801f856:	426d      	negs	r5, r5
 801f858:	197f      	adds	r7, r7, r5
 801f85a:	9b06      	ldr	r3, [sp, #24]
 801f85c:	601e      	str	r6, [r3, #0]
 801f85e:	9b02      	ldr	r3, [sp, #8]
 801f860:	2b00      	cmp	r3, #0
 801f862:	d019      	beq.n	801f898 <__gethex+0x13c>
 801f864:	9b05      	ldr	r3, [sp, #20]
 801f866:	2606      	movs	r6, #6
 801f868:	425a      	negs	r2, r3
 801f86a:	4153      	adcs	r3, r2
 801f86c:	425b      	negs	r3, r3
 801f86e:	401e      	ands	r6, r3
 801f870:	0030      	movs	r0, r6
 801f872:	b009      	add	sp, #36	@ 0x24
 801f874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f876:	2301      	movs	r3, #1
 801f878:	2700      	movs	r7, #0
 801f87a:	9c00      	ldr	r4, [sp, #0]
 801f87c:	9302      	str	r3, [sp, #8]
 801f87e:	e7c8      	b.n	801f812 <__gethex+0xb6>
 801f880:	2300      	movs	r3, #0
 801f882:	9304      	str	r3, [sp, #16]
 801f884:	1ca6      	adds	r6, r4, #2
 801f886:	e7d2      	b.n	801f82e <__gethex+0xd2>
 801f888:	2301      	movs	r3, #1
 801f88a:	e7fa      	b.n	801f882 <__gethex+0x126>
 801f88c:	230a      	movs	r3, #10
 801f88e:	435d      	muls	r5, r3
 801f890:	182d      	adds	r5, r5, r0
 801f892:	e7d4      	b.n	801f83e <__gethex+0xe2>
 801f894:	0026      	movs	r6, r4
 801f896:	e7e0      	b.n	801f85a <__gethex+0xfe>
 801f898:	9b00      	ldr	r3, [sp, #0]
 801f89a:	9902      	ldr	r1, [sp, #8]
 801f89c:	1ae3      	subs	r3, r4, r3
 801f89e:	3b01      	subs	r3, #1
 801f8a0:	2b07      	cmp	r3, #7
 801f8a2:	dc0a      	bgt.n	801f8ba <__gethex+0x15e>
 801f8a4:	9803      	ldr	r0, [sp, #12]
 801f8a6:	f000 fb19 	bl	801fedc <_Balloc>
 801f8aa:	1e05      	subs	r5, r0, #0
 801f8ac:	d108      	bne.n	801f8c0 <__gethex+0x164>
 801f8ae:	002a      	movs	r2, r5
 801f8b0:	21e4      	movs	r1, #228	@ 0xe4
 801f8b2:	4b5f      	ldr	r3, [pc, #380]	@ (801fa30 <__gethex+0x2d4>)
 801f8b4:	485f      	ldr	r0, [pc, #380]	@ (801fa34 <__gethex+0x2d8>)
 801f8b6:	f001 fbf1 	bl	802109c <__assert_func>
 801f8ba:	3101      	adds	r1, #1
 801f8bc:	105b      	asrs	r3, r3, #1
 801f8be:	e7ef      	b.n	801f8a0 <__gethex+0x144>
 801f8c0:	0003      	movs	r3, r0
 801f8c2:	3314      	adds	r3, #20
 801f8c4:	9302      	str	r3, [sp, #8]
 801f8c6:	9305      	str	r3, [sp, #20]
 801f8c8:	2300      	movs	r3, #0
 801f8ca:	001e      	movs	r6, r3
 801f8cc:	9304      	str	r3, [sp, #16]
 801f8ce:	9b00      	ldr	r3, [sp, #0]
 801f8d0:	42a3      	cmp	r3, r4
 801f8d2:	d338      	bcc.n	801f946 <__gethex+0x1ea>
 801f8d4:	9c05      	ldr	r4, [sp, #20]
 801f8d6:	9b02      	ldr	r3, [sp, #8]
 801f8d8:	c440      	stmia	r4!, {r6}
 801f8da:	1ae4      	subs	r4, r4, r3
 801f8dc:	10a4      	asrs	r4, r4, #2
 801f8de:	0030      	movs	r0, r6
 801f8e0:	612c      	str	r4, [r5, #16]
 801f8e2:	f000 fbf3 	bl	80200cc <__hi0bits>
 801f8e6:	9b01      	ldr	r3, [sp, #4]
 801f8e8:	0164      	lsls	r4, r4, #5
 801f8ea:	681b      	ldr	r3, [r3, #0]
 801f8ec:	1a26      	subs	r6, r4, r0
 801f8ee:	9300      	str	r3, [sp, #0]
 801f8f0:	429e      	cmp	r6, r3
 801f8f2:	dd52      	ble.n	801f99a <__gethex+0x23e>
 801f8f4:	1af6      	subs	r6, r6, r3
 801f8f6:	0031      	movs	r1, r6
 801f8f8:	0028      	movs	r0, r5
 801f8fa:	f000 ff96 	bl	802082a <__any_on>
 801f8fe:	1e04      	subs	r4, r0, #0
 801f900:	d00f      	beq.n	801f922 <__gethex+0x1c6>
 801f902:	2401      	movs	r4, #1
 801f904:	231f      	movs	r3, #31
 801f906:	0020      	movs	r0, r4
 801f908:	1e72      	subs	r2, r6, #1
 801f90a:	4013      	ands	r3, r2
 801f90c:	4098      	lsls	r0, r3
 801f90e:	0003      	movs	r3, r0
 801f910:	1151      	asrs	r1, r2, #5
 801f912:	9802      	ldr	r0, [sp, #8]
 801f914:	0089      	lsls	r1, r1, #2
 801f916:	5809      	ldr	r1, [r1, r0]
 801f918:	4219      	tst	r1, r3
 801f91a:	d002      	beq.n	801f922 <__gethex+0x1c6>
 801f91c:	42a2      	cmp	r2, r4
 801f91e:	dc34      	bgt.n	801f98a <__gethex+0x22e>
 801f920:	2402      	movs	r4, #2
 801f922:	0031      	movs	r1, r6
 801f924:	0028      	movs	r0, r5
 801f926:	f7ff feb1 	bl	801f68c <rshift>
 801f92a:	19bf      	adds	r7, r7, r6
 801f92c:	9b01      	ldr	r3, [sp, #4]
 801f92e:	689b      	ldr	r3, [r3, #8]
 801f930:	42bb      	cmp	r3, r7
 801f932:	da42      	bge.n	801f9ba <__gethex+0x25e>
 801f934:	0029      	movs	r1, r5
 801f936:	9803      	ldr	r0, [sp, #12]
 801f938:	f000 fb14 	bl	801ff64 <_Bfree>
 801f93c:	2300      	movs	r3, #0
 801f93e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f940:	26a3      	movs	r6, #163	@ 0xa3
 801f942:	6013      	str	r3, [r2, #0]
 801f944:	e794      	b.n	801f870 <__gethex+0x114>
 801f946:	3c01      	subs	r4, #1
 801f948:	7823      	ldrb	r3, [r4, #0]
 801f94a:	2b2e      	cmp	r3, #46	@ 0x2e
 801f94c:	d012      	beq.n	801f974 <__gethex+0x218>
 801f94e:	9b04      	ldr	r3, [sp, #16]
 801f950:	2b20      	cmp	r3, #32
 801f952:	d104      	bne.n	801f95e <__gethex+0x202>
 801f954:	9b05      	ldr	r3, [sp, #20]
 801f956:	c340      	stmia	r3!, {r6}
 801f958:	2600      	movs	r6, #0
 801f95a:	9305      	str	r3, [sp, #20]
 801f95c:	9604      	str	r6, [sp, #16]
 801f95e:	7820      	ldrb	r0, [r4, #0]
 801f960:	f7ff fee7 	bl	801f732 <__hexdig_fun>
 801f964:	230f      	movs	r3, #15
 801f966:	4018      	ands	r0, r3
 801f968:	9b04      	ldr	r3, [sp, #16]
 801f96a:	4098      	lsls	r0, r3
 801f96c:	3304      	adds	r3, #4
 801f96e:	4306      	orrs	r6, r0
 801f970:	9304      	str	r3, [sp, #16]
 801f972:	e7ac      	b.n	801f8ce <__gethex+0x172>
 801f974:	9b00      	ldr	r3, [sp, #0]
 801f976:	42a3      	cmp	r3, r4
 801f978:	d8e9      	bhi.n	801f94e <__gethex+0x1f2>
 801f97a:	2201      	movs	r2, #1
 801f97c:	0020      	movs	r0, r4
 801f97e:	492b      	ldr	r1, [pc, #172]	@ (801fa2c <__gethex+0x2d0>)
 801f980:	f7fe fee2 	bl	801e748 <strncmp>
 801f984:	2800      	cmp	r0, #0
 801f986:	d1e2      	bne.n	801f94e <__gethex+0x1f2>
 801f988:	e7a1      	b.n	801f8ce <__gethex+0x172>
 801f98a:	0028      	movs	r0, r5
 801f98c:	1eb1      	subs	r1, r6, #2
 801f98e:	f000 ff4c 	bl	802082a <__any_on>
 801f992:	2800      	cmp	r0, #0
 801f994:	d0c4      	beq.n	801f920 <__gethex+0x1c4>
 801f996:	2403      	movs	r4, #3
 801f998:	e7c3      	b.n	801f922 <__gethex+0x1c6>
 801f99a:	9b00      	ldr	r3, [sp, #0]
 801f99c:	2400      	movs	r4, #0
 801f99e:	429e      	cmp	r6, r3
 801f9a0:	dac4      	bge.n	801f92c <__gethex+0x1d0>
 801f9a2:	1b9e      	subs	r6, r3, r6
 801f9a4:	0029      	movs	r1, r5
 801f9a6:	0032      	movs	r2, r6
 801f9a8:	9803      	ldr	r0, [sp, #12]
 801f9aa:	f000 fd05 	bl	80203b8 <__lshift>
 801f9ae:	0003      	movs	r3, r0
 801f9b0:	3314      	adds	r3, #20
 801f9b2:	0005      	movs	r5, r0
 801f9b4:	1bbf      	subs	r7, r7, r6
 801f9b6:	9302      	str	r3, [sp, #8]
 801f9b8:	e7b8      	b.n	801f92c <__gethex+0x1d0>
 801f9ba:	9b01      	ldr	r3, [sp, #4]
 801f9bc:	685e      	ldr	r6, [r3, #4]
 801f9be:	42be      	cmp	r6, r7
 801f9c0:	dd6f      	ble.n	801faa2 <__gethex+0x346>
 801f9c2:	9b00      	ldr	r3, [sp, #0]
 801f9c4:	1bf6      	subs	r6, r6, r7
 801f9c6:	42b3      	cmp	r3, r6
 801f9c8:	dc36      	bgt.n	801fa38 <__gethex+0x2dc>
 801f9ca:	9b01      	ldr	r3, [sp, #4]
 801f9cc:	68db      	ldr	r3, [r3, #12]
 801f9ce:	2b02      	cmp	r3, #2
 801f9d0:	d024      	beq.n	801fa1c <__gethex+0x2c0>
 801f9d2:	2b03      	cmp	r3, #3
 801f9d4:	d026      	beq.n	801fa24 <__gethex+0x2c8>
 801f9d6:	2b01      	cmp	r3, #1
 801f9d8:	d117      	bne.n	801fa0a <__gethex+0x2ae>
 801f9da:	9b00      	ldr	r3, [sp, #0]
 801f9dc:	42b3      	cmp	r3, r6
 801f9de:	d114      	bne.n	801fa0a <__gethex+0x2ae>
 801f9e0:	2b01      	cmp	r3, #1
 801f9e2:	d10b      	bne.n	801f9fc <__gethex+0x2a0>
 801f9e4:	9b01      	ldr	r3, [sp, #4]
 801f9e6:	9a07      	ldr	r2, [sp, #28]
 801f9e8:	685b      	ldr	r3, [r3, #4]
 801f9ea:	2662      	movs	r6, #98	@ 0x62
 801f9ec:	6013      	str	r3, [r2, #0]
 801f9ee:	2301      	movs	r3, #1
 801f9f0:	9a02      	ldr	r2, [sp, #8]
 801f9f2:	612b      	str	r3, [r5, #16]
 801f9f4:	6013      	str	r3, [r2, #0]
 801f9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f9f8:	601d      	str	r5, [r3, #0]
 801f9fa:	e739      	b.n	801f870 <__gethex+0x114>
 801f9fc:	9900      	ldr	r1, [sp, #0]
 801f9fe:	0028      	movs	r0, r5
 801fa00:	3901      	subs	r1, #1
 801fa02:	f000 ff12 	bl	802082a <__any_on>
 801fa06:	2800      	cmp	r0, #0
 801fa08:	d1ec      	bne.n	801f9e4 <__gethex+0x288>
 801fa0a:	0029      	movs	r1, r5
 801fa0c:	9803      	ldr	r0, [sp, #12]
 801fa0e:	f000 faa9 	bl	801ff64 <_Bfree>
 801fa12:	2300      	movs	r3, #0
 801fa14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fa16:	2650      	movs	r6, #80	@ 0x50
 801fa18:	6013      	str	r3, [r2, #0]
 801fa1a:	e729      	b.n	801f870 <__gethex+0x114>
 801fa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa1e:	2b00      	cmp	r3, #0
 801fa20:	d1f3      	bne.n	801fa0a <__gethex+0x2ae>
 801fa22:	e7df      	b.n	801f9e4 <__gethex+0x288>
 801fa24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	d1dc      	bne.n	801f9e4 <__gethex+0x288>
 801fa2a:	e7ee      	b.n	801fa0a <__gethex+0x2ae>
 801fa2c:	080238c4 	.word	0x080238c4
 801fa30:	08023ad1 	.word	0x08023ad1
 801fa34:	08023ae2 	.word	0x08023ae2
 801fa38:	1e77      	subs	r7, r6, #1
 801fa3a:	2c00      	cmp	r4, #0
 801fa3c:	d12f      	bne.n	801fa9e <__gethex+0x342>
 801fa3e:	2f00      	cmp	r7, #0
 801fa40:	d004      	beq.n	801fa4c <__gethex+0x2f0>
 801fa42:	0039      	movs	r1, r7
 801fa44:	0028      	movs	r0, r5
 801fa46:	f000 fef0 	bl	802082a <__any_on>
 801fa4a:	0004      	movs	r4, r0
 801fa4c:	231f      	movs	r3, #31
 801fa4e:	117a      	asrs	r2, r7, #5
 801fa50:	401f      	ands	r7, r3
 801fa52:	3b1e      	subs	r3, #30
 801fa54:	40bb      	lsls	r3, r7
 801fa56:	9902      	ldr	r1, [sp, #8]
 801fa58:	0092      	lsls	r2, r2, #2
 801fa5a:	5852      	ldr	r2, [r2, r1]
 801fa5c:	421a      	tst	r2, r3
 801fa5e:	d001      	beq.n	801fa64 <__gethex+0x308>
 801fa60:	2302      	movs	r3, #2
 801fa62:	431c      	orrs	r4, r3
 801fa64:	9b00      	ldr	r3, [sp, #0]
 801fa66:	0031      	movs	r1, r6
 801fa68:	1b9b      	subs	r3, r3, r6
 801fa6a:	2602      	movs	r6, #2
 801fa6c:	0028      	movs	r0, r5
 801fa6e:	9300      	str	r3, [sp, #0]
 801fa70:	f7ff fe0c 	bl	801f68c <rshift>
 801fa74:	9b01      	ldr	r3, [sp, #4]
 801fa76:	685f      	ldr	r7, [r3, #4]
 801fa78:	2c00      	cmp	r4, #0
 801fa7a:	d03f      	beq.n	801fafc <__gethex+0x3a0>
 801fa7c:	9b01      	ldr	r3, [sp, #4]
 801fa7e:	68db      	ldr	r3, [r3, #12]
 801fa80:	2b02      	cmp	r3, #2
 801fa82:	d010      	beq.n	801faa6 <__gethex+0x34a>
 801fa84:	2b03      	cmp	r3, #3
 801fa86:	d012      	beq.n	801faae <__gethex+0x352>
 801fa88:	2b01      	cmp	r3, #1
 801fa8a:	d106      	bne.n	801fa9a <__gethex+0x33e>
 801fa8c:	07a2      	lsls	r2, r4, #30
 801fa8e:	d504      	bpl.n	801fa9a <__gethex+0x33e>
 801fa90:	9a02      	ldr	r2, [sp, #8]
 801fa92:	6812      	ldr	r2, [r2, #0]
 801fa94:	4314      	orrs	r4, r2
 801fa96:	421c      	tst	r4, r3
 801fa98:	d10c      	bne.n	801fab4 <__gethex+0x358>
 801fa9a:	2310      	movs	r3, #16
 801fa9c:	e02d      	b.n	801fafa <__gethex+0x39e>
 801fa9e:	2401      	movs	r4, #1
 801faa0:	e7d4      	b.n	801fa4c <__gethex+0x2f0>
 801faa2:	2601      	movs	r6, #1
 801faa4:	e7e8      	b.n	801fa78 <__gethex+0x31c>
 801faa6:	2301      	movs	r3, #1
 801faa8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801faaa:	1a9b      	subs	r3, r3, r2
 801faac:	930f      	str	r3, [sp, #60]	@ 0x3c
 801faae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fab0:	2b00      	cmp	r3, #0
 801fab2:	d0f2      	beq.n	801fa9a <__gethex+0x33e>
 801fab4:	692b      	ldr	r3, [r5, #16]
 801fab6:	2000      	movs	r0, #0
 801fab8:	9302      	str	r3, [sp, #8]
 801faba:	009b      	lsls	r3, r3, #2
 801fabc:	9304      	str	r3, [sp, #16]
 801fabe:	002b      	movs	r3, r5
 801fac0:	9a04      	ldr	r2, [sp, #16]
 801fac2:	3314      	adds	r3, #20
 801fac4:	1899      	adds	r1, r3, r2
 801fac6:	681a      	ldr	r2, [r3, #0]
 801fac8:	1c54      	adds	r4, r2, #1
 801faca:	d01c      	beq.n	801fb06 <__gethex+0x3aa>
 801facc:	3201      	adds	r2, #1
 801face:	601a      	str	r2, [r3, #0]
 801fad0:	002b      	movs	r3, r5
 801fad2:	3314      	adds	r3, #20
 801fad4:	2e02      	cmp	r6, #2
 801fad6:	d13f      	bne.n	801fb58 <__gethex+0x3fc>
 801fad8:	9a01      	ldr	r2, [sp, #4]
 801fada:	9900      	ldr	r1, [sp, #0]
 801fadc:	6812      	ldr	r2, [r2, #0]
 801fade:	3a01      	subs	r2, #1
 801fae0:	428a      	cmp	r2, r1
 801fae2:	d109      	bne.n	801faf8 <__gethex+0x39c>
 801fae4:	000a      	movs	r2, r1
 801fae6:	201f      	movs	r0, #31
 801fae8:	4010      	ands	r0, r2
 801faea:	2201      	movs	r2, #1
 801faec:	4082      	lsls	r2, r0
 801faee:	1149      	asrs	r1, r1, #5
 801faf0:	0089      	lsls	r1, r1, #2
 801faf2:	58cb      	ldr	r3, [r1, r3]
 801faf4:	4213      	tst	r3, r2
 801faf6:	d13d      	bne.n	801fb74 <__gethex+0x418>
 801faf8:	2320      	movs	r3, #32
 801fafa:	431e      	orrs	r6, r3
 801fafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fafe:	601d      	str	r5, [r3, #0]
 801fb00:	9b07      	ldr	r3, [sp, #28]
 801fb02:	601f      	str	r7, [r3, #0]
 801fb04:	e6b4      	b.n	801f870 <__gethex+0x114>
 801fb06:	c301      	stmia	r3!, {r0}
 801fb08:	4299      	cmp	r1, r3
 801fb0a:	d8dc      	bhi.n	801fac6 <__gethex+0x36a>
 801fb0c:	68ab      	ldr	r3, [r5, #8]
 801fb0e:	9a02      	ldr	r2, [sp, #8]
 801fb10:	429a      	cmp	r2, r3
 801fb12:	db18      	blt.n	801fb46 <__gethex+0x3ea>
 801fb14:	6869      	ldr	r1, [r5, #4]
 801fb16:	9803      	ldr	r0, [sp, #12]
 801fb18:	3101      	adds	r1, #1
 801fb1a:	f000 f9df 	bl	801fedc <_Balloc>
 801fb1e:	1e04      	subs	r4, r0, #0
 801fb20:	d104      	bne.n	801fb2c <__gethex+0x3d0>
 801fb22:	0022      	movs	r2, r4
 801fb24:	2184      	movs	r1, #132	@ 0x84
 801fb26:	4b1d      	ldr	r3, [pc, #116]	@ (801fb9c <__gethex+0x440>)
 801fb28:	481d      	ldr	r0, [pc, #116]	@ (801fba0 <__gethex+0x444>)
 801fb2a:	e6c4      	b.n	801f8b6 <__gethex+0x15a>
 801fb2c:	0029      	movs	r1, r5
 801fb2e:	692a      	ldr	r2, [r5, #16]
 801fb30:	310c      	adds	r1, #12
 801fb32:	3202      	adds	r2, #2
 801fb34:	0092      	lsls	r2, r2, #2
 801fb36:	300c      	adds	r0, #12
 801fb38:	f7fe fecc 	bl	801e8d4 <memcpy>
 801fb3c:	0029      	movs	r1, r5
 801fb3e:	9803      	ldr	r0, [sp, #12]
 801fb40:	f000 fa10 	bl	801ff64 <_Bfree>
 801fb44:	0025      	movs	r5, r4
 801fb46:	692b      	ldr	r3, [r5, #16]
 801fb48:	1c5a      	adds	r2, r3, #1
 801fb4a:	612a      	str	r2, [r5, #16]
 801fb4c:	2201      	movs	r2, #1
 801fb4e:	3304      	adds	r3, #4
 801fb50:	009b      	lsls	r3, r3, #2
 801fb52:	18eb      	adds	r3, r5, r3
 801fb54:	605a      	str	r2, [r3, #4]
 801fb56:	e7bb      	b.n	801fad0 <__gethex+0x374>
 801fb58:	692a      	ldr	r2, [r5, #16]
 801fb5a:	9902      	ldr	r1, [sp, #8]
 801fb5c:	428a      	cmp	r2, r1
 801fb5e:	dd0b      	ble.n	801fb78 <__gethex+0x41c>
 801fb60:	2101      	movs	r1, #1
 801fb62:	0028      	movs	r0, r5
 801fb64:	f7ff fd92 	bl	801f68c <rshift>
 801fb68:	9b01      	ldr	r3, [sp, #4]
 801fb6a:	3701      	adds	r7, #1
 801fb6c:	689b      	ldr	r3, [r3, #8]
 801fb6e:	42bb      	cmp	r3, r7
 801fb70:	da00      	bge.n	801fb74 <__gethex+0x418>
 801fb72:	e6df      	b.n	801f934 <__gethex+0x1d8>
 801fb74:	2601      	movs	r6, #1
 801fb76:	e7bf      	b.n	801faf8 <__gethex+0x39c>
 801fb78:	221f      	movs	r2, #31
 801fb7a:	9c00      	ldr	r4, [sp, #0]
 801fb7c:	9900      	ldr	r1, [sp, #0]
 801fb7e:	4014      	ands	r4, r2
 801fb80:	4211      	tst	r1, r2
 801fb82:	d0f7      	beq.n	801fb74 <__gethex+0x418>
 801fb84:	9a04      	ldr	r2, [sp, #16]
 801fb86:	189b      	adds	r3, r3, r2
 801fb88:	3b04      	subs	r3, #4
 801fb8a:	6818      	ldr	r0, [r3, #0]
 801fb8c:	f000 fa9e 	bl	80200cc <__hi0bits>
 801fb90:	2320      	movs	r3, #32
 801fb92:	1b1b      	subs	r3, r3, r4
 801fb94:	4298      	cmp	r0, r3
 801fb96:	dbe3      	blt.n	801fb60 <__gethex+0x404>
 801fb98:	e7ec      	b.n	801fb74 <__gethex+0x418>
 801fb9a:	46c0      	nop			@ (mov r8, r8)
 801fb9c:	08023ad1 	.word	0x08023ad1
 801fba0:	08023ae2 	.word	0x08023ae2

0801fba4 <L_shift>:
 801fba4:	2308      	movs	r3, #8
 801fba6:	b570      	push	{r4, r5, r6, lr}
 801fba8:	2520      	movs	r5, #32
 801fbaa:	1a9a      	subs	r2, r3, r2
 801fbac:	0092      	lsls	r2, r2, #2
 801fbae:	1aad      	subs	r5, r5, r2
 801fbb0:	6843      	ldr	r3, [r0, #4]
 801fbb2:	6804      	ldr	r4, [r0, #0]
 801fbb4:	001e      	movs	r6, r3
 801fbb6:	40ae      	lsls	r6, r5
 801fbb8:	40d3      	lsrs	r3, r2
 801fbba:	4334      	orrs	r4, r6
 801fbbc:	6004      	str	r4, [r0, #0]
 801fbbe:	6043      	str	r3, [r0, #4]
 801fbc0:	3004      	adds	r0, #4
 801fbc2:	4288      	cmp	r0, r1
 801fbc4:	d3f4      	bcc.n	801fbb0 <L_shift+0xc>
 801fbc6:	bd70      	pop	{r4, r5, r6, pc}

0801fbc8 <__match>:
 801fbc8:	b530      	push	{r4, r5, lr}
 801fbca:	6803      	ldr	r3, [r0, #0]
 801fbcc:	780c      	ldrb	r4, [r1, #0]
 801fbce:	3301      	adds	r3, #1
 801fbd0:	2c00      	cmp	r4, #0
 801fbd2:	d102      	bne.n	801fbda <__match+0x12>
 801fbd4:	6003      	str	r3, [r0, #0]
 801fbd6:	2001      	movs	r0, #1
 801fbd8:	bd30      	pop	{r4, r5, pc}
 801fbda:	781a      	ldrb	r2, [r3, #0]
 801fbdc:	0015      	movs	r5, r2
 801fbde:	3d41      	subs	r5, #65	@ 0x41
 801fbe0:	2d19      	cmp	r5, #25
 801fbe2:	d800      	bhi.n	801fbe6 <__match+0x1e>
 801fbe4:	3220      	adds	r2, #32
 801fbe6:	3101      	adds	r1, #1
 801fbe8:	42a2      	cmp	r2, r4
 801fbea:	d0ef      	beq.n	801fbcc <__match+0x4>
 801fbec:	2000      	movs	r0, #0
 801fbee:	e7f3      	b.n	801fbd8 <__match+0x10>

0801fbf0 <__hexnan>:
 801fbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fbf2:	680b      	ldr	r3, [r1, #0]
 801fbf4:	b08b      	sub	sp, #44	@ 0x2c
 801fbf6:	9201      	str	r2, [sp, #4]
 801fbf8:	9901      	ldr	r1, [sp, #4]
 801fbfa:	115a      	asrs	r2, r3, #5
 801fbfc:	0092      	lsls	r2, r2, #2
 801fbfe:	188a      	adds	r2, r1, r2
 801fc00:	9202      	str	r2, [sp, #8]
 801fc02:	0019      	movs	r1, r3
 801fc04:	221f      	movs	r2, #31
 801fc06:	4011      	ands	r1, r2
 801fc08:	9008      	str	r0, [sp, #32]
 801fc0a:	9106      	str	r1, [sp, #24]
 801fc0c:	4213      	tst	r3, r2
 801fc0e:	d002      	beq.n	801fc16 <__hexnan+0x26>
 801fc10:	9b02      	ldr	r3, [sp, #8]
 801fc12:	3304      	adds	r3, #4
 801fc14:	9302      	str	r3, [sp, #8]
 801fc16:	9b02      	ldr	r3, [sp, #8]
 801fc18:	2500      	movs	r5, #0
 801fc1a:	1f1f      	subs	r7, r3, #4
 801fc1c:	003e      	movs	r6, r7
 801fc1e:	003c      	movs	r4, r7
 801fc20:	9b08      	ldr	r3, [sp, #32]
 801fc22:	603d      	str	r5, [r7, #0]
 801fc24:	681b      	ldr	r3, [r3, #0]
 801fc26:	9507      	str	r5, [sp, #28]
 801fc28:	9305      	str	r3, [sp, #20]
 801fc2a:	9503      	str	r5, [sp, #12]
 801fc2c:	9b05      	ldr	r3, [sp, #20]
 801fc2e:	3301      	adds	r3, #1
 801fc30:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc32:	9b05      	ldr	r3, [sp, #20]
 801fc34:	785b      	ldrb	r3, [r3, #1]
 801fc36:	9304      	str	r3, [sp, #16]
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	d028      	beq.n	801fc8e <__hexnan+0x9e>
 801fc3c:	9804      	ldr	r0, [sp, #16]
 801fc3e:	f7ff fd78 	bl	801f732 <__hexdig_fun>
 801fc42:	2800      	cmp	r0, #0
 801fc44:	d155      	bne.n	801fcf2 <__hexnan+0x102>
 801fc46:	9b04      	ldr	r3, [sp, #16]
 801fc48:	2b20      	cmp	r3, #32
 801fc4a:	d819      	bhi.n	801fc80 <__hexnan+0x90>
 801fc4c:	9b03      	ldr	r3, [sp, #12]
 801fc4e:	9a07      	ldr	r2, [sp, #28]
 801fc50:	4293      	cmp	r3, r2
 801fc52:	dd12      	ble.n	801fc7a <__hexnan+0x8a>
 801fc54:	42b4      	cmp	r4, r6
 801fc56:	d206      	bcs.n	801fc66 <__hexnan+0x76>
 801fc58:	2d07      	cmp	r5, #7
 801fc5a:	dc04      	bgt.n	801fc66 <__hexnan+0x76>
 801fc5c:	002a      	movs	r2, r5
 801fc5e:	0031      	movs	r1, r6
 801fc60:	0020      	movs	r0, r4
 801fc62:	f7ff ff9f 	bl	801fba4 <L_shift>
 801fc66:	9b01      	ldr	r3, [sp, #4]
 801fc68:	2508      	movs	r5, #8
 801fc6a:	429c      	cmp	r4, r3
 801fc6c:	d905      	bls.n	801fc7a <__hexnan+0x8a>
 801fc6e:	1f26      	subs	r6, r4, #4
 801fc70:	2500      	movs	r5, #0
 801fc72:	0034      	movs	r4, r6
 801fc74:	9b03      	ldr	r3, [sp, #12]
 801fc76:	6035      	str	r5, [r6, #0]
 801fc78:	9307      	str	r3, [sp, #28]
 801fc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc7c:	9305      	str	r3, [sp, #20]
 801fc7e:	e7d5      	b.n	801fc2c <__hexnan+0x3c>
 801fc80:	9b04      	ldr	r3, [sp, #16]
 801fc82:	2b29      	cmp	r3, #41	@ 0x29
 801fc84:	d15a      	bne.n	801fd3c <__hexnan+0x14c>
 801fc86:	9b05      	ldr	r3, [sp, #20]
 801fc88:	9a08      	ldr	r2, [sp, #32]
 801fc8a:	3302      	adds	r3, #2
 801fc8c:	6013      	str	r3, [r2, #0]
 801fc8e:	9b03      	ldr	r3, [sp, #12]
 801fc90:	2b00      	cmp	r3, #0
 801fc92:	d053      	beq.n	801fd3c <__hexnan+0x14c>
 801fc94:	42b4      	cmp	r4, r6
 801fc96:	d206      	bcs.n	801fca6 <__hexnan+0xb6>
 801fc98:	2d07      	cmp	r5, #7
 801fc9a:	dc04      	bgt.n	801fca6 <__hexnan+0xb6>
 801fc9c:	002a      	movs	r2, r5
 801fc9e:	0031      	movs	r1, r6
 801fca0:	0020      	movs	r0, r4
 801fca2:	f7ff ff7f 	bl	801fba4 <L_shift>
 801fca6:	9b01      	ldr	r3, [sp, #4]
 801fca8:	429c      	cmp	r4, r3
 801fcaa:	d936      	bls.n	801fd1a <__hexnan+0x12a>
 801fcac:	001a      	movs	r2, r3
 801fcae:	0023      	movs	r3, r4
 801fcb0:	cb02      	ldmia	r3!, {r1}
 801fcb2:	c202      	stmia	r2!, {r1}
 801fcb4:	429f      	cmp	r7, r3
 801fcb6:	d2fb      	bcs.n	801fcb0 <__hexnan+0xc0>
 801fcb8:	9b02      	ldr	r3, [sp, #8]
 801fcba:	1c61      	adds	r1, r4, #1
 801fcbc:	1eda      	subs	r2, r3, #3
 801fcbe:	2304      	movs	r3, #4
 801fcc0:	4291      	cmp	r1, r2
 801fcc2:	d805      	bhi.n	801fcd0 <__hexnan+0xe0>
 801fcc4:	9b02      	ldr	r3, [sp, #8]
 801fcc6:	3b04      	subs	r3, #4
 801fcc8:	1b1b      	subs	r3, r3, r4
 801fcca:	089b      	lsrs	r3, r3, #2
 801fccc:	3301      	adds	r3, #1
 801fcce:	009b      	lsls	r3, r3, #2
 801fcd0:	9a01      	ldr	r2, [sp, #4]
 801fcd2:	18d3      	adds	r3, r2, r3
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	c304      	stmia	r3!, {r2}
 801fcd8:	429f      	cmp	r7, r3
 801fcda:	d2fc      	bcs.n	801fcd6 <__hexnan+0xe6>
 801fcdc:	683b      	ldr	r3, [r7, #0]
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d104      	bne.n	801fcec <__hexnan+0xfc>
 801fce2:	9b01      	ldr	r3, [sp, #4]
 801fce4:	429f      	cmp	r7, r3
 801fce6:	d127      	bne.n	801fd38 <__hexnan+0x148>
 801fce8:	2301      	movs	r3, #1
 801fcea:	603b      	str	r3, [r7, #0]
 801fcec:	2005      	movs	r0, #5
 801fcee:	b00b      	add	sp, #44	@ 0x2c
 801fcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fcf2:	9b03      	ldr	r3, [sp, #12]
 801fcf4:	3501      	adds	r5, #1
 801fcf6:	3301      	adds	r3, #1
 801fcf8:	9303      	str	r3, [sp, #12]
 801fcfa:	2d08      	cmp	r5, #8
 801fcfc:	dd06      	ble.n	801fd0c <__hexnan+0x11c>
 801fcfe:	9b01      	ldr	r3, [sp, #4]
 801fd00:	429c      	cmp	r4, r3
 801fd02:	d9ba      	bls.n	801fc7a <__hexnan+0x8a>
 801fd04:	2300      	movs	r3, #0
 801fd06:	2501      	movs	r5, #1
 801fd08:	3c04      	subs	r4, #4
 801fd0a:	6023      	str	r3, [r4, #0]
 801fd0c:	220f      	movs	r2, #15
 801fd0e:	6823      	ldr	r3, [r4, #0]
 801fd10:	4010      	ands	r0, r2
 801fd12:	011b      	lsls	r3, r3, #4
 801fd14:	4303      	orrs	r3, r0
 801fd16:	6023      	str	r3, [r4, #0]
 801fd18:	e7af      	b.n	801fc7a <__hexnan+0x8a>
 801fd1a:	9b06      	ldr	r3, [sp, #24]
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d0dd      	beq.n	801fcdc <__hexnan+0xec>
 801fd20:	2320      	movs	r3, #32
 801fd22:	9a06      	ldr	r2, [sp, #24]
 801fd24:	9902      	ldr	r1, [sp, #8]
 801fd26:	1a9b      	subs	r3, r3, r2
 801fd28:	2201      	movs	r2, #1
 801fd2a:	4252      	negs	r2, r2
 801fd2c:	40da      	lsrs	r2, r3
 801fd2e:	3904      	subs	r1, #4
 801fd30:	680b      	ldr	r3, [r1, #0]
 801fd32:	4013      	ands	r3, r2
 801fd34:	600b      	str	r3, [r1, #0]
 801fd36:	e7d1      	b.n	801fcdc <__hexnan+0xec>
 801fd38:	3f04      	subs	r7, #4
 801fd3a:	e7cf      	b.n	801fcdc <__hexnan+0xec>
 801fd3c:	2004      	movs	r0, #4
 801fd3e:	e7d6      	b.n	801fcee <__hexnan+0xfe>

0801fd40 <malloc>:
 801fd40:	b510      	push	{r4, lr}
 801fd42:	4b03      	ldr	r3, [pc, #12]	@ (801fd50 <malloc+0x10>)
 801fd44:	0001      	movs	r1, r0
 801fd46:	6818      	ldr	r0, [r3, #0]
 801fd48:	f000 f826 	bl	801fd98 <_malloc_r>
 801fd4c:	bd10      	pop	{r4, pc}
 801fd4e:	46c0      	nop			@ (mov r8, r8)
 801fd50:	200003cc 	.word	0x200003cc

0801fd54 <sbrk_aligned>:
 801fd54:	b570      	push	{r4, r5, r6, lr}
 801fd56:	4e0f      	ldr	r6, [pc, #60]	@ (801fd94 <sbrk_aligned+0x40>)
 801fd58:	000d      	movs	r5, r1
 801fd5a:	6831      	ldr	r1, [r6, #0]
 801fd5c:	0004      	movs	r4, r0
 801fd5e:	2900      	cmp	r1, #0
 801fd60:	d102      	bne.n	801fd68 <sbrk_aligned+0x14>
 801fd62:	f001 f989 	bl	8021078 <_sbrk_r>
 801fd66:	6030      	str	r0, [r6, #0]
 801fd68:	0029      	movs	r1, r5
 801fd6a:	0020      	movs	r0, r4
 801fd6c:	f001 f984 	bl	8021078 <_sbrk_r>
 801fd70:	1c43      	adds	r3, r0, #1
 801fd72:	d103      	bne.n	801fd7c <sbrk_aligned+0x28>
 801fd74:	2501      	movs	r5, #1
 801fd76:	426d      	negs	r5, r5
 801fd78:	0028      	movs	r0, r5
 801fd7a:	bd70      	pop	{r4, r5, r6, pc}
 801fd7c:	2303      	movs	r3, #3
 801fd7e:	1cc5      	adds	r5, r0, #3
 801fd80:	439d      	bics	r5, r3
 801fd82:	42a8      	cmp	r0, r5
 801fd84:	d0f8      	beq.n	801fd78 <sbrk_aligned+0x24>
 801fd86:	1a29      	subs	r1, r5, r0
 801fd88:	0020      	movs	r0, r4
 801fd8a:	f001 f975 	bl	8021078 <_sbrk_r>
 801fd8e:	3001      	adds	r0, #1
 801fd90:	d1f2      	bne.n	801fd78 <sbrk_aligned+0x24>
 801fd92:	e7ef      	b.n	801fd74 <sbrk_aligned+0x20>
 801fd94:	200038fc 	.word	0x200038fc

0801fd98 <_malloc_r>:
 801fd98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fd9a:	2203      	movs	r2, #3
 801fd9c:	1ccb      	adds	r3, r1, #3
 801fd9e:	4393      	bics	r3, r2
 801fda0:	3308      	adds	r3, #8
 801fda2:	0005      	movs	r5, r0
 801fda4:	001f      	movs	r7, r3
 801fda6:	2b0c      	cmp	r3, #12
 801fda8:	d234      	bcs.n	801fe14 <_malloc_r+0x7c>
 801fdaa:	270c      	movs	r7, #12
 801fdac:	42b9      	cmp	r1, r7
 801fdae:	d833      	bhi.n	801fe18 <_malloc_r+0x80>
 801fdb0:	0028      	movs	r0, r5
 801fdb2:	f000 f883 	bl	801febc <__malloc_lock>
 801fdb6:	4e37      	ldr	r6, [pc, #220]	@ (801fe94 <_malloc_r+0xfc>)
 801fdb8:	6833      	ldr	r3, [r6, #0]
 801fdba:	001c      	movs	r4, r3
 801fdbc:	2c00      	cmp	r4, #0
 801fdbe:	d12f      	bne.n	801fe20 <_malloc_r+0x88>
 801fdc0:	0039      	movs	r1, r7
 801fdc2:	0028      	movs	r0, r5
 801fdc4:	f7ff ffc6 	bl	801fd54 <sbrk_aligned>
 801fdc8:	0004      	movs	r4, r0
 801fdca:	1c43      	adds	r3, r0, #1
 801fdcc:	d15f      	bne.n	801fe8e <_malloc_r+0xf6>
 801fdce:	6834      	ldr	r4, [r6, #0]
 801fdd0:	9400      	str	r4, [sp, #0]
 801fdd2:	9b00      	ldr	r3, [sp, #0]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d14a      	bne.n	801fe6e <_malloc_r+0xd6>
 801fdd8:	2c00      	cmp	r4, #0
 801fdda:	d052      	beq.n	801fe82 <_malloc_r+0xea>
 801fddc:	6823      	ldr	r3, [r4, #0]
 801fdde:	0028      	movs	r0, r5
 801fde0:	18e3      	adds	r3, r4, r3
 801fde2:	9900      	ldr	r1, [sp, #0]
 801fde4:	9301      	str	r3, [sp, #4]
 801fde6:	f001 f947 	bl	8021078 <_sbrk_r>
 801fdea:	9b01      	ldr	r3, [sp, #4]
 801fdec:	4283      	cmp	r3, r0
 801fdee:	d148      	bne.n	801fe82 <_malloc_r+0xea>
 801fdf0:	6823      	ldr	r3, [r4, #0]
 801fdf2:	0028      	movs	r0, r5
 801fdf4:	1aff      	subs	r7, r7, r3
 801fdf6:	0039      	movs	r1, r7
 801fdf8:	f7ff ffac 	bl	801fd54 <sbrk_aligned>
 801fdfc:	3001      	adds	r0, #1
 801fdfe:	d040      	beq.n	801fe82 <_malloc_r+0xea>
 801fe00:	6823      	ldr	r3, [r4, #0]
 801fe02:	19db      	adds	r3, r3, r7
 801fe04:	6023      	str	r3, [r4, #0]
 801fe06:	6833      	ldr	r3, [r6, #0]
 801fe08:	685a      	ldr	r2, [r3, #4]
 801fe0a:	2a00      	cmp	r2, #0
 801fe0c:	d133      	bne.n	801fe76 <_malloc_r+0xde>
 801fe0e:	9b00      	ldr	r3, [sp, #0]
 801fe10:	6033      	str	r3, [r6, #0]
 801fe12:	e019      	b.n	801fe48 <_malloc_r+0xb0>
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	dac9      	bge.n	801fdac <_malloc_r+0x14>
 801fe18:	230c      	movs	r3, #12
 801fe1a:	602b      	str	r3, [r5, #0]
 801fe1c:	2000      	movs	r0, #0
 801fe1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801fe20:	6821      	ldr	r1, [r4, #0]
 801fe22:	1bc9      	subs	r1, r1, r7
 801fe24:	d420      	bmi.n	801fe68 <_malloc_r+0xd0>
 801fe26:	290b      	cmp	r1, #11
 801fe28:	d90a      	bls.n	801fe40 <_malloc_r+0xa8>
 801fe2a:	19e2      	adds	r2, r4, r7
 801fe2c:	6027      	str	r7, [r4, #0]
 801fe2e:	42a3      	cmp	r3, r4
 801fe30:	d104      	bne.n	801fe3c <_malloc_r+0xa4>
 801fe32:	6032      	str	r2, [r6, #0]
 801fe34:	6863      	ldr	r3, [r4, #4]
 801fe36:	6011      	str	r1, [r2, #0]
 801fe38:	6053      	str	r3, [r2, #4]
 801fe3a:	e005      	b.n	801fe48 <_malloc_r+0xb0>
 801fe3c:	605a      	str	r2, [r3, #4]
 801fe3e:	e7f9      	b.n	801fe34 <_malloc_r+0x9c>
 801fe40:	6862      	ldr	r2, [r4, #4]
 801fe42:	42a3      	cmp	r3, r4
 801fe44:	d10e      	bne.n	801fe64 <_malloc_r+0xcc>
 801fe46:	6032      	str	r2, [r6, #0]
 801fe48:	0028      	movs	r0, r5
 801fe4a:	f000 f83f 	bl	801fecc <__malloc_unlock>
 801fe4e:	0020      	movs	r0, r4
 801fe50:	2207      	movs	r2, #7
 801fe52:	300b      	adds	r0, #11
 801fe54:	1d23      	adds	r3, r4, #4
 801fe56:	4390      	bics	r0, r2
 801fe58:	1ac2      	subs	r2, r0, r3
 801fe5a:	4298      	cmp	r0, r3
 801fe5c:	d0df      	beq.n	801fe1e <_malloc_r+0x86>
 801fe5e:	1a1b      	subs	r3, r3, r0
 801fe60:	50a3      	str	r3, [r4, r2]
 801fe62:	e7dc      	b.n	801fe1e <_malloc_r+0x86>
 801fe64:	605a      	str	r2, [r3, #4]
 801fe66:	e7ef      	b.n	801fe48 <_malloc_r+0xb0>
 801fe68:	0023      	movs	r3, r4
 801fe6a:	6864      	ldr	r4, [r4, #4]
 801fe6c:	e7a6      	b.n	801fdbc <_malloc_r+0x24>
 801fe6e:	9c00      	ldr	r4, [sp, #0]
 801fe70:	6863      	ldr	r3, [r4, #4]
 801fe72:	9300      	str	r3, [sp, #0]
 801fe74:	e7ad      	b.n	801fdd2 <_malloc_r+0x3a>
 801fe76:	001a      	movs	r2, r3
 801fe78:	685b      	ldr	r3, [r3, #4]
 801fe7a:	42a3      	cmp	r3, r4
 801fe7c:	d1fb      	bne.n	801fe76 <_malloc_r+0xde>
 801fe7e:	2300      	movs	r3, #0
 801fe80:	e7da      	b.n	801fe38 <_malloc_r+0xa0>
 801fe82:	230c      	movs	r3, #12
 801fe84:	0028      	movs	r0, r5
 801fe86:	602b      	str	r3, [r5, #0]
 801fe88:	f000 f820 	bl	801fecc <__malloc_unlock>
 801fe8c:	e7c6      	b.n	801fe1c <_malloc_r+0x84>
 801fe8e:	6007      	str	r7, [r0, #0]
 801fe90:	e7da      	b.n	801fe48 <_malloc_r+0xb0>
 801fe92:	46c0      	nop			@ (mov r8, r8)
 801fe94:	20003900 	.word	0x20003900

0801fe98 <__ascii_mbtowc>:
 801fe98:	b082      	sub	sp, #8
 801fe9a:	2900      	cmp	r1, #0
 801fe9c:	d100      	bne.n	801fea0 <__ascii_mbtowc+0x8>
 801fe9e:	a901      	add	r1, sp, #4
 801fea0:	1e10      	subs	r0, r2, #0
 801fea2:	d006      	beq.n	801feb2 <__ascii_mbtowc+0x1a>
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d006      	beq.n	801feb6 <__ascii_mbtowc+0x1e>
 801fea8:	7813      	ldrb	r3, [r2, #0]
 801feaa:	600b      	str	r3, [r1, #0]
 801feac:	7810      	ldrb	r0, [r2, #0]
 801feae:	1e43      	subs	r3, r0, #1
 801feb0:	4198      	sbcs	r0, r3
 801feb2:	b002      	add	sp, #8
 801feb4:	4770      	bx	lr
 801feb6:	2002      	movs	r0, #2
 801feb8:	4240      	negs	r0, r0
 801feba:	e7fa      	b.n	801feb2 <__ascii_mbtowc+0x1a>

0801febc <__malloc_lock>:
 801febc:	b510      	push	{r4, lr}
 801febe:	4802      	ldr	r0, [pc, #8]	@ (801fec8 <__malloc_lock+0xc>)
 801fec0:	f7fe fcfb 	bl	801e8ba <__retarget_lock_acquire_recursive>
 801fec4:	bd10      	pop	{r4, pc}
 801fec6:	46c0      	nop			@ (mov r8, r8)
 801fec8:	200038f8 	.word	0x200038f8

0801fecc <__malloc_unlock>:
 801fecc:	b510      	push	{r4, lr}
 801fece:	4802      	ldr	r0, [pc, #8]	@ (801fed8 <__malloc_unlock+0xc>)
 801fed0:	f7fe fcf4 	bl	801e8bc <__retarget_lock_release_recursive>
 801fed4:	bd10      	pop	{r4, pc}
 801fed6:	46c0      	nop			@ (mov r8, r8)
 801fed8:	200038f8 	.word	0x200038f8

0801fedc <_Balloc>:
 801fedc:	b570      	push	{r4, r5, r6, lr}
 801fede:	69c5      	ldr	r5, [r0, #28]
 801fee0:	0006      	movs	r6, r0
 801fee2:	000c      	movs	r4, r1
 801fee4:	2d00      	cmp	r5, #0
 801fee6:	d10e      	bne.n	801ff06 <_Balloc+0x2a>
 801fee8:	2010      	movs	r0, #16
 801feea:	f7ff ff29 	bl	801fd40 <malloc>
 801feee:	1e02      	subs	r2, r0, #0
 801fef0:	61f0      	str	r0, [r6, #28]
 801fef2:	d104      	bne.n	801fefe <_Balloc+0x22>
 801fef4:	216b      	movs	r1, #107	@ 0x6b
 801fef6:	4b19      	ldr	r3, [pc, #100]	@ (801ff5c <_Balloc+0x80>)
 801fef8:	4819      	ldr	r0, [pc, #100]	@ (801ff60 <_Balloc+0x84>)
 801fefa:	f001 f8cf 	bl	802109c <__assert_func>
 801fefe:	6045      	str	r5, [r0, #4]
 801ff00:	6085      	str	r5, [r0, #8]
 801ff02:	6005      	str	r5, [r0, #0]
 801ff04:	60c5      	str	r5, [r0, #12]
 801ff06:	69f5      	ldr	r5, [r6, #28]
 801ff08:	68eb      	ldr	r3, [r5, #12]
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d013      	beq.n	801ff36 <_Balloc+0x5a>
 801ff0e:	69f3      	ldr	r3, [r6, #28]
 801ff10:	00a2      	lsls	r2, r4, #2
 801ff12:	68db      	ldr	r3, [r3, #12]
 801ff14:	189b      	adds	r3, r3, r2
 801ff16:	6818      	ldr	r0, [r3, #0]
 801ff18:	2800      	cmp	r0, #0
 801ff1a:	d118      	bne.n	801ff4e <_Balloc+0x72>
 801ff1c:	2101      	movs	r1, #1
 801ff1e:	000d      	movs	r5, r1
 801ff20:	40a5      	lsls	r5, r4
 801ff22:	1d6a      	adds	r2, r5, #5
 801ff24:	0030      	movs	r0, r6
 801ff26:	0092      	lsls	r2, r2, #2
 801ff28:	f001 f8d6 	bl	80210d8 <_calloc_r>
 801ff2c:	2800      	cmp	r0, #0
 801ff2e:	d00c      	beq.n	801ff4a <_Balloc+0x6e>
 801ff30:	6044      	str	r4, [r0, #4]
 801ff32:	6085      	str	r5, [r0, #8]
 801ff34:	e00d      	b.n	801ff52 <_Balloc+0x76>
 801ff36:	2221      	movs	r2, #33	@ 0x21
 801ff38:	2104      	movs	r1, #4
 801ff3a:	0030      	movs	r0, r6
 801ff3c:	f001 f8cc 	bl	80210d8 <_calloc_r>
 801ff40:	69f3      	ldr	r3, [r6, #28]
 801ff42:	60e8      	str	r0, [r5, #12]
 801ff44:	68db      	ldr	r3, [r3, #12]
 801ff46:	2b00      	cmp	r3, #0
 801ff48:	d1e1      	bne.n	801ff0e <_Balloc+0x32>
 801ff4a:	2000      	movs	r0, #0
 801ff4c:	bd70      	pop	{r4, r5, r6, pc}
 801ff4e:	6802      	ldr	r2, [r0, #0]
 801ff50:	601a      	str	r2, [r3, #0]
 801ff52:	2300      	movs	r3, #0
 801ff54:	6103      	str	r3, [r0, #16]
 801ff56:	60c3      	str	r3, [r0, #12]
 801ff58:	e7f8      	b.n	801ff4c <_Balloc+0x70>
 801ff5a:	46c0      	nop			@ (mov r8, r8)
 801ff5c:	08023a62 	.word	0x08023a62
 801ff60:	08023b42 	.word	0x08023b42

0801ff64 <_Bfree>:
 801ff64:	b570      	push	{r4, r5, r6, lr}
 801ff66:	69c6      	ldr	r6, [r0, #28]
 801ff68:	0005      	movs	r5, r0
 801ff6a:	000c      	movs	r4, r1
 801ff6c:	2e00      	cmp	r6, #0
 801ff6e:	d10e      	bne.n	801ff8e <_Bfree+0x2a>
 801ff70:	2010      	movs	r0, #16
 801ff72:	f7ff fee5 	bl	801fd40 <malloc>
 801ff76:	1e02      	subs	r2, r0, #0
 801ff78:	61e8      	str	r0, [r5, #28]
 801ff7a:	d104      	bne.n	801ff86 <_Bfree+0x22>
 801ff7c:	218f      	movs	r1, #143	@ 0x8f
 801ff7e:	4b09      	ldr	r3, [pc, #36]	@ (801ffa4 <_Bfree+0x40>)
 801ff80:	4809      	ldr	r0, [pc, #36]	@ (801ffa8 <_Bfree+0x44>)
 801ff82:	f001 f88b 	bl	802109c <__assert_func>
 801ff86:	6046      	str	r6, [r0, #4]
 801ff88:	6086      	str	r6, [r0, #8]
 801ff8a:	6006      	str	r6, [r0, #0]
 801ff8c:	60c6      	str	r6, [r0, #12]
 801ff8e:	2c00      	cmp	r4, #0
 801ff90:	d007      	beq.n	801ffa2 <_Bfree+0x3e>
 801ff92:	69eb      	ldr	r3, [r5, #28]
 801ff94:	6862      	ldr	r2, [r4, #4]
 801ff96:	68db      	ldr	r3, [r3, #12]
 801ff98:	0092      	lsls	r2, r2, #2
 801ff9a:	189b      	adds	r3, r3, r2
 801ff9c:	681a      	ldr	r2, [r3, #0]
 801ff9e:	6022      	str	r2, [r4, #0]
 801ffa0:	601c      	str	r4, [r3, #0]
 801ffa2:	bd70      	pop	{r4, r5, r6, pc}
 801ffa4:	08023a62 	.word	0x08023a62
 801ffa8:	08023b42 	.word	0x08023b42

0801ffac <__multadd>:
 801ffac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ffae:	000f      	movs	r7, r1
 801ffb0:	9001      	str	r0, [sp, #4]
 801ffb2:	000c      	movs	r4, r1
 801ffb4:	001e      	movs	r6, r3
 801ffb6:	2000      	movs	r0, #0
 801ffb8:	690d      	ldr	r5, [r1, #16]
 801ffba:	3714      	adds	r7, #20
 801ffbc:	683b      	ldr	r3, [r7, #0]
 801ffbe:	3001      	adds	r0, #1
 801ffc0:	b299      	uxth	r1, r3
 801ffc2:	4351      	muls	r1, r2
 801ffc4:	0c1b      	lsrs	r3, r3, #16
 801ffc6:	4353      	muls	r3, r2
 801ffc8:	1989      	adds	r1, r1, r6
 801ffca:	0c0e      	lsrs	r6, r1, #16
 801ffcc:	199b      	adds	r3, r3, r6
 801ffce:	0c1e      	lsrs	r6, r3, #16
 801ffd0:	b289      	uxth	r1, r1
 801ffd2:	041b      	lsls	r3, r3, #16
 801ffd4:	185b      	adds	r3, r3, r1
 801ffd6:	c708      	stmia	r7!, {r3}
 801ffd8:	4285      	cmp	r5, r0
 801ffda:	dcef      	bgt.n	801ffbc <__multadd+0x10>
 801ffdc:	2e00      	cmp	r6, #0
 801ffde:	d022      	beq.n	8020026 <__multadd+0x7a>
 801ffe0:	68a3      	ldr	r3, [r4, #8]
 801ffe2:	42ab      	cmp	r3, r5
 801ffe4:	dc19      	bgt.n	802001a <__multadd+0x6e>
 801ffe6:	6861      	ldr	r1, [r4, #4]
 801ffe8:	9801      	ldr	r0, [sp, #4]
 801ffea:	3101      	adds	r1, #1
 801ffec:	f7ff ff76 	bl	801fedc <_Balloc>
 801fff0:	1e07      	subs	r7, r0, #0
 801fff2:	d105      	bne.n	8020000 <__multadd+0x54>
 801fff4:	003a      	movs	r2, r7
 801fff6:	21ba      	movs	r1, #186	@ 0xba
 801fff8:	4b0c      	ldr	r3, [pc, #48]	@ (802002c <__multadd+0x80>)
 801fffa:	480d      	ldr	r0, [pc, #52]	@ (8020030 <__multadd+0x84>)
 801fffc:	f001 f84e 	bl	802109c <__assert_func>
 8020000:	0021      	movs	r1, r4
 8020002:	6922      	ldr	r2, [r4, #16]
 8020004:	310c      	adds	r1, #12
 8020006:	3202      	adds	r2, #2
 8020008:	0092      	lsls	r2, r2, #2
 802000a:	300c      	adds	r0, #12
 802000c:	f7fe fc62 	bl	801e8d4 <memcpy>
 8020010:	0021      	movs	r1, r4
 8020012:	9801      	ldr	r0, [sp, #4]
 8020014:	f7ff ffa6 	bl	801ff64 <_Bfree>
 8020018:	003c      	movs	r4, r7
 802001a:	1d2b      	adds	r3, r5, #4
 802001c:	009b      	lsls	r3, r3, #2
 802001e:	18e3      	adds	r3, r4, r3
 8020020:	3501      	adds	r5, #1
 8020022:	605e      	str	r6, [r3, #4]
 8020024:	6125      	str	r5, [r4, #16]
 8020026:	0020      	movs	r0, r4
 8020028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802002a:	46c0      	nop			@ (mov r8, r8)
 802002c:	08023ad1 	.word	0x08023ad1
 8020030:	08023b42 	.word	0x08023b42

08020034 <__s2b>:
 8020034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020036:	0007      	movs	r7, r0
 8020038:	0018      	movs	r0, r3
 802003a:	000c      	movs	r4, r1
 802003c:	3008      	adds	r0, #8
 802003e:	2109      	movs	r1, #9
 8020040:	9301      	str	r3, [sp, #4]
 8020042:	0015      	movs	r5, r2
 8020044:	f7e0 f938 	bl	80002b8 <__divsi3>
 8020048:	2301      	movs	r3, #1
 802004a:	2100      	movs	r1, #0
 802004c:	4283      	cmp	r3, r0
 802004e:	db0a      	blt.n	8020066 <__s2b+0x32>
 8020050:	0038      	movs	r0, r7
 8020052:	f7ff ff43 	bl	801fedc <_Balloc>
 8020056:	1e01      	subs	r1, r0, #0
 8020058:	d108      	bne.n	802006c <__s2b+0x38>
 802005a:	000a      	movs	r2, r1
 802005c:	4b19      	ldr	r3, [pc, #100]	@ (80200c4 <__s2b+0x90>)
 802005e:	481a      	ldr	r0, [pc, #104]	@ (80200c8 <__s2b+0x94>)
 8020060:	31d3      	adds	r1, #211	@ 0xd3
 8020062:	f001 f81b 	bl	802109c <__assert_func>
 8020066:	005b      	lsls	r3, r3, #1
 8020068:	3101      	adds	r1, #1
 802006a:	e7ef      	b.n	802004c <__s2b+0x18>
 802006c:	9b08      	ldr	r3, [sp, #32]
 802006e:	6143      	str	r3, [r0, #20]
 8020070:	2301      	movs	r3, #1
 8020072:	6103      	str	r3, [r0, #16]
 8020074:	2d09      	cmp	r5, #9
 8020076:	dd18      	ble.n	80200aa <__s2b+0x76>
 8020078:	0023      	movs	r3, r4
 802007a:	3309      	adds	r3, #9
 802007c:	001e      	movs	r6, r3
 802007e:	9300      	str	r3, [sp, #0]
 8020080:	1964      	adds	r4, r4, r5
 8020082:	7833      	ldrb	r3, [r6, #0]
 8020084:	220a      	movs	r2, #10
 8020086:	0038      	movs	r0, r7
 8020088:	3b30      	subs	r3, #48	@ 0x30
 802008a:	f7ff ff8f 	bl	801ffac <__multadd>
 802008e:	3601      	adds	r6, #1
 8020090:	0001      	movs	r1, r0
 8020092:	42a6      	cmp	r6, r4
 8020094:	d1f5      	bne.n	8020082 <__s2b+0x4e>
 8020096:	002c      	movs	r4, r5
 8020098:	9b00      	ldr	r3, [sp, #0]
 802009a:	3c08      	subs	r4, #8
 802009c:	191c      	adds	r4, r3, r4
 802009e:	002e      	movs	r6, r5
 80200a0:	9b01      	ldr	r3, [sp, #4]
 80200a2:	429e      	cmp	r6, r3
 80200a4:	db04      	blt.n	80200b0 <__s2b+0x7c>
 80200a6:	0008      	movs	r0, r1
 80200a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80200aa:	2509      	movs	r5, #9
 80200ac:	340a      	adds	r4, #10
 80200ae:	e7f6      	b.n	802009e <__s2b+0x6a>
 80200b0:	1b63      	subs	r3, r4, r5
 80200b2:	5d9b      	ldrb	r3, [r3, r6]
 80200b4:	220a      	movs	r2, #10
 80200b6:	0038      	movs	r0, r7
 80200b8:	3b30      	subs	r3, #48	@ 0x30
 80200ba:	f7ff ff77 	bl	801ffac <__multadd>
 80200be:	3601      	adds	r6, #1
 80200c0:	0001      	movs	r1, r0
 80200c2:	e7ed      	b.n	80200a0 <__s2b+0x6c>
 80200c4:	08023ad1 	.word	0x08023ad1
 80200c8:	08023b42 	.word	0x08023b42

080200cc <__hi0bits>:
 80200cc:	2280      	movs	r2, #128	@ 0x80
 80200ce:	0003      	movs	r3, r0
 80200d0:	0252      	lsls	r2, r2, #9
 80200d2:	2000      	movs	r0, #0
 80200d4:	4293      	cmp	r3, r2
 80200d6:	d201      	bcs.n	80200dc <__hi0bits+0x10>
 80200d8:	041b      	lsls	r3, r3, #16
 80200da:	3010      	adds	r0, #16
 80200dc:	2280      	movs	r2, #128	@ 0x80
 80200de:	0452      	lsls	r2, r2, #17
 80200e0:	4293      	cmp	r3, r2
 80200e2:	d201      	bcs.n	80200e8 <__hi0bits+0x1c>
 80200e4:	3008      	adds	r0, #8
 80200e6:	021b      	lsls	r3, r3, #8
 80200e8:	2280      	movs	r2, #128	@ 0x80
 80200ea:	0552      	lsls	r2, r2, #21
 80200ec:	4293      	cmp	r3, r2
 80200ee:	d201      	bcs.n	80200f4 <__hi0bits+0x28>
 80200f0:	3004      	adds	r0, #4
 80200f2:	011b      	lsls	r3, r3, #4
 80200f4:	2280      	movs	r2, #128	@ 0x80
 80200f6:	05d2      	lsls	r2, r2, #23
 80200f8:	4293      	cmp	r3, r2
 80200fa:	d201      	bcs.n	8020100 <__hi0bits+0x34>
 80200fc:	3002      	adds	r0, #2
 80200fe:	009b      	lsls	r3, r3, #2
 8020100:	2b00      	cmp	r3, #0
 8020102:	db03      	blt.n	802010c <__hi0bits+0x40>
 8020104:	3001      	adds	r0, #1
 8020106:	4213      	tst	r3, r2
 8020108:	d100      	bne.n	802010c <__hi0bits+0x40>
 802010a:	2020      	movs	r0, #32
 802010c:	4770      	bx	lr

0802010e <__lo0bits>:
 802010e:	6803      	ldr	r3, [r0, #0]
 8020110:	0001      	movs	r1, r0
 8020112:	2207      	movs	r2, #7
 8020114:	0018      	movs	r0, r3
 8020116:	4010      	ands	r0, r2
 8020118:	4213      	tst	r3, r2
 802011a:	d00d      	beq.n	8020138 <__lo0bits+0x2a>
 802011c:	3a06      	subs	r2, #6
 802011e:	2000      	movs	r0, #0
 8020120:	4213      	tst	r3, r2
 8020122:	d105      	bne.n	8020130 <__lo0bits+0x22>
 8020124:	3002      	adds	r0, #2
 8020126:	4203      	tst	r3, r0
 8020128:	d003      	beq.n	8020132 <__lo0bits+0x24>
 802012a:	40d3      	lsrs	r3, r2
 802012c:	0010      	movs	r0, r2
 802012e:	600b      	str	r3, [r1, #0]
 8020130:	4770      	bx	lr
 8020132:	089b      	lsrs	r3, r3, #2
 8020134:	600b      	str	r3, [r1, #0]
 8020136:	e7fb      	b.n	8020130 <__lo0bits+0x22>
 8020138:	b29a      	uxth	r2, r3
 802013a:	2a00      	cmp	r2, #0
 802013c:	d101      	bne.n	8020142 <__lo0bits+0x34>
 802013e:	2010      	movs	r0, #16
 8020140:	0c1b      	lsrs	r3, r3, #16
 8020142:	b2da      	uxtb	r2, r3
 8020144:	2a00      	cmp	r2, #0
 8020146:	d101      	bne.n	802014c <__lo0bits+0x3e>
 8020148:	3008      	adds	r0, #8
 802014a:	0a1b      	lsrs	r3, r3, #8
 802014c:	071a      	lsls	r2, r3, #28
 802014e:	d101      	bne.n	8020154 <__lo0bits+0x46>
 8020150:	3004      	adds	r0, #4
 8020152:	091b      	lsrs	r3, r3, #4
 8020154:	079a      	lsls	r2, r3, #30
 8020156:	d101      	bne.n	802015c <__lo0bits+0x4e>
 8020158:	3002      	adds	r0, #2
 802015a:	089b      	lsrs	r3, r3, #2
 802015c:	07da      	lsls	r2, r3, #31
 802015e:	d4e9      	bmi.n	8020134 <__lo0bits+0x26>
 8020160:	3001      	adds	r0, #1
 8020162:	085b      	lsrs	r3, r3, #1
 8020164:	d1e6      	bne.n	8020134 <__lo0bits+0x26>
 8020166:	2020      	movs	r0, #32
 8020168:	e7e2      	b.n	8020130 <__lo0bits+0x22>
	...

0802016c <__i2b>:
 802016c:	b510      	push	{r4, lr}
 802016e:	000c      	movs	r4, r1
 8020170:	2101      	movs	r1, #1
 8020172:	f7ff feb3 	bl	801fedc <_Balloc>
 8020176:	2800      	cmp	r0, #0
 8020178:	d107      	bne.n	802018a <__i2b+0x1e>
 802017a:	2146      	movs	r1, #70	@ 0x46
 802017c:	4c05      	ldr	r4, [pc, #20]	@ (8020194 <__i2b+0x28>)
 802017e:	0002      	movs	r2, r0
 8020180:	4b05      	ldr	r3, [pc, #20]	@ (8020198 <__i2b+0x2c>)
 8020182:	0020      	movs	r0, r4
 8020184:	31ff      	adds	r1, #255	@ 0xff
 8020186:	f000 ff89 	bl	802109c <__assert_func>
 802018a:	2301      	movs	r3, #1
 802018c:	6144      	str	r4, [r0, #20]
 802018e:	6103      	str	r3, [r0, #16]
 8020190:	bd10      	pop	{r4, pc}
 8020192:	46c0      	nop			@ (mov r8, r8)
 8020194:	08023b42 	.word	0x08023b42
 8020198:	08023ad1 	.word	0x08023ad1

0802019c <__multiply>:
 802019c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802019e:	0014      	movs	r4, r2
 80201a0:	690a      	ldr	r2, [r1, #16]
 80201a2:	6923      	ldr	r3, [r4, #16]
 80201a4:	000d      	movs	r5, r1
 80201a6:	b08b      	sub	sp, #44	@ 0x2c
 80201a8:	429a      	cmp	r2, r3
 80201aa:	db02      	blt.n	80201b2 <__multiply+0x16>
 80201ac:	0023      	movs	r3, r4
 80201ae:	000c      	movs	r4, r1
 80201b0:	001d      	movs	r5, r3
 80201b2:	6927      	ldr	r7, [r4, #16]
 80201b4:	692e      	ldr	r6, [r5, #16]
 80201b6:	6861      	ldr	r1, [r4, #4]
 80201b8:	19bb      	adds	r3, r7, r6
 80201ba:	9303      	str	r3, [sp, #12]
 80201bc:	68a3      	ldr	r3, [r4, #8]
 80201be:	19ba      	adds	r2, r7, r6
 80201c0:	4293      	cmp	r3, r2
 80201c2:	da00      	bge.n	80201c6 <__multiply+0x2a>
 80201c4:	3101      	adds	r1, #1
 80201c6:	f7ff fe89 	bl	801fedc <_Balloc>
 80201ca:	9002      	str	r0, [sp, #8]
 80201cc:	2800      	cmp	r0, #0
 80201ce:	d106      	bne.n	80201de <__multiply+0x42>
 80201d0:	21b1      	movs	r1, #177	@ 0xb1
 80201d2:	4b49      	ldr	r3, [pc, #292]	@ (80202f8 <__multiply+0x15c>)
 80201d4:	4849      	ldr	r0, [pc, #292]	@ (80202fc <__multiply+0x160>)
 80201d6:	9a02      	ldr	r2, [sp, #8]
 80201d8:	0049      	lsls	r1, r1, #1
 80201da:	f000 ff5f 	bl	802109c <__assert_func>
 80201de:	9b02      	ldr	r3, [sp, #8]
 80201e0:	2200      	movs	r2, #0
 80201e2:	3314      	adds	r3, #20
 80201e4:	469c      	mov	ip, r3
 80201e6:	19bb      	adds	r3, r7, r6
 80201e8:	009b      	lsls	r3, r3, #2
 80201ea:	4463      	add	r3, ip
 80201ec:	9304      	str	r3, [sp, #16]
 80201ee:	4663      	mov	r3, ip
 80201f0:	9904      	ldr	r1, [sp, #16]
 80201f2:	428b      	cmp	r3, r1
 80201f4:	d32a      	bcc.n	802024c <__multiply+0xb0>
 80201f6:	0023      	movs	r3, r4
 80201f8:	00bf      	lsls	r7, r7, #2
 80201fa:	3314      	adds	r3, #20
 80201fc:	3514      	adds	r5, #20
 80201fe:	9308      	str	r3, [sp, #32]
 8020200:	00b6      	lsls	r6, r6, #2
 8020202:	19db      	adds	r3, r3, r7
 8020204:	9305      	str	r3, [sp, #20]
 8020206:	19ab      	adds	r3, r5, r6
 8020208:	9309      	str	r3, [sp, #36]	@ 0x24
 802020a:	2304      	movs	r3, #4
 802020c:	9306      	str	r3, [sp, #24]
 802020e:	0023      	movs	r3, r4
 8020210:	9a05      	ldr	r2, [sp, #20]
 8020212:	3315      	adds	r3, #21
 8020214:	9501      	str	r5, [sp, #4]
 8020216:	429a      	cmp	r2, r3
 8020218:	d305      	bcc.n	8020226 <__multiply+0x8a>
 802021a:	1b13      	subs	r3, r2, r4
 802021c:	3b15      	subs	r3, #21
 802021e:	089b      	lsrs	r3, r3, #2
 8020220:	3301      	adds	r3, #1
 8020222:	009b      	lsls	r3, r3, #2
 8020224:	9306      	str	r3, [sp, #24]
 8020226:	9b01      	ldr	r3, [sp, #4]
 8020228:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802022a:	4293      	cmp	r3, r2
 802022c:	d310      	bcc.n	8020250 <__multiply+0xb4>
 802022e:	9b03      	ldr	r3, [sp, #12]
 8020230:	2b00      	cmp	r3, #0
 8020232:	dd05      	ble.n	8020240 <__multiply+0xa4>
 8020234:	9b04      	ldr	r3, [sp, #16]
 8020236:	3b04      	subs	r3, #4
 8020238:	9304      	str	r3, [sp, #16]
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	2b00      	cmp	r3, #0
 802023e:	d056      	beq.n	80202ee <__multiply+0x152>
 8020240:	9b02      	ldr	r3, [sp, #8]
 8020242:	9a03      	ldr	r2, [sp, #12]
 8020244:	0018      	movs	r0, r3
 8020246:	611a      	str	r2, [r3, #16]
 8020248:	b00b      	add	sp, #44	@ 0x2c
 802024a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802024c:	c304      	stmia	r3!, {r2}
 802024e:	e7cf      	b.n	80201f0 <__multiply+0x54>
 8020250:	9b01      	ldr	r3, [sp, #4]
 8020252:	6818      	ldr	r0, [r3, #0]
 8020254:	b280      	uxth	r0, r0
 8020256:	2800      	cmp	r0, #0
 8020258:	d01e      	beq.n	8020298 <__multiply+0xfc>
 802025a:	4667      	mov	r7, ip
 802025c:	2500      	movs	r5, #0
 802025e:	9e08      	ldr	r6, [sp, #32]
 8020260:	ce02      	ldmia	r6!, {r1}
 8020262:	683b      	ldr	r3, [r7, #0]
 8020264:	9307      	str	r3, [sp, #28]
 8020266:	b28b      	uxth	r3, r1
 8020268:	4343      	muls	r3, r0
 802026a:	001a      	movs	r2, r3
 802026c:	466b      	mov	r3, sp
 802026e:	0c09      	lsrs	r1, r1, #16
 8020270:	8b9b      	ldrh	r3, [r3, #28]
 8020272:	4341      	muls	r1, r0
 8020274:	18d3      	adds	r3, r2, r3
 8020276:	9a07      	ldr	r2, [sp, #28]
 8020278:	195b      	adds	r3, r3, r5
 802027a:	0c12      	lsrs	r2, r2, #16
 802027c:	1889      	adds	r1, r1, r2
 802027e:	0c1a      	lsrs	r2, r3, #16
 8020280:	188a      	adds	r2, r1, r2
 8020282:	b29b      	uxth	r3, r3
 8020284:	0c15      	lsrs	r5, r2, #16
 8020286:	0412      	lsls	r2, r2, #16
 8020288:	431a      	orrs	r2, r3
 802028a:	9b05      	ldr	r3, [sp, #20]
 802028c:	c704      	stmia	r7!, {r2}
 802028e:	42b3      	cmp	r3, r6
 8020290:	d8e6      	bhi.n	8020260 <__multiply+0xc4>
 8020292:	4663      	mov	r3, ip
 8020294:	9a06      	ldr	r2, [sp, #24]
 8020296:	509d      	str	r5, [r3, r2]
 8020298:	9b01      	ldr	r3, [sp, #4]
 802029a:	6818      	ldr	r0, [r3, #0]
 802029c:	0c00      	lsrs	r0, r0, #16
 802029e:	d020      	beq.n	80202e2 <__multiply+0x146>
 80202a0:	4663      	mov	r3, ip
 80202a2:	0025      	movs	r5, r4
 80202a4:	4661      	mov	r1, ip
 80202a6:	2700      	movs	r7, #0
 80202a8:	681b      	ldr	r3, [r3, #0]
 80202aa:	3514      	adds	r5, #20
 80202ac:	682a      	ldr	r2, [r5, #0]
 80202ae:	680e      	ldr	r6, [r1, #0]
 80202b0:	b292      	uxth	r2, r2
 80202b2:	4342      	muls	r2, r0
 80202b4:	0c36      	lsrs	r6, r6, #16
 80202b6:	1992      	adds	r2, r2, r6
 80202b8:	19d2      	adds	r2, r2, r7
 80202ba:	0416      	lsls	r6, r2, #16
 80202bc:	b29b      	uxth	r3, r3
 80202be:	431e      	orrs	r6, r3
 80202c0:	600e      	str	r6, [r1, #0]
 80202c2:	cd40      	ldmia	r5!, {r6}
 80202c4:	684b      	ldr	r3, [r1, #4]
 80202c6:	0c36      	lsrs	r6, r6, #16
 80202c8:	4346      	muls	r6, r0
 80202ca:	b29b      	uxth	r3, r3
 80202cc:	0c12      	lsrs	r2, r2, #16
 80202ce:	18f3      	adds	r3, r6, r3
 80202d0:	189b      	adds	r3, r3, r2
 80202d2:	9a05      	ldr	r2, [sp, #20]
 80202d4:	0c1f      	lsrs	r7, r3, #16
 80202d6:	3104      	adds	r1, #4
 80202d8:	42aa      	cmp	r2, r5
 80202da:	d8e7      	bhi.n	80202ac <__multiply+0x110>
 80202dc:	4662      	mov	r2, ip
 80202de:	9906      	ldr	r1, [sp, #24]
 80202e0:	5053      	str	r3, [r2, r1]
 80202e2:	9b01      	ldr	r3, [sp, #4]
 80202e4:	3304      	adds	r3, #4
 80202e6:	9301      	str	r3, [sp, #4]
 80202e8:	2304      	movs	r3, #4
 80202ea:	449c      	add	ip, r3
 80202ec:	e79b      	b.n	8020226 <__multiply+0x8a>
 80202ee:	9b03      	ldr	r3, [sp, #12]
 80202f0:	3b01      	subs	r3, #1
 80202f2:	9303      	str	r3, [sp, #12]
 80202f4:	e79b      	b.n	802022e <__multiply+0x92>
 80202f6:	46c0      	nop			@ (mov r8, r8)
 80202f8:	08023ad1 	.word	0x08023ad1
 80202fc:	08023b42 	.word	0x08023b42

08020300 <__pow5mult>:
 8020300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020302:	2303      	movs	r3, #3
 8020304:	0015      	movs	r5, r2
 8020306:	0007      	movs	r7, r0
 8020308:	000e      	movs	r6, r1
 802030a:	401a      	ands	r2, r3
 802030c:	421d      	tst	r5, r3
 802030e:	d008      	beq.n	8020322 <__pow5mult+0x22>
 8020310:	4925      	ldr	r1, [pc, #148]	@ (80203a8 <__pow5mult+0xa8>)
 8020312:	3a01      	subs	r2, #1
 8020314:	0092      	lsls	r2, r2, #2
 8020316:	5852      	ldr	r2, [r2, r1]
 8020318:	2300      	movs	r3, #0
 802031a:	0031      	movs	r1, r6
 802031c:	f7ff fe46 	bl	801ffac <__multadd>
 8020320:	0006      	movs	r6, r0
 8020322:	10ad      	asrs	r5, r5, #2
 8020324:	d03d      	beq.n	80203a2 <__pow5mult+0xa2>
 8020326:	69fc      	ldr	r4, [r7, #28]
 8020328:	2c00      	cmp	r4, #0
 802032a:	d10f      	bne.n	802034c <__pow5mult+0x4c>
 802032c:	2010      	movs	r0, #16
 802032e:	f7ff fd07 	bl	801fd40 <malloc>
 8020332:	1e02      	subs	r2, r0, #0
 8020334:	61f8      	str	r0, [r7, #28]
 8020336:	d105      	bne.n	8020344 <__pow5mult+0x44>
 8020338:	21b4      	movs	r1, #180	@ 0xb4
 802033a:	4b1c      	ldr	r3, [pc, #112]	@ (80203ac <__pow5mult+0xac>)
 802033c:	481c      	ldr	r0, [pc, #112]	@ (80203b0 <__pow5mult+0xb0>)
 802033e:	31ff      	adds	r1, #255	@ 0xff
 8020340:	f000 feac 	bl	802109c <__assert_func>
 8020344:	6044      	str	r4, [r0, #4]
 8020346:	6084      	str	r4, [r0, #8]
 8020348:	6004      	str	r4, [r0, #0]
 802034a:	60c4      	str	r4, [r0, #12]
 802034c:	69fb      	ldr	r3, [r7, #28]
 802034e:	689c      	ldr	r4, [r3, #8]
 8020350:	9301      	str	r3, [sp, #4]
 8020352:	2c00      	cmp	r4, #0
 8020354:	d108      	bne.n	8020368 <__pow5mult+0x68>
 8020356:	0038      	movs	r0, r7
 8020358:	4916      	ldr	r1, [pc, #88]	@ (80203b4 <__pow5mult+0xb4>)
 802035a:	f7ff ff07 	bl	802016c <__i2b>
 802035e:	9b01      	ldr	r3, [sp, #4]
 8020360:	0004      	movs	r4, r0
 8020362:	6098      	str	r0, [r3, #8]
 8020364:	2300      	movs	r3, #0
 8020366:	6003      	str	r3, [r0, #0]
 8020368:	2301      	movs	r3, #1
 802036a:	421d      	tst	r5, r3
 802036c:	d00a      	beq.n	8020384 <__pow5mult+0x84>
 802036e:	0031      	movs	r1, r6
 8020370:	0022      	movs	r2, r4
 8020372:	0038      	movs	r0, r7
 8020374:	f7ff ff12 	bl	802019c <__multiply>
 8020378:	0031      	movs	r1, r6
 802037a:	9001      	str	r0, [sp, #4]
 802037c:	0038      	movs	r0, r7
 802037e:	f7ff fdf1 	bl	801ff64 <_Bfree>
 8020382:	9e01      	ldr	r6, [sp, #4]
 8020384:	106d      	asrs	r5, r5, #1
 8020386:	d00c      	beq.n	80203a2 <__pow5mult+0xa2>
 8020388:	6820      	ldr	r0, [r4, #0]
 802038a:	2800      	cmp	r0, #0
 802038c:	d107      	bne.n	802039e <__pow5mult+0x9e>
 802038e:	0022      	movs	r2, r4
 8020390:	0021      	movs	r1, r4
 8020392:	0038      	movs	r0, r7
 8020394:	f7ff ff02 	bl	802019c <__multiply>
 8020398:	2300      	movs	r3, #0
 802039a:	6020      	str	r0, [r4, #0]
 802039c:	6003      	str	r3, [r0, #0]
 802039e:	0004      	movs	r4, r0
 80203a0:	e7e2      	b.n	8020368 <__pow5mult+0x68>
 80203a2:	0030      	movs	r0, r6
 80203a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80203a6:	46c0      	nop			@ (mov r8, r8)
 80203a8:	08023b9c 	.word	0x08023b9c
 80203ac:	08023a62 	.word	0x08023a62
 80203b0:	08023b42 	.word	0x08023b42
 80203b4:	00000271 	.word	0x00000271

080203b8 <__lshift>:
 80203b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80203ba:	000c      	movs	r4, r1
 80203bc:	0016      	movs	r6, r2
 80203be:	6923      	ldr	r3, [r4, #16]
 80203c0:	1157      	asrs	r7, r2, #5
 80203c2:	b085      	sub	sp, #20
 80203c4:	18fb      	adds	r3, r7, r3
 80203c6:	9301      	str	r3, [sp, #4]
 80203c8:	3301      	adds	r3, #1
 80203ca:	9300      	str	r3, [sp, #0]
 80203cc:	6849      	ldr	r1, [r1, #4]
 80203ce:	68a3      	ldr	r3, [r4, #8]
 80203d0:	9002      	str	r0, [sp, #8]
 80203d2:	9a00      	ldr	r2, [sp, #0]
 80203d4:	4293      	cmp	r3, r2
 80203d6:	db10      	blt.n	80203fa <__lshift+0x42>
 80203d8:	9802      	ldr	r0, [sp, #8]
 80203da:	f7ff fd7f 	bl	801fedc <_Balloc>
 80203de:	2300      	movs	r3, #0
 80203e0:	0001      	movs	r1, r0
 80203e2:	0005      	movs	r5, r0
 80203e4:	001a      	movs	r2, r3
 80203e6:	3114      	adds	r1, #20
 80203e8:	4298      	cmp	r0, r3
 80203ea:	d10c      	bne.n	8020406 <__lshift+0x4e>
 80203ec:	21ef      	movs	r1, #239	@ 0xef
 80203ee:	002a      	movs	r2, r5
 80203f0:	4b25      	ldr	r3, [pc, #148]	@ (8020488 <__lshift+0xd0>)
 80203f2:	4826      	ldr	r0, [pc, #152]	@ (802048c <__lshift+0xd4>)
 80203f4:	0049      	lsls	r1, r1, #1
 80203f6:	f000 fe51 	bl	802109c <__assert_func>
 80203fa:	3101      	adds	r1, #1
 80203fc:	005b      	lsls	r3, r3, #1
 80203fe:	e7e8      	b.n	80203d2 <__lshift+0x1a>
 8020400:	0098      	lsls	r0, r3, #2
 8020402:	500a      	str	r2, [r1, r0]
 8020404:	3301      	adds	r3, #1
 8020406:	42bb      	cmp	r3, r7
 8020408:	dbfa      	blt.n	8020400 <__lshift+0x48>
 802040a:	43fb      	mvns	r3, r7
 802040c:	17db      	asrs	r3, r3, #31
 802040e:	401f      	ands	r7, r3
 8020410:	00bf      	lsls	r7, r7, #2
 8020412:	0023      	movs	r3, r4
 8020414:	201f      	movs	r0, #31
 8020416:	19c9      	adds	r1, r1, r7
 8020418:	0037      	movs	r7, r6
 802041a:	6922      	ldr	r2, [r4, #16]
 802041c:	3314      	adds	r3, #20
 802041e:	0092      	lsls	r2, r2, #2
 8020420:	189a      	adds	r2, r3, r2
 8020422:	4007      	ands	r7, r0
 8020424:	4206      	tst	r6, r0
 8020426:	d029      	beq.n	802047c <__lshift+0xc4>
 8020428:	3001      	adds	r0, #1
 802042a:	1bc0      	subs	r0, r0, r7
 802042c:	9003      	str	r0, [sp, #12]
 802042e:	468c      	mov	ip, r1
 8020430:	2000      	movs	r0, #0
 8020432:	681e      	ldr	r6, [r3, #0]
 8020434:	40be      	lsls	r6, r7
 8020436:	4306      	orrs	r6, r0
 8020438:	4660      	mov	r0, ip
 802043a:	c040      	stmia	r0!, {r6}
 802043c:	4684      	mov	ip, r0
 802043e:	9e03      	ldr	r6, [sp, #12]
 8020440:	cb01      	ldmia	r3!, {r0}
 8020442:	40f0      	lsrs	r0, r6
 8020444:	429a      	cmp	r2, r3
 8020446:	d8f4      	bhi.n	8020432 <__lshift+0x7a>
 8020448:	0026      	movs	r6, r4
 802044a:	3615      	adds	r6, #21
 802044c:	2304      	movs	r3, #4
 802044e:	42b2      	cmp	r2, r6
 8020450:	d304      	bcc.n	802045c <__lshift+0xa4>
 8020452:	1b13      	subs	r3, r2, r4
 8020454:	3b15      	subs	r3, #21
 8020456:	089b      	lsrs	r3, r3, #2
 8020458:	3301      	adds	r3, #1
 802045a:	009b      	lsls	r3, r3, #2
 802045c:	50c8      	str	r0, [r1, r3]
 802045e:	2800      	cmp	r0, #0
 8020460:	d002      	beq.n	8020468 <__lshift+0xb0>
 8020462:	9b01      	ldr	r3, [sp, #4]
 8020464:	3302      	adds	r3, #2
 8020466:	9300      	str	r3, [sp, #0]
 8020468:	9b00      	ldr	r3, [sp, #0]
 802046a:	9802      	ldr	r0, [sp, #8]
 802046c:	3b01      	subs	r3, #1
 802046e:	0021      	movs	r1, r4
 8020470:	612b      	str	r3, [r5, #16]
 8020472:	f7ff fd77 	bl	801ff64 <_Bfree>
 8020476:	0028      	movs	r0, r5
 8020478:	b005      	add	sp, #20
 802047a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802047c:	cb01      	ldmia	r3!, {r0}
 802047e:	c101      	stmia	r1!, {r0}
 8020480:	429a      	cmp	r2, r3
 8020482:	d8fb      	bhi.n	802047c <__lshift+0xc4>
 8020484:	e7f0      	b.n	8020468 <__lshift+0xb0>
 8020486:	46c0      	nop			@ (mov r8, r8)
 8020488:	08023ad1 	.word	0x08023ad1
 802048c:	08023b42 	.word	0x08023b42

08020490 <__mcmp>:
 8020490:	b530      	push	{r4, r5, lr}
 8020492:	690b      	ldr	r3, [r1, #16]
 8020494:	6904      	ldr	r4, [r0, #16]
 8020496:	0002      	movs	r2, r0
 8020498:	1ae0      	subs	r0, r4, r3
 802049a:	429c      	cmp	r4, r3
 802049c:	d10f      	bne.n	80204be <__mcmp+0x2e>
 802049e:	3214      	adds	r2, #20
 80204a0:	009b      	lsls	r3, r3, #2
 80204a2:	3114      	adds	r1, #20
 80204a4:	0014      	movs	r4, r2
 80204a6:	18c9      	adds	r1, r1, r3
 80204a8:	18d2      	adds	r2, r2, r3
 80204aa:	3a04      	subs	r2, #4
 80204ac:	3904      	subs	r1, #4
 80204ae:	6815      	ldr	r5, [r2, #0]
 80204b0:	680b      	ldr	r3, [r1, #0]
 80204b2:	429d      	cmp	r5, r3
 80204b4:	d004      	beq.n	80204c0 <__mcmp+0x30>
 80204b6:	2001      	movs	r0, #1
 80204b8:	429d      	cmp	r5, r3
 80204ba:	d200      	bcs.n	80204be <__mcmp+0x2e>
 80204bc:	3802      	subs	r0, #2
 80204be:	bd30      	pop	{r4, r5, pc}
 80204c0:	4294      	cmp	r4, r2
 80204c2:	d3f2      	bcc.n	80204aa <__mcmp+0x1a>
 80204c4:	e7fb      	b.n	80204be <__mcmp+0x2e>
	...

080204c8 <__mdiff>:
 80204c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204ca:	000c      	movs	r4, r1
 80204cc:	b087      	sub	sp, #28
 80204ce:	9000      	str	r0, [sp, #0]
 80204d0:	0011      	movs	r1, r2
 80204d2:	0020      	movs	r0, r4
 80204d4:	0017      	movs	r7, r2
 80204d6:	f7ff ffdb 	bl	8020490 <__mcmp>
 80204da:	1e05      	subs	r5, r0, #0
 80204dc:	d110      	bne.n	8020500 <__mdiff+0x38>
 80204de:	0001      	movs	r1, r0
 80204e0:	9800      	ldr	r0, [sp, #0]
 80204e2:	f7ff fcfb 	bl	801fedc <_Balloc>
 80204e6:	1e02      	subs	r2, r0, #0
 80204e8:	d104      	bne.n	80204f4 <__mdiff+0x2c>
 80204ea:	4b40      	ldr	r3, [pc, #256]	@ (80205ec <__mdiff+0x124>)
 80204ec:	4840      	ldr	r0, [pc, #256]	@ (80205f0 <__mdiff+0x128>)
 80204ee:	4941      	ldr	r1, [pc, #260]	@ (80205f4 <__mdiff+0x12c>)
 80204f0:	f000 fdd4 	bl	802109c <__assert_func>
 80204f4:	2301      	movs	r3, #1
 80204f6:	6145      	str	r5, [r0, #20]
 80204f8:	6103      	str	r3, [r0, #16]
 80204fa:	0010      	movs	r0, r2
 80204fc:	b007      	add	sp, #28
 80204fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020500:	2600      	movs	r6, #0
 8020502:	42b0      	cmp	r0, r6
 8020504:	da03      	bge.n	802050e <__mdiff+0x46>
 8020506:	0023      	movs	r3, r4
 8020508:	003c      	movs	r4, r7
 802050a:	001f      	movs	r7, r3
 802050c:	3601      	adds	r6, #1
 802050e:	6861      	ldr	r1, [r4, #4]
 8020510:	9800      	ldr	r0, [sp, #0]
 8020512:	f7ff fce3 	bl	801fedc <_Balloc>
 8020516:	1e02      	subs	r2, r0, #0
 8020518:	d103      	bne.n	8020522 <__mdiff+0x5a>
 802051a:	4b34      	ldr	r3, [pc, #208]	@ (80205ec <__mdiff+0x124>)
 802051c:	4834      	ldr	r0, [pc, #208]	@ (80205f0 <__mdiff+0x128>)
 802051e:	4936      	ldr	r1, [pc, #216]	@ (80205f8 <__mdiff+0x130>)
 8020520:	e7e6      	b.n	80204f0 <__mdiff+0x28>
 8020522:	6923      	ldr	r3, [r4, #16]
 8020524:	3414      	adds	r4, #20
 8020526:	9300      	str	r3, [sp, #0]
 8020528:	009b      	lsls	r3, r3, #2
 802052a:	18e3      	adds	r3, r4, r3
 802052c:	0021      	movs	r1, r4
 802052e:	9401      	str	r4, [sp, #4]
 8020530:	003c      	movs	r4, r7
 8020532:	9302      	str	r3, [sp, #8]
 8020534:	693b      	ldr	r3, [r7, #16]
 8020536:	3414      	adds	r4, #20
 8020538:	009b      	lsls	r3, r3, #2
 802053a:	18e3      	adds	r3, r4, r3
 802053c:	9303      	str	r3, [sp, #12]
 802053e:	0003      	movs	r3, r0
 8020540:	60c6      	str	r6, [r0, #12]
 8020542:	468c      	mov	ip, r1
 8020544:	2000      	movs	r0, #0
 8020546:	3314      	adds	r3, #20
 8020548:	9304      	str	r3, [sp, #16]
 802054a:	9305      	str	r3, [sp, #20]
 802054c:	4663      	mov	r3, ip
 802054e:	cb20      	ldmia	r3!, {r5}
 8020550:	b2a9      	uxth	r1, r5
 8020552:	000e      	movs	r6, r1
 8020554:	469c      	mov	ip, r3
 8020556:	cc08      	ldmia	r4!, {r3}
 8020558:	0c2d      	lsrs	r5, r5, #16
 802055a:	b299      	uxth	r1, r3
 802055c:	1a71      	subs	r1, r6, r1
 802055e:	1809      	adds	r1, r1, r0
 8020560:	0c1b      	lsrs	r3, r3, #16
 8020562:	1408      	asrs	r0, r1, #16
 8020564:	1aeb      	subs	r3, r5, r3
 8020566:	181b      	adds	r3, r3, r0
 8020568:	1418      	asrs	r0, r3, #16
 802056a:	b289      	uxth	r1, r1
 802056c:	041b      	lsls	r3, r3, #16
 802056e:	4319      	orrs	r1, r3
 8020570:	9b05      	ldr	r3, [sp, #20]
 8020572:	c302      	stmia	r3!, {r1}
 8020574:	9305      	str	r3, [sp, #20]
 8020576:	9b03      	ldr	r3, [sp, #12]
 8020578:	42a3      	cmp	r3, r4
 802057a:	d8e7      	bhi.n	802054c <__mdiff+0x84>
 802057c:	0039      	movs	r1, r7
 802057e:	9c03      	ldr	r4, [sp, #12]
 8020580:	3115      	adds	r1, #21
 8020582:	2304      	movs	r3, #4
 8020584:	428c      	cmp	r4, r1
 8020586:	d304      	bcc.n	8020592 <__mdiff+0xca>
 8020588:	1be3      	subs	r3, r4, r7
 802058a:	3b15      	subs	r3, #21
 802058c:	089b      	lsrs	r3, r3, #2
 802058e:	3301      	adds	r3, #1
 8020590:	009b      	lsls	r3, r3, #2
 8020592:	9901      	ldr	r1, [sp, #4]
 8020594:	18cd      	adds	r5, r1, r3
 8020596:	9904      	ldr	r1, [sp, #16]
 8020598:	002e      	movs	r6, r5
 802059a:	18cb      	adds	r3, r1, r3
 802059c:	001f      	movs	r7, r3
 802059e:	9902      	ldr	r1, [sp, #8]
 80205a0:	428e      	cmp	r6, r1
 80205a2:	d311      	bcc.n	80205c8 <__mdiff+0x100>
 80205a4:	9c02      	ldr	r4, [sp, #8]
 80205a6:	1ee9      	subs	r1, r5, #3
 80205a8:	2000      	movs	r0, #0
 80205aa:	428c      	cmp	r4, r1
 80205ac:	d304      	bcc.n	80205b8 <__mdiff+0xf0>
 80205ae:	0021      	movs	r1, r4
 80205b0:	3103      	adds	r1, #3
 80205b2:	1b49      	subs	r1, r1, r5
 80205b4:	0889      	lsrs	r1, r1, #2
 80205b6:	0088      	lsls	r0, r1, #2
 80205b8:	181b      	adds	r3, r3, r0
 80205ba:	3b04      	subs	r3, #4
 80205bc:	6819      	ldr	r1, [r3, #0]
 80205be:	2900      	cmp	r1, #0
 80205c0:	d010      	beq.n	80205e4 <__mdiff+0x11c>
 80205c2:	9b00      	ldr	r3, [sp, #0]
 80205c4:	6113      	str	r3, [r2, #16]
 80205c6:	e798      	b.n	80204fa <__mdiff+0x32>
 80205c8:	4684      	mov	ip, r0
 80205ca:	ce02      	ldmia	r6!, {r1}
 80205cc:	b288      	uxth	r0, r1
 80205ce:	4460      	add	r0, ip
 80205d0:	1400      	asrs	r0, r0, #16
 80205d2:	0c0c      	lsrs	r4, r1, #16
 80205d4:	1904      	adds	r4, r0, r4
 80205d6:	4461      	add	r1, ip
 80205d8:	1420      	asrs	r0, r4, #16
 80205da:	b289      	uxth	r1, r1
 80205dc:	0424      	lsls	r4, r4, #16
 80205de:	4321      	orrs	r1, r4
 80205e0:	c702      	stmia	r7!, {r1}
 80205e2:	e7dc      	b.n	802059e <__mdiff+0xd6>
 80205e4:	9900      	ldr	r1, [sp, #0]
 80205e6:	3901      	subs	r1, #1
 80205e8:	9100      	str	r1, [sp, #0]
 80205ea:	e7e6      	b.n	80205ba <__mdiff+0xf2>
 80205ec:	08023ad1 	.word	0x08023ad1
 80205f0:	08023b42 	.word	0x08023b42
 80205f4:	00000237 	.word	0x00000237
 80205f8:	00000245 	.word	0x00000245

080205fc <__ulp>:
 80205fc:	b510      	push	{r4, lr}
 80205fe:	2400      	movs	r4, #0
 8020600:	4b0c      	ldr	r3, [pc, #48]	@ (8020634 <__ulp+0x38>)
 8020602:	4a0d      	ldr	r2, [pc, #52]	@ (8020638 <__ulp+0x3c>)
 8020604:	400b      	ands	r3, r1
 8020606:	189b      	adds	r3, r3, r2
 8020608:	42a3      	cmp	r3, r4
 802060a:	dc06      	bgt.n	802061a <__ulp+0x1e>
 802060c:	425b      	negs	r3, r3
 802060e:	151a      	asrs	r2, r3, #20
 8020610:	2a13      	cmp	r2, #19
 8020612:	dc05      	bgt.n	8020620 <__ulp+0x24>
 8020614:	2380      	movs	r3, #128	@ 0x80
 8020616:	031b      	lsls	r3, r3, #12
 8020618:	4113      	asrs	r3, r2
 802061a:	0019      	movs	r1, r3
 802061c:	0020      	movs	r0, r4
 802061e:	bd10      	pop	{r4, pc}
 8020620:	3a14      	subs	r2, #20
 8020622:	2401      	movs	r4, #1
 8020624:	2a1e      	cmp	r2, #30
 8020626:	dc02      	bgt.n	802062e <__ulp+0x32>
 8020628:	2480      	movs	r4, #128	@ 0x80
 802062a:	0624      	lsls	r4, r4, #24
 802062c:	40d4      	lsrs	r4, r2
 802062e:	2300      	movs	r3, #0
 8020630:	e7f3      	b.n	802061a <__ulp+0x1e>
 8020632:	46c0      	nop			@ (mov r8, r8)
 8020634:	7ff00000 	.word	0x7ff00000
 8020638:	fcc00000 	.word	0xfcc00000

0802063c <__b2d>:
 802063c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802063e:	0006      	movs	r6, r0
 8020640:	6903      	ldr	r3, [r0, #16]
 8020642:	3614      	adds	r6, #20
 8020644:	009b      	lsls	r3, r3, #2
 8020646:	18f3      	adds	r3, r6, r3
 8020648:	1f1d      	subs	r5, r3, #4
 802064a:	682c      	ldr	r4, [r5, #0]
 802064c:	000f      	movs	r7, r1
 802064e:	0020      	movs	r0, r4
 8020650:	9301      	str	r3, [sp, #4]
 8020652:	f7ff fd3b 	bl	80200cc <__hi0bits>
 8020656:	2220      	movs	r2, #32
 8020658:	1a12      	subs	r2, r2, r0
 802065a:	603a      	str	r2, [r7, #0]
 802065c:	0003      	movs	r3, r0
 802065e:	4a1c      	ldr	r2, [pc, #112]	@ (80206d0 <__b2d+0x94>)
 8020660:	280a      	cmp	r0, #10
 8020662:	dc15      	bgt.n	8020690 <__b2d+0x54>
 8020664:	210b      	movs	r1, #11
 8020666:	0027      	movs	r7, r4
 8020668:	1a09      	subs	r1, r1, r0
 802066a:	40cf      	lsrs	r7, r1
 802066c:	433a      	orrs	r2, r7
 802066e:	468c      	mov	ip, r1
 8020670:	0011      	movs	r1, r2
 8020672:	2200      	movs	r2, #0
 8020674:	42ae      	cmp	r6, r5
 8020676:	d202      	bcs.n	802067e <__b2d+0x42>
 8020678:	9a01      	ldr	r2, [sp, #4]
 802067a:	3a08      	subs	r2, #8
 802067c:	6812      	ldr	r2, [r2, #0]
 802067e:	3315      	adds	r3, #21
 8020680:	409c      	lsls	r4, r3
 8020682:	4663      	mov	r3, ip
 8020684:	0027      	movs	r7, r4
 8020686:	40da      	lsrs	r2, r3
 8020688:	4317      	orrs	r7, r2
 802068a:	0038      	movs	r0, r7
 802068c:	b003      	add	sp, #12
 802068e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020690:	2700      	movs	r7, #0
 8020692:	42ae      	cmp	r6, r5
 8020694:	d202      	bcs.n	802069c <__b2d+0x60>
 8020696:	9d01      	ldr	r5, [sp, #4]
 8020698:	3d08      	subs	r5, #8
 802069a:	682f      	ldr	r7, [r5, #0]
 802069c:	210b      	movs	r1, #11
 802069e:	4249      	negs	r1, r1
 80206a0:	468c      	mov	ip, r1
 80206a2:	449c      	add	ip, r3
 80206a4:	2b0b      	cmp	r3, #11
 80206a6:	d010      	beq.n	80206ca <__b2d+0x8e>
 80206a8:	4661      	mov	r1, ip
 80206aa:	2320      	movs	r3, #32
 80206ac:	408c      	lsls	r4, r1
 80206ae:	1a5b      	subs	r3, r3, r1
 80206b0:	0039      	movs	r1, r7
 80206b2:	40d9      	lsrs	r1, r3
 80206b4:	430c      	orrs	r4, r1
 80206b6:	4322      	orrs	r2, r4
 80206b8:	0011      	movs	r1, r2
 80206ba:	2200      	movs	r2, #0
 80206bc:	42b5      	cmp	r5, r6
 80206be:	d901      	bls.n	80206c4 <__b2d+0x88>
 80206c0:	3d04      	subs	r5, #4
 80206c2:	682a      	ldr	r2, [r5, #0]
 80206c4:	4664      	mov	r4, ip
 80206c6:	40a7      	lsls	r7, r4
 80206c8:	e7dd      	b.n	8020686 <__b2d+0x4a>
 80206ca:	4322      	orrs	r2, r4
 80206cc:	0011      	movs	r1, r2
 80206ce:	e7dc      	b.n	802068a <__b2d+0x4e>
 80206d0:	3ff00000 	.word	0x3ff00000

080206d4 <__d2b>:
 80206d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80206d6:	2101      	movs	r1, #1
 80206d8:	0016      	movs	r6, r2
 80206da:	001f      	movs	r7, r3
 80206dc:	f7ff fbfe 	bl	801fedc <_Balloc>
 80206e0:	1e04      	subs	r4, r0, #0
 80206e2:	d105      	bne.n	80206f0 <__d2b+0x1c>
 80206e4:	0022      	movs	r2, r4
 80206e6:	4b25      	ldr	r3, [pc, #148]	@ (802077c <__d2b+0xa8>)
 80206e8:	4825      	ldr	r0, [pc, #148]	@ (8020780 <__d2b+0xac>)
 80206ea:	4926      	ldr	r1, [pc, #152]	@ (8020784 <__d2b+0xb0>)
 80206ec:	f000 fcd6 	bl	802109c <__assert_func>
 80206f0:	033b      	lsls	r3, r7, #12
 80206f2:	007d      	lsls	r5, r7, #1
 80206f4:	0b1b      	lsrs	r3, r3, #12
 80206f6:	0d6d      	lsrs	r5, r5, #21
 80206f8:	d002      	beq.n	8020700 <__d2b+0x2c>
 80206fa:	2280      	movs	r2, #128	@ 0x80
 80206fc:	0352      	lsls	r2, r2, #13
 80206fe:	4313      	orrs	r3, r2
 8020700:	9301      	str	r3, [sp, #4]
 8020702:	2e00      	cmp	r6, #0
 8020704:	d025      	beq.n	8020752 <__d2b+0x7e>
 8020706:	4668      	mov	r0, sp
 8020708:	9600      	str	r6, [sp, #0]
 802070a:	f7ff fd00 	bl	802010e <__lo0bits>
 802070e:	9b01      	ldr	r3, [sp, #4]
 8020710:	9900      	ldr	r1, [sp, #0]
 8020712:	2800      	cmp	r0, #0
 8020714:	d01b      	beq.n	802074e <__d2b+0x7a>
 8020716:	2220      	movs	r2, #32
 8020718:	001e      	movs	r6, r3
 802071a:	1a12      	subs	r2, r2, r0
 802071c:	4096      	lsls	r6, r2
 802071e:	0032      	movs	r2, r6
 8020720:	40c3      	lsrs	r3, r0
 8020722:	430a      	orrs	r2, r1
 8020724:	6162      	str	r2, [r4, #20]
 8020726:	9301      	str	r3, [sp, #4]
 8020728:	9e01      	ldr	r6, [sp, #4]
 802072a:	61a6      	str	r6, [r4, #24]
 802072c:	1e73      	subs	r3, r6, #1
 802072e:	419e      	sbcs	r6, r3
 8020730:	3601      	adds	r6, #1
 8020732:	6126      	str	r6, [r4, #16]
 8020734:	2d00      	cmp	r5, #0
 8020736:	d014      	beq.n	8020762 <__d2b+0x8e>
 8020738:	2635      	movs	r6, #53	@ 0x35
 802073a:	4b13      	ldr	r3, [pc, #76]	@ (8020788 <__d2b+0xb4>)
 802073c:	18ed      	adds	r5, r5, r3
 802073e:	9b08      	ldr	r3, [sp, #32]
 8020740:	182d      	adds	r5, r5, r0
 8020742:	601d      	str	r5, [r3, #0]
 8020744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020746:	1a36      	subs	r6, r6, r0
 8020748:	601e      	str	r6, [r3, #0]
 802074a:	0020      	movs	r0, r4
 802074c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802074e:	6161      	str	r1, [r4, #20]
 8020750:	e7ea      	b.n	8020728 <__d2b+0x54>
 8020752:	a801      	add	r0, sp, #4
 8020754:	f7ff fcdb 	bl	802010e <__lo0bits>
 8020758:	9b01      	ldr	r3, [sp, #4]
 802075a:	2601      	movs	r6, #1
 802075c:	6163      	str	r3, [r4, #20]
 802075e:	3020      	adds	r0, #32
 8020760:	e7e7      	b.n	8020732 <__d2b+0x5e>
 8020762:	4b0a      	ldr	r3, [pc, #40]	@ (802078c <__d2b+0xb8>)
 8020764:	18c0      	adds	r0, r0, r3
 8020766:	9b08      	ldr	r3, [sp, #32]
 8020768:	6018      	str	r0, [r3, #0]
 802076a:	4b09      	ldr	r3, [pc, #36]	@ (8020790 <__d2b+0xbc>)
 802076c:	18f3      	adds	r3, r6, r3
 802076e:	009b      	lsls	r3, r3, #2
 8020770:	18e3      	adds	r3, r4, r3
 8020772:	6958      	ldr	r0, [r3, #20]
 8020774:	f7ff fcaa 	bl	80200cc <__hi0bits>
 8020778:	0176      	lsls	r6, r6, #5
 802077a:	e7e3      	b.n	8020744 <__d2b+0x70>
 802077c:	08023ad1 	.word	0x08023ad1
 8020780:	08023b42 	.word	0x08023b42
 8020784:	0000030f 	.word	0x0000030f
 8020788:	fffffbcd 	.word	0xfffffbcd
 802078c:	fffffbce 	.word	0xfffffbce
 8020790:	3fffffff 	.word	0x3fffffff

08020794 <__ratio>:
 8020794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020796:	b087      	sub	sp, #28
 8020798:	000f      	movs	r7, r1
 802079a:	a904      	add	r1, sp, #16
 802079c:	0006      	movs	r6, r0
 802079e:	f7ff ff4d 	bl	802063c <__b2d>
 80207a2:	9000      	str	r0, [sp, #0]
 80207a4:	9101      	str	r1, [sp, #4]
 80207a6:	9b00      	ldr	r3, [sp, #0]
 80207a8:	9c01      	ldr	r4, [sp, #4]
 80207aa:	0038      	movs	r0, r7
 80207ac:	a905      	add	r1, sp, #20
 80207ae:	9302      	str	r3, [sp, #8]
 80207b0:	9403      	str	r4, [sp, #12]
 80207b2:	f7ff ff43 	bl	802063c <__b2d>
 80207b6:	000d      	movs	r5, r1
 80207b8:	0002      	movs	r2, r0
 80207ba:	000b      	movs	r3, r1
 80207bc:	6930      	ldr	r0, [r6, #16]
 80207be:	6939      	ldr	r1, [r7, #16]
 80207c0:	9e04      	ldr	r6, [sp, #16]
 80207c2:	1a40      	subs	r0, r0, r1
 80207c4:	9905      	ldr	r1, [sp, #20]
 80207c6:	0140      	lsls	r0, r0, #5
 80207c8:	1a71      	subs	r1, r6, r1
 80207ca:	1841      	adds	r1, r0, r1
 80207cc:	0508      	lsls	r0, r1, #20
 80207ce:	2900      	cmp	r1, #0
 80207d0:	dd08      	ble.n	80207e4 <__ratio+0x50>
 80207d2:	9901      	ldr	r1, [sp, #4]
 80207d4:	1841      	adds	r1, r0, r1
 80207d6:	9103      	str	r1, [sp, #12]
 80207d8:	9802      	ldr	r0, [sp, #8]
 80207da:	9903      	ldr	r1, [sp, #12]
 80207dc:	f7e1 faea 	bl	8001db4 <__aeabi_ddiv>
 80207e0:	b007      	add	sp, #28
 80207e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80207e4:	1a2b      	subs	r3, r5, r0
 80207e6:	e7f7      	b.n	80207d8 <__ratio+0x44>

080207e8 <__copybits>:
 80207e8:	b570      	push	{r4, r5, r6, lr}
 80207ea:	0014      	movs	r4, r2
 80207ec:	0005      	movs	r5, r0
 80207ee:	3901      	subs	r1, #1
 80207f0:	6913      	ldr	r3, [r2, #16]
 80207f2:	1149      	asrs	r1, r1, #5
 80207f4:	3101      	adds	r1, #1
 80207f6:	0089      	lsls	r1, r1, #2
 80207f8:	3414      	adds	r4, #20
 80207fa:	009b      	lsls	r3, r3, #2
 80207fc:	1841      	adds	r1, r0, r1
 80207fe:	18e3      	adds	r3, r4, r3
 8020800:	42a3      	cmp	r3, r4
 8020802:	d80d      	bhi.n	8020820 <__copybits+0x38>
 8020804:	0014      	movs	r4, r2
 8020806:	3411      	adds	r4, #17
 8020808:	2500      	movs	r5, #0
 802080a:	429c      	cmp	r4, r3
 802080c:	d803      	bhi.n	8020816 <__copybits+0x2e>
 802080e:	1a9b      	subs	r3, r3, r2
 8020810:	3b11      	subs	r3, #17
 8020812:	089b      	lsrs	r3, r3, #2
 8020814:	009d      	lsls	r5, r3, #2
 8020816:	2300      	movs	r3, #0
 8020818:	1940      	adds	r0, r0, r5
 802081a:	4281      	cmp	r1, r0
 802081c:	d803      	bhi.n	8020826 <__copybits+0x3e>
 802081e:	bd70      	pop	{r4, r5, r6, pc}
 8020820:	cc40      	ldmia	r4!, {r6}
 8020822:	c540      	stmia	r5!, {r6}
 8020824:	e7ec      	b.n	8020800 <__copybits+0x18>
 8020826:	c008      	stmia	r0!, {r3}
 8020828:	e7f7      	b.n	802081a <__copybits+0x32>

0802082a <__any_on>:
 802082a:	0002      	movs	r2, r0
 802082c:	6900      	ldr	r0, [r0, #16]
 802082e:	b510      	push	{r4, lr}
 8020830:	3214      	adds	r2, #20
 8020832:	114b      	asrs	r3, r1, #5
 8020834:	4298      	cmp	r0, r3
 8020836:	db13      	blt.n	8020860 <__any_on+0x36>
 8020838:	dd0c      	ble.n	8020854 <__any_on+0x2a>
 802083a:	241f      	movs	r4, #31
 802083c:	0008      	movs	r0, r1
 802083e:	4020      	ands	r0, r4
 8020840:	4221      	tst	r1, r4
 8020842:	d007      	beq.n	8020854 <__any_on+0x2a>
 8020844:	0099      	lsls	r1, r3, #2
 8020846:	588c      	ldr	r4, [r1, r2]
 8020848:	0021      	movs	r1, r4
 802084a:	40c1      	lsrs	r1, r0
 802084c:	4081      	lsls	r1, r0
 802084e:	2001      	movs	r0, #1
 8020850:	428c      	cmp	r4, r1
 8020852:	d104      	bne.n	802085e <__any_on+0x34>
 8020854:	009b      	lsls	r3, r3, #2
 8020856:	18d3      	adds	r3, r2, r3
 8020858:	4293      	cmp	r3, r2
 802085a:	d803      	bhi.n	8020864 <__any_on+0x3a>
 802085c:	2000      	movs	r0, #0
 802085e:	bd10      	pop	{r4, pc}
 8020860:	0003      	movs	r3, r0
 8020862:	e7f7      	b.n	8020854 <__any_on+0x2a>
 8020864:	3b04      	subs	r3, #4
 8020866:	6819      	ldr	r1, [r3, #0]
 8020868:	2900      	cmp	r1, #0
 802086a:	d0f5      	beq.n	8020858 <__any_on+0x2e>
 802086c:	2001      	movs	r0, #1
 802086e:	e7f6      	b.n	802085e <__any_on+0x34>

08020870 <__ascii_wctomb>:
 8020870:	0003      	movs	r3, r0
 8020872:	1e08      	subs	r0, r1, #0
 8020874:	d005      	beq.n	8020882 <__ascii_wctomb+0x12>
 8020876:	2aff      	cmp	r2, #255	@ 0xff
 8020878:	d904      	bls.n	8020884 <__ascii_wctomb+0x14>
 802087a:	228a      	movs	r2, #138	@ 0x8a
 802087c:	2001      	movs	r0, #1
 802087e:	601a      	str	r2, [r3, #0]
 8020880:	4240      	negs	r0, r0
 8020882:	4770      	bx	lr
 8020884:	2001      	movs	r0, #1
 8020886:	700a      	strb	r2, [r1, #0]
 8020888:	e7fb      	b.n	8020882 <__ascii_wctomb+0x12>
	...

0802088c <__ssputs_r>:
 802088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802088e:	688e      	ldr	r6, [r1, #8]
 8020890:	b085      	sub	sp, #20
 8020892:	001f      	movs	r7, r3
 8020894:	000c      	movs	r4, r1
 8020896:	680b      	ldr	r3, [r1, #0]
 8020898:	9002      	str	r0, [sp, #8]
 802089a:	9203      	str	r2, [sp, #12]
 802089c:	42be      	cmp	r6, r7
 802089e:	d830      	bhi.n	8020902 <__ssputs_r+0x76>
 80208a0:	210c      	movs	r1, #12
 80208a2:	5e62      	ldrsh	r2, [r4, r1]
 80208a4:	2190      	movs	r1, #144	@ 0x90
 80208a6:	00c9      	lsls	r1, r1, #3
 80208a8:	420a      	tst	r2, r1
 80208aa:	d028      	beq.n	80208fe <__ssputs_r+0x72>
 80208ac:	2003      	movs	r0, #3
 80208ae:	6921      	ldr	r1, [r4, #16]
 80208b0:	1a5b      	subs	r3, r3, r1
 80208b2:	9301      	str	r3, [sp, #4]
 80208b4:	6963      	ldr	r3, [r4, #20]
 80208b6:	4343      	muls	r3, r0
 80208b8:	9801      	ldr	r0, [sp, #4]
 80208ba:	0fdd      	lsrs	r5, r3, #31
 80208bc:	18ed      	adds	r5, r5, r3
 80208be:	1c7b      	adds	r3, r7, #1
 80208c0:	181b      	adds	r3, r3, r0
 80208c2:	106d      	asrs	r5, r5, #1
 80208c4:	42ab      	cmp	r3, r5
 80208c6:	d900      	bls.n	80208ca <__ssputs_r+0x3e>
 80208c8:	001d      	movs	r5, r3
 80208ca:	0552      	lsls	r2, r2, #21
 80208cc:	d528      	bpl.n	8020920 <__ssputs_r+0x94>
 80208ce:	0029      	movs	r1, r5
 80208d0:	9802      	ldr	r0, [sp, #8]
 80208d2:	f7ff fa61 	bl	801fd98 <_malloc_r>
 80208d6:	1e06      	subs	r6, r0, #0
 80208d8:	d02c      	beq.n	8020934 <__ssputs_r+0xa8>
 80208da:	9a01      	ldr	r2, [sp, #4]
 80208dc:	6921      	ldr	r1, [r4, #16]
 80208de:	f7fd fff9 	bl	801e8d4 <memcpy>
 80208e2:	89a2      	ldrh	r2, [r4, #12]
 80208e4:	4b18      	ldr	r3, [pc, #96]	@ (8020948 <__ssputs_r+0xbc>)
 80208e6:	401a      	ands	r2, r3
 80208e8:	2380      	movs	r3, #128	@ 0x80
 80208ea:	4313      	orrs	r3, r2
 80208ec:	81a3      	strh	r3, [r4, #12]
 80208ee:	9b01      	ldr	r3, [sp, #4]
 80208f0:	6126      	str	r6, [r4, #16]
 80208f2:	18f6      	adds	r6, r6, r3
 80208f4:	6026      	str	r6, [r4, #0]
 80208f6:	003e      	movs	r6, r7
 80208f8:	6165      	str	r5, [r4, #20]
 80208fa:	1aed      	subs	r5, r5, r3
 80208fc:	60a5      	str	r5, [r4, #8]
 80208fe:	42be      	cmp	r6, r7
 8020900:	d900      	bls.n	8020904 <__ssputs_r+0x78>
 8020902:	003e      	movs	r6, r7
 8020904:	0032      	movs	r2, r6
 8020906:	9903      	ldr	r1, [sp, #12]
 8020908:	6820      	ldr	r0, [r4, #0]
 802090a:	f000 fb7e 	bl	802100a <memmove>
 802090e:	2000      	movs	r0, #0
 8020910:	68a3      	ldr	r3, [r4, #8]
 8020912:	1b9b      	subs	r3, r3, r6
 8020914:	60a3      	str	r3, [r4, #8]
 8020916:	6823      	ldr	r3, [r4, #0]
 8020918:	199b      	adds	r3, r3, r6
 802091a:	6023      	str	r3, [r4, #0]
 802091c:	b005      	add	sp, #20
 802091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020920:	002a      	movs	r2, r5
 8020922:	9802      	ldr	r0, [sp, #8]
 8020924:	f000 fc05 	bl	8021132 <_realloc_r>
 8020928:	1e06      	subs	r6, r0, #0
 802092a:	d1e0      	bne.n	80208ee <__ssputs_r+0x62>
 802092c:	6921      	ldr	r1, [r4, #16]
 802092e:	9802      	ldr	r0, [sp, #8]
 8020930:	f7fe fe62 	bl	801f5f8 <_free_r>
 8020934:	230c      	movs	r3, #12
 8020936:	2001      	movs	r0, #1
 8020938:	9a02      	ldr	r2, [sp, #8]
 802093a:	4240      	negs	r0, r0
 802093c:	6013      	str	r3, [r2, #0]
 802093e:	89a2      	ldrh	r2, [r4, #12]
 8020940:	3334      	adds	r3, #52	@ 0x34
 8020942:	4313      	orrs	r3, r2
 8020944:	81a3      	strh	r3, [r4, #12]
 8020946:	e7e9      	b.n	802091c <__ssputs_r+0x90>
 8020948:	fffffb7f 	.word	0xfffffb7f

0802094c <_svfiprintf_r>:
 802094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802094e:	b0a1      	sub	sp, #132	@ 0x84
 8020950:	9003      	str	r0, [sp, #12]
 8020952:	001d      	movs	r5, r3
 8020954:	898b      	ldrh	r3, [r1, #12]
 8020956:	000f      	movs	r7, r1
 8020958:	0016      	movs	r6, r2
 802095a:	061b      	lsls	r3, r3, #24
 802095c:	d511      	bpl.n	8020982 <_svfiprintf_r+0x36>
 802095e:	690b      	ldr	r3, [r1, #16]
 8020960:	2b00      	cmp	r3, #0
 8020962:	d10e      	bne.n	8020982 <_svfiprintf_r+0x36>
 8020964:	2140      	movs	r1, #64	@ 0x40
 8020966:	f7ff fa17 	bl	801fd98 <_malloc_r>
 802096a:	6038      	str	r0, [r7, #0]
 802096c:	6138      	str	r0, [r7, #16]
 802096e:	2800      	cmp	r0, #0
 8020970:	d105      	bne.n	802097e <_svfiprintf_r+0x32>
 8020972:	230c      	movs	r3, #12
 8020974:	9a03      	ldr	r2, [sp, #12]
 8020976:	6013      	str	r3, [r2, #0]
 8020978:	2001      	movs	r0, #1
 802097a:	4240      	negs	r0, r0
 802097c:	e0cf      	b.n	8020b1e <_svfiprintf_r+0x1d2>
 802097e:	2340      	movs	r3, #64	@ 0x40
 8020980:	617b      	str	r3, [r7, #20]
 8020982:	2300      	movs	r3, #0
 8020984:	ac08      	add	r4, sp, #32
 8020986:	6163      	str	r3, [r4, #20]
 8020988:	3320      	adds	r3, #32
 802098a:	7663      	strb	r3, [r4, #25]
 802098c:	3310      	adds	r3, #16
 802098e:	76a3      	strb	r3, [r4, #26]
 8020990:	9507      	str	r5, [sp, #28]
 8020992:	0035      	movs	r5, r6
 8020994:	782b      	ldrb	r3, [r5, #0]
 8020996:	2b00      	cmp	r3, #0
 8020998:	d001      	beq.n	802099e <_svfiprintf_r+0x52>
 802099a:	2b25      	cmp	r3, #37	@ 0x25
 802099c:	d148      	bne.n	8020a30 <_svfiprintf_r+0xe4>
 802099e:	1bab      	subs	r3, r5, r6
 80209a0:	9305      	str	r3, [sp, #20]
 80209a2:	42b5      	cmp	r5, r6
 80209a4:	d00b      	beq.n	80209be <_svfiprintf_r+0x72>
 80209a6:	0032      	movs	r2, r6
 80209a8:	0039      	movs	r1, r7
 80209aa:	9803      	ldr	r0, [sp, #12]
 80209ac:	f7ff ff6e 	bl	802088c <__ssputs_r>
 80209b0:	3001      	adds	r0, #1
 80209b2:	d100      	bne.n	80209b6 <_svfiprintf_r+0x6a>
 80209b4:	e0ae      	b.n	8020b14 <_svfiprintf_r+0x1c8>
 80209b6:	6963      	ldr	r3, [r4, #20]
 80209b8:	9a05      	ldr	r2, [sp, #20]
 80209ba:	189b      	adds	r3, r3, r2
 80209bc:	6163      	str	r3, [r4, #20]
 80209be:	782b      	ldrb	r3, [r5, #0]
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d100      	bne.n	80209c6 <_svfiprintf_r+0x7a>
 80209c4:	e0a6      	b.n	8020b14 <_svfiprintf_r+0x1c8>
 80209c6:	2201      	movs	r2, #1
 80209c8:	2300      	movs	r3, #0
 80209ca:	4252      	negs	r2, r2
 80209cc:	6062      	str	r2, [r4, #4]
 80209ce:	a904      	add	r1, sp, #16
 80209d0:	3254      	adds	r2, #84	@ 0x54
 80209d2:	1852      	adds	r2, r2, r1
 80209d4:	1c6e      	adds	r6, r5, #1
 80209d6:	6023      	str	r3, [r4, #0]
 80209d8:	60e3      	str	r3, [r4, #12]
 80209da:	60a3      	str	r3, [r4, #8]
 80209dc:	7013      	strb	r3, [r2, #0]
 80209de:	65a3      	str	r3, [r4, #88]	@ 0x58
 80209e0:	4b54      	ldr	r3, [pc, #336]	@ (8020b34 <_svfiprintf_r+0x1e8>)
 80209e2:	2205      	movs	r2, #5
 80209e4:	0018      	movs	r0, r3
 80209e6:	7831      	ldrb	r1, [r6, #0]
 80209e8:	9305      	str	r3, [sp, #20]
 80209ea:	f7fd ff68 	bl	801e8be <memchr>
 80209ee:	1c75      	adds	r5, r6, #1
 80209f0:	2800      	cmp	r0, #0
 80209f2:	d11f      	bne.n	8020a34 <_svfiprintf_r+0xe8>
 80209f4:	6822      	ldr	r2, [r4, #0]
 80209f6:	06d3      	lsls	r3, r2, #27
 80209f8:	d504      	bpl.n	8020a04 <_svfiprintf_r+0xb8>
 80209fa:	2353      	movs	r3, #83	@ 0x53
 80209fc:	a904      	add	r1, sp, #16
 80209fe:	185b      	adds	r3, r3, r1
 8020a00:	2120      	movs	r1, #32
 8020a02:	7019      	strb	r1, [r3, #0]
 8020a04:	0713      	lsls	r3, r2, #28
 8020a06:	d504      	bpl.n	8020a12 <_svfiprintf_r+0xc6>
 8020a08:	2353      	movs	r3, #83	@ 0x53
 8020a0a:	a904      	add	r1, sp, #16
 8020a0c:	185b      	adds	r3, r3, r1
 8020a0e:	212b      	movs	r1, #43	@ 0x2b
 8020a10:	7019      	strb	r1, [r3, #0]
 8020a12:	7833      	ldrb	r3, [r6, #0]
 8020a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a16:	d016      	beq.n	8020a46 <_svfiprintf_r+0xfa>
 8020a18:	0035      	movs	r5, r6
 8020a1a:	2100      	movs	r1, #0
 8020a1c:	200a      	movs	r0, #10
 8020a1e:	68e3      	ldr	r3, [r4, #12]
 8020a20:	782a      	ldrb	r2, [r5, #0]
 8020a22:	1c6e      	adds	r6, r5, #1
 8020a24:	3a30      	subs	r2, #48	@ 0x30
 8020a26:	2a09      	cmp	r2, #9
 8020a28:	d950      	bls.n	8020acc <_svfiprintf_r+0x180>
 8020a2a:	2900      	cmp	r1, #0
 8020a2c:	d111      	bne.n	8020a52 <_svfiprintf_r+0x106>
 8020a2e:	e017      	b.n	8020a60 <_svfiprintf_r+0x114>
 8020a30:	3501      	adds	r5, #1
 8020a32:	e7af      	b.n	8020994 <_svfiprintf_r+0x48>
 8020a34:	9b05      	ldr	r3, [sp, #20]
 8020a36:	6822      	ldr	r2, [r4, #0]
 8020a38:	1ac0      	subs	r0, r0, r3
 8020a3a:	2301      	movs	r3, #1
 8020a3c:	4083      	lsls	r3, r0
 8020a3e:	4313      	orrs	r3, r2
 8020a40:	002e      	movs	r6, r5
 8020a42:	6023      	str	r3, [r4, #0]
 8020a44:	e7cc      	b.n	80209e0 <_svfiprintf_r+0x94>
 8020a46:	9b07      	ldr	r3, [sp, #28]
 8020a48:	1d19      	adds	r1, r3, #4
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	9107      	str	r1, [sp, #28]
 8020a4e:	2b00      	cmp	r3, #0
 8020a50:	db01      	blt.n	8020a56 <_svfiprintf_r+0x10a>
 8020a52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020a54:	e004      	b.n	8020a60 <_svfiprintf_r+0x114>
 8020a56:	425b      	negs	r3, r3
 8020a58:	60e3      	str	r3, [r4, #12]
 8020a5a:	2302      	movs	r3, #2
 8020a5c:	4313      	orrs	r3, r2
 8020a5e:	6023      	str	r3, [r4, #0]
 8020a60:	782b      	ldrb	r3, [r5, #0]
 8020a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8020a64:	d10c      	bne.n	8020a80 <_svfiprintf_r+0x134>
 8020a66:	786b      	ldrb	r3, [r5, #1]
 8020a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a6a:	d134      	bne.n	8020ad6 <_svfiprintf_r+0x18a>
 8020a6c:	9b07      	ldr	r3, [sp, #28]
 8020a6e:	3502      	adds	r5, #2
 8020a70:	1d1a      	adds	r2, r3, #4
 8020a72:	681b      	ldr	r3, [r3, #0]
 8020a74:	9207      	str	r2, [sp, #28]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	da01      	bge.n	8020a7e <_svfiprintf_r+0x132>
 8020a7a:	2301      	movs	r3, #1
 8020a7c:	425b      	negs	r3, r3
 8020a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a80:	4e2d      	ldr	r6, [pc, #180]	@ (8020b38 <_svfiprintf_r+0x1ec>)
 8020a82:	2203      	movs	r2, #3
 8020a84:	0030      	movs	r0, r6
 8020a86:	7829      	ldrb	r1, [r5, #0]
 8020a88:	f7fd ff19 	bl	801e8be <memchr>
 8020a8c:	2800      	cmp	r0, #0
 8020a8e:	d006      	beq.n	8020a9e <_svfiprintf_r+0x152>
 8020a90:	2340      	movs	r3, #64	@ 0x40
 8020a92:	1b80      	subs	r0, r0, r6
 8020a94:	4083      	lsls	r3, r0
 8020a96:	6822      	ldr	r2, [r4, #0]
 8020a98:	3501      	adds	r5, #1
 8020a9a:	4313      	orrs	r3, r2
 8020a9c:	6023      	str	r3, [r4, #0]
 8020a9e:	7829      	ldrb	r1, [r5, #0]
 8020aa0:	2206      	movs	r2, #6
 8020aa2:	4826      	ldr	r0, [pc, #152]	@ (8020b3c <_svfiprintf_r+0x1f0>)
 8020aa4:	1c6e      	adds	r6, r5, #1
 8020aa6:	7621      	strb	r1, [r4, #24]
 8020aa8:	f7fd ff09 	bl	801e8be <memchr>
 8020aac:	2800      	cmp	r0, #0
 8020aae:	d038      	beq.n	8020b22 <_svfiprintf_r+0x1d6>
 8020ab0:	4b23      	ldr	r3, [pc, #140]	@ (8020b40 <_svfiprintf_r+0x1f4>)
 8020ab2:	2b00      	cmp	r3, #0
 8020ab4:	d122      	bne.n	8020afc <_svfiprintf_r+0x1b0>
 8020ab6:	2207      	movs	r2, #7
 8020ab8:	9b07      	ldr	r3, [sp, #28]
 8020aba:	3307      	adds	r3, #7
 8020abc:	4393      	bics	r3, r2
 8020abe:	3308      	adds	r3, #8
 8020ac0:	9307      	str	r3, [sp, #28]
 8020ac2:	6963      	ldr	r3, [r4, #20]
 8020ac4:	9a04      	ldr	r2, [sp, #16]
 8020ac6:	189b      	adds	r3, r3, r2
 8020ac8:	6163      	str	r3, [r4, #20]
 8020aca:	e762      	b.n	8020992 <_svfiprintf_r+0x46>
 8020acc:	4343      	muls	r3, r0
 8020ace:	0035      	movs	r5, r6
 8020ad0:	2101      	movs	r1, #1
 8020ad2:	189b      	adds	r3, r3, r2
 8020ad4:	e7a4      	b.n	8020a20 <_svfiprintf_r+0xd4>
 8020ad6:	2300      	movs	r3, #0
 8020ad8:	200a      	movs	r0, #10
 8020ada:	0019      	movs	r1, r3
 8020adc:	3501      	adds	r5, #1
 8020ade:	6063      	str	r3, [r4, #4]
 8020ae0:	782a      	ldrb	r2, [r5, #0]
 8020ae2:	1c6e      	adds	r6, r5, #1
 8020ae4:	3a30      	subs	r2, #48	@ 0x30
 8020ae6:	2a09      	cmp	r2, #9
 8020ae8:	d903      	bls.n	8020af2 <_svfiprintf_r+0x1a6>
 8020aea:	2b00      	cmp	r3, #0
 8020aec:	d0c8      	beq.n	8020a80 <_svfiprintf_r+0x134>
 8020aee:	9109      	str	r1, [sp, #36]	@ 0x24
 8020af0:	e7c6      	b.n	8020a80 <_svfiprintf_r+0x134>
 8020af2:	4341      	muls	r1, r0
 8020af4:	0035      	movs	r5, r6
 8020af6:	2301      	movs	r3, #1
 8020af8:	1889      	adds	r1, r1, r2
 8020afa:	e7f1      	b.n	8020ae0 <_svfiprintf_r+0x194>
 8020afc:	aa07      	add	r2, sp, #28
 8020afe:	9200      	str	r2, [sp, #0]
 8020b00:	0021      	movs	r1, r4
 8020b02:	003a      	movs	r2, r7
 8020b04:	4b0f      	ldr	r3, [pc, #60]	@ (8020b44 <_svfiprintf_r+0x1f8>)
 8020b06:	9803      	ldr	r0, [sp, #12]
 8020b08:	f7fc ffd4 	bl	801dab4 <_printf_float>
 8020b0c:	9004      	str	r0, [sp, #16]
 8020b0e:	9b04      	ldr	r3, [sp, #16]
 8020b10:	3301      	adds	r3, #1
 8020b12:	d1d6      	bne.n	8020ac2 <_svfiprintf_r+0x176>
 8020b14:	89bb      	ldrh	r3, [r7, #12]
 8020b16:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020b18:	065b      	lsls	r3, r3, #25
 8020b1a:	d500      	bpl.n	8020b1e <_svfiprintf_r+0x1d2>
 8020b1c:	e72c      	b.n	8020978 <_svfiprintf_r+0x2c>
 8020b1e:	b021      	add	sp, #132	@ 0x84
 8020b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020b22:	aa07      	add	r2, sp, #28
 8020b24:	9200      	str	r2, [sp, #0]
 8020b26:	0021      	movs	r1, r4
 8020b28:	003a      	movs	r2, r7
 8020b2a:	4b06      	ldr	r3, [pc, #24]	@ (8020b44 <_svfiprintf_r+0x1f8>)
 8020b2c:	9803      	ldr	r0, [sp, #12]
 8020b2e:	f7fd fa6f 	bl	801e010 <_printf_i>
 8020b32:	e7eb      	b.n	8020b0c <_svfiprintf_r+0x1c0>
 8020b34:	08023c98 	.word	0x08023c98
 8020b38:	08023c9e 	.word	0x08023c9e
 8020b3c:	08023ca2 	.word	0x08023ca2
 8020b40:	0801dab5 	.word	0x0801dab5
 8020b44:	0802088d 	.word	0x0802088d

08020b48 <__sfputc_r>:
 8020b48:	6893      	ldr	r3, [r2, #8]
 8020b4a:	b510      	push	{r4, lr}
 8020b4c:	3b01      	subs	r3, #1
 8020b4e:	6093      	str	r3, [r2, #8]
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	da04      	bge.n	8020b5e <__sfputc_r+0x16>
 8020b54:	6994      	ldr	r4, [r2, #24]
 8020b56:	42a3      	cmp	r3, r4
 8020b58:	db07      	blt.n	8020b6a <__sfputc_r+0x22>
 8020b5a:	290a      	cmp	r1, #10
 8020b5c:	d005      	beq.n	8020b6a <__sfputc_r+0x22>
 8020b5e:	6813      	ldr	r3, [r2, #0]
 8020b60:	1c58      	adds	r0, r3, #1
 8020b62:	6010      	str	r0, [r2, #0]
 8020b64:	7019      	strb	r1, [r3, #0]
 8020b66:	0008      	movs	r0, r1
 8020b68:	bd10      	pop	{r4, pc}
 8020b6a:	f7fd fd37 	bl	801e5dc <__swbuf_r>
 8020b6e:	0001      	movs	r1, r0
 8020b70:	e7f9      	b.n	8020b66 <__sfputc_r+0x1e>

08020b72 <__sfputs_r>:
 8020b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b74:	0006      	movs	r6, r0
 8020b76:	000f      	movs	r7, r1
 8020b78:	0014      	movs	r4, r2
 8020b7a:	18d5      	adds	r5, r2, r3
 8020b7c:	42ac      	cmp	r4, r5
 8020b7e:	d101      	bne.n	8020b84 <__sfputs_r+0x12>
 8020b80:	2000      	movs	r0, #0
 8020b82:	e007      	b.n	8020b94 <__sfputs_r+0x22>
 8020b84:	7821      	ldrb	r1, [r4, #0]
 8020b86:	003a      	movs	r2, r7
 8020b88:	0030      	movs	r0, r6
 8020b8a:	f7ff ffdd 	bl	8020b48 <__sfputc_r>
 8020b8e:	3401      	adds	r4, #1
 8020b90:	1c43      	adds	r3, r0, #1
 8020b92:	d1f3      	bne.n	8020b7c <__sfputs_r+0xa>
 8020b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020b98 <_vfiprintf_r>:
 8020b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020b9a:	b0a1      	sub	sp, #132	@ 0x84
 8020b9c:	000f      	movs	r7, r1
 8020b9e:	0015      	movs	r5, r2
 8020ba0:	001e      	movs	r6, r3
 8020ba2:	9003      	str	r0, [sp, #12]
 8020ba4:	2800      	cmp	r0, #0
 8020ba6:	d004      	beq.n	8020bb2 <_vfiprintf_r+0x1a>
 8020ba8:	6a03      	ldr	r3, [r0, #32]
 8020baa:	2b00      	cmp	r3, #0
 8020bac:	d101      	bne.n	8020bb2 <_vfiprintf_r+0x1a>
 8020bae:	f7fd fbcd 	bl	801e34c <__sinit>
 8020bb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020bb4:	07db      	lsls	r3, r3, #31
 8020bb6:	d405      	bmi.n	8020bc4 <_vfiprintf_r+0x2c>
 8020bb8:	89bb      	ldrh	r3, [r7, #12]
 8020bba:	059b      	lsls	r3, r3, #22
 8020bbc:	d402      	bmi.n	8020bc4 <_vfiprintf_r+0x2c>
 8020bbe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020bc0:	f7fd fe7b 	bl	801e8ba <__retarget_lock_acquire_recursive>
 8020bc4:	89bb      	ldrh	r3, [r7, #12]
 8020bc6:	071b      	lsls	r3, r3, #28
 8020bc8:	d502      	bpl.n	8020bd0 <_vfiprintf_r+0x38>
 8020bca:	693b      	ldr	r3, [r7, #16]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d113      	bne.n	8020bf8 <_vfiprintf_r+0x60>
 8020bd0:	0039      	movs	r1, r7
 8020bd2:	9803      	ldr	r0, [sp, #12]
 8020bd4:	f7fd fd44 	bl	801e660 <__swsetup_r>
 8020bd8:	2800      	cmp	r0, #0
 8020bda:	d00d      	beq.n	8020bf8 <_vfiprintf_r+0x60>
 8020bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020bde:	07db      	lsls	r3, r3, #31
 8020be0:	d503      	bpl.n	8020bea <_vfiprintf_r+0x52>
 8020be2:	2001      	movs	r0, #1
 8020be4:	4240      	negs	r0, r0
 8020be6:	b021      	add	sp, #132	@ 0x84
 8020be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020bea:	89bb      	ldrh	r3, [r7, #12]
 8020bec:	059b      	lsls	r3, r3, #22
 8020bee:	d4f8      	bmi.n	8020be2 <_vfiprintf_r+0x4a>
 8020bf0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020bf2:	f7fd fe63 	bl	801e8bc <__retarget_lock_release_recursive>
 8020bf6:	e7f4      	b.n	8020be2 <_vfiprintf_r+0x4a>
 8020bf8:	2300      	movs	r3, #0
 8020bfa:	ac08      	add	r4, sp, #32
 8020bfc:	6163      	str	r3, [r4, #20]
 8020bfe:	3320      	adds	r3, #32
 8020c00:	7663      	strb	r3, [r4, #25]
 8020c02:	3310      	adds	r3, #16
 8020c04:	76a3      	strb	r3, [r4, #26]
 8020c06:	9607      	str	r6, [sp, #28]
 8020c08:	002e      	movs	r6, r5
 8020c0a:	7833      	ldrb	r3, [r6, #0]
 8020c0c:	2b00      	cmp	r3, #0
 8020c0e:	d001      	beq.n	8020c14 <_vfiprintf_r+0x7c>
 8020c10:	2b25      	cmp	r3, #37	@ 0x25
 8020c12:	d148      	bne.n	8020ca6 <_vfiprintf_r+0x10e>
 8020c14:	1b73      	subs	r3, r6, r5
 8020c16:	9305      	str	r3, [sp, #20]
 8020c18:	42ae      	cmp	r6, r5
 8020c1a:	d00b      	beq.n	8020c34 <_vfiprintf_r+0x9c>
 8020c1c:	002a      	movs	r2, r5
 8020c1e:	0039      	movs	r1, r7
 8020c20:	9803      	ldr	r0, [sp, #12]
 8020c22:	f7ff ffa6 	bl	8020b72 <__sfputs_r>
 8020c26:	3001      	adds	r0, #1
 8020c28:	d100      	bne.n	8020c2c <_vfiprintf_r+0x94>
 8020c2a:	e0ae      	b.n	8020d8a <_vfiprintf_r+0x1f2>
 8020c2c:	6963      	ldr	r3, [r4, #20]
 8020c2e:	9a05      	ldr	r2, [sp, #20]
 8020c30:	189b      	adds	r3, r3, r2
 8020c32:	6163      	str	r3, [r4, #20]
 8020c34:	7833      	ldrb	r3, [r6, #0]
 8020c36:	2b00      	cmp	r3, #0
 8020c38:	d100      	bne.n	8020c3c <_vfiprintf_r+0xa4>
 8020c3a:	e0a6      	b.n	8020d8a <_vfiprintf_r+0x1f2>
 8020c3c:	2201      	movs	r2, #1
 8020c3e:	2300      	movs	r3, #0
 8020c40:	4252      	negs	r2, r2
 8020c42:	6062      	str	r2, [r4, #4]
 8020c44:	a904      	add	r1, sp, #16
 8020c46:	3254      	adds	r2, #84	@ 0x54
 8020c48:	1852      	adds	r2, r2, r1
 8020c4a:	1c75      	adds	r5, r6, #1
 8020c4c:	6023      	str	r3, [r4, #0]
 8020c4e:	60e3      	str	r3, [r4, #12]
 8020c50:	60a3      	str	r3, [r4, #8]
 8020c52:	7013      	strb	r3, [r2, #0]
 8020c54:	65a3      	str	r3, [r4, #88]	@ 0x58
 8020c56:	4b59      	ldr	r3, [pc, #356]	@ (8020dbc <_vfiprintf_r+0x224>)
 8020c58:	2205      	movs	r2, #5
 8020c5a:	0018      	movs	r0, r3
 8020c5c:	7829      	ldrb	r1, [r5, #0]
 8020c5e:	9305      	str	r3, [sp, #20]
 8020c60:	f7fd fe2d 	bl	801e8be <memchr>
 8020c64:	1c6e      	adds	r6, r5, #1
 8020c66:	2800      	cmp	r0, #0
 8020c68:	d11f      	bne.n	8020caa <_vfiprintf_r+0x112>
 8020c6a:	6822      	ldr	r2, [r4, #0]
 8020c6c:	06d3      	lsls	r3, r2, #27
 8020c6e:	d504      	bpl.n	8020c7a <_vfiprintf_r+0xe2>
 8020c70:	2353      	movs	r3, #83	@ 0x53
 8020c72:	a904      	add	r1, sp, #16
 8020c74:	185b      	adds	r3, r3, r1
 8020c76:	2120      	movs	r1, #32
 8020c78:	7019      	strb	r1, [r3, #0]
 8020c7a:	0713      	lsls	r3, r2, #28
 8020c7c:	d504      	bpl.n	8020c88 <_vfiprintf_r+0xf0>
 8020c7e:	2353      	movs	r3, #83	@ 0x53
 8020c80:	a904      	add	r1, sp, #16
 8020c82:	185b      	adds	r3, r3, r1
 8020c84:	212b      	movs	r1, #43	@ 0x2b
 8020c86:	7019      	strb	r1, [r3, #0]
 8020c88:	782b      	ldrb	r3, [r5, #0]
 8020c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8020c8c:	d016      	beq.n	8020cbc <_vfiprintf_r+0x124>
 8020c8e:	002e      	movs	r6, r5
 8020c90:	2100      	movs	r1, #0
 8020c92:	200a      	movs	r0, #10
 8020c94:	68e3      	ldr	r3, [r4, #12]
 8020c96:	7832      	ldrb	r2, [r6, #0]
 8020c98:	1c75      	adds	r5, r6, #1
 8020c9a:	3a30      	subs	r2, #48	@ 0x30
 8020c9c:	2a09      	cmp	r2, #9
 8020c9e:	d950      	bls.n	8020d42 <_vfiprintf_r+0x1aa>
 8020ca0:	2900      	cmp	r1, #0
 8020ca2:	d111      	bne.n	8020cc8 <_vfiprintf_r+0x130>
 8020ca4:	e017      	b.n	8020cd6 <_vfiprintf_r+0x13e>
 8020ca6:	3601      	adds	r6, #1
 8020ca8:	e7af      	b.n	8020c0a <_vfiprintf_r+0x72>
 8020caa:	9b05      	ldr	r3, [sp, #20]
 8020cac:	6822      	ldr	r2, [r4, #0]
 8020cae:	1ac0      	subs	r0, r0, r3
 8020cb0:	2301      	movs	r3, #1
 8020cb2:	4083      	lsls	r3, r0
 8020cb4:	4313      	orrs	r3, r2
 8020cb6:	0035      	movs	r5, r6
 8020cb8:	6023      	str	r3, [r4, #0]
 8020cba:	e7cc      	b.n	8020c56 <_vfiprintf_r+0xbe>
 8020cbc:	9b07      	ldr	r3, [sp, #28]
 8020cbe:	1d19      	adds	r1, r3, #4
 8020cc0:	681b      	ldr	r3, [r3, #0]
 8020cc2:	9107      	str	r1, [sp, #28]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	db01      	blt.n	8020ccc <_vfiprintf_r+0x134>
 8020cc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020cca:	e004      	b.n	8020cd6 <_vfiprintf_r+0x13e>
 8020ccc:	425b      	negs	r3, r3
 8020cce:	60e3      	str	r3, [r4, #12]
 8020cd0:	2302      	movs	r3, #2
 8020cd2:	4313      	orrs	r3, r2
 8020cd4:	6023      	str	r3, [r4, #0]
 8020cd6:	7833      	ldrb	r3, [r6, #0]
 8020cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8020cda:	d10c      	bne.n	8020cf6 <_vfiprintf_r+0x15e>
 8020cdc:	7873      	ldrb	r3, [r6, #1]
 8020cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8020ce0:	d134      	bne.n	8020d4c <_vfiprintf_r+0x1b4>
 8020ce2:	9b07      	ldr	r3, [sp, #28]
 8020ce4:	3602      	adds	r6, #2
 8020ce6:	1d1a      	adds	r2, r3, #4
 8020ce8:	681b      	ldr	r3, [r3, #0]
 8020cea:	9207      	str	r2, [sp, #28]
 8020cec:	2b00      	cmp	r3, #0
 8020cee:	da01      	bge.n	8020cf4 <_vfiprintf_r+0x15c>
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	425b      	negs	r3, r3
 8020cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cf6:	4d32      	ldr	r5, [pc, #200]	@ (8020dc0 <_vfiprintf_r+0x228>)
 8020cf8:	2203      	movs	r2, #3
 8020cfa:	0028      	movs	r0, r5
 8020cfc:	7831      	ldrb	r1, [r6, #0]
 8020cfe:	f7fd fdde 	bl	801e8be <memchr>
 8020d02:	2800      	cmp	r0, #0
 8020d04:	d006      	beq.n	8020d14 <_vfiprintf_r+0x17c>
 8020d06:	2340      	movs	r3, #64	@ 0x40
 8020d08:	1b40      	subs	r0, r0, r5
 8020d0a:	4083      	lsls	r3, r0
 8020d0c:	6822      	ldr	r2, [r4, #0]
 8020d0e:	3601      	adds	r6, #1
 8020d10:	4313      	orrs	r3, r2
 8020d12:	6023      	str	r3, [r4, #0]
 8020d14:	7831      	ldrb	r1, [r6, #0]
 8020d16:	2206      	movs	r2, #6
 8020d18:	482a      	ldr	r0, [pc, #168]	@ (8020dc4 <_vfiprintf_r+0x22c>)
 8020d1a:	1c75      	adds	r5, r6, #1
 8020d1c:	7621      	strb	r1, [r4, #24]
 8020d1e:	f7fd fdce 	bl	801e8be <memchr>
 8020d22:	2800      	cmp	r0, #0
 8020d24:	d040      	beq.n	8020da8 <_vfiprintf_r+0x210>
 8020d26:	4b28      	ldr	r3, [pc, #160]	@ (8020dc8 <_vfiprintf_r+0x230>)
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d122      	bne.n	8020d72 <_vfiprintf_r+0x1da>
 8020d2c:	2207      	movs	r2, #7
 8020d2e:	9b07      	ldr	r3, [sp, #28]
 8020d30:	3307      	adds	r3, #7
 8020d32:	4393      	bics	r3, r2
 8020d34:	3308      	adds	r3, #8
 8020d36:	9307      	str	r3, [sp, #28]
 8020d38:	6963      	ldr	r3, [r4, #20]
 8020d3a:	9a04      	ldr	r2, [sp, #16]
 8020d3c:	189b      	adds	r3, r3, r2
 8020d3e:	6163      	str	r3, [r4, #20]
 8020d40:	e762      	b.n	8020c08 <_vfiprintf_r+0x70>
 8020d42:	4343      	muls	r3, r0
 8020d44:	002e      	movs	r6, r5
 8020d46:	2101      	movs	r1, #1
 8020d48:	189b      	adds	r3, r3, r2
 8020d4a:	e7a4      	b.n	8020c96 <_vfiprintf_r+0xfe>
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	200a      	movs	r0, #10
 8020d50:	0019      	movs	r1, r3
 8020d52:	3601      	adds	r6, #1
 8020d54:	6063      	str	r3, [r4, #4]
 8020d56:	7832      	ldrb	r2, [r6, #0]
 8020d58:	1c75      	adds	r5, r6, #1
 8020d5a:	3a30      	subs	r2, #48	@ 0x30
 8020d5c:	2a09      	cmp	r2, #9
 8020d5e:	d903      	bls.n	8020d68 <_vfiprintf_r+0x1d0>
 8020d60:	2b00      	cmp	r3, #0
 8020d62:	d0c8      	beq.n	8020cf6 <_vfiprintf_r+0x15e>
 8020d64:	9109      	str	r1, [sp, #36]	@ 0x24
 8020d66:	e7c6      	b.n	8020cf6 <_vfiprintf_r+0x15e>
 8020d68:	4341      	muls	r1, r0
 8020d6a:	002e      	movs	r6, r5
 8020d6c:	2301      	movs	r3, #1
 8020d6e:	1889      	adds	r1, r1, r2
 8020d70:	e7f1      	b.n	8020d56 <_vfiprintf_r+0x1be>
 8020d72:	aa07      	add	r2, sp, #28
 8020d74:	9200      	str	r2, [sp, #0]
 8020d76:	0021      	movs	r1, r4
 8020d78:	003a      	movs	r2, r7
 8020d7a:	4b14      	ldr	r3, [pc, #80]	@ (8020dcc <_vfiprintf_r+0x234>)
 8020d7c:	9803      	ldr	r0, [sp, #12]
 8020d7e:	f7fc fe99 	bl	801dab4 <_printf_float>
 8020d82:	9004      	str	r0, [sp, #16]
 8020d84:	9b04      	ldr	r3, [sp, #16]
 8020d86:	3301      	adds	r3, #1
 8020d88:	d1d6      	bne.n	8020d38 <_vfiprintf_r+0x1a0>
 8020d8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020d8c:	07db      	lsls	r3, r3, #31
 8020d8e:	d405      	bmi.n	8020d9c <_vfiprintf_r+0x204>
 8020d90:	89bb      	ldrh	r3, [r7, #12]
 8020d92:	059b      	lsls	r3, r3, #22
 8020d94:	d402      	bmi.n	8020d9c <_vfiprintf_r+0x204>
 8020d96:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8020d98:	f7fd fd90 	bl	801e8bc <__retarget_lock_release_recursive>
 8020d9c:	89bb      	ldrh	r3, [r7, #12]
 8020d9e:	065b      	lsls	r3, r3, #25
 8020da0:	d500      	bpl.n	8020da4 <_vfiprintf_r+0x20c>
 8020da2:	e71e      	b.n	8020be2 <_vfiprintf_r+0x4a>
 8020da4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020da6:	e71e      	b.n	8020be6 <_vfiprintf_r+0x4e>
 8020da8:	aa07      	add	r2, sp, #28
 8020daa:	9200      	str	r2, [sp, #0]
 8020dac:	0021      	movs	r1, r4
 8020dae:	003a      	movs	r2, r7
 8020db0:	4b06      	ldr	r3, [pc, #24]	@ (8020dcc <_vfiprintf_r+0x234>)
 8020db2:	9803      	ldr	r0, [sp, #12]
 8020db4:	f7fd f92c 	bl	801e010 <_printf_i>
 8020db8:	e7e3      	b.n	8020d82 <_vfiprintf_r+0x1ea>
 8020dba:	46c0      	nop			@ (mov r8, r8)
 8020dbc:	08023c98 	.word	0x08023c98
 8020dc0:	08023c9e 	.word	0x08023c9e
 8020dc4:	08023ca2 	.word	0x08023ca2
 8020dc8:	0801dab5 	.word	0x0801dab5
 8020dcc:	08020b73 	.word	0x08020b73

08020dd0 <__sflush_r>:
 8020dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020dd2:	220c      	movs	r2, #12
 8020dd4:	5e8b      	ldrsh	r3, [r1, r2]
 8020dd6:	0005      	movs	r5, r0
 8020dd8:	000c      	movs	r4, r1
 8020dda:	071a      	lsls	r2, r3, #28
 8020ddc:	d456      	bmi.n	8020e8c <__sflush_r+0xbc>
 8020dde:	684a      	ldr	r2, [r1, #4]
 8020de0:	2a00      	cmp	r2, #0
 8020de2:	dc02      	bgt.n	8020dea <__sflush_r+0x1a>
 8020de4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8020de6:	2a00      	cmp	r2, #0
 8020de8:	dd4e      	ble.n	8020e88 <__sflush_r+0xb8>
 8020dea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8020dec:	2f00      	cmp	r7, #0
 8020dee:	d04b      	beq.n	8020e88 <__sflush_r+0xb8>
 8020df0:	2200      	movs	r2, #0
 8020df2:	2080      	movs	r0, #128	@ 0x80
 8020df4:	682e      	ldr	r6, [r5, #0]
 8020df6:	602a      	str	r2, [r5, #0]
 8020df8:	001a      	movs	r2, r3
 8020dfa:	0140      	lsls	r0, r0, #5
 8020dfc:	6a21      	ldr	r1, [r4, #32]
 8020dfe:	4002      	ands	r2, r0
 8020e00:	4203      	tst	r3, r0
 8020e02:	d033      	beq.n	8020e6c <__sflush_r+0x9c>
 8020e04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020e06:	89a3      	ldrh	r3, [r4, #12]
 8020e08:	075b      	lsls	r3, r3, #29
 8020e0a:	d506      	bpl.n	8020e1a <__sflush_r+0x4a>
 8020e0c:	6863      	ldr	r3, [r4, #4]
 8020e0e:	1ad2      	subs	r2, r2, r3
 8020e10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d001      	beq.n	8020e1a <__sflush_r+0x4a>
 8020e16:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020e18:	1ad2      	subs	r2, r2, r3
 8020e1a:	2300      	movs	r3, #0
 8020e1c:	0028      	movs	r0, r5
 8020e1e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8020e20:	6a21      	ldr	r1, [r4, #32]
 8020e22:	47b8      	blx	r7
 8020e24:	89a2      	ldrh	r2, [r4, #12]
 8020e26:	1c43      	adds	r3, r0, #1
 8020e28:	d106      	bne.n	8020e38 <__sflush_r+0x68>
 8020e2a:	6829      	ldr	r1, [r5, #0]
 8020e2c:	291d      	cmp	r1, #29
 8020e2e:	d846      	bhi.n	8020ebe <__sflush_r+0xee>
 8020e30:	4b29      	ldr	r3, [pc, #164]	@ (8020ed8 <__sflush_r+0x108>)
 8020e32:	410b      	asrs	r3, r1
 8020e34:	07db      	lsls	r3, r3, #31
 8020e36:	d442      	bmi.n	8020ebe <__sflush_r+0xee>
 8020e38:	2300      	movs	r3, #0
 8020e3a:	6063      	str	r3, [r4, #4]
 8020e3c:	6923      	ldr	r3, [r4, #16]
 8020e3e:	6023      	str	r3, [r4, #0]
 8020e40:	04d2      	lsls	r2, r2, #19
 8020e42:	d505      	bpl.n	8020e50 <__sflush_r+0x80>
 8020e44:	1c43      	adds	r3, r0, #1
 8020e46:	d102      	bne.n	8020e4e <__sflush_r+0x7e>
 8020e48:	682b      	ldr	r3, [r5, #0]
 8020e4a:	2b00      	cmp	r3, #0
 8020e4c:	d100      	bne.n	8020e50 <__sflush_r+0x80>
 8020e4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8020e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020e52:	602e      	str	r6, [r5, #0]
 8020e54:	2900      	cmp	r1, #0
 8020e56:	d017      	beq.n	8020e88 <__sflush_r+0xb8>
 8020e58:	0023      	movs	r3, r4
 8020e5a:	3344      	adds	r3, #68	@ 0x44
 8020e5c:	4299      	cmp	r1, r3
 8020e5e:	d002      	beq.n	8020e66 <__sflush_r+0x96>
 8020e60:	0028      	movs	r0, r5
 8020e62:	f7fe fbc9 	bl	801f5f8 <_free_r>
 8020e66:	2300      	movs	r3, #0
 8020e68:	6363      	str	r3, [r4, #52]	@ 0x34
 8020e6a:	e00d      	b.n	8020e88 <__sflush_r+0xb8>
 8020e6c:	2301      	movs	r3, #1
 8020e6e:	0028      	movs	r0, r5
 8020e70:	47b8      	blx	r7
 8020e72:	0002      	movs	r2, r0
 8020e74:	1c43      	adds	r3, r0, #1
 8020e76:	d1c6      	bne.n	8020e06 <__sflush_r+0x36>
 8020e78:	682b      	ldr	r3, [r5, #0]
 8020e7a:	2b00      	cmp	r3, #0
 8020e7c:	d0c3      	beq.n	8020e06 <__sflush_r+0x36>
 8020e7e:	2b1d      	cmp	r3, #29
 8020e80:	d001      	beq.n	8020e86 <__sflush_r+0xb6>
 8020e82:	2b16      	cmp	r3, #22
 8020e84:	d11a      	bne.n	8020ebc <__sflush_r+0xec>
 8020e86:	602e      	str	r6, [r5, #0]
 8020e88:	2000      	movs	r0, #0
 8020e8a:	e01e      	b.n	8020eca <__sflush_r+0xfa>
 8020e8c:	690e      	ldr	r6, [r1, #16]
 8020e8e:	2e00      	cmp	r6, #0
 8020e90:	d0fa      	beq.n	8020e88 <__sflush_r+0xb8>
 8020e92:	680f      	ldr	r7, [r1, #0]
 8020e94:	600e      	str	r6, [r1, #0]
 8020e96:	1bba      	subs	r2, r7, r6
 8020e98:	9201      	str	r2, [sp, #4]
 8020e9a:	2200      	movs	r2, #0
 8020e9c:	079b      	lsls	r3, r3, #30
 8020e9e:	d100      	bne.n	8020ea2 <__sflush_r+0xd2>
 8020ea0:	694a      	ldr	r2, [r1, #20]
 8020ea2:	60a2      	str	r2, [r4, #8]
 8020ea4:	9b01      	ldr	r3, [sp, #4]
 8020ea6:	2b00      	cmp	r3, #0
 8020ea8:	ddee      	ble.n	8020e88 <__sflush_r+0xb8>
 8020eaa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8020eac:	0032      	movs	r2, r6
 8020eae:	001f      	movs	r7, r3
 8020eb0:	0028      	movs	r0, r5
 8020eb2:	9b01      	ldr	r3, [sp, #4]
 8020eb4:	6a21      	ldr	r1, [r4, #32]
 8020eb6:	47b8      	blx	r7
 8020eb8:	2800      	cmp	r0, #0
 8020eba:	dc07      	bgt.n	8020ecc <__sflush_r+0xfc>
 8020ebc:	89a2      	ldrh	r2, [r4, #12]
 8020ebe:	2340      	movs	r3, #64	@ 0x40
 8020ec0:	2001      	movs	r0, #1
 8020ec2:	4313      	orrs	r3, r2
 8020ec4:	b21b      	sxth	r3, r3
 8020ec6:	81a3      	strh	r3, [r4, #12]
 8020ec8:	4240      	negs	r0, r0
 8020eca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020ecc:	9b01      	ldr	r3, [sp, #4]
 8020ece:	1836      	adds	r6, r6, r0
 8020ed0:	1a1b      	subs	r3, r3, r0
 8020ed2:	9301      	str	r3, [sp, #4]
 8020ed4:	e7e6      	b.n	8020ea4 <__sflush_r+0xd4>
 8020ed6:	46c0      	nop			@ (mov r8, r8)
 8020ed8:	dfbffffe 	.word	0xdfbffffe

08020edc <_fflush_r>:
 8020edc:	690b      	ldr	r3, [r1, #16]
 8020ede:	b570      	push	{r4, r5, r6, lr}
 8020ee0:	0005      	movs	r5, r0
 8020ee2:	000c      	movs	r4, r1
 8020ee4:	2b00      	cmp	r3, #0
 8020ee6:	d102      	bne.n	8020eee <_fflush_r+0x12>
 8020ee8:	2500      	movs	r5, #0
 8020eea:	0028      	movs	r0, r5
 8020eec:	bd70      	pop	{r4, r5, r6, pc}
 8020eee:	2800      	cmp	r0, #0
 8020ef0:	d004      	beq.n	8020efc <_fflush_r+0x20>
 8020ef2:	6a03      	ldr	r3, [r0, #32]
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	d101      	bne.n	8020efc <_fflush_r+0x20>
 8020ef8:	f7fd fa28 	bl	801e34c <__sinit>
 8020efc:	220c      	movs	r2, #12
 8020efe:	5ea3      	ldrsh	r3, [r4, r2]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d0f1      	beq.n	8020ee8 <_fflush_r+0xc>
 8020f04:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020f06:	07d2      	lsls	r2, r2, #31
 8020f08:	d404      	bmi.n	8020f14 <_fflush_r+0x38>
 8020f0a:	059b      	lsls	r3, r3, #22
 8020f0c:	d402      	bmi.n	8020f14 <_fflush_r+0x38>
 8020f0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020f10:	f7fd fcd3 	bl	801e8ba <__retarget_lock_acquire_recursive>
 8020f14:	0028      	movs	r0, r5
 8020f16:	0021      	movs	r1, r4
 8020f18:	f7ff ff5a 	bl	8020dd0 <__sflush_r>
 8020f1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020f1e:	0005      	movs	r5, r0
 8020f20:	07db      	lsls	r3, r3, #31
 8020f22:	d4e2      	bmi.n	8020eea <_fflush_r+0xe>
 8020f24:	89a3      	ldrh	r3, [r4, #12]
 8020f26:	059b      	lsls	r3, r3, #22
 8020f28:	d4df      	bmi.n	8020eea <_fflush_r+0xe>
 8020f2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020f2c:	f7fd fcc6 	bl	801e8bc <__retarget_lock_release_recursive>
 8020f30:	e7db      	b.n	8020eea <_fflush_r+0xe>
	...

08020f34 <__swhatbuf_r>:
 8020f34:	b570      	push	{r4, r5, r6, lr}
 8020f36:	000e      	movs	r6, r1
 8020f38:	001d      	movs	r5, r3
 8020f3a:	230e      	movs	r3, #14
 8020f3c:	5ec9      	ldrsh	r1, [r1, r3]
 8020f3e:	0014      	movs	r4, r2
 8020f40:	b096      	sub	sp, #88	@ 0x58
 8020f42:	2900      	cmp	r1, #0
 8020f44:	da0c      	bge.n	8020f60 <__swhatbuf_r+0x2c>
 8020f46:	89b2      	ldrh	r2, [r6, #12]
 8020f48:	2380      	movs	r3, #128	@ 0x80
 8020f4a:	0011      	movs	r1, r2
 8020f4c:	4019      	ands	r1, r3
 8020f4e:	421a      	tst	r2, r3
 8020f50:	d114      	bne.n	8020f7c <__swhatbuf_r+0x48>
 8020f52:	2380      	movs	r3, #128	@ 0x80
 8020f54:	00db      	lsls	r3, r3, #3
 8020f56:	2000      	movs	r0, #0
 8020f58:	6029      	str	r1, [r5, #0]
 8020f5a:	6023      	str	r3, [r4, #0]
 8020f5c:	b016      	add	sp, #88	@ 0x58
 8020f5e:	bd70      	pop	{r4, r5, r6, pc}
 8020f60:	466a      	mov	r2, sp
 8020f62:	f000 f865 	bl	8021030 <_fstat_r>
 8020f66:	2800      	cmp	r0, #0
 8020f68:	dbed      	blt.n	8020f46 <__swhatbuf_r+0x12>
 8020f6a:	23f0      	movs	r3, #240	@ 0xf0
 8020f6c:	9901      	ldr	r1, [sp, #4]
 8020f6e:	021b      	lsls	r3, r3, #8
 8020f70:	4019      	ands	r1, r3
 8020f72:	4b04      	ldr	r3, [pc, #16]	@ (8020f84 <__swhatbuf_r+0x50>)
 8020f74:	18c9      	adds	r1, r1, r3
 8020f76:	424b      	negs	r3, r1
 8020f78:	4159      	adcs	r1, r3
 8020f7a:	e7ea      	b.n	8020f52 <__swhatbuf_r+0x1e>
 8020f7c:	2100      	movs	r1, #0
 8020f7e:	2340      	movs	r3, #64	@ 0x40
 8020f80:	e7e9      	b.n	8020f56 <__swhatbuf_r+0x22>
 8020f82:	46c0      	nop			@ (mov r8, r8)
 8020f84:	ffffe000 	.word	0xffffe000

08020f88 <__smakebuf_r>:
 8020f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f8a:	2602      	movs	r6, #2
 8020f8c:	898b      	ldrh	r3, [r1, #12]
 8020f8e:	0005      	movs	r5, r0
 8020f90:	000c      	movs	r4, r1
 8020f92:	b085      	sub	sp, #20
 8020f94:	4233      	tst	r3, r6
 8020f96:	d007      	beq.n	8020fa8 <__smakebuf_r+0x20>
 8020f98:	0023      	movs	r3, r4
 8020f9a:	3347      	adds	r3, #71	@ 0x47
 8020f9c:	6023      	str	r3, [r4, #0]
 8020f9e:	6123      	str	r3, [r4, #16]
 8020fa0:	2301      	movs	r3, #1
 8020fa2:	6163      	str	r3, [r4, #20]
 8020fa4:	b005      	add	sp, #20
 8020fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fa8:	ab03      	add	r3, sp, #12
 8020faa:	aa02      	add	r2, sp, #8
 8020fac:	f7ff ffc2 	bl	8020f34 <__swhatbuf_r>
 8020fb0:	9f02      	ldr	r7, [sp, #8]
 8020fb2:	9001      	str	r0, [sp, #4]
 8020fb4:	0039      	movs	r1, r7
 8020fb6:	0028      	movs	r0, r5
 8020fb8:	f7fe feee 	bl	801fd98 <_malloc_r>
 8020fbc:	2800      	cmp	r0, #0
 8020fbe:	d108      	bne.n	8020fd2 <__smakebuf_r+0x4a>
 8020fc0:	220c      	movs	r2, #12
 8020fc2:	5ea3      	ldrsh	r3, [r4, r2]
 8020fc4:	059a      	lsls	r2, r3, #22
 8020fc6:	d4ed      	bmi.n	8020fa4 <__smakebuf_r+0x1c>
 8020fc8:	2203      	movs	r2, #3
 8020fca:	4393      	bics	r3, r2
 8020fcc:	431e      	orrs	r6, r3
 8020fce:	81a6      	strh	r6, [r4, #12]
 8020fd0:	e7e2      	b.n	8020f98 <__smakebuf_r+0x10>
 8020fd2:	2380      	movs	r3, #128	@ 0x80
 8020fd4:	89a2      	ldrh	r2, [r4, #12]
 8020fd6:	6020      	str	r0, [r4, #0]
 8020fd8:	4313      	orrs	r3, r2
 8020fda:	81a3      	strh	r3, [r4, #12]
 8020fdc:	9b03      	ldr	r3, [sp, #12]
 8020fde:	6120      	str	r0, [r4, #16]
 8020fe0:	6167      	str	r7, [r4, #20]
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	d00c      	beq.n	8021000 <__smakebuf_r+0x78>
 8020fe6:	0028      	movs	r0, r5
 8020fe8:	230e      	movs	r3, #14
 8020fea:	5ee1      	ldrsh	r1, [r4, r3]
 8020fec:	f000 f832 	bl	8021054 <_isatty_r>
 8020ff0:	2800      	cmp	r0, #0
 8020ff2:	d005      	beq.n	8021000 <__smakebuf_r+0x78>
 8020ff4:	2303      	movs	r3, #3
 8020ff6:	89a2      	ldrh	r2, [r4, #12]
 8020ff8:	439a      	bics	r2, r3
 8020ffa:	3b02      	subs	r3, #2
 8020ffc:	4313      	orrs	r3, r2
 8020ffe:	81a3      	strh	r3, [r4, #12]
 8021000:	89a3      	ldrh	r3, [r4, #12]
 8021002:	9a01      	ldr	r2, [sp, #4]
 8021004:	4313      	orrs	r3, r2
 8021006:	81a3      	strh	r3, [r4, #12]
 8021008:	e7cc      	b.n	8020fa4 <__smakebuf_r+0x1c>

0802100a <memmove>:
 802100a:	b510      	push	{r4, lr}
 802100c:	4288      	cmp	r0, r1
 802100e:	d806      	bhi.n	802101e <memmove+0x14>
 8021010:	2300      	movs	r3, #0
 8021012:	429a      	cmp	r2, r3
 8021014:	d008      	beq.n	8021028 <memmove+0x1e>
 8021016:	5ccc      	ldrb	r4, [r1, r3]
 8021018:	54c4      	strb	r4, [r0, r3]
 802101a:	3301      	adds	r3, #1
 802101c:	e7f9      	b.n	8021012 <memmove+0x8>
 802101e:	188b      	adds	r3, r1, r2
 8021020:	4298      	cmp	r0, r3
 8021022:	d2f5      	bcs.n	8021010 <memmove+0x6>
 8021024:	3a01      	subs	r2, #1
 8021026:	d200      	bcs.n	802102a <memmove+0x20>
 8021028:	bd10      	pop	{r4, pc}
 802102a:	5c8b      	ldrb	r3, [r1, r2]
 802102c:	5483      	strb	r3, [r0, r2]
 802102e:	e7f9      	b.n	8021024 <memmove+0x1a>

08021030 <_fstat_r>:
 8021030:	2300      	movs	r3, #0
 8021032:	b570      	push	{r4, r5, r6, lr}
 8021034:	4d06      	ldr	r5, [pc, #24]	@ (8021050 <_fstat_r+0x20>)
 8021036:	0004      	movs	r4, r0
 8021038:	0008      	movs	r0, r1
 802103a:	0011      	movs	r1, r2
 802103c:	602b      	str	r3, [r5, #0]
 802103e:	f7eb fae3 	bl	800c608 <_fstat>
 8021042:	1c43      	adds	r3, r0, #1
 8021044:	d103      	bne.n	802104e <_fstat_r+0x1e>
 8021046:	682b      	ldr	r3, [r5, #0]
 8021048:	2b00      	cmp	r3, #0
 802104a:	d000      	beq.n	802104e <_fstat_r+0x1e>
 802104c:	6023      	str	r3, [r4, #0]
 802104e:	bd70      	pop	{r4, r5, r6, pc}
 8021050:	200038f4 	.word	0x200038f4

08021054 <_isatty_r>:
 8021054:	2300      	movs	r3, #0
 8021056:	b570      	push	{r4, r5, r6, lr}
 8021058:	4d06      	ldr	r5, [pc, #24]	@ (8021074 <_isatty_r+0x20>)
 802105a:	0004      	movs	r4, r0
 802105c:	0008      	movs	r0, r1
 802105e:	602b      	str	r3, [r5, #0]
 8021060:	f7eb fae0 	bl	800c624 <_isatty>
 8021064:	1c43      	adds	r3, r0, #1
 8021066:	d103      	bne.n	8021070 <_isatty_r+0x1c>
 8021068:	682b      	ldr	r3, [r5, #0]
 802106a:	2b00      	cmp	r3, #0
 802106c:	d000      	beq.n	8021070 <_isatty_r+0x1c>
 802106e:	6023      	str	r3, [r4, #0]
 8021070:	bd70      	pop	{r4, r5, r6, pc}
 8021072:	46c0      	nop			@ (mov r8, r8)
 8021074:	200038f4 	.word	0x200038f4

08021078 <_sbrk_r>:
 8021078:	2300      	movs	r3, #0
 802107a:	b570      	push	{r4, r5, r6, lr}
 802107c:	4d06      	ldr	r5, [pc, #24]	@ (8021098 <_sbrk_r+0x20>)
 802107e:	0004      	movs	r4, r0
 8021080:	0008      	movs	r0, r1
 8021082:	602b      	str	r3, [r5, #0]
 8021084:	f7eb fae2 	bl	800c64c <_sbrk>
 8021088:	1c43      	adds	r3, r0, #1
 802108a:	d103      	bne.n	8021094 <_sbrk_r+0x1c>
 802108c:	682b      	ldr	r3, [r5, #0]
 802108e:	2b00      	cmp	r3, #0
 8021090:	d000      	beq.n	8021094 <_sbrk_r+0x1c>
 8021092:	6023      	str	r3, [r4, #0]
 8021094:	bd70      	pop	{r4, r5, r6, pc}
 8021096:	46c0      	nop			@ (mov r8, r8)
 8021098:	200038f4 	.word	0x200038f4

0802109c <__assert_func>:
 802109c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 802109e:	0014      	movs	r4, r2
 80210a0:	001a      	movs	r2, r3
 80210a2:	4b09      	ldr	r3, [pc, #36]	@ (80210c8 <__assert_func+0x2c>)
 80210a4:	0005      	movs	r5, r0
 80210a6:	681b      	ldr	r3, [r3, #0]
 80210a8:	000e      	movs	r6, r1
 80210aa:	68d8      	ldr	r0, [r3, #12]
 80210ac:	4b07      	ldr	r3, [pc, #28]	@ (80210cc <__assert_func+0x30>)
 80210ae:	2c00      	cmp	r4, #0
 80210b0:	d101      	bne.n	80210b6 <__assert_func+0x1a>
 80210b2:	4b07      	ldr	r3, [pc, #28]	@ (80210d0 <__assert_func+0x34>)
 80210b4:	001c      	movs	r4, r3
 80210b6:	4907      	ldr	r1, [pc, #28]	@ (80210d4 <__assert_func+0x38>)
 80210b8:	9301      	str	r3, [sp, #4]
 80210ba:	9402      	str	r4, [sp, #8]
 80210bc:	002b      	movs	r3, r5
 80210be:	9600      	str	r6, [sp, #0]
 80210c0:	f000 f866 	bl	8021190 <fiprintf>
 80210c4:	f000 f874 	bl	80211b0 <abort>
 80210c8:	200003cc 	.word	0x200003cc
 80210cc:	08023ca9 	.word	0x08023ca9
 80210d0:	08023ce4 	.word	0x08023ce4
 80210d4:	08023cb6 	.word	0x08023cb6

080210d8 <_calloc_r>:
 80210d8:	b570      	push	{r4, r5, r6, lr}
 80210da:	0c0b      	lsrs	r3, r1, #16
 80210dc:	0c15      	lsrs	r5, r2, #16
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d11e      	bne.n	8021120 <_calloc_r+0x48>
 80210e2:	2d00      	cmp	r5, #0
 80210e4:	d10c      	bne.n	8021100 <_calloc_r+0x28>
 80210e6:	b289      	uxth	r1, r1
 80210e8:	b294      	uxth	r4, r2
 80210ea:	434c      	muls	r4, r1
 80210ec:	0021      	movs	r1, r4
 80210ee:	f7fe fe53 	bl	801fd98 <_malloc_r>
 80210f2:	1e05      	subs	r5, r0, #0
 80210f4:	d01a      	beq.n	802112c <_calloc_r+0x54>
 80210f6:	0022      	movs	r2, r4
 80210f8:	2100      	movs	r1, #0
 80210fa:	f7fd fb0f 	bl	801e71c <memset>
 80210fe:	e016      	b.n	802112e <_calloc_r+0x56>
 8021100:	1c2b      	adds	r3, r5, #0
 8021102:	1c0c      	adds	r4, r1, #0
 8021104:	b289      	uxth	r1, r1
 8021106:	b292      	uxth	r2, r2
 8021108:	434a      	muls	r2, r1
 802110a:	b29b      	uxth	r3, r3
 802110c:	b2a1      	uxth	r1, r4
 802110e:	4359      	muls	r1, r3
 8021110:	0c14      	lsrs	r4, r2, #16
 8021112:	190c      	adds	r4, r1, r4
 8021114:	0c23      	lsrs	r3, r4, #16
 8021116:	d107      	bne.n	8021128 <_calloc_r+0x50>
 8021118:	0424      	lsls	r4, r4, #16
 802111a:	b292      	uxth	r2, r2
 802111c:	4314      	orrs	r4, r2
 802111e:	e7e5      	b.n	80210ec <_calloc_r+0x14>
 8021120:	2d00      	cmp	r5, #0
 8021122:	d101      	bne.n	8021128 <_calloc_r+0x50>
 8021124:	1c14      	adds	r4, r2, #0
 8021126:	e7ed      	b.n	8021104 <_calloc_r+0x2c>
 8021128:	230c      	movs	r3, #12
 802112a:	6003      	str	r3, [r0, #0]
 802112c:	2500      	movs	r5, #0
 802112e:	0028      	movs	r0, r5
 8021130:	bd70      	pop	{r4, r5, r6, pc}

08021132 <_realloc_r>:
 8021132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021134:	0006      	movs	r6, r0
 8021136:	000c      	movs	r4, r1
 8021138:	0015      	movs	r5, r2
 802113a:	2900      	cmp	r1, #0
 802113c:	d105      	bne.n	802114a <_realloc_r+0x18>
 802113e:	0011      	movs	r1, r2
 8021140:	f7fe fe2a 	bl	801fd98 <_malloc_r>
 8021144:	0004      	movs	r4, r0
 8021146:	0020      	movs	r0, r4
 8021148:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802114a:	2a00      	cmp	r2, #0
 802114c:	d103      	bne.n	8021156 <_realloc_r+0x24>
 802114e:	f7fe fa53 	bl	801f5f8 <_free_r>
 8021152:	2400      	movs	r4, #0
 8021154:	e7f7      	b.n	8021146 <_realloc_r+0x14>
 8021156:	f000 f832 	bl	80211be <_malloc_usable_size_r>
 802115a:	0007      	movs	r7, r0
 802115c:	4285      	cmp	r5, r0
 802115e:	d802      	bhi.n	8021166 <_realloc_r+0x34>
 8021160:	0843      	lsrs	r3, r0, #1
 8021162:	42ab      	cmp	r3, r5
 8021164:	d3ef      	bcc.n	8021146 <_realloc_r+0x14>
 8021166:	0029      	movs	r1, r5
 8021168:	0030      	movs	r0, r6
 802116a:	f7fe fe15 	bl	801fd98 <_malloc_r>
 802116e:	9001      	str	r0, [sp, #4]
 8021170:	2800      	cmp	r0, #0
 8021172:	d0ee      	beq.n	8021152 <_realloc_r+0x20>
 8021174:	002a      	movs	r2, r5
 8021176:	42bd      	cmp	r5, r7
 8021178:	d900      	bls.n	802117c <_realloc_r+0x4a>
 802117a:	003a      	movs	r2, r7
 802117c:	0021      	movs	r1, r4
 802117e:	9801      	ldr	r0, [sp, #4]
 8021180:	f7fd fba8 	bl	801e8d4 <memcpy>
 8021184:	0021      	movs	r1, r4
 8021186:	0030      	movs	r0, r6
 8021188:	f7fe fa36 	bl	801f5f8 <_free_r>
 802118c:	9c01      	ldr	r4, [sp, #4]
 802118e:	e7da      	b.n	8021146 <_realloc_r+0x14>

08021190 <fiprintf>:
 8021190:	b40e      	push	{r1, r2, r3}
 8021192:	b517      	push	{r0, r1, r2, r4, lr}
 8021194:	4c05      	ldr	r4, [pc, #20]	@ (80211ac <fiprintf+0x1c>)
 8021196:	ab05      	add	r3, sp, #20
 8021198:	cb04      	ldmia	r3!, {r2}
 802119a:	0001      	movs	r1, r0
 802119c:	6820      	ldr	r0, [r4, #0]
 802119e:	9301      	str	r3, [sp, #4]
 80211a0:	f7ff fcfa 	bl	8020b98 <_vfiprintf_r>
 80211a4:	bc1e      	pop	{r1, r2, r3, r4}
 80211a6:	bc08      	pop	{r3}
 80211a8:	b003      	add	sp, #12
 80211aa:	4718      	bx	r3
 80211ac:	200003cc 	.word	0x200003cc

080211b0 <abort>:
 80211b0:	2006      	movs	r0, #6
 80211b2:	b510      	push	{r4, lr}
 80211b4:	f000 f834 	bl	8021220 <raise>
 80211b8:	2001      	movs	r0, #1
 80211ba:	f7eb f9f1 	bl	800c5a0 <_exit>

080211be <_malloc_usable_size_r>:
 80211be:	1f0b      	subs	r3, r1, #4
 80211c0:	681b      	ldr	r3, [r3, #0]
 80211c2:	1f18      	subs	r0, r3, #4
 80211c4:	2b00      	cmp	r3, #0
 80211c6:	da01      	bge.n	80211cc <_malloc_usable_size_r+0xe>
 80211c8:	580b      	ldr	r3, [r1, r0]
 80211ca:	18c0      	adds	r0, r0, r3
 80211cc:	4770      	bx	lr

080211ce <_raise_r>:
 80211ce:	b570      	push	{r4, r5, r6, lr}
 80211d0:	0004      	movs	r4, r0
 80211d2:	000d      	movs	r5, r1
 80211d4:	291f      	cmp	r1, #31
 80211d6:	d904      	bls.n	80211e2 <_raise_r+0x14>
 80211d8:	2316      	movs	r3, #22
 80211da:	6003      	str	r3, [r0, #0]
 80211dc:	2001      	movs	r0, #1
 80211de:	4240      	negs	r0, r0
 80211e0:	bd70      	pop	{r4, r5, r6, pc}
 80211e2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d004      	beq.n	80211f2 <_raise_r+0x24>
 80211e8:	008a      	lsls	r2, r1, #2
 80211ea:	189b      	adds	r3, r3, r2
 80211ec:	681a      	ldr	r2, [r3, #0]
 80211ee:	2a00      	cmp	r2, #0
 80211f0:	d108      	bne.n	8021204 <_raise_r+0x36>
 80211f2:	0020      	movs	r0, r4
 80211f4:	f000 f830 	bl	8021258 <_getpid_r>
 80211f8:	002a      	movs	r2, r5
 80211fa:	0001      	movs	r1, r0
 80211fc:	0020      	movs	r0, r4
 80211fe:	f000 f819 	bl	8021234 <_kill_r>
 8021202:	e7ed      	b.n	80211e0 <_raise_r+0x12>
 8021204:	2a01      	cmp	r2, #1
 8021206:	d009      	beq.n	802121c <_raise_r+0x4e>
 8021208:	1c51      	adds	r1, r2, #1
 802120a:	d103      	bne.n	8021214 <_raise_r+0x46>
 802120c:	2316      	movs	r3, #22
 802120e:	6003      	str	r3, [r0, #0]
 8021210:	2001      	movs	r0, #1
 8021212:	e7e5      	b.n	80211e0 <_raise_r+0x12>
 8021214:	2100      	movs	r1, #0
 8021216:	0028      	movs	r0, r5
 8021218:	6019      	str	r1, [r3, #0]
 802121a:	4790      	blx	r2
 802121c:	2000      	movs	r0, #0
 802121e:	e7df      	b.n	80211e0 <_raise_r+0x12>

08021220 <raise>:
 8021220:	b510      	push	{r4, lr}
 8021222:	4b03      	ldr	r3, [pc, #12]	@ (8021230 <raise+0x10>)
 8021224:	0001      	movs	r1, r0
 8021226:	6818      	ldr	r0, [r3, #0]
 8021228:	f7ff ffd1 	bl	80211ce <_raise_r>
 802122c:	bd10      	pop	{r4, pc}
 802122e:	46c0      	nop			@ (mov r8, r8)
 8021230:	200003cc 	.word	0x200003cc

08021234 <_kill_r>:
 8021234:	2300      	movs	r3, #0
 8021236:	b570      	push	{r4, r5, r6, lr}
 8021238:	4d06      	ldr	r5, [pc, #24]	@ (8021254 <_kill_r+0x20>)
 802123a:	0004      	movs	r4, r0
 802123c:	0008      	movs	r0, r1
 802123e:	0011      	movs	r1, r2
 8021240:	602b      	str	r3, [r5, #0]
 8021242:	f7eb f99d 	bl	800c580 <_kill>
 8021246:	1c43      	adds	r3, r0, #1
 8021248:	d103      	bne.n	8021252 <_kill_r+0x1e>
 802124a:	682b      	ldr	r3, [r5, #0]
 802124c:	2b00      	cmp	r3, #0
 802124e:	d000      	beq.n	8021252 <_kill_r+0x1e>
 8021250:	6023      	str	r3, [r4, #0]
 8021252:	bd70      	pop	{r4, r5, r6, pc}
 8021254:	200038f4 	.word	0x200038f4

08021258 <_getpid_r>:
 8021258:	b510      	push	{r4, lr}
 802125a:	f7eb f98b 	bl	800c574 <_getpid>
 802125e:	bd10      	pop	{r4, pc}

08021260 <expf>:
 8021260:	b570      	push	{r4, r5, r6, lr}
 8021262:	1c04      	adds	r4, r0, #0
 8021264:	f000 f8e6 	bl	8021434 <__ieee754_expf>
 8021268:	1c05      	adds	r5, r0, #0
 802126a:	1c20      	adds	r0, r4, #0
 802126c:	f000 f83c 	bl	80212e8 <finitef>
 8021270:	2800      	cmp	r0, #0
 8021272:	d00b      	beq.n	802128c <expf+0x2c>
 8021274:	490c      	ldr	r1, [pc, #48]	@ (80212a8 <expf+0x48>)
 8021276:	1c20      	adds	r0, r4, #0
 8021278:	f7df f96e 	bl	8000558 <__aeabi_fcmpgt>
 802127c:	2800      	cmp	r0, #0
 802127e:	d007      	beq.n	8021290 <expf+0x30>
 8021280:	f7fd faf0 	bl	801e864 <__errno>
 8021284:	25ff      	movs	r5, #255	@ 0xff
 8021286:	2322      	movs	r3, #34	@ 0x22
 8021288:	05ed      	lsls	r5, r5, #23
 802128a:	6003      	str	r3, [r0, #0]
 802128c:	1c28      	adds	r0, r5, #0
 802128e:	bd70      	pop	{r4, r5, r6, pc}
 8021290:	4906      	ldr	r1, [pc, #24]	@ (80212ac <expf+0x4c>)
 8021292:	1c20      	adds	r0, r4, #0
 8021294:	f7df f94c 	bl	8000530 <__aeabi_fcmplt>
 8021298:	2800      	cmp	r0, #0
 802129a:	d0f7      	beq.n	802128c <expf+0x2c>
 802129c:	f7fd fae2 	bl	801e864 <__errno>
 80212a0:	2322      	movs	r3, #34	@ 0x22
 80212a2:	2500      	movs	r5, #0
 80212a4:	6003      	str	r3, [r0, #0]
 80212a6:	e7f1      	b.n	802128c <expf+0x2c>
 80212a8:	42b17217 	.word	0x42b17217
 80212ac:	c2cff1b5 	.word	0xc2cff1b5

080212b0 <sqrtf>:
 80212b0:	b570      	push	{r4, r5, r6, lr}
 80212b2:	1c05      	adds	r5, r0, #0
 80212b4:	f000 f822 	bl	80212fc <__ieee754_sqrtf>
 80212b8:	1c29      	adds	r1, r5, #0
 80212ba:	1c04      	adds	r4, r0, #0
 80212bc:	1c28      	adds	r0, r5, #0
 80212be:	f7e0 f951 	bl	8001564 <__aeabi_fcmpun>
 80212c2:	2800      	cmp	r0, #0
 80212c4:	d10e      	bne.n	80212e4 <sqrtf+0x34>
 80212c6:	2100      	movs	r1, #0
 80212c8:	1c28      	adds	r0, r5, #0
 80212ca:	f7df f931 	bl	8000530 <__aeabi_fcmplt>
 80212ce:	2800      	cmp	r0, #0
 80212d0:	d008      	beq.n	80212e4 <sqrtf+0x34>
 80212d2:	f7fd fac7 	bl	801e864 <__errno>
 80212d6:	2321      	movs	r3, #33	@ 0x21
 80212d8:	2100      	movs	r1, #0
 80212da:	6003      	str	r3, [r0, #0]
 80212dc:	1c08      	adds	r0, r1, #0
 80212de:	f7df fc79 	bl	8000bd4 <__aeabi_fdiv>
 80212e2:	1c04      	adds	r4, r0, #0
 80212e4:	1c20      	adds	r0, r4, #0
 80212e6:	bd70      	pop	{r4, r5, r6, pc}

080212e8 <finitef>:
 80212e8:	22ff      	movs	r2, #255	@ 0xff
 80212ea:	0043      	lsls	r3, r0, #1
 80212ec:	085b      	lsrs	r3, r3, #1
 80212ee:	2001      	movs	r0, #1
 80212f0:	05d2      	lsls	r2, r2, #23
 80212f2:	4293      	cmp	r3, r2
 80212f4:	db00      	blt.n	80212f8 <finitef+0x10>
 80212f6:	2000      	movs	r0, #0
 80212f8:	4770      	bx	lr
	...

080212fc <__ieee754_sqrtf>:
 80212fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80212fe:	0003      	movs	r3, r0
 8021300:	0042      	lsls	r2, r0, #1
 8021302:	1c04      	adds	r4, r0, #0
 8021304:	20ff      	movs	r0, #255	@ 0xff
 8021306:	0852      	lsrs	r2, r2, #1
 8021308:	05c0      	lsls	r0, r0, #23
 802130a:	4282      	cmp	r2, r0
 802130c:	d30a      	bcc.n	8021324 <__ieee754_sqrtf+0x28>
 802130e:	1c21      	adds	r1, r4, #0
 8021310:	1c20      	adds	r0, r4, #0
 8021312:	f7df fe45 	bl	8000fa0 <__aeabi_fmul>
 8021316:	1c01      	adds	r1, r0, #0
 8021318:	1c20      	adds	r0, r4, #0
 802131a:	f7df fad1 	bl	80008c0 <__aeabi_fadd>
 802131e:	1c04      	adds	r4, r0, #0
 8021320:	1c20      	adds	r0, r4, #0
 8021322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021324:	2a00      	cmp	r2, #0
 8021326:	d0fb      	beq.n	8021320 <__ieee754_sqrtf+0x24>
 8021328:	2c00      	cmp	r4, #0
 802132a:	da07      	bge.n	802133c <__ieee754_sqrtf+0x40>
 802132c:	1c21      	adds	r1, r4, #0
 802132e:	1c20      	adds	r0, r4, #0
 8021330:	f7df ff74 	bl	800121c <__aeabi_fsub>
 8021334:	1c01      	adds	r1, r0, #0
 8021336:	f7df fc4d 	bl	8000bd4 <__aeabi_fdiv>
 802133a:	e7f0      	b.n	802131e <__ieee754_sqrtf+0x22>
 802133c:	0022      	movs	r2, r4
 802133e:	15e1      	asrs	r1, r4, #23
 8021340:	4002      	ands	r2, r0
 8021342:	4204      	tst	r4, r0
 8021344:	d046      	beq.n	80213d4 <__ieee754_sqrtf+0xd8>
 8021346:	2280      	movs	r2, #128	@ 0x80
 8021348:	000f      	movs	r7, r1
 802134a:	025b      	lsls	r3, r3, #9
 802134c:	0a5b      	lsrs	r3, r3, #9
 802134e:	0412      	lsls	r2, r2, #16
 8021350:	3f7f      	subs	r7, #127	@ 0x7f
 8021352:	4313      	orrs	r3, r2
 8021354:	07c9      	lsls	r1, r1, #31
 8021356:	d400      	bmi.n	802135a <__ieee754_sqrtf+0x5e>
 8021358:	005b      	lsls	r3, r3, #1
 802135a:	2400      	movs	r4, #0
 802135c:	2180      	movs	r1, #128	@ 0x80
 802135e:	2019      	movs	r0, #25
 8021360:	0026      	movs	r6, r4
 8021362:	107f      	asrs	r7, r7, #1
 8021364:	005b      	lsls	r3, r3, #1
 8021366:	0449      	lsls	r1, r1, #17
 8021368:	1875      	adds	r5, r6, r1
 802136a:	001a      	movs	r2, r3
 802136c:	429d      	cmp	r5, r3
 802136e:	dc02      	bgt.n	8021376 <__ieee754_sqrtf+0x7a>
 8021370:	186e      	adds	r6, r5, r1
 8021372:	1b5a      	subs	r2, r3, r5
 8021374:	1864      	adds	r4, r4, r1
 8021376:	3801      	subs	r0, #1
 8021378:	0053      	lsls	r3, r2, #1
 802137a:	0849      	lsrs	r1, r1, #1
 802137c:	2800      	cmp	r0, #0
 802137e:	d1f3      	bne.n	8021368 <__ieee754_sqrtf+0x6c>
 8021380:	2a00      	cmp	r2, #0
 8021382:	d019      	beq.n	80213b8 <__ieee754_sqrtf+0xbc>
 8021384:	4d17      	ldr	r5, [pc, #92]	@ (80213e4 <__ieee754_sqrtf+0xe8>)
 8021386:	4e18      	ldr	r6, [pc, #96]	@ (80213e8 <__ieee754_sqrtf+0xec>)
 8021388:	6828      	ldr	r0, [r5, #0]
 802138a:	6831      	ldr	r1, [r6, #0]
 802138c:	682b      	ldr	r3, [r5, #0]
 802138e:	9301      	str	r3, [sp, #4]
 8021390:	f7df ff44 	bl	800121c <__aeabi_fsub>
 8021394:	1c01      	adds	r1, r0, #0
 8021396:	9801      	ldr	r0, [sp, #4]
 8021398:	f7df f8d4 	bl	8000544 <__aeabi_fcmple>
 802139c:	2800      	cmp	r0, #0
 802139e:	d00b      	beq.n	80213b8 <__ieee754_sqrtf+0xbc>
 80213a0:	6828      	ldr	r0, [r5, #0]
 80213a2:	6831      	ldr	r1, [r6, #0]
 80213a4:	f7df fa8c 	bl	80008c0 <__aeabi_fadd>
 80213a8:	682d      	ldr	r5, [r5, #0]
 80213aa:	1c01      	adds	r1, r0, #0
 80213ac:	1c28      	adds	r0, r5, #0
 80213ae:	f7df f8bf 	bl	8000530 <__aeabi_fcmplt>
 80213b2:	2800      	cmp	r0, #0
 80213b4:	d011      	beq.n	80213da <__ieee754_sqrtf+0xde>
 80213b6:	3402      	adds	r4, #2
 80213b8:	23fc      	movs	r3, #252	@ 0xfc
 80213ba:	1064      	asrs	r4, r4, #1
 80213bc:	059b      	lsls	r3, r3, #22
 80213be:	18e3      	adds	r3, r4, r3
 80213c0:	05fc      	lsls	r4, r7, #23
 80213c2:	18e4      	adds	r4, r4, r3
 80213c4:	e7ac      	b.n	8021320 <__ieee754_sqrtf+0x24>
 80213c6:	005b      	lsls	r3, r3, #1
 80213c8:	3201      	adds	r2, #1
 80213ca:	4203      	tst	r3, r0
 80213cc:	d0fb      	beq.n	80213c6 <__ieee754_sqrtf+0xca>
 80213ce:	3a01      	subs	r2, #1
 80213d0:	1a89      	subs	r1, r1, r2
 80213d2:	e7b8      	b.n	8021346 <__ieee754_sqrtf+0x4a>
 80213d4:	2080      	movs	r0, #128	@ 0x80
 80213d6:	0400      	lsls	r0, r0, #16
 80213d8:	e7f7      	b.n	80213ca <__ieee754_sqrtf+0xce>
 80213da:	2301      	movs	r3, #1
 80213dc:	3401      	adds	r4, #1
 80213de:	439c      	bics	r4, r3
 80213e0:	e7ea      	b.n	80213b8 <__ieee754_sqrtf+0xbc>
 80213e2:	46c0      	nop			@ (mov r8, r8)
 80213e4:	20000420 	.word	0x20000420
 80213e8:	2000041c 	.word	0x2000041c

080213ec <roundf>:
 80213ec:	0dc3      	lsrs	r3, r0, #23
 80213ee:	b2db      	uxtb	r3, r3
 80213f0:	3b7f      	subs	r3, #127	@ 0x7f
 80213f2:	0002      	movs	r2, r0
 80213f4:	b510      	push	{r4, lr}
 80213f6:	2b16      	cmp	r3, #22
 80213f8:	dc13      	bgt.n	8021422 <roundf+0x36>
 80213fa:	2b00      	cmp	r3, #0
 80213fc:	da07      	bge.n	802140e <roundf+0x22>
 80213fe:	0fc2      	lsrs	r2, r0, #31
 8021400:	07d0      	lsls	r0, r2, #31
 8021402:	3301      	adds	r3, #1
 8021404:	d102      	bne.n	802140c <roundf+0x20>
 8021406:	23fe      	movs	r3, #254	@ 0xfe
 8021408:	059b      	lsls	r3, r3, #22
 802140a:	4318      	orrs	r0, r3
 802140c:	bd10      	pop	{r4, pc}
 802140e:	4908      	ldr	r1, [pc, #32]	@ (8021430 <roundf+0x44>)
 8021410:	4119      	asrs	r1, r3
 8021412:	4208      	tst	r0, r1
 8021414:	d0fa      	beq.n	802140c <roundf+0x20>
 8021416:	2080      	movs	r0, #128	@ 0x80
 8021418:	03c0      	lsls	r0, r0, #15
 802141a:	4118      	asrs	r0, r3
 802141c:	1880      	adds	r0, r0, r2
 802141e:	4388      	bics	r0, r1
 8021420:	e7f4      	b.n	802140c <roundf+0x20>
 8021422:	2b80      	cmp	r3, #128	@ 0x80
 8021424:	d1f2      	bne.n	802140c <roundf+0x20>
 8021426:	1c01      	adds	r1, r0, #0
 8021428:	f7df fa4a 	bl	80008c0 <__aeabi_fadd>
 802142c:	e7ee      	b.n	802140c <roundf+0x20>
 802142e:	46c0      	nop			@ (mov r8, r8)
 8021430:	007fffff 	.word	0x007fffff

08021434 <__ieee754_expf>:
 8021434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021436:	21ff      	movs	r1, #255	@ 0xff
 8021438:	0043      	lsls	r3, r0, #1
 802143a:	1c04      	adds	r4, r0, #0
 802143c:	085b      	lsrs	r3, r3, #1
 802143e:	05c9      	lsls	r1, r1, #23
 8021440:	428b      	cmp	r3, r1
 8021442:	d904      	bls.n	802144e <__ieee754_expf+0x1a>
 8021444:	1c01      	adds	r1, r0, #0
 8021446:	1c20      	adds	r0, r4, #0
 8021448:	f7df fa3a 	bl	80008c0 <__aeabi_fadd>
 802144c:	e00d      	b.n	802146a <__ieee754_expf+0x36>
 802144e:	0fc6      	lsrs	r6, r0, #31
 8021450:	428b      	cmp	r3, r1
 8021452:	d104      	bne.n	802145e <__ieee754_expf+0x2a>
 8021454:	2e00      	cmp	r6, #0
 8021456:	d000      	beq.n	802145a <__ieee754_expf+0x26>
 8021458:	e0ba      	b.n	80215d0 <__ieee754_expf+0x19c>
 802145a:	1c20      	adds	r0, r4, #0
 802145c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802145e:	495d      	ldr	r1, [pc, #372]	@ (80215d4 <__ieee754_expf+0x1a0>)
 8021460:	4288      	cmp	r0, r1
 8021462:	dd04      	ble.n	802146e <__ieee754_expf+0x3a>
 8021464:	2000      	movs	r0, #0
 8021466:	f000 f8f1 	bl	802164c <__math_oflowf>
 802146a:	1c04      	adds	r4, r0, #0
 802146c:	e7f5      	b.n	802145a <__ieee754_expf+0x26>
 802146e:	2800      	cmp	r0, #0
 8021470:	da06      	bge.n	8021480 <__ieee754_expf+0x4c>
 8021472:	4a59      	ldr	r2, [pc, #356]	@ (80215d8 <__ieee754_expf+0x1a4>)
 8021474:	4293      	cmp	r3, r2
 8021476:	d903      	bls.n	8021480 <__ieee754_expf+0x4c>
 8021478:	2000      	movs	r0, #0
 802147a:	f000 f8e1 	bl	8021640 <__math_uflowf>
 802147e:	e7f4      	b.n	802146a <__ieee754_expf+0x36>
 8021480:	4a56      	ldr	r2, [pc, #344]	@ (80215dc <__ieee754_expf+0x1a8>)
 8021482:	4293      	cmp	r3, r2
 8021484:	d96e      	bls.n	8021564 <__ieee754_expf+0x130>
 8021486:	4a56      	ldr	r2, [pc, #344]	@ (80215e0 <__ieee754_expf+0x1ac>)
 8021488:	00b5      	lsls	r5, r6, #2
 802148a:	4293      	cmp	r3, r2
 802148c:	d84e      	bhi.n	802152c <__ieee754_expf+0xf8>
 802148e:	4b55      	ldr	r3, [pc, #340]	@ (80215e4 <__ieee754_expf+0x1b0>)
 8021490:	1c20      	adds	r0, r4, #0
 8021492:	5959      	ldr	r1, [r3, r5]
 8021494:	f7df fec2 	bl	800121c <__aeabi_fsub>
 8021498:	4b53      	ldr	r3, [pc, #332]	@ (80215e8 <__ieee754_expf+0x1b4>)
 802149a:	1c07      	adds	r7, r0, #0
 802149c:	595b      	ldr	r3, [r3, r5]
 802149e:	2501      	movs	r5, #1
 80214a0:	1bad      	subs	r5, r5, r6
 80214a2:	9300      	str	r3, [sp, #0]
 80214a4:	1bad      	subs	r5, r5, r6
 80214a6:	9900      	ldr	r1, [sp, #0]
 80214a8:	1c38      	adds	r0, r7, #0
 80214aa:	f7df feb7 	bl	800121c <__aeabi_fsub>
 80214ae:	1c04      	adds	r4, r0, #0
 80214b0:	1c21      	adds	r1, r4, #0
 80214b2:	1c20      	adds	r0, r4, #0
 80214b4:	f7df fd74 	bl	8000fa0 <__aeabi_fmul>
 80214b8:	494c      	ldr	r1, [pc, #304]	@ (80215ec <__ieee754_expf+0x1b8>)
 80214ba:	1c06      	adds	r6, r0, #0
 80214bc:	f7df fd70 	bl	8000fa0 <__aeabi_fmul>
 80214c0:	494b      	ldr	r1, [pc, #300]	@ (80215f0 <__ieee754_expf+0x1bc>)
 80214c2:	f7df feab 	bl	800121c <__aeabi_fsub>
 80214c6:	1c31      	adds	r1, r6, #0
 80214c8:	f7df fd6a 	bl	8000fa0 <__aeabi_fmul>
 80214cc:	4949      	ldr	r1, [pc, #292]	@ (80215f4 <__ieee754_expf+0x1c0>)
 80214ce:	f7df f9f7 	bl	80008c0 <__aeabi_fadd>
 80214d2:	1c31      	adds	r1, r6, #0
 80214d4:	f7df fd64 	bl	8000fa0 <__aeabi_fmul>
 80214d8:	4947      	ldr	r1, [pc, #284]	@ (80215f8 <__ieee754_expf+0x1c4>)
 80214da:	f7df fe9f 	bl	800121c <__aeabi_fsub>
 80214de:	1c31      	adds	r1, r6, #0
 80214e0:	f7df fd5e 	bl	8000fa0 <__aeabi_fmul>
 80214e4:	4945      	ldr	r1, [pc, #276]	@ (80215fc <__ieee754_expf+0x1c8>)
 80214e6:	f7df f9eb 	bl	80008c0 <__aeabi_fadd>
 80214ea:	1c31      	adds	r1, r6, #0
 80214ec:	f7df fd58 	bl	8000fa0 <__aeabi_fmul>
 80214f0:	1c01      	adds	r1, r0, #0
 80214f2:	1c20      	adds	r0, r4, #0
 80214f4:	f7df fe92 	bl	800121c <__aeabi_fsub>
 80214f8:	1c01      	adds	r1, r0, #0
 80214fa:	1c06      	adds	r6, r0, #0
 80214fc:	1c20      	adds	r0, r4, #0
 80214fe:	f7df fd4f 	bl	8000fa0 <__aeabi_fmul>
 8021502:	9001      	str	r0, [sp, #4]
 8021504:	2d00      	cmp	r5, #0
 8021506:	d140      	bne.n	802158a <__ieee754_expf+0x156>
 8021508:	2180      	movs	r1, #128	@ 0x80
 802150a:	1c30      	adds	r0, r6, #0
 802150c:	05c9      	lsls	r1, r1, #23
 802150e:	f7df fe85 	bl	800121c <__aeabi_fsub>
 8021512:	1c01      	adds	r1, r0, #0
 8021514:	9801      	ldr	r0, [sp, #4]
 8021516:	f7df fb5d 	bl	8000bd4 <__aeabi_fdiv>
 802151a:	1c21      	adds	r1, r4, #0
 802151c:	f7df fe7e 	bl	800121c <__aeabi_fsub>
 8021520:	1c01      	adds	r1, r0, #0
 8021522:	20fe      	movs	r0, #254	@ 0xfe
 8021524:	0580      	lsls	r0, r0, #22
 8021526:	f7df fe79 	bl	800121c <__aeabi_fsub>
 802152a:	e79e      	b.n	802146a <__ieee754_expf+0x36>
 802152c:	4934      	ldr	r1, [pc, #208]	@ (8021600 <__ieee754_expf+0x1cc>)
 802152e:	1c20      	adds	r0, r4, #0
 8021530:	f7df fd36 	bl	8000fa0 <__aeabi_fmul>
 8021534:	4b33      	ldr	r3, [pc, #204]	@ (8021604 <__ieee754_expf+0x1d0>)
 8021536:	5959      	ldr	r1, [r3, r5]
 8021538:	f7df f9c2 	bl	80008c0 <__aeabi_fadd>
 802153c:	f7e0 f828 	bl	8001590 <__aeabi_f2iz>
 8021540:	0005      	movs	r5, r0
 8021542:	f7e0 f845 	bl	80015d0 <__aeabi_i2f>
 8021546:	4930      	ldr	r1, [pc, #192]	@ (8021608 <__ieee754_expf+0x1d4>)
 8021548:	1c06      	adds	r6, r0, #0
 802154a:	f7df fd29 	bl	8000fa0 <__aeabi_fmul>
 802154e:	1c01      	adds	r1, r0, #0
 8021550:	1c20      	adds	r0, r4, #0
 8021552:	f7df fe63 	bl	800121c <__aeabi_fsub>
 8021556:	492d      	ldr	r1, [pc, #180]	@ (802160c <__ieee754_expf+0x1d8>)
 8021558:	1c07      	adds	r7, r0, #0
 802155a:	1c30      	adds	r0, r6, #0
 802155c:	f7df fd20 	bl	8000fa0 <__aeabi_fmul>
 8021560:	9000      	str	r0, [sp, #0]
 8021562:	e7a0      	b.n	80214a6 <__ieee754_expf+0x72>
 8021564:	22d0      	movs	r2, #208	@ 0xd0
 8021566:	0592      	lsls	r2, r2, #22
 8021568:	4293      	cmp	r3, r2
 802156a:	d20c      	bcs.n	8021586 <__ieee754_expf+0x152>
 802156c:	4928      	ldr	r1, [pc, #160]	@ (8021610 <__ieee754_expf+0x1dc>)
 802156e:	1c20      	adds	r0, r4, #0
 8021570:	f7df f9a6 	bl	80008c0 <__aeabi_fadd>
 8021574:	21fe      	movs	r1, #254	@ 0xfe
 8021576:	0589      	lsls	r1, r1, #22
 8021578:	f7de ffee 	bl	8000558 <__aeabi_fcmpgt>
 802157c:	1e05      	subs	r5, r0, #0
 802157e:	d097      	beq.n	80214b0 <__ieee754_expf+0x7c>
 8021580:	21fe      	movs	r1, #254	@ 0xfe
 8021582:	0589      	lsls	r1, r1, #22
 8021584:	e75f      	b.n	8021446 <__ieee754_expf+0x12>
 8021586:	2500      	movs	r5, #0
 8021588:	e792      	b.n	80214b0 <__ieee754_expf+0x7c>
 802158a:	2080      	movs	r0, #128	@ 0x80
 802158c:	1c31      	adds	r1, r6, #0
 802158e:	05c0      	lsls	r0, r0, #23
 8021590:	f7df fe44 	bl	800121c <__aeabi_fsub>
 8021594:	1c01      	adds	r1, r0, #0
 8021596:	9801      	ldr	r0, [sp, #4]
 8021598:	f7df fb1c 	bl	8000bd4 <__aeabi_fdiv>
 802159c:	1c01      	adds	r1, r0, #0
 802159e:	9800      	ldr	r0, [sp, #0]
 80215a0:	f7df fe3c 	bl	800121c <__aeabi_fsub>
 80215a4:	1c39      	adds	r1, r7, #0
 80215a6:	f7df fe39 	bl	800121c <__aeabi_fsub>
 80215aa:	1c01      	adds	r1, r0, #0
 80215ac:	20fe      	movs	r0, #254	@ 0xfe
 80215ae:	0580      	lsls	r0, r0, #22
 80215b0:	f7df fe34 	bl	800121c <__aeabi_fsub>
 80215b4:	002b      	movs	r3, r5
 80215b6:	337d      	adds	r3, #125	@ 0x7d
 80215b8:	db02      	blt.n	80215c0 <__ieee754_expf+0x18c>
 80215ba:	05ec      	lsls	r4, r5, #23
 80215bc:	1824      	adds	r4, r4, r0
 80215be:	e74c      	b.n	802145a <__ieee754_expf+0x26>
 80215c0:	21d8      	movs	r1, #216	@ 0xd8
 80215c2:	3564      	adds	r5, #100	@ 0x64
 80215c4:	05ed      	lsls	r5, r5, #23
 80215c6:	1828      	adds	r0, r5, r0
 80215c8:	0509      	lsls	r1, r1, #20
 80215ca:	f7df fce9 	bl	8000fa0 <__aeabi_fmul>
 80215ce:	e74c      	b.n	802146a <__ieee754_expf+0x36>
 80215d0:	2400      	movs	r4, #0
 80215d2:	e742      	b.n	802145a <__ieee754_expf+0x26>
 80215d4:	42b17217 	.word	0x42b17217
 80215d8:	42cff1b5 	.word	0x42cff1b5
 80215dc:	3eb17218 	.word	0x3eb17218
 80215e0:	3f851591 	.word	0x3f851591
 80215e4:	08023cf0 	.word	0x08023cf0
 80215e8:	08023ce8 	.word	0x08023ce8
 80215ec:	3331bb4c 	.word	0x3331bb4c
 80215f0:	35ddea0e 	.word	0x35ddea0e
 80215f4:	388ab355 	.word	0x388ab355
 80215f8:	3b360b61 	.word	0x3b360b61
 80215fc:	3e2aaaab 	.word	0x3e2aaaab
 8021600:	3fb8aa3b 	.word	0x3fb8aa3b
 8021604:	08023cf8 	.word	0x08023cf8
 8021608:	3f317180 	.word	0x3f317180
 802160c:	3717f7d1 	.word	0x3717f7d1
 8021610:	7149f2ca 	.word	0x7149f2ca

08021614 <with_errnof>:
 8021614:	b570      	push	{r4, r5, r6, lr}
 8021616:	000d      	movs	r5, r1
 8021618:	1c04      	adds	r4, r0, #0
 802161a:	f7fd f923 	bl	801e864 <__errno>
 802161e:	6005      	str	r5, [r0, #0]
 8021620:	1c20      	adds	r0, r4, #0
 8021622:	bd70      	pop	{r4, r5, r6, pc}

08021624 <xflowf>:
 8021624:	b510      	push	{r4, lr}
 8021626:	1c0b      	adds	r3, r1, #0
 8021628:	2800      	cmp	r0, #0
 802162a:	d002      	beq.n	8021632 <xflowf+0xe>
 802162c:	2380      	movs	r3, #128	@ 0x80
 802162e:	061b      	lsls	r3, r3, #24
 8021630:	18cb      	adds	r3, r1, r3
 8021632:	1c18      	adds	r0, r3, #0
 8021634:	f7df fcb4 	bl	8000fa0 <__aeabi_fmul>
 8021638:	2122      	movs	r1, #34	@ 0x22
 802163a:	f7ff ffeb 	bl	8021614 <with_errnof>
 802163e:	bd10      	pop	{r4, pc}

08021640 <__math_uflowf>:
 8021640:	2180      	movs	r1, #128	@ 0x80
 8021642:	b510      	push	{r4, lr}
 8021644:	0549      	lsls	r1, r1, #21
 8021646:	f7ff ffed 	bl	8021624 <xflowf>
 802164a:	bd10      	pop	{r4, pc}

0802164c <__math_oflowf>:
 802164c:	21e0      	movs	r1, #224	@ 0xe0
 802164e:	b510      	push	{r4, lr}
 8021650:	05c9      	lsls	r1, r1, #23
 8021652:	f7ff ffe7 	bl	8021624 <xflowf>
 8021656:	bd10      	pop	{r4, pc}

08021658 <_init>:
 8021658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802165a:	46c0      	nop			@ (mov r8, r8)
 802165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802165e:	bc08      	pop	{r3}
 8021660:	469e      	mov	lr, r3
 8021662:	4770      	bx	lr

08021664 <_fini>:
 8021664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021666:	46c0      	nop			@ (mov r8, r8)
 8021668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802166a:	bc08      	pop	{r3}
 802166c:	469e      	mov	lr, r3
 802166e:	4770      	bx	lr
