
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021e34  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002728  08021ef8  08021ef8  00022ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024620  08024620  00026420  2**0
                  CONTENTS
  4 .ARM          00000008  08024620  08024620  00025620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024628  08024628  00026420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024628  08024628  00025628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802462c  0802462c  0002562c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08024630  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034e0  20000420  08024a50  00026420  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  20003900  08024a50  00026900  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00026420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003493a  00000000  00000000  00026448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009800  00000000  00000000  0005ad82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b08  00000000  00000000  00064588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001fd1  00000000  00000000  00067090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023348  00000000  00000000  00069061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004325a  00000000  00000000  0008c3a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a051e  00000000  00000000  000cf603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  0016fb21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ae34  00000000  00000000  0016fbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0017aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0017aa75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0017cff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08021edc 	.word	0x08021edc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	08021edc 	.word	0x08021edc

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08023858 	.word	0x08023858
 8000e0c:	08023898 	.word	0x08023898
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080238d4 	.word	0x080238d4
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f00b fab8 	bl	800ebd8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f00b fb0f 	bl	800eca8 <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f00b fac2 	bl	800ec34 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f00b fa3e 	bl	800ebd8 <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f00b fa6d 	bl	800ec50 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f00b fa51 	bl	800ec34 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
static ESP_States EspState = ESP_STATE_INIT;
static AT_Mode Mode;
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000994 	.word	0x20000994

080037b0 <setESPTimeStamp>:

void setESPTimeStamp(uint32_t delayms) {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  ESPTimeStamp = HAL_GetTick() + delayms;
 80037b8:	f00a f9ee 	bl	800db98 <HAL_GetTick>
 80037bc:	0002      	movs	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	18d2      	adds	r2, r2, r3
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <setESPTimeStamp+0x20>)
 80037c4:	601a      	str	r2, [r3, #0]
//  ATExpectation = RECEIVE_EXPECTATION_OK;
//  ATCommand = AT_WAKEUP;
//  EspState = ESP_STATE_INIT;
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000990 	.word	0x20000990

080037d4 <setCharges>:
void setCharges(){
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037d8:	f002 fbcc 	bl	8005f74 <ReadBatteryVoltage>
 80037dc:	1c02      	adds	r2, r0, #0
 80037de:	4b05      	ldr	r3, [pc, #20]	@ (80037f4 <setCharges+0x20>)
 80037e0:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037e2:	f002 fc29 	bl	8006038 <ReadSolarVoltage>
 80037e6:	1c02      	adds	r2, r0, #0
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <setCharges+0x24>)
 80037ea:	601a      	str	r2, [r3, #0]
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	2000056c 	.word	0x2000056c
 80037f8:	20000570 	.word	0x20000570

080037fc <checkEEprom>:
bool checkEEprom(){
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003802:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <checkEEprom+0x5c>)
 8003804:	4815      	ldr	r0, [pc, #84]	@ (800385c <checkEEprom+0x60>)
 8003806:	220c      	movs	r2, #12
 8003808:	0019      	movs	r1, r3
 800380a:	f7ff ff75 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800380e:	1dfb      	adds	r3, r7, #7
 8003810:	2200      	movs	r2, #0
 8003812:	701a      	strb	r2, [r3, #0]
 8003814:	e00e      	b.n	8003834 <checkEEprom+0x38>
    configSum += tempConfig[i];
 8003816:	1dfb      	adds	r3, r7, #7
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4a0f      	ldr	r2, [pc, #60]	@ (8003858 <checkEEprom+0x5c>)
 800381c:	5cd3      	ldrb	r3, [r2, r3]
 800381e:	001a      	movs	r2, r3
 8003820:	4b0f      	ldr	r3, [pc, #60]	@ (8003860 <checkEEprom+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	18d2      	adds	r2, r2, r3
 8003826:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <checkEEprom+0x64>)
 8003828:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 800382a:	1dfb      	adds	r3, r7, #7
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	1dfb      	adds	r3, r7, #7
 8003830:	3201      	adds	r2, #1
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	1dfb      	adds	r3, r7, #7
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d9ec      	bls.n	8003816 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 800383c:	4b08      	ldr	r3, [pc, #32]	@ (8003860 <checkEEprom+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	425a      	negs	r2, r3
 8003842:	4153      	adcs	r3, r2
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b07      	ldr	r3, [pc, #28]	@ (8003864 <checkEEprom+0x68>)
 8003848:	701a      	strb	r2, [r3, #0]
  return test;
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <checkEEprom+0x68>)
 800384c:	781b      	ldrb	r3, [r3, #0]
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b002      	add	sp, #8
 8003854:	bd80      	pop	{r7, pc}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	200009a4 	.word	0x200009a4
 800385c:	0808000c 	.word	0x0808000c
 8003860:	200009b0 	.word	0x200009b0
 8003864:	200009b4 	.word	0x200009b4

08003868 <checkName>:
bool checkName(){
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <checkName+0x5c>)
 8003870:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <checkName+0x60>)
 8003872:	221e      	movs	r2, #30
 8003874:	0019      	movs	r1, r3
 8003876:	f7ff ff3f 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 800387a:	1dfb      	adds	r3, r7, #7
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
 8003880:	e00e      	b.n	80038a0 <checkName+0x38>
    configSum += nameConfig[i];
 8003882:	1dfb      	adds	r3, r7, #7
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <checkName+0x5c>)
 8003888:	5cd3      	ldrb	r3, [r2, r3]
 800388a:	001a      	movs	r2, r3
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <checkName+0x64>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	18d2      	adds	r2, r2, r3
 8003892:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <checkName+0x64>)
 8003894:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781a      	ldrb	r2, [r3, #0]
 800389a:	1dfb      	adds	r3, r7, #7
 800389c:	3201      	adds	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	1dfb      	adds	r3, r7, #7
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b0b      	cmp	r3, #11
 80038a6:	d9ec      	bls.n	8003882 <checkName+0x1a>
  }
  test = (configSum != 0);
 80038a8:	4b08      	ldr	r3, [pc, #32]	@ (80038cc <checkName+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1e5a      	subs	r2, r3, #1
 80038ae:	4193      	sbcs	r3, r2
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <checkName+0x68>)
 80038b4:	701a      	strb	r2, [r3, #0]
  return test;
 80038b6:	4b06      	ldr	r3, [pc, #24]	@ (80038d0 <checkName+0x68>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b002      	add	sp, #8
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			@ (mov r8, r8)
 80038c4:	200009b8 	.word	0x200009b8
 80038c8:	08080090 	.word	0x08080090
 80038cc:	200009d8 	.word	0x200009d8
 80038d0:	200009dc 	.word	0x200009dc

080038d4 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ESP_GetHT+0x20>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038e4:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <ESP_GetHT+0x24>)
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			@ (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	b002      	add	sp, #8
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	20000564 	.word	0x20000564
 80038f8:	20000568 	.word	0x20000568

080038fc <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	1dbb      	adds	r3, r7, #6
 8003908:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800390a:	4b07      	ldr	r3, [pc, #28]	@ (8003928 <setMeasurement+0x2c>)
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <setMeasurement+0x30>)
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <setMeasurement+0x34>)
 8003918:	1dba      	adds	r2, r7, #6
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	801a      	strh	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000564 	.word	0x20000564
 800392c:	20000568 	.word	0x20000568
 8003930:	20000574 	.word	0x20000574

08003934 <setMic>:
void setMic(float dB){
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  dBC = dB;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <setMic+0x18>)
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			@ (mov r8, r8)
 800394c:	20000578 	.word	0x20000578

08003950 <setPMs>:

void setPMs(uint16_t PM2, uint16_t PM10) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	0002      	movs	r2, r0
 8003958:	1dbb      	adds	r3, r7, #6
 800395a:	801a      	strh	r2, [r3, #0]
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	1c0a      	adds	r2, r1, #0
 8003960:	801a      	strh	r2, [r3, #0]
  airPM2 = PM2 / 10.0f;
 8003962:	1dbb      	adds	r3, r7, #6
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	0018      	movs	r0, r3
 8003968:	f7fd fe32 	bl	80015d0 <__aeabi_i2f>
 800396c:	1c03      	adds	r3, r0, #0
 800396e:	490d      	ldr	r1, [pc, #52]	@ (80039a4 <setPMs+0x54>)
 8003970:	1c18      	adds	r0, r3, #0
 8003972:	f7fd f92f 	bl	8000bd4 <__aeabi_fdiv>
 8003976:	1c03      	adds	r3, r0, #0
 8003978:	1c1a      	adds	r2, r3, #0
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <setPMs+0x58>)
 800397c:	601a      	str	r2, [r3, #0]
  airPM10 = PM10 / 10.0f;
 800397e:	1d3b      	adds	r3, r7, #4
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f7fd fe24 	bl	80015d0 <__aeabi_i2f>
 8003988:	1c03      	adds	r3, r0, #0
 800398a:	4906      	ldr	r1, [pc, #24]	@ (80039a4 <setPMs+0x54>)
 800398c:	1c18      	adds	r0, r3, #0
 800398e:	f7fd f921 	bl	8000bd4 <__aeabi_fdiv>
 8003992:	1c03      	adds	r3, r0, #0
 8003994:	1c1a      	adds	r2, r3, #0
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <setPMs+0x5c>)
 8003998:	601a      	str	r2, [r3, #0]
}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	41200000 	.word	0x41200000
 80039a8:	2000057c 	.word	0x2000057c
 80039ac:	20000580 	.word	0x20000580

080039b0 <SetConfigMode>:

void SetConfigMode(){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 80039b4:	4b02      	ldr	r3, [pc, #8]	@ (80039c0 <SetConfigMode+0x10>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000054b 	.word	0x2000054b

080039c4 <ESP_GetUID>:
//};


//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 80039c8:	f00a f930 	bl	800dc2c <HAL_GetUIDw0>
 80039cc:	0002      	movs	r2, r0
 80039ce:	4b07      	ldr	r3, [pc, #28]	@ (80039ec <ESP_GetUID+0x28>)
 80039d0:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 80039d2:	f00a f935 	bl	800dc40 <HAL_GetUIDw1>
 80039d6:	0002      	movs	r2, r0
 80039d8:	4b04      	ldr	r3, [pc, #16]	@ (80039ec <ESP_GetUID+0x28>)
 80039da:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 80039dc:	f00a f93a 	bl	800dc54 <HAL_GetUIDw2>
 80039e0:	0002      	movs	r2, r0
 80039e2:	4b02      	ldr	r3, [pc, #8]	@ (80039ec <ESP_GetUID+0x28>)
 80039e4:	609a      	str	r2, [r3, #8]
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000550 	.word	0x20000550

080039f0 <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80039f8:	4b08      	ldr	r3, [pc, #32]	@ (8003a1c <ESP_Init+0x2c>)
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80039fe:	4b08      	ldr	r3, [pc, #32]	@ (8003a20 <ESP_Init+0x30>)
 8003a00:	2202      	movs	r2, #2
 8003a02:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003a04:	f7ff ffde 	bl	80039c4 <ESP_GetUID>
  beurs = checkEEprom();
 8003a08:	f7ff fef8 	bl	80037fc <checkEEprom>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	001a      	movs	r2, r3
 8003a10:	4b04      	ldr	r3, [pc, #16]	@ (8003a24 <ESP_Init+0x34>)
 8003a12:	701a      	strb	r2, [r3, #0]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b002      	add	sp, #8
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000440 	.word	0x20000440
 8003a20:	20000028 	.word	0x20000028
 8003a24:	2000054e 	.word	0x2000054e

08003a28 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	000a      	movs	r2, r1
 8003a32:	1cbb      	adds	r3, r7, #2
 8003a34:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s\r\n", command);
#else
  Debug("ESP_Send: %s", command);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a10      	ldr	r2, [pc, #64]	@ (8003a7c <ESP_Send+0x54>)
 8003a3a:	4911      	ldr	r1, [pc, #68]	@ (8003a80 <ESP_Send+0x58>)
 8003a3c:	2003      	movs	r0, #3
 8003a3e:	f009 fd0d 	bl	800d45c <CreateLine>
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <ESP_Send+0x5c>)
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	250f      	movs	r5, #15
 8003a48:	197c      	adds	r4, r7, r5
 8003a4a:	1cbb      	adds	r3, r7, #2
 8003a4c:	881a      	ldrh	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0019      	movs	r1, r3
 8003a52:	f012 fb77 	bl	8016144 <HAL_UART_Transmit_DMA>
 8003a56:	0003      	movs	r3, r0
 8003a58:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 8003a62:	4a09      	ldr	r2, [pc, #36]	@ (8003a88 <ESP_Send+0x60>)
 8003a64:	4b09      	ldr	r3, [pc, #36]	@ (8003a8c <ESP_Send+0x64>)
 8003a66:	0019      	movs	r1, r3
 8003a68:	2001      	movs	r0, #1
 8003a6a:	f009 fcf7 	bl	800d45c <CreateLine>
    return false;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <ESP_Send+0x4c>
  }
  return true;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b004      	add	sp, #16
 8003a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7c:	08021ef8 	.word	0x08021ef8
 8003a80:	08021f08 	.word	0x08021f08
 8003a84:	20000440 	.word	0x20000440
 8003a88:	08021f0c 	.word	0x08021f0c
 8003a8c:	08021f2c 	.word	0x08021f2c

08003a90 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	000a      	movs	r2, r1
 8003a9a:	1cbb      	adds	r3, r7, #2
 8003a9c:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <ESP_Receive+0x5c>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <ESP_Receive+0x60>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	250f      	movs	r5, #15
 8003aaa:	197c      	adds	r4, r7, r5
 8003aac:	1cbb      	adds	r3, r7, #2
 8003aae:	881a      	ldrh	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	f012 fbd6 	bl	8016264 <HAL_UART_Receive_DMA>
 8003ab8:	0003      	movs	r3, r0
 8003aba:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003abc:	197b      	adds	r3, r7, r5
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <ESP_Receive+0x60>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2284      	movs	r2, #132	@ 0x84
 8003aca:	589b      	ldr	r3, [r3, r2]
 8003acc:	4a09      	ldr	r2, [pc, #36]	@ (8003af4 <ESP_Receive+0x64>)
 8003ace:	490a      	ldr	r1, [pc, #40]	@ (8003af8 <ESP_Receive+0x68>)
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f009 fcc3 	bl	800d45c <CreateLine>
    RxComplete = true;
 8003ad6:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <ESP_Receive+0x5c>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
    return false;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <ESP_Receive+0x52>
  }
  return true;
 8003ae0:	2301      	movs	r3, #1
}
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	b004      	add	sp, #16
 8003ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	20000444 	.word	0x20000444
 8003af0:	20000440 	.word	0x20000440
 8003af4:	08021f30 	.word	0x08021f30
 8003af8:	08021f2c 	.word	0x08021f2c

08003afc <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003b04:	4b0a      	ldr	r3, [pc, #40]	@ (8003b30 <HAL_UART_ErrorCallback+0x34>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d10c      	bne.n	8003b28 <HAL_UART_ErrorCallback+0x2c>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    if (huart->ErrorCode != 4) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2284      	movs	r2, #132	@ 0x84
 8003b12:	589b      	ldr	r3, [r3, r2]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d007      	beq.n	8003b28 <HAL_UART_ErrorCallback+0x2c>
      Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2284      	movs	r2, #132	@ 0x84
 8003b1c:	589b      	ldr	r3, [r3, r2]
 8003b1e:	4a05      	ldr	r2, [pc, #20]	@ (8003b34 <HAL_UART_ErrorCallback+0x38>)
 8003b20:	4905      	ldr	r1, [pc, #20]	@ (8003b38 <HAL_UART_ErrorCallback+0x3c>)
 8003b22:	2003      	movs	r0, #3
 8003b24:	f009 fc9a 	bl	800d45c <CreateLine>
    }
  }
}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000440 	.word	0x20000440
 8003b34:	08021f60 	.word	0x08021f60
 8003b38:	08021f08 	.word	0x08021f08

08003b3c <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e010      	b.n	8003b6e <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	001a      	movs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1898      	adds	r0, r3, r2
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	18d3      	adds	r3, r2, r3
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	001a      	movs	r2, r3
 8003b60:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <uint8ArrayToString+0x44>)
 8003b62:	0019      	movs	r1, r3
 8003b64:	f01b f8d8 	bl	801ed18 <siprintf>
  for (int i = 0; i < 12; i++)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b0b      	cmp	r3, #11
 8003b72:	ddeb      	ble.n	8003b4c <uint8ArrayToString+0x10>
  }
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	08021f8c 	.word	0x08021f8c

08003b84 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b86:	b089      	sub	sp, #36	@ 0x24
 8003b88:	af04      	add	r7, sp, #16
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	701a      	strb	r2, [r3, #0]
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t PM2Config[IdSize];
  static uint8_t PM10Config[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b90:	4be5      	ldr	r3, [pc, #916]	@ (8003f28 <CreateMessage+0x3a4>)
 8003b92:	48e6      	ldr	r0, [pc, #920]	@ (8003f2c <CreateMessage+0x3a8>)
 8003b94:	220c      	movs	r2, #12
 8003b96:	0019      	movs	r1, r3
 8003b98:	f7ff fdae 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b9c:	4be4      	ldr	r3, [pc, #912]	@ (8003f30 <CreateMessage+0x3ac>)
 8003b9e:	48e5      	ldr	r0, [pc, #916]	@ (8003f34 <CreateMessage+0x3b0>)
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	f7ff fda8 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003ba8:	4be3      	ldr	r3, [pc, #908]	@ (8003f38 <CreateMessage+0x3b4>)
 8003baa:	48e4      	ldr	r0, [pc, #912]	@ (8003f3c <CreateMessage+0x3b8>)
 8003bac:	220c      	movs	r2, #12
 8003bae:	0019      	movs	r1, r3
 8003bb0:	f7ff fda2 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003bb4:	4be2      	ldr	r3, [pc, #904]	@ (8003f40 <CreateMessage+0x3bc>)
 8003bb6:	48e3      	ldr	r0, [pc, #908]	@ (8003f44 <CreateMessage+0x3c0>)
 8003bb8:	220c      	movs	r2, #12
 8003bba:	0019      	movs	r1, r3
 8003bbc:	f7ff fd9c 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003bc0:	4be1      	ldr	r3, [pc, #900]	@ (8003f48 <CreateMessage+0x3c4>)
 8003bc2:	48e2      	ldr	r0, [pc, #904]	@ (8003f4c <CreateMessage+0x3c8>)
 8003bc4:	220c      	movs	r2, #12
 8003bc6:	0019      	movs	r1, r3
 8003bc8:	f7ff fd96 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003bcc:	4be0      	ldr	r3, [pc, #896]	@ (8003f50 <CreateMessage+0x3cc>)
 8003bce:	48e1      	ldr	r0, [pc, #900]	@ (8003f54 <CreateMessage+0x3d0>)
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	0019      	movs	r1, r3
 8003bd4:	f7ff fd90 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM2ConfigAddr, PM2Config, IdSize);
 8003bd8:	4bdf      	ldr	r3, [pc, #892]	@ (8003f58 <CreateMessage+0x3d4>)
 8003bda:	48e0      	ldr	r0, [pc, #896]	@ (8003f5c <CreateMessage+0x3d8>)
 8003bdc:	220c      	movs	r2, #12
 8003bde:	0019      	movs	r1, r3
 8003be0:	f7ff fd8a 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(PM10ConfigAddr, PM10Config, IdSize);
 8003be4:	4bde      	ldr	r3, [pc, #888]	@ (8003f60 <CreateMessage+0x3dc>)
 8003be6:	48df      	ldr	r0, [pc, #892]	@ (8003f64 <CreateMessage+0x3e0>)
 8003be8:	220c      	movs	r2, #12
 8003bea:	0019      	movs	r1, r3
 8003bec:	f7ff fd84 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003bf0:	f7ff fe3a 	bl	8003868 <checkName>
 8003bf4:	1e03      	subs	r3, r0, #0
 8003bf6:	d006      	beq.n	8003c06 <CreateMessage+0x82>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003bf8:	4bdb      	ldr	r3, [pc, #876]	@ (8003f68 <CreateMessage+0x3e4>)
 8003bfa:	48dc      	ldr	r0, [pc, #880]	@ (8003f6c <CreateMessage+0x3e8>)
 8003bfc:	221e      	movs	r2, #30
 8003bfe:	0019      	movs	r1, r3
 8003c00:	f7ff fd7a 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003c04:	e005      	b.n	8003c12 <CreateMessage+0x8e>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003c06:	4bd8      	ldr	r3, [pc, #864]	@ (8003f68 <CreateMessage+0x3e4>)
 8003c08:	4ad9      	ldr	r2, [pc, #868]	@ (8003f70 <CreateMessage+0x3ec>)
 8003c0a:	6811      	ldr	r1, [r2, #0]
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	7912      	ldrb	r2, [r2, #4]
 8003c10:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003c12:	f7ff fddf 	bl	80037d4 <setCharges>
#ifdef LONGDATAGRAM
  memset(message, '\0', 1024);
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	00da      	lsls	r2, r3, #3
 8003c1a:	4bd6      	ldr	r3, [pc, #856]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f01b f9be 	bl	801efa0 <memset>
  uint16_t index = 0;
 8003c24:	260e      	movs	r6, #14
 8003c26:	19bb      	adds	r3, r7, r6
 8003c28:	2200      	movs	r2, #0
 8003c2a:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003c2c:	19bb      	adds	r3, r7, r6
 8003c2e:	881a      	ldrh	r2, [r3, #0]
 8003c30:	4bd0      	ldr	r3, [pc, #832]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	4ad0      	ldr	r2, [pc, #832]	@ (8003f78 <CreateMessage+0x3f4>)
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f01b f86d 	bl	801ed18 <siprintf>
  index = strlen(message);
 8003c3e:	4bcd      	ldr	r3, [pc, #820]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fc fa93 	bl	800016c <strlen>
 8003c46:	0002      	movs	r2, r0
 8003c48:	19bb      	adds	r3, r7, r6
 8003c4a:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003c4c:	4ab6      	ldr	r2, [pc, #728]	@ (8003f28 <CreateMessage+0x3a4>)
 8003c4e:	4bcb      	ldr	r3, [pc, #812]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c50:	0011      	movs	r1, r2
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7ff ff72 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003c58:	19bb      	adds	r3, r7, r6
 8003c5a:	881a      	ldrh	r2, [r3, #0]
 8003c5c:	4bc5      	ldr	r3, [pc, #788]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c5e:	18d4      	adds	r4, r2, r3
 8003c60:	4bc7      	ldr	r3, [pc, #796]	@ (8003f80 <CreateMessage+0x3fc>)
 8003c62:	689d      	ldr	r5, [r3, #8]
 8003c64:	4bc7      	ldr	r3, [pc, #796]	@ (8003f84 <CreateMessage+0x400>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	1c18      	adds	r0, r3, #0
 8003c6a:	f7ff fbfb 	bl	8003464 <__aeabi_f2d>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	000b      	movs	r3, r1
 8003c72:	48bd      	ldr	r0, [pc, #756]	@ (8003f68 <CreateMessage+0x3e4>)
 8003c74:	49c4      	ldr	r1, [pc, #784]	@ (8003f88 <CreateMessage+0x404>)
 8003c76:	9202      	str	r2, [sp, #8]
 8003c78:	9303      	str	r3, [sp, #12]
 8003c7a:	4bc0      	ldr	r3, [pc, #768]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	0003      	movs	r3, r0
 8003c80:	002a      	movs	r2, r5
 8003c82:	0020      	movs	r0, r4
 8003c84:	f01b f848 	bl	801ed18 <siprintf>
  index = strlen(message);
 8003c88:	4bba      	ldr	r3, [pc, #744]	@ (8003f74 <CreateMessage+0x3f0>)
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7fc fa6e 	bl	800016c <strlen>
 8003c90:	0002      	movs	r2, r0
 8003c92:	19bb      	adds	r3, r7, r6
 8003c94:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003c96:	4aa6      	ldr	r2, [pc, #664]	@ (8003f30 <CreateMessage+0x3ac>)
 8003c98:	4bb8      	ldr	r3, [pc, #736]	@ (8003f7c <CreateMessage+0x3f8>)
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff ff4d 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003ca2:	19bb      	adds	r3, r7, r6
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	4bb3      	ldr	r3, [pc, #716]	@ (8003f74 <CreateMessage+0x3f0>)
 8003ca8:	18d4      	adds	r4, r2, r3
 8003caa:	4bb5      	ldr	r3, [pc, #724]	@ (8003f80 <CreateMessage+0x3fc>)
 8003cac:	689d      	ldr	r5, [r3, #8]
 8003cae:	4bb7      	ldr	r3, [pc, #732]	@ (8003f8c <CreateMessage+0x408>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	1c18      	adds	r0, r3, #0
 8003cb4:	f7ff fbd6 	bl	8003464 <__aeabi_f2d>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	000b      	movs	r3, r1
 8003cbc:	48aa      	ldr	r0, [pc, #680]	@ (8003f68 <CreateMessage+0x3e4>)
 8003cbe:	49b4      	ldr	r1, [pc, #720]	@ (8003f90 <CreateMessage+0x40c>)
 8003cc0:	9202      	str	r2, [sp, #8]
 8003cc2:	9303      	str	r3, [sp, #12]
 8003cc4:	4bad      	ldr	r3, [pc, #692]	@ (8003f7c <CreateMessage+0x3f8>)
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	0003      	movs	r3, r0
 8003cca:	002a      	movs	r2, r5
 8003ccc:	0020      	movs	r0, r4
 8003cce:	f01b f823 	bl	801ed18 <siprintf>
  index = strlen(message);
 8003cd2:	4ba8      	ldr	r3, [pc, #672]	@ (8003f74 <CreateMessage+0x3f0>)
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7fc fa49 	bl	800016c <strlen>
 8003cda:	0002      	movs	r2, r0
 8003cdc:	19bb      	adds	r3, r7, r6
 8003cde:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003ce0:	4a95      	ldr	r2, [pc, #596]	@ (8003f38 <CreateMessage+0x3b4>)
 8003ce2:	4ba6      	ldr	r3, [pc, #664]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ce4:	0011      	movs	r1, r2
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7ff ff28 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003cec:	19bb      	adds	r3, r7, r6
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	4ba0      	ldr	r3, [pc, #640]	@ (8003f74 <CreateMessage+0x3f0>)
 8003cf2:	18d4      	adds	r4, r2, r3
 8003cf4:	4ba2      	ldr	r3, [pc, #648]	@ (8003f80 <CreateMessage+0x3fc>)
 8003cf6:	689d      	ldr	r5, [r3, #8]
 8003cf8:	4ba6      	ldr	r3, [pc, #664]	@ (8003f94 <CreateMessage+0x410>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	1c18      	adds	r0, r3, #0
 8003cfe:	f7ff fbb1 	bl	8003464 <__aeabi_f2d>
 8003d02:	0002      	movs	r2, r0
 8003d04:	000b      	movs	r3, r1
 8003d06:	4898      	ldr	r0, [pc, #608]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d08:	49a3      	ldr	r1, [pc, #652]	@ (8003f98 <CreateMessage+0x414>)
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	9303      	str	r3, [sp, #12]
 8003d0e:	4b9b      	ldr	r3, [pc, #620]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	0003      	movs	r3, r0
 8003d14:	002a      	movs	r2, r5
 8003d16:	0020      	movs	r0, r4
 8003d18:	f01a fffe 	bl	801ed18 <siprintf>
  index = strlen(message);
 8003d1c:	4b95      	ldr	r3, [pc, #596]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7fc fa24 	bl	800016c <strlen>
 8003d24:	0002      	movs	r2, r0
 8003d26:	19bb      	adds	r3, r7, r6
 8003d28:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003d2a:	4a85      	ldr	r2, [pc, #532]	@ (8003f40 <CreateMessage+0x3bc>)
 8003d2c:	4b93      	ldr	r3, [pc, #588]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d2e:	0011      	movs	r1, r2
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff ff03 	bl	8003b3c <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003d36:	19bb      	adds	r3, r7, r6
 8003d38:	881a      	ldrh	r2, [r3, #0]
 8003d3a:	4b8e      	ldr	r3, [pc, #568]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d3c:	18d0      	adds	r0, r2, r3
 8003d3e:	4b90      	ldr	r3, [pc, #576]	@ (8003f80 <CreateMessage+0x3fc>)
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	4b96      	ldr	r3, [pc, #600]	@ (8003f9c <CreateMessage+0x418>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	4c88      	ldr	r4, [pc, #544]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d48:	4995      	ldr	r1, [pc, #596]	@ (8003fa0 <CreateMessage+0x41c>)
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	4b8b      	ldr	r3, [pc, #556]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	0023      	movs	r3, r4
 8003d52:	f01a ffe1 	bl	801ed18 <siprintf>
  index = strlen(message);
 8003d56:	4b87      	ldr	r3, [pc, #540]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7fc fa07 	bl	800016c <strlen>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	19bb      	adds	r3, r7, r6
 8003d62:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003d64:	1dfb      	adds	r3, r7, #7
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4053      	eors	r3, r2
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d100      	bne.n	8003d74 <CreateMessage+0x1f0>
 8003d72:	e094      	b.n	8003e9e <CreateMessage+0x31a>
    uint8ArrayToString(Buffer, batteryConfig);
 8003d74:	4a74      	ldr	r2, [pc, #464]	@ (8003f48 <CreateMessage+0x3c4>)
 8003d76:	4b81      	ldr	r3, [pc, #516]	@ (8003f7c <CreateMessage+0x3f8>)
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7ff fede 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d80:	19bb      	adds	r3, r7, r6
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	4b7b      	ldr	r3, [pc, #492]	@ (8003f74 <CreateMessage+0x3f0>)
 8003d86:	18d4      	adds	r4, r2, r3
 8003d88:	4b7d      	ldr	r3, [pc, #500]	@ (8003f80 <CreateMessage+0x3fc>)
 8003d8a:	689d      	ldr	r5, [r3, #8]
 8003d8c:	4b85      	ldr	r3, [pc, #532]	@ (8003fa4 <CreateMessage+0x420>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	1c18      	adds	r0, r3, #0
 8003d92:	f7ff fb67 	bl	8003464 <__aeabi_f2d>
 8003d96:	0002      	movs	r2, r0
 8003d98:	000b      	movs	r3, r1
 8003d9a:	4873      	ldr	r0, [pc, #460]	@ (8003f68 <CreateMessage+0x3e4>)
 8003d9c:	4982      	ldr	r1, [pc, #520]	@ (8003fa8 <CreateMessage+0x424>)
 8003d9e:	9202      	str	r2, [sp, #8]
 8003da0:	9303      	str	r3, [sp, #12]
 8003da2:	4b76      	ldr	r3, [pc, #472]	@ (8003f7c <CreateMessage+0x3f8>)
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	0003      	movs	r3, r0
 8003da8:	002a      	movs	r2, r5
 8003daa:	0020      	movs	r0, r4
 8003dac:	f01a ffb4 	bl	801ed18 <siprintf>
    index = strlen(message);
 8003db0:	4b70      	ldr	r3, [pc, #448]	@ (8003f74 <CreateMessage+0x3f0>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fc f9da 	bl	800016c <strlen>
 8003db8:	0002      	movs	r2, r0
 8003dba:	19bb      	adds	r3, r7, r6
 8003dbc:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003dbe:	4a64      	ldr	r2, [pc, #400]	@ (8003f50 <CreateMessage+0x3cc>)
 8003dc0:	4b6e      	ldr	r3, [pc, #440]	@ (8003f7c <CreateMessage+0x3f8>)
 8003dc2:	0011      	movs	r1, r2
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff feb9 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"Solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003dca:	19bb      	adds	r3, r7, r6
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	4b69      	ldr	r3, [pc, #420]	@ (8003f74 <CreateMessage+0x3f0>)
 8003dd0:	18d4      	adds	r4, r2, r3
 8003dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8003f80 <CreateMessage+0x3fc>)
 8003dd4:	689d      	ldr	r5, [r3, #8]
 8003dd6:	4b75      	ldr	r3, [pc, #468]	@ (8003fac <CreateMessage+0x428>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1c18      	adds	r0, r3, #0
 8003ddc:	f7ff fb42 	bl	8003464 <__aeabi_f2d>
 8003de0:	0002      	movs	r2, r0
 8003de2:	000b      	movs	r3, r1
 8003de4:	4860      	ldr	r0, [pc, #384]	@ (8003f68 <CreateMessage+0x3e4>)
 8003de6:	4972      	ldr	r1, [pc, #456]	@ (8003fb0 <CreateMessage+0x42c>)
 8003de8:	9202      	str	r2, [sp, #8]
 8003dea:	9303      	str	r3, [sp, #12]
 8003dec:	4b63      	ldr	r3, [pc, #396]	@ (8003f7c <CreateMessage+0x3f8>)
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	0003      	movs	r3, r0
 8003df2:	002a      	movs	r2, r5
 8003df4:	0020      	movs	r0, r4
 8003df6:	f01a ff8f 	bl	801ed18 <siprintf>
    index = strlen(message);
 8003dfa:	4b5e      	ldr	r3, [pc, #376]	@ (8003f74 <CreateMessage+0x3f0>)
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7fc f9b5 	bl	800016c <strlen>
 8003e02:	0002      	movs	r2, r0
 8003e04:	19bb      	adds	r3, r7, r6
 8003e06:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM2Config);
 8003e08:	4a53      	ldr	r2, [pc, #332]	@ (8003f58 <CreateMessage+0x3d4>)
 8003e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e0c:	0011      	movs	r1, r2
 8003e0e:	0018      	movs	r0, r3
 8003e10:	f7ff fe94 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM2.5\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"},", uid[2], (char*)nameConfig, Buffer, airPM2);
 8003e14:	19bb      	adds	r3, r7, r6
 8003e16:	881a      	ldrh	r2, [r3, #0]
 8003e18:	4b56      	ldr	r3, [pc, #344]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e1a:	18d4      	adds	r4, r2, r3
 8003e1c:	4b58      	ldr	r3, [pc, #352]	@ (8003f80 <CreateMessage+0x3fc>)
 8003e1e:	689d      	ldr	r5, [r3, #8]
 8003e20:	4b64      	ldr	r3, [pc, #400]	@ (8003fb4 <CreateMessage+0x430>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	1c18      	adds	r0, r3, #0
 8003e26:	f7ff fb1d 	bl	8003464 <__aeabi_f2d>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	000b      	movs	r3, r1
 8003e2e:	484e      	ldr	r0, [pc, #312]	@ (8003f68 <CreateMessage+0x3e4>)
 8003e30:	4961      	ldr	r1, [pc, #388]	@ (8003fb8 <CreateMessage+0x434>)
 8003e32:	9202      	str	r2, [sp, #8]
 8003e34:	9303      	str	r3, [sp, #12]
 8003e36:	4b51      	ldr	r3, [pc, #324]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	0003      	movs	r3, r0
 8003e3c:	002a      	movs	r2, r5
 8003e3e:	0020      	movs	r0, r4
 8003e40:	f01a ff6a 	bl	801ed18 <siprintf>
    index = strlen(message);
 8003e44:	4b4b      	ldr	r3, [pc, #300]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7fc f990 	bl	800016c <strlen>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	19bb      	adds	r3, r7, r6
 8003e50:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, PM10Config);
 8003e52:	4a43      	ldr	r2, [pc, #268]	@ (8003f60 <CreateMessage+0x3dc>)
 8003e54:	4b49      	ldr	r3, [pc, #292]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e56:	0011      	movs	r1, r2
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff fe6f 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"PM10\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"µg/m3\"}", uid[2], (char*)nameConfig, Buffer, airPM10);
 8003e5e:	19bb      	adds	r3, r7, r6
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	4b44      	ldr	r3, [pc, #272]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e64:	18d4      	adds	r4, r2, r3
 8003e66:	4b46      	ldr	r3, [pc, #280]	@ (8003f80 <CreateMessage+0x3fc>)
 8003e68:	689d      	ldr	r5, [r3, #8]
 8003e6a:	4b54      	ldr	r3, [pc, #336]	@ (8003fbc <CreateMessage+0x438>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1c18      	adds	r0, r3, #0
 8003e70:	f7ff faf8 	bl	8003464 <__aeabi_f2d>
 8003e74:	0002      	movs	r2, r0
 8003e76:	000b      	movs	r3, r1
 8003e78:	483b      	ldr	r0, [pc, #236]	@ (8003f68 <CreateMessage+0x3e4>)
 8003e7a:	4951      	ldr	r1, [pc, #324]	@ (8003fc0 <CreateMessage+0x43c>)
 8003e7c:	9202      	str	r2, [sp, #8]
 8003e7e:	9303      	str	r3, [sp, #12]
 8003e80:	4b3e      	ldr	r3, [pc, #248]	@ (8003f7c <CreateMessage+0x3f8>)
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	0003      	movs	r3, r0
 8003e86:	002a      	movs	r2, r5
 8003e88:	0020      	movs	r0, r4
 8003e8a:	f01a ff45 	bl	801ed18 <siprintf>
    index = strlen(message);
 8003e8e:	4b39      	ldr	r3, [pc, #228]	@ (8003f74 <CreateMessage+0x3f0>)
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fc f96b 	bl	800016c <strlen>
 8003e96:	0002      	movs	r2, r0
 8003e98:	19bb      	adds	r3, r7, r6
 8003e9a:	801a      	strh	r2, [r3, #0]
 8003e9c:	e025      	b.n	8003eea <CreateMessage+0x366>

  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f48 <CreateMessage+0x3c4>)
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7ff fe49 	bl	8003b3c <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003eaa:	260e      	movs	r6, #14
 8003eac:	19bb      	adds	r3, r7, r6
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <CreateMessage+0x3f0>)
 8003eb2:	18d4      	adds	r4, r2, r3
 8003eb4:	4b32      	ldr	r3, [pc, #200]	@ (8003f80 <CreateMessage+0x3fc>)
 8003eb6:	689d      	ldr	r5, [r3, #8]
 8003eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fa4 <CreateMessage+0x420>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	1c18      	adds	r0, r3, #0
 8003ebe:	f7ff fad1 	bl	8003464 <__aeabi_f2d>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	000b      	movs	r3, r1
 8003ec6:	4828      	ldr	r0, [pc, #160]	@ (8003f68 <CreateMessage+0x3e4>)
 8003ec8:	493e      	ldr	r1, [pc, #248]	@ (8003fc4 <CreateMessage+0x440>)
 8003eca:	9202      	str	r2, [sp, #8]
 8003ecc:	9303      	str	r3, [sp, #12]
 8003ece:	4b2b      	ldr	r3, [pc, #172]	@ (8003f7c <CreateMessage+0x3f8>)
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	002a      	movs	r2, r5
 8003ed6:	0020      	movs	r0, r4
 8003ed8:	f01a ff1e 	bl	801ed18 <siprintf>
    index = strlen(message);
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <CreateMessage+0x3f0>)
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f7fc f944 	bl	800016c <strlen>
 8003ee4:	0002      	movs	r2, r0
 8003ee6:	19bb      	adds	r3, r7, r6
 8003ee8:	801a      	strh	r2, [r3, #0]
    index = strlen(message);


    sprintf(&message[index], "{\"SolarVoltage\":%.2f}", solarCharge);
#endif
  Debug("Length of datagram: %d", index);
 8003eea:	240e      	movs	r4, #14
 8003eec:	193b      	adds	r3, r7, r4
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	4a35      	ldr	r2, [pc, #212]	@ (8003fc8 <CreateMessage+0x444>)
 8003ef2:	4936      	ldr	r1, [pc, #216]	@ (8003fcc <CreateMessage+0x448>)
 8003ef4:	2003      	movs	r0, #3
 8003ef6:	f009 fab1 	bl	800d45c <CreateLine>
  index = sprintf(&message[index], "]");
 8003efa:	193b      	adds	r3, r7, r4
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <CreateMessage+0x3f0>)
 8003f00:	18d3      	adds	r3, r2, r3
 8003f02:	4a33      	ldr	r2, [pc, #204]	@ (8003fd0 <CreateMessage+0x44c>)
 8003f04:	0011      	movs	r1, r2
 8003f06:	0018      	movs	r0, r3
 8003f08:	f01a ff06 	bl	801ed18 <siprintf>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	193b      	adds	r3, r7, r4
 8003f10:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003f12:	4b18      	ldr	r3, [pc, #96]	@ (8003f74 <CreateMessage+0x3f0>)
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fc f929 	bl	800016c <strlen>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	b29b      	uxth	r3, r3
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b005      	add	sp, #20
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f26:	46c0      	nop			@ (mov r8, r8)
 8003f28:	200009e0 	.word	0x200009e0
 8003f2c:	0808000c 	.word	0x0808000c
 8003f30:	200009ec 	.word	0x200009ec
 8003f34:	08080018 	.word	0x08080018
 8003f38:	200009f8 	.word	0x200009f8
 8003f3c:	08080048 	.word	0x08080048
 8003f40:	20000a04 	.word	0x20000a04
 8003f44:	08080030 	.word	0x08080030
 8003f48:	20000a10 	.word	0x20000a10
 8003f4c:	0808006c 	.word	0x0808006c
 8003f50:	20000a1c 	.word	0x20000a1c
 8003f54:	08080078 	.word	0x08080078
 8003f58:	20000a28 	.word	0x20000a28
 8003f5c:	08080054 	.word	0x08080054
 8003f60:	20000a34 	.word	0x20000a34
 8003f64:	08080060 	.word	0x08080060
 8003f68:	20000a40 	.word	0x20000a40
 8003f6c:	08080090 	.word	0x08080090
 8003f70:	08023938 	.word	0x08023938
 8003f74:	20000584 	.word	0x20000584
 8003f78:	08021f94 	.word	0x08021f94
 8003f7c:	20000a60 	.word	0x20000a60
 8003f80:	20000550 	.word	0x20000550
 8003f84:	20000564 	.word	0x20000564
 8003f88:	08021f98 	.word	0x08021f98
 8003f8c:	20000568 	.word	0x20000568
 8003f90:	08021fec 	.word	0x08021fec
 8003f94:	20000578 	.word	0x20000578
 8003f98:	08022044 	.word	0x08022044
 8003f9c:	20000574 	.word	0x20000574
 8003fa0:	080220a0 	.word	0x080220a0
 8003fa4:	2000056c 	.word	0x2000056c
 8003fa8:	080220f4 	.word	0x080220f4
 8003fac:	20000570 	.word	0x20000570
 8003fb0:	08022154 	.word	0x08022154
 8003fb4:	2000057c 	.word	0x2000057c
 8003fb8:	080221b4 	.word	0x080221b4
 8003fbc:	20000580 	.word	0x20000580
 8003fc0:	08022210 	.word	0x08022210
 8003fc4:	08022268 	.word	0x08022268
 8003fc8:	080222c0 	.word	0x080222c0
 8003fcc:	08021f08 	.word	0x08021f08
 8003fd0:	080222d8 	.word	0x080222d8

08003fd4 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003fd8:	2064      	movs	r0, #100	@ 0x64
 8003fda:	f009 fde7 	bl	800dbac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <StartProg+0x60>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f00b f852 	bl	800f08e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003fea:	2064      	movs	r0, #100	@ 0x64
 8003fec:	f009 fdde 	bl	800dbac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003ff0:	4b10      	ldr	r3, [pc, #64]	@ (8004034 <StartProg+0x60>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f00b f849 	bl	800f08e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003ffc:	23fa      	movs	r3, #250	@ 0xfa
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	0018      	movs	r0, r3
 8004002:	f009 fdd3 	bl	800dbac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <StartProg+0x60>)
 8004008:	2201      	movs	r2, #1
 800400a:	2101      	movs	r1, #1
 800400c:	0018      	movs	r0, r3
 800400e:	f00b f83e 	bl	800f08e <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8004012:	23fa      	movs	r3, #250	@ 0xfa
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	0018      	movs	r0, r3
 8004018:	f009 fdc8 	bl	800dbac <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 800401c:	4b05      	ldr	r3, [pc, #20]	@ (8004034 <StartProg+0x60>)
 800401e:	2201      	movs	r2, #1
 8004020:	2102      	movs	r1, #2
 8004022:	0018      	movs	r0, r3
 8004024:	f00b f833 	bl	800f08e <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8004028:	2028      	movs	r0, #40	@ 0x28
 800402a:	f009 fdbf 	bl	800dbac <HAL_Delay>
}
 800402e:	46c0      	nop			@ (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	50001c00 	.word	0x50001c00

08004038 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8004038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403a:	b0d9      	sub	sp, #356	@ 0x164
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	0008      	movs	r0, r1
 8004042:	0011      	movs	r1, r2
 8004044:	4ba1      	ldr	r3, [pc, #644]	@ (80042cc <ParseBuffer+0x294>)
 8004046:	24b0      	movs	r4, #176	@ 0xb0
 8004048:	0064      	lsls	r4, r4, #1
 800404a:	191b      	adds	r3, r3, r4
 800404c:	19db      	adds	r3, r3, r7
 800404e:	1c02      	adds	r2, r0, #0
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	4b9f      	ldr	r3, [pc, #636]	@ (80042d0 <ParseBuffer+0x298>)
 8004054:	191b      	adds	r3, r3, r4
 8004056:	19db      	adds	r3, r3, r7
 8004058:	1c0a      	adds	r2, r1, #0
 800405a:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 800405c:	2380      	movs	r3, #128	@ 0x80
 800405e:	005a      	lsls	r2, r3, #1
 8004060:	2348      	movs	r3, #72	@ 0x48
 8004062:	18fb      	adds	r3, r7, r3
 8004064:	2100      	movs	r1, #0
 8004066:	0018      	movs	r0, r3
 8004068:	f01a ff9a 	bl	801efa0 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 800406c:	2360      	movs	r3, #96	@ 0x60
 800406e:	33ff      	adds	r3, #255	@ 0xff
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2203      	movs	r2, #3
 8004074:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8004076:	23ae      	movs	r3, #174	@ 0xae
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2200      	movs	r2, #0
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e013      	b.n	80040aa <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8004082:	20ae      	movs	r0, #174	@ 0xae
 8004084:	0040      	lsls	r0, r0, #1
 8004086:	183b      	adds	r3, r7, r0
 8004088:	881b      	ldrh	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	18d2      	adds	r2, r2, r3
 800408e:	183b      	adds	r3, r7, r0
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	7811      	ldrb	r1, [r2, #0]
 8004094:	4a8f      	ldr	r2, [pc, #572]	@ (80042d4 <ParseBuffer+0x29c>)
 8004096:	24b0      	movs	r4, #176	@ 0xb0
 8004098:	0064      	lsls	r4, r4, #1
 800409a:	1912      	adds	r2, r2, r4
 800409c:	19d2      	adds	r2, r2, r7
 800409e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80040a0:	183b      	adds	r3, r7, r0
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	183b      	adds	r3, r7, r0
 80040a6:	3201      	adds	r2, #1
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	23ae      	movs	r3, #174	@ 0xae
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	18fa      	adds	r2, r7, r3
 80040b0:	4b86      	ldr	r3, [pc, #536]	@ (80042cc <ParseBuffer+0x294>)
 80040b2:	24b0      	movs	r4, #176	@ 0xb0
 80040b4:	0064      	lsls	r4, r4, #1
 80040b6:	191b      	adds	r3, r3, r4
 80040b8:	19db      	adds	r3, r3, r7
 80040ba:	8812      	ldrh	r2, [r2, #0]
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d3df      	bcc.n	8004082 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 80040c2:	4b82      	ldr	r3, [pc, #520]	@ (80042cc <ParseBuffer+0x294>)
 80040c4:	191b      	adds	r3, r3, r4
 80040c6:	19db      	adds	r3, r3, r7
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	4a82      	ldr	r2, [pc, #520]	@ (80042d4 <ParseBuffer+0x29c>)
 80040cc:	1912      	adds	r2, r2, r4
 80040ce:	19d2      	adds	r2, r2, r7
 80040d0:	2100      	movs	r1, #0
 80040d2:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
 80040d4:	2648      	movs	r6, #72	@ 0x48
 80040d6:	19bb      	adds	r3, r7, r6
 80040d8:	4a7f      	ldr	r2, [pc, #508]	@ (80042d8 <ParseBuffer+0x2a0>)
 80040da:	4980      	ldr	r1, [pc, #512]	@ (80042dc <ParseBuffer+0x2a4>)
 80040dc:	2003      	movs	r0, #3
 80040de:	f009 f9bd 	bl	800d45c <CreateLine>
#endif
  char * ParsePoint = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	22ac      	movs	r2, #172	@ 0xac
 80040e6:	0052      	lsls	r2, r2, #1
 80040e8:	18b9      	adds	r1, r7, r2
 80040ea:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 80040ec:	4b7c      	ldr	r3, [pc, #496]	@ (80042e0 <ParseBuffer+0x2a8>)
 80040ee:	0025      	movs	r5, r4
 80040f0:	195b      	adds	r3, r3, r5
 80040f2:	19db      	adds	r3, r3, r7
 80040f4:	4a7b      	ldr	r2, [pc, #492]	@ (80042e4 <ParseBuffer+0x2ac>)
 80040f6:	8811      	ldrh	r1, [r2, #0]
 80040f8:	8019      	strh	r1, [r3, #0]
 80040fa:	7892      	ldrb	r2, [r2, #2]
 80040fc:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 80040fe:	4b7a      	ldr	r3, [pc, #488]	@ (80042e8 <ParseBuffer+0x2b0>)
 8004100:	195b      	adds	r3, r3, r5
 8004102:	19db      	adds	r3, r3, r7
 8004104:	4a79      	ldr	r2, [pc, #484]	@ (80042ec <ParseBuffer+0x2b4>)
 8004106:	6811      	ldr	r1, [r2, #0]
 8004108:	6019      	str	r1, [r3, #0]
 800410a:	8892      	ldrh	r2, [r2, #4]
 800410c:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 800410e:	4b78      	ldr	r3, [pc, #480]	@ (80042f0 <ParseBuffer+0x2b8>)
 8004110:	195b      	adds	r3, r3, r5
 8004112:	19db      	adds	r3, r3, r7
 8004114:	4a77      	ldr	r2, [pc, #476]	@ (80042f4 <ParseBuffer+0x2bc>)
 8004116:	6811      	ldr	r1, [r2, #0]
 8004118:	6019      	str	r1, [r3, #0]
 800411a:	7912      	ldrb	r2, [r2, #4]
 800411c:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800411e:	4b76      	ldr	r3, [pc, #472]	@ (80042f8 <ParseBuffer+0x2c0>)
 8004120:	195b      	adds	r3, r3, r5
 8004122:	19db      	adds	r3, r3, r7
 8004124:	4a75      	ldr	r2, [pc, #468]	@ (80042fc <ParseBuffer+0x2c4>)
 8004126:	6811      	ldr	r1, [r2, #0]
 8004128:	6019      	str	r1, [r3, #0]
 800412a:	8892      	ldrh	r2, [r2, #4]
 800412c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800412e:	4b74      	ldr	r3, [pc, #464]	@ (8004300 <ParseBuffer+0x2c8>)
 8004130:	195b      	adds	r3, r3, r5
 8004132:	19db      	adds	r3, r3, r7
 8004134:	223e      	movs	r2, #62	@ 0x3e
 8004136:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8004138:	4b72      	ldr	r3, [pc, #456]	@ (8004304 <ParseBuffer+0x2cc>)
 800413a:	195b      	adds	r3, r3, r5
 800413c:	19db      	adds	r3, r3, r7
 800413e:	4a72      	ldr	r2, [pc, #456]	@ (8004308 <ParseBuffer+0x2d0>)
 8004140:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004142:	c313      	stmia	r3!, {r0, r1, r4}
 8004144:	8811      	ldrh	r1, [r2, #0]
 8004146:	8019      	strh	r1, [r3, #0]
 8004148:	7892      	ldrb	r2, [r2, #2]
 800414a:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 800414c:	4b6f      	ldr	r3, [pc, #444]	@ (800430c <ParseBuffer+0x2d4>)
 800414e:	195b      	adds	r3, r3, r5
 8004150:	19db      	adds	r3, r3, r7
 8004152:	4a6f      	ldr	r2, [pc, #444]	@ (8004310 <ParseBuffer+0x2d8>)
 8004154:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004156:	c313      	stmia	r3!, {r0, r1, r4}
 8004158:	8812      	ldrh	r2, [r2, #0]
 800415a:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800415c:	4b5c      	ldr	r3, [pc, #368]	@ (80042d0 <ParseBuffer+0x298>)
 800415e:	195b      	adds	r3, r3, r5
 8004160:	19db      	adds	r3, r3, r7
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 8004168:	2344      	movs	r3, #68	@ 0x44
 800416a:	18fa      	adds	r2, r7, r3
 800416c:	19bb      	adds	r3, r7, r6
 800416e:	0011      	movs	r1, r2
 8004170:	0018      	movs	r0, r3
 8004172:	f01a ff50 	bl	801f016 <strstr>
 8004176:	0003      	movs	r3, r0
 8004178:	22ac      	movs	r2, #172	@ 0xac
 800417a:	0052      	lsls	r2, r2, #1
 800417c:	18ba      	adds	r2, r7, r2
 800417e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004180:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <ParseBuffer+0x298>)
 8004182:	22b0      	movs	r2, #176	@ 0xb0
 8004184:	0052      	lsls	r2, r2, #1
 8004186:	189b      	adds	r3, r3, r2
 8004188:	19db      	adds	r3, r3, r7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10c      	bne.n	80041aa <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004190:	232c      	movs	r3, #44	@ 0x2c
 8004192:	18fa      	adds	r2, r7, r3
 8004194:	2348      	movs	r3, #72	@ 0x48
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	0011      	movs	r1, r2
 800419a:	0018      	movs	r0, r3
 800419c:	f01a ff3b 	bl	801f016 <strstr>
 80041a0:	0003      	movs	r3, r0
 80041a2:	22ac      	movs	r2, #172	@ 0xac
 80041a4:	0052      	lsls	r2, r2, #1
 80041a6:	18ba      	adds	r2, r7, r2
 80041a8:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 80041aa:	4b49      	ldr	r3, [pc, #292]	@ (80042d0 <ParseBuffer+0x298>)
 80041ac:	22b0      	movs	r2, #176	@ 0xb0
 80041ae:	0052      	lsls	r2, r2, #1
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d10c      	bne.n	80041d4 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 80041ba:	2328      	movs	r3, #40	@ 0x28
 80041bc:	18fa      	adds	r2, r7, r3
 80041be:	2348      	movs	r3, #72	@ 0x48
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f01a ff26 	bl	801f016 <strstr>
 80041ca:	0003      	movs	r3, r0
 80041cc:	22ac      	movs	r2, #172	@ 0xac
 80041ce:	0052      	lsls	r2, r2, #1
 80041d0:	18ba      	adds	r2, r7, r2
 80041d2:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 80041d4:	4b3e      	ldr	r3, [pc, #248]	@ (80042d0 <ParseBuffer+0x298>)
 80041d6:	22b0      	movs	r2, #176	@ 0xb0
 80041d8:	0052      	lsls	r2, r2, #1
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	d10c      	bne.n	80041fe <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 80041e4:	2308      	movs	r3, #8
 80041e6:	18fa      	adds	r2, r7, r3
 80041e8:	2348      	movs	r3, #72	@ 0x48
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	0011      	movs	r1, r2
 80041ee:	0018      	movs	r0, r3
 80041f0:	f01a ff11 	bl	801f016 <strstr>
 80041f4:	0003      	movs	r3, r0
 80041f6:	22ac      	movs	r2, #172	@ 0xac
 80041f8:	0052      	lsls	r2, r2, #1
 80041fa:	18ba      	adds	r2, r7, r2
 80041fc:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 80041fe:	233c      	movs	r3, #60	@ 0x3c
 8004200:	18fa      	adds	r2, r7, r3
 8004202:	2448      	movs	r4, #72	@ 0x48
 8004204:	193b      	adds	r3, r7, r4
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f01a ff04 	bl	801f016 <strstr>
 800420e:	0003      	movs	r3, r0
 8004210:	22aa      	movs	r2, #170	@ 0xaa
 8004212:	0052      	lsls	r2, r2, #1
 8004214:	18ba      	adds	r2, r7, r2
 8004216:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 8004218:	2318      	movs	r3, #24
 800421a:	18fa      	adds	r2, r7, r3
 800421c:	193b      	adds	r3, r7, r4
 800421e:	0011      	movs	r1, r2
 8004220:	0018      	movs	r0, r3
 8004222:	f01a fef8 	bl	801f016 <strstr>
 8004226:	0003      	movs	r3, r0
 8004228:	22a8      	movs	r2, #168	@ 0xa8
 800422a:	0052      	lsls	r2, r2, #1
 800422c:	18ba      	adds	r2, r7, r2
 800422e:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 8004230:	4a38      	ldr	r2, [pc, #224]	@ (8004314 <ParseBuffer+0x2dc>)
 8004232:	193b      	adds	r3, r7, r4
 8004234:	0011      	movs	r1, r2
 8004236:	0018      	movs	r0, r3
 8004238:	f01a feed 	bl	801f016 <strstr>
 800423c:	0003      	movs	r3, r0
 800423e:	22a6      	movs	r2, #166	@ 0xa6
 8004240:	0052      	lsls	r2, r2, #1
 8004242:	18ba      	adds	r2, r7, r2
 8004244:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 8004246:	2334      	movs	r3, #52	@ 0x34
 8004248:	18fa      	adds	r2, r7, r3
 800424a:	193b      	adds	r3, r7, r4
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f01a fee1 	bl	801f016 <strstr>
 8004254:	0003      	movs	r3, r0
 8004256:	22a4      	movs	r2, #164	@ 0xa4
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	18ba      	adds	r2, r7, r2
 800425c:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 800425e:	4b1b      	ldr	r3, [pc, #108]	@ (80042cc <ParseBuffer+0x294>)
 8004260:	21b0      	movs	r1, #176	@ 0xb0
 8004262:	0049      	lsls	r1, r1, #1
 8004264:	185b      	adds	r3, r3, r1
 8004266:	19db      	adds	r3, r3, r7
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d800      	bhi.n	8004270 <ParseBuffer+0x238>
 800426e:	e0c0      	b.n	80043f2 <ParseBuffer+0x3ba>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004270:	22ac      	movs	r2, #172	@ 0xac
 8004272:	0052      	lsls	r2, r2, #1
 8004274:	18bb      	adds	r3, r7, r2
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d053      	beq.n	8004324 <ParseBuffer+0x2ec>
 800427c:	18bb      	adds	r3, r7, r2
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b4f      	cmp	r3, #79	@ 0x4f
 8004284:	d14e      	bne.n	8004324 <ParseBuffer+0x2ec>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004286:	2360      	movs	r3, #96	@ 0x60
 8004288:	33ff      	adds	r3, #255	@ 0xff
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004290:	4b21      	ldr	r3, [pc, #132]	@ (8004318 <ParseBuffer+0x2e0>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b12      	cmp	r3, #18
 8004296:	d145      	bne.n	8004324 <ParseBuffer+0x2ec>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <ParseBuffer+0x294>)
 800429a:	185b      	adds	r3, r3, r1
 800429c:	19db      	adds	r3, r3, r7
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	2b2b      	cmp	r3, #43	@ 0x2b
 80042a2:	d10b      	bne.n	80042bc <ParseBuffer+0x284>
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <ParseBuffer+0x29c>)
 80042a6:	185b      	adds	r3, r3, r1
 80042a8:	19db      	adds	r3, r3, r7
 80042aa:	2221      	movs	r2, #33	@ 0x21
 80042ac:	5c9b      	ldrb	r3, [r3, r2]
 80042ae:	2b32      	cmp	r3, #50	@ 0x32
 80042b0:	d104      	bne.n	80042bc <ParseBuffer+0x284>
          ParseTime(tempBuf);
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	0018      	movs	r0, r3
 80042b6:	f002 f889 	bl	80063cc <ParseTime>
 80042ba:	e033      	b.n	8004324 <ParseBuffer+0x2ec>
        }
        else {
          Error("Error getting time");
 80042bc:	4a17      	ldr	r2, [pc, #92]	@ (800431c <ParseBuffer+0x2e4>)
 80042be:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <ParseBuffer+0x2e8>)
 80042c0:	0019      	movs	r1, r3
 80042c2:	2001      	movs	r0, #1
 80042c4:	f009 f8ca 	bl	800d45c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 80042c8:	2306      	movs	r3, #6
 80042ca:	e096      	b.n	80043fa <ParseBuffer+0x3c2>
 80042cc:	fffffea2 	.word	0xfffffea2
 80042d0:	fffffea1 	.word	0xfffffea1
 80042d4:	fffffee8 	.word	0xfffffee8
 80042d8:	080222dc 	.word	0x080222dc
 80042dc:	08021f08 	.word	0x08021f08
 80042e0:	fffffee4 	.word	0xfffffee4
 80042e4:	08022308 	.word	0x08022308
 80042e8:	fffffedc 	.word	0xfffffedc
 80042ec:	0802230c 	.word	0x0802230c
 80042f0:	fffffed4 	.word	0xfffffed4
 80042f4:	08022314 	.word	0x08022314
 80042f8:	fffffecc 	.word	0xfffffecc
 80042fc:	0802231c 	.word	0x0802231c
 8004300:	fffffec8 	.word	0xfffffec8
 8004304:	fffffeb8 	.word	0xfffffeb8
 8004308:	08022324 	.word	0x08022324
 800430c:	fffffea8 	.word	0xfffffea8
 8004310:	08022334 	.word	0x08022334
 8004314:	08023914 	.word	0x08023914
 8004318:	2000099e 	.word	0x2000099e
 800431c:	080222f4 	.word	0x080222f4
 8004320:	08021f2c 	.word	0x08021f2c
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 8004324:	22ac      	movs	r2, #172	@ 0xac
 8004326:	0052      	lsls	r2, r2, #1
 8004328:	18bb      	adds	r3, r7, r2
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d009      	beq.n	8004344 <ParseBuffer+0x30c>
 8004330:	18bb      	adds	r3, r7, r2
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b72      	cmp	r3, #114	@ 0x72
 8004338:	d104      	bne.n	8004344 <ParseBuffer+0x30c>
      status = RECEIVE_STATUS_READY;
 800433a:	2360      	movs	r3, #96	@ 0x60
 800433c:	33ff      	adds	r3, #255	@ 0xff
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2202      	movs	r2, #2
 8004342:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 8004344:	22ac      	movs	r2, #172	@ 0xac
 8004346:	0052      	lsls	r2, r2, #1
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <ParseBuffer+0x32c>
 8004350:	18bb      	adds	r3, r7, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b3e      	cmp	r3, #62	@ 0x3e
 8004358:	d104      	bne.n	8004364 <ParseBuffer+0x32c>
      status = RECEIVE_STATUS_START;
 800435a:	2360      	movs	r3, #96	@ 0x60
 800435c:	33ff      	adds	r3, #255	@ 0xff
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2205      	movs	r2, #5
 8004362:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004364:	22ac      	movs	r2, #172	@ 0xac
 8004366:	0052      	lsls	r2, r2, #1
 8004368:	18bb      	adds	r3, r7, r2
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <ParseBuffer+0x34c>
 8004370:	18bb      	adds	r3, r7, r2
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b2b      	cmp	r3, #43	@ 0x2b
 8004378:	d104      	bne.n	8004384 <ParseBuffer+0x34c>
      status = RECEIVE_STATUS_TIME;
 800437a:	2360      	movs	r3, #96	@ 0x60
 800437c:	33ff      	adds	r3, #255	@ 0xff
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	220b      	movs	r2, #11
 8004382:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004384:	22aa      	movs	r2, #170	@ 0xaa
 8004386:	0052      	lsls	r2, r2, #1
 8004388:	18bb      	adds	r3, r7, r2
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d004      	beq.n	800439a <ParseBuffer+0x362>
 8004390:	18bb      	adds	r3, r7, r2
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b45      	cmp	r3, #69	@ 0x45
 8004398:	d00a      	beq.n	80043b0 <ParseBuffer+0x378>
 800439a:	22a4      	movs	r2, #164	@ 0xa4
 800439c:	0052      	lsls	r2, r2, #1
 800439e:	18bb      	adds	r3, r7, r2
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <ParseBuffer+0x382>
 80043a6:	18bb      	adds	r3, r7, r2
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b46      	cmp	r3, #70	@ 0x46
 80043ae:	d104      	bne.n	80043ba <ParseBuffer+0x382>
      status = RECEIVE_STATUS_ERROR;
 80043b0:	2360      	movs	r3, #96	@ 0x60
 80043b2:	33ff      	adds	r3, #255	@ 0xff
 80043b4:	18fb      	adds	r3, r7, r3
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 80043ba:	22a8      	movs	r2, #168	@ 0xa8
 80043bc:	0052      	lsls	r2, r2, #1
 80043be:	18bb      	adds	r3, r7, r2
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <ParseBuffer+0x39e>
 80043c6:	18bb      	adds	r3, r7, r2
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b57      	cmp	r3, #87	@ 0x57
 80043ce:	d102      	bne.n	80043d6 <ParseBuffer+0x39e>
      ConnectionMade = true;
 80043d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004404 <ParseBuffer+0x3cc>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 80043d6:	22a6      	movs	r2, #166	@ 0xa6
 80043d8:	0052      	lsls	r2, r2, #1
 80043da:	18bb      	adds	r3, r7, r2
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <ParseBuffer+0x3ba>
 80043e2:	18bb      	adds	r3, r7, r2
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b32      	cmp	r3, #50	@ 0x32
 80043ea:	d102      	bne.n	80043f2 <ParseBuffer+0x3ba>
      beurs = true;
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <ParseBuffer+0x3d0>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 80043f2:	2360      	movs	r3, #96	@ 0x60
 80043f4:	33ff      	adds	r3, #255	@ 0xff
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	781b      	ldrb	r3, [r3, #0]

}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b059      	add	sp, #356	@ 0x164
 8004400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	2000054c 	.word	0x2000054c
 8004408:	2000054e 	.word	0x2000054e

0800440c <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8004412:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <PollAwake+0x34>)
 8004414:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0018      	movs	r0, r3
 800441a:	f7fb fea7 	bl	800016c <strlen>
 800441e:	0003      	movs	r3, r0
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0011      	movs	r1, r2
 8004426:	0018      	movs	r0, r3
 8004428:	f7ff fafe 	bl	8003a28 <ESP_Send>
 800442c:	1e03      	subs	r3, r0, #0
 800442e:	d001      	beq.n	8004434 <PollAwake+0x28>
    return true;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <PollAwake+0x2a>
  }
  else{
    return false;
 8004434:	2300      	movs	r3, #0
  }
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b002      	add	sp, #8
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			@ (mov r8, r8)
 8004440:	08022344 	.word	0x08022344

08004444 <RFPower>:
bool RFPower(){
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 800444a:	4b0b      	ldr	r3, [pc, #44]	@ (8004478 <RFPower+0x34>)
 800444c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	0018      	movs	r0, r3
 8004452:	f7fb fe8b 	bl	800016c <strlen>
 8004456:	0003      	movs	r3, r0
 8004458:	b29a      	uxth	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	0011      	movs	r1, r2
 800445e:	0018      	movs	r0, r3
 8004460:	f7ff fae2 	bl	8003a28 <ESP_Send>
 8004464:	1e03      	subs	r3, r0, #0
 8004466:	d001      	beq.n	800446c <RFPower+0x28>
    return true;
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <RFPower+0x2a>
  }
  else{
    return false;
 800446c:	2300      	movs	r3, #0
  }
}
 800446e:	0018      	movs	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	b002      	add	sp, #8
 8004474:	bd80      	pop	{r7, pc}
 8004476:	46c0      	nop			@ (mov r8, r8)
 8004478:	0802234c 	.word	0x0802234c

0800447c <CheckRFPower>:
bool CheckRFPower(){
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8004482:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <CheckRFPower+0x34>)
 8004484:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f7fb fe6f 	bl	800016c <strlen>
 800448e:	0003      	movs	r3, r0
 8004490:	b29a      	uxth	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0011      	movs	r1, r2
 8004496:	0018      	movs	r0, r3
 8004498:	f7ff fac6 	bl	8003a28 <ESP_Send>
 800449c:	1e03      	subs	r3, r0, #0
 800449e:	d001      	beq.n	80044a4 <CheckRFPower+0x28>
    return true;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <CheckRFPower+0x2a>
  }
  else{
    return false;
 80044a4:	2300      	movs	r3, #0
  }
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b002      	add	sp, #8
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	0802235c 	.word	0x0802235c

080044b4 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <ATRestore+0x34>)
 80044bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fb fe53 	bl	800016c <strlen>
 80044c6:	0003      	movs	r3, r0
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0011      	movs	r1, r2
 80044ce:	0018      	movs	r0, r3
 80044d0:	f7ff faaa 	bl	8003a28 <ESP_Send>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d001      	beq.n	80044dc <ATRestore+0x28>
    return true;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <ATRestore+0x2a>
  }
  else{
    return false;
 80044dc:	2300      	movs	r3, #0
  }
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	0802236c 	.word	0x0802236c

080044ec <CWINIT>:
bool CWINIT(){
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 80044f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004520 <CWINIT+0x34>)
 80044f4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	0018      	movs	r0, r3
 80044fa:	f7fb fe37 	bl	800016c <strlen>
 80044fe:	0003      	movs	r3, r0
 8004500:	b29a      	uxth	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	0011      	movs	r1, r2
 8004506:	0018      	movs	r0, r3
 8004508:	f7ff fa8e 	bl	8003a28 <ESP_Send>
 800450c:	1e03      	subs	r3, r0, #0
 800450e:	d001      	beq.n	8004514 <CWINIT+0x28>
    return true;
 8004510:	2301      	movs	r3, #1
 8004512:	e000      	b.n	8004516 <CWINIT+0x2a>
  }
  else{
    return false;
 8004514:	2300      	movs	r3, #0
  }
}
 8004516:	0018      	movs	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	b002      	add	sp, #8
 800451c:	bd80      	pop	{r7, pc}
 800451e:	46c0      	nop			@ (mov r8, r8)
 8004520:	0802237c 	.word	0x0802237c

08004524 <CWMODE1>:
bool CWMODE1(){
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <CWMODE1+0x34>)
 800452c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f7fb fe1b 	bl	800016c <strlen>
 8004536:	0003      	movs	r3, r0
 8004538:	b29a      	uxth	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0011      	movs	r1, r2
 800453e:	0018      	movs	r0, r3
 8004540:	f7ff fa72 	bl	8003a28 <ESP_Send>
 8004544:	1e03      	subs	r3, r0, #0
 8004546:	d001      	beq.n	800454c <CWMODE1+0x28>
    return true;
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <CWMODE1+0x2a>
  }
  else{
    return false;
 800454c:	2300      	movs	r3, #0
  }
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b002      	add	sp, #8
 8004554:	bd80      	pop	{r7, pc}
 8004556:	46c0      	nop			@ (mov r8, r8)
 8004558:	0802238c 	.word	0x0802238c

0800455c <CWMODE2>:
bool CWMODE2(){
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 8004562:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <CWMODE2+0x34>)
 8004564:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f7fb fdff 	bl	800016c <strlen>
 800456e:	0003      	movs	r3, r0
 8004570:	b29a      	uxth	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0011      	movs	r1, r2
 8004576:	0018      	movs	r0, r3
 8004578:	f7ff fa56 	bl	8003a28 <ESP_Send>
 800457c:	1e03      	subs	r3, r0, #0
 800457e:	d001      	beq.n	8004584 <CWMODE2+0x28>
    return true;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004584:	2300      	movs	r3, #0
  }
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b002      	add	sp, #8
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			@ (mov r8, r8)
 8004590:	0802239c 	.word	0x0802239c

08004594 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 800459a:	4b0b      	ldr	r3, [pc, #44]	@ (80045c8 <CWAUTOCONN+0x34>)
 800459c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7fb fde3 	bl	800016c <strlen>
 80045a6:	0003      	movs	r3, r0
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0011      	movs	r1, r2
 80045ae:	0018      	movs	r0, r3
 80045b0:	f7ff fa3a 	bl	8003a28 <ESP_Send>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d001      	beq.n	80045bc <CWAUTOCONN+0x28>
    return true;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 80045bc:	2300      	movs	r3, #0
  }
}
 80045be:	0018      	movs	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b002      	add	sp, #8
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	080223ac 	.word	0x080223ac

080045cc <CWJAP>:
bool CWJAP(){
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	46c6      	mov	lr, r8
 80045d0:	b500      	push	{lr}
 80045d2:	b0a2      	sub	sp, #136	@ 0x88
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	466b      	mov	r3, sp
 80045d8:	4698      	mov	r8, r3
  beursTest = true;
 80045da:	4b39      	ldr	r3, [pc, #228]	@ (80046c0 <CWJAP+0xf4>)
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 80045e0:	2618      	movs	r6, #24
 80045e2:	19bb      	adds	r3, r7, r6
 80045e4:	2264      	movs	r2, #100	@ 0x64
 80045e6:	2100      	movs	r1, #0
 80045e8:	0018      	movs	r0, r3
 80045ea:	f01a fcd9 	bl	801efa0 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 80045ee:	4b35      	ldr	r3, [pc, #212]	@ (80046c4 <CWJAP+0xf8>)
 80045f0:	4a35      	ldr	r2, [pc, #212]	@ (80046c8 <CWJAP+0xfc>)
 80045f2:	4936      	ldr	r1, [pc, #216]	@ (80046cc <CWJAP+0x100>)
 80045f4:	19b8      	adds	r0, r7, r6
 80045f6:	f01a fb8f 	bl	801ed18 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80045fa:	19bb      	adds	r3, r7, r6
 80045fc:	0018      	movs	r0, r3
 80045fe:	f7fb fdb5 	bl	800016c <strlen>
 8004602:	0002      	movs	r2, r0
 8004604:	216f      	movs	r1, #111	@ 0x6f
 8004606:	0030      	movs	r0, r6
 8004608:	180b      	adds	r3, r1, r0
 800460a:	19db      	adds	r3, r3, r7
 800460c:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 800460e:	180b      	adds	r3, r1, r0
 8004610:	19db      	adds	r3, r3, r7
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	3301      	adds	r3, #1
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	2180      	movs	r1, #128	@ 0x80
 800461a:	1879      	adds	r1, r7, r1
 800461c:	600a      	str	r2, [r1, #0]
 800461e:	001a      	movs	r2, r3
 8004620:	60ba      	str	r2, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	60fa      	str	r2, [r7, #12]
 8004626:	68b8      	ldr	r0, [r7, #8]
 8004628:	68f9      	ldr	r1, [r7, #12]
 800462a:	0002      	movs	r2, r0
 800462c:	0f52      	lsrs	r2, r2, #29
 800462e:	000e      	movs	r6, r1
 8004630:	00f6      	lsls	r6, r6, #3
 8004632:	617e      	str	r6, [r7, #20]
 8004634:	697e      	ldr	r6, [r7, #20]
 8004636:	4316      	orrs	r6, r2
 8004638:	617e      	str	r6, [r7, #20]
 800463a:	0002      	movs	r2, r0
 800463c:	00d2      	lsls	r2, r2, #3
 800463e:	613a      	str	r2, [r7, #16]
 8004640:	001a      	movs	r2, r3
 8004642:	603a      	str	r2, [r7, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	0002      	movs	r2, r0
 800464e:	0f52      	lsrs	r2, r2, #29
 8004650:	000e      	movs	r6, r1
 8004652:	00f5      	lsls	r5, r6, #3
 8004654:	4315      	orrs	r5, r2
 8004656:	0002      	movs	r2, r0
 8004658:	00d4      	lsls	r4, r2, #3
 800465a:	3307      	adds	r3, #7
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	466a      	mov	r2, sp
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	469d      	mov	sp, r3
 8004666:	466b      	mov	r3, sp
 8004668:	3300      	adds	r3, #0
 800466a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 800466c:	246f      	movs	r4, #111	@ 0x6f
 800466e:	2518      	movs	r5, #24
 8004670:	1963      	adds	r3, r4, r5
 8004672:	19db      	adds	r3, r3, r7
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	001a      	movs	r2, r3
 800467a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800467c:	2100      	movs	r1, #0
 800467e:	0018      	movs	r0, r3
 8004680:	f01a fc8e 	bl	801efa0 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004684:	1963      	adds	r3, r4, r5
 8004686:	19db      	adds	r3, r3, r7
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	1979      	adds	r1, r7, r5
 800468c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800468e:	0018      	movs	r0, r3
 8004690:	f01a fcad 	bl	801efee <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004694:	1963      	adds	r3, r4, r5
 8004696:	19db      	adds	r3, r3, r7
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800469e:	0011      	movs	r1, r2
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff f9c1 	bl	8003a28 <ESP_Send>
 80046a6:	1e03      	subs	r3, r0, #0
 80046a8:	d001      	beq.n	80046ae <CWJAP+0xe2>
    return true;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <CWJAP+0xe4>
  }
  else{
    return false;
 80046ae:	2300      	movs	r3, #0
 80046b0:	46c5      	mov	sp, r8
  }
}
 80046b2:	0018      	movs	r0, r3
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b022      	add	sp, #136	@ 0x88
 80046b8:	bc80      	pop	{r7}
 80046ba:	46b8      	mov	r8, r7
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	2000054d 	.word	0x2000054d
 80046c4:	08023920 	.word	0x08023920
 80046c8:	08023914 	.word	0x08023914
 80046cc:	080223c0 	.word	0x080223c0

080046d0 <CWMODE3>:
bool CWMODE3(){
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 80046d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <CWMODE3+0x34>)
 80046d8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fb fd45 	bl	800016c <strlen>
 80046e2:	0003      	movs	r3, r0
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0011      	movs	r1, r2
 80046ea:	0018      	movs	r0, r3
 80046ec:	f7ff f99c 	bl	8003a28 <ESP_Send>
 80046f0:	1e03      	subs	r3, r0, #0
 80046f2:	d001      	beq.n	80046f8 <CWMODE3+0x28>
    return true;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <CWMODE3+0x2a>
  }
  else{
    return false;
 80046f8:	2300      	movs	r3, #0
  }
}
 80046fa:	0018      	movs	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	b002      	add	sp, #8
 8004700:	bd80      	pop	{r7, pc}
 8004702:	46c0      	nop			@ (mov r8, r8)
 8004704:	080223d8 	.word	0x080223d8

08004708 <CWSTATE>:
bool CWSTATE(){
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 800470e:	4b0b      	ldr	r3, [pc, #44]	@ (800473c <CWSTATE+0x34>)
 8004710:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0018      	movs	r0, r3
 8004716:	f7fb fd29 	bl	800016c <strlen>
 800471a:	0003      	movs	r3, r0
 800471c:	b29a      	uxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f7ff f980 	bl	8003a28 <ESP_Send>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d001      	beq.n	8004730 <CWSTATE+0x28>
    return true;
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <CWSTATE+0x2a>
  }
  else{
    return false;
 8004730:	2300      	movs	r3, #0
  }
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	080223e8 	.word	0x080223e8

08004740 <CWSAP>:
bool CWSAP(){
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8004746:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <CWSAP+0x34>)
 8004748:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd0d 	bl	800016c <strlen>
 8004752:	0003      	movs	r3, r0
 8004754:	b29a      	uxth	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	0011      	movs	r1, r2
 800475a:	0018      	movs	r0, r3
 800475c:	f7ff f964 	bl	8003a28 <ESP_Send>
 8004760:	1e03      	subs	r3, r0, #0
 8004762:	d001      	beq.n	8004768 <CWSAP+0x28>
    return true;
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <CWSAP+0x2a>
  }
  else{
    return false;
 8004768:	2300      	movs	r3, #0
  }
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b002      	add	sp, #8
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			@ (mov r8, r8)
 8004774:	080223f8 	.word	0x080223f8

08004778 <CIPMUX>:
bool CIPMUX(){
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <CIPMUX+0x34>)
 8004780:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f7fb fcf1 	bl	800016c <strlen>
 800478a:	0003      	movs	r3, r0
 800478c:	b29a      	uxth	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0011      	movs	r1, r2
 8004792:	0018      	movs	r0, r3
 8004794:	f7ff f948 	bl	8003a28 <ESP_Send>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <CIPMUX+0x28>
    return true;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <CIPMUX+0x2a>
  }
  else{
    return false;
 80047a0:	2300      	movs	r3, #0
  }
}
 80047a2:	0018      	movs	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	b002      	add	sp, #8
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	46c0      	nop			@ (mov r8, r8)
 80047ac:	0802241c 	.word	0x0802241c

080047b0 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <WEBSERVER+0x34>)
 80047b8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f7fb fcd5 	bl	800016c <strlen>
 80047c2:	0003      	movs	r3, r0
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	0011      	movs	r1, r2
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7ff f92c 	bl	8003a28 <ESP_Send>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d001      	beq.n	80047d8 <WEBSERVER+0x28>
    return true;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <WEBSERVER+0x2a>
  }
  else{
    return false;
 80047d8:	2300      	movs	r3, #0
  }
}
 80047da:	0018      	movs	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	0802242c 	.word	0x0802242c

080047e8 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b0c5      	sub	sp, #276	@ 0x114
 80047ec:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 80047ee:	2380      	movs	r3, #128	@ 0x80
 80047f0:	005a      	lsls	r2, r3, #1
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	2100      	movs	r1, #0
 80047f6:	0018      	movs	r0, r3
 80047f8:	f01a fbd2 	bl	801efa0 <memset>
  uint16_t length = CreateMessage(beurs);
 80047fc:	4b22      	ldr	r3, [pc, #136]	@ (8004888 <HTTPCPOST+0xa0>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	1dfc      	adds	r4, r7, #7
 8004802:	34ff      	adds	r4, #255	@ 0xff
 8004804:	0018      	movs	r0, r3
 8004806:	f7ff f9bd 	bl	8003b84 <CreateMessage>
 800480a:	0003      	movs	r3, r0
 800480c:	8023      	strh	r3, [r4, #0]
  if(beurs){
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HTTPCPOST+0xa0>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 8004816:	1dfb      	adds	r3, r7, #7
 8004818:	33ff      	adds	r3, #255	@ 0xff
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	@ (800488c <HTTPCPOST+0xa4>)
 800481e:	491c      	ldr	r1, [pc, #112]	@ (8004890 <HTTPCPOST+0xa8>)
 8004820:	1d38      	adds	r0, r7, #4
 8004822:	f01a fa79 	bl	801ed18 <siprintf>
 8004826:	e016      	b.n	8004856 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 8004828:	4b1a      	ldr	r3, [pc, #104]	@ (8004894 <HTTPCPOST+0xac>)
 800482a:	481b      	ldr	r0, [pc, #108]	@ (8004898 <HTTPCPOST+0xb0>)
 800482c:	220c      	movs	r2, #12
 800482e:	0019      	movs	r1, r3
 8004830:	f7fe ff62 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 8004834:	4a17      	ldr	r2, [pc, #92]	@ (8004894 <HTTPCPOST+0xac>)
 8004836:	4b19      	ldr	r3, [pc, #100]	@ (800489c <HTTPCPOST+0xb4>)
 8004838:	0011      	movs	r1, r2
 800483a:	0018      	movs	r0, r3
 800483c:	f7ff f97e 	bl	8003b3c <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 8004840:	1dfb      	adds	r3, r7, #7
 8004842:	33ff      	adds	r3, #255	@ 0xff
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	4c15      	ldr	r4, [pc, #84]	@ (800489c <HTTPCPOST+0xb4>)
 8004848:	4a15      	ldr	r2, [pc, #84]	@ (80048a0 <HTTPCPOST+0xb8>)
 800484a:	4916      	ldr	r1, [pc, #88]	@ (80048a4 <HTTPCPOST+0xbc>)
 800484c:	1d38      	adds	r0, r7, #4
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	0023      	movs	r3, r4
 8004852:	f01a fa61 	bl	801ed18 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 8004856:	1d3b      	adds	r3, r7, #4
 8004858:	0018      	movs	r0, r3
 800485a:	f7fb fc87 	bl	800016c <strlen>
 800485e:	0002      	movs	r2, r0
 8004860:	1d7b      	adds	r3, r7, #5
 8004862:	33ff      	adds	r3, #255	@ 0xff
 8004864:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004866:	1d7b      	adds	r3, r7, #5
 8004868:	33ff      	adds	r3, #255	@ 0xff
 800486a:	881a      	ldrh	r2, [r3, #0]
 800486c:	1d3b      	adds	r3, r7, #4
 800486e:	0011      	movs	r1, r2
 8004870:	0018      	movs	r0, r3
 8004872:	f7ff f8d9 	bl	8003a28 <ESP_Send>
 8004876:	1e03      	subs	r3, r0, #0
 8004878:	d001      	beq.n	800487e <HTTPCPOST+0x96>
    return true;
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HTTPCPOST+0x98>
  }
  else{
    return false;
 800487e:	2300      	movs	r3, #0
  }
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b043      	add	sp, #268	@ 0x10c
 8004886:	bd90      	pop	{r4, r7, pc}
 8004888:	2000054e 	.word	0x2000054e
 800488c:	08023940 	.word	0x08023940
 8004890:	08022444 	.word	0x08022444
 8004894:	20000a7c 	.word	0x20000a7c
 8004898:	08080000 	.word	0x08080000
 800489c:	20000a88 	.word	0x20000a88
 80048a0:	0802397c 	.word	0x0802397c
 80048a4:	0802247c 	.word	0x0802247c

080048a8 <SENDDATA>:
bool SENDDATA(){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 80048ae:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <SENDDATA+0x34>)
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fb fc5b 	bl	800016c <strlen>
 80048b6:	0002      	movs	r2, r0
 80048b8:	1dbb      	adds	r3, r7, #6
 80048ba:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 80048bc:	1dbb      	adds	r3, r7, #6
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <SENDDATA+0x34>)
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7ff f8af 	bl	8003a28 <ESP_Send>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d001      	beq.n	80048d2 <SENDDATA+0x2a>
    return true;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <SENDDATA+0x2c>
  }
  else{
    return false;
 80048d2:	2300      	movs	r3, #0
  }
}
 80048d4:	0018      	movs	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	b002      	add	sp, #8
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000584 	.word	0x20000584

080048e0 <SLEEP>:
bool SLEEP(){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <SLEEP+0x34>)
 80048e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	0018      	movs	r0, r3
 80048ee:	f7fb fc3d 	bl	800016c <strlen>
 80048f2:	0003      	movs	r3, r0
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0011      	movs	r1, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f7ff f894 	bl	8003a28 <ESP_Send>
 8004900:	1e03      	subs	r3, r0, #0
 8004902:	d001      	beq.n	8004908 <SLEEP+0x28>
    return true;
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <SLEEP+0x2a>
  }
  else{
    return false;
 8004908:	2300      	movs	r3, #0
  }
}
 800490a:	0018      	movs	r0, r3
 800490c:	46bd      	mov	sp, r7
 800490e:	b002      	add	sp, #8
 8004910:	bd80      	pop	{r7, pc}
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	080224bc 	.word	0x080224bc

08004918 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <CIPSNTPCFG+0x3c>)
 8004920:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f7fb fc21 	bl	800016c <strlen>
 800492a:	0003      	movs	r3, r0
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	0011      	movs	r1, r2
 8004932:	0018      	movs	r0, r3
 8004934:	f7ff f878 	bl	8003a28 <ESP_Send>
 8004938:	1e03      	subs	r3, r0, #0
 800493a:	d006      	beq.n	800494a <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 800493c:	23fa      	movs	r3, #250	@ 0xfa
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	0018      	movs	r0, r3
 8004942:	f009 f933 	bl	800dbac <HAL_Delay>
    return true;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 800494a:	2300      	movs	r3, #0
  }
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b002      	add	sp, #8
 8004952:	bd80      	pop	{r7, pc}
 8004954:	080224cc 	.word	0x080224cc

08004958 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 800495e:	4b0b      	ldr	r3, [pc, #44]	@ (800498c <CIPSNTPTIME+0x34>)
 8004960:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	0018      	movs	r0, r3
 8004966:	f7fb fc01 	bl	800016c <strlen>
 800496a:	0003      	movs	r3, r0
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0011      	movs	r1, r2
 8004972:	0018      	movs	r0, r3
 8004974:	f7ff f858 	bl	8003a28 <ESP_Send>
 8004978:	1e03      	subs	r3, r0, #0
 800497a:	d001      	beq.n	8004980 <CIPSNTPTIME+0x28>
    return true;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 8004980:	2300      	movs	r3, #0
  }
}
 8004982:	0018      	movs	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	b002      	add	sp, #8
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	0802251c 	.word	0x0802251c

08004990 <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004996:	4b0b      	ldr	r3, [pc, #44]	@ (80049c4 <CIPSNTPINTV+0x34>)
 8004998:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	0018      	movs	r0, r3
 800499e:	f7fb fbe5 	bl	800016c <strlen>
 80049a2:	0003      	movs	r3, r0
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	0011      	movs	r1, r2
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7ff f83c 	bl	8003a28 <ESP_Send>
 80049b0:	1e03      	subs	r3, r0, #0
 80049b2:	d001      	beq.n	80049b8 <CIPSNTPINTV+0x28>
    return true;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 80049b8:	2300      	movs	r3, #0
  }
}
 80049ba:	0018      	movs	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	b002      	add	sp, #8
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			@ (mov r8, r8)
 80049c4:	08022530 	.word	0x08022530

080049c8 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 80049c8:	b5b0      	push	{r4, r5, r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	0002      	movs	r2, r0
 80049d0:	1dfb      	adds	r3, r7, #7
 80049d2:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80049d4:	4b73      	ldr	r3, [pc, #460]	@ (8004ba4 <DMA_ProcessBuffer+0x1dc>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	200e      	movs	r0, #14
 80049de:	183b      	adds	r3, r7, r0
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0049      	lsls	r1, r1, #1
 80049e4:	1a8a      	subs	r2, r1, r2
 80049e6:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 80049e8:	230d      	movs	r3, #13
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	2203      	movs	r2, #3
 80049ee:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 80049f0:	183b      	adds	r3, r7, r0
 80049f2:	881a      	ldrh	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d903      	bls.n	8004a04 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 80049fc:	183b      	adds	r3, r7, r0
 80049fe:	2280      	movs	r2, #128	@ 0x80
 8004a00:	0052      	lsls	r2, r2, #1
 8004a02:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 8004a04:	4b68      	ldr	r3, [pc, #416]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	230e      	movs	r3, #14
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d131      	bne.n	8004a7a <DMA_ProcessBuffer+0xb2>
      if(retry > ESP_WIFI_WAIT_RESPONSE_TIME_FACTOR){
 8004a16:	4b65      	ldr	r3, [pc, #404]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b14      	cmp	r3, #20
 8004a1c:	d91b      	bls.n	8004a56 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 8004a1e:	4b63      	ldr	r3, [pc, #396]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 8004a24:	4b62      	ldr	r3, [pc, #392]	@ (8004bb0 <DMA_ProcessBuffer+0x1e8>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d107      	bne.n	8004a3c <DMA_ProcessBuffer+0x74>
 8004a2c:	4b61      	ldr	r3, [pc, #388]	@ (8004bb4 <DMA_ProcessBuffer+0x1ec>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 8004a34:	230d      	movs	r3, #13
 8004a36:	18fb      	adds	r3, r7, r3
 8004a38:	2207      	movs	r2, #7
 8004a3a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 8004a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb0 <DMA_ProcessBuffer+0x1e8>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d103      	bne.n	8004a4c <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 8004a44:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb8 <DMA_ProcessBuffer+0x1f0>)
 8004a46:	220b      	movs	r2, #11
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e016      	b.n	8004a7a <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 8004a4c:	230d      	movs	r3, #13
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2206      	movs	r2, #6
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e011      	b.n	8004a7a <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 8004a56:	4b55      	ldr	r3, [pc, #340]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b53      	ldr	r3, [pc, #332]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a60:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 8004a62:	f009 f899 	bl	800db98 <HAL_GetTick>
 8004a66:	0003      	movs	r3, r0
 8004a68:	33f5      	adds	r3, #245	@ 0xf5
 8004a6a:	33ff      	adds	r3, #255	@ 0xff
 8004a6c:	001a      	movs	r2, r3
 8004a6e:	4b53      	ldr	r3, [pc, #332]	@ (8004bbc <DMA_ProcessBuffer+0x1f4>)
 8004a70:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004a72:	230d      	movs	r3, #13
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2204      	movs	r2, #4
 8004a78:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	001a      	movs	r2, r3
 8004a82:	210e      	movs	r1, #14
 8004a84:	187b      	adds	r3, r7, r1
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d100      	bne.n	8004a8e <DMA_ProcessBuffer+0xc6>
 8004a8c:	e082      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 8004a8e:	4b47      	ldr	r3, [pc, #284]	@ (8004bac <DMA_ProcessBuffer+0x1e4>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004a94:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4b43      	ldr	r3, [pc, #268]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d109      	bne.n	8004ab8 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b45      	ldr	r3, [pc, #276]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004aac:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 8004aae:	230d      	movs	r3, #13
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e06d      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004ab8:	4b41      	ldr	r3, [pc, #260]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	001a      	movs	r2, r3
 8004ac0:	210e      	movs	r1, #14
 8004ac2:	187b      	adds	r3, r7, r1
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004aca:	187b      	adds	r3, r7, r1
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc0 <DMA_ProcessBuffer+0x1f8>)
 8004ad2:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004ad4:	230d      	movs	r3, #13
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	220a      	movs	r2, #10
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e05a      	b.n	8004b94 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 8004ade:	4b32      	ldr	r3, [pc, #200]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	210e      	movs	r1, #14
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d917      	bls.n	8004b20 <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 8004af0:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	001a      	movs	r2, r3
 8004af8:	4b32      	ldr	r3, [pc, #200]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004afa:	18d0      	adds	r0, r2, r3
 8004afc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	001a      	movs	r2, r3
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	b299      	uxth	r1, r3
 8004b0c:	230d      	movs	r3, #13
 8004b0e:	18fc      	adds	r4, r7, r3
 8004b10:	1dfb      	adds	r3, r7, #7
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	001a      	movs	r2, r3
 8004b16:	f7ff fa8f 	bl	8004038 <ParseBuffer>
 8004b1a:	0003      	movs	r3, r0
 8004b1c:	7023      	strb	r3, [r4, #0]
 8004b1e:	e026      	b.n	8004b6e <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 8004b20:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	001a      	movs	r2, r3
 8004b28:	4b26      	ldr	r3, [pc, #152]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004b2a:	18d0      	adds	r0, r2, r3
 8004b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	001a      	movs	r2, r3
 8004b34:	2380      	movs	r3, #128	@ 0x80
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	b299      	uxth	r1, r3
 8004b3c:	250d      	movs	r5, #13
 8004b3e:	197c      	adds	r4, r7, r5
 8004b40:	1dfb      	adds	r3, r7, #7
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	001a      	movs	r2, r3
 8004b46:	f7ff fa77 	bl	8004038 <ParseBuffer>
 8004b4a:	0003      	movs	r3, r0
 8004b4c:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 8004b4e:	210e      	movs	r1, #14
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00a      	beq.n	8004b6e <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004b58:	197c      	adds	r4, r7, r5
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	187b      	adds	r3, r7, r1
 8004b60:	8819      	ldrh	r1, [r3, #0]
 8004b62:	4b18      	ldr	r3, [pc, #96]	@ (8004bc4 <DMA_ProcessBuffer+0x1fc>)
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7ff fa67 	bl	8004038 <ParseBuffer>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	0018      	movs	r0, r3
 8004b76:	240e      	movs	r4, #14
 8004b78:	193b      	adds	r3, r7, r4
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	@ (8004bc8 <DMA_ProcessBuffer+0x200>)
 8004b7e:	4913      	ldr	r1, [pc, #76]	@ (8004bcc <DMA_ProcessBuffer+0x204>)
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	0003      	movs	r3, r0
 8004b84:	2003      	movs	r0, #3
 8004b86:	f008 fc69 	bl	800d45c <CreateLine>
          OldPos = pos;
 8004b8a:	193b      	adds	r3, r7, r4
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <DMA_ProcessBuffer+0x1e0>)
 8004b92:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004b94:	230d      	movs	r3, #13
 8004b96:	18fb      	adds	r3, r7, r3
 8004b98:	781b      	ldrb	r3, [r3, #0]
}
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	20002450 	.word	0x20002450
 8004ba8:	20000aa1 	.word	0x20000aa1
 8004bac:	2000099c 	.word	0x2000099c
 8004bb0:	2000099e 	.word	0x2000099e
 8004bb4:	20000000 	.word	0x20000000
 8004bb8:	20000028 	.word	0x20000028
 8004bbc:	20000990 	.word	0x20000990
 8004bc0:	20000aa2 	.word	0x20000aa2
 8004bc4:	20000448 	.word	0x20000448
 8004bc8:	08022548 	.word	0x08022548
 8004bcc:	08021f08 	.word	0x08021f08

08004bd0 <clearDMABuffer>:

void clearDMABuffer(){
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	005a      	lsls	r2, r3, #1
 8004bd8:	4b03      	ldr	r3, [pc, #12]	@ (8004be8 <clearDMABuffer+0x18>)
 8004bda:	2100      	movs	r1, #0
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f01a f9df 	bl	801efa0 <memset>
}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	20000448 	.word	0x20000448

08004bec <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	0002      	movs	r2, r0
 8004bf4:	1dfb      	adds	r3, r7, #7
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	1dbb      	adds	r3, r7, #6
 8004bfa:	1c0a      	adds	r2, r1, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004bfe:	210f      	movs	r1, #15
 8004c00:	187b      	adds	r3, r7, r1
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004c06:	1dbb      	adds	r3, r7, #6
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d105      	bne.n	8004c1a <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004c0e:	187b      	adds	r3, r7, r1
 8004c10:	1dfa      	adds	r2, r7, #7
 8004c12:	7812      	ldrb	r2, [r2, #0]
 8004c14:	4251      	negs	r1, r2
 8004c16:	414a      	adcs	r2, r1
 8004c18:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004c1a:	1dbb      	adds	r3, r7, #6
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004c22:	230f      	movs	r3, #15
 8004c24:	18fb      	adds	r3, r7, r3
 8004c26:	1dfa      	adds	r2, r7, #7
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	3a02      	subs	r2, #2
 8004c2c:	4251      	negs	r1, r2
 8004c2e:	414a      	adcs	r2, r1
 8004c30:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004c32:	1dbb      	adds	r3, r7, #6
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d107      	bne.n	8004c4a <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004c3a:	230f      	movs	r3, #15
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	1dfa      	adds	r2, r7, #7
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	3a05      	subs	r2, #5
 8004c44:	4251      	negs	r1, r2
 8004c46:	414a      	adcs	r2, r1
 8004c48:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004c4a:	1dbb      	adds	r3, r7, #6
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d107      	bne.n	8004c62 <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004c52:	230f      	movs	r3, #15
 8004c54:	18fb      	adds	r3, r7, r3
 8004c56:	1dfa      	adds	r2, r7, #7
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	3a0b      	subs	r2, #11
 8004c5c:	4251      	negs	r1, r2
 8004c5e:	414a      	adcs	r2, r1
 8004c60:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004c62:	230f      	movs	r3, #15
 8004c64:	18fb      	adds	r3, r7, r3
 8004c66:	781b      	ldrb	r3, [r3, #0]
}
 8004c68:	0018      	movs	r0, r3
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	b004      	add	sp, #16
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	0002      	movs	r2, r0
 8004c78:	1dfb      	adds	r3, r7, #7
 8004c7a:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004c7c:	230f      	movs	r3, #15
 8004c7e:	18fb      	adds	r3, r7, r3
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004c84:	1dfb      	adds	r3, r7, #7
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b13      	cmp	r3, #19
 8004c8a:	d900      	bls.n	8004c8e <AT_Send+0x1e>
 8004c8c:	e18a      	b.n	8004fa4 <AT_Send+0x334>
 8004c8e:	009a      	lsls	r2, r3, #2
 8004c90:	4bc8      	ldr	r3, [pc, #800]	@ (8004fb4 <AT_Send+0x344>)
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004c98:	4bc7      	ldr	r3, [pc, #796]	@ (8004fb8 <AT_Send+0x348>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	f008 fb87 	bl	800d3b0 <TimestampIsReached>
 8004ca2:	1e03      	subs	r3, r0, #0
 8004ca4:	d100      	bne.n	8004ca8 <AT_Send+0x38>
 8004ca6:	e17c      	b.n	8004fa2 <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004ca8:	230f      	movs	r3, #15
 8004caa:	18fc      	adds	r4, r7, r3
 8004cac:	f7ff fbae 	bl	800440c <PollAwake>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004cb4:	f008 ff70 	bl	800db98 <HAL_GetTick>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	3332      	adds	r3, #50	@ 0x32
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	4bbe      	ldr	r3, [pc, #760]	@ (8004fb8 <AT_Send+0x348>)
 8004cc0:	601a      	str	r2, [r3, #0]
  }
  break;
 8004cc2:	e16e      	b.n	8004fa2 <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004cc4:	4abd      	ldr	r2, [pc, #756]	@ (8004fbc <AT_Send+0x34c>)
 8004cc6:	4bbe      	ldr	r3, [pc, #760]	@ (8004fc0 <AT_Send+0x350>)
 8004cc8:	0019      	movs	r1, r3
 8004cca:	2003      	movs	r0, #3
 8004ccc:	f008 fbc6 	bl	800d45c <CreateLine>
    ATCommandSend = RFPower();
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	18fc      	adds	r4, r7, r3
 8004cd4:	f7ff fbb6 	bl	8004444 <RFPower>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004cdc:	f008 ff5c 	bl	800db98 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	330a      	adds	r3, #10
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	4bb4      	ldr	r3, [pc, #720]	@ (8004fb8 <AT_Send+0x348>)
 8004ce8:	601a      	str	r2, [r3, #0]
    break;
 8004cea:	e15b      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004cec:	4ab5      	ldr	r2, [pc, #724]	@ (8004fc4 <AT_Send+0x354>)
 8004cee:	4bb4      	ldr	r3, [pc, #720]	@ (8004fc0 <AT_Send+0x350>)
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	f008 fbb2 	bl	800d45c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fc      	adds	r4, r7, r3
 8004cfc:	f7ff fbbe 	bl	800447c <CheckRFPower>
 8004d00:	0003      	movs	r3, r0
 8004d02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d04:	f008 ff48 	bl	800db98 <HAL_GetTick>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	330a      	adds	r3, #10
 8004d0c:	001a      	movs	r2, r3
 8004d0e:	4baa      	ldr	r3, [pc, #680]	@ (8004fb8 <AT_Send+0x348>)
 8004d10:	601a      	str	r2, [r3, #0]
    break;
 8004d12:	e147      	b.n	8004fa4 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004d14:	4aac      	ldr	r2, [pc, #688]	@ (8004fc8 <AT_Send+0x358>)
 8004d16:	4baa      	ldr	r3, [pc, #680]	@ (8004fc0 <AT_Send+0x350>)
 8004d18:	0019      	movs	r1, r3
 8004d1a:	2003      	movs	r0, #3
 8004d1c:	f008 fb9e 	bl	800d45c <CreateLine>
    ATCommandSend = ATRestore();
 8004d20:	230f      	movs	r3, #15
 8004d22:	18fc      	adds	r4, r7, r3
 8004d24:	f7ff fbc6 	bl	80044b4 <ATRestore>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004d2c:	f008 ff34 	bl	800db98 <HAL_GetTick>
 8004d30:	0003      	movs	r3, r0
 8004d32:	3332      	adds	r3, #50	@ 0x32
 8004d34:	001a      	movs	r2, r3
 8004d36:	4ba0      	ldr	r3, [pc, #640]	@ (8004fb8 <AT_Send+0x348>)
 8004d38:	601a      	str	r2, [r3, #0]
    break;
 8004d3a:	e133      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004d3c:	4aa3      	ldr	r2, [pc, #652]	@ (8004fcc <AT_Send+0x35c>)
 8004d3e:	4ba0      	ldr	r3, [pc, #640]	@ (8004fc0 <AT_Send+0x350>)
 8004d40:	0019      	movs	r1, r3
 8004d42:	2003      	movs	r0, #3
 8004d44:	f008 fb8a 	bl	800d45c <CreateLine>
    ATCommandSend = CWINIT();
 8004d48:	230f      	movs	r3, #15
 8004d4a:	18fc      	adds	r4, r7, r3
 8004d4c:	f7ff fbce 	bl	80044ec <CWINIT>
 8004d50:	0003      	movs	r3, r0
 8004d52:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d54:	f008 ff20 	bl	800db98 <HAL_GetTick>
 8004d58:	0003      	movs	r3, r0
 8004d5a:	33f5      	adds	r3, #245	@ 0xf5
 8004d5c:	33ff      	adds	r3, #255	@ 0xff
 8004d5e:	001a      	movs	r2, r3
 8004d60:	4b95      	ldr	r3, [pc, #596]	@ (8004fb8 <AT_Send+0x348>)
 8004d62:	601a      	str	r2, [r3, #0]
    break;
 8004d64:	e11e      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004d66:	4a9a      	ldr	r2, [pc, #616]	@ (8004fd0 <AT_Send+0x360>)
 8004d68:	4b95      	ldr	r3, [pc, #596]	@ (8004fc0 <AT_Send+0x350>)
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	2003      	movs	r0, #3
 8004d6e:	f008 fb75 	bl	800d45c <CreateLine>
    ATCommandSend = CWSTATE();
 8004d72:	230f      	movs	r3, #15
 8004d74:	18fc      	adds	r4, r7, r3
 8004d76:	f7ff fcc7 	bl	8004708 <CWSTATE>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d7e:	f008 ff0b 	bl	800db98 <HAL_GetTick>
 8004d82:	0003      	movs	r3, r0
 8004d84:	33f5      	adds	r3, #245	@ 0xf5
 8004d86:	33ff      	adds	r3, #255	@ 0xff
 8004d88:	001a      	movs	r2, r3
 8004d8a:	4b8b      	ldr	r3, [pc, #556]	@ (8004fb8 <AT_Send+0x348>)
 8004d8c:	601a      	str	r2, [r3, #0]
    break;
 8004d8e:	e109      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004d90:	4a90      	ldr	r2, [pc, #576]	@ (8004fd4 <AT_Send+0x364>)
 8004d92:	4b8b      	ldr	r3, [pc, #556]	@ (8004fc0 <AT_Send+0x350>)
 8004d94:	0019      	movs	r1, r3
 8004d96:	2003      	movs	r0, #3
 8004d98:	f008 fb60 	bl	800d45c <CreateLine>
    ATCommandSend = CWMODE1();
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	18fc      	adds	r4, r7, r3
 8004da0:	f7ff fbc0 	bl	8004524 <CWMODE1>
 8004da4:	0003      	movs	r3, r0
 8004da6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004da8:	f008 fef6 	bl	800db98 <HAL_GetTick>
 8004dac:	0003      	movs	r3, r0
 8004dae:	330a      	adds	r3, #10
 8004db0:	001a      	movs	r2, r3
 8004db2:	4b81      	ldr	r3, [pc, #516]	@ (8004fb8 <AT_Send+0x348>)
 8004db4:	601a      	str	r2, [r3, #0]
    break;
 8004db6:	e0f5      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004db8:	4a86      	ldr	r2, [pc, #536]	@ (8004fd4 <AT_Send+0x364>)
 8004dba:	4b81      	ldr	r3, [pc, #516]	@ (8004fc0 <AT_Send+0x350>)
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	2003      	movs	r0, #3
 8004dc0:	f008 fb4c 	bl	800d45c <CreateLine>
    ATCommandSend = CWMODE2();
 8004dc4:	230f      	movs	r3, #15
 8004dc6:	18fc      	adds	r4, r7, r3
 8004dc8:	f7ff fbc8 	bl	800455c <CWMODE2>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004dd0:	f008 fee2 	bl	800db98 <HAL_GetTick>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	330a      	adds	r3, #10
 8004dd8:	001a      	movs	r2, r3
 8004dda:	4b77      	ldr	r3, [pc, #476]	@ (8004fb8 <AT_Send+0x348>)
 8004ddc:	601a      	str	r2, [r3, #0]
    break;
 8004dde:	e0e1      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004de0:	4a7d      	ldr	r2, [pc, #500]	@ (8004fd8 <AT_Send+0x368>)
 8004de2:	4b77      	ldr	r3, [pc, #476]	@ (8004fc0 <AT_Send+0x350>)
 8004de4:	0019      	movs	r1, r3
 8004de6:	2003      	movs	r0, #3
 8004de8:	f008 fb38 	bl	800d45c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004dec:	230f      	movs	r3, #15
 8004dee:	18fc      	adds	r4, r7, r3
 8004df0:	f7ff fbd0 	bl	8004594 <CWAUTOCONN>
 8004df4:	0003      	movs	r3, r0
 8004df6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004df8:	f008 fece 	bl	800db98 <HAL_GetTick>
 8004dfc:	0003      	movs	r3, r0
 8004dfe:	330a      	adds	r3, #10
 8004e00:	001a      	movs	r2, r3
 8004e02:	4b6d      	ldr	r3, [pc, #436]	@ (8004fb8 <AT_Send+0x348>)
 8004e04:	601a      	str	r2, [r3, #0]
    break;
 8004e06:	e0cd      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004e08:	4a74      	ldr	r2, [pc, #464]	@ (8004fdc <AT_Send+0x36c>)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc0 <AT_Send+0x350>)
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	2003      	movs	r0, #3
 8004e10:	f008 fb24 	bl	800d45c <CreateLine>
    ATCommandSend = CWJAP();
 8004e14:	230f      	movs	r3, #15
 8004e16:	18fc      	adds	r4, r7, r3
 8004e18:	f7ff fbd8 	bl	80045cc <CWJAP>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004e20:	f008 feba 	bl	800db98 <HAL_GetTick>
 8004e24:	0003      	movs	r3, r0
 8004e26:	3332      	adds	r3, #50	@ 0x32
 8004e28:	001a      	movs	r2, r3
 8004e2a:	4b63      	ldr	r3, [pc, #396]	@ (8004fb8 <AT_Send+0x348>)
 8004e2c:	601a      	str	r2, [r3, #0]
    break;
 8004e2e:	e0b9      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004e30:	4a6b      	ldr	r2, [pc, #428]	@ (8004fe0 <AT_Send+0x370>)
 8004e32:	4b63      	ldr	r3, [pc, #396]	@ (8004fc0 <AT_Send+0x350>)
 8004e34:	0019      	movs	r1, r3
 8004e36:	2003      	movs	r0, #3
 8004e38:	f008 fb10 	bl	800d45c <CreateLine>
    ATCommandSend = CWMODE3();
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	18fc      	adds	r4, r7, r3
 8004e40:	f7ff fc46 	bl	80046d0 <CWMODE3>
 8004e44:	0003      	movs	r3, r0
 8004e46:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e48:	f008 fea6 	bl	800db98 <HAL_GetTick>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	330a      	adds	r3, #10
 8004e50:	001a      	movs	r2, r3
 8004e52:	4b59      	ldr	r3, [pc, #356]	@ (8004fb8 <AT_Send+0x348>)
 8004e54:	601a      	str	r2, [r3, #0]
    break;
 8004e56:	e0a5      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004e58:	4a62      	ldr	r2, [pc, #392]	@ (8004fe4 <AT_Send+0x374>)
 8004e5a:	4b59      	ldr	r3, [pc, #356]	@ (8004fc0 <AT_Send+0x350>)
 8004e5c:	0019      	movs	r1, r3
 8004e5e:	2003      	movs	r0, #3
 8004e60:	f008 fafc 	bl	800d45c <CreateLine>
    ATCommandSend = CWSAP();
 8004e64:	230f      	movs	r3, #15
 8004e66:	18fc      	adds	r4, r7, r3
 8004e68:	f7ff fc6a 	bl	8004740 <CWSAP>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e70:	f008 fe92 	bl	800db98 <HAL_GetTick>
 8004e74:	0003      	movs	r3, r0
 8004e76:	330a      	adds	r3, #10
 8004e78:	001a      	movs	r2, r3
 8004e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb8 <AT_Send+0x348>)
 8004e7c:	601a      	str	r2, [r3, #0]
    break;
 8004e7e:	e091      	b.n	8004fa4 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004e80:	230f      	movs	r3, #15
 8004e82:	18fc      	adds	r4, r7, r3
 8004e84:	f7ff fc78 	bl	8004778 <CIPMUX>
 8004e88:	0003      	movs	r3, r0
 8004e8a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e8c:	f008 fe84 	bl	800db98 <HAL_GetTick>
 8004e90:	0003      	movs	r3, r0
 8004e92:	330a      	adds	r3, #10
 8004e94:	001a      	movs	r2, r3
 8004e96:	4b48      	ldr	r3, [pc, #288]	@ (8004fb8 <AT_Send+0x348>)
 8004e98:	601a      	str	r2, [r3, #0]
    break;
 8004e9a:	e083      	b.n	8004fa4 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004e9c:	230f      	movs	r3, #15
 8004e9e:	18fc      	adds	r4, r7, r3
 8004ea0:	f7ff fc86 	bl	80047b0 <WEBSERVER>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ea8:	f008 fe76 	bl	800db98 <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	330a      	adds	r3, #10
 8004eb0:	001a      	movs	r2, r3
 8004eb2:	4b41      	ldr	r3, [pc, #260]	@ (8004fb8 <AT_Send+0x348>)
 8004eb4:	601a      	str	r2, [r3, #0]
    break;
 8004eb6:	e075      	b.n	8004fa4 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004eb8:	230f      	movs	r3, #15
 8004eba:	18fc      	adds	r4, r7, r3
 8004ebc:	f7ff fc94 	bl	80047e8 <HTTPCPOST>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004ec4:	f008 fe68 	bl	800db98 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	33f5      	adds	r3, #245	@ 0xf5
 8004ecc:	33ff      	adds	r3, #255	@ 0xff
 8004ece:	001a      	movs	r2, r3
 8004ed0:	4b39      	ldr	r3, [pc, #228]	@ (8004fb8 <AT_Send+0x348>)
 8004ed2:	601a      	str	r2, [r3, #0]
    break;
 8004ed4:	e066      	b.n	8004fa4 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004ed6:	4a44      	ldr	r2, [pc, #272]	@ (8004fe8 <AT_Send+0x378>)
 8004ed8:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <AT_Send+0x350>)
 8004eda:	0019      	movs	r1, r3
 8004edc:	2003      	movs	r0, #3
 8004ede:	f008 fabd 	bl	800d45c <CreateLine>
    ATCommandSend = SENDDATA();
 8004ee2:	230f      	movs	r3, #15
 8004ee4:	18fc      	adds	r4, r7, r3
 8004ee6:	f7ff fcdf 	bl	80048a8 <SENDDATA>
 8004eea:	0003      	movs	r3, r0
 8004eec:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004eee:	f008 fe53 	bl	800db98 <HAL_GetTick>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	33f5      	adds	r3, #245	@ 0xf5
 8004ef6:	33ff      	adds	r3, #255	@ 0xff
 8004ef8:	001a      	movs	r2, r3
 8004efa:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <AT_Send+0x348>)
 8004efc:	601a      	str	r2, [r3, #0]
    break;
 8004efe:	e051      	b.n	8004fa4 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004f00:	4a3a      	ldr	r2, [pc, #232]	@ (8004fec <AT_Send+0x37c>)
 8004f02:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc0 <AT_Send+0x350>)
 8004f04:	0019      	movs	r1, r3
 8004f06:	2003      	movs	r0, #3
 8004f08:	f008 faa8 	bl	800d45c <CreateLine>
    ATCommandSend = SLEEP();
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	18fc      	adds	r4, r7, r3
 8004f10:	f7ff fce6 	bl	80048e0 <SLEEP>
 8004f14:	0003      	movs	r3, r0
 8004f16:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f18:	f008 fe3e 	bl	800db98 <HAL_GetTick>
 8004f1c:	0003      	movs	r3, r0
 8004f1e:	330a      	adds	r3, #10
 8004f20:	001a      	movs	r2, r3
 8004f22:	4b25      	ldr	r3, [pc, #148]	@ (8004fb8 <AT_Send+0x348>)
 8004f24:	601a      	str	r2, [r3, #0]
    break;
 8004f26:	e03d      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004f28:	4a31      	ldr	r2, [pc, #196]	@ (8004ff0 <AT_Send+0x380>)
 8004f2a:	4b25      	ldr	r3, [pc, #148]	@ (8004fc0 <AT_Send+0x350>)
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	2003      	movs	r0, #3
 8004f30:	f008 fa94 	bl	800d45c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004f34:	230f      	movs	r3, #15
 8004f36:	18fc      	adds	r4, r7, r3
 8004f38:	f7ff fcee 	bl	8004918 <CIPSNTPCFG>
 8004f3c:	0003      	movs	r3, r0
 8004f3e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f40:	f008 fe2a 	bl	800db98 <HAL_GetTick>
 8004f44:	0003      	movs	r3, r0
 8004f46:	330a      	adds	r3, #10
 8004f48:	001a      	movs	r2, r3
 8004f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb8 <AT_Send+0x348>)
 8004f4c:	601a      	str	r2, [r3, #0]
    break;
 8004f4e:	e029      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004f50:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <AT_Send+0x384>)
 8004f52:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc0 <AT_Send+0x350>)
 8004f54:	0019      	movs	r1, r3
 8004f56:	2003      	movs	r0, #3
 8004f58:	f008 fa80 	bl	800d45c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004f5c:	230f      	movs	r3, #15
 8004f5e:	18fc      	adds	r4, r7, r3
 8004f60:	f7ff fcfa 	bl	8004958 <CIPSNTPTIME>
 8004f64:	0003      	movs	r3, r0
 8004f66:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004f68:	f008 fe16 	bl	800db98 <HAL_GetTick>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	33f5      	adds	r3, #245	@ 0xf5
 8004f70:	33ff      	adds	r3, #255	@ 0xff
 8004f72:	001a      	movs	r2, r3
 8004f74:	4b10      	ldr	r3, [pc, #64]	@ (8004fb8 <AT_Send+0x348>)
 8004f76:	601a      	str	r2, [r3, #0]
    break;
 8004f78:	e014      	b.n	8004fa4 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff8 <AT_Send+0x388>)
 8004f7c:	4b10      	ldr	r3, [pc, #64]	@ (8004fc0 <AT_Send+0x350>)
 8004f7e:	0019      	movs	r1, r3
 8004f80:	2003      	movs	r0, #3
 8004f82:	f008 fa6b 	bl	800d45c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004f86:	230f      	movs	r3, #15
 8004f88:	18fc      	adds	r4, r7, r3
 8004f8a:	f7ff fd01 	bl	8004990 <CIPSNTPINTV>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004f92:	f008 fe01 	bl	800db98 <HAL_GetTick>
 8004f96:	0003      	movs	r3, r0
 8004f98:	330a      	adds	r3, #10
 8004f9a:	001a      	movs	r2, r3
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <AT_Send+0x348>)
 8004f9e:	601a      	str	r2, [r3, #0]
    break;
 8004fa0:	e000      	b.n	8004fa4 <AT_Send+0x334>
  break;
 8004fa2:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004fa4:	230f      	movs	r3, #15
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	781b      	ldrb	r3, [r3, #0]
}
 8004faa:	0018      	movs	r0, r3
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b005      	add	sp, #20
 8004fb0:	bd90      	pop	{r4, r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	080239a4 	.word	0x080239a4
 8004fb8:	20000990 	.word	0x20000990
 8004fbc:	08022570 	.word	0x08022570
 8004fc0:	08021f08 	.word	0x08021f08
 8004fc4:	08022584 	.word	0x08022584
 8004fc8:	08022598 	.word	0x08022598
 8004fcc:	080225a8 	.word	0x080225a8
 8004fd0:	080225bc 	.word	0x080225bc
 8004fd4:	080225d4 	.word	0x080225d4
 8004fd8:	080225ec 	.word	0x080225ec
 8004fdc:	08022604 	.word	0x08022604
 8004fe0:	08022618 	.word	0x08022618
 8004fe4:	08022634 	.word	0x08022634
 8004fe8:	08022650 	.word	0x08022650
 8004fec:	08022660 	.word	0x08022660
 8004ff0:	08022684 	.word	0x08022684
 8004ff4:	08022698 	.word	0x08022698
 8004ff8:	080226b0 	.word	0x080226b0

08004ffc <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8005002:	1dfb      	adds	r3, r7, #7
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8005008:	4b7a      	ldr	r3, [pc, #488]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b05      	cmp	r3, #5
 800500e:	d900      	bls.n	8005012 <ESP_WakeTest+0x16>
 8005010:	e0d6      	b.n	80051c0 <ESP_WakeTest+0x1c4>
 8005012:	009a      	lsls	r2, r3, #2
 8005014:	4b78      	ldr	r3, [pc, #480]	@ (80051f8 <ESP_WakeTest+0x1fc>)
 8005016:	18d3      	adds	r3, r2, r3
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 800501c:	4b77      	ldr	r3, [pc, #476]	@ (80051fc <ESP_WakeTest+0x200>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2201      	movs	r2, #1
 8005022:	4053      	eors	r3, r2
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d036      	beq.n	8005098 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800502a:	2380      	movs	r3, #128	@ 0x80
 800502c:	011b      	lsls	r3, r3, #4
 800502e:	4874      	ldr	r0, [pc, #464]	@ (8005200 <ESP_WakeTest+0x204>)
 8005030:	2200      	movs	r2, #0
 8005032:	0019      	movs	r1, r3
 8005034:	f00a f82b 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8005038:	2032      	movs	r0, #50	@ 0x32
 800503a:	f008 fdb7 	bl	800dbac <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	486f      	ldr	r0, [pc, #444]	@ (8005200 <ESP_WakeTest+0x204>)
 8005044:	2201      	movs	r2, #1
 8005046:	0019      	movs	r1, r3
 8005048:	f00a f821 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800504c:	200a      	movs	r0, #10
 800504e:	f008 fdad 	bl	800dbac <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005052:	4b6c      	ldr	r3, [pc, #432]	@ (8005204 <ESP_WakeTest+0x208>)
 8005054:	2200      	movs	r2, #0
 8005056:	2101      	movs	r1, #1
 8005058:	0018      	movs	r0, r3
 800505a:	f00a f818 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 800505e:	200a      	movs	r0, #10
 8005060:	f008 fda4 	bl	800dbac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005064:	4b67      	ldr	r3, [pc, #412]	@ (8005204 <ESP_WakeTest+0x208>)
 8005066:	2201      	movs	r2, #1
 8005068:	2102      	movs	r1, #2
 800506a:	0018      	movs	r0, r3
 800506c:	f00a f80f 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8005070:	200a      	movs	r0, #10
 8005072:	f008 fd9b 	bl	800dbac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005076:	4b63      	ldr	r3, [pc, #396]	@ (8005204 <ESP_WakeTest+0x208>)
 8005078:	2201      	movs	r2, #1
 800507a:	2101      	movs	r1, #1
 800507c:	0018      	movs	r0, r3
 800507e:	f00a f806 	bl	800f08e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005082:	f008 fd89 	bl	800db98 <HAL_GetTick>
 8005086:	0003      	movs	r3, r0
 8005088:	22af      	movs	r2, #175	@ 0xaf
 800508a:	0092      	lsls	r2, r2, #2
 800508c:	189a      	adds	r2, r3, r2
 800508e:	4b5e      	ldr	r3, [pc, #376]	@ (8005208 <ESP_WakeTest+0x20c>)
 8005090:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005092:	4b5a      	ldr	r3, [pc, #360]	@ (80051fc <ESP_WakeTest+0x200>)
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	005a      	lsls	r2, r3, #1
 800509c:	4b5b      	ldr	r3, [pc, #364]	@ (800520c <ESP_WakeTest+0x210>)
 800509e:	0011      	movs	r1, r2
 80050a0:	0018      	movs	r0, r3
 80050a2:	f7fe fcf5 	bl	8003a90 <ESP_Receive>
 80050a6:	1e03      	subs	r3, r0, #0
 80050a8:	d100      	bne.n	80050ac <ESP_WakeTest+0xb0>
 80050aa:	e099      	b.n	80051e0 <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 80050ac:	4b51      	ldr	r3, [pc, #324]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80050b2:	e095      	b.n	80051e0 <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80050b4:	4b54      	ldr	r3, [pc, #336]	@ (8005208 <ESP_WakeTest+0x20c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f008 f979 	bl	800d3b0 <TimestampIsReached>
 80050be:	1e03      	subs	r3, r0, #0
 80050c0:	d100      	bne.n	80050c4 <ESP_WakeTest+0xc8>
 80050c2:	e08f      	b.n	80051e4 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 80050c4:	4b52      	ldr	r3, [pc, #328]	@ (8005210 <ESP_WakeTest+0x214>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	1dfc      	adds	r4, r7, #7
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7ff fdd0 	bl	8004c70 <AT_Send>
 80050d0:	0003      	movs	r3, r0
 80050d2:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80050d4:	1dfb      	adds	r3, r7, #7
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d100      	bne.n	80050de <ESP_WakeTest+0xe2>
 80050dc:	e082      	b.n	80051e4 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 80050de:	4b45      	ldr	r3, [pc, #276]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80050e0:	2202      	movs	r2, #2
 80050e2:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80050e4:	e07e      	b.n	80051e4 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 80050e6:	4b48      	ldr	r3, [pc, #288]	@ (8005208 <ESP_WakeTest+0x20c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f008 f960 	bl	800d3b0 <TimestampIsReached>
 80050f0:	1e03      	subs	r3, r0, #0
 80050f2:	d100      	bne.n	80050f6 <ESP_WakeTest+0xfa>
 80050f4:	e078      	b.n	80051e8 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80050f6:	4b47      	ldr	r3, [pc, #284]	@ (8005214 <ESP_WakeTest+0x218>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7ff fc64 	bl	80049c8 <DMA_ProcessBuffer>
 8005100:	0003      	movs	r3, r0
 8005102:	001a      	movs	r2, r3
 8005104:	4b44      	ldr	r3, [pc, #272]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005106:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8005108:	4b43      	ldr	r3, [pc, #268]	@ (8005218 <ESP_WakeTest+0x21c>)
 800510a:	781a      	ldrb	r2, [r3, #0]
 800510c:	4b41      	ldr	r3, [pc, #260]	@ (8005214 <ESP_WakeTest+0x218>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	1dbc      	adds	r4, r7, #6
 8005112:	0019      	movs	r1, r3
 8005114:	0010      	movs	r0, r2
 8005116:	f7ff fd69 	bl	8004bec <ATCompare>
 800511a:	0003      	movs	r3, r0
 800511c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800511e:	4b3e      	ldr	r3, [pc, #248]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8005126:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 800512c:	4b3a      	ldr	r3, [pc, #232]	@ (8005218 <ESP_WakeTest+0x21c>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b07      	cmp	r3, #7
 8005132:	d104      	bne.n	800513e <ESP_WakeTest+0x142>
          StartProg();
 8005134:	f7fe ff4e 	bl	8003fd4 <StartProg>
          TestState = ESP_TEST_BOOT;
 8005138:	4b2e      	ldr	r3, [pc, #184]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 800513a:	2205      	movs	r2, #5
 800513c:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800513e:	4b36      	ldr	r3, [pc, #216]	@ (8005218 <ESP_WakeTest+0x21c>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d109      	bne.n	800515a <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8005146:	f008 fd27 	bl	800db98 <HAL_GetTick>
 800514a:	0003      	movs	r3, r0
 800514c:	3332      	adds	r3, #50	@ 0x32
 800514e:	001a      	movs	r2, r3
 8005150:	4b2d      	ldr	r3, [pc, #180]	@ (8005208 <ESP_WakeTest+0x20c>)
 8005152:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8005154:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d042      	beq.n	80051e8 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8005162:	4b24      	ldr	r3, [pc, #144]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005164:	2203      	movs	r2, #3
 8005166:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005168:	e03e      	b.n	80051e8 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 800516a:	4b2c      	ldr	r3, [pc, #176]	@ (800521c <ESP_WakeTest+0x220>)
 800516c:	22fa      	movs	r2, #250	@ 0xfa
 800516e:	0112      	lsls	r2, r2, #4
 8005170:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 8005172:	4b2a      	ldr	r3, [pc, #168]	@ (800521c <ESP_WakeTest+0x220>)
 8005174:	4a2a      	ldr	r2, [pc, #168]	@ (8005220 <ESP_WakeTest+0x224>)
 8005176:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005178:	4b28      	ldr	r3, [pc, #160]	@ (800521c <ESP_WakeTest+0x220>)
 800517a:	22fa      	movs	r2, #250	@ 0xfa
 800517c:	0112      	lsls	r2, r2, #4
 800517e:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 8005180:	4b1c      	ldr	r3, [pc, #112]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 8005182:	2204      	movs	r2, #4
 8005184:	701a      	strb	r2, [r3, #0]

      break;
 8005186:	e030      	b.n	80051ea <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005188:	4b26      	ldr	r3, [pc, #152]	@ (8005224 <ESP_WakeTest+0x228>)
 800518a:	2200      	movs	r2, #0
 800518c:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800518e:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <ESP_WakeTest+0x200>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005194:	4b1b      	ldr	r3, [pc, #108]	@ (8005204 <ESP_WakeTest+0x208>)
 8005196:	2200      	movs	r2, #0
 8005198:	2101      	movs	r1, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f009 ff77 	bl	800f08e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80051a0:	2380      	movs	r3, #128	@ 0x80
 80051a2:	011b      	lsls	r3, r3, #4
 80051a4:	4816      	ldr	r0, [pc, #88]	@ (8005200 <ESP_WakeTest+0x204>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	0019      	movs	r1, r3
 80051aa:	f009 ff70 	bl	800f08e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80051ae:	4b15      	ldr	r3, [pc, #84]	@ (8005204 <ESP_WakeTest+0x208>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	2102      	movs	r1, #2
 80051b4:	0018      	movs	r0, r3
 80051b6:	f009 ff6a 	bl	800f08e <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80051ba:	f003 f911 	bl	80083e0 <SetESPMeasurementDone>
      break;
 80051be:	e014      	b.n	80051ea <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 80051c0:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <ESP_WakeTest+0x1f8>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	701a      	strb	r2, [r3, #0]
      break;
 80051c6:	e010      	b.n	80051ea <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <ESP_WakeTest+0x220>)
 80051ca:	22fa      	movs	r2, #250	@ 0xfa
 80051cc:	0112      	lsls	r2, r2, #4
 80051ce:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80051d0:	4b12      	ldr	r3, [pc, #72]	@ (800521c <ESP_WakeTest+0x220>)
 80051d2:	22fa      	movs	r2, #250	@ 0xfa
 80051d4:	0112      	lsls	r2, r2, #4
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80051d8:	4b10      	ldr	r3, [pc, #64]	@ (800521c <ESP_WakeTest+0x220>)
 80051da:	2200      	movs	r2, #0
 80051dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80051de:	e004      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e0:	46c0      	nop			@ (mov r8, r8)
 80051e2:	e002      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e4:	46c0      	nop			@ (mov r8, r8)
 80051e6:	e000      	b.n	80051ea <ESP_WakeTest+0x1ee>
      break;
 80051e8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80051ea:	46c0      	nop			@ (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b003      	add	sp, #12
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	46c0      	nop			@ (mov r8, r8)
 80051f4:	200009a0 	.word	0x200009a0
 80051f8:	080239f4 	.word	0x080239f4
 80051fc:	20000548 	.word	0x20000548
 8005200:	50000800 	.word	0x50000800
 8005204:	50001c00 	.word	0x50001c00
 8005208:	20000990 	.word	0x20000990
 800520c:	20000448 	.word	0x20000448
 8005210:	2000099e 	.word	0x2000099e
 8005214:	2000099d 	.word	0x2000099d
 8005218:	20000029 	.word	0x20000029
 800521c:	40000400 	.word	0x40000400
 8005220:	00000bb8 	.word	0x00000bb8
 8005224:	20000000 	.word	0x20000000

08005228 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 8005228:	b5b0      	push	{r4, r5, r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af04      	add	r7, sp, #16
  bool ATSend = false;
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 8005234:	4bda      	ldr	r3, [pc, #872]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005236:	781a      	ldrb	r2, [r3, #0]
 8005238:	4bda      	ldr	r3, [pc, #872]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d01f      	beq.n	8005280 <ESP_Upkeep+0x58>
    oldEspState = EspState;
 8005240:	4bd7      	ldr	r3, [pc, #860]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	4bd7      	ldr	r3, [pc, #860]	@ (80055a4 <ESP_Upkeep+0x37c>)
 8005246:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 8005248:	4bd6      	ldr	r3, [pc, #856]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d103      	bne.n	8005258 <ESP_Upkeep+0x30>
 8005250:	4bd5      	ldr	r3, [pc, #852]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b0e      	cmp	r3, #14
 8005256:	d013      	beq.n	8005280 <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 8005258:	4bd2      	ldr	r3, [pc, #840]	@ (80055a4 <ESP_Upkeep+0x37c>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	001d      	movs	r5, r3
 800525e:	4bd2      	ldr	r3, [pc, #840]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	0018      	movs	r0, r3
 8005264:	4bd1      	ldr	r3, [pc, #836]	@ (80055ac <ESP_Upkeep+0x384>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	001c      	movs	r4, r3
 800526a:	4bd1      	ldr	r3, [pc, #836]	@ (80055b0 <ESP_Upkeep+0x388>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4ad1      	ldr	r2, [pc, #836]	@ (80055b4 <ESP_Upkeep+0x38c>)
 8005270:	49d1      	ldr	r1, [pc, #836]	@ (80055b8 <ESP_Upkeep+0x390>)
 8005272:	9302      	str	r3, [sp, #8]
 8005274:	9401      	str	r4, [sp, #4]
 8005276:	9000      	str	r0, [sp, #0]
 8005278:	002b      	movs	r3, r5
 800527a:	2003      	movs	r0, #3
 800527c:	f008 f8ee 	bl	800d45c <CreateLine>
    }
  }

  switch (EspState) {
 8005280:	4bc7      	ldr	r3, [pc, #796]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b0f      	cmp	r3, #15
 8005286:	d901      	bls.n	800528c <ESP_Upkeep+0x64>
 8005288:	f000 fbc8 	bl	8005a1c <ESP_Upkeep+0x7f4>
 800528c:	009a      	lsls	r2, r3, #2
 800528e:	4bcb      	ldr	r3, [pc, #812]	@ (80055bc <ESP_Upkeep+0x394>)
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005296:	4bc2      	ldr	r3, [pc, #776]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
      break;
 800529c:	f000 fbd7 	bl	8005a4e <ESP_Upkeep+0x826>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 80052a0:	4bc7      	ldr	r3, [pc, #796]	@ (80055c0 <ESP_Upkeep+0x398>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	2201      	movs	r2, #1
 80052a6:	4053      	eors	r3, r2
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d036      	beq.n	800531c <ESP_Upkeep+0xf4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	48c4      	ldr	r0, [pc, #784]	@ (80055c4 <ESP_Upkeep+0x39c>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	0019      	movs	r1, r3
 80052b8:	f009 fee9 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052bc:	2001      	movs	r0, #1
 80052be:	f008 fc75 	bl	800dbac <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80052c2:	2380      	movs	r3, #128	@ 0x80
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	48bf      	ldr	r0, [pc, #764]	@ (80055c4 <ESP_Upkeep+0x39c>)
 80052c8:	2201      	movs	r2, #1
 80052ca:	0019      	movs	r1, r3
 80052cc:	f009 fedf 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052d0:	2001      	movs	r0, #1
 80052d2:	f008 fc6b 	bl	800dbac <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80052d6:	4bbc      	ldr	r3, [pc, #752]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052d8:	2200      	movs	r2, #0
 80052da:	2101      	movs	r1, #1
 80052dc:	0018      	movs	r0, r3
 80052de:	f009 fed6 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052e2:	2001      	movs	r0, #1
 80052e4:	f008 fc62 	bl	800dbac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 80052e8:	4bb7      	ldr	r3, [pc, #732]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052ea:	2201      	movs	r2, #1
 80052ec:	2102      	movs	r1, #2
 80052ee:	0018      	movs	r0, r3
 80052f0:	f009 fecd 	bl	800f08e <HAL_GPIO_WritePin>
        HAL_Delay(1);
 80052f4:	2001      	movs	r0, #1
 80052f6:	f008 fc59 	bl	800dbac <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80052fa:	4bb3      	ldr	r3, [pc, #716]	@ (80055c8 <ESP_Upkeep+0x3a0>)
 80052fc:	2201      	movs	r2, #1
 80052fe:	2101      	movs	r1, #1
 8005300:	0018      	movs	r0, r3
 8005302:	f009 fec4 	bl	800f08e <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8005306:	f008 fc47 	bl	800db98 <HAL_GetTick>
 800530a:	0003      	movs	r3, r0
 800530c:	22af      	movs	r2, #175	@ 0xaf
 800530e:	0092      	lsls	r2, r2, #2
 8005310:	189a      	adds	r2, r3, r2
 8005312:	4bae      	ldr	r3, [pc, #696]	@ (80055cc <ESP_Upkeep+0x3a4>)
 8005314:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8005316:	4baa      	ldr	r3, [pc, #680]	@ (80055c0 <ESP_Upkeep+0x398>)
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	005a      	lsls	r2, r3, #1
 8005320:	4bab      	ldr	r3, [pc, #684]	@ (80055d0 <ESP_Upkeep+0x3a8>)
 8005322:	0011      	movs	r1, r2
 8005324:	0018      	movs	r0, r3
 8005326:	f7fe fbb3 	bl	8003a90 <ESP_Receive>
 800532a:	1e03      	subs	r3, r0, #0
 800532c:	d100      	bne.n	8005330 <ESP_Upkeep+0x108>
 800532e:	e381      	b.n	8005a34 <ESP_Upkeep+0x80c>
        EspState = ESP_STATE_WAIT_AWAKE;
 8005330:	4b9b      	ldr	r3, [pc, #620]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005332:	220f      	movs	r2, #15
 8005334:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 8005336:	f008 fc2f 	bl	800db98 <HAL_GetTick>
 800533a:	0003      	movs	r3, r0
 800533c:	22fa      	movs	r2, #250	@ 0xfa
 800533e:	00d2      	lsls	r2, r2, #3
 8005340:	189a      	adds	r2, r3, r2
 8005342:	4ba4      	ldr	r3, [pc, #656]	@ (80055d4 <ESP_Upkeep+0x3ac>)
 8005344:	601a      	str	r2, [r3, #0]
      }
      break;
 8005346:	e375      	b.n	8005a34 <ESP_Upkeep+0x80c>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 8005348:	2001      	movs	r0, #1
 800534a:	f7ff fb3d 	bl	80049c8 <DMA_ProcessBuffer>
 800534e:	0003      	movs	r3, r0
 8005350:	001a      	movs	r2, r3
 8005352:	4ba1      	ldr	r3, [pc, #644]	@ (80055d8 <ESP_Upkeep+0x3b0>)
 8005354:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 8005356:	4ba0      	ldr	r3, [pc, #640]	@ (80055d8 <ESP_Upkeep+0x3b0>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	1dbc      	adds	r4, r7, #6
 800535c:	2101      	movs	r1, #1
 800535e:	0018      	movs	r0, r3
 8005360:	f7ff fc44 	bl	8004bec <ATCompare>
 8005364:	0003      	movs	r3, r0
 8005366:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005368:	1dbb      	adds	r3, r7, #6
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <ESP_Upkeep+0x158>
 8005370:	4b98      	ldr	r3, [pc, #608]	@ (80055d4 <ESP_Upkeep+0x3ac>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	0018      	movs	r0, r3
 8005376:	f008 f81b 	bl	800d3b0 <TimestampIsReached>
 800537a:	1e03      	subs	r3, r0, #0
 800537c:	d100      	bne.n	8005380 <ESP_Upkeep+0x158>
 800537e:	e35b      	b.n	8005a38 <ESP_Upkeep+0x810>
          EspState = ESP_STATE_MODE_SELECT;
 8005380:	4b87      	ldr	r3, [pc, #540]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005382:	220b      	movs	r2, #11
 8005384:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005386:	e357      	b.n	8005a38 <ESP_Upkeep+0x810>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005388:	4b94      	ldr	r3, [pc, #592]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800538a:	2209      	movs	r2, #9
 800538c:	2114      	movs	r1, #20
 800538e:	0018      	movs	r0, r3
 8005390:	f019 fe06 	bl	801efa0 <memset>
      if(!InitIsDone || WifiReset){
 8005394:	4b92      	ldr	r3, [pc, #584]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2201      	movs	r2, #1
 800539a:	4053      	eors	r3, r2
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <ESP_Upkeep+0x182>
 80053a2:	4b90      	ldr	r3, [pc, #576]	@ (80055e4 <ESP_Upkeep+0x3bc>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01a      	beq.n	80053e0 <ESP_Upkeep+0x1b8>
        memcpy(ATCommandArray, AT_INIT, 7);
 80053aa:	4b8c      	ldr	r3, [pc, #560]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80053ac:	4a8e      	ldr	r2, [pc, #568]	@ (80055e8 <ESP_Upkeep+0x3c0>)
 80053ae:	6811      	ldr	r1, [r2, #0]
 80053b0:	6019      	str	r1, [r3, #0]
 80053b2:	8891      	ldrh	r1, [r2, #4]
 80053b4:	8099      	strh	r1, [r3, #4]
 80053b6:	7992      	ldrb	r2, [r2, #6]
 80053b8:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 80053ba:	4b79      	ldr	r3, [pc, #484]	@ (80055a0 <ESP_Upkeep+0x378>)
 80053bc:	2204      	movs	r2, #4
 80053be:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053c0:	4b8a      	ldr	r3, [pc, #552]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 80053c6:	4b79      	ldr	r3, [pc, #484]	@ (80055ac <ESP_Upkeep+0x384>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80053cc:	4b87      	ldr	r3, [pc, #540]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	001a      	movs	r2, r3
 80053d2:	4b82      	ldr	r3, [pc, #520]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80053d4:	5c9a      	ldrb	r2, [r3, r2]
 80053d6:	4b74      	ldr	r3, [pc, #464]	@ (80055a8 <ESP_Upkeep+0x380>)
 80053d8:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053da:	4b75      	ldr	r3, [pc, #468]	@ (80055b0 <ESP_Upkeep+0x388>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 80053e0:	4b7f      	ldr	r3, [pc, #508]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01f      	beq.n	8005428 <ESP_Upkeep+0x200>
 80053e8:	4b81      	ldr	r3, [pc, #516]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2201      	movs	r2, #1
 80053ee:	4053      	eors	r3, r2
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d018      	beq.n	8005428 <ESP_Upkeep+0x200>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 80053f6:	4b79      	ldr	r3, [pc, #484]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80053f8:	4a7e      	ldr	r2, [pc, #504]	@ (80055f4 <ESP_Upkeep+0x3cc>)
 80053fa:	6811      	ldr	r1, [r2, #0]
 80053fc:	6019      	str	r1, [r3, #0]
 80053fe:	8892      	ldrh	r2, [r2, #4]
 8005400:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005402:	4b67      	ldr	r3, [pc, #412]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005404:	2204      	movs	r2, #4
 8005406:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005408:	4b78      	ldr	r3, [pc, #480]	@ (80055ec <ESP_Upkeep+0x3c4>)
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 800540e:	4b67      	ldr	r3, [pc, #412]	@ (80055ac <ESP_Upkeep+0x384>)
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005414:	4b75      	ldr	r3, [pc, #468]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	001a      	movs	r2, r3
 800541a:	4b70      	ldr	r3, [pc, #448]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800541c:	5c9a      	ldrb	r2, [r3, r2]
 800541e:	4b62      	ldr	r3, [pc, #392]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005420:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005422:	4b63      	ldr	r3, [pc, #396]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 8005428:	4b6d      	ldr	r3, [pc, #436]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d021      	beq.n	8005474 <ESP_Upkeep+0x24c>
 8005430:	4b6f      	ldr	r3, [pc, #444]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01d      	beq.n	8005474 <ESP_Upkeep+0x24c>
 8005438:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <ESP_Upkeep+0x3d0>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4053      	eors	r3, r2
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d016      	beq.n	8005474 <ESP_Upkeep+0x24c>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 8005446:	4b6d      	ldr	r3, [pc, #436]	@ (80055fc <ESP_Upkeep+0x3d4>)
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	4b64      	ldr	r3, [pc, #400]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800544c:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 800544e:	4b54      	ldr	r3, [pc, #336]	@ (80055a0 <ESP_Upkeep+0x378>)
 8005450:	2204      	movs	r2, #4
 8005452:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005454:	4b65      	ldr	r3, [pc, #404]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 800545a:	4b54      	ldr	r3, [pc, #336]	@ (80055ac <ESP_Upkeep+0x384>)
 800545c:	2204      	movs	r2, #4
 800545e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005460:	4b62      	ldr	r3, [pc, #392]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	001a      	movs	r2, r3
 8005466:	4b5d      	ldr	r3, [pc, #372]	@ (80055dc <ESP_Upkeep+0x3b4>)
 8005468:	5c9a      	ldrb	r2, [r3, r2]
 800546a:	4b4f      	ldr	r3, [pc, #316]	@ (80055a8 <ESP_Upkeep+0x380>)
 800546c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800546e:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005470:	2200      	movs	r2, #0
 8005472:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 8005474:	4b5a      	ldr	r3, [pc, #360]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02e      	beq.n	80054da <ESP_Upkeep+0x2b2>
 800547c:	4b5c      	ldr	r3, [pc, #368]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02a      	beq.n	80054da <ESP_Upkeep+0x2b2>
 8005484:	4b5c      	ldr	r3, [pc, #368]	@ (80055f8 <ESP_Upkeep+0x3d0>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d026      	beq.n	80054da <ESP_Upkeep+0x2b2>
 800548c:	4b5c      	ldr	r3, [pc, #368]	@ (8005600 <ESP_Upkeep+0x3d8>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2201      	movs	r2, #1
 8005492:	4053      	eors	r3, r2
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d01f      	beq.n	80054da <ESP_Upkeep+0x2b2>
        memcpy(ATCommandArray, AT_SEND, 3);
 800549a:	4b50      	ldr	r3, [pc, #320]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800549c:	4a59      	ldr	r2, [pc, #356]	@ (8005604 <ESP_Upkeep+0x3dc>)
 800549e:	8811      	ldrh	r1, [r2, #0]
 80054a0:	8019      	strh	r1, [r3, #0]
 80054a2:	7892      	ldrb	r2, [r2, #2]
 80054a4:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 80054a6:	4b3e      	ldr	r3, [pc, #248]	@ (80055a0 <ESP_Upkeep+0x378>)
 80054a8:	2204      	movs	r2, #4
 80054aa:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054ac:	4b4f      	ldr	r3, [pc, #316]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 80054b2:	4b3e      	ldr	r3, [pc, #248]	@ (80055ac <ESP_Upkeep+0x384>)
 80054b4:	2202      	movs	r2, #2
 80054b6:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80054b8:	f008 fb6e 	bl	800db98 <HAL_GetTick>
 80054bc:	0002      	movs	r2, r0
 80054be:	4b52      	ldr	r3, [pc, #328]	@ (8005608 <ESP_Upkeep+0x3e0>)
 80054c0:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80054c2:	f007 f915 	bl	800c6f0 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 80054c6:	4b49      	ldr	r3, [pc, #292]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	001a      	movs	r2, r3
 80054cc:	4b43      	ldr	r3, [pc, #268]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80054ce:	5c9a      	ldrb	r2, [r3, r2]
 80054d0:	4b35      	ldr	r3, [pc, #212]	@ (80055a8 <ESP_Upkeep+0x380>)
 80054d2:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80054d4:	4b36      	ldr	r3, [pc, #216]	@ (80055b0 <ESP_Upkeep+0x388>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 80054da:	4b4c      	ldr	r3, [pc, #304]	@ (800560c <ESP_Upkeep+0x3e4>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01a      	beq.n	8005518 <ESP_Upkeep+0x2f0>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 80054e2:	4b3e      	ldr	r3, [pc, #248]	@ (80055dc <ESP_Upkeep+0x3b4>)
 80054e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005610 <ESP_Upkeep+0x3e8>)
 80054e6:	6811      	ldr	r1, [r2, #0]
 80054e8:	6019      	str	r1, [r3, #0]
 80054ea:	7912      	ldrb	r2, [r2, #4]
 80054ec:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 80054ee:	4b2c      	ldr	r3, [pc, #176]	@ (80055a0 <ESP_Upkeep+0x378>)
 80054f0:	2204      	movs	r2, #4
 80054f2:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80054f4:	4b3d      	ldr	r3, [pc, #244]	@ (80055ec <ESP_Upkeep+0x3c4>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 80054fa:	4b2c      	ldr	r3, [pc, #176]	@ (80055ac <ESP_Upkeep+0x384>)
 80054fc:	2203      	movs	r2, #3
 80054fe:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 8005500:	f007 f8f6 	bl	800c6f0 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005504:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	001a      	movs	r2, r3
 800550a:	4b34      	ldr	r3, [pc, #208]	@ (80055dc <ESP_Upkeep+0x3b4>)
 800550c:	5c9a      	ldrb	r2, [r3, r2]
 800550e:	4b26      	ldr	r3, [pc, #152]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005510:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005512:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 8005518:	4b31      	ldr	r3, [pc, #196]	@ (80055e0 <ESP_Upkeep+0x3b8>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d100      	bne.n	8005522 <ESP_Upkeep+0x2fa>
 8005520:	e28c      	b.n	8005a3c <ESP_Upkeep+0x814>
 8005522:	4b33      	ldr	r3, [pc, #204]	@ (80055f0 <ESP_Upkeep+0x3c8>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d100      	bne.n	800552c <ESP_Upkeep+0x304>
 800552a:	e287      	b.n	8005a3c <ESP_Upkeep+0x814>
 800552c:	4b32      	ldr	r3, [pc, #200]	@ (80055f8 <ESP_Upkeep+0x3d0>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d100      	bne.n	8005536 <ESP_Upkeep+0x30e>
 8005534:	e282      	b.n	8005a3c <ESP_Upkeep+0x814>
 8005536:	4b32      	ldr	r3, [pc, #200]	@ (8005600 <ESP_Upkeep+0x3d8>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d100      	bne.n	8005540 <ESP_Upkeep+0x318>
 800553e:	e27d      	b.n	8005a3c <ESP_Upkeep+0x814>
        memcpy(ATCommandArray, AT_SNTP, 4);
 8005540:	4b34      	ldr	r3, [pc, #208]	@ (8005614 <ESP_Upkeep+0x3ec>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	4b25      	ldr	r3, [pc, #148]	@ (80055dc <ESP_Upkeep+0x3b4>)
 8005546:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8005548:	4b15      	ldr	r3, [pc, #84]	@ (80055a0 <ESP_Upkeep+0x378>)
 800554a:	2204      	movs	r2, #4
 800554c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800554e:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <ESP_Upkeep+0x3c4>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 8005554:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <ESP_Upkeep+0x384>)
 8005556:	2205      	movs	r2, #5
 8005558:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 800555a:	f008 fb1d 	bl	800db98 <HAL_GetTick>
 800555e:	0002      	movs	r2, r0
 8005560:	4b29      	ldr	r3, [pc, #164]	@ (8005608 <ESP_Upkeep+0x3e0>)
 8005562:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 8005564:	f007 f8c4 	bl	800c6f0 <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005568:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <ESP_Upkeep+0x3c4>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	001a      	movs	r2, r3
 800556e:	4b1b      	ldr	r3, [pc, #108]	@ (80055dc <ESP_Upkeep+0x3b4>)
 8005570:	5c9a      	ldrb	r2, [r3, r2]
 8005572:	4b0d      	ldr	r3, [pc, #52]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005574:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005576:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <ESP_Upkeep+0x388>)
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
      }
    break;
 800557c:	e25e      	b.n	8005a3c <ESP_Upkeep+0x814>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 800557e:	4b0a      	ldr	r3, [pc, #40]	@ (80055a8 <ESP_Upkeep+0x380>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	1dfc      	adds	r4, r7, #7
 8005584:	0018      	movs	r0, r3
 8005586:	f7ff fb73 	bl	8004c70 <AT_Send>
 800558a:	0003      	movs	r3, r0
 800558c:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800558e:	1dfb      	adds	r3, r7, #7
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d100      	bne.n	8005598 <ESP_Upkeep+0x370>
 8005596:	e253      	b.n	8005a40 <ESP_Upkeep+0x818>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005598:	4b01      	ldr	r3, [pc, #4]	@ (80055a0 <ESP_Upkeep+0x378>)
 800559a:	2203      	movs	r2, #3
 800559c:	701a      	strb	r2, [r3, #0]
        }
    break;
 800559e:	e24f      	b.n	8005a40 <ESP_Upkeep+0x818>
 80055a0:	20000028 	.word	0x20000028
 80055a4:	20000002 	.word	0x20000002
 80055a8:	2000099e 	.word	0x2000099e
 80055ac:	2000099f 	.word	0x2000099f
 80055b0:	2000099d 	.word	0x2000099d
 80055b4:	080226d0 	.word	0x080226d0
 80055b8:	08021f08 	.word	0x08021f08
 80055bc:	08023a0c 	.word	0x08023a0c
 80055c0:	20000548 	.word	0x20000548
 80055c4:	50000800 	.word	0x50000800
 80055c8:	50001c00 	.word	0x50001c00
 80055cc:	20000990 	.word	0x20000990
 80055d0:	20000448 	.word	0x20000448
 80055d4:	20000aa4 	.word	0x20000aa4
 80055d8:	2000002a 	.word	0x2000002a
 80055dc:	20000984 	.word	0x20000984
 80055e0:	20000549 	.word	0x20000549
 80055e4:	2000054a 	.word	0x2000054a
 80055e8:	20000004 	.word	0x20000004
 80055ec:	2000098e 	.word	0x2000098e
 80055f0:	2000054c 	.word	0x2000054c
 80055f4:	20000014 	.word	0x20000014
 80055f8:	2000054d 	.word	0x2000054d
 80055fc:	20000010 	.word	0x20000010
 8005600:	20000001 	.word	0x20000001
 8005604:	2000000c 	.word	0x2000000c
 8005608:	2000055c 	.word	0x2000055c
 800560c:	2000054b 	.word	0x2000054b
 8005610:	2000001c 	.word	0x2000001c
 8005614:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8005618:	4bdb      	ldr	r3, [pc, #876]	@ (8005988 <ESP_Upkeep+0x760>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	0018      	movs	r0, r3
 800561e:	f007 fec7 	bl	800d3b0 <TimestampIsReached>
 8005622:	1e03      	subs	r3, r0, #0
 8005624:	d100      	bne.n	8005628 <ESP_Upkeep+0x400>
 8005626:	e20d      	b.n	8005a44 <ESP_Upkeep+0x81c>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8005628:	4bd8      	ldr	r3, [pc, #864]	@ (800598c <ESP_Upkeep+0x764>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	0018      	movs	r0, r3
 800562e:	f7ff f9cb 	bl	80049c8 <DMA_ProcessBuffer>
 8005632:	0003      	movs	r3, r0
 8005634:	001a      	movs	r2, r3
 8005636:	4bd6      	ldr	r3, [pc, #856]	@ (8005990 <ESP_Upkeep+0x768>)
 8005638:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 800563a:	4bd5      	ldr	r3, [pc, #852]	@ (8005990 <ESP_Upkeep+0x768>)
 800563c:	781a      	ldrb	r2, [r3, #0]
 800563e:	4bd3      	ldr	r3, [pc, #844]	@ (800598c <ESP_Upkeep+0x764>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	1d7c      	adds	r4, r7, #5
 8005644:	0019      	movs	r1, r3
 8005646:	0010      	movs	r0, r2
 8005648:	f7ff fad0 	bl	8004bec <ATCompare>
 800564c:	0003      	movs	r3, r0
 800564e:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8005650:	4bcf      	ldr	r3, [pc, #828]	@ (8005990 <ESP_Upkeep+0x768>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d139      	bne.n	80056cc <ESP_Upkeep+0x4a4>
          if(ATCommand == AT_SENDDATA){
 8005658:	4bce      	ldr	r3, [pc, #824]	@ (8005994 <ESP_Upkeep+0x76c>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d108      	bne.n	8005672 <ESP_Upkeep+0x44a>
            ATCommand = AT_HTTPCPOST;
 8005660:	4bcc      	ldr	r3, [pc, #816]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005662:	220e      	movs	r2, #14
 8005664:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005666:	4bc9      	ldr	r3, [pc, #804]	@ (800598c <ESP_Upkeep+0x764>)
 8005668:	2202      	movs	r2, #2
 800566a:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 800566c:	4bca      	ldr	r3, [pc, #808]	@ (8005998 <ESP_Upkeep+0x770>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 8005672:	4bca      	ldr	r3, [pc, #808]	@ (800599c <ESP_Upkeep+0x774>)
 8005674:	2204      	movs	r2, #4
 8005676:	701a      	strb	r2, [r3, #0]
          errorcntr++;
 8005678:	4bc9      	ldr	r3, [pc, #804]	@ (80059a0 <ESP_Upkeep+0x778>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	3301      	adds	r3, #1
 800567e:	b2da      	uxtb	r2, r3
 8005680:	4bc7      	ldr	r3, [pc, #796]	@ (80059a0 <ESP_Upkeep+0x778>)
 8005682:	701a      	strb	r2, [r3, #0]
          if (errorcntr == ESP_MAX_RETRANSMITIONS) {
 8005684:	4bc6      	ldr	r3, [pc, #792]	@ (80059a0 <ESP_Upkeep+0x778>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d11f      	bne.n	80056cc <ESP_Upkeep+0x4a4>
            ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 800568c:	f008 fa84 	bl	800db98 <HAL_GetTick>
 8005690:	0003      	movs	r3, r0
 8005692:	4ac4      	ldr	r2, [pc, #784]	@ (80059a4 <ESP_Upkeep+0x77c>)
 8005694:	189a      	adds	r2, r3, r2
 8005696:	4bbc      	ldr	r3, [pc, #752]	@ (8005988 <ESP_Upkeep+0x760>)
 8005698:	601a      	str	r2, [r3, #0]
            ESPTransmitDone = true;
 800569a:	4bc3      	ldr	r3, [pc, #780]	@ (80059a8 <ESP_Upkeep+0x780>)
 800569c:	2201      	movs	r2, #1
 800569e:	701a      	strb	r2, [r3, #0]
            ResetESPIndicator();
 80056a0:	f007 f83e 	bl	800c720 <ResetESPIndicator>
            clearDMABuffer();
 80056a4:	f7ff fa94 	bl	8004bd0 <clearDMABuffer>
            stop = HAL_GetTick();
 80056a8:	f008 fa76 	bl	800db98 <HAL_GetTick>
 80056ac:	0002      	movs	r2, r0
 80056ae:	4bbf      	ldr	r3, [pc, #764]	@ (80059ac <ESP_Upkeep+0x784>)
 80056b0:	601a      	str	r2, [r3, #0]
            Debug("ESP to many retransmits, terminated after %lu ms", (stop-start));
 80056b2:	4bbe      	ldr	r3, [pc, #760]	@ (80059ac <ESP_Upkeep+0x784>)
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4bbe      	ldr	r3, [pc, #760]	@ (80059b0 <ESP_Upkeep+0x788>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	4abd      	ldr	r2, [pc, #756]	@ (80059b4 <ESP_Upkeep+0x78c>)
 80056be:	49be      	ldr	r1, [pc, #760]	@ (80059b8 <ESP_Upkeep+0x790>)
 80056c0:	2003      	movs	r0, #3
 80056c2:	f007 fecb 	bl	800d45c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 80056c6:	4bb5      	ldr	r3, [pc, #724]	@ (800599c <ESP_Upkeep+0x774>)
 80056c8:	220d      	movs	r2, #13
 80056ca:	701a      	strb	r2, [r3, #0]
          }
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80056cc:	4bb0      	ldr	r3, [pc, #704]	@ (8005990 <ESP_Upkeep+0x768>)
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d106      	bne.n	80056e2 <ESP_Upkeep+0x4ba>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056d4:	f008 fa60 	bl	800db98 <HAL_GetTick>
 80056d8:	0003      	movs	r3, r0
 80056da:	330a      	adds	r3, #10
 80056dc:	001a      	movs	r2, r3
 80056de:	4baa      	ldr	r3, [pc, #680]	@ (8005988 <ESP_Upkeep+0x760>)
 80056e0:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 80056e2:	4bab      	ldr	r3, [pc, #684]	@ (8005990 <ESP_Upkeep+0x768>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b0a      	cmp	r3, #10
 80056e8:	d106      	bne.n	80056f8 <ESP_Upkeep+0x4d0>
          ESPTimeStamp = HAL_GetTick() + 10;
 80056ea:	f008 fa55 	bl	800db98 <HAL_GetTick>
 80056ee:	0003      	movs	r3, r0
 80056f0:	330a      	adds	r3, #10
 80056f2:	001a      	movs	r2, r3
 80056f4:	4ba4      	ldr	r3, [pc, #656]	@ (8005988 <ESP_Upkeep+0x760>)
 80056f6:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80056f8:	4ba5      	ldr	r3, [pc, #660]	@ (8005990 <ESP_Upkeep+0x768>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b06      	cmp	r3, #6
 80056fe:	d116      	bne.n	800572e <ESP_Upkeep+0x506>
          if(ATCommand != AT_SENDDATA){
 8005700:	4ba4      	ldr	r3, [pc, #656]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b0f      	cmp	r3, #15
 8005706:	d003      	beq.n	8005710 <ESP_Upkeep+0x4e8>
            EspState = ESP_STATE_SEND;
 8005708:	4ba4      	ldr	r3, [pc, #656]	@ (800599c <ESP_Upkeep+0x774>)
 800570a:	2204      	movs	r2, #4
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e00e      	b.n	800572e <ESP_Upkeep+0x506>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005710:	4ba0      	ldr	r3, [pc, #640]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005712:	220e      	movs	r2, #14
 8005714:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8005716:	4ba0      	ldr	r3, [pc, #640]	@ (8005998 <ESP_Upkeep+0x770>)
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	3b01      	subs	r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b9e      	ldr	r3, [pc, #632]	@ (8005998 <ESP_Upkeep+0x770>)
 8005720:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005722:	4b9a      	ldr	r3, [pc, #616]	@ (800598c <ESP_Upkeep+0x764>)
 8005724:	2202      	movs	r2, #2
 8005726:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005728:	4b9c      	ldr	r3, [pc, #624]	@ (800599c <ESP_Upkeep+0x774>)
 800572a:	2204      	movs	r2, #4
 800572c:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800572e:	1d7b      	adds	r3, r7, #5
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d100      	bne.n	8005738 <ESP_Upkeep+0x510>
 8005736:	e185      	b.n	8005a44 <ESP_Upkeep+0x81c>
          EspState = ESP_STATE_NEXT_AT;
 8005738:	4b98      	ldr	r3, [pc, #608]	@ (800599c <ESP_Upkeep+0x774>)
 800573a:	2205      	movs	r2, #5
 800573c:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800573e:	e181      	b.n	8005a44 <ESP_Upkeep+0x81c>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005740:	4b95      	ldr	r3, [pc, #596]	@ (8005998 <ESP_Upkeep+0x770>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4b93      	ldr	r3, [pc, #588]	@ (8005998 <ESP_Upkeep+0x770>)
 800574a:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 800574c:	4b92      	ldr	r3, [pc, #584]	@ (8005998 <ESP_Upkeep+0x770>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	001a      	movs	r2, r3
 8005752:	4b9a      	ldr	r3, [pc, #616]	@ (80059bc <ESP_Upkeep+0x794>)
 8005754:	5c9a      	ldrb	r2, [r3, r2]
 8005756:	4b8f      	ldr	r3, [pc, #572]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005758:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 800575a:	4b8e      	ldr	r3, [pc, #568]	@ (8005994 <ESP_Upkeep+0x76c>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d102      	bne.n	8005768 <ESP_Upkeep+0x540>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8005762:	4b8a      	ldr	r3, [pc, #552]	@ (800598c <ESP_Upkeep+0x764>)
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8005768:	4b8a      	ldr	r3, [pc, #552]	@ (8005994 <ESP_Upkeep+0x76c>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b0e      	cmp	r3, #14
 800576e:	d102      	bne.n	8005776 <ESP_Upkeep+0x54e>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8005770:	4b86      	ldr	r3, [pc, #536]	@ (800598c <ESP_Upkeep+0x764>)
 8005772:	2202      	movs	r2, #2
 8005774:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8005776:	4b87      	ldr	r3, [pc, #540]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b0e      	cmp	r3, #14
 800577c:	d006      	beq.n	800578c <ESP_Upkeep+0x564>
 800577e:	4b85      	ldr	r3, [pc, #532]	@ (8005994 <ESP_Upkeep+0x76c>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	2b03      	cmp	r3, #3
 8005784:	d002      	beq.n	800578c <ESP_Upkeep+0x564>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005786:	4b81      	ldr	r3, [pc, #516]	@ (800598c <ESP_Upkeep+0x764>)
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 800578c:	4b81      	ldr	r3, [pc, #516]	@ (8005994 <ESP_Upkeep+0x76c>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b11      	cmp	r3, #17
 8005792:	d102      	bne.n	800579a <ESP_Upkeep+0x572>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 8005794:	4b7d      	ldr	r3, [pc, #500]	@ (800598c <ESP_Upkeep+0x764>)
 8005796:	2205      	movs	r2, #5
 8005798:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 800579a:	4b80      	ldr	r3, [pc, #512]	@ (800599c <ESP_Upkeep+0x774>)
 800579c:	2204      	movs	r2, #4
 800579e:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80057a0:	4b7c      	ldr	r3, [pc, #496]	@ (8005994 <ESP_Upkeep+0x76c>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b14      	cmp	r3, #20
 80057a6:	d000      	beq.n	80057aa <ESP_Upkeep+0x582>
 80057a8:	e14e      	b.n	8005a48 <ESP_Upkeep+0x820>
        if(Mode == AT_MODE_SEND){
 80057aa:	4b85      	ldr	r3, [pc, #532]	@ (80059c0 <ESP_Upkeep+0x798>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d122      	bne.n	80057f8 <ESP_Upkeep+0x5d0>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80057b2:	f008 f9f1 	bl	800db98 <HAL_GetTick>
 80057b6:	0003      	movs	r3, r0
 80057b8:	4a7a      	ldr	r2, [pc, #488]	@ (80059a4 <ESP_Upkeep+0x77c>)
 80057ba:	189a      	adds	r2, r3, r2
 80057bc:	4b72      	ldr	r3, [pc, #456]	@ (8005988 <ESP_Upkeep+0x760>)
 80057be:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 80057c0:	f006 ffae 	bl	800c720 <ResetESPIndicator>
          clearDMABuffer();
 80057c4:	f7ff fa04 	bl	8004bd0 <clearDMABuffer>
          stop = HAL_GetTick();
 80057c8:	f008 f9e6 	bl	800db98 <HAL_GetTick>
 80057cc:	0002      	movs	r2, r0
 80057ce:	4b77      	ldr	r3, [pc, #476]	@ (80059ac <ESP_Upkeep+0x784>)
 80057d0:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 80057d2:	4b76      	ldr	r3, [pc, #472]	@ (80059ac <ESP_Upkeep+0x784>)
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b76      	ldr	r3, [pc, #472]	@ (80059b0 <ESP_Upkeep+0x788>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	4a79      	ldr	r2, [pc, #484]	@ (80059c4 <ESP_Upkeep+0x79c>)
 80057de:	4976      	ldr	r1, [pc, #472]	@ (80059b8 <ESP_Upkeep+0x790>)
 80057e0:	2003      	movs	r0, #3
 80057e2:	f007 fe3b 	bl	800d45c <CreateLine>
          showTime();
 80057e6:	f000 fcbb 	bl	8006160 <showTime>
          ESPTransmitDone = true;
 80057ea:	4b6f      	ldr	r3, [pc, #444]	@ (80059a8 <ESP_Upkeep+0x780>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_DEINIT;
 80057f0:	4b6a      	ldr	r3, [pc, #424]	@ (800599c <ESP_Upkeep+0x774>)
 80057f2:	220d      	movs	r2, #13
 80057f4:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 80057f6:	e127      	b.n	8005a48 <ESP_Upkeep+0x820>
        else if (Mode == AT_MODE_GETTIME) {
 80057f8:	4b71      	ldr	r3, [pc, #452]	@ (80059c0 <ESP_Upkeep+0x798>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b05      	cmp	r3, #5
 80057fe:	d12e      	bne.n	800585e <ESP_Upkeep+0x636>
            setTime = false;
 8005800:	4b71      	ldr	r3, [pc, #452]	@ (80059c8 <ESP_Upkeep+0x7a0>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 8005806:	f008 f9c7 	bl	800db98 <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	4a6f      	ldr	r2, [pc, #444]	@ (80059cc <ESP_Upkeep+0x7a4>)
 800580e:	189a      	adds	r2, r3, r2
 8005810:	4b6f      	ldr	r3, [pc, #444]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005812:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005814:	4b6e      	ldr	r3, [pc, #440]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a6e      	ldr	r2, [pc, #440]	@ (80059d4 <ESP_Upkeep+0x7ac>)
 800581a:	4967      	ldr	r1, [pc, #412]	@ (80059b8 <ESP_Upkeep+0x790>)
 800581c:	2003      	movs	r0, #3
 800581e:	f007 fe1d 	bl	800d45c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005822:	4b6d      	ldr	r3, [pc, #436]	@ (80059d8 <ESP_Upkeep+0x7b0>)
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	4b58      	ldr	r3, [pc, #352]	@ (8005988 <ESP_Upkeep+0x760>)
 8005828:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 800582a:	f006 ff79 	bl	800c720 <ResetESPIndicator>
            clearDMABuffer();
 800582e:	f7ff f9cf 	bl	8004bd0 <clearDMABuffer>
            stop = HAL_GetTick();
 8005832:	f008 f9b1 	bl	800db98 <HAL_GetTick>
 8005836:	0002      	movs	r2, r0
 8005838:	4b5c      	ldr	r3, [pc, #368]	@ (80059ac <ESP_Upkeep+0x784>)
 800583a:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 800583c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ac <ESP_Upkeep+0x784>)
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	4b5b      	ldr	r3, [pc, #364]	@ (80059b0 <ESP_Upkeep+0x788>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	4a65      	ldr	r2, [pc, #404]	@ (80059dc <ESP_Upkeep+0x7b4>)
 8005848:	495b      	ldr	r1, [pc, #364]	@ (80059b8 <ESP_Upkeep+0x790>)
 800584a:	2003      	movs	r0, #3
 800584c:	f007 fe06 	bl	800d45c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 8005850:	4b52      	ldr	r3, [pc, #328]	@ (800599c <ESP_Upkeep+0x774>)
 8005852:	220d      	movs	r2, #13
 8005854:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005856:	4b5a      	ldr	r3, [pc, #360]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005858:	2202      	movs	r2, #2
 800585a:	701a      	strb	r2, [r3, #0]
    break;
 800585c:	e0f4      	b.n	8005a48 <ESP_Upkeep+0x820>
          EspState = ESP_STATE_RESET;
 800585e:	4b4f      	ldr	r3, [pc, #316]	@ (800599c <ESP_Upkeep+0x774>)
 8005860:	2209      	movs	r2, #9
 8005862:	701a      	strb	r2, [r3, #0]
    break;
 8005864:	e0f0      	b.n	8005a48 <ESP_Upkeep+0x820>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 8005866:	4b5e      	ldr	r3, [pc, #376]	@ (80059e0 <ESP_Upkeep+0x7b8>)
 8005868:	2200      	movs	r2, #0
 800586a:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 800586c:	4b5d      	ldr	r3, [pc, #372]	@ (80059e4 <ESP_Upkeep+0x7bc>)
 800586e:	2200      	movs	r2, #0
 8005870:	2101      	movs	r1, #1
 8005872:	0018      	movs	r0, r3
 8005874:	f009 fc0b 	bl	800f08e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8005878:	2001      	movs	r0, #1
 800587a:	f008 f997 	bl	800dbac <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	011b      	lsls	r3, r3, #4
 8005882:	4859      	ldr	r0, [pc, #356]	@ (80059e8 <ESP_Upkeep+0x7c0>)
 8005884:	2200      	movs	r2, #0
 8005886:	0019      	movs	r1, r3
 8005888:	f009 fc01 	bl	800f08e <HAL_GPIO_WritePin>
      HAL_Delay(1);
 800588c:	2001      	movs	r0, #1
 800588e:	f008 f98d 	bl	800dbac <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 8005892:	4b54      	ldr	r3, [pc, #336]	@ (80059e4 <ESP_Upkeep+0x7bc>)
 8005894:	2200      	movs	r2, #0
 8005896:	2102      	movs	r1, #2
 8005898:	0018      	movs	r0, r3
 800589a:	f009 fbf8 	bl	800f08e <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 800589e:	4b3f      	ldr	r3, [pc, #252]	@ (800599c <ESP_Upkeep+0x774>)
 80058a0:	2209      	movs	r2, #9
 80058a2:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80058a4:	2001      	movs	r0, #1
 80058a6:	f008 f981 	bl	800dbac <HAL_Delay>
      errorcntr = 0;
 80058aa:	4b3d      	ldr	r3, [pc, #244]	@ (80059a0 <ESP_Upkeep+0x778>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
      break;
 80058b0:	e0cd      	b.n	8005a4e <ESP_Upkeep+0x826>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80058b2:	4b35      	ldr	r3, [pc, #212]	@ (8005988 <ESP_Upkeep+0x760>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f007 fd7a 	bl	800d3b0 <TimestampIsReached>
 80058bc:	1e03      	subs	r3, r0, #0
 80058be:	d103      	bne.n	80058c8 <ESP_Upkeep+0x6a0>
 80058c0:	4b4a      	ldr	r3, [pc, #296]	@ (80059ec <ESP_Upkeep+0x7c4>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d035      	beq.n	8005934 <ESP_Upkeep+0x70c>
        if(Mode == AT_MODE_INIT){
 80058c8:	4b3d      	ldr	r3, [pc, #244]	@ (80059c0 <ESP_Upkeep+0x798>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <ESP_Upkeep+0x6b4>
          InitIsDone = true;
 80058d0:	4b47      	ldr	r3, [pc, #284]	@ (80059f0 <ESP_Upkeep+0x7c8>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80058d6:	4b31      	ldr	r3, [pc, #196]	@ (800599c <ESP_Upkeep+0x774>)
 80058d8:	220b      	movs	r2, #11
 80058da:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 80058dc:	4b38      	ldr	r3, [pc, #224]	@ (80059c0 <ESP_Upkeep+0x798>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d108      	bne.n	80058f6 <ESP_Upkeep+0x6ce>
          ConnectionMade = true;
 80058e4:	4b43      	ldr	r3, [pc, #268]	@ (80059f4 <ESP_Upkeep+0x7cc>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	701a      	strb	r2, [r3, #0]
          beurs = true;
 80058ea:	4b43      	ldr	r3, [pc, #268]	@ (80059f8 <ESP_Upkeep+0x7d0>)
 80058ec:	2201      	movs	r2, #1
 80058ee:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 80058f0:	4b2a      	ldr	r3, [pc, #168]	@ (800599c <ESP_Upkeep+0x774>)
 80058f2:	220b      	movs	r2, #11
 80058f4:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 80058f6:	4b32      	ldr	r3, [pc, #200]	@ (80059c0 <ESP_Upkeep+0x798>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d102      	bne.n	8005904 <ESP_Upkeep+0x6dc>
          EspState = ESP_STATE_INIT;
 80058fe:	4b27      	ldr	r3, [pc, #156]	@ (800599c <ESP_Upkeep+0x774>)
 8005900:	2202      	movs	r2, #2
 8005902:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 8005904:	4b2e      	ldr	r3, [pc, #184]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d108      	bne.n	800591e <ESP_Upkeep+0x6f6>
          EspState = ESP_STATE_CONFIG;
 800590c:	4b23      	ldr	r3, [pc, #140]	@ (800599c <ESP_Upkeep+0x774>)
 800590e:	220e      	movs	r2, #14
 8005910:	701a      	strb	r2, [r3, #0]
          Debug("Do nothing until reset");
 8005912:	4a3a      	ldr	r2, [pc, #232]	@ (80059fc <ESP_Upkeep+0x7d4>)
 8005914:	4b28      	ldr	r3, [pc, #160]	@ (80059b8 <ESP_Upkeep+0x790>)
 8005916:	0019      	movs	r1, r3
 8005918:	2003      	movs	r0, #3
 800591a:	f007 fd9f 	bl	800d45c <CreateLine>
        }
        if(Mode == AT_MODE_TEST){
 800591e:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b04      	cmp	r3, #4
 8005924:	d127      	bne.n	8005976 <ESP_Upkeep+0x74e>
          EspState = ESP_STATE_MODE_SELECT;
 8005926:	4b1d      	ldr	r3, [pc, #116]	@ (800599c <ESP_Upkeep+0x774>)
 8005928:	220b      	movs	r2, #11
 800592a:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 800592c:	4b34      	ldr	r3, [pc, #208]	@ (8005a00 <ESP_Upkeep+0x7d8>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 8005932:	e020      	b.n	8005976 <ESP_Upkeep+0x74e>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005934:	4b26      	ldr	r3, [pc, #152]	@ (80059d0 <ESP_Upkeep+0x7a8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	0018      	movs	r0, r3
 800593a:	f007 fd39 	bl	800d3b0 <TimestampIsReached>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d100      	bne.n	8005944 <ESP_Upkeep+0x71c>
 8005942:	e083      	b.n	8005a4c <ESP_Upkeep+0x824>
        if(Mode == AT_MODE_SEND ) {
 8005944:	4b1e      	ldr	r3, [pc, #120]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d000      	beq.n	800594e <ESP_Upkeep+0x726>
 800594c:	e07e      	b.n	8005a4c <ESP_Upkeep+0x824>
            Mode = AT_MODE_GETTIME;
 800594e:	4b1c      	ldr	r3, [pc, #112]	@ (80059c0 <ESP_Upkeep+0x798>)
 8005950:	2205      	movs	r2, #5
 8005952:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005954:	4b11      	ldr	r3, [pc, #68]	@ (800599c <ESP_Upkeep+0x774>)
 8005956:	2202      	movs	r2, #2
 8005958:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 800595a:	4b0b      	ldr	r3, [pc, #44]	@ (8005988 <ESP_Upkeep+0x760>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4b1e      	ldr	r3, [pc, #120]	@ (80059d8 <ESP_Upkeep+0x7b0>)
 8005960:	601a      	str	r2, [r3, #0]
         setTime = true;
 8005962:	4b19      	ldr	r3, [pc, #100]	@ (80059c8 <ESP_Upkeep+0x7a0>)
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005968:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <ESP_Upkeep+0x7dc>)
 800596a:	4b13      	ldr	r3, [pc, #76]	@ (80059b8 <ESP_Upkeep+0x790>)
 800596c:	0019      	movs	r1, r3
 800596e:	2003      	movs	r0, #3
 8005970:	f007 fd74 	bl	800d45c <CreateLine>
        }
      }
      break;
 8005974:	e06a      	b.n	8005a4c <ESP_Upkeep+0x824>
 8005976:	e069      	b.n	8005a4c <ESP_Upkeep+0x824>

    case ESP_STATE_CONFIG:
//      Debug("Do nothing until reset");
      Process_PC_Config(GetUsbRxPointer());
 8005978:	f016 f8fa 	bl	801bb70 <GetUsbRxPointer>
 800597c:	0003      	movs	r3, r0
 800597e:	0018      	movs	r0, r3
 8005980:	f000 f8e6 	bl	8005b50 <Process_PC_Config>
      break;
 8005984:	e063      	b.n	8005a4e <ESP_Upkeep+0x826>
 8005986:	46c0      	nop			@ (mov r8, r8)
 8005988:	20000990 	.word	0x20000990
 800598c:	2000099d 	.word	0x2000099d
 8005990:	2000002a 	.word	0x2000002a
 8005994:	2000099e 	.word	0x2000099e
 8005998:	2000098e 	.word	0x2000098e
 800599c:	20000028 	.word	0x20000028
 80059a0:	2000098f 	.word	0x2000098f
 80059a4:	000493e0 	.word	0x000493e0
 80059a8:	2000054f 	.word	0x2000054f
 80059ac:	20000560 	.word	0x20000560
 80059b0:	2000055c 	.word	0x2000055c
 80059b4:	080226fc 	.word	0x080226fc
 80059b8:	08021f08 	.word	0x08021f08
 80059bc:	20000984 	.word	0x20000984
 80059c0:	2000099f 	.word	0x2000099f
 80059c4:	08022730 	.word	0x08022730
 80059c8:	20000001 	.word	0x20000001
 80059cc:	002c4020 	.word	0x002c4020
 80059d0:	20000994 	.word	0x20000994
 80059d4:	08022748 	.word	0x08022748
 80059d8:	20000998 	.word	0x20000998
 80059dc:	0802278c 	.word	0x0802278c
 80059e0:	20000548 	.word	0x20000548
 80059e4:	50001c00 	.word	0x50001c00
 80059e8:	50000800 	.word	0x50000800
 80059ec:	2000054b 	.word	0x2000054b
 80059f0:	20000549 	.word	0x20000549
 80059f4:	2000054c 	.word	0x2000054c
 80059f8:	2000054e 	.word	0x2000054e
 80059fc:	080227ac 	.word	0x080227ac
 8005a00:	2000054d 	.word	0x2000054d
 8005a04:	080227c4 	.word	0x080227c4

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8005a08:	4a14      	ldr	r2, [pc, #80]	@ (8005a5c <ESP_Upkeep+0x834>)
 8005a0a:	4b15      	ldr	r3, [pc, #84]	@ (8005a60 <ESP_Upkeep+0x838>)
 8005a0c:	0019      	movs	r1, r3
 8005a0e:	2003      	movs	r0, #3
 8005a10:	f007 fd24 	bl	800d45c <CreateLine>
      EspState = ESP_STATE_INIT;
 8005a14:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <ESP_Upkeep+0x83c>)
 8005a16:	2202      	movs	r2, #2
 8005a18:	701a      	strb	r2, [r3, #0]
      break;
 8005a1a:	e018      	b.n	8005a4e <ESP_Upkeep+0x826>

    default:
      // Handle unexpected state
      Debug("Something unknown went wrong with the ESP_STATE");
 8005a1c:	4a12      	ldr	r2, [pc, #72]	@ (8005a68 <ESP_Upkeep+0x840>)
 8005a1e:	4b10      	ldr	r3, [pc, #64]	@ (8005a60 <ESP_Upkeep+0x838>)
 8005a20:	0019      	movs	r1, r3
 8005a22:	2003      	movs	r0, #3
 8005a24:	f007 fd1a 	bl	800d45c <CreateLine>
      EspState = ESP_STATE_ERROR;
 8005a28:	4b0e      	ldr	r3, [pc, #56]	@ (8005a64 <ESP_Upkeep+0x83c>)
 8005a2a:	2207      	movs	r2, #7
 8005a2c:	701a      	strb	r2, [r3, #0]
      break;
 8005a2e:	e00e      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a30:	46c0      	nop			@ (mov r8, r8)
 8005a32:	e00c      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a34:	46c0      	nop			@ (mov r8, r8)
 8005a36:	e00a      	b.n	8005a4e <ESP_Upkeep+0x826>
        break;
 8005a38:	46c0      	nop			@ (mov r8, r8)
 8005a3a:	e008      	b.n	8005a4e <ESP_Upkeep+0x826>
    break;
 8005a3c:	46c0      	nop			@ (mov r8, r8)
 8005a3e:	e006      	b.n	8005a4e <ESP_Upkeep+0x826>
    break;
 8005a40:	46c0      	nop			@ (mov r8, r8)
 8005a42:	e004      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a44:	46c0      	nop			@ (mov r8, r8)
 8005a46:	e002      	b.n	8005a4e <ESP_Upkeep+0x826>
    break;
 8005a48:	46c0      	nop			@ (mov r8, r8)
 8005a4a:	e000      	b.n	8005a4e <ESP_Upkeep+0x826>
      break;
 8005a4c:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005a4e:	4b05      	ldr	r3, [pc, #20]	@ (8005a64 <ESP_Upkeep+0x83c>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
}
 8005a52:	0018      	movs	r0, r3
 8005a54:	46bd      	mov	sp, r7
 8005a56:	b002      	add	sp, #8
 8005a58:	bdb0      	pop	{r4, r5, r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	080227d4 	.word	0x080227d4
 8005a60:	08021f08 	.word	0x08021f08
 8005a64:	20000028 	.word	0x20000028
 8005a68:	080227e8 	.word	0x080227e8

08005a6c <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8005a74:	4b09      	ldr	r3, [pc, #36]	@ (8005a9c <I2CSensors_Init+0x30>)
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8005a7a:	4a09      	ldr	r2, [pc, #36]	@ (8005aa0 <I2CSensors_Init+0x34>)
 8005a7c:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <I2CSensors_Init+0x38>)
 8005a7e:	0011      	movs	r1, r2
 8005a80:	0018      	movs	r0, r3
 8005a82:	f001 fb2f 	bl	80070e4 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8005a86:	4a06      	ldr	r2, [pc, #24]	@ (8005aa0 <I2CSensors_Init+0x34>)
 8005a88:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <I2CSensors_Init+0x38>)
 8005a8a:	0011      	movs	r1, r2
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f001 f97f 	bl	8006d90 <Gas_Init>
}
 8005a92:	46c0      	nop			@ (mov r8, r8)
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b002      	add	sp, #8
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	20000aa8 	.word	0x20000aa8
 8005aa0:	08005afd 	.word	0x08005afd
 8005aa4:	08005aa9 	.word	0x08005aa9

08005aa8 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005aa8:	b5b0      	push	{r4, r5, r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6039      	str	r1, [r7, #0]
 8005ab0:	0011      	movs	r1, r2
 8005ab2:	1dfb      	adds	r3, r7, #7
 8005ab4:	1c02      	adds	r2, r0, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
 8005ab8:	1dbb      	adds	r3, r7, #6
 8005aba:	1c0a      	adds	r2, r1, #0
 8005abc:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005abe:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <ReadI2C+0x50>)
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	1dfb      	adds	r3, r7, #7
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	18db      	adds	r3, r3, r3
 8005aca:	b299      	uxth	r1, r3
 8005acc:	1dbb      	adds	r3, r7, #6
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	250f      	movs	r5, #15
 8005ad4:	197c      	adds	r4, r7, r5
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	f009 febe 	bl	800f858 <HAL_I2C_Master_Receive_DMA>
 8005adc:	0003      	movs	r3, r0
 8005ade:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005ae0:	197b      	adds	r3, r7, r5
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <ReadI2C+0x44>
        return false;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e000      	b.n	8005aee <ReadI2C+0x46>
    }
    return true;
 8005aec:	2301      	movs	r3, #1
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b004      	add	sp, #16
 8005af4:	bdb0      	pop	{r4, r5, r7, pc}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	20000aa8 	.word	0x20000aa8

08005afc <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005afc:	b5b0      	push	{r4, r5, r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6039      	str	r1, [r7, #0]
 8005b04:	0011      	movs	r1, r2
 8005b06:	1dfb      	adds	r3, r7, #7
 8005b08:	1c02      	adds	r2, r0, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	1dbb      	adds	r3, r7, #6
 8005b0e:	1c0a      	adds	r2, r1, #0
 8005b10:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8005b12:	4b0e      	ldr	r3, [pc, #56]	@ (8005b4c <WriteI2C+0x50>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	18db      	adds	r3, r3, r3
 8005b1e:	b299      	uxth	r1, r3
 8005b20:	1dbb      	adds	r3, r7, #6
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	250f      	movs	r5, #15
 8005b28:	197c      	adds	r4, r7, r5
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	f009 fd8e 	bl	800f64c <HAL_I2C_Master_Transmit_DMA>
 8005b30:	0003      	movs	r3, r0
 8005b32:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005b34:	197b      	adds	r3, r7, r5
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <WriteI2C+0x44>
        return false;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	e000      	b.n	8005b42 <WriteI2C+0x46>
    }
    return true;
 8005b40:	2301      	movs	r3, #1
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b004      	add	sp, #16
 8005b48:	bdb0      	pop	{r4, r5, r7, pc}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	20000aa8 	.word	0x20000aa8

08005b50 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b0c3      	sub	sp, #268	@ 0x10c
 8005b54:	af3e      	add	r7, sp, #248	@ 0xf8
 8005b56:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005b58:	f016 f82a 	bl	801bbb0 <GetUsbRxDataSize>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d971      	bls.n	8005c4a <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2123      	movs	r1, #35	@ 0x23
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	f019 fa20 	bl	801efb0 <strchr>
 8005b70:	0003      	movs	r3, r0
 8005b72:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d065      	beq.n	8005c46 <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	785a      	ldrb	r2, [r3, #1]
 8005b7e:	4b34      	ldr	r3, [pc, #208]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b80:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	789a      	ldrb	r2, [r3, #2]
 8005b86:	4b32      	ldr	r3, [pc, #200]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b88:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 8005b8a:	4b31      	ldr	r3, [pc, #196]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	3305      	adds	r3, #5
 8005b90:	001a      	movs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d351      	bcc.n	8005c3c <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	1cd9      	adds	r1, r3, #3
 8005b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c50 <Process_PC_Config+0x100>)
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8005c54 <Process_PC_Config+0x104>)
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f019 fad7 	bl	801f158 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 8005baa:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bac:	785b      	ldrb	r3, [r3, #1]
 8005bae:	3303      	adds	r3, #3
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	b21a      	sxth	r2, r3
 8005bbc:	4b24      	ldr	r3, [pc, #144]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	18cb      	adds	r3, r1, r3
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	b21b      	sxth	r3, r3
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	b299      	uxth	r1, r3
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bd2:	2381      	movs	r3, #129	@ 0x81
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bda:	2381      	movs	r3, #129	@ 0x81
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	5ad4      	ldrh	r4, [r2, r3]
 8005be0:	4b1b      	ldr	r3, [pc, #108]	@ (8005c50 <Process_PC_Config+0x100>)
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	3303      	adds	r3, #3
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0011      	movs	r1, r2
 8005bec:	0018      	movs	r0, r3
 8005bee:	f000 f975 	bl	8005edc <CRC16_ARC>
 8005bf2:	0003      	movs	r3, r0
 8005bf4:	429c      	cmp	r4, r3
 8005bf6:	d007      	beq.n	8005c08 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005bf8:	4b15      	ldr	r3, [pc, #84]	@ (8005c50 <Process_PC_Config+0x100>)
 8005bfa:	785a      	ldrb	r2, [r3, #1]
 8005bfc:	4b15      	ldr	r3, [pc, #84]	@ (8005c54 <Process_PC_Config+0x104>)
 8005bfe:	0019      	movs	r1, r3
 8005c00:	2001      	movs	r0, #1
 8005c02:	f000 f919 	bl	8005e38 <Create_Message>
 8005c06:	e016      	b.n	8005c36 <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005c08:	4c11      	ldr	r4, [pc, #68]	@ (8005c50 <Process_PC_Config+0x100>)
 8005c0a:	466b      	mov	r3, sp
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	0023      	movs	r3, r4
 8005c10:	3310      	adds	r3, #16
 8005c12:	22f4      	movs	r2, #244	@ 0xf4
 8005c14:	0019      	movs	r1, r3
 8005c16:	f019 fa9f 	bl	801f158 <memcpy>
 8005c1a:	6820      	ldr	r0, [r4, #0]
 8005c1c:	6861      	ldr	r1, [r4, #4]
 8005c1e:	68a2      	ldr	r2, [r4, #8]
 8005c20:	68e3      	ldr	r3, [r4, #12]
 8005c22:	f000 f819 	bl	8005c58 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <Process_PC_Config+0x100>)
 8005c28:	7818      	ldrb	r0, [r3, #0]
 8005c2a:	4b09      	ldr	r3, [pc, #36]	@ (8005c50 <Process_PC_Config+0x100>)
 8005c2c:	785a      	ldrb	r2, [r3, #1]
 8005c2e:	4b09      	ldr	r3, [pc, #36]	@ (8005c54 <Process_PC_Config+0x104>)
 8005c30:	0019      	movs	r1, r3
 8005c32:	f000 f901 	bl	8005e38 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005c36:	f015 ffa3 	bl	801bb80 <ResetUsbRxDataSize>
                return;
 8005c3a:	e006      	b.n	8005c4a <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	0018      	movs	r0, r3
 8005c40:	f015 ffc0 	bl	801bbc4 <GetUsbRxNextChunk>
 8005c44:	e001      	b.n	8005c4a <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005c46:	f015 ff9b 	bl	801bb80 <ResetUsbRxDataSize>
        }
    }
}
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b005      	add	sp, #20
 8005c4e:	bd90      	pop	{r4, r7, pc}
 8005c50:	20000aac 	.word	0x20000aac
 8005c54:	20000aae 	.word	0x20000aae

08005c58 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005c58:	b084      	sub	sp, #16
 8005c5a:	b5b0      	push	{r4, r5, r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	2518      	movs	r5, #24
 8005c62:	197c      	adds	r4, r7, r5
 8005c64:	6020      	str	r0, [r4, #0]
 8005c66:	6061      	str	r1, [r4, #4]
 8005c68:	60a2      	str	r2, [r4, #8]
 8005c6a:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005c6c:	197b      	adds	r3, r7, r5
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2bfe      	cmp	r3, #254	@ 0xfe
 8005c72:	d100      	bne.n	8005c76 <ProcessCmd+0x1e>
 8005c74:	e09c      	b.n	8005db0 <ProcessCmd+0x158>
 8005c76:	dd00      	ble.n	8005c7a <ProcessCmd+0x22>
 8005c78:	e0bc      	b.n	8005df4 <ProcessCmd+0x19c>
 8005c7a:	2b0c      	cmp	r3, #12
 8005c7c:	dc0a      	bgt.n	8005c94 <ProcessCmd+0x3c>
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	da00      	bge.n	8005c84 <ProcessCmd+0x2c>
 8005c82:	e0b7      	b.n	8005df4 <ProcessCmd+0x19c>
 8005c84:	2b0c      	cmp	r3, #12
 8005c86:	d900      	bls.n	8005c8a <ProcessCmd+0x32>
 8005c88:	e0b4      	b.n	8005df4 <ProcessCmd+0x19c>
 8005c8a:	009a      	lsls	r2, r3, #2
 8005c8c:	4b5d      	ldr	r3, [pc, #372]	@ (8005e04 <ProcessCmd+0x1ac>)
 8005c8e:	18d3      	adds	r3, r2, r3
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	469f      	mov	pc, r3
 8005c94:	2bfd      	cmp	r3, #253	@ 0xfd
 8005c96:	d100      	bne.n	8005c9a <ProcessCmd+0x42>
 8005c98:	e084      	b.n	8005da4 <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005c9a:	e0ab      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005c9c:	2118      	movs	r1, #24
 8005c9e:	187b      	adds	r3, r7, r1
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	001a      	movs	r2, r3
 8005ca4:	187b      	adds	r3, r7, r1
 8005ca6:	1c99      	adds	r1, r3, #2
 8005ca8:	4857      	ldr	r0, [pc, #348]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005caa:	230c      	movs	r3, #12
 8005cac:	f7fd fd08 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cb0:	e0a0      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cb2:	2118      	movs	r1, #24
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	001a      	movs	r2, r3
 8005cba:	187b      	adds	r3, r7, r1
 8005cbc:	1c99      	adds	r1, r3, #2
 8005cbe:	4853      	ldr	r0, [pc, #332]	@ (8005e0c <ProcessCmd+0x1b4>)
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	f7fd fcfd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cc6:	e095      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cc8:	2118      	movs	r1, #24
 8005cca:	187b      	adds	r3, r7, r1
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	001a      	movs	r2, r3
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	1c99      	adds	r1, r3, #2
 8005cd4:	484e      	ldr	r0, [pc, #312]	@ (8005e10 <ProcessCmd+0x1b8>)
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	f7fd fcf2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cdc:	e08a      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cde:	2118      	movs	r1, #24
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	187b      	adds	r3, r7, r1
 8005ce8:	1c99      	adds	r1, r3, #2
 8005cea:	484a      	ldr	r0, [pc, #296]	@ (8005e14 <ProcessCmd+0x1bc>)
 8005cec:	230c      	movs	r3, #12
 8005cee:	f7fd fce7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005cf2:	e07f      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005cf4:	2118      	movs	r1, #24
 8005cf6:	187b      	adds	r3, r7, r1
 8005cf8:	785b      	ldrb	r3, [r3, #1]
 8005cfa:	001a      	movs	r2, r3
 8005cfc:	187b      	adds	r3, r7, r1
 8005cfe:	1c99      	adds	r1, r3, #2
 8005d00:	4845      	ldr	r0, [pc, #276]	@ (8005e18 <ProcessCmd+0x1c0>)
 8005d02:	230c      	movs	r3, #12
 8005d04:	f7fd fcdc 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d08:	e074      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d0a:	2118      	movs	r1, #24
 8005d0c:	187b      	adds	r3, r7, r1
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	001a      	movs	r2, r3
 8005d12:	187b      	adds	r3, r7, r1
 8005d14:	1c99      	adds	r1, r3, #2
 8005d16:	4841      	ldr	r0, [pc, #260]	@ (8005e1c <ProcessCmd+0x1c4>)
 8005d18:	230c      	movs	r3, #12
 8005d1a:	f7fd fcd1 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d1e:	e069      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d20:	2118      	movs	r1, #24
 8005d22:	187b      	adds	r3, r7, r1
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	001a      	movs	r2, r3
 8005d28:	187b      	adds	r3, r7, r1
 8005d2a:	1c99      	adds	r1, r3, #2
 8005d2c:	483c      	ldr	r0, [pc, #240]	@ (8005e20 <ProcessCmd+0x1c8>)
 8005d2e:	230c      	movs	r3, #12
 8005d30:	f7fd fcc6 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d34:	e05e      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005d36:	2118      	movs	r1, #24
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	1c99      	adds	r1, r3, #2
 8005d42:	4838      	ldr	r0, [pc, #224]	@ (8005e24 <ProcessCmd+0x1cc>)
 8005d44:	231e      	movs	r3, #30
 8005d46:	f7fd fcbb 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d4a:	e053      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d4c:	2118      	movs	r1, #24
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	785b      	ldrb	r3, [r3, #1]
 8005d52:	001a      	movs	r2, r3
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	1c99      	adds	r1, r3, #2
 8005d58:	4833      	ldr	r0, [pc, #204]	@ (8005e28 <ProcessCmd+0x1d0>)
 8005d5a:	230c      	movs	r3, #12
 8005d5c:	f7fd fcb0 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d60:	e048      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d62:	2118      	movs	r1, #24
 8005d64:	187b      	adds	r3, r7, r1
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	001a      	movs	r2, r3
 8005d6a:	187b      	adds	r3, r7, r1
 8005d6c:	1c99      	adds	r1, r3, #2
 8005d6e:	482f      	ldr	r0, [pc, #188]	@ (8005e2c <ProcessCmd+0x1d4>)
 8005d70:	230c      	movs	r3, #12
 8005d72:	f7fd fca5 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d76:	e03d      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d78:	2118      	movs	r1, #24
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	001a      	movs	r2, r3
 8005d80:	187b      	adds	r3, r7, r1
 8005d82:	1c99      	adds	r1, r3, #2
 8005d84:	482a      	ldr	r0, [pc, #168]	@ (8005e30 <ProcessCmd+0x1d8>)
 8005d86:	230c      	movs	r3, #12
 8005d88:	f7fd fc9a 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005d8c:	e032      	b.n	8005df4 <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005d8e:	2118      	movs	r1, #24
 8005d90:	187b      	adds	r3, r7, r1
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	001a      	movs	r2, r3
 8005d96:	187b      	adds	r3, r7, r1
 8005d98:	1c99      	adds	r1, r3, #2
 8005d9a:	4826      	ldr	r0, [pc, #152]	@ (8005e34 <ProcessCmd+0x1dc>)
 8005d9c:	230c      	movs	r3, #12
 8005d9e:	f7fd fc8f 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005da2:	e027      	b.n	8005df4 <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005da4:	4b18      	ldr	r3, [pc, #96]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005da6:	21ba      	movs	r1, #186	@ 0xba
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7fd fcce 	bl	800374a <ClearEEprom>
        break;
 8005dae:	e021      	b.n	8005df4 <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005db0:	2118      	movs	r1, #24
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	789b      	ldrb	r3, [r3, #2]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	b21a      	sxth	r2, r3
 8005dba:	187b      	adds	r3, r7, r1
 8005dbc:	78db      	ldrb	r3, [r3, #3]
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b21a      	sxth	r2, r3
 8005dc4:	1dbb      	adds	r3, r7, #6
 8005dc6:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005dc8:	1dbb      	adds	r3, r7, #6
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	23c0      	movs	r3, #192	@ 0xc0
 8005dce:	015b      	lsls	r3, r3, #5
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d207      	bcs.n	8005de4 <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005dd4:	1dbb      	adds	r3, r7, #6
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005dda:	0019      	movs	r1, r3
 8005ddc:	0010      	movs	r0, r2
 8005dde:	f7fd fcb4 	bl	800374a <ClearEEprom>
            break;
 8005de2:	e006      	b.n	8005df2 <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005de4:	23c0      	movs	r3, #192	@ 0xc0
 8005de6:	015b      	lsls	r3, r3, #5
 8005de8:	4a07      	ldr	r2, [pc, #28]	@ (8005e08 <ProcessCmd+0x1b0>)
 8005dea:	0019      	movs	r1, r3
 8005dec:	0010      	movs	r0, r2
 8005dee:	f7fd fcac 	bl	800374a <ClearEEprom>
            break;
 8005df2:	46c0      	nop			@ (mov r8, r8)
}
 8005df4:	46c0      	nop			@ (mov r8, r8)
 8005df6:	46bd      	mov	sp, r7
 8005df8:	b002      	add	sp, #8
 8005dfa:	bcb0      	pop	{r4, r5, r7}
 8005dfc:	bc08      	pop	{r3}
 8005dfe:	b004      	add	sp, #16
 8005e00:	4718      	bx	r3
 8005e02:	46c0      	nop			@ (mov r8, r8)
 8005e04:	08023a4c 	.word	0x08023a4c
 8005e08:	08080000 	.word	0x08080000
 8005e0c:	0808000c 	.word	0x0808000c
 8005e10:	08080018 	.word	0x08080018
 8005e14:	08080024 	.word	0x08080024
 8005e18:	08080030 	.word	0x08080030
 8005e1c:	0808003c 	.word	0x0808003c
 8005e20:	08080048 	.word	0x08080048
 8005e24:	08080090 	.word	0x08080090
 8005e28:	08080078 	.word	0x08080078
 8005e2c:	0808006c 	.word	0x0808006c
 8005e30:	08080060 	.word	0x08080060
 8005e34:	08080054 	.word	0x08080054

08005e38 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6039      	str	r1, [r7, #0]
 8005e40:	0011      	movs	r1, r2
 8005e42:	1dfb      	adds	r3, r7, #7
 8005e44:	1c02      	adds	r2, r0, #0
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	1dbb      	adds	r3, r7, #6
 8005e4a:	1c0a      	adds	r2, r1, #0
 8005e4c:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005e4e:	2223      	movs	r2, #35	@ 0x23
 8005e50:	4b20      	ldr	r3, [pc, #128]	@ (8005ed4 <Create_Message+0x9c>)
 8005e52:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005e54:	4b1f      	ldr	r3, [pc, #124]	@ (8005ed4 <Create_Message+0x9c>)
 8005e56:	1dfa      	adds	r2, r7, #7
 8005e58:	7812      	ldrb	r2, [r2, #0]
 8005e5a:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed4 <Create_Message+0x9c>)
 8005e5e:	1dba      	adds	r2, r7, #6
 8005e60:	7812      	ldrb	r2, [r2, #0]
 8005e62:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005e64:	1dbb      	adds	r3, r7, #6
 8005e66:	781a      	ldrb	r2, [r3, #0]
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ed8 <Create_Message+0xa0>)
 8005e6c:	0018      	movs	r0, r3
 8005e6e:	f019 f973 	bl	801f158 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005e72:	1dbb      	adds	r3, r7, #6
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	250e      	movs	r5, #14
 8005e7a:	197b      	adds	r3, r7, r5
 8005e7c:	3203      	adds	r2, #3
 8005e7e:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005e80:	260c      	movs	r6, #12
 8005e82:	19bc      	adds	r4, r7, r6
 8005e84:	197b      	adds	r3, r7, r5
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <Create_Message+0x9c>)
 8005e8a:	0011      	movs	r1, r2
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 f825 	bl	8005edc <CRC16_ARC>
 8005e92:	0003      	movs	r3, r0
 8005e94:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005e96:	0030      	movs	r0, r6
 8005e98:	183b      	adds	r3, r7, r0
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	0a1b      	lsrs	r3, r3, #8
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	197b      	adds	r3, r7, r5
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b2d1      	uxtb	r1, r2
 8005ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed4 <Create_Message+0x9c>)
 8005ea8:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005eaa:	197b      	adds	r3, r7, r5
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	183a      	adds	r2, r7, r0
 8005eb2:	8812      	ldrh	r2, [r2, #0]
 8005eb4:	b2d1      	uxtb	r1, r2
 8005eb6:	4a07      	ldr	r2, [pc, #28]	@ (8005ed4 <Create_Message+0x9c>)
 8005eb8:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005eba:	197b      	adds	r3, r7, r5
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	4b04      	ldr	r3, [pc, #16]	@ (8005ed4 <Create_Message+0x9c>)
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f015 fe18 	bl	801bafc <CDC_Transmit_FS>
}
 8005ecc:	46c0      	nop			@ (mov r8, r8)
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b005      	add	sp, #20
 8005ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed4:	20000bb0 	.word	0x20000bb0
 8005ed8:	20000bb3 	.word	0x20000bb3

08005edc <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	000a      	movs	r2, r1
 8005ee6:	1cbb      	adds	r3, r7, #2
 8005ee8:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005eea:	2316      	movs	r3, #22
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	2200      	movs	r2, #0
 8005ef0:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	e02e      	b.n	8005f56 <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	18d3      	adds	r3, r2, r3
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	0019      	movs	r1, r3
 8005f02:	2216      	movs	r2, #22
 8005f04:	18bb      	adds	r3, r7, r2
 8005f06:	18ba      	adds	r2, r7, r2
 8005f08:	8812      	ldrh	r2, [r2, #0]
 8005f0a:	404a      	eors	r2, r1
 8005f0c:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	e01a      	b.n	8005f4a <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005f14:	2116      	movs	r1, #22
 8005f16:	187b      	adds	r3, r7, r1
 8005f18:	881b      	ldrh	r3, [r3, #0]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d00b      	beq.n	8005f38 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005f20:	187b      	adds	r3, r7, r1
 8005f22:	187a      	adds	r2, r7, r1
 8005f24:	8812      	ldrh	r2, [r2, #0]
 8005f26:	0852      	lsrs	r2, r2, #1
 8005f28:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	187a      	adds	r2, r7, r1
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	490f      	ldr	r1, [pc, #60]	@ (8005f70 <CRC16_ARC+0x94>)
 8005f32:	404a      	eors	r2, r1
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e005      	b.n	8005f44 <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005f38:	2216      	movs	r2, #22
 8005f3a:	18bb      	adds	r3, r7, r2
 8005f3c:	18ba      	adds	r2, r7, r2
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	0852      	lsrs	r2, r2, #1
 8005f42:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b07      	cmp	r3, #7
 8005f4e:	dde1      	ble.n	8005f14 <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3301      	adds	r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	1cbb      	adds	r3, r7, #2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	dbcb      	blt.n	8005ef8 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005f60:	2316      	movs	r3, #22
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	881b      	ldrh	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b006      	add	sp, #24
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	ffffa001 	.word	0xffffa001

08005f74 <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_14;
 8005f78:	4b26      	ldr	r3, [pc, #152]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005f7a:	4a27      	ldr	r2, [pc, #156]	@ (8006018 <ReadBatteryVoltage+0xa4>)
 8005f7c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005f7e:	4b25      	ldr	r3, [pc, #148]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005f80:	2280      	movs	r2, #128	@ 0x80
 8005f82:	0152      	lsls	r2, r2, #5
 8005f84:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005f86:	4a23      	ldr	r2, [pc, #140]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005f88:	4b24      	ldr	r3, [pc, #144]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005f8a:	0011      	movs	r1, r2
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f008 f8db 	bl	800e148 <HAL_ADC_ConfigChannel>
 8005f92:	1e03      	subs	r3, r0, #0
 8005f94:	d001      	beq.n	8005f9a <ReadBatteryVoltage+0x26>
    Error_Handler();
 8005f96:	f001 fde3 	bl	8007b60 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 8005f9a:	4b20      	ldr	r3, [pc, #128]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f007 ffd7 	bl	800df50 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8005fa2:	4b1e      	ldr	r3, [pc, #120]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f008 f826 	bl	800dff8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005fac:	4b1b      	ldr	r3, [pc, #108]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f008 f8be 	bl	800e130 <HAL_ADC_GetValue>
 8005fb4:	0002      	movs	r2, r0
 8005fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8006020 <ReadBatteryVoltage+0xac>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4353      	muls	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4919      	ldr	r1, [pc, #100]	@ (8006024 <ReadBatteryVoltage+0xb0>)
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f7fa f8ef 	bl	80001a4 <__udivsi3>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	001a      	movs	r2, r3
 8005fca:	4b17      	ldr	r3, [pc, #92]	@ (8006028 <ReadBatteryVoltage+0xb4>)
 8005fcc:	601a      	str	r2, [r3, #0]
  trueValue = (float)value/1000.0;
 8005fce:	4b16      	ldr	r3, [pc, #88]	@ (8006028 <ReadBatteryVoltage+0xb4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	0018      	movs	r0, r3
 8005fd4:	f7fb fb48 	bl	8001668 <__aeabi_ui2f>
 8005fd8:	1c03      	adds	r3, r0, #0
 8005fda:	4914      	ldr	r1, [pc, #80]	@ (800602c <ReadBatteryVoltage+0xb8>)
 8005fdc:	1c18      	adds	r0, r3, #0
 8005fde:	f7fa fdf9 	bl	8000bd4 <__aeabi_fdiv>
 8005fe2:	1c03      	adds	r3, r0, #0
 8005fe4:	1c1a      	adds	r2, r3, #0
 8005fe6:	4b12      	ldr	r3, [pc, #72]	@ (8006030 <ReadBatteryVoltage+0xbc>)
 8005fe8:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_14;
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005fec:	4a0a      	ldr	r2, [pc, #40]	@ (8006018 <ReadBatteryVoltage+0xa4>)
 8005fee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 8005ff0:	4b08      	ldr	r3, [pc, #32]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005ff2:	4a10      	ldr	r2, [pc, #64]	@ (8006034 <ReadBatteryVoltage+0xc0>)
 8005ff4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8005ff6:	4a07      	ldr	r2, [pc, #28]	@ (8006014 <ReadBatteryVoltage+0xa0>)
 8005ff8:	4b08      	ldr	r3, [pc, #32]	@ (800601c <ReadBatteryVoltage+0xa8>)
 8005ffa:	0011      	movs	r1, r2
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	f008 f8a3 	bl	800e148 <HAL_ADC_ConfigChannel>
 8006002:	1e03      	subs	r3, r0, #0
 8006004:	d001      	beq.n	800600a <ReadBatteryVoltage+0x96>
    Error_Handler();
 8006006:	f001 fdab 	bl	8007b60 <Error_Handler>
  }
  return trueValue;
 800600a:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <ReadBatteryVoltage+0xbc>)
 800600c:	681b      	ldr	r3, [r3, #0]
 }
 800600e:	1c18      	adds	r0, r3, #0
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000cb8 	.word	0x20000cb8
 8006018:	38004000 	.word	0x38004000
 800601c:	20000ce0 	.word	0x20000ce0
 8006020:	2000002c 	.word	0x2000002c
 8006024:	00000fff 	.word	0x00000fff
 8006028:	20000cc0 	.word	0x20000cc0
 800602c:	447a0000 	.word	0x447a0000
 8006030:	20000cc4 	.word	0x20000cc4
 8006034:	00001001 	.word	0x00001001

08006038 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
  sConfig.Channel = ADC_CHANNEL_15;
 800603c:	4b27      	ldr	r3, [pc, #156]	@ (80060dc <ReadSolarVoltage+0xa4>)
 800603e:	4a28      	ldr	r2, [pc, #160]	@ (80060e0 <ReadSolarVoltage+0xa8>)
 8006040:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8006042:	4b26      	ldr	r3, [pc, #152]	@ (80060dc <ReadSolarVoltage+0xa4>)
 8006044:	2280      	movs	r2, #128	@ 0x80
 8006046:	0152      	lsls	r2, r2, #5
 8006048:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800604a:	4a24      	ldr	r2, [pc, #144]	@ (80060dc <ReadSolarVoltage+0xa4>)
 800604c:	4b25      	ldr	r3, [pc, #148]	@ (80060e4 <ReadSolarVoltage+0xac>)
 800604e:	0011      	movs	r1, r2
 8006050:	0018      	movs	r0, r3
 8006052:	f008 f879 	bl	800e148 <HAL_ADC_ConfigChannel>
 8006056:	1e03      	subs	r3, r0, #0
 8006058:	d001      	beq.n	800605e <ReadSolarVoltage+0x26>
    Error_Handler();
 800605a:	f001 fd81 	bl	8007b60 <Error_Handler>
  }
  HAL_ADC_Start(&hadc);
 800605e:	4b21      	ldr	r3, [pc, #132]	@ (80060e4 <ReadSolarVoltage+0xac>)
 8006060:	0018      	movs	r0, r3
 8006062:	f007 ff75 	bl	800df50 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc, 1);
 8006066:	4b1f      	ldr	r3, [pc, #124]	@ (80060e4 <ReadSolarVoltage+0xac>)
 8006068:	2101      	movs	r1, #1
 800606a:	0018      	movs	r0, r3
 800606c:	f007 ffc4 	bl	800dff8 <HAL_ADC_PollForConversion>
  value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8006070:	4b1c      	ldr	r3, [pc, #112]	@ (80060e4 <ReadSolarVoltage+0xac>)
 8006072:	0018      	movs	r0, r3
 8006074:	f008 f85c 	bl	800e130 <HAL_ADC_GetValue>
 8006078:	0002      	movs	r2, r0
 800607a:	4b1b      	ldr	r3, [pc, #108]	@ (80060e8 <ReadSolarVoltage+0xb0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	435a      	muls	r2, r3
 8006080:	0013      	movs	r3, r2
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	189b      	adds	r3, r3, r2
 8006086:	4919      	ldr	r1, [pc, #100]	@ (80060ec <ReadSolarVoltage+0xb4>)
 8006088:	0018      	movs	r0, r3
 800608a:	f7fa f88b 	bl	80001a4 <__udivsi3>
 800608e:	0003      	movs	r3, r0
 8006090:	001a      	movs	r2, r3
 8006092:	4b17      	ldr	r3, [pc, #92]	@ (80060f0 <ReadSolarVoltage+0xb8>)
 8006094:	601a      	str	r2, [r3, #0]
  trueValue = (float)value / 1000.0;
 8006096:	4b16      	ldr	r3, [pc, #88]	@ (80060f0 <ReadSolarVoltage+0xb8>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	0018      	movs	r0, r3
 800609c:	f7fb fae4 	bl	8001668 <__aeabi_ui2f>
 80060a0:	1c03      	adds	r3, r0, #0
 80060a2:	4914      	ldr	r1, [pc, #80]	@ (80060f4 <ReadSolarVoltage+0xbc>)
 80060a4:	1c18      	adds	r0, r3, #0
 80060a6:	f7fa fd95 	bl	8000bd4 <__aeabi_fdiv>
 80060aa:	1c03      	adds	r3, r0, #0
 80060ac:	1c1a      	adds	r2, r3, #0
 80060ae:	4b12      	ldr	r3, [pc, #72]	@ (80060f8 <ReadSolarVoltage+0xc0>)
 80060b0:	601a      	str	r2, [r3, #0]
  /* Disable Channel 14 */
  sConfig.Channel = ADC_CHANNEL_15;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <ReadSolarVoltage+0xa4>)
 80060b4:	4a0a      	ldr	r2, [pc, #40]	@ (80060e0 <ReadSolarVoltage+0xa8>)
 80060b6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80060b8:	4b08      	ldr	r3, [pc, #32]	@ (80060dc <ReadSolarVoltage+0xa4>)
 80060ba:	4a10      	ldr	r2, [pc, #64]	@ (80060fc <ReadSolarVoltage+0xc4>)
 80060bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80060be:	4a07      	ldr	r2, [pc, #28]	@ (80060dc <ReadSolarVoltage+0xa4>)
 80060c0:	4b08      	ldr	r3, [pc, #32]	@ (80060e4 <ReadSolarVoltage+0xac>)
 80060c2:	0011      	movs	r1, r2
 80060c4:	0018      	movs	r0, r3
 80060c6:	f008 f83f 	bl	800e148 <HAL_ADC_ConfigChannel>
 80060ca:	1e03      	subs	r3, r0, #0
 80060cc:	d001      	beq.n	80060d2 <ReadSolarVoltage+0x9a>
    Error_Handler();
 80060ce:	f001 fd47 	bl	8007b60 <Error_Handler>
  }
  return trueValue;
 80060d2:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <ReadSolarVoltage+0xc0>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 }
 80060d6:	1c18      	adds	r0, r3, #0
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20000cb8 	.word	0x20000cb8
 80060e0:	3c008000 	.word	0x3c008000
 80060e4:	20000ce0 	.word	0x20000ce0
 80060e8:	2000002c 	.word	0x2000002c
 80060ec:	00000fff 	.word	0x00000fff
 80060f0:	20000cc8 	.word	0x20000cc8
 80060f4:	447a0000 	.word	0x447a0000
 80060f8:	20000ccc 	.word	0x20000ccc
 80060fc:	00001001 	.word	0x00001001

08006100 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool Check_USB_PowerOn(void){
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8006104:	23a0      	movs	r3, #160	@ 0xa0
 8006106:	05db      	lsls	r3, r3, #23
 8006108:	2180      	movs	r1, #128	@ 0x80
 800610a:	0018      	movs	r0, r3
 800610c:	f008 ffa2 	bl	800f054 <HAL_GPIO_ReadPin>
 8006110:	0003      	movs	r3, r0
 8006112:	1e5a      	subs	r2, r3, #1
 8006114:	4193      	sbcs	r3, r2
 8006116:	b2db      	uxtb	r3, r3
}
 8006118:	0018      	movs	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 800611e:	b580      	push	{r7, lr}
 8006120:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8006122:	2380      	movs	r3, #128	@ 0x80
 8006124:	021a      	lsls	r2, r3, #8
 8006126:	23a0      	movs	r3, #160	@ 0xa0
 8006128:	05db      	lsls	r3, r3, #23
 800612a:	0011      	movs	r1, r2
 800612c:	0018      	movs	r0, r3
 800612e:	f008 ff91 	bl	800f054 <HAL_GPIO_ReadPin>
 8006132:	0003      	movs	r3, r0
 8006134:	1e5a      	subs	r2, r3, #1
 8006136:	4193      	sbcs	r3, r2
 8006138:	b2db      	uxtb	r3, r3
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8006144:	4b05      	ldr	r3, [pc, #20]	@ (800615c <UserButton_Pressed+0x1c>)
 8006146:	2104      	movs	r1, #4
 8006148:	0018      	movs	r0, r3
 800614a:	f008 ff83 	bl	800f054 <HAL_GPIO_ReadPin>
 800614e:	0003      	movs	r3, r0
 8006150:	425a      	negs	r2, r3
 8006152:	4153      	adcs	r3, r2
 8006154:	b2db      	uxtb	r3, r3
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	50000c00 	.word	0x50000c00

08006160 <showTime>:

char systemUptime[16] = {0};

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime);

void showTime() {
 8006160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006162:	46d6      	mov	lr, sl
 8006164:	464f      	mov	r7, r9
 8006166:	4646      	mov	r6, r8
 8006168:	b5c0      	push	{r6, r7, lr}
 800616a:	b08e      	sub	sp, #56	@ 0x38
 800616c:	af08      	add	r7, sp, #32
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800616e:	003a      	movs	r2, r7
 8006170:	1d3b      	adds	r3, r7, #4
 8006172:	0011      	movs	r1, r2
 8006174:	0018      	movs	r0, r3
 8006176:	f000 f9f9 	bl	800656c <RTC_GetTime>
  UpdateSystemUptime();
 800617a:	f000 f83d 	bl	80061f8 <UpdateSystemUptime>
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800617e:	003b      	movs	r3, r7
 8006180:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006182:	4699      	mov	r9, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006184:	003b      	movs	r3, r7
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	1e5a      	subs	r2, r3, #1
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800618a:	4b18      	ldr	r3, [pc, #96]	@ (80061ec <showTime+0x8c>)
 800618c:	0092      	lsls	r2, r2, #2
 800618e:	58d2      	ldr	r2, [r2, r3]
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006190:	003b      	movs	r3, r7
 8006192:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 8006194:	469a      	mov	sl, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 8006196:	1d3b      	adds	r3, r7, #4
 8006198:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 800619a:	0019      	movs	r1, r3
      currentDate.Date, monthNames[currentDate.Month-1], currentDate.Year, currentTime.Hours, currentTime.Minutes,
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061a0:	001c      	movs	r4, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061a6:	001d      	movs	r5, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061a8:	4b11      	ldr	r3, [pc, #68]	@ (80061f0 <showTime+0x90>)
 80061aa:	881b      	ldrh	r3, [r3, #0]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061ac:	001e      	movs	r6, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061ae:	4b10      	ldr	r3, [pc, #64]	@ (80061f0 <showTime+0x90>)
 80061b0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061b2:	469c      	mov	ip, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061b4:	4b0e      	ldr	r3, [pc, #56]	@ (80061f0 <showTime+0x90>)
 80061b6:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061b8:	4698      	mov	r8, r3
      currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
 80061ba:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <showTime+0x90>)
 80061bc:	791b      	ldrb	r3, [r3, #4]
  printf("System time: %02d-%s-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm:%02ds\r\n",
 80061be:	480d      	ldr	r0, [pc, #52]	@ (80061f4 <showTime+0x94>)
 80061c0:	9306      	str	r3, [sp, #24]
 80061c2:	4643      	mov	r3, r8
 80061c4:	9305      	str	r3, [sp, #20]
 80061c6:	4663      	mov	r3, ip
 80061c8:	9304      	str	r3, [sp, #16]
 80061ca:	9603      	str	r6, [sp, #12]
 80061cc:	9502      	str	r5, [sp, #8]
 80061ce:	9401      	str	r4, [sp, #4]
 80061d0:	9100      	str	r1, [sp, #0]
 80061d2:	4653      	mov	r3, sl
 80061d4:	4649      	mov	r1, r9
 80061d6:	f018 fd2f 	bl	801ec38 <iprintf>
}
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b006      	add	sp, #24
 80061e0:	bce0      	pop	{r5, r6, r7}
 80061e2:	46ba      	mov	sl, r7
 80061e4:	46b1      	mov	r9, r6
 80061e6:	46a8      	mov	r8, r5
 80061e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	2000004c 	.word	0x2000004c
 80061f0:	20000cd0 	.word	0x20000cd0
 80061f4:	08022864 	.word	0x08022864

080061f8 <UpdateSystemUptime>:
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
  posixBootTime = makeTime(&currentDate, &currentTime);
}

void UpdateSystemUptime() {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  uint32_t uxUptime;
  uint32_t time;
  RTC_GetTime(&currentTime, &currentDate);
 80061fe:	003a      	movs	r2, r7
 8006200:	1d3b      	adds	r3, r7, #4
 8006202:	0011      	movs	r1, r2
 8006204:	0018      	movs	r0, r3
 8006206:	f000 f9b1 	bl	800656c <RTC_GetTime>
  uxUptime = makeTime(&currentDate, &currentTime) - posixBootTime;
 800620a:	1d3a      	adds	r2, r7, #4
 800620c:	003b      	movs	r3, r7
 800620e:	0011      	movs	r1, r2
 8006210:	0018      	movs	r0, r3
 8006212:	f000 fab9 	bl	8006788 <makeTime>
 8006216:	0002      	movs	r2, r0
 8006218:	4b1e      	ldr	r3, [pc, #120]	@ (8006294 <UpdateSystemUptime+0x9c>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	61fb      	str	r3, [r7, #28]
  time = uxUptime;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	61bb      	str	r3, [r7, #24]
  myUpTime.Seconds = time % 60;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	213c      	movs	r1, #60	@ 0x3c
 8006228:	0018      	movs	r0, r3
 800622a:	f7fa f841 	bl	80002b0 <__aeabi_uidivmod>
 800622e:	000b      	movs	r3, r1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b19      	ldr	r3, [pc, #100]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006234:	711a      	strb	r2, [r3, #4]
  time /= 60; // now it is minutes
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	213c      	movs	r1, #60	@ 0x3c
 800623a:	0018      	movs	r0, r3
 800623c:	f7f9 ffb2 	bl	80001a4 <__udivsi3>
 8006240:	0003      	movs	r3, r0
 8006242:	61bb      	str	r3, [r7, #24]
  myUpTime.Minutes = time % 60;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	213c      	movs	r1, #60	@ 0x3c
 8006248:	0018      	movs	r0, r3
 800624a:	f7fa f831 	bl	80002b0 <__aeabi_uidivmod>
 800624e:	000b      	movs	r3, r1
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4b11      	ldr	r3, [pc, #68]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006254:	70da      	strb	r2, [r3, #3]
  time /= 60; // now it is hours
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	213c      	movs	r1, #60	@ 0x3c
 800625a:	0018      	movs	r0, r3
 800625c:	f7f9 ffa2 	bl	80001a4 <__udivsi3>
 8006260:	0003      	movs	r3, r0
 8006262:	61bb      	str	r3, [r7, #24]
  myUpTime.Hour = time % 24;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	2118      	movs	r1, #24
 8006268:	0018      	movs	r0, r3
 800626a:	f7fa f821 	bl	80002b0 <__aeabi_uidivmod>
 800626e:	000b      	movs	r3, r1
 8006270:	b2da      	uxtb	r2, r3
 8006272:	4b09      	ldr	r3, [pc, #36]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006274:	709a      	strb	r2, [r3, #2]
  myUpTime.Day /= 24; // now it is days
 8006276:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	2118      	movs	r1, #24
 800627c:	0018      	movs	r0, r3
 800627e:	f7f9 ff91 	bl	80001a4 <__udivsi3>
 8006282:	0003      	movs	r3, r0
 8006284:	b29a      	uxth	r2, r3
 8006286:	4b04      	ldr	r3, [pc, #16]	@ (8006298 <UpdateSystemUptime+0xa0>)
 8006288:	801a      	strh	r2, [r3, #0]
//  Info("Current time is: %02d:%02d:%02d System uptime is: %dd %02dh:%02dm:%02ds",
//      currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUpTime.Day, myUpTime.Hour, myUpTime.Minutes, myUpTime.Seconds);
}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b008      	add	sp, #32
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			@ (mov r8, r8)
 8006294:	20000cdc 	.word	0x20000cdc
 8006298:	20000cd0 	.word	0x20000cd0

0800629c <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	0008      	movs	r0, r1
 80062a6:	0011      	movs	r1, r2
 80062a8:	1cfb      	adds	r3, r7, #3
 80062aa:	1c02      	adds	r2, r0, #0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	1cbb      	adds	r3, r7, #2
 80062b0:	1c0a      	adds	r2, r1, #0
 80062b2:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 80062b4:	230e      	movs	r3, #14
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	2200      	movs	r2, #0
 80062ba:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80062bc:	230f      	movs	r3, #15
 80062be:	18fb      	adds	r3, r7, r3
 80062c0:	1cfa      	adds	r2, r7, #3
 80062c2:	7812      	ldrb	r2, [r2, #0]
 80062c4:	701a      	strb	r2, [r3, #0]
 80062c6:	e015      	b.n	80062f4 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 80062c8:	200f      	movs	r0, #15
 80062ca:	183b      	adds	r3, r7, r0
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	18d2      	adds	r2, r2, r3
 80062d2:	240e      	movs	r4, #14
 80062d4:	193b      	adds	r3, r7, r4
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	7811      	ldrb	r1, [r2, #0]
 80062da:	2208      	movs	r2, #8
 80062dc:	18ba      	adds	r2, r7, r2
 80062de:	54d1      	strb	r1, [r2, r3]
    pos++;
 80062e0:	193b      	adds	r3, r7, r4
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	193b      	adds	r3, r7, r4
 80062e6:	3201      	adds	r2, #1
 80062e8:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 80062ea:	183b      	adds	r3, r7, r0
 80062ec:	781a      	ldrb	r2, [r3, #0]
 80062ee:	183b      	adds	r3, r7, r0
 80062f0:	3201      	adds	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	200f      	movs	r0, #15
 80062f6:	183a      	adds	r2, r7, r0
 80062f8:	1cbb      	adds	r3, r7, #2
 80062fa:	7812      	ldrb	r2, [r2, #0]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d9e2      	bls.n	80062c8 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006302:	230e      	movs	r3, #14
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2208      	movs	r2, #8
 800630a:	18ba      	adds	r2, r7, r2
 800630c:	2100      	movs	r1, #0
 800630e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006310:	1cfb      	adds	r3, r7, #3
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b13      	cmp	r3, #19
 8006316:	d849      	bhi.n	80063ac <aBuff2int+0x110>
    if (start == 17) { //month
 8006318:	1cfb      	adds	r3, r7, #3
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b11      	cmp	r3, #17
 800631e:	d122      	bne.n	8006366 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006320:	183b      	adds	r3, r7, r0
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	e018      	b.n	800635a <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006328:	240f      	movs	r4, #15
 800632a:	193b      	adds	r3, r7, r4
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	4b25      	ldr	r3, [pc, #148]	@ (80063c4 <aBuff2int+0x128>)
 8006330:	0092      	lsls	r2, r2, #2
 8006332:	58d2      	ldr	r2, [r2, r3]
 8006334:	2308      	movs	r3, #8
 8006336:	18fb      	adds	r3, r7, r3
 8006338:	0011      	movs	r1, r2
 800633a:	0018      	movs	r0, r3
 800633c:	f7f9 ff0c 	bl	8000158 <strcmp>
 8006340:	1e03      	subs	r3, r0, #0
 8006342:	d104      	bne.n	800634e <aBuff2int+0xb2>
          return i+1;
 8006344:	193b      	adds	r3, r7, r4
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	e035      	b.n	80063ba <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800634e:	210f      	movs	r1, #15
 8006350:	187b      	adds	r3, r7, r1
 8006352:	781a      	ldrb	r2, [r3, #0]
 8006354:	187b      	adds	r3, r7, r1
 8006356:	3201      	adds	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	230f      	movs	r3, #15
 800635c:	18fb      	adds	r3, r7, r3
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b0b      	cmp	r3, #11
 8006362:	d9e1      	bls.n	8006328 <aBuff2int+0x8c>
 8006364:	e022      	b.n	80063ac <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 8006366:	230f      	movs	r3, #15
 8006368:	18fb      	adds	r3, r7, r3
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	e018      	b.n	80063a2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 8006370:	240f      	movs	r4, #15
 8006372:	193b      	adds	r3, r7, r4
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	4b14      	ldr	r3, [pc, #80]	@ (80063c8 <aBuff2int+0x12c>)
 8006378:	0092      	lsls	r2, r2, #2
 800637a:	58d2      	ldr	r2, [r2, r3]
 800637c:	2308      	movs	r3, #8
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	0011      	movs	r1, r2
 8006382:	0018      	movs	r0, r3
 8006384:	f7f9 fee8 	bl	8000158 <strcmp>
 8006388:	1e03      	subs	r3, r0, #0
 800638a:	d104      	bne.n	8006396 <aBuff2int+0xfa>
          return i+1;
 800638c:	193b      	adds	r3, r7, r4
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	3301      	adds	r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	e011      	b.n	80063ba <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 8006396:	210f      	movs	r1, #15
 8006398:	187b      	adds	r3, r7, r1
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	187b      	adds	r3, r7, r1
 800639e:	3201      	adds	r2, #1
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	230f      	movs	r3, #15
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b06      	cmp	r3, #6
 80063aa:	d9e1      	bls.n	8006370 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80063ac:	2308      	movs	r3, #8
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	0018      	movs	r0, r3
 80063b2:	f017 f866 	bl	801d482 <atoi>
 80063b6:	0003      	movs	r3, r0
 80063b8:	b2db      	uxtb	r3, r3
}
 80063ba:	0018      	movs	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	b005      	add	sp, #20
 80063c0:	bd90      	pop	{r4, r7, pc}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	2000004c 	.word	0x2000004c
 80063c8:	20000030 	.word	0x20000030

080063cc <ParseTime>:

void ParseTime(char* buffer) {
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	b08b      	sub	sp, #44	@ 0x2c
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80063d4:	2508      	movs	r5, #8
 80063d6:	197a      	adds	r2, r7, r5
 80063d8:	240c      	movs	r4, #12
 80063da:	193b      	adds	r3, r7, r4
 80063dc:	0011      	movs	r1, r2
 80063de:	0018      	movs	r0, r3
 80063e0:	f000 f8c4 	bl	800656c <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2219      	movs	r2, #25
 80063e8:	2118      	movs	r1, #24
 80063ea:	0018      	movs	r0, r3
 80063ec:	f7ff ff56 	bl	800629c <aBuff2int>
 80063f0:	0003      	movs	r3, r0
 80063f2:	001a      	movs	r2, r3
 80063f4:	193b      	adds	r3, r7, r4
 80063f6:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	221c      	movs	r2, #28
 80063fc:	211b      	movs	r1, #27
 80063fe:	0018      	movs	r0, r3
 8006400:	f7ff ff4c 	bl	800629c <aBuff2int>
 8006404:	0003      	movs	r3, r0
 8006406:	001a      	movs	r2, r3
 8006408:	193b      	adds	r3, r7, r4
 800640a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	221f      	movs	r2, #31
 8006410:	211e      	movs	r1, #30
 8006412:	0018      	movs	r0, r3
 8006414:	f7ff ff42 	bl	800629c <aBuff2int>
 8006418:	0003      	movs	r3, r0
 800641a:	001a      	movs	r2, r3
 800641c:	193b      	adds	r3, r7, r4
 800641e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2224      	movs	r2, #36	@ 0x24
 8006424:	2123      	movs	r1, #35	@ 0x23
 8006426:	0018      	movs	r0, r3
 8006428:	f7ff ff38 	bl	800629c <aBuff2int>
 800642c:	0003      	movs	r3, r0
 800642e:	001a      	movs	r2, r3
 8006430:	002e      	movs	r6, r5
 8006432:	19bb      	adds	r3, r7, r6
 8006434:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2213      	movs	r2, #19
 800643a:	2111      	movs	r1, #17
 800643c:	0018      	movs	r0, r3
 800643e:	f7ff ff2d 	bl	800629c <aBuff2int>
 8006442:	0003      	movs	r3, r0
 8006444:	001a      	movs	r2, r3
 8006446:	19bb      	adds	r3, r7, r6
 8006448:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2216      	movs	r2, #22
 800644e:	2115      	movs	r1, #21
 8006450:	0018      	movs	r0, r3
 8006452:	f7ff ff23 	bl	800629c <aBuff2int>
 8006456:	0003      	movs	r3, r0
 8006458:	001a      	movs	r2, r3
 800645a:	19bb      	adds	r3, r7, r6
 800645c:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	220f      	movs	r2, #15
 8006462:	210d      	movs	r1, #13
 8006464:	0018      	movs	r0, r3
 8006466:	f7ff ff19 	bl	800629c <aBuff2int>
 800646a:	0003      	movs	r3, r0
 800646c:	001a      	movs	r2, r3
 800646e:	19bb      	adds	r3, r7, r6
 8006470:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 8006472:	0025      	movs	r5, r4
 8006474:	197b      	adds	r3, r7, r5
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	001c      	movs	r4, r3
 800647a:	197b      	adds	r3, r7, r5
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	0018      	movs	r0, r3
 8006480:	197b      	adds	r3, r7, r5
 8006482:	789b      	ldrb	r3, [r3, #2]
 8006484:	4a14      	ldr	r2, [pc, #80]	@ (80064d8 <ParseTime+0x10c>)
 8006486:	4915      	ldr	r1, [pc, #84]	@ (80064dc <ParseTime+0x110>)
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	9000      	str	r0, [sp, #0]
 800648c:	0023      	movs	r3, r4
 800648e:	2003      	movs	r0, #3
 8006490:	f006 ffe4 	bl	800d45c <CreateLine>
  RTC_SetTime(&currentTime);
 8006494:	197b      	adds	r3, r7, r5
 8006496:	0018      	movs	r0, r3
 8006498:	f000 f824 	bl	80064e4 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 800649c:	19bb      	adds	r3, r7, r6
 800649e:	0018      	movs	r0, r3
 80064a0:	f000 f846 	bl	8006530 <RTC_SetDate>
  if (currentDate.WeekDay == 2) {
 80064a4:	19bb      	adds	r3, r7, r6
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d101      	bne.n	80064b0 <ParseTime+0xe4>
    reset_fanCleaningDone();
 80064ac:	f002 fa38 	bl	8008920 <reset_fanCleaningDone>
  }
  if (posixBootTime == 0) {
 80064b0:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <ParseTime+0x114>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <ParseTime+0x102>
    posixBootTime = makeTime(&currentDate, &currentTime);
 80064b8:	230c      	movs	r3, #12
 80064ba:	18fa      	adds	r2, r7, r3
 80064bc:	2308      	movs	r3, #8
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	0011      	movs	r1, r2
 80064c2:	0018      	movs	r0, r3
 80064c4:	f000 f960 	bl	8006788 <makeTime>
 80064c8:	0002      	movs	r2, r0
 80064ca:	4b05      	ldr	r3, [pc, #20]	@ (80064e0 <ParseTime+0x114>)
 80064cc:	601a      	str	r2, [r3, #0]
  }
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 80064ce:	46c0      	nop			@ (mov r8, r8)
 80064d0:	46bd      	mov	sp, r7
 80064d2:	b009      	add	sp, #36	@ 0x24
 80064d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d6:	46c0      	nop			@ (mov r8, r8)
 80064d8:	080228bc 	.word	0x080228bc
 80064dc:	080228f4 	.word	0x080228f4
 80064e0:	20000cdc 	.word	0x20000cdc

080064e4 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80064fe:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <RTC_SetTime+0x40>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	0018      	movs	r0, r3
 8006508:	f00e fc40 	bl	8014d8c <HAL_RTC_SetTime>
 800650c:	1e03      	subs	r3, r0, #0
 800650e:	d005      	beq.n	800651c <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006510:	4a05      	ldr	r2, [pc, #20]	@ (8006528 <RTC_SetTime+0x44>)
 8006512:	4b06      	ldr	r3, [pc, #24]	@ (800652c <RTC_SetTime+0x48>)
 8006514:	0019      	movs	r1, r3
 8006516:	2001      	movs	r0, #1
 8006518:	f006 ffa0 	bl	800d45c <CreateLine>
    }
}
 800651c:	46c0      	nop			@ (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b002      	add	sp, #8
 8006522:	bd80      	pop	{r7, pc}
 8006524:	20000cd8 	.word	0x20000cd8
 8006528:	080228f8 	.word	0x080228f8
 800652c:	08022914 	.word	0x08022914

08006530 <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006538:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <RTC_SetDate+0x30>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	0018      	movs	r0, r3
 8006542:	f00e fd2b 	bl	8014f9c <HAL_RTC_SetDate>
 8006546:	1e03      	subs	r3, r0, #0
 8006548:	d005      	beq.n	8006556 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 800654a:	4a06      	ldr	r2, [pc, #24]	@ (8006564 <RTC_SetDate+0x34>)
 800654c:	4b06      	ldr	r3, [pc, #24]	@ (8006568 <RTC_SetDate+0x38>)
 800654e:	0019      	movs	r1, r3
 8006550:	2001      	movs	r0, #1
 8006552:	f006 ff83 	bl	800d45c <CreateLine>
    }
}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	46bd      	mov	sp, r7
 800655a:	b002      	add	sp, #8
 800655c:	bd80      	pop	{r7, pc}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	20000cd8 	.word	0x20000cd8
 8006564:	08022918 	.word	0x08022918
 8006568:	08022914 	.word	0x08022914

0800656c <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 8006576:	4b11      	ldr	r3, [pc, #68]	@ (80065bc <RTC_GetTime+0x50>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6879      	ldr	r1, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	0018      	movs	r0, r3
 8006580:	f00e fcae 	bl	8014ee0 <HAL_RTC_GetTime>
 8006584:	1e03      	subs	r3, r0, #0
 8006586:	d005      	beq.n	8006594 <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 8006588:	4a0d      	ldr	r2, [pc, #52]	@ (80065c0 <RTC_GetTime+0x54>)
 800658a:	4b0e      	ldr	r3, [pc, #56]	@ (80065c4 <RTC_GetTime+0x58>)
 800658c:	0019      	movs	r1, r3
 800658e:	2001      	movs	r0, #1
 8006590:	f006 ff64 	bl	800d45c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006594:	4b09      	ldr	r3, [pc, #36]	@ (80065bc <RTC_GetTime+0x50>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6839      	ldr	r1, [r7, #0]
 800659a:	2200      	movs	r2, #0
 800659c:	0018      	movs	r0, r3
 800659e:	f00e fd91 	bl	80150c4 <HAL_RTC_GetDate>
 80065a2:	1e03      	subs	r3, r0, #0
 80065a4:	d005      	beq.n	80065b2 <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 80065a6:	4a08      	ldr	r2, [pc, #32]	@ (80065c8 <RTC_GetTime+0x5c>)
 80065a8:	4b06      	ldr	r3, [pc, #24]	@ (80065c4 <RTC_GetTime+0x58>)
 80065aa:	0019      	movs	r1, r3
 80065ac:	2001      	movs	r0, #1
 80065ae:	f006 ff55 	bl	800d45c <CreateLine>
    }
}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	46bd      	mov	sp, r7
 80065b6:	b002      	add	sp, #8
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	20000cd8 	.word	0x20000cd8
 80065c0:	08022934 	.word	0x08022934
 80065c4:	08022914 	.word	0x08022914
 80065c8:	08022950 	.word	0x08022950

080065cc <RTC_GetWeekday>:

uint8_t RTC_GetWeekday(void) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 80065d2:	003a      	movs	r2, r7
 80065d4:	1d3b      	adds	r3, r7, #4
 80065d6:	0011      	movs	r1, r2
 80065d8:	0018      	movs	r0, r3
 80065da:	f7ff ffc7 	bl	800656c <RTC_GetTime>
  return currentDate.WeekDay;
 80065de:	003b      	movs	r3, r7
 80065e0:	781b      	ldrb	r3, [r3, #0]
}
 80065e2:	0018      	movs	r0, r3
 80065e4:	46bd      	mov	sp, r7
 80065e6:	b006      	add	sp, #24
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <RTC_SetWakeUpTimer>:
//     // Doe iets wanneer het alarm afgaat
//     HAL_GPIO_TogglePin(LED_C_Red_GPIO_Port, LED_C_Red_Pin);
// }

void RTC_SetWakeUpTimer(uint32_t secondsOfSleep)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
//    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//    HAL_NVIC_EnableIRQ(RTC_IRQn);

    // ==== sleep insert
//    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 80065f4:	4b10      	ldr	r3, [pc, #64]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	0018      	movs	r0, r3
 80065fa:	f00e ff61 	bl	80154c0 <HAL_RTCEx_DeactivateWakeUpTimer>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(RealTime_Handle, RTC_FLAG_WUTF);
 80065fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	22ff      	movs	r2, #255	@ 0xff
 8006608:	401a      	ands	r2, r3
 800660a:	4b0b      	ldr	r3, [pc, #44]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	490a      	ldr	r1, [pc, #40]	@ (800663c <RTC_SetWakeUpTimer+0x50>)
 8006612:	430a      	orrs	r2, r1
 8006614:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006616:	4b0a      	ldr	r3, [pc, #40]	@ (8006640 <RTC_SetWakeUpTimer+0x54>)
 8006618:	2280      	movs	r2, #128	@ 0x80
 800661a:	0352      	lsls	r2, r2, #13
 800661c:	615a      	str	r2, [r3, #20]
// for testing 60 seconds => 60 - 1 = 59
//    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, 0x003D, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
    HAL_RTCEx_SetWakeUpTimer_IT(RealTime_Handle, secondsOfSleep-1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS); //ck_spre ~1 Hz (40 kHz div127 div 315) used as clock for the RTC wake-up timer
 800661e:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <RTC_SetWakeUpTimer+0x4c>)
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3b01      	subs	r3, #1
 8006626:	2204      	movs	r2, #4
 8006628:	0019      	movs	r1, r3
 800662a:	f00e fe71 	bl	8015310 <HAL_RTCEx_SetWakeUpTimer_IT>
     // ==== end sleep insert
}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	46bd      	mov	sp, r7
 8006632:	b002      	add	sp, #8
 8006634:	bd80      	pop	{r7, pc}
 8006636:	46c0      	nop			@ (mov r8, r8)
 8006638:	20000cd8 	.word	0x20000cd8
 800663c:	fffffb7f 	.word	0xfffffb7f
 8006640:	40010400 	.word	0x40010400

08006644 <Enter_Standby_Mode>:

void Enter_Standby_Mode(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
    // Schakel de clock voor de Power Controller in
    //__HAL_RCC_PWR_CLK_ENABLE();
  Debug("Entering STANDBY mode, deepsleep");
 8006648:	4a0c      	ldr	r2, [pc, #48]	@ (800667c <Enter_Standby_Mode+0x38>)
 800664a:	4b0d      	ldr	r3, [pc, #52]	@ (8006680 <Enter_Standby_Mode+0x3c>)
 800664c:	0019      	movs	r1, r3
 800664e:	2003      	movs	r0, #3
 8006650:	f006 ff04 	bl	800d45c <CreateLine>
    // prevent waking up by RTC
  HAL_Delay(100);
 8006654:	2064      	movs	r0, #100	@ 0x64
 8006656:	f007 faa9 	bl	800dbac <HAL_Delay>
    HAL_RTCEx_DeactivateWakeUpTimer(RealTime_Handle);
 800665a:	4b0a      	ldr	r3, [pc, #40]	@ (8006684 <Enter_Standby_Mode+0x40>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	0018      	movs	r0, r3
 8006660:	f00e ff2e 	bl	80154c0 <HAL_RTCEx_DeactivateWakeUpTimer>
    // Schakel Standby Mode in only is battery is drained
    HAL_SuspendTick();
 8006664:	f007 fac6 	bl	800dbf4 <HAL_SuspendTick>
    HAL_PWR_EnterSTANDBYMode();
 8006668:	f00d fb8a 	bl	8013d80 <HAL_PWR_EnterSTANDBYMode>
    SystemClock_Config();
 800666c:	f001 f92e 	bl	80078cc <SystemClock_Config>
    HAL_ResumeTick(); // Enable SysTick after wake-up
 8006670:	f007 face 	bl	800dc10 <HAL_ResumeTick>
}
 8006674:	46c0      	nop			@ (mov r8, r8)
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	0802299c 	.word	0x0802299c
 8006680:	080228f4 	.word	0x080228f4
 8006684:	20000cd8 	.word	0x20000cd8

08006688 <Enter_Stop_Mode>:

void Enter_Stop_Mode(uint16_t sleepTime)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af02      	add	r7, sp, #8
 800668e:	0002      	movs	r2, r0
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	801a      	strh	r2, [r3, #0]
    // Schakel de clock voor de Power Controller in
//    __HAL_RCC_PWR_CLK_ENABLE();
  //just for sure disable the sen5x power supply
  sen5x_Power_Off();
 8006694:	f002 f926 	bl	80088e4 <sen5x_Power_Off>
  Info("Battery voltage %.2fV", ReadBatteryVoltage());
 8006698:	f7ff fc6c 	bl	8005f74 <ReadBatteryVoltage>
 800669c:	1c03      	adds	r3, r0, #0
 800669e:	1c18      	adds	r0, r3, #0
 80066a0:	f7fc fee0 	bl	8003464 <__aeabi_f2d>
 80066a4:	0002      	movs	r2, r0
 80066a6:	000b      	movs	r3, r1
 80066a8:	4829      	ldr	r0, [pc, #164]	@ (8006750 <Enter_Stop_Mode+0xc8>)
 80066aa:	492a      	ldr	r1, [pc, #168]	@ (8006754 <Enter_Stop_Mode+0xcc>)
 80066ac:	9200      	str	r2, [sp, #0]
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	0002      	movs	r2, r0
 80066b2:	2002      	movs	r0, #2
 80066b4:	f006 fed2 	bl	800d45c <CreateLine>
  Debug("Entering STOP mode for %d seconds", sleepTime);
 80066b8:	1dbb      	adds	r3, r7, #6
 80066ba:	881b      	ldrh	r3, [r3, #0]
 80066bc:	4a26      	ldr	r2, [pc, #152]	@ (8006758 <Enter_Stop_Mode+0xd0>)
 80066be:	4927      	ldr	r1, [pc, #156]	@ (800675c <Enter_Stop_Mode+0xd4>)
 80066c0:	2003      	movs	r0, #3
 80066c2:	f006 fecb 	bl	800d45c <CreateLine>
  HAL_Delay(100);
 80066c6:	2064      	movs	r0, #100	@ 0x64
 80066c8:	f007 fa70 	bl	800dbac <HAL_Delay>
  HAL_SuspendTick();
 80066cc:	f007 fa92 	bl	800dbf4 <HAL_SuspendTick>
  //set wake up timer
  RTC_SetWakeUpTimer(sleepTime);
 80066d0:	1dbb      	adds	r3, r7, #6
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	0018      	movs	r0, r3
 80066d6:	f7ff ff89 	bl	80065ec <RTC_SetWakeUpTimer>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80066da:	2101      	movs	r1, #1
 80066dc:	2001      	movs	r0, #1
 80066de:	f00d faf3 	bl	8013cc8 <HAL_PWR_EnterSTOPMode>
  SystemClock_Config();
 80066e2:	f001 f8f3 	bl	80078cc <SystemClock_Config>
  if (enable_sen5x((uint32_t)sleepTime)) {
 80066e6:	1dbb      	adds	r3, r7, #6
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	0018      	movs	r0, r3
 80066ec:	f002 f896 	bl	800881c <enable_sen5x>
 80066f0:	1e03      	subs	r3, r0, #0
 80066f2:	d019      	beq.n	8006728 <Enter_Stop_Mode+0xa0>
    showTime();
 80066f4:	f7ff fd34 	bl	8006160 <showTime>
    set_light_on_state();
 80066f8:	f002 fcb4 	bl	8009064 <set_light_on_state>
    if (!userToggle) {
 80066fc:	4b18      	ldr	r3, [pc, #96]	@ (8006760 <Enter_Stop_Mode+0xd8>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2201      	movs	r2, #1
 8006702:	4053      	eors	r3, r2
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00e      	beq.n	8006728 <Enter_Stop_Mode+0xa0>
      RTC_SetWakeUpTimer(SEN5X_START_UP_TIME); // go sleep for 30 seconds
 800670a:	201e      	movs	r0, #30
 800670c:	f7ff ff6e 	bl	80065ec <RTC_SetWakeUpTimer>
      Debug("Entering STOP mode for %d seconds", SEN5X_START_UP_TIME);
 8006710:	4a11      	ldr	r2, [pc, #68]	@ (8006758 <Enter_Stop_Mode+0xd0>)
 8006712:	4912      	ldr	r1, [pc, #72]	@ (800675c <Enter_Stop_Mode+0xd4>)
 8006714:	231e      	movs	r3, #30
 8006716:	2003      	movs	r0, #3
 8006718:	f006 fea0 	bl	800d45c <CreateLine>
      HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800671c:	2101      	movs	r1, #1
 800671e:	2001      	movs	r0, #1
 8006720:	f00d fad2 	bl	8013cc8 <HAL_PWR_EnterSTOPMode>
      SystemClock_Config();
 8006724:	f001 f8d2 	bl	80078cc <SystemClock_Config>
    }
  }
  HAL_ResumeTick(); // Enable SysTick after wake-up
 8006728:	f007 fa72 	bl	800dc10 <HAL_ResumeTick>
  showTime();
 800672c:	f7ff fd18 	bl	8006160 <showTime>
  setMeasStamp(300);
 8006730:	2396      	movs	r3, #150	@ 0x96
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	0018      	movs	r0, r3
 8006736:	f001 fa63 	bl	8007c00 <setMeasStamp>
  ESPTransmitDone = false;
 800673a:	4b0a      	ldr	r3, [pc, #40]	@ (8006764 <Enter_Stop_Mode+0xdc>)
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
  setESPTimeStamp(4500);
 8006740:	4b09      	ldr	r3, [pc, #36]	@ (8006768 <Enter_Stop_Mode+0xe0>)
 8006742:	0018      	movs	r0, r3
 8006744:	f7fd f834 	bl	80037b0 <setESPTimeStamp>
}
 8006748:	46c0      	nop			@ (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b002      	add	sp, #8
 800674e:	bd80      	pop	{r7, pc}
 8006750:	080229c0 	.word	0x080229c0
 8006754:	080229d8 	.word	0x080229d8
 8006758:	080229dc 	.word	0x080229dc
 800675c:	080228f4 	.word	0x080228f4
 8006760:	2000215e 	.word	0x2000215e
 8006764:	2000054f 	.word	0x2000054f
 8006768:	00001194 	.word	0x00001194

0800676c <InitClock>:

void InitClock(RTC_HandleTypeDef* h_hrtc){
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006774:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <InitClock+0x18>)
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	601a      	str	r2, [r3, #0]
}
 800677a:	46c0      	nop			@ (mov r8, r8)
 800677c:	46bd      	mov	sp, r7
 800677e:	b002      	add	sp, #8
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			@ (mov r8, r8)
 8006784:	20000cd8 	.word	0x20000cd8

08006788 <makeTime>:
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0

uint32_t makeTime(RTC_DateTypeDef* currentDate, RTC_TimeTypeDef* currentTime){
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]

  int i;
  uint32_t seconds;

  // seconds from 1970 till 1 jan 00:00:00 of the given year
  seconds= currentDate->Year*(SECS_PER_DAY * 365);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	78db      	ldrb	r3, [r3, #3]
 8006796:	001a      	movs	r2, r3
 8006798:	0013      	movs	r3, r2
 800679a:	025b      	lsls	r3, r3, #9
 800679c:	189b      	adds	r3, r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	189b      	adds	r3, r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	189b      	adds	r3, r3, r2
 80067a6:	011a      	lsls	r2, r3, #4
 80067a8:	1ad2      	subs	r2, r2, r3
 80067aa:	01d3      	lsls	r3, r2, #7
 80067ac:	001a      	movs	r2, r3
 80067ae:	60ba      	str	r2, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	e028      	b.n	8006808 <makeTime+0x80>
    if (LEAP_YEAR(i)) {
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a53      	ldr	r2, [pc, #332]	@ (8006908 <makeTime+0x180>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	db21      	blt.n	8006802 <makeTime+0x7a>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4a52      	ldr	r2, [pc, #328]	@ (800690c <makeTime+0x184>)
 80067c2:	4694      	mov	ip, r2
 80067c4:	4463      	add	r3, ip
 80067c6:	001a      	movs	r2, r3
 80067c8:	2303      	movs	r3, #3
 80067ca:	4013      	ands	r3, r2
 80067cc:	d119      	bne.n	8006802 <makeTime+0x7a>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	4a4e      	ldr	r2, [pc, #312]	@ (800690c <makeTime+0x184>)
 80067d2:	4694      	mov	ip, r2
 80067d4:	4463      	add	r3, ip
 80067d6:	2164      	movs	r1, #100	@ 0x64
 80067d8:	0018      	movs	r0, r3
 80067da:	f7f9 fe53 	bl	8000484 <__aeabi_idivmod>
 80067de:	1e0b      	subs	r3, r1, #0
 80067e0:	d10a      	bne.n	80067f8 <makeTime+0x70>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4a49      	ldr	r2, [pc, #292]	@ (800690c <makeTime+0x184>)
 80067e6:	4694      	mov	ip, r2
 80067e8:	4463      	add	r3, ip
 80067ea:	22c8      	movs	r2, #200	@ 0xc8
 80067ec:	0051      	lsls	r1, r2, #1
 80067ee:	0018      	movs	r0, r3
 80067f0:	f7f9 fe48 	bl	8000484 <__aeabi_idivmod>
 80067f4:	1e0b      	subs	r3, r1, #0
 80067f6:	d104      	bne.n	8006802 <makeTime+0x7a>
      seconds += SECS_PER_DAY;   // add extra days for leap years
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4a45      	ldr	r2, [pc, #276]	@ (8006910 <makeTime+0x188>)
 80067fc:	4694      	mov	ip, r2
 80067fe:	4463      	add	r3, ip
 8006800:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < currentDate->Year; i++) {
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3301      	adds	r3, #1
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	78db      	ldrb	r3, [r3, #3]
 800680c:	001a      	movs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4293      	cmp	r3, r2
 8006812:	dbd0      	blt.n	80067b6 <makeTime+0x2e>
    }
  }

  // add days for this year, months start from 1
  for (i = 1; i < currentDate->Month; i++) {
 8006814:	2301      	movs	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e03c      	b.n	8006894 <makeTime+0x10c>
    if ( (i == 2) && LEAP_YEAR(currentDate->Year)) {
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b02      	cmp	r3, #2
 800681e:	d125      	bne.n	800686c <makeTime+0xe4>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	78db      	ldrb	r3, [r3, #3]
 8006824:	4a39      	ldr	r2, [pc, #228]	@ (800690c <makeTime+0x184>)
 8006826:	4694      	mov	ip, r2
 8006828:	4463      	add	r3, ip
 800682a:	001a      	movs	r2, r3
 800682c:	2303      	movs	r3, #3
 800682e:	4013      	ands	r3, r2
 8006830:	d11c      	bne.n	800686c <makeTime+0xe4>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	78db      	ldrb	r3, [r3, #3]
 8006836:	4a35      	ldr	r2, [pc, #212]	@ (800690c <makeTime+0x184>)
 8006838:	4694      	mov	ip, r2
 800683a:	4463      	add	r3, ip
 800683c:	2164      	movs	r1, #100	@ 0x64
 800683e:	0018      	movs	r0, r3
 8006840:	f7f9 fe20 	bl	8000484 <__aeabi_idivmod>
 8006844:	1e0b      	subs	r3, r1, #0
 8006846:	d10b      	bne.n	8006860 <makeTime+0xd8>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	78db      	ldrb	r3, [r3, #3]
 800684c:	4a2f      	ldr	r2, [pc, #188]	@ (800690c <makeTime+0x184>)
 800684e:	4694      	mov	ip, r2
 8006850:	4463      	add	r3, ip
 8006852:	22c8      	movs	r2, #200	@ 0xc8
 8006854:	0051      	lsls	r1, r2, #1
 8006856:	0018      	movs	r0, r3
 8006858:	f7f9 fe14 	bl	8000484 <__aeabi_idivmod>
 800685c:	1e0b      	subs	r3, r1, #0
 800685e:	d105      	bne.n	800686c <makeTime+0xe4>
      seconds += SECS_PER_DAY * 29;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4a2c      	ldr	r2, [pc, #176]	@ (8006914 <makeTime+0x18c>)
 8006864:	4694      	mov	ip, r2
 8006866:	4463      	add	r3, ip
 8006868:	60bb      	str	r3, [r7, #8]
 800686a:	e010      	b.n	800688e <makeTime+0x106>
    } else {
      seconds += SECS_PER_DAY * monthDays[i-1];  //monthDay array starts from 0
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	3b01      	subs	r3, #1
 8006870:	4a29      	ldr	r2, [pc, #164]	@ (8006918 <makeTime+0x190>)
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	001a      	movs	r2, r3
 8006876:	0013      	movs	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	189b      	adds	r3, r3, r2
 800687c:	011a      	lsls	r2, r3, #4
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	0113      	lsls	r3, r2, #4
 8006882:	1a9b      	subs	r3, r3, r2
 8006884:	01db      	lsls	r3, r3, #7
 8006886:	001a      	movs	r2, r3
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	189b      	adds	r3, r3, r2
 800688c:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < currentDate->Month; i++) {
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	001a      	movs	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4293      	cmp	r3, r2
 800689e:	dbbc      	blt.n	800681a <makeTime+0x92>
    }
  }
  seconds+= (currentDate->Date-1) * SECS_PER_DAY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	789b      	ldrb	r3, [r3, #2]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	001a      	movs	r2, r3
 80068a8:	0013      	movs	r3, r2
 80068aa:	005b      	lsls	r3, r3, #1
 80068ac:	189b      	adds	r3, r3, r2
 80068ae:	011a      	lsls	r2, r3, #4
 80068b0:	1ad2      	subs	r2, r2, r3
 80068b2:	0113      	lsls	r3, r2, #4
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	01db      	lsls	r3, r3, #7
 80068b8:	001a      	movs	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	189b      	adds	r3, r3, r2
 80068be:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Hours * SECS_PER_HOUR;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	001a      	movs	r2, r3
 80068c6:	0013      	movs	r3, r2
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	011a      	lsls	r2, r3, #4
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	0113      	lsls	r3, r2, #4
 80068d2:	001a      	movs	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	189b      	adds	r3, r3, r2
 80068d8:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Minutes * SECS_PER_MIN;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	001a      	movs	r2, r3
 80068e0:	0013      	movs	r3, r2
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	001a      	movs	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	189b      	adds	r3, r3, r2
 80068ee:	60bb      	str	r3, [r7, #8]
  seconds+= currentTime->Seconds;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	789b      	ldrb	r3, [r3, #2]
 80068f4:	001a      	movs	r2, r3
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	189b      	adds	r3, r3, r2
 80068fa:	60bb      	str	r3, [r7, #8]
  return seconds;
 80068fc:	68bb      	ldr	r3, [r7, #8]
}
 80068fe:	0018      	movs	r0, r3
 8006900:	46bd      	mov	sp, r7
 8006902:	b004      	add	sp, #16
 8006904:	bd80      	pop	{r7, pc}
 8006906:	46c0      	nop			@ (mov r8, r8)
 8006908:	fffff84f 	.word	0xfffff84f
 800690c:	000007b2 	.word	0x000007b2
 8006910:	00015180 	.word	0x00015180
 8006914:	00263b80 	.word	0x00263b80
 8006918:	08023a80 	.word	0x08023a80

0800691c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006922:	003b      	movs	r3, r7
 8006924:	0018      	movs	r0, r3
 8006926:	2308      	movs	r3, #8
 8006928:	001a      	movs	r2, r3
 800692a:	2100      	movs	r1, #0
 800692c:	f018 fb38 	bl	801efa0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006930:	4b30      	ldr	r3, [pc, #192]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006932:	4a31      	ldr	r2, [pc, #196]	@ (80069f8 <MX_ADC_Init+0xdc>)
 8006934:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8006936:	4b2f      	ldr	r3, [pc, #188]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006938:	2200      	movs	r2, #0
 800693a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800693c:	4b2d      	ldr	r3, [pc, #180]	@ (80069f4 <MX_ADC_Init+0xd8>)
 800693e:	22c0      	movs	r2, #192	@ 0xc0
 8006940:	0612      	lsls	r2, r2, #24
 8006942:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8006944:	4b2b      	ldr	r3, [pc, #172]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006946:	2200      	movs	r2, #0
 8006948:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800694a:	4b2a      	ldr	r3, [pc, #168]	@ (80069f4 <MX_ADC_Init+0xd8>)
 800694c:	2200      	movs	r2, #0
 800694e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006950:	4b28      	ldr	r3, [pc, #160]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006952:	2201      	movs	r2, #1
 8006954:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006956:	4b27      	ldr	r3, [pc, #156]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006958:	2200      	movs	r2, #0
 800695a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 800695c:	4b25      	ldr	r3, [pc, #148]	@ (80069f4 <MX_ADC_Init+0xd8>)
 800695e:	2220      	movs	r2, #32
 8006960:	2100      	movs	r1, #0
 8006962:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8006964:	4b23      	ldr	r3, [pc, #140]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006966:	2221      	movs	r2, #33	@ 0x21
 8006968:	2101      	movs	r1, #1
 800696a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800696c:	4b21      	ldr	r3, [pc, #132]	@ (80069f4 <MX_ADC_Init+0xd8>)
 800696e:	2200      	movs	r2, #0
 8006970:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006972:	4b20      	ldr	r3, [pc, #128]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006974:	22c2      	movs	r2, #194	@ 0xc2
 8006976:	32ff      	adds	r2, #255	@ 0xff
 8006978:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800697a:	4b1e      	ldr	r3, [pc, #120]	@ (80069f4 <MX_ADC_Init+0xd8>)
 800697c:	222c      	movs	r2, #44	@ 0x2c
 800697e:	2100      	movs	r1, #0
 8006980:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006982:	4b1c      	ldr	r3, [pc, #112]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006984:	2204      	movs	r2, #4
 8006986:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006988:	4b1a      	ldr	r3, [pc, #104]	@ (80069f4 <MX_ADC_Init+0xd8>)
 800698a:	2200      	movs	r2, #0
 800698c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800698e:	4b19      	ldr	r3, [pc, #100]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006990:	2200      	movs	r2, #0
 8006992:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8006994:	4b17      	ldr	r3, [pc, #92]	@ (80069f4 <MX_ADC_Init+0xd8>)
 8006996:	2200      	movs	r2, #0
 8006998:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800699a:	4b16      	ldr	r3, [pc, #88]	@ (80069f4 <MX_ADC_Init+0xd8>)
 800699c:	2200      	movs	r2, #0
 800699e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80069a0:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <MX_ADC_Init+0xd8>)
 80069a2:	0018      	movs	r0, r3
 80069a4:	f007 f960 	bl	800dc68 <HAL_ADC_Init>
 80069a8:	1e03      	subs	r3, r0, #0
 80069aa:	d001      	beq.n	80069b0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80069ac:	f001 f8d8 	bl	8007b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80069b0:	003b      	movs	r3, r7
 80069b2:	4a12      	ldr	r2, [pc, #72]	@ (80069fc <MX_ADC_Init+0xe0>)
 80069b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80069b6:	003b      	movs	r3, r7
 80069b8:	2280      	movs	r2, #128	@ 0x80
 80069ba:	0152      	lsls	r2, r2, #5
 80069bc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80069be:	003a      	movs	r2, r7
 80069c0:	4b0c      	ldr	r3, [pc, #48]	@ (80069f4 <MX_ADC_Init+0xd8>)
 80069c2:	0011      	movs	r1, r2
 80069c4:	0018      	movs	r0, r3
 80069c6:	f007 fbbf 	bl	800e148 <HAL_ADC_ConfigChannel>
 80069ca:	1e03      	subs	r3, r0, #0
 80069cc:	d001      	beq.n	80069d2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80069ce:	f001 f8c7 	bl	8007b60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80069d2:	003b      	movs	r3, r7
 80069d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006a00 <MX_ADC_Init+0xe4>)
 80069d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80069d8:	003a      	movs	r2, r7
 80069da:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <MX_ADC_Init+0xd8>)
 80069dc:	0011      	movs	r1, r2
 80069de:	0018      	movs	r0, r3
 80069e0:	f007 fbb2 	bl	800e148 <HAL_ADC_ConfigChannel>
 80069e4:	1e03      	subs	r3, r0, #0
 80069e6:	d001      	beq.n	80069ec <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80069e8:	f001 f8ba 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80069ec:	46c0      	nop			@ (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	b002      	add	sp, #8
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000ce0 	.word	0x20000ce0
 80069f8:	40012400 	.word	0x40012400
 80069fc:	38004000 	.word	0x38004000
 8006a00:	3c008000 	.word	0x3c008000

08006a04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006a04:	b590      	push	{r4, r7, lr}
 8006a06:	b089      	sub	sp, #36	@ 0x24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a0c:	240c      	movs	r4, #12
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	0018      	movs	r0, r3
 8006a12:	2314      	movs	r3, #20
 8006a14:	001a      	movs	r2, r3
 8006a16:	2100      	movs	r1, #0
 8006a18:	f018 fac2 	bl	801efa0 <memset>
  if(adcHandle->Instance==ADC1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a14      	ldr	r2, [pc, #80]	@ (8006a74 <HAL_ADC_MspInit+0x70>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d121      	bne.n	8006a6a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006a26:	4b14      	ldr	r3, [pc, #80]	@ (8006a78 <HAL_ADC_MspInit+0x74>)
 8006a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a2a:	4b13      	ldr	r3, [pc, #76]	@ (8006a78 <HAL_ADC_MspInit+0x74>)
 8006a2c:	2180      	movs	r1, #128	@ 0x80
 8006a2e:	0089      	lsls	r1, r1, #2
 8006a30:	430a      	orrs	r2, r1
 8006a32:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a34:	4b10      	ldr	r3, [pc, #64]	@ (8006a78 <HAL_ADC_MspInit+0x74>)
 8006a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a38:	4b0f      	ldr	r3, [pc, #60]	@ (8006a78 <HAL_ADC_MspInit+0x74>)
 8006a3a:	2104      	movs	r1, #4
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006a40:	4b0d      	ldr	r3, [pc, #52]	@ (8006a78 <HAL_ADC_MspInit+0x74>)
 8006a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a44:	2204      	movs	r2, #4
 8006a46:	4013      	ands	r3, r2
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006a4c:	193b      	adds	r3, r7, r4
 8006a4e:	2230      	movs	r2, #48	@ 0x30
 8006a50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a52:	193b      	adds	r3, r7, r4
 8006a54:	2203      	movs	r2, #3
 8006a56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a58:	193b      	adds	r3, r7, r4
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a5e:	193b      	adds	r3, r7, r4
 8006a60:	4a06      	ldr	r2, [pc, #24]	@ (8006a7c <HAL_ADC_MspInit+0x78>)
 8006a62:	0019      	movs	r1, r3
 8006a64:	0010      	movs	r0, r2
 8006a66:	f008 f977 	bl	800ed58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	b009      	add	sp, #36	@ 0x24
 8006a70:	bd90      	pop	{r4, r7, pc}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	40012400 	.word	0x40012400
 8006a78:	40021000 	.word	0x40021000
 8006a7c:	50000800 	.word	0x50000800

08006a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006a86:	4b10      	ldr	r3, [pc, #64]	@ (8006ac8 <MX_DMA_Init+0x48>)
 8006a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006ac8 <MX_DMA_Init+0x48>)
 8006a8c:	2101      	movs	r1, #1
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ac8 <MX_DMA_Init+0x48>)
 8006a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a96:	2201      	movs	r2, #1
 8006a98:	4013      	ands	r3, r2
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	200a      	movs	r0, #10
 8006aa4:	f007 fd0a 	bl	800e4bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8006aa8:	200a      	movs	r0, #10
 8006aaa:	f007 fd1c 	bl	800e4e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2103      	movs	r1, #3
 8006ab2:	200b      	movs	r0, #11
 8006ab4:	f007 fd02 	bl	800e4bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8006ab8:	200b      	movs	r0, #11
 8006aba:	f007 fd14 	bl	800e4e6 <HAL_NVIC_EnableIRQ>

}
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b002      	add	sp, #8
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	46c0      	nop			@ (mov r8, r8)
 8006ac8:	40021000 	.word	0x40021000

08006acc <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b086      	sub	sp, #24
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2b7f      	cmp	r3, #127	@ 0x7f
 8006adc:	d901      	bls.n	8006ae2 <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 8006ade:	237f      	movs	r3, #127	@ 0x7f
 8006ae0:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 8006ae2:	2017      	movs	r0, #23
 8006ae4:	183b      	adds	r3, r7, r0
 8006ae6:	490d      	ldr	r1, [pc, #52]	@ (8006b1c <accessLUT10log10+0x50>)
 8006ae8:	68fa      	ldr	r2, [r7, #12]
 8006aea:	188a      	adds	r2, r1, r2
 8006aec:	7812      	ldrb	r2, [r2, #0]
 8006aee:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 8006af0:	0001      	movs	r1, r0
 8006af2:	187b      	adds	r3, r7, r1
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	2206      	movs	r2, #6
 8006af8:	4113      	asrs	r3, r2
 8006afa:	001a      	movs	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006b00:	187b      	adds	r3, r7, r1
 8006b02:	781a      	ldrb	r2, [r3, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2106      	movs	r1, #6
 8006b0a:	408b      	lsls	r3, r1
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	601a      	str	r2, [r3, #0]
}
 8006b12:	46c0      	nop			@ (mov r8, r8)
 8006b14:	46bd      	mov	sp, r7
 8006b16:	b006      	add	sp, #24
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	46c0      	nop			@ (mov r8, r8)
 8006b1c:	08023a8c 	.word	0x08023a8c

08006b20 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006b20:	b5b0      	push	{r4, r5, r7, lr}
 8006b22:	b090      	sub	sp, #64	@ 0x40
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6138      	str	r0, [r7, #16]
 8006b28:	6179      	str	r1, [r7, #20]
 8006b2a:	60fa      	str	r2, [r7, #12]
 8006b2c:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006b2e:	2308      	movs	r3, #8
 8006b30:	001a      	movs	r2, r3
 8006b32:	3a20      	subs	r2, #32
 8006b34:	2a00      	cmp	r2, #0
 8006b36:	db03      	blt.n	8006b40 <efficient10log10+0x20>
 8006b38:	2101      	movs	r1, #1
 8006b3a:	4091      	lsls	r1, r2
 8006b3c:	000d      	movs	r5, r1
 8006b3e:	e008      	b.n	8006b52 <efficient10log10+0x32>
 8006b40:	2220      	movs	r2, #32
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	2101      	movs	r1, #1
 8006b46:	40d1      	lsrs	r1, r2
 8006b48:	000a      	movs	r2, r1
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4099      	lsls	r1, r3
 8006b4e:	000d      	movs	r5, r1
 8006b50:	4315      	orrs	r5, r2
 8006b52:	2201      	movs	r2, #1
 8006b54:	409a      	lsls	r2, r3
 8006b56:	0014      	movs	r4, r2
 8006b58:	2201      	movs	r2, #1
 8006b5a:	4252      	negs	r2, r2
 8006b5c:	17d3      	asrs	r3, r2, #31
 8006b5e:	1912      	adds	r2, r2, r4
 8006b60:	416b      	adcs	r3, r5
 8006b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b64:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 8006b66:	2336      	movs	r3, #54	@ 0x36
 8006b68:	2208      	movs	r2, #8
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	19db      	adds	r3, r3, r7
 8006b6e:	2200      	movs	r2, #0
 8006b70:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006b72:	e017      	b.n	8006ba4 <efficient10log10+0x84>
    {
        P = P >> 1;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	07db      	lsls	r3, r3, #31
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	0852      	lsrs	r2, r2, #1
 8006b7c:	603a      	str	r2, [r7, #0]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	431a      	orrs	r2, r3
 8006b82:	603a      	str	r2, [r7, #0]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	687c      	ldr	r4, [r7, #4]
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	617c      	str	r4, [r7, #20]
        bShift++;
 8006b92:	2136      	movs	r1, #54	@ 0x36
 8006b94:	2008      	movs	r0, #8
 8006b96:	180b      	adds	r3, r1, r0
 8006b98:	19db      	adds	r3, r3, r7
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	180b      	adds	r3, r1, r0
 8006b9e:	19db      	adds	r3, r3, r7
 8006ba0:	3201      	adds	r2, #1
 8006ba2:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d8e3      	bhi.n	8006b74 <efficient10log10+0x54>
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d103      	bne.n	8006bbc <efficient10log10+0x9c>
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d8db      	bhi.n	8006b74 <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	2308      	movs	r3, #8
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4099      	lsls	r1, r3
 8006bc6:	000b      	movs	r3, r1
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 8006bd4:	231c      	movs	r3, #28
 8006bd6:	2408      	movs	r4, #8
 8006bd8:	191b      	adds	r3, r3, r4
 8006bda:	19da      	adds	r2, r3, r7
 8006bdc:	2320      	movs	r3, #32
 8006bde:	191b      	adds	r3, r3, r4
 8006be0:	19d9      	adds	r1, r3, r7
 8006be2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be4:	0018      	movs	r0, r3
 8006be6:	f7ff ff71 	bl	8006acc <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006bea:	2215      	movs	r2, #21
 8006bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bee:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 8006bf0:	2036      	movs	r0, #54	@ 0x36
 8006bf2:	1902      	adds	r2, r0, r4
 8006bf4:	19d2      	adds	r2, r2, r7
 8006bf6:	8812      	ldrh	r2, [r2, #0]
 8006bf8:	2103      	movs	r1, #3
 8006bfa:	434a      	muls	r2, r1
 8006bfc:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006bfe:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006c00:	0021      	movs	r1, r4
 8006c02:	1843      	adds	r3, r0, r1
 8006c04:	19db      	adds	r3, r3, r7
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	4353      	muls	r3, r2
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	4113      	asrs	r3, r2
 8006c10:	001a      	movs	r2, r3
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 8006c16:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8006c18:	2314      	movs	r3, #20
 8006c1a:	185b      	adds	r3, r3, r1
 8006c1c:	19da      	adds	r2, r3, r7
 8006c1e:	2318      	movs	r3, #24
 8006c20:	185b      	adds	r3, r3, r1
 8006c22:	19db      	adds	r3, r3, r7
 8006c24:	0011      	movs	r1, r2
 8006c26:	0018      	movs	r0, r3
 8006c28:	f000 f80a 	bl	8006c40 <correctIntFracNumber>
    integerPart[0] = intPart;
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	601a      	str	r2, [r3, #0]
}
 8006c38:	46c0      	nop			@ (mov r8, r8)
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b010      	add	sp, #64	@ 0x40
 8006c3e:	bdb0      	pop	{r4, r5, r7, pc}

08006c40 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8006c4a:	e00a      	b.n	8006c62 <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3b0a      	subs	r3, #10
 8006c5c:	001a      	movs	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b09      	cmp	r3, #9
 8006c68:	dcf0      	bgt.n	8006c4c <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8006c6a:	e00a      	b.n	8006c82 <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	1e5a      	subs	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330a      	adds	r3, #10
 8006c7c:	001a      	movs	r2, r3
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3309      	adds	r3, #9
 8006c88:	dbf0      	blt.n	8006c6c <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da0f      	bge.n	8006cb2 <correctIntFracNumber+0x72>
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd0b      	ble.n	8006cb2 <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	3b0a      	subs	r3, #10
 8006caa:	001a      	movs	r2, r3
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 8006cb0:	e012      	b.n	8006cd8 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	dd0e      	ble.n	8006cd8 <correctIntFracNumber+0x98>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da0a      	bge.n	8006cd8 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	1e5a      	subs	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330a      	adds	r3, #10
 8006cd2:	001a      	movs	r2, r3
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	601a      	str	r2, [r3, #0]
}
 8006cd8:	46c0      	nop			@ (mov r8, r8)
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b002      	add	sp, #8
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8006cee:	4b0c      	ldr	r3, [pc, #48]	@ (8006d20 <Gadget_Init+0x40>)
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	f001 fb27 	bl	8008344 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 ffa5 	bl	8007c4c <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7fc fe73 	bl	80039f0 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8006d0a:	4a06      	ldr	r2, [pc, #24]	@ (8006d24 <Gadget_Init+0x44>)
 8006d0c:	4b06      	ldr	r3, [pc, #24]	@ (8006d28 <Gadget_Init+0x48>)
 8006d0e:	0019      	movs	r1, r3
 8006d10:	2003      	movs	r0, #3
 8006d12:	f006 fba3 	bl	800d45c <CreateLine>
}
 8006d16:	46c0      	nop			@ (mov r8, r8)
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b004      	add	sp, #16
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	2000007c 	.word	0x2000007c
 8006d24:	08022a00 	.word	0x08022a00
 8006d28:	08022a14 	.word	0x08022a14

08006d2c <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  Meas_Test();
 8006d30:	f001 f8c4 	bl	8007ebc <Meas_Test>
}
 8006d34:	46c0      	nop			@ (mov r8, r8)
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <UpkeepGadget>:

bool UpkeepGadget() {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 8006d42:	f001 fa77 	bl	8008234 <Meas_Upkeep>
 8006d46:	0003      	movs	r3, r0
 8006d48:	001a      	movs	r2, r3
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d88 <UpkeepGadget+0x4c>)
 8006d4c:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8006d4e:	f001 f959 	bl	8008004 <Mic_Upkeep>
 8006d52:	0003      	movs	r3, r0
 8006d54:	001a      	movs	r2, r3
 8006d56:	4b0d      	ldr	r3, [pc, #52]	@ (8006d8c <UpkeepGadget+0x50>)
 8006d58:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d88 <UpkeepGadget+0x4c>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d103      	bne.n	8006d6a <UpkeepGadget+0x2e>
 8006d62:	4b0a      	ldr	r3, [pc, #40]	@ (8006d8c <UpkeepGadget+0x50>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d001      	beq.n	8006d6e <UpkeepGadget+0x32>
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	e000      	b.n	8006d70 <UpkeepGadget+0x34>
 8006d6e:	2200      	movs	r2, #0
 8006d70:	1dfb      	adds	r3, r7, #7
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	781a      	ldrb	r2, [r3, #0]
 8006d76:	2101      	movs	r1, #1
 8006d78:	400a      	ands	r2, r1
 8006d7a:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006d7c:	1dfb      	adds	r3, r7, #7
 8006d7e:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	b002      	add	sp, #8
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000d3c 	.word	0x20000d3c
 8006d8c:	20000d3d 	.word	0x20000d3d

08006d90 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	0011      	movs	r1, r2
 8006da0:	0018      	movs	r0, r3
 8006da2:	f003 ff25 	bl	800abf0 <SGP_Init>
}
 8006da6:	46c0      	nop			@ (mov r8, r8)
 8006da8:	46bd      	mov	sp, r7
 8006daa:	b002      	add	sp, #8
 8006dac:	bd80      	pop	{r7, pc}

08006dae <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8006dae:	b580      	push	{r7, lr}
 8006db0:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8006db2:	f003 ff37 	bl	800ac24 <SGP_StartMeasurement>
}
 8006db6:	46c0      	nop			@ (mov r8, r8)
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f003 ff9c 	bl	800ad04 <SGP_GetMeasurementValues>
 8006dcc:	0003      	movs	r3, r0
}
 8006dce:	0018      	movs	r0, r3
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	b002      	add	sp, #8
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8006dda:	f004 f9a1 	bl	800b120 <SGP_DeviceConnected>
 8006dde:	0003      	movs	r3, r0
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8006de8:	b590      	push	{r4, r7, lr}
 8006dea:	b08b      	sub	sp, #44	@ 0x2c
 8006dec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dee:	2414      	movs	r4, #20
 8006df0:	193b      	adds	r3, r7, r4
 8006df2:	0018      	movs	r0, r3
 8006df4:	2314      	movs	r3, #20
 8006df6:	001a      	movs	r2, r3
 8006df8:	2100      	movs	r1, #0
 8006dfa:	f018 f8d1 	bl	801efa0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dfe:	4b8a      	ldr	r3, [pc, #552]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e02:	4b89      	ldr	r3, [pc, #548]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e04:	2104      	movs	r1, #4
 8006e06:	430a      	orrs	r2, r1
 8006e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e0a:	4b87      	ldr	r3, [pc, #540]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0e:	2204      	movs	r2, #4
 8006e10:	4013      	ands	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006e16:	4b84      	ldr	r3, [pc, #528]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e1a:	4b83      	ldr	r3, [pc, #524]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e1c:	2180      	movs	r1, #128	@ 0x80
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e22:	4b81      	ldr	r3, [pc, #516]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e26:	2280      	movs	r2, #128	@ 0x80
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e2e:	4b7e      	ldr	r3, [pc, #504]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e32:	4b7d      	ldr	r3, [pc, #500]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e34:	2101      	movs	r1, #1
 8006e36:	430a      	orrs	r2, r1
 8006e38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4013      	ands	r3, r2
 8006e42:	60bb      	str	r3, [r7, #8]
 8006e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e46:	4b78      	ldr	r3, [pc, #480]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4a:	4b77      	ldr	r3, [pc, #476]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e4c:	2102      	movs	r1, #2
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e52:	4b75      	ldr	r3, [pc, #468]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e56:	2202      	movs	r2, #2
 8006e58:	4013      	ands	r3, r2
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e5e:	4b72      	ldr	r3, [pc, #456]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e62:	4b71      	ldr	r3, [pc, #452]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e64:	2108      	movs	r1, #8
 8006e66:	430a      	orrs	r2, r1
 8006e68:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8007028 <MX_GPIO_Init+0x240>)
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	2208      	movs	r2, #8
 8006e70:	4013      	ands	r3, r2
 8006e72:	603b      	str	r3, [r7, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8006e76:	4b6d      	ldr	r3, [pc, #436]	@ (800702c <MX_GPIO_Init+0x244>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	0018      	movs	r0, r3
 8006e7e:	f008 f906 	bl	800f08e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8006e82:	4b6a      	ldr	r3, [pc, #424]	@ (800702c <MX_GPIO_Init+0x244>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	2102      	movs	r1, #2
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f008 f900 	bl	800f08e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006e8e:	4968      	ldr	r1, [pc, #416]	@ (8007030 <MX_GPIO_Init+0x248>)
 8006e90:	4b68      	ldr	r3, [pc, #416]	@ (8007034 <MX_GPIO_Init+0x24c>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	0018      	movs	r0, r3
 8006e96:	f008 f8fa 	bl	800f08e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8006e9a:	2380      	movs	r3, #128	@ 0x80
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	4866      	ldr	r0, [pc, #408]	@ (8007038 <MX_GPIO_Init+0x250>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	0019      	movs	r1, r3
 8006ea4:	f008 f8f3 	bl	800f08e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 8006ea8:	2380      	movs	r3, #128	@ 0x80
 8006eaa:	015b      	lsls	r3, r3, #5
 8006eac:	4862      	ldr	r0, [pc, #392]	@ (8007038 <MX_GPIO_Init+0x250>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	0019      	movs	r1, r3
 8006eb2:	f008 f8ec 	bl	800f08e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 8006eb6:	193b      	adds	r3, r7, r4
 8006eb8:	4a60      	ldr	r2, [pc, #384]	@ (800703c <MX_GPIO_Init+0x254>)
 8006eba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ebc:	193b      	adds	r3, r7, r4
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec2:	193b      	adds	r3, r7, r4
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ec8:	193b      	adds	r3, r7, r4
 8006eca:	4a5b      	ldr	r2, [pc, #364]	@ (8007038 <MX_GPIO_Init+0x250>)
 8006ecc:	0019      	movs	r1, r3
 8006ece:	0010      	movs	r0, r2
 8006ed0:	f007 ff42 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8006ed4:	193b      	adds	r3, r7, r4
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eda:	193b      	adds	r3, r7, r4
 8006edc:	2201      	movs	r2, #1
 8006ede:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee0:	193b      	adds	r3, r7, r4
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ee6:	193b      	adds	r3, r7, r4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006eec:	193b      	adds	r3, r7, r4
 8006eee:	4a4f      	ldr	r2, [pc, #316]	@ (800702c <MX_GPIO_Init+0x244>)
 8006ef0:	0019      	movs	r1, r3
 8006ef2:	0010      	movs	r0, r2
 8006ef4:	f007 ff30 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006ef8:	193b      	adds	r3, r7, r4
 8006efa:	2270      	movs	r2, #112	@ 0x70
 8006efc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006efe:	193b      	adds	r3, r7, r4
 8006f00:	2203      	movs	r2, #3
 8006f02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f04:	193b      	adds	r3, r7, r4
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f0a:	193a      	adds	r2, r7, r4
 8006f0c:	23a0      	movs	r3, #160	@ 0xa0
 8006f0e:	05db      	lsls	r3, r3, #23
 8006f10:	0011      	movs	r1, r2
 8006f12:	0018      	movs	r0, r3
 8006f14:	f007 ff20 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	22c0      	movs	r2, #192	@ 0xc0
 8006f1c:	0052      	lsls	r2, r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f20:	193b      	adds	r3, r7, r4
 8006f22:	2200      	movs	r2, #0
 8006f24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f26:	193b      	adds	r3, r7, r4
 8006f28:	2200      	movs	r2, #0
 8006f2a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f2c:	193a      	adds	r2, r7, r4
 8006f2e:	23a0      	movs	r3, #160	@ 0xa0
 8006f30:	05db      	lsls	r3, r3, #23
 8006f32:	0011      	movs	r1, r2
 8006f34:	0018      	movs	r0, r3
 8006f36:	f007 ff0f 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8006f3a:	193b      	adds	r3, r7, r4
 8006f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8007030 <MX_GPIO_Init+0x248>)
 8006f3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f40:	193b      	adds	r3, r7, r4
 8006f42:	2201      	movs	r2, #1
 8006f44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f46:	193b      	adds	r3, r7, r4
 8006f48:	2200      	movs	r2, #0
 8006f4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f4c:	193b      	adds	r3, r7, r4
 8006f4e:	2200      	movs	r2, #0
 8006f50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	4a37      	ldr	r2, [pc, #220]	@ (8007034 <MX_GPIO_Init+0x24c>)
 8006f56:	0019      	movs	r1, r3
 8006f58:	0010      	movs	r0, r2
 8006f5a:	f007 fefd 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8006f5e:	193b      	adds	r3, r7, r4
 8006f60:	4a37      	ldr	r2, [pc, #220]	@ (8007040 <MX_GPIO_Init+0x258>)
 8006f62:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f64:	193b      	adds	r3, r7, r4
 8006f66:	2203      	movs	r2, #3
 8006f68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6a:	193b      	adds	r3, r7, r4
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f70:	193b      	adds	r3, r7, r4
 8006f72:	4a30      	ldr	r2, [pc, #192]	@ (8007034 <MX_GPIO_Init+0x24c>)
 8006f74:	0019      	movs	r1, r3
 8006f76:	0010      	movs	r0, r2
 8006f78:	f007 feee 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006f7c:	0021      	movs	r1, r4
 8006f7e:	187b      	adds	r3, r7, r1
 8006f80:	2280      	movs	r2, #128	@ 0x80
 8006f82:	0092      	lsls	r2, r2, #2
 8006f84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f86:	000c      	movs	r4, r1
 8006f88:	193b      	adds	r3, r7, r4
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f8e:	193b      	adds	r3, r7, r4
 8006f90:	2200      	movs	r2, #0
 8006f92:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006f94:	193b      	adds	r3, r7, r4
 8006f96:	4a28      	ldr	r2, [pc, #160]	@ (8007038 <MX_GPIO_Init+0x250>)
 8006f98:	0019      	movs	r1, r3
 8006f9a:	0010      	movs	r0, r2
 8006f9c:	f007 fedc 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT0_Pin;
 8006fa0:	193b      	adds	r3, r7, r4
 8006fa2:	2280      	movs	r2, #128	@ 0x80
 8006fa4:	0212      	lsls	r2, r2, #8
 8006fa6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006fa8:	193b      	adds	r3, r7, r4
 8006faa:	2288      	movs	r2, #136	@ 0x88
 8006fac:	0352      	lsls	r2, r2, #13
 8006fae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	193b      	adds	r3, r7, r4
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BOOT0_GPIO_Port, &GPIO_InitStruct);
 8006fb6:	193a      	adds	r2, r7, r4
 8006fb8:	23a0      	movs	r3, #160	@ 0xa0
 8006fba:	05db      	lsls	r3, r3, #23
 8006fbc:	0011      	movs	r1, r2
 8006fbe:	0018      	movs	r0, r3
 8006fc0:	f007 feca 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006fc4:	0021      	movs	r1, r4
 8006fc6:	187b      	adds	r3, r7, r1
 8006fc8:	22c0      	movs	r2, #192	@ 0xc0
 8006fca:	0152      	lsls	r2, r2, #5
 8006fcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fce:	000c      	movs	r4, r1
 8006fd0:	193b      	adds	r3, r7, r4
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd6:	193b      	adds	r3, r7, r4
 8006fd8:	2200      	movs	r2, #0
 8006fda:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fdc:	193b      	adds	r3, r7, r4
 8006fde:	2200      	movs	r2, #0
 8006fe0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fe2:	193b      	adds	r3, r7, r4
 8006fe4:	4a14      	ldr	r2, [pc, #80]	@ (8007038 <MX_GPIO_Init+0x250>)
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	0010      	movs	r0, r2
 8006fea:	f007 feb5 	bl	800ed58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006fee:	0021      	movs	r1, r4
 8006ff0:	187b      	adds	r3, r7, r1
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ff6:	187b      	adds	r3, r7, r1
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ffc:	187b      	adds	r3, r7, r1
 8006ffe:	2201      	movs	r2, #1
 8007000:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8007002:	187b      	adds	r3, r7, r1
 8007004:	4a0f      	ldr	r2, [pc, #60]	@ (8007044 <MX_GPIO_Init+0x25c>)
 8007006:	0019      	movs	r1, r3
 8007008:	0010      	movs	r0, r2
 800700a:	f007 fea5 	bl	800ed58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800700e:	2200      	movs	r2, #0
 8007010:	2100      	movs	r1, #0
 8007012:	2007      	movs	r0, #7
 8007014:	f007 fa52 	bl	800e4bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8007018:	2007      	movs	r0, #7
 800701a:	f007 fa64 	bl	800e4e6 <HAL_NVIC_EnableIRQ>

}
 800701e:	46c0      	nop			@ (mov r8, r8)
 8007020:	46bd      	mov	sp, r7
 8007022:	b00b      	add	sp, #44	@ 0x2c
 8007024:	bd90      	pop	{r4, r7, pc}
 8007026:	46c0      	nop			@ (mov r8, r8)
 8007028:	40021000 	.word	0x40021000
 800702c:	50001c00 	.word	0x50001c00
 8007030:	00000301 	.word	0x00000301
 8007034:	50000400 	.word	0x50000400
 8007038:	50000800 	.word	0x50000800
 800703c:	0000200c 	.word	0x0000200c
 8007040:	0000403e 	.word	0x0000403e
 8007044:	50000c00 	.word	0x50000c00

08007048 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2100      	movs	r1, #0
 8007056:	0018      	movs	r0, r3
 8007058:	f00e fbb6 	bl	80157c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2108      	movs	r1, #8
 8007060:	0018      	movs	r0, r3
 8007062:	f00e fbb1 	bl	80157c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	210c      	movs	r1, #12
 800706a:	0018      	movs	r0, r3
 800706c:	f00e fbac 	bl	80157c8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	05db      	lsls	r3, r3, #23
 8007074:	22fa      	movs	r2, #250	@ 0xfa
 8007076:	0112      	lsls	r2, r2, #4
 8007078:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 800707a:	2380      	movs	r3, #128	@ 0x80
 800707c:	05db      	lsls	r3, r3, #23
 800707e:	22fa      	movs	r2, #250	@ 0xfa
 8007080:	0112      	lsls	r2, r2, #4
 8007082:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8007084:	2380      	movs	r3, #128	@ 0x80
 8007086:	05db      	lsls	r3, r3, #23
 8007088:	22fa      	movs	r2, #250	@ 0xfa
 800708a:	0112      	lsls	r2, r2, #4
 800708c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 800708e:	2380      	movs	r3, #128	@ 0x80
 8007090:	05db      	lsls	r3, r3, #23
 8007092:	22fa      	movs	r2, #250	@ 0xfa
 8007094:	0112      	lsls	r2, r2, #4
 8007096:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2100      	movs	r1, #0
 800709c:	0018      	movs	r0, r3
 800709e:	f00e fb93 	bl	80157c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2104      	movs	r1, #4
 80070a6:	0018      	movs	r0, r3
 80070a8:	f00e fb8e 	bl	80157c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	2108      	movs	r1, #8
 80070b0:	0018      	movs	r0, r3
 80070b2:	f00e fb89 	bl	80157c8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80070b6:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <GPIO_InitPWMLEDs+0x98>)
 80070b8:	22fa      	movs	r2, #250	@ 0xfa
 80070ba:	0112      	lsls	r2, r2, #4
 80070bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 80070be:	4b08      	ldr	r3, [pc, #32]	@ (80070e0 <GPIO_InitPWMLEDs+0x98>)
 80070c0:	22fa      	movs	r2, #250	@ 0xfa
 80070c2:	0112      	lsls	r2, r2, #4
 80070c4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 80070c6:	4b06      	ldr	r3, [pc, #24]	@ (80070e0 <GPIO_InitPWMLEDs+0x98>)
 80070c8:	22fa      	movs	r2, #250	@ 0xfa
 80070ca:	0112      	lsls	r2, r2, #4
 80070cc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 80070ce:	4b04      	ldr	r3, [pc, #16]	@ (80070e0 <GPIO_InitPWMLEDs+0x98>)
 80070d0:	22fa      	movs	r2, #250	@ 0xfa
 80070d2:	0112      	lsls	r2, r2, #4
 80070d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80070d6:	46c0      	nop			@ (mov r8, r8)
 80070d8:	46bd      	mov	sp, r7
 80070da:	b002      	add	sp, #8
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	46c0      	nop			@ (mov r8, r8)
 80070e0:	40000400 	.word	0x40000400

080070e4 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	0011      	movs	r1, r2
 80070f4:	0018      	movs	r0, r3
 80070f6:	f006 fb13 	bl	800d720 <HIDS_Init>
}
 80070fa:	46c0      	nop			@ (mov r8, r8)
 80070fc:	46bd      	mov	sp, r7
 80070fe:	b002      	add	sp, #8
 8007100:	bd80      	pop	{r7, pc}

08007102 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8007102:	b580      	push	{r7, lr}
 8007104:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8007106:	f006 fb2d 	bl	800d764 <HIDS_StartMeasurement>
}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	0011      	movs	r1, r2
 8007120:	0018      	movs	r0, r3
 8007122:	f006 fc05 	bl	800d930 <HIDS_GetMeasurementValues>
 8007126:	0003      	movs	r3, r0
}
 8007128:	0018      	movs	r0, r3
 800712a:	46bd      	mov	sp, r7
 800712c:	b002      	add	sp, #8
 800712e:	bd80      	pop	{r7, pc}

08007130 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8007134:	f006 fba0 	bl	800d878 <HIDS_DeviceConnected>
 8007138:	0003      	movs	r3, r0
}
 800713a:	0018      	movs	r0, r3
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007144:	4b1b      	ldr	r3, [pc, #108]	@ (80071b4 <MX_I2C1_Init+0x74>)
 8007146:	4a1c      	ldr	r2, [pc, #112]	@ (80071b8 <MX_I2C1_Init+0x78>)
 8007148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 800714a:	4b1a      	ldr	r3, [pc, #104]	@ (80071b4 <MX_I2C1_Init+0x74>)
 800714c:	4a1b      	ldr	r2, [pc, #108]	@ (80071bc <MX_I2C1_Init+0x7c>)
 800714e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8007150:	4b18      	ldr	r3, [pc, #96]	@ (80071b4 <MX_I2C1_Init+0x74>)
 8007152:	2200      	movs	r2, #0
 8007154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007156:	4b17      	ldr	r3, [pc, #92]	@ (80071b4 <MX_I2C1_Init+0x74>)
 8007158:	2201      	movs	r2, #1
 800715a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800715c:	4b15      	ldr	r3, [pc, #84]	@ (80071b4 <MX_I2C1_Init+0x74>)
 800715e:	2200      	movs	r2, #0
 8007160:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007162:	4b14      	ldr	r3, [pc, #80]	@ (80071b4 <MX_I2C1_Init+0x74>)
 8007164:	2200      	movs	r2, #0
 8007166:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007168:	4b12      	ldr	r3, [pc, #72]	@ (80071b4 <MX_I2C1_Init+0x74>)
 800716a:	2200      	movs	r2, #0
 800716c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800716e:	4b11      	ldr	r3, [pc, #68]	@ (80071b4 <MX_I2C1_Init+0x74>)
 8007170:	2200      	movs	r2, #0
 8007172:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007174:	4b0f      	ldr	r3, [pc, #60]	@ (80071b4 <MX_I2C1_Init+0x74>)
 8007176:	2200      	movs	r2, #0
 8007178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800717a:	4b0e      	ldr	r3, [pc, #56]	@ (80071b4 <MX_I2C1_Init+0x74>)
 800717c:	0018      	movs	r0, r3
 800717e:	f007 ffbf 	bl	800f100 <HAL_I2C_Init>
 8007182:	1e03      	subs	r3, r0, #0
 8007184:	d001      	beq.n	800718a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8007186:	f000 fceb 	bl	8007b60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800718a:	4b0a      	ldr	r3, [pc, #40]	@ (80071b4 <MX_I2C1_Init+0x74>)
 800718c:	2100      	movs	r1, #0
 800718e:	0018      	movs	r0, r3
 8007190:	f00a fb90 	bl	80118b4 <HAL_I2CEx_ConfigAnalogFilter>
 8007194:	1e03      	subs	r3, r0, #0
 8007196:	d001      	beq.n	800719c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8007198:	f000 fce2 	bl	8007b60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <MX_I2C1_Init+0x74>)
 800719e:	2100      	movs	r1, #0
 80071a0:	0018      	movs	r0, r3
 80071a2:	f00a fbd3 	bl	801194c <HAL_I2CEx_ConfigDigitalFilter>
 80071a6:	1e03      	subs	r3, r0, #0
 80071a8:	d001      	beq.n	80071ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80071aa:	f000 fcd9 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80071ae:	46c0      	nop			@ (mov r8, r8)
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20000d40 	.word	0x20000d40
 80071b8:	40005400 	.word	0x40005400
 80071bc:	00503d58 	.word	0x00503d58

080071c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80071c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <MX_I2C2_Init+0x78>)
 80071c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 80071ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071cc:	4a1b      	ldr	r2, [pc, #108]	@ (800723c <MX_I2C2_Init+0x7c>)
 80071ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80071d0:	4b18      	ldr	r3, [pc, #96]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80071d6:	4b17      	ldr	r3, [pc, #92]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071d8:	2201      	movs	r2, #1
 80071da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80071dc:	4b15      	ldr	r3, [pc, #84]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071de:	2200      	movs	r2, #0
 80071e0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80071e2:	4b14      	ldr	r3, [pc, #80]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80071e8:	4b12      	ldr	r3, [pc, #72]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80071ee:	4b11      	ldr	r3, [pc, #68]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80071f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80071fa:	4b0e      	ldr	r3, [pc, #56]	@ (8007234 <MX_I2C2_Init+0x74>)
 80071fc:	0018      	movs	r0, r3
 80071fe:	f007 ff7f 	bl	800f100 <HAL_I2C_Init>
 8007202:	1e03      	subs	r3, r0, #0
 8007204:	d001      	beq.n	800720a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007206:	f000 fcab 	bl	8007b60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800720a:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <MX_I2C2_Init+0x74>)
 800720c:	2100      	movs	r1, #0
 800720e:	0018      	movs	r0, r3
 8007210:	f00a fb50 	bl	80118b4 <HAL_I2CEx_ConfigAnalogFilter>
 8007214:	1e03      	subs	r3, r0, #0
 8007216:	d001      	beq.n	800721c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007218:	f000 fca2 	bl	8007b60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800721c:	4b05      	ldr	r3, [pc, #20]	@ (8007234 <MX_I2C2_Init+0x74>)
 800721e:	2100      	movs	r1, #0
 8007220:	0018      	movs	r0, r3
 8007222:	f00a fb93 	bl	801194c <HAL_I2CEx_ConfigDigitalFilter>
 8007226:	1e03      	subs	r3, r0, #0
 8007228:	d001      	beq.n	800722e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800722a:	f000 fc99 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20000d94 	.word	0x20000d94
 8007238:	40005800 	.word	0x40005800
 800723c:	00503d58 	.word	0x00503d58

08007240 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007240:	b590      	push	{r4, r7, lr}
 8007242:	b08b      	sub	sp, #44	@ 0x2c
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007248:	2414      	movs	r4, #20
 800724a:	193b      	adds	r3, r7, r4
 800724c:	0018      	movs	r0, r3
 800724e:	2314      	movs	r3, #20
 8007250:	001a      	movs	r2, r3
 8007252:	2100      	movs	r1, #0
 8007254:	f017 fea4 	bl	801efa0 <memset>
  if(i2cHandle->Instance==I2C1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a5d      	ldr	r2, [pc, #372]	@ (80073d4 <HAL_I2C_MspInit+0x194>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d000      	beq.n	8007264 <HAL_I2C_MspInit+0x24>
 8007262:	e083      	b.n	800736c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007264:	4b5c      	ldr	r3, [pc, #368]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 8007266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007268:	4b5b      	ldr	r3, [pc, #364]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 800726a:	2102      	movs	r1, #2
 800726c:	430a      	orrs	r2, r1
 800726e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007270:	4b59      	ldr	r3, [pc, #356]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	2202      	movs	r2, #2
 8007276:	4013      	ands	r3, r2
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800727c:	0021      	movs	r1, r4
 800727e:	187b      	adds	r3, r7, r1
 8007280:	22c0      	movs	r2, #192	@ 0xc0
 8007282:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007284:	187b      	adds	r3, r7, r1
 8007286:	2212      	movs	r2, #18
 8007288:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800728a:	187b      	adds	r3, r7, r1
 800728c:	2200      	movs	r2, #0
 800728e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007290:	187b      	adds	r3, r7, r1
 8007292:	2203      	movs	r2, #3
 8007294:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8007296:	187b      	adds	r3, r7, r1
 8007298:	2201      	movs	r2, #1
 800729a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800729c:	187b      	adds	r3, r7, r1
 800729e:	4a4f      	ldr	r2, [pc, #316]	@ (80073dc <HAL_I2C_MspInit+0x19c>)
 80072a0:	0019      	movs	r1, r3
 80072a2:	0010      	movs	r0, r2
 80072a4:	f007 fd58 	bl	800ed58 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80072a8:	4b4b      	ldr	r3, [pc, #300]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 80072aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072ac:	4b4a      	ldr	r3, [pc, #296]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 80072ae:	2180      	movs	r1, #128	@ 0x80
 80072b0:	0389      	lsls	r1, r1, #14
 80072b2:	430a      	orrs	r2, r1
 80072b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 80072b6:	4b4a      	ldr	r3, [pc, #296]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072b8:	4a4a      	ldr	r2, [pc, #296]	@ (80073e4 <HAL_I2C_MspInit+0x1a4>)
 80072ba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 80072bc:	4b48      	ldr	r3, [pc, #288]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072be:	2206      	movs	r2, #6
 80072c0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072c2:	4b47      	ldr	r3, [pc, #284]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072c8:	4b45      	ldr	r3, [pc, #276]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072ce:	4b44      	ldr	r3, [pc, #272]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072d0:	2280      	movs	r2, #128	@ 0x80
 80072d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072d4:	4b42      	ldr	r3, [pc, #264]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072da:	4b41      	ldr	r3, [pc, #260]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072dc:	2200      	movs	r2, #0
 80072de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80072e0:	4b3f      	ldr	r3, [pc, #252]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80072e6:	4b3e      	ldr	r3, [pc, #248]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80072ec:	4b3c      	ldr	r3, [pc, #240]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 80072ee:	0018      	movs	r0, r3
 80072f0:	f007 f916 	bl	800e520 <HAL_DMA_Init>
 80072f4:	1e03      	subs	r3, r0, #0
 80072f6:	d001      	beq.n	80072fc <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80072f8:	f000 fc32 	bl	8007b60 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a38      	ldr	r2, [pc, #224]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 8007300:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007302:	4b37      	ldr	r3, [pc, #220]	@ (80073e0 <HAL_I2C_MspInit+0x1a0>)
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8007308:	4b37      	ldr	r3, [pc, #220]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 800730a:	4a38      	ldr	r2, [pc, #224]	@ (80073ec <HAL_I2C_MspInit+0x1ac>)
 800730c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800730e:	4b36      	ldr	r3, [pc, #216]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007310:	2206      	movs	r2, #6
 8007312:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007314:	4b34      	ldr	r3, [pc, #208]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007316:	2210      	movs	r2, #16
 8007318:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800731a:	4b33      	ldr	r3, [pc, #204]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 800731c:	2200      	movs	r2, #0
 800731e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007320:	4b31      	ldr	r3, [pc, #196]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007322:	2280      	movs	r2, #128	@ 0x80
 8007324:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007326:	4b30      	ldr	r3, [pc, #192]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007328:	2200      	movs	r2, #0
 800732a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800732c:	4b2e      	ldr	r3, [pc, #184]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 800732e:	2200      	movs	r2, #0
 8007330:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8007332:	4b2d      	ldr	r3, [pc, #180]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007334:	2200      	movs	r2, #0
 8007336:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007338:	4b2b      	ldr	r3, [pc, #172]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 800733a:	2200      	movs	r2, #0
 800733c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800733e:	4b2a      	ldr	r3, [pc, #168]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007340:	0018      	movs	r0, r3
 8007342:	f007 f8ed 	bl	800e520 <HAL_DMA_Init>
 8007346:	1e03      	subs	r3, r0, #0
 8007348:	d001      	beq.n	800734e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 800734a:	f000 fc09 	bl	8007b60 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a25      	ldr	r2, [pc, #148]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007352:	639a      	str	r2, [r3, #56]	@ 0x38
 8007354:	4b24      	ldr	r3, [pc, #144]	@ (80073e8 <HAL_I2C_MspInit+0x1a8>)
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800735a:	2200      	movs	r2, #0
 800735c:	2100      	movs	r1, #0
 800735e:	2017      	movs	r0, #23
 8007360:	f007 f8ac 	bl	800e4bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8007364:	2017      	movs	r0, #23
 8007366:	f007 f8be 	bl	800e4e6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800736a:	e02e      	b.n	80073ca <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a1f      	ldr	r2, [pc, #124]	@ (80073f0 <HAL_I2C_MspInit+0x1b0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d129      	bne.n	80073ca <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007376:	4b18      	ldr	r3, [pc, #96]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 8007378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737a:	4b17      	ldr	r3, [pc, #92]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 800737c:	2102      	movs	r1, #2
 800737e:	430a      	orrs	r2, r1
 8007380:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007382:	4b15      	ldr	r3, [pc, #84]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 8007384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007386:	2202      	movs	r2, #2
 8007388:	4013      	ands	r3, r2
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800738e:	2114      	movs	r1, #20
 8007390:	187b      	adds	r3, r7, r1
 8007392:	22c0      	movs	r2, #192	@ 0xc0
 8007394:	0112      	lsls	r2, r2, #4
 8007396:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007398:	187b      	adds	r3, r7, r1
 800739a:	2212      	movs	r2, #18
 800739c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800739e:	187b      	adds	r3, r7, r1
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073a4:	187b      	adds	r3, r7, r1
 80073a6:	2203      	movs	r2, #3
 80073a8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80073aa:	187b      	adds	r3, r7, r1
 80073ac:	2206      	movs	r2, #6
 80073ae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073b0:	187b      	adds	r3, r7, r1
 80073b2:	4a0a      	ldr	r2, [pc, #40]	@ (80073dc <HAL_I2C_MspInit+0x19c>)
 80073b4:	0019      	movs	r1, r3
 80073b6:	0010      	movs	r0, r2
 80073b8:	f007 fcce 	bl	800ed58 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80073bc:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 80073be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073c0:	4b05      	ldr	r3, [pc, #20]	@ (80073d8 <HAL_I2C_MspInit+0x198>)
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	03c9      	lsls	r1, r1, #15
 80073c6:	430a      	orrs	r2, r1
 80073c8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80073ca:	46c0      	nop			@ (mov r8, r8)
 80073cc:	46bd      	mov	sp, r7
 80073ce:	b00b      	add	sp, #44	@ 0x2c
 80073d0:	bd90      	pop	{r4, r7, pc}
 80073d2:	46c0      	nop			@ (mov r8, r8)
 80073d4:	40005400 	.word	0x40005400
 80073d8:	40021000 	.word	0x40021000
 80073dc:	50000400 	.word	0x50000400
 80073e0:	20000de8 	.word	0x20000de8
 80073e4:	40020030 	.word	0x40020030
 80073e8:	20000e30 	.word	0x20000e30
 80073ec:	4002001c 	.word	0x4002001c
 80073f0:	40005800 	.word	0x40005800

080073f4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80073f8:	4b10      	ldr	r3, [pc, #64]	@ (800743c <MX_I2S2_Init+0x48>)
 80073fa:	4a11      	ldr	r2, [pc, #68]	@ (8007440 <MX_I2S2_Init+0x4c>)
 80073fc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80073fe:	4b0f      	ldr	r3, [pc, #60]	@ (800743c <MX_I2S2_Init+0x48>)
 8007400:	22c0      	movs	r2, #192	@ 0xc0
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8007406:	4b0d      	ldr	r3, [pc, #52]	@ (800743c <MX_I2S2_Init+0x48>)
 8007408:	2200      	movs	r2, #0
 800740a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800740c:	4b0b      	ldr	r3, [pc, #44]	@ (800743c <MX_I2S2_Init+0x48>)
 800740e:	2203      	movs	r2, #3
 8007410:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8007412:	4b0a      	ldr	r3, [pc, #40]	@ (800743c <MX_I2S2_Init+0x48>)
 8007414:	2200      	movs	r2, #0
 8007416:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8007418:	4b08      	ldr	r3, [pc, #32]	@ (800743c <MX_I2S2_Init+0x48>)
 800741a:	22fa      	movs	r2, #250	@ 0xfa
 800741c:	0192      	lsls	r2, r2, #6
 800741e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8007420:	4b06      	ldr	r3, [pc, #24]	@ (800743c <MX_I2S2_Init+0x48>)
 8007422:	2200      	movs	r2, #0
 8007424:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8007426:	4b05      	ldr	r3, [pc, #20]	@ (800743c <MX_I2S2_Init+0x48>)
 8007428:	0018      	movs	r0, r3
 800742a:	f00a fadb 	bl	80119e4 <HAL_I2S_Init>
 800742e:	1e03      	subs	r3, r0, #0
 8007430:	d001      	beq.n	8007436 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8007432:	f000 fb95 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8007436:	46c0      	nop			@ (mov r8, r8)
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000e78 	.word	0x20000e78
 8007440:	40003800 	.word	0x40003800

08007444 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8007444:	b590      	push	{r4, r7, lr}
 8007446:	b089      	sub	sp, #36	@ 0x24
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800744c:	240c      	movs	r4, #12
 800744e:	193b      	adds	r3, r7, r4
 8007450:	0018      	movs	r0, r3
 8007452:	2314      	movs	r3, #20
 8007454:	001a      	movs	r2, r3
 8007456:	2100      	movs	r1, #0
 8007458:	f017 fda2 	bl	801efa0 <memset>
  if(i2sHandle->Instance==SPI2)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2d      	ldr	r2, [pc, #180]	@ (8007518 <HAL_I2S_MspInit+0xd4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d154      	bne.n	8007510 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007466:	4b2d      	ldr	r3, [pc, #180]	@ (800751c <HAL_I2S_MspInit+0xd8>)
 8007468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800746a:	4b2c      	ldr	r3, [pc, #176]	@ (800751c <HAL_I2S_MspInit+0xd8>)
 800746c:	2180      	movs	r1, #128	@ 0x80
 800746e:	01c9      	lsls	r1, r1, #7
 8007470:	430a      	orrs	r2, r1
 8007472:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007474:	4b29      	ldr	r3, [pc, #164]	@ (800751c <HAL_I2S_MspInit+0xd8>)
 8007476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007478:	4b28      	ldr	r3, [pc, #160]	@ (800751c <HAL_I2S_MspInit+0xd8>)
 800747a:	2102      	movs	r1, #2
 800747c:	430a      	orrs	r2, r1
 800747e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007480:	4b26      	ldr	r3, [pc, #152]	@ (800751c <HAL_I2S_MspInit+0xd8>)
 8007482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007484:	2202      	movs	r2, #2
 8007486:	4013      	ands	r3, r2
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800748c:	193b      	adds	r3, r7, r4
 800748e:	22b0      	movs	r2, #176	@ 0xb0
 8007490:	0212      	lsls	r2, r2, #8
 8007492:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007494:	0021      	movs	r1, r4
 8007496:	187b      	adds	r3, r7, r1
 8007498:	2202      	movs	r2, #2
 800749a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749c:	187b      	adds	r3, r7, r1
 800749e:	2200      	movs	r2, #0
 80074a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074a2:	187b      	adds	r3, r7, r1
 80074a4:	2200      	movs	r2, #0
 80074a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80074a8:	187b      	adds	r3, r7, r1
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074ae:	187b      	adds	r3, r7, r1
 80074b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007520 <HAL_I2S_MspInit+0xdc>)
 80074b2:	0019      	movs	r1, r3
 80074b4:	0010      	movs	r0, r2
 80074b6:	f007 fc4f 	bl	800ed58 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 80074ba:	4b1a      	ldr	r3, [pc, #104]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <HAL_I2S_MspInit+0xe4>)
 80074be:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 80074c0:	4b18      	ldr	r3, [pc, #96]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074c2:	2202      	movs	r2, #2
 80074c4:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074c6:	4b17      	ldr	r3, [pc, #92]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80074cc:	4b15      	ldr	r3, [pc, #84]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80074d2:	4b14      	ldr	r3, [pc, #80]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074d4:	2280      	movs	r2, #128	@ 0x80
 80074d6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80074d8:	4b12      	ldr	r3, [pc, #72]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074da:	2280      	movs	r2, #128	@ 0x80
 80074dc:	0052      	lsls	r2, r2, #1
 80074de:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80074e0:	4b10      	ldr	r3, [pc, #64]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074e2:	2280      	movs	r2, #128	@ 0x80
 80074e4:	00d2      	lsls	r2, r2, #3
 80074e6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80074e8:	4b0e      	ldr	r3, [pc, #56]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074ea:	2220      	movs	r2, #32
 80074ec:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80074f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 80074f6:	0018      	movs	r0, r3
 80074f8:	f007 f812 	bl	800e520 <HAL_DMA_Init>
 80074fc:	1e03      	subs	r3, r0, #0
 80074fe:	d001      	beq.n	8007504 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8007500:	f000 fb2e 	bl	8007b60 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a07      	ldr	r2, [pc, #28]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 8007508:	631a      	str	r2, [r3, #48]	@ 0x30
 800750a:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <HAL_I2S_MspInit+0xe0>)
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007510:	46c0      	nop			@ (mov r8, r8)
 8007512:	46bd      	mov	sp, r7
 8007514:	b009      	add	sp, #36	@ 0x24
 8007516:	bd90      	pop	{r4, r7, pc}
 8007518:	40003800 	.word	0x40003800
 800751c:	40021000 	.word	0x40021000
 8007520:	50000400 	.word	0x50000400
 8007524:	20000eb4 	.word	0x20000eb4
 8007528:	40020044 	.word	0x40020044

0800752c <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 800752c:	b580      	push	{r7, lr}
 800752e:	af00      	add	r7, sp, #0
  testDone = true;
 8007530:	4b1e      	ldr	r3, [pc, #120]	@ (80075ac <SetTestDone+0x80>)
 8007532:	2201      	movs	r2, #1
 8007534:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 8007536:	23fa      	movs	r3, #250	@ 0xfa
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	0018      	movs	r0, r3
 800753c:	f006 fb36 	bl	800dbac <HAL_Delay>
  SetDBLED(false, false, true);
 8007540:	2201      	movs	r2, #1
 8007542:	2100      	movs	r1, #0
 8007544:	2000      	movs	r0, #0
 8007546:	f004 fff9 	bl	800c53c <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 800754a:	4a19      	ldr	r2, [pc, #100]	@ (80075b0 <SetTestDone+0x84>)
 800754c:	23fa      	movs	r3, #250	@ 0xfa
 800754e:	0119      	lsls	r1, r3, #4
 8007550:	23fa      	movs	r3, #250	@ 0xfa
 8007552:	011b      	lsls	r3, r3, #4
 8007554:	0018      	movs	r0, r3
 8007556:	f004 ffbd 	bl	800c4d4 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 800755a:	4a15      	ldr	r2, [pc, #84]	@ (80075b0 <SetTestDone+0x84>)
 800755c:	23fa      	movs	r3, #250	@ 0xfa
 800755e:	0119      	lsls	r1, r3, #4
 8007560:	23fa      	movs	r3, #250	@ 0xfa
 8007562:	011b      	lsls	r3, r3, #4
 8007564:	0018      	movs	r0, r3
 8007566:	f005 f833 	bl	800c5d0 <SetVocLED>
  HAL_Delay(1000);
 800756a:	23fa      	movs	r3, #250	@ 0xfa
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	0018      	movs	r0, r3
 8007570:	f006 fb1c 	bl	800dbac <HAL_Delay>
  SetDBLED(false, false, false);
 8007574:	2200      	movs	r2, #0
 8007576:	2100      	movs	r1, #0
 8007578:	2000      	movs	r0, #0
 800757a:	f004 ffdf 	bl	800c53c <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 800757e:	23fa      	movs	r3, #250	@ 0xfa
 8007580:	011a      	lsls	r2, r3, #4
 8007582:	23fa      	movs	r3, #250	@ 0xfa
 8007584:	0119      	lsls	r1, r3, #4
 8007586:	23fa      	movs	r3, #250	@ 0xfa
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	0018      	movs	r0, r3
 800758c:	f004 ffa2 	bl	800c4d4 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007590:	23fa      	movs	r3, #250	@ 0xfa
 8007592:	011a      	lsls	r2, r3, #4
 8007594:	23fa      	movs	r3, #250	@ 0xfa
 8007596:	0119      	lsls	r1, r3, #4
 8007598:	23fa      	movs	r3, #250	@ 0xfa
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	0018      	movs	r0, r3
 800759e:	f005 f817 	bl	800c5d0 <SetVocLED>
  InitDone();
 80075a2:	f004 ff41 	bl	800c428 <InitDone>
}
 80075a6:	46c0      	nop			@ (mov r8, r8)
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000efc 	.word	0x20000efc
 80075b0:	00000bb8 	.word	0x00000bb8

080075b4 <FlashLEDs>:

void FlashLEDs(){
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
  for (uint8_t i=0; i<5 ; i++){
 80075ba:	1dfb      	adds	r3, r7, #7
 80075bc:	2200      	movs	r2, #0
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	e021      	b.n	8007606 <FlashLEDs+0x52>
    SetDBLED(true, true, true);
 80075c2:	2201      	movs	r2, #1
 80075c4:	2101      	movs	r1, #1
 80075c6:	2001      	movs	r0, #1
 80075c8:	f004 ffb8 	bl	800c53c <SetDBLED>
    SetStatusLED(4000, 4000, 3000);
 80075cc:	4a12      	ldr	r2, [pc, #72]	@ (8007618 <FlashLEDs+0x64>)
 80075ce:	23fa      	movs	r3, #250	@ 0xfa
 80075d0:	0119      	lsls	r1, r3, #4
 80075d2:	23fa      	movs	r3, #250	@ 0xfa
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	0018      	movs	r0, r3
 80075d8:	f004 ff7c 	bl	800c4d4 <SetStatusLED>
    SetVocLED(4000, 4000, 3000);
 80075dc:	4a0e      	ldr	r2, [pc, #56]	@ (8007618 <FlashLEDs+0x64>)
 80075de:	23fa      	movs	r3, #250	@ 0xfa
 80075e0:	0119      	lsls	r1, r3, #4
 80075e2:	23fa      	movs	r3, #250	@ 0xfa
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	0018      	movs	r0, r3
 80075e8:	f004 fff2 	bl	800c5d0 <SetVocLED>
    HAL_Delay(250);
 80075ec:	20fa      	movs	r0, #250	@ 0xfa
 80075ee:	f006 fadd 	bl	800dbac <HAL_Delay>
    SetLEDsOff();
 80075f2:	f005 f8ab 	bl	800c74c <SetLEDsOff>
    HAL_Delay(250);
 80075f6:	20fa      	movs	r0, #250	@ 0xfa
 80075f8:	f006 fad8 	bl	800dbac <HAL_Delay>
  for (uint8_t i=0; i<5 ; i++){
 80075fc:	1dfb      	adds	r3, r7, #7
 80075fe:	781a      	ldrb	r2, [r3, #0]
 8007600:	1dfb      	adds	r3, r7, #7
 8007602:	3201      	adds	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
 8007606:	1dfb      	adds	r3, r7, #7
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b04      	cmp	r3, #4
 800760c:	d9d9      	bls.n	80075c2 <FlashLEDs+0xe>
  }
}
 800760e:	46c0      	nop			@ (mov r8, r8)
 8007610:	46c0      	nop			@ (mov r8, r8)
 8007612:	46bd      	mov	sp, r7
 8007614:	b002      	add	sp, #8
 8007616:	bd80      	pop	{r7, pc}
 8007618:	00000bb8 	.word	0x00000bb8

0800761c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007620:	f006 fa54 	bl	800dacc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007624:	f000 f952 	bl	80078cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007628:	f7ff fbde 	bl	8006de8 <MX_GPIO_Init>
  MX_DMA_Init();
 800762c:	f7ff fa28 	bl	8006a80 <MX_DMA_Init>
  MX_I2C1_Init();
 8007630:	f7ff fd86 	bl	8007140 <MX_I2C1_Init>
  MX_I2S2_Init();
 8007634:	f7ff fede 	bl	80073f4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8007638:	f005 fd1e 	bl	800d078 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800763c:	f7ff fdc0 	bl	80071c0 <MX_I2C2_Init>
  MX_TIM2_Init();
 8007640:	f005 fb12 	bl	800cc68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007644:	f005 fb84 	bl	800cd50 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8007648:	f005 fd4a 	bl	800d0e0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800764c:	f7ff f966 	bl	800691c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8007650:	f014 f9b4 	bl	801b9bc <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 8007654:	f001 f842 	bl	80086dc <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8007658:	f005 fcd8 	bl	800d00c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 800765c:	f005 fbf6 	bl	800ce4c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar or check LED on/off mode?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8007660:	4a7b      	ldr	r2, [pc, #492]	@ (8007850 <main+0x234>)
 8007662:	4b7c      	ldr	r3, [pc, #496]	@ (8007854 <main+0x238>)
 8007664:	0011      	movs	r1, r2
 8007666:	0018      	movs	r0, r3
 8007668:	f7ff fcee 	bl	8007048 <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 800766c:	f7fe fd68 	bl	8006140 <UserButton_Pressed>
 8007670:	1e03      	subs	r3, r0, #0
 8007672:	d004      	beq.n	800767e <main+0x62>
    EnableESPProg();
 8007674:	f014 fa72 	bl	801bb5c <EnableESPProg>
    ESP_Programming = true;
 8007678:	4b77      	ldr	r3, [pc, #476]	@ (8007858 <main+0x23c>)
 800767a:	2201      	movs	r2, #1
 800767c:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 800767e:	2003      	movs	r0, #3
 8007680:	f005 ff56 	bl	800d530 <SetVerboseLevel>
  BinaryReleaseInfo();
 8007684:	f005 ff6c 	bl	800d560 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007688:	4974      	ldr	r1, [pc, #464]	@ (800785c <main+0x240>)
 800768a:	4b75      	ldr	r3, [pc, #468]	@ (8007860 <main+0x244>)
 800768c:	2201      	movs	r2, #1
 800768e:	0018      	movs	r0, r3
 8007690:	f00e fcfa 	bl	8016088 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007694:	4b73      	ldr	r3, [pc, #460]	@ (8007864 <main+0x248>)
 8007696:	0018      	movs	r0, r3
 8007698:	f7ff f868 	bl	800676c <InitClock>

  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 800769c:	4a72      	ldr	r2, [pc, #456]	@ (8007868 <main+0x24c>)
 800769e:	4973      	ldr	r1, [pc, #460]	@ (800786c <main+0x250>)
 80076a0:	4873      	ldr	r0, [pc, #460]	@ (8007870 <main+0x254>)
 80076a2:	230b      	movs	r3, #11
 80076a4:	f004 f836 	bl	800b714 <soundInit>
 80076a8:	0003      	movs	r3, r0
 80076aa:	001a      	movs	r2, r3
 80076ac:	2301      	movs	r3, #1
 80076ae:	4053      	eors	r3, r2
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d005      	beq.n	80076c2 <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 80076b6:	4a6f      	ldr	r2, [pc, #444]	@ (8007874 <main+0x258>)
 80076b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007878 <main+0x25c>)
 80076ba:	21e5      	movs	r1, #229	@ 0xe5
 80076bc:	0018      	movs	r0, r3
 80076be:	f005 ff83 	bl	800d5c8 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80076c2:	4b6e      	ldr	r3, [pc, #440]	@ (800787c <main+0x260>)
 80076c4:	4a6e      	ldr	r2, [pc, #440]	@ (8007880 <main+0x264>)
 80076c6:	4969      	ldr	r1, [pc, #420]	@ (800786c <main+0x250>)
 80076c8:	486e      	ldr	r0, [pc, #440]	@ (8007884 <main+0x268>)
 80076ca:	f7ff fb09 	bl	8006ce0 <Gadget_Init>
  Debug("Clock init done");
 80076ce:	4a6e      	ldr	r2, [pc, #440]	@ (8007888 <main+0x26c>)
 80076d0:	4b6e      	ldr	r3, [pc, #440]	@ (800788c <main+0x270>)
 80076d2:	0019      	movs	r1, r3
 80076d4:	2003      	movs	r0, #3
 80076d6:	f005 fec1 	bl	800d45c <CreateLine>
  if (!probe_sen5x()) {
 80076da:	f001 f92b 	bl	8008934 <probe_sen5x>
 80076de:	1e03      	subs	r3, r0, #0
 80076e0:	d10a      	bne.n	80076f8 <main+0xdc>
    sen5x_Present = true; // not present
 80076e2:	4b6b      	ldr	r3, [pc, #428]	@ (8007890 <main+0x274>)
 80076e4:	2201      	movs	r2, #1
 80076e6:	701a      	strb	r2, [r3, #0]
    sen5x_Power_Off();      // switch off buck converter
 80076e8:	f001 f8fc 	bl	80088e4 <sen5x_Power_Off>
    Debug("sen5x sensor not detected, polling disabled.");
 80076ec:	4a69      	ldr	r2, [pc, #420]	@ (8007894 <main+0x278>)
 80076ee:	4b67      	ldr	r3, [pc, #412]	@ (800788c <main+0x270>)
 80076f0:	0019      	movs	r1, r3
 80076f2:	2003      	movs	r0, #3
 80076f4:	f005 feb2 	bl	800d45c <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 80076f8:	4b67      	ldr	r3, [pc, #412]	@ (8007898 <main+0x27c>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d019      	beq.n	8007734 <main+0x118>
 8007700:	4b55      	ldr	r3, [pc, #340]	@ (8007858 <main+0x23c>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2201      	movs	r2, #1
 8007706:	4053      	eors	r3, r2
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d012      	beq.n	8007734 <main+0x118>
 800770e:	4b63      	ldr	r3, [pc, #396]	@ (800789c <main+0x280>)
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2201      	movs	r2, #1
 8007714:	4053      	eors	r3, r2
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <main+0x118>
      MeasurementBusy = UpkeepGadget();
 800771c:	f7ff fb0e 	bl	8006d3c <UpkeepGadget>
 8007720:	0003      	movs	r3, r0
 8007722:	001a      	movs	r2, r3
 8007724:	4b5e      	ldr	r3, [pc, #376]	@ (80078a0 <main+0x284>)
 8007726:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007728:	f7fd fd7e 	bl	8005228 <ESP_Upkeep>
 800772c:	0003      	movs	r3, r0
 800772e:	001a      	movs	r2, r3
 8007730:	4b5c      	ldr	r3, [pc, #368]	@ (80078a4 <main+0x288>)
 8007732:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007734:	4b58      	ldr	r3, [pc, #352]	@ (8007898 <main+0x27c>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2201      	movs	r2, #1
 800773a:	4053      	eors	r3, r2
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00f      	beq.n	8007762 <main+0x146>
 8007742:	4b45      	ldr	r3, [pc, #276]	@ (8007858 <main+0x23c>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2201      	movs	r2, #1
 8007748:	4053      	eors	r3, r2
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d008      	beq.n	8007762 <main+0x146>
 8007750:	4b52      	ldr	r3, [pc, #328]	@ (800789c <main+0x280>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2201      	movs	r2, #1
 8007756:	4053      	eors	r3, r2
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <main+0x146>
      Gadget_Test();
 800775e:	f7ff fae5 	bl	8006d2c <Gadget_Test>
    }
    Status_Upkeep();
 8007762:	f005 f905 	bl	800c970 <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 8007766:	4b50      	ldr	r3, [pc, #320]	@ (80078a8 <main+0x28c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	0018      	movs	r0, r3
 800776c:	f005 fe20 	bl	800d3b0 <TimestampIsReached>
 8007770:	1e03      	subs	r3, r0, #0
 8007772:	d00c      	beq.n	800778e <main+0x172>
      charge = Battery_Upkeep();
 8007774:	f005 f903 	bl	800c97e <Battery_Upkeep>
 8007778:	0003      	movs	r3, r0
 800777a:	001a      	movs	r2, r3
 800777c:	4b4b      	ldr	r3, [pc, #300]	@ (80078ac <main+0x290>)
 800777e:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 8007780:	f006 fa0a 	bl	800db98 <HAL_GetTick>
 8007784:	0003      	movs	r3, r0
 8007786:	4a4a      	ldr	r2, [pc, #296]	@ (80078b0 <main+0x294>)
 8007788:	189a      	adds	r2, r3, r2
 800778a:	4b47      	ldr	r3, [pc, #284]	@ (80078a8 <main+0x28c>)
 800778c:	601a      	str	r2, [r3, #0]
    }

    if(((charge > BATTERY_LOW) || (charge == USB_PLUGGED_IN)) && sen5x_Present) {
 800778e:	4b47      	ldr	r3, [pc, #284]	@ (80078ac <main+0x290>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b02      	cmp	r3, #2
 8007794:	d803      	bhi.n	800779e <main+0x182>
 8007796:	4b45      	ldr	r3, [pc, #276]	@ (80078ac <main+0x290>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d119      	bne.n	80077d2 <main+0x1b6>
 800779e:	4b3c      	ldr	r3, [pc, #240]	@ (8007890 <main+0x274>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d015      	beq.n	80077d2 <main+0x1b6>
      if  (charge > BATTERY_LOW) {
 80077a6:	4b41      	ldr	r3, [pc, #260]	@ (80078ac <main+0x290>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d903      	bls.n	80077b6 <main+0x19a>
        sen5x_statemachine(0);
 80077ae:	2000      	movs	r0, #0
 80077b0:	f001 fc7c 	bl	80090ac <sen5x_statemachine>
 80077b4:	e00d      	b.n	80077d2 <main+0x1b6>
      }
      else {
        if (charge == USB_PLUGGED_IN) {
 80077b6:	4b3d      	ldr	r3, [pc, #244]	@ (80078ac <main+0x290>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d103      	bne.n	80077c6 <main+0x1aa>
          sen5x_statemachine(USB_PLUGGED_IN);
 80077be:	2001      	movs	r0, #1
 80077c0:	f001 fc74 	bl	80090ac <sen5x_statemachine>
 80077c4:	e005      	b.n	80077d2 <main+0x1b6>
        }
        else  {
          Info("Battery level insufficient for sen5x operation");
 80077c6:	4a3b      	ldr	r2, [pc, #236]	@ (80078b4 <main+0x298>)
 80077c8:	4b3b      	ldr	r3, [pc, #236]	@ (80078b8 <main+0x29c>)
 80077ca:	0019      	movs	r1, r3
 80077cc:	2002      	movs	r0, #2
 80077ce:	f005 fe45 	bl	800d45c <CreateLine>
        }
      }
    }

    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){
 80077d2:	4b36      	ldr	r3, [pc, #216]	@ (80078ac <main+0x290>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d003      	beq.n	80077e2 <main+0x1c6>
 80077da:	4b34      	ldr	r3, [pc, #208]	@ (80078ac <main+0x290>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <main+0x1ca>
      FlashLEDs();
 80077e2:	f7ff fee7 	bl	80075b4 <FlashLEDs>
    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 80077e6:	4b31      	ldr	r3, [pc, #196]	@ (80078ac <main+0x290>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <main+0x1e6>
 80077ee:	4b2d      	ldr	r3, [pc, #180]	@ (80078a4 <main+0x288>)
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b09      	cmp	r3, #9
 80077f4:	d105      	bne.n	8007802 <main+0x1e6>
      batteryEmpty = true;
 80077f6:	4b29      	ldr	r3, [pc, #164]	@ (800789c <main+0x280>)
 80077f8:	2201      	movs	r2, #1
 80077fa:	701a      	strb	r2, [r3, #0]
      Enter_Standby_Mode(); // we are going in deep sleep, nearly off and no wakeup from RTC
 80077fc:	f7fe ff22 	bl	8006644 <Enter_Standby_Mode>
 8007800:	e002      	b.n	8007808 <main+0x1ec>
    }
    else{
      batteryEmpty = false;
 8007802:	4b26      	ldr	r3, [pc, #152]	@ (800789c <main+0x280>)
 8007804:	2200      	movs	r2, #0
 8007806:	701a      	strb	r2, [r3, #0]
    }
    if (!usbPluggedIn && !userToggle && ESPTransmitDone && !EspTurnedOn) {
 8007808:	4b2c      	ldr	r3, [pc, #176]	@ (80078bc <main+0x2a0>)
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2201      	movs	r2, #1
 800780e:	4053      	eors	r3, r2
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d100      	bne.n	8007818 <main+0x1fc>
 8007816:	e76f      	b.n	80076f8 <main+0xdc>
 8007818:	4b29      	ldr	r3, [pc, #164]	@ (80078c0 <main+0x2a4>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2201      	movs	r2, #1
 800781e:	4053      	eors	r3, r2
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d100      	bne.n	8007828 <main+0x20c>
 8007826:	e767      	b.n	80076f8 <main+0xdc>
 8007828:	4b26      	ldr	r3, [pc, #152]	@ (80078c4 <main+0x2a8>)
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d100      	bne.n	8007832 <main+0x216>
 8007830:	e762      	b.n	80076f8 <main+0xdc>
 8007832:	4b25      	ldr	r3, [pc, #148]	@ (80078c8 <main+0x2ac>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2201      	movs	r2, #1
 8007838:	4053      	eors	r3, r2
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	d100      	bne.n	8007842 <main+0x226>
 8007840:	e75a      	b.n	80076f8 <main+0xdc>
      // ok to operate on battery
      Enter_Stop_Mode(880);
 8007842:	23dc      	movs	r3, #220	@ 0xdc
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	0018      	movs	r0, r3
 8007848:	f7fe ff1e 	bl	8006688 <Enter_Stop_Mode>
    if(testDone && !ESP_Programming && !batteryEmpty){
 800784c:	e754      	b.n	80076f8 <main+0xdc>
 800784e:	46c0      	nop			@ (mov r8, r8)
 8007850:	200021a8 	.word	0x200021a8
 8007854:	20002168 	.word	0x20002168
 8007858:	20000efd 	.word	0x20000efd
 800785c:	20000f0c 	.word	0x20000f0c
 8007860:	200022e0 	.word	0x200022e0
 8007864:	200011bc 	.word	0x200011bc
 8007868:	200021e8 	.word	0x200021e8
 800786c:	20000e78 	.word	0x20000e78
 8007870:	20000eb4 	.word	0x20000eb4
 8007874:	08022a18 	.word	0x08022a18
 8007878:	08023b5c 	.word	0x08023b5c
 800787c:	20000ce0 	.word	0x20000ce0
 8007880:	20002398 	.word	0x20002398
 8007884:	20000d40 	.word	0x20000d40
 8007888:	08022a2c 	.word	0x08022a2c
 800788c:	08022a3c 	.word	0x08022a3c
 8007890:	20000f00 	.word	0x20000f00
 8007894:	08022a40 	.word	0x08022a40
 8007898:	20000efc 	.word	0x20000efc
 800789c:	20000efe 	.word	0x20000efe
 80078a0:	20000eff 	.word	0x20000eff
 80078a4:	20000f09 	.word	0x20000f09
 80078a8:	20000f04 	.word	0x20000f04
 80078ac:	20000f08 	.word	0x20000f08
 80078b0:	0000ea60 	.word	0x0000ea60
 80078b4:	08022a70 	.word	0x08022a70
 80078b8:	08022aa0 	.word	0x08022aa0
 80078bc:	2000215d 	.word	0x2000215d
 80078c0:	2000215e 	.word	0x2000215e
 80078c4:	2000054f 	.word	0x2000054f
 80078c8:	20000548 	.word	0x20000548

080078cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b09d      	sub	sp, #116	@ 0x74
 80078d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80078d2:	2438      	movs	r4, #56	@ 0x38
 80078d4:	193b      	adds	r3, r7, r4
 80078d6:	0018      	movs	r0, r3
 80078d8:	2338      	movs	r3, #56	@ 0x38
 80078da:	001a      	movs	r2, r3
 80078dc:	2100      	movs	r1, #0
 80078de:	f017 fb5f 	bl	801efa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80078e2:	2324      	movs	r3, #36	@ 0x24
 80078e4:	18fb      	adds	r3, r7, r3
 80078e6:	0018      	movs	r0, r3
 80078e8:	2314      	movs	r3, #20
 80078ea:	001a      	movs	r2, r3
 80078ec:	2100      	movs	r1, #0
 80078ee:	f017 fb57 	bl	801efa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078f2:	003b      	movs	r3, r7
 80078f4:	0018      	movs	r0, r3
 80078f6:	2324      	movs	r3, #36	@ 0x24
 80078f8:	001a      	movs	r2, r3
 80078fa:	2100      	movs	r1, #0
 80078fc:	f017 fb50 	bl	801efa0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007900:	4b34      	ldr	r3, [pc, #208]	@ (80079d4 <SystemClock_Config+0x108>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a34      	ldr	r2, [pc, #208]	@ (80079d8 <SystemClock_Config+0x10c>)
 8007906:	401a      	ands	r2, r3
 8007908:	4b32      	ldr	r3, [pc, #200]	@ (80079d4 <SystemClock_Config+0x108>)
 800790a:	2180      	movs	r1, #128	@ 0x80
 800790c:	0109      	lsls	r1, r1, #4
 800790e:	430a      	orrs	r2, r1
 8007910:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8007912:	f00c f9cb 	bl	8013cac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8007916:	4b31      	ldr	r3, [pc, #196]	@ (80079dc <SystemClock_Config+0x110>)
 8007918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800791a:	4a2f      	ldr	r2, [pc, #188]	@ (80079d8 <SystemClock_Config+0x10c>)
 800791c:	401a      	ands	r2, r3
 800791e:	4b2f      	ldr	r3, [pc, #188]	@ (80079dc <SystemClock_Config+0x110>)
 8007920:	2180      	movs	r1, #128	@ 0x80
 8007922:	0149      	lsls	r1, r1, #5
 8007924:	430a      	orrs	r2, r1
 8007926:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8007928:	193b      	adds	r3, r7, r4
 800792a:	2226      	movs	r2, #38	@ 0x26
 800792c:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800792e:	193b      	adds	r3, r7, r4
 8007930:	2280      	movs	r2, #128	@ 0x80
 8007932:	0052      	lsls	r2, r2, #1
 8007934:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007936:	0021      	movs	r1, r4
 8007938:	187b      	adds	r3, r7, r1
 800793a:	2201      	movs	r2, #1
 800793c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800793e:	187b      	adds	r3, r7, r1
 8007940:	2210      	movs	r2, #16
 8007942:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007944:	187b      	adds	r3, r7, r1
 8007946:	2201      	movs	r2, #1
 8007948:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800794a:	187b      	adds	r3, r7, r1
 800794c:	2200      	movs	r2, #0
 800794e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007950:	187b      	adds	r3, r7, r1
 8007952:	0018      	movs	r0, r3
 8007954:	f00c fa2a 	bl	8013dac <HAL_RCC_OscConfig>
 8007958:	1e03      	subs	r3, r0, #0
 800795a:	d001      	beq.n	8007960 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800795c:	f000 f900 	bl	8007b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007960:	2124      	movs	r1, #36	@ 0x24
 8007962:	187b      	adds	r3, r7, r1
 8007964:	220f      	movs	r2, #15
 8007966:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8007968:	187b      	adds	r3, r7, r1
 800796a:	2201      	movs	r2, #1
 800796c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800796e:	187b      	adds	r3, r7, r1
 8007970:	2200      	movs	r2, #0
 8007972:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007974:	187b      	adds	r3, r7, r1
 8007976:	2200      	movs	r2, #0
 8007978:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800797a:	187b      	adds	r3, r7, r1
 800797c:	2200      	movs	r2, #0
 800797e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007980:	187b      	adds	r3, r7, r1
 8007982:	2100      	movs	r1, #0
 8007984:	0018      	movs	r0, r3
 8007986:	f00c fde5 	bl	8014554 <HAL_RCC_ClockConfig>
 800798a:	1e03      	subs	r3, r0, #0
 800798c:	d001      	beq.n	8007992 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800798e:	f000 f8e7 	bl	8007b60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007992:	003b      	movs	r3, r7
 8007994:	226d      	movs	r2, #109	@ 0x6d
 8007996:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007998:	003b      	movs	r3, r7
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800799e:	003b      	movs	r3, r7
 80079a0:	2200      	movs	r2, #0
 80079a2:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80079a4:	003b      	movs	r3, r7
 80079a6:	2200      	movs	r2, #0
 80079a8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80079aa:	003b      	movs	r3, r7
 80079ac:	2280      	movs	r2, #128	@ 0x80
 80079ae:	0252      	lsls	r2, r2, #9
 80079b0:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80079b2:	003b      	movs	r3, r7
 80079b4:	2280      	movs	r2, #128	@ 0x80
 80079b6:	04d2      	lsls	r2, r2, #19
 80079b8:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80079ba:	003b      	movs	r3, r7
 80079bc:	0018      	movs	r0, r3
 80079be:	f00c ffed 	bl	801499c <HAL_RCCEx_PeriphCLKConfig>
 80079c2:	1e03      	subs	r3, r0, #0
 80079c4:	d001      	beq.n	80079ca <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80079c6:	f000 f8cb 	bl	8007b60 <Error_Handler>
  }
}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	46bd      	mov	sp, r7
 80079ce:	b01d      	add	sp, #116	@ 0x74
 80079d0:	bd90      	pop	{r4, r7, pc}
 80079d2:	46c0      	nop			@ (mov r8, r8)
 80079d4:	40007000 	.word	0x40007000
 80079d8:	ffffe7ff 	.word	0xffffe7ff
 80079dc:	40021000 	.word	0x40021000

080079e0 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	000a      	movs	r2, r1
 80079ea:	1cbb      	adds	r3, r7, #2
 80079ec:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 80079ee:	4c06      	ldr	r4, [pc, #24]	@ (8007a08 <printString+0x28>)
 80079f0:	1cbb      	adds	r3, r7, #2
 80079f2:	881a      	ldrh	r2, [r3, #0]
 80079f4:	6879      	ldr	r1, [r7, #4]
 80079f6:	4805      	ldr	r0, [pc, #20]	@ (8007a0c <printString+0x2c>)
 80079f8:	0023      	movs	r3, r4
 80079fa:	f00e faa5 	bl	8015f48 <HAL_UART_Transmit>
}
 80079fe:	46c0      	nop			@ (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b003      	add	sp, #12
 8007a04:	bd90      	pop	{r4, r7, pc}
 8007a06:	46c0      	nop			@ (mov r8, r8)
 8007a08:	0000ffff 	.word	0x0000ffff
 8007a0c:	200022e0 	.word	0x200022e0

08007a10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 8007a18:	4936      	ldr	r1, [pc, #216]	@ (8007af4 <HAL_UART_RxCpltCallback+0xe4>)
 8007a1a:	4b37      	ldr	r3, [pc, #220]	@ (8007af8 <HAL_UART_RxCpltCallback+0xe8>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f00e fb32 	bl	8016088 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 8007a24:	4b33      	ldr	r3, [pc, #204]	@ (8007af4 <HAL_UART_RxCpltCallback+0xe4>)
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	3b61      	subs	r3, #97	@ 0x61
 8007a2a:	2b13      	cmp	r3, #19
 8007a2c:	d830      	bhi.n	8007a90 <HAL_UART_RxCpltCallback+0x80>
 8007a2e:	009a      	lsls	r2, r3, #2
 8007a30:	4b32      	ldr	r3, [pc, #200]	@ (8007afc <HAL_UART_RxCpltCallback+0xec>)
 8007a32:	18d3      	adds	r3, r2, r3
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	469f      	mov	pc, r3
    case (uint8_t)'a':
      printf("VerboseLevel set to all\r\n");
 8007a38:	4b31      	ldr	r3, [pc, #196]	@ (8007b00 <HAL_UART_RxCpltCallback+0xf0>)
 8007a3a:	0018      	movs	r0, r3
 8007a3c:	f017 f962 	bl	801ed04 <puts>
      SetVerboseLevel(VERBOSE_ALL);
 8007a40:	2003      	movs	r0, #3
 8007a42:	f005 fd75 	bl	800d530 <SetVerboseLevel>
      break;
 8007a46:	e04a      	b.n	8007ade <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'f':
      forceNTPupdate();  // sync the time now
 8007a48:	f7fb fea8 	bl	800379c <forceNTPupdate>
    break;
 8007a4c:	e047      	b.n	8007ade <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'i':
      printf("VerboseLevel set to info\r\n");
 8007a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b04 <HAL_UART_RxCpltCallback+0xf4>)
 8007a50:	0018      	movs	r0, r3
 8007a52:	f017 f957 	bl	801ed04 <puts>
      SetVerboseLevel(VERBOSE_INFO);
 8007a56:	2002      	movs	r0, #2
 8007a58:	f005 fd6a 	bl	800d530 <SetVerboseLevel>
      break;
 8007a5c:	e03f      	b.n	8007ade <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'m':
      printf("VerboseLevel set to minimal\r\n");
 8007a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8007b08 <HAL_UART_RxCpltCallback+0xf8>)
 8007a60:	0018      	movs	r0, r3
 8007a62:	f017 f94f 	bl	801ed04 <puts>
      SetVerboseLevel(VERBOSE_MINIMAL);
 8007a66:	2001      	movs	r0, #1
 8007a68:	f005 fd62 	bl	800d530 <SetVerboseLevel>
      break;
 8007a6c:	e037      	b.n	8007ade <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'n':
      printf("VerboseLevel set to none\r\n");
 8007a6e:	4b27      	ldr	r3, [pc, #156]	@ (8007b0c <HAL_UART_RxCpltCallback+0xfc>)
 8007a70:	0018      	movs	r0, r3
 8007a72:	f017 f947 	bl	801ed04 <puts>
      SetVerboseLevel(VERBOSE_NONE);
 8007a76:	2000      	movs	r0, #0
 8007a78:	f005 fd5a 	bl	800d530 <SetVerboseLevel>
      break;
 8007a7c:	e02f      	b.n	8007ade <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'s':
      sen5xReadTimer = HAL_GetTick();  // on request fire up the sen5x
 8007a7e:	f006 f88b 	bl	800db98 <HAL_GetTick>
 8007a82:	0002      	movs	r2, r0
 8007a84:	4b22      	ldr	r3, [pc, #136]	@ (8007b10 <HAL_UART_RxCpltCallback+0x100>)
 8007a86:	601a      	str	r2, [r3, #0]
      break;
 8007a88:	e029      	b.n	8007ade <HAL_UART_RxCpltCallback+0xce>
    case (uint8_t)'t':
      showTime(); // show me the current time
 8007a8a:	f7fe fb69 	bl	8006160 <showTime>
      break;
 8007a8e:	e026      	b.n	8007ade <HAL_UART_RxCpltCallback+0xce>
    default:
      Error("Error unknown request from Serial UART1 (TTY)\r\n");
 8007a90:	4a20      	ldr	r2, [pc, #128]	@ (8007b14 <HAL_UART_RxCpltCallback+0x104>)
 8007a92:	4b21      	ldr	r3, [pc, #132]	@ (8007b18 <HAL_UART_RxCpltCallback+0x108>)
 8007a94:	0019      	movs	r1, r3
 8007a96:	2001      	movs	r0, #1
 8007a98:	f005 fce0 	bl	800d45c <CreateLine>
      printf("Possible commands:\r\n\r\n");
 8007a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8007b1c <HAL_UART_RxCpltCallback+0x10c>)
 8007a9e:	0018      	movs	r0, r3
 8007aa0:	f017 f930 	bl	801ed04 <puts>
      printf("a - VerboseLevel set to all\r\n");
 8007aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8007b20 <HAL_UART_RxCpltCallback+0x110>)
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	f017 f92c 	bl	801ed04 <puts>
      printf("f - Force NTP time synchronization\r\n");
 8007aac:	4b1d      	ldr	r3, [pc, #116]	@ (8007b24 <HAL_UART_RxCpltCallback+0x114>)
 8007aae:	0018      	movs	r0, r3
 8007ab0:	f017 f928 	bl	801ed04 <puts>
      printf("i - VerboseLevel set to info\r\n");
 8007ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8007b28 <HAL_UART_RxCpltCallback+0x118>)
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f017 f924 	bl	801ed04 <puts>
      printf("m - VerboseLevel set to minimal\r\n");
 8007abc:	4b1b      	ldr	r3, [pc, #108]	@ (8007b2c <HAL_UART_RxCpltCallback+0x11c>)
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f017 f920 	bl	801ed04 <puts>
      printf("n - VerboseLevel set to none\r\n");
 8007ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8007b30 <HAL_UART_RxCpltCallback+0x120>)
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f017 f91c 	bl	801ed04 <puts>
      printf("s - Start particle measurement\r\n");
 8007acc:	4b19      	ldr	r3, [pc, #100]	@ (8007b34 <HAL_UART_RxCpltCallback+0x124>)
 8007ace:	0018      	movs	r0, r3
 8007ad0:	f017 f918 	bl	801ed04 <puts>
      printf("t - Show actual systemtime\r\n");
 8007ad4:	4b18      	ldr	r3, [pc, #96]	@ (8007b38 <HAL_UART_RxCpltCallback+0x128>)
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f017 f914 	bl	801ed04 <puts>
  break;
 8007adc:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007ade:	4905      	ldr	r1, [pc, #20]	@ (8007af4 <HAL_UART_RxCpltCallback+0xe4>)
 8007ae0:	4b05      	ldr	r3, [pc, #20]	@ (8007af8 <HAL_UART_RxCpltCallback+0xe8>)
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f00e facf 	bl	8016088 <HAL_UART_Receive_IT>
}
 8007aea:	46c0      	nop			@ (mov r8, r8)
 8007aec:	46bd      	mov	sp, r7
 8007aee:	b002      	add	sp, #8
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	46c0      	nop			@ (mov r8, r8)
 8007af4:	20000f0c 	.word	0x20000f0c
 8007af8:	200022e0 	.word	0x200022e0
 8007afc:	08023b0c 	.word	0x08023b0c
 8007b00:	08022aa4 	.word	0x08022aa4
 8007b04:	08022ac0 	.word	0x08022ac0
 8007b08:	08022adc 	.word	0x08022adc
 8007b0c:	08022afc 	.word	0x08022afc
 8007b10:	200011e4 	.word	0x200011e4
 8007b14:	08022b18 	.word	0x08022b18
 8007b18:	08022b48 	.word	0x08022b48
 8007b1c:	08022b4c 	.word	0x08022b4c
 8007b20:	08022b64 	.word	0x08022b64
 8007b24:	08022b84 	.word	0x08022b84
 8007b28:	08022ba8 	.word	0x08022ba8
 8007b2c:	08022bc8 	.word	0x08022bc8
 8007b30:	08022bec 	.word	0x08022bec
 8007b34:	08022c0c 	.word	0x08022c0c
 8007b38:	08022c2c 	.word	0x08022c2c

08007b3c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	0002      	movs	r2, r0
 8007b44:	1dbb      	adds	r3, r7, #6
 8007b46:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if (GPIO_Pin == BOOT0_Pin) {
 8007b48:	1dbb      	adds	r3, r7, #6
 8007b4a:	881a      	ldrh	r2, [r3, #0]
 8007b4c:	2380      	movs	r3, #128	@ 0x80
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d101      	bne.n	8007b58 <HAL_GPIO_EXTI_Callback+0x1c>
    setuserToggle();
 8007b54:	f004 ff26 	bl	800c9a4 <setuserToggle>
  }
}
 8007b58:	46c0      	nop			@ (mov r8, r8)
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b002      	add	sp, #8
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8007b64:	4a04      	ldr	r2, [pc, #16]	@ (8007b78 <Error_Handler+0x18>)
 8007b66:	4b05      	ldr	r3, [pc, #20]	@ (8007b7c <Error_Handler+0x1c>)
 8007b68:	0019      	movs	r1, r3
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	f005 fc76 	bl	800d45c <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007b70:	b672      	cpsid	i
}
 8007b72:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8007b74:	46c0      	nop			@ (mov r8, r8)
 8007b76:	e7fd      	b.n	8007b74 <Error_Handler+0x14>
 8007b78:	08022c48 	.word	0x08022c48
 8007b7c:	08022b48 	.word	0x08022b48

08007b80 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007b84:	f7ff fabd 	bl	8007102 <HT_StartMeasurement>
}
 8007b88:	46c0      	nop			@ (mov r8, r8)
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007b94:	4a04      	ldr	r2, [pc, #16]	@ (8007ba8 <HT_IsMeasurementDoneWrapper+0x18>)
 8007b96:	4b05      	ldr	r3, [pc, #20]	@ (8007bac <HT_IsMeasurementDoneWrapper+0x1c>)
 8007b98:	0011      	movs	r1, r2
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	f7ff fab8 	bl	8007110 <HT_GetMeasurementValues>
 8007ba0:	0003      	movs	r3, r0
}
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	20000f20 	.word	0x20000f20
 8007bac:	20000f1c 	.word	0x20000f1c

08007bb0 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007bb4:	f7ff f8fb 	bl	8006dae <Gas_StartMeasurement>
}
 8007bb8:	46c0      	nop			@ (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8007bc4:	4b03      	ldr	r3, [pc, #12]	@ (8007bd4 <VOC_IsMeasurementDoneWrapper+0x14>)
 8007bc6:	0018      	movs	r0, r3
 8007bc8:	f7ff f8f8 	bl	8006dbc <Gas_GetMeasurementValues>
 8007bcc:	0003      	movs	r3, r0
}
 8007bce:	0018      	movs	r0, r3
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	20000f24 	.word	0x20000f24

08007bd8 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
}
 8007bdc:	46c0      	nop			@ (mov r8, r8)
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8007be2:	b580      	push	{r7, lr}
 8007be4:	af00      	add	r7, sp, #0
  return true;
 8007be6:	2301      	movs	r3, #1
}
 8007be8:	0018      	movs	r0, r3
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <MIC_IsTestMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
  return MIC_MeasurementDone();
}

bool MIC_IsTestMeasurementDoneWrapper(void) {
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8007bf2:	f000 fd21 	bl	8008638 <MIC_TestMeasurementDone>
 8007bf6:	0003      	movs	r3, r0
}
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <setMeasStamp>:
void setMeasStamp(uint32_t nrTicks) {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  MeasStamp = HAL_GetTick() + nrTicks;
 8007c08:	f005 ffc6 	bl	800db98 <HAL_GetTick>
 8007c0c:	0002      	movs	r2, r0
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	18d2      	adds	r2, r2, r3
 8007c12:	4b03      	ldr	r3, [pc, #12]	@ (8007c20 <setMeasStamp+0x20>)
 8007c14:	601a      	str	r2, [r3, #0]
}
 8007c16:	46c0      	nop			@ (mov r8, r8)
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	b002      	add	sp, #8
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	46c0      	nop			@ (mov r8, r8)
 8007c20:	20000f68 	.word	0x20000f68

08007c24 <testInit>:

void testInit(){
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8007c28:	4b07      	ldr	r3, [pc, #28]	@ (8007c48 <testInit+0x24>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8007c2e:	4b06      	ldr	r3, [pc, #24]	@ (8007c48 <testInit+0x24>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8007c34:	4b04      	ldr	r3, [pc, #16]	@ (8007c48 <testInit+0x24>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8007c3a:	4b03      	ldr	r3, [pc, #12]	@ (8007c48 <testInit+0x24>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	705a      	strb	r2, [r3, #1]
}
 8007c40:	46c0      	nop			@ (mov r8, r8)
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	46c0      	nop			@ (mov r8, r8)
 8007c48:	20000f60 	.word	0x20000f60

08007c4c <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8007c4c:	b5b0      	push	{r4, r5, r7, lr}
 8007c4e:	b092      	sub	sp, #72	@ 0x48
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 8007c58:	f7ff ffe4 	bl	8007c24 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8007c5c:	4b6e      	ldr	r3, [pc, #440]	@ (8007e18 <Meas_Init+0x1cc>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d103      	bne.n	8007c6c <Meas_Init+0x20>
 8007c64:	4b6c      	ldr	r3, [pc, #432]	@ (8007e18 <Meas_Init+0x1cc>)
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d068      	beq.n	8007d3e <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f7fd fefc 	bl	8005a6c <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8007c74:	f7ff fa5c 	bl	8007130 <HT_DeviceConnected>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	001a      	movs	r2, r3
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4053      	eors	r3, r2
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00c      	beq.n	8007ca0 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 8007c86:	4a65      	ldr	r2, [pc, #404]	@ (8007e1c <Meas_Init+0x1d0>)
 8007c88:	4b65      	ldr	r3, [pc, #404]	@ (8007e20 <Meas_Init+0x1d4>)
 8007c8a:	0019      	movs	r1, r3
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	f005 fbe5 	bl	800d45c <CreateLine>
       MeasTest.HT_Tested = false;
 8007c92:	4b64      	ldr	r3, [pc, #400]	@ (8007e24 <Meas_Init+0x1d8>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8007c98:	4b5f      	ldr	r3, [pc, #380]	@ (8007e18 <Meas_Init+0x1cc>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	701a      	strb	r2, [r3, #0]
 8007c9e:	e008      	b.n	8007cb2 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8007ca0:	4b60      	ldr	r3, [pc, #384]	@ (8007e24 <Meas_Init+0x1d8>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8007ca6:	4a60      	ldr	r2, [pc, #384]	@ (8007e28 <Meas_Init+0x1dc>)
 8007ca8:	4b60      	ldr	r3, [pc, #384]	@ (8007e2c <Meas_Init+0x1e0>)
 8007caa:	0019      	movs	r1, r3
 8007cac:	2003      	movs	r0, #3
 8007cae:	f005 fbd5 	bl	800d45c <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8007cb2:	f7ff f890 	bl	8006dd6 <Gas_DeviceConnected>
 8007cb6:	0003      	movs	r3, r0
 8007cb8:	001a      	movs	r2, r3
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4053      	eors	r3, r2
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00c      	beq.n	8007cde <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8007cc4:	4b57      	ldr	r3, [pc, #348]	@ (8007e24 <Meas_Init+0x1d8>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8007cca:	4a59      	ldr	r2, [pc, #356]	@ (8007e30 <Meas_Init+0x1e4>)
 8007ccc:	4b54      	ldr	r3, [pc, #336]	@ (8007e20 <Meas_Init+0x1d4>)
 8007cce:	0019      	movs	r1, r3
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	f005 fbc3 	bl	800d45c <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8007cd6:	4b50      	ldr	r3, [pc, #320]	@ (8007e18 <Meas_Init+0x1cc>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	705a      	strb	r2, [r3, #1]
 8007cdc:	e008      	b.n	8007cf0 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 8007cde:	4b51      	ldr	r3, [pc, #324]	@ (8007e24 <Meas_Init+0x1d8>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8007ce4:	4a53      	ldr	r2, [pc, #332]	@ (8007e34 <Meas_Init+0x1e8>)
 8007ce6:	4b51      	ldr	r3, [pc, #324]	@ (8007e2c <Meas_Init+0x1e0>)
 8007ce8:	0019      	movs	r1, r3
 8007cea:	2003      	movs	r0, #3
 8007cec:	f005 fbb6 	bl	800d45c <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8007cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8007e24 <Meas_Init+0x1d8>)
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <Meas_Init+0xc0>
 8007cf8:	4b4a      	ldr	r3, [pc, #296]	@ (8007e24 <Meas_Init+0x1d8>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 8007d00:	2200      	movs	r2, #0
 8007d02:	2101      	movs	r1, #1
 8007d04:	2000      	movs	r0, #0
 8007d06:	f004 fc19 	bl	800c53c <SetDBLED>
 8007d0a:	e018      	b.n	8007d3e <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	2001      	movs	r0, #1
 8007d12:	f004 fc13 	bl	800c53c <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8007d16:	4b48      	ldr	r3, [pc, #288]	@ (8007e38 <Meas_Init+0x1ec>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	0018      	movs	r0, r3
 8007d1e:	f007 f9b6 	bl	800f08e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8007d22:	2380      	movs	r3, #128	@ 0x80
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	4844      	ldr	r0, [pc, #272]	@ (8007e38 <Meas_Init+0x1ec>)
 8007d28:	2201      	movs	r2, #1
 8007d2a:	0019      	movs	r1, r3
 8007d2c:	f007 f9af 	bl	800f08e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8007d30:	2380      	movs	r3, #128	@ 0x80
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	4840      	ldr	r0, [pc, #256]	@ (8007e38 <Meas_Init+0x1ec>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	0019      	movs	r1, r3
 8007d3a:	f007 f9a8 	bl	800f08e <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8007d3e:	4b36      	ldr	r3, [pc, #216]	@ (8007e18 <Meas_Init+0x1cc>)
 8007d40:	78db      	ldrb	r3, [r3, #3]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d008      	beq.n	8007d58 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 8007d46:	4a3d      	ldr	r2, [pc, #244]	@ (8007e3c <Meas_Init+0x1f0>)
 8007d48:	4b3d      	ldr	r3, [pc, #244]	@ (8007e40 <Meas_Init+0x1f4>)
 8007d4a:	0019      	movs	r1, r3
 8007d4c:	2002      	movs	r0, #2
 8007d4e:	f005 fb85 	bl	800d45c <CreateLine>
          enableMicrophone(true);
 8007d52:	2001      	movs	r0, #1
 8007d54:	f003 fd46 	bl	800b7e4 <enableMicrophone>

  }
  uint8_t offset = 0;
 8007d58:	2547      	movs	r5, #71	@ 0x47
 8007d5a:	197b      	adds	r3, r7, r5
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8007d60:	197b      	adds	r3, r7, r5
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	197a      	adds	r2, r7, r5
 8007d66:	1c59      	adds	r1, r3, #1
 8007d68:	7011      	strb	r1, [r2, #0]
 8007d6a:	4a2b      	ldr	r2, [pc, #172]	@ (8007e18 <Meas_Init+0x1cc>)
 8007d6c:	7814      	ldrb	r4, [r2, #0]
 8007d6e:	4a35      	ldr	r2, [pc, #212]	@ (8007e44 <Meas_Init+0x1f8>)
 8007d70:	0119      	lsls	r1, r3, #4
 8007d72:	4835      	ldr	r0, [pc, #212]	@ (8007e48 <Meas_Init+0x1fc>)
 8007d74:	5088      	str	r0, [r1, r2]
 8007d76:	4933      	ldr	r1, [pc, #204]	@ (8007e44 <Meas_Init+0x1f8>)
 8007d78:	011a      	lsls	r2, r3, #4
 8007d7a:	188a      	adds	r2, r1, r2
 8007d7c:	3204      	adds	r2, #4
 8007d7e:	4933      	ldr	r1, [pc, #204]	@ (8007e4c <Meas_Init+0x200>)
 8007d80:	6011      	str	r1, [r2, #0]
 8007d82:	4930      	ldr	r1, [pc, #192]	@ (8007e44 <Meas_Init+0x1f8>)
 8007d84:	011a      	lsls	r2, r3, #4
 8007d86:	188a      	adds	r2, r1, r2
 8007d88:	3208      	adds	r2, #8
 8007d8a:	4931      	ldr	r1, [pc, #196]	@ (8007e50 <Meas_Init+0x204>)
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8007e44 <Meas_Init+0x1f8>)
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	18d3      	adds	r3, r2, r3
 8007d94:	330c      	adds	r3, #12
 8007d96:	1c22      	adds	r2, r4, #0
 8007d98:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8007d9a:	197b      	adds	r3, r7, r5
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	197a      	adds	r2, r7, r5
 8007da0:	1c59      	adds	r1, r3, #1
 8007da2:	7011      	strb	r1, [r2, #0]
 8007da4:	4a1c      	ldr	r2, [pc, #112]	@ (8007e18 <Meas_Init+0x1cc>)
 8007da6:	7854      	ldrb	r4, [r2, #1]
 8007da8:	4a26      	ldr	r2, [pc, #152]	@ (8007e44 <Meas_Init+0x1f8>)
 8007daa:	0119      	lsls	r1, r3, #4
 8007dac:	4829      	ldr	r0, [pc, #164]	@ (8007e54 <Meas_Init+0x208>)
 8007dae:	5088      	str	r0, [r1, r2]
 8007db0:	4924      	ldr	r1, [pc, #144]	@ (8007e44 <Meas_Init+0x1f8>)
 8007db2:	011a      	lsls	r2, r3, #4
 8007db4:	188a      	adds	r2, r1, r2
 8007db6:	3204      	adds	r2, #4
 8007db8:	4927      	ldr	r1, [pc, #156]	@ (8007e58 <Meas_Init+0x20c>)
 8007dba:	6011      	str	r1, [r2, #0]
 8007dbc:	4921      	ldr	r1, [pc, #132]	@ (8007e44 <Meas_Init+0x1f8>)
 8007dbe:	011a      	lsls	r2, r3, #4
 8007dc0:	188a      	adds	r2, r1, r2
 8007dc2:	3208      	adds	r2, #8
 8007dc4:	4925      	ldr	r1, [pc, #148]	@ (8007e5c <Meas_Init+0x210>)
 8007dc6:	6011      	str	r1, [r2, #0]
 8007dc8:	4a1e      	ldr	r2, [pc, #120]	@ (8007e44 <Meas_Init+0x1f8>)
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	18d3      	adds	r3, r2, r3
 8007dce:	330c      	adds	r3, #12
 8007dd0:	1c22      	adds	r2, r4, #0
 8007dd2:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8007dd4:	197b      	adds	r3, r7, r5
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	197a      	adds	r2, r7, r5
 8007dda:	1c59      	adds	r1, r3, #1
 8007ddc:	7011      	strb	r1, [r2, #0]
 8007dde:	4a0e      	ldr	r2, [pc, #56]	@ (8007e18 <Meas_Init+0x1cc>)
 8007de0:	7894      	ldrb	r4, [r2, #2]
 8007de2:	4a18      	ldr	r2, [pc, #96]	@ (8007e44 <Meas_Init+0x1f8>)
 8007de4:	0119      	lsls	r1, r3, #4
 8007de6:	481e      	ldr	r0, [pc, #120]	@ (8007e60 <Meas_Init+0x214>)
 8007de8:	5088      	str	r0, [r1, r2]
 8007dea:	4916      	ldr	r1, [pc, #88]	@ (8007e44 <Meas_Init+0x1f8>)
 8007dec:	011a      	lsls	r2, r3, #4
 8007dee:	188a      	adds	r2, r1, r2
 8007df0:	3204      	adds	r2, #4
 8007df2:	491c      	ldr	r1, [pc, #112]	@ (8007e64 <Meas_Init+0x218>)
 8007df4:	6011      	str	r1, [r2, #0]
 8007df6:	4913      	ldr	r1, [pc, #76]	@ (8007e44 <Meas_Init+0x1f8>)
 8007df8:	011a      	lsls	r2, r3, #4
 8007dfa:	188a      	adds	r2, r1, r2
 8007dfc:	3208      	adds	r2, #8
 8007dfe:	491a      	ldr	r1, [pc, #104]	@ (8007e68 <Meas_Init+0x21c>)
 8007e00:	6011      	str	r1, [r2, #0]
 8007e02:	4a10      	ldr	r2, [pc, #64]	@ (8007e44 <Meas_Init+0x1f8>)
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	18d3      	adds	r3, r2, r3
 8007e08:	330c      	adds	r3, #12
 8007e0a:	1c22      	adds	r2, r4, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b012      	add	sp, #72	@ 0x48
 8007e14:	bdb0      	pop	{r4, r5, r7, pc}
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	20000f5c 	.word	0x20000f5c
 8007e1c:	08022c74 	.word	0x08022c74
 8007e20:	08022ca4 	.word	0x08022ca4
 8007e24:	20000f60 	.word	0x20000f60
 8007e28:	08022ca8 	.word	0x08022ca8
 8007e2c:	08022cd4 	.word	0x08022cd4
 8007e30:	08022cd8 	.word	0x08022cd8
 8007e34:	08022cf4 	.word	0x08022cf4
 8007e38:	50000400 	.word	0x50000400
 8007e3c:	08022d0c 	.word	0x08022d0c
 8007e40:	08022d30 	.word	0x08022d30
 8007e44:	20000f2c 	.word	0x20000f2c
 8007e48:	08007b81 	.word	0x08007b81
 8007e4c:	08007b91 	.word	0x08007b91
 8007e50:	20000f28 	.word	0x20000f28
 8007e54:	08007bb1 	.word	0x08007bb1
 8007e58:	08007bc1 	.word	0x08007bc1
 8007e5c:	20000f29 	.word	0x20000f29
 8007e60:	08007bd9 	.word	0x08007bd9
 8007e64:	08007be3 	.word	0x08007be3
 8007e68:	20000f2a 	.word	0x20000f2a

08007e6c <StartMeasurements>:

void StartMeasurements(void) {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007e70:	4b10      	ldr	r3, [pc, #64]	@ (8007eb4 <StartMeasurements+0x48>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e015      	b.n	8007ea4 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007e78:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb4 <StartMeasurements+0x48>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	4a0e      	ldr	r2, [pc, #56]	@ (8007eb8 <StartMeasurements+0x4c>)
 8007e7e:	011b      	lsls	r3, r3, #4
 8007e80:	18d3      	adds	r3, r2, r3
 8007e82:	330c      	adds	r3, #12
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d006      	beq.n	8007e98 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb4 <StartMeasurements+0x48>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	001a      	movs	r2, r3
 8007e90:	4b09      	ldr	r3, [pc, #36]	@ (8007eb8 <StartMeasurements+0x4c>)
 8007e92:	0112      	lsls	r2, r2, #4
 8007e94:	58d3      	ldr	r3, [r2, r3]
 8007e96:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007e98:	4b06      	ldr	r3, [pc, #24]	@ (8007eb4 <StartMeasurements+0x48>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	4b04      	ldr	r3, [pc, #16]	@ (8007eb4 <StartMeasurements+0x48>)
 8007ea2:	701a      	strb	r2, [r3, #0]
 8007ea4:	4b03      	ldr	r3, [pc, #12]	@ (8007eb4 <StartMeasurements+0x48>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b02      	cmp	r3, #2
 8007eaa:	d9e5      	bls.n	8007e78 <StartMeasurements+0xc>
    }
  }
}
 8007eac:	46c0      	nop			@ (mov r8, r8)
 8007eae:	46c0      	nop			@ (mov r8, r8)
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000f64 	.word	0x20000f64
 8007eb8:	20000f2c 	.word	0x20000f2c

08007ebc <Meas_Test>:

void Meas_Test(){
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007ec0:	4b23      	ldr	r3, [pc, #140]	@ (8007f50 <Meas_Test+0x94>)
 8007ec2:	78db      	ldrb	r3, [r3, #3]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	4053      	eors	r3, r2
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <Meas_Test+0x16>
    ESP_WakeTest();
 8007ece:	f7fd f895 	bl	8004ffc <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8007ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8007f50 <Meas_Test+0x94>)
 8007ed4:	789b      	ldrb	r3, [r3, #2]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4053      	eors	r3, r2
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01b      	beq.n	8007f18 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007ee0:	f7ff fe85 	bl	8007bee <MIC_IsTestMeasurementDoneWrapper>
 8007ee4:	1e03      	subs	r3, r0, #0
 8007ee6:	d00b      	beq.n	8007f00 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8007ee8:	4b19      	ldr	r3, [pc, #100]	@ (8007f50 <Meas_Test+0x94>)
 8007eea:	2201      	movs	r2, #1
 8007eec:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 8007eee:	23fa      	movs	r3, #250	@ 0xfa
 8007ef0:	011a      	lsls	r2, r3, #4
 8007ef2:	4918      	ldr	r1, [pc, #96]	@ (8007f54 <Meas_Test+0x98>)
 8007ef4:	23fa      	movs	r3, #250	@ 0xfa
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f004 faeb 	bl	800c4d4 <SetStatusLED>
 8007efe:	e00b      	b.n	8007f18 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 8007f00:	f003 fc4c 	bl	800b79c <micSettlingComplete>
 8007f04:	1e03      	subs	r3, r0, #0
 8007f06:	d007      	beq.n	8007f18 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 8007f08:	23fa      	movs	r3, #250	@ 0xfa
 8007f0a:	011a      	lsls	r2, r3, #4
 8007f0c:	23fa      	movs	r3, #250	@ 0xfa
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	4810      	ldr	r0, [pc, #64]	@ (8007f54 <Meas_Test+0x98>)
 8007f12:	0019      	movs	r1, r3
 8007f14:	f004 fade 	bl	800c4d4 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 8007f18:	4b0d      	ldr	r3, [pc, #52]	@ (8007f50 <Meas_Test+0x94>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d013      	beq.n	8007f48 <Meas_Test+0x8c>
 8007f20:	4b0b      	ldr	r3, [pc, #44]	@ (8007f50 <Meas_Test+0x94>)
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00f      	beq.n	8007f48 <Meas_Test+0x8c>
 8007f28:	4b09      	ldr	r3, [pc, #36]	@ (8007f50 <Meas_Test+0x94>)
 8007f2a:	78db      	ldrb	r3, [r3, #3]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <Meas_Test+0x8c>
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <Meas_Test+0x94>)
 8007f32:	789b      	ldrb	r3, [r3, #2]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <Meas_Test+0x8c>
    Info("Test completed");
 8007f38:	4a07      	ldr	r2, [pc, #28]	@ (8007f58 <Meas_Test+0x9c>)
 8007f3a:	4b08      	ldr	r3, [pc, #32]	@ (8007f5c <Meas_Test+0xa0>)
 8007f3c:	0019      	movs	r1, r3
 8007f3e:	2002      	movs	r0, #2
 8007f40:	f005 fa8c 	bl	800d45c <CreateLine>
    SetTestDone();
 8007f44:	f7ff faf2 	bl	800752c <SetTestDone>
  }
}
 8007f48:	46c0      	nop			@ (mov r8, r8)
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	46c0      	nop			@ (mov r8, r8)
 8007f50:	20000f60 	.word	0x20000f60
 8007f54:	00000bb8 	.word	0x00000bb8
 8007f58:	08022d34 	.word	0x08022d34
 8007f5c:	08022d30 	.word	0x08022d30

08007f60 <ResetMeasurements>:
void ResetMeasurements(void) {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8007f64:	4b0a      	ldr	r3, [pc, #40]	@ (8007f90 <ResetMeasurements+0x30>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8007f6a:	4b09      	ldr	r3, [pc, #36]	@ (8007f90 <ResetMeasurements+0x30>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8007f70:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <ResetMeasurements+0x30>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8007f76:	4b06      	ldr	r3, [pc, #24]	@ (8007f90 <ResetMeasurements+0x30>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8007f7c:	4b04      	ldr	r3, [pc, #16]	@ (8007f90 <ResetMeasurements+0x30>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8007f82:	4b03      	ldr	r3, [pc, #12]	@ (8007f90 <ResetMeasurements+0x30>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	739a      	strb	r2, [r3, #14]
//  MeasurementCtx.MIC_measurementDone = false;
}
 8007f88:	46c0      	nop			@ (mov r8, r8)
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	46c0      	nop			@ (mov r8, r8)
 8007f90:	20000f1c 	.word	0x20000f1c

08007f94 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007f98:	4b18      	ldr	r3, [pc, #96]	@ (8007ffc <MeasurementsCompleted+0x68>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e024      	b.n	8007fea <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007fa0:	4b16      	ldr	r3, [pc, #88]	@ (8007ffc <MeasurementsCompleted+0x68>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <MeasurementsCompleted+0x6c>)
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	18d3      	adds	r3, r2, r3
 8007faa:	330c      	adds	r3, #12
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d015      	beq.n	8007fde <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8007fb2:	4b12      	ldr	r3, [pc, #72]	@ (8007ffc <MeasurementsCompleted+0x68>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	4a12      	ldr	r2, [pc, #72]	@ (8008000 <MeasurementsCompleted+0x6c>)
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	18d3      	adds	r3, r2, r3
 8007fbc:	3304      	adds	r3, #4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4798      	blx	r3
 8007fc2:	1e03      	subs	r3, r0, #0
 8007fc4:	d009      	beq.n	8007fda <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <MeasurementsCompleted+0x68>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	4a0d      	ldr	r2, [pc, #52]	@ (8008000 <MeasurementsCompleted+0x6c>)
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	18d3      	adds	r3, r2, r3
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
 8007fd8:	e001      	b.n	8007fde <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e00a      	b.n	8007ff4 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007fde:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <MeasurementsCompleted+0x68>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	4b05      	ldr	r3, [pc, #20]	@ (8007ffc <MeasurementsCompleted+0x68>)
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	4b04      	ldr	r3, [pc, #16]	@ (8007ffc <MeasurementsCompleted+0x68>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d9d6      	bls.n	8007fa0 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8007ff2:	2301      	movs	r3, #1
}
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	46c0      	nop			@ (mov r8, r8)
 8007ffc:	20000f64 	.word	0x20000f64
 8008000:	20000f2c 	.word	0x20000f2c

08008004 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 8008004:	b590      	push	{r4, r7, lr}
 8008006:	b085      	sub	sp, #20
 8008008:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 800800a:	4b7c      	ldr	r3, [pc, #496]	@ (80081fc <Mic_Upkeep+0x1f8>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	2b03      	cmp	r3, #3
 8008010:	d100      	bne.n	8008014 <Mic_Upkeep+0x10>
 8008012:	e0c0      	b.n	8008196 <Mic_Upkeep+0x192>
 8008014:	dd00      	ble.n	8008018 <Mic_Upkeep+0x14>
 8008016:	e0db      	b.n	80081d0 <Mic_Upkeep+0x1cc>
 8008018:	2b02      	cmp	r3, #2
 800801a:	d037      	beq.n	800808c <Mic_Upkeep+0x88>
 800801c:	dd00      	ble.n	8008020 <Mic_Upkeep+0x1c>
 800801e:	e0d7      	b.n	80081d0 <Mic_Upkeep+0x1cc>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <Mic_Upkeep+0x26>
 8008024:	2b01      	cmp	r3, #1
 8008026:	d014      	beq.n	8008052 <Mic_Upkeep+0x4e>
 8008028:	e0d2      	b.n	80081d0 <Mic_Upkeep+0x1cc>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 800802a:	2001      	movs	r0, #1
 800802c:	f003 fbda 	bl	800b7e4 <enableMicrophone>
 8008030:	0003      	movs	r3, r0
 8008032:	001a      	movs	r2, r3
 8008034:	2301      	movs	r3, #1
 8008036:	4053      	eors	r3, r2
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d005      	beq.n	800804a <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 800803e:	4a70      	ldr	r2, [pc, #448]	@ (8008200 <Mic_Upkeep+0x1fc>)
 8008040:	4b70      	ldr	r3, [pc, #448]	@ (8008204 <Mic_Upkeep+0x200>)
 8008042:	21ca      	movs	r1, #202	@ 0xca
 8008044:	0018      	movs	r0, r3
 8008046:	f005 fabf 	bl	800d5c8 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 800804a:	4b6c      	ldr	r3, [pc, #432]	@ (80081fc <Mic_Upkeep+0x1f8>)
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]
    break;
 8008050:	e0cd      	b.n	80081ee <Mic_Upkeep+0x1ea>

  case MIC_STATE_START_MEASUREMENT:
    if (micSettlingComplete() || DataReady) {
 8008052:	f003 fba3 	bl	800b79c <micSettlingComplete>
 8008056:	1e03      	subs	r3, r0, #0
 8008058:	d105      	bne.n	8008066 <Mic_Upkeep+0x62>
 800805a:	4b6b      	ldr	r3, [pc, #428]	@ (8008208 <Mic_Upkeep+0x204>)
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b00      	cmp	r3, #0
 8008062:	d100      	bne.n	8008066 <Mic_Upkeep+0x62>
 8008064:	e0be      	b.n	80081e4 <Mic_Upkeep+0x1e0>
      if (!startSPLcalculation())
 8008066:	f003 fc27 	bl	800b8b8 <startSPLcalculation>
 800806a:	0003      	movs	r3, r0
 800806c:	001a      	movs	r2, r3
 800806e:	2301      	movs	r3, #1
 8008070:	4053      	eors	r3, r2
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <Mic_Upkeep+0x80>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 8008078:	4a61      	ldr	r2, [pc, #388]	@ (8008200 <Mic_Upkeep+0x1fc>)
 800807a:	4b62      	ldr	r3, [pc, #392]	@ (8008204 <Mic_Upkeep+0x200>)
 800807c:	21d3      	movs	r1, #211	@ 0xd3
 800807e:	0018      	movs	r0, r3
 8008080:	f005 faa2 	bl	800d5c8 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8008084:	4b5d      	ldr	r3, [pc, #372]	@ (80081fc <Mic_Upkeep+0x1f8>)
 8008086:	2202      	movs	r2, #2
 8008088:	701a      	strb	r2, [r3, #0]
    }
    break;
 800808a:	e0ab      	b.n	80081e4 <Mic_Upkeep+0x1e0>

  case MIC_STATE_WAIT_FOR_COMPLETION:
    if (getSoundData(&soundData, true, true)) {
 800808c:	4b5f      	ldr	r3, [pc, #380]	@ (800820c <Mic_Upkeep+0x208>)
 800808e:	2201      	movs	r2, #1
 8008090:	2101      	movs	r1, #1
 8008092:	0018      	movs	r0, r3
 8008094:	f003 fa64 	bl	800b560 <getSoundData>
 8008098:	1e03      	subs	r3, r0, #0
 800809a:	d100      	bne.n	800809e <Mic_Upkeep+0x9a>
 800809c:	e0a4      	b.n	80081e8 <Mic_Upkeep+0x1e4>
      clearMaximumAmplitude();
 800809e:	f003 fb5d 	bl	800b75c <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80080a2:	4b5a      	ldr	r3, [pc, #360]	@ (800820c <Mic_Upkeep+0x208>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 80080a8:	4b58      	ldr	r3, [pc, #352]	@ (800820c <Mic_Upkeep+0x208>)
 80080aa:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80080ac:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 80080ae:	4b57      	ldr	r3, [pc, #348]	@ (800820c <Mic_Upkeep+0x208>)
 80080b0:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80080b2:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 80080b4:	4b55      	ldr	r3, [pc, #340]	@ (800820c <Mic_Upkeep+0x208>)
 80080b6:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 80080b8:	4855      	ldr	r0, [pc, #340]	@ (8008210 <Mic_Upkeep+0x20c>)
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	0023      	movs	r3, r4
 80080be:	f000 faeb 	bl	8008698 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 80080c2:	4b52      	ldr	r3, [pc, #328]	@ (800820c <Mic_Upkeep+0x208>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	001a      	movs	r2, r3
 80080c8:	4b50      	ldr	r3, [pc, #320]	@ (800820c <Mic_Upkeep+0x208>)
 80080ca:	785b      	ldrb	r3, [r3, #1]
 80080cc:	4951      	ldr	r1, [pc, #324]	@ (8008214 <Mic_Upkeep+0x210>)
 80080ce:	0038      	movs	r0, r7
 80080d0:	f016 fe22 	bl	801ed18 <siprintf>

      dBValue = atof(dBbuffer);
 80080d4:	003b      	movs	r3, r7
 80080d6:	0018      	movs	r0, r3
 80080d8:	f015 f9ce 	bl	801d478 <atof>
 80080dc:	0002      	movs	r2, r0
 80080de:	000b      	movs	r3, r1
 80080e0:	0010      	movs	r0, r2
 80080e2:	0019      	movs	r1, r3
 80080e4:	f7fb fa06 	bl	80034f4 <__aeabi_d2f>
 80080e8:	1c02      	adds	r2, r0, #0
 80080ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008218 <Mic_Upkeep+0x214>)
 80080ec:	601a      	str	r2, [r3, #0]
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 80080ee:	4b4a      	ldr	r3, [pc, #296]	@ (8008218 <Mic_Upkeep+0x214>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	494a      	ldr	r1, [pc, #296]	@ (800821c <Mic_Upkeep+0x218>)
 80080f4:	1c18      	adds	r0, r3, #0
 80080f6:	f7f8 ff53 	bl	8000fa0 <__aeabi_fmul>
 80080fa:	1c03      	adds	r3, r0, #0
 80080fc:	1c18      	adds	r0, r3, #0
 80080fe:	f7fb f9b1 	bl	8003464 <__aeabi_f2d>
 8008102:	2200      	movs	r2, #0
 8008104:	4b46      	ldr	r3, [pc, #280]	@ (8008220 <Mic_Upkeep+0x21c>)
 8008106:	f7f9 faf1 	bl	80016ec <__aeabi_dadd>
 800810a:	0002      	movs	r2, r0
 800810c:	000b      	movs	r3, r1
 800810e:	0010      	movs	r0, r2
 8008110:	0019      	movs	r1, r3
 8008112:	f7fb f919 	bl	8003348 <__aeabi_d2iz>
 8008116:	0003      	movs	r3, r0
 8008118:	0018      	movs	r0, r3
 800811a:	f7fb f951 	bl	80033c0 <__aeabi_i2d>
 800811e:	2200      	movs	r2, #0
 8008120:	4b40      	ldr	r3, [pc, #256]	@ (8008224 <Mic_Upkeep+0x220>)
 8008122:	f7f9 fe47 	bl	8001db4 <__aeabi_ddiv>
 8008126:	0002      	movs	r2, r0
 8008128:	000b      	movs	r3, r1
 800812a:	0010      	movs	r0, r2
 800812c:	0019      	movs	r1, r3
 800812e:	f7fb f9e1 	bl	80034f4 <__aeabi_d2f>
 8008132:	1c02      	adds	r2, r0, #0
 8008134:	4b38      	ldr	r3, [pc, #224]	@ (8008218 <Mic_Upkeep+0x214>)
 8008136:	601a      	str	r2, [r3, #0]
      MIC_Print();
 8008138:	f000 f95c 	bl	80083f4 <MIC_Print>
      if (!startSPLcalculation()) {
 800813c:	f003 fbbc 	bl	800b8b8 <startSPLcalculation>
 8008140:	0003      	movs	r3, r0
 8008142:	001a      	movs	r2, r3
 8008144:	2301      	movs	r3, #1
 8008146:	4053      	eors	r3, r2
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d005      	beq.n	800815a <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 800814e:	4a2c      	ldr	r2, [pc, #176]	@ (8008200 <Mic_Upkeep+0x1fc>)
 8008150:	4b2c      	ldr	r3, [pc, #176]	@ (8008204 <Mic_Upkeep+0x200>)
 8008152:	21e6      	movs	r1, #230	@ 0xe6
 8008154:	0018      	movs	r0, r3
 8008156:	f005 fa37 	bl	800d5c8 <errorHandler>
      }
      if (!enableMicrophone(false))
 800815a:	2000      	movs	r0, #0
 800815c:	f003 fb42 	bl	800b7e4 <enableMicrophone>
 8008160:	0003      	movs	r3, r0
 8008162:	001a      	movs	r2, r3
 8008164:	2301      	movs	r3, #1
 8008166:	4053      	eors	r3, r2
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 800816e:	4a24      	ldr	r2, [pc, #144]	@ (8008200 <Mic_Upkeep+0x1fc>)
 8008170:	4b24      	ldr	r3, [pc, #144]	@ (8008204 <Mic_Upkeep+0x200>)
 8008172:	21ea      	movs	r1, #234	@ 0xea
 8008174:	0018      	movs	r0, r3
 8008176:	f005 fa27 	bl	800d5c8 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 800817a:	f005 fd0d 	bl	800db98 <HAL_GetTick>
 800817e:	0003      	movs	r3, r0
 8008180:	22fa      	movs	r2, #250	@ 0xfa
 8008182:	0092      	lsls	r2, r2, #2
 8008184:	189a      	adds	r2, r3, r2
 8008186:	4b28      	ldr	r3, [pc, #160]	@ (8008228 <Mic_Upkeep+0x224>)
 8008188:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 800818a:	4b1c      	ldr	r3, [pc, #112]	@ (80081fc <Mic_Upkeep+0x1f8>)
 800818c:	2203      	movs	r2, #3
 800818e:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8008190:	f004 fa98 	bl	800c6c4 <ResetMICIndicator>
    }
    break;
 8008194:	e028      	b.n	80081e8 <Mic_Upkeep+0x1e4>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8008196:	4b24      	ldr	r3, [pc, #144]	@ (8008228 <Mic_Upkeep+0x224>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	0018      	movs	r0, r3
 800819c:	f005 f908 	bl	800d3b0 <TimestampIsReached>
 80081a0:	1e03      	subs	r3, r0, #0
 80081a2:	d023      	beq.n	80081ec <Mic_Upkeep+0x1e8>
      if (!enableMicrophone(true))
 80081a4:	2001      	movs	r0, #1
 80081a6:	f003 fb1d 	bl	800b7e4 <enableMicrophone>
 80081aa:	0003      	movs	r3, r0
 80081ac:	001a      	movs	r2, r3
 80081ae:	2301      	movs	r3, #1
 80081b0:	4053      	eors	r3, r2
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <Mic_Upkeep+0x1c0>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 80081b8:	4a11      	ldr	r2, [pc, #68]	@ (8008200 <Mic_Upkeep+0x1fc>)
 80081ba:	4b12      	ldr	r3, [pc, #72]	@ (8008204 <Mic_Upkeep+0x200>)
 80081bc:	21f7      	movs	r1, #247	@ 0xf7
 80081be:	0018      	movs	r0, r3
 80081c0:	f005 fa02 	bl	800d5c8 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 80081c4:	4b0d      	ldr	r3, [pc, #52]	@ (80081fc <Mic_Upkeep+0x1f8>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 80081ca:	f004 fa63 	bl	800c694 <SetMICIndicator>
    }
    break;
 80081ce:	e00d      	b.n	80081ec <Mic_Upkeep+0x1e8>

  default:
    Debug("Unexpected occurrence happened");
 80081d0:	4a16      	ldr	r2, [pc, #88]	@ (800822c <Mic_Upkeep+0x228>)
 80081d2:	4b17      	ldr	r3, [pc, #92]	@ (8008230 <Mic_Upkeep+0x22c>)
 80081d4:	0019      	movs	r1, r3
 80081d6:	2003      	movs	r0, #3
 80081d8:	f005 f940 	bl	800d45c <CreateLine>
    MicState = MIC_STATE_INIT;
 80081dc:	4b07      	ldr	r3, [pc, #28]	@ (80081fc <Mic_Upkeep+0x1f8>)
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]
    break;
 80081e2:	e004      	b.n	80081ee <Mic_Upkeep+0x1ea>
    break;
 80081e4:	46c0      	nop			@ (mov r8, r8)
 80081e6:	e002      	b.n	80081ee <Mic_Upkeep+0x1ea>
    break;
 80081e8:	46c0      	nop			@ (mov r8, r8)
 80081ea:	e000      	b.n	80081ee <Mic_Upkeep+0x1ea>
    break;
 80081ec:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 80081ee:	4b03      	ldr	r3, [pc, #12]	@ (80081fc <Mic_Upkeep+0x1f8>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
}
 80081f2:	0018      	movs	r0, r3
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b003      	add	sp, #12
 80081f8:	bd90      	pop	{r4, r7, pc}
 80081fa:	46c0      	nop			@ (mov r8, r8)
 80081fc:	20000f82 	.word	0x20000f82
 8008200:	08022d44 	.word	0x08022d44
 8008204:	08023b80 	.word	0x08023b80
 8008208:	200012c0 	.word	0x200012c0
 800820c:	20000f70 	.word	0x20000f70
 8008210:	08022d60 	.word	0x08022d60
 8008214:	08022d8c 	.word	0x08022d8c
 8008218:	20000fb4 	.word	0x20000fb4
 800821c:	42c80000 	.word	0x42c80000
 8008220:	3fe00000 	.word	0x3fe00000
 8008224:	40590000 	.word	0x40590000
 8008228:	20000f6c 	.word	0x20000f6c
 800822c:	08022d94 	.word	0x08022d94
 8008230:	08022cd4 	.word	0x08022cd4

08008234 <Meas_Upkeep>:

MeasurementState Meas_Upkeep(void) {
 8008234:	b5b0      	push	{r4, r5, r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 800823a:	4b39      	ldr	r3, [pc, #228]	@ (8008320 <Meas_Upkeep+0xec>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b06      	cmp	r3, #6
 8008240:	d862      	bhi.n	8008308 <Meas_Upkeep+0xd4>
 8008242:	009a      	lsls	r2, r3, #2
 8008244:	4b37      	ldr	r3, [pc, #220]	@ (8008324 <Meas_Upkeep+0xf0>)
 8008246:	18d3      	adds	r3, r2, r3
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 800824c:	4a36      	ldr	r2, [pc, #216]	@ (8008328 <Meas_Upkeep+0xf4>)
 800824e:	4b37      	ldr	r3, [pc, #220]	@ (800832c <Meas_Upkeep+0xf8>)
 8008250:	0019      	movs	r1, r3
 8008252:	2003      	movs	r0, #3
 8008254:	f005 f902 	bl	800d45c <CreateLine>
    break;
 8008258:	e05d      	b.n	8008316 <Meas_Upkeep+0xe2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 800825a:	f7ff fe81 	bl	8007f60 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 800825e:	4b30      	ldr	r3, [pc, #192]	@ (8008320 <Meas_Upkeep+0xec>)
 8008260:	2201      	movs	r2, #1
 8008262:	701a      	strb	r2, [r3, #0]
    break;
 8008264:	e057      	b.n	8008316 <Meas_Upkeep+0xe2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8008266:	f7ff fe01 	bl	8007e6c <StartMeasurements>
    SetMeasurementIndicator();
 800826a:	f004 f9e5 	bl	800c638 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 800826e:	4b2c      	ldr	r3, [pc, #176]	@ (8008320 <Meas_Upkeep+0xec>)
 8008270:	2202      	movs	r2, #2
 8008272:	701a      	strb	r2, [r3, #0]
   break;
 8008274:	e04f      	b.n	8008316 <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8008276:	f7ff fe8d 	bl	8007f94 <MeasurementsCompleted>
 800827a:	1e03      	subs	r3, r0, #0
 800827c:	d048      	beq.n	8008310 <Meas_Upkeep+0xdc>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 800827e:	4b28      	ldr	r3, [pc, #160]	@ (8008320 <Meas_Upkeep+0xec>)
 8008280:	2203      	movs	r2, #3
 8008282:	701a      	strb	r2, [r3, #0]
    }
    break;
 8008284:	e044      	b.n	8008310 <Meas_Upkeep+0xdc>
  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
//    Debug("Processing results.");
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8008286:	4b2a      	ldr	r3, [pc, #168]	@ (8008330 <Meas_Upkeep+0xfc>)
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	4a2a      	ldr	r2, [pc, #168]	@ (8008334 <Meas_Upkeep+0x100>)
 800828c:	4927      	ldr	r1, [pc, #156]	@ (800832c <Meas_Upkeep+0xf8>)
 800828e:	2003      	movs	r0, #3
 8008290:	f005 f8e4 	bl	800d45c <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8008294:	4b26      	ldr	r3, [pc, #152]	@ (8008330 <Meas_Upkeep+0xfc>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	1c18      	adds	r0, r3, #0
 800829a:	f7fb f8e3 	bl	8003464 <__aeabi_f2d>
 800829e:	0004      	movs	r4, r0
 80082a0:	000d      	movs	r5, r1
 80082a2:	4b23      	ldr	r3, [pc, #140]	@ (8008330 <Meas_Upkeep+0xfc>)
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	1c18      	adds	r0, r3, #0
 80082a8:	f7fb f8dc 	bl	8003464 <__aeabi_f2d>
 80082ac:	0002      	movs	r2, r0
 80082ae:	000b      	movs	r3, r1
 80082b0:	4821      	ldr	r0, [pc, #132]	@ (8008338 <Meas_Upkeep+0x104>)
 80082b2:	491e      	ldr	r1, [pc, #120]	@ (800832c <Meas_Upkeep+0xf8>)
 80082b4:	9202      	str	r2, [sp, #8]
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	9400      	str	r4, [sp, #0]
 80082ba:	9501      	str	r5, [sp, #4]
 80082bc:	0002      	movs	r2, r0
 80082be:	2003      	movs	r0, #3
 80082c0:	f005 f8cc 	bl	800d45c <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 80082c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008330 <Meas_Upkeep+0xfc>)
 80082c6:	6858      	ldr	r0, [r3, #4]
 80082c8:	4b19      	ldr	r3, [pc, #100]	@ (8008330 <Meas_Upkeep+0xfc>)
 80082ca:	6819      	ldr	r1, [r3, #0]
 80082cc:	4b18      	ldr	r3, [pc, #96]	@ (8008330 <Meas_Upkeep+0xfc>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	001a      	movs	r2, r3
 80082d4:	f7fb fb12 	bl	80038fc <setMeasurement>
    ResetMeasurementIndicator();
 80082d8:	f004 f9c6 	bl	800c668 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 60000;  // once a minute
 80082dc:	f005 fc5c 	bl	800db98 <HAL_GetTick>
 80082e0:	0003      	movs	r3, r0
 80082e2:	4a16      	ldr	r2, [pc, #88]	@ (800833c <Meas_Upkeep+0x108>)
 80082e4:	189a      	adds	r2, r3, r2
 80082e6:	4b16      	ldr	r3, [pc, #88]	@ (8008340 <Meas_Upkeep+0x10c>)
 80082e8:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 80082ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008320 <Meas_Upkeep+0xec>)
 80082ec:	2206      	movs	r2, #6
 80082ee:	701a      	strb	r2, [r3, #0]
    break;
 80082f0:	e011      	b.n	8008316 <Meas_Upkeep+0xe2>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 80082f2:	4b13      	ldr	r3, [pc, #76]	@ (8008340 <Meas_Upkeep+0x10c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	0018      	movs	r0, r3
 80082f8:	f005 f85a 	bl	800d3b0 <TimestampIsReached>
 80082fc:	1e03      	subs	r3, r0, #0
 80082fe:	d009      	beq.n	8008314 <Meas_Upkeep+0xe0>
      MeasState = MEAS_STATE_INIT;
 8008300:	4b07      	ldr	r3, [pc, #28]	@ (8008320 <Meas_Upkeep+0xec>)
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
    }

    break;
 8008306:	e005      	b.n	8008314 <Meas_Upkeep+0xe0>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8008308:	4b05      	ldr	r3, [pc, #20]	@ (8008320 <Meas_Upkeep+0xec>)
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]
    break;
 800830e:	e002      	b.n	8008316 <Meas_Upkeep+0xe2>
    break;
 8008310:	46c0      	nop			@ (mov r8, r8)
 8008312:	e000      	b.n	8008316 <Meas_Upkeep+0xe2>
    break;
 8008314:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8008316:	4b02      	ldr	r3, [pc, #8]	@ (8008320 <Meas_Upkeep+0xec>)
 8008318:	781b      	ldrb	r3, [r3, #0]
}
 800831a:	0018      	movs	r0, r3
 800831c:	46bd      	mov	sp, r7
 800831e:	bdb0      	pop	{r4, r5, r7, pc}
 8008320:	20000f83 	.word	0x20000f83
 8008324:	08023b64 	.word	0x08023b64
 8008328:	08022db4 	.word	0x08022db4
 800832c:	08022cd4 	.word	0x08022cd4
 8008330:	20000f1c 	.word	0x20000f1c
 8008334:	08022dd4 	.word	0x08022dd4
 8008338:	08022dec 	.word	0x08022dec
 800833c:	0000ea60 	.word	0x0000ea60
 8008340:	20000f68 	.word	0x20000f68

08008344 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8008344:	b590      	push	{r4, r7, lr}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	1d3b      	adds	r3, r7, #4
 800834c:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 800834e:	240f      	movs	r4, #15
 8008350:	193b      	adds	r3, r7, r4
 8008352:	2200      	movs	r2, #0
 8008354:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8008356:	4b20      	ldr	r3, [pc, #128]	@ (80083d8 <Meas_SetEnabledSensors+0x94>)
 8008358:	1d3a      	adds	r2, r7, #4
 800835a:	6812      	ldr	r2, [r2, #0]
 800835c:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 800835e:	193b      	adds	r3, r7, r4
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	193a      	adds	r2, r7, r4
 8008364:	1c59      	adds	r1, r3, #1
 8008366:	7011      	strb	r1, [r2, #0]
 8008368:	0018      	movs	r0, r3
 800836a:	1d3b      	adds	r3, r7, #4
 800836c:	7819      	ldrb	r1, [r3, #0]
 800836e:	4a1b      	ldr	r2, [pc, #108]	@ (80083dc <Meas_SetEnabledSensors+0x98>)
 8008370:	0103      	lsls	r3, r0, #4
 8008372:	18d3      	adds	r3, r2, r3
 8008374:	330c      	adds	r3, #12
 8008376:	1c0a      	adds	r2, r1, #0
 8008378:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800837a:	193b      	adds	r3, r7, r4
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	193a      	adds	r2, r7, r4
 8008380:	1c59      	adds	r1, r3, #1
 8008382:	7011      	strb	r1, [r2, #0]
 8008384:	0018      	movs	r0, r3
 8008386:	1d3b      	adds	r3, r7, #4
 8008388:	7859      	ldrb	r1, [r3, #1]
 800838a:	4a14      	ldr	r2, [pc, #80]	@ (80083dc <Meas_SetEnabledSensors+0x98>)
 800838c:	0103      	lsls	r3, r0, #4
 800838e:	18d3      	adds	r3, r2, r3
 8008390:	330c      	adds	r3, #12
 8008392:	1c0a      	adds	r2, r1, #0
 8008394:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8008396:	193b      	adds	r3, r7, r4
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	193a      	adds	r2, r7, r4
 800839c:	1c59      	adds	r1, r3, #1
 800839e:	7011      	strb	r1, [r2, #0]
 80083a0:	0018      	movs	r0, r3
 80083a2:	1d3b      	adds	r3, r7, #4
 80083a4:	7899      	ldrb	r1, [r3, #2]
 80083a6:	4a0d      	ldr	r2, [pc, #52]	@ (80083dc <Meas_SetEnabledSensors+0x98>)
 80083a8:	0103      	lsls	r3, r0, #4
 80083aa:	18d3      	adds	r3, r2, r3
 80083ac:	330c      	adds	r3, #12
 80083ae:	1c0a      	adds	r2, r1, #0
 80083b0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80083b2:	193b      	adds	r3, r7, r4
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	193a      	adds	r2, r7, r4
 80083b8:	1c59      	adds	r1, r3, #1
 80083ba:	7011      	strb	r1, [r2, #0]
 80083bc:	0018      	movs	r0, r3
 80083be:	1d3b      	adds	r3, r7, #4
 80083c0:	78d9      	ldrb	r1, [r3, #3]
 80083c2:	4a06      	ldr	r2, [pc, #24]	@ (80083dc <Meas_SetEnabledSensors+0x98>)
 80083c4:	0103      	lsls	r3, r0, #4
 80083c6:	18d3      	adds	r3, r2, r3
 80083c8:	330c      	adds	r3, #12
 80083ca:	1c0a      	adds	r2, r1, #0
 80083cc:	701a      	strb	r2, [r3, #0]
}
 80083ce:	46c0      	nop			@ (mov r8, r8)
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b005      	add	sp, #20
 80083d4:	bd90      	pop	{r4, r7, pc}
 80083d6:	46c0      	nop			@ (mov r8, r8)
 80083d8:	20000f5c 	.word	0x20000f5c
 80083dc:	20000f2c 	.word	0x20000f2c

080083e0 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 80083e4:	4b02      	ldr	r3, [pc, #8]	@ (80083f0 <SetESPMeasurementDone+0x10>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	70da      	strb	r2, [r3, #3]
}
 80083ea:	46c0      	nop			@ (mov r8, r8)
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000f60 	.word	0x20000f60

080083f4 <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 80083fa:	4b81      	ldr	r3, [pc, #516]	@ (8008600 <MIC_Print+0x20c>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b81      	ldr	r3, [pc, #516]	@ (8008604 <MIC_Print+0x210>)
 8008400:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8008402:	4b81      	ldr	r3, [pc, #516]	@ (8008608 <MIC_Print+0x214>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b09      	cmp	r3, #9
 8008408:	d80e      	bhi.n	8008428 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 800840a:	4b7f      	ldr	r3, [pc, #508]	@ (8008608 <MIC_Print+0x214>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	001a      	movs	r2, r3
 8008410:	4b7c      	ldr	r3, [pc, #496]	@ (8008604 <MIC_Print+0x210>)
 8008412:	6819      	ldr	r1, [r3, #0]
 8008414:	4b7d      	ldr	r3, [pc, #500]	@ (800860c <MIC_Print+0x218>)
 8008416:	0092      	lsls	r2, r2, #2
 8008418:	50d1      	str	r1, [r2, r3]
    counter += 1;
 800841a:	4b7b      	ldr	r3, [pc, #492]	@ (8008608 <MIC_Print+0x214>)
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	3301      	adds	r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	4b79      	ldr	r3, [pc, #484]	@ (8008608 <MIC_Print+0x214>)
 8008424:	701a      	strb	r2, [r3, #0]
 8008426:	e013      	b.n	8008450 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8008428:	4b77      	ldr	r3, [pc, #476]	@ (8008608 <MIC_Print+0x214>)
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 800842e:	4b76      	ldr	r3, [pc, #472]	@ (8008608 <MIC_Print+0x214>)
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	001a      	movs	r2, r3
 8008434:	4b73      	ldr	r3, [pc, #460]	@ (8008604 <MIC_Print+0x210>)
 8008436:	6819      	ldr	r1, [r3, #0]
 8008438:	4b74      	ldr	r3, [pc, #464]	@ (800860c <MIC_Print+0x218>)
 800843a:	0092      	lsls	r2, r2, #2
 800843c:	50d1      	str	r1, [r2, r3]
    counter += 1;
 800843e:	4b72      	ldr	r3, [pc, #456]	@ (8008608 <MIC_Print+0x214>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	b2da      	uxtb	r2, r3
 8008446:	4b70      	ldr	r3, [pc, #448]	@ (8008608 <MIC_Print+0x214>)
 8008448:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 800844a:	4b71      	ldr	r3, [pc, #452]	@ (8008610 <MIC_Print+0x21c>)
 800844c:	2201      	movs	r2, #1
 800844e:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8008450:	4b6f      	ldr	r3, [pc, #444]	@ (8008610 <MIC_Print+0x21c>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2201      	movs	r2, #1
 8008456:	4053      	eors	r3, r2
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 800845e:	4b69      	ldr	r3, [pc, #420]	@ (8008604 <MIC_Print+0x210>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	1c18      	adds	r0, r3, #0
 8008464:	f7fb fa66 	bl	8003934 <setMic>
 8008468:	e02d      	b.n	80084c6 <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 800846a:	4b6a      	ldr	r3, [pc, #424]	@ (8008614 <MIC_Print+0x220>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8008470:	1dfb      	adds	r3, r7, #7
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e013      	b.n	80084a0 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8008478:	1dfb      	adds	r3, r7, #7
 800847a:	781a      	ldrb	r2, [r3, #0]
 800847c:	4b63      	ldr	r3, [pc, #396]	@ (800860c <MIC_Print+0x218>)
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	58d2      	ldr	r2, [r2, r3]
 8008482:	4b64      	ldr	r3, [pc, #400]	@ (8008614 <MIC_Print+0x220>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	1c19      	adds	r1, r3, #0
 8008488:	1c10      	adds	r0, r2, #0
 800848a:	f7f8 fa19 	bl	80008c0 <__aeabi_fadd>
 800848e:	1c03      	adds	r3, r0, #0
 8008490:	1c1a      	adds	r2, r3, #0
 8008492:	4b60      	ldr	r3, [pc, #384]	@ (8008614 <MIC_Print+0x220>)
 8008494:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8008496:	1dfb      	adds	r3, r7, #7
 8008498:	781a      	ldrb	r2, [r3, #0]
 800849a:	1dfb      	adds	r3, r7, #7
 800849c:	3201      	adds	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
 80084a0:	1dfb      	adds	r3, r7, #7
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	2b09      	cmp	r3, #9
 80084a6:	d9e7      	bls.n	8008478 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 80084a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008614 <MIC_Print+0x220>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	495a      	ldr	r1, [pc, #360]	@ (8008618 <MIC_Print+0x224>)
 80084ae:	1c18      	adds	r0, r3, #0
 80084b0:	f7f8 fb90 	bl	8000bd4 <__aeabi_fdiv>
 80084b4:	1c03      	adds	r3, r0, #0
 80084b6:	1c1a      	adds	r2, r3, #0
 80084b8:	4b56      	ldr	r3, [pc, #344]	@ (8008614 <MIC_Print+0x220>)
 80084ba:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 80084bc:	4b55      	ldr	r3, [pc, #340]	@ (8008614 <MIC_Print+0x220>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	1c18      	adds	r0, r3, #0
 80084c2:	f7fb fa37 	bl	8003934 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 80084c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008604 <MIC_Print+0x210>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4954      	ldr	r1, [pc, #336]	@ (800861c <MIC_Print+0x228>)
 80084cc:	1c18      	adds	r0, r3, #0
 80084ce:	f7f8 f84d 	bl	800056c <__aeabi_fcmpge>
 80084d2:	1e03      	subs	r3, r0, #0
 80084d4:	d004      	beq.n	80084e0 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 80084d6:	2201      	movs	r2, #1
 80084d8:	2101      	movs	r1, #1
 80084da:	2001      	movs	r0, #1
 80084dc:	f004 f82e 	bl	800c53c <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 80084e0:	4b48      	ldr	r3, [pc, #288]	@ (8008604 <MIC_Print+0x210>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	494d      	ldr	r1, [pc, #308]	@ (800861c <MIC_Print+0x228>)
 80084e6:	1c18      	adds	r0, r3, #0
 80084e8:	f7f8 f822 	bl	8000530 <__aeabi_fcmplt>
 80084ec:	1e03      	subs	r3, r0, #0
 80084ee:	d00c      	beq.n	800850a <MIC_Print+0x116>
 80084f0:	4b44      	ldr	r3, [pc, #272]	@ (8008604 <MIC_Print+0x210>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	494a      	ldr	r1, [pc, #296]	@ (8008620 <MIC_Print+0x22c>)
 80084f6:	1c18      	adds	r0, r3, #0
 80084f8:	f7f8 f838 	bl	800056c <__aeabi_fcmpge>
 80084fc:	1e03      	subs	r3, r0, #0
 80084fe:	d004      	beq.n	800850a <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8008500:	2200      	movs	r2, #0
 8008502:	2100      	movs	r1, #0
 8008504:	2001      	movs	r0, #1
 8008506:	f004 f819 	bl	800c53c <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 800850a:	4b3e      	ldr	r3, [pc, #248]	@ (8008604 <MIC_Print+0x210>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4944      	ldr	r1, [pc, #272]	@ (8008620 <MIC_Print+0x22c>)
 8008510:	1c18      	adds	r0, r3, #0
 8008512:	f7f8 f80d 	bl	8000530 <__aeabi_fcmplt>
 8008516:	1e03      	subs	r3, r0, #0
 8008518:	d00c      	beq.n	8008534 <MIC_Print+0x140>
 800851a:	4b3a      	ldr	r3, [pc, #232]	@ (8008604 <MIC_Print+0x210>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4941      	ldr	r1, [pc, #260]	@ (8008624 <MIC_Print+0x230>)
 8008520:	1c18      	adds	r0, r3, #0
 8008522:	f7f8 f823 	bl	800056c <__aeabi_fcmpge>
 8008526:	1e03      	subs	r3, r0, #0
 8008528:	d004      	beq.n	8008534 <MIC_Print+0x140>
    SetDBLED(true, true, false);
 800852a:	2200      	movs	r2, #0
 800852c:	2101      	movs	r1, #1
 800852e:	2001      	movs	r0, #1
 8008530:	f004 f804 	bl	800c53c <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 8008534:	4b33      	ldr	r3, [pc, #204]	@ (8008604 <MIC_Print+0x210>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	493a      	ldr	r1, [pc, #232]	@ (8008624 <MIC_Print+0x230>)
 800853a:	1c18      	adds	r0, r3, #0
 800853c:	f7f7 fff8 	bl	8000530 <__aeabi_fcmplt>
 8008540:	1e03      	subs	r3, r0, #0
 8008542:	d00c      	beq.n	800855e <MIC_Print+0x16a>
 8008544:	4b2f      	ldr	r3, [pc, #188]	@ (8008604 <MIC_Print+0x210>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4937      	ldr	r1, [pc, #220]	@ (8008628 <MIC_Print+0x234>)
 800854a:	1c18      	adds	r0, r3, #0
 800854c:	f7f8 f80e 	bl	800056c <__aeabi_fcmpge>
 8008550:	1e03      	subs	r3, r0, #0
 8008552:	d004      	beq.n	800855e <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 8008554:	2200      	movs	r2, #0
 8008556:	2101      	movs	r1, #1
 8008558:	2000      	movs	r0, #0
 800855a:	f003 ffef 	bl	800c53c <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 800855e:	4b29      	ldr	r3, [pc, #164]	@ (8008604 <MIC_Print+0x210>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4931      	ldr	r1, [pc, #196]	@ (8008628 <MIC_Print+0x234>)
 8008564:	1c18      	adds	r0, r3, #0
 8008566:	f7f7 ffe3 	bl	8000530 <__aeabi_fcmplt>
 800856a:	1e03      	subs	r3, r0, #0
 800856c:	d00c      	beq.n	8008588 <MIC_Print+0x194>
 800856e:	4b25      	ldr	r3, [pc, #148]	@ (8008604 <MIC_Print+0x210>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	492e      	ldr	r1, [pc, #184]	@ (800862c <MIC_Print+0x238>)
 8008574:	1c18      	adds	r0, r3, #0
 8008576:	f7f7 fff9 	bl	800056c <__aeabi_fcmpge>
 800857a:	1e03      	subs	r3, r0, #0
 800857c:	d004      	beq.n	8008588 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 800857e:	2201      	movs	r2, #1
 8008580:	2100      	movs	r1, #0
 8008582:	2000      	movs	r0, #0
 8008584:	f003 ffda 	bl	800c53c <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8008588:	4b1e      	ldr	r3, [pc, #120]	@ (8008604 <MIC_Print+0x210>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4927      	ldr	r1, [pc, #156]	@ (800862c <MIC_Print+0x238>)
 800858e:	1c18      	adds	r0, r3, #0
 8008590:	f7f7 ffce 	bl	8000530 <__aeabi_fcmplt>
 8008594:	1e03      	subs	r3, r0, #0
 8008596:	d00c      	beq.n	80085b2 <MIC_Print+0x1be>
 8008598:	4b1a      	ldr	r3, [pc, #104]	@ (8008604 <MIC_Print+0x210>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4924      	ldr	r1, [pc, #144]	@ (8008630 <MIC_Print+0x23c>)
 800859e:	1c18      	adds	r0, r3, #0
 80085a0:	f7f7 ffe4 	bl	800056c <__aeabi_fcmpge>
 80085a4:	1e03      	subs	r3, r0, #0
 80085a6:	d004      	beq.n	80085b2 <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 80085a8:	2201      	movs	r2, #1
 80085aa:	2101      	movs	r1, #1
 80085ac:	2000      	movs	r0, #0
 80085ae:	f003 ffc5 	bl	800c53c <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 80085b2:	4b14      	ldr	r3, [pc, #80]	@ (8008604 <MIC_Print+0x210>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	491e      	ldr	r1, [pc, #120]	@ (8008630 <MIC_Print+0x23c>)
 80085b8:	1c18      	adds	r0, r3, #0
 80085ba:	f7f7 ffb9 	bl	8000530 <__aeabi_fcmplt>
 80085be:	1e03      	subs	r3, r0, #0
 80085c0:	d00c      	beq.n	80085dc <MIC_Print+0x1e8>
 80085c2:	4b10      	ldr	r3, [pc, #64]	@ (8008604 <MIC_Print+0x210>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	491b      	ldr	r1, [pc, #108]	@ (8008634 <MIC_Print+0x240>)
 80085c8:	1c18      	adds	r0, r3, #0
 80085ca:	f7f7 ffcf 	bl	800056c <__aeabi_fcmpge>
 80085ce:	1e03      	subs	r3, r0, #0
 80085d0:	d004      	beq.n	80085dc <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 80085d2:	2201      	movs	r2, #1
 80085d4:	2100      	movs	r1, #0
 80085d6:	2001      	movs	r0, #1
 80085d8:	f003 ffb0 	bl	800c53c <SetDBLED>
  }
  if(dBc < 35){//off
 80085dc:	4b09      	ldr	r3, [pc, #36]	@ (8008604 <MIC_Print+0x210>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4914      	ldr	r1, [pc, #80]	@ (8008634 <MIC_Print+0x240>)
 80085e2:	1c18      	adds	r0, r3, #0
 80085e4:	f7f7 ffa4 	bl	8000530 <__aeabi_fcmplt>
 80085e8:	1e03      	subs	r3, r0, #0
 80085ea:	d100      	bne.n	80085ee <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 80085ec:	e004      	b.n	80085f8 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 80085ee:	2200      	movs	r2, #0
 80085f0:	2100      	movs	r1, #0
 80085f2:	2000      	movs	r0, #0
 80085f4:	f003 ffa2 	bl	800c53c <SetDBLED>
}
 80085f8:	46c0      	nop			@ (mov r8, r8)
 80085fa:	46bd      	mov	sp, r7
 80085fc:	b002      	add	sp, #8
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	20000fb4 	.word	0x20000fb4
 8008604:	20000f84 	.word	0x20000f84
 8008608:	20000fb8 	.word	0x20000fb8
 800860c:	20000f88 	.word	0x20000f88
 8008610:	20000fb9 	.word	0x20000fb9
 8008614:	20000fb0 	.word	0x20000fb0
 8008618:	41200000 	.word	0x41200000
 800861c:	42b40000 	.word	0x42b40000
 8008620:	42a00000 	.word	0x42a00000
 8008624:	428c0000 	.word	0x428c0000
 8008628:	42700000 	.word	0x42700000
 800862c:	42480000 	.word	0x42480000
 8008630:	42200000 	.word	0x42200000
 8008634:	420c0000 	.word	0x420c0000

08008638 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 800863e:	4b11      	ldr	r3, [pc, #68]	@ (8008684 <MIC_TestMeasurementDone+0x4c>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	b2db      	uxtb	r3, r3
 8008644:	4a10      	ldr	r2, [pc, #64]	@ (8008688 <MIC_TestMeasurementDone+0x50>)
 8008646:	4911      	ldr	r1, [pc, #68]	@ (800868c <MIC_TestMeasurementDone+0x54>)
 8008648:	2002      	movs	r0, #2
 800864a:	f004 ff07 	bl	800d45c <CreateLine>
  if(DataReady) {
 800864e:	4b0d      	ldr	r3, [pc, #52]	@ (8008684 <MIC_TestMeasurementDone+0x4c>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	d010      	beq.n	800867a <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8008658:	1dfb      	adds	r3, r7, #7
 800865a:	4a0d      	ldr	r2, [pc, #52]	@ (8008690 <MIC_TestMeasurementDone+0x58>)
 800865c:	7812      	ldrb	r2, [r2, #0]
 800865e:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8008660:	4b0b      	ldr	r3, [pc, #44]	@ (8008690 <MIC_TestMeasurementDone+0x58>)
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	b2db      	uxtb	r3, r3
 8008666:	4a0b      	ldr	r2, [pc, #44]	@ (8008694 <MIC_TestMeasurementDone+0x5c>)
 8008668:	4908      	ldr	r1, [pc, #32]	@ (800868c <MIC_TestMeasurementDone+0x54>)
 800866a:	2002      	movs	r0, #2
 800866c:	f004 fef6 	bl	800d45c <CreateLine>
    ResetMICIndicator();
 8008670:	f004 f828 	bl	800c6c4 <ResetMICIndicator>
    return Check;
 8008674:	1dfb      	adds	r3, r7, #7
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	e000      	b.n	800867c <MIC_TestMeasurementDone+0x44>
  }
  return false;
 800867a:	2300      	movs	r3, #0
}
 800867c:	0018      	movs	r0, r3
 800867e:	46bd      	mov	sp, r7
 8008680:	b002      	add	sp, #8
 8008682:	bd80      	pop	{r7, pc}
 8008684:	200012c0 	.word	0x200012c0
 8008688:	08022e20 	.word	0x08022e20
 800868c:	08022e4c 	.word	0x08022e4c
 8008690:	200012c1 	.word	0x200012c1
 8008694:	08022e50 	.word	0x08022e50

08008698 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8008698:	b40f      	push	{r0, r1, r2, r3}
 800869a:	b580      	push	{r7, lr}
 800869c:	b082      	sub	sp, #8
 800869e:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 80086a0:	2314      	movs	r3, #20
 80086a2:	18fb      	adds	r3, r7, r3
 80086a4:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	2180      	movs	r1, #128	@ 0x80
 80086ac:	0089      	lsls	r1, r1, #2
 80086ae:	480a      	ldr	r0, [pc, #40]	@ (80086d8 <print+0x40>)
 80086b0:	f016 fbca 	bl	801ee48 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 80086b4:	4b08      	ldr	r3, [pc, #32]	@ (80086d8 <print+0x40>)
 80086b6:	0018      	movs	r0, r3
 80086b8:	f7f7 fd58 	bl	800016c <strlen>
 80086bc:	0003      	movs	r3, r0
 80086be:	b29a      	uxth	r2, r3
 80086c0:	4b05      	ldr	r3, [pc, #20]	@ (80086d8 <print+0x40>)
 80086c2:	0011      	movs	r1, r2
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7ff f98b 	bl	80079e0 <printString>
}
 80086ca:	46c0      	nop			@ (mov r8, r8)
 80086cc:	46bd      	mov	sp, r7
 80086ce:	b002      	add	sp, #8
 80086d0:	bc80      	pop	{r7}
 80086d2:	bc08      	pop	{r3}
 80086d4:	b004      	add	sp, #16
 80086d6:	4718      	bx	r3
 80086d8:	20000fbc 	.word	0x20000fbc

080086dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80086e2:	1d3b      	adds	r3, r7, #4
 80086e4:	0018      	movs	r0, r3
 80086e6:	2314      	movs	r3, #20
 80086e8:	001a      	movs	r2, r3
 80086ea:	2100      	movs	r1, #0
 80086ec:	f016 fc58 	bl	801efa0 <memset>
  RTC_DateTypeDef sDate = {0};
 80086f0:	003b      	movs	r3, r7
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80086f6:	4b2e      	ldr	r3, [pc, #184]	@ (80087b0 <MX_RTC_Init+0xd4>)
 80086f8:	4a2e      	ldr	r2, [pc, #184]	@ (80087b4 <MX_RTC_Init+0xd8>)
 80086fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80086fc:	4b2c      	ldr	r3, [pc, #176]	@ (80087b0 <MX_RTC_Init+0xd4>)
 80086fe:	2200      	movs	r2, #0
 8008700:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8008702:	4b2b      	ldr	r3, [pc, #172]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008704:	227f      	movs	r2, #127	@ 0x7f
 8008706:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8008708:	4b29      	ldr	r3, [pc, #164]	@ (80087b0 <MX_RTC_Init+0xd4>)
 800870a:	22ff      	movs	r2, #255	@ 0xff
 800870c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800870e:	4b28      	ldr	r3, [pc, #160]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008710:	2200      	movs	r2, #0
 8008712:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008714:	4b26      	ldr	r3, [pc, #152]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008716:	2200      	movs	r2, #0
 8008718:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800871a:	4b25      	ldr	r3, [pc, #148]	@ (80087b0 <MX_RTC_Init+0xd4>)
 800871c:	2200      	movs	r2, #0
 800871e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008720:	4b23      	ldr	r3, [pc, #140]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008722:	2200      	movs	r2, #0
 8008724:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008726:	4b22      	ldr	r3, [pc, #136]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008728:	0018      	movs	r0, r3
 800872a:	f00c fa93 	bl	8014c54 <HAL_RTC_Init>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d001      	beq.n	8008736 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8008732:	f7ff fa15 	bl	8007b60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	220d      	movs	r2, #13
 800873a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 800873c:	1d3b      	adds	r3, r7, #4
 800873e:	2200      	movs	r2, #0
 8008740:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8008742:	1d3b      	adds	r3, r7, #4
 8008744:	2200      	movs	r2, #0
 8008746:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008748:	1d3b      	adds	r3, r7, #4
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800874e:	1d3b      	adds	r3, r7, #4
 8008750:	2200      	movs	r2, #0
 8008752:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8008754:	1d39      	adds	r1, r7, #4
 8008756:	4b16      	ldr	r3, [pc, #88]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008758:	2200      	movs	r2, #0
 800875a:	0018      	movs	r0, r3
 800875c:	f00c fb16 	bl	8014d8c <HAL_RTC_SetTime>
 8008760:	1e03      	subs	r3, r0, #0
 8008762:	d001      	beq.n	8008768 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8008764:	f7ff f9fc 	bl	8007b60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008768:	003b      	movs	r3, r7
 800876a:	2206      	movs	r2, #6
 800876c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 800876e:	003b      	movs	r3, r7
 8008770:	2211      	movs	r2, #17
 8008772:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 8008774:	003b      	movs	r3, r7
 8008776:	2217      	movs	r2, #23
 8008778:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 800877a:	003b      	movs	r3, r7
 800877c:	2218      	movs	r2, #24
 800877e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008780:	0039      	movs	r1, r7
 8008782:	4b0b      	ldr	r3, [pc, #44]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008784:	2200      	movs	r2, #0
 8008786:	0018      	movs	r0, r3
 8008788:	f00c fc08 	bl	8014f9c <HAL_RTC_SetDate>
 800878c:	1e03      	subs	r3, r0, #0
 800878e:	d001      	beq.n	8008794 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008790:	f7ff f9e6 	bl	8007b60 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8008794:	4b06      	ldr	r3, [pc, #24]	@ (80087b0 <MX_RTC_Init+0xd4>)
 8008796:	2200      	movs	r2, #0
 8008798:	2100      	movs	r1, #0
 800879a:	0018      	movs	r0, r3
 800879c:	f00c fdb8 	bl	8015310 <HAL_RTCEx_SetWakeUpTimer_IT>
 80087a0:	1e03      	subs	r3, r0, #0
 80087a2:	d001      	beq.n	80087a8 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 80087a4:	f7ff f9dc 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80087a8:	46c0      	nop			@ (mov r8, r8)
 80087aa:	46bd      	mov	sp, r7
 80087ac:	b006      	add	sp, #24
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	200011bc 	.word	0x200011bc
 80087b4:	40002800 	.word	0x40002800

080087b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a0a      	ldr	r2, [pc, #40]	@ (80087f0 <HAL_RTC_MspInit+0x38>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d10e      	bne.n	80087e8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80087ca:	4b0a      	ldr	r3, [pc, #40]	@ (80087f4 <HAL_RTC_MspInit+0x3c>)
 80087cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087ce:	4b09      	ldr	r3, [pc, #36]	@ (80087f4 <HAL_RTC_MspInit+0x3c>)
 80087d0:	2180      	movs	r1, #128	@ 0x80
 80087d2:	02c9      	lsls	r1, r1, #11
 80087d4:	430a      	orrs	r2, r1
 80087d6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80087d8:	2200      	movs	r2, #0
 80087da:	2100      	movs	r1, #0
 80087dc:	2002      	movs	r0, #2
 80087de:	f005 fe6d 	bl	800e4bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80087e2:	2002      	movs	r0, #2
 80087e4:	f005 fe7f 	bl	800e4e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80087e8:	46c0      	nop			@ (mov r8, r8)
 80087ea:	46bd      	mov	sp, r7
 80087ec:	b002      	add	sp, #8
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40002800 	.word	0x40002800
 80087f4:	40021000 	.word	0x40021000

080087f8 <setsen5xReadTimer>:
uint8_t sen5xSamples = 0;
uint8_t sen5xErrors = 0;
static sen5x_states samplesState = LIGHT_OUT;
SEN5X_DateTypeDef sen5x_data;

void setsen5xReadTimer(uint32_t delayms) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  sen5xReadTimer = HAL_GetTick() + delayms;
 8008800:	f005 f9ca 	bl	800db98 <HAL_GetTick>
 8008804:	0002      	movs	r2, r0
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	18d2      	adds	r2, r2, r3
 800880a:	4b03      	ldr	r3, [pc, #12]	@ (8008818 <setsen5xReadTimer+0x20>)
 800880c:	601a      	str	r2, [r3, #0]
}
 800880e:	46c0      	nop			@ (mov r8, r8)
 8008810:	46bd      	mov	sp, r7
 8008812:	b002      	add	sp, #8
 8008814:	bd80      	pop	{r7, pc}
 8008816:	46c0      	nop			@ (mov r8, r8)
 8008818:	200011e4 	.word	0x200011e4

0800881c <enable_sen5x>:

bool enable_sen5x(uint32_t sleepTime) {
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  if (sen5x_Present) {
 8008824:	4b19      	ldr	r3, [pc, #100]	@ (800888c <enable_sen5x+0x70>)
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d026      	beq.n	800887a <enable_sen5x+0x5e>
    sen5x_Enable = !sen5x_Enable;
 800882c:	4b18      	ldr	r3, [pc, #96]	@ (8008890 <enable_sen5x+0x74>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	1e5a      	subs	r2, r3, #1
 8008832:	4193      	sbcs	r3, r2
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2201      	movs	r2, #1
 8008838:	4053      	eors	r3, r2
 800883a:	b2db      	uxtb	r3, r3
 800883c:	1c1a      	adds	r2, r3, #0
 800883e:	2301      	movs	r3, #1
 8008840:	4013      	ands	r3, r2
 8008842:	b2da      	uxtb	r2, r3
 8008844:	4b12      	ldr	r3, [pc, #72]	@ (8008890 <enable_sen5x+0x74>)
 8008846:	701a      	strb	r2, [r3, #0]
    if (sen5x_Enable) {
 8008848:	4b11      	ldr	r3, [pc, #68]	@ (8008890 <enable_sen5x+0x74>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <enable_sen5x+0x4a>
      setsen5xReadTimer(0);
 8008850:	2000      	movs	r0, #0
 8008852:	f7ff ffd1 	bl	80087f8 <setsen5xReadTimer>
      Debug("SEN5X status of sen5x_Enable %d", sen5x_Enable);
 8008856:	4b0e      	ldr	r3, [pc, #56]	@ (8008890 <enable_sen5x+0x74>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	4a0e      	ldr	r2, [pc, #56]	@ (8008894 <enable_sen5x+0x78>)
 800885c:	490e      	ldr	r1, [pc, #56]	@ (8008898 <enable_sen5x+0x7c>)
 800885e:	2003      	movs	r0, #3
 8008860:	f004 fdfc 	bl	800d45c <CreateLine>
 8008864:	e009      	b.n	800887a <enable_sen5x+0x5e>
    }
    else {
      setsen5xReadTimer(HAL_GetTick() +( 3 * (sleepTime*1000))); //The ticker starts after 3*880, effective this turn the sen5x device will not start
 8008866:	f005 f997 	bl	800db98 <HAL_GetTick>
 800886a:	0002      	movs	r2, r0
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	490b      	ldr	r1, [pc, #44]	@ (800889c <enable_sen5x+0x80>)
 8008870:	434b      	muls	r3, r1
 8008872:	18d3      	adds	r3, r2, r3
 8008874:	0018      	movs	r0, r3
 8008876:	f7ff ffbf 	bl	80087f8 <setsen5xReadTimer>
    }
  }
  samplesState = LIGHT_OUT; // just to be sure if USB_power is disconnected during measurement cycle
 800887a:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <enable_sen5x+0x84>)
 800887c:	2201      	movs	r2, #1
 800887e:	701a      	strb	r2, [r3, #0]
  return sen5x_Enable;
 8008880:	4b03      	ldr	r3, [pc, #12]	@ (8008890 <enable_sen5x+0x74>)
 8008882:	781b      	ldrb	r3, [r3, #0]
}
 8008884:	0018      	movs	r0, r3
 8008886:	46bd      	mov	sp, r7
 8008888:	b002      	add	sp, #8
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20000f00 	.word	0x20000f00
 8008890:	200011e2 	.word	0x200011e2
 8008894:	08022e68 	.word	0x08022e68
 8008898:	08022e88 	.word	0x08022e88
 800889c:	00000bb8 	.word	0x00000bb8
 80088a0:	20000080 	.word	0x20000080

080088a4 <sen5x_Power_On>:
void sen5x_Power_On(void) {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_On");
 80088a8:	4a0a      	ldr	r2, [pc, #40]	@ (80088d4 <sen5x_Power_On+0x30>)
 80088aa:	4b0b      	ldr	r3, [pc, #44]	@ (80088d8 <sen5x_Power_On+0x34>)
 80088ac:	0019      	movs	r1, r3
 80088ae:	2003      	movs	r0, #3
 80088b0:	f004 fdd4 	bl	800d45c <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_SET);
 80088b4:	2380      	movs	r3, #128	@ 0x80
 80088b6:	015b      	lsls	r3, r3, #5
 80088b8:	4808      	ldr	r0, [pc, #32]	@ (80088dc <sen5x_Power_On+0x38>)
 80088ba:	2201      	movs	r2, #1
 80088bc:	0019      	movs	r1, r3
 80088be:	f006 fbe6 	bl	800f08e <HAL_GPIO_WritePin>
  sen5x_On = true;
 80088c2:	4b07      	ldr	r3, [pc, #28]	@ (80088e0 <sen5x_Power_On+0x3c>)
 80088c4:	2201      	movs	r2, #1
 80088c6:	701a      	strb	r2, [r3, #0]
  HAL_Delay(200);
 80088c8:	20c8      	movs	r0, #200	@ 0xc8
 80088ca:	f005 f96f 	bl	800dbac <HAL_Delay>
  return;
 80088ce:	46c0      	nop			@ (mov r8, r8)
}
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	08022e8c 	.word	0x08022e8c
 80088d8:	08022e88 	.word	0x08022e88
 80088dc:	50000800 	.word	0x50000800
 80088e0:	200011e1 	.word	0x200011e1

080088e4 <sen5x_Power_Off>:

void sen5x_Power_Off(void) {
 80088e4:	b580      	push	{r7, lr}
 80088e6:	af00      	add	r7, sp, #0
  Debug("executing sen5x_Power_Off");
 80088e8:	4a09      	ldr	r2, [pc, #36]	@ (8008910 <sen5x_Power_Off+0x2c>)
 80088ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008914 <sen5x_Power_Off+0x30>)
 80088ec:	0019      	movs	r1, r3
 80088ee:	2003      	movs	r0, #3
 80088f0:	f004 fdb4 	bl	800d45c <CreateLine>
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80088f4:	2380      	movs	r3, #128	@ 0x80
 80088f6:	015b      	lsls	r3, r3, #5
 80088f8:	4807      	ldr	r0, [pc, #28]	@ (8008918 <sen5x_Power_Off+0x34>)
 80088fa:	2200      	movs	r2, #0
 80088fc:	0019      	movs	r1, r3
 80088fe:	f006 fbc6 	bl	800f08e <HAL_GPIO_WritePin>
  sen5x_On = false;
 8008902:	4b06      	ldr	r3, [pc, #24]	@ (800891c <sen5x_Power_Off+0x38>)
 8008904:	2200      	movs	r2, #0
 8008906:	701a      	strb	r2, [r3, #0]
  return;
 8008908:	46c0      	nop			@ (mov r8, r8)
}
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	46c0      	nop			@ (mov r8, r8)
 8008910:	08022ea8 	.word	0x08022ea8
 8008914:	08022e88 	.word	0x08022e88
 8008918:	50000800 	.word	0x50000800
 800891c:	200011e1 	.word	0x200011e1

08008920 <reset_fanCleaningDone>:

void reset_fanCleaningDone(void) {
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  fanCleaningDone = false;
 8008924:	4b02      	ldr	r3, [pc, #8]	@ (8008930 <reset_fanCleaningDone+0x10>)
 8008926:	2200      	movs	r2, #0
 8008928:	701a      	strb	r2, [r3, #0]
}
 800892a:	46c0      	nop			@ (mov r8, r8)
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	200011e0 	.word	0x200011e0

08008934 <probe_sen5x>:

int16_t probe_sen5x(void) {
 8008934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008936:	b09b      	sub	sp, #108	@ 0x6c
 8008938:	af04      	add	r7, sp, #16
//  Debug("test for sen5x_device");
  int16_t error = 0;
 800893a:	2456      	movs	r4, #86	@ 0x56
 800893c:	193b      	adds	r3, r7, r4
 800893e:	2200      	movs	r2, #0
 8008940:	801a      	strh	r2, [r3, #0]
  unsigned char serial_number[32];
  uint8_t serial_number_size = 32;
 8008942:	2355      	movs	r3, #85	@ 0x55
 8008944:	18fb      	adds	r3, r7, r3
 8008946:	2220      	movs	r2, #32
 8008948:	701a      	strb	r2, [r3, #0]
  unsigned char product_name[32];
  uint8_t product_name_size = 32;
 800894a:	2354      	movs	r3, #84	@ 0x54
 800894c:	18fb      	adds	r3, r7, r3
 800894e:	2220      	movs	r2, #32
 8008950:	701a      	strb	r2, [r3, #0]
  sen5x_Power_On();  // switch buck converter
 8008952:	f7ff ffa7 	bl	80088a4 <sen5x_Power_On>

  error = sen5x_device_reset();
 8008956:	0025      	movs	r5, r4
 8008958:	193c      	adds	r4, r7, r4
 800895a:	f000 ffed 	bl	8009938 <sen5x_device_reset>
 800895e:	0003      	movs	r3, r0
 8008960:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008962:	002c      	movs	r4, r5
 8008964:	193b      	adds	r3, r7, r4
 8008966:	2200      	movs	r2, #0
 8008968:	5e9b      	ldrsh	r3, [r3, r2]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00b      	beq.n	8008986 <probe_sen5x+0x52>
      Error("Error executing sen5x_device_reset(): %i", error);
 800896e:	193b      	adds	r3, r7, r4
 8008970:	2200      	movs	r2, #0
 8008972:	5e9b      	ldrsh	r3, [r3, r2]
 8008974:	4a6d      	ldr	r2, [pc, #436]	@ (8008b2c <probe_sen5x+0x1f8>)
 8008976:	496e      	ldr	r1, [pc, #440]	@ (8008b30 <probe_sen5x+0x1fc>)
 8008978:	2001      	movs	r0, #1
 800897a:	f004 fd6f 	bl	800d45c <CreateLine>
      return error;
 800897e:	193b      	adds	r3, r7, r4
 8008980:	2200      	movs	r2, #0
 8008982:	5e9b      	ldrsh	r3, [r3, r2]
 8008984:	e0ce      	b.n	8008b24 <probe_sen5x+0x1f0>
  }
  error = sen5x_get_serial_number(serial_number, serial_number_size);
 8008986:	2556      	movs	r5, #86	@ 0x56
 8008988:	197c      	adds	r4, r7, r5
 800898a:	2355      	movs	r3, #85	@ 0x55
 800898c:	18fb      	adds	r3, r7, r3
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	232c      	movs	r3, #44	@ 0x2c
 8008992:	18fb      	adds	r3, r7, r3
 8008994:	0011      	movs	r1, r2
 8008996:	0018      	movs	r0, r3
 8008998:	f000 feba 	bl	8009710 <sen5x_get_serial_number>
 800899c:	0003      	movs	r3, r0
 800899e:	8023      	strh	r3, [r4, #0]
  if (error) {
 80089a0:	197b      	adds	r3, r7, r5
 80089a2:	2200      	movs	r2, #0
 80089a4:	5e9b      	ldrsh	r3, [r3, r2]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00b      	beq.n	80089c2 <probe_sen5x+0x8e>
      printf("Error executing sen5x_get_serial_number(): %i\r\n", error);
 80089aa:	197b      	adds	r3, r7, r5
 80089ac:	2200      	movs	r2, #0
 80089ae:	5e9a      	ldrsh	r2, [r3, r2]
 80089b0:	4b60      	ldr	r3, [pc, #384]	@ (8008b34 <probe_sen5x+0x200>)
 80089b2:	0011      	movs	r1, r2
 80089b4:	0018      	movs	r0, r3
 80089b6:	f016 f93f 	bl	801ec38 <iprintf>
      return error;
 80089ba:	197b      	adds	r3, r7, r5
 80089bc:	2200      	movs	r2, #0
 80089be:	5e9b      	ldrsh	r3, [r3, r2]
 80089c0:	e0b0      	b.n	8008b24 <probe_sen5x+0x1f0>
  } else {
      printf("Serial number: %s\r\n", serial_number);
 80089c2:	232c      	movs	r3, #44	@ 0x2c
 80089c4:	18fa      	adds	r2, r7, r3
 80089c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008b38 <probe_sen5x+0x204>)
 80089c8:	0011      	movs	r1, r2
 80089ca:	0018      	movs	r0, r3
 80089cc:	f016 f934 	bl	801ec38 <iprintf>
  }
  error = sen5x_get_product_name(product_name, product_name_size);
 80089d0:	2556      	movs	r5, #86	@ 0x56
 80089d2:	197c      	adds	r4, r7, r5
 80089d4:	2354      	movs	r3, #84	@ 0x54
 80089d6:	18fb      	adds	r3, r7, r3
 80089d8:	781a      	ldrb	r2, [r3, #0]
 80089da:	230c      	movs	r3, #12
 80089dc:	18fb      	adds	r3, r7, r3
 80089de:	0011      	movs	r1, r2
 80089e0:	0018      	movs	r0, r3
 80089e2:	f000 fe3f 	bl	8009664 <sen5x_get_product_name>
 80089e6:	0003      	movs	r3, r0
 80089e8:	8023      	strh	r3, [r4, #0]
  if (error) {
 80089ea:	197b      	adds	r3, r7, r5
 80089ec:	2200      	movs	r2, #0
 80089ee:	5e9b      	ldrsh	r3, [r3, r2]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d00b      	beq.n	8008a0c <probe_sen5x+0xd8>
      printf("Error executing sen5x_get_product_name(): %i\r\n", error);
 80089f4:	197b      	adds	r3, r7, r5
 80089f6:	2200      	movs	r2, #0
 80089f8:	5e9a      	ldrsh	r2, [r3, r2]
 80089fa:	4b50      	ldr	r3, [pc, #320]	@ (8008b3c <probe_sen5x+0x208>)
 80089fc:	0011      	movs	r1, r2
 80089fe:	0018      	movs	r0, r3
 8008a00:	f016 f91a 	bl	801ec38 <iprintf>
      return error;
 8008a04:	197b      	adds	r3, r7, r5
 8008a06:	2200      	movs	r2, #0
 8008a08:	5e9b      	ldrsh	r3, [r3, r2]
 8008a0a:	e08b      	b.n	8008b24 <probe_sen5x+0x1f0>
  } else {
      printf("Product name: %s\r\n", product_name);
 8008a0c:	230c      	movs	r3, #12
 8008a0e:	18fa      	adds	r2, r7, r3
 8008a10:	4b4b      	ldr	r3, [pc, #300]	@ (8008b40 <probe_sen5x+0x20c>)
 8008a12:	0011      	movs	r1, r2
 8008a14:	0018      	movs	r0, r3
 8008a16:	f016 f90f 	bl	801ec38 <iprintf>
  bool firmware_debug;
  uint8_t hardware_major;
  uint8_t hardware_minor;
  uint8_t protocol_major;
  uint8_t protocol_minor;
  error = sen5x_get_version(&firmware_major, &firmware_minor, &firmware_debug,
 8008a1a:	2656      	movs	r6, #86	@ 0x56
 8008a1c:	19bc      	adds	r4, r7, r6
 8008a1e:	2308      	movs	r3, #8
 8008a20:	18fd      	adds	r5, r7, r3
 8008a22:	2309      	movs	r3, #9
 8008a24:	18fa      	adds	r2, r7, r3
 8008a26:	230a      	movs	r3, #10
 8008a28:	18f9      	adds	r1, r7, r3
 8008a2a:	230b      	movs	r3, #11
 8008a2c:	18f8      	adds	r0, r7, r3
 8008a2e:	1d7b      	adds	r3, r7, #5
 8008a30:	9302      	str	r3, [sp, #8]
 8008a32:	1dbb      	adds	r3, r7, #6
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	1dfb      	adds	r3, r7, #7
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	002b      	movs	r3, r5
 8008a3c:	f000 febe 	bl	80097bc <sen5x_get_version>
 8008a40:	0003      	movs	r3, r0
 8008a42:	8023      	strh	r3, [r4, #0]
                            &hardware_major, &hardware_minor, &protocol_major,
                            &protocol_minor);

  if (error) {
 8008a44:	19bb      	adds	r3, r7, r6
 8008a46:	2200      	movs	r2, #0
 8008a48:	5e9b      	ldrsh	r3, [r3, r2]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <probe_sen5x+0x132>
      printf("Error executing sen5x_get_version(): %i\r\n", error);
 8008a4e:	19bb      	adds	r3, r7, r6
 8008a50:	2200      	movs	r2, #0
 8008a52:	5e9a      	ldrsh	r2, [r3, r2]
 8008a54:	4b3b      	ldr	r3, [pc, #236]	@ (8008b44 <probe_sen5x+0x210>)
 8008a56:	0011      	movs	r1, r2
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f016 f8ed 	bl	801ec38 <iprintf>
      return error;
 8008a5e:	19bb      	adds	r3, r7, r6
 8008a60:	2200      	movs	r2, #0
 8008a62:	5e9b      	ldrsh	r3, [r3, r2]
 8008a64:	e05e      	b.n	8008b24 <probe_sen5x+0x1f0>
  } else {
      printf("Firmware: %u.%u, Hardware: %u.%u\r\n", firmware_major,
 8008a66:	230b      	movs	r3, #11
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	0019      	movs	r1, r3
 8008a6e:	230a      	movs	r3, #10
 8008a70:	18fb      	adds	r3, r7, r3
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	001a      	movs	r2, r3
 8008a76:	2308      	movs	r3, #8
 8008a78:	18fb      	adds	r3, r7, r3
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	001c      	movs	r4, r3
 8008a7e:	1dfb      	adds	r3, r7, #7
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	4831      	ldr	r0, [pc, #196]	@ (8008b48 <probe_sen5x+0x214>)
 8008a84:	9300      	str	r3, [sp, #0]
 8008a86:	0023      	movs	r3, r4
 8008a88:	f016 f8d6 	bl	801ec38 <iprintf>
// `sen5x_set_warm_start_parameter` and
// `sen5x_set_rht_acceleration_mode`.
//
// Adjust temp_offset in degrees celsius to account for additional
// temperature offsets exceeding the SEN module's self heating.
  float temp_offset = 0.0f;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	653b      	str	r3, [r7, #80]	@ 0x50
  int16_t default_slope = 0;
 8008a90:	264e      	movs	r6, #78	@ 0x4e
 8008a92:	19bb      	adds	r3, r7, r6
 8008a94:	2200      	movs	r2, #0
 8008a96:	801a      	strh	r2, [r3, #0]
  uint16_t default_time_constant = 0;
 8008a98:	234c      	movs	r3, #76	@ 0x4c
 8008a9a:	18fb      	adds	r3, r7, r3
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	801a      	strh	r2, [r3, #0]
  error = sen5x_set_temperature_offset_parameters(
      (int16_t)(200 * temp_offset), default_slope, default_time_constant);
 8008aa0:	492a      	ldr	r1, [pc, #168]	@ (8008b4c <probe_sen5x+0x218>)
 8008aa2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008aa4:	f7f8 fa7c 	bl	8000fa0 <__aeabi_fmul>
 8008aa8:	1c03      	adds	r3, r0, #0
  error = sen5x_set_temperature_offset_parameters(
 8008aaa:	1c18      	adds	r0, r3, #0
 8008aac:	f7f8 fd70 	bl	8001590 <__aeabi_f2iz>
 8008ab0:	0003      	movs	r3, r0
 8008ab2:	b218      	sxth	r0, r3
 8008ab4:	2556      	movs	r5, #86	@ 0x56
 8008ab6:	197c      	adds	r4, r7, r5
 8008ab8:	234c      	movs	r3, #76	@ 0x4c
 8008aba:	18fb      	adds	r3, r7, r3
 8008abc:	881a      	ldrh	r2, [r3, #0]
 8008abe:	19bb      	adds	r3, r7, r6
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	5e5b      	ldrsh	r3, [r3, r1]
 8008ac4:	0019      	movs	r1, r3
 8008ac6:	f000 fd69 	bl	800959c <sen5x_set_temperature_offset_parameters>
 8008aca:	0003      	movs	r3, r0
 8008acc:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008ace:	197b      	adds	r3, r7, r5
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	5e9b      	ldrsh	r3, [r3, r2]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00b      	beq.n	8008af0 <probe_sen5x+0x1bc>
      Error("Error executing sen5x_set_temperature_offset_parameters(): %i", error);
 8008ad8:	197b      	adds	r3, r7, r5
 8008ada:	2200      	movs	r2, #0
 8008adc:	5e9b      	ldrsh	r3, [r3, r2]
 8008ade:	4a1c      	ldr	r2, [pc, #112]	@ (8008b50 <probe_sen5x+0x21c>)
 8008ae0:	4913      	ldr	r1, [pc, #76]	@ (8008b30 <probe_sen5x+0x1fc>)
 8008ae2:	2001      	movs	r0, #1
 8008ae4:	f004 fcba 	bl	800d45c <CreateLine>
      return error;
 8008ae8:	197b      	adds	r3, r7, r5
 8008aea:	2200      	movs	r2, #0
 8008aec:	5e9b      	ldrsh	r3, [r3, r2]
 8008aee:	e019      	b.n	8008b24 <probe_sen5x+0x1f0>
  } else {
      Info("Temperature Offset set to %.2f °C (SEN54/SEN55 only)", temp_offset);
 8008af0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008af2:	f7fa fcb7 	bl	8003464 <__aeabi_f2d>
 8008af6:	0002      	movs	r2, r0
 8008af8:	000b      	movs	r3, r1
 8008afa:	4816      	ldr	r0, [pc, #88]	@ (8008b54 <probe_sen5x+0x220>)
 8008afc:	4916      	ldr	r1, [pc, #88]	@ (8008b58 <probe_sen5x+0x224>)
 8008afe:	9200      	str	r2, [sp, #0]
 8008b00:	9301      	str	r3, [sp, #4]
 8008b02:	0002      	movs	r2, r0
 8008b04:	2002      	movs	r0, #2
 8008b06:	f004 fca9 	bl	800d45c <CreateLine>
  }
  sen5x_Power_Off();
 8008b0a:	f7ff feeb 	bl	80088e4 <sen5x_Power_Off>
  sen5xReadTimer  = HAL_GetTick() + 25000; // after 25 second first measurement
 8008b0e:	f005 f843 	bl	800db98 <HAL_GetTick>
 8008b12:	0003      	movs	r3, r0
 8008b14:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <probe_sen5x+0x228>)
 8008b16:	189a      	adds	r2, r3, r2
 8008b18:	4b11      	ldr	r3, [pc, #68]	@ (8008b60 <probe_sen5x+0x22c>)
 8008b1a:	601a      	str	r2, [r3, #0]
  return error;
 8008b1c:	2356      	movs	r3, #86	@ 0x56
 8008b1e:	18fb      	adds	r3, r7, r3
 8008b20:	2200      	movs	r2, #0
 8008b22:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008b24:	0018      	movs	r0, r3
 8008b26:	46bd      	mov	sp, r7
 8008b28:	b017      	add	sp, #92	@ 0x5c
 8008b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b2c:	08022ec4 	.word	0x08022ec4
 8008b30:	08022ef0 	.word	0x08022ef0
 8008b34:	08022ef4 	.word	0x08022ef4
 8008b38:	08022f24 	.word	0x08022f24
 8008b3c:	08022f38 	.word	0x08022f38
 8008b40:	08022f68 	.word	0x08022f68
 8008b44:	08022f7c 	.word	0x08022f7c
 8008b48:	08022fa8 	.word	0x08022fa8
 8008b4c:	43480000 	.word	0x43480000
 8008b50:	08022fcc 	.word	0x08022fcc
 8008b54:	0802300c 	.word	0x0802300c
 8008b58:	08023044 	.word	0x08023044
 8008b5c:	000061a8 	.word	0x000061a8
 8008b60:	200011e4 	.word	0x200011e4

08008b64 <sen5x_lightup_measurement>:

int16_t sen5x_lightup_measurement(void) {
 8008b64:	b590      	push	{r4, r7, lr}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
// Start Measurement
  int16_t error = 0;
 8008b6a:	1dbb      	adds	r3, r7, #6
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_lightup_measurement");
  error = sen5x_start_measurement();
 8008b70:	1dbc      	adds	r4, r7, #6
 8008b72:	f000 fb9f 	bl	80092b4 <sen5x_start_measurement>
 8008b76:	0003      	movs	r3, r0
 8008b78:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008b7a:	1dbb      	adds	r3, r7, #6
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <sen5x_lightup_measurement+0x30>
      Error("Error executing sen5x_lightup_measurement(): %i", error);
 8008b84:	1dbb      	adds	r3, r7, #6
 8008b86:	2200      	movs	r2, #0
 8008b88:	5e9b      	ldrsh	r3, [r3, r2]
 8008b8a:	4a06      	ldr	r2, [pc, #24]	@ (8008ba4 <sen5x_lightup_measurement+0x40>)
 8008b8c:	4906      	ldr	r1, [pc, #24]	@ (8008ba8 <sen5x_lightup_measurement+0x44>)
 8008b8e:	2001      	movs	r0, #1
 8008b90:	f004 fc64 	bl	800d45c <CreateLine>
  }
  return error;
 8008b94:	1dbb      	adds	r3, r7, #6
 8008b96:	2200      	movs	r2, #0
 8008b98:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	b003      	add	sp, #12
 8008ba0:	bd90      	pop	{r4, r7, pc}
 8008ba2:	46c0      	nop			@ (mov r8, r8)
 8008ba4:	08023048 	.word	0x08023048
 8008ba8:	08022ef0 	.word	0x08022ef0

08008bac <sen5x_extinguish_measurement>:

int16_t sen5x_extinguish_measurement(void) {
 8008bac:	b590      	push	{r4, r7, lr}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
// Stop Measurement
//  Debug("entering sen5x_extinguish_measurement");
  int16_t error = 0;
 8008bb2:	1dbb      	adds	r3, r7, #6
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	801a      	strh	r2, [r3, #0]
  error = sen5x_stop_measurement();
 8008bb8:	1dbc      	adds	r4, r7, #6
 8008bba:	f000 fba9 	bl	8009310 <sen5x_stop_measurement>
 8008bbe:	0003      	movs	r3, r0
 8008bc0:	8023      	strh	r3, [r4, #0]
  if (error) {
 8008bc2:	1dbb      	adds	r3, r7, #6
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	5e9b      	ldrsh	r3, [r3, r2]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d007      	beq.n	8008bdc <sen5x_extinguish_measurement+0x30>
    Error("Error executing sen5x_stop_measurement(): %i", error);
 8008bcc:	1dbb      	adds	r3, r7, #6
 8008bce:	2200      	movs	r2, #0
 8008bd0:	5e9b      	ldrsh	r3, [r3, r2]
 8008bd2:	4a06      	ldr	r2, [pc, #24]	@ (8008bec <sen5x_extinguish_measurement+0x40>)
 8008bd4:	4906      	ldr	r1, [pc, #24]	@ (8008bf0 <sen5x_extinguish_measurement+0x44>)
 8008bd6:	2001      	movs	r0, #1
 8008bd8:	f004 fc40 	bl	800d45c <CreateLine>
  }
  return error;
 8008bdc:	1dbb      	adds	r3, r7, #6
 8008bde:	2200      	movs	r2, #0
 8008be0:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008be2:	0018      	movs	r0, r3
 8008be4:	46bd      	mov	sp, r7
 8008be6:	b003      	add	sp, #12
 8008be8:	bd90      	pop	{r4, r7, pc}
 8008bea:	46c0      	nop			@ (mov r8, r8)
 8008bec:	08023078 	.word	0x08023078
 8008bf0:	08022ef0 	.word	0x08022ef0

08008bf4 <sen5x_read_measurement>:

int16_t sen5x_read_measurement(SEN5X_DateTypeDef* sen5x_data) {
 8008bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf6:	b08d      	sub	sp, #52	@ 0x34
 8008bf8:	af04      	add	r7, sp, #16
 8008bfa:	6078      	str	r0, [r7, #4]
  int16_t error = 0;
 8008bfc:	261e      	movs	r6, #30
 8008bfe:	19bb      	adds	r3, r7, r6
 8008c00:	2200      	movs	r2, #0
 8008c02:	801a      	strh	r2, [r3, #0]
  int16_t ambient_humidity;
  int16_t ambient_temperature;
  int16_t voc_index;
  int16_t nox_index;

  error = sen5x_read_measured_values(
 8008c04:	19bc      	adds	r4, r7, r6
 8008c06:	2316      	movs	r3, #22
 8008c08:	18fd      	adds	r5, r7, r3
 8008c0a:	2318      	movs	r3, #24
 8008c0c:	18fa      	adds	r2, r7, r3
 8008c0e:	231a      	movs	r3, #26
 8008c10:	18f9      	adds	r1, r7, r3
 8008c12:	231c      	movs	r3, #28
 8008c14:	18f8      	adds	r0, r7, r3
 8008c16:	230e      	movs	r3, #14
 8008c18:	18fb      	adds	r3, r7, r3
 8008c1a:	9303      	str	r3, [sp, #12]
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	18fb      	adds	r3, r7, r3
 8008c20:	9302      	str	r3, [sp, #8]
 8008c22:	2312      	movs	r3, #18
 8008c24:	18fb      	adds	r3, r7, r3
 8008c26:	9301      	str	r3, [sp, #4]
 8008c28:	2314      	movs	r3, #20
 8008c2a:	18fb      	adds	r3, r7, r3
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	002b      	movs	r3, r5
 8008c30:	f000 fbf0 	bl	8009414 <sen5x_read_measured_values>
 8008c34:	0003      	movs	r3, r0
 8008c36:	8023      	strh	r3, [r4, #0]
          &mass_concentration_pm1p0, &mass_concentration_pm2p5,
          &mass_concentration_pm4p0, &mass_concentration_pm10p0,
          &ambient_humidity, &ambient_temperature, &voc_index, &nox_index);
  if (error) {
 8008c38:	19bb      	adds	r3, r7, r6
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	5e9b      	ldrsh	r3, [r3, r2]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d003      	beq.n	8008c4a <sen5x_read_measurement+0x56>
    return error;
 8008c42:	19bb      	adds	r3, r7, r6
 8008c44:	2200      	movs	r2, #0
 8008c46:	5e9b      	ldrsh	r3, [r3, r2]
 8008c48:	e034      	b.n	8008cb4 <sen5x_read_measurement+0xc0>
  }
  // it is a pitty that sensirion does not structures in there API
  sen5x_data->mass_concentration_pm1p0 = mass_concentration_pm1p0;
 8008c4a:	231c      	movs	r3, #28
 8008c4c:	18fb      	adds	r3, r7, r3
 8008c4e:	881a      	ldrh	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	801a      	strh	r2, [r3, #0]
  sen5x_data->mass_concentration_pm2p5 = mass_concentration_pm2p5;
 8008c54:	211a      	movs	r1, #26
 8008c56:	187b      	adds	r3, r7, r1
 8008c58:	881a      	ldrh	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	805a      	strh	r2, [r3, #2]
  sen5x_data->mass_concentration_pm4p0 = mass_concentration_pm4p0;
 8008c5e:	2318      	movs	r3, #24
 8008c60:	18fb      	adds	r3, r7, r3
 8008c62:	881a      	ldrh	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	809a      	strh	r2, [r3, #4]
  sen5x_data->mass_concentration_pm10p0 = mass_concentration_pm10p0;
 8008c68:	2016      	movs	r0, #22
 8008c6a:	183b      	adds	r3, r7, r0
 8008c6c:	881a      	ldrh	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	80da      	strh	r2, [r3, #6]
  sen5x_data->ambient_humidity = ambient_humidity;
 8008c72:	2314      	movs	r3, #20
 8008c74:	18fb      	adds	r3, r7, r3
 8008c76:	2200      	movs	r2, #0
 8008c78:	5e9a      	ldrsh	r2, [r3, r2]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	811a      	strh	r2, [r3, #8]
  sen5x_data->ambient_temperature = ambient_temperature;
 8008c7e:	2312      	movs	r3, #18
 8008c80:	18fb      	adds	r3, r7, r3
 8008c82:	2200      	movs	r2, #0
 8008c84:	5e9a      	ldrsh	r2, [r3, r2]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	815a      	strh	r2, [r3, #10]
  sen5x_data->voc_index = voc_index;
 8008c8a:	2310      	movs	r3, #16
 8008c8c:	18fb      	adds	r3, r7, r3
 8008c8e:	2200      	movs	r2, #0
 8008c90:	5e9a      	ldrsh	r2, [r3, r2]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	819a      	strh	r2, [r3, #12]
  sen5x_data->nox_index = nox_index;
 8008c96:	230e      	movs	r3, #14
 8008c98:	18fb      	adds	r3, r7, r3
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	5e9a      	ldrsh	r2, [r3, r2]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	81da      	strh	r2, [r3, #14]
  setPMs(mass_concentration_pm2p5, mass_concentration_pm10p0);
 8008ca2:	187b      	adds	r3, r7, r1
 8008ca4:	881a      	ldrh	r2, [r3, #0]
 8008ca6:	183b      	adds	r3, r7, r0
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	0019      	movs	r1, r3
 8008cac:	0010      	movs	r0, r2
 8008cae:	f7fa fe4f 	bl	8003950 <setPMs>
  return 0;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b009      	add	sp, #36	@ 0x24
 8008cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cbc <sen5x_measurement>:

int16_t sen5x_measurement(void) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
  // Read Measurement
  int16_t error = 0;
 8008cc2:	1dbb      	adds	r3, r7, #6
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	801a      	strh	r2, [r3, #0]
//  Debug("entering sen5x_measurement");
    if (sen5x_read_measurement(&sen5x_data)) {
 8008cc8:	4b6b      	ldr	r3, [pc, #428]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008cca:	0018      	movs	r0, r3
 8008ccc:	f7ff ff92 	bl	8008bf4 <sen5x_read_measurement>
 8008cd0:	1e03      	subs	r3, r0, #0
 8008cd2:	d008      	beq.n	8008ce6 <sen5x_measurement+0x2a>
      Error("Error executing sen5x_read_measured_values(): %i", error);
 8008cd4:	1dbb      	adds	r3, r7, #6
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	5e9b      	ldrsh	r3, [r3, r2]
 8008cda:	4a68      	ldr	r2, [pc, #416]	@ (8008e7c <sen5x_measurement+0x1c0>)
 8008cdc:	4968      	ldr	r1, [pc, #416]	@ (8008e80 <sen5x_measurement+0x1c4>)
 8008cde:	2001      	movs	r0, #1
 8008ce0:	f004 fbbc 	bl	800d45c <CreateLine>
 8008ce4:	e0c1      	b.n	8008e6a <sen5x_measurement+0x1ae>
    }
    else {
      if (sen5xSamples == 0) {
 8008ce6:	4b67      	ldr	r3, [pc, #412]	@ (8008e84 <sen5x_measurement+0x1c8>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <sen5x_measurement+0x36>
      return 0; // first sample reads zero's
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e0be      	b.n	8008e70 <sen5x_measurement+0x1b4>
    }
    printf("Mass concentration pm1p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm1p0 / 10.0f);
 8008cf2:	4b61      	ldr	r3, [pc, #388]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f7f8 fc6a 	bl	80015d0 <__aeabi_i2f>
 8008cfc:	1c03      	adds	r3, r0, #0
 8008cfe:	4962      	ldr	r1, [pc, #392]	@ (8008e88 <sen5x_measurement+0x1cc>)
 8008d00:	1c18      	adds	r0, r3, #0
 8008d02:	f7f7 ff67 	bl	8000bd4 <__aeabi_fdiv>
 8008d06:	1c03      	adds	r3, r0, #0
 8008d08:	1c18      	adds	r0, r3, #0
 8008d0a:	f7fa fbab 	bl	8003464 <__aeabi_f2d>
 8008d0e:	0002      	movs	r2, r0
 8008d10:	000b      	movs	r3, r1
 8008d12:	495e      	ldr	r1, [pc, #376]	@ (8008e8c <sen5x_measurement+0x1d0>)
 8008d14:	0008      	movs	r0, r1
 8008d16:	f015 ff8f 	bl	801ec38 <iprintf>
    printf("Mass concentration pm2p5: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm2p5 / 10.0f);
 8008d1a:	4b57      	ldr	r3, [pc, #348]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008d1c:	885b      	ldrh	r3, [r3, #2]
 8008d1e:	0018      	movs	r0, r3
 8008d20:	f7f8 fc56 	bl	80015d0 <__aeabi_i2f>
 8008d24:	1c03      	adds	r3, r0, #0
 8008d26:	4958      	ldr	r1, [pc, #352]	@ (8008e88 <sen5x_measurement+0x1cc>)
 8008d28:	1c18      	adds	r0, r3, #0
 8008d2a:	f7f7 ff53 	bl	8000bd4 <__aeabi_fdiv>
 8008d2e:	1c03      	adds	r3, r0, #0
 8008d30:	1c18      	adds	r0, r3, #0
 8008d32:	f7fa fb97 	bl	8003464 <__aeabi_f2d>
 8008d36:	0002      	movs	r2, r0
 8008d38:	000b      	movs	r3, r1
 8008d3a:	4955      	ldr	r1, [pc, #340]	@ (8008e90 <sen5x_measurement+0x1d4>)
 8008d3c:	0008      	movs	r0, r1
 8008d3e:	f015 ff7b 	bl	801ec38 <iprintf>
    printf("Mass concentration pm4p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm4p0 / 10.0f);
 8008d42:	4b4d      	ldr	r3, [pc, #308]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008d44:	889b      	ldrh	r3, [r3, #4]
 8008d46:	0018      	movs	r0, r3
 8008d48:	f7f8 fc42 	bl	80015d0 <__aeabi_i2f>
 8008d4c:	1c03      	adds	r3, r0, #0
 8008d4e:	494e      	ldr	r1, [pc, #312]	@ (8008e88 <sen5x_measurement+0x1cc>)
 8008d50:	1c18      	adds	r0, r3, #0
 8008d52:	f7f7 ff3f 	bl	8000bd4 <__aeabi_fdiv>
 8008d56:	1c03      	adds	r3, r0, #0
 8008d58:	1c18      	adds	r0, r3, #0
 8008d5a:	f7fa fb83 	bl	8003464 <__aeabi_f2d>
 8008d5e:	0002      	movs	r2, r0
 8008d60:	000b      	movs	r3, r1
 8008d62:	494c      	ldr	r1, [pc, #304]	@ (8008e94 <sen5x_measurement+0x1d8>)
 8008d64:	0008      	movs	r0, r1
 8008d66:	f015 ff67 	bl	801ec38 <iprintf>
    printf("Mass concentration pm10p0: %.1f µg/m³\r\n", sen5x_data.mass_concentration_pm10p0 / 10.0f);
 8008d6a:	4b43      	ldr	r3, [pc, #268]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008d6c:	88db      	ldrh	r3, [r3, #6]
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7f8 fc2e 	bl	80015d0 <__aeabi_i2f>
 8008d74:	1c03      	adds	r3, r0, #0
 8008d76:	4944      	ldr	r1, [pc, #272]	@ (8008e88 <sen5x_measurement+0x1cc>)
 8008d78:	1c18      	adds	r0, r3, #0
 8008d7a:	f7f7 ff2b 	bl	8000bd4 <__aeabi_fdiv>
 8008d7e:	1c03      	adds	r3, r0, #0
 8008d80:	1c18      	adds	r0, r3, #0
 8008d82:	f7fa fb6f 	bl	8003464 <__aeabi_f2d>
 8008d86:	0002      	movs	r2, r0
 8008d88:	000b      	movs	r3, r1
 8008d8a:	4943      	ldr	r1, [pc, #268]	@ (8008e98 <sen5x_measurement+0x1dc>)
 8008d8c:	0008      	movs	r0, r1
 8008d8e:	f015 ff53 	bl	801ec38 <iprintf>
    if (sen5x_data.ambient_humidity != 0x7fff) {
 8008d92:	4b39      	ldr	r3, [pc, #228]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008d94:	2208      	movs	r2, #8
 8008d96:	5e9b      	ldrsh	r3, [r3, r2]
 8008d98:	4a40      	ldr	r2, [pc, #256]	@ (8008e9c <sen5x_measurement+0x1e0>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d014      	beq.n	8008dc8 <sen5x_measurement+0x10c>
      printf("Ambient humidity: %.1f %%RH\r\n", sen5x_data.ambient_humidity / 100.0f);
 8008d9e:	4b36      	ldr	r3, [pc, #216]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008da0:	2208      	movs	r2, #8
 8008da2:	5e9b      	ldrsh	r3, [r3, r2]
 8008da4:	0018      	movs	r0, r3
 8008da6:	f7f8 fc13 	bl	80015d0 <__aeabi_i2f>
 8008daa:	1c03      	adds	r3, r0, #0
 8008dac:	493c      	ldr	r1, [pc, #240]	@ (8008ea0 <sen5x_measurement+0x1e4>)
 8008dae:	1c18      	adds	r0, r3, #0
 8008db0:	f7f7 ff10 	bl	8000bd4 <__aeabi_fdiv>
 8008db4:	1c03      	adds	r3, r0, #0
 8008db6:	1c18      	adds	r0, r3, #0
 8008db8:	f7fa fb54 	bl	8003464 <__aeabi_f2d>
 8008dbc:	0002      	movs	r2, r0
 8008dbe:	000b      	movs	r3, r1
 8008dc0:	4938      	ldr	r1, [pc, #224]	@ (8008ea4 <sen5x_measurement+0x1e8>)
 8008dc2:	0008      	movs	r0, r1
 8008dc4:	f015 ff38 	bl	801ec38 <iprintf>
    }
    if (sen5x_data.ambient_temperature != 0x7fff) {
 8008dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008dca:	220a      	movs	r2, #10
 8008dcc:	5e9b      	ldrsh	r3, [r3, r2]
 8008dce:	4a33      	ldr	r2, [pc, #204]	@ (8008e9c <sen5x_measurement+0x1e0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d014      	beq.n	8008dfe <sen5x_measurement+0x142>
      printf("Ambient temperature: %.1f °C\r\n", sen5x_data.ambient_temperature / 200.0f);
 8008dd4:	4b28      	ldr	r3, [pc, #160]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008dd6:	220a      	movs	r2, #10
 8008dd8:	5e9b      	ldrsh	r3, [r3, r2]
 8008dda:	0018      	movs	r0, r3
 8008ddc:	f7f8 fbf8 	bl	80015d0 <__aeabi_i2f>
 8008de0:	1c03      	adds	r3, r0, #0
 8008de2:	4931      	ldr	r1, [pc, #196]	@ (8008ea8 <sen5x_measurement+0x1ec>)
 8008de4:	1c18      	adds	r0, r3, #0
 8008de6:	f7f7 fef5 	bl	8000bd4 <__aeabi_fdiv>
 8008dea:	1c03      	adds	r3, r0, #0
 8008dec:	1c18      	adds	r0, r3, #0
 8008dee:	f7fa fb39 	bl	8003464 <__aeabi_f2d>
 8008df2:	0002      	movs	r2, r0
 8008df4:	000b      	movs	r3, r1
 8008df6:	492d      	ldr	r1, [pc, #180]	@ (8008eac <sen5x_measurement+0x1f0>)
 8008df8:	0008      	movs	r0, r1
 8008dfa:	f015 ff1d 	bl	801ec38 <iprintf>
    }
    if (sen5x_data.voc_index != 0x7fff) {
 8008dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008e00:	220c      	movs	r2, #12
 8008e02:	5e9b      	ldrsh	r3, [r3, r2]
 8008e04:	4a25      	ldr	r2, [pc, #148]	@ (8008e9c <sen5x_measurement+0x1e0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d014      	beq.n	8008e34 <sen5x_measurement+0x178>
      printf("Voc index: %.1f\r\n", sen5x_data.voc_index / 10.0f);
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008e0c:	220c      	movs	r2, #12
 8008e0e:	5e9b      	ldrsh	r3, [r3, r2]
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7f8 fbdd 	bl	80015d0 <__aeabi_i2f>
 8008e16:	1c03      	adds	r3, r0, #0
 8008e18:	491b      	ldr	r1, [pc, #108]	@ (8008e88 <sen5x_measurement+0x1cc>)
 8008e1a:	1c18      	adds	r0, r3, #0
 8008e1c:	f7f7 feda 	bl	8000bd4 <__aeabi_fdiv>
 8008e20:	1c03      	adds	r3, r0, #0
 8008e22:	1c18      	adds	r0, r3, #0
 8008e24:	f7fa fb1e 	bl	8003464 <__aeabi_f2d>
 8008e28:	0002      	movs	r2, r0
 8008e2a:	000b      	movs	r3, r1
 8008e2c:	4920      	ldr	r1, [pc, #128]	@ (8008eb0 <sen5x_measurement+0x1f4>)
 8008e2e:	0008      	movs	r0, r1
 8008e30:	f015 ff02 	bl	801ec38 <iprintf>
    }
    if (sen5x_data.nox_index != 0x7fff) {
 8008e34:	4b10      	ldr	r3, [pc, #64]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008e36:	220e      	movs	r2, #14
 8008e38:	5e9b      	ldrsh	r3, [r3, r2]
 8008e3a:	4a18      	ldr	r2, [pc, #96]	@ (8008e9c <sen5x_measurement+0x1e0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d014      	beq.n	8008e6a <sen5x_measurement+0x1ae>
      printf("Nox index: %.1f\r\n", sen5x_data.nox_index / 10.0f);
 8008e40:	4b0d      	ldr	r3, [pc, #52]	@ (8008e78 <sen5x_measurement+0x1bc>)
 8008e42:	220e      	movs	r2, #14
 8008e44:	5e9b      	ldrsh	r3, [r3, r2]
 8008e46:	0018      	movs	r0, r3
 8008e48:	f7f8 fbc2 	bl	80015d0 <__aeabi_i2f>
 8008e4c:	1c03      	adds	r3, r0, #0
 8008e4e:	490e      	ldr	r1, [pc, #56]	@ (8008e88 <sen5x_measurement+0x1cc>)
 8008e50:	1c18      	adds	r0, r3, #0
 8008e52:	f7f7 febf 	bl	8000bd4 <__aeabi_fdiv>
 8008e56:	1c03      	adds	r3, r0, #0
 8008e58:	1c18      	adds	r0, r3, #0
 8008e5a:	f7fa fb03 	bl	8003464 <__aeabi_f2d>
 8008e5e:	0002      	movs	r2, r0
 8008e60:	000b      	movs	r3, r1
 8008e62:	4914      	ldr	r1, [pc, #80]	@ (8008eb4 <sen5x_measurement+0x1f8>)
 8008e64:	0008      	movs	r0, r1
 8008e66:	f015 fee7 	bl	801ec38 <iprintf>
    }
  }
  return error;
 8008e6a:	1dbb      	adds	r3, r7, #6
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b002      	add	sp, #8
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	200011ec 	.word	0x200011ec
 8008e7c:	080230a8 	.word	0x080230a8
 8008e80:	08022ef0 	.word	0x08022ef0
 8008e84:	200011e8 	.word	0x200011e8
 8008e88:	41200000 	.word	0x41200000
 8008e8c:	080230dc 	.word	0x080230dc
 8008e90:	08023108 	.word	0x08023108
 8008e94:	08023134 	.word	0x08023134
 8008e98:	08023160 	.word	0x08023160
 8008e9c:	00007fff 	.word	0x00007fff
 8008ea0:	42c80000 	.word	0x42c80000
 8008ea4:	0802318c 	.word	0x0802318c
 8008ea8:	43480000 	.word	0x43480000
 8008eac:	080231ac 	.word	0x080231ac
 8008eb0:	080231cc 	.word	0x080231cc
 8008eb4:	080231e0 	.word	0x080231e0

08008eb8 <sensirion_i2c_hal_read>:
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8008eb8:	b590      	push	{r4, r7, lr}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af02      	add	r7, sp, #8
 8008ebe:	6039      	str	r1, [r7, #0]
 8008ec0:	0011      	movs	r1, r2
 8008ec2:	1dfb      	adds	r3, r7, #7
 8008ec4:	1c02      	adds	r2, r0, #0
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	1d3b      	adds	r3, r7, #4
 8008eca:	1c0a      	adds	r2, r1, #0
 8008ecc:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1), data, count, 100);
 8008ece:	1dfb      	adds	r3, r7, #7
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	18db      	adds	r3, r3, r3
 8008ed6:	b299      	uxth	r1, r3
 8008ed8:	1d3b      	adds	r3, r7, #4
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	4805      	ldr	r0, [pc, #20]	@ (8008ef4 <sensirion_i2c_hal_read+0x3c>)
 8008ee0:	2464      	movs	r4, #100	@ 0x64
 8008ee2:	9400      	str	r4, [sp, #0]
 8008ee4:	f006 faaa 	bl	800f43c <HAL_I2C_Master_Receive>
 8008ee8:	0003      	movs	r3, r0
 8008eea:	b25b      	sxtb	r3, r3
}
 8008eec:	0018      	movs	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	b003      	add	sp, #12
 8008ef2:	bd90      	pop	{r4, r7, pc}
 8008ef4:	20000d94 	.word	0x20000d94

08008ef8 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint16_t count) {
 8008ef8:	b590      	push	{r4, r7, lr}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	6039      	str	r1, [r7, #0]
 8008f00:	0011      	movs	r1, r2
 8008f02:	1dfb      	adds	r3, r7, #7
 8008f04:	1c02      	adds	r2, r0, #0
 8008f06:	701a      	strb	r2, [r3, #0]
 8008f08:	1d3b      	adds	r3, r7, #4
 8008f0a:	1c0a      	adds	r2, r1, #0
 8008f0c:	801a      	strh	r2, [r3, #0]
  return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8008f0e:	1dfb      	adds	r3, r7, #7
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	18db      	adds	r3, r3, r3
 8008f16:	b299      	uxth	r1, r3
 8008f18:	1d3b      	adds	r3, r7, #4
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	4805      	ldr	r0, [pc, #20]	@ (8008f34 <sensirion_i2c_hal_write+0x3c>)
 8008f20:	2464      	movs	r4, #100	@ 0x64
 8008f22:	9400      	str	r4, [sp, #0]
 8008f24:	f006 f982 	bl	800f22c <HAL_I2C_Master_Transmit>
 8008f28:	0003      	movs	r3, r0
 8008f2a:	b25b      	sxtb	r3, r3
}
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	b003      	add	sp, #12
 8008f32:	bd90      	pop	{r4, r7, pc}
 8008f34:	20000d94 	.word	0x20000d94

08008f38 <sensirion_i2c_hal_sleep_usec>:
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint32_t msec = useconds / 1000;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	22fa      	movs	r2, #250	@ 0xfa
 8008f44:	0091      	lsls	r1, r2, #2
 8008f46:	0018      	movs	r0, r3
 8008f48:	f7f7 f92c 	bl	80001a4 <__udivsi3>
 8008f4c:	0003      	movs	r3, r0
 8008f4e:	60fb      	str	r3, [r7, #12]
  if (useconds % 1000 > 0) {
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	22fa      	movs	r2, #250	@ 0xfa
 8008f54:	0091      	lsls	r1, r2, #2
 8008f56:	0018      	movs	r0, r3
 8008f58:	f7f7 f9aa 	bl	80002b0 <__aeabi_uidivmod>
 8008f5c:	1e0b      	subs	r3, r1, #0
 8008f5e:	d002      	beq.n	8008f66 <sensirion_i2c_hal_sleep_usec+0x2e>
    msec++;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3301      	adds	r3, #1
 8008f64:	60fb      	str	r3, [r7, #12]
  }
  HAL_Delay(msec);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f004 fe1f 	bl	800dbac <HAL_Delay>
}
 8008f6e:	46c0      	nop			@ (mov r8, r8)
 8008f70:	46bd      	mov	sp, r7
 8008f72:	b004      	add	sp, #16
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <sen5x_check_for_errors>:

bool sen5x_check_for_errors(void){
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
  uint32_t device_status = 0;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	607b      	str	r3, [r7, #4]
  if (sen5x_read_device_status(&device_status)) {
 8008f82:	1d3b      	adds	r3, r7, #4
 8008f84:	0018      	movs	r0, r3
 8008f86:	f000 fc85 	bl	8009894 <sen5x_read_device_status>
 8008f8a:	1e03      	subs	r3, r0, #0
 8008f8c:	d007      	beq.n	8008f9e <sen5x_check_for_errors+0x26>
    Error("Error reading sen5x device status register");
 8008f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800903c <sen5x_check_for_errors+0xc4>)
 8008f90:	4b2b      	ldr	r3, [pc, #172]	@ (8009040 <sen5x_check_for_errors+0xc8>)
 8008f92:	0019      	movs	r1, r3
 8008f94:	2001      	movs	r0, #1
 8008f96:	f004 fa61 	bl	800d45c <CreateLine>
//    device_status = SEN5X_NO_RESPONSE;
    return 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e049      	b.n	8009032 <sen5x_check_for_errors+0xba>
  }
  if (device_status == 0) {
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d107      	bne.n	8008fb4 <sen5x_check_for_errors+0x3c>
    Debug("sen5x operates normal");
 8008fa4:	4a27      	ldr	r2, [pc, #156]	@ (8009044 <sen5x_check_for_errors+0xcc>)
 8008fa6:	4b28      	ldr	r3, [pc, #160]	@ (8009048 <sen5x_check_for_errors+0xd0>)
 8008fa8:	0019      	movs	r1, r3
 8008faa:	2003      	movs	r0, #3
 8008fac:	f004 fa56 	bl	800d45c <CreateLine>
    return 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	e03e      	b.n	8009032 <sen5x_check_for_errors+0xba>
  }
  if (device_status & SEN5X_FAN_SPEED_ERROR) {
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	2380      	movs	r3, #128	@ 0x80
 8008fb8:	039b      	lsls	r3, r3, #14
 8008fba:	4013      	ands	r3, r2
 8008fbc:	d005      	beq.n	8008fca <sen5x_check_for_errors+0x52>
    Debug("sen5x Fan speed out of range");
 8008fbe:	4a23      	ldr	r2, [pc, #140]	@ (800904c <sen5x_check_for_errors+0xd4>)
 8008fc0:	4b21      	ldr	r3, [pc, #132]	@ (8009048 <sen5x_check_for_errors+0xd0>)
 8008fc2:	0019      	movs	r1, r3
 8008fc4:	2003      	movs	r0, #3
 8008fc6:	f004 fa49 	bl	800d45c <CreateLine>
  }
  if (device_status & SEN5X_FAN_CLEANING) {
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	2380      	movs	r3, #128	@ 0x80
 8008fce:	031b      	lsls	r3, r3, #12
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	d005      	beq.n	8008fe0 <sen5x_check_for_errors+0x68>
    Debug("sen5x Fan cleaning active");
 8008fd4:	4a1e      	ldr	r2, [pc, #120]	@ (8009050 <sen5x_check_for_errors+0xd8>)
 8008fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8009048 <sen5x_check_for_errors+0xd0>)
 8008fd8:	0019      	movs	r1, r3
 8008fda:	2003      	movs	r0, #3
 8008fdc:	f004 fa3e 	bl	800d45c <CreateLine>
  }
  if (device_status & SEN5X_GAS_SENSOR_ERROR) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2280      	movs	r2, #128	@ 0x80
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	d005      	beq.n	8008ff4 <sen5x_check_for_errors+0x7c>
    Debug("sen5x Gas sensor error (VOC & NOx)");
 8008fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8009054 <sen5x_check_for_errors+0xdc>)
 8008fea:	4b17      	ldr	r3, [pc, #92]	@ (8009048 <sen5x_check_for_errors+0xd0>)
 8008fec:	0019      	movs	r1, r3
 8008fee:	2003      	movs	r0, #3
 8008ff0:	f004 fa34 	bl	800d45c <CreateLine>
  }
  if (device_status & SEN5X_RHT_ERROR) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2240      	movs	r2, #64	@ 0x40
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	d005      	beq.n	8009008 <sen5x_check_for_errors+0x90>
    Debug("sen5x RHT communication error");
 8008ffc:	4a16      	ldr	r2, [pc, #88]	@ (8009058 <sen5x_check_for_errors+0xe0>)
 8008ffe:	4b12      	ldr	r3, [pc, #72]	@ (8009048 <sen5x_check_for_errors+0xd0>)
 8009000:	0019      	movs	r1, r3
 8009002:	2003      	movs	r0, #3
 8009004:	f004 fa2a 	bl	800d45c <CreateLine>
  }
  if (device_status & SEN5X_LASER_ERROR) {
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	4013      	ands	r3, r2
 800900e:	d005      	beq.n	800901c <sen5x_check_for_errors+0xa4>
    Debug("sen5x Laser failure");
 8009010:	4a12      	ldr	r2, [pc, #72]	@ (800905c <sen5x_check_for_errors+0xe4>)
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <sen5x_check_for_errors+0xd0>)
 8009014:	0019      	movs	r1, r3
 8009016:	2003      	movs	r0, #3
 8009018:	f004 fa20 	bl	800d45c <CreateLine>
  }
  if (device_status & SEN5X_FAN_BLOCKED_ERROR) {
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2210      	movs	r2, #16
 8009020:	4013      	ands	r3, r2
 8009022:	d005      	beq.n	8009030 <sen5x_check_for_errors+0xb8>
    Debug("sen5x Fan failure, fan is mechanically blocked or broken.");
 8009024:	4a0e      	ldr	r2, [pc, #56]	@ (8009060 <sen5x_check_for_errors+0xe8>)
 8009026:	4b08      	ldr	r3, [pc, #32]	@ (8009048 <sen5x_check_for_errors+0xd0>)
 8009028:	0019      	movs	r1, r3
 800902a:	2003      	movs	r0, #3
 800902c:	f004 fa16 	bl	800d45c <CreateLine>
  }
  return 1;
 8009030:	2301      	movs	r3, #1
}
 8009032:	0018      	movs	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	b002      	add	sp, #8
 8009038:	bd80      	pop	{r7, pc}
 800903a:	46c0      	nop			@ (mov r8, r8)
 800903c:	080231f4 	.word	0x080231f4
 8009040:	08022ef0 	.word	0x08022ef0
 8009044:	08023220 	.word	0x08023220
 8009048:	08022e88 	.word	0x08022e88
 800904c:	08023238 	.word	0x08023238
 8009050:	08023258 	.word	0x08023258
 8009054:	08023274 	.word	0x08023274
 8009058:	08023298 	.word	0x08023298
 800905c:	080232b8 	.word	0x080232b8
 8009060:	080232cc 	.word	0x080232cc

08009064 <set_light_on_state>:

void set_light_on_state(void) {
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
  sen5x_Power_On();
 8009068:	f7ff fc1c 	bl	80088a4 <sen5x_Power_On>
  Debug("sen5x powered on, warming up for 30 sec.");
 800906c:	4a0a      	ldr	r2, [pc, #40]	@ (8009098 <set_light_on_state+0x34>)
 800906e:	4b0b      	ldr	r3, [pc, #44]	@ (800909c <set_light_on_state+0x38>)
 8009070:	0019      	movs	r1, r3
 8009072:	2003      	movs	r0, #3
 8009074:	f004 f9f2 	bl	800d45c <CreateLine>
  if (sen5x_lightup_measurement()) {
 8009078:	f7ff fd74 	bl	8008b64 <sen5x_lightup_measurement>
 800907c:	1e03      	subs	r3, r0, #0
 800907e:	d005      	beq.n	800908c <set_light_on_state+0x28>
    Error("Error executing sen5x_lightup_measurement()");
 8009080:	4a07      	ldr	r2, [pc, #28]	@ (80090a0 <set_light_on_state+0x3c>)
 8009082:	4b08      	ldr	r3, [pc, #32]	@ (80090a4 <set_light_on_state+0x40>)
 8009084:	0019      	movs	r1, r3
 8009086:	2001      	movs	r0, #1
 8009088:	f004 f9e8 	bl	800d45c <CreateLine>
  }
  samplesState = CHECK_SEN5X;
 800908c:	4b06      	ldr	r3, [pc, #24]	@ (80090a8 <set_light_on_state+0x44>)
 800908e:	2203      	movs	r2, #3
 8009090:	701a      	strb	r2, [r3, #0]
}
 8009092:	46c0      	nop			@ (mov r8, r8)
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	08023308 	.word	0x08023308
 800909c:	08022e88 	.word	0x08022e88
 80090a0:	08023334 	.word	0x08023334
 80090a4:	08022ef0 	.word	0x08022ef0
 80090a8:	20000080 	.word	0x20000080

080090ac <sen5x_statemachine>:

void sen5x_statemachine(uint8_t delayfactor) {
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	0002      	movs	r2, r0
 80090b4:	1dfb      	adds	r3, r7, #7
 80090b6:	701a      	strb	r2, [r3, #0]
  bool data_ready = false;
 80090b8:	230f      	movs	r3, #15
 80090ba:	18fb      	adds	r3, r7, r3
 80090bc:	2200      	movs	r2, #0
 80090be:	701a      	strb	r2, [r3, #0]
  if (delayfactor == USB_PLUGGED_IN) {
 80090c0:	1dfb      	adds	r3, r7, #7
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d103      	bne.n	80090d0 <sen5x_statemachine+0x24>
    delayfactor =100; // if operated on USB read about every 30 seconds
 80090c8:	1dfb      	adds	r3, r7, #7
 80090ca:	2264      	movs	r2, #100	@ 0x64
 80090cc:	701a      	strb	r2, [r3, #0]
 80090ce:	e002      	b.n	80090d6 <sen5x_statemachine+0x2a>
  }
  else {
    delayfactor = 1;
 80090d0:	1dfb      	adds	r3, r7, #7
 80090d2:	2201      	movs	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
  }
  if (TimestampIsReached(sen5xReadTimer)) {
 80090d6:	4b67      	ldr	r3, [pc, #412]	@ (8009274 <sen5x_statemachine+0x1c8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	0018      	movs	r0, r3
 80090dc:	f004 f968 	bl	800d3b0 <TimestampIsReached>
 80090e0:	1e03      	subs	r3, r0, #0
 80090e2:	d100      	bne.n	80090e6 <sen5x_statemachine+0x3a>
 80090e4:	e0c2      	b.n	800926c <sen5x_statemachine+0x1c0>
    switch (samplesState) {
 80090e6:	4b64      	ldr	r3, [pc, #400]	@ (8009278 <sen5x_statemachine+0x1cc>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2b05      	cmp	r3, #5
 80090ec:	d900      	bls.n	80090f0 <sen5x_statemachine+0x44>
 80090ee:	e0bd      	b.n	800926c <sen5x_statemachine+0x1c0>
 80090f0:	009a      	lsls	r2, r3, #2
 80090f2:	4b62      	ldr	r3, [pc, #392]	@ (800927c <sen5x_statemachine+0x1d0>)
 80090f4:	18d3      	adds	r3, r2, r3
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	469f      	mov	pc, r3
    case S5X_DISABLED:
      Error("sen5x device is disabled due to too many errors");
 80090fa:	4a61      	ldr	r2, [pc, #388]	@ (8009280 <sen5x_statemachine+0x1d4>)
 80090fc:	4b61      	ldr	r3, [pc, #388]	@ (8009284 <sen5x_statemachine+0x1d8>)
 80090fe:	0019      	movs	r1, r3
 8009100:	2001      	movs	r0, #1
 8009102:	f004 f9ab 	bl	800d45c <CreateLine>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8009106:	f004 fd47 	bl	800db98 <HAL_GetTick>
 800910a:	0004      	movs	r4, r0
 800910c:	1dfb      	adds	r3, r7, #7
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	0019      	movs	r1, r3
 8009112:	485d      	ldr	r0, [pc, #372]	@ (8009288 <sen5x_statemachine+0x1dc>)
 8009114:	f7f7 f8d0 	bl	80002b8 <__divsi3>
 8009118:	0003      	movs	r3, r0
 800911a:	18e2      	adds	r2, r4, r3
 800911c:	4b55      	ldr	r3, [pc, #340]	@ (8009274 <sen5x_statemachine+0x1c8>)
 800911e:	601a      	str	r2, [r3, #0]
      break;
 8009120:	e0a4      	b.n	800926c <sen5x_statemachine+0x1c0>
    case LIGHT_OUT:
//      Debug(" state is LIGHT_OUT");
      set_light_on_state();
 8009122:	f7ff ff9f 	bl	8009064 <set_light_on_state>
      sen5xReadTimer = HAL_GetTick() + 28000;
 8009126:	f004 fd37 	bl	800db98 <HAL_GetTick>
 800912a:	0003      	movs	r3, r0
 800912c:	4a57      	ldr	r2, [pc, #348]	@ (800928c <sen5x_statemachine+0x1e0>)
 800912e:	189a      	adds	r2, r3, r2
 8009130:	4b50      	ldr	r3, [pc, #320]	@ (8009274 <sen5x_statemachine+0x1c8>)
 8009132:	601a      	str	r2, [r3, #0]
      break;
 8009134:	e09a      	b.n	800926c <sen5x_statemachine+0x1c0>
    case CHECK_SEN5X:
      samplesState = LIGHT_ON;
 8009136:	4b50      	ldr	r3, [pc, #320]	@ (8009278 <sen5x_statemachine+0x1cc>)
 8009138:	2202      	movs	r2, #2
 800913a:	701a      	strb	r2, [r3, #0]
      if (sen5xErrors > 5) {
 800913c:	4b54      	ldr	r3, [pc, #336]	@ (8009290 <sen5x_statemachine+0x1e4>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b05      	cmp	r3, #5
 8009142:	d905      	bls.n	8009150 <sen5x_statemachine+0xa4>
        samplesState = S5X_DISABLED;
 8009144:	4b4c      	ldr	r3, [pc, #304]	@ (8009278 <sen5x_statemachine+0x1cc>)
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
        sen5x_Power_Off();
 800914a:	f7ff fbcb 	bl	80088e4 <sen5x_Power_Off>
          }
          sen5xErrors++;
          sen5xReadTimer = HAL_GetTick() + 150;
        }
      }
      break;
 800914e:	e08c      	b.n	800926a <sen5x_statemachine+0x1be>
        if (sen5x_check_for_errors()) {
 8009150:	f7ff ff12 	bl	8008f78 <sen5x_check_for_errors>
 8009154:	1e03      	subs	r3, r0, #0
 8009156:	d100      	bne.n	800915a <sen5x_statemachine+0xae>
 8009158:	e087      	b.n	800926a <sen5x_statemachine+0x1be>
          if (sen5x_device_reset()) {
 800915a:	f000 fbed 	bl	8009938 <sen5x_device_reset>
 800915e:	1e03      	subs	r3, r0, #0
 8009160:	d006      	beq.n	8009170 <sen5x_statemachine+0xc4>
            Error("Error resetting sen5x");
 8009162:	4a4c      	ldr	r2, [pc, #304]	@ (8009294 <sen5x_statemachine+0x1e8>)
 8009164:	4b47      	ldr	r3, [pc, #284]	@ (8009284 <sen5x_statemachine+0x1d8>)
 8009166:	0019      	movs	r1, r3
 8009168:	2001      	movs	r0, #1
 800916a:	f004 f977 	bl	800d45c <CreateLine>
 800916e:	e005      	b.n	800917c <sen5x_statemachine+0xd0>
            Info("sen5x reset executed");
 8009170:	4a49      	ldr	r2, [pc, #292]	@ (8009298 <sen5x_statemachine+0x1ec>)
 8009172:	4b4a      	ldr	r3, [pc, #296]	@ (800929c <sen5x_statemachine+0x1f0>)
 8009174:	0019      	movs	r1, r3
 8009176:	2002      	movs	r0, #2
 8009178:	f004 f970 	bl	800d45c <CreateLine>
          sen5xErrors++;
 800917c:	4b44      	ldr	r3, [pc, #272]	@ (8009290 <sen5x_statemachine+0x1e4>)
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	3301      	adds	r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	4b42      	ldr	r3, [pc, #264]	@ (8009290 <sen5x_statemachine+0x1e4>)
 8009186:	701a      	strb	r2, [r3, #0]
          sen5xReadTimer = HAL_GetTick() + 150;
 8009188:	f004 fd06 	bl	800db98 <HAL_GetTick>
 800918c:	0003      	movs	r3, r0
 800918e:	3396      	adds	r3, #150	@ 0x96
 8009190:	001a      	movs	r2, r3
 8009192:	4b38      	ldr	r3, [pc, #224]	@ (8009274 <sen5x_statemachine+0x1c8>)
 8009194:	601a      	str	r2, [r3, #0]
      break;
 8009196:	e068      	b.n	800926a <sen5x_statemachine+0x1be>
    case LIGHT_ON:
//      Debug(" state is LIGHT_ON");
      sen5x_read_data_ready(&data_ready);  // is new data ready?
 8009198:	240f      	movs	r4, #15
 800919a:	193b      	adds	r3, r7, r4
 800919c:	0018      	movs	r0, r3
 800919e:	f000 f8e7 	bl	8009370 <sen5x_read_data_ready>
      if (data_ready) {
 80091a2:	193b      	adds	r3, r7, r4
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d026      	beq.n	80091f8 <sen5x_statemachine+0x14c>
        if (sen5x_measurement()) {
 80091aa:	f7ff fd87 	bl	8008cbc <sen5x_measurement>
 80091ae:	1e03      	subs	r3, r0, #0
 80091b0:	d005      	beq.n	80091be <sen5x_statemachine+0x112>
          Error("Error executing sen5x_measurement()");
 80091b2:	4a3b      	ldr	r2, [pc, #236]	@ (80092a0 <sen5x_statemachine+0x1f4>)
 80091b4:	4b33      	ldr	r3, [pc, #204]	@ (8009284 <sen5x_statemachine+0x1d8>)
 80091b6:	0019      	movs	r1, r3
 80091b8:	2001      	movs	r0, #1
 80091ba:	f004 f94f 	bl	800d45c <CreateLine>
        }
        if (sen5xSamples >= 1) { // take 2 samples, show 1 sample
 80091be:	4b39      	ldr	r3, [pc, #228]	@ (80092a4 <sen5x_statemachine+0x1f8>)
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d012      	beq.n	80091ec <sen5x_statemachine+0x140>
          if ((RTC_GetWeekday() == 1) && !fanCleaningDone) {
 80091c6:	f7fd fa01 	bl	80065cc <RTC_GetWeekday>
 80091ca:	0003      	movs	r3, r0
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d10a      	bne.n	80091e6 <sen5x_statemachine+0x13a>
 80091d0:	4b35      	ldr	r3, [pc, #212]	@ (80092a8 <sen5x_statemachine+0x1fc>)
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2201      	movs	r2, #1
 80091d6:	4053      	eors	r3, r2
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <sen5x_statemachine+0x13a>
            samplesState = CLEAN_FAN;
 80091de:	4b26      	ldr	r3, [pc, #152]	@ (8009278 <sen5x_statemachine+0x1cc>)
 80091e0:	2204      	movs	r2, #4
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	e002      	b.n	80091ec <sen5x_statemachine+0x140>
          }
          else {
            samplesState = SAMPLES_TAKEN;
 80091e6:	4b24      	ldr	r3, [pc, #144]	@ (8009278 <sen5x_statemachine+0x1cc>)
 80091e8:	2205      	movs	r2, #5
 80091ea:	701a      	strb	r2, [r3, #0]
          }
        }
        sen5xSamples++;
 80091ec:	4b2d      	ldr	r3, [pc, #180]	@ (80092a4 <sen5x_statemachine+0x1f8>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	4b2b      	ldr	r3, [pc, #172]	@ (80092a4 <sen5x_statemachine+0x1f8>)
 80091f6:	701a      	strb	r2, [r3, #0]
      }
      sen5xReadTimer = HAL_GetTick() + 1000;
 80091f8:	f004 fcce 	bl	800db98 <HAL_GetTick>
 80091fc:	0003      	movs	r3, r0
 80091fe:	22fa      	movs	r2, #250	@ 0xfa
 8009200:	0092      	lsls	r2, r2, #2
 8009202:	189a      	adds	r2, r3, r2
 8009204:	4b1b      	ldr	r3, [pc, #108]	@ (8009274 <sen5x_statemachine+0x1c8>)
 8009206:	601a      	str	r2, [r3, #0]
      break;
 8009208:	e030      	b.n	800926c <sen5x_statemachine+0x1c0>
    case CLEAN_FAN:
      // start the cleaning procedure once a week
      sen5x_start_fan_cleaning();
 800920a:	f000 f997 	bl	800953c <sen5x_start_fan_cleaning>
      sen5xReadTimer = HAL_GetTick() + 11000;
 800920e:	f004 fcc3 	bl	800db98 <HAL_GetTick>
 8009212:	0003      	movs	r3, r0
 8009214:	4a25      	ldr	r2, [pc, #148]	@ (80092ac <sen5x_statemachine+0x200>)
 8009216:	189a      	adds	r2, r3, r2
 8009218:	4b16      	ldr	r3, [pc, #88]	@ (8009274 <sen5x_statemachine+0x1c8>)
 800921a:	601a      	str	r2, [r3, #0]
      fanCleaningDone = true;
 800921c:	4b22      	ldr	r3, [pc, #136]	@ (80092a8 <sen5x_statemachine+0x1fc>)
 800921e:	2201      	movs	r2, #1
 8009220:	701a      	strb	r2, [r3, #0]
      samplesState = SAMPLES_TAKEN;
 8009222:	4b15      	ldr	r3, [pc, #84]	@ (8009278 <sen5x_statemachine+0x1cc>)
 8009224:	2205      	movs	r2, #5
 8009226:	701a      	strb	r2, [r3, #0]
      break;
 8009228:	e020      	b.n	800926c <sen5x_statemachine+0x1c0>

    case SAMPLES_TAKEN:
//      Debug(" state is SAMPLES_TAKEN");
      sen5xSamples = 0;
 800922a:	4b1e      	ldr	r3, [pc, #120]	@ (80092a4 <sen5x_statemachine+0x1f8>)
 800922c:	2200      	movs	r2, #0
 800922e:	701a      	strb	r2, [r3, #0]
      if (sen5x_extinguish_measurement()) {
 8009230:	f7ff fcbc 	bl	8008bac <sen5x_extinguish_measurement>
 8009234:	1e03      	subs	r3, r0, #0
 8009236:	d005      	beq.n	8009244 <sen5x_statemachine+0x198>
        Error("Error executing sen5x_extinguish_measurement()");
 8009238:	4a1d      	ldr	r2, [pc, #116]	@ (80092b0 <sen5x_statemachine+0x204>)
 800923a:	4b12      	ldr	r3, [pc, #72]	@ (8009284 <sen5x_statemachine+0x1d8>)
 800923c:	0019      	movs	r1, r3
 800923e:	2001      	movs	r0, #1
 8009240:	f004 f90c 	bl	800d45c <CreateLine>
      }
      sen5x_Power_Off();
 8009244:	f7ff fb4e 	bl	80088e4 <sen5x_Power_Off>
      sen5xReadTimer = HAL_GetTick() + (3141592 / delayfactor); //some more less then an hour
 8009248:	f004 fca6 	bl	800db98 <HAL_GetTick>
 800924c:	0004      	movs	r4, r0
 800924e:	1dfb      	adds	r3, r7, #7
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	0019      	movs	r1, r3
 8009254:	480c      	ldr	r0, [pc, #48]	@ (8009288 <sen5x_statemachine+0x1dc>)
 8009256:	f7f7 f82f 	bl	80002b8 <__divsi3>
 800925a:	0003      	movs	r3, r0
 800925c:	18e2      	adds	r2, r4, r3
 800925e:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <sen5x_statemachine+0x1c8>)
 8009260:	601a      	str	r2, [r3, #0]
      samplesState = LIGHT_OUT;
 8009262:	4b05      	ldr	r3, [pc, #20]	@ (8009278 <sen5x_statemachine+0x1cc>)
 8009264:	2201      	movs	r2, #1
 8009266:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8009268:	e000      	b.n	800926c <sen5x_statemachine+0x1c0>
      break;
 800926a:	46c0      	nop			@ (mov r8, r8)
}
 800926c:	46c0      	nop			@ (mov r8, r8)
 800926e:	46bd      	mov	sp, r7
 8009270:	b005      	add	sp, #20
 8009272:	bd90      	pop	{r4, r7, pc}
 8009274:	200011e4 	.word	0x200011e4
 8009278:	20000080 	.word	0x20000080
 800927c:	08023b8c 	.word	0x08023b8c
 8009280:	08023360 	.word	0x08023360
 8009284:	08022ef0 	.word	0x08022ef0
 8009288:	002fefd8 	.word	0x002fefd8
 800928c:	00006d60 	.word	0x00006d60
 8009290:	200011e9 	.word	0x200011e9
 8009294:	08023390 	.word	0x08023390
 8009298:	080233a8 	.word	0x080233a8
 800929c:	08023044 	.word	0x08023044
 80092a0:	080233c0 	.word	0x080233c0
 80092a4:	200011e8 	.word	0x200011e8
 80092a8:	200011e0 	.word	0x200011e0
 80092ac:	00002af8 	.word	0x00002af8
 80092b0:	080233e4 	.word	0x080233e4

080092b4 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "main.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80092b4:	b590      	push	{r4, r7, lr}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80092ba:	1dbb      	adds	r3, r7, #6
 80092bc:	2200      	movs	r2, #0
 80092be:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 80092c0:	1dbc      	adds	r4, r7, #6
 80092c2:	1dbb      	adds	r3, r7, #6
 80092c4:	8819      	ldrh	r1, [r3, #0]
 80092c6:	003b      	movs	r3, r7
 80092c8:	2221      	movs	r2, #33	@ 0x21
 80092ca:	0018      	movs	r0, r3
 80092cc:	f001 fb28 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 80092d0:	0003      	movs	r3, r0
 80092d2:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80092d4:	1d3c      	adds	r4, r7, #4
 80092d6:	1dbb      	adds	r3, r7, #6
 80092d8:	881a      	ldrh	r2, [r3, #0]
 80092da:	003b      	movs	r3, r7
 80092dc:	0019      	movs	r1, r3
 80092de:	2069      	movs	r0, #105	@ 0x69
 80092e0:	f001 fba2 	bl	800aa28 <sensirion_i2c_write_data>
 80092e4:	0003      	movs	r3, r0
 80092e6:	8023      	strh	r3, [r4, #0]
    if (error) {
 80092e8:	1d3b      	adds	r3, r7, #4
 80092ea:	2200      	movs	r2, #0
 80092ec:	5e9b      	ldrsh	r3, [r3, r2]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <sen5x_start_measurement+0x46>
        return error;
 80092f2:	1d3b      	adds	r3, r7, #4
 80092f4:	2200      	movs	r2, #0
 80092f6:	5e9b      	ldrsh	r3, [r3, r2]
 80092f8:	e004      	b.n	8009304 <sen5x_start_measurement+0x50>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 80092fa:	4b04      	ldr	r3, [pc, #16]	@ (800930c <sen5x_start_measurement+0x58>)
 80092fc:	0018      	movs	r0, r3
 80092fe:	f7ff fe1b 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009302:	2300      	movs	r3, #0
}
 8009304:	0018      	movs	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	b003      	add	sp, #12
 800930a:	bd90      	pop	{r4, r7, pc}
 800930c:	0000c350 	.word	0x0000c350

08009310 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 8009310:	b590      	push	{r4, r7, lr}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009316:	1dbb      	adds	r3, r7, #6
 8009318:	2200      	movs	r2, #0
 800931a:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 800931c:	1dbc      	adds	r4, r7, #6
 800931e:	2382      	movs	r3, #130	@ 0x82
 8009320:	005a      	lsls	r2, r3, #1
 8009322:	1dbb      	adds	r3, r7, #6
 8009324:	8819      	ldrh	r1, [r3, #0]
 8009326:	003b      	movs	r3, r7
 8009328:	0018      	movs	r0, r3
 800932a:	f001 faf9 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 800932e:	0003      	movs	r3, r0
 8009330:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009332:	1d3c      	adds	r4, r7, #4
 8009334:	1dbb      	adds	r3, r7, #6
 8009336:	881a      	ldrh	r2, [r3, #0]
 8009338:	003b      	movs	r3, r7
 800933a:	0019      	movs	r1, r3
 800933c:	2069      	movs	r0, #105	@ 0x69
 800933e:	f001 fb73 	bl	800aa28 <sensirion_i2c_write_data>
 8009342:	0003      	movs	r3, r0
 8009344:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009346:	1d3b      	adds	r3, r7, #4
 8009348:	2200      	movs	r2, #0
 800934a:	5e9b      	ldrsh	r3, [r3, r2]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <sen5x_stop_measurement+0x48>
        return error;
 8009350:	1d3b      	adds	r3, r7, #4
 8009352:	2200      	movs	r2, #0
 8009354:	5e9b      	ldrsh	r3, [r3, r2]
 8009356:	e004      	b.n	8009362 <sen5x_stop_measurement+0x52>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8009358:	4b04      	ldr	r3, [pc, #16]	@ (800936c <sen5x_stop_measurement+0x5c>)
 800935a:	0018      	movs	r0, r3
 800935c:	f7ff fdec 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009360:	2300      	movs	r3, #0
}
 8009362:	0018      	movs	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	b003      	add	sp, #12
 8009368:	bd90      	pop	{r4, r7, pc}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	00030d40 	.word	0x00030d40

08009370 <sen5x_read_data_ready>:

int16_t sen5x_read_data_ready(bool* data_ready) {
 8009370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[3];
    uint16_t offset = 0;
 8009378:	250e      	movs	r5, #14
 800937a:	197b      	adds	r3, r7, r5
 800937c:	2200      	movs	r2, #0
 800937e:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x202);
 8009380:	197c      	adds	r4, r7, r5
 8009382:	4a22      	ldr	r2, [pc, #136]	@ (800940c <sen5x_read_data_ready+0x9c>)
 8009384:	197b      	adds	r3, r7, r5
 8009386:	8819      	ldrh	r1, [r3, #0]
 8009388:	2308      	movs	r3, #8
 800938a:	18fb      	adds	r3, r7, r3
 800938c:	0018      	movs	r0, r3
 800938e:	f001 fac7 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 8009392:	0003      	movs	r3, r0
 8009394:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009396:	260c      	movs	r6, #12
 8009398:	19bc      	adds	r4, r7, r6
 800939a:	197b      	adds	r3, r7, r5
 800939c:	881a      	ldrh	r2, [r3, #0]
 800939e:	2308      	movs	r3, #8
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	0019      	movs	r1, r3
 80093a4:	2069      	movs	r0, #105	@ 0x69
 80093a6:	f001 fb3f 	bl	800aa28 <sensirion_i2c_write_data>
 80093aa:	0003      	movs	r3, r0
 80093ac:	8023      	strh	r3, [r4, #0]
    if (error) {
 80093ae:	19bb      	adds	r3, r7, r6
 80093b0:	2200      	movs	r2, #0
 80093b2:	5e9b      	ldrsh	r3, [r3, r2]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d003      	beq.n	80093c0 <sen5x_read_data_ready+0x50>
        return error;
 80093b8:	19bb      	adds	r3, r7, r6
 80093ba:	2200      	movs	r2, #0
 80093bc:	5e9b      	ldrsh	r3, [r3, r2]
 80093be:	e020      	b.n	8009402 <sen5x_read_data_ready+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80093c0:	4b13      	ldr	r3, [pc, #76]	@ (8009410 <sen5x_read_data_ready+0xa0>)
 80093c2:	0018      	movs	r0, r3
 80093c4:	f7ff fdb8 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 2);
 80093c8:	250c      	movs	r5, #12
 80093ca:	197c      	adds	r4, r7, r5
 80093cc:	2308      	movs	r3, #8
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	2202      	movs	r2, #2
 80093d2:	0019      	movs	r1, r3
 80093d4:	2069      	movs	r0, #105	@ 0x69
 80093d6:	f001 fb3f 	bl	800aa58 <sensirion_i2c_read_data_inplace>
 80093da:	0003      	movs	r3, r0
 80093dc:	8023      	strh	r3, [r4, #0]
    if (error) {
 80093de:	197b      	adds	r3, r7, r5
 80093e0:	2200      	movs	r2, #0
 80093e2:	5e9b      	ldrsh	r3, [r3, r2]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d003      	beq.n	80093f0 <sen5x_read_data_ready+0x80>
        return error;
 80093e8:	197b      	adds	r3, r7, r5
 80093ea:	2200      	movs	r2, #0
 80093ec:	5e9b      	ldrsh	r3, [r3, r2]
 80093ee:	e008      	b.n	8009402 <sen5x_read_data_ready+0x92>
    }
    *data_ready = buffer[1];
 80093f0:	2308      	movs	r3, #8
 80093f2:	18fb      	adds	r3, r7, r3
 80093f4:	785b      	ldrb	r3, [r3, #1]
 80093f6:	1e5a      	subs	r2, r3, #1
 80093f8:	4193      	sbcs	r3, r2
 80093fa:	b2da      	uxtb	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009400:	2300      	movs	r3, #0
}
 8009402:	0018      	movs	r0, r3
 8009404:	46bd      	mov	sp, r7
 8009406:	b005      	add	sp, #20
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940a:	46c0      	nop			@ (mov r8, r8)
 800940c:	00000202 	.word	0x00000202
 8009410:	00004e20 	.word	0x00004e20

08009414 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	b08d      	sub	sp, #52	@ 0x34
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8009422:	252e      	movs	r5, #46	@ 0x2e
 8009424:	197b      	adds	r3, r7, r5
 8009426:	2200      	movs	r2, #0
 8009428:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800942a:	197c      	adds	r4, r7, r5
 800942c:	23f1      	movs	r3, #241	@ 0xf1
 800942e:	009a      	lsls	r2, r3, #2
 8009430:	197b      	adds	r3, r7, r5
 8009432:	8819      	ldrh	r1, [r3, #0]
 8009434:	2314      	movs	r3, #20
 8009436:	18fb      	adds	r3, r7, r3
 8009438:	0018      	movs	r0, r3
 800943a:	f001 fa71 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 800943e:	0003      	movs	r3, r0
 8009440:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009442:	262c      	movs	r6, #44	@ 0x2c
 8009444:	19bc      	adds	r4, r7, r6
 8009446:	197b      	adds	r3, r7, r5
 8009448:	881a      	ldrh	r2, [r3, #0]
 800944a:	2314      	movs	r3, #20
 800944c:	18fb      	adds	r3, r7, r3
 800944e:	0019      	movs	r1, r3
 8009450:	2069      	movs	r0, #105	@ 0x69
 8009452:	f001 fae9 	bl	800aa28 <sensirion_i2c_write_data>
 8009456:	0003      	movs	r3, r0
 8009458:	8023      	strh	r3, [r4, #0]
    if (error) {
 800945a:	19bb      	adds	r3, r7, r6
 800945c:	2200      	movs	r2, #0
 800945e:	5e9b      	ldrsh	r3, [r3, r2]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d003      	beq.n	800946c <sen5x_read_measured_values+0x58>
        return error;
 8009464:	19bb      	adds	r3, r7, r6
 8009466:	2200      	movs	r2, #0
 8009468:	5e9b      	ldrsh	r3, [r3, r2]
 800946a:	e060      	b.n	800952e <sen5x_read_measured_values+0x11a>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800946c:	4b32      	ldr	r3, [pc, #200]	@ (8009538 <sen5x_read_measured_values+0x124>)
 800946e:	0018      	movs	r0, r3
 8009470:	f7ff fd62 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8009474:	252c      	movs	r5, #44	@ 0x2c
 8009476:	197c      	adds	r4, r7, r5
 8009478:	2314      	movs	r3, #20
 800947a:	18fb      	adds	r3, r7, r3
 800947c:	2210      	movs	r2, #16
 800947e:	0019      	movs	r1, r3
 8009480:	2069      	movs	r0, #105	@ 0x69
 8009482:	f001 fae9 	bl	800aa58 <sensirion_i2c_read_data_inplace>
 8009486:	0003      	movs	r3, r0
 8009488:	8023      	strh	r3, [r4, #0]
    if (error) {
 800948a:	197b      	adds	r3, r7, r5
 800948c:	2200      	movs	r2, #0
 800948e:	5e9b      	ldrsh	r3, [r3, r2]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d003      	beq.n	800949c <sen5x_read_measured_values+0x88>
        return error;
 8009494:	197b      	adds	r3, r7, r5
 8009496:	2200      	movs	r2, #0
 8009498:	5e9b      	ldrsh	r3, [r3, r2]
 800949a:	e048      	b.n	800952e <sen5x_read_measured_values+0x11a>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 800949c:	2414      	movs	r4, #20
 800949e:	193b      	adds	r3, r7, r4
 80094a0:	0018      	movs	r0, r3
 80094a2:	f000 fa79 	bl	8009998 <sensirion_common_bytes_to_uint16_t>
 80094a6:	0003      	movs	r3, r0
 80094a8:	001a      	movs	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80094ae:	193b      	adds	r3, r7, r4
 80094b0:	3302      	adds	r3, #2
 80094b2:	0018      	movs	r0, r3
 80094b4:	f000 fa70 	bl	8009998 <sensirion_common_bytes_to_uint16_t>
 80094b8:	0003      	movs	r3, r0
 80094ba:	001a      	movs	r2, r3
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80094c0:	193b      	adds	r3, r7, r4
 80094c2:	3304      	adds	r3, #4
 80094c4:	0018      	movs	r0, r3
 80094c6:	f000 fa67 	bl	8009998 <sensirion_common_bytes_to_uint16_t>
 80094ca:	0003      	movs	r3, r0
 80094cc:	001a      	movs	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 80094d2:	193b      	adds	r3, r7, r4
 80094d4:	3306      	adds	r3, #6
 80094d6:	0018      	movs	r0, r3
 80094d8:	f000 fa5e 	bl	8009998 <sensirion_common_bytes_to_uint16_t>
 80094dc:	0003      	movs	r3, r0
 80094de:	001a      	movs	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 80094e4:	193b      	adds	r3, r7, r4
 80094e6:	3308      	adds	r3, #8
 80094e8:	0018      	movs	r0, r3
 80094ea:	f000 fa81 	bl	80099f0 <sensirion_common_bytes_to_int16_t>
 80094ee:	0003      	movs	r3, r0
 80094f0:	001a      	movs	r2, r3
 80094f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094f4:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 80094f6:	193b      	adds	r3, r7, r4
 80094f8:	330a      	adds	r3, #10
 80094fa:	0018      	movs	r0, r3
 80094fc:	f000 fa78 	bl	80099f0 <sensirion_common_bytes_to_int16_t>
 8009500:	0003      	movs	r3, r0
 8009502:	001a      	movs	r2, r3
 8009504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009506:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8009508:	193b      	adds	r3, r7, r4
 800950a:	330c      	adds	r3, #12
 800950c:	0018      	movs	r0, r3
 800950e:	f000 fa6f 	bl	80099f0 <sensirion_common_bytes_to_int16_t>
 8009512:	0003      	movs	r3, r0
 8009514:	001a      	movs	r2, r3
 8009516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009518:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 800951a:	193b      	adds	r3, r7, r4
 800951c:	330e      	adds	r3, #14
 800951e:	0018      	movs	r0, r3
 8009520:	f000 fa66 	bl	80099f0 <sensirion_common_bytes_to_int16_t>
 8009524:	0003      	movs	r3, r0
 8009526:	001a      	movs	r2, r3
 8009528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800952a:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 800952c:	2300      	movs	r3, #0
}
 800952e:	0018      	movs	r0, r3
 8009530:	46bd      	mov	sp, r7
 8009532:	b00d      	add	sp, #52	@ 0x34
 8009534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009536:	46c0      	nop			@ (mov r8, r8)
 8009538:	00004e20 	.word	0x00004e20

0800953c <sen5x_start_fan_cleaning>:
        sensirion_common_bytes_to_uint16_t(&buffer[16]);
    *typical_particle_size = sensirion_common_bytes_to_uint16_t(&buffer[18]);
    return NO_ERROR;
}

int16_t sen5x_start_fan_cleaning(void) {
 800953c:	b590      	push	{r4, r7, lr}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8009542:	1dbb      	adds	r3, r7, #6
 8009544:	2200      	movs	r2, #0
 8009546:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x5607);
 8009548:	1dbc      	adds	r4, r7, #6
 800954a:	4a12      	ldr	r2, [pc, #72]	@ (8009594 <sen5x_start_fan_cleaning+0x58>)
 800954c:	1dbb      	adds	r3, r7, #6
 800954e:	8819      	ldrh	r1, [r3, #0]
 8009550:	003b      	movs	r3, r7
 8009552:	0018      	movs	r0, r3
 8009554:	f001 f9e4 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 8009558:	0003      	movs	r3, r0
 800955a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800955c:	1d3c      	adds	r4, r7, #4
 800955e:	1dbb      	adds	r3, r7, #6
 8009560:	881a      	ldrh	r2, [r3, #0]
 8009562:	003b      	movs	r3, r7
 8009564:	0019      	movs	r1, r3
 8009566:	2069      	movs	r0, #105	@ 0x69
 8009568:	f001 fa5e 	bl	800aa28 <sensirion_i2c_write_data>
 800956c:	0003      	movs	r3, r0
 800956e:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009570:	1d3b      	adds	r3, r7, #4
 8009572:	2200      	movs	r2, #0
 8009574:	5e9b      	ldrsh	r3, [r3, r2]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d003      	beq.n	8009582 <sen5x_start_fan_cleaning+0x46>
        return error;
 800957a:	1d3b      	adds	r3, r7, #4
 800957c:	2200      	movs	r2, #0
 800957e:	5e9b      	ldrsh	r3, [r3, r2]
 8009580:	e004      	b.n	800958c <sen5x_start_fan_cleaning+0x50>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009582:	4b05      	ldr	r3, [pc, #20]	@ (8009598 <sen5x_start_fan_cleaning+0x5c>)
 8009584:	0018      	movs	r0, r3
 8009586:	f7ff fcd7 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800958a:	2300      	movs	r3, #0
}
 800958c:	0018      	movs	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	b003      	add	sp, #12
 8009592:	bd90      	pop	{r4, r7, pc}
 8009594:	00005607 	.word	0x00005607
 8009598:	00004e20 	.word	0x00004e20

0800959c <sen5x_set_temperature_offset_parameters>:

int16_t sen5x_set_temperature_offset_parameters(int16_t temp_offset,
                                                int16_t slope,
                                                uint16_t time_constant) {
 800959c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	0004      	movs	r4, r0
 80095a4:	0008      	movs	r0, r1
 80095a6:	0011      	movs	r1, r2
 80095a8:	1dbb      	adds	r3, r7, #6
 80095aa:	1c22      	adds	r2, r4, #0
 80095ac:	801a      	strh	r2, [r3, #0]
 80095ae:	1d3b      	adds	r3, r7, #4
 80095b0:	1c02      	adds	r2, r0, #0
 80095b2:	801a      	strh	r2, [r3, #0]
 80095b4:	1cbb      	adds	r3, r7, #2
 80095b6:	1c0a      	adds	r2, r1, #0
 80095b8:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[11];
    uint16_t offset = 0;
 80095ba:	2516      	movs	r5, #22
 80095bc:	197b      	adds	r3, r7, r5
 80095be:	2200      	movs	r2, #0
 80095c0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x60B2);
 80095c2:	197c      	adds	r4, r7, r5
 80095c4:	4a25      	ldr	r2, [pc, #148]	@ (800965c <sen5x_set_temperature_offset_parameters+0xc0>)
 80095c6:	197b      	adds	r3, r7, r5
 80095c8:	8819      	ldrh	r1, [r3, #0]
 80095ca:	2608      	movs	r6, #8
 80095cc:	19bb      	adds	r3, r7, r6
 80095ce:	0018      	movs	r0, r3
 80095d0:	f001 f9a6 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 80095d4:	0003      	movs	r3, r0
 80095d6:	8023      	strh	r3, [r4, #0]

    offset =
        sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, temp_offset);
 80095d8:	197c      	adds	r4, r7, r5
 80095da:	1dbb      	adds	r3, r7, #6
 80095dc:	2200      	movs	r2, #0
 80095de:	5e9a      	ldrsh	r2, [r3, r2]
 80095e0:	197b      	adds	r3, r7, r5
 80095e2:	8819      	ldrh	r1, [r3, #0]
 80095e4:	19bb      	adds	r3, r7, r6
 80095e6:	0018      	movs	r0, r3
 80095e8:	f001 fa05 	bl	800a9f6 <sensirion_i2c_add_int16_t_to_buffer>
 80095ec:	0003      	movs	r3, r0
 80095ee:	8023      	strh	r3, [r4, #0]
    offset = sensirion_i2c_add_int16_t_to_buffer(&buffer[0], offset, slope);
 80095f0:	197c      	adds	r4, r7, r5
 80095f2:	1d3b      	adds	r3, r7, #4
 80095f4:	2200      	movs	r2, #0
 80095f6:	5e9a      	ldrsh	r2, [r3, r2]
 80095f8:	197b      	adds	r3, r7, r5
 80095fa:	8819      	ldrh	r1, [r3, #0]
 80095fc:	19bb      	adds	r3, r7, r6
 80095fe:	0018      	movs	r0, r3
 8009600:	f001 f9f9 	bl	800a9f6 <sensirion_i2c_add_int16_t_to_buffer>
 8009604:	0003      	movs	r3, r0
 8009606:	8023      	strh	r3, [r4, #0]
    offset =
        sensirion_i2c_add_uint16_t_to_buffer(&buffer[0], offset, time_constant);
 8009608:	197c      	adds	r4, r7, r5
 800960a:	1cbb      	adds	r3, r7, #2
 800960c:	881a      	ldrh	r2, [r3, #0]
 800960e:	197b      	adds	r3, r7, r5
 8009610:	8819      	ldrh	r1, [r3, #0]
 8009612:	19bb      	adds	r3, r7, r6
 8009614:	0018      	movs	r0, r3
 8009616:	f001 f9af 	bl	800a978 <sensirion_i2c_add_uint16_t_to_buffer>
 800961a:	0003      	movs	r3, r0
 800961c:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800961e:	2214      	movs	r2, #20
 8009620:	18bc      	adds	r4, r7, r2
 8009622:	197b      	adds	r3, r7, r5
 8009624:	881a      	ldrh	r2, [r3, #0]
 8009626:	19bb      	adds	r3, r7, r6
 8009628:	0019      	movs	r1, r3
 800962a:	2069      	movs	r0, #105	@ 0x69
 800962c:	f001 f9fc 	bl	800aa28 <sensirion_i2c_write_data>
 8009630:	0003      	movs	r3, r0
 8009632:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009634:	2214      	movs	r2, #20
 8009636:	18bb      	adds	r3, r7, r2
 8009638:	2100      	movs	r1, #0
 800963a:	5e5b      	ldrsh	r3, [r3, r1]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <sen5x_set_temperature_offset_parameters+0xac>
        return error;
 8009640:	18bb      	adds	r3, r7, r2
 8009642:	2200      	movs	r2, #0
 8009644:	5e9b      	ldrsh	r3, [r3, r2]
 8009646:	e004      	b.n	8009652 <sen5x_set_temperature_offset_parameters+0xb6>
    }
    sensirion_i2c_hal_sleep_usec(20000);
 8009648:	4b05      	ldr	r3, [pc, #20]	@ (8009660 <sen5x_set_temperature_offset_parameters+0xc4>)
 800964a:	0018      	movs	r0, r3
 800964c:	f7ff fc74 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009650:	2300      	movs	r3, #0
}
 8009652:	0018      	movs	r0, r3
 8009654:	46bd      	mov	sp, r7
 8009656:	b007      	add	sp, #28
 8009658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800965a:	46c0      	nop			@ (mov r8, r8)
 800965c:	000060b2 	.word	0x000060b2
 8009660:	00004e20 	.word	0x00004e20

08009664 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8009664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009666:	b091      	sub	sp, #68	@ 0x44
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	000a      	movs	r2, r1
 800966e:	1cfb      	adds	r3, r7, #3
 8009670:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8009672:	253e      	movs	r5, #62	@ 0x3e
 8009674:	197b      	adds	r3, r7, r5
 8009676:	2200      	movs	r2, #0
 8009678:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 800967a:	197c      	adds	r4, r7, r5
 800967c:	4a22      	ldr	r2, [pc, #136]	@ (8009708 <sen5x_get_product_name+0xa4>)
 800967e:	197b      	adds	r3, r7, r5
 8009680:	8819      	ldrh	r1, [r3, #0]
 8009682:	230c      	movs	r3, #12
 8009684:	18fb      	adds	r3, r7, r3
 8009686:	0018      	movs	r0, r3
 8009688:	f001 f94a 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 800968c:	0003      	movs	r3, r0
 800968e:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009690:	263c      	movs	r6, #60	@ 0x3c
 8009692:	19bc      	adds	r4, r7, r6
 8009694:	197b      	adds	r3, r7, r5
 8009696:	881a      	ldrh	r2, [r3, #0]
 8009698:	230c      	movs	r3, #12
 800969a:	18fb      	adds	r3, r7, r3
 800969c:	0019      	movs	r1, r3
 800969e:	2069      	movs	r0, #105	@ 0x69
 80096a0:	f001 f9c2 	bl	800aa28 <sensirion_i2c_write_data>
 80096a4:	0003      	movs	r3, r0
 80096a6:	8023      	strh	r3, [r4, #0]
    if (error) {
 80096a8:	19bb      	adds	r3, r7, r6
 80096aa:	2200      	movs	r2, #0
 80096ac:	5e9b      	ldrsh	r3, [r3, r2]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d003      	beq.n	80096ba <sen5x_get_product_name+0x56>
        return error;
 80096b2:	19bb      	adds	r3, r7, r6
 80096b4:	2200      	movs	r2, #0
 80096b6:	5e9b      	ldrsh	r3, [r3, r2]
 80096b8:	e021      	b.n	80096fe <sen5x_get_product_name+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 80096ba:	4b14      	ldr	r3, [pc, #80]	@ (800970c <sen5x_get_product_name+0xa8>)
 80096bc:	0018      	movs	r0, r3
 80096be:	f7ff fc3b 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 80096c2:	253c      	movs	r5, #60	@ 0x3c
 80096c4:	197c      	adds	r4, r7, r5
 80096c6:	230c      	movs	r3, #12
 80096c8:	18fb      	adds	r3, r7, r3
 80096ca:	2220      	movs	r2, #32
 80096cc:	0019      	movs	r1, r3
 80096ce:	2069      	movs	r0, #105	@ 0x69
 80096d0:	f001 f9c2 	bl	800aa58 <sensirion_i2c_read_data_inplace>
 80096d4:	0003      	movs	r3, r0
 80096d6:	8023      	strh	r3, [r4, #0]
    if (error) {
 80096d8:	197b      	adds	r3, r7, r5
 80096da:	2200      	movs	r2, #0
 80096dc:	5e9b      	ldrsh	r3, [r3, r2]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d003      	beq.n	80096ea <sen5x_get_product_name+0x86>
        return error;
 80096e2:	197b      	adds	r3, r7, r5
 80096e4:	2200      	movs	r2, #0
 80096e6:	5e9b      	ldrsh	r3, [r3, r2]
 80096e8:	e009      	b.n	80096fe <sen5x_get_product_name+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 80096ea:	1cfb      	adds	r3, r7, #3
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6879      	ldr	r1, [r7, #4]
 80096f2:	230c      	movs	r3, #12
 80096f4:	18fb      	adds	r3, r7, r3
 80096f6:	0018      	movs	r0, r3
 80096f8:	f000 f988 	bl	8009a0c <sensirion_common_copy_bytes>
    return NO_ERROR;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	0018      	movs	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	b011      	add	sp, #68	@ 0x44
 8009704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009706:	46c0      	nop			@ (mov r8, r8)
 8009708:	0000d014 	.word	0x0000d014
 800970c:	0000c350 	.word	0x0000c350

08009710 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8009710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009712:	b091      	sub	sp, #68	@ 0x44
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	000a      	movs	r2, r1
 800971a:	1cfb      	adds	r3, r7, #3
 800971c:	701a      	strb	r2, [r3, #0]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 800971e:	253e      	movs	r5, #62	@ 0x3e
 8009720:	197b      	adds	r3, r7, r5
 8009722:	2200      	movs	r2, #0
 8009724:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8009726:	197c      	adds	r4, r7, r5
 8009728:	4a22      	ldr	r2, [pc, #136]	@ (80097b4 <sen5x_get_serial_number+0xa4>)
 800972a:	197b      	adds	r3, r7, r5
 800972c:	8819      	ldrh	r1, [r3, #0]
 800972e:	230c      	movs	r3, #12
 8009730:	18fb      	adds	r3, r7, r3
 8009732:	0018      	movs	r0, r3
 8009734:	f001 f8f4 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 8009738:	0003      	movs	r3, r0
 800973a:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800973c:	263c      	movs	r6, #60	@ 0x3c
 800973e:	19bc      	adds	r4, r7, r6
 8009740:	197b      	adds	r3, r7, r5
 8009742:	881a      	ldrh	r2, [r3, #0]
 8009744:	230c      	movs	r3, #12
 8009746:	18fb      	adds	r3, r7, r3
 8009748:	0019      	movs	r1, r3
 800974a:	2069      	movs	r0, #105	@ 0x69
 800974c:	f001 f96c 	bl	800aa28 <sensirion_i2c_write_data>
 8009750:	0003      	movs	r3, r0
 8009752:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009754:	19bb      	adds	r3, r7, r6
 8009756:	2200      	movs	r2, #0
 8009758:	5e9b      	ldrsh	r3, [r3, r2]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <sen5x_get_serial_number+0x56>
        return error;
 800975e:	19bb      	adds	r3, r7, r6
 8009760:	2200      	movs	r2, #0
 8009762:	5e9b      	ldrsh	r3, [r3, r2]
 8009764:	e021      	b.n	80097aa <sen5x_get_serial_number+0x9a>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8009766:	4b14      	ldr	r3, [pc, #80]	@ (80097b8 <sen5x_get_serial_number+0xa8>)
 8009768:	0018      	movs	r0, r3
 800976a:	f7ff fbe5 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 800976e:	253c      	movs	r5, #60	@ 0x3c
 8009770:	197c      	adds	r4, r7, r5
 8009772:	230c      	movs	r3, #12
 8009774:	18fb      	adds	r3, r7, r3
 8009776:	2220      	movs	r2, #32
 8009778:	0019      	movs	r1, r3
 800977a:	2069      	movs	r0, #105	@ 0x69
 800977c:	f001 f96c 	bl	800aa58 <sensirion_i2c_read_data_inplace>
 8009780:	0003      	movs	r3, r0
 8009782:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009784:	197b      	adds	r3, r7, r5
 8009786:	2200      	movs	r2, #0
 8009788:	5e9b      	ldrsh	r3, [r3, r2]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <sen5x_get_serial_number+0x86>
        return error;
 800978e:	197b      	adds	r3, r7, r5
 8009790:	2200      	movs	r2, #0
 8009792:	5e9b      	ldrsh	r3, [r3, r2]
 8009794:	e009      	b.n	80097aa <sen5x_get_serial_number+0x9a>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8009796:	1cfb      	adds	r3, r7, #3
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	b29a      	uxth	r2, r3
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	230c      	movs	r3, #12
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	0018      	movs	r0, r3
 80097a4:	f000 f932 	bl	8009a0c <sensirion_common_copy_bytes>
    return NO_ERROR;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	0018      	movs	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	b011      	add	sp, #68	@ 0x44
 80097b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b2:	46c0      	nop			@ (mov r8, r8)
 80097b4:	0000d033 	.word	0x0000d033
 80097b8:	0000c350 	.word	0x0000c350

080097bc <sen5x_get_version>:

int16_t sen5x_get_version(uint8_t* firmware_major, uint8_t* firmware_minor,
                          bool* firmware_debug, uint8_t* hardware_major,
                          uint8_t* hardware_minor, uint8_t* protocol_major,
                          uint8_t* protocol_minor) {
 80097bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097be:	b089      	sub	sp, #36	@ 0x24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	607a      	str	r2, [r7, #4]
 80097c8:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[12];
    uint16_t offset = 0;
 80097ca:	251e      	movs	r5, #30
 80097cc:	197b      	adds	r3, r7, r5
 80097ce:	2200      	movs	r2, #0
 80097d0:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD100);
 80097d2:	197c      	adds	r4, r7, r5
 80097d4:	23d1      	movs	r3, #209	@ 0xd1
 80097d6:	021a      	lsls	r2, r3, #8
 80097d8:	197b      	adds	r3, r7, r5
 80097da:	8819      	ldrh	r1, [r3, #0]
 80097dc:	2310      	movs	r3, #16
 80097de:	18fb      	adds	r3, r7, r3
 80097e0:	0018      	movs	r0, r3
 80097e2:	f001 f89d 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 80097e6:	0003      	movs	r3, r0
 80097e8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80097ea:	261c      	movs	r6, #28
 80097ec:	19bc      	adds	r4, r7, r6
 80097ee:	197b      	adds	r3, r7, r5
 80097f0:	881a      	ldrh	r2, [r3, #0]
 80097f2:	2310      	movs	r3, #16
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	0019      	movs	r1, r3
 80097f8:	2069      	movs	r0, #105	@ 0x69
 80097fa:	f001 f915 	bl	800aa28 <sensirion_i2c_write_data>
 80097fe:	0003      	movs	r3, r0
 8009800:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009802:	19bb      	adds	r3, r7, r6
 8009804:	2200      	movs	r2, #0
 8009806:	5e9b      	ldrsh	r3, [r3, r2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <sen5x_get_version+0x58>
        return error;
 800980c:	19bb      	adds	r3, r7, r6
 800980e:	2200      	movs	r2, #0
 8009810:	5e9b      	ldrsh	r3, [r3, r2]
 8009812:	e038      	b.n	8009886 <sen5x_get_version+0xca>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8009814:	4b1e      	ldr	r3, [pc, #120]	@ (8009890 <sen5x_get_version+0xd4>)
 8009816:	0018      	movs	r0, r3
 8009818:	f7ff fb8e 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 8);
 800981c:	251c      	movs	r5, #28
 800981e:	197c      	adds	r4, r7, r5
 8009820:	2310      	movs	r3, #16
 8009822:	18fb      	adds	r3, r7, r3
 8009824:	2208      	movs	r2, #8
 8009826:	0019      	movs	r1, r3
 8009828:	2069      	movs	r0, #105	@ 0x69
 800982a:	f001 f915 	bl	800aa58 <sensirion_i2c_read_data_inplace>
 800982e:	0003      	movs	r3, r0
 8009830:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009832:	197b      	adds	r3, r7, r5
 8009834:	2200      	movs	r2, #0
 8009836:	5e9b      	ldrsh	r3, [r3, r2]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d003      	beq.n	8009844 <sen5x_get_version+0x88>
        return error;
 800983c:	197b      	adds	r3, r7, r5
 800983e:	2200      	movs	r2, #0
 8009840:	5e9b      	ldrsh	r3, [r3, r2]
 8009842:	e020      	b.n	8009886 <sen5x_get_version+0xca>
    }
    *firmware_major = buffer[0];
 8009844:	2110      	movs	r1, #16
 8009846:	187b      	adds	r3, r7, r1
 8009848:	781a      	ldrb	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	701a      	strb	r2, [r3, #0]
    *firmware_minor = buffer[1];
 800984e:	187b      	adds	r3, r7, r1
 8009850:	785a      	ldrb	r2, [r3, #1]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	701a      	strb	r2, [r3, #0]
    *firmware_debug = buffer[2];
 8009856:	187b      	adds	r3, r7, r1
 8009858:	789b      	ldrb	r3, [r3, #2]
 800985a:	1e5a      	subs	r2, r3, #1
 800985c:	4193      	sbcs	r3, r2
 800985e:	b2da      	uxtb	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	701a      	strb	r2, [r3, #0]
    *hardware_major = buffer[3];
 8009864:	187b      	adds	r3, r7, r1
 8009866:	78da      	ldrb	r2, [r3, #3]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	701a      	strb	r2, [r3, #0]
    *hardware_minor = buffer[4];
 800986c:	187b      	adds	r3, r7, r1
 800986e:	791a      	ldrb	r2, [r3, #4]
 8009870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009872:	701a      	strb	r2, [r3, #0]
    *protocol_major = buffer[5];
 8009874:	187b      	adds	r3, r7, r1
 8009876:	795a      	ldrb	r2, [r3, #5]
 8009878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800987a:	701a      	strb	r2, [r3, #0]
    *protocol_minor = buffer[6];
 800987c:	187b      	adds	r3, r7, r1
 800987e:	799a      	ldrb	r2, [r3, #6]
 8009880:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009882:	701a      	strb	r2, [r3, #0]
    return NO_ERROR;
 8009884:	2300      	movs	r3, #0
}
 8009886:	0018      	movs	r0, r3
 8009888:	46bd      	mov	sp, r7
 800988a:	b009      	add	sp, #36	@ 0x24
 800988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988e:	46c0      	nop			@ (mov r8, r8)
 8009890:	00004e20 	.word	0x00004e20

08009894 <sen5x_read_device_status>:

int16_t sen5x_read_device_status(uint32_t* device_status) {
 8009894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
    int16_t error;
    uint8_t buffer[6];
    uint16_t offset = 0;
 800989c:	2516      	movs	r5, #22
 800989e:	197b      	adds	r3, r7, r5
 80098a0:	2200      	movs	r2, #0
 80098a2:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD206);
 80098a4:	197c      	adds	r4, r7, r5
 80098a6:	4a22      	ldr	r2, [pc, #136]	@ (8009930 <sen5x_read_device_status+0x9c>)
 80098a8:	197b      	adds	r3, r7, r5
 80098aa:	8819      	ldrh	r1, [r3, #0]
 80098ac:	230c      	movs	r3, #12
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	0018      	movs	r0, r3
 80098b2:	f001 f835 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 80098b6:	0003      	movs	r3, r0
 80098b8:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80098ba:	2614      	movs	r6, #20
 80098bc:	19bc      	adds	r4, r7, r6
 80098be:	197b      	adds	r3, r7, r5
 80098c0:	881a      	ldrh	r2, [r3, #0]
 80098c2:	230c      	movs	r3, #12
 80098c4:	18fb      	adds	r3, r7, r3
 80098c6:	0019      	movs	r1, r3
 80098c8:	2069      	movs	r0, #105	@ 0x69
 80098ca:	f001 f8ad 	bl	800aa28 <sensirion_i2c_write_data>
 80098ce:	0003      	movs	r3, r0
 80098d0:	8023      	strh	r3, [r4, #0]
    if (error) {
 80098d2:	19bb      	adds	r3, r7, r6
 80098d4:	2200      	movs	r2, #0
 80098d6:	5e9b      	ldrsh	r3, [r3, r2]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <sen5x_read_device_status+0x50>
        return error;
 80098dc:	19bb      	adds	r3, r7, r6
 80098de:	2200      	movs	r2, #0
 80098e0:	5e9b      	ldrsh	r3, [r3, r2]
 80098e2:	e020      	b.n	8009926 <sen5x_read_device_status+0x92>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 80098e4:	4b13      	ldr	r3, [pc, #76]	@ (8009934 <sen5x_read_device_status+0xa0>)
 80098e6:	0018      	movs	r0, r3
 80098e8:	f7ff fb26 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 4);
 80098ec:	2514      	movs	r5, #20
 80098ee:	197c      	adds	r4, r7, r5
 80098f0:	230c      	movs	r3, #12
 80098f2:	18fb      	adds	r3, r7, r3
 80098f4:	2204      	movs	r2, #4
 80098f6:	0019      	movs	r1, r3
 80098f8:	2069      	movs	r0, #105	@ 0x69
 80098fa:	f001 f8ad 	bl	800aa58 <sensirion_i2c_read_data_inplace>
 80098fe:	0003      	movs	r3, r0
 8009900:	8023      	strh	r3, [r4, #0]
    if (error) {
 8009902:	197b      	adds	r3, r7, r5
 8009904:	2200      	movs	r2, #0
 8009906:	5e9b      	ldrsh	r3, [r3, r2]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d003      	beq.n	8009914 <sen5x_read_device_status+0x80>
        return error;
 800990c:	197b      	adds	r3, r7, r5
 800990e:	2200      	movs	r2, #0
 8009910:	5e9b      	ldrsh	r3, [r3, r2]
 8009912:	e008      	b.n	8009926 <sen5x_read_device_status+0x92>
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
 8009914:	230c      	movs	r3, #12
 8009916:	18fb      	adds	r3, r7, r3
 8009918:	0018      	movs	r0, r3
 800991a:	f000 f850 	bl	80099be <sensirion_common_bytes_to_uint32_t>
 800991e:	0002      	movs	r2, r0
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	601a      	str	r2, [r3, #0]
    return NO_ERROR;
 8009924:	2300      	movs	r3, #0
}
 8009926:	0018      	movs	r0, r3
 8009928:	46bd      	mov	sp, r7
 800992a:	b007      	add	sp, #28
 800992c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800992e:	46c0      	nop			@ (mov r8, r8)
 8009930:	0000d206 	.word	0x0000d206
 8009934:	00004e20 	.word	0x00004e20

08009938 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800993e:	1dbb      	adds	r3, r7, #6
 8009940:	2200      	movs	r2, #0
 8009942:	801a      	strh	r2, [r3, #0]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8009944:	1dbc      	adds	r4, r7, #6
 8009946:	4a12      	ldr	r2, [pc, #72]	@ (8009990 <sen5x_device_reset+0x58>)
 8009948:	1dbb      	adds	r3, r7, #6
 800994a:	8819      	ldrh	r1, [r3, #0]
 800994c:	003b      	movs	r3, r7
 800994e:	0018      	movs	r0, r3
 8009950:	f000 ffe6 	bl	800a920 <sensirion_i2c_add_command_to_buffer>
 8009954:	0003      	movs	r3, r0
 8009956:	8023      	strh	r3, [r4, #0]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8009958:	1d3c      	adds	r4, r7, #4
 800995a:	1dbb      	adds	r3, r7, #6
 800995c:	881a      	ldrh	r2, [r3, #0]
 800995e:	003b      	movs	r3, r7
 8009960:	0019      	movs	r1, r3
 8009962:	2069      	movs	r0, #105	@ 0x69
 8009964:	f001 f860 	bl	800aa28 <sensirion_i2c_write_data>
 8009968:	0003      	movs	r3, r0
 800996a:	8023      	strh	r3, [r4, #0]
    if (error) {
 800996c:	1d3b      	adds	r3, r7, #4
 800996e:	2200      	movs	r2, #0
 8009970:	5e9b      	ldrsh	r3, [r3, r2]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d003      	beq.n	800997e <sen5x_device_reset+0x46>
        return error;
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	2200      	movs	r2, #0
 800997a:	5e9b      	ldrsh	r3, [r3, r2]
 800997c:	e004      	b.n	8009988 <sen5x_device_reset+0x50>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800997e:	4b05      	ldr	r3, [pc, #20]	@ (8009994 <sen5x_device_reset+0x5c>)
 8009980:	0018      	movs	r0, r3
 8009982:	f7ff fad9 	bl	8008f38 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8009986:	2300      	movs	r3, #0
}
 8009988:	0018      	movs	r0, r3
 800998a:	46bd      	mov	sp, r7
 800998c:	b003      	add	sp, #12
 800998e:	bd90      	pop	{r4, r7, pc}
 8009990:	0000d304 	.word	0x0000d304
 8009994:	00030d40 	.word	0x00030d40

08009998 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8009998:	b580      	push	{r7, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	b21a      	sxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3301      	adds	r3, #1
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b21b      	sxth	r3, r3
 80099b0:	4313      	orrs	r3, r2
 80099b2:	b21b      	sxth	r3, r3
 80099b4:	b29b      	uxth	r3, r3
}
 80099b6:	0018      	movs	r0, r3
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	bd80      	pop	{r7, pc}

080099be <sensirion_common_bytes_to_uint32_t>:

uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
 80099be:	b580      	push	{r7, lr}
 80099c0:	b082      	sub	sp, #8
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	061a      	lsls	r2, r3, #24
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3301      	adds	r3, #1
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	041b      	lsls	r3, r3, #16
 80099d4:	431a      	orrs	r2, r3
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3302      	adds	r3, #2
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	021b      	lsls	r3, r3, #8
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
 80099de:	4313      	orrs	r3, r2
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	3203      	adds	r2, #3
 80099e4:	7812      	ldrb	r2, [r2, #0]
 80099e6:	4313      	orrs	r3, r2
}
 80099e8:	0018      	movs	r0, r3
 80099ea:	46bd      	mov	sp, r7
 80099ec:	b002      	add	sp, #8
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <sensirion_common_bytes_to_int16_t>:

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	0018      	movs	r0, r3
 80099fc:	f7ff ffcc 	bl	8009998 <sensirion_common_bytes_to_uint16_t>
 8009a00:	0003      	movs	r3, r0
 8009a02:	b21b      	sxth	r3, r3
}
 8009a04:	0018      	movs	r0, r3
 8009a06:	46bd      	mov	sp, r7
 8009a08:	b002      	add	sp, #8
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	1dbb      	adds	r3, r7, #6
 8009a18:	801a      	strh	r2, [r3, #0]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8009a1a:	2316      	movs	r3, #22
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	2200      	movs	r2, #0
 8009a20:	801a      	strh	r2, [r3, #0]
 8009a22:	e00f      	b.n	8009a44 <sensirion_common_copy_bytes+0x38>
        destination[i] = source[i];
 8009a24:	2016      	movs	r0, #22
 8009a26:	183b      	adds	r3, r7, r0
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	18d2      	adds	r2, r2, r3
 8009a2e:	183b      	adds	r3, r7, r0
 8009a30:	881b      	ldrh	r3, [r3, #0]
 8009a32:	68b9      	ldr	r1, [r7, #8]
 8009a34:	18cb      	adds	r3, r1, r3
 8009a36:	7812      	ldrb	r2, [r2, #0]
 8009a38:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8009a3a:	183b      	adds	r3, r7, r0
 8009a3c:	881a      	ldrh	r2, [r3, #0]
 8009a3e:	183b      	adds	r3, r7, r0
 8009a40:	3201      	adds	r2, #1
 8009a42:	801a      	strh	r2, [r3, #0]
 8009a44:	2316      	movs	r3, #22
 8009a46:	18fa      	adds	r2, r7, r3
 8009a48:	1dbb      	adds	r3, r7, #6
 8009a4a:	8812      	ldrh	r2, [r2, #0]
 8009a4c:	881b      	ldrh	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d3e8      	bcc.n	8009a24 <sensirion_common_copy_bytes+0x18>
    }
}
 8009a52:	46c0      	nop			@ (mov r8, r8)
 8009a54:	46c0      	nop			@ (mov r8, r8)
 8009a56:	46bd      	mov	sp, r7
 8009a58:	b006      	add	sp, #24
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	68ba      	ldr	r2, [r7, #8]
 8009a6c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d113      	bne.n	8009aa2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	22fe      	movs	r2, #254	@ 0xfe
 8009a7e:	0592      	lsls	r2, r2, #22
 8009a80:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	4a1a      	ldr	r2, [pc, #104]	@ (8009af0 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8009a86:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8009af4 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8009a8c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	4a19      	ldr	r2, [pc, #100]	@ (8009af8 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8009a92:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	4a19      	ldr	r2, [pc, #100]	@ (8009afc <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8009a98:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4a18      	ldr	r2, [pc, #96]	@ (8009b00 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8009a9e:	61da      	str	r2, [r3, #28]
 8009aa0:	e011      	b.n	8009ac6 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4a17      	ldr	r2, [pc, #92]	@ (8009b04 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8009aa6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	4a17      	ldr	r2, [pc, #92]	@ (8009b08 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8009aac:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	4a16      	ldr	r2, [pc, #88]	@ (8009b0c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8009ab2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4a16      	ldr	r2, [pc, #88]	@ (8009b10 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8009ab8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4a15      	ldr	r2, [pc, #84]	@ (8009b14 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8009abe:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4a15      	ldr	r2, [pc, #84]	@ (8009b18 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8009ac4:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4a14      	ldr	r2, [pc, #80]	@ (8009b1c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8009aca:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4a14      	ldr	r2, [pc, #80]	@ (8009b20 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009ad0:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4a12      	ldr	r2, [pc, #72]	@ (8009b20 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8009ad6:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4a12      	ldr	r2, [pc, #72]	@ (8009b24 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8009adc:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	f000 f833 	bl	8009b4c <GasIndexAlgorithm_reset>
}
 8009ae6:	46c0      	nop			@ (mov r8, r8)
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	b004      	add	sp, #16
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	46c0      	nop			@ (mov r8, r8)
 8009af0:	00002710 	.word	0x00002710
 8009af4:	44340000 	.word	0x44340000
 8009af8:	46859800 	.word	0x46859800
 8009afc:	46a05000 	.word	0x46a05000
 8009b00:	41f00000 	.word	0x41f00000
 8009b04:	42c80000 	.word	0x42c80000
 8009b08:	00004e20 	.word	0x00004e20
 8009b0c:	43340000 	.word	0x43340000
 8009b10:	4528c000 	.word	0x4528c000
 8009b14:	45a32000 	.word	0x45a32000
 8009b18:	43aa0000 	.word	0x43aa0000
 8009b1c:	43660000 	.word	0x43660000
 8009b20:	41400000 	.word	0x41400000
 8009b24:	42480000 	.word	0x42480000

08009b28 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8009b32:	4a05      	ldr	r2, [pc, #20]	@ (8009b48 <GasIndexAlgorithm_init+0x20>)
 8009b34:	6839      	ldr	r1, [r7, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0018      	movs	r0, r3
 8009b3a:	f7ff ff8f 	bl	8009a5c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8009b3e:	46c0      	nop			@ (mov r8, r8)
 8009b40:	46bd      	mov	sp, r7
 8009b42:	b002      	add	sp, #8
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	46c0      	nop			@ (mov r8, r8)
 8009b48:	44610000 	.word	0x44610000

08009b4c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f000 f805 	bl	8009b78 <GasIndexAlgorithm__init_instances>
}
 8009b6e:	46c0      	nop			@ (mov r8, r8)
 8009b70:	46bd      	mov	sp, r7
 8009b72:	b002      	add	sp, #8
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8009b78:	b590      	push	{r4, r7, lr}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	0018      	movs	r0, r3
 8009b84:	f000 f8e8 	bl	8009d58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	0018      	movs	r0, r3
 8009b8c:	f000 f9a6 	bl	8009edc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009b90:	1c04      	adds	r4, r0, #0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	0018      	movs	r0, r3
 8009b96:	f000 f9ab 	bl	8009ef0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009b9a:	1c02      	adds	r2, r0, #0
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	1c21      	adds	r1, r4, #0
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f000 fc3b 	bl	800a41c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	d107      	bne.n	8009bbe <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009bae:	23fe      	movs	r3, #254	@ 0xfe
 8009bb0:	059b      	lsls	r3, r3, #22
 8009bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8009bdc <GasIndexAlgorithm__init_instances+0x64>)
 8009bb4:	490a      	ldr	r1, [pc, #40]	@ (8009be0 <GasIndexAlgorithm__init_instances+0x68>)
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 fc86 	bl	800a4c8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8009bbc:	e005      	b.n	8009bca <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8009bbe:	4b09      	ldr	r3, [pc, #36]	@ (8009be4 <GasIndexAlgorithm__init_instances+0x6c>)
 8009bc0:	4a09      	ldr	r2, [pc, #36]	@ (8009be8 <GasIndexAlgorithm__init_instances+0x70>)
 8009bc2:	490a      	ldr	r1, [pc, #40]	@ (8009bec <GasIndexAlgorithm__init_instances+0x74>)
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fc7f 	bl	800a4c8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	0018      	movs	r0, r3
 8009bce:	f000 fd35 	bl	800a63c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8009bd2:	46c0      	nop			@ (mov r8, r8)
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	b003      	add	sp, #12
 8009bd8:	bd90      	pop	{r4, r7, pc}
 8009bda:	46c0      	nop			@ (mov r8, r8)
 8009bdc:	bc257a78 	.word	0xbc257a78
 8009be0:	44198000 	.word	0x44198000
 8009be4:	42c80000 	.word	0x42c80000
 8009be8:	bbd4fdf4 	.word	0xbbd4fdf4
 8009bec:	43550000 	.word	0x43550000

08009bf0 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8009bf0:	b590      	push	{r4, r7, lr}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c00:	4952      	ldr	r1, [pc, #328]	@ (8009d4c <GasIndexAlgorithm_process+0x15c>)
 8009c02:	1c18      	adds	r0, r3, #0
 8009c04:	f7f6 fc9e 	bl	8000544 <__aeabi_fcmple>
 8009c08:	1e03      	subs	r3, r0, #0
 8009c0a:	d00c      	beq.n	8009c26 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	1c19      	adds	r1, r3, #0
 8009c16:	1c10      	adds	r0, r2, #0
 8009c18:	f7f6 fe52 	bl	80008c0 <__aeabi_fadd>
 8009c1c:	1c03      	adds	r3, r0, #0
 8009c1e:	1c1a      	adds	r2, r3, #0
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c24:	e080      	b.n	8009d28 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dd25      	ble.n	8009c78 <GasIndexAlgorithm_process+0x88>
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	4a48      	ldr	r2, [pc, #288]	@ (8009d50 <GasIndexAlgorithm_process+0x160>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	dc21      	bgt.n	8009c78 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	68ba      	ldr	r2, [r7, #8]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	dc04      	bgt.n	8009c48 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	3301      	adds	r3, #1
 8009c44:	60bb      	str	r3, [r7, #8]
 8009c46:	e00d      	b.n	8009c64 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	4a41      	ldr	r2, [pc, #260]	@ (8009d54 <GasIndexAlgorithm_process+0x164>)
 8009c4e:	4694      	mov	ip, r2
 8009c50:	4463      	add	r3, ip
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	dd05      	ble.n	8009c64 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	4a3d      	ldr	r2, [pc, #244]	@ (8009d54 <GasIndexAlgorithm_process+0x164>)
 8009c5e:	4694      	mov	ip, r2
 8009c60:	4463      	add	r3, ip
 8009c62:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f7f7 fcaf 	bl	80015d0 <__aeabi_i2f>
 8009c72:	1c02      	adds	r2, r0, #0
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d005      	beq.n	8009c8c <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	0018      	movs	r0, r3
 8009c84:	f000 f945 	bl	8009f12 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8009c88:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8009c8a:	d014      	beq.n	8009cb6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	1c11      	adds	r1, r2, #0
 8009c94:	0018      	movs	r0, r3
 8009c96:	f000 fbd1 	bl	800a43c <GasIndexAlgorithm__mox_model__process>
 8009c9a:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	1c11      	adds	r1, r2, #0
 8009ca8:	0018      	movs	r0, r3
 8009caa:	f000 fc25 	bl	800a4f8 <GasIndexAlgorithm__sigmoid_scaled__process>
 8009cae:	1c02      	adds	r2, r0, #0
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cb4:	e003      	b.n	8009cbe <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	1c11      	adds	r1, r2, #0
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	f000 fcec 	bl	800a6a4 <GasIndexAlgorithm__adaptive_lowpass__process>
 8009ccc:	1c02      	adds	r2, r0, #0
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd6:	21fc      	movs	r1, #252	@ 0xfc
 8009cd8:	0589      	lsls	r1, r1, #22
 8009cda:	1c18      	adds	r0, r3, #0
 8009cdc:	f7f6 fc28 	bl	8000530 <__aeabi_fcmplt>
 8009ce0:	1e03      	subs	r3, r0, #0
 8009ce2:	d003      	beq.n	8009cec <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	22fc      	movs	r2, #252	@ 0xfc
 8009ce8:	0592      	lsls	r2, r2, #22
 8009cea:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	1c18      	adds	r0, r3, #0
 8009cf4:	f7f6 fc30 	bl	8000558 <__aeabi_fcmpgt>
 8009cf8:	1e03      	subs	r3, r0, #0
 8009cfa:	d015      	beq.n	8009d28 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	1c11      	adds	r1, r2, #0
 8009d04:	0018      	movs	r0, r3
 8009d06:	f000 fa4f 	bl	800a1a8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	0018      	movs	r0, r3
 8009d0e:	f000 f8e5 	bl	8009edc <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8009d12:	1c04      	adds	r4, r0, #0
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	0018      	movs	r0, r3
 8009d18:	f000 f8ea 	bl	8009ef0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8009d1c:	1c02      	adds	r2, r0, #0
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1c21      	adds	r1, r4, #0
 8009d22:	0018      	movs	r0, r3
 8009d24:	f000 fb7a 	bl	800a41c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2c:	21fc      	movs	r1, #252	@ 0xfc
 8009d2e:	0589      	lsls	r1, r1, #22
 8009d30:	1c18      	adds	r0, r3, #0
 8009d32:	f7f6 fdc5 	bl	80008c0 <__aeabi_fadd>
 8009d36:	1c03      	adds	r3, r0, #0
 8009d38:	1c18      	adds	r0, r3, #0
 8009d3a:	f7f7 fc29 	bl	8001590 <__aeabi_f2iz>
 8009d3e:	0002      	movs	r2, r0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	601a      	str	r2, [r3, #0]
    return;
 8009d44:	46c0      	nop			@ (mov r8, r8)
}
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b005      	add	sp, #20
 8009d4a:	bd90      	pop	{r4, r7, pc}
 8009d4c:	42340000 	.word	0x42340000
 8009d50:	0000fde7 	.word	0x0000fde7
 8009d54:	00007fff 	.word	0x00007fff

08009d58 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8009d58:	b5b0      	push	{r4, r5, r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	223c      	movs	r2, #60	@ 0x3c
 8009d64:	2100      	movs	r1, #0
 8009d66:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4952      	ldr	r1, [pc, #328]	@ (8009ecc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009d82:	1c18      	adds	r0, r3, #0
 8009d84:	f7f6 ff26 	bl	8000bd4 <__aeabi_fdiv>
 8009d88:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009d8a:	2188      	movs	r1, #136	@ 0x88
 8009d8c:	05c9      	lsls	r1, r1, #23
 8009d8e:	1c18      	adds	r0, r3, #0
 8009d90:	f7f7 f906 	bl	8000fa0 <__aeabi_fmul>
 8009d94:	1c03      	adds	r3, r0, #0
 8009d96:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	494a      	ldr	r1, [pc, #296]	@ (8009ecc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009da2:	1c18      	adds	r0, r3, #0
 8009da4:	f7f6 ff16 	bl	8000bd4 <__aeabi_fdiv>
 8009da8:	1c03      	adds	r3, r0, #0
 8009daa:	1c19      	adds	r1, r3, #0
 8009dac:	1c20      	adds	r0, r4, #0
 8009dae:	f7f6 fd87 	bl	80008c0 <__aeabi_fadd>
 8009db2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8009db4:	1c19      	adds	r1, r3, #0
 8009db6:	1c28      	adds	r0, r5, #0
 8009db8:	f7f6 ff0c 	bl	8000bd4 <__aeabi_fdiv>
 8009dbc:	1c03      	adds	r3, r0, #0
 8009dbe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	4940      	ldr	r1, [pc, #256]	@ (8009ecc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009dca:	1c18      	adds	r0, r3, #0
 8009dcc:	f7f6 ff02 	bl	8000bd4 <__aeabi_fdiv>
 8009dd0:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009dd2:	2185      	movs	r1, #133	@ 0x85
 8009dd4:	05c9      	lsls	r1, r1, #23
 8009dd6:	1c18      	adds	r0, r3, #0
 8009dd8:	f7f7 f8e2 	bl	8000fa0 <__aeabi_fmul>
 8009ddc:	1c03      	adds	r3, r0, #0
 8009dde:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4938      	ldr	r1, [pc, #224]	@ (8009ecc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8009dea:	1c18      	adds	r0, r3, #0
 8009dec:	f7f6 fef2 	bl	8000bd4 <__aeabi_fdiv>
 8009df0:	1c03      	adds	r3, r0, #0
 8009df2:	1c19      	adds	r1, r3, #0
 8009df4:	1c20      	adds	r0, r4, #0
 8009df6:	f7f6 fd63 	bl	80008c0 <__aeabi_fadd>
 8009dfa:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8009dfc:	1c19      	adds	r1, r3, #0
 8009dfe:	1c28      	adds	r0, r5, #0
 8009e00:	f7f6 fee8 	bl	8000bd4 <__aeabi_fdiv>
 8009e04:	1c03      	adds	r3, r0, #0
 8009e06:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d118      	bne.n	8009e46 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009e18:	2188      	movs	r1, #136	@ 0x88
 8009e1a:	05c9      	lsls	r1, r1, #23
 8009e1c:	1c18      	adds	r0, r3, #0
 8009e1e:	f7f7 f8bf 	bl	8000fa0 <__aeabi_fmul>
 8009e22:	1c03      	adds	r3, r0, #0
 8009e24:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8009e2a:	4929      	ldr	r1, [pc, #164]	@ (8009ed0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8009e2c:	1c18      	adds	r0, r3, #0
 8009e2e:	f7f6 fd47 	bl	80008c0 <__aeabi_fadd>
 8009e32:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8009e34:	1c19      	adds	r1, r3, #0
 8009e36:	1c20      	adds	r0, r4, #0
 8009e38:	f7f6 fecc 	bl	8000bd4 <__aeabi_fdiv>
 8009e3c:	1c03      	adds	r3, r0, #0
 8009e3e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	655a      	str	r2, [r3, #84]	@ 0x54
 8009e44:	e017      	b.n	8009e76 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8009e4a:	2188      	movs	r1, #136	@ 0x88
 8009e4c:	05c9      	lsls	r1, r1, #23
 8009e4e:	1c18      	adds	r0, r3, #0
 8009e50:	f7f7 f8a6 	bl	8000fa0 <__aeabi_fmul>
 8009e54:	1c03      	adds	r3, r0, #0
 8009e56:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8009e5c:	491d      	ldr	r1, [pc, #116]	@ (8009ed4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8009e5e:	1c18      	adds	r0, r3, #0
 8009e60:	f7f6 fd2e 	bl	80008c0 <__aeabi_fadd>
 8009e64:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8009e66:	1c19      	adds	r1, r3, #0
 8009e68:	1c20      	adds	r0, r4, #0
 8009e6a:	f7f6 feb3 	bl	8000bd4 <__aeabi_fdiv>
 8009e6e:	1c03      	adds	r3, r0, #0
 8009e70:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8009e7a:	2185      	movs	r1, #133	@ 0x85
 8009e7c:	05c9      	lsls	r1, r1, #23
 8009e7e:	1c18      	adds	r0, r3, #0
 8009e80:	f7f7 f88e 	bl	8000fa0 <__aeabi_fmul>
 8009e84:	1c03      	adds	r3, r0, #0
 8009e86:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	4912      	ldr	r1, [pc, #72]	@ (8009ed8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8009e8e:	1c18      	adds	r0, r3, #0
 8009e90:	f7f6 fd16 	bl	80008c0 <__aeabi_fadd>
 8009e94:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8009e96:	1c19      	adds	r1, r3, #0
 8009e98:	1c20      	adds	r0, r4, #0
 8009e9a:	f7f6 fe9b 	bl	8000bd4 <__aeabi_fdiv>
 8009e9e:	1c03      	adds	r3, r0, #0
 8009ea0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8009ec4:	46c0      	nop			@ (mov r8, r8)
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	b002      	add	sp, #8
 8009eca:	bdb0      	pop	{r4, r5, r7, pc}
 8009ecc:	45610000 	.word	0x45610000
 8009ed0:	44960000 	.word	0x44960000
 8009ed4:	41a00000 	.word	0x41a00000
 8009ed8:	451c4000 	.word	0x451c4000

08009edc <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8009ee8:	1c18      	adds	r0, r3, #0
 8009eea:	46bd      	mov	sp, r7
 8009eec:	b002      	add	sp, #8
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8009f00:	1c19      	adds	r1, r3, #0
 8009f02:	1c10      	adds	r0, r2, #0
 8009f04:	f7f6 fcdc 	bl	80008c0 <__aeabi_fadd>
 8009f08:	1c03      	adds	r3, r0, #0
}
 8009f0a:	1c18      	adds	r0, r3, #0
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	b002      	add	sp, #8
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	223c      	movs	r2, #60	@ 0x3c
 8009f1e:	5c9b      	ldrb	r3, [r3, r2]
}
 8009f20:	0018      	movs	r0, r3
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b002      	add	sp, #8
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8009f28:	b5b0      	push	{r4, r5, r7, lr}
 8009f2a:	b08c      	sub	sp, #48	@ 0x30
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8009f34:	1c19      	adds	r1, r3, #0
 8009f36:	4895      	ldr	r0, [pc, #596]	@ (800a18c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8009f38:	f7f7 f970 	bl	800121c <__aeabi_fsub>
 8009f3c:	1c03      	adds	r3, r0, #0
 8009f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f44:	1c19      	adds	r1, r3, #0
 8009f46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f48:	f7f6 fb06 	bl	8000558 <__aeabi_fcmpgt>
 8009f4c:	1e03      	subs	r3, r0, #0
 8009f4e:	d00b      	beq.n	8009f68 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8009f58:	1c19      	adds	r1, r3, #0
 8009f5a:	1c10      	adds	r0, r2, #0
 8009f5c:	f7f6 fcb0 	bl	80008c0 <__aeabi_fadd>
 8009f60:	1c03      	adds	r3, r0, #0
 8009f62:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009f6c:	1c19      	adds	r1, r3, #0
 8009f6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f70:	f7f6 faf2 	bl	8000558 <__aeabi_fcmpgt>
 8009f74:	1e03      	subs	r3, r0, #0
 8009f76:	d00b      	beq.n	8009f90 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8009f80:	1c19      	adds	r1, r3, #0
 8009f82:	1c10      	adds	r0, r2, #0
 8009f84:	f7f6 fc9c 	bl	80008c0 <__aeabi_fadd>
 8009f88:	1c03      	adds	r3, r0, #0
 8009f8a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6959      	ldr	r1, [r3, #20]
 8009f94:	4a7e      	ldr	r2, [pc, #504]	@ (800a190 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f000 f9f1 	bl	800a380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	1c11      	adds	r1, r2, #0
 8009fa6:	0018      	movs	r0, r3
 8009fa8:	f000 f9fa 	bl	800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009fac:	1c03      	adds	r3, r0, #0
 8009fae:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8009fbc:	1c19      	adds	r1, r3, #0
 8009fbe:	1c10      	adds	r0, r2, #0
 8009fc0:	f7f7 f92c 	bl	800121c <__aeabi_fsub>
 8009fc4:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8009fc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fc8:	1c18      	adds	r0, r3, #0
 8009fca:	f7f6 ffe9 	bl	8000fa0 <__aeabi_fmul>
 8009fce:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8009fd0:	1c19      	adds	r1, r3, #0
 8009fd2:	1c20      	adds	r0, r4, #0
 8009fd4:	f7f6 fc74 	bl	80008c0 <__aeabi_fadd>
 8009fd8:	1c03      	adds	r3, r0, #0
 8009fda:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8009fe4:	1c19      	adds	r1, r3, #0
 8009fe6:	486b      	ldr	r0, [pc, #428]	@ (800a194 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8009fe8:	f7f7 f918 	bl	800121c <__aeabi_fsub>
 8009fec:	1c03      	adds	r3, r0, #0
 8009fee:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	1c11      	adds	r1, r2, #0
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	f000 f9d1 	bl	800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8009ffe:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a000:	1c19      	adds	r1, r3, #0
 800a002:	1c28      	adds	r0, r5, #0
 800a004:	f7f6 ffcc 	bl	8000fa0 <__aeabi_fmul>
 800a008:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800a00a:	1c19      	adds	r1, r3, #0
 800a00c:	1c20      	adds	r0, r4, #0
 800a00e:	f7f6 fc57 	bl	80008c0 <__aeabi_fadd>
 800a012:	1c03      	adds	r3, r0, #0
 800a014:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a016:	4a60      	ldr	r2, [pc, #384]	@ (800a198 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a018:	6a39      	ldr	r1, [r7, #32]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	0018      	movs	r0, r3
 800a01e:	f000 f9af 	bl	800a380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	1c11      	adds	r1, r2, #0
 800a02a:	0018      	movs	r0, r3
 800a02c:	f000 f9b8 	bl	800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a030:	1c03      	adds	r3, r0, #0
 800a032:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800a034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a036:	69f8      	ldr	r0, [r7, #28]
 800a038:	f7f6 ffb2 	bl	8000fa0 <__aeabi_fmul>
 800a03c:	1c03      	adds	r3, r0, #0
 800a03e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6999      	ldr	r1, [r3, #24]
 800a048:	4a51      	ldr	r2, [pc, #324]	@ (800a190 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	0018      	movs	r0, r3
 800a04e:	f000 f997 	bl	800a380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	1c11      	adds	r1, r2, #0
 800a05a:	0018      	movs	r0, r3
 800a05c:	f000 f9a0 	bl	800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a060:	1c03      	adds	r3, r0, #0
 800a062:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 800a070:	1c19      	adds	r1, r3, #0
 800a072:	1c10      	adds	r0, r2, #0
 800a074:	f7f7 f8d2 	bl	800121c <__aeabi_fsub>
 800a078:	1c03      	adds	r3, r0, #0
 800a07a:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 800a07c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a07e:	69b8      	ldr	r0, [r7, #24]
 800a080:	f7f7 f8cc 	bl	800121c <__aeabi_fsub>
 800a084:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 800a086:	1c19      	adds	r1, r3, #0
 800a088:	1c28      	adds	r0, r5, #0
 800a08a:	f7f6 ff89 	bl	8000fa0 <__aeabi_fmul>
 800a08e:	1c03      	adds	r3, r0, #0
    gamma_variance =
 800a090:	1c19      	adds	r1, r3, #0
 800a092:	1c20      	adds	r0, r4, #0
 800a094:	f7f6 fc14 	bl	80008c0 <__aeabi_fadd>
 800a098:	1c03      	adds	r3, r0, #0
 800a09a:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800a0a4:	1c19      	adds	r1, r3, #0
 800a0a6:	483b      	ldr	r0, [pc, #236]	@ (800a194 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 800a0a8:	f7f7 f8b8 	bl	800121c <__aeabi_fsub>
 800a0ac:	1c03      	adds	r3, r0, #0
 800a0ae:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	1c11      	adds	r1, r2, #0
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	f000 f971 	bl	800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a0be:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800a0c0:	1c19      	adds	r1, r3, #0
 800a0c2:	1c28      	adds	r0, r5, #0
 800a0c4:	f7f6 ff6c 	bl	8000fa0 <__aeabi_fmul>
 800a0c8:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800a0ca:	1c19      	adds	r1, r3, #0
 800a0cc:	1c20      	adds	r0, r4, #0
 800a0ce:	f7f6 fbf7 	bl	80008c0 <__aeabi_fadd>
 800a0d2:	1c03      	adds	r3, r0, #0
 800a0d4:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800a0d6:	4a30      	ldr	r2, [pc, #192]	@ (800a198 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 800a0d8:	6939      	ldr	r1, [r7, #16]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	0018      	movs	r0, r3
 800a0de:	f000 f94f 	bl	800a380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	1c11      	adds	r1, r2, #0
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	f000 f958 	bl	800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800a0f0:	1c03      	adds	r3, r0, #0
 800a0f2:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800a0f4:	6979      	ldr	r1, [r7, #20]
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f7f6 ff52 	bl	8000fa0 <__aeabi_fmul>
 800a0fc:	1c03      	adds	r3, r0, #0
 800a0fe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	4923      	ldr	r1, [pc, #140]	@ (800a19c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800a10e:	1c18      	adds	r0, r3, #0
 800a110:	f7f6 fd60 	bl	8000bd4 <__aeabi_fdiv>
 800a114:	1c03      	adds	r3, r0, #0
 800a116:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 800a118:	69f9      	ldr	r1, [r7, #28]
 800a11a:	20fe      	movs	r0, #254	@ 0xfe
 800a11c:	0580      	lsls	r0, r0, #22
 800a11e:	f7f7 f87d 	bl	800121c <__aeabi_fsub>
 800a122:	1c03      	adds	r3, r0, #0
 800a124:	491e      	ldr	r1, [pc, #120]	@ (800a1a0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800a126:	1c18      	adds	r0, r3, #0
 800a128:	f7f6 ff3a 	bl	8000fa0 <__aeabi_fmul>
 800a12c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800a12e:	491d      	ldr	r1, [pc, #116]	@ (800a1a4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800a130:	1c18      	adds	r0, r3, #0
 800a132:	f7f7 f873 	bl	800121c <__aeabi_fsub>
 800a136:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 800a138:	1c19      	adds	r1, r3, #0
 800a13a:	1c28      	adds	r0, r5, #0
 800a13c:	f7f6 ff30 	bl	8000fa0 <__aeabi_fmul>
 800a140:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800a142:	1c19      	adds	r1, r3, #0
 800a144:	1c20      	adds	r0, r4, #0
 800a146:	f7f6 fbbb 	bl	80008c0 <__aeabi_fadd>
 800a14a:	1c03      	adds	r3, r0, #0
 800a14c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a156:	2100      	movs	r1, #0
 800a158:	1c18      	adds	r0, r3, #0
 800a15a:	f7f6 f9e9 	bl	8000530 <__aeabi_fcmplt>
 800a15e:	1e03      	subs	r3, r0, #0
 800a160:	d002      	beq.n	800a168 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 800a170:	1c19      	adds	r1, r3, #0
 800a172:	1c10      	adds	r0, r2, #0
 800a174:	f7f6 f9f0 	bl	8000558 <__aeabi_fcmpgt>
 800a178:	1e03      	subs	r3, r0, #0
 800a17a:	d100      	bne.n	800a17e <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 800a17c:	e002      	b.n	800a184 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a184:	46c0      	nop			@ (mov r8, r8)
 800a186:	46bd      	mov	sp, r7
 800a188:	b00c      	add	sp, #48	@ 0x30
 800a18a:	bdb0      	pop	{r4, r5, r7, pc}
 800a18c:	46fffe00 	.word	0x46fffe00
 800a190:	3c23d70a 	.word	0x3c23d70a
 800a194:	43ff0000 	.word	0x43ff0000
 800a198:	3db851ec 	.word	0x3db851ec
 800a19c:	42700000 	.word	0x42700000
 800a1a0:	3fa66666 	.word	0x3fa66666
 800a1a4:	3e99999a 	.word	0x3e99999a

0800a1a8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 800a1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	223c      	movs	r2, #60	@ 0x3c
 800a1b6:	5c9b      	ldrb	r3, [r3, r2]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	4053      	eors	r3, r2
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00a      	beq.n	800a1d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	223c      	movs	r2, #60	@ 0x3c
 800a1c6:	2101      	movs	r1, #1
 800a1c8:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800a1d6:	e0c8      	b.n	800a36a <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1dc:	4965      	ldr	r1, [pc, #404]	@ (800a374 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800a1de:	1c18      	adds	r0, r3, #0
 800a1e0:	f7f6 f9c4 	bl	800056c <__aeabi_fcmpge>
 800a1e4:	1e03      	subs	r3, r0, #0
 800a1e6:	d107      	bne.n	800a1f8 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800a1ec:	4962      	ldr	r1, [pc, #392]	@ (800a378 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800a1ee:	1c18      	adds	r0, r3, #0
 800a1f0:	f7f6 f9a8 	bl	8000544 <__aeabi_fcmple>
 800a1f4:	1e03      	subs	r3, r0, #0
 800a1f6:	d00e      	beq.n	800a216 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800a200:	1c19      	adds	r1, r3, #0
 800a202:	1c10      	adds	r0, r2, #0
 800a204:	f7f6 fb5c 	bl	80008c0 <__aeabi_fadd>
 800a208:	1c03      	adds	r3, r0, #0
 800a20a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a21a:	1c19      	adds	r1, r3, #0
 800a21c:	6838      	ldr	r0, [r7, #0]
 800a21e:	f7f6 fffd 	bl	800121c <__aeabi_fsub>
 800a222:	1c03      	adds	r3, r0, #0
 800a224:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	0018      	movs	r0, r3
 800a22a:	f7ff fe7d 	bl	8009f28 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a232:	1c19      	adds	r1, r3, #0
 800a234:	6838      	ldr	r0, [r7, #0]
 800a236:	f7f6 fff1 	bl	800121c <__aeabi_fsub>
 800a23a:	1c03      	adds	r3, r0, #0
 800a23c:	2185      	movs	r1, #133	@ 0x85
 800a23e:	05c9      	lsls	r1, r1, #23
 800a240:	1c18      	adds	r0, r3, #0
 800a242:	f7f6 fcc7 	bl	8000bd4 <__aeabi_fdiv>
 800a246:	1c03      	adds	r3, r0, #0
 800a248:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800a24a:	2100      	movs	r1, #0
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7f6 f96f 	bl	8000530 <__aeabi_fcmplt>
 800a252:	1e03      	subs	r3, r0, #0
 800a254:	d008      	beq.n	800a268 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	1c18      	adds	r0, r3, #0
 800a25e:	f7f6 ffdd 	bl	800121c <__aeabi_fsub>
 800a262:	1c03      	adds	r3, r0, #0
 800a264:	617b      	str	r3, [r7, #20]
 800a266:	e007      	b.n	800a278 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a26c:	1c19      	adds	r1, r3, #0
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f7f6 fb26 	bl	80008c0 <__aeabi_fadd>
 800a274:	1c03      	adds	r3, r0, #0
 800a276:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 800a278:	23fe      	movs	r3, #254	@ 0xfe
 800a27a:	059b      	lsls	r3, r3, #22
 800a27c:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 800a27e:	493f      	ldr	r1, [pc, #252]	@ (800a37c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a280:	6978      	ldr	r0, [r7, #20]
 800a282:	f7f6 f969 	bl	8000558 <__aeabi_fcmpgt>
 800a286:	1e03      	subs	r3, r0, #0
 800a288:	d010      	beq.n	800a2ac <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 800a28a:	493c      	ldr	r1, [pc, #240]	@ (800a37c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a28c:	6978      	ldr	r0, [r7, #20]
 800a28e:	f7f6 fca1 	bl	8000bd4 <__aeabi_fdiv>
 800a292:	1c03      	adds	r3, r0, #0
 800a294:	1c1c      	adds	r4, r3, #0
 800a296:	4939      	ldr	r1, [pc, #228]	@ (800a37c <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 800a298:	6978      	ldr	r0, [r7, #20]
 800a29a:	f7f6 fc9b 	bl	8000bd4 <__aeabi_fdiv>
 800a29e:	1c03      	adds	r3, r0, #0
 800a2a0:	1c19      	adds	r1, r3, #0
 800a2a2:	1c20      	adds	r0, r4, #0
 800a2a4:	f7f6 fe7c 	bl	8000fa0 <__aeabi_fmul>
 800a2a8:	1c03      	adds	r3, r0, #0
 800a2aa:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800a2b0:	1c19      	adds	r1, r3, #0
 800a2b2:	2085      	movs	r0, #133	@ 0x85
 800a2b4:	05c0      	lsls	r0, r0, #23
 800a2b6:	f7f6 ffb1 	bl	800121c <__aeabi_fsub>
 800a2ba:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 800a2bc:	6939      	ldr	r1, [r7, #16]
 800a2be:	1c18      	adds	r0, r3, #0
 800a2c0:	f7f6 fe6e 	bl	8000fa0 <__aeabi_fmul>
 800a2c4:	1c03      	adds	r3, r0, #0
 800a2c6:	1c18      	adds	r0, r3, #0
 800a2c8:	f017 fc34 	bl	8021b34 <sqrtf>
 800a2cc:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800a2d6:	2185      	movs	r1, #133	@ 0x85
 800a2d8:	05c9      	lsls	r1, r1, #23
 800a2da:	6938      	ldr	r0, [r7, #16]
 800a2dc:	f7f6 fe60 	bl	8000fa0 <__aeabi_fmul>
 800a2e0:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800a2e2:	1c19      	adds	r1, r3, #0
 800a2e4:	1c28      	adds	r0, r5, #0
 800a2e6:	f7f6 fc75 	bl	8000bd4 <__aeabi_fdiv>
 800a2ea:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800a2ec:	1c19      	adds	r1, r3, #0
 800a2ee:	1c20      	adds	r0, r4, #0
 800a2f0:	f7f6 fe56 	bl	8000fa0 <__aeabi_fmul>
 800a2f4:	1c03      	adds	r3, r0, #0
 800a2f6:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2fc:	68f9      	ldr	r1, [r7, #12]
 800a2fe:	1c18      	adds	r0, r3, #0
 800a300:	f7f6 fe4e 	bl	8000fa0 <__aeabi_fmul>
 800a304:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800a306:	6939      	ldr	r1, [r7, #16]
 800a308:	1c18      	adds	r0, r3, #0
 800a30a:	f7f6 fc63 	bl	8000bd4 <__aeabi_fdiv>
 800a30e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800a310:	68f9      	ldr	r1, [r7, #12]
 800a312:	1c18      	adds	r0, r3, #0
 800a314:	f7f6 fe44 	bl	8000fa0 <__aeabi_fmul>
 800a318:	1c03      	adds	r3, r0, #0
             sqrtf(
 800a31a:	1c19      	adds	r1, r3, #0
 800a31c:	1c20      	adds	r0, r4, #0
 800a31e:	f7f6 facf 	bl	80008c0 <__aeabi_fadd>
 800a322:	1c03      	adds	r3, r0, #0
 800a324:	1c18      	adds	r0, r3, #0
 800a326:	f017 fc05 	bl	8021b34 <sqrtf>
 800a32a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800a32c:	1c19      	adds	r1, r3, #0
 800a32e:	1c30      	adds	r0, r6, #0
 800a330:	f7f6 fe36 	bl	8000fa0 <__aeabi_fmul>
 800a334:	1c03      	adds	r3, r0, #0
 800a336:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a344:	68f9      	ldr	r1, [r7, #12]
 800a346:	1c18      	adds	r0, r3, #0
 800a348:	f7f6 fe2a 	bl	8000fa0 <__aeabi_fmul>
 800a34c:	1c03      	adds	r3, r0, #0
 800a34e:	2182      	movs	r1, #130	@ 0x82
 800a350:	05c9      	lsls	r1, r1, #23
 800a352:	1c18      	adds	r0, r3, #0
 800a354:	f7f6 fc3e 	bl	8000bd4 <__aeabi_fdiv>
 800a358:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800a35a:	1c19      	adds	r1, r3, #0
 800a35c:	1c20      	adds	r0, r4, #0
 800a35e:	f7f6 faaf 	bl	80008c0 <__aeabi_fadd>
 800a362:	1c03      	adds	r3, r0, #0
 800a364:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a36a:	46c0      	nop			@ (mov r8, r8)
 800a36c:	46bd      	mov	sp, r7
 800a36e:	b007      	add	sp, #28
 800a370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a372:	46c0      	nop			@ (mov r8, r8)
 800a374:	42c80000 	.word	0x42c80000
 800a378:	c2c80000 	.word	0xc2c80000
 800a37c:	44b40000 	.word	0x44b40000

0800a380 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a398:	46c0      	nop			@ (mov r8, r8)
 800a39a:	46bd      	mov	sp, r7
 800a39c:	b004      	add	sp, #16
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b085      	sub	sp, #20
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a3b2:	1c19      	adds	r1, r3, #0
 800a3b4:	6838      	ldr	r0, [r7, #0]
 800a3b6:	f7f6 ff31 	bl	800121c <__aeabi_fsub>
 800a3ba:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 800a3bc:	1c19      	adds	r1, r3, #0
 800a3be:	1c20      	adds	r0, r4, #0
 800a3c0:	f7f6 fdee 	bl	8000fa0 <__aeabi_fmul>
 800a3c4:	1c03      	adds	r3, r0, #0
 800a3c6:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 800a3c8:	4912      	ldr	r1, [pc, #72]	@ (800a414 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7f6 f8b0 	bl	8000530 <__aeabi_fcmplt>
 800a3d0:	1e03      	subs	r3, r0, #0
 800a3d2:	d002      	beq.n	800a3da <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800a3d4:	23fe      	movs	r3, #254	@ 0xfe
 800a3d6:	059b      	lsls	r3, r3, #22
 800a3d8:	e018      	b.n	800a40c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 800a3da:	490f      	ldr	r1, [pc, #60]	@ (800a418 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7f6 f8bb 	bl	8000558 <__aeabi_fcmpgt>
 800a3e2:	1e03      	subs	r3, r0, #0
 800a3e4:	d001      	beq.n	800a3ea <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e010      	b.n	800a40c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	1c18      	adds	r0, r3, #0
 800a3ee:	f017 fb79 	bl	8021ae4 <expf>
 800a3f2:	1c03      	adds	r3, r0, #0
 800a3f4:	21fe      	movs	r1, #254	@ 0xfe
 800a3f6:	0589      	lsls	r1, r1, #22
 800a3f8:	1c18      	adds	r0, r3, #0
 800a3fa:	f7f6 fa61 	bl	80008c0 <__aeabi_fadd>
 800a3fe:	1c03      	adds	r3, r0, #0
 800a400:	1c19      	adds	r1, r3, #0
 800a402:	20fe      	movs	r0, #254	@ 0xfe
 800a404:	0580      	lsls	r0, r0, #22
 800a406:	f7f6 fbe5 	bl	8000bd4 <__aeabi_fdiv>
 800a40a:	1c03      	adds	r3, r0, #0
    }
}
 800a40c:	1c18      	adds	r0, r3, #0
 800a40e:	46bd      	mov	sp, r7
 800a410:	b005      	add	sp, #20
 800a412:	bd90      	pop	{r4, r7, pc}
 800a414:	c2480000 	.word	0xc2480000
 800a418:	42480000 	.word	0x42480000

0800a41c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800a434:	46c0      	nop			@ (mov r8, r8)
 800a436:	46bd      	mov	sp, r7
 800a438:	b004      	add	sp, #16
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d114      	bne.n	800a478 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a452:	1c19      	adds	r1, r3, #0
 800a454:	6838      	ldr	r0, [r7, #0]
 800a456:	f7f6 fee1 	bl	800121c <__aeabi_fsub>
 800a45a:	1c03      	adds	r3, r0, #0
 800a45c:	4918      	ldr	r1, [pc, #96]	@ (800a4c0 <GasIndexAlgorithm__mox_model__process+0x84>)
 800a45e:	1c18      	adds	r0, r3, #0
 800a460:	f7f6 fbb8 	bl	8000bd4 <__aeabi_fdiv>
 800a464:	1c03      	adds	r3, r0, #0
 800a466:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 800a46c:	1c19      	adds	r1, r3, #0
 800a46e:	1c10      	adds	r0, r2, #0
 800a470:	f7f6 fd96 	bl	8000fa0 <__aeabi_fmul>
 800a474:	1c03      	adds	r3, r0, #0
 800a476:	e01f      	b.n	800a4b8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a47c:	1c19      	adds	r1, r3, #0
 800a47e:	6838      	ldr	r0, [r7, #0]
 800a480:	f7f6 fecc 	bl	800121c <__aeabi_fsub>
 800a484:	1c03      	adds	r3, r0, #0
 800a486:	1c1a      	adds	r2, r3, #0
 800a488:	2380      	movs	r3, #128	@ 0x80
 800a48a:	061b      	lsls	r3, r3, #24
 800a48c:	4053      	eors	r3, r2
 800a48e:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a494:	490b      	ldr	r1, [pc, #44]	@ (800a4c4 <GasIndexAlgorithm__mox_model__process+0x88>)
 800a496:	1c18      	adds	r0, r3, #0
 800a498:	f7f6 fa12 	bl	80008c0 <__aeabi_fadd>
 800a49c:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 800a49e:	1c19      	adds	r1, r3, #0
 800a4a0:	1c20      	adds	r0, r4, #0
 800a4a2:	f7f6 fb97 	bl	8000bd4 <__aeabi_fdiv>
 800a4a6:	1c03      	adds	r3, r0, #0
 800a4a8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800a4ae:	1c19      	adds	r1, r3, #0
 800a4b0:	1c10      	adds	r0, r2, #0
 800a4b2:	f7f6 fd75 	bl	8000fa0 <__aeabi_fmul>
 800a4b6:	1c03      	adds	r3, r0, #0
    }
}
 800a4b8:	1c18      	adds	r0, r3, #0
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b003      	add	sp, #12
 800a4be:	bd90      	pop	{r4, r7, pc}
 800a4c0:	44fa0000 	.word	0x44fa0000
 800a4c4:	435c0000 	.word	0x435c0000

0800a4c8 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2180      	movs	r1, #128	@ 0x80
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2184      	movs	r1, #132	@ 0x84
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2188      	movs	r1, #136	@ 0x88
 800a4ea:	683a      	ldr	r2, [r7, #0]
 800a4ec:	505a      	str	r2, [r3, r1]
}
 800a4ee:	46c0      	nop			@ (mov r8, r8)
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b004      	add	sp, #16
 800a4f4:	bd80      	pop	{r7, pc}
	...

0800a4f8 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 800a4f8:	b590      	push	{r4, r7, lr}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2280      	movs	r2, #128	@ 0x80
 800a506:	589c      	ldr	r4, [r3, r2]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2284      	movs	r2, #132	@ 0x84
 800a50c:	589b      	ldr	r3, [r3, r2]
 800a50e:	1c19      	adds	r1, r3, #0
 800a510:	6838      	ldr	r0, [r7, #0]
 800a512:	f7f6 fe83 	bl	800121c <__aeabi_fsub>
 800a516:	1c03      	adds	r3, r0, #0
 800a518:	1c19      	adds	r1, r3, #0
 800a51a:	1c20      	adds	r0, r4, #0
 800a51c:	f7f6 fd40 	bl	8000fa0 <__aeabi_fmul>
 800a520:	1c03      	adds	r3, r0, #0
 800a522:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800a524:	4940      	ldr	r1, [pc, #256]	@ (800a628 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800a526:	68b8      	ldr	r0, [r7, #8]
 800a528:	f7f6 f802 	bl	8000530 <__aeabi_fcmplt>
 800a52c:	1e03      	subs	r3, r0, #0
 800a52e:	d001      	beq.n	800a534 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800a530:	4b3e      	ldr	r3, [pc, #248]	@ (800a62c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a532:	e075      	b.n	800a620 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800a534:	493e      	ldr	r1, [pc, #248]	@ (800a630 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800a536:	68b8      	ldr	r0, [r7, #8]
 800a538:	f7f6 f80e 	bl	8000558 <__aeabi_fcmpgt>
 800a53c:	1e03      	subs	r3, r0, #0
 800a53e:	d001      	beq.n	800a544 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800a540:	2300      	movs	r3, #0
 800a542:	e06d      	b.n	800a620 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800a544:	2100      	movs	r1, #0
 800a546:	6838      	ldr	r0, [r7, #0]
 800a548:	f7f6 f810 	bl	800056c <__aeabi_fcmpge>
 800a54c:	1e03      	subs	r3, r0, #0
 800a54e:	d047      	beq.n	800a5e0 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2288      	movs	r2, #136	@ 0x88
 800a554:	589b      	ldr	r3, [r3, r2]
 800a556:	21fe      	movs	r1, #254	@ 0xfe
 800a558:	0589      	lsls	r1, r1, #22
 800a55a:	1c18      	adds	r0, r3, #0
 800a55c:	f7f5 ffe2 	bl	8000524 <__aeabi_fcmpeq>
 800a560:	1e03      	subs	r3, r0, #0
 800a562:	d00e      	beq.n	800a582 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	1c19      	adds	r1, r3, #0
 800a56a:	20fe      	movs	r0, #254	@ 0xfe
 800a56c:	0580      	lsls	r0, r0, #22
 800a56e:	f7f6 fe55 	bl	800121c <__aeabi_fsub>
 800a572:	1c03      	adds	r3, r0, #0
 800a574:	492f      	ldr	r1, [pc, #188]	@ (800a634 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800a576:	1c18      	adds	r0, r3, #0
 800a578:	f7f6 fd12 	bl	8000fa0 <__aeabi_fmul>
 800a57c:	1c03      	adds	r3, r0, #0
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	e012      	b.n	800a5a8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	492c      	ldr	r1, [pc, #176]	@ (800a638 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 800a588:	1c18      	adds	r0, r3, #0
 800a58a:	f7f6 fd09 	bl	8000fa0 <__aeabi_fmul>
 800a58e:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 800a590:	1c19      	adds	r1, r3, #0
 800a592:	4826      	ldr	r0, [pc, #152]	@ (800a62c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a594:	f7f6 fe42 	bl	800121c <__aeabi_fsub>
 800a598:	1c03      	adds	r3, r0, #0
 800a59a:	2181      	movs	r1, #129	@ 0x81
 800a59c:	05c9      	lsls	r1, r1, #23
 800a59e:	1c18      	adds	r0, r3, #0
 800a5a0:	f7f6 fb18 	bl	8000bd4 <__aeabi_fdiv>
 800a5a4:	1c03      	adds	r3, r0, #0
 800a5a6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 800a5a8:	4920      	ldr	r1, [pc, #128]	@ (800a62c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f7f6 f988 	bl	80008c0 <__aeabi_fadd>
 800a5b0:	1c03      	adds	r3, r0, #0
 800a5b2:	1c1c      	adds	r4, r3, #0
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	1c18      	adds	r0, r3, #0
 800a5b8:	f017 fa94 	bl	8021ae4 <expf>
 800a5bc:	1c03      	adds	r3, r0, #0
 800a5be:	21fe      	movs	r1, #254	@ 0xfe
 800a5c0:	0589      	lsls	r1, r1, #22
 800a5c2:	1c18      	adds	r0, r3, #0
 800a5c4:	f7f6 f97c 	bl	80008c0 <__aeabi_fadd>
 800a5c8:	1c03      	adds	r3, r0, #0
 800a5ca:	1c19      	adds	r1, r3, #0
 800a5cc:	1c20      	adds	r0, r4, #0
 800a5ce:	f7f6 fb01 	bl	8000bd4 <__aeabi_fdiv>
 800a5d2:	1c03      	adds	r3, r0, #0
 800a5d4:	68f9      	ldr	r1, [r7, #12]
 800a5d6:	1c18      	adds	r0, r3, #0
 800a5d8:	f7f6 fe20 	bl	800121c <__aeabi_fsub>
 800a5dc:	1c03      	adds	r3, r0, #0
 800a5de:	e01f      	b.n	800a620 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2188      	movs	r1, #136	@ 0x88
 800a5e8:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 800a5ea:	1c19      	adds	r1, r3, #0
 800a5ec:	1c10      	adds	r0, r2, #0
 800a5ee:	f7f6 faf1 	bl	8000bd4 <__aeabi_fdiv>
 800a5f2:	1c03      	adds	r3, r0, #0
 800a5f4:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	1c18      	adds	r0, r3, #0
 800a5fa:	f017 fa73 	bl	8021ae4 <expf>
 800a5fe:	1c03      	adds	r3, r0, #0
 800a600:	21fe      	movs	r1, #254	@ 0xfe
 800a602:	0589      	lsls	r1, r1, #22
 800a604:	1c18      	adds	r0, r3, #0
 800a606:	f7f6 f95b 	bl	80008c0 <__aeabi_fadd>
 800a60a:	1c03      	adds	r3, r0, #0
 800a60c:	1c19      	adds	r1, r3, #0
 800a60e:	4807      	ldr	r0, [pc, #28]	@ (800a62c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800a610:	f7f6 fae0 	bl	8000bd4 <__aeabi_fdiv>
 800a614:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800a616:	1c19      	adds	r1, r3, #0
 800a618:	1c20      	adds	r0, r4, #0
 800a61a:	f7f6 fcc1 	bl	8000fa0 <__aeabi_fmul>
 800a61e:	1c03      	adds	r3, r0, #0
        }
    }
}
 800a620:	1c18      	adds	r0, r3, #0
 800a622:	46bd      	mov	sp, r7
 800a624:	b005      	add	sp, #20
 800a626:	bd90      	pop	{r4, r7, pc}
 800a628:	c2480000 	.word	0xc2480000
 800a62c:	43fa0000 	.word	0x43fa0000
 800a630:	42480000 	.word	0x42480000
 800a634:	3f8041ab 	.word	0x3f8041ab
 800a638:	40a00000 	.word	0x40a00000

0800a63c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 800a63c:	b590      	push	{r4, r7, lr}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	4913      	ldr	r1, [pc, #76]	@ (800a69c <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800a64e:	1c18      	adds	r0, r3, #0
 800a650:	f7f6 f936 	bl	80008c0 <__aeabi_fadd>
 800a654:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a656:	1c19      	adds	r1, r3, #0
 800a658:	1c20      	adds	r0, r4, #0
 800a65a:	f7f6 fabb 	bl	8000bd4 <__aeabi_fdiv>
 800a65e:	1c03      	adds	r3, r0, #0
 800a660:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	228c      	movs	r2, #140	@ 0x8c
 800a666:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	490b      	ldr	r1, [pc, #44]	@ (800a6a0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800a672:	1c18      	adds	r0, r3, #0
 800a674:	f7f6 f924 	bl	80008c0 <__aeabi_fadd>
 800a678:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800a67a:	1c19      	adds	r1, r3, #0
 800a67c:	1c20      	adds	r0, r4, #0
 800a67e:	f7f6 faa9 	bl	8000bd4 <__aeabi_fdiv>
 800a682:	1c03      	adds	r3, r0, #0
 800a684:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2290      	movs	r2, #144	@ 0x90
 800a68a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2294      	movs	r2, #148	@ 0x94
 800a690:	2100      	movs	r1, #0
 800a692:	5499      	strb	r1, [r3, r2]
}
 800a694:	46c0      	nop			@ (mov r8, r8)
 800a696:	46bd      	mov	sp, r7
 800a698:	b003      	add	sp, #12
 800a69a:	bd90      	pop	{r4, r7, pc}
 800a69c:	41a00000 	.word	0x41a00000
 800a6a0:	43fa0000 	.word	0x43fa0000

0800a6a4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800a6a4:	b590      	push	{r4, r7, lr}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2294      	movs	r2, #148	@ 0x94
 800a6b2:	5c9b      	ldrb	r3, [r3, r2]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	4053      	eors	r3, r2
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00f      	beq.n	800a6de <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2198      	movs	r1, #152	@ 0x98
 800a6c2:	683a      	ldr	r2, [r7, #0]
 800a6c4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	219c      	movs	r1, #156	@ 0x9c
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	21a0      	movs	r1, #160	@ 0xa0
 800a6d2:	683a      	ldr	r2, [r7, #0]
 800a6d4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2294      	movs	r2, #148	@ 0x94
 800a6da:	2101      	movs	r1, #1
 800a6dc:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	228c      	movs	r2, #140	@ 0x8c
 800a6e2:	589b      	ldr	r3, [r3, r2]
 800a6e4:	1c19      	adds	r1, r3, #0
 800a6e6:	20fe      	movs	r0, #254	@ 0xfe
 800a6e8:	0580      	lsls	r0, r0, #22
 800a6ea:	f7f6 fd97 	bl	800121c <__aeabi_fsub>
 800a6ee:	1c03      	adds	r3, r0, #0
 800a6f0:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2298      	movs	r2, #152	@ 0x98
 800a6f6:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 800a6f8:	1c19      	adds	r1, r3, #0
 800a6fa:	f7f6 fc51 	bl	8000fa0 <__aeabi_fmul>
 800a6fe:	1c03      	adds	r3, r0, #0
 800a700:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	228c      	movs	r2, #140	@ 0x8c
 800a706:	589b      	ldr	r3, [r3, r2]
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	1c18      	adds	r0, r3, #0
 800a70c:	f7f6 fc48 	bl	8000fa0 <__aeabi_fmul>
 800a710:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800a712:	1c19      	adds	r1, r3, #0
 800a714:	1c20      	adds	r0, r4, #0
 800a716:	f7f6 f8d3 	bl	80008c0 <__aeabi_fadd>
 800a71a:	1c03      	adds	r3, r0, #0
 800a71c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2298      	movs	r2, #152	@ 0x98
 800a722:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2290      	movs	r2, #144	@ 0x90
 800a728:	589b      	ldr	r3, [r3, r2]
 800a72a:	1c19      	adds	r1, r3, #0
 800a72c:	20fe      	movs	r0, #254	@ 0xfe
 800a72e:	0580      	lsls	r0, r0, #22
 800a730:	f7f6 fd74 	bl	800121c <__aeabi_fsub>
 800a734:	1c03      	adds	r3, r0, #0
 800a736:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	229c      	movs	r2, #156	@ 0x9c
 800a73c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800a73e:	1c19      	adds	r1, r3, #0
 800a740:	f7f6 fc2e 	bl	8000fa0 <__aeabi_fmul>
 800a744:	1c03      	adds	r3, r0, #0
 800a746:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2290      	movs	r2, #144	@ 0x90
 800a74c:	589b      	ldr	r3, [r3, r2]
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	1c18      	adds	r0, r3, #0
 800a752:	f7f6 fc25 	bl	8000fa0 <__aeabi_fmul>
 800a756:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 800a758:	1c19      	adds	r1, r3, #0
 800a75a:	1c20      	adds	r0, r4, #0
 800a75c:	f7f6 f8b0 	bl	80008c0 <__aeabi_fadd>
 800a760:	1c03      	adds	r3, r0, #0
 800a762:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	229c      	movs	r2, #156	@ 0x9c
 800a768:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2298      	movs	r2, #152	@ 0x98
 800a76e:	589a      	ldr	r2, [r3, r2]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	219c      	movs	r1, #156	@ 0x9c
 800a774:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800a776:	1c19      	adds	r1, r3, #0
 800a778:	1c10      	adds	r0, r2, #0
 800a77a:	f7f6 fd4f 	bl	800121c <__aeabi_fsub>
 800a77e:	1c03      	adds	r3, r0, #0
 800a780:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800a782:	2100      	movs	r1, #0
 800a784:	6978      	ldr	r0, [r7, #20]
 800a786:	f7f5 fed3 	bl	8000530 <__aeabi_fcmplt>
 800a78a:	1e03      	subs	r3, r0, #0
 800a78c:	d004      	beq.n	800a798 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2280      	movs	r2, #128	@ 0x80
 800a792:	0612      	lsls	r2, r2, #24
 800a794:	4053      	eors	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 800a798:	4923      	ldr	r1, [pc, #140]	@ (800a828 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 800a79a:	6978      	ldr	r0, [r7, #20]
 800a79c:	f7f6 fc00 	bl	8000fa0 <__aeabi_fmul>
 800a7a0:	1c03      	adds	r3, r0, #0
 800a7a2:	1c18      	adds	r0, r3, #0
 800a7a4:	f017 f99e 	bl	8021ae4 <expf>
 800a7a8:	1c03      	adds	r3, r0, #0
 800a7aa:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 800a7ac:	491f      	ldr	r1, [pc, #124]	@ (800a82c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 800a7ae:	6938      	ldr	r0, [r7, #16]
 800a7b0:	f7f6 fbf6 	bl	8000fa0 <__aeabi_fmul>
 800a7b4:	1c03      	adds	r3, r0, #0
 800a7b6:	491e      	ldr	r1, [pc, #120]	@ (800a830 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 800a7b8:	1c18      	adds	r0, r3, #0
 800a7ba:	f7f6 f881 	bl	80008c0 <__aeabi_fadd>
 800a7be:	1c03      	adds	r3, r0, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685c      	ldr	r4, [r3, #4]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	1c18      	adds	r0, r3, #0
 800a7ce:	f7f6 f877 	bl	80008c0 <__aeabi_fadd>
 800a7d2:	1c03      	adds	r3, r0, #0
 800a7d4:	1c19      	adds	r1, r3, #0
 800a7d6:	1c20      	adds	r0, r4, #0
 800a7d8:	f7f6 f9fc 	bl	8000bd4 <__aeabi_fdiv>
 800a7dc:	1c03      	adds	r3, r0, #0
 800a7de:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 800a7e0:	68b9      	ldr	r1, [r7, #8]
 800a7e2:	20fe      	movs	r0, #254	@ 0xfe
 800a7e4:	0580      	lsls	r0, r0, #22
 800a7e6:	f7f6 fd19 	bl	800121c <__aeabi_fsub>
 800a7ea:	1c03      	adds	r3, r0, #0
 800a7ec:	1c18      	adds	r0, r3, #0
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	22a0      	movs	r2, #160	@ 0xa0
 800a7f2:	589b      	ldr	r3, [r3, r2]
 800a7f4:	1c19      	adds	r1, r3, #0
 800a7f6:	f7f6 fbd3 	bl	8000fa0 <__aeabi_fmul>
 800a7fa:	1c03      	adds	r3, r0, #0
 800a7fc:	1c1c      	adds	r4, r3, #0
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	68b8      	ldr	r0, [r7, #8]
 800a802:	f7f6 fbcd 	bl	8000fa0 <__aeabi_fmul>
 800a806:	1c03      	adds	r3, r0, #0
 800a808:	1c19      	adds	r1, r3, #0
 800a80a:	1c20      	adds	r0, r4, #0
 800a80c:	f7f6 f858 	bl	80008c0 <__aeabi_fadd>
 800a810:	1c03      	adds	r3, r0, #0
 800a812:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	22a0      	movs	r2, #160	@ 0xa0
 800a818:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	22a0      	movs	r2, #160	@ 0xa0
 800a81e:	589b      	ldr	r3, [r3, r2]
}
 800a820:	1c18      	adds	r0, r3, #0
 800a822:	46bd      	mov	sp, r7
 800a824:	b007      	add	sp, #28
 800a826:	bd90      	pop	{r4, r7, pc}
 800a828:	be4ccccd 	.word	0xbe4ccccd
 800a82c:	43f00000 	.word	0x43f00000
 800a830:	41a00000 	.word	0x41a00000

0800a834 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sen5x.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	000a      	movs	r2, r1
 800a83e:	1cbb      	adds	r3, r7, #2
 800a840:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800a842:	230d      	movs	r3, #13
 800a844:	18fb      	adds	r3, r7, r3
 800a846:	22ff      	movs	r2, #255	@ 0xff
 800a848:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a84a:	230e      	movs	r3, #14
 800a84c:	18fb      	adds	r3, r7, r3
 800a84e:	2200      	movs	r2, #0
 800a850:	801a      	strh	r2, [r3, #0]
 800a852:	e037      	b.n	800a8c4 <sensirion_i2c_generate_crc+0x90>
        crc ^= (data[current_byte]);
 800a854:	230e      	movs	r3, #14
 800a856:	18fb      	adds	r3, r7, r3
 800a858:	881b      	ldrh	r3, [r3, #0]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	18d3      	adds	r3, r2, r3
 800a85e:	7819      	ldrb	r1, [r3, #0]
 800a860:	220d      	movs	r2, #13
 800a862:	18bb      	adds	r3, r7, r2
 800a864:	18ba      	adds	r2, r7, r2
 800a866:	7812      	ldrb	r2, [r2, #0]
 800a868:	404a      	eors	r2, r1
 800a86a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a86c:	230c      	movs	r3, #12
 800a86e:	18fb      	adds	r3, r7, r3
 800a870:	2208      	movs	r2, #8
 800a872:	701a      	strb	r2, [r3, #0]
 800a874:	e01b      	b.n	800a8ae <sensirion_i2c_generate_crc+0x7a>
            if (crc & 0x80)
 800a876:	210d      	movs	r1, #13
 800a878:	187b      	adds	r3, r7, r1
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	b25b      	sxtb	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	da09      	bge.n	800a896 <sensirion_i2c_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800a882:	187b      	adds	r3, r7, r1
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	b25b      	sxtb	r3, r3
 800a88a:	2231      	movs	r2, #49	@ 0x31
 800a88c:	4053      	eors	r3, r2
 800a88e:	b25a      	sxtb	r2, r3
 800a890:	187b      	adds	r3, r7, r1
 800a892:	701a      	strb	r2, [r3, #0]
 800a894:	e005      	b.n	800a8a2 <sensirion_i2c_generate_crc+0x6e>
            else
                crc = (crc << 1);
 800a896:	230d      	movs	r3, #13
 800a898:	18fa      	adds	r2, r7, r3
 800a89a:	18fb      	adds	r3, r7, r3
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	18db      	adds	r3, r3, r3
 800a8a0:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800a8a2:	220c      	movs	r2, #12
 800a8a4:	18bb      	adds	r3, r7, r2
 800a8a6:	18ba      	adds	r2, r7, r2
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	230c      	movs	r3, #12
 800a8b0:	18fb      	adds	r3, r7, r3
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1de      	bne.n	800a876 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800a8b8:	220e      	movs	r2, #14
 800a8ba:	18bb      	adds	r3, r7, r2
 800a8bc:	18ba      	adds	r2, r7, r2
 800a8be:	8812      	ldrh	r2, [r2, #0]
 800a8c0:	3201      	adds	r2, #1
 800a8c2:	801a      	strh	r2, [r3, #0]
 800a8c4:	230e      	movs	r3, #14
 800a8c6:	18fa      	adds	r2, r7, r3
 800a8c8:	1cbb      	adds	r3, r7, #2
 800a8ca:	8812      	ldrh	r2, [r2, #0]
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3c0      	bcc.n	800a854 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800a8d2:	230d      	movs	r3, #13
 800a8d4:	18fb      	adds	r3, r7, r3
 800a8d6:	781b      	ldrb	r3, [r3, #0]
}
 800a8d8:	0018      	movs	r0, r3
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	b004      	add	sp, #16
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	0008      	movs	r0, r1
 800a8ea:	0011      	movs	r1, r2
 800a8ec:	1cbb      	adds	r3, r7, #2
 800a8ee:	1c02      	adds	r2, r0, #0
 800a8f0:	801a      	strh	r2, [r3, #0]
 800a8f2:	1c7b      	adds	r3, r7, #1
 800a8f4:	1c0a      	adds	r2, r1, #0
 800a8f6:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 800a8f8:	1cbb      	adds	r3, r7, #2
 800a8fa:	881a      	ldrh	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	0011      	movs	r1, r2
 800a900:	0018      	movs	r0, r3
 800a902:	f7ff ff97 	bl	800a834 <sensirion_i2c_generate_crc>
 800a906:	0003      	movs	r3, r0
 800a908:	001a      	movs	r2, r3
 800a90a:	1c7b      	adds	r3, r7, #1
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	4293      	cmp	r3, r2
 800a910:	d001      	beq.n	800a916 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800a912:	2301      	movs	r3, #1
 800a914:	e000      	b.n	800a918 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 800a916:	2300      	movs	r3, #0
}
 800a918:	0018      	movs	r0, r3
 800a91a:	46bd      	mov	sp, r7
 800a91c:	b002      	add	sp, #8
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	0008      	movs	r0, r1
 800a92a:	0011      	movs	r1, r2
 800a92c:	1cbb      	adds	r3, r7, #2
 800a92e:	1c02      	adds	r2, r0, #0
 800a930:	801a      	strh	r2, [r3, #0]
 800a932:	003b      	movs	r3, r7
 800a934:	1c0a      	adds	r2, r1, #0
 800a936:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 800a938:	003b      	movs	r3, r7
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	0a1b      	lsrs	r3, r3, #8
 800a93e:	b299      	uxth	r1, r3
 800a940:	1cbb      	adds	r3, r7, #2
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	1cba      	adds	r2, r7, #2
 800a946:	1c58      	adds	r0, r3, #1
 800a948:	8010      	strh	r0, [r2, #0]
 800a94a:	001a      	movs	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	189b      	adds	r3, r3, r2
 800a950:	b2ca      	uxtb	r2, r1
 800a952:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 800a954:	1cbb      	adds	r3, r7, #2
 800a956:	881b      	ldrh	r3, [r3, #0]
 800a958:	1cba      	adds	r2, r7, #2
 800a95a:	1c59      	adds	r1, r3, #1
 800a95c:	8011      	strh	r1, [r2, #0]
 800a95e:	001a      	movs	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	189b      	adds	r3, r3, r2
 800a964:	003a      	movs	r2, r7
 800a966:	8812      	ldrh	r2, [r2, #0]
 800a968:	b2d2      	uxtb	r2, r2
 800a96a:	701a      	strb	r2, [r3, #0]
    return offset;
 800a96c:	1cbb      	adds	r3, r7, #2
 800a96e:	881b      	ldrh	r3, [r3, #0]
}
 800a970:	0018      	movs	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	b002      	add	sp, #8
 800a976:	bd80      	pop	{r7, pc}

0800a978 <sensirion_i2c_add_uint16_t_to_buffer>:
                                             int32_t data) {
    return sensirion_i2c_add_uint32_t_to_buffer(buffer, offset, (uint32_t)data);
}

uint16_t sensirion_i2c_add_uint16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint16_t data) {
 800a978:	b590      	push	{r4, r7, lr}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	0008      	movs	r0, r1
 800a982:	0011      	movs	r1, r2
 800a984:	1cbb      	adds	r3, r7, #2
 800a986:	1c02      	adds	r2, r0, #0
 800a988:	801a      	strh	r2, [r3, #0]
 800a98a:	003b      	movs	r3, r7
 800a98c:	1c0a      	adds	r2, r1, #0
 800a98e:	801a      	strh	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0xFF00) >> 8);
 800a990:	003b      	movs	r3, r7
 800a992:	881b      	ldrh	r3, [r3, #0]
 800a994:	0a1b      	lsrs	r3, r3, #8
 800a996:	b299      	uxth	r1, r3
 800a998:	1cbb      	adds	r3, r7, #2
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	1cba      	adds	r2, r7, #2
 800a99e:	1c58      	adds	r0, r3, #1
 800a9a0:	8010      	strh	r0, [r2, #0]
 800a9a2:	001a      	movs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	189b      	adds	r3, r3, r2
 800a9a8:	b2ca      	uxtb	r2, r1
 800a9aa:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((data & 0x00FF) >> 0);
 800a9ac:	1cbb      	adds	r3, r7, #2
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	1cba      	adds	r2, r7, #2
 800a9b2:	1c59      	adds	r1, r3, #1
 800a9b4:	8011      	strh	r1, [r2, #0]
 800a9b6:	001a      	movs	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	189b      	adds	r3, r3, r2
 800a9bc:	003a      	movs	r2, r7
 800a9be:	8812      	ldrh	r2, [r2, #0]
 800a9c0:	b2d2      	uxtb	r2, r2
 800a9c2:	701a      	strb	r2, [r3, #0]
    buffer[offset] = sensirion_i2c_generate_crc(
        &buffer[offset - SENSIRION_WORD_SIZE], SENSIRION_WORD_SIZE);
 800a9c4:	1cbb      	adds	r3, r7, #2
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	3b02      	subs	r3, #2
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	18d0      	adds	r0, r2, r3
    buffer[offset] = sensirion_i2c_generate_crc(
 800a9ce:	1cbb      	adds	r3, r7, #2
 800a9d0:	881b      	ldrh	r3, [r3, #0]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	18d4      	adds	r4, r2, r3
 800a9d6:	2102      	movs	r1, #2
 800a9d8:	f7ff ff2c 	bl	800a834 <sensirion_i2c_generate_crc>
 800a9dc:	0003      	movs	r3, r0
 800a9de:	7023      	strb	r3, [r4, #0]
    offset++;
 800a9e0:	1cbb      	adds	r3, r7, #2
 800a9e2:	881a      	ldrh	r2, [r3, #0]
 800a9e4:	1cbb      	adds	r3, r7, #2
 800a9e6:	3201      	adds	r2, #1
 800a9e8:	801a      	strh	r2, [r3, #0]

    return offset;
 800a9ea:	1cbb      	adds	r3, r7, #2
 800a9ec:	881b      	ldrh	r3, [r3, #0]
}
 800a9ee:	0018      	movs	r0, r3
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	b003      	add	sp, #12
 800a9f4:	bd90      	pop	{r4, r7, pc}

0800a9f6 <sensirion_i2c_add_int16_t_to_buffer>:

uint16_t sensirion_i2c_add_int16_t_to_buffer(uint8_t* buffer, uint16_t offset,
                                             int16_t data) {
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b082      	sub	sp, #8
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	0008      	movs	r0, r1
 800aa00:	0011      	movs	r1, r2
 800aa02:	1cbb      	adds	r3, r7, #2
 800aa04:	1c02      	adds	r2, r0, #0
 800aa06:	801a      	strh	r2, [r3, #0]
 800aa08:	003b      	movs	r3, r7
 800aa0a:	1c0a      	adds	r2, r1, #0
 800aa0c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_add_uint16_t_to_buffer(buffer, offset, (uint16_t)data);
 800aa0e:	003b      	movs	r3, r7
 800aa10:	881a      	ldrh	r2, [r3, #0]
 800aa12:	1cbb      	adds	r3, r7, #2
 800aa14:	8819      	ldrh	r1, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	0018      	movs	r0, r3
 800aa1a:	f7ff ffad 	bl	800a978 <sensirion_i2c_add_uint16_t_to_buffer>
 800aa1e:	0003      	movs	r3, r0
}
 800aa20:	0018      	movs	r0, r3
 800aa22:	46bd      	mov	sp, r7
 800aa24:	b002      	add	sp, #8
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6039      	str	r1, [r7, #0]
 800aa30:	0011      	movs	r1, r2
 800aa32:	1dfb      	adds	r3, r7, #7
 800aa34:	1c02      	adds	r2, r0, #0
 800aa36:	701a      	strb	r2, [r3, #0]
 800aa38:	1d3b      	adds	r3, r7, #4
 800aa3a:	1c0a      	adds	r2, r1, #0
 800aa3c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800aa3e:	1d3b      	adds	r3, r7, #4
 800aa40:	881a      	ldrh	r2, [r3, #0]
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	1dfb      	adds	r3, r7, #7
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	0018      	movs	r0, r3
 800aa4a:	f7fe fa55 	bl	8008ef8 <sensirion_i2c_hal_write>
 800aa4e:	0003      	movs	r3, r0
}
 800aa50:	0018      	movs	r0, r3
 800aa52:	46bd      	mov	sp, r7
 800aa54:	b002      	add	sp, #8
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800aa58:	b5b0      	push	{r4, r5, r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6039      	str	r1, [r7, #0]
 800aa60:	0011      	movs	r1, r2
 800aa62:	1dfb      	adds	r3, r7, #7
 800aa64:	1c02      	adds	r2, r0, #0
 800aa66:	701a      	strb	r2, [r3, #0]
 800aa68:	1d3b      	adds	r3, r7, #4
 800aa6a:	1c0a      	adds	r2, r1, #0
 800aa6c:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800aa6e:	1d3b      	adds	r3, r7, #4
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	085b      	lsrs	r3, r3, #1
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	220a      	movs	r2, #10
 800aa78:	18ba      	adds	r2, r7, r2
 800aa7a:	1c19      	adds	r1, r3, #0
 800aa7c:	1c0b      	adds	r3, r1, #0
 800aa7e:	18db      	adds	r3, r3, r3
 800aa80:	185b      	adds	r3, r3, r1
 800aa82:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 800aa84:	1d3b      	adds	r3, r7, #4
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 800aa92:	2304      	movs	r3, #4
 800aa94:	e06b      	b.n	800ab6e <sensirion_i2c_read_data_inplace+0x116>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 800aa96:	230a      	movs	r3, #10
 800aa98:	18fb      	adds	r3, r7, r3
 800aa9a:	881a      	ldrh	r2, [r3, #0]
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	1dfb      	adds	r3, r7, #7
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	0018      	movs	r0, r3
 800aaa4:	f7fe fa08 	bl	8008eb8 <sensirion_i2c_hal_read>
 800aaa8:	0003      	movs	r3, r0
 800aaaa:	001a      	movs	r2, r3
 800aaac:	2108      	movs	r1, #8
 800aaae:	187b      	adds	r3, r7, r1
 800aab0:	801a      	strh	r2, [r3, #0]
    if (error) {
 800aab2:	000a      	movs	r2, r1
 800aab4:	18bb      	adds	r3, r7, r2
 800aab6:	2100      	movs	r1, #0
 800aab8:	5e5b      	ldrsh	r3, [r3, r1]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <sensirion_i2c_read_data_inplace+0x6e>
        return error;
 800aabe:	18bb      	adds	r3, r7, r2
 800aac0:	2200      	movs	r2, #0
 800aac2:	5e9b      	ldrsh	r3, [r3, r2]
 800aac4:	e053      	b.n	800ab6e <sensirion_i2c_read_data_inplace+0x116>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800aac6:	230e      	movs	r3, #14
 800aac8:	18fb      	adds	r3, r7, r3
 800aaca:	2200      	movs	r2, #0
 800aacc:	801a      	strh	r2, [r3, #0]
 800aace:	230c      	movs	r3, #12
 800aad0:	18fb      	adds	r3, r7, r3
 800aad2:	2200      	movs	r2, #0
 800aad4:	801a      	strh	r2, [r3, #0]
 800aad6:	e041      	b.n	800ab5c <sensirion_i2c_read_data_inplace+0x104>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800aad8:	210e      	movs	r1, #14
 800aada:	187b      	adds	r3, r7, r1
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800aae2:	187b      	adds	r3, r7, r1
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	3302      	adds	r3, #2
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	001a      	movs	r2, r3
 800aaf0:	2102      	movs	r1, #2
 800aaf2:	f7ff fef5 	bl	800a8e0 <sensirion_i2c_check_crc>
 800aaf6:	0003      	movs	r3, r0
 800aaf8:	001a      	movs	r2, r3
 800aafa:	2108      	movs	r1, #8
 800aafc:	187b      	adds	r3, r7, r1
 800aafe:	801a      	strh	r2, [r3, #0]
        if (error) {
 800ab00:	000a      	movs	r2, r1
 800ab02:	18bb      	adds	r3, r7, r2
 800ab04:	2100      	movs	r1, #0
 800ab06:	5e5b      	ldrsh	r3, [r3, r1]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <sensirion_i2c_read_data_inplace+0xbc>
            return error;
 800ab0c:	18bb      	adds	r3, r7, r2
 800ab0e:	2200      	movs	r2, #0
 800ab10:	5e9b      	ldrsh	r3, [r3, r2]
 800ab12:	e02c      	b.n	800ab6e <sensirion_i2c_read_data_inplace+0x116>
        }
        buffer[j++] = buffer[i];
 800ab14:	240e      	movs	r4, #14
 800ab16:	193b      	adds	r3, r7, r4
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	18d2      	adds	r2, r2, r3
 800ab1e:	250c      	movs	r5, #12
 800ab20:	197b      	adds	r3, r7, r5
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	1979      	adds	r1, r7, r5
 800ab26:	1c58      	adds	r0, r3, #1
 800ab28:	8008      	strh	r0, [r1, #0]
 800ab2a:	0019      	movs	r1, r3
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	185b      	adds	r3, r3, r1
 800ab30:	7812      	ldrb	r2, [r2, #0]
 800ab32:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800ab34:	193b      	adds	r3, r7, r4
 800ab36:	881b      	ldrh	r3, [r3, #0]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	683a      	ldr	r2, [r7, #0]
 800ab3c:	18d2      	adds	r2, r2, r3
 800ab3e:	197b      	adds	r3, r7, r5
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	1979      	adds	r1, r7, r5
 800ab44:	1c58      	adds	r0, r3, #1
 800ab46:	8008      	strh	r0, [r1, #0]
 800ab48:	0019      	movs	r1, r3
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	185b      	adds	r3, r3, r1
 800ab4e:	7812      	ldrb	r2, [r2, #0]
 800ab50:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800ab52:	193b      	adds	r3, r7, r4
 800ab54:	193a      	adds	r2, r7, r4
 800ab56:	8812      	ldrh	r2, [r2, #0]
 800ab58:	3203      	adds	r2, #3
 800ab5a:	801a      	strh	r2, [r3, #0]
 800ab5c:	230e      	movs	r3, #14
 800ab5e:	18fa      	adds	r2, r7, r3
 800ab60:	230a      	movs	r3, #10
 800ab62:	18fb      	adds	r3, r7, r3
 800ab64:	8812      	ldrh	r2, [r2, #0]
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d3b5      	bcc.n	800aad8 <sensirion_i2c_read_data_inplace+0x80>
    }

    return NO_ERROR;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	0018      	movs	r0, r3
 800ab70:	46bd      	mov	sp, r7
 800ab72:	b004      	add	sp, #16
 800ab74:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ab78 <ReadRegister>:

//void forceVOCstart(void) {
//  SGP_MeasurementDutyCycle = HAL_GetTick() + 500;
//}

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800ab78:	b590      	push	{r4, r7, lr}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6039      	str	r1, [r7, #0]
 800ab80:	0011      	movs	r1, r2
 800ab82:	1dfb      	adds	r3, r7, #7
 800ab84:	1c02      	adds	r2, r0, #0
 800ab86:	701a      	strb	r2, [r3, #0]
 800ab88:	1dbb      	adds	r3, r7, #6
 800ab8a:	1c0a      	adds	r2, r1, #0
 800ab8c:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 800ab8e:	4b08      	ldr	r3, [pc, #32]	@ (800abb0 <ReadRegister+0x38>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d008      	beq.n	800aba8 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800ab96:	4b06      	ldr	r3, [pc, #24]	@ (800abb0 <ReadRegister+0x38>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	1dba      	adds	r2, r7, #6
 800ab9c:	7814      	ldrb	r4, [r2, #0]
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	1dfa      	adds	r2, r7, #7
 800aba2:	7810      	ldrb	r0, [r2, #0]
 800aba4:	0022      	movs	r2, r4
 800aba6:	4798      	blx	r3
  }
}
 800aba8:	46c0      	nop			@ (mov r8, r8)
 800abaa:	46bd      	mov	sp, r7
 800abac:	b003      	add	sp, #12
 800abae:	bd90      	pop	{r4, r7, pc}
 800abb0:	200011fc 	.word	0x200011fc

0800abb4 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800abb4:	b590      	push	{r4, r7, lr}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6039      	str	r1, [r7, #0]
 800abbc:	0011      	movs	r1, r2
 800abbe:	1dfb      	adds	r3, r7, #7
 800abc0:	1c02      	adds	r2, r0, #0
 800abc2:	701a      	strb	r2, [r3, #0]
 800abc4:	1dbb      	adds	r3, r7, #6
 800abc6:	1c0a      	adds	r2, r1, #0
 800abc8:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800abca:	4b08      	ldr	r3, [pc, #32]	@ (800abec <WriteRegister+0x38>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d008      	beq.n	800abe4 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800abd2:	4b06      	ldr	r3, [pc, #24]	@ (800abec <WriteRegister+0x38>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	1dba      	adds	r2, r7, #6
 800abd8:	7814      	ldrb	r4, [r2, #0]
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	1dfa      	adds	r2, r7, #7
 800abde:	7810      	ldrb	r0, [r2, #0]
 800abe0:	0022      	movs	r2, r4
 800abe2:	4798      	blx	r3
  }
}
 800abe4:	46c0      	nop			@ (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	b003      	add	sp, #12
 800abea:	bd90      	pop	{r4, r7, pc}
 800abec:	20001200 	.word	0x20001200

0800abf0 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800abfa:	4b07      	ldr	r3, [pc, #28]	@ (800ac18 <SGP_Init+0x28>)
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 800ac00:	4b06      	ldr	r3, [pc, #24]	@ (800ac1c <SGP_Init+0x2c>)
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800ac06:	4b06      	ldr	r3, [pc, #24]	@ (800ac20 <SGP_Init+0x30>)
 800ac08:	2100      	movs	r1, #0
 800ac0a:	0018      	movs	r0, r3
 800ac0c:	f7fe ff8c 	bl	8009b28 <GasIndexAlgorithm_init>
}
 800ac10:	46c0      	nop			@ (mov r8, r8)
 800ac12:	46bd      	mov	sp, r7
 800ac14:	b002      	add	sp, #8
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	200011fc 	.word	0x200011fc
 800ac1c:	20001200 	.word	0x20001200
 800ac20:	20001210 	.word	0x20001210

0800ac24 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 800ac24:	b580      	push	{r7, lr}
 800ac26:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800ac28:	4b13      	ldr	r3, [pc, #76]	@ (800ac78 <SGP_StartMeasurement+0x54>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00d      	beq.n	800ac4c <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ac30:	4b12      	ldr	r3, [pc, #72]	@ (800ac7c <SGP_StartMeasurement+0x58>)
 800ac32:	2208      	movs	r2, #8
 800ac34:	0019      	movs	r1, r3
 800ac36:	2059      	movs	r0, #89	@ 0x59
 800ac38:	f7ff ffbc 	bl	800abb4 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800ac3c:	f002 fc88 	bl	800d550 <GetCurrentHalTicks>
 800ac40:	0003      	movs	r3, r0
 800ac42:	331e      	adds	r3, #30
 800ac44:	001a      	movs	r2, r3
 800ac46:	4b0e      	ldr	r3, [pc, #56]	@ (800ac80 <SGP_StartMeasurement+0x5c>)
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	e00c      	b.n	800ac66 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ac4c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <SGP_StartMeasurement+0x60>)
 800ac4e:	2208      	movs	r2, #8
 800ac50:	0019      	movs	r1, r3
 800ac52:	2059      	movs	r0, #89	@ 0x59
 800ac54:	f7ff ffae 	bl	800abb4 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800ac58:	f002 fc7a 	bl	800d550 <GetCurrentHalTicks>
 800ac5c:	0003      	movs	r3, r0
 800ac5e:	33aa      	adds	r3, #170	@ 0xaa
 800ac60:	001a      	movs	r2, r3
 800ac62:	4b09      	ldr	r3, [pc, #36]	@ (800ac88 <SGP_StartMeasurement+0x64>)
 800ac64:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800ac66:	4b09      	ldr	r3, [pc, #36]	@ (800ac8c <SGP_StartMeasurement+0x68>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 800ac6c:	4b08      	ldr	r3, [pc, #32]	@ (800ac90 <SGP_StartMeasurement+0x6c>)
 800ac6e:	2200      	movs	r2, #0
 800ac70:	701a      	strb	r2, [r3, #0]
}
 800ac72:	46c0      	nop			@ (mov r8, r8)
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	200012b8 	.word	0x200012b8
 800ac7c:	20000094 	.word	0x20000094
 800ac80:	200000a8 	.word	0x200000a8
 800ac84:	2000008c 	.word	0x2000008c
 800ac88:	200000a0 	.word	0x200000a0
 800ac8c:	2000120e 	.word	0x2000120e
 800ac90:	2000120f 	.word	0x2000120f

0800ac94 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800ac94:	b580      	push	{r7, lr}
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	4b04      	ldr	r3, [pc, #16]	@ (800acac <SGP_HeatedUp+0x18>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f002 fb87 	bl	800d3b0 <TimestampIsReached>
 800aca2:	0003      	movs	r3, r0
 800aca4:	0018      	movs	r0, r3
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	46c0      	nop			@ (mov r8, r8)
 800acac:	200000a0 	.word	0x200000a0

0800acb0 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800acb4:	4b04      	ldr	r3, [pc, #16]	@ (800acc8 <SGP_MeasurementReady+0x18>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	0018      	movs	r0, r3
 800acba:	f002 fb79 	bl	800d3b0 <TimestampIsReached>
 800acbe:	0003      	movs	r3, r0
}
 800acc0:	0018      	movs	r0, r3
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	46c0      	nop			@ (mov r8, r8)
 800acc8:	200000a8 	.word	0x200000a8

0800accc <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 800accc:	b580      	push	{r7, lr}
 800acce:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 800acd0:	4b04      	ldr	r3, [pc, #16]	@ (800ace4 <SGP_MeasurementDone+0x18>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	0018      	movs	r0, r3
 800acd6:	f002 fb6b 	bl	800d3b0 <TimestampIsReached>
 800acda:	0003      	movs	r3, r0
}
 800acdc:	0018      	movs	r0, r3
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	46c0      	nop			@ (mov r8, r8)
 800ace4:	200000a4 	.word	0x200000a4

0800ace8 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800acec:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <SGP_TurnHeaterOff+0x18>)
 800acee:	2202      	movs	r2, #2
 800acf0:	0019      	movs	r1, r3
 800acf2:	2059      	movs	r0, #89	@ 0x59
 800acf4:	f7ff ff5e 	bl	800abb4 <WriteRegister>
}
 800acf8:	46c0      	nop			@ (mov r8, r8)
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	46c0      	nop			@ (mov r8, r8)
 800ad00:	20000084 	.word	0x20000084

0800ad04 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800ad04:	b5b0      	push	{r4, r5, r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af02      	add	r7, sp, #8
 800ad0a:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 800ad0c:	f7ff ffc2 	bl	800ac94 <SGP_HeatedUp>
 800ad10:	1e03      	subs	r3, r0, #0
 800ad12:	d038      	beq.n	800ad86 <SGP_GetMeasurementValues+0x82>
 800ad14:	4bd2      	ldr	r3, [pc, #840]	@ (800b060 <SGP_GetMeasurementValues+0x35c>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	4053      	eors	r3, r2
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d031      	beq.n	800ad86 <SGP_GetMeasurementValues+0x82>
 800ad22:	4bd0      	ldr	r3, [pc, #832]	@ (800b064 <SGP_GetMeasurementValues+0x360>)
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2201      	movs	r2, #1
 800ad28:	4053      	eors	r3, r2
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d02a      	beq.n	800ad86 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up");
 800ad30:	4acd      	ldr	r2, [pc, #820]	@ (800b068 <SGP_GetMeasurementValues+0x364>)
 800ad32:	4bce      	ldr	r3, [pc, #824]	@ (800b06c <SGP_GetMeasurementValues+0x368>)
 800ad34:	0019      	movs	r1, r3
 800ad36:	2003      	movs	r0, #3
 800ad38:	f002 fb90 	bl	800d45c <CreateLine>
    HeatUpIsDone = true;
 800ad3c:	4bc8      	ldr	r3, [pc, #800]	@ (800b060 <SGP_GetMeasurementValues+0x35c>)
 800ad3e:	2201      	movs	r2, #1
 800ad40:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800ad42:	4bcb      	ldr	r3, [pc, #812]	@ (800b070 <SGP_GetMeasurementValues+0x36c>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00d      	beq.n	800ad66 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ad4a:	4bca      	ldr	r3, [pc, #808]	@ (800b074 <SGP_GetMeasurementValues+0x370>)
 800ad4c:	2208      	movs	r2, #8
 800ad4e:	0019      	movs	r1, r3
 800ad50:	2059      	movs	r0, #89	@ 0x59
 800ad52:	f7ff ff2f 	bl	800abb4 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800ad56:	f002 fbfb 	bl	800d550 <GetCurrentHalTicks>
 800ad5a:	0003      	movs	r3, r0
 800ad5c:	331e      	adds	r3, #30
 800ad5e:	001a      	movs	r2, r3
 800ad60:	4bc5      	ldr	r3, [pc, #788]	@ (800b078 <SGP_GetMeasurementValues+0x374>)
 800ad62:	601a      	str	r2, [r3, #0]
 800ad64:	e00c      	b.n	800ad80 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800ad66:	4bc5      	ldr	r3, [pc, #788]	@ (800b07c <SGP_GetMeasurementValues+0x378>)
 800ad68:	2208      	movs	r2, #8
 800ad6a:	0019      	movs	r1, r3
 800ad6c:	2059      	movs	r0, #89	@ 0x59
 800ad6e:	f7ff ff21 	bl	800abb4 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800ad72:	f002 fbed 	bl	800d550 <GetCurrentHalTicks>
 800ad76:	0003      	movs	r3, r0
 800ad78:	331e      	adds	r3, #30
 800ad7a:	001a      	movs	r2, r3
 800ad7c:	4bbe      	ldr	r3, [pc, #760]	@ (800b078 <SGP_GetMeasurementValues+0x374>)
 800ad7e:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800ad80:	4bb8      	ldr	r3, [pc, #736]	@ (800b064 <SGP_GetMeasurementValues+0x360>)
 800ad82:	2201      	movs	r2, #1
 800ad84:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800ad86:	4bb6      	ldr	r3, [pc, #728]	@ (800b060 <SGP_GetMeasurementValues+0x35c>)
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d100      	bne.n	800ad90 <SGP_GetMeasurementValues+0x8c>
 800ad8e:	e1a1      	b.n	800b0d4 <SGP_GetMeasurementValues+0x3d0>
 800ad90:	f7ff ff8e 	bl	800acb0 <SGP_MeasurementReady>
 800ad94:	1e03      	subs	r3, r0, #0
 800ad96:	d100      	bne.n	800ad9a <SGP_GetMeasurementValues+0x96>
 800ad98:	e19c      	b.n	800b0d4 <SGP_GetMeasurementValues+0x3d0>
 800ad9a:	4bb9      	ldr	r3, [pc, #740]	@ (800b080 <SGP_GetMeasurementValues+0x37c>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4053      	eors	r3, r2
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d100      	bne.n	800adaa <SGP_GetMeasurementValues+0xa6>
 800ada8:	e194      	b.n	800b0d4 <SGP_GetMeasurementValues+0x3d0>
    Debug("SGP sample[%i] is ready", SGP_AmountOfSamplesDone + 1);
 800adaa:	4bb6      	ldr	r3, [pc, #728]	@ (800b084 <SGP_GetMeasurementValues+0x380>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	3301      	adds	r3, #1
 800adb0:	4ab5      	ldr	r2, [pc, #724]	@ (800b088 <SGP_GetMeasurementValues+0x384>)
 800adb2:	49ae      	ldr	r1, [pc, #696]	@ (800b06c <SGP_GetMeasurementValues+0x368>)
 800adb4:	2003      	movs	r0, #3
 800adb6:	f002 fb51 	bl	800d45c <CreateLine>
    MeasurementIsReady = true;
 800adba:	4bb1      	ldr	r3, [pc, #708]	@ (800b080 <SGP_GetMeasurementValues+0x37c>)
 800adbc:	2201      	movs	r2, #1
 800adbe:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 800adc0:	4bb2      	ldr	r3, [pc, #712]	@ (800b08c <SGP_GetMeasurementValues+0x388>)
 800adc2:	2203      	movs	r2, #3
 800adc4:	0019      	movs	r1, r3
 800adc6:	2059      	movs	r0, #89	@ 0x59
 800adc8:	f7ff fed6 	bl	800ab78 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800adcc:	4baf      	ldr	r3, [pc, #700]	@ (800b08c <SGP_GetMeasurementValues+0x388>)
 800adce:	2203      	movs	r2, #3
 800add0:	2103      	movs	r1, #3
 800add2:	0018      	movs	r0, r3
 800add4:	f000 f9e4 	bl	800b1a0 <CheckCRC>
 800add8:	0003      	movs	r3, r0
 800adda:	001a      	movs	r2, r3
 800addc:	2301      	movs	r3, #1
 800adde:	4053      	eors	r3, r2
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d02a      	beq.n	800ae3c <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800ade6:	4aaa      	ldr	r2, [pc, #680]	@ (800b090 <SGP_GetMeasurementValues+0x38c>)
 800ade8:	4baa      	ldr	r3, [pc, #680]	@ (800b094 <SGP_GetMeasurementValues+0x390>)
 800adea:	0019      	movs	r1, r3
 800adec:	2001      	movs	r0, #1
 800adee:	f002 fb35 	bl	800d45c <CreateLine>
      Info("SGP_Measure buffer structure:");
 800adf2:	4aa9      	ldr	r2, [pc, #676]	@ (800b098 <SGP_GetMeasurementValues+0x394>)
 800adf4:	4ba9      	ldr	r3, [pc, #676]	@ (800b09c <SGP_GetMeasurementValues+0x398>)
 800adf6:	0019      	movs	r1, r3
 800adf8:	2002      	movs	r0, #2
 800adfa:	f002 fb2f 	bl	800d45c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800adfe:	230f      	movs	r3, #15
 800ae00:	18fb      	adds	r3, r7, r3
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
 800ae06:	e012      	b.n	800ae2e <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 800ae08:	240f      	movs	r4, #15
 800ae0a:	193b      	adds	r3, r7, r4
 800ae0c:	7818      	ldrb	r0, [r3, #0]
 800ae0e:	193b      	adds	r3, r7, r4
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	4a9e      	ldr	r2, [pc, #632]	@ (800b08c <SGP_GetMeasurementValues+0x388>)
 800ae14:	5cd3      	ldrb	r3, [r2, r3]
 800ae16:	4aa2      	ldr	r2, [pc, #648]	@ (800b0a0 <SGP_GetMeasurementValues+0x39c>)
 800ae18:	4994      	ldr	r1, [pc, #592]	@ (800b06c <SGP_GetMeasurementValues+0x368>)
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	0003      	movs	r3, r0
 800ae1e:	2003      	movs	r0, #3
 800ae20:	f002 fb1c 	bl	800d45c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800ae24:	193b      	adds	r3, r7, r4
 800ae26:	781a      	ldrb	r2, [r3, #0]
 800ae28:	193b      	adds	r3, r7, r4
 800ae2a:	3201      	adds	r2, #1
 800ae2c:	701a      	strb	r2, [r3, #0]
 800ae2e:	230f      	movs	r3, #15
 800ae30:	18fb      	adds	r3, r7, r3
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d9e7      	bls.n	800ae08 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	e163      	b.n	800b104 <SGP_GetMeasurementValues+0x400>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800ae3c:	f002 fb88 	bl	800d550 <GetCurrentHalTicks>
 800ae40:	0003      	movs	r3, r0
 800ae42:	22fa      	movs	r2, #250	@ 0xfa
 800ae44:	0092      	lsls	r2, r2, #2
 800ae46:	189a      	adds	r2, r3, r2
 800ae48:	4b96      	ldr	r3, [pc, #600]	@ (800b0a4 <SGP_GetMeasurementValues+0x3a0>)
 800ae4a:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 800ae4c:	f7ff ff4c 	bl	800ace8 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone++;
 800ae50:	4b8c      	ldr	r3, [pc, #560]	@ (800b084 <SGP_GetMeasurementValues+0x380>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	4b8a      	ldr	r3, [pc, #552]	@ (800b084 <SGP_GetMeasurementValues+0x380>)
 800ae5a:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 800ae5c:	4b89      	ldr	r3, [pc, #548]	@ (800b084 <SGP_GetMeasurementValues+0x380>)
 800ae5e:	781a      	ldrb	r2, [r3, #0]
 800ae60:	4b91      	ldr	r3, [pc, #580]	@ (800b0a8 <SGP_GetMeasurementValues+0x3a4>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d200      	bcs.n	800ae6a <SGP_GetMeasurementValues+0x166>
 800ae68:	e134      	b.n	800b0d4 <SGP_GetMeasurementValues+0x3d0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800ae6a:	4b88      	ldr	r3, [pc, #544]	@ (800b08c <SGP_GetMeasurementValues+0x388>)
 800ae6c:	785b      	ldrb	r3, [r3, #1]
 800ae6e:	021b      	lsls	r3, r3, #8
 800ae70:	b21a      	sxth	r2, r3
 800ae72:	4b86      	ldr	r3, [pc, #536]	@ (800b08c <SGP_GetMeasurementValues+0x388>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	b21b      	sxth	r3, r3
 800ae78:	4313      	orrs	r3, r2
 800ae7a:	b21a      	sxth	r2, r3
 800ae7c:	240c      	movs	r4, #12
 800ae7e:	193b      	adds	r3, r7, r4
 800ae80:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800ae82:	193b      	adds	r3, r7, r4
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	4a89      	ldr	r2, [pc, #548]	@ (800b0ac <SGP_GetMeasurementValues+0x3a8>)
 800ae88:	4978      	ldr	r1, [pc, #480]	@ (800b06c <SGP_GetMeasurementValues+0x368>)
 800ae8a:	2003      	movs	r0, #3
 800ae8c:	f002 fae6 	bl	800d45c <CreateLine>
      int32_t tempVocIndex = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 800ae94:	193b      	adds	r3, r7, r4
 800ae96:	8819      	ldrh	r1, [r3, #0]
 800ae98:	2308      	movs	r3, #8
 800ae9a:	18fa      	adds	r2, r7, r3
 800ae9c:	4b84      	ldr	r3, [pc, #528]	@ (800b0b0 <SGP_GetMeasurementValues+0x3ac>)
 800ae9e:	0018      	movs	r0, r3
 800aea0:	f7fe fea6 	bl	8009bf0 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	4a83      	ldr	r2, [pc, #524]	@ (800b0b4 <SGP_GetMeasurementValues+0x3b0>)
 800aea8:	4970      	ldr	r1, [pc, #448]	@ (800b06c <SGP_GetMeasurementValues+0x368>)
 800aeaa:	2003      	movs	r0, #3
 800aeac:	f002 fad6 	bl	800d45c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dd5a      	ble.n	800af74 <SGP_GetMeasurementValues+0x270>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b64      	cmp	r3, #100	@ 0x64
 800aec4:	dc56      	bgt.n	800af74 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	0018      	movs	r0, r3
 800aecc:	f7f8 fa78 	bl	80033c0 <__aeabi_i2d>
 800aed0:	2200      	movs	r2, #0
 800aed2:	4b79      	ldr	r3, [pc, #484]	@ (800b0b8 <SGP_GetMeasurementValues+0x3b4>)
 800aed4:	f7f6 ff6e 	bl	8001db4 <__aeabi_ddiv>
 800aed8:	0002      	movs	r2, r0
 800aeda:	000b      	movs	r3, r1
 800aedc:	2000      	movs	r0, #0
 800aede:	4977      	ldr	r1, [pc, #476]	@ (800b0bc <SGP_GetMeasurementValues+0x3b8>)
 800aee0:	f7f7 fe74 	bl	8002bcc <__aeabi_dsub>
 800aee4:	0002      	movs	r2, r0
 800aee6:	000b      	movs	r3, r1
 800aee8:	0014      	movs	r4, r2
 800aeea:	001d      	movs	r5, r3
 800aeec:	4b74      	ldr	r3, [pc, #464]	@ (800b0c0 <SGP_GetMeasurementValues+0x3bc>)
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	0018      	movs	r0, r3
 800aef2:	f7f8 fa65 	bl	80033c0 <__aeabi_i2d>
 800aef6:	0002      	movs	r2, r0
 800aef8:	000b      	movs	r3, r1
 800aefa:	0020      	movs	r0, r4
 800aefc:	0029      	movs	r1, r5
 800aefe:	f7f7 fb9d 	bl	800263c <__aeabi_dmul>
 800af02:	0002      	movs	r2, r0
 800af04:	000b      	movs	r3, r1
 800af06:	0010      	movs	r0, r2
 800af08:	0019      	movs	r1, r3
 800af0a:	f7f5 fb9f 	bl	800064c <__aeabi_d2uiz>
 800af0e:	0003      	movs	r3, r0
 800af10:	b29a      	uxth	r2, r3
 800af12:	4b6c      	ldr	r3, [pc, #432]	@ (800b0c4 <SGP_GetMeasurementValues+0x3c0>)
 800af14:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	0018      	movs	r0, r3
 800af1c:	f7f8 fa50 	bl	80033c0 <__aeabi_i2d>
 800af20:	2200      	movs	r2, #0
 800af22:	4b65      	ldr	r3, [pc, #404]	@ (800b0b8 <SGP_GetMeasurementValues+0x3b4>)
 800af24:	f7f6 ff46 	bl	8001db4 <__aeabi_ddiv>
 800af28:	0002      	movs	r2, r0
 800af2a:	000b      	movs	r3, r1
 800af2c:	0014      	movs	r4, r2
 800af2e:	001d      	movs	r5, r3
 800af30:	4b63      	ldr	r3, [pc, #396]	@ (800b0c0 <SGP_GetMeasurementValues+0x3bc>)
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	0018      	movs	r0, r3
 800af36:	f7f8 fa43 	bl	80033c0 <__aeabi_i2d>
 800af3a:	0002      	movs	r2, r0
 800af3c:	000b      	movs	r3, r1
 800af3e:	0020      	movs	r0, r4
 800af40:	0029      	movs	r1, r5
 800af42:	f7f7 fb7b 	bl	800263c <__aeabi_dmul>
 800af46:	0002      	movs	r2, r0
 800af48:	000b      	movs	r3, r1
 800af4a:	0010      	movs	r0, r2
 800af4c:	0019      	movs	r1, r3
 800af4e:	f7f5 fb7d 	bl	800064c <__aeabi_d2uiz>
 800af52:	0003      	movs	r3, r0
 800af54:	b29a      	uxth	r2, r3
 800af56:	4b5c      	ldr	r3, [pc, #368]	@ (800b0c8 <SGP_GetMeasurementValues+0x3c4>)
 800af58:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 800af5a:	4b59      	ldr	r3, [pc, #356]	@ (800b0c0 <SGP_GetMeasurementValues+0x3bc>)
 800af5c:	881a      	ldrh	r2, [r3, #0]
 800af5e:	4b5b      	ldr	r3, [pc, #364]	@ (800b0cc <SGP_GetMeasurementValues+0x3c8>)
 800af60:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800af62:	4b5a      	ldr	r3, [pc, #360]	@ (800b0cc <SGP_GetMeasurementValues+0x3c8>)
 800af64:	8818      	ldrh	r0, [r3, #0]
 800af66:	4b57      	ldr	r3, [pc, #348]	@ (800b0c4 <SGP_GetMeasurementValues+0x3c0>)
 800af68:	8819      	ldrh	r1, [r3, #0]
 800af6a:	4b57      	ldr	r3, [pc, #348]	@ (800b0c8 <SGP_GetMeasurementValues+0x3c4>)
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	001a      	movs	r2, r3
 800af70:	f001 fb2e 	bl	800c5d0 <SetVocLED>
      }
      if(*vocIndex > 100){
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2b64      	cmp	r3, #100	@ 0x64
 800af7a:	dd66      	ble.n	800b04a <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	0018      	movs	r0, r3
 800af82:	f7f8 fa1d 	bl	80033c0 <__aeabi_i2d>
 800af86:	2200      	movs	r2, #0
 800af88:	4b4b      	ldr	r3, [pc, #300]	@ (800b0b8 <SGP_GetMeasurementValues+0x3b4>)
 800af8a:	f7f7 fe1f 	bl	8002bcc <__aeabi_dsub>
 800af8e:	0002      	movs	r2, r0
 800af90:	000b      	movs	r3, r1
 800af92:	0010      	movs	r0, r2
 800af94:	0019      	movs	r1, r3
 800af96:	2200      	movs	r2, #0
 800af98:	4b4d      	ldr	r3, [pc, #308]	@ (800b0d0 <SGP_GetMeasurementValues+0x3cc>)
 800af9a:	f7f6 ff0b 	bl	8001db4 <__aeabi_ddiv>
 800af9e:	0002      	movs	r2, r0
 800afa0:	000b      	movs	r3, r1
 800afa2:	0014      	movs	r4, r2
 800afa4:	001d      	movs	r5, r3
 800afa6:	4b46      	ldr	r3, [pc, #280]	@ (800b0c0 <SGP_GetMeasurementValues+0x3bc>)
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	0018      	movs	r0, r3
 800afac:	f7f8 fa08 	bl	80033c0 <__aeabi_i2d>
 800afb0:	0002      	movs	r2, r0
 800afb2:	000b      	movs	r3, r1
 800afb4:	0020      	movs	r0, r4
 800afb6:	0029      	movs	r1, r5
 800afb8:	f7f7 fb40 	bl	800263c <__aeabi_dmul>
 800afbc:	0002      	movs	r2, r0
 800afbe:	000b      	movs	r3, r1
 800afc0:	0010      	movs	r0, r2
 800afc2:	0019      	movs	r1, r3
 800afc4:	f7f5 fb42 	bl	800064c <__aeabi_d2uiz>
 800afc8:	0003      	movs	r3, r0
 800afca:	b29a      	uxth	r2, r3
 800afcc:	4b3d      	ldr	r3, [pc, #244]	@ (800b0c4 <SGP_GetMeasurementValues+0x3c0>)
 800afce:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	0018      	movs	r0, r3
 800afd6:	f7f8 f9f3 	bl	80033c0 <__aeabi_i2d>
 800afda:	2200      	movs	r2, #0
 800afdc:	4b36      	ldr	r3, [pc, #216]	@ (800b0b8 <SGP_GetMeasurementValues+0x3b4>)
 800afde:	f7f7 fdf5 	bl	8002bcc <__aeabi_dsub>
 800afe2:	0002      	movs	r2, r0
 800afe4:	000b      	movs	r3, r1
 800afe6:	0010      	movs	r0, r2
 800afe8:	0019      	movs	r1, r3
 800afea:	2200      	movs	r2, #0
 800afec:	4b38      	ldr	r3, [pc, #224]	@ (800b0d0 <SGP_GetMeasurementValues+0x3cc>)
 800afee:	f7f6 fee1 	bl	8001db4 <__aeabi_ddiv>
 800aff2:	0002      	movs	r2, r0
 800aff4:	000b      	movs	r3, r1
 800aff6:	2000      	movs	r0, #0
 800aff8:	4930      	ldr	r1, [pc, #192]	@ (800b0bc <SGP_GetMeasurementValues+0x3b8>)
 800affa:	f7f7 fde7 	bl	8002bcc <__aeabi_dsub>
 800affe:	0002      	movs	r2, r0
 800b000:	000b      	movs	r3, r1
 800b002:	0014      	movs	r4, r2
 800b004:	001d      	movs	r5, r3
 800b006:	4b2e      	ldr	r3, [pc, #184]	@ (800b0c0 <SGP_GetMeasurementValues+0x3bc>)
 800b008:	881b      	ldrh	r3, [r3, #0]
 800b00a:	0018      	movs	r0, r3
 800b00c:	f7f8 f9d8 	bl	80033c0 <__aeabi_i2d>
 800b010:	0002      	movs	r2, r0
 800b012:	000b      	movs	r3, r1
 800b014:	0020      	movs	r0, r4
 800b016:	0029      	movs	r1, r5
 800b018:	f7f7 fb10 	bl	800263c <__aeabi_dmul>
 800b01c:	0002      	movs	r2, r0
 800b01e:	000b      	movs	r3, r1
 800b020:	0010      	movs	r0, r2
 800b022:	0019      	movs	r1, r3
 800b024:	f7f5 fb12 	bl	800064c <__aeabi_d2uiz>
 800b028:	0003      	movs	r3, r0
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	4b27      	ldr	r3, [pc, #156]	@ (800b0cc <SGP_GetMeasurementValues+0x3c8>)
 800b02e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800b030:	4b23      	ldr	r3, [pc, #140]	@ (800b0c0 <SGP_GetMeasurementValues+0x3bc>)
 800b032:	881a      	ldrh	r2, [r3, #0]
 800b034:	4b24      	ldr	r3, [pc, #144]	@ (800b0c8 <SGP_GetMeasurementValues+0x3c4>)
 800b036:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 800b038:	4b24      	ldr	r3, [pc, #144]	@ (800b0cc <SGP_GetMeasurementValues+0x3c8>)
 800b03a:	8818      	ldrh	r0, [r3, #0]
 800b03c:	4b21      	ldr	r3, [pc, #132]	@ (800b0c4 <SGP_GetMeasurementValues+0x3c0>)
 800b03e:	8819      	ldrh	r1, [r3, #0]
 800b040:	4b21      	ldr	r3, [pc, #132]	@ (800b0c8 <SGP_GetMeasurementValues+0x3c4>)
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	001a      	movs	r2, r3
 800b046:	f001 fac3 	bl	800c5d0 <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 800b04a:	4b0e      	ldr	r3, [pc, #56]	@ (800b084 <SGP_GetMeasurementValues+0x380>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	701a      	strb	r2, [r3, #0]
//      Debug("SGP_Measurement completely done.");
      HT_MeasurementReceived = false;
 800b050:	4b07      	ldr	r3, [pc, #28]	@ (800b070 <SGP_GetMeasurementValues+0x36c>)
 800b052:	2200      	movs	r2, #0
 800b054:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800b056:	4b03      	ldr	r3, [pc, #12]	@ (800b064 <SGP_GetMeasurementValues+0x360>)
 800b058:	2200      	movs	r2, #0
 800b05a:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 800b05c:	2301      	movs	r3, #1
 800b05e:	e051      	b.n	800b104 <SGP_GetMeasurementValues+0x400>
 800b060:	2000120e 	.word	0x2000120e
 800b064:	200012b9 	.word	0x200012b9
 800b068:	08023414 	.word	0x08023414
 800b06c:	08023428 	.word	0x08023428
 800b070:	200012b8 	.word	0x200012b8
 800b074:	20000094 	.word	0x20000094
 800b078:	200000a8 	.word	0x200000a8
 800b07c:	2000008c 	.word	0x2000008c
 800b080:	2000120f 	.word	0x2000120f
 800b084:	2000120d 	.word	0x2000120d
 800b088:	0802342c 	.word	0x0802342c
 800b08c:	20001204 	.word	0x20001204
 800b090:	08023444 	.word	0x08023444
 800b094:	08023468 	.word	0x08023468
 800b098:	0802346c 	.word	0x0802346c
 800b09c:	0802348c 	.word	0x0802348c
 800b0a0:	08023490 	.word	0x08023490
 800b0a4:	200000a4 	.word	0x200000a4
 800b0a8:	2000009c 	.word	0x2000009c
 800b0ac:	080234b0 	.word	0x080234b0
 800b0b0:	20001210 	.word	0x20001210
 800b0b4:	080234c4 	.word	0x080234c4
 800b0b8:	40590000 	.word	0x40590000
 800b0bc:	3ff00000 	.word	0x3ff00000
 800b0c0:	200000ac 	.word	0x200000ac
 800b0c4:	200012be 	.word	0x200012be
 800b0c8:	200012bc 	.word	0x200012bc
 800b0cc:	200012ba 	.word	0x200012ba
 800b0d0:	40790000 	.word	0x40790000
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800b0d4:	f7ff fdfa 	bl	800accc <SGP_MeasurementDone>
 800b0d8:	1e03      	subs	r3, r0, #0
 800b0da:	d012      	beq.n	800b102 <SGP_GetMeasurementValues+0x3fe>
 800b0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b10c <SGP_GetMeasurementValues+0x408>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00e      	beq.n	800b102 <SGP_GetMeasurementValues+0x3fe>
 800b0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800b110 <SGP_GetMeasurementValues+0x40c>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00a      	beq.n	800b102 <SGP_GetMeasurementValues+0x3fe>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800b0ec:	4a09      	ldr	r2, [pc, #36]	@ (800b114 <SGP_GetMeasurementValues+0x410>)
 800b0ee:	4b0a      	ldr	r3, [pc, #40]	@ (800b118 <SGP_GetMeasurementValues+0x414>)
 800b0f0:	0019      	movs	r1, r3
 800b0f2:	2003      	movs	r0, #3
 800b0f4:	f002 f9b2 	bl	800d45c <CreateLine>
    SGP_StartMeasurement();
 800b0f8:	f7ff fd94 	bl	800ac24 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800b0fc:	4b07      	ldr	r3, [pc, #28]	@ (800b11c <SGP_GetMeasurementValues+0x418>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800b102:	2300      	movs	r3, #0
}
 800b104:	0018      	movs	r0, r3
 800b106:	46bd      	mov	sp, r7
 800b108:	b004      	add	sp, #16
 800b10a:	bdb0      	pop	{r4, r5, r7, pc}
 800b10c:	2000120e 	.word	0x2000120e
 800b110:	2000120f 	.word	0x2000120f
 800b114:	080234d8 	.word	0x080234d8
 800b118:	08023428 	.word	0x08023428
 800b11c:	200012b9 	.word	0x200012b9

0800b120 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 800b126:	4b1a      	ldr	r3, [pc, #104]	@ (800b190 <SGP_DeviceConnected+0x70>)
 800b128:	2202      	movs	r2, #2
 800b12a:	0019      	movs	r1, r3
 800b12c:	2059      	movs	r0, #89	@ 0x59
 800b12e:	f7ff fd41 	bl	800abb4 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800b132:	2001      	movs	r0, #1
 800b134:	f002 fd3a 	bl	800dbac <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 800b138:	4b16      	ldr	r3, [pc, #88]	@ (800b194 <SGP_DeviceConnected+0x74>)
 800b13a:	2209      	movs	r2, #9
 800b13c:	0019      	movs	r1, r3
 800b13e:	2059      	movs	r0, #89	@ 0x59
 800b140:	f7ff fd1a 	bl	800ab78 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b144:	1dfb      	adds	r3, r7, #7
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	e011      	b.n	800b170 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800b14c:	1dfb      	adds	r3, r7, #7
 800b14e:	7818      	ldrb	r0, [r3, #0]
 800b150:	1dfb      	adds	r3, r7, #7
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	4a0f      	ldr	r2, [pc, #60]	@ (800b194 <SGP_DeviceConnected+0x74>)
 800b156:	5cd3      	ldrb	r3, [r2, r3]
 800b158:	4a0f      	ldr	r2, [pc, #60]	@ (800b198 <SGP_DeviceConnected+0x78>)
 800b15a:	4910      	ldr	r1, [pc, #64]	@ (800b19c <SGP_DeviceConnected+0x7c>)
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	0003      	movs	r3, r0
 800b160:	2002      	movs	r0, #2
 800b162:	f002 f97b 	bl	800d45c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 800b166:	1dfb      	adds	r3, r7, #7
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	1dfb      	adds	r3, r7, #7
 800b16c:	3201      	adds	r2, #1
 800b16e:	701a      	strb	r2, [r3, #0]
 800b170:	1dfb      	adds	r3, r7, #7
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d9e9      	bls.n	800b14c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 800b178:	4b06      	ldr	r3, [pc, #24]	@ (800b194 <SGP_DeviceConnected+0x74>)
 800b17a:	2203      	movs	r2, #3
 800b17c:	2109      	movs	r1, #9
 800b17e:	0018      	movs	r0, r3
 800b180:	f000 f80e 	bl	800b1a0 <CheckCRC>
 800b184:	0003      	movs	r3, r0
}
 800b186:	0018      	movs	r0, r3
 800b188:	46bd      	mov	sp, r7
 800b18a:	b002      	add	sp, #8
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	46c0      	nop			@ (mov r8, r8)
 800b190:	20000088 	.word	0x20000088
 800b194:	20001204 	.word	0x20001204
 800b198:	080234f8 	.word	0x080234f8
 800b19c:	0802348c 	.word	0x0802348c

0800b1a0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 800b1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1a2:	b08f      	sub	sp, #60	@ 0x3c
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6278      	str	r0, [r7, #36]	@ 0x24
 800b1a8:	0008      	movs	r0, r1
 800b1aa:	0011      	movs	r1, r2
 800b1ac:	2323      	movs	r3, #35	@ 0x23
 800b1ae:	18fb      	adds	r3, r7, r3
 800b1b0:	1c02      	adds	r2, r0, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
 800b1b4:	2322      	movs	r3, #34	@ 0x22
 800b1b6:	18fb      	adds	r3, r7, r3
 800b1b8:	1c0a      	adds	r2, r1, #0
 800b1ba:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b1bc:	2317      	movs	r3, #23
 800b1be:	2220      	movs	r2, #32
 800b1c0:	189b      	adds	r3, r3, r2
 800b1c2:	19db      	adds	r3, r3, r7
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	701a      	strb	r2, [r3, #0]
 800b1c8:	e09f      	b.n	800b30a <CheckCRC+0x16a>
 800b1ca:	466b      	mov	r3, sp
 800b1cc:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800b1ce:	2322      	movs	r3, #34	@ 0x22
 800b1d0:	18fb      	adds	r3, r7, r3
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	001a      	movs	r2, r3
 800b1d6:	3a01      	subs	r2, #1
 800b1d8:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1da:	60bb      	str	r3, [r7, #8]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	60fa      	str	r2, [r7, #12]
 800b1e0:	68b8      	ldr	r0, [r7, #8]
 800b1e2:	68f9      	ldr	r1, [r7, #12]
 800b1e4:	0002      	movs	r2, r0
 800b1e6:	0f52      	lsrs	r2, r2, #29
 800b1e8:	000c      	movs	r4, r1
 800b1ea:	00e4      	lsls	r4, r4, #3
 800b1ec:	61fc      	str	r4, [r7, #28]
 800b1ee:	69fc      	ldr	r4, [r7, #28]
 800b1f0:	4314      	orrs	r4, r2
 800b1f2:	61fc      	str	r4, [r7, #28]
 800b1f4:	0002      	movs	r2, r0
 800b1f6:	00d2      	lsls	r2, r2, #3
 800b1f8:	61ba      	str	r2, [r7, #24]
 800b1fa:	603b      	str	r3, [r7, #0]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	6838      	ldr	r0, [r7, #0]
 800b202:	6879      	ldr	r1, [r7, #4]
 800b204:	0002      	movs	r2, r0
 800b206:	0f52      	lsrs	r2, r2, #29
 800b208:	000c      	movs	r4, r1
 800b20a:	00e4      	lsls	r4, r4, #3
 800b20c:	617c      	str	r4, [r7, #20]
 800b20e:	697c      	ldr	r4, [r7, #20]
 800b210:	4314      	orrs	r4, r2
 800b212:	617c      	str	r4, [r7, #20]
 800b214:	0002      	movs	r2, r0
 800b216:	00d2      	lsls	r2, r2, #3
 800b218:	613a      	str	r2, [r7, #16]
 800b21a:	3307      	adds	r3, #7
 800b21c:	08db      	lsrs	r3, r3, #3
 800b21e:	00db      	lsls	r3, r3, #3
 800b220:	466a      	mov	r2, sp
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	469d      	mov	sp, r3
 800b226:	466b      	mov	r3, sp
 800b228:	3300      	adds	r3, #0
 800b22a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800b22c:	2316      	movs	r3, #22
 800b22e:	2220      	movs	r2, #32
 800b230:	189b      	adds	r3, r3, r2
 800b232:	19db      	adds	r3, r3, r7
 800b234:	2200      	movs	r2, #0
 800b236:	701a      	strb	r2, [r3, #0]
 800b238:	e01e      	b.n	800b278 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800b23a:	2317      	movs	r3, #23
 800b23c:	2220      	movs	r2, #32
 800b23e:	189b      	adds	r3, r3, r2
 800b240:	19db      	adds	r3, r3, r7
 800b242:	781a      	ldrb	r2, [r3, #0]
 800b244:	2116      	movs	r1, #22
 800b246:	2320      	movs	r3, #32
 800b248:	18cb      	adds	r3, r1, r3
 800b24a:	19db      	adds	r3, r3, r7
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	18d3      	adds	r3, r2, r3
 800b250:	001a      	movs	r2, r3
 800b252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b254:	189a      	adds	r2, r3, r2
 800b256:	0008      	movs	r0, r1
 800b258:	2320      	movs	r3, #32
 800b25a:	18cb      	adds	r3, r1, r3
 800b25c:	19db      	adds	r3, r3, r7
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	7811      	ldrb	r1, [r2, #0]
 800b262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b264:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 800b266:	2320      	movs	r3, #32
 800b268:	18c3      	adds	r3, r0, r3
 800b26a:	19db      	adds	r3, r3, r7
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	2320      	movs	r3, #32
 800b270:	18c3      	adds	r3, r0, r3
 800b272:	19db      	adds	r3, r3, r7
 800b274:	3201      	adds	r2, #1
 800b276:	701a      	strb	r2, [r3, #0]
 800b278:	2316      	movs	r3, #22
 800b27a:	2220      	movs	r2, #32
 800b27c:	189b      	adds	r3, r3, r2
 800b27e:	19da      	adds	r2, r3, r7
 800b280:	2322      	movs	r3, #34	@ 0x22
 800b282:	18fb      	adds	r3, r7, r3
 800b284:	7812      	ldrb	r2, [r2, #0]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d3d6      	bcc.n	800b23a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800b28c:	2417      	movs	r4, #23
 800b28e:	2320      	movs	r3, #32
 800b290:	18e3      	adds	r3, r4, r3
 800b292:	19db      	adds	r3, r3, r7
 800b294:	781a      	ldrb	r2, [r3, #0]
 800b296:	2322      	movs	r3, #34	@ 0x22
 800b298:	18fb      	adds	r3, r7, r3
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	18d3      	adds	r3, r2, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2a2:	18d2      	adds	r2, r2, r3
 800b2a4:	250b      	movs	r5, #11
 800b2a6:	2320      	movs	r3, #32
 800b2a8:	18eb      	adds	r3, r5, r3
 800b2aa:	19db      	adds	r3, r3, r7
 800b2ac:	7812      	ldrb	r2, [r2, #0]
 800b2ae:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 800b2b0:	2322      	movs	r3, #34	@ 0x22
 800b2b2:	18fb      	adds	r3, r7, r3
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2bc:	0011      	movs	r1, r2
 800b2be:	0018      	movs	r0, r3
 800b2c0:	f000 f838 	bl	800b334 <CalculateCRC>
 800b2c4:	0003      	movs	r3, r0
 800b2c6:	001a      	movs	r2, r3
 800b2c8:	2320      	movs	r3, #32
 800b2ca:	18eb      	adds	r3, r5, r3
 800b2cc:	19db      	adds	r3, r3, r7
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d00c      	beq.n	800b2ee <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 800b2d4:	2320      	movs	r3, #32
 800b2d6:	18e3      	adds	r3, r4, r3
 800b2d8:	19db      	adds	r3, r3, r7
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	4a13      	ldr	r2, [pc, #76]	@ (800b32c <CheckCRC+0x18c>)
 800b2e0:	4913      	ldr	r1, [pc, #76]	@ (800b330 <CheckCRC+0x190>)
 800b2e2:	2001      	movs	r0, #1
 800b2e4:	f002 f8ba 	bl	800d45c <CreateLine>
      return false;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	46b5      	mov	sp, r6
 800b2ec:	e019      	b.n	800b322 <CheckCRC+0x182>
 800b2ee:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800b2f0:	2217      	movs	r2, #23
 800b2f2:	2320      	movs	r3, #32
 800b2f4:	18d3      	adds	r3, r2, r3
 800b2f6:	19db      	adds	r3, r3, r7
 800b2f8:	2120      	movs	r1, #32
 800b2fa:	1852      	adds	r2, r2, r1
 800b2fc:	19d1      	adds	r1, r2, r7
 800b2fe:	2222      	movs	r2, #34	@ 0x22
 800b300:	18ba      	adds	r2, r7, r2
 800b302:	7809      	ldrb	r1, [r1, #0]
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	188a      	adds	r2, r1, r2
 800b308:	701a      	strb	r2, [r3, #0]
 800b30a:	2317      	movs	r3, #23
 800b30c:	2220      	movs	r2, #32
 800b30e:	189b      	adds	r3, r3, r2
 800b310:	19da      	adds	r2, r3, r7
 800b312:	2323      	movs	r3, #35	@ 0x23
 800b314:	18fb      	adds	r3, r7, r3
 800b316:	7812      	ldrb	r2, [r2, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d200      	bcs.n	800b320 <CheckCRC+0x180>
 800b31e:	e754      	b.n	800b1ca <CheckCRC+0x2a>
    }
  }
  return true;
 800b320:	2301      	movs	r3, #1
}
 800b322:	0018      	movs	r0, r3
 800b324:	46bd      	mov	sp, r7
 800b326:	b00f      	add	sp, #60	@ 0x3c
 800b328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b32a:	46c0      	nop			@ (mov r8, r8)
 800b32c:	08023518 	.word	0x08023518
 800b330:	08023468 	.word	0x08023468

0800b334 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	000a      	movs	r2, r1
 800b33e:	1cfb      	adds	r3, r7, #3
 800b340:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800b342:	230f      	movs	r3, #15
 800b344:	18fb      	adds	r3, r7, r3
 800b346:	22ff      	movs	r2, #255	@ 0xff
 800b348:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b34a:	230e      	movs	r3, #14
 800b34c:	18fb      	adds	r3, r7, r3
 800b34e:	2200      	movs	r2, #0
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e037      	b.n	800b3c4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b354:	230e      	movs	r3, #14
 800b356:	18fb      	adds	r3, r7, r3
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	18d3      	adds	r3, r2, r3
 800b35e:	7819      	ldrb	r1, [r3, #0]
 800b360:	220f      	movs	r2, #15
 800b362:	18bb      	adds	r3, r7, r2
 800b364:	18ba      	adds	r2, r7, r2
 800b366:	7812      	ldrb	r2, [r2, #0]
 800b368:	404a      	eors	r2, r1
 800b36a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b36c:	230d      	movs	r3, #13
 800b36e:	18fb      	adds	r3, r7, r3
 800b370:	2200      	movs	r2, #0
 800b372:	701a      	strb	r2, [r3, #0]
 800b374:	e01b      	b.n	800b3ae <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 800b376:	210f      	movs	r1, #15
 800b378:	187b      	adds	r3, r7, r1
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b25b      	sxtb	r3, r3
 800b37e:	2b00      	cmp	r3, #0
 800b380:	da09      	bge.n	800b396 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800b382:	187b      	adds	r3, r7, r1
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	b25b      	sxtb	r3, r3
 800b38a:	2231      	movs	r2, #49	@ 0x31
 800b38c:	4053      	eors	r3, r2
 800b38e:	b25a      	sxtb	r2, r3
 800b390:	187b      	adds	r3, r7, r1
 800b392:	701a      	strb	r2, [r3, #0]
 800b394:	e005      	b.n	800b3a2 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 800b396:	230f      	movs	r3, #15
 800b398:	18fa      	adds	r2, r7, r3
 800b39a:	18fb      	adds	r3, r7, r3
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	18db      	adds	r3, r3, r3
 800b3a0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b3a2:	210d      	movs	r1, #13
 800b3a4:	187b      	adds	r3, r7, r1
 800b3a6:	781a      	ldrb	r2, [r3, #0]
 800b3a8:	187b      	adds	r3, r7, r1
 800b3aa:	3201      	adds	r2, #1
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	230d      	movs	r3, #13
 800b3b0:	18fb      	adds	r3, r7, r3
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	2b07      	cmp	r3, #7
 800b3b6:	d9de      	bls.n	800b376 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b3b8:	210e      	movs	r1, #14
 800b3ba:	187b      	adds	r3, r7, r1
 800b3bc:	781a      	ldrb	r2, [r3, #0]
 800b3be:	187b      	adds	r3, r7, r1
 800b3c0:	3201      	adds	r2, #1
 800b3c2:	701a      	strb	r2, [r3, #0]
 800b3c4:	230e      	movs	r3, #14
 800b3c6:	18fa      	adds	r2, r7, r3
 800b3c8:	1cfb      	adds	r3, r7, #3
 800b3ca:	7812      	ldrb	r2, [r2, #0]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d3c0      	bcc.n	800b354 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 800b3d2:	230f      	movs	r3, #15
 800b3d4:	18fb      	adds	r3, r7, r3
 800b3d6:	781b      	ldrb	r3, [r3, #0]
}
 800b3d8:	0018      	movs	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b004      	add	sp, #16
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4936      	ldr	r1, [pc, #216]	@ (800b4c8 <SGP_GetHT+0xe8>)
 800b3f0:	1c18      	adds	r0, r3, #0
 800b3f2:	f7f5 fa65 	bl	80008c0 <__aeabi_fadd>
 800b3f6:	1c03      	adds	r3, r0, #0
 800b3f8:	4934      	ldr	r1, [pc, #208]	@ (800b4cc <SGP_GetHT+0xec>)
 800b3fa:	1c18      	adds	r0, r3, #0
 800b3fc:	f7f5 fbea 	bl	8000bd4 <__aeabi_fdiv>
 800b400:	1c03      	adds	r3, r0, #0
 800b402:	4933      	ldr	r1, [pc, #204]	@ (800b4d0 <SGP_GetHT+0xf0>)
 800b404:	1c18      	adds	r0, r3, #0
 800b406:	f7f5 fdcb 	bl	8000fa0 <__aeabi_fmul>
 800b40a:	1c03      	adds	r3, r0, #0
 800b40c:	1c18      	adds	r0, r3, #0
 800b40e:	f7f5 f905 	bl	800061c <__aeabi_f2uiz>
 800b412:	0003      	movs	r3, r0
 800b414:	b29a      	uxth	r2, r3
 800b416:	4b2f      	ldr	r3, [pc, #188]	@ (800b4d4 <SGP_GetHT+0xf4>)
 800b418:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	492e      	ldr	r1, [pc, #184]	@ (800b4d8 <SGP_GetHT+0xf8>)
 800b420:	1c18      	adds	r0, r3, #0
 800b422:	f7f5 fbd7 	bl	8000bd4 <__aeabi_fdiv>
 800b426:	1c03      	adds	r3, r0, #0
 800b428:	4929      	ldr	r1, [pc, #164]	@ (800b4d0 <SGP_GetHT+0xf0>)
 800b42a:	1c18      	adds	r0, r3, #0
 800b42c:	f7f5 fdb8 	bl	8000fa0 <__aeabi_fmul>
 800b430:	1c03      	adds	r3, r0, #0
 800b432:	1c18      	adds	r0, r3, #0
 800b434:	f7f5 f8f2 	bl	800061c <__aeabi_f2uiz>
 800b438:	0003      	movs	r3, r0
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	4b27      	ldr	r3, [pc, #156]	@ (800b4dc <SGP_GetHT+0xfc>)
 800b43e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800b440:	4b26      	ldr	r3, [pc, #152]	@ (800b4dc <SGP_GetHT+0xfc>)
 800b442:	881b      	ldrh	r3, [r3, #0]
 800b444:	0a1b      	lsrs	r3, r3, #8
 800b446:	b29b      	uxth	r3, r3
 800b448:	b2da      	uxtb	r2, r3
 800b44a:	4b25      	ldr	r3, [pc, #148]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b44c:	709a      	strb	r2, [r3, #2]
 800b44e:	4b24      	ldr	r3, [pc, #144]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b450:	789a      	ldrb	r2, [r3, #2]
 800b452:	210c      	movs	r1, #12
 800b454:	187b      	adds	r3, r7, r1
 800b456:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 800b458:	4b20      	ldr	r3, [pc, #128]	@ (800b4dc <SGP_GetHT+0xfc>)
 800b45a:	881b      	ldrh	r3, [r3, #0]
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	4b20      	ldr	r3, [pc, #128]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b460:	70da      	strb	r2, [r3, #3]
 800b462:	4b1f      	ldr	r3, [pc, #124]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b464:	78da      	ldrb	r2, [r3, #3]
 800b466:	187b      	adds	r3, r7, r1
 800b468:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 800b46a:	187b      	adds	r3, r7, r1
 800b46c:	2102      	movs	r1, #2
 800b46e:	0018      	movs	r0, r3
 800b470:	f7ff ff60 	bl	800b334 <CalculateCRC>
 800b474:	0003      	movs	r3, r0
 800b476:	001a      	movs	r2, r3
 800b478:	4b19      	ldr	r3, [pc, #100]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b47a:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 800b47c:	4b15      	ldr	r3, [pc, #84]	@ (800b4d4 <SGP_GetHT+0xf4>)
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	0a1b      	lsrs	r3, r3, #8
 800b482:	b29b      	uxth	r3, r3
 800b484:	b2da      	uxtb	r2, r3
 800b486:	4b16      	ldr	r3, [pc, #88]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b488:	715a      	strb	r2, [r3, #5]
 800b48a:	4b15      	ldr	r3, [pc, #84]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b48c:	795a      	ldrb	r2, [r3, #5]
 800b48e:	2108      	movs	r1, #8
 800b490:	187b      	adds	r3, r7, r1
 800b492:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 800b494:	4b0f      	ldr	r3, [pc, #60]	@ (800b4d4 <SGP_GetHT+0xf4>)
 800b496:	881b      	ldrh	r3, [r3, #0]
 800b498:	b2da      	uxtb	r2, r3
 800b49a:	4b11      	ldr	r3, [pc, #68]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b49c:	719a      	strb	r2, [r3, #6]
 800b49e:	4b10      	ldr	r3, [pc, #64]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b4a0:	799a      	ldrb	r2, [r3, #6]
 800b4a2:	187b      	adds	r3, r7, r1
 800b4a4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 800b4a6:	187b      	adds	r3, r7, r1
 800b4a8:	2102      	movs	r1, #2
 800b4aa:	0018      	movs	r0, r3
 800b4ac:	f7ff ff42 	bl	800b334 <CalculateCRC>
 800b4b0:	0003      	movs	r3, r0
 800b4b2:	001a      	movs	r2, r3
 800b4b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e0 <SGP_GetHT+0x100>)
 800b4b6:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 800b4b8:	4b0a      	ldr	r3, [pc, #40]	@ (800b4e4 <SGP_GetHT+0x104>)
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	701a      	strb	r2, [r3, #0]
}
 800b4be:	46c0      	nop			@ (mov r8, r8)
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	b004      	add	sp, #16
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	46c0      	nop			@ (mov r8, r8)
 800b4c8:	42340000 	.word	0x42340000
 800b4cc:	432f0000 	.word	0x432f0000
 800b4d0:	477fff00 	.word	0x477fff00
 800b4d4:	200012b6 	.word	0x200012b6
 800b4d8:	42c80000 	.word	0x42c80000
 800b4dc:	200012b4 	.word	0x200012b4
 800b4e0:	20000094 	.word	0x20000094
 800b4e4:	200012b8 	.word	0x200012b8

0800b4e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	0002      	movs	r2, r0
 800b4f0:	1dfb      	adds	r3, r7, #7
 800b4f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b4f4:	1dfb      	adds	r3, r7, #7
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4fa:	d809      	bhi.n	800b510 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b4fc:	1dfb      	adds	r3, r7, #7
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	001a      	movs	r2, r3
 800b502:	231f      	movs	r3, #31
 800b504:	401a      	ands	r2, r3
 800b506:	4b04      	ldr	r3, [pc, #16]	@ (800b518 <__NVIC_EnableIRQ+0x30>)
 800b508:	2101      	movs	r1, #1
 800b50a:	4091      	lsls	r1, r2
 800b50c:	000a      	movs	r2, r1
 800b50e:	601a      	str	r2, [r3, #0]
  }
}
 800b510:	46c0      	nop			@ (mov r8, r8)
 800b512:	46bd      	mov	sp, r7
 800b514:	b002      	add	sp, #8
 800b516:	bd80      	pop	{r7, pc}
 800b518:	e000e100 	.word	0xe000e100

0800b51c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	0002      	movs	r2, r0
 800b524:	1dfb      	adds	r3, r7, #7
 800b526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800b528:	1dfb      	adds	r3, r7, #7
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b52e:	d810      	bhi.n	800b552 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b530:	1dfb      	adds	r3, r7, #7
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	001a      	movs	r2, r3
 800b536:	231f      	movs	r3, #31
 800b538:	4013      	ands	r3, r2
 800b53a:	4908      	ldr	r1, [pc, #32]	@ (800b55c <__NVIC_DisableIRQ+0x40>)
 800b53c:	2201      	movs	r2, #1
 800b53e:	409a      	lsls	r2, r3
 800b540:	0013      	movs	r3, r2
 800b542:	2280      	movs	r2, #128	@ 0x80
 800b544:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b546:	f3bf 8f4f 	dsb	sy
}
 800b54a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b54c:	f3bf 8f6f 	isb	sy
}
 800b550:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800b552:	46c0      	nop			@ (mov r8, r8)
 800b554:	46bd      	mov	sp, r7
 800b556:	b002      	add	sp, #8
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	46c0      	nop			@ (mov r8, r8)
 800b55c:	e000e100 	.word	0xe000e100

0800b560 <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800b560:	b5b0      	push	{r4, r5, r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af02      	add	r7, sp, #8
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	0008      	movs	r0, r1
 800b56a:	0011      	movs	r1, r2
 800b56c:	1cfb      	adds	r3, r7, #3
 800b56e:	1c02      	adds	r2, r0, #0
 800b570:	701a      	strb	r2, [r3, #0]
 800b572:	1cbb      	adds	r3, r7, #2
 800b574:	1c0a      	adds	r2, r1, #0
 800b576:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 800b578:	4b5b      	ldr	r3, [pc, #364]	@ (800b6e8 <getSoundData+0x188>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2201      	movs	r2, #1
 800b580:	4053      	eors	r3, r2
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b00      	cmp	r3, #0
 800b586:	d107      	bne.n	800b598 <getSoundData+0x38>
 800b588:	4b58      	ldr	r3, [pc, #352]	@ (800b6ec <getSoundData+0x18c>)
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2201      	movs	r2, #1
 800b590:	4053      	eors	r3, r2
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b00      	cmp	r3, #0
 800b596:	d001      	beq.n	800b59c <getSoundData+0x3c>
    {
        return false;
 800b598:	2300      	movs	r3, #0
 800b59a:	e0a0      	b.n	800b6de <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 800b59c:	4b54      	ldr	r3, [pc, #336]	@ (800b6f0 <getSoundData+0x190>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b5a6:	4b53      	ldr	r3, [pc, #332]	@ (800b6f4 <getSoundData+0x194>)
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	b25b      	sxtb	r3, r3
 800b5ac:	0018      	movs	r0, r3
 800b5ae:	f7ff ffb5 	bl	800b51c <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 800b5b2:	f3bf 8f4f 	dsb	sy
}
 800b5b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 800b5b8:	f3bf 8f6f 	isb	sy
}
 800b5bc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 800b5be:	1cfb      	adds	r3, r7, #3
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d04c      	beq.n	800b660 <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 800b5c6:	4b4c      	ldr	r3, [pc, #304]	@ (800b6f8 <getSoundData+0x198>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d11b      	bne.n	800b606 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b5da:	2300      	movs	r3, #0
 800b5dc:	617b      	str	r3, [r7, #20]
 800b5de:	e00e      	b.n	800b5fe <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	18d3      	adds	r3, r2, r3
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	18d3      	adds	r3, r2, r3
 800b5f2:	3308      	adds	r3, #8
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2b05      	cmp	r3, #5
 800b602:	d9ed      	bls.n	800b5e0 <getSoundData+0x80>
 800b604:	e02c      	b.n	800b660 <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	1c59      	adds	r1, r3, #1
 800b60c:	4b3b      	ldr	r3, [pc, #236]	@ (800b6fc <getSoundData+0x19c>)
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	4b3b      	ldr	r3, [pc, #236]	@ (800b700 <getSoundData+0x1a0>)
 800b612:	681c      	ldr	r4, [r3, #0]
 800b614:	4b38      	ldr	r3, [pc, #224]	@ (800b6f8 <getSoundData+0x198>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	9300      	str	r3, [sp, #0]
 800b61a:	0023      	movs	r3, r4
 800b61c:	f000 fde8 	bl	800c1f0 <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b620:	2300      	movs	r3, #0
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	e019      	b.n	800b65a <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	18d3      	adds	r3, r2, r3
 800b62c:	1c98      	adds	r0, r3, #2
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3308      	adds	r3, #8
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 800b636:	4b33      	ldr	r3, [pc, #204]	@ (800b704 <getSoundData+0x1a4>)
 800b638:	693a      	ldr	r2, [r7, #16]
 800b63a:	0092      	lsls	r2, r2, #2
 800b63c:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800b63e:	4b32      	ldr	r3, [pc, #200]	@ (800b708 <getSoundData+0x1a8>)
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	0092      	lsls	r2, r2, #2
 800b644:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 800b646:	4b2c      	ldr	r3, [pc, #176]	@ (800b6f8 <getSoundData+0x198>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	0013      	movs	r3, r2
 800b64e:	0022      	movs	r2, r4
 800b650:	f000 fdce 	bl	800c1f0 <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	3301      	adds	r3, #1
 800b658:	613b      	str	r3, [r7, #16]
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	2b05      	cmp	r3, #5
 800b65e:	d9e2      	bls.n	800b626 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800b660:	1cbb      	adds	r3, r7, #2
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d028      	beq.n	800b6ba <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 800b668:	240e      	movs	r4, #14
 800b66a:	193b      	adds	r3, r7, r4
 800b66c:	2200      	movs	r2, #0
 800b66e:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800b670:	250d      	movs	r5, #13
 800b672:	197b      	adds	r3, r7, r5
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 800b678:	4b24      	ldr	r3, [pc, #144]	@ (800b70c <getSoundData+0x1ac>)
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	4924      	ldr	r1, [pc, #144]	@ (800b710 <getSoundData+0x1b0>)
 800b67e:	197b      	adds	r3, r7, r5
 800b680:	193a      	adds	r2, r7, r4
 800b682:	f000 fe59 	bl	800c338 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 800b686:	193b      	adds	r3, r7, r4
 800b688:	881a      	ldrh	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	21ff      	movs	r1, #255	@ 0xff
 800b68e:	4011      	ands	r1, r2
 800b690:	000c      	movs	r4, r1
 800b692:	7b99      	ldrb	r1, [r3, #14]
 800b694:	2000      	movs	r0, #0
 800b696:	4001      	ands	r1, r0
 800b698:	1c08      	adds	r0, r1, #0
 800b69a:	1c21      	adds	r1, r4, #0
 800b69c:	4301      	orrs	r1, r0
 800b69e:	7399      	strb	r1, [r3, #14]
 800b6a0:	0a12      	lsrs	r2, r2, #8
 800b6a2:	b290      	uxth	r0, r2
 800b6a4:	7bda      	ldrb	r2, [r3, #15]
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	400a      	ands	r2, r1
 800b6aa:	1c11      	adds	r1, r2, #0
 800b6ac:	1c02      	adds	r2, r0, #0
 800b6ae:	430a      	orrs	r2, r1
 800b6b0:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 800b6b2:	197b      	adds	r3, r7, r5
 800b6b4:	781a      	ldrb	r2, [r3, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 800b6ba:	f000 f86f 	bl	800b79c <micSettlingComplete>
 800b6be:	0003      	movs	r3, r0
 800b6c0:	001a      	movs	r2, r3
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 800b6c6:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f0 <getSoundData+0x190>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b6d0:	4b08      	ldr	r3, [pc, #32]	@ (800b6f4 <getSoundData+0x194>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	b25b      	sxtb	r3, r3
 800b6d6:	0018      	movs	r0, r3
 800b6d8:	f7ff ff06 	bl	800b4e8 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 800b6dc:	2301      	movs	r3, #1
}
 800b6de:	0018      	movs	r0, r3
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	b006      	add	sp, #24
 800b6e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b6e6:	46c0      	nop			@ (mov r8, r8)
 800b6e8:	200012c1 	.word	0x200012c1
 800b6ec:	200012c4 	.word	0x200012c4
 800b6f0:	200012c3 	.word	0x200012c3
 800b6f4:	20001d14 	.word	0x20001d14
 800b6f8:	20001d50 	.word	0x20001d50
 800b6fc:	20001d18 	.word	0x20001d18
 800b700:	20001d1c 	.word	0x20001d1c
 800b704:	20001d20 	.word	0x20001d20
 800b708:	20001d38 	.word	0x20001d38
 800b70c:	200012cc 	.word	0x200012cc
 800b710:	3b5c7333 	.word	0x3b5c7333

0800b714 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	001a      	movs	r2, r3
 800b722:	1cfb      	adds	r3, r7, #3
 800b724:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 800b726:	4b09      	ldr	r3, [pc, #36]	@ (800b74c <soundInit+0x38>)
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 800b72c:	4b08      	ldr	r3, [pc, #32]	@ (800b750 <soundInit+0x3c>)
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 800b732:	4b08      	ldr	r3, [pc, #32]	@ (800b754 <soundInit+0x40>)
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 800b738:	4b07      	ldr	r3, [pc, #28]	@ (800b758 <soundInit+0x44>)
 800b73a:	2200      	movs	r2, #0
 800b73c:	569a      	ldrsb	r2, [r3, r2]
 800b73e:	4b06      	ldr	r3, [pc, #24]	@ (800b758 <soundInit+0x44>)
 800b740:	701a      	strb	r2, [r3, #0]

    return true;
 800b742:	2301      	movs	r3, #1
}
 800b744:	0018      	movs	r0, r3
 800b746:	46bd      	mov	sp, r7
 800b748:	b004      	add	sp, #16
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	20001d0c 	.word	0x20001d0c
 800b750:	20001d08 	.word	0x20001d08
 800b754:	20001d10 	.word	0x20001d10
 800b758:	20001d14 	.word	0x20001d14

0800b75c <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 800b760:	4b02      	ldr	r3, [pc, #8]	@ (800b76c <clearMaximumAmplitude+0x10>)
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]
}
 800b766:	46c0      	nop			@ (mov r8, r8)
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	200012cc 	.word	0x200012cc

0800b770 <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 800b774:	4b08      	ldr	r3, [pc, #32]	@ (800b798 <startMicSettlingPeriod+0x28>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2200      	movs	r2, #0
 800b77c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 800b77e:	4b06      	ldr	r3, [pc, #24]	@ (800b798 <startMicSettlingPeriod+0x28>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	0018      	movs	r0, r3
 800b784:	f009 ff78 	bl	8015678 <HAL_TIM_Base_Start>
 800b788:	1e03      	subs	r3, r0, #0
 800b78a:	d001      	beq.n	800b790 <startMicSettlingPeriod+0x20>
    {
        return false;
 800b78c:	2300      	movs	r3, #0
 800b78e:	e000      	b.n	800b792 <startMicSettlingPeriod+0x22>
    }
    return true;
 800b790:	2301      	movs	r3, #1
}
 800b792:	0018      	movs	r0, r3
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	20001d08 	.word	0x20001d08

0800b79c <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 800b7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b7dc <micSettlingComplete+0x40>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	401a      	ands	r2, r3
 800b7ae:	1dfb      	adds	r3, r7, #7
 800b7b0:	3a01      	subs	r2, #1
 800b7b2:	4251      	negs	r1, r2
 800b7b4:	414a      	adcs	r2, r1
 800b7b6:	701a      	strb	r2, [r3, #0]
    if (complete)
 800b7b8:	1dfb      	adds	r3, r7, #7
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d007      	beq.n	800b7d0 <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 800b7c0:	4b06      	ldr	r3, [pc, #24]	@ (800b7dc <micSettlingComplete+0x40>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	0018      	movs	r0, r3
 800b7c6:	f009 ffa1 	bl	801570c <HAL_TIM_Base_Stop>
      DataReady = true;
 800b7ca:	4b05      	ldr	r3, [pc, #20]	@ (800b7e0 <micSettlingComplete+0x44>)
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 800b7d0:	1dfb      	adds	r3, r7, #7
 800b7d2:	781b      	ldrb	r3, [r3, #0]
}
 800b7d4:	0018      	movs	r0, r3
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	b002      	add	sp, #8
 800b7da:	bd80      	pop	{r7, pc}
 800b7dc:	20001d08 	.word	0x20001d08
 800b7e0:	200012c0 	.word	0x200012c0

0800b7e4 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	0002      	movs	r2, r0
 800b7ec:	1dfb      	adds	r3, r7, #7
 800b7ee:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 800b7f0:	4b29      	ldr	r3, [pc, #164]	@ (800b898 <enableMicrophone+0xb4>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	1dfa      	adds	r2, r7, #7
 800b7f8:	7812      	ldrb	r2, [r2, #0]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d101      	bne.n	800b802 <enableMicrophone+0x1e>
    {
        return true;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e045      	b.n	800b88e <enableMicrophone+0xaa>
    }
    if (bEnable)
 800b802:	1dfb      	adds	r3, r7, #7
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d025      	beq.n	800b856 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 800b80a:	f7ff ffb1 	bl	800b770 <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 800b80e:	4b23      	ldr	r3, [pc, #140]	@ (800b89c <enableMicrophone+0xb8>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2280      	movs	r2, #128	@ 0x80
 800b814:	0092      	lsls	r2, r2, #2
 800b816:	4922      	ldr	r1, [pc, #136]	@ (800b8a0 <enableMicrophone+0xbc>)
 800b818:	0018      	movs	r0, r3
 800b81a:	f006 f9d5 	bl	8011bc8 <HAL_I2S_Receive_DMA>
 800b81e:	1e03      	subs	r3, r0, #0
 800b820:	d001      	beq.n	800b826 <enableMicrophone+0x42>
        {
            return false;
 800b822:	2300      	movs	r3, #0
 800b824:	e033      	b.n	800b88e <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 800b826:	f7ff ff99 	bl	800b75c <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 800b82a:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a4 <enableMicrophone+0xc0>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 800b830:	4b1d      	ldr	r3, [pc, #116]	@ (800b8a8 <enableMicrophone+0xc4>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	b25b      	sxtb	r3, r3
 800b836:	0018      	movs	r0, r3
 800b838:	f7ff fe56 	bl	800b4e8 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 800b83c:	4b1b      	ldr	r3, [pc, #108]	@ (800b8ac <enableMicrophone+0xc8>)
 800b83e:	2201      	movs	r2, #1
 800b840:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 800b842:	4b15      	ldr	r3, [pc, #84]	@ (800b898 <enableMicrophone+0xb4>)
 800b844:	2201      	movs	r2, #1
 800b846:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b848:	4b19      	ldr	r3, [pc, #100]	@ (800b8b0 <enableMicrophone+0xcc>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b84e:	4b19      	ldr	r3, [pc, #100]	@ (800b8b4 <enableMicrophone+0xd0>)
 800b850:	2200      	movs	r2, #0
 800b852:	701a      	strb	r2, [r3, #0]
 800b854:	e01a      	b.n	800b88c <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 800b856:	4b14      	ldr	r3, [pc, #80]	@ (800b8a8 <enableMicrophone+0xc4>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	b25b      	sxtb	r3, r3
 800b85c:	0018      	movs	r0, r3
 800b85e:	f7ff fe5d 	bl	800b51c <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 800b862:	4b12      	ldr	r3, [pc, #72]	@ (800b8ac <enableMicrophone+0xc8>)
 800b864:	2200      	movs	r2, #0
 800b866:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800b868:	4b11      	ldr	r3, [pc, #68]	@ (800b8b0 <enableMicrophone+0xcc>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 800b86e:	4b11      	ldr	r3, [pc, #68]	@ (800b8b4 <enableMicrophone+0xd0>)
 800b870:	2200      	movs	r2, #0
 800b872:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 800b874:	4b09      	ldr	r3, [pc, #36]	@ (800b89c <enableMicrophone+0xb8>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	0018      	movs	r0, r3
 800b87a:	f006 fa67 	bl	8011d4c <HAL_I2S_DMAStop>
 800b87e:	1e03      	subs	r3, r0, #0
 800b880:	d001      	beq.n	800b886 <enableMicrophone+0xa2>
        {
            return false;
 800b882:	2300      	movs	r3, #0
 800b884:	e003      	b.n	800b88e <enableMicrophone+0xaa>
        }
        micEnabled = false;
 800b886:	4b04      	ldr	r3, [pc, #16]	@ (800b898 <enableMicrophone+0xb4>)
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800b88c:	2301      	movs	r3, #1
}
 800b88e:	0018      	movs	r0, r3
 800b890:	46bd      	mov	sp, r7
 800b892:	b002      	add	sp, #8
 800b894:	bd80      	pop	{r7, pc}
 800b896:	46c0      	nop			@ (mov r8, r8)
 800b898:	200012c1 	.word	0x200012c1
 800b89c:	20001d0c 	.word	0x20001d0c
 800b8a0:	20001308 	.word	0x20001308
 800b8a4:	200012c8 	.word	0x200012c8
 800b8a8:	20001d14 	.word	0x20001d14
 800b8ac:	200012c3 	.word	0x200012c3
 800b8b0:	200012c2 	.word	0x200012c2
 800b8b4:	200012c4 	.word	0x200012c4

0800b8b8 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	af00      	add	r7, sp, #0
    if (!micEnabled)
 800b8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f0 <startSPLcalculation+0x38>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	4053      	eors	r3, r2
 800b8c6:	b2db      	uxtb	r3, r3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d001      	beq.n	800b8d0 <startSPLcalculation+0x18>
    {
        return false;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	e00c      	b.n	800b8ea <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 800b8d0:	4b08      	ldr	r3, [pc, #32]	@ (800b8f4 <startSPLcalculation+0x3c>)
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <startSPLcalculation+0x26>
    {
        return true;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e005      	b.n	800b8ea <startSPLcalculation+0x32>
    }
    resetSPLstate();
 800b8de:	f000 fb63 	bl	800bfa8 <resetSPLstate>
    SPLcalcEnabled = true;
 800b8e2:	4b04      	ldr	r3, [pc, #16]	@ (800b8f4 <startSPLcalculation+0x3c>)
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	701a      	strb	r2, [r3, #0]
    return true;
 800b8e8:	2301      	movs	r3, #1
}
 800b8ea:	0018      	movs	r0, r3
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	200012c1 	.word	0x200012c1
 800b8f4:	200012c2 	.word	0x200012c2

0800b8f8 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b900:	4b05      	ldr	r3, [pc, #20]	@ (800b918 <HAL_I2S_RxHalfCpltCallback+0x20>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	429a      	cmp	r2, r3
 800b908:	d102      	bne.n	800b910 <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 800b90a:	2000      	movs	r0, #0
 800b90c:	f000 f81a 	bl	800b944 <processHalfDMAbuffer>
  }
}
 800b910:	46c0      	nop			@ (mov r8, r8)
 800b912:	46bd      	mov	sp, r7
 800b914:	b002      	add	sp, #8
 800b916:	bd80      	pop	{r7, pc}
 800b918:	20001d0c 	.word	0x20001d0c

0800b91c <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b924:	4b06      	ldr	r3, [pc, #24]	@ (800b940 <HAL_I2S_RxCpltCallback+0x24>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d104      	bne.n	800b938 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 800b92e:	2380      	movs	r3, #128	@ 0x80
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	0018      	movs	r0, r3
 800b934:	f000 f806 	bl	800b944 <processHalfDMAbuffer>
  }
}
 800b938:	46c0      	nop			@ (mov r8, r8)
 800b93a:	46bd      	mov	sp, r7
 800b93c:	b002      	add	sp, #8
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20001d0c 	.word	0x20001d0c

0800b944 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	005a      	lsls	r2, r3, #1
 800b950:	4b15      	ldr	r3, [pc, #84]	@ (800b9a8 <processHalfDMAbuffer+0x64>)
 800b952:	18d3      	adds	r3, r2, r3
 800b954:	4a15      	ldr	r2, [pc, #84]	@ (800b9ac <processHalfDMAbuffer+0x68>)
 800b956:	2180      	movs	r1, #128	@ 0x80
 800b958:	0089      	lsls	r1, r1, #2
 800b95a:	0018      	movs	r0, r3
 800b95c:	f000 fd35 	bl	800c3ca <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 800b960:	4b13      	ldr	r3, [pc, #76]	@ (800b9b0 <processHalfDMAbuffer+0x6c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	425a      	negs	r2, r3
 800b966:	4153      	adcs	r3, r2
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	4b11      	ldr	r3, [pc, #68]	@ (800b9b0 <processHalfDMAbuffer+0x6c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	2109      	movs	r1, #9
 800b970:	4299      	cmp	r1, r3
 800b972:	419b      	sbcs	r3, r3
 800b974:	425b      	negs	r3, r3
 800b976:	b2db      	uxtb	r3, r3
 800b978:	480c      	ldr	r0, [pc, #48]	@ (800b9ac <processHalfDMAbuffer+0x68>)
 800b97a:	2180      	movs	r1, #128	@ 0x80
 800b97c:	f000 fb46 	bl	800c00c <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 800b980:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b0 <processHalfDMAbuffer+0x6c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	2b09      	cmp	r3, #9
 800b986:	d804      	bhi.n	800b992 <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 800b988:	4b09      	ldr	r3, [pc, #36]	@ (800b9b0 <processHalfDMAbuffer+0x6c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	4b08      	ldr	r3, [pc, #32]	@ (800b9b0 <processHalfDMAbuffer+0x6c>)
 800b990:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 800b992:	4b08      	ldr	r3, [pc, #32]	@ (800b9b4 <processHalfDMAbuffer+0x70>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 800b99c:	f000 f826 	bl	800b9ec <calculateSPLQ31>
    }
}
 800b9a0:	46c0      	nop			@ (mov r8, r8)
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	b002      	add	sp, #8
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	20001308 	.word	0x20001308
 800b9ac:	20001b08 	.word	0x20001b08
 800b9b0:	200012c8 	.word	0x200012c8
 800b9b4:	200012c2 	.word	0x200012c2

0800b9b8 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 800b9c0:	4b07      	ldr	r3, [pc, #28]	@ (800b9e0 <HAL_I2S_ErrorCallback+0x28>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d106      	bne.n	800b9d8 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 800b9ca:	4a06      	ldr	r2, [pc, #24]	@ (800b9e4 <HAL_I2S_ErrorCallback+0x2c>)
 800b9cc:	239f      	movs	r3, #159	@ 0x9f
 800b9ce:	0059      	lsls	r1, r3, #1
 800b9d0:	4b05      	ldr	r3, [pc, #20]	@ (800b9e8 <HAL_I2S_ErrorCallback+0x30>)
 800b9d2:	0018      	movs	r0, r3
 800b9d4:	f001 fdf8 	bl	800d5c8 <errorHandler>
  }
}
 800b9d8:	46c0      	nop			@ (mov r8, r8)
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	b002      	add	sp, #8
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20001d0c 	.word	0x20001d0c
 800b9e4:	080235c0 	.word	0x080235c0
 800b9e8:	08023c74 	.word	0x08023c74

0800b9ec <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 800b9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ee:	b0b3      	sub	sp, #204	@ 0xcc
 800b9f0:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 800b9f2:	4ae2      	ldr	r2, [pc, #904]	@ (800bd7c <calculateSPLQ31+0x390>)
 800b9f4:	2338      	movs	r3, #56	@ 0x38
 800b9f6:	2030      	movs	r0, #48	@ 0x30
 800b9f8:	181b      	adds	r3, r3, r0
 800b9fa:	19d9      	adds	r1, r3, r7
 800b9fc:	2334      	movs	r3, #52	@ 0x34
 800b9fe:	181b      	adds	r3, r3, r0
 800ba00:	19d8      	adds	r0, r3, r7
 800ba02:	2380      	movs	r3, #128	@ 0x80
 800ba04:	f000 fc36 	bl	800c274 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 800ba08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	da00      	bge.n	800ba10 <calculateSPLQ31+0x24>
 800ba0e:	3301      	adds	r3, #1
 800ba10:	105b      	asrs	r3, r3, #1
 800ba12:	001a      	movs	r2, r3
 800ba14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	da00      	bge.n	800ba1c <calculateSPLQ31+0x30>
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	105b      	asrs	r3, r3, #1
 800ba1e:	18d3      	adds	r3, r2, r3
 800ba20:	2188      	movs	r1, #136	@ 0x88
 800ba22:	187a      	adds	r2, r7, r1
 800ba24:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 800ba26:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ba28:	187b      	adds	r3, r7, r1
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	3304      	adds	r3, #4
 800ba30:	2284      	movs	r2, #132	@ 0x84
 800ba32:	18b9      	adds	r1, r7, r2
 800ba34:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 800ba36:	18bb      	adds	r3, r7, r2
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4ad1      	ldr	r2, [pc, #836]	@ (800bd80 <calculateSPLQ31+0x394>)
 800ba3c:	0019      	movs	r1, r3
 800ba3e:	0010      	movs	r0, r2
 800ba40:	f000 fc58 	bl	800c2f4 <getPo2factor>
 800ba44:	0003      	movs	r3, r0
 800ba46:	2280      	movs	r2, #128	@ 0x80
 800ba48:	18ba      	adds	r2, r7, r2
 800ba4a:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	2284      	movs	r2, #132	@ 0x84
 800ba50:	2130      	movs	r1, #48	@ 0x30
 800ba52:	1852      	adds	r2, r2, r1
 800ba54:	19d2      	adds	r2, r2, r7
 800ba56:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2280      	movs	r2, #128	@ 0x80
 800ba5c:	1852      	adds	r2, r2, r1
 800ba5e:	19d2      	adds	r2, r2, r7
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	e032      	b.n	800baca <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 800ba64:	4ac5      	ldr	r2, [pc, #788]	@ (800bd7c <calculateSPLQ31+0x390>)
 800ba66:	2680      	movs	r6, #128	@ 0x80
 800ba68:	2330      	movs	r3, #48	@ 0x30
 800ba6a:	18f1      	adds	r1, r6, r3
 800ba6c:	19cb      	adds	r3, r1, r7
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	589a      	ldr	r2, [r3, r2]
 800ba74:	2188      	movs	r1, #136	@ 0x88
 800ba76:	1879      	adds	r1, r7, r1
 800ba78:	680b      	ldr	r3, [r1, #0]
 800ba7a:	1ad2      	subs	r2, r2, r3
 800ba7c:	2180      	movs	r1, #128	@ 0x80
 800ba7e:	1879      	adds	r1, r7, r1
 800ba80:	680b      	ldr	r3, [r1, #0]
 800ba82:	409a      	lsls	r2, r3
 800ba84:	0011      	movs	r1, r2
 800ba86:	4abf      	ldr	r2, [pc, #764]	@ (800bd84 <calculateSPLQ31+0x398>)
 800ba88:	2084      	movs	r0, #132	@ 0x84
 800ba8a:	2330      	movs	r3, #48	@ 0x30
 800ba8c:	18c3      	adds	r3, r0, r3
 800ba8e:	19db      	adds	r3, r3, r7
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 800ba96:	2230      	movs	r2, #48	@ 0x30
 800ba98:	1883      	adds	r3, r0, r2
 800ba9a:	19db      	adds	r3, r3, r7
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	49b8      	ldr	r1, [pc, #736]	@ (800bd84 <calculateSPLQ31+0x398>)
 800baa2:	009a      	lsls	r2, r3, #2
 800baa4:	2300      	movs	r3, #0
 800baa6:	5053      	str	r3, [r2, r1]
        count += 2;
 800baa8:	2230      	movs	r2, #48	@ 0x30
 800baaa:	1883      	adds	r3, r0, r2
 800baac:	19db      	adds	r3, r3, r7
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	3302      	adds	r3, #2
 800bab2:	0011      	movs	r1, r2
 800bab4:	1882      	adds	r2, r0, r2
 800bab6:	19d2      	adds	r2, r2, r7
 800bab8:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 800baba:	000a      	movs	r2, r1
 800babc:	18b3      	adds	r3, r6, r2
 800babe:	19db      	adds	r3, r3, r7
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	18b2      	adds	r2, r6, r2
 800bac6:	19d2      	adds	r2, r2, r7
 800bac8:	6013      	str	r3, [r2, #0]
 800baca:	2380      	movs	r3, #128	@ 0x80
 800bacc:	2630      	movs	r6, #48	@ 0x30
 800bace:	199b      	adds	r3, r3, r6
 800bad0:	19db      	adds	r3, r3, r7
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bad6:	d9c5      	bls.n	800ba64 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 800bad8:	4bab      	ldr	r3, [pc, #684]	@ (800bd88 <calculateSPLQ31+0x39c>)
 800bada:	6818      	ldr	r0, [r3, #0]
 800badc:	49a9      	ldr	r1, [pc, #676]	@ (800bd84 <calculateSPLQ31+0x398>)
 800bade:	2301      	movs	r3, #1
 800bae0:	2200      	movs	r2, #0
 800bae2:	f010 fe8f 	bl	801c804 <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 800bae6:	4aa9      	ldr	r2, [pc, #676]	@ (800bd8c <calculateSPLQ31+0x3a0>)
 800bae8:	2338      	movs	r3, #56	@ 0x38
 800baea:	199b      	adds	r3, r3, r6
 800baec:	19d9      	adds	r1, r3, r7
 800baee:	2334      	movs	r3, #52	@ 0x34
 800baf0:	199b      	adds	r3, r3, r6
 800baf2:	19d8      	adds	r0, r3, r7
 800baf4:	237e      	movs	r3, #126	@ 0x7e
 800baf6:	f000 fbbd 	bl	800c274 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 800bafa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bafc:	2380      	movs	r3, #128	@ 0x80
 800bafe:	061b      	lsls	r3, r3, #24
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d101      	bne.n	800bb08 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 800bb04:	4b9e      	ldr	r3, [pc, #632]	@ (800bd80 <calculateSPLQ31+0x394>)
 800bb06:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 800bb08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bb0a:	2380      	movs	r3, #128	@ 0x80
 800bb0c:	061b      	lsls	r3, r3, #24
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d101      	bne.n	800bb16 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 800bb12:	4b9b      	ldr	r3, [pc, #620]	@ (800bd80 <calculateSPLQ31+0x394>)
 800bb14:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 800bb16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb18:	17da      	asrs	r2, r3, #31
 800bb1a:	189b      	adds	r3, r3, r2
 800bb1c:	4053      	eors	r3, r2
 800bb1e:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 800bb20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb22:	17da      	asrs	r2, r3, #31
 800bb24:	189b      	adds	r3, r3, r2
 800bb26:	4053      	eors	r3, r2
 800bb28:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 800bb2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bb2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	dd01      	ble.n	800bb36 <calculateSPLQ31+0x14a>
    {
        max = min;
 800bb32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb34:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 800bb36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bb38:	3304      	adds	r3, #4
 800bb3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 800bb3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bb3e:	4a90      	ldr	r2, [pc, #576]	@ (800bd80 <calculateSPLQ31+0x394>)
 800bb40:	0019      	movs	r1, r3
 800bb42:	0010      	movs	r0, r2
 800bb44:	f000 fbd6 	bl	800c2f4 <getPo2factor>
 800bb48:	0003      	movs	r3, r0
 800bb4a:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	22ac      	movs	r2, #172	@ 0xac
 800bb50:	18ba      	adds	r2, r7, r2
 800bb52:	6013      	str	r3, [r2, #0]
 800bb54:	e012      	b.n	800bb7c <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 800bb56:	4a8b      	ldr	r2, [pc, #556]	@ (800bd84 <calculateSPLQ31+0x398>)
 800bb58:	20ac      	movs	r0, #172	@ 0xac
 800bb5a:	183b      	adds	r3, r7, r0
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	589a      	ldr	r2, [r3, r2]
 800bb62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb64:	409a      	lsls	r2, r3
 800bb66:	0011      	movs	r1, r2
 800bb68:	4a86      	ldr	r2, [pc, #536]	@ (800bd84 <calculateSPLQ31+0x398>)
 800bb6a:	183b      	adds	r3, r7, r0
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 800bb72:	183b      	adds	r3, r7, r0
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	3301      	adds	r3, #1
 800bb78:	183a      	adds	r2, r7, r0
 800bb7a:	6013      	str	r3, [r2, #0]
 800bb7c:	23ac      	movs	r3, #172	@ 0xac
 800bb7e:	18fb      	adds	r3, r7, r3
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb84:	d9e7      	bls.n	800bb56 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 800bb86:	4b7d      	ldr	r3, [pc, #500]	@ (800bd7c <calculateSPLQ31+0x390>)
 800bb88:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 800bb8a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800bb8c:	4b7d      	ldr	r3, [pc, #500]	@ (800bd84 <calculateSPLQ31+0x398>)
 800bb8e:	2240      	movs	r2, #64	@ 0x40
 800bb90:	0018      	movs	r0, r3
 800bb92:	f011 fbe1 	bl	801d358 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 800bb96:	2330      	movs	r3, #48	@ 0x30
 800bb98:	18fb      	adds	r3, r7, r3
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	2330      	movs	r3, #48	@ 0x30
 800bb9e:	001a      	movs	r2, r3
 800bba0:	2100      	movs	r1, #0
 800bba2:	f013 f9fd 	bl	801efa0 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 800bba6:	2200      	movs	r2, #0
 800bba8:	2300      	movs	r3, #0
 800bbaa:	21a0      	movs	r1, #160	@ 0xa0
 800bbac:	1879      	adds	r1, r7, r1
 800bbae:	600a      	str	r2, [r1, #0]
 800bbb0:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	229c      	movs	r2, #156	@ 0x9c
 800bbb6:	18ba      	adds	r2, r7, r2
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	e05b      	b.n	800bc74 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 800bbbc:	269c      	movs	r6, #156	@ 0x9c
 800bbbe:	19bb      	adds	r3, r7, r6
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	009a      	lsls	r2, r3, #2
 800bbc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbc6:	189b      	adds	r3, r3, r2
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	613b      	str	r3, [r7, #16]
 800bbcc:	17db      	asrs	r3, r3, #31
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	4b6f      	ldr	r3, [pc, #444]	@ (800bd90 <calculateSPLQ31+0x3a4>)
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	19bb      	adds	r3, r7, r6
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	005b      	lsls	r3, r3, #1
 800bbda:	18d3      	adds	r3, r2, r3
 800bbdc:	881b      	ldrh	r3, [r3, #0]
 800bbde:	60bb      	str	r3, [r7, #8]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60fb      	str	r3, [r7, #12]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	6938      	ldr	r0, [r7, #16]
 800bbea:	6979      	ldr	r1, [r7, #20]
 800bbec:	f7f4 fce8 	bl	80005c0 <__aeabi_lmul>
 800bbf0:	0002      	movs	r2, r0
 800bbf2:	000b      	movs	r3, r1
 800bbf4:	0010      	movs	r0, r2
 800bbf6:	0019      	movs	r1, r3
 800bbf8:	23a0      	movs	r3, #160	@ 0xa0
 800bbfa:	18fa      	adds	r2, r7, r3
 800bbfc:	6853      	ldr	r3, [r2, #4]
 800bbfe:	6812      	ldr	r2, [r2, #0]
 800bc00:	1812      	adds	r2, r2, r0
 800bc02:	414b      	adcs	r3, r1
 800bc04:	21a0      	movs	r1, #160	@ 0xa0
 800bc06:	1879      	adds	r1, r7, r1
 800bc08:	600a      	str	r2, [r1, #0]
 800bc0a:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 800bc0c:	4b61      	ldr	r3, [pc, #388]	@ (800bd94 <calculateSPLQ31+0x3a8>)
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	19bb      	adds	r3, r7, r6
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	18d3      	adds	r3, r2, r3
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	2b06      	cmp	r3, #6
 800bc1a:	d025      	beq.n	800bc68 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 800bc1c:	4b5d      	ldr	r3, [pc, #372]	@ (800bd94 <calculateSPLQ31+0x3a8>)
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	19bb      	adds	r3, r7, r6
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	18d3      	adds	r3, r2, r3
 800bc26:	781b      	ldrb	r3, [r3, #0]
 800bc28:	2230      	movs	r2, #48	@ 0x30
 800bc2a:	18ba      	adds	r2, r7, r2
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	18d3      	adds	r3, r2, r3
 800bc30:	6818      	ldr	r0, [r3, #0]
 800bc32:	6859      	ldr	r1, [r3, #4]
 800bc34:	19bb      	adds	r3, r7, r6
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	009a      	lsls	r2, r3, #2
 800bc3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc3c:	189b      	adds	r3, r3, r2
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	603b      	str	r3, [r7, #0]
 800bc42:	17db      	asrs	r3, r3, #31
 800bc44:	607b      	str	r3, [r7, #4]
 800bc46:	4b53      	ldr	r3, [pc, #332]	@ (800bd94 <calculateSPLQ31+0x3a8>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	19be      	adds	r6, r7, r6
 800bc4c:	6833      	ldr	r3, [r6, #0]
 800bc4e:	18d3      	adds	r3, r2, r3
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	001e      	movs	r6, r3
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	1880      	adds	r0, r0, r2
 800bc5a:	4159      	adcs	r1, r3
 800bc5c:	2330      	movs	r3, #48	@ 0x30
 800bc5e:	18fa      	adds	r2, r7, r3
 800bc60:	00f3      	lsls	r3, r6, #3
 800bc62:	18d3      	adds	r3, r2, r3
 800bc64:	6018      	str	r0, [r3, #0]
 800bc66:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 800bc68:	229c      	movs	r2, #156	@ 0x9c
 800bc6a:	18bb      	adds	r3, r7, r2
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	18ba      	adds	r2, r7, r2
 800bc72:	6013      	str	r3, [r2, #0]
 800bc74:	239c      	movs	r3, #156	@ 0x9c
 800bc76:	18fb      	adds	r3, r7, r3
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b3f      	cmp	r3, #63	@ 0x3f
 800bc7c:	d99e      	bls.n	800bbbc <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 800bc7e:	2380      	movs	r3, #128	@ 0x80
 800bc80:	18fb      	adds	r3, r7, r3
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	005b      	lsls	r3, r3, #1
 800bc86:	001a      	movs	r2, r3
 800bc88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc8a:	005b      	lsls	r3, r3, #1
 800bc8c:	18d3      	adds	r3, r2, r3
 800bc8e:	3b22      	subs	r3, #34	@ 0x22
 800bc90:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 800bc92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc94:	17da      	asrs	r2, r3, #31
 800bc96:	189b      	adds	r3, r3, r2
 800bc98:	4053      	eors	r3, r2
 800bc9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 800bc9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da62      	bge.n	800bd68 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 800bca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bca4:	3b20      	subs	r3, #32
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	db05      	blt.n	800bcb6 <calculateSPLQ31+0x2ca>
 800bcaa:	22a0      	movs	r2, #160	@ 0xa0
 800bcac:	18ba      	adds	r2, r7, r2
 800bcae:	6812      	ldr	r2, [r2, #0]
 800bcb0:	409a      	lsls	r2, r3
 800bcb2:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcb4:	e010      	b.n	800bcd8 <calculateSPLQ31+0x2ec>
 800bcb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcb8:	2220      	movs	r2, #32
 800bcba:	1ad3      	subs	r3, r2, r3
 800bcbc:	22a0      	movs	r2, #160	@ 0xa0
 800bcbe:	18ba      	adds	r2, r7, r2
 800bcc0:	6812      	ldr	r2, [r2, #0]
 800bcc2:	40da      	lsrs	r2, r3
 800bcc4:	0013      	movs	r3, r2
 800bcc6:	22a4      	movs	r2, #164	@ 0xa4
 800bcc8:	18ba      	adds	r2, r7, r2
 800bcca:	6811      	ldr	r1, [r2, #0]
 800bccc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bcce:	4091      	lsls	r1, r2
 800bcd0:	6279      	str	r1, [r7, #36]	@ 0x24
 800bcd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	627a      	str	r2, [r7, #36]	@ 0x24
 800bcd8:	21a0      	movs	r1, #160	@ 0xa0
 800bcda:	187b      	adds	r3, r7, r1
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bce0:	409a      	lsls	r2, r3
 800bce2:	623a      	str	r2, [r7, #32]
 800bce4:	6a3b      	ldr	r3, [r7, #32]
 800bce6:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800bce8:	187a      	adds	r2, r7, r1
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2298      	movs	r2, #152	@ 0x98
 800bcf2:	18ba      	adds	r2, r7, r2
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	e031      	b.n	800bd5c <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800bcf8:	2330      	movs	r3, #48	@ 0x30
 800bcfa:	18fa      	adds	r2, r7, r3
 800bcfc:	2398      	movs	r3, #152	@ 0x98
 800bcfe:	18fb      	adds	r3, r7, r3
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	18d3      	adds	r3, r2, r3
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd0c:	3920      	subs	r1, #32
 800bd0e:	2900      	cmp	r1, #0
 800bd10:	db03      	blt.n	800bd1a <calculateSPLQ31+0x32e>
 800bd12:	0010      	movs	r0, r2
 800bd14:	4088      	lsls	r0, r1
 800bd16:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bd18:	e00c      	b.n	800bd34 <calculateSPLQ31+0x348>
 800bd1a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd1c:	2020      	movs	r0, #32
 800bd1e:	1a41      	subs	r1, r0, r1
 800bd20:	0010      	movs	r0, r2
 800bd22:	40c8      	lsrs	r0, r1
 800bd24:	0001      	movs	r1, r0
 800bd26:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bd28:	001c      	movs	r4, r3
 800bd2a:	4084      	lsls	r4, r0
 800bd2c:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800bd2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bd30:	4308      	orrs	r0, r1
 800bd32:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800bd34:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bd36:	0013      	movs	r3, r2
 800bd38:	408b      	lsls	r3, r1
 800bd3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd3c:	2330      	movs	r3, #48	@ 0x30
 800bd3e:	18fa      	adds	r2, r7, r3
 800bd40:	2098      	movs	r0, #152	@ 0x98
 800bd42:	183b      	adds	r3, r7, r0
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	18d3      	adds	r3, r2, r3
 800bd4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bd4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bd4e:	6019      	str	r1, [r3, #0]
 800bd50:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bd52:	183b      	adds	r3, r7, r0
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3301      	adds	r3, #1
 800bd58:	183a      	adds	r2, r7, r0
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	2398      	movs	r3, #152	@ 0x98
 800bd5e:	18fb      	adds	r3, r7, r3
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b05      	cmp	r3, #5
 800bd64:	d9c8      	bls.n	800bcf8 <calculateSPLQ31+0x30c>
 800bd66:	e06b      	b.n	800be40 <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800bd68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd6a:	3b20      	subs	r3, #32
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	db13      	blt.n	800bd98 <calculateSPLQ31+0x3ac>
 800bd70:	22a4      	movs	r2, #164	@ 0xa4
 800bd72:	18ba      	adds	r2, r7, r2
 800bd74:	6812      	ldr	r2, [r2, #0]
 800bd76:	40da      	lsrs	r2, r3
 800bd78:	61ba      	str	r2, [r7, #24]
 800bd7a:	e01e      	b.n	800bdba <calculateSPLQ31+0x3ce>
 800bd7c:	20001b08 	.word	0x20001b08
 800bd80:	7fffffff 	.word	0x7fffffff
 800bd84:	20001d54 	.word	0x20001d54
 800bd88:	200000b0 	.word	0x200000b0
 800bd8c:	20001d5c 	.word	0x20001d5c
 800bd90:	200000b4 	.word	0x200000b4
 800bd94:	200000c0 	.word	0x200000c0
 800bd98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd9a:	2220      	movs	r2, #32
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	22a4      	movs	r2, #164	@ 0xa4
 800bda0:	18ba      	adds	r2, r7, r2
 800bda2:	6812      	ldr	r2, [r2, #0]
 800bda4:	409a      	lsls	r2, r3
 800bda6:	0013      	movs	r3, r2
 800bda8:	22a0      	movs	r2, #160	@ 0xa0
 800bdaa:	18ba      	adds	r2, r7, r2
 800bdac:	6811      	ldr	r1, [r2, #0]
 800bdae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bdb0:	40d1      	lsrs	r1, r2
 800bdb2:	61b9      	str	r1, [r7, #24]
 800bdb4:	69ba      	ldr	r2, [r7, #24]
 800bdb6:	431a      	orrs	r2, r3
 800bdb8:	61ba      	str	r2, [r7, #24]
 800bdba:	23a4      	movs	r3, #164	@ 0xa4
 800bdbc:	18fb      	adds	r3, r7, r3
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdc2:	40da      	lsrs	r2, r3
 800bdc4:	61fa      	str	r2, [r7, #28]
 800bdc6:	69ba      	ldr	r2, [r7, #24]
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	21a0      	movs	r1, #160	@ 0xa0
 800bdcc:	1879      	adds	r1, r7, r1
 800bdce:	600a      	str	r2, [r1, #0]
 800bdd0:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	2294      	movs	r2, #148	@ 0x94
 800bdd6:	18ba      	adds	r2, r7, r2
 800bdd8:	6013      	str	r3, [r2, #0]
 800bdda:	e02c      	b.n	800be36 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800bddc:	2330      	movs	r3, #48	@ 0x30
 800bdde:	18fa      	adds	r2, r7, r3
 800bde0:	2394      	movs	r3, #148	@ 0x94
 800bde2:	18fb      	adds	r3, r7, r3
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	18d3      	adds	r3, r2, r3
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800bdf0:	3920      	subs	r1, #32
 800bdf2:	2900      	cmp	r1, #0
 800bdf4:	db03      	blt.n	800bdfe <calculateSPLQ31+0x412>
 800bdf6:	0018      	movs	r0, r3
 800bdf8:	40c8      	lsrs	r0, r1
 800bdfa:	0004      	movs	r4, r0
 800bdfc:	e00a      	b.n	800be14 <calculateSPLQ31+0x428>
 800bdfe:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800be00:	2020      	movs	r0, #32
 800be02:	1a41      	subs	r1, r0, r1
 800be04:	0018      	movs	r0, r3
 800be06:	4088      	lsls	r0, r1
 800be08:	0001      	movs	r1, r0
 800be0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800be0c:	0016      	movs	r6, r2
 800be0e:	40c6      	lsrs	r6, r0
 800be10:	0034      	movs	r4, r6
 800be12:	430c      	orrs	r4, r1
 800be14:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800be16:	40cb      	lsrs	r3, r1
 800be18:	001d      	movs	r5, r3
 800be1a:	2330      	movs	r3, #48	@ 0x30
 800be1c:	18fa      	adds	r2, r7, r3
 800be1e:	2194      	movs	r1, #148	@ 0x94
 800be20:	187b      	adds	r3, r7, r1
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	00db      	lsls	r3, r3, #3
 800be26:	18d3      	adds	r3, r2, r3
 800be28:	601c      	str	r4, [r3, #0]
 800be2a:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800be2c:	187b      	adds	r3, r7, r1
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	3301      	adds	r3, #1
 800be32:	187a      	adds	r2, r7, r1
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	2394      	movs	r3, #148	@ 0x94
 800be38:	18fb      	adds	r3, r7, r3
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b05      	cmp	r3, #5
 800be3e:	d9cd      	bls.n	800bddc <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800be40:	230f      	movs	r3, #15
 800be42:	425d      	negs	r5, r3
 800be44:	2305      	movs	r3, #5
 800be46:	425e      	negs	r6, r3
 800be48:	4b4a      	ldr	r3, [pc, #296]	@ (800bf74 <calculateSPLQ31+0x588>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	681a      	ldr	r2, [r3, #0]
 800be4e:	4b4a      	ldr	r3, [pc, #296]	@ (800bf78 <calculateSPLQ31+0x58c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	21a0      	movs	r1, #160	@ 0xa0
 800be56:	1879      	adds	r1, r7, r1
 800be58:	6808      	ldr	r0, [r1, #0]
 800be5a:	6849      	ldr	r1, [r1, #4]
 800be5c:	4c47      	ldr	r4, [pc, #284]	@ (800bf7c <calculateSPLQ31+0x590>)
 800be5e:	9403      	str	r4, [sp, #12]
 800be60:	4c47      	ldr	r4, [pc, #284]	@ (800bf80 <calculateSPLQ31+0x594>)
 800be62:	9402      	str	r4, [sp, #8]
 800be64:	9301      	str	r3, [sp, #4]
 800be66:	9200      	str	r2, [sp, #0]
 800be68:	0033      	movs	r3, r6
 800be6a:	002a      	movs	r2, r5
 800be6c:	f000 fa86 	bl	800c37c <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800be70:	2300      	movs	r3, #0
 800be72:	2290      	movs	r2, #144	@ 0x90
 800be74:	18ba      	adds	r2, r7, r2
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	e026      	b.n	800bec8 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800be7a:	2330      	movs	r3, #48	@ 0x30
 800be7c:	18fa      	adds	r2, r7, r3
 800be7e:	2490      	movs	r4, #144	@ 0x90
 800be80:	193b      	adds	r3, r7, r4
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	00db      	lsls	r3, r3, #3
 800be86:	18d3      	adds	r3, r2, r3
 800be88:	6818      	ldr	r0, [r3, #0]
 800be8a:	6859      	ldr	r1, [r3, #4]
 800be8c:	230f      	movs	r3, #15
 800be8e:	425d      	negs	r5, r3
 800be90:	2305      	movs	r3, #5
 800be92:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800be94:	193b      	adds	r3, r7, r4
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	009a      	lsls	r2, r3, #2
 800be9a:	4b3a      	ldr	r3, [pc, #232]	@ (800bf84 <calculateSPLQ31+0x598>)
 800be9c:	18d3      	adds	r3, r2, r3
 800be9e:	193a      	adds	r2, r7, r4
 800bea0:	6812      	ldr	r2, [r2, #0]
 800bea2:	0094      	lsls	r4, r2, #2
 800bea4:	4a38      	ldr	r2, [pc, #224]	@ (800bf88 <calculateSPLQ31+0x59c>)
 800bea6:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800bea8:	9203      	str	r2, [sp, #12]
 800beaa:	9302      	str	r3, [sp, #8]
 800beac:	2300      	movs	r3, #0
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	2300      	movs	r3, #0
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	0033      	movs	r3, r6
 800beb6:	002a      	movs	r2, r5
 800beb8:	f000 fa60 	bl	800c37c <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800bebc:	2490      	movs	r4, #144	@ 0x90
 800bebe:	193b      	adds	r3, r7, r4
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	3301      	adds	r3, #1
 800bec4:	193a      	adds	r2, r7, r4
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	2390      	movs	r3, #144	@ 0x90
 800beca:	18fb      	adds	r3, r7, r3
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b05      	cmp	r3, #5
 800bed0:	d9d3      	bls.n	800be7a <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800bed2:	4b2b      	ldr	r3, [pc, #172]	@ (800bf80 <calculateSPLQ31+0x594>)
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	4b2d      	ldr	r3, [pc, #180]	@ (800bf8c <calculateSPLQ31+0x5a0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	18d2      	adds	r2, r2, r3
 800bedc:	4b2b      	ldr	r3, [pc, #172]	@ (800bf8c <calculateSPLQ31+0x5a0>)
 800bede:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800bee0:	4b26      	ldr	r3, [pc, #152]	@ (800bf7c <calculateSPLQ31+0x590>)
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	4b2a      	ldr	r3, [pc, #168]	@ (800bf90 <calculateSPLQ31+0x5a4>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	18d2      	adds	r2, r2, r3
 800beea:	4b29      	ldr	r3, [pc, #164]	@ (800bf90 <calculateSPLQ31+0x5a4>)
 800beec:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800beee:	2300      	movs	r3, #0
 800bef0:	228c      	movs	r2, #140	@ 0x8c
 800bef2:	18ba      	adds	r2, r7, r2
 800bef4:	6013      	str	r3, [r2, #0]
 800bef6:	e025      	b.n	800bf44 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800bef8:	4b22      	ldr	r3, [pc, #136]	@ (800bf84 <calculateSPLQ31+0x598>)
 800befa:	208c      	movs	r0, #140	@ 0x8c
 800befc:	183a      	adds	r2, r7, r0
 800befe:	6812      	ldr	r2, [r2, #0]
 800bf00:	0092      	lsls	r2, r2, #2
 800bf02:	58d2      	ldr	r2, [r2, r3]
 800bf04:	4b23      	ldr	r3, [pc, #140]	@ (800bf94 <calculateSPLQ31+0x5a8>)
 800bf06:	1839      	adds	r1, r7, r0
 800bf08:	6809      	ldr	r1, [r1, #0]
 800bf0a:	0089      	lsls	r1, r1, #2
 800bf0c:	58cb      	ldr	r3, [r1, r3]
 800bf0e:	18d1      	adds	r1, r2, r3
 800bf10:	4b20      	ldr	r3, [pc, #128]	@ (800bf94 <calculateSPLQ31+0x5a8>)
 800bf12:	183a      	adds	r2, r7, r0
 800bf14:	6812      	ldr	r2, [r2, #0]
 800bf16:	0092      	lsls	r2, r2, #2
 800bf18:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800bf1a:	4b1b      	ldr	r3, [pc, #108]	@ (800bf88 <calculateSPLQ31+0x59c>)
 800bf1c:	183a      	adds	r2, r7, r0
 800bf1e:	6812      	ldr	r2, [r2, #0]
 800bf20:	0092      	lsls	r2, r2, #2
 800bf22:	58d2      	ldr	r2, [r2, r3]
 800bf24:	4b1c      	ldr	r3, [pc, #112]	@ (800bf98 <calculateSPLQ31+0x5ac>)
 800bf26:	1839      	adds	r1, r7, r0
 800bf28:	6809      	ldr	r1, [r1, #0]
 800bf2a:	0089      	lsls	r1, r1, #2
 800bf2c:	58cb      	ldr	r3, [r1, r3]
 800bf2e:	18d1      	adds	r1, r2, r3
 800bf30:	4b19      	ldr	r3, [pc, #100]	@ (800bf98 <calculateSPLQ31+0x5ac>)
 800bf32:	183a      	adds	r2, r7, r0
 800bf34:	6812      	ldr	r2, [r2, #0]
 800bf36:	0092      	lsls	r2, r2, #2
 800bf38:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800bf3a:	183b      	adds	r3, r7, r0
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	183a      	adds	r2, r7, r0
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	238c      	movs	r3, #140	@ 0x8c
 800bf46:	18fb      	adds	r3, r7, r3
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b05      	cmp	r3, #5
 800bf4c:	d9d4      	bls.n	800bef8 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800bf4e:	4b13      	ldr	r3, [pc, #76]	@ (800bf9c <calculateSPLQ31+0x5b0>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	1c5a      	adds	r2, r3, #1
 800bf54:	4b11      	ldr	r3, [pc, #68]	@ (800bf9c <calculateSPLQ31+0x5b0>)
 800bf56:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800bf58:	4b10      	ldr	r3, [pc, #64]	@ (800bf9c <calculateSPLQ31+0x5b0>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b0f      	cmp	r3, #15
 800bf5e:	d905      	bls.n	800bf6c <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800bf60:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa0 <calculateSPLQ31+0x5b4>)
 800bf62:	2201      	movs	r2, #1
 800bf64:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800bf66:	4b0f      	ldr	r3, [pc, #60]	@ (800bfa4 <calculateSPLQ31+0x5b8>)
 800bf68:	2200      	movs	r2, #0
 800bf6a:	701a      	strb	r2, [r3, #0]
    }
}
 800bf6c:	46c0      	nop			@ (mov r8, r8)
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	b02f      	add	sp, #188	@ 0xbc
 800bf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf74:	200000b8 	.word	0x200000b8
 800bf78:	200000bc 	.word	0x200000bc
 800bf7c:	200012d4 	.word	0x200012d4
 800bf80:	200012d0 	.word	0x200012d0
 800bf84:	200012d8 	.word	0x200012d8
 800bf88:	200012f0 	.word	0x200012f0
 800bf8c:	20001d18 	.word	0x20001d18
 800bf90:	20001d1c 	.word	0x20001d1c
 800bf94:	20001d20 	.word	0x20001d20
 800bf98:	20001d38 	.word	0x20001d38
 800bf9c:	20001d50 	.word	0x20001d50
 800bfa0:	200012c4 	.word	0x200012c4
 800bfa4:	200012c2 	.word	0x200012c2

0800bfa8 <resetSPLstate>:

static void resetSPLstate(void)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800bfae:	4b11      	ldr	r3, [pc, #68]	@ (800bff4 <resetSPLstate+0x4c>)
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800bfb4:	4b10      	ldr	r3, [pc, #64]	@ (800bff8 <resetSPLstate+0x50>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800bfba:	4b10      	ldr	r3, [pc, #64]	@ (800bffc <resetSPLstate+0x54>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	607b      	str	r3, [r7, #4]
 800bfc4:	e00c      	b.n	800bfe0 <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800bfc6:	4b0e      	ldr	r3, [pc, #56]	@ (800c000 <resetSPLstate+0x58>)
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	0092      	lsls	r2, r2, #2
 800bfcc:	2100      	movs	r1, #0
 800bfce:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800bfd0:	4b0c      	ldr	r3, [pc, #48]	@ (800c004 <resetSPLstate+0x5c>)
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	0092      	lsls	r2, r2, #2
 800bfd6:	2100      	movs	r1, #0
 800bfd8:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	607b      	str	r3, [r7, #4]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b05      	cmp	r3, #5
 800bfe4:	d9ef      	bls.n	800bfc6 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800bfe6:	4b08      	ldr	r3, [pc, #32]	@ (800c008 <resetSPLstate+0x60>)
 800bfe8:	2200      	movs	r2, #0
 800bfea:	701a      	strb	r2, [r3, #0]
}
 800bfec:	46c0      	nop			@ (mov r8, r8)
 800bfee:	46bd      	mov	sp, r7
 800bff0:	b002      	add	sp, #8
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	20001d18 	.word	0x20001d18
 800bff8:	20001d1c 	.word	0x20001d1c
 800bffc:	20001d50 	.word	0x20001d50
 800c000:	20001d20 	.word	0x20001d20
 800c004:	20001d38 	.word	0x20001d38
 800c008:	200012c4 	.word	0x200012c4

0800c00c <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800c00c:	b5b0      	push	{r4, r5, r7, lr}
 800c00e:	b090      	sub	sp, #64	@ 0x40
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	0019      	movs	r1, r3
 800c018:	1dfb      	adds	r3, r7, #7
 800c01a:	701a      	strb	r2, [r3, #0]
 800c01c:	1dbb      	adds	r3, r7, #6
 800c01e:	1c0a      	adds	r2, r1, #0
 800c020:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800c022:	1dfb      	adds	r3, r7, #7
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d005      	beq.n	800c036 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800c02a:	4b3b      	ldr	r3, [pc, #236]	@ (800c118 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800c030:	4b3a      	ldr	r3, [pc, #232]	@ (800c11c <getFilteredMaxAmplitudeQ31+0x110>)
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800c036:	2300      	movs	r3, #0
 800c038:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800c03e:	2305      	movs	r3, #5
 800c040:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800c042:	2300      	movs	r3, #0
 800c044:	637b      	str	r3, [r7, #52]	@ 0x34
 800c046:	e040      	b.n	800c0ca <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800c048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	18d3      	adds	r3, r2, r3
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c054:	409a      	lsls	r2, r3
 800c056:	0013      	movs	r3, r2
 800c058:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800c05a:	4b30      	ldr	r3, [pc, #192]	@ (800c11c <getFilteredMaxAmplitudeQ31+0x110>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	425a      	negs	r2, r3
 800c060:	4b2e      	ldr	r3, [pc, #184]	@ (800c11c <getFilteredMaxAmplitudeQ31+0x110>)
 800c062:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800c064:	2418      	movs	r4, #24
 800c066:	193a      	adds	r2, r7, r4
 800c068:	492c      	ldr	r1, [pc, #176]	@ (800c11c <getFilteredMaxAmplitudeQ31+0x110>)
 800c06a:	231c      	movs	r3, #28
 800c06c:	18f8      	adds	r0, r7, r3
 800c06e:	2301      	movs	r3, #1
 800c070:	f011 f9ca 	bl	801d408 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800c074:	2514      	movs	r5, #20
 800c076:	197a      	adds	r2, r7, r5
 800c078:	1939      	adds	r1, r7, r4
 800c07a:	4829      	ldr	r0, [pc, #164]	@ (800c120 <getFilteredMaxAmplitudeQ31+0x114>)
 800c07c:	2301      	movs	r3, #1
 800c07e:	f011 f991 	bl	801d3a4 <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800c082:	2410      	movs	r4, #16
 800c084:	193a      	adds	r2, r7, r4
 800c086:	4924      	ldr	r1, [pc, #144]	@ (800c118 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c088:	4826      	ldr	r0, [pc, #152]	@ (800c124 <getFilteredMaxAmplitudeQ31+0x118>)
 800c08a:	2301      	movs	r3, #1
 800c08c:	f011 f98a 	bl	801d3a4 <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800c090:	4a21      	ldr	r2, [pc, #132]	@ (800c118 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c092:	1939      	adds	r1, r7, r4
 800c094:	1978      	adds	r0, r7, r5
 800c096:	2301      	movs	r3, #1
 800c098:	f011 f9b6 	bl	801d408 <arm_add_q31>

        lastData = fx;
 800c09c:	69fa      	ldr	r2, [r7, #28]
 800c09e:	4b1f      	ldr	r3, [pc, #124]	@ (800c11c <getFilteredMaxAmplitudeQ31+0x110>)
 800c0a0:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800c0a2:	4b1d      	ldr	r3, [pc, #116]	@ (800c118 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	da03      	bge.n	800c0b4 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800c0ac:	4b1a      	ldr	r3, [pc, #104]	@ (800c118 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0b2:	e007      	b.n	800c0c4 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800c0b4:	4b18      	ldr	r3, [pc, #96]	@ (800c118 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	dd02      	ble.n	800c0c4 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800c0be:	4b16      	ldr	r3, [pc, #88]	@ (800c118 <getFilteredMaxAmplitudeQ31+0x10c>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800c0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d3ba      	bcc.n	800c048 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	17da      	asrs	r2, r3, #31
 800c0d6:	189b      	adds	r3, r3, r2
 800c0d8:	4053      	eors	r3, r2
 800c0da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800c0dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0de:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800c0e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d200      	bcs.n	800c0ea <getFilteredMaxAmplitudeQ31+0xde>
 800c0e8:	0013      	movs	r3, r2
 800c0ea:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800c0ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	40da      	lsrs	r2, r3
 800c0f2:	0013      	movs	r3, r2
 800c0f4:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800c0f6:	1dbb      	adds	r3, r7, #6
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d007      	beq.n	800c10e <getFilteredMaxAmplitudeQ31+0x102>
 800c0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800c128 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6a3a      	ldr	r2, [r7, #32]
 800c104:	429a      	cmp	r2, r3
 800c106:	d902      	bls.n	800c10e <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800c108:	4b07      	ldr	r3, [pc, #28]	@ (800c128 <getFilteredMaxAmplitudeQ31+0x11c>)
 800c10a:	6a3a      	ldr	r2, [r7, #32]
 800c10c:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800c10e:	6a3b      	ldr	r3, [r7, #32]
}
 800c110:	0018      	movs	r0, r3
 800c112:	46bd      	mov	sp, r7
 800c114:	b010      	add	sp, #64	@ 0x40
 800c116:	bdb0      	pop	{r4, r5, r7, pc}
 800c118:	20002154 	.word	0x20002154
 800c11c:	20002158 	.word	0x20002158
 800c120:	08023c6c 	.word	0x08023c6c
 800c124:	08023c70 	.word	0x08023c70
 800c128:	200012cc 	.word	0x200012cc

0800c12c <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800c138:	4913      	ldr	r1, [pc, #76]	@ (800c188 <floatToIntAndFrac2dp+0x5c>)
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7f4 ff30 	bl	8000fa0 <__aeabi_fmul>
 800c140:	1c03      	adds	r3, r0, #0
 800c142:	1c18      	adds	r0, r3, #0
 800c144:	f015 fd94 	bl	8021c70 <roundf>
 800c148:	1c03      	adds	r3, r0, #0
 800c14a:	1c18      	adds	r0, r3, #0
 800c14c:	f7f4 fa66 	bl	800061c <__aeabi_f2uiz>
 800c150:	0003      	movs	r3, r0
 800c152:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2164      	movs	r1, #100	@ 0x64
 800c158:	0018      	movs	r0, r3
 800c15a:	f7f4 f823 	bl	80001a4 <__udivsi3>
 800c15e:	0003      	movs	r3, r0
 800c160:	001a      	movs	r2, r3
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2164      	movs	r1, #100	@ 0x64
 800c172:	434b      	muls	r3, r1
 800c174:	b2db      	uxtb	r3, r3
 800c176:	1ad3      	subs	r3, r2, r3
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	701a      	strb	r2, [r3, #0]
}
 800c17e:	46c0      	nop			@ (mov r8, r8)
 800c180:	46bd      	mov	sp, r7
 800c182:	b006      	add	sp, #24
 800c184:	bd80      	pop	{r7, pc}
 800c186:	46c0      	nop			@ (mov r8, r8)
 800c188:	42c80000 	.word	0x42c80000

0800c18c <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800c198:	4914      	ldr	r1, [pc, #80]	@ (800c1ec <floatToIntAndFrac1dp+0x60>)
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f7f4 ff00 	bl	8000fa0 <__aeabi_fmul>
 800c1a0:	1c03      	adds	r3, r0, #0
 800c1a2:	1c18      	adds	r0, r3, #0
 800c1a4:	f015 fd64 	bl	8021c70 <roundf>
 800c1a8:	1c03      	adds	r3, r0, #0
 800c1aa:	1c18      	adds	r0, r3, #0
 800c1ac:	f7f4 fa36 	bl	800061c <__aeabi_f2uiz>
 800c1b0:	0003      	movs	r3, r0
 800c1b2:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	210a      	movs	r1, #10
 800c1b8:	0018      	movs	r0, r3
 800c1ba:	f7f3 fff3 	bl	80001a4 <__udivsi3>
 800c1be:	0003      	movs	r3, r0
 800c1c0:	001a      	movs	r2, r3
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	1c19      	adds	r1, r3, #0
 800c1d2:	0089      	lsls	r1, r1, #2
 800c1d4:	18cb      	adds	r3, r1, r3
 800c1d6:	18db      	adds	r3, r3, r3
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	1ad3      	subs	r3, r2, r3
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	701a      	strb	r2, [r3, #0]
}
 800c1e2:	46c0      	nop			@ (mov r8, r8)
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	b006      	add	sp, #24
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	46c0      	nop			@ (mov r8, r8)
 800c1ec:	41200000 	.word	0x41200000

0800c1f0 <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800c1f0:	b590      	push	{r4, r7, lr}
 800c1f2:	b087      	sub	sp, #28
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	60f8      	str	r0, [r7, #12]
 800c1f8:	60b9      	str	r1, [r7, #8]
 800c1fa:	607a      	str	r2, [r7, #4]
 800c1fc:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7f5 f9e6 	bl	80015d0 <__aeabi_i2f>
 800c204:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c206:	6838      	ldr	r0, [r7, #0]
 800c208:	f7f5 f9e2 	bl	80015d0 <__aeabi_i2f>
 800c20c:	1c03      	adds	r3, r0, #0
 800c20e:	4918      	ldr	r1, [pc, #96]	@ (800c270 <sumToIntAverage+0x80>)
 800c210:	1c18      	adds	r0, r3, #0
 800c212:	f7f4 fcdf 	bl	8000bd4 <__aeabi_fdiv>
 800c216:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c218:	1c19      	adds	r1, r3, #0
 800c21a:	1c20      	adds	r0, r4, #0
 800c21c:	f7f4 fb50 	bl	80008c0 <__aeabi_fadd>
 800c220:	1c03      	adds	r3, r0, #0
 800c222:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800c224:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c226:	f7f5 fa1f 	bl	8001668 <__aeabi_ui2f>
 800c22a:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800c22c:	1c19      	adds	r1, r3, #0
 800c22e:	1c20      	adds	r0, r4, #0
 800c230:	f7f4 fcd0 	bl	8000bd4 <__aeabi_fdiv>
 800c234:	1c03      	adds	r3, r0, #0
 800c236:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800c238:	2300      	movs	r3, #0
 800c23a:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	2310      	movs	r3, #16
 800c240:	18f9      	adds	r1, r7, r3
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	1c18      	adds	r0, r3, #0
 800c246:	f7ff ffa1 	bl	800c18c <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	2bff      	cmp	r3, #255	@ 0xff
 800c24e:	d906      	bls.n	800c25e <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	22ff      	movs	r2, #255	@ 0xff
 800c254:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	2209      	movs	r2, #9
 800c25a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800c25c:	e003      	b.n	800c266 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	b2da      	uxtb	r2, r3
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	701a      	strb	r2, [r3, #0]
}
 800c266:	46c0      	nop			@ (mov r8, r8)
 800c268:	46bd      	mov	sp, r7
 800c26a:	b007      	add	sp, #28
 800c26c:	bd90      	pop	{r4, r7, pc}
 800c26e:	46c0      	nop			@ (mov r8, r8)
 800c270:	41200000 	.word	0x41200000

0800c274 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b086      	sub	sp, #24
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
 800c280:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2280      	movs	r2, #128	@ 0x80
 800c286:	0612      	lsls	r2, r2, #24
 800c288:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	4a18      	ldr	r2, [pc, #96]	@ (800c2f0 <findMinMax+0x7c>)
 800c28e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
 800c294:	e022      	b.n	800c2dc <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	18d3      	adds	r3, r2, r3
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	da06      	bge.n	800c2b6 <findMinMax+0x42>
        {
            min[0] = array[i];
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	18d3      	adds	r3, r2, r3
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	18d3      	adds	r3, r2, r3
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	dd06      	ble.n	800c2d6 <findMinMax+0x62>
        {
            max[0] = array[i];
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	18d3      	adds	r3, r2, r3
 800c2d0:	681a      	ldr	r2, [r3, #0]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d3d8      	bcc.n	800c296 <findMinMax+0x22>
        }
    }
}
 800c2e4:	46c0      	nop			@ (mov r8, r8)
 800c2e6:	46c0      	nop			@ (mov r8, r8)
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	b006      	add	sp, #24
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	46c0      	nop			@ (mov r8, r8)
 800c2f0:	7fffffff 	.word	0x7fffffff

0800c2f4 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b084      	sub	sp, #16
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	429a      	cmp	r2, r3
 800c308:	d302      	bcc.n	800c310 <getPo2factor+0x1c>
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d107      	bne.n	800c320 <getPo2factor+0x2c>
    {
        return 0;
 800c310:	2300      	movs	r3, #0
 800c312:	e00d      	b.n	800c330 <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	085b      	lsrs	r3, r3, #1
 800c318:	607b      	str	r3, [r7, #4]
        bitShift++;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3301      	adds	r3, #1
 800c31e:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	429a      	cmp	r2, r3
 800c326:	d2f5      	bcs.n	800c314 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3b01      	subs	r3, #1
 800c32c:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800c32e:	68fb      	ldr	r3, [r7, #12]
}
 800c330:	0018      	movs	r0, r3
 800c332:	46bd      	mov	sp, r7
 800c334:	b004      	add	sp, #16
 800c336:	bd80      	pop	{r7, pc}

0800c338 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b086      	sub	sp, #24
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	60f8      	str	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
 800c344:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7f5 f98e 	bl	8001668 <__aeabi_ui2f>
 800c34c:	1c03      	adds	r3, r0, #0
 800c34e:	1c19      	adds	r1, r3, #0
 800c350:	68b8      	ldr	r0, [r7, #8]
 800c352:	f7f4 fe25 	bl	8000fa0 <__aeabi_fmul>
 800c356:	1c03      	adds	r3, r0, #0
 800c358:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800c35e:	683a      	ldr	r2, [r7, #0]
 800c360:	2310      	movs	r3, #16
 800c362:	18f9      	adds	r1, r7, r3
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	1c18      	adds	r0, r3, #0
 800c368:	f7ff fee0 	bl	800c12c <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	b29a      	uxth	r2, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	801a      	strh	r2, [r3, #0]
}
 800c374:	46c0      	nop			@ (mov r8, r8)
 800c376:	46bd      	mov	sp, r7
 800c378:	b006      	add	sp, #24
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	60b8      	str	r0, [r7, #8]
 800c384:	60f9      	str	r1, [r7, #12]
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800c38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38c:	6a3a      	ldr	r2, [r7, #32]
 800c38e:	68b8      	ldr	r0, [r7, #8]
 800c390:	68f9      	ldr	r1, [r7, #12]
 800c392:	f7fa fbc5 	bl	8006b20 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800c396:	6a3b      	ldr	r3, [r7, #32]
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	18d2      	adds	r2, r2, r3
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	18d2      	adds	r2, r2, r3
 800c3a2:	6a3b      	ldr	r3, [r7, #32]
 800c3a4:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	18d2      	adds	r2, r2, r3
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	18d2      	adds	r2, r2, r3
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800c3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b8:	6a3b      	ldr	r3, [r7, #32]
 800c3ba:	0011      	movs	r1, r2
 800c3bc:	0018      	movs	r0, r3
 800c3be:	f7fa fc3f 	bl	8006c40 <correctIntFracNumber>
}
 800c3c2:	46c0      	nop			@ (mov r8, r8)
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	b004      	add	sp, #16
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b086      	sub	sp, #24
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	60b9      	str	r1, [r7, #8]
 800c3d4:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c3da:	2300      	movs	r3, #0
 800c3dc:	613b      	str	r3, [r7, #16]
 800c3de:	e019      	b.n	800c414 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	18d3      	adds	r3, r2, r3
 800c3e8:	881b      	ldrh	r3, [r3, #0]
 800c3ea:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	3201      	adds	r2, #1
 800c3f0:	0052      	lsls	r2, r2, #1
 800c3f2:	68f9      	ldr	r1, [r7, #12]
 800c3f4:	188a      	adds	r2, r1, r2
 800c3f6:	8812      	ldrh	r2, [r2, #0]
 800c3f8:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c3fa:	0019      	movs	r1, r3
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	009b      	lsls	r3, r3, #2
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800c404:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800c406:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	3301      	adds	r3, #1
 800c40c:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	3304      	adds	r3, #4
 800c412:	613b      	str	r3, [r7, #16]
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d3e1      	bcc.n	800c3e0 <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800c41c:	46c0      	nop			@ (mov r8, r8)
 800c41e:	46c0      	nop			@ (mov r8, r8)
 800c420:	46bd      	mov	sp, r7
 800c422:	b006      	add	sp, #24
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800c428:	b580      	push	{r7, lr}
 800c42a:	af00      	add	r7, sp, #0
  init = false;
 800c42c:	4b02      	ldr	r3, [pc, #8]	@ (800c438 <InitDone+0x10>)
 800c42e:	2200      	movs	r2, #0
 800c430:	701a      	strb	r2, [r3, #0]
}
 800c432:	46c0      	nop			@ (mov r8, r8)
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	200000c4 	.word	0x200000c4

0800c43c <batteryChargeCheck>:
  10%-----3.68V
  5%------3.45V
  0%------3.00V
 */

Battery_Status batteryChargeCheck(){
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800c442:	f7f9 fd97 	bl	8005f74 <ReadBatteryVoltage>
 800c446:	1c03      	adds	r3, r0, #0
 800c448:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800c44a:	491f      	ldr	r1, [pc, #124]	@ (800c4c8 <batteryChargeCheck+0x8c>)
 800c44c:	6838      	ldr	r0, [r7, #0]
 800c44e:	f7f4 f86f 	bl	8000530 <__aeabi_fcmplt>
 800c452:	1e03      	subs	r3, r0, #0
 800c454:	d002      	beq.n	800c45c <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800c456:	1dfb      	adds	r3, r7, #7
 800c458:	2200      	movs	r2, #0
 800c45a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800c45c:	6838      	ldr	r0, [r7, #0]
 800c45e:	f7f7 f801 	bl	8003464 <__aeabi_f2d>
 800c462:	4a1a      	ldr	r2, [pc, #104]	@ (800c4cc <batteryChargeCheck+0x90>)
 800c464:	4b1a      	ldr	r3, [pc, #104]	@ (800c4d0 <batteryChargeCheck+0x94>)
 800c466:	f7f4 f829 	bl	80004bc <__aeabi_dcmplt>
 800c46a:	1e03      	subs	r3, r0, #0
 800c46c:	d008      	beq.n	800c480 <batteryChargeCheck+0x44>
 800c46e:	4916      	ldr	r1, [pc, #88]	@ (800c4c8 <batteryChargeCheck+0x8c>)
 800c470:	6838      	ldr	r0, [r7, #0]
 800c472:	f7f4 f87b 	bl	800056c <__aeabi_fcmpge>
 800c476:	1e03      	subs	r3, r0, #0
 800c478:	d002      	beq.n	800c480 <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800c47a:	1dfb      	adds	r3, r7, #7
 800c47c:	2202      	movs	r2, #2
 800c47e:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800c480:	2181      	movs	r1, #129	@ 0x81
 800c482:	05c9      	lsls	r1, r1, #23
 800c484:	6838      	ldr	r0, [r7, #0]
 800c486:	f7f4 f853 	bl	8000530 <__aeabi_fcmplt>
 800c48a:	1e03      	subs	r3, r0, #0
 800c48c:	d00b      	beq.n	800c4a6 <batteryChargeCheck+0x6a>
 800c48e:	6838      	ldr	r0, [r7, #0]
 800c490:	f7f6 ffe8 	bl	8003464 <__aeabi_f2d>
 800c494:	4a0d      	ldr	r2, [pc, #52]	@ (800c4cc <batteryChargeCheck+0x90>)
 800c496:	4b0e      	ldr	r3, [pc, #56]	@ (800c4d0 <batteryChargeCheck+0x94>)
 800c498:	f7f4 f82e 	bl	80004f8 <__aeabi_dcmpge>
 800c49c:	1e03      	subs	r3, r0, #0
 800c49e:	d002      	beq.n	800c4a6 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800c4a0:	1dfb      	adds	r3, r7, #7
 800c4a2:	2203      	movs	r2, #3
 800c4a4:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800c4a6:	2181      	movs	r1, #129	@ 0x81
 800c4a8:	05c9      	lsls	r1, r1, #23
 800c4aa:	6838      	ldr	r0, [r7, #0]
 800c4ac:	f7f4 f85e 	bl	800056c <__aeabi_fcmpge>
 800c4b0:	1e03      	subs	r3, r0, #0
 800c4b2:	d002      	beq.n	800c4ba <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800c4b4:	1dfb      	adds	r3, r7, #7
 800c4b6:	2204      	movs	r2, #4
 800c4b8:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800c4ba:	1dfb      	adds	r3, r7, #7
 800c4bc:	781b      	ldrb	r3, [r3, #0]
}
 800c4be:	0018      	movs	r0, r3
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	b002      	add	sp, #8
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	46c0      	nop			@ (mov r8, r8)
 800c4c8:	40600000 	.word	0x40600000
 800c4cc:	9999999a 	.word	0x9999999a
 800c4d0:	400d9999 	.word	0x400d9999

0800c4d4 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800c4d4:	b590      	push	{r4, r7, lr}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	0004      	movs	r4, r0
 800c4dc:	0008      	movs	r0, r1
 800c4de:	0011      	movs	r1, r2
 800c4e0:	1dbb      	adds	r3, r7, #6
 800c4e2:	1c22      	adds	r2, r4, #0
 800c4e4:	801a      	strh	r2, [r3, #0]
 800c4e6:	1d3b      	adds	r3, r7, #4
 800c4e8:	1c02      	adds	r2, r0, #0
 800c4ea:	801a      	strh	r2, [r3, #0]
 800c4ec:	1cbb      	adds	r3, r7, #2
 800c4ee:	1c0a      	adds	r2, r1, #0
 800c4f0:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c4f2:	4b0f      	ldr	r3, [pc, #60]	@ (800c530 <SetStatusLED+0x5c>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d107      	bne.n	800c50a <SetStatusLED+0x36>
 800c4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c534 <SetStatusLED+0x60>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d103      	bne.n	800c50a <SetStatusLED+0x36>
 800c502:	4b0d      	ldr	r3, [pc, #52]	@ (800c538 <SetStatusLED+0x64>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d00e      	beq.n	800c528 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800c50a:	2380      	movs	r3, #128	@ 0x80
 800c50c:	05db      	lsls	r3, r3, #23
 800c50e:	1dba      	adds	r2, r7, #6
 800c510:	8812      	ldrh	r2, [r2, #0]
 800c512:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800c514:	2380      	movs	r3, #128	@ 0x80
 800c516:	05db      	lsls	r3, r3, #23
 800c518:	1d3a      	adds	r2, r7, #4
 800c51a:	8812      	ldrh	r2, [r2, #0]
 800c51c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800c51e:	2380      	movs	r3, #128	@ 0x80
 800c520:	05db      	lsls	r3, r3, #23
 800c522:	1cba      	adds	r2, r7, #2
 800c524:	8812      	ldrh	r2, [r2, #0]
 800c526:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c528:	46c0      	nop			@ (mov r8, r8)
 800c52a:	46bd      	mov	sp, r7
 800c52c:	b003      	add	sp, #12
 800c52e:	bd90      	pop	{r4, r7, pc}
 800c530:	2000215d 	.word	0x2000215d
 800c534:	200000c4 	.word	0x200000c4
 800c538:	2000215e 	.word	0x2000215e

0800c53c <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800c53c:	b590      	push	{r4, r7, lr}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	0004      	movs	r4, r0
 800c544:	0008      	movs	r0, r1
 800c546:	0011      	movs	r1, r2
 800c548:	1dfb      	adds	r3, r7, #7
 800c54a:	1c22      	adds	r2, r4, #0
 800c54c:	701a      	strb	r2, [r3, #0]
 800c54e:	1dbb      	adds	r3, r7, #6
 800c550:	1c02      	adds	r2, r0, #0
 800c552:	701a      	strb	r2, [r3, #0]
 800c554:	1d7b      	adds	r3, r7, #5
 800c556:	1c0a      	adds	r2, r1, #0
 800c558:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800c55a:	4b19      	ldr	r3, [pc, #100]	@ (800c5c0 <SetDBLED+0x84>)
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d107      	bne.n	800c572 <SetDBLED+0x36>
 800c562:	4b18      	ldr	r3, [pc, #96]	@ (800c5c4 <SetDBLED+0x88>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d103      	bne.n	800c572 <SetDBLED+0x36>
 800c56a:	4b17      	ldr	r3, [pc, #92]	@ (800c5c8 <SetDBLED+0x8c>)
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d022      	beq.n	800c5b8 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800c572:	1dfb      	adds	r3, r7, #7
 800c574:	781b      	ldrb	r3, [r3, #0]
 800c576:	2201      	movs	r2, #1
 800c578:	4053      	eors	r3, r2
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	001a      	movs	r2, r3
 800c57e:	4b13      	ldr	r3, [pc, #76]	@ (800c5cc <SetDBLED+0x90>)
 800c580:	2101      	movs	r1, #1
 800c582:	0018      	movs	r0, r3
 800c584:	f002 fd83 	bl	800f08e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800c588:	1dbb      	adds	r3, r7, #6
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	2201      	movs	r2, #1
 800c58e:	4053      	eors	r3, r2
 800c590:	b2db      	uxtb	r3, r3
 800c592:	001a      	movs	r2, r3
 800c594:	2380      	movs	r3, #128	@ 0x80
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	480c      	ldr	r0, [pc, #48]	@ (800c5cc <SetDBLED+0x90>)
 800c59a:	0019      	movs	r1, r3
 800c59c:	f002 fd77 	bl	800f08e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800c5a0:	1d7b      	adds	r3, r7, #5
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	4053      	eors	r3, r2
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	001a      	movs	r2, r3
 800c5ac:	2380      	movs	r3, #128	@ 0x80
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	4806      	ldr	r0, [pc, #24]	@ (800c5cc <SetDBLED+0x90>)
 800c5b2:	0019      	movs	r1, r3
 800c5b4:	f002 fd6b 	bl	800f08e <HAL_GPIO_WritePin>
  }
}
 800c5b8:	46c0      	nop			@ (mov r8, r8)
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	b003      	add	sp, #12
 800c5be:	bd90      	pop	{r4, r7, pc}
 800c5c0:	2000215d 	.word	0x2000215d
 800c5c4:	200000c4 	.word	0x200000c4
 800c5c8:	2000215e 	.word	0x2000215e
 800c5cc:	50000400 	.word	0x50000400

0800c5d0 <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800c5d0:	b590      	push	{r4, r7, lr}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	0004      	movs	r4, r0
 800c5d8:	0008      	movs	r0, r1
 800c5da:	0011      	movs	r1, r2
 800c5dc:	1dbb      	adds	r3, r7, #6
 800c5de:	1c22      	adds	r2, r4, #0
 800c5e0:	801a      	strh	r2, [r3, #0]
 800c5e2:	1d3b      	adds	r3, r7, #4
 800c5e4:	1c02      	adds	r2, r0, #0
 800c5e6:	801a      	strh	r2, [r3, #0]
 800c5e8:	1cbb      	adds	r3, r7, #2
 800c5ea:	1c0a      	adds	r2, r1, #0
 800c5ec:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800c5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c628 <SetVocLED+0x58>)
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d107      	bne.n	800c606 <SetVocLED+0x36>
 800c5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c62c <SetVocLED+0x5c>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d103      	bne.n	800c606 <SetVocLED+0x36>
 800c5fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c630 <SetVocLED+0x60>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00b      	beq.n	800c61e <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800c606:	4b0b      	ldr	r3, [pc, #44]	@ (800c634 <SetVocLED+0x64>)
 800c608:	1dba      	adds	r2, r7, #6
 800c60a:	8812      	ldrh	r2, [r2, #0]
 800c60c:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800c60e:	4b09      	ldr	r3, [pc, #36]	@ (800c634 <SetVocLED+0x64>)
 800c610:	1d3a      	adds	r2, r7, #4
 800c612:	8812      	ldrh	r2, [r2, #0]
 800c614:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800c616:	4b07      	ldr	r3, [pc, #28]	@ (800c634 <SetVocLED+0x64>)
 800c618:	1cba      	adds	r2, r7, #2
 800c61a:	8812      	ldrh	r2, [r2, #0]
 800c61c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c61e:	46c0      	nop			@ (mov r8, r8)
 800c620:	46bd      	mov	sp, r7
 800c622:	b003      	add	sp, #12
 800c624:	bd90      	pop	{r4, r7, pc}
 800c626:	46c0      	nop			@ (mov r8, r8)
 800c628:	2000215d 	.word	0x2000215d
 800c62c:	200000c4 	.word	0x200000c4
 800c630:	2000215e 	.word	0x2000215e
 800c634:	40000400 	.word	0x40000400

0800c638 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800c638:	b580      	push	{r7, lr}
 800c63a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c63c:	4b07      	ldr	r3, [pc, #28]	@ (800c65c <SetMeasurementIndicator+0x24>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d103      	bne.n	800c64c <SetMeasurementIndicator+0x14>
 800c644:	4b06      	ldr	r3, [pc, #24]	@ (800c660 <SetMeasurementIndicator+0x28>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d003      	beq.n	800c654 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800c64c:	2380      	movs	r3, #128	@ 0x80
 800c64e:	05db      	lsls	r3, r3, #23
 800c650:	4a04      	ldr	r2, [pc, #16]	@ (800c664 <SetMeasurementIndicator+0x2c>)
 800c652:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c654:	46c0      	nop			@ (mov r8, r8)
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	46c0      	nop			@ (mov r8, r8)
 800c65c:	2000215d 	.word	0x2000215d
 800c660:	2000215e 	.word	0x2000215e
 800c664:	00000bb8 	.word	0x00000bb8

0800c668 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800c668:	b580      	push	{r7, lr}
 800c66a:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c66c:	4b07      	ldr	r3, [pc, #28]	@ (800c68c <ResetMeasurementIndicator+0x24>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <ResetMeasurementIndicator+0x14>
 800c674:	4b06      	ldr	r3, [pc, #24]	@ (800c690 <ResetMeasurementIndicator+0x28>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800c67c:	2380      	movs	r3, #128	@ 0x80
 800c67e:	05db      	lsls	r3, r3, #23
 800c680:	22fa      	movs	r2, #250	@ 0xfa
 800c682:	0112      	lsls	r2, r2, #4
 800c684:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800c686:	46c0      	nop			@ (mov r8, r8)
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	2000215d 	.word	0x2000215d
 800c690:	2000215e 	.word	0x2000215e

0800c694 <SetMICIndicator>:
void SetMICIndicator(){
 800c694:	b580      	push	{r7, lr}
 800c696:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c698:	4b07      	ldr	r3, [pc, #28]	@ (800c6b8 <SetMICIndicator+0x24>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <SetMICIndicator+0x14>
 800c6a0:	4b06      	ldr	r3, [pc, #24]	@ (800c6bc <SetMICIndicator+0x28>)
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800c6a8:	2380      	movs	r3, #128	@ 0x80
 800c6aa:	05db      	lsls	r3, r3, #23
 800c6ac:	4a04      	ldr	r2, [pc, #16]	@ (800c6c0 <SetMICIndicator+0x2c>)
 800c6ae:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c6b0:	46c0      	nop			@ (mov r8, r8)
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	46c0      	nop			@ (mov r8, r8)
 800c6b8:	2000215d 	.word	0x2000215d
 800c6bc:	2000215e 	.word	0x2000215e
 800c6c0:	00000bb8 	.word	0x00000bb8

0800c6c4 <ResetMICIndicator>:
void ResetMICIndicator(){
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c6c8:	4b07      	ldr	r3, [pc, #28]	@ (800c6e8 <ResetMICIndicator+0x24>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d103      	bne.n	800c6d8 <ResetMICIndicator+0x14>
 800c6d0:	4b06      	ldr	r3, [pc, #24]	@ (800c6ec <ResetMICIndicator+0x28>)
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800c6d8:	2380      	movs	r3, #128	@ 0x80
 800c6da:	05db      	lsls	r3, r3, #23
 800c6dc:	22fa      	movs	r2, #250	@ 0xfa
 800c6de:	0112      	lsls	r2, r2, #4
 800c6e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800c6e2:	46c0      	nop			@ (mov r8, r8)
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	2000215d 	.word	0x2000215d
 800c6ec:	2000215e 	.word	0x2000215e

0800c6f0 <SetESPIndicator>:
void SetESPIndicator(){
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c6f4:	4b07      	ldr	r3, [pc, #28]	@ (800c714 <SetESPIndicator+0x24>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d103      	bne.n	800c704 <SetESPIndicator+0x14>
 800c6fc:	4b06      	ldr	r3, [pc, #24]	@ (800c718 <SetESPIndicator+0x28>)
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d003      	beq.n	800c70c <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800c704:	2380      	movs	r3, #128	@ 0x80
 800c706:	05db      	lsls	r3, r3, #23
 800c708:	4a04      	ldr	r2, [pc, #16]	@ (800c71c <SetESPIndicator+0x2c>)
 800c70a:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c70c:	46c0      	nop			@ (mov r8, r8)
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	46c0      	nop			@ (mov r8, r8)
 800c714:	2000215d 	.word	0x2000215d
 800c718:	2000215e 	.word	0x2000215e
 800c71c:	00000bb8 	.word	0x00000bb8

0800c720 <ResetESPIndicator>:
void ResetESPIndicator(){
 800c720:	b580      	push	{r7, lr}
 800c722:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800c724:	4b07      	ldr	r3, [pc, #28]	@ (800c744 <ResetESPIndicator+0x24>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d103      	bne.n	800c734 <ResetESPIndicator+0x14>
 800c72c:	4b06      	ldr	r3, [pc, #24]	@ (800c748 <ResetESPIndicator+0x28>)
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d004      	beq.n	800c73e <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800c734:	2380      	movs	r3, #128	@ 0x80
 800c736:	05db      	lsls	r3, r3, #23
 800c738:	22fa      	movs	r2, #250	@ 0xfa
 800c73a:	0112      	lsls	r2, r2, #4
 800c73c:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800c73e:	46c0      	nop			@ (mov r8, r8)
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	2000215d 	.word	0x2000215d
 800c748:	2000215e 	.word	0x2000215e

0800c74c <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800c74c:	b580      	push	{r7, lr}
 800c74e:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800c750:	23fa      	movs	r3, #250	@ 0xfa
 800c752:	011a      	lsls	r2, r3, #4
 800c754:	23fa      	movs	r3, #250	@ 0xfa
 800c756:	0119      	lsls	r1, r3, #4
 800c758:	23fa      	movs	r3, #250	@ 0xfa
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	0018      	movs	r0, r3
 800c75e:	f7ff feb9 	bl	800c4d4 <SetStatusLED>
  SetDBLED(false,false,false);
 800c762:	2200      	movs	r2, #0
 800c764:	2100      	movs	r1, #0
 800c766:	2000      	movs	r0, #0
 800c768:	f7ff fee8 	bl	800c53c <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800c76c:	23fa      	movs	r3, #250	@ 0xfa
 800c76e:	011a      	lsls	r2, r3, #4
 800c770:	23fa      	movs	r3, #250	@ 0xfa
 800c772:	0119      	lsls	r1, r3, #4
 800c774:	23fa      	movs	r3, #250	@ 0xfa
 800c776:	011b      	lsls	r3, r3, #4
 800c778:	0018      	movs	r0, r3
 800c77a:	f7ff ff29 	bl	800c5d0 <SetVocLED>
return;
 800c77e:	46c0      	nop			@ (mov r8, r8)
}
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <powerCheck>:

Battery_Status powerCheck(){
 800c784:	b590      	push	{r4, r7, lr}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800c78a:	f7f9 fcb9 	bl	8006100 <Check_USB_PowerOn>
 800c78e:	0003      	movs	r3, r0
 800c790:	001a      	movs	r2, r3
 800c792:	2301      	movs	r3, #1
 800c794:	4053      	eors	r3, r2
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d005      	beq.n	800c7a8 <powerCheck+0x24>
    status = batteryChargeCheck();
 800c79c:	1dfc      	adds	r4, r7, #7
 800c79e:	f7ff fe4d 	bl	800c43c <batteryChargeCheck>
 800c7a2:	0003      	movs	r3, r0
 800c7a4:	7023      	strb	r3, [r4, #0]
 800c7a6:	e002      	b.n	800c7ae <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800c7a8:	1dfb      	adds	r3, r7, #7
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c7ae:	1dfb      	adds	r3, r7, #7
 800c7b0:	781b      	ldrb	r3, [r3, #0]
}
 800c7b2:	0018      	movs	r0, r3
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	b003      	add	sp, #12
 800c7b8:	bd90      	pop	{r4, r7, pc}
	...

0800c7bc <powerDisplay>:

void powerDisplay(Battery_Status status){
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	0002      	movs	r2, r0
 800c7c4:	1dfb      	adds	r3, r7, #7
 800c7c6:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800c7c8:	1dfb      	adds	r3, r7, #7
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d105      	bne.n	800c7dc <powerDisplay+0x20>
    Debug("LEDS are okay");
 800c7d0:	4a18      	ldr	r2, [pc, #96]	@ (800c834 <powerDisplay+0x78>)
 800c7d2:	4b19      	ldr	r3, [pc, #100]	@ (800c838 <powerDisplay+0x7c>)
 800c7d4:	0019      	movs	r1, r3
 800c7d6:	2003      	movs	r0, #3
 800c7d8:	f000 fe40 	bl	800d45c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800c7dc:	1dfb      	adds	r3, r7, #7
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b04      	cmp	r3, #4
 800c7e2:	d105      	bne.n	800c7f0 <powerDisplay+0x34>
    Debug("Battery fully charged");
 800c7e4:	4a15      	ldr	r2, [pc, #84]	@ (800c83c <powerDisplay+0x80>)
 800c7e6:	4b14      	ldr	r3, [pc, #80]	@ (800c838 <powerDisplay+0x7c>)
 800c7e8:	0019      	movs	r1, r3
 800c7ea:	2003      	movs	r0, #3
 800c7ec:	f000 fe36 	bl	800d45c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800c7f0:	1dfb      	adds	r3, r7, #7
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d105      	bne.n	800c804 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800c7f8:	4a11      	ldr	r2, [pc, #68]	@ (800c840 <powerDisplay+0x84>)
 800c7fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c838 <powerDisplay+0x7c>)
 800c7fc:	0019      	movs	r1, r3
 800c7fe:	2003      	movs	r0, #3
 800c800:	f000 fe2c 	bl	800d45c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800c804:	1dfb      	adds	r3, r7, #7
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	2b02      	cmp	r3, #2
 800c80a:	d105      	bne.n	800c818 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800c80c:	4a0d      	ldr	r2, [pc, #52]	@ (800c844 <powerDisplay+0x88>)
 800c80e:	4b0a      	ldr	r3, [pc, #40]	@ (800c838 <powerDisplay+0x7c>)
 800c810:	0019      	movs	r1, r3
 800c812:	2003      	movs	r0, #3
 800c814:	f000 fe22 	bl	800d45c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800c818:	1dfb      	adds	r3, r7, #7
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d105      	bne.n	800c82c <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800c820:	4a09      	ldr	r2, [pc, #36]	@ (800c848 <powerDisplay+0x8c>)
 800c822:	4b05      	ldr	r3, [pc, #20]	@ (800c838 <powerDisplay+0x7c>)
 800c824:	0019      	movs	r1, r3
 800c826:	2003      	movs	r0, #3
 800c828:	f000 fe18 	bl	800d45c <CreateLine>
  }
}
 800c82c:	46c0      	nop			@ (mov r8, r8)
 800c82e:	46bd      	mov	sp, r7
 800c830:	b002      	add	sp, #8
 800c832:	bd80      	pop	{r7, pc}
 800c834:	080235e0 	.word	0x080235e0
 800c838:	080235f0 	.word	0x080235f0
 800c83c:	080235f4 	.word	0x080235f4
 800c840:	0802360c 	.word	0x0802360c
 800c844:	0802362c 	.word	0x0802362c
 800c848:	08023644 	.word	0x08023644

0800c84c <configCheck>:

void configCheck(){
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800c850:	f7f9 fc65 	bl	800611e <BootButton_Pressed>
 800c854:	1e03      	subs	r3, r0, #0
 800c856:	d007      	beq.n	800c868 <configCheck+0x1c>
 800c858:	f7f9 fc72 	bl	8006140 <UserButton_Pressed>
 800c85c:	1e03      	subs	r3, r0, #0
 800c85e:	d003      	beq.n	800c868 <configCheck+0x1c>
    configSet = true;
 800c860:	4b3d      	ldr	r3, [pc, #244]	@ (800c958 <configCheck+0x10c>)
 800c862:	2201      	movs	r2, #1
 800c864:	701a      	strb	r2, [r3, #0]
 800c866:	e00a      	b.n	800c87e <configCheck+0x32>
  }
  else{
    configSet = false;
 800c868:	4b3b      	ldr	r3, [pc, #236]	@ (800c958 <configCheck+0x10c>)
 800c86a:	2200      	movs	r2, #0
 800c86c:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800c86e:	f001 f993 	bl	800db98 <HAL_GetTick>
 800c872:	0003      	movs	r3, r0
 800c874:	22fa      	movs	r2, #250	@ 0xfa
 800c876:	00d2      	lsls	r2, r2, #3
 800c878:	189a      	adds	r2, r3, r2
 800c87a:	4b38      	ldr	r3, [pc, #224]	@ (800c95c <configCheck+0x110>)
 800c87c:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800c87e:	4b36      	ldr	r3, [pc, #216]	@ (800c958 <configCheck+0x10c>)
 800c880:	781b      	ldrb	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00d      	beq.n	800c8a2 <configCheck+0x56>
 800c886:	4b35      	ldr	r3, [pc, #212]	@ (800c95c <configCheck+0x110>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	0018      	movs	r0, r3
 800c88c:	f000 fd90 	bl	800d3b0 <TimestampIsReached>
 800c890:	1e03      	subs	r3, r0, #0
 800c892:	d006      	beq.n	800c8a2 <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800c894:	f7f7 f88c 	bl	80039b0 <SetConfigMode>
    SetDBLED(true, true, true);
 800c898:	2201      	movs	r2, #1
 800c89a:	2101      	movs	r1, #1
 800c89c:	2001      	movs	r0, #1
 800c89e:	f7ff fe4d 	bl	800c53c <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800c8a2:	f7f9 fc3c 	bl	800611e <BootButton_Pressed>
 800c8a6:	0003      	movs	r3, r0
 800c8a8:	001a      	movs	r2, r3
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	4053      	eors	r3, r2
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d01d      	beq.n	800c8f0 <configCheck+0xa4>
 800c8b4:	f7f9 fc44 	bl	8006140 <UserButton_Pressed>
 800c8b8:	1e03      	subs	r3, r0, #0
 800c8ba:	d019      	beq.n	800c8f0 <configCheck+0xa4>
 800c8bc:	4b28      	ldr	r3, [pc, #160]	@ (800c960 <configCheck+0x114>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	4053      	eors	r3, r2
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d012      	beq.n	800c8f0 <configCheck+0xa4>
    SetLEDsOff();
 800c8ca:	f7ff ff3f 	bl	800c74c <SetLEDsOff>
    userToggle = !userToggle;
 800c8ce:	4b25      	ldr	r3, [pc, #148]	@ (800c964 <configCheck+0x118>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	1e5a      	subs	r2, r3, #1
 800c8d4:	4193      	sbcs	r3, r2
 800c8d6:	b2db      	uxtb	r3, r3
 800c8d8:	2201      	movs	r2, #1
 800c8da:	4053      	eors	r3, r2
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	1c1a      	adds	r2, r3, #0
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	b2da      	uxtb	r2, r3
 800c8e6:	4b1f      	ldr	r3, [pc, #124]	@ (800c964 <configCheck+0x118>)
 800c8e8:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800c8ea:	4b1d      	ldr	r3, [pc, #116]	@ (800c960 <configCheck+0x114>)
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800c8f0:	f7f9 fc15 	bl	800611e <BootButton_Pressed>
 800c8f4:	0003      	movs	r3, r0
 800c8f6:	001a      	movs	r2, r3
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	4053      	eors	r3, r2
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d00b      	beq.n	800c91a <configCheck+0xce>
 800c902:	f7f9 fc1d 	bl	8006140 <UserButton_Pressed>
 800c906:	0003      	movs	r3, r0
 800c908:	001a      	movs	r2, r3
 800c90a:	2301      	movs	r3, #1
 800c90c:	4053      	eors	r3, r2
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	d002      	beq.n	800c91a <configCheck+0xce>
    buttonHeld = false;
 800c914:	4b12      	ldr	r3, [pc, #72]	@ (800c960 <configCheck+0x114>)
 800c916:	2200      	movs	r2, #0
 800c918:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800c91a:	f7f9 fbf1 	bl	8006100 <Check_USB_PowerOn>
 800c91e:	1e03      	subs	r3, r0, #0
 800c920:	d003      	beq.n	800c92a <configCheck+0xde>
    usbPluggedIn = true;
 800c922:	4b11      	ldr	r3, [pc, #68]	@ (800c968 <configCheck+0x11c>)
 800c924:	2201      	movs	r2, #1
 800c926:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800c928:	e012      	b.n	800c950 <configCheck+0x104>
    if(!userToggle && !init){
 800c92a:	4b0e      	ldr	r3, [pc, #56]	@ (800c964 <configCheck+0x118>)
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2201      	movs	r2, #1
 800c930:	4053      	eors	r3, r2
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	d008      	beq.n	800c94a <configCheck+0xfe>
 800c938:	4b0c      	ldr	r3, [pc, #48]	@ (800c96c <configCheck+0x120>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	2201      	movs	r2, #1
 800c93e:	4053      	eors	r3, r2
 800c940:	b2db      	uxtb	r3, r3
 800c942:	2b00      	cmp	r3, #0
 800c944:	d001      	beq.n	800c94a <configCheck+0xfe>
      SetLEDsOff();
 800c946:	f7ff ff01 	bl	800c74c <SetLEDsOff>
    usbPluggedIn = false;
 800c94a:	4b07      	ldr	r3, [pc, #28]	@ (800c968 <configCheck+0x11c>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	701a      	strb	r2, [r3, #0]
}
 800c950:	46c0      	nop			@ (mov r8, r8)
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	46c0      	nop			@ (mov r8, r8)
 800c958:	2000215c 	.word	0x2000215c
 800c95c:	20002160 	.word	0x20002160
 800c960:	2000215f 	.word	0x2000215f
 800c964:	2000215e 	.word	0x2000215e
 800c968:	2000215d 	.word	0x2000215d
 800c96c:	200000c4 	.word	0x200000c4

0800c970 <Status_Upkeep>:
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  SystemClock_Config();
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800c970:	b580      	push	{r7, lr}
 800c972:	af00      	add	r7, sp, #0
  configCheck();
 800c974:	f7ff ff6a 	bl	800c84c <configCheck>
}
 800c978:	46c0      	nop			@ (mov r8, r8)
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800c97e:	b590      	push	{r4, r7, lr}
 800c980:	b083      	sub	sp, #12
 800c982:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800c984:	1dfc      	adds	r4, r7, #7
 800c986:	f7ff fefd 	bl	800c784 <powerCheck>
 800c98a:	0003      	movs	r3, r0
 800c98c:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800c98e:	1dfb      	adds	r3, r7, #7
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	0018      	movs	r0, r3
 800c994:	f7ff ff12 	bl	800c7bc <powerDisplay>
  return status;
 800c998:	1dfb      	adds	r3, r7, #7
 800c99a:	781b      	ldrb	r3, [r3, #0]

}
 800c99c:	0018      	movs	r0, r3
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	b003      	add	sp, #12
 800c9a2:	bd90      	pop	{r4, r7, pc}

0800c9a4 <setuserToggle>:

void setuserToggle(void) {
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	af00      	add	r7, sp, #0
  if (powerCheck() != USB_PLUGGED_IN) { //operate only in battery operation mode
 800c9a8:	f7ff feec 	bl	800c784 <powerCheck>
 800c9ac:	0003      	movs	r3, r0
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d002      	beq.n	800c9b8 <setuserToggle+0x14>
    userToggle = true;
 800c9b2:	4b03      	ldr	r3, [pc, #12]	@ (800c9c0 <setuserToggle+0x1c>)
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	701a      	strb	r2, [r3, #0]
  }
}
 800c9b8:	46c0      	nop			@ (mov r8, r8)
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	46c0      	nop			@ (mov r8, r8)
 800c9c0:	2000215e 	.word	0x2000215e

0800c9c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c9c8:	4b07      	ldr	r3, [pc, #28]	@ (800c9e8 <HAL_MspInit+0x24>)
 800c9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9cc:	4b06      	ldr	r3, [pc, #24]	@ (800c9e8 <HAL_MspInit+0x24>)
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	430a      	orrs	r2, r1
 800c9d2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800c9d4:	4b04      	ldr	r3, [pc, #16]	@ (800c9e8 <HAL_MspInit+0x24>)
 800c9d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9d8:	4b03      	ldr	r3, [pc, #12]	@ (800c9e8 <HAL_MspInit+0x24>)
 800c9da:	2180      	movs	r1, #128	@ 0x80
 800c9dc:	0549      	lsls	r1, r1, #21
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c9e2:	46c0      	nop			@ (mov r8, r8)
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	40021000 	.word	0x40021000

0800c9ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800c9f0:	46c0      	nop			@ (mov r8, r8)
 800c9f2:	e7fd      	b.n	800c9f0 <NMI_Handler+0x4>

0800c9f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c9f8:	46c0      	nop			@ (mov r8, r8)
 800c9fa:	e7fd      	b.n	800c9f8 <HardFault_Handler+0x4>

0800c9fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800ca00:	46c0      	nop			@ (mov r8, r8)
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ca0a:	46c0      	nop			@ (mov r8, r8)
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ca14:	f001 f8ae 	bl	800db74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ca18:	46c0      	nop			@ (mov r8, r8)
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800ca24:	4b03      	ldr	r3, [pc, #12]	@ (800ca34 <RTC_IRQHandler+0x14>)
 800ca26:	0018      	movs	r0, r3
 800ca28:	f008 fdae 	bl	8015588 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800ca2c:	46c0      	nop			@ (mov r8, r8)
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	46c0      	nop			@ (mov r8, r8)
 800ca34:	200011bc 	.word	0x200011bc

0800ca38 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOOT0_Pin);
 800ca3c:	2380      	movs	r3, #128	@ 0x80
 800ca3e:	021b      	lsls	r3, r3, #8
 800ca40:	0018      	movs	r0, r3
 800ca42:	f002 fb41 	bl	800f0c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800ca46:	46c0      	nop			@ (mov r8, r8)
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ca50:	4b05      	ldr	r3, [pc, #20]	@ (800ca68 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800ca52:	0018      	movs	r0, r3
 800ca54:	f001 fec9 	bl	800e7ea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800ca58:	4b04      	ldr	r3, [pc, #16]	@ (800ca6c <DMA1_Channel2_3_IRQHandler+0x20>)
 800ca5a:	0018      	movs	r0, r3
 800ca5c:	f001 fec5 	bl	800e7ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ca60:	46c0      	nop			@ (mov r8, r8)
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	46c0      	nop			@ (mov r8, r8)
 800ca68:	20000e30 	.word	0x20000e30
 800ca6c:	20000de8 	.word	0x20000de8

0800ca70 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800ca74:	4b07      	ldr	r3, [pc, #28]	@ (800ca94 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800ca76:	0018      	movs	r0, r3
 800ca78:	f001 feb7 	bl	800e7ea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800ca7c:	4b06      	ldr	r3, [pc, #24]	@ (800ca98 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800ca7e:	0018      	movs	r0, r3
 800ca80:	f001 feb3 	bl	800e7ea <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800ca84:	4b05      	ldr	r3, [pc, #20]	@ (800ca9c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800ca86:	0018      	movs	r0, r3
 800ca88:	f001 feaf 	bl	800e7ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800ca8c:	46c0      	nop			@ (mov r8, r8)
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	46c0      	nop			@ (mov r8, r8)
 800ca94:	20000eb4 	.word	0x20000eb4
 800ca98:	20002450 	.word	0x20002450
 800ca9c:	20002498 	.word	0x20002498

0800caa0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800caa4:	4b03      	ldr	r3, [pc, #12]	@ (800cab4 <USART4_5_IRQHandler+0x14>)
 800caa6:	0018      	movs	r0, r3
 800caa8:	f009 fc3a 	bl	8016320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800caac:	46c0      	nop			@ (mov r8, r8)
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	46c0      	nop			@ (mov r8, r8)
 800cab4:	20002398 	.word	0x20002398

0800cab8 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800cabc:	4b09      	ldr	r3, [pc, #36]	@ (800cae4 <I2C1_IRQHandler+0x2c>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	699a      	ldr	r2, [r3, #24]
 800cac2:	23e0      	movs	r3, #224	@ 0xe0
 800cac4:	00db      	lsls	r3, r3, #3
 800cac6:	4013      	ands	r3, r2
 800cac8:	d004      	beq.n	800cad4 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800caca:	4b06      	ldr	r3, [pc, #24]	@ (800cae4 <I2C1_IRQHandler+0x2c>)
 800cacc:	0018      	movs	r0, r3
 800cace:	f002 ffe3 	bl	800fa98 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800cad2:	e003      	b.n	800cadc <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800cad4:	4b03      	ldr	r3, [pc, #12]	@ (800cae4 <I2C1_IRQHandler+0x2c>)
 800cad6:	0018      	movs	r0, r3
 800cad8:	f002 ffc4 	bl	800fa64 <HAL_I2C_EV_IRQHandler>
}
 800cadc:	46c0      	nop			@ (mov r8, r8)
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	46c0      	nop			@ (mov r8, r8)
 800cae4:	20000d40 	.word	0x20000d40

0800cae8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800caec:	4b03      	ldr	r3, [pc, #12]	@ (800cafc <USART1_IRQHandler+0x14>)
 800caee:	0018      	movs	r0, r3
 800caf0:	f009 fc16 	bl	8016320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800caf4:	46c0      	nop			@ (mov r8, r8)
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	46c0      	nop			@ (mov r8, r8)
 800cafc:	200022e0 	.word	0x200022e0

0800cb00 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800cb04:	4b03      	ldr	r3, [pc, #12]	@ (800cb14 <USB_IRQHandler+0x14>)
 800cb06:	0018      	movs	r0, r3
 800cb08:	f005 fba4 	bl	8012254 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800cb0c:	46c0      	nop			@ (mov r8, r8)
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	46c0      	nop			@ (mov r8, r8)
 800cb14:	200032a0 	.word	0x200032a0

0800cb18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	af00      	add	r7, sp, #0
  return 1;
 800cb1c:	2301      	movs	r3, #1
}
 800cb1e:	0018      	movs	r0, r3
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <_kill>:

int _kill(int pid, int sig)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b082      	sub	sp, #8
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
 800cb2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800cb2e:	f012 fadb 	bl	801f0e8 <__errno>
 800cb32:	0003      	movs	r3, r0
 800cb34:	2216      	movs	r2, #22
 800cb36:	601a      	str	r2, [r3, #0]
  return -1;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	425b      	negs	r3, r3
}
 800cb3c:	0018      	movs	r0, r3
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	b002      	add	sp, #8
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <_exit>:

void _exit (int status)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	425a      	negs	r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	0011      	movs	r1, r2
 800cb54:	0018      	movs	r0, r3
 800cb56:	f7ff ffe5 	bl	800cb24 <_kill>
  while (1) {}    /* Make sure we hang here */
 800cb5a:	46c0      	nop			@ (mov r8, r8)
 800cb5c:	e7fd      	b.n	800cb5a <_exit+0x16>

0800cb5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b086      	sub	sp, #24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	617b      	str	r3, [r7, #20]
 800cb6e:	e00a      	b.n	800cb86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800cb70:	e000      	b.n	800cb74 <_read+0x16>
 800cb72:	bf00      	nop
 800cb74:	0001      	movs	r1, r0
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	1c5a      	adds	r2, r3, #1
 800cb7a:	60ba      	str	r2, [r7, #8]
 800cb7c:	b2ca      	uxtb	r2, r1
 800cb7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	3301      	adds	r3, #1
 800cb84:	617b      	str	r3, [r7, #20]
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	dbf0      	blt.n	800cb70 <_read+0x12>
  }

  return len;
 800cb8e:	687b      	ldr	r3, [r7, #4]
}
 800cb90:	0018      	movs	r0, r3
 800cb92:	46bd      	mov	sp, r7
 800cb94:	b006      	add	sp, #24
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <_close>:
  }
  return len;
}

int _close(int file)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800cba0:	2301      	movs	r3, #1
 800cba2:	425b      	negs	r3, r3
}
 800cba4:	0018      	movs	r0, r3
 800cba6:	46bd      	mov	sp, r7
 800cba8:	b002      	add	sp, #8
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <_fstat>:


int _fstat(int file, struct stat *st)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2280      	movs	r2, #128	@ 0x80
 800cbba:	0192      	lsls	r2, r2, #6
 800cbbc:	605a      	str	r2, [r3, #4]
  return 0;
 800cbbe:	2300      	movs	r3, #0
}
 800cbc0:	0018      	movs	r0, r3
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	b002      	add	sp, #8
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <_isatty>:

int _isatty(int file)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800cbd0:	2301      	movs	r3, #1
}
 800cbd2:	0018      	movs	r0, r3
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	b002      	add	sp, #8
 800cbd8:	bd80      	pop	{r7, pc}

0800cbda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800cbda:	b580      	push	{r7, lr}
 800cbdc:	b084      	sub	sp, #16
 800cbde:	af00      	add	r7, sp, #0
 800cbe0:	60f8      	str	r0, [r7, #12]
 800cbe2:	60b9      	str	r1, [r7, #8]
 800cbe4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	0018      	movs	r0, r3
 800cbea:	46bd      	mov	sp, r7
 800cbec:	b004      	add	sp, #16
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800cbf8:	4a14      	ldr	r2, [pc, #80]	@ (800cc4c <_sbrk+0x5c>)
 800cbfa:	4b15      	ldr	r3, [pc, #84]	@ (800cc50 <_sbrk+0x60>)
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800cc04:	4b13      	ldr	r3, [pc, #76]	@ (800cc54 <_sbrk+0x64>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800cc0c:	4b11      	ldr	r3, [pc, #68]	@ (800cc54 <_sbrk+0x64>)
 800cc0e:	4a12      	ldr	r2, [pc, #72]	@ (800cc58 <_sbrk+0x68>)
 800cc10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800cc12:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <_sbrk+0x64>)
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	18d3      	adds	r3, r2, r3
 800cc1a:	693a      	ldr	r2, [r7, #16]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d207      	bcs.n	800cc30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800cc20:	f012 fa62 	bl	801f0e8 <__errno>
 800cc24:	0003      	movs	r3, r0
 800cc26:	220c      	movs	r2, #12
 800cc28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	425b      	negs	r3, r3
 800cc2e:	e009      	b.n	800cc44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800cc30:	4b08      	ldr	r3, [pc, #32]	@ (800cc54 <_sbrk+0x64>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800cc36:	4b07      	ldr	r3, [pc, #28]	@ (800cc54 <_sbrk+0x64>)
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	18d2      	adds	r2, r2, r3
 800cc3e:	4b05      	ldr	r3, [pc, #20]	@ (800cc54 <_sbrk+0x64>)
 800cc40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800cc42:	68fb      	ldr	r3, [r7, #12]
}
 800cc44:	0018      	movs	r0, r3
 800cc46:	46bd      	mov	sp, r7
 800cc48:	b006      	add	sp, #24
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	20005000 	.word	0x20005000
 800cc50:	00000400 	.word	0x00000400
 800cc54:	20002164 	.word	0x20002164
 800cc58:	20003900 	.word	0x20003900

0800cc5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800cc60:	46c0      	nop			@ (mov r8, r8)
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cc6e:	2310      	movs	r3, #16
 800cc70:	18fb      	adds	r3, r7, r3
 800cc72:	0018      	movs	r0, r3
 800cc74:	2308      	movs	r3, #8
 800cc76:	001a      	movs	r2, r3
 800cc78:	2100      	movs	r1, #0
 800cc7a:	f012 f991 	bl	801efa0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cc7e:	003b      	movs	r3, r7
 800cc80:	0018      	movs	r0, r3
 800cc82:	2310      	movs	r3, #16
 800cc84:	001a      	movs	r2, r3
 800cc86:	2100      	movs	r1, #0
 800cc88:	f012 f98a 	bl	801efa0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800cc8c:	4b2e      	ldr	r3, [pc, #184]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cc8e:	2280      	movs	r2, #128	@ 0x80
 800cc90:	05d2      	lsls	r2, r2, #23
 800cc92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800cc94:	4b2c      	ldr	r3, [pc, #176]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cc9a:	4b2b      	ldr	r3, [pc, #172]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800cca0:	4b29      	ldr	r3, [pc, #164]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cca2:	4a2a      	ldr	r2, [pc, #168]	@ (800cd4c <MX_TIM2_Init+0xe4>)
 800cca4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cca6:	4b28      	ldr	r3, [pc, #160]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ccac:	4b26      	ldr	r3, [pc, #152]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800ccae:	2200      	movs	r2, #0
 800ccb0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800ccb2:	4b25      	ldr	r3, [pc, #148]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800ccb4:	0018      	movs	r0, r3
 800ccb6:	f008 fd47 	bl	8015748 <HAL_TIM_PWM_Init>
 800ccba:	1e03      	subs	r3, r0, #0
 800ccbc:	d001      	beq.n	800ccc2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800ccbe:	f7fa ff4f 	bl	8007b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ccc2:	2110      	movs	r1, #16
 800ccc4:	187b      	adds	r3, r7, r1
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ccca:	187b      	adds	r3, r7, r1
 800cccc:	2200      	movs	r2, #0
 800ccce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ccd0:	187a      	adds	r2, r7, r1
 800ccd2:	4b1d      	ldr	r3, [pc, #116]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800ccd4:	0011      	movs	r1, r2
 800ccd6:	0018      	movs	r0, r3
 800ccd8:	f009 f854 	bl	8015d84 <HAL_TIMEx_MasterConfigSynchronization>
 800ccdc:	1e03      	subs	r3, r0, #0
 800ccde:	d001      	beq.n	800cce4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800cce0:	f7fa ff3e 	bl	8007b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cce4:	003b      	movs	r3, r7
 800cce6:	2260      	movs	r2, #96	@ 0x60
 800cce8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800ccea:	003b      	movs	r3, r7
 800ccec:	2200      	movs	r2, #0
 800ccee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ccf0:	003b      	movs	r3, r7
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ccf6:	003b      	movs	r3, r7
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ccfc:	0039      	movs	r1, r7
 800ccfe:	4b12      	ldr	r3, [pc, #72]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	0018      	movs	r0, r3
 800cd04:	f008 fdf2 	bl	80158ec <HAL_TIM_PWM_ConfigChannel>
 800cd08:	1e03      	subs	r3, r0, #0
 800cd0a:	d001      	beq.n	800cd10 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800cd0c:	f7fa ff28 	bl	8007b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800cd10:	0039      	movs	r1, r7
 800cd12:	4b0d      	ldr	r3, [pc, #52]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cd14:	2208      	movs	r2, #8
 800cd16:	0018      	movs	r0, r3
 800cd18:	f008 fde8 	bl	80158ec <HAL_TIM_PWM_ConfigChannel>
 800cd1c:	1e03      	subs	r3, r0, #0
 800cd1e:	d001      	beq.n	800cd24 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800cd20:	f7fa ff1e 	bl	8007b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800cd24:	0039      	movs	r1, r7
 800cd26:	4b08      	ldr	r3, [pc, #32]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cd28:	220c      	movs	r2, #12
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	f008 fdde 	bl	80158ec <HAL_TIM_PWM_ConfigChannel>
 800cd30:	1e03      	subs	r3, r0, #0
 800cd32:	d001      	beq.n	800cd38 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800cd34:	f7fa ff14 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800cd38:	4b03      	ldr	r3, [pc, #12]	@ (800cd48 <MX_TIM2_Init+0xe0>)
 800cd3a:	0018      	movs	r0, r3
 800cd3c:	f000 f8fe 	bl	800cf3c <HAL_TIM_MspPostInit>

}
 800cd40:	46c0      	nop			@ (mov r8, r8)
 800cd42:	46bd      	mov	sp, r7
 800cd44:	b006      	add	sp, #24
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	20002168 	.word	0x20002168
 800cd4c:	0000ffff 	.word	0x0000ffff

0800cd50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cd56:	2310      	movs	r3, #16
 800cd58:	18fb      	adds	r3, r7, r3
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	2308      	movs	r3, #8
 800cd5e:	001a      	movs	r2, r3
 800cd60:	2100      	movs	r1, #0
 800cd62:	f012 f91d 	bl	801efa0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cd66:	003b      	movs	r3, r7
 800cd68:	0018      	movs	r0, r3
 800cd6a:	2310      	movs	r3, #16
 800cd6c:	001a      	movs	r2, r3
 800cd6e:	2100      	movs	r1, #0
 800cd70:	f012 f916 	bl	801efa0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800cd74:	4b32      	ldr	r3, [pc, #200]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cd76:	4a33      	ldr	r2, [pc, #204]	@ (800ce44 <MX_TIM3_Init+0xf4>)
 800cd78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800cd7a:	4b31      	ldr	r3, [pc, #196]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cd80:	4b2f      	ldr	r3, [pc, #188]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800cd86:	4b2e      	ldr	r3, [pc, #184]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cd88:	4a2f      	ldr	r2, [pc, #188]	@ (800ce48 <MX_TIM3_Init+0xf8>)
 800cd8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cd8c:	4b2c      	ldr	r3, [pc, #176]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cd8e:	2200      	movs	r2, #0
 800cd90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cd92:	4b2b      	ldr	r3, [pc, #172]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800cd98:	4b29      	ldr	r3, [pc, #164]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cd9a:	0018      	movs	r0, r3
 800cd9c:	f008 fcd4 	bl	8015748 <HAL_TIM_PWM_Init>
 800cda0:	1e03      	subs	r3, r0, #0
 800cda2:	d001      	beq.n	800cda8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800cda4:	f7fa fedc 	bl	8007b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cda8:	2110      	movs	r1, #16
 800cdaa:	187b      	adds	r3, r7, r1
 800cdac:	2200      	movs	r2, #0
 800cdae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cdb0:	187b      	adds	r3, r7, r1
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800cdb6:	187a      	adds	r2, r7, r1
 800cdb8:	4b21      	ldr	r3, [pc, #132]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cdba:	0011      	movs	r1, r2
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f008 ffe1 	bl	8015d84 <HAL_TIMEx_MasterConfigSynchronization>
 800cdc2:	1e03      	subs	r3, r0, #0
 800cdc4:	d001      	beq.n	800cdca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800cdc6:	f7fa fecb 	bl	8007b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cdca:	003b      	movs	r3, r7
 800cdcc:	2260      	movs	r2, #96	@ 0x60
 800cdce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800cdd0:	003b      	movs	r3, r7
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cdd6:	003b      	movs	r3, r7
 800cdd8:	2200      	movs	r2, #0
 800cdda:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cddc:	003b      	movs	r3, r7
 800cdde:	2200      	movs	r2, #0
 800cde0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cde2:	0039      	movs	r1, r7
 800cde4:	4b16      	ldr	r3, [pc, #88]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	0018      	movs	r0, r3
 800cdea:	f008 fd7f 	bl	80158ec <HAL_TIM_PWM_ConfigChannel>
 800cdee:	1e03      	subs	r3, r0, #0
 800cdf0:	d001      	beq.n	800cdf6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800cdf2:	f7fa feb5 	bl	8007b60 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800cdf6:	4b12      	ldr	r3, [pc, #72]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800cdf8:	2104      	movs	r1, #4
 800cdfa:	0018      	movs	r0, r3
 800cdfc:	f009 f820 	bl	8015e40 <HAL_TIMEx_RemapConfig>
 800ce00:	1e03      	subs	r3, r0, #0
 800ce02:	d001      	beq.n	800ce08 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800ce04:	f7fa feac 	bl	8007b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ce08:	0039      	movs	r1, r7
 800ce0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800ce0c:	2204      	movs	r2, #4
 800ce0e:	0018      	movs	r0, r3
 800ce10:	f008 fd6c 	bl	80158ec <HAL_TIM_PWM_ConfigChannel>
 800ce14:	1e03      	subs	r3, r0, #0
 800ce16:	d001      	beq.n	800ce1c <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800ce18:	f7fa fea2 	bl	8007b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ce1c:	0039      	movs	r1, r7
 800ce1e:	4b08      	ldr	r3, [pc, #32]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800ce20:	2208      	movs	r2, #8
 800ce22:	0018      	movs	r0, r3
 800ce24:	f008 fd62 	bl	80158ec <HAL_TIM_PWM_ConfigChannel>
 800ce28:	1e03      	subs	r3, r0, #0
 800ce2a:	d001      	beq.n	800ce30 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800ce2c:	f7fa fe98 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800ce30:	4b03      	ldr	r3, [pc, #12]	@ (800ce40 <MX_TIM3_Init+0xf0>)
 800ce32:	0018      	movs	r0, r3
 800ce34:	f000 f882 	bl	800cf3c <HAL_TIM_MspPostInit>

}
 800ce38:	46c0      	nop			@ (mov r8, r8)
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	b006      	add	sp, #24
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	200021a8 	.word	0x200021a8
 800ce44:	40000400 	.word	0x40000400
 800ce48:	0000ffff 	.word	0x0000ffff

0800ce4c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ce52:	003b      	movs	r3, r7
 800ce54:	0018      	movs	r0, r3
 800ce56:	2308      	movs	r3, #8
 800ce58:	001a      	movs	r2, r3
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	f012 f8a0 	bl	801efa0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ce60:	4b15      	ldr	r3, [pc, #84]	@ (800ceb8 <MX_TIM6_Init+0x6c>)
 800ce62:	4a16      	ldr	r2, [pc, #88]	@ (800cebc <MX_TIM6_Init+0x70>)
 800ce64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800ce66:	4b14      	ldr	r3, [pc, #80]	@ (800ceb8 <MX_TIM6_Init+0x6c>)
 800ce68:	220a      	movs	r2, #10
 800ce6a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ce6c:	4b12      	ldr	r3, [pc, #72]	@ (800ceb8 <MX_TIM6_Init+0x6c>)
 800ce6e:	2200      	movs	r2, #0
 800ce70:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800ce72:	4b11      	ldr	r3, [pc, #68]	@ (800ceb8 <MX_TIM6_Init+0x6c>)
 800ce74:	4a12      	ldr	r2, [pc, #72]	@ (800cec0 <MX_TIM6_Init+0x74>)
 800ce76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ce78:	4b0f      	ldr	r3, [pc, #60]	@ (800ceb8 <MX_TIM6_Init+0x6c>)
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ce7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ceb8 <MX_TIM6_Init+0x6c>)
 800ce80:	0018      	movs	r0, r3
 800ce82:	f008 fbb9 	bl	80155f8 <HAL_TIM_Base_Init>
 800ce86:	1e03      	subs	r3, r0, #0
 800ce88:	d001      	beq.n	800ce8e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800ce8a:	f7fa fe69 	bl	8007b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ce8e:	003b      	movs	r3, r7
 800ce90:	2200      	movs	r2, #0
 800ce92:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ce94:	003b      	movs	r3, r7
 800ce96:	2200      	movs	r2, #0
 800ce98:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ce9a:	003a      	movs	r2, r7
 800ce9c:	4b06      	ldr	r3, [pc, #24]	@ (800ceb8 <MX_TIM6_Init+0x6c>)
 800ce9e:	0011      	movs	r1, r2
 800cea0:	0018      	movs	r0, r3
 800cea2:	f008 ff6f 	bl	8015d84 <HAL_TIMEx_MasterConfigSynchronization>
 800cea6:	1e03      	subs	r3, r0, #0
 800cea8:	d001      	beq.n	800ceae <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800ceaa:	f7fa fe59 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ceae:	46c0      	nop			@ (mov r8, r8)
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	b002      	add	sp, #8
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	46c0      	nop			@ (mov r8, r8)
 800ceb8:	200021e8 	.word	0x200021e8
 800cebc:	40001000 	.word	0x40001000
 800cec0:	0000ffff 	.word	0x0000ffff

0800cec4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681a      	ldr	r2, [r3, #0]
 800ced0:	2380      	movs	r3, #128	@ 0x80
 800ced2:	05db      	lsls	r3, r3, #23
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d106      	bne.n	800cee6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ced8:	4b0a      	ldr	r3, [pc, #40]	@ (800cf04 <HAL_TIM_PWM_MspInit+0x40>)
 800ceda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cedc:	4b09      	ldr	r3, [pc, #36]	@ (800cf04 <HAL_TIM_PWM_MspInit+0x40>)
 800cede:	2101      	movs	r1, #1
 800cee0:	430a      	orrs	r2, r1
 800cee2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800cee4:	e00a      	b.n	800cefc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a07      	ldr	r2, [pc, #28]	@ (800cf08 <HAL_TIM_PWM_MspInit+0x44>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d105      	bne.n	800cefc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cef0:	4b04      	ldr	r3, [pc, #16]	@ (800cf04 <HAL_TIM_PWM_MspInit+0x40>)
 800cef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cef4:	4b03      	ldr	r3, [pc, #12]	@ (800cf04 <HAL_TIM_PWM_MspInit+0x40>)
 800cef6:	2102      	movs	r1, #2
 800cef8:	430a      	orrs	r2, r1
 800cefa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800cefc:	46c0      	nop			@ (mov r8, r8)
 800cefe:	46bd      	mov	sp, r7
 800cf00:	b002      	add	sp, #8
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	40021000 	.word	0x40021000
 800cf08:	40000400 	.word	0x40000400

0800cf0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a06      	ldr	r2, [pc, #24]	@ (800cf34 <HAL_TIM_Base_MspInit+0x28>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d105      	bne.n	800cf2a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800cf1e:	4b06      	ldr	r3, [pc, #24]	@ (800cf38 <HAL_TIM_Base_MspInit+0x2c>)
 800cf20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cf22:	4b05      	ldr	r3, [pc, #20]	@ (800cf38 <HAL_TIM_Base_MspInit+0x2c>)
 800cf24:	2110      	movs	r1, #16
 800cf26:	430a      	orrs	r2, r1
 800cf28:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800cf2a:	46c0      	nop			@ (mov r8, r8)
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	b002      	add	sp, #8
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	46c0      	nop			@ (mov r8, r8)
 800cf34:	40001000 	.word	0x40001000
 800cf38:	40021000 	.word	0x40021000

0800cf3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800cf3c:	b590      	push	{r4, r7, lr}
 800cf3e:	b08b      	sub	sp, #44	@ 0x2c
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf44:	2414      	movs	r4, #20
 800cf46:	193b      	adds	r3, r7, r4
 800cf48:	0018      	movs	r0, r3
 800cf4a:	2314      	movs	r3, #20
 800cf4c:	001a      	movs	r2, r3
 800cf4e:	2100      	movs	r1, #0
 800cf50:	f012 f826 	bl	801efa0 <memset>
  if(timHandle->Instance==TIM2)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	2380      	movs	r3, #128	@ 0x80
 800cf5a:	05db      	lsls	r3, r3, #23
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d123      	bne.n	800cfa8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf60:	4b27      	ldr	r3, [pc, #156]	@ (800d000 <HAL_TIM_MspPostInit+0xc4>)
 800cf62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf64:	4b26      	ldr	r3, [pc, #152]	@ (800d000 <HAL_TIM_MspPostInit+0xc4>)
 800cf66:	2101      	movs	r1, #1
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cf6c:	4b24      	ldr	r3, [pc, #144]	@ (800d000 <HAL_TIM_MspPostInit+0xc4>)
 800cf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf70:	2201      	movs	r2, #1
 800cf72:	4013      	ands	r3, r2
 800cf74:	613b      	str	r3, [r7, #16]
 800cf76:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800cf78:	0021      	movs	r1, r4
 800cf7a:	187b      	adds	r3, r7, r1
 800cf7c:	220d      	movs	r2, #13
 800cf7e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf80:	187b      	adds	r3, r7, r1
 800cf82:	2202      	movs	r2, #2
 800cf84:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf86:	187b      	adds	r3, r7, r1
 800cf88:	2200      	movs	r2, #0
 800cf8a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cf8c:	187b      	adds	r3, r7, r1
 800cf8e:	2200      	movs	r2, #0
 800cf90:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800cf92:	187b      	adds	r3, r7, r1
 800cf94:	2202      	movs	r2, #2
 800cf96:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf98:	187a      	adds	r2, r7, r1
 800cf9a:	23a0      	movs	r3, #160	@ 0xa0
 800cf9c:	05db      	lsls	r3, r3, #23
 800cf9e:	0011      	movs	r1, r2
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	f001 fed9 	bl	800ed58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800cfa6:	e027      	b.n	800cff8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a15      	ldr	r2, [pc, #84]	@ (800d004 <HAL_TIM_MspPostInit+0xc8>)
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d122      	bne.n	800cff8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cfb2:	4b13      	ldr	r3, [pc, #76]	@ (800d000 <HAL_TIM_MspPostInit+0xc4>)
 800cfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfb6:	4b12      	ldr	r3, [pc, #72]	@ (800d000 <HAL_TIM_MspPostInit+0xc4>)
 800cfb8:	2104      	movs	r1, #4
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cfbe:	4b10      	ldr	r3, [pc, #64]	@ (800d000 <HAL_TIM_MspPostInit+0xc4>)
 800cfc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc2:	2204      	movs	r2, #4
 800cfc4:	4013      	ands	r3, r2
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800cfca:	2114      	movs	r1, #20
 800cfcc:	187b      	adds	r3, r7, r1
 800cfce:	22e0      	movs	r2, #224	@ 0xe0
 800cfd0:	0052      	lsls	r2, r2, #1
 800cfd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfd4:	187b      	adds	r3, r7, r1
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfda:	187b      	adds	r3, r7, r1
 800cfdc:	2200      	movs	r2, #0
 800cfde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfe0:	187b      	adds	r3, r7, r1
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800cfe6:	187b      	adds	r3, r7, r1
 800cfe8:	2202      	movs	r2, #2
 800cfea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cfec:	187b      	adds	r3, r7, r1
 800cfee:	4a06      	ldr	r2, [pc, #24]	@ (800d008 <HAL_TIM_MspPostInit+0xcc>)
 800cff0:	0019      	movs	r1, r3
 800cff2:	0010      	movs	r0, r2
 800cff4:	f001 feb0 	bl	800ed58 <HAL_GPIO_Init>
}
 800cff8:	46c0      	nop			@ (mov r8, r8)
 800cffa:	46bd      	mov	sp, r7
 800cffc:	b00b      	add	sp, #44	@ 0x2c
 800cffe:	bd90      	pop	{r4, r7, pc}
 800d000:	40021000 	.word	0x40021000
 800d004:	40000400 	.word	0x40000400
 800d008:	50000800 	.word	0x50000800

0800d00c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800d010:	4b17      	ldr	r3, [pc, #92]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d012:	4a18      	ldr	r2, [pc, #96]	@ (800d074 <MX_LPUART1_UART_Init+0x68>)
 800d014:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800d016:	4b16      	ldr	r3, [pc, #88]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d018:	22e1      	movs	r2, #225	@ 0xe1
 800d01a:	0252      	lsls	r2, r2, #9
 800d01c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d01e:	4b14      	ldr	r3, [pc, #80]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d020:	2200      	movs	r2, #0
 800d022:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800d024:	4b12      	ldr	r3, [pc, #72]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d026:	2200      	movs	r2, #0
 800d028:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800d02a:	4b11      	ldr	r3, [pc, #68]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d02c:	2200      	movs	r2, #0
 800d02e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800d030:	4b0f      	ldr	r3, [pc, #60]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d032:	220c      	movs	r2, #12
 800d034:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d036:	4b0e      	ldr	r3, [pc, #56]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d038:	2200      	movs	r2, #0
 800d03a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d03c:	4b0c      	ldr	r3, [pc, #48]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d03e:	2200      	movs	r2, #0
 800d040:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800d042:	4b0b      	ldr	r3, [pc, #44]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d044:	2218      	movs	r2, #24
 800d046:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d048:	4b09      	ldr	r3, [pc, #36]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d04a:	2280      	movs	r2, #128	@ 0x80
 800d04c:	0212      	lsls	r2, r2, #8
 800d04e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800d050:	4b07      	ldr	r3, [pc, #28]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d052:	2280      	movs	r2, #128	@ 0x80
 800d054:	0152      	lsls	r2, r2, #5
 800d056:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800d058:	4b05      	ldr	r3, [pc, #20]	@ (800d070 <MX_LPUART1_UART_Init+0x64>)
 800d05a:	0018      	movs	r0, r3
 800d05c:	f008 ff0e 	bl	8015e7c <HAL_UART_Init>
 800d060:	1e03      	subs	r3, r0, #0
 800d062:	d001      	beq.n	800d068 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800d064:	f7fa fd7c 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800d068:	46c0      	nop			@ (mov r8, r8)
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	46c0      	nop			@ (mov r8, r8)
 800d070:	20002228 	.word	0x20002228
 800d074:	40004800 	.word	0x40004800

0800d078 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d07c:	4b16      	ldr	r3, [pc, #88]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d07e:	4a17      	ldr	r2, [pc, #92]	@ (800d0dc <MX_USART1_UART_Init+0x64>)
 800d080:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d082:	4b15      	ldr	r3, [pc, #84]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d084:	22e1      	movs	r2, #225	@ 0xe1
 800d086:	0252      	lsls	r2, r2, #9
 800d088:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d08a:	4b13      	ldr	r3, [pc, #76]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d090:	4b11      	ldr	r3, [pc, #68]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d092:	2200      	movs	r2, #0
 800d094:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d096:	4b10      	ldr	r3, [pc, #64]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d098:	2200      	movs	r2, #0
 800d09a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d09c:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d09e:	220c      	movs	r2, #12
 800d0a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d0ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800d0b4:	4b08      	ldr	r3, [pc, #32]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d0b6:	2208      	movs	r2, #8
 800d0b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800d0ba:	4b07      	ldr	r3, [pc, #28]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d0bc:	2280      	movs	r2, #128	@ 0x80
 800d0be:	0212      	lsls	r2, r2, #8
 800d0c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d0c2:	4b05      	ldr	r3, [pc, #20]	@ (800d0d8 <MX_USART1_UART_Init+0x60>)
 800d0c4:	0018      	movs	r0, r3
 800d0c6:	f008 fed9 	bl	8015e7c <HAL_UART_Init>
 800d0ca:	1e03      	subs	r3, r0, #0
 800d0cc:	d001      	beq.n	800d0d2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800d0ce:	f7fa fd47 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d0d2:	46c0      	nop			@ (mov r8, r8)
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	200022e0 	.word	0x200022e0
 800d0dc:	40013800 	.word	0x40013800

0800d0e0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800d0e4:	4b14      	ldr	r3, [pc, #80]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d0e6:	4a15      	ldr	r2, [pc, #84]	@ (800d13c <MX_USART4_UART_Init+0x5c>)
 800d0e8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800d0ea:	4b13      	ldr	r3, [pc, #76]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d0ec:	22e1      	movs	r2, #225	@ 0xe1
 800d0ee:	0252      	lsls	r2, r2, #9
 800d0f0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800d0f2:	4b11      	ldr	r3, [pc, #68]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800d0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800d0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d100:	2200      	movs	r2, #0
 800d102:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800d104:	4b0c      	ldr	r3, [pc, #48]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d106:	220c      	movs	r2, #12
 800d108:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d10a:	4b0b      	ldr	r3, [pc, #44]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800d110:	4b09      	ldr	r3, [pc, #36]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d112:	2200      	movs	r2, #0
 800d114:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800d116:	4b08      	ldr	r3, [pc, #32]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d118:	2200      	movs	r2, #0
 800d11a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800d11c:	4b06      	ldr	r3, [pc, #24]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d11e:	2200      	movs	r2, #0
 800d120:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800d122:	4b05      	ldr	r3, [pc, #20]	@ (800d138 <MX_USART4_UART_Init+0x58>)
 800d124:	0018      	movs	r0, r3
 800d126:	f008 fea9 	bl	8015e7c <HAL_UART_Init>
 800d12a:	1e03      	subs	r3, r0, #0
 800d12c:	d001      	beq.n	800d132 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800d12e:	f7fa fd17 	bl	8007b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800d132:	46c0      	nop			@ (mov r8, r8)
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	20002398 	.word	0x20002398
 800d13c:	40004c00 	.word	0x40004c00

0800d140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d140:	b590      	push	{r4, r7, lr}
 800d142:	b08d      	sub	sp, #52	@ 0x34
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d148:	241c      	movs	r4, #28
 800d14a:	193b      	adds	r3, r7, r4
 800d14c:	0018      	movs	r0, r3
 800d14e:	2314      	movs	r3, #20
 800d150:	001a      	movs	r2, r3
 800d152:	2100      	movs	r1, #0
 800d154:	f011 ff24 	bl	801efa0 <memset>
  if(uartHandle->Instance==LPUART1)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a8b      	ldr	r2, [pc, #556]	@ (800d38c <HAL_UART_MspInit+0x24c>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d129      	bne.n	800d1b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800d162:	4b8b      	ldr	r3, [pc, #556]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d166:	4b8a      	ldr	r3, [pc, #552]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d168:	2180      	movs	r1, #128	@ 0x80
 800d16a:	02c9      	lsls	r1, r1, #11
 800d16c:	430a      	orrs	r2, r1
 800d16e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d170:	4b87      	ldr	r3, [pc, #540]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d174:	4b86      	ldr	r3, [pc, #536]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d176:	2104      	movs	r1, #4
 800d178:	430a      	orrs	r2, r1
 800d17a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d17c:	4b84      	ldr	r3, [pc, #528]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d17e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d180:	2204      	movs	r2, #4
 800d182:	4013      	ands	r3, r2
 800d184:	61bb      	str	r3, [r7, #24]
 800d186:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d188:	0021      	movs	r1, r4
 800d18a:	187b      	adds	r3, r7, r1
 800d18c:	2203      	movs	r2, #3
 800d18e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d190:	187b      	adds	r3, r7, r1
 800d192:	2202      	movs	r2, #2
 800d194:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d196:	187b      	adds	r3, r7, r1
 800d198:	2200      	movs	r2, #0
 800d19a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d19c:	187b      	adds	r3, r7, r1
 800d19e:	2203      	movs	r2, #3
 800d1a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800d1a2:	187b      	adds	r3, r7, r1
 800d1a4:	2206      	movs	r2, #6
 800d1a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d1a8:	187b      	adds	r3, r7, r1
 800d1aa:	4a7a      	ldr	r2, [pc, #488]	@ (800d394 <HAL_UART_MspInit+0x254>)
 800d1ac:	0019      	movs	r1, r3
 800d1ae:	0010      	movs	r0, r2
 800d1b0:	f001 fdd2 	bl	800ed58 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800d1b4:	e0e5      	b.n	800d382 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a77      	ldr	r2, [pc, #476]	@ (800d398 <HAL_UART_MspInit+0x258>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d133      	bne.n	800d228 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d1c0:	4b73      	ldr	r3, [pc, #460]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d1c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1c4:	4b72      	ldr	r3, [pc, #456]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d1c6:	2180      	movs	r1, #128	@ 0x80
 800d1c8:	01c9      	lsls	r1, r1, #7
 800d1ca:	430a      	orrs	r2, r1
 800d1cc:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1ce:	4b70      	ldr	r3, [pc, #448]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d1d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1d2:	4b6f      	ldr	r3, [pc, #444]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d1d4:	2101      	movs	r1, #1
 800d1d6:	430a      	orrs	r2, r1
 800d1d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d1da:	4b6d      	ldr	r3, [pc, #436]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1de:	2201      	movs	r2, #1
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d1e6:	211c      	movs	r1, #28
 800d1e8:	187b      	adds	r3, r7, r1
 800d1ea:	22c0      	movs	r2, #192	@ 0xc0
 800d1ec:	00d2      	lsls	r2, r2, #3
 800d1ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1f0:	187b      	adds	r3, r7, r1
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1f6:	187b      	adds	r3, r7, r1
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1fc:	187b      	adds	r3, r7, r1
 800d1fe:	2203      	movs	r2, #3
 800d200:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800d202:	187b      	adds	r3, r7, r1
 800d204:	2204      	movs	r2, #4
 800d206:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d208:	187a      	adds	r2, r7, r1
 800d20a:	23a0      	movs	r3, #160	@ 0xa0
 800d20c:	05db      	lsls	r3, r3, #23
 800d20e:	0011      	movs	r1, r2
 800d210:	0018      	movs	r0, r3
 800d212:	f001 fda1 	bl	800ed58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800d216:	2200      	movs	r2, #0
 800d218:	2100      	movs	r1, #0
 800d21a:	201b      	movs	r0, #27
 800d21c:	f001 f94e 	bl	800e4bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800d220:	201b      	movs	r0, #27
 800d222:	f001 f960 	bl	800e4e6 <HAL_NVIC_EnableIRQ>
}
 800d226:	e0ac      	b.n	800d382 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a5b      	ldr	r2, [pc, #364]	@ (800d39c <HAL_UART_MspInit+0x25c>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d000      	beq.n	800d234 <HAL_UART_MspInit+0xf4>
 800d232:	e0a6      	b.n	800d382 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800d234:	4b56      	ldr	r3, [pc, #344]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d238:	4b55      	ldr	r3, [pc, #340]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d23a:	2180      	movs	r1, #128	@ 0x80
 800d23c:	0309      	lsls	r1, r1, #12
 800d23e:	430a      	orrs	r2, r1
 800d240:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d242:	4b53      	ldr	r3, [pc, #332]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d246:	4b52      	ldr	r3, [pc, #328]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d248:	2101      	movs	r1, #1
 800d24a:	430a      	orrs	r2, r1
 800d24c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d24e:	4b50      	ldr	r3, [pc, #320]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d252:	2201      	movs	r2, #1
 800d254:	4013      	ands	r3, r2
 800d256:	613b      	str	r3, [r7, #16]
 800d258:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d25a:	4b4d      	ldr	r3, [pc, #308]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d25c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d25e:	4b4c      	ldr	r3, [pc, #304]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d260:	2104      	movs	r1, #4
 800d262:	430a      	orrs	r2, r1
 800d264:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d266:	4b4a      	ldr	r3, [pc, #296]	@ (800d390 <HAL_UART_MspInit+0x250>)
 800d268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d26a:	2204      	movs	r2, #4
 800d26c:	4013      	ands	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800d272:	241c      	movs	r4, #28
 800d274:	193b      	adds	r3, r7, r4
 800d276:	2202      	movs	r2, #2
 800d278:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d27a:	193b      	adds	r3, r7, r4
 800d27c:	2202      	movs	r2, #2
 800d27e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d280:	193b      	adds	r3, r7, r4
 800d282:	2200      	movs	r2, #0
 800d284:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d286:	193b      	adds	r3, r7, r4
 800d288:	2203      	movs	r2, #3
 800d28a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d28c:	193b      	adds	r3, r7, r4
 800d28e:	2206      	movs	r2, #6
 800d290:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d292:	193a      	adds	r2, r7, r4
 800d294:	23a0      	movs	r3, #160	@ 0xa0
 800d296:	05db      	lsls	r3, r3, #23
 800d298:	0011      	movs	r1, r2
 800d29a:	0018      	movs	r0, r3
 800d29c:	f001 fd5c 	bl	800ed58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800d2a0:	0021      	movs	r1, r4
 800d2a2:	187b      	adds	r3, r7, r1
 800d2a4:	2280      	movs	r2, #128	@ 0x80
 800d2a6:	00d2      	lsls	r2, r2, #3
 800d2a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2aa:	187b      	adds	r3, r7, r1
 800d2ac:	2202      	movs	r2, #2
 800d2ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2b0:	187b      	adds	r3, r7, r1
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2b6:	187b      	adds	r3, r7, r1
 800d2b8:	2203      	movs	r2, #3
 800d2ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800d2bc:	187b      	adds	r3, r7, r1
 800d2be:	2206      	movs	r2, #6
 800d2c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d2c2:	187b      	adds	r3, r7, r1
 800d2c4:	4a33      	ldr	r2, [pc, #204]	@ (800d394 <HAL_UART_MspInit+0x254>)
 800d2c6:	0019      	movs	r1, r3
 800d2c8:	0010      	movs	r0, r2
 800d2ca:	f001 fd45 	bl	800ed58 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800d2ce:	4b34      	ldr	r3, [pc, #208]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2d0:	4a34      	ldr	r2, [pc, #208]	@ (800d3a4 <HAL_UART_MspInit+0x264>)
 800d2d2:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800d2d4:	4b32      	ldr	r3, [pc, #200]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2d6:	220c      	movs	r2, #12
 800d2d8:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d2da:	4b31      	ldr	r3, [pc, #196]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2e0:	4b2f      	ldr	r3, [pc, #188]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d2e6:	4b2e      	ldr	r3, [pc, #184]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2e8:	2280      	movs	r2, #128	@ 0x80
 800d2ea:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d2ec:	4b2c      	ldr	r3, [pc, #176]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d2f2:	4b2b      	ldr	r3, [pc, #172]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800d2f8:	4b29      	ldr	r3, [pc, #164]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d2fa:	2220      	movs	r2, #32
 800d2fc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d2fe:	4b28      	ldr	r3, [pc, #160]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d300:	2200      	movs	r2, #0
 800d302:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800d304:	4b26      	ldr	r3, [pc, #152]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d306:	0018      	movs	r0, r3
 800d308:	f001 f90a 	bl	800e520 <HAL_DMA_Init>
 800d30c:	1e03      	subs	r3, r0, #0
 800d30e:	d001      	beq.n	800d314 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800d310:	f7fa fc26 	bl	8007b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	4a22      	ldr	r2, [pc, #136]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d318:	675a      	str	r2, [r3, #116]	@ 0x74
 800d31a:	4b21      	ldr	r3, [pc, #132]	@ (800d3a0 <HAL_UART_MspInit+0x260>)
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800d320:	4b21      	ldr	r3, [pc, #132]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d322:	4a22      	ldr	r2, [pc, #136]	@ (800d3ac <HAL_UART_MspInit+0x26c>)
 800d324:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800d326:	4b20      	ldr	r3, [pc, #128]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d328:	220c      	movs	r2, #12
 800d32a:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d32c:	4b1e      	ldr	r3, [pc, #120]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d32e:	2210      	movs	r2, #16
 800d330:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d332:	4b1d      	ldr	r3, [pc, #116]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d334:	2200      	movs	r2, #0
 800d336:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d338:	4b1b      	ldr	r3, [pc, #108]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d33a:	2280      	movs	r2, #128	@ 0x80
 800d33c:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d33e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d340:	2200      	movs	r2, #0
 800d342:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d344:	4b18      	ldr	r3, [pc, #96]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d346:	2200      	movs	r2, #0
 800d348:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800d34a:	4b17      	ldr	r3, [pc, #92]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d350:	4b15      	ldr	r3, [pc, #84]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d352:	2200      	movs	r2, #0
 800d354:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800d356:	4b14      	ldr	r3, [pc, #80]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d358:	0018      	movs	r0, r3
 800d35a:	f001 f8e1 	bl	800e520 <HAL_DMA_Init>
 800d35e:	1e03      	subs	r3, r0, #0
 800d360:	d001      	beq.n	800d366 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800d362:	f7fa fbfd 	bl	8007b60 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4a0f      	ldr	r2, [pc, #60]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d36a:	671a      	str	r2, [r3, #112]	@ 0x70
 800d36c:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a8 <HAL_UART_MspInit+0x268>)
 800d36e:	687a      	ldr	r2, [r7, #4]
 800d370:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800d372:	2200      	movs	r2, #0
 800d374:	2100      	movs	r1, #0
 800d376:	200e      	movs	r0, #14
 800d378:	f001 f8a0 	bl	800e4bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800d37c:	200e      	movs	r0, #14
 800d37e:	f001 f8b2 	bl	800e4e6 <HAL_NVIC_EnableIRQ>
}
 800d382:	46c0      	nop			@ (mov r8, r8)
 800d384:	46bd      	mov	sp, r7
 800d386:	b00d      	add	sp, #52	@ 0x34
 800d388:	bd90      	pop	{r4, r7, pc}
 800d38a:	46c0      	nop			@ (mov r8, r8)
 800d38c:	40004800 	.word	0x40004800
 800d390:	40021000 	.word	0x40021000
 800d394:	50000800 	.word	0x50000800
 800d398:	40013800 	.word	0x40013800
 800d39c:	40004c00 	.word	0x40004c00
 800d3a0:	20002450 	.word	0x20002450
 800d3a4:	4002006c 	.word	0x4002006c
 800d3a8:	20002498 	.word	0x20002498
 800d3ac:	40020080 	.word	0x40020080

0800d3b0 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b086      	sub	sp, #24
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800d3b8:	f000 fbee 	bl	800db98 <HAL_GetTick>
 800d3bc:	0003      	movs	r3, r0
 800d3be:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800d3c0:	4b1c      	ldr	r3, [pc, #112]	@ (800d434 <TimestampIsReached+0x84>)
 800d3c2:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800d3c4:	697a      	ldr	r2, [r7, #20]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d307      	bcc.n	800d3dc <TimestampIsReached+0x2c>
 800d3cc:	697a      	ldr	r2, [r7, #20]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	1ad3      	subs	r3, r2, r3
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d901      	bls.n	800d3dc <TimestampIsReached+0x2c>
 800d3d8:	2201      	movs	r2, #1
 800d3da:	e000      	b.n	800d3de <TimestampIsReached+0x2e>
 800d3dc:	2200      	movs	r2, #0
 800d3de:	230f      	movs	r3, #15
 800d3e0:	18fb      	adds	r3, r7, r3
 800d3e2:	701a      	strb	r2, [r3, #0]
 800d3e4:	781a      	ldrb	r2, [r3, #0]
 800d3e6:	2101      	movs	r1, #1
 800d3e8:	400a      	ands	r2, r1
 800d3ea:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d207      	bcs.n	800d404 <TimestampIsReached+0x54>
 800d3f4:	687a      	ldr	r2, [r7, #4]
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d201      	bcs.n	800d404 <TimestampIsReached+0x54>
 800d400:	2201      	movs	r2, #1
 800d402:	e000      	b.n	800d406 <TimestampIsReached+0x56>
 800d404:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800d406:	200e      	movs	r0, #14
 800d408:	183b      	adds	r3, r7, r0
 800d40a:	701a      	strb	r2, [r3, #0]
 800d40c:	781a      	ldrb	r2, [r3, #0]
 800d40e:	2101      	movs	r1, #1
 800d410:	400a      	ands	r2, r1
 800d412:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800d414:	230f      	movs	r3, #15
 800d416:	18fb      	adds	r3, r7, r3
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d103      	bne.n	800d426 <TimestampIsReached+0x76>
 800d41e:	183b      	adds	r3, r7, r0
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800d426:	2301      	movs	r3, #1
 800d428:	e000      	b.n	800d42c <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	0018      	movs	r0, r3
 800d42e:	46bd      	mov	sp, r7
 800d430:	b006      	add	sp, #24
 800d432:	bd80      	pop	{r7, pc}
 800d434:	7fffffff 	.word	0x7fffffff

0800d438 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800d438:	b580      	push	{r7, lr}
 800d43a:	b082      	sub	sp, #8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800d440:	f000 fbaa 	bl	800db98 <HAL_GetTick>
 800d444:	0002      	movs	r2, r0
 800d446:	4904      	ldr	r1, [pc, #16]	@ (800d458 <AddTimestamp+0x20>)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	0018      	movs	r0, r3
 800d44c:	f011 fc64 	bl	801ed18 <siprintf>
}
 800d450:	46c0      	nop			@ (mov r8, r8)
 800d452:	46bd      	mov	sp, r7
 800d454:	b002      	add	sp, #8
 800d456:	bd80      	pop	{r7, pc}
 800d458:	0802368c 	.word	0x0802368c

0800d45c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800d45c:	b40c      	push	{r2, r3}
 800d45e:	b5b0      	push	{r4, r5, r7, lr}
 800d460:	b0a4      	sub	sp, #144	@ 0x90
 800d462:	af00      	add	r7, sp, #0
 800d464:	0002      	movs	r2, r0
 800d466:	6039      	str	r1, [r7, #0]
 800d468:	1dfb      	adds	r3, r7, #7
 800d46a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800d46c:	4b23      	ldr	r3, [pc, #140]	@ (800d4fc <CreateLine+0xa0>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	1dfa      	adds	r2, r7, #7
 800d472:	7812      	ldrb	r2, [r2, #0]
 800d474:	429a      	cmp	r2, r3
 800d476:	d839      	bhi.n	800d4ec <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	4921      	ldr	r1, [pc, #132]	@ (800d500 <CreateLine+0xa4>)
 800d47c:	240c      	movs	r4, #12
 800d47e:	193b      	adds	r3, r7, r4
 800d480:	0018      	movs	r0, r3
 800d482:	f011 fc49 	bl	801ed18 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800d486:	4b1d      	ldr	r3, [pc, #116]	@ (800d4fc <CreateLine+0xa0>)
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d909      	bls.n	800d4a2 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800d48e:	193b      	adds	r3, r7, r4
 800d490:	0018      	movs	r0, r3
 800d492:	f7f2 fe6b 	bl	800016c <strlen>
 800d496:	0002      	movs	r2, r0
 800d498:	193b      	adds	r3, r7, r4
 800d49a:	189b      	adds	r3, r3, r2
 800d49c:	0018      	movs	r0, r3
 800d49e:	f7ff ffcb 	bl	800d438 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800d4a2:	240c      	movs	r4, #12
 800d4a4:	193b      	adds	r3, r7, r4
 800d4a6:	0018      	movs	r0, r3
 800d4a8:	f7f2 fe60 	bl	800016c <strlen>
 800d4ac:	0003      	movs	r3, r0
 800d4ae:	218c      	movs	r1, #140	@ 0x8c
 800d4b0:	187a      	adds	r2, r7, r1
 800d4b2:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800d4b4:	239c      	movs	r3, #156	@ 0x9c
 800d4b6:	2508      	movs	r5, #8
 800d4b8:	195b      	adds	r3, r3, r5
 800d4ba:	19db      	adds	r3, r3, r7
 800d4bc:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800d4be:	193a      	adds	r2, r7, r4
 800d4c0:	187b      	adds	r3, r7, r1
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	18d0      	adds	r0, r2, r3
 800d4c6:	187b      	adds	r3, r7, r1
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2280      	movs	r2, #128	@ 0x80
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	0019      	movs	r1, r3
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2298      	movs	r2, #152	@ 0x98
 800d4d4:	1952      	adds	r2, r2, r5
 800d4d6:	19d2      	adds	r2, r2, r7
 800d4d8:	6812      	ldr	r2, [r2, #0]
 800d4da:	f011 fcb5 	bl	801ee48 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800d4de:	193a      	adds	r2, r7, r4
 800d4e0:	4b08      	ldr	r3, [pc, #32]	@ (800d504 <CreateLine+0xa8>)
 800d4e2:	0011      	movs	r1, r2
 800d4e4:	0018      	movs	r0, r3
 800d4e6:	f011 fba7 	bl	801ec38 <iprintf>
 800d4ea:	e000      	b.n	800d4ee <CreateLine+0x92>
    return;
 800d4ec:	46c0      	nop			@ (mov r8, r8)
}
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	b024      	add	sp, #144	@ 0x90
 800d4f2:	bcb0      	pop	{r4, r5, r7}
 800d4f4:	bc08      	pop	{r3}
 800d4f6:	b002      	add	sp, #8
 800d4f8:	4718      	bx	r3
 800d4fa:	46c0      	nop			@ (mov r8, r8)
 800d4fc:	200000cc 	.word	0x200000cc
 800d500:	08023698 	.word	0x08023698
 800d504:	0802369c 	.word	0x0802369c

0800d508 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	b29a      	uxth	r2, r3
 800d518:	68b9      	ldr	r1, [r7, #8]
 800d51a:	4804      	ldr	r0, [pc, #16]	@ (800d52c <_write+0x24>)
 800d51c:	2364      	movs	r3, #100	@ 0x64
 800d51e:	f008 fd13 	bl	8015f48 <HAL_UART_Transmit>
  return count;
 800d522:	687b      	ldr	r3, [r7, #4]
}
 800d524:	0018      	movs	r0, r3
 800d526:	46bd      	mov	sp, r7
 800d528:	b004      	add	sp, #16
 800d52a:	bd80      	pop	{r7, pc}
 800d52c:	200022e0 	.word	0x200022e0

0800d530 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800d530:	b580      	push	{r7, lr}
 800d532:	b082      	sub	sp, #8
 800d534:	af00      	add	r7, sp, #0
 800d536:	0002      	movs	r2, r0
 800d538:	1dfb      	adds	r3, r7, #7
 800d53a:	701a      	strb	r2, [r3, #0]
 800d53c:	4b03      	ldr	r3, [pc, #12]	@ (800d54c <SetVerboseLevel+0x1c>)
 800d53e:	1dfa      	adds	r2, r7, #7
 800d540:	7812      	ldrb	r2, [r2, #0]
 800d542:	701a      	strb	r2, [r3, #0]
 800d544:	46c0      	nop			@ (mov r8, r8)
 800d546:	46bd      	mov	sp, r7
 800d548:	b002      	add	sp, #8
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	200000cc 	.word	0x200000cc

0800d550 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800d550:	b580      	push	{r7, lr}
 800d552:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d554:	f000 fb20 	bl	800db98 <HAL_GetTick>
 800d558:	0003      	movs	r3, r0
}
 800d55a:	0018      	movs	r0, r3
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800d566:	4a0f      	ldr	r2, [pc, #60]	@ (800d5a4 <BinaryReleaseInfo+0x44>)
 800d568:	4b0f      	ldr	r3, [pc, #60]	@ (800d5a8 <BinaryReleaseInfo+0x48>)
 800d56a:	0019      	movs	r1, r3
 800d56c:	2002      	movs	r0, #2
 800d56e:	f7ff ff75 	bl	800d45c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800d572:	480e      	ldr	r0, [pc, #56]	@ (800d5ac <BinaryReleaseInfo+0x4c>)
 800d574:	4a0e      	ldr	r2, [pc, #56]	@ (800d5b0 <BinaryReleaseInfo+0x50>)
 800d576:	490c      	ldr	r1, [pc, #48]	@ (800d5a8 <BinaryReleaseInfo+0x48>)
 800d578:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b4 <BinaryReleaseInfo+0x54>)
 800d57a:	9300      	str	r3, [sp, #0]
 800d57c:	0003      	movs	r3, r0
 800d57e:	2002      	movs	r0, #2
 800d580:	f7ff ff6c 	bl	800d45c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: %s", CURRENT_WEEK);
 800d584:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b8 <BinaryReleaseInfo+0x58>)
 800d586:	4a0d      	ldr	r2, [pc, #52]	@ (800d5bc <BinaryReleaseInfo+0x5c>)
 800d588:	4907      	ldr	r1, [pc, #28]	@ (800d5a8 <BinaryReleaseInfo+0x48>)
 800d58a:	2002      	movs	r0, #2
 800d58c:	f7ff ff66 	bl	800d45c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800d590:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c0 <BinaryReleaseInfo+0x60>)
 800d592:	4a0c      	ldr	r2, [pc, #48]	@ (800d5c4 <BinaryReleaseInfo+0x64>)
 800d594:	4904      	ldr	r1, [pc, #16]	@ (800d5a8 <BinaryReleaseInfo+0x48>)
 800d596:	2002      	movs	r0, #2
 800d598:	f7ff ff60 	bl	800d45c <CreateLine>
}
 800d59c:	46c0      	nop			@ (mov r8, r8)
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	46c0      	nop			@ (mov r8, r8)
 800d5a4:	080236a4 	.word	0x080236a4
 800d5a8:	080236d0 	.word	0x080236d0
 800d5ac:	080236d4 	.word	0x080236d4
 800d5b0:	080236e0 	.word	0x080236e0
 800d5b4:	080236f4 	.word	0x080236f4
 800d5b8:	08023700 	.word	0x08023700
 800d5bc:	08023708 	.word	0x08023708
 800d5c0:	08023710 	.word	0x08023710
 800d5c4:	0802371c 	.word	0x0802371c

0800d5c8 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	68ba      	ldr	r2, [r7, #8]
 800d5d8:	68f9      	ldr	r1, [r7, #12]
 800d5da:	4803      	ldr	r0, [pc, #12]	@ (800d5e8 <errorHandler+0x20>)
 800d5dc:	f011 fb2c 	bl	801ec38 <iprintf>
//    while (true)
//    {
//    }
}
 800d5e0:	46c0      	nop			@ (mov r8, r8)
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	b004      	add	sp, #16
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	08023734 	.word	0x08023734

0800d5ec <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d5ec:	b590      	push	{r4, r7, lr}
 800d5ee:	b083      	sub	sp, #12
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6039      	str	r1, [r7, #0]
 800d5f4:	0011      	movs	r1, r2
 800d5f6:	1dfb      	adds	r3, r7, #7
 800d5f8:	1c02      	adds	r2, r0, #0
 800d5fa:	701a      	strb	r2, [r3, #0]
 800d5fc:	1dbb      	adds	r3, r7, #6
 800d5fe:	1c0a      	adds	r2, r1, #0
 800d600:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800d602:	4b0a      	ldr	r3, [pc, #40]	@ (800d62c <ReadRegister+0x40>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d00a      	beq.n	800d620 <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800d60a:	4b08      	ldr	r3, [pc, #32]	@ (800d62c <ReadRegister+0x40>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	1dba      	adds	r2, r7, #6
 800d610:	7814      	ldrb	r4, [r2, #0]
 800d612:	6839      	ldr	r1, [r7, #0]
 800d614:	1dfa      	adds	r2, r7, #7
 800d616:	7810      	ldrb	r0, [r2, #0]
 800d618:	0022      	movs	r2, r4
 800d61a:	4798      	blx	r3
 800d61c:	0003      	movs	r3, r0
 800d61e:	e000      	b.n	800d622 <ReadRegister+0x36>
	}
	return false;
 800d620:	2300      	movs	r3, #0
}
 800d622:	0018      	movs	r0, r3
 800d624:	46bd      	mov	sp, r7
 800d626:	b003      	add	sp, #12
 800d628:	bd90      	pop	{r4, r7, pc}
 800d62a:	46c0      	nop			@ (mov r8, r8)
 800d62c:	200024e0 	.word	0x200024e0

0800d630 <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800d630:	b590      	push	{r4, r7, lr}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6039      	str	r1, [r7, #0]
 800d638:	0011      	movs	r1, r2
 800d63a:	1dfb      	adds	r3, r7, #7
 800d63c:	1c02      	adds	r2, r0, #0
 800d63e:	701a      	strb	r2, [r3, #0]
 800d640:	1dbb      	adds	r3, r7, #6
 800d642:	1c0a      	adds	r2, r1, #0
 800d644:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800d646:	4b0a      	ldr	r3, [pc, #40]	@ (800d670 <WriteRegister+0x40>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00a      	beq.n	800d664 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800d64e:	4b08      	ldr	r3, [pc, #32]	@ (800d670 <WriteRegister+0x40>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	1dba      	adds	r2, r7, #6
 800d654:	7814      	ldrb	r4, [r2, #0]
 800d656:	6839      	ldr	r1, [r7, #0]
 800d658:	1dfa      	adds	r2, r7, #7
 800d65a:	7810      	ldrb	r0, [r2, #0]
 800d65c:	0022      	movs	r2, r4
 800d65e:	4798      	blx	r3
 800d660:	0003      	movs	r3, r0
 800d662:	e000      	b.n	800d666 <WriteRegister+0x36>
  }
  return false;
 800d664:	2300      	movs	r3, #0
}
 800d666:	0018      	movs	r0, r3
 800d668:	46bd      	mov	sp, r7
 800d66a:	b003      	add	sp, #12
 800d66c:	bd90      	pop	{r4, r7, pc}
 800d66e:	46c0      	nop			@ (mov r8, r8)
 800d670:	200024e4 	.word	0x200024e4

0800d674 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
 800d67c:	000a      	movs	r2, r1
 800d67e:	1cfb      	adds	r3, r7, #3
 800d680:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800d682:	230f      	movs	r3, #15
 800d684:	18fb      	adds	r3, r7, r3
 800d686:	22ff      	movs	r2, #255	@ 0xff
 800d688:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800d68a:	230e      	movs	r3, #14
 800d68c:	18fb      	adds	r3, r7, r3
 800d68e:	2200      	movs	r2, #0
 800d690:	701a      	strb	r2, [r3, #0]
 800d692:	e037      	b.n	800d704 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800d694:	230e      	movs	r3, #14
 800d696:	18fb      	adds	r3, r7, r3
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	18d3      	adds	r3, r2, r3
 800d69e:	7819      	ldrb	r1, [r3, #0]
 800d6a0:	220f      	movs	r2, #15
 800d6a2:	18bb      	adds	r3, r7, r2
 800d6a4:	18ba      	adds	r2, r7, r2
 800d6a6:	7812      	ldrb	r2, [r2, #0]
 800d6a8:	404a      	eors	r2, r1
 800d6aa:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800d6ac:	230d      	movs	r3, #13
 800d6ae:	18fb      	adds	r3, r7, r3
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	701a      	strb	r2, [r3, #0]
 800d6b4:	e01b      	b.n	800d6ee <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800d6b6:	210f      	movs	r1, #15
 800d6b8:	187b      	adds	r3, r7, r1
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	b25b      	sxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	da09      	bge.n	800d6d6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800d6c2:	187b      	adds	r3, r7, r1
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	b25b      	sxtb	r3, r3
 800d6ca:	2231      	movs	r2, #49	@ 0x31
 800d6cc:	4053      	eors	r3, r2
 800d6ce:	b25a      	sxtb	r2, r3
 800d6d0:	187b      	adds	r3, r7, r1
 800d6d2:	701a      	strb	r2, [r3, #0]
 800d6d4:	e005      	b.n	800d6e2 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800d6d6:	230f      	movs	r3, #15
 800d6d8:	18fa      	adds	r2, r7, r3
 800d6da:	18fb      	adds	r3, r7, r3
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	18db      	adds	r3, r3, r3
 800d6e0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800d6e2:	210d      	movs	r1, #13
 800d6e4:	187b      	adds	r3, r7, r1
 800d6e6:	781a      	ldrb	r2, [r3, #0]
 800d6e8:	187b      	adds	r3, r7, r1
 800d6ea:	3201      	adds	r2, #1
 800d6ec:	701a      	strb	r2, [r3, #0]
 800d6ee:	230d      	movs	r3, #13
 800d6f0:	18fb      	adds	r3, r7, r3
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	2b07      	cmp	r3, #7
 800d6f6:	d9de      	bls.n	800d6b6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800d6f8:	210e      	movs	r1, #14
 800d6fa:	187b      	adds	r3, r7, r1
 800d6fc:	781a      	ldrb	r2, [r3, #0]
 800d6fe:	187b      	adds	r3, r7, r1
 800d700:	3201      	adds	r2, #1
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	230e      	movs	r3, #14
 800d706:	18fa      	adds	r2, r7, r3
 800d708:	1cfb      	adds	r3, r7, #3
 800d70a:	7812      	ldrb	r2, [r2, #0]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d3c0      	bcc.n	800d694 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800d712:	230f      	movs	r3, #15
 800d714:	18fb      	adds	r3, r7, r3
 800d716:	781b      	ldrb	r3, [r3, #0]
}
 800d718:	0018      	movs	r0, r3
 800d71a:	46bd      	mov	sp, r7
 800d71c:	b004      	add	sp, #16
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800d72a:	4b0a      	ldr	r3, [pc, #40]	@ (800d754 <HIDS_Init+0x34>)
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800d730:	4b09      	ldr	r3, [pc, #36]	@ (800d758 <HIDS_Init+0x38>)
 800d732:	683a      	ldr	r2, [r7, #0]
 800d734:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800d736:	4b09      	ldr	r3, [pc, #36]	@ (800d75c <HIDS_Init+0x3c>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	0018      	movs	r0, r3
 800d73c:	f000 f8da 	bl	800d8f4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800d740:	4b07      	ldr	r3, [pc, #28]	@ (800d760 <HIDS_Init+0x40>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	0018      	movs	r0, r3
 800d746:	f000 f82b 	bl	800d7a0 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800d74a:	46c0      	nop			@ (mov r8, r8)
 800d74c:	46bd      	mov	sp, r7
 800d74e:	b002      	add	sp, #8
 800d750:	bd80      	pop	{r7, pc}
 800d752:	46c0      	nop			@ (mov r8, r8)
 800d754:	200024e0 	.word	0x200024e0
 800d758:	200024e4 	.word	0x200024e4
 800d75c:	200000ce 	.word	0x200000ce
 800d760:	200000cd 	.word	0x200000cd

0800d764 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800d764:	b580      	push	{r7, lr}
 800d766:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800d768:	f7ff fef2 	bl	800d550 <GetCurrentHalTicks>
 800d76c:	0002      	movs	r2, r0
 800d76e:	4b08      	ldr	r3, [pc, #32]	@ (800d790 <HIDS_StartMeasurement+0x2c>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	18d2      	adds	r2, r2, r3
 800d774:	4b07      	ldr	r3, [pc, #28]	@ (800d794 <HIDS_StartMeasurement+0x30>)
 800d776:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800d778:	4b07      	ldr	r3, [pc, #28]	@ (800d798 <HIDS_StartMeasurement+0x34>)
 800d77a:	2201      	movs	r2, #1
 800d77c:	0019      	movs	r1, r3
 800d77e:	2044      	movs	r0, #68	@ 0x44
 800d780:	f7ff ff56 	bl	800d630 <WriteRegister>
  MeasurementDone = false;
 800d784:	4b05      	ldr	r3, [pc, #20]	@ (800d79c <HIDS_StartMeasurement+0x38>)
 800d786:	2200      	movs	r2, #0
 800d788:	701a      	strb	r2, [r3, #0]
}
 800d78a:	46c0      	nop			@ (mov r8, r8)
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	200000d4 	.word	0x200000d4
 800d794:	200000d0 	.word	0x200000d0
 800d798:	200000ce 	.word	0x200000ce
 800d79c:	200024f6 	.word	0x200024f6

0800d7a0 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	0002      	movs	r2, r0
 800d7a8:	1dfb      	adds	r3, r7, #7
 800d7aa:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800d7ac:	4b03      	ldr	r3, [pc, #12]	@ (800d7bc <HIDS_SetHeaterMode+0x1c>)
 800d7ae:	1dfa      	adds	r2, r7, #7
 800d7b0:	7812      	ldrb	r2, [r2, #0]
 800d7b2:	701a      	strb	r2, [r3, #0]
}
 800d7b4:	46c0      	nop			@ (mov r8, r8)
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	b002      	add	sp, #8
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	200000cd 	.word	0x200000cd

0800d7c0 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800d7c0:	b590      	push	{r4, r7, lr}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	781a      	ldrb	r2, [r3, #0]
 800d7cc:	210c      	movs	r1, #12
 800d7ce:	187b      	adds	r3, r7, r1
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	785a      	ldrb	r2, [r3, #1]
 800d7d6:	187b      	adds	r3, r7, r1
 800d7d8:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800d7da:	240f      	movs	r4, #15
 800d7dc:	193b      	adds	r3, r7, r4
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	7892      	ldrb	r2, [r2, #2]
 800d7e2:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800d7e4:	187b      	adds	r3, r7, r1
 800d7e6:	2102      	movs	r1, #2
 800d7e8:	0018      	movs	r0, r3
 800d7ea:	f7ff ff43 	bl	800d674 <CalculateCRC>
 800d7ee:	0003      	movs	r3, r0
 800d7f0:	001a      	movs	r2, r3
 800d7f2:	193b      	adds	r3, r7, r4
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d007      	beq.n	800d80a <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800d7fa:	4a1a      	ldr	r2, [pc, #104]	@ (800d864 <CheckCRC+0xa4>)
 800d7fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d868 <CheckCRC+0xa8>)
 800d7fe:	0019      	movs	r1, r3
 800d800:	2001      	movs	r0, #1
 800d802:	f7ff fe2b 	bl	800d45c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800d806:	2300      	movs	r3, #0
 800d808:	e027      	b.n	800d85a <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	78da      	ldrb	r2, [r3, #3]
 800d80e:	2108      	movs	r1, #8
 800d810:	187b      	adds	r3, r7, r1
 800d812:	701a      	strb	r2, [r3, #0]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	791a      	ldrb	r2, [r3, #4]
 800d818:	187b      	adds	r3, r7, r1
 800d81a:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800d81c:	240e      	movs	r4, #14
 800d81e:	193b      	adds	r3, r7, r4
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	7952      	ldrb	r2, [r2, #5]
 800d824:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800d826:	187b      	adds	r3, r7, r1
 800d828:	2102      	movs	r1, #2
 800d82a:	0018      	movs	r0, r3
 800d82c:	f7ff ff22 	bl	800d674 <CalculateCRC>
 800d830:	0003      	movs	r3, r0
 800d832:	001a      	movs	r2, r3
 800d834:	193b      	adds	r3, r7, r4
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	4293      	cmp	r3, r2
 800d83a:	d00d      	beq.n	800d858 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800d83c:	4a0b      	ldr	r2, [pc, #44]	@ (800d86c <CheckCRC+0xac>)
 800d83e:	4b0a      	ldr	r3, [pc, #40]	@ (800d868 <CheckCRC+0xa8>)
 800d840:	0019      	movs	r1, r3
 800d842:	2001      	movs	r0, #1
 800d844:	f7ff fe0a 	bl	800d45c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800d848:	4a09      	ldr	r2, [pc, #36]	@ (800d870 <CheckCRC+0xb0>)
 800d84a:	4b0a      	ldr	r3, [pc, #40]	@ (800d874 <CheckCRC+0xb4>)
 800d84c:	2170      	movs	r1, #112	@ 0x70
 800d84e:	0018      	movs	r0, r3
 800d850:	f7ff feba 	bl	800d5c8 <errorHandler>
		return false;
 800d854:	2300      	movs	r3, #0
 800d856:	e000      	b.n	800d85a <CheckCRC+0x9a>
	}
	return true;
 800d858:	2301      	movs	r3, #1
}
 800d85a:	0018      	movs	r0, r3
 800d85c:	46bd      	mov	sp, r7
 800d85e:	b005      	add	sp, #20
 800d860:	bd90      	pop	{r4, r7, pc}
 800d862:	46c0      	nop			@ (mov r8, r8)
 800d864:	08023780 	.word	0x08023780
 800d868:	080237a8 	.word	0x080237a8
 800d86c:	080237ac 	.word	0x080237ac
 800d870:	080237d8 	.word	0x080237d8
 800d874:	08023cb0 	.word	0x08023cb0

0800d878 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800d87e:	1dbb      	adds	r3, r7, #6
 800d880:	2289      	movs	r2, #137	@ 0x89
 800d882:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800d884:	1dbb      	adds	r3, r7, #6
 800d886:	2201      	movs	r2, #1
 800d888:	0019      	movs	r1, r3
 800d88a:	2044      	movs	r0, #68	@ 0x44
 800d88c:	f7ff fed0 	bl	800d630 <WriteRegister>
	HAL_Delay(30);
 800d890:	201e      	movs	r0, #30
 800d892:	f000 f98b 	bl	800dbac <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800d896:	4b14      	ldr	r3, [pc, #80]	@ (800d8e8 <HIDS_DeviceConnected+0x70>)
 800d898:	2206      	movs	r2, #6
 800d89a:	0019      	movs	r1, r3
 800d89c:	2044      	movs	r0, #68	@ 0x44
 800d89e:	f7ff fea5 	bl	800d5ec <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d8a2:	1dfb      	adds	r3, r7, #7
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	e011      	b.n	800d8ce <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800d8aa:	1dfb      	adds	r3, r7, #7
 800d8ac:	7818      	ldrb	r0, [r3, #0]
 800d8ae:	1dfb      	adds	r3, r7, #7
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	4a0d      	ldr	r2, [pc, #52]	@ (800d8e8 <HIDS_DeviceConnected+0x70>)
 800d8b4:	5cd3      	ldrb	r3, [r2, r3]
 800d8b6:	4a0d      	ldr	r2, [pc, #52]	@ (800d8ec <HIDS_DeviceConnected+0x74>)
 800d8b8:	490d      	ldr	r1, [pc, #52]	@ (800d8f0 <HIDS_DeviceConnected+0x78>)
 800d8ba:	9300      	str	r3, [sp, #0]
 800d8bc:	0003      	movs	r3, r0
 800d8be:	2002      	movs	r0, #2
 800d8c0:	f7ff fdcc 	bl	800d45c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800d8c4:	1dfb      	adds	r3, r7, #7
 800d8c6:	781a      	ldrb	r2, [r3, #0]
 800d8c8:	1dfb      	adds	r3, r7, #7
 800d8ca:	3201      	adds	r2, #1
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	1dfb      	adds	r3, r7, #7
 800d8d0:	781b      	ldrb	r3, [r3, #0]
 800d8d2:	2b05      	cmp	r3, #5
 800d8d4:	d9e9      	bls.n	800d8aa <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800d8d6:	4b04      	ldr	r3, [pc, #16]	@ (800d8e8 <HIDS_DeviceConnected+0x70>)
 800d8d8:	0018      	movs	r0, r3
 800d8da:	f7ff ff71 	bl	800d7c0 <CheckCRC>
 800d8de:	0003      	movs	r3, r0
}
 800d8e0:	0018      	movs	r0, r3
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	b002      	add	sp, #8
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	200024e8 	.word	0x200024e8
 800d8ec:	080237f0 	.word	0x080237f0
 800d8f0:	0802377c 	.word	0x0802377c

0800d8f4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	0002      	movs	r2, r0
 800d8fc:	1dfb      	adds	r3, r7, #7
 800d8fe:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800d900:	4b03      	ldr	r3, [pc, #12]	@ (800d910 <HIDS_SetMeasurementMode+0x1c>)
 800d902:	1dfa      	adds	r2, r7, #7
 800d904:	7812      	ldrb	r2, [r2, #0]
 800d906:	701a      	strb	r2, [r3, #0]
}
 800d908:	46c0      	nop			@ (mov r8, r8)
 800d90a:	46bd      	mov	sp, r7
 800d90c:	b002      	add	sp, #8
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	200000ce 	.word	0x200000ce

0800d914 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800d914:	b580      	push	{r7, lr}
 800d916:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800d918:	4b04      	ldr	r3, [pc, #16]	@ (800d92c <HIDS_MeasurementReady+0x18>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	0018      	movs	r0, r3
 800d91e:	f7ff fd47 	bl	800d3b0 <TimestampIsReached>
 800d922:	0003      	movs	r3, r0
}
 800d924:	0018      	movs	r0, r3
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	46c0      	nop			@ (mov r8, r8)
 800d92c:	200000d0 	.word	0x200000d0

0800d930 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800d930:	b590      	push	{r4, r7, lr}
 800d932:	b087      	sub	sp, #28
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800d93a:	4b49      	ldr	r3, [pc, #292]	@ (800da60 <HIDS_GetMeasurementValues+0x130>)
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d001      	beq.n	800d946 <HIDS_GetMeasurementValues+0x16>
 800d942:	2301      	movs	r3, #1
 800d944:	e087      	b.n	800da56 <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800d946:	f7ff ffe5 	bl	800d914 <HIDS_MeasurementReady>
 800d94a:	0003      	movs	r3, r0
 800d94c:	001a      	movs	r2, r3
 800d94e:	2301      	movs	r3, #1
 800d950:	4053      	eors	r3, r2
 800d952:	b2db      	uxtb	r3, r3
 800d954:	2b00      	cmp	r3, #0
 800d956:	d001      	beq.n	800d95c <HIDS_GetMeasurementValues+0x2c>
 800d958:	2300      	movs	r3, #0
 800d95a:	e07c      	b.n	800da56 <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800d95c:	2316      	movs	r3, #22
 800d95e:	18fc      	adds	r4, r7, r3
 800d960:	4b40      	ldr	r3, [pc, #256]	@ (800da64 <HIDS_GetMeasurementValues+0x134>)
 800d962:	2206      	movs	r2, #6
 800d964:	0019      	movs	r1, r3
 800d966:	2044      	movs	r0, #68	@ 0x44
 800d968:	f7ff fe40 	bl	800d5ec <ReadRegister>
 800d96c:	0003      	movs	r3, r0
 800d96e:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800d970:	4b3c      	ldr	r3, [pc, #240]	@ (800da64 <HIDS_GetMeasurementValues+0x134>)
 800d972:	0018      	movs	r0, r3
 800d974:	f7ff ff24 	bl	800d7c0 <CheckCRC>
 800d978:	0003      	movs	r3, r0
 800d97a:	001a      	movs	r2, r3
 800d97c:	2301      	movs	r3, #1
 800d97e:	4053      	eors	r3, r2
 800d980:	b2db      	uxtb	r3, r3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d011      	beq.n	800d9aa <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800d986:	2317      	movs	r3, #23
 800d988:	18fb      	adds	r3, r7, r3
 800d98a:	2200      	movs	r2, #0
 800d98c:	701a      	strb	r2, [r3, #0]
 800d98e:	e005      	b.n	800d99c <HIDS_GetMeasurementValues+0x6c>
 800d990:	2117      	movs	r1, #23
 800d992:	187b      	adds	r3, r7, r1
 800d994:	781a      	ldrb	r2, [r3, #0]
 800d996:	187b      	adds	r3, r7, r1
 800d998:	3201      	adds	r2, #1
 800d99a:	701a      	strb	r2, [r3, #0]
 800d99c:	2317      	movs	r3, #23
 800d99e:	18fb      	adds	r3, r7, r3
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	2b05      	cmp	r3, #5
 800d9a4:	d9f4      	bls.n	800d990 <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e055      	b.n	800da56 <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800d9aa:	4b2e      	ldr	r3, [pc, #184]	@ (800da64 <HIDS_GetMeasurementValues+0x134>)
 800d9ac:	781b      	ldrb	r3, [r3, #0]
 800d9ae:	021b      	lsls	r3, r3, #8
 800d9b0:	4a2c      	ldr	r2, [pc, #176]	@ (800da64 <HIDS_GetMeasurementValues+0x134>)
 800d9b2:	7852      	ldrb	r2, [r2, #1]
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	22af      	movs	r2, #175	@ 0xaf
 800d9b8:	4353      	muls	r3, r2
 800d9ba:	0018      	movs	r0, r3
 800d9bc:	f7f5 fd00 	bl	80033c0 <__aeabi_i2d>
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	4b29      	ldr	r3, [pc, #164]	@ (800da68 <HIDS_GetMeasurementValues+0x138>)
 800d9c4:	f7f4 f9f6 	bl	8001db4 <__aeabi_ddiv>
 800d9c8:	0002      	movs	r2, r0
 800d9ca:	000b      	movs	r3, r1
 800d9cc:	0010      	movs	r0, r2
 800d9ce:	0019      	movs	r1, r3
 800d9d0:	f7f5 fd90 	bl	80034f4 <__aeabi_d2f>
 800d9d4:	1c03      	adds	r3, r0, #0
 800d9d6:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800d9d8:	4924      	ldr	r1, [pc, #144]	@ (800da6c <HIDS_GetMeasurementValues+0x13c>)
 800d9da:	6938      	ldr	r0, [r7, #16]
 800d9dc:	f7f3 fc1e 	bl	800121c <__aeabi_fsub>
 800d9e0:	1c03      	adds	r3, r0, #0
 800d9e2:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800d9e4:	4b1f      	ldr	r3, [pc, #124]	@ (800da64 <HIDS_GetMeasurementValues+0x134>)
 800d9e6:	78db      	ldrb	r3, [r3, #3]
 800d9e8:	021b      	lsls	r3, r3, #8
 800d9ea:	4a1e      	ldr	r2, [pc, #120]	@ (800da64 <HIDS_GetMeasurementValues+0x134>)
 800d9ec:	7912      	ldrb	r2, [r2, #4]
 800d9ee:	431a      	orrs	r2, r3
 800d9f0:	0013      	movs	r3, r2
 800d9f2:	015b      	lsls	r3, r3, #5
 800d9f4:	1a9b      	subs	r3, r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	189b      	adds	r3, r3, r2
 800d9fa:	0018      	movs	r0, r3
 800d9fc:	f7f5 fce0 	bl	80033c0 <__aeabi_i2d>
 800da00:	2200      	movs	r2, #0
 800da02:	4b19      	ldr	r3, [pc, #100]	@ (800da68 <HIDS_GetMeasurementValues+0x138>)
 800da04:	f7f4 f9d6 	bl	8001db4 <__aeabi_ddiv>
 800da08:	0002      	movs	r2, r0
 800da0a:	000b      	movs	r3, r1
 800da0c:	0010      	movs	r0, r2
 800da0e:	0019      	movs	r1, r3
 800da10:	f7f5 fd70 	bl	80034f4 <__aeabi_d2f>
 800da14:	1c03      	adds	r3, r0, #0
 800da16:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800da18:	4915      	ldr	r1, [pc, #84]	@ (800da70 <HIDS_GetMeasurementValues+0x140>)
 800da1a:	68f8      	ldr	r0, [r7, #12]
 800da1c:	f7f3 fbfe 	bl	800121c <__aeabi_fsub>
 800da20:	1c03      	adds	r3, r0, #0
 800da22:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	0011      	movs	r1, r2
 800da36:	0018      	movs	r0, r3
 800da38:	f7fd fcd2 	bl	800b3e0 <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800da3c:	68fa      	ldr	r2, [r7, #12]
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	1c11      	adds	r1, r2, #0
 800da42:	1c18      	adds	r0, r3, #0
 800da44:	f7f5 ff46 	bl	80038d4 <ESP_GetHT>

   measurements = 0;
 800da48:	4b0a      	ldr	r3, [pc, #40]	@ (800da74 <HIDS_GetMeasurementValues+0x144>)
 800da4a:	2200      	movs	r2, #0
 800da4c:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800da4e:	4b04      	ldr	r3, [pc, #16]	@ (800da60 <HIDS_GetMeasurementValues+0x130>)
 800da50:	2201      	movs	r2, #1
 800da52:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800da54:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800da56:	0018      	movs	r0, r3
 800da58:	46bd      	mov	sp, r7
 800da5a:	b007      	add	sp, #28
 800da5c:	bd90      	pop	{r4, r7, pc}
 800da5e:	46c0      	nop			@ (mov r8, r8)
 800da60:	200024f6 	.word	0x200024f6
 800da64:	200024f0 	.word	0x200024f0
 800da68:	40efffe0 	.word	0x40efffe0
 800da6c:	42340000 	.word	0x42340000
 800da70:	40c00000 	.word	0x40c00000
 800da74:	200024f8 	.word	0x200024f8

0800da78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800da78:	480d      	ldr	r0, [pc, #52]	@ (800dab0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800da7a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800da7c:	f7ff f8ee 	bl	800cc5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800da80:	480c      	ldr	r0, [pc, #48]	@ (800dab4 <LoopForever+0x6>)
  ldr r1, =_edata
 800da82:	490d      	ldr	r1, [pc, #52]	@ (800dab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800da84:	4a0d      	ldr	r2, [pc, #52]	@ (800dabc <LoopForever+0xe>)
  movs r3, #0
 800da86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800da88:	e002      	b.n	800da90 <LoopCopyDataInit>

0800da8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800da8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800da8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800da8e:	3304      	adds	r3, #4

0800da90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800da90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800da92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800da94:	d3f9      	bcc.n	800da8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800da96:	4a0a      	ldr	r2, [pc, #40]	@ (800dac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800da98:	4c0a      	ldr	r4, [pc, #40]	@ (800dac4 <LoopForever+0x16>)
  movs r3, #0
 800da9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800da9c:	e001      	b.n	800daa2 <LoopFillZerobss>

0800da9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800da9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800daa0:	3204      	adds	r2, #4

0800daa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800daa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800daa4:	d3fb      	bcc.n	800da9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800daa6:	f011 fb25 	bl	801f0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800daaa:	f7f9 fdb7 	bl	800761c <main>

0800daae <LoopForever>:

LoopForever:
    b LoopForever
 800daae:	e7fe      	b.n	800daae <LoopForever>
   ldr   r0, =_estack
 800dab0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800dab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800dab8:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800dabc:	08024630 	.word	0x08024630
  ldr r2, =_sbss
 800dac0:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800dac4:	20003900 	.word	0x20003900

0800dac8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800dac8:	e7fe      	b.n	800dac8 <ADC1_COMP_IRQHandler>
	...

0800dacc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800dad2:	1dfb      	adds	r3, r7, #7
 800dad4:	2200      	movs	r2, #0
 800dad6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800dad8:	4b0b      	ldr	r3, [pc, #44]	@ (800db08 <HAL_Init+0x3c>)
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	4b0a      	ldr	r3, [pc, #40]	@ (800db08 <HAL_Init+0x3c>)
 800dade:	2140      	movs	r1, #64	@ 0x40
 800dae0:	430a      	orrs	r2, r1
 800dae2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800dae4:	2003      	movs	r0, #3
 800dae6:	f000 f811 	bl	800db0c <HAL_InitTick>
 800daea:	1e03      	subs	r3, r0, #0
 800daec:	d003      	beq.n	800daf6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800daee:	1dfb      	adds	r3, r7, #7
 800daf0:	2201      	movs	r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]
 800daf4:	e001      	b.n	800dafa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800daf6:	f7fe ff65 	bl	800c9c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800dafa:	1dfb      	adds	r3, r7, #7
 800dafc:	781b      	ldrb	r3, [r3, #0]
}
 800dafe:	0018      	movs	r0, r3
 800db00:	46bd      	mov	sp, r7
 800db02:	b002      	add	sp, #8
 800db04:	bd80      	pop	{r7, pc}
 800db06:	46c0      	nop			@ (mov r8, r8)
 800db08:	40022000 	.word	0x40022000

0800db0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800db0c:	b590      	push	{r4, r7, lr}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800db14:	4b14      	ldr	r3, [pc, #80]	@ (800db68 <HAL_InitTick+0x5c>)
 800db16:	681c      	ldr	r4, [r3, #0]
 800db18:	4b14      	ldr	r3, [pc, #80]	@ (800db6c <HAL_InitTick+0x60>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	0019      	movs	r1, r3
 800db1e:	23fa      	movs	r3, #250	@ 0xfa
 800db20:	0098      	lsls	r0, r3, #2
 800db22:	f7f2 fb3f 	bl	80001a4 <__udivsi3>
 800db26:	0003      	movs	r3, r0
 800db28:	0019      	movs	r1, r3
 800db2a:	0020      	movs	r0, r4
 800db2c:	f7f2 fb3a 	bl	80001a4 <__udivsi3>
 800db30:	0003      	movs	r3, r0
 800db32:	0018      	movs	r0, r3
 800db34:	f000 fce7 	bl	800e506 <HAL_SYSTICK_Config>
 800db38:	1e03      	subs	r3, r0, #0
 800db3a:	d001      	beq.n	800db40 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800db3c:	2301      	movs	r3, #1
 800db3e:	e00f      	b.n	800db60 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b03      	cmp	r3, #3
 800db44:	d80b      	bhi.n	800db5e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800db46:	6879      	ldr	r1, [r7, #4]
 800db48:	2301      	movs	r3, #1
 800db4a:	425b      	negs	r3, r3
 800db4c:	2200      	movs	r2, #0
 800db4e:	0018      	movs	r0, r3
 800db50:	f000 fcb4 	bl	800e4bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800db54:	4b06      	ldr	r3, [pc, #24]	@ (800db70 <HAL_InitTick+0x64>)
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	e000      	b.n	800db60 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800db5e:	2301      	movs	r3, #1
}
 800db60:	0018      	movs	r0, r3
 800db62:	46bd      	mov	sp, r7
 800db64:	b003      	add	sp, #12
 800db66:	bd90      	pop	{r4, r7, pc}
 800db68:	200000c8 	.word	0x200000c8
 800db6c:	200000dc 	.word	0x200000dc
 800db70:	200000d8 	.word	0x200000d8

0800db74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800db78:	4b05      	ldr	r3, [pc, #20]	@ (800db90 <HAL_IncTick+0x1c>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	001a      	movs	r2, r3
 800db7e:	4b05      	ldr	r3, [pc, #20]	@ (800db94 <HAL_IncTick+0x20>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	18d2      	adds	r2, r2, r3
 800db84:	4b03      	ldr	r3, [pc, #12]	@ (800db94 <HAL_IncTick+0x20>)
 800db86:	601a      	str	r2, [r3, #0]
}
 800db88:	46c0      	nop			@ (mov r8, r8)
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	46c0      	nop			@ (mov r8, r8)
 800db90:	200000dc 	.word	0x200000dc
 800db94:	200024fc 	.word	0x200024fc

0800db98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
  return uwTick;
 800db9c:	4b02      	ldr	r3, [pc, #8]	@ (800dba8 <HAL_GetTick+0x10>)
 800db9e:	681b      	ldr	r3, [r3, #0]
}
 800dba0:	0018      	movs	r0, r3
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	46c0      	nop			@ (mov r8, r8)
 800dba8:	200024fc 	.word	0x200024fc

0800dbac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800dbb4:	f7ff fff0 	bl	800db98 <HAL_GetTick>
 800dbb8:	0003      	movs	r3, r0
 800dbba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	d005      	beq.n	800dbd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800dbc6:	4b0a      	ldr	r3, [pc, #40]	@ (800dbf0 <HAL_Delay+0x44>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	001a      	movs	r2, r3
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	189b      	adds	r3, r3, r2
 800dbd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800dbd2:	46c0      	nop			@ (mov r8, r8)
 800dbd4:	f7ff ffe0 	bl	800db98 <HAL_GetTick>
 800dbd8:	0002      	movs	r2, r0
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	1ad3      	subs	r3, r2, r3
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d8f7      	bhi.n	800dbd4 <HAL_Delay+0x28>
  {
  }
}
 800dbe4:	46c0      	nop			@ (mov r8, r8)
 800dbe6:	46c0      	nop			@ (mov r8, r8)
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	b004      	add	sp, #16
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	46c0      	nop			@ (mov r8, r8)
 800dbf0:	200000dc 	.word	0x200000dc

0800dbf4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800dbf8:	4b04      	ldr	r3, [pc, #16]	@ (800dc0c <HAL_SuspendTick+0x18>)
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	4b03      	ldr	r3, [pc, #12]	@ (800dc0c <HAL_SuspendTick+0x18>)
 800dbfe:	2102      	movs	r1, #2
 800dc00:	438a      	bics	r2, r1
 800dc02:	601a      	str	r2, [r3, #0]
}
 800dc04:	46c0      	nop			@ (mov r8, r8)
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	46c0      	nop			@ (mov r8, r8)
 800dc0c:	e000e010 	.word	0xe000e010

0800dc10 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800dc14:	4b04      	ldr	r3, [pc, #16]	@ (800dc28 <HAL_ResumeTick+0x18>)
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	4b03      	ldr	r3, [pc, #12]	@ (800dc28 <HAL_ResumeTick+0x18>)
 800dc1a:	2102      	movs	r1, #2
 800dc1c:	430a      	orrs	r2, r1
 800dc1e:	601a      	str	r2, [r3, #0]
}
 800dc20:	46c0      	nop			@ (mov r8, r8)
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	46c0      	nop			@ (mov r8, r8)
 800dc28:	e000e010 	.word	0xe000e010

0800dc2c <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800dc30:	4b02      	ldr	r3, [pc, #8]	@ (800dc3c <HAL_GetUIDw0+0x10>)
 800dc32:	681b      	ldr	r3, [r3, #0]
}
 800dc34:	0018      	movs	r0, r3
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	46c0      	nop			@ (mov r8, r8)
 800dc3c:	1ff80050 	.word	0x1ff80050

0800dc40 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800dc44:	4b02      	ldr	r3, [pc, #8]	@ (800dc50 <HAL_GetUIDw1+0x10>)
 800dc46:	681b      	ldr	r3, [r3, #0]
}
 800dc48:	0018      	movs	r0, r3
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	46c0      	nop			@ (mov r8, r8)
 800dc50:	1ff80054 	.word	0x1ff80054

0800dc54 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800dc58:	4b02      	ldr	r3, [pc, #8]	@ (800dc64 <HAL_GetUIDw2+0x10>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
}
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
 800dc62:	46c0      	nop			@ (mov r8, r8)
 800dc64:	1ff80064 	.word	0x1ff80064

0800dc68 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d101      	bne.n	800dc7a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	e159      	b.n	800df2e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d10a      	bne.n	800dc98 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2250      	movs	r2, #80	@ 0x50
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	0018      	movs	r0, r3
 800dc94:	f7f8 feb6 	bl	8006a04 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc9c:	2210      	movs	r2, #16
 800dc9e:	4013      	ands	r3, r2
 800dca0:	2b10      	cmp	r3, #16
 800dca2:	d005      	beq.n	800dcb0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	2204      	movs	r2, #4
 800dcac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800dcae:	d00b      	beq.n	800dcc8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcb4:	2210      	movs	r2, #16
 800dcb6:	431a      	orrs	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2250      	movs	r2, #80	@ 0x50
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800dcc4:	2301      	movs	r3, #1
 800dcc6:	e132      	b.n	800df2e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dccc:	4a9a      	ldr	r2, [pc, #616]	@ (800df38 <HAL_ADC_Init+0x2d0>)
 800dcce:	4013      	ands	r3, r2
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	2203      	movs	r2, #3
 800dce0:	4013      	ands	r3, r2
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d108      	bne.n	800dcf8 <HAL_ADC_Init+0x90>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2201      	movs	r2, #1
 800dcee:	4013      	ands	r3, r2
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d101      	bne.n	800dcf8 <HAL_ADC_Init+0x90>
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	e000      	b.n	800dcfa <HAL_ADC_Init+0x92>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d149      	bne.n	800dd92 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685a      	ldr	r2, [r3, #4]
 800dd02:	23c0      	movs	r3, #192	@ 0xc0
 800dd04:	061b      	lsls	r3, r3, #24
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d00b      	beq.n	800dd22 <HAL_ADC_Init+0xba>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	685a      	ldr	r2, [r3, #4]
 800dd0e:	2380      	movs	r3, #128	@ 0x80
 800dd10:	05db      	lsls	r3, r3, #23
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d005      	beq.n	800dd22 <HAL_ADC_Init+0xba>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	2380      	movs	r3, #128	@ 0x80
 800dd1c:	061b      	lsls	r3, r3, #24
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d111      	bne.n	800dd46 <HAL_ADC_Init+0xde>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	691a      	ldr	r2, [r3, #16]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	0092      	lsls	r2, r2, #2
 800dd2e:	0892      	lsrs	r2, r2, #2
 800dd30:	611a      	str	r2, [r3, #16]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6919      	ldr	r1, [r3, #16]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	685a      	ldr	r2, [r3, #4]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	430a      	orrs	r2, r1
 800dd42:	611a      	str	r2, [r3, #16]
 800dd44:	e014      	b.n	800dd70 <HAL_ADC_Init+0x108>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	691a      	ldr	r2, [r3, #16]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	0092      	lsls	r2, r2, #2
 800dd52:	0892      	lsrs	r2, r2, #2
 800dd54:	611a      	str	r2, [r3, #16]
 800dd56:	4b79      	ldr	r3, [pc, #484]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	4b78      	ldr	r3, [pc, #480]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800dd5c:	4978      	ldr	r1, [pc, #480]	@ (800df40 <HAL_ADC_Init+0x2d8>)
 800dd5e:	400a      	ands	r2, r1
 800dd60:	601a      	str	r2, [r3, #0]
 800dd62:	4b76      	ldr	r3, [pc, #472]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800dd64:	6819      	ldr	r1, [r3, #0]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	4b74      	ldr	r3, [pc, #464]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800dd6c:	430a      	orrs	r2, r1
 800dd6e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2118      	movs	r1, #24
 800dd7c:	438a      	bics	r2, r1
 800dd7e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	68d9      	ldr	r1, [r3, #12]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	689a      	ldr	r2, [r3, #8]
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	430a      	orrs	r2, r1
 800dd90:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800dd92:	4b6a      	ldr	r3, [pc, #424]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	4b69      	ldr	r3, [pc, #420]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800dd98:	496a      	ldr	r1, [pc, #424]	@ (800df44 <HAL_ADC_Init+0x2dc>)
 800dd9a:	400a      	ands	r2, r1
 800dd9c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800dd9e:	4b67      	ldr	r3, [pc, #412]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800dda0:	6819      	ldr	r1, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dda6:	065a      	lsls	r2, r3, #25
 800dda8:	4b64      	ldr	r3, [pc, #400]	@ (800df3c <HAL_ADC_Init+0x2d4>)
 800ddaa:	430a      	orrs	r2, r1
 800ddac:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	689a      	ldr	r2, [r3, #8]
 800ddb4:	2380      	movs	r3, #128	@ 0x80
 800ddb6:	055b      	lsls	r3, r3, #21
 800ddb8:	4013      	ands	r3, r2
 800ddba:	d108      	bne.n	800ddce <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	689a      	ldr	r2, [r3, #8]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2180      	movs	r1, #128	@ 0x80
 800ddc8:	0549      	lsls	r1, r1, #21
 800ddca:	430a      	orrs	r2, r1
 800ddcc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	68da      	ldr	r2, [r3, #12]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	495b      	ldr	r1, [pc, #364]	@ (800df48 <HAL_ADC_Init+0x2e0>)
 800ddda:	400a      	ands	r2, r1
 800dddc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68d9      	ldr	r1, [r3, #12]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d101      	bne.n	800ddf4 <HAL_ADC_Init+0x18c>
 800ddf0:	2304      	movs	r3, #4
 800ddf2:	e000      	b.n	800ddf6 <HAL_ADC_Init+0x18e>
 800ddf4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800ddf6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2020      	movs	r0, #32
 800ddfc:	5c1b      	ldrb	r3, [r3, r0]
 800ddfe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800de00:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	202c      	movs	r0, #44	@ 0x2c
 800de06:	5c1b      	ldrb	r3, [r3, r0]
 800de08:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800de0a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800de10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	699b      	ldr	r3, [r3, #24]
 800de16:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800de18:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	69db      	ldr	r3, [r3, #28]
 800de1e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800de20:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	430a      	orrs	r2, r1
 800de28:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de2e:	23c2      	movs	r3, #194	@ 0xc2
 800de30:	33ff      	adds	r3, #255	@ 0xff
 800de32:	429a      	cmp	r2, r3
 800de34:	d00b      	beq.n	800de4e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68d9      	ldr	r1, [r3, #12]
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800de44:	431a      	orrs	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	430a      	orrs	r2, r1
 800de4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2221      	movs	r2, #33	@ 0x21
 800de52:	5c9b      	ldrb	r3, [r3, r2]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d11a      	bne.n	800de8e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2220      	movs	r2, #32
 800de5c:	5c9b      	ldrb	r3, [r3, r2]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d109      	bne.n	800de76 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	68da      	ldr	r2, [r3, #12]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2180      	movs	r1, #128	@ 0x80
 800de6e:	0249      	lsls	r1, r1, #9
 800de70:	430a      	orrs	r2, r1
 800de72:	60da      	str	r2, [r3, #12]
 800de74:	e00b      	b.n	800de8e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de7a:	2220      	movs	r2, #32
 800de7c:	431a      	orrs	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de86:	2201      	movs	r2, #1
 800de88:	431a      	orrs	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de92:	2b01      	cmp	r3, #1
 800de94:	d11f      	bne.n	800ded6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	691a      	ldr	r2, [r3, #16]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	492a      	ldr	r1, [pc, #168]	@ (800df4c <HAL_ADC_Init+0x2e4>)
 800dea2:	400a      	ands	r2, r1
 800dea4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	6919      	ldr	r1, [r3, #16]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800deb4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800deba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	430a      	orrs	r2, r1
 800dec2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	691a      	ldr	r2, [r3, #16]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2101      	movs	r1, #1
 800ded0:	430a      	orrs	r2, r1
 800ded2:	611a      	str	r2, [r3, #16]
 800ded4:	e00e      	b.n	800def4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	2201      	movs	r2, #1
 800dede:	4013      	ands	r3, r2
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	d107      	bne.n	800def4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	691a      	ldr	r2, [r3, #16]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2101      	movs	r1, #1
 800def0:	438a      	bics	r2, r1
 800def2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	695a      	ldr	r2, [r3, #20]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	2107      	movs	r1, #7
 800df00:	438a      	bics	r2, r1
 800df02:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6959      	ldr	r1, [r3, #20]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	430a      	orrs	r2, r1
 800df14:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df20:	2203      	movs	r2, #3
 800df22:	4393      	bics	r3, r2
 800df24:	2201      	movs	r2, #1
 800df26:	431a      	orrs	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800df2c:	2300      	movs	r3, #0
}
 800df2e:	0018      	movs	r0, r3
 800df30:	46bd      	mov	sp, r7
 800df32:	b002      	add	sp, #8
 800df34:	bd80      	pop	{r7, pc}
 800df36:	46c0      	nop			@ (mov r8, r8)
 800df38:	fffffefd 	.word	0xfffffefd
 800df3c:	40012708 	.word	0x40012708
 800df40:	ffc3ffff 	.word	0xffc3ffff
 800df44:	fdffffff 	.word	0xfdffffff
 800df48:	fffe0219 	.word	0xfffe0219
 800df4c:	fffffc03 	.word	0xfffffc03

0800df50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800df50:	b590      	push	{r4, r7, lr}
 800df52:	b085      	sub	sp, #20
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800df58:	230f      	movs	r3, #15
 800df5a:	18fb      	adds	r3, r7, r3
 800df5c:	2200      	movs	r2, #0
 800df5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	2204      	movs	r2, #4
 800df68:	4013      	ands	r3, r2
 800df6a:	d138      	bne.n	800dfde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2250      	movs	r2, #80	@ 0x50
 800df70:	5c9b      	ldrb	r3, [r3, r2]
 800df72:	2b01      	cmp	r3, #1
 800df74:	d101      	bne.n	800df7a <HAL_ADC_Start+0x2a>
 800df76:	2302      	movs	r3, #2
 800df78:	e038      	b.n	800dfec <HAL_ADC_Start+0x9c>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2250      	movs	r2, #80	@ 0x50
 800df7e:	2101      	movs	r1, #1
 800df80:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	69db      	ldr	r3, [r3, #28]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d007      	beq.n	800df9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800df8a:	230f      	movs	r3, #15
 800df8c:	18fc      	adds	r4, r7, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	0018      	movs	r0, r3
 800df92:	f000 f95f 	bl	800e254 <ADC_Enable>
 800df96:	0003      	movs	r3, r0
 800df98:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800df9a:	230f      	movs	r3, #15
 800df9c:	18fb      	adds	r3, r7, r3
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d120      	bne.n	800dfe6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfa8:	4a12      	ldr	r2, [pc, #72]	@ (800dff4 <HAL_ADC_Start+0xa4>)
 800dfaa:	4013      	ands	r3, r2
 800dfac:	2280      	movs	r2, #128	@ 0x80
 800dfae:	0052      	lsls	r2, r2, #1
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2250      	movs	r2, #80	@ 0x50
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	221c      	movs	r2, #28
 800dfca:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	689a      	ldr	r2, [r3, #8]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2104      	movs	r1, #4
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	609a      	str	r2, [r3, #8]
 800dfdc:	e003      	b.n	800dfe6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800dfde:	230f      	movs	r3, #15
 800dfe0:	18fb      	adds	r3, r7, r3
 800dfe2:	2202      	movs	r2, #2
 800dfe4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800dfe6:	230f      	movs	r3, #15
 800dfe8:	18fb      	adds	r3, r7, r3
 800dfea:	781b      	ldrb	r3, [r3, #0]
}
 800dfec:	0018      	movs	r0, r3
 800dfee:	46bd      	mov	sp, r7
 800dff0:	b005      	add	sp, #20
 800dff2:	bd90      	pop	{r4, r7, pc}
 800dff4:	fffff0fe 	.word	0xfffff0fe

0800dff8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b084      	sub	sp, #16
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e002:	2300      	movs	r3, #0
 800e004:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	695b      	ldr	r3, [r3, #20]
 800e00e:	2b08      	cmp	r3, #8
 800e010:	d102      	bne.n	800e018 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800e012:	2308      	movs	r3, #8
 800e014:	60fb      	str	r3, [r7, #12]
 800e016:	e014      	b.n	800e042 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	2201      	movs	r2, #1
 800e020:	4013      	ands	r3, r2
 800e022:	2b01      	cmp	r3, #1
 800e024:	d10b      	bne.n	800e03e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e02a:	2220      	movs	r2, #32
 800e02c:	431a      	orrs	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2250      	movs	r2, #80	@ 0x50
 800e036:	2100      	movs	r1, #0
 800e038:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	e072      	b.n	800e124 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800e03e:	230c      	movs	r3, #12
 800e040:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800e042:	f7ff fda9 	bl	800db98 <HAL_GetTick>
 800e046:	0003      	movs	r3, r0
 800e048:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e04a:	e01f      	b.n	800e08c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	3301      	adds	r3, #1
 800e050:	d01c      	beq.n	800e08c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d007      	beq.n	800e068 <HAL_ADC_PollForConversion+0x70>
 800e058:	f7ff fd9e 	bl	800db98 <HAL_GetTick>
 800e05c:	0002      	movs	r2, r0
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	1ad3      	subs	r3, r2, r3
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	d211      	bcs.n	800e08c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68fa      	ldr	r2, [r7, #12]
 800e070:	4013      	ands	r3, r2
 800e072:	d10b      	bne.n	800e08c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e078:	2204      	movs	r2, #4
 800e07a:	431a      	orrs	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2250      	movs	r2, #80	@ 0x50
 800e084:	2100      	movs	r1, #0
 800e086:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e088:	2303      	movs	r3, #3
 800e08a:	e04b      	b.n	800e124 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	4013      	ands	r3, r2
 800e096:	d0d9      	beq.n	800e04c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e09c:	2280      	movs	r2, #128	@ 0x80
 800e09e:	0092      	lsls	r2, r2, #2
 800e0a0:	431a      	orrs	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	68da      	ldr	r2, [r3, #12]
 800e0ac:	23c0      	movs	r3, #192	@ 0xc0
 800e0ae:	011b      	lsls	r3, r3, #4
 800e0b0:	4013      	ands	r3, r2
 800e0b2:	d12e      	bne.n	800e112 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2220      	movs	r2, #32
 800e0b8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d129      	bne.n	800e112 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	2208      	movs	r2, #8
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	2b08      	cmp	r3, #8
 800e0ca:	d122      	bne.n	800e112 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	2204      	movs	r2, #4
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	d110      	bne.n	800e0fa <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	210c      	movs	r1, #12
 800e0e4:	438a      	bics	r2, r1
 800e0e6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0ec:	4a0f      	ldr	r2, [pc, #60]	@ (800e12c <HAL_ADC_PollForConversion+0x134>)
 800e0ee:	4013      	ands	r3, r2
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	431a      	orrs	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	655a      	str	r2, [r3, #84]	@ 0x54
 800e0f8:	e00b      	b.n	800e112 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e0fe:	2220      	movs	r2, #32
 800e100:	431a      	orrs	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e10a:	2201      	movs	r2, #1
 800e10c:	431a      	orrs	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	699b      	ldr	r3, [r3, #24]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d103      	bne.n	800e122 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	220c      	movs	r2, #12
 800e120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	0018      	movs	r0, r3
 800e126:	46bd      	mov	sp, r7
 800e128:	b004      	add	sp, #16
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	fffffefe 	.word	0xfffffefe

0800e130 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800e13e:	0018      	movs	r0, r3
 800e140:	46bd      	mov	sp, r7
 800e142:	b002      	add	sp, #8
 800e144:	bd80      	pop	{r7, pc}
	...

0800e148 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2250      	movs	r2, #80	@ 0x50
 800e156:	5c9b      	ldrb	r3, [r3, r2]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d101      	bne.n	800e160 <HAL_ADC_ConfigChannel+0x18>
 800e15c:	2302      	movs	r3, #2
 800e15e:	e06c      	b.n	800e23a <HAL_ADC_ConfigChannel+0xf2>
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2250      	movs	r2, #80	@ 0x50
 800e164:	2101      	movs	r1, #1
 800e166:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	2204      	movs	r2, #4
 800e170:	4013      	ands	r3, r2
 800e172:	d00b      	beq.n	800e18c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e178:	2220      	movs	r2, #32
 800e17a:	431a      	orrs	r2, r3
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2250      	movs	r2, #80	@ 0x50
 800e184:	2100      	movs	r1, #0
 800e186:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800e188:	2301      	movs	r3, #1
 800e18a:	e056      	b.n	800e23a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	4a2c      	ldr	r2, [pc, #176]	@ (800e244 <HAL_ADC_ConfigChannel+0xfc>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d028      	beq.n	800e1e8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	035b      	lsls	r3, r3, #13
 800e1a2:	0b5a      	lsrs	r2, r3, #13
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	430a      	orrs	r2, r1
 800e1aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	2380      	movs	r3, #128	@ 0x80
 800e1b2:	02db      	lsls	r3, r3, #11
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	d009      	beq.n	800e1cc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800e1b8:	4b23      	ldr	r3, [pc, #140]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	4b22      	ldr	r3, [pc, #136]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e1be:	2180      	movs	r1, #128	@ 0x80
 800e1c0:	0409      	lsls	r1, r1, #16
 800e1c2:	430a      	orrs	r2, r1
 800e1c4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800e1c6:	200a      	movs	r0, #10
 800e1c8:	f000 f8ac 	bl	800e324 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	2380      	movs	r3, #128	@ 0x80
 800e1d2:	029b      	lsls	r3, r3, #10
 800e1d4:	4013      	ands	r3, r2
 800e1d6:	d02b      	beq.n	800e230 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800e1d8:	4b1b      	ldr	r3, [pc, #108]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	4b1a      	ldr	r3, [pc, #104]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e1de:	2180      	movs	r1, #128	@ 0x80
 800e1e0:	03c9      	lsls	r1, r1, #15
 800e1e2:	430a      	orrs	r2, r1
 800e1e4:	601a      	str	r2, [r3, #0]
 800e1e6:	e023      	b.n	800e230 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	035b      	lsls	r3, r3, #13
 800e1f4:	0b5b      	lsrs	r3, r3, #13
 800e1f6:	43d9      	mvns	r1, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	400a      	ands	r2, r1
 800e1fe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	2380      	movs	r3, #128	@ 0x80
 800e206:	02db      	lsls	r3, r3, #11
 800e208:	4013      	ands	r3, r2
 800e20a:	d005      	beq.n	800e218 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800e20c:	4b0e      	ldr	r3, [pc, #56]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	4b0d      	ldr	r3, [pc, #52]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e212:	490e      	ldr	r1, [pc, #56]	@ (800e24c <HAL_ADC_ConfigChannel+0x104>)
 800e214:	400a      	ands	r2, r1
 800e216:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	2380      	movs	r3, #128	@ 0x80
 800e21e:	029b      	lsls	r3, r3, #10
 800e220:	4013      	ands	r3, r2
 800e222:	d005      	beq.n	800e230 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800e224:	4b08      	ldr	r3, [pc, #32]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	4b07      	ldr	r3, [pc, #28]	@ (800e248 <HAL_ADC_ConfigChannel+0x100>)
 800e22a:	4909      	ldr	r1, [pc, #36]	@ (800e250 <HAL_ADC_ConfigChannel+0x108>)
 800e22c:	400a      	ands	r2, r1
 800e22e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2250      	movs	r2, #80	@ 0x50
 800e234:	2100      	movs	r1, #0
 800e236:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800e238:	2300      	movs	r3, #0
}
 800e23a:	0018      	movs	r0, r3
 800e23c:	46bd      	mov	sp, r7
 800e23e:	b002      	add	sp, #8
 800e240:	bd80      	pop	{r7, pc}
 800e242:	46c0      	nop			@ (mov r8, r8)
 800e244:	00001001 	.word	0x00001001
 800e248:	40012708 	.word	0x40012708
 800e24c:	ff7fffff 	.word	0xff7fffff
 800e250:	ffbfffff 	.word	0xffbfffff

0800e254 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e25c:	2300      	movs	r3, #0
 800e25e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	2203      	movs	r2, #3
 800e268:	4013      	ands	r3, r2
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d108      	bne.n	800e280 <ADC_Enable+0x2c>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2201      	movs	r2, #1
 800e276:	4013      	ands	r3, r2
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d101      	bne.n	800e280 <ADC_Enable+0x2c>
 800e27c:	2301      	movs	r3, #1
 800e27e:	e000      	b.n	800e282 <ADC_Enable+0x2e>
 800e280:	2300      	movs	r3, #0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d146      	bne.n	800e314 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	4a24      	ldr	r2, [pc, #144]	@ (800e320 <ADC_Enable+0xcc>)
 800e28e:	4013      	ands	r3, r2
 800e290:	d00d      	beq.n	800e2ae <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e296:	2210      	movs	r2, #16
 800e298:	431a      	orrs	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	431a      	orrs	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	e033      	b.n	800e316 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	689a      	ldr	r2, [r3, #8]
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2101      	movs	r1, #1
 800e2ba:	430a      	orrs	r2, r1
 800e2bc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800e2be:	2001      	movs	r0, #1
 800e2c0:	f000 f830 	bl	800e324 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800e2c4:	f7ff fc68 	bl	800db98 <HAL_GetTick>
 800e2c8:	0003      	movs	r3, r0
 800e2ca:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e2cc:	e01b      	b.n	800e306 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800e2ce:	f7ff fc63 	bl	800db98 <HAL_GetTick>
 800e2d2:	0002      	movs	r2, r0
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	1ad3      	subs	r3, r2, r3
 800e2d8:	2b0a      	cmp	r3, #10
 800e2da:	d914      	bls.n	800e306 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d00d      	beq.n	800e306 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ee:	2210      	movs	r2, #16
 800e2f0:	431a      	orrs	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	431a      	orrs	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800e302:	2301      	movs	r3, #1
 800e304:	e007      	b.n	800e316 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	2201      	movs	r2, #1
 800e30e:	4013      	ands	r3, r2
 800e310:	2b01      	cmp	r3, #1
 800e312:	d1dc      	bne.n	800e2ce <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	0018      	movs	r0, r3
 800e318:	46bd      	mov	sp, r7
 800e31a:	b004      	add	sp, #16
 800e31c:	bd80      	pop	{r7, pc}
 800e31e:	46c0      	nop			@ (mov r8, r8)
 800e320:	80000017 	.word	0x80000017

0800e324 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800e32c:	4b0b      	ldr	r3, [pc, #44]	@ (800e35c <ADC_DelayMicroSecond+0x38>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	490b      	ldr	r1, [pc, #44]	@ (800e360 <ADC_DelayMicroSecond+0x3c>)
 800e332:	0018      	movs	r0, r3
 800e334:	f7f1 ff36 	bl	80001a4 <__udivsi3>
 800e338:	0003      	movs	r3, r0
 800e33a:	001a      	movs	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4353      	muls	r3, r2
 800e340:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800e342:	e002      	b.n	800e34a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3b01      	subs	r3, #1
 800e348:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1f9      	bne.n	800e344 <ADC_DelayMicroSecond+0x20>
  }
}
 800e350:	46c0      	nop			@ (mov r8, r8)
 800e352:	46c0      	nop			@ (mov r8, r8)
 800e354:	46bd      	mov	sp, r7
 800e356:	b004      	add	sp, #16
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	46c0      	nop			@ (mov r8, r8)
 800e35c:	200000c8 	.word	0x200000c8
 800e360:	000f4240 	.word	0x000f4240

0800e364 <__NVIC_EnableIRQ>:
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	0002      	movs	r2, r0
 800e36c:	1dfb      	adds	r3, r7, #7
 800e36e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e370:	1dfb      	adds	r3, r7, #7
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	2b7f      	cmp	r3, #127	@ 0x7f
 800e376:	d809      	bhi.n	800e38c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e378:	1dfb      	adds	r3, r7, #7
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	001a      	movs	r2, r3
 800e37e:	231f      	movs	r3, #31
 800e380:	401a      	ands	r2, r3
 800e382:	4b04      	ldr	r3, [pc, #16]	@ (800e394 <__NVIC_EnableIRQ+0x30>)
 800e384:	2101      	movs	r1, #1
 800e386:	4091      	lsls	r1, r2
 800e388:	000a      	movs	r2, r1
 800e38a:	601a      	str	r2, [r3, #0]
}
 800e38c:	46c0      	nop			@ (mov r8, r8)
 800e38e:	46bd      	mov	sp, r7
 800e390:	b002      	add	sp, #8
 800e392:	bd80      	pop	{r7, pc}
 800e394:	e000e100 	.word	0xe000e100

0800e398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b083      	sub	sp, #12
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	0002      	movs	r2, r0
 800e3a0:	6039      	str	r1, [r7, #0]
 800e3a2:	1dfb      	adds	r3, r7, #7
 800e3a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800e3a6:	1dfb      	adds	r3, r7, #7
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800e3ac:	d828      	bhi.n	800e400 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e3ae:	4a2f      	ldr	r2, [pc, #188]	@ (800e46c <__NVIC_SetPriority+0xd4>)
 800e3b0:	1dfb      	adds	r3, r7, #7
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	b25b      	sxtb	r3, r3
 800e3b6:	089b      	lsrs	r3, r3, #2
 800e3b8:	33c0      	adds	r3, #192	@ 0xc0
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	589b      	ldr	r3, [r3, r2]
 800e3be:	1dfa      	adds	r2, r7, #7
 800e3c0:	7812      	ldrb	r2, [r2, #0]
 800e3c2:	0011      	movs	r1, r2
 800e3c4:	2203      	movs	r2, #3
 800e3c6:	400a      	ands	r2, r1
 800e3c8:	00d2      	lsls	r2, r2, #3
 800e3ca:	21ff      	movs	r1, #255	@ 0xff
 800e3cc:	4091      	lsls	r1, r2
 800e3ce:	000a      	movs	r2, r1
 800e3d0:	43d2      	mvns	r2, r2
 800e3d2:	401a      	ands	r2, r3
 800e3d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	019b      	lsls	r3, r3, #6
 800e3da:	22ff      	movs	r2, #255	@ 0xff
 800e3dc:	401a      	ands	r2, r3
 800e3de:	1dfb      	adds	r3, r7, #7
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	0018      	movs	r0, r3
 800e3e4:	2303      	movs	r3, #3
 800e3e6:	4003      	ands	r3, r0
 800e3e8:	00db      	lsls	r3, r3, #3
 800e3ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e3ec:	481f      	ldr	r0, [pc, #124]	@ (800e46c <__NVIC_SetPriority+0xd4>)
 800e3ee:	1dfb      	adds	r3, r7, #7
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	b25b      	sxtb	r3, r3
 800e3f4:	089b      	lsrs	r3, r3, #2
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	33c0      	adds	r3, #192	@ 0xc0
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800e3fe:	e031      	b.n	800e464 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e400:	4a1b      	ldr	r2, [pc, #108]	@ (800e470 <__NVIC_SetPriority+0xd8>)
 800e402:	1dfb      	adds	r3, r7, #7
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	0019      	movs	r1, r3
 800e408:	230f      	movs	r3, #15
 800e40a:	400b      	ands	r3, r1
 800e40c:	3b08      	subs	r3, #8
 800e40e:	089b      	lsrs	r3, r3, #2
 800e410:	3306      	adds	r3, #6
 800e412:	009b      	lsls	r3, r3, #2
 800e414:	18d3      	adds	r3, r2, r3
 800e416:	3304      	adds	r3, #4
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	1dfa      	adds	r2, r7, #7
 800e41c:	7812      	ldrb	r2, [r2, #0]
 800e41e:	0011      	movs	r1, r2
 800e420:	2203      	movs	r2, #3
 800e422:	400a      	ands	r2, r1
 800e424:	00d2      	lsls	r2, r2, #3
 800e426:	21ff      	movs	r1, #255	@ 0xff
 800e428:	4091      	lsls	r1, r2
 800e42a:	000a      	movs	r2, r1
 800e42c:	43d2      	mvns	r2, r2
 800e42e:	401a      	ands	r2, r3
 800e430:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	019b      	lsls	r3, r3, #6
 800e436:	22ff      	movs	r2, #255	@ 0xff
 800e438:	401a      	ands	r2, r3
 800e43a:	1dfb      	adds	r3, r7, #7
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	0018      	movs	r0, r3
 800e440:	2303      	movs	r3, #3
 800e442:	4003      	ands	r3, r0
 800e444:	00db      	lsls	r3, r3, #3
 800e446:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800e448:	4809      	ldr	r0, [pc, #36]	@ (800e470 <__NVIC_SetPriority+0xd8>)
 800e44a:	1dfb      	adds	r3, r7, #7
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	001c      	movs	r4, r3
 800e450:	230f      	movs	r3, #15
 800e452:	4023      	ands	r3, r4
 800e454:	3b08      	subs	r3, #8
 800e456:	089b      	lsrs	r3, r3, #2
 800e458:	430a      	orrs	r2, r1
 800e45a:	3306      	adds	r3, #6
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	18c3      	adds	r3, r0, r3
 800e460:	3304      	adds	r3, #4
 800e462:	601a      	str	r2, [r3, #0]
}
 800e464:	46c0      	nop			@ (mov r8, r8)
 800e466:	46bd      	mov	sp, r7
 800e468:	b003      	add	sp, #12
 800e46a:	bd90      	pop	{r4, r7, pc}
 800e46c:	e000e100 	.word	0xe000e100
 800e470:	e000ed00 	.word	0xe000ed00

0800e474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	1e5a      	subs	r2, r3, #1
 800e480:	2380      	movs	r3, #128	@ 0x80
 800e482:	045b      	lsls	r3, r3, #17
 800e484:	429a      	cmp	r2, r3
 800e486:	d301      	bcc.n	800e48c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e488:	2301      	movs	r3, #1
 800e48a:	e010      	b.n	800e4ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e48c:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b8 <SysTick_Config+0x44>)
 800e48e:	687a      	ldr	r2, [r7, #4]
 800e490:	3a01      	subs	r2, #1
 800e492:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e494:	2301      	movs	r3, #1
 800e496:	425b      	negs	r3, r3
 800e498:	2103      	movs	r1, #3
 800e49a:	0018      	movs	r0, r3
 800e49c:	f7ff ff7c 	bl	800e398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e4a0:	4b05      	ldr	r3, [pc, #20]	@ (800e4b8 <SysTick_Config+0x44>)
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e4a6:	4b04      	ldr	r3, [pc, #16]	@ (800e4b8 <SysTick_Config+0x44>)
 800e4a8:	2207      	movs	r2, #7
 800e4aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	0018      	movs	r0, r3
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	b002      	add	sp, #8
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	46c0      	nop			@ (mov r8, r8)
 800e4b8:	e000e010 	.word	0xe000e010

0800e4bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b084      	sub	sp, #16
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60b9      	str	r1, [r7, #8]
 800e4c4:	607a      	str	r2, [r7, #4]
 800e4c6:	210f      	movs	r1, #15
 800e4c8:	187b      	adds	r3, r7, r1
 800e4ca:	1c02      	adds	r2, r0, #0
 800e4cc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	187b      	adds	r3, r7, r1
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	b25b      	sxtb	r3, r3
 800e4d6:	0011      	movs	r1, r2
 800e4d8:	0018      	movs	r0, r3
 800e4da:	f7ff ff5d 	bl	800e398 <__NVIC_SetPriority>
}
 800e4de:	46c0      	nop			@ (mov r8, r8)
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	b004      	add	sp, #16
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b082      	sub	sp, #8
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	0002      	movs	r2, r0
 800e4ee:	1dfb      	adds	r3, r7, #7
 800e4f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e4f2:	1dfb      	adds	r3, r7, #7
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	b25b      	sxtb	r3, r3
 800e4f8:	0018      	movs	r0, r3
 800e4fa:	f7ff ff33 	bl	800e364 <__NVIC_EnableIRQ>
}
 800e4fe:	46c0      	nop			@ (mov r8, r8)
 800e500:	46bd      	mov	sp, r7
 800e502:	b002      	add	sp, #8
 800e504:	bd80      	pop	{r7, pc}

0800e506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e506:	b580      	push	{r7, lr}
 800e508:	b082      	sub	sp, #8
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	0018      	movs	r0, r3
 800e512:	f7ff ffaf 	bl	800e474 <SysTick_Config>
 800e516:	0003      	movs	r3, r0
}
 800e518:	0018      	movs	r0, r3
 800e51a:	46bd      	mov	sp, r7
 800e51c:	b002      	add	sp, #8
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d101      	bne.n	800e532 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
 800e530:	e061      	b.n	800e5f6 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4a32      	ldr	r2, [pc, #200]	@ (800e600 <HAL_DMA_Init+0xe0>)
 800e538:	4694      	mov	ip, r2
 800e53a:	4463      	add	r3, ip
 800e53c:	2114      	movs	r1, #20
 800e53e:	0018      	movs	r0, r3
 800e540:	f7f1 fe30 	bl	80001a4 <__udivsi3>
 800e544:	0003      	movs	r3, r0
 800e546:	009a      	lsls	r2, r3, #2
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4a2d      	ldr	r2, [pc, #180]	@ (800e604 <HAL_DMA_Init+0xe4>)
 800e550:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2225      	movs	r2, #37	@ 0x25
 800e556:	2102      	movs	r1, #2
 800e558:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	4a28      	ldr	r2, [pc, #160]	@ (800e608 <HAL_DMA_Init+0xe8>)
 800e566:	4013      	ands	r3, r2
 800e568:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800e572:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e57e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	699b      	ldr	r3, [r3, #24]
 800e584:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e58a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a1b      	ldr	r3, [r3, #32]
 800e590:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800e592:	68fa      	ldr	r2, [r7, #12]
 800e594:	4313      	orrs	r3, r2
 800e596:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	689a      	ldr	r2, [r3, #8]
 800e5a4:	2380      	movs	r3, #128	@ 0x80
 800e5a6:	01db      	lsls	r3, r3, #7
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d018      	beq.n	800e5de <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800e5ac:	4b17      	ldr	r3, [pc, #92]	@ (800e60c <HAL_DMA_Init+0xec>)
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5b4:	211c      	movs	r1, #28
 800e5b6:	400b      	ands	r3, r1
 800e5b8:	210f      	movs	r1, #15
 800e5ba:	4099      	lsls	r1, r3
 800e5bc:	000b      	movs	r3, r1
 800e5be:	43d9      	mvns	r1, r3
 800e5c0:	4b12      	ldr	r3, [pc, #72]	@ (800e60c <HAL_DMA_Init+0xec>)
 800e5c2:	400a      	ands	r2, r1
 800e5c4:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800e5c6:	4b11      	ldr	r3, [pc, #68]	@ (800e60c <HAL_DMA_Init+0xec>)
 800e5c8:	6819      	ldr	r1, [r3, #0]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685a      	ldr	r2, [r3, #4]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e5d2:	201c      	movs	r0, #28
 800e5d4:	4003      	ands	r3, r0
 800e5d6:	409a      	lsls	r2, r3
 800e5d8:	4b0c      	ldr	r3, [pc, #48]	@ (800e60c <HAL_DMA_Init+0xec>)
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2225      	movs	r2, #37	@ 0x25
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2224      	movs	r2, #36	@ 0x24
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	0018      	movs	r0, r3
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	b004      	add	sp, #16
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	46c0      	nop			@ (mov r8, r8)
 800e600:	bffdfff8 	.word	0xbffdfff8
 800e604:	40020000 	.word	0x40020000
 800e608:	ffff800f 	.word	0xffff800f
 800e60c:	400200a8 	.word	0x400200a8

0800e610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	607a      	str	r2, [r7, #4]
 800e61c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e61e:	2317      	movs	r3, #23
 800e620:	18fb      	adds	r3, r7, r3
 800e622:	2200      	movs	r2, #0
 800e624:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2224      	movs	r2, #36	@ 0x24
 800e62a:	5c9b      	ldrb	r3, [r3, r2]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d101      	bne.n	800e634 <HAL_DMA_Start_IT+0x24>
 800e630:	2302      	movs	r3, #2
 800e632:	e04f      	b.n	800e6d4 <HAL_DMA_Start_IT+0xc4>
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2224      	movs	r2, #36	@ 0x24
 800e638:	2101      	movs	r1, #1
 800e63a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2225      	movs	r2, #37	@ 0x25
 800e640:	5c9b      	ldrb	r3, [r3, r2]
 800e642:	b2db      	uxtb	r3, r3
 800e644:	2b01      	cmp	r3, #1
 800e646:	d13a      	bne.n	800e6be <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2225      	movs	r2, #37	@ 0x25
 800e64c:	2102      	movs	r1, #2
 800e64e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2200      	movs	r2, #0
 800e654:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2101      	movs	r1, #1
 800e662:	438a      	bics	r2, r1
 800e664:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f000 f976 	bl	800e95e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e676:	2b00      	cmp	r3, #0
 800e678:	d008      	beq.n	800e68c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	210e      	movs	r1, #14
 800e686:	430a      	orrs	r2, r1
 800e688:	601a      	str	r2, [r3, #0]
 800e68a:	e00f      	b.n	800e6ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	2104      	movs	r1, #4
 800e698:	438a      	bics	r2, r1
 800e69a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	210a      	movs	r1, #10
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	430a      	orrs	r2, r1
 800e6ba:	601a      	str	r2, [r3, #0]
 800e6bc:	e007      	b.n	800e6ce <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2224      	movs	r2, #36	@ 0x24
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800e6c6:	2317      	movs	r3, #23
 800e6c8:	18fb      	adds	r3, r7, r3
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800e6ce:	2317      	movs	r3, #23
 800e6d0:	18fb      	adds	r3, r7, r3
 800e6d2:	781b      	ldrb	r3, [r3, #0]
}
 800e6d4:	0018      	movs	r0, r3
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	b006      	add	sp, #24
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b084      	sub	sp, #16
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e6e4:	230f      	movs	r3, #15
 800e6e6:	18fb      	adds	r3, r7, r3
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2225      	movs	r2, #37	@ 0x25
 800e6f0:	5c9b      	ldrb	r3, [r3, r2]
 800e6f2:	b2db      	uxtb	r3, r3
 800e6f4:	2b02      	cmp	r3, #2
 800e6f6:	d008      	beq.n	800e70a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2224      	movs	r2, #36	@ 0x24
 800e702:	2100      	movs	r1, #0
 800e704:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800e706:	2301      	movs	r3, #1
 800e708:	e024      	b.n	800e754 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	681a      	ldr	r2, [r3, #0]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	210e      	movs	r1, #14
 800e716:	438a      	bics	r2, r1
 800e718:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	681a      	ldr	r2, [r3, #0]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2101      	movs	r1, #1
 800e726:	438a      	bics	r2, r1
 800e728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e72e:	221c      	movs	r2, #28
 800e730:	401a      	ands	r2, r3
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e736:	2101      	movs	r1, #1
 800e738:	4091      	lsls	r1, r2
 800e73a:	000a      	movs	r2, r1
 800e73c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2225      	movs	r2, #37	@ 0x25
 800e742:	2101      	movs	r1, #1
 800e744:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2224      	movs	r2, #36	@ 0x24
 800e74a:	2100      	movs	r1, #0
 800e74c:	5499      	strb	r1, [r3, r2]

    return status;
 800e74e:	230f      	movs	r3, #15
 800e750:	18fb      	adds	r3, r7, r3
 800e752:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e754:	0018      	movs	r0, r3
 800e756:	46bd      	mov	sp, r7
 800e758:	b004      	add	sp, #16
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e764:	210f      	movs	r1, #15
 800e766:	187b      	adds	r3, r7, r1
 800e768:	2200      	movs	r2, #0
 800e76a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2225      	movs	r2, #37	@ 0x25
 800e770:	5c9b      	ldrb	r3, [r3, r2]
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b02      	cmp	r3, #2
 800e776:	d006      	beq.n	800e786 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2204      	movs	r2, #4
 800e77c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800e77e:	187b      	adds	r3, r7, r1
 800e780:	2201      	movs	r2, #1
 800e782:	701a      	strb	r2, [r3, #0]
 800e784:	e02a      	b.n	800e7dc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	210e      	movs	r1, #14
 800e792:	438a      	bics	r2, r1
 800e794:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2101      	movs	r1, #1
 800e7a2:	438a      	bics	r2, r1
 800e7a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7aa:	221c      	movs	r2, #28
 800e7ac:	401a      	ands	r2, r3
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7b2:	2101      	movs	r1, #1
 800e7b4:	4091      	lsls	r1, r2
 800e7b6:	000a      	movs	r2, r1
 800e7b8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2225      	movs	r2, #37	@ 0x25
 800e7be:	2101      	movs	r1, #1
 800e7c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2224      	movs	r2, #36	@ 0x24
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d004      	beq.n	800e7dc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	0010      	movs	r0, r2
 800e7da:	4798      	blx	r3
    }
  }
  return status;
 800e7dc:	230f      	movs	r3, #15
 800e7de:	18fb      	adds	r3, r7, r3
 800e7e0:	781b      	ldrb	r3, [r3, #0]
}
 800e7e2:	0018      	movs	r0, r3
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	b004      	add	sp, #16
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e806:	221c      	movs	r2, #28
 800e808:	4013      	ands	r3, r2
 800e80a:	2204      	movs	r2, #4
 800e80c:	409a      	lsls	r2, r3
 800e80e:	0013      	movs	r3, r2
 800e810:	68fa      	ldr	r2, [r7, #12]
 800e812:	4013      	ands	r3, r2
 800e814:	d026      	beq.n	800e864 <HAL_DMA_IRQHandler+0x7a>
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	2204      	movs	r2, #4
 800e81a:	4013      	ands	r3, r2
 800e81c:	d022      	beq.n	800e864 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	2220      	movs	r2, #32
 800e826:	4013      	ands	r3, r2
 800e828:	d107      	bne.n	800e83a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2104      	movs	r1, #4
 800e836:	438a      	bics	r2, r1
 800e838:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e83e:	221c      	movs	r2, #28
 800e840:	401a      	ands	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e846:	2104      	movs	r1, #4
 800e848:	4091      	lsls	r1, r2
 800e84a:	000a      	movs	r2, r1
 800e84c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e852:	2b00      	cmp	r3, #0
 800e854:	d100      	bne.n	800e858 <HAL_DMA_IRQHandler+0x6e>
 800e856:	e071      	b.n	800e93c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	0010      	movs	r0, r2
 800e860:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800e862:	e06b      	b.n	800e93c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e868:	221c      	movs	r2, #28
 800e86a:	4013      	ands	r3, r2
 800e86c:	2202      	movs	r2, #2
 800e86e:	409a      	lsls	r2, r3
 800e870:	0013      	movs	r3, r2
 800e872:	68fa      	ldr	r2, [r7, #12]
 800e874:	4013      	ands	r3, r2
 800e876:	d02d      	beq.n	800e8d4 <HAL_DMA_IRQHandler+0xea>
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	2202      	movs	r2, #2
 800e87c:	4013      	ands	r3, r2
 800e87e:	d029      	beq.n	800e8d4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2220      	movs	r2, #32
 800e888:	4013      	ands	r3, r2
 800e88a:	d10b      	bne.n	800e8a4 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	681a      	ldr	r2, [r3, #0]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	210a      	movs	r1, #10
 800e898:	438a      	bics	r2, r1
 800e89a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2225      	movs	r2, #37	@ 0x25
 800e8a0:	2101      	movs	r1, #1
 800e8a2:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8a8:	221c      	movs	r2, #28
 800e8aa:	401a      	ands	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b0:	2102      	movs	r1, #2
 800e8b2:	4091      	lsls	r1, r2
 800e8b4:	000a      	movs	r2, r1
 800e8b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2224      	movs	r2, #36	@ 0x24
 800e8bc:	2100      	movs	r1, #0
 800e8be:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d039      	beq.n	800e93c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	0010      	movs	r0, r2
 800e8d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800e8d2:	e033      	b.n	800e93c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8d8:	221c      	movs	r2, #28
 800e8da:	4013      	ands	r3, r2
 800e8dc:	2208      	movs	r2, #8
 800e8de:	409a      	lsls	r2, r3
 800e8e0:	0013      	movs	r3, r2
 800e8e2:	68fa      	ldr	r2, [r7, #12]
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	d02a      	beq.n	800e93e <HAL_DMA_IRQHandler+0x154>
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	2208      	movs	r2, #8
 800e8ec:	4013      	ands	r3, r2
 800e8ee:	d026      	beq.n	800e93e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	210e      	movs	r1, #14
 800e8fc:	438a      	bics	r2, r1
 800e8fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e904:	221c      	movs	r2, #28
 800e906:	401a      	ands	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e90c:	2101      	movs	r1, #1
 800e90e:	4091      	lsls	r1, r2
 800e910:	000a      	movs	r2, r1
 800e912:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2225      	movs	r2, #37	@ 0x25
 800e91e:	2101      	movs	r1, #1
 800e920:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2224      	movs	r2, #36	@ 0x24
 800e926:	2100      	movs	r1, #0
 800e928:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d005      	beq.n	800e93e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e936:	687a      	ldr	r2, [r7, #4]
 800e938:	0010      	movs	r0, r2
 800e93a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800e93c:	46c0      	nop			@ (mov r8, r8)
 800e93e:	46c0      	nop			@ (mov r8, r8)
}
 800e940:	46bd      	mov	sp, r7
 800e942:	b004      	add	sp, #16
 800e944:	bd80      	pop	{r7, pc}

0800e946 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b082      	sub	sp, #8
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2225      	movs	r2, #37	@ 0x25
 800e952:	5c9b      	ldrb	r3, [r3, r2]
 800e954:	b2db      	uxtb	r3, r3
}
 800e956:	0018      	movs	r0, r3
 800e958:	46bd      	mov	sp, r7
 800e95a:	b002      	add	sp, #8
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e95e:	b580      	push	{r7, lr}
 800e960:	b084      	sub	sp, #16
 800e962:	af00      	add	r7, sp, #0
 800e964:	60f8      	str	r0, [r7, #12]
 800e966:	60b9      	str	r1, [r7, #8]
 800e968:	607a      	str	r2, [r7, #4]
 800e96a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e970:	221c      	movs	r2, #28
 800e972:	401a      	ands	r2, r3
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e978:	2101      	movs	r1, #1
 800e97a:	4091      	lsls	r1, r2
 800e97c:	000a      	movs	r2, r1
 800e97e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	2b10      	cmp	r3, #16
 800e98e:	d108      	bne.n	800e9a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800e9a0:	e007      	b.n	800e9b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	60da      	str	r2, [r3, #12]
}
 800e9b2:	46c0      	nop			@ (mov r8, r8)
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	b004      	add	sp, #16
 800e9b8:	bd80      	pop	{r7, pc}
	...

0800e9bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800e9c4:	f7ff f8e8 	bl	800db98 <HAL_GetTick>
 800e9c8:	0003      	movs	r3, r0
 800e9ca:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e9cc:	e00f      	b.n	800e9ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	d00c      	beq.n	800e9ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <FLASH_WaitForLastOperation+0x2e>
 800e9da:	f7ff f8dd 	bl	800db98 <HAL_GetTick>
 800e9de:	0002      	movs	r2, r0
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	1ad3      	subs	r3, r2, r3
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d201      	bcs.n	800e9ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800e9ea:	2303      	movs	r3, #3
 800e9ec:	e052      	b.n	800ea94 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800e9ee:	4b2b      	ldr	r3, [pc, #172]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800e9f0:	699b      	ldr	r3, [r3, #24]
 800e9f2:	2201      	movs	r2, #1
 800e9f4:	4013      	ands	r3, r2
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d0e9      	beq.n	800e9ce <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800e9fa:	4b28      	ldr	r3, [pc, #160]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	2202      	movs	r2, #2
 800ea00:	4013      	ands	r3, r2
 800ea02:	2b02      	cmp	r3, #2
 800ea04:	d102      	bne.n	800ea0c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ea06:	4b25      	ldr	r3, [pc, #148]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea08:	2202      	movs	r2, #2
 800ea0a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ea0c:	4b23      	ldr	r3, [pc, #140]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea0e:	699a      	ldr	r2, [r3, #24]
 800ea10:	2380      	movs	r3, #128	@ 0x80
 800ea12:	005b      	lsls	r3, r3, #1
 800ea14:	401a      	ands	r2, r3
 800ea16:	2380      	movs	r3, #128	@ 0x80
 800ea18:	005b      	lsls	r3, r3, #1
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d035      	beq.n	800ea8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ea1e:	4b1f      	ldr	r3, [pc, #124]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea20:	699a      	ldr	r2, [r3, #24]
 800ea22:	2380      	movs	r3, #128	@ 0x80
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ea28:	2380      	movs	r3, #128	@ 0x80
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d02c      	beq.n	800ea8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ea30:	4b1a      	ldr	r3, [pc, #104]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea32:	699a      	ldr	r2, [r3, #24]
 800ea34:	2380      	movs	r3, #128	@ 0x80
 800ea36:	00db      	lsls	r3, r3, #3
 800ea38:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ea3a:	2380      	movs	r3, #128	@ 0x80
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d023      	beq.n	800ea8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ea42:	4b16      	ldr	r3, [pc, #88]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea44:	699a      	ldr	r2, [r3, #24]
 800ea46:	2380      	movs	r3, #128	@ 0x80
 800ea48:	011b      	lsls	r3, r3, #4
 800ea4a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ea4c:	2380      	movs	r3, #128	@ 0x80
 800ea4e:	011b      	lsls	r3, r3, #4
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d01a      	beq.n	800ea8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ea54:	4b11      	ldr	r3, [pc, #68]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea56:	699a      	ldr	r2, [r3, #24]
 800ea58:	2380      	movs	r3, #128	@ 0x80
 800ea5a:	019b      	lsls	r3, r3, #6
 800ea5c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ea5e:	2380      	movs	r3, #128	@ 0x80
 800ea60:	019b      	lsls	r3, r3, #6
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d011      	beq.n	800ea8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ea66:	4b0d      	ldr	r3, [pc, #52]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea68:	699a      	ldr	r2, [r3, #24]
 800ea6a:	2380      	movs	r3, #128	@ 0x80
 800ea6c:	029b      	lsls	r3, r3, #10
 800ea6e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ea70:	2380      	movs	r3, #128	@ 0x80
 800ea72:	029b      	lsls	r3, r3, #10
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d008      	beq.n	800ea8a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800ea78:	4b08      	ldr	r3, [pc, #32]	@ (800ea9c <FLASH_WaitForLastOperation+0xe0>)
 800ea7a:	699a      	ldr	r2, [r3, #24]
 800ea7c:	2380      	movs	r3, #128	@ 0x80
 800ea7e:	025b      	lsls	r3, r3, #9
 800ea80:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ea82:	2380      	movs	r3, #128	@ 0x80
 800ea84:	025b      	lsls	r3, r3, #9
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d103      	bne.n	800ea92 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800ea8a:	f000 f809 	bl	800eaa0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e000      	b.n	800ea94 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	0018      	movs	r0, r3
 800ea96:	46bd      	mov	sp, r7
 800ea98:	b004      	add	sp, #16
 800ea9a:	bd80      	pop	{r7, pc}
 800ea9c:	40022000 	.word	0x40022000

0800eaa0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800eaaa:	4b49      	ldr	r3, [pc, #292]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800eaac:	699a      	ldr	r2, [r3, #24]
 800eaae:	2380      	movs	r3, #128	@ 0x80
 800eab0:	005b      	lsls	r3, r3, #1
 800eab2:	401a      	ands	r2, r3
 800eab4:	2380      	movs	r3, #128	@ 0x80
 800eab6:	005b      	lsls	r3, r3, #1
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d10a      	bne.n	800ead2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800eabc:	4b45      	ldr	r3, [pc, #276]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eabe:	695b      	ldr	r3, [r3, #20]
 800eac0:	2202      	movs	r2, #2
 800eac2:	431a      	orrs	r2, r3
 800eac4:	4b43      	ldr	r3, [pc, #268]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eac6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2280      	movs	r2, #128	@ 0x80
 800eacc:	0052      	lsls	r2, r2, #1
 800eace:	4313      	orrs	r3, r2
 800ead0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800ead2:	4b3f      	ldr	r3, [pc, #252]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800ead4:	699a      	ldr	r2, [r3, #24]
 800ead6:	2380      	movs	r3, #128	@ 0x80
 800ead8:	009b      	lsls	r3, r3, #2
 800eada:	401a      	ands	r2, r3
 800eadc:	2380      	movs	r3, #128	@ 0x80
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d10a      	bne.n	800eafa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800eae4:	4b3b      	ldr	r3, [pc, #236]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eae6:	695b      	ldr	r3, [r3, #20]
 800eae8:	2201      	movs	r2, #1
 800eaea:	431a      	orrs	r2, r3
 800eaec:	4b39      	ldr	r3, [pc, #228]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eaee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2280      	movs	r2, #128	@ 0x80
 800eaf4:	0092      	lsls	r2, r2, #2
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800eafa:	4b35      	ldr	r3, [pc, #212]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800eafc:	699a      	ldr	r2, [r3, #24]
 800eafe:	2380      	movs	r3, #128	@ 0x80
 800eb00:	00db      	lsls	r3, r3, #3
 800eb02:	401a      	ands	r2, r3
 800eb04:	2380      	movs	r3, #128	@ 0x80
 800eb06:	00db      	lsls	r3, r3, #3
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d10a      	bne.n	800eb22 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800eb0c:	4b31      	ldr	r3, [pc, #196]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb0e:	695b      	ldr	r3, [r3, #20]
 800eb10:	2208      	movs	r2, #8
 800eb12:	431a      	orrs	r2, r3
 800eb14:	4b2f      	ldr	r3, [pc, #188]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb16:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2280      	movs	r2, #128	@ 0x80
 800eb1c:	00d2      	lsls	r2, r2, #3
 800eb1e:	4313      	orrs	r3, r2
 800eb20:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800eb22:	4b2b      	ldr	r3, [pc, #172]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800eb24:	699a      	ldr	r2, [r3, #24]
 800eb26:	2380      	movs	r3, #128	@ 0x80
 800eb28:	011b      	lsls	r3, r3, #4
 800eb2a:	401a      	ands	r2, r3
 800eb2c:	2380      	movs	r3, #128	@ 0x80
 800eb2e:	011b      	lsls	r3, r3, #4
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d10a      	bne.n	800eb4a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800eb34:	4b27      	ldr	r3, [pc, #156]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb36:	695b      	ldr	r3, [r3, #20]
 800eb38:	2204      	movs	r2, #4
 800eb3a:	431a      	orrs	r2, r3
 800eb3c:	4b25      	ldr	r3, [pc, #148]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb3e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2280      	movs	r2, #128	@ 0x80
 800eb44:	0112      	lsls	r2, r2, #4
 800eb46:	4313      	orrs	r3, r2
 800eb48:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800eb4a:	4b21      	ldr	r3, [pc, #132]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800eb4c:	699a      	ldr	r2, [r3, #24]
 800eb4e:	2380      	movs	r3, #128	@ 0x80
 800eb50:	019b      	lsls	r3, r3, #6
 800eb52:	401a      	ands	r2, r3
 800eb54:	2380      	movs	r3, #128	@ 0x80
 800eb56:	019b      	lsls	r3, r3, #6
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d10a      	bne.n	800eb72 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800eb5c:	4b1d      	ldr	r3, [pc, #116]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb5e:	695b      	ldr	r3, [r3, #20]
 800eb60:	2210      	movs	r2, #16
 800eb62:	431a      	orrs	r2, r3
 800eb64:	4b1b      	ldr	r3, [pc, #108]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb66:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2280      	movs	r2, #128	@ 0x80
 800eb6c:	0192      	lsls	r2, r2, #6
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800eb72:	4b17      	ldr	r3, [pc, #92]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800eb74:	699a      	ldr	r2, [r3, #24]
 800eb76:	2380      	movs	r3, #128	@ 0x80
 800eb78:	029b      	lsls	r3, r3, #10
 800eb7a:	401a      	ands	r2, r3
 800eb7c:	2380      	movs	r3, #128	@ 0x80
 800eb7e:	029b      	lsls	r3, r3, #10
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d109      	bne.n	800eb98 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800eb84:	4b13      	ldr	r3, [pc, #76]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb86:	695b      	ldr	r3, [r3, #20]
 800eb88:	2220      	movs	r2, #32
 800eb8a:	431a      	orrs	r2, r3
 800eb8c:	4b11      	ldr	r3, [pc, #68]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800eb8e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2220      	movs	r2, #32
 800eb94:	4313      	orrs	r3, r2
 800eb96:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800eb98:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800eb9a:	699a      	ldr	r2, [r3, #24]
 800eb9c:	2380      	movs	r3, #128	@ 0x80
 800eb9e:	025b      	lsls	r3, r3, #9
 800eba0:	401a      	ands	r2, r3
 800eba2:	2380      	movs	r3, #128	@ 0x80
 800eba4:	025b      	lsls	r3, r3, #9
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d10a      	bne.n	800ebc0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800ebaa:	4b0a      	ldr	r3, [pc, #40]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800ebac:	695b      	ldr	r3, [r3, #20]
 800ebae:	2240      	movs	r2, #64	@ 0x40
 800ebb0:	431a      	orrs	r2, r3
 800ebb2:	4b08      	ldr	r3, [pc, #32]	@ (800ebd4 <FLASH_SetErrorCode+0x134>)
 800ebb4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2280      	movs	r2, #128	@ 0x80
 800ebba:	0252      	lsls	r2, r2, #9
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ebc0:	4b03      	ldr	r3, [pc, #12]	@ (800ebd0 <FLASH_SetErrorCode+0x130>)
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	619a      	str	r2, [r3, #24]
}  
 800ebc6:	46c0      	nop			@ (mov r8, r8)
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	b002      	add	sp, #8
 800ebcc:	bd80      	pop	{r7, pc}
 800ebce:	46c0      	nop			@ (mov r8, r8)
 800ebd0:	40022000 	.word	0x40022000
 800ebd4:	20002500 	.word	0x20002500

0800ebd8 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ebde:	4b12      	ldr	r3, [pc, #72]	@ (800ec28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	4013      	ands	r3, r2
 800ebe6:	d019      	beq.n	800ec1c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebe8:	f3ef 8310 	mrs	r3, PRIMASK
 800ebec:	607b      	str	r3, [r7, #4]
  return(result);
 800ebee:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ebf0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebf2:	b672      	cpsid	i
}
 800ebf4:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ebf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ec28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ebf8:	4a0c      	ldr	r2, [pc, #48]	@ (800ec2c <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ebfa:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ebfc:	4b0a      	ldr	r3, [pc, #40]	@ (800ec28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ebfe:	4a0c      	ldr	r2, [pc, #48]	@ (800ec30 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ec00:	60da      	str	r2, [r3, #12]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	f383 8810 	msr	PRIMASK, r3
}
 800ec0c:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ec0e:	4b06      	ldr	r3, [pc, #24]	@ (800ec28 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	4013      	ands	r3, r2
 800ec16:	d001      	beq.n	800ec1c <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e000      	b.n	800ec1e <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	0018      	movs	r0, r3
 800ec20:	46bd      	mov	sp, r7
 800ec22:	b004      	add	sp, #16
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	46c0      	nop			@ (mov r8, r8)
 800ec28:	40022000 	.word	0x40022000
 800ec2c:	89abcdef 	.word	0x89abcdef
 800ec30:	02030405 	.word	0x02030405

0800ec34 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800ec38:	4b04      	ldr	r3, [pc, #16]	@ (800ec4c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ec3a:	685a      	ldr	r2, [r3, #4]
 800ec3c:	4b03      	ldr	r3, [pc, #12]	@ (800ec4c <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800ec3e:	2101      	movs	r1, #1
 800ec40:	430a      	orrs	r2, r1
 800ec42:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800ec44:	2300      	movs	r3, #0
}
 800ec46:	0018      	movs	r0, r3
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	40022000 	.word	0x40022000

0800ec50 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ec50:	b5b0      	push	{r4, r5, r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec58:	250f      	movs	r5, #15
 800ec5a:	197b      	adds	r3, r7, r5
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ec60:	197c      	adds	r4, r7, r5
 800ec62:	4b0f      	ldr	r3, [pc, #60]	@ (800eca0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ec64:	0018      	movs	r0, r3
 800ec66:	f7ff fea9 	bl	800e9bc <FLASH_WaitForLastOperation>
 800ec6a:	0003      	movs	r3, r0
 800ec6c:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ec6e:	0029      	movs	r1, r5
 800ec70:	187b      	adds	r3, r7, r1
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10c      	bne.n	800ec92 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ec78:	4b0a      	ldr	r3, [pc, #40]	@ (800eca4 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ec84:	187c      	adds	r4, r7, r1
 800ec86:	4b06      	ldr	r3, [pc, #24]	@ (800eca0 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800ec88:	0018      	movs	r0, r3
 800ec8a:	f7ff fe97 	bl	800e9bc <FLASH_WaitForLastOperation>
 800ec8e:	0003      	movs	r3, r0
 800ec90:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800ec92:	230f      	movs	r3, #15
 800ec94:	18fb      	adds	r3, r7, r3
 800ec96:	781b      	ldrb	r3, [r3, #0]
}  
 800ec98:	0018      	movs	r0, r3
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	b004      	add	sp, #16
 800ec9e:	bdb0      	pop	{r4, r5, r7, pc}
 800eca0:	0000c350 	.word	0x0000c350
 800eca4:	20002500 	.word	0x20002500

0800eca8 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800eca8:	b5b0      	push	{r4, r5, r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ecb4:	2317      	movs	r3, #23
 800ecb6:	18fb      	adds	r3, r7, r3
 800ecb8:	2201      	movs	r2, #1
 800ecba:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ecbc:	4b24      	ldr	r3, [pc, #144]	@ (800ed50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ecbe:	7c1b      	ldrb	r3, [r3, #16]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d101      	bne.n	800ecc8 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800ecc4:	2302      	movs	r3, #2
 800ecc6:	e03e      	b.n	800ed46 <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800ecc8:	4b21      	ldr	r3, [pc, #132]	@ (800ed50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ecca:	2201      	movs	r2, #1
 800eccc:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ecce:	2517      	movs	r5, #23
 800ecd0:	197c      	adds	r4, r7, r5
 800ecd2:	4b20      	ldr	r3, [pc, #128]	@ (800ed54 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800ecd4:	0018      	movs	r0, r3
 800ecd6:	f7ff fe71 	bl	800e9bc <FLASH_WaitForLastOperation>
 800ecda:	0003      	movs	r3, r0
 800ecdc:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800ecde:	197b      	adds	r3, r7, r5
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d129      	bne.n	800ed3a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ece6:	4b1a      	ldr	r3, [pc, #104]	@ (800ed50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ece8:	2200      	movs	r2, #0
 800ecea:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	2b02      	cmp	r3, #2
 800ecf0:	d103      	bne.n	800ecfa <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	601a      	str	r2, [r3, #0]
 800ecf8:	e013      	b.n	800ed22 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d104      	bne.n	800ed0a <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	b292      	uxth	r2, r2
 800ed06:	801a      	strh	r2, [r3, #0]
 800ed08:	e00b      	b.n	800ed22 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d104      	bne.n	800ed1a <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	b2d2      	uxtb	r2, r2
 800ed16:	701a      	strb	r2, [r3, #0]
 800ed18:	e003      	b.n	800ed22 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800ed1a:	2317      	movs	r3, #23
 800ed1c:	18fb      	adds	r3, r7, r3
 800ed1e:	2201      	movs	r2, #1
 800ed20:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800ed22:	2217      	movs	r2, #23
 800ed24:	18bb      	adds	r3, r7, r2
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d106      	bne.n	800ed3a <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800ed2c:	18bc      	adds	r4, r7, r2
 800ed2e:	4b09      	ldr	r3, [pc, #36]	@ (800ed54 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800ed30:	0018      	movs	r0, r3
 800ed32:	f7ff fe43 	bl	800e9bc <FLASH_WaitForLastOperation>
 800ed36:	0003      	movs	r3, r0
 800ed38:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ed3a:	4b05      	ldr	r3, [pc, #20]	@ (800ed50 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	741a      	strb	r2, [r3, #16]

  return status;
 800ed40:	2317      	movs	r3, #23
 800ed42:	18fb      	adds	r3, r7, r3
 800ed44:	781b      	ldrb	r3, [r3, #0]
}
 800ed46:	0018      	movs	r0, r3
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	b006      	add	sp, #24
 800ed4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ed4e:	46c0      	nop			@ (mov r8, r8)
 800ed50:	20002500 	.word	0x20002500
 800ed54:	0000c350 	.word	0x0000c350

0800ed58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ed62:	2300      	movs	r3, #0
 800ed64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ed66:	2300      	movs	r3, #0
 800ed68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800ed6e:	e155      	b.n	800f01c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	2101      	movs	r1, #1
 800ed76:	697a      	ldr	r2, [r7, #20]
 800ed78:	4091      	lsls	r1, r2
 800ed7a:	000a      	movs	r2, r1
 800ed7c:	4013      	ands	r3, r2
 800ed7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d100      	bne.n	800ed88 <HAL_GPIO_Init+0x30>
 800ed86:	e146      	b.n	800f016 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	685b      	ldr	r3, [r3, #4]
 800ed8c:	2203      	movs	r2, #3
 800ed8e:	4013      	ands	r3, r2
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	d005      	beq.n	800eda0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	2203      	movs	r2, #3
 800ed9a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800ed9c:	2b02      	cmp	r3, #2
 800ed9e:	d130      	bne.n	800ee02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	689b      	ldr	r3, [r3, #8]
 800eda4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	005b      	lsls	r3, r3, #1
 800edaa:	2203      	movs	r2, #3
 800edac:	409a      	lsls	r2, r3
 800edae:	0013      	movs	r3, r2
 800edb0:	43da      	mvns	r2, r3
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	4013      	ands	r3, r2
 800edb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	68da      	ldr	r2, [r3, #12]
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	005b      	lsls	r3, r3, #1
 800edc0:	409a      	lsls	r2, r3
 800edc2:	0013      	movs	r3, r2
 800edc4:	693a      	ldr	r2, [r7, #16]
 800edc6:	4313      	orrs	r3, r2
 800edc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	693a      	ldr	r2, [r7, #16]
 800edce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800edd6:	2201      	movs	r2, #1
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	409a      	lsls	r2, r3
 800eddc:	0013      	movs	r3, r2
 800edde:	43da      	mvns	r2, r3
 800ede0:	693b      	ldr	r3, [r7, #16]
 800ede2:	4013      	ands	r3, r2
 800ede4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	091b      	lsrs	r3, r3, #4
 800edec:	2201      	movs	r2, #1
 800edee:	401a      	ands	r2, r3
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	409a      	lsls	r2, r3
 800edf4:	0013      	movs	r3, r2
 800edf6:	693a      	ldr	r2, [r7, #16]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	693a      	ldr	r2, [r7, #16]
 800ee00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	2203      	movs	r2, #3
 800ee08:	4013      	ands	r3, r2
 800ee0a:	2b03      	cmp	r3, #3
 800ee0c:	d017      	beq.n	800ee3e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	005b      	lsls	r3, r3, #1
 800ee18:	2203      	movs	r2, #3
 800ee1a:	409a      	lsls	r2, r3
 800ee1c:	0013      	movs	r3, r2
 800ee1e:	43da      	mvns	r2, r3
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	4013      	ands	r3, r2
 800ee24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	689a      	ldr	r2, [r3, #8]
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	005b      	lsls	r3, r3, #1
 800ee2e:	409a      	lsls	r2, r3
 800ee30:	0013      	movs	r3, r2
 800ee32:	693a      	ldr	r2, [r7, #16]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	693a      	ldr	r2, [r7, #16]
 800ee3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	2203      	movs	r2, #3
 800ee44:	4013      	ands	r3, r2
 800ee46:	2b02      	cmp	r3, #2
 800ee48:	d123      	bne.n	800ee92 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	08da      	lsrs	r2, r3, #3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	3208      	adds	r2, #8
 800ee52:	0092      	lsls	r2, r2, #2
 800ee54:	58d3      	ldr	r3, [r2, r3]
 800ee56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	2207      	movs	r2, #7
 800ee5c:	4013      	ands	r3, r2
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	220f      	movs	r2, #15
 800ee62:	409a      	lsls	r2, r3
 800ee64:	0013      	movs	r3, r2
 800ee66:	43da      	mvns	r2, r3
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	691a      	ldr	r2, [r3, #16]
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2107      	movs	r1, #7
 800ee76:	400b      	ands	r3, r1
 800ee78:	009b      	lsls	r3, r3, #2
 800ee7a:	409a      	lsls	r2, r3
 800ee7c:	0013      	movs	r3, r2
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	4313      	orrs	r3, r2
 800ee82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	08da      	lsrs	r2, r3, #3
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	3208      	adds	r2, #8
 800ee8c:	0092      	lsls	r2, r2, #2
 800ee8e:	6939      	ldr	r1, [r7, #16]
 800ee90:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	005b      	lsls	r3, r3, #1
 800ee9c:	2203      	movs	r2, #3
 800ee9e:	409a      	lsls	r2, r3
 800eea0:	0013      	movs	r3, r2
 800eea2:	43da      	mvns	r2, r3
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	4013      	ands	r3, r2
 800eea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	2203      	movs	r2, #3
 800eeb0:	401a      	ands	r2, r3
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	005b      	lsls	r3, r3, #1
 800eeb6:	409a      	lsls	r2, r3
 800eeb8:	0013      	movs	r3, r2
 800eeba:	693a      	ldr	r2, [r7, #16]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	693a      	ldr	r2, [r7, #16]
 800eec4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	685a      	ldr	r2, [r3, #4]
 800eeca:	23c0      	movs	r3, #192	@ 0xc0
 800eecc:	029b      	lsls	r3, r3, #10
 800eece:	4013      	ands	r3, r2
 800eed0:	d100      	bne.n	800eed4 <HAL_GPIO_Init+0x17c>
 800eed2:	e0a0      	b.n	800f016 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800eed4:	4b57      	ldr	r3, [pc, #348]	@ (800f034 <HAL_GPIO_Init+0x2dc>)
 800eed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eed8:	4b56      	ldr	r3, [pc, #344]	@ (800f034 <HAL_GPIO_Init+0x2dc>)
 800eeda:	2101      	movs	r1, #1
 800eedc:	430a      	orrs	r2, r1
 800eede:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800eee0:	4a55      	ldr	r2, [pc, #340]	@ (800f038 <HAL_GPIO_Init+0x2e0>)
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	089b      	lsrs	r3, r3, #2
 800eee6:	3302      	adds	r3, #2
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	589b      	ldr	r3, [r3, r2]
 800eeec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	2203      	movs	r2, #3
 800eef2:	4013      	ands	r3, r2
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	220f      	movs	r2, #15
 800eef8:	409a      	lsls	r2, r3
 800eefa:	0013      	movs	r3, r2
 800eefc:	43da      	mvns	r2, r3
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	4013      	ands	r3, r2
 800ef02:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	23a0      	movs	r3, #160	@ 0xa0
 800ef08:	05db      	lsls	r3, r3, #23
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d01f      	beq.n	800ef4e <HAL_GPIO_Init+0x1f6>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a4a      	ldr	r2, [pc, #296]	@ (800f03c <HAL_GPIO_Init+0x2e4>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d019      	beq.n	800ef4a <HAL_GPIO_Init+0x1f2>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a49      	ldr	r2, [pc, #292]	@ (800f040 <HAL_GPIO_Init+0x2e8>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d013      	beq.n	800ef46 <HAL_GPIO_Init+0x1ee>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	4a48      	ldr	r2, [pc, #288]	@ (800f044 <HAL_GPIO_Init+0x2ec>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d00d      	beq.n	800ef42 <HAL_GPIO_Init+0x1ea>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a47      	ldr	r2, [pc, #284]	@ (800f048 <HAL_GPIO_Init+0x2f0>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d007      	beq.n	800ef3e <HAL_GPIO_Init+0x1e6>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a46      	ldr	r2, [pc, #280]	@ (800f04c <HAL_GPIO_Init+0x2f4>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d101      	bne.n	800ef3a <HAL_GPIO_Init+0x1e2>
 800ef36:	2305      	movs	r3, #5
 800ef38:	e00a      	b.n	800ef50 <HAL_GPIO_Init+0x1f8>
 800ef3a:	2306      	movs	r3, #6
 800ef3c:	e008      	b.n	800ef50 <HAL_GPIO_Init+0x1f8>
 800ef3e:	2304      	movs	r3, #4
 800ef40:	e006      	b.n	800ef50 <HAL_GPIO_Init+0x1f8>
 800ef42:	2303      	movs	r3, #3
 800ef44:	e004      	b.n	800ef50 <HAL_GPIO_Init+0x1f8>
 800ef46:	2302      	movs	r3, #2
 800ef48:	e002      	b.n	800ef50 <HAL_GPIO_Init+0x1f8>
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e000      	b.n	800ef50 <HAL_GPIO_Init+0x1f8>
 800ef4e:	2300      	movs	r3, #0
 800ef50:	697a      	ldr	r2, [r7, #20]
 800ef52:	2103      	movs	r1, #3
 800ef54:	400a      	ands	r2, r1
 800ef56:	0092      	lsls	r2, r2, #2
 800ef58:	4093      	lsls	r3, r2
 800ef5a:	693a      	ldr	r2, [r7, #16]
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ef60:	4935      	ldr	r1, [pc, #212]	@ (800f038 <HAL_GPIO_Init+0x2e0>)
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	089b      	lsrs	r3, r3, #2
 800ef66:	3302      	adds	r3, #2
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	693a      	ldr	r2, [r7, #16]
 800ef6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ef6e:	4b38      	ldr	r3, [pc, #224]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	43da      	mvns	r2, r3
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	4013      	ands	r3, r2
 800ef7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	685a      	ldr	r2, [r3, #4]
 800ef82:	2380      	movs	r3, #128	@ 0x80
 800ef84:	035b      	lsls	r3, r3, #13
 800ef86:	4013      	ands	r3, r2
 800ef88:	d003      	beq.n	800ef92 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800ef8a:	693a      	ldr	r2, [r7, #16]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	4313      	orrs	r3, r2
 800ef90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800ef92:	4b2f      	ldr	r3, [pc, #188]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800ef94:	693a      	ldr	r2, [r7, #16]
 800ef96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800ef98:	4b2d      	ldr	r3, [pc, #180]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	43da      	mvns	r2, r3
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	4013      	ands	r3, r2
 800efa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	685a      	ldr	r2, [r3, #4]
 800efac:	2380      	movs	r3, #128	@ 0x80
 800efae:	039b      	lsls	r3, r3, #14
 800efb0:	4013      	ands	r3, r2
 800efb2:	d003      	beq.n	800efbc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800efb4:	693a      	ldr	r2, [r7, #16]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	4313      	orrs	r3, r2
 800efba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800efbc:	4b24      	ldr	r3, [pc, #144]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800efc2:	4b23      	ldr	r3, [pc, #140]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	43da      	mvns	r2, r3
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	4013      	ands	r3, r2
 800efd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	685a      	ldr	r2, [r3, #4]
 800efd6:	2380      	movs	r3, #128	@ 0x80
 800efd8:	029b      	lsls	r3, r3, #10
 800efda:	4013      	ands	r3, r2
 800efdc:	d003      	beq.n	800efe6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800efde:	693a      	ldr	r2, [r7, #16]
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800efe6:	4b1a      	ldr	r3, [pc, #104]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800efec:	4b18      	ldr	r3, [pc, #96]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	43da      	mvns	r2, r3
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	4013      	ands	r3, r2
 800effa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	685a      	ldr	r2, [r3, #4]
 800f000:	2380      	movs	r3, #128	@ 0x80
 800f002:	025b      	lsls	r3, r3, #9
 800f004:	4013      	ands	r3, r2
 800f006:	d003      	beq.n	800f010 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800f008:	693a      	ldr	r2, [r7, #16]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800f010:	4b0f      	ldr	r3, [pc, #60]	@ (800f050 <HAL_GPIO_Init+0x2f8>)
 800f012:	693a      	ldr	r2, [r7, #16]
 800f014:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	3301      	adds	r3, #1
 800f01a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800f01c:	683b      	ldr	r3, [r7, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	40da      	lsrs	r2, r3
 800f024:	1e13      	subs	r3, r2, #0
 800f026:	d000      	beq.n	800f02a <HAL_GPIO_Init+0x2d2>
 800f028:	e6a2      	b.n	800ed70 <HAL_GPIO_Init+0x18>
  }
}
 800f02a:	46c0      	nop			@ (mov r8, r8)
 800f02c:	46c0      	nop			@ (mov r8, r8)
 800f02e:	46bd      	mov	sp, r7
 800f030:	b006      	add	sp, #24
 800f032:	bd80      	pop	{r7, pc}
 800f034:	40021000 	.word	0x40021000
 800f038:	40010000 	.word	0x40010000
 800f03c:	50000400 	.word	0x50000400
 800f040:	50000800 	.word	0x50000800
 800f044:	50000c00 	.word	0x50000c00
 800f048:	50001000 	.word	0x50001000
 800f04c:	50001c00 	.word	0x50001c00
 800f050:	40010400 	.word	0x40010400

0800f054 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	000a      	movs	r2, r1
 800f05e:	1cbb      	adds	r3, r7, #2
 800f060:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	691b      	ldr	r3, [r3, #16]
 800f066:	1cba      	adds	r2, r7, #2
 800f068:	8812      	ldrh	r2, [r2, #0]
 800f06a:	4013      	ands	r3, r2
 800f06c:	d004      	beq.n	800f078 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800f06e:	230f      	movs	r3, #15
 800f070:	18fb      	adds	r3, r7, r3
 800f072:	2201      	movs	r2, #1
 800f074:	701a      	strb	r2, [r3, #0]
 800f076:	e003      	b.n	800f080 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f078:	230f      	movs	r3, #15
 800f07a:	18fb      	adds	r3, r7, r3
 800f07c:	2200      	movs	r2, #0
 800f07e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800f080:	230f      	movs	r3, #15
 800f082:	18fb      	adds	r3, r7, r3
 800f084:	781b      	ldrb	r3, [r3, #0]
}
 800f086:	0018      	movs	r0, r3
 800f088:	46bd      	mov	sp, r7
 800f08a:	b004      	add	sp, #16
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b082      	sub	sp, #8
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
 800f096:	0008      	movs	r0, r1
 800f098:	0011      	movs	r1, r2
 800f09a:	1cbb      	adds	r3, r7, #2
 800f09c:	1c02      	adds	r2, r0, #0
 800f09e:	801a      	strh	r2, [r3, #0]
 800f0a0:	1c7b      	adds	r3, r7, #1
 800f0a2:	1c0a      	adds	r2, r1, #0
 800f0a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f0a6:	1c7b      	adds	r3, r7, #1
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d004      	beq.n	800f0b8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f0ae:	1cbb      	adds	r3, r7, #2
 800f0b0:	881a      	ldrh	r2, [r3, #0]
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800f0b6:	e003      	b.n	800f0c0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800f0b8:	1cbb      	adds	r3, r7, #2
 800f0ba:	881a      	ldrh	r2, [r3, #0]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800f0c0:	46c0      	nop			@ (mov r8, r8)
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	b002      	add	sp, #8
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	0002      	movs	r2, r0
 800f0d0:	1dbb      	adds	r3, r7, #6
 800f0d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f0d4:	4b09      	ldr	r3, [pc, #36]	@ (800f0fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	1dba      	adds	r2, r7, #6
 800f0da:	8812      	ldrh	r2, [r2, #0]
 800f0dc:	4013      	ands	r3, r2
 800f0de:	d008      	beq.n	800f0f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f0e0:	4b06      	ldr	r3, [pc, #24]	@ (800f0fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800f0e2:	1dba      	adds	r2, r7, #6
 800f0e4:	8812      	ldrh	r2, [r2, #0]
 800f0e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f0e8:	1dbb      	adds	r3, r7, #6
 800f0ea:	881b      	ldrh	r3, [r3, #0]
 800f0ec:	0018      	movs	r0, r3
 800f0ee:	f7f8 fd25 	bl	8007b3c <HAL_GPIO_EXTI_Callback>
  }
}
 800f0f2:	46c0      	nop			@ (mov r8, r8)
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	b002      	add	sp, #8
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	46c0      	nop			@ (mov r8, r8)
 800f0fc:	40010400 	.word	0x40010400

0800f100 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d101      	bne.n	800f112 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f10e:	2301      	movs	r3, #1
 800f110:	e082      	b.n	800f218 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2241      	movs	r2, #65	@ 0x41
 800f116:	5c9b      	ldrb	r3, [r3, r2]
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d107      	bne.n	800f12e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2240      	movs	r2, #64	@ 0x40
 800f122:	2100      	movs	r1, #0
 800f124:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	0018      	movs	r0, r3
 800f12a:	f7f8 f889 	bl	8007240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2241      	movs	r2, #65	@ 0x41
 800f132:	2124      	movs	r1, #36	@ 0x24
 800f134:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	2101      	movs	r1, #1
 800f142:	438a      	bics	r2, r1
 800f144:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	685a      	ldr	r2, [r3, #4]
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	4934      	ldr	r1, [pc, #208]	@ (800f220 <HAL_I2C_Init+0x120>)
 800f150:	400a      	ands	r2, r1
 800f152:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	689a      	ldr	r2, [r3, #8]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4931      	ldr	r1, [pc, #196]	@ (800f224 <HAL_I2C_Init+0x124>)
 800f160:	400a      	ands	r2, r1
 800f162:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d108      	bne.n	800f17e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	689a      	ldr	r2, [r3, #8]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	2180      	movs	r1, #128	@ 0x80
 800f176:	0209      	lsls	r1, r1, #8
 800f178:	430a      	orrs	r2, r1
 800f17a:	609a      	str	r2, [r3, #8]
 800f17c:	e007      	b.n	800f18e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	689a      	ldr	r2, [r3, #8]
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	2184      	movs	r1, #132	@ 0x84
 800f188:	0209      	lsls	r1, r1, #8
 800f18a:	430a      	orrs	r2, r1
 800f18c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	2b02      	cmp	r3, #2
 800f194:	d104      	bne.n	800f1a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2280      	movs	r2, #128	@ 0x80
 800f19c:	0112      	lsls	r2, r2, #4
 800f19e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	685a      	ldr	r2, [r3, #4]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	491f      	ldr	r1, [pc, #124]	@ (800f228 <HAL_I2C_Init+0x128>)
 800f1ac:	430a      	orrs	r2, r1
 800f1ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	68da      	ldr	r2, [r3, #12]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	491a      	ldr	r1, [pc, #104]	@ (800f224 <HAL_I2C_Init+0x124>)
 800f1bc:	400a      	ands	r2, r1
 800f1be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	691a      	ldr	r2, [r3, #16]
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	431a      	orrs	r2, r3
 800f1ca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	699b      	ldr	r3, [r3, #24]
 800f1d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	430a      	orrs	r2, r1
 800f1d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	69d9      	ldr	r1, [r3, #28]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6a1a      	ldr	r2, [r3, #32]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	430a      	orrs	r2, r1
 800f1e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2101      	movs	r1, #1
 800f1f6:	430a      	orrs	r2, r1
 800f1f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2241      	movs	r2, #65	@ 0x41
 800f204:	2120      	movs	r1, #32
 800f206:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2242      	movs	r2, #66	@ 0x42
 800f212:	2100      	movs	r1, #0
 800f214:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f216:	2300      	movs	r3, #0
}
 800f218:	0018      	movs	r0, r3
 800f21a:	46bd      	mov	sp, r7
 800f21c:	b002      	add	sp, #8
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	f0ffffff 	.word	0xf0ffffff
 800f224:	ffff7fff 	.word	0xffff7fff
 800f228:	02008000 	.word	0x02008000

0800f22c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f22c:	b590      	push	{r4, r7, lr}
 800f22e:	b089      	sub	sp, #36	@ 0x24
 800f230:	af02      	add	r7, sp, #8
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	0008      	movs	r0, r1
 800f236:	607a      	str	r2, [r7, #4]
 800f238:	0019      	movs	r1, r3
 800f23a:	230a      	movs	r3, #10
 800f23c:	18fb      	adds	r3, r7, r3
 800f23e:	1c02      	adds	r2, r0, #0
 800f240:	801a      	strh	r2, [r3, #0]
 800f242:	2308      	movs	r3, #8
 800f244:	18fb      	adds	r3, r7, r3
 800f246:	1c0a      	adds	r2, r1, #0
 800f248:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2241      	movs	r2, #65	@ 0x41
 800f24e:	5c9b      	ldrb	r3, [r3, r2]
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b20      	cmp	r3, #32
 800f254:	d000      	beq.n	800f258 <HAL_I2C_Master_Transmit+0x2c>
 800f256:	e0e7      	b.n	800f428 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2240      	movs	r2, #64	@ 0x40
 800f25c:	5c9b      	ldrb	r3, [r3, r2]
 800f25e:	2b01      	cmp	r3, #1
 800f260:	d101      	bne.n	800f266 <HAL_I2C_Master_Transmit+0x3a>
 800f262:	2302      	movs	r3, #2
 800f264:	e0e1      	b.n	800f42a <HAL_I2C_Master_Transmit+0x1fe>
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2240      	movs	r2, #64	@ 0x40
 800f26a:	2101      	movs	r1, #1
 800f26c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f26e:	f7fe fc93 	bl	800db98 <HAL_GetTick>
 800f272:	0003      	movs	r3, r0
 800f274:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f276:	2380      	movs	r3, #128	@ 0x80
 800f278:	0219      	lsls	r1, r3, #8
 800f27a:	68f8      	ldr	r0, [r7, #12]
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	9300      	str	r3, [sp, #0]
 800f280:	2319      	movs	r3, #25
 800f282:	2201      	movs	r2, #1
 800f284:	f001 ff98 	bl	80111b8 <I2C_WaitOnFlagUntilTimeout>
 800f288:	1e03      	subs	r3, r0, #0
 800f28a:	d001      	beq.n	800f290 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	e0cc      	b.n	800f42a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2241      	movs	r2, #65	@ 0x41
 800f294:	2121      	movs	r1, #33	@ 0x21
 800f296:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2242      	movs	r2, #66	@ 0x42
 800f29c:	2110      	movs	r1, #16
 800f29e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	687a      	ldr	r2, [r7, #4]
 800f2aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2208      	movs	r2, #8
 800f2b0:	18ba      	adds	r2, r7, r2
 800f2b2:	8812      	ldrh	r2, [r2, #0]
 800f2b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	2bff      	cmp	r3, #255	@ 0xff
 800f2c4:	d911      	bls.n	800f2ea <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	22ff      	movs	r2, #255	@ 0xff
 800f2ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	2380      	movs	r3, #128	@ 0x80
 800f2d4:	045c      	lsls	r4, r3, #17
 800f2d6:	230a      	movs	r3, #10
 800f2d8:	18fb      	adds	r3, r7, r3
 800f2da:	8819      	ldrh	r1, [r3, #0]
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	4b55      	ldr	r3, [pc, #340]	@ (800f434 <HAL_I2C_Master_Transmit+0x208>)
 800f2e0:	9300      	str	r3, [sp, #0]
 800f2e2:	0023      	movs	r3, r4
 800f2e4:	f002 f9ba 	bl	801165c <I2C_TransferConfig>
 800f2e8:	e075      	b.n	800f3d6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f2ee:	b29a      	uxth	r2, r3
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	2380      	movs	r3, #128	@ 0x80
 800f2fc:	049c      	lsls	r4, r3, #18
 800f2fe:	230a      	movs	r3, #10
 800f300:	18fb      	adds	r3, r7, r3
 800f302:	8819      	ldrh	r1, [r3, #0]
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	4b4b      	ldr	r3, [pc, #300]	@ (800f434 <HAL_I2C_Master_Transmit+0x208>)
 800f308:	9300      	str	r3, [sp, #0]
 800f30a:	0023      	movs	r3, r4
 800f30c:	f002 f9a6 	bl	801165c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800f310:	e061      	b.n	800f3d6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	0018      	movs	r0, r3
 800f31a:	f001 ff9b 	bl	8011254 <I2C_WaitOnTXISFlagUntilTimeout>
 800f31e:	1e03      	subs	r3, r0, #0
 800f320:	d001      	beq.n	800f326 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800f322:	2301      	movs	r3, #1
 800f324:	e081      	b.n	800f42a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f32a:	781a      	ldrb	r2, [r3, #0]
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f336:	1c5a      	adds	r2, r3, #1
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f340:	b29b      	uxth	r3, r3
 800f342:	3b01      	subs	r3, #1
 800f344:	b29a      	uxth	r2, r3
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f34e:	3b01      	subs	r3, #1
 800f350:	b29a      	uxth	r2, r3
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d03a      	beq.n	800f3d6 <HAL_I2C_Master_Transmit+0x1aa>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f364:	2b00      	cmp	r3, #0
 800f366:	d136      	bne.n	800f3d6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	0013      	movs	r3, r2
 800f372:	2200      	movs	r2, #0
 800f374:	2180      	movs	r1, #128	@ 0x80
 800f376:	f001 ff1f 	bl	80111b8 <I2C_WaitOnFlagUntilTimeout>
 800f37a:	1e03      	subs	r3, r0, #0
 800f37c:	d001      	beq.n	800f382 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800f37e:	2301      	movs	r3, #1
 800f380:	e053      	b.n	800f42a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f386:	b29b      	uxth	r3, r3
 800f388:	2bff      	cmp	r3, #255	@ 0xff
 800f38a:	d911      	bls.n	800f3b0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	22ff      	movs	r2, #255	@ 0xff
 800f390:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f396:	b2da      	uxtb	r2, r3
 800f398:	2380      	movs	r3, #128	@ 0x80
 800f39a:	045c      	lsls	r4, r3, #17
 800f39c:	230a      	movs	r3, #10
 800f39e:	18fb      	adds	r3, r7, r3
 800f3a0:	8819      	ldrh	r1, [r3, #0]
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9300      	str	r3, [sp, #0]
 800f3a8:	0023      	movs	r3, r4
 800f3aa:	f002 f957 	bl	801165c <I2C_TransferConfig>
 800f3ae:	e012      	b.n	800f3d6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f3be:	b2da      	uxtb	r2, r3
 800f3c0:	2380      	movs	r3, #128	@ 0x80
 800f3c2:	049c      	lsls	r4, r3, #18
 800f3c4:	230a      	movs	r3, #10
 800f3c6:	18fb      	adds	r3, r7, r3
 800f3c8:	8819      	ldrh	r1, [r3, #0]
 800f3ca:	68f8      	ldr	r0, [r7, #12]
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	9300      	str	r3, [sp, #0]
 800f3d0:	0023      	movs	r3, r4
 800f3d2:	f002 f943 	bl	801165c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d198      	bne.n	800f312 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f3e0:	697a      	ldr	r2, [r7, #20]
 800f3e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	0018      	movs	r0, r3
 800f3e8:	f001 ff7a 	bl	80112e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f3ec:	1e03      	subs	r3, r0, #0
 800f3ee:	d001      	beq.n	800f3f4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e01a      	b.n	800f42a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2220      	movs	r2, #32
 800f3fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	685a      	ldr	r2, [r3, #4]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	490c      	ldr	r1, [pc, #48]	@ (800f438 <HAL_I2C_Master_Transmit+0x20c>)
 800f408:	400a      	ands	r2, r1
 800f40a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2241      	movs	r2, #65	@ 0x41
 800f410:	2120      	movs	r1, #32
 800f412:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2242      	movs	r2, #66	@ 0x42
 800f418:	2100      	movs	r1, #0
 800f41a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2240      	movs	r2, #64	@ 0x40
 800f420:	2100      	movs	r1, #0
 800f422:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f424:	2300      	movs	r3, #0
 800f426:	e000      	b.n	800f42a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800f428:	2302      	movs	r3, #2
  }
}
 800f42a:	0018      	movs	r0, r3
 800f42c:	46bd      	mov	sp, r7
 800f42e:	b007      	add	sp, #28
 800f430:	bd90      	pop	{r4, r7, pc}
 800f432:	46c0      	nop			@ (mov r8, r8)
 800f434:	80002000 	.word	0x80002000
 800f438:	fe00e800 	.word	0xfe00e800

0800f43c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800f43c:	b590      	push	{r4, r7, lr}
 800f43e:	b089      	sub	sp, #36	@ 0x24
 800f440:	af02      	add	r7, sp, #8
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	0008      	movs	r0, r1
 800f446:	607a      	str	r2, [r7, #4]
 800f448:	0019      	movs	r1, r3
 800f44a:	230a      	movs	r3, #10
 800f44c:	18fb      	adds	r3, r7, r3
 800f44e:	1c02      	adds	r2, r0, #0
 800f450:	801a      	strh	r2, [r3, #0]
 800f452:	2308      	movs	r3, #8
 800f454:	18fb      	adds	r3, r7, r3
 800f456:	1c0a      	adds	r2, r1, #0
 800f458:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2241      	movs	r2, #65	@ 0x41
 800f45e:	5c9b      	ldrb	r3, [r3, r2]
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b20      	cmp	r3, #32
 800f464:	d000      	beq.n	800f468 <HAL_I2C_Master_Receive+0x2c>
 800f466:	e0e8      	b.n	800f63a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	2240      	movs	r2, #64	@ 0x40
 800f46c:	5c9b      	ldrb	r3, [r3, r2]
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d101      	bne.n	800f476 <HAL_I2C_Master_Receive+0x3a>
 800f472:	2302      	movs	r3, #2
 800f474:	e0e2      	b.n	800f63c <HAL_I2C_Master_Receive+0x200>
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2240      	movs	r2, #64	@ 0x40
 800f47a:	2101      	movs	r1, #1
 800f47c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800f47e:	f7fe fb8b 	bl	800db98 <HAL_GetTick>
 800f482:	0003      	movs	r3, r0
 800f484:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800f486:	2380      	movs	r3, #128	@ 0x80
 800f488:	0219      	lsls	r1, r3, #8
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	9300      	str	r3, [sp, #0]
 800f490:	2319      	movs	r3, #25
 800f492:	2201      	movs	r2, #1
 800f494:	f001 fe90 	bl	80111b8 <I2C_WaitOnFlagUntilTimeout>
 800f498:	1e03      	subs	r3, r0, #0
 800f49a:	d001      	beq.n	800f4a0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800f49c:	2301      	movs	r3, #1
 800f49e:	e0cd      	b.n	800f63c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2241      	movs	r2, #65	@ 0x41
 800f4a4:	2122      	movs	r1, #34	@ 0x22
 800f4a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2242      	movs	r2, #66	@ 0x42
 800f4ac:	2110      	movs	r1, #16
 800f4ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2208      	movs	r2, #8
 800f4c0:	18ba      	adds	r2, r7, r2
 800f4c2:	8812      	ldrh	r2, [r2, #0]
 800f4c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	2bff      	cmp	r3, #255	@ 0xff
 800f4d4:	d911      	bls.n	800f4fa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	22ff      	movs	r2, #255	@ 0xff
 800f4da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4e0:	b2da      	uxtb	r2, r3
 800f4e2:	2380      	movs	r3, #128	@ 0x80
 800f4e4:	045c      	lsls	r4, r3, #17
 800f4e6:	230a      	movs	r3, #10
 800f4e8:	18fb      	adds	r3, r7, r3
 800f4ea:	8819      	ldrh	r1, [r3, #0]
 800f4ec:	68f8      	ldr	r0, [r7, #12]
 800f4ee:	4b55      	ldr	r3, [pc, #340]	@ (800f644 <HAL_I2C_Master_Receive+0x208>)
 800f4f0:	9300      	str	r3, [sp, #0]
 800f4f2:	0023      	movs	r3, r4
 800f4f4:	f002 f8b2 	bl	801165c <I2C_TransferConfig>
 800f4f8:	e076      	b.n	800f5e8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f508:	b2da      	uxtb	r2, r3
 800f50a:	2380      	movs	r3, #128	@ 0x80
 800f50c:	049c      	lsls	r4, r3, #18
 800f50e:	230a      	movs	r3, #10
 800f510:	18fb      	adds	r3, r7, r3
 800f512:	8819      	ldrh	r1, [r3, #0]
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	4b4b      	ldr	r3, [pc, #300]	@ (800f644 <HAL_I2C_Master_Receive+0x208>)
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	0023      	movs	r3, r4
 800f51c:	f002 f89e 	bl	801165c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800f520:	e062      	b.n	800f5e8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f522:	697a      	ldr	r2, [r7, #20]
 800f524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	0018      	movs	r0, r3
 800f52a:	f001 ff1d 	bl	8011368 <I2C_WaitOnRXNEFlagUntilTimeout>
 800f52e:	1e03      	subs	r3, r0, #0
 800f530:	d001      	beq.n	800f536 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800f532:	2301      	movs	r3, #1
 800f534:	e082      	b.n	800f63c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f540:	b2d2      	uxtb	r2, r2
 800f542:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f548:	1c5a      	adds	r2, r3, #1
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f552:	3b01      	subs	r3, #1
 800f554:	b29a      	uxth	r2, r3
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f55e:	b29b      	uxth	r3, r3
 800f560:	3b01      	subs	r3, #1
 800f562:	b29a      	uxth	r2, r3
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d03a      	beq.n	800f5e8 <HAL_I2C_Master_Receive+0x1ac>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f576:	2b00      	cmp	r3, #0
 800f578:	d136      	bne.n	800f5e8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800f57a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	9300      	str	r3, [sp, #0]
 800f582:	0013      	movs	r3, r2
 800f584:	2200      	movs	r2, #0
 800f586:	2180      	movs	r1, #128	@ 0x80
 800f588:	f001 fe16 	bl	80111b8 <I2C_WaitOnFlagUntilTimeout>
 800f58c:	1e03      	subs	r3, r0, #0
 800f58e:	d001      	beq.n	800f594 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800f590:	2301      	movs	r3, #1
 800f592:	e053      	b.n	800f63c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f598:	b29b      	uxth	r3, r3
 800f59a:	2bff      	cmp	r3, #255	@ 0xff
 800f59c:	d911      	bls.n	800f5c2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	22ff      	movs	r2, #255	@ 0xff
 800f5a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5a8:	b2da      	uxtb	r2, r3
 800f5aa:	2380      	movs	r3, #128	@ 0x80
 800f5ac:	045c      	lsls	r4, r3, #17
 800f5ae:	230a      	movs	r3, #10
 800f5b0:	18fb      	adds	r3, r7, r3
 800f5b2:	8819      	ldrh	r1, [r3, #0]
 800f5b4:	68f8      	ldr	r0, [r7, #12]
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	0023      	movs	r3, r4
 800f5bc:	f002 f84e 	bl	801165c <I2C_TransferConfig>
 800f5c0:	e012      	b.n	800f5e8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f5d0:	b2da      	uxtb	r2, r3
 800f5d2:	2380      	movs	r3, #128	@ 0x80
 800f5d4:	049c      	lsls	r4, r3, #18
 800f5d6:	230a      	movs	r3, #10
 800f5d8:	18fb      	adds	r3, r7, r3
 800f5da:	8819      	ldrh	r1, [r3, #0]
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	2300      	movs	r3, #0
 800f5e0:	9300      	str	r3, [sp, #0]
 800f5e2:	0023      	movs	r3, r4
 800f5e4:	f002 f83a 	bl	801165c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d197      	bne.n	800f522 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f5f2:	697a      	ldr	r2, [r7, #20]
 800f5f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	0018      	movs	r0, r3
 800f5fa:	f001 fe71 	bl	80112e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800f5fe:	1e03      	subs	r3, r0, #0
 800f600:	d001      	beq.n	800f606 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800f602:	2301      	movs	r3, #1
 800f604:	e01a      	b.n	800f63c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	2220      	movs	r2, #32
 800f60c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	685a      	ldr	r2, [r3, #4]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	490b      	ldr	r1, [pc, #44]	@ (800f648 <HAL_I2C_Master_Receive+0x20c>)
 800f61a:	400a      	ands	r2, r1
 800f61c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2241      	movs	r2, #65	@ 0x41
 800f622:	2120      	movs	r1, #32
 800f624:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2242      	movs	r2, #66	@ 0x42
 800f62a:	2100      	movs	r1, #0
 800f62c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2240      	movs	r2, #64	@ 0x40
 800f632:	2100      	movs	r1, #0
 800f634:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f636:	2300      	movs	r3, #0
 800f638:	e000      	b.n	800f63c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800f63a:	2302      	movs	r3, #2
  }
}
 800f63c:	0018      	movs	r0, r3
 800f63e:	46bd      	mov	sp, r7
 800f640:	b007      	add	sp, #28
 800f642:	bd90      	pop	{r4, r7, pc}
 800f644:	80002400 	.word	0x80002400
 800f648:	fe00e800 	.word	0xfe00e800

0800f64c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800f64c:	b5b0      	push	{r4, r5, r7, lr}
 800f64e:	b088      	sub	sp, #32
 800f650:	af02      	add	r7, sp, #8
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	0008      	movs	r0, r1
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	0019      	movs	r1, r3
 800f65a:	230a      	movs	r3, #10
 800f65c:	18fb      	adds	r3, r7, r3
 800f65e:	1c02      	adds	r2, r0, #0
 800f660:	801a      	strh	r2, [r3, #0]
 800f662:	2308      	movs	r3, #8
 800f664:	18fb      	adds	r3, r7, r3
 800f666:	1c0a      	adds	r2, r1, #0
 800f668:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2241      	movs	r2, #65	@ 0x41
 800f66e:	5c9b      	ldrb	r3, [r3, r2]
 800f670:	b2db      	uxtb	r3, r3
 800f672:	2b20      	cmp	r3, #32
 800f674:	d000      	beq.n	800f678 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800f676:	e0dd      	b.n	800f834 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	699a      	ldr	r2, [r3, #24]
 800f67e:	2380      	movs	r3, #128	@ 0x80
 800f680:	021b      	lsls	r3, r3, #8
 800f682:	401a      	ands	r2, r3
 800f684:	2380      	movs	r3, #128	@ 0x80
 800f686:	021b      	lsls	r3, r3, #8
 800f688:	429a      	cmp	r2, r3
 800f68a:	d101      	bne.n	800f690 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800f68c:	2302      	movs	r3, #2
 800f68e:	e0d2      	b.n	800f836 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2240      	movs	r2, #64	@ 0x40
 800f694:	5c9b      	ldrb	r3, [r3, r2]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d101      	bne.n	800f69e <HAL_I2C_Master_Transmit_DMA+0x52>
 800f69a:	2302      	movs	r3, #2
 800f69c:	e0cb      	b.n	800f836 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2240      	movs	r2, #64	@ 0x40
 800f6a2:	2101      	movs	r1, #1
 800f6a4:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2241      	movs	r2, #65	@ 0x41
 800f6aa:	2121      	movs	r1, #33	@ 0x21
 800f6ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2242      	movs	r2, #66	@ 0x42
 800f6b2:	2110      	movs	r1, #16
 800f6b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	687a      	ldr	r2, [r7, #4]
 800f6c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2208      	movs	r2, #8
 800f6c6:	18ba      	adds	r2, r7, r2
 800f6c8:	8812      	ldrh	r2, [r2, #0]
 800f6ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	4a5c      	ldr	r2, [pc, #368]	@ (800f840 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800f6d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	4a5b      	ldr	r2, [pc, #364]	@ (800f844 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800f6d6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	2bff      	cmp	r3, #255	@ 0xff
 800f6e0:	d906      	bls.n	800f6f0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	22ff      	movs	r2, #255	@ 0xff
 800f6e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f6e8:	2380      	movs	r3, #128	@ 0x80
 800f6ea:	045b      	lsls	r3, r3, #17
 800f6ec:	617b      	str	r3, [r7, #20]
 800f6ee:	e007      	b.n	800f700 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f6f4:	b29a      	uxth	r2, r3
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f6fa:	2380      	movs	r3, #128	@ 0x80
 800f6fc:	049b      	lsls	r3, r3, #18
 800f6fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f704:	2b00      	cmp	r3, #0
 800f706:	d100      	bne.n	800f70a <HAL_I2C_Master_Transmit_DMA+0xbe>
 800f708:	e078      	b.n	800f7fc <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d023      	beq.n	800f75a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f716:	4a4c      	ldr	r2, [pc, #304]	@ (800f848 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800f718:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f71e:	4a4b      	ldr	r2, [pc, #300]	@ (800f84c <HAL_I2C_Master_Transmit_DMA+0x200>)
 800f720:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f726:	2200      	movs	r2, #0
 800f728:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f72e:	2200      	movs	r2, #0
 800f730:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f736:	6879      	ldr	r1, [r7, #4]
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	3328      	adds	r3, #40	@ 0x28
 800f73e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800f744:	2513      	movs	r5, #19
 800f746:	197c      	adds	r4, r7, r5
 800f748:	f7fe ff62 	bl	800e610 <HAL_DMA_Start_IT>
 800f74c:	0003      	movs	r3, r0
 800f74e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f750:	197b      	adds	r3, r7, r5
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d13d      	bne.n	800f7d4 <HAL_I2C_Master_Transmit_DMA+0x188>
 800f758:	e013      	b.n	800f782 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	2241      	movs	r2, #65	@ 0x41
 800f75e:	2120      	movs	r1, #32
 800f760:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2242      	movs	r2, #66	@ 0x42
 800f766:	2100      	movs	r1, #0
 800f768:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f76e:	2280      	movs	r2, #128	@ 0x80
 800f770:	431a      	orrs	r2, r3
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2240      	movs	r2, #64	@ 0x40
 800f77a:	2100      	movs	r1, #0
 800f77c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f77e:	2301      	movs	r3, #1
 800f780:	e059      	b.n	800f836 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f786:	b2da      	uxtb	r2, r3
 800f788:	697c      	ldr	r4, [r7, #20]
 800f78a:	230a      	movs	r3, #10
 800f78c:	18fb      	adds	r3, r7, r3
 800f78e:	8819      	ldrh	r1, [r3, #0]
 800f790:	68f8      	ldr	r0, [r7, #12]
 800f792:	4b2f      	ldr	r3, [pc, #188]	@ (800f850 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f794:	9300      	str	r3, [sp, #0]
 800f796:	0023      	movs	r3, r4
 800f798:	f001 ff60 	bl	801165c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2240      	movs	r2, #64	@ 0x40
 800f7b2:	2100      	movs	r1, #0
 800f7b4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2110      	movs	r1, #16
 800f7ba:	0018      	movs	r0, r3
 800f7bc:	f001 ff88 	bl	80116d0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	2180      	movs	r1, #128	@ 0x80
 800f7cc:	01c9      	lsls	r1, r1, #7
 800f7ce:	430a      	orrs	r2, r1
 800f7d0:	601a      	str	r2, [r3, #0]
 800f7d2:	e02d      	b.n	800f830 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2241      	movs	r2, #65	@ 0x41
 800f7d8:	2120      	movs	r1, #32
 800f7da:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2242      	movs	r2, #66	@ 0x42
 800f7e0:	2100      	movs	r1, #0
 800f7e2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7e8:	2210      	movs	r2, #16
 800f7ea:	431a      	orrs	r2, r3
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2240      	movs	r2, #64	@ 0x40
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e01c      	b.n	800f836 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	4a15      	ldr	r2, [pc, #84]	@ (800f854 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800f800:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f806:	b2da      	uxtb	r2, r3
 800f808:	2380      	movs	r3, #128	@ 0x80
 800f80a:	049c      	lsls	r4, r3, #18
 800f80c:	230a      	movs	r3, #10
 800f80e:	18fb      	adds	r3, r7, r3
 800f810:	8819      	ldrh	r1, [r3, #0]
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	4b0e      	ldr	r3, [pc, #56]	@ (800f850 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	0023      	movs	r3, r4
 800f81a:	f001 ff1f 	bl	801165c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2240      	movs	r2, #64	@ 0x40
 800f822:	2100      	movs	r1, #0
 800f824:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2101      	movs	r1, #1
 800f82a:	0018      	movs	r0, r3
 800f82c:	f001 ff50 	bl	80116d0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800f830:	2300      	movs	r3, #0
 800f832:	e000      	b.n	800f836 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f834:	2302      	movs	r3, #2
  }
}
 800f836:	0018      	movs	r0, r3
 800f838:	46bd      	mov	sp, r7
 800f83a:	b006      	add	sp, #24
 800f83c:	bdb0      	pop	{r4, r5, r7, pc}
 800f83e:	46c0      	nop			@ (mov r8, r8)
 800f840:	ffff0000 	.word	0xffff0000
 800f844:	08010051 	.word	0x08010051
 800f848:	08011009 	.word	0x08011009
 800f84c:	08011149 	.word	0x08011149
 800f850:	80002000 	.word	0x80002000
 800f854:	0800fbfd 	.word	0x0800fbfd

0800f858 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800f858:	b5b0      	push	{r4, r5, r7, lr}
 800f85a:	b088      	sub	sp, #32
 800f85c:	af02      	add	r7, sp, #8
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	0008      	movs	r0, r1
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	0019      	movs	r1, r3
 800f866:	230a      	movs	r3, #10
 800f868:	18fb      	adds	r3, r7, r3
 800f86a:	1c02      	adds	r2, r0, #0
 800f86c:	801a      	strh	r2, [r3, #0]
 800f86e:	2308      	movs	r3, #8
 800f870:	18fb      	adds	r3, r7, r3
 800f872:	1c0a      	adds	r2, r1, #0
 800f874:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2241      	movs	r2, #65	@ 0x41
 800f87a:	5c9b      	ldrb	r3, [r3, r2]
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	2b20      	cmp	r3, #32
 800f880:	d000      	beq.n	800f884 <HAL_I2C_Master_Receive_DMA+0x2c>
 800f882:	e0dd      	b.n	800fa40 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	699a      	ldr	r2, [r3, #24]
 800f88a:	2380      	movs	r3, #128	@ 0x80
 800f88c:	021b      	lsls	r3, r3, #8
 800f88e:	401a      	ands	r2, r3
 800f890:	2380      	movs	r3, #128	@ 0x80
 800f892:	021b      	lsls	r3, r3, #8
 800f894:	429a      	cmp	r2, r3
 800f896:	d101      	bne.n	800f89c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800f898:	2302      	movs	r3, #2
 800f89a:	e0d2      	b.n	800fa42 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2240      	movs	r2, #64	@ 0x40
 800f8a0:	5c9b      	ldrb	r3, [r3, r2]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d101      	bne.n	800f8aa <HAL_I2C_Master_Receive_DMA+0x52>
 800f8a6:	2302      	movs	r3, #2
 800f8a8:	e0cb      	b.n	800fa42 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2240      	movs	r2, #64	@ 0x40
 800f8ae:	2101      	movs	r1, #1
 800f8b0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2241      	movs	r2, #65	@ 0x41
 800f8b6:	2122      	movs	r1, #34	@ 0x22
 800f8b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2242      	movs	r2, #66	@ 0x42
 800f8be:	2110      	movs	r1, #16
 800f8c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2208      	movs	r2, #8
 800f8d2:	18ba      	adds	r2, r7, r2
 800f8d4:	8812      	ldrh	r2, [r2, #0]
 800f8d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	4a5c      	ldr	r2, [pc, #368]	@ (800fa4c <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800f8dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	4a5b      	ldr	r2, [pc, #364]	@ (800fa50 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800f8e2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f8e8:	b29b      	uxth	r3, r3
 800f8ea:	2bff      	cmp	r3, #255	@ 0xff
 800f8ec:	d906      	bls.n	800f8fc <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	22ff      	movs	r2, #255	@ 0xff
 800f8f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800f8f4:	2380      	movs	r3, #128	@ 0x80
 800f8f6:	045b      	lsls	r3, r3, #17
 800f8f8:	617b      	str	r3, [r7, #20]
 800f8fa:	e007      	b.n	800f90c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f900:	b29a      	uxth	r2, r3
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800f906:	2380      	movs	r3, #128	@ 0x80
 800f908:	049b      	lsls	r3, r3, #18
 800f90a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f910:	2b00      	cmp	r3, #0
 800f912:	d100      	bne.n	800f916 <HAL_I2C_Master_Receive_DMA+0xbe>
 800f914:	e078      	b.n	800fa08 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d023      	beq.n	800f966 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f922:	4a4c      	ldr	r2, [pc, #304]	@ (800fa54 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800f924:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f92a:	4a4b      	ldr	r2, [pc, #300]	@ (800fa58 <HAL_I2C_Master_Receive_DMA+0x200>)
 800f92c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f932:	2200      	movs	r2, #0
 800f934:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f93a:	2200      	movs	r2, #0
 800f93c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	3324      	adds	r3, #36	@ 0x24
 800f948:	0019      	movs	r1, r3
 800f94a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800f950:	2513      	movs	r5, #19
 800f952:	197c      	adds	r4, r7, r5
 800f954:	f7fe fe5c 	bl	800e610 <HAL_DMA_Start_IT>
 800f958:	0003      	movs	r3, r0
 800f95a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800f95c:	197b      	adds	r3, r7, r5
 800f95e:	781b      	ldrb	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d13d      	bne.n	800f9e0 <HAL_I2C_Master_Receive_DMA+0x188>
 800f964:	e013      	b.n	800f98e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2241      	movs	r2, #65	@ 0x41
 800f96a:	2120      	movs	r1, #32
 800f96c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2242      	movs	r2, #66	@ 0x42
 800f972:	2100      	movs	r1, #0
 800f974:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f97a:	2280      	movs	r2, #128	@ 0x80
 800f97c:	431a      	orrs	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2240      	movs	r2, #64	@ 0x40
 800f986:	2100      	movs	r1, #0
 800f988:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	e059      	b.n	800fa42 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f992:	b2da      	uxtb	r2, r3
 800f994:	697c      	ldr	r4, [r7, #20]
 800f996:	230a      	movs	r3, #10
 800f998:	18fb      	adds	r3, r7, r3
 800f99a:	8819      	ldrh	r1, [r3, #0]
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	4b2f      	ldr	r3, [pc, #188]	@ (800fa5c <HAL_I2C_Master_Receive_DMA+0x204>)
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	0023      	movs	r3, r4
 800f9a4:	f001 fe5a 	bl	801165c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f9b2:	1ad3      	subs	r3, r2, r3
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	2240      	movs	r2, #64	@ 0x40
 800f9be:	2100      	movs	r1, #0
 800f9c0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2110      	movs	r1, #16
 800f9c6:	0018      	movs	r0, r3
 800f9c8:	f001 fe82 	bl	80116d0 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2180      	movs	r1, #128	@ 0x80
 800f9d8:	0209      	lsls	r1, r1, #8
 800f9da:	430a      	orrs	r2, r1
 800f9dc:	601a      	str	r2, [r3, #0]
 800f9de:	e02d      	b.n	800fa3c <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2241      	movs	r2, #65	@ 0x41
 800f9e4:	2120      	movs	r1, #32
 800f9e6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2242      	movs	r2, #66	@ 0x42
 800f9ec:	2100      	movs	r1, #0
 800f9ee:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f9f4:	2210      	movs	r2, #16
 800f9f6:	431a      	orrs	r2, r3
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	2240      	movs	r2, #64	@ 0x40
 800fa00:	2100      	movs	r1, #0
 800fa02:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	e01c      	b.n	800fa42 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	4a15      	ldr	r2, [pc, #84]	@ (800fa60 <HAL_I2C_Master_Receive_DMA+0x208>)
 800fa0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fa12:	b2da      	uxtb	r2, r3
 800fa14:	2380      	movs	r3, #128	@ 0x80
 800fa16:	049c      	lsls	r4, r3, #18
 800fa18:	230a      	movs	r3, #10
 800fa1a:	18fb      	adds	r3, r7, r3
 800fa1c:	8819      	ldrh	r1, [r3, #0]
 800fa1e:	68f8      	ldr	r0, [r7, #12]
 800fa20:	4b0e      	ldr	r3, [pc, #56]	@ (800fa5c <HAL_I2C_Master_Receive_DMA+0x204>)
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	0023      	movs	r3, r4
 800fa26:	f001 fe19 	bl	801165c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2240      	movs	r2, #64	@ 0x40
 800fa2e:	2100      	movs	r1, #0
 800fa30:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2101      	movs	r1, #1
 800fa36:	0018      	movs	r0, r3
 800fa38:	f001 fe4a 	bl	80116d0 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e000      	b.n	800fa42 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800fa40:	2302      	movs	r3, #2
  }
}
 800fa42:	0018      	movs	r0, r3
 800fa44:	46bd      	mov	sp, r7
 800fa46:	b006      	add	sp, #24
 800fa48:	bdb0      	pop	{r4, r5, r7, pc}
 800fa4a:	46c0      	nop			@ (mov r8, r8)
 800fa4c:	ffff0000 	.word	0xffff0000
 800fa50:	08010051 	.word	0x08010051
 800fa54:	080110a9 	.word	0x080110a9
 800fa58:	08011149 	.word	0x08011149
 800fa5c:	80002400 	.word	0x80002400
 800fa60:	0800fbfd 	.word	0x0800fbfd

0800fa64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	699b      	ldr	r3, [r3, #24]
 800fa72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d005      	beq.n	800fa90 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fa88:	68ba      	ldr	r2, [r7, #8]
 800fa8a:	68f9      	ldr	r1, [r7, #12]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	4798      	blx	r3
  }
}
 800fa90:	46c0      	nop			@ (mov r8, r8)
 800fa92:	46bd      	mov	sp, r7
 800fa94:	b004      	add	sp, #16
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	699b      	ldr	r3, [r3, #24]
 800faa6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fab0:	697a      	ldr	r2, [r7, #20]
 800fab2:	2380      	movs	r3, #128	@ 0x80
 800fab4:	005b      	lsls	r3, r3, #1
 800fab6:	4013      	ands	r3, r2
 800fab8:	d00e      	beq.n	800fad8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	2280      	movs	r2, #128	@ 0x80
 800fabe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800fac0:	d00a      	beq.n	800fad8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fac6:	2201      	movs	r2, #1
 800fac8:	431a      	orrs	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	2280      	movs	r2, #128	@ 0x80
 800fad4:	0052      	lsls	r2, r2, #1
 800fad6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fad8:	697a      	ldr	r2, [r7, #20]
 800fada:	2380      	movs	r3, #128	@ 0x80
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	4013      	ands	r3, r2
 800fae0:	d00e      	beq.n	800fb00 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	2280      	movs	r2, #128	@ 0x80
 800fae6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800fae8:	d00a      	beq.n	800fb00 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800faee:	2208      	movs	r2, #8
 800faf0:	431a      	orrs	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2280      	movs	r2, #128	@ 0x80
 800fafc:	00d2      	lsls	r2, r2, #3
 800fafe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fb00:	697a      	ldr	r2, [r7, #20]
 800fb02:	2380      	movs	r3, #128	@ 0x80
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	4013      	ands	r3, r2
 800fb08:	d00e      	beq.n	800fb28 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	2280      	movs	r2, #128	@ 0x80
 800fb0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800fb10:	d00a      	beq.n	800fb28 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb16:	2202      	movs	r2, #2
 800fb18:	431a      	orrs	r2, r3
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2280      	movs	r2, #128	@ 0x80
 800fb24:	0092      	lsls	r2, r2, #2
 800fb26:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb2c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	220b      	movs	r2, #11
 800fb32:	4013      	ands	r3, r2
 800fb34:	d005      	beq.n	800fb42 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	0011      	movs	r1, r2
 800fb3c:	0018      	movs	r0, r3
 800fb3e:	f001 f915 	bl	8010d6c <I2C_ITError>
  }
}
 800fb42:	46c0      	nop			@ (mov r8, r8)
 800fb44:	46bd      	mov	sp, r7
 800fb46:	b006      	add	sp, #24
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b082      	sub	sp, #8
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800fb52:	46c0      	nop			@ (mov r8, r8)
 800fb54:	46bd      	mov	sp, r7
 800fb56:	b002      	add	sp, #8
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b082      	sub	sp, #8
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800fb62:	46c0      	nop			@ (mov r8, r8)
 800fb64:	46bd      	mov	sp, r7
 800fb66:	b002      	add	sp, #8
 800fb68:	bd80      	pop	{r7, pc}

0800fb6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fb6a:	b580      	push	{r7, lr}
 800fb6c:	b082      	sub	sp, #8
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800fb72:	46c0      	nop			@ (mov r8, r8)
 800fb74:	46bd      	mov	sp, r7
 800fb76:	b002      	add	sp, #8
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b082      	sub	sp, #8
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800fb82:	46c0      	nop			@ (mov r8, r8)
 800fb84:	46bd      	mov	sp, r7
 800fb86:	b002      	add	sp, #8
 800fb88:	bd80      	pop	{r7, pc}

0800fb8a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800fb8a:	b580      	push	{r7, lr}
 800fb8c:	b082      	sub	sp, #8
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	0008      	movs	r0, r1
 800fb94:	0011      	movs	r1, r2
 800fb96:	1cfb      	adds	r3, r7, #3
 800fb98:	1c02      	adds	r2, r0, #0
 800fb9a:	701a      	strb	r2, [r3, #0]
 800fb9c:	003b      	movs	r3, r7
 800fb9e:	1c0a      	adds	r2, r1, #0
 800fba0:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800fba2:	46c0      	nop			@ (mov r8, r8)
 800fba4:	46bd      	mov	sp, r7
 800fba6:	b002      	add	sp, #8
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fbaa:	b580      	push	{r7, lr}
 800fbac:	b082      	sub	sp, #8
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800fbb2:	46c0      	nop			@ (mov r8, r8)
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	b002      	add	sp, #8
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800fbc2:	46c0      	nop			@ (mov r8, r8)
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	b002      	add	sp, #8
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b082      	sub	sp, #8
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800fbd2:	46c0      	nop			@ (mov r8, r8)
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	b002      	add	sp, #8
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b082      	sub	sp, #8
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800fbe2:	46c0      	nop			@ (mov r8, r8)
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	b002      	add	sp, #8
 800fbe8:	bd80      	pop	{r7, pc}

0800fbea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fbea:	b580      	push	{r7, lr}
 800fbec:	b082      	sub	sp, #8
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800fbf2:	46c0      	nop			@ (mov r8, r8)
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	b002      	add	sp, #8
 800fbf8:	bd80      	pop	{r7, pc}
	...

0800fbfc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800fbfc:	b590      	push	{r4, r7, lr}
 800fbfe:	b089      	sub	sp, #36	@ 0x24
 800fc00:	af02      	add	r7, sp, #8
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2240      	movs	r2, #64	@ 0x40
 800fc10:	5c9b      	ldrb	r3, [r3, r2]
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d101      	bne.n	800fc1a <I2C_Master_ISR_IT+0x1e>
 800fc16:	2302      	movs	r3, #2
 800fc18:	e113      	b.n	800fe42 <I2C_Master_ISR_IT+0x246>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2240      	movs	r2, #64	@ 0x40
 800fc1e:	2101      	movs	r1, #1
 800fc20:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	2210      	movs	r2, #16
 800fc26:	4013      	ands	r3, r2
 800fc28:	d012      	beq.n	800fc50 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2210      	movs	r2, #16
 800fc2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fc30:	d00e      	beq.n	800fc50 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	2210      	movs	r2, #16
 800fc38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc3e:	2204      	movs	r2, #4
 800fc40:	431a      	orrs	r2, r3
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	0018      	movs	r0, r3
 800fc4a:	f001 f9ba 	bl	8010fc2 <I2C_Flush_TXDR>
 800fc4e:	e0e5      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	2204      	movs	r2, #4
 800fc54:	4013      	ands	r3, r2
 800fc56:	d021      	beq.n	800fc9c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2204      	movs	r2, #4
 800fc5c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800fc5e:	d01d      	beq.n	800fc9c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	2204      	movs	r2, #4
 800fc64:	4393      	bics	r3, r2
 800fc66:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc72:	b2d2      	uxtb	r2, r2
 800fc74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc7a:	1c5a      	adds	r2, r3, #1
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc84:	3b01      	subs	r3, #1
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	3b01      	subs	r3, #1
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fc9a:	e0bf      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	2202      	movs	r2, #2
 800fca0:	4013      	ands	r3, r2
 800fca2:	d01c      	beq.n	800fcde <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2202      	movs	r2, #2
 800fca8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800fcaa:	d018      	beq.n	800fcde <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcb0:	781a      	ldrb	r2, [r3, #0]
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcbc:	1c5a      	adds	r2, r3, #1
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcc6:	3b01      	subs	r3, #1
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fcdc:	e09e      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800fcde:	697b      	ldr	r3, [r7, #20]
 800fce0:	2280      	movs	r2, #128	@ 0x80
 800fce2:	4013      	ands	r3, r2
 800fce4:	d100      	bne.n	800fce8 <I2C_Master_ISR_IT+0xec>
 800fce6:	e069      	b.n	800fdbc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2240      	movs	r2, #64	@ 0x40
 800fcec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800fcee:	d065      	beq.n	800fdbc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d04a      	beq.n	800fd90 <I2C_Master_ISR_IT+0x194>
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d146      	bne.n	800fd90 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	2112      	movs	r1, #18
 800fd0c:	187b      	adds	r3, r7, r1
 800fd0e:	0592      	lsls	r2, r2, #22
 800fd10:	0d92      	lsrs	r2, r2, #22
 800fd12:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	2bff      	cmp	r3, #255	@ 0xff
 800fd1c:	d910      	bls.n	800fd40 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	22ff      	movs	r2, #255	@ 0xff
 800fd22:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd28:	b2da      	uxtb	r2, r3
 800fd2a:	2380      	movs	r3, #128	@ 0x80
 800fd2c:	045c      	lsls	r4, r3, #17
 800fd2e:	187b      	adds	r3, r7, r1
 800fd30:	8819      	ldrh	r1, [r3, #0]
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	2300      	movs	r3, #0
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	0023      	movs	r3, r4
 800fd3a:	f001 fc8f 	bl	801165c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd3e:	e03c      	b.n	800fdba <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd4e:	4a3f      	ldr	r2, [pc, #252]	@ (800fe4c <I2C_Master_ISR_IT+0x250>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d00e      	beq.n	800fd72 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd58:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800fd5e:	2312      	movs	r3, #18
 800fd60:	18fb      	adds	r3, r7, r3
 800fd62:	8819      	ldrh	r1, [r3, #0]
 800fd64:	68f8      	ldr	r0, [r7, #12]
 800fd66:	2300      	movs	r3, #0
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	0023      	movs	r3, r4
 800fd6c:	f001 fc76 	bl	801165c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd70:	e023      	b.n	800fdba <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	2380      	movs	r3, #128	@ 0x80
 800fd7a:	049c      	lsls	r4, r3, #18
 800fd7c:	2312      	movs	r3, #18
 800fd7e:	18fb      	adds	r3, r7, r3
 800fd80:	8819      	ldrh	r1, [r3, #0]
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	2300      	movs	r3, #0
 800fd86:	9300      	str	r3, [sp, #0]
 800fd88:	0023      	movs	r3, r4
 800fd8a:	f001 fc67 	bl	801165c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800fd8e:	e014      	b.n	800fdba <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	685a      	ldr	r2, [r3, #4]
 800fd96:	2380      	movs	r3, #128	@ 0x80
 800fd98:	049b      	lsls	r3, r3, #18
 800fd9a:	401a      	ands	r2, r3
 800fd9c:	2380      	movs	r3, #128	@ 0x80
 800fd9e:	049b      	lsls	r3, r3, #18
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d004      	beq.n	800fdae <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	0018      	movs	r0, r3
 800fda8:	f000 fcf4 	bl	8010794 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fdac:	e036      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2140      	movs	r1, #64	@ 0x40
 800fdb2:	0018      	movs	r0, r3
 800fdb4:	f000 ffda 	bl	8010d6c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800fdb8:	e030      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
 800fdba:	e02f      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	2240      	movs	r2, #64	@ 0x40
 800fdc0:	4013      	ands	r3, r2
 800fdc2:	d02b      	beq.n	800fe1c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2240      	movs	r2, #64	@ 0x40
 800fdc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800fdca:	d027      	beq.n	800fe1c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d11d      	bne.n	800fe12 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	2380      	movs	r3, #128	@ 0x80
 800fdde:	049b      	lsls	r3, r3, #18
 800fde0:	401a      	ands	r2, r3
 800fde2:	2380      	movs	r3, #128	@ 0x80
 800fde4:	049b      	lsls	r3, r3, #18
 800fde6:	429a      	cmp	r2, r3
 800fde8:	d018      	beq.n	800fe1c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdee:	4a17      	ldr	r2, [pc, #92]	@ (800fe4c <I2C_Master_ISR_IT+0x250>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d109      	bne.n	800fe08 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	685a      	ldr	r2, [r3, #4]
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2180      	movs	r1, #128	@ 0x80
 800fe00:	01c9      	lsls	r1, r1, #7
 800fe02:	430a      	orrs	r2, r1
 800fe04:	605a      	str	r2, [r3, #4]
 800fe06:	e009      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	0018      	movs	r0, r3
 800fe0c:	f000 fcc2 	bl	8010794 <I2C_ITMasterSeqCplt>
 800fe10:	e004      	b.n	800fe1c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2140      	movs	r1, #64	@ 0x40
 800fe16:	0018      	movs	r0, r3
 800fe18:	f000 ffa8 	bl	8010d6c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	2220      	movs	r2, #32
 800fe20:	4013      	ands	r3, r2
 800fe22:	d009      	beq.n	800fe38 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2220      	movs	r2, #32
 800fe28:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe2a:	d005      	beq.n	800fe38 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800fe2c:	697a      	ldr	r2, [r7, #20]
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	0011      	movs	r1, r2
 800fe32:	0018      	movs	r0, r3
 800fe34:	f000 fd54 	bl	80108e0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2240      	movs	r2, #64	@ 0x40
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fe40:	2300      	movs	r3, #0
}
 800fe42:	0018      	movs	r0, r3
 800fe44:	46bd      	mov	sp, r7
 800fe46:	b007      	add	sp, #28
 800fe48:	bd90      	pop	{r4, r7, pc}
 800fe4a:	46c0      	nop			@ (mov r8, r8)
 800fe4c:	ffff0000 	.word	0xffff0000

0800fe50 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b086      	sub	sp, #24
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe60:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2240      	movs	r2, #64	@ 0x40
 800fe6a:	5c9b      	ldrb	r3, [r3, r2]
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d101      	bne.n	800fe74 <I2C_Slave_ISR_IT+0x24>
 800fe70:	2302      	movs	r3, #2
 800fe72:	e0e6      	b.n	8010042 <I2C_Slave_ISR_IT+0x1f2>
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	2240      	movs	r2, #64	@ 0x40
 800fe78:	2101      	movs	r1, #1
 800fe7a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2220      	movs	r2, #32
 800fe80:	4013      	ands	r3, r2
 800fe82:	d009      	beq.n	800fe98 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2220      	movs	r2, #32
 800fe88:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800fe8a:	d005      	beq.n	800fe98 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800fe8c:	693a      	ldr	r2, [r7, #16]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	0011      	movs	r1, r2
 800fe92:	0018      	movs	r0, r3
 800fe94:	f000 fdf2 	bl	8010a7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fe98:	693b      	ldr	r3, [r7, #16]
 800fe9a:	2210      	movs	r2, #16
 800fe9c:	4013      	ands	r3, r2
 800fe9e:	d052      	beq.n	800ff46 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2210      	movs	r2, #16
 800fea4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800fea6:	d04e      	beq.n	800ff46 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800feac:	b29b      	uxth	r3, r3
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d12d      	bne.n	800ff0e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2241      	movs	r2, #65	@ 0x41
 800feb6:	5c9b      	ldrb	r3, [r3, r2]
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b28      	cmp	r3, #40	@ 0x28
 800febc:	d10b      	bne.n	800fed6 <I2C_Slave_ISR_IT+0x86>
 800febe:	697a      	ldr	r2, [r7, #20]
 800fec0:	2380      	movs	r3, #128	@ 0x80
 800fec2:	049b      	lsls	r3, r3, #18
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d106      	bne.n	800fed6 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800fec8:	693a      	ldr	r2, [r7, #16]
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	0011      	movs	r1, r2
 800fece:	0018      	movs	r0, r3
 800fed0:	f000 fef4 	bl	8010cbc <I2C_ITListenCplt>
 800fed4:	e036      	b.n	800ff44 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2241      	movs	r2, #65	@ 0x41
 800feda:	5c9b      	ldrb	r3, [r3, r2]
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	2b29      	cmp	r3, #41	@ 0x29
 800fee0:	d110      	bne.n	800ff04 <I2C_Slave_ISR_IT+0xb4>
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	4a59      	ldr	r2, [pc, #356]	@ (801004c <I2C_Slave_ISR_IT+0x1fc>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d00c      	beq.n	800ff04 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2210      	movs	r2, #16
 800fef0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	0018      	movs	r0, r3
 800fef6:	f001 f864 	bl	8010fc2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	0018      	movs	r0, r3
 800fefe:	f000 fc8b 	bl	8010818 <I2C_ITSlaveSeqCplt>
 800ff02:	e01f      	b.n	800ff44 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2210      	movs	r2, #16
 800ff0a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800ff0c:	e091      	b.n	8010032 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	2210      	movs	r2, #16
 800ff14:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff1a:	2204      	movs	r2, #4
 800ff1c:	431a      	orrs	r2, r3
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d005      	beq.n	800ff34 <I2C_Slave_ISR_IT+0xe4>
 800ff28:	697a      	ldr	r2, [r7, #20]
 800ff2a:	2380      	movs	r3, #128	@ 0x80
 800ff2c:	045b      	lsls	r3, r3, #17
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d000      	beq.n	800ff34 <I2C_Slave_ISR_IT+0xe4>
 800ff32:	e07e      	b.n	8010032 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	0011      	movs	r1, r2
 800ff3c:	0018      	movs	r0, r3
 800ff3e:	f000 ff15 	bl	8010d6c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800ff42:	e076      	b.n	8010032 <I2C_Slave_ISR_IT+0x1e2>
 800ff44:	e075      	b.n	8010032 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ff46:	693b      	ldr	r3, [r7, #16]
 800ff48:	2204      	movs	r2, #4
 800ff4a:	4013      	ands	r3, r2
 800ff4c:	d02f      	beq.n	800ffae <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2204      	movs	r2, #4
 800ff52:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ff54:	d02b      	beq.n	800ffae <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff5a:	b29b      	uxth	r3, r3
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d018      	beq.n	800ff92 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff6a:	b2d2      	uxtb	r2, r2
 800ff6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff72:	1c5a      	adds	r2, r3, #1
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	b29a      	uxth	r2, r3
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff88:	b29b      	uxth	r3, r3
 800ff8a:	3b01      	subs	r3, #1
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d14c      	bne.n	8010036 <I2C_Slave_ISR_IT+0x1e6>
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	4a2b      	ldr	r2, [pc, #172]	@ (801004c <I2C_Slave_ISR_IT+0x1fc>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d048      	beq.n	8010036 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	0018      	movs	r0, r3
 800ffa8:	f000 fc36 	bl	8010818 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ffac:	e043      	b.n	8010036 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	2208      	movs	r2, #8
 800ffb2:	4013      	ands	r3, r2
 800ffb4:	d00a      	beq.n	800ffcc <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2208      	movs	r2, #8
 800ffba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ffbc:	d006      	beq.n	800ffcc <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ffbe:	693a      	ldr	r2, [r7, #16]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	0011      	movs	r1, r2
 800ffc4:	0018      	movs	r0, r3
 800ffc6:	f000 fb41 	bl	801064c <I2C_ITAddrCplt>
 800ffca:	e035      	b.n	8010038 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	2202      	movs	r2, #2
 800ffd0:	4013      	ands	r3, r2
 800ffd2:	d031      	beq.n	8010038 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2202      	movs	r2, #2
 800ffd8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ffda:	d02d      	beq.n	8010038 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d018      	beq.n	8010018 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffea:	781a      	ldrb	r2, [r3, #0]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fff6:	1c5a      	adds	r2, r3, #1
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010000:	b29b      	uxth	r3, r3
 8010002:	3b01      	subs	r3, #1
 8010004:	b29a      	uxth	r2, r3
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801000e:	3b01      	subs	r3, #1
 8010010:	b29a      	uxth	r2, r3
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	851a      	strh	r2, [r3, #40]	@ 0x28
 8010016:	e00f      	b.n	8010038 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8010018:	697a      	ldr	r2, [r7, #20]
 801001a:	2380      	movs	r3, #128	@ 0x80
 801001c:	045b      	lsls	r3, r3, #17
 801001e:	429a      	cmp	r2, r3
 8010020:	d002      	beq.n	8010028 <I2C_Slave_ISR_IT+0x1d8>
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d107      	bne.n	8010038 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	0018      	movs	r0, r3
 801002c:	f000 fbf4 	bl	8010818 <I2C_ITSlaveSeqCplt>
 8010030:	e002      	b.n	8010038 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8010032:	46c0      	nop			@ (mov r8, r8)
 8010034:	e000      	b.n	8010038 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8010036:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2240      	movs	r2, #64	@ 0x40
 801003c:	2100      	movs	r1, #0
 801003e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010040:	2300      	movs	r3, #0
}
 8010042:	0018      	movs	r0, r3
 8010044:	46bd      	mov	sp, r7
 8010046:	b006      	add	sp, #24
 8010048:	bd80      	pop	{r7, pc}
 801004a:	46c0      	nop			@ (mov r8, r8)
 801004c:	ffff0000 	.word	0xffff0000

08010050 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8010050:	b590      	push	{r4, r7, lr}
 8010052:	b089      	sub	sp, #36	@ 0x24
 8010054:	af02      	add	r7, sp, #8
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2240      	movs	r2, #64	@ 0x40
 8010060:	5c9b      	ldrb	r3, [r3, r2]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d101      	bne.n	801006a <I2C_Master_ISR_DMA+0x1a>
 8010066:	2302      	movs	r3, #2
 8010068:	e0e7      	b.n	801023a <I2C_Master_ISR_DMA+0x1ea>
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2240      	movs	r2, #64	@ 0x40
 801006e:	2101      	movs	r1, #1
 8010070:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	2210      	movs	r2, #16
 8010076:	4013      	ands	r3, r2
 8010078:	d017      	beq.n	80100aa <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2210      	movs	r2, #16
 801007e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8010080:	d013      	beq.n	80100aa <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	2210      	movs	r2, #16
 8010088:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801008e:	2204      	movs	r2, #4
 8010090:	431a      	orrs	r2, r3
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2120      	movs	r1, #32
 801009a:	0018      	movs	r0, r3
 801009c:	f001 fb18 	bl	80116d0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	0018      	movs	r0, r3
 80100a4:	f000 ff8d 	bl	8010fc2 <I2C_Flush_TXDR>
 80100a8:	e0c2      	b.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	2280      	movs	r2, #128	@ 0x80
 80100ae:	4013      	ands	r3, r2
 80100b0:	d100      	bne.n	80100b4 <I2C_Master_ISR_DMA+0x64>
 80100b2:	e07c      	b.n	80101ae <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2240      	movs	r2, #64	@ 0x40
 80100b8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80100ba:	d100      	bne.n	80100be <I2C_Master_ISR_DMA+0x6e>
 80100bc:	e077      	b.n	80101ae <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2140      	movs	r1, #64	@ 0x40
 80100ca:	438a      	bics	r2, r1
 80100cc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100d2:	b29b      	uxth	r3, r3
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d055      	beq.n	8010184 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	b29a      	uxth	r2, r3
 80100e0:	2312      	movs	r3, #18
 80100e2:	18fb      	adds	r3, r7, r3
 80100e4:	0592      	lsls	r2, r2, #22
 80100e6:	0d92      	lsrs	r2, r2, #22
 80100e8:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	2bff      	cmp	r3, #255	@ 0xff
 80100f2:	d906      	bls.n	8010102 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	22ff      	movs	r2, #255	@ 0xff
 80100f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80100fa:	2380      	movs	r3, #128	@ 0x80
 80100fc:	045b      	lsls	r3, r3, #17
 80100fe:	617b      	str	r3, [r7, #20]
 8010100:	e010      	b.n	8010124 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010106:	b29a      	uxth	r2, r3
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010110:	4a4c      	ldr	r2, [pc, #304]	@ (8010244 <I2C_Master_ISR_DMA+0x1f4>)
 8010112:	4293      	cmp	r3, r2
 8010114:	d003      	beq.n	801011e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801011a:	617b      	str	r3, [r7, #20]
 801011c:	e002      	b.n	8010124 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 801011e:	2380      	movs	r3, #128	@ 0x80
 8010120:	049b      	lsls	r3, r3, #18
 8010122:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010128:	b2da      	uxtb	r2, r3
 801012a:	697c      	ldr	r4, [r7, #20]
 801012c:	2312      	movs	r3, #18
 801012e:	18fb      	adds	r3, r7, r3
 8010130:	8819      	ldrh	r1, [r3, #0]
 8010132:	68f8      	ldr	r0, [r7, #12]
 8010134:	2300      	movs	r3, #0
 8010136:	9300      	str	r3, [sp, #0]
 8010138:	0023      	movs	r3, r4
 801013a:	f001 fa8f 	bl	801165c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010142:	b29a      	uxth	r2, r3
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	b29a      	uxth	r2, r3
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2241      	movs	r2, #65	@ 0x41
 8010154:	5c9b      	ldrb	r3, [r3, r2]
 8010156:	b2db      	uxtb	r3, r3
 8010158:	2b22      	cmp	r3, #34	@ 0x22
 801015a:	d109      	bne.n	8010170 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	2180      	movs	r1, #128	@ 0x80
 8010168:	0209      	lsls	r1, r1, #8
 801016a:	430a      	orrs	r2, r1
 801016c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801016e:	e05f      	b.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2180      	movs	r1, #128	@ 0x80
 801017c:	01c9      	lsls	r1, r1, #7
 801017e:	430a      	orrs	r2, r1
 8010180:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010182:	e055      	b.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	685a      	ldr	r2, [r3, #4]
 801018a:	2380      	movs	r3, #128	@ 0x80
 801018c:	049b      	lsls	r3, r3, #18
 801018e:	401a      	ands	r2, r3
 8010190:	2380      	movs	r3, #128	@ 0x80
 8010192:	049b      	lsls	r3, r3, #18
 8010194:	429a      	cmp	r2, r3
 8010196:	d004      	beq.n	80101a2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	0018      	movs	r0, r3
 801019c:	f000 fafa 	bl	8010794 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80101a0:	e046      	b.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2140      	movs	r1, #64	@ 0x40
 80101a6:	0018      	movs	r0, r3
 80101a8:	f000 fde0 	bl	8010d6c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80101ac:	e040      	b.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	2240      	movs	r2, #64	@ 0x40
 80101b2:	4013      	ands	r3, r2
 80101b4:	d02c      	beq.n	8010210 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2240      	movs	r2, #64	@ 0x40
 80101ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80101bc:	d028      	beq.n	8010210 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d11d      	bne.n	8010204 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	685a      	ldr	r2, [r3, #4]
 80101ce:	2380      	movs	r3, #128	@ 0x80
 80101d0:	049b      	lsls	r3, r3, #18
 80101d2:	401a      	ands	r2, r3
 80101d4:	2380      	movs	r3, #128	@ 0x80
 80101d6:	049b      	lsls	r3, r3, #18
 80101d8:	429a      	cmp	r2, r3
 80101da:	d028      	beq.n	801022e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101e0:	4a18      	ldr	r2, [pc, #96]	@ (8010244 <I2C_Master_ISR_DMA+0x1f4>)
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d109      	bne.n	80101fa <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	685a      	ldr	r2, [r3, #4]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2180      	movs	r1, #128	@ 0x80
 80101f2:	01c9      	lsls	r1, r1, #7
 80101f4:	430a      	orrs	r2, r1
 80101f6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80101f8:	e019      	b.n	801022e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	0018      	movs	r0, r3
 80101fe:	f000 fac9 	bl	8010794 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8010202:	e014      	b.n	801022e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2140      	movs	r1, #64	@ 0x40
 8010208:	0018      	movs	r0, r3
 801020a:	f000 fdaf 	bl	8010d6c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 801020e:	e00e      	b.n	801022e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	2220      	movs	r2, #32
 8010214:	4013      	ands	r3, r2
 8010216:	d00b      	beq.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2220      	movs	r2, #32
 801021c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801021e:	d007      	beq.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8010220:	68ba      	ldr	r2, [r7, #8]
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	0011      	movs	r1, r2
 8010226:	0018      	movs	r0, r3
 8010228:	f000 fb5a 	bl	80108e0 <I2C_ITMasterCplt>
 801022c:	e000      	b.n	8010230 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 801022e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	2240      	movs	r2, #64	@ 0x40
 8010234:	2100      	movs	r1, #0
 8010236:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	0018      	movs	r0, r3
 801023c:	46bd      	mov	sp, r7
 801023e:	b007      	add	sp, #28
 8010240:	bd90      	pop	{r4, r7, pc}
 8010242:	46c0      	nop			@ (mov r8, r8)
 8010244:	ffff0000 	.word	0xffff0000

08010248 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8010248:	b590      	push	{r4, r7, lr}
 801024a:	b089      	sub	sp, #36	@ 0x24
 801024c:	af02      	add	r7, sp, #8
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	60b9      	str	r1, [r7, #8]
 8010252:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8010254:	4b88      	ldr	r3, [pc, #544]	@ (8010478 <I2C_Mem_ISR_DMA+0x230>)
 8010256:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2240      	movs	r2, #64	@ 0x40
 801025c:	5c9b      	ldrb	r3, [r3, r2]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d101      	bne.n	8010266 <I2C_Mem_ISR_DMA+0x1e>
 8010262:	2302      	movs	r3, #2
 8010264:	e104      	b.n	8010470 <I2C_Mem_ISR_DMA+0x228>
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2240      	movs	r2, #64	@ 0x40
 801026a:	2101      	movs	r1, #1
 801026c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801026e:	68bb      	ldr	r3, [r7, #8]
 8010270:	2210      	movs	r2, #16
 8010272:	4013      	ands	r3, r2
 8010274:	d017      	beq.n	80102a6 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2210      	movs	r2, #16
 801027a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 801027c:	d013      	beq.n	80102a6 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	2210      	movs	r2, #16
 8010284:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801028a:	2204      	movs	r2, #4
 801028c:	431a      	orrs	r2, r3
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2120      	movs	r1, #32
 8010296:	0018      	movs	r0, r3
 8010298:	f001 fa1a 	bl	80116d0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	0018      	movs	r0, r3
 80102a0:	f000 fe8f 	bl	8010fc2 <I2C_Flush_TXDR>
 80102a4:	e0df      	b.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	2202      	movs	r2, #2
 80102aa:	4013      	ands	r3, r2
 80102ac:	d00d      	beq.n	80102ca <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	2202      	movs	r2, #2
 80102b2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80102b4:	d009      	beq.n	80102ca <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80102b6:	68fb      	ldr	r3, [r7, #12]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80102be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	2201      	movs	r2, #1
 80102c4:	4252      	negs	r2, r2
 80102c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80102c8:	e0cd      	b.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	2280      	movs	r2, #128	@ 0x80
 80102ce:	4013      	ands	r3, r2
 80102d0:	d05e      	beq.n	8010390 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2240      	movs	r2, #64	@ 0x40
 80102d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80102d8:	d05a      	beq.n	8010390 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2110      	movs	r1, #16
 80102de:	0018      	movs	r0, r3
 80102e0:	f001 f9f6 	bl	80116d0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102e8:	b29b      	uxth	r3, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d04a      	beq.n	8010384 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	2bff      	cmp	r3, #255	@ 0xff
 80102f6:	d910      	bls.n	801031a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	22ff      	movs	r2, #255	@ 0xff
 80102fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010302:	b299      	uxth	r1, r3
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010308:	b2da      	uxtb	r2, r3
 801030a:	2380      	movs	r3, #128	@ 0x80
 801030c:	045b      	lsls	r3, r3, #17
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	2400      	movs	r4, #0
 8010312:	9400      	str	r4, [sp, #0]
 8010314:	f001 f9a2 	bl	801165c <I2C_TransferConfig>
 8010318:	e011      	b.n	801033e <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801031e:	b29a      	uxth	r2, r3
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010328:	b299      	uxth	r1, r3
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801032e:	b2da      	uxtb	r2, r3
 8010330:	2380      	movs	r3, #128	@ 0x80
 8010332:	049b      	lsls	r3, r3, #18
 8010334:	68f8      	ldr	r0, [r7, #12]
 8010336:	2400      	movs	r4, #0
 8010338:	9400      	str	r4, [sp, #0]
 801033a:	f001 f98f 	bl	801165c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010342:	b29a      	uxth	r2, r3
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010348:	1ad3      	subs	r3, r2, r3
 801034a:	b29a      	uxth	r2, r3
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2241      	movs	r2, #65	@ 0x41
 8010354:	5c9b      	ldrb	r3, [r3, r2]
 8010356:	b2db      	uxtb	r3, r3
 8010358:	2b22      	cmp	r3, #34	@ 0x22
 801035a:	d109      	bne.n	8010370 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	681a      	ldr	r2, [r3, #0]
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2180      	movs	r1, #128	@ 0x80
 8010368:	0209      	lsls	r1, r1, #8
 801036a:	430a      	orrs	r2, r1
 801036c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 801036e:	e07a      	b.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	2180      	movs	r1, #128	@ 0x80
 801037c:	01c9      	lsls	r1, r1, #7
 801037e:	430a      	orrs	r2, r1
 8010380:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8010382:	e070      	b.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2140      	movs	r1, #64	@ 0x40
 8010388:	0018      	movs	r0, r3
 801038a:	f000 fcef 	bl	8010d6c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 801038e:	e06a      	b.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	2240      	movs	r2, #64	@ 0x40
 8010394:	4013      	ands	r3, r2
 8010396:	d058      	beq.n	801044a <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2240      	movs	r2, #64	@ 0x40
 801039c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 801039e:	d054      	beq.n	801044a <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2241      	movs	r2, #65	@ 0x41
 80103a4:	5c9b      	ldrb	r3, [r3, r2]
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	2b22      	cmp	r3, #34	@ 0x22
 80103aa:	d101      	bne.n	80103b0 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 80103ac:	4b33      	ldr	r3, [pc, #204]	@ (801047c <I2C_Mem_ISR_DMA+0x234>)
 80103ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	2bff      	cmp	r3, #255	@ 0xff
 80103b8:	d911      	bls.n	80103de <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	22ff      	movs	r2, #255	@ 0xff
 80103be:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103c4:	b299      	uxth	r1, r3
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103ca:	b2da      	uxtb	r2, r3
 80103cc:	2380      	movs	r3, #128	@ 0x80
 80103ce:	045c      	lsls	r4, r3, #17
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	9300      	str	r3, [sp, #0]
 80103d6:	0023      	movs	r3, r4
 80103d8:	f001 f940 	bl	801165c <I2C_TransferConfig>
 80103dc:	e012      	b.n	8010404 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103ec:	b299      	uxth	r1, r3
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	2380      	movs	r3, #128	@ 0x80
 80103f6:	049c      	lsls	r4, r3, #18
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	0023      	movs	r3, r4
 8010400:	f001 f92c 	bl	801165c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010408:	b29a      	uxth	r2, r3
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801040e:	1ad3      	subs	r3, r2, r3
 8010410:	b29a      	uxth	r2, r3
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	2241      	movs	r2, #65	@ 0x41
 801041a:	5c9b      	ldrb	r3, [r3, r2]
 801041c:	b2db      	uxtb	r3, r3
 801041e:	2b22      	cmp	r3, #34	@ 0x22
 8010420:	d109      	bne.n	8010436 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	2180      	movs	r1, #128	@ 0x80
 801042e:	0209      	lsls	r1, r1, #8
 8010430:	430a      	orrs	r2, r1
 8010432:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010434:	e017      	b.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2180      	movs	r1, #128	@ 0x80
 8010442:	01c9      	lsls	r1, r1, #7
 8010444:	430a      	orrs	r2, r1
 8010446:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010448:	e00d      	b.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	2220      	movs	r2, #32
 801044e:	4013      	ands	r3, r2
 8010450:	d009      	beq.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	2220      	movs	r2, #32
 8010456:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8010458:	d005      	beq.n	8010466 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 801045a:	68ba      	ldr	r2, [r7, #8]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	0011      	movs	r1, r2
 8010460:	0018      	movs	r0, r3
 8010462:	f000 fa3d 	bl	80108e0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2240      	movs	r2, #64	@ 0x40
 801046a:	2100      	movs	r1, #0
 801046c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801046e:	2300      	movs	r3, #0
}
 8010470:	0018      	movs	r0, r3
 8010472:	46bd      	mov	sp, r7
 8010474:	b007      	add	sp, #28
 8010476:	bd90      	pop	{r4, r7, pc}
 8010478:	80002000 	.word	0x80002000
 801047c:	80002400 	.word	0x80002400

08010480 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010490:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8010492:	2300      	movs	r3, #0
 8010494:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2240      	movs	r2, #64	@ 0x40
 801049a:	5c9b      	ldrb	r3, [r3, r2]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d101      	bne.n	80104a4 <I2C_Slave_ISR_DMA+0x24>
 80104a0:	2302      	movs	r3, #2
 80104a2:	e0cd      	b.n	8010640 <I2C_Slave_ISR_DMA+0x1c0>
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2240      	movs	r2, #64	@ 0x40
 80104a8:	2101      	movs	r1, #1
 80104aa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	2220      	movs	r2, #32
 80104b0:	4013      	ands	r3, r2
 80104b2:	d009      	beq.n	80104c8 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2220      	movs	r2, #32
 80104b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80104ba:	d005      	beq.n	80104c8 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80104bc:	68ba      	ldr	r2, [r7, #8]
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	0011      	movs	r1, r2
 80104c2:	0018      	movs	r0, r3
 80104c4:	f000 fada 	bl	8010a7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	2210      	movs	r2, #16
 80104cc:	4013      	ands	r3, r2
 80104ce:	d100      	bne.n	80104d2 <I2C_Slave_ISR_DMA+0x52>
 80104d0:	e0a3      	b.n	801061a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2210      	movs	r2, #16
 80104d6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80104d8:	d100      	bne.n	80104dc <I2C_Slave_ISR_DMA+0x5c>
 80104da:	e09e      	b.n	801061a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	2380      	movs	r3, #128	@ 0x80
 80104e0:	01db      	lsls	r3, r3, #7
 80104e2:	4013      	ands	r3, r2
 80104e4:	d105      	bne.n	80104f2 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	2380      	movs	r3, #128	@ 0x80
 80104ea:	021b      	lsls	r3, r3, #8
 80104ec:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80104ee:	d100      	bne.n	80104f2 <I2C_Slave_ISR_DMA+0x72>
 80104f0:	e08c      	b.n	801060c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00c      	beq.n	8010514 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	2380      	movs	r3, #128	@ 0x80
 80104fe:	021b      	lsls	r3, r3, #8
 8010500:	4013      	ands	r3, r2
 8010502:	d007      	beq.n	8010514 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d101      	bne.n	8010514 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8010510:	2301      	movs	r3, #1
 8010512:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010518:	2b00      	cmp	r3, #0
 801051a:	d00c      	beq.n	8010536 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	2380      	movs	r3, #128	@ 0x80
 8010520:	01db      	lsls	r3, r3, #7
 8010522:	4013      	ands	r3, r2
 8010524:	d007      	beq.n	8010536 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d101      	bne.n	8010536 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8010532:	2301      	movs	r3, #1
 8010534:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8010536:	69fb      	ldr	r3, [r7, #28]
 8010538:	2b01      	cmp	r3, #1
 801053a:	d12d      	bne.n	8010598 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2241      	movs	r2, #65	@ 0x41
 8010540:	5c9b      	ldrb	r3, [r3, r2]
 8010542:	b2db      	uxtb	r3, r3
 8010544:	2b28      	cmp	r3, #40	@ 0x28
 8010546:	d10b      	bne.n	8010560 <I2C_Slave_ISR_DMA+0xe0>
 8010548:	69ba      	ldr	r2, [r7, #24]
 801054a:	2380      	movs	r3, #128	@ 0x80
 801054c:	049b      	lsls	r3, r3, #18
 801054e:	429a      	cmp	r2, r3
 8010550:	d106      	bne.n	8010560 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8010552:	68ba      	ldr	r2, [r7, #8]
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	0011      	movs	r1, r2
 8010558:	0018      	movs	r0, r3
 801055a:	f000 fbaf 	bl	8010cbc <I2C_ITListenCplt>
 801055e:	e054      	b.n	801060a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2241      	movs	r2, #65	@ 0x41
 8010564:	5c9b      	ldrb	r3, [r3, r2]
 8010566:	b2db      	uxtb	r3, r3
 8010568:	2b29      	cmp	r3, #41	@ 0x29
 801056a:	d110      	bne.n	801058e <I2C_Slave_ISR_DMA+0x10e>
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	4a36      	ldr	r2, [pc, #216]	@ (8010648 <I2C_Slave_ISR_DMA+0x1c8>)
 8010570:	4293      	cmp	r3, r2
 8010572:	d00c      	beq.n	801058e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2210      	movs	r2, #16
 801057a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	0018      	movs	r0, r3
 8010580:	f000 fd1f 	bl	8010fc2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	0018      	movs	r0, r3
 8010588:	f000 f946 	bl	8010818 <I2C_ITSlaveSeqCplt>
 801058c:	e03d      	b.n	801060a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	2210      	movs	r2, #16
 8010594:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8010596:	e03e      	b.n	8010616 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	2210      	movs	r2, #16
 801059e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105a4:	2204      	movs	r2, #4
 80105a6:	431a      	orrs	r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80105ac:	2317      	movs	r3, #23
 80105ae:	18fb      	adds	r3, r7, r3
 80105b0:	68fa      	ldr	r2, [r7, #12]
 80105b2:	2141      	movs	r1, #65	@ 0x41
 80105b4:	5c52      	ldrb	r2, [r2, r1]
 80105b6:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d004      	beq.n	80105c8 <I2C_Slave_ISR_DMA+0x148>
 80105be:	69ba      	ldr	r2, [r7, #24]
 80105c0:	2380      	movs	r3, #128	@ 0x80
 80105c2:	045b      	lsls	r3, r3, #17
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d126      	bne.n	8010616 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80105c8:	2217      	movs	r2, #23
 80105ca:	18bb      	adds	r3, r7, r2
 80105cc:	781b      	ldrb	r3, [r3, #0]
 80105ce:	2b21      	cmp	r3, #33	@ 0x21
 80105d0:	d003      	beq.n	80105da <I2C_Slave_ISR_DMA+0x15a>
 80105d2:	18bb      	adds	r3, r7, r2
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	2b29      	cmp	r3, #41	@ 0x29
 80105d8:	d103      	bne.n	80105e2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2221      	movs	r2, #33	@ 0x21
 80105de:	631a      	str	r2, [r3, #48]	@ 0x30
 80105e0:	e00b      	b.n	80105fa <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80105e2:	2217      	movs	r2, #23
 80105e4:	18bb      	adds	r3, r7, r2
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	2b22      	cmp	r3, #34	@ 0x22
 80105ea:	d003      	beq.n	80105f4 <I2C_Slave_ISR_DMA+0x174>
 80105ec:	18bb      	adds	r3, r7, r2
 80105ee:	781b      	ldrb	r3, [r3, #0]
 80105f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80105f2:	d102      	bne.n	80105fa <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2222      	movs	r2, #34	@ 0x22
 80105f8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	0011      	movs	r1, r2
 8010602:	0018      	movs	r0, r3
 8010604:	f000 fbb2 	bl	8010d6c <I2C_ITError>
      if (treatdmanack == 1U)
 8010608:	e005      	b.n	8010616 <I2C_Slave_ISR_DMA+0x196>
 801060a:	e004      	b.n	8010616 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	2210      	movs	r2, #16
 8010612:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010614:	e00f      	b.n	8010636 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8010616:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8010618:	e00d      	b.n	8010636 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	2208      	movs	r2, #8
 801061e:	4013      	ands	r3, r2
 8010620:	d009      	beq.n	8010636 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	2208      	movs	r2, #8
 8010626:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8010628:	d005      	beq.n	8010636 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 801062a:	68ba      	ldr	r2, [r7, #8]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	0011      	movs	r1, r2
 8010630:	0018      	movs	r0, r3
 8010632:	f000 f80b 	bl	801064c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2240      	movs	r2, #64	@ 0x40
 801063a:	2100      	movs	r1, #0
 801063c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801063e:	2300      	movs	r3, #0
}
 8010640:	0018      	movs	r0, r3
 8010642:	46bd      	mov	sp, r7
 8010644:	b008      	add	sp, #32
 8010646:	bd80      	pop	{r7, pc}
 8010648:	ffff0000 	.word	0xffff0000

0801064c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 801064c:	b5b0      	push	{r4, r5, r7, lr}
 801064e:	b084      	sub	sp, #16
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2241      	movs	r2, #65	@ 0x41
 801065a:	5c9b      	ldrb	r3, [r3, r2]
 801065c:	b2db      	uxtb	r3, r3
 801065e:	001a      	movs	r2, r3
 8010660:	2328      	movs	r3, #40	@ 0x28
 8010662:	4013      	ands	r3, r2
 8010664:	2b28      	cmp	r3, #40	@ 0x28
 8010666:	d000      	beq.n	801066a <I2C_ITAddrCplt+0x1e>
 8010668:	e088      	b.n	801077c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	699b      	ldr	r3, [r3, #24]
 8010670:	0c1b      	lsrs	r3, r3, #16
 8010672:	b2da      	uxtb	r2, r3
 8010674:	250f      	movs	r5, #15
 8010676:	197b      	adds	r3, r7, r5
 8010678:	2101      	movs	r1, #1
 801067a:	400a      	ands	r2, r1
 801067c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	699b      	ldr	r3, [r3, #24]
 8010684:	0c1b      	lsrs	r3, r3, #16
 8010686:	b29a      	uxth	r2, r3
 8010688:	200c      	movs	r0, #12
 801068a:	183b      	adds	r3, r7, r0
 801068c:	21fe      	movs	r1, #254	@ 0xfe
 801068e:	400a      	ands	r2, r1
 8010690:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	b29a      	uxth	r2, r3
 801069a:	240a      	movs	r4, #10
 801069c:	193b      	adds	r3, r7, r4
 801069e:	0592      	lsls	r2, r2, #22
 80106a0:	0d92      	lsrs	r2, r2, #22
 80106a2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	b29a      	uxth	r2, r3
 80106ac:	2308      	movs	r3, #8
 80106ae:	18fb      	adds	r3, r7, r3
 80106b0:	21fe      	movs	r1, #254	@ 0xfe
 80106b2:	400a      	ands	r2, r1
 80106b4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	2b02      	cmp	r3, #2
 80106bc:	d148      	bne.n	8010750 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80106be:	0021      	movs	r1, r4
 80106c0:	187b      	adds	r3, r7, r1
 80106c2:	881b      	ldrh	r3, [r3, #0]
 80106c4:	09db      	lsrs	r3, r3, #7
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	183b      	adds	r3, r7, r0
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	4053      	eors	r3, r2
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	001a      	movs	r2, r3
 80106d2:	2306      	movs	r3, #6
 80106d4:	4013      	ands	r3, r2
 80106d6:	d120      	bne.n	801071a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80106d8:	183b      	adds	r3, r7, r0
 80106da:	187a      	adds	r2, r7, r1
 80106dc:	8812      	ldrh	r2, [r2, #0]
 80106de:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106e4:	1c5a      	adds	r2, r3, #1
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d14c      	bne.n	801078c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	2208      	movs	r2, #8
 80106fe:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2240      	movs	r2, #64	@ 0x40
 8010704:	2100      	movs	r1, #0
 8010706:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010708:	183b      	adds	r3, r7, r0
 801070a:	881a      	ldrh	r2, [r3, #0]
 801070c:	197b      	adds	r3, r7, r5
 801070e:	7819      	ldrb	r1, [r3, #0]
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	0018      	movs	r0, r3
 8010714:	f7ff fa39 	bl	800fb8a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010718:	e038      	b.n	801078c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 801071a:	240c      	movs	r4, #12
 801071c:	193b      	adds	r3, r7, r4
 801071e:	2208      	movs	r2, #8
 8010720:	18ba      	adds	r2, r7, r2
 8010722:	8812      	ldrh	r2, [r2, #0]
 8010724:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010726:	2380      	movs	r3, #128	@ 0x80
 8010728:	021a      	lsls	r2, r3, #8
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	0011      	movs	r1, r2
 801072e:	0018      	movs	r0, r3
 8010730:	f001 f85c 	bl	80117ec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2240      	movs	r2, #64	@ 0x40
 8010738:	2100      	movs	r1, #0
 801073a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 801073c:	193b      	adds	r3, r7, r4
 801073e:	881a      	ldrh	r2, [r3, #0]
 8010740:	230f      	movs	r3, #15
 8010742:	18fb      	adds	r3, r7, r3
 8010744:	7819      	ldrb	r1, [r3, #0]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	0018      	movs	r0, r3
 801074a:	f7ff fa1e 	bl	800fb8a <HAL_I2C_AddrCallback>
}
 801074e:	e01d      	b.n	801078c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8010750:	2380      	movs	r3, #128	@ 0x80
 8010752:	021a      	lsls	r2, r3, #8
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	0011      	movs	r1, r2
 8010758:	0018      	movs	r0, r3
 801075a:	f001 f847 	bl	80117ec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2240      	movs	r2, #64	@ 0x40
 8010762:	2100      	movs	r1, #0
 8010764:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8010766:	230c      	movs	r3, #12
 8010768:	18fb      	adds	r3, r7, r3
 801076a:	881a      	ldrh	r2, [r3, #0]
 801076c:	230f      	movs	r3, #15
 801076e:	18fb      	adds	r3, r7, r3
 8010770:	7819      	ldrb	r1, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	0018      	movs	r0, r3
 8010776:	f7ff fa08 	bl	800fb8a <HAL_I2C_AddrCallback>
}
 801077a:	e007      	b.n	801078c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2208      	movs	r2, #8
 8010782:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2240      	movs	r2, #64	@ 0x40
 8010788:	2100      	movs	r1, #0
 801078a:	5499      	strb	r1, [r3, r2]
}
 801078c:	46c0      	nop			@ (mov r8, r8)
 801078e:	46bd      	mov	sp, r7
 8010790:	b004      	add	sp, #16
 8010792:	bdb0      	pop	{r4, r5, r7, pc}

08010794 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2242      	movs	r2, #66	@ 0x42
 80107a0:	2100      	movs	r1, #0
 80107a2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2241      	movs	r2, #65	@ 0x41
 80107a8:	5c9b      	ldrb	r3, [r3, r2]
 80107aa:	b2db      	uxtb	r3, r3
 80107ac:	2b21      	cmp	r3, #33	@ 0x21
 80107ae:	d117      	bne.n	80107e0 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2241      	movs	r2, #65	@ 0x41
 80107b4:	2120      	movs	r1, #32
 80107b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2211      	movs	r2, #17
 80107bc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2101      	movs	r1, #1
 80107c8:	0018      	movs	r0, r3
 80107ca:	f001 f80f 	bl	80117ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2240      	movs	r2, #64	@ 0x40
 80107d2:	2100      	movs	r1, #0
 80107d4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	0018      	movs	r0, r3
 80107da:	f7ff f9b6 	bl	800fb4a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80107de:	e016      	b.n	801080e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	2241      	movs	r2, #65	@ 0x41
 80107e4:	2120      	movs	r1, #32
 80107e6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2212      	movs	r2, #18
 80107ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	2200      	movs	r2, #0
 80107f2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2102      	movs	r1, #2
 80107f8:	0018      	movs	r0, r3
 80107fa:	f000 fff7 	bl	80117ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2240      	movs	r2, #64	@ 0x40
 8010802:	2100      	movs	r1, #0
 8010804:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	0018      	movs	r0, r3
 801080a:	f7ff f9a6 	bl	800fb5a <HAL_I2C_MasterRxCpltCallback>
}
 801080e:	46c0      	nop			@ (mov r8, r8)
 8010810:	46bd      	mov	sp, r7
 8010812:	b002      	add	sp, #8
 8010814:	bd80      	pop	{r7, pc}
	...

08010818 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2242      	movs	r2, #66	@ 0x42
 801082c:	2100      	movs	r1, #0
 801082e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	2380      	movs	r3, #128	@ 0x80
 8010834:	01db      	lsls	r3, r3, #7
 8010836:	4013      	ands	r3, r2
 8010838:	d008      	beq.n	801084c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4924      	ldr	r1, [pc, #144]	@ (80108d8 <I2C_ITSlaveSeqCplt+0xc0>)
 8010846:	400a      	ands	r2, r1
 8010848:	601a      	str	r2, [r3, #0]
 801084a:	e00c      	b.n	8010866 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 801084c:	68fa      	ldr	r2, [r7, #12]
 801084e:	2380      	movs	r3, #128	@ 0x80
 8010850:	021b      	lsls	r3, r3, #8
 8010852:	4013      	ands	r3, r2
 8010854:	d007      	beq.n	8010866 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	491e      	ldr	r1, [pc, #120]	@ (80108dc <I2C_ITSlaveSeqCplt+0xc4>)
 8010862:	400a      	ands	r2, r1
 8010864:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2241      	movs	r2, #65	@ 0x41
 801086a:	5c9b      	ldrb	r3, [r3, r2]
 801086c:	b2db      	uxtb	r3, r3
 801086e:	2b29      	cmp	r3, #41	@ 0x29
 8010870:	d114      	bne.n	801089c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2241      	movs	r2, #65	@ 0x41
 8010876:	2128      	movs	r1, #40	@ 0x28
 8010878:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2221      	movs	r2, #33	@ 0x21
 801087e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2101      	movs	r1, #1
 8010884:	0018      	movs	r0, r3
 8010886:	f000 ffb1 	bl	80117ec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2240      	movs	r2, #64	@ 0x40
 801088e:	2100      	movs	r1, #0
 8010890:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	0018      	movs	r0, r3
 8010896:	f7ff f968 	bl	800fb6a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801089a:	e019      	b.n	80108d0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2241      	movs	r2, #65	@ 0x41
 80108a0:	5c9b      	ldrb	r3, [r3, r2]
 80108a2:	b2db      	uxtb	r3, r3
 80108a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80108a6:	d113      	bne.n	80108d0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2241      	movs	r2, #65	@ 0x41
 80108ac:	2128      	movs	r1, #40	@ 0x28
 80108ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2222      	movs	r2, #34	@ 0x22
 80108b4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2102      	movs	r1, #2
 80108ba:	0018      	movs	r0, r3
 80108bc:	f000 ff96 	bl	80117ec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2240      	movs	r2, #64	@ 0x40
 80108c4:	2100      	movs	r1, #0
 80108c6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	0018      	movs	r0, r3
 80108cc:	f7ff f955 	bl	800fb7a <HAL_I2C_SlaveRxCpltCallback>
}
 80108d0:	46c0      	nop			@ (mov r8, r8)
 80108d2:	46bd      	mov	sp, r7
 80108d4:	b004      	add	sp, #16
 80108d6:	bd80      	pop	{r7, pc}
 80108d8:	ffffbfff 	.word	0xffffbfff
 80108dc:	ffff7fff 	.word	0xffff7fff

080108e0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2220      	movs	r2, #32
 80108f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2241      	movs	r2, #65	@ 0x41
 80108fa:	5c9b      	ldrb	r3, [r3, r2]
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	2b21      	cmp	r3, #33	@ 0x21
 8010900:	d108      	bne.n	8010914 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2101      	movs	r1, #1
 8010906:	0018      	movs	r0, r3
 8010908:	f000 ff70 	bl	80117ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2211      	movs	r2, #17
 8010910:	631a      	str	r2, [r3, #48]	@ 0x30
 8010912:	e00d      	b.n	8010930 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2241      	movs	r2, #65	@ 0x41
 8010918:	5c9b      	ldrb	r3, [r3, r2]
 801091a:	b2db      	uxtb	r3, r3
 801091c:	2b22      	cmp	r3, #34	@ 0x22
 801091e:	d107      	bne.n	8010930 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	2102      	movs	r1, #2
 8010924:	0018      	movs	r0, r3
 8010926:	f000 ff61 	bl	80117ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2212      	movs	r2, #18
 801092e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	685a      	ldr	r2, [r3, #4]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	494e      	ldr	r1, [pc, #312]	@ (8010a74 <I2C_ITMasterCplt+0x194>)
 801093c:	400a      	ands	r2, r1
 801093e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2200      	movs	r2, #0
 8010944:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	4a4b      	ldr	r2, [pc, #300]	@ (8010a78 <I2C_ITMasterCplt+0x198>)
 801094a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	2210      	movs	r2, #16
 8010950:	4013      	ands	r3, r2
 8010952:	d009      	beq.n	8010968 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	2210      	movs	r2, #16
 801095a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010960:	2204      	movs	r2, #4
 8010962:	431a      	orrs	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2241      	movs	r2, #65	@ 0x41
 801096c:	5c9b      	ldrb	r3, [r3, r2]
 801096e:	b2db      	uxtb	r3, r3
 8010970:	2b60      	cmp	r3, #96	@ 0x60
 8010972:	d109      	bne.n	8010988 <I2C_ITMasterCplt+0xa8>
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	2204      	movs	r2, #4
 8010978:	4013      	ands	r3, r2
 801097a:	d005      	beq.n	8010988 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010982:	b2db      	uxtb	r3, r3
 8010984:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8010986:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	0018      	movs	r0, r3
 801098c:	f000 fb19 	bl	8010fc2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010994:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	2241      	movs	r2, #65	@ 0x41
 801099a:	5c9b      	ldrb	r3, [r3, r2]
 801099c:	b2db      	uxtb	r3, r3
 801099e:	2b60      	cmp	r3, #96	@ 0x60
 80109a0:	d002      	beq.n	80109a8 <I2C_ITMasterCplt+0xc8>
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d007      	beq.n	80109b8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	0011      	movs	r1, r2
 80109b0:	0018      	movs	r0, r3
 80109b2:	f000 f9db 	bl	8010d6c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80109b6:	e058      	b.n	8010a6a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	2241      	movs	r2, #65	@ 0x41
 80109bc:	5c9b      	ldrb	r3, [r3, r2]
 80109be:	b2db      	uxtb	r3, r3
 80109c0:	2b21      	cmp	r3, #33	@ 0x21
 80109c2:	d126      	bne.n	8010a12 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2241      	movs	r2, #65	@ 0x41
 80109c8:	2120      	movs	r1, #32
 80109ca:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2200      	movs	r2, #0
 80109d0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2242      	movs	r2, #66	@ 0x42
 80109d6:	5c9b      	ldrb	r3, [r3, r2]
 80109d8:	b2db      	uxtb	r3, r3
 80109da:	2b40      	cmp	r3, #64	@ 0x40
 80109dc:	d10c      	bne.n	80109f8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2242      	movs	r2, #66	@ 0x42
 80109e2:	2100      	movs	r1, #0
 80109e4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2240      	movs	r2, #64	@ 0x40
 80109ea:	2100      	movs	r1, #0
 80109ec:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	0018      	movs	r0, r3
 80109f2:	f7ff f8e2 	bl	800fbba <HAL_I2C_MemTxCpltCallback>
}
 80109f6:	e038      	b.n	8010a6a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2242      	movs	r2, #66	@ 0x42
 80109fc:	2100      	movs	r1, #0
 80109fe:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2240      	movs	r2, #64	@ 0x40
 8010a04:	2100      	movs	r1, #0
 8010a06:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	0018      	movs	r0, r3
 8010a0c:	f7ff f89d 	bl	800fb4a <HAL_I2C_MasterTxCpltCallback>
}
 8010a10:	e02b      	b.n	8010a6a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2241      	movs	r2, #65	@ 0x41
 8010a16:	5c9b      	ldrb	r3, [r3, r2]
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	2b22      	cmp	r3, #34	@ 0x22
 8010a1c:	d125      	bne.n	8010a6a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2241      	movs	r2, #65	@ 0x41
 8010a22:	2120      	movs	r1, #32
 8010a24:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2242      	movs	r2, #66	@ 0x42
 8010a30:	5c9b      	ldrb	r3, [r3, r2]
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	2b40      	cmp	r3, #64	@ 0x40
 8010a36:	d10c      	bne.n	8010a52 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2242      	movs	r2, #66	@ 0x42
 8010a3c:	2100      	movs	r1, #0
 8010a3e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2240      	movs	r2, #64	@ 0x40
 8010a44:	2100      	movs	r1, #0
 8010a46:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	0018      	movs	r0, r3
 8010a4c:	f7ff f8bd 	bl	800fbca <HAL_I2C_MemRxCpltCallback>
}
 8010a50:	e00b      	b.n	8010a6a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2242      	movs	r2, #66	@ 0x42
 8010a56:	2100      	movs	r1, #0
 8010a58:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2240      	movs	r2, #64	@ 0x40
 8010a5e:	2100      	movs	r1, #0
 8010a60:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	0018      	movs	r0, r3
 8010a66:	f7ff f878 	bl	800fb5a <HAL_I2C_MasterRxCpltCallback>
}
 8010a6a:	46c0      	nop			@ (mov r8, r8)
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	b006      	add	sp, #24
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	46c0      	nop			@ (mov r8, r8)
 8010a74:	fe00e800 	.word	0xfe00e800
 8010a78:	ffff0000 	.word	0xffff0000

08010a7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b086      	sub	sp, #24
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010a92:	200f      	movs	r0, #15
 8010a94:	183b      	adds	r3, r7, r0
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	2141      	movs	r1, #65	@ 0x41
 8010a9a:	5c52      	ldrb	r2, [r2, r1]
 8010a9c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2220      	movs	r2, #32
 8010aa4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8010aa6:	183b      	adds	r3, r7, r0
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	2b21      	cmp	r3, #33	@ 0x21
 8010aac:	d003      	beq.n	8010ab6 <I2C_ITSlaveCplt+0x3a>
 8010aae:	183b      	adds	r3, r7, r0
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	2b29      	cmp	r3, #41	@ 0x29
 8010ab4:	d109      	bne.n	8010aca <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8010ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8010ca4 <I2C_ITSlaveCplt+0x228>)
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	0011      	movs	r1, r2
 8010abc:	0018      	movs	r0, r3
 8010abe:	f000 fe95 	bl	80117ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2221      	movs	r2, #33	@ 0x21
 8010ac6:	631a      	str	r2, [r3, #48]	@ 0x30
 8010ac8:	e011      	b.n	8010aee <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8010aca:	220f      	movs	r2, #15
 8010acc:	18bb      	adds	r3, r7, r2
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	2b22      	cmp	r3, #34	@ 0x22
 8010ad2:	d003      	beq.n	8010adc <I2C_ITSlaveCplt+0x60>
 8010ad4:	18bb      	adds	r3, r7, r2
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ada:	d108      	bne.n	8010aee <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8010adc:	4a72      	ldr	r2, [pc, #456]	@ (8010ca8 <I2C_ITSlaveCplt+0x22c>)
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	0011      	movs	r1, r2
 8010ae2:	0018      	movs	r0, r3
 8010ae4:	f000 fe82 	bl	80117ec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2222      	movs	r2, #34	@ 0x22
 8010aec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	685a      	ldr	r2, [r3, #4]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2180      	movs	r1, #128	@ 0x80
 8010afa:	0209      	lsls	r1, r1, #8
 8010afc:	430a      	orrs	r2, r1
 8010afe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	685a      	ldr	r2, [r3, #4]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4968      	ldr	r1, [pc, #416]	@ (8010cac <I2C_ITSlaveCplt+0x230>)
 8010b0c:	400a      	ands	r2, r1
 8010b0e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	0018      	movs	r0, r3
 8010b14:	f000 fa55 	bl	8010fc2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8010b18:	693a      	ldr	r2, [r7, #16]
 8010b1a:	2380      	movs	r3, #128	@ 0x80
 8010b1c:	01db      	lsls	r3, r3, #7
 8010b1e:	4013      	ands	r3, r2
 8010b20:	d013      	beq.n	8010b4a <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	4960      	ldr	r1, [pc, #384]	@ (8010cb0 <I2C_ITSlaveCplt+0x234>)
 8010b2e:	400a      	ands	r2, r1
 8010b30:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d01f      	beq.n	8010b7a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8010b48:	e017      	b.n	8010b7a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8010b4a:	693a      	ldr	r2, [r7, #16]
 8010b4c:	2380      	movs	r3, #128	@ 0x80
 8010b4e:	021b      	lsls	r3, r3, #8
 8010b50:	4013      	ands	r3, r2
 8010b52:	d012      	beq.n	8010b7a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	4955      	ldr	r1, [pc, #340]	@ (8010cb4 <I2C_ITSlaveCplt+0x238>)
 8010b60:	400a      	ands	r2, r1
 8010b62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d006      	beq.n	8010b7a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	2204      	movs	r2, #4
 8010b7e:	4013      	ands	r3, r2
 8010b80:	d020      	beq.n	8010bc4 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	2204      	movs	r2, #4
 8010b86:	4393      	bics	r3, r2
 8010b88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b94:	b2d2      	uxtb	r2, r2
 8010b96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b9c:	1c5a      	adds	r2, r3, #1
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d00c      	beq.n	8010bc4 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	b29a      	uxth	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	3b01      	subs	r3, #1
 8010bbe:	b29a      	uxth	r2, r3
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d005      	beq.n	8010bda <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bd2:	2204      	movs	r2, #4
 8010bd4:	431a      	orrs	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	2242      	movs	r2, #66	@ 0x42
 8010bde:	2100      	movs	r1, #0
 8010be0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d013      	beq.n	8010c18 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	0011      	movs	r1, r2
 8010bf8:	0018      	movs	r0, r3
 8010bfa:	f000 f8b7 	bl	8010d6c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	2241      	movs	r2, #65	@ 0x41
 8010c02:	5c9b      	ldrb	r3, [r3, r2]
 8010c04:	b2db      	uxtb	r3, r3
 8010c06:	2b28      	cmp	r3, #40	@ 0x28
 8010c08:	d147      	bne.n	8010c9a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	0011      	movs	r1, r2
 8010c10:	0018      	movs	r0, r3
 8010c12:	f000 f853 	bl	8010cbc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010c16:	e040      	b.n	8010c9a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c1c:	4a26      	ldr	r2, [pc, #152]	@ (8010cb8 <I2C_ITSlaveCplt+0x23c>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d016      	beq.n	8010c50 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	0018      	movs	r0, r3
 8010c26:	f7ff fdf7 	bl	8010818 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4a22      	ldr	r2, [pc, #136]	@ (8010cb8 <I2C_ITSlaveCplt+0x23c>)
 8010c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2241      	movs	r2, #65	@ 0x41
 8010c34:	2120      	movs	r1, #32
 8010c36:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2240      	movs	r2, #64	@ 0x40
 8010c42:	2100      	movs	r1, #0
 8010c44:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	0018      	movs	r0, r3
 8010c4a:	f7fe ffae 	bl	800fbaa <HAL_I2C_ListenCpltCallback>
}
 8010c4e:	e024      	b.n	8010c9a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2241      	movs	r2, #65	@ 0x41
 8010c54:	5c9b      	ldrb	r3, [r3, r2]
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	2b22      	cmp	r3, #34	@ 0x22
 8010c5a:	d10f      	bne.n	8010c7c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2241      	movs	r2, #65	@ 0x41
 8010c60:	2120      	movs	r1, #32
 8010c62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	2240      	movs	r2, #64	@ 0x40
 8010c6e:	2100      	movs	r1, #0
 8010c70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	0018      	movs	r0, r3
 8010c76:	f7fe ff80 	bl	800fb7a <HAL_I2C_SlaveRxCpltCallback>
}
 8010c7a:	e00e      	b.n	8010c9a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2241      	movs	r2, #65	@ 0x41
 8010c80:	2120      	movs	r1, #32
 8010c82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2240      	movs	r2, #64	@ 0x40
 8010c8e:	2100      	movs	r1, #0
 8010c90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	0018      	movs	r0, r3
 8010c96:	f7fe ff68 	bl	800fb6a <HAL_I2C_SlaveTxCpltCallback>
}
 8010c9a:	46c0      	nop			@ (mov r8, r8)
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	b006      	add	sp, #24
 8010ca0:	bd80      	pop	{r7, pc}
 8010ca2:	46c0      	nop			@ (mov r8, r8)
 8010ca4:	00008001 	.word	0x00008001
 8010ca8:	00008002 	.word	0x00008002
 8010cac:	fe00e800 	.word	0xfe00e800
 8010cb0:	ffffbfff 	.word	0xffffbfff
 8010cb4:	ffff7fff 	.word	0xffff7fff
 8010cb8:	ffff0000 	.word	0xffff0000

08010cbc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4a26      	ldr	r2, [pc, #152]	@ (8010d64 <I2C_ITListenCplt+0xa8>)
 8010cca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2200      	movs	r2, #0
 8010cd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2241      	movs	r2, #65	@ 0x41
 8010cd6:	2120      	movs	r1, #32
 8010cd8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2242      	movs	r2, #66	@ 0x42
 8010cde:	2100      	movs	r1, #0
 8010ce0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	2204      	movs	r2, #4
 8010cec:	4013      	ands	r3, r2
 8010cee:	d022      	beq.n	8010d36 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cfa:	b2d2      	uxtb	r2, r2
 8010cfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d02:	1c5a      	adds	r2, r3, #1
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d012      	beq.n	8010d36 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010d14:	3b01      	subs	r3, #1
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	3b01      	subs	r3, #1
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d2e:	2204      	movs	r2, #4
 8010d30:	431a      	orrs	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010d36:	4a0c      	ldr	r2, [pc, #48]	@ (8010d68 <I2C_ITListenCplt+0xac>)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	0011      	movs	r1, r2
 8010d3c:	0018      	movs	r0, r3
 8010d3e:	f000 fd55 	bl	80117ec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2210      	movs	r2, #16
 8010d48:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2240      	movs	r2, #64	@ 0x40
 8010d4e:	2100      	movs	r1, #0
 8010d50:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	0018      	movs	r0, r3
 8010d56:	f7fe ff28 	bl	800fbaa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8010d5a:	46c0      	nop			@ (mov r8, r8)
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	b002      	add	sp, #8
 8010d60:	bd80      	pop	{r7, pc}
 8010d62:	46c0      	nop			@ (mov r8, r8)
 8010d64:	ffff0000 	.word	0xffff0000
 8010d68:	00008003 	.word	0x00008003

08010d6c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8010d76:	200f      	movs	r0, #15
 8010d78:	183b      	adds	r3, r7, r0
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	2141      	movs	r1, #65	@ 0x41
 8010d7e:	5c52      	ldrb	r2, [r2, r1]
 8010d80:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2242      	movs	r2, #66	@ 0x42
 8010d86:	2100      	movs	r1, #0
 8010d88:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	4a72      	ldr	r2, [pc, #456]	@ (8010f58 <I2C_ITError+0x1ec>)
 8010d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	2200      	movs	r2, #0
 8010d94:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	431a      	orrs	r2, r3
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8010da2:	183b      	adds	r3, r7, r0
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	2b28      	cmp	r3, #40	@ 0x28
 8010da8:	d007      	beq.n	8010dba <I2C_ITError+0x4e>
 8010daa:	183b      	adds	r3, r7, r0
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	2b29      	cmp	r3, #41	@ 0x29
 8010db0:	d003      	beq.n	8010dba <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8010db2:	183b      	adds	r3, r7, r0
 8010db4:	781b      	ldrb	r3, [r3, #0]
 8010db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010db8:	d10c      	bne.n	8010dd4 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2103      	movs	r1, #3
 8010dbe:	0018      	movs	r0, r3
 8010dc0:	f000 fd14 	bl	80117ec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2241      	movs	r2, #65	@ 0x41
 8010dc8:	2128      	movs	r1, #40	@ 0x28
 8010dca:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	4a63      	ldr	r2, [pc, #396]	@ (8010f5c <I2C_ITError+0x1f0>)
 8010dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8010dd2:	e032      	b.n	8010e3a <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8010dd4:	4a62      	ldr	r2, [pc, #392]	@ (8010f60 <I2C_ITError+0x1f4>)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	0011      	movs	r1, r2
 8010dda:	0018      	movs	r0, r3
 8010ddc:	f000 fd06 	bl	80117ec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	0018      	movs	r0, r3
 8010de4:	f000 f8ed 	bl	8010fc2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2241      	movs	r2, #65	@ 0x41
 8010dec:	5c9b      	ldrb	r3, [r3, r2]
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	2b60      	cmp	r3, #96	@ 0x60
 8010df2:	d01f      	beq.n	8010e34 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2241      	movs	r2, #65	@ 0x41
 8010df8:	2120      	movs	r1, #32
 8010dfa:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	699b      	ldr	r3, [r3, #24]
 8010e02:	2220      	movs	r2, #32
 8010e04:	4013      	ands	r3, r2
 8010e06:	2b20      	cmp	r3, #32
 8010e08:	d114      	bne.n	8010e34 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	699b      	ldr	r3, [r3, #24]
 8010e10:	2210      	movs	r2, #16
 8010e12:	4013      	ands	r3, r2
 8010e14:	2b10      	cmp	r3, #16
 8010e16:	d109      	bne.n	8010e2c <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	2210      	movs	r2, #16
 8010e1e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010e24:	2204      	movs	r2, #4
 8010e26:	431a      	orrs	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2220      	movs	r2, #32
 8010e32:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e3e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d03b      	beq.n	8010ec0 <I2C_ITError+0x154>
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	2b11      	cmp	r3, #17
 8010e4c:	d002      	beq.n	8010e54 <I2C_ITError+0xe8>
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	2b21      	cmp	r3, #33	@ 0x21
 8010e52:	d135      	bne.n	8010ec0 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	2380      	movs	r3, #128	@ 0x80
 8010e5c:	01db      	lsls	r3, r3, #7
 8010e5e:	401a      	ands	r2, r3
 8010e60:	2380      	movs	r3, #128	@ 0x80
 8010e62:	01db      	lsls	r3, r3, #7
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d107      	bne.n	8010e78 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	493c      	ldr	r1, [pc, #240]	@ (8010f64 <I2C_ITError+0x1f8>)
 8010e74:	400a      	ands	r2, r1
 8010e76:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e7c:	0018      	movs	r0, r3
 8010e7e:	f7fd fd62 	bl	800e946 <HAL_DMA_GetState>
 8010e82:	0003      	movs	r3, r0
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d016      	beq.n	8010eb6 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e8c:	4a36      	ldr	r2, [pc, #216]	@ (8010f68 <I2C_ITError+0x1fc>)
 8010e8e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2240      	movs	r2, #64	@ 0x40
 8010e94:	2100      	movs	r1, #0
 8010e96:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e9c:	0018      	movs	r0, r3
 8010e9e:	f7fd fc5d 	bl	800e75c <HAL_DMA_Abort_IT>
 8010ea2:	1e03      	subs	r3, r0, #0
 8010ea4:	d051      	beq.n	8010f4a <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010eb0:	0018      	movs	r0, r3
 8010eb2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010eb4:	e049      	b.n	8010f4a <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	0018      	movs	r0, r3
 8010eba:	f000 f859 	bl	8010f70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010ebe:	e044      	b.n	8010f4a <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d03b      	beq.n	8010f40 <I2C_ITError+0x1d4>
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	2b12      	cmp	r3, #18
 8010ecc:	d002      	beq.n	8010ed4 <I2C_ITError+0x168>
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	2b22      	cmp	r3, #34	@ 0x22
 8010ed2:	d135      	bne.n	8010f40 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	2380      	movs	r3, #128	@ 0x80
 8010edc:	021b      	lsls	r3, r3, #8
 8010ede:	401a      	ands	r2, r3
 8010ee0:	2380      	movs	r3, #128	@ 0x80
 8010ee2:	021b      	lsls	r3, r3, #8
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d107      	bne.n	8010ef8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	491e      	ldr	r1, [pc, #120]	@ (8010f6c <I2C_ITError+0x200>)
 8010ef4:	400a      	ands	r2, r1
 8010ef6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010efc:	0018      	movs	r0, r3
 8010efe:	f7fd fd22 	bl	800e946 <HAL_DMA_GetState>
 8010f02:	0003      	movs	r3, r0
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d016      	beq.n	8010f36 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f0c:	4a16      	ldr	r2, [pc, #88]	@ (8010f68 <I2C_ITError+0x1fc>)
 8010f0e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	2240      	movs	r2, #64	@ 0x40
 8010f14:	2100      	movs	r1, #0
 8010f16:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f1c:	0018      	movs	r0, r3
 8010f1e:	f7fd fc1d 	bl	800e75c <HAL_DMA_Abort_IT>
 8010f22:	1e03      	subs	r3, r0, #0
 8010f24:	d013      	beq.n	8010f4e <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f30:	0018      	movs	r0, r3
 8010f32:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010f34:	e00b      	b.n	8010f4e <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	0018      	movs	r0, r3
 8010f3a:	f000 f819 	bl	8010f70 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010f3e:	e006      	b.n	8010f4e <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	0018      	movs	r0, r3
 8010f44:	f000 f814 	bl	8010f70 <I2C_TreatErrorCallback>
  }
}
 8010f48:	e002      	b.n	8010f50 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8010f4a:	46c0      	nop			@ (mov r8, r8)
 8010f4c:	e000      	b.n	8010f50 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010f4e:	46c0      	nop			@ (mov r8, r8)
}
 8010f50:	46c0      	nop			@ (mov r8, r8)
 8010f52:	46bd      	mov	sp, r7
 8010f54:	b004      	add	sp, #16
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	ffff0000 	.word	0xffff0000
 8010f5c:	0800fe51 	.word	0x0800fe51
 8010f60:	00008003 	.word	0x00008003
 8010f64:	ffffbfff 	.word	0xffffbfff
 8010f68:	0801117b 	.word	0x0801117b
 8010f6c:	ffff7fff 	.word	0xffff7fff

08010f70 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b082      	sub	sp, #8
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2241      	movs	r2, #65	@ 0x41
 8010f7c:	5c9b      	ldrb	r3, [r3, r2]
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	2b60      	cmp	r3, #96	@ 0x60
 8010f82:	d10f      	bne.n	8010fa4 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2241      	movs	r2, #65	@ 0x41
 8010f88:	2120      	movs	r1, #32
 8010f8a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2240      	movs	r2, #64	@ 0x40
 8010f96:	2100      	movs	r1, #0
 8010f98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	0018      	movs	r0, r3
 8010f9e:	f7fe fe24 	bl	800fbea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010fa2:	e00a      	b.n	8010fba <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2240      	movs	r2, #64	@ 0x40
 8010fae:	2100      	movs	r1, #0
 8010fb0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	0018      	movs	r0, r3
 8010fb6:	f7fe fe10 	bl	800fbda <HAL_I2C_ErrorCallback>
}
 8010fba:	46c0      	nop			@ (mov r8, r8)
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	b002      	add	sp, #8
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8010fc2:	b580      	push	{r7, lr}
 8010fc4:	b082      	sub	sp, #8
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	699b      	ldr	r3, [r3, #24]
 8010fd0:	2202      	movs	r2, #2
 8010fd2:	4013      	ands	r3, r2
 8010fd4:	2b02      	cmp	r3, #2
 8010fd6:	d103      	bne.n	8010fe0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	699b      	ldr	r3, [r3, #24]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	4013      	ands	r3, r2
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d007      	beq.n	8010ffe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	699a      	ldr	r2, [r3, #24]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	430a      	orrs	r2, r1
 8010ffc:	619a      	str	r2, [r3, #24]
  }
}
 8010ffe:	46c0      	nop			@ (mov r8, r8)
 8011000:	46bd      	mov	sp, r7
 8011002:	b002      	add	sp, #8
 8011004:	bd80      	pop	{r7, pc}
	...

08011008 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011014:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4920      	ldr	r1, [pc, #128]	@ (80110a4 <I2C_DMAMasterTransmitCplt+0x9c>)
 8011022:	400a      	ands	r2, r1
 8011024:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801102a:	b29b      	uxth	r3, r3
 801102c:	2b00      	cmp	r3, #0
 801102e:	d105      	bne.n	801103c <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2120      	movs	r1, #32
 8011034:	0018      	movs	r0, r3
 8011036:	f000 fb4b 	bl	80116d0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 801103a:	e02e      	b.n	801109a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011044:	189a      	adds	r2, r3, r2
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801104e:	b29b      	uxth	r3, r3
 8011050:	2bff      	cmp	r3, #255	@ 0xff
 8011052:	d903      	bls.n	801105c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	22ff      	movs	r2, #255	@ 0xff
 8011058:	851a      	strh	r2, [r3, #40]	@ 0x28
 801105a:	e004      	b.n	8011066 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011060:	b29a      	uxth	r2, r3
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801106e:	0019      	movs	r1, r3
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	3328      	adds	r3, #40	@ 0x28
 8011076:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 801107c:	f7fd fac8 	bl	800e610 <HAL_DMA_Start_IT>
 8011080:	1e03      	subs	r3, r0, #0
 8011082:	d005      	beq.n	8011090 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	2110      	movs	r1, #16
 8011088:	0018      	movs	r0, r3
 801108a:	f7ff fe6f 	bl	8010d6c <I2C_ITError>
}
 801108e:	e004      	b.n	801109a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2140      	movs	r1, #64	@ 0x40
 8011094:	0018      	movs	r0, r3
 8011096:	f000 fb1b 	bl	80116d0 <I2C_Enable_IRQ>
}
 801109a:	46c0      	nop			@ (mov r8, r8)
 801109c:	46bd      	mov	sp, r7
 801109e:	b004      	add	sp, #16
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	46c0      	nop			@ (mov r8, r8)
 80110a4:	ffffbfff 	.word	0xffffbfff

080110a8 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110b4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	681a      	ldr	r2, [r3, #0]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4920      	ldr	r1, [pc, #128]	@ (8011144 <I2C_DMAMasterReceiveCplt+0x9c>)
 80110c2:	400a      	ands	r2, r1
 80110c4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d105      	bne.n	80110dc <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	2120      	movs	r1, #32
 80110d4:	0018      	movs	r0, r3
 80110d6:	f000 fafb 	bl	80116d0 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80110da:	e02e      	b.n	801113a <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80110e4:	189a      	adds	r2, r3, r2
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	2bff      	cmp	r3, #255	@ 0xff
 80110f2:	d903      	bls.n	80110fc <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	22ff      	movs	r2, #255	@ 0xff
 80110f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80110fa:	e004      	b.n	8011106 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011100:	b29a      	uxth	r2, r3
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	3324      	adds	r3, #36	@ 0x24
 8011110:	0019      	movs	r1, r3
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011116:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 801111c:	f7fd fa78 	bl	800e610 <HAL_DMA_Start_IT>
 8011120:	1e03      	subs	r3, r0, #0
 8011122:	d005      	beq.n	8011130 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2110      	movs	r1, #16
 8011128:	0018      	movs	r0, r3
 801112a:	f7ff fe1f 	bl	8010d6c <I2C_ITError>
}
 801112e:	e004      	b.n	801113a <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2140      	movs	r1, #64	@ 0x40
 8011134:	0018      	movs	r0, r3
 8011136:	f000 facb 	bl	80116d0 <I2C_Enable_IRQ>
}
 801113a:	46c0      	nop			@ (mov r8, r8)
 801113c:	46bd      	mov	sp, r7
 801113e:	b004      	add	sp, #16
 8011140:	bd80      	pop	{r7, pc}
 8011142:	46c0      	nop			@ (mov r8, r8)
 8011144:	ffff7fff 	.word	0xffff7fff

08011148 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011154:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	685a      	ldr	r2, [r3, #4]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	2180      	movs	r1, #128	@ 0x80
 8011162:	0209      	lsls	r1, r1, #8
 8011164:	430a      	orrs	r2, r1
 8011166:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2110      	movs	r1, #16
 801116c:	0018      	movs	r0, r3
 801116e:	f7ff fdfd 	bl	8010d6c <I2C_ITError>
}
 8011172:	46c0      	nop			@ (mov r8, r8)
 8011174:	46bd      	mov	sp, r7
 8011176:	b004      	add	sp, #16
 8011178:	bd80      	pop	{r7, pc}

0801117a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011186:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801118c:	2b00      	cmp	r3, #0
 801118e:	d003      	beq.n	8011198 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011194:	2200      	movs	r2, #0
 8011196:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801119c:	2b00      	cmp	r3, #0
 801119e:	d003      	beq.n	80111a8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111a4:	2200      	movs	r2, #0
 80111a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	0018      	movs	r0, r3
 80111ac:	f7ff fee0 	bl	8010f70 <I2C_TreatErrorCallback>
}
 80111b0:	46c0      	nop			@ (mov r8, r8)
 80111b2:	46bd      	mov	sp, r7
 80111b4:	b004      	add	sp, #16
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	603b      	str	r3, [r7, #0]
 80111c4:	1dfb      	adds	r3, r7, #7
 80111c6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80111c8:	e030      	b.n	801122c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	3301      	adds	r3, #1
 80111ce:	d02d      	beq.n	801122c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80111d0:	f7fc fce2 	bl	800db98 <HAL_GetTick>
 80111d4:	0002      	movs	r2, r0
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	683a      	ldr	r2, [r7, #0]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d302      	bcc.n	80111e6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d122      	bne.n	801122c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	699b      	ldr	r3, [r3, #24]
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	4013      	ands	r3, r2
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	1ad3      	subs	r3, r2, r3
 80111f4:	425a      	negs	r2, r3
 80111f6:	4153      	adcs	r3, r2
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	001a      	movs	r2, r3
 80111fc:	1dfb      	adds	r3, r7, #7
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	429a      	cmp	r2, r3
 8011202:	d113      	bne.n	801122c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011208:	2220      	movs	r2, #32
 801120a:	431a      	orrs	r2, r3
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2241      	movs	r2, #65	@ 0x41
 8011214:	2120      	movs	r1, #32
 8011216:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2242      	movs	r2, #66	@ 0x42
 801121c:	2100      	movs	r1, #0
 801121e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	2240      	movs	r2, #64	@ 0x40
 8011224:	2100      	movs	r1, #0
 8011226:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8011228:	2301      	movs	r3, #1
 801122a:	e00f      	b.n	801124c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	699b      	ldr	r3, [r3, #24]
 8011232:	68ba      	ldr	r2, [r7, #8]
 8011234:	4013      	ands	r3, r2
 8011236:	68ba      	ldr	r2, [r7, #8]
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	425a      	negs	r2, r3
 801123c:	4153      	adcs	r3, r2
 801123e:	b2db      	uxtb	r3, r3
 8011240:	001a      	movs	r2, r3
 8011242:	1dfb      	adds	r3, r7, #7
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	429a      	cmp	r2, r3
 8011248:	d0bf      	beq.n	80111ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801124a:	2300      	movs	r3, #0
}
 801124c:	0018      	movs	r0, r3
 801124e:	46bd      	mov	sp, r7
 8011250:	b004      	add	sp, #16
 8011252:	bd80      	pop	{r7, pc}

08011254 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b084      	sub	sp, #16
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011260:	e032      	b.n	80112c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	68b9      	ldr	r1, [r7, #8]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	0018      	movs	r0, r3
 801126a:	f000 f8ff 	bl	801146c <I2C_IsErrorOccurred>
 801126e:	1e03      	subs	r3, r0, #0
 8011270:	d001      	beq.n	8011276 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011272:	2301      	movs	r3, #1
 8011274:	e030      	b.n	80112d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	3301      	adds	r3, #1
 801127a:	d025      	beq.n	80112c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801127c:	f7fc fc8c 	bl	800db98 <HAL_GetTick>
 8011280:	0002      	movs	r2, r0
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	1ad3      	subs	r3, r2, r3
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	429a      	cmp	r2, r3
 801128a:	d302      	bcc.n	8011292 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d11a      	bne.n	80112c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	699b      	ldr	r3, [r3, #24]
 8011298:	2202      	movs	r2, #2
 801129a:	4013      	ands	r3, r2
 801129c:	2b02      	cmp	r3, #2
 801129e:	d013      	beq.n	80112c8 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80112a4:	2220      	movs	r2, #32
 80112a6:	431a      	orrs	r2, r3
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2241      	movs	r2, #65	@ 0x41
 80112b0:	2120      	movs	r1, #32
 80112b2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2242      	movs	r2, #66	@ 0x42
 80112b8:	2100      	movs	r1, #0
 80112ba:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2240      	movs	r2, #64	@ 0x40
 80112c0:	2100      	movs	r1, #0
 80112c2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80112c4:	2301      	movs	r3, #1
 80112c6:	e007      	b.n	80112d8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	699b      	ldr	r3, [r3, #24]
 80112ce:	2202      	movs	r2, #2
 80112d0:	4013      	ands	r3, r2
 80112d2:	2b02      	cmp	r3, #2
 80112d4:	d1c5      	bne.n	8011262 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	0018      	movs	r0, r3
 80112da:	46bd      	mov	sp, r7
 80112dc:	b004      	add	sp, #16
 80112de:	bd80      	pop	{r7, pc}

080112e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60f8      	str	r0, [r7, #12]
 80112e8:	60b9      	str	r1, [r7, #8]
 80112ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80112ec:	e02f      	b.n	801134e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80112ee:	687a      	ldr	r2, [r7, #4]
 80112f0:	68b9      	ldr	r1, [r7, #8]
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	0018      	movs	r0, r3
 80112f6:	f000 f8b9 	bl	801146c <I2C_IsErrorOccurred>
 80112fa:	1e03      	subs	r3, r0, #0
 80112fc:	d001      	beq.n	8011302 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80112fe:	2301      	movs	r3, #1
 8011300:	e02d      	b.n	801135e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011302:	f7fc fc49 	bl	800db98 <HAL_GetTick>
 8011306:	0002      	movs	r2, r0
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	68ba      	ldr	r2, [r7, #8]
 801130e:	429a      	cmp	r2, r3
 8011310:	d302      	bcc.n	8011318 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d11a      	bne.n	801134e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	699b      	ldr	r3, [r3, #24]
 801131e:	2220      	movs	r2, #32
 8011320:	4013      	ands	r3, r2
 8011322:	2b20      	cmp	r3, #32
 8011324:	d013      	beq.n	801134e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801132a:	2220      	movs	r2, #32
 801132c:	431a      	orrs	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2241      	movs	r2, #65	@ 0x41
 8011336:	2120      	movs	r1, #32
 8011338:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2242      	movs	r2, #66	@ 0x42
 801133e:	2100      	movs	r1, #0
 8011340:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2240      	movs	r2, #64	@ 0x40
 8011346:	2100      	movs	r1, #0
 8011348:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801134a:	2301      	movs	r3, #1
 801134c:	e007      	b.n	801135e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	2220      	movs	r2, #32
 8011356:	4013      	ands	r3, r2
 8011358:	2b20      	cmp	r3, #32
 801135a:	d1c8      	bne.n	80112ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801135c:	2300      	movs	r3, #0
}
 801135e:	0018      	movs	r0, r3
 8011360:	46bd      	mov	sp, r7
 8011362:	b004      	add	sp, #16
 8011364:	bd80      	pop	{r7, pc}
	...

08011368 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b084      	sub	sp, #16
 801136c:	af00      	add	r7, sp, #0
 801136e:	60f8      	str	r0, [r7, #12]
 8011370:	60b9      	str	r1, [r7, #8]
 8011372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011374:	e06b      	b.n	801144e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	68b9      	ldr	r1, [r7, #8]
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	0018      	movs	r0, r3
 801137e:	f000 f875 	bl	801146c <I2C_IsErrorOccurred>
 8011382:	1e03      	subs	r3, r0, #0
 8011384:	d001      	beq.n	801138a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8011386:	2301      	movs	r3, #1
 8011388:	e069      	b.n	801145e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	699b      	ldr	r3, [r3, #24]
 8011390:	2220      	movs	r2, #32
 8011392:	4013      	ands	r3, r2
 8011394:	2b20      	cmp	r3, #32
 8011396:	d138      	bne.n	801140a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	699b      	ldr	r3, [r3, #24]
 801139e:	2204      	movs	r2, #4
 80113a0:	4013      	ands	r3, r2
 80113a2:	2b04      	cmp	r3, #4
 80113a4:	d105      	bne.n	80113b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d001      	beq.n	80113b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80113ae:	2300      	movs	r3, #0
 80113b0:	e055      	b.n	801145e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	699b      	ldr	r3, [r3, #24]
 80113b8:	2210      	movs	r2, #16
 80113ba:	4013      	ands	r3, r2
 80113bc:	2b10      	cmp	r3, #16
 80113be:	d107      	bne.n	80113d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2210      	movs	r2, #16
 80113c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	2204      	movs	r2, #4
 80113cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80113ce:	e002      	b.n	80113d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	2200      	movs	r2, #0
 80113d4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2220      	movs	r2, #32
 80113dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	685a      	ldr	r2, [r3, #4]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	491f      	ldr	r1, [pc, #124]	@ (8011468 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80113ea:	400a      	ands	r2, r1
 80113ec:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2241      	movs	r2, #65	@ 0x41
 80113f2:	2120      	movs	r1, #32
 80113f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2242      	movs	r2, #66	@ 0x42
 80113fa:	2100      	movs	r1, #0
 80113fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2240      	movs	r2, #64	@ 0x40
 8011402:	2100      	movs	r1, #0
 8011404:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8011406:	2301      	movs	r3, #1
 8011408:	e029      	b.n	801145e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801140a:	f7fc fbc5 	bl	800db98 <HAL_GetTick>
 801140e:	0002      	movs	r2, r0
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	1ad3      	subs	r3, r2, r3
 8011414:	68ba      	ldr	r2, [r7, #8]
 8011416:	429a      	cmp	r2, r3
 8011418:	d302      	bcc.n	8011420 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d116      	bne.n	801144e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	699b      	ldr	r3, [r3, #24]
 8011426:	2204      	movs	r2, #4
 8011428:	4013      	ands	r3, r2
 801142a:	2b04      	cmp	r3, #4
 801142c:	d00f      	beq.n	801144e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011432:	2220      	movs	r2, #32
 8011434:	431a      	orrs	r2, r3
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	2241      	movs	r2, #65	@ 0x41
 801143e:	2120      	movs	r1, #32
 8011440:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	2240      	movs	r2, #64	@ 0x40
 8011446:	2100      	movs	r1, #0
 8011448:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 801144a:	2301      	movs	r3, #1
 801144c:	e007      	b.n	801145e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	699b      	ldr	r3, [r3, #24]
 8011454:	2204      	movs	r2, #4
 8011456:	4013      	ands	r3, r2
 8011458:	2b04      	cmp	r3, #4
 801145a:	d18c      	bne.n	8011376 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801145c:	2300      	movs	r3, #0
}
 801145e:	0018      	movs	r0, r3
 8011460:	46bd      	mov	sp, r7
 8011462:	b004      	add	sp, #16
 8011464:	bd80      	pop	{r7, pc}
 8011466:	46c0      	nop			@ (mov r8, r8)
 8011468:	fe00e800 	.word	0xfe00e800

0801146c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08a      	sub	sp, #40	@ 0x28
 8011470:	af00      	add	r7, sp, #0
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011478:	2327      	movs	r3, #39	@ 0x27
 801147a:	18fb      	adds	r3, r7, r3
 801147c:	2200      	movs	r2, #0
 801147e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	699b      	ldr	r3, [r3, #24]
 8011486:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8011488:	2300      	movs	r3, #0
 801148a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8011490:	69bb      	ldr	r3, [r7, #24]
 8011492:	2210      	movs	r2, #16
 8011494:	4013      	ands	r3, r2
 8011496:	d100      	bne.n	801149a <I2C_IsErrorOccurred+0x2e>
 8011498:	e079      	b.n	801158e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2210      	movs	r2, #16
 80114a0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80114a2:	e057      	b.n	8011554 <I2C_IsErrorOccurred+0xe8>
 80114a4:	2227      	movs	r2, #39	@ 0x27
 80114a6:	18bb      	adds	r3, r7, r2
 80114a8:	18ba      	adds	r2, r7, r2
 80114aa:	7812      	ldrb	r2, [r2, #0]
 80114ac:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	3301      	adds	r3, #1
 80114b2:	d04f      	beq.n	8011554 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80114b4:	f7fc fb70 	bl	800db98 <HAL_GetTick>
 80114b8:	0002      	movs	r2, r0
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	68ba      	ldr	r2, [r7, #8]
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d302      	bcc.n	80114ca <I2C_IsErrorOccurred+0x5e>
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d144      	bne.n	8011554 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	685a      	ldr	r2, [r3, #4]
 80114d0:	2380      	movs	r3, #128	@ 0x80
 80114d2:	01db      	lsls	r3, r3, #7
 80114d4:	4013      	ands	r3, r2
 80114d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80114d8:	2013      	movs	r0, #19
 80114da:	183b      	adds	r3, r7, r0
 80114dc:	68fa      	ldr	r2, [r7, #12]
 80114de:	2142      	movs	r1, #66	@ 0x42
 80114e0:	5c52      	ldrb	r2, [r2, r1]
 80114e2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	699a      	ldr	r2, [r3, #24]
 80114ea:	2380      	movs	r3, #128	@ 0x80
 80114ec:	021b      	lsls	r3, r3, #8
 80114ee:	401a      	ands	r2, r3
 80114f0:	2380      	movs	r3, #128	@ 0x80
 80114f2:	021b      	lsls	r3, r3, #8
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d126      	bne.n	8011546 <I2C_IsErrorOccurred+0xda>
 80114f8:	697a      	ldr	r2, [r7, #20]
 80114fa:	2380      	movs	r3, #128	@ 0x80
 80114fc:	01db      	lsls	r3, r3, #7
 80114fe:	429a      	cmp	r2, r3
 8011500:	d021      	beq.n	8011546 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8011502:	183b      	adds	r3, r7, r0
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	2b20      	cmp	r3, #32
 8011508:	d01d      	beq.n	8011546 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	685a      	ldr	r2, [r3, #4]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	2180      	movs	r1, #128	@ 0x80
 8011516:	01c9      	lsls	r1, r1, #7
 8011518:	430a      	orrs	r2, r1
 801151a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801151c:	f7fc fb3c 	bl	800db98 <HAL_GetTick>
 8011520:	0003      	movs	r3, r0
 8011522:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011524:	e00f      	b.n	8011546 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8011526:	f7fc fb37 	bl	800db98 <HAL_GetTick>
 801152a:	0002      	movs	r2, r0
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	2b19      	cmp	r3, #25
 8011532:	d908      	bls.n	8011546 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8011534:	6a3b      	ldr	r3, [r7, #32]
 8011536:	2220      	movs	r2, #32
 8011538:	4313      	orrs	r3, r2
 801153a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801153c:	2327      	movs	r3, #39	@ 0x27
 801153e:	18fb      	adds	r3, r7, r3
 8011540:	2201      	movs	r2, #1
 8011542:	701a      	strb	r2, [r3, #0]

              break;
 8011544:	e006      	b.n	8011554 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	699b      	ldr	r3, [r3, #24]
 801154c:	2220      	movs	r2, #32
 801154e:	4013      	ands	r3, r2
 8011550:	2b20      	cmp	r3, #32
 8011552:	d1e8      	bne.n	8011526 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	699b      	ldr	r3, [r3, #24]
 801155a:	2220      	movs	r2, #32
 801155c:	4013      	ands	r3, r2
 801155e:	2b20      	cmp	r3, #32
 8011560:	d004      	beq.n	801156c <I2C_IsErrorOccurred+0x100>
 8011562:	2327      	movs	r3, #39	@ 0x27
 8011564:	18fb      	adds	r3, r7, r3
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d09b      	beq.n	80114a4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801156c:	2327      	movs	r3, #39	@ 0x27
 801156e:	18fb      	adds	r3, r7, r3
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d103      	bne.n	801157e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	2220      	movs	r2, #32
 801157c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	2204      	movs	r2, #4
 8011582:	4313      	orrs	r3, r2
 8011584:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8011586:	2327      	movs	r3, #39	@ 0x27
 8011588:	18fb      	adds	r3, r7, r3
 801158a:	2201      	movs	r2, #1
 801158c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	699b      	ldr	r3, [r3, #24]
 8011594:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8011596:	69ba      	ldr	r2, [r7, #24]
 8011598:	2380      	movs	r3, #128	@ 0x80
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	4013      	ands	r3, r2
 801159e:	d00c      	beq.n	80115ba <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80115a0:	6a3b      	ldr	r3, [r7, #32]
 80115a2:	2201      	movs	r2, #1
 80115a4:	4313      	orrs	r3, r2
 80115a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2280      	movs	r2, #128	@ 0x80
 80115ae:	0052      	lsls	r2, r2, #1
 80115b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80115b2:	2327      	movs	r3, #39	@ 0x27
 80115b4:	18fb      	adds	r3, r7, r3
 80115b6:	2201      	movs	r2, #1
 80115b8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80115ba:	69ba      	ldr	r2, [r7, #24]
 80115bc:	2380      	movs	r3, #128	@ 0x80
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	4013      	ands	r3, r2
 80115c2:	d00c      	beq.n	80115de <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80115c4:	6a3b      	ldr	r3, [r7, #32]
 80115c6:	2208      	movs	r2, #8
 80115c8:	4313      	orrs	r3, r2
 80115ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	2280      	movs	r2, #128	@ 0x80
 80115d2:	00d2      	lsls	r2, r2, #3
 80115d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80115d6:	2327      	movs	r3, #39	@ 0x27
 80115d8:	18fb      	adds	r3, r7, r3
 80115da:	2201      	movs	r2, #1
 80115dc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80115de:	69ba      	ldr	r2, [r7, #24]
 80115e0:	2380      	movs	r3, #128	@ 0x80
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4013      	ands	r3, r2
 80115e6:	d00c      	beq.n	8011602 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80115e8:	6a3b      	ldr	r3, [r7, #32]
 80115ea:	2202      	movs	r2, #2
 80115ec:	4313      	orrs	r3, r2
 80115ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2280      	movs	r2, #128	@ 0x80
 80115f6:	0092      	lsls	r2, r2, #2
 80115f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80115fa:	2327      	movs	r3, #39	@ 0x27
 80115fc:	18fb      	adds	r3, r7, r3
 80115fe:	2201      	movs	r2, #1
 8011600:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8011602:	2327      	movs	r3, #39	@ 0x27
 8011604:	18fb      	adds	r3, r7, r3
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d01d      	beq.n	8011648 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	0018      	movs	r0, r3
 8011610:	f7ff fcd7 	bl	8010fc2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	685a      	ldr	r2, [r3, #4]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	490e      	ldr	r1, [pc, #56]	@ (8011658 <I2C_IsErrorOccurred+0x1ec>)
 8011620:	400a      	ands	r2, r1
 8011622:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011628:	6a3b      	ldr	r3, [r7, #32]
 801162a:	431a      	orrs	r2, r3
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	2241      	movs	r2, #65	@ 0x41
 8011634:	2120      	movs	r1, #32
 8011636:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	2242      	movs	r2, #66	@ 0x42
 801163c:	2100      	movs	r1, #0
 801163e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	2240      	movs	r2, #64	@ 0x40
 8011644:	2100      	movs	r1, #0
 8011646:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8011648:	2327      	movs	r3, #39	@ 0x27
 801164a:	18fb      	adds	r3, r7, r3
 801164c:	781b      	ldrb	r3, [r3, #0]
}
 801164e:	0018      	movs	r0, r3
 8011650:	46bd      	mov	sp, r7
 8011652:	b00a      	add	sp, #40	@ 0x28
 8011654:	bd80      	pop	{r7, pc}
 8011656:	46c0      	nop			@ (mov r8, r8)
 8011658:	fe00e800 	.word	0xfe00e800

0801165c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801165c:	b590      	push	{r4, r7, lr}
 801165e:	b087      	sub	sp, #28
 8011660:	af00      	add	r7, sp, #0
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	0008      	movs	r0, r1
 8011666:	0011      	movs	r1, r2
 8011668:	607b      	str	r3, [r7, #4]
 801166a:	240a      	movs	r4, #10
 801166c:	193b      	adds	r3, r7, r4
 801166e:	1c02      	adds	r2, r0, #0
 8011670:	801a      	strh	r2, [r3, #0]
 8011672:	2009      	movs	r0, #9
 8011674:	183b      	adds	r3, r7, r0
 8011676:	1c0a      	adds	r2, r1, #0
 8011678:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801167a:	193b      	adds	r3, r7, r4
 801167c:	881b      	ldrh	r3, [r3, #0]
 801167e:	059b      	lsls	r3, r3, #22
 8011680:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011682:	183b      	adds	r3, r7, r0
 8011684:	781b      	ldrb	r3, [r3, #0]
 8011686:	0419      	lsls	r1, r3, #16
 8011688:	23ff      	movs	r3, #255	@ 0xff
 801168a:	041b      	lsls	r3, r3, #16
 801168c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801168e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8011694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011696:	4313      	orrs	r3, r2
 8011698:	005b      	lsls	r3, r3, #1
 801169a:	085b      	lsrs	r3, r3, #1
 801169c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80116a6:	0d51      	lsrs	r1, r2, #21
 80116a8:	2280      	movs	r2, #128	@ 0x80
 80116aa:	00d2      	lsls	r2, r2, #3
 80116ac:	400a      	ands	r2, r1
 80116ae:	4907      	ldr	r1, [pc, #28]	@ (80116cc <I2C_TransferConfig+0x70>)
 80116b0:	430a      	orrs	r2, r1
 80116b2:	43d2      	mvns	r2, r2
 80116b4:	401a      	ands	r2, r3
 80116b6:	0011      	movs	r1, r2
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	430a      	orrs	r2, r1
 80116c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80116c2:	46c0      	nop			@ (mov r8, r8)
 80116c4:	46bd      	mov	sp, r7
 80116c6:	b007      	add	sp, #28
 80116c8:	bd90      	pop	{r4, r7, pc}
 80116ca:	46c0      	nop			@ (mov r8, r8)
 80116cc:	03ff63ff 	.word	0x03ff63ff

080116d0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	000a      	movs	r2, r1
 80116da:	1cbb      	adds	r3, r7, #2
 80116dc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80116de:	2300      	movs	r3, #0
 80116e0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80116e6:	4b3e      	ldr	r3, [pc, #248]	@ (80117e0 <I2C_Enable_IRQ+0x110>)
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d035      	beq.n	8011758 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80116f0:	4b3c      	ldr	r3, [pc, #240]	@ (80117e4 <I2C_Enable_IRQ+0x114>)
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d030      	beq.n	8011758 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80116fa:	4b3b      	ldr	r3, [pc, #236]	@ (80117e8 <I2C_Enable_IRQ+0x118>)
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d02b      	beq.n	8011758 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011700:	1cbb      	adds	r3, r7, #2
 8011702:	2200      	movs	r2, #0
 8011704:	5e9b      	ldrsh	r3, [r3, r2]
 8011706:	2b00      	cmp	r3, #0
 8011708:	da03      	bge.n	8011712 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	22b8      	movs	r2, #184	@ 0xb8
 801170e:	4313      	orrs	r3, r2
 8011710:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8011712:	1cbb      	adds	r3, r7, #2
 8011714:	881b      	ldrh	r3, [r3, #0]
 8011716:	2201      	movs	r2, #1
 8011718:	4013      	ands	r3, r2
 801171a:	d003      	beq.n	8011724 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	22f2      	movs	r2, #242	@ 0xf2
 8011720:	4313      	orrs	r3, r2
 8011722:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8011724:	1cbb      	adds	r3, r7, #2
 8011726:	881b      	ldrh	r3, [r3, #0]
 8011728:	2202      	movs	r2, #2
 801172a:	4013      	ands	r3, r2
 801172c:	d003      	beq.n	8011736 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	22f4      	movs	r2, #244	@ 0xf4
 8011732:	4313      	orrs	r3, r2
 8011734:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011736:	1cbb      	adds	r3, r7, #2
 8011738:	881b      	ldrh	r3, [r3, #0]
 801173a:	2b10      	cmp	r3, #16
 801173c:	d103      	bne.n	8011746 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	2290      	movs	r2, #144	@ 0x90
 8011742:	4313      	orrs	r3, r2
 8011744:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011746:	1cbb      	adds	r3, r7, #2
 8011748:	881b      	ldrh	r3, [r3, #0]
 801174a:	2b20      	cmp	r3, #32
 801174c:	d13c      	bne.n	80117c8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2220      	movs	r2, #32
 8011752:	4313      	orrs	r3, r2
 8011754:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011756:	e037      	b.n	80117c8 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011758:	1cbb      	adds	r3, r7, #2
 801175a:	2200      	movs	r2, #0
 801175c:	5e9b      	ldrsh	r3, [r3, r2]
 801175e:	2b00      	cmp	r3, #0
 8011760:	da03      	bge.n	801176a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	22b8      	movs	r2, #184	@ 0xb8
 8011766:	4313      	orrs	r3, r2
 8011768:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 801176a:	1cbb      	adds	r3, r7, #2
 801176c:	881b      	ldrh	r3, [r3, #0]
 801176e:	2201      	movs	r2, #1
 8011770:	4013      	ands	r3, r2
 8011772:	d003      	beq.n	801177c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	22f2      	movs	r2, #242	@ 0xf2
 8011778:	4313      	orrs	r3, r2
 801177a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801177c:	1cbb      	adds	r3, r7, #2
 801177e:	881b      	ldrh	r3, [r3, #0]
 8011780:	2202      	movs	r2, #2
 8011782:	4013      	ands	r3, r2
 8011784:	d003      	beq.n	801178e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	22f4      	movs	r2, #244	@ 0xf4
 801178a:	4313      	orrs	r3, r2
 801178c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 801178e:	1cbb      	adds	r3, r7, #2
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	2b10      	cmp	r3, #16
 8011794:	d103      	bne.n	801179e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	2290      	movs	r2, #144	@ 0x90
 801179a:	4313      	orrs	r3, r2
 801179c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 801179e:	1cbb      	adds	r3, r7, #2
 80117a0:	881b      	ldrh	r3, [r3, #0]
 80117a2:	2b20      	cmp	r3, #32
 80117a4:	d103      	bne.n	80117ae <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2260      	movs	r2, #96	@ 0x60
 80117aa:	4313      	orrs	r3, r2
 80117ac:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80117b2:	4b0d      	ldr	r3, [pc, #52]	@ (80117e8 <I2C_Enable_IRQ+0x118>)
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d007      	beq.n	80117c8 <I2C_Enable_IRQ+0xf8>
 80117b8:	1cbb      	adds	r3, r7, #2
 80117ba:	881b      	ldrh	r3, [r3, #0]
 80117bc:	2b40      	cmp	r3, #64	@ 0x40
 80117be:	d103      	bne.n	80117c8 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2240      	movs	r2, #64	@ 0x40
 80117c4:	4313      	orrs	r3, r2
 80117c6:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	6819      	ldr	r1, [r3, #0]
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	430a      	orrs	r2, r1
 80117d6:	601a      	str	r2, [r3, #0]
}
 80117d8:	46c0      	nop			@ (mov r8, r8)
 80117da:	46bd      	mov	sp, r7
 80117dc:	b004      	add	sp, #16
 80117de:	bd80      	pop	{r7, pc}
 80117e0:	08010051 	.word	0x08010051
 80117e4:	08010481 	.word	0x08010481
 80117e8:	08010249 	.word	0x08010249

080117ec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	000a      	movs	r2, r1
 80117f6:	1cbb      	adds	r3, r7, #2
 80117f8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80117fa:	2300      	movs	r3, #0
 80117fc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80117fe:	1cbb      	adds	r3, r7, #2
 8011800:	881b      	ldrh	r3, [r3, #0]
 8011802:	2201      	movs	r2, #1
 8011804:	4013      	ands	r3, r2
 8011806:	d010      	beq.n	801182a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2242      	movs	r2, #66	@ 0x42
 801180c:	4313      	orrs	r3, r2
 801180e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2241      	movs	r2, #65	@ 0x41
 8011814:	5c9b      	ldrb	r3, [r3, r2]
 8011816:	b2db      	uxtb	r3, r3
 8011818:	001a      	movs	r2, r3
 801181a:	2328      	movs	r3, #40	@ 0x28
 801181c:	4013      	ands	r3, r2
 801181e:	2b28      	cmp	r3, #40	@ 0x28
 8011820:	d003      	beq.n	801182a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	22b0      	movs	r2, #176	@ 0xb0
 8011826:	4313      	orrs	r3, r2
 8011828:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 801182a:	1cbb      	adds	r3, r7, #2
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	2202      	movs	r2, #2
 8011830:	4013      	ands	r3, r2
 8011832:	d010      	beq.n	8011856 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2244      	movs	r2, #68	@ 0x44
 8011838:	4313      	orrs	r3, r2
 801183a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	2241      	movs	r2, #65	@ 0x41
 8011840:	5c9b      	ldrb	r3, [r3, r2]
 8011842:	b2db      	uxtb	r3, r3
 8011844:	001a      	movs	r2, r3
 8011846:	2328      	movs	r3, #40	@ 0x28
 8011848:	4013      	ands	r3, r2
 801184a:	2b28      	cmp	r3, #40	@ 0x28
 801184c:	d003      	beq.n	8011856 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	22b0      	movs	r2, #176	@ 0xb0
 8011852:	4313      	orrs	r3, r2
 8011854:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8011856:	1cbb      	adds	r3, r7, #2
 8011858:	2200      	movs	r2, #0
 801185a:	5e9b      	ldrsh	r3, [r3, r2]
 801185c:	2b00      	cmp	r3, #0
 801185e:	da03      	bge.n	8011868 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	22b8      	movs	r2, #184	@ 0xb8
 8011864:	4313      	orrs	r3, r2
 8011866:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8011868:	1cbb      	adds	r3, r7, #2
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	2b10      	cmp	r3, #16
 801186e:	d103      	bne.n	8011878 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2290      	movs	r2, #144	@ 0x90
 8011874:	4313      	orrs	r3, r2
 8011876:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8011878:	1cbb      	adds	r3, r7, #2
 801187a:	881b      	ldrh	r3, [r3, #0]
 801187c:	2b20      	cmp	r3, #32
 801187e:	d103      	bne.n	8011888 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2220      	movs	r2, #32
 8011884:	4313      	orrs	r3, r2
 8011886:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8011888:	1cbb      	adds	r3, r7, #2
 801188a:	881b      	ldrh	r3, [r3, #0]
 801188c:	2b40      	cmp	r3, #64	@ 0x40
 801188e:	d103      	bne.n	8011898 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	2240      	movs	r2, #64	@ 0x40
 8011894:	4313      	orrs	r3, r2
 8011896:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	681a      	ldr	r2, [r3, #0]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	43d9      	mvns	r1, r3
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	400a      	ands	r2, r1
 80118a8:	601a      	str	r2, [r3, #0]
}
 80118aa:	46c0      	nop			@ (mov r8, r8)
 80118ac:	46bd      	mov	sp, r7
 80118ae:	b004      	add	sp, #16
 80118b0:	bd80      	pop	{r7, pc}
	...

080118b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2241      	movs	r2, #65	@ 0x41
 80118c2:	5c9b      	ldrb	r3, [r3, r2]
 80118c4:	b2db      	uxtb	r3, r3
 80118c6:	2b20      	cmp	r3, #32
 80118c8:	d138      	bne.n	801193c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2240      	movs	r2, #64	@ 0x40
 80118ce:	5c9b      	ldrb	r3, [r3, r2]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d101      	bne.n	80118d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80118d4:	2302      	movs	r3, #2
 80118d6:	e032      	b.n	801193e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2240      	movs	r2, #64	@ 0x40
 80118dc:	2101      	movs	r1, #1
 80118de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2241      	movs	r2, #65	@ 0x41
 80118e4:	2124      	movs	r1, #36	@ 0x24
 80118e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2101      	movs	r1, #1
 80118f4:	438a      	bics	r2, r1
 80118f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	681a      	ldr	r2, [r3, #0]
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	4911      	ldr	r1, [pc, #68]	@ (8011948 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8011904:	400a      	ands	r2, r1
 8011906:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	6819      	ldr	r1, [r3, #0]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	683a      	ldr	r2, [r7, #0]
 8011914:	430a      	orrs	r2, r1
 8011916:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2101      	movs	r1, #1
 8011924:	430a      	orrs	r2, r1
 8011926:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2241      	movs	r2, #65	@ 0x41
 801192c:	2120      	movs	r1, #32
 801192e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2240      	movs	r2, #64	@ 0x40
 8011934:	2100      	movs	r1, #0
 8011936:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8011938:	2300      	movs	r3, #0
 801193a:	e000      	b.n	801193e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801193c:	2302      	movs	r3, #2
  }
}
 801193e:	0018      	movs	r0, r3
 8011940:	46bd      	mov	sp, r7
 8011942:	b002      	add	sp, #8
 8011944:	bd80      	pop	{r7, pc}
 8011946:	46c0      	nop			@ (mov r8, r8)
 8011948:	ffffefff 	.word	0xffffefff

0801194c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2241      	movs	r2, #65	@ 0x41
 801195a:	5c9b      	ldrb	r3, [r3, r2]
 801195c:	b2db      	uxtb	r3, r3
 801195e:	2b20      	cmp	r3, #32
 8011960:	d139      	bne.n	80119d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2240      	movs	r2, #64	@ 0x40
 8011966:	5c9b      	ldrb	r3, [r3, r2]
 8011968:	2b01      	cmp	r3, #1
 801196a:	d101      	bne.n	8011970 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801196c:	2302      	movs	r3, #2
 801196e:	e033      	b.n	80119d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2240      	movs	r2, #64	@ 0x40
 8011974:	2101      	movs	r1, #1
 8011976:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2241      	movs	r2, #65	@ 0x41
 801197c:	2124      	movs	r1, #36	@ 0x24
 801197e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2101      	movs	r1, #1
 801198c:	438a      	bics	r2, r1
 801198e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	4a11      	ldr	r2, [pc, #68]	@ (80119e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 801199c:	4013      	ands	r3, r2
 801199e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	021b      	lsls	r3, r3, #8
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2101      	movs	r1, #1
 80119be:	430a      	orrs	r2, r1
 80119c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	2241      	movs	r2, #65	@ 0x41
 80119c6:	2120      	movs	r1, #32
 80119c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2240      	movs	r2, #64	@ 0x40
 80119ce:	2100      	movs	r1, #0
 80119d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80119d2:	2300      	movs	r3, #0
 80119d4:	e000      	b.n	80119d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80119d6:	2302      	movs	r3, #2
  }
}
 80119d8:	0018      	movs	r0, r3
 80119da:	46bd      	mov	sp, r7
 80119dc:	b004      	add	sp, #16
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	fffff0ff 	.word	0xfffff0ff

080119e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b088      	sub	sp, #32
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d101      	bne.n	80119f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80119f2:	2301      	movs	r3, #1
 80119f4:	e0e1      	b.n	8011bba <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2235      	movs	r2, #53	@ 0x35
 80119fa:	5c9b      	ldrb	r3, [r3, r2]
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d107      	bne.n	8011a12 <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2234      	movs	r2, #52	@ 0x34
 8011a06:	2100      	movs	r1, #0
 8011a08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	0018      	movs	r0, r3
 8011a0e:	f7f5 fd19 	bl	8007444 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2235      	movs	r2, #53	@ 0x35
 8011a16:	2102      	movs	r1, #2
 8011a18:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	69da      	ldr	r2, [r3, #28]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	4967      	ldr	r1, [pc, #412]	@ (8011bc4 <HAL_I2S_Init+0x1e0>)
 8011a26:	400a      	ands	r2, r1
 8011a28:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2202      	movs	r2, #2
 8011a30:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	695b      	ldr	r3, [r3, #20]
 8011a36:	2b02      	cmp	r3, #2
 8011a38:	d073      	beq.n	8011b22 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	68db      	ldr	r3, [r3, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d102      	bne.n	8011a48 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8011a42:	2310      	movs	r3, #16
 8011a44:	617b      	str	r3, [r7, #20]
 8011a46:	e001      	b.n	8011a4c <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8011a48:	2320      	movs	r3, #32
 8011a4a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	689b      	ldr	r3, [r3, #8]
 8011a50:	2b20      	cmp	r3, #32
 8011a52:	d802      	bhi.n	8011a5a <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	005b      	lsls	r3, r3, #1
 8011a58:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 8011a5a:	f002 fec3 	bl	80147e4 <HAL_RCC_GetSysClockFreq>
 8011a5e:	0003      	movs	r3, r0
 8011a60:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	691a      	ldr	r2, [r3, #16]
 8011a66:	2380      	movs	r3, #128	@ 0x80
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	429a      	cmp	r2, r3
 8011a6c:	d131      	bne.n	8011ad2 <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d016      	beq.n	8011aa4 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	0019      	movs	r1, r3
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f7ee fb91 	bl	80001a4 <__udivsi3>
 8011a82:	0003      	movs	r3, r0
 8011a84:	001a      	movs	r2, r3
 8011a86:	0013      	movs	r3, r2
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	189b      	adds	r3, r3, r2
 8011a8c:	005b      	lsls	r3, r3, #1
 8011a8e:	001a      	movs	r2, r3
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	695b      	ldr	r3, [r3, #20]
 8011a94:	0019      	movs	r1, r3
 8011a96:	0010      	movs	r0, r2
 8011a98:	f7ee fb84 	bl	80001a4 <__udivsi3>
 8011a9c:	0003      	movs	r3, r0
 8011a9e:	3305      	adds	r3, #5
 8011aa0:	613b      	str	r3, [r7, #16]
 8011aa2:	e02a      	b.n	8011afa <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	00db      	lsls	r3, r3, #3
 8011aa8:	0019      	movs	r1, r3
 8011aaa:	68f8      	ldr	r0, [r7, #12]
 8011aac:	f7ee fb7a 	bl	80001a4 <__udivsi3>
 8011ab0:	0003      	movs	r3, r0
 8011ab2:	001a      	movs	r2, r3
 8011ab4:	0013      	movs	r3, r2
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	189b      	adds	r3, r3, r2
 8011aba:	005b      	lsls	r3, r3, #1
 8011abc:	001a      	movs	r2, r3
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	695b      	ldr	r3, [r3, #20]
 8011ac2:	0019      	movs	r1, r3
 8011ac4:	0010      	movs	r0, r2
 8011ac6:	f7ee fb6d 	bl	80001a4 <__udivsi3>
 8011aca:	0003      	movs	r3, r0
 8011acc:	3305      	adds	r3, #5
 8011ace:	613b      	str	r3, [r7, #16]
 8011ad0:	e013      	b.n	8011afa <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8011ad2:	6979      	ldr	r1, [r7, #20]
 8011ad4:	68f8      	ldr	r0, [r7, #12]
 8011ad6:	f7ee fb65 	bl	80001a4 <__udivsi3>
 8011ada:	0003      	movs	r3, r0
 8011adc:	001a      	movs	r2, r3
 8011ade:	0013      	movs	r3, r2
 8011ae0:	009b      	lsls	r3, r3, #2
 8011ae2:	189b      	adds	r3, r3, r2
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	001a      	movs	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	695b      	ldr	r3, [r3, #20]
 8011aec:	0019      	movs	r1, r3
 8011aee:	0010      	movs	r0, r2
 8011af0:	f7ee fb58 	bl	80001a4 <__udivsi3>
 8011af4:	0003      	movs	r3, r0
 8011af6:	3305      	adds	r3, #5
 8011af8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8011afa:	693b      	ldr	r3, [r7, #16]
 8011afc:	210a      	movs	r1, #10
 8011afe:	0018      	movs	r0, r3
 8011b00:	f7ee fb50 	bl	80001a4 <__udivsi3>
 8011b04:	0003      	movs	r3, r0
 8011b06:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8011b08:	693b      	ldr	r3, [r7, #16]
 8011b0a:	2201      	movs	r2, #1
 8011b0c:	4013      	ands	r3, r2
 8011b0e:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8011b10:	693a      	ldr	r2, [r7, #16]
 8011b12:	69bb      	ldr	r3, [r7, #24]
 8011b14:	1ad3      	subs	r3, r2, r3
 8011b16:	085b      	lsrs	r3, r3, #1
 8011b18:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8011b1a:	69bb      	ldr	r3, [r7, #24]
 8011b1c:	021b      	lsls	r3, r3, #8
 8011b1e:	61bb      	str	r3, [r7, #24]
 8011b20:	e003      	b.n	8011b2a <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8011b22:	2302      	movs	r3, #2
 8011b24:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8011b26:	2300      	movs	r3, #0
 8011b28:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	d902      	bls.n	8011b36 <HAL_I2S_Init+0x152>
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	2bff      	cmp	r3, #255	@ 0xff
 8011b34:	d907      	bls.n	8011b46 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b3a:	2210      	movs	r2, #16
 8011b3c:	431a      	orrs	r2, r3
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 8011b42:	2301      	movs	r3, #1
 8011b44:	e039      	b.n	8011bba <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	691a      	ldr	r2, [r3, #16]
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	431a      	orrs	r2, r3
 8011b4e:	0011      	movs	r1, r2
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	69fa      	ldr	r2, [r7, #28]
 8011b56:	430a      	orrs	r2, r1
 8011b58:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	69db      	ldr	r3, [r3, #28]
 8011b60:	4a18      	ldr	r2, [pc, #96]	@ (8011bc4 <HAL_I2S_Init+0x1e0>)
 8011b62:	401a      	ands	r2, r3
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6859      	ldr	r1, [r3, #4]
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	689b      	ldr	r3, [r3, #8]
 8011b6c:	4319      	orrs	r1, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	4319      	orrs	r1, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	699b      	ldr	r3, [r3, #24]
 8011b78:	430b      	orrs	r3, r1
 8011b7a:	431a      	orrs	r2, r3
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2180      	movs	r1, #128	@ 0x80
 8011b82:	0109      	lsls	r1, r1, #4
 8011b84:	430a      	orrs	r2, r1
 8011b86:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	689b      	ldr	r3, [r3, #8]
 8011b8c:	2b30      	cmp	r3, #48	@ 0x30
 8011b8e:	d003      	beq.n	8011b98 <HAL_I2S_Init+0x1b4>
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	689b      	ldr	r3, [r3, #8]
 8011b94:	2bb0      	cmp	r3, #176	@ 0xb0
 8011b96:	d108      	bne.n	8011baa <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	69da      	ldr	r2, [r3, #28]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2180      	movs	r1, #128	@ 0x80
 8011ba4:	0149      	lsls	r1, r1, #5
 8011ba6:	430a      	orrs	r2, r1
 8011ba8:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2200      	movs	r2, #0
 8011bae:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2235      	movs	r2, #53	@ 0x35
 8011bb4:	2101      	movs	r1, #1
 8011bb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8011bb8:	2300      	movs	r3, #0
}
 8011bba:	0018      	movs	r0, r3
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	b008      	add	sp, #32
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	46c0      	nop			@ (mov r8, r8)
 8011bc4:	fffff040 	.word	0xfffff040

08011bc8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b086      	sub	sp, #24
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	1dbb      	adds	r3, r7, #6
 8011bd4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d003      	beq.n	8011be4 <HAL_I2S_Receive_DMA+0x1c>
 8011bdc:	1dbb      	adds	r3, r7, #6
 8011bde:	881b      	ldrh	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d101      	bne.n	8011be8 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 8011be4:	2301      	movs	r3, #1
 8011be6:	e0a6      	b.n	8011d36 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2234      	movs	r2, #52	@ 0x34
 8011bec:	5c9b      	ldrb	r3, [r3, r2]
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d101      	bne.n	8011bf8 <HAL_I2S_Receive_DMA+0x30>
 8011bf4:	2302      	movs	r3, #2
 8011bf6:	e09e      	b.n	8011d36 <HAL_I2S_Receive_DMA+0x16e>
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2234      	movs	r2, #52	@ 0x34
 8011bfc:	2101      	movs	r1, #1
 8011bfe:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2235      	movs	r2, #53	@ 0x35
 8011c04:	5c9b      	ldrb	r3, [r3, r2]
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d005      	beq.n	8011c18 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	2234      	movs	r2, #52	@ 0x34
 8011c10:	2100      	movs	r1, #0
 8011c12:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 8011c14:	2302      	movs	r3, #2
 8011c16:	e08e      	b.n	8011d36 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	2235      	movs	r2, #53	@ 0x35
 8011c1c:	2104      	movs	r1, #4
 8011c1e:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2200      	movs	r2, #0
 8011c24:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	68ba      	ldr	r2, [r7, #8]
 8011c2a:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	69db      	ldr	r3, [r3, #28]
 8011c32:	2207      	movs	r2, #7
 8011c34:	4013      	ands	r3, r2
 8011c36:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	2b03      	cmp	r3, #3
 8011c3c:	d002      	beq.n	8011c44 <HAL_I2S_Receive_DMA+0x7c>
 8011c3e:	697b      	ldr	r3, [r7, #20]
 8011c40:	2b05      	cmp	r3, #5
 8011c42:	d10c      	bne.n	8011c5e <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 8011c44:	1dbb      	adds	r3, r7, #6
 8011c46:	881b      	ldrh	r3, [r3, #0]
 8011c48:	18db      	adds	r3, r3, r3
 8011c4a:	b29a      	uxth	r2, r3
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 8011c50:	1dbb      	adds	r3, r7, #6
 8011c52:	881b      	ldrh	r3, [r3, #0]
 8011c54:	18db      	adds	r3, r3, r3
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011c5c:	e007      	b.n	8011c6e <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	1dba      	adds	r2, r7, #6
 8011c62:	8812      	ldrh	r2, [r2, #0]
 8011c64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	1dba      	adds	r2, r7, #6
 8011c6a:	8812      	ldrh	r2, [r2, #0]
 8011c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c72:	4a33      	ldr	r2, [pc, #204]	@ (8011d40 <HAL_I2S_Receive_DMA+0x178>)
 8011c74:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c7a:	4a32      	ldr	r2, [pc, #200]	@ (8011d44 <HAL_I2S_Receive_DMA+0x17c>)
 8011c7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011c82:	4a31      	ldr	r2, [pc, #196]	@ (8011d48 <HAL_I2S_Receive_DMA+0x180>)
 8011c84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	69da      	ldr	r2, [r3, #28]
 8011c8c:	23c0      	movs	r3, #192	@ 0xc0
 8011c8e:	009b      	lsls	r3, r3, #2
 8011c90:	401a      	ands	r2, r3
 8011c92:	23c0      	movs	r3, #192	@ 0xc0
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d10a      	bne.n	8011cb0 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	613b      	str	r3, [r7, #16]
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	613b      	str	r3, [r7, #16]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	689b      	ldr	r3, [r3, #8]
 8011cac:	613b      	str	r3, [r7, #16]
 8011cae:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	330c      	adds	r3, #12
 8011cba:	0019      	movs	r1, r3
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cc0:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011cc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8011cc8:	f7fc fca2 	bl	800e610 <HAL_DMA_Start_IT>
 8011ccc:	1e03      	subs	r3, r0, #0
 8011cce:	d00f      	beq.n	8011cf0 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cd4:	2208      	movs	r2, #8
 8011cd6:	431a      	orrs	r2, r3
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2235      	movs	r2, #53	@ 0x35
 8011ce0:	2101      	movs	r1, #1
 8011ce2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2234      	movs	r2, #52	@ 0x34
 8011ce8:	2100      	movs	r1, #0
 8011cea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8011cec:	2301      	movs	r3, #1
 8011cee:	e022      	b.n	8011d36 <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	69da      	ldr	r2, [r3, #28]
 8011cf6:	2380      	movs	r3, #128	@ 0x80
 8011cf8:	00db      	lsls	r3, r3, #3
 8011cfa:	4013      	ands	r3, r2
 8011cfc:	d108      	bne.n	8011d10 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	69da      	ldr	r2, [r3, #28]
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	2180      	movs	r1, #128	@ 0x80
 8011d0a:	00c9      	lsls	r1, r1, #3
 8011d0c:	430a      	orrs	r2, r1
 8011d0e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	685b      	ldr	r3, [r3, #4]
 8011d16:	2201      	movs	r2, #1
 8011d18:	4013      	ands	r3, r2
 8011d1a:	d107      	bne.n	8011d2c <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	685a      	ldr	r2, [r3, #4]
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	2101      	movs	r1, #1
 8011d28:	430a      	orrs	r2, r1
 8011d2a:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2234      	movs	r2, #52	@ 0x34
 8011d30:	2100      	movs	r1, #0
 8011d32:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 8011d34:	2300      	movs	r3, #0
}
 8011d36:	0018      	movs	r0, r3
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	b006      	add	sp, #24
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	46c0      	nop			@ (mov r8, r8)
 8011d40:	08011f29 	.word	0x08011f29
 8011d44:	08011ee5 	.word	0x08011ee5
 8011d48:	08011f47 	.word	0x08011f47

08011d4c <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b086      	sub	sp, #24
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011d54:	2317      	movs	r3, #23
 8011d56:	18fb      	adds	r3, r7, r3
 8011d58:	2200      	movs	r2, #0
 8011d5a:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685a      	ldr	r2, [r3, #4]
 8011d60:	2380      	movs	r3, #128	@ 0x80
 8011d62:	009b      	lsls	r3, r3, #2
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d003      	beq.n	8011d70 <HAL_I2S_DMAStop+0x24>
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d158      	bne.n	8011e22 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d010      	beq.n	8011d9a <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d7c:	0018      	movs	r0, r3
 8011d7e:	f7fc fcad 	bl	800e6dc <HAL_DMA_Abort>
 8011d82:	1e03      	subs	r3, r0, #0
 8011d84:	d009      	beq.n	8011d9a <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d8a:	2208      	movs	r2, #8
 8011d8c:	431a      	orrs	r2, r3
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8011d92:	2317      	movs	r3, #23
 8011d94:	18fb      	adds	r3, r7, r3
 8011d96:	2201      	movs	r2, #1
 8011d98:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	2364      	movs	r3, #100	@ 0x64
 8011d9e:	2201      	movs	r2, #1
 8011da0:	2102      	movs	r1, #2
 8011da2:	f000 f8f7 	bl	8011f94 <I2S_WaitFlagStateUntilTimeout>
 8011da6:	1e03      	subs	r3, r0, #0
 8011da8:	d00d      	beq.n	8011dc6 <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dae:	2201      	movs	r2, #1
 8011db0:	431a      	orrs	r2, r3
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2235      	movs	r2, #53	@ 0x35
 8011dba:	2101      	movs	r1, #1
 8011dbc:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8011dbe:	2317      	movs	r3, #23
 8011dc0:	18fb      	adds	r3, r7, r3
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	2364      	movs	r3, #100	@ 0x64
 8011dca:	2200      	movs	r2, #0
 8011dcc:	2180      	movs	r1, #128	@ 0x80
 8011dce:	f000 f8e1 	bl	8011f94 <I2S_WaitFlagStateUntilTimeout>
 8011dd2:	1e03      	subs	r3, r0, #0
 8011dd4:	d00d      	beq.n	8011df2 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dda:	2201      	movs	r2, #1
 8011ddc:	431a      	orrs	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	2235      	movs	r2, #53	@ 0x35
 8011de6:	2101      	movs	r1, #1
 8011de8:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8011dea:	2317      	movs	r3, #23
 8011dec:	18fb      	adds	r3, r7, r3
 8011dee:	2201      	movs	r2, #1
 8011df0:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	69da      	ldr	r2, [r3, #28]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4938      	ldr	r1, [pc, #224]	@ (8011ee0 <HAL_I2S_DMAStop+0x194>)
 8011dfe:	400a      	ands	r2, r1
 8011e00:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8011e02:	2300      	movs	r3, #0
 8011e04:	613b      	str	r3, [r7, #16]
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	689b      	ldr	r3, [r3, #8]
 8011e0c:	613b      	str	r3, [r7, #16]
 8011e0e:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	685a      	ldr	r2, [r3, #4]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2102      	movs	r1, #2
 8011e1c:	438a      	bics	r2, r1
 8011e1e:	605a      	str	r2, [r3, #4]
 8011e20:	e053      	b.n	8011eca <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	685a      	ldr	r2, [r3, #4]
 8011e26:	23c0      	movs	r3, #192	@ 0xc0
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d005      	beq.n	8011e3a <HAL_I2S_DMAStop+0xee>
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	685a      	ldr	r2, [r3, #4]
 8011e32:	2380      	movs	r3, #128	@ 0x80
 8011e34:	005b      	lsls	r3, r3, #1
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d147      	bne.n	8011eca <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d010      	beq.n	8011e64 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011e46:	0018      	movs	r0, r3
 8011e48:	f7fc fc48 	bl	800e6dc <HAL_DMA_Abort>
 8011e4c:	1e03      	subs	r3, r0, #0
 8011e4e:	d009      	beq.n	8011e64 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011e54:	2208      	movs	r2, #8
 8011e56:	431a      	orrs	r2, r3
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 8011e5c:	2317      	movs	r3, #23
 8011e5e:	18fb      	adds	r3, r7, r3
 8011e60:	2201      	movs	r2, #1
 8011e62:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	69da      	ldr	r2, [r3, #28]
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	491c      	ldr	r1, [pc, #112]	@ (8011ee0 <HAL_I2S_DMAStop+0x194>)
 8011e70:	400a      	ands	r2, r1
 8011e72:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8011e74:	2300      	movs	r3, #0
 8011e76:	60fb      	str	r3, [r7, #12]
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	60fb      	str	r3, [r7, #12]
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	689b      	ldr	r3, [r3, #8]
 8011e86:	60fb      	str	r3, [r7, #12]
 8011e88:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	685a      	ldr	r2, [r3, #4]
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	2101      	movs	r1, #1
 8011e96:	438a      	bics	r2, r1
 8011e98:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	685a      	ldr	r2, [r3, #4]
 8011e9e:	2380      	movs	r3, #128	@ 0x80
 8011ea0:	005b      	lsls	r3, r3, #1
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d10e      	bne.n	8011ec4 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011eaa:	2240      	movs	r2, #64	@ 0x40
 8011eac:	431a      	orrs	r2, r3
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2235      	movs	r2, #53	@ 0x35
 8011eb6:	2101      	movs	r1, #1
 8011eb8:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8011eba:	2317      	movs	r3, #23
 8011ebc:	18fb      	adds	r3, r7, r3
 8011ebe:	2201      	movs	r2, #1
 8011ec0:	701a      	strb	r2, [r3, #0]
 8011ec2:	e002      	b.n	8011eca <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2235      	movs	r2, #53	@ 0x35
 8011ece:	2101      	movs	r1, #1
 8011ed0:	5499      	strb	r1, [r3, r2]

  return errorcode;
 8011ed2:	2317      	movs	r3, #23
 8011ed4:	18fb      	adds	r3, r7, r3
 8011ed6:	781b      	ldrb	r3, [r3, #0]
}
 8011ed8:	0018      	movs	r0, r3
 8011eda:	46bd      	mov	sp, r7
 8011edc:	b006      	add	sp, #24
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	fffffbff 	.word	0xfffffbff

08011ee4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ef0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	69db      	ldr	r3, [r3, #28]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d10e      	bne.n	8011f18 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	685a      	ldr	r2, [r3, #4]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2101      	movs	r1, #1
 8011f06:	438a      	bics	r2, r1
 8011f08:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	2235      	movs	r2, #53	@ 0x35
 8011f14:	2101      	movs	r1, #1
 8011f16:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	0018      	movs	r0, r3
 8011f1c:	f7f9 fcfe 	bl	800b91c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011f20:	46c0      	nop			@ (mov r8, r8)
 8011f22:	46bd      	mov	sp, r7
 8011f24:	b004      	add	sp, #16
 8011f26:	bd80      	pop	{r7, pc}

08011f28 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b084      	sub	sp, #16
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f34:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	0018      	movs	r0, r3
 8011f3a:	f7f9 fcdd 	bl	800b8f8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011f3e:	46c0      	nop			@ (mov r8, r8)
 8011f40:	46bd      	mov	sp, r7
 8011f42:	b004      	add	sp, #16
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b084      	sub	sp, #16
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f52:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	685a      	ldr	r2, [r3, #4]
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	2103      	movs	r1, #3
 8011f60:	438a      	bics	r2, r1
 8011f62:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2200      	movs	r2, #0
 8011f68:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	2235      	movs	r2, #53	@ 0x35
 8011f74:	2101      	movs	r1, #1
 8011f76:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011f7c:	2208      	movs	r2, #8
 8011f7e:	431a      	orrs	r2, r3
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	0018      	movs	r0, r3
 8011f88:	f7f9 fd16 	bl	800b9b8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8011f8c:	46c0      	nop			@ (mov r8, r8)
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	b004      	add	sp, #16
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b086      	sub	sp, #24
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	60f8      	str	r0, [r7, #12]
 8011f9c:	60b9      	str	r1, [r7, #8]
 8011f9e:	603b      	str	r3, [r7, #0]
 8011fa0:	1dfb      	adds	r3, r7, #7
 8011fa2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8011fa4:	f7fb fdf8 	bl	800db98 <HAL_GetTick>
 8011fa8:	0003      	movs	r3, r0
 8011faa:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011fac:	e017      	b.n	8011fde <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011fae:	683b      	ldr	r3, [r7, #0]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	d014      	beq.n	8011fde <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8011fb4:	f7fb fdf0 	bl	800db98 <HAL_GetTick>
 8011fb8:	0002      	movs	r2, r0
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	683a      	ldr	r2, [r7, #0]
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d902      	bls.n	8011fca <I2S_WaitFlagStateUntilTimeout+0x36>
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d109      	bne.n	8011fde <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	2235      	movs	r2, #53	@ 0x35
 8011fce:	2101      	movs	r1, #1
 8011fd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2234      	movs	r2, #52	@ 0x34
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8011fda:	2303      	movs	r3, #3
 8011fdc:	e00f      	b.n	8011ffe <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	689b      	ldr	r3, [r3, #8]
 8011fe4:	68ba      	ldr	r2, [r7, #8]
 8011fe6:	4013      	ands	r3, r2
 8011fe8:	68ba      	ldr	r2, [r7, #8]
 8011fea:	1ad3      	subs	r3, r2, r3
 8011fec:	425a      	negs	r2, r3
 8011fee:	4153      	adcs	r3, r2
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	001a      	movs	r2, r3
 8011ff4:	1dfb      	adds	r3, r7, #7
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d1d8      	bne.n	8011fae <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	0018      	movs	r0, r3
 8012000:	46bd      	mov	sp, r7
 8012002:	b006      	add	sp, #24
 8012004:	bd80      	pop	{r7, pc}
	...

08012008 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8012008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801200a:	b08b      	sub	sp, #44	@ 0x2c
 801200c:	af06      	add	r7, sp, #24
 801200e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8012016:	2301      	movs	r3, #1
 8012018:	e0f0      	b.n	80121fc <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	4a79      	ldr	r2, [pc, #484]	@ (8012204 <HAL_PCD_Init+0x1fc>)
 801201e:	5c9b      	ldrb	r3, [r3, r2]
 8012020:	b2db      	uxtb	r3, r3
 8012022:	2b00      	cmp	r3, #0
 8012024:	d108      	bne.n	8012038 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8012026:	687a      	ldr	r2, [r7, #4]
 8012028:	23aa      	movs	r3, #170	@ 0xaa
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	2100      	movs	r1, #0
 801202e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	0018      	movs	r0, r3
 8012034:	f009 ff0c 	bl	801be50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	4a72      	ldr	r2, [pc, #456]	@ (8012204 <HAL_PCD_Init+0x1fc>)
 801203c:	2103      	movs	r1, #3
 801203e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	0018      	movs	r0, r3
 8012046:	f005 febf 	bl	8017dc8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801204a:	230f      	movs	r3, #15
 801204c:	18fb      	adds	r3, r7, r3
 801204e:	2200      	movs	r2, #0
 8012050:	701a      	strb	r2, [r3, #0]
 8012052:	e049      	b.n	80120e8 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8012054:	200f      	movs	r0, #15
 8012056:	183b      	adds	r3, r7, r0
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	1c5a      	adds	r2, r3, #1
 801205e:	0013      	movs	r3, r2
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	189b      	adds	r3, r3, r2
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	18cb      	adds	r3, r1, r3
 8012068:	3301      	adds	r3, #1
 801206a:	2201      	movs	r2, #1
 801206c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801206e:	183b      	adds	r3, r7, r0
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	6879      	ldr	r1, [r7, #4]
 8012074:	1c5a      	adds	r2, r3, #1
 8012076:	0013      	movs	r3, r2
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	189b      	adds	r3, r3, r2
 801207c:	00db      	lsls	r3, r3, #3
 801207e:	183a      	adds	r2, r7, r0
 8012080:	7812      	ldrb	r2, [r2, #0]
 8012082:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8012084:	183b      	adds	r3, r7, r0
 8012086:	781b      	ldrb	r3, [r3, #0]
 8012088:	6879      	ldr	r1, [r7, #4]
 801208a:	1c5a      	adds	r2, r3, #1
 801208c:	0013      	movs	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	189b      	adds	r3, r3, r2
 8012092:	00db      	lsls	r3, r3, #3
 8012094:	18cb      	adds	r3, r1, r3
 8012096:	3303      	adds	r3, #3
 8012098:	2200      	movs	r2, #0
 801209a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801209c:	183b      	adds	r3, r7, r0
 801209e:	781a      	ldrb	r2, [r3, #0]
 80120a0:	6879      	ldr	r1, [r7, #4]
 80120a2:	0013      	movs	r3, r2
 80120a4:	009b      	lsls	r3, r3, #2
 80120a6:	189b      	adds	r3, r3, r2
 80120a8:	00db      	lsls	r3, r3, #3
 80120aa:	18cb      	adds	r3, r1, r3
 80120ac:	3338      	adds	r3, #56	@ 0x38
 80120ae:	2200      	movs	r2, #0
 80120b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80120b2:	183b      	adds	r3, r7, r0
 80120b4:	781a      	ldrb	r2, [r3, #0]
 80120b6:	6879      	ldr	r1, [r7, #4]
 80120b8:	0013      	movs	r3, r2
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	189b      	adds	r3, r3, r2
 80120be:	00db      	lsls	r3, r3, #3
 80120c0:	18cb      	adds	r3, r1, r3
 80120c2:	333c      	adds	r3, #60	@ 0x3c
 80120c4:	2200      	movs	r2, #0
 80120c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80120c8:	183b      	adds	r3, r7, r0
 80120ca:	781a      	ldrb	r2, [r3, #0]
 80120cc:	6879      	ldr	r1, [r7, #4]
 80120ce:	0013      	movs	r3, r2
 80120d0:	009b      	lsls	r3, r3, #2
 80120d2:	189b      	adds	r3, r3, r2
 80120d4:	00db      	lsls	r3, r3, #3
 80120d6:	18cb      	adds	r3, r1, r3
 80120d8:	3340      	adds	r3, #64	@ 0x40
 80120da:	2200      	movs	r2, #0
 80120dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80120de:	183b      	adds	r3, r7, r0
 80120e0:	781a      	ldrb	r2, [r3, #0]
 80120e2:	183b      	adds	r3, r7, r0
 80120e4:	3201      	adds	r2, #1
 80120e6:	701a      	strb	r2, [r3, #0]
 80120e8:	210f      	movs	r1, #15
 80120ea:	187b      	adds	r3, r7, r1
 80120ec:	781a      	ldrb	r2, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	429a      	cmp	r2, r3
 80120f4:	d3ae      	bcc.n	8012054 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80120f6:	187b      	adds	r3, r7, r1
 80120f8:	2200      	movs	r2, #0
 80120fa:	701a      	strb	r2, [r3, #0]
 80120fc:	e056      	b.n	80121ac <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80120fe:	240f      	movs	r4, #15
 8012100:	193b      	adds	r3, r7, r4
 8012102:	781a      	ldrb	r2, [r3, #0]
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	236a      	movs	r3, #106	@ 0x6a
 8012108:	33ff      	adds	r3, #255	@ 0xff
 801210a:	0019      	movs	r1, r3
 801210c:	0013      	movs	r3, r2
 801210e:	009b      	lsls	r3, r3, #2
 8012110:	189b      	adds	r3, r3, r2
 8012112:	00db      	lsls	r3, r3, #3
 8012114:	18c3      	adds	r3, r0, r3
 8012116:	185b      	adds	r3, r3, r1
 8012118:	2200      	movs	r2, #0
 801211a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 801211c:	193b      	adds	r3, r7, r4
 801211e:	781a      	ldrb	r2, [r3, #0]
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	23b4      	movs	r3, #180	@ 0xb4
 8012124:	0059      	lsls	r1, r3, #1
 8012126:	0013      	movs	r3, r2
 8012128:	009b      	lsls	r3, r3, #2
 801212a:	189b      	adds	r3, r3, r2
 801212c:	00db      	lsls	r3, r3, #3
 801212e:	18c3      	adds	r3, r0, r3
 8012130:	185b      	adds	r3, r3, r1
 8012132:	193a      	adds	r2, r7, r4
 8012134:	7812      	ldrb	r2, [r2, #0]
 8012136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8012138:	193b      	adds	r3, r7, r4
 801213a:	781a      	ldrb	r2, [r3, #0]
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	236c      	movs	r3, #108	@ 0x6c
 8012140:	33ff      	adds	r3, #255	@ 0xff
 8012142:	0019      	movs	r1, r3
 8012144:	0013      	movs	r3, r2
 8012146:	009b      	lsls	r3, r3, #2
 8012148:	189b      	adds	r3, r3, r2
 801214a:	00db      	lsls	r3, r3, #3
 801214c:	18c3      	adds	r3, r0, r3
 801214e:	185b      	adds	r3, r3, r1
 8012150:	2200      	movs	r2, #0
 8012152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8012154:	193b      	adds	r3, r7, r4
 8012156:	781a      	ldrb	r2, [r3, #0]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	23bc      	movs	r3, #188	@ 0xbc
 801215c:	0059      	lsls	r1, r3, #1
 801215e:	0013      	movs	r3, r2
 8012160:	009b      	lsls	r3, r3, #2
 8012162:	189b      	adds	r3, r3, r2
 8012164:	00db      	lsls	r3, r3, #3
 8012166:	18c3      	adds	r3, r0, r3
 8012168:	185b      	adds	r3, r3, r1
 801216a:	2200      	movs	r2, #0
 801216c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 801216e:	193b      	adds	r3, r7, r4
 8012170:	781a      	ldrb	r2, [r3, #0]
 8012172:	6878      	ldr	r0, [r7, #4]
 8012174:	23be      	movs	r3, #190	@ 0xbe
 8012176:	0059      	lsls	r1, r3, #1
 8012178:	0013      	movs	r3, r2
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	189b      	adds	r3, r3, r2
 801217e:	00db      	lsls	r3, r3, #3
 8012180:	18c3      	adds	r3, r0, r3
 8012182:	185b      	adds	r3, r3, r1
 8012184:	2200      	movs	r2, #0
 8012186:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8012188:	193b      	adds	r3, r7, r4
 801218a:	781a      	ldrb	r2, [r3, #0]
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	23c0      	movs	r3, #192	@ 0xc0
 8012190:	0059      	lsls	r1, r3, #1
 8012192:	0013      	movs	r3, r2
 8012194:	009b      	lsls	r3, r3, #2
 8012196:	189b      	adds	r3, r3, r2
 8012198:	00db      	lsls	r3, r3, #3
 801219a:	18c3      	adds	r3, r0, r3
 801219c:	185b      	adds	r3, r3, r1
 801219e:	2200      	movs	r2, #0
 80121a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80121a2:	193b      	adds	r3, r7, r4
 80121a4:	781a      	ldrb	r2, [r3, #0]
 80121a6:	193b      	adds	r3, r7, r4
 80121a8:	3201      	adds	r2, #1
 80121aa:	701a      	strb	r2, [r3, #0]
 80121ac:	230f      	movs	r3, #15
 80121ae:	18fb      	adds	r3, r7, r3
 80121b0:	781a      	ldrb	r2, [r3, #0]
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d3a1      	bcc.n	80120fe <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6818      	ldr	r0, [r3, #0]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	466a      	mov	r2, sp
 80121c2:	0011      	movs	r1, r2
 80121c4:	001a      	movs	r2, r3
 80121c6:	3210      	adds	r2, #16
 80121c8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80121ca:	c170      	stmia	r1!, {r4, r5, r6}
 80121cc:	ca30      	ldmia	r2!, {r4, r5}
 80121ce:	c130      	stmia	r1!, {r4, r5}
 80121d0:	6859      	ldr	r1, [r3, #4]
 80121d2:	689a      	ldr	r2, [r3, #8]
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	f005 fe11 	bl	8017dfc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2224      	movs	r2, #36	@ 0x24
 80121de:	2100      	movs	r1, #0
 80121e0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4a07      	ldr	r2, [pc, #28]	@ (8012204 <HAL_PCD_Init+0x1fc>)
 80121e6:	2101      	movs	r1, #1
 80121e8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	69db      	ldr	r3, [r3, #28]
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d103      	bne.n	80121fa <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	0018      	movs	r0, r3
 80121f6:	f001 fd23 	bl	8013c40 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80121fa:	2300      	movs	r3, #0
}
 80121fc:	0018      	movs	r0, r3
 80121fe:	46bd      	mov	sp, r7
 8012200:	b005      	add	sp, #20
 8012202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012204:	000002a9 	.word	0x000002a9

08012208 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b082      	sub	sp, #8
 801220c:	af00      	add	r7, sp, #0
 801220e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	23aa      	movs	r3, #170	@ 0xaa
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	5cd3      	ldrb	r3, [r2, r3]
 8012218:	2b01      	cmp	r3, #1
 801221a:	d101      	bne.n	8012220 <HAL_PCD_Start+0x18>
 801221c:	2302      	movs	r3, #2
 801221e:	e014      	b.n	801224a <HAL_PCD_Start+0x42>
 8012220:	687a      	ldr	r2, [r7, #4]
 8012222:	23aa      	movs	r3, #170	@ 0xaa
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	2101      	movs	r1, #1
 8012228:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	0018      	movs	r0, r3
 8012230:	f005 fdb4 	bl	8017d9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	0018      	movs	r0, r3
 801223a:	f007 fdb7 	bl	8019dac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	23aa      	movs	r3, #170	@ 0xaa
 8012242:	009b      	lsls	r3, r3, #2
 8012244:	2100      	movs	r1, #0
 8012246:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012248:	2300      	movs	r3, #0
}
 801224a:	0018      	movs	r0, r3
 801224c:	46bd      	mov	sp, r7
 801224e:	b002      	add	sp, #8
 8012250:	bd80      	pop	{r7, pc}
	...

08012254 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	0018      	movs	r0, r3
 8012262:	f007 fdb9 	bl	8019dd8 <USB_ReadInterrupts>
 8012266:	0003      	movs	r3, r0
 8012268:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 801226a:	68fa      	ldr	r2, [r7, #12]
 801226c:	2380      	movs	r3, #128	@ 0x80
 801226e:	021b      	lsls	r3, r3, #8
 8012270:	4013      	ands	r3, r2
 8012272:	d004      	beq.n	801227e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	0018      	movs	r0, r3
 8012278:	f000 fb62 	bl	8012940 <PCD_EP_ISR_Handler>

    return;
 801227c:	e11d      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 801227e:	68fa      	ldr	r2, [r7, #12]
 8012280:	2380      	movs	r3, #128	@ 0x80
 8012282:	00db      	lsls	r3, r3, #3
 8012284:	4013      	ands	r3, r2
 8012286:	d015      	beq.n	80122b4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2244      	movs	r2, #68	@ 0x44
 801228e:	5a9b      	ldrh	r3, [r3, r2]
 8012290:	b29a      	uxth	r2, r3
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	498a      	ldr	r1, [pc, #552]	@ (80124c0 <HAL_PCD_IRQHandler+0x26c>)
 8012298:	400a      	ands	r2, r1
 801229a:	b291      	uxth	r1, r2
 801229c:	2244      	movs	r2, #68	@ 0x44
 801229e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	0018      	movs	r0, r3
 80122a4:	f009 fe57 	bl	801bf56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2100      	movs	r1, #0
 80122ac:	0018      	movs	r0, r3
 80122ae:	f000 f915 	bl	80124dc <HAL_PCD_SetAddress>

    return;
 80122b2:	e102      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80122b4:	68fa      	ldr	r2, [r7, #12]
 80122b6:	2380      	movs	r3, #128	@ 0x80
 80122b8:	01db      	lsls	r3, r3, #7
 80122ba:	4013      	ands	r3, r2
 80122bc:	d00c      	beq.n	80122d8 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2244      	movs	r2, #68	@ 0x44
 80122c4:	5a9b      	ldrh	r3, [r3, r2]
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	497d      	ldr	r1, [pc, #500]	@ (80124c4 <HAL_PCD_IRQHandler+0x270>)
 80122ce:	400a      	ands	r2, r1
 80122d0:	b291      	uxth	r1, r2
 80122d2:	2244      	movs	r2, #68	@ 0x44
 80122d4:	5299      	strh	r1, [r3, r2]

    return;
 80122d6:	e0f0      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	2380      	movs	r3, #128	@ 0x80
 80122dc:	019b      	lsls	r3, r3, #6
 80122de:	4013      	ands	r3, r2
 80122e0:	d00c      	beq.n	80122fc <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	2244      	movs	r2, #68	@ 0x44
 80122e8:	5a9b      	ldrh	r3, [r3, r2]
 80122ea:	b29a      	uxth	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4975      	ldr	r1, [pc, #468]	@ (80124c8 <HAL_PCD_IRQHandler+0x274>)
 80122f2:	400a      	ands	r2, r1
 80122f4:	b291      	uxth	r1, r2
 80122f6:	2244      	movs	r2, #68	@ 0x44
 80122f8:	5299      	strh	r1, [r3, r2]

    return;
 80122fa:	e0de      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80122fc:	68fa      	ldr	r2, [r7, #12]
 80122fe:	2380      	movs	r3, #128	@ 0x80
 8012300:	015b      	lsls	r3, r3, #5
 8012302:	4013      	ands	r3, r2
 8012304:	d038      	beq.n	8012378 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	2240      	movs	r2, #64	@ 0x40
 801230c:	5a9b      	ldrh	r3, [r3, r2]
 801230e:	b29a      	uxth	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	2104      	movs	r1, #4
 8012316:	438a      	bics	r2, r1
 8012318:	b291      	uxth	r1, r2
 801231a:	2240      	movs	r2, #64	@ 0x40
 801231c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	2240      	movs	r2, #64	@ 0x40
 8012324:	5a9b      	ldrh	r3, [r3, r2]
 8012326:	b29a      	uxth	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2108      	movs	r1, #8
 801232e:	438a      	bics	r2, r1
 8012330:	b291      	uxth	r1, r2
 8012332:	2240      	movs	r2, #64	@ 0x40
 8012334:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8012336:	687a      	ldr	r2, [r7, #4]
 8012338:	23b8      	movs	r3, #184	@ 0xb8
 801233a:	009b      	lsls	r3, r3, #2
 801233c:	5cd3      	ldrb	r3, [r2, r3]
 801233e:	2b01      	cmp	r3, #1
 8012340:	d109      	bne.n	8012356 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	23b8      	movs	r3, #184	@ 0xb8
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	2100      	movs	r1, #0
 801234a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2100      	movs	r1, #0
 8012350:	0018      	movs	r0, r3
 8012352:	f001 fc9f 	bl	8013c94 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	0018      	movs	r0, r3
 801235a:	f009 fe3d 	bl	801bfd8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	2244      	movs	r2, #68	@ 0x44
 8012364:	5a9b      	ldrh	r3, [r3, r2]
 8012366:	b29a      	uxth	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4957      	ldr	r1, [pc, #348]	@ (80124cc <HAL_PCD_IRQHandler+0x278>)
 801236e:	400a      	ands	r2, r1
 8012370:	b291      	uxth	r1, r2
 8012372:	2244      	movs	r2, #68	@ 0x44
 8012374:	5299      	strh	r1, [r3, r2]

    return;
 8012376:	e0a0      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8012378:	68fa      	ldr	r2, [r7, #12]
 801237a:	2380      	movs	r3, #128	@ 0x80
 801237c:	011b      	lsls	r3, r3, #4
 801237e:	4013      	ands	r3, r2
 8012380:	d028      	beq.n	80123d4 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2240      	movs	r2, #64	@ 0x40
 8012388:	5a9b      	ldrh	r3, [r3, r2]
 801238a:	b29a      	uxth	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2108      	movs	r1, #8
 8012392:	430a      	orrs	r2, r1
 8012394:	b291      	uxth	r1, r2
 8012396:	2240      	movs	r2, #64	@ 0x40
 8012398:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	2244      	movs	r2, #68	@ 0x44
 80123a0:	5a9b      	ldrh	r3, [r3, r2]
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	4949      	ldr	r1, [pc, #292]	@ (80124d0 <HAL_PCD_IRQHandler+0x27c>)
 80123aa:	400a      	ands	r2, r1
 80123ac:	b291      	uxth	r1, r2
 80123ae:	2244      	movs	r2, #68	@ 0x44
 80123b0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	2240      	movs	r2, #64	@ 0x40
 80123b8:	5a9b      	ldrh	r3, [r3, r2]
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	2104      	movs	r1, #4
 80123c2:	430a      	orrs	r2, r1
 80123c4:	b291      	uxth	r1, r2
 80123c6:	2240      	movs	r2, #64	@ 0x40
 80123c8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	0018      	movs	r0, r3
 80123ce:	f009 fde7 	bl	801bfa0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80123d2:	e072      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2280      	movs	r2, #128	@ 0x80
 80123d8:	4013      	ands	r3, r2
 80123da:	d046      	beq.n	801246a <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	2244      	movs	r2, #68	@ 0x44
 80123e2:	5a9b      	ldrh	r3, [r3, r2]
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	2180      	movs	r1, #128	@ 0x80
 80123ec:	438a      	bics	r2, r1
 80123ee:	b291      	uxth	r1, r2
 80123f0:	2244      	movs	r2, #68	@ 0x44
 80123f2:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80123f4:	687a      	ldr	r2, [r7, #4]
 80123f6:	23b8      	movs	r3, #184	@ 0xb8
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	5cd3      	ldrb	r3, [r2, r3]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d12f      	bne.n	8012460 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2240      	movs	r2, #64	@ 0x40
 8012406:	5a9b      	ldrh	r3, [r3, r2]
 8012408:	b29a      	uxth	r2, r3
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2104      	movs	r1, #4
 8012410:	430a      	orrs	r2, r1
 8012412:	b291      	uxth	r1, r2
 8012414:	2240      	movs	r2, #64	@ 0x40
 8012416:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	2240      	movs	r2, #64	@ 0x40
 801241e:	5a9b      	ldrh	r3, [r3, r2]
 8012420:	b29a      	uxth	r2, r3
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2108      	movs	r1, #8
 8012428:	430a      	orrs	r2, r1
 801242a:	b291      	uxth	r1, r2
 801242c:	2240      	movs	r2, #64	@ 0x40
 801242e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	23b8      	movs	r3, #184	@ 0xb8
 8012434:	009b      	lsls	r3, r3, #2
 8012436:	2101      	movs	r1, #1
 8012438:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2254      	movs	r2, #84	@ 0x54
 8012440:	5a9b      	ldrh	r3, [r3, r2]
 8012442:	b29b      	uxth	r3, r3
 8012444:	089b      	lsrs	r3, r3, #2
 8012446:	223c      	movs	r2, #60	@ 0x3c
 8012448:	4013      	ands	r3, r2
 801244a:	0019      	movs	r1, r3
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	23b9      	movs	r3, #185	@ 0xb9
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2101      	movs	r1, #1
 8012458:	0018      	movs	r0, r3
 801245a:	f001 fc1b 	bl	8013c94 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 801245e:	e02c      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	0018      	movs	r0, r3
 8012464:	f009 fd9c 	bl	801bfa0 <HAL_PCD_SuspendCallback>
    return;
 8012468:	e027      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	2380      	movs	r3, #128	@ 0x80
 801246e:	009b      	lsls	r3, r3, #2
 8012470:	4013      	ands	r3, r2
 8012472:	d010      	beq.n	8012496 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	2244      	movs	r2, #68	@ 0x44
 801247a:	5a9b      	ldrh	r3, [r3, r2]
 801247c:	b29a      	uxth	r2, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	4914      	ldr	r1, [pc, #80]	@ (80124d4 <HAL_PCD_IRQHandler+0x280>)
 8012484:	400a      	ands	r2, r1
 8012486:	b291      	uxth	r1, r2
 8012488:	2244      	movs	r2, #68	@ 0x44
 801248a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	0018      	movs	r0, r3
 8012490:	f009 fd52 	bl	801bf38 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8012494:	e011      	b.n	80124ba <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8012496:	68fa      	ldr	r2, [r7, #12]
 8012498:	2380      	movs	r3, #128	@ 0x80
 801249a:	005b      	lsls	r3, r3, #1
 801249c:	4013      	ands	r3, r2
 801249e:	d00c      	beq.n	80124ba <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2244      	movs	r2, #68	@ 0x44
 80124a6:	5a9b      	ldrh	r3, [r3, r2]
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	490a      	ldr	r1, [pc, #40]	@ (80124d8 <HAL_PCD_IRQHandler+0x284>)
 80124b0:	400a      	ands	r2, r1
 80124b2:	b291      	uxth	r1, r2
 80124b4:	2244      	movs	r2, #68	@ 0x44
 80124b6:	5299      	strh	r1, [r3, r2]

    return;
 80124b8:	46c0      	nop			@ (mov r8, r8)
  }
}
 80124ba:	46bd      	mov	sp, r7
 80124bc:	b004      	add	sp, #16
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	fffffbff 	.word	0xfffffbff
 80124c4:	ffffbfff 	.word	0xffffbfff
 80124c8:	ffffdfff 	.word	0xffffdfff
 80124cc:	ffffefff 	.word	0xffffefff
 80124d0:	fffff7ff 	.word	0xfffff7ff
 80124d4:	fffffdff 	.word	0xfffffdff
 80124d8:	fffffeff 	.word	0xfffffeff

080124dc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	000a      	movs	r2, r1
 80124e6:	1cfb      	adds	r3, r7, #3
 80124e8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80124ea:	687a      	ldr	r2, [r7, #4]
 80124ec:	23aa      	movs	r3, #170	@ 0xaa
 80124ee:	009b      	lsls	r3, r3, #2
 80124f0:	5cd3      	ldrb	r3, [r2, r3]
 80124f2:	2b01      	cmp	r3, #1
 80124f4:	d101      	bne.n	80124fa <HAL_PCD_SetAddress+0x1e>
 80124f6:	2302      	movs	r3, #2
 80124f8:	e017      	b.n	801252a <HAL_PCD_SetAddress+0x4e>
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	23aa      	movs	r3, #170	@ 0xaa
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	2101      	movs	r1, #1
 8012502:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	1cfa      	adds	r2, r7, #3
 8012508:	2124      	movs	r1, #36	@ 0x24
 801250a:	7812      	ldrb	r2, [r2, #0]
 801250c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681a      	ldr	r2, [r3, #0]
 8012512:	1cfb      	adds	r3, r7, #3
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	0019      	movs	r1, r3
 8012518:	0010      	movs	r0, r2
 801251a:	f007 fc33 	bl	8019d84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801251e:	687a      	ldr	r2, [r7, #4]
 8012520:	23aa      	movs	r3, #170	@ 0xaa
 8012522:	009b      	lsls	r3, r3, #2
 8012524:	2100      	movs	r1, #0
 8012526:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012528:	2300      	movs	r3, #0
}
 801252a:	0018      	movs	r0, r3
 801252c:	46bd      	mov	sp, r7
 801252e:	b002      	add	sp, #8
 8012530:	bd80      	pop	{r7, pc}

08012532 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8012532:	b590      	push	{r4, r7, lr}
 8012534:	b085      	sub	sp, #20
 8012536:	af00      	add	r7, sp, #0
 8012538:	6078      	str	r0, [r7, #4]
 801253a:	000c      	movs	r4, r1
 801253c:	0010      	movs	r0, r2
 801253e:	0019      	movs	r1, r3
 8012540:	1cfb      	adds	r3, r7, #3
 8012542:	1c22      	adds	r2, r4, #0
 8012544:	701a      	strb	r2, [r3, #0]
 8012546:	003b      	movs	r3, r7
 8012548:	1c02      	adds	r2, r0, #0
 801254a:	801a      	strh	r2, [r3, #0]
 801254c:	1cbb      	adds	r3, r7, #2
 801254e:	1c0a      	adds	r2, r1, #0
 8012550:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8012552:	230b      	movs	r3, #11
 8012554:	18fb      	adds	r3, r7, r3
 8012556:	2200      	movs	r2, #0
 8012558:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801255a:	1cfb      	adds	r3, r7, #3
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	b25b      	sxtb	r3, r3
 8012560:	2b00      	cmp	r3, #0
 8012562:	da0f      	bge.n	8012584 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012564:	1cfb      	adds	r3, r7, #3
 8012566:	781b      	ldrb	r3, [r3, #0]
 8012568:	2207      	movs	r2, #7
 801256a:	4013      	ands	r3, r2
 801256c:	1c5a      	adds	r2, r3, #1
 801256e:	0013      	movs	r3, r2
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	189b      	adds	r3, r3, r2
 8012574:	00db      	lsls	r3, r3, #3
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	18d3      	adds	r3, r2, r3
 801257a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	2201      	movs	r2, #1
 8012580:	705a      	strb	r2, [r3, #1]
 8012582:	e00f      	b.n	80125a4 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012584:	1cfb      	adds	r3, r7, #3
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	2207      	movs	r2, #7
 801258a:	401a      	ands	r2, r3
 801258c:	0013      	movs	r3, r2
 801258e:	009b      	lsls	r3, r3, #2
 8012590:	189b      	adds	r3, r3, r2
 8012592:	00db      	lsls	r3, r3, #3
 8012594:	3369      	adds	r3, #105	@ 0x69
 8012596:	33ff      	adds	r3, #255	@ 0xff
 8012598:	687a      	ldr	r2, [r7, #4]
 801259a:	18d3      	adds	r3, r2, r3
 801259c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	2200      	movs	r2, #0
 80125a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80125a4:	1cfb      	adds	r3, r7, #3
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	2207      	movs	r2, #7
 80125aa:	4013      	ands	r3, r2
 80125ac:	b2da      	uxtb	r2, r3
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80125b2:	003b      	movs	r3, r7
 80125b4:	881a      	ldrh	r2, [r3, #0]
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	1cba      	adds	r2, r7, #2
 80125be:	7812      	ldrb	r2, [r2, #0]
 80125c0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80125c2:	1cbb      	adds	r3, r7, #2
 80125c4:	781b      	ldrb	r3, [r3, #0]
 80125c6:	2b02      	cmp	r3, #2
 80125c8:	d102      	bne.n	80125d0 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2200      	movs	r2, #0
 80125ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	23aa      	movs	r3, #170	@ 0xaa
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	5cd3      	ldrb	r3, [r2, r3]
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d101      	bne.n	80125e0 <HAL_PCD_EP_Open+0xae>
 80125dc:	2302      	movs	r3, #2
 80125de:	e013      	b.n	8012608 <HAL_PCD_EP_Open+0xd6>
 80125e0:	687a      	ldr	r2, [r7, #4]
 80125e2:	23aa      	movs	r3, #170	@ 0xaa
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	2101      	movs	r1, #1
 80125e8:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	68fa      	ldr	r2, [r7, #12]
 80125f0:	0011      	movs	r1, r2
 80125f2:	0018      	movs	r0, r3
 80125f4:	f005 fc2a 	bl	8017e4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	23aa      	movs	r3, #170	@ 0xaa
 80125fc:	009b      	lsls	r3, r3, #2
 80125fe:	2100      	movs	r1, #0
 8012600:	54d1      	strb	r1, [r2, r3]

  return ret;
 8012602:	230b      	movs	r3, #11
 8012604:	18fb      	adds	r3, r7, r3
 8012606:	781b      	ldrb	r3, [r3, #0]
}
 8012608:	0018      	movs	r0, r3
 801260a:	46bd      	mov	sp, r7
 801260c:	b005      	add	sp, #20
 801260e:	bd90      	pop	{r4, r7, pc}

08012610 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	000a      	movs	r2, r1
 801261a:	1cfb      	adds	r3, r7, #3
 801261c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801261e:	1cfb      	adds	r3, r7, #3
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	b25b      	sxtb	r3, r3
 8012624:	2b00      	cmp	r3, #0
 8012626:	da0f      	bge.n	8012648 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012628:	1cfb      	adds	r3, r7, #3
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	2207      	movs	r2, #7
 801262e:	4013      	ands	r3, r2
 8012630:	1c5a      	adds	r2, r3, #1
 8012632:	0013      	movs	r3, r2
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	189b      	adds	r3, r3, r2
 8012638:	00db      	lsls	r3, r3, #3
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	18d3      	adds	r3, r2, r3
 801263e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2201      	movs	r2, #1
 8012644:	705a      	strb	r2, [r3, #1]
 8012646:	e00f      	b.n	8012668 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8012648:	1cfb      	adds	r3, r7, #3
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	2207      	movs	r2, #7
 801264e:	401a      	ands	r2, r3
 8012650:	0013      	movs	r3, r2
 8012652:	009b      	lsls	r3, r3, #2
 8012654:	189b      	adds	r3, r3, r2
 8012656:	00db      	lsls	r3, r3, #3
 8012658:	3369      	adds	r3, #105	@ 0x69
 801265a:	33ff      	adds	r3, #255	@ 0xff
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	18d3      	adds	r3, r2, r3
 8012660:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	2200      	movs	r2, #0
 8012666:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8012668:	1cfb      	adds	r3, r7, #3
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	2207      	movs	r2, #7
 801266e:	4013      	ands	r3, r2
 8012670:	b2da      	uxtb	r2, r3
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012676:	687a      	ldr	r2, [r7, #4]
 8012678:	23aa      	movs	r3, #170	@ 0xaa
 801267a:	009b      	lsls	r3, r3, #2
 801267c:	5cd3      	ldrb	r3, [r2, r3]
 801267e:	2b01      	cmp	r3, #1
 8012680:	d101      	bne.n	8012686 <HAL_PCD_EP_Close+0x76>
 8012682:	2302      	movs	r3, #2
 8012684:	e011      	b.n	80126aa <HAL_PCD_EP_Close+0x9a>
 8012686:	687a      	ldr	r2, [r7, #4]
 8012688:	23aa      	movs	r3, #170	@ 0xaa
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	2101      	movs	r1, #1
 801268e:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	0011      	movs	r1, r2
 8012698:	0018      	movs	r0, r3
 801269a:	f005 ff79 	bl	8018590 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801269e:	687a      	ldr	r2, [r7, #4]
 80126a0:	23aa      	movs	r3, #170	@ 0xaa
 80126a2:	009b      	lsls	r3, r3, #2
 80126a4:	2100      	movs	r1, #0
 80126a6:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80126a8:	2300      	movs	r3, #0
}
 80126aa:	0018      	movs	r0, r3
 80126ac:	46bd      	mov	sp, r7
 80126ae:	b004      	add	sp, #16
 80126b0:	bd80      	pop	{r7, pc}

080126b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80126b2:	b580      	push	{r7, lr}
 80126b4:	b086      	sub	sp, #24
 80126b6:	af00      	add	r7, sp, #0
 80126b8:	60f8      	str	r0, [r7, #12]
 80126ba:	607a      	str	r2, [r7, #4]
 80126bc:	603b      	str	r3, [r7, #0]
 80126be:	200b      	movs	r0, #11
 80126c0:	183b      	adds	r3, r7, r0
 80126c2:	1c0a      	adds	r2, r1, #0
 80126c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80126c6:	0001      	movs	r1, r0
 80126c8:	187b      	adds	r3, r7, r1
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	2207      	movs	r2, #7
 80126ce:	401a      	ands	r2, r3
 80126d0:	0013      	movs	r3, r2
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	189b      	adds	r3, r3, r2
 80126d6:	00db      	lsls	r3, r3, #3
 80126d8:	3369      	adds	r3, #105	@ 0x69
 80126da:	33ff      	adds	r3, #255	@ 0xff
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	18d3      	adds	r3, r2, r3
 80126e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	683a      	ldr	r2, [r7, #0]
 80126ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2200      	movs	r2, #0
 80126f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	2200      	movs	r2, #0
 80126f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80126fa:	187b      	adds	r3, r7, r1
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	2207      	movs	r2, #7
 8012700:	4013      	ands	r3, r2
 8012702:	b2da      	uxtb	r2, r3
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	697a      	ldr	r2, [r7, #20]
 801270e:	0011      	movs	r1, r2
 8012710:	0018      	movs	r0, r3
 8012712:	f006 f8fd 	bl	8018910 <USB_EPStartXfer>

  return HAL_OK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	0018      	movs	r0, r3
 801271a:	46bd      	mov	sp, r7
 801271c:	b006      	add	sp, #24
 801271e:	bd80      	pop	{r7, pc}

08012720 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	000a      	movs	r2, r1
 801272a:	1cfb      	adds	r3, r7, #3
 801272c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 801272e:	1cfb      	adds	r3, r7, #3
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	2207      	movs	r2, #7
 8012734:	401a      	ands	r2, r3
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	23c2      	movs	r3, #194	@ 0xc2
 801273a:	0059      	lsls	r1, r3, #1
 801273c:	0013      	movs	r3, r2
 801273e:	009b      	lsls	r3, r3, #2
 8012740:	189b      	adds	r3, r3, r2
 8012742:	00db      	lsls	r3, r3, #3
 8012744:	18c3      	adds	r3, r0, r3
 8012746:	185b      	adds	r3, r3, r1
 8012748:	681b      	ldr	r3, [r3, #0]
}
 801274a:	0018      	movs	r0, r3
 801274c:	46bd      	mov	sp, r7
 801274e:	b002      	add	sp, #8
 8012750:	bd80      	pop	{r7, pc}

08012752 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8012752:	b580      	push	{r7, lr}
 8012754:	b086      	sub	sp, #24
 8012756:	af00      	add	r7, sp, #0
 8012758:	60f8      	str	r0, [r7, #12]
 801275a:	607a      	str	r2, [r7, #4]
 801275c:	603b      	str	r3, [r7, #0]
 801275e:	200b      	movs	r0, #11
 8012760:	183b      	adds	r3, r7, r0
 8012762:	1c0a      	adds	r2, r1, #0
 8012764:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8012766:	183b      	adds	r3, r7, r0
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	2207      	movs	r2, #7
 801276c:	4013      	ands	r3, r2
 801276e:	1c5a      	adds	r2, r3, #1
 8012770:	0013      	movs	r3, r2
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	189b      	adds	r3, r3, r2
 8012776:	00db      	lsls	r3, r3, #3
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	18d3      	adds	r3, r2, r3
 801277c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8012784:	697b      	ldr	r3, [r7, #20]
 8012786:	683a      	ldr	r2, [r7, #0]
 8012788:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	2224      	movs	r2, #36	@ 0x24
 801278e:	2101      	movs	r1, #1
 8012790:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	683a      	ldr	r2, [r7, #0]
 8012796:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	2200      	movs	r2, #0
 801279c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 801279e:	697b      	ldr	r3, [r7, #20]
 80127a0:	2201      	movs	r2, #1
 80127a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80127a4:	183b      	adds	r3, r7, r0
 80127a6:	781b      	ldrb	r3, [r3, #0]
 80127a8:	2207      	movs	r2, #7
 80127aa:	4013      	ands	r3, r2
 80127ac:	b2da      	uxtb	r2, r3
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	697a      	ldr	r2, [r7, #20]
 80127b8:	0011      	movs	r1, r2
 80127ba:	0018      	movs	r0, r3
 80127bc:	f006 f8a8 	bl	8018910 <USB_EPStartXfer>

  return HAL_OK;
 80127c0:	2300      	movs	r3, #0
}
 80127c2:	0018      	movs	r0, r3
 80127c4:	46bd      	mov	sp, r7
 80127c6:	b006      	add	sp, #24
 80127c8:	bd80      	pop	{r7, pc}

080127ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80127ca:	b580      	push	{r7, lr}
 80127cc:	b084      	sub	sp, #16
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
 80127d2:	000a      	movs	r2, r1
 80127d4:	1cfb      	adds	r3, r7, #3
 80127d6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80127d8:	1cfb      	adds	r3, r7, #3
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	2207      	movs	r2, #7
 80127de:	401a      	ands	r2, r3
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d901      	bls.n	80127ec <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80127e8:	2301      	movs	r3, #1
 80127ea:	e046      	b.n	801287a <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80127ec:	1cfb      	adds	r3, r7, #3
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	b25b      	sxtb	r3, r3
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	da0f      	bge.n	8012816 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80127f6:	1cfb      	adds	r3, r7, #3
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	2207      	movs	r2, #7
 80127fc:	4013      	ands	r3, r2
 80127fe:	1c5a      	adds	r2, r3, #1
 8012800:	0013      	movs	r3, r2
 8012802:	009b      	lsls	r3, r3, #2
 8012804:	189b      	adds	r3, r3, r2
 8012806:	00db      	lsls	r3, r3, #3
 8012808:	687a      	ldr	r2, [r7, #4]
 801280a:	18d3      	adds	r3, r2, r3
 801280c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	2201      	movs	r2, #1
 8012812:	705a      	strb	r2, [r3, #1]
 8012814:	e00d      	b.n	8012832 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8012816:	1cfb      	adds	r3, r7, #3
 8012818:	781a      	ldrb	r2, [r3, #0]
 801281a:	0013      	movs	r3, r2
 801281c:	009b      	lsls	r3, r3, #2
 801281e:	189b      	adds	r3, r3, r2
 8012820:	00db      	lsls	r3, r3, #3
 8012822:	3369      	adds	r3, #105	@ 0x69
 8012824:	33ff      	adds	r3, #255	@ 0xff
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	18d3      	adds	r3, r2, r3
 801282a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2200      	movs	r2, #0
 8012830:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	2201      	movs	r2, #1
 8012836:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8012838:	1cfb      	adds	r3, r7, #3
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	2207      	movs	r2, #7
 801283e:	4013      	ands	r3, r2
 8012840:	b2da      	uxtb	r2, r3
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012846:	687a      	ldr	r2, [r7, #4]
 8012848:	23aa      	movs	r3, #170	@ 0xaa
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	5cd3      	ldrb	r3, [r2, r3]
 801284e:	2b01      	cmp	r3, #1
 8012850:	d101      	bne.n	8012856 <HAL_PCD_EP_SetStall+0x8c>
 8012852:	2302      	movs	r3, #2
 8012854:	e011      	b.n	801287a <HAL_PCD_EP_SetStall+0xb0>
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	23aa      	movs	r3, #170	@ 0xaa
 801285a:	009b      	lsls	r3, r3, #2
 801285c:	2101      	movs	r1, #1
 801285e:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	68fa      	ldr	r2, [r7, #12]
 8012866:	0011      	movs	r1, r2
 8012868:	0018      	movs	r0, r3
 801286a:	f007 f989 	bl	8019b80 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 801286e:	687a      	ldr	r2, [r7, #4]
 8012870:	23aa      	movs	r3, #170	@ 0xaa
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	2100      	movs	r1, #0
 8012876:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012878:	2300      	movs	r3, #0
}
 801287a:	0018      	movs	r0, r3
 801287c:	46bd      	mov	sp, r7
 801287e:	b004      	add	sp, #16
 8012880:	bd80      	pop	{r7, pc}

08012882 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8012882:	b580      	push	{r7, lr}
 8012884:	b084      	sub	sp, #16
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
 801288a:	000a      	movs	r2, r1
 801288c:	1cfb      	adds	r3, r7, #3
 801288e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8012890:	1cfb      	adds	r3, r7, #3
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	220f      	movs	r2, #15
 8012896:	401a      	ands	r2, r3
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	429a      	cmp	r2, r3
 801289e:	d901      	bls.n	80128a4 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80128a0:	2301      	movs	r3, #1
 80128a2:	e048      	b.n	8012936 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80128a4:	1cfb      	adds	r3, r7, #3
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	b25b      	sxtb	r3, r3
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	da0f      	bge.n	80128ce <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80128ae:	1cfb      	adds	r3, r7, #3
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	2207      	movs	r2, #7
 80128b4:	4013      	ands	r3, r2
 80128b6:	1c5a      	adds	r2, r3, #1
 80128b8:	0013      	movs	r3, r2
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	189b      	adds	r3, r3, r2
 80128be:	00db      	lsls	r3, r3, #3
 80128c0:	687a      	ldr	r2, [r7, #4]
 80128c2:	18d3      	adds	r3, r2, r3
 80128c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	2201      	movs	r2, #1
 80128ca:	705a      	strb	r2, [r3, #1]
 80128cc:	e00f      	b.n	80128ee <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80128ce:	1cfb      	adds	r3, r7, #3
 80128d0:	781b      	ldrb	r3, [r3, #0]
 80128d2:	2207      	movs	r2, #7
 80128d4:	401a      	ands	r2, r3
 80128d6:	0013      	movs	r3, r2
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	189b      	adds	r3, r3, r2
 80128dc:	00db      	lsls	r3, r3, #3
 80128de:	3369      	adds	r3, #105	@ 0x69
 80128e0:	33ff      	adds	r3, #255	@ 0xff
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	18d3      	adds	r3, r2, r3
 80128e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2200      	movs	r2, #0
 80128ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80128ee:	68fb      	ldr	r3, [r7, #12]
 80128f0:	2200      	movs	r2, #0
 80128f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80128f4:	1cfb      	adds	r3, r7, #3
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	2207      	movs	r2, #7
 80128fa:	4013      	ands	r3, r2
 80128fc:	b2da      	uxtb	r2, r3
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	23aa      	movs	r3, #170	@ 0xaa
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	5cd3      	ldrb	r3, [r2, r3]
 801290a:	2b01      	cmp	r3, #1
 801290c:	d101      	bne.n	8012912 <HAL_PCD_EP_ClrStall+0x90>
 801290e:	2302      	movs	r3, #2
 8012910:	e011      	b.n	8012936 <HAL_PCD_EP_ClrStall+0xb4>
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	23aa      	movs	r3, #170	@ 0xaa
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	2101      	movs	r1, #1
 801291a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	68fa      	ldr	r2, [r7, #12]
 8012922:	0011      	movs	r1, r2
 8012924:	0018      	movs	r0, r3
 8012926:	f007 f97b 	bl	8019c20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801292a:	687a      	ldr	r2, [r7, #4]
 801292c:	23aa      	movs	r3, #170	@ 0xaa
 801292e:	009b      	lsls	r3, r3, #2
 8012930:	2100      	movs	r1, #0
 8012932:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8012934:	2300      	movs	r3, #0
}
 8012936:	0018      	movs	r0, r3
 8012938:	46bd      	mov	sp, r7
 801293a:	b004      	add	sp, #16
 801293c:	bd80      	pop	{r7, pc}
	...

08012940 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8012940:	b5b0      	push	{r4, r5, r7, lr}
 8012942:	b096      	sub	sp, #88	@ 0x58
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8012948:	f000 fbec 	bl	8013124 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681a      	ldr	r2, [r3, #0]
 8012950:	204e      	movs	r0, #78	@ 0x4e
 8012952:	183b      	adds	r3, r7, r0
 8012954:	2144      	movs	r1, #68	@ 0x44
 8012956:	5a52      	ldrh	r2, [r2, r1]
 8012958:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 801295a:	183b      	adds	r3, r7, r0
 801295c:	881b      	ldrh	r3, [r3, #0]
 801295e:	b2da      	uxtb	r2, r3
 8012960:	244d      	movs	r4, #77	@ 0x4d
 8012962:	193b      	adds	r3, r7, r4
 8012964:	210f      	movs	r1, #15
 8012966:	400a      	ands	r2, r1
 8012968:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 801296a:	193b      	adds	r3, r7, r4
 801296c:	781b      	ldrb	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d000      	beq.n	8012974 <PCD_EP_ISR_Handler+0x34>
 8012972:	e18f      	b.n	8012c94 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8012974:	183b      	adds	r3, r7, r0
 8012976:	881b      	ldrh	r3, [r3, #0]
 8012978:	2210      	movs	r2, #16
 801297a:	4013      	ands	r3, r2
 801297c:	d155      	bne.n	8012a2a <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	881b      	ldrh	r3, [r3, #0]
 8012984:	b29a      	uxth	r2, r3
 8012986:	200e      	movs	r0, #14
 8012988:	183b      	adds	r3, r7, r0
 801298a:	49bb      	ldr	r1, [pc, #748]	@ (8012c78 <PCD_EP_ISR_Handler+0x338>)
 801298c:	400a      	ands	r2, r1
 801298e:	801a      	strh	r2, [r3, #0]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	183a      	adds	r2, r7, r0
 8012996:	8812      	ldrh	r2, [r2, #0]
 8012998:	49b8      	ldr	r1, [pc, #736]	@ (8012c7c <PCD_EP_ISR_Handler+0x33c>)
 801299a:	430a      	orrs	r2, r1
 801299c:	b292      	uxth	r2, r2
 801299e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	3328      	adds	r3, #40	@ 0x28
 80129a4:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2250      	movs	r2, #80	@ 0x50
 80129ac:	5a9b      	ldrh	r3, [r3, r2]
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	001a      	movs	r2, r3
 80129b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	00db      	lsls	r3, r3, #3
 80129b8:	18d2      	adds	r2, r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	18d3      	adds	r3, r2, r3
 80129c0:	4aaf      	ldr	r2, [pc, #700]	@ (8012c80 <PCD_EP_ISR_Handler+0x340>)
 80129c2:	4694      	mov	ip, r2
 80129c4:	4463      	add	r3, ip
 80129c6:	881b      	ldrh	r3, [r3, #0]
 80129c8:	059b      	lsls	r3, r3, #22
 80129ca:	0d9a      	lsrs	r2, r3, #22
 80129cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80129d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129d2:	695a      	ldr	r2, [r3, #20]
 80129d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129d6:	69db      	ldr	r3, [r3, #28]
 80129d8:	18d2      	adds	r2, r2, r3
 80129da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2100      	movs	r1, #0
 80129e2:	0018      	movs	r0, r3
 80129e4:	f009 fa8a 	bl	801befc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2224      	movs	r2, #36	@ 0x24
 80129ec:	5c9b      	ldrb	r3, [r3, r2]
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d101      	bne.n	80129f8 <PCD_EP_ISR_Handler+0xb8>
 80129f4:	f000 fb96 	bl	8013124 <PCD_EP_ISR_Handler+0x7e4>
 80129f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80129fa:	699b      	ldr	r3, [r3, #24]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d001      	beq.n	8012a04 <PCD_EP_ISR_Handler+0xc4>
 8012a00:	f000 fb90 	bl	8013124 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2224      	movs	r2, #36	@ 0x24
 8012a08:	5c9b      	ldrb	r3, [r3, r2]
 8012a0a:	b2db      	uxtb	r3, r3
 8012a0c:	2280      	movs	r2, #128	@ 0x80
 8012a0e:	4252      	negs	r2, r2
 8012a10:	4313      	orrs	r3, r2
 8012a12:	b2da      	uxtb	r2, r3
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	0011      	movs	r1, r2
 8012a1a:	224c      	movs	r2, #76	@ 0x4c
 8012a1c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2224      	movs	r2, #36	@ 0x24
 8012a22:	2100      	movs	r1, #0
 8012a24:	5499      	strb	r1, [r3, r2]
 8012a26:	f000 fb7d 	bl	8013124 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	3369      	adds	r3, #105	@ 0x69
 8012a2e:	33ff      	adds	r3, #255	@ 0xff
 8012a30:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	214a      	movs	r1, #74	@ 0x4a
 8012a38:	187b      	adds	r3, r7, r1
 8012a3a:	8812      	ldrh	r2, [r2, #0]
 8012a3c:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8012a3e:	187b      	adds	r3, r7, r1
 8012a40:	881a      	ldrh	r2, [r3, #0]
 8012a42:	2380      	movs	r3, #128	@ 0x80
 8012a44:	011b      	lsls	r3, r3, #4
 8012a46:	4013      	ands	r3, r2
 8012a48:	d037      	beq.n	8012aba <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	2250      	movs	r2, #80	@ 0x50
 8012a50:	5a9b      	ldrh	r3, [r3, r2]
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	001a      	movs	r2, r3
 8012a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	00db      	lsls	r3, r3, #3
 8012a5c:	18d2      	adds	r2, r2, r3
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	18d3      	adds	r3, r2, r3
 8012a64:	4a87      	ldr	r2, [pc, #540]	@ (8012c84 <PCD_EP_ISR_Handler+0x344>)
 8012a66:	4694      	mov	ip, r2
 8012a68:	4463      	add	r3, ip
 8012a6a:	881b      	ldrh	r3, [r3, #0]
 8012a6c:	059b      	lsls	r3, r3, #22
 8012a6e:	0d9a      	lsrs	r2, r3, #22
 8012a70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a72:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	6818      	ldr	r0, [r3, #0]
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	22ac      	movs	r2, #172	@ 0xac
 8012a7c:	0092      	lsls	r2, r2, #2
 8012a7e:	1899      	adds	r1, r3, r2
 8012a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8012a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012a86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	f007 f9fc 	bl	8019e86 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	881b      	ldrh	r3, [r3, #0]
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	2010      	movs	r0, #16
 8012a98:	183b      	adds	r3, r7, r0
 8012a9a:	497b      	ldr	r1, [pc, #492]	@ (8012c88 <PCD_EP_ISR_Handler+0x348>)
 8012a9c:	400a      	ands	r2, r1
 8012a9e:	801a      	strh	r2, [r3, #0]
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	183a      	adds	r2, r7, r0
 8012aa6:	8812      	ldrh	r2, [r2, #0]
 8012aa8:	2180      	movs	r1, #128	@ 0x80
 8012aaa:	430a      	orrs	r2, r1
 8012aac:	b292      	uxth	r2, r2
 8012aae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	0018      	movs	r0, r3
 8012ab4:	f009 f9ec 	bl	801be90 <HAL_PCD_SetupStageCallback>
 8012ab8:	e334      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012aba:	234a      	movs	r3, #74	@ 0x4a
 8012abc:	18fb      	adds	r3, r7, r3
 8012abe:	2200      	movs	r2, #0
 8012ac0:	5e9b      	ldrsh	r3, [r3, r2]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	db00      	blt.n	8012ac8 <PCD_EP_ISR_Handler+0x188>
 8012ac6:	e32d      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	b29a      	uxth	r2, r3
 8012ad0:	201e      	movs	r0, #30
 8012ad2:	183b      	adds	r3, r7, r0
 8012ad4:	496c      	ldr	r1, [pc, #432]	@ (8012c88 <PCD_EP_ISR_Handler+0x348>)
 8012ad6:	400a      	ands	r2, r1
 8012ad8:	801a      	strh	r2, [r3, #0]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	183a      	adds	r2, r7, r0
 8012ae0:	8812      	ldrh	r2, [r2, #0]
 8012ae2:	2180      	movs	r1, #128	@ 0x80
 8012ae4:	430a      	orrs	r2, r1
 8012ae6:	b292      	uxth	r2, r2
 8012ae8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2250      	movs	r2, #80	@ 0x50
 8012af0:	5a9b      	ldrh	r3, [r3, r2]
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	001a      	movs	r2, r3
 8012af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	00db      	lsls	r3, r3, #3
 8012afc:	18d2      	adds	r2, r2, r3
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	18d3      	adds	r3, r2, r3
 8012b04:	4a5f      	ldr	r2, [pc, #380]	@ (8012c84 <PCD_EP_ISR_Handler+0x344>)
 8012b06:	4694      	mov	ip, r2
 8012b08:	4463      	add	r3, ip
 8012b0a:	881b      	ldrh	r3, [r3, #0]
 8012b0c:	059b      	lsls	r3, r3, #22
 8012b0e:	0d9a      	lsrs	r2, r3, #22
 8012b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b12:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8012b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b16:	69db      	ldr	r3, [r3, #28]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d01a      	beq.n	8012b52 <PCD_EP_ISR_Handler+0x212>
 8012b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b1e:	695b      	ldr	r3, [r3, #20]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d016      	beq.n	8012b52 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6818      	ldr	r0, [r3, #0]
 8012b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b2a:	6959      	ldr	r1, [r3, #20]
 8012b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b2e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8012b30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b32:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8012b34:	b29b      	uxth	r3, r3
 8012b36:	f007 f9a6 	bl	8019e86 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8012b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b3c:	695a      	ldr	r2, [r3, #20]
 8012b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b40:	69db      	ldr	r3, [r3, #28]
 8012b42:	18d2      	adds	r2, r2, r3
 8012b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012b46:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	0018      	movs	r0, r3
 8012b4e:	f009 f9b4 	bl	801beba <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	681a      	ldr	r2, [r3, #0]
 8012b56:	214a      	movs	r1, #74	@ 0x4a
 8012b58:	187b      	adds	r3, r7, r1
 8012b5a:	8812      	ldrh	r2, [r2, #0]
 8012b5c:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8012b5e:	187b      	adds	r3, r7, r1
 8012b60:	881a      	ldrh	r2, [r3, #0]
 8012b62:	2380      	movs	r3, #128	@ 0x80
 8012b64:	011b      	lsls	r3, r3, #4
 8012b66:	4013      	ands	r3, r2
 8012b68:	d000      	beq.n	8012b6c <PCD_EP_ISR_Handler+0x22c>
 8012b6a:	e2db      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
 8012b6c:	187b      	adds	r3, r7, r1
 8012b6e:	881a      	ldrh	r2, [r3, #0]
 8012b70:	23c0      	movs	r3, #192	@ 0xc0
 8012b72:	019b      	lsls	r3, r3, #6
 8012b74:	401a      	ands	r2, r3
 8012b76:	23c0      	movs	r3, #192	@ 0xc0
 8012b78:	019b      	lsls	r3, r3, #6
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	d100      	bne.n	8012b80 <PCD_EP_ISR_Handler+0x240>
 8012b7e:	e2d1      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	61bb      	str	r3, [r7, #24]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2250      	movs	r2, #80	@ 0x50
 8012b8c:	5a9b      	ldrh	r3, [r3, r2]
 8012b8e:	b29b      	uxth	r3, r3
 8012b90:	001a      	movs	r2, r3
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	189b      	adds	r3, r3, r2
 8012b96:	61bb      	str	r3, [r7, #24]
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	4a3a      	ldr	r2, [pc, #232]	@ (8012c84 <PCD_EP_ISR_Handler+0x344>)
 8012b9c:	4694      	mov	ip, r2
 8012b9e:	4463      	add	r3, ip
 8012ba0:	617b      	str	r3, [r7, #20]
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	881b      	ldrh	r3, [r3, #0]
 8012ba6:	b29b      	uxth	r3, r3
 8012ba8:	059b      	lsls	r3, r3, #22
 8012baa:	0d9b      	lsrs	r3, r3, #22
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	801a      	strh	r2, [r3, #0]
 8012bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bb4:	691b      	ldr	r3, [r3, #16]
 8012bb6:	2b3e      	cmp	r3, #62	@ 0x3e
 8012bb8:	d91a      	bls.n	8012bf0 <PCD_EP_ISR_Handler+0x2b0>
 8012bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bbc:	691b      	ldr	r3, [r3, #16]
 8012bbe:	095b      	lsrs	r3, r3, #5
 8012bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bc4:	691b      	ldr	r3, [r3, #16]
 8012bc6:	221f      	movs	r2, #31
 8012bc8:	4013      	ands	r3, r2
 8012bca:	d102      	bne.n	8012bd2 <PCD_EP_ISR_Handler+0x292>
 8012bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bce:	3b01      	subs	r3, #1
 8012bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	881b      	ldrh	r3, [r3, #0]
 8012bd6:	b29a      	uxth	r2, r3
 8012bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	029b      	lsls	r3, r3, #10
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	4313      	orrs	r3, r2
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	4a25      	ldr	r2, [pc, #148]	@ (8012c7c <PCD_EP_ISR_Handler+0x33c>)
 8012be6:	4313      	orrs	r3, r2
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	801a      	strh	r2, [r3, #0]
 8012bee:	e023      	b.n	8012c38 <PCD_EP_ISR_Handler+0x2f8>
 8012bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012bf2:	691b      	ldr	r3, [r3, #16]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d108      	bne.n	8012c0a <PCD_EP_ISR_Handler+0x2ca>
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	881b      	ldrh	r3, [r3, #0]
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8012c7c <PCD_EP_ISR_Handler+0x33c>)
 8012c00:	4313      	orrs	r3, r2
 8012c02:	b29a      	uxth	r2, r3
 8012c04:	697b      	ldr	r3, [r7, #20]
 8012c06:	801a      	strh	r2, [r3, #0]
 8012c08:	e016      	b.n	8012c38 <PCD_EP_ISR_Handler+0x2f8>
 8012c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c0c:	691b      	ldr	r3, [r3, #16]
 8012c0e:	085b      	lsrs	r3, r3, #1
 8012c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8012c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c14:	691b      	ldr	r3, [r3, #16]
 8012c16:	2201      	movs	r2, #1
 8012c18:	4013      	ands	r3, r2
 8012c1a:	d002      	beq.n	8012c22 <PCD_EP_ISR_Handler+0x2e2>
 8012c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c1e:	3301      	adds	r3, #1
 8012c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8012c22:	697b      	ldr	r3, [r7, #20]
 8012c24:	881b      	ldrh	r3, [r3, #0]
 8012c26:	b29a      	uxth	r2, r3
 8012c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	029b      	lsls	r3, r3, #10
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	4313      	orrs	r3, r2
 8012c32:	b29a      	uxth	r2, r3
 8012c34:	697b      	ldr	r3, [r7, #20]
 8012c36:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	881b      	ldrh	r3, [r3, #0]
 8012c3e:	b29a      	uxth	r2, r3
 8012c40:	2012      	movs	r0, #18
 8012c42:	183b      	adds	r3, r7, r0
 8012c44:	4911      	ldr	r1, [pc, #68]	@ (8012c8c <PCD_EP_ISR_Handler+0x34c>)
 8012c46:	400a      	ands	r2, r1
 8012c48:	801a      	strh	r2, [r3, #0]
 8012c4a:	183b      	adds	r3, r7, r0
 8012c4c:	183a      	adds	r2, r7, r0
 8012c4e:	8812      	ldrh	r2, [r2, #0]
 8012c50:	2180      	movs	r1, #128	@ 0x80
 8012c52:	0149      	lsls	r1, r1, #5
 8012c54:	404a      	eors	r2, r1
 8012c56:	801a      	strh	r2, [r3, #0]
 8012c58:	183b      	adds	r3, r7, r0
 8012c5a:	183a      	adds	r2, r7, r0
 8012c5c:	8812      	ldrh	r2, [r2, #0]
 8012c5e:	2180      	movs	r1, #128	@ 0x80
 8012c60:	0189      	lsls	r1, r1, #6
 8012c62:	404a      	eors	r2, r1
 8012c64:	801a      	strh	r2, [r3, #0]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	183a      	adds	r2, r7, r0
 8012c6c:	8812      	ldrh	r2, [r2, #0]
 8012c6e:	4908      	ldr	r1, [pc, #32]	@ (8012c90 <PCD_EP_ISR_Handler+0x350>)
 8012c70:	430a      	orrs	r2, r1
 8012c72:	b292      	uxth	r2, r2
 8012c74:	801a      	strh	r2, [r3, #0]
 8012c76:	e255      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
 8012c78:	ffff8f0f 	.word	0xffff8f0f
 8012c7c:	ffff8000 	.word	0xffff8000
 8012c80:	00000402 	.word	0x00000402
 8012c84:	00000406 	.word	0x00000406
 8012c88:	00000f8f 	.word	0x00000f8f
 8012c8c:	ffffbf8f 	.word	0xffffbf8f
 8012c90:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	001a      	movs	r2, r3
 8012c9a:	204d      	movs	r0, #77	@ 0x4d
 8012c9c:	183b      	adds	r3, r7, r0
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	009b      	lsls	r3, r3, #2
 8012ca2:	18d2      	adds	r2, r2, r3
 8012ca4:	214a      	movs	r1, #74	@ 0x4a
 8012ca6:	187b      	adds	r3, r7, r1
 8012ca8:	8812      	ldrh	r2, [r2, #0]
 8012caa:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8012cac:	187b      	adds	r3, r7, r1
 8012cae:	2200      	movs	r2, #0
 8012cb0:	5e9b      	ldrsh	r3, [r3, r2]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	db00      	blt.n	8012cb8 <PCD_EP_ISR_Handler+0x378>
 8012cb6:	e0fa      	b.n	8012eae <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	001a      	movs	r2, r3
 8012cbe:	183b      	adds	r3, r7, r0
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	009b      	lsls	r3, r3, #2
 8012cc4:	18d3      	adds	r3, r2, r3
 8012cc6:	881b      	ldrh	r3, [r3, #0]
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	2448      	movs	r4, #72	@ 0x48
 8012ccc:	193b      	adds	r3, r7, r4
 8012cce:	49d1      	ldr	r1, [pc, #836]	@ (8013014 <PCD_EP_ISR_Handler+0x6d4>)
 8012cd0:	400a      	ands	r2, r1
 8012cd2:	801a      	strh	r2, [r3, #0]
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	001a      	movs	r2, r3
 8012cda:	183b      	adds	r3, r7, r0
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	18d3      	adds	r3, r2, r3
 8012ce2:	193a      	adds	r2, r7, r4
 8012ce4:	8812      	ldrh	r2, [r2, #0]
 8012ce6:	2180      	movs	r1, #128	@ 0x80
 8012ce8:	430a      	orrs	r2, r1
 8012cea:	b292      	uxth	r2, r2
 8012cec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8012cee:	183b      	adds	r3, r7, r0
 8012cf0:	781a      	ldrb	r2, [r3, #0]
 8012cf2:	0013      	movs	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	189b      	adds	r3, r3, r2
 8012cf8:	00db      	lsls	r3, r3, #3
 8012cfa:	3369      	adds	r3, #105	@ 0x69
 8012cfc:	33ff      	adds	r3, #255	@ 0xff
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	18d3      	adds	r3, r2, r3
 8012d02:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8012d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d06:	7b1b      	ldrb	r3, [r3, #12]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d125      	bne.n	8012d58 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2250      	movs	r2, #80	@ 0x50
 8012d12:	5a9b      	ldrh	r3, [r3, r2]
 8012d14:	b29b      	uxth	r3, r3
 8012d16:	001a      	movs	r2, r3
 8012d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	00db      	lsls	r3, r3, #3
 8012d1e:	18d2      	adds	r2, r2, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	18d3      	adds	r3, r2, r3
 8012d26:	4abc      	ldr	r2, [pc, #752]	@ (8013018 <PCD_EP_ISR_Handler+0x6d8>)
 8012d28:	4694      	mov	ip, r2
 8012d2a:	4463      	add	r3, ip
 8012d2c:	881a      	ldrh	r2, [r3, #0]
 8012d2e:	2450      	movs	r4, #80	@ 0x50
 8012d30:	193b      	adds	r3, r7, r4
 8012d32:	0592      	lsls	r2, r2, #22
 8012d34:	0d92      	lsrs	r2, r2, #22
 8012d36:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8012d38:	193b      	adds	r3, r7, r4
 8012d3a:	881b      	ldrh	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d100      	bne.n	8012d42 <PCD_EP_ISR_Handler+0x402>
 8012d40:	e08d      	b.n	8012e5e <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6818      	ldr	r0, [r3, #0]
 8012d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d48:	6959      	ldr	r1, [r3, #20]
 8012d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d4c:	88da      	ldrh	r2, [r3, #6]
 8012d4e:	193b      	adds	r3, r7, r4
 8012d50:	881b      	ldrh	r3, [r3, #0]
 8012d52:	f007 f898 	bl	8019e86 <USB_ReadPMA>
 8012d56:	e082      	b.n	8012e5e <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8012d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d5a:	78db      	ldrb	r3, [r3, #3]
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	d10c      	bne.n	8012d7a <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8012d60:	2350      	movs	r3, #80	@ 0x50
 8012d62:	18fc      	adds	r4, r7, r3
 8012d64:	234a      	movs	r3, #74	@ 0x4a
 8012d66:	18fb      	adds	r3, r7, r3
 8012d68:	881a      	ldrh	r2, [r3, #0]
 8012d6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	0018      	movs	r0, r3
 8012d70:	f000 f9ec 	bl	801314c <HAL_PCD_EP_DB_Receive>
 8012d74:	0003      	movs	r3, r0
 8012d76:	8023      	strh	r3, [r4, #0]
 8012d78:	e071      	b.n	8012e5e <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	001a      	movs	r2, r3
 8012d80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	009b      	lsls	r3, r3, #2
 8012d86:	18d3      	adds	r3, r2, r3
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	2052      	movs	r0, #82	@ 0x52
 8012d8e:	183b      	adds	r3, r7, r0
 8012d90:	49a2      	ldr	r1, [pc, #648]	@ (801301c <PCD_EP_ISR_Handler+0x6dc>)
 8012d92:	400a      	ands	r2, r1
 8012d94:	801a      	strh	r2, [r3, #0]
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	001a      	movs	r2, r3
 8012d9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	18d3      	adds	r3, r2, r3
 8012da4:	183a      	adds	r2, r7, r0
 8012da6:	8812      	ldrh	r2, [r2, #0]
 8012da8:	499d      	ldr	r1, [pc, #628]	@ (8013020 <PCD_EP_ISR_Handler+0x6e0>)
 8012daa:	430a      	orrs	r2, r1
 8012dac:	b292      	uxth	r2, r2
 8012dae:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	001a      	movs	r2, r3
 8012db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	009b      	lsls	r3, r3, #2
 8012dbc:	18d3      	adds	r3, r2, r3
 8012dbe:	881b      	ldrh	r3, [r3, #0]
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	001a      	movs	r2, r3
 8012dc4:	2380      	movs	r3, #128	@ 0x80
 8012dc6:	01db      	lsls	r3, r3, #7
 8012dc8:	4013      	ands	r3, r2
 8012dca:	d024      	beq.n	8012e16 <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2250      	movs	r2, #80	@ 0x50
 8012dd2:	5a9b      	ldrh	r3, [r3, r2]
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	001a      	movs	r2, r3
 8012dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dda:	781b      	ldrb	r3, [r3, #0]
 8012ddc:	00db      	lsls	r3, r3, #3
 8012dde:	18d2      	adds	r2, r2, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	18d3      	adds	r3, r2, r3
 8012de6:	4a8f      	ldr	r2, [pc, #572]	@ (8013024 <PCD_EP_ISR_Handler+0x6e4>)
 8012de8:	4694      	mov	ip, r2
 8012dea:	4463      	add	r3, ip
 8012dec:	881a      	ldrh	r2, [r3, #0]
 8012dee:	2450      	movs	r4, #80	@ 0x50
 8012df0:	193b      	adds	r3, r7, r4
 8012df2:	0592      	lsls	r2, r2, #22
 8012df4:	0d92      	lsrs	r2, r2, #22
 8012df6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8012df8:	193b      	adds	r3, r7, r4
 8012dfa:	881b      	ldrh	r3, [r3, #0]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d02e      	beq.n	8012e5e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6818      	ldr	r0, [r3, #0]
 8012e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e06:	6959      	ldr	r1, [r3, #20]
 8012e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e0a:	891a      	ldrh	r2, [r3, #8]
 8012e0c:	193b      	adds	r3, r7, r4
 8012e0e:	881b      	ldrh	r3, [r3, #0]
 8012e10:	f007 f839 	bl	8019e86 <USB_ReadPMA>
 8012e14:	e023      	b.n	8012e5e <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	2250      	movs	r2, #80	@ 0x50
 8012e1c:	5a9b      	ldrh	r3, [r3, r2]
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	001a      	movs	r2, r3
 8012e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e24:	781b      	ldrb	r3, [r3, #0]
 8012e26:	00db      	lsls	r3, r3, #3
 8012e28:	18d2      	adds	r2, r2, r3
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	18d3      	adds	r3, r2, r3
 8012e30:	4a79      	ldr	r2, [pc, #484]	@ (8013018 <PCD_EP_ISR_Handler+0x6d8>)
 8012e32:	4694      	mov	ip, r2
 8012e34:	4463      	add	r3, ip
 8012e36:	881a      	ldrh	r2, [r3, #0]
 8012e38:	2450      	movs	r4, #80	@ 0x50
 8012e3a:	193b      	adds	r3, r7, r4
 8012e3c:	0592      	lsls	r2, r2, #22
 8012e3e:	0d92      	lsrs	r2, r2, #22
 8012e40:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8012e42:	193b      	adds	r3, r7, r4
 8012e44:	881b      	ldrh	r3, [r3, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d009      	beq.n	8012e5e <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6818      	ldr	r0, [r3, #0]
 8012e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e50:	6959      	ldr	r1, [r3, #20]
 8012e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e54:	895a      	ldrh	r2, [r3, #10]
 8012e56:	193b      	adds	r3, r7, r4
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	f007 f814 	bl	8019e86 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8012e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e60:	69da      	ldr	r2, [r3, #28]
 8012e62:	2150      	movs	r1, #80	@ 0x50
 8012e64:	187b      	adds	r3, r7, r1
 8012e66:	881b      	ldrh	r3, [r3, #0]
 8012e68:	18d2      	adds	r2, r2, r3
 8012e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e6c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8012e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e70:	695a      	ldr	r2, [r3, #20]
 8012e72:	187b      	adds	r3, r7, r1
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	18d2      	adds	r2, r2, r3
 8012e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e7a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8012e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e7e:	699b      	ldr	r3, [r3, #24]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d005      	beq.n	8012e90 <PCD_EP_ISR_Handler+0x550>
 8012e84:	187b      	adds	r3, r7, r1
 8012e86:	881a      	ldrh	r2, [r3, #0]
 8012e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e8a:	691b      	ldr	r3, [r3, #16]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d207      	bcs.n	8012ea0 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8012e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e92:	781a      	ldrb	r2, [r3, #0]
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	0011      	movs	r1, r2
 8012e98:	0018      	movs	r0, r3
 8012e9a:	f009 f80e 	bl	801beba <HAL_PCD_DataOutStageCallback>
 8012e9e:	e006      	b.n	8012eae <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012ea6:	0011      	movs	r1, r2
 8012ea8:	0018      	movs	r0, r3
 8012eaa:	f005 fd31 	bl	8018910 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8012eae:	244a      	movs	r4, #74	@ 0x4a
 8012eb0:	193b      	adds	r3, r7, r4
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	2280      	movs	r2, #128	@ 0x80
 8012eb6:	4013      	ands	r3, r2
 8012eb8:	d100      	bne.n	8012ebc <PCD_EP_ISR_Handler+0x57c>
 8012eba:	e133      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8012ebc:	204d      	movs	r0, #77	@ 0x4d
 8012ebe:	183b      	adds	r3, r7, r0
 8012ec0:	781b      	ldrb	r3, [r3, #0]
 8012ec2:	1c5a      	adds	r2, r3, #1
 8012ec4:	0013      	movs	r3, r2
 8012ec6:	009b      	lsls	r3, r3, #2
 8012ec8:	189b      	adds	r3, r3, r2
 8012eca:	00db      	lsls	r3, r3, #3
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	18d3      	adds	r3, r2, r3
 8012ed0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	001a      	movs	r2, r3
 8012ed8:	183b      	adds	r3, r7, r0
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	009b      	lsls	r3, r3, #2
 8012ede:	18d3      	adds	r3, r2, r3
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	2542      	movs	r5, #66	@ 0x42
 8012ee6:	197b      	adds	r3, r7, r5
 8012ee8:	494f      	ldr	r1, [pc, #316]	@ (8013028 <PCD_EP_ISR_Handler+0x6e8>)
 8012eea:	400a      	ands	r2, r1
 8012eec:	801a      	strh	r2, [r3, #0]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	001a      	movs	r2, r3
 8012ef4:	183b      	adds	r3, r7, r0
 8012ef6:	781b      	ldrb	r3, [r3, #0]
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	18d3      	adds	r3, r2, r3
 8012efc:	197a      	adds	r2, r7, r5
 8012efe:	8812      	ldrh	r2, [r2, #0]
 8012f00:	494a      	ldr	r1, [pc, #296]	@ (801302c <PCD_EP_ISR_Handler+0x6ec>)
 8012f02:	430a      	orrs	r2, r1
 8012f04:	b292      	uxth	r2, r2
 8012f06:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8012f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f0a:	78db      	ldrb	r3, [r3, #3]
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	d000      	beq.n	8012f12 <PCD_EP_ISR_Handler+0x5d2>
 8012f10:	e0af      	b.n	8013072 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8012f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f14:	2200      	movs	r2, #0
 8012f16:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8012f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f1a:	7b1b      	ldrb	r3, [r3, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d100      	bne.n	8012f22 <PCD_EP_ISR_Handler+0x5e2>
 8012f20:	e09f      	b.n	8013062 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8012f22:	193b      	adds	r3, r7, r4
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	2240      	movs	r2, #64	@ 0x40
 8012f28:	4013      	ands	r3, r2
 8012f2a:	d046      	beq.n	8012fba <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f2e:	785b      	ldrb	r3, [r3, #1]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d125      	bne.n	8012f80 <PCD_EP_ISR_Handler+0x640>
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	2250      	movs	r2, #80	@ 0x50
 8012f40:	5a9b      	ldrh	r3, [r3, r2]
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	001a      	movs	r2, r3
 8012f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f48:	189b      	adds	r3, r3, r2
 8012f4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8012f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	00da      	lsls	r2, r3, #3
 8012f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f54:	18d3      	adds	r3, r2, r3
 8012f56:	4a33      	ldr	r2, [pc, #204]	@ (8013024 <PCD_EP_ISR_Handler+0x6e4>)
 8012f58:	4694      	mov	ip, r2
 8012f5a:	4463      	add	r3, ip
 8012f5c:	623b      	str	r3, [r7, #32]
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	881b      	ldrh	r3, [r3, #0]
 8012f62:	b29b      	uxth	r3, r3
 8012f64:	059b      	lsls	r3, r3, #22
 8012f66:	0d9b      	lsrs	r3, r3, #22
 8012f68:	b29a      	uxth	r2, r3
 8012f6a:	6a3b      	ldr	r3, [r7, #32]
 8012f6c:	801a      	strh	r2, [r3, #0]
 8012f6e:	6a3b      	ldr	r3, [r7, #32]
 8012f70:	881b      	ldrh	r3, [r3, #0]
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	4a2d      	ldr	r2, [pc, #180]	@ (801302c <PCD_EP_ISR_Handler+0x6ec>)
 8012f76:	4313      	orrs	r3, r2
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	6a3b      	ldr	r3, [r7, #32]
 8012f7c:	801a      	strh	r2, [r3, #0]
 8012f7e:	e070      	b.n	8013062 <PCD_EP_ISR_Handler+0x722>
 8012f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f82:	785b      	ldrb	r3, [r3, #1]
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d16c      	bne.n	8013062 <PCD_EP_ISR_Handler+0x722>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2250      	movs	r2, #80	@ 0x50
 8012f94:	5a9b      	ldrh	r3, [r3, r2]
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	001a      	movs	r2, r3
 8012f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012f9c:	189b      	adds	r3, r3, r2
 8012f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	00da      	lsls	r2, r3, #3
 8012fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fa8:	18d3      	adds	r3, r2, r3
 8012faa:	4a1e      	ldr	r2, [pc, #120]	@ (8013024 <PCD_EP_ISR_Handler+0x6e4>)
 8012fac:	4694      	mov	ip, r2
 8012fae:	4463      	add	r3, ip
 8012fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	801a      	strh	r2, [r3, #0]
 8012fb8:	e053      	b.n	8013062 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fc2:	785b      	ldrb	r3, [r3, #1]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d133      	bne.n	8013030 <PCD_EP_ISR_Handler+0x6f0>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	2250      	movs	r2, #80	@ 0x50
 8012fd4:	5a9b      	ldrh	r3, [r3, r2]
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	001a      	movs	r2, r3
 8012fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fdc:	189b      	adds	r3, r3, r2
 8012fde:	637b      	str	r3, [r7, #52]	@ 0x34
 8012fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	00da      	lsls	r2, r3, #3
 8012fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fe8:	18d3      	adds	r3, r2, r3
 8012fea:	4a0b      	ldr	r2, [pc, #44]	@ (8013018 <PCD_EP_ISR_Handler+0x6d8>)
 8012fec:	4694      	mov	ip, r2
 8012fee:	4463      	add	r3, ip
 8012ff0:	633b      	str	r3, [r7, #48]	@ 0x30
 8012ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ff4:	881b      	ldrh	r3, [r3, #0]
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	059b      	lsls	r3, r3, #22
 8012ffa:	0d9b      	lsrs	r3, r3, #22
 8012ffc:	b29a      	uxth	r2, r3
 8012ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013000:	801a      	strh	r2, [r3, #0]
 8013002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013004:	881b      	ldrh	r3, [r3, #0]
 8013006:	b29b      	uxth	r3, r3
 8013008:	4a08      	ldr	r2, [pc, #32]	@ (801302c <PCD_EP_ISR_Handler+0x6ec>)
 801300a:	4313      	orrs	r3, r2
 801300c:	b29a      	uxth	r2, r3
 801300e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013010:	801a      	strh	r2, [r3, #0]
 8013012:	e026      	b.n	8013062 <PCD_EP_ISR_Handler+0x722>
 8013014:	00000f8f 	.word	0x00000f8f
 8013018:	00000406 	.word	0x00000406
 801301c:	ffff8f8f 	.word	0xffff8f8f
 8013020:	ffff80c0 	.word	0xffff80c0
 8013024:	00000402 	.word	0x00000402
 8013028:	ffff8f0f 	.word	0xffff8f0f
 801302c:	ffff8000 	.word	0xffff8000
 8013030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013032:	785b      	ldrb	r3, [r3, #1]
 8013034:	2b01      	cmp	r3, #1
 8013036:	d114      	bne.n	8013062 <PCD_EP_ISR_Handler+0x722>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	2250      	movs	r2, #80	@ 0x50
 801303e:	5a9b      	ldrh	r3, [r3, r2]
 8013040:	b29b      	uxth	r3, r3
 8013042:	001a      	movs	r2, r3
 8013044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013046:	189b      	adds	r3, r3, r2
 8013048:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801304a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	00da      	lsls	r2, r3, #3
 8013050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013052:	18d3      	adds	r3, r2, r3
 8013054:	4a3b      	ldr	r2, [pc, #236]	@ (8013144 <PCD_EP_ISR_Handler+0x804>)
 8013056:	4694      	mov	ip, r2
 8013058:	4463      	add	r3, ip
 801305a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801305c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801305e:	2200      	movs	r2, #0
 8013060:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8013062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013064:	781a      	ldrb	r2, [r3, #0]
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	0011      	movs	r1, r2
 801306a:	0018      	movs	r0, r3
 801306c:	f008 ff46 	bl	801befc <HAL_PCD_DataInStageCallback>
 8013070:	e058      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8013072:	234a      	movs	r3, #74	@ 0x4a
 8013074:	18fb      	adds	r3, r7, r3
 8013076:	881a      	ldrh	r2, [r3, #0]
 8013078:	2380      	movs	r3, #128	@ 0x80
 801307a:	005b      	lsls	r3, r3, #1
 801307c:	4013      	ands	r3, r2
 801307e:	d149      	bne.n	8013114 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	2250      	movs	r2, #80	@ 0x50
 8013086:	5a9b      	ldrh	r3, [r3, r2]
 8013088:	b29b      	uxth	r3, r3
 801308a:	001a      	movs	r2, r3
 801308c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	00db      	lsls	r3, r3, #3
 8013092:	18d2      	adds	r2, r2, r3
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	18d3      	adds	r3, r2, r3
 801309a:	4a2b      	ldr	r2, [pc, #172]	@ (8013148 <PCD_EP_ISR_Handler+0x808>)
 801309c:	4694      	mov	ip, r2
 801309e:	4463      	add	r3, ip
 80130a0:	881a      	ldrh	r2, [r3, #0]
 80130a2:	2140      	movs	r1, #64	@ 0x40
 80130a4:	187b      	adds	r3, r7, r1
 80130a6:	0592      	lsls	r2, r2, #22
 80130a8:	0d92      	lsrs	r2, r2, #22
 80130aa:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80130ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ae:	699a      	ldr	r2, [r3, #24]
 80130b0:	187b      	adds	r3, r7, r1
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d907      	bls.n	80130c8 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 80130b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ba:	699a      	ldr	r2, [r3, #24]
 80130bc:	187b      	adds	r3, r7, r1
 80130be:	881b      	ldrh	r3, [r3, #0]
 80130c0:	1ad2      	subs	r2, r2, r3
 80130c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130c4:	619a      	str	r2, [r3, #24]
 80130c6:	e002      	b.n	80130ce <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 80130c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ca:	2200      	movs	r2, #0
 80130cc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80130ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130d0:	699b      	ldr	r3, [r3, #24]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d107      	bne.n	80130e6 <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80130d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130d8:	781a      	ldrb	r2, [r3, #0]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	0011      	movs	r1, r2
 80130de:	0018      	movs	r0, r3
 80130e0:	f008 ff0c 	bl	801befc <HAL_PCD_DataInStageCallback>
 80130e4:	e01e      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80130e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130e8:	695a      	ldr	r2, [r3, #20]
 80130ea:	2140      	movs	r1, #64	@ 0x40
 80130ec:	187b      	adds	r3, r7, r1
 80130ee:	881b      	ldrh	r3, [r3, #0]
 80130f0:	18d2      	adds	r2, r2, r3
 80130f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130f4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80130f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130f8:	69da      	ldr	r2, [r3, #28]
 80130fa:	187b      	adds	r3, r7, r1
 80130fc:	881b      	ldrh	r3, [r3, #0]
 80130fe:	18d2      	adds	r2, r2, r3
 8013100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013102:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801310a:	0011      	movs	r1, r2
 801310c:	0018      	movs	r0, r3
 801310e:	f005 fbff 	bl	8018910 <USB_EPStartXfer>
 8013112:	e007      	b.n	8013124 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8013114:	234a      	movs	r3, #74	@ 0x4a
 8013116:	18fb      	adds	r3, r7, r3
 8013118:	881a      	ldrh	r2, [r3, #0]
 801311a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	0018      	movs	r0, r3
 8013120:	f000 f930 	bl	8013384 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	2244      	movs	r2, #68	@ 0x44
 801312a:	5a9b      	ldrh	r3, [r3, r2]
 801312c:	b29b      	uxth	r3, r3
 801312e:	b21b      	sxth	r3, r3
 8013130:	2b00      	cmp	r3, #0
 8013132:	da01      	bge.n	8013138 <PCD_EP_ISR_Handler+0x7f8>
 8013134:	f7ff fc0a 	bl	801294c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8013138:	2300      	movs	r3, #0
}
 801313a:	0018      	movs	r0, r3
 801313c:	46bd      	mov	sp, r7
 801313e:	b016      	add	sp, #88	@ 0x58
 8013140:	bdb0      	pop	{r4, r5, r7, pc}
 8013142:	46c0      	nop			@ (mov r8, r8)
 8013144:	00000406 	.word	0x00000406
 8013148:	00000402 	.word	0x00000402

0801314c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 801314c:	b590      	push	{r4, r7, lr}
 801314e:	b089      	sub	sp, #36	@ 0x24
 8013150:	af00      	add	r7, sp, #0
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	1dbb      	adds	r3, r7, #6
 8013158:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801315a:	1dbb      	adds	r3, r7, #6
 801315c:	881a      	ldrh	r2, [r3, #0]
 801315e:	2380      	movs	r3, #128	@ 0x80
 8013160:	01db      	lsls	r3, r3, #7
 8013162:	4013      	ands	r3, r2
 8013164:	d100      	bne.n	8013168 <HAL_PCD_EP_DB_Receive+0x1c>
 8013166:	e07d      	b.n	8013264 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	2250      	movs	r2, #80	@ 0x50
 801316e:	5a9b      	ldrh	r3, [r3, r2]
 8013170:	b29b      	uxth	r3, r3
 8013172:	001a      	movs	r2, r3
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	00db      	lsls	r3, r3, #3
 801317a:	18d2      	adds	r2, r2, r3
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	18d3      	adds	r3, r2, r3
 8013182:	4a7a      	ldr	r2, [pc, #488]	@ (801336c <HAL_PCD_EP_DB_Receive+0x220>)
 8013184:	4694      	mov	ip, r2
 8013186:	4463      	add	r3, ip
 8013188:	881a      	ldrh	r2, [r3, #0]
 801318a:	211a      	movs	r1, #26
 801318c:	187b      	adds	r3, r7, r1
 801318e:	0592      	lsls	r2, r2, #22
 8013190:	0d92      	lsrs	r2, r2, #22
 8013192:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013194:	68bb      	ldr	r3, [r7, #8]
 8013196:	699a      	ldr	r2, [r3, #24]
 8013198:	187b      	adds	r3, r7, r1
 801319a:	881b      	ldrh	r3, [r3, #0]
 801319c:	429a      	cmp	r2, r3
 801319e:	d307      	bcc.n	80131b0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	699a      	ldr	r2, [r3, #24]
 80131a4:	187b      	adds	r3, r7, r1
 80131a6:	881b      	ldrh	r3, [r3, #0]
 80131a8:	1ad2      	subs	r2, r2, r3
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	619a      	str	r2, [r3, #24]
 80131ae:	e002      	b.n	80131b6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80131b0:	68bb      	ldr	r3, [r7, #8]
 80131b2:	2200      	movs	r2, #0
 80131b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	699b      	ldr	r3, [r3, #24]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d121      	bne.n	8013202 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	001a      	movs	r2, r3
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	781b      	ldrb	r3, [r3, #0]
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	18d3      	adds	r3, r2, r3
 80131cc:	881b      	ldrh	r3, [r3, #0]
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	2018      	movs	r0, #24
 80131d2:	183b      	adds	r3, r7, r0
 80131d4:	4966      	ldr	r1, [pc, #408]	@ (8013370 <HAL_PCD_EP_DB_Receive+0x224>)
 80131d6:	400a      	ands	r2, r1
 80131d8:	801a      	strh	r2, [r3, #0]
 80131da:	183b      	adds	r3, r7, r0
 80131dc:	183a      	adds	r2, r7, r0
 80131de:	8812      	ldrh	r2, [r2, #0]
 80131e0:	2180      	movs	r1, #128	@ 0x80
 80131e2:	0189      	lsls	r1, r1, #6
 80131e4:	404a      	eors	r2, r1
 80131e6:	801a      	strh	r2, [r3, #0]
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	001a      	movs	r2, r3
 80131ee:	68bb      	ldr	r3, [r7, #8]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	18d3      	adds	r3, r2, r3
 80131f6:	183a      	adds	r2, r7, r0
 80131f8:	8812      	ldrh	r2, [r2, #0]
 80131fa:	495e      	ldr	r1, [pc, #376]	@ (8013374 <HAL_PCD_EP_DB_Receive+0x228>)
 80131fc:	430a      	orrs	r2, r1
 80131fe:	b292      	uxth	r2, r2
 8013200:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013202:	1dbb      	adds	r3, r7, #6
 8013204:	881b      	ldrh	r3, [r3, #0]
 8013206:	2240      	movs	r2, #64	@ 0x40
 8013208:	4013      	ands	r3, r2
 801320a:	d01a      	beq.n	8013242 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	001a      	movs	r2, r3
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	781b      	ldrb	r3, [r3, #0]
 8013216:	009b      	lsls	r3, r3, #2
 8013218:	18d3      	adds	r3, r2, r3
 801321a:	881b      	ldrh	r3, [r3, #0]
 801321c:	b29a      	uxth	r2, r3
 801321e:	2016      	movs	r0, #22
 8013220:	183b      	adds	r3, r7, r0
 8013222:	4955      	ldr	r1, [pc, #340]	@ (8013378 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013224:	400a      	ands	r2, r1
 8013226:	801a      	strh	r2, [r3, #0]
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	001a      	movs	r2, r3
 801322e:	68bb      	ldr	r3, [r7, #8]
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	009b      	lsls	r3, r3, #2
 8013234:	18d3      	adds	r3, r2, r3
 8013236:	183a      	adds	r2, r7, r0
 8013238:	8812      	ldrh	r2, [r2, #0]
 801323a:	4950      	ldr	r1, [pc, #320]	@ (801337c <HAL_PCD_EP_DB_Receive+0x230>)
 801323c:	430a      	orrs	r2, r1
 801323e:	b292      	uxth	r2, r2
 8013240:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8013242:	241a      	movs	r4, #26
 8013244:	193b      	adds	r3, r7, r4
 8013246:	881b      	ldrh	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d100      	bne.n	801324e <HAL_PCD_EP_DB_Receive+0x102>
 801324c:	e086      	b.n	801335c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	6818      	ldr	r0, [r3, #0]
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	6959      	ldr	r1, [r3, #20]
 8013256:	68bb      	ldr	r3, [r7, #8]
 8013258:	891a      	ldrh	r2, [r3, #8]
 801325a:	193b      	adds	r3, r7, r4
 801325c:	881b      	ldrh	r3, [r3, #0]
 801325e:	f006 fe12 	bl	8019e86 <USB_ReadPMA>
 8013262:	e07b      	b.n	801335c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2250      	movs	r2, #80	@ 0x50
 801326a:	5a9b      	ldrh	r3, [r3, r2]
 801326c:	b29b      	uxth	r3, r3
 801326e:	001a      	movs	r2, r3
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	00db      	lsls	r3, r3, #3
 8013276:	18d2      	adds	r2, r2, r3
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	18d3      	adds	r3, r2, r3
 801327e:	4a40      	ldr	r2, [pc, #256]	@ (8013380 <HAL_PCD_EP_DB_Receive+0x234>)
 8013280:	4694      	mov	ip, r2
 8013282:	4463      	add	r3, ip
 8013284:	881a      	ldrh	r2, [r3, #0]
 8013286:	211a      	movs	r1, #26
 8013288:	187b      	adds	r3, r7, r1
 801328a:	0592      	lsls	r2, r2, #22
 801328c:	0d92      	lsrs	r2, r2, #22
 801328e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	699a      	ldr	r2, [r3, #24]
 8013294:	187b      	adds	r3, r7, r1
 8013296:	881b      	ldrh	r3, [r3, #0]
 8013298:	429a      	cmp	r2, r3
 801329a:	d307      	bcc.n	80132ac <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	699a      	ldr	r2, [r3, #24]
 80132a0:	187b      	adds	r3, r7, r1
 80132a2:	881b      	ldrh	r3, [r3, #0]
 80132a4:	1ad2      	subs	r2, r2, r3
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	619a      	str	r2, [r3, #24]
 80132aa:	e002      	b.n	80132b2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	2200      	movs	r2, #0
 80132b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80132b2:	68bb      	ldr	r3, [r7, #8]
 80132b4:	699b      	ldr	r3, [r3, #24]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d121      	bne.n	80132fe <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	001a      	movs	r2, r3
 80132c0:	68bb      	ldr	r3, [r7, #8]
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	009b      	lsls	r3, r3, #2
 80132c6:	18d3      	adds	r3, r2, r3
 80132c8:	881b      	ldrh	r3, [r3, #0]
 80132ca:	b29a      	uxth	r2, r3
 80132cc:	201e      	movs	r0, #30
 80132ce:	183b      	adds	r3, r7, r0
 80132d0:	4927      	ldr	r1, [pc, #156]	@ (8013370 <HAL_PCD_EP_DB_Receive+0x224>)
 80132d2:	400a      	ands	r2, r1
 80132d4:	801a      	strh	r2, [r3, #0]
 80132d6:	183b      	adds	r3, r7, r0
 80132d8:	183a      	adds	r2, r7, r0
 80132da:	8812      	ldrh	r2, [r2, #0]
 80132dc:	2180      	movs	r1, #128	@ 0x80
 80132de:	0189      	lsls	r1, r1, #6
 80132e0:	404a      	eors	r2, r1
 80132e2:	801a      	strh	r2, [r3, #0]
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	001a      	movs	r2, r3
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	781b      	ldrb	r3, [r3, #0]
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	18d3      	adds	r3, r2, r3
 80132f2:	183a      	adds	r2, r7, r0
 80132f4:	8812      	ldrh	r2, [r2, #0]
 80132f6:	491f      	ldr	r1, [pc, #124]	@ (8013374 <HAL_PCD_EP_DB_Receive+0x228>)
 80132f8:	430a      	orrs	r2, r1
 80132fa:	b292      	uxth	r2, r2
 80132fc:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80132fe:	1dbb      	adds	r3, r7, #6
 8013300:	881b      	ldrh	r3, [r3, #0]
 8013302:	2240      	movs	r2, #64	@ 0x40
 8013304:	4013      	ands	r3, r2
 8013306:	d11a      	bne.n	801333e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	001a      	movs	r2, r3
 801330e:	68bb      	ldr	r3, [r7, #8]
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	009b      	lsls	r3, r3, #2
 8013314:	18d3      	adds	r3, r2, r3
 8013316:	881b      	ldrh	r3, [r3, #0]
 8013318:	b29a      	uxth	r2, r3
 801331a:	201c      	movs	r0, #28
 801331c:	183b      	adds	r3, r7, r0
 801331e:	4916      	ldr	r1, [pc, #88]	@ (8013378 <HAL_PCD_EP_DB_Receive+0x22c>)
 8013320:	400a      	ands	r2, r1
 8013322:	801a      	strh	r2, [r3, #0]
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	001a      	movs	r2, r3
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	18d3      	adds	r3, r2, r3
 8013332:	183a      	adds	r2, r7, r0
 8013334:	8812      	ldrh	r2, [r2, #0]
 8013336:	4911      	ldr	r1, [pc, #68]	@ (801337c <HAL_PCD_EP_DB_Receive+0x230>)
 8013338:	430a      	orrs	r2, r1
 801333a:	b292      	uxth	r2, r2
 801333c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 801333e:	241a      	movs	r4, #26
 8013340:	193b      	adds	r3, r7, r4
 8013342:	881b      	ldrh	r3, [r3, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d009      	beq.n	801335c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	6818      	ldr	r0, [r3, #0]
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	6959      	ldr	r1, [r3, #20]
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	895a      	ldrh	r2, [r3, #10]
 8013354:	193b      	adds	r3, r7, r4
 8013356:	881b      	ldrh	r3, [r3, #0]
 8013358:	f006 fd95 	bl	8019e86 <USB_ReadPMA>
    }
  }

  return count;
 801335c:	231a      	movs	r3, #26
 801335e:	18fb      	adds	r3, r7, r3
 8013360:	881b      	ldrh	r3, [r3, #0]
}
 8013362:	0018      	movs	r0, r3
 8013364:	46bd      	mov	sp, r7
 8013366:	b009      	add	sp, #36	@ 0x24
 8013368:	bd90      	pop	{r4, r7, pc}
 801336a:	46c0      	nop			@ (mov r8, r8)
 801336c:	00000402 	.word	0x00000402
 8013370:	ffffbf8f 	.word	0xffffbf8f
 8013374:	ffff8080 	.word	0xffff8080
 8013378:	ffff8f8f 	.word	0xffff8f8f
 801337c:	ffff80c0 	.word	0xffff80c0
 8013380:	00000406 	.word	0x00000406

08013384 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b0a4      	sub	sp, #144	@ 0x90
 8013388:	af00      	add	r7, sp, #0
 801338a:	60f8      	str	r0, [r7, #12]
 801338c:	60b9      	str	r1, [r7, #8]
 801338e:	1dbb      	adds	r3, r7, #6
 8013390:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8013392:	1dbb      	adds	r3, r7, #6
 8013394:	881b      	ldrh	r3, [r3, #0]
 8013396:	2240      	movs	r2, #64	@ 0x40
 8013398:	4013      	ands	r3, r2
 801339a:	d100      	bne.n	801339e <HAL_PCD_EP_DB_Transmit+0x1a>
 801339c:	e1e4      	b.n	8013768 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	2250      	movs	r2, #80	@ 0x50
 80133a4:	5a9b      	ldrh	r3, [r3, r2]
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	001a      	movs	r2, r3
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	00db      	lsls	r3, r3, #3
 80133b0:	18d2      	adds	r2, r2, r3
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	18d3      	adds	r3, r2, r3
 80133b8:	4ad0      	ldr	r2, [pc, #832]	@ (80136fc <HAL_PCD_EP_DB_Transmit+0x378>)
 80133ba:	4694      	mov	ip, r2
 80133bc:	4463      	add	r3, ip
 80133be:	881a      	ldrh	r2, [r3, #0]
 80133c0:	2186      	movs	r1, #134	@ 0x86
 80133c2:	187b      	adds	r3, r7, r1
 80133c4:	0592      	lsls	r2, r2, #22
 80133c6:	0d92      	lsrs	r2, r2, #22
 80133c8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80133ca:	68bb      	ldr	r3, [r7, #8]
 80133cc:	699a      	ldr	r2, [r3, #24]
 80133ce:	187b      	adds	r3, r7, r1
 80133d0:	881b      	ldrh	r3, [r3, #0]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d907      	bls.n	80133e6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80133d6:	68bb      	ldr	r3, [r7, #8]
 80133d8:	699a      	ldr	r2, [r3, #24]
 80133da:	187b      	adds	r3, r7, r1
 80133dc:	881b      	ldrh	r3, [r3, #0]
 80133de:	1ad2      	subs	r2, r2, r3
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	619a      	str	r2, [r3, #24]
 80133e4:	e002      	b.n	80133ec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	2200      	movs	r2, #0
 80133ea:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80133ec:	68bb      	ldr	r3, [r7, #8]
 80133ee:	699b      	ldr	r3, [r3, #24]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d000      	beq.n	80133f6 <HAL_PCD_EP_DB_Transmit+0x72>
 80133f4:	e0b5      	b.n	8013562 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	785b      	ldrb	r3, [r3, #1]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d125      	bne.n	801344a <HAL_PCD_EP_DB_Transmit+0xc6>
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2250      	movs	r2, #80	@ 0x50
 801340a:	5a9b      	ldrh	r3, [r3, r2]
 801340c:	b29b      	uxth	r3, r3
 801340e:	001a      	movs	r2, r3
 8013410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013412:	189b      	adds	r3, r3, r2
 8013414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013416:	68bb      	ldr	r3, [r7, #8]
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	00da      	lsls	r2, r3, #3
 801341c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801341e:	18d3      	adds	r3, r2, r3
 8013420:	4ab6      	ldr	r2, [pc, #728]	@ (80136fc <HAL_PCD_EP_DB_Transmit+0x378>)
 8013422:	4694      	mov	ip, r2
 8013424:	4463      	add	r3, ip
 8013426:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801342a:	881b      	ldrh	r3, [r3, #0]
 801342c:	b29b      	uxth	r3, r3
 801342e:	059b      	lsls	r3, r3, #22
 8013430:	0d9b      	lsrs	r3, r3, #22
 8013432:	b29a      	uxth	r2, r3
 8013434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013436:	801a      	strh	r2, [r3, #0]
 8013438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801343a:	881b      	ldrh	r3, [r3, #0]
 801343c:	b29b      	uxth	r3, r3
 801343e:	4ab0      	ldr	r2, [pc, #704]	@ (8013700 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8013440:	4313      	orrs	r3, r2
 8013442:	b29a      	uxth	r2, r3
 8013444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013446:	801a      	strh	r2, [r3, #0]
 8013448:	e01b      	b.n	8013482 <HAL_PCD_EP_DB_Transmit+0xfe>
 801344a:	68bb      	ldr	r3, [r7, #8]
 801344c:	785b      	ldrb	r3, [r3, #1]
 801344e:	2b01      	cmp	r3, #1
 8013450:	d117      	bne.n	8013482 <HAL_PCD_EP_DB_Transmit+0xfe>
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	637b      	str	r3, [r7, #52]	@ 0x34
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	2250      	movs	r2, #80	@ 0x50
 801345e:	5a9b      	ldrh	r3, [r3, r2]
 8013460:	b29b      	uxth	r3, r3
 8013462:	001a      	movs	r2, r3
 8013464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013466:	189b      	adds	r3, r3, r2
 8013468:	637b      	str	r3, [r7, #52]	@ 0x34
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	781b      	ldrb	r3, [r3, #0]
 801346e:	00da      	lsls	r2, r3, #3
 8013470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013472:	18d3      	adds	r3, r2, r3
 8013474:	4aa1      	ldr	r2, [pc, #644]	@ (80136fc <HAL_PCD_EP_DB_Transmit+0x378>)
 8013476:	4694      	mov	ip, r2
 8013478:	4463      	add	r3, ip
 801347a:	633b      	str	r3, [r7, #48]	@ 0x30
 801347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801347e:	2200      	movs	r2, #0
 8013480:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	627b      	str	r3, [r7, #36]	@ 0x24
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	785b      	ldrb	r3, [r3, #1]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d125      	bne.n	80134dc <HAL_PCD_EP_DB_Transmit+0x158>
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	61fb      	str	r3, [r7, #28]
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2250      	movs	r2, #80	@ 0x50
 801349c:	5a9b      	ldrh	r3, [r3, r2]
 801349e:	b29b      	uxth	r3, r3
 80134a0:	001a      	movs	r2, r3
 80134a2:	69fb      	ldr	r3, [r7, #28]
 80134a4:	189b      	adds	r3, r3, r2
 80134a6:	61fb      	str	r3, [r7, #28]
 80134a8:	68bb      	ldr	r3, [r7, #8]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	00da      	lsls	r2, r3, #3
 80134ae:	69fb      	ldr	r3, [r7, #28]
 80134b0:	18d3      	adds	r3, r2, r3
 80134b2:	4a94      	ldr	r2, [pc, #592]	@ (8013704 <HAL_PCD_EP_DB_Transmit+0x380>)
 80134b4:	4694      	mov	ip, r2
 80134b6:	4463      	add	r3, ip
 80134b8:	61bb      	str	r3, [r7, #24]
 80134ba:	69bb      	ldr	r3, [r7, #24]
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	b29b      	uxth	r3, r3
 80134c0:	059b      	lsls	r3, r3, #22
 80134c2:	0d9b      	lsrs	r3, r3, #22
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	69bb      	ldr	r3, [r7, #24]
 80134c8:	801a      	strh	r2, [r3, #0]
 80134ca:	69bb      	ldr	r3, [r7, #24]
 80134cc:	881b      	ldrh	r3, [r3, #0]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4a8b      	ldr	r2, [pc, #556]	@ (8013700 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80134d2:	4313      	orrs	r3, r2
 80134d4:	b29a      	uxth	r2, r3
 80134d6:	69bb      	ldr	r3, [r7, #24]
 80134d8:	801a      	strh	r2, [r3, #0]
 80134da:	e018      	b.n	801350e <HAL_PCD_EP_DB_Transmit+0x18a>
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	785b      	ldrb	r3, [r3, #1]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d114      	bne.n	801350e <HAL_PCD_EP_DB_Transmit+0x18a>
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	2250      	movs	r2, #80	@ 0x50
 80134ea:	5a9b      	ldrh	r3, [r3, r2]
 80134ec:	b29b      	uxth	r3, r3
 80134ee:	001a      	movs	r2, r3
 80134f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134f2:	189b      	adds	r3, r3, r2
 80134f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	00da      	lsls	r2, r3, #3
 80134fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134fe:	18d3      	adds	r3, r2, r3
 8013500:	4a80      	ldr	r2, [pc, #512]	@ (8013704 <HAL_PCD_EP_DB_Transmit+0x380>)
 8013502:	4694      	mov	ip, r2
 8013504:	4463      	add	r3, ip
 8013506:	623b      	str	r3, [r7, #32]
 8013508:	6a3b      	ldr	r3, [r7, #32]
 801350a:	2200      	movs	r2, #0
 801350c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801350e:	68bb      	ldr	r3, [r7, #8]
 8013510:	781a      	ldrb	r2, [r3, #0]
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	0011      	movs	r1, r2
 8013516:	0018      	movs	r0, r3
 8013518:	f008 fcf0 	bl	801befc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 801351c:	1dbb      	adds	r3, r7, #6
 801351e:	881a      	ldrh	r2, [r3, #0]
 8013520:	2380      	movs	r3, #128	@ 0x80
 8013522:	01db      	lsls	r3, r3, #7
 8013524:	4013      	ands	r3, r2
 8013526:	d100      	bne.n	801352a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8013528:	e309      	b.n	8013b3e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	001a      	movs	r2, r3
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	009b      	lsls	r3, r3, #2
 8013536:	18d3      	adds	r3, r2, r3
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	b29a      	uxth	r2, r3
 801353c:	2016      	movs	r0, #22
 801353e:	183b      	adds	r3, r7, r0
 8013540:	4971      	ldr	r1, [pc, #452]	@ (8013708 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013542:	400a      	ands	r2, r1
 8013544:	801a      	strh	r2, [r3, #0]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	001a      	movs	r2, r3
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	18d3      	adds	r3, r2, r3
 8013554:	183a      	adds	r2, r7, r0
 8013556:	8812      	ldrh	r2, [r2, #0]
 8013558:	496c      	ldr	r1, [pc, #432]	@ (801370c <HAL_PCD_EP_DB_Transmit+0x388>)
 801355a:	430a      	orrs	r2, r1
 801355c:	b292      	uxth	r2, r2
 801355e:	801a      	strh	r2, [r3, #0]
 8013560:	e2ed      	b.n	8013b3e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8013562:	1dbb      	adds	r3, r7, #6
 8013564:	881a      	ldrh	r2, [r3, #0]
 8013566:	2380      	movs	r3, #128	@ 0x80
 8013568:	01db      	lsls	r3, r3, #7
 801356a:	4013      	ands	r3, r2
 801356c:	d01a      	beq.n	80135a4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	001a      	movs	r2, r3
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	18d3      	adds	r3, r2, r3
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	b29a      	uxth	r2, r3
 8013580:	208a      	movs	r0, #138	@ 0x8a
 8013582:	183b      	adds	r3, r7, r0
 8013584:	4960      	ldr	r1, [pc, #384]	@ (8013708 <HAL_PCD_EP_DB_Transmit+0x384>)
 8013586:	400a      	ands	r2, r1
 8013588:	801a      	strh	r2, [r3, #0]
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	001a      	movs	r2, r3
 8013590:	68bb      	ldr	r3, [r7, #8]
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	009b      	lsls	r3, r3, #2
 8013596:	18d3      	adds	r3, r2, r3
 8013598:	183a      	adds	r2, r7, r0
 801359a:	8812      	ldrh	r2, [r2, #0]
 801359c:	495b      	ldr	r1, [pc, #364]	@ (801370c <HAL_PCD_EP_DB_Transmit+0x388>)
 801359e:	430a      	orrs	r2, r1
 80135a0:	b292      	uxth	r2, r2
 80135a2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	2224      	movs	r2, #36	@ 0x24
 80135a8:	5c9b      	ldrb	r3, [r3, r2]
 80135aa:	2b01      	cmp	r3, #1
 80135ac:	d000      	beq.n	80135b0 <HAL_PCD_EP_DB_Transmit+0x22c>
 80135ae:	e2c6      	b.n	8013b3e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	695a      	ldr	r2, [r3, #20]
 80135b4:	2186      	movs	r1, #134	@ 0x86
 80135b6:	187b      	adds	r3, r7, r1
 80135b8:	881b      	ldrh	r3, [r3, #0]
 80135ba:	18d2      	adds	r2, r2, r3
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	69da      	ldr	r2, [r3, #28]
 80135c4:	187b      	adds	r3, r7, r1
 80135c6:	881b      	ldrh	r3, [r3, #0]
 80135c8:	18d2      	adds	r2, r2, r3
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	6a1a      	ldr	r2, [r3, #32]
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	691b      	ldr	r3, [r3, #16]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d30c      	bcc.n	80135f4 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	691b      	ldr	r3, [r3, #16]
 80135de:	218c      	movs	r1, #140	@ 0x8c
 80135e0:	187a      	adds	r2, r7, r1
 80135e2:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	6a1a      	ldr	r2, [r3, #32]
 80135e8:	187b      	adds	r3, r7, r1
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	1ad2      	subs	r2, r2, r3
 80135ee:	68bb      	ldr	r3, [r7, #8]
 80135f0:	621a      	str	r2, [r3, #32]
 80135f2:	e01a      	b.n	801362a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	6a1b      	ldr	r3, [r3, #32]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d10a      	bne.n	8013612 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80135fc:	2386      	movs	r3, #134	@ 0x86
 80135fe:	18fb      	adds	r3, r7, r3
 8013600:	881b      	ldrh	r3, [r3, #0]
 8013602:	228c      	movs	r2, #140	@ 0x8c
 8013604:	18ba      	adds	r2, r7, r2
 8013606:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	2224      	movs	r2, #36	@ 0x24
 801360c:	2100      	movs	r1, #0
 801360e:	5499      	strb	r1, [r3, r2]
 8013610:	e00b      	b.n	801362a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8013612:	68bb      	ldr	r3, [r7, #8]
 8013614:	2224      	movs	r2, #36	@ 0x24
 8013616:	2100      	movs	r1, #0
 8013618:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	6a1b      	ldr	r3, [r3, #32]
 801361e:	228c      	movs	r2, #140	@ 0x8c
 8013620:	18ba      	adds	r2, r7, r2
 8013622:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	2200      	movs	r2, #0
 8013628:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	785b      	ldrb	r3, [r3, #1]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d000      	beq.n	8013634 <HAL_PCD_EP_DB_Transmit+0x2b0>
 8013632:	e06d      	b.n	8013710 <HAL_PCD_EP_DB_Transmit+0x38c>
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2250      	movs	r2, #80	@ 0x50
 8013640:	5a9b      	ldrh	r3, [r3, r2]
 8013642:	b29b      	uxth	r3, r3
 8013644:	001a      	movs	r2, r3
 8013646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013648:	189b      	adds	r3, r3, r2
 801364a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	781b      	ldrb	r3, [r3, #0]
 8013650:	00da      	lsls	r2, r3, #3
 8013652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013654:	18d3      	adds	r3, r2, r3
 8013656:	4a29      	ldr	r2, [pc, #164]	@ (80136fc <HAL_PCD_EP_DB_Transmit+0x378>)
 8013658:	4694      	mov	ip, r2
 801365a:	4463      	add	r3, ip
 801365c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801365e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013660:	881b      	ldrh	r3, [r3, #0]
 8013662:	b29b      	uxth	r3, r3
 8013664:	059b      	lsls	r3, r3, #22
 8013666:	0d9b      	lsrs	r3, r3, #22
 8013668:	b29a      	uxth	r2, r3
 801366a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801366c:	801a      	strh	r2, [r3, #0]
 801366e:	228c      	movs	r2, #140	@ 0x8c
 8013670:	18bb      	adds	r3, r7, r2
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2b3e      	cmp	r3, #62	@ 0x3e
 8013676:	d91a      	bls.n	80136ae <HAL_PCD_EP_DB_Transmit+0x32a>
 8013678:	18bb      	adds	r3, r7, r2
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	095b      	lsrs	r3, r3, #5
 801367e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013680:	18bb      	adds	r3, r7, r2
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	221f      	movs	r2, #31
 8013686:	4013      	ands	r3, r2
 8013688:	d102      	bne.n	8013690 <HAL_PCD_EP_DB_Transmit+0x30c>
 801368a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801368c:	3b01      	subs	r3, #1
 801368e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013692:	881b      	ldrh	r3, [r3, #0]
 8013694:	b29a      	uxth	r2, r3
 8013696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013698:	b29b      	uxth	r3, r3
 801369a:	029b      	lsls	r3, r3, #10
 801369c:	b29b      	uxth	r3, r3
 801369e:	4313      	orrs	r3, r2
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	4a17      	ldr	r2, [pc, #92]	@ (8013700 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80136a4:	4313      	orrs	r3, r2
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136aa:	801a      	strh	r2, [r3, #0]
 80136ac:	e04f      	b.n	801374e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80136ae:	238c      	movs	r3, #140	@ 0x8c
 80136b0:	18fb      	adds	r3, r7, r3
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d108      	bne.n	80136ca <HAL_PCD_EP_DB_Transmit+0x346>
 80136b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ba:	881b      	ldrh	r3, [r3, #0]
 80136bc:	b29b      	uxth	r3, r3
 80136be:	4a10      	ldr	r2, [pc, #64]	@ (8013700 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80136c0:	4313      	orrs	r3, r2
 80136c2:	b29a      	uxth	r2, r3
 80136c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136c6:	801a      	strh	r2, [r3, #0]
 80136c8:	e041      	b.n	801374e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80136ca:	228c      	movs	r2, #140	@ 0x8c
 80136cc:	18bb      	adds	r3, r7, r2
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	085b      	lsrs	r3, r3, #1
 80136d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136d4:	18bb      	adds	r3, r7, r2
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2201      	movs	r2, #1
 80136da:	4013      	ands	r3, r2
 80136dc:	d002      	beq.n	80136e4 <HAL_PCD_EP_DB_Transmit+0x360>
 80136de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136e0:	3301      	adds	r3, #1
 80136e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80136e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136e6:	881b      	ldrh	r3, [r3, #0]
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	029b      	lsls	r3, r3, #10
 80136f0:	b29b      	uxth	r3, r3
 80136f2:	4313      	orrs	r3, r2
 80136f4:	b29a      	uxth	r2, r3
 80136f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136f8:	801a      	strh	r2, [r3, #0]
 80136fa:	e028      	b.n	801374e <HAL_PCD_EP_DB_Transmit+0x3ca>
 80136fc:	00000402 	.word	0x00000402
 8013700:	ffff8000 	.word	0xffff8000
 8013704:	00000406 	.word	0x00000406
 8013708:	ffff8f8f 	.word	0xffff8f8f
 801370c:	ffffc080 	.word	0xffffc080
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	785b      	ldrb	r3, [r3, #1]
 8013714:	2b01      	cmp	r3, #1
 8013716:	d11a      	bne.n	801374e <HAL_PCD_EP_DB_Transmit+0x3ca>
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	647b      	str	r3, [r7, #68]	@ 0x44
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2250      	movs	r2, #80	@ 0x50
 8013724:	5a9b      	ldrh	r3, [r3, r2]
 8013726:	b29b      	uxth	r3, r3
 8013728:	001a      	movs	r2, r3
 801372a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801372c:	189b      	adds	r3, r3, r2
 801372e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	00da      	lsls	r2, r3, #3
 8013736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013738:	18d3      	adds	r3, r2, r3
 801373a:	4adb      	ldr	r2, [pc, #876]	@ (8013aa8 <HAL_PCD_EP_DB_Transmit+0x724>)
 801373c:	4694      	mov	ip, r2
 801373e:	4463      	add	r3, ip
 8013740:	643b      	str	r3, [r7, #64]	@ 0x40
 8013742:	238c      	movs	r3, #140	@ 0x8c
 8013744:	18fb      	adds	r3, r7, r3
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	b29a      	uxth	r2, r3
 801374a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801374c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	6818      	ldr	r0, [r3, #0]
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	6959      	ldr	r1, [r3, #20]
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	891a      	ldrh	r2, [r3, #8]
 801375a:	238c      	movs	r3, #140	@ 0x8c
 801375c:	18fb      	adds	r3, r7, r3
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	b29b      	uxth	r3, r3
 8013762:	f006 fb47 	bl	8019df4 <USB_WritePMA>
 8013766:	e1ea      	b.n	8013b3e <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	2250      	movs	r2, #80	@ 0x50
 801376e:	5a9b      	ldrh	r3, [r3, r2]
 8013770:	b29b      	uxth	r3, r3
 8013772:	001a      	movs	r2, r3
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	18d2      	adds	r2, r2, r3
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	18d3      	adds	r3, r2, r3
 8013782:	4aca      	ldr	r2, [pc, #808]	@ (8013aac <HAL_PCD_EP_DB_Transmit+0x728>)
 8013784:	4694      	mov	ip, r2
 8013786:	4463      	add	r3, ip
 8013788:	881a      	ldrh	r2, [r3, #0]
 801378a:	2186      	movs	r1, #134	@ 0x86
 801378c:	187b      	adds	r3, r7, r1
 801378e:	0592      	lsls	r2, r2, #22
 8013790:	0d92      	lsrs	r2, r2, #22
 8013792:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	699a      	ldr	r2, [r3, #24]
 8013798:	187b      	adds	r3, r7, r1
 801379a:	881b      	ldrh	r3, [r3, #0]
 801379c:	429a      	cmp	r2, r3
 801379e:	d307      	bcc.n	80137b0 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	699a      	ldr	r2, [r3, #24]
 80137a4:	187b      	adds	r3, r7, r1
 80137a6:	881b      	ldrh	r3, [r3, #0]
 80137a8:	1ad2      	subs	r2, r2, r3
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	619a      	str	r2, [r3, #24]
 80137ae:	e002      	b.n	80137b6 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	2200      	movs	r2, #0
 80137b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	699b      	ldr	r3, [r3, #24]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d000      	beq.n	80137c0 <HAL_PCD_EP_DB_Transmit+0x43c>
 80137be:	e0bb      	b.n	8013938 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	785b      	ldrb	r3, [r3, #1]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d125      	bne.n	8013814 <HAL_PCD_EP_DB_Transmit+0x490>
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	2250      	movs	r2, #80	@ 0x50
 80137d4:	5a9b      	ldrh	r3, [r3, r2]
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	001a      	movs	r2, r3
 80137da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80137dc:	189b      	adds	r3, r3, r2
 80137de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	781b      	ldrb	r3, [r3, #0]
 80137e4:	00da      	lsls	r2, r3, #3
 80137e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80137e8:	18d3      	adds	r3, r2, r3
 80137ea:	4aaf      	ldr	r2, [pc, #700]	@ (8013aa8 <HAL_PCD_EP_DB_Transmit+0x724>)
 80137ec:	4694      	mov	ip, r2
 80137ee:	4463      	add	r3, ip
 80137f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80137f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80137f4:	881b      	ldrh	r3, [r3, #0]
 80137f6:	b29b      	uxth	r3, r3
 80137f8:	059b      	lsls	r3, r3, #22
 80137fa:	0d9b      	lsrs	r3, r3, #22
 80137fc:	b29a      	uxth	r2, r3
 80137fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013800:	801a      	strh	r2, [r3, #0]
 8013802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	b29b      	uxth	r3, r3
 8013808:	4aa9      	ldr	r2, [pc, #676]	@ (8013ab0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801380a:	4313      	orrs	r3, r2
 801380c:	b29a      	uxth	r2, r3
 801380e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013810:	801a      	strh	r2, [r3, #0]
 8013812:	e01b      	b.n	801384c <HAL_PCD_EP_DB_Transmit+0x4c8>
 8013814:	68bb      	ldr	r3, [r7, #8]
 8013816:	785b      	ldrb	r3, [r3, #1]
 8013818:	2b01      	cmp	r3, #1
 801381a:	d117      	bne.n	801384c <HAL_PCD_EP_DB_Transmit+0x4c8>
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	667b      	str	r3, [r7, #100]	@ 0x64
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	2250      	movs	r2, #80	@ 0x50
 8013828:	5a9b      	ldrh	r3, [r3, r2]
 801382a:	b29b      	uxth	r3, r3
 801382c:	001a      	movs	r2, r3
 801382e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013830:	189b      	adds	r3, r3, r2
 8013832:	667b      	str	r3, [r7, #100]	@ 0x64
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	00da      	lsls	r2, r3, #3
 801383a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801383c:	18d3      	adds	r3, r2, r3
 801383e:	4a9a      	ldr	r2, [pc, #616]	@ (8013aa8 <HAL_PCD_EP_DB_Transmit+0x724>)
 8013840:	4694      	mov	ip, r2
 8013842:	4463      	add	r3, ip
 8013844:	663b      	str	r3, [r7, #96]	@ 0x60
 8013846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013848:	2200      	movs	r2, #0
 801384a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	677b      	str	r3, [r7, #116]	@ 0x74
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	785b      	ldrb	r3, [r3, #1]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d12b      	bne.n	80138b2 <HAL_PCD_EP_DB_Transmit+0x52e>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2250      	movs	r2, #80	@ 0x50
 8013866:	5a9b      	ldrh	r3, [r3, r2]
 8013868:	b29b      	uxth	r3, r3
 801386a:	001a      	movs	r2, r3
 801386c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801386e:	189b      	adds	r3, r3, r2
 8013870:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	00da      	lsls	r2, r3, #3
 8013878:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801387a:	18d3      	adds	r3, r2, r3
 801387c:	4a8b      	ldr	r2, [pc, #556]	@ (8013aac <HAL_PCD_EP_DB_Transmit+0x728>)
 801387e:	4694      	mov	ip, r2
 8013880:	4463      	add	r3, ip
 8013882:	2180      	movs	r1, #128	@ 0x80
 8013884:	187a      	adds	r2, r7, r1
 8013886:	6013      	str	r3, [r2, #0]
 8013888:	187b      	adds	r3, r7, r1
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	881b      	ldrh	r3, [r3, #0]
 801388e:	b29b      	uxth	r3, r3
 8013890:	059b      	lsls	r3, r3, #22
 8013892:	0d9b      	lsrs	r3, r3, #22
 8013894:	b29a      	uxth	r2, r3
 8013896:	187b      	adds	r3, r7, r1
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	801a      	strh	r2, [r3, #0]
 801389c:	187b      	adds	r3, r7, r1
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	881b      	ldrh	r3, [r3, #0]
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	4a82      	ldr	r2, [pc, #520]	@ (8013ab0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80138a6:	4313      	orrs	r3, r2
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	187b      	adds	r3, r7, r1
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	801a      	strh	r2, [r3, #0]
 80138b0:	e018      	b.n	80138e4 <HAL_PCD_EP_DB_Transmit+0x560>
 80138b2:	68bb      	ldr	r3, [r7, #8]
 80138b4:	785b      	ldrb	r3, [r3, #1]
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d114      	bne.n	80138e4 <HAL_PCD_EP_DB_Transmit+0x560>
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	2250      	movs	r2, #80	@ 0x50
 80138c0:	5a9b      	ldrh	r3, [r3, r2]
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	001a      	movs	r2, r3
 80138c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80138c8:	189b      	adds	r3, r3, r2
 80138ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80138cc:	68bb      	ldr	r3, [r7, #8]
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	00da      	lsls	r2, r3, #3
 80138d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80138d4:	18d3      	adds	r3, r2, r3
 80138d6:	4a75      	ldr	r2, [pc, #468]	@ (8013aac <HAL_PCD_EP_DB_Transmit+0x728>)
 80138d8:	4694      	mov	ip, r2
 80138da:	4463      	add	r3, ip
 80138dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80138de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80138e0:	2200      	movs	r2, #0
 80138e2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	781a      	ldrb	r2, [r3, #0]
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	0011      	movs	r1, r2
 80138ec:	0018      	movs	r0, r3
 80138ee:	f008 fb05 	bl	801befc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80138f2:	1dbb      	adds	r3, r7, #6
 80138f4:	881a      	ldrh	r2, [r3, #0]
 80138f6:	2380      	movs	r3, #128	@ 0x80
 80138f8:	01db      	lsls	r3, r3, #7
 80138fa:	4013      	ands	r3, r2
 80138fc:	d000      	beq.n	8013900 <HAL_PCD_EP_DB_Transmit+0x57c>
 80138fe:	e11e      	b.n	8013b3e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	001a      	movs	r2, r3
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	009b      	lsls	r3, r3, #2
 801390c:	18d3      	adds	r3, r2, r3
 801390e:	881b      	ldrh	r3, [r3, #0]
 8013910:	b29a      	uxth	r2, r3
 8013912:	2088      	movs	r0, #136	@ 0x88
 8013914:	183b      	adds	r3, r7, r0
 8013916:	4967      	ldr	r1, [pc, #412]	@ (8013ab4 <HAL_PCD_EP_DB_Transmit+0x730>)
 8013918:	400a      	ands	r2, r1
 801391a:	801a      	strh	r2, [r3, #0]
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	001a      	movs	r2, r3
 8013922:	68bb      	ldr	r3, [r7, #8]
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	18d3      	adds	r3, r2, r3
 801392a:	183a      	adds	r2, r7, r0
 801392c:	8812      	ldrh	r2, [r2, #0]
 801392e:	4962      	ldr	r1, [pc, #392]	@ (8013ab8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013930:	430a      	orrs	r2, r1
 8013932:	b292      	uxth	r2, r2
 8013934:	801a      	strh	r2, [r3, #0]
 8013936:	e102      	b.n	8013b3e <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8013938:	1dbb      	adds	r3, r7, #6
 801393a:	881a      	ldrh	r2, [r3, #0]
 801393c:	2380      	movs	r3, #128	@ 0x80
 801393e:	01db      	lsls	r3, r3, #7
 8013940:	4013      	ands	r3, r2
 8013942:	d11a      	bne.n	801397a <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	001a      	movs	r2, r3
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	781b      	ldrb	r3, [r3, #0]
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	18d3      	adds	r3, r2, r3
 8013952:	881b      	ldrh	r3, [r3, #0]
 8013954:	b29a      	uxth	r2, r3
 8013956:	204e      	movs	r0, #78	@ 0x4e
 8013958:	183b      	adds	r3, r7, r0
 801395a:	4956      	ldr	r1, [pc, #344]	@ (8013ab4 <HAL_PCD_EP_DB_Transmit+0x730>)
 801395c:	400a      	ands	r2, r1
 801395e:	801a      	strh	r2, [r3, #0]
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	001a      	movs	r2, r3
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	781b      	ldrb	r3, [r3, #0]
 801396a:	009b      	lsls	r3, r3, #2
 801396c:	18d3      	adds	r3, r2, r3
 801396e:	183a      	adds	r2, r7, r0
 8013970:	8812      	ldrh	r2, [r2, #0]
 8013972:	4951      	ldr	r1, [pc, #324]	@ (8013ab8 <HAL_PCD_EP_DB_Transmit+0x734>)
 8013974:	430a      	orrs	r2, r1
 8013976:	b292      	uxth	r2, r2
 8013978:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 801397a:	68bb      	ldr	r3, [r7, #8]
 801397c:	2224      	movs	r2, #36	@ 0x24
 801397e:	5c9b      	ldrb	r3, [r3, r2]
 8013980:	2b01      	cmp	r3, #1
 8013982:	d000      	beq.n	8013986 <HAL_PCD_EP_DB_Transmit+0x602>
 8013984:	e0db      	b.n	8013b3e <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	695a      	ldr	r2, [r3, #20]
 801398a:	2186      	movs	r1, #134	@ 0x86
 801398c:	187b      	adds	r3, r7, r1
 801398e:	881b      	ldrh	r3, [r3, #0]
 8013990:	18d2      	adds	r2, r2, r3
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	69da      	ldr	r2, [r3, #28]
 801399a:	187b      	adds	r3, r7, r1
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	18d2      	adds	r2, r2, r3
 80139a0:	68bb      	ldr	r3, [r7, #8]
 80139a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	6a1a      	ldr	r2, [r3, #32]
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	691b      	ldr	r3, [r3, #16]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d30c      	bcc.n	80139ca <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	691b      	ldr	r3, [r3, #16]
 80139b4:	218c      	movs	r1, #140	@ 0x8c
 80139b6:	187a      	adds	r2, r7, r1
 80139b8:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	6a1a      	ldr	r2, [r3, #32]
 80139be:	187b      	adds	r3, r7, r1
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	1ad2      	subs	r2, r2, r3
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	621a      	str	r2, [r3, #32]
 80139c8:	e01a      	b.n	8013a00 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	6a1b      	ldr	r3, [r3, #32]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d10a      	bne.n	80139e8 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 80139d2:	2386      	movs	r3, #134	@ 0x86
 80139d4:	18fb      	adds	r3, r7, r3
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	228c      	movs	r2, #140	@ 0x8c
 80139da:	18ba      	adds	r2, r7, r2
 80139dc:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	2224      	movs	r2, #36	@ 0x24
 80139e2:	2100      	movs	r1, #0
 80139e4:	5499      	strb	r1, [r3, r2]
 80139e6:	e00b      	b.n	8013a00 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 80139e8:	68bb      	ldr	r3, [r7, #8]
 80139ea:	6a1b      	ldr	r3, [r3, #32]
 80139ec:	228c      	movs	r2, #140	@ 0x8c
 80139ee:	18ba      	adds	r2, r7, r2
 80139f0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	2200      	movs	r2, #0
 80139f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	2224      	movs	r2, #36	@ 0x24
 80139fc:	2100      	movs	r1, #0
 80139fe:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	657b      	str	r3, [r7, #84]	@ 0x54
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	785b      	ldrb	r3, [r3, #1]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d000      	beq.n	8013a10 <HAL_PCD_EP_DB_Transmit+0x68c>
 8013a0e:	e06e      	b.n	8013aee <HAL_PCD_EP_DB_Transmit+0x76a>
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2250      	movs	r2, #80	@ 0x50
 8013a1c:	5a9b      	ldrh	r3, [r3, r2]
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	001a      	movs	r2, r3
 8013a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a24:	189b      	adds	r3, r3, r2
 8013a26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	781b      	ldrb	r3, [r3, #0]
 8013a2c:	00da      	lsls	r2, r3, #3
 8013a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a30:	18d3      	adds	r3, r2, r3
 8013a32:	4a1e      	ldr	r2, [pc, #120]	@ (8013aac <HAL_PCD_EP_DB_Transmit+0x728>)
 8013a34:	4694      	mov	ip, r2
 8013a36:	4463      	add	r3, ip
 8013a38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013a3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a3c:	881b      	ldrh	r3, [r3, #0]
 8013a3e:	b29b      	uxth	r3, r3
 8013a40:	059b      	lsls	r3, r3, #22
 8013a42:	0d9b      	lsrs	r3, r3, #22
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a48:	801a      	strh	r2, [r3, #0]
 8013a4a:	228c      	movs	r2, #140	@ 0x8c
 8013a4c:	18bb      	adds	r3, r7, r2
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b3e      	cmp	r3, #62	@ 0x3e
 8013a52:	d91a      	bls.n	8013a8a <HAL_PCD_EP_DB_Transmit+0x706>
 8013a54:	18bb      	adds	r3, r7, r2
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	095b      	lsrs	r3, r3, #5
 8013a5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013a5c:	18bb      	adds	r3, r7, r2
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	221f      	movs	r2, #31
 8013a62:	4013      	ands	r3, r2
 8013a64:	d102      	bne.n	8013a6c <HAL_PCD_EP_DB_Transmit+0x6e8>
 8013a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013a68:	3b01      	subs	r3, #1
 8013a6a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013a6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a6e:	881b      	ldrh	r3, [r3, #0]
 8013a70:	b29a      	uxth	r2, r3
 8013a72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013a74:	b29b      	uxth	r3, r3
 8013a76:	029b      	lsls	r3, r3, #10
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	4313      	orrs	r3, r2
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8013ab0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013a80:	4313      	orrs	r3, r2
 8013a82:	b29a      	uxth	r2, r3
 8013a84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a86:	801a      	strh	r2, [r3, #0]
 8013a88:	e04d      	b.n	8013b26 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013a8a:	238c      	movs	r3, #140	@ 0x8c
 8013a8c:	18fb      	adds	r3, r7, r3
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d113      	bne.n	8013abc <HAL_PCD_EP_DB_Transmit+0x738>
 8013a94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a96:	881b      	ldrh	r3, [r3, #0]
 8013a98:	b29b      	uxth	r3, r3
 8013a9a:	4a05      	ldr	r2, [pc, #20]	@ (8013ab0 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8013a9c:	4313      	orrs	r3, r2
 8013a9e:	b29a      	uxth	r2, r3
 8013aa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013aa2:	801a      	strh	r2, [r3, #0]
 8013aa4:	e03f      	b.n	8013b26 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013aa6:	46c0      	nop			@ (mov r8, r8)
 8013aa8:	00000402 	.word	0x00000402
 8013aac:	00000406 	.word	0x00000406
 8013ab0:	ffff8000 	.word	0xffff8000
 8013ab4:	ffff8f8f 	.word	0xffff8f8f
 8013ab8:	ffffc080 	.word	0xffffc080
 8013abc:	228c      	movs	r2, #140	@ 0x8c
 8013abe:	18bb      	adds	r3, r7, r2
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	085b      	lsrs	r3, r3, #1
 8013ac4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013ac6:	18bb      	adds	r3, r7, r2
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2201      	movs	r2, #1
 8013acc:	4013      	ands	r3, r2
 8013ace:	d002      	beq.n	8013ad6 <HAL_PCD_EP_DB_Transmit+0x752>
 8013ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8013ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013ad8:	881b      	ldrh	r3, [r3, #0]
 8013ada:	b29a      	uxth	r2, r3
 8013adc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013ade:	b29b      	uxth	r3, r3
 8013ae0:	029b      	lsls	r3, r3, #10
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	4313      	orrs	r3, r2
 8013ae6:	b29a      	uxth	r2, r3
 8013ae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013aea:	801a      	strh	r2, [r3, #0]
 8013aec:	e01b      	b.n	8013b26 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	785b      	ldrb	r3, [r3, #1]
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d117      	bne.n	8013b26 <HAL_PCD_EP_DB_Transmit+0x7a2>
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	2250      	movs	r2, #80	@ 0x50
 8013afc:	5a9b      	ldrh	r3, [r3, r2]
 8013afe:	b29b      	uxth	r3, r3
 8013b00:	001a      	movs	r2, r3
 8013b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b04:	189b      	adds	r3, r3, r2
 8013b06:	657b      	str	r3, [r7, #84]	@ 0x54
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	00da      	lsls	r2, r3, #3
 8013b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b10:	18d3      	adds	r3, r2, r3
 8013b12:	4a21      	ldr	r2, [pc, #132]	@ (8013b98 <HAL_PCD_EP_DB_Transmit+0x814>)
 8013b14:	4694      	mov	ip, r2
 8013b16:	4463      	add	r3, ip
 8013b18:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b1a:	238c      	movs	r3, #140	@ 0x8c
 8013b1c:	18fb      	adds	r3, r7, r3
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	b29a      	uxth	r2, r3
 8013b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b24:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	6818      	ldr	r0, [r3, #0]
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	6959      	ldr	r1, [r3, #20]
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	895a      	ldrh	r2, [r3, #10]
 8013b32:	238c      	movs	r3, #140	@ 0x8c
 8013b34:	18fb      	adds	r3, r7, r3
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	f006 f95b 	bl	8019df4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	001a      	movs	r2, r3
 8013b44:	68bb      	ldr	r3, [r7, #8]
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	009b      	lsls	r3, r3, #2
 8013b4a:	18d3      	adds	r3, r2, r3
 8013b4c:	881b      	ldrh	r3, [r3, #0]
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	2014      	movs	r0, #20
 8013b52:	183b      	adds	r3, r7, r0
 8013b54:	4911      	ldr	r1, [pc, #68]	@ (8013b9c <HAL_PCD_EP_DB_Transmit+0x818>)
 8013b56:	400a      	ands	r2, r1
 8013b58:	801a      	strh	r2, [r3, #0]
 8013b5a:	183b      	adds	r3, r7, r0
 8013b5c:	183a      	adds	r2, r7, r0
 8013b5e:	8812      	ldrh	r2, [r2, #0]
 8013b60:	2110      	movs	r1, #16
 8013b62:	404a      	eors	r2, r1
 8013b64:	801a      	strh	r2, [r3, #0]
 8013b66:	183b      	adds	r3, r7, r0
 8013b68:	183a      	adds	r2, r7, r0
 8013b6a:	8812      	ldrh	r2, [r2, #0]
 8013b6c:	2120      	movs	r1, #32
 8013b6e:	404a      	eors	r2, r1
 8013b70:	801a      	strh	r2, [r3, #0]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	001a      	movs	r2, r3
 8013b78:	68bb      	ldr	r3, [r7, #8]
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	18d3      	adds	r3, r2, r3
 8013b80:	183a      	adds	r2, r7, r0
 8013b82:	8812      	ldrh	r2, [r2, #0]
 8013b84:	4906      	ldr	r1, [pc, #24]	@ (8013ba0 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8013b86:	430a      	orrs	r2, r1
 8013b88:	b292      	uxth	r2, r2
 8013b8a:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8013b8c:	2300      	movs	r3, #0
}
 8013b8e:	0018      	movs	r0, r3
 8013b90:	46bd      	mov	sp, r7
 8013b92:	b024      	add	sp, #144	@ 0x90
 8013b94:	bd80      	pop	{r7, pc}
 8013b96:	46c0      	nop			@ (mov r8, r8)
 8013b98:	00000406 	.word	0x00000406
 8013b9c:	ffff8fbf 	.word	0xffff8fbf
 8013ba0:	ffff8080 	.word	0xffff8080

08013ba4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8013ba4:	b590      	push	{r4, r7, lr}
 8013ba6:	b087      	sub	sp, #28
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	0008      	movs	r0, r1
 8013bae:	0011      	movs	r1, r2
 8013bb0:	607b      	str	r3, [r7, #4]
 8013bb2:	240a      	movs	r4, #10
 8013bb4:	193b      	adds	r3, r7, r4
 8013bb6:	1c02      	adds	r2, r0, #0
 8013bb8:	801a      	strh	r2, [r3, #0]
 8013bba:	2308      	movs	r3, #8
 8013bbc:	18fb      	adds	r3, r7, r3
 8013bbe:	1c0a      	adds	r2, r1, #0
 8013bc0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8013bc2:	0021      	movs	r1, r4
 8013bc4:	187b      	adds	r3, r7, r1
 8013bc6:	881b      	ldrh	r3, [r3, #0]
 8013bc8:	2280      	movs	r2, #128	@ 0x80
 8013bca:	4013      	ands	r3, r2
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d00c      	beq.n	8013bec <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013bd2:	187b      	adds	r3, r7, r1
 8013bd4:	881b      	ldrh	r3, [r3, #0]
 8013bd6:	2207      	movs	r2, #7
 8013bd8:	4013      	ands	r3, r2
 8013bda:	1c5a      	adds	r2, r3, #1
 8013bdc:	0013      	movs	r3, r2
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	189b      	adds	r3, r3, r2
 8013be2:	00db      	lsls	r3, r3, #3
 8013be4:	68fa      	ldr	r2, [r7, #12]
 8013be6:	18d3      	adds	r3, r2, r3
 8013be8:	617b      	str	r3, [r7, #20]
 8013bea:	e00b      	b.n	8013c04 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8013bec:	230a      	movs	r3, #10
 8013bee:	18fb      	adds	r3, r7, r3
 8013bf0:	881a      	ldrh	r2, [r3, #0]
 8013bf2:	0013      	movs	r3, r2
 8013bf4:	009b      	lsls	r3, r3, #2
 8013bf6:	189b      	adds	r3, r3, r2
 8013bf8:	00db      	lsls	r3, r3, #3
 8013bfa:	3369      	adds	r3, #105	@ 0x69
 8013bfc:	33ff      	adds	r3, #255	@ 0xff
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	18d3      	adds	r3, r2, r3
 8013c02:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8013c04:	2308      	movs	r3, #8
 8013c06:	18fb      	adds	r3, r7, r3
 8013c08:	881b      	ldrh	r3, [r3, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d107      	bne.n	8013c1e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	2200      	movs	r2, #0
 8013c12:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	b29a      	uxth	r2, r3
 8013c18:	697b      	ldr	r3, [r7, #20]
 8013c1a:	80da      	strh	r2, [r3, #6]
 8013c1c:	e00b      	b.n	8013c36 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	2201      	movs	r2, #1
 8013c22:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	0c1b      	lsrs	r3, r3, #16
 8013c30:	b29a      	uxth	r2, r3
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8013c36:	2300      	movs	r3, #0
}
 8013c38:	0018      	movs	r0, r3
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	b007      	add	sp, #28
 8013c3e:	bd90      	pop	{r4, r7, pc}

08013c40 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b084      	sub	sp, #16
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8013c4e:	687a      	ldr	r2, [r7, #4]
 8013c50:	23ba      	movs	r3, #186	@ 0xba
 8013c52:	009b      	lsls	r3, r3, #2
 8013c54:	2101      	movs	r1, #1
 8013c56:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8013c58:	687a      	ldr	r2, [r7, #4]
 8013c5a:	23b8      	movs	r3, #184	@ 0xb8
 8013c5c:	009b      	lsls	r3, r3, #2
 8013c5e:	2100      	movs	r1, #0
 8013c60:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2254      	movs	r2, #84	@ 0x54
 8013c66:	5a9b      	ldrh	r3, [r3, r2]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	2201      	movs	r2, #1
 8013c6c:	4313      	orrs	r3, r2
 8013c6e:	b299      	uxth	r1, r3
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	2254      	movs	r2, #84	@ 0x54
 8013c74:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2254      	movs	r2, #84	@ 0x54
 8013c7a:	5a9b      	ldrh	r3, [r3, r2]
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	2202      	movs	r2, #2
 8013c80:	4313      	orrs	r3, r2
 8013c82:	b299      	uxth	r1, r3
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	2254      	movs	r2, #84	@ 0x54
 8013c88:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013c8a:	2300      	movs	r3, #0
}
 8013c8c:	0018      	movs	r0, r3
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	b004      	add	sp, #16
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	000a      	movs	r2, r1
 8013c9e:	1cfb      	adds	r3, r7, #3
 8013ca0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8013ca2:	46c0      	nop			@ (mov r8, r8)
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	b002      	add	sp, #8
 8013ca8:	bd80      	pop	{r7, pc}
	...

08013cac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8013cb0:	4b04      	ldr	r3, [pc, #16]	@ (8013cc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8013cb2:	681a      	ldr	r2, [r3, #0]
 8013cb4:	4b03      	ldr	r3, [pc, #12]	@ (8013cc4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8013cb6:	2180      	movs	r1, #128	@ 0x80
 8013cb8:	0049      	lsls	r1, r1, #1
 8013cba:	430a      	orrs	r2, r1
 8013cbc:	601a      	str	r2, [r3, #0]
}
 8013cbe:	46c0      	nop			@ (mov r8, r8)
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	40007000 	.word	0x40007000

08013cc8 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b086      	sub	sp, #24
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	000a      	movs	r2, r1
 8013cd2:	1cfb      	adds	r3, r7, #3
 8013cd4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8013cda:	4b25      	ldr	r3, [pc, #148]	@ (8013d70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013cdc:	681a      	ldr	r2, [r3, #0]
 8013cde:	2380      	movs	r3, #128	@ 0x80
 8013ce0:	009b      	lsls	r3, r3, #2
 8013ce2:	4013      	ands	r3, r2
 8013ce4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8013ce6:	4b23      	ldr	r3, [pc, #140]	@ (8013d74 <HAL_PWR_EnterSTOPMode+0xac>)
 8013ce8:	6a1b      	ldr	r3, [r3, #32]
 8013cea:	2201      	movs	r2, #1
 8013cec:	4013      	ands	r3, r2
 8013cee:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d008      	beq.n	8013d08 <HAL_PWR_EnterSTOPMode+0x40>
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d005      	beq.n	8013d08 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8013cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8013d70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013cfe:	681a      	ldr	r2, [r3, #0]
 8013d00:	4b1b      	ldr	r3, [pc, #108]	@ (8013d70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013d02:	491d      	ldr	r1, [pc, #116]	@ (8013d78 <HAL_PWR_EnterSTOPMode+0xb0>)
 8013d04:	400a      	ands	r2, r1
 8013d06:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8013d08:	4b19      	ldr	r3, [pc, #100]	@ (8013d70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	2203      	movs	r2, #3
 8013d12:	4393      	bics	r3, r2
 8013d14:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8013d16:	697a      	ldr	r2, [r7, #20]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8013d1e:	4b14      	ldr	r3, [pc, #80]	@ (8013d70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013d20:	697a      	ldr	r2, [r7, #20]
 8013d22:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8013d24:	4b15      	ldr	r3, [pc, #84]	@ (8013d7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013d26:	691a      	ldr	r2, [r3, #16]
 8013d28:	4b14      	ldr	r3, [pc, #80]	@ (8013d7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013d2a:	2104      	movs	r1, #4
 8013d2c:	430a      	orrs	r2, r1
 8013d2e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8013d30:	1cfb      	adds	r3, r7, #3
 8013d32:	781b      	ldrb	r3, [r3, #0]
 8013d34:	2b01      	cmp	r3, #1
 8013d36:	d101      	bne.n	8013d3c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8013d38:	bf30      	wfi
 8013d3a:	e002      	b.n	8013d42 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8013d3c:	bf40      	sev
    __WFE();
 8013d3e:	bf20      	wfe
    __WFE();
 8013d40:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8013d42:	4b0e      	ldr	r3, [pc, #56]	@ (8013d7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013d44:	691a      	ldr	r2, [r3, #16]
 8013d46:	4b0d      	ldr	r3, [pc, #52]	@ (8013d7c <HAL_PWR_EnterSTOPMode+0xb4>)
 8013d48:	2104      	movs	r1, #4
 8013d4a:	438a      	bics	r2, r1
 8013d4c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d009      	beq.n	8013d68 <HAL_PWR_EnterSTOPMode+0xa0>
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d006      	beq.n	8013d68 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8013d5a:	4b05      	ldr	r3, [pc, #20]	@ (8013d70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013d5c:	681a      	ldr	r2, [r3, #0]
 8013d5e:	4b04      	ldr	r3, [pc, #16]	@ (8013d70 <HAL_PWR_EnterSTOPMode+0xa8>)
 8013d60:	2180      	movs	r1, #128	@ 0x80
 8013d62:	0089      	lsls	r1, r1, #2
 8013d64:	430a      	orrs	r2, r1
 8013d66:	601a      	str	r2, [r3, #0]
  }
}
 8013d68:	46c0      	nop			@ (mov r8, r8)
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	b006      	add	sp, #24
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	40007000 	.word	0x40007000
 8013d74:	40010000 	.word	0x40010000
 8013d78:	fffffdff 	.word	0xfffffdff
 8013d7c:	e000ed00 	.word	0xe000ed00

08013d80 <HAL_PWR_EnterSTANDBYMode>:
  *          - WKUP pin 3 (PE06) if enabled, for stm32l07xxx and stm32l08xxx devices only.
  *          - WKUP pin 3 (PA02) if enabled, for stm32l031xx devices only.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8013d84:	4b07      	ldr	r3, [pc, #28]	@ (8013da4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	4b06      	ldr	r3, [pc, #24]	@ (8013da4 <HAL_PWR_EnterSTANDBYMode+0x24>)
 8013d8a:	2102      	movs	r1, #2
 8013d8c:	430a      	orrs	r2, r1
 8013d8e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8013d90:	4b05      	ldr	r3, [pc, #20]	@ (8013da8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8013d92:	691a      	ldr	r2, [r3, #16]
 8013d94:	4b04      	ldr	r3, [pc, #16]	@ (8013da8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8013d96:	2104      	movs	r1, #4
 8013d98:	430a      	orrs	r2, r1
 8013d9a:	611a      	str	r2, [r3, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8013d9c:	bf30      	wfi
}
 8013d9e:	46c0      	nop			@ (mov r8, r8)
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	40007000 	.word	0x40007000
 8013da8:	e000ed00 	.word	0xe000ed00

08013dac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013dac:	b5b0      	push	{r4, r5, r7, lr}
 8013dae:	b08a      	sub	sp, #40	@ 0x28
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d102      	bne.n	8013dc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8013dba:	2301      	movs	r3, #1
 8013dbc:	f000 fbbf 	bl	801453e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013dc0:	4bc9      	ldr	r3, [pc, #804]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	220c      	movs	r2, #12
 8013dc6:	4013      	ands	r3, r2
 8013dc8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013dca:	4bc7      	ldr	r3, [pc, #796]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013dcc:	68da      	ldr	r2, [r3, #12]
 8013dce:	2380      	movs	r3, #128	@ 0x80
 8013dd0:	025b      	lsls	r3, r3, #9
 8013dd2:	4013      	ands	r3, r2
 8013dd4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	2201      	movs	r2, #1
 8013ddc:	4013      	ands	r3, r2
 8013dde:	d100      	bne.n	8013de2 <HAL_RCC_OscConfig+0x36>
 8013de0:	e07e      	b.n	8013ee0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8013de2:	69fb      	ldr	r3, [r7, #28]
 8013de4:	2b08      	cmp	r3, #8
 8013de6:	d007      	beq.n	8013df8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8013de8:	69fb      	ldr	r3, [r7, #28]
 8013dea:	2b0c      	cmp	r3, #12
 8013dec:	d112      	bne.n	8013e14 <HAL_RCC_OscConfig+0x68>
 8013dee:	69ba      	ldr	r2, [r7, #24]
 8013df0:	2380      	movs	r3, #128	@ 0x80
 8013df2:	025b      	lsls	r3, r3, #9
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d10d      	bne.n	8013e14 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013df8:	4bbb      	ldr	r3, [pc, #748]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013dfa:	681a      	ldr	r2, [r3, #0]
 8013dfc:	2380      	movs	r3, #128	@ 0x80
 8013dfe:	029b      	lsls	r3, r3, #10
 8013e00:	4013      	ands	r3, r2
 8013e02:	d100      	bne.n	8013e06 <HAL_RCC_OscConfig+0x5a>
 8013e04:	e06b      	b.n	8013ede <HAL_RCC_OscConfig+0x132>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	685b      	ldr	r3, [r3, #4]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d167      	bne.n	8013ede <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	f000 fb95 	bl	801453e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	685a      	ldr	r2, [r3, #4]
 8013e18:	2380      	movs	r3, #128	@ 0x80
 8013e1a:	025b      	lsls	r3, r3, #9
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d107      	bne.n	8013e30 <HAL_RCC_OscConfig+0x84>
 8013e20:	4bb1      	ldr	r3, [pc, #708]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e22:	681a      	ldr	r2, [r3, #0]
 8013e24:	4bb0      	ldr	r3, [pc, #704]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e26:	2180      	movs	r1, #128	@ 0x80
 8013e28:	0249      	lsls	r1, r1, #9
 8013e2a:	430a      	orrs	r2, r1
 8013e2c:	601a      	str	r2, [r3, #0]
 8013e2e:	e027      	b.n	8013e80 <HAL_RCC_OscConfig+0xd4>
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	685a      	ldr	r2, [r3, #4]
 8013e34:	23a0      	movs	r3, #160	@ 0xa0
 8013e36:	02db      	lsls	r3, r3, #11
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d10e      	bne.n	8013e5a <HAL_RCC_OscConfig+0xae>
 8013e3c:	4baa      	ldr	r3, [pc, #680]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e3e:	681a      	ldr	r2, [r3, #0]
 8013e40:	4ba9      	ldr	r3, [pc, #676]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e42:	2180      	movs	r1, #128	@ 0x80
 8013e44:	02c9      	lsls	r1, r1, #11
 8013e46:	430a      	orrs	r2, r1
 8013e48:	601a      	str	r2, [r3, #0]
 8013e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e4c:	681a      	ldr	r2, [r3, #0]
 8013e4e:	4ba6      	ldr	r3, [pc, #664]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e50:	2180      	movs	r1, #128	@ 0x80
 8013e52:	0249      	lsls	r1, r1, #9
 8013e54:	430a      	orrs	r2, r1
 8013e56:	601a      	str	r2, [r3, #0]
 8013e58:	e012      	b.n	8013e80 <HAL_RCC_OscConfig+0xd4>
 8013e5a:	4ba3      	ldr	r3, [pc, #652]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e5c:	681a      	ldr	r2, [r3, #0]
 8013e5e:	4ba2      	ldr	r3, [pc, #648]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e60:	49a2      	ldr	r1, [pc, #648]	@ (80140ec <HAL_RCC_OscConfig+0x340>)
 8013e62:	400a      	ands	r2, r1
 8013e64:	601a      	str	r2, [r3, #0]
 8013e66:	4ba0      	ldr	r3, [pc, #640]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e68:	681a      	ldr	r2, [r3, #0]
 8013e6a:	2380      	movs	r3, #128	@ 0x80
 8013e6c:	025b      	lsls	r3, r3, #9
 8013e6e:	4013      	ands	r3, r2
 8013e70:	60fb      	str	r3, [r7, #12]
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	4b9c      	ldr	r3, [pc, #624]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	4b9b      	ldr	r3, [pc, #620]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013e7a:	499d      	ldr	r1, [pc, #628]	@ (80140f0 <HAL_RCC_OscConfig+0x344>)
 8013e7c:	400a      	ands	r2, r1
 8013e7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d015      	beq.n	8013eb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013e88:	f7f9 fe86 	bl	800db98 <HAL_GetTick>
 8013e8c:	0003      	movs	r3, r0
 8013e8e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013e90:	e009      	b.n	8013ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013e92:	f7f9 fe81 	bl	800db98 <HAL_GetTick>
 8013e96:	0002      	movs	r2, r0
 8013e98:	697b      	ldr	r3, [r7, #20]
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	2b64      	cmp	r3, #100	@ 0x64
 8013e9e:	d902      	bls.n	8013ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8013ea0:	2303      	movs	r3, #3
 8013ea2:	f000 fb4c 	bl	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8013ea6:	4b90      	ldr	r3, [pc, #576]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013ea8:	681a      	ldr	r2, [r3, #0]
 8013eaa:	2380      	movs	r3, #128	@ 0x80
 8013eac:	029b      	lsls	r3, r3, #10
 8013eae:	4013      	ands	r3, r2
 8013eb0:	d0ef      	beq.n	8013e92 <HAL_RCC_OscConfig+0xe6>
 8013eb2:	e015      	b.n	8013ee0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013eb4:	f7f9 fe70 	bl	800db98 <HAL_GetTick>
 8013eb8:	0003      	movs	r3, r0
 8013eba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013ebc:	e008      	b.n	8013ed0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8013ebe:	f7f9 fe6b 	bl	800db98 <HAL_GetTick>
 8013ec2:	0002      	movs	r2, r0
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	2b64      	cmp	r3, #100	@ 0x64
 8013eca:	d901      	bls.n	8013ed0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8013ecc:	2303      	movs	r3, #3
 8013ece:	e336      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8013ed0:	4b85      	ldr	r3, [pc, #532]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013ed2:	681a      	ldr	r2, [r3, #0]
 8013ed4:	2380      	movs	r3, #128	@ 0x80
 8013ed6:	029b      	lsls	r3, r3, #10
 8013ed8:	4013      	ands	r3, r2
 8013eda:	d1f0      	bne.n	8013ebe <HAL_RCC_OscConfig+0x112>
 8013edc:	e000      	b.n	8013ee0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013ede:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2202      	movs	r2, #2
 8013ee6:	4013      	ands	r3, r2
 8013ee8:	d100      	bne.n	8013eec <HAL_RCC_OscConfig+0x140>
 8013eea:	e099      	b.n	8014020 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8013ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef4:	2220      	movs	r2, #32
 8013ef6:	4013      	ands	r3, r2
 8013ef8:	d009      	beq.n	8013f0e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8013efa:	4b7b      	ldr	r3, [pc, #492]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013efc:	681a      	ldr	r2, [r3, #0]
 8013efe:	4b7a      	ldr	r3, [pc, #488]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013f00:	2120      	movs	r1, #32
 8013f02:	430a      	orrs	r2, r1
 8013f04:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8013f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f08:	2220      	movs	r2, #32
 8013f0a:	4393      	bics	r3, r2
 8013f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	2b04      	cmp	r3, #4
 8013f12:	d005      	beq.n	8013f20 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8013f14:	69fb      	ldr	r3, [r7, #28]
 8013f16:	2b0c      	cmp	r3, #12
 8013f18:	d13e      	bne.n	8013f98 <HAL_RCC_OscConfig+0x1ec>
 8013f1a:	69bb      	ldr	r3, [r7, #24]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d13b      	bne.n	8013f98 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8013f20:	4b71      	ldr	r3, [pc, #452]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	2204      	movs	r2, #4
 8013f26:	4013      	ands	r3, r2
 8013f28:	d004      	beq.n	8013f34 <HAL_RCC_OscConfig+0x188>
 8013f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d101      	bne.n	8013f34 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8013f30:	2301      	movs	r3, #1
 8013f32:	e304      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013f34:	4b6c      	ldr	r3, [pc, #432]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013f36:	685b      	ldr	r3, [r3, #4]
 8013f38:	4a6e      	ldr	r2, [pc, #440]	@ (80140f4 <HAL_RCC_OscConfig+0x348>)
 8013f3a:	4013      	ands	r3, r2
 8013f3c:	0019      	movs	r1, r3
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	691b      	ldr	r3, [r3, #16]
 8013f42:	021a      	lsls	r2, r3, #8
 8013f44:	4b68      	ldr	r3, [pc, #416]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013f46:	430a      	orrs	r2, r1
 8013f48:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8013f4a:	4b67      	ldr	r3, [pc, #412]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	2209      	movs	r2, #9
 8013f50:	4393      	bics	r3, r2
 8013f52:	0019      	movs	r1, r3
 8013f54:	4b64      	ldr	r3, [pc, #400]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f58:	430a      	orrs	r2, r1
 8013f5a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8013f5c:	f000 fc42 	bl	80147e4 <HAL_RCC_GetSysClockFreq>
 8013f60:	0001      	movs	r1, r0
 8013f62:	4b61      	ldr	r3, [pc, #388]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013f64:	68db      	ldr	r3, [r3, #12]
 8013f66:	091b      	lsrs	r3, r3, #4
 8013f68:	220f      	movs	r2, #15
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	4a62      	ldr	r2, [pc, #392]	@ (80140f8 <HAL_RCC_OscConfig+0x34c>)
 8013f6e:	5cd3      	ldrb	r3, [r2, r3]
 8013f70:	000a      	movs	r2, r1
 8013f72:	40da      	lsrs	r2, r3
 8013f74:	4b61      	ldr	r3, [pc, #388]	@ (80140fc <HAL_RCC_OscConfig+0x350>)
 8013f76:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8013f78:	4b61      	ldr	r3, [pc, #388]	@ (8014100 <HAL_RCC_OscConfig+0x354>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	2513      	movs	r5, #19
 8013f7e:	197c      	adds	r4, r7, r5
 8013f80:	0018      	movs	r0, r3
 8013f82:	f7f9 fdc3 	bl	800db0c <HAL_InitTick>
 8013f86:	0003      	movs	r3, r0
 8013f88:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8013f8a:	197b      	adds	r3, r7, r5
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d046      	beq.n	8014020 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8013f92:	197b      	adds	r3, r7, r5
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	e2d2      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8013f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d027      	beq.n	8013fee <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8013f9e:	4b52      	ldr	r3, [pc, #328]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2209      	movs	r2, #9
 8013fa4:	4393      	bics	r3, r2
 8013fa6:	0019      	movs	r1, r3
 8013fa8:	4b4f      	ldr	r3, [pc, #316]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013fac:	430a      	orrs	r2, r1
 8013fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013fb0:	f7f9 fdf2 	bl	800db98 <HAL_GetTick>
 8013fb4:	0003      	movs	r3, r0
 8013fb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013fb8:	e008      	b.n	8013fcc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8013fba:	f7f9 fded 	bl	800db98 <HAL_GetTick>
 8013fbe:	0002      	movs	r2, r0
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	1ad3      	subs	r3, r2, r3
 8013fc4:	2b02      	cmp	r3, #2
 8013fc6:	d901      	bls.n	8013fcc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8013fc8:	2303      	movs	r3, #3
 8013fca:	e2b8      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8013fcc:	4b46      	ldr	r3, [pc, #280]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	2204      	movs	r2, #4
 8013fd2:	4013      	ands	r3, r2
 8013fd4:	d0f1      	beq.n	8013fba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013fd6:	4b44      	ldr	r3, [pc, #272]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	4a46      	ldr	r2, [pc, #280]	@ (80140f4 <HAL_RCC_OscConfig+0x348>)
 8013fdc:	4013      	ands	r3, r2
 8013fde:	0019      	movs	r1, r3
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	691b      	ldr	r3, [r3, #16]
 8013fe4:	021a      	lsls	r2, r3, #8
 8013fe6:	4b40      	ldr	r3, [pc, #256]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013fe8:	430a      	orrs	r2, r1
 8013fea:	605a      	str	r2, [r3, #4]
 8013fec:	e018      	b.n	8014020 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8013fee:	4b3e      	ldr	r3, [pc, #248]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013ff0:	681a      	ldr	r2, [r3, #0]
 8013ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8013ff4:	2101      	movs	r1, #1
 8013ff6:	438a      	bics	r2, r1
 8013ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8013ffa:	f7f9 fdcd 	bl	800db98 <HAL_GetTick>
 8013ffe:	0003      	movs	r3, r0
 8014000:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014002:	e008      	b.n	8014016 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014004:	f7f9 fdc8 	bl	800db98 <HAL_GetTick>
 8014008:	0002      	movs	r2, r0
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	1ad3      	subs	r3, r2, r3
 801400e:	2b02      	cmp	r3, #2
 8014010:	d901      	bls.n	8014016 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8014012:	2303      	movs	r3, #3
 8014014:	e293      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014016:	4b34      	ldr	r3, [pc, #208]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2204      	movs	r2, #4
 801401c:	4013      	ands	r3, r2
 801401e:	d1f1      	bne.n	8014004 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2210      	movs	r2, #16
 8014026:	4013      	ands	r3, r2
 8014028:	d100      	bne.n	801402c <HAL_RCC_OscConfig+0x280>
 801402a:	e0a2      	b.n	8014172 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d140      	bne.n	80140b4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8014032:	4b2d      	ldr	r3, [pc, #180]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	2380      	movs	r3, #128	@ 0x80
 8014038:	009b      	lsls	r3, r3, #2
 801403a:	4013      	ands	r3, r2
 801403c:	d005      	beq.n	801404a <HAL_RCC_OscConfig+0x29e>
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	69db      	ldr	r3, [r3, #28]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d101      	bne.n	801404a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8014046:	2301      	movs	r3, #1
 8014048:	e279      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801404a:	4b27      	ldr	r3, [pc, #156]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 801404c:	685b      	ldr	r3, [r3, #4]
 801404e:	4a2d      	ldr	r2, [pc, #180]	@ (8014104 <HAL_RCC_OscConfig+0x358>)
 8014050:	4013      	ands	r3, r2
 8014052:	0019      	movs	r1, r3
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014058:	4b23      	ldr	r3, [pc, #140]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 801405a:	430a      	orrs	r2, r1
 801405c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 801405e:	4b22      	ldr	r3, [pc, #136]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8014060:	685b      	ldr	r3, [r3, #4]
 8014062:	021b      	lsls	r3, r3, #8
 8014064:	0a19      	lsrs	r1, r3, #8
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	6a1b      	ldr	r3, [r3, #32]
 801406a:	061a      	lsls	r2, r3, #24
 801406c:	4b1e      	ldr	r3, [pc, #120]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 801406e:	430a      	orrs	r2, r1
 8014070:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014076:	0b5b      	lsrs	r3, r3, #13
 8014078:	3301      	adds	r3, #1
 801407a:	2280      	movs	r2, #128	@ 0x80
 801407c:	0212      	lsls	r2, r2, #8
 801407e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8014080:	4b19      	ldr	r3, [pc, #100]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	091b      	lsrs	r3, r3, #4
 8014086:	210f      	movs	r1, #15
 8014088:	400b      	ands	r3, r1
 801408a:	491b      	ldr	r1, [pc, #108]	@ (80140f8 <HAL_RCC_OscConfig+0x34c>)
 801408c:	5ccb      	ldrb	r3, [r1, r3]
 801408e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8014090:	4b1a      	ldr	r3, [pc, #104]	@ (80140fc <HAL_RCC_OscConfig+0x350>)
 8014092:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8014094:	4b1a      	ldr	r3, [pc, #104]	@ (8014100 <HAL_RCC_OscConfig+0x354>)
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2513      	movs	r5, #19
 801409a:	197c      	adds	r4, r7, r5
 801409c:	0018      	movs	r0, r3
 801409e:	f7f9 fd35 	bl	800db0c <HAL_InitTick>
 80140a2:	0003      	movs	r3, r0
 80140a4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80140a6:	197b      	adds	r3, r7, r5
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d061      	beq.n	8014172 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80140ae:	197b      	adds	r3, r7, r5
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	e244      	b.n	801453e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	69db      	ldr	r3, [r3, #28]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d040      	beq.n	801413e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80140bc:	4b0a      	ldr	r3, [pc, #40]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	4b09      	ldr	r3, [pc, #36]	@ (80140e8 <HAL_RCC_OscConfig+0x33c>)
 80140c2:	2180      	movs	r1, #128	@ 0x80
 80140c4:	0049      	lsls	r1, r1, #1
 80140c6:	430a      	orrs	r2, r1
 80140c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80140ca:	f7f9 fd65 	bl	800db98 <HAL_GetTick>
 80140ce:	0003      	movs	r3, r0
 80140d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80140d2:	e019      	b.n	8014108 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80140d4:	f7f9 fd60 	bl	800db98 <HAL_GetTick>
 80140d8:	0002      	movs	r2, r0
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	2b02      	cmp	r3, #2
 80140e0:	d912      	bls.n	8014108 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80140e2:	2303      	movs	r3, #3
 80140e4:	e22b      	b.n	801453e <HAL_RCC_OscConfig+0x792>
 80140e6:	46c0      	nop			@ (mov r8, r8)
 80140e8:	40021000 	.word	0x40021000
 80140ec:	fffeffff 	.word	0xfffeffff
 80140f0:	fffbffff 	.word	0xfffbffff
 80140f4:	ffffe0ff 	.word	0xffffe0ff
 80140f8:	08023c8c 	.word	0x08023c8c
 80140fc:	200000c8 	.word	0x200000c8
 8014100:	200000d8 	.word	0x200000d8
 8014104:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014108:	4bca      	ldr	r3, [pc, #808]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	2380      	movs	r3, #128	@ 0x80
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	4013      	ands	r3, r2
 8014112:	d0df      	beq.n	80140d4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8014114:	4bc7      	ldr	r3, [pc, #796]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	4ac7      	ldr	r2, [pc, #796]	@ (8014438 <HAL_RCC_OscConfig+0x68c>)
 801411a:	4013      	ands	r3, r2
 801411c:	0019      	movs	r1, r3
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014122:	4bc4      	ldr	r3, [pc, #784]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014124:	430a      	orrs	r2, r1
 8014126:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8014128:	4bc2      	ldr	r3, [pc, #776]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801412a:	685b      	ldr	r3, [r3, #4]
 801412c:	021b      	lsls	r3, r3, #8
 801412e:	0a19      	lsrs	r1, r3, #8
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	6a1b      	ldr	r3, [r3, #32]
 8014134:	061a      	lsls	r2, r3, #24
 8014136:	4bbf      	ldr	r3, [pc, #764]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014138:	430a      	orrs	r2, r1
 801413a:	605a      	str	r2, [r3, #4]
 801413c:	e019      	b.n	8014172 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801413e:	4bbd      	ldr	r3, [pc, #756]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014140:	681a      	ldr	r2, [r3, #0]
 8014142:	4bbc      	ldr	r3, [pc, #752]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014144:	49bd      	ldr	r1, [pc, #756]	@ (801443c <HAL_RCC_OscConfig+0x690>)
 8014146:	400a      	ands	r2, r1
 8014148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801414a:	f7f9 fd25 	bl	800db98 <HAL_GetTick>
 801414e:	0003      	movs	r3, r0
 8014150:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014152:	e008      	b.n	8014166 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8014154:	f7f9 fd20 	bl	800db98 <HAL_GetTick>
 8014158:	0002      	movs	r2, r0
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	1ad3      	subs	r3, r2, r3
 801415e:	2b02      	cmp	r3, #2
 8014160:	d901      	bls.n	8014166 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8014162:	2303      	movs	r3, #3
 8014164:	e1eb      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8014166:	4bb3      	ldr	r3, [pc, #716]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014168:	681a      	ldr	r2, [r3, #0]
 801416a:	2380      	movs	r3, #128	@ 0x80
 801416c:	009b      	lsls	r3, r3, #2
 801416e:	4013      	ands	r3, r2
 8014170:	d1f0      	bne.n	8014154 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2208      	movs	r2, #8
 8014178:	4013      	ands	r3, r2
 801417a:	d036      	beq.n	80141ea <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	695b      	ldr	r3, [r3, #20]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d019      	beq.n	80141b8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014184:	4bab      	ldr	r3, [pc, #684]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014186:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014188:	4baa      	ldr	r3, [pc, #680]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801418a:	2101      	movs	r1, #1
 801418c:	430a      	orrs	r2, r1
 801418e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014190:	f7f9 fd02 	bl	800db98 <HAL_GetTick>
 8014194:	0003      	movs	r3, r0
 8014196:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014198:	e008      	b.n	80141ac <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801419a:	f7f9 fcfd 	bl	800db98 <HAL_GetTick>
 801419e:	0002      	movs	r2, r0
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	1ad3      	subs	r3, r2, r3
 80141a4:	2b02      	cmp	r3, #2
 80141a6:	d901      	bls.n	80141ac <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80141a8:	2303      	movs	r3, #3
 80141aa:	e1c8      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80141ac:	4ba1      	ldr	r3, [pc, #644]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80141ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80141b0:	2202      	movs	r2, #2
 80141b2:	4013      	ands	r3, r2
 80141b4:	d0f1      	beq.n	801419a <HAL_RCC_OscConfig+0x3ee>
 80141b6:	e018      	b.n	80141ea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80141b8:	4b9e      	ldr	r3, [pc, #632]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80141ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141bc:	4b9d      	ldr	r3, [pc, #628]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80141be:	2101      	movs	r1, #1
 80141c0:	438a      	bics	r2, r1
 80141c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80141c4:	f7f9 fce8 	bl	800db98 <HAL_GetTick>
 80141c8:	0003      	movs	r3, r0
 80141ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80141cc:	e008      	b.n	80141e0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80141ce:	f7f9 fce3 	bl	800db98 <HAL_GetTick>
 80141d2:	0002      	movs	r2, r0
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	1ad3      	subs	r3, r2, r3
 80141d8:	2b02      	cmp	r3, #2
 80141da:	d901      	bls.n	80141e0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80141dc:	2303      	movs	r3, #3
 80141de:	e1ae      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80141e0:	4b94      	ldr	r3, [pc, #592]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80141e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80141e4:	2202      	movs	r2, #2
 80141e6:	4013      	ands	r3, r2
 80141e8:	d1f1      	bne.n	80141ce <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2204      	movs	r2, #4
 80141f0:	4013      	ands	r3, r2
 80141f2:	d100      	bne.n	80141f6 <HAL_RCC_OscConfig+0x44a>
 80141f4:	e0ae      	b.n	8014354 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80141f6:	2023      	movs	r0, #35	@ 0x23
 80141f8:	183b      	adds	r3, r7, r0
 80141fa:	2200      	movs	r2, #0
 80141fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80141fe:	4b8d      	ldr	r3, [pc, #564]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014200:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014202:	2380      	movs	r3, #128	@ 0x80
 8014204:	055b      	lsls	r3, r3, #21
 8014206:	4013      	ands	r3, r2
 8014208:	d109      	bne.n	801421e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801420a:	4b8a      	ldr	r3, [pc, #552]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801420c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801420e:	4b89      	ldr	r3, [pc, #548]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014210:	2180      	movs	r1, #128	@ 0x80
 8014212:	0549      	lsls	r1, r1, #21
 8014214:	430a      	orrs	r2, r1
 8014216:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8014218:	183b      	adds	r3, r7, r0
 801421a:	2201      	movs	r2, #1
 801421c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801421e:	4b88      	ldr	r3, [pc, #544]	@ (8014440 <HAL_RCC_OscConfig+0x694>)
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	2380      	movs	r3, #128	@ 0x80
 8014224:	005b      	lsls	r3, r3, #1
 8014226:	4013      	ands	r3, r2
 8014228:	d11a      	bne.n	8014260 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801422a:	4b85      	ldr	r3, [pc, #532]	@ (8014440 <HAL_RCC_OscConfig+0x694>)
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	4b84      	ldr	r3, [pc, #528]	@ (8014440 <HAL_RCC_OscConfig+0x694>)
 8014230:	2180      	movs	r1, #128	@ 0x80
 8014232:	0049      	lsls	r1, r1, #1
 8014234:	430a      	orrs	r2, r1
 8014236:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8014238:	f7f9 fcae 	bl	800db98 <HAL_GetTick>
 801423c:	0003      	movs	r3, r0
 801423e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014240:	e008      	b.n	8014254 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014242:	f7f9 fca9 	bl	800db98 <HAL_GetTick>
 8014246:	0002      	movs	r2, r0
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	1ad3      	subs	r3, r2, r3
 801424c:	2b64      	cmp	r3, #100	@ 0x64
 801424e:	d901      	bls.n	8014254 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8014250:	2303      	movs	r3, #3
 8014252:	e174      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014254:	4b7a      	ldr	r3, [pc, #488]	@ (8014440 <HAL_RCC_OscConfig+0x694>)
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	2380      	movs	r3, #128	@ 0x80
 801425a:	005b      	lsls	r3, r3, #1
 801425c:	4013      	ands	r3, r2
 801425e:	d0f0      	beq.n	8014242 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	689a      	ldr	r2, [r3, #8]
 8014264:	2380      	movs	r3, #128	@ 0x80
 8014266:	005b      	lsls	r3, r3, #1
 8014268:	429a      	cmp	r2, r3
 801426a:	d107      	bne.n	801427c <HAL_RCC_OscConfig+0x4d0>
 801426c:	4b71      	ldr	r3, [pc, #452]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801426e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014270:	4b70      	ldr	r3, [pc, #448]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014272:	2180      	movs	r1, #128	@ 0x80
 8014274:	0049      	lsls	r1, r1, #1
 8014276:	430a      	orrs	r2, r1
 8014278:	651a      	str	r2, [r3, #80]	@ 0x50
 801427a:	e031      	b.n	80142e0 <HAL_RCC_OscConfig+0x534>
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	689b      	ldr	r3, [r3, #8]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d10c      	bne.n	801429e <HAL_RCC_OscConfig+0x4f2>
 8014284:	4b6b      	ldr	r3, [pc, #428]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014286:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014288:	4b6a      	ldr	r3, [pc, #424]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801428a:	496c      	ldr	r1, [pc, #432]	@ (801443c <HAL_RCC_OscConfig+0x690>)
 801428c:	400a      	ands	r2, r1
 801428e:	651a      	str	r2, [r3, #80]	@ 0x50
 8014290:	4b68      	ldr	r3, [pc, #416]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014294:	4b67      	ldr	r3, [pc, #412]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014296:	496b      	ldr	r1, [pc, #428]	@ (8014444 <HAL_RCC_OscConfig+0x698>)
 8014298:	400a      	ands	r2, r1
 801429a:	651a      	str	r2, [r3, #80]	@ 0x50
 801429c:	e020      	b.n	80142e0 <HAL_RCC_OscConfig+0x534>
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	689a      	ldr	r2, [r3, #8]
 80142a2:	23a0      	movs	r3, #160	@ 0xa0
 80142a4:	00db      	lsls	r3, r3, #3
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d10e      	bne.n	80142c8 <HAL_RCC_OscConfig+0x51c>
 80142aa:	4b62      	ldr	r3, [pc, #392]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80142ae:	4b61      	ldr	r3, [pc, #388]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142b0:	2180      	movs	r1, #128	@ 0x80
 80142b2:	00c9      	lsls	r1, r1, #3
 80142b4:	430a      	orrs	r2, r1
 80142b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80142b8:	4b5e      	ldr	r3, [pc, #376]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80142bc:	4b5d      	ldr	r3, [pc, #372]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142be:	2180      	movs	r1, #128	@ 0x80
 80142c0:	0049      	lsls	r1, r1, #1
 80142c2:	430a      	orrs	r2, r1
 80142c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80142c6:	e00b      	b.n	80142e0 <HAL_RCC_OscConfig+0x534>
 80142c8:	4b5a      	ldr	r3, [pc, #360]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80142cc:	4b59      	ldr	r3, [pc, #356]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142ce:	495b      	ldr	r1, [pc, #364]	@ (801443c <HAL_RCC_OscConfig+0x690>)
 80142d0:	400a      	ands	r2, r1
 80142d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80142d4:	4b57      	ldr	r3, [pc, #348]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80142d8:	4b56      	ldr	r3, [pc, #344]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80142da:	495a      	ldr	r1, [pc, #360]	@ (8014444 <HAL_RCC_OscConfig+0x698>)
 80142dc:	400a      	ands	r2, r1
 80142de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	689b      	ldr	r3, [r3, #8]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d015      	beq.n	8014314 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80142e8:	f7f9 fc56 	bl	800db98 <HAL_GetTick>
 80142ec:	0003      	movs	r3, r0
 80142ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80142f0:	e009      	b.n	8014306 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80142f2:	f7f9 fc51 	bl	800db98 <HAL_GetTick>
 80142f6:	0002      	movs	r2, r0
 80142f8:	697b      	ldr	r3, [r7, #20]
 80142fa:	1ad3      	subs	r3, r2, r3
 80142fc:	4a52      	ldr	r2, [pc, #328]	@ (8014448 <HAL_RCC_OscConfig+0x69c>)
 80142fe:	4293      	cmp	r3, r2
 8014300:	d901      	bls.n	8014306 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8014302:	2303      	movs	r3, #3
 8014304:	e11b      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014306:	4b4b      	ldr	r3, [pc, #300]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014308:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801430a:	2380      	movs	r3, #128	@ 0x80
 801430c:	009b      	lsls	r3, r3, #2
 801430e:	4013      	ands	r3, r2
 8014310:	d0ef      	beq.n	80142f2 <HAL_RCC_OscConfig+0x546>
 8014312:	e014      	b.n	801433e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8014314:	f7f9 fc40 	bl	800db98 <HAL_GetTick>
 8014318:	0003      	movs	r3, r0
 801431a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801431c:	e009      	b.n	8014332 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801431e:	f7f9 fc3b 	bl	800db98 <HAL_GetTick>
 8014322:	0002      	movs	r2, r0
 8014324:	697b      	ldr	r3, [r7, #20]
 8014326:	1ad3      	subs	r3, r2, r3
 8014328:	4a47      	ldr	r2, [pc, #284]	@ (8014448 <HAL_RCC_OscConfig+0x69c>)
 801432a:	4293      	cmp	r3, r2
 801432c:	d901      	bls.n	8014332 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 801432e:	2303      	movs	r3, #3
 8014330:	e105      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014332:	4b40      	ldr	r3, [pc, #256]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014334:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014336:	2380      	movs	r3, #128	@ 0x80
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	4013      	ands	r3, r2
 801433c:	d1ef      	bne.n	801431e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 801433e:	2323      	movs	r3, #35	@ 0x23
 8014340:	18fb      	adds	r3, r7, r3
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	2b01      	cmp	r3, #1
 8014346:	d105      	bne.n	8014354 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014348:	4b3a      	ldr	r3, [pc, #232]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801434a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801434c:	4b39      	ldr	r3, [pc, #228]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801434e:	493f      	ldr	r1, [pc, #252]	@ (801444c <HAL_RCC_OscConfig+0x6a0>)
 8014350:	400a      	ands	r2, r1
 8014352:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	2220      	movs	r2, #32
 801435a:	4013      	ands	r3, r2
 801435c:	d049      	beq.n	80143f2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	699b      	ldr	r3, [r3, #24]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d026      	beq.n	80143b4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8014366:	4b33      	ldr	r3, [pc, #204]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014368:	689a      	ldr	r2, [r3, #8]
 801436a:	4b32      	ldr	r3, [pc, #200]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801436c:	2101      	movs	r1, #1
 801436e:	430a      	orrs	r2, r1
 8014370:	609a      	str	r2, [r3, #8]
 8014372:	4b30      	ldr	r3, [pc, #192]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014376:	4b2f      	ldr	r3, [pc, #188]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014378:	2101      	movs	r1, #1
 801437a:	430a      	orrs	r2, r1
 801437c:	635a      	str	r2, [r3, #52]	@ 0x34
 801437e:	4b34      	ldr	r3, [pc, #208]	@ (8014450 <HAL_RCC_OscConfig+0x6a4>)
 8014380:	6a1a      	ldr	r2, [r3, #32]
 8014382:	4b33      	ldr	r3, [pc, #204]	@ (8014450 <HAL_RCC_OscConfig+0x6a4>)
 8014384:	2180      	movs	r1, #128	@ 0x80
 8014386:	0189      	lsls	r1, r1, #6
 8014388:	430a      	orrs	r2, r1
 801438a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801438c:	f7f9 fc04 	bl	800db98 <HAL_GetTick>
 8014390:	0003      	movs	r3, r0
 8014392:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014394:	e008      	b.n	80143a8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014396:	f7f9 fbff 	bl	800db98 <HAL_GetTick>
 801439a:	0002      	movs	r2, r0
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	1ad3      	subs	r3, r2, r3
 80143a0:	2b02      	cmp	r3, #2
 80143a2:	d901      	bls.n	80143a8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80143a4:	2303      	movs	r3, #3
 80143a6:	e0ca      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80143a8:	4b22      	ldr	r3, [pc, #136]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80143aa:	689b      	ldr	r3, [r3, #8]
 80143ac:	2202      	movs	r2, #2
 80143ae:	4013      	ands	r3, r2
 80143b0:	d0f1      	beq.n	8014396 <HAL_RCC_OscConfig+0x5ea>
 80143b2:	e01e      	b.n	80143f2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80143b4:	4b1f      	ldr	r3, [pc, #124]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80143b6:	689a      	ldr	r2, [r3, #8]
 80143b8:	4b1e      	ldr	r3, [pc, #120]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80143ba:	2101      	movs	r1, #1
 80143bc:	438a      	bics	r2, r1
 80143be:	609a      	str	r2, [r3, #8]
 80143c0:	4b23      	ldr	r3, [pc, #140]	@ (8014450 <HAL_RCC_OscConfig+0x6a4>)
 80143c2:	6a1a      	ldr	r2, [r3, #32]
 80143c4:	4b22      	ldr	r3, [pc, #136]	@ (8014450 <HAL_RCC_OscConfig+0x6a4>)
 80143c6:	4923      	ldr	r1, [pc, #140]	@ (8014454 <HAL_RCC_OscConfig+0x6a8>)
 80143c8:	400a      	ands	r2, r1
 80143ca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80143cc:	f7f9 fbe4 	bl	800db98 <HAL_GetTick>
 80143d0:	0003      	movs	r3, r0
 80143d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80143d4:	e008      	b.n	80143e8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80143d6:	f7f9 fbdf 	bl	800db98 <HAL_GetTick>
 80143da:	0002      	movs	r2, r0
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	1ad3      	subs	r3, r2, r3
 80143e0:	2b02      	cmp	r3, #2
 80143e2:	d901      	bls.n	80143e8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80143e4:	2303      	movs	r3, #3
 80143e6:	e0aa      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80143e8:	4b12      	ldr	r3, [pc, #72]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 80143ea:	689b      	ldr	r3, [r3, #8]
 80143ec:	2202      	movs	r2, #2
 80143ee:	4013      	ands	r3, r2
 80143f0:	d1f1      	bne.n	80143d6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d100      	bne.n	80143fc <HAL_RCC_OscConfig+0x650>
 80143fa:	e09f      	b.n	801453c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80143fc:	69fb      	ldr	r3, [r7, #28]
 80143fe:	2b0c      	cmp	r3, #12
 8014400:	d100      	bne.n	8014404 <HAL_RCC_OscConfig+0x658>
 8014402:	e078      	b.n	80144f6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014408:	2b02      	cmp	r3, #2
 801440a:	d159      	bne.n	80144c0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801440c:	4b09      	ldr	r3, [pc, #36]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 801440e:	681a      	ldr	r2, [r3, #0]
 8014410:	4b08      	ldr	r3, [pc, #32]	@ (8014434 <HAL_RCC_OscConfig+0x688>)
 8014412:	4911      	ldr	r1, [pc, #68]	@ (8014458 <HAL_RCC_OscConfig+0x6ac>)
 8014414:	400a      	ands	r2, r1
 8014416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014418:	f7f9 fbbe 	bl	800db98 <HAL_GetTick>
 801441c:	0003      	movs	r3, r0
 801441e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8014420:	e01c      	b.n	801445c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014422:	f7f9 fbb9 	bl	800db98 <HAL_GetTick>
 8014426:	0002      	movs	r2, r0
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	2b02      	cmp	r3, #2
 801442e:	d915      	bls.n	801445c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8014430:	2303      	movs	r3, #3
 8014432:	e084      	b.n	801453e <HAL_RCC_OscConfig+0x792>
 8014434:	40021000 	.word	0x40021000
 8014438:	ffff1fff 	.word	0xffff1fff
 801443c:	fffffeff 	.word	0xfffffeff
 8014440:	40007000 	.word	0x40007000
 8014444:	fffffbff 	.word	0xfffffbff
 8014448:	00001388 	.word	0x00001388
 801444c:	efffffff 	.word	0xefffffff
 8014450:	40010000 	.word	0x40010000
 8014454:	ffffdfff 	.word	0xffffdfff
 8014458:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 801445c:	4b3a      	ldr	r3, [pc, #232]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 801445e:	681a      	ldr	r2, [r3, #0]
 8014460:	2380      	movs	r3, #128	@ 0x80
 8014462:	049b      	lsls	r3, r3, #18
 8014464:	4013      	ands	r3, r2
 8014466:	d1dc      	bne.n	8014422 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014468:	4b37      	ldr	r3, [pc, #220]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	4a37      	ldr	r2, [pc, #220]	@ (801454c <HAL_RCC_OscConfig+0x7a0>)
 801446e:	4013      	ands	r3, r2
 8014470:	0019      	movs	r1, r3
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801447a:	431a      	orrs	r2, r3
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014480:	431a      	orrs	r2, r3
 8014482:	4b31      	ldr	r3, [pc, #196]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 8014484:	430a      	orrs	r2, r1
 8014486:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014488:	4b2f      	ldr	r3, [pc, #188]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	4b2e      	ldr	r3, [pc, #184]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 801448e:	2180      	movs	r1, #128	@ 0x80
 8014490:	0449      	lsls	r1, r1, #17
 8014492:	430a      	orrs	r2, r1
 8014494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014496:	f7f9 fb7f 	bl	800db98 <HAL_GetTick>
 801449a:	0003      	movs	r3, r0
 801449c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 801449e:	e008      	b.n	80144b2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80144a0:	f7f9 fb7a 	bl	800db98 <HAL_GetTick>
 80144a4:	0002      	movs	r2, r0
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	1ad3      	subs	r3, r2, r3
 80144aa:	2b02      	cmp	r3, #2
 80144ac:	d901      	bls.n	80144b2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80144ae:	2303      	movs	r3, #3
 80144b0:	e045      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80144b2:	4b25      	ldr	r3, [pc, #148]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	2380      	movs	r3, #128	@ 0x80
 80144b8:	049b      	lsls	r3, r3, #18
 80144ba:	4013      	ands	r3, r2
 80144bc:	d0f0      	beq.n	80144a0 <HAL_RCC_OscConfig+0x6f4>
 80144be:	e03d      	b.n	801453c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80144c0:	4b21      	ldr	r3, [pc, #132]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 80144c2:	681a      	ldr	r2, [r3, #0]
 80144c4:	4b20      	ldr	r3, [pc, #128]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 80144c6:	4922      	ldr	r1, [pc, #136]	@ (8014550 <HAL_RCC_OscConfig+0x7a4>)
 80144c8:	400a      	ands	r2, r1
 80144ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80144cc:	f7f9 fb64 	bl	800db98 <HAL_GetTick>
 80144d0:	0003      	movs	r3, r0
 80144d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80144d4:	e008      	b.n	80144e8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80144d6:	f7f9 fb5f 	bl	800db98 <HAL_GetTick>
 80144da:	0002      	movs	r2, r0
 80144dc:	697b      	ldr	r3, [r7, #20]
 80144de:	1ad3      	subs	r3, r2, r3
 80144e0:	2b02      	cmp	r3, #2
 80144e2:	d901      	bls.n	80144e8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80144e4:	2303      	movs	r3, #3
 80144e6:	e02a      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80144e8:	4b17      	ldr	r3, [pc, #92]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 80144ea:	681a      	ldr	r2, [r3, #0]
 80144ec:	2380      	movs	r3, #128	@ 0x80
 80144ee:	049b      	lsls	r3, r3, #18
 80144f0:	4013      	ands	r3, r2
 80144f2:	d1f0      	bne.n	80144d6 <HAL_RCC_OscConfig+0x72a>
 80144f4:	e022      	b.n	801453c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d101      	bne.n	8014502 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80144fe:	2301      	movs	r3, #1
 8014500:	e01d      	b.n	801453e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8014502:	4b11      	ldr	r3, [pc, #68]	@ (8014548 <HAL_RCC_OscConfig+0x79c>)
 8014504:	68db      	ldr	r3, [r3, #12]
 8014506:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014508:	69ba      	ldr	r2, [r7, #24]
 801450a:	2380      	movs	r3, #128	@ 0x80
 801450c:	025b      	lsls	r3, r3, #9
 801450e:	401a      	ands	r2, r3
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014514:	429a      	cmp	r2, r3
 8014516:	d10f      	bne.n	8014538 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014518:	69ba      	ldr	r2, [r7, #24]
 801451a:	23f0      	movs	r3, #240	@ 0xf0
 801451c:	039b      	lsls	r3, r3, #14
 801451e:	401a      	ands	r2, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014524:	429a      	cmp	r2, r3
 8014526:	d107      	bne.n	8014538 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8014528:	69ba      	ldr	r2, [r7, #24]
 801452a:	23c0      	movs	r3, #192	@ 0xc0
 801452c:	041b      	lsls	r3, r3, #16
 801452e:	401a      	ands	r2, r3
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8014534:	429a      	cmp	r2, r3
 8014536:	d001      	beq.n	801453c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8014538:	2301      	movs	r3, #1
 801453a:	e000      	b.n	801453e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 801453c:	2300      	movs	r3, #0
}
 801453e:	0018      	movs	r0, r3
 8014540:	46bd      	mov	sp, r7
 8014542:	b00a      	add	sp, #40	@ 0x28
 8014544:	bdb0      	pop	{r4, r5, r7, pc}
 8014546:	46c0      	nop			@ (mov r8, r8)
 8014548:	40021000 	.word	0x40021000
 801454c:	ff02ffff 	.word	0xff02ffff
 8014550:	feffffff 	.word	0xfeffffff

08014554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014554:	b5b0      	push	{r4, r5, r7, lr}
 8014556:	b084      	sub	sp, #16
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d101      	bne.n	8014568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014564:	2301      	movs	r3, #1
 8014566:	e128      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014568:	4b96      	ldr	r3, [pc, #600]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2201      	movs	r2, #1
 801456e:	4013      	ands	r3, r2
 8014570:	683a      	ldr	r2, [r7, #0]
 8014572:	429a      	cmp	r2, r3
 8014574:	d91e      	bls.n	80145b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014576:	4b93      	ldr	r3, [pc, #588]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	2201      	movs	r2, #1
 801457c:	4393      	bics	r3, r2
 801457e:	0019      	movs	r1, r3
 8014580:	4b90      	ldr	r3, [pc, #576]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 8014582:	683a      	ldr	r2, [r7, #0]
 8014584:	430a      	orrs	r2, r1
 8014586:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014588:	f7f9 fb06 	bl	800db98 <HAL_GetTick>
 801458c:	0003      	movs	r3, r0
 801458e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014590:	e009      	b.n	80145a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014592:	f7f9 fb01 	bl	800db98 <HAL_GetTick>
 8014596:	0002      	movs	r2, r0
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	1ad3      	subs	r3, r2, r3
 801459c:	4a8a      	ldr	r2, [pc, #552]	@ (80147c8 <HAL_RCC_ClockConfig+0x274>)
 801459e:	4293      	cmp	r3, r2
 80145a0:	d901      	bls.n	80145a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80145a2:	2303      	movs	r3, #3
 80145a4:	e109      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80145a6:	4b87      	ldr	r3, [pc, #540]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2201      	movs	r2, #1
 80145ac:	4013      	ands	r3, r2
 80145ae:	683a      	ldr	r2, [r7, #0]
 80145b0:	429a      	cmp	r2, r3
 80145b2:	d1ee      	bne.n	8014592 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	2202      	movs	r2, #2
 80145ba:	4013      	ands	r3, r2
 80145bc:	d009      	beq.n	80145d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80145be:	4b83      	ldr	r3, [pc, #524]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 80145c0:	68db      	ldr	r3, [r3, #12]
 80145c2:	22f0      	movs	r2, #240	@ 0xf0
 80145c4:	4393      	bics	r3, r2
 80145c6:	0019      	movs	r1, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	689a      	ldr	r2, [r3, #8]
 80145cc:	4b7f      	ldr	r3, [pc, #508]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 80145ce:	430a      	orrs	r2, r1
 80145d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	2201      	movs	r2, #1
 80145d8:	4013      	ands	r3, r2
 80145da:	d100      	bne.n	80145de <HAL_RCC_ClockConfig+0x8a>
 80145dc:	e089      	b.n	80146f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	2b02      	cmp	r3, #2
 80145e4:	d107      	bne.n	80145f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80145e6:	4b79      	ldr	r3, [pc, #484]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 80145e8:	681a      	ldr	r2, [r3, #0]
 80145ea:	2380      	movs	r3, #128	@ 0x80
 80145ec:	029b      	lsls	r3, r3, #10
 80145ee:	4013      	ands	r3, r2
 80145f0:	d120      	bne.n	8014634 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80145f2:	2301      	movs	r3, #1
 80145f4:	e0e1      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	685b      	ldr	r3, [r3, #4]
 80145fa:	2b03      	cmp	r3, #3
 80145fc:	d107      	bne.n	801460e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80145fe:	4b73      	ldr	r3, [pc, #460]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	2380      	movs	r3, #128	@ 0x80
 8014604:	049b      	lsls	r3, r3, #18
 8014606:	4013      	ands	r3, r2
 8014608:	d114      	bne.n	8014634 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 801460a:	2301      	movs	r3, #1
 801460c:	e0d5      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	2b01      	cmp	r3, #1
 8014614:	d106      	bne.n	8014624 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014616:	4b6d      	ldr	r3, [pc, #436]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	2204      	movs	r2, #4
 801461c:	4013      	ands	r3, r2
 801461e:	d109      	bne.n	8014634 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014620:	2301      	movs	r3, #1
 8014622:	e0ca      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8014624:	4b69      	ldr	r3, [pc, #420]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014626:	681a      	ldr	r2, [r3, #0]
 8014628:	2380      	movs	r3, #128	@ 0x80
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	4013      	ands	r3, r2
 801462e:	d101      	bne.n	8014634 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8014630:	2301      	movs	r3, #1
 8014632:	e0c2      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8014634:	4b65      	ldr	r3, [pc, #404]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	2203      	movs	r2, #3
 801463a:	4393      	bics	r3, r2
 801463c:	0019      	movs	r1, r3
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	685a      	ldr	r2, [r3, #4]
 8014642:	4b62      	ldr	r3, [pc, #392]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014644:	430a      	orrs	r2, r1
 8014646:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8014648:	f7f9 faa6 	bl	800db98 <HAL_GetTick>
 801464c:	0003      	movs	r3, r0
 801464e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	685b      	ldr	r3, [r3, #4]
 8014654:	2b02      	cmp	r3, #2
 8014656:	d111      	bne.n	801467c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8014658:	e009      	b.n	801466e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801465a:	f7f9 fa9d 	bl	800db98 <HAL_GetTick>
 801465e:	0002      	movs	r2, r0
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	1ad3      	subs	r3, r2, r3
 8014664:	4a58      	ldr	r2, [pc, #352]	@ (80147c8 <HAL_RCC_ClockConfig+0x274>)
 8014666:	4293      	cmp	r3, r2
 8014668:	d901      	bls.n	801466e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 801466a:	2303      	movs	r3, #3
 801466c:	e0a5      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801466e:	4b57      	ldr	r3, [pc, #348]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014670:	68db      	ldr	r3, [r3, #12]
 8014672:	220c      	movs	r2, #12
 8014674:	4013      	ands	r3, r2
 8014676:	2b08      	cmp	r3, #8
 8014678:	d1ef      	bne.n	801465a <HAL_RCC_ClockConfig+0x106>
 801467a:	e03a      	b.n	80146f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	2b03      	cmp	r3, #3
 8014682:	d111      	bne.n	80146a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8014684:	e009      	b.n	801469a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8014686:	f7f9 fa87 	bl	800db98 <HAL_GetTick>
 801468a:	0002      	movs	r2, r0
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	1ad3      	subs	r3, r2, r3
 8014690:	4a4d      	ldr	r2, [pc, #308]	@ (80147c8 <HAL_RCC_ClockConfig+0x274>)
 8014692:	4293      	cmp	r3, r2
 8014694:	d901      	bls.n	801469a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8014696:	2303      	movs	r3, #3
 8014698:	e08f      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801469a:	4b4c      	ldr	r3, [pc, #304]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	220c      	movs	r2, #12
 80146a0:	4013      	ands	r3, r2
 80146a2:	2b0c      	cmp	r3, #12
 80146a4:	d1ef      	bne.n	8014686 <HAL_RCC_ClockConfig+0x132>
 80146a6:	e024      	b.n	80146f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	d11b      	bne.n	80146e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80146b0:	e009      	b.n	80146c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80146b2:	f7f9 fa71 	bl	800db98 <HAL_GetTick>
 80146b6:	0002      	movs	r2, r0
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	4a42      	ldr	r2, [pc, #264]	@ (80147c8 <HAL_RCC_ClockConfig+0x274>)
 80146be:	4293      	cmp	r3, r2
 80146c0:	d901      	bls.n	80146c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80146c2:	2303      	movs	r3, #3
 80146c4:	e079      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80146c6:	4b41      	ldr	r3, [pc, #260]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 80146c8:	68db      	ldr	r3, [r3, #12]
 80146ca:	220c      	movs	r2, #12
 80146cc:	4013      	ands	r3, r2
 80146ce:	2b04      	cmp	r3, #4
 80146d0:	d1ef      	bne.n	80146b2 <HAL_RCC_ClockConfig+0x15e>
 80146d2:	e00e      	b.n	80146f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80146d4:	f7f9 fa60 	bl	800db98 <HAL_GetTick>
 80146d8:	0002      	movs	r2, r0
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	1ad3      	subs	r3, r2, r3
 80146de:	4a3a      	ldr	r2, [pc, #232]	@ (80147c8 <HAL_RCC_ClockConfig+0x274>)
 80146e0:	4293      	cmp	r3, r2
 80146e2:	d901      	bls.n	80146e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80146e4:	2303      	movs	r3, #3
 80146e6:	e068      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80146e8:	4b38      	ldr	r3, [pc, #224]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 80146ea:	68db      	ldr	r3, [r3, #12]
 80146ec:	220c      	movs	r2, #12
 80146ee:	4013      	ands	r3, r2
 80146f0:	d1f0      	bne.n	80146d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80146f2:	4b34      	ldr	r3, [pc, #208]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2201      	movs	r2, #1
 80146f8:	4013      	ands	r3, r2
 80146fa:	683a      	ldr	r2, [r7, #0]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d21e      	bcs.n	801473e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014700:	4b30      	ldr	r3, [pc, #192]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	2201      	movs	r2, #1
 8014706:	4393      	bics	r3, r2
 8014708:	0019      	movs	r1, r3
 801470a:	4b2e      	ldr	r3, [pc, #184]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 801470c:	683a      	ldr	r2, [r7, #0]
 801470e:	430a      	orrs	r2, r1
 8014710:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8014712:	f7f9 fa41 	bl	800db98 <HAL_GetTick>
 8014716:	0003      	movs	r3, r0
 8014718:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801471a:	e009      	b.n	8014730 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801471c:	f7f9 fa3c 	bl	800db98 <HAL_GetTick>
 8014720:	0002      	movs	r2, r0
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	1ad3      	subs	r3, r2, r3
 8014726:	4a28      	ldr	r2, [pc, #160]	@ (80147c8 <HAL_RCC_ClockConfig+0x274>)
 8014728:	4293      	cmp	r3, r2
 801472a:	d901      	bls.n	8014730 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 801472c:	2303      	movs	r3, #3
 801472e:	e044      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8014730:	4b24      	ldr	r3, [pc, #144]	@ (80147c4 <HAL_RCC_ClockConfig+0x270>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	2201      	movs	r2, #1
 8014736:	4013      	ands	r3, r2
 8014738:	683a      	ldr	r2, [r7, #0]
 801473a:	429a      	cmp	r2, r3
 801473c:	d1ee      	bne.n	801471c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	2204      	movs	r2, #4
 8014744:	4013      	ands	r3, r2
 8014746:	d009      	beq.n	801475c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8014748:	4b20      	ldr	r3, [pc, #128]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	4a20      	ldr	r2, [pc, #128]	@ (80147d0 <HAL_RCC_ClockConfig+0x27c>)
 801474e:	4013      	ands	r3, r2
 8014750:	0019      	movs	r1, r3
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	68da      	ldr	r2, [r3, #12]
 8014756:	4b1d      	ldr	r3, [pc, #116]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014758:	430a      	orrs	r2, r1
 801475a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2208      	movs	r2, #8
 8014762:	4013      	ands	r3, r2
 8014764:	d00a      	beq.n	801477c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8014766:	4b19      	ldr	r3, [pc, #100]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014768:	68db      	ldr	r3, [r3, #12]
 801476a:	4a1a      	ldr	r2, [pc, #104]	@ (80147d4 <HAL_RCC_ClockConfig+0x280>)
 801476c:	4013      	ands	r3, r2
 801476e:	0019      	movs	r1, r3
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	691b      	ldr	r3, [r3, #16]
 8014774:	00da      	lsls	r2, r3, #3
 8014776:	4b15      	ldr	r3, [pc, #84]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014778:	430a      	orrs	r2, r1
 801477a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801477c:	f000 f832 	bl	80147e4 <HAL_RCC_GetSysClockFreq>
 8014780:	0001      	movs	r1, r0
 8014782:	4b12      	ldr	r3, [pc, #72]	@ (80147cc <HAL_RCC_ClockConfig+0x278>)
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	091b      	lsrs	r3, r3, #4
 8014788:	220f      	movs	r2, #15
 801478a:	4013      	ands	r3, r2
 801478c:	4a12      	ldr	r2, [pc, #72]	@ (80147d8 <HAL_RCC_ClockConfig+0x284>)
 801478e:	5cd3      	ldrb	r3, [r2, r3]
 8014790:	000a      	movs	r2, r1
 8014792:	40da      	lsrs	r2, r3
 8014794:	4b11      	ldr	r3, [pc, #68]	@ (80147dc <HAL_RCC_ClockConfig+0x288>)
 8014796:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8014798:	4b11      	ldr	r3, [pc, #68]	@ (80147e0 <HAL_RCC_ClockConfig+0x28c>)
 801479a:	681b      	ldr	r3, [r3, #0]
 801479c:	250b      	movs	r5, #11
 801479e:	197c      	adds	r4, r7, r5
 80147a0:	0018      	movs	r0, r3
 80147a2:	f7f9 f9b3 	bl	800db0c <HAL_InitTick>
 80147a6:	0003      	movs	r3, r0
 80147a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80147aa:	197b      	adds	r3, r7, r5
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d002      	beq.n	80147b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80147b2:	197b      	adds	r3, r7, r5
 80147b4:	781b      	ldrb	r3, [r3, #0]
 80147b6:	e000      	b.n	80147ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80147b8:	2300      	movs	r3, #0
}
 80147ba:	0018      	movs	r0, r3
 80147bc:	46bd      	mov	sp, r7
 80147be:	b004      	add	sp, #16
 80147c0:	bdb0      	pop	{r4, r5, r7, pc}
 80147c2:	46c0      	nop			@ (mov r8, r8)
 80147c4:	40022000 	.word	0x40022000
 80147c8:	00001388 	.word	0x00001388
 80147cc:	40021000 	.word	0x40021000
 80147d0:	fffff8ff 	.word	0xfffff8ff
 80147d4:	ffffc7ff 	.word	0xffffc7ff
 80147d8:	08023c8c 	.word	0x08023c8c
 80147dc:	200000c8 	.word	0x200000c8
 80147e0:	200000d8 	.word	0x200000d8

080147e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80147e4:	b5b0      	push	{r4, r5, r7, lr}
 80147e6:	b08e      	sub	sp, #56	@ 0x38
 80147e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80147ea:	4b4c      	ldr	r3, [pc, #304]	@ (801491c <HAL_RCC_GetSysClockFreq+0x138>)
 80147ec:	68db      	ldr	r3, [r3, #12]
 80147ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80147f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80147f2:	230c      	movs	r3, #12
 80147f4:	4013      	ands	r3, r2
 80147f6:	2b0c      	cmp	r3, #12
 80147f8:	d014      	beq.n	8014824 <HAL_RCC_GetSysClockFreq+0x40>
 80147fa:	d900      	bls.n	80147fe <HAL_RCC_GetSysClockFreq+0x1a>
 80147fc:	e07b      	b.n	80148f6 <HAL_RCC_GetSysClockFreq+0x112>
 80147fe:	2b04      	cmp	r3, #4
 8014800:	d002      	beq.n	8014808 <HAL_RCC_GetSysClockFreq+0x24>
 8014802:	2b08      	cmp	r3, #8
 8014804:	d00b      	beq.n	801481e <HAL_RCC_GetSysClockFreq+0x3a>
 8014806:	e076      	b.n	80148f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014808:	4b44      	ldr	r3, [pc, #272]	@ (801491c <HAL_RCC_GetSysClockFreq+0x138>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	2210      	movs	r2, #16
 801480e:	4013      	ands	r3, r2
 8014810:	d002      	beq.n	8014818 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8014812:	4b43      	ldr	r3, [pc, #268]	@ (8014920 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014814:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8014816:	e07c      	b.n	8014912 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8014818:	4b42      	ldr	r3, [pc, #264]	@ (8014924 <HAL_RCC_GetSysClockFreq+0x140>)
 801481a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 801481c:	e079      	b.n	8014912 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 801481e:	4b42      	ldr	r3, [pc, #264]	@ (8014928 <HAL_RCC_GetSysClockFreq+0x144>)
 8014820:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014822:	e076      	b.n	8014912 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8014824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014826:	0c9a      	lsrs	r2, r3, #18
 8014828:	230f      	movs	r3, #15
 801482a:	401a      	ands	r2, r3
 801482c:	4b3f      	ldr	r3, [pc, #252]	@ (801492c <HAL_RCC_GetSysClockFreq+0x148>)
 801482e:	5c9b      	ldrb	r3, [r3, r2]
 8014830:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8014832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014834:	0d9a      	lsrs	r2, r3, #22
 8014836:	2303      	movs	r3, #3
 8014838:	4013      	ands	r3, r2
 801483a:	3301      	adds	r3, #1
 801483c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801483e:	4b37      	ldr	r3, [pc, #220]	@ (801491c <HAL_RCC_GetSysClockFreq+0x138>)
 8014840:	68da      	ldr	r2, [r3, #12]
 8014842:	2380      	movs	r3, #128	@ 0x80
 8014844:	025b      	lsls	r3, r3, #9
 8014846:	4013      	ands	r3, r2
 8014848:	d01a      	beq.n	8014880 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 801484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801484c:	61bb      	str	r3, [r7, #24]
 801484e:	2300      	movs	r3, #0
 8014850:	61fb      	str	r3, [r7, #28]
 8014852:	4a35      	ldr	r2, [pc, #212]	@ (8014928 <HAL_RCC_GetSysClockFreq+0x144>)
 8014854:	2300      	movs	r3, #0
 8014856:	69b8      	ldr	r0, [r7, #24]
 8014858:	69f9      	ldr	r1, [r7, #28]
 801485a:	f7eb feb1 	bl	80005c0 <__aeabi_lmul>
 801485e:	0002      	movs	r2, r0
 8014860:	000b      	movs	r3, r1
 8014862:	0010      	movs	r0, r2
 8014864:	0019      	movs	r1, r3
 8014866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014868:	613b      	str	r3, [r7, #16]
 801486a:	2300      	movs	r3, #0
 801486c:	617b      	str	r3, [r7, #20]
 801486e:	693a      	ldr	r2, [r7, #16]
 8014870:	697b      	ldr	r3, [r7, #20]
 8014872:	f7eb fe85 	bl	8000580 <__aeabi_uldivmod>
 8014876:	0002      	movs	r2, r0
 8014878:	000b      	movs	r3, r1
 801487a:	0013      	movs	r3, r2
 801487c:	637b      	str	r3, [r7, #52]	@ 0x34
 801487e:	e037      	b.n	80148f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8014880:	4b26      	ldr	r3, [pc, #152]	@ (801491c <HAL_RCC_GetSysClockFreq+0x138>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	2210      	movs	r2, #16
 8014886:	4013      	ands	r3, r2
 8014888:	d01a      	beq.n	80148c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801488c:	60bb      	str	r3, [r7, #8]
 801488e:	2300      	movs	r3, #0
 8014890:	60fb      	str	r3, [r7, #12]
 8014892:	4a23      	ldr	r2, [pc, #140]	@ (8014920 <HAL_RCC_GetSysClockFreq+0x13c>)
 8014894:	2300      	movs	r3, #0
 8014896:	68b8      	ldr	r0, [r7, #8]
 8014898:	68f9      	ldr	r1, [r7, #12]
 801489a:	f7eb fe91 	bl	80005c0 <__aeabi_lmul>
 801489e:	0002      	movs	r2, r0
 80148a0:	000b      	movs	r3, r1
 80148a2:	0010      	movs	r0, r2
 80148a4:	0019      	movs	r1, r3
 80148a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148a8:	603b      	str	r3, [r7, #0]
 80148aa:	2300      	movs	r3, #0
 80148ac:	607b      	str	r3, [r7, #4]
 80148ae:	683a      	ldr	r2, [r7, #0]
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f7eb fe65 	bl	8000580 <__aeabi_uldivmod>
 80148b6:	0002      	movs	r2, r0
 80148b8:	000b      	movs	r3, r1
 80148ba:	0013      	movs	r3, r2
 80148bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80148be:	e017      	b.n	80148f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80148c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148c2:	0018      	movs	r0, r3
 80148c4:	2300      	movs	r3, #0
 80148c6:	0019      	movs	r1, r3
 80148c8:	4a16      	ldr	r2, [pc, #88]	@ (8014924 <HAL_RCC_GetSysClockFreq+0x140>)
 80148ca:	2300      	movs	r3, #0
 80148cc:	f7eb fe78 	bl	80005c0 <__aeabi_lmul>
 80148d0:	0002      	movs	r2, r0
 80148d2:	000b      	movs	r3, r1
 80148d4:	0010      	movs	r0, r2
 80148d6:	0019      	movs	r1, r3
 80148d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148da:	001c      	movs	r4, r3
 80148dc:	2300      	movs	r3, #0
 80148de:	001d      	movs	r5, r3
 80148e0:	0022      	movs	r2, r4
 80148e2:	002b      	movs	r3, r5
 80148e4:	f7eb fe4c 	bl	8000580 <__aeabi_uldivmod>
 80148e8:	0002      	movs	r2, r0
 80148ea:	000b      	movs	r3, r1
 80148ec:	0013      	movs	r3, r2
 80148ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80148f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80148f2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80148f4:	e00d      	b.n	8014912 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80148f6:	4b09      	ldr	r3, [pc, #36]	@ (801491c <HAL_RCC_GetSysClockFreq+0x138>)
 80148f8:	685b      	ldr	r3, [r3, #4]
 80148fa:	0b5b      	lsrs	r3, r3, #13
 80148fc:	2207      	movs	r2, #7
 80148fe:	4013      	ands	r3, r2
 8014900:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8014902:	6a3b      	ldr	r3, [r7, #32]
 8014904:	3301      	adds	r3, #1
 8014906:	2280      	movs	r2, #128	@ 0x80
 8014908:	0212      	lsls	r2, r2, #8
 801490a:	409a      	lsls	r2, r3
 801490c:	0013      	movs	r3, r2
 801490e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8014910:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8014912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8014914:	0018      	movs	r0, r3
 8014916:	46bd      	mov	sp, r7
 8014918:	b00e      	add	sp, #56	@ 0x38
 801491a:	bdb0      	pop	{r4, r5, r7, pc}
 801491c:	40021000 	.word	0x40021000
 8014920:	003d0900 	.word	0x003d0900
 8014924:	00f42400 	.word	0x00f42400
 8014928:	007a1200 	.word	0x007a1200
 801492c:	08023ca4 	.word	0x08023ca4

08014930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014934:	4b02      	ldr	r3, [pc, #8]	@ (8014940 <HAL_RCC_GetHCLKFreq+0x10>)
 8014936:	681b      	ldr	r3, [r3, #0]
}
 8014938:	0018      	movs	r0, r3
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
 801493e:	46c0      	nop			@ (mov r8, r8)
 8014940:	200000c8 	.word	0x200000c8

08014944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8014948:	f7ff fff2 	bl	8014930 <HAL_RCC_GetHCLKFreq>
 801494c:	0001      	movs	r1, r0
 801494e:	4b06      	ldr	r3, [pc, #24]	@ (8014968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014950:	68db      	ldr	r3, [r3, #12]
 8014952:	0a1b      	lsrs	r3, r3, #8
 8014954:	2207      	movs	r2, #7
 8014956:	4013      	ands	r3, r2
 8014958:	4a04      	ldr	r2, [pc, #16]	@ (801496c <HAL_RCC_GetPCLK1Freq+0x28>)
 801495a:	5cd3      	ldrb	r3, [r2, r3]
 801495c:	40d9      	lsrs	r1, r3
 801495e:	000b      	movs	r3, r1
}
 8014960:	0018      	movs	r0, r3
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	46c0      	nop			@ (mov r8, r8)
 8014968:	40021000 	.word	0x40021000
 801496c:	08023c9c 	.word	0x08023c9c

08014970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8014974:	f7ff ffdc 	bl	8014930 <HAL_RCC_GetHCLKFreq>
 8014978:	0001      	movs	r1, r0
 801497a:	4b06      	ldr	r3, [pc, #24]	@ (8014994 <HAL_RCC_GetPCLK2Freq+0x24>)
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	0adb      	lsrs	r3, r3, #11
 8014980:	2207      	movs	r2, #7
 8014982:	4013      	ands	r3, r2
 8014984:	4a04      	ldr	r2, [pc, #16]	@ (8014998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014986:	5cd3      	ldrb	r3, [r2, r3]
 8014988:	40d9      	lsrs	r1, r3
 801498a:	000b      	movs	r3, r1
}
 801498c:	0018      	movs	r0, r3
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	46c0      	nop			@ (mov r8, r8)
 8014994:	40021000 	.word	0x40021000
 8014998:	08023c9c 	.word	0x08023c9c

0801499c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801499c:	b580      	push	{r7, lr}
 801499e:	b086      	sub	sp, #24
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80149a4:	2017      	movs	r0, #23
 80149a6:	183b      	adds	r3, r7, r0
 80149a8:	2200      	movs	r2, #0
 80149aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2220      	movs	r2, #32
 80149b2:	4013      	ands	r3, r2
 80149b4:	d100      	bne.n	80149b8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80149b6:	e0c7      	b.n	8014b48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80149b8:	4b9b      	ldr	r3, [pc, #620]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80149bc:	2380      	movs	r3, #128	@ 0x80
 80149be:	055b      	lsls	r3, r3, #21
 80149c0:	4013      	ands	r3, r2
 80149c2:	d109      	bne.n	80149d8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80149c4:	4b98      	ldr	r3, [pc, #608]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80149c8:	4b97      	ldr	r3, [pc, #604]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80149ca:	2180      	movs	r1, #128	@ 0x80
 80149cc:	0549      	lsls	r1, r1, #21
 80149ce:	430a      	orrs	r2, r1
 80149d0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80149d2:	183b      	adds	r3, r7, r0
 80149d4:	2201      	movs	r2, #1
 80149d6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149d8:	4b94      	ldr	r3, [pc, #592]	@ (8014c2c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80149da:	681a      	ldr	r2, [r3, #0]
 80149dc:	2380      	movs	r3, #128	@ 0x80
 80149de:	005b      	lsls	r3, r3, #1
 80149e0:	4013      	ands	r3, r2
 80149e2:	d11a      	bne.n	8014a1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80149e4:	4b91      	ldr	r3, [pc, #580]	@ (8014c2c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80149e6:	681a      	ldr	r2, [r3, #0]
 80149e8:	4b90      	ldr	r3, [pc, #576]	@ (8014c2c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80149ea:	2180      	movs	r1, #128	@ 0x80
 80149ec:	0049      	lsls	r1, r1, #1
 80149ee:	430a      	orrs	r2, r1
 80149f0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80149f2:	f7f9 f8d1 	bl	800db98 <HAL_GetTick>
 80149f6:	0003      	movs	r3, r0
 80149f8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80149fa:	e008      	b.n	8014a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80149fc:	f7f9 f8cc 	bl	800db98 <HAL_GetTick>
 8014a00:	0002      	movs	r2, r0
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	1ad3      	subs	r3, r2, r3
 8014a06:	2b64      	cmp	r3, #100	@ 0x64
 8014a08:	d901      	bls.n	8014a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8014a0a:	2303      	movs	r3, #3
 8014a0c:	e107      	b.n	8014c1e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8014a0e:	4b87      	ldr	r3, [pc, #540]	@ (8014c2c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8014a10:	681a      	ldr	r2, [r3, #0]
 8014a12:	2380      	movs	r3, #128	@ 0x80
 8014a14:	005b      	lsls	r3, r3, #1
 8014a16:	4013      	ands	r3, r2
 8014a18:	d0f0      	beq.n	80149fc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8014a1a:	4b83      	ldr	r3, [pc, #524]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a1c:	681a      	ldr	r2, [r3, #0]
 8014a1e:	23c0      	movs	r3, #192	@ 0xc0
 8014a20:	039b      	lsls	r3, r3, #14
 8014a22:	4013      	ands	r3, r2
 8014a24:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	685a      	ldr	r2, [r3, #4]
 8014a2a:	23c0      	movs	r3, #192	@ 0xc0
 8014a2c:	039b      	lsls	r3, r3, #14
 8014a2e:	4013      	ands	r3, r2
 8014a30:	68fa      	ldr	r2, [r7, #12]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	d013      	beq.n	8014a5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	685a      	ldr	r2, [r3, #4]
 8014a3a:	23c0      	movs	r3, #192	@ 0xc0
 8014a3c:	029b      	lsls	r3, r3, #10
 8014a3e:	401a      	ands	r2, r3
 8014a40:	23c0      	movs	r3, #192	@ 0xc0
 8014a42:	029b      	lsls	r3, r3, #10
 8014a44:	429a      	cmp	r2, r3
 8014a46:	d10a      	bne.n	8014a5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014a48:	4b77      	ldr	r3, [pc, #476]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a4a:	681a      	ldr	r2, [r3, #0]
 8014a4c:	2380      	movs	r3, #128	@ 0x80
 8014a4e:	029b      	lsls	r3, r3, #10
 8014a50:	401a      	ands	r2, r3
 8014a52:	2380      	movs	r3, #128	@ 0x80
 8014a54:	029b      	lsls	r3, r3, #10
 8014a56:	429a      	cmp	r2, r3
 8014a58:	d101      	bne.n	8014a5e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8014a5a:	2301      	movs	r3, #1
 8014a5c:	e0df      	b.n	8014c1e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8014a5e:	4b72      	ldr	r3, [pc, #456]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a62:	23c0      	movs	r3, #192	@ 0xc0
 8014a64:	029b      	lsls	r3, r3, #10
 8014a66:	4013      	ands	r3, r2
 8014a68:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d03b      	beq.n	8014ae8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	685a      	ldr	r2, [r3, #4]
 8014a74:	23c0      	movs	r3, #192	@ 0xc0
 8014a76:	029b      	lsls	r3, r3, #10
 8014a78:	4013      	ands	r3, r2
 8014a7a:	68fa      	ldr	r2, [r7, #12]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d033      	beq.n	8014ae8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	2220      	movs	r2, #32
 8014a86:	4013      	ands	r3, r2
 8014a88:	d02e      	beq.n	8014ae8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8014a8a:	4b67      	ldr	r3, [pc, #412]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a8e:	4a68      	ldr	r2, [pc, #416]	@ (8014c30 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014a90:	4013      	ands	r3, r2
 8014a92:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8014a94:	4b64      	ldr	r3, [pc, #400]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a98:	4b63      	ldr	r3, [pc, #396]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014a9a:	2180      	movs	r1, #128	@ 0x80
 8014a9c:	0309      	lsls	r1, r1, #12
 8014a9e:	430a      	orrs	r2, r1
 8014aa0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8014aa2:	4b61      	ldr	r3, [pc, #388]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014aa4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014aa6:	4b60      	ldr	r3, [pc, #384]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014aa8:	4962      	ldr	r1, [pc, #392]	@ (8014c34 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8014aaa:	400a      	ands	r2, r1
 8014aac:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8014aae:	4b5e      	ldr	r3, [pc, #376]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ab0:	68fa      	ldr	r2, [r7, #12]
 8014ab2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8014ab4:	68fa      	ldr	r2, [r7, #12]
 8014ab6:	2380      	movs	r3, #128	@ 0x80
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	4013      	ands	r3, r2
 8014abc:	d014      	beq.n	8014ae8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8014abe:	f7f9 f86b 	bl	800db98 <HAL_GetTick>
 8014ac2:	0003      	movs	r3, r0
 8014ac4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014ac6:	e009      	b.n	8014adc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014ac8:	f7f9 f866 	bl	800db98 <HAL_GetTick>
 8014acc:	0002      	movs	r2, r0
 8014ace:	693b      	ldr	r3, [r7, #16]
 8014ad0:	1ad3      	subs	r3, r2, r3
 8014ad2:	4a59      	ldr	r2, [pc, #356]	@ (8014c38 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	d901      	bls.n	8014adc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8014ad8:	2303      	movs	r3, #3
 8014ada:	e0a0      	b.n	8014c1e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014adc:	4b52      	ldr	r3, [pc, #328]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014ade:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014ae0:	2380      	movs	r3, #128	@ 0x80
 8014ae2:	009b      	lsls	r3, r3, #2
 8014ae4:	4013      	ands	r3, r2
 8014ae6:	d0ef      	beq.n	8014ac8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2220      	movs	r2, #32
 8014aee:	4013      	ands	r3, r2
 8014af0:	d01f      	beq.n	8014b32 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	685a      	ldr	r2, [r3, #4]
 8014af6:	23c0      	movs	r3, #192	@ 0xc0
 8014af8:	029b      	lsls	r3, r3, #10
 8014afa:	401a      	ands	r2, r3
 8014afc:	23c0      	movs	r3, #192	@ 0xc0
 8014afe:	029b      	lsls	r3, r3, #10
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d10c      	bne.n	8014b1e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8014b04:	4b48      	ldr	r3, [pc, #288]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	4a4c      	ldr	r2, [pc, #304]	@ (8014c3c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8014b0a:	4013      	ands	r3, r2
 8014b0c:	0019      	movs	r1, r3
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	685a      	ldr	r2, [r3, #4]
 8014b12:	23c0      	movs	r3, #192	@ 0xc0
 8014b14:	039b      	lsls	r3, r3, #14
 8014b16:	401a      	ands	r2, r3
 8014b18:	4b43      	ldr	r3, [pc, #268]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b1a:	430a      	orrs	r2, r1
 8014b1c:	601a      	str	r2, [r3, #0]
 8014b1e:	4b42      	ldr	r3, [pc, #264]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	685a      	ldr	r2, [r3, #4]
 8014b26:	23c0      	movs	r3, #192	@ 0xc0
 8014b28:	029b      	lsls	r3, r3, #10
 8014b2a:	401a      	ands	r2, r3
 8014b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b2e:	430a      	orrs	r2, r1
 8014b30:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8014b32:	2317      	movs	r3, #23
 8014b34:	18fb      	adds	r3, r7, r3
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	2b01      	cmp	r3, #1
 8014b3a:	d105      	bne.n	8014b48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014b3c:	4b3a      	ldr	r3, [pc, #232]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014b40:	4b39      	ldr	r3, [pc, #228]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b42:	493f      	ldr	r1, [pc, #252]	@ (8014c40 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8014b44:	400a      	ands	r2, r1
 8014b46:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	4013      	ands	r3, r2
 8014b50:	d009      	beq.n	8014b66 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014b52:	4b35      	ldr	r3, [pc, #212]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b56:	2203      	movs	r2, #3
 8014b58:	4393      	bics	r3, r2
 8014b5a:	0019      	movs	r1, r3
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	689a      	ldr	r2, [r3, #8]
 8014b60:	4b31      	ldr	r3, [pc, #196]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b62:	430a      	orrs	r2, r1
 8014b64:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	2202      	movs	r2, #2
 8014b6c:	4013      	ands	r3, r2
 8014b6e:	d009      	beq.n	8014b84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014b70:	4b2d      	ldr	r3, [pc, #180]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b74:	220c      	movs	r2, #12
 8014b76:	4393      	bics	r3, r2
 8014b78:	0019      	movs	r1, r3
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	68da      	ldr	r2, [r3, #12]
 8014b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b80:	430a      	orrs	r2, r1
 8014b82:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2204      	movs	r2, #4
 8014b8a:	4013      	ands	r3, r2
 8014b8c:	d009      	beq.n	8014ba2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014b8e:	4b26      	ldr	r3, [pc, #152]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014b92:	4a2c      	ldr	r2, [pc, #176]	@ (8014c44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8014b94:	4013      	ands	r3, r2
 8014b96:	0019      	movs	r1, r3
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	691a      	ldr	r2, [r3, #16]
 8014b9c:	4b22      	ldr	r3, [pc, #136]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014b9e:	430a      	orrs	r2, r1
 8014ba0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	2208      	movs	r2, #8
 8014ba8:	4013      	ands	r3, r2
 8014baa:	d009      	beq.n	8014bc0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8014bac:	4b1e      	ldr	r3, [pc, #120]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014bb0:	4a25      	ldr	r2, [pc, #148]	@ (8014c48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8014bb2:	4013      	ands	r3, r2
 8014bb4:	0019      	movs	r1, r3
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	695a      	ldr	r2, [r3, #20]
 8014bba:	4b1b      	ldr	r3, [pc, #108]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014bbc:	430a      	orrs	r2, r1
 8014bbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	681a      	ldr	r2, [r3, #0]
 8014bc4:	2380      	movs	r3, #128	@ 0x80
 8014bc6:	005b      	lsls	r3, r3, #1
 8014bc8:	4013      	ands	r3, r2
 8014bca:	d009      	beq.n	8014be0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8014bcc:	4b16      	ldr	r3, [pc, #88]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014bd0:	4a17      	ldr	r2, [pc, #92]	@ (8014c30 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8014bd2:	4013      	ands	r3, r2
 8014bd4:	0019      	movs	r1, r3
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	699a      	ldr	r2, [r3, #24]
 8014bda:	4b13      	ldr	r3, [pc, #76]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014bdc:	430a      	orrs	r2, r1
 8014bde:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	2240      	movs	r2, #64	@ 0x40
 8014be6:	4013      	ands	r3, r2
 8014be8:	d009      	beq.n	8014bfe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8014bea:	4b0f      	ldr	r3, [pc, #60]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014bee:	4a17      	ldr	r2, [pc, #92]	@ (8014c4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8014bf0:	4013      	ands	r3, r2
 8014bf2:	0019      	movs	r1, r3
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6a1a      	ldr	r2, [r3, #32]
 8014bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014bfa:	430a      	orrs	r2, r1
 8014bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2280      	movs	r2, #128	@ 0x80
 8014c04:	4013      	ands	r3, r2
 8014c06:	d009      	beq.n	8014c1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8014c08:	4b07      	ldr	r3, [pc, #28]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014c0c:	4a10      	ldr	r2, [pc, #64]	@ (8014c50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8014c0e:	4013      	ands	r3, r2
 8014c10:	0019      	movs	r1, r3
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	69da      	ldr	r2, [r3, #28]
 8014c16:	4b04      	ldr	r3, [pc, #16]	@ (8014c28 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8014c18:	430a      	orrs	r2, r1
 8014c1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	0018      	movs	r0, r3
 8014c20:	46bd      	mov	sp, r7
 8014c22:	b006      	add	sp, #24
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	46c0      	nop			@ (mov r8, r8)
 8014c28:	40021000 	.word	0x40021000
 8014c2c:	40007000 	.word	0x40007000
 8014c30:	fffcffff 	.word	0xfffcffff
 8014c34:	fff7ffff 	.word	0xfff7ffff
 8014c38:	00001388 	.word	0x00001388
 8014c3c:	ffcfffff 	.word	0xffcfffff
 8014c40:	efffffff 	.word	0xefffffff
 8014c44:	fffff3ff 	.word	0xfffff3ff
 8014c48:	ffffcfff 	.word	0xffffcfff
 8014c4c:	fbffffff 	.word	0xfbffffff
 8014c50:	fff3ffff 	.word	0xfff3ffff

08014c54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8014c54:	b5b0      	push	{r4, r5, r7, lr}
 8014c56:	b084      	sub	sp, #16
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8014c5c:	230f      	movs	r3, #15
 8014c5e:	18fb      	adds	r3, r7, r3
 8014c60:	2201      	movs	r2, #1
 8014c62:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d101      	bne.n	8014c6e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	e088      	b.n	8014d80 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2221      	movs	r2, #33	@ 0x21
 8014c72:	5c9b      	ldrb	r3, [r3, r2]
 8014c74:	b2db      	uxtb	r3, r3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d107      	bne.n	8014c8a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	2220      	movs	r2, #32
 8014c7e:	2100      	movs	r1, #0
 8014c80:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	0018      	movs	r0, r3
 8014c86:	f7f3 fd97 	bl	80087b8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	2221      	movs	r2, #33	@ 0x21
 8014c8e:	2102      	movs	r1, #2
 8014c90:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	68db      	ldr	r3, [r3, #12]
 8014c98:	2210      	movs	r2, #16
 8014c9a:	4013      	ands	r3, r2
 8014c9c:	2b10      	cmp	r3, #16
 8014c9e:	d05f      	beq.n	8014d60 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	22ca      	movs	r2, #202	@ 0xca
 8014ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	2253      	movs	r2, #83	@ 0x53
 8014cae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8014cb0:	250f      	movs	r5, #15
 8014cb2:	197c      	adds	r4, r7, r5
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	0018      	movs	r0, r3
 8014cb8:	f000 fa7c 	bl	80151b4 <RTC_EnterInitMode>
 8014cbc:	0003      	movs	r3, r0
 8014cbe:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8014cc0:	0028      	movs	r0, r5
 8014cc2:	183b      	adds	r3, r7, r0
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d12c      	bne.n	8014d24 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	689a      	ldr	r2, [r3, #8]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	492c      	ldr	r1, [pc, #176]	@ (8014d88 <HAL_RTC_Init+0x134>)
 8014cd6:	400a      	ands	r2, r1
 8014cd8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	6899      	ldr	r1, [r3, #8]
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	685a      	ldr	r2, [r3, #4]
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	691b      	ldr	r3, [r3, #16]
 8014ce8:	431a      	orrs	r2, r3
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	699b      	ldr	r3, [r3, #24]
 8014cee:	431a      	orrs	r2, r3
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	430a      	orrs	r2, r1
 8014cf6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	687a      	ldr	r2, [r7, #4]
 8014cfe:	68d2      	ldr	r2, [r2, #12]
 8014d00:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	6919      	ldr	r1, [r3, #16]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	689b      	ldr	r3, [r3, #8]
 8014d0c:	041a      	lsls	r2, r3, #16
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	430a      	orrs	r2, r1
 8014d14:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8014d16:	183c      	adds	r4, r7, r0
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	0018      	movs	r0, r3
 8014d1c:	f000 fa8e 	bl	801523c <RTC_ExitInitMode>
 8014d20:	0003      	movs	r3, r0
 8014d22:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8014d24:	230f      	movs	r3, #15
 8014d26:	18fb      	adds	r3, r7, r3
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d113      	bne.n	8014d56 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	2103      	movs	r1, #3
 8014d3a:	438a      	bics	r2, r1
 8014d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	69da      	ldr	r2, [r3, #28]
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	695b      	ldr	r3, [r3, #20]
 8014d4c:	431a      	orrs	r2, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	430a      	orrs	r2, r1
 8014d54:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	22ff      	movs	r2, #255	@ 0xff
 8014d5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8014d5e:	e003      	b.n	8014d68 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8014d60:	230f      	movs	r3, #15
 8014d62:	18fb      	adds	r3, r7, r3
 8014d64:	2200      	movs	r2, #0
 8014d66:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8014d68:	230f      	movs	r3, #15
 8014d6a:	18fb      	adds	r3, r7, r3
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d103      	bne.n	8014d7a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	2221      	movs	r2, #33	@ 0x21
 8014d76:	2101      	movs	r1, #1
 8014d78:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8014d7a:	230f      	movs	r3, #15
 8014d7c:	18fb      	adds	r3, r7, r3
 8014d7e:	781b      	ldrb	r3, [r3, #0]
}
 8014d80:	0018      	movs	r0, r3
 8014d82:	46bd      	mov	sp, r7
 8014d84:	b004      	add	sp, #16
 8014d86:	bdb0      	pop	{r4, r5, r7, pc}
 8014d88:	ff8fffbf 	.word	0xff8fffbf

08014d8c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014d8c:	b5b0      	push	{r4, r5, r7, lr}
 8014d8e:	b086      	sub	sp, #24
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2220      	movs	r2, #32
 8014da0:	5c9b      	ldrb	r3, [r3, r2]
 8014da2:	2b01      	cmp	r3, #1
 8014da4:	d101      	bne.n	8014daa <HAL_RTC_SetTime+0x1e>
 8014da6:	2302      	movs	r3, #2
 8014da8:	e092      	b.n	8014ed0 <HAL_RTC_SetTime+0x144>
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	2220      	movs	r2, #32
 8014dae:	2101      	movs	r1, #1
 8014db0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2221      	movs	r2, #33	@ 0x21
 8014db6:	2102      	movs	r1, #2
 8014db8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d125      	bne.n	8014e0c <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	2240      	movs	r2, #64	@ 0x40
 8014dc8:	4013      	ands	r3, r2
 8014dca:	d102      	bne.n	8014dd2 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	0018      	movs	r0, r3
 8014dd8:	f000 fa5a 	bl	8015290 <RTC_ByteToBcd2>
 8014ddc:	0003      	movs	r3, r0
 8014dde:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	785b      	ldrb	r3, [r3, #1]
 8014de4:	0018      	movs	r0, r3
 8014de6:	f000 fa53 	bl	8015290 <RTC_ByteToBcd2>
 8014dea:	0003      	movs	r3, r0
 8014dec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014dee:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	789b      	ldrb	r3, [r3, #2]
 8014df4:	0018      	movs	r0, r3
 8014df6:	f000 fa4b 	bl	8015290 <RTC_ByteToBcd2>
 8014dfa:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8014dfc:	0022      	movs	r2, r4
 8014dfe:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	78db      	ldrb	r3, [r3, #3]
 8014e04:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8014e06:	4313      	orrs	r3, r2
 8014e08:	617b      	str	r3, [r7, #20]
 8014e0a:	e017      	b.n	8014e3c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	689b      	ldr	r3, [r3, #8]
 8014e12:	2240      	movs	r2, #64	@ 0x40
 8014e14:	4013      	ands	r3, r2
 8014e16:	d102      	bne.n	8014e1e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014e1e:	68bb      	ldr	r3, [r7, #8]
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	785b      	ldrb	r3, [r3, #1]
 8014e28:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014e2a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8014e2c:	68ba      	ldr	r2, [r7, #8]
 8014e2e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8014e30:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8014e32:	68bb      	ldr	r3, [r7, #8]
 8014e34:	78db      	ldrb	r3, [r3, #3]
 8014e36:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8014e38:	4313      	orrs	r3, r2
 8014e3a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	22ca      	movs	r2, #202	@ 0xca
 8014e42:	625a      	str	r2, [r3, #36]	@ 0x24
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	2253      	movs	r2, #83	@ 0x53
 8014e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8014e4c:	2513      	movs	r5, #19
 8014e4e:	197c      	adds	r4, r7, r5
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	0018      	movs	r0, r3
 8014e54:	f000 f9ae 	bl	80151b4 <RTC_EnterInitMode>
 8014e58:	0003      	movs	r3, r0
 8014e5a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8014e5c:	0028      	movs	r0, r5
 8014e5e:	183b      	adds	r3, r7, r0
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d120      	bne.n	8014ea8 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	697a      	ldr	r2, [r7, #20]
 8014e6c:	491a      	ldr	r1, [pc, #104]	@ (8014ed8 <HAL_RTC_SetTime+0x14c>)
 8014e6e:	400a      	ands	r2, r1
 8014e70:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	689a      	ldr	r2, [r3, #8]
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	4917      	ldr	r1, [pc, #92]	@ (8014edc <HAL_RTC_SetTime+0x150>)
 8014e7e:	400a      	ands	r2, r1
 8014e80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8014e82:	68fb      	ldr	r3, [r7, #12]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	6899      	ldr	r1, [r3, #8]
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	68da      	ldr	r2, [r3, #12]
 8014e8c:	68bb      	ldr	r3, [r7, #8]
 8014e8e:	691b      	ldr	r3, [r3, #16]
 8014e90:	431a      	orrs	r2, r3
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	430a      	orrs	r2, r1
 8014e98:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8014e9a:	183c      	adds	r4, r7, r0
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	0018      	movs	r0, r3
 8014ea0:	f000 f9cc 	bl	801523c <RTC_ExitInitMode>
 8014ea4:	0003      	movs	r3, r0
 8014ea6:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8014ea8:	2313      	movs	r3, #19
 8014eaa:	18fb      	adds	r3, r7, r3
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d103      	bne.n	8014eba <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	2221      	movs	r2, #33	@ 0x21
 8014eb6:	2101      	movs	r1, #1
 8014eb8:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	22ff      	movs	r2, #255	@ 0xff
 8014ec0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	2220      	movs	r2, #32
 8014ec6:	2100      	movs	r1, #0
 8014ec8:	5499      	strb	r1, [r3, r2]

  return status;
 8014eca:	2313      	movs	r3, #19
 8014ecc:	18fb      	adds	r3, r7, r3
 8014ece:	781b      	ldrb	r3, [r3, #0]
}
 8014ed0:	0018      	movs	r0, r3
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	b006      	add	sp, #24
 8014ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8014ed8:	007f7f7f 	.word	0x007f7f7f
 8014edc:	fffbffff 	.word	0xfffbffff

08014ee0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b086      	sub	sp, #24
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8014eec:	2300      	movs	r3, #0
 8014eee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	691b      	ldr	r3, [r3, #16]
 8014f00:	045b      	lsls	r3, r3, #17
 8014f02:	0c5a      	lsrs	r2, r3, #17
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	4a22      	ldr	r2, [pc, #136]	@ (8014f98 <HAL_RTC_GetTime+0xb8>)
 8014f10:	4013      	ands	r3, r2
 8014f12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	0c1b      	lsrs	r3, r3, #16
 8014f18:	b2db      	uxtb	r3, r3
 8014f1a:	223f      	movs	r2, #63	@ 0x3f
 8014f1c:	4013      	ands	r3, r2
 8014f1e:	b2da      	uxtb	r2, r3
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	0a1b      	lsrs	r3, r3, #8
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	227f      	movs	r2, #127	@ 0x7f
 8014f2c:	4013      	ands	r3, r2
 8014f2e:	b2da      	uxtb	r2, r3
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8014f34:	697b      	ldr	r3, [r7, #20]
 8014f36:	b2db      	uxtb	r3, r3
 8014f38:	227f      	movs	r2, #127	@ 0x7f
 8014f3a:	4013      	ands	r3, r2
 8014f3c:	b2da      	uxtb	r2, r3
 8014f3e:	68bb      	ldr	r3, [r7, #8]
 8014f40:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	0d9b      	lsrs	r3, r3, #22
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	2201      	movs	r2, #1
 8014f4a:	4013      	ands	r3, r2
 8014f4c:	b2da      	uxtb	r2, r3
 8014f4e:	68bb      	ldr	r3, [r7, #8]
 8014f50:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d11a      	bne.n	8014f8e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	0018      	movs	r0, r3
 8014f5e:	f000 f9b8 	bl	80152d2 <RTC_Bcd2ToByte>
 8014f62:	0003      	movs	r3, r0
 8014f64:	001a      	movs	r2, r3
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	785b      	ldrb	r3, [r3, #1]
 8014f6e:	0018      	movs	r0, r3
 8014f70:	f000 f9af 	bl	80152d2 <RTC_Bcd2ToByte>
 8014f74:	0003      	movs	r3, r0
 8014f76:	001a      	movs	r2, r3
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	789b      	ldrb	r3, [r3, #2]
 8014f80:	0018      	movs	r0, r3
 8014f82:	f000 f9a6 	bl	80152d2 <RTC_Bcd2ToByte>
 8014f86:	0003      	movs	r3, r0
 8014f88:	001a      	movs	r2, r3
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8014f8e:	2300      	movs	r3, #0
}
 8014f90:	0018      	movs	r0, r3
 8014f92:	46bd      	mov	sp, r7
 8014f94:	b006      	add	sp, #24
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	007f7f7f 	.word	0x007f7f7f

08014f9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8014f9c:	b5b0      	push	{r4, r5, r7, lr}
 8014f9e:	b086      	sub	sp, #24
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2220      	movs	r2, #32
 8014fb0:	5c9b      	ldrb	r3, [r3, r2]
 8014fb2:	2b01      	cmp	r3, #1
 8014fb4:	d101      	bne.n	8014fba <HAL_RTC_SetDate+0x1e>
 8014fb6:	2302      	movs	r3, #2
 8014fb8:	e07e      	b.n	80150b8 <HAL_RTC_SetDate+0x11c>
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	2220      	movs	r2, #32
 8014fbe:	2101      	movs	r1, #1
 8014fc0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2221      	movs	r2, #33	@ 0x21
 8014fc6:	2102      	movs	r1, #2
 8014fc8:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d10e      	bne.n	8014fee <HAL_RTC_SetDate+0x52>
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	785b      	ldrb	r3, [r3, #1]
 8014fd4:	001a      	movs	r2, r3
 8014fd6:	2310      	movs	r3, #16
 8014fd8:	4013      	ands	r3, r2
 8014fda:	d008      	beq.n	8014fee <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	785b      	ldrb	r3, [r3, #1]
 8014fe0:	2210      	movs	r2, #16
 8014fe2:	4393      	bics	r3, r2
 8014fe4:	b2db      	uxtb	r3, r3
 8014fe6:	330a      	adds	r3, #10
 8014fe8:	b2da      	uxtb	r2, r3
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d11c      	bne.n	801502e <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	78db      	ldrb	r3, [r3, #3]
 8014ff8:	0018      	movs	r0, r3
 8014ffa:	f000 f949 	bl	8015290 <RTC_ByteToBcd2>
 8014ffe:	0003      	movs	r3, r0
 8015000:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8015002:	68bb      	ldr	r3, [r7, #8]
 8015004:	785b      	ldrb	r3, [r3, #1]
 8015006:	0018      	movs	r0, r3
 8015008:	f000 f942 	bl	8015290 <RTC_ByteToBcd2>
 801500c:	0003      	movs	r3, r0
 801500e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015010:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	789b      	ldrb	r3, [r3, #2]
 8015016:	0018      	movs	r0, r3
 8015018:	f000 f93a 	bl	8015290 <RTC_ByteToBcd2>
 801501c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 801501e:	0022      	movs	r2, r4
 8015020:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	781b      	ldrb	r3, [r3, #0]
 8015026:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8015028:	4313      	orrs	r3, r2
 801502a:	617b      	str	r3, [r7, #20]
 801502c:	e00e      	b.n	801504c <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801502e:	68bb      	ldr	r3, [r7, #8]
 8015030:	78db      	ldrb	r3, [r3, #3]
 8015032:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	785b      	ldrb	r3, [r3, #1]
 8015038:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 801503a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 801503c:	68ba      	ldr	r2, [r7, #8]
 801503e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8015040:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8015048:	4313      	orrs	r3, r2
 801504a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	22ca      	movs	r2, #202	@ 0xca
 8015052:	625a      	str	r2, [r3, #36]	@ 0x24
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2253      	movs	r2, #83	@ 0x53
 801505a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 801505c:	2513      	movs	r5, #19
 801505e:	197c      	adds	r4, r7, r5
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	0018      	movs	r0, r3
 8015064:	f000 f8a6 	bl	80151b4 <RTC_EnterInitMode>
 8015068:	0003      	movs	r3, r0
 801506a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 801506c:	0028      	movs	r0, r5
 801506e:	183b      	adds	r3, r7, r0
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d10c      	bne.n	8015090 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	697a      	ldr	r2, [r7, #20]
 801507c:	4910      	ldr	r1, [pc, #64]	@ (80150c0 <HAL_RTC_SetDate+0x124>)
 801507e:	400a      	ands	r2, r1
 8015080:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8015082:	183c      	adds	r4, r7, r0
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	0018      	movs	r0, r3
 8015088:	f000 f8d8 	bl	801523c <RTC_ExitInitMode>
 801508c:	0003      	movs	r3, r0
 801508e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8015090:	2313      	movs	r3, #19
 8015092:	18fb      	adds	r3, r7, r3
 8015094:	781b      	ldrb	r3, [r3, #0]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d103      	bne.n	80150a2 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	2221      	movs	r2, #33	@ 0x21
 801509e:	2101      	movs	r1, #1
 80150a0:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	22ff      	movs	r2, #255	@ 0xff
 80150a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	2220      	movs	r2, #32
 80150ae:	2100      	movs	r1, #0
 80150b0:	5499      	strb	r1, [r3, r2]

  return status;
 80150b2:	2313      	movs	r3, #19
 80150b4:	18fb      	adds	r3, r7, r3
 80150b6:	781b      	ldrb	r3, [r3, #0]
}
 80150b8:	0018      	movs	r0, r3
 80150ba:	46bd      	mov	sp, r7
 80150bc:	b006      	add	sp, #24
 80150be:	bdb0      	pop	{r4, r5, r7, pc}
 80150c0:	00ffff3f 	.word	0x00ffff3f

080150c4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b086      	sub	sp, #24
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80150d0:	2300      	movs	r3, #0
 80150d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	4a21      	ldr	r2, [pc, #132]	@ (8015160 <HAL_RTC_GetDate+0x9c>)
 80150dc:	4013      	ands	r3, r2
 80150de:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	0c1b      	lsrs	r3, r3, #16
 80150e4:	b2da      	uxtb	r2, r3
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80150ea:	697b      	ldr	r3, [r7, #20]
 80150ec:	0a1b      	lsrs	r3, r3, #8
 80150ee:	b2db      	uxtb	r3, r3
 80150f0:	221f      	movs	r2, #31
 80150f2:	4013      	ands	r3, r2
 80150f4:	b2da      	uxtb	r2, r3
 80150f6:	68bb      	ldr	r3, [r7, #8]
 80150f8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	b2db      	uxtb	r3, r3
 80150fe:	223f      	movs	r2, #63	@ 0x3f
 8015100:	4013      	ands	r3, r2
 8015102:	b2da      	uxtb	r2, r3
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	0b5b      	lsrs	r3, r3, #13
 801510c:	b2db      	uxtb	r3, r3
 801510e:	2207      	movs	r2, #7
 8015110:	4013      	ands	r3, r2
 8015112:	b2da      	uxtb	r2, r3
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d11a      	bne.n	8015154 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 801511e:	68bb      	ldr	r3, [r7, #8]
 8015120:	78db      	ldrb	r3, [r3, #3]
 8015122:	0018      	movs	r0, r3
 8015124:	f000 f8d5 	bl	80152d2 <RTC_Bcd2ToByte>
 8015128:	0003      	movs	r3, r0
 801512a:	001a      	movs	r2, r3
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8015130:	68bb      	ldr	r3, [r7, #8]
 8015132:	785b      	ldrb	r3, [r3, #1]
 8015134:	0018      	movs	r0, r3
 8015136:	f000 f8cc 	bl	80152d2 <RTC_Bcd2ToByte>
 801513a:	0003      	movs	r3, r0
 801513c:	001a      	movs	r2, r3
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8015142:	68bb      	ldr	r3, [r7, #8]
 8015144:	789b      	ldrb	r3, [r3, #2]
 8015146:	0018      	movs	r0, r3
 8015148:	f000 f8c3 	bl	80152d2 <RTC_Bcd2ToByte>
 801514c:	0003      	movs	r3, r0
 801514e:	001a      	movs	r2, r3
 8015150:	68bb      	ldr	r3, [r7, #8]
 8015152:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8015154:	2300      	movs	r3, #0
}
 8015156:	0018      	movs	r0, r3
 8015158:	46bd      	mov	sp, r7
 801515a:	b006      	add	sp, #24
 801515c:	bd80      	pop	{r7, pc}
 801515e:	46c0      	nop			@ (mov r8, r8)
 8015160:	00ffff3f 	.word	0x00ffff3f

08015164 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801516c:	2300      	movs	r3, #0
 801516e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	4a0e      	ldr	r2, [pc, #56]	@ (80151b0 <HAL_RTC_WaitForSynchro+0x4c>)
 8015176:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015178:	f7f8 fd0e 	bl	800db98 <HAL_GetTick>
 801517c:	0003      	movs	r3, r0
 801517e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015180:	e00a      	b.n	8015198 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015182:	f7f8 fd09 	bl	800db98 <HAL_GetTick>
 8015186:	0002      	movs	r2, r0
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	1ad2      	subs	r2, r2, r3
 801518c:	23fa      	movs	r3, #250	@ 0xfa
 801518e:	009b      	lsls	r3, r3, #2
 8015190:	429a      	cmp	r2, r3
 8015192:	d901      	bls.n	8015198 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8015194:	2303      	movs	r3, #3
 8015196:	e006      	b.n	80151a6 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	68db      	ldr	r3, [r3, #12]
 801519e:	2220      	movs	r2, #32
 80151a0:	4013      	ands	r3, r2
 80151a2:	d0ee      	beq.n	8015182 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80151a4:	2300      	movs	r3, #0
}
 80151a6:	0018      	movs	r0, r3
 80151a8:	46bd      	mov	sp, r7
 80151aa:	b004      	add	sp, #16
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	46c0      	nop			@ (mov r8, r8)
 80151b0:	0001ff5f 	.word	0x0001ff5f

080151b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b084      	sub	sp, #16
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80151bc:	2300      	movs	r3, #0
 80151be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80151c0:	230f      	movs	r3, #15
 80151c2:	18fb      	adds	r3, r7, r3
 80151c4:	2200      	movs	r2, #0
 80151c6:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	68db      	ldr	r3, [r3, #12]
 80151ce:	2240      	movs	r2, #64	@ 0x40
 80151d0:	4013      	ands	r3, r2
 80151d2:	d12c      	bne.n	801522e <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	68da      	ldr	r2, [r3, #12]
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2180      	movs	r1, #128	@ 0x80
 80151e0:	430a      	orrs	r2, r1
 80151e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80151e4:	f7f8 fcd8 	bl	800db98 <HAL_GetTick>
 80151e8:	0003      	movs	r3, r0
 80151ea:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80151ec:	e014      	b.n	8015218 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80151ee:	f7f8 fcd3 	bl	800db98 <HAL_GetTick>
 80151f2:	0002      	movs	r2, r0
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	1ad2      	subs	r2, r2, r3
 80151f8:	200f      	movs	r0, #15
 80151fa:	183b      	adds	r3, r7, r0
 80151fc:	1839      	adds	r1, r7, r0
 80151fe:	7809      	ldrb	r1, [r1, #0]
 8015200:	7019      	strb	r1, [r3, #0]
 8015202:	23fa      	movs	r3, #250	@ 0xfa
 8015204:	009b      	lsls	r3, r3, #2
 8015206:	429a      	cmp	r2, r3
 8015208:	d906      	bls.n	8015218 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2221      	movs	r2, #33	@ 0x21
 801520e:	2104      	movs	r1, #4
 8015210:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8015212:	183b      	adds	r3, r7, r0
 8015214:	2201      	movs	r2, #1
 8015216:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	68db      	ldr	r3, [r3, #12]
 801521e:	2240      	movs	r2, #64	@ 0x40
 8015220:	4013      	ands	r3, r2
 8015222:	d104      	bne.n	801522e <RTC_EnterInitMode+0x7a>
 8015224:	230f      	movs	r3, #15
 8015226:	18fb      	adds	r3, r7, r3
 8015228:	781b      	ldrb	r3, [r3, #0]
 801522a:	2b01      	cmp	r3, #1
 801522c:	d1df      	bne.n	80151ee <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 801522e:	230f      	movs	r3, #15
 8015230:	18fb      	adds	r3, r7, r3
 8015232:	781b      	ldrb	r3, [r3, #0]
}
 8015234:	0018      	movs	r0, r3
 8015236:	46bd      	mov	sp, r7
 8015238:	b004      	add	sp, #16
 801523a:	bd80      	pop	{r7, pc}

0801523c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 801523c:	b590      	push	{r4, r7, lr}
 801523e:	b085      	sub	sp, #20
 8015240:	af00      	add	r7, sp, #0
 8015242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015244:	240f      	movs	r4, #15
 8015246:	193b      	adds	r3, r7, r4
 8015248:	2200      	movs	r2, #0
 801524a:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	68da      	ldr	r2, [r3, #12]
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	2180      	movs	r1, #128	@ 0x80
 8015258:	438a      	bics	r2, r1
 801525a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	689b      	ldr	r3, [r3, #8]
 8015262:	2220      	movs	r2, #32
 8015264:	4013      	ands	r3, r2
 8015266:	d10c      	bne.n	8015282 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	0018      	movs	r0, r3
 801526c:	f7ff ff7a 	bl	8015164 <HAL_RTC_WaitForSynchro>
 8015270:	1e03      	subs	r3, r0, #0
 8015272:	d006      	beq.n	8015282 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	2221      	movs	r2, #33	@ 0x21
 8015278:	2104      	movs	r1, #4
 801527a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 801527c:	193b      	adds	r3, r7, r4
 801527e:	2201      	movs	r2, #1
 8015280:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8015282:	230f      	movs	r3, #15
 8015284:	18fb      	adds	r3, r7, r3
 8015286:	781b      	ldrb	r3, [r3, #0]
}
 8015288:	0018      	movs	r0, r3
 801528a:	46bd      	mov	sp, r7
 801528c:	b005      	add	sp, #20
 801528e:	bd90      	pop	{r4, r7, pc}

08015290 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	0002      	movs	r2, r0
 8015298:	1dfb      	adds	r3, r7, #7
 801529a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 801529c:	2300      	movs	r3, #0
 801529e:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80152a0:	e007      	b.n	80152b2 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	3301      	adds	r3, #1
 80152a6:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80152a8:	1dfb      	adds	r3, r7, #7
 80152aa:	1dfa      	adds	r2, r7, #7
 80152ac:	7812      	ldrb	r2, [r2, #0]
 80152ae:	3a0a      	subs	r2, #10
 80152b0:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 80152b2:	1dfb      	adds	r3, r7, #7
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	2b09      	cmp	r3, #9
 80152b8:	d8f3      	bhi.n	80152a2 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	b2db      	uxtb	r3, r3
 80152be:	011b      	lsls	r3, r3, #4
 80152c0:	b2da      	uxtb	r2, r3
 80152c2:	1dfb      	adds	r3, r7, #7
 80152c4:	781b      	ldrb	r3, [r3, #0]
 80152c6:	4313      	orrs	r3, r2
 80152c8:	b2db      	uxtb	r3, r3
}
 80152ca:	0018      	movs	r0, r3
 80152cc:	46bd      	mov	sp, r7
 80152ce:	b004      	add	sp, #16
 80152d0:	bd80      	pop	{r7, pc}

080152d2 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80152d2:	b580      	push	{r7, lr}
 80152d4:	b084      	sub	sp, #16
 80152d6:	af00      	add	r7, sp, #0
 80152d8:	0002      	movs	r2, r0
 80152da:	1dfb      	adds	r3, r7, #7
 80152dc:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80152de:	2300      	movs	r3, #0
 80152e0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80152e2:	1dfb      	adds	r3, r7, #7
 80152e4:	781b      	ldrb	r3, [r3, #0]
 80152e6:	091b      	lsrs	r3, r3, #4
 80152e8:	b2db      	uxtb	r3, r3
 80152ea:	001a      	movs	r2, r3
 80152ec:	0013      	movs	r3, r2
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	189b      	adds	r3, r3, r2
 80152f2:	005b      	lsls	r3, r3, #1
 80152f4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	b2da      	uxtb	r2, r3
 80152fa:	1dfb      	adds	r3, r7, #7
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	210f      	movs	r1, #15
 8015300:	400b      	ands	r3, r1
 8015302:	b2db      	uxtb	r3, r3
 8015304:	18d3      	adds	r3, r2, r3
 8015306:	b2db      	uxtb	r3, r3
}
 8015308:	0018      	movs	r0, r3
 801530a:	46bd      	mov	sp, r7
 801530c:	b004      	add	sp, #16
 801530e:	bd80      	pop	{r7, pc}

08015310 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b086      	sub	sp, #24
 8015314:	af00      	add	r7, sp, #0
 8015316:	60f8      	str	r0, [r7, #12]
 8015318:	60b9      	str	r1, [r7, #8]
 801531a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 801531c:	4b64      	ldr	r3, [pc, #400]	@ (80154b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	22fa      	movs	r2, #250	@ 0xfa
 8015322:	01d1      	lsls	r1, r2, #7
 8015324:	0018      	movs	r0, r3
 8015326:	f7ea ff3d 	bl	80001a4 <__udivsi3>
 801532a:	0003      	movs	r3, r0
 801532c:	001a      	movs	r2, r3
 801532e:	0013      	movs	r3, r2
 8015330:	015b      	lsls	r3, r3, #5
 8015332:	1a9b      	subs	r3, r3, r2
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	189b      	adds	r3, r3, r2
 8015338:	00db      	lsls	r3, r3, #3
 801533a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	2220      	movs	r2, #32
 8015340:	5c9b      	ldrb	r3, [r3, r2]
 8015342:	2b01      	cmp	r3, #1
 8015344:	d101      	bne.n	801534a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8015346:	2302      	movs	r3, #2
 8015348:	e0ad      	b.n	80154a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	2220      	movs	r2, #32
 801534e:	2101      	movs	r1, #1
 8015350:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2221      	movs	r2, #33	@ 0x21
 8015356:	2102      	movs	r1, #2
 8015358:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	22ca      	movs	r2, #202	@ 0xca
 8015360:	625a      	str	r2, [r3, #36]	@ 0x24
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	2253      	movs	r2, #83	@ 0x53
 8015368:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 801536a:	68fb      	ldr	r3, [r7, #12]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	689a      	ldr	r2, [r3, #8]
 8015370:	2380      	movs	r3, #128	@ 0x80
 8015372:	00db      	lsls	r3, r3, #3
 8015374:	4013      	ands	r3, r2
 8015376:	d019      	beq.n	80153ac <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	3b01      	subs	r3, #1
 801537c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 801537e:	697b      	ldr	r3, [r7, #20]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d10d      	bne.n	80153a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	22ff      	movs	r2, #255	@ 0xff
 801538a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	2221      	movs	r2, #33	@ 0x21
 8015390:	2103      	movs	r1, #3
 8015392:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	2220      	movs	r2, #32
 8015398:	2100      	movs	r1, #0
 801539a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 801539c:	2303      	movs	r3, #3
 801539e:	e082      	b.n	80154a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	2204      	movs	r2, #4
 80153a8:	4013      	ands	r3, r2
 80153aa:	d1e5      	bne.n	8015378 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	689a      	ldr	r2, [r3, #8]
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	493f      	ldr	r1, [pc, #252]	@ (80154b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80153b8:	400a      	ands	r2, r1
 80153ba:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	68db      	ldr	r3, [r3, #12]
 80153c2:	22ff      	movs	r2, #255	@ 0xff
 80153c4:	401a      	ands	r2, r3
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	493b      	ldr	r1, [pc, #236]	@ (80154b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 80153cc:	430a      	orrs	r2, r1
 80153ce:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80153d0:	4b37      	ldr	r3, [pc, #220]	@ (80154b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	22fa      	movs	r2, #250	@ 0xfa
 80153d6:	01d1      	lsls	r1, r2, #7
 80153d8:	0018      	movs	r0, r3
 80153da:	f7ea fee3 	bl	80001a4 <__udivsi3>
 80153de:	0003      	movs	r3, r0
 80153e0:	001a      	movs	r2, r3
 80153e2:	0013      	movs	r3, r2
 80153e4:	015b      	lsls	r3, r3, #5
 80153e6:	1a9b      	subs	r3, r3, r2
 80153e8:	009b      	lsls	r3, r3, #2
 80153ea:	189b      	adds	r3, r3, r2
 80153ec:	00db      	lsls	r3, r3, #3
 80153ee:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80153f0:	697b      	ldr	r3, [r7, #20]
 80153f2:	3b01      	subs	r3, #1
 80153f4:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80153f6:	697b      	ldr	r3, [r7, #20]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d10d      	bne.n	8015418 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	22ff      	movs	r2, #255	@ 0xff
 8015402:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2221      	movs	r2, #33	@ 0x21
 8015408:	2103      	movs	r1, #3
 801540a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2220      	movs	r2, #32
 8015410:	2100      	movs	r1, #0
 8015412:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8015414:	2303      	movs	r3, #3
 8015416:	e046      	b.n	80154a6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	68db      	ldr	r3, [r3, #12]
 801541e:	2204      	movs	r2, #4
 8015420:	4013      	ands	r3, r2
 8015422:	d0e5      	beq.n	80153f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	689a      	ldr	r2, [r3, #8]
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2107      	movs	r1, #7
 8015430:	438a      	bics	r2, r1
 8015432:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	6899      	ldr	r1, [r3, #8]
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	687a      	ldr	r2, [r7, #4]
 8015440:	430a      	orrs	r2, r1
 8015442:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	68ba      	ldr	r2, [r7, #8]
 801544a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 801544c:	4b1b      	ldr	r3, [pc, #108]	@ (80154bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801544e:	681a      	ldr	r2, [r3, #0]
 8015450:	4b1a      	ldr	r3, [pc, #104]	@ (80154bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015452:	2180      	movs	r1, #128	@ 0x80
 8015454:	0349      	lsls	r1, r1, #13
 8015456:	430a      	orrs	r2, r1
 8015458:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 801545a:	4b18      	ldr	r3, [pc, #96]	@ (80154bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 801545c:	689a      	ldr	r2, [r3, #8]
 801545e:	4b17      	ldr	r3, [pc, #92]	@ (80154bc <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8015460:	2180      	movs	r1, #128	@ 0x80
 8015462:	0349      	lsls	r1, r1, #13
 8015464:	430a      	orrs	r2, r1
 8015466:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	689a      	ldr	r2, [r3, #8]
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	2180      	movs	r1, #128	@ 0x80
 8015474:	01c9      	lsls	r1, r1, #7
 8015476:	430a      	orrs	r2, r1
 8015478:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	689a      	ldr	r2, [r3, #8]
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2180      	movs	r1, #128	@ 0x80
 8015486:	00c9      	lsls	r1, r1, #3
 8015488:	430a      	orrs	r2, r1
 801548a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	22ff      	movs	r2, #255	@ 0xff
 8015492:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2221      	movs	r2, #33	@ 0x21
 8015498:	2101      	movs	r1, #1
 801549a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	2220      	movs	r2, #32
 80154a0:	2100      	movs	r1, #0
 80154a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80154a4:	2300      	movs	r3, #0
}
 80154a6:	0018      	movs	r0, r3
 80154a8:	46bd      	mov	sp, r7
 80154aa:	b006      	add	sp, #24
 80154ac:	bd80      	pop	{r7, pc}
 80154ae:	46c0      	nop			@ (mov r8, r8)
 80154b0:	200000c8 	.word	0x200000c8
 80154b4:	fffffbff 	.word	0xfffffbff
 80154b8:	fffffb7f 	.word	0xfffffb7f
 80154bc:	40010400 	.word	0x40010400

080154c0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b084      	sub	sp, #16
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80154c8:	2300      	movs	r3, #0
 80154ca:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2220      	movs	r2, #32
 80154d0:	5c9b      	ldrb	r3, [r3, r2]
 80154d2:	2b01      	cmp	r3, #1
 80154d4:	d101      	bne.n	80154da <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80154d6:	2302      	movs	r3, #2
 80154d8:	e04e      	b.n	8015578 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2220      	movs	r2, #32
 80154de:	2101      	movs	r1, #1
 80154e0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	2221      	movs	r2, #33	@ 0x21
 80154e6:	2102      	movs	r1, #2
 80154e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	22ca      	movs	r2, #202	@ 0xca
 80154f0:	625a      	str	r2, [r3, #36]	@ 0x24
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	2253      	movs	r2, #83	@ 0x53
 80154f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	689a      	ldr	r2, [r3, #8]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	491e      	ldr	r1, [pc, #120]	@ (8015580 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8015506:	400a      	ands	r2, r1
 8015508:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	689a      	ldr	r2, [r3, #8]
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	491b      	ldr	r1, [pc, #108]	@ (8015584 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8015516:	400a      	ands	r2, r1
 8015518:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 801551a:	f7f8 fb3d 	bl	800db98 <HAL_GetTick>
 801551e:	0003      	movs	r3, r0
 8015520:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015522:	e016      	b.n	8015552 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8015524:	f7f8 fb38 	bl	800db98 <HAL_GetTick>
 8015528:	0002      	movs	r2, r0
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	1ad2      	subs	r2, r2, r3
 801552e:	23fa      	movs	r3, #250	@ 0xfa
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	429a      	cmp	r2, r3
 8015534:	d90d      	bls.n	8015552 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	22ff      	movs	r2, #255	@ 0xff
 801553c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2221      	movs	r2, #33	@ 0x21
 8015542:	2103      	movs	r1, #3
 8015544:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	2220      	movs	r2, #32
 801554a:	2100      	movs	r1, #0
 801554c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 801554e:	2303      	movs	r3, #3
 8015550:	e012      	b.n	8015578 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	68db      	ldr	r3, [r3, #12]
 8015558:	2204      	movs	r2, #4
 801555a:	4013      	ands	r3, r2
 801555c:	d0e2      	beq.n	8015524 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	22ff      	movs	r2, #255	@ 0xff
 8015564:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2221      	movs	r2, #33	@ 0x21
 801556a:	2101      	movs	r1, #1
 801556c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	2220      	movs	r2, #32
 8015572:	2100      	movs	r1, #0
 8015574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015576:	2300      	movs	r3, #0
}
 8015578:	0018      	movs	r0, r3
 801557a:	46bd      	mov	sp, r7
 801557c:	b004      	add	sp, #16
 801557e:	bd80      	pop	{r7, pc}
 8015580:	fffffbff 	.word	0xfffffbff
 8015584:	ffffbfff 	.word	0xffffbfff

08015588 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b082      	sub	sp, #8
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8015590:	4b13      	ldr	r3, [pc, #76]	@ (80155e0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8015592:	2280      	movs	r2, #128	@ 0x80
 8015594:	0352      	lsls	r2, r2, #13
 8015596:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	689a      	ldr	r2, [r3, #8]
 801559e:	2380      	movs	r3, #128	@ 0x80
 80155a0:	01db      	lsls	r3, r3, #7
 80155a2:	4013      	ands	r3, r2
 80155a4:	d014      	beq.n	80155d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	68da      	ldr	r2, [r3, #12]
 80155ac:	2380      	movs	r3, #128	@ 0x80
 80155ae:	00db      	lsls	r3, r3, #3
 80155b0:	4013      	ands	r3, r2
 80155b2:	d00d      	beq.n	80155d0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	68db      	ldr	r3, [r3, #12]
 80155ba:	22ff      	movs	r2, #255	@ 0xff
 80155bc:	401a      	ands	r2, r3
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	4908      	ldr	r1, [pc, #32]	@ (80155e4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80155c4:	430a      	orrs	r2, r1
 80155c6:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	0018      	movs	r0, r3
 80155cc:	f000 f80c 	bl	80155e8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2221      	movs	r2, #33	@ 0x21
 80155d4:	2101      	movs	r1, #1
 80155d6:	5499      	strb	r1, [r3, r2]
}
 80155d8:	46c0      	nop			@ (mov r8, r8)
 80155da:	46bd      	mov	sp, r7
 80155dc:	b002      	add	sp, #8
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	40010400 	.word	0x40010400
 80155e4:	fffffb7f 	.word	0xfffffb7f

080155e8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80155f0:	46c0      	nop			@ (mov r8, r8)
 80155f2:	46bd      	mov	sp, r7
 80155f4:	b002      	add	sp, #8
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d101      	bne.n	801560a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8015606:	2301      	movs	r3, #1
 8015608:	e032      	b.n	8015670 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	2239      	movs	r2, #57	@ 0x39
 801560e:	5c9b      	ldrb	r3, [r3, r2]
 8015610:	b2db      	uxtb	r3, r3
 8015612:	2b00      	cmp	r3, #0
 8015614:	d107      	bne.n	8015626 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	2238      	movs	r2, #56	@ 0x38
 801561a:	2100      	movs	r1, #0
 801561c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	0018      	movs	r0, r3
 8015622:	f7f7 fc73 	bl	800cf0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2239      	movs	r2, #57	@ 0x39
 801562a:	2102      	movs	r1, #2
 801562c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	3304      	adds	r3, #4
 8015636:	0019      	movs	r1, r3
 8015638:	0010      	movs	r0, r2
 801563a:	f000 fa1d 	bl	8015a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	223e      	movs	r2, #62	@ 0x3e
 8015642:	2101      	movs	r1, #1
 8015644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	223a      	movs	r2, #58	@ 0x3a
 801564a:	2101      	movs	r1, #1
 801564c:	5499      	strb	r1, [r3, r2]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	223b      	movs	r2, #59	@ 0x3b
 8015652:	2101      	movs	r1, #1
 8015654:	5499      	strb	r1, [r3, r2]
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	223c      	movs	r2, #60	@ 0x3c
 801565a:	2101      	movs	r1, #1
 801565c:	5499      	strb	r1, [r3, r2]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	223d      	movs	r2, #61	@ 0x3d
 8015662:	2101      	movs	r1, #1
 8015664:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	2239      	movs	r2, #57	@ 0x39
 801566a:	2101      	movs	r1, #1
 801566c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 801566e:	2300      	movs	r3, #0
}
 8015670:	0018      	movs	r0, r3
 8015672:	46bd      	mov	sp, r7
 8015674:	b002      	add	sp, #8
 8015676:	bd80      	pop	{r7, pc}

08015678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8015678:	b580      	push	{r7, lr}
 801567a:	b084      	sub	sp, #16
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2239      	movs	r2, #57	@ 0x39
 8015684:	5c9b      	ldrb	r3, [r3, r2]
 8015686:	b2db      	uxtb	r3, r3
 8015688:	2b01      	cmp	r3, #1
 801568a:	d001      	beq.n	8015690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801568c:	2301      	movs	r3, #1
 801568e:	e033      	b.n	80156f8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2239      	movs	r2, #57	@ 0x39
 8015694:	2102      	movs	r1, #2
 8015696:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	2380      	movs	r3, #128	@ 0x80
 801569e:	05db      	lsls	r3, r3, #23
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d00e      	beq.n	80156c2 <HAL_TIM_Base_Start+0x4a>
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	4a15      	ldr	r2, [pc, #84]	@ (8015700 <HAL_TIM_Base_Start+0x88>)
 80156aa:	4293      	cmp	r3, r2
 80156ac:	d009      	beq.n	80156c2 <HAL_TIM_Base_Start+0x4a>
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	4a14      	ldr	r2, [pc, #80]	@ (8015704 <HAL_TIM_Base_Start+0x8c>)
 80156b4:	4293      	cmp	r3, r2
 80156b6:	d004      	beq.n	80156c2 <HAL_TIM_Base_Start+0x4a>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	4a12      	ldr	r2, [pc, #72]	@ (8015708 <HAL_TIM_Base_Start+0x90>)
 80156be:	4293      	cmp	r3, r2
 80156c0:	d111      	bne.n	80156e6 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	689b      	ldr	r3, [r3, #8]
 80156c8:	2207      	movs	r2, #7
 80156ca:	4013      	ands	r3, r2
 80156cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	2b06      	cmp	r3, #6
 80156d2:	d010      	beq.n	80156f6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	681a      	ldr	r2, [r3, #0]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	2101      	movs	r1, #1
 80156e0:	430a      	orrs	r2, r1
 80156e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156e4:	e007      	b.n	80156f6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	2101      	movs	r1, #1
 80156f2:	430a      	orrs	r2, r1
 80156f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80156f6:	2300      	movs	r3, #0
}
 80156f8:	0018      	movs	r0, r3
 80156fa:	46bd      	mov	sp, r7
 80156fc:	b004      	add	sp, #16
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	40000400 	.word	0x40000400
 8015704:	40010800 	.word	0x40010800
 8015708:	40011400 	.word	0x40011400

0801570c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b082      	sub	sp, #8
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	6a1b      	ldr	r3, [r3, #32]
 801571a:	4a0a      	ldr	r2, [pc, #40]	@ (8015744 <HAL_TIM_Base_Stop+0x38>)
 801571c:	4013      	ands	r3, r2
 801571e:	d107      	bne.n	8015730 <HAL_TIM_Base_Stop+0x24>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	681a      	ldr	r2, [r3, #0]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	2101      	movs	r1, #1
 801572c:	438a      	bics	r2, r1
 801572e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2239      	movs	r2, #57	@ 0x39
 8015734:	2101      	movs	r1, #1
 8015736:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8015738:	2300      	movs	r3, #0
}
 801573a:	0018      	movs	r0, r3
 801573c:	46bd      	mov	sp, r7
 801573e:	b002      	add	sp, #8
 8015740:	bd80      	pop	{r7, pc}
 8015742:	46c0      	nop			@ (mov r8, r8)
 8015744:	00001111 	.word	0x00001111

08015748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b082      	sub	sp, #8
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d101      	bne.n	801575a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8015756:	2301      	movs	r3, #1
 8015758:	e032      	b.n	80157c0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	2239      	movs	r2, #57	@ 0x39
 801575e:	5c9b      	ldrb	r3, [r3, r2]
 8015760:	b2db      	uxtb	r3, r3
 8015762:	2b00      	cmp	r3, #0
 8015764:	d107      	bne.n	8015776 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2238      	movs	r2, #56	@ 0x38
 801576a:	2100      	movs	r1, #0
 801576c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	0018      	movs	r0, r3
 8015772:	f7f7 fba7 	bl	800cec4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2239      	movs	r2, #57	@ 0x39
 801577a:	2102      	movs	r1, #2
 801577c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	681a      	ldr	r2, [r3, #0]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	3304      	adds	r3, #4
 8015786:	0019      	movs	r1, r3
 8015788:	0010      	movs	r0, r2
 801578a:	f000 f975 	bl	8015a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	223e      	movs	r2, #62	@ 0x3e
 8015792:	2101      	movs	r1, #1
 8015794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	223a      	movs	r2, #58	@ 0x3a
 801579a:	2101      	movs	r1, #1
 801579c:	5499      	strb	r1, [r3, r2]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	223b      	movs	r2, #59	@ 0x3b
 80157a2:	2101      	movs	r1, #1
 80157a4:	5499      	strb	r1, [r3, r2]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	223c      	movs	r2, #60	@ 0x3c
 80157aa:	2101      	movs	r1, #1
 80157ac:	5499      	strb	r1, [r3, r2]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	223d      	movs	r2, #61	@ 0x3d
 80157b2:	2101      	movs	r1, #1
 80157b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	2239      	movs	r2, #57	@ 0x39
 80157ba:	2101      	movs	r1, #1
 80157bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80157be:	2300      	movs	r3, #0
}
 80157c0:	0018      	movs	r0, r3
 80157c2:	46bd      	mov	sp, r7
 80157c4:	b002      	add	sp, #8
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b084      	sub	sp, #16
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d108      	bne.n	80157ea <HAL_TIM_PWM_Start+0x22>
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	223a      	movs	r2, #58	@ 0x3a
 80157dc:	5c9b      	ldrb	r3, [r3, r2]
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	3b01      	subs	r3, #1
 80157e2:	1e5a      	subs	r2, r3, #1
 80157e4:	4193      	sbcs	r3, r2
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	e01f      	b.n	801582a <HAL_TIM_PWM_Start+0x62>
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	2b04      	cmp	r3, #4
 80157ee:	d108      	bne.n	8015802 <HAL_TIM_PWM_Start+0x3a>
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	223b      	movs	r2, #59	@ 0x3b
 80157f4:	5c9b      	ldrb	r3, [r3, r2]
 80157f6:	b2db      	uxtb	r3, r3
 80157f8:	3b01      	subs	r3, #1
 80157fa:	1e5a      	subs	r2, r3, #1
 80157fc:	4193      	sbcs	r3, r2
 80157fe:	b2db      	uxtb	r3, r3
 8015800:	e013      	b.n	801582a <HAL_TIM_PWM_Start+0x62>
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	2b08      	cmp	r3, #8
 8015806:	d108      	bne.n	801581a <HAL_TIM_PWM_Start+0x52>
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	223c      	movs	r2, #60	@ 0x3c
 801580c:	5c9b      	ldrb	r3, [r3, r2]
 801580e:	b2db      	uxtb	r3, r3
 8015810:	3b01      	subs	r3, #1
 8015812:	1e5a      	subs	r2, r3, #1
 8015814:	4193      	sbcs	r3, r2
 8015816:	b2db      	uxtb	r3, r3
 8015818:	e007      	b.n	801582a <HAL_TIM_PWM_Start+0x62>
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	223d      	movs	r2, #61	@ 0x3d
 801581e:	5c9b      	ldrb	r3, [r3, r2]
 8015820:	b2db      	uxtb	r3, r3
 8015822:	3b01      	subs	r3, #1
 8015824:	1e5a      	subs	r2, r3, #1
 8015826:	4193      	sbcs	r3, r2
 8015828:	b2db      	uxtb	r3, r3
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 801582e:	2301      	movs	r3, #1
 8015830:	e052      	b.n	80158d8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d104      	bne.n	8015842 <HAL_TIM_PWM_Start+0x7a>
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	223a      	movs	r2, #58	@ 0x3a
 801583c:	2102      	movs	r1, #2
 801583e:	5499      	strb	r1, [r3, r2]
 8015840:	e013      	b.n	801586a <HAL_TIM_PWM_Start+0xa2>
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	2b04      	cmp	r3, #4
 8015846:	d104      	bne.n	8015852 <HAL_TIM_PWM_Start+0x8a>
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	223b      	movs	r2, #59	@ 0x3b
 801584c:	2102      	movs	r1, #2
 801584e:	5499      	strb	r1, [r3, r2]
 8015850:	e00b      	b.n	801586a <HAL_TIM_PWM_Start+0xa2>
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	2b08      	cmp	r3, #8
 8015856:	d104      	bne.n	8015862 <HAL_TIM_PWM_Start+0x9a>
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	223c      	movs	r2, #60	@ 0x3c
 801585c:	2102      	movs	r1, #2
 801585e:	5499      	strb	r1, [r3, r2]
 8015860:	e003      	b.n	801586a <HAL_TIM_PWM_Start+0xa2>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	223d      	movs	r2, #61	@ 0x3d
 8015866:	2102      	movs	r1, #2
 8015868:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	6839      	ldr	r1, [r7, #0]
 8015870:	2201      	movs	r2, #1
 8015872:	0018      	movs	r0, r3
 8015874:	f000 fa62 	bl	8015d3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	2380      	movs	r3, #128	@ 0x80
 801587e:	05db      	lsls	r3, r3, #23
 8015880:	429a      	cmp	r2, r3
 8015882:	d00e      	beq.n	80158a2 <HAL_TIM_PWM_Start+0xda>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	4a15      	ldr	r2, [pc, #84]	@ (80158e0 <HAL_TIM_PWM_Start+0x118>)
 801588a:	4293      	cmp	r3, r2
 801588c:	d009      	beq.n	80158a2 <HAL_TIM_PWM_Start+0xda>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	4a14      	ldr	r2, [pc, #80]	@ (80158e4 <HAL_TIM_PWM_Start+0x11c>)
 8015894:	4293      	cmp	r3, r2
 8015896:	d004      	beq.n	80158a2 <HAL_TIM_PWM_Start+0xda>
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	4a12      	ldr	r2, [pc, #72]	@ (80158e8 <HAL_TIM_PWM_Start+0x120>)
 801589e:	4293      	cmp	r3, r2
 80158a0:	d111      	bne.n	80158c6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	2207      	movs	r2, #7
 80158aa:	4013      	ands	r3, r2
 80158ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2b06      	cmp	r3, #6
 80158b2:	d010      	beq.n	80158d6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	681a      	ldr	r2, [r3, #0]
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	2101      	movs	r1, #1
 80158c0:	430a      	orrs	r2, r1
 80158c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80158c4:	e007      	b.n	80158d6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	681a      	ldr	r2, [r3, #0]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2101      	movs	r1, #1
 80158d2:	430a      	orrs	r2, r1
 80158d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80158d6:	2300      	movs	r3, #0
}
 80158d8:	0018      	movs	r0, r3
 80158da:	46bd      	mov	sp, r7
 80158dc:	b004      	add	sp, #16
 80158de:	bd80      	pop	{r7, pc}
 80158e0:	40000400 	.word	0x40000400
 80158e4:	40010800 	.word	0x40010800
 80158e8:	40011400 	.word	0x40011400

080158ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b086      	sub	sp, #24
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
 80158f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80158f8:	2317      	movs	r3, #23
 80158fa:	18fb      	adds	r3, r7, r3
 80158fc:	2200      	movs	r2, #0
 80158fe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	2238      	movs	r2, #56	@ 0x38
 8015904:	5c9b      	ldrb	r3, [r3, r2]
 8015906:	2b01      	cmp	r3, #1
 8015908:	d101      	bne.n	801590e <HAL_TIM_PWM_ConfigChannel+0x22>
 801590a:	2302      	movs	r3, #2
 801590c:	e0ad      	b.n	8015a6a <HAL_TIM_PWM_ConfigChannel+0x17e>
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2238      	movs	r2, #56	@ 0x38
 8015912:	2101      	movs	r1, #1
 8015914:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2b0c      	cmp	r3, #12
 801591a:	d100      	bne.n	801591e <HAL_TIM_PWM_ConfigChannel+0x32>
 801591c:	e076      	b.n	8015a0c <HAL_TIM_PWM_ConfigChannel+0x120>
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2b0c      	cmp	r3, #12
 8015922:	d900      	bls.n	8015926 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8015924:	e095      	b.n	8015a52 <HAL_TIM_PWM_ConfigChannel+0x166>
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2b08      	cmp	r3, #8
 801592a:	d04e      	beq.n	80159ca <HAL_TIM_PWM_ConfigChannel+0xde>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2b08      	cmp	r3, #8
 8015930:	d900      	bls.n	8015934 <HAL_TIM_PWM_ConfigChannel+0x48>
 8015932:	e08e      	b.n	8015a52 <HAL_TIM_PWM_ConfigChannel+0x166>
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d003      	beq.n	8015942 <HAL_TIM_PWM_ConfigChannel+0x56>
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	2b04      	cmp	r3, #4
 801593e:	d021      	beq.n	8015984 <HAL_TIM_PWM_ConfigChannel+0x98>
 8015940:	e087      	b.n	8015a52 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	68ba      	ldr	r2, [r7, #8]
 8015948:	0011      	movs	r1, r2
 801594a:	0018      	movs	r0, r3
 801594c:	f000 f8f2 	bl	8015b34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	699a      	ldr	r2, [r3, #24]
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	2108      	movs	r1, #8
 801595c:	430a      	orrs	r2, r1
 801595e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	699a      	ldr	r2, [r3, #24]
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2104      	movs	r1, #4
 801596c:	438a      	bics	r2, r1
 801596e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	6999      	ldr	r1, [r3, #24]
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	68da      	ldr	r2, [r3, #12]
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	430a      	orrs	r2, r1
 8015980:	619a      	str	r2, [r3, #24]
      break;
 8015982:	e06b      	b.n	8015a5c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	68ba      	ldr	r2, [r7, #8]
 801598a:	0011      	movs	r1, r2
 801598c:	0018      	movs	r0, r3
 801598e:	f000 f90d 	bl	8015bac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	699a      	ldr	r2, [r3, #24]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2180      	movs	r1, #128	@ 0x80
 801599e:	0109      	lsls	r1, r1, #4
 80159a0:	430a      	orrs	r2, r1
 80159a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	699a      	ldr	r2, [r3, #24]
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	4931      	ldr	r1, [pc, #196]	@ (8015a74 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80159b0:	400a      	ands	r2, r1
 80159b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	6999      	ldr	r1, [r3, #24]
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	021a      	lsls	r2, r3, #8
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	430a      	orrs	r2, r1
 80159c6:	619a      	str	r2, [r3, #24]
      break;
 80159c8:	e048      	b.n	8015a5c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	68ba      	ldr	r2, [r7, #8]
 80159d0:	0011      	movs	r1, r2
 80159d2:	0018      	movs	r0, r3
 80159d4:	f000 f92c 	bl	8015c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	69da      	ldr	r2, [r3, #28]
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2108      	movs	r1, #8
 80159e4:	430a      	orrs	r2, r1
 80159e6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	69da      	ldr	r2, [r3, #28]
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	2104      	movs	r1, #4
 80159f4:	438a      	bics	r2, r1
 80159f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	69d9      	ldr	r1, [r3, #28]
 80159fe:	68bb      	ldr	r3, [r7, #8]
 8015a00:	68da      	ldr	r2, [r3, #12]
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	430a      	orrs	r2, r1
 8015a08:	61da      	str	r2, [r3, #28]
      break;
 8015a0a:	e027      	b.n	8015a5c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	68ba      	ldr	r2, [r7, #8]
 8015a12:	0011      	movs	r1, r2
 8015a14:	0018      	movs	r0, r3
 8015a16:	f000 f94b 	bl	8015cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	69da      	ldr	r2, [r3, #28]
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	681b      	ldr	r3, [r3, #0]
 8015a24:	2180      	movs	r1, #128	@ 0x80
 8015a26:	0109      	lsls	r1, r1, #4
 8015a28:	430a      	orrs	r2, r1
 8015a2a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	69da      	ldr	r2, [r3, #28]
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	490f      	ldr	r1, [pc, #60]	@ (8015a74 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8015a38:	400a      	ands	r2, r1
 8015a3a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	69d9      	ldr	r1, [r3, #28]
 8015a42:	68bb      	ldr	r3, [r7, #8]
 8015a44:	68db      	ldr	r3, [r3, #12]
 8015a46:	021a      	lsls	r2, r3, #8
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	430a      	orrs	r2, r1
 8015a4e:	61da      	str	r2, [r3, #28]
      break;
 8015a50:	e004      	b.n	8015a5c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8015a52:	2317      	movs	r3, #23
 8015a54:	18fb      	adds	r3, r7, r3
 8015a56:	2201      	movs	r2, #1
 8015a58:	701a      	strb	r2, [r3, #0]
      break;
 8015a5a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	2238      	movs	r2, #56	@ 0x38
 8015a60:	2100      	movs	r1, #0
 8015a62:	5499      	strb	r1, [r3, r2]

  return status;
 8015a64:	2317      	movs	r3, #23
 8015a66:	18fb      	adds	r3, r7, r3
 8015a68:	781b      	ldrb	r3, [r3, #0]
}
 8015a6a:	0018      	movs	r0, r3
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	b006      	add	sp, #24
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	46c0      	nop			@ (mov r8, r8)
 8015a74:	fffffbff 	.word	0xfffffbff

08015a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8015a78:	b580      	push	{r7, lr}
 8015a7a:	b084      	sub	sp, #16
 8015a7c:	af00      	add	r7, sp, #0
 8015a7e:	6078      	str	r0, [r7, #4]
 8015a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8015a88:	687a      	ldr	r2, [r7, #4]
 8015a8a:	2380      	movs	r3, #128	@ 0x80
 8015a8c:	05db      	lsls	r3, r3, #23
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d00b      	beq.n	8015aaa <TIM_Base_SetConfig+0x32>
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4a23      	ldr	r2, [pc, #140]	@ (8015b24 <TIM_Base_SetConfig+0xac>)
 8015a96:	4293      	cmp	r3, r2
 8015a98:	d007      	beq.n	8015aaa <TIM_Base_SetConfig+0x32>
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	4a22      	ldr	r2, [pc, #136]	@ (8015b28 <TIM_Base_SetConfig+0xb0>)
 8015a9e:	4293      	cmp	r3, r2
 8015aa0:	d003      	beq.n	8015aaa <TIM_Base_SetConfig+0x32>
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	4a21      	ldr	r2, [pc, #132]	@ (8015b2c <TIM_Base_SetConfig+0xb4>)
 8015aa6:	4293      	cmp	r3, r2
 8015aa8:	d108      	bne.n	8015abc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	2270      	movs	r2, #112	@ 0x70
 8015aae:	4393      	bics	r3, r2
 8015ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015ab2:	683b      	ldr	r3, [r7, #0]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	68fa      	ldr	r2, [r7, #12]
 8015ab8:	4313      	orrs	r3, r2
 8015aba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015abc:	687a      	ldr	r2, [r7, #4]
 8015abe:	2380      	movs	r3, #128	@ 0x80
 8015ac0:	05db      	lsls	r3, r3, #23
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d00b      	beq.n	8015ade <TIM_Base_SetConfig+0x66>
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	4a16      	ldr	r2, [pc, #88]	@ (8015b24 <TIM_Base_SetConfig+0xac>)
 8015aca:	4293      	cmp	r3, r2
 8015acc:	d007      	beq.n	8015ade <TIM_Base_SetConfig+0x66>
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	4a15      	ldr	r2, [pc, #84]	@ (8015b28 <TIM_Base_SetConfig+0xb0>)
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	d003      	beq.n	8015ade <TIM_Base_SetConfig+0x66>
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	4a14      	ldr	r2, [pc, #80]	@ (8015b2c <TIM_Base_SetConfig+0xb4>)
 8015ada:	4293      	cmp	r3, r2
 8015adc:	d108      	bne.n	8015af0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	4a13      	ldr	r2, [pc, #76]	@ (8015b30 <TIM_Base_SetConfig+0xb8>)
 8015ae2:	4013      	ands	r3, r2
 8015ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015ae6:	683b      	ldr	r3, [r7, #0]
 8015ae8:	68db      	ldr	r3, [r3, #12]
 8015aea:	68fa      	ldr	r2, [r7, #12]
 8015aec:	4313      	orrs	r3, r2
 8015aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	2280      	movs	r2, #128	@ 0x80
 8015af4:	4393      	bics	r3, r2
 8015af6:	001a      	movs	r2, r3
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	691b      	ldr	r3, [r3, #16]
 8015afc:	4313      	orrs	r3, r2
 8015afe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	68fa      	ldr	r2, [r7, #12]
 8015b04:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	689a      	ldr	r2, [r3, #8]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015b0e:	683b      	ldr	r3, [r7, #0]
 8015b10:	681a      	ldr	r2, [r3, #0]
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2201      	movs	r2, #1
 8015b1a:	615a      	str	r2, [r3, #20]
}
 8015b1c:	46c0      	nop			@ (mov r8, r8)
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	b004      	add	sp, #16
 8015b22:	bd80      	pop	{r7, pc}
 8015b24:	40000400 	.word	0x40000400
 8015b28:	40010800 	.word	0x40010800
 8015b2c:	40011400 	.word	0x40011400
 8015b30:	fffffcff 	.word	0xfffffcff

08015b34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b086      	sub	sp, #24
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	6a1b      	ldr	r3, [r3, #32]
 8015b42:	2201      	movs	r2, #1
 8015b44:	4393      	bics	r3, r2
 8015b46:	001a      	movs	r2, r3
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6a1b      	ldr	r3, [r3, #32]
 8015b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	699b      	ldr	r3, [r3, #24]
 8015b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	2270      	movs	r2, #112	@ 0x70
 8015b62:	4393      	bics	r3, r2
 8015b64:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	2203      	movs	r2, #3
 8015b6a:	4393      	bics	r3, r2
 8015b6c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	68fa      	ldr	r2, [r7, #12]
 8015b74:	4313      	orrs	r3, r2
 8015b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	2202      	movs	r2, #2
 8015b7c:	4393      	bics	r3, r2
 8015b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	689b      	ldr	r3, [r3, #8]
 8015b84:	697a      	ldr	r2, [r7, #20]
 8015b86:	4313      	orrs	r3, r2
 8015b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	693a      	ldr	r2, [r7, #16]
 8015b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	68fa      	ldr	r2, [r7, #12]
 8015b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	685a      	ldr	r2, [r3, #4]
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	697a      	ldr	r2, [r7, #20]
 8015ba2:	621a      	str	r2, [r3, #32]
}
 8015ba4:	46c0      	nop			@ (mov r8, r8)
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	b006      	add	sp, #24
 8015baa:	bd80      	pop	{r7, pc}

08015bac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b086      	sub	sp, #24
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	6a1b      	ldr	r3, [r3, #32]
 8015bba:	2210      	movs	r2, #16
 8015bbc:	4393      	bics	r3, r2
 8015bbe:	001a      	movs	r2, r3
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6a1b      	ldr	r3, [r3, #32]
 8015bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	699b      	ldr	r3, [r3, #24]
 8015bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	4a13      	ldr	r2, [pc, #76]	@ (8015c28 <TIM_OC2_SetConfig+0x7c>)
 8015bda:	4013      	ands	r3, r2
 8015bdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	4a12      	ldr	r2, [pc, #72]	@ (8015c2c <TIM_OC2_SetConfig+0x80>)
 8015be2:	4013      	ands	r3, r2
 8015be4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015be6:	683b      	ldr	r3, [r7, #0]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	021b      	lsls	r3, r3, #8
 8015bec:	68fa      	ldr	r2, [r7, #12]
 8015bee:	4313      	orrs	r3, r2
 8015bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	2220      	movs	r2, #32
 8015bf6:	4393      	bics	r3, r2
 8015bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	689b      	ldr	r3, [r3, #8]
 8015bfe:	011b      	lsls	r3, r3, #4
 8015c00:	697a      	ldr	r2, [r7, #20]
 8015c02:	4313      	orrs	r3, r2
 8015c04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	693a      	ldr	r2, [r7, #16]
 8015c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	68fa      	ldr	r2, [r7, #12]
 8015c10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	685a      	ldr	r2, [r3, #4]
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	697a      	ldr	r2, [r7, #20]
 8015c1e:	621a      	str	r2, [r3, #32]
}
 8015c20:	46c0      	nop			@ (mov r8, r8)
 8015c22:	46bd      	mov	sp, r7
 8015c24:	b006      	add	sp, #24
 8015c26:	bd80      	pop	{r7, pc}
 8015c28:	ffff8fff 	.word	0xffff8fff
 8015c2c:	fffffcff 	.word	0xfffffcff

08015c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b086      	sub	sp, #24
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
 8015c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6a1b      	ldr	r3, [r3, #32]
 8015c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8015ca8 <TIM_OC3_SetConfig+0x78>)
 8015c40:	401a      	ands	r2, r3
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6a1b      	ldr	r3, [r3, #32]
 8015c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	69db      	ldr	r3, [r3, #28]
 8015c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	2270      	movs	r2, #112	@ 0x70
 8015c5c:	4393      	bics	r3, r2
 8015c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	2203      	movs	r2, #3
 8015c64:	4393      	bics	r3, r2
 8015c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	68fa      	ldr	r2, [r7, #12]
 8015c6e:	4313      	orrs	r3, r2
 8015c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8015c72:	697b      	ldr	r3, [r7, #20]
 8015c74:	4a0d      	ldr	r2, [pc, #52]	@ (8015cac <TIM_OC3_SetConfig+0x7c>)
 8015c76:	4013      	ands	r3, r2
 8015c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8015c7a:	683b      	ldr	r3, [r7, #0]
 8015c7c:	689b      	ldr	r3, [r3, #8]
 8015c7e:	021b      	lsls	r3, r3, #8
 8015c80:	697a      	ldr	r2, [r7, #20]
 8015c82:	4313      	orrs	r3, r2
 8015c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	693a      	ldr	r2, [r7, #16]
 8015c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	68fa      	ldr	r2, [r7, #12]
 8015c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	685a      	ldr	r2, [r3, #4]
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	697a      	ldr	r2, [r7, #20]
 8015c9e:	621a      	str	r2, [r3, #32]
}
 8015ca0:	46c0      	nop			@ (mov r8, r8)
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	b006      	add	sp, #24
 8015ca6:	bd80      	pop	{r7, pc}
 8015ca8:	fffffeff 	.word	0xfffffeff
 8015cac:	fffffdff 	.word	0xfffffdff

08015cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b086      	sub	sp, #24
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
 8015cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	6a1b      	ldr	r3, [r3, #32]
 8015cbe:	4a1b      	ldr	r2, [pc, #108]	@ (8015d2c <TIM_OC4_SetConfig+0x7c>)
 8015cc0:	401a      	ands	r2, r3
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	6a1b      	ldr	r3, [r3, #32]
 8015cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	69db      	ldr	r3, [r3, #28]
 8015cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	4a15      	ldr	r2, [pc, #84]	@ (8015d30 <TIM_OC4_SetConfig+0x80>)
 8015cdc:	4013      	ands	r3, r2
 8015cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	4a14      	ldr	r2, [pc, #80]	@ (8015d34 <TIM_OC4_SetConfig+0x84>)
 8015ce4:	4013      	ands	r3, r2
 8015ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	021b      	lsls	r3, r3, #8
 8015cee:	68fa      	ldr	r2, [r7, #12]
 8015cf0:	4313      	orrs	r3, r2
 8015cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	4a10      	ldr	r2, [pc, #64]	@ (8015d38 <TIM_OC4_SetConfig+0x88>)
 8015cf8:	4013      	ands	r3, r2
 8015cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	689b      	ldr	r3, [r3, #8]
 8015d00:	031b      	lsls	r3, r3, #12
 8015d02:	697a      	ldr	r2, [r7, #20]
 8015d04:	4313      	orrs	r3, r2
 8015d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	693a      	ldr	r2, [r7, #16]
 8015d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	68fa      	ldr	r2, [r7, #12]
 8015d12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8015d14:	683b      	ldr	r3, [r7, #0]
 8015d16:	685a      	ldr	r2, [r3, #4]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	697a      	ldr	r2, [r7, #20]
 8015d20:	621a      	str	r2, [r3, #32]
}
 8015d22:	46c0      	nop			@ (mov r8, r8)
 8015d24:	46bd      	mov	sp, r7
 8015d26:	b006      	add	sp, #24
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	46c0      	nop			@ (mov r8, r8)
 8015d2c:	ffffefff 	.word	0xffffefff
 8015d30:	ffff8fff 	.word	0xffff8fff
 8015d34:	fffffcff 	.word	0xfffffcff
 8015d38:	ffffdfff 	.word	0xffffdfff

08015d3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b086      	sub	sp, #24
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	60f8      	str	r0, [r7, #12]
 8015d44:	60b9      	str	r1, [r7, #8]
 8015d46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	221f      	movs	r2, #31
 8015d4c:	4013      	ands	r3, r2
 8015d4e:	2201      	movs	r2, #1
 8015d50:	409a      	lsls	r2, r3
 8015d52:	0013      	movs	r3, r2
 8015d54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	6a1b      	ldr	r3, [r3, #32]
 8015d5a:	697a      	ldr	r2, [r7, #20]
 8015d5c:	43d2      	mvns	r2, r2
 8015d5e:	401a      	ands	r2, r3
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	6a1a      	ldr	r2, [r3, #32]
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	211f      	movs	r1, #31
 8015d6c:	400b      	ands	r3, r1
 8015d6e:	6879      	ldr	r1, [r7, #4]
 8015d70:	4099      	lsls	r1, r3
 8015d72:	000b      	movs	r3, r1
 8015d74:	431a      	orrs	r2, r3
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	621a      	str	r2, [r3, #32]
}
 8015d7a:	46c0      	nop			@ (mov r8, r8)
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	b006      	add	sp, #24
 8015d80:	bd80      	pop	{r7, pc}
	...

08015d84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b084      	sub	sp, #16
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
 8015d8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	2238      	movs	r2, #56	@ 0x38
 8015d92:	5c9b      	ldrb	r3, [r3, r2]
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d101      	bne.n	8015d9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015d98:	2302      	movs	r3, #2
 8015d9a:	e047      	b.n	8015e2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	2238      	movs	r2, #56	@ 0x38
 8015da0:	2101      	movs	r1, #1
 8015da2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	2239      	movs	r2, #57	@ 0x39
 8015da8:	2102      	movs	r1, #2
 8015daa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	685b      	ldr	r3, [r3, #4]
 8015db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	689b      	ldr	r3, [r3, #8]
 8015dba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2270      	movs	r2, #112	@ 0x70
 8015dc0:	4393      	bics	r3, r2
 8015dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	68fa      	ldr	r2, [r7, #12]
 8015dca:	4313      	orrs	r3, r2
 8015dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	68fa      	ldr	r2, [r7, #12]
 8015dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	2380      	movs	r3, #128	@ 0x80
 8015ddc:	05db      	lsls	r3, r3, #23
 8015dde:	429a      	cmp	r2, r3
 8015de0:	d00e      	beq.n	8015e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	4a13      	ldr	r2, [pc, #76]	@ (8015e34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8015de8:	4293      	cmp	r3, r2
 8015dea:	d009      	beq.n	8015e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	4a11      	ldr	r2, [pc, #68]	@ (8015e38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8015df2:	4293      	cmp	r3, r2
 8015df4:	d004      	beq.n	8015e00 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	4a10      	ldr	r2, [pc, #64]	@ (8015e3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8015dfc:	4293      	cmp	r3, r2
 8015dfe:	d10c      	bne.n	8015e1a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	2280      	movs	r2, #128	@ 0x80
 8015e04:	4393      	bics	r3, r2
 8015e06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	68ba      	ldr	r2, [r7, #8]
 8015e0e:	4313      	orrs	r3, r2
 8015e10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	68ba      	ldr	r2, [r7, #8]
 8015e18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2239      	movs	r2, #57	@ 0x39
 8015e1e:	2101      	movs	r1, #1
 8015e20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	2238      	movs	r2, #56	@ 0x38
 8015e26:	2100      	movs	r1, #0
 8015e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e2a:	2300      	movs	r3, #0
}
 8015e2c:	0018      	movs	r0, r3
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	b004      	add	sp, #16
 8015e32:	bd80      	pop	{r7, pc}
 8015e34:	40000400 	.word	0x40000400
 8015e38:	40010800 	.word	0x40010800
 8015e3c:	40011400 	.word	0x40011400

08015e40 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b082      	sub	sp, #8
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	2238      	movs	r2, #56	@ 0x38
 8015e4e:	5c9b      	ldrb	r3, [r3, r2]
 8015e50:	2b01      	cmp	r3, #1
 8015e52:	d101      	bne.n	8015e58 <HAL_TIMEx_RemapConfig+0x18>
 8015e54:	2302      	movs	r3, #2
 8015e56:	e00c      	b.n	8015e72 <HAL_TIMEx_RemapConfig+0x32>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	2238      	movs	r2, #56	@ 0x38
 8015e5c:	2101      	movs	r1, #1
 8015e5e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	683a      	ldr	r2, [r7, #0]
 8015e66:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2238      	movs	r2, #56	@ 0x38
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8015e70:	2300      	movs	r3, #0
}
 8015e72:	0018      	movs	r0, r3
 8015e74:	46bd      	mov	sp, r7
 8015e76:	b002      	add	sp, #8
 8015e78:	bd80      	pop	{r7, pc}
	...

08015e7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b082      	sub	sp, #8
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d101      	bne.n	8015e8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015e8a:	2301      	movs	r3, #1
 8015e8c:	e053      	b.n	8015f36 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d116      	bne.n	8015ec4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2278      	movs	r2, #120	@ 0x78
 8015e9a:	2100      	movs	r1, #0
 8015e9c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	0018      	movs	r0, r3
 8015ea2:	f000 fd65 	bl	8016970 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	22b0      	movs	r2, #176	@ 0xb0
 8015eaa:	589b      	ldr	r3, [r3, r2]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d103      	bne.n	8015eb8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	21b0      	movs	r1, #176	@ 0xb0
 8015eb4:	4a22      	ldr	r2, [pc, #136]	@ (8015f40 <HAL_UART_Init+0xc4>)
 8015eb6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	22b0      	movs	r2, #176	@ 0xb0
 8015ebc:	589b      	ldr	r3, [r3, r2]
 8015ebe:	687a      	ldr	r2, [r7, #4]
 8015ec0:	0010      	movs	r0, r2
 8015ec2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2224      	movs	r2, #36	@ 0x24
 8015ec8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	681a      	ldr	r2, [r3, #0]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	2101      	movs	r1, #1
 8015ed6:	438a      	bics	r2, r1
 8015ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	0018      	movs	r0, r3
 8015ede:	f000 fd8b 	bl	80169f8 <UART_SetConfig>
 8015ee2:	0003      	movs	r3, r0
 8015ee4:	2b01      	cmp	r3, #1
 8015ee6:	d101      	bne.n	8015eec <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8015ee8:	2301      	movs	r3, #1
 8015eea:	e024      	b.n	8015f36 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d003      	beq.n	8015efc <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	0018      	movs	r0, r3
 8015ef8:	f001 f81c 	bl	8016f34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	685a      	ldr	r2, [r3, #4]
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	490f      	ldr	r1, [pc, #60]	@ (8015f44 <HAL_UART_Init+0xc8>)
 8015f08:	400a      	ands	r2, r1
 8015f0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	689a      	ldr	r2, [r3, #8]
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	212a      	movs	r1, #42	@ 0x2a
 8015f18:	438a      	bics	r2, r1
 8015f1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	681a      	ldr	r2, [r3, #0]
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	2101      	movs	r1, #1
 8015f28:	430a      	orrs	r2, r1
 8015f2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	0018      	movs	r0, r3
 8015f30:	f001 f8b4 	bl	801709c <UART_CheckIdleState>
 8015f34:	0003      	movs	r3, r0
}
 8015f36:	0018      	movs	r0, r3
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	b002      	add	sp, #8
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	46c0      	nop			@ (mov r8, r8)
 8015f40:	0800d141 	.word	0x0800d141
 8015f44:	ffffb7ff 	.word	0xffffb7ff

08015f48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015f48:	b580      	push	{r7, lr}
 8015f4a:	b08a      	sub	sp, #40	@ 0x28
 8015f4c:	af02      	add	r7, sp, #8
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	60b9      	str	r1, [r7, #8]
 8015f52:	603b      	str	r3, [r7, #0]
 8015f54:	1dbb      	adds	r3, r7, #6
 8015f56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015f5c:	2b20      	cmp	r3, #32
 8015f5e:	d000      	beq.n	8015f62 <HAL_UART_Transmit+0x1a>
 8015f60:	e08c      	b.n	801607c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8015f62:	68bb      	ldr	r3, [r7, #8]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d003      	beq.n	8015f70 <HAL_UART_Transmit+0x28>
 8015f68:	1dbb      	adds	r3, r7, #6
 8015f6a:	881b      	ldrh	r3, [r3, #0]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d101      	bne.n	8015f74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8015f70:	2301      	movs	r3, #1
 8015f72:	e084      	b.n	801607e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	689a      	ldr	r2, [r3, #8]
 8015f78:	2380      	movs	r3, #128	@ 0x80
 8015f7a:	015b      	lsls	r3, r3, #5
 8015f7c:	429a      	cmp	r2, r3
 8015f7e:	d109      	bne.n	8015f94 <HAL_UART_Transmit+0x4c>
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	691b      	ldr	r3, [r3, #16]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d105      	bne.n	8015f94 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8015f88:	68bb      	ldr	r3, [r7, #8]
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	4013      	ands	r3, r2
 8015f8e:	d001      	beq.n	8015f94 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8015f90:	2301      	movs	r3, #1
 8015f92:	e074      	b.n	801607e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	2284      	movs	r2, #132	@ 0x84
 8015f98:	2100      	movs	r1, #0
 8015f9a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	2221      	movs	r2, #33	@ 0x21
 8015fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015fa2:	f7f7 fdf9 	bl	800db98 <HAL_GetTick>
 8015fa6:	0003      	movs	r3, r0
 8015fa8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	1dba      	adds	r2, r7, #6
 8015fae:	2150      	movs	r1, #80	@ 0x50
 8015fb0:	8812      	ldrh	r2, [r2, #0]
 8015fb2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	1dba      	adds	r2, r7, #6
 8015fb8:	2152      	movs	r1, #82	@ 0x52
 8015fba:	8812      	ldrh	r2, [r2, #0]
 8015fbc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	689a      	ldr	r2, [r3, #8]
 8015fc2:	2380      	movs	r3, #128	@ 0x80
 8015fc4:	015b      	lsls	r3, r3, #5
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d108      	bne.n	8015fdc <HAL_UART_Transmit+0x94>
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	691b      	ldr	r3, [r3, #16]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d104      	bne.n	8015fdc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	61bb      	str	r3, [r7, #24]
 8015fda:	e003      	b.n	8015fe4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8015fdc:	68bb      	ldr	r3, [r7, #8]
 8015fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015fe4:	e02f      	b.n	8016046 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015fe6:	697a      	ldr	r2, [r7, #20]
 8015fe8:	68f8      	ldr	r0, [r7, #12]
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	9300      	str	r3, [sp, #0]
 8015fee:	0013      	movs	r3, r2
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	2180      	movs	r1, #128	@ 0x80
 8015ff4:	f001 f8fa 	bl	80171ec <UART_WaitOnFlagUntilTimeout>
 8015ff8:	1e03      	subs	r3, r0, #0
 8015ffa:	d004      	beq.n	8016006 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2220      	movs	r2, #32
 8016000:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8016002:	2303      	movs	r3, #3
 8016004:	e03b      	b.n	801607e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8016006:	69fb      	ldr	r3, [r7, #28]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d10b      	bne.n	8016024 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	881b      	ldrh	r3, [r3, #0]
 8016010:	001a      	movs	r2, r3
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	05d2      	lsls	r2, r2, #23
 8016018:	0dd2      	lsrs	r2, r2, #23
 801601a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 801601c:	69bb      	ldr	r3, [r7, #24]
 801601e:	3302      	adds	r3, #2
 8016020:	61bb      	str	r3, [r7, #24]
 8016022:	e007      	b.n	8016034 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8016024:	69fb      	ldr	r3, [r7, #28]
 8016026:	781a      	ldrb	r2, [r3, #0]
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801602e:	69fb      	ldr	r3, [r7, #28]
 8016030:	3301      	adds	r3, #1
 8016032:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	2252      	movs	r2, #82	@ 0x52
 8016038:	5a9b      	ldrh	r3, [r3, r2]
 801603a:	b29b      	uxth	r3, r3
 801603c:	3b01      	subs	r3, #1
 801603e:	b299      	uxth	r1, r3
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2252      	movs	r2, #82	@ 0x52
 8016044:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	2252      	movs	r2, #82	@ 0x52
 801604a:	5a9b      	ldrh	r3, [r3, r2]
 801604c:	b29b      	uxth	r3, r3
 801604e:	2b00      	cmp	r3, #0
 8016050:	d1c9      	bne.n	8015fe6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8016052:	697a      	ldr	r2, [r7, #20]
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	0013      	movs	r3, r2
 801605c:	2200      	movs	r2, #0
 801605e:	2140      	movs	r1, #64	@ 0x40
 8016060:	f001 f8c4 	bl	80171ec <UART_WaitOnFlagUntilTimeout>
 8016064:	1e03      	subs	r3, r0, #0
 8016066:	d004      	beq.n	8016072 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	2220      	movs	r2, #32
 801606c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 801606e:	2303      	movs	r3, #3
 8016070:	e005      	b.n	801607e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	2220      	movs	r2, #32
 8016076:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8016078:	2300      	movs	r3, #0
 801607a:	e000      	b.n	801607e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 801607c:	2302      	movs	r3, #2
  }
}
 801607e:	0018      	movs	r0, r3
 8016080:	46bd      	mov	sp, r7
 8016082:	b008      	add	sp, #32
 8016084:	bd80      	pop	{r7, pc}
	...

08016088 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b088      	sub	sp, #32
 801608c:	af00      	add	r7, sp, #0
 801608e:	60f8      	str	r0, [r7, #12]
 8016090:	60b9      	str	r1, [r7, #8]
 8016092:	1dbb      	adds	r3, r7, #6
 8016094:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2280      	movs	r2, #128	@ 0x80
 801609a:	589b      	ldr	r3, [r3, r2]
 801609c:	2b20      	cmp	r3, #32
 801609e:	d14a      	bne.n	8016136 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d003      	beq.n	80160ae <HAL_UART_Receive_IT+0x26>
 80160a6:	1dbb      	adds	r3, r7, #6
 80160a8:	881b      	ldrh	r3, [r3, #0]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d101      	bne.n	80160b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80160ae:	2301      	movs	r3, #1
 80160b0:	e042      	b.n	8016138 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	689a      	ldr	r2, [r3, #8]
 80160b6:	2380      	movs	r3, #128	@ 0x80
 80160b8:	015b      	lsls	r3, r3, #5
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d109      	bne.n	80160d2 <HAL_UART_Receive_IT+0x4a>
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	691b      	ldr	r3, [r3, #16]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d105      	bne.n	80160d2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	2201      	movs	r2, #1
 80160ca:	4013      	ands	r3, r2
 80160cc:	d001      	beq.n	80160d2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80160ce:	2301      	movs	r3, #1
 80160d0:	e032      	b.n	8016138 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	2200      	movs	r2, #0
 80160d6:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	4a18      	ldr	r2, [pc, #96]	@ (8016140 <HAL_UART_Receive_IT+0xb8>)
 80160de:	4293      	cmp	r3, r2
 80160e0:	d020      	beq.n	8016124 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	685a      	ldr	r2, [r3, #4]
 80160e8:	2380      	movs	r3, #128	@ 0x80
 80160ea:	041b      	lsls	r3, r3, #16
 80160ec:	4013      	ands	r3, r2
 80160ee:	d019      	beq.n	8016124 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160f0:	f3ef 8310 	mrs	r3, PRIMASK
 80160f4:	613b      	str	r3, [r7, #16]
  return(result);
 80160f6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80160f8:	61fb      	str	r3, [r7, #28]
 80160fa:	2301      	movs	r3, #1
 80160fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160fe:	697b      	ldr	r3, [r7, #20]
 8016100:	f383 8810 	msr	PRIMASK, r3
}
 8016104:	46c0      	nop			@ (mov r8, r8)
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	681a      	ldr	r2, [r3, #0]
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	2180      	movs	r1, #128	@ 0x80
 8016112:	04c9      	lsls	r1, r1, #19
 8016114:	430a      	orrs	r2, r1
 8016116:	601a      	str	r2, [r3, #0]
 8016118:	69fb      	ldr	r3, [r7, #28]
 801611a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801611c:	69bb      	ldr	r3, [r7, #24]
 801611e:	f383 8810 	msr	PRIMASK, r3
}
 8016122:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8016124:	1dbb      	adds	r3, r7, #6
 8016126:	881a      	ldrh	r2, [r3, #0]
 8016128:	68b9      	ldr	r1, [r7, #8]
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	0018      	movs	r0, r3
 801612e:	f001 f8c7 	bl	80172c0 <UART_Start_Receive_IT>
 8016132:	0003      	movs	r3, r0
 8016134:	e000      	b.n	8016138 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016136:	2302      	movs	r3, #2
  }
}
 8016138:	0018      	movs	r0, r3
 801613a:	46bd      	mov	sp, r7
 801613c:	b008      	add	sp, #32
 801613e:	bd80      	pop	{r7, pc}
 8016140:	40004800 	.word	0x40004800

08016144 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b088      	sub	sp, #32
 8016148:	af00      	add	r7, sp, #0
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	60b9      	str	r1, [r7, #8]
 801614e:	1dbb      	adds	r3, r7, #6
 8016150:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016156:	2b20      	cmp	r3, #32
 8016158:	d000      	beq.n	801615c <HAL_UART_Transmit_DMA+0x18>
 801615a:	e077      	b.n	801624c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 801615c:	68bb      	ldr	r3, [r7, #8]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d003      	beq.n	801616a <HAL_UART_Transmit_DMA+0x26>
 8016162:	1dbb      	adds	r3, r7, #6
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d101      	bne.n	801616e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 801616a:	2301      	movs	r3, #1
 801616c:	e06f      	b.n	801624e <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	689a      	ldr	r2, [r3, #8]
 8016172:	2380      	movs	r3, #128	@ 0x80
 8016174:	015b      	lsls	r3, r3, #5
 8016176:	429a      	cmp	r2, r3
 8016178:	d109      	bne.n	801618e <HAL_UART_Transmit_DMA+0x4a>
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	691b      	ldr	r3, [r3, #16]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d105      	bne.n	801618e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8016182:	68bb      	ldr	r3, [r7, #8]
 8016184:	2201      	movs	r2, #1
 8016186:	4013      	ands	r3, r2
 8016188:	d001      	beq.n	801618e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 801618a:	2301      	movs	r3, #1
 801618c:	e05f      	b.n	801624e <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	68ba      	ldr	r2, [r7, #8]
 8016192:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	1dba      	adds	r2, r7, #6
 8016198:	2150      	movs	r1, #80	@ 0x50
 801619a:	8812      	ldrh	r2, [r2, #0]
 801619c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	1dba      	adds	r2, r7, #6
 80161a2:	2152      	movs	r1, #82	@ 0x52
 80161a4:	8812      	ldrh	r2, [r2, #0]
 80161a6:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	2284      	movs	r2, #132	@ 0x84
 80161ac:	2100      	movs	r1, #0
 80161ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	2221      	movs	r2, #33	@ 0x21
 80161b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d027      	beq.n	801620e <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161c2:	4a25      	ldr	r2, [pc, #148]	@ (8016258 <HAL_UART_Transmit_DMA+0x114>)
 80161c4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161ca:	4a24      	ldr	r2, [pc, #144]	@ (801625c <HAL_UART_Transmit_DMA+0x118>)
 80161cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161d2:	4a23      	ldr	r2, [pc, #140]	@ (8016260 <HAL_UART_Transmit_DMA+0x11c>)
 80161d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161da:	2200      	movs	r2, #0
 80161dc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80161e6:	0019      	movs	r1, r3
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	3328      	adds	r3, #40	@ 0x28
 80161ee:	001a      	movs	r2, r3
 80161f0:	1dbb      	adds	r3, r7, #6
 80161f2:	881b      	ldrh	r3, [r3, #0]
 80161f4:	f7f8 fa0c 	bl	800e610 <HAL_DMA_Start_IT>
 80161f8:	1e03      	subs	r3, r0, #0
 80161fa:	d008      	beq.n	801620e <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	2284      	movs	r2, #132	@ 0x84
 8016200:	2110      	movs	r1, #16
 8016202:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2220      	movs	r2, #32
 8016208:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 801620a:	2301      	movs	r3, #1
 801620c:	e01f      	b.n	801624e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	2240      	movs	r2, #64	@ 0x40
 8016214:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016216:	f3ef 8310 	mrs	r3, PRIMASK
 801621a:	613b      	str	r3, [r7, #16]
  return(result);
 801621c:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801621e:	61fb      	str	r3, [r7, #28]
 8016220:	2301      	movs	r3, #1
 8016222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016224:	697b      	ldr	r3, [r7, #20]
 8016226:	f383 8810 	msr	PRIMASK, r3
}
 801622a:	46c0      	nop			@ (mov r8, r8)
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	689a      	ldr	r2, [r3, #8]
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	2180      	movs	r1, #128	@ 0x80
 8016238:	430a      	orrs	r2, r1
 801623a:	609a      	str	r2, [r3, #8]
 801623c:	69fb      	ldr	r3, [r7, #28]
 801623e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016240:	69bb      	ldr	r3, [r7, #24]
 8016242:	f383 8810 	msr	PRIMASK, r3
}
 8016246:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8016248:	2300      	movs	r3, #0
 801624a:	e000      	b.n	801624e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 801624c:	2302      	movs	r3, #2
  }
}
 801624e:	0018      	movs	r0, r3
 8016250:	46bd      	mov	sp, r7
 8016252:	b008      	add	sp, #32
 8016254:	bd80      	pop	{r7, pc}
 8016256:	46c0      	nop			@ (mov r8, r8)
 8016258:	080176a5 	.word	0x080176a5
 801625c:	08017741 	.word	0x08017741
 8016260:	080178e1 	.word	0x080178e1

08016264 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b088      	sub	sp, #32
 8016268:	af00      	add	r7, sp, #0
 801626a:	60f8      	str	r0, [r7, #12]
 801626c:	60b9      	str	r1, [r7, #8]
 801626e:	1dbb      	adds	r3, r7, #6
 8016270:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	2280      	movs	r2, #128	@ 0x80
 8016276:	589b      	ldr	r3, [r3, r2]
 8016278:	2b20      	cmp	r3, #32
 801627a:	d14a      	bne.n	8016312 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d003      	beq.n	801628a <HAL_UART_Receive_DMA+0x26>
 8016282:	1dbb      	adds	r3, r7, #6
 8016284:	881b      	ldrh	r3, [r3, #0]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d101      	bne.n	801628e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801628a:	2301      	movs	r3, #1
 801628c:	e042      	b.n	8016314 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	689a      	ldr	r2, [r3, #8]
 8016292:	2380      	movs	r3, #128	@ 0x80
 8016294:	015b      	lsls	r3, r3, #5
 8016296:	429a      	cmp	r2, r3
 8016298:	d109      	bne.n	80162ae <HAL_UART_Receive_DMA+0x4a>
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	691b      	ldr	r3, [r3, #16]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d105      	bne.n	80162ae <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80162a2:	68bb      	ldr	r3, [r7, #8]
 80162a4:	2201      	movs	r2, #1
 80162a6:	4013      	ands	r3, r2
 80162a8:	d001      	beq.n	80162ae <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80162aa:	2301      	movs	r3, #1
 80162ac:	e032      	b.n	8016314 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	2200      	movs	r2, #0
 80162b2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	4a18      	ldr	r2, [pc, #96]	@ (801631c <HAL_UART_Receive_DMA+0xb8>)
 80162ba:	4293      	cmp	r3, r2
 80162bc:	d020      	beq.n	8016300 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	685a      	ldr	r2, [r3, #4]
 80162c4:	2380      	movs	r3, #128	@ 0x80
 80162c6:	041b      	lsls	r3, r3, #16
 80162c8:	4013      	ands	r3, r2
 80162ca:	d019      	beq.n	8016300 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162cc:	f3ef 8310 	mrs	r3, PRIMASK
 80162d0:	613b      	str	r3, [r7, #16]
  return(result);
 80162d2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80162d4:	61fb      	str	r3, [r7, #28]
 80162d6:	2301      	movs	r3, #1
 80162d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	f383 8810 	msr	PRIMASK, r3
}
 80162e0:	46c0      	nop			@ (mov r8, r8)
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	681a      	ldr	r2, [r3, #0]
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	2180      	movs	r1, #128	@ 0x80
 80162ee:	04c9      	lsls	r1, r1, #19
 80162f0:	430a      	orrs	r2, r1
 80162f2:	601a      	str	r2, [r3, #0]
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80162f8:	69bb      	ldr	r3, [r7, #24]
 80162fa:	f383 8810 	msr	PRIMASK, r3
}
 80162fe:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016300:	1dbb      	adds	r3, r7, #6
 8016302:	881a      	ldrh	r2, [r3, #0]
 8016304:	68b9      	ldr	r1, [r7, #8]
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	0018      	movs	r0, r3
 801630a:	f001 f8a3 	bl	8017454 <UART_Start_Receive_DMA>
 801630e:	0003      	movs	r3, r0
 8016310:	e000      	b.n	8016314 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8016312:	2302      	movs	r3, #2
  }
}
 8016314:	0018      	movs	r0, r3
 8016316:	46bd      	mov	sp, r7
 8016318:	b008      	add	sp, #32
 801631a:	bd80      	pop	{r7, pc}
 801631c:	40004800 	.word	0x40004800

08016320 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016320:	b590      	push	{r4, r7, lr}
 8016322:	b0ab      	sub	sp, #172	@ 0xac
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	69db      	ldr	r3, [r3, #28]
 801632e:	22a4      	movs	r2, #164	@ 0xa4
 8016330:	18b9      	adds	r1, r7, r2
 8016332:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	20a0      	movs	r0, #160	@ 0xa0
 801633c:	1839      	adds	r1, r7, r0
 801633e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	689b      	ldr	r3, [r3, #8]
 8016346:	219c      	movs	r1, #156	@ 0x9c
 8016348:	1879      	adds	r1, r7, r1
 801634a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801634c:	0011      	movs	r1, r2
 801634e:	18bb      	adds	r3, r7, r2
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	4a9c      	ldr	r2, [pc, #624]	@ (80165c4 <HAL_UART_IRQHandler+0x2a4>)
 8016354:	4013      	ands	r3, r2
 8016356:	2298      	movs	r2, #152	@ 0x98
 8016358:	18bc      	adds	r4, r7, r2
 801635a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 801635c:	18bb      	adds	r3, r7, r2
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d114      	bne.n	801638e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8016364:	187b      	adds	r3, r7, r1
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2220      	movs	r2, #32
 801636a:	4013      	ands	r3, r2
 801636c:	d00f      	beq.n	801638e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801636e:	183b      	adds	r3, r7, r0
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	2220      	movs	r2, #32
 8016374:	4013      	ands	r3, r2
 8016376:	d00a      	beq.n	801638e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801637c:	2b00      	cmp	r3, #0
 801637e:	d100      	bne.n	8016382 <HAL_UART_IRQHandler+0x62>
 8016380:	e2aa      	b.n	80168d8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016386:	687a      	ldr	r2, [r7, #4]
 8016388:	0010      	movs	r0, r2
 801638a:	4798      	blx	r3
      }
      return;
 801638c:	e2a4      	b.n	80168d8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801638e:	2398      	movs	r3, #152	@ 0x98
 8016390:	18fb      	adds	r3, r7, r3
 8016392:	681b      	ldr	r3, [r3, #0]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d100      	bne.n	801639a <HAL_UART_IRQHandler+0x7a>
 8016398:	e11a      	b.n	80165d0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801639a:	239c      	movs	r3, #156	@ 0x9c
 801639c:	18fb      	adds	r3, r7, r3
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	2201      	movs	r2, #1
 80163a2:	4013      	ands	r3, r2
 80163a4:	d106      	bne.n	80163b4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80163a6:	23a0      	movs	r3, #160	@ 0xa0
 80163a8:	18fb      	adds	r3, r7, r3
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	4a86      	ldr	r2, [pc, #536]	@ (80165c8 <HAL_UART_IRQHandler+0x2a8>)
 80163ae:	4013      	ands	r3, r2
 80163b0:	d100      	bne.n	80163b4 <HAL_UART_IRQHandler+0x94>
 80163b2:	e10d      	b.n	80165d0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80163b4:	23a4      	movs	r3, #164	@ 0xa4
 80163b6:	18fb      	adds	r3, r7, r3
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	2201      	movs	r2, #1
 80163bc:	4013      	ands	r3, r2
 80163be:	d012      	beq.n	80163e6 <HAL_UART_IRQHandler+0xc6>
 80163c0:	23a0      	movs	r3, #160	@ 0xa0
 80163c2:	18fb      	adds	r3, r7, r3
 80163c4:	681a      	ldr	r2, [r3, #0]
 80163c6:	2380      	movs	r3, #128	@ 0x80
 80163c8:	005b      	lsls	r3, r3, #1
 80163ca:	4013      	ands	r3, r2
 80163cc:	d00b      	beq.n	80163e6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	2201      	movs	r2, #1
 80163d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2284      	movs	r2, #132	@ 0x84
 80163da:	589b      	ldr	r3, [r3, r2]
 80163dc:	2201      	movs	r2, #1
 80163de:	431a      	orrs	r2, r3
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2184      	movs	r1, #132	@ 0x84
 80163e4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80163e6:	23a4      	movs	r3, #164	@ 0xa4
 80163e8:	18fb      	adds	r3, r7, r3
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	2202      	movs	r2, #2
 80163ee:	4013      	ands	r3, r2
 80163f0:	d011      	beq.n	8016416 <HAL_UART_IRQHandler+0xf6>
 80163f2:	239c      	movs	r3, #156	@ 0x9c
 80163f4:	18fb      	adds	r3, r7, r3
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2201      	movs	r2, #1
 80163fa:	4013      	ands	r3, r2
 80163fc:	d00b      	beq.n	8016416 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	2202      	movs	r2, #2
 8016404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	2284      	movs	r2, #132	@ 0x84
 801640a:	589b      	ldr	r3, [r3, r2]
 801640c:	2204      	movs	r2, #4
 801640e:	431a      	orrs	r2, r3
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2184      	movs	r1, #132	@ 0x84
 8016414:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016416:	23a4      	movs	r3, #164	@ 0xa4
 8016418:	18fb      	adds	r3, r7, r3
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	2204      	movs	r2, #4
 801641e:	4013      	ands	r3, r2
 8016420:	d011      	beq.n	8016446 <HAL_UART_IRQHandler+0x126>
 8016422:	239c      	movs	r3, #156	@ 0x9c
 8016424:	18fb      	adds	r3, r7, r3
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	2201      	movs	r2, #1
 801642a:	4013      	ands	r3, r2
 801642c:	d00b      	beq.n	8016446 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	2204      	movs	r2, #4
 8016434:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2284      	movs	r2, #132	@ 0x84
 801643a:	589b      	ldr	r3, [r3, r2]
 801643c:	2202      	movs	r2, #2
 801643e:	431a      	orrs	r2, r3
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	2184      	movs	r1, #132	@ 0x84
 8016444:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8016446:	23a4      	movs	r3, #164	@ 0xa4
 8016448:	18fb      	adds	r3, r7, r3
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2208      	movs	r2, #8
 801644e:	4013      	ands	r3, r2
 8016450:	d017      	beq.n	8016482 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016452:	23a0      	movs	r3, #160	@ 0xa0
 8016454:	18fb      	adds	r3, r7, r3
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	2220      	movs	r2, #32
 801645a:	4013      	ands	r3, r2
 801645c:	d105      	bne.n	801646a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801645e:	239c      	movs	r3, #156	@ 0x9c
 8016460:	18fb      	adds	r3, r7, r3
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	2201      	movs	r2, #1
 8016466:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8016468:	d00b      	beq.n	8016482 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2208      	movs	r2, #8
 8016470:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	2284      	movs	r2, #132	@ 0x84
 8016476:	589b      	ldr	r3, [r3, r2]
 8016478:	2208      	movs	r2, #8
 801647a:	431a      	orrs	r2, r3
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2184      	movs	r1, #132	@ 0x84
 8016480:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8016482:	23a4      	movs	r3, #164	@ 0xa4
 8016484:	18fb      	adds	r3, r7, r3
 8016486:	681a      	ldr	r2, [r3, #0]
 8016488:	2380      	movs	r3, #128	@ 0x80
 801648a:	011b      	lsls	r3, r3, #4
 801648c:	4013      	ands	r3, r2
 801648e:	d013      	beq.n	80164b8 <HAL_UART_IRQHandler+0x198>
 8016490:	23a0      	movs	r3, #160	@ 0xa0
 8016492:	18fb      	adds	r3, r7, r3
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	2380      	movs	r3, #128	@ 0x80
 8016498:	04db      	lsls	r3, r3, #19
 801649a:	4013      	ands	r3, r2
 801649c:	d00c      	beq.n	80164b8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	2280      	movs	r2, #128	@ 0x80
 80164a4:	0112      	lsls	r2, r2, #4
 80164a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2284      	movs	r2, #132	@ 0x84
 80164ac:	589b      	ldr	r3, [r3, r2]
 80164ae:	2220      	movs	r2, #32
 80164b0:	431a      	orrs	r2, r3
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	2184      	movs	r1, #132	@ 0x84
 80164b6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	2284      	movs	r2, #132	@ 0x84
 80164bc:	589b      	ldr	r3, [r3, r2]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d100      	bne.n	80164c4 <HAL_UART_IRQHandler+0x1a4>
 80164c2:	e20b      	b.n	80168dc <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80164c4:	23a4      	movs	r3, #164	@ 0xa4
 80164c6:	18fb      	adds	r3, r7, r3
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	2220      	movs	r2, #32
 80164cc:	4013      	ands	r3, r2
 80164ce:	d00e      	beq.n	80164ee <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80164d0:	23a0      	movs	r3, #160	@ 0xa0
 80164d2:	18fb      	adds	r3, r7, r3
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2220      	movs	r2, #32
 80164d8:	4013      	ands	r3, r2
 80164da:	d008      	beq.n	80164ee <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d004      	beq.n	80164ee <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80164e8:	687a      	ldr	r2, [r7, #4]
 80164ea:	0010      	movs	r0, r2
 80164ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2284      	movs	r2, #132	@ 0x84
 80164f2:	589b      	ldr	r3, [r3, r2]
 80164f4:	2194      	movs	r1, #148	@ 0x94
 80164f6:	187a      	adds	r2, r7, r1
 80164f8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	689b      	ldr	r3, [r3, #8]
 8016500:	2240      	movs	r2, #64	@ 0x40
 8016502:	4013      	ands	r3, r2
 8016504:	2b40      	cmp	r3, #64	@ 0x40
 8016506:	d004      	beq.n	8016512 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8016508:	187b      	adds	r3, r7, r1
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2228      	movs	r2, #40	@ 0x28
 801650e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016510:	d04b      	beq.n	80165aa <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	0018      	movs	r0, r3
 8016516:	f001 f861 	bl	80175dc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	689b      	ldr	r3, [r3, #8]
 8016520:	2240      	movs	r2, #64	@ 0x40
 8016522:	4013      	ands	r3, r2
 8016524:	2b40      	cmp	r3, #64	@ 0x40
 8016526:	d139      	bne.n	801659c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016528:	f3ef 8310 	mrs	r3, PRIMASK
 801652c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 801652e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016530:	2090      	movs	r0, #144	@ 0x90
 8016532:	183a      	adds	r2, r7, r0
 8016534:	6013      	str	r3, [r2, #0]
 8016536:	2301      	movs	r3, #1
 8016538:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801653a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801653c:	f383 8810 	msr	PRIMASK, r3
}
 8016540:	46c0      	nop			@ (mov r8, r8)
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	689a      	ldr	r2, [r3, #8]
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	2140      	movs	r1, #64	@ 0x40
 801654e:	438a      	bics	r2, r1
 8016550:	609a      	str	r2, [r3, #8]
 8016552:	183b      	adds	r3, r7, r0
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016558:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801655a:	f383 8810 	msr	PRIMASK, r3
}
 801655e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016564:	2b00      	cmp	r3, #0
 8016566:	d012      	beq.n	801658e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801656c:	4a17      	ldr	r2, [pc, #92]	@ (80165cc <HAL_UART_IRQHandler+0x2ac>)
 801656e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016574:	0018      	movs	r0, r3
 8016576:	f7f8 f8f1 	bl	800e75c <HAL_DMA_Abort_IT>
 801657a:	1e03      	subs	r3, r0, #0
 801657c:	d020      	beq.n	80165c0 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016582:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016588:	0018      	movs	r0, r3
 801658a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801658c:	e018      	b.n	80165c0 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	2298      	movs	r2, #152	@ 0x98
 8016592:	589b      	ldr	r3, [r3, r2]
 8016594:	687a      	ldr	r2, [r7, #4]
 8016596:	0010      	movs	r0, r2
 8016598:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801659a:	e011      	b.n	80165c0 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	2298      	movs	r2, #152	@ 0x98
 80165a0:	589b      	ldr	r3, [r3, r2]
 80165a2:	687a      	ldr	r2, [r7, #4]
 80165a4:	0010      	movs	r0, r2
 80165a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80165a8:	e00a      	b.n	80165c0 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	2298      	movs	r2, #152	@ 0x98
 80165ae:	589b      	ldr	r3, [r3, r2]
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	0010      	movs	r0, r2
 80165b4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	2284      	movs	r2, #132	@ 0x84
 80165ba:	2100      	movs	r1, #0
 80165bc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80165be:	e18d      	b.n	80168dc <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80165c0:	46c0      	nop			@ (mov r8, r8)
    return;
 80165c2:	e18b      	b.n	80168dc <HAL_UART_IRQHandler+0x5bc>
 80165c4:	0000080f 	.word	0x0000080f
 80165c8:	04000120 	.word	0x04000120
 80165cc:	08017969 	.word	0x08017969

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80165d4:	2b01      	cmp	r3, #1
 80165d6:	d000      	beq.n	80165da <HAL_UART_IRQHandler+0x2ba>
 80165d8:	e13d      	b.n	8016856 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80165da:	23a4      	movs	r3, #164	@ 0xa4
 80165dc:	18fb      	adds	r3, r7, r3
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2210      	movs	r2, #16
 80165e2:	4013      	ands	r3, r2
 80165e4:	d100      	bne.n	80165e8 <HAL_UART_IRQHandler+0x2c8>
 80165e6:	e136      	b.n	8016856 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80165e8:	23a0      	movs	r3, #160	@ 0xa0
 80165ea:	18fb      	adds	r3, r7, r3
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	2210      	movs	r2, #16
 80165f0:	4013      	ands	r3, r2
 80165f2:	d100      	bne.n	80165f6 <HAL_UART_IRQHandler+0x2d6>
 80165f4:	e12f      	b.n	8016856 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	2210      	movs	r2, #16
 80165fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	689b      	ldr	r3, [r3, #8]
 8016604:	2240      	movs	r2, #64	@ 0x40
 8016606:	4013      	ands	r3, r2
 8016608:	2b40      	cmp	r3, #64	@ 0x40
 801660a:	d000      	beq.n	801660e <HAL_UART_IRQHandler+0x2ee>
 801660c:	e0a2      	b.n	8016754 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	685a      	ldr	r2, [r3, #4]
 8016616:	217e      	movs	r1, #126	@ 0x7e
 8016618:	187b      	adds	r3, r7, r1
 801661a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 801661c:	187b      	adds	r3, r7, r1
 801661e:	881b      	ldrh	r3, [r3, #0]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d100      	bne.n	8016626 <HAL_UART_IRQHandler+0x306>
 8016624:	e15c      	b.n	80168e0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	2258      	movs	r2, #88	@ 0x58
 801662a:	5a9b      	ldrh	r3, [r3, r2]
 801662c:	187a      	adds	r2, r7, r1
 801662e:	8812      	ldrh	r2, [r2, #0]
 8016630:	429a      	cmp	r2, r3
 8016632:	d300      	bcc.n	8016636 <HAL_UART_IRQHandler+0x316>
 8016634:	e154      	b.n	80168e0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	187a      	adds	r2, r7, r1
 801663a:	215a      	movs	r1, #90	@ 0x5a
 801663c:	8812      	ldrh	r2, [r2, #0]
 801663e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	2220      	movs	r2, #32
 801664a:	4013      	ands	r3, r2
 801664c:	d16f      	bne.n	801672e <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801664e:	f3ef 8310 	mrs	r3, PRIMASK
 8016652:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8016654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016656:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016658:	2301      	movs	r3, #1
 801665a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801665c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801665e:	f383 8810 	msr	PRIMASK, r3
}
 8016662:	46c0      	nop			@ (mov r8, r8)
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	681a      	ldr	r2, [r3, #0]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	49a0      	ldr	r1, [pc, #640]	@ (80168f0 <HAL_UART_IRQHandler+0x5d0>)
 8016670:	400a      	ands	r2, r1
 8016672:	601a      	str	r2, [r3, #0]
 8016674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016676:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801667a:	f383 8810 	msr	PRIMASK, r3
}
 801667e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016680:	f3ef 8310 	mrs	r3, PRIMASK
 8016684:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8016686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016688:	677b      	str	r3, [r7, #116]	@ 0x74
 801668a:	2301      	movs	r3, #1
 801668c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801668e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016690:	f383 8810 	msr	PRIMASK, r3
}
 8016694:	46c0      	nop			@ (mov r8, r8)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	681b      	ldr	r3, [r3, #0]
 801669a:	689a      	ldr	r2, [r3, #8]
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2101      	movs	r1, #1
 80166a2:	438a      	bics	r2, r1
 80166a4:	609a      	str	r2, [r3, #8]
 80166a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80166a8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80166ac:	f383 8810 	msr	PRIMASK, r3
}
 80166b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166b2:	f3ef 8310 	mrs	r3, PRIMASK
 80166b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80166b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80166ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80166bc:	2301      	movs	r3, #1
 80166be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80166c2:	f383 8810 	msr	PRIMASK, r3
}
 80166c6:	46c0      	nop			@ (mov r8, r8)
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	689a      	ldr	r2, [r3, #8]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2140      	movs	r1, #64	@ 0x40
 80166d4:	438a      	bics	r2, r1
 80166d6:	609a      	str	r2, [r3, #8]
 80166d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80166da:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80166dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80166de:	f383 8810 	msr	PRIMASK, r3
}
 80166e2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2280      	movs	r2, #128	@ 0x80
 80166e8:	2120      	movs	r1, #32
 80166ea:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	2200      	movs	r2, #0
 80166f0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166f2:	f3ef 8310 	mrs	r3, PRIMASK
 80166f6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80166f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80166fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80166fc:	2301      	movs	r3, #1
 80166fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016700:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016702:	f383 8810 	msr	PRIMASK, r3
}
 8016706:	46c0      	nop			@ (mov r8, r8)
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	681a      	ldr	r2, [r3, #0]
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2110      	movs	r1, #16
 8016714:	438a      	bics	r2, r1
 8016716:	601a      	str	r2, [r3, #0]
 8016718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801671a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801671c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801671e:	f383 8810 	msr	PRIMASK, r3
}
 8016722:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016728:	0018      	movs	r0, r3
 801672a:	f7f7 ffd7 	bl	800e6dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2202      	movs	r2, #2
 8016732:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	22ac      	movs	r2, #172	@ 0xac
 8016738:	589b      	ldr	r3, [r3, r2]
 801673a:	687a      	ldr	r2, [r7, #4]
 801673c:	2158      	movs	r1, #88	@ 0x58
 801673e:	5a51      	ldrh	r1, [r2, r1]
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	205a      	movs	r0, #90	@ 0x5a
 8016744:	5a12      	ldrh	r2, [r2, r0]
 8016746:	b292      	uxth	r2, r2
 8016748:	1a8a      	subs	r2, r1, r2
 801674a:	b291      	uxth	r1, r2
 801674c:	687a      	ldr	r2, [r7, #4]
 801674e:	0010      	movs	r0, r2
 8016750:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016752:	e0c5      	b.n	80168e0 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2258      	movs	r2, #88	@ 0x58
 8016758:	5a99      	ldrh	r1, [r3, r2]
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	225a      	movs	r2, #90	@ 0x5a
 801675e:	5a9b      	ldrh	r3, [r3, r2]
 8016760:	b29a      	uxth	r2, r3
 8016762:	208e      	movs	r0, #142	@ 0x8e
 8016764:	183b      	adds	r3, r7, r0
 8016766:	1a8a      	subs	r2, r1, r2
 8016768:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	225a      	movs	r2, #90	@ 0x5a
 801676e:	5a9b      	ldrh	r3, [r3, r2]
 8016770:	b29b      	uxth	r3, r3
 8016772:	2b00      	cmp	r3, #0
 8016774:	d100      	bne.n	8016778 <HAL_UART_IRQHandler+0x458>
 8016776:	e0b5      	b.n	80168e4 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8016778:	183b      	adds	r3, r7, r0
 801677a:	881b      	ldrh	r3, [r3, #0]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d100      	bne.n	8016782 <HAL_UART_IRQHandler+0x462>
 8016780:	e0b0      	b.n	80168e4 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016782:	f3ef 8310 	mrs	r3, PRIMASK
 8016786:	60fb      	str	r3, [r7, #12]
  return(result);
 8016788:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801678a:	2488      	movs	r4, #136	@ 0x88
 801678c:	193a      	adds	r2, r7, r4
 801678e:	6013      	str	r3, [r2, #0]
 8016790:	2301      	movs	r3, #1
 8016792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	f383 8810 	msr	PRIMASK, r3
}
 801679a:	46c0      	nop			@ (mov r8, r8)
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	681a      	ldr	r2, [r3, #0]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	4953      	ldr	r1, [pc, #332]	@ (80168f4 <HAL_UART_IRQHandler+0x5d4>)
 80167a8:	400a      	ands	r2, r1
 80167aa:	601a      	str	r2, [r3, #0]
 80167ac:	193b      	adds	r3, r7, r4
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	f383 8810 	msr	PRIMASK, r3
}
 80167b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167ba:	f3ef 8310 	mrs	r3, PRIMASK
 80167be:	61bb      	str	r3, [r7, #24]
  return(result);
 80167c0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80167c2:	2484      	movs	r4, #132	@ 0x84
 80167c4:	193a      	adds	r2, r7, r4
 80167c6:	6013      	str	r3, [r2, #0]
 80167c8:	2301      	movs	r3, #1
 80167ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167cc:	69fb      	ldr	r3, [r7, #28]
 80167ce:	f383 8810 	msr	PRIMASK, r3
}
 80167d2:	46c0      	nop			@ (mov r8, r8)
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	689a      	ldr	r2, [r3, #8]
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	2101      	movs	r1, #1
 80167e0:	438a      	bics	r2, r1
 80167e2:	609a      	str	r2, [r3, #8]
 80167e4:	193b      	adds	r3, r7, r4
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167ea:	6a3b      	ldr	r3, [r7, #32]
 80167ec:	f383 8810 	msr	PRIMASK, r3
}
 80167f0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	2280      	movs	r2, #128	@ 0x80
 80167f6:	2120      	movs	r1, #32
 80167f8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2200      	movs	r2, #0
 80167fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2200      	movs	r2, #0
 8016804:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016806:	f3ef 8310 	mrs	r3, PRIMASK
 801680a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801680e:	2480      	movs	r4, #128	@ 0x80
 8016810:	193a      	adds	r2, r7, r4
 8016812:	6013      	str	r3, [r2, #0]
 8016814:	2301      	movs	r3, #1
 8016816:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681a:	f383 8810 	msr	PRIMASK, r3
}
 801681e:	46c0      	nop			@ (mov r8, r8)
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	681a      	ldr	r2, [r3, #0]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	2110      	movs	r1, #16
 801682c:	438a      	bics	r2, r1
 801682e:	601a      	str	r2, [r3, #0]
 8016830:	193b      	adds	r3, r7, r4
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016838:	f383 8810 	msr	PRIMASK, r3
}
 801683c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	2202      	movs	r2, #2
 8016842:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	22ac      	movs	r2, #172	@ 0xac
 8016848:	589b      	ldr	r3, [r3, r2]
 801684a:	183a      	adds	r2, r7, r0
 801684c:	8811      	ldrh	r1, [r2, #0]
 801684e:	687a      	ldr	r2, [r7, #4]
 8016850:	0010      	movs	r0, r2
 8016852:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8016854:	e046      	b.n	80168e4 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8016856:	23a4      	movs	r3, #164	@ 0xa4
 8016858:	18fb      	adds	r3, r7, r3
 801685a:	681a      	ldr	r2, [r3, #0]
 801685c:	2380      	movs	r3, #128	@ 0x80
 801685e:	035b      	lsls	r3, r3, #13
 8016860:	4013      	ands	r3, r2
 8016862:	d012      	beq.n	801688a <HAL_UART_IRQHandler+0x56a>
 8016864:	239c      	movs	r3, #156	@ 0x9c
 8016866:	18fb      	adds	r3, r7, r3
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	2380      	movs	r3, #128	@ 0x80
 801686c:	03db      	lsls	r3, r3, #15
 801686e:	4013      	ands	r3, r2
 8016870:	d00b      	beq.n	801688a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	2280      	movs	r2, #128	@ 0x80
 8016878:	0352      	lsls	r2, r2, #13
 801687a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	22a8      	movs	r2, #168	@ 0xa8
 8016880:	589b      	ldr	r3, [r3, r2]
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	0010      	movs	r0, r2
 8016886:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016888:	e02f      	b.n	80168ea <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801688a:	23a4      	movs	r3, #164	@ 0xa4
 801688c:	18fb      	adds	r3, r7, r3
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2280      	movs	r2, #128	@ 0x80
 8016892:	4013      	ands	r3, r2
 8016894:	d00f      	beq.n	80168b6 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8016896:	23a0      	movs	r3, #160	@ 0xa0
 8016898:	18fb      	adds	r3, r7, r3
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	2280      	movs	r2, #128	@ 0x80
 801689e:	4013      	ands	r3, r2
 80168a0:	d009      	beq.n	80168b6 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d01e      	beq.n	80168e8 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168ae:	687a      	ldr	r2, [r7, #4]
 80168b0:	0010      	movs	r0, r2
 80168b2:	4798      	blx	r3
    }
    return;
 80168b4:	e018      	b.n	80168e8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80168b6:	23a4      	movs	r3, #164	@ 0xa4
 80168b8:	18fb      	adds	r3, r7, r3
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	2240      	movs	r2, #64	@ 0x40
 80168be:	4013      	ands	r3, r2
 80168c0:	d013      	beq.n	80168ea <HAL_UART_IRQHandler+0x5ca>
 80168c2:	23a0      	movs	r3, #160	@ 0xa0
 80168c4:	18fb      	adds	r3, r7, r3
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	2240      	movs	r2, #64	@ 0x40
 80168ca:	4013      	ands	r3, r2
 80168cc:	d00d      	beq.n	80168ea <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	0018      	movs	r0, r3
 80168d2:	f001 f862 	bl	801799a <UART_EndTransmit_IT>
    return;
 80168d6:	e008      	b.n	80168ea <HAL_UART_IRQHandler+0x5ca>
      return;
 80168d8:	46c0      	nop			@ (mov r8, r8)
 80168da:	e006      	b.n	80168ea <HAL_UART_IRQHandler+0x5ca>
    return;
 80168dc:	46c0      	nop			@ (mov r8, r8)
 80168de:	e004      	b.n	80168ea <HAL_UART_IRQHandler+0x5ca>
      return;
 80168e0:	46c0      	nop			@ (mov r8, r8)
 80168e2:	e002      	b.n	80168ea <HAL_UART_IRQHandler+0x5ca>
      return;
 80168e4:	46c0      	nop			@ (mov r8, r8)
 80168e6:	e000      	b.n	80168ea <HAL_UART_IRQHandler+0x5ca>
    return;
 80168e8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80168ea:	46bd      	mov	sp, r7
 80168ec:	b02b      	add	sp, #172	@ 0xac
 80168ee:	bd90      	pop	{r4, r7, pc}
 80168f0:	fffffeff 	.word	0xfffffeff
 80168f4:	fffffedf 	.word	0xfffffedf

080168f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8016900:	46c0      	nop			@ (mov r8, r8)
 8016902:	46bd      	mov	sp, r7
 8016904:	b002      	add	sp, #8
 8016906:	bd80      	pop	{r7, pc}

08016908 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016908:	b580      	push	{r7, lr}
 801690a:	b082      	sub	sp, #8
 801690c:	af00      	add	r7, sp, #0
 801690e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8016910:	46c0      	nop			@ (mov r8, r8)
 8016912:	46bd      	mov	sp, r7
 8016914:	b002      	add	sp, #8
 8016916:	bd80      	pop	{r7, pc}

08016918 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8016920:	46c0      	nop			@ (mov r8, r8)
 8016922:	46bd      	mov	sp, r7
 8016924:	b002      	add	sp, #8
 8016926:	bd80      	pop	{r7, pc}

08016928 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b082      	sub	sp, #8
 801692c:	af00      	add	r7, sp, #0
 801692e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016930:	46c0      	nop			@ (mov r8, r8)
 8016932:	46bd      	mov	sp, r7
 8016934:	b002      	add	sp, #8
 8016936:	bd80      	pop	{r7, pc}

08016938 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b082      	sub	sp, #8
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016940:	46c0      	nop			@ (mov r8, r8)
 8016942:	46bd      	mov	sp, r7
 8016944:	b002      	add	sp, #8
 8016946:	bd80      	pop	{r7, pc}

08016948 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b082      	sub	sp, #8
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016950:	46c0      	nop			@ (mov r8, r8)
 8016952:	46bd      	mov	sp, r7
 8016954:	b002      	add	sp, #8
 8016956:	bd80      	pop	{r7, pc}

08016958 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
 8016960:	000a      	movs	r2, r1
 8016962:	1cbb      	adds	r3, r7, #2
 8016964:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016966:	46c0      	nop			@ (mov r8, r8)
 8016968:	46bd      	mov	sp, r7
 801696a:	b002      	add	sp, #8
 801696c:	bd80      	pop	{r7, pc}
	...

08016970 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2188      	movs	r1, #136	@ 0x88
 801697c:	4a14      	ldr	r2, [pc, #80]	@ (80169d0 <UART_InitCallbacksToDefault+0x60>)
 801697e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	218c      	movs	r1, #140	@ 0x8c
 8016984:	4a13      	ldr	r2, [pc, #76]	@ (80169d4 <UART_InitCallbacksToDefault+0x64>)
 8016986:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2190      	movs	r1, #144	@ 0x90
 801698c:	4a12      	ldr	r2, [pc, #72]	@ (80169d8 <UART_InitCallbacksToDefault+0x68>)
 801698e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2194      	movs	r1, #148	@ 0x94
 8016994:	4a11      	ldr	r2, [pc, #68]	@ (80169dc <UART_InitCallbacksToDefault+0x6c>)
 8016996:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	2198      	movs	r1, #152	@ 0x98
 801699c:	4a10      	ldr	r2, [pc, #64]	@ (80169e0 <UART_InitCallbacksToDefault+0x70>)
 801699e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	219c      	movs	r1, #156	@ 0x9c
 80169a4:	4a0f      	ldr	r2, [pc, #60]	@ (80169e4 <UART_InitCallbacksToDefault+0x74>)
 80169a6:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	21a0      	movs	r1, #160	@ 0xa0
 80169ac:	4a0e      	ldr	r2, [pc, #56]	@ (80169e8 <UART_InitCallbacksToDefault+0x78>)
 80169ae:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	21a4      	movs	r1, #164	@ 0xa4
 80169b4:	4a0d      	ldr	r2, [pc, #52]	@ (80169ec <UART_InitCallbacksToDefault+0x7c>)
 80169b6:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	21a8      	movs	r1, #168	@ 0xa8
 80169bc:	4a0c      	ldr	r2, [pc, #48]	@ (80169f0 <UART_InitCallbacksToDefault+0x80>)
 80169be:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	21ac      	movs	r1, #172	@ 0xac
 80169c4:	4a0b      	ldr	r2, [pc, #44]	@ (80169f4 <UART_InitCallbacksToDefault+0x84>)
 80169c6:	505a      	str	r2, [r3, r1]

}
 80169c8:	46c0      	nop			@ (mov r8, r8)
 80169ca:	46bd      	mov	sp, r7
 80169cc:	b002      	add	sp, #8
 80169ce:	bd80      	pop	{r7, pc}
 80169d0:	08016909 	.word	0x08016909
 80169d4:	080168f9 	.word	0x080168f9
 80169d8:	08016919 	.word	0x08016919
 80169dc:	08007a11 	.word	0x08007a11
 80169e0:	08003afd 	.word	0x08003afd
 80169e4:	08016929 	.word	0x08016929
 80169e8:	08016939 	.word	0x08016939
 80169ec:	08016949 	.word	0x08016949
 80169f0:	08017d8d 	.word	0x08017d8d
 80169f4:	08016959 	.word	0x08016959

080169f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80169f8:	b5b0      	push	{r4, r5, r7, lr}
 80169fa:	b08e      	sub	sp, #56	@ 0x38
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016a00:	231a      	movs	r3, #26
 8016a02:	2218      	movs	r2, #24
 8016a04:	189b      	adds	r3, r3, r2
 8016a06:	19db      	adds	r3, r3, r7
 8016a08:	2200      	movs	r2, #0
 8016a0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016a0c:	69fb      	ldr	r3, [r7, #28]
 8016a0e:	689a      	ldr	r2, [r3, #8]
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	691b      	ldr	r3, [r3, #16]
 8016a14:	431a      	orrs	r2, r3
 8016a16:	69fb      	ldr	r3, [r7, #28]
 8016a18:	695b      	ldr	r3, [r3, #20]
 8016a1a:	431a      	orrs	r2, r3
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	69db      	ldr	r3, [r3, #28]
 8016a20:	4313      	orrs	r3, r2
 8016a22:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016a24:	69fb      	ldr	r3, [r7, #28]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	4ac3      	ldr	r2, [pc, #780]	@ (8016d38 <UART_SetConfig+0x340>)
 8016a2c:	4013      	ands	r3, r2
 8016a2e:	0019      	movs	r1, r3
 8016a30:	69fb      	ldr	r3, [r7, #28]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016a36:	430a      	orrs	r2, r1
 8016a38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016a3a:	69fb      	ldr	r3, [r7, #28]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	685b      	ldr	r3, [r3, #4]
 8016a40:	4abe      	ldr	r2, [pc, #760]	@ (8016d3c <UART_SetConfig+0x344>)
 8016a42:	4013      	ands	r3, r2
 8016a44:	0019      	movs	r1, r3
 8016a46:	69fb      	ldr	r3, [r7, #28]
 8016a48:	68da      	ldr	r2, [r3, #12]
 8016a4a:	69fb      	ldr	r3, [r7, #28]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	430a      	orrs	r2, r1
 8016a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016a52:	69fb      	ldr	r3, [r7, #28]
 8016a54:	699b      	ldr	r3, [r3, #24]
 8016a56:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016a58:	69fb      	ldr	r3, [r7, #28]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	4ab8      	ldr	r2, [pc, #736]	@ (8016d40 <UART_SetConfig+0x348>)
 8016a5e:	4293      	cmp	r3, r2
 8016a60:	d004      	beq.n	8016a6c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016a62:	69fb      	ldr	r3, [r7, #28]
 8016a64:	6a1b      	ldr	r3, [r3, #32]
 8016a66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016a68:	4313      	orrs	r3, r2
 8016a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016a6c:	69fb      	ldr	r3, [r7, #28]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	689b      	ldr	r3, [r3, #8]
 8016a72:	4ab4      	ldr	r2, [pc, #720]	@ (8016d44 <UART_SetConfig+0x34c>)
 8016a74:	4013      	ands	r3, r2
 8016a76:	0019      	movs	r1, r3
 8016a78:	69fb      	ldr	r3, [r7, #28]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016a7e:	430a      	orrs	r2, r1
 8016a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016a82:	69fb      	ldr	r3, [r7, #28]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	4ab0      	ldr	r2, [pc, #704]	@ (8016d48 <UART_SetConfig+0x350>)
 8016a88:	4293      	cmp	r3, r2
 8016a8a:	d131      	bne.n	8016af0 <UART_SetConfig+0xf8>
 8016a8c:	4baf      	ldr	r3, [pc, #700]	@ (8016d4c <UART_SetConfig+0x354>)
 8016a8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016a90:	2203      	movs	r2, #3
 8016a92:	4013      	ands	r3, r2
 8016a94:	2b03      	cmp	r3, #3
 8016a96:	d01d      	beq.n	8016ad4 <UART_SetConfig+0xdc>
 8016a98:	d823      	bhi.n	8016ae2 <UART_SetConfig+0xea>
 8016a9a:	2b02      	cmp	r3, #2
 8016a9c:	d00c      	beq.n	8016ab8 <UART_SetConfig+0xc0>
 8016a9e:	d820      	bhi.n	8016ae2 <UART_SetConfig+0xea>
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d002      	beq.n	8016aaa <UART_SetConfig+0xb2>
 8016aa4:	2b01      	cmp	r3, #1
 8016aa6:	d00e      	beq.n	8016ac6 <UART_SetConfig+0xce>
 8016aa8:	e01b      	b.n	8016ae2 <UART_SetConfig+0xea>
 8016aaa:	231b      	movs	r3, #27
 8016aac:	2218      	movs	r2, #24
 8016aae:	189b      	adds	r3, r3, r2
 8016ab0:	19db      	adds	r3, r3, r7
 8016ab2:	2201      	movs	r2, #1
 8016ab4:	701a      	strb	r2, [r3, #0]
 8016ab6:	e0b4      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016ab8:	231b      	movs	r3, #27
 8016aba:	2218      	movs	r2, #24
 8016abc:	189b      	adds	r3, r3, r2
 8016abe:	19db      	adds	r3, r3, r7
 8016ac0:	2202      	movs	r2, #2
 8016ac2:	701a      	strb	r2, [r3, #0]
 8016ac4:	e0ad      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016ac6:	231b      	movs	r3, #27
 8016ac8:	2218      	movs	r2, #24
 8016aca:	189b      	adds	r3, r3, r2
 8016acc:	19db      	adds	r3, r3, r7
 8016ace:	2204      	movs	r2, #4
 8016ad0:	701a      	strb	r2, [r3, #0]
 8016ad2:	e0a6      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016ad4:	231b      	movs	r3, #27
 8016ad6:	2218      	movs	r2, #24
 8016ad8:	189b      	adds	r3, r3, r2
 8016ada:	19db      	adds	r3, r3, r7
 8016adc:	2208      	movs	r2, #8
 8016ade:	701a      	strb	r2, [r3, #0]
 8016ae0:	e09f      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016ae2:	231b      	movs	r3, #27
 8016ae4:	2218      	movs	r2, #24
 8016ae6:	189b      	adds	r3, r3, r2
 8016ae8:	19db      	adds	r3, r3, r7
 8016aea:	2210      	movs	r2, #16
 8016aec:	701a      	strb	r2, [r3, #0]
 8016aee:	e098      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	4a96      	ldr	r2, [pc, #600]	@ (8016d50 <UART_SetConfig+0x358>)
 8016af6:	4293      	cmp	r3, r2
 8016af8:	d131      	bne.n	8016b5e <UART_SetConfig+0x166>
 8016afa:	4b94      	ldr	r3, [pc, #592]	@ (8016d4c <UART_SetConfig+0x354>)
 8016afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016afe:	220c      	movs	r2, #12
 8016b00:	4013      	ands	r3, r2
 8016b02:	2b0c      	cmp	r3, #12
 8016b04:	d01d      	beq.n	8016b42 <UART_SetConfig+0x14a>
 8016b06:	d823      	bhi.n	8016b50 <UART_SetConfig+0x158>
 8016b08:	2b08      	cmp	r3, #8
 8016b0a:	d00c      	beq.n	8016b26 <UART_SetConfig+0x12e>
 8016b0c:	d820      	bhi.n	8016b50 <UART_SetConfig+0x158>
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d002      	beq.n	8016b18 <UART_SetConfig+0x120>
 8016b12:	2b04      	cmp	r3, #4
 8016b14:	d00e      	beq.n	8016b34 <UART_SetConfig+0x13c>
 8016b16:	e01b      	b.n	8016b50 <UART_SetConfig+0x158>
 8016b18:	231b      	movs	r3, #27
 8016b1a:	2218      	movs	r2, #24
 8016b1c:	189b      	adds	r3, r3, r2
 8016b1e:	19db      	adds	r3, r3, r7
 8016b20:	2200      	movs	r2, #0
 8016b22:	701a      	strb	r2, [r3, #0]
 8016b24:	e07d      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016b26:	231b      	movs	r3, #27
 8016b28:	2218      	movs	r2, #24
 8016b2a:	189b      	adds	r3, r3, r2
 8016b2c:	19db      	adds	r3, r3, r7
 8016b2e:	2202      	movs	r2, #2
 8016b30:	701a      	strb	r2, [r3, #0]
 8016b32:	e076      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016b34:	231b      	movs	r3, #27
 8016b36:	2218      	movs	r2, #24
 8016b38:	189b      	adds	r3, r3, r2
 8016b3a:	19db      	adds	r3, r3, r7
 8016b3c:	2204      	movs	r2, #4
 8016b3e:	701a      	strb	r2, [r3, #0]
 8016b40:	e06f      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016b42:	231b      	movs	r3, #27
 8016b44:	2218      	movs	r2, #24
 8016b46:	189b      	adds	r3, r3, r2
 8016b48:	19db      	adds	r3, r3, r7
 8016b4a:	2208      	movs	r2, #8
 8016b4c:	701a      	strb	r2, [r3, #0]
 8016b4e:	e068      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016b50:	231b      	movs	r3, #27
 8016b52:	2218      	movs	r2, #24
 8016b54:	189b      	adds	r3, r3, r2
 8016b56:	19db      	adds	r3, r3, r7
 8016b58:	2210      	movs	r2, #16
 8016b5a:	701a      	strb	r2, [r3, #0]
 8016b5c:	e061      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016b5e:	69fb      	ldr	r3, [r7, #28]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	4a7c      	ldr	r2, [pc, #496]	@ (8016d54 <UART_SetConfig+0x35c>)
 8016b64:	4293      	cmp	r3, r2
 8016b66:	d106      	bne.n	8016b76 <UART_SetConfig+0x17e>
 8016b68:	231b      	movs	r3, #27
 8016b6a:	2218      	movs	r2, #24
 8016b6c:	189b      	adds	r3, r3, r2
 8016b6e:	19db      	adds	r3, r3, r7
 8016b70:	2200      	movs	r2, #0
 8016b72:	701a      	strb	r2, [r3, #0]
 8016b74:	e055      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016b76:	69fb      	ldr	r3, [r7, #28]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	4a77      	ldr	r2, [pc, #476]	@ (8016d58 <UART_SetConfig+0x360>)
 8016b7c:	4293      	cmp	r3, r2
 8016b7e:	d106      	bne.n	8016b8e <UART_SetConfig+0x196>
 8016b80:	231b      	movs	r3, #27
 8016b82:	2218      	movs	r2, #24
 8016b84:	189b      	adds	r3, r3, r2
 8016b86:	19db      	adds	r3, r3, r7
 8016b88:	2200      	movs	r2, #0
 8016b8a:	701a      	strb	r2, [r3, #0]
 8016b8c:	e049      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016b8e:	69fb      	ldr	r3, [r7, #28]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	4a6b      	ldr	r2, [pc, #428]	@ (8016d40 <UART_SetConfig+0x348>)
 8016b94:	4293      	cmp	r3, r2
 8016b96:	d13e      	bne.n	8016c16 <UART_SetConfig+0x21e>
 8016b98:	4b6c      	ldr	r3, [pc, #432]	@ (8016d4c <UART_SetConfig+0x354>)
 8016b9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016b9c:	23c0      	movs	r3, #192	@ 0xc0
 8016b9e:	011b      	lsls	r3, r3, #4
 8016ba0:	4013      	ands	r3, r2
 8016ba2:	22c0      	movs	r2, #192	@ 0xc0
 8016ba4:	0112      	lsls	r2, r2, #4
 8016ba6:	4293      	cmp	r3, r2
 8016ba8:	d027      	beq.n	8016bfa <UART_SetConfig+0x202>
 8016baa:	22c0      	movs	r2, #192	@ 0xc0
 8016bac:	0112      	lsls	r2, r2, #4
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	d82a      	bhi.n	8016c08 <UART_SetConfig+0x210>
 8016bb2:	2280      	movs	r2, #128	@ 0x80
 8016bb4:	0112      	lsls	r2, r2, #4
 8016bb6:	4293      	cmp	r3, r2
 8016bb8:	d011      	beq.n	8016bde <UART_SetConfig+0x1e6>
 8016bba:	2280      	movs	r2, #128	@ 0x80
 8016bbc:	0112      	lsls	r2, r2, #4
 8016bbe:	4293      	cmp	r3, r2
 8016bc0:	d822      	bhi.n	8016c08 <UART_SetConfig+0x210>
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d004      	beq.n	8016bd0 <UART_SetConfig+0x1d8>
 8016bc6:	2280      	movs	r2, #128	@ 0x80
 8016bc8:	00d2      	lsls	r2, r2, #3
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	d00e      	beq.n	8016bec <UART_SetConfig+0x1f4>
 8016bce:	e01b      	b.n	8016c08 <UART_SetConfig+0x210>
 8016bd0:	231b      	movs	r3, #27
 8016bd2:	2218      	movs	r2, #24
 8016bd4:	189b      	adds	r3, r3, r2
 8016bd6:	19db      	adds	r3, r3, r7
 8016bd8:	2200      	movs	r2, #0
 8016bda:	701a      	strb	r2, [r3, #0]
 8016bdc:	e021      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016bde:	231b      	movs	r3, #27
 8016be0:	2218      	movs	r2, #24
 8016be2:	189b      	adds	r3, r3, r2
 8016be4:	19db      	adds	r3, r3, r7
 8016be6:	2202      	movs	r2, #2
 8016be8:	701a      	strb	r2, [r3, #0]
 8016bea:	e01a      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016bec:	231b      	movs	r3, #27
 8016bee:	2218      	movs	r2, #24
 8016bf0:	189b      	adds	r3, r3, r2
 8016bf2:	19db      	adds	r3, r3, r7
 8016bf4:	2204      	movs	r2, #4
 8016bf6:	701a      	strb	r2, [r3, #0]
 8016bf8:	e013      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016bfa:	231b      	movs	r3, #27
 8016bfc:	2218      	movs	r2, #24
 8016bfe:	189b      	adds	r3, r3, r2
 8016c00:	19db      	adds	r3, r3, r7
 8016c02:	2208      	movs	r2, #8
 8016c04:	701a      	strb	r2, [r3, #0]
 8016c06:	e00c      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016c08:	231b      	movs	r3, #27
 8016c0a:	2218      	movs	r2, #24
 8016c0c:	189b      	adds	r3, r3, r2
 8016c0e:	19db      	adds	r3, r3, r7
 8016c10:	2210      	movs	r2, #16
 8016c12:	701a      	strb	r2, [r3, #0]
 8016c14:	e005      	b.n	8016c22 <UART_SetConfig+0x22a>
 8016c16:	231b      	movs	r3, #27
 8016c18:	2218      	movs	r2, #24
 8016c1a:	189b      	adds	r3, r3, r2
 8016c1c:	19db      	adds	r3, r3, r7
 8016c1e:	2210      	movs	r2, #16
 8016c20:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016c22:	69fb      	ldr	r3, [r7, #28]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	4a46      	ldr	r2, [pc, #280]	@ (8016d40 <UART_SetConfig+0x348>)
 8016c28:	4293      	cmp	r3, r2
 8016c2a:	d000      	beq.n	8016c2e <UART_SetConfig+0x236>
 8016c2c:	e09a      	b.n	8016d64 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016c2e:	231b      	movs	r3, #27
 8016c30:	2218      	movs	r2, #24
 8016c32:	189b      	adds	r3, r3, r2
 8016c34:	19db      	adds	r3, r3, r7
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	2b08      	cmp	r3, #8
 8016c3a:	d01d      	beq.n	8016c78 <UART_SetConfig+0x280>
 8016c3c:	dc20      	bgt.n	8016c80 <UART_SetConfig+0x288>
 8016c3e:	2b04      	cmp	r3, #4
 8016c40:	d015      	beq.n	8016c6e <UART_SetConfig+0x276>
 8016c42:	dc1d      	bgt.n	8016c80 <UART_SetConfig+0x288>
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d002      	beq.n	8016c4e <UART_SetConfig+0x256>
 8016c48:	2b02      	cmp	r3, #2
 8016c4a:	d005      	beq.n	8016c58 <UART_SetConfig+0x260>
 8016c4c:	e018      	b.n	8016c80 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016c4e:	f7fd fe79 	bl	8014944 <HAL_RCC_GetPCLK1Freq>
 8016c52:	0003      	movs	r3, r0
 8016c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016c56:	e01c      	b.n	8016c92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016c58:	4b3c      	ldr	r3, [pc, #240]	@ (8016d4c <UART_SetConfig+0x354>)
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	2210      	movs	r2, #16
 8016c5e:	4013      	ands	r3, r2
 8016c60:	d002      	beq.n	8016c68 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016c62:	4b3e      	ldr	r3, [pc, #248]	@ (8016d5c <UART_SetConfig+0x364>)
 8016c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016c66:	e014      	b.n	8016c92 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8016c68:	4b3d      	ldr	r3, [pc, #244]	@ (8016d60 <UART_SetConfig+0x368>)
 8016c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016c6c:	e011      	b.n	8016c92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016c6e:	f7fd fdb9 	bl	80147e4 <HAL_RCC_GetSysClockFreq>
 8016c72:	0003      	movs	r3, r0
 8016c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016c76:	e00c      	b.n	8016c92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016c78:	2380      	movs	r3, #128	@ 0x80
 8016c7a:	021b      	lsls	r3, r3, #8
 8016c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016c7e:	e008      	b.n	8016c92 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8016c80:	2300      	movs	r3, #0
 8016c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016c84:	231a      	movs	r3, #26
 8016c86:	2218      	movs	r2, #24
 8016c88:	189b      	adds	r3, r3, r2
 8016c8a:	19db      	adds	r3, r3, r7
 8016c8c:	2201      	movs	r2, #1
 8016c8e:	701a      	strb	r2, [r3, #0]
        break;
 8016c90:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8016c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d100      	bne.n	8016c9a <UART_SetConfig+0x2a2>
 8016c98:	e133      	b.n	8016f02 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016c9a:	69fb      	ldr	r3, [r7, #28]
 8016c9c:	685a      	ldr	r2, [r3, #4]
 8016c9e:	0013      	movs	r3, r2
 8016ca0:	005b      	lsls	r3, r3, #1
 8016ca2:	189b      	adds	r3, r3, r2
 8016ca4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d305      	bcc.n	8016cb6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8016caa:	69fb      	ldr	r3, [r7, #28]
 8016cac:	685b      	ldr	r3, [r3, #4]
 8016cae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8016cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016cb2:	429a      	cmp	r2, r3
 8016cb4:	d906      	bls.n	8016cc4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8016cb6:	231a      	movs	r3, #26
 8016cb8:	2218      	movs	r2, #24
 8016cba:	189b      	adds	r3, r3, r2
 8016cbc:	19db      	adds	r3, r3, r7
 8016cbe:	2201      	movs	r2, #1
 8016cc0:	701a      	strb	r2, [r3, #0]
 8016cc2:	e11e      	b.n	8016f02 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8016cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cc6:	613b      	str	r3, [r7, #16]
 8016cc8:	2300      	movs	r3, #0
 8016cca:	617b      	str	r3, [r7, #20]
 8016ccc:	6939      	ldr	r1, [r7, #16]
 8016cce:	697a      	ldr	r2, [r7, #20]
 8016cd0:	000b      	movs	r3, r1
 8016cd2:	0e1b      	lsrs	r3, r3, #24
 8016cd4:	0010      	movs	r0, r2
 8016cd6:	0205      	lsls	r5, r0, #8
 8016cd8:	431d      	orrs	r5, r3
 8016cda:	000b      	movs	r3, r1
 8016cdc:	021c      	lsls	r4, r3, #8
 8016cde:	69fb      	ldr	r3, [r7, #28]
 8016ce0:	685b      	ldr	r3, [r3, #4]
 8016ce2:	085b      	lsrs	r3, r3, #1
 8016ce4:	60bb      	str	r3, [r7, #8]
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	60fb      	str	r3, [r7, #12]
 8016cea:	68b8      	ldr	r0, [r7, #8]
 8016cec:	68f9      	ldr	r1, [r7, #12]
 8016cee:	1900      	adds	r0, r0, r4
 8016cf0:	4169      	adcs	r1, r5
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	685b      	ldr	r3, [r3, #4]
 8016cf6:	603b      	str	r3, [r7, #0]
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	607b      	str	r3, [r7, #4]
 8016cfc:	683a      	ldr	r2, [r7, #0]
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f7e9 fc3e 	bl	8000580 <__aeabi_uldivmod>
 8016d04:	0002      	movs	r2, r0
 8016d06:	000b      	movs	r3, r1
 8016d08:	0013      	movs	r3, r2
 8016d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d0e:	23c0      	movs	r3, #192	@ 0xc0
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	429a      	cmp	r2, r3
 8016d14:	d309      	bcc.n	8016d2a <UART_SetConfig+0x332>
 8016d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d18:	2380      	movs	r3, #128	@ 0x80
 8016d1a:	035b      	lsls	r3, r3, #13
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d204      	bcs.n	8016d2a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8016d20:	69fb      	ldr	r3, [r7, #28]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d26:	60da      	str	r2, [r3, #12]
 8016d28:	e0eb      	b.n	8016f02 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8016d2a:	231a      	movs	r3, #26
 8016d2c:	2218      	movs	r2, #24
 8016d2e:	189b      	adds	r3, r3, r2
 8016d30:	19db      	adds	r3, r3, r7
 8016d32:	2201      	movs	r2, #1
 8016d34:	701a      	strb	r2, [r3, #0]
 8016d36:	e0e4      	b.n	8016f02 <UART_SetConfig+0x50a>
 8016d38:	efff69f3 	.word	0xefff69f3
 8016d3c:	ffffcfff 	.word	0xffffcfff
 8016d40:	40004800 	.word	0x40004800
 8016d44:	fffff4ff 	.word	0xfffff4ff
 8016d48:	40013800 	.word	0x40013800
 8016d4c:	40021000 	.word	0x40021000
 8016d50:	40004400 	.word	0x40004400
 8016d54:	40004c00 	.word	0x40004c00
 8016d58:	40005000 	.word	0x40005000
 8016d5c:	003d0900 	.word	0x003d0900
 8016d60:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016d64:	69fb      	ldr	r3, [r7, #28]
 8016d66:	69da      	ldr	r2, [r3, #28]
 8016d68:	2380      	movs	r3, #128	@ 0x80
 8016d6a:	021b      	lsls	r3, r3, #8
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d000      	beq.n	8016d72 <UART_SetConfig+0x37a>
 8016d70:	e070      	b.n	8016e54 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8016d72:	231b      	movs	r3, #27
 8016d74:	2218      	movs	r2, #24
 8016d76:	189b      	adds	r3, r3, r2
 8016d78:	19db      	adds	r3, r3, r7
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	2b08      	cmp	r3, #8
 8016d7e:	d822      	bhi.n	8016dc6 <UART_SetConfig+0x3ce>
 8016d80:	009a      	lsls	r2, r3, #2
 8016d82:	4b67      	ldr	r3, [pc, #412]	@ (8016f20 <UART_SetConfig+0x528>)
 8016d84:	18d3      	adds	r3, r2, r3
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016d8a:	f7fd fddb 	bl	8014944 <HAL_RCC_GetPCLK1Freq>
 8016d8e:	0003      	movs	r3, r0
 8016d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016d92:	e021      	b.n	8016dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016d94:	f7fd fdec 	bl	8014970 <HAL_RCC_GetPCLK2Freq>
 8016d98:	0003      	movs	r3, r0
 8016d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016d9c:	e01c      	b.n	8016dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016d9e:	4b61      	ldr	r3, [pc, #388]	@ (8016f24 <UART_SetConfig+0x52c>)
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	2210      	movs	r2, #16
 8016da4:	4013      	ands	r3, r2
 8016da6:	d002      	beq.n	8016dae <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016da8:	4b5f      	ldr	r3, [pc, #380]	@ (8016f28 <UART_SetConfig+0x530>)
 8016daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016dac:	e014      	b.n	8016dd8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8016dae:	4b5f      	ldr	r3, [pc, #380]	@ (8016f2c <UART_SetConfig+0x534>)
 8016db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016db2:	e011      	b.n	8016dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016db4:	f7fd fd16 	bl	80147e4 <HAL_RCC_GetSysClockFreq>
 8016db8:	0003      	movs	r3, r0
 8016dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016dbc:	e00c      	b.n	8016dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016dbe:	2380      	movs	r3, #128	@ 0x80
 8016dc0:	021b      	lsls	r3, r3, #8
 8016dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016dc4:	e008      	b.n	8016dd8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016dca:	231a      	movs	r3, #26
 8016dcc:	2218      	movs	r2, #24
 8016dce:	189b      	adds	r3, r3, r2
 8016dd0:	19db      	adds	r3, r3, r7
 8016dd2:	2201      	movs	r2, #1
 8016dd4:	701a      	strb	r2, [r3, #0]
        break;
 8016dd6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d100      	bne.n	8016de0 <UART_SetConfig+0x3e8>
 8016dde:	e090      	b.n	8016f02 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8016de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016de2:	005a      	lsls	r2, r3, #1
 8016de4:	69fb      	ldr	r3, [r7, #28]
 8016de6:	685b      	ldr	r3, [r3, #4]
 8016de8:	085b      	lsrs	r3, r3, #1
 8016dea:	18d2      	adds	r2, r2, r3
 8016dec:	69fb      	ldr	r3, [r7, #28]
 8016dee:	685b      	ldr	r3, [r3, #4]
 8016df0:	0019      	movs	r1, r3
 8016df2:	0010      	movs	r0, r2
 8016df4:	f7e9 f9d6 	bl	80001a4 <__udivsi3>
 8016df8:	0003      	movs	r3, r0
 8016dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dfe:	2b0f      	cmp	r3, #15
 8016e00:	d921      	bls.n	8016e46 <UART_SetConfig+0x44e>
 8016e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016e04:	2380      	movs	r3, #128	@ 0x80
 8016e06:	025b      	lsls	r3, r3, #9
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d21c      	bcs.n	8016e46 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e0e:	b29a      	uxth	r2, r3
 8016e10:	200e      	movs	r0, #14
 8016e12:	2418      	movs	r4, #24
 8016e14:	1903      	adds	r3, r0, r4
 8016e16:	19db      	adds	r3, r3, r7
 8016e18:	210f      	movs	r1, #15
 8016e1a:	438a      	bics	r2, r1
 8016e1c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e20:	085b      	lsrs	r3, r3, #1
 8016e22:	b29b      	uxth	r3, r3
 8016e24:	2207      	movs	r2, #7
 8016e26:	4013      	ands	r3, r2
 8016e28:	b299      	uxth	r1, r3
 8016e2a:	1903      	adds	r3, r0, r4
 8016e2c:	19db      	adds	r3, r3, r7
 8016e2e:	1902      	adds	r2, r0, r4
 8016e30:	19d2      	adds	r2, r2, r7
 8016e32:	8812      	ldrh	r2, [r2, #0]
 8016e34:	430a      	orrs	r2, r1
 8016e36:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8016e38:	69fb      	ldr	r3, [r7, #28]
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	1902      	adds	r2, r0, r4
 8016e3e:	19d2      	adds	r2, r2, r7
 8016e40:	8812      	ldrh	r2, [r2, #0]
 8016e42:	60da      	str	r2, [r3, #12]
 8016e44:	e05d      	b.n	8016f02 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8016e46:	231a      	movs	r3, #26
 8016e48:	2218      	movs	r2, #24
 8016e4a:	189b      	adds	r3, r3, r2
 8016e4c:	19db      	adds	r3, r3, r7
 8016e4e:	2201      	movs	r2, #1
 8016e50:	701a      	strb	r2, [r3, #0]
 8016e52:	e056      	b.n	8016f02 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016e54:	231b      	movs	r3, #27
 8016e56:	2218      	movs	r2, #24
 8016e58:	189b      	adds	r3, r3, r2
 8016e5a:	19db      	adds	r3, r3, r7
 8016e5c:	781b      	ldrb	r3, [r3, #0]
 8016e5e:	2b08      	cmp	r3, #8
 8016e60:	d822      	bhi.n	8016ea8 <UART_SetConfig+0x4b0>
 8016e62:	009a      	lsls	r2, r3, #2
 8016e64:	4b32      	ldr	r3, [pc, #200]	@ (8016f30 <UART_SetConfig+0x538>)
 8016e66:	18d3      	adds	r3, r2, r3
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016e6c:	f7fd fd6a 	bl	8014944 <HAL_RCC_GetPCLK1Freq>
 8016e70:	0003      	movs	r3, r0
 8016e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016e74:	e021      	b.n	8016eba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016e76:	f7fd fd7b 	bl	8014970 <HAL_RCC_GetPCLK2Freq>
 8016e7a:	0003      	movs	r3, r0
 8016e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016e7e:	e01c      	b.n	8016eba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016e80:	4b28      	ldr	r3, [pc, #160]	@ (8016f24 <UART_SetConfig+0x52c>)
 8016e82:	681b      	ldr	r3, [r3, #0]
 8016e84:	2210      	movs	r2, #16
 8016e86:	4013      	ands	r3, r2
 8016e88:	d002      	beq.n	8016e90 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8016e8a:	4b27      	ldr	r3, [pc, #156]	@ (8016f28 <UART_SetConfig+0x530>)
 8016e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016e8e:	e014      	b.n	8016eba <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8016e90:	4b26      	ldr	r3, [pc, #152]	@ (8016f2c <UART_SetConfig+0x534>)
 8016e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016e94:	e011      	b.n	8016eba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016e96:	f7fd fca5 	bl	80147e4 <HAL_RCC_GetSysClockFreq>
 8016e9a:	0003      	movs	r3, r0
 8016e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016e9e:	e00c      	b.n	8016eba <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016ea0:	2380      	movs	r3, #128	@ 0x80
 8016ea2:	021b      	lsls	r3, r3, #8
 8016ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8016ea6:	e008      	b.n	8016eba <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8016eac:	231a      	movs	r3, #26
 8016eae:	2218      	movs	r2, #24
 8016eb0:	189b      	adds	r3, r3, r2
 8016eb2:	19db      	adds	r3, r3, r7
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	701a      	strb	r2, [r3, #0]
        break;
 8016eb8:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8016eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d020      	beq.n	8016f02 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	685b      	ldr	r3, [r3, #4]
 8016ec4:	085a      	lsrs	r2, r3, #1
 8016ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ec8:	18d2      	adds	r2, r2, r3
 8016eca:	69fb      	ldr	r3, [r7, #28]
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	0019      	movs	r1, r3
 8016ed0:	0010      	movs	r0, r2
 8016ed2:	f7e9 f967 	bl	80001a4 <__udivsi3>
 8016ed6:	0003      	movs	r3, r0
 8016ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016edc:	2b0f      	cmp	r3, #15
 8016ede:	d90a      	bls.n	8016ef6 <UART_SetConfig+0x4fe>
 8016ee0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ee2:	2380      	movs	r3, #128	@ 0x80
 8016ee4:	025b      	lsls	r3, r3, #9
 8016ee6:	429a      	cmp	r2, r3
 8016ee8:	d205      	bcs.n	8016ef6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016eec:	b29a      	uxth	r2, r3
 8016eee:	69fb      	ldr	r3, [r7, #28]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	60da      	str	r2, [r3, #12]
 8016ef4:	e005      	b.n	8016f02 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8016ef6:	231a      	movs	r3, #26
 8016ef8:	2218      	movs	r2, #24
 8016efa:	189b      	adds	r3, r3, r2
 8016efc:	19db      	adds	r3, r3, r7
 8016efe:	2201      	movs	r2, #1
 8016f00:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016f02:	69fb      	ldr	r3, [r7, #28]
 8016f04:	2200      	movs	r2, #0
 8016f06:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8016f08:	69fb      	ldr	r3, [r7, #28]
 8016f0a:	2200      	movs	r2, #0
 8016f0c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8016f0e:	231a      	movs	r3, #26
 8016f10:	2218      	movs	r2, #24
 8016f12:	189b      	adds	r3, r3, r2
 8016f14:	19db      	adds	r3, r3, r7
 8016f16:	781b      	ldrb	r3, [r3, #0]
}
 8016f18:	0018      	movs	r0, r3
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	b00e      	add	sp, #56	@ 0x38
 8016f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8016f20:	08023cbc 	.word	0x08023cbc
 8016f24:	40021000 	.word	0x40021000
 8016f28:	003d0900 	.word	0x003d0900
 8016f2c:	00f42400 	.word	0x00f42400
 8016f30:	08023ce0 	.word	0x08023ce0

08016f34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f40:	2201      	movs	r2, #1
 8016f42:	4013      	ands	r3, r2
 8016f44:	d00b      	beq.n	8016f5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	685b      	ldr	r3, [r3, #4]
 8016f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8017078 <UART_AdvFeatureConfig+0x144>)
 8016f4e:	4013      	ands	r3, r2
 8016f50:	0019      	movs	r1, r3
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	430a      	orrs	r2, r1
 8016f5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f62:	2202      	movs	r2, #2
 8016f64:	4013      	ands	r3, r2
 8016f66:	d00b      	beq.n	8016f80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	685b      	ldr	r3, [r3, #4]
 8016f6e:	4a43      	ldr	r2, [pc, #268]	@ (801707c <UART_AdvFeatureConfig+0x148>)
 8016f70:	4013      	ands	r3, r2
 8016f72:	0019      	movs	r1, r3
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	430a      	orrs	r2, r1
 8016f7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f84:	2204      	movs	r2, #4
 8016f86:	4013      	ands	r3, r2
 8016f88:	d00b      	beq.n	8016fa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	685b      	ldr	r3, [r3, #4]
 8016f90:	4a3b      	ldr	r2, [pc, #236]	@ (8017080 <UART_AdvFeatureConfig+0x14c>)
 8016f92:	4013      	ands	r3, r2
 8016f94:	0019      	movs	r1, r3
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	430a      	orrs	r2, r1
 8016fa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fa6:	2208      	movs	r2, #8
 8016fa8:	4013      	ands	r3, r2
 8016faa:	d00b      	beq.n	8016fc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	685b      	ldr	r3, [r3, #4]
 8016fb2:	4a34      	ldr	r2, [pc, #208]	@ (8017084 <UART_AdvFeatureConfig+0x150>)
 8016fb4:	4013      	ands	r3, r2
 8016fb6:	0019      	movs	r1, r3
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	430a      	orrs	r2, r1
 8016fc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fc8:	2210      	movs	r2, #16
 8016fca:	4013      	ands	r3, r2
 8016fcc:	d00b      	beq.n	8016fe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	689b      	ldr	r3, [r3, #8]
 8016fd4:	4a2c      	ldr	r2, [pc, #176]	@ (8017088 <UART_AdvFeatureConfig+0x154>)
 8016fd6:	4013      	ands	r3, r2
 8016fd8:	0019      	movs	r1, r3
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	430a      	orrs	r2, r1
 8016fe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fea:	2220      	movs	r2, #32
 8016fec:	4013      	ands	r3, r2
 8016fee:	d00b      	beq.n	8017008 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	689b      	ldr	r3, [r3, #8]
 8016ff6:	4a25      	ldr	r2, [pc, #148]	@ (801708c <UART_AdvFeatureConfig+0x158>)
 8016ff8:	4013      	ands	r3, r2
 8016ffa:	0019      	movs	r1, r3
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	430a      	orrs	r2, r1
 8017006:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801700c:	2240      	movs	r2, #64	@ 0x40
 801700e:	4013      	ands	r3, r2
 8017010:	d01d      	beq.n	801704e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	685b      	ldr	r3, [r3, #4]
 8017018:	4a1d      	ldr	r2, [pc, #116]	@ (8017090 <UART_AdvFeatureConfig+0x15c>)
 801701a:	4013      	ands	r3, r2
 801701c:	0019      	movs	r1, r3
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	430a      	orrs	r2, r1
 8017028:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801702e:	2380      	movs	r3, #128	@ 0x80
 8017030:	035b      	lsls	r3, r3, #13
 8017032:	429a      	cmp	r2, r3
 8017034:	d10b      	bne.n	801704e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	4a15      	ldr	r2, [pc, #84]	@ (8017094 <UART_AdvFeatureConfig+0x160>)
 801703e:	4013      	ands	r3, r2
 8017040:	0019      	movs	r1, r3
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	430a      	orrs	r2, r1
 801704c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017052:	2280      	movs	r2, #128	@ 0x80
 8017054:	4013      	ands	r3, r2
 8017056:	d00b      	beq.n	8017070 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	685b      	ldr	r3, [r3, #4]
 801705e:	4a0e      	ldr	r2, [pc, #56]	@ (8017098 <UART_AdvFeatureConfig+0x164>)
 8017060:	4013      	ands	r3, r2
 8017062:	0019      	movs	r1, r3
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	430a      	orrs	r2, r1
 801706e:	605a      	str	r2, [r3, #4]
  }
}
 8017070:	46c0      	nop			@ (mov r8, r8)
 8017072:	46bd      	mov	sp, r7
 8017074:	b002      	add	sp, #8
 8017076:	bd80      	pop	{r7, pc}
 8017078:	fffdffff 	.word	0xfffdffff
 801707c:	fffeffff 	.word	0xfffeffff
 8017080:	fffbffff 	.word	0xfffbffff
 8017084:	ffff7fff 	.word	0xffff7fff
 8017088:	ffffefff 	.word	0xffffefff
 801708c:	ffffdfff 	.word	0xffffdfff
 8017090:	ffefffff 	.word	0xffefffff
 8017094:	ff9fffff 	.word	0xff9fffff
 8017098:	fff7ffff 	.word	0xfff7ffff

0801709c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b092      	sub	sp, #72	@ 0x48
 80170a0:	af02      	add	r7, sp, #8
 80170a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	2284      	movs	r2, #132	@ 0x84
 80170a8:	2100      	movs	r1, #0
 80170aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80170ac:	f7f6 fd74 	bl	800db98 <HAL_GetTick>
 80170b0:	0003      	movs	r3, r0
 80170b2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	2208      	movs	r2, #8
 80170bc:	4013      	ands	r3, r2
 80170be:	2b08      	cmp	r3, #8
 80170c0:	d12c      	bne.n	801711c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80170c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80170c4:	2280      	movs	r2, #128	@ 0x80
 80170c6:	0391      	lsls	r1, r2, #14
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	4a46      	ldr	r2, [pc, #280]	@ (80171e4 <UART_CheckIdleState+0x148>)
 80170cc:	9200      	str	r2, [sp, #0]
 80170ce:	2200      	movs	r2, #0
 80170d0:	f000 f88c 	bl	80171ec <UART_WaitOnFlagUntilTimeout>
 80170d4:	1e03      	subs	r3, r0, #0
 80170d6:	d021      	beq.n	801711c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80170d8:	f3ef 8310 	mrs	r3, PRIMASK
 80170dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80170de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80170e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80170e2:	2301      	movs	r3, #1
 80170e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80170e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170e8:	f383 8810 	msr	PRIMASK, r3
}
 80170ec:	46c0      	nop			@ (mov r8, r8)
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	2180      	movs	r1, #128	@ 0x80
 80170fa:	438a      	bics	r2, r1
 80170fc:	601a      	str	r2, [r3, #0]
 80170fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017100:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017104:	f383 8810 	msr	PRIMASK, r3
}
 8017108:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	2220      	movs	r2, #32
 801710e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2278      	movs	r2, #120	@ 0x78
 8017114:	2100      	movs	r1, #0
 8017116:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017118:	2303      	movs	r3, #3
 801711a:	e05f      	b.n	80171dc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	2204      	movs	r2, #4
 8017124:	4013      	ands	r3, r2
 8017126:	2b04      	cmp	r3, #4
 8017128:	d146      	bne.n	80171b8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801712a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801712c:	2280      	movs	r2, #128	@ 0x80
 801712e:	03d1      	lsls	r1, r2, #15
 8017130:	6878      	ldr	r0, [r7, #4]
 8017132:	4a2c      	ldr	r2, [pc, #176]	@ (80171e4 <UART_CheckIdleState+0x148>)
 8017134:	9200      	str	r2, [sp, #0]
 8017136:	2200      	movs	r2, #0
 8017138:	f000 f858 	bl	80171ec <UART_WaitOnFlagUntilTimeout>
 801713c:	1e03      	subs	r3, r0, #0
 801713e:	d03b      	beq.n	80171b8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017140:	f3ef 8310 	mrs	r3, PRIMASK
 8017144:	60fb      	str	r3, [r7, #12]
  return(result);
 8017146:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017148:	637b      	str	r3, [r7, #52]	@ 0x34
 801714a:	2301      	movs	r3, #1
 801714c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801714e:	693b      	ldr	r3, [r7, #16]
 8017150:	f383 8810 	msr	PRIMASK, r3
}
 8017154:	46c0      	nop			@ (mov r8, r8)
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	681a      	ldr	r2, [r3, #0]
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	4921      	ldr	r1, [pc, #132]	@ (80171e8 <UART_CheckIdleState+0x14c>)
 8017162:	400a      	ands	r2, r1
 8017164:	601a      	str	r2, [r3, #0]
 8017166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017168:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801716a:	697b      	ldr	r3, [r7, #20]
 801716c:	f383 8810 	msr	PRIMASK, r3
}
 8017170:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017172:	f3ef 8310 	mrs	r3, PRIMASK
 8017176:	61bb      	str	r3, [r7, #24]
  return(result);
 8017178:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801717a:	633b      	str	r3, [r7, #48]	@ 0x30
 801717c:	2301      	movs	r3, #1
 801717e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017180:	69fb      	ldr	r3, [r7, #28]
 8017182:	f383 8810 	msr	PRIMASK, r3
}
 8017186:	46c0      	nop			@ (mov r8, r8)
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	689a      	ldr	r2, [r3, #8]
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	2101      	movs	r1, #1
 8017194:	438a      	bics	r2, r1
 8017196:	609a      	str	r2, [r3, #8]
 8017198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801719a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801719c:	6a3b      	ldr	r3, [r7, #32]
 801719e:	f383 8810 	msr	PRIMASK, r3
}
 80171a2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2280      	movs	r2, #128	@ 0x80
 80171a8:	2120      	movs	r1, #32
 80171aa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	2278      	movs	r2, #120	@ 0x78
 80171b0:	2100      	movs	r1, #0
 80171b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80171b4:	2303      	movs	r3, #3
 80171b6:	e011      	b.n	80171dc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2220      	movs	r2, #32
 80171bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	2280      	movs	r2, #128	@ 0x80
 80171c2:	2120      	movs	r1, #32
 80171c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	2200      	movs	r2, #0
 80171ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	2200      	movs	r2, #0
 80171d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	2278      	movs	r2, #120	@ 0x78
 80171d6:	2100      	movs	r1, #0
 80171d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80171da:	2300      	movs	r3, #0
}
 80171dc:	0018      	movs	r0, r3
 80171de:	46bd      	mov	sp, r7
 80171e0:	b010      	add	sp, #64	@ 0x40
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	01ffffff 	.word	0x01ffffff
 80171e8:	fffffedf 	.word	0xfffffedf

080171ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b084      	sub	sp, #16
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	603b      	str	r3, [r7, #0]
 80171f8:	1dfb      	adds	r3, r7, #7
 80171fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80171fc:	e04b      	b.n	8017296 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80171fe:	69bb      	ldr	r3, [r7, #24]
 8017200:	3301      	adds	r3, #1
 8017202:	d048      	beq.n	8017296 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017204:	f7f6 fcc8 	bl	800db98 <HAL_GetTick>
 8017208:	0002      	movs	r2, r0
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	1ad3      	subs	r3, r2, r3
 801720e:	69ba      	ldr	r2, [r7, #24]
 8017210:	429a      	cmp	r2, r3
 8017212:	d302      	bcc.n	801721a <UART_WaitOnFlagUntilTimeout+0x2e>
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d101      	bne.n	801721e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 801721a:	2303      	movs	r3, #3
 801721c:	e04b      	b.n	80172b6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	2204      	movs	r2, #4
 8017226:	4013      	ands	r3, r2
 8017228:	d035      	beq.n	8017296 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	69db      	ldr	r3, [r3, #28]
 8017230:	2208      	movs	r2, #8
 8017232:	4013      	ands	r3, r2
 8017234:	2b08      	cmp	r3, #8
 8017236:	d111      	bne.n	801725c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	2208      	movs	r2, #8
 801723e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	0018      	movs	r0, r3
 8017244:	f000 f9ca 	bl	80175dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	2284      	movs	r2, #132	@ 0x84
 801724c:	2108      	movs	r1, #8
 801724e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	2278      	movs	r2, #120	@ 0x78
 8017254:	2100      	movs	r1, #0
 8017256:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8017258:	2301      	movs	r3, #1
 801725a:	e02c      	b.n	80172b6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	69da      	ldr	r2, [r3, #28]
 8017262:	2380      	movs	r3, #128	@ 0x80
 8017264:	011b      	lsls	r3, r3, #4
 8017266:	401a      	ands	r2, r3
 8017268:	2380      	movs	r3, #128	@ 0x80
 801726a:	011b      	lsls	r3, r3, #4
 801726c:	429a      	cmp	r2, r3
 801726e:	d112      	bne.n	8017296 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	681b      	ldr	r3, [r3, #0]
 8017274:	2280      	movs	r2, #128	@ 0x80
 8017276:	0112      	lsls	r2, r2, #4
 8017278:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801727a:	68fb      	ldr	r3, [r7, #12]
 801727c:	0018      	movs	r0, r3
 801727e:	f000 f9ad 	bl	80175dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	2284      	movs	r2, #132	@ 0x84
 8017286:	2120      	movs	r1, #32
 8017288:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2278      	movs	r2, #120	@ 0x78
 801728e:	2100      	movs	r1, #0
 8017290:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8017292:	2303      	movs	r3, #3
 8017294:	e00f      	b.n	80172b6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	69db      	ldr	r3, [r3, #28]
 801729c:	68ba      	ldr	r2, [r7, #8]
 801729e:	4013      	ands	r3, r2
 80172a0:	68ba      	ldr	r2, [r7, #8]
 80172a2:	1ad3      	subs	r3, r2, r3
 80172a4:	425a      	negs	r2, r3
 80172a6:	4153      	adcs	r3, r2
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	001a      	movs	r2, r3
 80172ac:	1dfb      	adds	r3, r7, #7
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	429a      	cmp	r2, r3
 80172b2:	d0a4      	beq.n	80171fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80172b4:	2300      	movs	r3, #0
}
 80172b6:	0018      	movs	r0, r3
 80172b8:	46bd      	mov	sp, r7
 80172ba:	b004      	add	sp, #16
 80172bc:	bd80      	pop	{r7, pc}
	...

080172c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b090      	sub	sp, #64	@ 0x40
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	60f8      	str	r0, [r7, #12]
 80172c8:	60b9      	str	r1, [r7, #8]
 80172ca:	1dbb      	adds	r3, r7, #6
 80172cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	68ba      	ldr	r2, [r7, #8]
 80172d2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	1dba      	adds	r2, r7, #6
 80172d8:	2158      	movs	r1, #88	@ 0x58
 80172da:	8812      	ldrh	r2, [r2, #0]
 80172dc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	1dba      	adds	r2, r7, #6
 80172e2:	215a      	movs	r1, #90	@ 0x5a
 80172e4:	8812      	ldrh	r2, [r2, #0]
 80172e6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80172e8:	68fb      	ldr	r3, [r7, #12]
 80172ea:	2200      	movs	r2, #0
 80172ec:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	689a      	ldr	r2, [r3, #8]
 80172f2:	2380      	movs	r3, #128	@ 0x80
 80172f4:	015b      	lsls	r3, r3, #5
 80172f6:	429a      	cmp	r2, r3
 80172f8:	d10d      	bne.n	8017316 <UART_Start_Receive_IT+0x56>
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	691b      	ldr	r3, [r3, #16]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d104      	bne.n	801730c <UART_Start_Receive_IT+0x4c>
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	225c      	movs	r2, #92	@ 0x5c
 8017306:	4950      	ldr	r1, [pc, #320]	@ (8017448 <UART_Start_Receive_IT+0x188>)
 8017308:	5299      	strh	r1, [r3, r2]
 801730a:	e02e      	b.n	801736a <UART_Start_Receive_IT+0xaa>
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	225c      	movs	r2, #92	@ 0x5c
 8017310:	21ff      	movs	r1, #255	@ 0xff
 8017312:	5299      	strh	r1, [r3, r2]
 8017314:	e029      	b.n	801736a <UART_Start_Receive_IT+0xaa>
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	689b      	ldr	r3, [r3, #8]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d10d      	bne.n	801733a <UART_Start_Receive_IT+0x7a>
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	691b      	ldr	r3, [r3, #16]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d104      	bne.n	8017330 <UART_Start_Receive_IT+0x70>
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	225c      	movs	r2, #92	@ 0x5c
 801732a:	21ff      	movs	r1, #255	@ 0xff
 801732c:	5299      	strh	r1, [r3, r2]
 801732e:	e01c      	b.n	801736a <UART_Start_Receive_IT+0xaa>
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	225c      	movs	r2, #92	@ 0x5c
 8017334:	217f      	movs	r1, #127	@ 0x7f
 8017336:	5299      	strh	r1, [r3, r2]
 8017338:	e017      	b.n	801736a <UART_Start_Receive_IT+0xaa>
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	689a      	ldr	r2, [r3, #8]
 801733e:	2380      	movs	r3, #128	@ 0x80
 8017340:	055b      	lsls	r3, r3, #21
 8017342:	429a      	cmp	r2, r3
 8017344:	d10d      	bne.n	8017362 <UART_Start_Receive_IT+0xa2>
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	691b      	ldr	r3, [r3, #16]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d104      	bne.n	8017358 <UART_Start_Receive_IT+0x98>
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	225c      	movs	r2, #92	@ 0x5c
 8017352:	217f      	movs	r1, #127	@ 0x7f
 8017354:	5299      	strh	r1, [r3, r2]
 8017356:	e008      	b.n	801736a <UART_Start_Receive_IT+0xaa>
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	225c      	movs	r2, #92	@ 0x5c
 801735c:	213f      	movs	r1, #63	@ 0x3f
 801735e:	5299      	strh	r1, [r3, r2]
 8017360:	e003      	b.n	801736a <UART_Start_Receive_IT+0xaa>
 8017362:	68fb      	ldr	r3, [r7, #12]
 8017364:	225c      	movs	r2, #92	@ 0x5c
 8017366:	2100      	movs	r1, #0
 8017368:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	2284      	movs	r2, #132	@ 0x84
 801736e:	2100      	movs	r1, #0
 8017370:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	2280      	movs	r2, #128	@ 0x80
 8017376:	2122      	movs	r1, #34	@ 0x22
 8017378:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801737a:	f3ef 8310 	mrs	r3, PRIMASK
 801737e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8017380:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017384:	2301      	movs	r3, #1
 8017386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801738a:	f383 8810 	msr	PRIMASK, r3
}
 801738e:	46c0      	nop			@ (mov r8, r8)
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	689a      	ldr	r2, [r3, #8]
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	2101      	movs	r1, #1
 801739c:	430a      	orrs	r2, r1
 801739e:	609a      	str	r2, [r3, #8]
 80173a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173a2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173a6:	f383 8810 	msr	PRIMASK, r3
}
 80173aa:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	689a      	ldr	r2, [r3, #8]
 80173b0:	2380      	movs	r3, #128	@ 0x80
 80173b2:	015b      	lsls	r3, r3, #5
 80173b4:	429a      	cmp	r2, r3
 80173b6:	d107      	bne.n	80173c8 <UART_Start_Receive_IT+0x108>
 80173b8:	68fb      	ldr	r3, [r7, #12]
 80173ba:	691b      	ldr	r3, [r3, #16]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d103      	bne.n	80173c8 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	4a22      	ldr	r2, [pc, #136]	@ (801744c <UART_Start_Receive_IT+0x18c>)
 80173c4:	669a      	str	r2, [r3, #104]	@ 0x68
 80173c6:	e002      	b.n	80173ce <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	4a21      	ldr	r2, [pc, #132]	@ (8017450 <UART_Start_Receive_IT+0x190>)
 80173cc:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	691b      	ldr	r3, [r3, #16]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d019      	beq.n	801740a <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80173d6:	f3ef 8310 	mrs	r3, PRIMASK
 80173da:	61fb      	str	r3, [r7, #28]
  return(result);
 80173dc:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80173de:	637b      	str	r3, [r7, #52]	@ 0x34
 80173e0:	2301      	movs	r3, #1
 80173e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80173e4:	6a3b      	ldr	r3, [r7, #32]
 80173e6:	f383 8810 	msr	PRIMASK, r3
}
 80173ea:	46c0      	nop			@ (mov r8, r8)
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	681a      	ldr	r2, [r3, #0]
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	2190      	movs	r1, #144	@ 0x90
 80173f8:	0049      	lsls	r1, r1, #1
 80173fa:	430a      	orrs	r2, r1
 80173fc:	601a      	str	r2, [r3, #0]
 80173fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017400:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017404:	f383 8810 	msr	PRIMASK, r3
}
 8017408:	e018      	b.n	801743c <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801740a:	f3ef 8310 	mrs	r3, PRIMASK
 801740e:	613b      	str	r3, [r7, #16]
  return(result);
 8017410:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8017412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017414:	2301      	movs	r3, #1
 8017416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	f383 8810 	msr	PRIMASK, r3
}
 801741e:	46c0      	nop			@ (mov r8, r8)
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	681a      	ldr	r2, [r3, #0]
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	2120      	movs	r1, #32
 801742c:	430a      	orrs	r2, r1
 801742e:	601a      	str	r2, [r3, #0]
 8017430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017432:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017434:	69bb      	ldr	r3, [r7, #24]
 8017436:	f383 8810 	msr	PRIMASK, r3
}
 801743a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 801743c:	2300      	movs	r3, #0
}
 801743e:	0018      	movs	r0, r3
 8017440:	46bd      	mov	sp, r7
 8017442:	b010      	add	sp, #64	@ 0x40
 8017444:	bd80      	pop	{r7, pc}
 8017446:	46c0      	nop			@ (mov r8, r8)
 8017448:	000001ff 	.word	0x000001ff
 801744c:	08017bc1 	.word	0x08017bc1
 8017450:	080179f5 	.word	0x080179f5

08017454 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b090      	sub	sp, #64	@ 0x40
 8017458:	af00      	add	r7, sp, #0
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	1dbb      	adds	r3, r7, #6
 8017460:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	68ba      	ldr	r2, [r7, #8]
 8017466:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	1dba      	adds	r2, r7, #6
 801746c:	2158      	movs	r1, #88	@ 0x58
 801746e:	8812      	ldrh	r2, [r2, #0]
 8017470:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	2284      	movs	r2, #132	@ 0x84
 8017476:	2100      	movs	r1, #0
 8017478:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	2280      	movs	r2, #128	@ 0x80
 801747e:	2122      	movs	r1, #34	@ 0x22
 8017480:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8017482:	68fb      	ldr	r3, [r7, #12]
 8017484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017486:	2b00      	cmp	r3, #0
 8017488:	d028      	beq.n	80174dc <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801748e:	4a3e      	ldr	r2, [pc, #248]	@ (8017588 <UART_Start_Receive_DMA+0x134>)
 8017490:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017496:	4a3d      	ldr	r2, [pc, #244]	@ (801758c <UART_Start_Receive_DMA+0x138>)
 8017498:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801749e:	4a3c      	ldr	r2, [pc, #240]	@ (8017590 <UART_Start_Receive_DMA+0x13c>)
 80174a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80174a6:	2200      	movs	r2, #0
 80174a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	3324      	adds	r3, #36	@ 0x24
 80174b4:	0019      	movs	r1, r3
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80174ba:	001a      	movs	r2, r3
 80174bc:	1dbb      	adds	r3, r7, #6
 80174be:	881b      	ldrh	r3, [r3, #0]
 80174c0:	f7f7 f8a6 	bl	800e610 <HAL_DMA_Start_IT>
 80174c4:	1e03      	subs	r3, r0, #0
 80174c6:	d009      	beq.n	80174dc <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	2284      	movs	r2, #132	@ 0x84
 80174cc:	2110      	movs	r1, #16
 80174ce:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	2280      	movs	r2, #128	@ 0x80
 80174d4:	2120      	movs	r1, #32
 80174d6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80174d8:	2301      	movs	r3, #1
 80174da:	e050      	b.n	801757e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	691b      	ldr	r3, [r3, #16]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d019      	beq.n	8017518 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80174e4:	f3ef 8310 	mrs	r3, PRIMASK
 80174e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80174ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80174ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80174ee:	2301      	movs	r3, #1
 80174f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80174f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174f4:	f383 8810 	msr	PRIMASK, r3
}
 80174f8:	46c0      	nop			@ (mov r8, r8)
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	681a      	ldr	r2, [r3, #0]
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	2180      	movs	r1, #128	@ 0x80
 8017506:	0049      	lsls	r1, r1, #1
 8017508:	430a      	orrs	r2, r1
 801750a:	601a      	str	r2, [r3, #0]
 801750c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801750e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017512:	f383 8810 	msr	PRIMASK, r3
}
 8017516:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017518:	f3ef 8310 	mrs	r3, PRIMASK
 801751c:	613b      	str	r3, [r7, #16]
  return(result);
 801751e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017522:	2301      	movs	r3, #1
 8017524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017526:	697b      	ldr	r3, [r7, #20]
 8017528:	f383 8810 	msr	PRIMASK, r3
}
 801752c:	46c0      	nop			@ (mov r8, r8)
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	689a      	ldr	r2, [r3, #8]
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	681b      	ldr	r3, [r3, #0]
 8017538:	2101      	movs	r1, #1
 801753a:	430a      	orrs	r2, r1
 801753c:	609a      	str	r2, [r3, #8]
 801753e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017540:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017542:	69bb      	ldr	r3, [r7, #24]
 8017544:	f383 8810 	msr	PRIMASK, r3
}
 8017548:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801754a:	f3ef 8310 	mrs	r3, PRIMASK
 801754e:	61fb      	str	r3, [r7, #28]
  return(result);
 8017550:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017552:	637b      	str	r3, [r7, #52]	@ 0x34
 8017554:	2301      	movs	r3, #1
 8017556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017558:	6a3b      	ldr	r3, [r7, #32]
 801755a:	f383 8810 	msr	PRIMASK, r3
}
 801755e:	46c0      	nop			@ (mov r8, r8)
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	689a      	ldr	r2, [r3, #8]
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	2140      	movs	r1, #64	@ 0x40
 801756c:	430a      	orrs	r2, r1
 801756e:	609a      	str	r2, [r3, #8]
 8017570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017572:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017576:	f383 8810 	msr	PRIMASK, r3
}
 801757a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 801757c:	2300      	movs	r3, #0
}
 801757e:	0018      	movs	r0, r3
 8017580:	46bd      	mov	sp, r7
 8017582:	b010      	add	sp, #64	@ 0x40
 8017584:	bd80      	pop	{r7, pc}
 8017586:	46c0      	nop			@ (mov r8, r8)
 8017588:	08017765 	.word	0x08017765
 801758c:	08017899 	.word	0x08017899
 8017590:	080178e1 	.word	0x080178e1

08017594 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017594:	b580      	push	{r7, lr}
 8017596:	b086      	sub	sp, #24
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801759c:	f3ef 8310 	mrs	r3, PRIMASK
 80175a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80175a2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80175a4:	617b      	str	r3, [r7, #20]
 80175a6:	2301      	movs	r3, #1
 80175a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	f383 8810 	msr	PRIMASK, r3
}
 80175b0:	46c0      	nop			@ (mov r8, r8)
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	681a      	ldr	r2, [r3, #0]
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	21c0      	movs	r1, #192	@ 0xc0
 80175be:	438a      	bics	r2, r1
 80175c0:	601a      	str	r2, [r3, #0]
 80175c2:	697b      	ldr	r3, [r7, #20]
 80175c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	f383 8810 	msr	PRIMASK, r3
}
 80175cc:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	2220      	movs	r2, #32
 80175d2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80175d4:	46c0      	nop			@ (mov r8, r8)
 80175d6:	46bd      	mov	sp, r7
 80175d8:	b006      	add	sp, #24
 80175da:	bd80      	pop	{r7, pc}

080175dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b08e      	sub	sp, #56	@ 0x38
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80175e4:	f3ef 8310 	mrs	r3, PRIMASK
 80175e8:	617b      	str	r3, [r7, #20]
  return(result);
 80175ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80175ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80175ee:	2301      	movs	r3, #1
 80175f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80175f2:	69bb      	ldr	r3, [r7, #24]
 80175f4:	f383 8810 	msr	PRIMASK, r3
}
 80175f8:	46c0      	nop			@ (mov r8, r8)
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	681a      	ldr	r2, [r3, #0]
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	4926      	ldr	r1, [pc, #152]	@ (80176a0 <UART_EndRxTransfer+0xc4>)
 8017606:	400a      	ands	r2, r1
 8017608:	601a      	str	r2, [r3, #0]
 801760a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801760c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801760e:	69fb      	ldr	r3, [r7, #28]
 8017610:	f383 8810 	msr	PRIMASK, r3
}
 8017614:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017616:	f3ef 8310 	mrs	r3, PRIMASK
 801761a:	623b      	str	r3, [r7, #32]
  return(result);
 801761c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801761e:	633b      	str	r3, [r7, #48]	@ 0x30
 8017620:	2301      	movs	r3, #1
 8017622:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017626:	f383 8810 	msr	PRIMASK, r3
}
 801762a:	46c0      	nop			@ (mov r8, r8)
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	689a      	ldr	r2, [r3, #8]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	2101      	movs	r1, #1
 8017638:	438a      	bics	r2, r1
 801763a:	609a      	str	r2, [r3, #8]
 801763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801763e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017642:	f383 8810 	msr	PRIMASK, r3
}
 8017646:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801764c:	2b01      	cmp	r3, #1
 801764e:	d118      	bne.n	8017682 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017650:	f3ef 8310 	mrs	r3, PRIMASK
 8017654:	60bb      	str	r3, [r7, #8]
  return(result);
 8017656:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801765a:	2301      	movs	r3, #1
 801765c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	f383 8810 	msr	PRIMASK, r3
}
 8017664:	46c0      	nop			@ (mov r8, r8)
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2110      	movs	r1, #16
 8017672:	438a      	bics	r2, r1
 8017674:	601a      	str	r2, [r3, #0]
 8017676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017678:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801767a:	693b      	ldr	r3, [r7, #16]
 801767c:	f383 8810 	msr	PRIMASK, r3
}
 8017680:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	2280      	movs	r2, #128	@ 0x80
 8017686:	2120      	movs	r1, #32
 8017688:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2200      	movs	r2, #0
 801768e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2200      	movs	r2, #0
 8017694:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8017696:	46c0      	nop			@ (mov r8, r8)
 8017698:	46bd      	mov	sp, r7
 801769a:	b00e      	add	sp, #56	@ 0x38
 801769c:	bd80      	pop	{r7, pc}
 801769e:	46c0      	nop			@ (mov r8, r8)
 80176a0:	fffffedf 	.word	0xfffffedf

080176a4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80176a4:	b580      	push	{r7, lr}
 80176a6:	b08c      	sub	sp, #48	@ 0x30
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80176b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	681b      	ldr	r3, [r3, #0]
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	2220      	movs	r2, #32
 80176ba:	4013      	ands	r3, r2
 80176bc:	d135      	bne.n	801772a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80176be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176c0:	2252      	movs	r2, #82	@ 0x52
 80176c2:	2100      	movs	r1, #0
 80176c4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176c6:	f3ef 8310 	mrs	r3, PRIMASK
 80176ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80176cc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80176ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80176d0:	2301      	movs	r3, #1
 80176d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176d4:	693b      	ldr	r3, [r7, #16]
 80176d6:	f383 8810 	msr	PRIMASK, r3
}
 80176da:	46c0      	nop			@ (mov r8, r8)
 80176dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	689a      	ldr	r2, [r3, #8]
 80176e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	2180      	movs	r1, #128	@ 0x80
 80176e8:	438a      	bics	r2, r1
 80176ea:	609a      	str	r2, [r3, #8]
 80176ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80176f0:	697b      	ldr	r3, [r7, #20]
 80176f2:	f383 8810 	msr	PRIMASK, r3
}
 80176f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80176f8:	f3ef 8310 	mrs	r3, PRIMASK
 80176fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80176fe:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017700:	627b      	str	r3, [r7, #36]	@ 0x24
 8017702:	2301      	movs	r3, #1
 8017704:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017706:	69fb      	ldr	r3, [r7, #28]
 8017708:	f383 8810 	msr	PRIMASK, r3
}
 801770c:	46c0      	nop			@ (mov r8, r8)
 801770e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	681a      	ldr	r2, [r3, #0]
 8017714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	2140      	movs	r1, #64	@ 0x40
 801771a:	430a      	orrs	r2, r1
 801771c:	601a      	str	r2, [r3, #0]
 801771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017720:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017722:	6a3b      	ldr	r3, [r7, #32]
 8017724:	f383 8810 	msr	PRIMASK, r3
}
 8017728:	e006      	b.n	8017738 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801772c:	228c      	movs	r2, #140	@ 0x8c
 801772e:	589b      	ldr	r3, [r3, r2]
 8017730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017732:	0010      	movs	r0, r2
 8017734:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017736:	46c0      	nop			@ (mov r8, r8)
 8017738:	46c0      	nop			@ (mov r8, r8)
 801773a:	46bd      	mov	sp, r7
 801773c:	b00c      	add	sp, #48	@ 0x30
 801773e:	bd80      	pop	{r7, pc}

08017740 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b084      	sub	sp, #16
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801774c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	2288      	movs	r2, #136	@ 0x88
 8017752:	589b      	ldr	r3, [r3, r2]
 8017754:	68fa      	ldr	r2, [r7, #12]
 8017756:	0010      	movs	r0, r2
 8017758:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801775a:	46c0      	nop			@ (mov r8, r8)
 801775c:	46bd      	mov	sp, r7
 801775e:	b004      	add	sp, #16
 8017760:	bd80      	pop	{r7, pc}
	...

08017764 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b094      	sub	sp, #80	@ 0x50
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017770:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	2220      	movs	r2, #32
 801777a:	4013      	ands	r3, r2
 801777c:	d16f      	bne.n	801785e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 801777e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017780:	225a      	movs	r2, #90	@ 0x5a
 8017782:	2100      	movs	r1, #0
 8017784:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017786:	f3ef 8310 	mrs	r3, PRIMASK
 801778a:	61bb      	str	r3, [r7, #24]
  return(result);
 801778c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801778e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017790:	2301      	movs	r3, #1
 8017792:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017794:	69fb      	ldr	r3, [r7, #28]
 8017796:	f383 8810 	msr	PRIMASK, r3
}
 801779a:	46c0      	nop			@ (mov r8, r8)
 801779c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	681a      	ldr	r2, [r3, #0]
 80177a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	493b      	ldr	r1, [pc, #236]	@ (8017894 <UART_DMAReceiveCplt+0x130>)
 80177a8:	400a      	ands	r2, r1
 80177aa:	601a      	str	r2, [r3, #0]
 80177ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80177ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177b0:	6a3b      	ldr	r3, [r7, #32]
 80177b2:	f383 8810 	msr	PRIMASK, r3
}
 80177b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177b8:	f3ef 8310 	mrs	r3, PRIMASK
 80177bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80177be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80177c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80177c2:	2301      	movs	r3, #1
 80177c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80177c8:	f383 8810 	msr	PRIMASK, r3
}
 80177cc:	46c0      	nop			@ (mov r8, r8)
 80177ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	689a      	ldr	r2, [r3, #8]
 80177d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	2101      	movs	r1, #1
 80177da:	438a      	bics	r2, r1
 80177dc:	609a      	str	r2, [r3, #8]
 80177de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177e4:	f383 8810 	msr	PRIMASK, r3
}
 80177e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80177ea:	f3ef 8310 	mrs	r3, PRIMASK
 80177ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80177f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80177f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80177f4:	2301      	movs	r3, #1
 80177f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80177f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177fa:	f383 8810 	msr	PRIMASK, r3
}
 80177fe:	46c0      	nop			@ (mov r8, r8)
 8017800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	689a      	ldr	r2, [r3, #8]
 8017806:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	2140      	movs	r1, #64	@ 0x40
 801780c:	438a      	bics	r2, r1
 801780e:	609a      	str	r2, [r3, #8]
 8017810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017812:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017816:	f383 8810 	msr	PRIMASK, r3
}
 801781a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801781c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801781e:	2280      	movs	r2, #128	@ 0x80
 8017820:	2120      	movs	r1, #32
 8017822:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017828:	2b01      	cmp	r3, #1
 801782a:	d118      	bne.n	801785e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801782c:	f3ef 8310 	mrs	r3, PRIMASK
 8017830:	60fb      	str	r3, [r7, #12]
  return(result);
 8017832:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017836:	2301      	movs	r3, #1
 8017838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	f383 8810 	msr	PRIMASK, r3
}
 8017840:	46c0      	nop			@ (mov r8, r8)
 8017842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	681a      	ldr	r2, [r3, #0]
 8017848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	2110      	movs	r1, #16
 801784e:	438a      	bics	r2, r1
 8017850:	601a      	str	r2, [r3, #0]
 8017852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017856:	697b      	ldr	r3, [r7, #20]
 8017858:	f383 8810 	msr	PRIMASK, r3
}
 801785c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801785e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017860:	2200      	movs	r2, #0
 8017862:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017868:	2b01      	cmp	r3, #1
 801786a:	d109      	bne.n	8017880 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 801786c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801786e:	22ac      	movs	r2, #172	@ 0xac
 8017870:	589b      	ldr	r3, [r3, r2]
 8017872:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017874:	2158      	movs	r1, #88	@ 0x58
 8017876:	5a51      	ldrh	r1, [r2, r1]
 8017878:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801787a:	0010      	movs	r0, r2
 801787c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801787e:	e005      	b.n	801788c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8017880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017882:	2294      	movs	r2, #148	@ 0x94
 8017884:	589b      	ldr	r3, [r3, r2]
 8017886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8017888:	0010      	movs	r0, r2
 801788a:	4798      	blx	r3
}
 801788c:	46c0      	nop			@ (mov r8, r8)
 801788e:	46bd      	mov	sp, r7
 8017890:	b014      	add	sp, #80	@ 0x50
 8017892:	bd80      	pop	{r7, pc}
 8017894:	fffffeff 	.word	0xfffffeff

08017898 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017898:	b580      	push	{r7, lr}
 801789a:	b084      	sub	sp, #16
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	2201      	movs	r2, #1
 80178aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80178b0:	2b01      	cmp	r3, #1
 80178b2:	d10b      	bne.n	80178cc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	22ac      	movs	r2, #172	@ 0xac
 80178b8:	589b      	ldr	r3, [r3, r2]
 80178ba:	68fa      	ldr	r2, [r7, #12]
 80178bc:	2158      	movs	r1, #88	@ 0x58
 80178be:	5a52      	ldrh	r2, [r2, r1]
 80178c0:	0852      	lsrs	r2, r2, #1
 80178c2:	b291      	uxth	r1, r2
 80178c4:	68fa      	ldr	r2, [r7, #12]
 80178c6:	0010      	movs	r0, r2
 80178c8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80178ca:	e005      	b.n	80178d8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	2290      	movs	r2, #144	@ 0x90
 80178d0:	589b      	ldr	r3, [r3, r2]
 80178d2:	68fa      	ldr	r2, [r7, #12]
 80178d4:	0010      	movs	r0, r2
 80178d6:	4798      	blx	r3
}
 80178d8:	46c0      	nop			@ (mov r8, r8)
 80178da:	46bd      	mov	sp, r7
 80178dc:	b004      	add	sp, #16
 80178de:	bd80      	pop	{r7, pc}

080178e0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b086      	sub	sp, #24
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80178ec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80178ee:	697b      	ldr	r3, [r7, #20]
 80178f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80178f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	2280      	movs	r2, #128	@ 0x80
 80178f8:	589b      	ldr	r3, [r3, r2]
 80178fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80178fc:	697b      	ldr	r3, [r7, #20]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	689b      	ldr	r3, [r3, #8]
 8017902:	2280      	movs	r2, #128	@ 0x80
 8017904:	4013      	ands	r3, r2
 8017906:	2b80      	cmp	r3, #128	@ 0x80
 8017908:	d10a      	bne.n	8017920 <UART_DMAError+0x40>
 801790a:	693b      	ldr	r3, [r7, #16]
 801790c:	2b21      	cmp	r3, #33	@ 0x21
 801790e:	d107      	bne.n	8017920 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8017910:	697b      	ldr	r3, [r7, #20]
 8017912:	2252      	movs	r2, #82	@ 0x52
 8017914:	2100      	movs	r1, #0
 8017916:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8017918:	697b      	ldr	r3, [r7, #20]
 801791a:	0018      	movs	r0, r3
 801791c:	f7ff fe3a 	bl	8017594 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8017920:	697b      	ldr	r3, [r7, #20]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	689b      	ldr	r3, [r3, #8]
 8017926:	2240      	movs	r2, #64	@ 0x40
 8017928:	4013      	ands	r3, r2
 801792a:	2b40      	cmp	r3, #64	@ 0x40
 801792c:	d10a      	bne.n	8017944 <UART_DMAError+0x64>
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	2b22      	cmp	r3, #34	@ 0x22
 8017932:	d107      	bne.n	8017944 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8017934:	697b      	ldr	r3, [r7, #20]
 8017936:	225a      	movs	r2, #90	@ 0x5a
 8017938:	2100      	movs	r1, #0
 801793a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801793c:	697b      	ldr	r3, [r7, #20]
 801793e:	0018      	movs	r0, r3
 8017940:	f7ff fe4c 	bl	80175dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	2284      	movs	r2, #132	@ 0x84
 8017948:	589b      	ldr	r3, [r3, r2]
 801794a:	2210      	movs	r2, #16
 801794c:	431a      	orrs	r2, r3
 801794e:	697b      	ldr	r3, [r7, #20]
 8017950:	2184      	movs	r1, #132	@ 0x84
 8017952:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017954:	697b      	ldr	r3, [r7, #20]
 8017956:	2298      	movs	r2, #152	@ 0x98
 8017958:	589b      	ldr	r3, [r3, r2]
 801795a:	697a      	ldr	r2, [r7, #20]
 801795c:	0010      	movs	r0, r2
 801795e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017960:	46c0      	nop			@ (mov r8, r8)
 8017962:	46bd      	mov	sp, r7
 8017964:	b006      	add	sp, #24
 8017966:	bd80      	pop	{r7, pc}

08017968 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b084      	sub	sp, #16
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017974:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	225a      	movs	r2, #90	@ 0x5a
 801797a:	2100      	movs	r1, #0
 801797c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	2252      	movs	r2, #82	@ 0x52
 8017982:	2100      	movs	r1, #0
 8017984:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	2298      	movs	r2, #152	@ 0x98
 801798a:	589b      	ldr	r3, [r3, r2]
 801798c:	68fa      	ldr	r2, [r7, #12]
 801798e:	0010      	movs	r0, r2
 8017990:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017992:	46c0      	nop			@ (mov r8, r8)
 8017994:	46bd      	mov	sp, r7
 8017996:	b004      	add	sp, #16
 8017998:	bd80      	pop	{r7, pc}

0801799a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801799a:	b580      	push	{r7, lr}
 801799c:	b086      	sub	sp, #24
 801799e:	af00      	add	r7, sp, #0
 80179a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80179a2:	f3ef 8310 	mrs	r3, PRIMASK
 80179a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80179a8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80179aa:	617b      	str	r3, [r7, #20]
 80179ac:	2301      	movs	r3, #1
 80179ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f383 8810 	msr	PRIMASK, r3
}
 80179b6:	46c0      	nop			@ (mov r8, r8)
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	681a      	ldr	r2, [r3, #0]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	2140      	movs	r1, #64	@ 0x40
 80179c4:	438a      	bics	r2, r1
 80179c6:	601a      	str	r2, [r3, #0]
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	f383 8810 	msr	PRIMASK, r3
}
 80179d2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2220      	movs	r2, #32
 80179d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	2200      	movs	r2, #0
 80179de:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	228c      	movs	r2, #140	@ 0x8c
 80179e4:	589b      	ldr	r3, [r3, r2]
 80179e6:	687a      	ldr	r2, [r7, #4]
 80179e8:	0010      	movs	r0, r2
 80179ea:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80179ec:	46c0      	nop			@ (mov r8, r8)
 80179ee:	46bd      	mov	sp, r7
 80179f0:	b006      	add	sp, #24
 80179f2:	bd80      	pop	{r7, pc}

080179f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b094      	sub	sp, #80	@ 0x50
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80179fc:	204e      	movs	r0, #78	@ 0x4e
 80179fe:	183b      	adds	r3, r7, r0
 8017a00:	687a      	ldr	r2, [r7, #4]
 8017a02:	215c      	movs	r1, #92	@ 0x5c
 8017a04:	5a52      	ldrh	r2, [r2, r1]
 8017a06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	2280      	movs	r2, #128	@ 0x80
 8017a0c:	589b      	ldr	r3, [r3, r2]
 8017a0e:	2b22      	cmp	r3, #34	@ 0x22
 8017a10:	d000      	beq.n	8017a14 <UART_RxISR_8BIT+0x20>
 8017a12:	e0c2      	b.n	8017b9a <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017a1a:	214c      	movs	r1, #76	@ 0x4c
 8017a1c:	187b      	adds	r3, r7, r1
 8017a1e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017a20:	187b      	adds	r3, r7, r1
 8017a22:	881b      	ldrh	r3, [r3, #0]
 8017a24:	b2da      	uxtb	r2, r3
 8017a26:	183b      	adds	r3, r7, r0
 8017a28:	881b      	ldrh	r3, [r3, #0]
 8017a2a:	b2d9      	uxtb	r1, r3
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017a30:	400a      	ands	r2, r1
 8017a32:	b2d2      	uxtb	r2, r2
 8017a34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017a3a:	1c5a      	adds	r2, r3, #1
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	225a      	movs	r2, #90	@ 0x5a
 8017a44:	5a9b      	ldrh	r3, [r3, r2]
 8017a46:	b29b      	uxth	r3, r3
 8017a48:	3b01      	subs	r3, #1
 8017a4a:	b299      	uxth	r1, r3
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	225a      	movs	r2, #90	@ 0x5a
 8017a50:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	225a      	movs	r2, #90	@ 0x5a
 8017a56:	5a9b      	ldrh	r3, [r3, r2]
 8017a58:	b29b      	uxth	r3, r3
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d000      	beq.n	8017a60 <UART_RxISR_8BIT+0x6c>
 8017a5e:	e0a4      	b.n	8017baa <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a60:	f3ef 8310 	mrs	r3, PRIMASK
 8017a64:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017a68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a70:	f383 8810 	msr	PRIMASK, r3
}
 8017a74:	46c0      	nop			@ (mov r8, r8)
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	681a      	ldr	r2, [r3, #0]
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	681b      	ldr	r3, [r3, #0]
 8017a80:	494c      	ldr	r1, [pc, #304]	@ (8017bb4 <UART_RxISR_8BIT+0x1c0>)
 8017a82:	400a      	ands	r2, r1
 8017a84:	601a      	str	r2, [r3, #0]
 8017a86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017a8c:	f383 8810 	msr	PRIMASK, r3
}
 8017a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017a92:	f3ef 8310 	mrs	r3, PRIMASK
 8017a96:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8017a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8017a9c:	2301      	movs	r3, #1
 8017a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017aa2:	f383 8810 	msr	PRIMASK, r3
}
 8017aa6:	46c0      	nop			@ (mov r8, r8)
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	689a      	ldr	r2, [r3, #8]
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	2101      	movs	r1, #1
 8017ab4:	438a      	bics	r2, r1
 8017ab6:	609a      	str	r2, [r3, #8]
 8017ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017abe:	f383 8810 	msr	PRIMASK, r3
}
 8017ac2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	2280      	movs	r2, #128	@ 0x80
 8017ac8:	2120      	movs	r1, #32
 8017aca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	2200      	movs	r2, #0
 8017ad0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	681b      	ldr	r3, [r3, #0]
 8017adc:	4a36      	ldr	r2, [pc, #216]	@ (8017bb8 <UART_RxISR_8BIT+0x1c4>)
 8017ade:	4293      	cmp	r3, r2
 8017ae0:	d01f      	beq.n	8017b22 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	685a      	ldr	r2, [r3, #4]
 8017ae8:	2380      	movs	r3, #128	@ 0x80
 8017aea:	041b      	lsls	r3, r3, #16
 8017aec:	4013      	ands	r3, r2
 8017aee:	d018      	beq.n	8017b22 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017af0:	f3ef 8310 	mrs	r3, PRIMASK
 8017af4:	61bb      	str	r3, [r7, #24]
  return(result);
 8017af6:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017af8:	643b      	str	r3, [r7, #64]	@ 0x40
 8017afa:	2301      	movs	r3, #1
 8017afc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017afe:	69fb      	ldr	r3, [r7, #28]
 8017b00:	f383 8810 	msr	PRIMASK, r3
}
 8017b04:	46c0      	nop			@ (mov r8, r8)
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	492a      	ldr	r1, [pc, #168]	@ (8017bbc <UART_RxISR_8BIT+0x1c8>)
 8017b12:	400a      	ands	r2, r1
 8017b14:	601a      	str	r2, [r3, #0]
 8017b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017b18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b1a:	6a3b      	ldr	r3, [r7, #32]
 8017b1c:	f383 8810 	msr	PRIMASK, r3
}
 8017b20:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017b26:	2b01      	cmp	r3, #1
 8017b28:	d130      	bne.n	8017b8c <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	2200      	movs	r2, #0
 8017b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017b30:	f3ef 8310 	mrs	r3, PRIMASK
 8017b34:	60fb      	str	r3, [r7, #12]
  return(result);
 8017b36:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017b3a:	2301      	movs	r3, #1
 8017b3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	f383 8810 	msr	PRIMASK, r3
}
 8017b44:	46c0      	nop			@ (mov r8, r8)
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	681a      	ldr	r2, [r3, #0]
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2110      	movs	r1, #16
 8017b52:	438a      	bics	r2, r1
 8017b54:	601a      	str	r2, [r3, #0]
 8017b56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017b58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b5a:	697b      	ldr	r3, [r7, #20]
 8017b5c:	f383 8810 	msr	PRIMASK, r3
}
 8017b60:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	69db      	ldr	r3, [r3, #28]
 8017b68:	2210      	movs	r2, #16
 8017b6a:	4013      	ands	r3, r2
 8017b6c:	2b10      	cmp	r3, #16
 8017b6e:	d103      	bne.n	8017b78 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	681b      	ldr	r3, [r3, #0]
 8017b74:	2210      	movs	r2, #16
 8017b76:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	22ac      	movs	r2, #172	@ 0xac
 8017b7c:	589b      	ldr	r3, [r3, r2]
 8017b7e:	687a      	ldr	r2, [r7, #4]
 8017b80:	2158      	movs	r1, #88	@ 0x58
 8017b82:	5a51      	ldrh	r1, [r2, r1]
 8017b84:	687a      	ldr	r2, [r7, #4]
 8017b86:	0010      	movs	r0, r2
 8017b88:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017b8a:	e00e      	b.n	8017baa <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	2294      	movs	r2, #148	@ 0x94
 8017b90:	589b      	ldr	r3, [r3, r2]
 8017b92:	687a      	ldr	r2, [r7, #4]
 8017b94:	0010      	movs	r0, r2
 8017b96:	4798      	blx	r3
}
 8017b98:	e007      	b.n	8017baa <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	681b      	ldr	r3, [r3, #0]
 8017b9e:	699a      	ldr	r2, [r3, #24]
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2108      	movs	r1, #8
 8017ba6:	430a      	orrs	r2, r1
 8017ba8:	619a      	str	r2, [r3, #24]
}
 8017baa:	46c0      	nop			@ (mov r8, r8)
 8017bac:	46bd      	mov	sp, r7
 8017bae:	b014      	add	sp, #80	@ 0x50
 8017bb0:	bd80      	pop	{r7, pc}
 8017bb2:	46c0      	nop			@ (mov r8, r8)
 8017bb4:	fffffedf 	.word	0xfffffedf
 8017bb8:	40004800 	.word	0x40004800
 8017bbc:	fbffffff 	.word	0xfbffffff

08017bc0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017bc0:	b580      	push	{r7, lr}
 8017bc2:	b094      	sub	sp, #80	@ 0x50
 8017bc4:	af00      	add	r7, sp, #0
 8017bc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017bc8:	204e      	movs	r0, #78	@ 0x4e
 8017bca:	183b      	adds	r3, r7, r0
 8017bcc:	687a      	ldr	r2, [r7, #4]
 8017bce:	215c      	movs	r1, #92	@ 0x5c
 8017bd0:	5a52      	ldrh	r2, [r2, r1]
 8017bd2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2280      	movs	r2, #128	@ 0x80
 8017bd8:	589b      	ldr	r3, [r3, r2]
 8017bda:	2b22      	cmp	r3, #34	@ 0x22
 8017bdc:	d000      	beq.n	8017be0 <UART_RxISR_16BIT+0x20>
 8017bde:	e0c2      	b.n	8017d66 <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017be6:	214c      	movs	r1, #76	@ 0x4c
 8017be8:	187b      	adds	r3, r7, r1
 8017bea:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8017bf2:	187b      	adds	r3, r7, r1
 8017bf4:	183a      	adds	r2, r7, r0
 8017bf6:	881b      	ldrh	r3, [r3, #0]
 8017bf8:	8812      	ldrh	r2, [r2, #0]
 8017bfa:	4013      	ands	r3, r2
 8017bfc:	b29a      	uxth	r2, r3
 8017bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017c00:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8017c06:	1c9a      	adds	r2, r3, #2
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	225a      	movs	r2, #90	@ 0x5a
 8017c10:	5a9b      	ldrh	r3, [r3, r2]
 8017c12:	b29b      	uxth	r3, r3
 8017c14:	3b01      	subs	r3, #1
 8017c16:	b299      	uxth	r1, r3
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	225a      	movs	r2, #90	@ 0x5a
 8017c1c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	225a      	movs	r2, #90	@ 0x5a
 8017c22:	5a9b      	ldrh	r3, [r3, r2]
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d000      	beq.n	8017c2c <UART_RxISR_16BIT+0x6c>
 8017c2a:	e0a4      	b.n	8017d76 <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8017c30:	623b      	str	r3, [r7, #32]
  return(result);
 8017c32:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8017c36:	2301      	movs	r3, #1
 8017c38:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c3c:	f383 8810 	msr	PRIMASK, r3
}
 8017c40:	46c0      	nop			@ (mov r8, r8)
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	681a      	ldr	r2, [r3, #0]
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	681b      	ldr	r3, [r3, #0]
 8017c4c:	494c      	ldr	r1, [pc, #304]	@ (8017d80 <UART_RxISR_16BIT+0x1c0>)
 8017c4e:	400a      	ands	r2, r1
 8017c50:	601a      	str	r2, [r3, #0]
 8017c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c58:	f383 8810 	msr	PRIMASK, r3
}
 8017c5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8017c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8017c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017c66:	643b      	str	r3, [r7, #64]	@ 0x40
 8017c68:	2301      	movs	r3, #1
 8017c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c6e:	f383 8810 	msr	PRIMASK, r3
}
 8017c72:	46c0      	nop			@ (mov r8, r8)
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	689a      	ldr	r2, [r3, #8]
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	2101      	movs	r1, #1
 8017c80:	438a      	bics	r2, r1
 8017c82:	609a      	str	r2, [r3, #8]
 8017c84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017c86:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c8a:	f383 8810 	msr	PRIMASK, r3
}
 8017c8e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	2280      	movs	r2, #128	@ 0x80
 8017c94:	2120      	movs	r1, #32
 8017c96:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	4a36      	ldr	r2, [pc, #216]	@ (8017d84 <UART_RxISR_16BIT+0x1c4>)
 8017caa:	4293      	cmp	r3, r2
 8017cac:	d01f      	beq.n	8017cee <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	685a      	ldr	r2, [r3, #4]
 8017cb4:	2380      	movs	r3, #128	@ 0x80
 8017cb6:	041b      	lsls	r3, r3, #16
 8017cb8:	4013      	ands	r3, r2
 8017cba:	d018      	beq.n	8017cee <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8017cc0:	617b      	str	r3, [r7, #20]
  return(result);
 8017cc2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cca:	69bb      	ldr	r3, [r7, #24]
 8017ccc:	f383 8810 	msr	PRIMASK, r3
}
 8017cd0:	46c0      	nop			@ (mov r8, r8)
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	681a      	ldr	r2, [r3, #0]
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	492a      	ldr	r1, [pc, #168]	@ (8017d88 <UART_RxISR_16BIT+0x1c8>)
 8017cde:	400a      	ands	r2, r1
 8017ce0:	601a      	str	r2, [r3, #0]
 8017ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ce4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017ce6:	69fb      	ldr	r3, [r7, #28]
 8017ce8:	f383 8810 	msr	PRIMASK, r3
}
 8017cec:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017cf2:	2b01      	cmp	r3, #1
 8017cf4:	d130      	bne.n	8017d58 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8017cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8017d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8017d02:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8017d06:	2301      	movs	r3, #1
 8017d08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d0a:	68fb      	ldr	r3, [r7, #12]
 8017d0c:	f383 8810 	msr	PRIMASK, r3
}
 8017d10:	46c0      	nop			@ (mov r8, r8)
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	681a      	ldr	r2, [r3, #0]
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2110      	movs	r1, #16
 8017d1e:	438a      	bics	r2, r1
 8017d20:	601a      	str	r2, [r3, #0]
 8017d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017d24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017d26:	693b      	ldr	r3, [r7, #16]
 8017d28:	f383 8810 	msr	PRIMASK, r3
}
 8017d2c:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	69db      	ldr	r3, [r3, #28]
 8017d34:	2210      	movs	r2, #16
 8017d36:	4013      	ands	r3, r2
 8017d38:	2b10      	cmp	r3, #16
 8017d3a:	d103      	bne.n	8017d44 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	2210      	movs	r2, #16
 8017d42:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	22ac      	movs	r2, #172	@ 0xac
 8017d48:	589b      	ldr	r3, [r3, r2]
 8017d4a:	687a      	ldr	r2, [r7, #4]
 8017d4c:	2158      	movs	r1, #88	@ 0x58
 8017d4e:	5a51      	ldrh	r1, [r2, r1]
 8017d50:	687a      	ldr	r2, [r7, #4]
 8017d52:	0010      	movs	r0, r2
 8017d54:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017d56:	e00e      	b.n	8017d76 <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	2294      	movs	r2, #148	@ 0x94
 8017d5c:	589b      	ldr	r3, [r3, r2]
 8017d5e:	687a      	ldr	r2, [r7, #4]
 8017d60:	0010      	movs	r0, r2
 8017d62:	4798      	blx	r3
}
 8017d64:	e007      	b.n	8017d76 <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	699a      	ldr	r2, [r3, #24]
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	2108      	movs	r1, #8
 8017d72:	430a      	orrs	r2, r1
 8017d74:	619a      	str	r2, [r3, #24]
}
 8017d76:	46c0      	nop			@ (mov r8, r8)
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	b014      	add	sp, #80	@ 0x50
 8017d7c:	bd80      	pop	{r7, pc}
 8017d7e:	46c0      	nop			@ (mov r8, r8)
 8017d80:	fffffedf 	.word	0xfffffedf
 8017d84:	40004800 	.word	0x40004800
 8017d88:	fbffffff 	.word	0xfbffffff

08017d8c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017d94:	46c0      	nop			@ (mov r8, r8)
 8017d96:	46bd      	mov	sp, r7
 8017d98:	b002      	add	sp, #8
 8017d9a:	bd80      	pop	{r7, pc}

08017d9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b084      	sub	sp, #16
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	2244      	movs	r2, #68	@ 0x44
 8017da8:	2100      	movs	r1, #0
 8017daa:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8017dac:	4b05      	ldr	r3, [pc, #20]	@ (8017dc4 <USB_EnableGlobalInt+0x28>)
 8017dae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	b299      	uxth	r1, r3
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2240      	movs	r2, #64	@ 0x40
 8017db8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017dba:	2300      	movs	r3, #0
}
 8017dbc:	0018      	movs	r0, r3
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	b004      	add	sp, #16
 8017dc2:	bd80      	pop	{r7, pc}
 8017dc4:	0000bf80 	.word	0x0000bf80

08017dc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b084      	sub	sp, #16
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8017dd0:	4b09      	ldr	r3, [pc, #36]	@ (8017df8 <USB_DisableGlobalInt+0x30>)
 8017dd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	2240      	movs	r2, #64	@ 0x40
 8017dd8:	5a9b      	ldrh	r3, [r3, r2]
 8017dda:	b29b      	uxth	r3, r3
 8017ddc:	68fa      	ldr	r2, [r7, #12]
 8017dde:	b292      	uxth	r2, r2
 8017de0:	43d2      	mvns	r2, r2
 8017de2:	b292      	uxth	r2, r2
 8017de4:	4013      	ands	r3, r2
 8017de6:	b299      	uxth	r1, r3
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	2240      	movs	r2, #64	@ 0x40
 8017dec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017dee:	2300      	movs	r3, #0
}
 8017df0:	0018      	movs	r0, r3
 8017df2:	46bd      	mov	sp, r7
 8017df4:	b004      	add	sp, #16
 8017df6:	bd80      	pop	{r7, pc}
 8017df8:	0000bf80 	.word	0x0000bf80

08017dfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8017dfc:	b084      	sub	sp, #16
 8017dfe:	b590      	push	{r4, r7, lr}
 8017e00:	b083      	sub	sp, #12
 8017e02:	af00      	add	r7, sp, #0
 8017e04:	6078      	str	r0, [r7, #4]
 8017e06:	2004      	movs	r0, #4
 8017e08:	2410      	movs	r4, #16
 8017e0a:	1900      	adds	r0, r0, r4
 8017e0c:	2408      	movs	r4, #8
 8017e0e:	46a4      	mov	ip, r4
 8017e10:	44bc      	add	ip, r7
 8017e12:	4460      	add	r0, ip
 8017e14:	6001      	str	r1, [r0, #0]
 8017e16:	6042      	str	r2, [r0, #4]
 8017e18:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	2240      	movs	r2, #64	@ 0x40
 8017e1e:	2101      	movs	r1, #1
 8017e20:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2240      	movs	r2, #64	@ 0x40
 8017e26:	2100      	movs	r1, #0
 8017e28:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	2244      	movs	r2, #68	@ 0x44
 8017e2e:	2100      	movs	r1, #0
 8017e30:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	2250      	movs	r2, #80	@ 0x50
 8017e36:	2100      	movs	r1, #0
 8017e38:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8017e3a:	2300      	movs	r3, #0
}
 8017e3c:	0018      	movs	r0, r3
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	b003      	add	sp, #12
 8017e42:	bc90      	pop	{r4, r7}
 8017e44:	bc08      	pop	{r3}
 8017e46:	b004      	add	sp, #16
 8017e48:	4718      	bx	r3
	...

08017e4c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	b09c      	sub	sp, #112	@ 0x70
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
 8017e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8017e56:	236f      	movs	r3, #111	@ 0x6f
 8017e58:	18fb      	adds	r3, r7, r3
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8017e5e:	687a      	ldr	r2, [r7, #4]
 8017e60:	683b      	ldr	r3, [r7, #0]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	009b      	lsls	r3, r3, #2
 8017e66:	18d3      	adds	r3, r2, r3
 8017e68:	881b      	ldrh	r3, [r3, #0]
 8017e6a:	b29a      	uxth	r2, r3
 8017e6c:	236c      	movs	r3, #108	@ 0x6c
 8017e6e:	18fb      	adds	r3, r7, r3
 8017e70:	49a3      	ldr	r1, [pc, #652]	@ (8018100 <USB_ActivateEndpoint+0x2b4>)
 8017e72:	400a      	ands	r2, r1
 8017e74:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8017e76:	683b      	ldr	r3, [r7, #0]
 8017e78:	78db      	ldrb	r3, [r3, #3]
 8017e7a:	2b03      	cmp	r3, #3
 8017e7c:	d017      	beq.n	8017eae <USB_ActivateEndpoint+0x62>
 8017e7e:	dc28      	bgt.n	8017ed2 <USB_ActivateEndpoint+0x86>
 8017e80:	2b02      	cmp	r3, #2
 8017e82:	d00e      	beq.n	8017ea2 <USB_ActivateEndpoint+0x56>
 8017e84:	dc25      	bgt.n	8017ed2 <USB_ActivateEndpoint+0x86>
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d002      	beq.n	8017e90 <USB_ActivateEndpoint+0x44>
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d018      	beq.n	8017ec0 <USB_ActivateEndpoint+0x74>
 8017e8e:	e020      	b.n	8017ed2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8017e90:	226c      	movs	r2, #108	@ 0x6c
 8017e92:	18bb      	adds	r3, r7, r2
 8017e94:	18ba      	adds	r2, r7, r2
 8017e96:	8812      	ldrh	r2, [r2, #0]
 8017e98:	2180      	movs	r1, #128	@ 0x80
 8017e9a:	0089      	lsls	r1, r1, #2
 8017e9c:	430a      	orrs	r2, r1
 8017e9e:	801a      	strh	r2, [r3, #0]
      break;
 8017ea0:	e01c      	b.n	8017edc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8017ea2:	226c      	movs	r2, #108	@ 0x6c
 8017ea4:	18bb      	adds	r3, r7, r2
 8017ea6:	18ba      	adds	r2, r7, r2
 8017ea8:	8812      	ldrh	r2, [r2, #0]
 8017eaa:	801a      	strh	r2, [r3, #0]
      break;
 8017eac:	e016      	b.n	8017edc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8017eae:	226c      	movs	r2, #108	@ 0x6c
 8017eb0:	18bb      	adds	r3, r7, r2
 8017eb2:	18ba      	adds	r2, r7, r2
 8017eb4:	8812      	ldrh	r2, [r2, #0]
 8017eb6:	21c0      	movs	r1, #192	@ 0xc0
 8017eb8:	00c9      	lsls	r1, r1, #3
 8017eba:	430a      	orrs	r2, r1
 8017ebc:	801a      	strh	r2, [r3, #0]
      break;
 8017ebe:	e00d      	b.n	8017edc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8017ec0:	226c      	movs	r2, #108	@ 0x6c
 8017ec2:	18bb      	adds	r3, r7, r2
 8017ec4:	18ba      	adds	r2, r7, r2
 8017ec6:	8812      	ldrh	r2, [r2, #0]
 8017ec8:	2180      	movs	r1, #128	@ 0x80
 8017eca:	00c9      	lsls	r1, r1, #3
 8017ecc:	430a      	orrs	r2, r1
 8017ece:	801a      	strh	r2, [r3, #0]
      break;
 8017ed0:	e004      	b.n	8017edc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8017ed2:	236f      	movs	r3, #111	@ 0x6f
 8017ed4:	18fb      	adds	r3, r7, r3
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	701a      	strb	r2, [r3, #0]
      break;
 8017eda:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8017edc:	687a      	ldr	r2, [r7, #4]
 8017ede:	683b      	ldr	r3, [r7, #0]
 8017ee0:	781b      	ldrb	r3, [r3, #0]
 8017ee2:	009b      	lsls	r3, r3, #2
 8017ee4:	18d3      	adds	r3, r2, r3
 8017ee6:	226c      	movs	r2, #108	@ 0x6c
 8017ee8:	18ba      	adds	r2, r7, r2
 8017eea:	8812      	ldrh	r2, [r2, #0]
 8017eec:	4985      	ldr	r1, [pc, #532]	@ (8018104 <USB_ActivateEndpoint+0x2b8>)
 8017eee:	430a      	orrs	r2, r1
 8017ef0:	b292      	uxth	r2, r2
 8017ef2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8017ef4:	687a      	ldr	r2, [r7, #4]
 8017ef6:	683b      	ldr	r3, [r7, #0]
 8017ef8:	781b      	ldrb	r3, [r3, #0]
 8017efa:	009b      	lsls	r3, r3, #2
 8017efc:	18d3      	adds	r3, r2, r3
 8017efe:	881b      	ldrh	r3, [r3, #0]
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	b21b      	sxth	r3, r3
 8017f04:	4a80      	ldr	r2, [pc, #512]	@ (8018108 <USB_ActivateEndpoint+0x2bc>)
 8017f06:	4013      	ands	r3, r2
 8017f08:	b21a      	sxth	r2, r3
 8017f0a:	683b      	ldr	r3, [r7, #0]
 8017f0c:	781b      	ldrb	r3, [r3, #0]
 8017f0e:	b21b      	sxth	r3, r3
 8017f10:	4313      	orrs	r3, r2
 8017f12:	b21a      	sxth	r2, r3
 8017f14:	2166      	movs	r1, #102	@ 0x66
 8017f16:	187b      	adds	r3, r7, r1
 8017f18:	801a      	strh	r2, [r3, #0]
 8017f1a:	687a      	ldr	r2, [r7, #4]
 8017f1c:	683b      	ldr	r3, [r7, #0]
 8017f1e:	781b      	ldrb	r3, [r3, #0]
 8017f20:	009b      	lsls	r3, r3, #2
 8017f22:	18d3      	adds	r3, r2, r3
 8017f24:	187a      	adds	r2, r7, r1
 8017f26:	8812      	ldrh	r2, [r2, #0]
 8017f28:	4976      	ldr	r1, [pc, #472]	@ (8018104 <USB_ActivateEndpoint+0x2b8>)
 8017f2a:	430a      	orrs	r2, r1
 8017f2c:	b292      	uxth	r2, r2
 8017f2e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	7b1b      	ldrb	r3, [r3, #12]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d000      	beq.n	8017f3a <USB_ActivateEndpoint+0xee>
 8017f38:	e178      	b.n	801822c <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8017f3a:	683b      	ldr	r3, [r7, #0]
 8017f3c:	785b      	ldrb	r3, [r3, #1]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d100      	bne.n	8017f44 <USB_ActivateEndpoint+0xf8>
 8017f42:	e07a      	b.n	801803a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	61bb      	str	r3, [r7, #24]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	2250      	movs	r2, #80	@ 0x50
 8017f4c:	5a9b      	ldrh	r3, [r3, r2]
 8017f4e:	b29b      	uxth	r3, r3
 8017f50:	001a      	movs	r2, r3
 8017f52:	69bb      	ldr	r3, [r7, #24]
 8017f54:	189b      	adds	r3, r3, r2
 8017f56:	61bb      	str	r3, [r7, #24]
 8017f58:	683b      	ldr	r3, [r7, #0]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	00da      	lsls	r2, r3, #3
 8017f5e:	69bb      	ldr	r3, [r7, #24]
 8017f60:	18d3      	adds	r3, r2, r3
 8017f62:	2280      	movs	r2, #128	@ 0x80
 8017f64:	00d2      	lsls	r2, r2, #3
 8017f66:	4694      	mov	ip, r2
 8017f68:	4463      	add	r3, ip
 8017f6a:	617b      	str	r3, [r7, #20]
 8017f6c:	683b      	ldr	r3, [r7, #0]
 8017f6e:	88db      	ldrh	r3, [r3, #6]
 8017f70:	085b      	lsrs	r3, r3, #1
 8017f72:	b29b      	uxth	r3, r3
 8017f74:	18db      	adds	r3, r3, r3
 8017f76:	b29a      	uxth	r2, r3
 8017f78:	697b      	ldr	r3, [r7, #20]
 8017f7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017f7c:	687a      	ldr	r2, [r7, #4]
 8017f7e:	683b      	ldr	r3, [r7, #0]
 8017f80:	781b      	ldrb	r3, [r3, #0]
 8017f82:	009b      	lsls	r3, r3, #2
 8017f84:	18d2      	adds	r2, r2, r3
 8017f86:	2112      	movs	r1, #18
 8017f88:	187b      	adds	r3, r7, r1
 8017f8a:	8812      	ldrh	r2, [r2, #0]
 8017f8c:	801a      	strh	r2, [r3, #0]
 8017f8e:	187b      	adds	r3, r7, r1
 8017f90:	881b      	ldrh	r3, [r3, #0]
 8017f92:	2240      	movs	r2, #64	@ 0x40
 8017f94:	4013      	ands	r3, r2
 8017f96:	d016      	beq.n	8017fc6 <USB_ActivateEndpoint+0x17a>
 8017f98:	687a      	ldr	r2, [r7, #4]
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	781b      	ldrb	r3, [r3, #0]
 8017f9e:	009b      	lsls	r3, r3, #2
 8017fa0:	18d3      	adds	r3, r2, r3
 8017fa2:	881b      	ldrh	r3, [r3, #0]
 8017fa4:	b29a      	uxth	r2, r3
 8017fa6:	2010      	movs	r0, #16
 8017fa8:	183b      	adds	r3, r7, r0
 8017faa:	4957      	ldr	r1, [pc, #348]	@ (8018108 <USB_ActivateEndpoint+0x2bc>)
 8017fac:	400a      	ands	r2, r1
 8017fae:	801a      	strh	r2, [r3, #0]
 8017fb0:	687a      	ldr	r2, [r7, #4]
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	009b      	lsls	r3, r3, #2
 8017fb8:	18d3      	adds	r3, r2, r3
 8017fba:	183a      	adds	r2, r7, r0
 8017fbc:	8812      	ldrh	r2, [r2, #0]
 8017fbe:	4953      	ldr	r1, [pc, #332]	@ (801810c <USB_ActivateEndpoint+0x2c0>)
 8017fc0:	430a      	orrs	r2, r1
 8017fc2:	b292      	uxth	r2, r2
 8017fc4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8017fc6:	683b      	ldr	r3, [r7, #0]
 8017fc8:	78db      	ldrb	r3, [r3, #3]
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d01d      	beq.n	801800a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8017fce:	687a      	ldr	r2, [r7, #4]
 8017fd0:	683b      	ldr	r3, [r7, #0]
 8017fd2:	781b      	ldrb	r3, [r3, #0]
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	18d3      	adds	r3, r2, r3
 8017fd8:	881b      	ldrh	r3, [r3, #0]
 8017fda:	b29a      	uxth	r2, r3
 8017fdc:	200c      	movs	r0, #12
 8017fde:	183b      	adds	r3, r7, r0
 8017fe0:	494b      	ldr	r1, [pc, #300]	@ (8018110 <USB_ActivateEndpoint+0x2c4>)
 8017fe2:	400a      	ands	r2, r1
 8017fe4:	801a      	strh	r2, [r3, #0]
 8017fe6:	183b      	adds	r3, r7, r0
 8017fe8:	183a      	adds	r2, r7, r0
 8017fea:	8812      	ldrh	r2, [r2, #0]
 8017fec:	2120      	movs	r1, #32
 8017fee:	404a      	eors	r2, r1
 8017ff0:	801a      	strh	r2, [r3, #0]
 8017ff2:	687a      	ldr	r2, [r7, #4]
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	781b      	ldrb	r3, [r3, #0]
 8017ff8:	009b      	lsls	r3, r3, #2
 8017ffa:	18d3      	adds	r3, r2, r3
 8017ffc:	183a      	adds	r2, r7, r0
 8017ffe:	8812      	ldrh	r2, [r2, #0]
 8018000:	4940      	ldr	r1, [pc, #256]	@ (8018104 <USB_ActivateEndpoint+0x2b8>)
 8018002:	430a      	orrs	r2, r1
 8018004:	b292      	uxth	r2, r2
 8018006:	801a      	strh	r2, [r3, #0]
 8018008:	e2b4      	b.n	8018574 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801800a:	687a      	ldr	r2, [r7, #4]
 801800c:	683b      	ldr	r3, [r7, #0]
 801800e:	781b      	ldrb	r3, [r3, #0]
 8018010:	009b      	lsls	r3, r3, #2
 8018012:	18d3      	adds	r3, r2, r3
 8018014:	881b      	ldrh	r3, [r3, #0]
 8018016:	b29a      	uxth	r2, r3
 8018018:	200e      	movs	r0, #14
 801801a:	183b      	adds	r3, r7, r0
 801801c:	493c      	ldr	r1, [pc, #240]	@ (8018110 <USB_ActivateEndpoint+0x2c4>)
 801801e:	400a      	ands	r2, r1
 8018020:	801a      	strh	r2, [r3, #0]
 8018022:	687a      	ldr	r2, [r7, #4]
 8018024:	683b      	ldr	r3, [r7, #0]
 8018026:	781b      	ldrb	r3, [r3, #0]
 8018028:	009b      	lsls	r3, r3, #2
 801802a:	18d3      	adds	r3, r2, r3
 801802c:	183a      	adds	r2, r7, r0
 801802e:	8812      	ldrh	r2, [r2, #0]
 8018030:	4934      	ldr	r1, [pc, #208]	@ (8018104 <USB_ActivateEndpoint+0x2b8>)
 8018032:	430a      	orrs	r2, r1
 8018034:	b292      	uxth	r2, r2
 8018036:	801a      	strh	r2, [r3, #0]
 8018038:	e29c      	b.n	8018574 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	633b      	str	r3, [r7, #48]	@ 0x30
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	2250      	movs	r2, #80	@ 0x50
 8018042:	5a9b      	ldrh	r3, [r3, r2]
 8018044:	b29b      	uxth	r3, r3
 8018046:	001a      	movs	r2, r3
 8018048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801804a:	189b      	adds	r3, r3, r2
 801804c:	633b      	str	r3, [r7, #48]	@ 0x30
 801804e:	683b      	ldr	r3, [r7, #0]
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	00da      	lsls	r2, r3, #3
 8018054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018056:	18d3      	adds	r3, r2, r3
 8018058:	4a2e      	ldr	r2, [pc, #184]	@ (8018114 <USB_ActivateEndpoint+0x2c8>)
 801805a:	4694      	mov	ip, r2
 801805c:	4463      	add	r3, ip
 801805e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018060:	683b      	ldr	r3, [r7, #0]
 8018062:	88db      	ldrh	r3, [r3, #6]
 8018064:	085b      	lsrs	r3, r3, #1
 8018066:	b29b      	uxth	r3, r3
 8018068:	18db      	adds	r3, r3, r3
 801806a:	b29a      	uxth	r2, r3
 801806c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801806e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	2250      	movs	r2, #80	@ 0x50
 8018078:	5a9b      	ldrh	r3, [r3, r2]
 801807a:	b29b      	uxth	r3, r3
 801807c:	001a      	movs	r2, r3
 801807e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018080:	189b      	adds	r3, r3, r2
 8018082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018084:	683b      	ldr	r3, [r7, #0]
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	00da      	lsls	r2, r3, #3
 801808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801808c:	18d3      	adds	r3, r2, r3
 801808e:	4a22      	ldr	r2, [pc, #136]	@ (8018118 <USB_ActivateEndpoint+0x2cc>)
 8018090:	4694      	mov	ip, r2
 8018092:	4463      	add	r3, ip
 8018094:	627b      	str	r3, [r7, #36]	@ 0x24
 8018096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018098:	881b      	ldrh	r3, [r3, #0]
 801809a:	b29b      	uxth	r3, r3
 801809c:	059b      	lsls	r3, r3, #22
 801809e:	0d9b      	lsrs	r3, r3, #22
 80180a0:	b29a      	uxth	r2, r3
 80180a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180a4:	801a      	strh	r2, [r3, #0]
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	691b      	ldr	r3, [r3, #16]
 80180aa:	2b3e      	cmp	r3, #62	@ 0x3e
 80180ac:	d91a      	bls.n	80180e4 <USB_ActivateEndpoint+0x298>
 80180ae:	683b      	ldr	r3, [r7, #0]
 80180b0:	691b      	ldr	r3, [r3, #16]
 80180b2:	095b      	lsrs	r3, r3, #5
 80180b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80180b6:	683b      	ldr	r3, [r7, #0]
 80180b8:	691b      	ldr	r3, [r3, #16]
 80180ba:	221f      	movs	r2, #31
 80180bc:	4013      	ands	r3, r2
 80180be:	d102      	bne.n	80180c6 <USB_ActivateEndpoint+0x27a>
 80180c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80180c2:	3b01      	subs	r3, #1
 80180c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80180c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180c8:	881b      	ldrh	r3, [r3, #0]
 80180ca:	b29a      	uxth	r2, r3
 80180cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	029b      	lsls	r3, r3, #10
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	4313      	orrs	r3, r2
 80180d6:	b29b      	uxth	r3, r3
 80180d8:	4a10      	ldr	r2, [pc, #64]	@ (801811c <USB_ActivateEndpoint+0x2d0>)
 80180da:	4313      	orrs	r3, r2
 80180dc:	b29a      	uxth	r2, r3
 80180de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180e0:	801a      	strh	r2, [r3, #0]
 80180e2:	e034      	b.n	801814e <USB_ActivateEndpoint+0x302>
 80180e4:	683b      	ldr	r3, [r7, #0]
 80180e6:	691b      	ldr	r3, [r3, #16]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d119      	bne.n	8018120 <USB_ActivateEndpoint+0x2d4>
 80180ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180ee:	881b      	ldrh	r3, [r3, #0]
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	4a0a      	ldr	r2, [pc, #40]	@ (801811c <USB_ActivateEndpoint+0x2d0>)
 80180f4:	4313      	orrs	r3, r2
 80180f6:	b29a      	uxth	r2, r3
 80180f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80180fa:	801a      	strh	r2, [r3, #0]
 80180fc:	e027      	b.n	801814e <USB_ActivateEndpoint+0x302>
 80180fe:	46c0      	nop			@ (mov r8, r8)
 8018100:	ffff898f 	.word	0xffff898f
 8018104:	ffff8080 	.word	0xffff8080
 8018108:	ffff8f8f 	.word	0xffff8f8f
 801810c:	ffff80c0 	.word	0xffff80c0
 8018110:	ffff8fbf 	.word	0xffff8fbf
 8018114:	00000404 	.word	0x00000404
 8018118:	00000406 	.word	0x00000406
 801811c:	ffff8000 	.word	0xffff8000
 8018120:	683b      	ldr	r3, [r7, #0]
 8018122:	691b      	ldr	r3, [r3, #16]
 8018124:	085b      	lsrs	r3, r3, #1
 8018126:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018128:	683b      	ldr	r3, [r7, #0]
 801812a:	691b      	ldr	r3, [r3, #16]
 801812c:	2201      	movs	r2, #1
 801812e:	4013      	ands	r3, r2
 8018130:	d002      	beq.n	8018138 <USB_ActivateEndpoint+0x2ec>
 8018132:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018134:	3301      	adds	r3, #1
 8018136:	66bb      	str	r3, [r7, #104]	@ 0x68
 8018138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801813a:	881b      	ldrh	r3, [r3, #0]
 801813c:	b29a      	uxth	r2, r3
 801813e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8018140:	b29b      	uxth	r3, r3
 8018142:	029b      	lsls	r3, r3, #10
 8018144:	b29b      	uxth	r3, r3
 8018146:	4313      	orrs	r3, r2
 8018148:	b29a      	uxth	r2, r3
 801814a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801814c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801814e:	687a      	ldr	r2, [r7, #4]
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	781b      	ldrb	r3, [r3, #0]
 8018154:	009b      	lsls	r3, r3, #2
 8018156:	18d2      	adds	r2, r2, r3
 8018158:	2122      	movs	r1, #34	@ 0x22
 801815a:	187b      	adds	r3, r7, r1
 801815c:	8812      	ldrh	r2, [r2, #0]
 801815e:	801a      	strh	r2, [r3, #0]
 8018160:	187b      	adds	r3, r7, r1
 8018162:	881a      	ldrh	r2, [r3, #0]
 8018164:	2380      	movs	r3, #128	@ 0x80
 8018166:	01db      	lsls	r3, r3, #7
 8018168:	4013      	ands	r3, r2
 801816a:	d016      	beq.n	801819a <USB_ActivateEndpoint+0x34e>
 801816c:	687a      	ldr	r2, [r7, #4]
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	781b      	ldrb	r3, [r3, #0]
 8018172:	009b      	lsls	r3, r3, #2
 8018174:	18d3      	adds	r3, r2, r3
 8018176:	881b      	ldrh	r3, [r3, #0]
 8018178:	b29a      	uxth	r2, r3
 801817a:	2020      	movs	r0, #32
 801817c:	183b      	adds	r3, r7, r0
 801817e:	49dd      	ldr	r1, [pc, #884]	@ (80184f4 <USB_ActivateEndpoint+0x6a8>)
 8018180:	400a      	ands	r2, r1
 8018182:	801a      	strh	r2, [r3, #0]
 8018184:	687a      	ldr	r2, [r7, #4]
 8018186:	683b      	ldr	r3, [r7, #0]
 8018188:	781b      	ldrb	r3, [r3, #0]
 801818a:	009b      	lsls	r3, r3, #2
 801818c:	18d3      	adds	r3, r2, r3
 801818e:	183a      	adds	r2, r7, r0
 8018190:	8812      	ldrh	r2, [r2, #0]
 8018192:	49d9      	ldr	r1, [pc, #868]	@ (80184f8 <USB_ActivateEndpoint+0x6ac>)
 8018194:	430a      	orrs	r2, r1
 8018196:	b292      	uxth	r2, r2
 8018198:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 801819a:	683b      	ldr	r3, [r7, #0]
 801819c:	781b      	ldrb	r3, [r3, #0]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d125      	bne.n	80181ee <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	781b      	ldrb	r3, [r3, #0]
 80181a8:	009b      	lsls	r3, r3, #2
 80181aa:	18d3      	adds	r3, r2, r3
 80181ac:	881b      	ldrh	r3, [r3, #0]
 80181ae:	b29a      	uxth	r2, r3
 80181b0:	201c      	movs	r0, #28
 80181b2:	183b      	adds	r3, r7, r0
 80181b4:	49d1      	ldr	r1, [pc, #836]	@ (80184fc <USB_ActivateEndpoint+0x6b0>)
 80181b6:	400a      	ands	r2, r1
 80181b8:	801a      	strh	r2, [r3, #0]
 80181ba:	183b      	adds	r3, r7, r0
 80181bc:	183a      	adds	r2, r7, r0
 80181be:	8812      	ldrh	r2, [r2, #0]
 80181c0:	2180      	movs	r1, #128	@ 0x80
 80181c2:	0149      	lsls	r1, r1, #5
 80181c4:	404a      	eors	r2, r1
 80181c6:	801a      	strh	r2, [r3, #0]
 80181c8:	183b      	adds	r3, r7, r0
 80181ca:	183a      	adds	r2, r7, r0
 80181cc:	8812      	ldrh	r2, [r2, #0]
 80181ce:	2180      	movs	r1, #128	@ 0x80
 80181d0:	0189      	lsls	r1, r1, #6
 80181d2:	404a      	eors	r2, r1
 80181d4:	801a      	strh	r2, [r3, #0]
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	781b      	ldrb	r3, [r3, #0]
 80181dc:	009b      	lsls	r3, r3, #2
 80181de:	18d3      	adds	r3, r2, r3
 80181e0:	183a      	adds	r2, r7, r0
 80181e2:	8812      	ldrh	r2, [r2, #0]
 80181e4:	49c6      	ldr	r1, [pc, #792]	@ (8018500 <USB_ActivateEndpoint+0x6b4>)
 80181e6:	430a      	orrs	r2, r1
 80181e8:	b292      	uxth	r2, r2
 80181ea:	801a      	strh	r2, [r3, #0]
 80181ec:	e1c2      	b.n	8018574 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80181ee:	687a      	ldr	r2, [r7, #4]
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	781b      	ldrb	r3, [r3, #0]
 80181f4:	009b      	lsls	r3, r3, #2
 80181f6:	18d3      	adds	r3, r2, r3
 80181f8:	881b      	ldrh	r3, [r3, #0]
 80181fa:	b29a      	uxth	r2, r3
 80181fc:	201e      	movs	r0, #30
 80181fe:	183b      	adds	r3, r7, r0
 8018200:	49be      	ldr	r1, [pc, #760]	@ (80184fc <USB_ActivateEndpoint+0x6b0>)
 8018202:	400a      	ands	r2, r1
 8018204:	801a      	strh	r2, [r3, #0]
 8018206:	183b      	adds	r3, r7, r0
 8018208:	183a      	adds	r2, r7, r0
 801820a:	8812      	ldrh	r2, [r2, #0]
 801820c:	2180      	movs	r1, #128	@ 0x80
 801820e:	0189      	lsls	r1, r1, #6
 8018210:	404a      	eors	r2, r1
 8018212:	801a      	strh	r2, [r3, #0]
 8018214:	687a      	ldr	r2, [r7, #4]
 8018216:	683b      	ldr	r3, [r7, #0]
 8018218:	781b      	ldrb	r3, [r3, #0]
 801821a:	009b      	lsls	r3, r3, #2
 801821c:	18d3      	adds	r3, r2, r3
 801821e:	183a      	adds	r2, r7, r0
 8018220:	8812      	ldrh	r2, [r2, #0]
 8018222:	49b7      	ldr	r1, [pc, #732]	@ (8018500 <USB_ActivateEndpoint+0x6b4>)
 8018224:	430a      	orrs	r2, r1
 8018226:	b292      	uxth	r2, r2
 8018228:	801a      	strh	r2, [r3, #0]
 801822a:	e1a3      	b.n	8018574 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	78db      	ldrb	r3, [r3, #3]
 8018230:	2b02      	cmp	r3, #2
 8018232:	d117      	bne.n	8018264 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8018234:	687a      	ldr	r2, [r7, #4]
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	781b      	ldrb	r3, [r3, #0]
 801823a:	009b      	lsls	r3, r3, #2
 801823c:	18d3      	adds	r3, r2, r3
 801823e:	881b      	ldrh	r3, [r3, #0]
 8018240:	b29a      	uxth	r2, r3
 8018242:	2062      	movs	r0, #98	@ 0x62
 8018244:	183b      	adds	r3, r7, r0
 8018246:	49ab      	ldr	r1, [pc, #684]	@ (80184f4 <USB_ActivateEndpoint+0x6a8>)
 8018248:	400a      	ands	r2, r1
 801824a:	801a      	strh	r2, [r3, #0]
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	683b      	ldr	r3, [r7, #0]
 8018250:	781b      	ldrb	r3, [r3, #0]
 8018252:	009b      	lsls	r3, r3, #2
 8018254:	18d3      	adds	r3, r2, r3
 8018256:	183a      	adds	r2, r7, r0
 8018258:	8812      	ldrh	r2, [r2, #0]
 801825a:	49aa      	ldr	r1, [pc, #680]	@ (8018504 <USB_ActivateEndpoint+0x6b8>)
 801825c:	430a      	orrs	r2, r1
 801825e:	b292      	uxth	r2, r2
 8018260:	801a      	strh	r2, [r3, #0]
 8018262:	e016      	b.n	8018292 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8018264:	687a      	ldr	r2, [r7, #4]
 8018266:	683b      	ldr	r3, [r7, #0]
 8018268:	781b      	ldrb	r3, [r3, #0]
 801826a:	009b      	lsls	r3, r3, #2
 801826c:	18d3      	adds	r3, r2, r3
 801826e:	881b      	ldrh	r3, [r3, #0]
 8018270:	b29a      	uxth	r2, r3
 8018272:	2064      	movs	r0, #100	@ 0x64
 8018274:	183b      	adds	r3, r7, r0
 8018276:	49a4      	ldr	r1, [pc, #656]	@ (8018508 <USB_ActivateEndpoint+0x6bc>)
 8018278:	400a      	ands	r2, r1
 801827a:	801a      	strh	r2, [r3, #0]
 801827c:	687a      	ldr	r2, [r7, #4]
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	781b      	ldrb	r3, [r3, #0]
 8018282:	009b      	lsls	r3, r3, #2
 8018284:	18d3      	adds	r3, r2, r3
 8018286:	183a      	adds	r2, r7, r0
 8018288:	8812      	ldrh	r2, [r2, #0]
 801828a:	499d      	ldr	r1, [pc, #628]	@ (8018500 <USB_ActivateEndpoint+0x6b4>)
 801828c:	430a      	orrs	r2, r1
 801828e:	b292      	uxth	r2, r2
 8018290:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	2250      	movs	r2, #80	@ 0x50
 801829a:	5a9b      	ldrh	r3, [r3, r2]
 801829c:	b29b      	uxth	r3, r3
 801829e:	001a      	movs	r2, r3
 80182a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80182a2:	189b      	adds	r3, r3, r2
 80182a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80182a6:	683b      	ldr	r3, [r7, #0]
 80182a8:	781b      	ldrb	r3, [r3, #0]
 80182aa:	00da      	lsls	r2, r3, #3
 80182ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80182ae:	18d3      	adds	r3, r2, r3
 80182b0:	2280      	movs	r2, #128	@ 0x80
 80182b2:	00d2      	lsls	r2, r2, #3
 80182b4:	4694      	mov	ip, r2
 80182b6:	4463      	add	r3, ip
 80182b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	891b      	ldrh	r3, [r3, #8]
 80182be:	085b      	lsrs	r3, r3, #1
 80182c0:	b29b      	uxth	r3, r3
 80182c2:	18db      	adds	r3, r3, r3
 80182c4:	b29a      	uxth	r2, r3
 80182c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80182c8:	801a      	strh	r2, [r3, #0]
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	2250      	movs	r2, #80	@ 0x50
 80182d2:	5a9b      	ldrh	r3, [r3, r2]
 80182d4:	b29b      	uxth	r3, r3
 80182d6:	001a      	movs	r2, r3
 80182d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80182da:	189b      	adds	r3, r3, r2
 80182dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	781b      	ldrb	r3, [r3, #0]
 80182e2:	00da      	lsls	r2, r3, #3
 80182e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80182e6:	18d3      	adds	r3, r2, r3
 80182e8:	4a88      	ldr	r2, [pc, #544]	@ (801850c <USB_ActivateEndpoint+0x6c0>)
 80182ea:	4694      	mov	ip, r2
 80182ec:	4463      	add	r3, ip
 80182ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80182f0:	683b      	ldr	r3, [r7, #0]
 80182f2:	895b      	ldrh	r3, [r3, #10]
 80182f4:	085b      	lsrs	r3, r3, #1
 80182f6:	b29b      	uxth	r3, r3
 80182f8:	18db      	adds	r3, r3, r3
 80182fa:	b29a      	uxth	r2, r3
 80182fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80182fe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	785b      	ldrb	r3, [r3, #1]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d000      	beq.n	801830a <USB_ActivateEndpoint+0x4be>
 8018308:	e087      	b.n	801841a <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801830a:	687a      	ldr	r2, [r7, #4]
 801830c:	683b      	ldr	r3, [r7, #0]
 801830e:	781b      	ldrb	r3, [r3, #0]
 8018310:	009b      	lsls	r3, r3, #2
 8018312:	18d2      	adds	r2, r2, r3
 8018314:	2140      	movs	r1, #64	@ 0x40
 8018316:	187b      	adds	r3, r7, r1
 8018318:	8812      	ldrh	r2, [r2, #0]
 801831a:	801a      	strh	r2, [r3, #0]
 801831c:	187b      	adds	r3, r7, r1
 801831e:	881a      	ldrh	r2, [r3, #0]
 8018320:	2380      	movs	r3, #128	@ 0x80
 8018322:	01db      	lsls	r3, r3, #7
 8018324:	4013      	ands	r3, r2
 8018326:	d016      	beq.n	8018356 <USB_ActivateEndpoint+0x50a>
 8018328:	687a      	ldr	r2, [r7, #4]
 801832a:	683b      	ldr	r3, [r7, #0]
 801832c:	781b      	ldrb	r3, [r3, #0]
 801832e:	009b      	lsls	r3, r3, #2
 8018330:	18d3      	adds	r3, r2, r3
 8018332:	881b      	ldrh	r3, [r3, #0]
 8018334:	b29a      	uxth	r2, r3
 8018336:	203e      	movs	r0, #62	@ 0x3e
 8018338:	183b      	adds	r3, r7, r0
 801833a:	496e      	ldr	r1, [pc, #440]	@ (80184f4 <USB_ActivateEndpoint+0x6a8>)
 801833c:	400a      	ands	r2, r1
 801833e:	801a      	strh	r2, [r3, #0]
 8018340:	687a      	ldr	r2, [r7, #4]
 8018342:	683b      	ldr	r3, [r7, #0]
 8018344:	781b      	ldrb	r3, [r3, #0]
 8018346:	009b      	lsls	r3, r3, #2
 8018348:	18d3      	adds	r3, r2, r3
 801834a:	183a      	adds	r2, r7, r0
 801834c:	8812      	ldrh	r2, [r2, #0]
 801834e:	496a      	ldr	r1, [pc, #424]	@ (80184f8 <USB_ActivateEndpoint+0x6ac>)
 8018350:	430a      	orrs	r2, r1
 8018352:	b292      	uxth	r2, r2
 8018354:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018356:	687a      	ldr	r2, [r7, #4]
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	781b      	ldrb	r3, [r3, #0]
 801835c:	009b      	lsls	r3, r3, #2
 801835e:	18d2      	adds	r2, r2, r3
 8018360:	213c      	movs	r1, #60	@ 0x3c
 8018362:	187b      	adds	r3, r7, r1
 8018364:	8812      	ldrh	r2, [r2, #0]
 8018366:	801a      	strh	r2, [r3, #0]
 8018368:	187b      	adds	r3, r7, r1
 801836a:	881b      	ldrh	r3, [r3, #0]
 801836c:	2240      	movs	r2, #64	@ 0x40
 801836e:	4013      	ands	r3, r2
 8018370:	d016      	beq.n	80183a0 <USB_ActivateEndpoint+0x554>
 8018372:	687a      	ldr	r2, [r7, #4]
 8018374:	683b      	ldr	r3, [r7, #0]
 8018376:	781b      	ldrb	r3, [r3, #0]
 8018378:	009b      	lsls	r3, r3, #2
 801837a:	18d3      	adds	r3, r2, r3
 801837c:	881b      	ldrh	r3, [r3, #0]
 801837e:	b29a      	uxth	r2, r3
 8018380:	203a      	movs	r0, #58	@ 0x3a
 8018382:	183b      	adds	r3, r7, r0
 8018384:	495b      	ldr	r1, [pc, #364]	@ (80184f4 <USB_ActivateEndpoint+0x6a8>)
 8018386:	400a      	ands	r2, r1
 8018388:	801a      	strh	r2, [r3, #0]
 801838a:	687a      	ldr	r2, [r7, #4]
 801838c:	683b      	ldr	r3, [r7, #0]
 801838e:	781b      	ldrb	r3, [r3, #0]
 8018390:	009b      	lsls	r3, r3, #2
 8018392:	18d3      	adds	r3, r2, r3
 8018394:	183a      	adds	r2, r7, r0
 8018396:	8812      	ldrh	r2, [r2, #0]
 8018398:	495d      	ldr	r1, [pc, #372]	@ (8018510 <USB_ActivateEndpoint+0x6c4>)
 801839a:	430a      	orrs	r2, r1
 801839c:	b292      	uxth	r2, r2
 801839e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80183a0:	687a      	ldr	r2, [r7, #4]
 80183a2:	683b      	ldr	r3, [r7, #0]
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	009b      	lsls	r3, r3, #2
 80183a8:	18d3      	adds	r3, r2, r3
 80183aa:	881b      	ldrh	r3, [r3, #0]
 80183ac:	b29a      	uxth	r2, r3
 80183ae:	2038      	movs	r0, #56	@ 0x38
 80183b0:	183b      	adds	r3, r7, r0
 80183b2:	4952      	ldr	r1, [pc, #328]	@ (80184fc <USB_ActivateEndpoint+0x6b0>)
 80183b4:	400a      	ands	r2, r1
 80183b6:	801a      	strh	r2, [r3, #0]
 80183b8:	183b      	adds	r3, r7, r0
 80183ba:	183a      	adds	r2, r7, r0
 80183bc:	8812      	ldrh	r2, [r2, #0]
 80183be:	2180      	movs	r1, #128	@ 0x80
 80183c0:	0149      	lsls	r1, r1, #5
 80183c2:	404a      	eors	r2, r1
 80183c4:	801a      	strh	r2, [r3, #0]
 80183c6:	183b      	adds	r3, r7, r0
 80183c8:	183a      	adds	r2, r7, r0
 80183ca:	8812      	ldrh	r2, [r2, #0]
 80183cc:	2180      	movs	r1, #128	@ 0x80
 80183ce:	0189      	lsls	r1, r1, #6
 80183d0:	404a      	eors	r2, r1
 80183d2:	801a      	strh	r2, [r3, #0]
 80183d4:	687a      	ldr	r2, [r7, #4]
 80183d6:	683b      	ldr	r3, [r7, #0]
 80183d8:	781b      	ldrb	r3, [r3, #0]
 80183da:	009b      	lsls	r3, r3, #2
 80183dc:	18d3      	adds	r3, r2, r3
 80183de:	183a      	adds	r2, r7, r0
 80183e0:	8812      	ldrh	r2, [r2, #0]
 80183e2:	4947      	ldr	r1, [pc, #284]	@ (8018500 <USB_ActivateEndpoint+0x6b4>)
 80183e4:	430a      	orrs	r2, r1
 80183e6:	b292      	uxth	r2, r2
 80183e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80183ea:	687a      	ldr	r2, [r7, #4]
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	781b      	ldrb	r3, [r3, #0]
 80183f0:	009b      	lsls	r3, r3, #2
 80183f2:	18d3      	adds	r3, r2, r3
 80183f4:	881b      	ldrh	r3, [r3, #0]
 80183f6:	b29a      	uxth	r2, r3
 80183f8:	2036      	movs	r0, #54	@ 0x36
 80183fa:	183b      	adds	r3, r7, r0
 80183fc:	4945      	ldr	r1, [pc, #276]	@ (8018514 <USB_ActivateEndpoint+0x6c8>)
 80183fe:	400a      	ands	r2, r1
 8018400:	801a      	strh	r2, [r3, #0]
 8018402:	687a      	ldr	r2, [r7, #4]
 8018404:	683b      	ldr	r3, [r7, #0]
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	009b      	lsls	r3, r3, #2
 801840a:	18d3      	adds	r3, r2, r3
 801840c:	183a      	adds	r2, r7, r0
 801840e:	8812      	ldrh	r2, [r2, #0]
 8018410:	493b      	ldr	r1, [pc, #236]	@ (8018500 <USB_ActivateEndpoint+0x6b4>)
 8018412:	430a      	orrs	r2, r1
 8018414:	b292      	uxth	r2, r2
 8018416:	801a      	strh	r2, [r3, #0]
 8018418:	e0ac      	b.n	8018574 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801841a:	687a      	ldr	r2, [r7, #4]
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	781b      	ldrb	r3, [r3, #0]
 8018420:	009b      	lsls	r3, r3, #2
 8018422:	18d2      	adds	r2, r2, r3
 8018424:	214e      	movs	r1, #78	@ 0x4e
 8018426:	187b      	adds	r3, r7, r1
 8018428:	8812      	ldrh	r2, [r2, #0]
 801842a:	801a      	strh	r2, [r3, #0]
 801842c:	187b      	adds	r3, r7, r1
 801842e:	881a      	ldrh	r2, [r3, #0]
 8018430:	2380      	movs	r3, #128	@ 0x80
 8018432:	01db      	lsls	r3, r3, #7
 8018434:	4013      	ands	r3, r2
 8018436:	d016      	beq.n	8018466 <USB_ActivateEndpoint+0x61a>
 8018438:	687a      	ldr	r2, [r7, #4]
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	009b      	lsls	r3, r3, #2
 8018440:	18d3      	adds	r3, r2, r3
 8018442:	881b      	ldrh	r3, [r3, #0]
 8018444:	b29a      	uxth	r2, r3
 8018446:	204c      	movs	r0, #76	@ 0x4c
 8018448:	183b      	adds	r3, r7, r0
 801844a:	492a      	ldr	r1, [pc, #168]	@ (80184f4 <USB_ActivateEndpoint+0x6a8>)
 801844c:	400a      	ands	r2, r1
 801844e:	801a      	strh	r2, [r3, #0]
 8018450:	687a      	ldr	r2, [r7, #4]
 8018452:	683b      	ldr	r3, [r7, #0]
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	009b      	lsls	r3, r3, #2
 8018458:	18d3      	adds	r3, r2, r3
 801845a:	183a      	adds	r2, r7, r0
 801845c:	8812      	ldrh	r2, [r2, #0]
 801845e:	4926      	ldr	r1, [pc, #152]	@ (80184f8 <USB_ActivateEndpoint+0x6ac>)
 8018460:	430a      	orrs	r2, r1
 8018462:	b292      	uxth	r2, r2
 8018464:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8018466:	687a      	ldr	r2, [r7, #4]
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	781b      	ldrb	r3, [r3, #0]
 801846c:	009b      	lsls	r3, r3, #2
 801846e:	18d2      	adds	r2, r2, r3
 8018470:	214a      	movs	r1, #74	@ 0x4a
 8018472:	187b      	adds	r3, r7, r1
 8018474:	8812      	ldrh	r2, [r2, #0]
 8018476:	801a      	strh	r2, [r3, #0]
 8018478:	187b      	adds	r3, r7, r1
 801847a:	881b      	ldrh	r3, [r3, #0]
 801847c:	2240      	movs	r2, #64	@ 0x40
 801847e:	4013      	ands	r3, r2
 8018480:	d016      	beq.n	80184b0 <USB_ActivateEndpoint+0x664>
 8018482:	687a      	ldr	r2, [r7, #4]
 8018484:	683b      	ldr	r3, [r7, #0]
 8018486:	781b      	ldrb	r3, [r3, #0]
 8018488:	009b      	lsls	r3, r3, #2
 801848a:	18d3      	adds	r3, r2, r3
 801848c:	881b      	ldrh	r3, [r3, #0]
 801848e:	b29a      	uxth	r2, r3
 8018490:	2048      	movs	r0, #72	@ 0x48
 8018492:	183b      	adds	r3, r7, r0
 8018494:	4917      	ldr	r1, [pc, #92]	@ (80184f4 <USB_ActivateEndpoint+0x6a8>)
 8018496:	400a      	ands	r2, r1
 8018498:	801a      	strh	r2, [r3, #0]
 801849a:	687a      	ldr	r2, [r7, #4]
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	781b      	ldrb	r3, [r3, #0]
 80184a0:	009b      	lsls	r3, r3, #2
 80184a2:	18d3      	adds	r3, r2, r3
 80184a4:	183a      	adds	r2, r7, r0
 80184a6:	8812      	ldrh	r2, [r2, #0]
 80184a8:	4919      	ldr	r1, [pc, #100]	@ (8018510 <USB_ActivateEndpoint+0x6c4>)
 80184aa:	430a      	orrs	r2, r1
 80184ac:	b292      	uxth	r2, r2
 80184ae:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80184b0:	683b      	ldr	r3, [r7, #0]
 80184b2:	78db      	ldrb	r3, [r3, #3]
 80184b4:	2b01      	cmp	r3, #1
 80184b6:	d02f      	beq.n	8018518 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80184b8:	687a      	ldr	r2, [r7, #4]
 80184ba:	683b      	ldr	r3, [r7, #0]
 80184bc:	781b      	ldrb	r3, [r3, #0]
 80184be:	009b      	lsls	r3, r3, #2
 80184c0:	18d3      	adds	r3, r2, r3
 80184c2:	881b      	ldrh	r3, [r3, #0]
 80184c4:	b29a      	uxth	r2, r3
 80184c6:	2044      	movs	r0, #68	@ 0x44
 80184c8:	183b      	adds	r3, r7, r0
 80184ca:	4912      	ldr	r1, [pc, #72]	@ (8018514 <USB_ActivateEndpoint+0x6c8>)
 80184cc:	400a      	ands	r2, r1
 80184ce:	801a      	strh	r2, [r3, #0]
 80184d0:	183b      	adds	r3, r7, r0
 80184d2:	183a      	adds	r2, r7, r0
 80184d4:	8812      	ldrh	r2, [r2, #0]
 80184d6:	2120      	movs	r1, #32
 80184d8:	404a      	eors	r2, r1
 80184da:	801a      	strh	r2, [r3, #0]
 80184dc:	687a      	ldr	r2, [r7, #4]
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	009b      	lsls	r3, r3, #2
 80184e4:	18d3      	adds	r3, r2, r3
 80184e6:	183a      	adds	r2, r7, r0
 80184e8:	8812      	ldrh	r2, [r2, #0]
 80184ea:	4905      	ldr	r1, [pc, #20]	@ (8018500 <USB_ActivateEndpoint+0x6b4>)
 80184ec:	430a      	orrs	r2, r1
 80184ee:	b292      	uxth	r2, r2
 80184f0:	801a      	strh	r2, [r3, #0]
 80184f2:	e028      	b.n	8018546 <USB_ActivateEndpoint+0x6fa>
 80184f4:	ffff8f8f 	.word	0xffff8f8f
 80184f8:	ffffc080 	.word	0xffffc080
 80184fc:	ffffbf8f 	.word	0xffffbf8f
 8018500:	ffff8080 	.word	0xffff8080
 8018504:	ffff8180 	.word	0xffff8180
 8018508:	ffff8e8f 	.word	0xffff8e8f
 801850c:	00000404 	.word	0x00000404
 8018510:	ffff80c0 	.word	0xffff80c0
 8018514:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018518:	687a      	ldr	r2, [r7, #4]
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	009b      	lsls	r3, r3, #2
 8018520:	18d3      	adds	r3, r2, r3
 8018522:	881b      	ldrh	r3, [r3, #0]
 8018524:	b29a      	uxth	r2, r3
 8018526:	2046      	movs	r0, #70	@ 0x46
 8018528:	183b      	adds	r3, r7, r0
 801852a:	4916      	ldr	r1, [pc, #88]	@ (8018584 <USB_ActivateEndpoint+0x738>)
 801852c:	400a      	ands	r2, r1
 801852e:	801a      	strh	r2, [r3, #0]
 8018530:	687a      	ldr	r2, [r7, #4]
 8018532:	683b      	ldr	r3, [r7, #0]
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	009b      	lsls	r3, r3, #2
 8018538:	18d3      	adds	r3, r2, r3
 801853a:	183a      	adds	r2, r7, r0
 801853c:	8812      	ldrh	r2, [r2, #0]
 801853e:	4912      	ldr	r1, [pc, #72]	@ (8018588 <USB_ActivateEndpoint+0x73c>)
 8018540:	430a      	orrs	r2, r1
 8018542:	b292      	uxth	r2, r2
 8018544:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	683b      	ldr	r3, [r7, #0]
 801854a:	781b      	ldrb	r3, [r3, #0]
 801854c:	009b      	lsls	r3, r3, #2
 801854e:	18d3      	adds	r3, r2, r3
 8018550:	881b      	ldrh	r3, [r3, #0]
 8018552:	b29a      	uxth	r2, r3
 8018554:	2042      	movs	r0, #66	@ 0x42
 8018556:	183b      	adds	r3, r7, r0
 8018558:	490c      	ldr	r1, [pc, #48]	@ (801858c <USB_ActivateEndpoint+0x740>)
 801855a:	400a      	ands	r2, r1
 801855c:	801a      	strh	r2, [r3, #0]
 801855e:	687a      	ldr	r2, [r7, #4]
 8018560:	683b      	ldr	r3, [r7, #0]
 8018562:	781b      	ldrb	r3, [r3, #0]
 8018564:	009b      	lsls	r3, r3, #2
 8018566:	18d3      	adds	r3, r2, r3
 8018568:	183a      	adds	r2, r7, r0
 801856a:	8812      	ldrh	r2, [r2, #0]
 801856c:	4906      	ldr	r1, [pc, #24]	@ (8018588 <USB_ActivateEndpoint+0x73c>)
 801856e:	430a      	orrs	r2, r1
 8018570:	b292      	uxth	r2, r2
 8018572:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8018574:	236f      	movs	r3, #111	@ 0x6f
 8018576:	18fb      	adds	r3, r7, r3
 8018578:	781b      	ldrb	r3, [r3, #0]
}
 801857a:	0018      	movs	r0, r3
 801857c:	46bd      	mov	sp, r7
 801857e:	b01c      	add	sp, #112	@ 0x70
 8018580:	bd80      	pop	{r7, pc}
 8018582:	46c0      	nop			@ (mov r8, r8)
 8018584:	ffff8fbf 	.word	0xffff8fbf
 8018588:	ffff8080 	.word	0xffff8080
 801858c:	ffffbf8f 	.word	0xffffbf8f

08018590 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b08c      	sub	sp, #48	@ 0x30
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801859a:	683b      	ldr	r3, [r7, #0]
 801859c:	7b1b      	ldrb	r3, [r3, #12]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d000      	beq.n	80185a4 <USB_DeactivateEndpoint+0x14>
 80185a2:	e07e      	b.n	80186a2 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	785b      	ldrb	r3, [r3, #1]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d03c      	beq.n	8018626 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80185ac:	687a      	ldr	r2, [r7, #4]
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	781b      	ldrb	r3, [r3, #0]
 80185b2:	009b      	lsls	r3, r3, #2
 80185b4:	18d2      	adds	r2, r2, r3
 80185b6:	210c      	movs	r1, #12
 80185b8:	187b      	adds	r3, r7, r1
 80185ba:	8812      	ldrh	r2, [r2, #0]
 80185bc:	801a      	strh	r2, [r3, #0]
 80185be:	187b      	adds	r3, r7, r1
 80185c0:	881b      	ldrh	r3, [r3, #0]
 80185c2:	2240      	movs	r2, #64	@ 0x40
 80185c4:	4013      	ands	r3, r2
 80185c6:	d016      	beq.n	80185f6 <USB_DeactivateEndpoint+0x66>
 80185c8:	687a      	ldr	r2, [r7, #4]
 80185ca:	683b      	ldr	r3, [r7, #0]
 80185cc:	781b      	ldrb	r3, [r3, #0]
 80185ce:	009b      	lsls	r3, r3, #2
 80185d0:	18d3      	adds	r3, r2, r3
 80185d2:	881b      	ldrh	r3, [r3, #0]
 80185d4:	b29a      	uxth	r2, r3
 80185d6:	200a      	movs	r0, #10
 80185d8:	183b      	adds	r3, r7, r0
 80185da:	49c7      	ldr	r1, [pc, #796]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 80185dc:	400a      	ands	r2, r1
 80185de:	801a      	strh	r2, [r3, #0]
 80185e0:	687a      	ldr	r2, [r7, #4]
 80185e2:	683b      	ldr	r3, [r7, #0]
 80185e4:	781b      	ldrb	r3, [r3, #0]
 80185e6:	009b      	lsls	r3, r3, #2
 80185e8:	18d3      	adds	r3, r2, r3
 80185ea:	183a      	adds	r2, r7, r0
 80185ec:	8812      	ldrh	r2, [r2, #0]
 80185ee:	49c3      	ldr	r1, [pc, #780]	@ (80188fc <USB_DeactivateEndpoint+0x36c>)
 80185f0:	430a      	orrs	r2, r1
 80185f2:	b292      	uxth	r2, r2
 80185f4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80185f6:	687a      	ldr	r2, [r7, #4]
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	781b      	ldrb	r3, [r3, #0]
 80185fc:	009b      	lsls	r3, r3, #2
 80185fe:	18d3      	adds	r3, r2, r3
 8018600:	881b      	ldrh	r3, [r3, #0]
 8018602:	b29a      	uxth	r2, r3
 8018604:	2008      	movs	r0, #8
 8018606:	183b      	adds	r3, r7, r0
 8018608:	49bd      	ldr	r1, [pc, #756]	@ (8018900 <USB_DeactivateEndpoint+0x370>)
 801860a:	400a      	ands	r2, r1
 801860c:	801a      	strh	r2, [r3, #0]
 801860e:	687a      	ldr	r2, [r7, #4]
 8018610:	683b      	ldr	r3, [r7, #0]
 8018612:	781b      	ldrb	r3, [r3, #0]
 8018614:	009b      	lsls	r3, r3, #2
 8018616:	18d3      	adds	r3, r2, r3
 8018618:	183a      	adds	r2, r7, r0
 801861a:	8812      	ldrh	r2, [r2, #0]
 801861c:	49b9      	ldr	r1, [pc, #740]	@ (8018904 <USB_DeactivateEndpoint+0x374>)
 801861e:	430a      	orrs	r2, r1
 8018620:	b292      	uxth	r2, r2
 8018622:	801a      	strh	r2, [r3, #0]
 8018624:	e163      	b.n	80188ee <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8018626:	687a      	ldr	r2, [r7, #4]
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	781b      	ldrb	r3, [r3, #0]
 801862c:	009b      	lsls	r3, r3, #2
 801862e:	18d2      	adds	r2, r2, r3
 8018630:	2112      	movs	r1, #18
 8018632:	187b      	adds	r3, r7, r1
 8018634:	8812      	ldrh	r2, [r2, #0]
 8018636:	801a      	strh	r2, [r3, #0]
 8018638:	187b      	adds	r3, r7, r1
 801863a:	881a      	ldrh	r2, [r3, #0]
 801863c:	2380      	movs	r3, #128	@ 0x80
 801863e:	01db      	lsls	r3, r3, #7
 8018640:	4013      	ands	r3, r2
 8018642:	d016      	beq.n	8018672 <USB_DeactivateEndpoint+0xe2>
 8018644:	687a      	ldr	r2, [r7, #4]
 8018646:	683b      	ldr	r3, [r7, #0]
 8018648:	781b      	ldrb	r3, [r3, #0]
 801864a:	009b      	lsls	r3, r3, #2
 801864c:	18d3      	adds	r3, r2, r3
 801864e:	881b      	ldrh	r3, [r3, #0]
 8018650:	b29a      	uxth	r2, r3
 8018652:	2010      	movs	r0, #16
 8018654:	183b      	adds	r3, r7, r0
 8018656:	49a8      	ldr	r1, [pc, #672]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 8018658:	400a      	ands	r2, r1
 801865a:	801a      	strh	r2, [r3, #0]
 801865c:	687a      	ldr	r2, [r7, #4]
 801865e:	683b      	ldr	r3, [r7, #0]
 8018660:	781b      	ldrb	r3, [r3, #0]
 8018662:	009b      	lsls	r3, r3, #2
 8018664:	18d3      	adds	r3, r2, r3
 8018666:	183a      	adds	r2, r7, r0
 8018668:	8812      	ldrh	r2, [r2, #0]
 801866a:	49a7      	ldr	r1, [pc, #668]	@ (8018908 <USB_DeactivateEndpoint+0x378>)
 801866c:	430a      	orrs	r2, r1
 801866e:	b292      	uxth	r2, r2
 8018670:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018672:	687a      	ldr	r2, [r7, #4]
 8018674:	683b      	ldr	r3, [r7, #0]
 8018676:	781b      	ldrb	r3, [r3, #0]
 8018678:	009b      	lsls	r3, r3, #2
 801867a:	18d3      	adds	r3, r2, r3
 801867c:	881b      	ldrh	r3, [r3, #0]
 801867e:	b29a      	uxth	r2, r3
 8018680:	200e      	movs	r0, #14
 8018682:	183b      	adds	r3, r7, r0
 8018684:	49a1      	ldr	r1, [pc, #644]	@ (801890c <USB_DeactivateEndpoint+0x37c>)
 8018686:	400a      	ands	r2, r1
 8018688:	801a      	strh	r2, [r3, #0]
 801868a:	687a      	ldr	r2, [r7, #4]
 801868c:	683b      	ldr	r3, [r7, #0]
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	009b      	lsls	r3, r3, #2
 8018692:	18d3      	adds	r3, r2, r3
 8018694:	183a      	adds	r2, r7, r0
 8018696:	8812      	ldrh	r2, [r2, #0]
 8018698:	499a      	ldr	r1, [pc, #616]	@ (8018904 <USB_DeactivateEndpoint+0x374>)
 801869a:	430a      	orrs	r2, r1
 801869c:	b292      	uxth	r2, r2
 801869e:	801a      	strh	r2, [r3, #0]
 80186a0:	e125      	b.n	80188ee <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	785b      	ldrb	r3, [r3, #1]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d000      	beq.n	80186ac <USB_DeactivateEndpoint+0x11c>
 80186aa:	e090      	b.n	80187ce <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80186ac:	687a      	ldr	r2, [r7, #4]
 80186ae:	683b      	ldr	r3, [r7, #0]
 80186b0:	781b      	ldrb	r3, [r3, #0]
 80186b2:	009b      	lsls	r3, r3, #2
 80186b4:	18d2      	adds	r2, r2, r3
 80186b6:	2120      	movs	r1, #32
 80186b8:	187b      	adds	r3, r7, r1
 80186ba:	8812      	ldrh	r2, [r2, #0]
 80186bc:	801a      	strh	r2, [r3, #0]
 80186be:	187b      	adds	r3, r7, r1
 80186c0:	881a      	ldrh	r2, [r3, #0]
 80186c2:	2380      	movs	r3, #128	@ 0x80
 80186c4:	01db      	lsls	r3, r3, #7
 80186c6:	4013      	ands	r3, r2
 80186c8:	d016      	beq.n	80186f8 <USB_DeactivateEndpoint+0x168>
 80186ca:	687a      	ldr	r2, [r7, #4]
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	781b      	ldrb	r3, [r3, #0]
 80186d0:	009b      	lsls	r3, r3, #2
 80186d2:	18d3      	adds	r3, r2, r3
 80186d4:	881b      	ldrh	r3, [r3, #0]
 80186d6:	b29a      	uxth	r2, r3
 80186d8:	201e      	movs	r0, #30
 80186da:	183b      	adds	r3, r7, r0
 80186dc:	4986      	ldr	r1, [pc, #536]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 80186de:	400a      	ands	r2, r1
 80186e0:	801a      	strh	r2, [r3, #0]
 80186e2:	687a      	ldr	r2, [r7, #4]
 80186e4:	683b      	ldr	r3, [r7, #0]
 80186e6:	781b      	ldrb	r3, [r3, #0]
 80186e8:	009b      	lsls	r3, r3, #2
 80186ea:	18d3      	adds	r3, r2, r3
 80186ec:	183a      	adds	r2, r7, r0
 80186ee:	8812      	ldrh	r2, [r2, #0]
 80186f0:	4985      	ldr	r1, [pc, #532]	@ (8018908 <USB_DeactivateEndpoint+0x378>)
 80186f2:	430a      	orrs	r2, r1
 80186f4:	b292      	uxth	r2, r2
 80186f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80186f8:	687a      	ldr	r2, [r7, #4]
 80186fa:	683b      	ldr	r3, [r7, #0]
 80186fc:	781b      	ldrb	r3, [r3, #0]
 80186fe:	009b      	lsls	r3, r3, #2
 8018700:	18d2      	adds	r2, r2, r3
 8018702:	211c      	movs	r1, #28
 8018704:	187b      	adds	r3, r7, r1
 8018706:	8812      	ldrh	r2, [r2, #0]
 8018708:	801a      	strh	r2, [r3, #0]
 801870a:	187b      	adds	r3, r7, r1
 801870c:	881b      	ldrh	r3, [r3, #0]
 801870e:	2240      	movs	r2, #64	@ 0x40
 8018710:	4013      	ands	r3, r2
 8018712:	d016      	beq.n	8018742 <USB_DeactivateEndpoint+0x1b2>
 8018714:	687a      	ldr	r2, [r7, #4]
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	009b      	lsls	r3, r3, #2
 801871c:	18d3      	adds	r3, r2, r3
 801871e:	881b      	ldrh	r3, [r3, #0]
 8018720:	b29a      	uxth	r2, r3
 8018722:	201a      	movs	r0, #26
 8018724:	183b      	adds	r3, r7, r0
 8018726:	4974      	ldr	r1, [pc, #464]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 8018728:	400a      	ands	r2, r1
 801872a:	801a      	strh	r2, [r3, #0]
 801872c:	687a      	ldr	r2, [r7, #4]
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	781b      	ldrb	r3, [r3, #0]
 8018732:	009b      	lsls	r3, r3, #2
 8018734:	18d3      	adds	r3, r2, r3
 8018736:	183a      	adds	r2, r7, r0
 8018738:	8812      	ldrh	r2, [r2, #0]
 801873a:	4970      	ldr	r1, [pc, #448]	@ (80188fc <USB_DeactivateEndpoint+0x36c>)
 801873c:	430a      	orrs	r2, r1
 801873e:	b292      	uxth	r2, r2
 8018740:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8018742:	687a      	ldr	r2, [r7, #4]
 8018744:	683b      	ldr	r3, [r7, #0]
 8018746:	781b      	ldrb	r3, [r3, #0]
 8018748:	009b      	lsls	r3, r3, #2
 801874a:	18d3      	adds	r3, r2, r3
 801874c:	881b      	ldrh	r3, [r3, #0]
 801874e:	b29a      	uxth	r2, r3
 8018750:	2018      	movs	r0, #24
 8018752:	183b      	adds	r3, r7, r0
 8018754:	4968      	ldr	r1, [pc, #416]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 8018756:	400a      	ands	r2, r1
 8018758:	801a      	strh	r2, [r3, #0]
 801875a:	687a      	ldr	r2, [r7, #4]
 801875c:	683b      	ldr	r3, [r7, #0]
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	009b      	lsls	r3, r3, #2
 8018762:	18d3      	adds	r3, r2, r3
 8018764:	183a      	adds	r2, r7, r0
 8018766:	8812      	ldrh	r2, [r2, #0]
 8018768:	4964      	ldr	r1, [pc, #400]	@ (80188fc <USB_DeactivateEndpoint+0x36c>)
 801876a:	430a      	orrs	r2, r1
 801876c:	b292      	uxth	r2, r2
 801876e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8018770:	687a      	ldr	r2, [r7, #4]
 8018772:	683b      	ldr	r3, [r7, #0]
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	009b      	lsls	r3, r3, #2
 8018778:	18d3      	adds	r3, r2, r3
 801877a:	881b      	ldrh	r3, [r3, #0]
 801877c:	b29a      	uxth	r2, r3
 801877e:	2016      	movs	r0, #22
 8018780:	183b      	adds	r3, r7, r0
 8018782:	4962      	ldr	r1, [pc, #392]	@ (801890c <USB_DeactivateEndpoint+0x37c>)
 8018784:	400a      	ands	r2, r1
 8018786:	801a      	strh	r2, [r3, #0]
 8018788:	687a      	ldr	r2, [r7, #4]
 801878a:	683b      	ldr	r3, [r7, #0]
 801878c:	781b      	ldrb	r3, [r3, #0]
 801878e:	009b      	lsls	r3, r3, #2
 8018790:	18d3      	adds	r3, r2, r3
 8018792:	183a      	adds	r2, r7, r0
 8018794:	8812      	ldrh	r2, [r2, #0]
 8018796:	495b      	ldr	r1, [pc, #364]	@ (8018904 <USB_DeactivateEndpoint+0x374>)
 8018798:	430a      	orrs	r2, r1
 801879a:	b292      	uxth	r2, r2
 801879c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	781b      	ldrb	r3, [r3, #0]
 80187a4:	009b      	lsls	r3, r3, #2
 80187a6:	18d3      	adds	r3, r2, r3
 80187a8:	881b      	ldrh	r3, [r3, #0]
 80187aa:	b29a      	uxth	r2, r3
 80187ac:	2014      	movs	r0, #20
 80187ae:	183b      	adds	r3, r7, r0
 80187b0:	4953      	ldr	r1, [pc, #332]	@ (8018900 <USB_DeactivateEndpoint+0x370>)
 80187b2:	400a      	ands	r2, r1
 80187b4:	801a      	strh	r2, [r3, #0]
 80187b6:	687a      	ldr	r2, [r7, #4]
 80187b8:	683b      	ldr	r3, [r7, #0]
 80187ba:	781b      	ldrb	r3, [r3, #0]
 80187bc:	009b      	lsls	r3, r3, #2
 80187be:	18d3      	adds	r3, r2, r3
 80187c0:	183a      	adds	r2, r7, r0
 80187c2:	8812      	ldrh	r2, [r2, #0]
 80187c4:	494f      	ldr	r1, [pc, #316]	@ (8018904 <USB_DeactivateEndpoint+0x374>)
 80187c6:	430a      	orrs	r2, r1
 80187c8:	b292      	uxth	r2, r2
 80187ca:	801a      	strh	r2, [r3, #0]
 80187cc:	e08f      	b.n	80188ee <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80187ce:	687a      	ldr	r2, [r7, #4]
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	781b      	ldrb	r3, [r3, #0]
 80187d4:	009b      	lsls	r3, r3, #2
 80187d6:	18d2      	adds	r2, r2, r3
 80187d8:	212e      	movs	r1, #46	@ 0x2e
 80187da:	187b      	adds	r3, r7, r1
 80187dc:	8812      	ldrh	r2, [r2, #0]
 80187de:	801a      	strh	r2, [r3, #0]
 80187e0:	187b      	adds	r3, r7, r1
 80187e2:	881a      	ldrh	r2, [r3, #0]
 80187e4:	2380      	movs	r3, #128	@ 0x80
 80187e6:	01db      	lsls	r3, r3, #7
 80187e8:	4013      	ands	r3, r2
 80187ea:	d016      	beq.n	801881a <USB_DeactivateEndpoint+0x28a>
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	009b      	lsls	r3, r3, #2
 80187f4:	18d3      	adds	r3, r2, r3
 80187f6:	881b      	ldrh	r3, [r3, #0]
 80187f8:	b29a      	uxth	r2, r3
 80187fa:	202c      	movs	r0, #44	@ 0x2c
 80187fc:	183b      	adds	r3, r7, r0
 80187fe:	493e      	ldr	r1, [pc, #248]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 8018800:	400a      	ands	r2, r1
 8018802:	801a      	strh	r2, [r3, #0]
 8018804:	687a      	ldr	r2, [r7, #4]
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	781b      	ldrb	r3, [r3, #0]
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	18d3      	adds	r3, r2, r3
 801880e:	183a      	adds	r2, r7, r0
 8018810:	8812      	ldrh	r2, [r2, #0]
 8018812:	493d      	ldr	r1, [pc, #244]	@ (8018908 <USB_DeactivateEndpoint+0x378>)
 8018814:	430a      	orrs	r2, r1
 8018816:	b292      	uxth	r2, r2
 8018818:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801881a:	687a      	ldr	r2, [r7, #4]
 801881c:	683b      	ldr	r3, [r7, #0]
 801881e:	781b      	ldrb	r3, [r3, #0]
 8018820:	009b      	lsls	r3, r3, #2
 8018822:	18d2      	adds	r2, r2, r3
 8018824:	212a      	movs	r1, #42	@ 0x2a
 8018826:	187b      	adds	r3, r7, r1
 8018828:	8812      	ldrh	r2, [r2, #0]
 801882a:	801a      	strh	r2, [r3, #0]
 801882c:	187b      	adds	r3, r7, r1
 801882e:	881b      	ldrh	r3, [r3, #0]
 8018830:	2240      	movs	r2, #64	@ 0x40
 8018832:	4013      	ands	r3, r2
 8018834:	d016      	beq.n	8018864 <USB_DeactivateEndpoint+0x2d4>
 8018836:	687a      	ldr	r2, [r7, #4]
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	781b      	ldrb	r3, [r3, #0]
 801883c:	009b      	lsls	r3, r3, #2
 801883e:	18d3      	adds	r3, r2, r3
 8018840:	881b      	ldrh	r3, [r3, #0]
 8018842:	b29a      	uxth	r2, r3
 8018844:	2028      	movs	r0, #40	@ 0x28
 8018846:	183b      	adds	r3, r7, r0
 8018848:	492b      	ldr	r1, [pc, #172]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 801884a:	400a      	ands	r2, r1
 801884c:	801a      	strh	r2, [r3, #0]
 801884e:	687a      	ldr	r2, [r7, #4]
 8018850:	683b      	ldr	r3, [r7, #0]
 8018852:	781b      	ldrb	r3, [r3, #0]
 8018854:	009b      	lsls	r3, r3, #2
 8018856:	18d3      	adds	r3, r2, r3
 8018858:	183a      	adds	r2, r7, r0
 801885a:	8812      	ldrh	r2, [r2, #0]
 801885c:	4927      	ldr	r1, [pc, #156]	@ (80188fc <USB_DeactivateEndpoint+0x36c>)
 801885e:	430a      	orrs	r2, r1
 8018860:	b292      	uxth	r2, r2
 8018862:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8018864:	687a      	ldr	r2, [r7, #4]
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	781b      	ldrb	r3, [r3, #0]
 801886a:	009b      	lsls	r3, r3, #2
 801886c:	18d3      	adds	r3, r2, r3
 801886e:	881b      	ldrh	r3, [r3, #0]
 8018870:	b29a      	uxth	r2, r3
 8018872:	2026      	movs	r0, #38	@ 0x26
 8018874:	183b      	adds	r3, r7, r0
 8018876:	4920      	ldr	r1, [pc, #128]	@ (80188f8 <USB_DeactivateEndpoint+0x368>)
 8018878:	400a      	ands	r2, r1
 801887a:	801a      	strh	r2, [r3, #0]
 801887c:	687a      	ldr	r2, [r7, #4]
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	781b      	ldrb	r3, [r3, #0]
 8018882:	009b      	lsls	r3, r3, #2
 8018884:	18d3      	adds	r3, r2, r3
 8018886:	183a      	adds	r2, r7, r0
 8018888:	8812      	ldrh	r2, [r2, #0]
 801888a:	491f      	ldr	r1, [pc, #124]	@ (8018908 <USB_DeactivateEndpoint+0x378>)
 801888c:	430a      	orrs	r2, r1
 801888e:	b292      	uxth	r2, r2
 8018890:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8018892:	687a      	ldr	r2, [r7, #4]
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	781b      	ldrb	r3, [r3, #0]
 8018898:	009b      	lsls	r3, r3, #2
 801889a:	18d3      	adds	r3, r2, r3
 801889c:	881b      	ldrh	r3, [r3, #0]
 801889e:	b29a      	uxth	r2, r3
 80188a0:	2024      	movs	r0, #36	@ 0x24
 80188a2:	183b      	adds	r3, r7, r0
 80188a4:	4916      	ldr	r1, [pc, #88]	@ (8018900 <USB_DeactivateEndpoint+0x370>)
 80188a6:	400a      	ands	r2, r1
 80188a8:	801a      	strh	r2, [r3, #0]
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	781b      	ldrb	r3, [r3, #0]
 80188b0:	009b      	lsls	r3, r3, #2
 80188b2:	18d3      	adds	r3, r2, r3
 80188b4:	183a      	adds	r2, r7, r0
 80188b6:	8812      	ldrh	r2, [r2, #0]
 80188b8:	4912      	ldr	r1, [pc, #72]	@ (8018904 <USB_DeactivateEndpoint+0x374>)
 80188ba:	430a      	orrs	r2, r1
 80188bc:	b292      	uxth	r2, r2
 80188be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80188c0:	687a      	ldr	r2, [r7, #4]
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	781b      	ldrb	r3, [r3, #0]
 80188c6:	009b      	lsls	r3, r3, #2
 80188c8:	18d3      	adds	r3, r2, r3
 80188ca:	881b      	ldrh	r3, [r3, #0]
 80188cc:	b29a      	uxth	r2, r3
 80188ce:	2022      	movs	r0, #34	@ 0x22
 80188d0:	183b      	adds	r3, r7, r0
 80188d2:	490e      	ldr	r1, [pc, #56]	@ (801890c <USB_DeactivateEndpoint+0x37c>)
 80188d4:	400a      	ands	r2, r1
 80188d6:	801a      	strh	r2, [r3, #0]
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	683b      	ldr	r3, [r7, #0]
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	009b      	lsls	r3, r3, #2
 80188e0:	18d3      	adds	r3, r2, r3
 80188e2:	183a      	adds	r2, r7, r0
 80188e4:	8812      	ldrh	r2, [r2, #0]
 80188e6:	4907      	ldr	r1, [pc, #28]	@ (8018904 <USB_DeactivateEndpoint+0x374>)
 80188e8:	430a      	orrs	r2, r1
 80188ea:	b292      	uxth	r2, r2
 80188ec:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80188ee:	2300      	movs	r3, #0
}
 80188f0:	0018      	movs	r0, r3
 80188f2:	46bd      	mov	sp, r7
 80188f4:	b00c      	add	sp, #48	@ 0x30
 80188f6:	bd80      	pop	{r7, pc}
 80188f8:	ffff8f8f 	.word	0xffff8f8f
 80188fc:	ffff80c0 	.word	0xffff80c0
 8018900:	ffff8fbf 	.word	0xffff8fbf
 8018904:	ffff8080 	.word	0xffff8080
 8018908:	ffffc080 	.word	0xffffc080
 801890c:	ffffbf8f 	.word	0xffffbf8f

08018910 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8018910:	b590      	push	{r4, r7, lr}
 8018912:	b0c3      	sub	sp, #268	@ 0x10c
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	785b      	ldrb	r3, [r3, #1]
 801891e:	2b01      	cmp	r3, #1
 8018920:	d001      	beq.n	8018926 <USB_EPStartXfer+0x16>
 8018922:	f000 fd2d 	bl	8019380 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	699a      	ldr	r2, [r3, #24]
 801892a:	683b      	ldr	r3, [r7, #0]
 801892c:	691b      	ldr	r3, [r3, #16]
 801892e:	429a      	cmp	r2, r3
 8018930:	d905      	bls.n	801893e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	691b      	ldr	r3, [r3, #16]
 8018936:	1d7a      	adds	r2, r7, #5
 8018938:	32ff      	adds	r2, #255	@ 0xff
 801893a:	6013      	str	r3, [r2, #0]
 801893c:	e004      	b.n	8018948 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 801893e:	683b      	ldr	r3, [r7, #0]
 8018940:	699b      	ldr	r3, [r3, #24]
 8018942:	1d7a      	adds	r2, r7, #5
 8018944:	32ff      	adds	r2, #255	@ 0xff
 8018946:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	7b1b      	ldrb	r3, [r3, #12]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d125      	bne.n	801899c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8018950:	683b      	ldr	r3, [r7, #0]
 8018952:	6959      	ldr	r1, [r3, #20]
 8018954:	683b      	ldr	r3, [r7, #0]
 8018956:	88da      	ldrh	r2, [r3, #6]
 8018958:	1d7b      	adds	r3, r7, #5
 801895a:	33ff      	adds	r3, #255	@ 0xff
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	b29b      	uxth	r3, r3
 8018960:	6878      	ldr	r0, [r7, #4]
 8018962:	f001 fa47 	bl	8019df4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	613b      	str	r3, [r7, #16]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	2250      	movs	r2, #80	@ 0x50
 801896e:	5a9b      	ldrh	r3, [r3, r2]
 8018970:	b29b      	uxth	r3, r3
 8018972:	001a      	movs	r2, r3
 8018974:	693b      	ldr	r3, [r7, #16]
 8018976:	189b      	adds	r3, r3, r2
 8018978:	613b      	str	r3, [r7, #16]
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	781b      	ldrb	r3, [r3, #0]
 801897e:	00da      	lsls	r2, r3, #3
 8018980:	693b      	ldr	r3, [r7, #16]
 8018982:	18d3      	adds	r3, r2, r3
 8018984:	4ad7      	ldr	r2, [pc, #860]	@ (8018ce4 <USB_EPStartXfer+0x3d4>)
 8018986:	4694      	mov	ip, r2
 8018988:	4463      	add	r3, ip
 801898a:	60fb      	str	r3, [r7, #12]
 801898c:	1d7b      	adds	r3, r7, #5
 801898e:	33ff      	adds	r3, #255	@ 0xff
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	b29a      	uxth	r2, r3
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	801a      	strh	r2, [r3, #0]
 8018998:	f000 fccd 	bl	8019336 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801899c:	683b      	ldr	r3, [r7, #0]
 801899e:	78db      	ldrb	r3, [r3, #3]
 80189a0:	2b02      	cmp	r3, #2
 80189a2:	d000      	beq.n	80189a6 <USB_EPStartXfer+0x96>
 80189a4:	e362      	b.n	801906c <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80189a6:	683b      	ldr	r3, [r7, #0]
 80189a8:	6a1a      	ldr	r2, [r3, #32]
 80189aa:	683b      	ldr	r3, [r7, #0]
 80189ac:	691b      	ldr	r3, [r3, #16]
 80189ae:	429a      	cmp	r2, r3
 80189b0:	d800      	bhi.n	80189b4 <USB_EPStartXfer+0xa4>
 80189b2:	e309      	b.n	8018fc8 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80189b4:	687a      	ldr	r2, [r7, #4]
 80189b6:	683b      	ldr	r3, [r7, #0]
 80189b8:	781b      	ldrb	r3, [r3, #0]
 80189ba:	009b      	lsls	r3, r3, #2
 80189bc:	18d3      	adds	r3, r2, r3
 80189be:	881b      	ldrh	r3, [r3, #0]
 80189c0:	b29a      	uxth	r2, r3
 80189c2:	2056      	movs	r0, #86	@ 0x56
 80189c4:	183b      	adds	r3, r7, r0
 80189c6:	49c8      	ldr	r1, [pc, #800]	@ (8018ce8 <USB_EPStartXfer+0x3d8>)
 80189c8:	400a      	ands	r2, r1
 80189ca:	801a      	strh	r2, [r3, #0]
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	781b      	ldrb	r3, [r3, #0]
 80189d2:	009b      	lsls	r3, r3, #2
 80189d4:	18d3      	adds	r3, r2, r3
 80189d6:	183a      	adds	r2, r7, r0
 80189d8:	8812      	ldrh	r2, [r2, #0]
 80189da:	49c4      	ldr	r1, [pc, #784]	@ (8018cec <USB_EPStartXfer+0x3dc>)
 80189dc:	430a      	orrs	r2, r1
 80189de:	b292      	uxth	r2, r2
 80189e0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80189e2:	683b      	ldr	r3, [r7, #0]
 80189e4:	6a1a      	ldr	r2, [r3, #32]
 80189e6:	1d7b      	adds	r3, r7, #5
 80189e8:	33ff      	adds	r3, #255	@ 0xff
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	1ad2      	subs	r2, r2, r3
 80189ee:	683b      	ldr	r3, [r7, #0]
 80189f0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80189f2:	687a      	ldr	r2, [r7, #4]
 80189f4:	683b      	ldr	r3, [r7, #0]
 80189f6:	781b      	ldrb	r3, [r3, #0]
 80189f8:	009b      	lsls	r3, r3, #2
 80189fa:	18d3      	adds	r3, r2, r3
 80189fc:	881b      	ldrh	r3, [r3, #0]
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	001a      	movs	r2, r3
 8018a02:	2340      	movs	r3, #64	@ 0x40
 8018a04:	4013      	ands	r3, r2
 8018a06:	d100      	bne.n	8018a0a <USB_EPStartXfer+0xfa>
 8018a08:	e176      	b.n	8018cf8 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8018a0e:	683b      	ldr	r3, [r7, #0]
 8018a10:	785b      	ldrb	r3, [r3, #1]
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d000      	beq.n	8018a18 <USB_EPStartXfer+0x108>
 8018a16:	e074      	b.n	8018b02 <USB_EPStartXfer+0x1f2>
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	2250      	movs	r2, #80	@ 0x50
 8018a20:	5a9b      	ldrh	r3, [r3, r2]
 8018a22:	b29b      	uxth	r3, r3
 8018a24:	001a      	movs	r2, r3
 8018a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a28:	189b      	adds	r3, r3, r2
 8018a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018a2c:	683b      	ldr	r3, [r7, #0]
 8018a2e:	781b      	ldrb	r3, [r3, #0]
 8018a30:	00da      	lsls	r2, r3, #3
 8018a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a34:	18d3      	adds	r3, r2, r3
 8018a36:	4aae      	ldr	r2, [pc, #696]	@ (8018cf0 <USB_EPStartXfer+0x3e0>)
 8018a38:	4694      	mov	ip, r2
 8018a3a:	4463      	add	r3, ip
 8018a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8018a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a40:	881b      	ldrh	r3, [r3, #0]
 8018a42:	b29b      	uxth	r3, r3
 8018a44:	059b      	lsls	r3, r3, #22
 8018a46:	0d9b      	lsrs	r3, r3, #22
 8018a48:	b29a      	uxth	r2, r3
 8018a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a4c:	801a      	strh	r2, [r3, #0]
 8018a4e:	1d7b      	adds	r3, r7, #5
 8018a50:	33ff      	adds	r3, #255	@ 0xff
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	2b3e      	cmp	r3, #62	@ 0x3e
 8018a56:	d924      	bls.n	8018aa2 <USB_EPStartXfer+0x192>
 8018a58:	1d7b      	adds	r3, r7, #5
 8018a5a:	33ff      	adds	r3, #255	@ 0xff
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	095b      	lsrs	r3, r3, #5
 8018a60:	1c7a      	adds	r2, r7, #1
 8018a62:	32ff      	adds	r2, #255	@ 0xff
 8018a64:	6013      	str	r3, [r2, #0]
 8018a66:	1d7b      	adds	r3, r7, #5
 8018a68:	33ff      	adds	r3, #255	@ 0xff
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	221f      	movs	r2, #31
 8018a6e:	4013      	ands	r3, r2
 8018a70:	d106      	bne.n	8018a80 <USB_EPStartXfer+0x170>
 8018a72:	1c7b      	adds	r3, r7, #1
 8018a74:	33ff      	adds	r3, #255	@ 0xff
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	3b01      	subs	r3, #1
 8018a7a:	1c7a      	adds	r2, r7, #1
 8018a7c:	32ff      	adds	r2, #255	@ 0xff
 8018a7e:	6013      	str	r3, [r2, #0]
 8018a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a82:	881b      	ldrh	r3, [r3, #0]
 8018a84:	b29a      	uxth	r2, r3
 8018a86:	1c7b      	adds	r3, r7, #1
 8018a88:	33ff      	adds	r3, #255	@ 0xff
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	029b      	lsls	r3, r3, #10
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	4313      	orrs	r3, r2
 8018a94:	b29b      	uxth	r3, r3
 8018a96:	4a97      	ldr	r2, [pc, #604]	@ (8018cf4 <USB_EPStartXfer+0x3e4>)
 8018a98:	4313      	orrs	r3, r2
 8018a9a:	b29a      	uxth	r2, r3
 8018a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a9e:	801a      	strh	r2, [r3, #0]
 8018aa0:	e04a      	b.n	8018b38 <USB_EPStartXfer+0x228>
 8018aa2:	1d7b      	adds	r3, r7, #5
 8018aa4:	33ff      	adds	r3, #255	@ 0xff
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d108      	bne.n	8018abe <USB_EPStartXfer+0x1ae>
 8018aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aae:	881b      	ldrh	r3, [r3, #0]
 8018ab0:	b29b      	uxth	r3, r3
 8018ab2:	4a90      	ldr	r2, [pc, #576]	@ (8018cf4 <USB_EPStartXfer+0x3e4>)
 8018ab4:	4313      	orrs	r3, r2
 8018ab6:	b29a      	uxth	r2, r3
 8018ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018aba:	801a      	strh	r2, [r3, #0]
 8018abc:	e03c      	b.n	8018b38 <USB_EPStartXfer+0x228>
 8018abe:	1d7b      	adds	r3, r7, #5
 8018ac0:	33ff      	adds	r3, #255	@ 0xff
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	085b      	lsrs	r3, r3, #1
 8018ac6:	1c7a      	adds	r2, r7, #1
 8018ac8:	32ff      	adds	r2, #255	@ 0xff
 8018aca:	6013      	str	r3, [r2, #0]
 8018acc:	1d7b      	adds	r3, r7, #5
 8018ace:	33ff      	adds	r3, #255	@ 0xff
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	4013      	ands	r3, r2
 8018ad6:	d006      	beq.n	8018ae6 <USB_EPStartXfer+0x1d6>
 8018ad8:	1c7b      	adds	r3, r7, #1
 8018ada:	33ff      	adds	r3, #255	@ 0xff
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	3301      	adds	r3, #1
 8018ae0:	1c7a      	adds	r2, r7, #1
 8018ae2:	32ff      	adds	r2, #255	@ 0xff
 8018ae4:	6013      	str	r3, [r2, #0]
 8018ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ae8:	881b      	ldrh	r3, [r3, #0]
 8018aea:	b29a      	uxth	r2, r3
 8018aec:	1c7b      	adds	r3, r7, #1
 8018aee:	33ff      	adds	r3, #255	@ 0xff
 8018af0:	681b      	ldr	r3, [r3, #0]
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	029b      	lsls	r3, r3, #10
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	4313      	orrs	r3, r2
 8018afa:	b29a      	uxth	r2, r3
 8018afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018afe:	801a      	strh	r2, [r3, #0]
 8018b00:	e01a      	b.n	8018b38 <USB_EPStartXfer+0x228>
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	785b      	ldrb	r3, [r3, #1]
 8018b06:	2b01      	cmp	r3, #1
 8018b08:	d116      	bne.n	8018b38 <USB_EPStartXfer+0x228>
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	2250      	movs	r2, #80	@ 0x50
 8018b0e:	5a9b      	ldrh	r3, [r3, r2]
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	001a      	movs	r2, r3
 8018b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b16:	189b      	adds	r3, r3, r2
 8018b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8018b1a:	683b      	ldr	r3, [r7, #0]
 8018b1c:	781b      	ldrb	r3, [r3, #0]
 8018b1e:	00da      	lsls	r2, r3, #3
 8018b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b22:	18d3      	adds	r3, r2, r3
 8018b24:	4a72      	ldr	r2, [pc, #456]	@ (8018cf0 <USB_EPStartXfer+0x3e0>)
 8018b26:	4694      	mov	ip, r2
 8018b28:	4463      	add	r3, ip
 8018b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018b2c:	1d7b      	adds	r3, r7, #5
 8018b2e:	33ff      	adds	r3, #255	@ 0xff
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	b29a      	uxth	r2, r3
 8018b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018b36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8018b38:	2076      	movs	r0, #118	@ 0x76
 8018b3a:	183b      	adds	r3, r7, r0
 8018b3c:	683a      	ldr	r2, [r7, #0]
 8018b3e:	8952      	ldrh	r2, [r2, #10]
 8018b40:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018b42:	683b      	ldr	r3, [r7, #0]
 8018b44:	6959      	ldr	r1, [r3, #20]
 8018b46:	1d7b      	adds	r3, r7, #5
 8018b48:	33ff      	adds	r3, #255	@ 0xff
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	b29c      	uxth	r4, r3
 8018b4e:	183b      	adds	r3, r7, r0
 8018b50:	881a      	ldrh	r2, [r3, #0]
 8018b52:	6878      	ldr	r0, [r7, #4]
 8018b54:	0023      	movs	r3, r4
 8018b56:	f001 f94d 	bl	8019df4 <USB_WritePMA>
            ep->xfer_buff += len;
 8018b5a:	683b      	ldr	r3, [r7, #0]
 8018b5c:	695a      	ldr	r2, [r3, #20]
 8018b5e:	1d7b      	adds	r3, r7, #5
 8018b60:	33ff      	adds	r3, #255	@ 0xff
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	18d2      	adds	r2, r2, r3
 8018b66:	683b      	ldr	r3, [r7, #0]
 8018b68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8018b6a:	683b      	ldr	r3, [r7, #0]
 8018b6c:	6a1a      	ldr	r2, [r3, #32]
 8018b6e:	683b      	ldr	r3, [r7, #0]
 8018b70:	691b      	ldr	r3, [r3, #16]
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d908      	bls.n	8018b88 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8018b76:	683b      	ldr	r3, [r7, #0]
 8018b78:	6a1a      	ldr	r2, [r3, #32]
 8018b7a:	1d7b      	adds	r3, r7, #5
 8018b7c:	33ff      	adds	r3, #255	@ 0xff
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	1ad2      	subs	r2, r2, r3
 8018b82:	683b      	ldr	r3, [r7, #0]
 8018b84:	621a      	str	r2, [r3, #32]
 8018b86:	e007      	b.n	8018b98 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8018b88:	683b      	ldr	r3, [r7, #0]
 8018b8a:	6a1b      	ldr	r3, [r3, #32]
 8018b8c:	1d7a      	adds	r2, r7, #5
 8018b8e:	32ff      	adds	r2, #255	@ 0xff
 8018b90:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	2200      	movs	r2, #0
 8018b96:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018b98:	683b      	ldr	r3, [r7, #0]
 8018b9a:	785b      	ldrb	r3, [r3, #1]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	d000      	beq.n	8018ba2 <USB_EPStartXfer+0x292>
 8018ba0:	e070      	b.n	8018c84 <USB_EPStartXfer+0x374>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	61bb      	str	r3, [r7, #24]
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	2250      	movs	r2, #80	@ 0x50
 8018baa:	5a9b      	ldrh	r3, [r3, r2]
 8018bac:	b29b      	uxth	r3, r3
 8018bae:	001a      	movs	r2, r3
 8018bb0:	69bb      	ldr	r3, [r7, #24]
 8018bb2:	189b      	adds	r3, r3, r2
 8018bb4:	61bb      	str	r3, [r7, #24]
 8018bb6:	683b      	ldr	r3, [r7, #0]
 8018bb8:	781b      	ldrb	r3, [r3, #0]
 8018bba:	00da      	lsls	r2, r3, #3
 8018bbc:	69bb      	ldr	r3, [r7, #24]
 8018bbe:	18d3      	adds	r3, r2, r3
 8018bc0:	4a48      	ldr	r2, [pc, #288]	@ (8018ce4 <USB_EPStartXfer+0x3d4>)
 8018bc2:	4694      	mov	ip, r2
 8018bc4:	4463      	add	r3, ip
 8018bc6:	617b      	str	r3, [r7, #20]
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	881b      	ldrh	r3, [r3, #0]
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	059b      	lsls	r3, r3, #22
 8018bd0:	0d9b      	lsrs	r3, r3, #22
 8018bd2:	b29a      	uxth	r2, r3
 8018bd4:	697b      	ldr	r3, [r7, #20]
 8018bd6:	801a      	strh	r2, [r3, #0]
 8018bd8:	1d7b      	adds	r3, r7, #5
 8018bda:	33ff      	adds	r3, #255	@ 0xff
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	2b3e      	cmp	r3, #62	@ 0x3e
 8018be0:	d922      	bls.n	8018c28 <USB_EPStartXfer+0x318>
 8018be2:	1d7b      	adds	r3, r7, #5
 8018be4:	33ff      	adds	r3, #255	@ 0xff
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	095b      	lsrs	r3, r3, #5
 8018bea:	21fc      	movs	r1, #252	@ 0xfc
 8018bec:	187a      	adds	r2, r7, r1
 8018bee:	6013      	str	r3, [r2, #0]
 8018bf0:	1d7b      	adds	r3, r7, #5
 8018bf2:	33ff      	adds	r3, #255	@ 0xff
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	221f      	movs	r2, #31
 8018bf8:	4013      	ands	r3, r2
 8018bfa:	d104      	bne.n	8018c06 <USB_EPStartXfer+0x2f6>
 8018bfc:	187b      	adds	r3, r7, r1
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	3b01      	subs	r3, #1
 8018c02:	187a      	adds	r2, r7, r1
 8018c04:	6013      	str	r3, [r2, #0]
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	881b      	ldrh	r3, [r3, #0]
 8018c0a:	b29a      	uxth	r2, r3
 8018c0c:	23fc      	movs	r3, #252	@ 0xfc
 8018c0e:	18fb      	adds	r3, r7, r3
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	029b      	lsls	r3, r3, #10
 8018c16:	b29b      	uxth	r3, r3
 8018c18:	4313      	orrs	r3, r2
 8018c1a:	b29b      	uxth	r3, r3
 8018c1c:	4a35      	ldr	r2, [pc, #212]	@ (8018cf4 <USB_EPStartXfer+0x3e4>)
 8018c1e:	4313      	orrs	r3, r2
 8018c20:	b29a      	uxth	r2, r3
 8018c22:	697b      	ldr	r3, [r7, #20]
 8018c24:	801a      	strh	r2, [r3, #0]
 8018c26:	e04a      	b.n	8018cbe <USB_EPStartXfer+0x3ae>
 8018c28:	1d7b      	adds	r3, r7, #5
 8018c2a:	33ff      	adds	r3, #255	@ 0xff
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d108      	bne.n	8018c44 <USB_EPStartXfer+0x334>
 8018c32:	697b      	ldr	r3, [r7, #20]
 8018c34:	881b      	ldrh	r3, [r3, #0]
 8018c36:	b29b      	uxth	r3, r3
 8018c38:	4a2e      	ldr	r2, [pc, #184]	@ (8018cf4 <USB_EPStartXfer+0x3e4>)
 8018c3a:	4313      	orrs	r3, r2
 8018c3c:	b29a      	uxth	r2, r3
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	801a      	strh	r2, [r3, #0]
 8018c42:	e03c      	b.n	8018cbe <USB_EPStartXfer+0x3ae>
 8018c44:	1d7b      	adds	r3, r7, #5
 8018c46:	33ff      	adds	r3, #255	@ 0xff
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	085b      	lsrs	r3, r3, #1
 8018c4c:	21fc      	movs	r1, #252	@ 0xfc
 8018c4e:	187a      	adds	r2, r7, r1
 8018c50:	6013      	str	r3, [r2, #0]
 8018c52:	1d7b      	adds	r3, r7, #5
 8018c54:	33ff      	adds	r3, #255	@ 0xff
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	2201      	movs	r2, #1
 8018c5a:	4013      	ands	r3, r2
 8018c5c:	d004      	beq.n	8018c68 <USB_EPStartXfer+0x358>
 8018c5e:	187b      	adds	r3, r7, r1
 8018c60:	681b      	ldr	r3, [r3, #0]
 8018c62:	3301      	adds	r3, #1
 8018c64:	187a      	adds	r2, r7, r1
 8018c66:	6013      	str	r3, [r2, #0]
 8018c68:	697b      	ldr	r3, [r7, #20]
 8018c6a:	881b      	ldrh	r3, [r3, #0]
 8018c6c:	b29a      	uxth	r2, r3
 8018c6e:	23fc      	movs	r3, #252	@ 0xfc
 8018c70:	18fb      	adds	r3, r7, r3
 8018c72:	681b      	ldr	r3, [r3, #0]
 8018c74:	b29b      	uxth	r3, r3
 8018c76:	029b      	lsls	r3, r3, #10
 8018c78:	b29b      	uxth	r3, r3
 8018c7a:	4313      	orrs	r3, r2
 8018c7c:	b29a      	uxth	r2, r3
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	801a      	strh	r2, [r3, #0]
 8018c82:	e01c      	b.n	8018cbe <USB_EPStartXfer+0x3ae>
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	785b      	ldrb	r3, [r3, #1]
 8018c88:	2b01      	cmp	r3, #1
 8018c8a:	d118      	bne.n	8018cbe <USB_EPStartXfer+0x3ae>
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	623b      	str	r3, [r7, #32]
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2250      	movs	r2, #80	@ 0x50
 8018c94:	5a9b      	ldrh	r3, [r3, r2]
 8018c96:	b29b      	uxth	r3, r3
 8018c98:	001a      	movs	r2, r3
 8018c9a:	6a3b      	ldr	r3, [r7, #32]
 8018c9c:	189b      	adds	r3, r3, r2
 8018c9e:	623b      	str	r3, [r7, #32]
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	781b      	ldrb	r3, [r3, #0]
 8018ca4:	00da      	lsls	r2, r3, #3
 8018ca6:	6a3b      	ldr	r3, [r7, #32]
 8018ca8:	18d3      	adds	r3, r2, r3
 8018caa:	4a0e      	ldr	r2, [pc, #56]	@ (8018ce4 <USB_EPStartXfer+0x3d4>)
 8018cac:	4694      	mov	ip, r2
 8018cae:	4463      	add	r3, ip
 8018cb0:	61fb      	str	r3, [r7, #28]
 8018cb2:	1d7b      	adds	r3, r7, #5
 8018cb4:	33ff      	adds	r3, #255	@ 0xff
 8018cb6:	681b      	ldr	r3, [r3, #0]
 8018cb8:	b29a      	uxth	r2, r3
 8018cba:	69fb      	ldr	r3, [r7, #28]
 8018cbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8018cbe:	2076      	movs	r0, #118	@ 0x76
 8018cc0:	183b      	adds	r3, r7, r0
 8018cc2:	683a      	ldr	r2, [r7, #0]
 8018cc4:	8912      	ldrh	r2, [r2, #8]
 8018cc6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	6959      	ldr	r1, [r3, #20]
 8018ccc:	1d7b      	adds	r3, r7, #5
 8018cce:	33ff      	adds	r3, #255	@ 0xff
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	b29c      	uxth	r4, r3
 8018cd4:	183b      	adds	r3, r7, r0
 8018cd6:	881a      	ldrh	r2, [r3, #0]
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	0023      	movs	r3, r4
 8018cdc:	f001 f88a 	bl	8019df4 <USB_WritePMA>
 8018ce0:	e329      	b.n	8019336 <USB_EPStartXfer+0xa26>
 8018ce2:	46c0      	nop			@ (mov r8, r8)
 8018ce4:	00000402 	.word	0x00000402
 8018ce8:	ffff8f8f 	.word	0xffff8f8f
 8018cec:	ffff8180 	.word	0xffff8180
 8018cf0:	00000406 	.word	0x00000406
 8018cf4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	785b      	ldrb	r3, [r3, #1]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d000      	beq.n	8018d02 <USB_EPStartXfer+0x3f2>
 8018d00:	e070      	b.n	8018de4 <USB_EPStartXfer+0x4d4>
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2250      	movs	r2, #80	@ 0x50
 8018d0a:	5a9b      	ldrh	r3, [r3, r2]
 8018d0c:	b29b      	uxth	r3, r3
 8018d0e:	001a      	movs	r2, r3
 8018d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d12:	189b      	adds	r3, r3, r2
 8018d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	781b      	ldrb	r3, [r3, #0]
 8018d1a:	00da      	lsls	r2, r3, #3
 8018d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018d1e:	18d3      	adds	r3, r2, r3
 8018d20:	4acd      	ldr	r2, [pc, #820]	@ (8019058 <USB_EPStartXfer+0x748>)
 8018d22:	4694      	mov	ip, r2
 8018d24:	4463      	add	r3, ip
 8018d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8018d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d2a:	881b      	ldrh	r3, [r3, #0]
 8018d2c:	b29b      	uxth	r3, r3
 8018d2e:	059b      	lsls	r3, r3, #22
 8018d30:	0d9b      	lsrs	r3, r3, #22
 8018d32:	b29a      	uxth	r2, r3
 8018d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d36:	801a      	strh	r2, [r3, #0]
 8018d38:	1d7b      	adds	r3, r7, #5
 8018d3a:	33ff      	adds	r3, #255	@ 0xff
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8018d40:	d922      	bls.n	8018d88 <USB_EPStartXfer+0x478>
 8018d42:	1d7b      	adds	r3, r7, #5
 8018d44:	33ff      	adds	r3, #255	@ 0xff
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	095b      	lsrs	r3, r3, #5
 8018d4a:	21f8      	movs	r1, #248	@ 0xf8
 8018d4c:	187a      	adds	r2, r7, r1
 8018d4e:	6013      	str	r3, [r2, #0]
 8018d50:	1d7b      	adds	r3, r7, #5
 8018d52:	33ff      	adds	r3, #255	@ 0xff
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	221f      	movs	r2, #31
 8018d58:	4013      	ands	r3, r2
 8018d5a:	d104      	bne.n	8018d66 <USB_EPStartXfer+0x456>
 8018d5c:	187b      	adds	r3, r7, r1
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	3b01      	subs	r3, #1
 8018d62:	187a      	adds	r2, r7, r1
 8018d64:	6013      	str	r3, [r2, #0]
 8018d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d68:	881b      	ldrh	r3, [r3, #0]
 8018d6a:	b29a      	uxth	r2, r3
 8018d6c:	23f8      	movs	r3, #248	@ 0xf8
 8018d6e:	18fb      	adds	r3, r7, r3
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	b29b      	uxth	r3, r3
 8018d74:	029b      	lsls	r3, r3, #10
 8018d76:	b29b      	uxth	r3, r3
 8018d78:	4313      	orrs	r3, r2
 8018d7a:	b29b      	uxth	r3, r3
 8018d7c:	4ab7      	ldr	r2, [pc, #732]	@ (801905c <USB_EPStartXfer+0x74c>)
 8018d7e:	4313      	orrs	r3, r2
 8018d80:	b29a      	uxth	r2, r3
 8018d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d84:	801a      	strh	r2, [r3, #0]
 8018d86:	e04a      	b.n	8018e1e <USB_EPStartXfer+0x50e>
 8018d88:	1d7b      	adds	r3, r7, #5
 8018d8a:	33ff      	adds	r3, #255	@ 0xff
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d108      	bne.n	8018da4 <USB_EPStartXfer+0x494>
 8018d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018d94:	881b      	ldrh	r3, [r3, #0]
 8018d96:	b29b      	uxth	r3, r3
 8018d98:	4ab0      	ldr	r2, [pc, #704]	@ (801905c <USB_EPStartXfer+0x74c>)
 8018d9a:	4313      	orrs	r3, r2
 8018d9c:	b29a      	uxth	r2, r3
 8018d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018da0:	801a      	strh	r2, [r3, #0]
 8018da2:	e03c      	b.n	8018e1e <USB_EPStartXfer+0x50e>
 8018da4:	1d7b      	adds	r3, r7, #5
 8018da6:	33ff      	adds	r3, #255	@ 0xff
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	085b      	lsrs	r3, r3, #1
 8018dac:	21f8      	movs	r1, #248	@ 0xf8
 8018dae:	187a      	adds	r2, r7, r1
 8018db0:	6013      	str	r3, [r2, #0]
 8018db2:	1d7b      	adds	r3, r7, #5
 8018db4:	33ff      	adds	r3, #255	@ 0xff
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	2201      	movs	r2, #1
 8018dba:	4013      	ands	r3, r2
 8018dbc:	d004      	beq.n	8018dc8 <USB_EPStartXfer+0x4b8>
 8018dbe:	187b      	adds	r3, r7, r1
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	3301      	adds	r3, #1
 8018dc4:	187a      	adds	r2, r7, r1
 8018dc6:	6013      	str	r3, [r2, #0]
 8018dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018dca:	881b      	ldrh	r3, [r3, #0]
 8018dcc:	b29a      	uxth	r2, r3
 8018dce:	23f8      	movs	r3, #248	@ 0xf8
 8018dd0:	18fb      	adds	r3, r7, r3
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	b29b      	uxth	r3, r3
 8018dd6:	029b      	lsls	r3, r3, #10
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	4313      	orrs	r3, r2
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018de0:	801a      	strh	r2, [r3, #0]
 8018de2:	e01c      	b.n	8018e1e <USB_EPStartXfer+0x50e>
 8018de4:	683b      	ldr	r3, [r7, #0]
 8018de6:	785b      	ldrb	r3, [r3, #1]
 8018de8:	2b01      	cmp	r3, #1
 8018dea:	d118      	bne.n	8018e1e <USB_EPStartXfer+0x50e>
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	2250      	movs	r2, #80	@ 0x50
 8018df4:	5a9b      	ldrh	r3, [r3, r2]
 8018df6:	b29b      	uxth	r3, r3
 8018df8:	001a      	movs	r2, r3
 8018dfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018dfc:	189b      	adds	r3, r3, r2
 8018dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8018e00:	683b      	ldr	r3, [r7, #0]
 8018e02:	781b      	ldrb	r3, [r3, #0]
 8018e04:	00da      	lsls	r2, r3, #3
 8018e06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018e08:	18d3      	adds	r3, r2, r3
 8018e0a:	4a93      	ldr	r2, [pc, #588]	@ (8019058 <USB_EPStartXfer+0x748>)
 8018e0c:	4694      	mov	ip, r2
 8018e0e:	4463      	add	r3, ip
 8018e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018e12:	1d7b      	adds	r3, r7, #5
 8018e14:	33ff      	adds	r3, #255	@ 0xff
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	b29a      	uxth	r2, r3
 8018e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018e1c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8018e1e:	2076      	movs	r0, #118	@ 0x76
 8018e20:	183b      	adds	r3, r7, r0
 8018e22:	683a      	ldr	r2, [r7, #0]
 8018e24:	8912      	ldrh	r2, [r2, #8]
 8018e26:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	6959      	ldr	r1, [r3, #20]
 8018e2c:	1d7b      	adds	r3, r7, #5
 8018e2e:	33ff      	adds	r3, #255	@ 0xff
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	b29c      	uxth	r4, r3
 8018e34:	183b      	adds	r3, r7, r0
 8018e36:	881a      	ldrh	r2, [r3, #0]
 8018e38:	6878      	ldr	r0, [r7, #4]
 8018e3a:	0023      	movs	r3, r4
 8018e3c:	f000 ffda 	bl	8019df4 <USB_WritePMA>
            ep->xfer_buff += len;
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	695a      	ldr	r2, [r3, #20]
 8018e44:	1d7b      	adds	r3, r7, #5
 8018e46:	33ff      	adds	r3, #255	@ 0xff
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	18d2      	adds	r2, r2, r3
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8018e50:	683b      	ldr	r3, [r7, #0]
 8018e52:	6a1a      	ldr	r2, [r3, #32]
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	691b      	ldr	r3, [r3, #16]
 8018e58:	429a      	cmp	r2, r3
 8018e5a:	d908      	bls.n	8018e6e <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	6a1a      	ldr	r2, [r3, #32]
 8018e60:	1d7b      	adds	r3, r7, #5
 8018e62:	33ff      	adds	r3, #255	@ 0xff
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	1ad2      	subs	r2, r2, r3
 8018e68:	683b      	ldr	r3, [r7, #0]
 8018e6a:	621a      	str	r2, [r3, #32]
 8018e6c:	e007      	b.n	8018e7e <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8018e6e:	683b      	ldr	r3, [r7, #0]
 8018e70:	6a1b      	ldr	r3, [r3, #32]
 8018e72:	1d7a      	adds	r2, r7, #5
 8018e74:	32ff      	adds	r2, #255	@ 0xff
 8018e76:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8018e78:	683b      	ldr	r3, [r7, #0]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8018e82:	683b      	ldr	r3, [r7, #0]
 8018e84:	785b      	ldrb	r3, [r3, #1]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d000      	beq.n	8018e8c <USB_EPStartXfer+0x57c>
 8018e8a:	e070      	b.n	8018f6e <USB_EPStartXfer+0x65e>
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	2250      	movs	r2, #80	@ 0x50
 8018e94:	5a9b      	ldrh	r3, [r3, r2]
 8018e96:	b29b      	uxth	r3, r3
 8018e98:	001a      	movs	r2, r3
 8018e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e9c:	189b      	adds	r3, r3, r2
 8018e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018ea0:	683b      	ldr	r3, [r7, #0]
 8018ea2:	781b      	ldrb	r3, [r3, #0]
 8018ea4:	00da      	lsls	r2, r3, #3
 8018ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018ea8:	18d3      	adds	r3, r2, r3
 8018eaa:	4a6d      	ldr	r2, [pc, #436]	@ (8019060 <USB_EPStartXfer+0x750>)
 8018eac:	4694      	mov	ip, r2
 8018eae:	4463      	add	r3, ip
 8018eb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8018eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018eb4:	881b      	ldrh	r3, [r3, #0]
 8018eb6:	b29b      	uxth	r3, r3
 8018eb8:	059b      	lsls	r3, r3, #22
 8018eba:	0d9b      	lsrs	r3, r3, #22
 8018ebc:	b29a      	uxth	r2, r3
 8018ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ec0:	801a      	strh	r2, [r3, #0]
 8018ec2:	1d7b      	adds	r3, r7, #5
 8018ec4:	33ff      	adds	r3, #255	@ 0xff
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	2b3e      	cmp	r3, #62	@ 0x3e
 8018eca:	d922      	bls.n	8018f12 <USB_EPStartXfer+0x602>
 8018ecc:	1d7b      	adds	r3, r7, #5
 8018ece:	33ff      	adds	r3, #255	@ 0xff
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	095b      	lsrs	r3, r3, #5
 8018ed4:	21f4      	movs	r1, #244	@ 0xf4
 8018ed6:	187a      	adds	r2, r7, r1
 8018ed8:	6013      	str	r3, [r2, #0]
 8018eda:	1d7b      	adds	r3, r7, #5
 8018edc:	33ff      	adds	r3, #255	@ 0xff
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	221f      	movs	r2, #31
 8018ee2:	4013      	ands	r3, r2
 8018ee4:	d104      	bne.n	8018ef0 <USB_EPStartXfer+0x5e0>
 8018ee6:	187b      	adds	r3, r7, r1
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	3b01      	subs	r3, #1
 8018eec:	187a      	adds	r2, r7, r1
 8018eee:	6013      	str	r3, [r2, #0]
 8018ef0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ef2:	881b      	ldrh	r3, [r3, #0]
 8018ef4:	b29a      	uxth	r2, r3
 8018ef6:	23f4      	movs	r3, #244	@ 0xf4
 8018ef8:	18fb      	adds	r3, r7, r3
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	b29b      	uxth	r3, r3
 8018efe:	029b      	lsls	r3, r3, #10
 8018f00:	b29b      	uxth	r3, r3
 8018f02:	4313      	orrs	r3, r2
 8018f04:	b29b      	uxth	r3, r3
 8018f06:	4a55      	ldr	r2, [pc, #340]	@ (801905c <USB_EPStartXfer+0x74c>)
 8018f08:	4313      	orrs	r3, r2
 8018f0a:	b29a      	uxth	r2, r3
 8018f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f0e:	801a      	strh	r2, [r3, #0]
 8018f10:	e048      	b.n	8018fa4 <USB_EPStartXfer+0x694>
 8018f12:	1d7b      	adds	r3, r7, #5
 8018f14:	33ff      	adds	r3, #255	@ 0xff
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d108      	bne.n	8018f2e <USB_EPStartXfer+0x61e>
 8018f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f1e:	881b      	ldrh	r3, [r3, #0]
 8018f20:	b29b      	uxth	r3, r3
 8018f22:	4a4e      	ldr	r2, [pc, #312]	@ (801905c <USB_EPStartXfer+0x74c>)
 8018f24:	4313      	orrs	r3, r2
 8018f26:	b29a      	uxth	r2, r3
 8018f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f2a:	801a      	strh	r2, [r3, #0]
 8018f2c:	e03a      	b.n	8018fa4 <USB_EPStartXfer+0x694>
 8018f2e:	1d7b      	adds	r3, r7, #5
 8018f30:	33ff      	adds	r3, #255	@ 0xff
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	085b      	lsrs	r3, r3, #1
 8018f36:	21f4      	movs	r1, #244	@ 0xf4
 8018f38:	187a      	adds	r2, r7, r1
 8018f3a:	6013      	str	r3, [r2, #0]
 8018f3c:	1d7b      	adds	r3, r7, #5
 8018f3e:	33ff      	adds	r3, #255	@ 0xff
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	2201      	movs	r2, #1
 8018f44:	4013      	ands	r3, r2
 8018f46:	d004      	beq.n	8018f52 <USB_EPStartXfer+0x642>
 8018f48:	187b      	adds	r3, r7, r1
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	3301      	adds	r3, #1
 8018f4e:	187a      	adds	r2, r7, r1
 8018f50:	6013      	str	r3, [r2, #0]
 8018f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f54:	881b      	ldrh	r3, [r3, #0]
 8018f56:	b29a      	uxth	r2, r3
 8018f58:	23f4      	movs	r3, #244	@ 0xf4
 8018f5a:	18fb      	adds	r3, r7, r3
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	b29b      	uxth	r3, r3
 8018f60:	029b      	lsls	r3, r3, #10
 8018f62:	b29b      	uxth	r3, r3
 8018f64:	4313      	orrs	r3, r2
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f6a:	801a      	strh	r2, [r3, #0]
 8018f6c:	e01a      	b.n	8018fa4 <USB_EPStartXfer+0x694>
 8018f6e:	683b      	ldr	r3, [r7, #0]
 8018f70:	785b      	ldrb	r3, [r3, #1]
 8018f72:	2b01      	cmp	r3, #1
 8018f74:	d116      	bne.n	8018fa4 <USB_EPStartXfer+0x694>
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	2250      	movs	r2, #80	@ 0x50
 8018f7a:	5a9b      	ldrh	r3, [r3, r2]
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	001a      	movs	r2, r3
 8018f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f82:	189b      	adds	r3, r3, r2
 8018f84:	643b      	str	r3, [r7, #64]	@ 0x40
 8018f86:	683b      	ldr	r3, [r7, #0]
 8018f88:	781b      	ldrb	r3, [r3, #0]
 8018f8a:	00da      	lsls	r2, r3, #3
 8018f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f8e:	18d3      	adds	r3, r2, r3
 8018f90:	4a33      	ldr	r2, [pc, #204]	@ (8019060 <USB_EPStartXfer+0x750>)
 8018f92:	4694      	mov	ip, r2
 8018f94:	4463      	add	r3, ip
 8018f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f98:	1d7b      	adds	r3, r7, #5
 8018f9a:	33ff      	adds	r3, #255	@ 0xff
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	b29a      	uxth	r2, r3
 8018fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018fa2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8018fa4:	2076      	movs	r0, #118	@ 0x76
 8018fa6:	183b      	adds	r3, r7, r0
 8018fa8:	683a      	ldr	r2, [r7, #0]
 8018faa:	8952      	ldrh	r2, [r2, #10]
 8018fac:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	6959      	ldr	r1, [r3, #20]
 8018fb2:	1d7b      	adds	r3, r7, #5
 8018fb4:	33ff      	adds	r3, #255	@ 0xff
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	b29c      	uxth	r4, r3
 8018fba:	183b      	adds	r3, r7, r0
 8018fbc:	881a      	ldrh	r2, [r3, #0]
 8018fbe:	6878      	ldr	r0, [r7, #4]
 8018fc0:	0023      	movs	r3, r4
 8018fc2:	f000 ff17 	bl	8019df4 <USB_WritePMA>
 8018fc6:	e1b6      	b.n	8019336 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	6a1b      	ldr	r3, [r3, #32]
 8018fcc:	1d7a      	adds	r2, r7, #5
 8018fce:	32ff      	adds	r2, #255	@ 0xff
 8018fd0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8018fd2:	687a      	ldr	r2, [r7, #4]
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	781b      	ldrb	r3, [r3, #0]
 8018fd8:	009b      	lsls	r3, r3, #2
 8018fda:	18d3      	adds	r3, r2, r3
 8018fdc:	881b      	ldrh	r3, [r3, #0]
 8018fde:	b29a      	uxth	r2, r3
 8018fe0:	2062      	movs	r0, #98	@ 0x62
 8018fe2:	183b      	adds	r3, r7, r0
 8018fe4:	491f      	ldr	r1, [pc, #124]	@ (8019064 <USB_EPStartXfer+0x754>)
 8018fe6:	400a      	ands	r2, r1
 8018fe8:	801a      	strh	r2, [r3, #0]
 8018fea:	687a      	ldr	r2, [r7, #4]
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	781b      	ldrb	r3, [r3, #0]
 8018ff0:	009b      	lsls	r3, r3, #2
 8018ff2:	18d3      	adds	r3, r2, r3
 8018ff4:	183a      	adds	r2, r7, r0
 8018ff6:	8812      	ldrh	r2, [r2, #0]
 8018ff8:	491b      	ldr	r1, [pc, #108]	@ (8019068 <USB_EPStartXfer+0x758>)
 8018ffa:	430a      	orrs	r2, r1
 8018ffc:	b292      	uxth	r2, r2
 8018ffe:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	2250      	movs	r2, #80	@ 0x50
 8019008:	5a9b      	ldrh	r3, [r3, r2]
 801900a:	b29b      	uxth	r3, r3
 801900c:	001a      	movs	r2, r3
 801900e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019010:	189b      	adds	r3, r3, r2
 8019012:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019014:	683b      	ldr	r3, [r7, #0]
 8019016:	781b      	ldrb	r3, [r3, #0]
 8019018:	00da      	lsls	r2, r3, #3
 801901a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801901c:	18d3      	adds	r3, r2, r3
 801901e:	4a0e      	ldr	r2, [pc, #56]	@ (8019058 <USB_EPStartXfer+0x748>)
 8019020:	4694      	mov	ip, r2
 8019022:	4463      	add	r3, ip
 8019024:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019026:	1d7b      	adds	r3, r7, #5
 8019028:	33ff      	adds	r3, #255	@ 0xff
 801902a:	681b      	ldr	r3, [r3, #0]
 801902c:	b29a      	uxth	r2, r3
 801902e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8019030:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019032:	2076      	movs	r0, #118	@ 0x76
 8019034:	183b      	adds	r3, r7, r0
 8019036:	683a      	ldr	r2, [r7, #0]
 8019038:	8912      	ldrh	r2, [r2, #8]
 801903a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	6959      	ldr	r1, [r3, #20]
 8019040:	1d7b      	adds	r3, r7, #5
 8019042:	33ff      	adds	r3, #255	@ 0xff
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	b29c      	uxth	r4, r3
 8019048:	183b      	adds	r3, r7, r0
 801904a:	881a      	ldrh	r2, [r3, #0]
 801904c:	6878      	ldr	r0, [r7, #4]
 801904e:	0023      	movs	r3, r4
 8019050:	f000 fed0 	bl	8019df4 <USB_WritePMA>
 8019054:	e16f      	b.n	8019336 <USB_EPStartXfer+0xa26>
 8019056:	46c0      	nop			@ (mov r8, r8)
 8019058:	00000402 	.word	0x00000402
 801905c:	ffff8000 	.word	0xffff8000
 8019060:	00000406 	.word	0x00000406
 8019064:	ffff8e8f 	.word	0xffff8e8f
 8019068:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801906c:	683b      	ldr	r3, [r7, #0]
 801906e:	6a1a      	ldr	r2, [r3, #32]
 8019070:	1d7b      	adds	r3, r7, #5
 8019072:	33ff      	adds	r3, #255	@ 0xff
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	1ad2      	subs	r2, r2, r3
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801907c:	687a      	ldr	r2, [r7, #4]
 801907e:	683b      	ldr	r3, [r7, #0]
 8019080:	781b      	ldrb	r3, [r3, #0]
 8019082:	009b      	lsls	r3, r3, #2
 8019084:	18d3      	adds	r3, r2, r3
 8019086:	881b      	ldrh	r3, [r3, #0]
 8019088:	b29b      	uxth	r3, r3
 801908a:	001a      	movs	r2, r3
 801908c:	2340      	movs	r3, #64	@ 0x40
 801908e:	4013      	ands	r3, r2
 8019090:	d100      	bne.n	8019094 <USB_EPStartXfer+0x784>
 8019092:	e0a4      	b.n	80191de <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	673b      	str	r3, [r7, #112]	@ 0x70
 8019098:	683b      	ldr	r3, [r7, #0]
 801909a:	785b      	ldrb	r3, [r3, #1]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d000      	beq.n	80190a2 <USB_EPStartXfer+0x792>
 80190a0:	e070      	b.n	8019184 <USB_EPStartXfer+0x874>
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	2250      	movs	r2, #80	@ 0x50
 80190aa:	5a9b      	ldrh	r3, [r3, r2]
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	001a      	movs	r2, r3
 80190b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80190b2:	189b      	adds	r3, r3, r2
 80190b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80190b6:	683b      	ldr	r3, [r7, #0]
 80190b8:	781b      	ldrb	r3, [r3, #0]
 80190ba:	00da      	lsls	r2, r3, #3
 80190bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80190be:	18d3      	adds	r3, r2, r3
 80190c0:	4abc      	ldr	r2, [pc, #752]	@ (80193b4 <USB_EPStartXfer+0xaa4>)
 80190c2:	4694      	mov	ip, r2
 80190c4:	4463      	add	r3, ip
 80190c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80190c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80190ca:	881b      	ldrh	r3, [r3, #0]
 80190cc:	b29b      	uxth	r3, r3
 80190ce:	059b      	lsls	r3, r3, #22
 80190d0:	0d9b      	lsrs	r3, r3, #22
 80190d2:	b29a      	uxth	r2, r3
 80190d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80190d6:	801a      	strh	r2, [r3, #0]
 80190d8:	1d7b      	adds	r3, r7, #5
 80190da:	33ff      	adds	r3, #255	@ 0xff
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	2b3e      	cmp	r3, #62	@ 0x3e
 80190e0:	d922      	bls.n	8019128 <USB_EPStartXfer+0x818>
 80190e2:	1d7b      	adds	r3, r7, #5
 80190e4:	33ff      	adds	r3, #255	@ 0xff
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	095b      	lsrs	r3, r3, #5
 80190ea:	21f0      	movs	r1, #240	@ 0xf0
 80190ec:	187a      	adds	r2, r7, r1
 80190ee:	6013      	str	r3, [r2, #0]
 80190f0:	1d7b      	adds	r3, r7, #5
 80190f2:	33ff      	adds	r3, #255	@ 0xff
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	221f      	movs	r2, #31
 80190f8:	4013      	ands	r3, r2
 80190fa:	d104      	bne.n	8019106 <USB_EPStartXfer+0x7f6>
 80190fc:	187b      	adds	r3, r7, r1
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	3b01      	subs	r3, #1
 8019102:	187a      	adds	r2, r7, r1
 8019104:	6013      	str	r3, [r2, #0]
 8019106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019108:	881b      	ldrh	r3, [r3, #0]
 801910a:	b29a      	uxth	r2, r3
 801910c:	23f0      	movs	r3, #240	@ 0xf0
 801910e:	18fb      	adds	r3, r7, r3
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	b29b      	uxth	r3, r3
 8019114:	029b      	lsls	r3, r3, #10
 8019116:	b29b      	uxth	r3, r3
 8019118:	4313      	orrs	r3, r2
 801911a:	b29b      	uxth	r3, r3
 801911c:	4aa6      	ldr	r2, [pc, #664]	@ (80193b8 <USB_EPStartXfer+0xaa8>)
 801911e:	4313      	orrs	r3, r2
 8019120:	b29a      	uxth	r2, r3
 8019122:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019124:	801a      	strh	r2, [r3, #0]
 8019126:	e048      	b.n	80191ba <USB_EPStartXfer+0x8aa>
 8019128:	1d7b      	adds	r3, r7, #5
 801912a:	33ff      	adds	r3, #255	@ 0xff
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	2b00      	cmp	r3, #0
 8019130:	d108      	bne.n	8019144 <USB_EPStartXfer+0x834>
 8019132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019134:	881b      	ldrh	r3, [r3, #0]
 8019136:	b29b      	uxth	r3, r3
 8019138:	4a9f      	ldr	r2, [pc, #636]	@ (80193b8 <USB_EPStartXfer+0xaa8>)
 801913a:	4313      	orrs	r3, r2
 801913c:	b29a      	uxth	r2, r3
 801913e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019140:	801a      	strh	r2, [r3, #0]
 8019142:	e03a      	b.n	80191ba <USB_EPStartXfer+0x8aa>
 8019144:	1d7b      	adds	r3, r7, #5
 8019146:	33ff      	adds	r3, #255	@ 0xff
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	085b      	lsrs	r3, r3, #1
 801914c:	21f0      	movs	r1, #240	@ 0xf0
 801914e:	187a      	adds	r2, r7, r1
 8019150:	6013      	str	r3, [r2, #0]
 8019152:	1d7b      	adds	r3, r7, #5
 8019154:	33ff      	adds	r3, #255	@ 0xff
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	2201      	movs	r2, #1
 801915a:	4013      	ands	r3, r2
 801915c:	d004      	beq.n	8019168 <USB_EPStartXfer+0x858>
 801915e:	187b      	adds	r3, r7, r1
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	3301      	adds	r3, #1
 8019164:	187a      	adds	r2, r7, r1
 8019166:	6013      	str	r3, [r2, #0]
 8019168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801916a:	881b      	ldrh	r3, [r3, #0]
 801916c:	b29a      	uxth	r2, r3
 801916e:	23f0      	movs	r3, #240	@ 0xf0
 8019170:	18fb      	adds	r3, r7, r3
 8019172:	681b      	ldr	r3, [r3, #0]
 8019174:	b29b      	uxth	r3, r3
 8019176:	029b      	lsls	r3, r3, #10
 8019178:	b29b      	uxth	r3, r3
 801917a:	4313      	orrs	r3, r2
 801917c:	b29a      	uxth	r2, r3
 801917e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019180:	801a      	strh	r2, [r3, #0]
 8019182:	e01a      	b.n	80191ba <USB_EPStartXfer+0x8aa>
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	785b      	ldrb	r3, [r3, #1]
 8019188:	2b01      	cmp	r3, #1
 801918a:	d116      	bne.n	80191ba <USB_EPStartXfer+0x8aa>
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	2250      	movs	r2, #80	@ 0x50
 8019190:	5a9b      	ldrh	r3, [r3, r2]
 8019192:	b29b      	uxth	r3, r3
 8019194:	001a      	movs	r2, r3
 8019196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8019198:	189b      	adds	r3, r3, r2
 801919a:	673b      	str	r3, [r7, #112]	@ 0x70
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	781b      	ldrb	r3, [r3, #0]
 80191a0:	00da      	lsls	r2, r3, #3
 80191a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80191a4:	18d3      	adds	r3, r2, r3
 80191a6:	4a83      	ldr	r2, [pc, #524]	@ (80193b4 <USB_EPStartXfer+0xaa4>)
 80191a8:	4694      	mov	ip, r2
 80191aa:	4463      	add	r3, ip
 80191ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80191ae:	1d7b      	adds	r3, r7, #5
 80191b0:	33ff      	adds	r3, #255	@ 0xff
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	b29a      	uxth	r2, r3
 80191b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80191b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80191ba:	2076      	movs	r0, #118	@ 0x76
 80191bc:	183b      	adds	r3, r7, r0
 80191be:	683a      	ldr	r2, [r7, #0]
 80191c0:	8952      	ldrh	r2, [r2, #10]
 80191c2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80191c4:	683b      	ldr	r3, [r7, #0]
 80191c6:	6959      	ldr	r1, [r3, #20]
 80191c8:	1d7b      	adds	r3, r7, #5
 80191ca:	33ff      	adds	r3, #255	@ 0xff
 80191cc:	681b      	ldr	r3, [r3, #0]
 80191ce:	b29c      	uxth	r4, r3
 80191d0:	183b      	adds	r3, r7, r0
 80191d2:	881a      	ldrh	r2, [r3, #0]
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	0023      	movs	r3, r4
 80191d8:	f000 fe0c 	bl	8019df4 <USB_WritePMA>
 80191dc:	e0ab      	b.n	8019336 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	785b      	ldrb	r3, [r3, #1]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d000      	beq.n	80191e8 <USB_EPStartXfer+0x8d8>
 80191e6:	e070      	b.n	80192ca <USB_EPStartXfer+0x9ba>
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	2250      	movs	r2, #80	@ 0x50
 80191f0:	5a9b      	ldrh	r3, [r3, r2]
 80191f2:	b29b      	uxth	r3, r3
 80191f4:	001a      	movs	r2, r3
 80191f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80191f8:	189b      	adds	r3, r3, r2
 80191fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	781b      	ldrb	r3, [r3, #0]
 8019200:	00da      	lsls	r2, r3, #3
 8019202:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8019204:	18d3      	adds	r3, r2, r3
 8019206:	4a6d      	ldr	r2, [pc, #436]	@ (80193bc <USB_EPStartXfer+0xaac>)
 8019208:	4694      	mov	ip, r2
 801920a:	4463      	add	r3, ip
 801920c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801920e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019210:	881b      	ldrh	r3, [r3, #0]
 8019212:	b29b      	uxth	r3, r3
 8019214:	059b      	lsls	r3, r3, #22
 8019216:	0d9b      	lsrs	r3, r3, #22
 8019218:	b29a      	uxth	r2, r3
 801921a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801921c:	801a      	strh	r2, [r3, #0]
 801921e:	1d7b      	adds	r3, r7, #5
 8019220:	33ff      	adds	r3, #255	@ 0xff
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	2b3e      	cmp	r3, #62	@ 0x3e
 8019226:	d922      	bls.n	801926e <USB_EPStartXfer+0x95e>
 8019228:	1d7b      	adds	r3, r7, #5
 801922a:	33ff      	adds	r3, #255	@ 0xff
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	095b      	lsrs	r3, r3, #5
 8019230:	21ec      	movs	r1, #236	@ 0xec
 8019232:	187a      	adds	r2, r7, r1
 8019234:	6013      	str	r3, [r2, #0]
 8019236:	1d7b      	adds	r3, r7, #5
 8019238:	33ff      	adds	r3, #255	@ 0xff
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	221f      	movs	r2, #31
 801923e:	4013      	ands	r3, r2
 8019240:	d104      	bne.n	801924c <USB_EPStartXfer+0x93c>
 8019242:	187b      	adds	r3, r7, r1
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	3b01      	subs	r3, #1
 8019248:	187a      	adds	r2, r7, r1
 801924a:	6013      	str	r3, [r2, #0]
 801924c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801924e:	881b      	ldrh	r3, [r3, #0]
 8019250:	b29a      	uxth	r2, r3
 8019252:	23ec      	movs	r3, #236	@ 0xec
 8019254:	18fb      	adds	r3, r7, r3
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	b29b      	uxth	r3, r3
 801925a:	029b      	lsls	r3, r3, #10
 801925c:	b29b      	uxth	r3, r3
 801925e:	4313      	orrs	r3, r2
 8019260:	b29b      	uxth	r3, r3
 8019262:	4a55      	ldr	r2, [pc, #340]	@ (80193b8 <USB_EPStartXfer+0xaa8>)
 8019264:	4313      	orrs	r3, r2
 8019266:	b29a      	uxth	r2, r3
 8019268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801926a:	801a      	strh	r2, [r3, #0]
 801926c:	e052      	b.n	8019314 <USB_EPStartXfer+0xa04>
 801926e:	1d7b      	adds	r3, r7, #5
 8019270:	33ff      	adds	r3, #255	@ 0xff
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d108      	bne.n	801928a <USB_EPStartXfer+0x97a>
 8019278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801927a:	881b      	ldrh	r3, [r3, #0]
 801927c:	b29b      	uxth	r3, r3
 801927e:	4a4e      	ldr	r2, [pc, #312]	@ (80193b8 <USB_EPStartXfer+0xaa8>)
 8019280:	4313      	orrs	r3, r2
 8019282:	b29a      	uxth	r2, r3
 8019284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019286:	801a      	strh	r2, [r3, #0]
 8019288:	e044      	b.n	8019314 <USB_EPStartXfer+0xa04>
 801928a:	1d7b      	adds	r3, r7, #5
 801928c:	33ff      	adds	r3, #255	@ 0xff
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	085b      	lsrs	r3, r3, #1
 8019292:	21ec      	movs	r1, #236	@ 0xec
 8019294:	187a      	adds	r2, r7, r1
 8019296:	6013      	str	r3, [r2, #0]
 8019298:	1d7b      	adds	r3, r7, #5
 801929a:	33ff      	adds	r3, #255	@ 0xff
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	2201      	movs	r2, #1
 80192a0:	4013      	ands	r3, r2
 80192a2:	d004      	beq.n	80192ae <USB_EPStartXfer+0x99e>
 80192a4:	187b      	adds	r3, r7, r1
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	3301      	adds	r3, #1
 80192aa:	187a      	adds	r2, r7, r1
 80192ac:	6013      	str	r3, [r2, #0]
 80192ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80192b0:	881b      	ldrh	r3, [r3, #0]
 80192b2:	b29a      	uxth	r2, r3
 80192b4:	23ec      	movs	r3, #236	@ 0xec
 80192b6:	18fb      	adds	r3, r7, r3
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	029b      	lsls	r3, r3, #10
 80192be:	b29b      	uxth	r3, r3
 80192c0:	4313      	orrs	r3, r2
 80192c2:	b29a      	uxth	r2, r3
 80192c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80192c6:	801a      	strh	r2, [r3, #0]
 80192c8:	e024      	b.n	8019314 <USB_EPStartXfer+0xa04>
 80192ca:	683b      	ldr	r3, [r7, #0]
 80192cc:	785b      	ldrb	r3, [r3, #1]
 80192ce:	2b01      	cmp	r3, #1
 80192d0:	d120      	bne.n	8019314 <USB_EPStartXfer+0xa04>
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	2184      	movs	r1, #132	@ 0x84
 80192d6:	187a      	adds	r2, r7, r1
 80192d8:	6013      	str	r3, [r2, #0]
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	2250      	movs	r2, #80	@ 0x50
 80192de:	5a9b      	ldrh	r3, [r3, r2]
 80192e0:	b29b      	uxth	r3, r3
 80192e2:	001a      	movs	r2, r3
 80192e4:	187b      	adds	r3, r7, r1
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	189b      	adds	r3, r3, r2
 80192ea:	187a      	adds	r2, r7, r1
 80192ec:	6013      	str	r3, [r2, #0]
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	781b      	ldrb	r3, [r3, #0]
 80192f2:	00da      	lsls	r2, r3, #3
 80192f4:	187b      	adds	r3, r7, r1
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	18d3      	adds	r3, r2, r3
 80192fa:	4a30      	ldr	r2, [pc, #192]	@ (80193bc <USB_EPStartXfer+0xaac>)
 80192fc:	4694      	mov	ip, r2
 80192fe:	4463      	add	r3, ip
 8019300:	2180      	movs	r1, #128	@ 0x80
 8019302:	187a      	adds	r2, r7, r1
 8019304:	6013      	str	r3, [r2, #0]
 8019306:	1d7b      	adds	r3, r7, #5
 8019308:	33ff      	adds	r3, #255	@ 0xff
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	b29a      	uxth	r2, r3
 801930e:	187b      	adds	r3, r7, r1
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8019314:	2076      	movs	r0, #118	@ 0x76
 8019316:	183b      	adds	r3, r7, r0
 8019318:	683a      	ldr	r2, [r7, #0]
 801931a:	8912      	ldrh	r2, [r2, #8]
 801931c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	6959      	ldr	r1, [r3, #20]
 8019322:	1d7b      	adds	r3, r7, #5
 8019324:	33ff      	adds	r3, #255	@ 0xff
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	b29c      	uxth	r4, r3
 801932a:	183b      	adds	r3, r7, r0
 801932c:	881a      	ldrh	r2, [r3, #0]
 801932e:	6878      	ldr	r0, [r7, #4]
 8019330:	0023      	movs	r3, r4
 8019332:	f000 fd5f 	bl	8019df4 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8019336:	687a      	ldr	r2, [r7, #4]
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	781b      	ldrb	r3, [r3, #0]
 801933c:	009b      	lsls	r3, r3, #2
 801933e:	18d3      	adds	r3, r2, r3
 8019340:	881b      	ldrh	r3, [r3, #0]
 8019342:	b29a      	uxth	r2, r3
 8019344:	200a      	movs	r0, #10
 8019346:	183b      	adds	r3, r7, r0
 8019348:	491d      	ldr	r1, [pc, #116]	@ (80193c0 <USB_EPStartXfer+0xab0>)
 801934a:	400a      	ands	r2, r1
 801934c:	801a      	strh	r2, [r3, #0]
 801934e:	183b      	adds	r3, r7, r0
 8019350:	183a      	adds	r2, r7, r0
 8019352:	8812      	ldrh	r2, [r2, #0]
 8019354:	2110      	movs	r1, #16
 8019356:	404a      	eors	r2, r1
 8019358:	801a      	strh	r2, [r3, #0]
 801935a:	183b      	adds	r3, r7, r0
 801935c:	183a      	adds	r2, r7, r0
 801935e:	8812      	ldrh	r2, [r2, #0]
 8019360:	2120      	movs	r1, #32
 8019362:	404a      	eors	r2, r1
 8019364:	801a      	strh	r2, [r3, #0]
 8019366:	687a      	ldr	r2, [r7, #4]
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	781b      	ldrb	r3, [r3, #0]
 801936c:	009b      	lsls	r3, r3, #2
 801936e:	18d3      	adds	r3, r2, r3
 8019370:	183a      	adds	r2, r7, r0
 8019372:	8812      	ldrh	r2, [r2, #0]
 8019374:	4913      	ldr	r1, [pc, #76]	@ (80193c4 <USB_EPStartXfer+0xab4>)
 8019376:	430a      	orrs	r2, r1
 8019378:	b292      	uxth	r2, r2
 801937a:	801a      	strh	r2, [r3, #0]
 801937c:	f000 fbf4 	bl	8019b68 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8019380:	683b      	ldr	r3, [r7, #0]
 8019382:	7b1b      	ldrb	r3, [r3, #12]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d000      	beq.n	801938a <USB_EPStartXfer+0xa7a>
 8019388:	e0a9      	b.n	80194de <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	699a      	ldr	r2, [r3, #24]
 801938e:	683b      	ldr	r3, [r7, #0]
 8019390:	691b      	ldr	r3, [r3, #16]
 8019392:	429a      	cmp	r2, r3
 8019394:	d918      	bls.n	80193c8 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8019396:	683b      	ldr	r3, [r7, #0]
 8019398:	691b      	ldr	r3, [r3, #16]
 801939a:	1d7a      	adds	r2, r7, #5
 801939c:	32ff      	adds	r2, #255	@ 0xff
 801939e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	699a      	ldr	r2, [r3, #24]
 80193a4:	1d7b      	adds	r3, r7, #5
 80193a6:	33ff      	adds	r3, #255	@ 0xff
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	1ad2      	subs	r2, r2, r3
 80193ac:	683b      	ldr	r3, [r7, #0]
 80193ae:	619a      	str	r2, [r3, #24]
 80193b0:	e012      	b.n	80193d8 <USB_EPStartXfer+0xac8>
 80193b2:	46c0      	nop			@ (mov r8, r8)
 80193b4:	00000406 	.word	0x00000406
 80193b8:	ffff8000 	.word	0xffff8000
 80193bc:	00000402 	.word	0x00000402
 80193c0:	ffff8fbf 	.word	0xffff8fbf
 80193c4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 80193c8:	683b      	ldr	r3, [r7, #0]
 80193ca:	699b      	ldr	r3, [r3, #24]
 80193cc:	1d7a      	adds	r2, r7, #5
 80193ce:	32ff      	adds	r2, #255	@ 0xff
 80193d0:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80193d2:	683b      	ldr	r3, [r7, #0]
 80193d4:	2200      	movs	r2, #0
 80193d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	2190      	movs	r1, #144	@ 0x90
 80193dc:	187a      	adds	r2, r7, r1
 80193de:	6013      	str	r3, [r2, #0]
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2250      	movs	r2, #80	@ 0x50
 80193e4:	5a9b      	ldrh	r3, [r3, r2]
 80193e6:	b29b      	uxth	r3, r3
 80193e8:	001a      	movs	r2, r3
 80193ea:	187b      	adds	r3, r7, r1
 80193ec:	681b      	ldr	r3, [r3, #0]
 80193ee:	189b      	adds	r3, r3, r2
 80193f0:	187a      	adds	r2, r7, r1
 80193f2:	6013      	str	r3, [r2, #0]
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	781b      	ldrb	r3, [r3, #0]
 80193f8:	00da      	lsls	r2, r3, #3
 80193fa:	187b      	adds	r3, r7, r1
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	18d3      	adds	r3, r2, r3
 8019400:	4acf      	ldr	r2, [pc, #828]	@ (8019740 <USB_EPStartXfer+0xe30>)
 8019402:	4694      	mov	ip, r2
 8019404:	4463      	add	r3, ip
 8019406:	218c      	movs	r1, #140	@ 0x8c
 8019408:	187a      	adds	r2, r7, r1
 801940a:	6013      	str	r3, [r2, #0]
 801940c:	187b      	adds	r3, r7, r1
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	881b      	ldrh	r3, [r3, #0]
 8019412:	b29b      	uxth	r3, r3
 8019414:	059b      	lsls	r3, r3, #22
 8019416:	0d9b      	lsrs	r3, r3, #22
 8019418:	b29a      	uxth	r2, r3
 801941a:	187b      	adds	r3, r7, r1
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	801a      	strh	r2, [r3, #0]
 8019420:	1d7b      	adds	r3, r7, #5
 8019422:	33ff      	adds	r3, #255	@ 0xff
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	2b3e      	cmp	r3, #62	@ 0x3e
 8019428:	d925      	bls.n	8019476 <USB_EPStartXfer+0xb66>
 801942a:	1d7b      	adds	r3, r7, #5
 801942c:	33ff      	adds	r3, #255	@ 0xff
 801942e:	681b      	ldr	r3, [r3, #0]
 8019430:	095b      	lsrs	r3, r3, #5
 8019432:	21e8      	movs	r1, #232	@ 0xe8
 8019434:	187a      	adds	r2, r7, r1
 8019436:	6013      	str	r3, [r2, #0]
 8019438:	1d7b      	adds	r3, r7, #5
 801943a:	33ff      	adds	r3, #255	@ 0xff
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	221f      	movs	r2, #31
 8019440:	4013      	ands	r3, r2
 8019442:	d104      	bne.n	801944e <USB_EPStartXfer+0xb3e>
 8019444:	187b      	adds	r3, r7, r1
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	3b01      	subs	r3, #1
 801944a:	187a      	adds	r2, r7, r1
 801944c:	6013      	str	r3, [r2, #0]
 801944e:	218c      	movs	r1, #140	@ 0x8c
 8019450:	187b      	adds	r3, r7, r1
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	881b      	ldrh	r3, [r3, #0]
 8019456:	b29a      	uxth	r2, r3
 8019458:	23e8      	movs	r3, #232	@ 0xe8
 801945a:	18fb      	adds	r3, r7, r3
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	b29b      	uxth	r3, r3
 8019460:	029b      	lsls	r3, r3, #10
 8019462:	b29b      	uxth	r3, r3
 8019464:	4313      	orrs	r3, r2
 8019466:	b29b      	uxth	r3, r3
 8019468:	4ab6      	ldr	r2, [pc, #728]	@ (8019744 <USB_EPStartXfer+0xe34>)
 801946a:	4313      	orrs	r3, r2
 801946c:	b29a      	uxth	r2, r3
 801946e:	187b      	adds	r3, r7, r1
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	801a      	strh	r2, [r3, #0]
 8019474:	e353      	b.n	8019b1e <USB_EPStartXfer+0x120e>
 8019476:	1d7b      	adds	r3, r7, #5
 8019478:	33ff      	adds	r3, #255	@ 0xff
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d10b      	bne.n	8019498 <USB_EPStartXfer+0xb88>
 8019480:	218c      	movs	r1, #140	@ 0x8c
 8019482:	187b      	adds	r3, r7, r1
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	881b      	ldrh	r3, [r3, #0]
 8019488:	b29b      	uxth	r3, r3
 801948a:	4aae      	ldr	r2, [pc, #696]	@ (8019744 <USB_EPStartXfer+0xe34>)
 801948c:	4313      	orrs	r3, r2
 801948e:	b29a      	uxth	r2, r3
 8019490:	187b      	adds	r3, r7, r1
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	801a      	strh	r2, [r3, #0]
 8019496:	e342      	b.n	8019b1e <USB_EPStartXfer+0x120e>
 8019498:	1d7b      	adds	r3, r7, #5
 801949a:	33ff      	adds	r3, #255	@ 0xff
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	085b      	lsrs	r3, r3, #1
 80194a0:	21e8      	movs	r1, #232	@ 0xe8
 80194a2:	187a      	adds	r2, r7, r1
 80194a4:	6013      	str	r3, [r2, #0]
 80194a6:	1d7b      	adds	r3, r7, #5
 80194a8:	33ff      	adds	r3, #255	@ 0xff
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	2201      	movs	r2, #1
 80194ae:	4013      	ands	r3, r2
 80194b0:	d004      	beq.n	80194bc <USB_EPStartXfer+0xbac>
 80194b2:	187b      	adds	r3, r7, r1
 80194b4:	681b      	ldr	r3, [r3, #0]
 80194b6:	3301      	adds	r3, #1
 80194b8:	187a      	adds	r2, r7, r1
 80194ba:	6013      	str	r3, [r2, #0]
 80194bc:	218c      	movs	r1, #140	@ 0x8c
 80194be:	187b      	adds	r3, r7, r1
 80194c0:	681b      	ldr	r3, [r3, #0]
 80194c2:	881b      	ldrh	r3, [r3, #0]
 80194c4:	b29a      	uxth	r2, r3
 80194c6:	23e8      	movs	r3, #232	@ 0xe8
 80194c8:	18fb      	adds	r3, r7, r3
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	b29b      	uxth	r3, r3
 80194ce:	029b      	lsls	r3, r3, #10
 80194d0:	b29b      	uxth	r3, r3
 80194d2:	4313      	orrs	r3, r2
 80194d4:	b29a      	uxth	r2, r3
 80194d6:	187b      	adds	r3, r7, r1
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	801a      	strh	r2, [r3, #0]
 80194dc:	e31f      	b.n	8019b1e <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80194de:	683b      	ldr	r3, [r7, #0]
 80194e0:	78db      	ldrb	r3, [r3, #3]
 80194e2:	2b02      	cmp	r3, #2
 80194e4:	d000      	beq.n	80194e8 <USB_EPStartXfer+0xbd8>
 80194e6:	e191      	b.n	801980c <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	785b      	ldrb	r3, [r3, #1]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d000      	beq.n	80194f2 <USB_EPStartXfer+0xbe2>
 80194f0:	e07c      	b.n	80195ec <USB_EPStartXfer+0xcdc>
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	21ac      	movs	r1, #172	@ 0xac
 80194f6:	187a      	adds	r2, r7, r1
 80194f8:	6013      	str	r3, [r2, #0]
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	2250      	movs	r2, #80	@ 0x50
 80194fe:	5a9b      	ldrh	r3, [r3, r2]
 8019500:	b29b      	uxth	r3, r3
 8019502:	001a      	movs	r2, r3
 8019504:	187b      	adds	r3, r7, r1
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	189b      	adds	r3, r3, r2
 801950a:	187a      	adds	r2, r7, r1
 801950c:	6013      	str	r3, [r2, #0]
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	781b      	ldrb	r3, [r3, #0]
 8019512:	00da      	lsls	r2, r3, #3
 8019514:	187b      	adds	r3, r7, r1
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	18d3      	adds	r3, r2, r3
 801951a:	4a8b      	ldr	r2, [pc, #556]	@ (8019748 <USB_EPStartXfer+0xe38>)
 801951c:	4694      	mov	ip, r2
 801951e:	4463      	add	r3, ip
 8019520:	21a8      	movs	r1, #168	@ 0xa8
 8019522:	187a      	adds	r2, r7, r1
 8019524:	6013      	str	r3, [r2, #0]
 8019526:	187b      	adds	r3, r7, r1
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	881b      	ldrh	r3, [r3, #0]
 801952c:	b29b      	uxth	r3, r3
 801952e:	059b      	lsls	r3, r3, #22
 8019530:	0d9b      	lsrs	r3, r3, #22
 8019532:	b29a      	uxth	r2, r3
 8019534:	187b      	adds	r3, r7, r1
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	801a      	strh	r2, [r3, #0]
 801953a:	683b      	ldr	r3, [r7, #0]
 801953c:	691b      	ldr	r3, [r3, #16]
 801953e:	2b3e      	cmp	r3, #62	@ 0x3e
 8019540:	d923      	bls.n	801958a <USB_EPStartXfer+0xc7a>
 8019542:	683b      	ldr	r3, [r7, #0]
 8019544:	691b      	ldr	r3, [r3, #16]
 8019546:	095b      	lsrs	r3, r3, #5
 8019548:	21e4      	movs	r1, #228	@ 0xe4
 801954a:	187a      	adds	r2, r7, r1
 801954c:	6013      	str	r3, [r2, #0]
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	691b      	ldr	r3, [r3, #16]
 8019552:	221f      	movs	r2, #31
 8019554:	4013      	ands	r3, r2
 8019556:	d104      	bne.n	8019562 <USB_EPStartXfer+0xc52>
 8019558:	187b      	adds	r3, r7, r1
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	3b01      	subs	r3, #1
 801955e:	187a      	adds	r2, r7, r1
 8019560:	6013      	str	r3, [r2, #0]
 8019562:	21a8      	movs	r1, #168	@ 0xa8
 8019564:	187b      	adds	r3, r7, r1
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	881b      	ldrh	r3, [r3, #0]
 801956a:	b29a      	uxth	r2, r3
 801956c:	23e4      	movs	r3, #228	@ 0xe4
 801956e:	18fb      	adds	r3, r7, r3
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	b29b      	uxth	r3, r3
 8019574:	029b      	lsls	r3, r3, #10
 8019576:	b29b      	uxth	r3, r3
 8019578:	4313      	orrs	r3, r2
 801957a:	b29b      	uxth	r3, r3
 801957c:	4a71      	ldr	r2, [pc, #452]	@ (8019744 <USB_EPStartXfer+0xe34>)
 801957e:	4313      	orrs	r3, r2
 8019580:	b29a      	uxth	r2, r3
 8019582:	187b      	adds	r3, r7, r1
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	801a      	strh	r2, [r3, #0]
 8019588:	e054      	b.n	8019634 <USB_EPStartXfer+0xd24>
 801958a:	683b      	ldr	r3, [r7, #0]
 801958c:	691b      	ldr	r3, [r3, #16]
 801958e:	2b00      	cmp	r3, #0
 8019590:	d10b      	bne.n	80195aa <USB_EPStartXfer+0xc9a>
 8019592:	21a8      	movs	r1, #168	@ 0xa8
 8019594:	187b      	adds	r3, r7, r1
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	881b      	ldrh	r3, [r3, #0]
 801959a:	b29b      	uxth	r3, r3
 801959c:	4a69      	ldr	r2, [pc, #420]	@ (8019744 <USB_EPStartXfer+0xe34>)
 801959e:	4313      	orrs	r3, r2
 80195a0:	b29a      	uxth	r2, r3
 80195a2:	187b      	adds	r3, r7, r1
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	801a      	strh	r2, [r3, #0]
 80195a8:	e044      	b.n	8019634 <USB_EPStartXfer+0xd24>
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	691b      	ldr	r3, [r3, #16]
 80195ae:	085b      	lsrs	r3, r3, #1
 80195b0:	21e4      	movs	r1, #228	@ 0xe4
 80195b2:	187a      	adds	r2, r7, r1
 80195b4:	6013      	str	r3, [r2, #0]
 80195b6:	683b      	ldr	r3, [r7, #0]
 80195b8:	691b      	ldr	r3, [r3, #16]
 80195ba:	2201      	movs	r2, #1
 80195bc:	4013      	ands	r3, r2
 80195be:	d004      	beq.n	80195ca <USB_EPStartXfer+0xcba>
 80195c0:	187b      	adds	r3, r7, r1
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	3301      	adds	r3, #1
 80195c6:	187a      	adds	r2, r7, r1
 80195c8:	6013      	str	r3, [r2, #0]
 80195ca:	21a8      	movs	r1, #168	@ 0xa8
 80195cc:	187b      	adds	r3, r7, r1
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	881b      	ldrh	r3, [r3, #0]
 80195d2:	b29a      	uxth	r2, r3
 80195d4:	23e4      	movs	r3, #228	@ 0xe4
 80195d6:	18fb      	adds	r3, r7, r3
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	b29b      	uxth	r3, r3
 80195dc:	029b      	lsls	r3, r3, #10
 80195de:	b29b      	uxth	r3, r3
 80195e0:	4313      	orrs	r3, r2
 80195e2:	b29a      	uxth	r2, r3
 80195e4:	187b      	adds	r3, r7, r1
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	801a      	strh	r2, [r3, #0]
 80195ea:	e023      	b.n	8019634 <USB_EPStartXfer+0xd24>
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	785b      	ldrb	r3, [r3, #1]
 80195f0:	2b01      	cmp	r3, #1
 80195f2:	d11f      	bne.n	8019634 <USB_EPStartXfer+0xd24>
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	21b4      	movs	r1, #180	@ 0xb4
 80195f8:	187a      	adds	r2, r7, r1
 80195fa:	6013      	str	r3, [r2, #0]
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	2250      	movs	r2, #80	@ 0x50
 8019600:	5a9b      	ldrh	r3, [r3, r2]
 8019602:	b29b      	uxth	r3, r3
 8019604:	001a      	movs	r2, r3
 8019606:	187b      	adds	r3, r7, r1
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	189b      	adds	r3, r3, r2
 801960c:	187a      	adds	r2, r7, r1
 801960e:	6013      	str	r3, [r2, #0]
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	781b      	ldrb	r3, [r3, #0]
 8019614:	00da      	lsls	r2, r3, #3
 8019616:	187b      	adds	r3, r7, r1
 8019618:	681b      	ldr	r3, [r3, #0]
 801961a:	18d3      	adds	r3, r2, r3
 801961c:	4a4a      	ldr	r2, [pc, #296]	@ (8019748 <USB_EPStartXfer+0xe38>)
 801961e:	4694      	mov	ip, r2
 8019620:	4463      	add	r3, ip
 8019622:	21b0      	movs	r1, #176	@ 0xb0
 8019624:	187a      	adds	r2, r7, r1
 8019626:	6013      	str	r3, [r2, #0]
 8019628:	683b      	ldr	r3, [r7, #0]
 801962a:	691b      	ldr	r3, [r3, #16]
 801962c:	b29a      	uxth	r2, r3
 801962e:	187b      	adds	r3, r7, r1
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	801a      	strh	r2, [r3, #0]
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	22a4      	movs	r2, #164	@ 0xa4
 8019638:	18ba      	adds	r2, r7, r2
 801963a:	6013      	str	r3, [r2, #0]
 801963c:	683b      	ldr	r3, [r7, #0]
 801963e:	785b      	ldrb	r3, [r3, #1]
 8019640:	2b00      	cmp	r3, #0
 8019642:	d000      	beq.n	8019646 <USB_EPStartXfer+0xd36>
 8019644:	e082      	b.n	801974c <USB_EPStartXfer+0xe3c>
 8019646:	687b      	ldr	r3, [r7, #4]
 8019648:	219c      	movs	r1, #156	@ 0x9c
 801964a:	187a      	adds	r2, r7, r1
 801964c:	6013      	str	r3, [r2, #0]
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	2250      	movs	r2, #80	@ 0x50
 8019652:	5a9b      	ldrh	r3, [r3, r2]
 8019654:	b29b      	uxth	r3, r3
 8019656:	001a      	movs	r2, r3
 8019658:	187b      	adds	r3, r7, r1
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	189b      	adds	r3, r3, r2
 801965e:	187a      	adds	r2, r7, r1
 8019660:	6013      	str	r3, [r2, #0]
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	00da      	lsls	r2, r3, #3
 8019668:	187b      	adds	r3, r7, r1
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	18d3      	adds	r3, r2, r3
 801966e:	4a34      	ldr	r2, [pc, #208]	@ (8019740 <USB_EPStartXfer+0xe30>)
 8019670:	4694      	mov	ip, r2
 8019672:	4463      	add	r3, ip
 8019674:	2198      	movs	r1, #152	@ 0x98
 8019676:	187a      	adds	r2, r7, r1
 8019678:	6013      	str	r3, [r2, #0]
 801967a:	187b      	adds	r3, r7, r1
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	881b      	ldrh	r3, [r3, #0]
 8019680:	b29b      	uxth	r3, r3
 8019682:	059b      	lsls	r3, r3, #22
 8019684:	0d9b      	lsrs	r3, r3, #22
 8019686:	b29a      	uxth	r2, r3
 8019688:	187b      	adds	r3, r7, r1
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	801a      	strh	r2, [r3, #0]
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	691b      	ldr	r3, [r3, #16]
 8019692:	2b3e      	cmp	r3, #62	@ 0x3e
 8019694:	d923      	bls.n	80196de <USB_EPStartXfer+0xdce>
 8019696:	683b      	ldr	r3, [r7, #0]
 8019698:	691b      	ldr	r3, [r3, #16]
 801969a:	095b      	lsrs	r3, r3, #5
 801969c:	21e0      	movs	r1, #224	@ 0xe0
 801969e:	187a      	adds	r2, r7, r1
 80196a0:	6013      	str	r3, [r2, #0]
 80196a2:	683b      	ldr	r3, [r7, #0]
 80196a4:	691b      	ldr	r3, [r3, #16]
 80196a6:	221f      	movs	r2, #31
 80196a8:	4013      	ands	r3, r2
 80196aa:	d104      	bne.n	80196b6 <USB_EPStartXfer+0xda6>
 80196ac:	187b      	adds	r3, r7, r1
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	3b01      	subs	r3, #1
 80196b2:	187a      	adds	r2, r7, r1
 80196b4:	6013      	str	r3, [r2, #0]
 80196b6:	2198      	movs	r1, #152	@ 0x98
 80196b8:	187b      	adds	r3, r7, r1
 80196ba:	681b      	ldr	r3, [r3, #0]
 80196bc:	881b      	ldrh	r3, [r3, #0]
 80196be:	b29a      	uxth	r2, r3
 80196c0:	23e0      	movs	r3, #224	@ 0xe0
 80196c2:	18fb      	adds	r3, r7, r3
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	b29b      	uxth	r3, r3
 80196c8:	029b      	lsls	r3, r3, #10
 80196ca:	b29b      	uxth	r3, r3
 80196cc:	4313      	orrs	r3, r2
 80196ce:	b29b      	uxth	r3, r3
 80196d0:	4a1c      	ldr	r2, [pc, #112]	@ (8019744 <USB_EPStartXfer+0xe34>)
 80196d2:	4313      	orrs	r3, r2
 80196d4:	b29a      	uxth	r2, r3
 80196d6:	187b      	adds	r3, r7, r1
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	801a      	strh	r2, [r3, #0]
 80196dc:	e057      	b.n	801978e <USB_EPStartXfer+0xe7e>
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	691b      	ldr	r3, [r3, #16]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d10b      	bne.n	80196fe <USB_EPStartXfer+0xdee>
 80196e6:	2198      	movs	r1, #152	@ 0x98
 80196e8:	187b      	adds	r3, r7, r1
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	881b      	ldrh	r3, [r3, #0]
 80196ee:	b29b      	uxth	r3, r3
 80196f0:	4a14      	ldr	r2, [pc, #80]	@ (8019744 <USB_EPStartXfer+0xe34>)
 80196f2:	4313      	orrs	r3, r2
 80196f4:	b29a      	uxth	r2, r3
 80196f6:	187b      	adds	r3, r7, r1
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	801a      	strh	r2, [r3, #0]
 80196fc:	e047      	b.n	801978e <USB_EPStartXfer+0xe7e>
 80196fe:	683b      	ldr	r3, [r7, #0]
 8019700:	691b      	ldr	r3, [r3, #16]
 8019702:	085b      	lsrs	r3, r3, #1
 8019704:	21e0      	movs	r1, #224	@ 0xe0
 8019706:	187a      	adds	r2, r7, r1
 8019708:	6013      	str	r3, [r2, #0]
 801970a:	683b      	ldr	r3, [r7, #0]
 801970c:	691b      	ldr	r3, [r3, #16]
 801970e:	2201      	movs	r2, #1
 8019710:	4013      	ands	r3, r2
 8019712:	d004      	beq.n	801971e <USB_EPStartXfer+0xe0e>
 8019714:	187b      	adds	r3, r7, r1
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	3301      	adds	r3, #1
 801971a:	187a      	adds	r2, r7, r1
 801971c:	6013      	str	r3, [r2, #0]
 801971e:	2198      	movs	r1, #152	@ 0x98
 8019720:	187b      	adds	r3, r7, r1
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	881b      	ldrh	r3, [r3, #0]
 8019726:	b29a      	uxth	r2, r3
 8019728:	23e0      	movs	r3, #224	@ 0xe0
 801972a:	18fb      	adds	r3, r7, r3
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	b29b      	uxth	r3, r3
 8019730:	029b      	lsls	r3, r3, #10
 8019732:	b29b      	uxth	r3, r3
 8019734:	4313      	orrs	r3, r2
 8019736:	b29a      	uxth	r2, r3
 8019738:	187b      	adds	r3, r7, r1
 801973a:	681b      	ldr	r3, [r3, #0]
 801973c:	801a      	strh	r2, [r3, #0]
 801973e:	e026      	b.n	801978e <USB_EPStartXfer+0xe7e>
 8019740:	00000406 	.word	0x00000406
 8019744:	ffff8000 	.word	0xffff8000
 8019748:	00000402 	.word	0x00000402
 801974c:	683b      	ldr	r3, [r7, #0]
 801974e:	785b      	ldrb	r3, [r3, #1]
 8019750:	2b01      	cmp	r3, #1
 8019752:	d11c      	bne.n	801978e <USB_EPStartXfer+0xe7e>
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	2250      	movs	r2, #80	@ 0x50
 8019758:	5a9b      	ldrh	r3, [r3, r2]
 801975a:	b29b      	uxth	r3, r3
 801975c:	001a      	movs	r2, r3
 801975e:	21a4      	movs	r1, #164	@ 0xa4
 8019760:	187b      	adds	r3, r7, r1
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	189b      	adds	r3, r3, r2
 8019766:	187a      	adds	r2, r7, r1
 8019768:	6013      	str	r3, [r2, #0]
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	781b      	ldrb	r3, [r3, #0]
 801976e:	00da      	lsls	r2, r3, #3
 8019770:	187b      	adds	r3, r7, r1
 8019772:	681b      	ldr	r3, [r3, #0]
 8019774:	18d3      	adds	r3, r2, r3
 8019776:	4ad2      	ldr	r2, [pc, #840]	@ (8019ac0 <USB_EPStartXfer+0x11b0>)
 8019778:	4694      	mov	ip, r2
 801977a:	4463      	add	r3, ip
 801977c:	21a0      	movs	r1, #160	@ 0xa0
 801977e:	187a      	adds	r2, r7, r1
 8019780:	6013      	str	r3, [r2, #0]
 8019782:	683b      	ldr	r3, [r7, #0]
 8019784:	691b      	ldr	r3, [r3, #16]
 8019786:	b29a      	uxth	r2, r3
 8019788:	187b      	adds	r3, r7, r1
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	69db      	ldr	r3, [r3, #28]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d100      	bne.n	8019798 <USB_EPStartXfer+0xe88>
 8019796:	e1c2      	b.n	8019b1e <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8019798:	687a      	ldr	r2, [r7, #4]
 801979a:	683b      	ldr	r3, [r7, #0]
 801979c:	781b      	ldrb	r3, [r3, #0]
 801979e:	009b      	lsls	r3, r3, #2
 80197a0:	18d2      	adds	r2, r2, r3
 80197a2:	2196      	movs	r1, #150	@ 0x96
 80197a4:	187b      	adds	r3, r7, r1
 80197a6:	8812      	ldrh	r2, [r2, #0]
 80197a8:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80197aa:	187b      	adds	r3, r7, r1
 80197ac:	881a      	ldrh	r2, [r3, #0]
 80197ae:	2380      	movs	r3, #128	@ 0x80
 80197b0:	01db      	lsls	r3, r3, #7
 80197b2:	4013      	ands	r3, r2
 80197b4:	d004      	beq.n	80197c0 <USB_EPStartXfer+0xeb0>
 80197b6:	187b      	adds	r3, r7, r1
 80197b8:	881b      	ldrh	r3, [r3, #0]
 80197ba:	2240      	movs	r2, #64	@ 0x40
 80197bc:	4013      	ands	r3, r2
 80197be:	d10d      	bne.n	80197dc <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80197c0:	2196      	movs	r1, #150	@ 0x96
 80197c2:	187b      	adds	r3, r7, r1
 80197c4:	881a      	ldrh	r2, [r3, #0]
 80197c6:	2380      	movs	r3, #128	@ 0x80
 80197c8:	01db      	lsls	r3, r3, #7
 80197ca:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80197cc:	d000      	beq.n	80197d0 <USB_EPStartXfer+0xec0>
 80197ce:	e1a6      	b.n	8019b1e <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80197d0:	187b      	adds	r3, r7, r1
 80197d2:	881b      	ldrh	r3, [r3, #0]
 80197d4:	2240      	movs	r2, #64	@ 0x40
 80197d6:	4013      	ands	r3, r2
 80197d8:	d000      	beq.n	80197dc <USB_EPStartXfer+0xecc>
 80197da:	e1a0      	b.n	8019b1e <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80197dc:	687a      	ldr	r2, [r7, #4]
 80197de:	683b      	ldr	r3, [r7, #0]
 80197e0:	781b      	ldrb	r3, [r3, #0]
 80197e2:	009b      	lsls	r3, r3, #2
 80197e4:	18d3      	adds	r3, r2, r3
 80197e6:	881b      	ldrh	r3, [r3, #0]
 80197e8:	b29a      	uxth	r2, r3
 80197ea:	2094      	movs	r0, #148	@ 0x94
 80197ec:	183b      	adds	r3, r7, r0
 80197ee:	49b5      	ldr	r1, [pc, #724]	@ (8019ac4 <USB_EPStartXfer+0x11b4>)
 80197f0:	400a      	ands	r2, r1
 80197f2:	801a      	strh	r2, [r3, #0]
 80197f4:	687a      	ldr	r2, [r7, #4]
 80197f6:	683b      	ldr	r3, [r7, #0]
 80197f8:	781b      	ldrb	r3, [r3, #0]
 80197fa:	009b      	lsls	r3, r3, #2
 80197fc:	18d3      	adds	r3, r2, r3
 80197fe:	183a      	adds	r2, r7, r0
 8019800:	8812      	ldrh	r2, [r2, #0]
 8019802:	49b1      	ldr	r1, [pc, #708]	@ (8019ac8 <USB_EPStartXfer+0x11b8>)
 8019804:	430a      	orrs	r2, r1
 8019806:	b292      	uxth	r2, r2
 8019808:	801a      	strh	r2, [r3, #0]
 801980a:	e188      	b.n	8019b1e <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801980c:	683b      	ldr	r3, [r7, #0]
 801980e:	78db      	ldrb	r3, [r3, #3]
 8019810:	2b01      	cmp	r3, #1
 8019812:	d000      	beq.n	8019816 <USB_EPStartXfer+0xf06>
 8019814:	e181      	b.n	8019b1a <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	699a      	ldr	r2, [r3, #24]
 801981a:	683b      	ldr	r3, [r7, #0]
 801981c:	691b      	ldr	r3, [r3, #16]
 801981e:	429a      	cmp	r2, r3
 8019820:	d90d      	bls.n	801983e <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8019822:	683b      	ldr	r3, [r7, #0]
 8019824:	691b      	ldr	r3, [r3, #16]
 8019826:	1d7a      	adds	r2, r7, #5
 8019828:	32ff      	adds	r2, #255	@ 0xff
 801982a:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 801982c:	683b      	ldr	r3, [r7, #0]
 801982e:	699a      	ldr	r2, [r3, #24]
 8019830:	1d7b      	adds	r3, r7, #5
 8019832:	33ff      	adds	r3, #255	@ 0xff
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	1ad2      	subs	r2, r2, r3
 8019838:	683b      	ldr	r3, [r7, #0]
 801983a:	619a      	str	r2, [r3, #24]
 801983c:	e007      	b.n	801984e <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 801983e:	683b      	ldr	r3, [r7, #0]
 8019840:	699b      	ldr	r3, [r3, #24]
 8019842:	1d7a      	adds	r2, r7, #5
 8019844:	32ff      	adds	r2, #255	@ 0xff
 8019846:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	2200      	movs	r2, #0
 801984c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	785b      	ldrb	r3, [r3, #1]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d000      	beq.n	8019858 <USB_EPStartXfer+0xf48>
 8019856:	e082      	b.n	801995e <USB_EPStartXfer+0x104e>
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	21cc      	movs	r1, #204	@ 0xcc
 801985c:	187a      	adds	r2, r7, r1
 801985e:	6013      	str	r3, [r2, #0]
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	2250      	movs	r2, #80	@ 0x50
 8019864:	5a9b      	ldrh	r3, [r3, r2]
 8019866:	b29b      	uxth	r3, r3
 8019868:	001a      	movs	r2, r3
 801986a:	187b      	adds	r3, r7, r1
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	189b      	adds	r3, r3, r2
 8019870:	187a      	adds	r2, r7, r1
 8019872:	6013      	str	r3, [r2, #0]
 8019874:	683b      	ldr	r3, [r7, #0]
 8019876:	781b      	ldrb	r3, [r3, #0]
 8019878:	00da      	lsls	r2, r3, #3
 801987a:	187b      	adds	r3, r7, r1
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	18d3      	adds	r3, r2, r3
 8019880:	4a92      	ldr	r2, [pc, #584]	@ (8019acc <USB_EPStartXfer+0x11bc>)
 8019882:	4694      	mov	ip, r2
 8019884:	4463      	add	r3, ip
 8019886:	21c8      	movs	r1, #200	@ 0xc8
 8019888:	187a      	adds	r2, r7, r1
 801988a:	6013      	str	r3, [r2, #0]
 801988c:	187b      	adds	r3, r7, r1
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	881b      	ldrh	r3, [r3, #0]
 8019892:	b29b      	uxth	r3, r3
 8019894:	059b      	lsls	r3, r3, #22
 8019896:	0d9b      	lsrs	r3, r3, #22
 8019898:	b29a      	uxth	r2, r3
 801989a:	187b      	adds	r3, r7, r1
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	801a      	strh	r2, [r3, #0]
 80198a0:	1d7b      	adds	r3, r7, #5
 80198a2:	33ff      	adds	r3, #255	@ 0xff
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80198a8:	d925      	bls.n	80198f6 <USB_EPStartXfer+0xfe6>
 80198aa:	1d7b      	adds	r3, r7, #5
 80198ac:	33ff      	adds	r3, #255	@ 0xff
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	095b      	lsrs	r3, r3, #5
 80198b2:	21dc      	movs	r1, #220	@ 0xdc
 80198b4:	187a      	adds	r2, r7, r1
 80198b6:	6013      	str	r3, [r2, #0]
 80198b8:	1d7b      	adds	r3, r7, #5
 80198ba:	33ff      	adds	r3, #255	@ 0xff
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	221f      	movs	r2, #31
 80198c0:	4013      	ands	r3, r2
 80198c2:	d104      	bne.n	80198ce <USB_EPStartXfer+0xfbe>
 80198c4:	187b      	adds	r3, r7, r1
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	3b01      	subs	r3, #1
 80198ca:	187a      	adds	r2, r7, r1
 80198cc:	6013      	str	r3, [r2, #0]
 80198ce:	21c8      	movs	r1, #200	@ 0xc8
 80198d0:	187b      	adds	r3, r7, r1
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	881b      	ldrh	r3, [r3, #0]
 80198d6:	b29a      	uxth	r2, r3
 80198d8:	23dc      	movs	r3, #220	@ 0xdc
 80198da:	18fb      	adds	r3, r7, r3
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	b29b      	uxth	r3, r3
 80198e0:	029b      	lsls	r3, r3, #10
 80198e2:	b29b      	uxth	r3, r3
 80198e4:	4313      	orrs	r3, r2
 80198e6:	b29b      	uxth	r3, r3
 80198e8:	4a79      	ldr	r2, [pc, #484]	@ (8019ad0 <USB_EPStartXfer+0x11c0>)
 80198ea:	4313      	orrs	r3, r2
 80198ec:	b29a      	uxth	r2, r3
 80198ee:	187b      	adds	r3, r7, r1
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	801a      	strh	r2, [r3, #0]
 80198f4:	e058      	b.n	80199a8 <USB_EPStartXfer+0x1098>
 80198f6:	1d7b      	adds	r3, r7, #5
 80198f8:	33ff      	adds	r3, #255	@ 0xff
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d10b      	bne.n	8019918 <USB_EPStartXfer+0x1008>
 8019900:	21c8      	movs	r1, #200	@ 0xc8
 8019902:	187b      	adds	r3, r7, r1
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	881b      	ldrh	r3, [r3, #0]
 8019908:	b29b      	uxth	r3, r3
 801990a:	4a71      	ldr	r2, [pc, #452]	@ (8019ad0 <USB_EPStartXfer+0x11c0>)
 801990c:	4313      	orrs	r3, r2
 801990e:	b29a      	uxth	r2, r3
 8019910:	187b      	adds	r3, r7, r1
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	801a      	strh	r2, [r3, #0]
 8019916:	e047      	b.n	80199a8 <USB_EPStartXfer+0x1098>
 8019918:	1d7b      	adds	r3, r7, #5
 801991a:	33ff      	adds	r3, #255	@ 0xff
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	085b      	lsrs	r3, r3, #1
 8019920:	21dc      	movs	r1, #220	@ 0xdc
 8019922:	187a      	adds	r2, r7, r1
 8019924:	6013      	str	r3, [r2, #0]
 8019926:	1d7b      	adds	r3, r7, #5
 8019928:	33ff      	adds	r3, #255	@ 0xff
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	2201      	movs	r2, #1
 801992e:	4013      	ands	r3, r2
 8019930:	d004      	beq.n	801993c <USB_EPStartXfer+0x102c>
 8019932:	187b      	adds	r3, r7, r1
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	3301      	adds	r3, #1
 8019938:	187a      	adds	r2, r7, r1
 801993a:	6013      	str	r3, [r2, #0]
 801993c:	21c8      	movs	r1, #200	@ 0xc8
 801993e:	187b      	adds	r3, r7, r1
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	881b      	ldrh	r3, [r3, #0]
 8019944:	b29a      	uxth	r2, r3
 8019946:	23dc      	movs	r3, #220	@ 0xdc
 8019948:	18fb      	adds	r3, r7, r3
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	b29b      	uxth	r3, r3
 801994e:	029b      	lsls	r3, r3, #10
 8019950:	b29b      	uxth	r3, r3
 8019952:	4313      	orrs	r3, r2
 8019954:	b29a      	uxth	r2, r3
 8019956:	187b      	adds	r3, r7, r1
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	801a      	strh	r2, [r3, #0]
 801995c:	e024      	b.n	80199a8 <USB_EPStartXfer+0x1098>
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	785b      	ldrb	r3, [r3, #1]
 8019962:	2b01      	cmp	r3, #1
 8019964:	d120      	bne.n	80199a8 <USB_EPStartXfer+0x1098>
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	21d4      	movs	r1, #212	@ 0xd4
 801996a:	187a      	adds	r2, r7, r1
 801996c:	6013      	str	r3, [r2, #0]
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2250      	movs	r2, #80	@ 0x50
 8019972:	5a9b      	ldrh	r3, [r3, r2]
 8019974:	b29b      	uxth	r3, r3
 8019976:	001a      	movs	r2, r3
 8019978:	187b      	adds	r3, r7, r1
 801997a:	681b      	ldr	r3, [r3, #0]
 801997c:	189b      	adds	r3, r3, r2
 801997e:	187a      	adds	r2, r7, r1
 8019980:	6013      	str	r3, [r2, #0]
 8019982:	683b      	ldr	r3, [r7, #0]
 8019984:	781b      	ldrb	r3, [r3, #0]
 8019986:	00da      	lsls	r2, r3, #3
 8019988:	187b      	adds	r3, r7, r1
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	18d3      	adds	r3, r2, r3
 801998e:	4a4f      	ldr	r2, [pc, #316]	@ (8019acc <USB_EPStartXfer+0x11bc>)
 8019990:	4694      	mov	ip, r2
 8019992:	4463      	add	r3, ip
 8019994:	21d0      	movs	r1, #208	@ 0xd0
 8019996:	187a      	adds	r2, r7, r1
 8019998:	6013      	str	r3, [r2, #0]
 801999a:	1d7b      	adds	r3, r7, #5
 801999c:	33ff      	adds	r3, #255	@ 0xff
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	b29a      	uxth	r2, r3
 80199a2:	187b      	adds	r3, r7, r1
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	801a      	strh	r2, [r3, #0]
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	22c4      	movs	r2, #196	@ 0xc4
 80199ac:	18ba      	adds	r2, r7, r2
 80199ae:	6013      	str	r3, [r2, #0]
 80199b0:	683b      	ldr	r3, [r7, #0]
 80199b2:	785b      	ldrb	r3, [r3, #1]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d000      	beq.n	80199ba <USB_EPStartXfer+0x10aa>
 80199b8:	e08c      	b.n	8019ad4 <USB_EPStartXfer+0x11c4>
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	21bc      	movs	r1, #188	@ 0xbc
 80199be:	187a      	adds	r2, r7, r1
 80199c0:	6013      	str	r3, [r2, #0]
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	2250      	movs	r2, #80	@ 0x50
 80199c6:	5a9b      	ldrh	r3, [r3, r2]
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	001a      	movs	r2, r3
 80199cc:	187b      	adds	r3, r7, r1
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	189b      	adds	r3, r3, r2
 80199d2:	187a      	adds	r2, r7, r1
 80199d4:	6013      	str	r3, [r2, #0]
 80199d6:	683b      	ldr	r3, [r7, #0]
 80199d8:	781b      	ldrb	r3, [r3, #0]
 80199da:	00da      	lsls	r2, r3, #3
 80199dc:	187b      	adds	r3, r7, r1
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	18d3      	adds	r3, r2, r3
 80199e2:	4a37      	ldr	r2, [pc, #220]	@ (8019ac0 <USB_EPStartXfer+0x11b0>)
 80199e4:	4694      	mov	ip, r2
 80199e6:	4463      	add	r3, ip
 80199e8:	21b8      	movs	r1, #184	@ 0xb8
 80199ea:	187a      	adds	r2, r7, r1
 80199ec:	6013      	str	r3, [r2, #0]
 80199ee:	187b      	adds	r3, r7, r1
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	881b      	ldrh	r3, [r3, #0]
 80199f4:	b29b      	uxth	r3, r3
 80199f6:	059b      	lsls	r3, r3, #22
 80199f8:	0d9b      	lsrs	r3, r3, #22
 80199fa:	b29a      	uxth	r2, r3
 80199fc:	187b      	adds	r3, r7, r1
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	801a      	strh	r2, [r3, #0]
 8019a02:	1d7b      	adds	r3, r7, #5
 8019a04:	33ff      	adds	r3, #255	@ 0xff
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	2b3e      	cmp	r3, #62	@ 0x3e
 8019a0a:	d925      	bls.n	8019a58 <USB_EPStartXfer+0x1148>
 8019a0c:	1d7b      	adds	r3, r7, #5
 8019a0e:	33ff      	adds	r3, #255	@ 0xff
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	095b      	lsrs	r3, r3, #5
 8019a14:	21d8      	movs	r1, #216	@ 0xd8
 8019a16:	187a      	adds	r2, r7, r1
 8019a18:	6013      	str	r3, [r2, #0]
 8019a1a:	1d7b      	adds	r3, r7, #5
 8019a1c:	33ff      	adds	r3, #255	@ 0xff
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	221f      	movs	r2, #31
 8019a22:	4013      	ands	r3, r2
 8019a24:	d104      	bne.n	8019a30 <USB_EPStartXfer+0x1120>
 8019a26:	187b      	adds	r3, r7, r1
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	3b01      	subs	r3, #1
 8019a2c:	187a      	adds	r2, r7, r1
 8019a2e:	6013      	str	r3, [r2, #0]
 8019a30:	21b8      	movs	r1, #184	@ 0xb8
 8019a32:	187b      	adds	r3, r7, r1
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	881b      	ldrh	r3, [r3, #0]
 8019a38:	b29a      	uxth	r2, r3
 8019a3a:	23d8      	movs	r3, #216	@ 0xd8
 8019a3c:	18fb      	adds	r3, r7, r3
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	b29b      	uxth	r3, r3
 8019a42:	029b      	lsls	r3, r3, #10
 8019a44:	b29b      	uxth	r3, r3
 8019a46:	4313      	orrs	r3, r2
 8019a48:	b29b      	uxth	r3, r3
 8019a4a:	4a21      	ldr	r2, [pc, #132]	@ (8019ad0 <USB_EPStartXfer+0x11c0>)
 8019a4c:	4313      	orrs	r3, r2
 8019a4e:	b29a      	uxth	r2, r3
 8019a50:	187b      	adds	r3, r7, r1
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	801a      	strh	r2, [r3, #0]
 8019a56:	e062      	b.n	8019b1e <USB_EPStartXfer+0x120e>
 8019a58:	1d7b      	adds	r3, r7, #5
 8019a5a:	33ff      	adds	r3, #255	@ 0xff
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d10b      	bne.n	8019a7a <USB_EPStartXfer+0x116a>
 8019a62:	21b8      	movs	r1, #184	@ 0xb8
 8019a64:	187b      	adds	r3, r7, r1
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	881b      	ldrh	r3, [r3, #0]
 8019a6a:	b29b      	uxth	r3, r3
 8019a6c:	4a18      	ldr	r2, [pc, #96]	@ (8019ad0 <USB_EPStartXfer+0x11c0>)
 8019a6e:	4313      	orrs	r3, r2
 8019a70:	b29a      	uxth	r2, r3
 8019a72:	187b      	adds	r3, r7, r1
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	801a      	strh	r2, [r3, #0]
 8019a78:	e051      	b.n	8019b1e <USB_EPStartXfer+0x120e>
 8019a7a:	1d7b      	adds	r3, r7, #5
 8019a7c:	33ff      	adds	r3, #255	@ 0xff
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	085b      	lsrs	r3, r3, #1
 8019a82:	21d8      	movs	r1, #216	@ 0xd8
 8019a84:	187a      	adds	r2, r7, r1
 8019a86:	6013      	str	r3, [r2, #0]
 8019a88:	1d7b      	adds	r3, r7, #5
 8019a8a:	33ff      	adds	r3, #255	@ 0xff
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	2201      	movs	r2, #1
 8019a90:	4013      	ands	r3, r2
 8019a92:	d004      	beq.n	8019a9e <USB_EPStartXfer+0x118e>
 8019a94:	187b      	adds	r3, r7, r1
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	3301      	adds	r3, #1
 8019a9a:	187a      	adds	r2, r7, r1
 8019a9c:	6013      	str	r3, [r2, #0]
 8019a9e:	21b8      	movs	r1, #184	@ 0xb8
 8019aa0:	187b      	adds	r3, r7, r1
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	881b      	ldrh	r3, [r3, #0]
 8019aa6:	b29a      	uxth	r2, r3
 8019aa8:	23d8      	movs	r3, #216	@ 0xd8
 8019aaa:	18fb      	adds	r3, r7, r3
 8019aac:	681b      	ldr	r3, [r3, #0]
 8019aae:	b29b      	uxth	r3, r3
 8019ab0:	029b      	lsls	r3, r3, #10
 8019ab2:	b29b      	uxth	r3, r3
 8019ab4:	4313      	orrs	r3, r2
 8019ab6:	b29a      	uxth	r2, r3
 8019ab8:	187b      	adds	r3, r7, r1
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	801a      	strh	r2, [r3, #0]
 8019abe:	e02e      	b.n	8019b1e <USB_EPStartXfer+0x120e>
 8019ac0:	00000406 	.word	0x00000406
 8019ac4:	ffff8f8f 	.word	0xffff8f8f
 8019ac8:	ffff80c0 	.word	0xffff80c0
 8019acc:	00000402 	.word	0x00000402
 8019ad0:	ffff8000 	.word	0xffff8000
 8019ad4:	683b      	ldr	r3, [r7, #0]
 8019ad6:	785b      	ldrb	r3, [r3, #1]
 8019ad8:	2b01      	cmp	r3, #1
 8019ada:	d120      	bne.n	8019b1e <USB_EPStartXfer+0x120e>
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	2250      	movs	r2, #80	@ 0x50
 8019ae0:	5a9b      	ldrh	r3, [r3, r2]
 8019ae2:	b29b      	uxth	r3, r3
 8019ae4:	001a      	movs	r2, r3
 8019ae6:	21c4      	movs	r1, #196	@ 0xc4
 8019ae8:	187b      	adds	r3, r7, r1
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	189b      	adds	r3, r3, r2
 8019aee:	187a      	adds	r2, r7, r1
 8019af0:	6013      	str	r3, [r2, #0]
 8019af2:	683b      	ldr	r3, [r7, #0]
 8019af4:	781b      	ldrb	r3, [r3, #0]
 8019af6:	00da      	lsls	r2, r3, #3
 8019af8:	187b      	adds	r3, r7, r1
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	18d3      	adds	r3, r2, r3
 8019afe:	4a1d      	ldr	r2, [pc, #116]	@ (8019b74 <USB_EPStartXfer+0x1264>)
 8019b00:	4694      	mov	ip, r2
 8019b02:	4463      	add	r3, ip
 8019b04:	21c0      	movs	r1, #192	@ 0xc0
 8019b06:	187a      	adds	r2, r7, r1
 8019b08:	6013      	str	r3, [r2, #0]
 8019b0a:	1d7b      	adds	r3, r7, #5
 8019b0c:	33ff      	adds	r3, #255	@ 0xff
 8019b0e:	681b      	ldr	r3, [r3, #0]
 8019b10:	b29a      	uxth	r2, r3
 8019b12:	187b      	adds	r3, r7, r1
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	801a      	strh	r2, [r3, #0]
 8019b18:	e001      	b.n	8019b1e <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8019b1a:	2301      	movs	r3, #1
 8019b1c:	e025      	b.n	8019b6a <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019b1e:	687a      	ldr	r2, [r7, #4]
 8019b20:	683b      	ldr	r3, [r7, #0]
 8019b22:	781b      	ldrb	r3, [r3, #0]
 8019b24:	009b      	lsls	r3, r3, #2
 8019b26:	18d3      	adds	r3, r2, r3
 8019b28:	881b      	ldrh	r3, [r3, #0]
 8019b2a:	b29a      	uxth	r2, r3
 8019b2c:	208a      	movs	r0, #138	@ 0x8a
 8019b2e:	183b      	adds	r3, r7, r0
 8019b30:	4911      	ldr	r1, [pc, #68]	@ (8019b78 <USB_EPStartXfer+0x1268>)
 8019b32:	400a      	ands	r2, r1
 8019b34:	801a      	strh	r2, [r3, #0]
 8019b36:	183b      	adds	r3, r7, r0
 8019b38:	183a      	adds	r2, r7, r0
 8019b3a:	8812      	ldrh	r2, [r2, #0]
 8019b3c:	2180      	movs	r1, #128	@ 0x80
 8019b3e:	0149      	lsls	r1, r1, #5
 8019b40:	404a      	eors	r2, r1
 8019b42:	801a      	strh	r2, [r3, #0]
 8019b44:	183b      	adds	r3, r7, r0
 8019b46:	183a      	adds	r2, r7, r0
 8019b48:	8812      	ldrh	r2, [r2, #0]
 8019b4a:	2180      	movs	r1, #128	@ 0x80
 8019b4c:	0189      	lsls	r1, r1, #6
 8019b4e:	404a      	eors	r2, r1
 8019b50:	801a      	strh	r2, [r3, #0]
 8019b52:	687a      	ldr	r2, [r7, #4]
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	781b      	ldrb	r3, [r3, #0]
 8019b58:	009b      	lsls	r3, r3, #2
 8019b5a:	18d3      	adds	r3, r2, r3
 8019b5c:	183a      	adds	r2, r7, r0
 8019b5e:	8812      	ldrh	r2, [r2, #0]
 8019b60:	4906      	ldr	r1, [pc, #24]	@ (8019b7c <USB_EPStartXfer+0x126c>)
 8019b62:	430a      	orrs	r2, r1
 8019b64:	b292      	uxth	r2, r2
 8019b66:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019b68:	2300      	movs	r3, #0
}
 8019b6a:	0018      	movs	r0, r3
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	b043      	add	sp, #268	@ 0x10c
 8019b70:	bd90      	pop	{r4, r7, pc}
 8019b72:	46c0      	nop			@ (mov r8, r8)
 8019b74:	00000406 	.word	0x00000406
 8019b78:	ffffbf8f 	.word	0xffffbf8f
 8019b7c:	ffff8080 	.word	0xffff8080

08019b80 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b084      	sub	sp, #16
 8019b84:	af00      	add	r7, sp, #0
 8019b86:	6078      	str	r0, [r7, #4]
 8019b88:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	785b      	ldrb	r3, [r3, #1]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d01d      	beq.n	8019bce <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8019b92:	687a      	ldr	r2, [r7, #4]
 8019b94:	683b      	ldr	r3, [r7, #0]
 8019b96:	781b      	ldrb	r3, [r3, #0]
 8019b98:	009b      	lsls	r3, r3, #2
 8019b9a:	18d3      	adds	r3, r2, r3
 8019b9c:	881b      	ldrh	r3, [r3, #0]
 8019b9e:	b29a      	uxth	r2, r3
 8019ba0:	200c      	movs	r0, #12
 8019ba2:	183b      	adds	r3, r7, r0
 8019ba4:	491b      	ldr	r1, [pc, #108]	@ (8019c14 <USB_EPSetStall+0x94>)
 8019ba6:	400a      	ands	r2, r1
 8019ba8:	801a      	strh	r2, [r3, #0]
 8019baa:	183b      	adds	r3, r7, r0
 8019bac:	183a      	adds	r2, r7, r0
 8019bae:	8812      	ldrh	r2, [r2, #0]
 8019bb0:	2110      	movs	r1, #16
 8019bb2:	404a      	eors	r2, r1
 8019bb4:	801a      	strh	r2, [r3, #0]
 8019bb6:	687a      	ldr	r2, [r7, #4]
 8019bb8:	683b      	ldr	r3, [r7, #0]
 8019bba:	781b      	ldrb	r3, [r3, #0]
 8019bbc:	009b      	lsls	r3, r3, #2
 8019bbe:	18d3      	adds	r3, r2, r3
 8019bc0:	183a      	adds	r2, r7, r0
 8019bc2:	8812      	ldrh	r2, [r2, #0]
 8019bc4:	4914      	ldr	r1, [pc, #80]	@ (8019c18 <USB_EPSetStall+0x98>)
 8019bc6:	430a      	orrs	r2, r1
 8019bc8:	b292      	uxth	r2, r2
 8019bca:	801a      	strh	r2, [r3, #0]
 8019bcc:	e01d      	b.n	8019c0a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8019bce:	687a      	ldr	r2, [r7, #4]
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	781b      	ldrb	r3, [r3, #0]
 8019bd4:	009b      	lsls	r3, r3, #2
 8019bd6:	18d3      	adds	r3, r2, r3
 8019bd8:	881b      	ldrh	r3, [r3, #0]
 8019bda:	b29a      	uxth	r2, r3
 8019bdc:	200e      	movs	r0, #14
 8019bde:	183b      	adds	r3, r7, r0
 8019be0:	490e      	ldr	r1, [pc, #56]	@ (8019c1c <USB_EPSetStall+0x9c>)
 8019be2:	400a      	ands	r2, r1
 8019be4:	801a      	strh	r2, [r3, #0]
 8019be6:	183b      	adds	r3, r7, r0
 8019be8:	183a      	adds	r2, r7, r0
 8019bea:	8812      	ldrh	r2, [r2, #0]
 8019bec:	2180      	movs	r1, #128	@ 0x80
 8019bee:	0149      	lsls	r1, r1, #5
 8019bf0:	404a      	eors	r2, r1
 8019bf2:	801a      	strh	r2, [r3, #0]
 8019bf4:	687a      	ldr	r2, [r7, #4]
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	781b      	ldrb	r3, [r3, #0]
 8019bfa:	009b      	lsls	r3, r3, #2
 8019bfc:	18d3      	adds	r3, r2, r3
 8019bfe:	183a      	adds	r2, r7, r0
 8019c00:	8812      	ldrh	r2, [r2, #0]
 8019c02:	4905      	ldr	r1, [pc, #20]	@ (8019c18 <USB_EPSetStall+0x98>)
 8019c04:	430a      	orrs	r2, r1
 8019c06:	b292      	uxth	r2, r2
 8019c08:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8019c0a:	2300      	movs	r3, #0
}
 8019c0c:	0018      	movs	r0, r3
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	b004      	add	sp, #16
 8019c12:	bd80      	pop	{r7, pc}
 8019c14:	ffff8fbf 	.word	0xffff8fbf
 8019c18:	ffff8080 	.word	0xffff8080
 8019c1c:	ffffbf8f 	.word	0xffffbf8f

08019c20 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b086      	sub	sp, #24
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
 8019c28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8019c2a:	683b      	ldr	r3, [r7, #0]
 8019c2c:	7b1b      	ldrb	r3, [r3, #12]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d000      	beq.n	8019c34 <USB_EPClearStall+0x14>
 8019c32:	e095      	b.n	8019d60 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	785b      	ldrb	r3, [r3, #1]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d046      	beq.n	8019cca <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8019c3c:	687a      	ldr	r2, [r7, #4]
 8019c3e:	683b      	ldr	r3, [r7, #0]
 8019c40:	781b      	ldrb	r3, [r3, #0]
 8019c42:	009b      	lsls	r3, r3, #2
 8019c44:	18d2      	adds	r2, r2, r3
 8019c46:	2110      	movs	r1, #16
 8019c48:	187b      	adds	r3, r7, r1
 8019c4a:	8812      	ldrh	r2, [r2, #0]
 8019c4c:	801a      	strh	r2, [r3, #0]
 8019c4e:	187b      	adds	r3, r7, r1
 8019c50:	881b      	ldrh	r3, [r3, #0]
 8019c52:	2240      	movs	r2, #64	@ 0x40
 8019c54:	4013      	ands	r3, r2
 8019c56:	d016      	beq.n	8019c86 <USB_EPClearStall+0x66>
 8019c58:	687a      	ldr	r2, [r7, #4]
 8019c5a:	683b      	ldr	r3, [r7, #0]
 8019c5c:	781b      	ldrb	r3, [r3, #0]
 8019c5e:	009b      	lsls	r3, r3, #2
 8019c60:	18d3      	adds	r3, r2, r3
 8019c62:	881b      	ldrh	r3, [r3, #0]
 8019c64:	b29a      	uxth	r2, r3
 8019c66:	200e      	movs	r0, #14
 8019c68:	183b      	adds	r3, r7, r0
 8019c6a:	4940      	ldr	r1, [pc, #256]	@ (8019d6c <USB_EPClearStall+0x14c>)
 8019c6c:	400a      	ands	r2, r1
 8019c6e:	801a      	strh	r2, [r3, #0]
 8019c70:	687a      	ldr	r2, [r7, #4]
 8019c72:	683b      	ldr	r3, [r7, #0]
 8019c74:	781b      	ldrb	r3, [r3, #0]
 8019c76:	009b      	lsls	r3, r3, #2
 8019c78:	18d3      	adds	r3, r2, r3
 8019c7a:	183a      	adds	r2, r7, r0
 8019c7c:	8812      	ldrh	r2, [r2, #0]
 8019c7e:	493c      	ldr	r1, [pc, #240]	@ (8019d70 <USB_EPClearStall+0x150>)
 8019c80:	430a      	orrs	r2, r1
 8019c82:	b292      	uxth	r2, r2
 8019c84:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8019c86:	683b      	ldr	r3, [r7, #0]
 8019c88:	78db      	ldrb	r3, [r3, #3]
 8019c8a:	2b01      	cmp	r3, #1
 8019c8c:	d068      	beq.n	8019d60 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8019c8e:	687a      	ldr	r2, [r7, #4]
 8019c90:	683b      	ldr	r3, [r7, #0]
 8019c92:	781b      	ldrb	r3, [r3, #0]
 8019c94:	009b      	lsls	r3, r3, #2
 8019c96:	18d3      	adds	r3, r2, r3
 8019c98:	881b      	ldrh	r3, [r3, #0]
 8019c9a:	b29a      	uxth	r2, r3
 8019c9c:	200c      	movs	r0, #12
 8019c9e:	183b      	adds	r3, r7, r0
 8019ca0:	4934      	ldr	r1, [pc, #208]	@ (8019d74 <USB_EPClearStall+0x154>)
 8019ca2:	400a      	ands	r2, r1
 8019ca4:	801a      	strh	r2, [r3, #0]
 8019ca6:	183b      	adds	r3, r7, r0
 8019ca8:	183a      	adds	r2, r7, r0
 8019caa:	8812      	ldrh	r2, [r2, #0]
 8019cac:	2120      	movs	r1, #32
 8019cae:	404a      	eors	r2, r1
 8019cb0:	801a      	strh	r2, [r3, #0]
 8019cb2:	687a      	ldr	r2, [r7, #4]
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	781b      	ldrb	r3, [r3, #0]
 8019cb8:	009b      	lsls	r3, r3, #2
 8019cba:	18d3      	adds	r3, r2, r3
 8019cbc:	183a      	adds	r2, r7, r0
 8019cbe:	8812      	ldrh	r2, [r2, #0]
 8019cc0:	492d      	ldr	r1, [pc, #180]	@ (8019d78 <USB_EPClearStall+0x158>)
 8019cc2:	430a      	orrs	r2, r1
 8019cc4:	b292      	uxth	r2, r2
 8019cc6:	801a      	strh	r2, [r3, #0]
 8019cc8:	e04a      	b.n	8019d60 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8019cca:	687a      	ldr	r2, [r7, #4]
 8019ccc:	683b      	ldr	r3, [r7, #0]
 8019cce:	781b      	ldrb	r3, [r3, #0]
 8019cd0:	009b      	lsls	r3, r3, #2
 8019cd2:	18d2      	adds	r2, r2, r3
 8019cd4:	2116      	movs	r1, #22
 8019cd6:	187b      	adds	r3, r7, r1
 8019cd8:	8812      	ldrh	r2, [r2, #0]
 8019cda:	801a      	strh	r2, [r3, #0]
 8019cdc:	187b      	adds	r3, r7, r1
 8019cde:	881a      	ldrh	r2, [r3, #0]
 8019ce0:	2380      	movs	r3, #128	@ 0x80
 8019ce2:	01db      	lsls	r3, r3, #7
 8019ce4:	4013      	ands	r3, r2
 8019ce6:	d016      	beq.n	8019d16 <USB_EPClearStall+0xf6>
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	781b      	ldrb	r3, [r3, #0]
 8019cee:	009b      	lsls	r3, r3, #2
 8019cf0:	18d3      	adds	r3, r2, r3
 8019cf2:	881b      	ldrh	r3, [r3, #0]
 8019cf4:	b29a      	uxth	r2, r3
 8019cf6:	2014      	movs	r0, #20
 8019cf8:	183b      	adds	r3, r7, r0
 8019cfa:	491c      	ldr	r1, [pc, #112]	@ (8019d6c <USB_EPClearStall+0x14c>)
 8019cfc:	400a      	ands	r2, r1
 8019cfe:	801a      	strh	r2, [r3, #0]
 8019d00:	687a      	ldr	r2, [r7, #4]
 8019d02:	683b      	ldr	r3, [r7, #0]
 8019d04:	781b      	ldrb	r3, [r3, #0]
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	18d3      	adds	r3, r2, r3
 8019d0a:	183a      	adds	r2, r7, r0
 8019d0c:	8812      	ldrh	r2, [r2, #0]
 8019d0e:	491b      	ldr	r1, [pc, #108]	@ (8019d7c <USB_EPClearStall+0x15c>)
 8019d10:	430a      	orrs	r2, r1
 8019d12:	b292      	uxth	r2, r2
 8019d14:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8019d16:	687a      	ldr	r2, [r7, #4]
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	781b      	ldrb	r3, [r3, #0]
 8019d1c:	009b      	lsls	r3, r3, #2
 8019d1e:	18d3      	adds	r3, r2, r3
 8019d20:	881b      	ldrh	r3, [r3, #0]
 8019d22:	b29a      	uxth	r2, r3
 8019d24:	2012      	movs	r0, #18
 8019d26:	183b      	adds	r3, r7, r0
 8019d28:	4915      	ldr	r1, [pc, #84]	@ (8019d80 <USB_EPClearStall+0x160>)
 8019d2a:	400a      	ands	r2, r1
 8019d2c:	801a      	strh	r2, [r3, #0]
 8019d2e:	183b      	adds	r3, r7, r0
 8019d30:	183a      	adds	r2, r7, r0
 8019d32:	8812      	ldrh	r2, [r2, #0]
 8019d34:	2180      	movs	r1, #128	@ 0x80
 8019d36:	0149      	lsls	r1, r1, #5
 8019d38:	404a      	eors	r2, r1
 8019d3a:	801a      	strh	r2, [r3, #0]
 8019d3c:	183b      	adds	r3, r7, r0
 8019d3e:	183a      	adds	r2, r7, r0
 8019d40:	8812      	ldrh	r2, [r2, #0]
 8019d42:	2180      	movs	r1, #128	@ 0x80
 8019d44:	0189      	lsls	r1, r1, #6
 8019d46:	404a      	eors	r2, r1
 8019d48:	801a      	strh	r2, [r3, #0]
 8019d4a:	687a      	ldr	r2, [r7, #4]
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	781b      	ldrb	r3, [r3, #0]
 8019d50:	009b      	lsls	r3, r3, #2
 8019d52:	18d3      	adds	r3, r2, r3
 8019d54:	183a      	adds	r2, r7, r0
 8019d56:	8812      	ldrh	r2, [r2, #0]
 8019d58:	4907      	ldr	r1, [pc, #28]	@ (8019d78 <USB_EPClearStall+0x158>)
 8019d5a:	430a      	orrs	r2, r1
 8019d5c:	b292      	uxth	r2, r2
 8019d5e:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8019d60:	2300      	movs	r3, #0
}
 8019d62:	0018      	movs	r0, r3
 8019d64:	46bd      	mov	sp, r7
 8019d66:	b006      	add	sp, #24
 8019d68:	bd80      	pop	{r7, pc}
 8019d6a:	46c0      	nop			@ (mov r8, r8)
 8019d6c:	ffff8f8f 	.word	0xffff8f8f
 8019d70:	ffff80c0 	.word	0xffff80c0
 8019d74:	ffff8fbf 	.word	0xffff8fbf
 8019d78:	ffff8080 	.word	0xffff8080
 8019d7c:	ffffc080 	.word	0xffffc080
 8019d80:	ffffbf8f 	.word	0xffffbf8f

08019d84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8019d84:	b580      	push	{r7, lr}
 8019d86:	b082      	sub	sp, #8
 8019d88:	af00      	add	r7, sp, #0
 8019d8a:	6078      	str	r0, [r7, #4]
 8019d8c:	000a      	movs	r2, r1
 8019d8e:	1cfb      	adds	r3, r7, #3
 8019d90:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8019d92:	1cfb      	adds	r3, r7, #3
 8019d94:	781b      	ldrb	r3, [r3, #0]
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d103      	bne.n	8019da2 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	224c      	movs	r2, #76	@ 0x4c
 8019d9e:	2180      	movs	r1, #128	@ 0x80
 8019da0:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8019da2:	2300      	movs	r3, #0
}
 8019da4:	0018      	movs	r0, r3
 8019da6:	46bd      	mov	sp, r7
 8019da8:	b002      	add	sp, #8
 8019daa:	bd80      	pop	{r7, pc}

08019dac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b082      	sub	sp, #8
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	2258      	movs	r2, #88	@ 0x58
 8019db8:	5a9b      	ldrh	r3, [r3, r2]
 8019dba:	b29b      	uxth	r3, r3
 8019dbc:	4a05      	ldr	r2, [pc, #20]	@ (8019dd4 <USB_DevConnect+0x28>)
 8019dbe:	4313      	orrs	r3, r2
 8019dc0:	b299      	uxth	r1, r3
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	2258      	movs	r2, #88	@ 0x58
 8019dc6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8019dc8:	2300      	movs	r3, #0
}
 8019dca:	0018      	movs	r0, r3
 8019dcc:	46bd      	mov	sp, r7
 8019dce:	b002      	add	sp, #8
 8019dd0:	bd80      	pop	{r7, pc}
 8019dd2:	46c0      	nop			@ (mov r8, r8)
 8019dd4:	ffff8000 	.word	0xffff8000

08019dd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b084      	sub	sp, #16
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2244      	movs	r2, #68	@ 0x44
 8019de4:	5a9b      	ldrh	r3, [r3, r2]
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8019dea:	68fb      	ldr	r3, [r7, #12]
}
 8019dec:	0018      	movs	r0, r3
 8019dee:	46bd      	mov	sp, r7
 8019df0:	b004      	add	sp, #16
 8019df2:	bd80      	pop	{r7, pc}

08019df4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b08a      	sub	sp, #40	@ 0x28
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	60f8      	str	r0, [r7, #12]
 8019dfc:	60b9      	str	r1, [r7, #8]
 8019dfe:	0019      	movs	r1, r3
 8019e00:	1dbb      	adds	r3, r7, #6
 8019e02:	801a      	strh	r2, [r3, #0]
 8019e04:	1d3b      	adds	r3, r7, #4
 8019e06:	1c0a      	adds	r2, r1, #0
 8019e08:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8019e0a:	1d3b      	adds	r3, r7, #4
 8019e0c:	881b      	ldrh	r3, [r3, #0]
 8019e0e:	3301      	adds	r3, #1
 8019e10:	085b      	lsrs	r3, r3, #1
 8019e12:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019e18:	68bb      	ldr	r3, [r7, #8]
 8019e1a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8019e1c:	1dbb      	adds	r3, r7, #6
 8019e1e:	881a      	ldrh	r2, [r3, #0]
 8019e20:	697b      	ldr	r3, [r7, #20]
 8019e22:	18d3      	adds	r3, r2, r3
 8019e24:	2280      	movs	r2, #128	@ 0x80
 8019e26:	00d2      	lsls	r2, r2, #3
 8019e28:	4694      	mov	ip, r2
 8019e2a:	4463      	add	r3, ip
 8019e2c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8019e2e:	69bb      	ldr	r3, [r7, #24]
 8019e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8019e32:	e020      	b.n	8019e76 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8019e34:	69fb      	ldr	r3, [r7, #28]
 8019e36:	781a      	ldrb	r2, [r3, #0]
 8019e38:	2112      	movs	r1, #18
 8019e3a:	187b      	adds	r3, r7, r1
 8019e3c:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8019e3e:	69fb      	ldr	r3, [r7, #28]
 8019e40:	3301      	adds	r3, #1
 8019e42:	781b      	ldrb	r3, [r3, #0]
 8019e44:	021b      	lsls	r3, r3, #8
 8019e46:	b21a      	sxth	r2, r3
 8019e48:	187b      	adds	r3, r7, r1
 8019e4a:	2000      	movs	r0, #0
 8019e4c:	5e1b      	ldrsh	r3, [r3, r0]
 8019e4e:	4313      	orrs	r3, r2
 8019e50:	b21a      	sxth	r2, r3
 8019e52:	187b      	adds	r3, r7, r1
 8019e54:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8019e56:	6a3b      	ldr	r3, [r7, #32]
 8019e58:	187a      	adds	r2, r7, r1
 8019e5a:	8812      	ldrh	r2, [r2, #0]
 8019e5c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8019e5e:	6a3b      	ldr	r3, [r7, #32]
 8019e60:	3302      	adds	r3, #2
 8019e62:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8019e64:	69fb      	ldr	r3, [r7, #28]
 8019e66:	3301      	adds	r3, #1
 8019e68:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8019e6a:	69fb      	ldr	r3, [r7, #28]
 8019e6c:	3301      	adds	r3, #1
 8019e6e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8019e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e72:	3b01      	subs	r3, #1
 8019e74:	627b      	str	r3, [r7, #36]	@ 0x24
 8019e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d1db      	bne.n	8019e34 <USB_WritePMA+0x40>
  }
}
 8019e7c:	46c0      	nop			@ (mov r8, r8)
 8019e7e:	46c0      	nop			@ (mov r8, r8)
 8019e80:	46bd      	mov	sp, r7
 8019e82:	b00a      	add	sp, #40	@ 0x28
 8019e84:	bd80      	pop	{r7, pc}

08019e86 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8019e86:	b580      	push	{r7, lr}
 8019e88:	b08a      	sub	sp, #40	@ 0x28
 8019e8a:	af00      	add	r7, sp, #0
 8019e8c:	60f8      	str	r0, [r7, #12]
 8019e8e:	60b9      	str	r1, [r7, #8]
 8019e90:	0019      	movs	r1, r3
 8019e92:	1dbb      	adds	r3, r7, #6
 8019e94:	801a      	strh	r2, [r3, #0]
 8019e96:	1d3b      	adds	r3, r7, #4
 8019e98:	1c0a      	adds	r2, r1, #0
 8019e9a:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8019e9c:	1d3b      	adds	r3, r7, #4
 8019e9e:	881b      	ldrh	r3, [r3, #0]
 8019ea0:	085b      	lsrs	r3, r3, #1
 8019ea2:	b29b      	uxth	r3, r3
 8019ea4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8019eaa:	68bb      	ldr	r3, [r7, #8]
 8019eac:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8019eae:	1dbb      	adds	r3, r7, #6
 8019eb0:	881a      	ldrh	r2, [r3, #0]
 8019eb2:	697b      	ldr	r3, [r7, #20]
 8019eb4:	18d3      	adds	r3, r2, r3
 8019eb6:	2280      	movs	r2, #128	@ 0x80
 8019eb8:	00d2      	lsls	r2, r2, #3
 8019eba:	4694      	mov	ip, r2
 8019ebc:	4463      	add	r3, ip
 8019ebe:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8019ec0:	69bb      	ldr	r3, [r7, #24]
 8019ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ec4:	e018      	b.n	8019ef8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8019ec6:	6a3b      	ldr	r3, [r7, #32]
 8019ec8:	881b      	ldrh	r3, [r3, #0]
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8019ece:	6a3b      	ldr	r3, [r7, #32]
 8019ed0:	3302      	adds	r3, #2
 8019ed2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019ed4:	693b      	ldr	r3, [r7, #16]
 8019ed6:	b2da      	uxtb	r2, r3
 8019ed8:	69fb      	ldr	r3, [r7, #28]
 8019eda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019edc:	69fb      	ldr	r3, [r7, #28]
 8019ede:	3301      	adds	r3, #1
 8019ee0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8019ee2:	693b      	ldr	r3, [r7, #16]
 8019ee4:	0a1b      	lsrs	r3, r3, #8
 8019ee6:	b2da      	uxtb	r2, r3
 8019ee8:	69fb      	ldr	r3, [r7, #28]
 8019eea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8019eec:	69fb      	ldr	r3, [r7, #28]
 8019eee:	3301      	adds	r3, #1
 8019ef0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8019ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ef4:	3b01      	subs	r3, #1
 8019ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8019ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d1e3      	bne.n	8019ec6 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8019efe:	1d3b      	adds	r3, r7, #4
 8019f00:	881b      	ldrh	r3, [r3, #0]
 8019f02:	2201      	movs	r2, #1
 8019f04:	4013      	ands	r3, r2
 8019f06:	b29b      	uxth	r3, r3
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d007      	beq.n	8019f1c <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8019f0c:	6a3b      	ldr	r3, [r7, #32]
 8019f0e:	881b      	ldrh	r3, [r3, #0]
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8019f14:	693b      	ldr	r3, [r7, #16]
 8019f16:	b2da      	uxtb	r2, r3
 8019f18:	69fb      	ldr	r3, [r7, #28]
 8019f1a:	701a      	strb	r2, [r3, #0]
  }
}
 8019f1c:	46c0      	nop			@ (mov r8, r8)
 8019f1e:	46bd      	mov	sp, r7
 8019f20:	b00a      	add	sp, #40	@ 0x28
 8019f22:	bd80      	pop	{r7, pc}

08019f24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b084      	sub	sp, #16
 8019f28:	af00      	add	r7, sp, #0
 8019f2a:	6078      	str	r0, [r7, #4]
 8019f2c:	000a      	movs	r2, r1
 8019f2e:	1cfb      	adds	r3, r7, #3
 8019f30:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8019f32:	230f      	movs	r3, #15
 8019f34:	18fb      	adds	r3, r7, r3
 8019f36:	2200      	movs	r2, #0
 8019f38:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	7c1b      	ldrb	r3, [r3, #16]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d116      	bne.n	8019f70 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019f42:	2380      	movs	r3, #128	@ 0x80
 8019f44:	009b      	lsls	r3, r3, #2
 8019f46:	6878      	ldr	r0, [r7, #4]
 8019f48:	2202      	movs	r2, #2
 8019f4a:	2181      	movs	r1, #129	@ 0x81
 8019f4c:	f002 f8eb 	bl	801c126 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	2201      	movs	r2, #1
 8019f54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019f56:	2380      	movs	r3, #128	@ 0x80
 8019f58:	009b      	lsls	r3, r3, #2
 8019f5a:	6878      	ldr	r0, [r7, #4]
 8019f5c:	2202      	movs	r2, #2
 8019f5e:	2101      	movs	r1, #1
 8019f60:	f002 f8e1 	bl	801c126 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019f64:	687a      	ldr	r2, [r7, #4]
 8019f66:	23b6      	movs	r3, #182	@ 0xb6
 8019f68:	005b      	lsls	r3, r3, #1
 8019f6a:	2101      	movs	r1, #1
 8019f6c:	50d1      	str	r1, [r2, r3]
 8019f6e:	e013      	b.n	8019f98 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8019f70:	6878      	ldr	r0, [r7, #4]
 8019f72:	2340      	movs	r3, #64	@ 0x40
 8019f74:	2202      	movs	r2, #2
 8019f76:	2181      	movs	r1, #129	@ 0x81
 8019f78:	f002 f8d5 	bl	801c126 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	2201      	movs	r2, #1
 8019f80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8019f82:	6878      	ldr	r0, [r7, #4]
 8019f84:	2340      	movs	r3, #64	@ 0x40
 8019f86:	2202      	movs	r2, #2
 8019f88:	2101      	movs	r1, #1
 8019f8a:	f002 f8cc 	bl	801c126 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8019f8e:	687a      	ldr	r2, [r7, #4]
 8019f90:	23b6      	movs	r3, #182	@ 0xb6
 8019f92:	005b      	lsls	r3, r3, #1
 8019f94:	2101      	movs	r1, #1
 8019f96:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8019f98:	6878      	ldr	r0, [r7, #4]
 8019f9a:	2308      	movs	r3, #8
 8019f9c:	2203      	movs	r2, #3
 8019f9e:	2182      	movs	r1, #130	@ 0x82
 8019fa0:	f002 f8c1 	bl	801c126 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	2201      	movs	r2, #1
 8019fa8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8019faa:	2387      	movs	r3, #135	@ 0x87
 8019fac:	009b      	lsls	r3, r3, #2
 8019fae:	0018      	movs	r0, r3
 8019fb0:	f002 fa52 	bl	801c458 <USBD_static_malloc>
 8019fb4:	0001      	movs	r1, r0
 8019fb6:	687a      	ldr	r2, [r7, #4]
 8019fb8:	23ae      	movs	r3, #174	@ 0xae
 8019fba:	009b      	lsls	r3, r3, #2
 8019fbc:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8019fbe:	687a      	ldr	r2, [r7, #4]
 8019fc0:	23ae      	movs	r3, #174	@ 0xae
 8019fc2:	009b      	lsls	r3, r3, #2
 8019fc4:	58d3      	ldr	r3, [r2, r3]
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d104      	bne.n	8019fd4 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8019fca:	230f      	movs	r3, #15
 8019fcc:	18fb      	adds	r3, r7, r3
 8019fce:	2201      	movs	r2, #1
 8019fd0:	701a      	strb	r2, [r3, #0]
 8019fd2:	e02c      	b.n	801a02e <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8019fd4:	687a      	ldr	r2, [r7, #4]
 8019fd6:	23ae      	movs	r3, #174	@ 0xae
 8019fd8:	009b      	lsls	r3, r3, #2
 8019fda:	58d3      	ldr	r3, [r2, r3]
 8019fdc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8019fde:	687a      	ldr	r2, [r7, #4]
 8019fe0:	23af      	movs	r3, #175	@ 0xaf
 8019fe2:	009b      	lsls	r3, r3, #2
 8019fe4:	58d3      	ldr	r3, [r2, r3]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8019fea:	68ba      	ldr	r2, [r7, #8]
 8019fec:	2385      	movs	r3, #133	@ 0x85
 8019fee:	009b      	lsls	r3, r3, #2
 8019ff0:	2100      	movs	r1, #0
 8019ff2:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8019ff4:	68ba      	ldr	r2, [r7, #8]
 8019ff6:	2386      	movs	r3, #134	@ 0x86
 8019ff8:	009b      	lsls	r3, r3, #2
 8019ffa:	2100      	movs	r1, #0
 8019ffc:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	7c1b      	ldrb	r3, [r3, #16]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d10a      	bne.n	801a01c <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a006:	68ba      	ldr	r2, [r7, #8]
 801a008:	2381      	movs	r3, #129	@ 0x81
 801a00a:	009b      	lsls	r3, r3, #2
 801a00c:	58d2      	ldr	r2, [r2, r3]
 801a00e:	2380      	movs	r3, #128	@ 0x80
 801a010:	009b      	lsls	r3, r3, #2
 801a012:	6878      	ldr	r0, [r7, #4]
 801a014:	2101      	movs	r1, #1
 801a016:	f002 f9d1 	bl	801c3bc <USBD_LL_PrepareReceive>
 801a01a:	e008      	b.n	801a02e <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801a01c:	68ba      	ldr	r2, [r7, #8]
 801a01e:	2381      	movs	r3, #129	@ 0x81
 801a020:	009b      	lsls	r3, r3, #2
 801a022:	58d2      	ldr	r2, [r2, r3]
 801a024:	6878      	ldr	r0, [r7, #4]
 801a026:	2340      	movs	r3, #64	@ 0x40
 801a028:	2101      	movs	r1, #1
 801a02a:	f002 f9c7 	bl	801c3bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801a02e:	230f      	movs	r3, #15
 801a030:	18fb      	adds	r3, r7, r3
 801a032:	781b      	ldrb	r3, [r3, #0]
}
 801a034:	0018      	movs	r0, r3
 801a036:	46bd      	mov	sp, r7
 801a038:	b004      	add	sp, #16
 801a03a:	bd80      	pop	{r7, pc}

0801a03c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801a03c:	b580      	push	{r7, lr}
 801a03e:	b084      	sub	sp, #16
 801a040:	af00      	add	r7, sp, #0
 801a042:	6078      	str	r0, [r7, #4]
 801a044:	000a      	movs	r2, r1
 801a046:	1cfb      	adds	r3, r7, #3
 801a048:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801a04a:	230f      	movs	r3, #15
 801a04c:	18fb      	adds	r3, r7, r3
 801a04e:	2200      	movs	r2, #0
 801a050:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	2181      	movs	r1, #129	@ 0x81
 801a056:	0018      	movs	r0, r3
 801a058:	f002 f89c 	bl	801c194 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2200      	movs	r2, #0
 801a060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	2101      	movs	r1, #1
 801a066:	0018      	movs	r0, r3
 801a068:	f002 f894 	bl	801c194 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801a06c:	687a      	ldr	r2, [r7, #4]
 801a06e:	23b6      	movs	r3, #182	@ 0xb6
 801a070:	005b      	lsls	r3, r3, #1
 801a072:	2100      	movs	r1, #0
 801a074:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	2182      	movs	r1, #130	@ 0x82
 801a07a:	0018      	movs	r0, r3
 801a07c:	f002 f88a 	bl	801c194 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	2200      	movs	r2, #0
 801a084:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801a086:	687a      	ldr	r2, [r7, #4]
 801a088:	23ae      	movs	r3, #174	@ 0xae
 801a08a:	009b      	lsls	r3, r3, #2
 801a08c:	58d3      	ldr	r3, [r2, r3]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d011      	beq.n	801a0b6 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801a092:	687a      	ldr	r2, [r7, #4]
 801a094:	23af      	movs	r3, #175	@ 0xaf
 801a096:	009b      	lsls	r3, r3, #2
 801a098:	58d3      	ldr	r3, [r2, r3]
 801a09a:	685b      	ldr	r3, [r3, #4]
 801a09c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801a09e:	687a      	ldr	r2, [r7, #4]
 801a0a0:	23ae      	movs	r3, #174	@ 0xae
 801a0a2:	009b      	lsls	r3, r3, #2
 801a0a4:	58d3      	ldr	r3, [r2, r3]
 801a0a6:	0018      	movs	r0, r3
 801a0a8:	f002 f9e2 	bl	801c470 <USBD_static_free>
    pdev->pClassData = NULL;
 801a0ac:	687a      	ldr	r2, [r7, #4]
 801a0ae:	23ae      	movs	r3, #174	@ 0xae
 801a0b0:	009b      	lsls	r3, r3, #2
 801a0b2:	2100      	movs	r1, #0
 801a0b4:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801a0b6:	230f      	movs	r3, #15
 801a0b8:	18fb      	adds	r3, r7, r3
 801a0ba:	781b      	ldrb	r3, [r3, #0]
}
 801a0bc:	0018      	movs	r0, r3
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	b004      	add	sp, #16
 801a0c2:	bd80      	pop	{r7, pc}

0801a0c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b086      	sub	sp, #24
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
 801a0cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a0ce:	687a      	ldr	r2, [r7, #4]
 801a0d0:	23ae      	movs	r3, #174	@ 0xae
 801a0d2:	009b      	lsls	r3, r3, #2
 801a0d4:	58d3      	ldr	r3, [r2, r3]
 801a0d6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801a0d8:	230f      	movs	r3, #15
 801a0da:	18fb      	adds	r3, r7, r3
 801a0dc:	2200      	movs	r2, #0
 801a0de:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 801a0e0:	230c      	movs	r3, #12
 801a0e2:	18fb      	adds	r3, r7, r3
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 801a0e8:	2317      	movs	r3, #23
 801a0ea:	18fb      	adds	r3, r7, r3
 801a0ec:	2200      	movs	r2, #0
 801a0ee:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801a0f0:	683b      	ldr	r3, [r7, #0]
 801a0f2:	781b      	ldrb	r3, [r3, #0]
 801a0f4:	001a      	movs	r2, r3
 801a0f6:	2360      	movs	r3, #96	@ 0x60
 801a0f8:	4013      	ands	r3, r2
 801a0fa:	d03d      	beq.n	801a178 <USBD_CDC_Setup+0xb4>
 801a0fc:	2b20      	cmp	r3, #32
 801a0fe:	d000      	beq.n	801a102 <USBD_CDC_Setup+0x3e>
 801a100:	e094      	b.n	801a22c <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801a102:	683b      	ldr	r3, [r7, #0]
 801a104:	88db      	ldrh	r3, [r3, #6]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d02b      	beq.n	801a162 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 801a10a:	683b      	ldr	r3, [r7, #0]
 801a10c:	781b      	ldrb	r3, [r3, #0]
 801a10e:	b25b      	sxtb	r3, r3
 801a110:	2b00      	cmp	r3, #0
 801a112:	da12      	bge.n	801a13a <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a114:	687a      	ldr	r2, [r7, #4]
 801a116:	23af      	movs	r3, #175	@ 0xaf
 801a118:	009b      	lsls	r3, r3, #2
 801a11a:	58d3      	ldr	r3, [r2, r3]
 801a11c:	689b      	ldr	r3, [r3, #8]
 801a11e:	683a      	ldr	r2, [r7, #0]
 801a120:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801a122:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a124:	683a      	ldr	r2, [r7, #0]
 801a126:	88d2      	ldrh	r2, [r2, #6]
 801a128:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a12a:	6939      	ldr	r1, [r7, #16]
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	88da      	ldrh	r2, [r3, #6]
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	0018      	movs	r0, r3
 801a134:	f001 fbaf 	bl	801b896 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801a138:	e083      	b.n	801a242 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 801a13a:	683b      	ldr	r3, [r7, #0]
 801a13c:	7859      	ldrb	r1, [r3, #1]
 801a13e:	693a      	ldr	r2, [r7, #16]
 801a140:	2380      	movs	r3, #128	@ 0x80
 801a142:	009b      	lsls	r3, r3, #2
 801a144:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	88db      	ldrh	r3, [r3, #6]
 801a14a:	b2d9      	uxtb	r1, r3
 801a14c:	693b      	ldr	r3, [r7, #16]
 801a14e:	4a40      	ldr	r2, [pc, #256]	@ (801a250 <USBD_CDC_Setup+0x18c>)
 801a150:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801a152:	6939      	ldr	r1, [r7, #16]
 801a154:	683b      	ldr	r3, [r7, #0]
 801a156:	88da      	ldrh	r2, [r3, #6]
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	0018      	movs	r0, r3
 801a15c:	f001 fbce 	bl	801b8fc <USBD_CtlPrepareRx>
      break;
 801a160:	e06f      	b.n	801a242 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801a162:	687a      	ldr	r2, [r7, #4]
 801a164:	23af      	movs	r3, #175	@ 0xaf
 801a166:	009b      	lsls	r3, r3, #2
 801a168:	58d3      	ldr	r3, [r2, r3]
 801a16a:	689b      	ldr	r3, [r3, #8]
 801a16c:	683a      	ldr	r2, [r7, #0]
 801a16e:	7850      	ldrb	r0, [r2, #1]
 801a170:	6839      	ldr	r1, [r7, #0]
 801a172:	2200      	movs	r2, #0
 801a174:	4798      	blx	r3
      break;
 801a176:	e064      	b.n	801a242 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801a178:	683b      	ldr	r3, [r7, #0]
 801a17a:	785b      	ldrb	r3, [r3, #1]
 801a17c:	2b0b      	cmp	r3, #11
 801a17e:	d037      	beq.n	801a1f0 <USBD_CDC_Setup+0x12c>
 801a180:	dc47      	bgt.n	801a212 <USBD_CDC_Setup+0x14e>
 801a182:	2b00      	cmp	r3, #0
 801a184:	d002      	beq.n	801a18c <USBD_CDC_Setup+0xc8>
 801a186:	2b0a      	cmp	r3, #10
 801a188:	d019      	beq.n	801a1be <USBD_CDC_Setup+0xfa>
 801a18a:	e042      	b.n	801a212 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a18c:	687a      	ldr	r2, [r7, #4]
 801a18e:	23a7      	movs	r3, #167	@ 0xa7
 801a190:	009b      	lsls	r3, r3, #2
 801a192:	5cd3      	ldrb	r3, [r2, r3]
 801a194:	2b03      	cmp	r3, #3
 801a196:	d107      	bne.n	801a1a8 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801a198:	230c      	movs	r3, #12
 801a19a:	18f9      	adds	r1, r7, r3
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	2202      	movs	r2, #2
 801a1a0:	0018      	movs	r0, r3
 801a1a2:	f001 fb78 	bl	801b896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a1a6:	e040      	b.n	801a22a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a1a8:	683a      	ldr	r2, [r7, #0]
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	0011      	movs	r1, r2
 801a1ae:	0018      	movs	r0, r3
 801a1b0:	f001 faf3 	bl	801b79a <USBD_CtlError>
            ret = USBD_FAIL;
 801a1b4:	2317      	movs	r3, #23
 801a1b6:	18fb      	adds	r3, r7, r3
 801a1b8:	2202      	movs	r2, #2
 801a1ba:	701a      	strb	r2, [r3, #0]
          break;
 801a1bc:	e035      	b.n	801a22a <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801a1be:	687a      	ldr	r2, [r7, #4]
 801a1c0:	23a7      	movs	r3, #167	@ 0xa7
 801a1c2:	009b      	lsls	r3, r3, #2
 801a1c4:	5cd3      	ldrb	r3, [r2, r3]
 801a1c6:	2b03      	cmp	r3, #3
 801a1c8:	d107      	bne.n	801a1da <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801a1ca:	230f      	movs	r3, #15
 801a1cc:	18f9      	adds	r1, r7, r3
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	2201      	movs	r2, #1
 801a1d2:	0018      	movs	r0, r3
 801a1d4:	f001 fb5f 	bl	801b896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801a1d8:	e027      	b.n	801a22a <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 801a1da:	683a      	ldr	r2, [r7, #0]
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	0011      	movs	r1, r2
 801a1e0:	0018      	movs	r0, r3
 801a1e2:	f001 fada 	bl	801b79a <USBD_CtlError>
            ret = USBD_FAIL;
 801a1e6:	2317      	movs	r3, #23
 801a1e8:	18fb      	adds	r3, r7, r3
 801a1ea:	2202      	movs	r2, #2
 801a1ec:	701a      	strb	r2, [r3, #0]
          break;
 801a1ee:	e01c      	b.n	801a22a <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801a1f0:	687a      	ldr	r2, [r7, #4]
 801a1f2:	23a7      	movs	r3, #167	@ 0xa7
 801a1f4:	009b      	lsls	r3, r3, #2
 801a1f6:	5cd3      	ldrb	r3, [r2, r3]
 801a1f8:	2b03      	cmp	r3, #3
 801a1fa:	d015      	beq.n	801a228 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 801a1fc:	683a      	ldr	r2, [r7, #0]
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	0011      	movs	r1, r2
 801a202:	0018      	movs	r0, r3
 801a204:	f001 fac9 	bl	801b79a <USBD_CtlError>
            ret = USBD_FAIL;
 801a208:	2317      	movs	r3, #23
 801a20a:	18fb      	adds	r3, r7, r3
 801a20c:	2202      	movs	r2, #2
 801a20e:	701a      	strb	r2, [r3, #0]
          }
          break;
 801a210:	e00a      	b.n	801a228 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801a212:	683a      	ldr	r2, [r7, #0]
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	0011      	movs	r1, r2
 801a218:	0018      	movs	r0, r3
 801a21a:	f001 fabe 	bl	801b79a <USBD_CtlError>
          ret = USBD_FAIL;
 801a21e:	2317      	movs	r3, #23
 801a220:	18fb      	adds	r3, r7, r3
 801a222:	2202      	movs	r2, #2
 801a224:	701a      	strb	r2, [r3, #0]
          break;
 801a226:	e000      	b.n	801a22a <USBD_CDC_Setup+0x166>
          break;
 801a228:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801a22a:	e00a      	b.n	801a242 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 801a22c:	683a      	ldr	r2, [r7, #0]
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	0011      	movs	r1, r2
 801a232:	0018      	movs	r0, r3
 801a234:	f001 fab1 	bl	801b79a <USBD_CtlError>
      ret = USBD_FAIL;
 801a238:	2317      	movs	r3, #23
 801a23a:	18fb      	adds	r3, r7, r3
 801a23c:	2202      	movs	r2, #2
 801a23e:	701a      	strb	r2, [r3, #0]
      break;
 801a240:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801a242:	2317      	movs	r3, #23
 801a244:	18fb      	adds	r3, r7, r3
 801a246:	781b      	ldrb	r3, [r3, #0]
}
 801a248:	0018      	movs	r0, r3
 801a24a:	46bd      	mov	sp, r7
 801a24c:	b006      	add	sp, #24
 801a24e:	bd80      	pop	{r7, pc}
 801a250:	00000201 	.word	0x00000201

0801a254 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a254:	b580      	push	{r7, lr}
 801a256:	b084      	sub	sp, #16
 801a258:	af00      	add	r7, sp, #0
 801a25a:	6078      	str	r0, [r7, #4]
 801a25c:	000a      	movs	r2, r1
 801a25e:	1cfb      	adds	r3, r7, #3
 801a260:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801a262:	687a      	ldr	r2, [r7, #4]
 801a264:	23ae      	movs	r3, #174	@ 0xae
 801a266:	009b      	lsls	r3, r3, #2
 801a268:	58d3      	ldr	r3, [r2, r3]
 801a26a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801a26c:	687a      	ldr	r2, [r7, #4]
 801a26e:	23b0      	movs	r3, #176	@ 0xb0
 801a270:	009b      	lsls	r3, r3, #2
 801a272:	58d3      	ldr	r3, [r2, r3]
 801a274:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801a276:	687a      	ldr	r2, [r7, #4]
 801a278:	23ae      	movs	r3, #174	@ 0xae
 801a27a:	009b      	lsls	r3, r3, #2
 801a27c:	58d3      	ldr	r3, [r2, r3]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d03e      	beq.n	801a300 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801a282:	1cfb      	adds	r3, r7, #3
 801a284:	781a      	ldrb	r2, [r3, #0]
 801a286:	6879      	ldr	r1, [r7, #4]
 801a288:	0013      	movs	r3, r2
 801a28a:	009b      	lsls	r3, r3, #2
 801a28c:	189b      	adds	r3, r3, r2
 801a28e:	009b      	lsls	r3, r3, #2
 801a290:	18cb      	adds	r3, r1, r3
 801a292:	331c      	adds	r3, #28
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	2b00      	cmp	r3, #0
 801a298:	d02b      	beq.n	801a2f2 <USBD_CDC_DataIn+0x9e>
 801a29a:	1cfb      	adds	r3, r7, #3
 801a29c:	781a      	ldrb	r2, [r3, #0]
 801a29e:	6879      	ldr	r1, [r7, #4]
 801a2a0:	0013      	movs	r3, r2
 801a2a2:	009b      	lsls	r3, r3, #2
 801a2a4:	189b      	adds	r3, r3, r2
 801a2a6:	009b      	lsls	r3, r3, #2
 801a2a8:	18cb      	adds	r3, r1, r3
 801a2aa:	331c      	adds	r3, #28
 801a2ac:	6818      	ldr	r0, [r3, #0]
 801a2ae:	1cfb      	adds	r3, r7, #3
 801a2b0:	781a      	ldrb	r2, [r3, #0]
 801a2b2:	68b9      	ldr	r1, [r7, #8]
 801a2b4:	0013      	movs	r3, r2
 801a2b6:	009b      	lsls	r3, r3, #2
 801a2b8:	189b      	adds	r3, r3, r2
 801a2ba:	00db      	lsls	r3, r3, #3
 801a2bc:	18cb      	adds	r3, r1, r3
 801a2be:	3338      	adds	r3, #56	@ 0x38
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	0019      	movs	r1, r3
 801a2c4:	f7e5 fff4 	bl	80002b0 <__aeabi_uidivmod>
 801a2c8:	1e0b      	subs	r3, r1, #0
 801a2ca:	d112      	bne.n	801a2f2 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801a2cc:	1cfb      	adds	r3, r7, #3
 801a2ce:	781a      	ldrb	r2, [r3, #0]
 801a2d0:	6879      	ldr	r1, [r7, #4]
 801a2d2:	0013      	movs	r3, r2
 801a2d4:	009b      	lsls	r3, r3, #2
 801a2d6:	189b      	adds	r3, r3, r2
 801a2d8:	009b      	lsls	r3, r3, #2
 801a2da:	18cb      	adds	r3, r1, r3
 801a2dc:	331c      	adds	r3, #28
 801a2de:	2200      	movs	r2, #0
 801a2e0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801a2e2:	1cfb      	adds	r3, r7, #3
 801a2e4:	7819      	ldrb	r1, [r3, #0]
 801a2e6:	6878      	ldr	r0, [r7, #4]
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	f002 f82f 	bl	801c34e <USBD_LL_Transmit>
 801a2f0:	e004      	b.n	801a2fc <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 801a2f2:	68fa      	ldr	r2, [r7, #12]
 801a2f4:	2385      	movs	r3, #133	@ 0x85
 801a2f6:	009b      	lsls	r3, r3, #2
 801a2f8:	2100      	movs	r1, #0
 801a2fa:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	e000      	b.n	801a302 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 801a300:	2302      	movs	r3, #2
  }
}
 801a302:	0018      	movs	r0, r3
 801a304:	46bd      	mov	sp, r7
 801a306:	b004      	add	sp, #16
 801a308:	bd80      	pop	{r7, pc}

0801a30a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801a30a:	b580      	push	{r7, lr}
 801a30c:	b084      	sub	sp, #16
 801a30e:	af00      	add	r7, sp, #0
 801a310:	6078      	str	r0, [r7, #4]
 801a312:	000a      	movs	r2, r1
 801a314:	1cfb      	adds	r3, r7, #3
 801a316:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a318:	687a      	ldr	r2, [r7, #4]
 801a31a:	23ae      	movs	r3, #174	@ 0xae
 801a31c:	009b      	lsls	r3, r3, #2
 801a31e:	58d3      	ldr	r3, [r2, r3]
 801a320:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801a322:	1cfb      	adds	r3, r7, #3
 801a324:	781a      	ldrb	r2, [r3, #0]
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	0011      	movs	r1, r2
 801a32a:	0018      	movs	r0, r3
 801a32c:	f002 f87d 	bl	801c42a <USBD_LL_GetRxDataSize>
 801a330:	0001      	movs	r1, r0
 801a332:	68fa      	ldr	r2, [r7, #12]
 801a334:	2383      	movs	r3, #131	@ 0x83
 801a336:	009b      	lsls	r3, r3, #2
 801a338:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801a33a:	687a      	ldr	r2, [r7, #4]
 801a33c:	23ae      	movs	r3, #174	@ 0xae
 801a33e:	009b      	lsls	r3, r3, #2
 801a340:	58d3      	ldr	r3, [r2, r3]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d011      	beq.n	801a36a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801a346:	687a      	ldr	r2, [r7, #4]
 801a348:	23af      	movs	r3, #175	@ 0xaf
 801a34a:	009b      	lsls	r3, r3, #2
 801a34c:	58d3      	ldr	r3, [r2, r3]
 801a34e:	68da      	ldr	r2, [r3, #12]
 801a350:	68f9      	ldr	r1, [r7, #12]
 801a352:	2381      	movs	r3, #129	@ 0x81
 801a354:	009b      	lsls	r3, r3, #2
 801a356:	58c8      	ldr	r0, [r1, r3]
 801a358:	68fb      	ldr	r3, [r7, #12]
 801a35a:	2183      	movs	r1, #131	@ 0x83
 801a35c:	0089      	lsls	r1, r1, #2
 801a35e:	468c      	mov	ip, r1
 801a360:	4463      	add	r3, ip
 801a362:	0019      	movs	r1, r3
 801a364:	4790      	blx	r2

    return USBD_OK;
 801a366:	2300      	movs	r3, #0
 801a368:	e000      	b.n	801a36c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 801a36a:	2302      	movs	r3, #2
  }
}
 801a36c:	0018      	movs	r0, r3
 801a36e:	46bd      	mov	sp, r7
 801a370:	b004      	add	sp, #16
 801a372:	bd80      	pop	{r7, pc}

0801a374 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801a374:	b590      	push	{r4, r7, lr}
 801a376:	b085      	sub	sp, #20
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a37c:	687a      	ldr	r2, [r7, #4]
 801a37e:	23ae      	movs	r3, #174	@ 0xae
 801a380:	009b      	lsls	r3, r3, #2
 801a382:	58d3      	ldr	r3, [r2, r3]
 801a384:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801a386:	687a      	ldr	r2, [r7, #4]
 801a388:	23af      	movs	r3, #175	@ 0xaf
 801a38a:	009b      	lsls	r3, r3, #2
 801a38c:	58d3      	ldr	r3, [r2, r3]
 801a38e:	2b00      	cmp	r3, #0
 801a390:	d018      	beq.n	801a3c4 <USBD_CDC_EP0_RxReady+0x50>
 801a392:	68fa      	ldr	r2, [r7, #12]
 801a394:	2380      	movs	r3, #128	@ 0x80
 801a396:	009b      	lsls	r3, r3, #2
 801a398:	5cd3      	ldrb	r3, [r2, r3]
 801a39a:	2bff      	cmp	r3, #255	@ 0xff
 801a39c:	d012      	beq.n	801a3c4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a39e:	687a      	ldr	r2, [r7, #4]
 801a3a0:	23af      	movs	r3, #175	@ 0xaf
 801a3a2:	009b      	lsls	r3, r3, #2
 801a3a4:	58d3      	ldr	r3, [r2, r3]
 801a3a6:	689b      	ldr	r3, [r3, #8]
 801a3a8:	68f9      	ldr	r1, [r7, #12]
 801a3aa:	2280      	movs	r2, #128	@ 0x80
 801a3ac:	0092      	lsls	r2, r2, #2
 801a3ae:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 801a3b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801a3b2:	68fa      	ldr	r2, [r7, #12]
 801a3b4:	4c06      	ldr	r4, [pc, #24]	@ (801a3d0 <USBD_CDC_EP0_RxReady+0x5c>)
 801a3b6:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801a3b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801a3ba:	68fa      	ldr	r2, [r7, #12]
 801a3bc:	2380      	movs	r3, #128	@ 0x80
 801a3be:	009b      	lsls	r3, r3, #2
 801a3c0:	21ff      	movs	r1, #255	@ 0xff
 801a3c2:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 801a3c4:	2300      	movs	r3, #0
}
 801a3c6:	0018      	movs	r0, r3
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	b005      	add	sp, #20
 801a3cc:	bd90      	pop	{r4, r7, pc}
 801a3ce:	46c0      	nop			@ (mov r8, r8)
 801a3d0:	00000201 	.word	0x00000201

0801a3d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801a3d4:	b580      	push	{r7, lr}
 801a3d6:	b082      	sub	sp, #8
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	2243      	movs	r2, #67	@ 0x43
 801a3e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801a3e2:	4b02      	ldr	r3, [pc, #8]	@ (801a3ec <USBD_CDC_GetFSCfgDesc+0x18>)
}
 801a3e4:	0018      	movs	r0, r3
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	b002      	add	sp, #8
 801a3ea:	bd80      	pop	{r7, pc}
 801a3ec:	20000168 	.word	0x20000168

0801a3f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b082      	sub	sp, #8
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	2243      	movs	r2, #67	@ 0x43
 801a3fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801a3fe:	4b02      	ldr	r3, [pc, #8]	@ (801a408 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 801a400:	0018      	movs	r0, r3
 801a402:	46bd      	mov	sp, r7
 801a404:	b002      	add	sp, #8
 801a406:	bd80      	pop	{r7, pc}
 801a408:	20000124 	.word	0x20000124

0801a40c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801a40c:	b580      	push	{r7, lr}
 801a40e:	b082      	sub	sp, #8
 801a410:	af00      	add	r7, sp, #0
 801a412:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	2243      	movs	r2, #67	@ 0x43
 801a418:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801a41a:	4b02      	ldr	r3, [pc, #8]	@ (801a424 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 801a41c:	0018      	movs	r0, r3
 801a41e:	46bd      	mov	sp, r7
 801a420:	b002      	add	sp, #8
 801a422:	bd80      	pop	{r7, pc}
 801a424:	200001ac 	.word	0x200001ac

0801a428 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b082      	sub	sp, #8
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	220a      	movs	r2, #10
 801a434:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801a436:	4b02      	ldr	r3, [pc, #8]	@ (801a440 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 801a438:	0018      	movs	r0, r3
 801a43a:	46bd      	mov	sp, r7
 801a43c:	b002      	add	sp, #8
 801a43e:	bd80      	pop	{r7, pc}
 801a440:	200000e0 	.word	0x200000e0

0801a444 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b084      	sub	sp, #16
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801a44e:	200f      	movs	r0, #15
 801a450:	183b      	adds	r3, r7, r0
 801a452:	2202      	movs	r2, #2
 801a454:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 801a456:	683b      	ldr	r3, [r7, #0]
 801a458:	2b00      	cmp	r3, #0
 801a45a:	d007      	beq.n	801a46c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 801a45c:	687a      	ldr	r2, [r7, #4]
 801a45e:	23af      	movs	r3, #175	@ 0xaf
 801a460:	009b      	lsls	r3, r3, #2
 801a462:	6839      	ldr	r1, [r7, #0]
 801a464:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 801a466:	183b      	adds	r3, r7, r0
 801a468:	2200      	movs	r2, #0
 801a46a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 801a46c:	230f      	movs	r3, #15
 801a46e:	18fb      	adds	r3, r7, r3
 801a470:	781b      	ldrb	r3, [r3, #0]
}
 801a472:	0018      	movs	r0, r3
 801a474:	46bd      	mov	sp, r7
 801a476:	b004      	add	sp, #16
 801a478:	bd80      	pop	{r7, pc}

0801a47a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801a47a:	b580      	push	{r7, lr}
 801a47c:	b086      	sub	sp, #24
 801a47e:	af00      	add	r7, sp, #0
 801a480:	60f8      	str	r0, [r7, #12]
 801a482:	60b9      	str	r1, [r7, #8]
 801a484:	1dbb      	adds	r3, r7, #6
 801a486:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a488:	68fa      	ldr	r2, [r7, #12]
 801a48a:	23ae      	movs	r3, #174	@ 0xae
 801a48c:	009b      	lsls	r3, r3, #2
 801a48e:	58d3      	ldr	r3, [r2, r3]
 801a490:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801a492:	697a      	ldr	r2, [r7, #20]
 801a494:	2382      	movs	r3, #130	@ 0x82
 801a496:	009b      	lsls	r3, r3, #2
 801a498:	68b9      	ldr	r1, [r7, #8]
 801a49a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 801a49c:	1dbb      	adds	r3, r7, #6
 801a49e:	8819      	ldrh	r1, [r3, #0]
 801a4a0:	697a      	ldr	r2, [r7, #20]
 801a4a2:	2384      	movs	r3, #132	@ 0x84
 801a4a4:	009b      	lsls	r3, r3, #2
 801a4a6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a4a8:	2300      	movs	r3, #0
}
 801a4aa:	0018      	movs	r0, r3
 801a4ac:	46bd      	mov	sp, r7
 801a4ae:	b006      	add	sp, #24
 801a4b0:	bd80      	pop	{r7, pc}

0801a4b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801a4b2:	b580      	push	{r7, lr}
 801a4b4:	b084      	sub	sp, #16
 801a4b6:	af00      	add	r7, sp, #0
 801a4b8:	6078      	str	r0, [r7, #4]
 801a4ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a4bc:	687a      	ldr	r2, [r7, #4]
 801a4be:	23ae      	movs	r3, #174	@ 0xae
 801a4c0:	009b      	lsls	r3, r3, #2
 801a4c2:	58d3      	ldr	r3, [r2, r3]
 801a4c4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801a4c6:	68fa      	ldr	r2, [r7, #12]
 801a4c8:	2381      	movs	r3, #129	@ 0x81
 801a4ca:	009b      	lsls	r3, r3, #2
 801a4cc:	6839      	ldr	r1, [r7, #0]
 801a4ce:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 801a4d0:	2300      	movs	r3, #0
}
 801a4d2:	0018      	movs	r0, r3
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	b004      	add	sp, #16
 801a4d8:	bd80      	pop	{r7, pc}

0801a4da <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801a4da:	b580      	push	{r7, lr}
 801a4dc:	b084      	sub	sp, #16
 801a4de:	af00      	add	r7, sp, #0
 801a4e0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a4e2:	687a      	ldr	r2, [r7, #4]
 801a4e4:	23ae      	movs	r3, #174	@ 0xae
 801a4e6:	009b      	lsls	r3, r3, #2
 801a4e8:	58d3      	ldr	r3, [r2, r3]
 801a4ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801a4ec:	687a      	ldr	r2, [r7, #4]
 801a4ee:	23ae      	movs	r3, #174	@ 0xae
 801a4f0:	009b      	lsls	r3, r3, #2
 801a4f2:	58d3      	ldr	r3, [r2, r3]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d022      	beq.n	801a53e <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 801a4f8:	68fa      	ldr	r2, [r7, #12]
 801a4fa:	2385      	movs	r3, #133	@ 0x85
 801a4fc:	009b      	lsls	r3, r3, #2
 801a4fe:	58d3      	ldr	r3, [r2, r3]
 801a500:	2b00      	cmp	r3, #0
 801a502:	d11a      	bne.n	801a53a <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801a504:	68fa      	ldr	r2, [r7, #12]
 801a506:	2385      	movs	r3, #133	@ 0x85
 801a508:	009b      	lsls	r3, r3, #2
 801a50a:	2101      	movs	r1, #1
 801a50c:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801a50e:	68fa      	ldr	r2, [r7, #12]
 801a510:	2384      	movs	r3, #132	@ 0x84
 801a512:	009b      	lsls	r3, r3, #2
 801a514:	58d2      	ldr	r2, [r2, r3]
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801a51a:	68fa      	ldr	r2, [r7, #12]
 801a51c:	2382      	movs	r3, #130	@ 0x82
 801a51e:	009b      	lsls	r3, r3, #2
 801a520:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 801a522:	68fa      	ldr	r2, [r7, #12]
 801a524:	2384      	movs	r3, #132	@ 0x84
 801a526:	009b      	lsls	r3, r3, #2
 801a528:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801a52a:	b29b      	uxth	r3, r3
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	000a      	movs	r2, r1
 801a530:	2181      	movs	r1, #129	@ 0x81
 801a532:	f001 ff0c 	bl	801c34e <USBD_LL_Transmit>

      return USBD_OK;
 801a536:	2300      	movs	r3, #0
 801a538:	e002      	b.n	801a540 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 801a53a:	2301      	movs	r3, #1
 801a53c:	e000      	b.n	801a540 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 801a53e:	2302      	movs	r3, #2
  }
}
 801a540:	0018      	movs	r0, r3
 801a542:	46bd      	mov	sp, r7
 801a544:	b004      	add	sp, #16
 801a546:	bd80      	pop	{r7, pc}

0801a548 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801a548:	b580      	push	{r7, lr}
 801a54a:	b084      	sub	sp, #16
 801a54c:	af00      	add	r7, sp, #0
 801a54e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801a550:	687a      	ldr	r2, [r7, #4]
 801a552:	23ae      	movs	r3, #174	@ 0xae
 801a554:	009b      	lsls	r3, r3, #2
 801a556:	58d3      	ldr	r3, [r2, r3]
 801a558:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801a55a:	687a      	ldr	r2, [r7, #4]
 801a55c:	23ae      	movs	r3, #174	@ 0xae
 801a55e:	009b      	lsls	r3, r3, #2
 801a560:	58d3      	ldr	r3, [r2, r3]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d019      	beq.n	801a59a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	7c1b      	ldrb	r3, [r3, #16]
 801a56a:	2b00      	cmp	r3, #0
 801a56c:	d10a      	bne.n	801a584 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801a56e:	68fa      	ldr	r2, [r7, #12]
 801a570:	2381      	movs	r3, #129	@ 0x81
 801a572:	009b      	lsls	r3, r3, #2
 801a574:	58d2      	ldr	r2, [r2, r3]
 801a576:	2380      	movs	r3, #128	@ 0x80
 801a578:	009b      	lsls	r3, r3, #2
 801a57a:	6878      	ldr	r0, [r7, #4]
 801a57c:	2101      	movs	r1, #1
 801a57e:	f001 ff1d 	bl	801c3bc <USBD_LL_PrepareReceive>
 801a582:	e008      	b.n	801a596 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801a584:	68fa      	ldr	r2, [r7, #12]
 801a586:	2381      	movs	r3, #129	@ 0x81
 801a588:	009b      	lsls	r3, r3, #2
 801a58a:	58d2      	ldr	r2, [r2, r3]
 801a58c:	6878      	ldr	r0, [r7, #4]
 801a58e:	2340      	movs	r3, #64	@ 0x40
 801a590:	2101      	movs	r1, #1
 801a592:	f001 ff13 	bl	801c3bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801a596:	2300      	movs	r3, #0
 801a598:	e000      	b.n	801a59c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 801a59a:	2302      	movs	r3, #2
  }
}
 801a59c:	0018      	movs	r0, r3
 801a59e:	46bd      	mov	sp, r7
 801a5a0:	b004      	add	sp, #16
 801a5a2:	bd80      	pop	{r7, pc}

0801a5a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801a5a4:	b580      	push	{r7, lr}
 801a5a6:	b084      	sub	sp, #16
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	60f8      	str	r0, [r7, #12]
 801a5ac:	60b9      	str	r1, [r7, #8]
 801a5ae:	1dfb      	adds	r3, r7, #7
 801a5b0:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d101      	bne.n	801a5bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801a5b8:	2302      	movs	r3, #2
 801a5ba:	e020      	b.n	801a5fe <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801a5bc:	68fa      	ldr	r2, [r7, #12]
 801a5be:	23ad      	movs	r3, #173	@ 0xad
 801a5c0:	009b      	lsls	r3, r3, #2
 801a5c2:	58d3      	ldr	r3, [r2, r3]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d004      	beq.n	801a5d2 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 801a5c8:	68fa      	ldr	r2, [r7, #12]
 801a5ca:	23ad      	movs	r3, #173	@ 0xad
 801a5cc:	009b      	lsls	r3, r3, #2
 801a5ce:	2100      	movs	r1, #0
 801a5d0:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801a5d2:	68bb      	ldr	r3, [r7, #8]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d004      	beq.n	801a5e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801a5d8:	68fa      	ldr	r2, [r7, #12]
 801a5da:	23ac      	movs	r3, #172	@ 0xac
 801a5dc:	009b      	lsls	r3, r3, #2
 801a5de:	68b9      	ldr	r1, [r7, #8]
 801a5e0:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801a5e2:	68fa      	ldr	r2, [r7, #12]
 801a5e4:	23a7      	movs	r3, #167	@ 0xa7
 801a5e6:	009b      	lsls	r3, r3, #2
 801a5e8:	2101      	movs	r1, #1
 801a5ea:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	1dfa      	adds	r2, r7, #7
 801a5f0:	7812      	ldrb	r2, [r2, #0]
 801a5f2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	0018      	movs	r0, r3
 801a5f8:	f001 fd0c 	bl	801c014 <USBD_LL_Init>

  return USBD_OK;
 801a5fc:	2300      	movs	r3, #0
}
 801a5fe:	0018      	movs	r0, r3
 801a600:	46bd      	mov	sp, r7
 801a602:	b004      	add	sp, #16
 801a604:	bd80      	pop	{r7, pc}

0801a606 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801a606:	b580      	push	{r7, lr}
 801a608:	b084      	sub	sp, #16
 801a60a:	af00      	add	r7, sp, #0
 801a60c:	6078      	str	r0, [r7, #4]
 801a60e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801a610:	200f      	movs	r0, #15
 801a612:	183b      	adds	r3, r7, r0
 801a614:	2200      	movs	r2, #0
 801a616:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 801a618:	683b      	ldr	r3, [r7, #0]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d008      	beq.n	801a630 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801a61e:	687a      	ldr	r2, [r7, #4]
 801a620:	23ad      	movs	r3, #173	@ 0xad
 801a622:	009b      	lsls	r3, r3, #2
 801a624:	6839      	ldr	r1, [r7, #0]
 801a626:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 801a628:	183b      	adds	r3, r7, r0
 801a62a:	2200      	movs	r2, #0
 801a62c:	701a      	strb	r2, [r3, #0]
 801a62e:	e003      	b.n	801a638 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801a630:	230f      	movs	r3, #15
 801a632:	18fb      	adds	r3, r7, r3
 801a634:	2202      	movs	r2, #2
 801a636:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801a638:	230f      	movs	r3, #15
 801a63a:	18fb      	adds	r3, r7, r3
 801a63c:	781b      	ldrb	r3, [r3, #0]
}
 801a63e:	0018      	movs	r0, r3
 801a640:	46bd      	mov	sp, r7
 801a642:	b004      	add	sp, #16
 801a644:	bd80      	pop	{r7, pc}

0801a646 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801a646:	b580      	push	{r7, lr}
 801a648:	b082      	sub	sp, #8
 801a64a:	af00      	add	r7, sp, #0
 801a64c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	0018      	movs	r0, r3
 801a652:	f001 fd43 	bl	801c0dc <USBD_LL_Start>

  return USBD_OK;
 801a656:	2300      	movs	r3, #0
}
 801a658:	0018      	movs	r0, r3
 801a65a:	46bd      	mov	sp, r7
 801a65c:	b002      	add	sp, #8
 801a65e:	bd80      	pop	{r7, pc}

0801a660 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b082      	sub	sp, #8
 801a664:	af00      	add	r7, sp, #0
 801a666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801a668:	2300      	movs	r3, #0
}
 801a66a:	0018      	movs	r0, r3
 801a66c:	46bd      	mov	sp, r7
 801a66e:	b002      	add	sp, #8
 801a670:	bd80      	pop	{r7, pc}

0801a672 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801a672:	b590      	push	{r4, r7, lr}
 801a674:	b085      	sub	sp, #20
 801a676:	af00      	add	r7, sp, #0
 801a678:	6078      	str	r0, [r7, #4]
 801a67a:	000a      	movs	r2, r1
 801a67c:	1cfb      	adds	r3, r7, #3
 801a67e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801a680:	240f      	movs	r4, #15
 801a682:	193b      	adds	r3, r7, r4
 801a684:	2202      	movs	r2, #2
 801a686:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 801a688:	687a      	ldr	r2, [r7, #4]
 801a68a:	23ad      	movs	r3, #173	@ 0xad
 801a68c:	009b      	lsls	r3, r3, #2
 801a68e:	58d3      	ldr	r3, [r2, r3]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d00e      	beq.n	801a6b2 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801a694:	687a      	ldr	r2, [r7, #4]
 801a696:	23ad      	movs	r3, #173	@ 0xad
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	58d3      	ldr	r3, [r2, r3]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	1cfa      	adds	r2, r7, #3
 801a6a0:	7811      	ldrb	r1, [r2, #0]
 801a6a2:	687a      	ldr	r2, [r7, #4]
 801a6a4:	0010      	movs	r0, r2
 801a6a6:	4798      	blx	r3
 801a6a8:	1e03      	subs	r3, r0, #0
 801a6aa:	d102      	bne.n	801a6b2 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 801a6ac:	193b      	adds	r3, r7, r4
 801a6ae:	2200      	movs	r2, #0
 801a6b0:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 801a6b2:	230f      	movs	r3, #15
 801a6b4:	18fb      	adds	r3, r7, r3
 801a6b6:	781b      	ldrb	r3, [r3, #0]
}
 801a6b8:	0018      	movs	r0, r3
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	b005      	add	sp, #20
 801a6be:	bd90      	pop	{r4, r7, pc}

0801a6c0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b082      	sub	sp, #8
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
 801a6c8:	000a      	movs	r2, r1
 801a6ca:	1cfb      	adds	r3, r7, #3
 801a6cc:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801a6ce:	687a      	ldr	r2, [r7, #4]
 801a6d0:	23ad      	movs	r3, #173	@ 0xad
 801a6d2:	009b      	lsls	r3, r3, #2
 801a6d4:	58d3      	ldr	r3, [r2, r3]
 801a6d6:	685b      	ldr	r3, [r3, #4]
 801a6d8:	1cfa      	adds	r2, r7, #3
 801a6da:	7811      	ldrb	r1, [r2, #0]
 801a6dc:	687a      	ldr	r2, [r7, #4]
 801a6de:	0010      	movs	r0, r2
 801a6e0:	4798      	blx	r3

  return USBD_OK;
 801a6e2:	2300      	movs	r3, #0
}
 801a6e4:	0018      	movs	r0, r3
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	b002      	add	sp, #8
 801a6ea:	bd80      	pop	{r7, pc}

0801a6ec <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b082      	sub	sp, #8
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
 801a6f4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	22aa      	movs	r2, #170	@ 0xaa
 801a6fa:	0092      	lsls	r2, r2, #2
 801a6fc:	4694      	mov	ip, r2
 801a6fe:	4463      	add	r3, ip
 801a700:	683a      	ldr	r2, [r7, #0]
 801a702:	0011      	movs	r1, r2
 801a704:	0018      	movs	r0, r3
 801a706:	f001 f810 	bl	801b72a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801a70a:	687a      	ldr	r2, [r7, #4]
 801a70c:	23a5      	movs	r3, #165	@ 0xa5
 801a70e:	009b      	lsls	r3, r3, #2
 801a710:	2101      	movs	r1, #1
 801a712:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	4a23      	ldr	r2, [pc, #140]	@ (801a7a4 <USBD_LL_SetupStage+0xb8>)
 801a718:	5a9b      	ldrh	r3, [r3, r2]
 801a71a:	0019      	movs	r1, r3
 801a71c:	687a      	ldr	r2, [r7, #4]
 801a71e:	23a6      	movs	r3, #166	@ 0xa6
 801a720:	009b      	lsls	r3, r3, #2
 801a722:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 801a724:	687a      	ldr	r2, [r7, #4]
 801a726:	23aa      	movs	r3, #170	@ 0xaa
 801a728:	009b      	lsls	r3, r3, #2
 801a72a:	5cd3      	ldrb	r3, [r2, r3]
 801a72c:	001a      	movs	r2, r3
 801a72e:	231f      	movs	r3, #31
 801a730:	4013      	ands	r3, r2
 801a732:	2b02      	cmp	r3, #2
 801a734:	d019      	beq.n	801a76a <USBD_LL_SetupStage+0x7e>
 801a736:	d822      	bhi.n	801a77e <USBD_LL_SetupStage+0x92>
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d002      	beq.n	801a742 <USBD_LL_SetupStage+0x56>
 801a73c:	2b01      	cmp	r3, #1
 801a73e:	d00a      	beq.n	801a756 <USBD_LL_SetupStage+0x6a>
 801a740:	e01d      	b.n	801a77e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	22aa      	movs	r2, #170	@ 0xaa
 801a746:	0092      	lsls	r2, r2, #2
 801a748:	189a      	adds	r2, r3, r2
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	0011      	movs	r1, r2
 801a74e:	0018      	movs	r0, r3
 801a750:	f000 fa10 	bl	801ab74 <USBD_StdDevReq>
      break;
 801a754:	e020      	b.n	801a798 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	22aa      	movs	r2, #170	@ 0xaa
 801a75a:	0092      	lsls	r2, r2, #2
 801a75c:	189a      	adds	r2, r3, r2
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	0011      	movs	r1, r2
 801a762:	0018      	movs	r0, r3
 801a764:	f000 fa78 	bl	801ac58 <USBD_StdItfReq>
      break;
 801a768:	e016      	b.n	801a798 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	22aa      	movs	r2, #170	@ 0xaa
 801a76e:	0092      	lsls	r2, r2, #2
 801a770:	189a      	adds	r2, r3, r2
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	0011      	movs	r1, r2
 801a776:	0018      	movs	r0, r3
 801a778:	f000 fac5 	bl	801ad06 <USBD_StdEPReq>
      break;
 801a77c:	e00c      	b.n	801a798 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801a77e:	687a      	ldr	r2, [r7, #4]
 801a780:	23aa      	movs	r3, #170	@ 0xaa
 801a782:	009b      	lsls	r3, r3, #2
 801a784:	5cd3      	ldrb	r3, [r2, r3]
 801a786:	227f      	movs	r2, #127	@ 0x7f
 801a788:	4393      	bics	r3, r2
 801a78a:	b2da      	uxtb	r2, r3
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	0011      	movs	r1, r2
 801a790:	0018      	movs	r0, r3
 801a792:	f001 fd2a 	bl	801c1ea <USBD_LL_StallEP>
      break;
 801a796:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801a798:	2300      	movs	r3, #0
}
 801a79a:	0018      	movs	r0, r3
 801a79c:	46bd      	mov	sp, r7
 801a79e:	b002      	add	sp, #8
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	46c0      	nop			@ (mov r8, r8)
 801a7a4:	000002ae 	.word	0x000002ae

0801a7a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b086      	sub	sp, #24
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	60f8      	str	r0, [r7, #12]
 801a7b0:	607a      	str	r2, [r7, #4]
 801a7b2:	200b      	movs	r0, #11
 801a7b4:	183b      	adds	r3, r7, r0
 801a7b6:	1c0a      	adds	r2, r1, #0
 801a7b8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801a7ba:	183b      	adds	r3, r7, r0
 801a7bc:	781b      	ldrb	r3, [r3, #0]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d154      	bne.n	801a86c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	3355      	adds	r3, #85	@ 0x55
 801a7c6:	33ff      	adds	r3, #255	@ 0xff
 801a7c8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801a7ca:	68fa      	ldr	r2, [r7, #12]
 801a7cc:	23a5      	movs	r3, #165	@ 0xa5
 801a7ce:	009b      	lsls	r3, r3, #2
 801a7d0:	58d3      	ldr	r3, [r2, r3]
 801a7d2:	2b03      	cmp	r3, #3
 801a7d4:	d139      	bne.n	801a84a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 801a7d6:	697b      	ldr	r3, [r7, #20]
 801a7d8:	68da      	ldr	r2, [r3, #12]
 801a7da:	697b      	ldr	r3, [r7, #20]
 801a7dc:	691b      	ldr	r3, [r3, #16]
 801a7de:	429a      	cmp	r2, r3
 801a7e0:	d919      	bls.n	801a816 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801a7e2:	697b      	ldr	r3, [r7, #20]
 801a7e4:	68da      	ldr	r2, [r3, #12]
 801a7e6:	697b      	ldr	r3, [r7, #20]
 801a7e8:	691b      	ldr	r3, [r3, #16]
 801a7ea:	1ad2      	subs	r2, r2, r3
 801a7ec:	697b      	ldr	r3, [r7, #20]
 801a7ee:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801a7f0:	697b      	ldr	r3, [r7, #20]
 801a7f2:	68da      	ldr	r2, [r3, #12]
 801a7f4:	697b      	ldr	r3, [r7, #20]
 801a7f6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d203      	bcs.n	801a804 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801a7fc:	697b      	ldr	r3, [r7, #20]
 801a7fe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801a800:	b29b      	uxth	r3, r3
 801a802:	e002      	b.n	801a80a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801a804:	697b      	ldr	r3, [r7, #20]
 801a806:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801a808:	b29b      	uxth	r3, r3
 801a80a:	6879      	ldr	r1, [r7, #4]
 801a80c:	68f8      	ldr	r0, [r7, #12]
 801a80e:	001a      	movs	r2, r3
 801a810:	f001 f898 	bl	801b944 <USBD_CtlContinueRx>
 801a814:	e045      	b.n	801a8a2 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801a816:	68fa      	ldr	r2, [r7, #12]
 801a818:	23ad      	movs	r3, #173	@ 0xad
 801a81a:	009b      	lsls	r3, r3, #2
 801a81c:	58d3      	ldr	r3, [r2, r3]
 801a81e:	691b      	ldr	r3, [r3, #16]
 801a820:	2b00      	cmp	r3, #0
 801a822:	d00d      	beq.n	801a840 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a824:	68fa      	ldr	r2, [r7, #12]
 801a826:	23a7      	movs	r3, #167	@ 0xa7
 801a828:	009b      	lsls	r3, r3, #2
 801a82a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801a82c:	2b03      	cmp	r3, #3
 801a82e:	d107      	bne.n	801a840 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801a830:	68fa      	ldr	r2, [r7, #12]
 801a832:	23ad      	movs	r3, #173	@ 0xad
 801a834:	009b      	lsls	r3, r3, #2
 801a836:	58d3      	ldr	r3, [r2, r3]
 801a838:	691b      	ldr	r3, [r3, #16]
 801a83a:	68fa      	ldr	r2, [r7, #12]
 801a83c:	0010      	movs	r0, r2
 801a83e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	0018      	movs	r0, r3
 801a844:	f001 f891 	bl	801b96a <USBD_CtlSendStatus>
 801a848:	e02b      	b.n	801a8a2 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801a84a:	68fa      	ldr	r2, [r7, #12]
 801a84c:	23a5      	movs	r3, #165	@ 0xa5
 801a84e:	009b      	lsls	r3, r3, #2
 801a850:	58d3      	ldr	r3, [r2, r3]
 801a852:	2b05      	cmp	r3, #5
 801a854:	d125      	bne.n	801a8a2 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801a856:	68fa      	ldr	r2, [r7, #12]
 801a858:	23a5      	movs	r3, #165	@ 0xa5
 801a85a:	009b      	lsls	r3, r3, #2
 801a85c:	2100      	movs	r1, #0
 801a85e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	2100      	movs	r1, #0
 801a864:	0018      	movs	r0, r3
 801a866:	f001 fcc0 	bl	801c1ea <USBD_LL_StallEP>
 801a86a:	e01a      	b.n	801a8a2 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801a86c:	68fa      	ldr	r2, [r7, #12]
 801a86e:	23ad      	movs	r3, #173	@ 0xad
 801a870:	009b      	lsls	r3, r3, #2
 801a872:	58d3      	ldr	r3, [r2, r3]
 801a874:	699b      	ldr	r3, [r3, #24]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d011      	beq.n	801a89e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a87a:	68fa      	ldr	r2, [r7, #12]
 801a87c:	23a7      	movs	r3, #167	@ 0xa7
 801a87e:	009b      	lsls	r3, r3, #2
 801a880:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 801a882:	2b03      	cmp	r3, #3
 801a884:	d10b      	bne.n	801a89e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801a886:	68fa      	ldr	r2, [r7, #12]
 801a888:	23ad      	movs	r3, #173	@ 0xad
 801a88a:	009b      	lsls	r3, r3, #2
 801a88c:	58d3      	ldr	r3, [r2, r3]
 801a88e:	699b      	ldr	r3, [r3, #24]
 801a890:	220b      	movs	r2, #11
 801a892:	18ba      	adds	r2, r7, r2
 801a894:	7811      	ldrb	r1, [r2, #0]
 801a896:	68fa      	ldr	r2, [r7, #12]
 801a898:	0010      	movs	r0, r2
 801a89a:	4798      	blx	r3
 801a89c:	e001      	b.n	801a8a2 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801a89e:	2302      	movs	r3, #2
 801a8a0:	e000      	b.n	801a8a4 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 801a8a2:	2300      	movs	r3, #0
}
 801a8a4:	0018      	movs	r0, r3
 801a8a6:	46bd      	mov	sp, r7
 801a8a8:	b006      	add	sp, #24
 801a8aa:	bd80      	pop	{r7, pc}

0801a8ac <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801a8ac:	b580      	push	{r7, lr}
 801a8ae:	b086      	sub	sp, #24
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	60f8      	str	r0, [r7, #12]
 801a8b4:	607a      	str	r2, [r7, #4]
 801a8b6:	200b      	movs	r0, #11
 801a8b8:	183b      	adds	r3, r7, r0
 801a8ba:	1c0a      	adds	r2, r1, #0
 801a8bc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801a8be:	183b      	adds	r3, r7, r0
 801a8c0:	781b      	ldrb	r3, [r3, #0]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d000      	beq.n	801a8c8 <USBD_LL_DataInStage+0x1c>
 801a8c6:	e08e      	b.n	801a9e6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	3314      	adds	r3, #20
 801a8cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801a8ce:	68fa      	ldr	r2, [r7, #12]
 801a8d0:	23a5      	movs	r3, #165	@ 0xa5
 801a8d2:	009b      	lsls	r3, r3, #2
 801a8d4:	58d3      	ldr	r3, [r2, r3]
 801a8d6:	2b02      	cmp	r3, #2
 801a8d8:	d164      	bne.n	801a9a4 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 801a8da:	697b      	ldr	r3, [r7, #20]
 801a8dc:	68da      	ldr	r2, [r3, #12]
 801a8de:	697b      	ldr	r3, [r7, #20]
 801a8e0:	691b      	ldr	r3, [r3, #16]
 801a8e2:	429a      	cmp	r2, r3
 801a8e4:	d915      	bls.n	801a912 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801a8e6:	697b      	ldr	r3, [r7, #20]
 801a8e8:	68da      	ldr	r2, [r3, #12]
 801a8ea:	697b      	ldr	r3, [r7, #20]
 801a8ec:	691b      	ldr	r3, [r3, #16]
 801a8ee:	1ad2      	subs	r2, r2, r3
 801a8f0:	697b      	ldr	r3, [r7, #20]
 801a8f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801a8f4:	697b      	ldr	r3, [r7, #20]
 801a8f6:	68db      	ldr	r3, [r3, #12]
 801a8f8:	b29a      	uxth	r2, r3
 801a8fa:	6879      	ldr	r1, [r7, #4]
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	0018      	movs	r0, r3
 801a900:	f000 ffe9 	bl	801b8d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a904:	68f8      	ldr	r0, [r7, #12]
 801a906:	2300      	movs	r3, #0
 801a908:	2200      	movs	r2, #0
 801a90a:	2100      	movs	r1, #0
 801a90c:	f001 fd56 	bl	801c3bc <USBD_LL_PrepareReceive>
 801a910:	e059      	b.n	801a9c6 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a912:	697b      	ldr	r3, [r7, #20]
 801a914:	689a      	ldr	r2, [r3, #8]
 801a916:	697b      	ldr	r3, [r7, #20]
 801a918:	691b      	ldr	r3, [r3, #16]
 801a91a:	0019      	movs	r1, r3
 801a91c:	0010      	movs	r0, r2
 801a91e:	f7e5 fcc7 	bl	80002b0 <__aeabi_uidivmod>
 801a922:	1e0b      	subs	r3, r1, #0
 801a924:	d11f      	bne.n	801a966 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801a926:	697b      	ldr	r3, [r7, #20]
 801a928:	689a      	ldr	r2, [r3, #8]
 801a92a:	697b      	ldr	r3, [r7, #20]
 801a92c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801a92e:	429a      	cmp	r2, r3
 801a930:	d319      	bcc.n	801a966 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801a932:	697b      	ldr	r3, [r7, #20]
 801a934:	689a      	ldr	r2, [r3, #8]
 801a936:	68f9      	ldr	r1, [r7, #12]
 801a938:	23a6      	movs	r3, #166	@ 0xa6
 801a93a:	009b      	lsls	r3, r3, #2
 801a93c:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801a93e:	429a      	cmp	r2, r3
 801a940:	d211      	bcs.n	801a966 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	2200      	movs	r2, #0
 801a946:	2100      	movs	r1, #0
 801a948:	0018      	movs	r0, r3
 801a94a:	f000 ffc4 	bl	801b8d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801a94e:	68fa      	ldr	r2, [r7, #12]
 801a950:	23a6      	movs	r3, #166	@ 0xa6
 801a952:	009b      	lsls	r3, r3, #2
 801a954:	2100      	movs	r1, #0
 801a956:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801a958:	68f8      	ldr	r0, [r7, #12]
 801a95a:	2300      	movs	r3, #0
 801a95c:	2200      	movs	r2, #0
 801a95e:	2100      	movs	r1, #0
 801a960:	f001 fd2c 	bl	801c3bc <USBD_LL_PrepareReceive>
 801a964:	e02f      	b.n	801a9c6 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a966:	68fa      	ldr	r2, [r7, #12]
 801a968:	23ad      	movs	r3, #173	@ 0xad
 801a96a:	009b      	lsls	r3, r3, #2
 801a96c:	58d3      	ldr	r3, [r2, r3]
 801a96e:	68db      	ldr	r3, [r3, #12]
 801a970:	2b00      	cmp	r3, #0
 801a972:	d00d      	beq.n	801a990 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a974:	68fa      	ldr	r2, [r7, #12]
 801a976:	23a7      	movs	r3, #167	@ 0xa7
 801a978:	009b      	lsls	r3, r3, #2
 801a97a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801a97c:	2b03      	cmp	r3, #3
 801a97e:	d107      	bne.n	801a990 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801a980:	68fa      	ldr	r2, [r7, #12]
 801a982:	23ad      	movs	r3, #173	@ 0xad
 801a984:	009b      	lsls	r3, r3, #2
 801a986:	58d3      	ldr	r3, [r2, r3]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	68fa      	ldr	r2, [r7, #12]
 801a98c:	0010      	movs	r0, r2
 801a98e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	2180      	movs	r1, #128	@ 0x80
 801a994:	0018      	movs	r0, r3
 801a996:	f001 fc28 	bl	801c1ea <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	0018      	movs	r0, r3
 801a99e:	f000 fff8 	bl	801b992 <USBD_CtlReceiveStatus>
 801a9a2:	e010      	b.n	801a9c6 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a9a4:	68fa      	ldr	r2, [r7, #12]
 801a9a6:	23a5      	movs	r3, #165	@ 0xa5
 801a9a8:	009b      	lsls	r3, r3, #2
 801a9aa:	58d3      	ldr	r3, [r2, r3]
 801a9ac:	2b04      	cmp	r3, #4
 801a9ae:	d005      	beq.n	801a9bc <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801a9b0:	68fa      	ldr	r2, [r7, #12]
 801a9b2:	23a5      	movs	r3, #165	@ 0xa5
 801a9b4:	009b      	lsls	r3, r3, #2
 801a9b6:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d104      	bne.n	801a9c6 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801a9bc:	68fb      	ldr	r3, [r7, #12]
 801a9be:	2180      	movs	r1, #128	@ 0x80
 801a9c0:	0018      	movs	r0, r3
 801a9c2:	f001 fc12 	bl	801c1ea <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801a9c6:	68fa      	ldr	r2, [r7, #12]
 801a9c8:	23a8      	movs	r3, #168	@ 0xa8
 801a9ca:	009b      	lsls	r3, r3, #2
 801a9cc:	5cd3      	ldrb	r3, [r2, r3]
 801a9ce:	2b01      	cmp	r3, #1
 801a9d0:	d124      	bne.n	801aa1c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	0018      	movs	r0, r3
 801a9d6:	f7ff fe43 	bl	801a660 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801a9da:	68fa      	ldr	r2, [r7, #12]
 801a9dc:	23a8      	movs	r3, #168	@ 0xa8
 801a9de:	009b      	lsls	r3, r3, #2
 801a9e0:	2100      	movs	r1, #0
 801a9e2:	54d1      	strb	r1, [r2, r3]
 801a9e4:	e01a      	b.n	801aa1c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801a9e6:	68fa      	ldr	r2, [r7, #12]
 801a9e8:	23ad      	movs	r3, #173	@ 0xad
 801a9ea:	009b      	lsls	r3, r3, #2
 801a9ec:	58d3      	ldr	r3, [r2, r3]
 801a9ee:	695b      	ldr	r3, [r3, #20]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d011      	beq.n	801aa18 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801a9f4:	68fa      	ldr	r2, [r7, #12]
 801a9f6:	23a7      	movs	r3, #167	@ 0xa7
 801a9f8:	009b      	lsls	r3, r3, #2
 801a9fa:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 801a9fc:	2b03      	cmp	r3, #3
 801a9fe:	d10b      	bne.n	801aa18 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801aa00:	68fa      	ldr	r2, [r7, #12]
 801aa02:	23ad      	movs	r3, #173	@ 0xad
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	58d3      	ldr	r3, [r2, r3]
 801aa08:	695b      	ldr	r3, [r3, #20]
 801aa0a:	220b      	movs	r2, #11
 801aa0c:	18ba      	adds	r2, r7, r2
 801aa0e:	7811      	ldrb	r1, [r2, #0]
 801aa10:	68fa      	ldr	r2, [r7, #12]
 801aa12:	0010      	movs	r0, r2
 801aa14:	4798      	blx	r3
 801aa16:	e001      	b.n	801aa1c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801aa18:	2302      	movs	r3, #2
 801aa1a:	e000      	b.n	801aa1e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 801aa1c:	2300      	movs	r3, #0
}
 801aa1e:	0018      	movs	r0, r3
 801aa20:	46bd      	mov	sp, r7
 801aa22:	b006      	add	sp, #24
 801aa24:	bd80      	pop	{r7, pc}

0801aa26 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801aa26:	b580      	push	{r7, lr}
 801aa28:	b082      	sub	sp, #8
 801aa2a:	af00      	add	r7, sp, #0
 801aa2c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801aa2e:	6878      	ldr	r0, [r7, #4]
 801aa30:	2340      	movs	r3, #64	@ 0x40
 801aa32:	2200      	movs	r2, #0
 801aa34:	2100      	movs	r1, #0
 801aa36:	f001 fb76 	bl	801c126 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801aa3a:	687a      	ldr	r2, [r7, #4]
 801aa3c:	23ac      	movs	r3, #172	@ 0xac
 801aa3e:	005b      	lsls	r3, r3, #1
 801aa40:	2101      	movs	r1, #1
 801aa42:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801aa44:	687a      	ldr	r2, [r7, #4]
 801aa46:	23b2      	movs	r3, #178	@ 0xb2
 801aa48:	005b      	lsls	r3, r3, #1
 801aa4a:	2140      	movs	r1, #64	@ 0x40
 801aa4c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801aa4e:	6878      	ldr	r0, [r7, #4]
 801aa50:	2340      	movs	r3, #64	@ 0x40
 801aa52:	2200      	movs	r2, #0
 801aa54:	2180      	movs	r1, #128	@ 0x80
 801aa56:	f001 fb66 	bl	801c126 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	2201      	movs	r2, #1
 801aa5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	2240      	movs	r2, #64	@ 0x40
 801aa64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801aa66:	687a      	ldr	r2, [r7, #4]
 801aa68:	23a7      	movs	r3, #167	@ 0xa7
 801aa6a:	009b      	lsls	r3, r3, #2
 801aa6c:	2101      	movs	r1, #1
 801aa6e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 801aa70:	687a      	ldr	r2, [r7, #4]
 801aa72:	23a5      	movs	r3, #165	@ 0xa5
 801aa74:	009b      	lsls	r3, r3, #2
 801aa76:	2100      	movs	r1, #0
 801aa78:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801aa80:	687a      	ldr	r2, [r7, #4]
 801aa82:	23a9      	movs	r3, #169	@ 0xa9
 801aa84:	009b      	lsls	r3, r3, #2
 801aa86:	2100      	movs	r1, #0
 801aa88:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 801aa8a:	687a      	ldr	r2, [r7, #4]
 801aa8c:	23ae      	movs	r3, #174	@ 0xae
 801aa8e:	009b      	lsls	r3, r3, #2
 801aa90:	58d3      	ldr	r3, [r2, r3]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d00a      	beq.n	801aaac <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801aa96:	687a      	ldr	r2, [r7, #4]
 801aa98:	23ad      	movs	r3, #173	@ 0xad
 801aa9a:	009b      	lsls	r3, r3, #2
 801aa9c:	58d3      	ldr	r3, [r2, r3]
 801aa9e:	685a      	ldr	r2, [r3, #4]
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	685b      	ldr	r3, [r3, #4]
 801aaa4:	b2d9      	uxtb	r1, r3
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	0018      	movs	r0, r3
 801aaaa:	4790      	blx	r2
  }

  return USBD_OK;
 801aaac:	2300      	movs	r3, #0
}
 801aaae:	0018      	movs	r0, r3
 801aab0:	46bd      	mov	sp, r7
 801aab2:	b002      	add	sp, #8
 801aab4:	bd80      	pop	{r7, pc}

0801aab6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801aab6:	b580      	push	{r7, lr}
 801aab8:	b082      	sub	sp, #8
 801aaba:	af00      	add	r7, sp, #0
 801aabc:	6078      	str	r0, [r7, #4]
 801aabe:	000a      	movs	r2, r1
 801aac0:	1cfb      	adds	r3, r7, #3
 801aac2:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	1cfa      	adds	r2, r7, #3
 801aac8:	7812      	ldrb	r2, [r2, #0]
 801aaca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801aacc:	2300      	movs	r3, #0
}
 801aace:	0018      	movs	r0, r3
 801aad0:	46bd      	mov	sp, r7
 801aad2:	b002      	add	sp, #8
 801aad4:	bd80      	pop	{r7, pc}
	...

0801aad8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b082      	sub	sp, #8
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801aae0:	687a      	ldr	r2, [r7, #4]
 801aae2:	23a7      	movs	r3, #167	@ 0xa7
 801aae4:	009b      	lsls	r3, r3, #2
 801aae6:	5cd1      	ldrb	r1, [r2, r3]
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	4a06      	ldr	r2, [pc, #24]	@ (801ab04 <USBD_LL_Suspend+0x2c>)
 801aaec:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801aaee:	687a      	ldr	r2, [r7, #4]
 801aaf0:	23a7      	movs	r3, #167	@ 0xa7
 801aaf2:	009b      	lsls	r3, r3, #2
 801aaf4:	2104      	movs	r1, #4
 801aaf6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 801aaf8:	2300      	movs	r3, #0
}
 801aafa:	0018      	movs	r0, r3
 801aafc:	46bd      	mov	sp, r7
 801aafe:	b002      	add	sp, #8
 801ab00:	bd80      	pop	{r7, pc}
 801ab02:	46c0      	nop			@ (mov r8, r8)
 801ab04:	0000029d 	.word	0x0000029d

0801ab08 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b082      	sub	sp, #8
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801ab10:	687a      	ldr	r2, [r7, #4]
 801ab12:	23a7      	movs	r3, #167	@ 0xa7
 801ab14:	009b      	lsls	r3, r3, #2
 801ab16:	5cd3      	ldrb	r3, [r2, r3]
 801ab18:	2b04      	cmp	r3, #4
 801ab1a:	d106      	bne.n	801ab2a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	4a05      	ldr	r2, [pc, #20]	@ (801ab34 <USBD_LL_Resume+0x2c>)
 801ab20:	5c99      	ldrb	r1, [r3, r2]
 801ab22:	687a      	ldr	r2, [r7, #4]
 801ab24:	23a7      	movs	r3, #167	@ 0xa7
 801ab26:	009b      	lsls	r3, r3, #2
 801ab28:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 801ab2a:	2300      	movs	r3, #0
}
 801ab2c:	0018      	movs	r0, r3
 801ab2e:	46bd      	mov	sp, r7
 801ab30:	b002      	add	sp, #8
 801ab32:	bd80      	pop	{r7, pc}
 801ab34:	0000029d 	.word	0x0000029d

0801ab38 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b082      	sub	sp, #8
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801ab40:	687a      	ldr	r2, [r7, #4]
 801ab42:	23a7      	movs	r3, #167	@ 0xa7
 801ab44:	009b      	lsls	r3, r3, #2
 801ab46:	5cd3      	ldrb	r3, [r2, r3]
 801ab48:	2b03      	cmp	r3, #3
 801ab4a:	d10e      	bne.n	801ab6a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 801ab4c:	687a      	ldr	r2, [r7, #4]
 801ab4e:	23ad      	movs	r3, #173	@ 0xad
 801ab50:	009b      	lsls	r3, r3, #2
 801ab52:	58d3      	ldr	r3, [r2, r3]
 801ab54:	69db      	ldr	r3, [r3, #28]
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d007      	beq.n	801ab6a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 801ab5a:	687a      	ldr	r2, [r7, #4]
 801ab5c:	23ad      	movs	r3, #173	@ 0xad
 801ab5e:	009b      	lsls	r3, r3, #2
 801ab60:	58d3      	ldr	r3, [r2, r3]
 801ab62:	69db      	ldr	r3, [r3, #28]
 801ab64:	687a      	ldr	r2, [r7, #4]
 801ab66:	0010      	movs	r0, r2
 801ab68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801ab6a:	2300      	movs	r3, #0
}
 801ab6c:	0018      	movs	r0, r3
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	b002      	add	sp, #8
 801ab72:	bd80      	pop	{r7, pc}

0801ab74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801ab74:	b580      	push	{r7, lr}
 801ab76:	b084      	sub	sp, #16
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ab7e:	230f      	movs	r3, #15
 801ab80:	18fb      	adds	r3, r7, r3
 801ab82:	2200      	movs	r2, #0
 801ab84:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ab86:	683b      	ldr	r3, [r7, #0]
 801ab88:	781b      	ldrb	r3, [r3, #0]
 801ab8a:	001a      	movs	r2, r3
 801ab8c:	2360      	movs	r3, #96	@ 0x60
 801ab8e:	4013      	ands	r3, r2
 801ab90:	2b40      	cmp	r3, #64	@ 0x40
 801ab92:	d004      	beq.n	801ab9e <USBD_StdDevReq+0x2a>
 801ab94:	d84f      	bhi.n	801ac36 <USBD_StdDevReq+0xc2>
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d00b      	beq.n	801abb2 <USBD_StdDevReq+0x3e>
 801ab9a:	2b20      	cmp	r3, #32
 801ab9c:	d14b      	bne.n	801ac36 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801ab9e:	687a      	ldr	r2, [r7, #4]
 801aba0:	23ad      	movs	r3, #173	@ 0xad
 801aba2:	009b      	lsls	r3, r3, #2
 801aba4:	58d3      	ldr	r3, [r2, r3]
 801aba6:	689b      	ldr	r3, [r3, #8]
 801aba8:	6839      	ldr	r1, [r7, #0]
 801abaa:	687a      	ldr	r2, [r7, #4]
 801abac:	0010      	movs	r0, r2
 801abae:	4798      	blx	r3
      break;
 801abb0:	e048      	b.n	801ac44 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801abb2:	683b      	ldr	r3, [r7, #0]
 801abb4:	785b      	ldrb	r3, [r3, #1]
 801abb6:	2b09      	cmp	r3, #9
 801abb8:	d835      	bhi.n	801ac26 <USBD_StdDevReq+0xb2>
 801abba:	009a      	lsls	r2, r3, #2
 801abbc:	4b25      	ldr	r3, [pc, #148]	@ (801ac54 <USBD_StdDevReq+0xe0>)
 801abbe:	18d3      	adds	r3, r2, r3
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801abc4:	683a      	ldr	r2, [r7, #0]
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	0011      	movs	r1, r2
 801abca:	0018      	movs	r0, r3
 801abcc:	f000 fa52 	bl	801b074 <USBD_GetDescriptor>
          break;
 801abd0:	e030      	b.n	801ac34 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801abd2:	683a      	ldr	r2, [r7, #0]
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	0011      	movs	r1, r2
 801abd8:	0018      	movs	r0, r3
 801abda:	f000 fbfd 	bl	801b3d8 <USBD_SetAddress>
          break;
 801abde:	e029      	b.n	801ac34 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801abe0:	683a      	ldr	r2, [r7, #0]
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	0011      	movs	r1, r2
 801abe6:	0018      	movs	r0, r3
 801abe8:	f000 fc4a 	bl	801b480 <USBD_SetConfig>
          break;
 801abec:	e022      	b.n	801ac34 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801abee:	683a      	ldr	r2, [r7, #0]
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	0011      	movs	r1, r2
 801abf4:	0018      	movs	r0, r3
 801abf6:	f000 fce7 	bl	801b5c8 <USBD_GetConfig>
          break;
 801abfa:	e01b      	b.n	801ac34 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801abfc:	683a      	ldr	r2, [r7, #0]
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	0011      	movs	r1, r2
 801ac02:	0018      	movs	r0, r3
 801ac04:	f000 fd1b 	bl	801b63e <USBD_GetStatus>
          break;
 801ac08:	e014      	b.n	801ac34 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801ac0a:	683a      	ldr	r2, [r7, #0]
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	0011      	movs	r1, r2
 801ac10:	0018      	movs	r0, r3
 801ac12:	f000 fd4e 	bl	801b6b2 <USBD_SetFeature>
          break;
 801ac16:	e00d      	b.n	801ac34 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801ac18:	683a      	ldr	r2, [r7, #0]
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	0011      	movs	r1, r2
 801ac1e:	0018      	movs	r0, r3
 801ac20:	f000 fd5d 	bl	801b6de <USBD_ClrFeature>
          break;
 801ac24:	e006      	b.n	801ac34 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801ac26:	683a      	ldr	r2, [r7, #0]
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	0011      	movs	r1, r2
 801ac2c:	0018      	movs	r0, r3
 801ac2e:	f000 fdb4 	bl	801b79a <USBD_CtlError>
          break;
 801ac32:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801ac34:	e006      	b.n	801ac44 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801ac36:	683a      	ldr	r2, [r7, #0]
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	0011      	movs	r1, r2
 801ac3c:	0018      	movs	r0, r3
 801ac3e:	f000 fdac 	bl	801b79a <USBD_CtlError>
      break;
 801ac42:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801ac44:	230f      	movs	r3, #15
 801ac46:	18fb      	adds	r3, r7, r3
 801ac48:	781b      	ldrb	r3, [r3, #0]
}
 801ac4a:	0018      	movs	r0, r3
 801ac4c:	46bd      	mov	sp, r7
 801ac4e:	b004      	add	sp, #16
 801ac50:	bd80      	pop	{r7, pc}
 801ac52:	46c0      	nop			@ (mov r8, r8)
 801ac54:	08023d04 	.word	0x08023d04

0801ac58 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801ac58:	b5b0      	push	{r4, r5, r7, lr}
 801ac5a:	b084      	sub	sp, #16
 801ac5c:	af00      	add	r7, sp, #0
 801ac5e:	6078      	str	r0, [r7, #4]
 801ac60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ac62:	230f      	movs	r3, #15
 801ac64:	18fb      	adds	r3, r7, r3
 801ac66:	2200      	movs	r2, #0
 801ac68:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	781b      	ldrb	r3, [r3, #0]
 801ac6e:	001a      	movs	r2, r3
 801ac70:	2360      	movs	r3, #96	@ 0x60
 801ac72:	4013      	ands	r3, r2
 801ac74:	2b40      	cmp	r3, #64	@ 0x40
 801ac76:	d004      	beq.n	801ac82 <USBD_StdItfReq+0x2a>
 801ac78:	d839      	bhi.n	801acee <USBD_StdItfReq+0x96>
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d001      	beq.n	801ac82 <USBD_StdItfReq+0x2a>
 801ac7e:	2b20      	cmp	r3, #32
 801ac80:	d135      	bne.n	801acee <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801ac82:	687a      	ldr	r2, [r7, #4]
 801ac84:	23a7      	movs	r3, #167	@ 0xa7
 801ac86:	009b      	lsls	r3, r3, #2
 801ac88:	5cd3      	ldrb	r3, [r2, r3]
 801ac8a:	3b01      	subs	r3, #1
 801ac8c:	2b02      	cmp	r3, #2
 801ac8e:	d825      	bhi.n	801acdc <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801ac90:	683b      	ldr	r3, [r7, #0]
 801ac92:	889b      	ldrh	r3, [r3, #4]
 801ac94:	b2db      	uxtb	r3, r3
 801ac96:	2b01      	cmp	r3, #1
 801ac98:	d819      	bhi.n	801acce <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ac9a:	687a      	ldr	r2, [r7, #4]
 801ac9c:	23ad      	movs	r3, #173	@ 0xad
 801ac9e:	009b      	lsls	r3, r3, #2
 801aca0:	58d3      	ldr	r3, [r2, r3]
 801aca2:	689b      	ldr	r3, [r3, #8]
 801aca4:	250f      	movs	r5, #15
 801aca6:	197c      	adds	r4, r7, r5
 801aca8:	6839      	ldr	r1, [r7, #0]
 801acaa:	687a      	ldr	r2, [r7, #4]
 801acac:	0010      	movs	r0, r2
 801acae:	4798      	blx	r3
 801acb0:	0003      	movs	r3, r0
 801acb2:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801acb4:	683b      	ldr	r3, [r7, #0]
 801acb6:	88db      	ldrh	r3, [r3, #6]
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d116      	bne.n	801acea <USBD_StdItfReq+0x92>
 801acbc:	197b      	adds	r3, r7, r5
 801acbe:	781b      	ldrb	r3, [r3, #0]
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	d112      	bne.n	801acea <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	0018      	movs	r0, r3
 801acc8:	f000 fe4f 	bl	801b96a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801accc:	e00d      	b.n	801acea <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801acce:	683a      	ldr	r2, [r7, #0]
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	0011      	movs	r1, r2
 801acd4:	0018      	movs	r0, r3
 801acd6:	f000 fd60 	bl	801b79a <USBD_CtlError>
          break;
 801acda:	e006      	b.n	801acea <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 801acdc:	683a      	ldr	r2, [r7, #0]
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	0011      	movs	r1, r2
 801ace2:	0018      	movs	r0, r3
 801ace4:	f000 fd59 	bl	801b79a <USBD_CtlError>
          break;
 801ace8:	e000      	b.n	801acec <USBD_StdItfReq+0x94>
          break;
 801acea:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801acec:	e006      	b.n	801acfc <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801acee:	683a      	ldr	r2, [r7, #0]
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	0011      	movs	r1, r2
 801acf4:	0018      	movs	r0, r3
 801acf6:	f000 fd50 	bl	801b79a <USBD_CtlError>
      break;
 801acfa:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 801acfc:	2300      	movs	r3, #0
}
 801acfe:	0018      	movs	r0, r3
 801ad00:	46bd      	mov	sp, r7
 801ad02:	b004      	add	sp, #16
 801ad04:	bdb0      	pop	{r4, r5, r7, pc}

0801ad06 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801ad06:	b5b0      	push	{r4, r5, r7, lr}
 801ad08:	b084      	sub	sp, #16
 801ad0a:	af00      	add	r7, sp, #0
 801ad0c:	6078      	str	r0, [r7, #4]
 801ad0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801ad10:	230f      	movs	r3, #15
 801ad12:	18fb      	adds	r3, r7, r3
 801ad14:	2200      	movs	r2, #0
 801ad16:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	889a      	ldrh	r2, [r3, #4]
 801ad1c:	230e      	movs	r3, #14
 801ad1e:	18fb      	adds	r3, r7, r3
 801ad20:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ad22:	683b      	ldr	r3, [r7, #0]
 801ad24:	781b      	ldrb	r3, [r3, #0]
 801ad26:	001a      	movs	r2, r3
 801ad28:	2360      	movs	r3, #96	@ 0x60
 801ad2a:	4013      	ands	r3, r2
 801ad2c:	2b40      	cmp	r3, #64	@ 0x40
 801ad2e:	d006      	beq.n	801ad3e <USBD_StdEPReq+0x38>
 801ad30:	d900      	bls.n	801ad34 <USBD_StdEPReq+0x2e>
 801ad32:	e190      	b.n	801b056 <USBD_StdEPReq+0x350>
 801ad34:	2b00      	cmp	r3, #0
 801ad36:	d00c      	beq.n	801ad52 <USBD_StdEPReq+0x4c>
 801ad38:	2b20      	cmp	r3, #32
 801ad3a:	d000      	beq.n	801ad3e <USBD_StdEPReq+0x38>
 801ad3c:	e18b      	b.n	801b056 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801ad3e:	687a      	ldr	r2, [r7, #4]
 801ad40:	23ad      	movs	r3, #173	@ 0xad
 801ad42:	009b      	lsls	r3, r3, #2
 801ad44:	58d3      	ldr	r3, [r2, r3]
 801ad46:	689b      	ldr	r3, [r3, #8]
 801ad48:	6839      	ldr	r1, [r7, #0]
 801ad4a:	687a      	ldr	r2, [r7, #4]
 801ad4c:	0010      	movs	r0, r2
 801ad4e:	4798      	blx	r3
      break;
 801ad50:	e188      	b.n	801b064 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801ad52:	683b      	ldr	r3, [r7, #0]
 801ad54:	781b      	ldrb	r3, [r3, #0]
 801ad56:	001a      	movs	r2, r3
 801ad58:	2360      	movs	r3, #96	@ 0x60
 801ad5a:	4013      	ands	r3, r2
 801ad5c:	2b20      	cmp	r3, #32
 801ad5e:	d10f      	bne.n	801ad80 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ad60:	687a      	ldr	r2, [r7, #4]
 801ad62:	23ad      	movs	r3, #173	@ 0xad
 801ad64:	009b      	lsls	r3, r3, #2
 801ad66:	58d3      	ldr	r3, [r2, r3]
 801ad68:	689b      	ldr	r3, [r3, #8]
 801ad6a:	250f      	movs	r5, #15
 801ad6c:	197c      	adds	r4, r7, r5
 801ad6e:	6839      	ldr	r1, [r7, #0]
 801ad70:	687a      	ldr	r2, [r7, #4]
 801ad72:	0010      	movs	r0, r2
 801ad74:	4798      	blx	r3
 801ad76:	0003      	movs	r3, r0
 801ad78:	7023      	strb	r3, [r4, #0]

        return ret;
 801ad7a:	197b      	adds	r3, r7, r5
 801ad7c:	781b      	ldrb	r3, [r3, #0]
 801ad7e:	e174      	b.n	801b06a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 801ad80:	683b      	ldr	r3, [r7, #0]
 801ad82:	785b      	ldrb	r3, [r3, #1]
 801ad84:	2b03      	cmp	r3, #3
 801ad86:	d007      	beq.n	801ad98 <USBD_StdEPReq+0x92>
 801ad88:	dd00      	ble.n	801ad8c <USBD_StdEPReq+0x86>
 801ad8a:	e15c      	b.n	801b046 <USBD_StdEPReq+0x340>
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d100      	bne.n	801ad92 <USBD_StdEPReq+0x8c>
 801ad90:	e092      	b.n	801aeb8 <USBD_StdEPReq+0x1b2>
 801ad92:	2b01      	cmp	r3, #1
 801ad94:	d04b      	beq.n	801ae2e <USBD_StdEPReq+0x128>
 801ad96:	e156      	b.n	801b046 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801ad98:	687a      	ldr	r2, [r7, #4]
 801ad9a:	23a7      	movs	r3, #167	@ 0xa7
 801ad9c:	009b      	lsls	r3, r3, #2
 801ad9e:	5cd3      	ldrb	r3, [r2, r3]
 801ada0:	2b02      	cmp	r3, #2
 801ada2:	d002      	beq.n	801adaa <USBD_StdEPReq+0xa4>
 801ada4:	2b03      	cmp	r3, #3
 801ada6:	d01d      	beq.n	801ade4 <USBD_StdEPReq+0xde>
 801ada8:	e039      	b.n	801ae1e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801adaa:	220e      	movs	r2, #14
 801adac:	18bb      	adds	r3, r7, r2
 801adae:	781b      	ldrb	r3, [r3, #0]
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d010      	beq.n	801add6 <USBD_StdEPReq+0xd0>
 801adb4:	18bb      	adds	r3, r7, r2
 801adb6:	781b      	ldrb	r3, [r3, #0]
 801adb8:	2b80      	cmp	r3, #128	@ 0x80
 801adba:	d00c      	beq.n	801add6 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801adbc:	18bb      	adds	r3, r7, r2
 801adbe:	781a      	ldrb	r2, [r3, #0]
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	0011      	movs	r1, r2
 801adc4:	0018      	movs	r0, r3
 801adc6:	f001 fa10 	bl	801c1ea <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	2180      	movs	r1, #128	@ 0x80
 801adce:	0018      	movs	r0, r3
 801add0:	f001 fa0b 	bl	801c1ea <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801add4:	e02a      	b.n	801ae2c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 801add6:	683a      	ldr	r2, [r7, #0]
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	0011      	movs	r1, r2
 801addc:	0018      	movs	r0, r3
 801adde:	f000 fcdc 	bl	801b79a <USBD_CtlError>
              break;
 801ade2:	e023      	b.n	801ae2c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ade4:	683b      	ldr	r3, [r7, #0]
 801ade6:	885b      	ldrh	r3, [r3, #2]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d113      	bne.n	801ae14 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 801adec:	220e      	movs	r2, #14
 801adee:	18bb      	adds	r3, r7, r2
 801adf0:	781b      	ldrb	r3, [r3, #0]
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d00e      	beq.n	801ae14 <USBD_StdEPReq+0x10e>
 801adf6:	18bb      	adds	r3, r7, r2
 801adf8:	781b      	ldrb	r3, [r3, #0]
 801adfa:	2b80      	cmp	r3, #128	@ 0x80
 801adfc:	d00a      	beq.n	801ae14 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801adfe:	683b      	ldr	r3, [r7, #0]
 801ae00:	88db      	ldrh	r3, [r3, #6]
 801ae02:	2b00      	cmp	r3, #0
 801ae04:	d106      	bne.n	801ae14 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801ae06:	18bb      	adds	r3, r7, r2
 801ae08:	781a      	ldrb	r2, [r3, #0]
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	0011      	movs	r1, r2
 801ae0e:	0018      	movs	r0, r3
 801ae10:	f001 f9eb 	bl	801c1ea <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	0018      	movs	r0, r3
 801ae18:	f000 fda7 	bl	801b96a <USBD_CtlSendStatus>

              break;
 801ae1c:	e006      	b.n	801ae2c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801ae1e:	683a      	ldr	r2, [r7, #0]
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	0011      	movs	r1, r2
 801ae24:	0018      	movs	r0, r3
 801ae26:	f000 fcb8 	bl	801b79a <USBD_CtlError>
              break;
 801ae2a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801ae2c:	e112      	b.n	801b054 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801ae2e:	687a      	ldr	r2, [r7, #4]
 801ae30:	23a7      	movs	r3, #167	@ 0xa7
 801ae32:	009b      	lsls	r3, r3, #2
 801ae34:	5cd3      	ldrb	r3, [r2, r3]
 801ae36:	2b02      	cmp	r3, #2
 801ae38:	d002      	beq.n	801ae40 <USBD_StdEPReq+0x13a>
 801ae3a:	2b03      	cmp	r3, #3
 801ae3c:	d01d      	beq.n	801ae7a <USBD_StdEPReq+0x174>
 801ae3e:	e032      	b.n	801aea6 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ae40:	220e      	movs	r2, #14
 801ae42:	18bb      	adds	r3, r7, r2
 801ae44:	781b      	ldrb	r3, [r3, #0]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d010      	beq.n	801ae6c <USBD_StdEPReq+0x166>
 801ae4a:	18bb      	adds	r3, r7, r2
 801ae4c:	781b      	ldrb	r3, [r3, #0]
 801ae4e:	2b80      	cmp	r3, #128	@ 0x80
 801ae50:	d00c      	beq.n	801ae6c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801ae52:	18bb      	adds	r3, r7, r2
 801ae54:	781a      	ldrb	r2, [r3, #0]
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	0011      	movs	r1, r2
 801ae5a:	0018      	movs	r0, r3
 801ae5c:	f001 f9c5 	bl	801c1ea <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	2180      	movs	r1, #128	@ 0x80
 801ae64:	0018      	movs	r0, r3
 801ae66:	f001 f9c0 	bl	801c1ea <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801ae6a:	e024      	b.n	801aeb6 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 801ae6c:	683a      	ldr	r2, [r7, #0]
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	0011      	movs	r1, r2
 801ae72:	0018      	movs	r0, r3
 801ae74:	f000 fc91 	bl	801b79a <USBD_CtlError>
              break;
 801ae78:	e01d      	b.n	801aeb6 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ae7a:	683b      	ldr	r3, [r7, #0]
 801ae7c:	885b      	ldrh	r3, [r3, #2]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d118      	bne.n	801aeb4 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801ae82:	210e      	movs	r1, #14
 801ae84:	187b      	adds	r3, r7, r1
 801ae86:	781b      	ldrb	r3, [r3, #0]
 801ae88:	227f      	movs	r2, #127	@ 0x7f
 801ae8a:	4013      	ands	r3, r2
 801ae8c:	d006      	beq.n	801ae9c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801ae8e:	187b      	adds	r3, r7, r1
 801ae90:	781a      	ldrb	r2, [r3, #0]
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	0011      	movs	r1, r2
 801ae96:	0018      	movs	r0, r3
 801ae98:	f001 f9d2 	bl	801c240 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	0018      	movs	r0, r3
 801aea0:	f000 fd63 	bl	801b96a <USBD_CtlSendStatus>
              }
              break;
 801aea4:	e006      	b.n	801aeb4 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 801aea6:	683a      	ldr	r2, [r7, #0]
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	0011      	movs	r1, r2
 801aeac:	0018      	movs	r0, r3
 801aeae:	f000 fc74 	bl	801b79a <USBD_CtlError>
              break;
 801aeb2:	e000      	b.n	801aeb6 <USBD_StdEPReq+0x1b0>
              break;
 801aeb4:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801aeb6:	e0cd      	b.n	801b054 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801aeb8:	687a      	ldr	r2, [r7, #4]
 801aeba:	23a7      	movs	r3, #167	@ 0xa7
 801aebc:	009b      	lsls	r3, r3, #2
 801aebe:	5cd3      	ldrb	r3, [r2, r3]
 801aec0:	2b02      	cmp	r3, #2
 801aec2:	d002      	beq.n	801aeca <USBD_StdEPReq+0x1c4>
 801aec4:	2b03      	cmp	r3, #3
 801aec6:	d03c      	beq.n	801af42 <USBD_StdEPReq+0x23c>
 801aec8:	e0b5      	b.n	801b036 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801aeca:	220e      	movs	r2, #14
 801aecc:	18bb      	adds	r3, r7, r2
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d00a      	beq.n	801aeea <USBD_StdEPReq+0x1e4>
 801aed4:	18bb      	adds	r3, r7, r2
 801aed6:	781b      	ldrb	r3, [r3, #0]
 801aed8:	2b80      	cmp	r3, #128	@ 0x80
 801aeda:	d006      	beq.n	801aeea <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 801aedc:	683a      	ldr	r2, [r7, #0]
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	0011      	movs	r1, r2
 801aee2:	0018      	movs	r0, r3
 801aee4:	f000 fc59 	bl	801b79a <USBD_CtlError>
                break;
 801aee8:	e0ac      	b.n	801b044 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801aeea:	220e      	movs	r2, #14
 801aeec:	18bb      	adds	r3, r7, r2
 801aeee:	781b      	ldrb	r3, [r3, #0]
 801aef0:	b25b      	sxtb	r3, r3
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	da0c      	bge.n	801af10 <USBD_StdEPReq+0x20a>
 801aef6:	18bb      	adds	r3, r7, r2
 801aef8:	781b      	ldrb	r3, [r3, #0]
 801aefa:	227f      	movs	r2, #127	@ 0x7f
 801aefc:	401a      	ands	r2, r3
 801aefe:	0013      	movs	r3, r2
 801af00:	009b      	lsls	r3, r3, #2
 801af02:	189b      	adds	r3, r3, r2
 801af04:	009b      	lsls	r3, r3, #2
 801af06:	3310      	adds	r3, #16
 801af08:	687a      	ldr	r2, [r7, #4]
 801af0a:	18d3      	adds	r3, r2, r3
 801af0c:	3304      	adds	r3, #4
 801af0e:	e00d      	b.n	801af2c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801af10:	230e      	movs	r3, #14
 801af12:	18fb      	adds	r3, r7, r3
 801af14:	781b      	ldrb	r3, [r3, #0]
 801af16:	227f      	movs	r2, #127	@ 0x7f
 801af18:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801af1a:	0013      	movs	r3, r2
 801af1c:	009b      	lsls	r3, r3, #2
 801af1e:	189b      	adds	r3, r3, r2
 801af20:	009b      	lsls	r3, r3, #2
 801af22:	3351      	adds	r3, #81	@ 0x51
 801af24:	33ff      	adds	r3, #255	@ 0xff
 801af26:	687a      	ldr	r2, [r7, #4]
 801af28:	18d3      	adds	r3, r2, r3
 801af2a:	3304      	adds	r3, #4
 801af2c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801af2e:	68bb      	ldr	r3, [r7, #8]
 801af30:	2200      	movs	r2, #0
 801af32:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801af34:	68b9      	ldr	r1, [r7, #8]
 801af36:	687b      	ldr	r3, [r7, #4]
 801af38:	2202      	movs	r2, #2
 801af3a:	0018      	movs	r0, r3
 801af3c:	f000 fcab 	bl	801b896 <USBD_CtlSendData>
              break;
 801af40:	e080      	b.n	801b044 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801af42:	220e      	movs	r2, #14
 801af44:	18bb      	adds	r3, r7, r2
 801af46:	781b      	ldrb	r3, [r3, #0]
 801af48:	b25b      	sxtb	r3, r3
 801af4a:	2b00      	cmp	r3, #0
 801af4c:	da14      	bge.n	801af78 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801af4e:	18bb      	adds	r3, r7, r2
 801af50:	781b      	ldrb	r3, [r3, #0]
 801af52:	220f      	movs	r2, #15
 801af54:	401a      	ands	r2, r3
 801af56:	6879      	ldr	r1, [r7, #4]
 801af58:	0013      	movs	r3, r2
 801af5a:	009b      	lsls	r3, r3, #2
 801af5c:	189b      	adds	r3, r3, r2
 801af5e:	009b      	lsls	r3, r3, #2
 801af60:	18cb      	adds	r3, r1, r3
 801af62:	3318      	adds	r3, #24
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d11e      	bne.n	801afa8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801af6a:	683a      	ldr	r2, [r7, #0]
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	0011      	movs	r1, r2
 801af70:	0018      	movs	r0, r3
 801af72:	f000 fc12 	bl	801b79a <USBD_CtlError>
                  break;
 801af76:	e065      	b.n	801b044 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801af78:	230e      	movs	r3, #14
 801af7a:	18fb      	adds	r3, r7, r3
 801af7c:	781b      	ldrb	r3, [r3, #0]
 801af7e:	220f      	movs	r2, #15
 801af80:	401a      	ands	r2, r3
 801af82:	6878      	ldr	r0, [r7, #4]
 801af84:	23ac      	movs	r3, #172	@ 0xac
 801af86:	0059      	lsls	r1, r3, #1
 801af88:	0013      	movs	r3, r2
 801af8a:	009b      	lsls	r3, r3, #2
 801af8c:	189b      	adds	r3, r3, r2
 801af8e:	009b      	lsls	r3, r3, #2
 801af90:	18c3      	adds	r3, r0, r3
 801af92:	185b      	adds	r3, r3, r1
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	2b00      	cmp	r3, #0
 801af98:	d106      	bne.n	801afa8 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 801af9a:	683a      	ldr	r2, [r7, #0]
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	0011      	movs	r1, r2
 801afa0:	0018      	movs	r0, r3
 801afa2:	f000 fbfa 	bl	801b79a <USBD_CtlError>
                  break;
 801afa6:	e04d      	b.n	801b044 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801afa8:	220e      	movs	r2, #14
 801afaa:	18bb      	adds	r3, r7, r2
 801afac:	781b      	ldrb	r3, [r3, #0]
 801afae:	b25b      	sxtb	r3, r3
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	da0c      	bge.n	801afce <USBD_StdEPReq+0x2c8>
 801afb4:	18bb      	adds	r3, r7, r2
 801afb6:	781b      	ldrb	r3, [r3, #0]
 801afb8:	227f      	movs	r2, #127	@ 0x7f
 801afba:	401a      	ands	r2, r3
 801afbc:	0013      	movs	r3, r2
 801afbe:	009b      	lsls	r3, r3, #2
 801afc0:	189b      	adds	r3, r3, r2
 801afc2:	009b      	lsls	r3, r3, #2
 801afc4:	3310      	adds	r3, #16
 801afc6:	687a      	ldr	r2, [r7, #4]
 801afc8:	18d3      	adds	r3, r2, r3
 801afca:	3304      	adds	r3, #4
 801afcc:	e00d      	b.n	801afea <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801afce:	230e      	movs	r3, #14
 801afd0:	18fb      	adds	r3, r7, r3
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	227f      	movs	r2, #127	@ 0x7f
 801afd6:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801afd8:	0013      	movs	r3, r2
 801afda:	009b      	lsls	r3, r3, #2
 801afdc:	189b      	adds	r3, r3, r2
 801afde:	009b      	lsls	r3, r3, #2
 801afe0:	3351      	adds	r3, #81	@ 0x51
 801afe2:	33ff      	adds	r3, #255	@ 0xff
 801afe4:	687a      	ldr	r2, [r7, #4]
 801afe6:	18d3      	adds	r3, r2, r3
 801afe8:	3304      	adds	r3, #4
 801afea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801afec:	220e      	movs	r2, #14
 801afee:	18bb      	adds	r3, r7, r2
 801aff0:	781b      	ldrb	r3, [r3, #0]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d003      	beq.n	801affe <USBD_StdEPReq+0x2f8>
 801aff6:	18bb      	adds	r3, r7, r2
 801aff8:	781b      	ldrb	r3, [r3, #0]
 801affa:	2b80      	cmp	r3, #128	@ 0x80
 801affc:	d103      	bne.n	801b006 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801affe:	68bb      	ldr	r3, [r7, #8]
 801b000:	2200      	movs	r2, #0
 801b002:	601a      	str	r2, [r3, #0]
 801b004:	e010      	b.n	801b028 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801b006:	230e      	movs	r3, #14
 801b008:	18fb      	adds	r3, r7, r3
 801b00a:	781a      	ldrb	r2, [r3, #0]
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	0011      	movs	r1, r2
 801b010:	0018      	movs	r0, r3
 801b012:	f001 f940 	bl	801c296 <USBD_LL_IsStallEP>
 801b016:	1e03      	subs	r3, r0, #0
 801b018:	d003      	beq.n	801b022 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 801b01a:	68bb      	ldr	r3, [r7, #8]
 801b01c:	2201      	movs	r2, #1
 801b01e:	601a      	str	r2, [r3, #0]
 801b020:	e002      	b.n	801b028 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801b022:	68bb      	ldr	r3, [r7, #8]
 801b024:	2200      	movs	r2, #0
 801b026:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801b028:	68b9      	ldr	r1, [r7, #8]
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	2202      	movs	r2, #2
 801b02e:	0018      	movs	r0, r3
 801b030:	f000 fc31 	bl	801b896 <USBD_CtlSendData>
              break;
 801b034:	e006      	b.n	801b044 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801b036:	683a      	ldr	r2, [r7, #0]
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	0011      	movs	r1, r2
 801b03c:	0018      	movs	r0, r3
 801b03e:	f000 fbac 	bl	801b79a <USBD_CtlError>
              break;
 801b042:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801b044:	e006      	b.n	801b054 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801b046:	683a      	ldr	r2, [r7, #0]
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	0011      	movs	r1, r2
 801b04c:	0018      	movs	r0, r3
 801b04e:	f000 fba4 	bl	801b79a <USBD_CtlError>
          break;
 801b052:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801b054:	e006      	b.n	801b064 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801b056:	683a      	ldr	r2, [r7, #0]
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	0011      	movs	r1, r2
 801b05c:	0018      	movs	r0, r3
 801b05e:	f000 fb9c 	bl	801b79a <USBD_CtlError>
      break;
 801b062:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801b064:	230f      	movs	r3, #15
 801b066:	18fb      	adds	r3, r7, r3
 801b068:	781b      	ldrb	r3, [r3, #0]
}
 801b06a:	0018      	movs	r0, r3
 801b06c:	46bd      	mov	sp, r7
 801b06e:	b004      	add	sp, #16
 801b070:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801b074 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b084      	sub	sp, #16
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
 801b07c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801b07e:	2308      	movs	r3, #8
 801b080:	18fb      	adds	r3, r7, r3
 801b082:	2200      	movs	r2, #0
 801b084:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801b086:	2300      	movs	r3, #0
 801b088:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801b08a:	230b      	movs	r3, #11
 801b08c:	18fb      	adds	r3, r7, r3
 801b08e:	2200      	movs	r2, #0
 801b090:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 801b092:	683b      	ldr	r3, [r7, #0]
 801b094:	885b      	ldrh	r3, [r3, #2]
 801b096:	0a1b      	lsrs	r3, r3, #8
 801b098:	b29b      	uxth	r3, r3
 801b09a:	2b07      	cmp	r3, #7
 801b09c:	d900      	bls.n	801b0a0 <USBD_GetDescriptor+0x2c>
 801b09e:	e159      	b.n	801b354 <USBD_GetDescriptor+0x2e0>
 801b0a0:	009a      	lsls	r2, r3, #2
 801b0a2:	4bcb      	ldr	r3, [pc, #812]	@ (801b3d0 <USBD_GetDescriptor+0x35c>)
 801b0a4:	18d3      	adds	r3, r2, r3
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801b0aa:	687a      	ldr	r2, [r7, #4]
 801b0ac:	23ac      	movs	r3, #172	@ 0xac
 801b0ae:	009b      	lsls	r3, r3, #2
 801b0b0:	58d3      	ldr	r3, [r2, r3]
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	687a      	ldr	r2, [r7, #4]
 801b0b6:	7c12      	ldrb	r2, [r2, #16]
 801b0b8:	2108      	movs	r1, #8
 801b0ba:	1879      	adds	r1, r7, r1
 801b0bc:	0010      	movs	r0, r2
 801b0be:	4798      	blx	r3
 801b0c0:	0003      	movs	r3, r0
 801b0c2:	60fb      	str	r3, [r7, #12]
      break;
 801b0c4:	e153      	b.n	801b36e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	7c1b      	ldrb	r3, [r3, #16]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d10f      	bne.n	801b0ee <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801b0ce:	687a      	ldr	r2, [r7, #4]
 801b0d0:	23ad      	movs	r3, #173	@ 0xad
 801b0d2:	009b      	lsls	r3, r3, #2
 801b0d4:	58d3      	ldr	r3, [r2, r3]
 801b0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b0d8:	2208      	movs	r2, #8
 801b0da:	18ba      	adds	r2, r7, r2
 801b0dc:	0010      	movs	r0, r2
 801b0de:	4798      	blx	r3
 801b0e0:	0003      	movs	r3, r0
 801b0e2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	3301      	adds	r3, #1
 801b0e8:	2202      	movs	r2, #2
 801b0ea:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801b0ec:	e13f      	b.n	801b36e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801b0ee:	687a      	ldr	r2, [r7, #4]
 801b0f0:	23ad      	movs	r3, #173	@ 0xad
 801b0f2:	009b      	lsls	r3, r3, #2
 801b0f4:	58d3      	ldr	r3, [r2, r3]
 801b0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b0f8:	2208      	movs	r2, #8
 801b0fa:	18ba      	adds	r2, r7, r2
 801b0fc:	0010      	movs	r0, r2
 801b0fe:	4798      	blx	r3
 801b100:	0003      	movs	r3, r0
 801b102:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	3301      	adds	r3, #1
 801b108:	2202      	movs	r2, #2
 801b10a:	701a      	strb	r2, [r3, #0]
      break;
 801b10c:	e12f      	b.n	801b36e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801b10e:	683b      	ldr	r3, [r7, #0]
 801b110:	885b      	ldrh	r3, [r3, #2]
 801b112:	b2db      	uxtb	r3, r3
 801b114:	2b05      	cmp	r3, #5
 801b116:	d900      	bls.n	801b11a <USBD_GetDescriptor+0xa6>
 801b118:	e0d0      	b.n	801b2bc <USBD_GetDescriptor+0x248>
 801b11a:	009a      	lsls	r2, r3, #2
 801b11c:	4bad      	ldr	r3, [pc, #692]	@ (801b3d4 <USBD_GetDescriptor+0x360>)
 801b11e:	18d3      	adds	r3, r2, r3
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801b124:	687a      	ldr	r2, [r7, #4]
 801b126:	23ac      	movs	r3, #172	@ 0xac
 801b128:	009b      	lsls	r3, r3, #2
 801b12a:	58d3      	ldr	r3, [r2, r3]
 801b12c:	685b      	ldr	r3, [r3, #4]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d00d      	beq.n	801b14e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801b132:	687a      	ldr	r2, [r7, #4]
 801b134:	23ac      	movs	r3, #172	@ 0xac
 801b136:	009b      	lsls	r3, r3, #2
 801b138:	58d3      	ldr	r3, [r2, r3]
 801b13a:	685b      	ldr	r3, [r3, #4]
 801b13c:	687a      	ldr	r2, [r7, #4]
 801b13e:	7c12      	ldrb	r2, [r2, #16]
 801b140:	2108      	movs	r1, #8
 801b142:	1879      	adds	r1, r7, r1
 801b144:	0010      	movs	r0, r2
 801b146:	4798      	blx	r3
 801b148:	0003      	movs	r3, r0
 801b14a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b14c:	e0c3      	b.n	801b2d6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b14e:	683a      	ldr	r2, [r7, #0]
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	0011      	movs	r1, r2
 801b154:	0018      	movs	r0, r3
 801b156:	f000 fb20 	bl	801b79a <USBD_CtlError>
            err++;
 801b15a:	210b      	movs	r1, #11
 801b15c:	187b      	adds	r3, r7, r1
 801b15e:	781a      	ldrb	r2, [r3, #0]
 801b160:	187b      	adds	r3, r7, r1
 801b162:	3201      	adds	r2, #1
 801b164:	701a      	strb	r2, [r3, #0]
          break;
 801b166:	e0b6      	b.n	801b2d6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801b168:	687a      	ldr	r2, [r7, #4]
 801b16a:	23ac      	movs	r3, #172	@ 0xac
 801b16c:	009b      	lsls	r3, r3, #2
 801b16e:	58d3      	ldr	r3, [r2, r3]
 801b170:	689b      	ldr	r3, [r3, #8]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d00d      	beq.n	801b192 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801b176:	687a      	ldr	r2, [r7, #4]
 801b178:	23ac      	movs	r3, #172	@ 0xac
 801b17a:	009b      	lsls	r3, r3, #2
 801b17c:	58d3      	ldr	r3, [r2, r3]
 801b17e:	689b      	ldr	r3, [r3, #8]
 801b180:	687a      	ldr	r2, [r7, #4]
 801b182:	7c12      	ldrb	r2, [r2, #16]
 801b184:	2108      	movs	r1, #8
 801b186:	1879      	adds	r1, r7, r1
 801b188:	0010      	movs	r0, r2
 801b18a:	4798      	blx	r3
 801b18c:	0003      	movs	r3, r0
 801b18e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b190:	e0a1      	b.n	801b2d6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b192:	683a      	ldr	r2, [r7, #0]
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	0011      	movs	r1, r2
 801b198:	0018      	movs	r0, r3
 801b19a:	f000 fafe 	bl	801b79a <USBD_CtlError>
            err++;
 801b19e:	210b      	movs	r1, #11
 801b1a0:	187b      	adds	r3, r7, r1
 801b1a2:	781a      	ldrb	r2, [r3, #0]
 801b1a4:	187b      	adds	r3, r7, r1
 801b1a6:	3201      	adds	r2, #1
 801b1a8:	701a      	strb	r2, [r3, #0]
          break;
 801b1aa:	e094      	b.n	801b2d6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801b1ac:	687a      	ldr	r2, [r7, #4]
 801b1ae:	23ac      	movs	r3, #172	@ 0xac
 801b1b0:	009b      	lsls	r3, r3, #2
 801b1b2:	58d3      	ldr	r3, [r2, r3]
 801b1b4:	68db      	ldr	r3, [r3, #12]
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d00d      	beq.n	801b1d6 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801b1ba:	687a      	ldr	r2, [r7, #4]
 801b1bc:	23ac      	movs	r3, #172	@ 0xac
 801b1be:	009b      	lsls	r3, r3, #2
 801b1c0:	58d3      	ldr	r3, [r2, r3]
 801b1c2:	68db      	ldr	r3, [r3, #12]
 801b1c4:	687a      	ldr	r2, [r7, #4]
 801b1c6:	7c12      	ldrb	r2, [r2, #16]
 801b1c8:	2108      	movs	r1, #8
 801b1ca:	1879      	adds	r1, r7, r1
 801b1cc:	0010      	movs	r0, r2
 801b1ce:	4798      	blx	r3
 801b1d0:	0003      	movs	r3, r0
 801b1d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b1d4:	e07f      	b.n	801b2d6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b1d6:	683a      	ldr	r2, [r7, #0]
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	0011      	movs	r1, r2
 801b1dc:	0018      	movs	r0, r3
 801b1de:	f000 fadc 	bl	801b79a <USBD_CtlError>
            err++;
 801b1e2:	210b      	movs	r1, #11
 801b1e4:	187b      	adds	r3, r7, r1
 801b1e6:	781a      	ldrb	r2, [r3, #0]
 801b1e8:	187b      	adds	r3, r7, r1
 801b1ea:	3201      	adds	r2, #1
 801b1ec:	701a      	strb	r2, [r3, #0]
          break;
 801b1ee:	e072      	b.n	801b2d6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801b1f0:	687a      	ldr	r2, [r7, #4]
 801b1f2:	23ac      	movs	r3, #172	@ 0xac
 801b1f4:	009b      	lsls	r3, r3, #2
 801b1f6:	58d3      	ldr	r3, [r2, r3]
 801b1f8:	691b      	ldr	r3, [r3, #16]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d00d      	beq.n	801b21a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801b1fe:	687a      	ldr	r2, [r7, #4]
 801b200:	23ac      	movs	r3, #172	@ 0xac
 801b202:	009b      	lsls	r3, r3, #2
 801b204:	58d3      	ldr	r3, [r2, r3]
 801b206:	691b      	ldr	r3, [r3, #16]
 801b208:	687a      	ldr	r2, [r7, #4]
 801b20a:	7c12      	ldrb	r2, [r2, #16]
 801b20c:	2108      	movs	r1, #8
 801b20e:	1879      	adds	r1, r7, r1
 801b210:	0010      	movs	r0, r2
 801b212:	4798      	blx	r3
 801b214:	0003      	movs	r3, r0
 801b216:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b218:	e05d      	b.n	801b2d6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b21a:	683a      	ldr	r2, [r7, #0]
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	0011      	movs	r1, r2
 801b220:	0018      	movs	r0, r3
 801b222:	f000 faba 	bl	801b79a <USBD_CtlError>
            err++;
 801b226:	210b      	movs	r1, #11
 801b228:	187b      	adds	r3, r7, r1
 801b22a:	781a      	ldrb	r2, [r3, #0]
 801b22c:	187b      	adds	r3, r7, r1
 801b22e:	3201      	adds	r2, #1
 801b230:	701a      	strb	r2, [r3, #0]
          break;
 801b232:	e050      	b.n	801b2d6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801b234:	687a      	ldr	r2, [r7, #4]
 801b236:	23ac      	movs	r3, #172	@ 0xac
 801b238:	009b      	lsls	r3, r3, #2
 801b23a:	58d3      	ldr	r3, [r2, r3]
 801b23c:	695b      	ldr	r3, [r3, #20]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d00d      	beq.n	801b25e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801b242:	687a      	ldr	r2, [r7, #4]
 801b244:	23ac      	movs	r3, #172	@ 0xac
 801b246:	009b      	lsls	r3, r3, #2
 801b248:	58d3      	ldr	r3, [r2, r3]
 801b24a:	695b      	ldr	r3, [r3, #20]
 801b24c:	687a      	ldr	r2, [r7, #4]
 801b24e:	7c12      	ldrb	r2, [r2, #16]
 801b250:	2108      	movs	r1, #8
 801b252:	1879      	adds	r1, r7, r1
 801b254:	0010      	movs	r0, r2
 801b256:	4798      	blx	r3
 801b258:	0003      	movs	r3, r0
 801b25a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b25c:	e03b      	b.n	801b2d6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b25e:	683a      	ldr	r2, [r7, #0]
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	0011      	movs	r1, r2
 801b264:	0018      	movs	r0, r3
 801b266:	f000 fa98 	bl	801b79a <USBD_CtlError>
            err++;
 801b26a:	210b      	movs	r1, #11
 801b26c:	187b      	adds	r3, r7, r1
 801b26e:	781a      	ldrb	r2, [r3, #0]
 801b270:	187b      	adds	r3, r7, r1
 801b272:	3201      	adds	r2, #1
 801b274:	701a      	strb	r2, [r3, #0]
          break;
 801b276:	e02e      	b.n	801b2d6 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801b278:	687a      	ldr	r2, [r7, #4]
 801b27a:	23ac      	movs	r3, #172	@ 0xac
 801b27c:	009b      	lsls	r3, r3, #2
 801b27e:	58d3      	ldr	r3, [r2, r3]
 801b280:	699b      	ldr	r3, [r3, #24]
 801b282:	2b00      	cmp	r3, #0
 801b284:	d00d      	beq.n	801b2a2 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801b286:	687a      	ldr	r2, [r7, #4]
 801b288:	23ac      	movs	r3, #172	@ 0xac
 801b28a:	009b      	lsls	r3, r3, #2
 801b28c:	58d3      	ldr	r3, [r2, r3]
 801b28e:	699b      	ldr	r3, [r3, #24]
 801b290:	687a      	ldr	r2, [r7, #4]
 801b292:	7c12      	ldrb	r2, [r2, #16]
 801b294:	2108      	movs	r1, #8
 801b296:	1879      	adds	r1, r7, r1
 801b298:	0010      	movs	r0, r2
 801b29a:	4798      	blx	r3
 801b29c:	0003      	movs	r3, r0
 801b29e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801b2a0:	e019      	b.n	801b2d6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801b2a2:	683a      	ldr	r2, [r7, #0]
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	0011      	movs	r1, r2
 801b2a8:	0018      	movs	r0, r3
 801b2aa:	f000 fa76 	bl	801b79a <USBD_CtlError>
            err++;
 801b2ae:	210b      	movs	r1, #11
 801b2b0:	187b      	adds	r3, r7, r1
 801b2b2:	781a      	ldrb	r2, [r3, #0]
 801b2b4:	187b      	adds	r3, r7, r1
 801b2b6:	3201      	adds	r2, #1
 801b2b8:	701a      	strb	r2, [r3, #0]
          break;
 801b2ba:	e00c      	b.n	801b2d6 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801b2bc:	683a      	ldr	r2, [r7, #0]
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	0011      	movs	r1, r2
 801b2c2:	0018      	movs	r0, r3
 801b2c4:	f000 fa69 	bl	801b79a <USBD_CtlError>
          err++;
 801b2c8:	210b      	movs	r1, #11
 801b2ca:	187b      	adds	r3, r7, r1
 801b2cc:	781a      	ldrb	r2, [r3, #0]
 801b2ce:	187b      	adds	r3, r7, r1
 801b2d0:	3201      	adds	r2, #1
 801b2d2:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 801b2d4:	e04b      	b.n	801b36e <USBD_GetDescriptor+0x2fa>
 801b2d6:	e04a      	b.n	801b36e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	7c1b      	ldrb	r3, [r3, #16]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d10b      	bne.n	801b2f8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801b2e0:	687a      	ldr	r2, [r7, #4]
 801b2e2:	23ad      	movs	r3, #173	@ 0xad
 801b2e4:	009b      	lsls	r3, r3, #2
 801b2e6:	58d3      	ldr	r3, [r2, r3]
 801b2e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b2ea:	2208      	movs	r2, #8
 801b2ec:	18ba      	adds	r2, r7, r2
 801b2ee:	0010      	movs	r0, r2
 801b2f0:	4798      	blx	r3
 801b2f2:	0003      	movs	r3, r0
 801b2f4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b2f6:	e03a      	b.n	801b36e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b2f8:	683a      	ldr	r2, [r7, #0]
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	0011      	movs	r1, r2
 801b2fe:	0018      	movs	r0, r3
 801b300:	f000 fa4b 	bl	801b79a <USBD_CtlError>
        err++;
 801b304:	210b      	movs	r1, #11
 801b306:	187b      	adds	r3, r7, r1
 801b308:	781a      	ldrb	r2, [r3, #0]
 801b30a:	187b      	adds	r3, r7, r1
 801b30c:	3201      	adds	r2, #1
 801b30e:	701a      	strb	r2, [r3, #0]
      break;
 801b310:	e02d      	b.n	801b36e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	7c1b      	ldrb	r3, [r3, #16]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d10f      	bne.n	801b33a <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801b31a:	687a      	ldr	r2, [r7, #4]
 801b31c:	23ad      	movs	r3, #173	@ 0xad
 801b31e:	009b      	lsls	r3, r3, #2
 801b320:	58d3      	ldr	r3, [r2, r3]
 801b322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b324:	2208      	movs	r2, #8
 801b326:	18ba      	adds	r2, r7, r2
 801b328:	0010      	movs	r0, r2
 801b32a:	4798      	blx	r3
 801b32c:	0003      	movs	r3, r0
 801b32e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801b330:	68fb      	ldr	r3, [r7, #12]
 801b332:	3301      	adds	r3, #1
 801b334:	2207      	movs	r2, #7
 801b336:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801b338:	e019      	b.n	801b36e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 801b33a:	683a      	ldr	r2, [r7, #0]
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	0011      	movs	r1, r2
 801b340:	0018      	movs	r0, r3
 801b342:	f000 fa2a 	bl	801b79a <USBD_CtlError>
        err++;
 801b346:	210b      	movs	r1, #11
 801b348:	187b      	adds	r3, r7, r1
 801b34a:	781a      	ldrb	r2, [r3, #0]
 801b34c:	187b      	adds	r3, r7, r1
 801b34e:	3201      	adds	r2, #1
 801b350:	701a      	strb	r2, [r3, #0]
      break;
 801b352:	e00c      	b.n	801b36e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 801b354:	683a      	ldr	r2, [r7, #0]
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	0011      	movs	r1, r2
 801b35a:	0018      	movs	r0, r3
 801b35c:	f000 fa1d 	bl	801b79a <USBD_CtlError>
      err++;
 801b360:	210b      	movs	r1, #11
 801b362:	187b      	adds	r3, r7, r1
 801b364:	781a      	ldrb	r2, [r3, #0]
 801b366:	187b      	adds	r3, r7, r1
 801b368:	3201      	adds	r2, #1
 801b36a:	701a      	strb	r2, [r3, #0]
      break;
 801b36c:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 801b36e:	230b      	movs	r3, #11
 801b370:	18fb      	adds	r3, r7, r3
 801b372:	781b      	ldrb	r3, [r3, #0]
 801b374:	2b00      	cmp	r3, #0
 801b376:	d127      	bne.n	801b3c8 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801b378:	2108      	movs	r1, #8
 801b37a:	187b      	adds	r3, r7, r1
 801b37c:	881b      	ldrh	r3, [r3, #0]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d019      	beq.n	801b3b6 <USBD_GetDescriptor+0x342>
 801b382:	683b      	ldr	r3, [r7, #0]
 801b384:	88db      	ldrh	r3, [r3, #6]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d015      	beq.n	801b3b6 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 801b38a:	683b      	ldr	r3, [r7, #0]
 801b38c:	88da      	ldrh	r2, [r3, #6]
 801b38e:	187b      	adds	r3, r7, r1
 801b390:	881b      	ldrh	r3, [r3, #0]
 801b392:	1c18      	adds	r0, r3, #0
 801b394:	1c11      	adds	r1, r2, #0
 801b396:	b28a      	uxth	r2, r1
 801b398:	b283      	uxth	r3, r0
 801b39a:	429a      	cmp	r2, r3
 801b39c:	d900      	bls.n	801b3a0 <USBD_GetDescriptor+0x32c>
 801b39e:	1c01      	adds	r1, r0, #0
 801b3a0:	b28a      	uxth	r2, r1
 801b3a2:	2108      	movs	r1, #8
 801b3a4:	187b      	adds	r3, r7, r1
 801b3a6:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801b3a8:	187b      	adds	r3, r7, r1
 801b3aa:	881a      	ldrh	r2, [r3, #0]
 801b3ac:	68f9      	ldr	r1, [r7, #12]
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	0018      	movs	r0, r3
 801b3b2:	f000 fa70 	bl	801b896 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801b3b6:	683b      	ldr	r3, [r7, #0]
 801b3b8:	88db      	ldrh	r3, [r3, #6]
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d105      	bne.n	801b3ca <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	0018      	movs	r0, r3
 801b3c2:	f000 fad2 	bl	801b96a <USBD_CtlSendStatus>
 801b3c6:	e000      	b.n	801b3ca <USBD_GetDescriptor+0x356>
    return;
 801b3c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	b004      	add	sp, #16
 801b3ce:	bd80      	pop	{r7, pc}
 801b3d0:	08023d2c 	.word	0x08023d2c
 801b3d4:	08023d4c 	.word	0x08023d4c

0801b3d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b3d8:	b590      	push	{r4, r7, lr}
 801b3da:	b085      	sub	sp, #20
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
 801b3e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801b3e2:	683b      	ldr	r3, [r7, #0]
 801b3e4:	889b      	ldrh	r3, [r3, #4]
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d13d      	bne.n	801b466 <USBD_SetAddress+0x8e>
 801b3ea:	683b      	ldr	r3, [r7, #0]
 801b3ec:	88db      	ldrh	r3, [r3, #6]
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d139      	bne.n	801b466 <USBD_SetAddress+0x8e>
 801b3f2:	683b      	ldr	r3, [r7, #0]
 801b3f4:	885b      	ldrh	r3, [r3, #2]
 801b3f6:	2b7f      	cmp	r3, #127	@ 0x7f
 801b3f8:	d835      	bhi.n	801b466 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801b3fa:	683b      	ldr	r3, [r7, #0]
 801b3fc:	885b      	ldrh	r3, [r3, #2]
 801b3fe:	b2da      	uxtb	r2, r3
 801b400:	230f      	movs	r3, #15
 801b402:	18fb      	adds	r3, r7, r3
 801b404:	217f      	movs	r1, #127	@ 0x7f
 801b406:	400a      	ands	r2, r1
 801b408:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b40a:	687a      	ldr	r2, [r7, #4]
 801b40c:	23a7      	movs	r3, #167	@ 0xa7
 801b40e:	009b      	lsls	r3, r3, #2
 801b410:	5cd3      	ldrb	r3, [r2, r3]
 801b412:	2b03      	cmp	r3, #3
 801b414:	d106      	bne.n	801b424 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 801b416:	683a      	ldr	r2, [r7, #0]
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	0011      	movs	r1, r2
 801b41c:	0018      	movs	r0, r3
 801b41e:	f000 f9bc 	bl	801b79a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b422:	e027      	b.n	801b474 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	240f      	movs	r4, #15
 801b428:	193a      	adds	r2, r7, r4
 801b42a:	4914      	ldr	r1, [pc, #80]	@ (801b47c <USBD_SetAddress+0xa4>)
 801b42c:	7812      	ldrb	r2, [r2, #0]
 801b42e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801b430:	193b      	adds	r3, r7, r4
 801b432:	781a      	ldrb	r2, [r3, #0]
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	0011      	movs	r1, r2
 801b438:	0018      	movs	r0, r3
 801b43a:	f000 ff5d 	bl	801c2f8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	0018      	movs	r0, r3
 801b442:	f000 fa92 	bl	801b96a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801b446:	193b      	adds	r3, r7, r4
 801b448:	781b      	ldrb	r3, [r3, #0]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d005      	beq.n	801b45a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801b44e:	687a      	ldr	r2, [r7, #4]
 801b450:	23a7      	movs	r3, #167	@ 0xa7
 801b452:	009b      	lsls	r3, r3, #2
 801b454:	2102      	movs	r1, #2
 801b456:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b458:	e00c      	b.n	801b474 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801b45a:	687a      	ldr	r2, [r7, #4]
 801b45c:	23a7      	movs	r3, #167	@ 0xa7
 801b45e:	009b      	lsls	r3, r3, #2
 801b460:	2101      	movs	r1, #1
 801b462:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801b464:	e006      	b.n	801b474 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801b466:	683a      	ldr	r2, [r7, #0]
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	0011      	movs	r1, r2
 801b46c:	0018      	movs	r0, r3
 801b46e:	f000 f994 	bl	801b79a <USBD_CtlError>
  }
}
 801b472:	46c0      	nop			@ (mov r8, r8)
 801b474:	46c0      	nop			@ (mov r8, r8)
 801b476:	46bd      	mov	sp, r7
 801b478:	b005      	add	sp, #20
 801b47a:	bd90      	pop	{r4, r7, pc}
 801b47c:	0000029e 	.word	0x0000029e

0801b480 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b480:	b580      	push	{r7, lr}
 801b482:	b082      	sub	sp, #8
 801b484:	af00      	add	r7, sp, #0
 801b486:	6078      	str	r0, [r7, #4]
 801b488:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801b48a:	683b      	ldr	r3, [r7, #0]
 801b48c:	885b      	ldrh	r3, [r3, #2]
 801b48e:	b2da      	uxtb	r2, r3
 801b490:	4b4c      	ldr	r3, [pc, #304]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801b494:	4b4b      	ldr	r3, [pc, #300]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b496:	781b      	ldrb	r3, [r3, #0]
 801b498:	2b01      	cmp	r3, #1
 801b49a:	d906      	bls.n	801b4aa <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 801b49c:	683a      	ldr	r2, [r7, #0]
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	0011      	movs	r1, r2
 801b4a2:	0018      	movs	r0, r3
 801b4a4:	f000 f979 	bl	801b79a <USBD_CtlError>
 801b4a8:	e088      	b.n	801b5bc <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 801b4aa:	687a      	ldr	r2, [r7, #4]
 801b4ac:	23a7      	movs	r3, #167	@ 0xa7
 801b4ae:	009b      	lsls	r3, r3, #2
 801b4b0:	5cd3      	ldrb	r3, [r2, r3]
 801b4b2:	2b02      	cmp	r3, #2
 801b4b4:	d002      	beq.n	801b4bc <USBD_SetConfig+0x3c>
 801b4b6:	2b03      	cmp	r3, #3
 801b4b8:	d029      	beq.n	801b50e <USBD_SetConfig+0x8e>
 801b4ba:	e071      	b.n	801b5a0 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801b4bc:	4b41      	ldr	r3, [pc, #260]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b4be:	781b      	ldrb	r3, [r3, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d01f      	beq.n	801b504 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 801b4c4:	4b3f      	ldr	r3, [pc, #252]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b4c6:	781b      	ldrb	r3, [r3, #0]
 801b4c8:	001a      	movs	r2, r3
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801b4ce:	687a      	ldr	r2, [r7, #4]
 801b4d0:	23a7      	movs	r3, #167	@ 0xa7
 801b4d2:	009b      	lsls	r3, r3, #2
 801b4d4:	2103      	movs	r1, #3
 801b4d6:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801b4d8:	4b3a      	ldr	r3, [pc, #232]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b4da:	781a      	ldrb	r2, [r3, #0]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	0011      	movs	r1, r2
 801b4e0:	0018      	movs	r0, r3
 801b4e2:	f7ff f8c6 	bl	801a672 <USBD_SetClassConfig>
 801b4e6:	0003      	movs	r3, r0
 801b4e8:	2b02      	cmp	r3, #2
 801b4ea:	d106      	bne.n	801b4fa <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 801b4ec:	683a      	ldr	r2, [r7, #0]
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	0011      	movs	r1, r2
 801b4f2:	0018      	movs	r0, r3
 801b4f4:	f000 f951 	bl	801b79a <USBD_CtlError>
            return;
 801b4f8:	e060      	b.n	801b5bc <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	0018      	movs	r0, r3
 801b4fe:	f000 fa34 	bl	801b96a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801b502:	e05b      	b.n	801b5bc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	0018      	movs	r0, r3
 801b508:	f000 fa2f 	bl	801b96a <USBD_CtlSendStatus>
        break;
 801b50c:	e056      	b.n	801b5bc <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801b50e:	4b2d      	ldr	r3, [pc, #180]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b510:	781b      	ldrb	r3, [r3, #0]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d115      	bne.n	801b542 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801b516:	687a      	ldr	r2, [r7, #4]
 801b518:	23a7      	movs	r3, #167	@ 0xa7
 801b51a:	009b      	lsls	r3, r3, #2
 801b51c:	2102      	movs	r1, #2
 801b51e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 801b520:	4b28      	ldr	r3, [pc, #160]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b522:	781b      	ldrb	r3, [r3, #0]
 801b524:	001a      	movs	r2, r3
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801b52a:	4b26      	ldr	r3, [pc, #152]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b52c:	781a      	ldrb	r2, [r3, #0]
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	0011      	movs	r1, r2
 801b532:	0018      	movs	r0, r3
 801b534:	f7ff f8c4 	bl	801a6c0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	0018      	movs	r0, r3
 801b53c:	f000 fa15 	bl	801b96a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801b540:	e03c      	b.n	801b5bc <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 801b542:	4b20      	ldr	r3, [pc, #128]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b544:	781b      	ldrb	r3, [r3, #0]
 801b546:	001a      	movs	r2, r3
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	685b      	ldr	r3, [r3, #4]
 801b54c:	429a      	cmp	r2, r3
 801b54e:	d022      	beq.n	801b596 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	685b      	ldr	r3, [r3, #4]
 801b554:	b2da      	uxtb	r2, r3
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	0011      	movs	r1, r2
 801b55a:	0018      	movs	r0, r3
 801b55c:	f7ff f8b0 	bl	801a6c0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801b560:	4b18      	ldr	r3, [pc, #96]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b562:	781b      	ldrb	r3, [r3, #0]
 801b564:	001a      	movs	r2, r3
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801b56a:	4b16      	ldr	r3, [pc, #88]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b56c:	781a      	ldrb	r2, [r3, #0]
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	0011      	movs	r1, r2
 801b572:	0018      	movs	r0, r3
 801b574:	f7ff f87d 	bl	801a672 <USBD_SetClassConfig>
 801b578:	0003      	movs	r3, r0
 801b57a:	2b02      	cmp	r3, #2
 801b57c:	d106      	bne.n	801b58c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 801b57e:	683a      	ldr	r2, [r7, #0]
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	0011      	movs	r1, r2
 801b584:	0018      	movs	r0, r3
 801b586:	f000 f908 	bl	801b79a <USBD_CtlError>
            return;
 801b58a:	e017      	b.n	801b5bc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	0018      	movs	r0, r3
 801b590:	f000 f9eb 	bl	801b96a <USBD_CtlSendStatus>
        break;
 801b594:	e012      	b.n	801b5bc <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	0018      	movs	r0, r3
 801b59a:	f000 f9e6 	bl	801b96a <USBD_CtlSendStatus>
        break;
 801b59e:	e00d      	b.n	801b5bc <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 801b5a0:	683a      	ldr	r2, [r7, #0]
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	0011      	movs	r1, r2
 801b5a6:	0018      	movs	r0, r3
 801b5a8:	f000 f8f7 	bl	801b79a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801b5ac:	4b05      	ldr	r3, [pc, #20]	@ (801b5c4 <USBD_SetConfig+0x144>)
 801b5ae:	781a      	ldrb	r2, [r3, #0]
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	0011      	movs	r1, r2
 801b5b4:	0018      	movs	r0, r3
 801b5b6:	f7ff f883 	bl	801a6c0 <USBD_ClrClassConfig>
        break;
 801b5ba:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 801b5bc:	46bd      	mov	sp, r7
 801b5be:	b002      	add	sp, #8
 801b5c0:	bd80      	pop	{r7, pc}
 801b5c2:	46c0      	nop			@ (mov r8, r8)
 801b5c4:	20002518 	.word	0x20002518

0801b5c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b082      	sub	sp, #8
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
 801b5d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801b5d2:	683b      	ldr	r3, [r7, #0]
 801b5d4:	88db      	ldrh	r3, [r3, #6]
 801b5d6:	2b01      	cmp	r3, #1
 801b5d8:	d006      	beq.n	801b5e8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 801b5da:	683a      	ldr	r2, [r7, #0]
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	0011      	movs	r1, r2
 801b5e0:	0018      	movs	r0, r3
 801b5e2:	f000 f8da 	bl	801b79a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801b5e6:	e026      	b.n	801b636 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 801b5e8:	687a      	ldr	r2, [r7, #4]
 801b5ea:	23a7      	movs	r3, #167	@ 0xa7
 801b5ec:	009b      	lsls	r3, r3, #2
 801b5ee:	5cd3      	ldrb	r3, [r2, r3]
 801b5f0:	2b02      	cmp	r3, #2
 801b5f2:	dc02      	bgt.n	801b5fa <USBD_GetConfig+0x32>
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	dc03      	bgt.n	801b600 <USBD_GetConfig+0x38>
 801b5f8:	e016      	b.n	801b628 <USBD_GetConfig+0x60>
 801b5fa:	2b03      	cmp	r3, #3
 801b5fc:	d00c      	beq.n	801b618 <USBD_GetConfig+0x50>
 801b5fe:	e013      	b.n	801b628 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	2200      	movs	r2, #0
 801b604:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	3308      	adds	r3, #8
 801b60a:	0019      	movs	r1, r3
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	2201      	movs	r2, #1
 801b610:	0018      	movs	r0, r3
 801b612:	f000 f940 	bl	801b896 <USBD_CtlSendData>
        break;
 801b616:	e00e      	b.n	801b636 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	1d19      	adds	r1, r3, #4
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	2201      	movs	r2, #1
 801b620:	0018      	movs	r0, r3
 801b622:	f000 f938 	bl	801b896 <USBD_CtlSendData>
        break;
 801b626:	e006      	b.n	801b636 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 801b628:	683a      	ldr	r2, [r7, #0]
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	0011      	movs	r1, r2
 801b62e:	0018      	movs	r0, r3
 801b630:	f000 f8b3 	bl	801b79a <USBD_CtlError>
        break;
 801b634:	46c0      	nop			@ (mov r8, r8)
}
 801b636:	46c0      	nop			@ (mov r8, r8)
 801b638:	46bd      	mov	sp, r7
 801b63a:	b002      	add	sp, #8
 801b63c:	bd80      	pop	{r7, pc}

0801b63e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801b63e:	b580      	push	{r7, lr}
 801b640:	b082      	sub	sp, #8
 801b642:	af00      	add	r7, sp, #0
 801b644:	6078      	str	r0, [r7, #4]
 801b646:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b648:	687a      	ldr	r2, [r7, #4]
 801b64a:	23a7      	movs	r3, #167	@ 0xa7
 801b64c:	009b      	lsls	r3, r3, #2
 801b64e:	5cd3      	ldrb	r3, [r2, r3]
 801b650:	3b01      	subs	r3, #1
 801b652:	2b02      	cmp	r3, #2
 801b654:	d822      	bhi.n	801b69c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	88db      	ldrh	r3, [r3, #6]
 801b65a:	2b02      	cmp	r3, #2
 801b65c:	d006      	beq.n	801b66c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 801b65e:	683a      	ldr	r2, [r7, #0]
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	0011      	movs	r1, r2
 801b664:	0018      	movs	r0, r3
 801b666:	f000 f898 	bl	801b79a <USBD_CtlError>
        break;
 801b66a:	e01e      	b.n	801b6aa <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801b66c:	687b      	ldr	r3, [r7, #4]
 801b66e:	2201      	movs	r2, #1
 801b670:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801b672:	687a      	ldr	r2, [r7, #4]
 801b674:	23a9      	movs	r3, #169	@ 0xa9
 801b676:	009b      	lsls	r3, r3, #2
 801b678:	58d3      	ldr	r3, [r2, r3]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	d005      	beq.n	801b68a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	68db      	ldr	r3, [r3, #12]
 801b682:	2202      	movs	r2, #2
 801b684:	431a      	orrs	r2, r3
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	330c      	adds	r3, #12
 801b68e:	0019      	movs	r1, r3
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	2202      	movs	r2, #2
 801b694:	0018      	movs	r0, r3
 801b696:	f000 f8fe 	bl	801b896 <USBD_CtlSendData>
      break;
 801b69a:	e006      	b.n	801b6aa <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 801b69c:	683a      	ldr	r2, [r7, #0]
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	0011      	movs	r1, r2
 801b6a2:	0018      	movs	r0, r3
 801b6a4:	f000 f879 	bl	801b79a <USBD_CtlError>
      break;
 801b6a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 801b6aa:	46c0      	nop			@ (mov r8, r8)
 801b6ac:	46bd      	mov	sp, r7
 801b6ae:	b002      	add	sp, #8
 801b6b0:	bd80      	pop	{r7, pc}

0801b6b2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b6b2:	b580      	push	{r7, lr}
 801b6b4:	b082      	sub	sp, #8
 801b6b6:	af00      	add	r7, sp, #0
 801b6b8:	6078      	str	r0, [r7, #4]
 801b6ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b6bc:	683b      	ldr	r3, [r7, #0]
 801b6be:	885b      	ldrh	r3, [r3, #2]
 801b6c0:	2b01      	cmp	r3, #1
 801b6c2:	d108      	bne.n	801b6d6 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 801b6c4:	687a      	ldr	r2, [r7, #4]
 801b6c6:	23a9      	movs	r3, #169	@ 0xa9
 801b6c8:	009b      	lsls	r3, r3, #2
 801b6ca:	2101      	movs	r1, #1
 801b6cc:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	0018      	movs	r0, r3
 801b6d2:	f000 f94a 	bl	801b96a <USBD_CtlSendStatus>
  }
}
 801b6d6:	46c0      	nop			@ (mov r8, r8)
 801b6d8:	46bd      	mov	sp, r7
 801b6da:	b002      	add	sp, #8
 801b6dc:	bd80      	pop	{r7, pc}

0801b6de <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801b6de:	b580      	push	{r7, lr}
 801b6e0:	b082      	sub	sp, #8
 801b6e2:	af00      	add	r7, sp, #0
 801b6e4:	6078      	str	r0, [r7, #4]
 801b6e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801b6e8:	687a      	ldr	r2, [r7, #4]
 801b6ea:	23a7      	movs	r3, #167	@ 0xa7
 801b6ec:	009b      	lsls	r3, r3, #2
 801b6ee:	5cd3      	ldrb	r3, [r2, r3]
 801b6f0:	3b01      	subs	r3, #1
 801b6f2:	2b02      	cmp	r3, #2
 801b6f4:	d80d      	bhi.n	801b712 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801b6f6:	683b      	ldr	r3, [r7, #0]
 801b6f8:	885b      	ldrh	r3, [r3, #2]
 801b6fa:	2b01      	cmp	r3, #1
 801b6fc:	d110      	bne.n	801b720 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 801b6fe:	687a      	ldr	r2, [r7, #4]
 801b700:	23a9      	movs	r3, #169	@ 0xa9
 801b702:	009b      	lsls	r3, r3, #2
 801b704:	2100      	movs	r1, #0
 801b706:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	0018      	movs	r0, r3
 801b70c:	f000 f92d 	bl	801b96a <USBD_CtlSendStatus>
      }
      break;
 801b710:	e006      	b.n	801b720 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 801b712:	683a      	ldr	r2, [r7, #0]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	0011      	movs	r1, r2
 801b718:	0018      	movs	r0, r3
 801b71a:	f000 f83e 	bl	801b79a <USBD_CtlError>
      break;
 801b71e:	e000      	b.n	801b722 <USBD_ClrFeature+0x44>
      break;
 801b720:	46c0      	nop			@ (mov r8, r8)
  }
}
 801b722:	46c0      	nop			@ (mov r8, r8)
 801b724:	46bd      	mov	sp, r7
 801b726:	b002      	add	sp, #8
 801b728:	bd80      	pop	{r7, pc}

0801b72a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801b72a:	b580      	push	{r7, lr}
 801b72c:	b082      	sub	sp, #8
 801b72e:	af00      	add	r7, sp, #0
 801b730:	6078      	str	r0, [r7, #4]
 801b732:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801b734:	683b      	ldr	r3, [r7, #0]
 801b736:	781a      	ldrb	r2, [r3, #0]
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801b73c:	683b      	ldr	r3, [r7, #0]
 801b73e:	785a      	ldrb	r2, [r3, #1]
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	3302      	adds	r3, #2
 801b748:	781b      	ldrb	r3, [r3, #0]
 801b74a:	001a      	movs	r2, r3
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	3303      	adds	r3, #3
 801b750:	781b      	ldrb	r3, [r3, #0]
 801b752:	021b      	lsls	r3, r3, #8
 801b754:	b29b      	uxth	r3, r3
 801b756:	18d3      	adds	r3, r2, r3
 801b758:	b29a      	uxth	r2, r3
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801b75e:	683b      	ldr	r3, [r7, #0]
 801b760:	3304      	adds	r3, #4
 801b762:	781b      	ldrb	r3, [r3, #0]
 801b764:	001a      	movs	r2, r3
 801b766:	683b      	ldr	r3, [r7, #0]
 801b768:	3305      	adds	r3, #5
 801b76a:	781b      	ldrb	r3, [r3, #0]
 801b76c:	021b      	lsls	r3, r3, #8
 801b76e:	b29b      	uxth	r3, r3
 801b770:	18d3      	adds	r3, r2, r3
 801b772:	b29a      	uxth	r2, r3
 801b774:	687b      	ldr	r3, [r7, #4]
 801b776:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801b778:	683b      	ldr	r3, [r7, #0]
 801b77a:	3306      	adds	r3, #6
 801b77c:	781b      	ldrb	r3, [r3, #0]
 801b77e:	001a      	movs	r2, r3
 801b780:	683b      	ldr	r3, [r7, #0]
 801b782:	3307      	adds	r3, #7
 801b784:	781b      	ldrb	r3, [r3, #0]
 801b786:	021b      	lsls	r3, r3, #8
 801b788:	b29b      	uxth	r3, r3
 801b78a:	18d3      	adds	r3, r2, r3
 801b78c:	b29a      	uxth	r2, r3
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	80da      	strh	r2, [r3, #6]

}
 801b792:	46c0      	nop			@ (mov r8, r8)
 801b794:	46bd      	mov	sp, r7
 801b796:	b002      	add	sp, #8
 801b798:	bd80      	pop	{r7, pc}

0801b79a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801b79a:	b580      	push	{r7, lr}
 801b79c:	b082      	sub	sp, #8
 801b79e:	af00      	add	r7, sp, #0
 801b7a0:	6078      	str	r0, [r7, #4]
 801b7a2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801b7a4:	687b      	ldr	r3, [r7, #4]
 801b7a6:	2180      	movs	r1, #128	@ 0x80
 801b7a8:	0018      	movs	r0, r3
 801b7aa:	f000 fd1e 	bl	801c1ea <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	2100      	movs	r1, #0
 801b7b2:	0018      	movs	r0, r3
 801b7b4:	f000 fd19 	bl	801c1ea <USBD_LL_StallEP>
}
 801b7b8:	46c0      	nop			@ (mov r8, r8)
 801b7ba:	46bd      	mov	sp, r7
 801b7bc:	b002      	add	sp, #8
 801b7be:	bd80      	pop	{r7, pc}

0801b7c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801b7c0:	b590      	push	{r4, r7, lr}
 801b7c2:	b087      	sub	sp, #28
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	60f8      	str	r0, [r7, #12]
 801b7c8:	60b9      	str	r1, [r7, #8]
 801b7ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801b7cc:	2417      	movs	r4, #23
 801b7ce:	193b      	adds	r3, r7, r4
 801b7d0:	2200      	movs	r2, #0
 801b7d2:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 801b7d4:	68fb      	ldr	r3, [r7, #12]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d03c      	beq.n	801b854 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	0018      	movs	r0, r3
 801b7de:	f000 f83d 	bl	801b85c <USBD_GetLen>
 801b7e2:	0003      	movs	r3, r0
 801b7e4:	3301      	adds	r3, #1
 801b7e6:	b29b      	uxth	r3, r3
 801b7e8:	18db      	adds	r3, r3, r3
 801b7ea:	b29a      	uxth	r2, r3
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801b7f0:	193b      	adds	r3, r7, r4
 801b7f2:	781b      	ldrb	r3, [r3, #0]
 801b7f4:	193a      	adds	r2, r7, r4
 801b7f6:	1c59      	adds	r1, r3, #1
 801b7f8:	7011      	strb	r1, [r2, #0]
 801b7fa:	001a      	movs	r2, r3
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	189b      	adds	r3, r3, r2
 801b800:	687a      	ldr	r2, [r7, #4]
 801b802:	7812      	ldrb	r2, [r2, #0]
 801b804:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801b806:	193b      	adds	r3, r7, r4
 801b808:	781b      	ldrb	r3, [r3, #0]
 801b80a:	193a      	adds	r2, r7, r4
 801b80c:	1c59      	adds	r1, r3, #1
 801b80e:	7011      	strb	r1, [r2, #0]
 801b810:	001a      	movs	r2, r3
 801b812:	68bb      	ldr	r3, [r7, #8]
 801b814:	189b      	adds	r3, r3, r2
 801b816:	2203      	movs	r2, #3
 801b818:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801b81a:	e017      	b.n	801b84c <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	1c5a      	adds	r2, r3, #1
 801b820:	60fa      	str	r2, [r7, #12]
 801b822:	2417      	movs	r4, #23
 801b824:	193a      	adds	r2, r7, r4
 801b826:	7812      	ldrb	r2, [r2, #0]
 801b828:	1939      	adds	r1, r7, r4
 801b82a:	1c50      	adds	r0, r2, #1
 801b82c:	7008      	strb	r0, [r1, #0]
 801b82e:	0011      	movs	r1, r2
 801b830:	68ba      	ldr	r2, [r7, #8]
 801b832:	1852      	adds	r2, r2, r1
 801b834:	781b      	ldrb	r3, [r3, #0]
 801b836:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801b838:	193b      	adds	r3, r7, r4
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	193a      	adds	r2, r7, r4
 801b83e:	1c59      	adds	r1, r3, #1
 801b840:	7011      	strb	r1, [r2, #0]
 801b842:	001a      	movs	r2, r3
 801b844:	68bb      	ldr	r3, [r7, #8]
 801b846:	189b      	adds	r3, r3, r2
 801b848:	2200      	movs	r2, #0
 801b84a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	781b      	ldrb	r3, [r3, #0]
 801b850:	2b00      	cmp	r3, #0
 801b852:	d1e3      	bne.n	801b81c <USBD_GetString+0x5c>
    }
  }
}
 801b854:	46c0      	nop			@ (mov r8, r8)
 801b856:	46bd      	mov	sp, r7
 801b858:	b007      	add	sp, #28
 801b85a:	bd90      	pop	{r4, r7, pc}

0801b85c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801b85c:	b580      	push	{r7, lr}
 801b85e:	b084      	sub	sp, #16
 801b860:	af00      	add	r7, sp, #0
 801b862:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801b864:	230f      	movs	r3, #15
 801b866:	18fb      	adds	r3, r7, r3
 801b868:	2200      	movs	r2, #0
 801b86a:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 801b86c:	e008      	b.n	801b880 <USBD_GetLen+0x24>
  {
    len++;
 801b86e:	210f      	movs	r1, #15
 801b870:	187b      	adds	r3, r7, r1
 801b872:	781a      	ldrb	r2, [r3, #0]
 801b874:	187b      	adds	r3, r7, r1
 801b876:	3201      	adds	r2, #1
 801b878:	701a      	strb	r2, [r3, #0]
    buf++;
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	3301      	adds	r3, #1
 801b87e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	2b00      	cmp	r3, #0
 801b886:	d1f2      	bne.n	801b86e <USBD_GetLen+0x12>
  }

  return len;
 801b888:	230f      	movs	r3, #15
 801b88a:	18fb      	adds	r3, r7, r3
 801b88c:	781b      	ldrb	r3, [r3, #0]
}
 801b88e:	0018      	movs	r0, r3
 801b890:	46bd      	mov	sp, r7
 801b892:	b004      	add	sp, #16
 801b894:	bd80      	pop	{r7, pc}

0801b896 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801b896:	b580      	push	{r7, lr}
 801b898:	b084      	sub	sp, #16
 801b89a:	af00      	add	r7, sp, #0
 801b89c:	60f8      	str	r0, [r7, #12]
 801b89e:	60b9      	str	r1, [r7, #8]
 801b8a0:	1dbb      	adds	r3, r7, #6
 801b8a2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801b8a4:	68fa      	ldr	r2, [r7, #12]
 801b8a6:	23a5      	movs	r3, #165	@ 0xa5
 801b8a8:	009b      	lsls	r3, r3, #2
 801b8aa:	2102      	movs	r1, #2
 801b8ac:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 801b8ae:	1dbb      	adds	r3, r7, #6
 801b8b0:	881a      	ldrh	r2, [r3, #0]
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801b8b6:	1dbb      	adds	r3, r7, #6
 801b8b8:	881a      	ldrh	r2, [r3, #0]
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b8be:	1dbb      	adds	r3, r7, #6
 801b8c0:	881b      	ldrh	r3, [r3, #0]
 801b8c2:	68ba      	ldr	r2, [r7, #8]
 801b8c4:	68f8      	ldr	r0, [r7, #12]
 801b8c6:	2100      	movs	r1, #0
 801b8c8:	f000 fd41 	bl	801c34e <USBD_LL_Transmit>

  return USBD_OK;
 801b8cc:	2300      	movs	r3, #0
}
 801b8ce:	0018      	movs	r0, r3
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	b004      	add	sp, #16
 801b8d4:	bd80      	pop	{r7, pc}

0801b8d6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801b8d6:	b580      	push	{r7, lr}
 801b8d8:	b084      	sub	sp, #16
 801b8da:	af00      	add	r7, sp, #0
 801b8dc:	60f8      	str	r0, [r7, #12]
 801b8de:	60b9      	str	r1, [r7, #8]
 801b8e0:	1dbb      	adds	r3, r7, #6
 801b8e2:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801b8e4:	1dbb      	adds	r3, r7, #6
 801b8e6:	881b      	ldrh	r3, [r3, #0]
 801b8e8:	68ba      	ldr	r2, [r7, #8]
 801b8ea:	68f8      	ldr	r0, [r7, #12]
 801b8ec:	2100      	movs	r1, #0
 801b8ee:	f000 fd2e 	bl	801c34e <USBD_LL_Transmit>

  return USBD_OK;
 801b8f2:	2300      	movs	r3, #0
}
 801b8f4:	0018      	movs	r0, r3
 801b8f6:	46bd      	mov	sp, r7
 801b8f8:	b004      	add	sp, #16
 801b8fa:	bd80      	pop	{r7, pc}

0801b8fc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801b8fc:	b580      	push	{r7, lr}
 801b8fe:	b084      	sub	sp, #16
 801b900:	af00      	add	r7, sp, #0
 801b902:	60f8      	str	r0, [r7, #12]
 801b904:	60b9      	str	r1, [r7, #8]
 801b906:	1dbb      	adds	r3, r7, #6
 801b908:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801b90a:	68fa      	ldr	r2, [r7, #12]
 801b90c:	23a5      	movs	r3, #165	@ 0xa5
 801b90e:	009b      	lsls	r3, r3, #2
 801b910:	2103      	movs	r1, #3
 801b912:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801b914:	1dbb      	adds	r3, r7, #6
 801b916:	8819      	ldrh	r1, [r3, #0]
 801b918:	68fa      	ldr	r2, [r7, #12]
 801b91a:	23ae      	movs	r3, #174	@ 0xae
 801b91c:	005b      	lsls	r3, r3, #1
 801b91e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801b920:	1dbb      	adds	r3, r7, #6
 801b922:	8819      	ldrh	r1, [r3, #0]
 801b924:	68fa      	ldr	r2, [r7, #12]
 801b926:	23b0      	movs	r3, #176	@ 0xb0
 801b928:	005b      	lsls	r3, r3, #1
 801b92a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b92c:	1dbb      	adds	r3, r7, #6
 801b92e:	881b      	ldrh	r3, [r3, #0]
 801b930:	68ba      	ldr	r2, [r7, #8]
 801b932:	68f8      	ldr	r0, [r7, #12]
 801b934:	2100      	movs	r1, #0
 801b936:	f000 fd41 	bl	801c3bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b93a:	2300      	movs	r3, #0
}
 801b93c:	0018      	movs	r0, r3
 801b93e:	46bd      	mov	sp, r7
 801b940:	b004      	add	sp, #16
 801b942:	bd80      	pop	{r7, pc}

0801b944 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b084      	sub	sp, #16
 801b948:	af00      	add	r7, sp, #0
 801b94a:	60f8      	str	r0, [r7, #12]
 801b94c:	60b9      	str	r1, [r7, #8]
 801b94e:	1dbb      	adds	r3, r7, #6
 801b950:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801b952:	1dbb      	adds	r3, r7, #6
 801b954:	881b      	ldrh	r3, [r3, #0]
 801b956:	68ba      	ldr	r2, [r7, #8]
 801b958:	68f8      	ldr	r0, [r7, #12]
 801b95a:	2100      	movs	r1, #0
 801b95c:	f000 fd2e 	bl	801c3bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b960:	2300      	movs	r3, #0
}
 801b962:	0018      	movs	r0, r3
 801b964:	46bd      	mov	sp, r7
 801b966:	b004      	add	sp, #16
 801b968:	bd80      	pop	{r7, pc}

0801b96a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801b96a:	b580      	push	{r7, lr}
 801b96c:	b082      	sub	sp, #8
 801b96e:	af00      	add	r7, sp, #0
 801b970:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801b972:	687a      	ldr	r2, [r7, #4]
 801b974:	23a5      	movs	r3, #165	@ 0xa5
 801b976:	009b      	lsls	r3, r3, #2
 801b978:	2104      	movs	r1, #4
 801b97a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801b97c:	6878      	ldr	r0, [r7, #4]
 801b97e:	2300      	movs	r3, #0
 801b980:	2200      	movs	r2, #0
 801b982:	2100      	movs	r1, #0
 801b984:	f000 fce3 	bl	801c34e <USBD_LL_Transmit>

  return USBD_OK;
 801b988:	2300      	movs	r3, #0
}
 801b98a:	0018      	movs	r0, r3
 801b98c:	46bd      	mov	sp, r7
 801b98e:	b002      	add	sp, #8
 801b990:	bd80      	pop	{r7, pc}

0801b992 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801b992:	b580      	push	{r7, lr}
 801b994:	b082      	sub	sp, #8
 801b996:	af00      	add	r7, sp, #0
 801b998:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801b99a:	687a      	ldr	r2, [r7, #4]
 801b99c:	23a5      	movs	r3, #165	@ 0xa5
 801b99e:	009b      	lsls	r3, r3, #2
 801b9a0:	2105      	movs	r1, #5
 801b9a2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801b9a4:	6878      	ldr	r0, [r7, #4]
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	2100      	movs	r1, #0
 801b9ac:	f000 fd06 	bl	801c3bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 801b9b0:	2300      	movs	r3, #0
}
 801b9b2:	0018      	movs	r0, r3
 801b9b4:	46bd      	mov	sp, r7
 801b9b6:	b002      	add	sp, #8
 801b9b8:	bd80      	pop	{r7, pc}
	...

0801b9bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801b9c0:	4914      	ldr	r1, [pc, #80]	@ (801ba14 <MX_USB_DEVICE_Init+0x58>)
 801b9c2:	4b15      	ldr	r3, [pc, #84]	@ (801ba18 <MX_USB_DEVICE_Init+0x5c>)
 801b9c4:	2200      	movs	r2, #0
 801b9c6:	0018      	movs	r0, r3
 801b9c8:	f7fe fdec 	bl	801a5a4 <USBD_Init>
 801b9cc:	1e03      	subs	r3, r0, #0
 801b9ce:	d001      	beq.n	801b9d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801b9d0:	f7ec f8c6 	bl	8007b60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801b9d4:	4a11      	ldr	r2, [pc, #68]	@ (801ba1c <MX_USB_DEVICE_Init+0x60>)
 801b9d6:	4b10      	ldr	r3, [pc, #64]	@ (801ba18 <MX_USB_DEVICE_Init+0x5c>)
 801b9d8:	0011      	movs	r1, r2
 801b9da:	0018      	movs	r0, r3
 801b9dc:	f7fe fe13 	bl	801a606 <USBD_RegisterClass>
 801b9e0:	1e03      	subs	r3, r0, #0
 801b9e2:	d001      	beq.n	801b9e8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 801b9e4:	f7ec f8bc 	bl	8007b60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801b9e8:	4a0d      	ldr	r2, [pc, #52]	@ (801ba20 <MX_USB_DEVICE_Init+0x64>)
 801b9ea:	4b0b      	ldr	r3, [pc, #44]	@ (801ba18 <MX_USB_DEVICE_Init+0x5c>)
 801b9ec:	0011      	movs	r1, r2
 801b9ee:	0018      	movs	r0, r3
 801b9f0:	f7fe fd28 	bl	801a444 <USBD_CDC_RegisterInterface>
 801b9f4:	1e03      	subs	r3, r0, #0
 801b9f6:	d001      	beq.n	801b9fc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 801b9f8:	f7ec f8b2 	bl	8007b60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801b9fc:	4b06      	ldr	r3, [pc, #24]	@ (801ba18 <MX_USB_DEVICE_Init+0x5c>)
 801b9fe:	0018      	movs	r0, r3
 801ba00:	f7fe fe21 	bl	801a646 <USBD_Start>
 801ba04:	1e03      	subs	r3, r0, #0
 801ba06:	d001      	beq.n	801ba0c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 801ba08:	f7ec f8aa 	bl	8007b60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801ba0c:	46c0      	nop			@ (mov r8, r8)
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	bd80      	pop	{r7, pc}
 801ba12:	46c0      	nop			@ (mov r8, r8)
 801ba14:	20000200 	.word	0x20000200
 801ba18:	2000251c 	.word	0x2000251c
 801ba1c:	200000ec 	.word	0x200000ec
 801ba20:	200001f0 	.word	0x200001f0

0801ba24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801ba24:	b580      	push	{r7, lr}
 801ba26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801ba28:	4907      	ldr	r1, [pc, #28]	@ (801ba48 <CDC_Init_FS+0x24>)
 801ba2a:	4b08      	ldr	r3, [pc, #32]	@ (801ba4c <CDC_Init_FS+0x28>)
 801ba2c:	2200      	movs	r2, #0
 801ba2e:	0018      	movs	r0, r3
 801ba30:	f7fe fd23 	bl	801a47a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801ba34:	4a06      	ldr	r2, [pc, #24]	@ (801ba50 <CDC_Init_FS+0x2c>)
 801ba36:	4b05      	ldr	r3, [pc, #20]	@ (801ba4c <CDC_Init_FS+0x28>)
 801ba38:	0011      	movs	r1, r2
 801ba3a:	0018      	movs	r0, r3
 801ba3c:	f7fe fd39 	bl	801a4b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801ba40:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801ba42:	0018      	movs	r0, r3
 801ba44:	46bd      	mov	sp, r7
 801ba46:	bd80      	pop	{r7, pc}
 801ba48:	20002ca0 	.word	0x20002ca0
 801ba4c:	2000251c 	.word	0x2000251c
 801ba50:	200028a0 	.word	0x200028a0

0801ba54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801ba54:	b580      	push	{r7, lr}
 801ba56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801ba58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801ba5a:	0018      	movs	r0, r3
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	bd80      	pop	{r7, pc}

0801ba60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b082      	sub	sp, #8
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6039      	str	r1, [r7, #0]
 801ba68:	0011      	movs	r1, r2
 801ba6a:	1dfb      	adds	r3, r7, #7
 801ba6c:	1c02      	adds	r2, r0, #0
 801ba6e:	701a      	strb	r2, [r3, #0]
 801ba70:	1d3b      	adds	r3, r7, #4
 801ba72:	1c0a      	adds	r2, r1, #0
 801ba74:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801ba76:	1dfb      	adds	r3, r7, #7
 801ba78:	781b      	ldrb	r3, [r3, #0]
 801ba7a:	2b23      	cmp	r3, #35	@ 0x23
 801ba7c:	d804      	bhi.n	801ba88 <CDC_Control_FS+0x28>
 801ba7e:	009a      	lsls	r2, r3, #2
 801ba80:	4b04      	ldr	r3, [pc, #16]	@ (801ba94 <CDC_Control_FS+0x34>)
 801ba82:	18d3      	adds	r3, r2, r3
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801ba88:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 801ba8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801ba8c:	0018      	movs	r0, r3
 801ba8e:	46bd      	mov	sp, r7
 801ba90:	b002      	add	sp, #8
 801ba92:	bd80      	pop	{r7, pc}
 801ba94:	08023d64 	.word	0x08023d64

0801ba98 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ba98:	b580      	push	{r7, lr}
 801ba9a:	b082      	sub	sp, #8
 801ba9c:	af00      	add	r7, sp, #0
 801ba9e:	6078      	str	r0, [r7, #4]
 801baa0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 801baa2:	4b12      	ldr	r3, [pc, #72]	@ (801baec <CDC_Receive_FS+0x54>)
 801baa4:	781b      	ldrb	r3, [r3, #0]
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d013      	beq.n	801bad2 <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 801baaa:	683b      	ldr	r3, [r7, #0]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	b29a      	uxth	r2, r3
 801bab0:	2301      	movs	r3, #1
 801bab2:	425b      	negs	r3, r3
 801bab4:	6879      	ldr	r1, [r7, #4]
 801bab6:	480e      	ldr	r0, [pc, #56]	@ (801baf0 <CDC_Receive_FS+0x58>)
 801bab8:	f7fa fa46 	bl	8015f48 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801babc:	687a      	ldr	r2, [r7, #4]
 801babe:	4b0d      	ldr	r3, [pc, #52]	@ (801baf4 <CDC_Receive_FS+0x5c>)
 801bac0:	0011      	movs	r1, r2
 801bac2:	0018      	movs	r0, r3
 801bac4:	f7fe fcf5 	bl	801a4b2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bac8:	4b0a      	ldr	r3, [pc, #40]	@ (801baf4 <CDC_Receive_FS+0x5c>)
 801baca:	0018      	movs	r0, r3
 801bacc:	f7fe fd3c 	bl	801a548 <USBD_CDC_ReceivePacket>
 801bad0:	e006      	b.n	801bae0 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 801bad2:	683b      	ldr	r3, [r7, #0]
 801bad4:	681a      	ldr	r2, [r3, #0]
 801bad6:	4b08      	ldr	r3, [pc, #32]	@ (801baf8 <CDC_Receive_FS+0x60>)
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	18d2      	adds	r2, r2, r3
 801badc:	4b06      	ldr	r3, [pc, #24]	@ (801baf8 <CDC_Receive_FS+0x60>)
 801bade:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 801bae0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801bae2:	0018      	movs	r0, r3
 801bae4:	46bd      	mov	sp, r7
 801bae6:	b002      	add	sp, #8
 801bae8:	bd80      	pop	{r7, pc}
 801baea:	46c0      	nop			@ (mov r8, r8)
 801baec:	200027e0 	.word	0x200027e0
 801baf0:	200027e4 	.word	0x200027e4
 801baf4:	2000251c 	.word	0x2000251c
 801baf8:	2000289c 	.word	0x2000289c

0801bafc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801bafc:	b5b0      	push	{r4, r5, r7, lr}
 801bafe:	b084      	sub	sp, #16
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	6078      	str	r0, [r7, #4]
 801bb04:	000a      	movs	r2, r1
 801bb06:	1cbb      	adds	r3, r7, #2
 801bb08:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 801bb0a:	230f      	movs	r3, #15
 801bb0c:	18fb      	adds	r3, r7, r3
 801bb0e:	2200      	movs	r2, #0
 801bb10:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801bb12:	4a11      	ldr	r2, [pc, #68]	@ (801bb58 <CDC_Transmit_FS+0x5c>)
 801bb14:	23ae      	movs	r3, #174	@ 0xae
 801bb16:	009b      	lsls	r3, r3, #2
 801bb18:	58d3      	ldr	r3, [r2, r3]
 801bb1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801bb1c:	68ba      	ldr	r2, [r7, #8]
 801bb1e:	2385      	movs	r3, #133	@ 0x85
 801bb20:	009b      	lsls	r3, r3, #2
 801bb22:	58d3      	ldr	r3, [r2, r3]
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d001      	beq.n	801bb2c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 801bb28:	2301      	movs	r3, #1
 801bb2a:	e010      	b.n	801bb4e <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801bb2c:	1cbb      	adds	r3, r7, #2
 801bb2e:	881a      	ldrh	r2, [r3, #0]
 801bb30:	6879      	ldr	r1, [r7, #4]
 801bb32:	4b09      	ldr	r3, [pc, #36]	@ (801bb58 <CDC_Transmit_FS+0x5c>)
 801bb34:	0018      	movs	r0, r3
 801bb36:	f7fe fca0 	bl	801a47a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801bb3a:	250f      	movs	r5, #15
 801bb3c:	197c      	adds	r4, r7, r5
 801bb3e:	4b06      	ldr	r3, [pc, #24]	@ (801bb58 <CDC_Transmit_FS+0x5c>)
 801bb40:	0018      	movs	r0, r3
 801bb42:	f7fe fcca 	bl	801a4da <USBD_CDC_TransmitPacket>
 801bb46:	0003      	movs	r3, r0
 801bb48:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 801bb4a:	197b      	adds	r3, r7, r5
 801bb4c:	781b      	ldrb	r3, [r3, #0]
}
 801bb4e:	0018      	movs	r0, r3
 801bb50:	46bd      	mov	sp, r7
 801bb52:	b004      	add	sp, #16
 801bb54:	bdb0      	pop	{r4, r5, r7, pc}
 801bb56:	46c0      	nop			@ (mov r8, r8)
 801bb58:	2000251c 	.word	0x2000251c

0801bb5c <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	af00      	add	r7, sp, #0
  ESPProg = true;
 801bb60:	4b02      	ldr	r3, [pc, #8]	@ (801bb6c <EnableESPProg+0x10>)
 801bb62:	2201      	movs	r2, #1
 801bb64:	701a      	strb	r2, [r3, #0]
}
 801bb66:	46c0      	nop			@ (mov r8, r8)
 801bb68:	46bd      	mov	sp, r7
 801bb6a:	bd80      	pop	{r7, pc}
 801bb6c:	200027e0 	.word	0x200027e0

0801bb70 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 801bb70:	b580      	push	{r7, lr}
 801bb72:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801bb74:	4b01      	ldr	r3, [pc, #4]	@ (801bb7c <GetUsbRxPointer+0xc>)
}
 801bb76:	0018      	movs	r0, r3
 801bb78:	46bd      	mov	sp, r7
 801bb7a:	bd80      	pop	{r7, pc}
 801bb7c:	200028a0 	.word	0x200028a0

0801bb80 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 801bb80:	b580      	push	{r7, lr}
 801bb82:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801bb84:	4b07      	ldr	r3, [pc, #28]	@ (801bba4 <ResetUsbRxDataSize+0x24>)
 801bb86:	2200      	movs	r2, #0
 801bb88:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 801bb8a:	4a07      	ldr	r2, [pc, #28]	@ (801bba8 <ResetUsbRxDataSize+0x28>)
 801bb8c:	4b07      	ldr	r3, [pc, #28]	@ (801bbac <ResetUsbRxDataSize+0x2c>)
 801bb8e:	0011      	movs	r1, r2
 801bb90:	0018      	movs	r0, r3
 801bb92:	f7fe fc8e 	bl	801a4b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bb96:	4b05      	ldr	r3, [pc, #20]	@ (801bbac <ResetUsbRxDataSize+0x2c>)
 801bb98:	0018      	movs	r0, r3
 801bb9a:	f7fe fcd5 	bl	801a548 <USBD_CDC_ReceivePacket>
}
 801bb9e:	46c0      	nop			@ (mov r8, r8)
 801bba0:	46bd      	mov	sp, r7
 801bba2:	bd80      	pop	{r7, pc}
 801bba4:	2000289c 	.word	0x2000289c
 801bba8:	200028a0 	.word	0x200028a0
 801bbac:	2000251c 	.word	0x2000251c

0801bbb0 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 801bbb0:	b580      	push	{r7, lr}
 801bbb2:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 801bbb4:	4b02      	ldr	r3, [pc, #8]	@ (801bbc0 <GetUsbRxDataSize+0x10>)
 801bbb6:	681b      	ldr	r3, [r3, #0]
}
 801bbb8:	0018      	movs	r0, r3
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	bd80      	pop	{r7, pc}
 801bbbe:	46c0      	nop			@ (mov r8, r8)
 801bbc0:	2000289c 	.word	0x2000289c

0801bbc4 <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 801bbc4:	b580      	push	{r7, lr}
 801bbc6:	b082      	sub	sp, #8
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 801bbcc:	687a      	ldr	r2, [r7, #4]
 801bbce:	4b07      	ldr	r3, [pc, #28]	@ (801bbec <GetUsbRxNextChunk+0x28>)
 801bbd0:	18d2      	adds	r2, r2, r3
 801bbd2:	4b07      	ldr	r3, [pc, #28]	@ (801bbf0 <GetUsbRxNextChunk+0x2c>)
 801bbd4:	0011      	movs	r1, r2
 801bbd6:	0018      	movs	r0, r3
 801bbd8:	f7fe fc6b 	bl	801a4b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801bbdc:	4b04      	ldr	r3, [pc, #16]	@ (801bbf0 <GetUsbRxNextChunk+0x2c>)
 801bbde:	0018      	movs	r0, r3
 801bbe0:	f7fe fcb2 	bl	801a548 <USBD_CDC_ReceivePacket>
}
 801bbe4:	46c0      	nop			@ (mov r8, r8)
 801bbe6:	46bd      	mov	sp, r7
 801bbe8:	b002      	add	sp, #8
 801bbea:	bd80      	pop	{r7, pc}
 801bbec:	200028a0 	.word	0x200028a0
 801bbf0:	2000251c 	.word	0x2000251c

0801bbf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bbf4:	b580      	push	{r7, lr}
 801bbf6:	b082      	sub	sp, #8
 801bbf8:	af00      	add	r7, sp, #0
 801bbfa:	0002      	movs	r2, r0
 801bbfc:	6039      	str	r1, [r7, #0]
 801bbfe:	1dfb      	adds	r3, r7, #7
 801bc00:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801bc02:	683b      	ldr	r3, [r7, #0]
 801bc04:	2212      	movs	r2, #18
 801bc06:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801bc08:	4b02      	ldr	r3, [pc, #8]	@ (801bc14 <USBD_FS_DeviceDescriptor+0x20>)
}
 801bc0a:	0018      	movs	r0, r3
 801bc0c:	46bd      	mov	sp, r7
 801bc0e:	b002      	add	sp, #8
 801bc10:	bd80      	pop	{r7, pc}
 801bc12:	46c0      	nop			@ (mov r8, r8)
 801bc14:	2000021c 	.word	0x2000021c

0801bc18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc18:	b580      	push	{r7, lr}
 801bc1a:	b082      	sub	sp, #8
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	0002      	movs	r2, r0
 801bc20:	6039      	str	r1, [r7, #0]
 801bc22:	1dfb      	adds	r3, r7, #7
 801bc24:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801bc26:	683b      	ldr	r3, [r7, #0]
 801bc28:	2204      	movs	r2, #4
 801bc2a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801bc2c:	4b02      	ldr	r3, [pc, #8]	@ (801bc38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801bc2e:	0018      	movs	r0, r3
 801bc30:	46bd      	mov	sp, r7
 801bc32:	b002      	add	sp, #8
 801bc34:	bd80      	pop	{r7, pc}
 801bc36:	46c0      	nop			@ (mov r8, r8)
 801bc38:	20000230 	.word	0x20000230

0801bc3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b082      	sub	sp, #8
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	0002      	movs	r2, r0
 801bc44:	6039      	str	r1, [r7, #0]
 801bc46:	1dfb      	adds	r3, r7, #7
 801bc48:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801bc4a:	1dfb      	adds	r3, r7, #7
 801bc4c:	781b      	ldrb	r3, [r3, #0]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d106      	bne.n	801bc60 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bc52:	683a      	ldr	r2, [r7, #0]
 801bc54:	4908      	ldr	r1, [pc, #32]	@ (801bc78 <USBD_FS_ProductStrDescriptor+0x3c>)
 801bc56:	4b09      	ldr	r3, [pc, #36]	@ (801bc7c <USBD_FS_ProductStrDescriptor+0x40>)
 801bc58:	0018      	movs	r0, r3
 801bc5a:	f7ff fdb1 	bl	801b7c0 <USBD_GetString>
 801bc5e:	e005      	b.n	801bc6c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801bc60:	683a      	ldr	r2, [r7, #0]
 801bc62:	4905      	ldr	r1, [pc, #20]	@ (801bc78 <USBD_FS_ProductStrDescriptor+0x3c>)
 801bc64:	4b05      	ldr	r3, [pc, #20]	@ (801bc7c <USBD_FS_ProductStrDescriptor+0x40>)
 801bc66:	0018      	movs	r0, r3
 801bc68:	f7ff fdaa 	bl	801b7c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bc6c:	4b02      	ldr	r3, [pc, #8]	@ (801bc78 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801bc6e:	0018      	movs	r0, r3
 801bc70:	46bd      	mov	sp, r7
 801bc72:	b002      	add	sp, #8
 801bc74:	bd80      	pop	{r7, pc}
 801bc76:	46c0      	nop			@ (mov r8, r8)
 801bc78:	200030a0 	.word	0x200030a0
 801bc7c:	08023810 	.word	0x08023810

0801bc80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b082      	sub	sp, #8
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	0002      	movs	r2, r0
 801bc88:	6039      	str	r1, [r7, #0]
 801bc8a:	1dfb      	adds	r3, r7, #7
 801bc8c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801bc8e:	683a      	ldr	r2, [r7, #0]
 801bc90:	4904      	ldr	r1, [pc, #16]	@ (801bca4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801bc92:	4b05      	ldr	r3, [pc, #20]	@ (801bca8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 801bc94:	0018      	movs	r0, r3
 801bc96:	f7ff fd93 	bl	801b7c0 <USBD_GetString>
  return USBD_StrDesc;
 801bc9a:	4b02      	ldr	r3, [pc, #8]	@ (801bca4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 801bc9c:	0018      	movs	r0, r3
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	b002      	add	sp, #8
 801bca2:	bd80      	pop	{r7, pc}
 801bca4:	200030a0 	.word	0x200030a0
 801bca8:	08023828 	.word	0x08023828

0801bcac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b082      	sub	sp, #8
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	0002      	movs	r2, r0
 801bcb4:	6039      	str	r1, [r7, #0]
 801bcb6:	1dfb      	adds	r3, r7, #7
 801bcb8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801bcba:	683b      	ldr	r3, [r7, #0]
 801bcbc:	221a      	movs	r2, #26
 801bcbe:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801bcc0:	f000 f84c 	bl	801bd5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801bcc4:	4b02      	ldr	r3, [pc, #8]	@ (801bcd0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 801bcc6:	0018      	movs	r0, r3
 801bcc8:	46bd      	mov	sp, r7
 801bcca:	b002      	add	sp, #8
 801bccc:	bd80      	pop	{r7, pc}
 801bcce:	46c0      	nop			@ (mov r8, r8)
 801bcd0:	20000234 	.word	0x20000234

0801bcd4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b082      	sub	sp, #8
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	0002      	movs	r2, r0
 801bcdc:	6039      	str	r1, [r7, #0]
 801bcde:	1dfb      	adds	r3, r7, #7
 801bce0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 801bce2:	1dfb      	adds	r3, r7, #7
 801bce4:	781b      	ldrb	r3, [r3, #0]
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d106      	bne.n	801bcf8 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bcea:	683a      	ldr	r2, [r7, #0]
 801bcec:	4908      	ldr	r1, [pc, #32]	@ (801bd10 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801bcee:	4b09      	ldr	r3, [pc, #36]	@ (801bd14 <USBD_FS_ConfigStrDescriptor+0x40>)
 801bcf0:	0018      	movs	r0, r3
 801bcf2:	f7ff fd65 	bl	801b7c0 <USBD_GetString>
 801bcf6:	e005      	b.n	801bd04 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801bcf8:	683a      	ldr	r2, [r7, #0]
 801bcfa:	4905      	ldr	r1, [pc, #20]	@ (801bd10 <USBD_FS_ConfigStrDescriptor+0x3c>)
 801bcfc:	4b05      	ldr	r3, [pc, #20]	@ (801bd14 <USBD_FS_ConfigStrDescriptor+0x40>)
 801bcfe:	0018      	movs	r0, r3
 801bd00:	f7ff fd5e 	bl	801b7c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bd04:	4b02      	ldr	r3, [pc, #8]	@ (801bd10 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801bd06:	0018      	movs	r0, r3
 801bd08:	46bd      	mov	sp, r7
 801bd0a:	b002      	add	sp, #8
 801bd0c:	bd80      	pop	{r7, pc}
 801bd0e:	46c0      	nop			@ (mov r8, r8)
 801bd10:	200030a0 	.word	0x200030a0
 801bd14:	0802383c 	.word	0x0802383c

0801bd18 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801bd18:	b580      	push	{r7, lr}
 801bd1a:	b082      	sub	sp, #8
 801bd1c:	af00      	add	r7, sp, #0
 801bd1e:	0002      	movs	r2, r0
 801bd20:	6039      	str	r1, [r7, #0]
 801bd22:	1dfb      	adds	r3, r7, #7
 801bd24:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801bd26:	1dfb      	adds	r3, r7, #7
 801bd28:	781b      	ldrb	r3, [r3, #0]
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	d106      	bne.n	801bd3c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bd2e:	683a      	ldr	r2, [r7, #0]
 801bd30:	4908      	ldr	r1, [pc, #32]	@ (801bd54 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801bd32:	4b09      	ldr	r3, [pc, #36]	@ (801bd58 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801bd34:	0018      	movs	r0, r3
 801bd36:	f7ff fd43 	bl	801b7c0 <USBD_GetString>
 801bd3a:	e005      	b.n	801bd48 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801bd3c:	683a      	ldr	r2, [r7, #0]
 801bd3e:	4905      	ldr	r1, [pc, #20]	@ (801bd54 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801bd40:	4b05      	ldr	r3, [pc, #20]	@ (801bd58 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801bd42:	0018      	movs	r0, r3
 801bd44:	f7ff fd3c 	bl	801b7c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801bd48:	4b02      	ldr	r3, [pc, #8]	@ (801bd54 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 801bd4a:	0018      	movs	r0, r3
 801bd4c:	46bd      	mov	sp, r7
 801bd4e:	b002      	add	sp, #8
 801bd50:	bd80      	pop	{r7, pc}
 801bd52:	46c0      	nop			@ (mov r8, r8)
 801bd54:	200030a0 	.word	0x200030a0
 801bd58:	08023848 	.word	0x08023848

0801bd5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801bd5c:	b580      	push	{r7, lr}
 801bd5e:	b084      	sub	sp, #16
 801bd60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801bd62:	4b10      	ldr	r3, [pc, #64]	@ (801bda4 <Get_SerialNum+0x48>)
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801bd68:	4b0f      	ldr	r3, [pc, #60]	@ (801bda8 <Get_SerialNum+0x4c>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801bd6e:	4b0f      	ldr	r3, [pc, #60]	@ (801bdac <Get_SerialNum+0x50>)
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801bd74:	68fa      	ldr	r2, [r7, #12]
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	18d3      	adds	r3, r2, r3
 801bd7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801bd7c:	68fb      	ldr	r3, [r7, #12]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d00b      	beq.n	801bd9a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801bd82:	490b      	ldr	r1, [pc, #44]	@ (801bdb0 <Get_SerialNum+0x54>)
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	2208      	movs	r2, #8
 801bd88:	0018      	movs	r0, r3
 801bd8a:	f000 f815 	bl	801bdb8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801bd8e:	4909      	ldr	r1, [pc, #36]	@ (801bdb4 <Get_SerialNum+0x58>)
 801bd90:	68bb      	ldr	r3, [r7, #8]
 801bd92:	2204      	movs	r2, #4
 801bd94:	0018      	movs	r0, r3
 801bd96:	f000 f80f 	bl	801bdb8 <IntToUnicode>
  }
}
 801bd9a:	46c0      	nop			@ (mov r8, r8)
 801bd9c:	46bd      	mov	sp, r7
 801bd9e:	b004      	add	sp, #16
 801bda0:	bd80      	pop	{r7, pc}
 801bda2:	46c0      	nop			@ (mov r8, r8)
 801bda4:	1ff80050 	.word	0x1ff80050
 801bda8:	1ff80054 	.word	0x1ff80054
 801bdac:	1ff80058 	.word	0x1ff80058
 801bdb0:	20000236 	.word	0x20000236
 801bdb4:	20000246 	.word	0x20000246

0801bdb8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	b086      	sub	sp, #24
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	60f8      	str	r0, [r7, #12]
 801bdc0:	60b9      	str	r1, [r7, #8]
 801bdc2:	1dfb      	adds	r3, r7, #7
 801bdc4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 801bdc6:	2117      	movs	r1, #23
 801bdc8:	187b      	adds	r3, r7, r1
 801bdca:	2200      	movs	r2, #0
 801bdcc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 801bdce:	187b      	adds	r3, r7, r1
 801bdd0:	2200      	movs	r2, #0
 801bdd2:	701a      	strb	r2, [r3, #0]
 801bdd4:	e02f      	b.n	801be36 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	0f1b      	lsrs	r3, r3, #28
 801bdda:	2b09      	cmp	r3, #9
 801bddc:	d80d      	bhi.n	801bdfa <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	0f1b      	lsrs	r3, r3, #28
 801bde2:	b2da      	uxtb	r2, r3
 801bde4:	2317      	movs	r3, #23
 801bde6:	18fb      	adds	r3, r7, r3
 801bde8:	781b      	ldrb	r3, [r3, #0]
 801bdea:	005b      	lsls	r3, r3, #1
 801bdec:	0019      	movs	r1, r3
 801bdee:	68bb      	ldr	r3, [r7, #8]
 801bdf0:	185b      	adds	r3, r3, r1
 801bdf2:	3230      	adds	r2, #48	@ 0x30
 801bdf4:	b2d2      	uxtb	r2, r2
 801bdf6:	701a      	strb	r2, [r3, #0]
 801bdf8:	e00c      	b.n	801be14 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	0f1b      	lsrs	r3, r3, #28
 801bdfe:	b2da      	uxtb	r2, r3
 801be00:	2317      	movs	r3, #23
 801be02:	18fb      	adds	r3, r7, r3
 801be04:	781b      	ldrb	r3, [r3, #0]
 801be06:	005b      	lsls	r3, r3, #1
 801be08:	0019      	movs	r1, r3
 801be0a:	68bb      	ldr	r3, [r7, #8]
 801be0c:	185b      	adds	r3, r3, r1
 801be0e:	3237      	adds	r2, #55	@ 0x37
 801be10:	b2d2      	uxtb	r2, r2
 801be12:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	011b      	lsls	r3, r3, #4
 801be18:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801be1a:	2117      	movs	r1, #23
 801be1c:	187b      	adds	r3, r7, r1
 801be1e:	781b      	ldrb	r3, [r3, #0]
 801be20:	005b      	lsls	r3, r3, #1
 801be22:	3301      	adds	r3, #1
 801be24:	68ba      	ldr	r2, [r7, #8]
 801be26:	18d3      	adds	r3, r2, r3
 801be28:	2200      	movs	r2, #0
 801be2a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801be2c:	187b      	adds	r3, r7, r1
 801be2e:	781a      	ldrb	r2, [r3, #0]
 801be30:	187b      	adds	r3, r7, r1
 801be32:	3201      	adds	r2, #1
 801be34:	701a      	strb	r2, [r3, #0]
 801be36:	2317      	movs	r3, #23
 801be38:	18fa      	adds	r2, r7, r3
 801be3a:	1dfb      	adds	r3, r7, #7
 801be3c:	7812      	ldrb	r2, [r2, #0]
 801be3e:	781b      	ldrb	r3, [r3, #0]
 801be40:	429a      	cmp	r2, r3
 801be42:	d3c8      	bcc.n	801bdd6 <IntToUnicode+0x1e>
  }
}
 801be44:	46c0      	nop			@ (mov r8, r8)
 801be46:	46c0      	nop			@ (mov r8, r8)
 801be48:	46bd      	mov	sp, r7
 801be4a:	b006      	add	sp, #24
 801be4c:	bd80      	pop	{r7, pc}
	...

0801be50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801be50:	b580      	push	{r7, lr}
 801be52:	b082      	sub	sp, #8
 801be54:	af00      	add	r7, sp, #0
 801be56:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	4a0a      	ldr	r2, [pc, #40]	@ (801be88 <HAL_PCD_MspInit+0x38>)
 801be5e:	4293      	cmp	r3, r2
 801be60:	d10e      	bne.n	801be80 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801be62:	4b0a      	ldr	r3, [pc, #40]	@ (801be8c <HAL_PCD_MspInit+0x3c>)
 801be64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801be66:	4b09      	ldr	r3, [pc, #36]	@ (801be8c <HAL_PCD_MspInit+0x3c>)
 801be68:	2180      	movs	r1, #128	@ 0x80
 801be6a:	0409      	lsls	r1, r1, #16
 801be6c:	430a      	orrs	r2, r1
 801be6e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801be70:	2200      	movs	r2, #0
 801be72:	2100      	movs	r1, #0
 801be74:	201f      	movs	r0, #31
 801be76:	f7f2 fb21 	bl	800e4bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 801be7a:	201f      	movs	r0, #31
 801be7c:	f7f2 fb33 	bl	800e4e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801be80:	46c0      	nop			@ (mov r8, r8)
 801be82:	46bd      	mov	sp, r7
 801be84:	b002      	add	sp, #8
 801be86:	bd80      	pop	{r7, pc}
 801be88:	40005c00 	.word	0x40005c00
 801be8c:	40021000 	.word	0x40021000

0801be90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b082      	sub	sp, #8
 801be94:	af00      	add	r7, sp, #0
 801be96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801be98:	687a      	ldr	r2, [r7, #4]
 801be9a:	23bc      	movs	r3, #188	@ 0xbc
 801be9c:	009b      	lsls	r3, r3, #2
 801be9e:	58d2      	ldr	r2, [r2, r3]
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	21ac      	movs	r1, #172	@ 0xac
 801bea4:	0089      	lsls	r1, r1, #2
 801bea6:	468c      	mov	ip, r1
 801bea8:	4463      	add	r3, ip
 801beaa:	0019      	movs	r1, r3
 801beac:	0010      	movs	r0, r2
 801beae:	f7fe fc1d 	bl	801a6ec <USBD_LL_SetupStage>
}
 801beb2:	46c0      	nop			@ (mov r8, r8)
 801beb4:	46bd      	mov	sp, r7
 801beb6:	b002      	add	sp, #8
 801beb8:	bd80      	pop	{r7, pc}

0801beba <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801beba:	b590      	push	{r4, r7, lr}
 801bebc:	b083      	sub	sp, #12
 801bebe:	af00      	add	r7, sp, #0
 801bec0:	6078      	str	r0, [r7, #4]
 801bec2:	000a      	movs	r2, r1
 801bec4:	1cfb      	adds	r3, r7, #3
 801bec6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801bec8:	687a      	ldr	r2, [r7, #4]
 801beca:	23bc      	movs	r3, #188	@ 0xbc
 801becc:	009b      	lsls	r3, r3, #2
 801bece:	58d4      	ldr	r4, [r2, r3]
 801bed0:	1cfb      	adds	r3, r7, #3
 801bed2:	781a      	ldrb	r2, [r3, #0]
 801bed4:	6878      	ldr	r0, [r7, #4]
 801bed6:	23be      	movs	r3, #190	@ 0xbe
 801bed8:	0059      	lsls	r1, r3, #1
 801beda:	0013      	movs	r3, r2
 801bedc:	009b      	lsls	r3, r3, #2
 801bede:	189b      	adds	r3, r3, r2
 801bee0:	00db      	lsls	r3, r3, #3
 801bee2:	18c3      	adds	r3, r0, r3
 801bee4:	185b      	adds	r3, r3, r1
 801bee6:	681a      	ldr	r2, [r3, #0]
 801bee8:	1cfb      	adds	r3, r7, #3
 801beea:	781b      	ldrb	r3, [r3, #0]
 801beec:	0019      	movs	r1, r3
 801beee:	0020      	movs	r0, r4
 801bef0:	f7fe fc5a 	bl	801a7a8 <USBD_LL_DataOutStage>
}
 801bef4:	46c0      	nop			@ (mov r8, r8)
 801bef6:	46bd      	mov	sp, r7
 801bef8:	b003      	add	sp, #12
 801befa:	bd90      	pop	{r4, r7, pc}

0801befc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801befc:	b580      	push	{r7, lr}
 801befe:	b082      	sub	sp, #8
 801bf00:	af00      	add	r7, sp, #0
 801bf02:	6078      	str	r0, [r7, #4]
 801bf04:	000a      	movs	r2, r1
 801bf06:	1cfb      	adds	r3, r7, #3
 801bf08:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801bf0a:	687a      	ldr	r2, [r7, #4]
 801bf0c:	23bc      	movs	r3, #188	@ 0xbc
 801bf0e:	009b      	lsls	r3, r3, #2
 801bf10:	58d0      	ldr	r0, [r2, r3]
 801bf12:	1cfb      	adds	r3, r7, #3
 801bf14:	781a      	ldrb	r2, [r3, #0]
 801bf16:	6879      	ldr	r1, [r7, #4]
 801bf18:	0013      	movs	r3, r2
 801bf1a:	009b      	lsls	r3, r3, #2
 801bf1c:	189b      	adds	r3, r3, r2
 801bf1e:	00db      	lsls	r3, r3, #3
 801bf20:	18cb      	adds	r3, r1, r3
 801bf22:	333c      	adds	r3, #60	@ 0x3c
 801bf24:	681a      	ldr	r2, [r3, #0]
 801bf26:	1cfb      	adds	r3, r7, #3
 801bf28:	781b      	ldrb	r3, [r3, #0]
 801bf2a:	0019      	movs	r1, r3
 801bf2c:	f7fe fcbe 	bl	801a8ac <USBD_LL_DataInStage>
}
 801bf30:	46c0      	nop			@ (mov r8, r8)
 801bf32:	46bd      	mov	sp, r7
 801bf34:	b002      	add	sp, #8
 801bf36:	bd80      	pop	{r7, pc}

0801bf38 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b082      	sub	sp, #8
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801bf40:	687a      	ldr	r2, [r7, #4]
 801bf42:	23bc      	movs	r3, #188	@ 0xbc
 801bf44:	009b      	lsls	r3, r3, #2
 801bf46:	58d3      	ldr	r3, [r2, r3]
 801bf48:	0018      	movs	r0, r3
 801bf4a:	f7fe fdf5 	bl	801ab38 <USBD_LL_SOF>
}
 801bf4e:	46c0      	nop			@ (mov r8, r8)
 801bf50:	46bd      	mov	sp, r7
 801bf52:	b002      	add	sp, #8
 801bf54:	bd80      	pop	{r7, pc}

0801bf56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bf56:	b580      	push	{r7, lr}
 801bf58:	b084      	sub	sp, #16
 801bf5a:	af00      	add	r7, sp, #0
 801bf5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801bf5e:	230f      	movs	r3, #15
 801bf60:	18fb      	adds	r3, r7, r3
 801bf62:	2201      	movs	r2, #1
 801bf64:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	689b      	ldr	r3, [r3, #8]
 801bf6a:	2b02      	cmp	r3, #2
 801bf6c:	d001      	beq.n	801bf72 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801bf6e:	f7eb fdf7 	bl	8007b60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801bf72:	687a      	ldr	r2, [r7, #4]
 801bf74:	23bc      	movs	r3, #188	@ 0xbc
 801bf76:	009b      	lsls	r3, r3, #2
 801bf78:	58d2      	ldr	r2, [r2, r3]
 801bf7a:	230f      	movs	r3, #15
 801bf7c:	18fb      	adds	r3, r7, r3
 801bf7e:	781b      	ldrb	r3, [r3, #0]
 801bf80:	0019      	movs	r1, r3
 801bf82:	0010      	movs	r0, r2
 801bf84:	f7fe fd97 	bl	801aab6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801bf88:	687a      	ldr	r2, [r7, #4]
 801bf8a:	23bc      	movs	r3, #188	@ 0xbc
 801bf8c:	009b      	lsls	r3, r3, #2
 801bf8e:	58d3      	ldr	r3, [r2, r3]
 801bf90:	0018      	movs	r0, r3
 801bf92:	f7fe fd48 	bl	801aa26 <USBD_LL_Reset>
}
 801bf96:	46c0      	nop			@ (mov r8, r8)
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	b004      	add	sp, #16
 801bf9c:	bd80      	pop	{r7, pc}
	...

0801bfa0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bfa0:	b580      	push	{r7, lr}
 801bfa2:	b082      	sub	sp, #8
 801bfa4:	af00      	add	r7, sp, #0
 801bfa6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801bfa8:	687a      	ldr	r2, [r7, #4]
 801bfaa:	23bc      	movs	r3, #188	@ 0xbc
 801bfac:	009b      	lsls	r3, r3, #2
 801bfae:	58d3      	ldr	r3, [r2, r3]
 801bfb0:	0018      	movs	r0, r3
 801bfb2:	f7fe fd91 	bl	801aad8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	699b      	ldr	r3, [r3, #24]
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d005      	beq.n	801bfca <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bfbe:	4b05      	ldr	r3, [pc, #20]	@ (801bfd4 <HAL_PCD_SuspendCallback+0x34>)
 801bfc0:	691a      	ldr	r2, [r3, #16]
 801bfc2:	4b04      	ldr	r3, [pc, #16]	@ (801bfd4 <HAL_PCD_SuspendCallback+0x34>)
 801bfc4:	2106      	movs	r1, #6
 801bfc6:	430a      	orrs	r2, r1
 801bfc8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 801bfca:	46c0      	nop			@ (mov r8, r8)
 801bfcc:	46bd      	mov	sp, r7
 801bfce:	b002      	add	sp, #8
 801bfd0:	bd80      	pop	{r7, pc}
 801bfd2:	46c0      	nop			@ (mov r8, r8)
 801bfd4:	e000ed00 	.word	0xe000ed00

0801bfd8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b082      	sub	sp, #8
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	699b      	ldr	r3, [r3, #24]
 801bfe4:	2b00      	cmp	r3, #0
 801bfe6:	d007      	beq.n	801bff8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801bfe8:	4b09      	ldr	r3, [pc, #36]	@ (801c010 <HAL_PCD_ResumeCallback+0x38>)
 801bfea:	691a      	ldr	r2, [r3, #16]
 801bfec:	4b08      	ldr	r3, [pc, #32]	@ (801c010 <HAL_PCD_ResumeCallback+0x38>)
 801bfee:	2106      	movs	r1, #6
 801bff0:	438a      	bics	r2, r1
 801bff2:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801bff4:	f000 fa44 	bl	801c480 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801bff8:	687a      	ldr	r2, [r7, #4]
 801bffa:	23bc      	movs	r3, #188	@ 0xbc
 801bffc:	009b      	lsls	r3, r3, #2
 801bffe:	58d3      	ldr	r3, [r2, r3]
 801c000:	0018      	movs	r0, r3
 801c002:	f7fe fd81 	bl	801ab08 <USBD_LL_Resume>
}
 801c006:	46c0      	nop			@ (mov r8, r8)
 801c008:	46bd      	mov	sp, r7
 801c00a:	b002      	add	sp, #8
 801c00c:	bd80      	pop	{r7, pc}
 801c00e:	46c0      	nop			@ (mov r8, r8)
 801c010:	e000ed00 	.word	0xe000ed00

0801c014 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801c014:	b580      	push	{r7, lr}
 801c016:	b082      	sub	sp, #8
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801c01c:	4a2d      	ldr	r2, [pc, #180]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c01e:	23bc      	movs	r3, #188	@ 0xbc
 801c020:	009b      	lsls	r3, r3, #2
 801c022:	6879      	ldr	r1, [r7, #4]
 801c024:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801c026:	687a      	ldr	r2, [r7, #4]
 801c028:	23b0      	movs	r3, #176	@ 0xb0
 801c02a:	009b      	lsls	r3, r3, #2
 801c02c:	4929      	ldr	r1, [pc, #164]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c02e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801c030:	4b28      	ldr	r3, [pc, #160]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c032:	4a29      	ldr	r2, [pc, #164]	@ (801c0d8 <USBD_LL_Init+0xc4>)
 801c034:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801c036:	4b27      	ldr	r3, [pc, #156]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c038:	2208      	movs	r2, #8
 801c03a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801c03c:	4b25      	ldr	r3, [pc, #148]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c03e:	2202      	movs	r2, #2
 801c040:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801c042:	4b24      	ldr	r3, [pc, #144]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c044:	2202      	movs	r2, #2
 801c046:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801c048:	4b22      	ldr	r3, [pc, #136]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c04a:	2200      	movs	r2, #0
 801c04c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801c04e:	4b21      	ldr	r3, [pc, #132]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c050:	2200      	movs	r2, #0
 801c052:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801c054:	4b1f      	ldr	r3, [pc, #124]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c056:	2200      	movs	r2, #0
 801c058:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801c05a:	4b1e      	ldr	r3, [pc, #120]	@ (801c0d4 <USBD_LL_Init+0xc0>)
 801c05c:	0018      	movs	r0, r3
 801c05e:	f7f5 ffd3 	bl	8012008 <HAL_PCD_Init>
 801c062:	1e03      	subs	r3, r0, #0
 801c064:	d001      	beq.n	801c06a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801c066:	f7eb fd7b 	bl	8007b60 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801c06a:	687a      	ldr	r2, [r7, #4]
 801c06c:	23b0      	movs	r3, #176	@ 0xb0
 801c06e:	009b      	lsls	r3, r3, #2
 801c070:	58d0      	ldr	r0, [r2, r3]
 801c072:	2318      	movs	r3, #24
 801c074:	2200      	movs	r2, #0
 801c076:	2100      	movs	r1, #0
 801c078:	f7f7 fd94 	bl	8013ba4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801c07c:	687a      	ldr	r2, [r7, #4]
 801c07e:	23b0      	movs	r3, #176	@ 0xb0
 801c080:	009b      	lsls	r3, r3, #2
 801c082:	58d0      	ldr	r0, [r2, r3]
 801c084:	2358      	movs	r3, #88	@ 0x58
 801c086:	2200      	movs	r2, #0
 801c088:	2180      	movs	r1, #128	@ 0x80
 801c08a:	f7f7 fd8b 	bl	8013ba4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801c08e:	687a      	ldr	r2, [r7, #4]
 801c090:	23b0      	movs	r3, #176	@ 0xb0
 801c092:	009b      	lsls	r3, r3, #2
 801c094:	58d0      	ldr	r0, [r2, r3]
 801c096:	23c0      	movs	r3, #192	@ 0xc0
 801c098:	2200      	movs	r2, #0
 801c09a:	2181      	movs	r1, #129	@ 0x81
 801c09c:	f7f7 fd82 	bl	8013ba4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801c0a0:	687a      	ldr	r2, [r7, #4]
 801c0a2:	23b0      	movs	r3, #176	@ 0xb0
 801c0a4:	009b      	lsls	r3, r3, #2
 801c0a6:	58d0      	ldr	r0, [r2, r3]
 801c0a8:	2388      	movs	r3, #136	@ 0x88
 801c0aa:	005b      	lsls	r3, r3, #1
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	2101      	movs	r1, #1
 801c0b0:	f7f7 fd78 	bl	8013ba4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801c0b4:	687a      	ldr	r2, [r7, #4]
 801c0b6:	23b0      	movs	r3, #176	@ 0xb0
 801c0b8:	009b      	lsls	r3, r3, #2
 801c0ba:	58d0      	ldr	r0, [r2, r3]
 801c0bc:	2380      	movs	r3, #128	@ 0x80
 801c0be:	005b      	lsls	r3, r3, #1
 801c0c0:	2200      	movs	r2, #0
 801c0c2:	2182      	movs	r1, #130	@ 0x82
 801c0c4:	f7f7 fd6e 	bl	8013ba4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801c0c8:	2300      	movs	r3, #0
}
 801c0ca:	0018      	movs	r0, r3
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	b002      	add	sp, #8
 801c0d0:	bd80      	pop	{r7, pc}
 801c0d2:	46c0      	nop			@ (mov r8, r8)
 801c0d4:	200032a0 	.word	0x200032a0
 801c0d8:	40005c00 	.word	0x40005c00

0801c0dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801c0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0de:	b085      	sub	sp, #20
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c0e4:	210f      	movs	r1, #15
 801c0e6:	187b      	adds	r3, r7, r1
 801c0e8:	2200      	movs	r2, #0
 801c0ea:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c0ec:	260e      	movs	r6, #14
 801c0ee:	19bb      	adds	r3, r7, r6
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801c0f4:	687a      	ldr	r2, [r7, #4]
 801c0f6:	23b0      	movs	r3, #176	@ 0xb0
 801c0f8:	009b      	lsls	r3, r3, #2
 801c0fa:	58d3      	ldr	r3, [r2, r3]
 801c0fc:	000d      	movs	r5, r1
 801c0fe:	187c      	adds	r4, r7, r1
 801c100:	0018      	movs	r0, r3
 801c102:	f7f6 f881 	bl	8012208 <HAL_PCD_Start>
 801c106:	0003      	movs	r3, r0
 801c108:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c10a:	19bc      	adds	r4, r7, r6
 801c10c:	197b      	adds	r3, r7, r5
 801c10e:	781b      	ldrb	r3, [r3, #0]
 801c110:	0018      	movs	r0, r3
 801c112:	f000 f9bc 	bl	801c48e <USBD_Get_USB_Status>
 801c116:	0003      	movs	r3, r0
 801c118:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c11a:	19bb      	adds	r3, r7, r6
 801c11c:	781b      	ldrb	r3, [r3, #0]
}
 801c11e:	0018      	movs	r0, r3
 801c120:	46bd      	mov	sp, r7
 801c122:	b005      	add	sp, #20
 801c124:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c126 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801c126:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c128:	b085      	sub	sp, #20
 801c12a:	af00      	add	r7, sp, #0
 801c12c:	6078      	str	r0, [r7, #4]
 801c12e:	000c      	movs	r4, r1
 801c130:	0010      	movs	r0, r2
 801c132:	0019      	movs	r1, r3
 801c134:	1cfb      	adds	r3, r7, #3
 801c136:	1c22      	adds	r2, r4, #0
 801c138:	701a      	strb	r2, [r3, #0]
 801c13a:	1cbb      	adds	r3, r7, #2
 801c13c:	1c02      	adds	r2, r0, #0
 801c13e:	701a      	strb	r2, [r3, #0]
 801c140:	003b      	movs	r3, r7
 801c142:	1c0a      	adds	r2, r1, #0
 801c144:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c146:	260f      	movs	r6, #15
 801c148:	19bb      	adds	r3, r7, r6
 801c14a:	2200      	movs	r2, #0
 801c14c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c14e:	250e      	movs	r5, #14
 801c150:	197b      	adds	r3, r7, r5
 801c152:	2200      	movs	r2, #0
 801c154:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801c156:	687a      	ldr	r2, [r7, #4]
 801c158:	23b0      	movs	r3, #176	@ 0xb0
 801c15a:	009b      	lsls	r3, r3, #2
 801c15c:	58d0      	ldr	r0, [r2, r3]
 801c15e:	19bc      	adds	r4, r7, r6
 801c160:	1cbb      	adds	r3, r7, #2
 801c162:	781d      	ldrb	r5, [r3, #0]
 801c164:	003b      	movs	r3, r7
 801c166:	881a      	ldrh	r2, [r3, #0]
 801c168:	1cfb      	adds	r3, r7, #3
 801c16a:	7819      	ldrb	r1, [r3, #0]
 801c16c:	002b      	movs	r3, r5
 801c16e:	f7f6 f9e0 	bl	8012532 <HAL_PCD_EP_Open>
 801c172:	0003      	movs	r3, r0
 801c174:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c176:	250e      	movs	r5, #14
 801c178:	197c      	adds	r4, r7, r5
 801c17a:	19bb      	adds	r3, r7, r6
 801c17c:	781b      	ldrb	r3, [r3, #0]
 801c17e:	0018      	movs	r0, r3
 801c180:	f000 f985 	bl	801c48e <USBD_Get_USB_Status>
 801c184:	0003      	movs	r3, r0
 801c186:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c188:	197b      	adds	r3, r7, r5
 801c18a:	781b      	ldrb	r3, [r3, #0]
}
 801c18c:	0018      	movs	r0, r3
 801c18e:	46bd      	mov	sp, r7
 801c190:	b005      	add	sp, #20
 801c192:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c194 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c194:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c196:	b085      	sub	sp, #20
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
 801c19c:	000a      	movs	r2, r1
 801c19e:	1cfb      	adds	r3, r7, #3
 801c1a0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c1a2:	210f      	movs	r1, #15
 801c1a4:	187b      	adds	r3, r7, r1
 801c1a6:	2200      	movs	r2, #0
 801c1a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c1aa:	260e      	movs	r6, #14
 801c1ac:	19bb      	adds	r3, r7, r6
 801c1ae:	2200      	movs	r2, #0
 801c1b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801c1b2:	687a      	ldr	r2, [r7, #4]
 801c1b4:	23b0      	movs	r3, #176	@ 0xb0
 801c1b6:	009b      	lsls	r3, r3, #2
 801c1b8:	58d2      	ldr	r2, [r2, r3]
 801c1ba:	000d      	movs	r5, r1
 801c1bc:	187c      	adds	r4, r7, r1
 801c1be:	1cfb      	adds	r3, r7, #3
 801c1c0:	781b      	ldrb	r3, [r3, #0]
 801c1c2:	0019      	movs	r1, r3
 801c1c4:	0010      	movs	r0, r2
 801c1c6:	f7f6 fa23 	bl	8012610 <HAL_PCD_EP_Close>
 801c1ca:	0003      	movs	r3, r0
 801c1cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c1ce:	19bc      	adds	r4, r7, r6
 801c1d0:	197b      	adds	r3, r7, r5
 801c1d2:	781b      	ldrb	r3, [r3, #0]
 801c1d4:	0018      	movs	r0, r3
 801c1d6:	f000 f95a 	bl	801c48e <USBD_Get_USB_Status>
 801c1da:	0003      	movs	r3, r0
 801c1dc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c1de:	19bb      	adds	r3, r7, r6
 801c1e0:	781b      	ldrb	r3, [r3, #0]
}
 801c1e2:	0018      	movs	r0, r3
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	b005      	add	sp, #20
 801c1e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c1ea <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c1ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c1ec:	b085      	sub	sp, #20
 801c1ee:	af00      	add	r7, sp, #0
 801c1f0:	6078      	str	r0, [r7, #4]
 801c1f2:	000a      	movs	r2, r1
 801c1f4:	1cfb      	adds	r3, r7, #3
 801c1f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c1f8:	210f      	movs	r1, #15
 801c1fa:	187b      	adds	r3, r7, r1
 801c1fc:	2200      	movs	r2, #0
 801c1fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c200:	260e      	movs	r6, #14
 801c202:	19bb      	adds	r3, r7, r6
 801c204:	2200      	movs	r2, #0
 801c206:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801c208:	687a      	ldr	r2, [r7, #4]
 801c20a:	23b0      	movs	r3, #176	@ 0xb0
 801c20c:	009b      	lsls	r3, r3, #2
 801c20e:	58d2      	ldr	r2, [r2, r3]
 801c210:	000d      	movs	r5, r1
 801c212:	187c      	adds	r4, r7, r1
 801c214:	1cfb      	adds	r3, r7, #3
 801c216:	781b      	ldrb	r3, [r3, #0]
 801c218:	0019      	movs	r1, r3
 801c21a:	0010      	movs	r0, r2
 801c21c:	f7f6 fad5 	bl	80127ca <HAL_PCD_EP_SetStall>
 801c220:	0003      	movs	r3, r0
 801c222:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c224:	19bc      	adds	r4, r7, r6
 801c226:	197b      	adds	r3, r7, r5
 801c228:	781b      	ldrb	r3, [r3, #0]
 801c22a:	0018      	movs	r0, r3
 801c22c:	f000 f92f 	bl	801c48e <USBD_Get_USB_Status>
 801c230:	0003      	movs	r3, r0
 801c232:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c234:	19bb      	adds	r3, r7, r6
 801c236:	781b      	ldrb	r3, [r3, #0]
}
 801c238:	0018      	movs	r0, r3
 801c23a:	46bd      	mov	sp, r7
 801c23c:	b005      	add	sp, #20
 801c23e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c240 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c242:	b085      	sub	sp, #20
 801c244:	af00      	add	r7, sp, #0
 801c246:	6078      	str	r0, [r7, #4]
 801c248:	000a      	movs	r2, r1
 801c24a:	1cfb      	adds	r3, r7, #3
 801c24c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c24e:	210f      	movs	r1, #15
 801c250:	187b      	adds	r3, r7, r1
 801c252:	2200      	movs	r2, #0
 801c254:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c256:	260e      	movs	r6, #14
 801c258:	19bb      	adds	r3, r7, r6
 801c25a:	2200      	movs	r2, #0
 801c25c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801c25e:	687a      	ldr	r2, [r7, #4]
 801c260:	23b0      	movs	r3, #176	@ 0xb0
 801c262:	009b      	lsls	r3, r3, #2
 801c264:	58d2      	ldr	r2, [r2, r3]
 801c266:	000d      	movs	r5, r1
 801c268:	187c      	adds	r4, r7, r1
 801c26a:	1cfb      	adds	r3, r7, #3
 801c26c:	781b      	ldrb	r3, [r3, #0]
 801c26e:	0019      	movs	r1, r3
 801c270:	0010      	movs	r0, r2
 801c272:	f7f6 fb06 	bl	8012882 <HAL_PCD_EP_ClrStall>
 801c276:	0003      	movs	r3, r0
 801c278:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c27a:	19bc      	adds	r4, r7, r6
 801c27c:	197b      	adds	r3, r7, r5
 801c27e:	781b      	ldrb	r3, [r3, #0]
 801c280:	0018      	movs	r0, r3
 801c282:	f000 f904 	bl	801c48e <USBD_Get_USB_Status>
 801c286:	0003      	movs	r3, r0
 801c288:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c28a:	19bb      	adds	r3, r7, r6
 801c28c:	781b      	ldrb	r3, [r3, #0]
}
 801c28e:	0018      	movs	r0, r3
 801c290:	46bd      	mov	sp, r7
 801c292:	b005      	add	sp, #20
 801c294:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c296 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c296:	b580      	push	{r7, lr}
 801c298:	b084      	sub	sp, #16
 801c29a:	af00      	add	r7, sp, #0
 801c29c:	6078      	str	r0, [r7, #4]
 801c29e:	000a      	movs	r2, r1
 801c2a0:	1cfb      	adds	r3, r7, #3
 801c2a2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801c2a4:	687a      	ldr	r2, [r7, #4]
 801c2a6:	23b0      	movs	r3, #176	@ 0xb0
 801c2a8:	009b      	lsls	r3, r3, #2
 801c2aa:	58d3      	ldr	r3, [r2, r3]
 801c2ac:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801c2ae:	1cfb      	adds	r3, r7, #3
 801c2b0:	781b      	ldrb	r3, [r3, #0]
 801c2b2:	b25b      	sxtb	r3, r3
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	da0d      	bge.n	801c2d4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801c2b8:	1cfb      	adds	r3, r7, #3
 801c2ba:	781b      	ldrb	r3, [r3, #0]
 801c2bc:	227f      	movs	r2, #127	@ 0x7f
 801c2be:	4013      	ands	r3, r2
 801c2c0:	68f9      	ldr	r1, [r7, #12]
 801c2c2:	1c5a      	adds	r2, r3, #1
 801c2c4:	0013      	movs	r3, r2
 801c2c6:	009b      	lsls	r3, r3, #2
 801c2c8:	189b      	adds	r3, r3, r2
 801c2ca:	00db      	lsls	r3, r3, #3
 801c2cc:	18cb      	adds	r3, r1, r3
 801c2ce:	3302      	adds	r3, #2
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	e00d      	b.n	801c2f0 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801c2d4:	1cfb      	adds	r3, r7, #3
 801c2d6:	781b      	ldrb	r3, [r3, #0]
 801c2d8:	227f      	movs	r2, #127	@ 0x7f
 801c2da:	401a      	ands	r2, r3
 801c2dc:	68f8      	ldr	r0, [r7, #12]
 801c2de:	23b5      	movs	r3, #181	@ 0xb5
 801c2e0:	0059      	lsls	r1, r3, #1
 801c2e2:	0013      	movs	r3, r2
 801c2e4:	009b      	lsls	r3, r3, #2
 801c2e6:	189b      	adds	r3, r3, r2
 801c2e8:	00db      	lsls	r3, r3, #3
 801c2ea:	18c3      	adds	r3, r0, r3
 801c2ec:	185b      	adds	r3, r3, r1
 801c2ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c2f0:	0018      	movs	r0, r3
 801c2f2:	46bd      	mov	sp, r7
 801c2f4:	b004      	add	sp, #16
 801c2f6:	bd80      	pop	{r7, pc}

0801c2f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801c2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c2fa:	b085      	sub	sp, #20
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	6078      	str	r0, [r7, #4]
 801c300:	000a      	movs	r2, r1
 801c302:	1cfb      	adds	r3, r7, #3
 801c304:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c306:	210f      	movs	r1, #15
 801c308:	187b      	adds	r3, r7, r1
 801c30a:	2200      	movs	r2, #0
 801c30c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c30e:	260e      	movs	r6, #14
 801c310:	19bb      	adds	r3, r7, r6
 801c312:	2200      	movs	r2, #0
 801c314:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801c316:	687a      	ldr	r2, [r7, #4]
 801c318:	23b0      	movs	r3, #176	@ 0xb0
 801c31a:	009b      	lsls	r3, r3, #2
 801c31c:	58d2      	ldr	r2, [r2, r3]
 801c31e:	000d      	movs	r5, r1
 801c320:	187c      	adds	r4, r7, r1
 801c322:	1cfb      	adds	r3, r7, #3
 801c324:	781b      	ldrb	r3, [r3, #0]
 801c326:	0019      	movs	r1, r3
 801c328:	0010      	movs	r0, r2
 801c32a:	f7f6 f8d7 	bl	80124dc <HAL_PCD_SetAddress>
 801c32e:	0003      	movs	r3, r0
 801c330:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c332:	19bc      	adds	r4, r7, r6
 801c334:	197b      	adds	r3, r7, r5
 801c336:	781b      	ldrb	r3, [r3, #0]
 801c338:	0018      	movs	r0, r3
 801c33a:	f000 f8a8 	bl	801c48e <USBD_Get_USB_Status>
 801c33e:	0003      	movs	r3, r0
 801c340:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c342:	19bb      	adds	r3, r7, r6
 801c344:	781b      	ldrb	r3, [r3, #0]
}
 801c346:	0018      	movs	r0, r3
 801c348:	46bd      	mov	sp, r7
 801c34a:	b005      	add	sp, #20
 801c34c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c34e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c34e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c350:	b087      	sub	sp, #28
 801c352:	af00      	add	r7, sp, #0
 801c354:	60f8      	str	r0, [r7, #12]
 801c356:	0008      	movs	r0, r1
 801c358:	607a      	str	r2, [r7, #4]
 801c35a:	0019      	movs	r1, r3
 801c35c:	230b      	movs	r3, #11
 801c35e:	18fb      	adds	r3, r7, r3
 801c360:	1c02      	adds	r2, r0, #0
 801c362:	701a      	strb	r2, [r3, #0]
 801c364:	2408      	movs	r4, #8
 801c366:	193b      	adds	r3, r7, r4
 801c368:	1c0a      	adds	r2, r1, #0
 801c36a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c36c:	2117      	movs	r1, #23
 801c36e:	187b      	adds	r3, r7, r1
 801c370:	2200      	movs	r2, #0
 801c372:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c374:	2516      	movs	r5, #22
 801c376:	197b      	adds	r3, r7, r5
 801c378:	2200      	movs	r2, #0
 801c37a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801c37c:	68fa      	ldr	r2, [r7, #12]
 801c37e:	23b0      	movs	r3, #176	@ 0xb0
 801c380:	009b      	lsls	r3, r3, #2
 801c382:	58d0      	ldr	r0, [r2, r3]
 801c384:	193b      	adds	r3, r7, r4
 801c386:	881d      	ldrh	r5, [r3, #0]
 801c388:	000e      	movs	r6, r1
 801c38a:	187c      	adds	r4, r7, r1
 801c38c:	687a      	ldr	r2, [r7, #4]
 801c38e:	230b      	movs	r3, #11
 801c390:	18fb      	adds	r3, r7, r3
 801c392:	7819      	ldrb	r1, [r3, #0]
 801c394:	002b      	movs	r3, r5
 801c396:	f7f6 f9dc 	bl	8012752 <HAL_PCD_EP_Transmit>
 801c39a:	0003      	movs	r3, r0
 801c39c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c39e:	2516      	movs	r5, #22
 801c3a0:	197c      	adds	r4, r7, r5
 801c3a2:	19bb      	adds	r3, r7, r6
 801c3a4:	781b      	ldrb	r3, [r3, #0]
 801c3a6:	0018      	movs	r0, r3
 801c3a8:	f000 f871 	bl	801c48e <USBD_Get_USB_Status>
 801c3ac:	0003      	movs	r3, r0
 801c3ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c3b0:	197b      	adds	r3, r7, r5
 801c3b2:	781b      	ldrb	r3, [r3, #0]
}
 801c3b4:	0018      	movs	r0, r3
 801c3b6:	46bd      	mov	sp, r7
 801c3b8:	b007      	add	sp, #28
 801c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c3bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801c3bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3be:	b087      	sub	sp, #28
 801c3c0:	af00      	add	r7, sp, #0
 801c3c2:	60f8      	str	r0, [r7, #12]
 801c3c4:	0008      	movs	r0, r1
 801c3c6:	607a      	str	r2, [r7, #4]
 801c3c8:	0019      	movs	r1, r3
 801c3ca:	230b      	movs	r3, #11
 801c3cc:	18fb      	adds	r3, r7, r3
 801c3ce:	1c02      	adds	r2, r0, #0
 801c3d0:	701a      	strb	r2, [r3, #0]
 801c3d2:	2408      	movs	r4, #8
 801c3d4:	193b      	adds	r3, r7, r4
 801c3d6:	1c0a      	adds	r2, r1, #0
 801c3d8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801c3da:	2117      	movs	r1, #23
 801c3dc:	187b      	adds	r3, r7, r1
 801c3de:	2200      	movs	r2, #0
 801c3e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c3e2:	2516      	movs	r5, #22
 801c3e4:	197b      	adds	r3, r7, r5
 801c3e6:	2200      	movs	r2, #0
 801c3e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801c3ea:	68fa      	ldr	r2, [r7, #12]
 801c3ec:	23b0      	movs	r3, #176	@ 0xb0
 801c3ee:	009b      	lsls	r3, r3, #2
 801c3f0:	58d0      	ldr	r0, [r2, r3]
 801c3f2:	193b      	adds	r3, r7, r4
 801c3f4:	881d      	ldrh	r5, [r3, #0]
 801c3f6:	000e      	movs	r6, r1
 801c3f8:	187c      	adds	r4, r7, r1
 801c3fa:	687a      	ldr	r2, [r7, #4]
 801c3fc:	230b      	movs	r3, #11
 801c3fe:	18fb      	adds	r3, r7, r3
 801c400:	7819      	ldrb	r1, [r3, #0]
 801c402:	002b      	movs	r3, r5
 801c404:	f7f6 f955 	bl	80126b2 <HAL_PCD_EP_Receive>
 801c408:	0003      	movs	r3, r0
 801c40a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801c40c:	2516      	movs	r5, #22
 801c40e:	197c      	adds	r4, r7, r5
 801c410:	19bb      	adds	r3, r7, r6
 801c412:	781b      	ldrb	r3, [r3, #0]
 801c414:	0018      	movs	r0, r3
 801c416:	f000 f83a 	bl	801c48e <USBD_Get_USB_Status>
 801c41a:	0003      	movs	r3, r0
 801c41c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801c41e:	197b      	adds	r3, r7, r5
 801c420:	781b      	ldrb	r3, [r3, #0]
}
 801c422:	0018      	movs	r0, r3
 801c424:	46bd      	mov	sp, r7
 801c426:	b007      	add	sp, #28
 801c428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c42a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801c42a:	b580      	push	{r7, lr}
 801c42c:	b082      	sub	sp, #8
 801c42e:	af00      	add	r7, sp, #0
 801c430:	6078      	str	r0, [r7, #4]
 801c432:	000a      	movs	r2, r1
 801c434:	1cfb      	adds	r3, r7, #3
 801c436:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801c438:	687a      	ldr	r2, [r7, #4]
 801c43a:	23b0      	movs	r3, #176	@ 0xb0
 801c43c:	009b      	lsls	r3, r3, #2
 801c43e:	58d2      	ldr	r2, [r2, r3]
 801c440:	1cfb      	adds	r3, r7, #3
 801c442:	781b      	ldrb	r3, [r3, #0]
 801c444:	0019      	movs	r1, r3
 801c446:	0010      	movs	r0, r2
 801c448:	f7f6 f96a 	bl	8012720 <HAL_PCD_EP_GetRxCount>
 801c44c:	0003      	movs	r3, r0
}
 801c44e:	0018      	movs	r0, r3
 801c450:	46bd      	mov	sp, r7
 801c452:	b002      	add	sp, #8
 801c454:	bd80      	pop	{r7, pc}
	...

0801c458 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801c458:	b580      	push	{r7, lr}
 801c45a:	b082      	sub	sp, #8
 801c45c:	af00      	add	r7, sp, #0
 801c45e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801c460:	4b02      	ldr	r3, [pc, #8]	@ (801c46c <USBD_static_malloc+0x14>)
}
 801c462:	0018      	movs	r0, r3
 801c464:	46bd      	mov	sp, r7
 801c466:	b002      	add	sp, #8
 801c468:	bd80      	pop	{r7, pc}
 801c46a:	46c0      	nop			@ (mov r8, r8)
 801c46c:	20003594 	.word	0x20003594

0801c470 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b082      	sub	sp, #8
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]

}
 801c478:	46c0      	nop			@ (mov r8, r8)
 801c47a:	46bd      	mov	sp, r7
 801c47c:	b002      	add	sp, #8
 801c47e:	bd80      	pop	{r7, pc}

0801c480 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801c480:	b580      	push	{r7, lr}
 801c482:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801c484:	f7eb fa22 	bl	80078cc <SystemClock_Config>
}
 801c488:	46c0      	nop			@ (mov r8, r8)
 801c48a:	46bd      	mov	sp, r7
 801c48c:	bd80      	pop	{r7, pc}

0801c48e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801c48e:	b580      	push	{r7, lr}
 801c490:	b084      	sub	sp, #16
 801c492:	af00      	add	r7, sp, #0
 801c494:	0002      	movs	r2, r0
 801c496:	1dfb      	adds	r3, r7, #7
 801c498:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801c49a:	230f      	movs	r3, #15
 801c49c:	18fb      	adds	r3, r7, r3
 801c49e:	2200      	movs	r2, #0
 801c4a0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 801c4a2:	1dfb      	adds	r3, r7, #7
 801c4a4:	781b      	ldrb	r3, [r3, #0]
 801c4a6:	2b03      	cmp	r3, #3
 801c4a8:	d017      	beq.n	801c4da <USBD_Get_USB_Status+0x4c>
 801c4aa:	dc1b      	bgt.n	801c4e4 <USBD_Get_USB_Status+0x56>
 801c4ac:	2b02      	cmp	r3, #2
 801c4ae:	d00f      	beq.n	801c4d0 <USBD_Get_USB_Status+0x42>
 801c4b0:	dc18      	bgt.n	801c4e4 <USBD_Get_USB_Status+0x56>
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d002      	beq.n	801c4bc <USBD_Get_USB_Status+0x2e>
 801c4b6:	2b01      	cmp	r3, #1
 801c4b8:	d005      	beq.n	801c4c6 <USBD_Get_USB_Status+0x38>
 801c4ba:	e013      	b.n	801c4e4 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801c4bc:	230f      	movs	r3, #15
 801c4be:	18fb      	adds	r3, r7, r3
 801c4c0:	2200      	movs	r2, #0
 801c4c2:	701a      	strb	r2, [r3, #0]
    break;
 801c4c4:	e013      	b.n	801c4ee <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801c4c6:	230f      	movs	r3, #15
 801c4c8:	18fb      	adds	r3, r7, r3
 801c4ca:	2202      	movs	r2, #2
 801c4cc:	701a      	strb	r2, [r3, #0]
    break;
 801c4ce:	e00e      	b.n	801c4ee <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801c4d0:	230f      	movs	r3, #15
 801c4d2:	18fb      	adds	r3, r7, r3
 801c4d4:	2201      	movs	r2, #1
 801c4d6:	701a      	strb	r2, [r3, #0]
    break;
 801c4d8:	e009      	b.n	801c4ee <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801c4da:	230f      	movs	r3, #15
 801c4dc:	18fb      	adds	r3, r7, r3
 801c4de:	2202      	movs	r2, #2
 801c4e0:	701a      	strb	r2, [r3, #0]
    break;
 801c4e2:	e004      	b.n	801c4ee <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 801c4e4:	230f      	movs	r3, #15
 801c4e6:	18fb      	adds	r3, r7, r3
 801c4e8:	2202      	movs	r2, #2
 801c4ea:	701a      	strb	r2, [r3, #0]
    break;
 801c4ec:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 801c4ee:	230f      	movs	r3, #15
 801c4f0:	18fb      	adds	r3, r7, r3
 801c4f2:	781b      	ldrb	r3, [r3, #0]
}
 801c4f4:	0018      	movs	r0, r3
 801c4f6:	46bd      	mov	sp, r7
 801c4f8:	b004      	add	sp, #16
 801c4fa:	bd80      	pop	{r7, pc}

0801c4fc <arm_cfft_radix4by2_q31>:
 801c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4fe:	465f      	mov	r7, fp
 801c500:	4656      	mov	r6, sl
 801c502:	464d      	mov	r5, r9
 801c504:	4644      	mov	r4, r8
 801c506:	000b      	movs	r3, r1
 801c508:	b4f0      	push	{r4, r5, r6, r7}
 801c50a:	085b      	lsrs	r3, r3, #1
 801c50c:	b08f      	sub	sp, #60	@ 0x3c
 801c50e:	910a      	str	r1, [sp, #40]	@ 0x28
 801c510:	0007      	movs	r7, r0
 801c512:	9009      	str	r0, [sp, #36]	@ 0x24
 801c514:	0011      	movs	r1, r2
 801c516:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c518:	930c      	str	r3, [sp, #48]	@ 0x30
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d100      	bne.n	801c520 <arm_cfft_radix4by2_q31+0x24>
 801c51e:	e0a0      	b.n	801c662 <arm_cfft_radix4by2_q31+0x166>
 801c520:	0002      	movs	r2, r0
 801c522:	00db      	lsls	r3, r3, #3
 801c524:	3204      	adds	r2, #4
 801c526:	4691      	mov	r9, r2
 801c528:	4698      	mov	r8, r3
 801c52a:	000a      	movs	r2, r1
 801c52c:	464e      	mov	r6, r9
 801c52e:	4442      	add	r2, r8
 801c530:	4699      	mov	r9, r3
 801c532:	4688      	mov	r8, r1
 801c534:	9208      	str	r2, [sp, #32]
 801c536:	900d      	str	r0, [sp, #52]	@ 0x34
 801c538:	4643      	mov	r3, r8
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	469b      	mov	fp, r3
 801c53e:	4643      	mov	r3, r8
 801c540:	685b      	ldr	r3, [r3, #4]
 801c542:	469a      	mov	sl, r3
 801c544:	683b      	ldr	r3, [r7, #0]
 801c546:	109c      	asrs	r4, r3, #2
 801c548:	464b      	mov	r3, r9
 801c54a:	58fb      	ldr	r3, [r7, r3]
 801c54c:	109a      	asrs	r2, r3, #2
 801c54e:	18a3      	adds	r3, r4, r2
 801c550:	603b      	str	r3, [r7, #0]
 801c552:	6833      	ldr	r3, [r6, #0]
 801c554:	1aa4      	subs	r4, r4, r2
 801c556:	109d      	asrs	r5, r3, #2
 801c558:	464b      	mov	r3, r9
 801c55a:	58f3      	ldr	r3, [r6, r3]
 801c55c:	17e2      	asrs	r2, r4, #31
 801c55e:	109b      	asrs	r3, r3, #2
 801c560:	18e9      	adds	r1, r5, r3
 801c562:	6031      	str	r1, [r6, #0]
 801c564:	0011      	movs	r1, r2
 801c566:	465a      	mov	r2, fp
 801c568:	17d2      	asrs	r2, r2, #31
 801c56a:	0010      	movs	r0, r2
 801c56c:	4652      	mov	r2, sl
 801c56e:	1aed      	subs	r5, r5, r3
 801c570:	17eb      	asrs	r3, r5, #31
 801c572:	17d2      	asrs	r2, r2, #31
 801c574:	9307      	str	r3, [sp, #28]
 801c576:	9204      	str	r2, [sp, #16]
 801c578:	0003      	movs	r3, r0
 801c57a:	465a      	mov	r2, fp
 801c57c:	9006      	str	r0, [sp, #24]
 801c57e:	0020      	movs	r0, r4
 801c580:	9105      	str	r1, [sp, #20]
 801c582:	f7e4 f81d 	bl	80005c0 <__aeabi_lmul>
 801c586:	2280      	movs	r2, #128	@ 0x80
 801c588:	2300      	movs	r3, #0
 801c58a:	0612      	lsls	r2, r2, #24
 801c58c:	1880      	adds	r0, r0, r2
 801c58e:	4159      	adcs	r1, r3
 801c590:	2300      	movs	r3, #0
 801c592:	9101      	str	r1, [sp, #4]
 801c594:	9300      	str	r3, [sp, #0]
 801c596:	4652      	mov	r2, sl
 801c598:	9b04      	ldr	r3, [sp, #16]
 801c59a:	0028      	movs	r0, r5
 801c59c:	17e9      	asrs	r1, r5, #31
 801c59e:	f7e4 f80f 	bl	80005c0 <__aeabi_lmul>
 801c5a2:	9a00      	ldr	r2, [sp, #0]
 801c5a4:	9b01      	ldr	r3, [sp, #4]
 801c5a6:	1880      	adds	r0, r0, r2
 801c5a8:	4159      	adcs	r1, r3
 801c5aa:	2280      	movs	r2, #128	@ 0x80
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	0612      	lsls	r2, r2, #24
 801c5b0:	1880      	adds	r0, r0, r2
 801c5b2:	4159      	adcs	r1, r3
 801c5b4:	464a      	mov	r2, r9
 801c5b6:	004b      	lsls	r3, r1, #1
 801c5b8:	50bb      	str	r3, [r7, r2]
 801c5ba:	4658      	mov	r0, fp
 801c5bc:	002a      	movs	r2, r5
 801c5be:	9b07      	ldr	r3, [sp, #28]
 801c5c0:	9906      	ldr	r1, [sp, #24]
 801c5c2:	f7e3 fffd 	bl	80005c0 <__aeabi_lmul>
 801c5c6:	2280      	movs	r2, #128	@ 0x80
 801c5c8:	2300      	movs	r3, #0
 801c5ca:	0612      	lsls	r2, r2, #24
 801c5cc:	1880      	adds	r0, r0, r2
 801c5ce:	4159      	adcs	r1, r3
 801c5d0:	2000      	movs	r0, #0
 801c5d2:	9103      	str	r1, [sp, #12]
 801c5d4:	9002      	str	r0, [sp, #8]
 801c5d6:	4652      	mov	r2, sl
 801c5d8:	9b04      	ldr	r3, [sp, #16]
 801c5da:	0020      	movs	r0, r4
 801c5dc:	9905      	ldr	r1, [sp, #20]
 801c5de:	f7e3 ffef 	bl	80005c0 <__aeabi_lmul>
 801c5e2:	9a02      	ldr	r2, [sp, #8]
 801c5e4:	9b03      	ldr	r3, [sp, #12]
 801c5e6:	1a12      	subs	r2, r2, r0
 801c5e8:	418b      	sbcs	r3, r1
 801c5ea:	2080      	movs	r0, #128	@ 0x80
 801c5ec:	2100      	movs	r1, #0
 801c5ee:	0600      	lsls	r0, r0, #24
 801c5f0:	1812      	adds	r2, r2, r0
 801c5f2:	414b      	adcs	r3, r1
 801c5f4:	464a      	mov	r2, r9
 801c5f6:	005b      	lsls	r3, r3, #1
 801c5f8:	50b3      	str	r3, [r6, r2]
 801c5fa:	2308      	movs	r3, #8
 801c5fc:	469c      	mov	ip, r3
 801c5fe:	9b08      	ldr	r3, [sp, #32]
 801c600:	44e0      	add	r8, ip
 801c602:	3708      	adds	r7, #8
 801c604:	3608      	adds	r6, #8
 801c606:	4598      	cmp	r8, r3
 801c608:	d196      	bne.n	801c538 <arm_cfft_radix4by2_q31+0x3c>
 801c60a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c60c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c60e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c610:	2302      	movs	r3, #2
 801c612:	003a      	movs	r2, r7
 801c614:	0029      	movs	r1, r5
 801c616:	0020      	movs	r0, r4
 801c618:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801c61a:	f000 f957 	bl	801c8cc <arm_radix4_butterfly_q31>
 801c61e:	46a4      	mov	ip, r4
 801c620:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c622:	2302      	movs	r3, #2
 801c624:	0088      	lsls	r0, r1, #2
 801c626:	4460      	add	r0, ip
 801c628:	003a      	movs	r2, r7
 801c62a:	0029      	movs	r1, r5
 801c62c:	f000 f94e 	bl	801c8cc <arm_radix4_butterfly_q31>
 801c630:	46a4      	mov	ip, r4
 801c632:	0128      	lsls	r0, r5, #4
 801c634:	4460      	add	r0, ip
 801c636:	6833      	ldr	r3, [r6, #0]
 801c638:	005b      	lsls	r3, r3, #1
 801c63a:	6033      	str	r3, [r6, #0]
 801c63c:	6873      	ldr	r3, [r6, #4]
 801c63e:	005b      	lsls	r3, r3, #1
 801c640:	6073      	str	r3, [r6, #4]
 801c642:	68b3      	ldr	r3, [r6, #8]
 801c644:	005b      	lsls	r3, r3, #1
 801c646:	60b3      	str	r3, [r6, #8]
 801c648:	68f3      	ldr	r3, [r6, #12]
 801c64a:	005b      	lsls	r3, r3, #1
 801c64c:	60f3      	str	r3, [r6, #12]
 801c64e:	3610      	adds	r6, #16
 801c650:	42b0      	cmp	r0, r6
 801c652:	d1f0      	bne.n	801c636 <arm_cfft_radix4by2_q31+0x13a>
 801c654:	b00f      	add	sp, #60	@ 0x3c
 801c656:	bc3c      	pop	{r2, r3, r4, r5}
 801c658:	4690      	mov	r8, r2
 801c65a:	4699      	mov	r9, r3
 801c65c:	46a2      	mov	sl, r4
 801c65e:	46ab      	mov	fp, r5
 801c660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c662:	2302      	movs	r3, #2
 801c664:	2100      	movs	r1, #0
 801c666:	0015      	movs	r5, r2
 801c668:	f000 f930 	bl	801c8cc <arm_radix4_butterfly_q31>
 801c66c:	46bc      	mov	ip, r7
 801c66e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c670:	002a      	movs	r2, r5
 801c672:	0098      	lsls	r0, r3, #2
 801c674:	4460      	add	r0, ip
 801c676:	2302      	movs	r3, #2
 801c678:	2100      	movs	r1, #0
 801c67a:	f000 f927 	bl	801c8cc <arm_radix4_butterfly_q31>
 801c67e:	e7e9      	b.n	801c654 <arm_cfft_radix4by2_q31+0x158>

0801c680 <arm_cfft_radix4by2_inverse_q31>:
 801c680:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c682:	465f      	mov	r7, fp
 801c684:	4656      	mov	r6, sl
 801c686:	464d      	mov	r5, r9
 801c688:	4644      	mov	r4, r8
 801c68a:	000b      	movs	r3, r1
 801c68c:	b4f0      	push	{r4, r5, r6, r7}
 801c68e:	085b      	lsrs	r3, r3, #1
 801c690:	b08f      	sub	sp, #60	@ 0x3c
 801c692:	910a      	str	r1, [sp, #40]	@ 0x28
 801c694:	0007      	movs	r7, r0
 801c696:	9009      	str	r0, [sp, #36]	@ 0x24
 801c698:	0011      	movs	r1, r2
 801c69a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c69c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d100      	bne.n	801c6a4 <arm_cfft_radix4by2_inverse_q31+0x24>
 801c6a2:	e0a0      	b.n	801c7e6 <arm_cfft_radix4by2_inverse_q31+0x166>
 801c6a4:	0002      	movs	r2, r0
 801c6a6:	00db      	lsls	r3, r3, #3
 801c6a8:	3204      	adds	r2, #4
 801c6aa:	4691      	mov	r9, r2
 801c6ac:	4698      	mov	r8, r3
 801c6ae:	000a      	movs	r2, r1
 801c6b0:	464e      	mov	r6, r9
 801c6b2:	4442      	add	r2, r8
 801c6b4:	4699      	mov	r9, r3
 801c6b6:	4688      	mov	r8, r1
 801c6b8:	9208      	str	r2, [sp, #32]
 801c6ba:	900d      	str	r0, [sp, #52]	@ 0x34
 801c6bc:	4643      	mov	r3, r8
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	469b      	mov	fp, r3
 801c6c2:	4643      	mov	r3, r8
 801c6c4:	685b      	ldr	r3, [r3, #4]
 801c6c6:	469a      	mov	sl, r3
 801c6c8:	683b      	ldr	r3, [r7, #0]
 801c6ca:	109c      	asrs	r4, r3, #2
 801c6cc:	464b      	mov	r3, r9
 801c6ce:	58fb      	ldr	r3, [r7, r3]
 801c6d0:	109a      	asrs	r2, r3, #2
 801c6d2:	18a3      	adds	r3, r4, r2
 801c6d4:	603b      	str	r3, [r7, #0]
 801c6d6:	6833      	ldr	r3, [r6, #0]
 801c6d8:	1aa4      	subs	r4, r4, r2
 801c6da:	109d      	asrs	r5, r3, #2
 801c6dc:	464b      	mov	r3, r9
 801c6de:	58f3      	ldr	r3, [r6, r3]
 801c6e0:	17e2      	asrs	r2, r4, #31
 801c6e2:	109b      	asrs	r3, r3, #2
 801c6e4:	18e9      	adds	r1, r5, r3
 801c6e6:	6031      	str	r1, [r6, #0]
 801c6e8:	0011      	movs	r1, r2
 801c6ea:	465a      	mov	r2, fp
 801c6ec:	17d2      	asrs	r2, r2, #31
 801c6ee:	0010      	movs	r0, r2
 801c6f0:	4652      	mov	r2, sl
 801c6f2:	1aed      	subs	r5, r5, r3
 801c6f4:	17eb      	asrs	r3, r5, #31
 801c6f6:	17d2      	asrs	r2, r2, #31
 801c6f8:	9307      	str	r3, [sp, #28]
 801c6fa:	9204      	str	r2, [sp, #16]
 801c6fc:	0003      	movs	r3, r0
 801c6fe:	465a      	mov	r2, fp
 801c700:	9006      	str	r0, [sp, #24]
 801c702:	0020      	movs	r0, r4
 801c704:	9105      	str	r1, [sp, #20]
 801c706:	f7e3 ff5b 	bl	80005c0 <__aeabi_lmul>
 801c70a:	2280      	movs	r2, #128	@ 0x80
 801c70c:	2300      	movs	r3, #0
 801c70e:	0612      	lsls	r2, r2, #24
 801c710:	1880      	adds	r0, r0, r2
 801c712:	4159      	adcs	r1, r3
 801c714:	2300      	movs	r3, #0
 801c716:	9101      	str	r1, [sp, #4]
 801c718:	9300      	str	r3, [sp, #0]
 801c71a:	4652      	mov	r2, sl
 801c71c:	9b04      	ldr	r3, [sp, #16]
 801c71e:	0028      	movs	r0, r5
 801c720:	17e9      	asrs	r1, r5, #31
 801c722:	f7e3 ff4d 	bl	80005c0 <__aeabi_lmul>
 801c726:	9a00      	ldr	r2, [sp, #0]
 801c728:	9b01      	ldr	r3, [sp, #4]
 801c72a:	1a12      	subs	r2, r2, r0
 801c72c:	418b      	sbcs	r3, r1
 801c72e:	2080      	movs	r0, #128	@ 0x80
 801c730:	2100      	movs	r1, #0
 801c732:	0600      	lsls	r0, r0, #24
 801c734:	1812      	adds	r2, r2, r0
 801c736:	414b      	adcs	r3, r1
 801c738:	464a      	mov	r2, r9
 801c73a:	005b      	lsls	r3, r3, #1
 801c73c:	50bb      	str	r3, [r7, r2]
 801c73e:	4658      	mov	r0, fp
 801c740:	002a      	movs	r2, r5
 801c742:	9b07      	ldr	r3, [sp, #28]
 801c744:	9906      	ldr	r1, [sp, #24]
 801c746:	f7e3 ff3b 	bl	80005c0 <__aeabi_lmul>
 801c74a:	2280      	movs	r2, #128	@ 0x80
 801c74c:	2300      	movs	r3, #0
 801c74e:	0612      	lsls	r2, r2, #24
 801c750:	1880      	adds	r0, r0, r2
 801c752:	4159      	adcs	r1, r3
 801c754:	2000      	movs	r0, #0
 801c756:	9103      	str	r1, [sp, #12]
 801c758:	9002      	str	r0, [sp, #8]
 801c75a:	4652      	mov	r2, sl
 801c75c:	9b04      	ldr	r3, [sp, #16]
 801c75e:	0020      	movs	r0, r4
 801c760:	9905      	ldr	r1, [sp, #20]
 801c762:	f7e3 ff2d 	bl	80005c0 <__aeabi_lmul>
 801c766:	9b02      	ldr	r3, [sp, #8]
 801c768:	9c03      	ldr	r4, [sp, #12]
 801c76a:	18c0      	adds	r0, r0, r3
 801c76c:	4161      	adcs	r1, r4
 801c76e:	2380      	movs	r3, #128	@ 0x80
 801c770:	2400      	movs	r4, #0
 801c772:	061b      	lsls	r3, r3, #24
 801c774:	18c0      	adds	r0, r0, r3
 801c776:	4161      	adcs	r1, r4
 801c778:	464a      	mov	r2, r9
 801c77a:	004b      	lsls	r3, r1, #1
 801c77c:	50b3      	str	r3, [r6, r2]
 801c77e:	2308      	movs	r3, #8
 801c780:	469c      	mov	ip, r3
 801c782:	9b08      	ldr	r3, [sp, #32]
 801c784:	44e0      	add	r8, ip
 801c786:	3708      	adds	r7, #8
 801c788:	3608      	adds	r6, #8
 801c78a:	4598      	cmp	r8, r3
 801c78c:	d196      	bne.n	801c6bc <arm_cfft_radix4by2_inverse_q31+0x3c>
 801c78e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801c790:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c792:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c794:	2302      	movs	r3, #2
 801c796:	003a      	movs	r2, r7
 801c798:	0029      	movs	r1, r5
 801c79a:	0020      	movs	r0, r4
 801c79c:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 801c79e:	f000 fb3b 	bl	801ce18 <arm_radix4_butterfly_inverse_q31>
 801c7a2:	46a4      	mov	ip, r4
 801c7a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c7a6:	2302      	movs	r3, #2
 801c7a8:	0088      	lsls	r0, r1, #2
 801c7aa:	4460      	add	r0, ip
 801c7ac:	003a      	movs	r2, r7
 801c7ae:	0029      	movs	r1, r5
 801c7b0:	f000 fb32 	bl	801ce18 <arm_radix4_butterfly_inverse_q31>
 801c7b4:	46a4      	mov	ip, r4
 801c7b6:	0128      	lsls	r0, r5, #4
 801c7b8:	4460      	add	r0, ip
 801c7ba:	6833      	ldr	r3, [r6, #0]
 801c7bc:	005b      	lsls	r3, r3, #1
 801c7be:	6033      	str	r3, [r6, #0]
 801c7c0:	6873      	ldr	r3, [r6, #4]
 801c7c2:	005b      	lsls	r3, r3, #1
 801c7c4:	6073      	str	r3, [r6, #4]
 801c7c6:	68b3      	ldr	r3, [r6, #8]
 801c7c8:	005b      	lsls	r3, r3, #1
 801c7ca:	60b3      	str	r3, [r6, #8]
 801c7cc:	68f3      	ldr	r3, [r6, #12]
 801c7ce:	005b      	lsls	r3, r3, #1
 801c7d0:	60f3      	str	r3, [r6, #12]
 801c7d2:	3610      	adds	r6, #16
 801c7d4:	42b0      	cmp	r0, r6
 801c7d6:	d1f0      	bne.n	801c7ba <arm_cfft_radix4by2_inverse_q31+0x13a>
 801c7d8:	b00f      	add	sp, #60	@ 0x3c
 801c7da:	bc3c      	pop	{r2, r3, r4, r5}
 801c7dc:	4690      	mov	r8, r2
 801c7de:	4699      	mov	r9, r3
 801c7e0:	46a2      	mov	sl, r4
 801c7e2:	46ab      	mov	fp, r5
 801c7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7e6:	2302      	movs	r3, #2
 801c7e8:	2100      	movs	r1, #0
 801c7ea:	0015      	movs	r5, r2
 801c7ec:	f000 fb14 	bl	801ce18 <arm_radix4_butterfly_inverse_q31>
 801c7f0:	46bc      	mov	ip, r7
 801c7f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c7f4:	002a      	movs	r2, r5
 801c7f6:	0098      	lsls	r0, r3, #2
 801c7f8:	4460      	add	r0, ip
 801c7fa:	2302      	movs	r3, #2
 801c7fc:	2100      	movs	r1, #0
 801c7fe:	f000 fb0b 	bl	801ce18 <arm_radix4_butterfly_inverse_q31>
 801c802:	e7e9      	b.n	801c7d8 <arm_cfft_radix4by2_inverse_q31+0x158>

0801c804 <arm_cfft_q31>:
 801c804:	b570      	push	{r4, r5, r6, lr}
 801c806:	001e      	movs	r6, r3
 801c808:	2380      	movs	r3, #128	@ 0x80
 801c80a:	000d      	movs	r5, r1
 801c80c:	0004      	movs	r4, r0
 801c80e:	8801      	ldrh	r1, [r0, #0]
 801c810:	005b      	lsls	r3, r3, #1
 801c812:	2a01      	cmp	r2, #1
 801c814:	d028      	beq.n	801c868 <arm_cfft_q31+0x64>
 801c816:	4299      	cmp	r1, r3
 801c818:	d020      	beq.n	801c85c <arm_cfft_q31+0x58>
 801c81a:	d812      	bhi.n	801c842 <arm_cfft_q31+0x3e>
 801c81c:	2920      	cmp	r1, #32
 801c81e:	d004      	beq.n	801c82a <arm_cfft_q31+0x26>
 801c820:	d949      	bls.n	801c8b6 <arm_cfft_q31+0xb2>
 801c822:	2940      	cmp	r1, #64	@ 0x40
 801c824:	d01a      	beq.n	801c85c <arm_cfft_q31+0x58>
 801c826:	2980      	cmp	r1, #128	@ 0x80
 801c828:	d103      	bne.n	801c832 <arm_cfft_q31+0x2e>
 801c82a:	6862      	ldr	r2, [r4, #4]
 801c82c:	0028      	movs	r0, r5
 801c82e:	f7ff fe65 	bl	801c4fc <arm_cfft_radix4by2_q31>
 801c832:	2e00      	cmp	r6, #0
 801c834:	d004      	beq.n	801c840 <arm_cfft_q31+0x3c>
 801c836:	68a2      	ldr	r2, [r4, #8]
 801c838:	89a1      	ldrh	r1, [r4, #12]
 801c83a:	0028      	movs	r0, r5
 801c83c:	f7e3 fc64 	bl	8000108 <arm_bitreversal_32>
 801c840:	bd70      	pop	{r4, r5, r6, pc}
 801c842:	2380      	movs	r3, #128	@ 0x80
 801c844:	00db      	lsls	r3, r3, #3
 801c846:	4299      	cmp	r1, r3
 801c848:	d008      	beq.n	801c85c <arm_cfft_q31+0x58>
 801c84a:	d92f      	bls.n	801c8ac <arm_cfft_q31+0xa8>
 801c84c:	2380      	movs	r3, #128	@ 0x80
 801c84e:	011b      	lsls	r3, r3, #4
 801c850:	4299      	cmp	r1, r3
 801c852:	d0ea      	beq.n	801c82a <arm_cfft_q31+0x26>
 801c854:	2380      	movs	r3, #128	@ 0x80
 801c856:	015b      	lsls	r3, r3, #5
 801c858:	4299      	cmp	r1, r3
 801c85a:	d1ea      	bne.n	801c832 <arm_cfft_q31+0x2e>
 801c85c:	2301      	movs	r3, #1
 801c85e:	6862      	ldr	r2, [r4, #4]
 801c860:	0028      	movs	r0, r5
 801c862:	f000 f833 	bl	801c8cc <arm_radix4_butterfly_q31>
 801c866:	e7e4      	b.n	801c832 <arm_cfft_q31+0x2e>
 801c868:	4299      	cmp	r1, r3
 801c86a:	d019      	beq.n	801c8a0 <arm_cfft_q31+0x9c>
 801c86c:	d80b      	bhi.n	801c886 <arm_cfft_q31+0x82>
 801c86e:	2920      	cmp	r1, #32
 801c870:	d004      	beq.n	801c87c <arm_cfft_q31+0x78>
 801c872:	d928      	bls.n	801c8c6 <arm_cfft_q31+0xc2>
 801c874:	2940      	cmp	r1, #64	@ 0x40
 801c876:	d013      	beq.n	801c8a0 <arm_cfft_q31+0x9c>
 801c878:	2980      	cmp	r1, #128	@ 0x80
 801c87a:	d1da      	bne.n	801c832 <arm_cfft_q31+0x2e>
 801c87c:	6862      	ldr	r2, [r4, #4]
 801c87e:	0028      	movs	r0, r5
 801c880:	f7ff fefe 	bl	801c680 <arm_cfft_radix4by2_inverse_q31>
 801c884:	e7d5      	b.n	801c832 <arm_cfft_q31+0x2e>
 801c886:	2380      	movs	r3, #128	@ 0x80
 801c888:	00db      	lsls	r3, r3, #3
 801c88a:	4299      	cmp	r1, r3
 801c88c:	d008      	beq.n	801c8a0 <arm_cfft_q31+0x9c>
 801c88e:	d915      	bls.n	801c8bc <arm_cfft_q31+0xb8>
 801c890:	2380      	movs	r3, #128	@ 0x80
 801c892:	011b      	lsls	r3, r3, #4
 801c894:	4299      	cmp	r1, r3
 801c896:	d0f1      	beq.n	801c87c <arm_cfft_q31+0x78>
 801c898:	2380      	movs	r3, #128	@ 0x80
 801c89a:	015b      	lsls	r3, r3, #5
 801c89c:	4299      	cmp	r1, r3
 801c89e:	d1c8      	bne.n	801c832 <arm_cfft_q31+0x2e>
 801c8a0:	2301      	movs	r3, #1
 801c8a2:	6862      	ldr	r2, [r4, #4]
 801c8a4:	0028      	movs	r0, r5
 801c8a6:	f000 fab7 	bl	801ce18 <arm_radix4_butterfly_inverse_q31>
 801c8aa:	e7c2      	b.n	801c832 <arm_cfft_q31+0x2e>
 801c8ac:	2380      	movs	r3, #128	@ 0x80
 801c8ae:	009b      	lsls	r3, r3, #2
 801c8b0:	4299      	cmp	r1, r3
 801c8b2:	d0ba      	beq.n	801c82a <arm_cfft_q31+0x26>
 801c8b4:	e7bd      	b.n	801c832 <arm_cfft_q31+0x2e>
 801c8b6:	2910      	cmp	r1, #16
 801c8b8:	d1bb      	bne.n	801c832 <arm_cfft_q31+0x2e>
 801c8ba:	e7cf      	b.n	801c85c <arm_cfft_q31+0x58>
 801c8bc:	2380      	movs	r3, #128	@ 0x80
 801c8be:	009b      	lsls	r3, r3, #2
 801c8c0:	4299      	cmp	r1, r3
 801c8c2:	d0db      	beq.n	801c87c <arm_cfft_q31+0x78>
 801c8c4:	e7b5      	b.n	801c832 <arm_cfft_q31+0x2e>
 801c8c6:	2910      	cmp	r1, #16
 801c8c8:	d1b3      	bne.n	801c832 <arm_cfft_q31+0x2e>
 801c8ca:	e7e9      	b.n	801c8a0 <arm_cfft_q31+0x9c>

0801c8cc <arm_radix4_butterfly_q31>:
 801c8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8ce:	464d      	mov	r5, r9
 801c8d0:	4644      	mov	r4, r8
 801c8d2:	465f      	mov	r7, fp
 801c8d4:	4656      	mov	r6, sl
 801c8d6:	469c      	mov	ip, r3
 801c8d8:	b4f0      	push	{r4, r5, r6, r7}
 801c8da:	b0a7      	sub	sp, #156	@ 0x9c
 801c8dc:	9114      	str	r1, [sp, #80]	@ 0x50
 801c8de:	0889      	lsrs	r1, r1, #2
 801c8e0:	9310      	str	r3, [sp, #64]	@ 0x40
 801c8e2:	00cb      	lsls	r3, r1, #3
 801c8e4:	0015      	movs	r5, r2
 801c8e6:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c8e8:	18c2      	adds	r2, r0, r3
 801c8ea:	000c      	movs	r4, r1
 801c8ec:	469a      	mov	sl, r3
 801c8ee:	9124      	str	r1, [sp, #144]	@ 0x90
 801c8f0:	18d1      	adds	r1, r2, r3
 801c8f2:	4663      	mov	r3, ip
 801c8f4:	468b      	mov	fp, r1
 801c8f6:	0119      	lsls	r1, r3, #4
 801c8f8:	910d      	str	r1, [sp, #52]	@ 0x34
 801c8fa:	00d9      	lsls	r1, r3, #3
 801c8fc:	005b      	lsls	r3, r3, #1
 801c8fe:	4463      	add	r3, ip
 801c900:	910e      	str	r1, [sp, #56]	@ 0x38
 801c902:	00d9      	lsls	r1, r3, #3
 801c904:	465b      	mov	r3, fp
 801c906:	44da      	add	sl, fp
 801c908:	4690      	mov	r8, r2
 801c90a:	4683      	mov	fp, r0
 801c90c:	4699      	mov	r9, r3
 801c90e:	9022      	str	r0, [sp, #136]	@ 0x88
 801c910:	9025      	str	r0, [sp, #148]	@ 0x94
 801c912:	910f      	str	r1, [sp, #60]	@ 0x3c
 801c914:	9502      	str	r5, [sp, #8]
 801c916:	9500      	str	r5, [sp, #0]
 801c918:	9501      	str	r5, [sp, #4]
 801c91a:	9407      	str	r4, [sp, #28]
 801c91c:	465b      	mov	r3, fp
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	4642      	mov	r2, r8
 801c922:	111c      	asrs	r4, r3, #4
 801c924:	464b      	mov	r3, r9
 801c926:	4658      	mov	r0, fp
 801c928:	681b      	ldr	r3, [r3, #0]
 801c92a:	6812      	ldr	r2, [r2, #0]
 801c92c:	111b      	asrs	r3, r3, #4
 801c92e:	18e7      	adds	r7, r4, r3
 801c930:	1ae3      	subs	r3, r4, r3
 801c932:	1114      	asrs	r4, r2, #4
 801c934:	4652      	mov	r2, sl
 801c936:	6840      	ldr	r0, [r0, #4]
 801c938:	6812      	ldr	r2, [r2, #0]
 801c93a:	1105      	asrs	r5, r0, #4
 801c93c:	4648      	mov	r0, r9
 801c93e:	9303      	str	r3, [sp, #12]
 801c940:	1113      	asrs	r3, r2, #4
 801c942:	18e2      	adds	r2, r4, r3
 801c944:	465c      	mov	r4, fp
 801c946:	6840      	ldr	r0, [r0, #4]
 801c948:	1103      	asrs	r3, r0, #4
 801c94a:	18ee      	adds	r6, r5, r3
 801c94c:	1ae8      	subs	r0, r5, r3
 801c94e:	18bb      	adds	r3, r7, r2
 801c950:	6023      	str	r3, [r4, #0]
 801c952:	4644      	mov	r4, r8
 801c954:	6864      	ldr	r4, [r4, #4]
 801c956:	9004      	str	r0, [sp, #16]
 801c958:	1125      	asrs	r5, r4, #4
 801c95a:	4654      	mov	r4, sl
 801c95c:	6864      	ldr	r4, [r4, #4]
 801c95e:	1123      	asrs	r3, r4, #4
 801c960:	465c      	mov	r4, fp
 801c962:	18eb      	adds	r3, r5, r3
 801c964:	18f1      	adds	r1, r6, r3
 801c966:	6061      	str	r1, [r4, #4]
 801c968:	4655      	mov	r5, sl
 801c96a:	4644      	mov	r4, r8
 801c96c:	686d      	ldr	r5, [r5, #4]
 801c96e:	6864      	ldr	r4, [r4, #4]
 801c970:	1129      	asrs	r1, r5, #4
 801c972:	1124      	asrs	r4, r4, #4
 801c974:	1a64      	subs	r4, r4, r1
 801c976:	4641      	mov	r1, r8
 801c978:	6809      	ldr	r1, [r1, #0]
 801c97a:	9405      	str	r4, [sp, #20]
 801c97c:	1108      	asrs	r0, r1, #4
 801c97e:	4651      	mov	r1, sl
 801c980:	6809      	ldr	r1, [r1, #0]
 801c982:	1abc      	subs	r4, r7, r2
 801c984:	1109      	asrs	r1, r1, #4
 801c986:	1a41      	subs	r1, r0, r1
 801c988:	17e2      	asrs	r2, r4, #31
 801c98a:	9106      	str	r1, [sp, #24]
 801c98c:	0011      	movs	r1, r2
 801c98e:	9a01      	ldr	r2, [sp, #4]
 801c990:	9108      	str	r1, [sp, #32]
 801c992:	6817      	ldr	r7, [r2, #0]
 801c994:	17fd      	asrs	r5, r7, #31
 801c996:	0028      	movs	r0, r5
 801c998:	1af5      	subs	r5, r6, r3
 801c99a:	17ee      	asrs	r6, r5, #31
 801c99c:	960a      	str	r6, [sp, #40]	@ 0x28
 801c99e:	6856      	ldr	r6, [r2, #4]
 801c9a0:	9009      	str	r0, [sp, #36]	@ 0x24
 801c9a2:	17f3      	asrs	r3, r6, #31
 801c9a4:	003a      	movs	r2, r7
 801c9a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c9a8:	0003      	movs	r3, r0
 801c9aa:	0020      	movs	r0, r4
 801c9ac:	f7e3 fe08 	bl	80005c0 <__aeabi_lmul>
 801c9b0:	0032      	movs	r2, r6
 801c9b2:	17f3      	asrs	r3, r6, #31
 801c9b4:	910c      	str	r1, [sp, #48]	@ 0x30
 801c9b6:	0028      	movs	r0, r5
 801c9b8:	17e9      	asrs	r1, r5, #31
 801c9ba:	f7e3 fe01 	bl	80005c0 <__aeabi_lmul>
 801c9be:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801c9c0:	002a      	movs	r2, r5
 801c9c2:	4684      	mov	ip, r0
 801c9c4:	4640      	mov	r0, r8
 801c9c6:	4461      	add	r1, ip
 801c9c8:	0049      	lsls	r1, r1, #1
 801c9ca:	6001      	str	r1, [r0, #0]
 801c9cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c9ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c9d0:	0038      	movs	r0, r7
 801c9d2:	f7e3 fdf5 	bl	80005c0 <__aeabi_lmul>
 801c9d6:	0032      	movs	r2, r6
 801c9d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c9da:	000d      	movs	r5, r1
 801c9dc:	0020      	movs	r0, r4
 801c9de:	9908      	ldr	r1, [sp, #32]
 801c9e0:	f7e3 fdee 	bl	80005c0 <__aeabi_lmul>
 801c9e4:	4646      	mov	r6, r8
 801c9e6:	1a6d      	subs	r5, r5, r1
 801c9e8:	006d      	lsls	r5, r5, #1
 801c9ea:	6075      	str	r5, [r6, #4]
 801c9ec:	9903      	ldr	r1, [sp, #12]
 801c9ee:	9d05      	ldr	r5, [sp, #20]
 801c9f0:	000c      	movs	r4, r1
 801c9f2:	46ac      	mov	ip, r5
 801c9f4:	4464      	add	r4, ip
 801c9f6:	17e6      	asrs	r6, r4, #31
 801c9f8:	0031      	movs	r1, r6
 801c9fa:	9b00      	ldr	r3, [sp, #0]
 801c9fc:	9804      	ldr	r0, [sp, #16]
 801c9fe:	681e      	ldr	r6, [r3, #0]
 801ca00:	17f7      	asrs	r7, r6, #31
 801ca02:	9709      	str	r7, [sp, #36]	@ 0x24
 801ca04:	9f06      	ldr	r7, [sp, #24]
 801ca06:	0032      	movs	r2, r6
 801ca08:	1bc7      	subs	r7, r0, r7
 801ca0a:	17fd      	asrs	r5, r7, #31
 801ca0c:	950a      	str	r5, [sp, #40]	@ 0x28
 801ca0e:	685d      	ldr	r5, [r3, #4]
 801ca10:	17f3      	asrs	r3, r6, #31
 801ca12:	17e8      	asrs	r0, r5, #31
 801ca14:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ca16:	0020      	movs	r0, r4
 801ca18:	9108      	str	r1, [sp, #32]
 801ca1a:	f7e3 fdd1 	bl	80005c0 <__aeabi_lmul>
 801ca1e:	002a      	movs	r2, r5
 801ca20:	17eb      	asrs	r3, r5, #31
 801ca22:	910c      	str	r1, [sp, #48]	@ 0x30
 801ca24:	0038      	movs	r0, r7
 801ca26:	17f9      	asrs	r1, r7, #31
 801ca28:	f7e3 fdca 	bl	80005c0 <__aeabi_lmul>
 801ca2c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ca2e:	003a      	movs	r2, r7
 801ca30:	4684      	mov	ip, r0
 801ca32:	4648      	mov	r0, r9
 801ca34:	4461      	add	r1, ip
 801ca36:	0049      	lsls	r1, r1, #1
 801ca38:	6001      	str	r1, [r0, #0]
 801ca3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ca3c:	0030      	movs	r0, r6
 801ca3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ca40:	f7e3 fdbe 	bl	80005c0 <__aeabi_lmul>
 801ca44:	002a      	movs	r2, r5
 801ca46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca48:	000e      	movs	r6, r1
 801ca4a:	0020      	movs	r0, r4
 801ca4c:	9908      	ldr	r1, [sp, #32]
 801ca4e:	f7e3 fdb7 	bl	80005c0 <__aeabi_lmul>
 801ca52:	464c      	mov	r4, r9
 801ca54:	9d05      	ldr	r5, [sp, #20]
 801ca56:	1a76      	subs	r6, r6, r1
 801ca58:	9903      	ldr	r1, [sp, #12]
 801ca5a:	0076      	lsls	r6, r6, #1
 801ca5c:	6066      	str	r6, [r4, #4]
 801ca5e:	1b4c      	subs	r4, r1, r5
 801ca60:	9e06      	ldr	r6, [sp, #24]
 801ca62:	17e1      	asrs	r1, r4, #31
 801ca64:	9103      	str	r1, [sp, #12]
 801ca66:	9902      	ldr	r1, [sp, #8]
 801ca68:	46b4      	mov	ip, r6
 801ca6a:	680f      	ldr	r7, [r1, #0]
 801ca6c:	9804      	ldr	r0, [sp, #16]
 801ca6e:	17fd      	asrs	r5, r7, #31
 801ca70:	002b      	movs	r3, r5
 801ca72:	684e      	ldr	r6, [r1, #4]
 801ca74:	4460      	add	r0, ip
 801ca76:	0005      	movs	r5, r0
 801ca78:	17c0      	asrs	r0, r0, #31
 801ca7a:	9005      	str	r0, [sp, #20]
 801ca7c:	17f0      	asrs	r0, r6, #31
 801ca7e:	9006      	str	r0, [sp, #24]
 801ca80:	003a      	movs	r2, r7
 801ca82:	0020      	movs	r0, r4
 801ca84:	17e1      	asrs	r1, r4, #31
 801ca86:	9304      	str	r3, [sp, #16]
 801ca88:	f7e3 fd9a 	bl	80005c0 <__aeabi_lmul>
 801ca8c:	0032      	movs	r2, r6
 801ca8e:	9108      	str	r1, [sp, #32]
 801ca90:	17f3      	asrs	r3, r6, #31
 801ca92:	0028      	movs	r0, r5
 801ca94:	17e9      	asrs	r1, r5, #31
 801ca96:	f7e3 fd93 	bl	80005c0 <__aeabi_lmul>
 801ca9a:	9808      	ldr	r0, [sp, #32]
 801ca9c:	002a      	movs	r2, r5
 801ca9e:	4684      	mov	ip, r0
 801caa0:	4650      	mov	r0, sl
 801caa2:	4461      	add	r1, ip
 801caa4:	0049      	lsls	r1, r1, #1
 801caa6:	6001      	str	r1, [r0, #0]
 801caa8:	9b05      	ldr	r3, [sp, #20]
 801caaa:	9904      	ldr	r1, [sp, #16]
 801caac:	0038      	movs	r0, r7
 801caae:	f7e3 fd87 	bl	80005c0 <__aeabi_lmul>
 801cab2:	0020      	movs	r0, r4
 801cab4:	2408      	movs	r4, #8
 801cab6:	000d      	movs	r5, r1
 801cab8:	0032      	movs	r2, r6
 801caba:	9b06      	ldr	r3, [sp, #24]
 801cabc:	9903      	ldr	r1, [sp, #12]
 801cabe:	f7e3 fd7f 	bl	80005c0 <__aeabi_lmul>
 801cac2:	46a4      	mov	ip, r4
 801cac4:	4650      	mov	r0, sl
 801cac6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801cac8:	44e3      	add	fp, ip
 801caca:	44e0      	add	r8, ip
 801cacc:	44e1      	add	r9, ip
 801cace:	44e2      	add	sl, ip
 801cad0:	46a4      	mov	ip, r4
 801cad2:	1a6d      	subs	r5, r5, r1
 801cad4:	006d      	lsls	r5, r5, #1
 801cad6:	9a01      	ldr	r2, [sp, #4]
 801cad8:	6045      	str	r5, [r0, #4]
 801cada:	9807      	ldr	r0, [sp, #28]
 801cadc:	4462      	add	r2, ip
 801cade:	3801      	subs	r0, #1
 801cae0:	9201      	str	r2, [sp, #4]
 801cae2:	9007      	str	r0, [sp, #28]
 801cae4:	9b00      	ldr	r3, [sp, #0]
 801cae6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cae8:	9902      	ldr	r1, [sp, #8]
 801caea:	4694      	mov	ip, r2
 801caec:	4463      	add	r3, ip
 801caee:	9300      	str	r3, [sp, #0]
 801caf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801caf2:	469c      	mov	ip, r3
 801caf4:	4461      	add	r1, ip
 801caf6:	9102      	str	r1, [sp, #8]
 801caf8:	2800      	cmp	r0, #0
 801cafa:	d000      	beq.n	801cafe <arm_radix4_butterfly_q31+0x232>
 801cafc:	e70e      	b.n	801c91c <arm_radix4_butterfly_q31+0x50>
 801cafe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cb00:	009b      	lsls	r3, r3, #2
 801cb02:	931f      	str	r3, [sp, #124]	@ 0x7c
 801cb04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cb06:	9320      	str	r3, [sp, #128]	@ 0x80
 801cb08:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cb0a:	2b04      	cmp	r3, #4
 801cb0c:	d800      	bhi.n	801cb10 <arm_radix4_butterfly_q31+0x244>
 801cb0e:	e180      	b.n	801ce12 <arm_radix4_butterfly_q31+0x546>
 801cb10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801cb12:	0893      	lsrs	r3, r2, #2
 801cb14:	1e59      	subs	r1, r3, #1
 801cb16:	9321      	str	r3, [sp, #132]	@ 0x84
 801cb18:	00db      	lsls	r3, r3, #3
 801cb1a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801cb1c:	00d3      	lsls	r3, r2, #3
 801cb1e:	9300      	str	r3, [sp, #0]
 801cb20:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cb22:	911a      	str	r1, [sp, #104]	@ 0x68
 801cb24:	00da      	lsls	r2, r3, #3
 801cb26:	921e      	str	r2, [sp, #120]	@ 0x78
 801cb28:	011a      	lsls	r2, r3, #4
 801cb2a:	921d      	str	r2, [sp, #116]	@ 0x74
 801cb2c:	001a      	movs	r2, r3
 801cb2e:	4694      	mov	ip, r2
 801cb30:	005b      	lsls	r3, r3, #1
 801cb32:	4463      	add	r3, ip
 801cb34:	00db      	lsls	r3, r3, #3
 801cb36:	931c      	str	r3, [sp, #112]	@ 0x70
 801cb38:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cb3a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cb3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cb3e:	9318      	str	r3, [sp, #96]	@ 0x60
 801cb40:	9319      	str	r3, [sp, #100]	@ 0x64
 801cb42:	9316      	str	r3, [sp, #88]	@ 0x58
 801cb44:	2300      	movs	r3, #0
 801cb46:	9315      	str	r3, [sp, #84]	@ 0x54
 801cb48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cb4a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cb4c:	681a      	ldr	r2, [r3, #0]
 801cb4e:	685b      	ldr	r3, [r3, #4]
 801cb50:	9205      	str	r2, [sp, #20]
 801cb52:	9306      	str	r3, [sp, #24]
 801cb54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cb56:	468c      	mov	ip, r1
 801cb58:	681a      	ldr	r2, [r3, #0]
 801cb5a:	685b      	ldr	r3, [r3, #4]
 801cb5c:	9207      	str	r2, [sp, #28]
 801cb5e:	9308      	str	r3, [sp, #32]
 801cb60:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cb62:	681a      	ldr	r2, [r3, #0]
 801cb64:	685b      	ldr	r3, [r3, #4]
 801cb66:	9209      	str	r2, [sp, #36]	@ 0x24
 801cb68:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801cb6a:	930a      	str	r3, [sp, #40]	@ 0x28
 801cb6c:	0013      	movs	r3, r2
 801cb6e:	4463      	add	r3, ip
 801cb70:	4698      	mov	r8, r3
 801cb72:	0013      	movs	r3, r2
 801cb74:	4442      	add	r2, r8
 801cb76:	4691      	mov	r9, r2
 801cb78:	001a      	movs	r2, r3
 801cb7a:	444a      	add	r2, r9
 801cb7c:	4692      	mov	sl, r2
 801cb7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cb80:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801cb82:	4293      	cmp	r3, r2
 801cb84:	d800      	bhi.n	801cb88 <arm_radix4_butterfly_q31+0x2bc>
 801cb86:	e0dd      	b.n	801cd44 <arm_radix4_butterfly_q31+0x478>
 801cb88:	4694      	mov	ip, r2
 801cb8a:	468b      	mov	fp, r1
 801cb8c:	4644      	mov	r4, r8
 801cb8e:	4655      	mov	r5, sl
 801cb90:	9b07      	ldr	r3, [sp, #28]
 801cb92:	17db      	asrs	r3, r3, #31
 801cb94:	930c      	str	r3, [sp, #48]	@ 0x30
 801cb96:	9b08      	ldr	r3, [sp, #32]
 801cb98:	17db      	asrs	r3, r3, #31
 801cb9a:	930d      	str	r3, [sp, #52]	@ 0x34
 801cb9c:	9b05      	ldr	r3, [sp, #20]
 801cb9e:	17db      	asrs	r3, r3, #31
 801cba0:	930e      	str	r3, [sp, #56]	@ 0x38
 801cba2:	9b06      	ldr	r3, [sp, #24]
 801cba4:	17db      	asrs	r3, r3, #31
 801cba6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cbaa:	17db      	asrs	r3, r3, #31
 801cbac:	9310      	str	r3, [sp, #64]	@ 0x40
 801cbae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cbb0:	17db      	asrs	r3, r3, #31
 801cbb2:	9311      	str	r3, [sp, #68]	@ 0x44
 801cbb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801cbb6:	4463      	add	r3, ip
 801cbb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cbba:	465b      	mov	r3, fp
 801cbbc:	4659      	mov	r1, fp
 801cbbe:	681a      	ldr	r2, [r3, #0]
 801cbc0:	464b      	mov	r3, r9
 801cbc2:	684f      	ldr	r7, [r1, #4]
 801cbc4:	4649      	mov	r1, r9
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	18d6      	adds	r6, r2, r3
 801cbca:	1ad3      	subs	r3, r2, r3
 801cbcc:	9301      	str	r3, [sp, #4]
 801cbce:	684b      	ldr	r3, [r1, #4]
 801cbd0:	18f8      	adds	r0, r7, r3
 801cbd2:	1af9      	subs	r1, r7, r3
 801cbd4:	6827      	ldr	r7, [r4, #0]
 801cbd6:	9102      	str	r1, [sp, #8]
 801cbd8:	003a      	movs	r2, r7
 801cbda:	682f      	ldr	r7, [r5, #0]
 801cbdc:	46bc      	mov	ip, r7
 801cbde:	465f      	mov	r7, fp
 801cbe0:	4462      	add	r2, ip
 801cbe2:	18b3      	adds	r3, r6, r2
 801cbe4:	109b      	asrs	r3, r3, #2
 801cbe6:	603b      	str	r3, [r7, #0]
 801cbe8:	6867      	ldr	r7, [r4, #4]
 801cbea:	1ab6      	subs	r6, r6, r2
 801cbec:	46b8      	mov	r8, r7
 801cbee:	686f      	ldr	r7, [r5, #4]
 801cbf0:	17f2      	asrs	r2, r6, #31
 801cbf2:	46bc      	mov	ip, r7
 801cbf4:	44e0      	add	r8, ip
 801cbf6:	4643      	mov	r3, r8
 801cbf8:	465f      	mov	r7, fp
 801cbfa:	18c1      	adds	r1, r0, r3
 801cbfc:	1089      	asrs	r1, r1, #2
 801cbfe:	6079      	str	r1, [r7, #4]
 801cc00:	9900      	ldr	r1, [sp, #0]
 801cc02:	4690      	mov	r8, r2
 801cc04:	468c      	mov	ip, r1
 801cc06:	6867      	ldr	r7, [r4, #4]
 801cc08:	6869      	ldr	r1, [r5, #4]
 801cc0a:	44e3      	add	fp, ip
 801cc0c:	1a7f      	subs	r7, r7, r1
 801cc0e:	9703      	str	r7, [sp, #12]
 801cc10:	6829      	ldr	r1, [r5, #0]
 801cc12:	6827      	ldr	r7, [r4, #0]
 801cc14:	1a7f      	subs	r7, r7, r1
 801cc16:	9704      	str	r7, [sp, #16]
 801cc18:	1ac7      	subs	r7, r0, r3
 801cc1a:	17fa      	asrs	r2, r7, #31
 801cc1c:	4692      	mov	sl, r2
 801cc1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cc20:	9a07      	ldr	r2, [sp, #28]
 801cc22:	0030      	movs	r0, r6
 801cc24:	4641      	mov	r1, r8
 801cc26:	f7e3 fccb 	bl	80005c0 <__aeabi_lmul>
 801cc2a:	9a08      	ldr	r2, [sp, #32]
 801cc2c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc2e:	9112      	str	r1, [sp, #72]	@ 0x48
 801cc30:	0038      	movs	r0, r7
 801cc32:	4651      	mov	r1, sl
 801cc34:	f7e3 fcc4 	bl	80005c0 <__aeabi_lmul>
 801cc38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cc3a:	9a07      	ldr	r2, [sp, #28]
 801cc3c:	4684      	mov	ip, r0
 801cc3e:	4461      	add	r1, ip
 801cc40:	1049      	asrs	r1, r1, #1
 801cc42:	6021      	str	r1, [r4, #0]
 801cc44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cc46:	0038      	movs	r0, r7
 801cc48:	4651      	mov	r1, sl
 801cc4a:	f7e3 fcb9 	bl	80005c0 <__aeabi_lmul>
 801cc4e:	9a08      	ldr	r2, [sp, #32]
 801cc50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cc52:	000f      	movs	r7, r1
 801cc54:	0030      	movs	r0, r6
 801cc56:	4641      	mov	r1, r8
 801cc58:	f7e3 fcb2 	bl	80005c0 <__aeabi_lmul>
 801cc5c:	9b00      	ldr	r3, [sp, #0]
 801cc5e:	9a01      	ldr	r2, [sp, #4]
 801cc60:	469c      	mov	ip, r3
 801cc62:	9803      	ldr	r0, [sp, #12]
 801cc64:	1a7f      	subs	r7, r7, r1
 801cc66:	107f      	asrs	r7, r7, #1
 801cc68:	6067      	str	r7, [r4, #4]
 801cc6a:	0016      	movs	r6, r2
 801cc6c:	4464      	add	r4, ip
 801cc6e:	4684      	mov	ip, r0
 801cc70:	4466      	add	r6, ip
 801cc72:	17f2      	asrs	r2, r6, #31
 801cc74:	4690      	mov	r8, r2
 801cc76:	9902      	ldr	r1, [sp, #8]
 801cc78:	9f04      	ldr	r7, [sp, #16]
 801cc7a:	0030      	movs	r0, r6
 801cc7c:	1bcf      	subs	r7, r1, r7
 801cc7e:	17fa      	asrs	r2, r7, #31
 801cc80:	4692      	mov	sl, r2
 801cc82:	4641      	mov	r1, r8
 801cc84:	9a05      	ldr	r2, [sp, #20]
 801cc86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc88:	f7e3 fc9a 	bl	80005c0 <__aeabi_lmul>
 801cc8c:	9a06      	ldr	r2, [sp, #24]
 801cc8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cc90:	9112      	str	r1, [sp, #72]	@ 0x48
 801cc92:	0038      	movs	r0, r7
 801cc94:	4651      	mov	r1, sl
 801cc96:	f7e3 fc93 	bl	80005c0 <__aeabi_lmul>
 801cc9a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cc9c:	9a05      	ldr	r2, [sp, #20]
 801cc9e:	4684      	mov	ip, r0
 801cca0:	4648      	mov	r0, r9
 801cca2:	4461      	add	r1, ip
 801cca4:	1049      	asrs	r1, r1, #1
 801cca6:	6001      	str	r1, [r0, #0]
 801cca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ccaa:	0038      	movs	r0, r7
 801ccac:	4651      	mov	r1, sl
 801ccae:	f7e3 fc87 	bl	80005c0 <__aeabi_lmul>
 801ccb2:	9a06      	ldr	r2, [sp, #24]
 801ccb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ccb6:	000f      	movs	r7, r1
 801ccb8:	0030      	movs	r0, r6
 801ccba:	4641      	mov	r1, r8
 801ccbc:	f7e3 fc80 	bl	80005c0 <__aeabi_lmul>
 801ccc0:	464e      	mov	r6, r9
 801ccc2:	9a00      	ldr	r2, [sp, #0]
 801ccc4:	9b01      	ldr	r3, [sp, #4]
 801ccc6:	4694      	mov	ip, r2
 801ccc8:	9803      	ldr	r0, [sp, #12]
 801ccca:	1a7f      	subs	r7, r7, r1
 801cccc:	107f      	asrs	r7, r7, #1
 801ccce:	6077      	str	r7, [r6, #4]
 801ccd0:	1a1e      	subs	r6, r3, r0
 801ccd2:	9b04      	ldr	r3, [sp, #16]
 801ccd4:	44e1      	add	r9, ip
 801ccd6:	469c      	mov	ip, r3
 801ccd8:	17f0      	asrs	r0, r6, #31
 801ccda:	4680      	mov	r8, r0
 801ccdc:	9902      	ldr	r1, [sp, #8]
 801ccde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cce0:	4461      	add	r1, ip
 801cce2:	17cb      	asrs	r3, r1, #31
 801cce4:	000f      	movs	r7, r1
 801cce6:	469a      	mov	sl, r3
 801cce8:	0030      	movs	r0, r6
 801ccea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ccec:	4641      	mov	r1, r8
 801ccee:	f7e3 fc67 	bl	80005c0 <__aeabi_lmul>
 801ccf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ccf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ccf6:	9101      	str	r1, [sp, #4]
 801ccf8:	0038      	movs	r0, r7
 801ccfa:	4651      	mov	r1, sl
 801ccfc:	f7e3 fc60 	bl	80005c0 <__aeabi_lmul>
 801cd00:	9801      	ldr	r0, [sp, #4]
 801cd02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cd04:	4684      	mov	ip, r0
 801cd06:	4461      	add	r1, ip
 801cd08:	1049      	asrs	r1, r1, #1
 801cd0a:	6029      	str	r1, [r5, #0]
 801cd0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cd0e:	0038      	movs	r0, r7
 801cd10:	4651      	mov	r1, sl
 801cd12:	f7e3 fc55 	bl	80005c0 <__aeabi_lmul>
 801cd16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd18:	000f      	movs	r7, r1
 801cd1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd1c:	0030      	movs	r0, r6
 801cd1e:	4641      	mov	r1, r8
 801cd20:	f7e3 fc4e 	bl	80005c0 <__aeabi_lmul>
 801cd24:	1a7f      	subs	r7, r7, r1
 801cd26:	107f      	asrs	r7, r7, #1
 801cd28:	606f      	str	r7, [r5, #4]
 801cd2a:	9a00      	ldr	r2, [sp, #0]
 801cd2c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cd2e:	4694      	mov	ip, r2
 801cd30:	4465      	add	r5, ip
 801cd32:	468c      	mov	ip, r1
 801cd34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cd36:	0013      	movs	r3, r2
 801cd38:	4462      	add	r2, ip
 801cd3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cd3c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cd3e:	429a      	cmp	r2, r3
 801cd40:	d900      	bls.n	801cd44 <arm_radix4_butterfly_q31+0x478>
 801cd42:	e73a      	b.n	801cbba <arm_radix4_butterfly_q31+0x2ee>
 801cd44:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801cd46:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cd48:	468c      	mov	ip, r1
 801cd4a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801cd4c:	4462      	add	r2, ip
 801cd4e:	468c      	mov	ip, r1
 801cd50:	9216      	str	r2, [sp, #88]	@ 0x58
 801cd52:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801cd54:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801cd56:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cd58:	4462      	add	r2, ip
 801cd5a:	468c      	mov	ip, r1
 801cd5c:	9219      	str	r2, [sp, #100]	@ 0x64
 801cd5e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cd60:	3301      	adds	r3, #1
 801cd62:	4462      	add	r2, ip
 801cd64:	9218      	str	r2, [sp, #96]	@ 0x60
 801cd66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cd68:	9315      	str	r3, [sp, #84]	@ 0x54
 801cd6a:	3208      	adds	r2, #8
 801cd6c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801cd6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cd70:	4293      	cmp	r3, r2
 801cd72:	d800      	bhi.n	801cd76 <arm_radix4_butterfly_q31+0x4aa>
 801cd74:	e6e8      	b.n	801cb48 <arm_radix4_butterfly_q31+0x27c>
 801cd76:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801cd78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801cd7a:	009b      	lsls	r3, r3, #2
 801cd7c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801cd7e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cd80:	9213      	str	r2, [sp, #76]	@ 0x4c
 801cd82:	089b      	lsrs	r3, r3, #2
 801cd84:	9320      	str	r3, [sp, #128]	@ 0x80
 801cd86:	2b04      	cmp	r3, #4
 801cd88:	d900      	bls.n	801cd8c <arm_radix4_butterfly_q31+0x4c0>
 801cd8a:	e6c1      	b.n	801cb10 <arm_radix4_butterfly_q31+0x244>
 801cd8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cd8e:	469a      	mov	sl, r3
 801cd90:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801cd92:	691c      	ldr	r4, [r3, #16]
 801cd94:	685a      	ldr	r2, [r3, #4]
 801cd96:	46a1      	mov	r9, r4
 801cd98:	4690      	mov	r8, r2
 801cd9a:	6819      	ldr	r1, [r3, #0]
 801cd9c:	689a      	ldr	r2, [r3, #8]
 801cd9e:	699f      	ldr	r7, [r3, #24]
 801cda0:	188d      	adds	r5, r1, r2
 801cda2:	444d      	add	r5, r9
 801cda4:	19ed      	adds	r5, r5, r7
 801cda6:	69de      	ldr	r6, [r3, #28]
 801cda8:	601d      	str	r5, [r3, #0]
 801cdaa:	4645      	mov	r5, r8
 801cdac:	46b4      	mov	ip, r6
 801cdae:	68d8      	ldr	r0, [r3, #12]
 801cdb0:	695c      	ldr	r4, [r3, #20]
 801cdb2:	182d      	adds	r5, r5, r0
 801cdb4:	192d      	adds	r5, r5, r4
 801cdb6:	4465      	add	r5, ip
 801cdb8:	605d      	str	r5, [r3, #4]
 801cdba:	1a8d      	subs	r5, r1, r2
 801cdbc:	444d      	add	r5, r9
 801cdbe:	1bed      	subs	r5, r5, r7
 801cdc0:	609d      	str	r5, [r3, #8]
 801cdc2:	4645      	mov	r5, r8
 801cdc4:	1a2d      	subs	r5, r5, r0
 801cdc6:	192d      	adds	r5, r5, r4
 801cdc8:	1bad      	subs	r5, r5, r6
 801cdca:	464e      	mov	r6, r9
 801cdcc:	60dd      	str	r5, [r3, #12]
 801cdce:	180d      	adds	r5, r1, r0
 801cdd0:	1bad      	subs	r5, r5, r6
 801cdd2:	4666      	mov	r6, ip
 801cdd4:	1bad      	subs	r5, r5, r6
 801cdd6:	611d      	str	r5, [r3, #16]
 801cdd8:	4645      	mov	r5, r8
 801cdda:	1aad      	subs	r5, r5, r2
 801cddc:	4442      	add	r2, r8
 801cdde:	1b12      	subs	r2, r2, r4
 801cde0:	1bd2      	subs	r2, r2, r7
 801cde2:	1a08      	subs	r0, r1, r0
 801cde4:	61da      	str	r2, [r3, #28]
 801cde6:	4649      	mov	r1, r9
 801cde8:	2201      	movs	r2, #1
 801cdea:	1a41      	subs	r1, r0, r1
 801cdec:	4252      	negs	r2, r2
 801cdee:	4461      	add	r1, ip
 801cdf0:	4694      	mov	ip, r2
 801cdf2:	44e2      	add	sl, ip
 801cdf4:	4652      	mov	r2, sl
 801cdf6:	1b2d      	subs	r5, r5, r4
 801cdf8:	19ed      	adds	r5, r5, r7
 801cdfa:	615d      	str	r5, [r3, #20]
 801cdfc:	6199      	str	r1, [r3, #24]
 801cdfe:	3320      	adds	r3, #32
 801ce00:	2a00      	cmp	r2, #0
 801ce02:	d1c6      	bne.n	801cd92 <arm_radix4_butterfly_q31+0x4c6>
 801ce04:	b027      	add	sp, #156	@ 0x9c
 801ce06:	bc3c      	pop	{r2, r3, r4, r5}
 801ce08:	4690      	mov	r8, r2
 801ce0a:	4699      	mov	r9, r3
 801ce0c:	46a2      	mov	sl, r4
 801ce0e:	46ab      	mov	fp, r5
 801ce10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ce12:	469a      	mov	sl, r3
 801ce14:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ce16:	e7bc      	b.n	801cd92 <arm_radix4_butterfly_q31+0x4c6>

0801ce18 <arm_radix4_butterfly_inverse_q31>:
 801ce18:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce1a:	464d      	mov	r5, r9
 801ce1c:	4644      	mov	r4, r8
 801ce1e:	465f      	mov	r7, fp
 801ce20:	4656      	mov	r6, sl
 801ce22:	b4f0      	push	{r4, r5, r6, r7}
 801ce24:	b0a7      	sub	sp, #156	@ 0x9c
 801ce26:	469c      	mov	ip, r3
 801ce28:	9114      	str	r1, [sp, #80]	@ 0x50
 801ce2a:	0889      	lsrs	r1, r1, #2
 801ce2c:	9310      	str	r3, [sp, #64]	@ 0x40
 801ce2e:	00cb      	lsls	r3, r1, #3
 801ce30:	0015      	movs	r5, r2
 801ce32:	9223      	str	r2, [sp, #140]	@ 0x8c
 801ce34:	18c2      	adds	r2, r0, r3
 801ce36:	000c      	movs	r4, r1
 801ce38:	9124      	str	r1, [sp, #144]	@ 0x90
 801ce3a:	18d1      	adds	r1, r2, r3
 801ce3c:	468b      	mov	fp, r1
 801ce3e:	469a      	mov	sl, r3
 801ce40:	4663      	mov	r3, ip
 801ce42:	44da      	add	sl, fp
 801ce44:	46d0      	mov	r8, sl
 801ce46:	4681      	mov	r9, r0
 801ce48:	4692      	mov	sl, r2
 801ce4a:	0119      	lsls	r1, r3, #4
 801ce4c:	910d      	str	r1, [sp, #52]	@ 0x34
 801ce4e:	00d9      	lsls	r1, r3, #3
 801ce50:	005b      	lsls	r3, r3, #1
 801ce52:	4463      	add	r3, ip
 801ce54:	910e      	str	r1, [sp, #56]	@ 0x38
 801ce56:	00d9      	lsls	r1, r3, #3
 801ce58:	9022      	str	r0, [sp, #136]	@ 0x88
 801ce5a:	9025      	str	r0, [sp, #148]	@ 0x94
 801ce5c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ce5e:	9502      	str	r5, [sp, #8]
 801ce60:	9500      	str	r5, [sp, #0]
 801ce62:	9501      	str	r5, [sp, #4]
 801ce64:	9409      	str	r4, [sp, #36]	@ 0x24
 801ce66:	464b      	mov	r3, r9
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	4652      	mov	r2, sl
 801ce6c:	111c      	asrs	r4, r3, #4
 801ce6e:	465b      	mov	r3, fp
 801ce70:	4648      	mov	r0, r9
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	6812      	ldr	r2, [r2, #0]
 801ce76:	6840      	ldr	r0, [r0, #4]
 801ce78:	111b      	asrs	r3, r3, #4
 801ce7a:	18e7      	adds	r7, r4, r3
 801ce7c:	1ae3      	subs	r3, r4, r3
 801ce7e:	1114      	asrs	r4, r2, #4
 801ce80:	4642      	mov	r2, r8
 801ce82:	1105      	asrs	r5, r0, #4
 801ce84:	4658      	mov	r0, fp
 801ce86:	6812      	ldr	r2, [r2, #0]
 801ce88:	6840      	ldr	r0, [r0, #4]
 801ce8a:	9303      	str	r3, [sp, #12]
 801ce8c:	1113      	asrs	r3, r2, #4
 801ce8e:	18e2      	adds	r2, r4, r3
 801ce90:	1103      	asrs	r3, r0, #4
 801ce92:	18ee      	adds	r6, r5, r3
 801ce94:	1ae8      	subs	r0, r5, r3
 801ce96:	464d      	mov	r5, r9
 801ce98:	18bb      	adds	r3, r7, r2
 801ce9a:	602b      	str	r3, [r5, #0]
 801ce9c:	4641      	mov	r1, r8
 801ce9e:	4655      	mov	r5, sl
 801cea0:	6849      	ldr	r1, [r1, #4]
 801cea2:	686d      	ldr	r5, [r5, #4]
 801cea4:	110b      	asrs	r3, r1, #4
 801cea6:	112d      	asrs	r5, r5, #4
 801cea8:	18eb      	adds	r3, r5, r3
 801ceaa:	464d      	mov	r5, r9
 801ceac:	18f1      	adds	r1, r6, r3
 801ceae:	6069      	str	r1, [r5, #4]
 801ceb0:	4655      	mov	r5, sl
 801ceb2:	686d      	ldr	r5, [r5, #4]
 801ceb4:	9004      	str	r0, [sp, #16]
 801ceb6:	112c      	asrs	r4, r5, #4
 801ceb8:	4645      	mov	r5, r8
 801ceba:	686d      	ldr	r5, [r5, #4]
 801cebc:	1129      	asrs	r1, r5, #4
 801cebe:	1a65      	subs	r5, r4, r1
 801cec0:	4651      	mov	r1, sl
 801cec2:	6809      	ldr	r1, [r1, #0]
 801cec4:	1abc      	subs	r4, r7, r2
 801cec6:	1108      	asrs	r0, r1, #4
 801cec8:	4641      	mov	r1, r8
 801ceca:	17e2      	asrs	r2, r4, #31
 801cecc:	6809      	ldr	r1, [r1, #0]
 801cece:	9207      	str	r2, [sp, #28]
 801ced0:	9a01      	ldr	r2, [sp, #4]
 801ced2:	1109      	asrs	r1, r1, #4
 801ced4:	6817      	ldr	r7, [r2, #0]
 801ced6:	1a41      	subs	r1, r0, r1
 801ced8:	9106      	str	r1, [sp, #24]
 801ceda:	0039      	movs	r1, r7
 801cedc:	17ff      	asrs	r7, r7, #31
 801cede:	0038      	movs	r0, r7
 801cee0:	9505      	str	r5, [sp, #20]
 801cee2:	1af5      	subs	r5, r6, r3
 801cee4:	17ef      	asrs	r7, r5, #31
 801cee6:	970b      	str	r7, [sp, #44]	@ 0x2c
 801cee8:	6857      	ldr	r7, [r2, #4]
 801ceea:	0003      	movs	r3, r0
 801ceec:	17fe      	asrs	r6, r7, #31
 801ceee:	000a      	movs	r2, r1
 801cef0:	9108      	str	r1, [sp, #32]
 801cef2:	900a      	str	r0, [sp, #40]	@ 0x28
 801cef4:	17e1      	asrs	r1, r4, #31
 801cef6:	0020      	movs	r0, r4
 801cef8:	960c      	str	r6, [sp, #48]	@ 0x30
 801cefa:	f7e3 fb61 	bl	80005c0 <__aeabi_lmul>
 801cefe:	003a      	movs	r2, r7
 801cf00:	17fb      	asrs	r3, r7, #31
 801cf02:	000e      	movs	r6, r1
 801cf04:	0028      	movs	r0, r5
 801cf06:	17e9      	asrs	r1, r5, #31
 801cf08:	f7e3 fb5a 	bl	80005c0 <__aeabi_lmul>
 801cf0c:	4653      	mov	r3, sl
 801cf0e:	1a76      	subs	r6, r6, r1
 801cf10:	0076      	lsls	r6, r6, #1
 801cf12:	601e      	str	r6, [r3, #0]
 801cf14:	002a      	movs	r2, r5
 801cf16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf18:	9808      	ldr	r0, [sp, #32]
 801cf1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cf1c:	f7e3 fb50 	bl	80005c0 <__aeabi_lmul>
 801cf20:	003a      	movs	r2, r7
 801cf22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cf24:	000d      	movs	r5, r1
 801cf26:	0020      	movs	r0, r4
 801cf28:	9907      	ldr	r1, [sp, #28]
 801cf2a:	f7e3 fb49 	bl	80005c0 <__aeabi_lmul>
 801cf2e:	4657      	mov	r7, sl
 801cf30:	186d      	adds	r5, r5, r1
 801cf32:	006d      	lsls	r5, r5, #1
 801cf34:	607d      	str	r5, [r7, #4]
 801cf36:	9b03      	ldr	r3, [sp, #12]
 801cf38:	9e06      	ldr	r6, [sp, #24]
 801cf3a:	9d05      	ldr	r5, [sp, #20]
 801cf3c:	46b4      	mov	ip, r6
 801cf3e:	1b5d      	subs	r5, r3, r5
 801cf40:	9b00      	ldr	r3, [sp, #0]
 801cf42:	17ef      	asrs	r7, r5, #31
 801cf44:	0039      	movs	r1, r7
 801cf46:	681f      	ldr	r7, [r3, #0]
 801cf48:	17fc      	asrs	r4, r7, #31
 801cf4a:	0020      	movs	r0, r4
 801cf4c:	9c04      	ldr	r4, [sp, #16]
 801cf4e:	4464      	add	r4, ip
 801cf50:	17e6      	asrs	r6, r4, #31
 801cf52:	9407      	str	r4, [sp, #28]
 801cf54:	9608      	str	r6, [sp, #32]
 801cf56:	685e      	ldr	r6, [r3, #4]
 801cf58:	900b      	str	r0, [sp, #44]	@ 0x2c
 801cf5a:	17f2      	asrs	r2, r6, #31
 801cf5c:	0003      	movs	r3, r0
 801cf5e:	920c      	str	r2, [sp, #48]	@ 0x30
 801cf60:	0028      	movs	r0, r5
 801cf62:	003a      	movs	r2, r7
 801cf64:	910a      	str	r1, [sp, #40]	@ 0x28
 801cf66:	f7e3 fb2b 	bl	80005c0 <__aeabi_lmul>
 801cf6a:	0032      	movs	r2, r6
 801cf6c:	17f3      	asrs	r3, r6, #31
 801cf6e:	9807      	ldr	r0, [sp, #28]
 801cf70:	000c      	movs	r4, r1
 801cf72:	9908      	ldr	r1, [sp, #32]
 801cf74:	f7e3 fb24 	bl	80005c0 <__aeabi_lmul>
 801cf78:	4658      	mov	r0, fp
 801cf7a:	1a64      	subs	r4, r4, r1
 801cf7c:	0064      	lsls	r4, r4, #1
 801cf7e:	9a07      	ldr	r2, [sp, #28]
 801cf80:	6004      	str	r4, [r0, #0]
 801cf82:	9b08      	ldr	r3, [sp, #32]
 801cf84:	0038      	movs	r0, r7
 801cf86:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cf88:	f7e3 fb1a 	bl	80005c0 <__aeabi_lmul>
 801cf8c:	0032      	movs	r2, r6
 801cf8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cf90:	000c      	movs	r4, r1
 801cf92:	0028      	movs	r0, r5
 801cf94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801cf96:	f7e3 fb13 	bl	80005c0 <__aeabi_lmul>
 801cf9a:	9d05      	ldr	r5, [sp, #20]
 801cf9c:	465f      	mov	r7, fp
 801cf9e:	46ac      	mov	ip, r5
 801cfa0:	1864      	adds	r4, r4, r1
 801cfa2:	9903      	ldr	r1, [sp, #12]
 801cfa4:	0064      	lsls	r4, r4, #1
 801cfa6:	4461      	add	r1, ip
 801cfa8:	607c      	str	r4, [r7, #4]
 801cfaa:	000c      	movs	r4, r1
 801cfac:	17c9      	asrs	r1, r1, #31
 801cfae:	9105      	str	r1, [sp, #20]
 801cfb0:	9902      	ldr	r1, [sp, #8]
 801cfb2:	9804      	ldr	r0, [sp, #16]
 801cfb4:	680d      	ldr	r5, [r1, #0]
 801cfb6:	9e06      	ldr	r6, [sp, #24]
 801cfb8:	002b      	movs	r3, r5
 801cfba:	17ed      	asrs	r5, r5, #31
 801cfbc:	684f      	ldr	r7, [r1, #4]
 801cfbe:	9503      	str	r5, [sp, #12]
 801cfc0:	1b85      	subs	r5, r0, r6
 801cfc2:	17e8      	asrs	r0, r5, #31
 801cfc4:	001a      	movs	r2, r3
 801cfc6:	9006      	str	r0, [sp, #24]
 801cfc8:	17fe      	asrs	r6, r7, #31
 801cfca:	9304      	str	r3, [sp, #16]
 801cfcc:	0020      	movs	r0, r4
 801cfce:	9b03      	ldr	r3, [sp, #12]
 801cfd0:	17e1      	asrs	r1, r4, #31
 801cfd2:	9607      	str	r6, [sp, #28]
 801cfd4:	f7e3 faf4 	bl	80005c0 <__aeabi_lmul>
 801cfd8:	003a      	movs	r2, r7
 801cfda:	000e      	movs	r6, r1
 801cfdc:	17fb      	asrs	r3, r7, #31
 801cfde:	0028      	movs	r0, r5
 801cfe0:	17e9      	asrs	r1, r5, #31
 801cfe2:	f7e3 faed 	bl	80005c0 <__aeabi_lmul>
 801cfe6:	4640      	mov	r0, r8
 801cfe8:	1a76      	subs	r6, r6, r1
 801cfea:	0076      	lsls	r6, r6, #1
 801cfec:	002a      	movs	r2, r5
 801cfee:	9b06      	ldr	r3, [sp, #24]
 801cff0:	6006      	str	r6, [r0, #0]
 801cff2:	9903      	ldr	r1, [sp, #12]
 801cff4:	9804      	ldr	r0, [sp, #16]
 801cff6:	f7e3 fae3 	bl	80005c0 <__aeabi_lmul>
 801cffa:	0020      	movs	r0, r4
 801cffc:	2408      	movs	r4, #8
 801cffe:	9b07      	ldr	r3, [sp, #28]
 801d000:	000d      	movs	r5, r1
 801d002:	003a      	movs	r2, r7
 801d004:	9905      	ldr	r1, [sp, #20]
 801d006:	f7e3 fadb 	bl	80005c0 <__aeabi_lmul>
 801d00a:	4640      	mov	r0, r8
 801d00c:	46a4      	mov	ip, r4
 801d00e:	186d      	adds	r5, r5, r1
 801d010:	006d      	lsls	r5, r5, #1
 801d012:	6045      	str	r5, [r0, #4]
 801d014:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d016:	44e1      	add	r9, ip
 801d018:	3801      	subs	r0, #1
 801d01a:	9009      	str	r0, [sp, #36]	@ 0x24
 801d01c:	9a01      	ldr	r2, [sp, #4]
 801d01e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d020:	44e2      	add	sl, ip
 801d022:	44e3      	add	fp, ip
 801d024:	44e0      	add	r8, ip
 801d026:	46a4      	mov	ip, r4
 801d028:	4462      	add	r2, ip
 801d02a:	9201      	str	r2, [sp, #4]
 801d02c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d02e:	9b00      	ldr	r3, [sp, #0]
 801d030:	4694      	mov	ip, r2
 801d032:	4463      	add	r3, ip
 801d034:	9300      	str	r3, [sp, #0]
 801d036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d038:	9902      	ldr	r1, [sp, #8]
 801d03a:	469c      	mov	ip, r3
 801d03c:	4461      	add	r1, ip
 801d03e:	9102      	str	r1, [sp, #8]
 801d040:	2800      	cmp	r0, #0
 801d042:	d000      	beq.n	801d046 <arm_radix4_butterfly_inverse_q31+0x22e>
 801d044:	e70f      	b.n	801ce66 <arm_radix4_butterfly_inverse_q31+0x4e>
 801d046:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d048:	009b      	lsls	r3, r3, #2
 801d04a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d04c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d04e:	9320      	str	r3, [sp, #128]	@ 0x80
 801d050:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d052:	2b04      	cmp	r3, #4
 801d054:	d800      	bhi.n	801d058 <arm_radix4_butterfly_inverse_q31+0x240>
 801d056:	e17c      	b.n	801d352 <arm_radix4_butterfly_inverse_q31+0x53a>
 801d058:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d05a:	0893      	lsrs	r3, r2, #2
 801d05c:	1e59      	subs	r1, r3, #1
 801d05e:	9321      	str	r3, [sp, #132]	@ 0x84
 801d060:	00db      	lsls	r3, r3, #3
 801d062:	931b      	str	r3, [sp, #108]	@ 0x6c
 801d064:	00d3      	lsls	r3, r2, #3
 801d066:	9300      	str	r3, [sp, #0]
 801d068:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d06a:	911a      	str	r1, [sp, #104]	@ 0x68
 801d06c:	00da      	lsls	r2, r3, #3
 801d06e:	921e      	str	r2, [sp, #120]	@ 0x78
 801d070:	011a      	lsls	r2, r3, #4
 801d072:	921d      	str	r2, [sp, #116]	@ 0x74
 801d074:	001a      	movs	r2, r3
 801d076:	4694      	mov	ip, r2
 801d078:	005b      	lsls	r3, r3, #1
 801d07a:	4463      	add	r3, ip
 801d07c:	00db      	lsls	r3, r3, #3
 801d07e:	931c      	str	r3, [sp, #112]	@ 0x70
 801d080:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d082:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d084:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801d086:	9318      	str	r3, [sp, #96]	@ 0x60
 801d088:	9319      	str	r3, [sp, #100]	@ 0x64
 801d08a:	9316      	str	r3, [sp, #88]	@ 0x58
 801d08c:	2300      	movs	r3, #0
 801d08e:	9315      	str	r3, [sp, #84]	@ 0x54
 801d090:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d092:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d094:	681a      	ldr	r2, [r3, #0]
 801d096:	685b      	ldr	r3, [r3, #4]
 801d098:	9205      	str	r2, [sp, #20]
 801d09a:	9306      	str	r3, [sp, #24]
 801d09c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d09e:	468c      	mov	ip, r1
 801d0a0:	681a      	ldr	r2, [r3, #0]
 801d0a2:	685b      	ldr	r3, [r3, #4]
 801d0a4:	9207      	str	r2, [sp, #28]
 801d0a6:	9308      	str	r3, [sp, #32]
 801d0a8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d0aa:	681a      	ldr	r2, [r3, #0]
 801d0ac:	685b      	ldr	r3, [r3, #4]
 801d0ae:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0b0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d0b2:	930a      	str	r3, [sp, #40]	@ 0x28
 801d0b4:	0013      	movs	r3, r2
 801d0b6:	4463      	add	r3, ip
 801d0b8:	4698      	mov	r8, r3
 801d0ba:	0013      	movs	r3, r2
 801d0bc:	4442      	add	r2, r8
 801d0be:	4691      	mov	r9, r2
 801d0c0:	001a      	movs	r2, r3
 801d0c2:	444a      	add	r2, r9
 801d0c4:	4692      	mov	sl, r2
 801d0c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d0c8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d0ca:	4293      	cmp	r3, r2
 801d0cc:	d800      	bhi.n	801d0d0 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801d0ce:	e0d9      	b.n	801d284 <arm_radix4_butterfly_inverse_q31+0x46c>
 801d0d0:	4694      	mov	ip, r2
 801d0d2:	4644      	mov	r4, r8
 801d0d4:	4655      	mov	r5, sl
 801d0d6:	4688      	mov	r8, r1
 801d0d8:	9b07      	ldr	r3, [sp, #28]
 801d0da:	17db      	asrs	r3, r3, #31
 801d0dc:	930c      	str	r3, [sp, #48]	@ 0x30
 801d0de:	9b08      	ldr	r3, [sp, #32]
 801d0e0:	17db      	asrs	r3, r3, #31
 801d0e2:	930d      	str	r3, [sp, #52]	@ 0x34
 801d0e4:	9b05      	ldr	r3, [sp, #20]
 801d0e6:	17db      	asrs	r3, r3, #31
 801d0e8:	930e      	str	r3, [sp, #56]	@ 0x38
 801d0ea:	9b06      	ldr	r3, [sp, #24]
 801d0ec:	17db      	asrs	r3, r3, #31
 801d0ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0f2:	17db      	asrs	r3, r3, #31
 801d0f4:	9310      	str	r3, [sp, #64]	@ 0x40
 801d0f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d0f8:	17db      	asrs	r3, r3, #31
 801d0fa:	9311      	str	r3, [sp, #68]	@ 0x44
 801d0fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d0fe:	4463      	add	r3, ip
 801d100:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d102:	4643      	mov	r3, r8
 801d104:	4641      	mov	r1, r8
 801d106:	681a      	ldr	r2, [r3, #0]
 801d108:	464b      	mov	r3, r9
 801d10a:	684f      	ldr	r7, [r1, #4]
 801d10c:	4649      	mov	r1, r9
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	18d6      	adds	r6, r2, r3
 801d112:	1ad3      	subs	r3, r2, r3
 801d114:	9301      	str	r3, [sp, #4]
 801d116:	684b      	ldr	r3, [r1, #4]
 801d118:	1af9      	subs	r1, r7, r3
 801d11a:	9102      	str	r1, [sp, #8]
 801d11c:	6829      	ldr	r1, [r5, #0]
 801d11e:	18f8      	adds	r0, r7, r3
 801d120:	468c      	mov	ip, r1
 801d122:	6827      	ldr	r7, [r4, #0]
 801d124:	4467      	add	r7, ip
 801d126:	003a      	movs	r2, r7
 801d128:	19f3      	adds	r3, r6, r7
 801d12a:	4647      	mov	r7, r8
 801d12c:	109b      	asrs	r3, r3, #2
 801d12e:	603b      	str	r3, [r7, #0]
 801d130:	6869      	ldr	r1, [r5, #4]
 801d132:	6867      	ldr	r7, [r4, #4]
 801d134:	468c      	mov	ip, r1
 801d136:	4467      	add	r7, ip
 801d138:	003b      	movs	r3, r7
 801d13a:	19c1      	adds	r1, r0, r7
 801d13c:	4647      	mov	r7, r8
 801d13e:	1ab6      	subs	r6, r6, r2
 801d140:	1089      	asrs	r1, r1, #2
 801d142:	6079      	str	r1, [r7, #4]
 801d144:	17f2      	asrs	r2, r6, #31
 801d146:	9900      	ldr	r1, [sp, #0]
 801d148:	4692      	mov	sl, r2
 801d14a:	468c      	mov	ip, r1
 801d14c:	6867      	ldr	r7, [r4, #4]
 801d14e:	6869      	ldr	r1, [r5, #4]
 801d150:	44e0      	add	r8, ip
 801d152:	1a7f      	subs	r7, r7, r1
 801d154:	9703      	str	r7, [sp, #12]
 801d156:	6821      	ldr	r1, [r4, #0]
 801d158:	682f      	ldr	r7, [r5, #0]
 801d15a:	1bc9      	subs	r1, r1, r7
 801d15c:	1ac7      	subs	r7, r0, r3
 801d15e:	17fa      	asrs	r2, r7, #31
 801d160:	4693      	mov	fp, r2
 801d162:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d164:	9a07      	ldr	r2, [sp, #28]
 801d166:	9104      	str	r1, [sp, #16]
 801d168:	0030      	movs	r0, r6
 801d16a:	4651      	mov	r1, sl
 801d16c:	f7e3 fa28 	bl	80005c0 <__aeabi_lmul>
 801d170:	9a08      	ldr	r2, [sp, #32]
 801d172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d174:	9112      	str	r1, [sp, #72]	@ 0x48
 801d176:	0038      	movs	r0, r7
 801d178:	4659      	mov	r1, fp
 801d17a:	f7e3 fa21 	bl	80005c0 <__aeabi_lmul>
 801d17e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801d180:	9a07      	ldr	r2, [sp, #28]
 801d182:	1a41      	subs	r1, r0, r1
 801d184:	1049      	asrs	r1, r1, #1
 801d186:	6021      	str	r1, [r4, #0]
 801d188:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d18a:	0038      	movs	r0, r7
 801d18c:	4659      	mov	r1, fp
 801d18e:	f7e3 fa17 	bl	80005c0 <__aeabi_lmul>
 801d192:	9a08      	ldr	r2, [sp, #32]
 801d194:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d196:	000f      	movs	r7, r1
 801d198:	0030      	movs	r0, r6
 801d19a:	4651      	mov	r1, sl
 801d19c:	f7e3 fa10 	bl	80005c0 <__aeabi_lmul>
 801d1a0:	9b00      	ldr	r3, [sp, #0]
 801d1a2:	187f      	adds	r7, r7, r1
 801d1a4:	469c      	mov	ip, r3
 801d1a6:	107f      	asrs	r7, r7, #1
 801d1a8:	6067      	str	r7, [r4, #4]
 801d1aa:	9a01      	ldr	r2, [sp, #4]
 801d1ac:	9f03      	ldr	r7, [sp, #12]
 801d1ae:	9802      	ldr	r0, [sp, #8]
 801d1b0:	1bd7      	subs	r7, r2, r7
 801d1b2:	17fe      	asrs	r6, r7, #31
 801d1b4:	0031      	movs	r1, r6
 801d1b6:	9e04      	ldr	r6, [sp, #16]
 801d1b8:	4682      	mov	sl, r0
 801d1ba:	4464      	add	r4, ip
 801d1bc:	46b4      	mov	ip, r6
 801d1be:	44e2      	add	sl, ip
 801d1c0:	4652      	mov	r2, sl
 801d1c2:	17d2      	asrs	r2, r2, #31
 801d1c4:	4693      	mov	fp, r2
 801d1c6:	0038      	movs	r0, r7
 801d1c8:	9a05      	ldr	r2, [sp, #20]
 801d1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d1cc:	9112      	str	r1, [sp, #72]	@ 0x48
 801d1ce:	f7e3 f9f7 	bl	80005c0 <__aeabi_lmul>
 801d1d2:	9a06      	ldr	r2, [sp, #24]
 801d1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d1d6:	000e      	movs	r6, r1
 801d1d8:	4650      	mov	r0, sl
 801d1da:	4659      	mov	r1, fp
 801d1dc:	f7e3 f9f0 	bl	80005c0 <__aeabi_lmul>
 801d1e0:	4648      	mov	r0, r9
 801d1e2:	1a76      	subs	r6, r6, r1
 801d1e4:	1076      	asrs	r6, r6, #1
 801d1e6:	6006      	str	r6, [r0, #0]
 801d1e8:	9a05      	ldr	r2, [sp, #20]
 801d1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d1ec:	4650      	mov	r0, sl
 801d1ee:	4659      	mov	r1, fp
 801d1f0:	f7e3 f9e6 	bl	80005c0 <__aeabi_lmul>
 801d1f4:	9a06      	ldr	r2, [sp, #24]
 801d1f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d1f8:	000e      	movs	r6, r1
 801d1fa:	0038      	movs	r0, r7
 801d1fc:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d1fe:	f7e3 f9df 	bl	80005c0 <__aeabi_lmul>
 801d202:	9a00      	ldr	r2, [sp, #0]
 801d204:	9f03      	ldr	r7, [sp, #12]
 801d206:	4694      	mov	ip, r2
 801d208:	1876      	adds	r6, r6, r1
 801d20a:	4649      	mov	r1, r9
 801d20c:	44e1      	add	r9, ip
 801d20e:	46bc      	mov	ip, r7
 801d210:	9b01      	ldr	r3, [sp, #4]
 801d212:	1076      	asrs	r6, r6, #1
 801d214:	4463      	add	r3, ip
 801d216:	17df      	asrs	r7, r3, #31
 801d218:	604e      	str	r6, [r1, #4]
 801d21a:	46ba      	mov	sl, r7
 801d21c:	001e      	movs	r6, r3
 801d21e:	9802      	ldr	r0, [sp, #8]
 801d220:	9b04      	ldr	r3, [sp, #16]
 801d222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d224:	1ac7      	subs	r7, r0, r3
 801d226:	17fb      	asrs	r3, r7, #31
 801d228:	469b      	mov	fp, r3
 801d22a:	0030      	movs	r0, r6
 801d22c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d22e:	4651      	mov	r1, sl
 801d230:	f7e3 f9c6 	bl	80005c0 <__aeabi_lmul>
 801d234:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d236:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d238:	9101      	str	r1, [sp, #4]
 801d23a:	0038      	movs	r0, r7
 801d23c:	4659      	mov	r1, fp
 801d23e:	f7e3 f9bf 	bl	80005c0 <__aeabi_lmul>
 801d242:	9801      	ldr	r0, [sp, #4]
 801d244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d246:	1a41      	subs	r1, r0, r1
 801d248:	1049      	asrs	r1, r1, #1
 801d24a:	6029      	str	r1, [r5, #0]
 801d24c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d24e:	0038      	movs	r0, r7
 801d250:	4659      	mov	r1, fp
 801d252:	f7e3 f9b5 	bl	80005c0 <__aeabi_lmul>
 801d256:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801d258:	000f      	movs	r7, r1
 801d25a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d25c:	0030      	movs	r0, r6
 801d25e:	4651      	mov	r1, sl
 801d260:	f7e3 f9ae 	bl	80005c0 <__aeabi_lmul>
 801d264:	187f      	adds	r7, r7, r1
 801d266:	107f      	asrs	r7, r7, #1
 801d268:	606f      	str	r7, [r5, #4]
 801d26a:	9a00      	ldr	r2, [sp, #0]
 801d26c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801d26e:	4694      	mov	ip, r2
 801d270:	4465      	add	r5, ip
 801d272:	468c      	mov	ip, r1
 801d274:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801d276:	0013      	movs	r3, r2
 801d278:	4462      	add	r2, ip
 801d27a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d27c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d27e:	429a      	cmp	r2, r3
 801d280:	d900      	bls.n	801d284 <arm_radix4_butterfly_inverse_q31+0x46c>
 801d282:	e73e      	b.n	801d102 <arm_radix4_butterfly_inverse_q31+0x2ea>
 801d284:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d286:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d288:	468c      	mov	ip, r1
 801d28a:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801d28c:	4462      	add	r2, ip
 801d28e:	468c      	mov	ip, r1
 801d290:	9216      	str	r2, [sp, #88]	@ 0x58
 801d292:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801d294:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d296:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d298:	4462      	add	r2, ip
 801d29a:	468c      	mov	ip, r1
 801d29c:	9219      	str	r2, [sp, #100]	@ 0x64
 801d29e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d2a0:	3301      	adds	r3, #1
 801d2a2:	4462      	add	r2, ip
 801d2a4:	9218      	str	r2, [sp, #96]	@ 0x60
 801d2a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801d2a8:	9315      	str	r3, [sp, #84]	@ 0x54
 801d2aa:	3208      	adds	r2, #8
 801d2ac:	9217      	str	r2, [sp, #92]	@ 0x5c
 801d2ae:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d2b0:	4293      	cmp	r3, r2
 801d2b2:	d800      	bhi.n	801d2b6 <arm_radix4_butterfly_inverse_q31+0x49e>
 801d2b4:	e6ec      	b.n	801d090 <arm_radix4_butterfly_inverse_q31+0x278>
 801d2b6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d2b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d2ba:	009b      	lsls	r3, r3, #2
 801d2bc:	931f      	str	r3, [sp, #124]	@ 0x7c
 801d2be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801d2c0:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d2c2:	089b      	lsrs	r3, r3, #2
 801d2c4:	9320      	str	r3, [sp, #128]	@ 0x80
 801d2c6:	2b04      	cmp	r3, #4
 801d2c8:	d900      	bls.n	801d2cc <arm_radix4_butterfly_inverse_q31+0x4b4>
 801d2ca:	e6c5      	b.n	801d058 <arm_radix4_butterfly_inverse_q31+0x240>
 801d2cc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d2ce:	469a      	mov	sl, r3
 801d2d0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d2d2:	681a      	ldr	r2, [r3, #0]
 801d2d4:	6918      	ldr	r0, [r3, #16]
 801d2d6:	4691      	mov	r9, r2
 801d2d8:	464c      	mov	r4, r9
 801d2da:	4680      	mov	r8, r0
 801d2dc:	69de      	ldr	r6, [r3, #28]
 801d2de:	689d      	ldr	r5, [r3, #8]
 801d2e0:	46b4      	mov	ip, r6
 801d2e2:	6998      	ldr	r0, [r3, #24]
 801d2e4:	1964      	adds	r4, r4, r5
 801d2e6:	6859      	ldr	r1, [r3, #4]
 801d2e8:	68da      	ldr	r2, [r3, #12]
 801d2ea:	4444      	add	r4, r8
 801d2ec:	695f      	ldr	r7, [r3, #20]
 801d2ee:	1824      	adds	r4, r4, r0
 801d2f0:	601c      	str	r4, [r3, #0]
 801d2f2:	188c      	adds	r4, r1, r2
 801d2f4:	19e4      	adds	r4, r4, r7
 801d2f6:	4464      	add	r4, ip
 801d2f8:	605c      	str	r4, [r3, #4]
 801d2fa:	464c      	mov	r4, r9
 801d2fc:	1b64      	subs	r4, r4, r5
 801d2fe:	4444      	add	r4, r8
 801d300:	1a24      	subs	r4, r4, r0
 801d302:	609c      	str	r4, [r3, #8]
 801d304:	1a8c      	subs	r4, r1, r2
 801d306:	19e4      	adds	r4, r4, r7
 801d308:	1ba4      	subs	r4, r4, r6
 801d30a:	60dc      	str	r4, [r3, #12]
 801d30c:	464c      	mov	r4, r9
 801d30e:	4646      	mov	r6, r8
 801d310:	1aa4      	subs	r4, r4, r2
 801d312:	1ba4      	subs	r4, r4, r6
 801d314:	4464      	add	r4, ip
 801d316:	611c      	str	r4, [r3, #16]
 801d318:	194c      	adds	r4, r1, r5
 801d31a:	1be4      	subs	r4, r4, r7
 801d31c:	1a24      	subs	r4, r4, r0
 801d31e:	615c      	str	r4, [r3, #20]
 801d320:	4644      	mov	r4, r8
 801d322:	4666      	mov	r6, ip
 801d324:	444a      	add	r2, r9
 801d326:	1b12      	subs	r2, r2, r4
 801d328:	1b92      	subs	r2, r2, r6
 801d32a:	619a      	str	r2, [r3, #24]
 801d32c:	1b4a      	subs	r2, r1, r5
 801d32e:	1bd1      	subs	r1, r2, r7
 801d330:	2201      	movs	r2, #1
 801d332:	4252      	negs	r2, r2
 801d334:	4694      	mov	ip, r2
 801d336:	44e2      	add	sl, ip
 801d338:	4652      	mov	r2, sl
 801d33a:	1809      	adds	r1, r1, r0
 801d33c:	61d9      	str	r1, [r3, #28]
 801d33e:	3320      	adds	r3, #32
 801d340:	2a00      	cmp	r2, #0
 801d342:	d1c6      	bne.n	801d2d2 <arm_radix4_butterfly_inverse_q31+0x4ba>
 801d344:	b027      	add	sp, #156	@ 0x9c
 801d346:	bc3c      	pop	{r2, r3, r4, r5}
 801d348:	4690      	mov	r8, r2
 801d34a:	4699      	mov	r9, r3
 801d34c:	46a2      	mov	sl, r4
 801d34e:	46ab      	mov	fp, r5
 801d350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d352:	469a      	mov	sl, r3
 801d354:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d356:	e7bc      	b.n	801d2d2 <arm_radix4_butterfly_inverse_q31+0x4ba>

0801d358 <arm_cmplx_mag_squared_q31>:
 801d358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d35a:	464f      	mov	r7, r9
 801d35c:	4646      	mov	r6, r8
 801d35e:	0004      	movs	r4, r0
 801d360:	b4c0      	push	{r6, r7}
 801d362:	0016      	movs	r6, r2
 801d364:	000f      	movs	r7, r1
 801d366:	2a00      	cmp	r2, #0
 801d368:	d018      	beq.n	801d39c <arm_cmplx_mag_squared_q31+0x44>
 801d36a:	6823      	ldr	r3, [r4, #0]
 801d36c:	6822      	ldr	r2, [r4, #0]
 801d36e:	17d9      	asrs	r1, r3, #31
 801d370:	6863      	ldr	r3, [r4, #4]
 801d372:	0010      	movs	r0, r2
 801d374:	4698      	mov	r8, r3
 801d376:	17db      	asrs	r3, r3, #31
 801d378:	4699      	mov	r9, r3
 801d37a:	000b      	movs	r3, r1
 801d37c:	f7e3 f920 	bl	80005c0 <__aeabi_lmul>
 801d380:	4642      	mov	r2, r8
 801d382:	104d      	asrs	r5, r1, #1
 801d384:	464b      	mov	r3, r9
 801d386:	4640      	mov	r0, r8
 801d388:	4649      	mov	r1, r9
 801d38a:	f7e3 f919 	bl	80005c0 <__aeabi_lmul>
 801d38e:	1049      	asrs	r1, r1, #1
 801d390:	1869      	adds	r1, r5, r1
 801d392:	3e01      	subs	r6, #1
 801d394:	c702      	stmia	r7!, {r1}
 801d396:	3408      	adds	r4, #8
 801d398:	2e00      	cmp	r6, #0
 801d39a:	d1e6      	bne.n	801d36a <arm_cmplx_mag_squared_q31+0x12>
 801d39c:	bc0c      	pop	{r2, r3}
 801d39e:	4690      	mov	r8, r2
 801d3a0:	4699      	mov	r9, r3
 801d3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d3a4 <arm_mult_q31>:
 801d3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3a6:	4646      	mov	r6, r8
 801d3a8:	464f      	mov	r7, r9
 801d3aa:	4690      	mov	r8, r2
 801d3ac:	b4c0      	push	{r6, r7}
 801d3ae:	001d      	movs	r5, r3
 801d3b0:	0006      	movs	r6, r0
 801d3b2:	000f      	movs	r7, r1
 801d3b4:	2400      	movs	r4, #0
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d020      	beq.n	801d3fc <arm_mult_q31+0x58>
 801d3ba:	4b12      	ldr	r3, [pc, #72]	@ (801d404 <arm_mult_q31+0x60>)
 801d3bc:	4699      	mov	r9, r3
 801d3be:	e007      	b.n	801d3d0 <arm_mult_q31+0x2c>
 801d3c0:	464b      	mov	r3, r9
 801d3c2:	4059      	eors	r1, r3
 801d3c4:	4643      	mov	r3, r8
 801d3c6:	3d01      	subs	r5, #1
 801d3c8:	5119      	str	r1, [r3, r4]
 801d3ca:	3404      	adds	r4, #4
 801d3cc:	2d00      	cmp	r5, #0
 801d3ce:	d015      	beq.n	801d3fc <arm_mult_q31+0x58>
 801d3d0:	5933      	ldr	r3, [r6, r4]
 801d3d2:	593a      	ldr	r2, [r7, r4]
 801d3d4:	17d9      	asrs	r1, r3, #31
 801d3d6:	593b      	ldr	r3, [r7, r4]
 801d3d8:	5930      	ldr	r0, [r6, r4]
 801d3da:	17db      	asrs	r3, r3, #31
 801d3dc:	f7e3 f8f0 	bl	80005c0 <__aeabi_lmul>
 801d3e0:	004b      	lsls	r3, r1, #1
 801d3e2:	0fc0      	lsrs	r0, r0, #31
 801d3e4:	4318      	orrs	r0, r3
 801d3e6:	17c9      	asrs	r1, r1, #31
 801d3e8:	17c3      	asrs	r3, r0, #31
 801d3ea:	428b      	cmp	r3, r1
 801d3ec:	d1e8      	bne.n	801d3c0 <arm_mult_q31+0x1c>
 801d3ee:	0001      	movs	r1, r0
 801d3f0:	4643      	mov	r3, r8
 801d3f2:	3d01      	subs	r5, #1
 801d3f4:	5119      	str	r1, [r3, r4]
 801d3f6:	3404      	adds	r4, #4
 801d3f8:	2d00      	cmp	r5, #0
 801d3fa:	d1e9      	bne.n	801d3d0 <arm_mult_q31+0x2c>
 801d3fc:	bc0c      	pop	{r2, r3}
 801d3fe:	4690      	mov	r8, r2
 801d400:	4699      	mov	r9, r3
 801d402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d404:	7fffffff 	.word	0x7fffffff

0801d408 <arm_add_q31>:
 801d408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d40a:	465f      	mov	r7, fp
 801d40c:	4656      	mov	r6, sl
 801d40e:	464d      	mov	r5, r9
 801d410:	4644      	mov	r4, r8
 801d412:	b4f0      	push	{r4, r5, r6, r7}
 801d414:	4693      	mov	fp, r2
 801d416:	b083      	sub	sp, #12
 801d418:	4681      	mov	r9, r0
 801d41a:	468a      	mov	sl, r1
 801d41c:	4698      	mov	r8, r3
 801d41e:	2200      	movs	r2, #0
 801d420:	2b00      	cmp	r3, #0
 801d422:	d020      	beq.n	801d466 <arm_add_q31+0x5e>
 801d424:	4649      	mov	r1, r9
 801d426:	4653      	mov	r3, sl
 801d428:	588e      	ldr	r6, [r1, r2]
 801d42a:	589b      	ldr	r3, [r3, r2]
 801d42c:	17f7      	asrs	r7, r6, #31
 801d42e:	001c      	movs	r4, r3
 801d430:	0030      	movs	r0, r6
 801d432:	0039      	movs	r1, r7
 801d434:	17dd      	asrs	r5, r3, #31
 801d436:	46b4      	mov	ip, r6
 801d438:	1900      	adds	r0, r0, r4
 801d43a:	4169      	adcs	r1, r5
 801d43c:	4463      	add	r3, ip
 801d43e:	9000      	str	r0, [sp, #0]
 801d440:	9101      	str	r1, [sp, #4]
 801d442:	17d9      	asrs	r1, r3, #31
 801d444:	468c      	mov	ip, r1
 801d446:	9901      	ldr	r1, [sp, #4]
 801d448:	458c      	cmp	ip, r1
 801d44a:	d002      	beq.n	801d452 <arm_add_q31+0x4a>
 801d44c:	17cb      	asrs	r3, r1, #31
 801d44e:	4909      	ldr	r1, [pc, #36]	@ (801d474 <arm_add_q31+0x6c>)
 801d450:	404b      	eors	r3, r1
 801d452:	4659      	mov	r1, fp
 801d454:	508b      	str	r3, [r1, r2]
 801d456:	2301      	movs	r3, #1
 801d458:	425b      	negs	r3, r3
 801d45a:	469c      	mov	ip, r3
 801d45c:	44e0      	add	r8, ip
 801d45e:	4643      	mov	r3, r8
 801d460:	3204      	adds	r2, #4
 801d462:	2b00      	cmp	r3, #0
 801d464:	d1de      	bne.n	801d424 <arm_add_q31+0x1c>
 801d466:	b003      	add	sp, #12
 801d468:	bc3c      	pop	{r2, r3, r4, r5}
 801d46a:	4690      	mov	r8, r2
 801d46c:	4699      	mov	r9, r3
 801d46e:	46a2      	mov	sl, r4
 801d470:	46ab      	mov	fp, r5
 801d472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d474:	7fffffff 	.word	0x7fffffff

0801d478 <atof>:
 801d478:	b510      	push	{r4, lr}
 801d47a:	2100      	movs	r1, #0
 801d47c:	f000 fe12 	bl	801e0a4 <strtod>
 801d480:	bd10      	pop	{r4, pc}

0801d482 <atoi>:
 801d482:	b510      	push	{r4, lr}
 801d484:	220a      	movs	r2, #10
 801d486:	2100      	movs	r1, #0
 801d488:	f000 fea4 	bl	801e1d4 <strtol>
 801d48c:	bd10      	pop	{r4, pc}
	...

0801d490 <sulp>:
 801d490:	b570      	push	{r4, r5, r6, lr}
 801d492:	0016      	movs	r6, r2
 801d494:	000d      	movs	r5, r1
 801d496:	f003 fcf3 	bl	8020e80 <__ulp>
 801d49a:	2e00      	cmp	r6, #0
 801d49c:	d00d      	beq.n	801d4ba <sulp+0x2a>
 801d49e:	236b      	movs	r3, #107	@ 0x6b
 801d4a0:	006a      	lsls	r2, r5, #1
 801d4a2:	0d52      	lsrs	r2, r2, #21
 801d4a4:	1a9b      	subs	r3, r3, r2
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	dd07      	ble.n	801d4ba <sulp+0x2a>
 801d4aa:	2400      	movs	r4, #0
 801d4ac:	4a03      	ldr	r2, [pc, #12]	@ (801d4bc <sulp+0x2c>)
 801d4ae:	051b      	lsls	r3, r3, #20
 801d4b0:	189d      	adds	r5, r3, r2
 801d4b2:	002b      	movs	r3, r5
 801d4b4:	0022      	movs	r2, r4
 801d4b6:	f7e5 f8c1 	bl	800263c <__aeabi_dmul>
 801d4ba:	bd70      	pop	{r4, r5, r6, pc}
 801d4bc:	3ff00000 	.word	0x3ff00000

0801d4c0 <_strtod_l>:
 801d4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4c2:	b0a3      	sub	sp, #140	@ 0x8c
 801d4c4:	921b      	str	r2, [sp, #108]	@ 0x6c
 801d4c6:	2200      	movs	r2, #0
 801d4c8:	2600      	movs	r6, #0
 801d4ca:	2700      	movs	r7, #0
 801d4cc:	9005      	str	r0, [sp, #20]
 801d4ce:	9109      	str	r1, [sp, #36]	@ 0x24
 801d4d0:	921e      	str	r2, [sp, #120]	@ 0x78
 801d4d2:	911d      	str	r1, [sp, #116]	@ 0x74
 801d4d4:	780a      	ldrb	r2, [r1, #0]
 801d4d6:	2a2b      	cmp	r2, #43	@ 0x2b
 801d4d8:	d053      	beq.n	801d582 <_strtod_l+0xc2>
 801d4da:	d83f      	bhi.n	801d55c <_strtod_l+0x9c>
 801d4dc:	2a0d      	cmp	r2, #13
 801d4de:	d839      	bhi.n	801d554 <_strtod_l+0x94>
 801d4e0:	2a08      	cmp	r2, #8
 801d4e2:	d839      	bhi.n	801d558 <_strtod_l+0x98>
 801d4e4:	2a00      	cmp	r2, #0
 801d4e6:	d042      	beq.n	801d56e <_strtod_l+0xae>
 801d4e8:	2200      	movs	r2, #0
 801d4ea:	9212      	str	r2, [sp, #72]	@ 0x48
 801d4ec:	2100      	movs	r1, #0
 801d4ee:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801d4f0:	910c      	str	r1, [sp, #48]	@ 0x30
 801d4f2:	782a      	ldrb	r2, [r5, #0]
 801d4f4:	2a30      	cmp	r2, #48	@ 0x30
 801d4f6:	d000      	beq.n	801d4fa <_strtod_l+0x3a>
 801d4f8:	e083      	b.n	801d602 <_strtod_l+0x142>
 801d4fa:	786a      	ldrb	r2, [r5, #1]
 801d4fc:	3120      	adds	r1, #32
 801d4fe:	438a      	bics	r2, r1
 801d500:	2a58      	cmp	r2, #88	@ 0x58
 801d502:	d000      	beq.n	801d506 <_strtod_l+0x46>
 801d504:	e073      	b.n	801d5ee <_strtod_l+0x12e>
 801d506:	9302      	str	r3, [sp, #8]
 801d508:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d50a:	4a95      	ldr	r2, [pc, #596]	@ (801d760 <_strtod_l+0x2a0>)
 801d50c:	9301      	str	r3, [sp, #4]
 801d50e:	ab1e      	add	r3, sp, #120	@ 0x78
 801d510:	9300      	str	r3, [sp, #0]
 801d512:	9805      	ldr	r0, [sp, #20]
 801d514:	ab1f      	add	r3, sp, #124	@ 0x7c
 801d516:	a91d      	add	r1, sp, #116	@ 0x74
 801d518:	f002 fd62 	bl	801ffe0 <__gethex>
 801d51c:	230f      	movs	r3, #15
 801d51e:	0002      	movs	r2, r0
 801d520:	401a      	ands	r2, r3
 801d522:	0004      	movs	r4, r0
 801d524:	9206      	str	r2, [sp, #24]
 801d526:	4218      	tst	r0, r3
 801d528:	d005      	beq.n	801d536 <_strtod_l+0x76>
 801d52a:	2a06      	cmp	r2, #6
 801d52c:	d12b      	bne.n	801d586 <_strtod_l+0xc6>
 801d52e:	2300      	movs	r3, #0
 801d530:	3501      	adds	r5, #1
 801d532:	951d      	str	r5, [sp, #116]	@ 0x74
 801d534:	9312      	str	r3, [sp, #72]	@ 0x48
 801d536:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d538:	2b00      	cmp	r3, #0
 801d53a:	d002      	beq.n	801d542 <_strtod_l+0x82>
 801d53c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d53e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d540:	6013      	str	r3, [r2, #0]
 801d542:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d544:	2b00      	cmp	r3, #0
 801d546:	d019      	beq.n	801d57c <_strtod_l+0xbc>
 801d548:	2380      	movs	r3, #128	@ 0x80
 801d54a:	0030      	movs	r0, r6
 801d54c:	061b      	lsls	r3, r3, #24
 801d54e:	18f9      	adds	r1, r7, r3
 801d550:	b023      	add	sp, #140	@ 0x8c
 801d552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d554:	2a20      	cmp	r2, #32
 801d556:	d1c7      	bne.n	801d4e8 <_strtod_l+0x28>
 801d558:	3101      	adds	r1, #1
 801d55a:	e7ba      	b.n	801d4d2 <_strtod_l+0x12>
 801d55c:	2a2d      	cmp	r2, #45	@ 0x2d
 801d55e:	d1c3      	bne.n	801d4e8 <_strtod_l+0x28>
 801d560:	3a2c      	subs	r2, #44	@ 0x2c
 801d562:	9212      	str	r2, [sp, #72]	@ 0x48
 801d564:	1c4a      	adds	r2, r1, #1
 801d566:	921d      	str	r2, [sp, #116]	@ 0x74
 801d568:	784a      	ldrb	r2, [r1, #1]
 801d56a:	2a00      	cmp	r2, #0
 801d56c:	d1be      	bne.n	801d4ec <_strtod_l+0x2c>
 801d56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d570:	931d      	str	r3, [sp, #116]	@ 0x74
 801d572:	2300      	movs	r3, #0
 801d574:	9312      	str	r3, [sp, #72]	@ 0x48
 801d576:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d1df      	bne.n	801d53c <_strtod_l+0x7c>
 801d57c:	0030      	movs	r0, r6
 801d57e:	0039      	movs	r1, r7
 801d580:	e7e6      	b.n	801d550 <_strtod_l+0x90>
 801d582:	2200      	movs	r2, #0
 801d584:	e7ed      	b.n	801d562 <_strtod_l+0xa2>
 801d586:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801d588:	2a00      	cmp	r2, #0
 801d58a:	d007      	beq.n	801d59c <_strtod_l+0xdc>
 801d58c:	2135      	movs	r1, #53	@ 0x35
 801d58e:	a820      	add	r0, sp, #128	@ 0x80
 801d590:	f003 fd6c 	bl	802106c <__copybits>
 801d594:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d596:	9805      	ldr	r0, [sp, #20]
 801d598:	f003 f926 	bl	80207e8 <_Bfree>
 801d59c:	9806      	ldr	r0, [sp, #24]
 801d59e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801d5a0:	3801      	subs	r0, #1
 801d5a2:	2804      	cmp	r0, #4
 801d5a4:	d806      	bhi.n	801d5b4 <_strtod_l+0xf4>
 801d5a6:	f7e2 fde9 	bl	800017c <__gnu_thumb1_case_uqi>
 801d5aa:	0312      	.short	0x0312
 801d5ac:	1e1c      	.short	0x1e1c
 801d5ae:	12          	.byte	0x12
 801d5af:	00          	.byte	0x00
 801d5b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d5b2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801d5b4:	05e4      	lsls	r4, r4, #23
 801d5b6:	d502      	bpl.n	801d5be <_strtod_l+0xfe>
 801d5b8:	2380      	movs	r3, #128	@ 0x80
 801d5ba:	061b      	lsls	r3, r3, #24
 801d5bc:	431f      	orrs	r7, r3
 801d5be:	4b69      	ldr	r3, [pc, #420]	@ (801d764 <_strtod_l+0x2a4>)
 801d5c0:	423b      	tst	r3, r7
 801d5c2:	d1b8      	bne.n	801d536 <_strtod_l+0x76>
 801d5c4:	f001 fd90 	bl	801f0e8 <__errno>
 801d5c8:	2322      	movs	r3, #34	@ 0x22
 801d5ca:	6003      	str	r3, [r0, #0]
 801d5cc:	e7b3      	b.n	801d536 <_strtod_l+0x76>
 801d5ce:	4966      	ldr	r1, [pc, #408]	@ (801d768 <_strtod_l+0x2a8>)
 801d5d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801d5d2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d5d4:	400a      	ands	r2, r1
 801d5d6:	4965      	ldr	r1, [pc, #404]	@ (801d76c <_strtod_l+0x2ac>)
 801d5d8:	185b      	adds	r3, r3, r1
 801d5da:	051b      	lsls	r3, r3, #20
 801d5dc:	431a      	orrs	r2, r3
 801d5de:	0017      	movs	r7, r2
 801d5e0:	e7e8      	b.n	801d5b4 <_strtod_l+0xf4>
 801d5e2:	4f60      	ldr	r7, [pc, #384]	@ (801d764 <_strtod_l+0x2a4>)
 801d5e4:	e7e6      	b.n	801d5b4 <_strtod_l+0xf4>
 801d5e6:	2601      	movs	r6, #1
 801d5e8:	4f61      	ldr	r7, [pc, #388]	@ (801d770 <_strtod_l+0x2b0>)
 801d5ea:	4276      	negs	r6, r6
 801d5ec:	e7e2      	b.n	801d5b4 <_strtod_l+0xf4>
 801d5ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d5f0:	1c5a      	adds	r2, r3, #1
 801d5f2:	921d      	str	r2, [sp, #116]	@ 0x74
 801d5f4:	785b      	ldrb	r3, [r3, #1]
 801d5f6:	2b30      	cmp	r3, #48	@ 0x30
 801d5f8:	d0f9      	beq.n	801d5ee <_strtod_l+0x12e>
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d09b      	beq.n	801d536 <_strtod_l+0x76>
 801d5fe:	2301      	movs	r3, #1
 801d600:	930c      	str	r3, [sp, #48]	@ 0x30
 801d602:	2500      	movs	r5, #0
 801d604:	220a      	movs	r2, #10
 801d606:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d608:	950d      	str	r5, [sp, #52]	@ 0x34
 801d60a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d60c:	9508      	str	r5, [sp, #32]
 801d60e:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d610:	7804      	ldrb	r4, [r0, #0]
 801d612:	0023      	movs	r3, r4
 801d614:	3b30      	subs	r3, #48	@ 0x30
 801d616:	b2d9      	uxtb	r1, r3
 801d618:	2909      	cmp	r1, #9
 801d61a:	d927      	bls.n	801d66c <_strtod_l+0x1ac>
 801d61c:	2201      	movs	r2, #1
 801d61e:	4955      	ldr	r1, [pc, #340]	@ (801d774 <_strtod_l+0x2b4>)
 801d620:	f001 fcd4 	bl	801efcc <strncmp>
 801d624:	2800      	cmp	r0, #0
 801d626:	d031      	beq.n	801d68c <_strtod_l+0x1cc>
 801d628:	2000      	movs	r0, #0
 801d62a:	0023      	movs	r3, r4
 801d62c:	4684      	mov	ip, r0
 801d62e:	9a08      	ldr	r2, [sp, #32]
 801d630:	900e      	str	r0, [sp, #56]	@ 0x38
 801d632:	9206      	str	r2, [sp, #24]
 801d634:	2220      	movs	r2, #32
 801d636:	0019      	movs	r1, r3
 801d638:	4391      	bics	r1, r2
 801d63a:	000a      	movs	r2, r1
 801d63c:	2100      	movs	r1, #0
 801d63e:	9107      	str	r1, [sp, #28]
 801d640:	2a45      	cmp	r2, #69	@ 0x45
 801d642:	d000      	beq.n	801d646 <_strtod_l+0x186>
 801d644:	e0c0      	b.n	801d7c8 <_strtod_l+0x308>
 801d646:	9b06      	ldr	r3, [sp, #24]
 801d648:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d64a:	4303      	orrs	r3, r0
 801d64c:	4313      	orrs	r3, r2
 801d64e:	428b      	cmp	r3, r1
 801d650:	d08d      	beq.n	801d56e <_strtod_l+0xae>
 801d652:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d654:	9309      	str	r3, [sp, #36]	@ 0x24
 801d656:	3301      	adds	r3, #1
 801d658:	931d      	str	r3, [sp, #116]	@ 0x74
 801d65a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d65c:	785b      	ldrb	r3, [r3, #1]
 801d65e:	2b2b      	cmp	r3, #43	@ 0x2b
 801d660:	d070      	beq.n	801d744 <_strtod_l+0x284>
 801d662:	000c      	movs	r4, r1
 801d664:	2b2d      	cmp	r3, #45	@ 0x2d
 801d666:	d173      	bne.n	801d750 <_strtod_l+0x290>
 801d668:	2401      	movs	r4, #1
 801d66a:	e06c      	b.n	801d746 <_strtod_l+0x286>
 801d66c:	9908      	ldr	r1, [sp, #32]
 801d66e:	2908      	cmp	r1, #8
 801d670:	dc09      	bgt.n	801d686 <_strtod_l+0x1c6>
 801d672:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d674:	4351      	muls	r1, r2
 801d676:	185b      	adds	r3, r3, r1
 801d678:	930d      	str	r3, [sp, #52]	@ 0x34
 801d67a:	9b08      	ldr	r3, [sp, #32]
 801d67c:	3001      	adds	r0, #1
 801d67e:	3301      	adds	r3, #1
 801d680:	9308      	str	r3, [sp, #32]
 801d682:	901d      	str	r0, [sp, #116]	@ 0x74
 801d684:	e7c3      	b.n	801d60e <_strtod_l+0x14e>
 801d686:	4355      	muls	r5, r2
 801d688:	195d      	adds	r5, r3, r5
 801d68a:	e7f6      	b.n	801d67a <_strtod_l+0x1ba>
 801d68c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d68e:	1c5a      	adds	r2, r3, #1
 801d690:	921d      	str	r2, [sp, #116]	@ 0x74
 801d692:	9a08      	ldr	r2, [sp, #32]
 801d694:	785b      	ldrb	r3, [r3, #1]
 801d696:	2a00      	cmp	r2, #0
 801d698:	d03a      	beq.n	801d710 <_strtod_l+0x250>
 801d69a:	900e      	str	r0, [sp, #56]	@ 0x38
 801d69c:	9206      	str	r2, [sp, #24]
 801d69e:	001a      	movs	r2, r3
 801d6a0:	3a30      	subs	r2, #48	@ 0x30
 801d6a2:	2a09      	cmp	r2, #9
 801d6a4:	d912      	bls.n	801d6cc <_strtod_l+0x20c>
 801d6a6:	2201      	movs	r2, #1
 801d6a8:	4694      	mov	ip, r2
 801d6aa:	e7c3      	b.n	801d634 <_strtod_l+0x174>
 801d6ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d6ae:	3001      	adds	r0, #1
 801d6b0:	1c5a      	adds	r2, r3, #1
 801d6b2:	921d      	str	r2, [sp, #116]	@ 0x74
 801d6b4:	785b      	ldrb	r3, [r3, #1]
 801d6b6:	2b30      	cmp	r3, #48	@ 0x30
 801d6b8:	d0f8      	beq.n	801d6ac <_strtod_l+0x1ec>
 801d6ba:	001a      	movs	r2, r3
 801d6bc:	3a31      	subs	r2, #49	@ 0x31
 801d6be:	2a08      	cmp	r2, #8
 801d6c0:	d83b      	bhi.n	801d73a <_strtod_l+0x27a>
 801d6c2:	900e      	str	r0, [sp, #56]	@ 0x38
 801d6c4:	2000      	movs	r0, #0
 801d6c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801d6c8:	9006      	str	r0, [sp, #24]
 801d6ca:	9213      	str	r2, [sp, #76]	@ 0x4c
 801d6cc:	001a      	movs	r2, r3
 801d6ce:	1c41      	adds	r1, r0, #1
 801d6d0:	3a30      	subs	r2, #48	@ 0x30
 801d6d2:	2b30      	cmp	r3, #48	@ 0x30
 801d6d4:	d016      	beq.n	801d704 <_strtod_l+0x244>
 801d6d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d6d8:	185b      	adds	r3, r3, r1
 801d6da:	930e      	str	r3, [sp, #56]	@ 0x38
 801d6dc:	9b06      	ldr	r3, [sp, #24]
 801d6de:	210a      	movs	r1, #10
 801d6e0:	469c      	mov	ip, r3
 801d6e2:	4484      	add	ip, r0
 801d6e4:	459c      	cmp	ip, r3
 801d6e6:	d115      	bne.n	801d714 <_strtod_l+0x254>
 801d6e8:	9906      	ldr	r1, [sp, #24]
 801d6ea:	9b06      	ldr	r3, [sp, #24]
 801d6ec:	3101      	adds	r1, #1
 801d6ee:	1809      	adds	r1, r1, r0
 801d6f0:	181b      	adds	r3, r3, r0
 801d6f2:	9106      	str	r1, [sp, #24]
 801d6f4:	2b08      	cmp	r3, #8
 801d6f6:	dc19      	bgt.n	801d72c <_strtod_l+0x26c>
 801d6f8:	230a      	movs	r3, #10
 801d6fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d6fc:	434b      	muls	r3, r1
 801d6fe:	2100      	movs	r1, #0
 801d700:	18d3      	adds	r3, r2, r3
 801d702:	930d      	str	r3, [sp, #52]	@ 0x34
 801d704:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d706:	0008      	movs	r0, r1
 801d708:	1c5a      	adds	r2, r3, #1
 801d70a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d70c:	785b      	ldrb	r3, [r3, #1]
 801d70e:	e7c6      	b.n	801d69e <_strtod_l+0x1de>
 801d710:	9808      	ldr	r0, [sp, #32]
 801d712:	e7d0      	b.n	801d6b6 <_strtod_l+0x1f6>
 801d714:	1c5c      	adds	r4, r3, #1
 801d716:	2b08      	cmp	r3, #8
 801d718:	dc04      	bgt.n	801d724 <_strtod_l+0x264>
 801d71a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d71c:	434b      	muls	r3, r1
 801d71e:	930d      	str	r3, [sp, #52]	@ 0x34
 801d720:	0023      	movs	r3, r4
 801d722:	e7df      	b.n	801d6e4 <_strtod_l+0x224>
 801d724:	2c10      	cmp	r4, #16
 801d726:	dcfb      	bgt.n	801d720 <_strtod_l+0x260>
 801d728:	434d      	muls	r5, r1
 801d72a:	e7f9      	b.n	801d720 <_strtod_l+0x260>
 801d72c:	2100      	movs	r1, #0
 801d72e:	2b0f      	cmp	r3, #15
 801d730:	dce8      	bgt.n	801d704 <_strtod_l+0x244>
 801d732:	230a      	movs	r3, #10
 801d734:	435d      	muls	r5, r3
 801d736:	1955      	adds	r5, r2, r5
 801d738:	e7e4      	b.n	801d704 <_strtod_l+0x244>
 801d73a:	2200      	movs	r2, #0
 801d73c:	920e      	str	r2, [sp, #56]	@ 0x38
 801d73e:	9206      	str	r2, [sp, #24]
 801d740:	3201      	adds	r2, #1
 801d742:	e7b1      	b.n	801d6a8 <_strtod_l+0x1e8>
 801d744:	2400      	movs	r4, #0
 801d746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d748:	3302      	adds	r3, #2
 801d74a:	931d      	str	r3, [sp, #116]	@ 0x74
 801d74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d74e:	789b      	ldrb	r3, [r3, #2]
 801d750:	001a      	movs	r2, r3
 801d752:	3a30      	subs	r2, #48	@ 0x30
 801d754:	2a09      	cmp	r2, #9
 801d756:	d913      	bls.n	801d780 <_strtod_l+0x2c0>
 801d758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d75a:	921d      	str	r2, [sp, #116]	@ 0x74
 801d75c:	2200      	movs	r2, #0
 801d75e:	e032      	b.n	801d7c6 <_strtod_l+0x306>
 801d760:	080241fc 	.word	0x080241fc
 801d764:	7ff00000 	.word	0x7ff00000
 801d768:	ffefffff 	.word	0xffefffff
 801d76c:	00000433 	.word	0x00000433
 801d770:	7fffffff 	.word	0x7fffffff
 801d774:	080241e4 	.word	0x080241e4
 801d778:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d77a:	1c5a      	adds	r2, r3, #1
 801d77c:	921d      	str	r2, [sp, #116]	@ 0x74
 801d77e:	785b      	ldrb	r3, [r3, #1]
 801d780:	2b30      	cmp	r3, #48	@ 0x30
 801d782:	d0f9      	beq.n	801d778 <_strtod_l+0x2b8>
 801d784:	2200      	movs	r2, #0
 801d786:	9207      	str	r2, [sp, #28]
 801d788:	001a      	movs	r2, r3
 801d78a:	3a31      	subs	r2, #49	@ 0x31
 801d78c:	2a08      	cmp	r2, #8
 801d78e:	d81b      	bhi.n	801d7c8 <_strtod_l+0x308>
 801d790:	3b30      	subs	r3, #48	@ 0x30
 801d792:	9310      	str	r3, [sp, #64]	@ 0x40
 801d794:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d796:	9307      	str	r3, [sp, #28]
 801d798:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d79a:	1c59      	adds	r1, r3, #1
 801d79c:	911d      	str	r1, [sp, #116]	@ 0x74
 801d79e:	785b      	ldrb	r3, [r3, #1]
 801d7a0:	001a      	movs	r2, r3
 801d7a2:	3a30      	subs	r2, #48	@ 0x30
 801d7a4:	2a09      	cmp	r2, #9
 801d7a6:	d93a      	bls.n	801d81e <_strtod_l+0x35e>
 801d7a8:	9a07      	ldr	r2, [sp, #28]
 801d7aa:	1a8a      	subs	r2, r1, r2
 801d7ac:	49b4      	ldr	r1, [pc, #720]	@ (801da80 <_strtod_l+0x5c0>)
 801d7ae:	9107      	str	r1, [sp, #28]
 801d7b0:	2a08      	cmp	r2, #8
 801d7b2:	dc04      	bgt.n	801d7be <_strtod_l+0x2fe>
 801d7b4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d7b6:	9207      	str	r2, [sp, #28]
 801d7b8:	428a      	cmp	r2, r1
 801d7ba:	dd00      	ble.n	801d7be <_strtod_l+0x2fe>
 801d7bc:	9107      	str	r1, [sp, #28]
 801d7be:	2c00      	cmp	r4, #0
 801d7c0:	d002      	beq.n	801d7c8 <_strtod_l+0x308>
 801d7c2:	9a07      	ldr	r2, [sp, #28]
 801d7c4:	4252      	negs	r2, r2
 801d7c6:	9207      	str	r2, [sp, #28]
 801d7c8:	9a06      	ldr	r2, [sp, #24]
 801d7ca:	2a00      	cmp	r2, #0
 801d7cc:	d14d      	bne.n	801d86a <_strtod_l+0x3aa>
 801d7ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d7d0:	4310      	orrs	r0, r2
 801d7d2:	d000      	beq.n	801d7d6 <_strtod_l+0x316>
 801d7d4:	e6af      	b.n	801d536 <_strtod_l+0x76>
 801d7d6:	4662      	mov	r2, ip
 801d7d8:	2a00      	cmp	r2, #0
 801d7da:	d000      	beq.n	801d7de <_strtod_l+0x31e>
 801d7dc:	e6c7      	b.n	801d56e <_strtod_l+0xae>
 801d7de:	2b69      	cmp	r3, #105	@ 0x69
 801d7e0:	d027      	beq.n	801d832 <_strtod_l+0x372>
 801d7e2:	dc23      	bgt.n	801d82c <_strtod_l+0x36c>
 801d7e4:	2b49      	cmp	r3, #73	@ 0x49
 801d7e6:	d024      	beq.n	801d832 <_strtod_l+0x372>
 801d7e8:	2b4e      	cmp	r3, #78	@ 0x4e
 801d7ea:	d000      	beq.n	801d7ee <_strtod_l+0x32e>
 801d7ec:	e6bf      	b.n	801d56e <_strtod_l+0xae>
 801d7ee:	49a5      	ldr	r1, [pc, #660]	@ (801da84 <_strtod_l+0x5c4>)
 801d7f0:	a81d      	add	r0, sp, #116	@ 0x74
 801d7f2:	f002 fe2b 	bl	802044c <__match>
 801d7f6:	2800      	cmp	r0, #0
 801d7f8:	d100      	bne.n	801d7fc <_strtod_l+0x33c>
 801d7fa:	e6b8      	b.n	801d56e <_strtod_l+0xae>
 801d7fc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d7fe:	781b      	ldrb	r3, [r3, #0]
 801d800:	2b28      	cmp	r3, #40	@ 0x28
 801d802:	d12c      	bne.n	801d85e <_strtod_l+0x39e>
 801d804:	49a0      	ldr	r1, [pc, #640]	@ (801da88 <_strtod_l+0x5c8>)
 801d806:	aa20      	add	r2, sp, #128	@ 0x80
 801d808:	a81d      	add	r0, sp, #116	@ 0x74
 801d80a:	f002 fe33 	bl	8020474 <__hexnan>
 801d80e:	2805      	cmp	r0, #5
 801d810:	d125      	bne.n	801d85e <_strtod_l+0x39e>
 801d812:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801d814:	4a9d      	ldr	r2, [pc, #628]	@ (801da8c <_strtod_l+0x5cc>)
 801d816:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801d818:	431a      	orrs	r2, r3
 801d81a:	0017      	movs	r7, r2
 801d81c:	e68b      	b.n	801d536 <_strtod_l+0x76>
 801d81e:	220a      	movs	r2, #10
 801d820:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801d822:	434a      	muls	r2, r1
 801d824:	18d2      	adds	r2, r2, r3
 801d826:	3a30      	subs	r2, #48	@ 0x30
 801d828:	9210      	str	r2, [sp, #64]	@ 0x40
 801d82a:	e7b5      	b.n	801d798 <_strtod_l+0x2d8>
 801d82c:	2b6e      	cmp	r3, #110	@ 0x6e
 801d82e:	d0de      	beq.n	801d7ee <_strtod_l+0x32e>
 801d830:	e69d      	b.n	801d56e <_strtod_l+0xae>
 801d832:	4997      	ldr	r1, [pc, #604]	@ (801da90 <_strtod_l+0x5d0>)
 801d834:	a81d      	add	r0, sp, #116	@ 0x74
 801d836:	f002 fe09 	bl	802044c <__match>
 801d83a:	2800      	cmp	r0, #0
 801d83c:	d100      	bne.n	801d840 <_strtod_l+0x380>
 801d83e:	e696      	b.n	801d56e <_strtod_l+0xae>
 801d840:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d842:	4994      	ldr	r1, [pc, #592]	@ (801da94 <_strtod_l+0x5d4>)
 801d844:	3b01      	subs	r3, #1
 801d846:	a81d      	add	r0, sp, #116	@ 0x74
 801d848:	931d      	str	r3, [sp, #116]	@ 0x74
 801d84a:	f002 fdff 	bl	802044c <__match>
 801d84e:	2800      	cmp	r0, #0
 801d850:	d102      	bne.n	801d858 <_strtod_l+0x398>
 801d852:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d854:	3301      	adds	r3, #1
 801d856:	931d      	str	r3, [sp, #116]	@ 0x74
 801d858:	2600      	movs	r6, #0
 801d85a:	4f8c      	ldr	r7, [pc, #560]	@ (801da8c <_strtod_l+0x5cc>)
 801d85c:	e66b      	b.n	801d536 <_strtod_l+0x76>
 801d85e:	488e      	ldr	r0, [pc, #568]	@ (801da98 <_strtod_l+0x5d8>)
 801d860:	f001 fc84 	bl	801f16c <nan>
 801d864:	0006      	movs	r6, r0
 801d866:	000f      	movs	r7, r1
 801d868:	e665      	b.n	801d536 <_strtod_l+0x76>
 801d86a:	9b07      	ldr	r3, [sp, #28]
 801d86c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d86e:	1a9b      	subs	r3, r3, r2
 801d870:	930c      	str	r3, [sp, #48]	@ 0x30
 801d872:	9b08      	ldr	r3, [sp, #32]
 801d874:	2b00      	cmp	r3, #0
 801d876:	d101      	bne.n	801d87c <_strtod_l+0x3bc>
 801d878:	9b06      	ldr	r3, [sp, #24]
 801d87a:	9308      	str	r3, [sp, #32]
 801d87c:	9c06      	ldr	r4, [sp, #24]
 801d87e:	2c10      	cmp	r4, #16
 801d880:	dd00      	ble.n	801d884 <_strtod_l+0x3c4>
 801d882:	2410      	movs	r4, #16
 801d884:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801d886:	f7e5 fdc9 	bl	800341c <__aeabi_ui2d>
 801d88a:	9b06      	ldr	r3, [sp, #24]
 801d88c:	0006      	movs	r6, r0
 801d88e:	000f      	movs	r7, r1
 801d890:	2b09      	cmp	r3, #9
 801d892:	dc13      	bgt.n	801d8bc <_strtod_l+0x3fc>
 801d894:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d896:	2b00      	cmp	r3, #0
 801d898:	d100      	bne.n	801d89c <_strtod_l+0x3dc>
 801d89a:	e64c      	b.n	801d536 <_strtod_l+0x76>
 801d89c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	dc00      	bgt.n	801d8a4 <_strtod_l+0x3e4>
 801d8a2:	e07e      	b.n	801d9a2 <_strtod_l+0x4e2>
 801d8a4:	2b16      	cmp	r3, #22
 801d8a6:	dc63      	bgt.n	801d970 <_strtod_l+0x4b0>
 801d8a8:	497c      	ldr	r1, [pc, #496]	@ (801da9c <_strtod_l+0x5dc>)
 801d8aa:	00db      	lsls	r3, r3, #3
 801d8ac:	18c9      	adds	r1, r1, r3
 801d8ae:	0032      	movs	r2, r6
 801d8b0:	6808      	ldr	r0, [r1, #0]
 801d8b2:	6849      	ldr	r1, [r1, #4]
 801d8b4:	003b      	movs	r3, r7
 801d8b6:	f7e4 fec1 	bl	800263c <__aeabi_dmul>
 801d8ba:	e7d3      	b.n	801d864 <_strtod_l+0x3a4>
 801d8bc:	0022      	movs	r2, r4
 801d8be:	4b77      	ldr	r3, [pc, #476]	@ (801da9c <_strtod_l+0x5dc>)
 801d8c0:	3a09      	subs	r2, #9
 801d8c2:	00d2      	lsls	r2, r2, #3
 801d8c4:	189b      	adds	r3, r3, r2
 801d8c6:	681a      	ldr	r2, [r3, #0]
 801d8c8:	685b      	ldr	r3, [r3, #4]
 801d8ca:	f7e4 feb7 	bl	800263c <__aeabi_dmul>
 801d8ce:	0006      	movs	r6, r0
 801d8d0:	0028      	movs	r0, r5
 801d8d2:	000f      	movs	r7, r1
 801d8d4:	f7e5 fda2 	bl	800341c <__aeabi_ui2d>
 801d8d8:	000b      	movs	r3, r1
 801d8da:	0002      	movs	r2, r0
 801d8dc:	0039      	movs	r1, r7
 801d8de:	0030      	movs	r0, r6
 801d8e0:	f7e3 ff04 	bl	80016ec <__aeabi_dadd>
 801d8e4:	9b06      	ldr	r3, [sp, #24]
 801d8e6:	0006      	movs	r6, r0
 801d8e8:	000f      	movs	r7, r1
 801d8ea:	2b0f      	cmp	r3, #15
 801d8ec:	ddd2      	ble.n	801d894 <_strtod_l+0x3d4>
 801d8ee:	9b06      	ldr	r3, [sp, #24]
 801d8f0:	1b1c      	subs	r4, r3, r4
 801d8f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d8f4:	18e4      	adds	r4, r4, r3
 801d8f6:	2c00      	cmp	r4, #0
 801d8f8:	dc00      	bgt.n	801d8fc <_strtod_l+0x43c>
 801d8fa:	e09b      	b.n	801da34 <_strtod_l+0x574>
 801d8fc:	220f      	movs	r2, #15
 801d8fe:	0023      	movs	r3, r4
 801d900:	4013      	ands	r3, r2
 801d902:	4214      	tst	r4, r2
 801d904:	d00a      	beq.n	801d91c <_strtod_l+0x45c>
 801d906:	4965      	ldr	r1, [pc, #404]	@ (801da9c <_strtod_l+0x5dc>)
 801d908:	00db      	lsls	r3, r3, #3
 801d90a:	18c9      	adds	r1, r1, r3
 801d90c:	0032      	movs	r2, r6
 801d90e:	6808      	ldr	r0, [r1, #0]
 801d910:	6849      	ldr	r1, [r1, #4]
 801d912:	003b      	movs	r3, r7
 801d914:	f7e4 fe92 	bl	800263c <__aeabi_dmul>
 801d918:	0006      	movs	r6, r0
 801d91a:	000f      	movs	r7, r1
 801d91c:	230f      	movs	r3, #15
 801d91e:	439c      	bics	r4, r3
 801d920:	d073      	beq.n	801da0a <_strtod_l+0x54a>
 801d922:	3326      	adds	r3, #38	@ 0x26
 801d924:	33ff      	adds	r3, #255	@ 0xff
 801d926:	429c      	cmp	r4, r3
 801d928:	dd4b      	ble.n	801d9c2 <_strtod_l+0x502>
 801d92a:	2300      	movs	r3, #0
 801d92c:	9306      	str	r3, [sp, #24]
 801d92e:	9307      	str	r3, [sp, #28]
 801d930:	930d      	str	r3, [sp, #52]	@ 0x34
 801d932:	9308      	str	r3, [sp, #32]
 801d934:	2322      	movs	r3, #34	@ 0x22
 801d936:	2600      	movs	r6, #0
 801d938:	9a05      	ldr	r2, [sp, #20]
 801d93a:	4f54      	ldr	r7, [pc, #336]	@ (801da8c <_strtod_l+0x5cc>)
 801d93c:	6013      	str	r3, [r2, #0]
 801d93e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d940:	42b3      	cmp	r3, r6
 801d942:	d100      	bne.n	801d946 <_strtod_l+0x486>
 801d944:	e5f7      	b.n	801d536 <_strtod_l+0x76>
 801d946:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801d948:	9805      	ldr	r0, [sp, #20]
 801d94a:	f002 ff4d 	bl	80207e8 <_Bfree>
 801d94e:	9908      	ldr	r1, [sp, #32]
 801d950:	9805      	ldr	r0, [sp, #20]
 801d952:	f002 ff49 	bl	80207e8 <_Bfree>
 801d956:	9907      	ldr	r1, [sp, #28]
 801d958:	9805      	ldr	r0, [sp, #20]
 801d95a:	f002 ff45 	bl	80207e8 <_Bfree>
 801d95e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d960:	9805      	ldr	r0, [sp, #20]
 801d962:	f002 ff41 	bl	80207e8 <_Bfree>
 801d966:	9906      	ldr	r1, [sp, #24]
 801d968:	9805      	ldr	r0, [sp, #20]
 801d96a:	f002 ff3d 	bl	80207e8 <_Bfree>
 801d96e:	e5e2      	b.n	801d536 <_strtod_l+0x76>
 801d970:	2325      	movs	r3, #37	@ 0x25
 801d972:	9a06      	ldr	r2, [sp, #24]
 801d974:	1a9b      	subs	r3, r3, r2
 801d976:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d978:	4293      	cmp	r3, r2
 801d97a:	dbb8      	blt.n	801d8ee <_strtod_l+0x42e>
 801d97c:	240f      	movs	r4, #15
 801d97e:	9b06      	ldr	r3, [sp, #24]
 801d980:	4d46      	ldr	r5, [pc, #280]	@ (801da9c <_strtod_l+0x5dc>)
 801d982:	1ae4      	subs	r4, r4, r3
 801d984:	00e1      	lsls	r1, r4, #3
 801d986:	1869      	adds	r1, r5, r1
 801d988:	0032      	movs	r2, r6
 801d98a:	6808      	ldr	r0, [r1, #0]
 801d98c:	6849      	ldr	r1, [r1, #4]
 801d98e:	003b      	movs	r3, r7
 801d990:	f7e4 fe54 	bl	800263c <__aeabi_dmul>
 801d994:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d996:	1b1c      	subs	r4, r3, r4
 801d998:	00e4      	lsls	r4, r4, #3
 801d99a:	192d      	adds	r5, r5, r4
 801d99c:	682a      	ldr	r2, [r5, #0]
 801d99e:	686b      	ldr	r3, [r5, #4]
 801d9a0:	e789      	b.n	801d8b6 <_strtod_l+0x3f6>
 801d9a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d9a4:	3316      	adds	r3, #22
 801d9a6:	dba2      	blt.n	801d8ee <_strtod_l+0x42e>
 801d9a8:	9907      	ldr	r1, [sp, #28]
 801d9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d9ac:	4b3b      	ldr	r3, [pc, #236]	@ (801da9c <_strtod_l+0x5dc>)
 801d9ae:	1a52      	subs	r2, r2, r1
 801d9b0:	00d2      	lsls	r2, r2, #3
 801d9b2:	189b      	adds	r3, r3, r2
 801d9b4:	0030      	movs	r0, r6
 801d9b6:	681a      	ldr	r2, [r3, #0]
 801d9b8:	685b      	ldr	r3, [r3, #4]
 801d9ba:	0039      	movs	r1, r7
 801d9bc:	f7e4 f9fa 	bl	8001db4 <__aeabi_ddiv>
 801d9c0:	e750      	b.n	801d864 <_strtod_l+0x3a4>
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	0030      	movs	r0, r6
 801d9c6:	0039      	movs	r1, r7
 801d9c8:	4d35      	ldr	r5, [pc, #212]	@ (801daa0 <_strtod_l+0x5e0>)
 801d9ca:	1124      	asrs	r4, r4, #4
 801d9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9ce:	2c01      	cmp	r4, #1
 801d9d0:	dc1e      	bgt.n	801da10 <_strtod_l+0x550>
 801d9d2:	2b00      	cmp	r3, #0
 801d9d4:	d001      	beq.n	801d9da <_strtod_l+0x51a>
 801d9d6:	0006      	movs	r6, r0
 801d9d8:	000f      	movs	r7, r1
 801d9da:	4b32      	ldr	r3, [pc, #200]	@ (801daa4 <_strtod_l+0x5e4>)
 801d9dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d9de:	18ff      	adds	r7, r7, r3
 801d9e0:	4b2f      	ldr	r3, [pc, #188]	@ (801daa0 <_strtod_l+0x5e0>)
 801d9e2:	00d5      	lsls	r5, r2, #3
 801d9e4:	195d      	adds	r5, r3, r5
 801d9e6:	0032      	movs	r2, r6
 801d9e8:	6828      	ldr	r0, [r5, #0]
 801d9ea:	6869      	ldr	r1, [r5, #4]
 801d9ec:	003b      	movs	r3, r7
 801d9ee:	f7e4 fe25 	bl	800263c <__aeabi_dmul>
 801d9f2:	4b26      	ldr	r3, [pc, #152]	@ (801da8c <_strtod_l+0x5cc>)
 801d9f4:	4a2c      	ldr	r2, [pc, #176]	@ (801daa8 <_strtod_l+0x5e8>)
 801d9f6:	0006      	movs	r6, r0
 801d9f8:	400b      	ands	r3, r1
 801d9fa:	4293      	cmp	r3, r2
 801d9fc:	d895      	bhi.n	801d92a <_strtod_l+0x46a>
 801d9fe:	4a2b      	ldr	r2, [pc, #172]	@ (801daac <_strtod_l+0x5ec>)
 801da00:	4293      	cmp	r3, r2
 801da02:	d913      	bls.n	801da2c <_strtod_l+0x56c>
 801da04:	2601      	movs	r6, #1
 801da06:	4f2a      	ldr	r7, [pc, #168]	@ (801dab0 <_strtod_l+0x5f0>)
 801da08:	4276      	negs	r6, r6
 801da0a:	2300      	movs	r3, #0
 801da0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801da0e:	e086      	b.n	801db1e <_strtod_l+0x65e>
 801da10:	2201      	movs	r2, #1
 801da12:	4214      	tst	r4, r2
 801da14:	d004      	beq.n	801da20 <_strtod_l+0x560>
 801da16:	682a      	ldr	r2, [r5, #0]
 801da18:	686b      	ldr	r3, [r5, #4]
 801da1a:	f7e4 fe0f 	bl	800263c <__aeabi_dmul>
 801da1e:	2301      	movs	r3, #1
 801da20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801da22:	1064      	asrs	r4, r4, #1
 801da24:	3201      	adds	r2, #1
 801da26:	9209      	str	r2, [sp, #36]	@ 0x24
 801da28:	3508      	adds	r5, #8
 801da2a:	e7d0      	b.n	801d9ce <_strtod_l+0x50e>
 801da2c:	23d4      	movs	r3, #212	@ 0xd4
 801da2e:	049b      	lsls	r3, r3, #18
 801da30:	18cf      	adds	r7, r1, r3
 801da32:	e7ea      	b.n	801da0a <_strtod_l+0x54a>
 801da34:	2c00      	cmp	r4, #0
 801da36:	d0e8      	beq.n	801da0a <_strtod_l+0x54a>
 801da38:	4264      	negs	r4, r4
 801da3a:	230f      	movs	r3, #15
 801da3c:	0022      	movs	r2, r4
 801da3e:	401a      	ands	r2, r3
 801da40:	421c      	tst	r4, r3
 801da42:	d00a      	beq.n	801da5a <_strtod_l+0x59a>
 801da44:	4b15      	ldr	r3, [pc, #84]	@ (801da9c <_strtod_l+0x5dc>)
 801da46:	00d2      	lsls	r2, r2, #3
 801da48:	189b      	adds	r3, r3, r2
 801da4a:	0030      	movs	r0, r6
 801da4c:	681a      	ldr	r2, [r3, #0]
 801da4e:	685b      	ldr	r3, [r3, #4]
 801da50:	0039      	movs	r1, r7
 801da52:	f7e4 f9af 	bl	8001db4 <__aeabi_ddiv>
 801da56:	0006      	movs	r6, r0
 801da58:	000f      	movs	r7, r1
 801da5a:	1124      	asrs	r4, r4, #4
 801da5c:	d0d5      	beq.n	801da0a <_strtod_l+0x54a>
 801da5e:	2c1f      	cmp	r4, #31
 801da60:	dd28      	ble.n	801dab4 <_strtod_l+0x5f4>
 801da62:	2300      	movs	r3, #0
 801da64:	9306      	str	r3, [sp, #24]
 801da66:	9307      	str	r3, [sp, #28]
 801da68:	930d      	str	r3, [sp, #52]	@ 0x34
 801da6a:	9308      	str	r3, [sp, #32]
 801da6c:	2322      	movs	r3, #34	@ 0x22
 801da6e:	9a05      	ldr	r2, [sp, #20]
 801da70:	2600      	movs	r6, #0
 801da72:	6013      	str	r3, [r2, #0]
 801da74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801da76:	2700      	movs	r7, #0
 801da78:	2b00      	cmp	r3, #0
 801da7a:	d000      	beq.n	801da7e <_strtod_l+0x5be>
 801da7c:	e763      	b.n	801d946 <_strtod_l+0x486>
 801da7e:	e55a      	b.n	801d536 <_strtod_l+0x76>
 801da80:	00004e1f 	.word	0x00004e1f
 801da84:	08024346 	.word	0x08024346
 801da88:	080241e8 	.word	0x080241e8
 801da8c:	7ff00000 	.word	0x7ff00000
 801da90:	0802433e 	.word	0x0802433e
 801da94:	08024378 	.word	0x08024378
 801da98:	08024604 	.word	0x08024604
 801da9c:	080244f0 	.word	0x080244f0
 801daa0:	080244c8 	.word	0x080244c8
 801daa4:	fcb00000 	.word	0xfcb00000
 801daa8:	7ca00000 	.word	0x7ca00000
 801daac:	7c900000 	.word	0x7c900000
 801dab0:	7fefffff 	.word	0x7fefffff
 801dab4:	2310      	movs	r3, #16
 801dab6:	0022      	movs	r2, r4
 801dab8:	401a      	ands	r2, r3
 801daba:	9209      	str	r2, [sp, #36]	@ 0x24
 801dabc:	421c      	tst	r4, r3
 801dabe:	d001      	beq.n	801dac4 <_strtod_l+0x604>
 801dac0:	335a      	adds	r3, #90	@ 0x5a
 801dac2:	9309      	str	r3, [sp, #36]	@ 0x24
 801dac4:	0030      	movs	r0, r6
 801dac6:	0039      	movs	r1, r7
 801dac8:	2300      	movs	r3, #0
 801daca:	4dbf      	ldr	r5, [pc, #764]	@ (801ddc8 <_strtod_l+0x908>)
 801dacc:	2201      	movs	r2, #1
 801dace:	4214      	tst	r4, r2
 801dad0:	d004      	beq.n	801dadc <_strtod_l+0x61c>
 801dad2:	682a      	ldr	r2, [r5, #0]
 801dad4:	686b      	ldr	r3, [r5, #4]
 801dad6:	f7e4 fdb1 	bl	800263c <__aeabi_dmul>
 801dada:	2301      	movs	r3, #1
 801dadc:	1064      	asrs	r4, r4, #1
 801dade:	3508      	adds	r5, #8
 801dae0:	2c00      	cmp	r4, #0
 801dae2:	d1f3      	bne.n	801dacc <_strtod_l+0x60c>
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d001      	beq.n	801daec <_strtod_l+0x62c>
 801dae8:	0006      	movs	r6, r0
 801daea:	000f      	movs	r7, r1
 801daec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d00d      	beq.n	801db0e <_strtod_l+0x64e>
 801daf2:	236b      	movs	r3, #107	@ 0x6b
 801daf4:	007a      	lsls	r2, r7, #1
 801daf6:	0d52      	lsrs	r2, r2, #21
 801daf8:	0039      	movs	r1, r7
 801dafa:	1a9b      	subs	r3, r3, r2
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	dd06      	ble.n	801db0e <_strtod_l+0x64e>
 801db00:	2b1f      	cmp	r3, #31
 801db02:	dd5a      	ble.n	801dbba <_strtod_l+0x6fa>
 801db04:	2600      	movs	r6, #0
 801db06:	2b34      	cmp	r3, #52	@ 0x34
 801db08:	dd50      	ble.n	801dbac <_strtod_l+0x6ec>
 801db0a:	27dc      	movs	r7, #220	@ 0xdc
 801db0c:	04bf      	lsls	r7, r7, #18
 801db0e:	2200      	movs	r2, #0
 801db10:	2300      	movs	r3, #0
 801db12:	0030      	movs	r0, r6
 801db14:	0039      	movs	r1, r7
 801db16:	f7e2 fccb 	bl	80004b0 <__aeabi_dcmpeq>
 801db1a:	2800      	cmp	r0, #0
 801db1c:	d1a1      	bne.n	801da62 <_strtod_l+0x5a2>
 801db1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db20:	9a08      	ldr	r2, [sp, #32]
 801db22:	9300      	str	r3, [sp, #0]
 801db24:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801db26:	9b06      	ldr	r3, [sp, #24]
 801db28:	9805      	ldr	r0, [sp, #20]
 801db2a:	f002 fec5 	bl	80208b8 <__s2b>
 801db2e:	900d      	str	r0, [sp, #52]	@ 0x34
 801db30:	2800      	cmp	r0, #0
 801db32:	d100      	bne.n	801db36 <_strtod_l+0x676>
 801db34:	e6f9      	b.n	801d92a <_strtod_l+0x46a>
 801db36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db38:	9907      	ldr	r1, [sp, #28]
 801db3a:	17da      	asrs	r2, r3, #31
 801db3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801db3e:	1a5b      	subs	r3, r3, r1
 801db40:	401a      	ands	r2, r3
 801db42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801db44:	9217      	str	r2, [sp, #92]	@ 0x5c
 801db46:	43db      	mvns	r3, r3
 801db48:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801db4a:	17db      	asrs	r3, r3, #31
 801db4c:	401a      	ands	r2, r3
 801db4e:	2300      	movs	r3, #0
 801db50:	921a      	str	r2, [sp, #104]	@ 0x68
 801db52:	9306      	str	r3, [sp, #24]
 801db54:	9307      	str	r3, [sp, #28]
 801db56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db58:	9805      	ldr	r0, [sp, #20]
 801db5a:	6859      	ldr	r1, [r3, #4]
 801db5c:	f002 fe00 	bl	8020760 <_Balloc>
 801db60:	9008      	str	r0, [sp, #32]
 801db62:	2800      	cmp	r0, #0
 801db64:	d100      	bne.n	801db68 <_strtod_l+0x6a8>
 801db66:	e6e5      	b.n	801d934 <_strtod_l+0x474>
 801db68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801db6a:	300c      	adds	r0, #12
 801db6c:	0019      	movs	r1, r3
 801db6e:	691a      	ldr	r2, [r3, #16]
 801db70:	310c      	adds	r1, #12
 801db72:	3202      	adds	r2, #2
 801db74:	0092      	lsls	r2, r2, #2
 801db76:	f001 faef 	bl	801f158 <memcpy>
 801db7a:	ab20      	add	r3, sp, #128	@ 0x80
 801db7c:	9301      	str	r3, [sp, #4]
 801db7e:	ab1f      	add	r3, sp, #124	@ 0x7c
 801db80:	9300      	str	r3, [sp, #0]
 801db82:	0032      	movs	r2, r6
 801db84:	003b      	movs	r3, r7
 801db86:	9805      	ldr	r0, [sp, #20]
 801db88:	9610      	str	r6, [sp, #64]	@ 0x40
 801db8a:	9711      	str	r7, [sp, #68]	@ 0x44
 801db8c:	f003 f9e4 	bl	8020f58 <__d2b>
 801db90:	901e      	str	r0, [sp, #120]	@ 0x78
 801db92:	2800      	cmp	r0, #0
 801db94:	d100      	bne.n	801db98 <_strtod_l+0x6d8>
 801db96:	e6cd      	b.n	801d934 <_strtod_l+0x474>
 801db98:	2101      	movs	r1, #1
 801db9a:	9805      	ldr	r0, [sp, #20]
 801db9c:	f002 ff28 	bl	80209f0 <__i2b>
 801dba0:	9007      	str	r0, [sp, #28]
 801dba2:	2800      	cmp	r0, #0
 801dba4:	d10e      	bne.n	801dbc4 <_strtod_l+0x704>
 801dba6:	2300      	movs	r3, #0
 801dba8:	9307      	str	r3, [sp, #28]
 801dbaa:	e6c3      	b.n	801d934 <_strtod_l+0x474>
 801dbac:	234b      	movs	r3, #75	@ 0x4b
 801dbae:	1a9a      	subs	r2, r3, r2
 801dbb0:	3b4c      	subs	r3, #76	@ 0x4c
 801dbb2:	4093      	lsls	r3, r2
 801dbb4:	4019      	ands	r1, r3
 801dbb6:	000f      	movs	r7, r1
 801dbb8:	e7a9      	b.n	801db0e <_strtod_l+0x64e>
 801dbba:	2201      	movs	r2, #1
 801dbbc:	4252      	negs	r2, r2
 801dbbe:	409a      	lsls	r2, r3
 801dbc0:	4016      	ands	r6, r2
 801dbc2:	e7a4      	b.n	801db0e <_strtod_l+0x64e>
 801dbc4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801dbc6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dbc8:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801dbca:	1ad4      	subs	r4, r2, r3
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	db01      	blt.n	801dbd4 <_strtod_l+0x714>
 801dbd0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801dbd2:	195d      	adds	r5, r3, r5
 801dbd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801dbd6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801dbd8:	1a5b      	subs	r3, r3, r1
 801dbda:	2136      	movs	r1, #54	@ 0x36
 801dbdc:	189b      	adds	r3, r3, r2
 801dbde:	1a8a      	subs	r2, r1, r2
 801dbe0:	497a      	ldr	r1, [pc, #488]	@ (801ddcc <_strtod_l+0x90c>)
 801dbe2:	2001      	movs	r0, #1
 801dbe4:	468c      	mov	ip, r1
 801dbe6:	2100      	movs	r1, #0
 801dbe8:	3b01      	subs	r3, #1
 801dbea:	9116      	str	r1, [sp, #88]	@ 0x58
 801dbec:	9014      	str	r0, [sp, #80]	@ 0x50
 801dbee:	4563      	cmp	r3, ip
 801dbf0:	da06      	bge.n	801dc00 <_strtod_l+0x740>
 801dbf2:	4661      	mov	r1, ip
 801dbf4:	1ac9      	subs	r1, r1, r3
 801dbf6:	1a52      	subs	r2, r2, r1
 801dbf8:	291f      	cmp	r1, #31
 801dbfa:	dc3f      	bgt.n	801dc7c <_strtod_l+0x7bc>
 801dbfc:	4088      	lsls	r0, r1
 801dbfe:	9014      	str	r0, [sp, #80]	@ 0x50
 801dc00:	18ab      	adds	r3, r5, r2
 801dc02:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc04:	18a4      	adds	r4, r4, r2
 801dc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc0a:	191c      	adds	r4, r3, r4
 801dc0c:	002b      	movs	r3, r5
 801dc0e:	4295      	cmp	r5, r2
 801dc10:	dd00      	ble.n	801dc14 <_strtod_l+0x754>
 801dc12:	0013      	movs	r3, r2
 801dc14:	42a3      	cmp	r3, r4
 801dc16:	dd00      	ble.n	801dc1a <_strtod_l+0x75a>
 801dc18:	0023      	movs	r3, r4
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	dd04      	ble.n	801dc28 <_strtod_l+0x768>
 801dc1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc20:	1ae4      	subs	r4, r4, r3
 801dc22:	1ad2      	subs	r2, r2, r3
 801dc24:	920e      	str	r2, [sp, #56]	@ 0x38
 801dc26:	1aed      	subs	r5, r5, r3
 801dc28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801dc2a:	2b00      	cmp	r3, #0
 801dc2c:	dd16      	ble.n	801dc5c <_strtod_l+0x79c>
 801dc2e:	001a      	movs	r2, r3
 801dc30:	9907      	ldr	r1, [sp, #28]
 801dc32:	9805      	ldr	r0, [sp, #20]
 801dc34:	f002 ffa6 	bl	8020b84 <__pow5mult>
 801dc38:	9007      	str	r0, [sp, #28]
 801dc3a:	2800      	cmp	r0, #0
 801dc3c:	d0b3      	beq.n	801dba6 <_strtod_l+0x6e6>
 801dc3e:	0001      	movs	r1, r0
 801dc40:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801dc42:	9805      	ldr	r0, [sp, #20]
 801dc44:	f002 feec 	bl	8020a20 <__multiply>
 801dc48:	9013      	str	r0, [sp, #76]	@ 0x4c
 801dc4a:	2800      	cmp	r0, #0
 801dc4c:	d100      	bne.n	801dc50 <_strtod_l+0x790>
 801dc4e:	e671      	b.n	801d934 <_strtod_l+0x474>
 801dc50:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dc52:	9805      	ldr	r0, [sp, #20]
 801dc54:	f002 fdc8 	bl	80207e8 <_Bfree>
 801dc58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dc5a:	931e      	str	r3, [sp, #120]	@ 0x78
 801dc5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dc5e:	2b00      	cmp	r3, #0
 801dc60:	dc12      	bgt.n	801dc88 <_strtod_l+0x7c8>
 801dc62:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	dd18      	ble.n	801dc9a <_strtod_l+0x7da>
 801dc68:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801dc6a:	9908      	ldr	r1, [sp, #32]
 801dc6c:	9805      	ldr	r0, [sp, #20]
 801dc6e:	f002 ff89 	bl	8020b84 <__pow5mult>
 801dc72:	9008      	str	r0, [sp, #32]
 801dc74:	2800      	cmp	r0, #0
 801dc76:	d110      	bne.n	801dc9a <_strtod_l+0x7da>
 801dc78:	2300      	movs	r3, #0
 801dc7a:	e65a      	b.n	801d932 <_strtod_l+0x472>
 801dc7c:	4954      	ldr	r1, [pc, #336]	@ (801ddd0 <_strtod_l+0x910>)
 801dc7e:	1acb      	subs	r3, r1, r3
 801dc80:	0001      	movs	r1, r0
 801dc82:	4099      	lsls	r1, r3
 801dc84:	9116      	str	r1, [sp, #88]	@ 0x58
 801dc86:	e7ba      	b.n	801dbfe <_strtod_l+0x73e>
 801dc88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc8a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dc8c:	9805      	ldr	r0, [sp, #20]
 801dc8e:	f002 ffd5 	bl	8020c3c <__lshift>
 801dc92:	901e      	str	r0, [sp, #120]	@ 0x78
 801dc94:	2800      	cmp	r0, #0
 801dc96:	d1e4      	bne.n	801dc62 <_strtod_l+0x7a2>
 801dc98:	e64c      	b.n	801d934 <_strtod_l+0x474>
 801dc9a:	2c00      	cmp	r4, #0
 801dc9c:	dd07      	ble.n	801dcae <_strtod_l+0x7ee>
 801dc9e:	0022      	movs	r2, r4
 801dca0:	9908      	ldr	r1, [sp, #32]
 801dca2:	9805      	ldr	r0, [sp, #20]
 801dca4:	f002 ffca 	bl	8020c3c <__lshift>
 801dca8:	9008      	str	r0, [sp, #32]
 801dcaa:	2800      	cmp	r0, #0
 801dcac:	d0e4      	beq.n	801dc78 <_strtod_l+0x7b8>
 801dcae:	2d00      	cmp	r5, #0
 801dcb0:	dd08      	ble.n	801dcc4 <_strtod_l+0x804>
 801dcb2:	002a      	movs	r2, r5
 801dcb4:	9907      	ldr	r1, [sp, #28]
 801dcb6:	9805      	ldr	r0, [sp, #20]
 801dcb8:	f002 ffc0 	bl	8020c3c <__lshift>
 801dcbc:	9007      	str	r0, [sp, #28]
 801dcbe:	2800      	cmp	r0, #0
 801dcc0:	d100      	bne.n	801dcc4 <_strtod_l+0x804>
 801dcc2:	e637      	b.n	801d934 <_strtod_l+0x474>
 801dcc4:	9a08      	ldr	r2, [sp, #32]
 801dcc6:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801dcc8:	9805      	ldr	r0, [sp, #20]
 801dcca:	f003 f83f 	bl	8020d4c <__mdiff>
 801dcce:	9006      	str	r0, [sp, #24]
 801dcd0:	2800      	cmp	r0, #0
 801dcd2:	d100      	bne.n	801dcd6 <_strtod_l+0x816>
 801dcd4:	e62e      	b.n	801d934 <_strtod_l+0x474>
 801dcd6:	68c3      	ldr	r3, [r0, #12]
 801dcd8:	9907      	ldr	r1, [sp, #28]
 801dcda:	9313      	str	r3, [sp, #76]	@ 0x4c
 801dcdc:	2300      	movs	r3, #0
 801dcde:	60c3      	str	r3, [r0, #12]
 801dce0:	f003 f818 	bl	8020d14 <__mcmp>
 801dce4:	2800      	cmp	r0, #0
 801dce6:	da3b      	bge.n	801dd60 <_strtod_l+0x8a0>
 801dce8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dcea:	4333      	orrs	r3, r6
 801dcec:	d167      	bne.n	801ddbe <_strtod_l+0x8fe>
 801dcee:	033b      	lsls	r3, r7, #12
 801dcf0:	d165      	bne.n	801ddbe <_strtod_l+0x8fe>
 801dcf2:	22d6      	movs	r2, #214	@ 0xd6
 801dcf4:	4b37      	ldr	r3, [pc, #220]	@ (801ddd4 <_strtod_l+0x914>)
 801dcf6:	04d2      	lsls	r2, r2, #19
 801dcf8:	403b      	ands	r3, r7
 801dcfa:	4293      	cmp	r3, r2
 801dcfc:	d95f      	bls.n	801ddbe <_strtod_l+0x8fe>
 801dcfe:	9b06      	ldr	r3, [sp, #24]
 801dd00:	695b      	ldr	r3, [r3, #20]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d103      	bne.n	801dd0e <_strtod_l+0x84e>
 801dd06:	9b06      	ldr	r3, [sp, #24]
 801dd08:	691b      	ldr	r3, [r3, #16]
 801dd0a:	2b01      	cmp	r3, #1
 801dd0c:	dd57      	ble.n	801ddbe <_strtod_l+0x8fe>
 801dd0e:	9906      	ldr	r1, [sp, #24]
 801dd10:	2201      	movs	r2, #1
 801dd12:	9805      	ldr	r0, [sp, #20]
 801dd14:	f002 ff92 	bl	8020c3c <__lshift>
 801dd18:	9907      	ldr	r1, [sp, #28]
 801dd1a:	9006      	str	r0, [sp, #24]
 801dd1c:	f002 fffa 	bl	8020d14 <__mcmp>
 801dd20:	2800      	cmp	r0, #0
 801dd22:	dd4c      	ble.n	801ddbe <_strtod_l+0x8fe>
 801dd24:	4b2b      	ldr	r3, [pc, #172]	@ (801ddd4 <_strtod_l+0x914>)
 801dd26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dd28:	403b      	ands	r3, r7
 801dd2a:	2a00      	cmp	r2, #0
 801dd2c:	d074      	beq.n	801de18 <_strtod_l+0x958>
 801dd2e:	22d6      	movs	r2, #214	@ 0xd6
 801dd30:	04d2      	lsls	r2, r2, #19
 801dd32:	4293      	cmp	r3, r2
 801dd34:	d870      	bhi.n	801de18 <_strtod_l+0x958>
 801dd36:	22dc      	movs	r2, #220	@ 0xdc
 801dd38:	0492      	lsls	r2, r2, #18
 801dd3a:	4293      	cmp	r3, r2
 801dd3c:	d800      	bhi.n	801dd40 <_strtod_l+0x880>
 801dd3e:	e695      	b.n	801da6c <_strtod_l+0x5ac>
 801dd40:	0030      	movs	r0, r6
 801dd42:	0039      	movs	r1, r7
 801dd44:	4b24      	ldr	r3, [pc, #144]	@ (801ddd8 <_strtod_l+0x918>)
 801dd46:	2200      	movs	r2, #0
 801dd48:	f7e4 fc78 	bl	800263c <__aeabi_dmul>
 801dd4c:	4b21      	ldr	r3, [pc, #132]	@ (801ddd4 <_strtod_l+0x914>)
 801dd4e:	0006      	movs	r6, r0
 801dd50:	000f      	movs	r7, r1
 801dd52:	420b      	tst	r3, r1
 801dd54:	d000      	beq.n	801dd58 <_strtod_l+0x898>
 801dd56:	e5f6      	b.n	801d946 <_strtod_l+0x486>
 801dd58:	2322      	movs	r3, #34	@ 0x22
 801dd5a:	9a05      	ldr	r2, [sp, #20]
 801dd5c:	6013      	str	r3, [r2, #0]
 801dd5e:	e5f2      	b.n	801d946 <_strtod_l+0x486>
 801dd60:	970e      	str	r7, [sp, #56]	@ 0x38
 801dd62:	2800      	cmp	r0, #0
 801dd64:	d175      	bne.n	801de52 <_strtod_l+0x992>
 801dd66:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801dd68:	033b      	lsls	r3, r7, #12
 801dd6a:	0b1b      	lsrs	r3, r3, #12
 801dd6c:	2a00      	cmp	r2, #0
 801dd6e:	d039      	beq.n	801dde4 <_strtod_l+0x924>
 801dd70:	4a1a      	ldr	r2, [pc, #104]	@ (801dddc <_strtod_l+0x91c>)
 801dd72:	4293      	cmp	r3, r2
 801dd74:	d138      	bne.n	801dde8 <_strtod_l+0x928>
 801dd76:	2101      	movs	r1, #1
 801dd78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd7a:	4249      	negs	r1, r1
 801dd7c:	0032      	movs	r2, r6
 801dd7e:	0008      	movs	r0, r1
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d00b      	beq.n	801dd9c <_strtod_l+0x8dc>
 801dd84:	24d4      	movs	r4, #212	@ 0xd4
 801dd86:	4b13      	ldr	r3, [pc, #76]	@ (801ddd4 <_strtod_l+0x914>)
 801dd88:	0008      	movs	r0, r1
 801dd8a:	403b      	ands	r3, r7
 801dd8c:	04e4      	lsls	r4, r4, #19
 801dd8e:	42a3      	cmp	r3, r4
 801dd90:	d804      	bhi.n	801dd9c <_strtod_l+0x8dc>
 801dd92:	306c      	adds	r0, #108	@ 0x6c
 801dd94:	0d1b      	lsrs	r3, r3, #20
 801dd96:	1ac3      	subs	r3, r0, r3
 801dd98:	4099      	lsls	r1, r3
 801dd9a:	0008      	movs	r0, r1
 801dd9c:	4282      	cmp	r2, r0
 801dd9e:	d123      	bne.n	801dde8 <_strtod_l+0x928>
 801dda0:	4b0f      	ldr	r3, [pc, #60]	@ (801dde0 <_strtod_l+0x920>)
 801dda2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801dda4:	4299      	cmp	r1, r3
 801dda6:	d102      	bne.n	801ddae <_strtod_l+0x8ee>
 801dda8:	3201      	adds	r2, #1
 801ddaa:	d100      	bne.n	801ddae <_strtod_l+0x8ee>
 801ddac:	e5c2      	b.n	801d934 <_strtod_l+0x474>
 801ddae:	4b09      	ldr	r3, [pc, #36]	@ (801ddd4 <_strtod_l+0x914>)
 801ddb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ddb2:	2600      	movs	r6, #0
 801ddb4:	401a      	ands	r2, r3
 801ddb6:	0013      	movs	r3, r2
 801ddb8:	2280      	movs	r2, #128	@ 0x80
 801ddba:	0352      	lsls	r2, r2, #13
 801ddbc:	189f      	adds	r7, r3, r2
 801ddbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ddc0:	2b00      	cmp	r3, #0
 801ddc2:	d1bd      	bne.n	801dd40 <_strtod_l+0x880>
 801ddc4:	e5bf      	b.n	801d946 <_strtod_l+0x486>
 801ddc6:	46c0      	nop			@ (mov r8, r8)
 801ddc8:	08024210 	.word	0x08024210
 801ddcc:	fffffc02 	.word	0xfffffc02
 801ddd0:	fffffbe2 	.word	0xfffffbe2
 801ddd4:	7ff00000 	.word	0x7ff00000
 801ddd8:	39500000 	.word	0x39500000
 801dddc:	000fffff 	.word	0x000fffff
 801dde0:	7fefffff 	.word	0x7fefffff
 801dde4:	4333      	orrs	r3, r6
 801dde6:	d09d      	beq.n	801dd24 <_strtod_l+0x864>
 801dde8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d01c      	beq.n	801de28 <_strtod_l+0x968>
 801ddee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ddf0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ddf2:	4213      	tst	r3, r2
 801ddf4:	d0e3      	beq.n	801ddbe <_strtod_l+0x8fe>
 801ddf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ddf8:	0030      	movs	r0, r6
 801ddfa:	0039      	movs	r1, r7
 801ddfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d016      	beq.n	801de30 <_strtod_l+0x970>
 801de02:	f7ff fb45 	bl	801d490 <sulp>
 801de06:	0002      	movs	r2, r0
 801de08:	000b      	movs	r3, r1
 801de0a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801de0c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801de0e:	f7e3 fc6d 	bl	80016ec <__aeabi_dadd>
 801de12:	0006      	movs	r6, r0
 801de14:	000f      	movs	r7, r1
 801de16:	e7d2      	b.n	801ddbe <_strtod_l+0x8fe>
 801de18:	2601      	movs	r6, #1
 801de1a:	4a92      	ldr	r2, [pc, #584]	@ (801e064 <_strtod_l+0xba4>)
 801de1c:	4276      	negs	r6, r6
 801de1e:	189b      	adds	r3, r3, r2
 801de20:	4a91      	ldr	r2, [pc, #580]	@ (801e068 <_strtod_l+0xba8>)
 801de22:	431a      	orrs	r2, r3
 801de24:	0017      	movs	r7, r2
 801de26:	e7ca      	b.n	801ddbe <_strtod_l+0x8fe>
 801de28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801de2a:	4233      	tst	r3, r6
 801de2c:	d0c7      	beq.n	801ddbe <_strtod_l+0x8fe>
 801de2e:	e7e2      	b.n	801ddf6 <_strtod_l+0x936>
 801de30:	f7ff fb2e 	bl	801d490 <sulp>
 801de34:	0002      	movs	r2, r0
 801de36:	000b      	movs	r3, r1
 801de38:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801de3a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801de3c:	f7e4 fec6 	bl	8002bcc <__aeabi_dsub>
 801de40:	2200      	movs	r2, #0
 801de42:	2300      	movs	r3, #0
 801de44:	0006      	movs	r6, r0
 801de46:	000f      	movs	r7, r1
 801de48:	f7e2 fb32 	bl	80004b0 <__aeabi_dcmpeq>
 801de4c:	2800      	cmp	r0, #0
 801de4e:	d0b6      	beq.n	801ddbe <_strtod_l+0x8fe>
 801de50:	e60c      	b.n	801da6c <_strtod_l+0x5ac>
 801de52:	9907      	ldr	r1, [sp, #28]
 801de54:	9806      	ldr	r0, [sp, #24]
 801de56:	f003 f8df 	bl	8021018 <__ratio>
 801de5a:	2380      	movs	r3, #128	@ 0x80
 801de5c:	2200      	movs	r2, #0
 801de5e:	05db      	lsls	r3, r3, #23
 801de60:	0004      	movs	r4, r0
 801de62:	000d      	movs	r5, r1
 801de64:	f7e2 fb34 	bl	80004d0 <__aeabi_dcmple>
 801de68:	2800      	cmp	r0, #0
 801de6a:	d06c      	beq.n	801df46 <_strtod_l+0xa86>
 801de6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d177      	bne.n	801df62 <_strtod_l+0xaa2>
 801de72:	2e00      	cmp	r6, #0
 801de74:	d157      	bne.n	801df26 <_strtod_l+0xa66>
 801de76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de78:	031b      	lsls	r3, r3, #12
 801de7a:	d15a      	bne.n	801df32 <_strtod_l+0xa72>
 801de7c:	2200      	movs	r2, #0
 801de7e:	0020      	movs	r0, r4
 801de80:	0029      	movs	r1, r5
 801de82:	4b7a      	ldr	r3, [pc, #488]	@ (801e06c <_strtod_l+0xbac>)
 801de84:	f7e2 fb1a 	bl	80004bc <__aeabi_dcmplt>
 801de88:	2800      	cmp	r0, #0
 801de8a:	d159      	bne.n	801df40 <_strtod_l+0xa80>
 801de8c:	0020      	movs	r0, r4
 801de8e:	0029      	movs	r1, r5
 801de90:	2200      	movs	r2, #0
 801de92:	4b77      	ldr	r3, [pc, #476]	@ (801e070 <_strtod_l+0xbb0>)
 801de94:	f7e4 fbd2 	bl	800263c <__aeabi_dmul>
 801de98:	0004      	movs	r4, r0
 801de9a:	000d      	movs	r5, r1
 801de9c:	2380      	movs	r3, #128	@ 0x80
 801de9e:	061b      	lsls	r3, r3, #24
 801dea0:	18eb      	adds	r3, r5, r3
 801dea2:	940a      	str	r4, [sp, #40]	@ 0x28
 801dea4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dea6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801dea8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801deaa:	9214      	str	r2, [sp, #80]	@ 0x50
 801deac:	9315      	str	r3, [sp, #84]	@ 0x54
 801deae:	4a71      	ldr	r2, [pc, #452]	@ (801e074 <_strtod_l+0xbb4>)
 801deb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801deb2:	4013      	ands	r3, r2
 801deb4:	9316      	str	r3, [sp, #88]	@ 0x58
 801deb6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801deb8:	4b6f      	ldr	r3, [pc, #444]	@ (801e078 <_strtod_l+0xbb8>)
 801deba:	429a      	cmp	r2, r3
 801debc:	d000      	beq.n	801dec0 <_strtod_l+0xa00>
 801debe:	e087      	b.n	801dfd0 <_strtod_l+0xb10>
 801dec0:	4a6e      	ldr	r2, [pc, #440]	@ (801e07c <_strtod_l+0xbbc>)
 801dec2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dec4:	4694      	mov	ip, r2
 801dec6:	4463      	add	r3, ip
 801dec8:	001f      	movs	r7, r3
 801deca:	0030      	movs	r0, r6
 801decc:	0019      	movs	r1, r3
 801dece:	f002 ffd7 	bl	8020e80 <__ulp>
 801ded2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ded4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ded6:	f7e4 fbb1 	bl	800263c <__aeabi_dmul>
 801deda:	0032      	movs	r2, r6
 801dedc:	003b      	movs	r3, r7
 801dede:	f7e3 fc05 	bl	80016ec <__aeabi_dadd>
 801dee2:	4a64      	ldr	r2, [pc, #400]	@ (801e074 <_strtod_l+0xbb4>)
 801dee4:	4b66      	ldr	r3, [pc, #408]	@ (801e080 <_strtod_l+0xbc0>)
 801dee6:	0006      	movs	r6, r0
 801dee8:	400a      	ands	r2, r1
 801deea:	429a      	cmp	r2, r3
 801deec:	d940      	bls.n	801df70 <_strtod_l+0xab0>
 801deee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801def0:	4a64      	ldr	r2, [pc, #400]	@ (801e084 <_strtod_l+0xbc4>)
 801def2:	4293      	cmp	r3, r2
 801def4:	d103      	bne.n	801defe <_strtod_l+0xa3e>
 801def6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801def8:	3301      	adds	r3, #1
 801defa:	d100      	bne.n	801defe <_strtod_l+0xa3e>
 801defc:	e51a      	b.n	801d934 <_strtod_l+0x474>
 801defe:	2601      	movs	r6, #1
 801df00:	4f60      	ldr	r7, [pc, #384]	@ (801e084 <_strtod_l+0xbc4>)
 801df02:	4276      	negs	r6, r6
 801df04:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801df06:	9805      	ldr	r0, [sp, #20]
 801df08:	f002 fc6e 	bl	80207e8 <_Bfree>
 801df0c:	9908      	ldr	r1, [sp, #32]
 801df0e:	9805      	ldr	r0, [sp, #20]
 801df10:	f002 fc6a 	bl	80207e8 <_Bfree>
 801df14:	9907      	ldr	r1, [sp, #28]
 801df16:	9805      	ldr	r0, [sp, #20]
 801df18:	f002 fc66 	bl	80207e8 <_Bfree>
 801df1c:	9906      	ldr	r1, [sp, #24]
 801df1e:	9805      	ldr	r0, [sp, #20]
 801df20:	f002 fc62 	bl	80207e8 <_Bfree>
 801df24:	e617      	b.n	801db56 <_strtod_l+0x696>
 801df26:	2e01      	cmp	r6, #1
 801df28:	d103      	bne.n	801df32 <_strtod_l+0xa72>
 801df2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801df2c:	2b00      	cmp	r3, #0
 801df2e:	d100      	bne.n	801df32 <_strtod_l+0xa72>
 801df30:	e59c      	b.n	801da6c <_strtod_l+0x5ac>
 801df32:	2300      	movs	r3, #0
 801df34:	4c54      	ldr	r4, [pc, #336]	@ (801e088 <_strtod_l+0xbc8>)
 801df36:	4d4d      	ldr	r5, [pc, #308]	@ (801e06c <_strtod_l+0xbac>)
 801df38:	930a      	str	r3, [sp, #40]	@ 0x28
 801df3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801df3c:	2400      	movs	r4, #0
 801df3e:	e7b2      	b.n	801dea6 <_strtod_l+0x9e6>
 801df40:	2400      	movs	r4, #0
 801df42:	4d4b      	ldr	r5, [pc, #300]	@ (801e070 <_strtod_l+0xbb0>)
 801df44:	e7aa      	b.n	801de9c <_strtod_l+0x9dc>
 801df46:	0020      	movs	r0, r4
 801df48:	0029      	movs	r1, r5
 801df4a:	4b49      	ldr	r3, [pc, #292]	@ (801e070 <_strtod_l+0xbb0>)
 801df4c:	2200      	movs	r2, #0
 801df4e:	f7e4 fb75 	bl	800263c <__aeabi_dmul>
 801df52:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801df54:	0004      	movs	r4, r0
 801df56:	000d      	movs	r5, r1
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d09f      	beq.n	801de9c <_strtod_l+0x9dc>
 801df5c:	940a      	str	r4, [sp, #40]	@ 0x28
 801df5e:	950b      	str	r5, [sp, #44]	@ 0x2c
 801df60:	e7a1      	b.n	801dea6 <_strtod_l+0x9e6>
 801df62:	2300      	movs	r3, #0
 801df64:	4c41      	ldr	r4, [pc, #260]	@ (801e06c <_strtod_l+0xbac>)
 801df66:	0025      	movs	r5, r4
 801df68:	930a      	str	r3, [sp, #40]	@ 0x28
 801df6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801df6c:	001c      	movs	r4, r3
 801df6e:	e79a      	b.n	801dea6 <_strtod_l+0x9e6>
 801df70:	23d4      	movs	r3, #212	@ 0xd4
 801df72:	049b      	lsls	r3, r3, #18
 801df74:	18cf      	adds	r7, r1, r3
 801df76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df78:	9710      	str	r7, [sp, #64]	@ 0x40
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d1c2      	bne.n	801df04 <_strtod_l+0xa44>
 801df7e:	4b3d      	ldr	r3, [pc, #244]	@ (801e074 <_strtod_l+0xbb4>)
 801df80:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801df82:	403b      	ands	r3, r7
 801df84:	429a      	cmp	r2, r3
 801df86:	d1bd      	bne.n	801df04 <_strtod_l+0xa44>
 801df88:	0020      	movs	r0, r4
 801df8a:	0029      	movs	r1, r5
 801df8c:	f7e2 fb7c 	bl	8000688 <__aeabi_d2lz>
 801df90:	f7e2 fbb4 	bl	80006fc <__aeabi_l2d>
 801df94:	0002      	movs	r2, r0
 801df96:	000b      	movs	r3, r1
 801df98:	0020      	movs	r0, r4
 801df9a:	0029      	movs	r1, r5
 801df9c:	f7e4 fe16 	bl	8002bcc <__aeabi_dsub>
 801dfa0:	033c      	lsls	r4, r7, #12
 801dfa2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801dfa4:	0b24      	lsrs	r4, r4, #12
 801dfa6:	4334      	orrs	r4, r6
 801dfa8:	900e      	str	r0, [sp, #56]	@ 0x38
 801dfaa:	910f      	str	r1, [sp, #60]	@ 0x3c
 801dfac:	4a37      	ldr	r2, [pc, #220]	@ (801e08c <_strtod_l+0xbcc>)
 801dfae:	431c      	orrs	r4, r3
 801dfb0:	d052      	beq.n	801e058 <_strtod_l+0xb98>
 801dfb2:	4b37      	ldr	r3, [pc, #220]	@ (801e090 <_strtod_l+0xbd0>)
 801dfb4:	f7e2 fa82 	bl	80004bc <__aeabi_dcmplt>
 801dfb8:	2800      	cmp	r0, #0
 801dfba:	d000      	beq.n	801dfbe <_strtod_l+0xafe>
 801dfbc:	e4c3      	b.n	801d946 <_strtod_l+0x486>
 801dfbe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801dfc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801dfc2:	4a34      	ldr	r2, [pc, #208]	@ (801e094 <_strtod_l+0xbd4>)
 801dfc4:	4b2a      	ldr	r3, [pc, #168]	@ (801e070 <_strtod_l+0xbb0>)
 801dfc6:	f7e2 fa8d 	bl	80004e4 <__aeabi_dcmpgt>
 801dfca:	2800      	cmp	r0, #0
 801dfcc:	d09a      	beq.n	801df04 <_strtod_l+0xa44>
 801dfce:	e4ba      	b.n	801d946 <_strtod_l+0x486>
 801dfd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d02a      	beq.n	801e02c <_strtod_l+0xb6c>
 801dfd6:	23d4      	movs	r3, #212	@ 0xd4
 801dfd8:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dfda:	04db      	lsls	r3, r3, #19
 801dfdc:	429a      	cmp	r2, r3
 801dfde:	d825      	bhi.n	801e02c <_strtod_l+0xb6c>
 801dfe0:	0020      	movs	r0, r4
 801dfe2:	0029      	movs	r1, r5
 801dfe4:	4a2c      	ldr	r2, [pc, #176]	@ (801e098 <_strtod_l+0xbd8>)
 801dfe6:	4b2d      	ldr	r3, [pc, #180]	@ (801e09c <_strtod_l+0xbdc>)
 801dfe8:	f7e2 fa72 	bl	80004d0 <__aeabi_dcmple>
 801dfec:	2800      	cmp	r0, #0
 801dfee:	d016      	beq.n	801e01e <_strtod_l+0xb5e>
 801dff0:	0020      	movs	r0, r4
 801dff2:	0029      	movs	r1, r5
 801dff4:	f7e2 fb2a 	bl	800064c <__aeabi_d2uiz>
 801dff8:	2800      	cmp	r0, #0
 801dffa:	d100      	bne.n	801dffe <_strtod_l+0xb3e>
 801dffc:	3001      	adds	r0, #1
 801dffe:	f7e5 fa0d 	bl	800341c <__aeabi_ui2d>
 801e002:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e004:	0004      	movs	r4, r0
 801e006:	000d      	movs	r5, r1
 801e008:	2b00      	cmp	r3, #0
 801e00a:	d122      	bne.n	801e052 <_strtod_l+0xb92>
 801e00c:	2380      	movs	r3, #128	@ 0x80
 801e00e:	061b      	lsls	r3, r3, #24
 801e010:	18cb      	adds	r3, r1, r3
 801e012:	9018      	str	r0, [sp, #96]	@ 0x60
 801e014:	9319      	str	r3, [sp, #100]	@ 0x64
 801e016:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801e018:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e01a:	9214      	str	r2, [sp, #80]	@ 0x50
 801e01c:	9315      	str	r3, [sp, #84]	@ 0x54
 801e01e:	22d6      	movs	r2, #214	@ 0xd6
 801e020:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e022:	04d2      	lsls	r2, r2, #19
 801e024:	189b      	adds	r3, r3, r2
 801e026:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e028:	1a9b      	subs	r3, r3, r2
 801e02a:	9315      	str	r3, [sp, #84]	@ 0x54
 801e02c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e02e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e030:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e032:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801e034:	f002 ff24 	bl	8020e80 <__ulp>
 801e038:	0002      	movs	r2, r0
 801e03a:	000b      	movs	r3, r1
 801e03c:	0030      	movs	r0, r6
 801e03e:	0039      	movs	r1, r7
 801e040:	f7e4 fafc 	bl	800263c <__aeabi_dmul>
 801e044:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e046:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e048:	f7e3 fb50 	bl	80016ec <__aeabi_dadd>
 801e04c:	0006      	movs	r6, r0
 801e04e:	000f      	movs	r7, r1
 801e050:	e791      	b.n	801df76 <_strtod_l+0xab6>
 801e052:	9418      	str	r4, [sp, #96]	@ 0x60
 801e054:	9519      	str	r5, [sp, #100]	@ 0x64
 801e056:	e7de      	b.n	801e016 <_strtod_l+0xb56>
 801e058:	4b11      	ldr	r3, [pc, #68]	@ (801e0a0 <_strtod_l+0xbe0>)
 801e05a:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801e05c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801e05e:	f7e2 fa2d 	bl	80004bc <__aeabi_dcmplt>
 801e062:	e7b2      	b.n	801dfca <_strtod_l+0xb0a>
 801e064:	fff00000 	.word	0xfff00000
 801e068:	000fffff 	.word	0x000fffff
 801e06c:	3ff00000 	.word	0x3ff00000
 801e070:	3fe00000 	.word	0x3fe00000
 801e074:	7ff00000 	.word	0x7ff00000
 801e078:	7fe00000 	.word	0x7fe00000
 801e07c:	fcb00000 	.word	0xfcb00000
 801e080:	7c9fffff 	.word	0x7c9fffff
 801e084:	7fefffff 	.word	0x7fefffff
 801e088:	bff00000 	.word	0xbff00000
 801e08c:	94a03595 	.word	0x94a03595
 801e090:	3fdfffff 	.word	0x3fdfffff
 801e094:	35afe535 	.word	0x35afe535
 801e098:	ffc00000 	.word	0xffc00000
 801e09c:	41dfffff 	.word	0x41dfffff
 801e0a0:	3fcfffff 	.word	0x3fcfffff

0801e0a4 <strtod>:
 801e0a4:	b510      	push	{r4, lr}
 801e0a6:	4c04      	ldr	r4, [pc, #16]	@ (801e0b8 <strtod+0x14>)
 801e0a8:	000a      	movs	r2, r1
 801e0aa:	0001      	movs	r1, r0
 801e0ac:	4b03      	ldr	r3, [pc, #12]	@ (801e0bc <strtod+0x18>)
 801e0ae:	6820      	ldr	r0, [r4, #0]
 801e0b0:	f7ff fa06 	bl	801d4c0 <_strtod_l>
 801e0b4:	bd10      	pop	{r4, pc}
 801e0b6:	46c0      	nop			@ (mov r8, r8)
 801e0b8:	200003c8 	.word	0x200003c8
 801e0bc:	2000025c 	.word	0x2000025c

0801e0c0 <_strtol_l.constprop.0>:
 801e0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e0c2:	b085      	sub	sp, #20
 801e0c4:	0017      	movs	r7, r2
 801e0c6:	001e      	movs	r6, r3
 801e0c8:	9003      	str	r0, [sp, #12]
 801e0ca:	9101      	str	r1, [sp, #4]
 801e0cc:	2b24      	cmp	r3, #36	@ 0x24
 801e0ce:	d844      	bhi.n	801e15a <_strtol_l.constprop.0+0x9a>
 801e0d0:	000c      	movs	r4, r1
 801e0d2:	2b01      	cmp	r3, #1
 801e0d4:	d041      	beq.n	801e15a <_strtol_l.constprop.0+0x9a>
 801e0d6:	4b3d      	ldr	r3, [pc, #244]	@ (801e1cc <_strtol_l.constprop.0+0x10c>)
 801e0d8:	2208      	movs	r2, #8
 801e0da:	469c      	mov	ip, r3
 801e0dc:	0023      	movs	r3, r4
 801e0de:	4661      	mov	r1, ip
 801e0e0:	781d      	ldrb	r5, [r3, #0]
 801e0e2:	3401      	adds	r4, #1
 801e0e4:	5d48      	ldrb	r0, [r1, r5]
 801e0e6:	0001      	movs	r1, r0
 801e0e8:	4011      	ands	r1, r2
 801e0ea:	4210      	tst	r0, r2
 801e0ec:	d1f6      	bne.n	801e0dc <_strtol_l.constprop.0+0x1c>
 801e0ee:	2d2d      	cmp	r5, #45	@ 0x2d
 801e0f0:	d13a      	bne.n	801e168 <_strtol_l.constprop.0+0xa8>
 801e0f2:	7825      	ldrb	r5, [r4, #0]
 801e0f4:	1c9c      	adds	r4, r3, #2
 801e0f6:	2301      	movs	r3, #1
 801e0f8:	9300      	str	r3, [sp, #0]
 801e0fa:	2210      	movs	r2, #16
 801e0fc:	0033      	movs	r3, r6
 801e0fe:	4393      	bics	r3, r2
 801e100:	d109      	bne.n	801e116 <_strtol_l.constprop.0+0x56>
 801e102:	2d30      	cmp	r5, #48	@ 0x30
 801e104:	d136      	bne.n	801e174 <_strtol_l.constprop.0+0xb4>
 801e106:	2120      	movs	r1, #32
 801e108:	7823      	ldrb	r3, [r4, #0]
 801e10a:	438b      	bics	r3, r1
 801e10c:	2b58      	cmp	r3, #88	@ 0x58
 801e10e:	d131      	bne.n	801e174 <_strtol_l.constprop.0+0xb4>
 801e110:	0016      	movs	r6, r2
 801e112:	7865      	ldrb	r5, [r4, #1]
 801e114:	3402      	adds	r4, #2
 801e116:	4a2e      	ldr	r2, [pc, #184]	@ (801e1d0 <_strtol_l.constprop.0+0x110>)
 801e118:	9b00      	ldr	r3, [sp, #0]
 801e11a:	4694      	mov	ip, r2
 801e11c:	4463      	add	r3, ip
 801e11e:	0031      	movs	r1, r6
 801e120:	0018      	movs	r0, r3
 801e122:	9302      	str	r3, [sp, #8]
 801e124:	f7e2 f8c4 	bl	80002b0 <__aeabi_uidivmod>
 801e128:	2200      	movs	r2, #0
 801e12a:	4684      	mov	ip, r0
 801e12c:	0010      	movs	r0, r2
 801e12e:	002b      	movs	r3, r5
 801e130:	3b30      	subs	r3, #48	@ 0x30
 801e132:	2b09      	cmp	r3, #9
 801e134:	d825      	bhi.n	801e182 <_strtol_l.constprop.0+0xc2>
 801e136:	001d      	movs	r5, r3
 801e138:	42ae      	cmp	r6, r5
 801e13a:	dd31      	ble.n	801e1a0 <_strtol_l.constprop.0+0xe0>
 801e13c:	1c53      	adds	r3, r2, #1
 801e13e:	d009      	beq.n	801e154 <_strtol_l.constprop.0+0x94>
 801e140:	2201      	movs	r2, #1
 801e142:	4252      	negs	r2, r2
 801e144:	4584      	cmp	ip, r0
 801e146:	d305      	bcc.n	801e154 <_strtol_l.constprop.0+0x94>
 801e148:	d101      	bne.n	801e14e <_strtol_l.constprop.0+0x8e>
 801e14a:	42a9      	cmp	r1, r5
 801e14c:	db25      	blt.n	801e19a <_strtol_l.constprop.0+0xda>
 801e14e:	2201      	movs	r2, #1
 801e150:	4370      	muls	r0, r6
 801e152:	1828      	adds	r0, r5, r0
 801e154:	7825      	ldrb	r5, [r4, #0]
 801e156:	3401      	adds	r4, #1
 801e158:	e7e9      	b.n	801e12e <_strtol_l.constprop.0+0x6e>
 801e15a:	f000 ffc5 	bl	801f0e8 <__errno>
 801e15e:	2316      	movs	r3, #22
 801e160:	6003      	str	r3, [r0, #0]
 801e162:	2000      	movs	r0, #0
 801e164:	b005      	add	sp, #20
 801e166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e168:	9100      	str	r1, [sp, #0]
 801e16a:	2d2b      	cmp	r5, #43	@ 0x2b
 801e16c:	d1c5      	bne.n	801e0fa <_strtol_l.constprop.0+0x3a>
 801e16e:	7825      	ldrb	r5, [r4, #0]
 801e170:	1c9c      	adds	r4, r3, #2
 801e172:	e7c2      	b.n	801e0fa <_strtol_l.constprop.0+0x3a>
 801e174:	2e00      	cmp	r6, #0
 801e176:	d1ce      	bne.n	801e116 <_strtol_l.constprop.0+0x56>
 801e178:	3608      	adds	r6, #8
 801e17a:	2d30      	cmp	r5, #48	@ 0x30
 801e17c:	d0cb      	beq.n	801e116 <_strtol_l.constprop.0+0x56>
 801e17e:	3602      	adds	r6, #2
 801e180:	e7c9      	b.n	801e116 <_strtol_l.constprop.0+0x56>
 801e182:	002b      	movs	r3, r5
 801e184:	3b41      	subs	r3, #65	@ 0x41
 801e186:	2b19      	cmp	r3, #25
 801e188:	d801      	bhi.n	801e18e <_strtol_l.constprop.0+0xce>
 801e18a:	3d37      	subs	r5, #55	@ 0x37
 801e18c:	e7d4      	b.n	801e138 <_strtol_l.constprop.0+0x78>
 801e18e:	002b      	movs	r3, r5
 801e190:	3b61      	subs	r3, #97	@ 0x61
 801e192:	2b19      	cmp	r3, #25
 801e194:	d804      	bhi.n	801e1a0 <_strtol_l.constprop.0+0xe0>
 801e196:	3d57      	subs	r5, #87	@ 0x57
 801e198:	e7ce      	b.n	801e138 <_strtol_l.constprop.0+0x78>
 801e19a:	2201      	movs	r2, #1
 801e19c:	4252      	negs	r2, r2
 801e19e:	e7d9      	b.n	801e154 <_strtol_l.constprop.0+0x94>
 801e1a0:	1c53      	adds	r3, r2, #1
 801e1a2:	d108      	bne.n	801e1b6 <_strtol_l.constprop.0+0xf6>
 801e1a4:	2322      	movs	r3, #34	@ 0x22
 801e1a6:	9a03      	ldr	r2, [sp, #12]
 801e1a8:	9802      	ldr	r0, [sp, #8]
 801e1aa:	6013      	str	r3, [r2, #0]
 801e1ac:	2f00      	cmp	r7, #0
 801e1ae:	d0d9      	beq.n	801e164 <_strtol_l.constprop.0+0xa4>
 801e1b0:	1e63      	subs	r3, r4, #1
 801e1b2:	9301      	str	r3, [sp, #4]
 801e1b4:	e007      	b.n	801e1c6 <_strtol_l.constprop.0+0x106>
 801e1b6:	9b00      	ldr	r3, [sp, #0]
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d000      	beq.n	801e1be <_strtol_l.constprop.0+0xfe>
 801e1bc:	4240      	negs	r0, r0
 801e1be:	2f00      	cmp	r7, #0
 801e1c0:	d0d0      	beq.n	801e164 <_strtol_l.constprop.0+0xa4>
 801e1c2:	2a00      	cmp	r2, #0
 801e1c4:	d1f4      	bne.n	801e1b0 <_strtol_l.constprop.0+0xf0>
 801e1c6:	9b01      	ldr	r3, [sp, #4]
 801e1c8:	603b      	str	r3, [r7, #0]
 801e1ca:	e7cb      	b.n	801e164 <_strtol_l.constprop.0+0xa4>
 801e1cc:	08024239 	.word	0x08024239
 801e1d0:	7fffffff 	.word	0x7fffffff

0801e1d4 <strtol>:
 801e1d4:	b510      	push	{r4, lr}
 801e1d6:	4c04      	ldr	r4, [pc, #16]	@ (801e1e8 <strtol+0x14>)
 801e1d8:	0013      	movs	r3, r2
 801e1da:	000a      	movs	r2, r1
 801e1dc:	0001      	movs	r1, r0
 801e1de:	6820      	ldr	r0, [r4, #0]
 801e1e0:	f7ff ff6e 	bl	801e0c0 <_strtol_l.constprop.0>
 801e1e4:	bd10      	pop	{r4, pc}
 801e1e6:	46c0      	nop			@ (mov r8, r8)
 801e1e8:	200003c8 	.word	0x200003c8

0801e1ec <__cvt>:
 801e1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e1ee:	001f      	movs	r7, r3
 801e1f0:	2300      	movs	r3, #0
 801e1f2:	0016      	movs	r6, r2
 801e1f4:	b08b      	sub	sp, #44	@ 0x2c
 801e1f6:	429f      	cmp	r7, r3
 801e1f8:	da04      	bge.n	801e204 <__cvt+0x18>
 801e1fa:	2180      	movs	r1, #128	@ 0x80
 801e1fc:	0609      	lsls	r1, r1, #24
 801e1fe:	187b      	adds	r3, r7, r1
 801e200:	001f      	movs	r7, r3
 801e202:	232d      	movs	r3, #45	@ 0x2d
 801e204:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e206:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e208:	7013      	strb	r3, [r2, #0]
 801e20a:	2320      	movs	r3, #32
 801e20c:	2203      	movs	r2, #3
 801e20e:	439d      	bics	r5, r3
 801e210:	2d46      	cmp	r5, #70	@ 0x46
 801e212:	d007      	beq.n	801e224 <__cvt+0x38>
 801e214:	002b      	movs	r3, r5
 801e216:	3b45      	subs	r3, #69	@ 0x45
 801e218:	4259      	negs	r1, r3
 801e21a:	414b      	adcs	r3, r1
 801e21c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801e21e:	3a01      	subs	r2, #1
 801e220:	18cb      	adds	r3, r1, r3
 801e222:	9310      	str	r3, [sp, #64]	@ 0x40
 801e224:	ab09      	add	r3, sp, #36	@ 0x24
 801e226:	9304      	str	r3, [sp, #16]
 801e228:	ab08      	add	r3, sp, #32
 801e22a:	9303      	str	r3, [sp, #12]
 801e22c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e22e:	9200      	str	r2, [sp, #0]
 801e230:	9302      	str	r3, [sp, #8]
 801e232:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e234:	0032      	movs	r2, r6
 801e236:	9301      	str	r3, [sp, #4]
 801e238:	003b      	movs	r3, r7
 801e23a:	f001 f82b 	bl	801f294 <_dtoa_r>
 801e23e:	0004      	movs	r4, r0
 801e240:	2d47      	cmp	r5, #71	@ 0x47
 801e242:	d11b      	bne.n	801e27c <__cvt+0x90>
 801e244:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e246:	07db      	lsls	r3, r3, #31
 801e248:	d511      	bpl.n	801e26e <__cvt+0x82>
 801e24a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e24c:	18c3      	adds	r3, r0, r3
 801e24e:	9307      	str	r3, [sp, #28]
 801e250:	2200      	movs	r2, #0
 801e252:	2300      	movs	r3, #0
 801e254:	0030      	movs	r0, r6
 801e256:	0039      	movs	r1, r7
 801e258:	f7e2 f92a 	bl	80004b0 <__aeabi_dcmpeq>
 801e25c:	2800      	cmp	r0, #0
 801e25e:	d001      	beq.n	801e264 <__cvt+0x78>
 801e260:	9b07      	ldr	r3, [sp, #28]
 801e262:	9309      	str	r3, [sp, #36]	@ 0x24
 801e264:	2230      	movs	r2, #48	@ 0x30
 801e266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e268:	9907      	ldr	r1, [sp, #28]
 801e26a:	428b      	cmp	r3, r1
 801e26c:	d320      	bcc.n	801e2b0 <__cvt+0xc4>
 801e26e:	0020      	movs	r0, r4
 801e270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e272:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e274:	1b1b      	subs	r3, r3, r4
 801e276:	6013      	str	r3, [r2, #0]
 801e278:	b00b      	add	sp, #44	@ 0x2c
 801e27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e27c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e27e:	18c3      	adds	r3, r0, r3
 801e280:	9307      	str	r3, [sp, #28]
 801e282:	2d46      	cmp	r5, #70	@ 0x46
 801e284:	d1e4      	bne.n	801e250 <__cvt+0x64>
 801e286:	7803      	ldrb	r3, [r0, #0]
 801e288:	2b30      	cmp	r3, #48	@ 0x30
 801e28a:	d10c      	bne.n	801e2a6 <__cvt+0xba>
 801e28c:	2200      	movs	r2, #0
 801e28e:	2300      	movs	r3, #0
 801e290:	0030      	movs	r0, r6
 801e292:	0039      	movs	r1, r7
 801e294:	f7e2 f90c 	bl	80004b0 <__aeabi_dcmpeq>
 801e298:	2800      	cmp	r0, #0
 801e29a:	d104      	bne.n	801e2a6 <__cvt+0xba>
 801e29c:	2301      	movs	r3, #1
 801e29e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e2a0:	1a9b      	subs	r3, r3, r2
 801e2a2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e2a4:	6013      	str	r3, [r2, #0]
 801e2a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e2a8:	9a07      	ldr	r2, [sp, #28]
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	18d3      	adds	r3, r2, r3
 801e2ae:	e7ce      	b.n	801e24e <__cvt+0x62>
 801e2b0:	1c59      	adds	r1, r3, #1
 801e2b2:	9109      	str	r1, [sp, #36]	@ 0x24
 801e2b4:	701a      	strb	r2, [r3, #0]
 801e2b6:	e7d6      	b.n	801e266 <__cvt+0x7a>

0801e2b8 <__exponent>:
 801e2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e2ba:	232b      	movs	r3, #43	@ 0x2b
 801e2bc:	0005      	movs	r5, r0
 801e2be:	000c      	movs	r4, r1
 801e2c0:	b085      	sub	sp, #20
 801e2c2:	7002      	strb	r2, [r0, #0]
 801e2c4:	2900      	cmp	r1, #0
 801e2c6:	da01      	bge.n	801e2cc <__exponent+0x14>
 801e2c8:	424c      	negs	r4, r1
 801e2ca:	3302      	adds	r3, #2
 801e2cc:	706b      	strb	r3, [r5, #1]
 801e2ce:	2c09      	cmp	r4, #9
 801e2d0:	dd2c      	ble.n	801e32c <__exponent+0x74>
 801e2d2:	ab02      	add	r3, sp, #8
 801e2d4:	1dde      	adds	r6, r3, #7
 801e2d6:	0020      	movs	r0, r4
 801e2d8:	210a      	movs	r1, #10
 801e2da:	f7e2 f8d3 	bl	8000484 <__aeabi_idivmod>
 801e2de:	0037      	movs	r7, r6
 801e2e0:	3130      	adds	r1, #48	@ 0x30
 801e2e2:	3e01      	subs	r6, #1
 801e2e4:	0020      	movs	r0, r4
 801e2e6:	7031      	strb	r1, [r6, #0]
 801e2e8:	210a      	movs	r1, #10
 801e2ea:	9401      	str	r4, [sp, #4]
 801e2ec:	f7e1 ffe4 	bl	80002b8 <__divsi3>
 801e2f0:	9b01      	ldr	r3, [sp, #4]
 801e2f2:	0004      	movs	r4, r0
 801e2f4:	2b63      	cmp	r3, #99	@ 0x63
 801e2f6:	dcee      	bgt.n	801e2d6 <__exponent+0x1e>
 801e2f8:	1eba      	subs	r2, r7, #2
 801e2fa:	1ca8      	adds	r0, r5, #2
 801e2fc:	0001      	movs	r1, r0
 801e2fe:	0013      	movs	r3, r2
 801e300:	3430      	adds	r4, #48	@ 0x30
 801e302:	7014      	strb	r4, [r2, #0]
 801e304:	ac02      	add	r4, sp, #8
 801e306:	3407      	adds	r4, #7
 801e308:	429c      	cmp	r4, r3
 801e30a:	d80a      	bhi.n	801e322 <__exponent+0x6a>
 801e30c:	2300      	movs	r3, #0
 801e30e:	42a2      	cmp	r2, r4
 801e310:	d803      	bhi.n	801e31a <__exponent+0x62>
 801e312:	3309      	adds	r3, #9
 801e314:	aa02      	add	r2, sp, #8
 801e316:	189b      	adds	r3, r3, r2
 801e318:	1bdb      	subs	r3, r3, r7
 801e31a:	18c0      	adds	r0, r0, r3
 801e31c:	1b40      	subs	r0, r0, r5
 801e31e:	b005      	add	sp, #20
 801e320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e322:	781c      	ldrb	r4, [r3, #0]
 801e324:	3301      	adds	r3, #1
 801e326:	700c      	strb	r4, [r1, #0]
 801e328:	3101      	adds	r1, #1
 801e32a:	e7eb      	b.n	801e304 <__exponent+0x4c>
 801e32c:	2330      	movs	r3, #48	@ 0x30
 801e32e:	18e4      	adds	r4, r4, r3
 801e330:	70ab      	strb	r3, [r5, #2]
 801e332:	1d28      	adds	r0, r5, #4
 801e334:	70ec      	strb	r4, [r5, #3]
 801e336:	e7f1      	b.n	801e31c <__exponent+0x64>

0801e338 <_printf_float>:
 801e338:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e33a:	b097      	sub	sp, #92	@ 0x5c
 801e33c:	000d      	movs	r5, r1
 801e33e:	920a      	str	r2, [sp, #40]	@ 0x28
 801e340:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801e342:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e344:	9009      	str	r0, [sp, #36]	@ 0x24
 801e346:	f000 fe7d 	bl	801f044 <_localeconv_r>
 801e34a:	6803      	ldr	r3, [r0, #0]
 801e34c:	0018      	movs	r0, r3
 801e34e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e350:	f7e1 ff0c 	bl	800016c <strlen>
 801e354:	2300      	movs	r3, #0
 801e356:	900f      	str	r0, [sp, #60]	@ 0x3c
 801e358:	9314      	str	r3, [sp, #80]	@ 0x50
 801e35a:	7e2b      	ldrb	r3, [r5, #24]
 801e35c:	2207      	movs	r2, #7
 801e35e:	930c      	str	r3, [sp, #48]	@ 0x30
 801e360:	682b      	ldr	r3, [r5, #0]
 801e362:	930e      	str	r3, [sp, #56]	@ 0x38
 801e364:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e366:	6823      	ldr	r3, [r4, #0]
 801e368:	05c9      	lsls	r1, r1, #23
 801e36a:	d545      	bpl.n	801e3f8 <_printf_float+0xc0>
 801e36c:	189b      	adds	r3, r3, r2
 801e36e:	4393      	bics	r3, r2
 801e370:	001a      	movs	r2, r3
 801e372:	3208      	adds	r2, #8
 801e374:	6022      	str	r2, [r4, #0]
 801e376:	2201      	movs	r2, #1
 801e378:	681e      	ldr	r6, [r3, #0]
 801e37a:	685f      	ldr	r7, [r3, #4]
 801e37c:	007b      	lsls	r3, r7, #1
 801e37e:	085b      	lsrs	r3, r3, #1
 801e380:	9311      	str	r3, [sp, #68]	@ 0x44
 801e382:	9610      	str	r6, [sp, #64]	@ 0x40
 801e384:	64ae      	str	r6, [r5, #72]	@ 0x48
 801e386:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801e388:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e38a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e38c:	4ba7      	ldr	r3, [pc, #668]	@ (801e62c <_printf_float+0x2f4>)
 801e38e:	4252      	negs	r2, r2
 801e390:	f7e4 ffb8 	bl	8003304 <__aeabi_dcmpun>
 801e394:	2800      	cmp	r0, #0
 801e396:	d131      	bne.n	801e3fc <_printf_float+0xc4>
 801e398:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e39a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801e39c:	2201      	movs	r2, #1
 801e39e:	4ba3      	ldr	r3, [pc, #652]	@ (801e62c <_printf_float+0x2f4>)
 801e3a0:	4252      	negs	r2, r2
 801e3a2:	f7e2 f895 	bl	80004d0 <__aeabi_dcmple>
 801e3a6:	2800      	cmp	r0, #0
 801e3a8:	d128      	bne.n	801e3fc <_printf_float+0xc4>
 801e3aa:	2200      	movs	r2, #0
 801e3ac:	2300      	movs	r3, #0
 801e3ae:	0030      	movs	r0, r6
 801e3b0:	0039      	movs	r1, r7
 801e3b2:	f7e2 f883 	bl	80004bc <__aeabi_dcmplt>
 801e3b6:	2800      	cmp	r0, #0
 801e3b8:	d003      	beq.n	801e3c2 <_printf_float+0x8a>
 801e3ba:	002b      	movs	r3, r5
 801e3bc:	222d      	movs	r2, #45	@ 0x2d
 801e3be:	3343      	adds	r3, #67	@ 0x43
 801e3c0:	701a      	strb	r2, [r3, #0]
 801e3c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e3c4:	4f9a      	ldr	r7, [pc, #616]	@ (801e630 <_printf_float+0x2f8>)
 801e3c6:	2b47      	cmp	r3, #71	@ 0x47
 801e3c8:	d900      	bls.n	801e3cc <_printf_float+0x94>
 801e3ca:	4f9a      	ldr	r7, [pc, #616]	@ (801e634 <_printf_float+0x2fc>)
 801e3cc:	2303      	movs	r3, #3
 801e3ce:	2400      	movs	r4, #0
 801e3d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e3d2:	612b      	str	r3, [r5, #16]
 801e3d4:	3301      	adds	r3, #1
 801e3d6:	439a      	bics	r2, r3
 801e3d8:	602a      	str	r2, [r5, #0]
 801e3da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e3dc:	0029      	movs	r1, r5
 801e3de:	9300      	str	r3, [sp, #0]
 801e3e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e3e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e3e4:	aa15      	add	r2, sp, #84	@ 0x54
 801e3e6:	f000 f9e5 	bl	801e7b4 <_printf_common>
 801e3ea:	3001      	adds	r0, #1
 801e3ec:	d000      	beq.n	801e3f0 <_printf_float+0xb8>
 801e3ee:	e09f      	b.n	801e530 <_printf_float+0x1f8>
 801e3f0:	2001      	movs	r0, #1
 801e3f2:	4240      	negs	r0, r0
 801e3f4:	b017      	add	sp, #92	@ 0x5c
 801e3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e3f8:	3307      	adds	r3, #7
 801e3fa:	e7b8      	b.n	801e36e <_printf_float+0x36>
 801e3fc:	0032      	movs	r2, r6
 801e3fe:	003b      	movs	r3, r7
 801e400:	0030      	movs	r0, r6
 801e402:	0039      	movs	r1, r7
 801e404:	f7e4 ff7e 	bl	8003304 <__aeabi_dcmpun>
 801e408:	2800      	cmp	r0, #0
 801e40a:	d00b      	beq.n	801e424 <_printf_float+0xec>
 801e40c:	2f00      	cmp	r7, #0
 801e40e:	da03      	bge.n	801e418 <_printf_float+0xe0>
 801e410:	002b      	movs	r3, r5
 801e412:	222d      	movs	r2, #45	@ 0x2d
 801e414:	3343      	adds	r3, #67	@ 0x43
 801e416:	701a      	strb	r2, [r3, #0]
 801e418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e41a:	4f87      	ldr	r7, [pc, #540]	@ (801e638 <_printf_float+0x300>)
 801e41c:	2b47      	cmp	r3, #71	@ 0x47
 801e41e:	d9d5      	bls.n	801e3cc <_printf_float+0x94>
 801e420:	4f86      	ldr	r7, [pc, #536]	@ (801e63c <_printf_float+0x304>)
 801e422:	e7d3      	b.n	801e3cc <_printf_float+0x94>
 801e424:	2220      	movs	r2, #32
 801e426:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e428:	686b      	ldr	r3, [r5, #4]
 801e42a:	4394      	bics	r4, r2
 801e42c:	1c5a      	adds	r2, r3, #1
 801e42e:	d146      	bne.n	801e4be <_printf_float+0x186>
 801e430:	3307      	adds	r3, #7
 801e432:	606b      	str	r3, [r5, #4]
 801e434:	2380      	movs	r3, #128	@ 0x80
 801e436:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e438:	00db      	lsls	r3, r3, #3
 801e43a:	4313      	orrs	r3, r2
 801e43c:	2200      	movs	r2, #0
 801e43e:	602b      	str	r3, [r5, #0]
 801e440:	9206      	str	r2, [sp, #24]
 801e442:	aa14      	add	r2, sp, #80	@ 0x50
 801e444:	9205      	str	r2, [sp, #20]
 801e446:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e448:	a90a      	add	r1, sp, #40	@ 0x28
 801e44a:	9204      	str	r2, [sp, #16]
 801e44c:	aa13      	add	r2, sp, #76	@ 0x4c
 801e44e:	9203      	str	r2, [sp, #12]
 801e450:	2223      	movs	r2, #35	@ 0x23
 801e452:	1852      	adds	r2, r2, r1
 801e454:	9202      	str	r2, [sp, #8]
 801e456:	9301      	str	r3, [sp, #4]
 801e458:	686b      	ldr	r3, [r5, #4]
 801e45a:	0032      	movs	r2, r6
 801e45c:	9300      	str	r3, [sp, #0]
 801e45e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e460:	003b      	movs	r3, r7
 801e462:	f7ff fec3 	bl	801e1ec <__cvt>
 801e466:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e468:	0007      	movs	r7, r0
 801e46a:	2c47      	cmp	r4, #71	@ 0x47
 801e46c:	d12d      	bne.n	801e4ca <_printf_float+0x192>
 801e46e:	1cd3      	adds	r3, r2, #3
 801e470:	db02      	blt.n	801e478 <_printf_float+0x140>
 801e472:	686b      	ldr	r3, [r5, #4]
 801e474:	429a      	cmp	r2, r3
 801e476:	dd48      	ble.n	801e50a <_printf_float+0x1d2>
 801e478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e47a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e47c:	3b02      	subs	r3, #2
 801e47e:	b2db      	uxtb	r3, r3
 801e480:	930c      	str	r3, [sp, #48]	@ 0x30
 801e482:	0028      	movs	r0, r5
 801e484:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e486:	3901      	subs	r1, #1
 801e488:	3050      	adds	r0, #80	@ 0x50
 801e48a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801e48c:	f7ff ff14 	bl	801e2b8 <__exponent>
 801e490:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e492:	0004      	movs	r4, r0
 801e494:	1813      	adds	r3, r2, r0
 801e496:	612b      	str	r3, [r5, #16]
 801e498:	2a01      	cmp	r2, #1
 801e49a:	dc02      	bgt.n	801e4a2 <_printf_float+0x16a>
 801e49c:	682a      	ldr	r2, [r5, #0]
 801e49e:	07d2      	lsls	r2, r2, #31
 801e4a0:	d501      	bpl.n	801e4a6 <_printf_float+0x16e>
 801e4a2:	3301      	adds	r3, #1
 801e4a4:	612b      	str	r3, [r5, #16]
 801e4a6:	2323      	movs	r3, #35	@ 0x23
 801e4a8:	aa0a      	add	r2, sp, #40	@ 0x28
 801e4aa:	189b      	adds	r3, r3, r2
 801e4ac:	781b      	ldrb	r3, [r3, #0]
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d100      	bne.n	801e4b4 <_printf_float+0x17c>
 801e4b2:	e792      	b.n	801e3da <_printf_float+0xa2>
 801e4b4:	002b      	movs	r3, r5
 801e4b6:	222d      	movs	r2, #45	@ 0x2d
 801e4b8:	3343      	adds	r3, #67	@ 0x43
 801e4ba:	701a      	strb	r2, [r3, #0]
 801e4bc:	e78d      	b.n	801e3da <_printf_float+0xa2>
 801e4be:	2c47      	cmp	r4, #71	@ 0x47
 801e4c0:	d1b8      	bne.n	801e434 <_printf_float+0xfc>
 801e4c2:	2b00      	cmp	r3, #0
 801e4c4:	d1b6      	bne.n	801e434 <_printf_float+0xfc>
 801e4c6:	3301      	adds	r3, #1
 801e4c8:	e7b3      	b.n	801e432 <_printf_float+0xfa>
 801e4ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4cc:	0011      	movs	r1, r2
 801e4ce:	2b65      	cmp	r3, #101	@ 0x65
 801e4d0:	d9d7      	bls.n	801e482 <_printf_float+0x14a>
 801e4d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e4d4:	2b66      	cmp	r3, #102	@ 0x66
 801e4d6:	d11a      	bne.n	801e50e <_printf_float+0x1d6>
 801e4d8:	686b      	ldr	r3, [r5, #4]
 801e4da:	2a00      	cmp	r2, #0
 801e4dc:	dd09      	ble.n	801e4f2 <_printf_float+0x1ba>
 801e4de:	612a      	str	r2, [r5, #16]
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d102      	bne.n	801e4ea <_printf_float+0x1b2>
 801e4e4:	6829      	ldr	r1, [r5, #0]
 801e4e6:	07c9      	lsls	r1, r1, #31
 801e4e8:	d50b      	bpl.n	801e502 <_printf_float+0x1ca>
 801e4ea:	3301      	adds	r3, #1
 801e4ec:	189b      	adds	r3, r3, r2
 801e4ee:	612b      	str	r3, [r5, #16]
 801e4f0:	e007      	b.n	801e502 <_printf_float+0x1ca>
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	d103      	bne.n	801e4fe <_printf_float+0x1c6>
 801e4f6:	2201      	movs	r2, #1
 801e4f8:	6829      	ldr	r1, [r5, #0]
 801e4fa:	4211      	tst	r1, r2
 801e4fc:	d000      	beq.n	801e500 <_printf_float+0x1c8>
 801e4fe:	1c9a      	adds	r2, r3, #2
 801e500:	612a      	str	r2, [r5, #16]
 801e502:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e504:	2400      	movs	r4, #0
 801e506:	65ab      	str	r3, [r5, #88]	@ 0x58
 801e508:	e7cd      	b.n	801e4a6 <_printf_float+0x16e>
 801e50a:	2367      	movs	r3, #103	@ 0x67
 801e50c:	930c      	str	r3, [sp, #48]	@ 0x30
 801e50e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801e510:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e512:	4299      	cmp	r1, r3
 801e514:	db06      	blt.n	801e524 <_printf_float+0x1ec>
 801e516:	682b      	ldr	r3, [r5, #0]
 801e518:	6129      	str	r1, [r5, #16]
 801e51a:	07db      	lsls	r3, r3, #31
 801e51c:	d5f1      	bpl.n	801e502 <_printf_float+0x1ca>
 801e51e:	3101      	adds	r1, #1
 801e520:	6129      	str	r1, [r5, #16]
 801e522:	e7ee      	b.n	801e502 <_printf_float+0x1ca>
 801e524:	2201      	movs	r2, #1
 801e526:	2900      	cmp	r1, #0
 801e528:	dce0      	bgt.n	801e4ec <_printf_float+0x1b4>
 801e52a:	1892      	adds	r2, r2, r2
 801e52c:	1a52      	subs	r2, r2, r1
 801e52e:	e7dd      	b.n	801e4ec <_printf_float+0x1b4>
 801e530:	682a      	ldr	r2, [r5, #0]
 801e532:	0553      	lsls	r3, r2, #21
 801e534:	d408      	bmi.n	801e548 <_printf_float+0x210>
 801e536:	692b      	ldr	r3, [r5, #16]
 801e538:	003a      	movs	r2, r7
 801e53a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e53c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e53e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e540:	47a0      	blx	r4
 801e542:	3001      	adds	r0, #1
 801e544:	d129      	bne.n	801e59a <_printf_float+0x262>
 801e546:	e753      	b.n	801e3f0 <_printf_float+0xb8>
 801e548:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e54a:	2b65      	cmp	r3, #101	@ 0x65
 801e54c:	d800      	bhi.n	801e550 <_printf_float+0x218>
 801e54e:	e0da      	b.n	801e706 <_printf_float+0x3ce>
 801e550:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801e552:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801e554:	2200      	movs	r2, #0
 801e556:	2300      	movs	r3, #0
 801e558:	f7e1 ffaa 	bl	80004b0 <__aeabi_dcmpeq>
 801e55c:	2800      	cmp	r0, #0
 801e55e:	d033      	beq.n	801e5c8 <_printf_float+0x290>
 801e560:	2301      	movs	r3, #1
 801e562:	4a37      	ldr	r2, [pc, #220]	@ (801e640 <_printf_float+0x308>)
 801e564:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e568:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e56a:	47a0      	blx	r4
 801e56c:	3001      	adds	r0, #1
 801e56e:	d100      	bne.n	801e572 <_printf_float+0x23a>
 801e570:	e73e      	b.n	801e3f0 <_printf_float+0xb8>
 801e572:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e576:	42b3      	cmp	r3, r6
 801e578:	db02      	blt.n	801e580 <_printf_float+0x248>
 801e57a:	682b      	ldr	r3, [r5, #0]
 801e57c:	07db      	lsls	r3, r3, #31
 801e57e:	d50c      	bpl.n	801e59a <_printf_float+0x262>
 801e580:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e582:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e584:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e586:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e588:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e58a:	47a0      	blx	r4
 801e58c:	2400      	movs	r4, #0
 801e58e:	3001      	adds	r0, #1
 801e590:	d100      	bne.n	801e594 <_printf_float+0x25c>
 801e592:	e72d      	b.n	801e3f0 <_printf_float+0xb8>
 801e594:	1e73      	subs	r3, r6, #1
 801e596:	42a3      	cmp	r3, r4
 801e598:	dc0a      	bgt.n	801e5b0 <_printf_float+0x278>
 801e59a:	682b      	ldr	r3, [r5, #0]
 801e59c:	079b      	lsls	r3, r3, #30
 801e59e:	d500      	bpl.n	801e5a2 <_printf_float+0x26a>
 801e5a0:	e105      	b.n	801e7ae <_printf_float+0x476>
 801e5a2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e5a4:	68e8      	ldr	r0, [r5, #12]
 801e5a6:	4298      	cmp	r0, r3
 801e5a8:	db00      	blt.n	801e5ac <_printf_float+0x274>
 801e5aa:	e723      	b.n	801e3f4 <_printf_float+0xbc>
 801e5ac:	0018      	movs	r0, r3
 801e5ae:	e721      	b.n	801e3f4 <_printf_float+0xbc>
 801e5b0:	002a      	movs	r2, r5
 801e5b2:	2301      	movs	r3, #1
 801e5b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e5b8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e5ba:	321a      	adds	r2, #26
 801e5bc:	47b8      	blx	r7
 801e5be:	3001      	adds	r0, #1
 801e5c0:	d100      	bne.n	801e5c4 <_printf_float+0x28c>
 801e5c2:	e715      	b.n	801e3f0 <_printf_float+0xb8>
 801e5c4:	3401      	adds	r4, #1
 801e5c6:	e7e5      	b.n	801e594 <_printf_float+0x25c>
 801e5c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	dc3a      	bgt.n	801e644 <_printf_float+0x30c>
 801e5ce:	2301      	movs	r3, #1
 801e5d0:	4a1b      	ldr	r2, [pc, #108]	@ (801e640 <_printf_float+0x308>)
 801e5d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e5d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e5d8:	47a0      	blx	r4
 801e5da:	3001      	adds	r0, #1
 801e5dc:	d100      	bne.n	801e5e0 <_printf_float+0x2a8>
 801e5de:	e707      	b.n	801e3f0 <_printf_float+0xb8>
 801e5e0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e5e2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e5e4:	4333      	orrs	r3, r6
 801e5e6:	d102      	bne.n	801e5ee <_printf_float+0x2b6>
 801e5e8:	682b      	ldr	r3, [r5, #0]
 801e5ea:	07db      	lsls	r3, r3, #31
 801e5ec:	d5d5      	bpl.n	801e59a <_printf_float+0x262>
 801e5ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e5f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e5f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e5f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e5f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e5f8:	47a0      	blx	r4
 801e5fa:	2300      	movs	r3, #0
 801e5fc:	3001      	adds	r0, #1
 801e5fe:	d100      	bne.n	801e602 <_printf_float+0x2ca>
 801e600:	e6f6      	b.n	801e3f0 <_printf_float+0xb8>
 801e602:	930c      	str	r3, [sp, #48]	@ 0x30
 801e604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e606:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e608:	425b      	negs	r3, r3
 801e60a:	4293      	cmp	r3, r2
 801e60c:	dc01      	bgt.n	801e612 <_printf_float+0x2da>
 801e60e:	0033      	movs	r3, r6
 801e610:	e792      	b.n	801e538 <_printf_float+0x200>
 801e612:	002a      	movs	r2, r5
 801e614:	2301      	movs	r3, #1
 801e616:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e618:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e61a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e61c:	321a      	adds	r2, #26
 801e61e:	47a0      	blx	r4
 801e620:	3001      	adds	r0, #1
 801e622:	d100      	bne.n	801e626 <_printf_float+0x2ee>
 801e624:	e6e4      	b.n	801e3f0 <_printf_float+0xb8>
 801e626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e628:	3301      	adds	r3, #1
 801e62a:	e7ea      	b.n	801e602 <_printf_float+0x2ca>
 801e62c:	7fefffff 	.word	0x7fefffff
 801e630:	08024339 	.word	0x08024339
 801e634:	0802433d 	.word	0x0802433d
 801e638:	08024341 	.word	0x08024341
 801e63c:	08024345 	.word	0x08024345
 801e640:	08024349 	.word	0x08024349
 801e644:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e646:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801e648:	930c      	str	r3, [sp, #48]	@ 0x30
 801e64a:	429e      	cmp	r6, r3
 801e64c:	dd00      	ble.n	801e650 <_printf_float+0x318>
 801e64e:	001e      	movs	r6, r3
 801e650:	2e00      	cmp	r6, #0
 801e652:	dc31      	bgt.n	801e6b8 <_printf_float+0x380>
 801e654:	43f3      	mvns	r3, r6
 801e656:	2400      	movs	r4, #0
 801e658:	17db      	asrs	r3, r3, #31
 801e65a:	4033      	ands	r3, r6
 801e65c:	930e      	str	r3, [sp, #56]	@ 0x38
 801e65e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801e660:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e662:	1af3      	subs	r3, r6, r3
 801e664:	42a3      	cmp	r3, r4
 801e666:	dc30      	bgt.n	801e6ca <_printf_float+0x392>
 801e668:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e66a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e66c:	429a      	cmp	r2, r3
 801e66e:	dc38      	bgt.n	801e6e2 <_printf_float+0x3aa>
 801e670:	682b      	ldr	r3, [r5, #0]
 801e672:	07db      	lsls	r3, r3, #31
 801e674:	d435      	bmi.n	801e6e2 <_printf_float+0x3aa>
 801e676:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e678:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e67a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e67c:	1b9b      	subs	r3, r3, r6
 801e67e:	1b14      	subs	r4, r2, r4
 801e680:	429c      	cmp	r4, r3
 801e682:	dd00      	ble.n	801e686 <_printf_float+0x34e>
 801e684:	001c      	movs	r4, r3
 801e686:	2c00      	cmp	r4, #0
 801e688:	dc34      	bgt.n	801e6f4 <_printf_float+0x3bc>
 801e68a:	43e3      	mvns	r3, r4
 801e68c:	2600      	movs	r6, #0
 801e68e:	17db      	asrs	r3, r3, #31
 801e690:	401c      	ands	r4, r3
 801e692:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e694:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801e696:	1ad3      	subs	r3, r2, r3
 801e698:	1b1b      	subs	r3, r3, r4
 801e69a:	42b3      	cmp	r3, r6
 801e69c:	dc00      	bgt.n	801e6a0 <_printf_float+0x368>
 801e69e:	e77c      	b.n	801e59a <_printf_float+0x262>
 801e6a0:	002a      	movs	r2, r5
 801e6a2:	2301      	movs	r3, #1
 801e6a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e6a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e6aa:	321a      	adds	r2, #26
 801e6ac:	47b8      	blx	r7
 801e6ae:	3001      	adds	r0, #1
 801e6b0:	d100      	bne.n	801e6b4 <_printf_float+0x37c>
 801e6b2:	e69d      	b.n	801e3f0 <_printf_float+0xb8>
 801e6b4:	3601      	adds	r6, #1
 801e6b6:	e7ec      	b.n	801e692 <_printf_float+0x35a>
 801e6b8:	0033      	movs	r3, r6
 801e6ba:	003a      	movs	r2, r7
 801e6bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e6be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6c0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e6c2:	47a0      	blx	r4
 801e6c4:	3001      	adds	r0, #1
 801e6c6:	d1c5      	bne.n	801e654 <_printf_float+0x31c>
 801e6c8:	e692      	b.n	801e3f0 <_printf_float+0xb8>
 801e6ca:	002a      	movs	r2, r5
 801e6cc:	2301      	movs	r3, #1
 801e6ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e6d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6d2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e6d4:	321a      	adds	r2, #26
 801e6d6:	47b0      	blx	r6
 801e6d8:	3001      	adds	r0, #1
 801e6da:	d100      	bne.n	801e6de <_printf_float+0x3a6>
 801e6dc:	e688      	b.n	801e3f0 <_printf_float+0xb8>
 801e6de:	3401      	adds	r4, #1
 801e6e0:	e7bd      	b.n	801e65e <_printf_float+0x326>
 801e6e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e6e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e6e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e6e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e6ec:	47a0      	blx	r4
 801e6ee:	3001      	adds	r0, #1
 801e6f0:	d1c1      	bne.n	801e676 <_printf_float+0x33e>
 801e6f2:	e67d      	b.n	801e3f0 <_printf_float+0xb8>
 801e6f4:	19ba      	adds	r2, r7, r6
 801e6f6:	0023      	movs	r3, r4
 801e6f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e6fc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e6fe:	47b0      	blx	r6
 801e700:	3001      	adds	r0, #1
 801e702:	d1c2      	bne.n	801e68a <_printf_float+0x352>
 801e704:	e674      	b.n	801e3f0 <_printf_float+0xb8>
 801e706:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e708:	930c      	str	r3, [sp, #48]	@ 0x30
 801e70a:	2b01      	cmp	r3, #1
 801e70c:	dc02      	bgt.n	801e714 <_printf_float+0x3dc>
 801e70e:	2301      	movs	r3, #1
 801e710:	421a      	tst	r2, r3
 801e712:	d039      	beq.n	801e788 <_printf_float+0x450>
 801e714:	2301      	movs	r3, #1
 801e716:	003a      	movs	r2, r7
 801e718:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e71a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e71c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e71e:	47b0      	blx	r6
 801e720:	3001      	adds	r0, #1
 801e722:	d100      	bne.n	801e726 <_printf_float+0x3ee>
 801e724:	e664      	b.n	801e3f0 <_printf_float+0xb8>
 801e726:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e728:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801e72a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e72c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e72e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e730:	47b0      	blx	r6
 801e732:	3001      	adds	r0, #1
 801e734:	d100      	bne.n	801e738 <_printf_float+0x400>
 801e736:	e65b      	b.n	801e3f0 <_printf_float+0xb8>
 801e738:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801e73a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801e73c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e73e:	2200      	movs	r2, #0
 801e740:	3b01      	subs	r3, #1
 801e742:	930c      	str	r3, [sp, #48]	@ 0x30
 801e744:	2300      	movs	r3, #0
 801e746:	f7e1 feb3 	bl	80004b0 <__aeabi_dcmpeq>
 801e74a:	2800      	cmp	r0, #0
 801e74c:	d11a      	bne.n	801e784 <_printf_float+0x44c>
 801e74e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e750:	1c7a      	adds	r2, r7, #1
 801e752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e754:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e756:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e758:	47b0      	blx	r6
 801e75a:	3001      	adds	r0, #1
 801e75c:	d10e      	bne.n	801e77c <_printf_float+0x444>
 801e75e:	e647      	b.n	801e3f0 <_printf_float+0xb8>
 801e760:	002a      	movs	r2, r5
 801e762:	2301      	movs	r3, #1
 801e764:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e768:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801e76a:	321a      	adds	r2, #26
 801e76c:	47b8      	blx	r7
 801e76e:	3001      	adds	r0, #1
 801e770:	d100      	bne.n	801e774 <_printf_float+0x43c>
 801e772:	e63d      	b.n	801e3f0 <_printf_float+0xb8>
 801e774:	3601      	adds	r6, #1
 801e776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e778:	429e      	cmp	r6, r3
 801e77a:	dbf1      	blt.n	801e760 <_printf_float+0x428>
 801e77c:	002a      	movs	r2, r5
 801e77e:	0023      	movs	r3, r4
 801e780:	3250      	adds	r2, #80	@ 0x50
 801e782:	e6da      	b.n	801e53a <_printf_float+0x202>
 801e784:	2600      	movs	r6, #0
 801e786:	e7f6      	b.n	801e776 <_printf_float+0x43e>
 801e788:	003a      	movs	r2, r7
 801e78a:	e7e2      	b.n	801e752 <_printf_float+0x41a>
 801e78c:	002a      	movs	r2, r5
 801e78e:	2301      	movs	r3, #1
 801e790:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801e792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e794:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801e796:	3219      	adds	r2, #25
 801e798:	47b0      	blx	r6
 801e79a:	3001      	adds	r0, #1
 801e79c:	d100      	bne.n	801e7a0 <_printf_float+0x468>
 801e79e:	e627      	b.n	801e3f0 <_printf_float+0xb8>
 801e7a0:	3401      	adds	r4, #1
 801e7a2:	68eb      	ldr	r3, [r5, #12]
 801e7a4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801e7a6:	1a9b      	subs	r3, r3, r2
 801e7a8:	42a3      	cmp	r3, r4
 801e7aa:	dcef      	bgt.n	801e78c <_printf_float+0x454>
 801e7ac:	e6f9      	b.n	801e5a2 <_printf_float+0x26a>
 801e7ae:	2400      	movs	r4, #0
 801e7b0:	e7f7      	b.n	801e7a2 <_printf_float+0x46a>
 801e7b2:	46c0      	nop			@ (mov r8, r8)

0801e7b4 <_printf_common>:
 801e7b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e7b6:	0016      	movs	r6, r2
 801e7b8:	9301      	str	r3, [sp, #4]
 801e7ba:	688a      	ldr	r2, [r1, #8]
 801e7bc:	690b      	ldr	r3, [r1, #16]
 801e7be:	000c      	movs	r4, r1
 801e7c0:	9000      	str	r0, [sp, #0]
 801e7c2:	4293      	cmp	r3, r2
 801e7c4:	da00      	bge.n	801e7c8 <_printf_common+0x14>
 801e7c6:	0013      	movs	r3, r2
 801e7c8:	0022      	movs	r2, r4
 801e7ca:	6033      	str	r3, [r6, #0]
 801e7cc:	3243      	adds	r2, #67	@ 0x43
 801e7ce:	7812      	ldrb	r2, [r2, #0]
 801e7d0:	2a00      	cmp	r2, #0
 801e7d2:	d001      	beq.n	801e7d8 <_printf_common+0x24>
 801e7d4:	3301      	adds	r3, #1
 801e7d6:	6033      	str	r3, [r6, #0]
 801e7d8:	6823      	ldr	r3, [r4, #0]
 801e7da:	069b      	lsls	r3, r3, #26
 801e7dc:	d502      	bpl.n	801e7e4 <_printf_common+0x30>
 801e7de:	6833      	ldr	r3, [r6, #0]
 801e7e0:	3302      	adds	r3, #2
 801e7e2:	6033      	str	r3, [r6, #0]
 801e7e4:	6822      	ldr	r2, [r4, #0]
 801e7e6:	2306      	movs	r3, #6
 801e7e8:	0015      	movs	r5, r2
 801e7ea:	401d      	ands	r5, r3
 801e7ec:	421a      	tst	r2, r3
 801e7ee:	d027      	beq.n	801e840 <_printf_common+0x8c>
 801e7f0:	0023      	movs	r3, r4
 801e7f2:	3343      	adds	r3, #67	@ 0x43
 801e7f4:	781b      	ldrb	r3, [r3, #0]
 801e7f6:	1e5a      	subs	r2, r3, #1
 801e7f8:	4193      	sbcs	r3, r2
 801e7fa:	6822      	ldr	r2, [r4, #0]
 801e7fc:	0692      	lsls	r2, r2, #26
 801e7fe:	d430      	bmi.n	801e862 <_printf_common+0xae>
 801e800:	0022      	movs	r2, r4
 801e802:	9901      	ldr	r1, [sp, #4]
 801e804:	9800      	ldr	r0, [sp, #0]
 801e806:	9d08      	ldr	r5, [sp, #32]
 801e808:	3243      	adds	r2, #67	@ 0x43
 801e80a:	47a8      	blx	r5
 801e80c:	3001      	adds	r0, #1
 801e80e:	d025      	beq.n	801e85c <_printf_common+0xa8>
 801e810:	2206      	movs	r2, #6
 801e812:	6823      	ldr	r3, [r4, #0]
 801e814:	2500      	movs	r5, #0
 801e816:	4013      	ands	r3, r2
 801e818:	2b04      	cmp	r3, #4
 801e81a:	d105      	bne.n	801e828 <_printf_common+0x74>
 801e81c:	6833      	ldr	r3, [r6, #0]
 801e81e:	68e5      	ldr	r5, [r4, #12]
 801e820:	1aed      	subs	r5, r5, r3
 801e822:	43eb      	mvns	r3, r5
 801e824:	17db      	asrs	r3, r3, #31
 801e826:	401d      	ands	r5, r3
 801e828:	68a3      	ldr	r3, [r4, #8]
 801e82a:	6922      	ldr	r2, [r4, #16]
 801e82c:	4293      	cmp	r3, r2
 801e82e:	dd01      	ble.n	801e834 <_printf_common+0x80>
 801e830:	1a9b      	subs	r3, r3, r2
 801e832:	18ed      	adds	r5, r5, r3
 801e834:	2600      	movs	r6, #0
 801e836:	42b5      	cmp	r5, r6
 801e838:	d120      	bne.n	801e87c <_printf_common+0xc8>
 801e83a:	2000      	movs	r0, #0
 801e83c:	e010      	b.n	801e860 <_printf_common+0xac>
 801e83e:	3501      	adds	r5, #1
 801e840:	68e3      	ldr	r3, [r4, #12]
 801e842:	6832      	ldr	r2, [r6, #0]
 801e844:	1a9b      	subs	r3, r3, r2
 801e846:	42ab      	cmp	r3, r5
 801e848:	ddd2      	ble.n	801e7f0 <_printf_common+0x3c>
 801e84a:	0022      	movs	r2, r4
 801e84c:	2301      	movs	r3, #1
 801e84e:	9901      	ldr	r1, [sp, #4]
 801e850:	9800      	ldr	r0, [sp, #0]
 801e852:	9f08      	ldr	r7, [sp, #32]
 801e854:	3219      	adds	r2, #25
 801e856:	47b8      	blx	r7
 801e858:	3001      	adds	r0, #1
 801e85a:	d1f0      	bne.n	801e83e <_printf_common+0x8a>
 801e85c:	2001      	movs	r0, #1
 801e85e:	4240      	negs	r0, r0
 801e860:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e862:	2030      	movs	r0, #48	@ 0x30
 801e864:	18e1      	adds	r1, r4, r3
 801e866:	3143      	adds	r1, #67	@ 0x43
 801e868:	7008      	strb	r0, [r1, #0]
 801e86a:	0021      	movs	r1, r4
 801e86c:	1c5a      	adds	r2, r3, #1
 801e86e:	3145      	adds	r1, #69	@ 0x45
 801e870:	7809      	ldrb	r1, [r1, #0]
 801e872:	18a2      	adds	r2, r4, r2
 801e874:	3243      	adds	r2, #67	@ 0x43
 801e876:	3302      	adds	r3, #2
 801e878:	7011      	strb	r1, [r2, #0]
 801e87a:	e7c1      	b.n	801e800 <_printf_common+0x4c>
 801e87c:	0022      	movs	r2, r4
 801e87e:	2301      	movs	r3, #1
 801e880:	9901      	ldr	r1, [sp, #4]
 801e882:	9800      	ldr	r0, [sp, #0]
 801e884:	9f08      	ldr	r7, [sp, #32]
 801e886:	321a      	adds	r2, #26
 801e888:	47b8      	blx	r7
 801e88a:	3001      	adds	r0, #1
 801e88c:	d0e6      	beq.n	801e85c <_printf_common+0xa8>
 801e88e:	3601      	adds	r6, #1
 801e890:	e7d1      	b.n	801e836 <_printf_common+0x82>
	...

0801e894 <_printf_i>:
 801e894:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e896:	b08b      	sub	sp, #44	@ 0x2c
 801e898:	9206      	str	r2, [sp, #24]
 801e89a:	000a      	movs	r2, r1
 801e89c:	3243      	adds	r2, #67	@ 0x43
 801e89e:	9307      	str	r3, [sp, #28]
 801e8a0:	9005      	str	r0, [sp, #20]
 801e8a2:	9203      	str	r2, [sp, #12]
 801e8a4:	7e0a      	ldrb	r2, [r1, #24]
 801e8a6:	000c      	movs	r4, r1
 801e8a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e8aa:	2a78      	cmp	r2, #120	@ 0x78
 801e8ac:	d809      	bhi.n	801e8c2 <_printf_i+0x2e>
 801e8ae:	2a62      	cmp	r2, #98	@ 0x62
 801e8b0:	d80b      	bhi.n	801e8ca <_printf_i+0x36>
 801e8b2:	2a00      	cmp	r2, #0
 801e8b4:	d100      	bne.n	801e8b8 <_printf_i+0x24>
 801e8b6:	e0bc      	b.n	801ea32 <_printf_i+0x19e>
 801e8b8:	497b      	ldr	r1, [pc, #492]	@ (801eaa8 <_printf_i+0x214>)
 801e8ba:	9104      	str	r1, [sp, #16]
 801e8bc:	2a58      	cmp	r2, #88	@ 0x58
 801e8be:	d100      	bne.n	801e8c2 <_printf_i+0x2e>
 801e8c0:	e090      	b.n	801e9e4 <_printf_i+0x150>
 801e8c2:	0025      	movs	r5, r4
 801e8c4:	3542      	adds	r5, #66	@ 0x42
 801e8c6:	702a      	strb	r2, [r5, #0]
 801e8c8:	e022      	b.n	801e910 <_printf_i+0x7c>
 801e8ca:	0010      	movs	r0, r2
 801e8cc:	3863      	subs	r0, #99	@ 0x63
 801e8ce:	2815      	cmp	r0, #21
 801e8d0:	d8f7      	bhi.n	801e8c2 <_printf_i+0x2e>
 801e8d2:	f7e1 fc5d 	bl	8000190 <__gnu_thumb1_case_shi>
 801e8d6:	0016      	.short	0x0016
 801e8d8:	fff6001f 	.word	0xfff6001f
 801e8dc:	fff6fff6 	.word	0xfff6fff6
 801e8e0:	001ffff6 	.word	0x001ffff6
 801e8e4:	fff6fff6 	.word	0xfff6fff6
 801e8e8:	fff6fff6 	.word	0xfff6fff6
 801e8ec:	003600a1 	.word	0x003600a1
 801e8f0:	fff60080 	.word	0xfff60080
 801e8f4:	00b2fff6 	.word	0x00b2fff6
 801e8f8:	0036fff6 	.word	0x0036fff6
 801e8fc:	fff6fff6 	.word	0xfff6fff6
 801e900:	0084      	.short	0x0084
 801e902:	0025      	movs	r5, r4
 801e904:	681a      	ldr	r2, [r3, #0]
 801e906:	3542      	adds	r5, #66	@ 0x42
 801e908:	1d11      	adds	r1, r2, #4
 801e90a:	6019      	str	r1, [r3, #0]
 801e90c:	6813      	ldr	r3, [r2, #0]
 801e90e:	702b      	strb	r3, [r5, #0]
 801e910:	2301      	movs	r3, #1
 801e912:	e0a0      	b.n	801ea56 <_printf_i+0x1c2>
 801e914:	6818      	ldr	r0, [r3, #0]
 801e916:	6809      	ldr	r1, [r1, #0]
 801e918:	1d02      	adds	r2, r0, #4
 801e91a:	060d      	lsls	r5, r1, #24
 801e91c:	d50b      	bpl.n	801e936 <_printf_i+0xa2>
 801e91e:	6806      	ldr	r6, [r0, #0]
 801e920:	601a      	str	r2, [r3, #0]
 801e922:	2e00      	cmp	r6, #0
 801e924:	da03      	bge.n	801e92e <_printf_i+0x9a>
 801e926:	232d      	movs	r3, #45	@ 0x2d
 801e928:	9a03      	ldr	r2, [sp, #12]
 801e92a:	4276      	negs	r6, r6
 801e92c:	7013      	strb	r3, [r2, #0]
 801e92e:	4b5e      	ldr	r3, [pc, #376]	@ (801eaa8 <_printf_i+0x214>)
 801e930:	270a      	movs	r7, #10
 801e932:	9304      	str	r3, [sp, #16]
 801e934:	e018      	b.n	801e968 <_printf_i+0xd4>
 801e936:	6806      	ldr	r6, [r0, #0]
 801e938:	601a      	str	r2, [r3, #0]
 801e93a:	0649      	lsls	r1, r1, #25
 801e93c:	d5f1      	bpl.n	801e922 <_printf_i+0x8e>
 801e93e:	b236      	sxth	r6, r6
 801e940:	e7ef      	b.n	801e922 <_printf_i+0x8e>
 801e942:	6808      	ldr	r0, [r1, #0]
 801e944:	6819      	ldr	r1, [r3, #0]
 801e946:	c940      	ldmia	r1!, {r6}
 801e948:	0605      	lsls	r5, r0, #24
 801e94a:	d402      	bmi.n	801e952 <_printf_i+0xbe>
 801e94c:	0640      	lsls	r0, r0, #25
 801e94e:	d500      	bpl.n	801e952 <_printf_i+0xbe>
 801e950:	b2b6      	uxth	r6, r6
 801e952:	6019      	str	r1, [r3, #0]
 801e954:	4b54      	ldr	r3, [pc, #336]	@ (801eaa8 <_printf_i+0x214>)
 801e956:	270a      	movs	r7, #10
 801e958:	9304      	str	r3, [sp, #16]
 801e95a:	2a6f      	cmp	r2, #111	@ 0x6f
 801e95c:	d100      	bne.n	801e960 <_printf_i+0xcc>
 801e95e:	3f02      	subs	r7, #2
 801e960:	0023      	movs	r3, r4
 801e962:	2200      	movs	r2, #0
 801e964:	3343      	adds	r3, #67	@ 0x43
 801e966:	701a      	strb	r2, [r3, #0]
 801e968:	6863      	ldr	r3, [r4, #4]
 801e96a:	60a3      	str	r3, [r4, #8]
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	db03      	blt.n	801e978 <_printf_i+0xe4>
 801e970:	2104      	movs	r1, #4
 801e972:	6822      	ldr	r2, [r4, #0]
 801e974:	438a      	bics	r2, r1
 801e976:	6022      	str	r2, [r4, #0]
 801e978:	2e00      	cmp	r6, #0
 801e97a:	d102      	bne.n	801e982 <_printf_i+0xee>
 801e97c:	9d03      	ldr	r5, [sp, #12]
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d00c      	beq.n	801e99c <_printf_i+0x108>
 801e982:	9d03      	ldr	r5, [sp, #12]
 801e984:	0030      	movs	r0, r6
 801e986:	0039      	movs	r1, r7
 801e988:	f7e1 fc92 	bl	80002b0 <__aeabi_uidivmod>
 801e98c:	9b04      	ldr	r3, [sp, #16]
 801e98e:	3d01      	subs	r5, #1
 801e990:	5c5b      	ldrb	r3, [r3, r1]
 801e992:	702b      	strb	r3, [r5, #0]
 801e994:	0033      	movs	r3, r6
 801e996:	0006      	movs	r6, r0
 801e998:	429f      	cmp	r7, r3
 801e99a:	d9f3      	bls.n	801e984 <_printf_i+0xf0>
 801e99c:	2f08      	cmp	r7, #8
 801e99e:	d109      	bne.n	801e9b4 <_printf_i+0x120>
 801e9a0:	6823      	ldr	r3, [r4, #0]
 801e9a2:	07db      	lsls	r3, r3, #31
 801e9a4:	d506      	bpl.n	801e9b4 <_printf_i+0x120>
 801e9a6:	6862      	ldr	r2, [r4, #4]
 801e9a8:	6923      	ldr	r3, [r4, #16]
 801e9aa:	429a      	cmp	r2, r3
 801e9ac:	dc02      	bgt.n	801e9b4 <_printf_i+0x120>
 801e9ae:	2330      	movs	r3, #48	@ 0x30
 801e9b0:	3d01      	subs	r5, #1
 801e9b2:	702b      	strb	r3, [r5, #0]
 801e9b4:	9b03      	ldr	r3, [sp, #12]
 801e9b6:	1b5b      	subs	r3, r3, r5
 801e9b8:	6123      	str	r3, [r4, #16]
 801e9ba:	9b07      	ldr	r3, [sp, #28]
 801e9bc:	0021      	movs	r1, r4
 801e9be:	9300      	str	r3, [sp, #0]
 801e9c0:	9805      	ldr	r0, [sp, #20]
 801e9c2:	9b06      	ldr	r3, [sp, #24]
 801e9c4:	aa09      	add	r2, sp, #36	@ 0x24
 801e9c6:	f7ff fef5 	bl	801e7b4 <_printf_common>
 801e9ca:	3001      	adds	r0, #1
 801e9cc:	d148      	bne.n	801ea60 <_printf_i+0x1cc>
 801e9ce:	2001      	movs	r0, #1
 801e9d0:	4240      	negs	r0, r0
 801e9d2:	b00b      	add	sp, #44	@ 0x2c
 801e9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e9d6:	2220      	movs	r2, #32
 801e9d8:	6809      	ldr	r1, [r1, #0]
 801e9da:	430a      	orrs	r2, r1
 801e9dc:	6022      	str	r2, [r4, #0]
 801e9de:	2278      	movs	r2, #120	@ 0x78
 801e9e0:	4932      	ldr	r1, [pc, #200]	@ (801eaac <_printf_i+0x218>)
 801e9e2:	9104      	str	r1, [sp, #16]
 801e9e4:	0021      	movs	r1, r4
 801e9e6:	3145      	adds	r1, #69	@ 0x45
 801e9e8:	700a      	strb	r2, [r1, #0]
 801e9ea:	6819      	ldr	r1, [r3, #0]
 801e9ec:	6822      	ldr	r2, [r4, #0]
 801e9ee:	c940      	ldmia	r1!, {r6}
 801e9f0:	0610      	lsls	r0, r2, #24
 801e9f2:	d402      	bmi.n	801e9fa <_printf_i+0x166>
 801e9f4:	0650      	lsls	r0, r2, #25
 801e9f6:	d500      	bpl.n	801e9fa <_printf_i+0x166>
 801e9f8:	b2b6      	uxth	r6, r6
 801e9fa:	6019      	str	r1, [r3, #0]
 801e9fc:	07d3      	lsls	r3, r2, #31
 801e9fe:	d502      	bpl.n	801ea06 <_printf_i+0x172>
 801ea00:	2320      	movs	r3, #32
 801ea02:	4313      	orrs	r3, r2
 801ea04:	6023      	str	r3, [r4, #0]
 801ea06:	2e00      	cmp	r6, #0
 801ea08:	d001      	beq.n	801ea0e <_printf_i+0x17a>
 801ea0a:	2710      	movs	r7, #16
 801ea0c:	e7a8      	b.n	801e960 <_printf_i+0xcc>
 801ea0e:	2220      	movs	r2, #32
 801ea10:	6823      	ldr	r3, [r4, #0]
 801ea12:	4393      	bics	r3, r2
 801ea14:	6023      	str	r3, [r4, #0]
 801ea16:	e7f8      	b.n	801ea0a <_printf_i+0x176>
 801ea18:	681a      	ldr	r2, [r3, #0]
 801ea1a:	680d      	ldr	r5, [r1, #0]
 801ea1c:	1d10      	adds	r0, r2, #4
 801ea1e:	6949      	ldr	r1, [r1, #20]
 801ea20:	6018      	str	r0, [r3, #0]
 801ea22:	6813      	ldr	r3, [r2, #0]
 801ea24:	062e      	lsls	r6, r5, #24
 801ea26:	d501      	bpl.n	801ea2c <_printf_i+0x198>
 801ea28:	6019      	str	r1, [r3, #0]
 801ea2a:	e002      	b.n	801ea32 <_printf_i+0x19e>
 801ea2c:	066d      	lsls	r5, r5, #25
 801ea2e:	d5fb      	bpl.n	801ea28 <_printf_i+0x194>
 801ea30:	8019      	strh	r1, [r3, #0]
 801ea32:	2300      	movs	r3, #0
 801ea34:	9d03      	ldr	r5, [sp, #12]
 801ea36:	6123      	str	r3, [r4, #16]
 801ea38:	e7bf      	b.n	801e9ba <_printf_i+0x126>
 801ea3a:	681a      	ldr	r2, [r3, #0]
 801ea3c:	1d11      	adds	r1, r2, #4
 801ea3e:	6019      	str	r1, [r3, #0]
 801ea40:	6815      	ldr	r5, [r2, #0]
 801ea42:	2100      	movs	r1, #0
 801ea44:	0028      	movs	r0, r5
 801ea46:	6862      	ldr	r2, [r4, #4]
 801ea48:	f000 fb7b 	bl	801f142 <memchr>
 801ea4c:	2800      	cmp	r0, #0
 801ea4e:	d001      	beq.n	801ea54 <_printf_i+0x1c0>
 801ea50:	1b40      	subs	r0, r0, r5
 801ea52:	6060      	str	r0, [r4, #4]
 801ea54:	6863      	ldr	r3, [r4, #4]
 801ea56:	6123      	str	r3, [r4, #16]
 801ea58:	2300      	movs	r3, #0
 801ea5a:	9a03      	ldr	r2, [sp, #12]
 801ea5c:	7013      	strb	r3, [r2, #0]
 801ea5e:	e7ac      	b.n	801e9ba <_printf_i+0x126>
 801ea60:	002a      	movs	r2, r5
 801ea62:	6923      	ldr	r3, [r4, #16]
 801ea64:	9906      	ldr	r1, [sp, #24]
 801ea66:	9805      	ldr	r0, [sp, #20]
 801ea68:	9d07      	ldr	r5, [sp, #28]
 801ea6a:	47a8      	blx	r5
 801ea6c:	3001      	adds	r0, #1
 801ea6e:	d0ae      	beq.n	801e9ce <_printf_i+0x13a>
 801ea70:	6823      	ldr	r3, [r4, #0]
 801ea72:	079b      	lsls	r3, r3, #30
 801ea74:	d415      	bmi.n	801eaa2 <_printf_i+0x20e>
 801ea76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea78:	68e0      	ldr	r0, [r4, #12]
 801ea7a:	4298      	cmp	r0, r3
 801ea7c:	daa9      	bge.n	801e9d2 <_printf_i+0x13e>
 801ea7e:	0018      	movs	r0, r3
 801ea80:	e7a7      	b.n	801e9d2 <_printf_i+0x13e>
 801ea82:	0022      	movs	r2, r4
 801ea84:	2301      	movs	r3, #1
 801ea86:	9906      	ldr	r1, [sp, #24]
 801ea88:	9805      	ldr	r0, [sp, #20]
 801ea8a:	9e07      	ldr	r6, [sp, #28]
 801ea8c:	3219      	adds	r2, #25
 801ea8e:	47b0      	blx	r6
 801ea90:	3001      	adds	r0, #1
 801ea92:	d09c      	beq.n	801e9ce <_printf_i+0x13a>
 801ea94:	3501      	adds	r5, #1
 801ea96:	68e3      	ldr	r3, [r4, #12]
 801ea98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ea9a:	1a9b      	subs	r3, r3, r2
 801ea9c:	42ab      	cmp	r3, r5
 801ea9e:	dcf0      	bgt.n	801ea82 <_printf_i+0x1ee>
 801eaa0:	e7e9      	b.n	801ea76 <_printf_i+0x1e2>
 801eaa2:	2500      	movs	r5, #0
 801eaa4:	e7f7      	b.n	801ea96 <_printf_i+0x202>
 801eaa6:	46c0      	nop			@ (mov r8, r8)
 801eaa8:	0802434b 	.word	0x0802434b
 801eaac:	0802435c 	.word	0x0802435c

0801eab0 <std>:
 801eab0:	2300      	movs	r3, #0
 801eab2:	b510      	push	{r4, lr}
 801eab4:	0004      	movs	r4, r0
 801eab6:	6003      	str	r3, [r0, #0]
 801eab8:	6043      	str	r3, [r0, #4]
 801eaba:	6083      	str	r3, [r0, #8]
 801eabc:	8181      	strh	r1, [r0, #12]
 801eabe:	6643      	str	r3, [r0, #100]	@ 0x64
 801eac0:	81c2      	strh	r2, [r0, #14]
 801eac2:	6103      	str	r3, [r0, #16]
 801eac4:	6143      	str	r3, [r0, #20]
 801eac6:	6183      	str	r3, [r0, #24]
 801eac8:	0019      	movs	r1, r3
 801eaca:	2208      	movs	r2, #8
 801eacc:	305c      	adds	r0, #92	@ 0x5c
 801eace:	f000 fa67 	bl	801efa0 <memset>
 801ead2:	4b0b      	ldr	r3, [pc, #44]	@ (801eb00 <std+0x50>)
 801ead4:	6224      	str	r4, [r4, #32]
 801ead6:	6263      	str	r3, [r4, #36]	@ 0x24
 801ead8:	4b0a      	ldr	r3, [pc, #40]	@ (801eb04 <std+0x54>)
 801eada:	62a3      	str	r3, [r4, #40]	@ 0x28
 801eadc:	4b0a      	ldr	r3, [pc, #40]	@ (801eb08 <std+0x58>)
 801eade:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801eae0:	4b0a      	ldr	r3, [pc, #40]	@ (801eb0c <std+0x5c>)
 801eae2:	6323      	str	r3, [r4, #48]	@ 0x30
 801eae4:	4b0a      	ldr	r3, [pc, #40]	@ (801eb10 <std+0x60>)
 801eae6:	429c      	cmp	r4, r3
 801eae8:	d005      	beq.n	801eaf6 <std+0x46>
 801eaea:	4b0a      	ldr	r3, [pc, #40]	@ (801eb14 <std+0x64>)
 801eaec:	429c      	cmp	r4, r3
 801eaee:	d002      	beq.n	801eaf6 <std+0x46>
 801eaf0:	4b09      	ldr	r3, [pc, #36]	@ (801eb18 <std+0x68>)
 801eaf2:	429c      	cmp	r4, r3
 801eaf4:	d103      	bne.n	801eafe <std+0x4e>
 801eaf6:	0020      	movs	r0, r4
 801eaf8:	3058      	adds	r0, #88	@ 0x58
 801eafa:	f000 fb1f 	bl	801f13c <__retarget_lock_init_recursive>
 801eafe:	bd10      	pop	{r4, pc}
 801eb00:	0801ed59 	.word	0x0801ed59
 801eb04:	0801ed81 	.word	0x0801ed81
 801eb08:	0801edb9 	.word	0x0801edb9
 801eb0c:	0801ede5 	.word	0x0801ede5
 801eb10:	200037b4 	.word	0x200037b4
 801eb14:	2000381c 	.word	0x2000381c
 801eb18:	20003884 	.word	0x20003884

0801eb1c <stdio_exit_handler>:
 801eb1c:	b510      	push	{r4, lr}
 801eb1e:	4a03      	ldr	r2, [pc, #12]	@ (801eb2c <stdio_exit_handler+0x10>)
 801eb20:	4903      	ldr	r1, [pc, #12]	@ (801eb30 <stdio_exit_handler+0x14>)
 801eb22:	4804      	ldr	r0, [pc, #16]	@ (801eb34 <stdio_exit_handler+0x18>)
 801eb24:	f000 f86c 	bl	801ec00 <_fwalk_sglue>
 801eb28:	bd10      	pop	{r4, pc}
 801eb2a:	46c0      	nop			@ (mov r8, r8)
 801eb2c:	20000250 	.word	0x20000250
 801eb30:	08021761 	.word	0x08021761
 801eb34:	200003cc 	.word	0x200003cc

0801eb38 <cleanup_stdio>:
 801eb38:	6841      	ldr	r1, [r0, #4]
 801eb3a:	4b0b      	ldr	r3, [pc, #44]	@ (801eb68 <cleanup_stdio+0x30>)
 801eb3c:	b510      	push	{r4, lr}
 801eb3e:	0004      	movs	r4, r0
 801eb40:	4299      	cmp	r1, r3
 801eb42:	d001      	beq.n	801eb48 <cleanup_stdio+0x10>
 801eb44:	f002 fe0c 	bl	8021760 <_fflush_r>
 801eb48:	68a1      	ldr	r1, [r4, #8]
 801eb4a:	4b08      	ldr	r3, [pc, #32]	@ (801eb6c <cleanup_stdio+0x34>)
 801eb4c:	4299      	cmp	r1, r3
 801eb4e:	d002      	beq.n	801eb56 <cleanup_stdio+0x1e>
 801eb50:	0020      	movs	r0, r4
 801eb52:	f002 fe05 	bl	8021760 <_fflush_r>
 801eb56:	68e1      	ldr	r1, [r4, #12]
 801eb58:	4b05      	ldr	r3, [pc, #20]	@ (801eb70 <cleanup_stdio+0x38>)
 801eb5a:	4299      	cmp	r1, r3
 801eb5c:	d002      	beq.n	801eb64 <cleanup_stdio+0x2c>
 801eb5e:	0020      	movs	r0, r4
 801eb60:	f002 fdfe 	bl	8021760 <_fflush_r>
 801eb64:	bd10      	pop	{r4, pc}
 801eb66:	46c0      	nop			@ (mov r8, r8)
 801eb68:	200037b4 	.word	0x200037b4
 801eb6c:	2000381c 	.word	0x2000381c
 801eb70:	20003884 	.word	0x20003884

0801eb74 <global_stdio_init.part.0>:
 801eb74:	b510      	push	{r4, lr}
 801eb76:	4b09      	ldr	r3, [pc, #36]	@ (801eb9c <global_stdio_init.part.0+0x28>)
 801eb78:	4a09      	ldr	r2, [pc, #36]	@ (801eba0 <global_stdio_init.part.0+0x2c>)
 801eb7a:	2104      	movs	r1, #4
 801eb7c:	601a      	str	r2, [r3, #0]
 801eb7e:	4809      	ldr	r0, [pc, #36]	@ (801eba4 <global_stdio_init.part.0+0x30>)
 801eb80:	2200      	movs	r2, #0
 801eb82:	f7ff ff95 	bl	801eab0 <std>
 801eb86:	2201      	movs	r2, #1
 801eb88:	2109      	movs	r1, #9
 801eb8a:	4807      	ldr	r0, [pc, #28]	@ (801eba8 <global_stdio_init.part.0+0x34>)
 801eb8c:	f7ff ff90 	bl	801eab0 <std>
 801eb90:	2202      	movs	r2, #2
 801eb92:	2112      	movs	r1, #18
 801eb94:	4805      	ldr	r0, [pc, #20]	@ (801ebac <global_stdio_init.part.0+0x38>)
 801eb96:	f7ff ff8b 	bl	801eab0 <std>
 801eb9a:	bd10      	pop	{r4, pc}
 801eb9c:	200038ec 	.word	0x200038ec
 801eba0:	0801eb1d 	.word	0x0801eb1d
 801eba4:	200037b4 	.word	0x200037b4
 801eba8:	2000381c 	.word	0x2000381c
 801ebac:	20003884 	.word	0x20003884

0801ebb0 <__sfp_lock_acquire>:
 801ebb0:	b510      	push	{r4, lr}
 801ebb2:	4802      	ldr	r0, [pc, #8]	@ (801ebbc <__sfp_lock_acquire+0xc>)
 801ebb4:	f000 fac3 	bl	801f13e <__retarget_lock_acquire_recursive>
 801ebb8:	bd10      	pop	{r4, pc}
 801ebba:	46c0      	nop			@ (mov r8, r8)
 801ebbc:	200038f5 	.word	0x200038f5

0801ebc0 <__sfp_lock_release>:
 801ebc0:	b510      	push	{r4, lr}
 801ebc2:	4802      	ldr	r0, [pc, #8]	@ (801ebcc <__sfp_lock_release+0xc>)
 801ebc4:	f000 fabc 	bl	801f140 <__retarget_lock_release_recursive>
 801ebc8:	bd10      	pop	{r4, pc}
 801ebca:	46c0      	nop			@ (mov r8, r8)
 801ebcc:	200038f5 	.word	0x200038f5

0801ebd0 <__sinit>:
 801ebd0:	b510      	push	{r4, lr}
 801ebd2:	0004      	movs	r4, r0
 801ebd4:	f7ff ffec 	bl	801ebb0 <__sfp_lock_acquire>
 801ebd8:	6a23      	ldr	r3, [r4, #32]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d002      	beq.n	801ebe4 <__sinit+0x14>
 801ebde:	f7ff ffef 	bl	801ebc0 <__sfp_lock_release>
 801ebe2:	bd10      	pop	{r4, pc}
 801ebe4:	4b04      	ldr	r3, [pc, #16]	@ (801ebf8 <__sinit+0x28>)
 801ebe6:	6223      	str	r3, [r4, #32]
 801ebe8:	4b04      	ldr	r3, [pc, #16]	@ (801ebfc <__sinit+0x2c>)
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	2b00      	cmp	r3, #0
 801ebee:	d1f6      	bne.n	801ebde <__sinit+0xe>
 801ebf0:	f7ff ffc0 	bl	801eb74 <global_stdio_init.part.0>
 801ebf4:	e7f3      	b.n	801ebde <__sinit+0xe>
 801ebf6:	46c0      	nop			@ (mov r8, r8)
 801ebf8:	0801eb39 	.word	0x0801eb39
 801ebfc:	200038ec 	.word	0x200038ec

0801ec00 <_fwalk_sglue>:
 801ec00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ec02:	0014      	movs	r4, r2
 801ec04:	2600      	movs	r6, #0
 801ec06:	9000      	str	r0, [sp, #0]
 801ec08:	9101      	str	r1, [sp, #4]
 801ec0a:	68a5      	ldr	r5, [r4, #8]
 801ec0c:	6867      	ldr	r7, [r4, #4]
 801ec0e:	3f01      	subs	r7, #1
 801ec10:	d504      	bpl.n	801ec1c <_fwalk_sglue+0x1c>
 801ec12:	6824      	ldr	r4, [r4, #0]
 801ec14:	2c00      	cmp	r4, #0
 801ec16:	d1f8      	bne.n	801ec0a <_fwalk_sglue+0xa>
 801ec18:	0030      	movs	r0, r6
 801ec1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ec1c:	89ab      	ldrh	r3, [r5, #12]
 801ec1e:	2b01      	cmp	r3, #1
 801ec20:	d908      	bls.n	801ec34 <_fwalk_sglue+0x34>
 801ec22:	220e      	movs	r2, #14
 801ec24:	5eab      	ldrsh	r3, [r5, r2]
 801ec26:	3301      	adds	r3, #1
 801ec28:	d004      	beq.n	801ec34 <_fwalk_sglue+0x34>
 801ec2a:	0029      	movs	r1, r5
 801ec2c:	9800      	ldr	r0, [sp, #0]
 801ec2e:	9b01      	ldr	r3, [sp, #4]
 801ec30:	4798      	blx	r3
 801ec32:	4306      	orrs	r6, r0
 801ec34:	3568      	adds	r5, #104	@ 0x68
 801ec36:	e7ea      	b.n	801ec0e <_fwalk_sglue+0xe>

0801ec38 <iprintf>:
 801ec38:	b40f      	push	{r0, r1, r2, r3}
 801ec3a:	b507      	push	{r0, r1, r2, lr}
 801ec3c:	4905      	ldr	r1, [pc, #20]	@ (801ec54 <iprintf+0x1c>)
 801ec3e:	ab04      	add	r3, sp, #16
 801ec40:	6808      	ldr	r0, [r1, #0]
 801ec42:	cb04      	ldmia	r3!, {r2}
 801ec44:	6881      	ldr	r1, [r0, #8]
 801ec46:	9301      	str	r3, [sp, #4]
 801ec48:	f002 fbe8 	bl	802141c <_vfiprintf_r>
 801ec4c:	b003      	add	sp, #12
 801ec4e:	bc08      	pop	{r3}
 801ec50:	b004      	add	sp, #16
 801ec52:	4718      	bx	r3
 801ec54:	200003c8 	.word	0x200003c8

0801ec58 <_puts_r>:
 801ec58:	6a03      	ldr	r3, [r0, #32]
 801ec5a:	b570      	push	{r4, r5, r6, lr}
 801ec5c:	0005      	movs	r5, r0
 801ec5e:	000e      	movs	r6, r1
 801ec60:	6884      	ldr	r4, [r0, #8]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d101      	bne.n	801ec6a <_puts_r+0x12>
 801ec66:	f7ff ffb3 	bl	801ebd0 <__sinit>
 801ec6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ec6c:	07db      	lsls	r3, r3, #31
 801ec6e:	d405      	bmi.n	801ec7c <_puts_r+0x24>
 801ec70:	89a3      	ldrh	r3, [r4, #12]
 801ec72:	059b      	lsls	r3, r3, #22
 801ec74:	d402      	bmi.n	801ec7c <_puts_r+0x24>
 801ec76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ec78:	f000 fa61 	bl	801f13e <__retarget_lock_acquire_recursive>
 801ec7c:	89a3      	ldrh	r3, [r4, #12]
 801ec7e:	071b      	lsls	r3, r3, #28
 801ec80:	d502      	bpl.n	801ec88 <_puts_r+0x30>
 801ec82:	6923      	ldr	r3, [r4, #16]
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d11f      	bne.n	801ecc8 <_puts_r+0x70>
 801ec88:	0021      	movs	r1, r4
 801ec8a:	0028      	movs	r0, r5
 801ec8c:	f000 f92a 	bl	801eee4 <__swsetup_r>
 801ec90:	2800      	cmp	r0, #0
 801ec92:	d019      	beq.n	801ecc8 <_puts_r+0x70>
 801ec94:	2501      	movs	r5, #1
 801ec96:	426d      	negs	r5, r5
 801ec98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ec9a:	07db      	lsls	r3, r3, #31
 801ec9c:	d405      	bmi.n	801ecaa <_puts_r+0x52>
 801ec9e:	89a3      	ldrh	r3, [r4, #12]
 801eca0:	059b      	lsls	r3, r3, #22
 801eca2:	d402      	bmi.n	801ecaa <_puts_r+0x52>
 801eca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801eca6:	f000 fa4b 	bl	801f140 <__retarget_lock_release_recursive>
 801ecaa:	0028      	movs	r0, r5
 801ecac:	bd70      	pop	{r4, r5, r6, pc}
 801ecae:	3601      	adds	r6, #1
 801ecb0:	60a3      	str	r3, [r4, #8]
 801ecb2:	2b00      	cmp	r3, #0
 801ecb4:	da04      	bge.n	801ecc0 <_puts_r+0x68>
 801ecb6:	69a2      	ldr	r2, [r4, #24]
 801ecb8:	429a      	cmp	r2, r3
 801ecba:	dc16      	bgt.n	801ecea <_puts_r+0x92>
 801ecbc:	290a      	cmp	r1, #10
 801ecbe:	d014      	beq.n	801ecea <_puts_r+0x92>
 801ecc0:	6823      	ldr	r3, [r4, #0]
 801ecc2:	1c5a      	adds	r2, r3, #1
 801ecc4:	6022      	str	r2, [r4, #0]
 801ecc6:	7019      	strb	r1, [r3, #0]
 801ecc8:	68a3      	ldr	r3, [r4, #8]
 801ecca:	7831      	ldrb	r1, [r6, #0]
 801eccc:	3b01      	subs	r3, #1
 801ecce:	2900      	cmp	r1, #0
 801ecd0:	d1ed      	bne.n	801ecae <_puts_r+0x56>
 801ecd2:	60a3      	str	r3, [r4, #8]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	da0f      	bge.n	801ecf8 <_puts_r+0xa0>
 801ecd8:	0022      	movs	r2, r4
 801ecda:	0028      	movs	r0, r5
 801ecdc:	310a      	adds	r1, #10
 801ecde:	f000 f8bf 	bl	801ee60 <__swbuf_r>
 801ece2:	3001      	adds	r0, #1
 801ece4:	d0d6      	beq.n	801ec94 <_puts_r+0x3c>
 801ece6:	250a      	movs	r5, #10
 801ece8:	e7d6      	b.n	801ec98 <_puts_r+0x40>
 801ecea:	0022      	movs	r2, r4
 801ecec:	0028      	movs	r0, r5
 801ecee:	f000 f8b7 	bl	801ee60 <__swbuf_r>
 801ecf2:	3001      	adds	r0, #1
 801ecf4:	d1e8      	bne.n	801ecc8 <_puts_r+0x70>
 801ecf6:	e7cd      	b.n	801ec94 <_puts_r+0x3c>
 801ecf8:	6823      	ldr	r3, [r4, #0]
 801ecfa:	1c5a      	adds	r2, r3, #1
 801ecfc:	6022      	str	r2, [r4, #0]
 801ecfe:	220a      	movs	r2, #10
 801ed00:	701a      	strb	r2, [r3, #0]
 801ed02:	e7f0      	b.n	801ece6 <_puts_r+0x8e>

0801ed04 <puts>:
 801ed04:	b510      	push	{r4, lr}
 801ed06:	4b03      	ldr	r3, [pc, #12]	@ (801ed14 <puts+0x10>)
 801ed08:	0001      	movs	r1, r0
 801ed0a:	6818      	ldr	r0, [r3, #0]
 801ed0c:	f7ff ffa4 	bl	801ec58 <_puts_r>
 801ed10:	bd10      	pop	{r4, pc}
 801ed12:	46c0      	nop			@ (mov r8, r8)
 801ed14:	200003c8 	.word	0x200003c8

0801ed18 <siprintf>:
 801ed18:	b40e      	push	{r1, r2, r3}
 801ed1a:	b500      	push	{lr}
 801ed1c:	490b      	ldr	r1, [pc, #44]	@ (801ed4c <siprintf+0x34>)
 801ed1e:	b09c      	sub	sp, #112	@ 0x70
 801ed20:	ab1d      	add	r3, sp, #116	@ 0x74
 801ed22:	9002      	str	r0, [sp, #8]
 801ed24:	9006      	str	r0, [sp, #24]
 801ed26:	9107      	str	r1, [sp, #28]
 801ed28:	9104      	str	r1, [sp, #16]
 801ed2a:	4809      	ldr	r0, [pc, #36]	@ (801ed50 <siprintf+0x38>)
 801ed2c:	4909      	ldr	r1, [pc, #36]	@ (801ed54 <siprintf+0x3c>)
 801ed2e:	cb04      	ldmia	r3!, {r2}
 801ed30:	9105      	str	r1, [sp, #20]
 801ed32:	6800      	ldr	r0, [r0, #0]
 801ed34:	a902      	add	r1, sp, #8
 801ed36:	9301      	str	r3, [sp, #4]
 801ed38:	f002 fa4a 	bl	80211d0 <_svfiprintf_r>
 801ed3c:	2200      	movs	r2, #0
 801ed3e:	9b02      	ldr	r3, [sp, #8]
 801ed40:	701a      	strb	r2, [r3, #0]
 801ed42:	b01c      	add	sp, #112	@ 0x70
 801ed44:	bc08      	pop	{r3}
 801ed46:	b003      	add	sp, #12
 801ed48:	4718      	bx	r3
 801ed4a:	46c0      	nop			@ (mov r8, r8)
 801ed4c:	7fffffff 	.word	0x7fffffff
 801ed50:	200003c8 	.word	0x200003c8
 801ed54:	ffff0208 	.word	0xffff0208

0801ed58 <__sread>:
 801ed58:	b570      	push	{r4, r5, r6, lr}
 801ed5a:	000c      	movs	r4, r1
 801ed5c:	250e      	movs	r5, #14
 801ed5e:	5f49      	ldrsh	r1, [r1, r5]
 801ed60:	f000 f99a 	bl	801f098 <_read_r>
 801ed64:	2800      	cmp	r0, #0
 801ed66:	db03      	blt.n	801ed70 <__sread+0x18>
 801ed68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801ed6a:	181b      	adds	r3, r3, r0
 801ed6c:	6563      	str	r3, [r4, #84]	@ 0x54
 801ed6e:	bd70      	pop	{r4, r5, r6, pc}
 801ed70:	89a3      	ldrh	r3, [r4, #12]
 801ed72:	4a02      	ldr	r2, [pc, #8]	@ (801ed7c <__sread+0x24>)
 801ed74:	4013      	ands	r3, r2
 801ed76:	81a3      	strh	r3, [r4, #12]
 801ed78:	e7f9      	b.n	801ed6e <__sread+0x16>
 801ed7a:	46c0      	nop			@ (mov r8, r8)
 801ed7c:	ffffefff 	.word	0xffffefff

0801ed80 <__swrite>:
 801ed80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed82:	001f      	movs	r7, r3
 801ed84:	898b      	ldrh	r3, [r1, #12]
 801ed86:	0005      	movs	r5, r0
 801ed88:	000c      	movs	r4, r1
 801ed8a:	0016      	movs	r6, r2
 801ed8c:	05db      	lsls	r3, r3, #23
 801ed8e:	d505      	bpl.n	801ed9c <__swrite+0x1c>
 801ed90:	230e      	movs	r3, #14
 801ed92:	5ec9      	ldrsh	r1, [r1, r3]
 801ed94:	2200      	movs	r2, #0
 801ed96:	2302      	movs	r3, #2
 801ed98:	f000 f96a 	bl	801f070 <_lseek_r>
 801ed9c:	89a3      	ldrh	r3, [r4, #12]
 801ed9e:	4a05      	ldr	r2, [pc, #20]	@ (801edb4 <__swrite+0x34>)
 801eda0:	0028      	movs	r0, r5
 801eda2:	4013      	ands	r3, r2
 801eda4:	81a3      	strh	r3, [r4, #12]
 801eda6:	0032      	movs	r2, r6
 801eda8:	230e      	movs	r3, #14
 801edaa:	5ee1      	ldrsh	r1, [r4, r3]
 801edac:	003b      	movs	r3, r7
 801edae:	f000 f987 	bl	801f0c0 <_write_r>
 801edb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edb4:	ffffefff 	.word	0xffffefff

0801edb8 <__sseek>:
 801edb8:	b570      	push	{r4, r5, r6, lr}
 801edba:	000c      	movs	r4, r1
 801edbc:	250e      	movs	r5, #14
 801edbe:	5f49      	ldrsh	r1, [r1, r5]
 801edc0:	f000 f956 	bl	801f070 <_lseek_r>
 801edc4:	89a3      	ldrh	r3, [r4, #12]
 801edc6:	1c42      	adds	r2, r0, #1
 801edc8:	d103      	bne.n	801edd2 <__sseek+0x1a>
 801edca:	4a05      	ldr	r2, [pc, #20]	@ (801ede0 <__sseek+0x28>)
 801edcc:	4013      	ands	r3, r2
 801edce:	81a3      	strh	r3, [r4, #12]
 801edd0:	bd70      	pop	{r4, r5, r6, pc}
 801edd2:	2280      	movs	r2, #128	@ 0x80
 801edd4:	0152      	lsls	r2, r2, #5
 801edd6:	4313      	orrs	r3, r2
 801edd8:	81a3      	strh	r3, [r4, #12]
 801edda:	6560      	str	r0, [r4, #84]	@ 0x54
 801eddc:	e7f8      	b.n	801edd0 <__sseek+0x18>
 801edde:	46c0      	nop			@ (mov r8, r8)
 801ede0:	ffffefff 	.word	0xffffefff

0801ede4 <__sclose>:
 801ede4:	b510      	push	{r4, lr}
 801ede6:	230e      	movs	r3, #14
 801ede8:	5ec9      	ldrsh	r1, [r1, r3]
 801edea:	f000 f92f 	bl	801f04c <_close_r>
 801edee:	bd10      	pop	{r4, pc}

0801edf0 <_vsniprintf_r>:
 801edf0:	b530      	push	{r4, r5, lr}
 801edf2:	0014      	movs	r4, r2
 801edf4:	0005      	movs	r5, r0
 801edf6:	001a      	movs	r2, r3
 801edf8:	b09b      	sub	sp, #108	@ 0x6c
 801edfa:	2c00      	cmp	r4, #0
 801edfc:	da05      	bge.n	801ee0a <_vsniprintf_r+0x1a>
 801edfe:	238b      	movs	r3, #139	@ 0x8b
 801ee00:	6003      	str	r3, [r0, #0]
 801ee02:	2001      	movs	r0, #1
 801ee04:	4240      	negs	r0, r0
 801ee06:	b01b      	add	sp, #108	@ 0x6c
 801ee08:	bd30      	pop	{r4, r5, pc}
 801ee0a:	2382      	movs	r3, #130	@ 0x82
 801ee0c:	4668      	mov	r0, sp
 801ee0e:	009b      	lsls	r3, r3, #2
 801ee10:	8183      	strh	r3, [r0, #12]
 801ee12:	2300      	movs	r3, #0
 801ee14:	9100      	str	r1, [sp, #0]
 801ee16:	9104      	str	r1, [sp, #16]
 801ee18:	429c      	cmp	r4, r3
 801ee1a:	d000      	beq.n	801ee1e <_vsniprintf_r+0x2e>
 801ee1c:	1e63      	subs	r3, r4, #1
 801ee1e:	9302      	str	r3, [sp, #8]
 801ee20:	9305      	str	r3, [sp, #20]
 801ee22:	2301      	movs	r3, #1
 801ee24:	4669      	mov	r1, sp
 801ee26:	425b      	negs	r3, r3
 801ee28:	81cb      	strh	r3, [r1, #14]
 801ee2a:	0028      	movs	r0, r5
 801ee2c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ee2e:	f002 f9cf 	bl	80211d0 <_svfiprintf_r>
 801ee32:	1c43      	adds	r3, r0, #1
 801ee34:	da01      	bge.n	801ee3a <_vsniprintf_r+0x4a>
 801ee36:	238b      	movs	r3, #139	@ 0x8b
 801ee38:	602b      	str	r3, [r5, #0]
 801ee3a:	2c00      	cmp	r4, #0
 801ee3c:	d0e3      	beq.n	801ee06 <_vsniprintf_r+0x16>
 801ee3e:	2200      	movs	r2, #0
 801ee40:	9b00      	ldr	r3, [sp, #0]
 801ee42:	701a      	strb	r2, [r3, #0]
 801ee44:	e7df      	b.n	801ee06 <_vsniprintf_r+0x16>
	...

0801ee48 <vsniprintf>:
 801ee48:	b513      	push	{r0, r1, r4, lr}
 801ee4a:	4c04      	ldr	r4, [pc, #16]	@ (801ee5c <vsniprintf+0x14>)
 801ee4c:	9300      	str	r3, [sp, #0]
 801ee4e:	0013      	movs	r3, r2
 801ee50:	000a      	movs	r2, r1
 801ee52:	0001      	movs	r1, r0
 801ee54:	6820      	ldr	r0, [r4, #0]
 801ee56:	f7ff ffcb 	bl	801edf0 <_vsniprintf_r>
 801ee5a:	bd16      	pop	{r1, r2, r4, pc}
 801ee5c:	200003c8 	.word	0x200003c8

0801ee60 <__swbuf_r>:
 801ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ee62:	0006      	movs	r6, r0
 801ee64:	000d      	movs	r5, r1
 801ee66:	0014      	movs	r4, r2
 801ee68:	2800      	cmp	r0, #0
 801ee6a:	d004      	beq.n	801ee76 <__swbuf_r+0x16>
 801ee6c:	6a03      	ldr	r3, [r0, #32]
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d101      	bne.n	801ee76 <__swbuf_r+0x16>
 801ee72:	f7ff fead 	bl	801ebd0 <__sinit>
 801ee76:	69a3      	ldr	r3, [r4, #24]
 801ee78:	60a3      	str	r3, [r4, #8]
 801ee7a:	89a3      	ldrh	r3, [r4, #12]
 801ee7c:	071b      	lsls	r3, r3, #28
 801ee7e:	d502      	bpl.n	801ee86 <__swbuf_r+0x26>
 801ee80:	6923      	ldr	r3, [r4, #16]
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d109      	bne.n	801ee9a <__swbuf_r+0x3a>
 801ee86:	0021      	movs	r1, r4
 801ee88:	0030      	movs	r0, r6
 801ee8a:	f000 f82b 	bl	801eee4 <__swsetup_r>
 801ee8e:	2800      	cmp	r0, #0
 801ee90:	d003      	beq.n	801ee9a <__swbuf_r+0x3a>
 801ee92:	2501      	movs	r5, #1
 801ee94:	426d      	negs	r5, r5
 801ee96:	0028      	movs	r0, r5
 801ee98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ee9a:	6923      	ldr	r3, [r4, #16]
 801ee9c:	6820      	ldr	r0, [r4, #0]
 801ee9e:	b2ef      	uxtb	r7, r5
 801eea0:	1ac0      	subs	r0, r0, r3
 801eea2:	6963      	ldr	r3, [r4, #20]
 801eea4:	b2ed      	uxtb	r5, r5
 801eea6:	4283      	cmp	r3, r0
 801eea8:	dc05      	bgt.n	801eeb6 <__swbuf_r+0x56>
 801eeaa:	0021      	movs	r1, r4
 801eeac:	0030      	movs	r0, r6
 801eeae:	f002 fc57 	bl	8021760 <_fflush_r>
 801eeb2:	2800      	cmp	r0, #0
 801eeb4:	d1ed      	bne.n	801ee92 <__swbuf_r+0x32>
 801eeb6:	68a3      	ldr	r3, [r4, #8]
 801eeb8:	3001      	adds	r0, #1
 801eeba:	3b01      	subs	r3, #1
 801eebc:	60a3      	str	r3, [r4, #8]
 801eebe:	6823      	ldr	r3, [r4, #0]
 801eec0:	1c5a      	adds	r2, r3, #1
 801eec2:	6022      	str	r2, [r4, #0]
 801eec4:	701f      	strb	r7, [r3, #0]
 801eec6:	6963      	ldr	r3, [r4, #20]
 801eec8:	4283      	cmp	r3, r0
 801eeca:	d004      	beq.n	801eed6 <__swbuf_r+0x76>
 801eecc:	89a3      	ldrh	r3, [r4, #12]
 801eece:	07db      	lsls	r3, r3, #31
 801eed0:	d5e1      	bpl.n	801ee96 <__swbuf_r+0x36>
 801eed2:	2d0a      	cmp	r5, #10
 801eed4:	d1df      	bne.n	801ee96 <__swbuf_r+0x36>
 801eed6:	0021      	movs	r1, r4
 801eed8:	0030      	movs	r0, r6
 801eeda:	f002 fc41 	bl	8021760 <_fflush_r>
 801eede:	2800      	cmp	r0, #0
 801eee0:	d0d9      	beq.n	801ee96 <__swbuf_r+0x36>
 801eee2:	e7d6      	b.n	801ee92 <__swbuf_r+0x32>

0801eee4 <__swsetup_r>:
 801eee4:	4b2d      	ldr	r3, [pc, #180]	@ (801ef9c <__swsetup_r+0xb8>)
 801eee6:	b570      	push	{r4, r5, r6, lr}
 801eee8:	0005      	movs	r5, r0
 801eeea:	6818      	ldr	r0, [r3, #0]
 801eeec:	000c      	movs	r4, r1
 801eeee:	2800      	cmp	r0, #0
 801eef0:	d004      	beq.n	801eefc <__swsetup_r+0x18>
 801eef2:	6a03      	ldr	r3, [r0, #32]
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d101      	bne.n	801eefc <__swsetup_r+0x18>
 801eef8:	f7ff fe6a 	bl	801ebd0 <__sinit>
 801eefc:	230c      	movs	r3, #12
 801eefe:	5ee2      	ldrsh	r2, [r4, r3]
 801ef00:	0713      	lsls	r3, r2, #28
 801ef02:	d423      	bmi.n	801ef4c <__swsetup_r+0x68>
 801ef04:	06d3      	lsls	r3, r2, #27
 801ef06:	d407      	bmi.n	801ef18 <__swsetup_r+0x34>
 801ef08:	2309      	movs	r3, #9
 801ef0a:	602b      	str	r3, [r5, #0]
 801ef0c:	2340      	movs	r3, #64	@ 0x40
 801ef0e:	2001      	movs	r0, #1
 801ef10:	4313      	orrs	r3, r2
 801ef12:	81a3      	strh	r3, [r4, #12]
 801ef14:	4240      	negs	r0, r0
 801ef16:	e03a      	b.n	801ef8e <__swsetup_r+0xaa>
 801ef18:	0752      	lsls	r2, r2, #29
 801ef1a:	d513      	bpl.n	801ef44 <__swsetup_r+0x60>
 801ef1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ef1e:	2900      	cmp	r1, #0
 801ef20:	d008      	beq.n	801ef34 <__swsetup_r+0x50>
 801ef22:	0023      	movs	r3, r4
 801ef24:	3344      	adds	r3, #68	@ 0x44
 801ef26:	4299      	cmp	r1, r3
 801ef28:	d002      	beq.n	801ef30 <__swsetup_r+0x4c>
 801ef2a:	0028      	movs	r0, r5
 801ef2c:	f000 ffa6 	bl	801fe7c <_free_r>
 801ef30:	2300      	movs	r3, #0
 801ef32:	6363      	str	r3, [r4, #52]	@ 0x34
 801ef34:	2224      	movs	r2, #36	@ 0x24
 801ef36:	89a3      	ldrh	r3, [r4, #12]
 801ef38:	4393      	bics	r3, r2
 801ef3a:	81a3      	strh	r3, [r4, #12]
 801ef3c:	2300      	movs	r3, #0
 801ef3e:	6063      	str	r3, [r4, #4]
 801ef40:	6923      	ldr	r3, [r4, #16]
 801ef42:	6023      	str	r3, [r4, #0]
 801ef44:	2308      	movs	r3, #8
 801ef46:	89a2      	ldrh	r2, [r4, #12]
 801ef48:	4313      	orrs	r3, r2
 801ef4a:	81a3      	strh	r3, [r4, #12]
 801ef4c:	6923      	ldr	r3, [r4, #16]
 801ef4e:	2b00      	cmp	r3, #0
 801ef50:	d10b      	bne.n	801ef6a <__swsetup_r+0x86>
 801ef52:	21a0      	movs	r1, #160	@ 0xa0
 801ef54:	2280      	movs	r2, #128	@ 0x80
 801ef56:	89a3      	ldrh	r3, [r4, #12]
 801ef58:	0089      	lsls	r1, r1, #2
 801ef5a:	0092      	lsls	r2, r2, #2
 801ef5c:	400b      	ands	r3, r1
 801ef5e:	4293      	cmp	r3, r2
 801ef60:	d003      	beq.n	801ef6a <__swsetup_r+0x86>
 801ef62:	0021      	movs	r1, r4
 801ef64:	0028      	movs	r0, r5
 801ef66:	f002 fc51 	bl	802180c <__smakebuf_r>
 801ef6a:	230c      	movs	r3, #12
 801ef6c:	5ee2      	ldrsh	r2, [r4, r3]
 801ef6e:	2101      	movs	r1, #1
 801ef70:	0013      	movs	r3, r2
 801ef72:	400b      	ands	r3, r1
 801ef74:	420a      	tst	r2, r1
 801ef76:	d00b      	beq.n	801ef90 <__swsetup_r+0xac>
 801ef78:	2300      	movs	r3, #0
 801ef7a:	60a3      	str	r3, [r4, #8]
 801ef7c:	6963      	ldr	r3, [r4, #20]
 801ef7e:	425b      	negs	r3, r3
 801ef80:	61a3      	str	r3, [r4, #24]
 801ef82:	2000      	movs	r0, #0
 801ef84:	6923      	ldr	r3, [r4, #16]
 801ef86:	4283      	cmp	r3, r0
 801ef88:	d101      	bne.n	801ef8e <__swsetup_r+0xaa>
 801ef8a:	0613      	lsls	r3, r2, #24
 801ef8c:	d4be      	bmi.n	801ef0c <__swsetup_r+0x28>
 801ef8e:	bd70      	pop	{r4, r5, r6, pc}
 801ef90:	0791      	lsls	r1, r2, #30
 801ef92:	d400      	bmi.n	801ef96 <__swsetup_r+0xb2>
 801ef94:	6963      	ldr	r3, [r4, #20]
 801ef96:	60a3      	str	r3, [r4, #8]
 801ef98:	e7f3      	b.n	801ef82 <__swsetup_r+0x9e>
 801ef9a:	46c0      	nop			@ (mov r8, r8)
 801ef9c:	200003c8 	.word	0x200003c8

0801efa0 <memset>:
 801efa0:	0003      	movs	r3, r0
 801efa2:	1882      	adds	r2, r0, r2
 801efa4:	4293      	cmp	r3, r2
 801efa6:	d100      	bne.n	801efaa <memset+0xa>
 801efa8:	4770      	bx	lr
 801efaa:	7019      	strb	r1, [r3, #0]
 801efac:	3301      	adds	r3, #1
 801efae:	e7f9      	b.n	801efa4 <memset+0x4>

0801efb0 <strchr>:
 801efb0:	b2c9      	uxtb	r1, r1
 801efb2:	7803      	ldrb	r3, [r0, #0]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d004      	beq.n	801efc2 <strchr+0x12>
 801efb8:	428b      	cmp	r3, r1
 801efba:	d100      	bne.n	801efbe <strchr+0xe>
 801efbc:	4770      	bx	lr
 801efbe:	3001      	adds	r0, #1
 801efc0:	e7f7      	b.n	801efb2 <strchr+0x2>
 801efc2:	424b      	negs	r3, r1
 801efc4:	4159      	adcs	r1, r3
 801efc6:	4249      	negs	r1, r1
 801efc8:	4008      	ands	r0, r1
 801efca:	e7f7      	b.n	801efbc <strchr+0xc>

0801efcc <strncmp>:
 801efcc:	b530      	push	{r4, r5, lr}
 801efce:	0005      	movs	r5, r0
 801efd0:	1e10      	subs	r0, r2, #0
 801efd2:	d00b      	beq.n	801efec <strncmp+0x20>
 801efd4:	2400      	movs	r4, #0
 801efd6:	3a01      	subs	r2, #1
 801efd8:	5d2b      	ldrb	r3, [r5, r4]
 801efda:	5d08      	ldrb	r0, [r1, r4]
 801efdc:	4283      	cmp	r3, r0
 801efde:	d104      	bne.n	801efea <strncmp+0x1e>
 801efe0:	42a2      	cmp	r2, r4
 801efe2:	d002      	beq.n	801efea <strncmp+0x1e>
 801efe4:	3401      	adds	r4, #1
 801efe6:	2b00      	cmp	r3, #0
 801efe8:	d1f6      	bne.n	801efd8 <strncmp+0xc>
 801efea:	1a18      	subs	r0, r3, r0
 801efec:	bd30      	pop	{r4, r5, pc}

0801efee <strncpy>:
 801efee:	0003      	movs	r3, r0
 801eff0:	b530      	push	{r4, r5, lr}
 801eff2:	001d      	movs	r5, r3
 801eff4:	2a00      	cmp	r2, #0
 801eff6:	d006      	beq.n	801f006 <strncpy+0x18>
 801eff8:	780c      	ldrb	r4, [r1, #0]
 801effa:	3a01      	subs	r2, #1
 801effc:	3301      	adds	r3, #1
 801effe:	702c      	strb	r4, [r5, #0]
 801f000:	3101      	adds	r1, #1
 801f002:	2c00      	cmp	r4, #0
 801f004:	d1f5      	bne.n	801eff2 <strncpy+0x4>
 801f006:	2100      	movs	r1, #0
 801f008:	189a      	adds	r2, r3, r2
 801f00a:	4293      	cmp	r3, r2
 801f00c:	d100      	bne.n	801f010 <strncpy+0x22>
 801f00e:	bd30      	pop	{r4, r5, pc}
 801f010:	7019      	strb	r1, [r3, #0]
 801f012:	3301      	adds	r3, #1
 801f014:	e7f9      	b.n	801f00a <strncpy+0x1c>

0801f016 <strstr>:
 801f016:	780a      	ldrb	r2, [r1, #0]
 801f018:	b530      	push	{r4, r5, lr}
 801f01a:	2a00      	cmp	r2, #0
 801f01c:	d10c      	bne.n	801f038 <strstr+0x22>
 801f01e:	bd30      	pop	{r4, r5, pc}
 801f020:	429a      	cmp	r2, r3
 801f022:	d108      	bne.n	801f036 <strstr+0x20>
 801f024:	2301      	movs	r3, #1
 801f026:	5ccc      	ldrb	r4, [r1, r3]
 801f028:	2c00      	cmp	r4, #0
 801f02a:	d0f8      	beq.n	801f01e <strstr+0x8>
 801f02c:	5cc5      	ldrb	r5, [r0, r3]
 801f02e:	42a5      	cmp	r5, r4
 801f030:	d101      	bne.n	801f036 <strstr+0x20>
 801f032:	3301      	adds	r3, #1
 801f034:	e7f7      	b.n	801f026 <strstr+0x10>
 801f036:	3001      	adds	r0, #1
 801f038:	7803      	ldrb	r3, [r0, #0]
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d1f0      	bne.n	801f020 <strstr+0xa>
 801f03e:	0018      	movs	r0, r3
 801f040:	e7ed      	b.n	801f01e <strstr+0x8>
	...

0801f044 <_localeconv_r>:
 801f044:	4800      	ldr	r0, [pc, #0]	@ (801f048 <_localeconv_r+0x4>)
 801f046:	4770      	bx	lr
 801f048:	2000034c 	.word	0x2000034c

0801f04c <_close_r>:
 801f04c:	2300      	movs	r3, #0
 801f04e:	b570      	push	{r4, r5, r6, lr}
 801f050:	4d06      	ldr	r5, [pc, #24]	@ (801f06c <_close_r+0x20>)
 801f052:	0004      	movs	r4, r0
 801f054:	0008      	movs	r0, r1
 801f056:	602b      	str	r3, [r5, #0]
 801f058:	f7ed fd9e 	bl	800cb98 <_close>
 801f05c:	1c43      	adds	r3, r0, #1
 801f05e:	d103      	bne.n	801f068 <_close_r+0x1c>
 801f060:	682b      	ldr	r3, [r5, #0]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d000      	beq.n	801f068 <_close_r+0x1c>
 801f066:	6023      	str	r3, [r4, #0]
 801f068:	bd70      	pop	{r4, r5, r6, pc}
 801f06a:	46c0      	nop			@ (mov r8, r8)
 801f06c:	200038f0 	.word	0x200038f0

0801f070 <_lseek_r>:
 801f070:	b570      	push	{r4, r5, r6, lr}
 801f072:	0004      	movs	r4, r0
 801f074:	0008      	movs	r0, r1
 801f076:	0011      	movs	r1, r2
 801f078:	001a      	movs	r2, r3
 801f07a:	2300      	movs	r3, #0
 801f07c:	4d05      	ldr	r5, [pc, #20]	@ (801f094 <_lseek_r+0x24>)
 801f07e:	602b      	str	r3, [r5, #0]
 801f080:	f7ed fdab 	bl	800cbda <_lseek>
 801f084:	1c43      	adds	r3, r0, #1
 801f086:	d103      	bne.n	801f090 <_lseek_r+0x20>
 801f088:	682b      	ldr	r3, [r5, #0]
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d000      	beq.n	801f090 <_lseek_r+0x20>
 801f08e:	6023      	str	r3, [r4, #0]
 801f090:	bd70      	pop	{r4, r5, r6, pc}
 801f092:	46c0      	nop			@ (mov r8, r8)
 801f094:	200038f0 	.word	0x200038f0

0801f098 <_read_r>:
 801f098:	b570      	push	{r4, r5, r6, lr}
 801f09a:	0004      	movs	r4, r0
 801f09c:	0008      	movs	r0, r1
 801f09e:	0011      	movs	r1, r2
 801f0a0:	001a      	movs	r2, r3
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	4d05      	ldr	r5, [pc, #20]	@ (801f0bc <_read_r+0x24>)
 801f0a6:	602b      	str	r3, [r5, #0]
 801f0a8:	f7ed fd59 	bl	800cb5e <_read>
 801f0ac:	1c43      	adds	r3, r0, #1
 801f0ae:	d103      	bne.n	801f0b8 <_read_r+0x20>
 801f0b0:	682b      	ldr	r3, [r5, #0]
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d000      	beq.n	801f0b8 <_read_r+0x20>
 801f0b6:	6023      	str	r3, [r4, #0]
 801f0b8:	bd70      	pop	{r4, r5, r6, pc}
 801f0ba:	46c0      	nop			@ (mov r8, r8)
 801f0bc:	200038f0 	.word	0x200038f0

0801f0c0 <_write_r>:
 801f0c0:	b570      	push	{r4, r5, r6, lr}
 801f0c2:	0004      	movs	r4, r0
 801f0c4:	0008      	movs	r0, r1
 801f0c6:	0011      	movs	r1, r2
 801f0c8:	001a      	movs	r2, r3
 801f0ca:	2300      	movs	r3, #0
 801f0cc:	4d05      	ldr	r5, [pc, #20]	@ (801f0e4 <_write_r+0x24>)
 801f0ce:	602b      	str	r3, [r5, #0]
 801f0d0:	f7ee fa1a 	bl	800d508 <_write>
 801f0d4:	1c43      	adds	r3, r0, #1
 801f0d6:	d103      	bne.n	801f0e0 <_write_r+0x20>
 801f0d8:	682b      	ldr	r3, [r5, #0]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d000      	beq.n	801f0e0 <_write_r+0x20>
 801f0de:	6023      	str	r3, [r4, #0]
 801f0e0:	bd70      	pop	{r4, r5, r6, pc}
 801f0e2:	46c0      	nop			@ (mov r8, r8)
 801f0e4:	200038f0 	.word	0x200038f0

0801f0e8 <__errno>:
 801f0e8:	4b01      	ldr	r3, [pc, #4]	@ (801f0f0 <__errno+0x8>)
 801f0ea:	6818      	ldr	r0, [r3, #0]
 801f0ec:	4770      	bx	lr
 801f0ee:	46c0      	nop			@ (mov r8, r8)
 801f0f0:	200003c8 	.word	0x200003c8

0801f0f4 <__libc_init_array>:
 801f0f4:	b570      	push	{r4, r5, r6, lr}
 801f0f6:	2600      	movs	r6, #0
 801f0f8:	4c0c      	ldr	r4, [pc, #48]	@ (801f12c <__libc_init_array+0x38>)
 801f0fa:	4d0d      	ldr	r5, [pc, #52]	@ (801f130 <__libc_init_array+0x3c>)
 801f0fc:	1b64      	subs	r4, r4, r5
 801f0fe:	10a4      	asrs	r4, r4, #2
 801f100:	42a6      	cmp	r6, r4
 801f102:	d109      	bne.n	801f118 <__libc_init_array+0x24>
 801f104:	2600      	movs	r6, #0
 801f106:	f002 fee9 	bl	8021edc <_init>
 801f10a:	4c0a      	ldr	r4, [pc, #40]	@ (801f134 <__libc_init_array+0x40>)
 801f10c:	4d0a      	ldr	r5, [pc, #40]	@ (801f138 <__libc_init_array+0x44>)
 801f10e:	1b64      	subs	r4, r4, r5
 801f110:	10a4      	asrs	r4, r4, #2
 801f112:	42a6      	cmp	r6, r4
 801f114:	d105      	bne.n	801f122 <__libc_init_array+0x2e>
 801f116:	bd70      	pop	{r4, r5, r6, pc}
 801f118:	00b3      	lsls	r3, r6, #2
 801f11a:	58eb      	ldr	r3, [r5, r3]
 801f11c:	4798      	blx	r3
 801f11e:	3601      	adds	r6, #1
 801f120:	e7ee      	b.n	801f100 <__libc_init_array+0xc>
 801f122:	00b3      	lsls	r3, r6, #2
 801f124:	58eb      	ldr	r3, [r5, r3]
 801f126:	4798      	blx	r3
 801f128:	3601      	adds	r6, #1
 801f12a:	e7f2      	b.n	801f112 <__libc_init_array+0x1e>
 801f12c:	08024628 	.word	0x08024628
 801f130:	08024628 	.word	0x08024628
 801f134:	0802462c 	.word	0x0802462c
 801f138:	08024628 	.word	0x08024628

0801f13c <__retarget_lock_init_recursive>:
 801f13c:	4770      	bx	lr

0801f13e <__retarget_lock_acquire_recursive>:
 801f13e:	4770      	bx	lr

0801f140 <__retarget_lock_release_recursive>:
 801f140:	4770      	bx	lr

0801f142 <memchr>:
 801f142:	b2c9      	uxtb	r1, r1
 801f144:	1882      	adds	r2, r0, r2
 801f146:	4290      	cmp	r0, r2
 801f148:	d101      	bne.n	801f14e <memchr+0xc>
 801f14a:	2000      	movs	r0, #0
 801f14c:	4770      	bx	lr
 801f14e:	7803      	ldrb	r3, [r0, #0]
 801f150:	428b      	cmp	r3, r1
 801f152:	d0fb      	beq.n	801f14c <memchr+0xa>
 801f154:	3001      	adds	r0, #1
 801f156:	e7f6      	b.n	801f146 <memchr+0x4>

0801f158 <memcpy>:
 801f158:	2300      	movs	r3, #0
 801f15a:	b510      	push	{r4, lr}
 801f15c:	429a      	cmp	r2, r3
 801f15e:	d100      	bne.n	801f162 <memcpy+0xa>
 801f160:	bd10      	pop	{r4, pc}
 801f162:	5ccc      	ldrb	r4, [r1, r3]
 801f164:	54c4      	strb	r4, [r0, r3]
 801f166:	3301      	adds	r3, #1
 801f168:	e7f8      	b.n	801f15c <memcpy+0x4>
	...

0801f16c <nan>:
 801f16c:	2000      	movs	r0, #0
 801f16e:	4901      	ldr	r1, [pc, #4]	@ (801f174 <nan+0x8>)
 801f170:	4770      	bx	lr
 801f172:	46c0      	nop			@ (mov r8, r8)
 801f174:	7ff80000 	.word	0x7ff80000

0801f178 <quorem>:
 801f178:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f17a:	6902      	ldr	r2, [r0, #16]
 801f17c:	690f      	ldr	r7, [r1, #16]
 801f17e:	b087      	sub	sp, #28
 801f180:	0006      	movs	r6, r0
 801f182:	000b      	movs	r3, r1
 801f184:	2000      	movs	r0, #0
 801f186:	9102      	str	r1, [sp, #8]
 801f188:	42ba      	cmp	r2, r7
 801f18a:	db6d      	blt.n	801f268 <quorem+0xf0>
 801f18c:	3f01      	subs	r7, #1
 801f18e:	00bc      	lsls	r4, r7, #2
 801f190:	3314      	adds	r3, #20
 801f192:	9305      	str	r3, [sp, #20]
 801f194:	191b      	adds	r3, r3, r4
 801f196:	9303      	str	r3, [sp, #12]
 801f198:	0033      	movs	r3, r6
 801f19a:	3314      	adds	r3, #20
 801f19c:	191c      	adds	r4, r3, r4
 801f19e:	9301      	str	r3, [sp, #4]
 801f1a0:	6823      	ldr	r3, [r4, #0]
 801f1a2:	9304      	str	r3, [sp, #16]
 801f1a4:	9b03      	ldr	r3, [sp, #12]
 801f1a6:	9804      	ldr	r0, [sp, #16]
 801f1a8:	681d      	ldr	r5, [r3, #0]
 801f1aa:	3501      	adds	r5, #1
 801f1ac:	0029      	movs	r1, r5
 801f1ae:	f7e0 fff9 	bl	80001a4 <__udivsi3>
 801f1b2:	9b04      	ldr	r3, [sp, #16]
 801f1b4:	9000      	str	r0, [sp, #0]
 801f1b6:	42ab      	cmp	r3, r5
 801f1b8:	d32b      	bcc.n	801f212 <quorem+0x9a>
 801f1ba:	9b05      	ldr	r3, [sp, #20]
 801f1bc:	9d01      	ldr	r5, [sp, #4]
 801f1be:	469c      	mov	ip, r3
 801f1c0:	2300      	movs	r3, #0
 801f1c2:	9305      	str	r3, [sp, #20]
 801f1c4:	9304      	str	r3, [sp, #16]
 801f1c6:	4662      	mov	r2, ip
 801f1c8:	ca08      	ldmia	r2!, {r3}
 801f1ca:	6828      	ldr	r0, [r5, #0]
 801f1cc:	4694      	mov	ip, r2
 801f1ce:	9a00      	ldr	r2, [sp, #0]
 801f1d0:	b299      	uxth	r1, r3
 801f1d2:	4351      	muls	r1, r2
 801f1d4:	9a05      	ldr	r2, [sp, #20]
 801f1d6:	0c1b      	lsrs	r3, r3, #16
 801f1d8:	1889      	adds	r1, r1, r2
 801f1da:	9a00      	ldr	r2, [sp, #0]
 801f1dc:	4353      	muls	r3, r2
 801f1de:	0c0a      	lsrs	r2, r1, #16
 801f1e0:	189b      	adds	r3, r3, r2
 801f1e2:	0c1a      	lsrs	r2, r3, #16
 801f1e4:	b289      	uxth	r1, r1
 801f1e6:	9205      	str	r2, [sp, #20]
 801f1e8:	b282      	uxth	r2, r0
 801f1ea:	1a52      	subs	r2, r2, r1
 801f1ec:	9904      	ldr	r1, [sp, #16]
 801f1ee:	0c00      	lsrs	r0, r0, #16
 801f1f0:	1852      	adds	r2, r2, r1
 801f1f2:	b29b      	uxth	r3, r3
 801f1f4:	1411      	asrs	r1, r2, #16
 801f1f6:	1ac3      	subs	r3, r0, r3
 801f1f8:	185b      	adds	r3, r3, r1
 801f1fa:	1419      	asrs	r1, r3, #16
 801f1fc:	b292      	uxth	r2, r2
 801f1fe:	041b      	lsls	r3, r3, #16
 801f200:	431a      	orrs	r2, r3
 801f202:	9b03      	ldr	r3, [sp, #12]
 801f204:	9104      	str	r1, [sp, #16]
 801f206:	c504      	stmia	r5!, {r2}
 801f208:	4563      	cmp	r3, ip
 801f20a:	d2dc      	bcs.n	801f1c6 <quorem+0x4e>
 801f20c:	6823      	ldr	r3, [r4, #0]
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d030      	beq.n	801f274 <quorem+0xfc>
 801f212:	0030      	movs	r0, r6
 801f214:	9902      	ldr	r1, [sp, #8]
 801f216:	f001 fd7d 	bl	8020d14 <__mcmp>
 801f21a:	2800      	cmp	r0, #0
 801f21c:	db23      	blt.n	801f266 <quorem+0xee>
 801f21e:	0034      	movs	r4, r6
 801f220:	2500      	movs	r5, #0
 801f222:	9902      	ldr	r1, [sp, #8]
 801f224:	3414      	adds	r4, #20
 801f226:	3114      	adds	r1, #20
 801f228:	6823      	ldr	r3, [r4, #0]
 801f22a:	c901      	ldmia	r1!, {r0}
 801f22c:	9302      	str	r3, [sp, #8]
 801f22e:	466b      	mov	r3, sp
 801f230:	891b      	ldrh	r3, [r3, #8]
 801f232:	b282      	uxth	r2, r0
 801f234:	1a9a      	subs	r2, r3, r2
 801f236:	9b02      	ldr	r3, [sp, #8]
 801f238:	1952      	adds	r2, r2, r5
 801f23a:	0c00      	lsrs	r0, r0, #16
 801f23c:	0c1b      	lsrs	r3, r3, #16
 801f23e:	1a1b      	subs	r3, r3, r0
 801f240:	1410      	asrs	r0, r2, #16
 801f242:	181b      	adds	r3, r3, r0
 801f244:	141d      	asrs	r5, r3, #16
 801f246:	b292      	uxth	r2, r2
 801f248:	041b      	lsls	r3, r3, #16
 801f24a:	431a      	orrs	r2, r3
 801f24c:	9b03      	ldr	r3, [sp, #12]
 801f24e:	c404      	stmia	r4!, {r2}
 801f250:	428b      	cmp	r3, r1
 801f252:	d2e9      	bcs.n	801f228 <quorem+0xb0>
 801f254:	9a01      	ldr	r2, [sp, #4]
 801f256:	00bb      	lsls	r3, r7, #2
 801f258:	18d3      	adds	r3, r2, r3
 801f25a:	681a      	ldr	r2, [r3, #0]
 801f25c:	2a00      	cmp	r2, #0
 801f25e:	d013      	beq.n	801f288 <quorem+0x110>
 801f260:	9b00      	ldr	r3, [sp, #0]
 801f262:	3301      	adds	r3, #1
 801f264:	9300      	str	r3, [sp, #0]
 801f266:	9800      	ldr	r0, [sp, #0]
 801f268:	b007      	add	sp, #28
 801f26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f26c:	6823      	ldr	r3, [r4, #0]
 801f26e:	2b00      	cmp	r3, #0
 801f270:	d104      	bne.n	801f27c <quorem+0x104>
 801f272:	3f01      	subs	r7, #1
 801f274:	9b01      	ldr	r3, [sp, #4]
 801f276:	3c04      	subs	r4, #4
 801f278:	42a3      	cmp	r3, r4
 801f27a:	d3f7      	bcc.n	801f26c <quorem+0xf4>
 801f27c:	6137      	str	r7, [r6, #16]
 801f27e:	e7c8      	b.n	801f212 <quorem+0x9a>
 801f280:	681a      	ldr	r2, [r3, #0]
 801f282:	2a00      	cmp	r2, #0
 801f284:	d104      	bne.n	801f290 <quorem+0x118>
 801f286:	3f01      	subs	r7, #1
 801f288:	9a01      	ldr	r2, [sp, #4]
 801f28a:	3b04      	subs	r3, #4
 801f28c:	429a      	cmp	r2, r3
 801f28e:	d3f7      	bcc.n	801f280 <quorem+0x108>
 801f290:	6137      	str	r7, [r6, #16]
 801f292:	e7e5      	b.n	801f260 <quorem+0xe8>

0801f294 <_dtoa_r>:
 801f294:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f296:	0014      	movs	r4, r2
 801f298:	001d      	movs	r5, r3
 801f29a:	69c6      	ldr	r6, [r0, #28]
 801f29c:	b09d      	sub	sp, #116	@ 0x74
 801f29e:	940a      	str	r4, [sp, #40]	@ 0x28
 801f2a0:	950b      	str	r5, [sp, #44]	@ 0x2c
 801f2a2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801f2a4:	9003      	str	r0, [sp, #12]
 801f2a6:	2e00      	cmp	r6, #0
 801f2a8:	d10f      	bne.n	801f2ca <_dtoa_r+0x36>
 801f2aa:	2010      	movs	r0, #16
 801f2ac:	f001 f98a 	bl	80205c4 <malloc>
 801f2b0:	9b03      	ldr	r3, [sp, #12]
 801f2b2:	1e02      	subs	r2, r0, #0
 801f2b4:	61d8      	str	r0, [r3, #28]
 801f2b6:	d104      	bne.n	801f2c2 <_dtoa_r+0x2e>
 801f2b8:	21ef      	movs	r1, #239	@ 0xef
 801f2ba:	4bc7      	ldr	r3, [pc, #796]	@ (801f5d8 <_dtoa_r+0x344>)
 801f2bc:	48c7      	ldr	r0, [pc, #796]	@ (801f5dc <_dtoa_r+0x348>)
 801f2be:	f002 fb2f 	bl	8021920 <__assert_func>
 801f2c2:	6046      	str	r6, [r0, #4]
 801f2c4:	6086      	str	r6, [r0, #8]
 801f2c6:	6006      	str	r6, [r0, #0]
 801f2c8:	60c6      	str	r6, [r0, #12]
 801f2ca:	9b03      	ldr	r3, [sp, #12]
 801f2cc:	69db      	ldr	r3, [r3, #28]
 801f2ce:	6819      	ldr	r1, [r3, #0]
 801f2d0:	2900      	cmp	r1, #0
 801f2d2:	d00b      	beq.n	801f2ec <_dtoa_r+0x58>
 801f2d4:	685a      	ldr	r2, [r3, #4]
 801f2d6:	2301      	movs	r3, #1
 801f2d8:	4093      	lsls	r3, r2
 801f2da:	604a      	str	r2, [r1, #4]
 801f2dc:	608b      	str	r3, [r1, #8]
 801f2de:	9803      	ldr	r0, [sp, #12]
 801f2e0:	f001 fa82 	bl	80207e8 <_Bfree>
 801f2e4:	2200      	movs	r2, #0
 801f2e6:	9b03      	ldr	r3, [sp, #12]
 801f2e8:	69db      	ldr	r3, [r3, #28]
 801f2ea:	601a      	str	r2, [r3, #0]
 801f2ec:	2d00      	cmp	r5, #0
 801f2ee:	da1e      	bge.n	801f32e <_dtoa_r+0x9a>
 801f2f0:	2301      	movs	r3, #1
 801f2f2:	603b      	str	r3, [r7, #0]
 801f2f4:	006b      	lsls	r3, r5, #1
 801f2f6:	085b      	lsrs	r3, r3, #1
 801f2f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f2fa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f2fc:	4bb8      	ldr	r3, [pc, #736]	@ (801f5e0 <_dtoa_r+0x34c>)
 801f2fe:	4ab8      	ldr	r2, [pc, #736]	@ (801f5e0 <_dtoa_r+0x34c>)
 801f300:	403b      	ands	r3, r7
 801f302:	4293      	cmp	r3, r2
 801f304:	d116      	bne.n	801f334 <_dtoa_r+0xa0>
 801f306:	4bb7      	ldr	r3, [pc, #732]	@ (801f5e4 <_dtoa_r+0x350>)
 801f308:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f30a:	6013      	str	r3, [r2, #0]
 801f30c:	033b      	lsls	r3, r7, #12
 801f30e:	0b1b      	lsrs	r3, r3, #12
 801f310:	4323      	orrs	r3, r4
 801f312:	d101      	bne.n	801f318 <_dtoa_r+0x84>
 801f314:	f000 fd83 	bl	801fe1e <_dtoa_r+0xb8a>
 801f318:	4bb3      	ldr	r3, [pc, #716]	@ (801f5e8 <_dtoa_r+0x354>)
 801f31a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f31c:	9308      	str	r3, [sp, #32]
 801f31e:	2a00      	cmp	r2, #0
 801f320:	d002      	beq.n	801f328 <_dtoa_r+0x94>
 801f322:	4bb2      	ldr	r3, [pc, #712]	@ (801f5ec <_dtoa_r+0x358>)
 801f324:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f326:	6013      	str	r3, [r2, #0]
 801f328:	9808      	ldr	r0, [sp, #32]
 801f32a:	b01d      	add	sp, #116	@ 0x74
 801f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f32e:	2300      	movs	r3, #0
 801f330:	603b      	str	r3, [r7, #0]
 801f332:	e7e2      	b.n	801f2fa <_dtoa_r+0x66>
 801f334:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f336:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f338:	9212      	str	r2, [sp, #72]	@ 0x48
 801f33a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f33c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f33e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f340:	2200      	movs	r2, #0
 801f342:	2300      	movs	r3, #0
 801f344:	f7e1 f8b4 	bl	80004b0 <__aeabi_dcmpeq>
 801f348:	1e06      	subs	r6, r0, #0
 801f34a:	d00b      	beq.n	801f364 <_dtoa_r+0xd0>
 801f34c:	2301      	movs	r3, #1
 801f34e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f350:	6013      	str	r3, [r2, #0]
 801f352:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f354:	2b00      	cmp	r3, #0
 801f356:	d002      	beq.n	801f35e <_dtoa_r+0xca>
 801f358:	4ba5      	ldr	r3, [pc, #660]	@ (801f5f0 <_dtoa_r+0x35c>)
 801f35a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801f35c:	6013      	str	r3, [r2, #0]
 801f35e:	4ba5      	ldr	r3, [pc, #660]	@ (801f5f4 <_dtoa_r+0x360>)
 801f360:	9308      	str	r3, [sp, #32]
 801f362:	e7e1      	b.n	801f328 <_dtoa_r+0x94>
 801f364:	ab1a      	add	r3, sp, #104	@ 0x68
 801f366:	9301      	str	r3, [sp, #4]
 801f368:	ab1b      	add	r3, sp, #108	@ 0x6c
 801f36a:	9300      	str	r3, [sp, #0]
 801f36c:	9803      	ldr	r0, [sp, #12]
 801f36e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f370:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f372:	f001 fdf1 	bl	8020f58 <__d2b>
 801f376:	007a      	lsls	r2, r7, #1
 801f378:	9005      	str	r0, [sp, #20]
 801f37a:	0d52      	lsrs	r2, r2, #21
 801f37c:	d100      	bne.n	801f380 <_dtoa_r+0xec>
 801f37e:	e07b      	b.n	801f478 <_dtoa_r+0x1e4>
 801f380:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f382:	9618      	str	r6, [sp, #96]	@ 0x60
 801f384:	0319      	lsls	r1, r3, #12
 801f386:	4b9c      	ldr	r3, [pc, #624]	@ (801f5f8 <_dtoa_r+0x364>)
 801f388:	0b09      	lsrs	r1, r1, #12
 801f38a:	430b      	orrs	r3, r1
 801f38c:	499b      	ldr	r1, [pc, #620]	@ (801f5fc <_dtoa_r+0x368>)
 801f38e:	1857      	adds	r7, r2, r1
 801f390:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f392:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f394:	0019      	movs	r1, r3
 801f396:	2200      	movs	r2, #0
 801f398:	4b99      	ldr	r3, [pc, #612]	@ (801f600 <_dtoa_r+0x36c>)
 801f39a:	f7e3 fc17 	bl	8002bcc <__aeabi_dsub>
 801f39e:	4a99      	ldr	r2, [pc, #612]	@ (801f604 <_dtoa_r+0x370>)
 801f3a0:	4b99      	ldr	r3, [pc, #612]	@ (801f608 <_dtoa_r+0x374>)
 801f3a2:	f7e3 f94b 	bl	800263c <__aeabi_dmul>
 801f3a6:	4a99      	ldr	r2, [pc, #612]	@ (801f60c <_dtoa_r+0x378>)
 801f3a8:	4b99      	ldr	r3, [pc, #612]	@ (801f610 <_dtoa_r+0x37c>)
 801f3aa:	f7e2 f99f 	bl	80016ec <__aeabi_dadd>
 801f3ae:	0004      	movs	r4, r0
 801f3b0:	0038      	movs	r0, r7
 801f3b2:	000d      	movs	r5, r1
 801f3b4:	f7e4 f804 	bl	80033c0 <__aeabi_i2d>
 801f3b8:	4a96      	ldr	r2, [pc, #600]	@ (801f614 <_dtoa_r+0x380>)
 801f3ba:	4b97      	ldr	r3, [pc, #604]	@ (801f618 <_dtoa_r+0x384>)
 801f3bc:	f7e3 f93e 	bl	800263c <__aeabi_dmul>
 801f3c0:	0002      	movs	r2, r0
 801f3c2:	000b      	movs	r3, r1
 801f3c4:	0020      	movs	r0, r4
 801f3c6:	0029      	movs	r1, r5
 801f3c8:	f7e2 f990 	bl	80016ec <__aeabi_dadd>
 801f3cc:	0004      	movs	r4, r0
 801f3ce:	000d      	movs	r5, r1
 801f3d0:	f7e3 ffba 	bl	8003348 <__aeabi_d2iz>
 801f3d4:	2200      	movs	r2, #0
 801f3d6:	9004      	str	r0, [sp, #16]
 801f3d8:	2300      	movs	r3, #0
 801f3da:	0020      	movs	r0, r4
 801f3dc:	0029      	movs	r1, r5
 801f3de:	f7e1 f86d 	bl	80004bc <__aeabi_dcmplt>
 801f3e2:	2800      	cmp	r0, #0
 801f3e4:	d00b      	beq.n	801f3fe <_dtoa_r+0x16a>
 801f3e6:	9804      	ldr	r0, [sp, #16]
 801f3e8:	f7e3 ffea 	bl	80033c0 <__aeabi_i2d>
 801f3ec:	002b      	movs	r3, r5
 801f3ee:	0022      	movs	r2, r4
 801f3f0:	f7e1 f85e 	bl	80004b0 <__aeabi_dcmpeq>
 801f3f4:	4243      	negs	r3, r0
 801f3f6:	4158      	adcs	r0, r3
 801f3f8:	9b04      	ldr	r3, [sp, #16]
 801f3fa:	1a1b      	subs	r3, r3, r0
 801f3fc:	9304      	str	r3, [sp, #16]
 801f3fe:	2301      	movs	r3, #1
 801f400:	9315      	str	r3, [sp, #84]	@ 0x54
 801f402:	9b04      	ldr	r3, [sp, #16]
 801f404:	2b16      	cmp	r3, #22
 801f406:	d810      	bhi.n	801f42a <_dtoa_r+0x196>
 801f408:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f40a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f40c:	9a04      	ldr	r2, [sp, #16]
 801f40e:	4b83      	ldr	r3, [pc, #524]	@ (801f61c <_dtoa_r+0x388>)
 801f410:	00d2      	lsls	r2, r2, #3
 801f412:	189b      	adds	r3, r3, r2
 801f414:	681a      	ldr	r2, [r3, #0]
 801f416:	685b      	ldr	r3, [r3, #4]
 801f418:	f7e1 f850 	bl	80004bc <__aeabi_dcmplt>
 801f41c:	2800      	cmp	r0, #0
 801f41e:	d047      	beq.n	801f4b0 <_dtoa_r+0x21c>
 801f420:	9b04      	ldr	r3, [sp, #16]
 801f422:	3b01      	subs	r3, #1
 801f424:	9304      	str	r3, [sp, #16]
 801f426:	2300      	movs	r3, #0
 801f428:	9315      	str	r3, [sp, #84]	@ 0x54
 801f42a:	2200      	movs	r2, #0
 801f42c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801f42e:	9206      	str	r2, [sp, #24]
 801f430:	1bdb      	subs	r3, r3, r7
 801f432:	1e5a      	subs	r2, r3, #1
 801f434:	d53e      	bpl.n	801f4b4 <_dtoa_r+0x220>
 801f436:	2201      	movs	r2, #1
 801f438:	1ad3      	subs	r3, r2, r3
 801f43a:	9306      	str	r3, [sp, #24]
 801f43c:	2300      	movs	r3, #0
 801f43e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f440:	9b04      	ldr	r3, [sp, #16]
 801f442:	2b00      	cmp	r3, #0
 801f444:	db38      	blt.n	801f4b8 <_dtoa_r+0x224>
 801f446:	9a04      	ldr	r2, [sp, #16]
 801f448:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f44a:	4694      	mov	ip, r2
 801f44c:	4463      	add	r3, ip
 801f44e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f450:	2300      	movs	r3, #0
 801f452:	9214      	str	r2, [sp, #80]	@ 0x50
 801f454:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f456:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f458:	2401      	movs	r4, #1
 801f45a:	2b09      	cmp	r3, #9
 801f45c:	d867      	bhi.n	801f52e <_dtoa_r+0x29a>
 801f45e:	2b05      	cmp	r3, #5
 801f460:	dd02      	ble.n	801f468 <_dtoa_r+0x1d4>
 801f462:	2400      	movs	r4, #0
 801f464:	3b04      	subs	r3, #4
 801f466:	9322      	str	r3, [sp, #136]	@ 0x88
 801f468:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801f46a:	1e98      	subs	r0, r3, #2
 801f46c:	2803      	cmp	r0, #3
 801f46e:	d867      	bhi.n	801f540 <_dtoa_r+0x2ac>
 801f470:	f7e0 fe84 	bl	800017c <__gnu_thumb1_case_uqi>
 801f474:	5b383a2b 	.word	0x5b383a2b
 801f478:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f47a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801f47c:	18f6      	adds	r6, r6, r3
 801f47e:	4b68      	ldr	r3, [pc, #416]	@ (801f620 <_dtoa_r+0x38c>)
 801f480:	18f2      	adds	r2, r6, r3
 801f482:	2a20      	cmp	r2, #32
 801f484:	dd0f      	ble.n	801f4a6 <_dtoa_r+0x212>
 801f486:	2340      	movs	r3, #64	@ 0x40
 801f488:	1a9b      	subs	r3, r3, r2
 801f48a:	409f      	lsls	r7, r3
 801f48c:	4b65      	ldr	r3, [pc, #404]	@ (801f624 <_dtoa_r+0x390>)
 801f48e:	0038      	movs	r0, r7
 801f490:	18f3      	adds	r3, r6, r3
 801f492:	40dc      	lsrs	r4, r3
 801f494:	4320      	orrs	r0, r4
 801f496:	f7e3 ffc1 	bl	800341c <__aeabi_ui2d>
 801f49a:	2201      	movs	r2, #1
 801f49c:	4b62      	ldr	r3, [pc, #392]	@ (801f628 <_dtoa_r+0x394>)
 801f49e:	1e77      	subs	r7, r6, #1
 801f4a0:	18cb      	adds	r3, r1, r3
 801f4a2:	9218      	str	r2, [sp, #96]	@ 0x60
 801f4a4:	e776      	b.n	801f394 <_dtoa_r+0x100>
 801f4a6:	2320      	movs	r3, #32
 801f4a8:	0020      	movs	r0, r4
 801f4aa:	1a9b      	subs	r3, r3, r2
 801f4ac:	4098      	lsls	r0, r3
 801f4ae:	e7f2      	b.n	801f496 <_dtoa_r+0x202>
 801f4b0:	9015      	str	r0, [sp, #84]	@ 0x54
 801f4b2:	e7ba      	b.n	801f42a <_dtoa_r+0x196>
 801f4b4:	920d      	str	r2, [sp, #52]	@ 0x34
 801f4b6:	e7c3      	b.n	801f440 <_dtoa_r+0x1ac>
 801f4b8:	9b06      	ldr	r3, [sp, #24]
 801f4ba:	9a04      	ldr	r2, [sp, #16]
 801f4bc:	1a9b      	subs	r3, r3, r2
 801f4be:	9306      	str	r3, [sp, #24]
 801f4c0:	4253      	negs	r3, r2
 801f4c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f4c4:	2300      	movs	r3, #0
 801f4c6:	9314      	str	r3, [sp, #80]	@ 0x50
 801f4c8:	e7c5      	b.n	801f456 <_dtoa_r+0x1c2>
 801f4ca:	2300      	movs	r3, #0
 801f4cc:	9310      	str	r3, [sp, #64]	@ 0x40
 801f4ce:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f4d0:	930e      	str	r3, [sp, #56]	@ 0x38
 801f4d2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	dc13      	bgt.n	801f500 <_dtoa_r+0x26c>
 801f4d8:	2301      	movs	r3, #1
 801f4da:	001a      	movs	r2, r3
 801f4dc:	930e      	str	r3, [sp, #56]	@ 0x38
 801f4de:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4e0:	9223      	str	r2, [sp, #140]	@ 0x8c
 801f4e2:	e00d      	b.n	801f500 <_dtoa_r+0x26c>
 801f4e4:	2301      	movs	r3, #1
 801f4e6:	e7f1      	b.n	801f4cc <_dtoa_r+0x238>
 801f4e8:	2300      	movs	r3, #0
 801f4ea:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f4ec:	9310      	str	r3, [sp, #64]	@ 0x40
 801f4ee:	4694      	mov	ip, r2
 801f4f0:	9b04      	ldr	r3, [sp, #16]
 801f4f2:	4463      	add	r3, ip
 801f4f4:	930e      	str	r3, [sp, #56]	@ 0x38
 801f4f6:	3301      	adds	r3, #1
 801f4f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4fa:	2b00      	cmp	r3, #0
 801f4fc:	dc00      	bgt.n	801f500 <_dtoa_r+0x26c>
 801f4fe:	2301      	movs	r3, #1
 801f500:	9a03      	ldr	r2, [sp, #12]
 801f502:	2100      	movs	r1, #0
 801f504:	69d0      	ldr	r0, [r2, #28]
 801f506:	2204      	movs	r2, #4
 801f508:	0015      	movs	r5, r2
 801f50a:	3514      	adds	r5, #20
 801f50c:	429d      	cmp	r5, r3
 801f50e:	d91b      	bls.n	801f548 <_dtoa_r+0x2b4>
 801f510:	6041      	str	r1, [r0, #4]
 801f512:	9803      	ldr	r0, [sp, #12]
 801f514:	f001 f924 	bl	8020760 <_Balloc>
 801f518:	9008      	str	r0, [sp, #32]
 801f51a:	2800      	cmp	r0, #0
 801f51c:	d117      	bne.n	801f54e <_dtoa_r+0x2ba>
 801f51e:	21b0      	movs	r1, #176	@ 0xb0
 801f520:	4b42      	ldr	r3, [pc, #264]	@ (801f62c <_dtoa_r+0x398>)
 801f522:	482e      	ldr	r0, [pc, #184]	@ (801f5dc <_dtoa_r+0x348>)
 801f524:	9a08      	ldr	r2, [sp, #32]
 801f526:	31ff      	adds	r1, #255	@ 0xff
 801f528:	e6c9      	b.n	801f2be <_dtoa_r+0x2a>
 801f52a:	2301      	movs	r3, #1
 801f52c:	e7dd      	b.n	801f4ea <_dtoa_r+0x256>
 801f52e:	2300      	movs	r3, #0
 801f530:	9410      	str	r4, [sp, #64]	@ 0x40
 801f532:	9322      	str	r3, [sp, #136]	@ 0x88
 801f534:	3b01      	subs	r3, #1
 801f536:	930e      	str	r3, [sp, #56]	@ 0x38
 801f538:	9309      	str	r3, [sp, #36]	@ 0x24
 801f53a:	2200      	movs	r2, #0
 801f53c:	3313      	adds	r3, #19
 801f53e:	e7cf      	b.n	801f4e0 <_dtoa_r+0x24c>
 801f540:	2301      	movs	r3, #1
 801f542:	9310      	str	r3, [sp, #64]	@ 0x40
 801f544:	3b02      	subs	r3, #2
 801f546:	e7f6      	b.n	801f536 <_dtoa_r+0x2a2>
 801f548:	3101      	adds	r1, #1
 801f54a:	0052      	lsls	r2, r2, #1
 801f54c:	e7dc      	b.n	801f508 <_dtoa_r+0x274>
 801f54e:	9b03      	ldr	r3, [sp, #12]
 801f550:	9a08      	ldr	r2, [sp, #32]
 801f552:	69db      	ldr	r3, [r3, #28]
 801f554:	601a      	str	r2, [r3, #0]
 801f556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f558:	2b0e      	cmp	r3, #14
 801f55a:	d900      	bls.n	801f55e <_dtoa_r+0x2ca>
 801f55c:	e0d9      	b.n	801f712 <_dtoa_r+0x47e>
 801f55e:	2c00      	cmp	r4, #0
 801f560:	d100      	bne.n	801f564 <_dtoa_r+0x2d0>
 801f562:	e0d6      	b.n	801f712 <_dtoa_r+0x47e>
 801f564:	9b04      	ldr	r3, [sp, #16]
 801f566:	2b00      	cmp	r3, #0
 801f568:	dd64      	ble.n	801f634 <_dtoa_r+0x3a0>
 801f56a:	210f      	movs	r1, #15
 801f56c:	9a04      	ldr	r2, [sp, #16]
 801f56e:	4b2b      	ldr	r3, [pc, #172]	@ (801f61c <_dtoa_r+0x388>)
 801f570:	400a      	ands	r2, r1
 801f572:	00d2      	lsls	r2, r2, #3
 801f574:	189b      	adds	r3, r3, r2
 801f576:	681e      	ldr	r6, [r3, #0]
 801f578:	685f      	ldr	r7, [r3, #4]
 801f57a:	9b04      	ldr	r3, [sp, #16]
 801f57c:	2402      	movs	r4, #2
 801f57e:	111d      	asrs	r5, r3, #4
 801f580:	05db      	lsls	r3, r3, #23
 801f582:	d50a      	bpl.n	801f59a <_dtoa_r+0x306>
 801f584:	4b2a      	ldr	r3, [pc, #168]	@ (801f630 <_dtoa_r+0x39c>)
 801f586:	400d      	ands	r5, r1
 801f588:	6a1a      	ldr	r2, [r3, #32]
 801f58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f58c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f58e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f590:	f7e2 fc10 	bl	8001db4 <__aeabi_ddiv>
 801f594:	900a      	str	r0, [sp, #40]	@ 0x28
 801f596:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f598:	3401      	adds	r4, #1
 801f59a:	4b25      	ldr	r3, [pc, #148]	@ (801f630 <_dtoa_r+0x39c>)
 801f59c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f59e:	2d00      	cmp	r5, #0
 801f5a0:	d108      	bne.n	801f5b4 <_dtoa_r+0x320>
 801f5a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f5a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f5a6:	0032      	movs	r2, r6
 801f5a8:	003b      	movs	r3, r7
 801f5aa:	f7e2 fc03 	bl	8001db4 <__aeabi_ddiv>
 801f5ae:	900a      	str	r0, [sp, #40]	@ 0x28
 801f5b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f5b2:	e05a      	b.n	801f66a <_dtoa_r+0x3d6>
 801f5b4:	2301      	movs	r3, #1
 801f5b6:	421d      	tst	r5, r3
 801f5b8:	d009      	beq.n	801f5ce <_dtoa_r+0x33a>
 801f5ba:	18e4      	adds	r4, r4, r3
 801f5bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5be:	0030      	movs	r0, r6
 801f5c0:	681a      	ldr	r2, [r3, #0]
 801f5c2:	685b      	ldr	r3, [r3, #4]
 801f5c4:	0039      	movs	r1, r7
 801f5c6:	f7e3 f839 	bl	800263c <__aeabi_dmul>
 801f5ca:	0006      	movs	r6, r0
 801f5cc:	000f      	movs	r7, r1
 801f5ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5d0:	106d      	asrs	r5, r5, #1
 801f5d2:	3308      	adds	r3, #8
 801f5d4:	e7e2      	b.n	801f59c <_dtoa_r+0x308>
 801f5d6:	46c0      	nop			@ (mov r8, r8)
 801f5d8:	08024382 	.word	0x08024382
 801f5dc:	08024399 	.word	0x08024399
 801f5e0:	7ff00000 	.word	0x7ff00000
 801f5e4:	0000270f 	.word	0x0000270f
 801f5e8:	0802437e 	.word	0x0802437e
 801f5ec:	08024381 	.word	0x08024381
 801f5f0:	0802434a 	.word	0x0802434a
 801f5f4:	08024349 	.word	0x08024349
 801f5f8:	3ff00000 	.word	0x3ff00000
 801f5fc:	fffffc01 	.word	0xfffffc01
 801f600:	3ff80000 	.word	0x3ff80000
 801f604:	636f4361 	.word	0x636f4361
 801f608:	3fd287a7 	.word	0x3fd287a7
 801f60c:	8b60c8b3 	.word	0x8b60c8b3
 801f610:	3fc68a28 	.word	0x3fc68a28
 801f614:	509f79fb 	.word	0x509f79fb
 801f618:	3fd34413 	.word	0x3fd34413
 801f61c:	080244f0 	.word	0x080244f0
 801f620:	00000432 	.word	0x00000432
 801f624:	00000412 	.word	0x00000412
 801f628:	fe100000 	.word	0xfe100000
 801f62c:	080243f1 	.word	0x080243f1
 801f630:	080244c8 	.word	0x080244c8
 801f634:	9b04      	ldr	r3, [sp, #16]
 801f636:	2402      	movs	r4, #2
 801f638:	2b00      	cmp	r3, #0
 801f63a:	d016      	beq.n	801f66a <_dtoa_r+0x3d6>
 801f63c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f63e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801f640:	220f      	movs	r2, #15
 801f642:	425d      	negs	r5, r3
 801f644:	402a      	ands	r2, r5
 801f646:	4bd7      	ldr	r3, [pc, #860]	@ (801f9a4 <_dtoa_r+0x710>)
 801f648:	00d2      	lsls	r2, r2, #3
 801f64a:	189b      	adds	r3, r3, r2
 801f64c:	681a      	ldr	r2, [r3, #0]
 801f64e:	685b      	ldr	r3, [r3, #4]
 801f650:	f7e2 fff4 	bl	800263c <__aeabi_dmul>
 801f654:	2701      	movs	r7, #1
 801f656:	2300      	movs	r3, #0
 801f658:	900a      	str	r0, [sp, #40]	@ 0x28
 801f65a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f65c:	4ed2      	ldr	r6, [pc, #840]	@ (801f9a8 <_dtoa_r+0x714>)
 801f65e:	112d      	asrs	r5, r5, #4
 801f660:	2d00      	cmp	r5, #0
 801f662:	d000      	beq.n	801f666 <_dtoa_r+0x3d2>
 801f664:	e0ba      	b.n	801f7dc <_dtoa_r+0x548>
 801f666:	2b00      	cmp	r3, #0
 801f668:	d1a1      	bne.n	801f5ae <_dtoa_r+0x31a>
 801f66a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801f66c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f66e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f670:	2b00      	cmp	r3, #0
 801f672:	d100      	bne.n	801f676 <_dtoa_r+0x3e2>
 801f674:	e0bd      	b.n	801f7f2 <_dtoa_r+0x55e>
 801f676:	2200      	movs	r2, #0
 801f678:	0030      	movs	r0, r6
 801f67a:	0039      	movs	r1, r7
 801f67c:	4bcb      	ldr	r3, [pc, #812]	@ (801f9ac <_dtoa_r+0x718>)
 801f67e:	f7e0 ff1d 	bl	80004bc <__aeabi_dcmplt>
 801f682:	2800      	cmp	r0, #0
 801f684:	d100      	bne.n	801f688 <_dtoa_r+0x3f4>
 801f686:	e0b4      	b.n	801f7f2 <_dtoa_r+0x55e>
 801f688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f68a:	2b00      	cmp	r3, #0
 801f68c:	d100      	bne.n	801f690 <_dtoa_r+0x3fc>
 801f68e:	e0b0      	b.n	801f7f2 <_dtoa_r+0x55e>
 801f690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f692:	2b00      	cmp	r3, #0
 801f694:	dd39      	ble.n	801f70a <_dtoa_r+0x476>
 801f696:	9b04      	ldr	r3, [sp, #16]
 801f698:	2200      	movs	r2, #0
 801f69a:	3b01      	subs	r3, #1
 801f69c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f69e:	0030      	movs	r0, r6
 801f6a0:	4bc3      	ldr	r3, [pc, #780]	@ (801f9b0 <_dtoa_r+0x71c>)
 801f6a2:	0039      	movs	r1, r7
 801f6a4:	f7e2 ffca 	bl	800263c <__aeabi_dmul>
 801f6a8:	900a      	str	r0, [sp, #40]	@ 0x28
 801f6aa:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f6ae:	3401      	adds	r4, #1
 801f6b0:	0020      	movs	r0, r4
 801f6b2:	9311      	str	r3, [sp, #68]	@ 0x44
 801f6b4:	f7e3 fe84 	bl	80033c0 <__aeabi_i2d>
 801f6b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f6ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f6bc:	f7e2 ffbe 	bl	800263c <__aeabi_dmul>
 801f6c0:	4bbc      	ldr	r3, [pc, #752]	@ (801f9b4 <_dtoa_r+0x720>)
 801f6c2:	2200      	movs	r2, #0
 801f6c4:	f7e2 f812 	bl	80016ec <__aeabi_dadd>
 801f6c8:	4bbb      	ldr	r3, [pc, #748]	@ (801f9b8 <_dtoa_r+0x724>)
 801f6ca:	0006      	movs	r6, r0
 801f6cc:	18cf      	adds	r7, r1, r3
 801f6ce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f6d0:	2b00      	cmp	r3, #0
 801f6d2:	d000      	beq.n	801f6d6 <_dtoa_r+0x442>
 801f6d4:	e091      	b.n	801f7fa <_dtoa_r+0x566>
 801f6d6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f6d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f6da:	2200      	movs	r2, #0
 801f6dc:	4bb7      	ldr	r3, [pc, #732]	@ (801f9bc <_dtoa_r+0x728>)
 801f6de:	f7e3 fa75 	bl	8002bcc <__aeabi_dsub>
 801f6e2:	0032      	movs	r2, r6
 801f6e4:	003b      	movs	r3, r7
 801f6e6:	0004      	movs	r4, r0
 801f6e8:	000d      	movs	r5, r1
 801f6ea:	f7e0 fefb 	bl	80004e4 <__aeabi_dcmpgt>
 801f6ee:	2800      	cmp	r0, #0
 801f6f0:	d000      	beq.n	801f6f4 <_dtoa_r+0x460>
 801f6f2:	e29d      	b.n	801fc30 <_dtoa_r+0x99c>
 801f6f4:	2180      	movs	r1, #128	@ 0x80
 801f6f6:	0609      	lsls	r1, r1, #24
 801f6f8:	187b      	adds	r3, r7, r1
 801f6fa:	0032      	movs	r2, r6
 801f6fc:	0020      	movs	r0, r4
 801f6fe:	0029      	movs	r1, r5
 801f700:	f7e0 fedc 	bl	80004bc <__aeabi_dcmplt>
 801f704:	2800      	cmp	r0, #0
 801f706:	d000      	beq.n	801f70a <_dtoa_r+0x476>
 801f708:	e130      	b.n	801f96c <_dtoa_r+0x6d8>
 801f70a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f70c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f70e:	930a      	str	r3, [sp, #40]	@ 0x28
 801f710:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f712:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f714:	2b00      	cmp	r3, #0
 801f716:	da00      	bge.n	801f71a <_dtoa_r+0x486>
 801f718:	e177      	b.n	801fa0a <_dtoa_r+0x776>
 801f71a:	9a04      	ldr	r2, [sp, #16]
 801f71c:	2a0e      	cmp	r2, #14
 801f71e:	dd00      	ble.n	801f722 <_dtoa_r+0x48e>
 801f720:	e173      	b.n	801fa0a <_dtoa_r+0x776>
 801f722:	4ba0      	ldr	r3, [pc, #640]	@ (801f9a4 <_dtoa_r+0x710>)
 801f724:	00d2      	lsls	r2, r2, #3
 801f726:	189b      	adds	r3, r3, r2
 801f728:	685c      	ldr	r4, [r3, #4]
 801f72a:	681b      	ldr	r3, [r3, #0]
 801f72c:	9306      	str	r3, [sp, #24]
 801f72e:	9407      	str	r4, [sp, #28]
 801f730:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f732:	2b00      	cmp	r3, #0
 801f734:	da03      	bge.n	801f73e <_dtoa_r+0x4aa>
 801f736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f738:	2b00      	cmp	r3, #0
 801f73a:	dc00      	bgt.n	801f73e <_dtoa_r+0x4aa>
 801f73c:	e106      	b.n	801f94c <_dtoa_r+0x6b8>
 801f73e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801f740:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801f742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f744:	9d08      	ldr	r5, [sp, #32]
 801f746:	3b01      	subs	r3, #1
 801f748:	195b      	adds	r3, r3, r5
 801f74a:	930a      	str	r3, [sp, #40]	@ 0x28
 801f74c:	9a06      	ldr	r2, [sp, #24]
 801f74e:	9b07      	ldr	r3, [sp, #28]
 801f750:	0030      	movs	r0, r6
 801f752:	0039      	movs	r1, r7
 801f754:	f7e2 fb2e 	bl	8001db4 <__aeabi_ddiv>
 801f758:	f7e3 fdf6 	bl	8003348 <__aeabi_d2iz>
 801f75c:	9009      	str	r0, [sp, #36]	@ 0x24
 801f75e:	f7e3 fe2f 	bl	80033c0 <__aeabi_i2d>
 801f762:	9a06      	ldr	r2, [sp, #24]
 801f764:	9b07      	ldr	r3, [sp, #28]
 801f766:	f7e2 ff69 	bl	800263c <__aeabi_dmul>
 801f76a:	0002      	movs	r2, r0
 801f76c:	000b      	movs	r3, r1
 801f76e:	0030      	movs	r0, r6
 801f770:	0039      	movs	r1, r7
 801f772:	f7e3 fa2b 	bl	8002bcc <__aeabi_dsub>
 801f776:	002b      	movs	r3, r5
 801f778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f77a:	3501      	adds	r5, #1
 801f77c:	3230      	adds	r2, #48	@ 0x30
 801f77e:	701a      	strb	r2, [r3, #0]
 801f780:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f782:	002c      	movs	r4, r5
 801f784:	429a      	cmp	r2, r3
 801f786:	d000      	beq.n	801f78a <_dtoa_r+0x4f6>
 801f788:	e131      	b.n	801f9ee <_dtoa_r+0x75a>
 801f78a:	0002      	movs	r2, r0
 801f78c:	000b      	movs	r3, r1
 801f78e:	f7e1 ffad 	bl	80016ec <__aeabi_dadd>
 801f792:	9a06      	ldr	r2, [sp, #24]
 801f794:	9b07      	ldr	r3, [sp, #28]
 801f796:	0006      	movs	r6, r0
 801f798:	000f      	movs	r7, r1
 801f79a:	f7e0 fea3 	bl	80004e4 <__aeabi_dcmpgt>
 801f79e:	2800      	cmp	r0, #0
 801f7a0:	d000      	beq.n	801f7a4 <_dtoa_r+0x510>
 801f7a2:	e10f      	b.n	801f9c4 <_dtoa_r+0x730>
 801f7a4:	9a06      	ldr	r2, [sp, #24]
 801f7a6:	9b07      	ldr	r3, [sp, #28]
 801f7a8:	0030      	movs	r0, r6
 801f7aa:	0039      	movs	r1, r7
 801f7ac:	f7e0 fe80 	bl	80004b0 <__aeabi_dcmpeq>
 801f7b0:	2800      	cmp	r0, #0
 801f7b2:	d003      	beq.n	801f7bc <_dtoa_r+0x528>
 801f7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7b6:	07dd      	lsls	r5, r3, #31
 801f7b8:	d500      	bpl.n	801f7bc <_dtoa_r+0x528>
 801f7ba:	e103      	b.n	801f9c4 <_dtoa_r+0x730>
 801f7bc:	9905      	ldr	r1, [sp, #20]
 801f7be:	9803      	ldr	r0, [sp, #12]
 801f7c0:	f001 f812 	bl	80207e8 <_Bfree>
 801f7c4:	2300      	movs	r3, #0
 801f7c6:	7023      	strb	r3, [r4, #0]
 801f7c8:	9b04      	ldr	r3, [sp, #16]
 801f7ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f7cc:	3301      	adds	r3, #1
 801f7ce:	6013      	str	r3, [r2, #0]
 801f7d0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	d100      	bne.n	801f7d8 <_dtoa_r+0x544>
 801f7d6:	e5a7      	b.n	801f328 <_dtoa_r+0x94>
 801f7d8:	601c      	str	r4, [r3, #0]
 801f7da:	e5a5      	b.n	801f328 <_dtoa_r+0x94>
 801f7dc:	423d      	tst	r5, r7
 801f7de:	d005      	beq.n	801f7ec <_dtoa_r+0x558>
 801f7e0:	6832      	ldr	r2, [r6, #0]
 801f7e2:	6873      	ldr	r3, [r6, #4]
 801f7e4:	f7e2 ff2a 	bl	800263c <__aeabi_dmul>
 801f7e8:	003b      	movs	r3, r7
 801f7ea:	3401      	adds	r4, #1
 801f7ec:	106d      	asrs	r5, r5, #1
 801f7ee:	3608      	adds	r6, #8
 801f7f0:	e736      	b.n	801f660 <_dtoa_r+0x3cc>
 801f7f2:	9b04      	ldr	r3, [sp, #16]
 801f7f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7f8:	e75a      	b.n	801f6b0 <_dtoa_r+0x41c>
 801f7fa:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f7fc:	4b69      	ldr	r3, [pc, #420]	@ (801f9a4 <_dtoa_r+0x710>)
 801f7fe:	3a01      	subs	r2, #1
 801f800:	00d2      	lsls	r2, r2, #3
 801f802:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801f804:	189b      	adds	r3, r3, r2
 801f806:	681a      	ldr	r2, [r3, #0]
 801f808:	685b      	ldr	r3, [r3, #4]
 801f80a:	2900      	cmp	r1, #0
 801f80c:	d04c      	beq.n	801f8a8 <_dtoa_r+0x614>
 801f80e:	2000      	movs	r0, #0
 801f810:	496b      	ldr	r1, [pc, #428]	@ (801f9c0 <_dtoa_r+0x72c>)
 801f812:	f7e2 facf 	bl	8001db4 <__aeabi_ddiv>
 801f816:	0032      	movs	r2, r6
 801f818:	003b      	movs	r3, r7
 801f81a:	f7e3 f9d7 	bl	8002bcc <__aeabi_dsub>
 801f81e:	9a08      	ldr	r2, [sp, #32]
 801f820:	0006      	movs	r6, r0
 801f822:	4694      	mov	ip, r2
 801f824:	000f      	movs	r7, r1
 801f826:	9b08      	ldr	r3, [sp, #32]
 801f828:	9316      	str	r3, [sp, #88]	@ 0x58
 801f82a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f82c:	4463      	add	r3, ip
 801f82e:	9311      	str	r3, [sp, #68]	@ 0x44
 801f830:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f832:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f834:	f7e3 fd88 	bl	8003348 <__aeabi_d2iz>
 801f838:	0005      	movs	r5, r0
 801f83a:	f7e3 fdc1 	bl	80033c0 <__aeabi_i2d>
 801f83e:	0002      	movs	r2, r0
 801f840:	000b      	movs	r3, r1
 801f842:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f844:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f846:	f7e3 f9c1 	bl	8002bcc <__aeabi_dsub>
 801f84a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f84c:	3530      	adds	r5, #48	@ 0x30
 801f84e:	1c5c      	adds	r4, r3, #1
 801f850:	701d      	strb	r5, [r3, #0]
 801f852:	0032      	movs	r2, r6
 801f854:	003b      	movs	r3, r7
 801f856:	900a      	str	r0, [sp, #40]	@ 0x28
 801f858:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f85a:	f7e0 fe2f 	bl	80004bc <__aeabi_dcmplt>
 801f85e:	2800      	cmp	r0, #0
 801f860:	d16a      	bne.n	801f938 <_dtoa_r+0x6a4>
 801f862:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f866:	2000      	movs	r0, #0
 801f868:	4950      	ldr	r1, [pc, #320]	@ (801f9ac <_dtoa_r+0x718>)
 801f86a:	f7e3 f9af 	bl	8002bcc <__aeabi_dsub>
 801f86e:	0032      	movs	r2, r6
 801f870:	003b      	movs	r3, r7
 801f872:	f7e0 fe23 	bl	80004bc <__aeabi_dcmplt>
 801f876:	2800      	cmp	r0, #0
 801f878:	d000      	beq.n	801f87c <_dtoa_r+0x5e8>
 801f87a:	e0a5      	b.n	801f9c8 <_dtoa_r+0x734>
 801f87c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f87e:	42a3      	cmp	r3, r4
 801f880:	d100      	bne.n	801f884 <_dtoa_r+0x5f0>
 801f882:	e742      	b.n	801f70a <_dtoa_r+0x476>
 801f884:	2200      	movs	r2, #0
 801f886:	0030      	movs	r0, r6
 801f888:	0039      	movs	r1, r7
 801f88a:	4b49      	ldr	r3, [pc, #292]	@ (801f9b0 <_dtoa_r+0x71c>)
 801f88c:	f7e2 fed6 	bl	800263c <__aeabi_dmul>
 801f890:	2200      	movs	r2, #0
 801f892:	0006      	movs	r6, r0
 801f894:	000f      	movs	r7, r1
 801f896:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f898:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f89a:	4b45      	ldr	r3, [pc, #276]	@ (801f9b0 <_dtoa_r+0x71c>)
 801f89c:	f7e2 fece 	bl	800263c <__aeabi_dmul>
 801f8a0:	9416      	str	r4, [sp, #88]	@ 0x58
 801f8a2:	900a      	str	r0, [sp, #40]	@ 0x28
 801f8a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f8a6:	e7c3      	b.n	801f830 <_dtoa_r+0x59c>
 801f8a8:	0030      	movs	r0, r6
 801f8aa:	0039      	movs	r1, r7
 801f8ac:	f7e2 fec6 	bl	800263c <__aeabi_dmul>
 801f8b0:	9d08      	ldr	r5, [sp, #32]
 801f8b2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f8b4:	002b      	movs	r3, r5
 801f8b6:	4694      	mov	ip, r2
 801f8b8:	9016      	str	r0, [sp, #88]	@ 0x58
 801f8ba:	9117      	str	r1, [sp, #92]	@ 0x5c
 801f8bc:	4463      	add	r3, ip
 801f8be:	9319      	str	r3, [sp, #100]	@ 0x64
 801f8c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f8c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f8c4:	f7e3 fd40 	bl	8003348 <__aeabi_d2iz>
 801f8c8:	0004      	movs	r4, r0
 801f8ca:	f7e3 fd79 	bl	80033c0 <__aeabi_i2d>
 801f8ce:	000b      	movs	r3, r1
 801f8d0:	0002      	movs	r2, r0
 801f8d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801f8d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f8d6:	f7e3 f979 	bl	8002bcc <__aeabi_dsub>
 801f8da:	3430      	adds	r4, #48	@ 0x30
 801f8dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f8de:	702c      	strb	r4, [r5, #0]
 801f8e0:	3501      	adds	r5, #1
 801f8e2:	0006      	movs	r6, r0
 801f8e4:	000f      	movs	r7, r1
 801f8e6:	42ab      	cmp	r3, r5
 801f8e8:	d129      	bne.n	801f93e <_dtoa_r+0x6aa>
 801f8ea:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801f8ec:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801f8ee:	9b08      	ldr	r3, [sp, #32]
 801f8f0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f8f2:	469c      	mov	ip, r3
 801f8f4:	2200      	movs	r2, #0
 801f8f6:	4b32      	ldr	r3, [pc, #200]	@ (801f9c0 <_dtoa_r+0x72c>)
 801f8f8:	4464      	add	r4, ip
 801f8fa:	f7e1 fef7 	bl	80016ec <__aeabi_dadd>
 801f8fe:	0002      	movs	r2, r0
 801f900:	000b      	movs	r3, r1
 801f902:	0030      	movs	r0, r6
 801f904:	0039      	movs	r1, r7
 801f906:	f7e0 fded 	bl	80004e4 <__aeabi_dcmpgt>
 801f90a:	2800      	cmp	r0, #0
 801f90c:	d15c      	bne.n	801f9c8 <_dtoa_r+0x734>
 801f90e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801f910:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f912:	2000      	movs	r0, #0
 801f914:	492a      	ldr	r1, [pc, #168]	@ (801f9c0 <_dtoa_r+0x72c>)
 801f916:	f7e3 f959 	bl	8002bcc <__aeabi_dsub>
 801f91a:	0002      	movs	r2, r0
 801f91c:	000b      	movs	r3, r1
 801f91e:	0030      	movs	r0, r6
 801f920:	0039      	movs	r1, r7
 801f922:	f7e0 fdcb 	bl	80004bc <__aeabi_dcmplt>
 801f926:	2800      	cmp	r0, #0
 801f928:	d100      	bne.n	801f92c <_dtoa_r+0x698>
 801f92a:	e6ee      	b.n	801f70a <_dtoa_r+0x476>
 801f92c:	0023      	movs	r3, r4
 801f92e:	3c01      	subs	r4, #1
 801f930:	7822      	ldrb	r2, [r4, #0]
 801f932:	2a30      	cmp	r2, #48	@ 0x30
 801f934:	d0fa      	beq.n	801f92c <_dtoa_r+0x698>
 801f936:	001c      	movs	r4, r3
 801f938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f93a:	9304      	str	r3, [sp, #16]
 801f93c:	e73e      	b.n	801f7bc <_dtoa_r+0x528>
 801f93e:	2200      	movs	r2, #0
 801f940:	4b1b      	ldr	r3, [pc, #108]	@ (801f9b0 <_dtoa_r+0x71c>)
 801f942:	f7e2 fe7b 	bl	800263c <__aeabi_dmul>
 801f946:	900a      	str	r0, [sp, #40]	@ 0x28
 801f948:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f94a:	e7b9      	b.n	801f8c0 <_dtoa_r+0x62c>
 801f94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f94e:	2b00      	cmp	r3, #0
 801f950:	d10c      	bne.n	801f96c <_dtoa_r+0x6d8>
 801f952:	9806      	ldr	r0, [sp, #24]
 801f954:	9907      	ldr	r1, [sp, #28]
 801f956:	2200      	movs	r2, #0
 801f958:	4b18      	ldr	r3, [pc, #96]	@ (801f9bc <_dtoa_r+0x728>)
 801f95a:	f7e2 fe6f 	bl	800263c <__aeabi_dmul>
 801f95e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f960:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f962:	f7e0 fdc9 	bl	80004f8 <__aeabi_dcmpge>
 801f966:	2800      	cmp	r0, #0
 801f968:	d100      	bne.n	801f96c <_dtoa_r+0x6d8>
 801f96a:	e164      	b.n	801fc36 <_dtoa_r+0x9a2>
 801f96c:	2600      	movs	r6, #0
 801f96e:	0037      	movs	r7, r6
 801f970:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f972:	9c08      	ldr	r4, [sp, #32]
 801f974:	43db      	mvns	r3, r3
 801f976:	930c      	str	r3, [sp, #48]	@ 0x30
 801f978:	2300      	movs	r3, #0
 801f97a:	9304      	str	r3, [sp, #16]
 801f97c:	0031      	movs	r1, r6
 801f97e:	9803      	ldr	r0, [sp, #12]
 801f980:	f000 ff32 	bl	80207e8 <_Bfree>
 801f984:	2f00      	cmp	r7, #0
 801f986:	d0d7      	beq.n	801f938 <_dtoa_r+0x6a4>
 801f988:	9b04      	ldr	r3, [sp, #16]
 801f98a:	2b00      	cmp	r3, #0
 801f98c:	d005      	beq.n	801f99a <_dtoa_r+0x706>
 801f98e:	42bb      	cmp	r3, r7
 801f990:	d003      	beq.n	801f99a <_dtoa_r+0x706>
 801f992:	0019      	movs	r1, r3
 801f994:	9803      	ldr	r0, [sp, #12]
 801f996:	f000 ff27 	bl	80207e8 <_Bfree>
 801f99a:	0039      	movs	r1, r7
 801f99c:	9803      	ldr	r0, [sp, #12]
 801f99e:	f000 ff23 	bl	80207e8 <_Bfree>
 801f9a2:	e7c9      	b.n	801f938 <_dtoa_r+0x6a4>
 801f9a4:	080244f0 	.word	0x080244f0
 801f9a8:	080244c8 	.word	0x080244c8
 801f9ac:	3ff00000 	.word	0x3ff00000
 801f9b0:	40240000 	.word	0x40240000
 801f9b4:	401c0000 	.word	0x401c0000
 801f9b8:	fcc00000 	.word	0xfcc00000
 801f9bc:	40140000 	.word	0x40140000
 801f9c0:	3fe00000 	.word	0x3fe00000
 801f9c4:	9b04      	ldr	r3, [sp, #16]
 801f9c6:	930c      	str	r3, [sp, #48]	@ 0x30
 801f9c8:	0023      	movs	r3, r4
 801f9ca:	001c      	movs	r4, r3
 801f9cc:	3b01      	subs	r3, #1
 801f9ce:	781a      	ldrb	r2, [r3, #0]
 801f9d0:	2a39      	cmp	r2, #57	@ 0x39
 801f9d2:	d108      	bne.n	801f9e6 <_dtoa_r+0x752>
 801f9d4:	9a08      	ldr	r2, [sp, #32]
 801f9d6:	429a      	cmp	r2, r3
 801f9d8:	d1f7      	bne.n	801f9ca <_dtoa_r+0x736>
 801f9da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801f9dc:	9908      	ldr	r1, [sp, #32]
 801f9de:	3201      	adds	r2, #1
 801f9e0:	920c      	str	r2, [sp, #48]	@ 0x30
 801f9e2:	2230      	movs	r2, #48	@ 0x30
 801f9e4:	700a      	strb	r2, [r1, #0]
 801f9e6:	781a      	ldrb	r2, [r3, #0]
 801f9e8:	3201      	adds	r2, #1
 801f9ea:	701a      	strb	r2, [r3, #0]
 801f9ec:	e7a4      	b.n	801f938 <_dtoa_r+0x6a4>
 801f9ee:	2200      	movs	r2, #0
 801f9f0:	4bc6      	ldr	r3, [pc, #792]	@ (801fd0c <_dtoa_r+0xa78>)
 801f9f2:	f7e2 fe23 	bl	800263c <__aeabi_dmul>
 801f9f6:	2200      	movs	r2, #0
 801f9f8:	2300      	movs	r3, #0
 801f9fa:	0006      	movs	r6, r0
 801f9fc:	000f      	movs	r7, r1
 801f9fe:	f7e0 fd57 	bl	80004b0 <__aeabi_dcmpeq>
 801fa02:	2800      	cmp	r0, #0
 801fa04:	d100      	bne.n	801fa08 <_dtoa_r+0x774>
 801fa06:	e6a1      	b.n	801f74c <_dtoa_r+0x4b8>
 801fa08:	e6d8      	b.n	801f7bc <_dtoa_r+0x528>
 801fa0a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801fa0c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801fa0e:	9c06      	ldr	r4, [sp, #24]
 801fa10:	2f00      	cmp	r7, #0
 801fa12:	d014      	beq.n	801fa3e <_dtoa_r+0x7aa>
 801fa14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801fa16:	2a01      	cmp	r2, #1
 801fa18:	dd00      	ble.n	801fa1c <_dtoa_r+0x788>
 801fa1a:	e0c8      	b.n	801fbae <_dtoa_r+0x91a>
 801fa1c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fa1e:	2a00      	cmp	r2, #0
 801fa20:	d100      	bne.n	801fa24 <_dtoa_r+0x790>
 801fa22:	e0be      	b.n	801fba2 <_dtoa_r+0x90e>
 801fa24:	4aba      	ldr	r2, [pc, #744]	@ (801fd10 <_dtoa_r+0xa7c>)
 801fa26:	189b      	adds	r3, r3, r2
 801fa28:	9a06      	ldr	r2, [sp, #24]
 801fa2a:	2101      	movs	r1, #1
 801fa2c:	18d2      	adds	r2, r2, r3
 801fa2e:	9206      	str	r2, [sp, #24]
 801fa30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa32:	9803      	ldr	r0, [sp, #12]
 801fa34:	18d3      	adds	r3, r2, r3
 801fa36:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa38:	f000 ffda 	bl	80209f0 <__i2b>
 801fa3c:	0007      	movs	r7, r0
 801fa3e:	2c00      	cmp	r4, #0
 801fa40:	d00e      	beq.n	801fa60 <_dtoa_r+0x7cc>
 801fa42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	dd0b      	ble.n	801fa60 <_dtoa_r+0x7cc>
 801fa48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa4a:	0023      	movs	r3, r4
 801fa4c:	4294      	cmp	r4, r2
 801fa4e:	dd00      	ble.n	801fa52 <_dtoa_r+0x7be>
 801fa50:	0013      	movs	r3, r2
 801fa52:	9a06      	ldr	r2, [sp, #24]
 801fa54:	1ae4      	subs	r4, r4, r3
 801fa56:	1ad2      	subs	r2, r2, r3
 801fa58:	9206      	str	r2, [sp, #24]
 801fa5a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fa5c:	1ad3      	subs	r3, r2, r3
 801fa5e:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	d01f      	beq.n	801faa6 <_dtoa_r+0x812>
 801fa66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	d100      	bne.n	801fa6e <_dtoa_r+0x7da>
 801fa6c:	e0b5      	b.n	801fbda <_dtoa_r+0x946>
 801fa6e:	2d00      	cmp	r5, #0
 801fa70:	d010      	beq.n	801fa94 <_dtoa_r+0x800>
 801fa72:	0039      	movs	r1, r7
 801fa74:	002a      	movs	r2, r5
 801fa76:	9803      	ldr	r0, [sp, #12]
 801fa78:	f001 f884 	bl	8020b84 <__pow5mult>
 801fa7c:	9a05      	ldr	r2, [sp, #20]
 801fa7e:	0001      	movs	r1, r0
 801fa80:	0007      	movs	r7, r0
 801fa82:	9803      	ldr	r0, [sp, #12]
 801fa84:	f000 ffcc 	bl	8020a20 <__multiply>
 801fa88:	0006      	movs	r6, r0
 801fa8a:	9905      	ldr	r1, [sp, #20]
 801fa8c:	9803      	ldr	r0, [sp, #12]
 801fa8e:	f000 feab 	bl	80207e8 <_Bfree>
 801fa92:	9605      	str	r6, [sp, #20]
 801fa94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fa96:	1b5a      	subs	r2, r3, r5
 801fa98:	42ab      	cmp	r3, r5
 801fa9a:	d004      	beq.n	801faa6 <_dtoa_r+0x812>
 801fa9c:	9905      	ldr	r1, [sp, #20]
 801fa9e:	9803      	ldr	r0, [sp, #12]
 801faa0:	f001 f870 	bl	8020b84 <__pow5mult>
 801faa4:	9005      	str	r0, [sp, #20]
 801faa6:	2101      	movs	r1, #1
 801faa8:	9803      	ldr	r0, [sp, #12]
 801faaa:	f000 ffa1 	bl	80209f0 <__i2b>
 801faae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801fab0:	0006      	movs	r6, r0
 801fab2:	2b00      	cmp	r3, #0
 801fab4:	d100      	bne.n	801fab8 <_dtoa_r+0x824>
 801fab6:	e1bc      	b.n	801fe32 <_dtoa_r+0xb9e>
 801fab8:	001a      	movs	r2, r3
 801faba:	0001      	movs	r1, r0
 801fabc:	9803      	ldr	r0, [sp, #12]
 801fabe:	f001 f861 	bl	8020b84 <__pow5mult>
 801fac2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fac4:	0006      	movs	r6, r0
 801fac6:	2500      	movs	r5, #0
 801fac8:	2b01      	cmp	r3, #1
 801faca:	dc16      	bgt.n	801fafa <_dtoa_r+0x866>
 801facc:	2500      	movs	r5, #0
 801face:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fad0:	42ab      	cmp	r3, r5
 801fad2:	d10e      	bne.n	801faf2 <_dtoa_r+0x85e>
 801fad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fad6:	031b      	lsls	r3, r3, #12
 801fad8:	42ab      	cmp	r3, r5
 801fada:	d10a      	bne.n	801faf2 <_dtoa_r+0x85e>
 801fadc:	4b8d      	ldr	r3, [pc, #564]	@ (801fd14 <_dtoa_r+0xa80>)
 801fade:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fae0:	4213      	tst	r3, r2
 801fae2:	d006      	beq.n	801faf2 <_dtoa_r+0x85e>
 801fae4:	9b06      	ldr	r3, [sp, #24]
 801fae6:	3501      	adds	r5, #1
 801fae8:	3301      	adds	r3, #1
 801faea:	9306      	str	r3, [sp, #24]
 801faec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801faee:	3301      	adds	r3, #1
 801faf0:	930d      	str	r3, [sp, #52]	@ 0x34
 801faf2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801faf4:	2001      	movs	r0, #1
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d008      	beq.n	801fb0c <_dtoa_r+0x878>
 801fafa:	6933      	ldr	r3, [r6, #16]
 801fafc:	3303      	adds	r3, #3
 801fafe:	009b      	lsls	r3, r3, #2
 801fb00:	18f3      	adds	r3, r6, r3
 801fb02:	6858      	ldr	r0, [r3, #4]
 801fb04:	f000 ff24 	bl	8020950 <__hi0bits>
 801fb08:	2320      	movs	r3, #32
 801fb0a:	1a18      	subs	r0, r3, r0
 801fb0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fb0e:	1818      	adds	r0, r3, r0
 801fb10:	0002      	movs	r2, r0
 801fb12:	231f      	movs	r3, #31
 801fb14:	401a      	ands	r2, r3
 801fb16:	4218      	tst	r0, r3
 801fb18:	d065      	beq.n	801fbe6 <_dtoa_r+0x952>
 801fb1a:	3301      	adds	r3, #1
 801fb1c:	1a9b      	subs	r3, r3, r2
 801fb1e:	2b04      	cmp	r3, #4
 801fb20:	dd5d      	ble.n	801fbde <_dtoa_r+0x94a>
 801fb22:	231c      	movs	r3, #28
 801fb24:	1a9b      	subs	r3, r3, r2
 801fb26:	9a06      	ldr	r2, [sp, #24]
 801fb28:	18e4      	adds	r4, r4, r3
 801fb2a:	18d2      	adds	r2, r2, r3
 801fb2c:	9206      	str	r2, [sp, #24]
 801fb2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801fb30:	18d3      	adds	r3, r2, r3
 801fb32:	930d      	str	r3, [sp, #52]	@ 0x34
 801fb34:	9b06      	ldr	r3, [sp, #24]
 801fb36:	2b00      	cmp	r3, #0
 801fb38:	dd05      	ble.n	801fb46 <_dtoa_r+0x8b2>
 801fb3a:	001a      	movs	r2, r3
 801fb3c:	9905      	ldr	r1, [sp, #20]
 801fb3e:	9803      	ldr	r0, [sp, #12]
 801fb40:	f001 f87c 	bl	8020c3c <__lshift>
 801fb44:	9005      	str	r0, [sp, #20]
 801fb46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	dd05      	ble.n	801fb58 <_dtoa_r+0x8c4>
 801fb4c:	0031      	movs	r1, r6
 801fb4e:	001a      	movs	r2, r3
 801fb50:	9803      	ldr	r0, [sp, #12]
 801fb52:	f001 f873 	bl	8020c3c <__lshift>
 801fb56:	0006      	movs	r6, r0
 801fb58:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d045      	beq.n	801fbea <_dtoa_r+0x956>
 801fb5e:	0031      	movs	r1, r6
 801fb60:	9805      	ldr	r0, [sp, #20]
 801fb62:	f001 f8d7 	bl	8020d14 <__mcmp>
 801fb66:	2800      	cmp	r0, #0
 801fb68:	da3f      	bge.n	801fbea <_dtoa_r+0x956>
 801fb6a:	9b04      	ldr	r3, [sp, #16]
 801fb6c:	220a      	movs	r2, #10
 801fb6e:	3b01      	subs	r3, #1
 801fb70:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb72:	9905      	ldr	r1, [sp, #20]
 801fb74:	2300      	movs	r3, #0
 801fb76:	9803      	ldr	r0, [sp, #12]
 801fb78:	f000 fe5a 	bl	8020830 <__multadd>
 801fb7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fb7e:	9005      	str	r0, [sp, #20]
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d100      	bne.n	801fb86 <_dtoa_r+0x8f2>
 801fb84:	e15c      	b.n	801fe40 <_dtoa_r+0xbac>
 801fb86:	2300      	movs	r3, #0
 801fb88:	0039      	movs	r1, r7
 801fb8a:	220a      	movs	r2, #10
 801fb8c:	9803      	ldr	r0, [sp, #12]
 801fb8e:	f000 fe4f 	bl	8020830 <__multadd>
 801fb92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fb94:	0007      	movs	r7, r0
 801fb96:	2b00      	cmp	r3, #0
 801fb98:	dc55      	bgt.n	801fc46 <_dtoa_r+0x9b2>
 801fb9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fb9c:	2b02      	cmp	r3, #2
 801fb9e:	dc2d      	bgt.n	801fbfc <_dtoa_r+0x968>
 801fba0:	e051      	b.n	801fc46 <_dtoa_r+0x9b2>
 801fba2:	2336      	movs	r3, #54	@ 0x36
 801fba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801fba6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801fba8:	9c06      	ldr	r4, [sp, #24]
 801fbaa:	1a9b      	subs	r3, r3, r2
 801fbac:	e73c      	b.n	801fa28 <_dtoa_r+0x794>
 801fbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbb0:	1e5d      	subs	r5, r3, #1
 801fbb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbb4:	42ab      	cmp	r3, r5
 801fbb6:	db08      	blt.n	801fbca <_dtoa_r+0x936>
 801fbb8:	1b5d      	subs	r5, r3, r5
 801fbba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbbc:	9c06      	ldr	r4, [sp, #24]
 801fbbe:	2b00      	cmp	r3, #0
 801fbc0:	db00      	blt.n	801fbc4 <_dtoa_r+0x930>
 801fbc2:	e731      	b.n	801fa28 <_dtoa_r+0x794>
 801fbc4:	1ae4      	subs	r4, r4, r3
 801fbc6:	2300      	movs	r3, #0
 801fbc8:	e72e      	b.n	801fa28 <_dtoa_r+0x794>
 801fbca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbcc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fbce:	1aeb      	subs	r3, r5, r3
 801fbd0:	18d3      	adds	r3, r2, r3
 801fbd2:	950f      	str	r5, [sp, #60]	@ 0x3c
 801fbd4:	9314      	str	r3, [sp, #80]	@ 0x50
 801fbd6:	2500      	movs	r5, #0
 801fbd8:	e7ef      	b.n	801fbba <_dtoa_r+0x926>
 801fbda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fbdc:	e75e      	b.n	801fa9c <_dtoa_r+0x808>
 801fbde:	2b04      	cmp	r3, #4
 801fbe0:	d0a8      	beq.n	801fb34 <_dtoa_r+0x8a0>
 801fbe2:	331c      	adds	r3, #28
 801fbe4:	e79f      	b.n	801fb26 <_dtoa_r+0x892>
 801fbe6:	0013      	movs	r3, r2
 801fbe8:	e7fb      	b.n	801fbe2 <_dtoa_r+0x94e>
 801fbea:	9b04      	ldr	r3, [sp, #16]
 801fbec:	930c      	str	r3, [sp, #48]	@ 0x30
 801fbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fbf0:	930e      	str	r3, [sp, #56]	@ 0x38
 801fbf2:	2b00      	cmp	r3, #0
 801fbf4:	dc23      	bgt.n	801fc3e <_dtoa_r+0x9aa>
 801fbf6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fbf8:	2b02      	cmp	r3, #2
 801fbfa:	dd20      	ble.n	801fc3e <_dtoa_r+0x9aa>
 801fbfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d000      	beq.n	801fc04 <_dtoa_r+0x970>
 801fc02:	e6b5      	b.n	801f970 <_dtoa_r+0x6dc>
 801fc04:	0031      	movs	r1, r6
 801fc06:	2205      	movs	r2, #5
 801fc08:	9803      	ldr	r0, [sp, #12]
 801fc0a:	f000 fe11 	bl	8020830 <__multadd>
 801fc0e:	0006      	movs	r6, r0
 801fc10:	0001      	movs	r1, r0
 801fc12:	9805      	ldr	r0, [sp, #20]
 801fc14:	f001 f87e 	bl	8020d14 <__mcmp>
 801fc18:	2800      	cmp	r0, #0
 801fc1a:	dc00      	bgt.n	801fc1e <_dtoa_r+0x98a>
 801fc1c:	e6a8      	b.n	801f970 <_dtoa_r+0x6dc>
 801fc1e:	9b08      	ldr	r3, [sp, #32]
 801fc20:	9a08      	ldr	r2, [sp, #32]
 801fc22:	1c5c      	adds	r4, r3, #1
 801fc24:	2331      	movs	r3, #49	@ 0x31
 801fc26:	7013      	strb	r3, [r2, #0]
 801fc28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fc2a:	3301      	adds	r3, #1
 801fc2c:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc2e:	e6a3      	b.n	801f978 <_dtoa_r+0x6e4>
 801fc30:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801fc32:	0037      	movs	r7, r6
 801fc34:	e7f3      	b.n	801fc1e <_dtoa_r+0x98a>
 801fc36:	9b04      	ldr	r3, [sp, #16]
 801fc38:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801fc3a:	930c      	str	r3, [sp, #48]	@ 0x30
 801fc3c:	e7f9      	b.n	801fc32 <_dtoa_r+0x99e>
 801fc3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d100      	bne.n	801fc46 <_dtoa_r+0x9b2>
 801fc44:	e100      	b.n	801fe48 <_dtoa_r+0xbb4>
 801fc46:	2c00      	cmp	r4, #0
 801fc48:	dd05      	ble.n	801fc56 <_dtoa_r+0x9c2>
 801fc4a:	0039      	movs	r1, r7
 801fc4c:	0022      	movs	r2, r4
 801fc4e:	9803      	ldr	r0, [sp, #12]
 801fc50:	f000 fff4 	bl	8020c3c <__lshift>
 801fc54:	0007      	movs	r7, r0
 801fc56:	0038      	movs	r0, r7
 801fc58:	2d00      	cmp	r5, #0
 801fc5a:	d018      	beq.n	801fc8e <_dtoa_r+0x9fa>
 801fc5c:	6879      	ldr	r1, [r7, #4]
 801fc5e:	9803      	ldr	r0, [sp, #12]
 801fc60:	f000 fd7e 	bl	8020760 <_Balloc>
 801fc64:	1e04      	subs	r4, r0, #0
 801fc66:	d105      	bne.n	801fc74 <_dtoa_r+0x9e0>
 801fc68:	0022      	movs	r2, r4
 801fc6a:	4b2b      	ldr	r3, [pc, #172]	@ (801fd18 <_dtoa_r+0xa84>)
 801fc6c:	482b      	ldr	r0, [pc, #172]	@ (801fd1c <_dtoa_r+0xa88>)
 801fc6e:	492c      	ldr	r1, [pc, #176]	@ (801fd20 <_dtoa_r+0xa8c>)
 801fc70:	f7ff fb25 	bl	801f2be <_dtoa_r+0x2a>
 801fc74:	0039      	movs	r1, r7
 801fc76:	693a      	ldr	r2, [r7, #16]
 801fc78:	310c      	adds	r1, #12
 801fc7a:	3202      	adds	r2, #2
 801fc7c:	0092      	lsls	r2, r2, #2
 801fc7e:	300c      	adds	r0, #12
 801fc80:	f7ff fa6a 	bl	801f158 <memcpy>
 801fc84:	2201      	movs	r2, #1
 801fc86:	0021      	movs	r1, r4
 801fc88:	9803      	ldr	r0, [sp, #12]
 801fc8a:	f000 ffd7 	bl	8020c3c <__lshift>
 801fc8e:	9b08      	ldr	r3, [sp, #32]
 801fc90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fc92:	9306      	str	r3, [sp, #24]
 801fc94:	3b01      	subs	r3, #1
 801fc96:	189b      	adds	r3, r3, r2
 801fc98:	2201      	movs	r2, #1
 801fc9a:	9704      	str	r7, [sp, #16]
 801fc9c:	0007      	movs	r7, r0
 801fc9e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fca2:	4013      	ands	r3, r2
 801fca4:	930e      	str	r3, [sp, #56]	@ 0x38
 801fca6:	0031      	movs	r1, r6
 801fca8:	9805      	ldr	r0, [sp, #20]
 801fcaa:	f7ff fa65 	bl	801f178 <quorem>
 801fcae:	9904      	ldr	r1, [sp, #16]
 801fcb0:	0005      	movs	r5, r0
 801fcb2:	900a      	str	r0, [sp, #40]	@ 0x28
 801fcb4:	9805      	ldr	r0, [sp, #20]
 801fcb6:	f001 f82d 	bl	8020d14 <__mcmp>
 801fcba:	003a      	movs	r2, r7
 801fcbc:	900d      	str	r0, [sp, #52]	@ 0x34
 801fcbe:	0031      	movs	r1, r6
 801fcc0:	9803      	ldr	r0, [sp, #12]
 801fcc2:	f001 f843 	bl	8020d4c <__mdiff>
 801fcc6:	2201      	movs	r2, #1
 801fcc8:	68c3      	ldr	r3, [r0, #12]
 801fcca:	0004      	movs	r4, r0
 801fccc:	3530      	adds	r5, #48	@ 0x30
 801fcce:	9209      	str	r2, [sp, #36]	@ 0x24
 801fcd0:	2b00      	cmp	r3, #0
 801fcd2:	d104      	bne.n	801fcde <_dtoa_r+0xa4a>
 801fcd4:	0001      	movs	r1, r0
 801fcd6:	9805      	ldr	r0, [sp, #20]
 801fcd8:	f001 f81c 	bl	8020d14 <__mcmp>
 801fcdc:	9009      	str	r0, [sp, #36]	@ 0x24
 801fcde:	0021      	movs	r1, r4
 801fce0:	9803      	ldr	r0, [sp, #12]
 801fce2:	f000 fd81 	bl	80207e8 <_Bfree>
 801fce6:	9b06      	ldr	r3, [sp, #24]
 801fce8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fcea:	1c5c      	adds	r4, r3, #1
 801fcec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fcee:	4313      	orrs	r3, r2
 801fcf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fcf2:	4313      	orrs	r3, r2
 801fcf4:	d116      	bne.n	801fd24 <_dtoa_r+0xa90>
 801fcf6:	2d39      	cmp	r5, #57	@ 0x39
 801fcf8:	d02f      	beq.n	801fd5a <_dtoa_r+0xac6>
 801fcfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	dd01      	ble.n	801fd04 <_dtoa_r+0xa70>
 801fd00:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801fd02:	3531      	adds	r5, #49	@ 0x31
 801fd04:	9b06      	ldr	r3, [sp, #24]
 801fd06:	701d      	strb	r5, [r3, #0]
 801fd08:	e638      	b.n	801f97c <_dtoa_r+0x6e8>
 801fd0a:	46c0      	nop			@ (mov r8, r8)
 801fd0c:	40240000 	.word	0x40240000
 801fd10:	00000433 	.word	0x00000433
 801fd14:	7ff00000 	.word	0x7ff00000
 801fd18:	080243f1 	.word	0x080243f1
 801fd1c:	08024399 	.word	0x08024399
 801fd20:	000002ef 	.word	0x000002ef
 801fd24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	db04      	blt.n	801fd34 <_dtoa_r+0xaa0>
 801fd2a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801fd2c:	4313      	orrs	r3, r2
 801fd2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fd30:	4313      	orrs	r3, r2
 801fd32:	d11e      	bne.n	801fd72 <_dtoa_r+0xade>
 801fd34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd36:	2b00      	cmp	r3, #0
 801fd38:	dde4      	ble.n	801fd04 <_dtoa_r+0xa70>
 801fd3a:	9905      	ldr	r1, [sp, #20]
 801fd3c:	2201      	movs	r2, #1
 801fd3e:	9803      	ldr	r0, [sp, #12]
 801fd40:	f000 ff7c 	bl	8020c3c <__lshift>
 801fd44:	0031      	movs	r1, r6
 801fd46:	9005      	str	r0, [sp, #20]
 801fd48:	f000 ffe4 	bl	8020d14 <__mcmp>
 801fd4c:	2800      	cmp	r0, #0
 801fd4e:	dc02      	bgt.n	801fd56 <_dtoa_r+0xac2>
 801fd50:	d1d8      	bne.n	801fd04 <_dtoa_r+0xa70>
 801fd52:	07eb      	lsls	r3, r5, #31
 801fd54:	d5d6      	bpl.n	801fd04 <_dtoa_r+0xa70>
 801fd56:	2d39      	cmp	r5, #57	@ 0x39
 801fd58:	d1d2      	bne.n	801fd00 <_dtoa_r+0xa6c>
 801fd5a:	2339      	movs	r3, #57	@ 0x39
 801fd5c:	9a06      	ldr	r2, [sp, #24]
 801fd5e:	7013      	strb	r3, [r2, #0]
 801fd60:	0023      	movs	r3, r4
 801fd62:	001c      	movs	r4, r3
 801fd64:	3b01      	subs	r3, #1
 801fd66:	781a      	ldrb	r2, [r3, #0]
 801fd68:	2a39      	cmp	r2, #57	@ 0x39
 801fd6a:	d04f      	beq.n	801fe0c <_dtoa_r+0xb78>
 801fd6c:	3201      	adds	r2, #1
 801fd6e:	701a      	strb	r2, [r3, #0]
 801fd70:	e604      	b.n	801f97c <_dtoa_r+0x6e8>
 801fd72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd74:	2b00      	cmp	r3, #0
 801fd76:	dd03      	ble.n	801fd80 <_dtoa_r+0xaec>
 801fd78:	2d39      	cmp	r5, #57	@ 0x39
 801fd7a:	d0ee      	beq.n	801fd5a <_dtoa_r+0xac6>
 801fd7c:	3501      	adds	r5, #1
 801fd7e:	e7c1      	b.n	801fd04 <_dtoa_r+0xa70>
 801fd80:	9b06      	ldr	r3, [sp, #24]
 801fd82:	9a06      	ldr	r2, [sp, #24]
 801fd84:	701d      	strb	r5, [r3, #0]
 801fd86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fd88:	4293      	cmp	r3, r2
 801fd8a:	d02a      	beq.n	801fde2 <_dtoa_r+0xb4e>
 801fd8c:	2300      	movs	r3, #0
 801fd8e:	220a      	movs	r2, #10
 801fd90:	9905      	ldr	r1, [sp, #20]
 801fd92:	9803      	ldr	r0, [sp, #12]
 801fd94:	f000 fd4c 	bl	8020830 <__multadd>
 801fd98:	9b04      	ldr	r3, [sp, #16]
 801fd9a:	9005      	str	r0, [sp, #20]
 801fd9c:	42bb      	cmp	r3, r7
 801fd9e:	d109      	bne.n	801fdb4 <_dtoa_r+0xb20>
 801fda0:	2300      	movs	r3, #0
 801fda2:	220a      	movs	r2, #10
 801fda4:	9904      	ldr	r1, [sp, #16]
 801fda6:	9803      	ldr	r0, [sp, #12]
 801fda8:	f000 fd42 	bl	8020830 <__multadd>
 801fdac:	9004      	str	r0, [sp, #16]
 801fdae:	0007      	movs	r7, r0
 801fdb0:	9406      	str	r4, [sp, #24]
 801fdb2:	e778      	b.n	801fca6 <_dtoa_r+0xa12>
 801fdb4:	9904      	ldr	r1, [sp, #16]
 801fdb6:	2300      	movs	r3, #0
 801fdb8:	220a      	movs	r2, #10
 801fdba:	9803      	ldr	r0, [sp, #12]
 801fdbc:	f000 fd38 	bl	8020830 <__multadd>
 801fdc0:	2300      	movs	r3, #0
 801fdc2:	9004      	str	r0, [sp, #16]
 801fdc4:	220a      	movs	r2, #10
 801fdc6:	0039      	movs	r1, r7
 801fdc8:	9803      	ldr	r0, [sp, #12]
 801fdca:	f000 fd31 	bl	8020830 <__multadd>
 801fdce:	e7ee      	b.n	801fdae <_dtoa_r+0xb1a>
 801fdd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fdd2:	2401      	movs	r4, #1
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	dd00      	ble.n	801fdda <_dtoa_r+0xb46>
 801fdd8:	001c      	movs	r4, r3
 801fdda:	9b08      	ldr	r3, [sp, #32]
 801fddc:	191c      	adds	r4, r3, r4
 801fdde:	2300      	movs	r3, #0
 801fde0:	9304      	str	r3, [sp, #16]
 801fde2:	9905      	ldr	r1, [sp, #20]
 801fde4:	2201      	movs	r2, #1
 801fde6:	9803      	ldr	r0, [sp, #12]
 801fde8:	f000 ff28 	bl	8020c3c <__lshift>
 801fdec:	0031      	movs	r1, r6
 801fdee:	9005      	str	r0, [sp, #20]
 801fdf0:	f000 ff90 	bl	8020d14 <__mcmp>
 801fdf4:	2800      	cmp	r0, #0
 801fdf6:	dcb3      	bgt.n	801fd60 <_dtoa_r+0xacc>
 801fdf8:	d101      	bne.n	801fdfe <_dtoa_r+0xb6a>
 801fdfa:	07ed      	lsls	r5, r5, #31
 801fdfc:	d4b0      	bmi.n	801fd60 <_dtoa_r+0xacc>
 801fdfe:	0023      	movs	r3, r4
 801fe00:	001c      	movs	r4, r3
 801fe02:	3b01      	subs	r3, #1
 801fe04:	781a      	ldrb	r2, [r3, #0]
 801fe06:	2a30      	cmp	r2, #48	@ 0x30
 801fe08:	d0fa      	beq.n	801fe00 <_dtoa_r+0xb6c>
 801fe0a:	e5b7      	b.n	801f97c <_dtoa_r+0x6e8>
 801fe0c:	9a08      	ldr	r2, [sp, #32]
 801fe0e:	429a      	cmp	r2, r3
 801fe10:	d1a7      	bne.n	801fd62 <_dtoa_r+0xace>
 801fe12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fe14:	3301      	adds	r3, #1
 801fe16:	930c      	str	r3, [sp, #48]	@ 0x30
 801fe18:	2331      	movs	r3, #49	@ 0x31
 801fe1a:	7013      	strb	r3, [r2, #0]
 801fe1c:	e5ae      	b.n	801f97c <_dtoa_r+0x6e8>
 801fe1e:	4b15      	ldr	r3, [pc, #84]	@ (801fe74 <_dtoa_r+0xbe0>)
 801fe20:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801fe22:	9308      	str	r3, [sp, #32]
 801fe24:	4b14      	ldr	r3, [pc, #80]	@ (801fe78 <_dtoa_r+0xbe4>)
 801fe26:	2a00      	cmp	r2, #0
 801fe28:	d001      	beq.n	801fe2e <_dtoa_r+0xb9a>
 801fe2a:	f7ff fa7b 	bl	801f324 <_dtoa_r+0x90>
 801fe2e:	f7ff fa7b 	bl	801f328 <_dtoa_r+0x94>
 801fe32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801fe34:	2b01      	cmp	r3, #1
 801fe36:	dc00      	bgt.n	801fe3a <_dtoa_r+0xba6>
 801fe38:	e648      	b.n	801facc <_dtoa_r+0x838>
 801fe3a:	2001      	movs	r0, #1
 801fe3c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801fe3e:	e665      	b.n	801fb0c <_dtoa_r+0x878>
 801fe40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe42:	2b00      	cmp	r3, #0
 801fe44:	dc00      	bgt.n	801fe48 <_dtoa_r+0xbb4>
 801fe46:	e6d6      	b.n	801fbf6 <_dtoa_r+0x962>
 801fe48:	2400      	movs	r4, #0
 801fe4a:	0031      	movs	r1, r6
 801fe4c:	9805      	ldr	r0, [sp, #20]
 801fe4e:	f7ff f993 	bl	801f178 <quorem>
 801fe52:	9b08      	ldr	r3, [sp, #32]
 801fe54:	3030      	adds	r0, #48	@ 0x30
 801fe56:	5518      	strb	r0, [r3, r4]
 801fe58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fe5a:	3401      	adds	r4, #1
 801fe5c:	0005      	movs	r5, r0
 801fe5e:	429c      	cmp	r4, r3
 801fe60:	dab6      	bge.n	801fdd0 <_dtoa_r+0xb3c>
 801fe62:	2300      	movs	r3, #0
 801fe64:	220a      	movs	r2, #10
 801fe66:	9905      	ldr	r1, [sp, #20]
 801fe68:	9803      	ldr	r0, [sp, #12]
 801fe6a:	f000 fce1 	bl	8020830 <__multadd>
 801fe6e:	9005      	str	r0, [sp, #20]
 801fe70:	e7eb      	b.n	801fe4a <_dtoa_r+0xbb6>
 801fe72:	46c0      	nop			@ (mov r8, r8)
 801fe74:	08024375 	.word	0x08024375
 801fe78:	0802437d 	.word	0x0802437d

0801fe7c <_free_r>:
 801fe7c:	b570      	push	{r4, r5, r6, lr}
 801fe7e:	0005      	movs	r5, r0
 801fe80:	1e0c      	subs	r4, r1, #0
 801fe82:	d010      	beq.n	801fea6 <_free_r+0x2a>
 801fe84:	3c04      	subs	r4, #4
 801fe86:	6823      	ldr	r3, [r4, #0]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	da00      	bge.n	801fe8e <_free_r+0x12>
 801fe8c:	18e4      	adds	r4, r4, r3
 801fe8e:	0028      	movs	r0, r5
 801fe90:	f000 fc56 	bl	8020740 <__malloc_lock>
 801fe94:	4a1d      	ldr	r2, [pc, #116]	@ (801ff0c <_free_r+0x90>)
 801fe96:	6813      	ldr	r3, [r2, #0]
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d105      	bne.n	801fea8 <_free_r+0x2c>
 801fe9c:	6063      	str	r3, [r4, #4]
 801fe9e:	6014      	str	r4, [r2, #0]
 801fea0:	0028      	movs	r0, r5
 801fea2:	f000 fc55 	bl	8020750 <__malloc_unlock>
 801fea6:	bd70      	pop	{r4, r5, r6, pc}
 801fea8:	42a3      	cmp	r3, r4
 801feaa:	d908      	bls.n	801febe <_free_r+0x42>
 801feac:	6820      	ldr	r0, [r4, #0]
 801feae:	1821      	adds	r1, r4, r0
 801feb0:	428b      	cmp	r3, r1
 801feb2:	d1f3      	bne.n	801fe9c <_free_r+0x20>
 801feb4:	6819      	ldr	r1, [r3, #0]
 801feb6:	685b      	ldr	r3, [r3, #4]
 801feb8:	1809      	adds	r1, r1, r0
 801feba:	6021      	str	r1, [r4, #0]
 801febc:	e7ee      	b.n	801fe9c <_free_r+0x20>
 801febe:	001a      	movs	r2, r3
 801fec0:	685b      	ldr	r3, [r3, #4]
 801fec2:	2b00      	cmp	r3, #0
 801fec4:	d001      	beq.n	801feca <_free_r+0x4e>
 801fec6:	42a3      	cmp	r3, r4
 801fec8:	d9f9      	bls.n	801febe <_free_r+0x42>
 801feca:	6811      	ldr	r1, [r2, #0]
 801fecc:	1850      	adds	r0, r2, r1
 801fece:	42a0      	cmp	r0, r4
 801fed0:	d10b      	bne.n	801feea <_free_r+0x6e>
 801fed2:	6820      	ldr	r0, [r4, #0]
 801fed4:	1809      	adds	r1, r1, r0
 801fed6:	1850      	adds	r0, r2, r1
 801fed8:	6011      	str	r1, [r2, #0]
 801feda:	4283      	cmp	r3, r0
 801fedc:	d1e0      	bne.n	801fea0 <_free_r+0x24>
 801fede:	6818      	ldr	r0, [r3, #0]
 801fee0:	685b      	ldr	r3, [r3, #4]
 801fee2:	1841      	adds	r1, r0, r1
 801fee4:	6011      	str	r1, [r2, #0]
 801fee6:	6053      	str	r3, [r2, #4]
 801fee8:	e7da      	b.n	801fea0 <_free_r+0x24>
 801feea:	42a0      	cmp	r0, r4
 801feec:	d902      	bls.n	801fef4 <_free_r+0x78>
 801feee:	230c      	movs	r3, #12
 801fef0:	602b      	str	r3, [r5, #0]
 801fef2:	e7d5      	b.n	801fea0 <_free_r+0x24>
 801fef4:	6820      	ldr	r0, [r4, #0]
 801fef6:	1821      	adds	r1, r4, r0
 801fef8:	428b      	cmp	r3, r1
 801fefa:	d103      	bne.n	801ff04 <_free_r+0x88>
 801fefc:	6819      	ldr	r1, [r3, #0]
 801fefe:	685b      	ldr	r3, [r3, #4]
 801ff00:	1809      	adds	r1, r1, r0
 801ff02:	6021      	str	r1, [r4, #0]
 801ff04:	6063      	str	r3, [r4, #4]
 801ff06:	6054      	str	r4, [r2, #4]
 801ff08:	e7ca      	b.n	801fea0 <_free_r+0x24>
 801ff0a:	46c0      	nop			@ (mov r8, r8)
 801ff0c:	200038fc 	.word	0x200038fc

0801ff10 <rshift>:
 801ff10:	0002      	movs	r2, r0
 801ff12:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ff14:	6904      	ldr	r4, [r0, #16]
 801ff16:	b085      	sub	sp, #20
 801ff18:	3214      	adds	r2, #20
 801ff1a:	114b      	asrs	r3, r1, #5
 801ff1c:	0016      	movs	r6, r2
 801ff1e:	9302      	str	r3, [sp, #8]
 801ff20:	429c      	cmp	r4, r3
 801ff22:	dd31      	ble.n	801ff88 <rshift+0x78>
 801ff24:	261f      	movs	r6, #31
 801ff26:	000f      	movs	r7, r1
 801ff28:	009b      	lsls	r3, r3, #2
 801ff2a:	00a5      	lsls	r5, r4, #2
 801ff2c:	18d3      	adds	r3, r2, r3
 801ff2e:	4037      	ands	r7, r6
 801ff30:	1955      	adds	r5, r2, r5
 801ff32:	9300      	str	r3, [sp, #0]
 801ff34:	9701      	str	r7, [sp, #4]
 801ff36:	4231      	tst	r1, r6
 801ff38:	d10d      	bne.n	801ff56 <rshift+0x46>
 801ff3a:	0016      	movs	r6, r2
 801ff3c:	0019      	movs	r1, r3
 801ff3e:	428d      	cmp	r5, r1
 801ff40:	d836      	bhi.n	801ffb0 <rshift+0xa0>
 801ff42:	9b00      	ldr	r3, [sp, #0]
 801ff44:	2600      	movs	r6, #0
 801ff46:	3b03      	subs	r3, #3
 801ff48:	429d      	cmp	r5, r3
 801ff4a:	d302      	bcc.n	801ff52 <rshift+0x42>
 801ff4c:	9b02      	ldr	r3, [sp, #8]
 801ff4e:	1ae4      	subs	r4, r4, r3
 801ff50:	00a6      	lsls	r6, r4, #2
 801ff52:	1996      	adds	r6, r2, r6
 801ff54:	e018      	b.n	801ff88 <rshift+0x78>
 801ff56:	2120      	movs	r1, #32
 801ff58:	9e01      	ldr	r6, [sp, #4]
 801ff5a:	9f01      	ldr	r7, [sp, #4]
 801ff5c:	1b89      	subs	r1, r1, r6
 801ff5e:	9e00      	ldr	r6, [sp, #0]
 801ff60:	9103      	str	r1, [sp, #12]
 801ff62:	ce02      	ldmia	r6!, {r1}
 801ff64:	4694      	mov	ip, r2
 801ff66:	40f9      	lsrs	r1, r7
 801ff68:	42b5      	cmp	r5, r6
 801ff6a:	d816      	bhi.n	801ff9a <rshift+0x8a>
 801ff6c:	9b00      	ldr	r3, [sp, #0]
 801ff6e:	2600      	movs	r6, #0
 801ff70:	3301      	adds	r3, #1
 801ff72:	429d      	cmp	r5, r3
 801ff74:	d303      	bcc.n	801ff7e <rshift+0x6e>
 801ff76:	9b02      	ldr	r3, [sp, #8]
 801ff78:	1ae4      	subs	r4, r4, r3
 801ff7a:	00a6      	lsls	r6, r4, #2
 801ff7c:	3e04      	subs	r6, #4
 801ff7e:	1996      	adds	r6, r2, r6
 801ff80:	6031      	str	r1, [r6, #0]
 801ff82:	2900      	cmp	r1, #0
 801ff84:	d000      	beq.n	801ff88 <rshift+0x78>
 801ff86:	3604      	adds	r6, #4
 801ff88:	1ab1      	subs	r1, r6, r2
 801ff8a:	1089      	asrs	r1, r1, #2
 801ff8c:	6101      	str	r1, [r0, #16]
 801ff8e:	4296      	cmp	r6, r2
 801ff90:	d101      	bne.n	801ff96 <rshift+0x86>
 801ff92:	2300      	movs	r3, #0
 801ff94:	6143      	str	r3, [r0, #20]
 801ff96:	b005      	add	sp, #20
 801ff98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff9a:	6837      	ldr	r7, [r6, #0]
 801ff9c:	9b03      	ldr	r3, [sp, #12]
 801ff9e:	409f      	lsls	r7, r3
 801ffa0:	430f      	orrs	r7, r1
 801ffa2:	4661      	mov	r1, ip
 801ffa4:	c180      	stmia	r1!, {r7}
 801ffa6:	468c      	mov	ip, r1
 801ffa8:	9b01      	ldr	r3, [sp, #4]
 801ffaa:	ce02      	ldmia	r6!, {r1}
 801ffac:	40d9      	lsrs	r1, r3
 801ffae:	e7db      	b.n	801ff68 <rshift+0x58>
 801ffb0:	c980      	ldmia	r1!, {r7}
 801ffb2:	c680      	stmia	r6!, {r7}
 801ffb4:	e7c3      	b.n	801ff3e <rshift+0x2e>

0801ffb6 <__hexdig_fun>:
 801ffb6:	0002      	movs	r2, r0
 801ffb8:	3a30      	subs	r2, #48	@ 0x30
 801ffba:	0003      	movs	r3, r0
 801ffbc:	2a09      	cmp	r2, #9
 801ffbe:	d802      	bhi.n	801ffc6 <__hexdig_fun+0x10>
 801ffc0:	3b20      	subs	r3, #32
 801ffc2:	b2d8      	uxtb	r0, r3
 801ffc4:	4770      	bx	lr
 801ffc6:	0002      	movs	r2, r0
 801ffc8:	3a61      	subs	r2, #97	@ 0x61
 801ffca:	2a05      	cmp	r2, #5
 801ffcc:	d801      	bhi.n	801ffd2 <__hexdig_fun+0x1c>
 801ffce:	3b47      	subs	r3, #71	@ 0x47
 801ffd0:	e7f7      	b.n	801ffc2 <__hexdig_fun+0xc>
 801ffd2:	001a      	movs	r2, r3
 801ffd4:	3a41      	subs	r2, #65	@ 0x41
 801ffd6:	2000      	movs	r0, #0
 801ffd8:	2a05      	cmp	r2, #5
 801ffda:	d8f3      	bhi.n	801ffc4 <__hexdig_fun+0xe>
 801ffdc:	3b27      	subs	r3, #39	@ 0x27
 801ffde:	e7f0      	b.n	801ffc2 <__hexdig_fun+0xc>

0801ffe0 <__gethex>:
 801ffe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffe2:	b089      	sub	sp, #36	@ 0x24
 801ffe4:	9307      	str	r3, [sp, #28]
 801ffe6:	680b      	ldr	r3, [r1, #0]
 801ffe8:	9201      	str	r2, [sp, #4]
 801ffea:	9003      	str	r0, [sp, #12]
 801ffec:	9106      	str	r1, [sp, #24]
 801ffee:	1c9a      	adds	r2, r3, #2
 801fff0:	0011      	movs	r1, r2
 801fff2:	3201      	adds	r2, #1
 801fff4:	1e50      	subs	r0, r2, #1
 801fff6:	7800      	ldrb	r0, [r0, #0]
 801fff8:	2830      	cmp	r0, #48	@ 0x30
 801fffa:	d0f9      	beq.n	801fff0 <__gethex+0x10>
 801fffc:	1acb      	subs	r3, r1, r3
 801fffe:	3b02      	subs	r3, #2
 8020000:	9305      	str	r3, [sp, #20]
 8020002:	9100      	str	r1, [sp, #0]
 8020004:	f7ff ffd7 	bl	801ffb6 <__hexdig_fun>
 8020008:	2300      	movs	r3, #0
 802000a:	001d      	movs	r5, r3
 802000c:	9302      	str	r3, [sp, #8]
 802000e:	4298      	cmp	r0, r3
 8020010:	d11e      	bne.n	8020050 <__gethex+0x70>
 8020012:	2201      	movs	r2, #1
 8020014:	49a6      	ldr	r1, [pc, #664]	@ (80202b0 <__gethex+0x2d0>)
 8020016:	9800      	ldr	r0, [sp, #0]
 8020018:	f7fe ffd8 	bl	801efcc <strncmp>
 802001c:	0007      	movs	r7, r0
 802001e:	42a8      	cmp	r0, r5
 8020020:	d000      	beq.n	8020024 <__gethex+0x44>
 8020022:	e06a      	b.n	80200fa <__gethex+0x11a>
 8020024:	9b00      	ldr	r3, [sp, #0]
 8020026:	7858      	ldrb	r0, [r3, #1]
 8020028:	1c5c      	adds	r4, r3, #1
 802002a:	f7ff ffc4 	bl	801ffb6 <__hexdig_fun>
 802002e:	2301      	movs	r3, #1
 8020030:	9302      	str	r3, [sp, #8]
 8020032:	42a8      	cmp	r0, r5
 8020034:	d02f      	beq.n	8020096 <__gethex+0xb6>
 8020036:	9400      	str	r4, [sp, #0]
 8020038:	9b00      	ldr	r3, [sp, #0]
 802003a:	7818      	ldrb	r0, [r3, #0]
 802003c:	2830      	cmp	r0, #48	@ 0x30
 802003e:	d009      	beq.n	8020054 <__gethex+0x74>
 8020040:	f7ff ffb9 	bl	801ffb6 <__hexdig_fun>
 8020044:	4242      	negs	r2, r0
 8020046:	4142      	adcs	r2, r0
 8020048:	2301      	movs	r3, #1
 802004a:	0025      	movs	r5, r4
 802004c:	9202      	str	r2, [sp, #8]
 802004e:	9305      	str	r3, [sp, #20]
 8020050:	9c00      	ldr	r4, [sp, #0]
 8020052:	e004      	b.n	802005e <__gethex+0x7e>
 8020054:	9b00      	ldr	r3, [sp, #0]
 8020056:	3301      	adds	r3, #1
 8020058:	9300      	str	r3, [sp, #0]
 802005a:	e7ed      	b.n	8020038 <__gethex+0x58>
 802005c:	3401      	adds	r4, #1
 802005e:	7820      	ldrb	r0, [r4, #0]
 8020060:	f7ff ffa9 	bl	801ffb6 <__hexdig_fun>
 8020064:	1e07      	subs	r7, r0, #0
 8020066:	d1f9      	bne.n	802005c <__gethex+0x7c>
 8020068:	2201      	movs	r2, #1
 802006a:	0020      	movs	r0, r4
 802006c:	4990      	ldr	r1, [pc, #576]	@ (80202b0 <__gethex+0x2d0>)
 802006e:	f7fe ffad 	bl	801efcc <strncmp>
 8020072:	2800      	cmp	r0, #0
 8020074:	d10d      	bne.n	8020092 <__gethex+0xb2>
 8020076:	2d00      	cmp	r5, #0
 8020078:	d106      	bne.n	8020088 <__gethex+0xa8>
 802007a:	3401      	adds	r4, #1
 802007c:	0025      	movs	r5, r4
 802007e:	7820      	ldrb	r0, [r4, #0]
 8020080:	f7ff ff99 	bl	801ffb6 <__hexdig_fun>
 8020084:	2800      	cmp	r0, #0
 8020086:	d102      	bne.n	802008e <__gethex+0xae>
 8020088:	1b2d      	subs	r5, r5, r4
 802008a:	00af      	lsls	r7, r5, #2
 802008c:	e003      	b.n	8020096 <__gethex+0xb6>
 802008e:	3401      	adds	r4, #1
 8020090:	e7f5      	b.n	802007e <__gethex+0x9e>
 8020092:	2d00      	cmp	r5, #0
 8020094:	d1f8      	bne.n	8020088 <__gethex+0xa8>
 8020096:	2220      	movs	r2, #32
 8020098:	7823      	ldrb	r3, [r4, #0]
 802009a:	0026      	movs	r6, r4
 802009c:	4393      	bics	r3, r2
 802009e:	2b50      	cmp	r3, #80	@ 0x50
 80200a0:	d11d      	bne.n	80200de <__gethex+0xfe>
 80200a2:	7863      	ldrb	r3, [r4, #1]
 80200a4:	2b2b      	cmp	r3, #43	@ 0x2b
 80200a6:	d02d      	beq.n	8020104 <__gethex+0x124>
 80200a8:	2b2d      	cmp	r3, #45	@ 0x2d
 80200aa:	d02f      	beq.n	802010c <__gethex+0x12c>
 80200ac:	2300      	movs	r3, #0
 80200ae:	1c66      	adds	r6, r4, #1
 80200b0:	9304      	str	r3, [sp, #16]
 80200b2:	7830      	ldrb	r0, [r6, #0]
 80200b4:	f7ff ff7f 	bl	801ffb6 <__hexdig_fun>
 80200b8:	1e43      	subs	r3, r0, #1
 80200ba:	b2db      	uxtb	r3, r3
 80200bc:	0005      	movs	r5, r0
 80200be:	2b18      	cmp	r3, #24
 80200c0:	d82a      	bhi.n	8020118 <__gethex+0x138>
 80200c2:	7870      	ldrb	r0, [r6, #1]
 80200c4:	f7ff ff77 	bl	801ffb6 <__hexdig_fun>
 80200c8:	1e43      	subs	r3, r0, #1
 80200ca:	b2db      	uxtb	r3, r3
 80200cc:	3601      	adds	r6, #1
 80200ce:	3d10      	subs	r5, #16
 80200d0:	2b18      	cmp	r3, #24
 80200d2:	d91d      	bls.n	8020110 <__gethex+0x130>
 80200d4:	9b04      	ldr	r3, [sp, #16]
 80200d6:	2b00      	cmp	r3, #0
 80200d8:	d000      	beq.n	80200dc <__gethex+0xfc>
 80200da:	426d      	negs	r5, r5
 80200dc:	197f      	adds	r7, r7, r5
 80200de:	9b06      	ldr	r3, [sp, #24]
 80200e0:	601e      	str	r6, [r3, #0]
 80200e2:	9b02      	ldr	r3, [sp, #8]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d019      	beq.n	802011c <__gethex+0x13c>
 80200e8:	9b05      	ldr	r3, [sp, #20]
 80200ea:	2606      	movs	r6, #6
 80200ec:	425a      	negs	r2, r3
 80200ee:	4153      	adcs	r3, r2
 80200f0:	425b      	negs	r3, r3
 80200f2:	401e      	ands	r6, r3
 80200f4:	0030      	movs	r0, r6
 80200f6:	b009      	add	sp, #36	@ 0x24
 80200f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80200fa:	2301      	movs	r3, #1
 80200fc:	2700      	movs	r7, #0
 80200fe:	9c00      	ldr	r4, [sp, #0]
 8020100:	9302      	str	r3, [sp, #8]
 8020102:	e7c8      	b.n	8020096 <__gethex+0xb6>
 8020104:	2300      	movs	r3, #0
 8020106:	9304      	str	r3, [sp, #16]
 8020108:	1ca6      	adds	r6, r4, #2
 802010a:	e7d2      	b.n	80200b2 <__gethex+0xd2>
 802010c:	2301      	movs	r3, #1
 802010e:	e7fa      	b.n	8020106 <__gethex+0x126>
 8020110:	230a      	movs	r3, #10
 8020112:	435d      	muls	r5, r3
 8020114:	182d      	adds	r5, r5, r0
 8020116:	e7d4      	b.n	80200c2 <__gethex+0xe2>
 8020118:	0026      	movs	r6, r4
 802011a:	e7e0      	b.n	80200de <__gethex+0xfe>
 802011c:	9b00      	ldr	r3, [sp, #0]
 802011e:	9902      	ldr	r1, [sp, #8]
 8020120:	1ae3      	subs	r3, r4, r3
 8020122:	3b01      	subs	r3, #1
 8020124:	2b07      	cmp	r3, #7
 8020126:	dc0a      	bgt.n	802013e <__gethex+0x15e>
 8020128:	9803      	ldr	r0, [sp, #12]
 802012a:	f000 fb19 	bl	8020760 <_Balloc>
 802012e:	1e05      	subs	r5, r0, #0
 8020130:	d108      	bne.n	8020144 <__gethex+0x164>
 8020132:	002a      	movs	r2, r5
 8020134:	21e4      	movs	r1, #228	@ 0xe4
 8020136:	4b5f      	ldr	r3, [pc, #380]	@ (80202b4 <__gethex+0x2d4>)
 8020138:	485f      	ldr	r0, [pc, #380]	@ (80202b8 <__gethex+0x2d8>)
 802013a:	f001 fbf1 	bl	8021920 <__assert_func>
 802013e:	3101      	adds	r1, #1
 8020140:	105b      	asrs	r3, r3, #1
 8020142:	e7ef      	b.n	8020124 <__gethex+0x144>
 8020144:	0003      	movs	r3, r0
 8020146:	3314      	adds	r3, #20
 8020148:	9302      	str	r3, [sp, #8]
 802014a:	9305      	str	r3, [sp, #20]
 802014c:	2300      	movs	r3, #0
 802014e:	001e      	movs	r6, r3
 8020150:	9304      	str	r3, [sp, #16]
 8020152:	9b00      	ldr	r3, [sp, #0]
 8020154:	42a3      	cmp	r3, r4
 8020156:	d338      	bcc.n	80201ca <__gethex+0x1ea>
 8020158:	9c05      	ldr	r4, [sp, #20]
 802015a:	9b02      	ldr	r3, [sp, #8]
 802015c:	c440      	stmia	r4!, {r6}
 802015e:	1ae4      	subs	r4, r4, r3
 8020160:	10a4      	asrs	r4, r4, #2
 8020162:	0030      	movs	r0, r6
 8020164:	612c      	str	r4, [r5, #16]
 8020166:	f000 fbf3 	bl	8020950 <__hi0bits>
 802016a:	9b01      	ldr	r3, [sp, #4]
 802016c:	0164      	lsls	r4, r4, #5
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	1a26      	subs	r6, r4, r0
 8020172:	9300      	str	r3, [sp, #0]
 8020174:	429e      	cmp	r6, r3
 8020176:	dd52      	ble.n	802021e <__gethex+0x23e>
 8020178:	1af6      	subs	r6, r6, r3
 802017a:	0031      	movs	r1, r6
 802017c:	0028      	movs	r0, r5
 802017e:	f000 ff96 	bl	80210ae <__any_on>
 8020182:	1e04      	subs	r4, r0, #0
 8020184:	d00f      	beq.n	80201a6 <__gethex+0x1c6>
 8020186:	2401      	movs	r4, #1
 8020188:	231f      	movs	r3, #31
 802018a:	0020      	movs	r0, r4
 802018c:	1e72      	subs	r2, r6, #1
 802018e:	4013      	ands	r3, r2
 8020190:	4098      	lsls	r0, r3
 8020192:	0003      	movs	r3, r0
 8020194:	1151      	asrs	r1, r2, #5
 8020196:	9802      	ldr	r0, [sp, #8]
 8020198:	0089      	lsls	r1, r1, #2
 802019a:	5809      	ldr	r1, [r1, r0]
 802019c:	4219      	tst	r1, r3
 802019e:	d002      	beq.n	80201a6 <__gethex+0x1c6>
 80201a0:	42a2      	cmp	r2, r4
 80201a2:	dc34      	bgt.n	802020e <__gethex+0x22e>
 80201a4:	2402      	movs	r4, #2
 80201a6:	0031      	movs	r1, r6
 80201a8:	0028      	movs	r0, r5
 80201aa:	f7ff feb1 	bl	801ff10 <rshift>
 80201ae:	19bf      	adds	r7, r7, r6
 80201b0:	9b01      	ldr	r3, [sp, #4]
 80201b2:	689b      	ldr	r3, [r3, #8]
 80201b4:	42bb      	cmp	r3, r7
 80201b6:	da42      	bge.n	802023e <__gethex+0x25e>
 80201b8:	0029      	movs	r1, r5
 80201ba:	9803      	ldr	r0, [sp, #12]
 80201bc:	f000 fb14 	bl	80207e8 <_Bfree>
 80201c0:	2300      	movs	r3, #0
 80201c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201c4:	26a3      	movs	r6, #163	@ 0xa3
 80201c6:	6013      	str	r3, [r2, #0]
 80201c8:	e794      	b.n	80200f4 <__gethex+0x114>
 80201ca:	3c01      	subs	r4, #1
 80201cc:	7823      	ldrb	r3, [r4, #0]
 80201ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80201d0:	d012      	beq.n	80201f8 <__gethex+0x218>
 80201d2:	9b04      	ldr	r3, [sp, #16]
 80201d4:	2b20      	cmp	r3, #32
 80201d6:	d104      	bne.n	80201e2 <__gethex+0x202>
 80201d8:	9b05      	ldr	r3, [sp, #20]
 80201da:	c340      	stmia	r3!, {r6}
 80201dc:	2600      	movs	r6, #0
 80201de:	9305      	str	r3, [sp, #20]
 80201e0:	9604      	str	r6, [sp, #16]
 80201e2:	7820      	ldrb	r0, [r4, #0]
 80201e4:	f7ff fee7 	bl	801ffb6 <__hexdig_fun>
 80201e8:	230f      	movs	r3, #15
 80201ea:	4018      	ands	r0, r3
 80201ec:	9b04      	ldr	r3, [sp, #16]
 80201ee:	4098      	lsls	r0, r3
 80201f0:	3304      	adds	r3, #4
 80201f2:	4306      	orrs	r6, r0
 80201f4:	9304      	str	r3, [sp, #16]
 80201f6:	e7ac      	b.n	8020152 <__gethex+0x172>
 80201f8:	9b00      	ldr	r3, [sp, #0]
 80201fa:	42a3      	cmp	r3, r4
 80201fc:	d8e9      	bhi.n	80201d2 <__gethex+0x1f2>
 80201fe:	2201      	movs	r2, #1
 8020200:	0020      	movs	r0, r4
 8020202:	492b      	ldr	r1, [pc, #172]	@ (80202b0 <__gethex+0x2d0>)
 8020204:	f7fe fee2 	bl	801efcc <strncmp>
 8020208:	2800      	cmp	r0, #0
 802020a:	d1e2      	bne.n	80201d2 <__gethex+0x1f2>
 802020c:	e7a1      	b.n	8020152 <__gethex+0x172>
 802020e:	0028      	movs	r0, r5
 8020210:	1eb1      	subs	r1, r6, #2
 8020212:	f000 ff4c 	bl	80210ae <__any_on>
 8020216:	2800      	cmp	r0, #0
 8020218:	d0c4      	beq.n	80201a4 <__gethex+0x1c4>
 802021a:	2403      	movs	r4, #3
 802021c:	e7c3      	b.n	80201a6 <__gethex+0x1c6>
 802021e:	9b00      	ldr	r3, [sp, #0]
 8020220:	2400      	movs	r4, #0
 8020222:	429e      	cmp	r6, r3
 8020224:	dac4      	bge.n	80201b0 <__gethex+0x1d0>
 8020226:	1b9e      	subs	r6, r3, r6
 8020228:	0029      	movs	r1, r5
 802022a:	0032      	movs	r2, r6
 802022c:	9803      	ldr	r0, [sp, #12]
 802022e:	f000 fd05 	bl	8020c3c <__lshift>
 8020232:	0003      	movs	r3, r0
 8020234:	3314      	adds	r3, #20
 8020236:	0005      	movs	r5, r0
 8020238:	1bbf      	subs	r7, r7, r6
 802023a:	9302      	str	r3, [sp, #8]
 802023c:	e7b8      	b.n	80201b0 <__gethex+0x1d0>
 802023e:	9b01      	ldr	r3, [sp, #4]
 8020240:	685e      	ldr	r6, [r3, #4]
 8020242:	42be      	cmp	r6, r7
 8020244:	dd6f      	ble.n	8020326 <__gethex+0x346>
 8020246:	9b00      	ldr	r3, [sp, #0]
 8020248:	1bf6      	subs	r6, r6, r7
 802024a:	42b3      	cmp	r3, r6
 802024c:	dc36      	bgt.n	80202bc <__gethex+0x2dc>
 802024e:	9b01      	ldr	r3, [sp, #4]
 8020250:	68db      	ldr	r3, [r3, #12]
 8020252:	2b02      	cmp	r3, #2
 8020254:	d024      	beq.n	80202a0 <__gethex+0x2c0>
 8020256:	2b03      	cmp	r3, #3
 8020258:	d026      	beq.n	80202a8 <__gethex+0x2c8>
 802025a:	2b01      	cmp	r3, #1
 802025c:	d117      	bne.n	802028e <__gethex+0x2ae>
 802025e:	9b00      	ldr	r3, [sp, #0]
 8020260:	42b3      	cmp	r3, r6
 8020262:	d114      	bne.n	802028e <__gethex+0x2ae>
 8020264:	2b01      	cmp	r3, #1
 8020266:	d10b      	bne.n	8020280 <__gethex+0x2a0>
 8020268:	9b01      	ldr	r3, [sp, #4]
 802026a:	9a07      	ldr	r2, [sp, #28]
 802026c:	685b      	ldr	r3, [r3, #4]
 802026e:	2662      	movs	r6, #98	@ 0x62
 8020270:	6013      	str	r3, [r2, #0]
 8020272:	2301      	movs	r3, #1
 8020274:	9a02      	ldr	r2, [sp, #8]
 8020276:	612b      	str	r3, [r5, #16]
 8020278:	6013      	str	r3, [r2, #0]
 802027a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802027c:	601d      	str	r5, [r3, #0]
 802027e:	e739      	b.n	80200f4 <__gethex+0x114>
 8020280:	9900      	ldr	r1, [sp, #0]
 8020282:	0028      	movs	r0, r5
 8020284:	3901      	subs	r1, #1
 8020286:	f000 ff12 	bl	80210ae <__any_on>
 802028a:	2800      	cmp	r0, #0
 802028c:	d1ec      	bne.n	8020268 <__gethex+0x288>
 802028e:	0029      	movs	r1, r5
 8020290:	9803      	ldr	r0, [sp, #12]
 8020292:	f000 faa9 	bl	80207e8 <_Bfree>
 8020296:	2300      	movs	r3, #0
 8020298:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802029a:	2650      	movs	r6, #80	@ 0x50
 802029c:	6013      	str	r3, [r2, #0]
 802029e:	e729      	b.n	80200f4 <__gethex+0x114>
 80202a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	d1f3      	bne.n	802028e <__gethex+0x2ae>
 80202a6:	e7df      	b.n	8020268 <__gethex+0x288>
 80202a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80202aa:	2b00      	cmp	r3, #0
 80202ac:	d1dc      	bne.n	8020268 <__gethex+0x288>
 80202ae:	e7ee      	b.n	802028e <__gethex+0x2ae>
 80202b0:	080241e4 	.word	0x080241e4
 80202b4:	080243f1 	.word	0x080243f1
 80202b8:	08024402 	.word	0x08024402
 80202bc:	1e77      	subs	r7, r6, #1
 80202be:	2c00      	cmp	r4, #0
 80202c0:	d12f      	bne.n	8020322 <__gethex+0x342>
 80202c2:	2f00      	cmp	r7, #0
 80202c4:	d004      	beq.n	80202d0 <__gethex+0x2f0>
 80202c6:	0039      	movs	r1, r7
 80202c8:	0028      	movs	r0, r5
 80202ca:	f000 fef0 	bl	80210ae <__any_on>
 80202ce:	0004      	movs	r4, r0
 80202d0:	231f      	movs	r3, #31
 80202d2:	117a      	asrs	r2, r7, #5
 80202d4:	401f      	ands	r7, r3
 80202d6:	3b1e      	subs	r3, #30
 80202d8:	40bb      	lsls	r3, r7
 80202da:	9902      	ldr	r1, [sp, #8]
 80202dc:	0092      	lsls	r2, r2, #2
 80202de:	5852      	ldr	r2, [r2, r1]
 80202e0:	421a      	tst	r2, r3
 80202e2:	d001      	beq.n	80202e8 <__gethex+0x308>
 80202e4:	2302      	movs	r3, #2
 80202e6:	431c      	orrs	r4, r3
 80202e8:	9b00      	ldr	r3, [sp, #0]
 80202ea:	0031      	movs	r1, r6
 80202ec:	1b9b      	subs	r3, r3, r6
 80202ee:	2602      	movs	r6, #2
 80202f0:	0028      	movs	r0, r5
 80202f2:	9300      	str	r3, [sp, #0]
 80202f4:	f7ff fe0c 	bl	801ff10 <rshift>
 80202f8:	9b01      	ldr	r3, [sp, #4]
 80202fa:	685f      	ldr	r7, [r3, #4]
 80202fc:	2c00      	cmp	r4, #0
 80202fe:	d03f      	beq.n	8020380 <__gethex+0x3a0>
 8020300:	9b01      	ldr	r3, [sp, #4]
 8020302:	68db      	ldr	r3, [r3, #12]
 8020304:	2b02      	cmp	r3, #2
 8020306:	d010      	beq.n	802032a <__gethex+0x34a>
 8020308:	2b03      	cmp	r3, #3
 802030a:	d012      	beq.n	8020332 <__gethex+0x352>
 802030c:	2b01      	cmp	r3, #1
 802030e:	d106      	bne.n	802031e <__gethex+0x33e>
 8020310:	07a2      	lsls	r2, r4, #30
 8020312:	d504      	bpl.n	802031e <__gethex+0x33e>
 8020314:	9a02      	ldr	r2, [sp, #8]
 8020316:	6812      	ldr	r2, [r2, #0]
 8020318:	4314      	orrs	r4, r2
 802031a:	421c      	tst	r4, r3
 802031c:	d10c      	bne.n	8020338 <__gethex+0x358>
 802031e:	2310      	movs	r3, #16
 8020320:	e02d      	b.n	802037e <__gethex+0x39e>
 8020322:	2401      	movs	r4, #1
 8020324:	e7d4      	b.n	80202d0 <__gethex+0x2f0>
 8020326:	2601      	movs	r6, #1
 8020328:	e7e8      	b.n	80202fc <__gethex+0x31c>
 802032a:	2301      	movs	r3, #1
 802032c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802032e:	1a9b      	subs	r3, r3, r2
 8020330:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020332:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020334:	2b00      	cmp	r3, #0
 8020336:	d0f2      	beq.n	802031e <__gethex+0x33e>
 8020338:	692b      	ldr	r3, [r5, #16]
 802033a:	2000      	movs	r0, #0
 802033c:	9302      	str	r3, [sp, #8]
 802033e:	009b      	lsls	r3, r3, #2
 8020340:	9304      	str	r3, [sp, #16]
 8020342:	002b      	movs	r3, r5
 8020344:	9a04      	ldr	r2, [sp, #16]
 8020346:	3314      	adds	r3, #20
 8020348:	1899      	adds	r1, r3, r2
 802034a:	681a      	ldr	r2, [r3, #0]
 802034c:	1c54      	adds	r4, r2, #1
 802034e:	d01c      	beq.n	802038a <__gethex+0x3aa>
 8020350:	3201      	adds	r2, #1
 8020352:	601a      	str	r2, [r3, #0]
 8020354:	002b      	movs	r3, r5
 8020356:	3314      	adds	r3, #20
 8020358:	2e02      	cmp	r6, #2
 802035a:	d13f      	bne.n	80203dc <__gethex+0x3fc>
 802035c:	9a01      	ldr	r2, [sp, #4]
 802035e:	9900      	ldr	r1, [sp, #0]
 8020360:	6812      	ldr	r2, [r2, #0]
 8020362:	3a01      	subs	r2, #1
 8020364:	428a      	cmp	r2, r1
 8020366:	d109      	bne.n	802037c <__gethex+0x39c>
 8020368:	000a      	movs	r2, r1
 802036a:	201f      	movs	r0, #31
 802036c:	4010      	ands	r0, r2
 802036e:	2201      	movs	r2, #1
 8020370:	4082      	lsls	r2, r0
 8020372:	1149      	asrs	r1, r1, #5
 8020374:	0089      	lsls	r1, r1, #2
 8020376:	58cb      	ldr	r3, [r1, r3]
 8020378:	4213      	tst	r3, r2
 802037a:	d13d      	bne.n	80203f8 <__gethex+0x418>
 802037c:	2320      	movs	r3, #32
 802037e:	431e      	orrs	r6, r3
 8020380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020382:	601d      	str	r5, [r3, #0]
 8020384:	9b07      	ldr	r3, [sp, #28]
 8020386:	601f      	str	r7, [r3, #0]
 8020388:	e6b4      	b.n	80200f4 <__gethex+0x114>
 802038a:	c301      	stmia	r3!, {r0}
 802038c:	4299      	cmp	r1, r3
 802038e:	d8dc      	bhi.n	802034a <__gethex+0x36a>
 8020390:	68ab      	ldr	r3, [r5, #8]
 8020392:	9a02      	ldr	r2, [sp, #8]
 8020394:	429a      	cmp	r2, r3
 8020396:	db18      	blt.n	80203ca <__gethex+0x3ea>
 8020398:	6869      	ldr	r1, [r5, #4]
 802039a:	9803      	ldr	r0, [sp, #12]
 802039c:	3101      	adds	r1, #1
 802039e:	f000 f9df 	bl	8020760 <_Balloc>
 80203a2:	1e04      	subs	r4, r0, #0
 80203a4:	d104      	bne.n	80203b0 <__gethex+0x3d0>
 80203a6:	0022      	movs	r2, r4
 80203a8:	2184      	movs	r1, #132	@ 0x84
 80203aa:	4b1d      	ldr	r3, [pc, #116]	@ (8020420 <__gethex+0x440>)
 80203ac:	481d      	ldr	r0, [pc, #116]	@ (8020424 <__gethex+0x444>)
 80203ae:	e6c4      	b.n	802013a <__gethex+0x15a>
 80203b0:	0029      	movs	r1, r5
 80203b2:	692a      	ldr	r2, [r5, #16]
 80203b4:	310c      	adds	r1, #12
 80203b6:	3202      	adds	r2, #2
 80203b8:	0092      	lsls	r2, r2, #2
 80203ba:	300c      	adds	r0, #12
 80203bc:	f7fe fecc 	bl	801f158 <memcpy>
 80203c0:	0029      	movs	r1, r5
 80203c2:	9803      	ldr	r0, [sp, #12]
 80203c4:	f000 fa10 	bl	80207e8 <_Bfree>
 80203c8:	0025      	movs	r5, r4
 80203ca:	692b      	ldr	r3, [r5, #16]
 80203cc:	1c5a      	adds	r2, r3, #1
 80203ce:	612a      	str	r2, [r5, #16]
 80203d0:	2201      	movs	r2, #1
 80203d2:	3304      	adds	r3, #4
 80203d4:	009b      	lsls	r3, r3, #2
 80203d6:	18eb      	adds	r3, r5, r3
 80203d8:	605a      	str	r2, [r3, #4]
 80203da:	e7bb      	b.n	8020354 <__gethex+0x374>
 80203dc:	692a      	ldr	r2, [r5, #16]
 80203de:	9902      	ldr	r1, [sp, #8]
 80203e0:	428a      	cmp	r2, r1
 80203e2:	dd0b      	ble.n	80203fc <__gethex+0x41c>
 80203e4:	2101      	movs	r1, #1
 80203e6:	0028      	movs	r0, r5
 80203e8:	f7ff fd92 	bl	801ff10 <rshift>
 80203ec:	9b01      	ldr	r3, [sp, #4]
 80203ee:	3701      	adds	r7, #1
 80203f0:	689b      	ldr	r3, [r3, #8]
 80203f2:	42bb      	cmp	r3, r7
 80203f4:	da00      	bge.n	80203f8 <__gethex+0x418>
 80203f6:	e6df      	b.n	80201b8 <__gethex+0x1d8>
 80203f8:	2601      	movs	r6, #1
 80203fa:	e7bf      	b.n	802037c <__gethex+0x39c>
 80203fc:	221f      	movs	r2, #31
 80203fe:	9c00      	ldr	r4, [sp, #0]
 8020400:	9900      	ldr	r1, [sp, #0]
 8020402:	4014      	ands	r4, r2
 8020404:	4211      	tst	r1, r2
 8020406:	d0f7      	beq.n	80203f8 <__gethex+0x418>
 8020408:	9a04      	ldr	r2, [sp, #16]
 802040a:	189b      	adds	r3, r3, r2
 802040c:	3b04      	subs	r3, #4
 802040e:	6818      	ldr	r0, [r3, #0]
 8020410:	f000 fa9e 	bl	8020950 <__hi0bits>
 8020414:	2320      	movs	r3, #32
 8020416:	1b1b      	subs	r3, r3, r4
 8020418:	4298      	cmp	r0, r3
 802041a:	dbe3      	blt.n	80203e4 <__gethex+0x404>
 802041c:	e7ec      	b.n	80203f8 <__gethex+0x418>
 802041e:	46c0      	nop			@ (mov r8, r8)
 8020420:	080243f1 	.word	0x080243f1
 8020424:	08024402 	.word	0x08024402

08020428 <L_shift>:
 8020428:	2308      	movs	r3, #8
 802042a:	b570      	push	{r4, r5, r6, lr}
 802042c:	2520      	movs	r5, #32
 802042e:	1a9a      	subs	r2, r3, r2
 8020430:	0092      	lsls	r2, r2, #2
 8020432:	1aad      	subs	r5, r5, r2
 8020434:	6843      	ldr	r3, [r0, #4]
 8020436:	6804      	ldr	r4, [r0, #0]
 8020438:	001e      	movs	r6, r3
 802043a:	40ae      	lsls	r6, r5
 802043c:	40d3      	lsrs	r3, r2
 802043e:	4334      	orrs	r4, r6
 8020440:	6004      	str	r4, [r0, #0]
 8020442:	6043      	str	r3, [r0, #4]
 8020444:	3004      	adds	r0, #4
 8020446:	4288      	cmp	r0, r1
 8020448:	d3f4      	bcc.n	8020434 <L_shift+0xc>
 802044a:	bd70      	pop	{r4, r5, r6, pc}

0802044c <__match>:
 802044c:	b530      	push	{r4, r5, lr}
 802044e:	6803      	ldr	r3, [r0, #0]
 8020450:	780c      	ldrb	r4, [r1, #0]
 8020452:	3301      	adds	r3, #1
 8020454:	2c00      	cmp	r4, #0
 8020456:	d102      	bne.n	802045e <__match+0x12>
 8020458:	6003      	str	r3, [r0, #0]
 802045a:	2001      	movs	r0, #1
 802045c:	bd30      	pop	{r4, r5, pc}
 802045e:	781a      	ldrb	r2, [r3, #0]
 8020460:	0015      	movs	r5, r2
 8020462:	3d41      	subs	r5, #65	@ 0x41
 8020464:	2d19      	cmp	r5, #25
 8020466:	d800      	bhi.n	802046a <__match+0x1e>
 8020468:	3220      	adds	r2, #32
 802046a:	3101      	adds	r1, #1
 802046c:	42a2      	cmp	r2, r4
 802046e:	d0ef      	beq.n	8020450 <__match+0x4>
 8020470:	2000      	movs	r0, #0
 8020472:	e7f3      	b.n	802045c <__match+0x10>

08020474 <__hexnan>:
 8020474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020476:	680b      	ldr	r3, [r1, #0]
 8020478:	b08b      	sub	sp, #44	@ 0x2c
 802047a:	9201      	str	r2, [sp, #4]
 802047c:	9901      	ldr	r1, [sp, #4]
 802047e:	115a      	asrs	r2, r3, #5
 8020480:	0092      	lsls	r2, r2, #2
 8020482:	188a      	adds	r2, r1, r2
 8020484:	9202      	str	r2, [sp, #8]
 8020486:	0019      	movs	r1, r3
 8020488:	221f      	movs	r2, #31
 802048a:	4011      	ands	r1, r2
 802048c:	9008      	str	r0, [sp, #32]
 802048e:	9106      	str	r1, [sp, #24]
 8020490:	4213      	tst	r3, r2
 8020492:	d002      	beq.n	802049a <__hexnan+0x26>
 8020494:	9b02      	ldr	r3, [sp, #8]
 8020496:	3304      	adds	r3, #4
 8020498:	9302      	str	r3, [sp, #8]
 802049a:	9b02      	ldr	r3, [sp, #8]
 802049c:	2500      	movs	r5, #0
 802049e:	1f1f      	subs	r7, r3, #4
 80204a0:	003e      	movs	r6, r7
 80204a2:	003c      	movs	r4, r7
 80204a4:	9b08      	ldr	r3, [sp, #32]
 80204a6:	603d      	str	r5, [r7, #0]
 80204a8:	681b      	ldr	r3, [r3, #0]
 80204aa:	9507      	str	r5, [sp, #28]
 80204ac:	9305      	str	r3, [sp, #20]
 80204ae:	9503      	str	r5, [sp, #12]
 80204b0:	9b05      	ldr	r3, [sp, #20]
 80204b2:	3301      	adds	r3, #1
 80204b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80204b6:	9b05      	ldr	r3, [sp, #20]
 80204b8:	785b      	ldrb	r3, [r3, #1]
 80204ba:	9304      	str	r3, [sp, #16]
 80204bc:	2b00      	cmp	r3, #0
 80204be:	d028      	beq.n	8020512 <__hexnan+0x9e>
 80204c0:	9804      	ldr	r0, [sp, #16]
 80204c2:	f7ff fd78 	bl	801ffb6 <__hexdig_fun>
 80204c6:	2800      	cmp	r0, #0
 80204c8:	d155      	bne.n	8020576 <__hexnan+0x102>
 80204ca:	9b04      	ldr	r3, [sp, #16]
 80204cc:	2b20      	cmp	r3, #32
 80204ce:	d819      	bhi.n	8020504 <__hexnan+0x90>
 80204d0:	9b03      	ldr	r3, [sp, #12]
 80204d2:	9a07      	ldr	r2, [sp, #28]
 80204d4:	4293      	cmp	r3, r2
 80204d6:	dd12      	ble.n	80204fe <__hexnan+0x8a>
 80204d8:	42b4      	cmp	r4, r6
 80204da:	d206      	bcs.n	80204ea <__hexnan+0x76>
 80204dc:	2d07      	cmp	r5, #7
 80204de:	dc04      	bgt.n	80204ea <__hexnan+0x76>
 80204e0:	002a      	movs	r2, r5
 80204e2:	0031      	movs	r1, r6
 80204e4:	0020      	movs	r0, r4
 80204e6:	f7ff ff9f 	bl	8020428 <L_shift>
 80204ea:	9b01      	ldr	r3, [sp, #4]
 80204ec:	2508      	movs	r5, #8
 80204ee:	429c      	cmp	r4, r3
 80204f0:	d905      	bls.n	80204fe <__hexnan+0x8a>
 80204f2:	1f26      	subs	r6, r4, #4
 80204f4:	2500      	movs	r5, #0
 80204f6:	0034      	movs	r4, r6
 80204f8:	9b03      	ldr	r3, [sp, #12]
 80204fa:	6035      	str	r5, [r6, #0]
 80204fc:	9307      	str	r3, [sp, #28]
 80204fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020500:	9305      	str	r3, [sp, #20]
 8020502:	e7d5      	b.n	80204b0 <__hexnan+0x3c>
 8020504:	9b04      	ldr	r3, [sp, #16]
 8020506:	2b29      	cmp	r3, #41	@ 0x29
 8020508:	d15a      	bne.n	80205c0 <__hexnan+0x14c>
 802050a:	9b05      	ldr	r3, [sp, #20]
 802050c:	9a08      	ldr	r2, [sp, #32]
 802050e:	3302      	adds	r3, #2
 8020510:	6013      	str	r3, [r2, #0]
 8020512:	9b03      	ldr	r3, [sp, #12]
 8020514:	2b00      	cmp	r3, #0
 8020516:	d053      	beq.n	80205c0 <__hexnan+0x14c>
 8020518:	42b4      	cmp	r4, r6
 802051a:	d206      	bcs.n	802052a <__hexnan+0xb6>
 802051c:	2d07      	cmp	r5, #7
 802051e:	dc04      	bgt.n	802052a <__hexnan+0xb6>
 8020520:	002a      	movs	r2, r5
 8020522:	0031      	movs	r1, r6
 8020524:	0020      	movs	r0, r4
 8020526:	f7ff ff7f 	bl	8020428 <L_shift>
 802052a:	9b01      	ldr	r3, [sp, #4]
 802052c:	429c      	cmp	r4, r3
 802052e:	d936      	bls.n	802059e <__hexnan+0x12a>
 8020530:	001a      	movs	r2, r3
 8020532:	0023      	movs	r3, r4
 8020534:	cb02      	ldmia	r3!, {r1}
 8020536:	c202      	stmia	r2!, {r1}
 8020538:	429f      	cmp	r7, r3
 802053a:	d2fb      	bcs.n	8020534 <__hexnan+0xc0>
 802053c:	9b02      	ldr	r3, [sp, #8]
 802053e:	1c61      	adds	r1, r4, #1
 8020540:	1eda      	subs	r2, r3, #3
 8020542:	2304      	movs	r3, #4
 8020544:	4291      	cmp	r1, r2
 8020546:	d805      	bhi.n	8020554 <__hexnan+0xe0>
 8020548:	9b02      	ldr	r3, [sp, #8]
 802054a:	3b04      	subs	r3, #4
 802054c:	1b1b      	subs	r3, r3, r4
 802054e:	089b      	lsrs	r3, r3, #2
 8020550:	3301      	adds	r3, #1
 8020552:	009b      	lsls	r3, r3, #2
 8020554:	9a01      	ldr	r2, [sp, #4]
 8020556:	18d3      	adds	r3, r2, r3
 8020558:	2200      	movs	r2, #0
 802055a:	c304      	stmia	r3!, {r2}
 802055c:	429f      	cmp	r7, r3
 802055e:	d2fc      	bcs.n	802055a <__hexnan+0xe6>
 8020560:	683b      	ldr	r3, [r7, #0]
 8020562:	2b00      	cmp	r3, #0
 8020564:	d104      	bne.n	8020570 <__hexnan+0xfc>
 8020566:	9b01      	ldr	r3, [sp, #4]
 8020568:	429f      	cmp	r7, r3
 802056a:	d127      	bne.n	80205bc <__hexnan+0x148>
 802056c:	2301      	movs	r3, #1
 802056e:	603b      	str	r3, [r7, #0]
 8020570:	2005      	movs	r0, #5
 8020572:	b00b      	add	sp, #44	@ 0x2c
 8020574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020576:	9b03      	ldr	r3, [sp, #12]
 8020578:	3501      	adds	r5, #1
 802057a:	3301      	adds	r3, #1
 802057c:	9303      	str	r3, [sp, #12]
 802057e:	2d08      	cmp	r5, #8
 8020580:	dd06      	ble.n	8020590 <__hexnan+0x11c>
 8020582:	9b01      	ldr	r3, [sp, #4]
 8020584:	429c      	cmp	r4, r3
 8020586:	d9ba      	bls.n	80204fe <__hexnan+0x8a>
 8020588:	2300      	movs	r3, #0
 802058a:	2501      	movs	r5, #1
 802058c:	3c04      	subs	r4, #4
 802058e:	6023      	str	r3, [r4, #0]
 8020590:	220f      	movs	r2, #15
 8020592:	6823      	ldr	r3, [r4, #0]
 8020594:	4010      	ands	r0, r2
 8020596:	011b      	lsls	r3, r3, #4
 8020598:	4303      	orrs	r3, r0
 802059a:	6023      	str	r3, [r4, #0]
 802059c:	e7af      	b.n	80204fe <__hexnan+0x8a>
 802059e:	9b06      	ldr	r3, [sp, #24]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d0dd      	beq.n	8020560 <__hexnan+0xec>
 80205a4:	2320      	movs	r3, #32
 80205a6:	9a06      	ldr	r2, [sp, #24]
 80205a8:	9902      	ldr	r1, [sp, #8]
 80205aa:	1a9b      	subs	r3, r3, r2
 80205ac:	2201      	movs	r2, #1
 80205ae:	4252      	negs	r2, r2
 80205b0:	40da      	lsrs	r2, r3
 80205b2:	3904      	subs	r1, #4
 80205b4:	680b      	ldr	r3, [r1, #0]
 80205b6:	4013      	ands	r3, r2
 80205b8:	600b      	str	r3, [r1, #0]
 80205ba:	e7d1      	b.n	8020560 <__hexnan+0xec>
 80205bc:	3f04      	subs	r7, #4
 80205be:	e7cf      	b.n	8020560 <__hexnan+0xec>
 80205c0:	2004      	movs	r0, #4
 80205c2:	e7d6      	b.n	8020572 <__hexnan+0xfe>

080205c4 <malloc>:
 80205c4:	b510      	push	{r4, lr}
 80205c6:	4b03      	ldr	r3, [pc, #12]	@ (80205d4 <malloc+0x10>)
 80205c8:	0001      	movs	r1, r0
 80205ca:	6818      	ldr	r0, [r3, #0]
 80205cc:	f000 f826 	bl	802061c <_malloc_r>
 80205d0:	bd10      	pop	{r4, pc}
 80205d2:	46c0      	nop			@ (mov r8, r8)
 80205d4:	200003c8 	.word	0x200003c8

080205d8 <sbrk_aligned>:
 80205d8:	b570      	push	{r4, r5, r6, lr}
 80205da:	4e0f      	ldr	r6, [pc, #60]	@ (8020618 <sbrk_aligned+0x40>)
 80205dc:	000d      	movs	r5, r1
 80205de:	6831      	ldr	r1, [r6, #0]
 80205e0:	0004      	movs	r4, r0
 80205e2:	2900      	cmp	r1, #0
 80205e4:	d102      	bne.n	80205ec <sbrk_aligned+0x14>
 80205e6:	f001 f989 	bl	80218fc <_sbrk_r>
 80205ea:	6030      	str	r0, [r6, #0]
 80205ec:	0029      	movs	r1, r5
 80205ee:	0020      	movs	r0, r4
 80205f0:	f001 f984 	bl	80218fc <_sbrk_r>
 80205f4:	1c43      	adds	r3, r0, #1
 80205f6:	d103      	bne.n	8020600 <sbrk_aligned+0x28>
 80205f8:	2501      	movs	r5, #1
 80205fa:	426d      	negs	r5, r5
 80205fc:	0028      	movs	r0, r5
 80205fe:	bd70      	pop	{r4, r5, r6, pc}
 8020600:	2303      	movs	r3, #3
 8020602:	1cc5      	adds	r5, r0, #3
 8020604:	439d      	bics	r5, r3
 8020606:	42a8      	cmp	r0, r5
 8020608:	d0f8      	beq.n	80205fc <sbrk_aligned+0x24>
 802060a:	1a29      	subs	r1, r5, r0
 802060c:	0020      	movs	r0, r4
 802060e:	f001 f975 	bl	80218fc <_sbrk_r>
 8020612:	3001      	adds	r0, #1
 8020614:	d1f2      	bne.n	80205fc <sbrk_aligned+0x24>
 8020616:	e7ef      	b.n	80205f8 <sbrk_aligned+0x20>
 8020618:	200038f8 	.word	0x200038f8

0802061c <_malloc_r>:
 802061c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802061e:	2203      	movs	r2, #3
 8020620:	1ccb      	adds	r3, r1, #3
 8020622:	4393      	bics	r3, r2
 8020624:	3308      	adds	r3, #8
 8020626:	0005      	movs	r5, r0
 8020628:	001f      	movs	r7, r3
 802062a:	2b0c      	cmp	r3, #12
 802062c:	d234      	bcs.n	8020698 <_malloc_r+0x7c>
 802062e:	270c      	movs	r7, #12
 8020630:	42b9      	cmp	r1, r7
 8020632:	d833      	bhi.n	802069c <_malloc_r+0x80>
 8020634:	0028      	movs	r0, r5
 8020636:	f000 f883 	bl	8020740 <__malloc_lock>
 802063a:	4e37      	ldr	r6, [pc, #220]	@ (8020718 <_malloc_r+0xfc>)
 802063c:	6833      	ldr	r3, [r6, #0]
 802063e:	001c      	movs	r4, r3
 8020640:	2c00      	cmp	r4, #0
 8020642:	d12f      	bne.n	80206a4 <_malloc_r+0x88>
 8020644:	0039      	movs	r1, r7
 8020646:	0028      	movs	r0, r5
 8020648:	f7ff ffc6 	bl	80205d8 <sbrk_aligned>
 802064c:	0004      	movs	r4, r0
 802064e:	1c43      	adds	r3, r0, #1
 8020650:	d15f      	bne.n	8020712 <_malloc_r+0xf6>
 8020652:	6834      	ldr	r4, [r6, #0]
 8020654:	9400      	str	r4, [sp, #0]
 8020656:	9b00      	ldr	r3, [sp, #0]
 8020658:	2b00      	cmp	r3, #0
 802065a:	d14a      	bne.n	80206f2 <_malloc_r+0xd6>
 802065c:	2c00      	cmp	r4, #0
 802065e:	d052      	beq.n	8020706 <_malloc_r+0xea>
 8020660:	6823      	ldr	r3, [r4, #0]
 8020662:	0028      	movs	r0, r5
 8020664:	18e3      	adds	r3, r4, r3
 8020666:	9900      	ldr	r1, [sp, #0]
 8020668:	9301      	str	r3, [sp, #4]
 802066a:	f001 f947 	bl	80218fc <_sbrk_r>
 802066e:	9b01      	ldr	r3, [sp, #4]
 8020670:	4283      	cmp	r3, r0
 8020672:	d148      	bne.n	8020706 <_malloc_r+0xea>
 8020674:	6823      	ldr	r3, [r4, #0]
 8020676:	0028      	movs	r0, r5
 8020678:	1aff      	subs	r7, r7, r3
 802067a:	0039      	movs	r1, r7
 802067c:	f7ff ffac 	bl	80205d8 <sbrk_aligned>
 8020680:	3001      	adds	r0, #1
 8020682:	d040      	beq.n	8020706 <_malloc_r+0xea>
 8020684:	6823      	ldr	r3, [r4, #0]
 8020686:	19db      	adds	r3, r3, r7
 8020688:	6023      	str	r3, [r4, #0]
 802068a:	6833      	ldr	r3, [r6, #0]
 802068c:	685a      	ldr	r2, [r3, #4]
 802068e:	2a00      	cmp	r2, #0
 8020690:	d133      	bne.n	80206fa <_malloc_r+0xde>
 8020692:	9b00      	ldr	r3, [sp, #0]
 8020694:	6033      	str	r3, [r6, #0]
 8020696:	e019      	b.n	80206cc <_malloc_r+0xb0>
 8020698:	2b00      	cmp	r3, #0
 802069a:	dac9      	bge.n	8020630 <_malloc_r+0x14>
 802069c:	230c      	movs	r3, #12
 802069e:	602b      	str	r3, [r5, #0]
 80206a0:	2000      	movs	r0, #0
 80206a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80206a4:	6821      	ldr	r1, [r4, #0]
 80206a6:	1bc9      	subs	r1, r1, r7
 80206a8:	d420      	bmi.n	80206ec <_malloc_r+0xd0>
 80206aa:	290b      	cmp	r1, #11
 80206ac:	d90a      	bls.n	80206c4 <_malloc_r+0xa8>
 80206ae:	19e2      	adds	r2, r4, r7
 80206b0:	6027      	str	r7, [r4, #0]
 80206b2:	42a3      	cmp	r3, r4
 80206b4:	d104      	bne.n	80206c0 <_malloc_r+0xa4>
 80206b6:	6032      	str	r2, [r6, #0]
 80206b8:	6863      	ldr	r3, [r4, #4]
 80206ba:	6011      	str	r1, [r2, #0]
 80206bc:	6053      	str	r3, [r2, #4]
 80206be:	e005      	b.n	80206cc <_malloc_r+0xb0>
 80206c0:	605a      	str	r2, [r3, #4]
 80206c2:	e7f9      	b.n	80206b8 <_malloc_r+0x9c>
 80206c4:	6862      	ldr	r2, [r4, #4]
 80206c6:	42a3      	cmp	r3, r4
 80206c8:	d10e      	bne.n	80206e8 <_malloc_r+0xcc>
 80206ca:	6032      	str	r2, [r6, #0]
 80206cc:	0028      	movs	r0, r5
 80206ce:	f000 f83f 	bl	8020750 <__malloc_unlock>
 80206d2:	0020      	movs	r0, r4
 80206d4:	2207      	movs	r2, #7
 80206d6:	300b      	adds	r0, #11
 80206d8:	1d23      	adds	r3, r4, #4
 80206da:	4390      	bics	r0, r2
 80206dc:	1ac2      	subs	r2, r0, r3
 80206de:	4298      	cmp	r0, r3
 80206e0:	d0df      	beq.n	80206a2 <_malloc_r+0x86>
 80206e2:	1a1b      	subs	r3, r3, r0
 80206e4:	50a3      	str	r3, [r4, r2]
 80206e6:	e7dc      	b.n	80206a2 <_malloc_r+0x86>
 80206e8:	605a      	str	r2, [r3, #4]
 80206ea:	e7ef      	b.n	80206cc <_malloc_r+0xb0>
 80206ec:	0023      	movs	r3, r4
 80206ee:	6864      	ldr	r4, [r4, #4]
 80206f0:	e7a6      	b.n	8020640 <_malloc_r+0x24>
 80206f2:	9c00      	ldr	r4, [sp, #0]
 80206f4:	6863      	ldr	r3, [r4, #4]
 80206f6:	9300      	str	r3, [sp, #0]
 80206f8:	e7ad      	b.n	8020656 <_malloc_r+0x3a>
 80206fa:	001a      	movs	r2, r3
 80206fc:	685b      	ldr	r3, [r3, #4]
 80206fe:	42a3      	cmp	r3, r4
 8020700:	d1fb      	bne.n	80206fa <_malloc_r+0xde>
 8020702:	2300      	movs	r3, #0
 8020704:	e7da      	b.n	80206bc <_malloc_r+0xa0>
 8020706:	230c      	movs	r3, #12
 8020708:	0028      	movs	r0, r5
 802070a:	602b      	str	r3, [r5, #0]
 802070c:	f000 f820 	bl	8020750 <__malloc_unlock>
 8020710:	e7c6      	b.n	80206a0 <_malloc_r+0x84>
 8020712:	6007      	str	r7, [r0, #0]
 8020714:	e7da      	b.n	80206cc <_malloc_r+0xb0>
 8020716:	46c0      	nop			@ (mov r8, r8)
 8020718:	200038fc 	.word	0x200038fc

0802071c <__ascii_mbtowc>:
 802071c:	b082      	sub	sp, #8
 802071e:	2900      	cmp	r1, #0
 8020720:	d100      	bne.n	8020724 <__ascii_mbtowc+0x8>
 8020722:	a901      	add	r1, sp, #4
 8020724:	1e10      	subs	r0, r2, #0
 8020726:	d006      	beq.n	8020736 <__ascii_mbtowc+0x1a>
 8020728:	2b00      	cmp	r3, #0
 802072a:	d006      	beq.n	802073a <__ascii_mbtowc+0x1e>
 802072c:	7813      	ldrb	r3, [r2, #0]
 802072e:	600b      	str	r3, [r1, #0]
 8020730:	7810      	ldrb	r0, [r2, #0]
 8020732:	1e43      	subs	r3, r0, #1
 8020734:	4198      	sbcs	r0, r3
 8020736:	b002      	add	sp, #8
 8020738:	4770      	bx	lr
 802073a:	2002      	movs	r0, #2
 802073c:	4240      	negs	r0, r0
 802073e:	e7fa      	b.n	8020736 <__ascii_mbtowc+0x1a>

08020740 <__malloc_lock>:
 8020740:	b510      	push	{r4, lr}
 8020742:	4802      	ldr	r0, [pc, #8]	@ (802074c <__malloc_lock+0xc>)
 8020744:	f7fe fcfb 	bl	801f13e <__retarget_lock_acquire_recursive>
 8020748:	bd10      	pop	{r4, pc}
 802074a:	46c0      	nop			@ (mov r8, r8)
 802074c:	200038f4 	.word	0x200038f4

08020750 <__malloc_unlock>:
 8020750:	b510      	push	{r4, lr}
 8020752:	4802      	ldr	r0, [pc, #8]	@ (802075c <__malloc_unlock+0xc>)
 8020754:	f7fe fcf4 	bl	801f140 <__retarget_lock_release_recursive>
 8020758:	bd10      	pop	{r4, pc}
 802075a:	46c0      	nop			@ (mov r8, r8)
 802075c:	200038f4 	.word	0x200038f4

08020760 <_Balloc>:
 8020760:	b570      	push	{r4, r5, r6, lr}
 8020762:	69c5      	ldr	r5, [r0, #28]
 8020764:	0006      	movs	r6, r0
 8020766:	000c      	movs	r4, r1
 8020768:	2d00      	cmp	r5, #0
 802076a:	d10e      	bne.n	802078a <_Balloc+0x2a>
 802076c:	2010      	movs	r0, #16
 802076e:	f7ff ff29 	bl	80205c4 <malloc>
 8020772:	1e02      	subs	r2, r0, #0
 8020774:	61f0      	str	r0, [r6, #28]
 8020776:	d104      	bne.n	8020782 <_Balloc+0x22>
 8020778:	216b      	movs	r1, #107	@ 0x6b
 802077a:	4b19      	ldr	r3, [pc, #100]	@ (80207e0 <_Balloc+0x80>)
 802077c:	4819      	ldr	r0, [pc, #100]	@ (80207e4 <_Balloc+0x84>)
 802077e:	f001 f8cf 	bl	8021920 <__assert_func>
 8020782:	6045      	str	r5, [r0, #4]
 8020784:	6085      	str	r5, [r0, #8]
 8020786:	6005      	str	r5, [r0, #0]
 8020788:	60c5      	str	r5, [r0, #12]
 802078a:	69f5      	ldr	r5, [r6, #28]
 802078c:	68eb      	ldr	r3, [r5, #12]
 802078e:	2b00      	cmp	r3, #0
 8020790:	d013      	beq.n	80207ba <_Balloc+0x5a>
 8020792:	69f3      	ldr	r3, [r6, #28]
 8020794:	00a2      	lsls	r2, r4, #2
 8020796:	68db      	ldr	r3, [r3, #12]
 8020798:	189b      	adds	r3, r3, r2
 802079a:	6818      	ldr	r0, [r3, #0]
 802079c:	2800      	cmp	r0, #0
 802079e:	d118      	bne.n	80207d2 <_Balloc+0x72>
 80207a0:	2101      	movs	r1, #1
 80207a2:	000d      	movs	r5, r1
 80207a4:	40a5      	lsls	r5, r4
 80207a6:	1d6a      	adds	r2, r5, #5
 80207a8:	0030      	movs	r0, r6
 80207aa:	0092      	lsls	r2, r2, #2
 80207ac:	f001 f8d6 	bl	802195c <_calloc_r>
 80207b0:	2800      	cmp	r0, #0
 80207b2:	d00c      	beq.n	80207ce <_Balloc+0x6e>
 80207b4:	6044      	str	r4, [r0, #4]
 80207b6:	6085      	str	r5, [r0, #8]
 80207b8:	e00d      	b.n	80207d6 <_Balloc+0x76>
 80207ba:	2221      	movs	r2, #33	@ 0x21
 80207bc:	2104      	movs	r1, #4
 80207be:	0030      	movs	r0, r6
 80207c0:	f001 f8cc 	bl	802195c <_calloc_r>
 80207c4:	69f3      	ldr	r3, [r6, #28]
 80207c6:	60e8      	str	r0, [r5, #12]
 80207c8:	68db      	ldr	r3, [r3, #12]
 80207ca:	2b00      	cmp	r3, #0
 80207cc:	d1e1      	bne.n	8020792 <_Balloc+0x32>
 80207ce:	2000      	movs	r0, #0
 80207d0:	bd70      	pop	{r4, r5, r6, pc}
 80207d2:	6802      	ldr	r2, [r0, #0]
 80207d4:	601a      	str	r2, [r3, #0]
 80207d6:	2300      	movs	r3, #0
 80207d8:	6103      	str	r3, [r0, #16]
 80207da:	60c3      	str	r3, [r0, #12]
 80207dc:	e7f8      	b.n	80207d0 <_Balloc+0x70>
 80207de:	46c0      	nop			@ (mov r8, r8)
 80207e0:	08024382 	.word	0x08024382
 80207e4:	08024462 	.word	0x08024462

080207e8 <_Bfree>:
 80207e8:	b570      	push	{r4, r5, r6, lr}
 80207ea:	69c6      	ldr	r6, [r0, #28]
 80207ec:	0005      	movs	r5, r0
 80207ee:	000c      	movs	r4, r1
 80207f0:	2e00      	cmp	r6, #0
 80207f2:	d10e      	bne.n	8020812 <_Bfree+0x2a>
 80207f4:	2010      	movs	r0, #16
 80207f6:	f7ff fee5 	bl	80205c4 <malloc>
 80207fa:	1e02      	subs	r2, r0, #0
 80207fc:	61e8      	str	r0, [r5, #28]
 80207fe:	d104      	bne.n	802080a <_Bfree+0x22>
 8020800:	218f      	movs	r1, #143	@ 0x8f
 8020802:	4b09      	ldr	r3, [pc, #36]	@ (8020828 <_Bfree+0x40>)
 8020804:	4809      	ldr	r0, [pc, #36]	@ (802082c <_Bfree+0x44>)
 8020806:	f001 f88b 	bl	8021920 <__assert_func>
 802080a:	6046      	str	r6, [r0, #4]
 802080c:	6086      	str	r6, [r0, #8]
 802080e:	6006      	str	r6, [r0, #0]
 8020810:	60c6      	str	r6, [r0, #12]
 8020812:	2c00      	cmp	r4, #0
 8020814:	d007      	beq.n	8020826 <_Bfree+0x3e>
 8020816:	69eb      	ldr	r3, [r5, #28]
 8020818:	6862      	ldr	r2, [r4, #4]
 802081a:	68db      	ldr	r3, [r3, #12]
 802081c:	0092      	lsls	r2, r2, #2
 802081e:	189b      	adds	r3, r3, r2
 8020820:	681a      	ldr	r2, [r3, #0]
 8020822:	6022      	str	r2, [r4, #0]
 8020824:	601c      	str	r4, [r3, #0]
 8020826:	bd70      	pop	{r4, r5, r6, pc}
 8020828:	08024382 	.word	0x08024382
 802082c:	08024462 	.word	0x08024462

08020830 <__multadd>:
 8020830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020832:	000f      	movs	r7, r1
 8020834:	9001      	str	r0, [sp, #4]
 8020836:	000c      	movs	r4, r1
 8020838:	001e      	movs	r6, r3
 802083a:	2000      	movs	r0, #0
 802083c:	690d      	ldr	r5, [r1, #16]
 802083e:	3714      	adds	r7, #20
 8020840:	683b      	ldr	r3, [r7, #0]
 8020842:	3001      	adds	r0, #1
 8020844:	b299      	uxth	r1, r3
 8020846:	4351      	muls	r1, r2
 8020848:	0c1b      	lsrs	r3, r3, #16
 802084a:	4353      	muls	r3, r2
 802084c:	1989      	adds	r1, r1, r6
 802084e:	0c0e      	lsrs	r6, r1, #16
 8020850:	199b      	adds	r3, r3, r6
 8020852:	0c1e      	lsrs	r6, r3, #16
 8020854:	b289      	uxth	r1, r1
 8020856:	041b      	lsls	r3, r3, #16
 8020858:	185b      	adds	r3, r3, r1
 802085a:	c708      	stmia	r7!, {r3}
 802085c:	4285      	cmp	r5, r0
 802085e:	dcef      	bgt.n	8020840 <__multadd+0x10>
 8020860:	2e00      	cmp	r6, #0
 8020862:	d022      	beq.n	80208aa <__multadd+0x7a>
 8020864:	68a3      	ldr	r3, [r4, #8]
 8020866:	42ab      	cmp	r3, r5
 8020868:	dc19      	bgt.n	802089e <__multadd+0x6e>
 802086a:	6861      	ldr	r1, [r4, #4]
 802086c:	9801      	ldr	r0, [sp, #4]
 802086e:	3101      	adds	r1, #1
 8020870:	f7ff ff76 	bl	8020760 <_Balloc>
 8020874:	1e07      	subs	r7, r0, #0
 8020876:	d105      	bne.n	8020884 <__multadd+0x54>
 8020878:	003a      	movs	r2, r7
 802087a:	21ba      	movs	r1, #186	@ 0xba
 802087c:	4b0c      	ldr	r3, [pc, #48]	@ (80208b0 <__multadd+0x80>)
 802087e:	480d      	ldr	r0, [pc, #52]	@ (80208b4 <__multadd+0x84>)
 8020880:	f001 f84e 	bl	8021920 <__assert_func>
 8020884:	0021      	movs	r1, r4
 8020886:	6922      	ldr	r2, [r4, #16]
 8020888:	310c      	adds	r1, #12
 802088a:	3202      	adds	r2, #2
 802088c:	0092      	lsls	r2, r2, #2
 802088e:	300c      	adds	r0, #12
 8020890:	f7fe fc62 	bl	801f158 <memcpy>
 8020894:	0021      	movs	r1, r4
 8020896:	9801      	ldr	r0, [sp, #4]
 8020898:	f7ff ffa6 	bl	80207e8 <_Bfree>
 802089c:	003c      	movs	r4, r7
 802089e:	1d2b      	adds	r3, r5, #4
 80208a0:	009b      	lsls	r3, r3, #2
 80208a2:	18e3      	adds	r3, r4, r3
 80208a4:	3501      	adds	r5, #1
 80208a6:	605e      	str	r6, [r3, #4]
 80208a8:	6125      	str	r5, [r4, #16]
 80208aa:	0020      	movs	r0, r4
 80208ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80208ae:	46c0      	nop			@ (mov r8, r8)
 80208b0:	080243f1 	.word	0x080243f1
 80208b4:	08024462 	.word	0x08024462

080208b8 <__s2b>:
 80208b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80208ba:	0007      	movs	r7, r0
 80208bc:	0018      	movs	r0, r3
 80208be:	000c      	movs	r4, r1
 80208c0:	3008      	adds	r0, #8
 80208c2:	2109      	movs	r1, #9
 80208c4:	9301      	str	r3, [sp, #4]
 80208c6:	0015      	movs	r5, r2
 80208c8:	f7df fcf6 	bl	80002b8 <__divsi3>
 80208cc:	2301      	movs	r3, #1
 80208ce:	2100      	movs	r1, #0
 80208d0:	4283      	cmp	r3, r0
 80208d2:	db0a      	blt.n	80208ea <__s2b+0x32>
 80208d4:	0038      	movs	r0, r7
 80208d6:	f7ff ff43 	bl	8020760 <_Balloc>
 80208da:	1e01      	subs	r1, r0, #0
 80208dc:	d108      	bne.n	80208f0 <__s2b+0x38>
 80208de:	000a      	movs	r2, r1
 80208e0:	4b19      	ldr	r3, [pc, #100]	@ (8020948 <__s2b+0x90>)
 80208e2:	481a      	ldr	r0, [pc, #104]	@ (802094c <__s2b+0x94>)
 80208e4:	31d3      	adds	r1, #211	@ 0xd3
 80208e6:	f001 f81b 	bl	8021920 <__assert_func>
 80208ea:	005b      	lsls	r3, r3, #1
 80208ec:	3101      	adds	r1, #1
 80208ee:	e7ef      	b.n	80208d0 <__s2b+0x18>
 80208f0:	9b08      	ldr	r3, [sp, #32]
 80208f2:	6143      	str	r3, [r0, #20]
 80208f4:	2301      	movs	r3, #1
 80208f6:	6103      	str	r3, [r0, #16]
 80208f8:	2d09      	cmp	r5, #9
 80208fa:	dd18      	ble.n	802092e <__s2b+0x76>
 80208fc:	0023      	movs	r3, r4
 80208fe:	3309      	adds	r3, #9
 8020900:	001e      	movs	r6, r3
 8020902:	9300      	str	r3, [sp, #0]
 8020904:	1964      	adds	r4, r4, r5
 8020906:	7833      	ldrb	r3, [r6, #0]
 8020908:	220a      	movs	r2, #10
 802090a:	0038      	movs	r0, r7
 802090c:	3b30      	subs	r3, #48	@ 0x30
 802090e:	f7ff ff8f 	bl	8020830 <__multadd>
 8020912:	3601      	adds	r6, #1
 8020914:	0001      	movs	r1, r0
 8020916:	42a6      	cmp	r6, r4
 8020918:	d1f5      	bne.n	8020906 <__s2b+0x4e>
 802091a:	002c      	movs	r4, r5
 802091c:	9b00      	ldr	r3, [sp, #0]
 802091e:	3c08      	subs	r4, #8
 8020920:	191c      	adds	r4, r3, r4
 8020922:	002e      	movs	r6, r5
 8020924:	9b01      	ldr	r3, [sp, #4]
 8020926:	429e      	cmp	r6, r3
 8020928:	db04      	blt.n	8020934 <__s2b+0x7c>
 802092a:	0008      	movs	r0, r1
 802092c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 802092e:	2509      	movs	r5, #9
 8020930:	340a      	adds	r4, #10
 8020932:	e7f6      	b.n	8020922 <__s2b+0x6a>
 8020934:	1b63      	subs	r3, r4, r5
 8020936:	5d9b      	ldrb	r3, [r3, r6]
 8020938:	220a      	movs	r2, #10
 802093a:	0038      	movs	r0, r7
 802093c:	3b30      	subs	r3, #48	@ 0x30
 802093e:	f7ff ff77 	bl	8020830 <__multadd>
 8020942:	3601      	adds	r6, #1
 8020944:	0001      	movs	r1, r0
 8020946:	e7ed      	b.n	8020924 <__s2b+0x6c>
 8020948:	080243f1 	.word	0x080243f1
 802094c:	08024462 	.word	0x08024462

08020950 <__hi0bits>:
 8020950:	2280      	movs	r2, #128	@ 0x80
 8020952:	0003      	movs	r3, r0
 8020954:	0252      	lsls	r2, r2, #9
 8020956:	2000      	movs	r0, #0
 8020958:	4293      	cmp	r3, r2
 802095a:	d201      	bcs.n	8020960 <__hi0bits+0x10>
 802095c:	041b      	lsls	r3, r3, #16
 802095e:	3010      	adds	r0, #16
 8020960:	2280      	movs	r2, #128	@ 0x80
 8020962:	0452      	lsls	r2, r2, #17
 8020964:	4293      	cmp	r3, r2
 8020966:	d201      	bcs.n	802096c <__hi0bits+0x1c>
 8020968:	3008      	adds	r0, #8
 802096a:	021b      	lsls	r3, r3, #8
 802096c:	2280      	movs	r2, #128	@ 0x80
 802096e:	0552      	lsls	r2, r2, #21
 8020970:	4293      	cmp	r3, r2
 8020972:	d201      	bcs.n	8020978 <__hi0bits+0x28>
 8020974:	3004      	adds	r0, #4
 8020976:	011b      	lsls	r3, r3, #4
 8020978:	2280      	movs	r2, #128	@ 0x80
 802097a:	05d2      	lsls	r2, r2, #23
 802097c:	4293      	cmp	r3, r2
 802097e:	d201      	bcs.n	8020984 <__hi0bits+0x34>
 8020980:	3002      	adds	r0, #2
 8020982:	009b      	lsls	r3, r3, #2
 8020984:	2b00      	cmp	r3, #0
 8020986:	db03      	blt.n	8020990 <__hi0bits+0x40>
 8020988:	3001      	adds	r0, #1
 802098a:	4213      	tst	r3, r2
 802098c:	d100      	bne.n	8020990 <__hi0bits+0x40>
 802098e:	2020      	movs	r0, #32
 8020990:	4770      	bx	lr

08020992 <__lo0bits>:
 8020992:	6803      	ldr	r3, [r0, #0]
 8020994:	0001      	movs	r1, r0
 8020996:	2207      	movs	r2, #7
 8020998:	0018      	movs	r0, r3
 802099a:	4010      	ands	r0, r2
 802099c:	4213      	tst	r3, r2
 802099e:	d00d      	beq.n	80209bc <__lo0bits+0x2a>
 80209a0:	3a06      	subs	r2, #6
 80209a2:	2000      	movs	r0, #0
 80209a4:	4213      	tst	r3, r2
 80209a6:	d105      	bne.n	80209b4 <__lo0bits+0x22>
 80209a8:	3002      	adds	r0, #2
 80209aa:	4203      	tst	r3, r0
 80209ac:	d003      	beq.n	80209b6 <__lo0bits+0x24>
 80209ae:	40d3      	lsrs	r3, r2
 80209b0:	0010      	movs	r0, r2
 80209b2:	600b      	str	r3, [r1, #0]
 80209b4:	4770      	bx	lr
 80209b6:	089b      	lsrs	r3, r3, #2
 80209b8:	600b      	str	r3, [r1, #0]
 80209ba:	e7fb      	b.n	80209b4 <__lo0bits+0x22>
 80209bc:	b29a      	uxth	r2, r3
 80209be:	2a00      	cmp	r2, #0
 80209c0:	d101      	bne.n	80209c6 <__lo0bits+0x34>
 80209c2:	2010      	movs	r0, #16
 80209c4:	0c1b      	lsrs	r3, r3, #16
 80209c6:	b2da      	uxtb	r2, r3
 80209c8:	2a00      	cmp	r2, #0
 80209ca:	d101      	bne.n	80209d0 <__lo0bits+0x3e>
 80209cc:	3008      	adds	r0, #8
 80209ce:	0a1b      	lsrs	r3, r3, #8
 80209d0:	071a      	lsls	r2, r3, #28
 80209d2:	d101      	bne.n	80209d8 <__lo0bits+0x46>
 80209d4:	3004      	adds	r0, #4
 80209d6:	091b      	lsrs	r3, r3, #4
 80209d8:	079a      	lsls	r2, r3, #30
 80209da:	d101      	bne.n	80209e0 <__lo0bits+0x4e>
 80209dc:	3002      	adds	r0, #2
 80209de:	089b      	lsrs	r3, r3, #2
 80209e0:	07da      	lsls	r2, r3, #31
 80209e2:	d4e9      	bmi.n	80209b8 <__lo0bits+0x26>
 80209e4:	3001      	adds	r0, #1
 80209e6:	085b      	lsrs	r3, r3, #1
 80209e8:	d1e6      	bne.n	80209b8 <__lo0bits+0x26>
 80209ea:	2020      	movs	r0, #32
 80209ec:	e7e2      	b.n	80209b4 <__lo0bits+0x22>
	...

080209f0 <__i2b>:
 80209f0:	b510      	push	{r4, lr}
 80209f2:	000c      	movs	r4, r1
 80209f4:	2101      	movs	r1, #1
 80209f6:	f7ff feb3 	bl	8020760 <_Balloc>
 80209fa:	2800      	cmp	r0, #0
 80209fc:	d107      	bne.n	8020a0e <__i2b+0x1e>
 80209fe:	2146      	movs	r1, #70	@ 0x46
 8020a00:	4c05      	ldr	r4, [pc, #20]	@ (8020a18 <__i2b+0x28>)
 8020a02:	0002      	movs	r2, r0
 8020a04:	4b05      	ldr	r3, [pc, #20]	@ (8020a1c <__i2b+0x2c>)
 8020a06:	0020      	movs	r0, r4
 8020a08:	31ff      	adds	r1, #255	@ 0xff
 8020a0a:	f000 ff89 	bl	8021920 <__assert_func>
 8020a0e:	2301      	movs	r3, #1
 8020a10:	6144      	str	r4, [r0, #20]
 8020a12:	6103      	str	r3, [r0, #16]
 8020a14:	bd10      	pop	{r4, pc}
 8020a16:	46c0      	nop			@ (mov r8, r8)
 8020a18:	08024462 	.word	0x08024462
 8020a1c:	080243f1 	.word	0x080243f1

08020a20 <__multiply>:
 8020a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020a22:	0014      	movs	r4, r2
 8020a24:	690a      	ldr	r2, [r1, #16]
 8020a26:	6923      	ldr	r3, [r4, #16]
 8020a28:	000d      	movs	r5, r1
 8020a2a:	b08b      	sub	sp, #44	@ 0x2c
 8020a2c:	429a      	cmp	r2, r3
 8020a2e:	db02      	blt.n	8020a36 <__multiply+0x16>
 8020a30:	0023      	movs	r3, r4
 8020a32:	000c      	movs	r4, r1
 8020a34:	001d      	movs	r5, r3
 8020a36:	6927      	ldr	r7, [r4, #16]
 8020a38:	692e      	ldr	r6, [r5, #16]
 8020a3a:	6861      	ldr	r1, [r4, #4]
 8020a3c:	19bb      	adds	r3, r7, r6
 8020a3e:	9303      	str	r3, [sp, #12]
 8020a40:	68a3      	ldr	r3, [r4, #8]
 8020a42:	19ba      	adds	r2, r7, r6
 8020a44:	4293      	cmp	r3, r2
 8020a46:	da00      	bge.n	8020a4a <__multiply+0x2a>
 8020a48:	3101      	adds	r1, #1
 8020a4a:	f7ff fe89 	bl	8020760 <_Balloc>
 8020a4e:	9002      	str	r0, [sp, #8]
 8020a50:	2800      	cmp	r0, #0
 8020a52:	d106      	bne.n	8020a62 <__multiply+0x42>
 8020a54:	21b1      	movs	r1, #177	@ 0xb1
 8020a56:	4b49      	ldr	r3, [pc, #292]	@ (8020b7c <__multiply+0x15c>)
 8020a58:	4849      	ldr	r0, [pc, #292]	@ (8020b80 <__multiply+0x160>)
 8020a5a:	9a02      	ldr	r2, [sp, #8]
 8020a5c:	0049      	lsls	r1, r1, #1
 8020a5e:	f000 ff5f 	bl	8021920 <__assert_func>
 8020a62:	9b02      	ldr	r3, [sp, #8]
 8020a64:	2200      	movs	r2, #0
 8020a66:	3314      	adds	r3, #20
 8020a68:	469c      	mov	ip, r3
 8020a6a:	19bb      	adds	r3, r7, r6
 8020a6c:	009b      	lsls	r3, r3, #2
 8020a6e:	4463      	add	r3, ip
 8020a70:	9304      	str	r3, [sp, #16]
 8020a72:	4663      	mov	r3, ip
 8020a74:	9904      	ldr	r1, [sp, #16]
 8020a76:	428b      	cmp	r3, r1
 8020a78:	d32a      	bcc.n	8020ad0 <__multiply+0xb0>
 8020a7a:	0023      	movs	r3, r4
 8020a7c:	00bf      	lsls	r7, r7, #2
 8020a7e:	3314      	adds	r3, #20
 8020a80:	3514      	adds	r5, #20
 8020a82:	9308      	str	r3, [sp, #32]
 8020a84:	00b6      	lsls	r6, r6, #2
 8020a86:	19db      	adds	r3, r3, r7
 8020a88:	9305      	str	r3, [sp, #20]
 8020a8a:	19ab      	adds	r3, r5, r6
 8020a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a8e:	2304      	movs	r3, #4
 8020a90:	9306      	str	r3, [sp, #24]
 8020a92:	0023      	movs	r3, r4
 8020a94:	9a05      	ldr	r2, [sp, #20]
 8020a96:	3315      	adds	r3, #21
 8020a98:	9501      	str	r5, [sp, #4]
 8020a9a:	429a      	cmp	r2, r3
 8020a9c:	d305      	bcc.n	8020aaa <__multiply+0x8a>
 8020a9e:	1b13      	subs	r3, r2, r4
 8020aa0:	3b15      	subs	r3, #21
 8020aa2:	089b      	lsrs	r3, r3, #2
 8020aa4:	3301      	adds	r3, #1
 8020aa6:	009b      	lsls	r3, r3, #2
 8020aa8:	9306      	str	r3, [sp, #24]
 8020aaa:	9b01      	ldr	r3, [sp, #4]
 8020aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020aae:	4293      	cmp	r3, r2
 8020ab0:	d310      	bcc.n	8020ad4 <__multiply+0xb4>
 8020ab2:	9b03      	ldr	r3, [sp, #12]
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	dd05      	ble.n	8020ac4 <__multiply+0xa4>
 8020ab8:	9b04      	ldr	r3, [sp, #16]
 8020aba:	3b04      	subs	r3, #4
 8020abc:	9304      	str	r3, [sp, #16]
 8020abe:	681b      	ldr	r3, [r3, #0]
 8020ac0:	2b00      	cmp	r3, #0
 8020ac2:	d056      	beq.n	8020b72 <__multiply+0x152>
 8020ac4:	9b02      	ldr	r3, [sp, #8]
 8020ac6:	9a03      	ldr	r2, [sp, #12]
 8020ac8:	0018      	movs	r0, r3
 8020aca:	611a      	str	r2, [r3, #16]
 8020acc:	b00b      	add	sp, #44	@ 0x2c
 8020ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020ad0:	c304      	stmia	r3!, {r2}
 8020ad2:	e7cf      	b.n	8020a74 <__multiply+0x54>
 8020ad4:	9b01      	ldr	r3, [sp, #4]
 8020ad6:	6818      	ldr	r0, [r3, #0]
 8020ad8:	b280      	uxth	r0, r0
 8020ada:	2800      	cmp	r0, #0
 8020adc:	d01e      	beq.n	8020b1c <__multiply+0xfc>
 8020ade:	4667      	mov	r7, ip
 8020ae0:	2500      	movs	r5, #0
 8020ae2:	9e08      	ldr	r6, [sp, #32]
 8020ae4:	ce02      	ldmia	r6!, {r1}
 8020ae6:	683b      	ldr	r3, [r7, #0]
 8020ae8:	9307      	str	r3, [sp, #28]
 8020aea:	b28b      	uxth	r3, r1
 8020aec:	4343      	muls	r3, r0
 8020aee:	001a      	movs	r2, r3
 8020af0:	466b      	mov	r3, sp
 8020af2:	0c09      	lsrs	r1, r1, #16
 8020af4:	8b9b      	ldrh	r3, [r3, #28]
 8020af6:	4341      	muls	r1, r0
 8020af8:	18d3      	adds	r3, r2, r3
 8020afa:	9a07      	ldr	r2, [sp, #28]
 8020afc:	195b      	adds	r3, r3, r5
 8020afe:	0c12      	lsrs	r2, r2, #16
 8020b00:	1889      	adds	r1, r1, r2
 8020b02:	0c1a      	lsrs	r2, r3, #16
 8020b04:	188a      	adds	r2, r1, r2
 8020b06:	b29b      	uxth	r3, r3
 8020b08:	0c15      	lsrs	r5, r2, #16
 8020b0a:	0412      	lsls	r2, r2, #16
 8020b0c:	431a      	orrs	r2, r3
 8020b0e:	9b05      	ldr	r3, [sp, #20]
 8020b10:	c704      	stmia	r7!, {r2}
 8020b12:	42b3      	cmp	r3, r6
 8020b14:	d8e6      	bhi.n	8020ae4 <__multiply+0xc4>
 8020b16:	4663      	mov	r3, ip
 8020b18:	9a06      	ldr	r2, [sp, #24]
 8020b1a:	509d      	str	r5, [r3, r2]
 8020b1c:	9b01      	ldr	r3, [sp, #4]
 8020b1e:	6818      	ldr	r0, [r3, #0]
 8020b20:	0c00      	lsrs	r0, r0, #16
 8020b22:	d020      	beq.n	8020b66 <__multiply+0x146>
 8020b24:	4663      	mov	r3, ip
 8020b26:	0025      	movs	r5, r4
 8020b28:	4661      	mov	r1, ip
 8020b2a:	2700      	movs	r7, #0
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	3514      	adds	r5, #20
 8020b30:	682a      	ldr	r2, [r5, #0]
 8020b32:	680e      	ldr	r6, [r1, #0]
 8020b34:	b292      	uxth	r2, r2
 8020b36:	4342      	muls	r2, r0
 8020b38:	0c36      	lsrs	r6, r6, #16
 8020b3a:	1992      	adds	r2, r2, r6
 8020b3c:	19d2      	adds	r2, r2, r7
 8020b3e:	0416      	lsls	r6, r2, #16
 8020b40:	b29b      	uxth	r3, r3
 8020b42:	431e      	orrs	r6, r3
 8020b44:	600e      	str	r6, [r1, #0]
 8020b46:	cd40      	ldmia	r5!, {r6}
 8020b48:	684b      	ldr	r3, [r1, #4]
 8020b4a:	0c36      	lsrs	r6, r6, #16
 8020b4c:	4346      	muls	r6, r0
 8020b4e:	b29b      	uxth	r3, r3
 8020b50:	0c12      	lsrs	r2, r2, #16
 8020b52:	18f3      	adds	r3, r6, r3
 8020b54:	189b      	adds	r3, r3, r2
 8020b56:	9a05      	ldr	r2, [sp, #20]
 8020b58:	0c1f      	lsrs	r7, r3, #16
 8020b5a:	3104      	adds	r1, #4
 8020b5c:	42aa      	cmp	r2, r5
 8020b5e:	d8e7      	bhi.n	8020b30 <__multiply+0x110>
 8020b60:	4662      	mov	r2, ip
 8020b62:	9906      	ldr	r1, [sp, #24]
 8020b64:	5053      	str	r3, [r2, r1]
 8020b66:	9b01      	ldr	r3, [sp, #4]
 8020b68:	3304      	adds	r3, #4
 8020b6a:	9301      	str	r3, [sp, #4]
 8020b6c:	2304      	movs	r3, #4
 8020b6e:	449c      	add	ip, r3
 8020b70:	e79b      	b.n	8020aaa <__multiply+0x8a>
 8020b72:	9b03      	ldr	r3, [sp, #12]
 8020b74:	3b01      	subs	r3, #1
 8020b76:	9303      	str	r3, [sp, #12]
 8020b78:	e79b      	b.n	8020ab2 <__multiply+0x92>
 8020b7a:	46c0      	nop			@ (mov r8, r8)
 8020b7c:	080243f1 	.word	0x080243f1
 8020b80:	08024462 	.word	0x08024462

08020b84 <__pow5mult>:
 8020b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020b86:	2303      	movs	r3, #3
 8020b88:	0015      	movs	r5, r2
 8020b8a:	0007      	movs	r7, r0
 8020b8c:	000e      	movs	r6, r1
 8020b8e:	401a      	ands	r2, r3
 8020b90:	421d      	tst	r5, r3
 8020b92:	d008      	beq.n	8020ba6 <__pow5mult+0x22>
 8020b94:	4925      	ldr	r1, [pc, #148]	@ (8020c2c <__pow5mult+0xa8>)
 8020b96:	3a01      	subs	r2, #1
 8020b98:	0092      	lsls	r2, r2, #2
 8020b9a:	5852      	ldr	r2, [r2, r1]
 8020b9c:	2300      	movs	r3, #0
 8020b9e:	0031      	movs	r1, r6
 8020ba0:	f7ff fe46 	bl	8020830 <__multadd>
 8020ba4:	0006      	movs	r6, r0
 8020ba6:	10ad      	asrs	r5, r5, #2
 8020ba8:	d03d      	beq.n	8020c26 <__pow5mult+0xa2>
 8020baa:	69fc      	ldr	r4, [r7, #28]
 8020bac:	2c00      	cmp	r4, #0
 8020bae:	d10f      	bne.n	8020bd0 <__pow5mult+0x4c>
 8020bb0:	2010      	movs	r0, #16
 8020bb2:	f7ff fd07 	bl	80205c4 <malloc>
 8020bb6:	1e02      	subs	r2, r0, #0
 8020bb8:	61f8      	str	r0, [r7, #28]
 8020bba:	d105      	bne.n	8020bc8 <__pow5mult+0x44>
 8020bbc:	21b4      	movs	r1, #180	@ 0xb4
 8020bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8020c30 <__pow5mult+0xac>)
 8020bc0:	481c      	ldr	r0, [pc, #112]	@ (8020c34 <__pow5mult+0xb0>)
 8020bc2:	31ff      	adds	r1, #255	@ 0xff
 8020bc4:	f000 feac 	bl	8021920 <__assert_func>
 8020bc8:	6044      	str	r4, [r0, #4]
 8020bca:	6084      	str	r4, [r0, #8]
 8020bcc:	6004      	str	r4, [r0, #0]
 8020bce:	60c4      	str	r4, [r0, #12]
 8020bd0:	69fb      	ldr	r3, [r7, #28]
 8020bd2:	689c      	ldr	r4, [r3, #8]
 8020bd4:	9301      	str	r3, [sp, #4]
 8020bd6:	2c00      	cmp	r4, #0
 8020bd8:	d108      	bne.n	8020bec <__pow5mult+0x68>
 8020bda:	0038      	movs	r0, r7
 8020bdc:	4916      	ldr	r1, [pc, #88]	@ (8020c38 <__pow5mult+0xb4>)
 8020bde:	f7ff ff07 	bl	80209f0 <__i2b>
 8020be2:	9b01      	ldr	r3, [sp, #4]
 8020be4:	0004      	movs	r4, r0
 8020be6:	6098      	str	r0, [r3, #8]
 8020be8:	2300      	movs	r3, #0
 8020bea:	6003      	str	r3, [r0, #0]
 8020bec:	2301      	movs	r3, #1
 8020bee:	421d      	tst	r5, r3
 8020bf0:	d00a      	beq.n	8020c08 <__pow5mult+0x84>
 8020bf2:	0031      	movs	r1, r6
 8020bf4:	0022      	movs	r2, r4
 8020bf6:	0038      	movs	r0, r7
 8020bf8:	f7ff ff12 	bl	8020a20 <__multiply>
 8020bfc:	0031      	movs	r1, r6
 8020bfe:	9001      	str	r0, [sp, #4]
 8020c00:	0038      	movs	r0, r7
 8020c02:	f7ff fdf1 	bl	80207e8 <_Bfree>
 8020c06:	9e01      	ldr	r6, [sp, #4]
 8020c08:	106d      	asrs	r5, r5, #1
 8020c0a:	d00c      	beq.n	8020c26 <__pow5mult+0xa2>
 8020c0c:	6820      	ldr	r0, [r4, #0]
 8020c0e:	2800      	cmp	r0, #0
 8020c10:	d107      	bne.n	8020c22 <__pow5mult+0x9e>
 8020c12:	0022      	movs	r2, r4
 8020c14:	0021      	movs	r1, r4
 8020c16:	0038      	movs	r0, r7
 8020c18:	f7ff ff02 	bl	8020a20 <__multiply>
 8020c1c:	2300      	movs	r3, #0
 8020c1e:	6020      	str	r0, [r4, #0]
 8020c20:	6003      	str	r3, [r0, #0]
 8020c22:	0004      	movs	r4, r0
 8020c24:	e7e2      	b.n	8020bec <__pow5mult+0x68>
 8020c26:	0030      	movs	r0, r6
 8020c28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020c2a:	46c0      	nop			@ (mov r8, r8)
 8020c2c:	080244bc 	.word	0x080244bc
 8020c30:	08024382 	.word	0x08024382
 8020c34:	08024462 	.word	0x08024462
 8020c38:	00000271 	.word	0x00000271

08020c3c <__lshift>:
 8020c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020c3e:	000c      	movs	r4, r1
 8020c40:	0016      	movs	r6, r2
 8020c42:	6923      	ldr	r3, [r4, #16]
 8020c44:	1157      	asrs	r7, r2, #5
 8020c46:	b085      	sub	sp, #20
 8020c48:	18fb      	adds	r3, r7, r3
 8020c4a:	9301      	str	r3, [sp, #4]
 8020c4c:	3301      	adds	r3, #1
 8020c4e:	9300      	str	r3, [sp, #0]
 8020c50:	6849      	ldr	r1, [r1, #4]
 8020c52:	68a3      	ldr	r3, [r4, #8]
 8020c54:	9002      	str	r0, [sp, #8]
 8020c56:	9a00      	ldr	r2, [sp, #0]
 8020c58:	4293      	cmp	r3, r2
 8020c5a:	db10      	blt.n	8020c7e <__lshift+0x42>
 8020c5c:	9802      	ldr	r0, [sp, #8]
 8020c5e:	f7ff fd7f 	bl	8020760 <_Balloc>
 8020c62:	2300      	movs	r3, #0
 8020c64:	0001      	movs	r1, r0
 8020c66:	0005      	movs	r5, r0
 8020c68:	001a      	movs	r2, r3
 8020c6a:	3114      	adds	r1, #20
 8020c6c:	4298      	cmp	r0, r3
 8020c6e:	d10c      	bne.n	8020c8a <__lshift+0x4e>
 8020c70:	21ef      	movs	r1, #239	@ 0xef
 8020c72:	002a      	movs	r2, r5
 8020c74:	4b25      	ldr	r3, [pc, #148]	@ (8020d0c <__lshift+0xd0>)
 8020c76:	4826      	ldr	r0, [pc, #152]	@ (8020d10 <__lshift+0xd4>)
 8020c78:	0049      	lsls	r1, r1, #1
 8020c7a:	f000 fe51 	bl	8021920 <__assert_func>
 8020c7e:	3101      	adds	r1, #1
 8020c80:	005b      	lsls	r3, r3, #1
 8020c82:	e7e8      	b.n	8020c56 <__lshift+0x1a>
 8020c84:	0098      	lsls	r0, r3, #2
 8020c86:	500a      	str	r2, [r1, r0]
 8020c88:	3301      	adds	r3, #1
 8020c8a:	42bb      	cmp	r3, r7
 8020c8c:	dbfa      	blt.n	8020c84 <__lshift+0x48>
 8020c8e:	43fb      	mvns	r3, r7
 8020c90:	17db      	asrs	r3, r3, #31
 8020c92:	401f      	ands	r7, r3
 8020c94:	00bf      	lsls	r7, r7, #2
 8020c96:	0023      	movs	r3, r4
 8020c98:	201f      	movs	r0, #31
 8020c9a:	19c9      	adds	r1, r1, r7
 8020c9c:	0037      	movs	r7, r6
 8020c9e:	6922      	ldr	r2, [r4, #16]
 8020ca0:	3314      	adds	r3, #20
 8020ca2:	0092      	lsls	r2, r2, #2
 8020ca4:	189a      	adds	r2, r3, r2
 8020ca6:	4007      	ands	r7, r0
 8020ca8:	4206      	tst	r6, r0
 8020caa:	d029      	beq.n	8020d00 <__lshift+0xc4>
 8020cac:	3001      	adds	r0, #1
 8020cae:	1bc0      	subs	r0, r0, r7
 8020cb0:	9003      	str	r0, [sp, #12]
 8020cb2:	468c      	mov	ip, r1
 8020cb4:	2000      	movs	r0, #0
 8020cb6:	681e      	ldr	r6, [r3, #0]
 8020cb8:	40be      	lsls	r6, r7
 8020cba:	4306      	orrs	r6, r0
 8020cbc:	4660      	mov	r0, ip
 8020cbe:	c040      	stmia	r0!, {r6}
 8020cc0:	4684      	mov	ip, r0
 8020cc2:	9e03      	ldr	r6, [sp, #12]
 8020cc4:	cb01      	ldmia	r3!, {r0}
 8020cc6:	40f0      	lsrs	r0, r6
 8020cc8:	429a      	cmp	r2, r3
 8020cca:	d8f4      	bhi.n	8020cb6 <__lshift+0x7a>
 8020ccc:	0026      	movs	r6, r4
 8020cce:	3615      	adds	r6, #21
 8020cd0:	2304      	movs	r3, #4
 8020cd2:	42b2      	cmp	r2, r6
 8020cd4:	d304      	bcc.n	8020ce0 <__lshift+0xa4>
 8020cd6:	1b13      	subs	r3, r2, r4
 8020cd8:	3b15      	subs	r3, #21
 8020cda:	089b      	lsrs	r3, r3, #2
 8020cdc:	3301      	adds	r3, #1
 8020cde:	009b      	lsls	r3, r3, #2
 8020ce0:	50c8      	str	r0, [r1, r3]
 8020ce2:	2800      	cmp	r0, #0
 8020ce4:	d002      	beq.n	8020cec <__lshift+0xb0>
 8020ce6:	9b01      	ldr	r3, [sp, #4]
 8020ce8:	3302      	adds	r3, #2
 8020cea:	9300      	str	r3, [sp, #0]
 8020cec:	9b00      	ldr	r3, [sp, #0]
 8020cee:	9802      	ldr	r0, [sp, #8]
 8020cf0:	3b01      	subs	r3, #1
 8020cf2:	0021      	movs	r1, r4
 8020cf4:	612b      	str	r3, [r5, #16]
 8020cf6:	f7ff fd77 	bl	80207e8 <_Bfree>
 8020cfa:	0028      	movs	r0, r5
 8020cfc:	b005      	add	sp, #20
 8020cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d00:	cb01      	ldmia	r3!, {r0}
 8020d02:	c101      	stmia	r1!, {r0}
 8020d04:	429a      	cmp	r2, r3
 8020d06:	d8fb      	bhi.n	8020d00 <__lshift+0xc4>
 8020d08:	e7f0      	b.n	8020cec <__lshift+0xb0>
 8020d0a:	46c0      	nop			@ (mov r8, r8)
 8020d0c:	080243f1 	.word	0x080243f1
 8020d10:	08024462 	.word	0x08024462

08020d14 <__mcmp>:
 8020d14:	b530      	push	{r4, r5, lr}
 8020d16:	690b      	ldr	r3, [r1, #16]
 8020d18:	6904      	ldr	r4, [r0, #16]
 8020d1a:	0002      	movs	r2, r0
 8020d1c:	1ae0      	subs	r0, r4, r3
 8020d1e:	429c      	cmp	r4, r3
 8020d20:	d10f      	bne.n	8020d42 <__mcmp+0x2e>
 8020d22:	3214      	adds	r2, #20
 8020d24:	009b      	lsls	r3, r3, #2
 8020d26:	3114      	adds	r1, #20
 8020d28:	0014      	movs	r4, r2
 8020d2a:	18c9      	adds	r1, r1, r3
 8020d2c:	18d2      	adds	r2, r2, r3
 8020d2e:	3a04      	subs	r2, #4
 8020d30:	3904      	subs	r1, #4
 8020d32:	6815      	ldr	r5, [r2, #0]
 8020d34:	680b      	ldr	r3, [r1, #0]
 8020d36:	429d      	cmp	r5, r3
 8020d38:	d004      	beq.n	8020d44 <__mcmp+0x30>
 8020d3a:	2001      	movs	r0, #1
 8020d3c:	429d      	cmp	r5, r3
 8020d3e:	d200      	bcs.n	8020d42 <__mcmp+0x2e>
 8020d40:	3802      	subs	r0, #2
 8020d42:	bd30      	pop	{r4, r5, pc}
 8020d44:	4294      	cmp	r4, r2
 8020d46:	d3f2      	bcc.n	8020d2e <__mcmp+0x1a>
 8020d48:	e7fb      	b.n	8020d42 <__mcmp+0x2e>
	...

08020d4c <__mdiff>:
 8020d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020d4e:	000c      	movs	r4, r1
 8020d50:	b087      	sub	sp, #28
 8020d52:	9000      	str	r0, [sp, #0]
 8020d54:	0011      	movs	r1, r2
 8020d56:	0020      	movs	r0, r4
 8020d58:	0017      	movs	r7, r2
 8020d5a:	f7ff ffdb 	bl	8020d14 <__mcmp>
 8020d5e:	1e05      	subs	r5, r0, #0
 8020d60:	d110      	bne.n	8020d84 <__mdiff+0x38>
 8020d62:	0001      	movs	r1, r0
 8020d64:	9800      	ldr	r0, [sp, #0]
 8020d66:	f7ff fcfb 	bl	8020760 <_Balloc>
 8020d6a:	1e02      	subs	r2, r0, #0
 8020d6c:	d104      	bne.n	8020d78 <__mdiff+0x2c>
 8020d6e:	4b40      	ldr	r3, [pc, #256]	@ (8020e70 <__mdiff+0x124>)
 8020d70:	4840      	ldr	r0, [pc, #256]	@ (8020e74 <__mdiff+0x128>)
 8020d72:	4941      	ldr	r1, [pc, #260]	@ (8020e78 <__mdiff+0x12c>)
 8020d74:	f000 fdd4 	bl	8021920 <__assert_func>
 8020d78:	2301      	movs	r3, #1
 8020d7a:	6145      	str	r5, [r0, #20]
 8020d7c:	6103      	str	r3, [r0, #16]
 8020d7e:	0010      	movs	r0, r2
 8020d80:	b007      	add	sp, #28
 8020d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d84:	2600      	movs	r6, #0
 8020d86:	42b0      	cmp	r0, r6
 8020d88:	da03      	bge.n	8020d92 <__mdiff+0x46>
 8020d8a:	0023      	movs	r3, r4
 8020d8c:	003c      	movs	r4, r7
 8020d8e:	001f      	movs	r7, r3
 8020d90:	3601      	adds	r6, #1
 8020d92:	6861      	ldr	r1, [r4, #4]
 8020d94:	9800      	ldr	r0, [sp, #0]
 8020d96:	f7ff fce3 	bl	8020760 <_Balloc>
 8020d9a:	1e02      	subs	r2, r0, #0
 8020d9c:	d103      	bne.n	8020da6 <__mdiff+0x5a>
 8020d9e:	4b34      	ldr	r3, [pc, #208]	@ (8020e70 <__mdiff+0x124>)
 8020da0:	4834      	ldr	r0, [pc, #208]	@ (8020e74 <__mdiff+0x128>)
 8020da2:	4936      	ldr	r1, [pc, #216]	@ (8020e7c <__mdiff+0x130>)
 8020da4:	e7e6      	b.n	8020d74 <__mdiff+0x28>
 8020da6:	6923      	ldr	r3, [r4, #16]
 8020da8:	3414      	adds	r4, #20
 8020daa:	9300      	str	r3, [sp, #0]
 8020dac:	009b      	lsls	r3, r3, #2
 8020dae:	18e3      	adds	r3, r4, r3
 8020db0:	0021      	movs	r1, r4
 8020db2:	9401      	str	r4, [sp, #4]
 8020db4:	003c      	movs	r4, r7
 8020db6:	9302      	str	r3, [sp, #8]
 8020db8:	693b      	ldr	r3, [r7, #16]
 8020dba:	3414      	adds	r4, #20
 8020dbc:	009b      	lsls	r3, r3, #2
 8020dbe:	18e3      	adds	r3, r4, r3
 8020dc0:	9303      	str	r3, [sp, #12]
 8020dc2:	0003      	movs	r3, r0
 8020dc4:	60c6      	str	r6, [r0, #12]
 8020dc6:	468c      	mov	ip, r1
 8020dc8:	2000      	movs	r0, #0
 8020dca:	3314      	adds	r3, #20
 8020dcc:	9304      	str	r3, [sp, #16]
 8020dce:	9305      	str	r3, [sp, #20]
 8020dd0:	4663      	mov	r3, ip
 8020dd2:	cb20      	ldmia	r3!, {r5}
 8020dd4:	b2a9      	uxth	r1, r5
 8020dd6:	000e      	movs	r6, r1
 8020dd8:	469c      	mov	ip, r3
 8020dda:	cc08      	ldmia	r4!, {r3}
 8020ddc:	0c2d      	lsrs	r5, r5, #16
 8020dde:	b299      	uxth	r1, r3
 8020de0:	1a71      	subs	r1, r6, r1
 8020de2:	1809      	adds	r1, r1, r0
 8020de4:	0c1b      	lsrs	r3, r3, #16
 8020de6:	1408      	asrs	r0, r1, #16
 8020de8:	1aeb      	subs	r3, r5, r3
 8020dea:	181b      	adds	r3, r3, r0
 8020dec:	1418      	asrs	r0, r3, #16
 8020dee:	b289      	uxth	r1, r1
 8020df0:	041b      	lsls	r3, r3, #16
 8020df2:	4319      	orrs	r1, r3
 8020df4:	9b05      	ldr	r3, [sp, #20]
 8020df6:	c302      	stmia	r3!, {r1}
 8020df8:	9305      	str	r3, [sp, #20]
 8020dfa:	9b03      	ldr	r3, [sp, #12]
 8020dfc:	42a3      	cmp	r3, r4
 8020dfe:	d8e7      	bhi.n	8020dd0 <__mdiff+0x84>
 8020e00:	0039      	movs	r1, r7
 8020e02:	9c03      	ldr	r4, [sp, #12]
 8020e04:	3115      	adds	r1, #21
 8020e06:	2304      	movs	r3, #4
 8020e08:	428c      	cmp	r4, r1
 8020e0a:	d304      	bcc.n	8020e16 <__mdiff+0xca>
 8020e0c:	1be3      	subs	r3, r4, r7
 8020e0e:	3b15      	subs	r3, #21
 8020e10:	089b      	lsrs	r3, r3, #2
 8020e12:	3301      	adds	r3, #1
 8020e14:	009b      	lsls	r3, r3, #2
 8020e16:	9901      	ldr	r1, [sp, #4]
 8020e18:	18cd      	adds	r5, r1, r3
 8020e1a:	9904      	ldr	r1, [sp, #16]
 8020e1c:	002e      	movs	r6, r5
 8020e1e:	18cb      	adds	r3, r1, r3
 8020e20:	001f      	movs	r7, r3
 8020e22:	9902      	ldr	r1, [sp, #8]
 8020e24:	428e      	cmp	r6, r1
 8020e26:	d311      	bcc.n	8020e4c <__mdiff+0x100>
 8020e28:	9c02      	ldr	r4, [sp, #8]
 8020e2a:	1ee9      	subs	r1, r5, #3
 8020e2c:	2000      	movs	r0, #0
 8020e2e:	428c      	cmp	r4, r1
 8020e30:	d304      	bcc.n	8020e3c <__mdiff+0xf0>
 8020e32:	0021      	movs	r1, r4
 8020e34:	3103      	adds	r1, #3
 8020e36:	1b49      	subs	r1, r1, r5
 8020e38:	0889      	lsrs	r1, r1, #2
 8020e3a:	0088      	lsls	r0, r1, #2
 8020e3c:	181b      	adds	r3, r3, r0
 8020e3e:	3b04      	subs	r3, #4
 8020e40:	6819      	ldr	r1, [r3, #0]
 8020e42:	2900      	cmp	r1, #0
 8020e44:	d010      	beq.n	8020e68 <__mdiff+0x11c>
 8020e46:	9b00      	ldr	r3, [sp, #0]
 8020e48:	6113      	str	r3, [r2, #16]
 8020e4a:	e798      	b.n	8020d7e <__mdiff+0x32>
 8020e4c:	4684      	mov	ip, r0
 8020e4e:	ce02      	ldmia	r6!, {r1}
 8020e50:	b288      	uxth	r0, r1
 8020e52:	4460      	add	r0, ip
 8020e54:	1400      	asrs	r0, r0, #16
 8020e56:	0c0c      	lsrs	r4, r1, #16
 8020e58:	1904      	adds	r4, r0, r4
 8020e5a:	4461      	add	r1, ip
 8020e5c:	1420      	asrs	r0, r4, #16
 8020e5e:	b289      	uxth	r1, r1
 8020e60:	0424      	lsls	r4, r4, #16
 8020e62:	4321      	orrs	r1, r4
 8020e64:	c702      	stmia	r7!, {r1}
 8020e66:	e7dc      	b.n	8020e22 <__mdiff+0xd6>
 8020e68:	9900      	ldr	r1, [sp, #0]
 8020e6a:	3901      	subs	r1, #1
 8020e6c:	9100      	str	r1, [sp, #0]
 8020e6e:	e7e6      	b.n	8020e3e <__mdiff+0xf2>
 8020e70:	080243f1 	.word	0x080243f1
 8020e74:	08024462 	.word	0x08024462
 8020e78:	00000237 	.word	0x00000237
 8020e7c:	00000245 	.word	0x00000245

08020e80 <__ulp>:
 8020e80:	b510      	push	{r4, lr}
 8020e82:	2400      	movs	r4, #0
 8020e84:	4b0c      	ldr	r3, [pc, #48]	@ (8020eb8 <__ulp+0x38>)
 8020e86:	4a0d      	ldr	r2, [pc, #52]	@ (8020ebc <__ulp+0x3c>)
 8020e88:	400b      	ands	r3, r1
 8020e8a:	189b      	adds	r3, r3, r2
 8020e8c:	42a3      	cmp	r3, r4
 8020e8e:	dc06      	bgt.n	8020e9e <__ulp+0x1e>
 8020e90:	425b      	negs	r3, r3
 8020e92:	151a      	asrs	r2, r3, #20
 8020e94:	2a13      	cmp	r2, #19
 8020e96:	dc05      	bgt.n	8020ea4 <__ulp+0x24>
 8020e98:	2380      	movs	r3, #128	@ 0x80
 8020e9a:	031b      	lsls	r3, r3, #12
 8020e9c:	4113      	asrs	r3, r2
 8020e9e:	0019      	movs	r1, r3
 8020ea0:	0020      	movs	r0, r4
 8020ea2:	bd10      	pop	{r4, pc}
 8020ea4:	3a14      	subs	r2, #20
 8020ea6:	2401      	movs	r4, #1
 8020ea8:	2a1e      	cmp	r2, #30
 8020eaa:	dc02      	bgt.n	8020eb2 <__ulp+0x32>
 8020eac:	2480      	movs	r4, #128	@ 0x80
 8020eae:	0624      	lsls	r4, r4, #24
 8020eb0:	40d4      	lsrs	r4, r2
 8020eb2:	2300      	movs	r3, #0
 8020eb4:	e7f3      	b.n	8020e9e <__ulp+0x1e>
 8020eb6:	46c0      	nop			@ (mov r8, r8)
 8020eb8:	7ff00000 	.word	0x7ff00000
 8020ebc:	fcc00000 	.word	0xfcc00000

08020ec0 <__b2d>:
 8020ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020ec2:	0006      	movs	r6, r0
 8020ec4:	6903      	ldr	r3, [r0, #16]
 8020ec6:	3614      	adds	r6, #20
 8020ec8:	009b      	lsls	r3, r3, #2
 8020eca:	18f3      	adds	r3, r6, r3
 8020ecc:	1f1d      	subs	r5, r3, #4
 8020ece:	682c      	ldr	r4, [r5, #0]
 8020ed0:	000f      	movs	r7, r1
 8020ed2:	0020      	movs	r0, r4
 8020ed4:	9301      	str	r3, [sp, #4]
 8020ed6:	f7ff fd3b 	bl	8020950 <__hi0bits>
 8020eda:	2220      	movs	r2, #32
 8020edc:	1a12      	subs	r2, r2, r0
 8020ede:	603a      	str	r2, [r7, #0]
 8020ee0:	0003      	movs	r3, r0
 8020ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8020f54 <__b2d+0x94>)
 8020ee4:	280a      	cmp	r0, #10
 8020ee6:	dc15      	bgt.n	8020f14 <__b2d+0x54>
 8020ee8:	210b      	movs	r1, #11
 8020eea:	0027      	movs	r7, r4
 8020eec:	1a09      	subs	r1, r1, r0
 8020eee:	40cf      	lsrs	r7, r1
 8020ef0:	433a      	orrs	r2, r7
 8020ef2:	468c      	mov	ip, r1
 8020ef4:	0011      	movs	r1, r2
 8020ef6:	2200      	movs	r2, #0
 8020ef8:	42ae      	cmp	r6, r5
 8020efa:	d202      	bcs.n	8020f02 <__b2d+0x42>
 8020efc:	9a01      	ldr	r2, [sp, #4]
 8020efe:	3a08      	subs	r2, #8
 8020f00:	6812      	ldr	r2, [r2, #0]
 8020f02:	3315      	adds	r3, #21
 8020f04:	409c      	lsls	r4, r3
 8020f06:	4663      	mov	r3, ip
 8020f08:	0027      	movs	r7, r4
 8020f0a:	40da      	lsrs	r2, r3
 8020f0c:	4317      	orrs	r7, r2
 8020f0e:	0038      	movs	r0, r7
 8020f10:	b003      	add	sp, #12
 8020f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020f14:	2700      	movs	r7, #0
 8020f16:	42ae      	cmp	r6, r5
 8020f18:	d202      	bcs.n	8020f20 <__b2d+0x60>
 8020f1a:	9d01      	ldr	r5, [sp, #4]
 8020f1c:	3d08      	subs	r5, #8
 8020f1e:	682f      	ldr	r7, [r5, #0]
 8020f20:	210b      	movs	r1, #11
 8020f22:	4249      	negs	r1, r1
 8020f24:	468c      	mov	ip, r1
 8020f26:	449c      	add	ip, r3
 8020f28:	2b0b      	cmp	r3, #11
 8020f2a:	d010      	beq.n	8020f4e <__b2d+0x8e>
 8020f2c:	4661      	mov	r1, ip
 8020f2e:	2320      	movs	r3, #32
 8020f30:	408c      	lsls	r4, r1
 8020f32:	1a5b      	subs	r3, r3, r1
 8020f34:	0039      	movs	r1, r7
 8020f36:	40d9      	lsrs	r1, r3
 8020f38:	430c      	orrs	r4, r1
 8020f3a:	4322      	orrs	r2, r4
 8020f3c:	0011      	movs	r1, r2
 8020f3e:	2200      	movs	r2, #0
 8020f40:	42b5      	cmp	r5, r6
 8020f42:	d901      	bls.n	8020f48 <__b2d+0x88>
 8020f44:	3d04      	subs	r5, #4
 8020f46:	682a      	ldr	r2, [r5, #0]
 8020f48:	4664      	mov	r4, ip
 8020f4a:	40a7      	lsls	r7, r4
 8020f4c:	e7dd      	b.n	8020f0a <__b2d+0x4a>
 8020f4e:	4322      	orrs	r2, r4
 8020f50:	0011      	movs	r1, r2
 8020f52:	e7dc      	b.n	8020f0e <__b2d+0x4e>
 8020f54:	3ff00000 	.word	0x3ff00000

08020f58 <__d2b>:
 8020f58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020f5a:	2101      	movs	r1, #1
 8020f5c:	0016      	movs	r6, r2
 8020f5e:	001f      	movs	r7, r3
 8020f60:	f7ff fbfe 	bl	8020760 <_Balloc>
 8020f64:	1e04      	subs	r4, r0, #0
 8020f66:	d105      	bne.n	8020f74 <__d2b+0x1c>
 8020f68:	0022      	movs	r2, r4
 8020f6a:	4b25      	ldr	r3, [pc, #148]	@ (8021000 <__d2b+0xa8>)
 8020f6c:	4825      	ldr	r0, [pc, #148]	@ (8021004 <__d2b+0xac>)
 8020f6e:	4926      	ldr	r1, [pc, #152]	@ (8021008 <__d2b+0xb0>)
 8020f70:	f000 fcd6 	bl	8021920 <__assert_func>
 8020f74:	033b      	lsls	r3, r7, #12
 8020f76:	007d      	lsls	r5, r7, #1
 8020f78:	0b1b      	lsrs	r3, r3, #12
 8020f7a:	0d6d      	lsrs	r5, r5, #21
 8020f7c:	d002      	beq.n	8020f84 <__d2b+0x2c>
 8020f7e:	2280      	movs	r2, #128	@ 0x80
 8020f80:	0352      	lsls	r2, r2, #13
 8020f82:	4313      	orrs	r3, r2
 8020f84:	9301      	str	r3, [sp, #4]
 8020f86:	2e00      	cmp	r6, #0
 8020f88:	d025      	beq.n	8020fd6 <__d2b+0x7e>
 8020f8a:	4668      	mov	r0, sp
 8020f8c:	9600      	str	r6, [sp, #0]
 8020f8e:	f7ff fd00 	bl	8020992 <__lo0bits>
 8020f92:	9b01      	ldr	r3, [sp, #4]
 8020f94:	9900      	ldr	r1, [sp, #0]
 8020f96:	2800      	cmp	r0, #0
 8020f98:	d01b      	beq.n	8020fd2 <__d2b+0x7a>
 8020f9a:	2220      	movs	r2, #32
 8020f9c:	001e      	movs	r6, r3
 8020f9e:	1a12      	subs	r2, r2, r0
 8020fa0:	4096      	lsls	r6, r2
 8020fa2:	0032      	movs	r2, r6
 8020fa4:	40c3      	lsrs	r3, r0
 8020fa6:	430a      	orrs	r2, r1
 8020fa8:	6162      	str	r2, [r4, #20]
 8020faa:	9301      	str	r3, [sp, #4]
 8020fac:	9e01      	ldr	r6, [sp, #4]
 8020fae:	61a6      	str	r6, [r4, #24]
 8020fb0:	1e73      	subs	r3, r6, #1
 8020fb2:	419e      	sbcs	r6, r3
 8020fb4:	3601      	adds	r6, #1
 8020fb6:	6126      	str	r6, [r4, #16]
 8020fb8:	2d00      	cmp	r5, #0
 8020fba:	d014      	beq.n	8020fe6 <__d2b+0x8e>
 8020fbc:	2635      	movs	r6, #53	@ 0x35
 8020fbe:	4b13      	ldr	r3, [pc, #76]	@ (802100c <__d2b+0xb4>)
 8020fc0:	18ed      	adds	r5, r5, r3
 8020fc2:	9b08      	ldr	r3, [sp, #32]
 8020fc4:	182d      	adds	r5, r5, r0
 8020fc6:	601d      	str	r5, [r3, #0]
 8020fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020fca:	1a36      	subs	r6, r6, r0
 8020fcc:	601e      	str	r6, [r3, #0]
 8020fce:	0020      	movs	r0, r4
 8020fd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8020fd2:	6161      	str	r1, [r4, #20]
 8020fd4:	e7ea      	b.n	8020fac <__d2b+0x54>
 8020fd6:	a801      	add	r0, sp, #4
 8020fd8:	f7ff fcdb 	bl	8020992 <__lo0bits>
 8020fdc:	9b01      	ldr	r3, [sp, #4]
 8020fde:	2601      	movs	r6, #1
 8020fe0:	6163      	str	r3, [r4, #20]
 8020fe2:	3020      	adds	r0, #32
 8020fe4:	e7e7      	b.n	8020fb6 <__d2b+0x5e>
 8020fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8021010 <__d2b+0xb8>)
 8020fe8:	18c0      	adds	r0, r0, r3
 8020fea:	9b08      	ldr	r3, [sp, #32]
 8020fec:	6018      	str	r0, [r3, #0]
 8020fee:	4b09      	ldr	r3, [pc, #36]	@ (8021014 <__d2b+0xbc>)
 8020ff0:	18f3      	adds	r3, r6, r3
 8020ff2:	009b      	lsls	r3, r3, #2
 8020ff4:	18e3      	adds	r3, r4, r3
 8020ff6:	6958      	ldr	r0, [r3, #20]
 8020ff8:	f7ff fcaa 	bl	8020950 <__hi0bits>
 8020ffc:	0176      	lsls	r6, r6, #5
 8020ffe:	e7e3      	b.n	8020fc8 <__d2b+0x70>
 8021000:	080243f1 	.word	0x080243f1
 8021004:	08024462 	.word	0x08024462
 8021008:	0000030f 	.word	0x0000030f
 802100c:	fffffbcd 	.word	0xfffffbcd
 8021010:	fffffbce 	.word	0xfffffbce
 8021014:	3fffffff 	.word	0x3fffffff

08021018 <__ratio>:
 8021018:	b5f0      	push	{r4, r5, r6, r7, lr}
 802101a:	b087      	sub	sp, #28
 802101c:	000f      	movs	r7, r1
 802101e:	a904      	add	r1, sp, #16
 8021020:	0006      	movs	r6, r0
 8021022:	f7ff ff4d 	bl	8020ec0 <__b2d>
 8021026:	9000      	str	r0, [sp, #0]
 8021028:	9101      	str	r1, [sp, #4]
 802102a:	9b00      	ldr	r3, [sp, #0]
 802102c:	9c01      	ldr	r4, [sp, #4]
 802102e:	0038      	movs	r0, r7
 8021030:	a905      	add	r1, sp, #20
 8021032:	9302      	str	r3, [sp, #8]
 8021034:	9403      	str	r4, [sp, #12]
 8021036:	f7ff ff43 	bl	8020ec0 <__b2d>
 802103a:	000d      	movs	r5, r1
 802103c:	0002      	movs	r2, r0
 802103e:	000b      	movs	r3, r1
 8021040:	6930      	ldr	r0, [r6, #16]
 8021042:	6939      	ldr	r1, [r7, #16]
 8021044:	9e04      	ldr	r6, [sp, #16]
 8021046:	1a40      	subs	r0, r0, r1
 8021048:	9905      	ldr	r1, [sp, #20]
 802104a:	0140      	lsls	r0, r0, #5
 802104c:	1a71      	subs	r1, r6, r1
 802104e:	1841      	adds	r1, r0, r1
 8021050:	0508      	lsls	r0, r1, #20
 8021052:	2900      	cmp	r1, #0
 8021054:	dd08      	ble.n	8021068 <__ratio+0x50>
 8021056:	9901      	ldr	r1, [sp, #4]
 8021058:	1841      	adds	r1, r0, r1
 802105a:	9103      	str	r1, [sp, #12]
 802105c:	9802      	ldr	r0, [sp, #8]
 802105e:	9903      	ldr	r1, [sp, #12]
 8021060:	f7e0 fea8 	bl	8001db4 <__aeabi_ddiv>
 8021064:	b007      	add	sp, #28
 8021066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021068:	1a2b      	subs	r3, r5, r0
 802106a:	e7f7      	b.n	802105c <__ratio+0x44>

0802106c <__copybits>:
 802106c:	b570      	push	{r4, r5, r6, lr}
 802106e:	0014      	movs	r4, r2
 8021070:	0005      	movs	r5, r0
 8021072:	3901      	subs	r1, #1
 8021074:	6913      	ldr	r3, [r2, #16]
 8021076:	1149      	asrs	r1, r1, #5
 8021078:	3101      	adds	r1, #1
 802107a:	0089      	lsls	r1, r1, #2
 802107c:	3414      	adds	r4, #20
 802107e:	009b      	lsls	r3, r3, #2
 8021080:	1841      	adds	r1, r0, r1
 8021082:	18e3      	adds	r3, r4, r3
 8021084:	42a3      	cmp	r3, r4
 8021086:	d80d      	bhi.n	80210a4 <__copybits+0x38>
 8021088:	0014      	movs	r4, r2
 802108a:	3411      	adds	r4, #17
 802108c:	2500      	movs	r5, #0
 802108e:	429c      	cmp	r4, r3
 8021090:	d803      	bhi.n	802109a <__copybits+0x2e>
 8021092:	1a9b      	subs	r3, r3, r2
 8021094:	3b11      	subs	r3, #17
 8021096:	089b      	lsrs	r3, r3, #2
 8021098:	009d      	lsls	r5, r3, #2
 802109a:	2300      	movs	r3, #0
 802109c:	1940      	adds	r0, r0, r5
 802109e:	4281      	cmp	r1, r0
 80210a0:	d803      	bhi.n	80210aa <__copybits+0x3e>
 80210a2:	bd70      	pop	{r4, r5, r6, pc}
 80210a4:	cc40      	ldmia	r4!, {r6}
 80210a6:	c540      	stmia	r5!, {r6}
 80210a8:	e7ec      	b.n	8021084 <__copybits+0x18>
 80210aa:	c008      	stmia	r0!, {r3}
 80210ac:	e7f7      	b.n	802109e <__copybits+0x32>

080210ae <__any_on>:
 80210ae:	0002      	movs	r2, r0
 80210b0:	6900      	ldr	r0, [r0, #16]
 80210b2:	b510      	push	{r4, lr}
 80210b4:	3214      	adds	r2, #20
 80210b6:	114b      	asrs	r3, r1, #5
 80210b8:	4298      	cmp	r0, r3
 80210ba:	db13      	blt.n	80210e4 <__any_on+0x36>
 80210bc:	dd0c      	ble.n	80210d8 <__any_on+0x2a>
 80210be:	241f      	movs	r4, #31
 80210c0:	0008      	movs	r0, r1
 80210c2:	4020      	ands	r0, r4
 80210c4:	4221      	tst	r1, r4
 80210c6:	d007      	beq.n	80210d8 <__any_on+0x2a>
 80210c8:	0099      	lsls	r1, r3, #2
 80210ca:	588c      	ldr	r4, [r1, r2]
 80210cc:	0021      	movs	r1, r4
 80210ce:	40c1      	lsrs	r1, r0
 80210d0:	4081      	lsls	r1, r0
 80210d2:	2001      	movs	r0, #1
 80210d4:	428c      	cmp	r4, r1
 80210d6:	d104      	bne.n	80210e2 <__any_on+0x34>
 80210d8:	009b      	lsls	r3, r3, #2
 80210da:	18d3      	adds	r3, r2, r3
 80210dc:	4293      	cmp	r3, r2
 80210de:	d803      	bhi.n	80210e8 <__any_on+0x3a>
 80210e0:	2000      	movs	r0, #0
 80210e2:	bd10      	pop	{r4, pc}
 80210e4:	0003      	movs	r3, r0
 80210e6:	e7f7      	b.n	80210d8 <__any_on+0x2a>
 80210e8:	3b04      	subs	r3, #4
 80210ea:	6819      	ldr	r1, [r3, #0]
 80210ec:	2900      	cmp	r1, #0
 80210ee:	d0f5      	beq.n	80210dc <__any_on+0x2e>
 80210f0:	2001      	movs	r0, #1
 80210f2:	e7f6      	b.n	80210e2 <__any_on+0x34>

080210f4 <__ascii_wctomb>:
 80210f4:	0003      	movs	r3, r0
 80210f6:	1e08      	subs	r0, r1, #0
 80210f8:	d005      	beq.n	8021106 <__ascii_wctomb+0x12>
 80210fa:	2aff      	cmp	r2, #255	@ 0xff
 80210fc:	d904      	bls.n	8021108 <__ascii_wctomb+0x14>
 80210fe:	228a      	movs	r2, #138	@ 0x8a
 8021100:	2001      	movs	r0, #1
 8021102:	601a      	str	r2, [r3, #0]
 8021104:	4240      	negs	r0, r0
 8021106:	4770      	bx	lr
 8021108:	2001      	movs	r0, #1
 802110a:	700a      	strb	r2, [r1, #0]
 802110c:	e7fb      	b.n	8021106 <__ascii_wctomb+0x12>
	...

08021110 <__ssputs_r>:
 8021110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021112:	688e      	ldr	r6, [r1, #8]
 8021114:	b085      	sub	sp, #20
 8021116:	001f      	movs	r7, r3
 8021118:	000c      	movs	r4, r1
 802111a:	680b      	ldr	r3, [r1, #0]
 802111c:	9002      	str	r0, [sp, #8]
 802111e:	9203      	str	r2, [sp, #12]
 8021120:	42be      	cmp	r6, r7
 8021122:	d830      	bhi.n	8021186 <__ssputs_r+0x76>
 8021124:	210c      	movs	r1, #12
 8021126:	5e62      	ldrsh	r2, [r4, r1]
 8021128:	2190      	movs	r1, #144	@ 0x90
 802112a:	00c9      	lsls	r1, r1, #3
 802112c:	420a      	tst	r2, r1
 802112e:	d028      	beq.n	8021182 <__ssputs_r+0x72>
 8021130:	2003      	movs	r0, #3
 8021132:	6921      	ldr	r1, [r4, #16]
 8021134:	1a5b      	subs	r3, r3, r1
 8021136:	9301      	str	r3, [sp, #4]
 8021138:	6963      	ldr	r3, [r4, #20]
 802113a:	4343      	muls	r3, r0
 802113c:	9801      	ldr	r0, [sp, #4]
 802113e:	0fdd      	lsrs	r5, r3, #31
 8021140:	18ed      	adds	r5, r5, r3
 8021142:	1c7b      	adds	r3, r7, #1
 8021144:	181b      	adds	r3, r3, r0
 8021146:	106d      	asrs	r5, r5, #1
 8021148:	42ab      	cmp	r3, r5
 802114a:	d900      	bls.n	802114e <__ssputs_r+0x3e>
 802114c:	001d      	movs	r5, r3
 802114e:	0552      	lsls	r2, r2, #21
 8021150:	d528      	bpl.n	80211a4 <__ssputs_r+0x94>
 8021152:	0029      	movs	r1, r5
 8021154:	9802      	ldr	r0, [sp, #8]
 8021156:	f7ff fa61 	bl	802061c <_malloc_r>
 802115a:	1e06      	subs	r6, r0, #0
 802115c:	d02c      	beq.n	80211b8 <__ssputs_r+0xa8>
 802115e:	9a01      	ldr	r2, [sp, #4]
 8021160:	6921      	ldr	r1, [r4, #16]
 8021162:	f7fd fff9 	bl	801f158 <memcpy>
 8021166:	89a2      	ldrh	r2, [r4, #12]
 8021168:	4b18      	ldr	r3, [pc, #96]	@ (80211cc <__ssputs_r+0xbc>)
 802116a:	401a      	ands	r2, r3
 802116c:	2380      	movs	r3, #128	@ 0x80
 802116e:	4313      	orrs	r3, r2
 8021170:	81a3      	strh	r3, [r4, #12]
 8021172:	9b01      	ldr	r3, [sp, #4]
 8021174:	6126      	str	r6, [r4, #16]
 8021176:	18f6      	adds	r6, r6, r3
 8021178:	6026      	str	r6, [r4, #0]
 802117a:	003e      	movs	r6, r7
 802117c:	6165      	str	r5, [r4, #20]
 802117e:	1aed      	subs	r5, r5, r3
 8021180:	60a5      	str	r5, [r4, #8]
 8021182:	42be      	cmp	r6, r7
 8021184:	d900      	bls.n	8021188 <__ssputs_r+0x78>
 8021186:	003e      	movs	r6, r7
 8021188:	0032      	movs	r2, r6
 802118a:	9903      	ldr	r1, [sp, #12]
 802118c:	6820      	ldr	r0, [r4, #0]
 802118e:	f000 fb7e 	bl	802188e <memmove>
 8021192:	2000      	movs	r0, #0
 8021194:	68a3      	ldr	r3, [r4, #8]
 8021196:	1b9b      	subs	r3, r3, r6
 8021198:	60a3      	str	r3, [r4, #8]
 802119a:	6823      	ldr	r3, [r4, #0]
 802119c:	199b      	adds	r3, r3, r6
 802119e:	6023      	str	r3, [r4, #0]
 80211a0:	b005      	add	sp, #20
 80211a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80211a4:	002a      	movs	r2, r5
 80211a6:	9802      	ldr	r0, [sp, #8]
 80211a8:	f000 fc05 	bl	80219b6 <_realloc_r>
 80211ac:	1e06      	subs	r6, r0, #0
 80211ae:	d1e0      	bne.n	8021172 <__ssputs_r+0x62>
 80211b0:	6921      	ldr	r1, [r4, #16]
 80211b2:	9802      	ldr	r0, [sp, #8]
 80211b4:	f7fe fe62 	bl	801fe7c <_free_r>
 80211b8:	230c      	movs	r3, #12
 80211ba:	2001      	movs	r0, #1
 80211bc:	9a02      	ldr	r2, [sp, #8]
 80211be:	4240      	negs	r0, r0
 80211c0:	6013      	str	r3, [r2, #0]
 80211c2:	89a2      	ldrh	r2, [r4, #12]
 80211c4:	3334      	adds	r3, #52	@ 0x34
 80211c6:	4313      	orrs	r3, r2
 80211c8:	81a3      	strh	r3, [r4, #12]
 80211ca:	e7e9      	b.n	80211a0 <__ssputs_r+0x90>
 80211cc:	fffffb7f 	.word	0xfffffb7f

080211d0 <_svfiprintf_r>:
 80211d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211d2:	b0a1      	sub	sp, #132	@ 0x84
 80211d4:	9003      	str	r0, [sp, #12]
 80211d6:	001d      	movs	r5, r3
 80211d8:	898b      	ldrh	r3, [r1, #12]
 80211da:	000f      	movs	r7, r1
 80211dc:	0016      	movs	r6, r2
 80211de:	061b      	lsls	r3, r3, #24
 80211e0:	d511      	bpl.n	8021206 <_svfiprintf_r+0x36>
 80211e2:	690b      	ldr	r3, [r1, #16]
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d10e      	bne.n	8021206 <_svfiprintf_r+0x36>
 80211e8:	2140      	movs	r1, #64	@ 0x40
 80211ea:	f7ff fa17 	bl	802061c <_malloc_r>
 80211ee:	6038      	str	r0, [r7, #0]
 80211f0:	6138      	str	r0, [r7, #16]
 80211f2:	2800      	cmp	r0, #0
 80211f4:	d105      	bne.n	8021202 <_svfiprintf_r+0x32>
 80211f6:	230c      	movs	r3, #12
 80211f8:	9a03      	ldr	r2, [sp, #12]
 80211fa:	6013      	str	r3, [r2, #0]
 80211fc:	2001      	movs	r0, #1
 80211fe:	4240      	negs	r0, r0
 8021200:	e0cf      	b.n	80213a2 <_svfiprintf_r+0x1d2>
 8021202:	2340      	movs	r3, #64	@ 0x40
 8021204:	617b      	str	r3, [r7, #20]
 8021206:	2300      	movs	r3, #0
 8021208:	ac08      	add	r4, sp, #32
 802120a:	6163      	str	r3, [r4, #20]
 802120c:	3320      	adds	r3, #32
 802120e:	7663      	strb	r3, [r4, #25]
 8021210:	3310      	adds	r3, #16
 8021212:	76a3      	strb	r3, [r4, #26]
 8021214:	9507      	str	r5, [sp, #28]
 8021216:	0035      	movs	r5, r6
 8021218:	782b      	ldrb	r3, [r5, #0]
 802121a:	2b00      	cmp	r3, #0
 802121c:	d001      	beq.n	8021222 <_svfiprintf_r+0x52>
 802121e:	2b25      	cmp	r3, #37	@ 0x25
 8021220:	d148      	bne.n	80212b4 <_svfiprintf_r+0xe4>
 8021222:	1bab      	subs	r3, r5, r6
 8021224:	9305      	str	r3, [sp, #20]
 8021226:	42b5      	cmp	r5, r6
 8021228:	d00b      	beq.n	8021242 <_svfiprintf_r+0x72>
 802122a:	0032      	movs	r2, r6
 802122c:	0039      	movs	r1, r7
 802122e:	9803      	ldr	r0, [sp, #12]
 8021230:	f7ff ff6e 	bl	8021110 <__ssputs_r>
 8021234:	3001      	adds	r0, #1
 8021236:	d100      	bne.n	802123a <_svfiprintf_r+0x6a>
 8021238:	e0ae      	b.n	8021398 <_svfiprintf_r+0x1c8>
 802123a:	6963      	ldr	r3, [r4, #20]
 802123c:	9a05      	ldr	r2, [sp, #20]
 802123e:	189b      	adds	r3, r3, r2
 8021240:	6163      	str	r3, [r4, #20]
 8021242:	782b      	ldrb	r3, [r5, #0]
 8021244:	2b00      	cmp	r3, #0
 8021246:	d100      	bne.n	802124a <_svfiprintf_r+0x7a>
 8021248:	e0a6      	b.n	8021398 <_svfiprintf_r+0x1c8>
 802124a:	2201      	movs	r2, #1
 802124c:	2300      	movs	r3, #0
 802124e:	4252      	negs	r2, r2
 8021250:	6062      	str	r2, [r4, #4]
 8021252:	a904      	add	r1, sp, #16
 8021254:	3254      	adds	r2, #84	@ 0x54
 8021256:	1852      	adds	r2, r2, r1
 8021258:	1c6e      	adds	r6, r5, #1
 802125a:	6023      	str	r3, [r4, #0]
 802125c:	60e3      	str	r3, [r4, #12]
 802125e:	60a3      	str	r3, [r4, #8]
 8021260:	7013      	strb	r3, [r2, #0]
 8021262:	65a3      	str	r3, [r4, #88]	@ 0x58
 8021264:	4b54      	ldr	r3, [pc, #336]	@ (80213b8 <_svfiprintf_r+0x1e8>)
 8021266:	2205      	movs	r2, #5
 8021268:	0018      	movs	r0, r3
 802126a:	7831      	ldrb	r1, [r6, #0]
 802126c:	9305      	str	r3, [sp, #20]
 802126e:	f7fd ff68 	bl	801f142 <memchr>
 8021272:	1c75      	adds	r5, r6, #1
 8021274:	2800      	cmp	r0, #0
 8021276:	d11f      	bne.n	80212b8 <_svfiprintf_r+0xe8>
 8021278:	6822      	ldr	r2, [r4, #0]
 802127a:	06d3      	lsls	r3, r2, #27
 802127c:	d504      	bpl.n	8021288 <_svfiprintf_r+0xb8>
 802127e:	2353      	movs	r3, #83	@ 0x53
 8021280:	a904      	add	r1, sp, #16
 8021282:	185b      	adds	r3, r3, r1
 8021284:	2120      	movs	r1, #32
 8021286:	7019      	strb	r1, [r3, #0]
 8021288:	0713      	lsls	r3, r2, #28
 802128a:	d504      	bpl.n	8021296 <_svfiprintf_r+0xc6>
 802128c:	2353      	movs	r3, #83	@ 0x53
 802128e:	a904      	add	r1, sp, #16
 8021290:	185b      	adds	r3, r3, r1
 8021292:	212b      	movs	r1, #43	@ 0x2b
 8021294:	7019      	strb	r1, [r3, #0]
 8021296:	7833      	ldrb	r3, [r6, #0]
 8021298:	2b2a      	cmp	r3, #42	@ 0x2a
 802129a:	d016      	beq.n	80212ca <_svfiprintf_r+0xfa>
 802129c:	0035      	movs	r5, r6
 802129e:	2100      	movs	r1, #0
 80212a0:	200a      	movs	r0, #10
 80212a2:	68e3      	ldr	r3, [r4, #12]
 80212a4:	782a      	ldrb	r2, [r5, #0]
 80212a6:	1c6e      	adds	r6, r5, #1
 80212a8:	3a30      	subs	r2, #48	@ 0x30
 80212aa:	2a09      	cmp	r2, #9
 80212ac:	d950      	bls.n	8021350 <_svfiprintf_r+0x180>
 80212ae:	2900      	cmp	r1, #0
 80212b0:	d111      	bne.n	80212d6 <_svfiprintf_r+0x106>
 80212b2:	e017      	b.n	80212e4 <_svfiprintf_r+0x114>
 80212b4:	3501      	adds	r5, #1
 80212b6:	e7af      	b.n	8021218 <_svfiprintf_r+0x48>
 80212b8:	9b05      	ldr	r3, [sp, #20]
 80212ba:	6822      	ldr	r2, [r4, #0]
 80212bc:	1ac0      	subs	r0, r0, r3
 80212be:	2301      	movs	r3, #1
 80212c0:	4083      	lsls	r3, r0
 80212c2:	4313      	orrs	r3, r2
 80212c4:	002e      	movs	r6, r5
 80212c6:	6023      	str	r3, [r4, #0]
 80212c8:	e7cc      	b.n	8021264 <_svfiprintf_r+0x94>
 80212ca:	9b07      	ldr	r3, [sp, #28]
 80212cc:	1d19      	adds	r1, r3, #4
 80212ce:	681b      	ldr	r3, [r3, #0]
 80212d0:	9107      	str	r1, [sp, #28]
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	db01      	blt.n	80212da <_svfiprintf_r+0x10a>
 80212d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80212d8:	e004      	b.n	80212e4 <_svfiprintf_r+0x114>
 80212da:	425b      	negs	r3, r3
 80212dc:	60e3      	str	r3, [r4, #12]
 80212de:	2302      	movs	r3, #2
 80212e0:	4313      	orrs	r3, r2
 80212e2:	6023      	str	r3, [r4, #0]
 80212e4:	782b      	ldrb	r3, [r5, #0]
 80212e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80212e8:	d10c      	bne.n	8021304 <_svfiprintf_r+0x134>
 80212ea:	786b      	ldrb	r3, [r5, #1]
 80212ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80212ee:	d134      	bne.n	802135a <_svfiprintf_r+0x18a>
 80212f0:	9b07      	ldr	r3, [sp, #28]
 80212f2:	3502      	adds	r5, #2
 80212f4:	1d1a      	adds	r2, r3, #4
 80212f6:	681b      	ldr	r3, [r3, #0]
 80212f8:	9207      	str	r2, [sp, #28]
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	da01      	bge.n	8021302 <_svfiprintf_r+0x132>
 80212fe:	2301      	movs	r3, #1
 8021300:	425b      	negs	r3, r3
 8021302:	9309      	str	r3, [sp, #36]	@ 0x24
 8021304:	4e2d      	ldr	r6, [pc, #180]	@ (80213bc <_svfiprintf_r+0x1ec>)
 8021306:	2203      	movs	r2, #3
 8021308:	0030      	movs	r0, r6
 802130a:	7829      	ldrb	r1, [r5, #0]
 802130c:	f7fd ff19 	bl	801f142 <memchr>
 8021310:	2800      	cmp	r0, #0
 8021312:	d006      	beq.n	8021322 <_svfiprintf_r+0x152>
 8021314:	2340      	movs	r3, #64	@ 0x40
 8021316:	1b80      	subs	r0, r0, r6
 8021318:	4083      	lsls	r3, r0
 802131a:	6822      	ldr	r2, [r4, #0]
 802131c:	3501      	adds	r5, #1
 802131e:	4313      	orrs	r3, r2
 8021320:	6023      	str	r3, [r4, #0]
 8021322:	7829      	ldrb	r1, [r5, #0]
 8021324:	2206      	movs	r2, #6
 8021326:	4826      	ldr	r0, [pc, #152]	@ (80213c0 <_svfiprintf_r+0x1f0>)
 8021328:	1c6e      	adds	r6, r5, #1
 802132a:	7621      	strb	r1, [r4, #24]
 802132c:	f7fd ff09 	bl	801f142 <memchr>
 8021330:	2800      	cmp	r0, #0
 8021332:	d038      	beq.n	80213a6 <_svfiprintf_r+0x1d6>
 8021334:	4b23      	ldr	r3, [pc, #140]	@ (80213c4 <_svfiprintf_r+0x1f4>)
 8021336:	2b00      	cmp	r3, #0
 8021338:	d122      	bne.n	8021380 <_svfiprintf_r+0x1b0>
 802133a:	2207      	movs	r2, #7
 802133c:	9b07      	ldr	r3, [sp, #28]
 802133e:	3307      	adds	r3, #7
 8021340:	4393      	bics	r3, r2
 8021342:	3308      	adds	r3, #8
 8021344:	9307      	str	r3, [sp, #28]
 8021346:	6963      	ldr	r3, [r4, #20]
 8021348:	9a04      	ldr	r2, [sp, #16]
 802134a:	189b      	adds	r3, r3, r2
 802134c:	6163      	str	r3, [r4, #20]
 802134e:	e762      	b.n	8021216 <_svfiprintf_r+0x46>
 8021350:	4343      	muls	r3, r0
 8021352:	0035      	movs	r5, r6
 8021354:	2101      	movs	r1, #1
 8021356:	189b      	adds	r3, r3, r2
 8021358:	e7a4      	b.n	80212a4 <_svfiprintf_r+0xd4>
 802135a:	2300      	movs	r3, #0
 802135c:	200a      	movs	r0, #10
 802135e:	0019      	movs	r1, r3
 8021360:	3501      	adds	r5, #1
 8021362:	6063      	str	r3, [r4, #4]
 8021364:	782a      	ldrb	r2, [r5, #0]
 8021366:	1c6e      	adds	r6, r5, #1
 8021368:	3a30      	subs	r2, #48	@ 0x30
 802136a:	2a09      	cmp	r2, #9
 802136c:	d903      	bls.n	8021376 <_svfiprintf_r+0x1a6>
 802136e:	2b00      	cmp	r3, #0
 8021370:	d0c8      	beq.n	8021304 <_svfiprintf_r+0x134>
 8021372:	9109      	str	r1, [sp, #36]	@ 0x24
 8021374:	e7c6      	b.n	8021304 <_svfiprintf_r+0x134>
 8021376:	4341      	muls	r1, r0
 8021378:	0035      	movs	r5, r6
 802137a:	2301      	movs	r3, #1
 802137c:	1889      	adds	r1, r1, r2
 802137e:	e7f1      	b.n	8021364 <_svfiprintf_r+0x194>
 8021380:	aa07      	add	r2, sp, #28
 8021382:	9200      	str	r2, [sp, #0]
 8021384:	0021      	movs	r1, r4
 8021386:	003a      	movs	r2, r7
 8021388:	4b0f      	ldr	r3, [pc, #60]	@ (80213c8 <_svfiprintf_r+0x1f8>)
 802138a:	9803      	ldr	r0, [sp, #12]
 802138c:	f7fc ffd4 	bl	801e338 <_printf_float>
 8021390:	9004      	str	r0, [sp, #16]
 8021392:	9b04      	ldr	r3, [sp, #16]
 8021394:	3301      	adds	r3, #1
 8021396:	d1d6      	bne.n	8021346 <_svfiprintf_r+0x176>
 8021398:	89bb      	ldrh	r3, [r7, #12]
 802139a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802139c:	065b      	lsls	r3, r3, #25
 802139e:	d500      	bpl.n	80213a2 <_svfiprintf_r+0x1d2>
 80213a0:	e72c      	b.n	80211fc <_svfiprintf_r+0x2c>
 80213a2:	b021      	add	sp, #132	@ 0x84
 80213a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213a6:	aa07      	add	r2, sp, #28
 80213a8:	9200      	str	r2, [sp, #0]
 80213aa:	0021      	movs	r1, r4
 80213ac:	003a      	movs	r2, r7
 80213ae:	4b06      	ldr	r3, [pc, #24]	@ (80213c8 <_svfiprintf_r+0x1f8>)
 80213b0:	9803      	ldr	r0, [sp, #12]
 80213b2:	f7fd fa6f 	bl	801e894 <_printf_i>
 80213b6:	e7eb      	b.n	8021390 <_svfiprintf_r+0x1c0>
 80213b8:	080245b8 	.word	0x080245b8
 80213bc:	080245be 	.word	0x080245be
 80213c0:	080245c2 	.word	0x080245c2
 80213c4:	0801e339 	.word	0x0801e339
 80213c8:	08021111 	.word	0x08021111

080213cc <__sfputc_r>:
 80213cc:	6893      	ldr	r3, [r2, #8]
 80213ce:	b510      	push	{r4, lr}
 80213d0:	3b01      	subs	r3, #1
 80213d2:	6093      	str	r3, [r2, #8]
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	da04      	bge.n	80213e2 <__sfputc_r+0x16>
 80213d8:	6994      	ldr	r4, [r2, #24]
 80213da:	42a3      	cmp	r3, r4
 80213dc:	db07      	blt.n	80213ee <__sfputc_r+0x22>
 80213de:	290a      	cmp	r1, #10
 80213e0:	d005      	beq.n	80213ee <__sfputc_r+0x22>
 80213e2:	6813      	ldr	r3, [r2, #0]
 80213e4:	1c58      	adds	r0, r3, #1
 80213e6:	6010      	str	r0, [r2, #0]
 80213e8:	7019      	strb	r1, [r3, #0]
 80213ea:	0008      	movs	r0, r1
 80213ec:	bd10      	pop	{r4, pc}
 80213ee:	f7fd fd37 	bl	801ee60 <__swbuf_r>
 80213f2:	0001      	movs	r1, r0
 80213f4:	e7f9      	b.n	80213ea <__sfputc_r+0x1e>

080213f6 <__sfputs_r>:
 80213f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213f8:	0006      	movs	r6, r0
 80213fa:	000f      	movs	r7, r1
 80213fc:	0014      	movs	r4, r2
 80213fe:	18d5      	adds	r5, r2, r3
 8021400:	42ac      	cmp	r4, r5
 8021402:	d101      	bne.n	8021408 <__sfputs_r+0x12>
 8021404:	2000      	movs	r0, #0
 8021406:	e007      	b.n	8021418 <__sfputs_r+0x22>
 8021408:	7821      	ldrb	r1, [r4, #0]
 802140a:	003a      	movs	r2, r7
 802140c:	0030      	movs	r0, r6
 802140e:	f7ff ffdd 	bl	80213cc <__sfputc_r>
 8021412:	3401      	adds	r4, #1
 8021414:	1c43      	adds	r3, r0, #1
 8021416:	d1f3      	bne.n	8021400 <__sfputs_r+0xa>
 8021418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802141c <_vfiprintf_r>:
 802141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802141e:	b0a1      	sub	sp, #132	@ 0x84
 8021420:	000f      	movs	r7, r1
 8021422:	0015      	movs	r5, r2
 8021424:	001e      	movs	r6, r3
 8021426:	9003      	str	r0, [sp, #12]
 8021428:	2800      	cmp	r0, #0
 802142a:	d004      	beq.n	8021436 <_vfiprintf_r+0x1a>
 802142c:	6a03      	ldr	r3, [r0, #32]
 802142e:	2b00      	cmp	r3, #0
 8021430:	d101      	bne.n	8021436 <_vfiprintf_r+0x1a>
 8021432:	f7fd fbcd 	bl	801ebd0 <__sinit>
 8021436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021438:	07db      	lsls	r3, r3, #31
 802143a:	d405      	bmi.n	8021448 <_vfiprintf_r+0x2c>
 802143c:	89bb      	ldrh	r3, [r7, #12]
 802143e:	059b      	lsls	r3, r3, #22
 8021440:	d402      	bmi.n	8021448 <_vfiprintf_r+0x2c>
 8021442:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021444:	f7fd fe7b 	bl	801f13e <__retarget_lock_acquire_recursive>
 8021448:	89bb      	ldrh	r3, [r7, #12]
 802144a:	071b      	lsls	r3, r3, #28
 802144c:	d502      	bpl.n	8021454 <_vfiprintf_r+0x38>
 802144e:	693b      	ldr	r3, [r7, #16]
 8021450:	2b00      	cmp	r3, #0
 8021452:	d113      	bne.n	802147c <_vfiprintf_r+0x60>
 8021454:	0039      	movs	r1, r7
 8021456:	9803      	ldr	r0, [sp, #12]
 8021458:	f7fd fd44 	bl	801eee4 <__swsetup_r>
 802145c:	2800      	cmp	r0, #0
 802145e:	d00d      	beq.n	802147c <_vfiprintf_r+0x60>
 8021460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021462:	07db      	lsls	r3, r3, #31
 8021464:	d503      	bpl.n	802146e <_vfiprintf_r+0x52>
 8021466:	2001      	movs	r0, #1
 8021468:	4240      	negs	r0, r0
 802146a:	b021      	add	sp, #132	@ 0x84
 802146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802146e:	89bb      	ldrh	r3, [r7, #12]
 8021470:	059b      	lsls	r3, r3, #22
 8021472:	d4f8      	bmi.n	8021466 <_vfiprintf_r+0x4a>
 8021474:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8021476:	f7fd fe63 	bl	801f140 <__retarget_lock_release_recursive>
 802147a:	e7f4      	b.n	8021466 <_vfiprintf_r+0x4a>
 802147c:	2300      	movs	r3, #0
 802147e:	ac08      	add	r4, sp, #32
 8021480:	6163      	str	r3, [r4, #20]
 8021482:	3320      	adds	r3, #32
 8021484:	7663      	strb	r3, [r4, #25]
 8021486:	3310      	adds	r3, #16
 8021488:	76a3      	strb	r3, [r4, #26]
 802148a:	9607      	str	r6, [sp, #28]
 802148c:	002e      	movs	r6, r5
 802148e:	7833      	ldrb	r3, [r6, #0]
 8021490:	2b00      	cmp	r3, #0
 8021492:	d001      	beq.n	8021498 <_vfiprintf_r+0x7c>
 8021494:	2b25      	cmp	r3, #37	@ 0x25
 8021496:	d148      	bne.n	802152a <_vfiprintf_r+0x10e>
 8021498:	1b73      	subs	r3, r6, r5
 802149a:	9305      	str	r3, [sp, #20]
 802149c:	42ae      	cmp	r6, r5
 802149e:	d00b      	beq.n	80214b8 <_vfiprintf_r+0x9c>
 80214a0:	002a      	movs	r2, r5
 80214a2:	0039      	movs	r1, r7
 80214a4:	9803      	ldr	r0, [sp, #12]
 80214a6:	f7ff ffa6 	bl	80213f6 <__sfputs_r>
 80214aa:	3001      	adds	r0, #1
 80214ac:	d100      	bne.n	80214b0 <_vfiprintf_r+0x94>
 80214ae:	e0ae      	b.n	802160e <_vfiprintf_r+0x1f2>
 80214b0:	6963      	ldr	r3, [r4, #20]
 80214b2:	9a05      	ldr	r2, [sp, #20]
 80214b4:	189b      	adds	r3, r3, r2
 80214b6:	6163      	str	r3, [r4, #20]
 80214b8:	7833      	ldrb	r3, [r6, #0]
 80214ba:	2b00      	cmp	r3, #0
 80214bc:	d100      	bne.n	80214c0 <_vfiprintf_r+0xa4>
 80214be:	e0a6      	b.n	802160e <_vfiprintf_r+0x1f2>
 80214c0:	2201      	movs	r2, #1
 80214c2:	2300      	movs	r3, #0
 80214c4:	4252      	negs	r2, r2
 80214c6:	6062      	str	r2, [r4, #4]
 80214c8:	a904      	add	r1, sp, #16
 80214ca:	3254      	adds	r2, #84	@ 0x54
 80214cc:	1852      	adds	r2, r2, r1
 80214ce:	1c75      	adds	r5, r6, #1
 80214d0:	6023      	str	r3, [r4, #0]
 80214d2:	60e3      	str	r3, [r4, #12]
 80214d4:	60a3      	str	r3, [r4, #8]
 80214d6:	7013      	strb	r3, [r2, #0]
 80214d8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80214da:	4b59      	ldr	r3, [pc, #356]	@ (8021640 <_vfiprintf_r+0x224>)
 80214dc:	2205      	movs	r2, #5
 80214de:	0018      	movs	r0, r3
 80214e0:	7829      	ldrb	r1, [r5, #0]
 80214e2:	9305      	str	r3, [sp, #20]
 80214e4:	f7fd fe2d 	bl	801f142 <memchr>
 80214e8:	1c6e      	adds	r6, r5, #1
 80214ea:	2800      	cmp	r0, #0
 80214ec:	d11f      	bne.n	802152e <_vfiprintf_r+0x112>
 80214ee:	6822      	ldr	r2, [r4, #0]
 80214f0:	06d3      	lsls	r3, r2, #27
 80214f2:	d504      	bpl.n	80214fe <_vfiprintf_r+0xe2>
 80214f4:	2353      	movs	r3, #83	@ 0x53
 80214f6:	a904      	add	r1, sp, #16
 80214f8:	185b      	adds	r3, r3, r1
 80214fa:	2120      	movs	r1, #32
 80214fc:	7019      	strb	r1, [r3, #0]
 80214fe:	0713      	lsls	r3, r2, #28
 8021500:	d504      	bpl.n	802150c <_vfiprintf_r+0xf0>
 8021502:	2353      	movs	r3, #83	@ 0x53
 8021504:	a904      	add	r1, sp, #16
 8021506:	185b      	adds	r3, r3, r1
 8021508:	212b      	movs	r1, #43	@ 0x2b
 802150a:	7019      	strb	r1, [r3, #0]
 802150c:	782b      	ldrb	r3, [r5, #0]
 802150e:	2b2a      	cmp	r3, #42	@ 0x2a
 8021510:	d016      	beq.n	8021540 <_vfiprintf_r+0x124>
 8021512:	002e      	movs	r6, r5
 8021514:	2100      	movs	r1, #0
 8021516:	200a      	movs	r0, #10
 8021518:	68e3      	ldr	r3, [r4, #12]
 802151a:	7832      	ldrb	r2, [r6, #0]
 802151c:	1c75      	adds	r5, r6, #1
 802151e:	3a30      	subs	r2, #48	@ 0x30
 8021520:	2a09      	cmp	r2, #9
 8021522:	d950      	bls.n	80215c6 <_vfiprintf_r+0x1aa>
 8021524:	2900      	cmp	r1, #0
 8021526:	d111      	bne.n	802154c <_vfiprintf_r+0x130>
 8021528:	e017      	b.n	802155a <_vfiprintf_r+0x13e>
 802152a:	3601      	adds	r6, #1
 802152c:	e7af      	b.n	802148e <_vfiprintf_r+0x72>
 802152e:	9b05      	ldr	r3, [sp, #20]
 8021530:	6822      	ldr	r2, [r4, #0]
 8021532:	1ac0      	subs	r0, r0, r3
 8021534:	2301      	movs	r3, #1
 8021536:	4083      	lsls	r3, r0
 8021538:	4313      	orrs	r3, r2
 802153a:	0035      	movs	r5, r6
 802153c:	6023      	str	r3, [r4, #0]
 802153e:	e7cc      	b.n	80214da <_vfiprintf_r+0xbe>
 8021540:	9b07      	ldr	r3, [sp, #28]
 8021542:	1d19      	adds	r1, r3, #4
 8021544:	681b      	ldr	r3, [r3, #0]
 8021546:	9107      	str	r1, [sp, #28]
 8021548:	2b00      	cmp	r3, #0
 802154a:	db01      	blt.n	8021550 <_vfiprintf_r+0x134>
 802154c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802154e:	e004      	b.n	802155a <_vfiprintf_r+0x13e>
 8021550:	425b      	negs	r3, r3
 8021552:	60e3      	str	r3, [r4, #12]
 8021554:	2302      	movs	r3, #2
 8021556:	4313      	orrs	r3, r2
 8021558:	6023      	str	r3, [r4, #0]
 802155a:	7833      	ldrb	r3, [r6, #0]
 802155c:	2b2e      	cmp	r3, #46	@ 0x2e
 802155e:	d10c      	bne.n	802157a <_vfiprintf_r+0x15e>
 8021560:	7873      	ldrb	r3, [r6, #1]
 8021562:	2b2a      	cmp	r3, #42	@ 0x2a
 8021564:	d134      	bne.n	80215d0 <_vfiprintf_r+0x1b4>
 8021566:	9b07      	ldr	r3, [sp, #28]
 8021568:	3602      	adds	r6, #2
 802156a:	1d1a      	adds	r2, r3, #4
 802156c:	681b      	ldr	r3, [r3, #0]
 802156e:	9207      	str	r2, [sp, #28]
 8021570:	2b00      	cmp	r3, #0
 8021572:	da01      	bge.n	8021578 <_vfiprintf_r+0x15c>
 8021574:	2301      	movs	r3, #1
 8021576:	425b      	negs	r3, r3
 8021578:	9309      	str	r3, [sp, #36]	@ 0x24
 802157a:	4d32      	ldr	r5, [pc, #200]	@ (8021644 <_vfiprintf_r+0x228>)
 802157c:	2203      	movs	r2, #3
 802157e:	0028      	movs	r0, r5
 8021580:	7831      	ldrb	r1, [r6, #0]
 8021582:	f7fd fdde 	bl	801f142 <memchr>
 8021586:	2800      	cmp	r0, #0
 8021588:	d006      	beq.n	8021598 <_vfiprintf_r+0x17c>
 802158a:	2340      	movs	r3, #64	@ 0x40
 802158c:	1b40      	subs	r0, r0, r5
 802158e:	4083      	lsls	r3, r0
 8021590:	6822      	ldr	r2, [r4, #0]
 8021592:	3601      	adds	r6, #1
 8021594:	4313      	orrs	r3, r2
 8021596:	6023      	str	r3, [r4, #0]
 8021598:	7831      	ldrb	r1, [r6, #0]
 802159a:	2206      	movs	r2, #6
 802159c:	482a      	ldr	r0, [pc, #168]	@ (8021648 <_vfiprintf_r+0x22c>)
 802159e:	1c75      	adds	r5, r6, #1
 80215a0:	7621      	strb	r1, [r4, #24]
 80215a2:	f7fd fdce 	bl	801f142 <memchr>
 80215a6:	2800      	cmp	r0, #0
 80215a8:	d040      	beq.n	802162c <_vfiprintf_r+0x210>
 80215aa:	4b28      	ldr	r3, [pc, #160]	@ (802164c <_vfiprintf_r+0x230>)
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d122      	bne.n	80215f6 <_vfiprintf_r+0x1da>
 80215b0:	2207      	movs	r2, #7
 80215b2:	9b07      	ldr	r3, [sp, #28]
 80215b4:	3307      	adds	r3, #7
 80215b6:	4393      	bics	r3, r2
 80215b8:	3308      	adds	r3, #8
 80215ba:	9307      	str	r3, [sp, #28]
 80215bc:	6963      	ldr	r3, [r4, #20]
 80215be:	9a04      	ldr	r2, [sp, #16]
 80215c0:	189b      	adds	r3, r3, r2
 80215c2:	6163      	str	r3, [r4, #20]
 80215c4:	e762      	b.n	802148c <_vfiprintf_r+0x70>
 80215c6:	4343      	muls	r3, r0
 80215c8:	002e      	movs	r6, r5
 80215ca:	2101      	movs	r1, #1
 80215cc:	189b      	adds	r3, r3, r2
 80215ce:	e7a4      	b.n	802151a <_vfiprintf_r+0xfe>
 80215d0:	2300      	movs	r3, #0
 80215d2:	200a      	movs	r0, #10
 80215d4:	0019      	movs	r1, r3
 80215d6:	3601      	adds	r6, #1
 80215d8:	6063      	str	r3, [r4, #4]
 80215da:	7832      	ldrb	r2, [r6, #0]
 80215dc:	1c75      	adds	r5, r6, #1
 80215de:	3a30      	subs	r2, #48	@ 0x30
 80215e0:	2a09      	cmp	r2, #9
 80215e2:	d903      	bls.n	80215ec <_vfiprintf_r+0x1d0>
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d0c8      	beq.n	802157a <_vfiprintf_r+0x15e>
 80215e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80215ea:	e7c6      	b.n	802157a <_vfiprintf_r+0x15e>
 80215ec:	4341      	muls	r1, r0
 80215ee:	002e      	movs	r6, r5
 80215f0:	2301      	movs	r3, #1
 80215f2:	1889      	adds	r1, r1, r2
 80215f4:	e7f1      	b.n	80215da <_vfiprintf_r+0x1be>
 80215f6:	aa07      	add	r2, sp, #28
 80215f8:	9200      	str	r2, [sp, #0]
 80215fa:	0021      	movs	r1, r4
 80215fc:	003a      	movs	r2, r7
 80215fe:	4b14      	ldr	r3, [pc, #80]	@ (8021650 <_vfiprintf_r+0x234>)
 8021600:	9803      	ldr	r0, [sp, #12]
 8021602:	f7fc fe99 	bl	801e338 <_printf_float>
 8021606:	9004      	str	r0, [sp, #16]
 8021608:	9b04      	ldr	r3, [sp, #16]
 802160a:	3301      	adds	r3, #1
 802160c:	d1d6      	bne.n	80215bc <_vfiprintf_r+0x1a0>
 802160e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8021610:	07db      	lsls	r3, r3, #31
 8021612:	d405      	bmi.n	8021620 <_vfiprintf_r+0x204>
 8021614:	89bb      	ldrh	r3, [r7, #12]
 8021616:	059b      	lsls	r3, r3, #22
 8021618:	d402      	bmi.n	8021620 <_vfiprintf_r+0x204>
 802161a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 802161c:	f7fd fd90 	bl	801f140 <__retarget_lock_release_recursive>
 8021620:	89bb      	ldrh	r3, [r7, #12]
 8021622:	065b      	lsls	r3, r3, #25
 8021624:	d500      	bpl.n	8021628 <_vfiprintf_r+0x20c>
 8021626:	e71e      	b.n	8021466 <_vfiprintf_r+0x4a>
 8021628:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802162a:	e71e      	b.n	802146a <_vfiprintf_r+0x4e>
 802162c:	aa07      	add	r2, sp, #28
 802162e:	9200      	str	r2, [sp, #0]
 8021630:	0021      	movs	r1, r4
 8021632:	003a      	movs	r2, r7
 8021634:	4b06      	ldr	r3, [pc, #24]	@ (8021650 <_vfiprintf_r+0x234>)
 8021636:	9803      	ldr	r0, [sp, #12]
 8021638:	f7fd f92c 	bl	801e894 <_printf_i>
 802163c:	e7e3      	b.n	8021606 <_vfiprintf_r+0x1ea>
 802163e:	46c0      	nop			@ (mov r8, r8)
 8021640:	080245b8 	.word	0x080245b8
 8021644:	080245be 	.word	0x080245be
 8021648:	080245c2 	.word	0x080245c2
 802164c:	0801e339 	.word	0x0801e339
 8021650:	080213f7 	.word	0x080213f7

08021654 <__sflush_r>:
 8021654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021656:	220c      	movs	r2, #12
 8021658:	5e8b      	ldrsh	r3, [r1, r2]
 802165a:	0005      	movs	r5, r0
 802165c:	000c      	movs	r4, r1
 802165e:	071a      	lsls	r2, r3, #28
 8021660:	d456      	bmi.n	8021710 <__sflush_r+0xbc>
 8021662:	684a      	ldr	r2, [r1, #4]
 8021664:	2a00      	cmp	r2, #0
 8021666:	dc02      	bgt.n	802166e <__sflush_r+0x1a>
 8021668:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 802166a:	2a00      	cmp	r2, #0
 802166c:	dd4e      	ble.n	802170c <__sflush_r+0xb8>
 802166e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8021670:	2f00      	cmp	r7, #0
 8021672:	d04b      	beq.n	802170c <__sflush_r+0xb8>
 8021674:	2200      	movs	r2, #0
 8021676:	2080      	movs	r0, #128	@ 0x80
 8021678:	682e      	ldr	r6, [r5, #0]
 802167a:	602a      	str	r2, [r5, #0]
 802167c:	001a      	movs	r2, r3
 802167e:	0140      	lsls	r0, r0, #5
 8021680:	6a21      	ldr	r1, [r4, #32]
 8021682:	4002      	ands	r2, r0
 8021684:	4203      	tst	r3, r0
 8021686:	d033      	beq.n	80216f0 <__sflush_r+0x9c>
 8021688:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802168a:	89a3      	ldrh	r3, [r4, #12]
 802168c:	075b      	lsls	r3, r3, #29
 802168e:	d506      	bpl.n	802169e <__sflush_r+0x4a>
 8021690:	6863      	ldr	r3, [r4, #4]
 8021692:	1ad2      	subs	r2, r2, r3
 8021694:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021696:	2b00      	cmp	r3, #0
 8021698:	d001      	beq.n	802169e <__sflush_r+0x4a>
 802169a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802169c:	1ad2      	subs	r2, r2, r3
 802169e:	2300      	movs	r3, #0
 80216a0:	0028      	movs	r0, r5
 80216a2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80216a4:	6a21      	ldr	r1, [r4, #32]
 80216a6:	47b8      	blx	r7
 80216a8:	89a2      	ldrh	r2, [r4, #12]
 80216aa:	1c43      	adds	r3, r0, #1
 80216ac:	d106      	bne.n	80216bc <__sflush_r+0x68>
 80216ae:	6829      	ldr	r1, [r5, #0]
 80216b0:	291d      	cmp	r1, #29
 80216b2:	d846      	bhi.n	8021742 <__sflush_r+0xee>
 80216b4:	4b29      	ldr	r3, [pc, #164]	@ (802175c <__sflush_r+0x108>)
 80216b6:	410b      	asrs	r3, r1
 80216b8:	07db      	lsls	r3, r3, #31
 80216ba:	d442      	bmi.n	8021742 <__sflush_r+0xee>
 80216bc:	2300      	movs	r3, #0
 80216be:	6063      	str	r3, [r4, #4]
 80216c0:	6923      	ldr	r3, [r4, #16]
 80216c2:	6023      	str	r3, [r4, #0]
 80216c4:	04d2      	lsls	r2, r2, #19
 80216c6:	d505      	bpl.n	80216d4 <__sflush_r+0x80>
 80216c8:	1c43      	adds	r3, r0, #1
 80216ca:	d102      	bne.n	80216d2 <__sflush_r+0x7e>
 80216cc:	682b      	ldr	r3, [r5, #0]
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d100      	bne.n	80216d4 <__sflush_r+0x80>
 80216d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80216d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80216d6:	602e      	str	r6, [r5, #0]
 80216d8:	2900      	cmp	r1, #0
 80216da:	d017      	beq.n	802170c <__sflush_r+0xb8>
 80216dc:	0023      	movs	r3, r4
 80216de:	3344      	adds	r3, #68	@ 0x44
 80216e0:	4299      	cmp	r1, r3
 80216e2:	d002      	beq.n	80216ea <__sflush_r+0x96>
 80216e4:	0028      	movs	r0, r5
 80216e6:	f7fe fbc9 	bl	801fe7c <_free_r>
 80216ea:	2300      	movs	r3, #0
 80216ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80216ee:	e00d      	b.n	802170c <__sflush_r+0xb8>
 80216f0:	2301      	movs	r3, #1
 80216f2:	0028      	movs	r0, r5
 80216f4:	47b8      	blx	r7
 80216f6:	0002      	movs	r2, r0
 80216f8:	1c43      	adds	r3, r0, #1
 80216fa:	d1c6      	bne.n	802168a <__sflush_r+0x36>
 80216fc:	682b      	ldr	r3, [r5, #0]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d0c3      	beq.n	802168a <__sflush_r+0x36>
 8021702:	2b1d      	cmp	r3, #29
 8021704:	d001      	beq.n	802170a <__sflush_r+0xb6>
 8021706:	2b16      	cmp	r3, #22
 8021708:	d11a      	bne.n	8021740 <__sflush_r+0xec>
 802170a:	602e      	str	r6, [r5, #0]
 802170c:	2000      	movs	r0, #0
 802170e:	e01e      	b.n	802174e <__sflush_r+0xfa>
 8021710:	690e      	ldr	r6, [r1, #16]
 8021712:	2e00      	cmp	r6, #0
 8021714:	d0fa      	beq.n	802170c <__sflush_r+0xb8>
 8021716:	680f      	ldr	r7, [r1, #0]
 8021718:	600e      	str	r6, [r1, #0]
 802171a:	1bba      	subs	r2, r7, r6
 802171c:	9201      	str	r2, [sp, #4]
 802171e:	2200      	movs	r2, #0
 8021720:	079b      	lsls	r3, r3, #30
 8021722:	d100      	bne.n	8021726 <__sflush_r+0xd2>
 8021724:	694a      	ldr	r2, [r1, #20]
 8021726:	60a2      	str	r2, [r4, #8]
 8021728:	9b01      	ldr	r3, [sp, #4]
 802172a:	2b00      	cmp	r3, #0
 802172c:	ddee      	ble.n	802170c <__sflush_r+0xb8>
 802172e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8021730:	0032      	movs	r2, r6
 8021732:	001f      	movs	r7, r3
 8021734:	0028      	movs	r0, r5
 8021736:	9b01      	ldr	r3, [sp, #4]
 8021738:	6a21      	ldr	r1, [r4, #32]
 802173a:	47b8      	blx	r7
 802173c:	2800      	cmp	r0, #0
 802173e:	dc07      	bgt.n	8021750 <__sflush_r+0xfc>
 8021740:	89a2      	ldrh	r2, [r4, #12]
 8021742:	2340      	movs	r3, #64	@ 0x40
 8021744:	2001      	movs	r0, #1
 8021746:	4313      	orrs	r3, r2
 8021748:	b21b      	sxth	r3, r3
 802174a:	81a3      	strh	r3, [r4, #12]
 802174c:	4240      	negs	r0, r0
 802174e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021750:	9b01      	ldr	r3, [sp, #4]
 8021752:	1836      	adds	r6, r6, r0
 8021754:	1a1b      	subs	r3, r3, r0
 8021756:	9301      	str	r3, [sp, #4]
 8021758:	e7e6      	b.n	8021728 <__sflush_r+0xd4>
 802175a:	46c0      	nop			@ (mov r8, r8)
 802175c:	dfbffffe 	.word	0xdfbffffe

08021760 <_fflush_r>:
 8021760:	690b      	ldr	r3, [r1, #16]
 8021762:	b570      	push	{r4, r5, r6, lr}
 8021764:	0005      	movs	r5, r0
 8021766:	000c      	movs	r4, r1
 8021768:	2b00      	cmp	r3, #0
 802176a:	d102      	bne.n	8021772 <_fflush_r+0x12>
 802176c:	2500      	movs	r5, #0
 802176e:	0028      	movs	r0, r5
 8021770:	bd70      	pop	{r4, r5, r6, pc}
 8021772:	2800      	cmp	r0, #0
 8021774:	d004      	beq.n	8021780 <_fflush_r+0x20>
 8021776:	6a03      	ldr	r3, [r0, #32]
 8021778:	2b00      	cmp	r3, #0
 802177a:	d101      	bne.n	8021780 <_fflush_r+0x20>
 802177c:	f7fd fa28 	bl	801ebd0 <__sinit>
 8021780:	220c      	movs	r2, #12
 8021782:	5ea3      	ldrsh	r3, [r4, r2]
 8021784:	2b00      	cmp	r3, #0
 8021786:	d0f1      	beq.n	802176c <_fflush_r+0xc>
 8021788:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802178a:	07d2      	lsls	r2, r2, #31
 802178c:	d404      	bmi.n	8021798 <_fflush_r+0x38>
 802178e:	059b      	lsls	r3, r3, #22
 8021790:	d402      	bmi.n	8021798 <_fflush_r+0x38>
 8021792:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021794:	f7fd fcd3 	bl	801f13e <__retarget_lock_acquire_recursive>
 8021798:	0028      	movs	r0, r5
 802179a:	0021      	movs	r1, r4
 802179c:	f7ff ff5a 	bl	8021654 <__sflush_r>
 80217a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80217a2:	0005      	movs	r5, r0
 80217a4:	07db      	lsls	r3, r3, #31
 80217a6:	d4e2      	bmi.n	802176e <_fflush_r+0xe>
 80217a8:	89a3      	ldrh	r3, [r4, #12]
 80217aa:	059b      	lsls	r3, r3, #22
 80217ac:	d4df      	bmi.n	802176e <_fflush_r+0xe>
 80217ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80217b0:	f7fd fcc6 	bl	801f140 <__retarget_lock_release_recursive>
 80217b4:	e7db      	b.n	802176e <_fflush_r+0xe>
	...

080217b8 <__swhatbuf_r>:
 80217b8:	b570      	push	{r4, r5, r6, lr}
 80217ba:	000e      	movs	r6, r1
 80217bc:	001d      	movs	r5, r3
 80217be:	230e      	movs	r3, #14
 80217c0:	5ec9      	ldrsh	r1, [r1, r3]
 80217c2:	0014      	movs	r4, r2
 80217c4:	b096      	sub	sp, #88	@ 0x58
 80217c6:	2900      	cmp	r1, #0
 80217c8:	da0c      	bge.n	80217e4 <__swhatbuf_r+0x2c>
 80217ca:	89b2      	ldrh	r2, [r6, #12]
 80217cc:	2380      	movs	r3, #128	@ 0x80
 80217ce:	0011      	movs	r1, r2
 80217d0:	4019      	ands	r1, r3
 80217d2:	421a      	tst	r2, r3
 80217d4:	d114      	bne.n	8021800 <__swhatbuf_r+0x48>
 80217d6:	2380      	movs	r3, #128	@ 0x80
 80217d8:	00db      	lsls	r3, r3, #3
 80217da:	2000      	movs	r0, #0
 80217dc:	6029      	str	r1, [r5, #0]
 80217de:	6023      	str	r3, [r4, #0]
 80217e0:	b016      	add	sp, #88	@ 0x58
 80217e2:	bd70      	pop	{r4, r5, r6, pc}
 80217e4:	466a      	mov	r2, sp
 80217e6:	f000 f865 	bl	80218b4 <_fstat_r>
 80217ea:	2800      	cmp	r0, #0
 80217ec:	dbed      	blt.n	80217ca <__swhatbuf_r+0x12>
 80217ee:	23f0      	movs	r3, #240	@ 0xf0
 80217f0:	9901      	ldr	r1, [sp, #4]
 80217f2:	021b      	lsls	r3, r3, #8
 80217f4:	4019      	ands	r1, r3
 80217f6:	4b04      	ldr	r3, [pc, #16]	@ (8021808 <__swhatbuf_r+0x50>)
 80217f8:	18c9      	adds	r1, r1, r3
 80217fa:	424b      	negs	r3, r1
 80217fc:	4159      	adcs	r1, r3
 80217fe:	e7ea      	b.n	80217d6 <__swhatbuf_r+0x1e>
 8021800:	2100      	movs	r1, #0
 8021802:	2340      	movs	r3, #64	@ 0x40
 8021804:	e7e9      	b.n	80217da <__swhatbuf_r+0x22>
 8021806:	46c0      	nop			@ (mov r8, r8)
 8021808:	ffffe000 	.word	0xffffe000

0802180c <__smakebuf_r>:
 802180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802180e:	2602      	movs	r6, #2
 8021810:	898b      	ldrh	r3, [r1, #12]
 8021812:	0005      	movs	r5, r0
 8021814:	000c      	movs	r4, r1
 8021816:	b085      	sub	sp, #20
 8021818:	4233      	tst	r3, r6
 802181a:	d007      	beq.n	802182c <__smakebuf_r+0x20>
 802181c:	0023      	movs	r3, r4
 802181e:	3347      	adds	r3, #71	@ 0x47
 8021820:	6023      	str	r3, [r4, #0]
 8021822:	6123      	str	r3, [r4, #16]
 8021824:	2301      	movs	r3, #1
 8021826:	6163      	str	r3, [r4, #20]
 8021828:	b005      	add	sp, #20
 802182a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802182c:	ab03      	add	r3, sp, #12
 802182e:	aa02      	add	r2, sp, #8
 8021830:	f7ff ffc2 	bl	80217b8 <__swhatbuf_r>
 8021834:	9f02      	ldr	r7, [sp, #8]
 8021836:	9001      	str	r0, [sp, #4]
 8021838:	0039      	movs	r1, r7
 802183a:	0028      	movs	r0, r5
 802183c:	f7fe feee 	bl	802061c <_malloc_r>
 8021840:	2800      	cmp	r0, #0
 8021842:	d108      	bne.n	8021856 <__smakebuf_r+0x4a>
 8021844:	220c      	movs	r2, #12
 8021846:	5ea3      	ldrsh	r3, [r4, r2]
 8021848:	059a      	lsls	r2, r3, #22
 802184a:	d4ed      	bmi.n	8021828 <__smakebuf_r+0x1c>
 802184c:	2203      	movs	r2, #3
 802184e:	4393      	bics	r3, r2
 8021850:	431e      	orrs	r6, r3
 8021852:	81a6      	strh	r6, [r4, #12]
 8021854:	e7e2      	b.n	802181c <__smakebuf_r+0x10>
 8021856:	2380      	movs	r3, #128	@ 0x80
 8021858:	89a2      	ldrh	r2, [r4, #12]
 802185a:	6020      	str	r0, [r4, #0]
 802185c:	4313      	orrs	r3, r2
 802185e:	81a3      	strh	r3, [r4, #12]
 8021860:	9b03      	ldr	r3, [sp, #12]
 8021862:	6120      	str	r0, [r4, #16]
 8021864:	6167      	str	r7, [r4, #20]
 8021866:	2b00      	cmp	r3, #0
 8021868:	d00c      	beq.n	8021884 <__smakebuf_r+0x78>
 802186a:	0028      	movs	r0, r5
 802186c:	230e      	movs	r3, #14
 802186e:	5ee1      	ldrsh	r1, [r4, r3]
 8021870:	f000 f832 	bl	80218d8 <_isatty_r>
 8021874:	2800      	cmp	r0, #0
 8021876:	d005      	beq.n	8021884 <__smakebuf_r+0x78>
 8021878:	2303      	movs	r3, #3
 802187a:	89a2      	ldrh	r2, [r4, #12]
 802187c:	439a      	bics	r2, r3
 802187e:	3b02      	subs	r3, #2
 8021880:	4313      	orrs	r3, r2
 8021882:	81a3      	strh	r3, [r4, #12]
 8021884:	89a3      	ldrh	r3, [r4, #12]
 8021886:	9a01      	ldr	r2, [sp, #4]
 8021888:	4313      	orrs	r3, r2
 802188a:	81a3      	strh	r3, [r4, #12]
 802188c:	e7cc      	b.n	8021828 <__smakebuf_r+0x1c>

0802188e <memmove>:
 802188e:	b510      	push	{r4, lr}
 8021890:	4288      	cmp	r0, r1
 8021892:	d806      	bhi.n	80218a2 <memmove+0x14>
 8021894:	2300      	movs	r3, #0
 8021896:	429a      	cmp	r2, r3
 8021898:	d008      	beq.n	80218ac <memmove+0x1e>
 802189a:	5ccc      	ldrb	r4, [r1, r3]
 802189c:	54c4      	strb	r4, [r0, r3]
 802189e:	3301      	adds	r3, #1
 80218a0:	e7f9      	b.n	8021896 <memmove+0x8>
 80218a2:	188b      	adds	r3, r1, r2
 80218a4:	4298      	cmp	r0, r3
 80218a6:	d2f5      	bcs.n	8021894 <memmove+0x6>
 80218a8:	3a01      	subs	r2, #1
 80218aa:	d200      	bcs.n	80218ae <memmove+0x20>
 80218ac:	bd10      	pop	{r4, pc}
 80218ae:	5c8b      	ldrb	r3, [r1, r2]
 80218b0:	5483      	strb	r3, [r0, r2]
 80218b2:	e7f9      	b.n	80218a8 <memmove+0x1a>

080218b4 <_fstat_r>:
 80218b4:	2300      	movs	r3, #0
 80218b6:	b570      	push	{r4, r5, r6, lr}
 80218b8:	4d06      	ldr	r5, [pc, #24]	@ (80218d4 <_fstat_r+0x20>)
 80218ba:	0004      	movs	r4, r0
 80218bc:	0008      	movs	r0, r1
 80218be:	0011      	movs	r1, r2
 80218c0:	602b      	str	r3, [r5, #0]
 80218c2:	f7eb f973 	bl	800cbac <_fstat>
 80218c6:	1c43      	adds	r3, r0, #1
 80218c8:	d103      	bne.n	80218d2 <_fstat_r+0x1e>
 80218ca:	682b      	ldr	r3, [r5, #0]
 80218cc:	2b00      	cmp	r3, #0
 80218ce:	d000      	beq.n	80218d2 <_fstat_r+0x1e>
 80218d0:	6023      	str	r3, [r4, #0]
 80218d2:	bd70      	pop	{r4, r5, r6, pc}
 80218d4:	200038f0 	.word	0x200038f0

080218d8 <_isatty_r>:
 80218d8:	2300      	movs	r3, #0
 80218da:	b570      	push	{r4, r5, r6, lr}
 80218dc:	4d06      	ldr	r5, [pc, #24]	@ (80218f8 <_isatty_r+0x20>)
 80218de:	0004      	movs	r4, r0
 80218e0:	0008      	movs	r0, r1
 80218e2:	602b      	str	r3, [r5, #0]
 80218e4:	f7eb f970 	bl	800cbc8 <_isatty>
 80218e8:	1c43      	adds	r3, r0, #1
 80218ea:	d103      	bne.n	80218f4 <_isatty_r+0x1c>
 80218ec:	682b      	ldr	r3, [r5, #0]
 80218ee:	2b00      	cmp	r3, #0
 80218f0:	d000      	beq.n	80218f4 <_isatty_r+0x1c>
 80218f2:	6023      	str	r3, [r4, #0]
 80218f4:	bd70      	pop	{r4, r5, r6, pc}
 80218f6:	46c0      	nop			@ (mov r8, r8)
 80218f8:	200038f0 	.word	0x200038f0

080218fc <_sbrk_r>:
 80218fc:	2300      	movs	r3, #0
 80218fe:	b570      	push	{r4, r5, r6, lr}
 8021900:	4d06      	ldr	r5, [pc, #24]	@ (802191c <_sbrk_r+0x20>)
 8021902:	0004      	movs	r4, r0
 8021904:	0008      	movs	r0, r1
 8021906:	602b      	str	r3, [r5, #0]
 8021908:	f7eb f972 	bl	800cbf0 <_sbrk>
 802190c:	1c43      	adds	r3, r0, #1
 802190e:	d103      	bne.n	8021918 <_sbrk_r+0x1c>
 8021910:	682b      	ldr	r3, [r5, #0]
 8021912:	2b00      	cmp	r3, #0
 8021914:	d000      	beq.n	8021918 <_sbrk_r+0x1c>
 8021916:	6023      	str	r3, [r4, #0]
 8021918:	bd70      	pop	{r4, r5, r6, pc}
 802191a:	46c0      	nop			@ (mov r8, r8)
 802191c:	200038f0 	.word	0x200038f0

08021920 <__assert_func>:
 8021920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8021922:	0014      	movs	r4, r2
 8021924:	001a      	movs	r2, r3
 8021926:	4b09      	ldr	r3, [pc, #36]	@ (802194c <__assert_func+0x2c>)
 8021928:	0005      	movs	r5, r0
 802192a:	681b      	ldr	r3, [r3, #0]
 802192c:	000e      	movs	r6, r1
 802192e:	68d8      	ldr	r0, [r3, #12]
 8021930:	4b07      	ldr	r3, [pc, #28]	@ (8021950 <__assert_func+0x30>)
 8021932:	2c00      	cmp	r4, #0
 8021934:	d101      	bne.n	802193a <__assert_func+0x1a>
 8021936:	4b07      	ldr	r3, [pc, #28]	@ (8021954 <__assert_func+0x34>)
 8021938:	001c      	movs	r4, r3
 802193a:	4907      	ldr	r1, [pc, #28]	@ (8021958 <__assert_func+0x38>)
 802193c:	9301      	str	r3, [sp, #4]
 802193e:	9402      	str	r4, [sp, #8]
 8021940:	002b      	movs	r3, r5
 8021942:	9600      	str	r6, [sp, #0]
 8021944:	f000 f866 	bl	8021a14 <fiprintf>
 8021948:	f000 f874 	bl	8021a34 <abort>
 802194c:	200003c8 	.word	0x200003c8
 8021950:	080245c9 	.word	0x080245c9
 8021954:	08024604 	.word	0x08024604
 8021958:	080245d6 	.word	0x080245d6

0802195c <_calloc_r>:
 802195c:	b570      	push	{r4, r5, r6, lr}
 802195e:	0c0b      	lsrs	r3, r1, #16
 8021960:	0c15      	lsrs	r5, r2, #16
 8021962:	2b00      	cmp	r3, #0
 8021964:	d11e      	bne.n	80219a4 <_calloc_r+0x48>
 8021966:	2d00      	cmp	r5, #0
 8021968:	d10c      	bne.n	8021984 <_calloc_r+0x28>
 802196a:	b289      	uxth	r1, r1
 802196c:	b294      	uxth	r4, r2
 802196e:	434c      	muls	r4, r1
 8021970:	0021      	movs	r1, r4
 8021972:	f7fe fe53 	bl	802061c <_malloc_r>
 8021976:	1e05      	subs	r5, r0, #0
 8021978:	d01a      	beq.n	80219b0 <_calloc_r+0x54>
 802197a:	0022      	movs	r2, r4
 802197c:	2100      	movs	r1, #0
 802197e:	f7fd fb0f 	bl	801efa0 <memset>
 8021982:	e016      	b.n	80219b2 <_calloc_r+0x56>
 8021984:	1c2b      	adds	r3, r5, #0
 8021986:	1c0c      	adds	r4, r1, #0
 8021988:	b289      	uxth	r1, r1
 802198a:	b292      	uxth	r2, r2
 802198c:	434a      	muls	r2, r1
 802198e:	b29b      	uxth	r3, r3
 8021990:	b2a1      	uxth	r1, r4
 8021992:	4359      	muls	r1, r3
 8021994:	0c14      	lsrs	r4, r2, #16
 8021996:	190c      	adds	r4, r1, r4
 8021998:	0c23      	lsrs	r3, r4, #16
 802199a:	d107      	bne.n	80219ac <_calloc_r+0x50>
 802199c:	0424      	lsls	r4, r4, #16
 802199e:	b292      	uxth	r2, r2
 80219a0:	4314      	orrs	r4, r2
 80219a2:	e7e5      	b.n	8021970 <_calloc_r+0x14>
 80219a4:	2d00      	cmp	r5, #0
 80219a6:	d101      	bne.n	80219ac <_calloc_r+0x50>
 80219a8:	1c14      	adds	r4, r2, #0
 80219aa:	e7ed      	b.n	8021988 <_calloc_r+0x2c>
 80219ac:	230c      	movs	r3, #12
 80219ae:	6003      	str	r3, [r0, #0]
 80219b0:	2500      	movs	r5, #0
 80219b2:	0028      	movs	r0, r5
 80219b4:	bd70      	pop	{r4, r5, r6, pc}

080219b6 <_realloc_r>:
 80219b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80219b8:	0006      	movs	r6, r0
 80219ba:	000c      	movs	r4, r1
 80219bc:	0015      	movs	r5, r2
 80219be:	2900      	cmp	r1, #0
 80219c0:	d105      	bne.n	80219ce <_realloc_r+0x18>
 80219c2:	0011      	movs	r1, r2
 80219c4:	f7fe fe2a 	bl	802061c <_malloc_r>
 80219c8:	0004      	movs	r4, r0
 80219ca:	0020      	movs	r0, r4
 80219cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80219ce:	2a00      	cmp	r2, #0
 80219d0:	d103      	bne.n	80219da <_realloc_r+0x24>
 80219d2:	f7fe fa53 	bl	801fe7c <_free_r>
 80219d6:	2400      	movs	r4, #0
 80219d8:	e7f7      	b.n	80219ca <_realloc_r+0x14>
 80219da:	f000 f832 	bl	8021a42 <_malloc_usable_size_r>
 80219de:	0007      	movs	r7, r0
 80219e0:	4285      	cmp	r5, r0
 80219e2:	d802      	bhi.n	80219ea <_realloc_r+0x34>
 80219e4:	0843      	lsrs	r3, r0, #1
 80219e6:	42ab      	cmp	r3, r5
 80219e8:	d3ef      	bcc.n	80219ca <_realloc_r+0x14>
 80219ea:	0029      	movs	r1, r5
 80219ec:	0030      	movs	r0, r6
 80219ee:	f7fe fe15 	bl	802061c <_malloc_r>
 80219f2:	9001      	str	r0, [sp, #4]
 80219f4:	2800      	cmp	r0, #0
 80219f6:	d0ee      	beq.n	80219d6 <_realloc_r+0x20>
 80219f8:	002a      	movs	r2, r5
 80219fa:	42bd      	cmp	r5, r7
 80219fc:	d900      	bls.n	8021a00 <_realloc_r+0x4a>
 80219fe:	003a      	movs	r2, r7
 8021a00:	0021      	movs	r1, r4
 8021a02:	9801      	ldr	r0, [sp, #4]
 8021a04:	f7fd fba8 	bl	801f158 <memcpy>
 8021a08:	0021      	movs	r1, r4
 8021a0a:	0030      	movs	r0, r6
 8021a0c:	f7fe fa36 	bl	801fe7c <_free_r>
 8021a10:	9c01      	ldr	r4, [sp, #4]
 8021a12:	e7da      	b.n	80219ca <_realloc_r+0x14>

08021a14 <fiprintf>:
 8021a14:	b40e      	push	{r1, r2, r3}
 8021a16:	b517      	push	{r0, r1, r2, r4, lr}
 8021a18:	4c05      	ldr	r4, [pc, #20]	@ (8021a30 <fiprintf+0x1c>)
 8021a1a:	ab05      	add	r3, sp, #20
 8021a1c:	cb04      	ldmia	r3!, {r2}
 8021a1e:	0001      	movs	r1, r0
 8021a20:	6820      	ldr	r0, [r4, #0]
 8021a22:	9301      	str	r3, [sp, #4]
 8021a24:	f7ff fcfa 	bl	802141c <_vfiprintf_r>
 8021a28:	bc1e      	pop	{r1, r2, r3, r4}
 8021a2a:	bc08      	pop	{r3}
 8021a2c:	b003      	add	sp, #12
 8021a2e:	4718      	bx	r3
 8021a30:	200003c8 	.word	0x200003c8

08021a34 <abort>:
 8021a34:	2006      	movs	r0, #6
 8021a36:	b510      	push	{r4, lr}
 8021a38:	f000 f834 	bl	8021aa4 <raise>
 8021a3c:	2001      	movs	r0, #1
 8021a3e:	f7eb f881 	bl	800cb44 <_exit>

08021a42 <_malloc_usable_size_r>:
 8021a42:	1f0b      	subs	r3, r1, #4
 8021a44:	681b      	ldr	r3, [r3, #0]
 8021a46:	1f18      	subs	r0, r3, #4
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	da01      	bge.n	8021a50 <_malloc_usable_size_r+0xe>
 8021a4c:	580b      	ldr	r3, [r1, r0]
 8021a4e:	18c0      	adds	r0, r0, r3
 8021a50:	4770      	bx	lr

08021a52 <_raise_r>:
 8021a52:	b570      	push	{r4, r5, r6, lr}
 8021a54:	0004      	movs	r4, r0
 8021a56:	000d      	movs	r5, r1
 8021a58:	291f      	cmp	r1, #31
 8021a5a:	d904      	bls.n	8021a66 <_raise_r+0x14>
 8021a5c:	2316      	movs	r3, #22
 8021a5e:	6003      	str	r3, [r0, #0]
 8021a60:	2001      	movs	r0, #1
 8021a62:	4240      	negs	r0, r0
 8021a64:	bd70      	pop	{r4, r5, r6, pc}
 8021a66:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8021a68:	2b00      	cmp	r3, #0
 8021a6a:	d004      	beq.n	8021a76 <_raise_r+0x24>
 8021a6c:	008a      	lsls	r2, r1, #2
 8021a6e:	189b      	adds	r3, r3, r2
 8021a70:	681a      	ldr	r2, [r3, #0]
 8021a72:	2a00      	cmp	r2, #0
 8021a74:	d108      	bne.n	8021a88 <_raise_r+0x36>
 8021a76:	0020      	movs	r0, r4
 8021a78:	f000 f830 	bl	8021adc <_getpid_r>
 8021a7c:	002a      	movs	r2, r5
 8021a7e:	0001      	movs	r1, r0
 8021a80:	0020      	movs	r0, r4
 8021a82:	f000 f819 	bl	8021ab8 <_kill_r>
 8021a86:	e7ed      	b.n	8021a64 <_raise_r+0x12>
 8021a88:	2a01      	cmp	r2, #1
 8021a8a:	d009      	beq.n	8021aa0 <_raise_r+0x4e>
 8021a8c:	1c51      	adds	r1, r2, #1
 8021a8e:	d103      	bne.n	8021a98 <_raise_r+0x46>
 8021a90:	2316      	movs	r3, #22
 8021a92:	6003      	str	r3, [r0, #0]
 8021a94:	2001      	movs	r0, #1
 8021a96:	e7e5      	b.n	8021a64 <_raise_r+0x12>
 8021a98:	2100      	movs	r1, #0
 8021a9a:	0028      	movs	r0, r5
 8021a9c:	6019      	str	r1, [r3, #0]
 8021a9e:	4790      	blx	r2
 8021aa0:	2000      	movs	r0, #0
 8021aa2:	e7df      	b.n	8021a64 <_raise_r+0x12>

08021aa4 <raise>:
 8021aa4:	b510      	push	{r4, lr}
 8021aa6:	4b03      	ldr	r3, [pc, #12]	@ (8021ab4 <raise+0x10>)
 8021aa8:	0001      	movs	r1, r0
 8021aaa:	6818      	ldr	r0, [r3, #0]
 8021aac:	f7ff ffd1 	bl	8021a52 <_raise_r>
 8021ab0:	bd10      	pop	{r4, pc}
 8021ab2:	46c0      	nop			@ (mov r8, r8)
 8021ab4:	200003c8 	.word	0x200003c8

08021ab8 <_kill_r>:
 8021ab8:	2300      	movs	r3, #0
 8021aba:	b570      	push	{r4, r5, r6, lr}
 8021abc:	4d06      	ldr	r5, [pc, #24]	@ (8021ad8 <_kill_r+0x20>)
 8021abe:	0004      	movs	r4, r0
 8021ac0:	0008      	movs	r0, r1
 8021ac2:	0011      	movs	r1, r2
 8021ac4:	602b      	str	r3, [r5, #0]
 8021ac6:	f7eb f82d 	bl	800cb24 <_kill>
 8021aca:	1c43      	adds	r3, r0, #1
 8021acc:	d103      	bne.n	8021ad6 <_kill_r+0x1e>
 8021ace:	682b      	ldr	r3, [r5, #0]
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d000      	beq.n	8021ad6 <_kill_r+0x1e>
 8021ad4:	6023      	str	r3, [r4, #0]
 8021ad6:	bd70      	pop	{r4, r5, r6, pc}
 8021ad8:	200038f0 	.word	0x200038f0

08021adc <_getpid_r>:
 8021adc:	b510      	push	{r4, lr}
 8021ade:	f7eb f81b 	bl	800cb18 <_getpid>
 8021ae2:	bd10      	pop	{r4, pc}

08021ae4 <expf>:
 8021ae4:	b570      	push	{r4, r5, r6, lr}
 8021ae6:	1c04      	adds	r4, r0, #0
 8021ae8:	f000 f8e6 	bl	8021cb8 <__ieee754_expf>
 8021aec:	1c05      	adds	r5, r0, #0
 8021aee:	1c20      	adds	r0, r4, #0
 8021af0:	f000 f83c 	bl	8021b6c <finitef>
 8021af4:	2800      	cmp	r0, #0
 8021af6:	d00b      	beq.n	8021b10 <expf+0x2c>
 8021af8:	490c      	ldr	r1, [pc, #48]	@ (8021b2c <expf+0x48>)
 8021afa:	1c20      	adds	r0, r4, #0
 8021afc:	f7de fd2c 	bl	8000558 <__aeabi_fcmpgt>
 8021b00:	2800      	cmp	r0, #0
 8021b02:	d007      	beq.n	8021b14 <expf+0x30>
 8021b04:	f7fd faf0 	bl	801f0e8 <__errno>
 8021b08:	25ff      	movs	r5, #255	@ 0xff
 8021b0a:	2322      	movs	r3, #34	@ 0x22
 8021b0c:	05ed      	lsls	r5, r5, #23
 8021b0e:	6003      	str	r3, [r0, #0]
 8021b10:	1c28      	adds	r0, r5, #0
 8021b12:	bd70      	pop	{r4, r5, r6, pc}
 8021b14:	4906      	ldr	r1, [pc, #24]	@ (8021b30 <expf+0x4c>)
 8021b16:	1c20      	adds	r0, r4, #0
 8021b18:	f7de fd0a 	bl	8000530 <__aeabi_fcmplt>
 8021b1c:	2800      	cmp	r0, #0
 8021b1e:	d0f7      	beq.n	8021b10 <expf+0x2c>
 8021b20:	f7fd fae2 	bl	801f0e8 <__errno>
 8021b24:	2322      	movs	r3, #34	@ 0x22
 8021b26:	2500      	movs	r5, #0
 8021b28:	6003      	str	r3, [r0, #0]
 8021b2a:	e7f1      	b.n	8021b10 <expf+0x2c>
 8021b2c:	42b17217 	.word	0x42b17217
 8021b30:	c2cff1b5 	.word	0xc2cff1b5

08021b34 <sqrtf>:
 8021b34:	b570      	push	{r4, r5, r6, lr}
 8021b36:	1c05      	adds	r5, r0, #0
 8021b38:	f000 f822 	bl	8021b80 <__ieee754_sqrtf>
 8021b3c:	1c29      	adds	r1, r5, #0
 8021b3e:	1c04      	adds	r4, r0, #0
 8021b40:	1c28      	adds	r0, r5, #0
 8021b42:	f7df fd0f 	bl	8001564 <__aeabi_fcmpun>
 8021b46:	2800      	cmp	r0, #0
 8021b48:	d10e      	bne.n	8021b68 <sqrtf+0x34>
 8021b4a:	2100      	movs	r1, #0
 8021b4c:	1c28      	adds	r0, r5, #0
 8021b4e:	f7de fcef 	bl	8000530 <__aeabi_fcmplt>
 8021b52:	2800      	cmp	r0, #0
 8021b54:	d008      	beq.n	8021b68 <sqrtf+0x34>
 8021b56:	f7fd fac7 	bl	801f0e8 <__errno>
 8021b5a:	2321      	movs	r3, #33	@ 0x21
 8021b5c:	2100      	movs	r1, #0
 8021b5e:	6003      	str	r3, [r0, #0]
 8021b60:	1c08      	adds	r0, r1, #0
 8021b62:	f7df f837 	bl	8000bd4 <__aeabi_fdiv>
 8021b66:	1c04      	adds	r4, r0, #0
 8021b68:	1c20      	adds	r0, r4, #0
 8021b6a:	bd70      	pop	{r4, r5, r6, pc}

08021b6c <finitef>:
 8021b6c:	22ff      	movs	r2, #255	@ 0xff
 8021b6e:	0043      	lsls	r3, r0, #1
 8021b70:	085b      	lsrs	r3, r3, #1
 8021b72:	2001      	movs	r0, #1
 8021b74:	05d2      	lsls	r2, r2, #23
 8021b76:	4293      	cmp	r3, r2
 8021b78:	db00      	blt.n	8021b7c <finitef+0x10>
 8021b7a:	2000      	movs	r0, #0
 8021b7c:	4770      	bx	lr
	...

08021b80 <__ieee754_sqrtf>:
 8021b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021b82:	0003      	movs	r3, r0
 8021b84:	0042      	lsls	r2, r0, #1
 8021b86:	1c04      	adds	r4, r0, #0
 8021b88:	20ff      	movs	r0, #255	@ 0xff
 8021b8a:	0852      	lsrs	r2, r2, #1
 8021b8c:	05c0      	lsls	r0, r0, #23
 8021b8e:	4282      	cmp	r2, r0
 8021b90:	d30a      	bcc.n	8021ba8 <__ieee754_sqrtf+0x28>
 8021b92:	1c21      	adds	r1, r4, #0
 8021b94:	1c20      	adds	r0, r4, #0
 8021b96:	f7df fa03 	bl	8000fa0 <__aeabi_fmul>
 8021b9a:	1c01      	adds	r1, r0, #0
 8021b9c:	1c20      	adds	r0, r4, #0
 8021b9e:	f7de fe8f 	bl	80008c0 <__aeabi_fadd>
 8021ba2:	1c04      	adds	r4, r0, #0
 8021ba4:	1c20      	adds	r0, r4, #0
 8021ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021ba8:	2a00      	cmp	r2, #0
 8021baa:	d0fb      	beq.n	8021ba4 <__ieee754_sqrtf+0x24>
 8021bac:	2c00      	cmp	r4, #0
 8021bae:	da07      	bge.n	8021bc0 <__ieee754_sqrtf+0x40>
 8021bb0:	1c21      	adds	r1, r4, #0
 8021bb2:	1c20      	adds	r0, r4, #0
 8021bb4:	f7df fb32 	bl	800121c <__aeabi_fsub>
 8021bb8:	1c01      	adds	r1, r0, #0
 8021bba:	f7df f80b 	bl	8000bd4 <__aeabi_fdiv>
 8021bbe:	e7f0      	b.n	8021ba2 <__ieee754_sqrtf+0x22>
 8021bc0:	0022      	movs	r2, r4
 8021bc2:	15e1      	asrs	r1, r4, #23
 8021bc4:	4002      	ands	r2, r0
 8021bc6:	4204      	tst	r4, r0
 8021bc8:	d046      	beq.n	8021c58 <__ieee754_sqrtf+0xd8>
 8021bca:	2280      	movs	r2, #128	@ 0x80
 8021bcc:	000f      	movs	r7, r1
 8021bce:	025b      	lsls	r3, r3, #9
 8021bd0:	0a5b      	lsrs	r3, r3, #9
 8021bd2:	0412      	lsls	r2, r2, #16
 8021bd4:	3f7f      	subs	r7, #127	@ 0x7f
 8021bd6:	4313      	orrs	r3, r2
 8021bd8:	07c9      	lsls	r1, r1, #31
 8021bda:	d400      	bmi.n	8021bde <__ieee754_sqrtf+0x5e>
 8021bdc:	005b      	lsls	r3, r3, #1
 8021bde:	2400      	movs	r4, #0
 8021be0:	2180      	movs	r1, #128	@ 0x80
 8021be2:	2019      	movs	r0, #25
 8021be4:	0026      	movs	r6, r4
 8021be6:	107f      	asrs	r7, r7, #1
 8021be8:	005b      	lsls	r3, r3, #1
 8021bea:	0449      	lsls	r1, r1, #17
 8021bec:	1875      	adds	r5, r6, r1
 8021bee:	001a      	movs	r2, r3
 8021bf0:	429d      	cmp	r5, r3
 8021bf2:	dc02      	bgt.n	8021bfa <__ieee754_sqrtf+0x7a>
 8021bf4:	186e      	adds	r6, r5, r1
 8021bf6:	1b5a      	subs	r2, r3, r5
 8021bf8:	1864      	adds	r4, r4, r1
 8021bfa:	3801      	subs	r0, #1
 8021bfc:	0053      	lsls	r3, r2, #1
 8021bfe:	0849      	lsrs	r1, r1, #1
 8021c00:	2800      	cmp	r0, #0
 8021c02:	d1f3      	bne.n	8021bec <__ieee754_sqrtf+0x6c>
 8021c04:	2a00      	cmp	r2, #0
 8021c06:	d019      	beq.n	8021c3c <__ieee754_sqrtf+0xbc>
 8021c08:	4d17      	ldr	r5, [pc, #92]	@ (8021c68 <__ieee754_sqrtf+0xe8>)
 8021c0a:	4e18      	ldr	r6, [pc, #96]	@ (8021c6c <__ieee754_sqrtf+0xec>)
 8021c0c:	6828      	ldr	r0, [r5, #0]
 8021c0e:	6831      	ldr	r1, [r6, #0]
 8021c10:	682b      	ldr	r3, [r5, #0]
 8021c12:	9301      	str	r3, [sp, #4]
 8021c14:	f7df fb02 	bl	800121c <__aeabi_fsub>
 8021c18:	1c01      	adds	r1, r0, #0
 8021c1a:	9801      	ldr	r0, [sp, #4]
 8021c1c:	f7de fc92 	bl	8000544 <__aeabi_fcmple>
 8021c20:	2800      	cmp	r0, #0
 8021c22:	d00b      	beq.n	8021c3c <__ieee754_sqrtf+0xbc>
 8021c24:	6828      	ldr	r0, [r5, #0]
 8021c26:	6831      	ldr	r1, [r6, #0]
 8021c28:	f7de fe4a 	bl	80008c0 <__aeabi_fadd>
 8021c2c:	682d      	ldr	r5, [r5, #0]
 8021c2e:	1c01      	adds	r1, r0, #0
 8021c30:	1c28      	adds	r0, r5, #0
 8021c32:	f7de fc7d 	bl	8000530 <__aeabi_fcmplt>
 8021c36:	2800      	cmp	r0, #0
 8021c38:	d011      	beq.n	8021c5e <__ieee754_sqrtf+0xde>
 8021c3a:	3402      	adds	r4, #2
 8021c3c:	23fc      	movs	r3, #252	@ 0xfc
 8021c3e:	1064      	asrs	r4, r4, #1
 8021c40:	059b      	lsls	r3, r3, #22
 8021c42:	18e3      	adds	r3, r4, r3
 8021c44:	05fc      	lsls	r4, r7, #23
 8021c46:	18e4      	adds	r4, r4, r3
 8021c48:	e7ac      	b.n	8021ba4 <__ieee754_sqrtf+0x24>
 8021c4a:	005b      	lsls	r3, r3, #1
 8021c4c:	3201      	adds	r2, #1
 8021c4e:	4203      	tst	r3, r0
 8021c50:	d0fb      	beq.n	8021c4a <__ieee754_sqrtf+0xca>
 8021c52:	3a01      	subs	r2, #1
 8021c54:	1a89      	subs	r1, r1, r2
 8021c56:	e7b8      	b.n	8021bca <__ieee754_sqrtf+0x4a>
 8021c58:	2080      	movs	r0, #128	@ 0x80
 8021c5a:	0400      	lsls	r0, r0, #16
 8021c5c:	e7f7      	b.n	8021c4e <__ieee754_sqrtf+0xce>
 8021c5e:	2301      	movs	r3, #1
 8021c60:	3401      	adds	r4, #1
 8021c62:	439c      	bics	r4, r3
 8021c64:	e7ea      	b.n	8021c3c <__ieee754_sqrtf+0xbc>
 8021c66:	46c0      	nop			@ (mov r8, r8)
 8021c68:	2000041c 	.word	0x2000041c
 8021c6c:	20000418 	.word	0x20000418

08021c70 <roundf>:
 8021c70:	0dc3      	lsrs	r3, r0, #23
 8021c72:	b2db      	uxtb	r3, r3
 8021c74:	3b7f      	subs	r3, #127	@ 0x7f
 8021c76:	0002      	movs	r2, r0
 8021c78:	b510      	push	{r4, lr}
 8021c7a:	2b16      	cmp	r3, #22
 8021c7c:	dc13      	bgt.n	8021ca6 <roundf+0x36>
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	da07      	bge.n	8021c92 <roundf+0x22>
 8021c82:	0fc2      	lsrs	r2, r0, #31
 8021c84:	07d0      	lsls	r0, r2, #31
 8021c86:	3301      	adds	r3, #1
 8021c88:	d102      	bne.n	8021c90 <roundf+0x20>
 8021c8a:	23fe      	movs	r3, #254	@ 0xfe
 8021c8c:	059b      	lsls	r3, r3, #22
 8021c8e:	4318      	orrs	r0, r3
 8021c90:	bd10      	pop	{r4, pc}
 8021c92:	4908      	ldr	r1, [pc, #32]	@ (8021cb4 <roundf+0x44>)
 8021c94:	4119      	asrs	r1, r3
 8021c96:	4208      	tst	r0, r1
 8021c98:	d0fa      	beq.n	8021c90 <roundf+0x20>
 8021c9a:	2080      	movs	r0, #128	@ 0x80
 8021c9c:	03c0      	lsls	r0, r0, #15
 8021c9e:	4118      	asrs	r0, r3
 8021ca0:	1880      	adds	r0, r0, r2
 8021ca2:	4388      	bics	r0, r1
 8021ca4:	e7f4      	b.n	8021c90 <roundf+0x20>
 8021ca6:	2b80      	cmp	r3, #128	@ 0x80
 8021ca8:	d1f2      	bne.n	8021c90 <roundf+0x20>
 8021caa:	1c01      	adds	r1, r0, #0
 8021cac:	f7de fe08 	bl	80008c0 <__aeabi_fadd>
 8021cb0:	e7ee      	b.n	8021c90 <roundf+0x20>
 8021cb2:	46c0      	nop			@ (mov r8, r8)
 8021cb4:	007fffff 	.word	0x007fffff

08021cb8 <__ieee754_expf>:
 8021cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021cba:	21ff      	movs	r1, #255	@ 0xff
 8021cbc:	0043      	lsls	r3, r0, #1
 8021cbe:	1c04      	adds	r4, r0, #0
 8021cc0:	085b      	lsrs	r3, r3, #1
 8021cc2:	05c9      	lsls	r1, r1, #23
 8021cc4:	428b      	cmp	r3, r1
 8021cc6:	d904      	bls.n	8021cd2 <__ieee754_expf+0x1a>
 8021cc8:	1c01      	adds	r1, r0, #0
 8021cca:	1c20      	adds	r0, r4, #0
 8021ccc:	f7de fdf8 	bl	80008c0 <__aeabi_fadd>
 8021cd0:	e00d      	b.n	8021cee <__ieee754_expf+0x36>
 8021cd2:	0fc6      	lsrs	r6, r0, #31
 8021cd4:	428b      	cmp	r3, r1
 8021cd6:	d104      	bne.n	8021ce2 <__ieee754_expf+0x2a>
 8021cd8:	2e00      	cmp	r6, #0
 8021cda:	d000      	beq.n	8021cde <__ieee754_expf+0x26>
 8021cdc:	e0ba      	b.n	8021e54 <__ieee754_expf+0x19c>
 8021cde:	1c20      	adds	r0, r4, #0
 8021ce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8021ce2:	495d      	ldr	r1, [pc, #372]	@ (8021e58 <__ieee754_expf+0x1a0>)
 8021ce4:	4288      	cmp	r0, r1
 8021ce6:	dd04      	ble.n	8021cf2 <__ieee754_expf+0x3a>
 8021ce8:	2000      	movs	r0, #0
 8021cea:	f000 f8f1 	bl	8021ed0 <__math_oflowf>
 8021cee:	1c04      	adds	r4, r0, #0
 8021cf0:	e7f5      	b.n	8021cde <__ieee754_expf+0x26>
 8021cf2:	2800      	cmp	r0, #0
 8021cf4:	da06      	bge.n	8021d04 <__ieee754_expf+0x4c>
 8021cf6:	4a59      	ldr	r2, [pc, #356]	@ (8021e5c <__ieee754_expf+0x1a4>)
 8021cf8:	4293      	cmp	r3, r2
 8021cfa:	d903      	bls.n	8021d04 <__ieee754_expf+0x4c>
 8021cfc:	2000      	movs	r0, #0
 8021cfe:	f000 f8e1 	bl	8021ec4 <__math_uflowf>
 8021d02:	e7f4      	b.n	8021cee <__ieee754_expf+0x36>
 8021d04:	4a56      	ldr	r2, [pc, #344]	@ (8021e60 <__ieee754_expf+0x1a8>)
 8021d06:	4293      	cmp	r3, r2
 8021d08:	d96e      	bls.n	8021de8 <__ieee754_expf+0x130>
 8021d0a:	4a56      	ldr	r2, [pc, #344]	@ (8021e64 <__ieee754_expf+0x1ac>)
 8021d0c:	00b5      	lsls	r5, r6, #2
 8021d0e:	4293      	cmp	r3, r2
 8021d10:	d84e      	bhi.n	8021db0 <__ieee754_expf+0xf8>
 8021d12:	4b55      	ldr	r3, [pc, #340]	@ (8021e68 <__ieee754_expf+0x1b0>)
 8021d14:	1c20      	adds	r0, r4, #0
 8021d16:	5959      	ldr	r1, [r3, r5]
 8021d18:	f7df fa80 	bl	800121c <__aeabi_fsub>
 8021d1c:	4b53      	ldr	r3, [pc, #332]	@ (8021e6c <__ieee754_expf+0x1b4>)
 8021d1e:	1c07      	adds	r7, r0, #0
 8021d20:	595b      	ldr	r3, [r3, r5]
 8021d22:	2501      	movs	r5, #1
 8021d24:	1bad      	subs	r5, r5, r6
 8021d26:	9300      	str	r3, [sp, #0]
 8021d28:	1bad      	subs	r5, r5, r6
 8021d2a:	9900      	ldr	r1, [sp, #0]
 8021d2c:	1c38      	adds	r0, r7, #0
 8021d2e:	f7df fa75 	bl	800121c <__aeabi_fsub>
 8021d32:	1c04      	adds	r4, r0, #0
 8021d34:	1c21      	adds	r1, r4, #0
 8021d36:	1c20      	adds	r0, r4, #0
 8021d38:	f7df f932 	bl	8000fa0 <__aeabi_fmul>
 8021d3c:	494c      	ldr	r1, [pc, #304]	@ (8021e70 <__ieee754_expf+0x1b8>)
 8021d3e:	1c06      	adds	r6, r0, #0
 8021d40:	f7df f92e 	bl	8000fa0 <__aeabi_fmul>
 8021d44:	494b      	ldr	r1, [pc, #300]	@ (8021e74 <__ieee754_expf+0x1bc>)
 8021d46:	f7df fa69 	bl	800121c <__aeabi_fsub>
 8021d4a:	1c31      	adds	r1, r6, #0
 8021d4c:	f7df f928 	bl	8000fa0 <__aeabi_fmul>
 8021d50:	4949      	ldr	r1, [pc, #292]	@ (8021e78 <__ieee754_expf+0x1c0>)
 8021d52:	f7de fdb5 	bl	80008c0 <__aeabi_fadd>
 8021d56:	1c31      	adds	r1, r6, #0
 8021d58:	f7df f922 	bl	8000fa0 <__aeabi_fmul>
 8021d5c:	4947      	ldr	r1, [pc, #284]	@ (8021e7c <__ieee754_expf+0x1c4>)
 8021d5e:	f7df fa5d 	bl	800121c <__aeabi_fsub>
 8021d62:	1c31      	adds	r1, r6, #0
 8021d64:	f7df f91c 	bl	8000fa0 <__aeabi_fmul>
 8021d68:	4945      	ldr	r1, [pc, #276]	@ (8021e80 <__ieee754_expf+0x1c8>)
 8021d6a:	f7de fda9 	bl	80008c0 <__aeabi_fadd>
 8021d6e:	1c31      	adds	r1, r6, #0
 8021d70:	f7df f916 	bl	8000fa0 <__aeabi_fmul>
 8021d74:	1c01      	adds	r1, r0, #0
 8021d76:	1c20      	adds	r0, r4, #0
 8021d78:	f7df fa50 	bl	800121c <__aeabi_fsub>
 8021d7c:	1c01      	adds	r1, r0, #0
 8021d7e:	1c06      	adds	r6, r0, #0
 8021d80:	1c20      	adds	r0, r4, #0
 8021d82:	f7df f90d 	bl	8000fa0 <__aeabi_fmul>
 8021d86:	9001      	str	r0, [sp, #4]
 8021d88:	2d00      	cmp	r5, #0
 8021d8a:	d140      	bne.n	8021e0e <__ieee754_expf+0x156>
 8021d8c:	2180      	movs	r1, #128	@ 0x80
 8021d8e:	1c30      	adds	r0, r6, #0
 8021d90:	05c9      	lsls	r1, r1, #23
 8021d92:	f7df fa43 	bl	800121c <__aeabi_fsub>
 8021d96:	1c01      	adds	r1, r0, #0
 8021d98:	9801      	ldr	r0, [sp, #4]
 8021d9a:	f7de ff1b 	bl	8000bd4 <__aeabi_fdiv>
 8021d9e:	1c21      	adds	r1, r4, #0
 8021da0:	f7df fa3c 	bl	800121c <__aeabi_fsub>
 8021da4:	1c01      	adds	r1, r0, #0
 8021da6:	20fe      	movs	r0, #254	@ 0xfe
 8021da8:	0580      	lsls	r0, r0, #22
 8021daa:	f7df fa37 	bl	800121c <__aeabi_fsub>
 8021dae:	e79e      	b.n	8021cee <__ieee754_expf+0x36>
 8021db0:	4934      	ldr	r1, [pc, #208]	@ (8021e84 <__ieee754_expf+0x1cc>)
 8021db2:	1c20      	adds	r0, r4, #0
 8021db4:	f7df f8f4 	bl	8000fa0 <__aeabi_fmul>
 8021db8:	4b33      	ldr	r3, [pc, #204]	@ (8021e88 <__ieee754_expf+0x1d0>)
 8021dba:	5959      	ldr	r1, [r3, r5]
 8021dbc:	f7de fd80 	bl	80008c0 <__aeabi_fadd>
 8021dc0:	f7df fbe6 	bl	8001590 <__aeabi_f2iz>
 8021dc4:	0005      	movs	r5, r0
 8021dc6:	f7df fc03 	bl	80015d0 <__aeabi_i2f>
 8021dca:	4930      	ldr	r1, [pc, #192]	@ (8021e8c <__ieee754_expf+0x1d4>)
 8021dcc:	1c06      	adds	r6, r0, #0
 8021dce:	f7df f8e7 	bl	8000fa0 <__aeabi_fmul>
 8021dd2:	1c01      	adds	r1, r0, #0
 8021dd4:	1c20      	adds	r0, r4, #0
 8021dd6:	f7df fa21 	bl	800121c <__aeabi_fsub>
 8021dda:	492d      	ldr	r1, [pc, #180]	@ (8021e90 <__ieee754_expf+0x1d8>)
 8021ddc:	1c07      	adds	r7, r0, #0
 8021dde:	1c30      	adds	r0, r6, #0
 8021de0:	f7df f8de 	bl	8000fa0 <__aeabi_fmul>
 8021de4:	9000      	str	r0, [sp, #0]
 8021de6:	e7a0      	b.n	8021d2a <__ieee754_expf+0x72>
 8021de8:	22d0      	movs	r2, #208	@ 0xd0
 8021dea:	0592      	lsls	r2, r2, #22
 8021dec:	4293      	cmp	r3, r2
 8021dee:	d20c      	bcs.n	8021e0a <__ieee754_expf+0x152>
 8021df0:	4928      	ldr	r1, [pc, #160]	@ (8021e94 <__ieee754_expf+0x1dc>)
 8021df2:	1c20      	adds	r0, r4, #0
 8021df4:	f7de fd64 	bl	80008c0 <__aeabi_fadd>
 8021df8:	21fe      	movs	r1, #254	@ 0xfe
 8021dfa:	0589      	lsls	r1, r1, #22
 8021dfc:	f7de fbac 	bl	8000558 <__aeabi_fcmpgt>
 8021e00:	1e05      	subs	r5, r0, #0
 8021e02:	d097      	beq.n	8021d34 <__ieee754_expf+0x7c>
 8021e04:	21fe      	movs	r1, #254	@ 0xfe
 8021e06:	0589      	lsls	r1, r1, #22
 8021e08:	e75f      	b.n	8021cca <__ieee754_expf+0x12>
 8021e0a:	2500      	movs	r5, #0
 8021e0c:	e792      	b.n	8021d34 <__ieee754_expf+0x7c>
 8021e0e:	2080      	movs	r0, #128	@ 0x80
 8021e10:	1c31      	adds	r1, r6, #0
 8021e12:	05c0      	lsls	r0, r0, #23
 8021e14:	f7df fa02 	bl	800121c <__aeabi_fsub>
 8021e18:	1c01      	adds	r1, r0, #0
 8021e1a:	9801      	ldr	r0, [sp, #4]
 8021e1c:	f7de feda 	bl	8000bd4 <__aeabi_fdiv>
 8021e20:	1c01      	adds	r1, r0, #0
 8021e22:	9800      	ldr	r0, [sp, #0]
 8021e24:	f7df f9fa 	bl	800121c <__aeabi_fsub>
 8021e28:	1c39      	adds	r1, r7, #0
 8021e2a:	f7df f9f7 	bl	800121c <__aeabi_fsub>
 8021e2e:	1c01      	adds	r1, r0, #0
 8021e30:	20fe      	movs	r0, #254	@ 0xfe
 8021e32:	0580      	lsls	r0, r0, #22
 8021e34:	f7df f9f2 	bl	800121c <__aeabi_fsub>
 8021e38:	002b      	movs	r3, r5
 8021e3a:	337d      	adds	r3, #125	@ 0x7d
 8021e3c:	db02      	blt.n	8021e44 <__ieee754_expf+0x18c>
 8021e3e:	05ec      	lsls	r4, r5, #23
 8021e40:	1824      	adds	r4, r4, r0
 8021e42:	e74c      	b.n	8021cde <__ieee754_expf+0x26>
 8021e44:	21d8      	movs	r1, #216	@ 0xd8
 8021e46:	3564      	adds	r5, #100	@ 0x64
 8021e48:	05ed      	lsls	r5, r5, #23
 8021e4a:	1828      	adds	r0, r5, r0
 8021e4c:	0509      	lsls	r1, r1, #20
 8021e4e:	f7df f8a7 	bl	8000fa0 <__aeabi_fmul>
 8021e52:	e74c      	b.n	8021cee <__ieee754_expf+0x36>
 8021e54:	2400      	movs	r4, #0
 8021e56:	e742      	b.n	8021cde <__ieee754_expf+0x26>
 8021e58:	42b17217 	.word	0x42b17217
 8021e5c:	42cff1b5 	.word	0x42cff1b5
 8021e60:	3eb17218 	.word	0x3eb17218
 8021e64:	3f851591 	.word	0x3f851591
 8021e68:	08024610 	.word	0x08024610
 8021e6c:	08024608 	.word	0x08024608
 8021e70:	3331bb4c 	.word	0x3331bb4c
 8021e74:	35ddea0e 	.word	0x35ddea0e
 8021e78:	388ab355 	.word	0x388ab355
 8021e7c:	3b360b61 	.word	0x3b360b61
 8021e80:	3e2aaaab 	.word	0x3e2aaaab
 8021e84:	3fb8aa3b 	.word	0x3fb8aa3b
 8021e88:	08024618 	.word	0x08024618
 8021e8c:	3f317180 	.word	0x3f317180
 8021e90:	3717f7d1 	.word	0x3717f7d1
 8021e94:	7149f2ca 	.word	0x7149f2ca

08021e98 <with_errnof>:
 8021e98:	b570      	push	{r4, r5, r6, lr}
 8021e9a:	000d      	movs	r5, r1
 8021e9c:	1c04      	adds	r4, r0, #0
 8021e9e:	f7fd f923 	bl	801f0e8 <__errno>
 8021ea2:	6005      	str	r5, [r0, #0]
 8021ea4:	1c20      	adds	r0, r4, #0
 8021ea6:	bd70      	pop	{r4, r5, r6, pc}

08021ea8 <xflowf>:
 8021ea8:	b510      	push	{r4, lr}
 8021eaa:	1c0b      	adds	r3, r1, #0
 8021eac:	2800      	cmp	r0, #0
 8021eae:	d002      	beq.n	8021eb6 <xflowf+0xe>
 8021eb0:	2380      	movs	r3, #128	@ 0x80
 8021eb2:	061b      	lsls	r3, r3, #24
 8021eb4:	18cb      	adds	r3, r1, r3
 8021eb6:	1c18      	adds	r0, r3, #0
 8021eb8:	f7df f872 	bl	8000fa0 <__aeabi_fmul>
 8021ebc:	2122      	movs	r1, #34	@ 0x22
 8021ebe:	f7ff ffeb 	bl	8021e98 <with_errnof>
 8021ec2:	bd10      	pop	{r4, pc}

08021ec4 <__math_uflowf>:
 8021ec4:	2180      	movs	r1, #128	@ 0x80
 8021ec6:	b510      	push	{r4, lr}
 8021ec8:	0549      	lsls	r1, r1, #21
 8021eca:	f7ff ffed 	bl	8021ea8 <xflowf>
 8021ece:	bd10      	pop	{r4, pc}

08021ed0 <__math_oflowf>:
 8021ed0:	21e0      	movs	r1, #224	@ 0xe0
 8021ed2:	b510      	push	{r4, lr}
 8021ed4:	05c9      	lsls	r1, r1, #23
 8021ed6:	f7ff ffe7 	bl	8021ea8 <xflowf>
 8021eda:	bd10      	pop	{r4, pc}

08021edc <_init>:
 8021edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ede:	46c0      	nop			@ (mov r8, r8)
 8021ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ee2:	bc08      	pop	{r3}
 8021ee4:	469e      	mov	lr, r3
 8021ee6:	4770      	bx	lr

08021ee8 <_fini>:
 8021ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021eea:	46c0      	nop			@ (mov r8, r8)
 8021eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021eee:	bc08      	pop	{r3}
 8021ef0:	469e      	mov	lr, r3
 8021ef2:	4770      	bx	lr
